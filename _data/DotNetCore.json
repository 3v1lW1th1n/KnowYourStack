{"Data":{"Blog":{"FeedItems":[{"Title":".NET Core April 2019 Updates – 2.1.10 and 2.2.4","PublishedOn":"2019-04-09T20:35:28+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, we are releasing the .NET Core April 2019 Update. These updates contain security and reliability fixes. See the individual release notes for details on included fixes.\n\n.NET Core 2.2.4 and .NET...","Href":"https://devblogs.microsoft.com/dotnet/net-core-april-2019-updates-2-1-10-and-2-2-4/","RawContent":null},{"Title":"Announcing ML.NET 1.0 RC – Machine Learning for .NET","PublishedOn":"2019-04-05T23:36:08+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"ML.NET is an open-source and cross-platform machine learning framework (Windows, Linux, macOS) for .NET developers. Using ML.NET, developers can leverage their existing tools and skillsets to develop...","Href":"https://devblogs.microsoft.com/dotnet/announcing-ml-net-1-0-rc-machine-learning-for-net/","RawContent":null},{"Title":".NET Framework April 2, 2019 Cumulative Update for Windows 10 version 1809 and Windows Server 2019","PublishedOn":"2019-04-02T21:47:22+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, we released the March 2019 Update for Windows 10 version 1809 and Windows Server 2019.\nQuality and Reliability\nThis release contains the following quality and reliability...","Href":"https://devblogs.microsoft.com/dotnet/net-framework-april-2-2019-cumulative-update-for-windows-10-version-1809-and-windows-server-2019/","RawContent":null},{"Title":"Visual Studio 2019 .NET productivity","PublishedOn":"2019-04-02T19:00:17+00:00","CommentsCount":5,"FacebookCount":0,"Summary":"Your friendly neighborhood .NET productivity team (aka. Roslyn) focuses a lot on improving the .NET coding experience. Sometimes it’s the little refactorings and code fixes that really improve your...","Href":"https://devblogs.microsoft.com/dotnet/visual-studio-2019-net-productivity-2/","RawContent":null},{"Title":"Handling a new era in the Japanese calendar in .NET","PublishedOn":"2019-04-02T10:40:13+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Typically, calendar eras represent long time periods. In the Gregorian calendar, for example, the current era spans (as of this year) 2,019 years. In the Japanese calendar, however, a new era begins...","Href":"https://devblogs.microsoft.com/dotnet/handling-a-new-era-in-the-japanese-calendar-in-net/","RawContent":null},{"Title":"Announcing F# 4.6","PublishedOn":"2019-03-29T21:40:28+00:00","CommentsCount":4,"FacebookCount":0,"Summary":"We&#8217;re excited to announce general availability of F# 4.6 and the F# tools for Visual Studio 2019! In this post, I&#8217;ll show you how to get started, explain the F# 4.6 feature set, give you...","Href":"https://devblogs.microsoft.com/dotnet/announcing-f-4-6/","RawContent":null},{"Title":"Migrating Delegate.BeginInvoke Calls for .NET Core","PublishedOn":"2019-03-28T21:29:50+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"I recently worked with a couple customers migrating applications to .NET Core that had to make code changes to workaround BeginInvoke and EndInvoke methods on delegates not being supported on .NET...","Href":"https://devblogs.microsoft.com/dotnet/migrating-delegate-begininvoke-calls-for-net-core/","RawContent":null},{"Title":".NET Framework March 2019 Update","PublishedOn":"2019-03-20T00:40:46+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, we released the March 2019 Update.\nQuality and Reliability\nThis release contains the following quality and reliability improvements.\nCLR\n\nAddresses an issue in which the Framework throws an...","Href":"https://devblogs.microsoft.com/dotnet/net-framework-march-2019-update/","RawContent":null},{"Title":".NET Core Container Images now Published to Microsoft Container Registry","PublishedOn":"2019-03-15T14:12:09+00:00","CommentsCount":4,"FacebookCount":0,"Summary":"We are now publishing .NET Core container images to Microsoft Container Registry (MCR). We have also made other changes to the images we publish, described in this post.\nImportant: You will need to...","Href":"https://devblogs.microsoft.com/dotnet/net-core-container-images-now-published-to-microsoft-container-registry/","RawContent":null},{"Title":".NET Core March 2019 Updates – 1.0.15, 1.1.12, 2.1.9 and 2.2.3","PublishedOn":"2019-03-12T22:59:50+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, we are releasing the .NET Core March 2019 Update. These updates contain security and reliability fixes. See the individual release notes for details on included reliability fixes.\n\n.NET Core...","Href":"https://devblogs.microsoft.com/dotnet/net-core-march-2019/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"9341532248","Type":"PullRequestEvent","CreatedAt":"2019-03-29T14:44:24","Actor":"BillWagner","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/142","RelatedDescription":"Merged pull request \"add docs samples link\" (#142) at dotnet/foundation","RelatedBody":"@BillWagner should we add the samples project too?"},{"Id":"9337730849","Type":"PullRequestEvent","CreatedAt":"2019-03-29T02:29:48","Actor":"mairaw","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/142","RelatedDescription":"Opened pull request \"add docs samples link\" (#142) at dotnet/foundation","RelatedBody":"@BillWagner should we add the samples project too?"},{"Id":"9337725308","Type":"PullRequestEvent","CreatedAt":"2019-03-29T02:28:20","Actor":"mairaw","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/141","RelatedDescription":"Opened pull request \"add links to ML.NET docs\" (#141) at dotnet/foundation","RelatedBody":"/cc @JRAlexander @shauheen \r\n\r\nTo match the info we have added for other projects"},{"Id":"9337679090","Type":"PullRequestEvent","CreatedAt":"2019-03-29T02:16:08","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/139","RelatedDescription":"Merged pull request \"Add link to ASP.NET Core docs\" (#139) at dotnet/foundation","RelatedBody":"Provide a link to the docs site for ASP.NET Core."},{"Id":"9337677839","Type":"PullRequestEvent","CreatedAt":"2019-03-29T02:15:48","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/140","RelatedDescription":"Merged pull request \"add links to .NET docs\" (#140) at dotnet/foundation","RelatedBody":"/cc @mairaw @scottaddie\r\n\r\nMaira, did I miss any project repos to tag?"},{"Id":"9335742237","Type":"PullRequestEvent","CreatedAt":"2019-03-28T19:21:55","Actor":"BillWagner","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/140","RelatedDescription":"Opened pull request \"add links to .NET docs\" (#140) at dotnet/foundation","RelatedBody":"/cc @mairaw @scottaddie\r\n\r\nMaira, did I miss any project repos to tag?"},{"Id":"9335605309","Type":"PullRequestEvent","CreatedAt":"2019-03-28T19:00:02","Actor":"scottaddie","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/139","RelatedDescription":"Opened pull request \"Add link to ASP.NET Core docs\" (#139) at dotnet/foundation","RelatedBody":"Provide a link to the docs site for ASP.NET Core."},{"Id":"9266562420","Type":"PullRequestEvent","CreatedAt":"2019-03-18T21:04:01","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/137","RelatedDescription":"Merged pull request \"Add V3.1 repo and change documentation link\" (#137) at dotnet/foundation","RelatedBody":""},{"Id":"9266559615","Type":"PullRequestEvent","CreatedAt":"2019-03-18T21:03:34","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/138","RelatedDescription":"Merged pull request \"Add Dave to cake.md\" (#138) at dotnet/foundation","RelatedBody":""}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"9228689700","Type":"IssuesEvent","CreatedAt":"2019-03-12T17:35:17","Actor":"vivmishra","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/103","RelatedDescription":"Opened issue \"March 2019 .NET Updates\" (#103) at dotnet/announcements","RelatedBody":"# March 2019 .NET Updates\r\n\r\nThe following .NET updates were released in March 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Core\r\n\r\n* .NET Core 1.0.15 and .NET Core SDK 1.1.13 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.0/1.0.15/1.0.15.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/1.0))\r\n\r\n* .NET Core 1.1.12 and .NET Core SDK 1.1.13 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.1/1.1.12/1.1.12.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/1.1) )\r\n\r\n* .NET Core 2.1.9 and .NET Core SDK 2.1.503 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.9/2.1.9.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.1) )\r\n\r\n* .NET Core 2.2.1 and .NET Core SDK 2.2.102 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.1/2.2.1.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.2) )\r\n\r\nA discussion issue is available at [core/2432](https://github.com/dotnet/core/issues/2432)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)"},{"Id":"9150531193","Type":"IssuesEvent","CreatedAt":"2019-02-27T22:49:51","Actor":"leecow","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/102","RelatedDescription":"Opened issue \"SDK Installers will remove previous patch versions\" (#102) at dotnet/announcements","RelatedBody":"The SDK Installers for Windows will upgrade patch versions in place within the same feature band. This will reduce the number of SDKs that are installed on programmer machines.\r\n\r\nFeature bands of the SDK are defined like 3.0.1nn. [Find out more about SDK version numbers](https://docs.microsoft.com/dotnet/core/versions/#versioning-details).\r\n\r\nThis means when .NET Core SDK 3.0.101 becomes available and is installed, .NET Core SDK 3.0.100 will be removed from the machine if it exists. When .NET Core SDK 3.0.200 becomes available and is installed on the same machine, .NET Core SDK versions like 3.0.101 will not be removed but stay side by side with 3.0.200.\r\n\r\nThis approach supports use of `global.json` which will roll forward across patch versions, but not feature bands of the SDK. Thus, upgrading via the SDK installer will not result in errors due to a missing SDK. Feature bands also align with side by side Visual Studio installations for those users that install SDKs for Visual Studio use. For example, Visual Studio 15.9 uses .NET Core SDK 2.2.500 but does not support .NET Core SDK 2.2.600.\r\n\r\nFind out how to [remove other .NET Core SDK versions here.](https://docs.microsoft.com/dotnet/core/versions/remove-runtime-sdk-versions)."}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"9420866790","Type":"IssuesEvent","CreatedAt":"2019-04-11T04:21:05","Actor":"sdmaclea","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/22213","RelatedDescription":"Closed issue \"Type.GetType($”{typeName}, {assemblyName}”) should load assemblies in the caller context\" (#22213) at dotnet/coreclr","RelatedBody":"`Type.GetType` is one the several APIs that take the caller assembly as implicit hidden argument.\r\n\r\nAnother example of such API is `Assembly.Load`. `Assembly.Load` loads assemblies in the caller context, using this hidden caller argument.\r\n\r\n`Type.GetType` loads assemblies in the default context today. We should change it to load assemblies in the caller context to be consistent with `Assembly.Load`."},{"Id":"9420865479","Type":"PullRequestEvent","CreatedAt":"2019-04-11T04:20:40","Actor":"sdmaclea","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/23740","RelatedDescription":"Merged pull request \"Contextual reflection\" (#23740) at dotnet/coreclr","RelatedBody":"Add ContextualReflection APIs approved in dotnet/corefx#36236\r\nFix issue #22213\r\nFix  SetParentAssembly even when IsCollectible()\r\nAdd  ContextualReflection test"},{"Id":"9420595106","Type":"PullRequestEvent","CreatedAt":"2019-04-11T03:01:47","Actor":"filipnavara","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/23888","RelatedDescription":"Opened pull request \"Move DateTime Windows implementation to shared CoreLib\" (#23888) at dotnet/coreclr","RelatedBody":"This is rework of #21848, with the lessons learned from #22383.\r\n\r\nThe `DateTime.Windows.cs` code is moved to shared partition. Internal calls are kept for CoreCLR for performance reasons. Shared implementation has `!CORECLR` block with implementations for other runtimes that use regular P/Invoke. Code from CoreRT is adapted for `SystemSupportsLeapSeconds` to avoid calls to NTDLL on WinRT builds.\r\n\r\n/cc @jkotas @marek-safar "},{"Id":"9420503332","Type":"PullRequestEvent","CreatedAt":"2019-04-11T02:36:39","Actor":"AaronRobinsonMSFT","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/23887","RelatedDescription":"Opened pull request \"Remove over release in test\" (#23887) at dotnet/coreclr","RelatedBody":"Fixes #23883 "},{"Id":"9420337684","Type":"PullRequestEvent","CreatedAt":"2019-04-11T01:51:15","Actor":"stephentoub","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/23886","RelatedDescription":"Opened pull request \"Nullable: System.Runtime.CompilerServices\" (#23886) at dotnet/coreclr","RelatedBody":""},{"Id":"9420182380","Type":"IssuesEvent","CreatedAt":"2019-04-11T01:06:33","Actor":"VincentBu","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/23885","RelatedDescription":"Opened issue \"[arm64] Test failed: System.Numerics.Tests.PlaneTests.PlaneNormalizeTest\" (#23885) at dotnet/coreclr","RelatedBody":"**Job:**\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/view/arm64/job/jitstress/job/arm64_cross_checked_ubuntu16.04_corefx_jitstressregs0x80_tst/160/\r\n\r\n**Failed tests:**\r\nSystem.Numerics.Tests.PlaneTests.PlaneNormalizeTest\r\n\r\n**Log:**\r\n```\r\nSystem.Numerics.Tests.PlaneTests.PlaneNormalizeTest [FAIL]\r\n      Plane.Normalize returns unexpected value.\r\n      Expected: True\r\n      Actual:   False\r\n      Stack Trace:\r\n        /mnt/j/workspace/dotnet_coreclr/master/jitstress/arm64_cross_checked_ubuntu16.04_corefx_jitstressregs0x80/_/fx/src/System.Numerics.Vectors/tests/PlaneTests.cs(217,0): at System.Numerics.Tests.PlaneTests.PlaneNormalizeTest()\r\n\r\nAssert failure(PID 38674 [0x00009712], Thread: 42549 [0xa635]): Assertion failed 'spillReg != REG_NA' in 'System.Numerics.Tests.GenericVectorTests:TestVectorGreaterThanOrEqualAny():this' (IL size 526)\r\n\r\n    File: /mnt/j/workspace/dotnet_coreclr/master/jitstress/arm64_cross_checked_ubuntu16.04_corefx_jitstressregs0x80/src/jit/lsra.cpp Line: 6372\r\n    Image: /home/robox/j/workspace/dotnet_coreclr/master/jitstress/arm64_cross_checked_ubuntu16.04_corefx_jitstressregs0x80_tst/_/fx/artifacts/bin/testhost/netcoreapp-Linux-Release-arm64/dotnet\r\n\r\n\r\nAssert failure(PID 38674 [0x00009712], Thread: 42549 [0xa635]): Assertion failed 'spillReg != REG_NA' in 'System.Numerics.Tests.GenericVectorTests:TestVectorGreaterThanOrEqualAny():this' (IL size 526)\r\n\r\n    File: /mnt/j/workspace/dotnet_coreclr/master/jitstress/arm64_cross_checked_ubuntu16.04_corefx_jitstressregs0x80/src/jit/lsra.cpp Line: 6372\r\n    Image: /home/robox/j/workspace/dotnet_coreclr/master/jitstress/arm64_cross_checked_ubuntu16.04_corefx_jitstressregs0x80_tst/_/fx/artifacts/bin/testhost/netcoreapp-Linux-Release-arm64/dotnet\r\n\r\n./RunTests.sh: line 142: 38674 Aborted                 (core dumped) \"$RUNTIME_PATH/dotnet\" xunit.console.dll System.Numerics.Vectors.Tests.dll -xml testResults.xml -nologo -nocolor -notrait category=nonnetcoreapptests -notrait category=nonlinuxtests -notrait category=IgnoreForCI -notrait category=failing -notrait category=OuterLoop\r\n/home/robox/j/workspace/dotnet_coreclr/master/jitstress/arm64_cross_checked_ubuntu16.04_corefx_jitstressregs0x80_tst/_/fx/artifacts/bin/tests/System.Numerics.Vectors.Tests/netcoreapp-Linux-Release-arm64\r\nexit code 134\r\n```"},{"Id":"9420167138","Type":"PullRequestEvent","CreatedAt":"2019-04-11T01:02:14","Actor":"dotnet-maestro-bot","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/23884","RelatedDescription":"Opened pull request \"Update CoreClr to preview5-27610-72 (master)\" (#23884) at dotnet/coreclr","RelatedBody":"/cc @dotnet/maestro-reviewers-core"}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"9420903452","Type":"PullRequestEvent","CreatedAt":"2019-04-11T04:32:27","Actor":"dotnet-maestro[bot]","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/11131","RelatedDescription":"Opened pull request \"[release/3.0.1xx] Update dependencies from dotnet/sdk\" (#11131) at dotnet/cli","RelatedBody":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/sdk\r\n- **Build**: 20190410.3\r\n- **Date Produced**: 4/11/2019 4:31 AM\r\n- **Commit**: 814b7898f9908a88f62706331cf56f1ecc9745eb\r\n- **Branch**: refs/heads/release/3.0.1xx\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk** -> 3.0.100-preview4.19210.3\r\n\r\n"},{"Id":"9420285285","Type":"IssuesEvent","CreatedAt":"2019-04-11T01:36:07","Actor":"KirillOsenkov","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/11130","RelatedDescription":"Opened issue \"NETCoreSdkResolver should give a clear error message when preview SDK is rejected due to UsePreviews=false\" (#11130) at dotnet/cli","RelatedBody":"Currently the experience we see when a preview SDK is rejected due to DisallowPrerelease()\r\nhttps://github.com/dotnet/cli/blob/bfffcb23ba270640b355e729f36b34c04fad0121/src/Microsoft.DotNet.MSBuildSdkResolver/VSSettings.cs#L75\r\n\r\nis not good. It's a generic failed to load .NET SDK error, and it's super hard to figure out that the SDK was actually found, but it was pre-release and the checkbox wasn't set.\r\n\r\nSee related: \r\nhttps://github.com/dotnet/roslyn/issues/34927\r\n\r\nIf I wasted four hours figuring this out and debugging through the SDK resolver, the UX here should really be improved."},{"Id":"9419955155","Type":"PullRequestEvent","CreatedAt":"2019-04-11T00:01:29","Actor":"dotnet-bot","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/11129","RelatedDescription":"Opened pull request \"Merge release/2.1.6xx to release/2.2.2xx\" (#11129) at dotnet/cli","RelatedBody":"\nThis is an automatically generated pull request from release/2.1.6xx into release/2.2.2xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1.6xx-to-release/2.2.2xx\ngit reset --hard upstream/release/2.2.2xx\ngit merge upstream/release/2.1.6xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.1.6xx-to-release/2.2.2xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"9419954788","Type":"PullRequestEvent","CreatedAt":"2019-04-11T00:01:24","Actor":"dotnet-bot","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/11128","RelatedDescription":"Opened pull request \"Merge release/2.1.5xx to release/2.2.1xx\" (#11128) at dotnet/cli","RelatedBody":"\nThis is an automatically generated pull request from release/2.1.5xx into release/2.2.1xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1.5xx-to-release/2.2.1xx\ngit reset --hard upstream/release/2.2.1xx\ngit merge upstream/release/2.1.5xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.1.5xx-to-release/2.2.1xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"9419954620","Type":"PullRequestEvent","CreatedAt":"2019-04-11T00:01:21","Actor":"dotnet-bot","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/11127","RelatedDescription":"Opened pull request \"Merge release/2.1.5xx to release/2.1.6xx\" (#11127) at dotnet/cli","RelatedBody":"\nThis is an automatically generated pull request from release/2.1.5xx into release/2.1.6xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1.5xx-to-release/2.1.6xx\ngit reset --hard upstream/release/2.1.6xx\ngit merge upstream/release/2.1.5xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.1.5xx-to-release/2.1.6xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"9415257114","Type":"PullRequestEvent","CreatedAt":"2019-04-10T12:13:44","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/1136","RelatedDescription":"Merged pull request \"[master] Update dependencies from dotnet/arcade\" (#1136) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190409.2\r\n- **Date Produced**: 4/9/2019 12:54 PM\r\n- **Commit**: 63b76f3f952f821d0a7996427a9f3534f1c25ab7\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19209.2\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19209.2\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19209.2\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19209.2\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19209.2\r\n\r\n"},{"Id":"9415188185","Type":"PullRequestEvent","CreatedAt":"2019-04-10T12:03:39","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/1136","RelatedDescription":"Opened pull request \"[master] Update dependencies from dotnet/arcade\" (#1136) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190409.2\r\n- **Date Produced**: 4/9/2019 12:54 PM\r\n- **Commit**: 63b76f3f952f821d0a7996427a9f3534f1c25ab7\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19209.2\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19209.2\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19209.2\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19209.2\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19209.2\r\n\r\n"},{"Id":"9408938517","Type":"PullRequestEvent","CreatedAt":"2019-04-09T16:30:38","Actor":"JohnTortugo","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/1126","RelatedDescription":"Merged pull request \"Onboard on async publishing\" (#1126) at dotnet/standard","RelatedBody":"Relates to: https://github.com/dotnet/arcade/issues/2442\r\n\r\nGoal: mitigate `lock on the feed problem` and add further validations. [More details here.](https://github.com/dotnet/arcade/blob/master/Documentation/CorePackages/AsyncPublishing_HowToUse.md)\r\n\r\nTest build was here: https://dnceng.visualstudio.com/internal/_build/results?buildId=144566\r\nTest release: https://dnceng.visualstudio.com/internal/_releaseProgress?_a=release-pipeline-progress&releaseId=4241"},{"Id":"9406829325","Type":"PullRequestEvent","CreatedAt":"2019-04-09T12:13:46","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/1135","RelatedDescription":"Merged pull request \"[master] Update dependencies from dotnet/arcade\" (#1135) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190409.1\r\n- **Date Produced**: 4/9/2019 8:35 AM\r\n- **Commit**: 9d7e665ecf2606094677524ecd5af0fc39c7bb49\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19209.1\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19209.1\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19209.1\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19209.1\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19209.1\r\n\r\n"},{"Id":"9406762193","Type":"PullRequestEvent","CreatedAt":"2019-04-09T12:03:41","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/1135","RelatedDescription":"Opened pull request \"[master] Update dependencies from dotnet/arcade\" (#1135) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190409.1\r\n- **Date Produced**: 4/9/2019 8:35 AM\r\n- **Commit**: 9d7e665ecf2606094677524ecd5af0fc39c7bb49\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19209.1\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19209.1\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19209.1\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19209.1\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19209.1\r\n\r\n"},{"Id":"9403460096","Type":"PullRequestEvent","CreatedAt":"2019-04-09T01:31:16","Actor":"wtgodbe","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/1133","RelatedDescription":"Merged pull request \"Add triggers for release/3.0\" (#1133) at dotnet/standard","RelatedBody":"CC @mmitche "},{"Id":"9403459511","Type":"PullRequestEvent","CreatedAt":"2019-04-09T01:31:07","Actor":"wtgodbe","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/1134","RelatedDescription":"Merged pull request \"Add triggers for release/3.0\" (#1134) at dotnet/standard","RelatedBody":"CC @mmitche "}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"9420573168","Type":"IssuesEvent","CreatedAt":"2019-04-11T02:55:51","Actor":"scalablecory","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/36779","RelatedDescription":"Opened issue \"Aligned load/store for Vector<T>\" (#36779) at dotnet/corefx","RelatedBody":"When using a collection such as `Span<Vector<T>>`, all loads/stores on the span are performed using unaligned instructions.\r\n\r\nFor sufficiently aware code, this might cause an unnecessary perf drawback. I think the \"just works\" current behavior is ideal, but we need an escape hatch for such code.\r\n\r\n## Proposed API\r\n\r\n```csharp\r\nnamespace System.Numerics\r\n{\r\n    public static class Vector\r\n    {\r\n        public static Vector<T> UnsafeLoadAligned<T>(in Vector<T> vector);\r\n        public static void UnsafeStoreAligned<T>(out Vector<T> vector, Vector<T> value);\r\n    }\r\n}\r\n```\r\n\r\nThis API should generate aligned instructions when available, e.g. `movaps` for SSE. The methods should not perform any sort of correctness checking outside of an `Assert`.\r\n\r\nRelated issue (perhaps dependency) #33566"},{"Id":"9420530556","Type":"IssuesEvent","CreatedAt":"2019-04-11T02:44:08","Actor":"hez2010","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/36778","RelatedDescription":"Opened issue \"API Proposal: IAsyncEnumerable intergrate with LINQ\" (#36778) at dotnet/corefx","RelatedBody":"For example:\r\n```csharp\r\nIAsyncEnumerable<T> xxxx;\r\n\r\nvar result = await xxx.Where(i=> .....).OrderBy(i=> ...).AsAsync();\r\nvar result = await from async c in xxxx where .... order by ..... asc;\r\n```"},{"Id":"9419995098","Type":"IssuesEvent","CreatedAt":"2019-04-11T00:12:31","Actor":"layomia","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/36023","RelatedDescription":"Closed issue \"JsonSerializer does not support parsing DateTime values\" (#36023) at dotnet/corefx","RelatedBody":"**Runtime version:** 3.0.0-preview4-27513-05\r\n\r\nConsider:\r\n\r\n```C#\r\nvar content = $\"\\\"{DateTime.UtcNow.ToString()}\\\"\";\r\nvar result = JsonSerializer.Parse(content, typeof(DateTime));\r\n```\r\n\r\nThis results in the following exception:\r\n\r\n```\r\nUnhandled Exception: System.Text.Json.JsonReaderException: The JSON value from [System.DateTime] could not be converted to System.DateTime.\r\n   at System.Text.Json.ThrowHelper.ThrowJsonReaderException_DeserializeUnableToConvertValue(Type propertyType, Utf8JsonReader& reader, ReadStack& state)\r\n   at System.Text.Json.Serialization.JsonPropertyInfo`2.Read(JsonTokenType tokenType, JsonSerializerOptions options, ReadStack& state, Utf8JsonReader& reader)\r\n   at System.Text.Json.Serialization.JsonSerializer.HandleValue(JsonTokenType tokenType, JsonSerializerOptions options, Utf8JsonReader& reader, ReadStack& state)\r\n   at System.Text.Json.Serialization.JsonSerializer.ReadCore(JsonSerializerOptions options, Utf8JsonReader& reader, ReadStack& state)\r\n   at System.Text.Json.Serialization.JsonSerializer.ReadCore(Type returnType, JsonSerializerOptions options, Utf8JsonReader& reader)\r\n   at System.Text.Json.Serialization.JsonSerializer.ParseCore(String json, Type returnType, JsonSerializerOptions options)\r\n   at System.Text.Json.Serialization.JsonSerializer.Parse(String json, Type returnType, JsonSerializerOptions options)\r\n```\r\n"},{"Id":"9419971879","Type":"IssuesEvent","CreatedAt":"2019-04-11T00:06:05","Actor":"layomia","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/36768","RelatedDescription":"Closed issue \"Add DebuggerDisplay/DebuggerTypeProxy to JSON reader / writer / dom\" (#36768) at dotnet/corefx","RelatedBody":"Tracking issue for creating the debugger visualizer of JSON reader/writer/document\r\n\r\nAs an example of how to get started, see https://github.com/dotnet/corefx/blob/95fa11b014ff7eeffdb325a7a0b3aa3afacc2f4a/src/Common/src/CoreLib/System/Span.cs#L19-L20"}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"9420773809","Type":"IssuesEvent","CreatedAt":"2019-04-11T03:52:41","Actor":"sujayvsarma","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/34930","RelatedDescription":"Opened issue \"Incorrect colorization / Colorization does not revert\" (#34930) at dotnet/roslyn","RelatedBody":"**Version Used**: \r\nLatest stable (2.0.1)\r\n\r\n**Steps to Reproduce**:\r\nExample: Function arguments\r\n\r\nDefine an empty-body function with at least one argument. Arguments are correctly dimmed out indicating they are not being used.\r\n\r\nCode snip:\r\n```\r\nvoid foo(string arg1) {\r\n  // at this point, 'arg1' is dimmed out\r\n}\r\n```\r\n\r\nNow start typing any construct, but don't use the argument yet. For example, start typing \"if\". \r\n\r\nCode snip:\r\n```\r\nvoid foo(string arg1) {\r\n  if \r\n  // at this point, arg1 should remain dimmed out, but it lights up\r\n}\r\n```\r\n\r\nThe argument(s) will light up one by one. If you have more than one argument, the more new statements you type, they will start lighting up. For example, if you have 2 arguments to foo(), arg1 will light up on the first statement/construct and arg2 on the second one. This is even though you have not yet even thought about that argument!\r\n\r\nNow go ahead and use the argument in that statement and then edit that line of code to do something else (other than referencing that argument), you will see the argument randomly changes colorization -- sometimes it shows up dimmed out, sometimes it colorizes to say it is being used. \r\n\r\n**Expected Behavior**:\r\nThe arguments continue to be in the correct lighted up / colorized state. \r\n\r\n**Actual Behavior**:\r\nBut they are not. When you undo the operation, they do not always go back to the previous state.\r\n\r\n"}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"9419739073","Type":"PullRequestEvent","CreatedAt":"2019-04-10T23:04:04","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7277","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/corefx,coreclr\" (#7277) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/corefx,coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @safern @krwq @tannergooding @danmosemsft @stephentoub @buyaa-n @GrabYourPitchforks @grant-d @sdmaclea @jkoritzinsky @hughbe"},{"Id":"9419725177","Type":"PullRequestEvent","CreatedAt":"2019-04-10T23:00:44","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7249","RelatedDescription":"Merged pull request \"Fix building Ubuntu shared libraries\" (#7249) at dotnet/corert","RelatedBody":"fixes #4988.\r\nCoreRT can now produce working shared lib for linux-x64.\r\n\r\nBut I have some questions\r\n\r\n- Should we use the trick with jumping to GOTPCREL ptr for other Rh* stubs (like RhExceptionHandling_FailedAllocation)?\r\n- Is it right way to check, that symbol should be exported as global through IExportableSymbolNode.GetExportForm()?\r\n- Is it enough to pass all tests to check, that this commit nothing breaks?"},{"Id":"9419725165","Type":"IssuesEvent","CreatedAt":"2019-04-10T23:00:43","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/issues/4988","RelatedDescription":"Closed issue \"Fix building Ubuntu shared libraries\" (#4988) at dotnet/corert","RelatedBody":"Currently building shared libraries (.so) on Ubuntu throws the below error:\r\n\r\n```\r\n/usr/bin/ld: obj/Debug/netstandard2.0/native/cslib.o: relocation R_X86_64_PC32 against symbol `__NewArr1___Array<Object>' can not be used when making a shared object; recompile with -fPIC\r\n/usr/bin/ld: final link failed: Bad value\r\n```\r\n\r\nParent issue: #1285 "},{"Id":"9419630893","Type":"PullRequestEvent","CreatedAt":"2019-04-10T22:38:21","Actor":"nattress","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7281","RelatedDescription":"Merged pull request \"Update CoreCLR test script for VS2019\" (#7281) at dotnet/corert","RelatedBody":"After installing VS2019 the CoreCLR test scripts can no longer find MSBuild.exe because it was moved within the VS install folder. Fix to try both options before giving up."},{"Id":"9419219178","Type":"PullRequestEvent","CreatedAt":"2019-04-10T21:18:03","Actor":"trylek","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7283","RelatedDescription":"Opened pull request \"Minor SuperIlc fixes / improvements found while using the tool\" (#7283) at dotnet/corert","RelatedBody":"One non-trivial revelation I made is that my previous introduction\r\nof Outcome was inconsistent w.r.t. the summary table as there is\r\ngenerally a different number of compilations and executions.\r\nI have fixed this by splitting the summary table in two for\r\ncompilations and executions.\r\n\r\nThanks\r\n\r\nTomas"},{"Id":"9418667295","Type":"PullRequestEvent","CreatedAt":"2019-04-10T19:50:03","Actor":"trylek","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7282","RelatedDescription":"Opened pull request \"Improving PE section management in CPAOT\" (#7282) at dotnet/corert","RelatedBody":"The ability to use SuperIlc to ILC the entire Pri#1 test suite\r\nlet me quickly identify several remaining CPAOT compilation\r\nissues. This change should be fixing the biggest bucket of 8\r\nfailing compilations.\r\n\r\nAs in contrast to Crossgen we don't copy the input MSIL\r\nselectively to the output R2R PE image (which may change soon\r\nwith Simon's latest changes), in case of RVA fields we just\r\nstore the section name in which the field content resides\r\nand, when serializing the sections to the output PE, we\r\nresolve the appropriate SectionStartNode's in the symbol map\r\nfor the relocation pass.\r\n\r\nAs the R2R PE emitter is basically the oldest part of the CPAOT\r\ncompiler, I was naturally making various arbitrary choices during\r\nits initial implementation and because of this the section\r\nmanagement logic ended up somewhat randomly scattered among\r\nReadyToRunObjectWriter, SectionBuilder and R2RPEBuilder.\r\n\r\nThe SectionBuilder only knew about the sections emitted by\r\nthe CPAOT compiler itself, not about the incoming sections from\r\nthe input MSIL; those got only combined with the SectionBuilder\r\nsections in R2RPEBuilder constructor.\r\n\r\nDue to this fact the section serialization code in SectionBuilder\r\ndidn't know about the MSIL section holding the RVA field (as it\r\nwasn't one of the sections produced by the CPAOT compiler) and\r\nso it didn't resolve its start node in the symbol map.\r\n\r\nTo fix this, I have centralized the logic for building the list\r\nof output sections in SectionBuilderExtensions.PrepareSections\r\nwhere we compose the complete section list upfront and set it\r\nto SectionBuilder. R2RPEBuilder constructor can be much simpler\r\nas it can reuse the SectionBuilder section map and the section\r\nstart nodes get properly resolved even for the MSIL input\r\nsections.\r\n\r\nThanks\r\n\r\nTomas\r\n\r\nP.S. I tried to explain the logic in maximum detail because\r\naccording to our yesterday meeting Simon is investigating / making\r\nchanges in this area as part of removing the previously produced\r\nR2R code when CPAOT-compiling an already R2R-compiled PE executable\r\nand RVA field management is exactly the area that will break and\r\nwill need fixing if he decides to switch over to selective copying\r\nof the input executable to the R2R output file as opposed to blindly\r\ncopying all the pre-existing sections as we do today."},{"Id":"9418401446","Type":"PullRequestEvent","CreatedAt":"2019-04-10T19:07:31","Actor":"nattress","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7281","RelatedDescription":"Opened pull request \"Update CoreCLR test script for VS2019\" (#7281) at dotnet/corert","RelatedBody":"After installing VS2019 the CoreCLR test scripts can no longer find MSBuild.exe because it was moved within the VS install folder. Fix to try both options before giving up."},{"Id":"9416757743","Type":"IssuesEvent","CreatedAt":"2019-04-10T15:17:13","Actor":"filipnavara","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/issues/7280","RelatedDescription":"Opened issue \"Bogus warnings on CI test\" (#7280) at dotnet/corert","RelatedBody":"Watching the outputs on https://dev.azure.com/dnceng/public/_build/results?buildId=150071 shows many of these lines:\r\n\r\n```\r\nWARNING: Long running test .. finished in 933336ms.\r\nWARNING: Long running test .. finished in 933401ms.\r\n```\r\n\r\nObviously the tests didn't run for that long, so it looks like the time is reported incorrectly."},{"Id":"9416448193","Type":"PullRequestEvent","CreatedAt":"2019-04-10T14:42:00","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/pull/6847","RelatedDescription":"Closed pull request \"[WIP] Fix PIC relocation issues\" (#6847) at dotnet/corert","RelatedBody":"Progress towards #4988.\r\n\r\nThe relocation issues we're having are due to two things: we emit all symbols as global, and we don't do the dance that is necessary to access symbols someone else could redefine in a different module and make them \"too far away\" to fit in a 32bit relocation. Ideally, we should find a way to ban this because I think it's breaking our ability to have static libraries built by different versions of CoreRT in the same process (they're going to redefine each other's symbols and that sounds bad).\r\n\r\nI ran out of time I allocated for myself for this. This is enough to actually build SharedLibrary.so, but the test is failing (because dlopen fails for reasons that I didn't investigate) and I didn't validate this doesn't break Windows or other (non-dynamic library) scenarios.\r\n\r\nI'll need to read up more on ELF relocs at some point.\r\n\r\nPutting it up in case someone would like to pick this up. I don't know when I'll be able to make time for this again.\r\n\r\nCc @tonerdo @tim241 @sebastianulm "},{"Id":"9415837627","Type":"PullRequestEvent","CreatedAt":"2019-04-10T13:30:57","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7279","RelatedDescription":"Merged pull request \"Improve SharedLibrary test\" (#7279) at dotnet/corert","RelatedBody":"Add coverage for stack walking (GC/EH)."},{"Id":"9415199639","Type":"PullRequestEvent","CreatedAt":"2019-04-10T12:05:24","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7279","RelatedDescription":"Opened pull request \"Improve SharedLibrary test\" (#7279) at dotnet/corert","RelatedBody":"Add coverage for stack walking (GC/EH)."},{"Id":"9414820929","Type":"IssuesEvent","CreatedAt":"2019-04-10T11:05:49","Actor":"rainbowlee","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/issues/7278","RelatedDescription":"Opened issue \"Unable to load shared library 'objwriter' or one of its dependencies\" (#7278) at dotnet/corert","RelatedBody":"This problems occured again.\r\n\r\nLast time, I restalled the operation system.\r\n\r\nI run unbantu on Oracle VM VirtualBox\r\n\r\n\r\nubuntu-18.10-desktop-amd64.iso\r\n\r\n\r\n\r\n![crt_error1](https://user-images.githubusercontent.com/7885929/55873976-9c448f80-5bc3-11e9-8092-0743a27fa0fd.png)\r\n"}],"ResultType":"GitHubEvent"},"SDK":{"Events":[{"Id":"9420607085","Type":"PullRequestEvent","CreatedAt":"2019-04-11T03:05:03","Actor":"dsplaisted","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/3086","RelatedDescription":"Merged pull request \"Rewrite deps file generation\" (#3086) at dotnet/sdk","RelatedBody":"Fixes #3010\r\n\r\n## Background\r\n\r\nThe ResolvePackageAssets task outputs the resolved files from the assets file in various MSBuild items.  It uses an optimized cache file in order to avoid the performance overhead of reading the assets file if the assets file  hasn't changed.\r\n\r\nThe GenerateDepsFile task currently still reads the assets file directly.  This is a bit of a perf hit, but the task is not part of our \"inner loop\" perf scenario, since if you just make a code change and rebuild, the deps file will be up-to-date and won't need to be regenerated.\r\n\r\nThe GenerateDepsFile task has a `FilesToSkip` parameter, which is a list of files that should not be written to the deps file.  Generally, these are the \"conflict\" files that come from ResolvePackageFileConflicts.  However, the linker also wants to be able to specify files that shouldn't be written to the deps file because they have been linked out\r\n\r\nThe `FilesToSkip` items are full resolved paths.  Currently, the GenerateDepsFile task essentially translates assets from the assets file to the deps file, and in both of these cases the assets are identified by a package ID and version, and a relative path inside the package.  So for the FilesToSkip, the resolved path needs to be translated into a NuGet package ID and a relative path inside the package.  This is done via a \"heuristic\" that walks up the directory tree until it finds a .nuspec file, since NuGet puts the .nuspec file in the root of the package's folder in the package cache.\r\n\r\nHowever, now that we use targeting packs and apphost packs which are installed to dotnet\\packs instead of coming from a NuGet package, there are assets for which this heuristic doesn't work.  This is the issue described in #3010, and it means that any FilesToSkip that come from these packs will be ignored, and the file will still be written to the deps file.\r\n\r\n## Description of changes\r\n\r\nThis PR implements new logic for generating the deps file.  Most of the logic for doing this is actually implemented in the `DependencyContextBuilder` class.  So this PR adds a new `DependencyContextBuilder2` class which implements the new logic, and the `GenerateDepsFile` task can use the old logic, the new logic, or both of them and ensure that the results are the same.\r\n\r\n`DependencyContextBuilder2` works similarly to `DependencyContextBuilder`, except that instead of relying on the assets file for the assets to write to the deps file, it takes lists of files which come from the outputs of the ResolvePackageAssets task.  These items have metadata which indicates which package they belong to and the relative path to the asset within the package.  The new code still reads the assets file in order to get the \"libraries\" from the assets file and their dependencies.  In the future we can update ResolvePackageAssets to output and cache this data as well, and then we would be able to avoid the perf hit of reading the assets file in GenerateDepsFile as well.  The data that comes from the assets file (via the `ProjectContext` class) is all read in the `DependencyContextBuilder2` constructor, which should help make it clearer what data we would need for this.\r\n\r\nThe new logic does not use the `FilesToSkip` parameter, rather the files to skip should simply be removed from the items that are passed to the `GenerateDepsFile` task, for example:\r\n\r\n```xml\r\n    <ItemGroup>\r\n      <ResolvedCompileFileDefinitions Remove=\"@(_ConflictPackageFiles)\" />\r\n      <NativeCopyLocalItems Remove=\"@(_ConflictPackageFiles)\" />\r\n      <ResourceCopyLocalItems Remove=\"@(_ConflictPackageFiles)\" />\r\n      <RuntimeCopyLocalItems Remove=\"@(_ConflictPackageFiles)\" />\r\n      <RuntimeTargetsCopyLocalItems Remove=\"@(_ConflictPackageFiles)\" />\r\n      <RuntimePackAsset Remove=\"@(_ConflictPackageFiles)\" />\r\n    </ItemGroup>\r\n```\r\n\r\n## Comparing old and new deps file generation logic\r\n\r\nWith this PR, the `GenerateDepsFile` task is able to use either the old logic, the new logic, or run both and compare the results, erroring out if there is a difference.  The comparison and erroring out was necessary in order to ensure that the new code produced the same results as the old code (except in cases where we wanted it to differ).  Right now the default is still to run both modes and compare the result.  If we want to get more coverage ensuring that the results are the same in the wild, we could leave this as the default for a few previews, before removing the old logic.  Otherwise, I'd suggest we default to the new logic and leave the old logic in as an option for a few previews as an escape hatch if this breaks anything.\r\n\r\n## Other changes\r\n\r\n- Stop generating runtime signature for deps file.  This used the SHA1 algorithm but as far as we can tell was never consumed by the runtime or anywhere else\r\n- Read PackageOverrides.txt from targeting pack\r\n- Avoid using heuristic to find NuGet package ID.  If there wasn't metadata on the item to indicate the package ID, but the heuristic would have found a package ID, throw an exception so that we can find these cases and add the appropriate metadata"},{"Id":"9420474163","Type":"PullRequestEvent","CreatedAt":"2019-04-11T02:28:50","Actor":"dsplaisted","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/sdk/pull/3111","RelatedDescription":null,"RelatedBody":"Fix https://github.com/dotnet/cli/issues/10440 (we will need https://github.com/dotnet/project-system/issues/4567 to be able to support this in VS)."},{"Id":"9420474025","Type":"PullRequestEvent","CreatedAt":"2019-04-11T02:28:47","Actor":"dsplaisted","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/pull/3111","RelatedDescription":"Closed pull request \"Use PackageDownload\" (#3111) at dotnet/sdk","RelatedBody":"Fix https://github.com/dotnet/cli/issues/10440 (we will need https://github.com/dotnet/project-system/issues/4567 to be able to support this in VS)."},{"Id":"9420412804","Type":"PullRequestEvent","CreatedAt":"2019-04-11T02:11:35","Actor":"dsplaisted","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/sdk/pull/3108","RelatedDescription":null,"RelatedBody":"Fixes #3027"},{"Id":"9420412482","Type":"PullRequestEvent","CreatedAt":"2019-04-11T02:11:30","Actor":"dsplaisted","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/pull/3108","RelatedDescription":"Closed pull request \"Fix conflicts between multiple uses of _PackageReferenceToAdd\" (#3108) at dotnet/sdk","RelatedBody":"Fixes #3027"},{"Id":"9420397207","Type":"PullRequestEvent","CreatedAt":"2019-04-11T02:07:16","Actor":"dsplaisted","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/3107","RelatedDescription":"Merged pull request \"Update stage 0\" (#3107) at dotnet/sdk","RelatedBody":"Replace #3072"},{"Id":"9420201309","Type":"PullRequestEvent","CreatedAt":"2019-04-11T01:12:07","Actor":"dsplaisted","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/sdk/pull/3111","RelatedDescription":null,"RelatedBody":"Fix https://github.com/dotnet/cli/issues/10440 (we will need https://github.com/dotnet/project-system/issues/4567 to be able to support this in VS)."},{"Id":"9420200288","Type":"PullRequestEvent","CreatedAt":"2019-04-11T01:11:50","Actor":"dsplaisted","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/pull/3111","RelatedDescription":"Closed pull request \"Use PackageDownload\" (#3111) at dotnet/sdk","RelatedBody":"Fix https://github.com/dotnet/cli/issues/10440 (we will need https://github.com/dotnet/project-system/issues/4567 to be able to support this in VS)."},{"Id":"9420135478","Type":"PullRequestEvent","CreatedAt":"2019-04-11T00:53:19","Actor":"dsplaisted","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/sdk/pull/3111","RelatedDescription":null,"RelatedBody":"Fix https://github.com/dotnet/cli/issues/10440 (we will need https://github.com/dotnet/project-system/issues/4567 to be able to support this in VS)."},{"Id":"9420135272","Type":"PullRequestEvent","CreatedAt":"2019-04-11T00:53:15","Actor":"dsplaisted","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/pull/3111","RelatedDescription":"Closed pull request \"Use PackageDownload\" (#3111) at dotnet/sdk","RelatedBody":"Fix https://github.com/dotnet/cli/issues/10440 (we will need https://github.com/dotnet/project-system/issues/4567 to be able to support this in VS)."}],"ResultType":"GitHubEvent"},"Home-Issues":{"Issues":[{"Id":"426787542","IsPullRequest":true,"CreatedAt":"2019-03-29T14:44:24","Actor":"mairaw","Number":"142","RawContent":null,"Title":"add docs samples link","State":"closed","Body":"@BillWagner should we add the samples project too?","Url":"https://github.com/dotnet/foundation/pull/142","RelatedDescription":"Closed or merged PR \"add docs samples link\" (#142)"},{"Id":"426787230","IsPullRequest":true,"CreatedAt":"2019-03-29T02:28:20","Actor":"mairaw","Number":"141","RawContent":null,"Title":"add links to ML.NET docs","State":"open","Body":"/cc @JRAlexander @shauheen \r\n\r\nTo match the info we have added for other projects","Url":"https://github.com/dotnet/foundation/pull/141","RelatedDescription":"Open PR \"add links to ML.NET docs\" (#141)"},{"Id":"426658581","IsPullRequest":true,"CreatedAt":"2019-03-29T02:16:07","Actor":"scottaddie","Number":"139","RawContent":null,"Title":"Add link to ASP.NET Core docs","State":"closed","Body":"Provide a link to the docs site for ASP.NET Core.","Url":"https://github.com/dotnet/foundation/pull/139","RelatedDescription":"Closed or merged PR \"Add link to ASP.NET Core docs\" (#139)"},{"Id":"426666928","IsPullRequest":true,"CreatedAt":"2019-03-29T02:15:48","Actor":"BillWagner","Number":"140","RawContent":null,"Title":"add links to .NET docs","State":"closed","Body":"/cc @mairaw @scottaddie\r\n\r\nMaira, did I miss any project repos to tag?","Url":"https://github.com/dotnet/foundation/pull/140","RelatedDescription":"Closed or merged PR \"add links to .NET docs\" (#140)"},{"Id":"419205679","IsPullRequest":true,"CreatedAt":"2019-03-18T21:04:01","Actor":"MikeWilliams-UK","Number":"137","RawContent":null,"Title":"Add V3.1 repo and change documentation link","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/137","RelatedDescription":"Closed or merged PR \"Add V3.1 repo and change documentation link\" (#137)"},{"Id":"419897914","IsPullRequest":true,"CreatedAt":"2019-03-18T21:03:34","Actor":"devlead","Number":"138","RawContent":null,"Title":"Add Dave to cake.md","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/138","RelatedDescription":"Closed or merged PR \"Add Dave to cake.md\" (#138)"},{"Id":"391459677","IsPullRequest":false,"CreatedAt":"2019-03-08T19:00:06","Actor":"manne","Number":"123","RawContent":null,"Title":"Missing logo for Steeltoe","State":"closed","Body":"`https://brandfolder.com/pivotal-assets/attachments/ohxttd-7yxa60-clvf50/pivotal-assets-pivotal-genericfile.png` redirects to a sign in page\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L128-L130","Url":"https://github.com/dotnet/foundation/issues/123","RelatedDescription":"Closed issue \"Missing logo for Steeltoe\" (#123)"},{"Id":"417018694","IsPullRequest":true,"CreatedAt":"2019-03-08T18:59:32","Actor":"jkonicki","Number":"136","RawContent":null,"Title":"Fix logo and update team contributors","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/136","RelatedDescription":"Closed or merged PR \"Fix logo and update team contributors\" (#136)"},{"Id":"416428925","IsPullRequest":true,"CreatedAt":"2019-03-08T18:59:00","Actor":"manne","Number":"135","RawContent":null,"Title":"adds Umbraco logo","State":"closed","Body":"fixes #124 ","Url":"https://github.com/dotnet/foundation/pull/135","RelatedDescription":"Closed or merged PR \"adds Umbraco logo\" (#135)"},{"Id":"391459812","IsPullRequest":false,"CreatedAt":"2019-03-08T18:59:00","Actor":"manne","Number":"124","RawContent":null,"Title":"Missing logo for Umbraco","State":"closed","Body":"`https://fbcdn-profile-a.akamaihd.net/hprofile-ak-xap1/v/t1.0-1/p160x160/971596_519168901464439_566592989_n.png?oh=ce61e5b4cbd60c0d99c4164cbb05a434&oe=54F091C9&__gda__=1424472439_c9f76213a915bc2af88246f464f29e8b` results in a 404.\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L149-L151","Url":"https://github.com/dotnet/foundation/issues/124","RelatedDescription":"Closed issue \"Missing logo for Umbraco\" (#124)"},{"Id":"416427614","IsPullRequest":true,"CreatedAt":"2019-03-08T18:58:45","Actor":"manne","Number":"134","RawContent":null,"Title":"adds the prism logo","State":"closed","Body":"fixes #126 ","Url":"https://github.com/dotnet/foundation/pull/134","RelatedDescription":"Closed or merged PR \"adds the prism logo\" (#134)"},{"Id":"391460225","IsPullRequest":false,"CreatedAt":"2019-03-08T18:58:44","Actor":"manne","Number":"126","RawContent":null,"Title":"No logo provided for Prism","State":"closed","Body":"Can/should this [image](http://prismlibrary.github.io/images/logo-prism-symbol@2x.png) be used?\r\n\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L155-L157","Url":"https://github.com/dotnet/foundation/issues/126","RelatedDescription":"Closed issue \"No logo provided for Prism\" (#126)"},{"Id":"416157860","IsPullRequest":true,"CreatedAt":"2019-03-08T18:58:26","Actor":"glennawatson","Number":"133","RawContent":null,"Title":"Add additional ReactiveUI organization projects.","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/133","RelatedDescription":"Closed or merged PR \"Add additional ReactiveUI organization projects.\" (#133)"},{"Id":"407251900","IsPullRequest":true,"CreatedAt":"2019-02-18T17:45:44","Actor":"Potapy4","Number":"132","RawContent":null,"Title":"Update MVVM project logo","State":"closed","Body":"Fixes dotnet/dotnetfoundation-website#72\r\nFixes #125","Url":"https://github.com/dotnet/foundation/pull/132","RelatedDescription":"Closed or merged PR \"Update MVVM project logo\" (#132)"},{"Id":"391459919","IsPullRequest":false,"CreatedAt":"2019-02-18T17:45:44","Actor":"manne","Number":"125","RawContent":null,"Title":"Missing logo for MVVM Light Toolkit","State":"closed","Body":"`https://raw.githubusercontent.com/paulcbetts/mvvmlight/master/Installer/InstallItems/html/MVVM_BlackText_190x147.png` results in a 404.\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L137-L139","Url":"https://github.com/dotnet/foundation/issues/125","RelatedDescription":"Closed issue \"Missing logo for MVVM Light Toolkit\" (#125)"},{"Id":"406210463","IsPullRequest":true,"CreatedAt":"2019-02-18T17:44:39","Actor":"NextTurn","Number":"131","RawContent":null,"Title":"Replace http links with https links","State":"closed","Body":"Replace http links with https where possible - both returned 200 OK.","Url":"https://github.com/dotnet/foundation/pull/131","RelatedDescription":"Closed or merged PR \"Replace http links with https links\" (#131)"},{"Id":"399191617","IsPullRequest":true,"CreatedAt":"2019-02-02T11:04:15","Actor":"NextTurn","Number":"130","RawContent":null,"Title":"Update Open XML links","State":"closed","Body":"OpenXmlDeveloper.org was shut down long ago.\r\n\r\nThe content has been moved to EricWhite.com.","Url":"https://github.com/dotnet/foundation/pull/130","RelatedDescription":"Closed or merged PR \"Update Open XML links\" (#130)"},{"Id":"395863354","IsPullRequest":true,"CreatedAt":"2019-01-09T22:28:14","Actor":"ErikEJ","Number":"128","RawContent":null,"Title":"Update of EF description","State":"closed","Body":"@divega !","Url":"https://github.com/dotnet/foundation/pull/128","RelatedDescription":"Closed or merged PR \"Update of EF description\" (#128)"},{"Id":"395901602","IsPullRequest":true,"CreatedAt":"2019-01-05T03:23:39","Actor":"MarcBruins","Number":"129","RawContent":null,"Title":"Update to absolute path","State":"closed","Body":"Update to absolute path so that when this list is copied the link will actually work","Url":"https://github.com/dotnet/foundation/pull/129","RelatedDescription":"Closed or merged PR \"Update to absolute path\" (#129)"},{"Id":"395705579","IsPullRequest":true,"CreatedAt":"2019-01-04T00:22:42","Actor":"carloscds","Number":"127","RawContent":null,"Title":"Update documentation information","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/127","RelatedDescription":"Closed or merged PR \"Update documentation information\" (#127)"},{"Id":"391459057","IsPullRequest":true,"CreatedAt":"2019-01-03T04:47:09","Actor":"manne","Number":"122","RawContent":null,"Title":"targets the existing document","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/122","RelatedDescription":"Closed or merged PR \"targets the existing document\" (#122)"},{"Id":"384569679","IsPullRequest":true,"CreatedAt":"2019-01-03T04:46:31","Actor":"JamesNK","Number":"121","RawContent":null,"Title":"Add Newtonsoft.Json","State":"closed","Body":"// @jongalloway ","Url":"https://github.com/dotnet/foundation/pull/121","RelatedDescription":"Closed or merged PR \"Add Newtonsoft.Json\" (#121)"},{"Id":"384212839","IsPullRequest":true,"CreatedAt":"2018-11-26T09:33:50","Actor":"stefanov-stefan","Number":"120","RawContent":null,"Title":"Added Telerik info","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/120","RelatedDescription":"Closed or merged PR \"Added Telerik info\" (#120)"},{"Id":"384212448","IsPullRequest":true,"CreatedAt":"2018-11-26T09:33:22","Actor":"stefanov-stefan","Number":"119","RawContent":null,"Title":"Added Telerik UWP proj","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/119","RelatedDescription":"Closed or merged PR \"Added Telerik UWP proj\" (#119)"},{"Id":"382378851","IsPullRequest":true,"CreatedAt":"2018-11-23T10:32:15","Actor":"pkgw","Number":"118","RawContent":null,"Title":"Update WorldWide Telescope","State":"closed","Body":"Some layout fixes, but the main change is that @pkgw is now the project director.","Url":"https://github.com/dotnet/foundation/pull/118","RelatedDescription":"Closed or merged PR \"Update WorldWide Telescope\" (#118)"},{"Id":"380070557","IsPullRequest":true,"CreatedAt":"2018-11-23T10:31:49","Actor":"leastprivilege","Number":"117","RawContent":null,"Title":"Update identityserver.md","State":"closed","Body":"significant whitespace","Url":"https://github.com/dotnet/foundation/pull/117","RelatedDescription":"Closed or merged PR \"Update identityserver.md\" (#117)"},{"Id":"379731798","IsPullRequest":true,"CreatedAt":"2018-11-13T04:22:32","Actor":"leastprivilege","Number":"114","RawContent":null,"Title":"Update identityserver.md","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/114","RelatedDescription":"Closed or merged PR \"Update identityserver.md\" (#114)"},{"Id":"379777451","IsPullRequest":true,"CreatedAt":"2018-11-13T04:21:35","Actor":"scottbrady91","Number":"116","RawContent":null,"Title":"Update to IdentityManager project","State":"closed","Body":"My employer and I have recently taken over the IdentityManager project from Dom & Brock. I've updated the IdentityManager page to reflect this and the newer version of the core repo.","Url":"https://github.com/dotnet/foundation/pull/116","RelatedDescription":"Closed or merged PR \"Update to IdentityManager project\" (#116)"},{"Id":"379733880","IsPullRequest":true,"CreatedAt":"2018-11-13T04:20:23","Actor":"leastprivilege","Number":"115","RawContent":null,"Title":"Create identitymodel.md","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/115","RelatedDescription":"Closed or merged PR \"Create identitymodel.md\" (#115)"},{"Id":"371941750","IsPullRequest":true,"CreatedAt":"2018-11-01T16:20:07","Actor":"SeanKilleen","Number":"113","RawContent":null,"Title":"Update logo for couchbase-lite in projects.json","State":"closed","Body":"Uses a working link to the logo.\r\n\r\nResolves https://github.com/dotnet/dotnetfoundation-website/issues/65\r\n\r\nFix can be verified by copying/pasting the URL into a browser.","Url":"https://github.com/dotnet/foundation/pull/113","RelatedDescription":"Closed or merged PR \"Update logo for couchbase-lite in projects.json\" (#113)"}],"ResultType":"GitHubIssue"},"CoreCLR-Issues":{"Issues":[{"Id":"431807883","IsPullRequest":true,"CreatedAt":"2019-04-11T03:01:46","Actor":"filipnavara","Number":"23888","RawContent":null,"Title":"Move DateTime Windows implementation to shared CoreLib","State":"open","Body":"This is rework of #21848, with the lessons learned from #22383.\r\n\r\nThe `DateTime.Windows.cs` code is moved to shared partition. Internal calls are kept for CoreCLR for performance reasons. Shared implementation has `!CORECLR` block with implementations for other runtimes that use regular P/Invoke. Code from CoreRT is adapted for `SystemSupportsLeapSeconds` to avoid calls to NTDLL on WinRT builds.\r\n\r\n/cc @jkotas @marek-safar ","Url":"https://github.com/dotnet/coreclr/pull/23888","RelatedDescription":"Open PR \"Move DateTime Windows implementation to shared CoreLib\" (#23888)"},{"Id":"431802749","IsPullRequest":true,"CreatedAt":"2019-04-11T02:36:38","Actor":"AaronRobinsonMSFT","Number":"23887","RawContent":null,"Title":"Remove over release in test","State":"open","Body":"Fixes #23883 ","Url":"https://github.com/dotnet/coreclr/pull/23887","RelatedDescription":"Open PR \"Remove over release in test\" (#23887)"},{"Id":"431793400","IsPullRequest":true,"CreatedAt":"2019-04-11T01:51:15","Actor":"stephentoub","Number":"23886","RawContent":null,"Title":"Nullable: System.Runtime.CompilerServices","State":"open","Body":"","Url":"https://github.com/dotnet/coreclr/pull/23886","RelatedDescription":"Open PR \"Nullable: System.Runtime.CompilerServices\" (#23886)"},{"Id":"431784717","IsPullRequest":false,"CreatedAt":"2019-04-11T01:06:33","Actor":"VincentBu","Number":"23885","RawContent":null,"Title":"[arm64] Test failed: System.Numerics.Tests.PlaneTests.PlaneNormalizeTest","State":"open","Body":"**Job:**\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/view/arm64/job/jitstress/job/arm64_cross_checked_ubuntu16.04_corefx_jitstressregs0x80_tst/160/\r\n\r\n**Failed tests:**\r\nSystem.Numerics.Tests.PlaneTests.PlaneNormalizeTest\r\n\r\n**Log:**\r\n```\r\nSystem.Numerics.Tests.PlaneTests.PlaneNormalizeTest [FAIL]\r\n      Plane.Normalize returns unexpected value.\r\n      Expected: True\r\n      Actual:   False\r\n      Stack Trace:\r\n        /mnt/j/workspace/dotnet_coreclr/master/jitstress/arm64_cross_checked_ubuntu16.04_corefx_jitstressregs0x80/_/fx/src/System.Numerics.Vectors/tests/PlaneTests.cs(217,0): at System.Numerics.Tests.PlaneTests.PlaneNormalizeTest()\r\n\r\nAssert failure(PID 38674 [0x00009712], Thread: 42549 [0xa635]): Assertion failed 'spillReg != REG_NA' in 'System.Numerics.Tests.GenericVectorTests:TestVectorGreaterThanOrEqualAny():this' (IL size 526)\r\n\r\n    File: /mnt/j/workspace/dotnet_coreclr/master/jitstress/arm64_cross_checked_ubuntu16.04_corefx_jitstressregs0x80/src/jit/lsra.cpp Line: 6372\r\n    Image: /home/robox/j/workspace/dotnet_coreclr/master/jitstress/arm64_cross_checked_ubuntu16.04_corefx_jitstressregs0x80_tst/_/fx/artifacts/bin/testhost/netcoreapp-Linux-Release-arm64/dotnet\r\n\r\n\r\nAssert failure(PID 38674 [0x00009712], Thread: 42549 [0xa635]): Assertion failed 'spillReg != REG_NA' in 'System.Numerics.Tests.GenericVectorTests:TestVectorGreaterThanOrEqualAny():this' (IL size 526)\r\n\r\n    File: /mnt/j/workspace/dotnet_coreclr/master/jitstress/arm64_cross_checked_ubuntu16.04_corefx_jitstressregs0x80/src/jit/lsra.cpp Line: 6372\r\n    Image: /home/robox/j/workspace/dotnet_coreclr/master/jitstress/arm64_cross_checked_ubuntu16.04_corefx_jitstressregs0x80_tst/_/fx/artifacts/bin/testhost/netcoreapp-Linux-Release-arm64/dotnet\r\n\r\n./RunTests.sh: line 142: 38674 Aborted                 (core dumped) \"$RUNTIME_PATH/dotnet\" xunit.console.dll System.Numerics.Vectors.Tests.dll -xml testResults.xml -nologo -nocolor -notrait category=nonnetcoreapptests -notrait category=nonlinuxtests -notrait category=IgnoreForCI -notrait category=failing -notrait category=OuterLoop\r\n/home/robox/j/workspace/dotnet_coreclr/master/jitstress/arm64_cross_checked_ubuntu16.04_corefx_jitstressregs0x80_tst/_/fx/artifacts/bin/tests/System.Numerics.Vectors.Tests/netcoreapp-Linux-Release-arm64\r\nexit code 134\r\n```","Url":"https://github.com/dotnet/coreclr/issues/23885","RelatedDescription":"Open issue \"[arm64] Test failed: System.Numerics.Tests.PlaneTests.PlaneNormalizeTest\" (#23885)"},{"Id":"431783965","IsPullRequest":true,"CreatedAt":"2019-04-11T01:02:13","Actor":"dotnet-maestro-bot","Number":"23884","RawContent":null,"Title":"Update CoreClr to preview5-27610-72 (master)","State":"open","Body":"/cc @dotnet/maestro-reviewers-core","Url":"https://github.com/dotnet/coreclr/pull/23884","RelatedDescription":"Open PR \"Update CoreClr to preview5-27610-72 (master)\" (#23884)"},{"Id":"431783526","IsPullRequest":false,"CreatedAt":"2019-04-11T00:59:52","Actor":"VincentBu","Number":"23883","RawContent":null,"Title":"[x86] Test failed: Interop\\COM\\NETClients\\ConsumeNETServer\\ConsumeNETServer\\ConsumeNETServer.cmd","State":"open","Body":"**Job:**\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/view/x86/job/jitstress/job/x86_checked_windows_nt_gcstress0xc_jitstress1/127/\r\n\r\n**Failed tests:**\r\nInterop\\COM\\NETClients\\ConsumeNETServer\\ConsumeNETServer\\ConsumeNETServer.cmd\r\n\r\n**Log:**\r\n```\r\nInterop\\COM\\NETClients\\ConsumeNETServer\\ConsumeNETServer\\ConsumeNETServer.cmd [FAIL]\r\n        \r\n        Assert failure(PID 10888 [0x00002a88], Thread: 5356 [0x14ec]): !\"Invalid Release() call on already released object. A managed object exposed to COM is being over-released from unmanaged code\"\r\n        \r\n        CORECLR! SimpleComCallWrapper::Release + 0xC8 (0x729709e2)\r\n        CORECLR! ComCallWrapper::Release + 0x6D (0x72970775)\r\n        CORECLR! Unknown_Release_Internal + 0x180 (0x72972acb)\r\n        CORECLR! Unknown_Release + 0x8B (0x72c13a5b)\r\n        CORECLR! SafeReleasePreemp + 0xC4 (0x729b5cf7)\r\n        CORECLR! RCW::ReleaseAllInterfaces + 0x2A4 (0x72c4bcd6)\r\n        CORECLR! RCW::ReleaseAllInterfacesCallBack + 0x284 (0x72c4bf94)\r\n        CORECLR! RCW::Cleanup + 0x131 (0x72c3a72f)\r\n        CORECLR! RCWCleanupList::ReleaseRCWListRaw + 0x6F (0x72c4c936)\r\n        CORECLR! RCWCleanupList::ReleaseRCWListInCorrectCtx + 0x209 (0x72c4c879)\r\n            File: d:\\j\\workspace\\x86_checked_w---e2fd27ad\\src\\vm\\comcallablewrapper.h Line: 1850\r\n            Image: D:\\j\\workspace\\x86_checked_w---e2fd27ad\\bin\\tests\\Windows_NT.x86.Checked\\Tests\\Core_Root\\CoreRun.exe\r\n        \r\n        \r\n  \r\n  Return code:      1\r\n  Raw output file:      D:\\j\\workspace\\x86_checked_w---e2fd27ad\\bin\\tests\\Windows_NT.x86.Checked\\Reports\\Interop.COM\\NETClients\\ConsumeNETServer\\ConsumeNETServer\\ConsumeNETServer.output.txt\r\n  Raw output:\r\n  BEGIN EXECUTION\r\n        Copying 'D:\\j\\workspace\\x86_checked_w---e2fd27ad\\bin\\tests\\Windows_NT.x86.Checked\\Tests\\Core_Root\\CoreShim.dll'...\r\n                1 file(s) copied.\r\n         \"D:\\j\\workspace\\x86_checked_w---e2fd27ad\\bin\\tests\\Windows_NT.x86.Checked\\Tests\\Core_Root\\corerun.exe\" ConsumeNETServer.exe \r\n        Validate_Activation...\r\n        Validate_CCW_Wasnt_Unwrapped...\r\n        Validate_Client_CCW_RCW...\r\n        Validate_Server_CCW_RCW...\r\n        Expected: 100\r\n        Actual: -1073740286\r\n        END EXECUTION - FAILED\r\n        FAILED\r\n        Test Harness Exitcode is : 1\r\n        \r\n  To run the test:\r\n  > set CORE_ROOT=D:\\j\\workspace\\x86_checked_w---e2fd27ad\\bin\\tests\\Windows_NT.x86.Checked\\Tests\\Core_Root\r\n  > D:\\j\\workspace\\x86_checked_w---e2fd27ad\\bin\\tests\\Windows_NT.x86.Checked\\Interop\\COM\\NETClients\\ConsumeNETServer\\ConsumeNETServer\\ConsumeNETServer.cmd\r\n  \r\n        Expected: True\r\n        Actual:   False\r\n        Stack Trace:\r\n          D:\\j\\workspace\\x86_checked_w---e2fd27ad\\bin\\tests\\Windows_NT.x86.Checked\\TestWrappers\\Interop.COM\\Interop.COM.XUnitWrapper.cs(467,0): at Interop_COM._NETClients_ConsumeNETServer_ConsumeNETServer_ConsumeNETServer_._NETClients_ConsumeNETServer_ConsumeNETServer_ConsumeNETServer_cmd()\r\n```","Url":"https://github.com/dotnet/coreclr/issues/23883","RelatedDescription":"Open issue \"[x86] Test failed: Interop\\COM\\NETClients\\ConsumeNETServer\\ConsumeNETServer\\ConsumeNETServer.cmd\" (#23883)"},{"Id":"431782877","IsPullRequest":false,"CreatedAt":"2019-04-11T00:56:31","Actor":"VincentBu","Number":"23882","RawContent":null,"Title":"[x86] error RC1015 in x86_checked_windows_nt","State":"open","Body":"**Job:**\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/view/x86/job/jitstress/job/x86_checked_windows_nt_gcstress0xc/129/\r\n\r\n**Log:**\r\n```\r\nD:\\j\\workspace\\x86_checked_w---e5963ece\\src\\pal\\prebuilt\\inc\\fxver.rc(35): fatal error RC1015: cannot open include file '_version.h'. \r\n```","Url":"https://github.com/dotnet/coreclr/issues/23882","RelatedDescription":"Open issue \"[x86] error RC1015 in x86_checked_windows_nt\" (#23882)"},{"Id":"431782186","IsPullRequest":true,"CreatedAt":"2019-04-11T00:52:50","Actor":"BruceForstall","Number":"23881","RawContent":null,"Title":"Fix x86 stack probing","State":"open","Body":"On x86, structs are passed by value on the stack. We copy structs\r\nto the stack in various ways, but one way is to first subtract the\r\nsize of the struct and then use a \"rep movsb\" instruction. If the\r\nstruct we are passing is sufficiently large, this can cause us to\r\nmiss the stack guard page.\r\n\r\nSo, introduce stack probes for these struct copies.\r\n\r\nIt turns out the stack pointer after prolog probing can be sitting\r\nnear the very end of the guard page (one `STACK_ALIGN` slot before\r\nthe end, which allows a \"call\" instruction which pushes its\r\nreturn address to touch the guard page with the return address push).\r\nWe don't want to probe with every argument push, though. So change\r\nthe prolog probing to insert an \"extra\" touch at the final SP location\r\nif the previous touch was \"too far\" away, leaving at least some\r\nbuffer zone for un-probed SP adjustments. I chose this to be the\r\nsize of the largest SIMD register, which also can get copied to the\r\nargument stack with a \"SUB;MOV\" sequence.\r\n\r\nAdded several test case variations showing different large stack\r\nprobe situations.\r\n\r\nFixes #23796","Url":"https://github.com/dotnet/coreclr/pull/23881","RelatedDescription":"Open PR \"Fix x86 stack probing\" (#23881)"},{"Id":"431738771","IsPullRequest":true,"CreatedAt":"2019-04-10T23:12:26","Actor":"stephentoub","Number":"23878","RawContent":null,"Title":"Address follow-up PR feedback on System nullability annotations","State":"closed","Body":"Address @safern's post-merge feedback.  Thanks, Santi.","Url":"https://github.com/dotnet/coreclr/pull/23878","RelatedDescription":"Closed or merged PR \"Address follow-up PR feedback on System nullability annotations\" (#23878)"},{"Id":"431754878","IsPullRequest":true,"CreatedAt":"2019-04-10T22:57:06","Actor":"krwq","Number":"23880","RawContent":null,"Title":"Nullable: Interop: Kernel32 and few others","State":"open","Body":"couple of easy ones","Url":"https://github.com/dotnet/coreclr/pull/23880","RelatedDescription":"Open PR \"Nullable: Interop: Kernel32 and few others\" (#23880)"},{"Id":"431744209","IsPullRequest":true,"CreatedAt":"2019-04-10T22:24:16","Actor":"sandreenko","Number":"23879","RawContent":null,"Title":"[WIP] Reenable System.Runtime.Numerics.Tests.","State":"open","Body":"I was not able to repro it locally, lets try to repro it in ci.","Url":"https://github.com/dotnet/coreclr/pull/23879","RelatedDescription":"Open PR \"[WIP] Reenable System.Runtime.Numerics.Tests.\" (#23879)"},{"Id":"431677748","IsPullRequest":true,"CreatedAt":"2019-04-10T22:19:12","Actor":"briansull","Number":"23876","RawContent":null,"Title":"Improved JitDump","State":"closed","Body":"- Prints the bbNatLoopNum when dumping the BasicBlocks\r\n- Refactor the GenTree node dump to use gtDispCommonEndLine:\r\n//     Utility function that prints the following node information\r\n//       1: The associated zero field sequence (if any)\r\n//       2. The register assigned to this node (if any)\r\n//       2. The value number assigned (if any)\r\n//       3. A newline character","Url":"https://github.com/dotnet/coreclr/pull/23876","RelatedDescription":"Closed or merged PR \"Improved JitDump\" (#23876)"},{"Id":"431722708","IsPullRequest":true,"CreatedAt":"2019-04-10T21:24:17","Actor":"jkoritzinsky","Number":"23877","RawContent":null,"Title":"If a delegate type is a WinRT delegate or a WinRT-projected delegate, allow default marshalling.","State":"open","Body":"When we changed the behavior of delegate marshalling to disallow users to marshal to the old `_Delegate` interface from the Mscorlib TLB in #23738, I missed a corner case where we might be marshalling for a WinRT event but might not be in a WinRT marshalling scenario, such subscribing to the `INotifyPropertyChanged.PropertyChanged` event. While I was working on cleaning up #23409, I found this bug.\r\n\r\nThis change allows any delegates that are WinRT delegates or are projected to/from WinRT delegates to marshal by default rules.","Url":"https://github.com/dotnet/coreclr/pull/23877","RelatedDescription":"Open PR \"If a delegate type is a WinRT delegate or a WinRT-projected delegate, allow default marshalling.\" (#23877)"},{"Id":"431639762","IsPullRequest":true,"CreatedAt":"2019-04-10T20:50:31","Actor":"dotnet-maestro-bot","Number":"23871","RawContent":null,"Title":"[automated] Merge branch 'release/2.1' => 'release/2.2'","State":"closed","Body":"I detected changes in the release/2.1 branch which have not been merged yet to release/2.2. I'm a robot and am configured to help you automatically keep release/2.2 up to date, so I've opened this PR.\r\n\r\nThis PR merges commits made on release/2.1 by the following committers:\n\n* @wtgodbe\n* @dotnet-maestro-bot\r\n\r\n## Instructions for merging from UI\r\n\r\nThis PR will not be auto-merged. When pull request checks pass, complete this PR by creating a merge commit, *not* a squash or rebase commit.\r\n\r\n<img alt=\"merge button instructions\" src=\"https://i.imgur.com/GepcNJV.png\" width=\"300\" />\r\n\r\nIf this repo does not allow creating merge commits from the GitHub UI, use command line instructions.\r\n\r\n## Instructions for merging via command line\r\n\r\nRun these commands to merge this pull request from the command line.\r\n\r\n``` sh\r\ngit fetch\r\ngit checkout release/2.1\r\ngit pull --ff-only\r\ngit checkout release/2.2\r\ngit pull --ff-only\r\ngit merge --no-ff release/2.1\r\n\r\n# If there are merge conflicts, resolve them and then run git merge --continue to complete the merge\r\n# Pushing the changes to the PR branch will re-trigger PR validation.\r\ngit push https://github.com/dotnet-maestro-bot/coreclr HEAD:merge/release/2.1-to-release/2.2\r\n```\r\n\r\n<details>\r\n<summary>or if you are using SSH</summary>\r\n\r\n```\r\ngit push git@github.com:dotnet-maestro-bot/coreclr HEAD:merge/release/2.1-to-release/2.2\r\n```\r\n\r\n</details>\r\n\r\n\r\nAfter PR checks are complete push the branch\r\n```\r\ngit push\r\n```\r\n\r\n## Instructions for resolving conflicts\r\n\r\n:warning: If there are merge conflicts, you will need to resolve them manually before merging. You can do this [using GitHub][resolve-github] or using the [command line][resolve-cli].\r\n\r\n[resolve-github]: https://help.github.com/articles/resolving-a-merge-conflict-on-github/\r\n[resolve-cli]: https://help.github.com/articles/resolving-a-merge-conflict-using-the-command-line/\r\n\r\n## Instructions for updating this pull request\r\n\r\nContributors to this repo have permission update this pull request by pushing to the branch 'merge/release/2.1-to-release/2.2'. This can be done to resolve conflicts or make other changes to this pull request before it is merged.\r\n\r\n```\r\ngit checkout -b merge/release/2.1-to-release/2.2 release/2.2\r\ngit pull https://github.com/dotnet-maestro-bot/coreclr merge/release/2.1-to-release/2.2\r\n(make changes)\r\ngit commit -m \"Updated PR with my changes\"\r\ngit push https://github.com/dotnet-maestro-bot/coreclr merge/release/2.1-to-release/2.2\r\n```\r\n\r\n<details>\r\n    <summary>or if you are using SSH</summary>\r\n\r\n```\r\ngit checkout -b merge/release/2.1-to-release/2.2 release/2.2\r\ngit pull git@github.com:dotnet-maestro-bot/coreclr merge/release/2.1-to-release/2.2\r\n(make changes)\r\ngit commit -m \"Updated PR with my changes\"\r\ngit push git@github.com:dotnet-maestro-bot/coreclr merge/release/2.1-to-release/2.2\r\n```\r\n\r\n</details>\r\n\r\nContact .NET Core Engineering if you have questions or issues.\r\nAlso, if this PR was generated incorrectly, help us fix it. See https://github.com/dotnet/arcade/blob/master/scripts/GitHubMergeBranches.ps1.\r\n","Url":"https://github.com/dotnet/coreclr/pull/23871","RelatedDescription":"Closed or merged PR \"[automated] Merge branch 'release/2.1' => 'release/2.2'\" (#23871)"},{"Id":"431673071","IsPullRequest":true,"CreatedAt":"2019-04-10T19:25:50","Actor":"Anipik","Number":"23875","RawContent":null,"Title":"Nullable: Interop.Adavapi32","State":"open","Body":"","Url":"https://github.com/dotnet/coreclr/pull/23875","RelatedDescription":"Open PR \"Nullable: Interop.Adavapi32\" (#23875)"},{"Id":"431670328","IsPullRequest":true,"CreatedAt":"2019-04-10T19:18:32","Actor":"Anipik","Number":"23874","RawContent":null,"Title":"Nullable System.Diagnostics.Store","State":"open","Body":"","Url":"https://github.com/dotnet/coreclr/pull/23874","RelatedDescription":"Open PR \"Nullable System.Diagnostics.Store\" (#23874)"},{"Id":"431639383","IsPullRequest":true,"CreatedAt":"2019-04-10T19:06:02","Actor":"wtgodbe","Number":"23869","RawContent":null,"Title":"Update branding to 2.1.11","State":"closed","Body":"CC @mmitche @safern ","Url":"https://github.com/dotnet/coreclr/pull/23869","RelatedDescription":"Closed or merged PR \"Update branding to 2.1.11\" (#23869)"},{"Id":"431645066","IsPullRequest":false,"CreatedAt":"2019-04-10T18:20:13","Actor":"fadimounir","Number":"23873","RawContent":null,"Title":"We JIT some methods that should already have R2R code, even when tiered compilation is disabled","State":"open","Body":"Repro app: https://github.com/ridomin/msix-catalog\r\n\r\n1. cd msix.catalog.app\r\n2. set ReadyToRun property to true in the .core.csproj file\r\n3. Add this workaround to the csproj (#23872):\r\n`  <ItemGroup>\r\n    <ReadyToRunExclude Include=\"DirectWriteForwarder.dll\" />\r\n  </ItemGroup>`\r\n4. dotnet publish -r win-x64 to produce the R2R images\r\n5. set COMPLUS_TieredCompilation=0 and run the app\r\n\r\nThis will require the SDK bits from here for now: https://github.com/fadimounir/sdk/tree/CrossgenRefList:\r\n1) clone repo\r\n2) build\r\n3) eng\\dogfood.cmd and dotnet publish the app from there\r\n\r\nRunning this under PerfView, we can see that JIT is triggered for some methods that should be compiled in R2R images.\r\nExample: System.Configuration.ClientConfigurationHost.get_HasRoamingConfig() in assembly System.Configuration.ConfigurationManager.dll\r\n\r\nNote: crossgen will emit warnings when unable to compile a method due to a missing feature when using the /verbose switch, but for the example method above, crossgen's stdout indicates that the method has been compiled correctly.\r\n\r\nWe need to investigate:\r\n1) If the method has really been compiled in the R2R image\r\n2) Why it's being rejitted even with COMPLUS_TieredCompilation=0","Url":"https://github.com/dotnet/coreclr/issues/23873","RelatedDescription":"Open issue \"We JIT some methods that should already have R2R code, even when tiered compilation is disabled\" (#23873)"},{"Id":"431642072","IsPullRequest":false,"CreatedAt":"2019-04-10T18:13:23","Actor":"fadimounir","Number":"23872","RawContent":null,"Title":"R2R code calls a zero-address, and AVs","State":"open","Body":"Repro app: https://github.com/ridomin/msix-catalog\r\n1) cd msix.catalog.app\r\n2) set ReadyToRun property to true in the .core.csproj file\r\n3) dotnet publish -r win-x64 to produce the R2R images\r\n\r\nAV is in DirectWriteForwarder.dll, and is hit on the startup of the app.","Url":"https://github.com/dotnet/coreclr/issues/23872","RelatedDescription":"Open issue \"R2R code calls a zero-address, and AVs\" (#23872)"},{"Id":"431639473","IsPullRequest":true,"CreatedAt":"2019-04-10T18:07:00","Actor":"thaystg","Number":"23870","RawContent":null,"Title":"Changing DIM Test to run on mono either","State":"open","Body":"Changing the test to run on runtimes that supports lookups with runtime determined boxing and on runtimes that doesn't support.\r\nDiscussed with Michal Strehovsky.","Url":"https://github.com/dotnet/coreclr/pull/23870","RelatedDescription":"Open PR \"Changing DIM Test to run on mono either\" (#23870)"},{"Id":"431623624","IsPullRequest":false,"CreatedAt":"2019-04-10T17:27:59","Actor":"jkoritzinsky","Number":"23868","RawContent":null,"Title":"Document/Verify minimum supported CMake version per build OS","State":"open","Body":"We require a different version of CMake on each OS platform that we build on since we use the version provided by the package repository on the OS for non-Windows platforms. However, we have no documentation about what versions these are. As a result, it's very difficult to try to clean up our CMake scripts since there's no good way to know what version we need to support until a CI run fails.\r\n\r\ncc: @janvorli @jashook ","Url":"https://github.com/dotnet/coreclr/issues/23868","RelatedDescription":"Open issue \"Document/Verify minimum supported CMake version per build OS\" (#23868)"},{"Id":"431481970","IsPullRequest":true,"CreatedAt":"2019-04-10T16:38:41","Actor":"dotnet-maestro[bot]","Number":"23865","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190409.17\r\n- **Date Produced**: 4/10/2019 8:25 AM\r\n- **Commit**: 9e195d41f604e38fb227eaed017c9292c884149c\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.0.0-preview5-27609-17\r\n\r\n","Url":"https://github.com/dotnet/coreclr/pull/23865","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#23865)"},{"Id":"431258573","IsPullRequest":true,"CreatedAt":"2019-04-10T16:38:29","Actor":"dotnet-maestro-bot","Number":"23859","RawContent":null,"Title":"Update CoreClr to preview5-27610-71 (master)","State":"closed","Body":"/cc @dotnet/maestro-reviewers-core","Url":"https://github.com/dotnet/coreclr/pull/23859","RelatedDescription":"Closed or merged PR \"Update CoreClr to preview5-27610-71 (master)\" (#23859)"},{"Id":"431589962","IsPullRequest":false,"CreatedAt":"2019-04-10T16:30:58","Actor":"omajid","Number":"23866","RawContent":null,"Title":"ParseCommandLine in util.cpp handles pdst being null inconsistently","State":"closed","Body":"Initially, `ParseCommandLine` does checks to handle the case where `pdst` can be null:\r\n\r\nhttps://github.com/dotnet/coreclr/blob/289b7036dfa172fcbdb812c03ccfd599d6d09724/src/vm/util.cpp#L44\r\n\r\nBut later on, it seems to mix up that assumption by unconditionally doing `pdst++`:\r\n\r\nhttps://github.com/dotnet/coreclr/blob/289b7036dfa172fcbdb812c03ccfd599d6d09724/src/vm/util.cpp#L94\r\n\r\nPerhaps this code should assume/assert that `pdst` can never be null?","Url":"https://github.com/dotnet/coreclr/issues/23866","RelatedDescription":"Closed issue \"ParseCommandLine in util.cpp handles pdst being null inconsistently\" (#23866)"},{"Id":"431594866","IsPullRequest":true,"CreatedAt":"2019-04-10T16:20:01","Actor":"mikedn","Number":"23867","RawContent":null,"Title":"Fix ARM's genPutArgStk codegen","State":"open","Body":"When the `OBJ` node wraps a `LCL_VAR` node the code uses the type information (struct size, GC layout) from `LclVarDsc`. This is not always correct because the `OBJ` may actually have a different struct type due to type reinterpretation (e.g. `Unsafe.As<X, Y>`).\r\n\r\nFixes #23794 \r\n\r\nNo ARM32/64 FX diffs.","Url":"https://github.com/dotnet/coreclr/pull/23867","RelatedDescription":"Open PR \"Fix ARM's genPutArgStk codegen\" (#23867)"},{"Id":"431266052","IsPullRequest":false,"CreatedAt":"2019-04-10T05:49:36","Actor":"VincentBu","Number":"23862","RawContent":null,"Title":"[x64] Test failed: System.Numerics.Tests.GenericVectorTests.GreaterThanOrEqualAllDouble","State":"closed","Body":"**Job:**\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/view/x64/job/jitstress/job/x64_checked_windows_nt_corefx_jitstressregs3/809/#showFailuresLink\r\n\r\n**Failed tests:**\r\nSystem.Numerics.Tests.GenericVectorTests.ConditionalSelectUInt32\r\nSystem.Numerics.Tests.GenericVectorTests.NarrowDouble\r\nSystem.Numerics.Tests.GenericVectorTests.ConditionalSelectSingle\r\nSystem.Numerics.Tests.GenericVectorTests.ConditionalSelectUInt64\r\nSystem.Numerics.Tests.GenericVectorTests.ConditionalSelectInt16\r\nSystem.Numerics.Tests.GenericVectorTests.GreaterThanOrEqualAnySingle\r\nSystem.Numerics.Tests.GenericVectorTests.GreaterThanOrEqualAllSingle\r\nSystem.Numerics.Tests.GenericVectorTests.ConditionalSelectUInt16\r\nSystem.Numerics.Tests.GenericVectorTests.GreaterThanOrEqualAllUInt16\r\nSystem.Numerics.Tests.GenericVectorTests.GreaterThanOrEqualAnyInt32\r\nSystem.Numerics.Tests.GenericVectorTests.ConditionalSelectInt64\r\nSystem.Numerics.Tests.GenericVectorTests.GreaterThanOrEqualAllUInt32\r\nSystem.Numerics.Tests.GenericVectorTests.ConditionalSelectByte\r\nSystem.Numerics.Tests.GenericVectorTests.GreaterThanOrEqualAnyInt16\r\nSystem.Numerics.Tests.GenericVectorTests.ConditionalSelectSByte\r\nSystem.Numerics.Tests.GenericVectorTests.GreaterThanOrEqualAllUInt64\r\nSystem.Numerics.Tests.GenericVectorTests.GreaterThanOrEqualAllByte\r\nSystem.Numerics.Tests.GenericVectorTests.ConditionalSelectDouble\r\nSystem.Numerics.Tests.GenericVectorTests.GreaterThanOrEqualAnySByte\r\nSystem.Numerics.Tests.GenericVectorTests.ConditionalSelectInt32\r\nSystem.Numerics.Tests.GenericVectorTests.GreaterThanOrEqualAnyInt64\r\nSystem.Numerics.Tests.GenericVectorTests.GreaterThanOrEqualAllDouble\r\nSystem.Numerics.Tests.GenericVectorTests.GreaterThanOrEqualAnyDouble\r\n\r\n**Log:**\r\n```\r\nSystem.Numerics.Tests.GenericVectorTests.GreaterThanOrEqualAllDouble [FAIL]\r\n        Assert.True() Failure\r\n        Expected: True\r\n        Actual:   False\r\n        Stack Trace:\r\n          D:\\j\\workspace\\x64_checked_w---c4f69af3\\_\\fx\\src\\System.Numerics.Vectors\\tests\\GenericVectorTests.cs(1321,0): at System.Numerics.Tests.GenericVectorTests.TestVectorGreaterThanOrEqualAll[T]()\r\n```","Url":"https://github.com/dotnet/coreclr/issues/23862","RelatedDescription":"Closed issue \"[x64] Test failed: System.Numerics.Tests.GenericVectorTests.GreaterThanOrEqualAllDouble\" (#23862)"},{"Id":"431273183","IsPullRequest":true,"CreatedAt":"2019-04-10T04:18:25","Actor":"NextTurn","Number":"23863","RawContent":null,"Title":"Remove dlclose call to unload CoreCLR","State":"closed","Body":"@jkotas commented 2 years ago in https://github.com/dotnet/coreclr/issues/12266#issuecomment-308484006\r\n\r\n> Yes, the dlclose call should be removed.\r\n\r\nIs that still true?","Url":"https://github.com/dotnet/coreclr/pull/23863","RelatedDescription":"Closed or merged PR \"Remove dlclose call to unload CoreCLR\" (#23863)"},{"Id":"431292009","IsPullRequest":false,"CreatedAt":"2019-04-10T04:11:09","Actor":"GrabYourPitchforks","Number":"23864","RawContent":null,"Title":"Re-enable System.Text.Encoding tests in CoreCLR","State":"closed","Body":"We have some unit tests from the __System.Text.Encoding.Tests__ project suppressed in __CoreFX.issues.json__ since they were failing while the UTF-8 work was taking place. This is a tracking issue to re-enable them once the tests are fixed in CoreFX and make their way over here.","Url":"https://github.com/dotnet/coreclr/issues/23864","RelatedDescription":"Closed issue \"Re-enable System.Text.Encoding tests in CoreCLR\" (#23864)"},{"Id":"431265271","IsPullRequest":false,"CreatedAt":"2019-04-10T01:40:56","Actor":"VincentBu","Number":"23861","RawContent":null,"Title":"[x64] Test failed: System.Numerics.Tests.GenericVectorTests.LessThanAllDouble","State":"open","Body":"**Job:**\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/view/x64/job/jitstress/job/x64_checked_windows_nt_corefx_jitstressregs1/822/\r\n\r\n**Failed tests:**\r\nSystem.Numerics.Tests.GenericVectorTests.LessThanAllDouble\r\nSystem.Numerics.Tests.GenericVectorTests.LessThanAllSingle\r\n\r\n**Log:**\r\n```\r\nSystem.Numerics.Tests.GenericVectorTests.LessThanAllDouble [FAIL]\r\n        Assert.True() Failure\r\n        Expected: True\r\n        Actual:   False\r\n        Stack Trace:\r\n          D:\\j\\workspace\\x64_checked_w---8f525dba\\_\\fx\\src\\System.Numerics.Vectors\\tests\\GenericVectorTests.cs(1469,0): at System.Numerics.Tests.GenericVectorTests.TestVectorLessThanAll[T]()\r\n```","Url":"https://github.com/dotnet/coreclr/issues/23861","RelatedDescription":"Open issue \"[x64] Test failed: System.Numerics.Tests.GenericVectorTests.LessThanAllDouble\" (#23861)"},{"Id":"431264586","IsPullRequest":false,"CreatedAt":"2019-04-10T01:37:35","Actor":"VincentBu","Number":"23860","RawContent":null,"Title":"[x64] Precondition failure in x64_checked_windows_nt_corefx","State":"open","Body":"**Job:**\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/view/x64/job/jitstress/job/x64_checked_windows_nt_corefx_baseline/826/\r\n\r\n**Log:**\r\n```\r\nAssert failure(PID 4764 [0x0000129c], Thread: 7676 [0x1dfc]): Precondition failure: FAILED: !(section->Characteristics & ~((0x00000020 | 0x00000040 | 0x00000080| 0x02000000 | 0x04000000 | 0x08000000 | 0x20000000 | 0x40000000 | 0x80000000 | 0x10000000)))\r\n  \t FAILED: CheckNTHeaders()\r\n  \t\td:\\j\\workspace\\x64_checked_w---a7bd363e\\src\\inc\\pedecoder.inl, line: 701\r\n```","Url":"https://github.com/dotnet/coreclr/issues/23860","RelatedDescription":"Open issue \"[x64] Precondition failure in x64_checked_windows_nt_corefx\" (#23860)"}],"ResultType":"GitHubIssue"},"CLI-Issues":{"Issues":[{"Id":"431825950","IsPullRequest":true,"CreatedAt":"2019-04-11T04:32:27","Actor":"dotnet-maestro[bot]","Number":"11131","RawContent":null,"Title":"[release/3.0.1xx] Update dependencies from dotnet/sdk","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/sdk\r\n- **Build**: 20190410.3\r\n- **Date Produced**: 4/11/2019 4:31 AM\r\n- **Commit**: 814b7898f9908a88f62706331cf56f1ecc9745eb\r\n- **Branch**: refs/heads/release/3.0.1xx\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk** -> 3.0.100-preview4.19210.3\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11131","RelatedDescription":"Open PR \"[release/3.0.1xx] Update dependencies from dotnet/sdk\" (#11131)"},{"Id":"431790349","IsPullRequest":false,"CreatedAt":"2019-04-11T01:36:07","Actor":"KirillOsenkov","Number":"11130","RawContent":null,"Title":"NETCoreSdkResolver should give a clear error message when preview SDK is rejected due to UsePreviews=false","State":"open","Body":"Currently the experience we see when a preview SDK is rejected due to DisallowPrerelease()\r\nhttps://github.com/dotnet/cli/blob/bfffcb23ba270640b355e729f36b34c04fad0121/src/Microsoft.DotNet.MSBuildSdkResolver/VSSettings.cs#L75\r\n\r\nis not good. It's a generic failed to load .NET SDK error, and it's super hard to figure out that the SDK was actually found, but it was pre-release and the checkbox wasn't set.\r\n\r\nSee related: \r\nhttps://github.com/dotnet/roslyn/issues/34927\r\n\r\nIf I wasted four hours figuring this out and debugging through the SDK resolver, the UX here should really be improved.","Url":"https://github.com/dotnet/cli/issues/11130","RelatedDescription":"Open issue \"NETCoreSdkResolver should give a clear error message when preview SDK is rejected due to UsePreviews=false\" (#11130)"},{"Id":"431772125","IsPullRequest":true,"CreatedAt":"2019-04-11T00:01:29","Actor":"dotnet-bot","Number":"11129","RawContent":null,"Title":"Merge release/2.1.6xx to release/2.2.2xx","State":"open","Body":"\nThis is an automatically generated pull request from release/2.1.6xx into release/2.2.2xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1.6xx-to-release/2.2.2xx\ngit reset --hard upstream/release/2.2.2xx\ngit merge upstream/release/2.1.6xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.1.6xx-to-release/2.2.2xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/cli/pull/11129","RelatedDescription":"Open PR \"Merge release/2.1.6xx to release/2.2.2xx\" (#11129)"},{"Id":"431772102","IsPullRequest":true,"CreatedAt":"2019-04-11T00:01:23","Actor":"dotnet-bot","Number":"11128","RawContent":null,"Title":"Merge release/2.1.5xx to release/2.2.1xx","State":"open","Body":"\nThis is an automatically generated pull request from release/2.1.5xx into release/2.2.1xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1.5xx-to-release/2.2.1xx\ngit reset --hard upstream/release/2.2.1xx\ngit merge upstream/release/2.1.5xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.1.5xx-to-release/2.2.1xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/cli/pull/11128","RelatedDescription":"Open PR \"Merge release/2.1.5xx to release/2.2.1xx\" (#11128)"},{"Id":"431772092","IsPullRequest":true,"CreatedAt":"2019-04-11T00:01:21","Actor":"dotnet-bot","Number":"11127","RawContent":null,"Title":"Merge release/2.1.5xx to release/2.1.6xx","State":"open","Body":"\nThis is an automatically generated pull request from release/2.1.5xx into release/2.1.6xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1.5xx-to-release/2.1.6xx\ngit reset --hard upstream/release/2.1.6xx\ngit merge upstream/release/2.1.5xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.1.5xx-to-release/2.1.6xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/cli/pull/11127","RelatedDescription":"Open PR \"Merge release/2.1.5xx to release/2.1.6xx\" (#11127)"},{"Id":"431734701","IsPullRequest":false,"CreatedAt":"2019-04-10T21:52:38","Actor":"wli3","Number":"11126","RawContent":null,"Title":"Remove checked-in ArrayBufferWriter","State":"open","Body":"https://github.com/dotnet/corefx/issues/34794#issuecomment-457031923\r\n\r\nit is available now\r\n","Url":"https://github.com/dotnet/cli/issues/11126","RelatedDescription":"Open issue \"Remove checked-in ArrayBufferWriter\" (#11126)"},{"Id":"431463968","IsPullRequest":true,"CreatedAt":"2019-04-10T16:53:07","Actor":"dotnet-bot","Number":"11121","RawContent":null,"Title":"Merge release/2.2.2xx to release/3.0.1xx","State":"closed","Body":"\nThis is an automatically generated pull request from release/2.2.2xx into release/3.0.1xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.2.2xx-to-release/3.0.1xx\ngit reset --hard upstream/release/3.0.1xx\ngit merge upstream/release/2.2.2xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.2.2xx-to-release/3.0.1xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/cli/pull/11121","RelatedDescription":"Closed or merged PR \"Merge release/2.2.2xx to release/3.0.1xx\" (#11121)"},{"Id":"431543474","IsPullRequest":true,"CreatedAt":"2019-04-10T16:52:21","Actor":"dotnet-maestro-bot","Number":"11125","RawContent":null,"Title":"Update aspnet, coresetup to servicing-31150, preview1-26216-03, respectively (release/2.1.6xx)","State":"closed","Body":"/cc @dotnet/dotnet-cli","Url":"https://github.com/dotnet/cli/pull/11125","RelatedDescription":"Closed or merged PR \"Update aspnet, coresetup to servicing-31150, preview1-26216-03, respectively (release/2.1.6xx)\" (#11125)"},{"Id":"431542272","IsPullRequest":true,"CreatedAt":"2019-04-10T16:51:51","Actor":"dotnet-maestro-bot","Number":"11124","RawContent":null,"Title":"Update aspnet, coresetup to servicing-31150, preview1-26216-03, respectively (release/2.1.5xx)","State":"closed","Body":"/cc @dotnet/dotnet-cli","Url":"https://github.com/dotnet/cli/pull/11124","RelatedDescription":"Closed or merged PR \"Update aspnet, coresetup to servicing-31150, preview1-26216-03, respectively (release/2.1.5xx)\" (#11124)"},{"Id":"431469381","IsPullRequest":true,"CreatedAt":"2019-04-10T12:49:47","Actor":"dotnet-maestro[bot]","Number":"11123","RawContent":null,"Title":"[master] Update dependencies from dotnet/templating","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/templating\r\n- **Build**: 20190409.2\r\n- **Date Produced**: 4/10/2019 6:04 AM\r\n- **Commit**: 0ae2028f4ed06c931e5eddb1079134a9a924330e\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.TemplateEngine.Cli** -> 1.0.2-beta5.19209.2\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11123","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/templating\" (#11123)"},{"Id":"431465456","IsPullRequest":true,"CreatedAt":"2019-04-10T12:40:29","Actor":"dotnet-maestro[bot]","Number":"11122","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190409.2\r\n- **Date Produced**: 4/9/2019 12:54 PM\r\n- **Commit**: 63b76f3f952f821d0a7996427a9f3534f1c25ab7\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19209.2\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11122","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#11122)"},{"Id":"430929576","IsPullRequest":true,"CreatedAt":"2019-04-10T12:05:12","Actor":"dotnet-maestro[bot]","Number":"11107","RawContent":null,"Title":"[master] Update dependencies from dotnet/sdk","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/sdk\r\n- **Build**: 20190408.2\r\n- **Date Produced**: 4/8/2019 8:11 PM\r\n- **Commit**: 6b2c06d50e1397de5a8040dee2c17c7b691e6fb6\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk** -> 3.0.100-preview5.19208.2\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11107","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/sdk\" (#11107)"},{"Id":"430929420","IsPullRequest":true,"CreatedAt":"2019-04-10T12:04:36","Actor":"dotnet-maestro[bot]","Number":"11106","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190409.1\r\n- **Date Produced**: 4/9/2019 8:35 AM\r\n- **Commit**: 9d7e665ecf2606094677524ecd5af0fc39c7bb49\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19209.1\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11106","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#11106)"},{"Id":"430948595","IsPullRequest":false,"CreatedAt":"2019-04-10T11:28:41","Actor":"PDostalek","Number":"11109","RawContent":null,"Title":"[loc][Query][dotnet_cli] Localizability of string: 0; \"RollForwardOnNoCandidateFxDefinition\"","State":"closed","Body":"Hi,\r\nplease help localization team to answer question from translator.\r\n\r\nIn case translator is not sure about context/meaning/localizability of string we raise a question to Core team.\r\n\r\nCould you help please? Thanks!**\r\n\r\nSource:\r\nRoll forward on no candidate shared framework is enabled.\r\n\r\nFile Name:\r\ndotnet\\commands\\dotnet-help\\xlf\\LocalizableStrings.xlf\r\n\r\nResource ID:\r\n0; \"RollForwardOnNoCandidateFxDefinition\"\r\n\r\nQuery:\r\nPlease, explain this sentence for our translator . Thanks","Url":"https://github.com/dotnet/cli/issues/11109","RelatedDescription":"Closed issue \"[loc][Query][dotnet_cli] Localizability of string: 0; \"RollForwardOnNoCandidateFxDefinition\"\" (#11109)"},{"Id":"431229716","IsPullRequest":true,"CreatedAt":"2019-04-10T00:39:42","Actor":"dotnet-bot","Number":"11119","RawContent":null,"Title":"Merge release/2.2.1xx to release/2.2.2xx","State":"closed","Body":"\nThis is an automatically generated pull request from release/2.2.1xx into release/2.2.2xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.2.1xx-to-release/2.2.2xx\ngit reset --hard upstream/release/2.2.2xx\ngit merge upstream/release/2.2.1xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.2.1xx-to-release/2.2.2xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/cli/pull/11119","RelatedDescription":"Closed or merged PR \"Merge release/2.2.1xx to release/2.2.2xx\" (#11119)"},{"Id":"431229736","IsPullRequest":true,"CreatedAt":"2019-04-09T23:29:17","Actor":"dotnet-bot","Number":"11120","RawContent":null,"Title":"Merge release/2.2.2xx to release/3.0.1xx","State":"closed","Body":"\nThis is an automatically generated pull request from release/2.2.2xx into release/3.0.1xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.2.2xx-to-release/3.0.1xx\ngit reset --hard upstream/release/3.0.1xx\ngit merge upstream/release/2.2.2xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.2.2xx-to-release/3.0.1xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/cli/pull/11120","RelatedDescription":"Closed or merged PR \"Merge release/2.2.2xx to release/3.0.1xx\" (#11120)"},{"Id":"431112745","IsPullRequest":true,"CreatedAt":"2019-04-09T22:24:57","Actor":"dotnet-maestro-bot","Number":"11118","RawContent":null,"Title":"Update aspnet, aspnet, coresetup to rtm-35537, rtm-35537, 2.1.0, respectively (release/2.2.1xx)","State":"closed","Body":"/cc @dotnet/dotnet-cli","Url":"https://github.com/dotnet/cli/pull/11118","RelatedDescription":"Closed or merged PR \"Update aspnet, aspnet, coresetup to rtm-35537, rtm-35537, 2.1.0, respectively (release/2.2.1xx)\" (#11118)"},{"Id":"430620233","IsPullRequest":true,"CreatedAt":"2019-04-09T22:20:43","Actor":"dotnet-maestro[bot]","Number":"11103","RawContent":null,"Title":"[release/3.0.1xx] Update dependencies from dotnet/templating","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/templating\r\n- **Build**: 20190408.4\r\n- **Date Produced**: 4/8/2019 7:30 PM\r\n- **Commit**: 0fd9a865045026041f2ea4942eb8c91782193078\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.TemplateEngine.Cli** -> 1.0.2-beta5.19208.4\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11103","RelatedDescription":"Closed or merged PR \"[release/3.0.1xx] Update dependencies from dotnet/templating\" (#11103)"},{"Id":"431112451","IsPullRequest":true,"CreatedAt":"2019-04-09T21:47:43","Actor":"dotnet-maestro-bot","Number":"11117","RawContent":null,"Title":"Update aspnet, aspnet, coresetup to rtm-35537, rtm-35537, 2.1.0, respectively (release/2.2.2xx)","State":"closed","Body":"/cc @dotnet/dotnet-cli","Url":"https://github.com/dotnet/cli/pull/11117","RelatedDescription":"Closed or merged PR \"Update aspnet, aspnet, coresetup to rtm-35537, rtm-35537, 2.1.0, respectively (release/2.2.2xx)\" (#11117)"},{"Id":"431107163","IsPullRequest":true,"CreatedAt":"2019-04-09T18:45:20","Actor":"peterhuene","Number":"11116","RawContent":null,"Title":"Merge release/2.2.1xx-MSRC to release/2.2.1xx","State":"closed","Body":"","Url":"https://github.com/dotnet/cli/pull/11116","RelatedDescription":"Closed or merged PR \"Merge release/2.2.1xx-MSRC to release/2.2.1xx\" (#11116)"},{"Id":"431106573","IsPullRequest":false,"CreatedAt":"2019-04-09T18:13:27","Actor":"natemcmaster","Number":"11115","RawContent":null,"Title":"Support Microsoft.WindowsDesktop.App from dotnet-install.ps1","State":"open","Body":"The dotnet-install.ps1 script supports installing ASP.NET Core and NETCore.App shared frameworks. In .NET Core 3, there is a new shared framework, Microsoft.WindowsDesktop.App. It would be useful to add support for installing this with the dotnet-install.ps1 script.\r\n\r\nUsage:\r\n```ps1\r\n./dotnet-install.ps1 -runtime WindowsDesktop -version 3.0.0\r\n```\r\n\r\nNote: for obvious reasons, dotnet-install.sh does not need to support this.","Url":"https://github.com/dotnet/cli/issues/11115","RelatedDescription":"Open issue \"Support Microsoft.WindowsDesktop.App from dotnet-install.ps1\" (#11115)"},{"Id":"431082363","IsPullRequest":false,"CreatedAt":"2019-04-09T17:26:41","Actor":"Wscar","Number":"11114","RawContent":null,"Title":"dotnet add package -s","State":"closed","Body":"## Steps to reproduce\r\nI use \"dotnet add package xxx -s https://api.nuget.org/v3/index.json\r\n \" the command to install the specified package, which has been accessing my private package source instead of https://api.nuget.org/v3/index.json\r\n\r\n## Expected  behavior\r\n\r\n\r\n## Actual behavior\r\n\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\ninfo : 正在将包“Newtonsoft.Json”的 PackageReference 添加到项目“F:\\MyProject\\测试\\MogoDb更新数据\\MogoDb更新数据\\MogoDb更新数据.csproj”。\r\nlog  : 正在还原 F:\\MyProject\\测试\\MogoDb更新数据\\MogoDb更新数据\\MogoDb更新数据.csproj 的包...\r\ninfo :   GET http://192.168.1.197:8082/repository/nuget-hosted/FindPackagesById()?id='Newtonsoft.Json'&semVerLevel=2.0.0\r\ninfo :   CACHE https://api.nuget.org/v3-flatcontainer/newtonsoft.json/index.json\r\nlog  : 对源“http://192.168.1.197:8082/repository/nuget-hosted/FindPackagesById()?id='Newtonsoft.Json'&semVerLevel=2.0.0”重试“FindPackagesByIdAsyncCore”。\r\nlog  : 由于连接方在一段时间后没有正确答复或连接的主机没有反应，连接尝试失败。\r\ninfo :   GET http://192.168.1.197:8082/repository/nuget-hosted/FindPackagesById()?id='Newtonsoft.Json'&semVerLevel=2.0.0\r\nlog  : 对源“http://192.168.1.197:8082/repository/nuget-hosted/FindPackagesById()?id='Newtonsoft.Json'&semVerLevel=2.0.0”重试“FindPackagesByIdAsyncCore”。\r\nlog  : 由于连接方在一段时间后没有正确答复或连接的主机没有反应，连接尝试失败。\r\ninfo :   GET http://192.168.1.197:8082/repository/nuget-hosted/FindPackagesById()?id='Newtonsoft.Json'&semVerLevel=2.0.0\r\nerror: 未能从远程源“http://192.168.1.197:8082/repository/nuget-hosted/FindPackagesById()?id='Newtonsoft.Json'&semVerLevel=2.0.0”检索有关“Newtonsoft.Json”的信息。\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/11114","RelatedDescription":"Closed issue \"dotnet add package -s\" (#11114)"},{"Id":"431068496","IsPullRequest":true,"CreatedAt":"2019-04-09T16:45:43","Actor":"nugetlurker","Number":"11113","RawContent":null,"Title":"Insert NuGet Build 5.1.0-preview2.5951 into cli","State":"open","Body":"Insert NuGet Build 5.1.0-preview2.5951 into cli release/2.1.7xx branch","Url":"https://github.com/dotnet/cli/pull/11113","RelatedDescription":"Open PR \"Insert NuGet Build 5.1.0-preview2.5951 into cli\" (#11113)"},{"Id":"431068464","IsPullRequest":true,"CreatedAt":"2019-04-09T16:45:39","Actor":"nugetlurker","Number":"11112","RawContent":null,"Title":"Insert NuGet Build 5.1.0-preview2.5951 into cli","State":"open","Body":"Insert NuGet Build 5.1.0-preview2.5951 into cli release/2.2.3xx branch","Url":"https://github.com/dotnet/cli/pull/11112","RelatedDescription":"Open PR \"Insert NuGet Build 5.1.0-preview2.5951 into cli\" (#11112)"},{"Id":"430846448","IsPullRequest":false,"CreatedAt":"2019-04-09T16:12:00","Actor":"Jepson109","Number":"11105","RawContent":null,"Title":"For .Net Core 3.0, create a wpf app, dotnet run with the windows box is blank","State":"closed","Body":"#### Repro steps\r\nCreate a WPF app. Build and run\r\n\tdotnet new wpf -o MyWPFApp1\r\n\tcd MyWPFApp1 \r\n\tdotnet build \r\n\tdotnet run\r\n\r\n\r\n\r\n\r\n#### Expected behavior\r\n\r\n It should appear a windows box like this\r\n![image](https://user-images.githubusercontent.com/38854445/55781816-983e4200-5add-11e9-95de-780ac87d0f31.png)\r\n\r\n\r\n#### Actual behavior\r\n\r\nThe windows box is blank\r\n![image](https://user-images.githubusercontent.com/38854445/55781923-ca4fa400-5add-11e9-85a2-9bf6c17a7e30.png)\r\n\r\n\r\n\r\nNote: D16.0/28803.156(16.0.1) + CLI/SDK: 3.0.100-preview5-011151 \r\n\r\n\r\nc:\\>dotnet --info\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview5-011153\r\n Commit:    cbb383cc73\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview5-011153\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview5-27607-08\r\n  Commit:  1cdd7e4289\r\n\r\n.NET Core SDKs installed:\r\n  2.1.602 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.202 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview5-011153 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview4-19208-06 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview5-27607-08 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview4-27607-5 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/11105","RelatedDescription":"Closed issue \"For .Net Core 3.0, create a wpf app, dotnet run with the windows box is blank\" (#11105)"},{"Id":"431005229","IsPullRequest":false,"CreatedAt":"2019-04-09T14:38:25","Actor":"danielpalme","Number":"11111","RawContent":null,"Title":"DotnetCliTool on 3.0","State":"open","Body":"## Steps to reproduce\r\nI tried to create a `DotnetCliTool` package for _.NETCoreApp3.0_.\r\nJust a simple _Hello world_ application.\r\nThe application is packaged with a `nuspec` file with `<packageType name=\"DotnetCliTool\" />`.\r\n\r\n```xml\r\n<?xml version=\"1.0\"?>\r\n<package xmlns=\"http://schemas.microsoft.com/packaging/2010/07/nuspec.xsd\">\r\n  <metadata>\r\n    <id>dotnet-sample</id>\r\n    <version>1.0.0</version>\r\n    <title />\r\n    <authors>TODO</authors>\r\n    <owners />\r\n    <requireLicenseAcceptance>false</requireLicenseAcceptance>\r\n    <summary>TODO</summary>\r\n    <description>TODO</description>\r\n    <packageTypes>\r\n      <packageType name=\"DotnetCliTool\" />\r\n    </packageTypes>\r\n\t<dependencies>\r\n      <group targetFramework=\".NETCoreApp3.0\" />\r\n    </dependencies>\r\n  </metadata>\r\n  <files>\r\n    <file src=\"dotnet-sample.dll\" target=\"lib\\netcoreapp3.0\\dotnet-sample.dll\" />\r\n    <file src=\"dotnet-sample.runtimeconfig.json\" target=\"lib\\netcoreapp3.0\\dotnet-sample.runtimeconfig.json\" />\r\n  </files>\r\n</package>\r\n```\r\nThe package is referenced in another `csproj` file:\r\n```xml\r\n<ItemGroup>\r\n  <DotNetCliToolReference Include=\"dotnet-sample\" Version=\"1.0.0\" />\r\n</ItemGroup>\r\n```\r\nWhen the cli tool gets executed with `dotnet sample` the following error occurs:\r\n```\r\nError:\r\n  An assembly specified in the application dependencies manifest (dotnet-sample.deps.json) has already been found but with a different file extension:\r\n    package: 'dotnet-sample', version: '1.0.0'\r\n    path: 'lib/netcoreapp3.0/dotnet-sample.exe'\r\n    previously found assembly: 'C:\\Users\\USERNAME\\.nuget\\packages\\dotnet-sample\\1.0.0\\lib\\netcoreapp3.0\\dotnet-sample.dll'\r\n```\r\nIt does not matter if `dotnet-sample.exe` is included into the nuget package or not.\r\n\r\n## Expected  behavior\r\nCli tool executes without error.\r\nOr are `DotnetCliTools` no longer supported?\r\n\r\n## Actual behavior\r\nSee error above.\r\nSample Nuget package and source code:\r\n[NugetPackage_SourceCode.zip](https://github.com/dotnet/cli/files/3059506/NugetPackage_SourceCode.zip)\r\n\r\nGlobal tool `<packageType name=\"DotnetTool\" />` works without issues.\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n```\r\n.NET Core SDK (gemäß \"global.json\"):\r\n Version:   3.0.100-preview3-010431\r\n Commit:    d72abce213\r\n\r\nLaufzeitumgebung:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview3-010431\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview3-27503-5\r\n  Commit:  3844df9537\r\n\r\n.NET Core SDKs installed:\r\n  2.1.402 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.403 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.500 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.503 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.504 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.505 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.602 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.104 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.202 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview3-010431 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview3-19153-02 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview3-27503-5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview3-27504-2 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n```\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/11111","RelatedDescription":"Open issue \"DotnetCliTool on 3.0\" (#11111)"},{"Id":"430956464","IsPullRequest":false,"CreatedAt":"2019-04-09T13:05:29","Actor":"PDostalek","Number":"11110","RawContent":null,"Title":"[loc][Query][dotnet_cli] Localizability of string: 0; \"NoReferencesFound\"","State":"open","Body":"Hi,\r\nplease help localization team to answer question from translator.\r\n\r\nIn case translator is not sure about context/meaning/localizability of string we raise a question to Core team.\r\n\r\nCould you help please? Thanks!**\r\n\r\nSource:\r\nThere are no {0} references in project {1}. ;; {0} is the type of the item being requested (project, package, p2p) and {1} is the object operated on (a project file or a solution file). \r\n\r\nFile Name:\r\ndotnet\\xlf\\CommonLocalizableStrings.xlf\r\n\r\nResource ID:\r\n 0; \"NoReferencesFound\"\r\n\r\nQuery:\r\nIs this punctuation a symbol that will be replaced \". ;; \"??\r\nWe leave it as source by now.","Url":"https://github.com/dotnet/cli/issues/11110","RelatedDescription":"Open issue \"[loc][Query][dotnet_cli] Localizability of string: 0; \"NoReferencesFound\"\" (#11110)"},{"Id":"430933700","IsPullRequest":true,"CreatedAt":"2019-04-09T12:55:19","Actor":"dotnet-maestro[bot]","Number":"11108","RawContent":null,"Title":"[master] Update dependencies from dotnet/templating","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/templating\r\n- **Build**: 20190408.3\r\n- **Date Produced**: 4/8/2019 5:46 PM\r\n- **Commit**: 704d12668d5379fd4cb8bbdee43fe557be8f77e4\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.TemplateEngine.Cli** -> 1.0.2-beta5.19208.3\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11108","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/templating\" (#11108)"},{"Id":"430616030","IsPullRequest":true,"CreatedAt":"2019-04-09T01:37:07","Actor":"dotnet-maestro[bot]","Number":"11102","RawContent":null,"Title":"[release/3.0.1xx] Update dependencies from dotnet/sdk","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/sdk\r\n- **Build**: 20190408.1\r\n- **Date Produced**: 4/8/2019 7:19 PM\r\n- **Commit**: c148f24096eb3d0b6ca19cc187ad4e31f576b04a\r\n- **Branch**: refs/heads/release/3.0.1xx\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk** -> 3.0.100-preview4.19208.1\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11102","RelatedDescription":"Closed or merged PR \"[release/3.0.1xx] Update dependencies from dotnet/sdk\" (#11102)"},{"Id":"430667549","IsPullRequest":false,"CreatedAt":"2019-04-08T21:29:43","Actor":"CESARDELATORRE","Number":"11104","RawContent":null,"Title":"Any way to detect a new version of the Global Tool package and warn the user?","State":"open","Body":"This probably applies to any .net core global tool.\r\nSince a CLI tool is an independent tool, we should be able to check out that there’s a new version available (at NuGet, etc.) and at least warn the user pointing to a URL with instructions for upgrading (or do any other action in the future).\r\nBut we need a way to detect if there's a new version available. Is there any way to do this?\r\n\r\nRef: https://github.com/dotnet/command-line-api/issues/489\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/11104","RelatedDescription":"Open issue \"Any way to detect a new version of the Global Tool package and warn the user?\" (#11104)"}],"ResultType":"GitHubIssue"},"Standard-Issues":{"Issues":[{"Id":"431464888","IsPullRequest":true,"CreatedAt":"2019-04-10T12:13:44","Actor":"dotnet-maestro[bot]","Number":"1136","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190409.2\r\n- **Date Produced**: 4/9/2019 12:54 PM\r\n- **Commit**: 63b76f3f952f821d0a7996427a9f3534f1c25ab7\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19209.2\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19209.2\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19209.2\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19209.2\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19209.2\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1136","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1136)"},{"Id":"429978073","IsPullRequest":true,"CreatedAt":"2019-04-09T16:30:37","Actor":"JohnTortugo","Number":"1126","RawContent":null,"Title":"Onboard on async publishing","State":"closed","Body":"Relates to: https://github.com/dotnet/arcade/issues/2442\r\n\r\nGoal: mitigate `lock on the feed problem` and add further validations. [More details here.](https://github.com/dotnet/arcade/blob/master/Documentation/CorePackages/AsyncPublishing_HowToUse.md)\r\n\r\nTest build was here: https://dnceng.visualstudio.com/internal/_build/results?buildId=144566\r\nTest release: https://dnceng.visualstudio.com/internal/_releaseProgress?_a=release-pipeline-progress&releaseId=4241","Url":"https://github.com/dotnet/standard/pull/1126","RelatedDescription":"Closed or merged PR \"Onboard on async publishing\" (#1126)"},{"Id":"430928858","IsPullRequest":true,"CreatedAt":"2019-04-09T12:13:46","Actor":"dotnet-maestro[bot]","Number":"1135","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190409.1\r\n- **Date Produced**: 4/9/2019 8:35 AM\r\n- **Commit**: 9d7e665ecf2606094677524ecd5af0fc39c7bb49\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19209.1\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19209.1\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19209.1\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19209.1\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19209.1\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1135","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1135)"},{"Id":"430724535","IsPullRequest":true,"CreatedAt":"2019-04-09T01:31:16","Actor":"wtgodbe","Number":"1133","RawContent":null,"Title":"Add triggers for release/3.0","State":"closed","Body":"CC @mmitche ","Url":"https://github.com/dotnet/standard/pull/1133","RelatedDescription":"Closed or merged PR \"Add triggers for release/3.0\" (#1133)"},{"Id":"430724563","IsPullRequest":true,"CreatedAt":"2019-04-09T01:31:07","Actor":"wtgodbe","Number":"1134","RawContent":null,"Title":"Add triggers for release/3.0","State":"closed","Body":"CC @mmitche ","Url":"https://github.com/dotnet/standard/pull/1134","RelatedDescription":"Closed or merged PR \"Add triggers for release/3.0\" (#1134)"},{"Id":"430719996","IsPullRequest":true,"CreatedAt":"2019-04-09T01:25:47","Actor":"wtgodbe","Number":"1132","RawContent":null,"Title":"Update branding to preview5","State":"closed","Body":"CC @mmitche","Url":"https://github.com/dotnet/standard/pull/1132","RelatedDescription":"Closed or merged PR \"Update branding to preview5\" (#1132)"},{"Id":"430670575","IsPullRequest":false,"CreatedAt":"2019-04-08T21:50:37","Actor":"tom-corwin","Number":"1131","RawContent":null,"Title":"Support for System.Reflection.Emit.ILGenerator.EmitCalli overload for unmanaged calling conventions","State":"closed","Body":"I noticed that when targeting a .NET Standard library, there is no overload for System.Reflection.Emit.ILGenerator.EmitCalli() that allows for use of the System.Runtime.InteropServices.CallingConvention enum as a parameter.\r\n\r\nAre there any plans to add the overload, or is this going to be on implementation-only?","Url":"https://github.com/dotnet/standard/issues/1131","RelatedDescription":"Closed issue \"Support for System.Reflection.Emit.ILGenerator.EmitCalli overload for unmanaged calling conventions\" (#1131)"},{"Id":"430411848","IsPullRequest":true,"CreatedAt":"2019-04-08T12:13:43","Actor":"dotnet-maestro[bot]","Number":"1130","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190407.1\r\n- **Date Produced**: 4/7/2019 12:56 PM\r\n- **Commit**: b1f9e12fe3ee71c48ea60b15968745850ac0a4a7\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19207.1\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19207.1\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19207.1\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19207.1\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19207.1\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1130","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1130)"},{"Id":"430137273","IsPullRequest":true,"CreatedAt":"2019-04-07T12:13:36","Actor":"dotnet-maestro[bot]","Number":"1129","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190406.5\r\n- **Date Produced**: 4/6/2019 5:35 PM\r\n- **Commit**: 9d8abf998866f10bc19d97e1916ff1c0ada3fd42\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19206.5\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19206.5\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19206.5\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19206.5\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19206.5\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1129","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1129)"},{"Id":"429990573","IsPullRequest":false,"CreatedAt":"2019-04-07T05:49:47","Actor":"benneyman","Number":"1127","RawContent":null,"Title":"[Help] Targeting netstandard2.0 for a class library","State":"closed","Body":"After a lot of googling I came to realize that my existing class library(net462) should be targeting netstandard2.0 to be able to reference into my react app (dotnet new react) which targets netcoreapp2.1.\r\n\r\nI am not sure how to make my class library to target netstandard2.0 from Visual Studio 2013. From the extensive googling I did I know we need VS 2017 (15.3) to do this. I do not have access to VS 2017.\r\n\r\nI feel there could be other ways of doing this without having to have VS2017 from the googling I did. But I can't any concrete solutions.\r\n\r\nCould you please guide me on how to target a class library to netstandard2.0 from Visual Studio 2013 or using CLI tools so that I will be able to add a project reference to my react project.","Url":"https://github.com/dotnet/standard/issues/1127","RelatedDescription":"Closed issue \"[Help] Targeting netstandard2.0 for a class library\" (#1127)"},{"Id":"430027157","IsPullRequest":true,"CreatedAt":"2019-04-06T12:13:34","Actor":"dotnet-maestro[bot]","Number":"1128","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190405.6\r\n- **Date Produced**: 4/5/2019 11:26 PM\r\n- **Commit**: 4217db4a23ffd15abb3771d635b66162994fb9e4\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19205.6\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19205.6\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19205.6\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19205.6\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19205.6\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1128","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1128)"},{"Id":"429720581","IsPullRequest":true,"CreatedAt":"2019-04-05T12:11:02","Actor":"dotnet-maestro[bot]","Number":"1125","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190404.16\r\n- **Date Produced**: 4/5/2019 3:36 AM\r\n- **Commit**: 61196044ed70a65c610beb230ac6ea77566668c2\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19204.16\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19204.16\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19204.16\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19204.16\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19204.16\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1125","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1125)"},{"Id":"429609384","IsPullRequest":false,"CreatedAt":"2019-04-05T07:06:16","Actor":"Jacksiro","Number":"1124","RawContent":null,"Title":"Could not load file or assembly 'Microsoft.WindowsAPICodePack.Shell'","State":"closed","Body":"I am using VS 2017 Community and have targeted .Net v4.5 in my app. My app throws the error of \r\n\r\n```\r\n\r\n> See the end of this message for details on invoking \r\n> just-in-time (JIT) debugging instead of this dialog box.\r\n> \r\n> ************** Exception Text **************\r\n> System.IO.FileNotFoundException: Could not load file or assembly 'Microsoft.WindowsAPICodePack.Shell, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' or one of its dependencies. The system cannot find the file specified.\r\n> File name: 'Microsoft.WindowsAPICodePack.Shell, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null'\r\n>    at EasyTabs.TitleBarTabs.SetFrameSize()\r\n>    at EasyTabs.TitleBarTabs.OnSizeChanged(EventArgs e)\r\n>    at System.Windows.Forms.Control.UpdateBounds(Int32 x, Int32 y, Int32 width, Int32 height, Int32 clientWidth, Int32 clientHeight)\r\n>    at System.Windows.Forms.Control.UpdateBounds()\r\n>    at System.Windows.Forms.Control.WndProc(Message& m)\r\n>    at System.Windows.Forms.ScrollableControl.WndProc(Message& m)\r\n>    at System.Windows.Forms.Form.WndProc(Message& m)\r\n>    at EasyTabs.TitleBarTabs.WndProc(Message& m)\r\n>    at System.Windows.Forms.Control.ControlNativeWindow.OnMessage(Message& m)\r\n>    at System.Windows.Forms.Control.ControlNativeWindow.WndProc(Message& m)\r\n>    at System.Windows.Forms.NativeWindow.Callback(IntPtr hWnd, Int32 msg, IntPtr wparam, IntPtr lparam)\r\n> \r\n> WRN: Assembly binding logging is turned OFF.\r\n> To enable assembly bind failure logging, set the registry value [HKLM\\Software\\Microsoft\\Fusion!EnableLog] (DWORD) to 1.\r\n> Note: There is some performance penalty associated with assembly bind failure logging.\r\n> To turn this feature off, remove the registry value [HKLM\\Software\\Microsoft\\Fusion!EnableLog].\r\n> \r\n> \r\n> \r\n> ************** Loaded Assemblies **************\r\n> mscorlib\r\n>     Assembly Version: 4.0.0.0\r\n>     Win32 Version: 4.6.1590.0 built by: NETFXREL2\r\n>     CodeBase: file:///C:/Windows/Microsoft.NET/Framework/v4.0.30319/mscorlib.dll\r\n> ----------------------------------------\r\n> vSongBook\r\n>     Assembly Version: 2.3.5.2\r\n>     Win32 Version: 2.3.5.2\r\n>     CodeBase: file:///C:/Users/Gifted/AppData/Local/AppSmata/vSongBook/vSongBook.exe\r\n> ----------------------------------------\r\n> System.Windows.Forms\r\n>     Assembly Version: 4.0.0.0\r\n>     Win32 Version: 4.6.1590.0 built by: NETFXREL2\r\n>     CodeBase: file:///C:/Windows/Microsoft.Net/assembly/GAC_MSIL/System.Windows.Forms/v4.0_4.0.0.0__b77a5c561934e089/System.Windows.Forms.dll\r\n> ----------------------------------------\r\n> System\r\n>     Assembly Version: 4.0.0.0\r\n>     Win32 Version: 4.6.1590.0 built by: NETFXREL2\r\n>     CodeBase: file:///C:/Windows/Microsoft.Net/assembly/GAC_MSIL/System/v4.0_4.0.0.0__b77a5c561934e089/System.dll\r\n> ----------------------------------------\r\n> System.Drawing\r\n>     Assembly Version: 4.0.0.0\r\n>     Win32 Version: 4.6.1590.0 built by: NETFXREL2\r\n>     CodeBase: file:///C:/Windows/Microsoft.Net/assembly/GAC_MSIL/System.Drawing/v4.0_4.0.0.0__b03f5f7f11d50a3a/System.Drawing.dll\r\n> ----------------------------------------\r\n> JacksiroCtrl\r\n>     Assembly Version: 1.2.5.0\r\n>     Win32 Version: 1.2.5.0\r\n>     CodeBase: file:///C:/Users/Gifted/AppData/Local/AppSmata/vSongBook/JacksiroCtrl.DLL\r\n> ----------------------------------------\r\n> SQLite.NET\r\n>     Assembly Version: 0.21.1869.3794\r\n>     Win32 Version: 0.21.1869.3794\r\n>     CodeBase: file:///C:/Users/Gifted/AppData/Local/AppSmata/vSongBook/SQLite.NET.DLL\r\n> ----------------------------------------\r\n> System.Data\r\n>     Assembly Version: 4.0.0.0\r\n>     Win32 Version: 4.6.1590.0 built by: NETFXREL2\r\n>     CodeBase: file:///C:/Windows/Microsoft.Net/assembly/GAC_32/System.Data/v4.0_4.0.0.0__b77a5c561934e089/System.Data.dll\r\n> ----------------------------------------\r\n> System.Core\r\n>     Assembly Version: 4.0.0.0\r\n>     Win32 Version: 4.6.1590.0 built by: NETFXREL2\r\n>     CodeBase: file:///C:/Windows/Microsoft.Net/assembly/GAC_MSIL/System.Core/v4.0_4.0.0.0__b77a5c561934e089/System.Core.dll\r\n> ----------------------------------------\r\n> System.Xml\r\n>     Assembly Version: 4.0.0.0\r\n>     Win32 Version: 4.6.1590.0 built by: NETFXREL2\r\n>     CodeBase: file:///C:/Windows/Microsoft.Net/assembly/GAC_MSIL/System.Xml/v4.0_4.0.0.0__b77a5c561934e089/System.Xml.dll\r\n> ----------------------------------------\r\n> EasyTabs\r\n>     Assembly Version: 1.3.3.0\r\n>     Win32 Version: 1.3.3.0\r\n>     CodeBase: file:///C:/Users/Gifted/AppData/Local/AppSmata/vSongBook/EasyTabs.DLL\r\n> ----------------------------------------\r\n> Win32Interop.Uxtheme\r\n>     Assembly Version: 1.0.1.0\r\n>     Win32 Version: 1.0.1\r\n>     CodeBase: file:///C:/Users/Gifted/AppData/Local/AppSmata/vSongBook/Win32Interop.Uxtheme.DLL\r\n> ----------------------------------------\r\n> Win32Interop.User32\r\n>     Assembly Version: 1.0.1.0\r\n>     Win32 Version: 1.0.1\r\n>     CodeBase: file:///C:/Users/Gifted/AppData/Local/AppSmata/vSongBook/Win32Interop.User32.DLL\r\n> ----------------------------------------\r\n> Win32Interop.Dwmapi\r\n>     Assembly Version: 1.0.1.0\r\n>     Win32 Version: 1.0.1\r\n>     CodeBase: file:///C:/Users/Gifted/AppData/Local/AppSmata/vSongBook/Win32Interop.Dwmapi.DLL\r\n> ----------------------------------------\r\n> \r\n> ************** JIT Debugging **************\r\n> To enable just-in-time (JIT) debugging, the .config file for this\r\n> application or computer (machine.config) must have the\r\n> jitDebugging value set in the system.windows.forms section.\r\n> The application must also be compiled with debugging\r\n> enabled.\r\n> \r\n> For example:\r\n> \r\n> <configuration>\r\n>     <system.windows.forms jitDebugging=\"true\" />\r\n> </configuration>\r\n> \r\n> When JIT debugging is enabled, any unhandled exception\r\n> will be sent to the JIT debugger registered on the computer\r\n> rather than be handled by this dialog box.\r\n\r\n```\r\n\r\nKIndly advice me on the on how to resolve this issue","Url":"https://github.com/dotnet/standard/issues/1124","RelatedDescription":"Closed issue \"Could not load file or assembly 'Microsoft.WindowsAPICodePack.Shell'\" (#1124)"},{"Id":"429582381","IsPullRequest":false,"CreatedAt":"2019-04-05T04:53:06","Actor":"Groostav","Number":"1123","RawContent":null,"Title":"phantom connection when mixing async & blocking calls on TcpClient ","State":"open","Body":"apologies if this is the wrong place to report this!\r\n\r\non .net 4.6.1, win10\r\n\r\n1. create a TCPClient object\r\n2. attempt to connect synchronously to an endpoint with no bound service, get a `SocketException: Connection actively refused\"\r\n3. attempt to `connectAsync` to that same endpoint \r\n\r\nexpected: Asynchronously get a `SocketException: Connection Actively Refused`\r\nactual: connection is established, `tcpClient.Connected` returns true, `tcpClient.GetStream()` returns non-null, `tcpClient.GetStream().write(...)` throws `NotConnectedException`.\r\n\r\n```C#\r\n        \r\n[Test] //baseline, good behaviour\r\npublic async Task when_only_using_async_calls_should_get_consistent_behaviour()\r\n{\r\n    //setup\r\n    var localhost = \"127.0.0.1\";\r\n    var port = 27041; \r\n    \r\n    var tcpClient = new TcpClient();\r\n\r\n    //act\r\n    try\r\n    {\r\n        await tcpClient.ConnectAsync(localhost, port);\r\n        Assert.Fail(\"connection was actually established!\");\r\n    }\r\n    catch (SocketException ex)\r\n    {\r\n        //continue\r\n    }\r\n\r\n    Func<Task> act = (async () => await tcpClient.ConnectAsync(localhost, port));\r\n\r\n    //assert\r\n    act.Should().Throw<SocketException>();\r\n}        \r\n\r\n\r\n[Test]\r\npublic async Task when_mixing_sync_and_async_tcpclient_calls_should_get_hideous_behaviour()\r\n{\r\n    //setup\r\n    var localhost = \"127.0.0.1\";\r\n    var port = 27041; \r\n    \r\n    var tcpClient = new TcpClient();\r\n\r\n    //act\r\n    try\r\n    {\r\n        tcpClient.Connect(localhost, port);\r\n        Assert.Fail(\"connection was actually established!\");\r\n    }\r\n    catch (SocketException ex)\r\n    {\r\n        //continue\r\n    }\r\n\r\n    await tcpClient.ConnectAsync(localhost, port);\r\n\r\n    //assert\r\n    tcpClient.Connected.Should().BeTrue();\r\n    tcpClient.GetStream().Should().NotBeNull();\r\n\r\n    //seems very strange\r\n    //subsequent interactions with tcpClient throw \"not connected\" exceptions\r\n    //I would've expected the `ConnectAsync` method to throw the same `SocketException`,\r\n}\r\n```","Url":"https://github.com/dotnet/standard/issues/1123","RelatedDescription":"Open issue \"phantom connection when mixing async & blocking calls on TcpClient \" (#1123)"},{"Id":"429333028","IsPullRequest":false,"CreatedAt":"2019-04-04T15:07:55","Actor":"Korporal","Number":"1122","RawContent":null,"Title":"The end of .NET Framework support?","State":"open","Body":"Hi,\r\n\r\nOn [this ](https://github.com/dotnet/standard/blob/master/docs/versions.md)page we see this footnote under the chart:\r\n\r\n> 2 .NET Framework will not support .NET Standard 2.1 or any other later version. For more details, see this blog post.\r\n\r\nI can understand how some specific version like .NET Framework 4.6.1 (for example) will not support .NET Standard 2.1 but _all_ **future** versions of the .NET Framework too?\r\n\r\nThis statements amounts to a phasing out of .NET Framework, it tells us that we should begin to stop targeting it - well that's what seems to be a logical conclusion anyway.\r\n\r\nI don't understand why some future version of .NET Framework (e.g. 4.8) could not include support for .NET Core 2.1?\r\n\r\nWe read [here ](https://docs.microsoft.com/en-us/dotnet/standard/net-standard)the following Microsoft statement:\r\n\r\n> The .NET Standard is a formal specification of .NET APIs that are intended to be available on **_all_** .NET implementations.\r\n\r\nBut now you're retracting this and instead should be saying:\r\n\r\n> The .NET Standard 2.0 and below, is a formal specification of .NET APIs that are intended to be available on all .NET implementations.\r\n\r\nCan Microsoft please be clearer about this? Companies and their staff are under a huge burden to keep up with all sorts of developments in the technology world and if we are being advised to phase out our own support for the .NET Framework then please say so very clearly and definitively, mentioning this kind of thing as small footnote isn't helpful.\r\n\r\nThanks\r\n\r\n","Url":"https://github.com/dotnet/standard/issues/1122","RelatedDescription":"Open issue \"The end of .NET Framework support?\" (#1122)"},{"Id":"429240376","IsPullRequest":true,"CreatedAt":"2019-04-04T12:13:48","Actor":"dotnet-maestro[bot]","Number":"1121","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190403.10\r\n- **Date Produced**: 4/4/2019 1:43 AM\r\n- **Commit**: 811fda44a88dcfe3e42a17bb34467f5764836c65\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19203.10\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19203.10\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19203.10\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19203.10\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19203.10\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1121","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1121)"},{"Id":"429232379","IsPullRequest":false,"CreatedAt":"2019-04-04T11:43:44","Actor":"markrendle","Number":"1120","RawContent":null,"Title":"Please please please don't call it .NET Standard 2.1 when it aligns with .NET Core 3.0","State":"open","Body":"This is exactly the sort of version number weirdness that .NET takes flak for.\r\n\r\nIn the commit explaining the 2.1 decision, the 3.0 section is:\r\n\r\n- **3.0**\r\n  - Aligns with .NET Core, which will be released at the same time as .NET\r\n    Standard vNext\r\n  - Pros\r\n    + Leaves room for another .NET Standard that is smaller\r\n    + Simpler messaging when we ship .NET Core and .NET Standard and aligns with\r\n      what we did for .NET Core 2.0.\r\n  - Cons\r\n    + A 3.0 isn't really warranted for .NET Standard\r\n    + Perpetuates the problem of aligning .NET Core & .NET Standard versions and\r\n      requires arbitrary skipping of version numbers\r\n\r\n*Simpler messaging* should be a top priority here. I'm going to spend as much time explaining to clients why they can't use .NET Standard 2.1 with the .NET Core 2.1 LTS as my niece Allyce does explaining how to spell her name.\r\n\r\nIf a 3.0 is warranted for .NET Core, with it's `IAsyncEnumerable`, `IAsyncDisposable`, `Range` and `Index` and all the new overloads of existing APIs, then why isn't it warranted for .NET Standard?\r\n\r\nBetter yet, why not publish a .NET Standard 2.1 which aligns with .NET Core 2.1, with all the `Span<T>` goodness, and a .NET Standard 3.0 which aligns with .NET Core 3.0?\r\n\r\nDeliberately versioning .NET Standard independently of .NET Core, especially on the major version numbers, just seems perverse and unnecessary.","Url":"https://github.com/dotnet/standard/issues/1120","RelatedDescription":"Open issue \"Please please please don't call it .NET Standard 2.1 when it aligns with .NET Core 3.0\" (#1120)"},{"Id":"428727330","IsPullRequest":true,"CreatedAt":"2019-04-03T12:11:00","Actor":"dotnet-maestro[bot]","Number":"1119","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190402.13\r\n- **Date Produced**: 4/3/2019 12:44 AM\r\n- **Commit**: 764f362c8e92e41905fe5f6c782ab9980c86c909\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19202.13\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19202.13\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19202.13\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19202.13\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19202.13\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1119","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1119)"},{"Id":"428466923","IsPullRequest":false,"CreatedAt":"2019-04-02T22:06:10","Actor":"wtgodbe","Number":"1118","RawContent":null,"Title":"Consider adding Nullable annotations to .Net Standard","State":"open","Body":"https://github.com/dotnet/coreclr/tree/NullableFeature\r\n\r\nWe should consider adding the annotations from the above Feature branch to the .Net Standard for 2.1.\r\n\r\nCC @wtgodbe @terrajobst @dotnet/nullablefc ","Url":"https://github.com/dotnet/standard/issues/1118","RelatedDescription":"Open issue \"Consider adding Nullable annotations to .Net Standard\" (#1118)"},{"Id":"428187528","IsPullRequest":true,"CreatedAt":"2019-04-02T12:14:00","Actor":"dotnet-maestro[bot]","Number":"1117","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190401.12\r\n- **Date Produced**: 4/2/2019 1:18 AM\r\n- **Commit**: 505e38906e1ee2d032c41bb297de0958307db946\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19201.12\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19201.12\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19201.12\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19201.12\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19201.12\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1117","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1117)"},{"Id":"427275509","IsPullRequest":true,"CreatedAt":"2019-03-30T12:23:34","Actor":"dotnet-maestro[bot]","Number":"1116","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190329.2\r\n- **Date Produced**: 3/29/2019 1:07 PM\r\n- **Commit**: 31abd61b43b115a6af83c92ce35ed4e8efd01dfd\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19179.2\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19179.2\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19179.2\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19179.2\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19179.2\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1116","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1116)"},{"Id":"426954195","IsPullRequest":true,"CreatedAt":"2019-03-29T12:13:42","Actor":"dotnet-maestro[bot]","Number":"1115","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190329.1\r\n- **Date Produced**: 3/29/2019 10:57 AM\r\n- **Commit**: ef139c7533e2e33c5e0946b80cb1aa95d84da868\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19179.1\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19179.1\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19179.1\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19179.1\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19179.1\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1115","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1115)"},{"Id":"426800191","IsPullRequest":false,"CreatedAt":"2019-03-29T03:29:38","Actor":"CalvinFengDatacom","Number":"1114","RawContent":null,"Title":"Multiple assemblies with equivalent identity have been imported","State":"open","Body":"Hi Guys,\r\n\r\nI have a wired issue with my .Net project after I push my changes to remote repository in DevOps.\r\n\r\nThe situation is, we have a .Net project was in .Net framework in version 4.6, then because of other dependencies, we need to upgrade the .Net framework to 4.6.2. It built successfully locally, but it built failed in the build pipeline of DevOps.\r\n\r\nThe error message is: \r\n\r\n- CSC(0,0): Error CS1703: Multiple assemblies with equivalent identity have been imported: 'D:\\a\\1\\s\\DNZ.Mocabots.AIA\\packages\\System.Runtime.Serialization.Primitives.4.1.1\\lib\\net46\\System.Runtime.Serialization.Primitives.dll' and 'C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.6.2\\Facades\\System.Runtime.Serialization.Primitives.dll'. Remove one of the duplicate references.\r\n- CSC(0,0): Error CS1703: Multiple assemblies with equivalent identity have been imported: 'D:\\a\\1\\s\\DNZ.Mocabots.AIA\\packages\\System.Runtime.InteropServices.4.1.0\\lib\\net462\\System.Runtime.InteropServices.dll' and 'C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.6.2\\Facades\\System.Runtime.InteropServices.dll'. Remove one of the duplicate references.\r\n- CSC(0,0): Error CS1703: Multiple assemblies with equivalent identity have been imported: 'D:\\a\\1\\s\\DNZ.Mocabots.AIA\\packages\\System.Runtime.Extensions.4.1.0\\lib\\net462\\System.Runtime.Extensions.dll' and 'C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.6.2\\Facades\\System.Runtime.Extensions.dll'. Remove one of the duplicate references.\r\n- CSC(0,0): Error CS1703: Multiple assemblies with equivalent identity have been imported: 'D:\\a\\1\\s\\DNZ.Mocabots.AIA\\packages\\System.Runtime.4.1.0\\lib\\net462\\System.Runtime.dll' and 'C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.6.2\\Facades\\System.Runtime.dll'. Remove one of the duplicate references.\r\n- CSC(0,0): Error CS1703: Multiple assemblies with equivalent identity have been imported: 'D:\\a\\1\\s\\DNZ.Mocabots.AIA\\packages\\System.IO.4.1.0\\lib\\net462\\System.IO.dll' and 'C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.6.2\\Facades\\System.IO.dll'. Remove one of the duplicate references.\r\n- Process 'msbuild.exe' exited with code '1'.\r\n\r\nI can see there are lots of suggestions of removing one of the conflict file manually, however it doesn't work for me. \r\n\r\n_**Note again, we are using .Net Standard F/W, not .Net Core.**\r\nIt was in 4.6 and now it's in 4.6.2._\r\n\r\nLooking forward from your ideas, thanks","Url":"https://github.com/dotnet/standard/issues/1114","RelatedDescription":"Open issue \"Multiple assemblies with equivalent identity have been imported\" (#1114)"},{"Id":"426583515","IsPullRequest":false,"CreatedAt":"2019-03-28T16:14:20","Actor":"CoenraadS","Number":"1113","RawContent":null,"Title":"System.TypeInitializationException: 'The type initializer for 'Microsoft.ServiceBus.Messaging.Constants' threw an exception.'","State":"open","Body":"I have a .Net Core Project that requires `System.UriTemplate` which doesn't seem implemented.\r\n\r\n`System.TypeInitializationException: 'The type initializer for 'Microsoft.ServiceBus.Messaging.Constants' threw an exception.'`\r\n\r\n`TypeLoadException: Could not load type 'System.UriTemplate' from assembly 'System.ServiceModel, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.`\r\n\r\n.Net Core 2.1 Console Project\r\n\r\n![image](https://user-images.githubusercontent.com/5593825/55173581-3c3dfa00-517c-11e9-95d0-7380e4ce654a.png)\r\n\r\n\r\n```\r\nusing Microsoft.ServiceBus.Messaging;\r\nusing System;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleApp1\r\n{\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            string connectionString = \"\";\r\n            var q = QueueClient.CreateFromConnectionString(connectionString, \"myqueue\");\r\n\r\n            var sessions = q.GetMessageSessions();\r\n\r\n            var names = sessions.Select(e => e.SessionId);\r\n\r\n            foreach (var name in names)\r\n            {\r\n                Console.WriteLine(name);\r\n            }\r\n        }\r\n    }\r\n}\r\n```","Url":"https://github.com/dotnet/standard/issues/1113","RelatedDescription":"Open issue \"System.TypeInitializationException: 'The type initializer for 'Microsoft.ServiceBus.Messaging.Constants' threw an exception.'\" (#1113)"},{"Id":"426455070","IsPullRequest":true,"CreatedAt":"2019-03-28T12:24:04","Actor":"dotnet-maestro[bot]","Number":"1112","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190327.11\r\n- **Date Produced**: 3/28/2019 1:58 AM\r\n- **Commit**: 69f276904fdd6d8f81404b857f295537894b81d3\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19177.11\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19177.11\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19177.11\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19177.11\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19177.11\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1112","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1112)"},{"Id":"426112720","IsPullRequest":true,"CreatedAt":"2019-03-27T19:57:52","Actor":"wtgodbe","Number":"1111","RawContent":null,"Title":"Update build pools","State":"closed","Body":"@MattGal @mmitche PTAL","Url":"https://github.com/dotnet/standard/pull/1111","RelatedDescription":"Closed or merged PR \"Update build pools\" (#1111)"},{"Id":"425696215","IsPullRequest":true,"CreatedAt":"2019-03-27T13:10:47","Actor":"ericstj","Number":"1109","RawContent":null,"Title":"Make some packages optional for source build","State":"closed","Body":"","Url":"https://github.com/dotnet/standard/pull/1109","RelatedDescription":"Closed or merged PR \"Make some packages optional for source build\" (#1109)"},{"Id":"425920602","IsPullRequest":true,"CreatedAt":"2019-03-27T12:13:39","Actor":"dotnet-maestro[bot]","Number":"1110","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190326.14\r\n- **Date Produced**: 3/27/2019 12:08 AM\r\n- **Commit**: e23a3e2fd09a6222361ce47b78d23ab42867924c\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19176.14\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19176.14\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19176.14\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19176.14\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19176.14\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1110","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1110)"},{"Id":"425628046","IsPullRequest":true,"CreatedAt":"2019-03-26T20:21:32","Actor":"dotnet-maestro[bot]","Number":"1108","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190325.9\r\n- **Date Produced**: 3/25/2019 10:36 PM\r\n- **Commit**: 13daa29185518ef3c6d4074fd07efbc5236a76c5\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19175.9\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19175.9\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19175.9\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19175.9\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19175.9\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1108","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1108)"},{"Id":"425140404","IsPullRequest":true,"CreatedAt":"2019-03-26T19:53:53","Actor":"wtgodbe","Number":"1107","RawContent":null,"Title":"Add transport package for NetStandard","State":"closed","Body":"This creates a transport package, `Microsoft.Private.Standard`, which contains the same netstandard2.1 binaries as `NetStandard.Library`, but not `NetStandard.Library.Targets`. The assets are in `ref\\netstandard2.1` instead of `build\\netstandard2.1\\ref`. This transport package can be consumed by Core-Setup for the purpose of creating the targeting pack, rather than publicly shipping `NetStandard.Library`, or having Core-Setup consume its Standard dependencies through `NetStandard.Library`. Eventually we can phase out NS.L in favor of this transport package.\r\n\r\n@ericstj @dagood @terrajobst PTAL\r\n\r\nResolves https://github.com/dotnet/standard/issues/1106","Url":"https://github.com/dotnet/standard/pull/1107","RelatedDescription":"Closed or merged PR \"Add transport package for NetStandard\" (#1107)"}],"ResultType":"GitHubIssue"},"CoreFx-Issues":{"Issues":[{"Id":"431806657","IsPullRequest":false,"CreatedAt":"2019-04-11T02:55:51","Actor":"scalablecory","Number":"36779","RawContent":null,"Title":"Aligned load/store for Vector<T>","State":"open","Body":"When using a collection such as `Span<Vector<T>>`, all loads/stores on the span are performed using unaligned instructions.\r\n\r\nFor sufficiently aware code, this might cause an unnecessary perf drawback. I think the \"just works\" current behavior is ideal, but we need an escape hatch for such code.\r\n\r\n## Proposed API\r\n\r\n```csharp\r\nnamespace System.Numerics\r\n{\r\n    public static class Vector\r\n    {\r\n        public static Vector<T> UnsafeLoadAligned<T>(in Vector<T> vector);\r\n        public static void UnsafeStoreAligned<T>(out Vector<T> vector, Vector<T> value);\r\n    }\r\n}\r\n```\r\n\r\nThis API should generate aligned instructions when available, e.g. `movaps` for SSE. The methods should not perform any sort of correctness checking outside of an `Assert`.\r\n\r\nRelated issue (perhaps dependency) #33566","Url":"https://github.com/dotnet/corefx/issues/36779","RelatedDescription":"Open issue \"Aligned load/store for Vector<T>\" (#36779)"},{"Id":"431804313","IsPullRequest":false,"CreatedAt":"2019-04-11T02:44:07","Actor":"hez2010","Number":"36778","RawContent":null,"Title":"API Proposal: IAsyncEnumerable intergrate with LINQ","State":"open","Body":"For example:\r\n```csharp\r\nIAsyncEnumerable<T> xxxx;\r\n\r\nvar result = await xxxx.Where(i=> .....).OrderBy(i=> ...).AsAsync();\r\nvar result = await from async c in xxxx where .... order by ..... asc;\r\n```","Url":"https://github.com/dotnet/corefx/issues/36778","RelatedDescription":"Open issue \"API Proposal: IAsyncEnumerable intergrate with LINQ\" (#36778)"},{"Id":"431614578","IsPullRequest":false,"CreatedAt":"2019-04-11T00:06:04","Actor":"joshfree","Number":"36768","RawContent":null,"Title":"Add DebuggerDisplay/DebuggerTypeProxy to JSON reader / writer / dom","State":"closed","Body":"Tracking issue for creating the debugger visualizer of JSON reader/writer/document\r\n\r\nAs an example of how to get started, see https://github.com/dotnet/corefx/blob/95fa11b014ff7eeffdb325a7a0b3aa3afacc2f4a/src/Common/src/CoreLib/System/Span.cs#L19-L20","Url":"https://github.com/dotnet/corefx/issues/36768","RelatedDescription":"Closed issue \"Add DebuggerDisplay/DebuggerTypeProxy to JSON reader / writer / dom\" (#36768)"},{"Id":"431764612","IsPullRequest":true,"CreatedAt":"2019-04-10T23:26:44","Actor":"GrabYourPitchforks","Number":"36777","RawContent":null,"Title":"Add ref asms and unit tests for string.GetPinnableReference","State":"open","Body":"Ref asm and unit tests for `string.GetPinnableReference`.\r\nResolves https://github.com/dotnet/coreclr/issues/23359.","Url":"https://github.com/dotnet/corefx/pull/36777","RelatedDescription":"Open PR \"Add ref asms and unit tests for string.GetPinnableReference\" (#36777)"},{"Id":"431658688","IsPullRequest":true,"CreatedAt":"2019-04-10T22:45:46","Actor":"AlanParr","Number":"36774","RawContent":null,"Title":"Removed FEATURE_NOTIFYPROPERTYCHANGED checks","State":"closed","Body":"Remove checks for FEATURE_INOTIFYPROPERTYCHANGED  from ReflectPropertyDescriptor.\r\n\r\nFixes #34465 \r\n\r\nCC @maryamariyan @safern ","Url":"https://github.com/dotnet/corefx/pull/36774","RelatedDescription":"Closed or merged PR \"Removed FEATURE_NOTIFYPROPERTYCHANGED checks\" (#36774)"},{"Id":"431730640","IsPullRequest":true,"CreatedAt":"2019-04-10T21:40:27","Actor":"steveharter","Number":"36776","RawContent":null,"Title":"JsonSerializerOptions API update and ignore property features","State":"open","Body":"Apply the approved API changes. Includes some new functionality including an [Ignore] that can be applied to properties and ability to ignore just read-only properties on serialization via options.IgnoreReadOnlyProperties.\r\n\r\nFixes https://github.com/dotnet/corefx/issues/34372\r\n","Url":"https://github.com/dotnet/corefx/pull/36776","RelatedDescription":"Open PR \"JsonSerializerOptions API update and ignore property features\" (#36776)"},{"Id":"431608495","IsPullRequest":true,"CreatedAt":"2019-04-10T19:24:56","Actor":"GrabYourPitchforks","Number":"36767","RawContent":null,"Title":"Add Win10 19H1 platform detection","State":"closed","Body":"Contributes to https://github.com/dotnet/corefx/issues/36758, which will need this check at some point. May as well get it in now.","Url":"https://github.com/dotnet/corefx/pull/36767","RelatedDescription":"Closed or merged PR \"Add Win10 19H1 platform detection\" (#36767)"},{"Id":"431641978","IsPullRequest":true,"CreatedAt":"2019-04-10T19:06:29","Actor":"wtgodbe","Number":"36772","RawContent":null,"Title":"Reset packaging for 2.1.11","State":"closed","Body":"CC @safern @mmitche ","Url":"https://github.com/dotnet/corefx/pull/36772","RelatedDescription":"Closed or merged PR \"Reset packaging for 2.1.11\" (#36772)"},{"Id":"431229556","IsPullRequest":true,"CreatedAt":"2019-04-10T19:06:22","Actor":"wtgodbe","Number":"36751","RawContent":null,"Title":"Reset packaging for 2.2.5","State":"closed","Body":"CC @safern @mmitche ","Url":"https://github.com/dotnet/corefx/pull/36751","RelatedDescription":"Closed or merged PR \"Reset packaging for 2.2.5\" (#36751)"},{"Id":"431654399","IsPullRequest":true,"CreatedAt":"2019-04-10T18:59:30","Actor":"safern","Number":"36773","RawContent":null,"Title":"Fix outerloop linux build missing container resource","State":"closed","Body":"Fixes: #36771 \r\n\r\nThis is another regression of when we added the musl legs to run tests.\r\n\r\ncc: @vcsjones ","Url":"https://github.com/dotnet/corefx/pull/36773","RelatedDescription":"Closed or merged PR \"Fix outerloop linux build missing container resource\" (#36773)"},{"Id":"431637127","IsPullRequest":false,"CreatedAt":"2019-04-10T18:59:30","Actor":"vcsjones","Number":"36771","RawContent":null,"Title":"Linux outerloop tests failed to start","State":"closed","Body":"While attempting to run linux outerloop in PR #36770 the tests did not run with the following output:\r\n\r\n> A container resource with name alpine_36_container could not be found. The container resource does not exist. If you intended to specify an image, use NAME:TAG or NAME@DIGEST. For example, ubuntu:latest\r\nOne or more errors occurred.","Url":"https://github.com/dotnet/corefx/issues/36771","RelatedDescription":"Closed issue \"Linux outerloop tests failed to start\" (#36771)"},{"Id":"431660543","IsPullRequest":true,"CreatedAt":"2019-04-10T18:53:52","Actor":"krwq","Number":"36775","RawContent":null,"Title":"[DRAFT] CipherSuitePolicy implementation","State":"open","Body":"Fixes: https://github.com/dotnet/corefx/issues/24588\r\nFixes: https://github.com/dotnet/corefx/issues/33809\r\n\r\nReplacing: https://github.com/dotnet/corefx/pull/36648 because CI doesn't work correctly with draft PRs","Url":"https://github.com/dotnet/corefx/pull/36775","RelatedDescription":"Open PR \"[DRAFT] CipherSuitePolicy implementation\" (#36775)"},{"Id":"431631834","IsPullRequest":true,"CreatedAt":"2019-04-10T17:48:05","Actor":"vcsjones","Number":"36770","RawContent":null,"Title":"Remove octet string wrapping from EnvelopedCms","State":"open","Body":"Removes the octet string wrapping from EnvelopedCms encrypt if the content type is id-data.\r\n\r\nFixes #32978 \r\n\r\n/cc @bartonjs ","Url":"https://github.com/dotnet/corefx/pull/36770","RelatedDescription":"Open PR \"Remove octet string wrapping from EnvelopedCms\" (#36770)"},{"Id":"431618676","IsPullRequest":true,"CreatedAt":"2019-04-10T17:15:53","Actor":"omajid","Number":"36769","RawContent":null,"Title":"Close the socket if bind() fails","State":"open","Body":"When using a socket with bind() and bind fails, close the socket to free\r\nup the resources associated with the socket.","Url":"https://github.com/dotnet/corefx/pull/36769","RelatedDescription":"Open PR \"Close the socket if bind() fails\" (#36769)"},{"Id":"431552790","IsPullRequest":true,"CreatedAt":"2019-04-10T16:55:51","Actor":"rom320","Number":"36765","RawContent":null,"Title":"Release/2.2","State":"closed","Body":"Educational effort for support Order hint.  Try various API designs.","Url":"https://github.com/dotnet/corefx/pull/36765","RelatedDescription":"Closed or merged PR \"Release/2.2\" (#36765)"},{"Id":"431244251","IsPullRequest":false,"CreatedAt":"2019-04-10T16:13:07","Actor":"rymeskar","Number":"36754","RawContent":null,"Title":"System.Buffers: .NET Standard Shims appear in the build output for .Net framework 4.6.1 project","State":"closed","Body":"**Invariants:**\r\n* [System.Buffers](https://www.nuget.org/packages/System.Buffers/) nuget is multi-targeting and has specific no-dependency target for .Net framework 4.5.\r\n* Project in question targets .Net framework 4.6.1\r\n* Nuget should prefer any suitable target from .Net framework family (thus the 4.5 target)\r\n\r\n**Repro:**\r\n1. Create new 4.6.1 class library project\r\n2. Install System.Buffers package\r\n3. Build\r\n\r\nObserve amount of shims in the output.\r\n![MicrosoftTeams-image](https://user-images.githubusercontent.com/8701120/55842142-820ea100-5b32-11e9-90ee-79b1af5bad20.png)\r\n\r\nFor convenience, I have uploaded the min repro steps [on github](https://github.com/rymeskar/fuzzy-octo-fiesta/tree/master/OldCsProj461).\r\n\r\n**Questions**\r\n* Is this expected? I have not seen such behavior with similar System.* family nuget packages.\r\n* Is this because of System.Buffers packaging?\r\n* Does it have to do with the MSBuild?","Url":"https://github.com/dotnet/corefx/issues/36754","RelatedDescription":"Closed issue \"System.Buffers: .NET Standard Shims appear in the build output for .Net framework 4.6.1 project\" (#36754)"},{"Id":"431553277","IsPullRequest":true,"CreatedAt":"2019-04-10T14:59:27","Actor":"am11","Number":"36766","RawContent":null,"Title":"Improve platform detection for [Default]OSGroup","State":"open","Body":"This change fixes the following two issues:\r\n\r\n* If there exists an `/Applications` directory on non-macOS Unix,\r\n  `OSGroup` is misclassified as OSX.\r\n* If `$OS` variable is preset in the invocation environment of\r\n  `build.sh` script, the configuration misclassifies the `OSGroup`\r\n  property. For example, on CirrusCI FreeBSD, the environment has\r\n  preset `OS=freebsd` (lowercase), which eventually results in\r\n  `OSGroup=freebsd` instead of `OSGroup=FreeBSD` and causes build\r\n  failure.","Url":"https://github.com/dotnet/corefx/pull/36766","RelatedDescription":"Open PR \"Improve platform detection for [Default]OSGroup\" (#36766)"},{"Id":"431333793","IsPullRequest":true,"CreatedAt":"2019-04-10T14:10:37","Actor":"Zenexer","Number":"36759","RawContent":null,"Title":"Fix #36686: Incorrect doc on System.Text.Json.JsonElement.GetString()","State":"closed","Body":"cc @ahsonkhan","Url":"https://github.com/dotnet/corefx/pull/36759","RelatedDescription":"Closed or merged PR \"Fix #36686: Incorrect doc on System.Text.Json.JsonElement.GetString()\" (#36759)"},{"Id":"431488374","IsPullRequest":true,"CreatedAt":"2019-04-10T14:07:22","Actor":"dotnet-maestro[bot]","Number":"36764","RawContent":null,"Title":"[master] Update dependencies from dotnet/coreclr","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/coreclr\r\n- **Build**: 20190409.72\r\n- **Date Produced**: 4/10/2019 12:43 AM\r\n- **Commit**: 29fabe7114d006af73ef768c529b4477b355a284\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk.IL** -> 3.0.0-preview5-27609-72\r\n  - **Microsoft.NETCore.ILAsm** -> 3.0.0-preview5-27609-72\r\n  - **Microsoft.NETCore.Runtime.CoreCLR** -> 3.0.0-preview5-27609-72\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/36764","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/coreclr\" (#36764)"},{"Id":"431487562","IsPullRequest":true,"CreatedAt":"2019-04-10T12:55:01","Actor":"MichalStrehovsky","Number":"36763","RawContent":null,"Title":"Run IBCMerge on Linux build","State":"open","Body":"* Restores IBC data for both Linux and Windows on all platforms\r\n* Chooses the right IBC data based on the target OS\r\n* When target OS isn't anything specific (like, e.g. System.Linq and other assemblies that are not OS specific), embeds Windows IBC data","Url":"https://github.com/dotnet/corefx/pull/36763","RelatedDescription":"Open PR \"Run IBCMerge on Linux build\" (#36763)"},{"Id":"431483236","IsPullRequest":true,"CreatedAt":"2019-04-10T12:45:36","Actor":"dotnet-maestro[bot]","Number":"36762","RawContent":null,"Title":"[master] Update dependencies from dotnet/standard","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/standard\r\n- **Build**: 20190409.2\r\n- **Date Produced**: 4/9/2019 4:44 PM\r\n- **Commit**: 0fd5d1c54a810c55439115199ffb4fc10411f799\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **NETStandard.Library** -> 2.1.0-prerelease.19209.2\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/36762","RelatedDescription":"Open PR \"[master] Update dependencies from dotnet/standard\" (#36762)"},{"Id":"431441010","IsPullRequest":false,"CreatedAt":"2019-04-10T11:04:48","Actor":"RaZeR-RBI","Number":"36761","RawContent":null,"Title":"System.Console: KeyAvailable returns False for Backspace on Linux","State":"open","Body":"**OS Version:** Debian GNU/Linux 8 (jessie) x86_64-linux-gnu\r\n\r\n**Tested .NET versions:**\r\n- 2.1.300\r\n- 3.0.100-preview3-010431\r\nOn all specified versions the issue was reproducible.\r\n\r\n**Summary**\r\nWhen using the `Console.KeyAvailable` property in order to implement non-blocking console input, the property is not being set to `true` when Backspace is pressed. The same code (see example) when being run on Windows works as intended.\r\n\r\n**Example**\r\nHere is a simple example which reproduces the issue on my machine:\r\n```csharp\r\n ConsoleKeyInfo key = new ConsoleKeyInfo();\r\n do\r\n {\r\n    if (Console.KeyAvailable)\r\n    {\r\n        key = Console.ReadKey(true);\r\n        Console.WriteLine($\"You pressed: {key.Key}\");\r\n    }\r\n    System.Threading.Thread.Sleep(100);\r\n } while (key.Key != ConsoleKey.Escape);\r\n```\r\n\r\nThe following code, however, works as intended both on Linux and Windows (the difference that the IO is blocking here, which is unacceptable for my use case, sadly) - the Backspace key is being handled:\r\n```csharp\r\n ConsoleKeyInfo key = new ConsoleKeyInfo();\r\n do\r\n {\r\n    key = Console.ReadKey(true);\r\n    Console.WriteLine($\"You pressed: {key.Key}\");\r\n } while (key.Key != ConsoleKey.Escape);\r\n```\r\n\r\nI'm currently implementing a ncurses-like terminal GUI library, and I'm running my logic in a loop, so this issue is blocking me from implementing input handling for text input.\r\n\r\nIf any additional info is needed, I'll happily provide it. Thanks for creating such an awesome platform to develop on :wink: ","Url":"https://github.com/dotnet/corefx/issues/36761","RelatedDescription":"Open issue \"System.Console: KeyAvailable returns False for Backspace on Linux\" (#36761)"},{"Id":"431367868","IsPullRequest":true,"CreatedAt":"2019-04-10T10:46:15","Actor":"Dotnet-GitSync-Bot","Number":"36760","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @sywhang","Url":"https://github.com/dotnet/corefx/pull/36760","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#36760)"},{"Id":"431303738","IsPullRequest":false,"CreatedAt":"2019-04-10T04:54:52","Actor":"GrabYourPitchforks","Number":"36758","RawContent":null,"Title":"System.Globalizations.Extensions unit tests fail on Win10 1903 (19H1) builds","State":"open","Body":"The test project helper method `GetIdnaTestTxt()` special-cases the current OS version to select the appropriate Idna test data file. It looks like the underlying OS behavior changed in 1903 (19H1) and the test data needs to be updated.\r\n\r\nI've copied one such failure below.\r\n\r\n```txt\r\n      System.Globalization.Tests.IdnMappingIdnaConformanceTests.GetAscii_Invalid [FAIL]\r\n        Assert.All() Failure: 8 out of 2375 items in the collection did not pass.\r\n        [2106]: Item: System.Globalization.Tests.Unicode_9_0_IdnaTest\r\n                System.Exception: Expected IdnMapping.GetAscii(\"\\uD803\\uDE71\\u0842\\uD836\\uDEA8\\uFF61\\uD873\\uDF16\\u2D11\\u200D\") to throw an ArgumentException.\r\n                   at System.Globalization.Tests.IdnMappingIdnaConformanceTests.<>c.<GetAscii_Invalid>b__2_1(IConformanceIdnaTest entry) in C:\\corefx\\src\\System.Globalization.Extensions\\tests\\IdnMapping\\IdnMappingIdnaConformanceTests.cs:line 96\r\n                   at Xunit.Assert.All[T](IEnumerable`1 collection, Action`1 action) in C:\\projects\\xunit\\src\\xunit.assert\\Asserts\\CollectionAsserts.cs:line 36\r\n```\r\n\r\n(My machine is 18362.53.)","Url":"https://github.com/dotnet/corefx/issues/36758","RelatedDescription":"Open issue \"System.Globalizations.Extensions unit tests fail on Win10 1903 (19H1) builds\" (#36758)"},{"Id":"431273335","IsPullRequest":true,"CreatedAt":"2019-04-10T02:20:26","Actor":"tannergooding","Number":"36757","RawContent":null,"Title":"Regenerating the System.Runtime.Intrinsics ref assembly to pick up the API changes.","State":"open","Body":"This is the CoreFX side to https://github.com/dotnet/coreclr/pull/23857 and handles the second part of dotnet/corefx#35768 and dotnet/corefx#34881.","Url":"https://github.com/dotnet/corefx/pull/36757","RelatedDescription":"Open PR \"Regenerating the System.Runtime.Intrinsics ref assembly to pick up the API changes.\" (#36757)"},{"Id":"431270633","IsPullRequest":true,"CreatedAt":"2019-04-10T02:07:53","Actor":"layomia","Number":"36756","RawContent":null,"Title":"Add support for generic interface-based collections in JsonSerializer","State":"open","Body":"Specifically, add enumerable converters for:\r\n\r\n* IEnumerable<T>\r\n* ICollection<T>\r\n* IList<T>\r\n* IReadOnlyCollection<T>\r\n* IReadOnlyList<T>\r\n\r\nThis partially addresses https://github.com/dotnet/corefx/issues/36643.","Url":"https://github.com/dotnet/corefx/pull/36756","RelatedDescription":"Open PR \"Add support for generic interface-based collections in JsonSerializer\" (#36756)"},{"Id":"431259109","IsPullRequest":true,"CreatedAt":"2019-04-10T01:09:02","Actor":"dotnet-maestro-bot","Number":"36755","RawContent":null,"Title":"[automated] Merge branch 'release/2.1' => 'release/2.2'","State":"open","Body":"I detected changes in the release/2.1 branch which have not been merged yet to release/2.2. I'm a robot and am configured to help you automatically keep release/2.2 up to date, so I've opened this PR.\r\n\r\nThis PR merges commits made on release/2.1 by the following committers:\n\n* @wtgodbe\n* @dotnet-maestro-bot\n* @dotnet-bot\r\n\r\n## Instructions for merging from UI\r\n\r\nThis PR will not be auto-merged. When pull request checks pass, complete this PR by creating a merge commit, *not* a squash or rebase commit.\r\n\r\n<img alt=\"merge button instructions\" src=\"https://i.imgur.com/GepcNJV.png\" width=\"300\" />\r\n\r\nIf this repo does not allow creating merge commits from the GitHub UI, use command line instructions.\r\n\r\n## Instructions for merging via command line\r\n\r\nRun these commands to merge this pull request from the command line.\r\n\r\n``` sh\r\ngit fetch\r\ngit checkout release/2.1\r\ngit pull --ff-only\r\ngit checkout release/2.2\r\ngit pull --ff-only\r\ngit merge --no-ff release/2.1\r\n\r\n# If there are merge conflicts, resolve them and then run git merge --continue to complete the merge\r\n# Pushing the changes to the PR branch will re-trigger PR validation.\r\ngit push https://github.com/dotnet-maestro-bot/corefx HEAD:merge/release/2.1-to-release/2.2\r\n```\r\n\r\n<details>\r\n<summary>or if you are using SSH</summary>\r\n\r\n```\r\ngit push git@github.com:dotnet-maestro-bot/corefx HEAD:merge/release/2.1-to-release/2.2\r\n```\r\n\r\n</details>\r\n\r\n\r\nAfter PR checks are complete push the branch\r\n```\r\ngit push\r\n```\r\n\r\n## Instructions for resolving conflicts\r\n\r\n:warning: If there are merge conflicts, you will need to resolve them manually before merging. You can do this [using GitHub][resolve-github] or using the [command line][resolve-cli].\r\n\r\n[resolve-github]: https://help.github.com/articles/resolving-a-merge-conflict-on-github/\r\n[resolve-cli]: https://help.github.com/articles/resolving-a-merge-conflict-using-the-command-line/\r\n\r\n## Instructions for updating this pull request\r\n\r\nContributors to this repo have permission update this pull request by pushing to the branch 'merge/release/2.1-to-release/2.2'. This can be done to resolve conflicts or make other changes to this pull request before it is merged.\r\n\r\n```\r\ngit checkout -b merge/release/2.1-to-release/2.2 release/2.2\r\ngit pull https://github.com/dotnet-maestro-bot/corefx merge/release/2.1-to-release/2.2\r\n(make changes)\r\ngit commit -m \"Updated PR with my changes\"\r\ngit push https://github.com/dotnet-maestro-bot/corefx merge/release/2.1-to-release/2.2\r\n```\r\n\r\n<details>\r\n    <summary>or if you are using SSH</summary>\r\n\r\n```\r\ngit checkout -b merge/release/2.1-to-release/2.2 release/2.2\r\ngit pull git@github.com:dotnet-maestro-bot/corefx merge/release/2.1-to-release/2.2\r\n(make changes)\r\ngit commit -m \"Updated PR with my changes\"\r\ngit push git@github.com:dotnet-maestro-bot/corefx merge/release/2.1-to-release/2.2\r\n```\r\n\r\n</details>\r\n\r\nContact .NET Core Engineering if you have questions or issues.\r\nAlso, if this PR was generated incorrectly, help us fix it. See https://github.com/dotnet/arcade/blob/master/scripts/GitHubMergeBranches.ps1.\r\n","Url":"https://github.com/dotnet/corefx/pull/36755","RelatedDescription":"Open PR \"[automated] Merge branch 'release/2.1' => 'release/2.2'\" (#36755)"},{"Id":"431231371","IsPullRequest":true,"CreatedAt":"2019-04-09T22:57:08","Actor":"wfurt","Number":"36753","RawContent":null,"Title":"support HTTP/2 without TLS","State":"open","Body":"fixes #31338. This essentially implements curl's --http2-prior-knowledge.\r\n\r\nEven if HTTP/2 over TLS is probably preferred, plain socket may be useful for debugging HTTP/2 it self or protocols above like gRPC.  This also complements  asp.net where both options are available. \r\nAs side-effect, we can do HTTP/2 tests on platforms without full ALPN support (like OSX)\r\n\r\nI tried to preserve existing behavior where HTTPS could negotiate support via ALPN and do either HTTP/2 or HTTP/11. For HTTP, we will do HTTP/1.1 by default but iv Version is overwritten to 2.0  we will do HTTP/2 over plain socket. In such case, user takes responsibility and needs to know if server supports HTTP/2 or not. \r\n\r\nThere are probably other ways how to do this but I wanted to get PR out for discussion. There is existing test assuming unknown versions would fall-back to 1.1.\r\nThat seems reasonable but I took 2.0 out of the list. \r\n\r\nI updated few tests to use HTTP when ALPN is not available (OSX) as well as I did run some tests agains real HTTP/2 server supporting HTTP/2 without encryption.   \r\n\r\ncc: @JamesNK\r\n","Url":"https://github.com/dotnet/corefx/pull/36753","RelatedDescription":"Open PR \"support HTTP/2 without TLS\" (#36753)"},{"Id":"431229600","IsPullRequest":true,"CreatedAt":"2019-04-09T22:49:53","Actor":"tarekgh","Number":"36752","RawContent":null,"Title":"Update Range.GetOffsetAndLength Contract","State":"open","Body":"This is depends on https://github.com/dotnet/coreclr/pull/23855","Url":"https://github.com/dotnet/corefx/pull/36752","RelatedDescription":"Open PR \"Update Range.GetOffsetAndLength Contract\" (#36752)"},{"Id":"431222657","IsPullRequest":true,"CreatedAt":"2019-04-09T22:28:08","Actor":"safern","Number":"36750","RawContent":null,"Title":"Fix official builds failing due to LinuxNoTest matrix being empty","State":"closed","Body":"This got broken when we moved alpine arm legs to run tests in official builds. That was the last leg running on official builds without any tests causing them to fail due to matrix being empty and container variable also because of not being set by the matrix.\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/36750","RelatedDescription":"Closed or merged PR \"Fix official builds failing due to LinuxNoTest matrix being empty\" (#36750)"}],"ResultType":"GitHubIssue"},"Roslyn-Issues":{"Issues":[{"Id":"431818042","IsPullRequest":false,"CreatedAt":"2019-04-11T03:52:40","Actor":"sujayvsarma","Number":"34930","RawContent":null,"Title":"Incorrect colorization / Colorization does not revert","State":"open","Body":"**Version Used**: \r\nLatest stable (2.0.1)\r\n\r\n**Steps to Reproduce**:\r\nExample: Function arguments\r\n\r\nDefine an empty-body function with at least one argument. Arguments are correctly dimmed out indicating they are not being used.\r\n\r\nCode snip:\r\n```\r\nvoid foo(string arg1) {\r\n  // at this point, 'arg1' is dimmed out\r\n}\r\n```\r\n\r\nNow start typing any construct, but don't use the argument yet. For example, start typing \"if\". \r\n\r\nCode snip:\r\n```\r\nvoid foo(string arg1) {\r\n  if \r\n  // at this point, arg1 should remain dimmed out, but it lights up\r\n}\r\n```\r\n\r\nThe argument(s) will light up one by one. If you have more than one argument, the more new statements you type, they will start lighting up. For example, if you have 2 arguments to foo(), arg1 will light up on the first statement/construct and arg2 on the second one. This is even though you have not yet even thought about that argument!\r\n\r\nNow go ahead and use the argument in that statement and then edit that line of code to do something else (other than referencing that argument), you will see the argument randomly changes colorization -- sometimes it shows up dimmed out, sometimes it colorizes to say it is being used. \r\n\r\n**Expected Behavior**:\r\nThe arguments continue to be in the correct lighted up / colorized state. \r\n\r\n**Actual Behavior**:\r\nBut they are not. When you undo the operation, they do not always go back to the previous state.\r\n\r\n","Url":"https://github.com/dotnet/roslyn/issues/34930","RelatedDescription":"Open issue \"Incorrect colorization / Colorization does not revert\" (#34930)"},{"Id":"431628006","IsPullRequest":false,"CreatedAt":"2019-04-11T02:31:22","Actor":"RikkiGibson","Number":"34905","RawContent":null,"Title":"Switch on enum type nested in generic type produces LangVersion error","State":"closed","Body":"I think this is related to #34678.\r\n\r\n**Version Used**: \r\nmaster as of April 9 (commit 43f2329f0)\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Create a project using non-preview LangVersion\r\n2. Write the following code\r\n```cs\r\npublic class C<T>\r\n{\r\n    public enum E\r\n    {\r\n        V1, V2\r\n    }\r\n\r\n    public void M()\r\n    {\r\n        switch(default(E))\r\n        {\r\n            case E.V1: // error CS8511\r\n            break;\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n**Expected Behavior**:\r\nBuilds successfully (as it does in dev15.9)\r\n\r\n**Actual Behavior**:\r\n```\r\nCS8511\tAn expression of type 'C<T>.E' cannot be handled by a pattern of type 'C<T>.E'. Please use language version 'preview' or greater to match an open type with a constant pattern.\r\n```\r\n","Url":"https://github.com/dotnet/roslyn/issues/34905","RelatedDescription":"Closed issue \"Switch on enum type nested in generic type produces LangVersion error\" (#34905)"},{"Id":"431771859","IsPullRequest":true,"CreatedAt":"2019-04-11T02:30:12","Actor":"dotnet-bot","Number":"34922","RawContent":null,"Title":"Merge dev16.1-preview2 to master","State":"closed","Body":"\nThis is an automatically generated pull request from dev16.1-preview2 into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/dev16.1-preview2-to-master\ngit reset --hard upstream/master\ngit merge upstream/dev16.1-preview2\n# Fix merge conflicts\ngit commit\ngit push upstream merges/dev16.1-preview2-to-master --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/34922","RelatedDescription":"Closed or merged PR \"Merge dev16.1-preview2 to master\" (#34922)"},{"Id":"431771892","IsPullRequest":true,"CreatedAt":"2019-04-11T02:30:07","Actor":"dotnet-bot","Number":"34923","RawContent":null,"Title":"Merge dev16.1-preview2-vs-deps to master-vs-deps","State":"closed","Body":"\nThis is an automatically generated pull request from dev16.1-preview2-vs-deps into master-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/dev16.1-preview2-vs-deps-to-master-vs-deps\ngit reset --hard upstream/master-vs-deps\ngit merge upstream/dev16.1-preview2-vs-deps\n# Fix merge conflicts\ngit commit\ngit push upstream merges/dev16.1-preview2-vs-deps-to-master-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/34923","RelatedDescription":"Closed or merged PR \"Merge dev16.1-preview2-vs-deps to master-vs-deps\" (#34923)"},{"Id":"431790049","IsPullRequest":false,"CreatedAt":"2019-04-11T01:34:37","Actor":"kendrahavens","Number":"34929","RawContent":null,"Title":"View issues found by a single analyzer","State":"open","Body":"[Internal Ask]\r\nThis request is from an analyzer writer. Add a \"find similar issue in file\" link in the (Ctrl+.) preview menu. This will open a window that returns all places where the analyzer reports an issue. You can scope it to the file, project, or solution.\r\n\r\n**Scenario**\r\n> I wrote an infinite recursion call detection analyzer. Once I author that analyzer I need to have this window to know what cases my analyzer is catching.\r\n","Url":"https://github.com/dotnet/roslyn/issues/34929","RelatedDescription":"Open issue \"View issues found by a single analyzer\" (#34929)"},{"Id":"431771959","IsPullRequest":true,"CreatedAt":"2019-04-11T01:30:12","Actor":"dotnet-bot","Number":"34924","RawContent":null,"Title":"Merge master to master-vs-deps","State":"closed","Body":"\nThis is an automatically generated pull request from master into master-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-master-vs-deps\ngit reset --hard upstream/master-vs-deps\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-master-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/34924","RelatedDescription":"Closed or merged PR \"Merge master to master-vs-deps\" (#34924)"},{"Id":"431771975","IsPullRequest":true,"CreatedAt":"2019-04-11T01:30:05","Actor":"dotnet-bot","Number":"34925","RawContent":null,"Title":"Merge dev16.1-preview2 to features/editorconfig-in-compiler","State":"closed","Body":"\nThis is an automatically generated pull request from dev16.1-preview2 into features/editorconfig-in-compiler.\n\n``` bash\ngit fetch --all\ngit checkout merges/dev16.1-preview2-to-features/editorconfig-in-compiler\ngit reset --hard upstream/features/editorconfig-in-compiler\ngit merge upstream/dev16.1-preview2\n# Fix merge conflicts\ngit commit\ngit push upstream merges/dev16.1-preview2-to-features/editorconfig-in-compiler --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/34925","RelatedDescription":"Closed or merged PR \"Merge dev16.1-preview2 to features/editorconfig-in-compiler\" (#34925)"},{"Id":"431747343","IsPullRequest":true,"CreatedAt":"2019-04-11T01:18:53","Actor":"gafter","Number":"34920","RawContent":null,"Title":"Switch on enum type nested in generic type produces LangVersion error","State":"closed","Body":"Fixes #34905\r\n\r\nThis change was already reviewed for dev16.1-preview2 and integrated there.  I am cherry picking it for the master branch.\r\n","Url":"https://github.com/dotnet/roslyn/pull/34920","RelatedDescription":"Closed or merged PR \"Switch on enum type nested in generic type produces LangVersion error\" (#34920)"},{"Id":"431780844","IsPullRequest":false,"CreatedAt":"2019-04-11T00:45:18","Actor":"KirillOsenkov","Number":"34928","RawContent":null,"Title":"SetVisualStudioBootstrapperBuildArgs fails during build -restore -ci","State":"open","Body":"Clone Roslyn and run `build -restore -ci`. \r\n\r\nIt fails with:\r\n```\r\nDownloading https://raw.githubusercontent.com/dotnet/roslyn/master/eng/config/PublishData.json\r\n##vso[task.setvariable variable=VisualStudio.MajorVersion;]16\r\n##vso[task.setvariable variable=VisualStudio.ChannelName;]int.d16.1stg\r\nCannot find path 'C:\\roslyn\\artifacts\\VSSetup\\Debug\\Insertion' because it does not exist.\r\nSystem.Management.Automation.ItemNotFoundException: Cannot find path 'C:\\roslyn\\artifacts\\VSSetup\\Debug\\Insertion' because it does not exist.\r\n   at System.Management.Automation.LocationGlobber.ExpandMshGlobPath(String path, Boolean allowNonexistingPaths, PSDriveInfo drive, ContainerCmdletProvider provider, CmdletProviderContext context)\r\n   at System.Management.Automation.LocationGlobber.ResolveDriveQualifiedPath(String path, CmdletProviderContext context, Boolean allowNonexistingPaths, CmdletProvider& providerInstance)\r\n   at System.Management.Automation.LocationGlobber.GetGlobbedMonadPathsFromMonadPath(String path, Boolean allowNonexistingPaths, CmdletProviderContext context, CmdletProvider& providerInstance)\r\n   at System.Management.Automation.LocationGlobber.GetGlobbedProviderPathsFromMonadPath(String path, Boolean allowNonexistingPaths, CmdletProviderContext context, ProviderInfo& provider, CmdletProvider& providerInstance)\r\n   at System.Management.Automation.LocationGlobber.GetChildNamesInDir(String dir, String leafElement, Boolean getAllContainers, CmdletProviderContext context, Boolean dirIsProviderPath, PSDriveInfo drive, ContainerCmdletProvider provider, String& modifiedDirPath)\r\n   at System.Management.Automation.LocationGlobber.GenerateNewPSPathsWithGlobLeaf(List`1 currentDirs, PSDriveInfo drive, String leafElement, Boolean isLastLeaf, ContainerCmdletProvider provider, CmdletProviderContext context)\r\n   at System.Management.Automation.LocationGlobber.ExpandMshGlobPath(String path, Boolean allowNonexistingPaths, PSDriveInfo drive, ContainerCmdletProvider provider, CmdletProviderContext context)\r\n   at System.Management.Automation.LocationGlobber.ResolveDriveQualifiedPath(String path, CmdletProviderContext context, Boolean allowNonexistingPaths, CmdletProvider& providerInstance)\r\n   at System.Management.Automation.LocationGlobber.GetGlobbedMonadPathsFromMonadPath(String path, Boolean allowNonexistingPaths, CmdletProviderContext context, CmdletProvider& providerInstance)\r\n   at System.Management.Automation.LocationGlobber.GetGlobbedProviderPathsFromMonadPath(String path, Boolean allowNonexistingPaths, CmdletProviderContext context, ProviderInfo& provider, CmdletProvider& providerInstance)\r\n   at System.Management.Automation.SessionStateInternal.GetChildItems(String path, Boolean recurse, UInt32 depth, CmdletProviderContext context)\r\n   at Microsoft.PowerShell.Commands.GetChildItemCommand.ProcessRecord()\r\nat SetVisualStudioBootstrapperBuildArgs, C:\\roslyn\\eng\\build.ps1: line 331\r\nat <ScriptBlock>, C:\\roslyn\\eng\\build.ps1: line 612\r\nat <ScriptBlock>, <No file>: line 1\r\n```\r\n\r\nIf I'd like to just build Roslyn without insertion, it would be nice to have a command-line flag to disable calling `SetVisualStudioBootstrapperBuildArgs` here:\r\n\r\nhttps://github.com/KirillOsenkov/roslyn/blob/297aaf20e69ddb60dc4756a7bcc78b419a1916b4/eng/build.ps1#L607-L609","Url":"https://github.com/dotnet/roslyn/issues/34928","RelatedDescription":"Open issue \"SetVisualStudioBootstrapperBuildArgs fails during build -restore -ci\" (#34928)"},{"Id":"431779705","IsPullRequest":false,"CreatedAt":"2019-04-11T00:39:41","Actor":"KirillOsenkov","Number":"34927","RawContent":null,"Title":"Need to enable Use Preview Sdks in order to build Roslyn from command line","State":"open","Body":"Open Visual Studio 2019, Tools -> Options -> Projects and Solutions -> .NET Core and uncheck Use Previews of the .NET Core SDKs:\r\n\r\n![image](https://user-images.githubusercontent.com/679326/55922612-d78c9180-5bb6-11e9-8f66-2ea9da160c55.png)\r\n\r\n(in 8.1 this will be in Tools -> Options -> Environment -> Preview Features)\r\n\r\nThen git clone https://github.com/dotnet/roslyn and run `build.cmd -restore`. It will fail with \"Unable to find .NET Core SDK\".\r\n\r\nThe checkbox to allow prerelease SDKs actually sets the contents of `%localappdata%\\Microsoft\\VisualStudio\\16.0_1b19bc0d\\sdk.txt` settings file to either:\r\n`UsePreviews=true` or `UsePreviews=false`.\r\n(The `1b19bc0d` part of the file path is your Visual Studio installation instance Id).\r\n\r\nThis code in the .NET Core SDK Resolver reads this flag:\r\nhttps://github.com/dotnet/cli/blob/bfffcb23ba270640b355e729f36b34c04fad0121/src/Microsoft.DotNet.MSBuildSdkResolver/VSSettings.cs#L55-L60\r\n\r\nSetting that checkbox is a prerequisite for building Roslyn and it is incredibly hard to figure out why Roslyn failed to build from the symptom.\r\n\r\nWe should either print a warning, or read that file and print a warning if it's not found or is set to false. Or maybe just write the file as part of installing the 3.0 SDK. The difficulty is in finding the VS instance id, but vswhere can provide that.","Url":"https://github.com/dotnet/roslyn/issues/34927","RelatedDescription":"Open issue \"Need to enable Use Preview Sdks in order to build Roslyn from command line\" (#34927)"},{"Id":"431777937","IsPullRequest":true,"CreatedAt":"2019-04-11T00:29:52","Actor":"333fred","Number":"34926","RawContent":null,"Title":"Correctly report mismatches in foreach types","State":"open","Body":"Fixes https://github.com/dotnet/roslyn/issues/29971. Also updates the location of the error reporting to be the variable being iterated over, rather than the type of that variable. @dotnet/roslyn-compiler for review.","Url":"https://github.com/dotnet/roslyn/pull/34926","RelatedDescription":"Open PR \"Correctly report mismatches in foreach types\" (#34926)"},{"Id":"431670127","IsPullRequest":true,"CreatedAt":"2019-04-10T23:55:39","Actor":"RikkiGibson","Number":"34908","RawContent":null,"Title":"Merge dev16.1-preview2 to dev16.1-preview2-vs-deps","State":"closed","Body":"cc @dpoeschl ","Url":"https://github.com/dotnet/roslyn/pull/34908","RelatedDescription":"Closed or merged PR \"Merge dev16.1-preview2 to dev16.1-preview2-vs-deps\" (#34908)"},{"Id":"431763001","IsPullRequest":false,"CreatedAt":"2019-04-10T23:19:32","Actor":"chsienki","Number":"34921","RawContent":null,"Title":"Populate nullable state for struct members of interfaces and classes","State":"open","Body":"Consider the following:\r\n\r\n```csharp\r\n#nullable enable\r\n\r\ninterface I<T>\r\n{\r\n    T P { get; }\r\n}\r\n\r\nclass C<T>\r\n{\r\n    internal T F = default!;\r\n}\r\n\r\nclass Program\r\n{\r\n    static void F1<T>(I<(T, T)> i) where T : class?\r\n    {\r\n        var t = i.P;\r\n        t.Item1.ToString(); // should warn\r\n    }\r\n\r\n    static void F2<T>(C<(T, T)> c) where T : class?\r\n    {\r\n        var t = c.F;\r\n        t.Item1.ToString();// should warn\r\n    }\r\n}\r\n```\r\nWe don't currently warn for either case.\r\n\r\nA second repro is available here: https://sharplab.io/#v2:EYLgtghgzgLgpgJwDQBMQGoA+ABADAAmwEYBuAWACg9CiAWcigYgDsBXAG3YmHbnzmbdelStgDMhAEz4AwpQDelfMvxKVxAGyFa+AGJEAPABUAfAApiYg2aNJ8RgJQn+RB/gDuAC0R8j+EFIA/GrKihQqEfgAbhAI+BD4ALwuAHQA4nAwAKJsYIgQMAD2CGYODJEqMXHASfEpMqwICAIw5RXRsfgAxrXAKQCS8GBEKUaFAMowCACWzADmpW0qAL4hymua2nqSxuaW1rb2Ti5uXj72/kFrYe0dcQnJcCMZ2bn5RSVlaxFV+DXJEHqjWazBgAyGpG+lU6PWSfTGkxm80W31WFGWQA=\r\n\r\n","Url":"https://github.com/dotnet/roslyn/issues/34921","RelatedDescription":"Open issue \"Populate nullable state for struct members of interfaces and classes\" (#34921)"},{"Id":"431685383","IsPullRequest":true,"CreatedAt":"2019-04-10T22:31:35","Actor":"gafter","Number":"34911","RawContent":null,"Title":"Switch on enum type nested in generic type produces LangVersion error","State":"closed","Body":"Fixes #34905\r\n\r\n@dotnet/roslyn-compiler This is a fix for a serious regression that would be introduced in 16.1p2 (mea culpa) if not for this bug fix.\r\n","Url":"https://github.com/dotnet/roslyn/pull/34911","RelatedDescription":"Closed or merged PR \"Switch on enum type nested in generic type produces LangVersion error\" (#34911)"},{"Id":"431744860","IsPullRequest":false,"CreatedAt":"2019-04-10T22:26:44","Actor":"333fred","Number":"34919","RawContent":null,"Title":"Multiple Ungrouped Conversions Possible in the NullableWalker","State":"open","Body":"https://github.com/dotnet/roslyn/blob/master/src/Compilers/CSharp/Portable/FlowAnalysis/NullableWalker.cs#L3292-L3296\r\n\r\nThis assumes that conversions will always have been grouped. However, in field initializers for enums, this can be not the case:\r\n\r\n```C#\r\nenum E1 : byte\r\n{\r\n    A1\r\n}\r\nenum E2\r\n{\r\n    A2 = E1.A1\r\n}\r\n```\r\n\r\nThe field initializer for `A2` will have two ungrouped conversions, and the nullable walker will hit the linked assertion.","Url":"https://github.com/dotnet/roslyn/issues/34919","RelatedDescription":"Open issue \"Multiple Ungrouped Conversions Possible in the NullableWalker\" (#34919)"},{"Id":"431626302","IsPullRequest":true,"CreatedAt":"2019-04-10T22:02:37","Actor":"gafter","Number":"34904","RawContent":null,"Title":"Document compat break between 16.0 and 16.1 from #34695","State":"closed","Body":"Fixes #34882","Url":"https://github.com/dotnet/roslyn/pull/34904","RelatedDescription":"Closed or merged PR \"Document compat break between 16.0 and 16.1 from #34695\" (#34904)"},{"Id":"431737051","IsPullRequest":false,"CreatedAt":"2019-04-10T21:59:55","Actor":"333fred","Number":"34918","RawContent":null,"Title":"CSharpOperationFactory `CreateInternal` Should Not Capture","State":"open","Body":"https://github.com/dotnet/roslyn/blob/master/src/Compilers/CSharp/Portable/Operations/CSharpOperationFactory.cs#L321\r\n\r\nThis captures the `boundNode` element in the lambda for `getChildren`, and it doesn't need to. We should update this to be non-capturing.\r\n\r\nI'm going to mark this up for grabs so that anyone in the community who would like to make a small improvement can do so, as I am focusing on the nullable api at the moment. If no has taken this up after that work is completed, I'll probably fix this.","Url":"https://github.com/dotnet/roslyn/issues/34918","RelatedDescription":"Open issue \"CSharpOperationFactory `CreateInternal` Should Not Capture\" (#34918)"},{"Id":"431736721","IsPullRequest":false,"CreatedAt":"2019-04-10T21:58:47","Actor":"terrajobst","Number":"34917","RawContent":null,"Title":"\"Rename file to match type\" doesn't work in .NET Standard","State":"open","Body":"**Version Used**: \r\n\r\nMicrosoft Visual Studio Enterprise 2019 Int Preview\r\nVersion 16.1.0 Preview 1.0 [28809.33.d16.1]\r\nVisualStudio.16.IntPreview/16.1.0-pre.1.0+28809.33.d16.1\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Create a .NET Standard project\r\n2. Open Class1.cs\r\n3. Change type identitifer to Class2.cs\r\n\r\n**Expected Behavior**:\r\n\r\nIn .NET Framework (legacy project system) two fixers show up, one to rename the file to match the type name and one to rename the type to match the filename:\r\n\r\n![image](https://user-images.githubusercontent.com/5169960/55916253-b5881480-5ba0-11e9-9d04-b47e62390f64.png)\r\n\r\n**Actual Behavior**:\r\n\r\nIn .NET Standard (CPS) only the option to rename the type to match the filename shows up:\r\n\r\n![image](https://user-images.githubusercontent.com/5169960/55916257-bae55f00-5ba0-11e9-86e1-47c62d2014e2.png)\r\n\r\nNot sure that's a Roslyn bug or a CPS bug.","Url":"https://github.com/dotnet/roslyn/issues/34917","RelatedDescription":"Open issue \"\"Rename file to match type\" doesn't work in .NET Standard\" (#34917)"},{"Id":"431733829","IsPullRequest":true,"CreatedAt":"2019-04-10T21:50:02","Actor":"gafter","Number":"34916","RawContent":null,"Title":"Remove the temporary mechanism for \"external\" nullable annotations.","State":"open","Body":"Relates to #29821","Url":"https://github.com/dotnet/roslyn/pull/34916","RelatedDescription":"Open PR \"Remove the temporary mechanism for \"external\" nullable annotations.\" (#34916)"},{"Id":"431730419","IsPullRequest":true,"CreatedAt":"2019-04-10T21:39:50","Actor":"ryzngard","Number":"34915","RawContent":null,"Title":"Add IVsRefactorNotify changes to MoveToNamespace refactorings","State":"open","Body":"If available, use the host service to provide IVsRefactorNotify changes of the symbols being changed so dependent frameworks\r\ncan handle the changes appropriately. \r\n\r\nAdds unit tests that verify we have the correct code operations produced when we expect symbols to change. ","Url":"https://github.com/dotnet/roslyn/pull/34915","RelatedDescription":"Open PR \"Add IVsRefactorNotify changes to MoveToNamespace refactorings\" (#34915)"},{"Id":"431676376","IsPullRequest":true,"CreatedAt":"2019-04-10T21:30:04","Actor":"cston","Number":"34910","RawContent":null,"Title":"Compare constraints lazily across partial type declarations (#34850)","State":"closed","Body":"Fixes #34841.\r\n\r\n(Cherry-pick of 43f2329f0e4738b0e05812e68e9f82b78945d74c to the dev16.1-preview2 branch.)","Url":"https://github.com/dotnet/roslyn/pull/34910","RelatedDescription":"Closed or merged PR \"Compare constraints lazily across partial type declarations (#34850)\" (#34910)"},{"Id":"431715668","IsPullRequest":true,"CreatedAt":"2019-04-10T21:04:51","Actor":"ryzngard","Number":"34914","RawContent":null,"Title":"Update upgrade fixer","State":"open","Body":"Don’t suggest upgrading to an unsupported state","Url":"https://github.com/dotnet/roslyn/pull/34914","RelatedDescription":"Open PR \"Update upgrade fixer\" (#34914)"},{"Id":"431694887","IsPullRequest":false,"CreatedAt":"2019-04-10T20:22:59","Actor":"sharwell","Number":"34913","RawContent":null,"Title":"xunit runner logs not collected for integration test hangs","State":"open","Body":"For some reason, the log files attached for an integration test run are no longer including the xunit runner process heap dump. This file is needed to determine the location in test code where the hang occurred.","Url":"https://github.com/dotnet/roslyn/issues/34913","RelatedDescription":"Open issue \"xunit runner logs not collected for integration test hangs\" (#34913)"},{"Id":"431693821","IsPullRequest":false,"CreatedAt":"2019-04-10T20:20:13","Actor":"JohnGalt1717","Number":"34912","RawContent":null,"Title":"Microsoft.CSharp.Core.targets(58,5): error MSB6006: \"csc.exe\" exited with code -2146232797.","State":"open","Body":"**Version Used**: 2.2.203 .NET Core VS.NET 2019 16.0\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Build project\r\n2. Observe error in output\r\n\r\nHere's my CSProj:\r\n\r\n```\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n\t<PropertyGroup>\r\n\t\t<TargetFramework>netcoreapp2.2</TargetFramework>\r\n\t\t<DebugType>portable</DebugType>\r\n\t\t<LangVersion>8.0</LangVersion>\r\n\t\t<NullableReferenceTypes>true</NullableReferenceTypes>\r\n\t\t<NullableContextOptions>enable</NullableContextOptions>\r\n\t</PropertyGroup>\r\n\r\n\t<ItemGroup>\r\n\t\t<PackageReference Include=\"AspNet.Security.OpenIdConnect.Extensions\" Version=\"2.0.0\" />\r\n\t\t<PackageReference Include=\"AspNet.Security.OpenIdConnect.Primitives\" Version=\"2.0.0\" />\r\n\t\t<PackageReference Include=\"AspNet.Security.OpenIdConnect.Server\" Version=\"2.0.0\" />\r\n\t\t<PackageReference Include=\"AutoMapper.Extensions.Microsoft.DependencyInjection\" Version=\"6.0.0\" />\r\n\t\t<PackageReference Include=\"DocumentFormat.OpenXml\" Version=\"2.9.1\" />\r\n\t\t<PackageReference Include=\"DocxToHtml\" Version=\"1.0.4\" />\r\n\t\t<PackageReference Include=\"EPPlus\" Version=\"4.5.3.1\" />\r\n\t\t<PackageReference Include=\"FileHelpers\" Version=\"3.4.0\" />\r\n\t\t<PackageReference Include=\"Mammoth\" Version=\"1.4.0\" />\r\n\t\t<PackageReference Include=\"Microsoft.ApplicationInsights.AspNetCore\" Version=\"2.6.1\" />\r\n\t\t<PackageReference Include=\"Microsoft.AspNet.WebApi.Client\" Version=\"5.2.7\" />\r\n\t\t<PackageReference Include=\"Microsoft.Azure.DocumentDB.Core\" Version=\"2.3.0\" />\r\n\t\t<PackageReference Include=\"Microsoft.Azure.Management.AppService.Fluent\" Version=\"1.20.0\" />\r\n\t\t<PackageReference Include=\"Microsoft.Azure.Management.Dns.Fluent\" Version=\"1.20.0\" />\r\n\t\t<PackageReference Include=\"Microsoft.Azure.Management.Fluent\" Version=\"1.20.0\" />\r\n\t\t<PackageReference Include=\"Microsoft.Azure.Search\" Version=\"5.0.3\" />\r\n\t\t<PackageReference Include=\"Microsoft.Graph\" Version=\"1.14.0\" />\r\n\t\t<PackageReference Include=\"Sendgrid\" Version=\"9.10.0\" />\r\n\t\t<PackageReference Include=\"System.Reactive.Linq\" Version=\"4.1.5\" />\r\n\t\t<PackageReference Include=\"System.Threading\" Version=\"4.3.0\" />\r\n\t\t<PackageReference Include=\"unofficial.windowsazure.mediaservices\" Version=\"4.1.0.1\" />\r\n\t\t<PackageReference Include=\"unofficial.windowsazure.mediaservices.extensions\" Version=\"4.1.0.1\" />\r\n\t\t<PackageReference Include=\"WindowsAzure.Storage\" Version=\"9.3.3\" />\r\n\t</ItemGroup>\r\n\r\n\t<ItemGroup>\r\n\t\t<ProjectReference Include=\"..\\XXX.Data\\XXX.Data.csproj\" />\r\n\t\t<ProjectReference Include=\"..\\TinCan\\TinCan.csproj\" />\r\n\t</ItemGroup>\r\n\r\n\t<ItemGroup>\r\n\t\t<Compile Update=\"Properties\\Resources.Designer.cs\">\r\n\t\t\t<DesignTime>True</DesignTime>\r\n\t\t\t<AutoGen>True</AutoGen>\r\n\t\t\t<DependentUpon>Resources.resx</DependentUpon>\r\n\t\t</Compile>\r\n\t</ItemGroup>\r\n\r\n\t<ItemGroup>\r\n\t\t<EmbeddedResource Update=\"Properties\\Resources.resx\">\r\n\t\t\t<Generator>ResXFileCodeGenerator</Generator>\r\n\t\t\t<LastGenOutput>Resources.Designer.cs</LastGenOutput>\r\n\t\t</EmbeddedResource>\r\n\t</ItemGroup>\r\n\r\n</Project>\r\n\r\n```\r\n\r\n**Expected Behavior**:\r\n\r\nShould build normally like dotnet.exe does.\r\n\r\n**Actual Behavior**:\r\n\r\nCrashes with this in the output:  Microsoft.CSharp.Core.targets(58,5): error MSB6006: \"csc.exe\" exited with code -2146232797.","Url":"https://github.com/dotnet/roslyn/issues/34912","RelatedDescription":"Open issue \"Microsoft.CSharp.Core.targets(58,5): error MSB6006: \"csc.exe\" exited with code -2146232797.\" (#34912)"},{"Id":"431675069","IsPullRequest":true,"CreatedAt":"2019-04-10T19:31:04","Actor":"gafter","Number":"34909","RawContent":null,"Title":"Remove the dependence between the order in NullableAnnotation and metadata attribute values","State":"open","Body":"Fixes #33952\r\n","Url":"https://github.com/dotnet/roslyn/pull/34909","RelatedDescription":"Open PR \"Remove the dependence between the order in NullableAnnotation and metadata attribute values\" (#34909)"},{"Id":"431668455","IsPullRequest":false,"CreatedAt":"2019-04-10T19:13:35","Actor":"kindermannhubert","Number":"34907","RawContent":null,"Title":"Way to explicitly reference IDE analyzers from project file","State":"open","Body":"**Version Used**: VS 2019 Professional (16.0.1)\r\n\r\nIs there any way to explicitly reference IDE analyzers from project file (probably with Analyzer tag) so IDE analyzers will be used also while building solution outside of VS only with msbuild? I was discussing this problem in #33558.\r\n\r\nCustom analyzers can be activated by adding following tag to csproj (I'm not interested in installing it as VS extension):\r\n```xml\r\n<Analyzer Include=\"somePathToAnalyzer\\CustomAnalyzer.dll\" />\r\n```\r\nIDE analyzers do not have to be included this way. They are present automatically (while building from VS).\r\nBoth types (custom and IDE) can be adjusted (=change default severity of analyzers) by ruleset file. Ruleset file is included by following tag in csproj:\r\n```xml\r\n<CodeAnalysisRuleSet>somePathToRulesetFile\\MyRuleset.ruleset</CodeAnalysisRuleSet>\r\n```\r\nWhen working in VS it works (except the issue #33558 - when IDE analyzers has Warning/Error severity set up they are not breaking a build).\r\nExample (simple program with error, but build succeeds):\r\n![issue1](https://user-images.githubusercontent.com/11704036/55906591-e84c0000-5bd4-11e9-856f-f1a24b4d1a56.png)\r\n![issue2](https://user-images.githubusercontent.com/11704036/55906592-e84c0000-5bd4-11e9-85b7-258fa752a444.png)\r\n\r\nMy problem probably comes from the very same reason why the build is not broken in example above.\r\nWhen I build solution just with msbuild as\r\n```\r\nmsbuild MySolution.sln\r\n```\r\nno error is detected and build succeeds.\r\n\r\nWhat I tried:\r\n\r\n1. I added Analyzer element inside project file with reference to Microsoft.CodeAnalysis.CSharp.Features.dll from VS. But during build it was missing references of this lib.\r\n2. I added also the references (located also in VS folder). But those references have another version than version which is referenced by Microsoft.CodeAnalysis.CSharp.Features.dll (e.g. System.Composition.AttributedModel (1.0.31) is referenced, but 1.0.27 version is shipped with VS). There is no(?) simple way to guide MsBuild to use binding redirection.\r\n3. Finally I downloaded Microsoft.CodeAnalysis.CSharp.Features.dll through Nuget with its dependencies and added those dependencies to Analyzer tags as well (which is thing would really like not to do). Another problem appeared - MsBuild has already loaded some assemblies by itself (from some MsBuild/???/Roslyn folder - do not remember exactly) which collided with NuGet assemblies.\r\n4. I removed those colliding references from Analyzer references and it looked better but I was still getting some weird null reference exceptions from CSharpValidateFormatStringDiagnosticAnalyzer.\r\n5. I gave up.","Url":"https://github.com/dotnet/roslyn/issues/34907","RelatedDescription":"Open issue \"Way to explicitly reference IDE analyzers from project file\" (#34907)"},{"Id":"431647759","IsPullRequest":false,"CreatedAt":"2019-04-10T18:29:47","Actor":"mnmr","Number":"34906","RawContent":null,"Title":"Allow out parameter widening","State":"closed","Body":"Given the following code bits (where both CarNode and PlaneNode implement INode):\r\n\r\n```\r\n       public ConcurrentDictionary<TreeKey, CarNode> CarNodesByKey { get; } = new ConcurrentDictionary<TreeKey, CarNode>();\r\n        public ConcurrentDictionary<TreeKey, PlaneNode> PlaneNodesByKey { get; } = new ConcurrentDictionary<TreeKey, PlaneNode>();\r\n\r\n        public bool TryGetNode(ENodeType nodeType, TreeKey key, out INode node)\r\n        {\r\n            switch (nodeType)\r\n            {\r\n                case ENodeType.Cars:\r\n                    return CarNodesByKey.TryGetValue(key, out node);\r\n                case ENodeType.Planes:\r\n                    return PlaneNodesByKey.TryGetValue(key, out node);\r\n                default:\r\n                    node = null;\r\n                    return false;\r\n            }\r\n        }\r\n```\r\n\r\nThe problem here is that this does not compile, because the `out node` is `INode` rather than the specific type declared for the collection. But in normal C# code it is perfectly valid to declare a variable of a less specific type and assign a specific type to it, e.g. `INode node = new CarNode()`.\r\n\r\nWhy is the C# compiler being a PITA in this case? Can we fix it so that scenarios like this are less painful? \r\n\r\nTo work around this, each case in the switch must now declare a local variable for the out parameter, so the code looks like this:\r\n\r\n```\r\n        public bool TryGetNode(ENodeType nodeType, TreeKey key, out INode node)\r\n        {\r\n            switch (nodeType)\r\n            {\r\n                case ENodeType.Cars:\r\n                    if (CarNodesByKey.TryGetValue(key, out var carNode))\r\n                    {\r\n                        node = carNode;\r\n                        return true;\r\n                    }\r\n                    node = null;\r\n                    return false;\r\n                case ENodeType.Planes:\r\n                    if (PlaneNodesByKey.TryGetValue(key, out var planeNode))\r\n                    {\r\n                        node = planeNode;\r\n                        return true;\r\n                    }\r\n                    node = null;\r\n                    return false;\r\n                default:\r\n                    node = null;\r\n                    return false;\r\n            }\r\n        }\r\n```\r\n\r\nThis does get tedious to work with rather quickly.","Url":"https://github.com/dotnet/roslyn/issues/34906","RelatedDescription":"Closed issue \"Allow out parameter widening\" (#34906)"},{"Id":"431623767","IsPullRequest":false,"CreatedAt":"2019-04-10T17:28:23","Actor":"KirillOsenkov","Number":"34903","RawContent":null,"Title":"Inline Rename with Multiple Carets","State":"open","Body":"**Version Used**: \r\nDev16 RTM\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. New C# console app\r\n2. F2 on Program to enter Rename mode\r\n3. Cltr+Alt+Click twice inside the green identifier to have two carets\r\n4. Delete or type a character\r\n\r\n**Expected Behavior**:\r\nWorks\r\n\r\n**Actual Behavior**:\r\nException\r\n\r\nhttp://source.roslyn.io/#Microsoft.CodeAnalysis.EditorFeatures.Wpf/InlineRename/AbstractInlineRenameUndoManager.cs,51\r\n\r\nAssumes a single caret\r\n\r\nBug found courtesy of @DavidKarlas \r\n","Url":"https://github.com/dotnet/roslyn/issues/34903","RelatedDescription":"Open issue \"Inline Rename with Multiple Carets\" (#34903)"},{"Id":"431563934","IsPullRequest":true,"CreatedAt":"2019-04-10T17:08:54","Actor":"sharwell","Number":"34902","RawContent":null,"Title":"Restore packages after creating a CPS project in tests","State":"closed","Body":"Fixes #34165","Url":"https://github.com/dotnet/roslyn/pull/34902","RelatedDescription":"Closed or merged PR \"Restore packages after creating a CPS project in tests\" (#34902)"},{"Id":"431544432","IsPullRequest":false,"CreatedAt":"2019-04-10T14:43:48","Actor":"stephentoub","Number":"34901","RawContent":null,"Title":"Can we special-case some more core framework methods for nullability?","State":"open","Body":"The compiler already special-cases some methods like String.IsNullOrEmpty and Debug.Assert:\r\nhttps://github.com/dotnet/roslyn/blob/43f2329f0e4738b0e05812e68e9f82b78945d74c/src/Compilers/CSharp/Portable/Symbols/ExtraAnnotations.cs\r\npresumably until the relevant members in Corelib are appropriately annotated.\r\n\r\nCan we special-case some more, and in particular ones we don't currently have attributes that would let us annotate appropriately?\r\n\r\nIn particular, there are some core methods with complicated patterns but that are showing up really frequently in code, and it'd be very helpful if the compiler could appropriately suppress nullability warnings for common cases.\r\n\r\n1. `Interlocked.CompareExchange(ref target, somethingNonNull, null)`\r\n\r\nThis is often used for lazy initialization, and shows up in a lot of properties, e.g.\r\n```C#\r\nprivate object? _syncRoot;\r\n\r\npublic object SyncRoot\r\n{\r\n    get\r\n    {\r\n        if (_syncRoot == null)\r\n        {\r\n            Interlocked.CompareExchange<object?>(ref _syncRoot, new object(), null);\r\n        }\r\n        return _syncRoot; // compiler warns here\r\n    }\r\n}\r\n```\r\nThe compiler currently warns on `return _syncRoot;` because it can't see that the `CompareExchange` will set `_syncRoot` to a non-null value if it's currently `null` (obviously there could be other code racing with this code that would result in that not being true, but that's the case in general for nullability flow analysis and multi-threading issues are ignored).\r\n\r\nIt's not clear what an attribute for this pattern would look like, and we don't currently have one; until we do, it'd be helpful if the compiler could special-case this.\r\n\r\nThe compiler would already appropriately suppress the warning if the code were instead:\r\n```C#\r\nif (_syncRoot == null)\r\n{\r\n    _syncRoot = new object();\r\n}\r\nreturn _syncRoot;\r\n```\r\nso it's a bit ironic that the stronger threading semantics actually cause the compiler to warn :smile:\r\n\r\n2. `Interlocked.Exchange(ref target, somethingNonNull)`, `Volatile.Write(ref target, somethingNonNull)`\r\n\r\nSimilarly, these methods write the second argument to the first, but we don't have an attribute to express that concept, and it's not clear what that would look like.\r\n\r\nRelated to https://github.com/dotnet/roslyn/issues/26761.  If we think it's likely we'll get attributes for these cases for C# 8 / .NET Core 3.0, then this issue can be closed.\r\n\r\ncc: @cston, @jcouv, @dotnet/nullablefc ","Url":"https://github.com/dotnet/roslyn/issues/34901","RelatedDescription":"Open issue \"Can we special-case some more core framework methods for nullability?\" (#34901)"}],"ResultType":"GitHubIssue"},"CoreRT-Issues":{"Issues":[{"Id":"431170974","IsPullRequest":true,"CreatedAt":"2019-04-10T23:04:04","Actor":"Dotnet-GitSync-Bot","Number":"7277","RawContent":null,"Title":"Mirror changes from dotnet/corefx,coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/corefx,coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @safern @krwq @tannergooding @danmosemsft @stephentoub @buyaa-n @GrabYourPitchforks @grant-d @sdmaclea @jkoritzinsky @hughbe","Url":"https://github.com/dotnet/corert/pull/7277","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corefx,coreclr\" (#7277)"},{"Id":"431666033","IsPullRequest":true,"CreatedAt":"2019-04-10T22:38:21","Actor":"nattress","Number":"7281","RawContent":null,"Title":"Update CoreCLR test script for VS2019","State":"closed","Body":"After installing VS2019 the CoreCLR test scripts can no longer find MSBuild.exe because it was moved within the VS install folder. Fix to try both options before giving up.","Url":"https://github.com/dotnet/corert/pull/7281","RelatedDescription":"Closed or merged PR \"Update CoreCLR test script for VS2019\" (#7281)"},{"Id":"431720505","IsPullRequest":true,"CreatedAt":"2019-04-10T21:18:03","Actor":"trylek","Number":"7283","RawContent":null,"Title":"Minor SuperIlc fixes / improvements found while using the tool","State":"open","Body":"One non-trivial revelation I made is that my previous introduction\r\nof Outcome was inconsistent w.r.t. the summary table as there is\r\ngenerally a different number of compilations and executions.\r\nI have fixed this by splitting the summary table in two for\r\ncompilations and executions.\r\n\r\nThanks\r\n\r\nTomas","Url":"https://github.com/dotnet/corert/pull/7283","RelatedDescription":"Open PR \"Minor SuperIlc fixes / improvements found while using the tool\" (#7283)"},{"Id":"431682244","IsPullRequest":true,"CreatedAt":"2019-04-10T19:50:02","Actor":"trylek","Number":"7282","RawContent":null,"Title":"Improving PE section management in CPAOT","State":"open","Body":"The ability to use SuperIlc to ILC the entire Pri#1 test suite\r\nlet me quickly identify several remaining CPAOT compilation\r\nissues. This change should be fixing the biggest bucket of 8\r\nfailing compilations.\r\n\r\nAs in contrast to Crossgen we don't copy the input MSIL\r\nselectively to the output R2R PE image (which may change soon\r\nwith Simon's latest changes), in case of RVA fields we just\r\nstore the section name in which the field content resides\r\nand, when serializing the sections to the output PE, we\r\nresolve the appropriate SectionStartNode's in the symbol map\r\nfor the relocation pass.\r\n\r\nAs the R2R PE emitter is basically the oldest part of the CPAOT\r\ncompiler, I was naturally making various arbitrary choices during\r\nits initial implementation and because of this the section\r\nmanagement logic ended up somewhat randomly scattered among\r\nReadyToRunObjectWriter, SectionBuilder and R2RPEBuilder.\r\n\r\nThe SectionBuilder only knew about the sections emitted by\r\nthe CPAOT compiler itself, not about the incoming sections from\r\nthe input MSIL; those got only combined with the SectionBuilder\r\nsections in R2RPEBuilder constructor.\r\n\r\nDue to this fact the section serialization code in SectionBuilder\r\ndidn't know about the MSIL section holding the RVA field (as it\r\nwasn't one of the sections produced by the CPAOT compiler) and\r\nso it didn't resolve its start node in the symbol map.\r\n\r\nTo fix this, I have centralized the logic for building the list\r\nof output sections in SectionBuilderExtensions.PrepareSections\r\nwhere we compose the complete section list upfront and set it\r\nto SectionBuilder. R2RPEBuilder constructor can be much simpler\r\nas it can reuse the SectionBuilder section map and the section\r\nstart nodes get properly resolved even for the MSIL input\r\nsections.\r\n\r\nThanks\r\n\r\nTomas\r\n\r\nP.S. I tried to explain the logic in maximum detail because\r\naccording to our yesterday meeting Simon is investigating / making\r\nchanges in this area as part of removing the previously produced\r\nR2R code when CPAOT-compiling an already R2R-compiled PE executable\r\nand RVA field management is exactly the area that will break and\r\nwill need fixing if he decides to switch over to selective copying\r\nof the input executable to the R2R output file as opposed to blindly\r\ncopying all the pre-existing sections as we do today.","Url":"https://github.com/dotnet/corert/pull/7282","RelatedDescription":"Open PR \"Improving PE section management in CPAOT\" (#7282)"},{"Id":"431562959","IsPullRequest":false,"CreatedAt":"2019-04-10T15:17:13","Actor":"filipnavara","Number":"7280","RawContent":null,"Title":"Bogus warnings on System.Collections.Tests CI tests","State":"open","Body":"Watching the outputs on https://dev.azure.com/dnceng/public/_build/results?buildId=150071 (https://github.com/dotnet/corert/pull/7277) shows many of these lines:\r\n\r\n```\r\nWARNING: Long running test .. finished in 933336ms.\r\nWARNING: Long running test .. finished in 933401ms.\r\n```\r\n\r\nObviously the tests didn't run for that long, so it looks like the time is reported incorrectly.","Url":"https://github.com/dotnet/corert/issues/7280","RelatedDescription":"Open issue \"Bogus warnings on System.Collections.Tests CI tests\" (#7280)"},{"Id":"431465556","IsPullRequest":true,"CreatedAt":"2019-04-10T13:30:56","Actor":"MichalStrehovsky","Number":"7279","RawContent":null,"Title":"Improve SharedLibrary test","State":"closed","Body":"Add coverage for stack walking (GC/EH).","Url":"https://github.com/dotnet/corert/pull/7279","RelatedDescription":"Closed or merged PR \"Improve SharedLibrary test\" (#7279)"},{"Id":"431441435","IsPullRequest":false,"CreatedAt":"2019-04-10T11:05:48","Actor":"rainbowlee","Number":"7278","RawContent":null,"Title":"Unable to load shared library 'objwriter' or one of its dependencies","State":"open","Body":"This problems occured again.\r\n\r\nLast time, I restalled the operation system.\r\n\r\nI run unbantu on Oracle VM VirtualBox\r\n\r\n\r\nubuntu-18.10-desktop-amd64.iso\r\n\r\n\r\n\r\n![crt_error1](https://user-images.githubusercontent.com/7885929/55873976-9c448f80-5bc3-11e9-8092-0743a27fa0fd.png)\r\n","Url":"https://github.com/dotnet/corert/issues/7278","RelatedDescription":"Open issue \"Unable to load shared library 'objwriter' or one of its dependencies\" (#7278)"},{"Id":"431113344","IsPullRequest":true,"CreatedAt":"2019-04-09T20:18:04","Actor":"Dotnet-GitSync-Bot","Number":"7276","RawContent":null,"Title":"Mirror changes from dotnet/corefx,coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/corefx,coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @safern @krwq @tannergooding @danmosemsft @stephentoub @buyaa-n @GrabYourPitchforks @grant-d @sdmaclea @jkoritzinsky @hughbe","Url":"https://github.com/dotnet/corert/pull/7276","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corefx,coreclr\" (#7276)"},{"Id":"430958001","IsPullRequest":true,"CreatedAt":"2019-04-09T14:33:58","Actor":"MichalStrehovsky","Number":"7275","RawContent":null,"Title":"Merge nmirror to master","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/7275","RelatedDescription":"Closed or merged PR \"Merge nmirror to master\" (#7275)"},{"Id":"430957168","IsPullRequest":true,"CreatedAt":"2019-04-09T13:08:19","Actor":"dotnet-bot","Number":"7274","RawContent":null,"Title":"Merge changes from TFS","State":"closed","Body":"When merging, this PR, please ensure a merge commit is created as automation requires the merge commit.  Do not 'Squash and merge' or 'Rebase and merge'!","Url":"https://github.com/dotnet/corert/pull/7274","RelatedDescription":"Closed or merged PR \"Merge changes from TFS\" (#7274)"},{"Id":"430942646","IsPullRequest":true,"CreatedAt":"2019-04-09T12:35:44","Actor":"filipnavara","Number":"7273","RawContent":null,"Title":"Move TimerQueue.TickCount Windows implementation to shared CoreLib","State":"open","Body":"Implementation taken from CoreCLR because it accounts for Windows 7 unlike the original CoreRT code.","Url":"https://github.com/dotnet/corert/pull/7273","RelatedDescription":"Open PR \"Move TimerQueue.TickCount Windows implementation to shared CoreLib\" (#7273)"},{"Id":"430542017","IsPullRequest":true,"CreatedAt":"2019-04-08T16:21:43","Actor":"MichalStrehovsky","Number":"7272","RawContent":null,"Title":"Merge master to nmirror","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/7272","RelatedDescription":"Closed or merged PR \"Merge master to nmirror\" (#7272)"},{"Id":"430501135","IsPullRequest":true,"CreatedAt":"2019-04-08T16:20:57","Actor":"MichalStrehovsky","Number":"7270","RawContent":null,"Title":"Fix ProjectN break","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/7270","RelatedDescription":"Closed or merged PR \"Fix ProjectN break\" (#7270)"},{"Id":"430501318","IsPullRequest":true,"CreatedAt":"2019-04-08T16:20:41","Actor":"MichalStrehovsky","Number":"7271","RawContent":null,"Title":"Add ProjectN fallback for generic enums","State":"closed","Body":"Turns out it would be unnecessarily complicated to pipe this through to\r\nrhbind (need to do this in NUTC, update the CTL format, and pipe it\r\nthrough the binder).","Url":"https://github.com/dotnet/corert/pull/7271","RelatedDescription":"Closed or merged PR \"Add ProjectN fallback for generic enums\" (#7271)"},{"Id":"430180134","IsPullRequest":true,"CreatedAt":"2019-04-08T11:38:37","Actor":"MichalStrehovsky","Number":"7269","RawContent":null,"Title":"Remove reflection from Enum.ToString","State":"closed","Body":"Contributes to #5013.\r\n\r\nHaving reflection field access and custom attribute parsing support in a code path reachable from `Enum.ToString` means that any \"hello world\"-style app needs to have pretty much the full reflection stack embedded in it. The reflection stack is huge. This also makes access to uncached `EnumInfo` marginally faster.\r\n\r\nThis pretty much restores #3801, where we replaced the specialized code paths with the common reflection path to fix a bug around blocked types. I fix that bug by simply returning an empty `EnumInfo`.\r\n\r\nI had to make generic type definition EETypes carry their CorElementType to make this work property on generic type definitions of enums (for the corner case of enum type nested under a generic type). I'll see how difficult is it to add this to the binder on the Project N side when this ports over. If it's too complex, I'll simply restore the logic that accesses the first instance field type on generic definitions using reflection (under `#if PROJECTN`).","Url":"https://github.com/dotnet/corert/pull/7269","RelatedDescription":"Closed or merged PR \"Remove reflection from Enum.ToString\" (#7269)"},{"Id":"430132193","IsPullRequest":true,"CreatedAt":"2019-04-08T01:08:39","Actor":"MichalStrehovsky","Number":"7268","RawContent":null,"Title":"Change MyGet references to point to the new blob feed","State":"closed","Body":"We don't publish to MyGet anymore.","Url":"https://github.com/dotnet/corert/pull/7268","RelatedDescription":"Closed or merged PR \"Change MyGet references to point to the new blob feed\" (#7268)"},{"Id":"430070372","IsPullRequest":true,"CreatedAt":"2019-04-06T19:56:13","Actor":"nattress","Number":"7267","RawContent":null,"Title":"Always publish symbols for official builds","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/7267","RelatedDescription":"Closed or merged PR \"Always publish symbols for official builds\" (#7267)"},{"Id":"430060399","IsPullRequest":true,"CreatedAt":"2019-04-06T18:04:30","Actor":"nattress","Number":"7266","RawContent":null,"Title":"Fix symbol publish property","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/7266","RelatedDescription":"Closed or merged PR \"Fix symbol publish property\" (#7266)"},{"Id":"430017850","IsPullRequest":false,"CreatedAt":"2019-04-06T09:53:02","Actor":"akbcode","Number":"7265","RawContent":null,"Title":"Build shared library with F# fails on macOS","State":"open","Body":"I followed the NativeLibrary sample to build a shared library in F#. [Here's my code.](https://gist.github.com/akbcode/fecb98b56cbbfeffd05bdf85ccb83788)\r\n\r\nIt fails with \r\n```\r\nld: illegal text-relocation to '___typemanager_indirection' in obj/Debug/netcoreapp2.2/osx-x64/native/FSNativeLibrary.o from '___RMHSignature_System_Linq_System_Linq_Enumerable__Empty' in obj/Debug/netcoreapp2.2/osx-x64/native/FSNativeLibrary.o for architecture x86_64\r\n```\r\nBuilding as a static library works. I have only tested on macOS 10.13.6","Url":"https://github.com/dotnet/corert/issues/7265","RelatedDescription":"Open issue \"Build shared library with F# fails on macOS\" (#7265)"},{"Id":"429976790","IsPullRequest":true,"CreatedAt":"2019-04-06T00:25:51","Actor":"nattress","Number":"7264","RawContent":null,"Title":"Attempt 3 at passing Azure feed / Key to the publish job","State":"closed","Body":"Inline scripts have their own syntax for properties and require input arguments to be called out like a method signature.","Url":"https://github.com/dotnet/corert/pull/7264","RelatedDescription":"Closed or merged PR \"Attempt 3 at passing Azure feed / Key to the publish job\" (#7264)"},{"Id":"429966491","IsPullRequest":true,"CreatedAt":"2019-04-05T23:15:36","Actor":"nattress","Number":"7263","RawContent":null,"Title":"Set working folder for official build publish task","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/7263","RelatedDescription":"Closed or merged PR \"Set working folder for official build publish task\" (#7263)"},{"Id":"429896736","IsPullRequest":true,"CreatedAt":"2019-04-05T21:29:14","Actor":"nattress","Number":"7262","RawContent":null,"Title":"Publish to Azure blob feed","State":"closed","Body":"MyGet keeps running out of storage quota (see https://github.com/dotnet/core-eng/issues/5070). Switch to Azure blob feed so CoreRT nightly builds are publicly available.","Url":"https://github.com/dotnet/corert/pull/7262","RelatedDescription":"Closed or merged PR \"Publish to Azure blob feed\" (#7262)"},{"Id":"429686003","IsPullRequest":true,"CreatedAt":"2019-04-05T12:56:35","Actor":"MichalStrehovsky","Number":"7261","RawContent":null,"Title":"Update dependencies","State":"closed","Body":"Should pick up dotnet/corefx#36552.","Url":"https://github.com/dotnet/corert/pull/7261","RelatedDescription":"Closed or merged PR \"Update dependencies\" (#7261)"},{"Id":"429363643","IsPullRequest":true,"CreatedAt":"2019-04-05T12:51:00","Actor":"Dotnet-GitSync-Bot","Number":"7258","RawContent":null,"Title":"Mirror changes from dotnet/corefx,coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/corefx,coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @marek-safar","Url":"https://github.com/dotnet/corert/pull/7258","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corefx,coreclr\" (#7258)"},{"Id":"429508597","IsPullRequest":true,"CreatedAt":"2019-04-04T22:24:10","Actor":"EgorBo","Number":"7260","RawContent":null,"Title":"Move AssemblyName to shared","State":"open","Body":"CoreRT part of https://github.com/dotnet/coreclr/pull/23737","Url":"https://github.com/dotnet/corert/pull/7260","RelatedDescription":"Open PR \"Move AssemblyName to shared\" (#7260)"},{"Id":"429412133","IsPullRequest":true,"CreatedAt":"2019-04-04T20:52:56","Actor":"jkotas","Number":"7259","RawContent":null,"Title":"Fix build with VS2019","State":"closed","Body":"The environment setup scripts that come with VS2019 change current directory. It breaks places in the build that depend on current directory.","Url":"https://github.com/dotnet/corert/pull/7259","RelatedDescription":"Closed or merged PR \"Fix build with VS2019\" (#7259)"},{"Id":"429278376","IsPullRequest":true,"CreatedAt":"2019-04-04T16:04:09","Actor":"Dotnet-GitSync-Bot","Number":"7257","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub","Url":"https://github.com/dotnet/corert/pull/7257","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7257)"},{"Id":"429080050","IsPullRequest":true,"CreatedAt":"2019-04-04T10:18:54","Actor":"Dotnet-GitSync-Bot","Number":"7255","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @sywhang","Url":"https://github.com/dotnet/corert/pull/7255","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7255)"},{"Id":"429191733","IsPullRequest":false,"CreatedAt":"2019-04-04T10:06:18","Actor":"DenMpei","Number":"7256","RawContent":null,"Title":" [TEMPORARY EXCEPTION MESSAGE] FileLoadErrorGeneric: System.Drawing.Common","State":"open","Body":"Good day! \r\n\r\nI run: dotnet publish -r win-x64 -c release \r\nConsole application\r\n.Net Core version: 2.2\r\n\r\nAnd I get such an error ... What can I do about it?\r\n\r\nGenerating native code\r\nEXEC : error : [TEMPORARY EXCEPTION MESSAGE] FileLoadErrorGeneric: System.Drawing.Common","Url":"https://github.com/dotnet/corert/issues/7256","RelatedDescription":"Open issue \" [TEMPORARY EXCEPTION MESSAGE] FileLoadErrorGeneric: System.Drawing.Common\" (#7256)"},{"Id":"429036821","IsPullRequest":true,"CreatedAt":"2019-04-04T04:36:53","Actor":"Dotnet-GitSync-Bot","Number":"7254","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @filipnavara","Url":"https://github.com/dotnet/corert/pull/7254","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7254)"}],"ResultType":"GitHubIssue"},"SDK-Issues":{"Issues":[{"Id":"429836629","IsPullRequest":true,"CreatedAt":"2019-04-11T03:05:02","Actor":"dsplaisted","Number":"3086","RawContent":null,"Title":"Rewrite deps file generation","State":"closed","Body":"Fixes #3010\r\n\r\n## Background\r\n\r\nThe ResolvePackageAssets task outputs the resolved files from the assets file in various MSBuild items.  It uses an optimized cache file in order to avoid the performance overhead of reading the assets file if the assets file  hasn't changed.\r\n\r\nThe GenerateDepsFile task currently still reads the assets file directly.  This is a bit of a perf hit, but the task is not part of our \"inner loop\" perf scenario, since if you just make a code change and rebuild, the deps file will be up-to-date and won't need to be regenerated.\r\n\r\nThe GenerateDepsFile task has a `FilesToSkip` parameter, which is a list of files that should not be written to the deps file.  Generally, these are the \"conflict\" files that come from ResolvePackageFileConflicts.  However, the linker also wants to be able to specify files that shouldn't be written to the deps file because they have been linked out\r\n\r\nThe `FilesToSkip` items are full resolved paths.  Currently, the GenerateDepsFile task essentially translates assets from the assets file to the deps file, and in both of these cases the assets are identified by a package ID and version, and a relative path inside the package.  So for the FilesToSkip, the resolved path needs to be translated into a NuGet package ID and a relative path inside the package.  This is done via a \"heuristic\" that walks up the directory tree until it finds a .nuspec file, since NuGet puts the .nuspec file in the root of the package's folder in the package cache.\r\n\r\nHowever, now that we use targeting packs and apphost packs which are installed to dotnet\\packs instead of coming from a NuGet package, there are assets for which this heuristic doesn't work.  This is the issue described in #3010, and it means that any FilesToSkip that come from these packs will be ignored, and the file will still be written to the deps file.\r\n\r\n## Description of changes\r\n\r\nThis PR implements new logic for generating the deps file.  Most of the logic for doing this is actually implemented in the `DependencyContextBuilder` class.  So this PR adds a new `DependencyContextBuilder2` class which implements the new logic, and the `GenerateDepsFile` task can use the old logic, the new logic, or both of them and ensure that the results are the same.\r\n\r\n`DependencyContextBuilder2` works similarly to `DependencyContextBuilder`, except that instead of relying on the assets file for the assets to write to the deps file, it takes lists of files which come from the outputs of the ResolvePackageAssets task.  These items have metadata which indicates which package they belong to and the relative path to the asset within the package.  The new code still reads the assets file in order to get the \"libraries\" from the assets file and their dependencies.  In the future we can update ResolvePackageAssets to output and cache this data as well, and then we would be able to avoid the perf hit of reading the assets file in GenerateDepsFile as well.  The data that comes from the assets file (via the `ProjectContext` class) is all read in the `DependencyContextBuilder2` constructor, which should help make it clearer what data we would need for this.\r\n\r\nThe new logic does not use the `FilesToSkip` parameter, rather the files to skip should simply be removed from the items that are passed to the `GenerateDepsFile` task, for example:\r\n\r\n```xml\r\n    <ItemGroup>\r\n      <ResolvedCompileFileDefinitions Remove=\"@(_ConflictPackageFiles)\" />\r\n      <NativeCopyLocalItems Remove=\"@(_ConflictPackageFiles)\" />\r\n      <ResourceCopyLocalItems Remove=\"@(_ConflictPackageFiles)\" />\r\n      <RuntimeCopyLocalItems Remove=\"@(_ConflictPackageFiles)\" />\r\n      <RuntimeTargetsCopyLocalItems Remove=\"@(_ConflictPackageFiles)\" />\r\n      <RuntimePackAsset Remove=\"@(_ConflictPackageFiles)\" />\r\n    </ItemGroup>\r\n```\r\n\r\n## Comparing old and new deps file generation logic\r\n\r\nWith this PR, the `GenerateDepsFile` task is able to use either the old logic, the new logic, or run both and compare the results, erroring out if there is a difference.  The comparison and erroring out was necessary in order to ensure that the new code produced the same results as the old code (except in cases where we wanted it to differ).  Right now the default is still to run both modes and compare the result.  If we want to get more coverage ensuring that the results are the same in the wild, we could leave this as the default for a few previews, before removing the old logic.  Otherwise, I'd suggest we default to the new logic and leave the old logic in as an option for a few previews as an escape hatch if this breaks anything.\r\n\r\n## Other changes\r\n\r\n- Stop generating runtime signature for deps file.  This used the SHA1 algorithm but as far as we can tell was never consumed by the runtime or anywhere else\r\n- Read PackageOverrides.txt from targeting pack\r\n- Avoid using heuristic to find NuGet package ID.  If there wasn't metadata on the item to indicate the package ID, but the heuristic would have found a package ID, throw an exception so that we can find these cases and add the appropriate metadata","Url":"https://github.com/dotnet/sdk/pull/3086","RelatedDescription":"Closed or merged PR \"Rewrite deps file generation\" (#3086)"},{"Id":"431111800","IsPullRequest":true,"CreatedAt":"2019-04-11T02:07:16","Actor":"dsplaisted","Number":"3107","RawContent":null,"Title":"Update stage 0","State":"closed","Body":"Replace #3072","Url":"https://github.com/dotnet/sdk/pull/3107","RelatedDescription":"Closed or merged PR \"Update stage 0\" (#3107)"},{"Id":"431772059","IsPullRequest":true,"CreatedAt":"2019-04-11T00:01:10","Actor":"dsplaisted","Number":"3111","RawContent":null,"Title":"Use PackageDownload","State":"open","Body":"Fix https://github.com/dotnet/cli/issues/10440 (we will need https://github.com/dotnet/project-system/issues/4567 to be able to support this in VS).","Url":"https://github.com/dotnet/sdk/pull/3111","RelatedDescription":"Open PR \"Use PackageDownload\" (#3111)"},{"Id":"431061785","IsPullRequest":false,"CreatedAt":"2019-04-10T13:20:40","Actor":"johnbeisner","Number":"3104","RawContent":null,"Title":"Allow for the disablement of ResolveAppHosts","State":"closed","Body":"**Repro steps:**\r\nBuild win-arm [all arm* RIDs have this failure] @ commit 0606a12720f0eace5af77c545d0d91b96ec92e27\r\n\r\n**Error:**\r\nerror NU1605: Detected package downgrade: runtime.win-arm.Microsoft.NETCore.DotNetAppHost from 3.0.0-preview5-27607-08 to 3.0.0-preview4-27501-7. Reference the package directly from the project to select a different version. \r\n DownloadPackage -> Microsoft.NETCore.DotNetAppHost 3.0.0-preview5-27607-08 -> runtime.win-arm.Microsoft.NETCore.DotNetAppHost (>= 3.0.0-preview5-27607-08) \r\n DownloadPackage -> runtime.win-arm.Microsoft.NETCore.DotNetAppHost (>= 3.0.0-preview4-27501-7)\r\n\r\n**From Microsoft.NET.Sdk.TargetingPackResolution.targets:**\r\n```\r\n    <ResolveAppHosts TargetFrameworkIdentifier=\"$(TargetFrameworkIdentifier)\"\r\n                     TargetFrameworkVersion=\"$(_TargetFrameworkVersionWithoutV)\"\r\n                     TargetingPackRoot=\"$(NetCoreTargetingPackRoot)\"\r\n                     AppHostRuntimeIdentifier=\"$(AppHostRuntimeIdentifier)\"\r\n                     RuntimeFrameworkVersion=\"$(RuntimeFrameworkVersion)\"\r\n                     PackAsToolShimRuntimeIdentifiers=\"@(_PackAsToolShimRuntimeIdentifiers)\"\r\n                     DotNetAppHostExecutableNameWithoutExtension=\"$(_DotNetAppHostExecutableNameWithoutExtension)\"\r\n                     RuntimeGraphPath=\"$(BundledRuntimeIdentifierGraphFile)\"\r\n                     KnownAppHostPacks=\"@(KnownAppHostPack)\">\r\n\r\n      <Output TaskParameter=\"PackagesToDownload\" ItemName=\"_PackageReferenceToAdd\" />\r\n      <Output TaskParameter=\"AppHost\" ItemName=\"AppHostPack\" />\r\n      <Output TaskParameter=\"PackAsToolShimAppHostPacks\" ItemName=\"PackAsToolShimAppHostPack\" />\r\n\r\n    </ResolveAppHosts>\r\n```\r\n\r\n_Work-around is to disable the 'ResolveFrameworkReferences' target._\r\n\r\nThe 'ResolveFrameworkReferences' step of the 'ResolveFrameworkReferences' target can be disabled by adding:\r\n`<DisableImplicitFrameworkReferences>true</DisableImplicitFrameworkReferences>`\r\n\r\nThe 'ResolveAppHosts' step of the 'ResolveFrameworkReferences' target should have a similar mechanism.\r\n","Url":"https://github.com/dotnet/sdk/issues/3104","RelatedDescription":"Closed issue \"Allow for the disablement of ResolveAppHosts\" (#3104)"},{"Id":"431235557","IsPullRequest":false,"CreatedAt":"2019-04-09T23:14:53","Actor":"nguerrera","Number":"3110","RawContent":null,"Title":"Resolve runtime pack assets for crossgen even if app is framework-dependent","State":"open","Body":"Crossgen operates on implementation assemblies only, even when passed as references to the compiler. To crossgen a framework-dependent app, we need all of the framework implementation assemblies to be passed to crossgen as references.\r\n\r\nNote that crossgen requires picking a RID. The app can be framework-dependent, but it must be RID specific. (Crossgen generates native code, which can't be rid-agnostic, obviously.) We are guaranteed to have downloaded the runtime packs, we just need to resolve the framework assemblies from it as though the app was self-contained, but without putting them in deps.json or copying them, etc.\r\n\r\nToday, crossgen tasks can find the base shared framework implementation assemblies next to it (it ships in the base runtime pack), but this doesn't work for the other frameworks like WindowsDesktop or ASP.NET. This also can't just blindly aggregate all the files in all the runtime packs, this list needs to account for conflict resolution (WindowsBase in WindowsDesktop wins over WindowsBase in NETCoreApp), etc.","Url":"https://github.com/dotnet/sdk/issues/3110","RelatedDescription":"Open issue \"Resolve runtime pack assets for crossgen even if app is framework-dependent\" (#3110)"},{"Id":"431234100","IsPullRequest":false,"CreatedAt":"2019-04-09T23:08:44","Actor":"nguerrera","Number":"3109","RawContent":null,"Title":"Gather appropriate list of managed runtime assemblies for crossen and (eventually) linker","State":"open","Body":"Today, crossgen (new ReadyToRun feature) operates over all files to publish and filters out what is not IL. We have decided that the compilation set should be restricted by default to the set of files that we deem are runtime managed assets and designate as such in the .deps.json.\r\n\r\nAs of now, there isn't an exact match for this list that is readily available. _ResolvedCopyLocalPublishAssets + IntermediateAssembly is close.\r\n\r\nI suspect that with #3080, this will be easier to do, but I didn't review in detail yet.\r\n\r\nWe will want to use the same set of runtime assemblies as candidates for the linker as crossgen. This is high priority as we are hoping to have both linker and crossgen feature-complete for Preview 5.","Url":"https://github.com/dotnet/sdk/issues/3109","RelatedDescription":"Open issue \"Gather appropriate list of managed runtime assemblies for crossen and (eventually) linker\" (#3109)"},{"Id":"431167464","IsPullRequest":true,"CreatedAt":"2019-04-09T20:08:25","Actor":"dsplaisted","Number":"3108","RawContent":null,"Title":"Fix conflicts between multiple uses of _PackageReferenceToAdd","State":"open","Body":"Fixes #3027","Url":"https://github.com/dotnet/sdk/pull/3108","RelatedDescription":"Open PR \"Fix conflicts between multiple uses of _PackageReferenceToAdd\" (#3108)"},{"Id":"431068288","IsPullRequest":true,"CreatedAt":"2019-04-09T16:45:13","Actor":"nugetlurker","Number":"3106","RawContent":null,"Title":"Insert NuGet Build 5.1.0-preview2.5951 into sdk","State":"open","Body":"Insert NuGet Build 5.1.0-preview2.5951 into sdk release/2.1.7xx branch","Url":"https://github.com/dotnet/sdk/pull/3106","RelatedDescription":"Open PR \"Insert NuGet Build 5.1.0-preview2.5951 into sdk\" (#3106)"},{"Id":"431068261","IsPullRequest":true,"CreatedAt":"2019-04-09T16:45:10","Actor":"nugetlurker","Number":"3105","RawContent":null,"Title":"Insert NuGet Build 5.1.0-preview2.5951 into sdk","State":"open","Body":"Insert NuGet Build 5.1.0-preview2.5951 into sdk release/2.2.3xx branch","Url":"https://github.com/dotnet/sdk/pull/3105","RelatedDescription":"Open PR \"Insert NuGet Build 5.1.0-preview2.5951 into sdk\" (#3105)"},{"Id":"430812433","IsPullRequest":false,"CreatedAt":"2019-04-09T07:35:55","Actor":"yyjdelete","Number":"3103","RawContent":null,"Title":"Reference transitive not working well when app and libs has different targetFramework, and lib use an transitive reference from special targetFramework of an multi-targetFramework PackageReference/ProjectReference","State":"open","Body":"Sdk Version: `3.0.100-preview3-010431`, `2.1.504`\r\nRun `ConsoleApp5` in https://github.com/yyjdelete/test_dotnet_indirect_dependency\r\nAnd see an `MissingMethodException` and an `FileNotFoundException` for `System.Data.SqlClient, Version=4.5.0.0`\r\n\r\nThis can also happen with `PackageReference`. I reference Dapper from an ClassLibrary with netstandard2.0, and the main App is net472, and failed to found `System.Data.SqlClient, Version=4.5.0.0`.\r\n\r\nProject struct:\r\n```\r\nConsoleApp5(net472)\r\n|--ClassLibrary1(netstandard2.0)\r\n---|--ClassLibrary2(netstandard2.0;net472)\r\n------|--System.Data.SqlClient(when netstandard2.0)\r\n```\r\n\r\nExpected:\r\nThe `FileNotFoundException` not happen and the `System.Data.SqlClient, Version=4.5.0.0` is include in the output bins.\r\nThe below behavior may be not expected, but it's the current behavior for project struct(dependencies) in VS2019. (Rider follow the actual behavior for project struct)\r\n```\r\nConsoleApp5(net472)\r\n|--ClassLibrary1(netstandard2.0)\r\n---|--ClassLibrary2(netstandard2.0)\r\n------|--System.Data.SqlClient(netstandard2.0)\r\n```\r\n\r\nActual:\r\n```\r\nConsoleApp5(net472)\r\n|--ClassLibrary1(netstandard2.0)\r\n---|--System.Data.SqlClient(missing from the output of ConsoleApp5)\r\n---|--ClassLibrary2(net472)\r\n```","Url":"https://github.com/dotnet/sdk/issues/3103","RelatedDescription":"Open issue \"Reference transitive not working well when app and libs has different targetFramework, and lib use an transitive reference from special targetFramework of an multi-targetFramework PackageReference/ProjectReference\" (#3103)"},{"Id":"430708424","IsPullRequest":true,"CreatedAt":"2019-04-09T02:30:22","Actor":"dotnet-bot","Number":"3101","RawContent":null,"Title":"Merge release/3.0.1xx to master","State":"closed","Body":"\nThis is an automatically generated pull request from release/3.0.1xx into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/3.0.1xx-to-master\ngit reset --hard upstream/master\ngit merge upstream/release/3.0.1xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/3.0.1xx-to-master --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/3101","RelatedDescription":"Closed or merged PR \"Merge release/3.0.1xx to master\" (#3101)"},{"Id":"430708743","IsPullRequest":true,"CreatedAt":"2019-04-09T00:03:03","Actor":"dsplaisted","Number":"3102","RawContent":null,"Title":"Don't include base FrameworkReferences when creating NuGet packages","State":"open","Body":"Per [comment](https://github.com/aspnet/AspNetCore/pull/9033#issuecomment-481043113) from @nkolev92:\r\n\r\n> I think regardless of whether it gets reverted or not, the SDK should set \"pack=false\" to Microsoft.NETCore.App.","Url":"https://github.com/dotnet/sdk/pull/3102","RelatedDescription":"Open PR \"Don't include base FrameworkReferences when creating NuGet packages\" (#3102)"},{"Id":"430672111","IsPullRequest":true,"CreatedAt":"2019-04-08T21:42:47","Actor":"dsplaisted","Number":"3100","RawContent":null,"Title":"Look for platform manifest using convention currently used by ASP.NET targeting pack","State":"open","Body":"Fix https://github.com/aspnet/AspNetCore/issues/8836","Url":"https://github.com/dotnet/sdk/pull/3100","RelatedDescription":"Open PR \"Look for platform manifest using convention currently used by ASP.NET targeting pack\" (#3100)"},{"Id":"430095086","IsPullRequest":true,"CreatedAt":"2019-04-08T21:19:38","Actor":"AaronRobinsonMSFT","Number":"3093","RawContent":null,"Title":"Fix various issues in generated RegFree COM manifest","State":"closed","Body":"Fixes #3091 \r\n\r\ncc @jkoritzinsky ","Url":"https://github.com/dotnet/sdk/pull/3093","RelatedDescription":"Closed or merged PR \"Fix various issues in generated RegFree COM manifest\" (#3093)"},{"Id":"430093170","IsPullRequest":false,"CreatedAt":"2019-04-08T21:19:38","Actor":"AaronRobinsonMSFT","Number":"3091","RawContent":null,"Title":"Issues with RegFree COM manifest","State":"closed","Body":"The attribute in the `assembly` node is misspelled - should be `manifestVersion`.\r\n\r\nhttps://github.com/dotnet/sdk/blob/afae0615d5cbb16c058c5ce1fd65215d07df24d9/src/Tasks/Microsoft.NET.Build.Tasks/RegFreeComManifest.cs#L29\r\n\r\nThe Guid should be inserted with braces (i.e. `new XAttribute(\"clsid\", guid.ToString(\"B\"))`)\r\n\r\nhttps://github.com/dotnet/sdk/blob/afae0615d5cbb16c058c5ce1fd65215d07df24d9/src/Tasks/Microsoft.NET.Build.Tasks/RegFreeComManifest.cs#L48\r\n\r\n\r\nThe manifest file is being written with a [BOM](https://en.wikipedia.org/wiki/Byte_order_mark). This must be removed as it will cause the Windows' SxS parser to consider the manifest invalid. The code could be updated as follows:\r\n\r\n``` CSharp\r\nXDocument manifestDocument = new XDocument(new XDeclaration(\"1.0\", \"UTF-8\", \"yes\"), manifest);\r\nvar settings = new XmlWriterSettings();\r\nsettings.Encoding = new UTF8Encoding(encoderShouldEmitUTF8Identifier: false);\r\nusing (XmlWriter manifestWriter = XmlWriter.Create(comManifestPath, settings))\r\n{\r\n    manifestDocument.WriteTo(manifestWriter);\r\n}\r\n```\r\n\r\ncc @jkoritzinsky ","Url":"https://github.com/dotnet/sdk/issues/3091","RelatedDescription":"Closed issue \"Issues with RegFree COM manifest\" (#3091)"},{"Id":"430205186","IsPullRequest":true,"CreatedAt":"2019-04-08T18:34:12","Actor":"wli3","Number":"3096","RawContent":null,"Title":"Update branding to preview5","State":"closed","Body":"","Url":"https://github.com/dotnet/sdk/pull/3096","RelatedDescription":"Closed or merged PR \"Update branding to preview5\" (#3096)"},{"Id":"430201082","IsPullRequest":true,"CreatedAt":"2019-04-08T18:08:41","Actor":"wli3","Number":"3095","RawContent":null,"Title":"Merge master to release/3.0.1xx for preview4","State":"closed","Body":"","Url":"https://github.com/dotnet/sdk/pull/3095","RelatedDescription":"Closed or merged PR \"Merge master to release/3.0.1xx for preview4\" (#3095)"},{"Id":"430586465","IsPullRequest":true,"CreatedAt":"2019-04-08T18:07:54","Actor":"fadimounir","Number":"3099","RawContent":null,"Title":"Check if assembly has any IL code that needs R2R compilation","State":"open","Body":"Exclude assemblies with no IL from being added to the R2R compilation list. There are some \"reference\" assemblies that do not have the ReferenceAssemblyAttribute. Crossgenning them is like a \"nop\" and will produce an output assembly with no R2R compilation, but if the PDB generation option is enabled, crossgen will now fail if the input \"R2R\" assembly does not contain any R2R compiled code.","Url":"https://github.com/dotnet/sdk/pull/3099","RelatedDescription":"Open PR \"Check if assembly has any IL code that needs R2R compilation\" (#3099)"},{"Id":"430585010","IsPullRequest":false,"CreatedAt":"2019-04-08T18:03:53","Actor":"dsplaisted","Number":"3098","RawContent":null,"Title":"Remove old deps file generation logic","State":"open","Body":"In #3086, we are refactoring the deps file generation logic.  For now, we are leaving both the old and the new logic in, and by default comparing the results of the two methods in order to ensure that the new logic produces the same results.\r\n\r\nAfter we've shipped a few previews like this, we should remove the old logic and entirely switch over to the new logic.","Url":"https://github.com/dotnet/sdk/issues/3098","RelatedDescription":"Open issue \"Remove old deps file generation logic\" (#3098)"},{"Id":"429873264","IsPullRequest":true,"CreatedAt":"2019-04-08T17:55:47","Actor":"jkoritzinsky","Number":"3087","RawContent":null,"Title":"Convert ComHost tasks to use System.Text.Json instead of Newtonsoft.Json","State":"closed","Body":"Fixes #3081 \r\n\r\ncc: @nguerrera @wli3","Url":"https://github.com/dotnet/sdk/pull/3087","RelatedDescription":"Closed or merged PR \"Convert ComHost tasks to use System.Text.Json instead of Newtonsoft.Json\" (#3087)"},{"Id":"430411957","IsPullRequest":true,"CreatedAt":"2019-04-08T12:03:57","Actor":"dotnet-maestro[bot]","Number":"3097","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190407.1\r\n- **Date Produced**: 4/7/2019 12:56 PM\r\n- **Commit**: b1f9e12fe3ee71c48ea60b15968745850ac0a4a7\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19207.1\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19207.1\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190409.1\r\n- **Date Produced**: 4/9/2019 8:35 AM\r\n- **Commit**: 9d7e665ecf2606094677524ecd5af0fc39c7bb49\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19209.1\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19209.1\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190409.2\r\n- **Date Produced**: 4/9/2019 12:54 PM\r\n- **Commit**: 63b76f3f952f821d0a7996427a9f3534f1c25ab7\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19209.2\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19209.2\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3097","RelatedDescription":"Open PR \"[master] Update dependencies from dotnet/arcade\" (#3097)"},{"Id":"430137301","IsPullRequest":true,"CreatedAt":"2019-04-07T14:24:38","Actor":"dotnet-maestro[bot]","Number":"3094","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190406.5\r\n- **Date Produced**: 4/6/2019 5:35 PM\r\n- **Commit**: 9d8abf998866f10bc19d97e1916ff1c0ada3fd42\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19206.5\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19206.5\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3094","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#3094)"},{"Id":"430094852","IsPullRequest":true,"CreatedAt":"2019-04-07T01:47:54","Actor":"AaronRobinsonMSFT","Number":"3092","RawContent":null,"Title":"Fix various issues in generated RegFree COM manifest","State":"closed","Body":"Fixes #3091 \r\n\r\ncc @jkoritzinsky ","Url":"https://github.com/dotnet/sdk/pull/3092","RelatedDescription":"Closed or merged PR \"Fix various issues in generated RegFree COM manifest\" (#3092)"},{"Id":"430085240","IsPullRequest":true,"CreatedAt":"2019-04-07T01:30:09","Actor":"dotnet-bot","Number":"3090","RawContent":null,"Title":"Merge release/3.0.1xx to master","State":"closed","Body":"\nThis is an automatically generated pull request from release/3.0.1xx into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/3.0.1xx-to-master\ngit reset --hard upstream/master\ngit merge upstream/release/3.0.1xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/3.0.1xx-to-master --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/3090","RelatedDescription":"Closed or merged PR \"Merge release/3.0.1xx to master\" (#3090)"},{"Id":"430027178","IsPullRequest":true,"CreatedAt":"2019-04-06T14:34:37","Actor":"dotnet-maestro[bot]","Number":"3089","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190405.6\r\n- **Date Produced**: 4/5/2019 11:26 PM\r\n- **Commit**: 4217db4a23ffd15abb3771d635b66162994fb9e4\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19205.6\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19205.6\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3089","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#3089)"},{"Id":"430027015","IsPullRequest":true,"CreatedAt":"2019-04-06T14:00:07","Actor":"dotnet-bot","Number":"3088","RawContent":null,"Title":"Merge release/2.2.2xx to release/3.0.1xx","State":"closed","Body":"\nThis is an automatically generated pull request from release/2.2.2xx into release/3.0.1xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.2.2xx-to-release/3.0.1xx\ngit reset --hard upstream/release/3.0.1xx\ngit merge upstream/release/2.2.2xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.2.2xx-to-release/3.0.1xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/3088","RelatedDescription":"Closed or merged PR \"Merge release/2.2.2xx to release/3.0.1xx\" (#3088)"},{"Id":"429720784","IsPullRequest":true,"CreatedAt":"2019-04-05T23:03:24","Actor":"dotnet-maestro[bot]","Number":"3084","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190404.16\r\n- **Date Produced**: 4/5/2019 3:36 AM\r\n- **Commit**: 61196044ed70a65c610beb230ac6ea77566668c2\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19204.16\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19204.16\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3084","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#3084)"},{"Id":"429720942","IsPullRequest":true,"CreatedAt":"2019-04-05T16:00:20","Actor":"dotnet-bot","Number":"3085","RawContent":null,"Title":"Merge release/3.0.1xx to master","State":"closed","Body":"\nThis is an automatically generated pull request from release/3.0.1xx into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/3.0.1xx-to-master\ngit reset --hard upstream/master\ngit merge upstream/release/3.0.1xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/3.0.1xx-to-master --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/3085","RelatedDescription":"Closed or merged PR \"Merge release/3.0.1xx to master\" (#3085)"},{"Id":"429531681","IsPullRequest":true,"CreatedAt":"2019-04-05T04:00:10","Actor":"dotnet-bot","Number":"3083","RawContent":null,"Title":"Merge release/3.0.1xx to master","State":"closed","Body":"\nThis is an automatically generated pull request from release/3.0.1xx into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/3.0.1xx-to-master\ngit reset --hard upstream/master\ngit merge upstream/release/3.0.1xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/3.0.1xx-to-master --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/3083","RelatedDescription":"Closed or merged PR \"Merge release/3.0.1xx to master\" (#3083)"},{"Id":"429531671","IsPullRequest":true,"CreatedAt":"2019-04-05T02:30:10","Actor":"dotnet-bot","Number":"3082","RawContent":null,"Title":"Merge release/2.2.2xx to release/3.0.1xx","State":"closed","Body":"\nThis is an automatically generated pull request from release/2.2.2xx into release/3.0.1xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.2.2xx-to-release/3.0.1xx\ngit reset --hard upstream/release/3.0.1xx\ngit merge upstream/release/2.2.2xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.2.2xx-to-release/3.0.1xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/3082","RelatedDescription":"Closed or merged PR \"Merge release/2.2.2xx to release/3.0.1xx\" (#3082)"}],"ResultType":"GitHubIssue"},"Announcements-Issues":{"Issues":[{"Id":"431012407","IsPullRequest":false,"CreatedAt":"2019-04-09T14:51:18","Actor":"MichaelSimons","Number":"106","RawContent":null,"Title":".NET Core SDK container images now contain the Visual Studio 2019 toolset","State":"open","Body":"# .NET Core SDK container images now contain the Visual Studio 2019 toolset\r\n\r\n.NET Core SDK container images now include Visual Studio 2019 tools. For most scenarios, this change will not be observable, however, there may be some breaks that will be documented in this issue. We did not add *additional* tools to the SDK, but updated existing tools to match the same tools in Visual Studio 2019. Previously, the tools in SDK matched the same tools in Visual Studio 2017.\r\n\r\nWe will only produce .NET Core SDK images that include Visual Studio 2019 tools. We will not produce another set of .NET Core SDK images that includes Visual Studio 2017 tools. There is a strong goal that the tools remain compatible over releases.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #1042](https://github.com/dotnet/dotnet-docker/issues/1042)\r\n\r\n## Details\r\n\r\n[Visual Studio 2019](https://devblogs.microsoft.com/visualstudio/visual-studio-2019-code-faster-work-smarter-create-the-future/) was released on April 2, 2019. We updated the .NET Core SDK container images, on the same day, to include a new version of the .NET Core SDK that contains tools that match the same tools in Visual Studio 2019.\r\n\r\nThese tools include:\r\n\r\n* MSBuild\r\n* NuGet\r\n* C# compiler\r\n* F# compiler\r\n* VB compiler\r\n* VS Test\r\n\r\nIf you encounter a breaking change or other issues and need to quickly unblock yourself, you can reference the previous version of the image by using its full version tag:\r\n\r\n* 2.1: `mcr.microsoft.com/dotnet/core/sdk:2.1.505`\r\n* 2.2: `mcr.microsoft.com/dotnet/core/sdk:2.2.105`\r\n\r\nDetails:\r\n\r\n* [dotnet/dotnet-docker #1029](https://github.com/dotnet/dotnet-docker/pull/1029)\r\n* [2.1 SDK release notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.602-SDK/2.1.602-SDK.md)\r\n* [2.2 SDK release notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.202-SDK/2.2.202-SDK.md)\r\n\r\n## Known Breaking Changes for SDK images (VS 2017 to VS 2019 upgrade)\r\n\r\nThe following issues and breaks have been discovered.\r\n \r\n### Test Log File Name Change\r\n\r\nA change was introduced to the `dotnet test` command when a user-defined log file name is specified.  In the previous version the resulting log file would be named exactly as specified.  In the current version, the log file is named with a timestamp suffix automatically added to the user-defined name.  \r\n\r\nDetails:\r\n* [Microsoft/vstest #1603](https://github.com/Microsoft/vstest/issues/1603) \r\n* [Microsoft/vstest#1876](https://github.com/Microsoft/vstest/issues/1876)","Url":"https://github.com/dotnet/announcements/issues/106","RelatedDescription":"Open issue \".NET Core SDK container images now contain the Visual Studio 2019 toolset\" (#106)"},{"Id":"431003701","IsPullRequest":false,"CreatedAt":"2019-04-09T14:35:39","Actor":"MichaelSimons","Number":"105","RawContent":null,"Title":"Windows Server, version 1709 no longer Supported by .NET Framework","State":"open","Body":"# Windows Server, version 1709 no longer Supported by .NET Framework\r\n\r\nWindows Server, version 1709 is no longer supported. As a result, this version of Windows is no longer supported by the .NET Team and we will no longer produce .NET Framework container images for those Windows versions.\r\n\r\nSupport statements:\r\n\r\n* [Currently supported .NET Framework Docker images](https://hub.docker.com/_/microsoft-dotnet-framework)\r\n* [.NET Framework Support Policy](https://dotnet.microsoft.com/platform/support/policy/dotnet-framework)\r\n* [Products Reaching End of Support for 2019](https://support.microsoft.com/en-us/help/4316957/products-reaching-end-of-support-for-2019)\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-framework-docker #259](https://github.com/Microsoft/dotnet-framework-docker/issues/259)\r\n\r\n## Details\r\n\r\nDocker tags that contain `windowsservercore-1709` are no longer be produced. We will not delete existing images or those tags, however, they contain unsupported builds of Windows Server and .NET Framework.\r\n\r\n## Pulling manifest tags\r\n\r\nThese changes also affect manifest tags (AKA “multi-arch tags“), such as `4.7.1`, and  `4.7.2`. These are tags that are supported on multiple operating systems and versions, and do  not contain the operating system in them. As a result of no longer producing new images for Windows Server, version 1709, manifest tags no longer include entries for Windows 10, version 1709, and Windows Server,version 1709. That means that .NET Core manifest tags are no longer usable on those Windows versions.\r\n\r\nIf you pull a manifest tag on one of the Windows versions described, you may get one of the following error messages:\r\n\r\n* `a Windows version 10.0.17134-based image is incompatible with a 10.0.16299 host`\r\n* `no matching manifest for windows/amd64 in the manifest list entries`\r\n* `no matching manifest for unknown in the manifest list entries`\r\n\r\nIf you need to still use Windows Server, version 1709 images (even though they are no longer supported), you will need to use tags that include the Windows Server version (these are non-manifest tags), for example `mcr.microsoft.com/dotnet/framework/runtime:4.7.2-windowsservercore-1709` or `mcr.microsoft.com/dotnet/framework/sdk:4.7.2-windowsservercore-1709`.","Url":"https://github.com/dotnet/announcements/issues/105","RelatedDescription":"Open issue \"Windows Server, version 1709 no longer Supported by .NET Framework\" (#105)"},{"Id":"430998341","IsPullRequest":false,"CreatedAt":"2019-04-09T14:25:57","Actor":"MichaelSimons","Number":"104","RawContent":null,"Title":"Nano Server 2016 and 1709 no longer Supported by .NET Core","State":"open","Body":"# Nano Server 2016 and 1709 no longer Supported by .NET Core\r\n\r\nNano Server 2016 and Nano Server, version 1709 are no longer supported. As a result, these versions of Windows are no longer supported by the .NET Team and we will no longer produce .NET Core container images for those Windows versions.\r\n\r\nSupport statements:\r\n\r\n* [Currently supported .NET Core Docker images](https://hub.docker.com/_/microsoft-dotnet-core)\r\n* [.NET Core Support Policy](https://dotnet.microsoft.com/platform/support/policy/dotnet-core)\r\n* [Products Reaching End of Support for 2018](https://support.microsoft.com/en-us/help/4043450/products-reaching-end-of-support-for-2018)\r\n* [Products Reaching End of Support for 2019](https://support.microsoft.com/en-us/help/4316957/products-reaching-end-of-support-for-2019)\r\n\r\nWe previously announced Nano Server 2016 going out of support in [.NET Core Container Images now Published to Microsoft Container Registry](https://devblogs.microsoft.com/dotnet/net-core-container-images-now-published-to-microsoft-container-registry/). That post is still accurate.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #1041](https://github.com/dotnet/dotnet-docker/issues/1041)\r\n\r\n## Details\r\n\r\nDocker tags that contain `nanoserver-sac2016` and `nanoserver-1709` are no longer be produced. We will not delete existing images or those tags, however, they contain unsupported builds of Nano Server and .NET Core.\r\n\r\n## Pulling manifest tags\r\n\r\nThese changes also affect manifest tags (AKA “multi-arch tags“), such as `2.1`, `2.1-sdk`, `2.2.1-runtime`. These are tags that are supported on multiple operating systems, and do not contain the operating system in them. As a result of no longer producing new images for Nano Server 2016 and Nano Server, version 1709, manifest tags no longer include entries for Nano Server 2016, Windows Server 2016, Windows 10, version 1607, Windows 10, version 1709, and Windows Server, version 1709. That means that .NET Core manifest tags are no longer usable on those Windows versions.\r\n\r\nIf you pull a manifest tag on one of the Windows versions described, you may get one of the following error messages:\r\n\r\n* `a Windows version 10.0.16299-based image is incompatible with a 10.0.14393 host`\r\n* `no matching manifest for windows/amd64 in the manifest list entries`\r\n* `no matching manifest for unknown in the manifest list entries`\r\n\r\nIf you need to still use Nano Server 2016 or Nano Server, version 1709 images (even though they are no longer supported), you will need to use tags that include the Nano Server version (these are non-manifest tags), for example `mcr.microsoft.com/dotnet/core/runtime:2.1-nanoserver-sac2016` or `mcr.microsoft.com/dotnet/core/runtime:2.1-nanoserver-1709`.\r\n\r\n### Nano Server Support\r\n\r\n.NET Core is supported on Nano Server, version 1803 and later. \r\n\r\n.NET Core 2.x and 3.0 images are available for all supported versions of Nano Server, version 1803 and later. This means that 2.x and 3.0 manifest tags can be used on Windows 10, version 1803+, and Windows Server, version 1803+. You can also use non-manifest tags for those versions, too, such as `2.2-nanoserver-1809`.\r\n\r\n.NET Core 1.x images are available for Nano Server, version 1809 and later. This means that 1.x manifest tags can be used on Windows 10, version 1809+, Windows Server, version 1809+ and Windows Server 2019. You can also use non-manifest tags for those versions, too, such as `1.1-nanoserver-1809` tag.","Url":"https://github.com/dotnet/announcements/issues/104","RelatedDescription":"Open issue \"Nano Server 2016 and 1709 no longer Supported by .NET Core\" (#104)"},{"Id":"420117627","IsPullRequest":false,"CreatedAt":"2019-03-12T17:35:16","Actor":"vivmishra","Number":"103","RawContent":null,"Title":"March 2019 .NET Updates","State":"open","Body":"# March 2019 .NET Updates\r\n\r\nThe following .NET updates were released in March 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n* [.NET Framework March 2019 Update - March 19, 2019](https://devblogs.microsoft.com/dotnet/net-framework-march-2019-update/)\r\n* [.NET Framework April 2, 2019 Cumulative Update for Windows 10 version 1809 and Windows Server 2019 - April 2, 2019](https://devblogs.microsoft.com/dotnet/net-framework-april-2-2019-cumulative-update-for-windows-10-version-1809-and-windows-server-2019/)\r\n\r\n\r\n## .NET Core\r\n\r\n* .NET Core 1.0.15 and .NET Core SDK 1.1.13 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.0/1.0.15/1.0.15.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/1.0) )\r\n\r\n* .NET Core 1.1.12 and .NET Core SDK 1.1.13 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.1/1.1.12/1.1.12.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/1.1) )\r\n\r\n* .NET Core 2.1.9 and .NET Core SDK 2.1.505 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.9/2.1.9.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.1) )\r\n\r\n* .NET Core 2.2.3 and .NET Core SDK 2.2.105 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.3/2.2.3.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.2) )\r\n\r\nA discussion issue is available at [core/2432](https://github.com/dotnet/core/issues/2432)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/103","RelatedDescription":"Open issue \"March 2019 .NET Updates\" (#103)"},{"Id":"415363751","IsPullRequest":false,"CreatedAt":"2019-02-27T22:49:51","Actor":"leecow","Number":"102","RawContent":null,"Title":"SDK Installers will remove previous patch versions","State":"open","Body":"The SDK Installers for Windows will upgrade patch versions in place within the same feature band. This will reduce the number of SDKs that are installed on programmer machines.\r\n\r\nFeature bands of the SDK are defined like 3.0.1nn. [Find out more about SDK version numbers](https://docs.microsoft.com/dotnet/core/versions/#versioning-details).\r\n\r\nThis means when .NET Core SDK 3.0.101 becomes available and is installed, .NET Core SDK 3.0.100 will be removed from the machine if it exists. When .NET Core SDK 3.0.200 becomes available and is installed on the same machine, .NET Core SDK versions like 3.0.101 will not be removed but stay side by side with 3.0.200.\r\n\r\nThis approach supports use of `global.json` which will roll forward across patch versions, but not feature bands of the SDK. Thus, upgrading via the SDK installer will not result in errors due to a missing SDK. Feature bands also align with side by side Visual Studio installations for those users that install SDKs for Visual Studio use. For example, Visual Studio 15.9 uses .NET Core SDK 2.2.500 but does not support .NET Core SDK 2.2.600.\r\n\r\nFind out how to [remove other .NET Core SDK versions here.](https://docs.microsoft.com/dotnet/core/versions/remove-runtime-sdk-versions).","Url":"https://github.com/dotnet/announcements/issues/102","RelatedDescription":"Open issue \"SDK Installers will remove previous patch versions\" (#102)"},{"Id":"410971363","IsPullRequest":false,"CreatedAt":"2019-02-15T22:24:40","Actor":"richlander","Number":"101","RawContent":null,"Title":"Publishing .NET Core images to Microsoft Container Registry (MCR)","State":"open","Body":"# Publishing .NET Core images to Microsoft Container Registry (MCR)\r\n\r\nMicrosoft teams are now publishing container images to the [Microsoft Container Registry](https://azure.microsoft.com/en-us/blog/microsoft-syndicates-container-catalog/). There are two primary reasons for this change:\r\n\r\n* Syndicate Microsoft-provided container images to multiple registries, like Docker Hub and Red Hat.\r\n* Use Microsoft Azure as a global CDN for delivering Microsoft-provided container images.\r\n\r\nYou will use and see MCR as a storage back-end for Microsoft images. The primary way you learn about Microsoft container images and tags will be through a registry, which for most users will continue to be Docker Hub. Most of the experience you've had browsing for .NET Core container images will continue unchanged with this new model. The Docker Hub URLs you've used for Microsoft repos will continue to work, and forward to updated locations on Docker Hub. Existing Docker Hub will images will be maintained as-is.\r\n\r\nSee [.NET Core Container Images now Published to Microsoft Container Registry](https://devblogs.microsoft.com/dotnet/net-core-container-images-now-published-to-microsoft-container-registry/) for the most updated information on our use of MCR.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #935](https://github.com/dotnet/dotnet-docker/issues/935)\r\n\r\n## Starting with .NET Core nightly repo\r\n\r\nOn the .NET team, we started our [transition to MCR](https://github.com/dotnet/dotnet-docker/issues/745) with the .NET Core \"nightly\" repo. [dotnet-nightly](dockerhub.com/r/microsoft/dotnet-nightly) is now hosted on MCR and syndicated to Docker Hub. We started with the nightly repo in order to discover and fix any challenges we found with this new model before we move our higher-traffic primary container repository.\r\n\r\nWe will start publishing [dotnet](dockerhub.com/r/microsoft/dotnet) to MCR a bit later, in either February or March. This issue will be updated when that happens.\r\n\r\n## Repo Split\r\n\r\nThe [.NET Core repo](https://hub.docker.com/r/microsoft/dotnet) currently includes 4 major categories of tags: \r\n\r\n* `sdk`\r\n* `aspnetcore-runtime`\r\n* `runtime` \r\n* `runtime-deps`\r\n\r\nProviding all of the tags in one place has helped with discoverability but made for a repo with an enormous README that can be challenging to navigate and consume. It is large enough that we exceeded Docker Hub README limits and had to artificially make it smaller.\r\n\r\nGoing forward, we will provide a repo for each of the tag categories listed above. We'll also provide a \"product repo\" that will hierarchicaly group all of our repos together. This will satisfy discoverability needs so that it will be easy to find the tags you want.\r\n\r\nYou can already see this experience with [microsoft-dotnet-core-nightly](https://hub.docker.com/_/microsoft-dotnet-core-nightly). There are now multiple repos for our nightly builds:\r\n\r\n* [.NET Core Nightly product repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly)\r\n* [.NET Core SDK Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-sdk/)\r\n* [.NET Core ASP.NET Core Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-aspnet/)\r\n* [.NET Core Runtime Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-runtime/)\r\n* [.NET Core Runtime-deps Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-runtime-deps/)\r\n\r\nThe same split will exist for the non-nightly stable repo (currently hosted at  [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet)) when we start publishing it to MCR and syndicating it back to DockerHub.\r\n\r\n## Changes to registry URL\r\n\r\nThe biggest change is that your Dockerfiles need to be updated to point to the MCR registry in order get access to new .NET Core container tags. The same change is required for scripts or human operations that pull images via `docker pull`.\r\n\r\nThe following example shows the registry path, repo and tag for the .NET Core 2.2 \"Nightly\" SDK on MCR:\r\n\r\n```console\r\nmcr.microsoft.com/dotnet/core-nightly/sdk:2.2\r\n```\r\n\r\nAs comparison, the following repo and tag have been used to date for the .NET Core 2.2 \"Nightly\" SDK on Docker Hub:\r\n\r\n```console\r\nmicrosoft/dotnet-nightly:2.2-sdk\r\n```\r\n\r\nThe new repo URL is provided at each of the news repos. For example, the new .NET Core SDK \"nightly\" repo provides a box on the right where you can copy and paste the correct MCR-based repo syntax that you can use for `docker pull` or in `FROM` statements in your Dockerfiles.\r\n\r\n![image](https://user-images.githubusercontent.com/2608468/52811702-95c5eb80-304a-11e9-8de8-e6ea1f4b4d75.png)\r\n\r\n## Servicing existing Docker Hub tags\r\n\r\nWe will continue to service existing non-version-specific or floating tags on Docker Hub while the associated .NET Core version is supported. For example the `microsoft/dotnet:2.1-sdk` tag is a floating tag that will continue to be serviced for the lifetime of .NET Core 2.1. You can continue using floating tags without issue.\r\n\r\nIf you use non-floating tags, like `microsoft/dotnet:2.1.504-sdk-alpine`, then you will need to update your Dockerfile to use a new non-floating tag. No new non-floating tags will be published to `microsoft/dotnet` and `microsoft/dotnet-nightly` after we fully transition to MCR.\r\n\r\n.NET Core 3.0 Preview 3 and later will only be made available on MCR.\r\n\r\n## Microsoft is a Verified Publisher\r\n\r\nUntil now, Microsoft-provided container images were considered \"community images\". As part of this change, we are re-classifying Microsoft as a \"verified publisher\" on Docker Hub. This designation should make it clearer that .NET and other Microsoft-provided images are coming from a verified source. There clearly was that expectation previously, but Docker is now making that clearer in the Docker Hub pages they host for Microsoft.\r\n\r\nWe will provide official vulnerability scanning Microsoft-provided images as a second phase of this transition.","Url":"https://github.com/dotnet/announcements/issues/101","RelatedDescription":"Open issue \"Publishing .NET Core images to Microsoft Container Registry (MCR)\" (#101)"},{"Id":"410784442","IsPullRequest":false,"CreatedAt":"2019-02-15T14:06:29","Actor":"TaraOverfield","Number":"100","RawContent":null,"Title":"RESOLVED: Advisory on February 2019 Security update for Windows 10 update 1809","State":"open","Body":"<strong><em>Final Update 2/19/19 @1:30 PM (PST)</em></strong><em>: This </em><em>advisory is now resolved with no action needed from Microsoft Customers. The issue was not applicable to any valid or supported configuration. There is no consequence for .NET 4.8 Preview customers. </em>\r\n\r\n<em>We strive to share timely information to protect our customer’s productivity, in this case, our finding was thankfully of no consequence for customers on supported configurations.</em>\r\n\r\n<del><em><strong>Update 2/15/19 @3:35 PM (PST)</strong></em><em>: As we continue our investigation, we are finding the issue to be restricted to a limited and isolated set of test-only systems that are using non-official versions of the .NET 4.8 Preview. As of 2/15/19 around 12:00 pm (PST) we further tightened our delivery mechanisms to ensure that the February .NET security updates are only deployed to their expected target systems.</em></del>\r\n\r\n<del><span>The </span><a href=\"https://blogs.msdn.microsoft.com/dotnet/2019/02/13/net-framework-february-2019-security-and-quality-rollup/\" rel=\"nofollow\">February 2019 Security and Quality Rollup for Windows 10 update 1809</a><span> was released earlier this week. We have received multiple customer reports of issues when a customer has installed .NET Framework 4.8 Preview then installed the February security update, <a href=\"https://support.microsoft.com/kb/4483452\" rel=\"nofollow\">4483452</a>.</span> These reports are specific to only to the scenario when a customer has installed both .NET Framework 4.8 Preview and the February security update.</del>\r\n\r\n<del>We are actively working on investigating and addressing this issue. If you installed the February 2019 security update and have not seen any negative behavior, we recommend that you leave your system as-is but closely monitor it and ensure that you apply upcoming .NET Framework updates.</del>\r\n\r\n<del>We will continue to update this <a href=\"https://github.com/dotnet/announcements/issues/100\" rel=\"nofollow\">post</a> as we have new information.</del>\r\n<h2><del>Guidance</del></h2>\r\n<del>We are working on guidance and will update this post and as we have new information.</del>\r\n<h2><del>Workaround</del></h2>\r\n<del>There are no known workarounds at this time.</del>\r\n<h2><del>Symptoms</del></h2>\r\n<del>After installing .NET Framework 4.8 Preview then the February 2019 security update, <a href=\"https://support.microsoft.com/kb/4483452\" rel=\"nofollow\">4483452</a>, Visual Studios will crash with this error message:</del>\r\n<p class=\"xxxxxmsonormal\"><del><b><span style=\"font-size: 10.5pt;font-family: 'Segoe UI',sans-serif;color: black\">\"Exception has been thrown by the target of an invocation.\"</span></b></del></p>","Url":"https://github.com/dotnet/announcements/issues/100","RelatedDescription":"Open issue \"RESOLVED: Advisory on February 2019 Security update for Windows 10 update 1809\" (#100)"},{"Id":"410455095","IsPullRequest":false,"CreatedAt":"2019-02-14T19:28:25","Actor":"richlander","Number":"99","RawContent":null,"Title":"Supporting new Alpine versions (for containers)","State":"open","Body":"# Supporting new Alpine versions (for containers)\r\n\r\n[Alpine 3.9](https://twitter.com/alpinelinux/status/1090416212822110214) was recently announced. Congratulations, Alpine team! On the .NET team, we are committed to supporting new Alpine versions quickly, and also need to define a policy for older versions. This policy only applies for the container images that we publish.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #933](https://github.com/dotnet/dotnet-docker/issues/933)\r\n\r\n## Policy\r\n\r\nWe intend to establish the following policy for supporting Alpine with .NET Core container images:\r\n\r\n* Support new Alpine versions within 60 days of release (hopefully much less).\r\n* Support n-1 Alpine versions for 3 months after we support a new Alpine version.\r\n\r\nNote: The [.NET Core support policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md) may be broader. This policy is specific to the container images we produce.\r\n\r\n## Plans\r\n\r\nWe're in the process of [fixing issues required to support Alpine 3.9](https://github.com/dotnet/dotnet-docker/issues/921). We expect that these issues will be resolved in February and that we'll be able to provide support for Alpine 3.9 in March.\r\n\r\nWe will produce Alpine 3.9 images for .NET Core 2.1, 2.2 and 3.0. Assuming we publish 3.9 images in March, we'll stop producing and supporting Alpine 3.7 and 3.8 images after June (2019).\r\n\r\n## Using Alpine-based .NET Core images\r\n\r\nWe produce a variety of Alpine-based images. You can either depend on a specific Alpine version, like with `microsoft/dotnet:2.2-sdk-alpine3.8` or opt to use the latest Alpine image we have to offer, like with `microsoft/dotnet:2.2-sdk-alpine`. Either are good choices. It is just a question of whether you want to make a conscious decision to move to later Alpine releases.\r\n\r\n## Support for ARM32?\r\n\r\nWe produce Alpine images for x64 (and ARM64, shortly). The [Alpine 3.9 announcement](https://twitter.com/alpinelinux/status/1090416212822110214) made mention of support for ARM32v7. We would like to enable .NET Core [Alpine-based images on ARM32](https://github.com/gliderlabs/docker-alpine/issues/463#issuecomment-460530395). We are patiently waiting for that to happen. If that's important to you, you should comment on that thread.","Url":"https://github.com/dotnet/announcements/issues/99","RelatedDescription":"Open issue \"Supporting new Alpine versions (for containers)\" (#99)"},{"Id":"409840927","IsPullRequest":false,"CreatedAt":"2019-02-13T14:48:21","Actor":"TaraOverfield","Number":"98","RawContent":null,"Title":"February 2019 .NET Updates","State":"open","Body":"# February 2019 .NET Updates\r\nThe following .NET updates were released in February 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n* [.NET Framework February 2019 Security and Quality Rollup - February 12, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/02/13/net-framework-february-2019-security-and-quality-rollup/)\r\n* [.NET Framework February 2019 Preview of Quality Rollup - February 19, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/02/19/net-framework-february-2019-preview-of-quality-rollup/)\r\n\r\n## .NET Support Policies\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/98","RelatedDescription":"Open issue \"February 2019 .NET Updates\" (#98)"},{"Id":"409436643","IsPullRequest":false,"CreatedAt":"2019-02-12T18:21:22","Actor":"leecow","Number":"97","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0657: .NET Core Domain Spoofing Vulnerability","State":"open","Body":"## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 1.0, 1.1, 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a domain spoofing vulnerability in .NET Framework and .NET Core which causes the meaning of a URI to change when International Domain Name encoding is applied. An attacker who successfully exploited the vulnerability could redirect a URI.\r\n\r\nThe security update addresses the vulnerability by disallowing certain Unicode characters from the URI.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/35265\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nMicrosoft has not identified any mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core 1.0 or 1.1 based application that uses the [System.Private.Uri](https://www.nuget.org/packages/System.Private.Uri/) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.Private.Uri | 4.3.0 | 4.3.1\r\n\r\nAny .NET Core 2.1 or 2.2 based application that uses the [Microsoft.NETCore.App](https://www.nuget.org/packages/Microsoft.NETCore.App) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nMicrosoft.NETCore.App | 2.1.0, 2.1.1, 2.1.2, 2.1.3, 2.1.4, 2.1.5, 2.1.6, 2.1.7, 2.2.0, 2.2.1 | 2.1.8, 2.2.2\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n#### Applications that use Microsoft.NetCore.App\r\n\r\n`System.Private.Uri` is distributed as part of the .NET Core 2.1 runtime. To check the currently installed runtimes, open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed, you'll see output like the following;\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your host version is 2.1.x and the highest `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\nIf your host version is 2.2.x and the highest 2.1.x `Microsoft.NETCore.App` runtime version is less than 2.2.1, you're vulnerable to this issue.\r\n\r\nYou will not see SDK versions if you have only installed the runtime.\r\n\r\n#### Applications not using Microsoft.NetCore.App\r\n\r\nThe affected assembly is also available separately as a NuGet package. If you are not using Microsoft.NetCore.App, you may still be affected if you are referencing the packages listed above.\r\n\r\n##### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file. They can be fixed by [editing the project file](#fixing-direct-dependencies) or using NuGet to update the dependency.\r\n\r\n##### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects\r\n\r\nThe `project.assets.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json)).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `System.Private.Uri/4.3.0` is a reference to version 4.3.0 of `System.Private.Uri`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\n#### Updating the version of Microsoft.NETCore.App\r\n\r\nIf your host version is a 2.1.x host you must install version 2.1.8 or later of the [.NET Core 2.1 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.1), or corresponding [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\nIf your host version is a 2.2.x you must install version 2.2.2 or later of the [.NET Core 2.2 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.2), or corresponding  [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\n#### <a name=\"fixing-direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Private.Uri\" Version=\"4.3.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.Private.Uri` version 4.3.0\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.Private.Uri` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Private.Uri\" Version=\"4.3.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"transitive-dependencies\"></a>Fixing transitive dependencies\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Private.Uri\" Version=\"4.3.0\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n##### Rebuilding your application\r\n\r\nFinally, you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2019-0657](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0657)\r\n\r\n### Revisions\r\n\r\nV1.0 (February 12, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-02-08_\r\n","Url":"https://github.com/dotnet/announcements/issues/97","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0657: .NET Core Domain Spoofing Vulnerability\" (#97)"},{"Id":"397026248","IsPullRequest":false,"CreatedAt":"2019-01-08T18:17:45","Actor":"leecow","Number":"96","RawContent":null,"Title":"January 2019 .NET Updates","State":"open","Body":"# January 2019 .NET Updates\r\n\r\nThe following .NET updates were released in January 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n\r\n* [.NET Framework January 2019 Preview of Quality Rollup - January 15, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/01/15/net-framework-january-2019-preview-of-quality-rollup/)\r\n* [.NET Framework January 2019 Security and Quality Rollup - January 8, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/01/08/net-framework-january-2019-security-and-quality-rollup/)\r\n* [.NET Framework January 22, 2018 Preview of Cumulative Update for Windows 10 version 1809 and Windows Server 2019 - January 22, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/01/22/net-framework-january-22-2018-preview-of-cumulative-update-for-windows-10-version-1809-and-windows-server-2019/)\r\n\r\n## .NET Core\r\n\r\n* .NET Core 2.1.7 and .NET Core SDK 2.1.503 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.7/2.1.7.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.1) )\r\n\r\n* .NET Core 2.2.1 and .NET Core SDK 2.2.102 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.1/2.2.1.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.2) )\r\n\r\nA discussion issue is available at [core/2210](https://github.com/dotnet/core/issues/2210)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/96","RelatedDescription":"Open issue \"January 2019 .NET Updates\" (#96)"},{"Id":"397020176","IsPullRequest":false,"CreatedAt":"2019-01-08T18:00:27","Actor":"blowdart","Number":"95","RawContent":null,"Title":" Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a tampering vulnerability exists when .NET Core improperly handles specially crafted files. An attacker who successfully exploited this vulnerability could write arbitrary files and directories to certain locations on a vulnerable system. However, an attacker would have limited control over the destination of the files and directories.\r\n\r\nTo exploit the vulnerability, an attacker must send a specially crafted file to a vulnerable system\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core handles these files.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/34427\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nIf your application does not extract ZIP compressed files it is unaffected.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the [System.IO.Compression.ZipFile](https://www.nuget.org/packages/System.IO.Compression.ZipFile/) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nMicrosoft.NETCore.App (System.IO.Compression.ZipFile) | 2.1.0, 2.1.1, 2.1.2, 2.1.3, 2.1.4, 2.1.5, 2.1.6 | 2.1.7\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n`System.IO.Compression.ZipFile` is distributed as part of the .NET Core 2.1 runtime. To check the currently installed runtimes, open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed, you'll see output like the following;\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your host version is 2.1.x and the highest `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\nIf your host version is 2.2.x and the highest 2.1.x `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\n\r\nYou will not see SDK versions if you have only installed the runtime.\r\n\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nIf your host version is a 2.1.x host you must install version 2.1.7 or later of the [.NET Core 2.1 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.1), or corresponding [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\nIf your host version is a 2.2.x you must install version 2.2.1 or later of the [.NET Core 2.2 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.2), or corresponding  [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\nFinally, you must restart your applications once an updated runtime or SDK is installed.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgments\r\n\r\n[Danny Grander](https://twitter.com/grander) of [Snyk](https://snyk.io/)\r\n\r\n### External Links\r\n\r\n[CVE-2018-8416](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-8416)\r\n\r\n### Revisions\r\n\r\nV1.1 (January 9, 2019): Correct affected pacakge table.\r\nV1.0 (January 8, 2019): Advisory published.\r\n\r\n_Version 1.1_\r\n\r\n_Last Updated 2019-01-09_\r\n\r\n","Url":"https://github.com/dotnet/announcements/issues/95","RelatedDescription":"Open issue \" Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability\" (#95)"},{"Id":"397020142","IsPullRequest":false,"CreatedAt":"2019-01-08T18:00:23","Actor":"blowdart","Number":"94","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of an information disclosure vulnerability exists in .NET Framework and .NET Core which allows bypassing Cross-origin Resource Sharing (CORS) configurations. An attacker who successfully exploited the vulnerability could retrieve content, that is normally restricted, from a web application.\r\n\r\nThe security update addresses the vulnerability by enforcing CORS configuration to prevent its bypass.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/34428\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nMicrosoft has not identified any mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the [System.Net.Http](https://www.nuget.org/packages/System.Net.Http/) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nMicrosoft.NETCore.App (System.Net.Http) | 2.1.0, 2.1.1, 2.1.2, 2.1.3, 2.1.4, 2.1.5, 2.1.6 | 2.1.7\r\nMicrosoft.NETCore.App (System.Net.Http) | 2.2.0 | 2.2.1\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n#### Applications that use Microsoft.NetCore.App\r\n\r\n`System.Net.Http` is distributed as part of the .NET Core 2.1 runtime. To check the currently installed runtimes, open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed, you'll see output like the following;\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your host version is 2.1.x and the highest `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\nIf your host version is 2.2.x and the highest 2.1.x `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\n\r\nYou will not see SDK versions if you have only installed the runtime.\r\n\r\n#### Applications not using Microsoft.NetCore.App\r\n\r\nThe affected assembly is also available separately as a NuGet package. If you are not using Microsoft.NetCore.App, you may still be affected if you are referencing the packages listed above.\r\n\r\n##### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file. They can be fixed by [editing the project file](#fixing-direct-dependencies) or using NuGet to update the dependency.\r\n\r\n##### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects\r\n\r\nThe `project.assets.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json)).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `SSystem.Net.Http/4.3.0` is a reference to version 4.3.0 of `System.Net.Http`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\n#### Updating the version of Microsoft.NETCore.App\r\n\r\nIf your host version is a 2.1.x host you must install version 2.1.7 or later of the [.NET Core 2.1 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.1), or corresponding [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\nIf your host version is a 2.2.x you must install version 2.2.1 or later of the [.NET Core 2.2 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.2), or corresponding  [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\n#### <a name=\"fixing-direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.Net.Http` version 4.3.0\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.IO.Pipelines` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.5\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"transitive-dependencies\"></a>Fixing transitive dependencies\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.5\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n##### Rebuilding your application\r\n\r\nFinally, you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2019-0545](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0545)\r\n\r\n### Revisions\r\n\r\nV1.1 (January 9, 2019): Correct affected package table. \r\nV1.0 (January 8, 2019): Advisory published.\r\n\r\n_Version 1.1_\r\n\r\n_Last Updated 2019-01-09_\r\n","Url":"https://github.com/dotnet/announcements/issues/94","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability\" (#94)"},{"Id":"390948658","IsPullRequest":false,"CreatedAt":"2018-12-14T03:22:58","Actor":"wu-yafeng","Number":"93","RawContent":null,"Title":"Docker image with tag '2.2-aspnetcore-runtime' is not compatible","State":"closed","Body":"1. Install  .NET Core 2.2.100 sdk\r\n2. Create a new 'AspNetCore Web Api' by using Visual Studio 2017,and enbale docker support.\r\n3. F5 ,the Output Windows shows:\r\n>It was not possible to find any compatible framework version\r\n>The specified framework 'Microsoft.AspNetCore.App', version '2.2.0' was not found.\r\n>  - Check application dependencies and target a framework version installed at:\r\n>      /usr/share/dotnet/\r\n>  - Installing .NET Core prerequisites might help resolve this problem:\r\n>     http://go.microsoft.com/fwlink/?LinkID=798306&clcid=0x409\r\n>  - The .NET Core framework and SDK can be installed from:\r\n>      https://aka.ms/dotnet-download\r\n>  - The following versions are installed:\r\n>      2.2.0-preview3-35497 at [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]","Url":"https://github.com/dotnet/announcements/issues/93","RelatedDescription":"Closed issue \"Docker image with tag '2.2-aspnetcore-runtime' is not compatible\" (#93)"},{"Id":"390193072","IsPullRequest":false,"CreatedAt":"2018-12-12T12:56:53","Actor":"bilalmalik777","Number":"92","RawContent":null,"Title":".net core Console","State":"closed","Body":"I am running dot net core console app as web jobs and it is working perfectly in docker with docker compose. Now the issue is I want to pass a value to the application via Console.ReadLine() over this value i make some decision but i am unable to pass value via Console.ReadLine(). How i can do it please help me. For more understanding, i have added my docker compose file below\r\n`version: '3.4'\r\n\r\nservices:\r\n  \r\n  tt.core.web:\r\n    image: ${DOCKER_REGISTRY-}ttcoreweb\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.Web/Dockerfile\r\n    depends_on:\r\n     - db\r\n    networks:\r\n     - app-network\r\n\r\n  tt.core.downtime.webjob:\r\n    image: ${DOCKER_REGISTRY-}ttcoredowntimewebjob\r\n    environment:\r\n      CORE_ENVIRONMENT: devdocker\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.Downtime.Webjob/Dockerfile\r\n    depends_on:\r\n     - db\r\n     - tt.core.web\r\n    networks:\r\n     - app-network\r\n\r\n  db:\r\n    image: microsoft/mssql-server-linux\r\n    container_name: db\r\n    environment:\r\n      SA_PASSWORD: \"Thingtrax%1\"\r\n      ACCEPT_EULA: \"Y\"\r\n      MSSQL_PID: Express\r\n    ports:\r\n      - \"7002:1433\"\r\n    networks:\r\n      app-network:\r\n        ipv4_address: 172.24.0.2\r\n\r\nnetworks:\r\n  app-network:\r\n    ipam:\r\n      driver: default\r\n      config:\r\n        - subnet: 172.24.0.0/16\r\n\r\n`\r\nIf the detail is not enough or you do not get my point, you can share your confusion in comment","Url":"https://github.com/dotnet/announcements/issues/92","RelatedDescription":"Closed issue \".net core Console\" (#92)"},{"Id":"380346599","IsPullRequest":false,"CreatedAt":"2018-11-13T17:44:44","Actor":"leecow","Number":"91","RawContent":null,"Title":"November 2018 .NET Updates","State":"open","Body":"# November 2018 .NET Updates\r\n\r\nThe following .NET updates were released in November 2018. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Core\r\n\r\n* [.NET Core November 2018 (2.1.6 and SDK 2.1.500) Update release notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.6/2.1.6.md)\r\n\r\nA [discussion issue](https://github.com/dotnet/core/issues/2053) is available for questions or feedback about this release.\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n* [October 2018](https://github.com/dotnet/announcements/issues/89)\r\n* [September 2018](https://github.com/dotnet/announcements/issues/84)\r\n* [August 2018](https://github.com/dotnet/announcements/issues/79)\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)","Url":"https://github.com/dotnet/announcements/issues/91","RelatedDescription":"Open issue \"November 2018 .NET Updates\" (#91)"},{"Id":"375230004","IsPullRequest":false,"CreatedAt":"2018-10-29T21:45:27","Actor":"terrajobst","Number":"90","RawContent":null,"Title":"The future of JSON in .NET Core 3.0","State":"open","Body":"JSON has become an essential part of virtually all modern .NET applications and in many cases even surpassed the usage of XML. However, .NET hasn't had a (great) built-in way to deal with JSON. Instead we've relied on [Json.NET] which continues to serve the .NET ecosystem well.\r\n\r\n[Json.NET]: https://www.newtonsoft.com/json\r\n\r\nMoving forward, we plan on making some changes to our JSON support:\r\n\r\n* **We need high-performance JSON APIs**. We need a new set of JSON APIs that are highly tuned for performance by using `Span<T>` and allows for processing UTF-8 directly without having to transcode to UTF-16 `string` instances. Both aspects are critical for our web server Kestrel, where throughput is a key requirement.\r\n\r\n* **Remove dependency from ASP.NET Core to Json.NET**. Today, ASP.NET Core has a dependency on Json.NET. While this provides a tight integration between ASP.NET Core and Json.NET, it also means that application developers cannot freely choose which JSON library they are using. This is also problematic for customers of Json.NET as the version is dictated by the underlying platform. However, Json.NET is frequently updated and application developers often want to -- or even have to -- use a specific version. Thus, we want to remove the dependency from ASP.NET Core 3.0 to Json.NET so that customers can choose which version to use, without fearing they might accidentally break the underlying platform. In addition, this makes it also possible to plug-in an entirely different JSON library.\r\n\r\n* **Provide an ASP.NET Core integration package for Json.NET**. Json.NET has basically become the Swiss Army knife of JSON processing in .NET. It provides many options and facilities that allow customers to handle their JSON needs with ease. We don't want to compromise on the Json.NET support customers are getting today, for example, the ability to configure the JSON serialization via the `AddJsonOptions` extension method. Thus, we want to provide the Json.NET integration as a NuGet package that developers can optionally install so they get all the bells and whistles they get from Json.NET today. The other part of this work item is to ensure we have the right extension points so that other parties can provide similar integration packages for their JSON library of choice.\r\n\r\nBelow are more details around this plan.\r\n\r\n## The need for high-performance JSON APIs\r\n\r\nThe requirements for the .NET stack have changed a bit since the arrival of .NET Core. Historically, .NET has valued usability and convenience. With .NET Core, we've added a focus on performance, and we've made significant investments to serve high performance needs. And the [improvements we made][techempower] in the popular TechEmpower benchmark are a testament to that.\r\n\r\n[techempower]: https://www.techempower.com/blog/2016/11/16/framework-benchmarks-round-13/\r\n\r\nWith .NET Core 2.1, we've added a brand new primitive called [Span\\<T>][span-msdn] that allows us to represent native memory and arrays in a uniform way. With this type, we've also added a set of parsing and encoding APIs that are much more memory efficient without having to resort to unsafe code.\r\n\r\n[span-msdn]: https://msdn.microsoft.com/en-us/magazine/mt814808.aspx\r\n\r\nPart of the work of minimizing allocations is to avoid having to transcode UTF-8 payloads into UTF-16 strings, purely for parsing reasons. Currently, Json.NET is implemented by reading UTF-16. We need the ability to read (and write) JSON documents directly in UTF-8 because most network protocols (including HTTP) use UTF-8.\r\n\r\nDuring .NET Core 2.1 we've learned that updating our existing APIs to leverage `Span<T>` has limits. While we did add a bunch of overloads that accept spans, we also had to produce brand new APIs that are designed around minimizing allocations and dealing with buffers, which we exposed in `System.Buffers` namespaces. And with `System.IO.Pipelines` we've also added a programming model that enables developers to share buffers without having to deal with lifetime issues.\r\n\r\nBased on these experiences we believe in order to support JSON parsing, we'll need to expose a new set of JSON APIs that are specifically geared for high-performance scenarios.\r\n\r\nYou might wonder why we can't just update Json.NET to include support for parsing JSON using `Span<T>`? Well, James Newton-King -- the author of Json.NET -- has the following to say about that:\r\n\r\n> Json.NET was created over 10 years ago, and since then it has added a wide range of features aimed to help developers work with JSON in .NET. In that time Json.NET has also become far and away NuGet's most depended on and downloaded package, and is the go-to library for JSON support in .NET. Unfortunately, Json.NET's wealth of features and popularity works against making major changes to it. Supporting new technologies like `Span<T>` would require fundamental breaking changes to the library and would disrupt existing applications and libraries that depend on it.\r\n>\r\n> Going forward Json.NET will continue to be worked on and invested in, both addressing known issues today and supporting new platforms in the future. Json.NET has always existed alongside other JSON libraries for .NET, and there will be nothing to prevent you using one or more together, depending on whether you need the performance of the new JSON APIs or the large feature set of Json.NET.\r\n\r\n## Move Json.NET integration into a separate NuGet package\r\n\r\nToday, you cannot use ASP.NET Core without Json.NET because it is a dependency of ASP.NET Core itself. Over the years, we've received feedback that the dependency can conflict with other libraries that have their own dependency on a different version of Json.NET. In the past, we've considered addressing this issue by using a private copy of Json.NET in ASP.NET. However, this would create problems when developers want to configure Json.NET (for instance, in order to control how the serializer behaves when formatting JSON objects).\r\n\r\nMoving forward we'd like to:\r\n\r\n1. Replace the internal usage of Json.NET in ASP.NET Core by the new platform-provided JSON APIs.\r\n\r\n2. Factor the public facing usage of Json.NET into an optional integration package that can be acquired from NuGet.\r\n\r\nSo the existing integration between ASP.NET Core and Json.NET will continue to be supported, but will be moving out of the platform and into a separate package. However, since the integration is then designed to sit on top of the platform, it will also allow customers to update Json.NET to later versions.\r\n\r\nFurthermore, customers who need more performance can also choose to use the new JSON APIs, at the expense of the rich feature set that Json.NET offers.\r\n\r\n## Discussion\r\n\r\nFor a discussion, please go to https://github.com/dotnet/corefx/issues/33115.","Url":"https://github.com/dotnet/announcements/issues/90","RelatedDescription":"Open issue \"The future of JSON in .NET Core 3.0\" (#90)"},{"Id":"368440353","IsPullRequest":false,"CreatedAt":"2018-10-09T23:44:06","Actor":"vivmishra","Number":"89","RawContent":null,"Title":"October 2018 .NET Updates","State":"open","Body":"# October 2018 .NET Updates\r\n\r\nThe following .NET updates were released in October 2018. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Core\r\n\r\n* [.NET Core October 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/10/09/net-core-october-2018-update-net-core-1-0-and-1-1/)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n* [September 2018](https://github.com/dotnet/announcements/issues/84)\r\n* [August 2018](https://github.com/dotnet/announcements/issues/79)\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)","Url":"https://github.com/dotnet/announcements/issues/89","RelatedDescription":"Open issue \"October 2018 .NET Updates\" (#89)"},{"Id":"368429033","IsPullRequest":false,"CreatedAt":"2018-10-09T22:51:18","Actor":"leecow","Number":"88","RawContent":null,"Title":"Microsoft Security Advisory CVE-2018-8292: .NET Core Information Disclosure Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-8292: .NET Core Information Disclosure Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a security feature bypass vulnerability that exists when .NET Core when HTTP authentication information is inadvertently exposed in an outbound request that encounters an HTTP redirect. An attacker who successfully exploited this vulnerability could use the information to further compromise the web application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core applications handles HTTP redirects.\r\n\r\nSystem administrators running .NET Core 1.0 or .NET Core 1.1 applications must update their .NET Core runtimes to versions 1.0.13 and 1.1.10 then restart their applications. If installed applications target .NET Core 2.0, the applications must be migrated to 2.1 or newer and redeployed.\r\n\r\nDevelopers must update their .NET Core SDK to versions 1.1.11 and migrate any [.NET Core 2.0](https://docs.microsoft.com/dotnet/core/migration/20-21) or [ASP.NET Core 2.0](https://docs.microsoft.com/aspnet/core/migration/20_21?view=aspnetcore-2.1) applications to 2.1 then redeploy.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at <https://github.com/dotnet/corefx/issues/32730>\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nNone\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core application that runs on a .NET Core 1.0.x runtime with a version number of 1.0.12 or lower, or a .NET Core application that runs on a .NET Core 1.1.x runtime with a version number of 1.1.9 or lower, or a .NET Core application that runs on a .NET Core 2.0.x runtime.\r\n\r\nAdditionally package authors should check their dependencies to ensure they aren't depending on a vulnerable version of the following package:\r\n\r\n<a name=\"package-list\"></a>Package name | Vulnerable versions | Secure versions\r\n------------ | ---------------- | -------------------------\r\nSystem.Net.Http| 2.0.20126.16343, 2.0.20505, 2.0.20710, 4.0.0, 4.1.0, 4.1.1, 4.1.2, 4.3.0, 4.3.1, 4.3.2, 4.3.3 |  4.3.4 or later\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nAny .NET Core application that runs on a .NET Core 1.0.x runtime with a version number of 1.0.12 or lower, or a .NET Core application that runs on a .NET Core 1.1.x runtime with a version number of 1.1.9 or lower, or a .NET Core application that runs on a .NET Core 2.0.x runtime.\r\n\r\nTo check the currently installed runtimes and SDKs with version 2.1 or later of .NET Core, open a command prompt and run the `dotnet --info` command. You should see an output similar to the following:\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.1.403\r\n Commit:    04e15494b6\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17763\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.403\\\r\n\r\nHost (useful for support):\r\n  Version: 2.1.5\r\n  Commit:  290303f510\r\n\r\n.NET Core SDKs installed:\r\n  1.0.4 [C:\\Program Files\\dotnet\\sdk]\r\n  1.1.10 [C:\\Program Files\\dotnet\\sdk]\r\n  2.0.3 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.4 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf you don't see a runtime entry for 1.0.13 or 1.1.10, any .NET Core 1.x applications run on that computer are vulnerable.\r\n\r\nIf you don't have a 2.1 version of the runtime or SDK installed, you can produce the complete list of runtimes by performing a directory listing in the install root directories. The default root directories are listed in the following table:\r\n\r\n| Operating System | Location |\r\n|------------------|----------|\r\n| Windows | `C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\` |\r\n| macOS | `/usr/local/share/dotnet/shared/Microsoft.NETCore.App/` |\r\n| Supported Linux platforms | `/usr/share/dotnet/shared/Microsoft.NETCore.App/` |\r\n\r\nEach runtime version is installed in its own directory, where the directory name is the version number. If you don't have a directory for 1.0.13, 1.1.10 then any application targeting versions 1.0 or 1.1 are vulnerable.\r\n\r\nAdditionally, if you've deployed [self-contained applications](https://docs.microsoft.com/dotnet/core/deploying/#self-contained-deployments-scd) targeting any of the impacted versions, these applications are also vulnerable and must be recompiled and redeployed.\r\n\r\n### <a name=\"fix-runtime\">How do I fix the vulnerability?\r\n\r\nSystem administrators are advised to update their .NET Core runtimes to versions 1.0.13, 1.1.10 and install the latest 2.1 runtime, ensuring that any 2.0 applications are migrated to 2.1 as soon as possible.\r\n\r\n Developers are advised to update their .NET Core SDK to versions 1.1.11 and migrate any [.NET Core](https://docs.microsoft.com/dotnet/core/migration/20-21) or [ASP.NET Core 2.0](https://docs.microsoft.com/aspnet/core/migration/20_21?view=aspnetcore-2.1) applications to 2.1 and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at <https://github.com/dotnet/> and <https://github.com/aspnet/>, respectively. The Announcements repo for each product (<https://github.com/dotnet/Announcements> and <https://github.com/aspnet/Announcements>) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2018-8292](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-CVE-2018-8292)\r\n\r\n### Revisions\r\n\r\nV1.0 (October 10, 2018): Advisory published.\r\n_Version 1.0_\r\n_Last Updated 2018-10-10_\r\n","Url":"https://github.com/dotnet/announcements/issues/88","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2018-8292: .NET Core Information Disclosure Vulnerability\" (#88)"},{"Id":"367393517","IsPullRequest":false,"CreatedAt":"2018-10-05T22:58:51","Actor":"leecow","Number":"87","RawContent":null,"Title":".NET Core Release Data (releases.json) Redesign and v1 Deprecation Plan","State":"open","Body":"# .NET Core Release Data (releases.json) Redesign and Deprecation\r\n\r\nThe releases.json and releases.csv files began life as helper tools for some of our internal release work, some experimentation and to possibly be useful to the community. It has been great to learn the files are indeed in use and many folks depend on them as a trigger for a number of activities.\r\n\r\n* [release-notes/releases.json](https://github.com/dotnet/core/blob/master/release-notes/releases.json)\r\n* [release-notes/releases.csv](https://github.com/dotnet/core/blob/master/release-notes/releases.csv)\r\n\r\nA discussion topic is available to share thoughts and see what others are thinking at https://github.com/dotnet/core/issues/1986\r\n\r\nBetween the usages which we have become aware and in considering further activities that could be enabled to reason about things such as checking .NET Core version availability and support status, it became clear the current format is inadequate.\r\n\r\nAn updated format has been designed and tested which will replace the current files. The timeline below describes the path to obsoleting the current files.\r\n\r\n## The Plan\r\n\r\n| Date | Action |\r\n| :--- | :----- |\r\n| Oct 2018 | Notify the community of the coming change |\r\n| Oct 2018 | Release the new json format into dotnet/core |\r\n| Oct 2018 - Feb 2019 | Maintain the old json and csv files |\r\n| Feb 2019 | Reminder announcement that old format file is coming soon |\r\n| Mar 2019 | Old json and csv files are obsoleted and removed from dotnet/core |\r\n\r\n## Breaking change\r\n\r\nIf you are currently utilizing the old version json or csv, you will need to update the relevant code to work with the new format. If you are just getting started with consuming this data, use the new version.\r\n\r\n## The Format\r\n\r\nBelow are fragments of the files from our most recent .NET Core release.\r\n\r\n### release-index.json\r\n\r\nThis file consists of a top level array with data on the latest release versions and a property for locating the more detailed channel-specific releases.json. This file is found in [dotnet/core/release-notes](https://github.com/dotnet/core/tree/new-json/release-notes/)\r\n\r\n[releases-index.json](https://github.com/dotnet/core/blob/new-json/release-notes/releases-index.json)\r\n\r\n```\r\n{\r\n    \"releases-index\": [\r\n        {\r\n            \"channel-version\": \"2.1\",\r\n            \"latest-release\": \"2.1.5\",\r\n            \"latest-release-date\":\"2018-10-02\",\r\n            \"product\": \".NET Core\",\r\n            \"support-phase\": \"lts\",\r\n            \"eol-date\": \"\",\r\n            \"releases.json\": \"https://github.com/dotnet/core/blob/master/release-notes/2.1/releases.json\",\r\n        },\r\n        ...\r\n}\r\n```\r\n\r\n### releases.json\r\n\r\nThis file provides detailed data for each release. A copy of this file will be found in each versioned directories under [dotnet/core/release-notes](https://github.com/dotnet/core/release-notes). For example [dotnet/core/release-notes/2.1](https://github.com/dotnet/core/tree/new-json/release-notes/2.1)\r\n\r\n\r\n[releases.json](https://github.com/dotnet/core/tree/new-json/release-notes/2.1/releases.json)\r\n\r\n```\r\n{\r\n    \"channel-version\": \"2.1\",\r\n    \"latest-release\": \"2.1.5\",\r\n    \"latest-release-date\":\"2018-10-12\",\r\n    \"support-phase\": \"lts\",\r\n    \"eol-date\": \"\",\r\n    \"lifecycle-policy\": \"https://www.microsoft.com/net/support/policy\",\r\n    \"releases\":\r\n    [\r\n        {\r\n            \"release-date\":  \"2018-10-02\",\r\n            \"release-version\":  \"2.1.5\",\r\n            \"security\":  false,\r\n            \"release-notes\":  \"https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.5/2.1.5.md\",\r\n            \"runtime\":  \r\n            {\r\n                \"version\":  \"2.1.5\",\r\n                \"version-display\":  \"2.1.5\",\r\n                \"vs-version\":  \"15.8.6\",\r\n                \"files\":  \r\n                [\r\n                    {\r\n                        \"name\": \"dotnet-runtime-linux-arm.tar.gz\",\r\n                        \"url\": \"https://download.visualstudio.microsoft.com/download/pr/4d555219-1f04-47c6-90e5-8b3ff8989b9c/0798763e6e4b98a62846116f997d046e/dotnet-runtime-2.1.5-linux-arm.tar.gz\",\r\n                        \"hash\": \"89a77a07065ea24e7198c77a233b9ce5c6cf51b1deb2ef55c88f0adbb2ecd9db1ba4e7d55eec2ef7139c47f91346fed360161a5bb6e3a7ccfc4559bcde286364\"\r\n                    },\r\n                    ...\r\n                ]\r\n            }\r\n            \"sdk\":  \r\n            {\r\n                \"version\":  \"2.1.403\",\r\n                \"version-display\":  \"2.1.403\",\r\n                \"vs-version\":  \"15.8.6\",\r\n                \"csharp-language\":  \"7.3\",\r\n                \"fsharp-language\":  \"4.5\",\r\n                \"files\":  \r\n                [...]\r\n            }\r\n        }\r\n    ]\r\n}\r\n```","Url":"https://github.com/dotnet/announcements/issues/87","RelatedDescription":"Open issue \".NET Core Release Data (releases.json) Redesign and v1 Deprecation Plan\" (#87)"},{"Id":"366416503","IsPullRequest":false,"CreatedAt":"2018-10-03T16:11:18","Actor":"leecow","Number":"86","RawContent":null,"Title":".NET Core 2.0 has reached end of life","State":"open","Body":"[.NET Core 2.0 reached end of life](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/) on October 1, 2018. This means [.NET Core 2.0](https://blogs.msdn.microsoft.com/dotnet/2017/08/14/announcing-net-core-2-0/) is no longer supported and updates will no longer be provided. We recommend moving to [.NET Core 2.1](https://blogs.msdn.microsoft.com/dotnet/2018/05/30/announcing-net-core-2-1/), our long term support (LTS) release.\r\n\r\n- [Download .NET Core 2.1](https://www.microsoft.com/net/download/dotnet-core/2.1)\r\n- [.NET Core 2.1 LTS statement](https://blogs.msdn.microsoft.com/dotnet/2018/08/21/net-core-august-2018-update/)\r\n- [.NET Core 2.0 end-of-life statement](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/)\r\n\r\n## Discussion\r\n\r\nPlease share you thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet/core#1983](https://github.com/dotnet/core/issues/1983)\r\n\r\n## Lifecycle Context\r\n\r\n.NET Core releases belong to one of two [support lifecycles](https://www.microsoft.com/net/platform/support-policy): long term support (LTS) and Current. LTS releases are stable release which receive critical updates and are supported for at least three years. Current releases can include new features that may undergo future change based on feedback. Current releases are supported for three months after the subsequent .NET Core major or minor release. Both LTS and Current releases receive critical fixes throughout their lifecycle, for security, reliability, or to add support for new operating system versions. You must stay up-to-date with the latest patches to qualify for support. \r\n\r\n## .NET Core 2.0 Lifecycle\r\n\r\n[.NET Core 2.0](https://blogs.msdn.microsoft.com/dotnet/2017/08/14/announcing-net-core-2-0/) was released in August 2017 as a Current release. Per the lifecycle policy, Current releases reach end of life 3 months after a subsequent release (Current or LTS). .NET Core 2.1 released May 2018 and began the end of life countdown for .NET Core 2.0. The 3 month maintenance period for .NET Core 2.0 was scheduled to end August 2018 but was [extended to October](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/) to allow time to address an issue some customers were experiencing while migrating to .NET Core 2.1.\r\n\r\n## .NET Core 2.0 Downloads\r\n\r\n.NET Core 2.0 installers, zips and tar.gzs will remain available, but unsupported. This includes existing releases available on Linux package feeds. Previous versions, including 2.0, will be accessible through the [Download Archives](https://www.microsoft.com/net/download/archives). \r\n\r\n## .NET Core 2.0 Docker Images\r\n\r\n.NET Core 2.0 will be removed from the .NET and ASP.NET Docker repo READMEs, however the existing images remain available in those repos.\r\n\r\n* [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/)\r\n* [microsoft/dotnet-nightly](https://hub.docker.com/r/microsoft/dotnet-nightly/)\r\n* [microsoft/aspnetcore](https://hub.docker.com/r/microsoft/aspnetcore/)\r\n* [microsoft/aspnetcore-build](https://hub.docker.com/r/microsoft/aspnetcore-build/)\r\n\r\n## Policy Information\r\n\r\nAdditional lifecycle and support details  and background can be seen in the following:\r\n\r\n* [.NET Core Support Lifecycle](https://www.microsoft.com/net/platform/support-policy)\r\n* [Support and Versioning](https://blogs.msdn.microsoft.com/dotnet/2016/07/26/net-support-and-versioning/)\r\n* [2.0 end of life early announcement](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n","Url":"https://github.com/dotnet/announcements/issues/86","RelatedDescription":"Open issue \".NET Core 2.0 has reached end of life\" (#86)"},{"Id":"361098704","IsPullRequest":false,"CreatedAt":"2018-09-18T01:10:23","Actor":"spshant","Number":"85","RawContent":null,"Title":"NET Framework 4.8 Early Access build 3646 is available!","State":"open","Body":"Today, we are happy to share an Early Access build for the .NET Framework 4.8. This includes an updated .NET 4.8 runtime as well as the .NET 4.8 Developer Pack (a a single package that bundles the .NET Framework 4.8 runtime, the .NET 4.8 Targeting Pack, and the .NET Framework 4.8 SDK). \r\n\r\nPlease help us ensure this is a high quality and compatible release by trying out this build and exploring the new features. \r\n\r\n**Next steps:**\r\nTo explore the new features, download the [.NET 4.8 Developer Pack build 3646](https://go.microsoft.com/fwlink/?LinkId=2018486).  Instead, if you want to try just the .NET 4.8 runtime, you can download either of these:\r\n•\t[.NET 4.8 Web Installer](https://go.microsoft.com/fwlink/?LinkId=2018525) - requires an internet connection during installation \r\n•\t[.NET 4.8 Offline installer](https://go.microsoft.com/fwlink/?LinkId=2018531) - can be downloaded and installed later in a disconnected state\r\n\r\nPlease provide your feedback by [reporting an issue at the .NET Framework Early Access GitHub repository](https://github.com/Microsoft/dotnet-framework-early-access/issues/new).\r\n\r\n**Note**: this release is still under development, you can expect to see more features and fixes in future preview builds. Also, a reminder that this build is not supported for production use.\r\n\r\nThis preview build 3646 includes improvements/fixes in the following areas:\r\n•\t**[Runtime]** JIT and NGEN improvements\r\n•\t**[Windows Forms]** Accessibility enhancements\r\n•\t**[WPF]** SelectionTextBrush Property\r\n•\t**[BCL]** Updated ZLib\r\n\r\nYou can see the complete list of improvements in this build [here](https://github.com/Microsoft/dotnet-framework-early-access/blob/master/release-notes/NET48/build-3646/changes.md).\r\n\r\n.NET Framework build 3646 is also included in the next update for Windows 10. You can sign up for [Windows Insiders](https://insider.windows.com/en-us/) to validate that your applications work great on the latest .NET Framework included in the latest Windows 10 releases.\r\n","Url":"https://github.com/dotnet/announcements/issues/85","RelatedDescription":"Open issue \"NET Framework 4.8 Early Access build 3646 is available!\" (#85)"},{"Id":"359151445","IsPullRequest":false,"CreatedAt":"2018-09-11T17:44:50","Actor":"leecow","Number":"84","RawContent":null,"Title":"September 2018 .NET Updates","State":"open","Body":"# September 2018 .NET Updates\r\n\r\nThe following .NET updates were released in September 2018. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Framework\r\n* [.NET Framework September 2018 Security and Quality Rollup - September 11, 2018](https://blogs.msdn.microsoft.com/dotnet/2018/09/11/net-framework-september-2018-security-and-quality-rollup/)\r\n\r\n## .NET Core\r\n\r\n* [.NET Core September 2018 Update - September 11, 2018](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.4/2.1.4.md)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n\r\n* [August 2018](https://github.com/dotnet/announcements/issues/79)\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)","Url":"https://github.com/dotnet/announcements/issues/84","RelatedDescription":"Open issue \"September 2018 .NET Updates\" (#84)"},{"Id":"359136325","IsPullRequest":false,"CreatedAt":"2018-09-11T17:00:55","Actor":"blowdart","Number":"83","RawContent":null,"Title":"Microsoft Security Advisory CVE-2018-8409: .NET Core Denial Of Service Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-8409: .NET Core Denial Of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a denial of service vulnerability in .NET Core when System.IO.Pipelines improperly handles requests. An attacker who successfully exploited this vulnerability could cause a denial of service against an application that is leveraging System.IO.Pipelines. The vulnerability can be exploited remotely, without authentication. A remote unauthenticated attacker could exploit this vulnerability by providing specially crafted requests to the application.\r\n\r\nThe update addresses the vulnerability by correcting how System.IO.Pipelines handles requests.\r\n\r\nIf you are using ASP.NET Core 2.1 you will also need to update your ASP.NET version this by following the instructions in the [ASP.NET Core bulletin](https://github.com/aspnet/Announcements/issues/316).\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/32228\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nThere are no mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the System.IO.Pipelines package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.IO.Pipelines | 4.5.0 | 4.5.1\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n#### Applications which use System.IO.Pipelines\r\n\r\nSystem.IO.Pipelines is distributed both in ASP.NET Core 2.1 and separately as a NuGet package. If you are not using Microsoft.AspNetCore.App or .All, you may still be affected if you are referencing the System.IO.Pipelines package.\r\n\r\n##### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file. They can be fixed by [editing the project file](#fixing-direct-dependencies) or using NuGet to update the dependency.\r\n\r\n##### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects\r\n\r\nThe `project.assets.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json)).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `System.IO.Pipelines/4.5.0` is a reference to version 4.5.0 of `System.IO.Pipelines`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\n#### <a name=\"fixing-direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.IO.Pipelines\" Version=\"4.5.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.IO.Pipelines` version 4.5.0\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.IO.Pipelines` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.IO.Pipelines\" Version=\"4.5.1\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"transitive-dependencies\"></a>Fixing transitive dependencies\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.IO.Pipelines\" Version=\"4.5.1\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n#### Rebuilding your application\r\n\r\nFinally you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2018-8409](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-CVE-2018-8409)\r\n\r\n### Revisions\r\n\r\nV1.0 (September 11, 2018): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2018-09-11_\r\n","Url":"https://github.com/dotnet/announcements/issues/83","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2018-8409: .NET Core Denial Of Service Vulnerability\" (#83)"},{"Id":"357399856","IsPullRequest":false,"CreatedAt":"2018-09-05T20:56:25","Actor":"richlander","Number":"82","RawContent":null,"Title":".NET Core Runtime ARM64 Status","State":"open","Body":"# .NET Core Runtime ARM64 Status\r\n\r\nThe .NET Core team is in the process of adding support for ARM64, as part of the .NET Core 3.0 project. This issue will be updated as ARM64 support progresses.\r\n\r\n[.NET Core 3.0 Preview 1](https://github.com/dotnet/core/issues/2099) includes support for Linux ARM64. Please try this build and provide support.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet/coreclr #19843](https://github.com/dotnet/coreclr/issues/19843)\r\n\r\n## Current Status\r\n\r\nARM64 builds are functional, for console and ASP.NET Core apps.\r\n\r\n## Details\r\n\r\nInitial support for ARM64 was added in the .NET Core 2.1 release. The team is not maintaining .NET Core 2.x branches with respect to ARM64. All ARM64 improvements will be made in the .NET Core 3.0 branch (currently [master](https://github.com/dotnet/coreclr)).\r\n\r\nSee [Installing .NET Core 3.0 on Linux ARM64](https://gist.github.com/richlander/467813274cea8abc624553ee72b28213) to install .NET Core on your ARM64 machine. Builds are available from the [daily builds page](https://github.com/dotnet/core/blob/master/daily-builds.md).\r\n\r\n## Bug Queries\r\n\r\nthe following bugs queries are available for ARM64:\r\n\r\n* [dotnet/coreclr](https://github.com/dotnet/coreclr/issues?q=is%3Aopen+is%3Aissue+label%3Aarch-arm64)\r\n* [dotnet/corefx](https://github.com/dotnet/corefx/issues?q=is%3Aopen+is%3Aissue+label%3Aarch-arm64)\r\n\r\n## Operating Systems\r\n\r\n.NET Core 3.0 ARM64 builds are tested on the following operating systems:\r\n\r\n* Ubuntu 16.04 and 18.04\r\n* Debian 9\r\n\r\n## Test Hardware\r\n\r\n.NET Core 3.0 ARM64 builds have been tested on the following hardware:\r\n\r\n* [NVIDIA Jetson TX2 Module](https://developer.nvidia.com/embedded/buy/jetson-tx2)\r\n* [Pine A64](https://www.pine64.org/?page_id=46823)\r\n* [Qualcomm Centriq 2400](https://www.qualcomm.com/products/qualcomm-centriq-2400-processor)\r\n* [Qualcomm Snapdragon](https://www.qualcomm.com/snapdragon/always-connected-pc)\r\n* [Raspberry Pi3](https://www.raspberrypi.org/products/raspberry-pi-3-model-b-plus/)","Url":"https://github.com/dotnet/announcements/issues/82","RelatedDescription":"Open issue \".NET Core Runtime ARM64 Status\" (#82)"},{"Id":"349693735","IsPullRequest":false,"CreatedAt":"2018-08-22T18:23:01","Actor":"richlander","Number":"80","RawContent":null,"Title":"Improving Performance of ARM32 Docker Images with .NET Core Package Cache","State":"closed","Body":"# Improving Performance of ARM32 Docker Images with .NET Core Package Cache\r\n\r\n.NET Core SDK distributions include a compressed copy of NuGet packages for .NET Core, ASP.NET Core and EF Core. These packages are decompressed upon installation of the .NET Core SDK. The packages are not currently included in ARM32 distributions due to the time and space cost to decompress the packages. Instead, they will be added to [.NET Core ARM32 Docker images](https://hub.docker.com/r/microsoft/dotnet/), where these costs can be paid as part of image creation.\r\n\r\nThese NuGet packages include content for two purposes:\r\n\r\n- Reference assemblies for .NET Core, for code compilation.\r\n- Pre-compiled assemblies (compiled with [crossgen](https://github.com/dotnet/coreclr/blob/master/Documentation/building/crossgen.md)) for .NET Core, for use in self-contained applications.\r\n\r\nIn both cases, the presence of these packages avoid the need to access remote NuGet feeds for .NET Core assemblies as part of package restore.\r\n\r\nThis change only affects [.NET Core 2.1 SDK ARM32 Docker images](https://hub.docker.com/r/microsoft/dotnet/). This change will be made in August 2018.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet/dotnet-docker #653](https://github.com/dotnet/dotnet-docker/issues/653)\r\n\r\n## .NET Core SDK NugetFallbackFolder\r\n\r\nThe .NET Core SDK includes a compressed copy of all NuGet package, in LZMA format. It exists at the following version-specific location:\r\n\r\n```\r\nroot@3778032bc43d:/# ls -l /usr/share/dotnet/sdk/2.1.302/*.lzma\r\n-rw-r--r-- 1 1004 sudo 35995936 Jul  2 22:51 /usr/share/dotnet/sdk/2.1.302/nuGetPackagesArchive.lzma\r\n```\r\n\r\nThis file is decompressed to the following location: `/usr/share/dotnet/sdk/NuGetFallbackFolder/`\r\n\r\nA package restore for a .NET Core assembly will restore the assembly from the NuGetFallbackFolder location and copy it to the user NuGet cache. At that point, regular NuGet behavior is used.\r\n\r\n## Impact of this change\r\n\r\nThere should be no functional difference in behavior after this change. .NET SDK commands should complete faster and require fewer package restore network requests.\r\n\r\nThe following examples demonstrates the benefit of this change. The improvement can be observed with package restore. Build times (assuming no restore) are not affected.\r\n\r\n### .NET Core 2.1 SDK image after this change\r\n\r\n> The change has already been made in the `microsoft/dotnet-nightly` repo, as you can see in the example below. In August, this same change will be made available in the `microsoft/dotnet` repo.\r\n\r\n```console\r\npi@raspberrypi:~ $ docker run -it --rm microsoft/dotnet-nightly:2.1-sdk\r\nroot@416731f24915:/# time dotnet new mvc -o mvcapp\r\nGetting ready...\r\nThe template \"ASP.NET Core Web App (Model-View-Controller)\" was created successfully.\r\nThis template contains technologies from parties other than Microsoft, see https://aka.ms/aspnetcore-template-3pn-210 for details.\r\n\r\nProcessing post-creation actions...\r\nRunning 'dotnet restore' on mvcapp/mvcapp.csproj...\r\n  Restoring packages for /mvcapp/mvcapp.csproj...\r\n  Generating MSBuild file /mvcapp/obj/mvcapp.csproj.nuget.g.props.\r\n  Generating MSBuild file /mvcapp/obj/mvcapp.csproj.nuget.g.targets.\r\n  Restore completed in 6.68 sec for /mvcapp/mvcapp.csproj.\r\n\r\nRestore succeeded.\r\n\r\n\r\nreal    0m32.496s\r\nuser    0m35.820s\r\nsys     0m4.280s\r\nroot@416731f24915:/# cd mvcapp/\r\nroot@416731f24915:/mvcapp# time dotnet build\r\nMicrosoft (R) Build Engine version 15.8.138-preview+ge0cd4f1c1f for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  Restore completed in 524.78 ms for /mvcapp/mvcapp.csproj.\r\n/usr/share/dotnet/sdk/2.1.401-preview-009081/Sdks/Microsoft.NET.Sdk/targets/Microsoft.NET.RuntimeIdentifierInference.targets(143,5): message NETSDK1057: You are working with a preview version of the .NET Core SDK. You can define the SDK version via a global.json file in the current project. More at https://go.microsoft.com/fwlink/?linkid=869452 [/mvcapp/mvcapp.csproj]\r\n  mvcapp -> /mvcapp/bin/Debug/netcoreapp2.1/mvcapp.dll\r\n  mvcapp -> /mvcapp/bin/Debug/netcoreapp2.1/mvcapp.Views.dll\r\n\r\nBuild succeeded.\r\n    0 Warning(s)\r\n    0 Error(s)\r\n\r\nTime Elapsed 00:02:09.15\r\n\r\nreal    2m13.377s\r\nuser    1m25.260s\r\nsys     0m9.420s\r\nroot@416731f24915:/mvcapp#\r\n```\r\n\r\n### .NET Core 2.1 SDK image before this change\r\n\r\n```console\r\npi@raspberrypi:~ $ docker run -it --rm microsoft/dotnet:2.1-sdk\r\nroot@9d1d5e45df6a:/# time dotnet new mvc -o mvcapp\r\nGetting ready...\r\nThe template \"ASP.NET Core Web App (Model-View-Controller)\" was created successfully.\r\nThis template contains technologies from parties other than Microsoft, see https://aka.ms/aspnetcore-template-3pn-210 for details.\r\n\r\nProcessing post-creation actions...\r\nRunning 'dotnet restore' on mvcapp/mvcapp.csproj...\r\n  Restoring packages for /mvcapp/mvcapp.csproj...\r\n  Installing System.Xml.XmlSerializer 4.3.0.\r\n  Installing System.Threading.Tasks.Extensions 4.0.0.\r\n  Installing System.Globalization.Extensions 4.0.1.\r\n  Installing runtime.native.System.Security.Cryptography 4.0.0.\r\n  Installing System.Security.Cryptography.OpenSsl 4.0.0.\r\n  Installing System.Security.Cryptography.Cng 4.2.0.\r\n  Installing System.Security.Cryptography.Csp 4.0.0.\r\n  Installing runtime.native.System.Net.Http 4.0.1.\r\n  Installing runtime.native.System 4.0.0.\r\n  Installing runtime.native.System.IO.Compression 4.1.0.\r\n  Installing System.Buffers 4.0.0.\r\n  Installing System.Private.DataContractSerialization 4.3.0.\r\n  Installing System.Security.Principal 4.3.0.\r\n  Installing runtime.osx.10.10-x64.runtime.native.System.Security.Cryptography.Apple 4.3.0.\r\n  Installing runtime.rhel.7-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing runtime.ubuntu.14.04-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing runtime.opensuse.42.1-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.NETCore.App 2.1.0.\r\n  Installing runtime.ubuntu.16.10-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.AspNetCore.App 2.1.1.\r\n  Installing runtime.ubuntu.16.04-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.NETCore.Platforms 2.1.0.\r\n  Installing Microsoft.NETCore.Targets 2.1.0.\r\n  Installing NETStandard.Library 2.0.3.\r\n  Installing Microsoft.NETCore.DotNetHostPolicy 2.1.0.\r\n  Installing Microsoft.AspNetCore 2.1.1.\r\n  Installing Microsoft.AspNetCore.Antiforgery 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Localization 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Session 2.1.1.\r\n  Installing Microsoft.AspNetCore.SpaServices 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.KeyPerFile 2.1.1.\r\n  Installing Microsoft.Extensions.FileProviders.Abstractions 2.1.1.\r\n  Installing Microsoft.Extensions.Hosting 2.1.1.\r\n  Installing Microsoft.Extensions.FileProviders.Embedded 2.1.1.\r\n  Installing Microsoft.Extensions.FileProviders.Physical 2.1.1.\r\n  Installing Microsoft.Extensions.Localization 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.Cookies 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.Core 2.1.1.\r\n  Installing runtime.osx.10.10-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.AspNetCore.Authentication.Google 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.Facebook 2.1.1.\r\n  Installing Microsoft.Extensions.Hosting.Abstractions 2.1.1.\r\n  Installing runtime.opensuse.13.2-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.AspNetCore.HttpsPolicy 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.MicrosoftAccount 2.1.1.\r\n  Installing Microsoft.Extensions.Http 2.1.1.\r\n  Installing Microsoft.AspNetCore.MiddlewareAnalysis 2.1.1.\r\n  Installing Microsoft.Extensions.FileSystemGlobbing 2.1.1.\r\n  Installing Microsoft.Extensions.DiagnosticAdapter 2.1.0.\r\n  Installing Microsoft.Extensions.Identity.Core 2.1.1.\r\n  Installing Microsoft.Extensions.Identity.Stores 2.1.1.\r\n  Installing Microsoft.Extensions.Options.ConfigurationExtensions 2.1.1.\r\n  Installing Microsoft.Extensions.Localization.Abstractions 2.1.1.\r\n  Installing Microsoft.Extensions.Logging.Abstractions 2.1.1.\r\n  Installing runtime.fedora.24-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.Extensions.Options 2.1.1.\r\n  Installing Microsoft.Extensions.FileProviders.Composite 2.1.1.\r\n  Installing Microsoft.Extensions.Logging 2.1.1.\r\n  Installing Microsoft.Extensions.Logging.Configuration 2.1.1.\r\n  Installing Microsoft.Extensions.Logging.TraceSource 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.UserSecrets 2.1.1.\r\n  Installing Microsoft.Extensions.Logging.Debug 2.1.1.\r\n  Installing Microsoft.Extensions.Logging.Console 2.1.1.\r\n  Installing Microsoft.Extensions.DependencyInjection 2.1.1.\r\n  Installing Microsoft.Extensions.ObjectPool 2.1.1.\r\n  Installing runtime.debian.8-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.Extensions.DependencyInjection.Abstractions 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.Binder 2.1.1.\r\n  Installing runtime.fedora.23-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.Extensions.Configuration.EnvironmentVariables 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.FileExtensions 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.Abstractions 2.1.1.\r\n  Installing Microsoft.Extensions.Caching.Memory 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.CommandLine 2.1.1.\r\n  Installing Microsoft.Extensions.Caching.Abstractions 2.1.1.\r\n  Installing Microsoft.Net.Http.Headers 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.InMemory 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.Abstractions 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.Ini 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.Analyzers 2.1.1.\r\n  Installing Microsoft.AspNetCore.StaticFiles 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.Relational 2.1.1.\r\n  Installing Microsoft.AspNetCore.Server.Kestrel.Https 2.1.1.\r\n  Installing Microsoft.Extensions.Primitives 2.1.1.\r\n  Installing Microsoft.AspNetCore.SpaServices.Extensions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Server.Kestrel 2.1.1.\r\n  Installing Microsoft.Extensions.WebEncoders 2.1.1.\r\n  Installing Microsoft.AspNetCore.WebUtilities 2.1.1.\r\n  Installing Microsoft.AspNetCore.SignalR 1.0.1.\r\n  Installing Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets 2.1.1.\r\n  Installing Microsoft.AspNetCore.Routing 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.Tools 2.1.1.\r\n  Installing Microsoft.AspNetCore.Routing.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Rewrite 2.1.1.\r\n  Installing Microsoft.AspNetCore.ResponseCaching.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Server.Kestrel.Transport.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.ResponseCaching 2.1.1.\r\n  Installing Microsoft.AspNetCore.ResponseCompression 2.1.1.\r\n  Installing System.Globalization.Extensions 4.3.0.\r\n  Installing Microsoft.AspNetCore.Razor.Language 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.TagHelpers 2.1.1.\r\n  Installing Microsoft.AspNetCore.Razor.Runtime 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.RazorPages 2.1.1.\r\n  Installing Microsoft.AspNetCore.Owin 2.1.1.\r\n  Installing Microsoft.AspNetCore.Razor 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Razor.Extensions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Razor.ViewCompilation 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Analyzers 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Localization 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Formatters.Json 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.Design 2.1.1.\r\n  Installing Microsoft.AspNetCore.WebSockets 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Cors 2.1.1.\r\n  Installing System.Diagnostics.DiagnosticSource 4.3.0.\r\n  Installing Microsoft.AspNetCore.Mvc.DataAnnotations 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.ApiExplorer 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Formatters.Xml 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc 2.1.1.\r\n  Installing Microsoft.Extensions.Logging.EventSource 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.OAuth 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.Json 2.1.1.\r\n  Installing Microsoft.AspNetCore.SignalR.Protocols.Json 1.0.1.\r\n  Installing Microsoft.AspNetCore.NodeServices 2.1.1.\r\n  Installing Microsoft.AspNetCore.SignalR.Common 1.0.1.\r\n  Installing Microsoft.AspNetCore.JsonPatch 2.1.1.\r\n  Installing Microsoft.AspNetCore.Localization.Routing 2.1.1.\r\n  Installing Microsoft.AspNetCore.Server.IISIntegration 2.1.1.\r\n  Installing Microsoft.AspNetCore.Identity.UI 2.1.1.\r\n  Installing Microsoft.AspNetCore.Razor.Design 2.1.1.\r\n  Installing Microsoft.AspNetCore.Identity.EntityFrameworkCore 2.1.1.\r\n  Installing Microsoft.AspNetCore.Http.Extensions 2.1.1.\r\n  Installing Microsoft.AspNetCore.HttpOverrides 2.1.1.\r\n  Installing Microsoft.AspNetCore.Identity 2.1.1.\r\n  Installing Microsoft.AspNetCore.Http.Features 2.1.1.\r\n  Installing Microsoft.AspNetCore.Http.Connections 1.0.1.\r\n  Installing Microsoft.AspNetCore.Http.Connections.Common 1.0.1.\r\n  Installing Microsoft.AspNetCore.Http 2.1.1.\r\n  Installing Microsoft.AspNetCore.Diagnostics.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Cors 2.1.1.\r\n  Installing Microsoft.AspNetCore.Hosting.Server.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Http.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.DataProtection.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Hosting.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Diagnostics.EntityFrameworkCore 2.1.1.\r\n  Installing Microsoft.AspNetCore.Cryptography.Internal 2.1.1.\r\n  Installing Microsoft.AspNetCore.Cryptography.KeyDerivation 2.1.1.\r\n  Installing Microsoft.AspNetCore.DataProtection.Extensions 2.1.1.\r\n  Installing Microsoft.AspNetCore.HostFiltering 2.1.1.\r\n  Installing Microsoft.CSharp 4.0.1.\r\n  Installing Microsoft.AspNetCore.CookiePolicy 2.1.1.\r\n  Installing Microsoft.AspNetCore.Server.Kestrel.Core 2.1.1.\r\n  Installing Microsoft.AspNetCore.Html.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.Twitter 2.1.1.\r\n  Installing Microsoft.AspNetCore.Connections.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authorization.Policy 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authorization 2.1.1.\r\n  Installing Microsoft.AspNetCore.Diagnostics 2.1.1.\r\n  Installing Microsoft.AspNetCore.Server.HttpSys 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.Xml 2.1.1.\r\n  Installing Microsoft.AspNetCore.Hosting 2.1.1.\r\n  Installing Microsoft.AspNetCore.DataProtection 2.1.1.\r\n  Installing Microsoft.Extensions.Caching.SqlServer 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.SqlServer 2.1.1.\r\n  Installing Microsoft.AspNet.WebApi.Client 5.2.6.\r\n  Installing Microsoft.AspNetCore.SignalR.Core 1.0.1.\r\n  Installing Microsoft.AspNetCore.Mvc.ViewFeatures 2.1.1.\r\n  Installing Microsoft.CodeAnalysis.Razor 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.JwtBearer 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.OpenIdConnect 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Razor 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.WsFederation 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore 2.1.1.\r\n  Installing System.Runtime.Serialization.Primitives 4.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Core 2.1.1.\r\n  Installing System.Xml.ReaderWriter 4.0.11.\r\n  Installing Microsoft.NETCore.DotNetHostResolver 2.1.0.\r\n  Installing System.Diagnostics.DiagnosticSource 4.5.0.\r\n  Installing System.ComponentModel.Annotations 4.5.0.\r\n  Installing System.Buffers 4.5.0.\r\n  Installing System.Memory 4.5.1.\r\n  Installing System.Runtime.CompilerServices.Unsafe 4.5.1.\r\n  Installing System.Text.Encodings.Web 4.5.0.\r\n  Installing Microsoft.CSharp 4.5.0.\r\n  Installing System.Net.WebSockets.WebSocketProtocol 4.5.1.\r\n  Installing Newtonsoft.Json 11.0.2.\r\n  Installing System.IO.Pipelines 4.5.0.\r\n  Installing System.Numerics.Vectors 4.5.0.\r\n  Installing System.Security.Principal.Windows 4.5.0.\r\n  Installing System.Threading.Tasks.Extensions 4.5.1.\r\n  Installing System.Security.Cryptography.Cng 4.5.0.\r\n  Installing System.Net.Http 4.1.0.\r\n  Installing System.Security.Cryptography.Xml 4.5.0.\r\n  Installing Microsoft.Win32.Registry 4.5.0.\r\n  Installing System.Reflection.Metadata 1.6.0.\r\n  Installing System.Data.SqlClient 4.5.1.\r\n  Installing Newtonsoft.Json.Bson 1.0.1.\r\n  Installing Newtonsoft.Json 10.0.1.\r\n  Installing System.Threading.Channels 4.5.0.\r\n  Installing System.Reflection.Emit 4.3.0.\r\n  Installing Microsoft.CodeAnalysis.CSharp 2.8.0.\r\n  Installing Microsoft.CodeAnalysis.Common 2.8.0.\r\n  Installing System.Security.Cryptography.Algorithms 4.2.0.\r\n  Installing Microsoft.IdentityModel.Protocols.OpenIdConnect 5.2.0.\r\n  Installing System.IdentityModel.Tokens.Jwt 5.2.0.\r\n  Installing Microsoft.IdentityModel.Protocols.WsFederation 5.2.0.\r\n  Installing System.Collections.Immutable 1.5.0.\r\n  Installing Remotion.Linq 2.2.0.\r\n  Installing System.Interactive.Async 3.1.1.\r\n  Installing Microsoft.Extensions.DependencyModel 2.1.0.\r\n  Installing Microsoft.NETCore.DotNetAppHost 2.1.0.\r\n  Installing Microsoft.NETCore.Platforms 2.0.0.\r\n  Installing System.Security.Cryptography.Pkcs 4.5.0.\r\n  Installing System.Security.Permissions 4.5.0.\r\n  Installing System.Security.AccessControl 4.5.0.\r\n  Installing NETStandard.Library 1.6.1.\r\n  Installing System.Text.Encoding.CodePages 4.5.0.\r\n  Installing System.Linq 4.3.0.\r\n  Installing runtime.native.System.Data.SqlClient.sni 4.4.0.\r\n  Installing System.Diagnostics.Debug 4.3.0.\r\n  Installing System.Globalization 4.3.0.\r\n  Installing System.IO 4.3.0.\r\n  Installing System.Collections 4.3.0.\r\n  Installing System.Runtime.Serialization.Primitives 4.3.0.\r\n  Installing System.Runtime.Serialization.Formatters 4.3.0.\r\n  Installing System.Xml.XmlDocument 4.3.0.\r\n  Installing System.Threading 4.3.0.\r\n  Installing System.Resources.ResourceManager 4.3.0.\r\n  Installing System.Text.Encoding.Extensions 4.3.0.\r\n  Installing System.Xml.XDocument 4.3.0.\r\n  Installing System.Threading.Tasks 4.3.0.\r\n  Installing System.Linq.Expressions 4.3.0.\r\n  Installing System.Runtime.Numerics 4.3.0.\r\n  Installing System.Text.Encoding 4.3.0.\r\n  Installing System.Reflection.Extensions 4.3.0.\r\n  Installing System.Text.RegularExpressions 4.3.0.\r\n  Installing System.Runtime.Extensions 4.3.0.\r\n  Installing System.Reflection 4.3.0.\r\n  Installing System.ObjectModel 4.3.0.\r\n  Installing System.Dynamic.Runtime 4.3.0.\r\n  Installing System.Xml.ReaderWriter 4.3.0.\r\n  Installing Microsoft.CSharp 4.3.0.\r\n  Installing System.ComponentModel.TypeConverter 4.3.0.\r\n  Installing System.Runtime 4.3.0.\r\n  Installing System.Reflection.Emit.ILGeneration 4.3.0.\r\n  Installing System.Reflection.Primitives 4.3.0.\r\n  Installing System.AppContext 4.3.0.\r\n  Installing System.Console 4.3.0.\r\n  Installing System.Collections.Concurrent 4.3.0.\r\n  Installing System.Diagnostics.Tools 4.3.0.\r\n  Installing System.Security.Cryptography.Encoding 4.0.0.\r\n  Installing System.IO.Compression 4.3.0.\r\n  Installing System.IO.FileSystem 4.3.0.\r\n  Installing System.IO.FileSystem.Primitives 4.3.0.\r\n  Installing System.Security.Cryptography.Encoding 4.3.0.\r\n  Installing System.Collections.Immutable 1.3.1.\r\n  Installing System.Runtime.InteropServices 4.3.0.\r\n  Installing System.Security.Cryptography.X509Certificates 4.1.0.\r\n  Installing System.Diagnostics.StackTrace 4.3.0.\r\n  Installing System.Reflection.Metadata 1.4.2.\r\n  Installing System.Threading.Thread 4.3.0.\r\n  Installing Microsoft.CodeAnalysis.Analyzers 1.1.0.\r\n  Installing System.Security.Cryptography.X509Certificates 4.3.0.\r\n  Installing System.ValueTuple 4.3.0.\r\n  Installing System.Diagnostics.FileVersionInfo 4.3.0.\r\n  Installing System.Threading.Tasks.Parallel 4.3.0.\r\n  Installing System.Security.Cryptography.Algorithms 4.3.0.\r\n  Installing System.Xml.XPath.XDocument 4.3.0.\r\n  Installing System.Text.Encoding.CodePages 4.3.0.\r\n  Installing System.Runtime.InteropServices 4.1.0.\r\n  Installing Microsoft.IdentityModel.Protocols 5.2.0.\r\n  Installing Microsoft.IdentityModel.Tokens 5.2.0.\r\n  Installing Microsoft.IdentityModel.Xml 5.2.0.\r\n  Installing System.Diagnostics.Debug 4.0.11.\r\n  Installing System.Reflection.Extensions 4.0.1.\r\n  Installing Microsoft.IdentityModel.Tokens.Saml 5.2.0.\r\n  Installing System.Runtime.Extensions 4.1.0.\r\n  Installing System.Threading 4.0.11.\r\n  Installing System.Collections 4.0.11.\r\n  Installing System.Reflection 4.1.0.\r\n  Installing System.ObjectModel 4.0.12.\r\n  Installing System.Linq 4.1.0.\r\n  Installing System.Linq.Queryable 4.0.1.\r\n  Installing System.Linq.Expressions 4.1.0.\r\n  Installing System.Runtime 4.1.0.\r\n  Installing NETStandard.Library 1.6.0.\r\n  Installing System.Dynamic.Runtime 4.0.11.\r\n  Installing Newtonsoft.Json 9.0.1.\r\n  Installing Microsoft.DotNet.PlatformAbstractions 2.1.0.\r\n  Installing System.Runtime.CompilerServices.Unsafe 4.5.0.\r\n  Installing runtime.win-x64.runtime.native.System.Data.SqlClient.sni 4.4.0.\r\n  Installing runtime.win-x86.runtime.native.System.Data.SqlClient.sni 4.4.0.\r\n  Installing runtime.win-arm64.runtime.native.System.Data.SqlClient.sni 4.4.0.\r\n  Installing Microsoft.NETCore.Platforms 1.1.0.\r\n  Installing Microsoft.Win32.Primitives 4.3.0.\r\n  Installing System.Net.Sockets 4.3.0.\r\n  Installing System.Diagnostics.Tracing 4.3.0.\r\n  Installing System.IO.Compression.ZipFile 4.3.0.\r\n  Installing System.Globalization.Calendars 4.3.0.\r\n  Installing System.Threading.Timer 4.3.0.\r\n  Installing System.Security.Cryptography.Primitives 4.3.0.\r\n  Installing System.Runtime.InteropServices.RuntimeInformation 4.0.0.\r\n  Installing System.Runtime.Handles 4.3.0.\r\n  Installing System.Runtime.InteropServices.RuntimeInformation 4.3.0.\r\n  Installing System.Net.Http 4.3.0.\r\n  Installing Microsoft.NETCore.Targets 1.1.0.\r\n  Installing System.Net.Primitives 4.3.0.\r\n  Installing System.Reflection.Emit.Lightweight 4.3.0.\r\n  Installing System.Reflection.TypeExtensions 4.3.0.\r\n  Installing System.Threading.Tasks.Extensions 4.3.0.\r\n  Installing System.ComponentModel 4.3.0.\r\n  Installing System.ComponentModel.Primitives 4.3.0.\r\n  Installing System.Collections.NonGeneric 4.3.0.\r\n  Installing System.Collections.Specialized 4.3.0.\r\n  Installing runtime.native.System 4.3.0.\r\n  Installing runtime.native.System.IO.Compression 4.3.0.\r\n  Installing System.Buffers 4.3.0.\r\n  Installing runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing runtime.native.System.Net.Http 4.3.0.\r\n  Installing System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing System.Security.Cryptography.Cng 4.3.0.\r\n  Installing System.Security.Cryptography.Csp 4.3.0.\r\n  Installing runtime.native.System.Security.Cryptography.Apple 4.3.0.\r\n  Installing System.Xml.XPath 4.3.0.\r\n  Installing Microsoft.IdentityModel.Logging 5.2.0.\r\n  Installing System.Diagnostics.Contracts 4.3.0.\r\n  Installing System.Runtime.Serialization.Xml 4.3.0.\r\n  Installing Microsoft.NETCore.Platforms 1.0.1.\r\n  Installing Microsoft.NETCore.Targets 1.0.1.\r\n  Installing System.Security.Claims 4.3.0.\r\n  Installing System.Reflection.Primitives 4.0.1.\r\n  Installing System.IO 4.1.0.\r\n  Installing System.Globalization 4.0.11.\r\n  Installing System.Threading.Tasks 4.0.11.\r\n  Installing System.Resources.ResourceManager 4.0.1.\r\n  Installing System.Reflection.Emit 4.0.1.\r\n  Installing System.Reflection.TypeExtensions 4.1.0.\r\n  Installing System.Reflection.Emit.ILGeneration 4.0.1.\r\n  Installing System.Reflection.Emit.Lightweight 4.0.1.\r\n  Installing System.AppContext 4.1.0.\r\n  Installing System.Collections.Concurrent 4.0.12.\r\n  Installing System.IO.FileSystem.Primitives 4.0.1.\r\n  Installing System.Runtime.Numerics 4.0.1.\r\n  Installing System.Security.Cryptography.Primitives 4.0.0.\r\n  Installing System.Xml.XDocument 4.0.11.\r\n  Installing System.Text.RegularExpressions 4.1.0.\r\n  Installing Microsoft.Win32.Primitives 4.0.1.\r\n  Installing System.Console 4.0.0.\r\n  Installing System.Diagnostics.Tools 4.0.1.\r\n  Installing System.Diagnostics.Tracing 4.1.0.\r\n  Installing System.Globalization.Calendars 4.0.1.\r\n  Installing System.IO.FileSystem 4.0.1.\r\n  Installing System.Net.Sockets 4.1.0.\r\n  Installing System.Text.Encoding 4.0.11.\r\n  Installing System.Threading.Timer 4.0.1.\r\n  Installing System.Net.Primitives 4.0.11.\r\n  Installing System.Runtime.Handles 4.0.1.\r\n  Installing System.Text.Encoding.Extensions 4.0.11.\r\n  Installing System.IO.Compression.ZipFile 4.0.1.\r\n  Installing System.IO.Compression 4.1.0.\r\n  Generating MSBuild file /mvcapp/obj/mvcapp.csproj.nuget.g.props.\r\n  Generating MSBuild file /mvcapp/obj/mvcapp.csproj.nuget.g.targets.\r\n  Restore completed in 44.04 sec for /mvcapp/mvcapp.csproj.\r\n\r\nRestore succeeded.\r\n\r\n\r\nreal    1m8.386s\r\nuser    1m8.010s\r\nsys     0m18.190s\r\nroot@9d1d5e45df6a:/# cd mvcapp/\r\nroot@9d1d5e45df6a:/mvcapp# time dotnet build\r\nMicrosoft (R) Build Engine version 15.7.179.6572 for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  Restore completed in 557.76 ms for /mvcapp/mvcapp.csproj.\r\n  mvcapp -> /mvcapp/bin/Debug/netcoreapp2.1/mvcapp.dll\r\n  mvcapp -> /mvcapp/bin/Debug/netcoreapp2.1/mvcapp.Views.dll\r\n\r\nBuild succeeded.\r\n    0 Warning(s)\r\n    0 Error(s)\r\n\r\nTime Elapsed 00:02:07.34\r\n\r\nreal    2m11.716s\r\nuser    1m22.990s\r\nsys     0m8.880s\r\nroot@9d1d5e45df6a:/mvcapp#\r\n```\r\n","Url":"https://github.com/dotnet/announcements/issues/80","RelatedDescription":"Closed issue \"Improving Performance of ARM32 Docker Images with .NET Core Package Cache\" (#80)"},{"Id":"350233220","IsPullRequest":false,"CreatedAt":"2018-08-13T23:50:57","Actor":"richlander","Number":"81","RawContent":null,"Title":"Advisory serializing/deserializing a CultureAwareComparer with .NET Framework 4.6+","State":"open","Body":"# Advisory serializing/deserializing a CultureAwareComparer with .NET Framework 4.6+\r\n\r\nAn [issue with serializing/deserializing a CultureAwareComparer](https://github.com/Microsoft/dotnet/blob/master/releases/net471/KnownIssues/521954%20-%20BCL%20CultureAwareComparer%20with%20ignore%20casing%20on%20serialized%20on%20previous%20versions%20of%20.NET%20do%20not%20correctly%20deserialize%20on%20.NET%204.7.1.md) was discovered with [.NET Framework 4.7.1](https://blogs.msdn.microsoft.com/dotnet/2017/10/17/announcing-the-net-framework-4-7-1/). This issue was resolved earlier this year, with the [May 2018 Preview of Quality Rollup](https://blogs.msdn.microsoft.com/dotnet/2018/05/15/net-framework-may-2018-preview-of-quality-rollup/). We recently learned that some applications, including Johnson Controls’ C-CURE 9000 Software, were negatively impacted by this change as this update requires all client and server workstations to be updated simultaneously with the appropriate Microsoft updates. The changes made to .NET Framework 4.7.1 were also integrated into .NET Framework 4.6 and later servicing releases. As a result, this advisory applies to .NET Framework 4.6 and later versions.\r\n\r\nThis advisory is provided so that developers can correctly diagnose this issue and be aware of our guidance. We will continue to update this issue as we have new information to share.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [microsoft/dotnet #832](https://github.com/Microsoft/dotnet/issues/832)\r\n\r\n## Guidance\r\n\r\nThis guidance only applies to customers that have experienced this issue.\r\n\r\nWe have released [an update for .NET Framework 4.6](https://blogs.msdn.microsoft.com/dotnet/2018/08/30/net-framework-august-2018-preview-of-quality-rollup/) and later that resolves the issue. **You must deploy the .NET Framework update for this issue to all .NET Framework 4.6+ machines that communicate via serialized objects**. After doing that, cross-machine serialization will work as expected. \r\n \r\nPlease consult your software vendor to understand if this impacts the software you are using.\r\n\r\n## Technical Context\r\n\r\nIn the [May 2018 Preview of Quality Rollup](https://blogs.msdn.microsoft.com/dotnet/2018/05/15/net-framework-may-2018-preview-of-quality-rollup/), we made a change to the internal type CultureAwareComparer to implement ISerializable. We made the change in order to address [issue with serializing/deserializing a CultureAwareComparer](https://github.com/Microsoft/dotnet/blob/master/releases/net471/KnownIssues/521954%20-%20BCL%20CultureAwareComparer%20with%20ignore%20casing%20on%20serialized%20on%20previous%20versions%20of%20.NET%20do%20not%20correctly%20deserialize%20on%20.NET%204.7.1.md).\r\n\r\nThe issue reported was that a type that contains an instance of CultureAwareComparer was not able to correctly serialize and deserialize across different versions of the .NET Framework. There are a few types in .NET Framework that do this, the most commonly impacted one being the Dictionary<TKey, TValue> type.\r\n \r\nThe change to implement the ISerializable interface had unintended side effects when exchanging this type across different machines. We have had a small number of reports from customers who have been affected.\r\n\r\nA common, but not unique way, of exchanging objects across machines is to use WCF in conjunction with a serializer. One of the common serializers being DataContractSerializer. The side-effect of the change prevented data serialized on systems where the type implements ISerializable to correctly deserialize of systems where the type does NOT implement ISerializable. The same is true of the opposite case, that systems where the type does not implement ISerializable will not correctly deserialize data from systems where the type does implement ISerializable.\r\n\r\nWe have an updated fix that we intend to release within the next month that will remove the implementation of the ISerializable interface on the type and use a different internal mechanism for ensuring the cross-version serialization continues to work as expected. This change addresses the break experienced with WCF.\r\n\r\nThe upcoming fix will remove the implementation of the ISerializable interface on the type and use a different mechanism for ensuring the cross-version serialization of that type continues to work. This change addresses the break experienced with WCF.\r\n\r\n## Symptoms\r\n\r\nAn application that is affected by this issue will most likely crash when trying to deserialize an object. It may print or log an error message similar to the following one:\r\n\r\n```\r\nThe formatter threw an exception while trying to deserialize the message: \r\nThere was an error while trying to deserialize parameter . The InnerException message was ''EndElement' 'Comparer' from namespace '' is not expected. Expecting element '_compareInfo'.'.  Please see InnerException for more details.\r\n```\r\n","Url":"https://github.com/dotnet/announcements/issues/81","RelatedDescription":"Open issue \"Advisory serializing/deserializing a CultureAwareComparer with .NET Framework 4.6+\" (#81)"},{"Id":"348162872","IsPullRequest":false,"CreatedAt":"2018-08-07T04:26:40","Actor":"richlander","Number":"79","RawContent":null,"Title":"August 2018 .NET Updates","State":"open","Body":"# August 2018 .NET Updates\r\n\r\nThe following .NET updates were released in August 2018. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Framework \r\n\r\n* [August 2018 .NET Framework Security and Quality Rollup - August 14, 2018](https://blogs.msdn.microsoft.com/dotnet/2018/08/14/august-2018-security-and-quality-rollup/)\r\n* [Advisory serializing/deserializing a CultureAwareComparer with .NET Framework 4.6+](https://github.com/dotnet/announcements/issues/81)\r\n* [Advisory on July 2018 .NET Framework Updates](https://blogs.msdn.microsoft.com/dotnet/2018/07/20/advisory-on-july-2018-net-framework-updates/)\r\n* [August 2018 Preview of Quality Rollup - August 30, 2018](https://blogs.msdn.microsoft.com/dotnet/2018/08/30/net-framework-august-2018-preview-of-quality-rollup/)\r\n\r\n## .NET Core\r\n\r\n* [.NET Core August 2018 Update - August 21, 2018](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.3/2.1.3.md)\r\n* [.NET Core 2.1.400 SDK Update - August 14, 2018](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.400-SDK/2.1.400-sdk.md)\r\n\r\n## End of Support for Operating System Versions\r\n\r\n.NET Core does not support systems that are out of support. The following operating systems are now out of support. To stay supported, move to a [later version of the given operating system](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md).\r\n\r\n* [Debian 8 -- Jessie](https://lists.debian.org/debian-security-announce/2018/msg00132.html)\r\n* [Ubuntu 17.10 -- Artful Aardvark](https://lists.ubuntu.com/archives/ubuntu-announce/2018-July/000232.html)\r\n\r\nSee [Debian Jessie End of Life -- Impact on .NET Core Docker Images](https://github.com/dotnet/announcements/issues/78)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)","Url":"https://github.com/dotnet/announcements/issues/79","RelatedDescription":"Open issue \"August 2018 .NET Updates\" (#79)"},{"Id":"348161534","IsPullRequest":false,"CreatedAt":"2018-08-07T04:18:01","Actor":"richlander","Number":"78","RawContent":null,"Title":"Debian Jessie End of Life -- Impact on .NET Core Docker Images","State":"open","Body":"# Debian Jessie End of Life -- Impact on .NET Core Docker Images\r\n\r\nDebian Jessie (AKA Debian 8) is now [out of support](https://lists.debian.org/debian-security-announce/2018/msg00132.html). Debian Jessie is no longer a supported operating system for .NET Core. Docker users need to switch to Debian Stretch-based (AKA Debian 9) images to stay in support.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet/dotnet-docker #647](https://github.com/dotnet/dotnet-docker/issues/647)\r\n\r\n## Context\r\n\r\nJessie-based images are currently provided for .NET Core 1.0, 1.1 and 2.0. .NET Core 1.0 and 1.1 expose multi-arch tags, such as `1.0-runtime` and `1.1-sdk`, that support Debian Jessie. When pulled for a Linux Docker daemon (on Linux or Windows), these tags pull Jessie-based images. .NET Core 2.0 supports Jessie, but it is not the default. .NET Core 2.0 multi-arch tags, such as `2.0-runtime` and `2.0-sdk`, pull Debian Stretch-based images, when pulled for a Linux Docker daemon. We made a conscious decision with .NET Core 2.0 to move off of Jessie as the default to avoid this problem, based the Jessie 2018 EOL date. .NET Core 2.1 does not support Jessie, only Stretch.\r\n\r\nWe recently posted about our policy for underlying operating system dependencies with Docker:\r\n\r\n> For each major and minor .NET version, we may take a new major operating system version dependency. As I mentioned earlier, we adopted Debian 9 as the base image for .NET Core 2.0. We stayed with Debian 9 for .NET Core 2.1, since Debian 10 (AKA “Buster”) has not been released. Debian 9 will remain the default base image for .NET Core 2.1 for the life of .NET Core 2.1. **Once we adopt an underlying operating system major version, we will not change it for the life of that given .NET release.**\r\n\r\nSource: https://blogs.msdn.microsoft.com/dotnet/2018/06/18/staying-up-to-date-with-net-container-images/\r\n\r\n## Plan\r\n\r\nWe will continue to re-build .NET Core 1.0 and 1.1 multi-arch tags on top of Jessie for the remaining [supported lifetime of .NET Core 1.0 and 1.1](https://github.com/dotnet/core/blob/master/microsoft-support.md). We will also provide a Stretch-based image for .NET Core 1.1. This tag will look like the following: `1.1-runtime-stretch` or `1.1.9-sdk-stretch`. This is same format that Jessie has used.\r\n\r\nWe will produce Jessie-based images for NET Core 2.0 until October 2018, which is when [.NET Core 2.0 support ends](https://github.com/dotnet/core/blob/master/microsoft-support.md). .NET Core 2.0 multi-arch tags support Debian Stretch, not Jessie, as described above.\r\n\r\nIn summary, .NET Core is no longer supported on Debian Jessie, with Docker or otherwise. We will produce Docker images for Jessie until .NET Core 1.0, 1.1 and 2.0 support ends, respectively, to avoid breaking applications. This aligns with the policy defined above, per [Staying up-to-date with .NET Container Images](https://blogs.msdn.microsoft.com/dotnet/2018/06/18/staying-up-to-date-with-net-container-images/).\r\n\r\n## Affected Repos\r\n\r\n* [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/)\r\n* [microsoft/dotnet-nightly](https://hub.docker.com/r/microsoft/dotnet-nightly/)\r\n* [microsoft/aspnetcore](https://hub.docker.com/r/microsoft/aspnetcore/)\r\n* [microsoft/aspnetcore-build](https://hub.docker.com/r/microsoft/aspnetcore-build/)","Url":"https://github.com/dotnet/announcements/issues/78","RelatedDescription":"Open issue \"Debian Jessie End of Life -- Impact on .NET Core Docker Images\" (#78)"},{"Id":"345028102","IsPullRequest":false,"CreatedAt":"2018-07-26T22:31:32","Actor":"leecow","Number":"77","RawContent":null,"Title":"https://dot.net now using TLS 1.2-only","State":"open","Body":"Earlier today, https://dot.net switched to using TLS 1.2-only. Most Windows Powershell instances default to TLS 1.1 and will thus fail with `wget : The underlying connection was closed: An unexpected error occurred on a send. trying to run the previous command.`\r\n\r\nAn example of a PowerShell script fix can be seen in https://github.com/dotnet/docs/pull/6689","Url":"https://github.com/dotnet/announcements/issues/77","RelatedDescription":"Open issue \"https://dot.net now using TLS 1.2-only\" (#77)"}],"ResultType":"GitHubIssue"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1115751220235231232","CreatedAt":"2019-04-09T22:59:55+00:00","UserScreenname":"dotnet","Text":"Join us live right now for another @dotnet #CommunityStandup with live demoes and QA https://t.co/ptNZnKrqoO","Source":"<a href=\"https://www.elgato.com/gaming\" rel=\"nofollow\">Elgato Stream Deck</a>","RetweetCount":12,"FavoriteCount":1,"RawContent":null},{"Id":"1115373724868333570","CreatedAt":"2019-04-08T21:59:53+00:00","UserScreenname":"dotnet","Text":"On this week's @aspnet Community Standup, Glenn Condron (@condrong) takes Workers Everywhere!\n\nJoin us on Tuesday A… https://t.co/wo80u0zkOk","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":16,"FavoriteCount":13,"RawContent":null},{"Id":"1114554336577609729","CreatedAt":"2019-04-06T15:43:55+00:00","UserScreenname":"dotnet","Text":"Using Windows Installer XML (WiX)? Time to say congrats to @robmen,  @barnson and all the other contributors of… https://t.co/P1rw6S2wGf","Source":"<a href=\"http://twitter.com/#!/download/ipad\" rel=\"nofollow\">Twitter for iPad</a>","RetweetCount":60,"FavoriteCount":14,"RawContent":null},{"Id":"1113832934580948993","CreatedAt":"2019-04-04T15:57:20+00:00","UserScreenname":"dotnet","Text":"Join us live right now for another @dotnet #CommunityStandup with live demoes and QA https://t.co/ptNZnKrqoO","Source":"<a href=\"https://www.elgato.com/gaming\" rel=\"nofollow\">Elgato Stream Deck</a>","RetweetCount":14,"FavoriteCount":6,"RawContent":null}]}},"RunOn":"2019-04-11T05:30:36.8534669Z","RunDurationInMilliseconds":14384}