{"Data":{"GitHub":{"Issues":[{"Id":"364310241","IsPullRequest":true,"CreatedAt":"2018-09-27T05:28:07","Actor":"sfilipi","Number":"1068","RawContent":null,"Title":"WIP - Ranker train context and FastTree ranking xtensions","State":"open","Body":"ongoing work to address #754 . \r\nThis PR adds the RankerContext, and the FastTree extension for the FastTreeRanker. \r\n\r\nStill not complete because it fails to retrieve the MaxDcg metric. \r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/1068","RelatedDescription":"Open PR \"WIP - Ranker train context and FastTree ranking xtensions\" (#1068)"},{"Id":"364264009","IsPullRequest":false,"CreatedAt":"2018-09-27T00:47:03","Actor":"codemzs","Number":"1067","RawContent":null,"Title":"Update LightGBM nuget so that there is no dependency on GCC","State":"open","Body":"Currently lightgbm nuget depends on a binary for openmp that comes from gcc compiler but having to install gcc compiler on build machines causes slowdown. Update the nuget to the newest version that removes this dependency because lightgbm native code is compiled using clang.","Url":"https://github.com/dotnet/machinelearning/issues/1067","RelatedDescription":"Open issue \"Update LightGBM nuget so that there is no dependency on GCC\" (#1067)"},{"Id":"364263845","IsPullRequest":true,"CreatedAt":"2018-09-27T00:45:55","Actor":"codemzs","Number":"1066","RawContent":null,"Title":"Update lightgbm nuget version so that it does not depend on gcc.","State":"open","Body":"fixes #1067\r\nfixes #494","Url":"https://github.com/dotnet/machinelearning/pull/1066","RelatedDescription":"Open PR \"Update lightgbm nuget version so that it does not depend on gcc.\" (#1066)"},{"Id":"364248147","IsPullRequest":false,"CreatedAt":"2018-09-27T00:19:37","Actor":"Ivanidzo4ka","Number":"1064","RawContent":null,"Title":"File name collision during parallel tests execution.","State":"closed","Body":"In our routine shared across multiple tests we ask for test name and then create file based on it.\r\nWhere is no limitation on having tests with same name which leads to sporadic crashes on build machines like this:\r\nhttps://dnceng.visualstudio.com/public/_build/results?buildId=24407&view=ms.vss-test-web.test-result-details  ","Url":"https://github.com/dotnet/machinelearning/issues/1064","RelatedDescription":"Closed issue \"File name collision during parallel tests execution.\" (#1064)"},{"Id":"364235811","IsPullRequest":true,"CreatedAt":"2018-09-27T00:13:35","Actor":"eerhardt","Number":"1058","RawContent":null,"Title":"Remove the error tracing when assembly loading fails for Maml.","State":"closed","Body":"Also adding our native assemblies to the list to skip, so they aren't attempted to be loaded.\r\n\r\nFix #1034\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/1058","RelatedDescription":"Closed or merged PR \"Remove the error tracing when assembly loading fails for Maml.\" (#1058)"},{"Id":"364255963","IsPullRequest":false,"CreatedAt":"2018-09-26T23:59:56","Actor":"artidoro","Number":"1065","RawContent":null,"Title":"WeightColumn name defaults to \"Weights\" in one of the constructors of the estimators","State":"open","Body":"Estimators that are instantiated through MAML without specifying a weightcolumn are instead created with default weightcolumn named \"Weights\".\r\n\r\n**More details:**\r\nThe constructor for estimator objects that is used by MAML takes an Arguments object, which has a weight column name that defaults to \"Weights\". To be precise it defaults to an Optional<string> with implicit value of \"Weights\".\r\n\r\nWhen we instantiate the estimator through that constructor, we need to pass a SchemaShape.Column object to the base class TrainerEstimatorBase. This column is in most cases constructed with a method that takes the column name as specified in the Arguments object. As the default value in the Arguments object is not null, it is \"Weights\", this method does not return null, but returns a new SchemaShape.Column named Weights.\r\n\r\n\r\n**The rational:**\r\nThe new API's rational is as follows:\r\n1.  the user needs to specify a weight column name, if the name is not null we check the presence of the column\r\n2.  if the user does not define a weight column name (it is null), we assume there is no weight column\r\n\r\nThe old MAML's rational:\r\n1.  same as above\r\n2. if the user does not specify a weight column name:\r\n    -  if there is a column named \"Weights\" it will be taken as the weights column automatically\r\n    - if there is no column name \"Weights\", we assume that there is no weight column\r\n\r\n\r\n**What we have to do:**\r\nWe have to fix the current instantiation of estimators through MAML, and decide if we want to continue using a different behavior for the command line and the C# API. ","Url":"https://github.com/dotnet/machinelearning/issues/1065","RelatedDescription":"Open issue \"WeightColumn name defaults to \"Weights\" in one of the constructors of the estimators\" (#1065)"},{"Id":"364243775","IsPullRequest":false,"CreatedAt":"2018-09-26T23:31:12","Actor":"chris-lauren","Number":"1062","RawContent":null,"Title":"0.6: Legacy Entry point Transforms.TextFeaturizer not found","State":"closed","Body":"### System information\r\n\r\n- **OS version/distro**: Windows 10\r\n- **.NET Version (eg., dotnet --info)**: .NET Core SDK (reflecting any global.json):\r\n Version:   2.1.401\r\n Commit:    91b1c13032\r\n\r\n### Issue\r\n\r\n- **What did you do?** Ran old sentiment analysis example, updated all using to use legacy namespace\r\n- **What happened?** Legacy Entry point Transforms.TextFeaturizer not found\r\n- **What did you expect?** Expected all entrypoints to work\r\n\r\n### Source code / logs\r\n/* This template shows the building blocks for training a machine learning model with ML.NET (https://aka.ms/mlnet).\r\n * This model predicts whether a sentence has a positive or negative sentiment. It is based on a sample that can be \r\n * found at https://aka.ms/mlnetsentimentanalysis, which provides a more detailed introduction to ML.NET and the scenario.*/\r\n\r\nusing System;\r\nusing Microsoft.ML;\r\nusing Microsoft.ML.Data;\r\nusing Microsoft.ML.Legacy;\r\nusing Microsoft.ML.Legacy.Data;\r\nusing Microsoft.ML.Legacy.Models;\r\nusing Microsoft.ML.Legacy.Trainers;\r\nusing Microsoft.ML.Legacy.Transforms;\r\nusing Microsoft.ML.Runtime.Api;\r\nusing Microsoft.ML.Trainers;\r\nusing Microsoft.ML.Transforms;\r\n\r\nnamespace MLNETConsoleApp2\r\n{\r\n    class Program\r\n    {\r\n        static void Main()\r\n        {\r\n\r\n            //1. Build an ML.NET pipeline for training a sentiment analysis model\r\n            Console.WriteLine(\"Training a model for Sentiment Analysis using ML.NET\");\r\n            var pipeline = new LearningPipeline\r\n            {\r\n                // 1a. Load the training data using a TextLoader.\r\n                new TextLoader(@\"Data\\wikipedia-detox-250-line-data.tsv\").CreateFrom<SentimentData>(useHeader: true),\r\n\r\n                // 1b. Featurize the text into a numeric vector that can be used by the machine learning algorithm.\r\n                new TextFeaturizer(\"Features\", \"SentimentText\"),\r\n\r\n                // 1c. Add AveragedPerceptron (a linear learner) to the pipeline.\r\n                new AveragedPerceptronBinaryClassifier() { NumIterations = 10 }\r\n            };\r\n\r\n            // 1d. Get a model by training the pipeline that was built.\r\n            PredictionModel<SentimentData, SentimentPrediction> model = pipeline.Train<SentimentData, SentimentPrediction>();\r\n\r\n            // 2. Evaluate the model to see how well it performs on different data (output the percent of examples classified correctly).\r\n            Console.WriteLine(\"Training of model is complete \\nTesting the model with test data\");\r\n            var testData = new TextLoader(@\"Data\\wikipedia-detox-250-line-test.tsv\").CreateFrom<SentimentData>(useHeader: true);\r\n            var evaluator = new BinaryClassificationEvaluator();\r\n            BinaryClassificationMetrics metrics = evaluator.Evaluate(model, testData);\r\n            Console.WriteLine($\"Accuracy of trained model for test data is: {metrics.Accuracy:P2}\");\r\n\r\n            // 3. Save the model to file so it can be used in another app.\r\n            model.WriteAsync(\"sentiment_model.zip\");\r\n\r\n            // 4. Use the model for a single prediction.\r\n            SentimentData testInput = new SentimentData { SentimentText = \"ML.NET is fun, more samples at https://github.com/dotnet/machinelearning-samples\" };\r\n            var sentiment = model.Predict(testInput).Sentiment ? \"Positive\" : \"Negative\";\r\n\r\n            /* This template uses a minimal dataset to build a sentiment analysis model which leads to relatively low accuracy. \r\n             * Building good Machine Learning models require large volumes of data. This template comes with a minimal dataset (Data/wikipedia-detox) for sentiment analysis. \r\n             * In order to build a sentiment analysis model with higher accuracy please follow the walkthrough at https://aka.ms/mlnetsentimentanalysis*/\r\n            Console.WriteLine($\"Predicted sentiment for \\\"{testInput.SentimentText}\\\" is: {sentiment}\");\r\n        }\r\n\r\n        /// <summary>\r\n        /// Input class that tells ML.NET how to read the dataset (which columns are included)\r\n        /// </summary>\r\n        public class SentimentData\r\n        {\r\n            [Column(ordinal: \"0\", name: \"Label\")]\r\n            public float Sentiment;\r\n            [Column(ordinal: \"1\")]\r\n            public string SentimentText;\r\n        }\r\n\r\n        /// <summary>\r\n        /// Output class for the prediction, in this case including only the predicted sentiment.\r\n        /// </summary>\r\n        public class SentimentPrediction\r\n        {\r\n            [ColumnName(\"PredictedLabel\")]\r\n            public bool Sentiment;\r\n        }\r\n    }\r\n}\r\n\r\nPlease paste or attach the code or logs or traces that would be helpful to diagnose the issue you are reporting.\r\n","Url":"https://github.com/dotnet/machinelearning/issues/1062","RelatedDescription":"Closed issue \"0.6: Legacy Entry point Transforms.TextFeaturizer not found\" (#1062)"},{"Id":"364244442","IsPullRequest":true,"CreatedAt":"2018-09-26T22:59:48","Actor":"zeahmed","Number":"1063","RawContent":null,"Title":"WIP: Making TensorFlowTransform trainable.","State":"open","Body":"This is the work in progress PR which addressed #951 where user can retrain TensorFlow models using TensorFlowTransform in ML.Net.\r\n\r\nThe implemented training functionality is an add-on feature on top of current implementation of TensorFlowTransform where model scoring using TensorFlowTransform is untouched.\r\n\r\nCurrent implementation includes\r\n- Retraining of un-frozen model (saved with simple_save method in python).\r\n- Support for batch training\r\n\r\n#### ToDo\r\n- Serializing retrained model into ML.Net stream. <b>It seems like a big challenge right now because TensorFlow C-API does not support serialization of `TFSession` objects which contains all the retrained parameter.</b>\r\n- Turn TensorFlowEstimator from TrivialEstimator to NonTrivialEstimator. This is because TensorFlowTransform now trains model in one of the constructor call where `TrainingArguments` are passed.\r\n- Think about how we can get ride of data copying during creation of batches.\r\n","Url":"https://github.com/dotnet/machinelearning/pull/1063","RelatedDescription":"Open PR \"WIP: Making TensorFlowTransform trainable.\" (#1063)"},{"Id":"364241914","IsPullRequest":false,"CreatedAt":"2018-09-26T22:48:10","Actor":"Zruty0","Number":"1061","RawContent":null,"Title":"Our linear models are unbiased (at least in public)","State":"open","Body":"You can extract weights out of the `MulticlassLogisticRegressionPredictor` now:\r\n\r\n```c#\r\nMulticlassLogisticRegressionPredictor predictor;\r\nVBuffer<float>[] weights = null;\r\npredictor.GetWeights(ref weights, out int numClasses);\r\n```\r\n\r\nThere is no way to extract `_biases` out of the predictor though.  And we should have a way.\r\nThere's an `internal` method that accessed biases, but no `public` method to do so.","Url":"https://github.com/dotnet/machinelearning/issues/1061","RelatedDescription":"Open issue \"Our linear models are unbiased (at least in public)\" (#1061)"},{"Id":"364239221","IsPullRequest":false,"CreatedAt":"2018-09-26T22:36:04","Actor":"zeahmed","Number":"1060","RawContent":null,"Title":"TensorFlowTransform does not work on Scalar column...","State":"open","Body":"The following line throws exception when using with scalar columns (non-pigsty case).\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/759ac33ef064c75cb977bfd6e6081186b295c6f5/src/Microsoft.ML.TensorFlow/TensorflowTransform.cs#L419\r\n\r\n[I will add a concrete example here.]","Url":"https://github.com/dotnet/machinelearning/issues/1060","RelatedDescription":"Open issue \"TensorFlowTransform does not work on Scalar column...\" (#1060)"},{"Id":"364237922","IsPullRequest":false,"CreatedAt":"2018-09-26T22:30:32","Actor":"artidoro","Number":"1059","RawContent":null,"Title":"Warninig messages when using types not supporting missing values as labels","State":"open","Body":"### System information\r\n\r\n- **OS version/distro**: Windows 10\r\n- **.NET Version**: \r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.1.402\r\n Commit:    3599f217f4\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.402\\\r\n\r\nHost (useful for support):\r\n  Version: 2.1.4\r\n  Commit:  85255dde3e\r\n```\r\n\r\n### Issue\r\n\r\n- **What did you do?**\r\nI updated [this tutorial ](https://www.microsoft.com/net/learn/machinelearning-ai/ml-dotnet-get-started-tutorial#install-package) to the new API (see code below), and ran it. \r\n\r\n- **What happened?**\r\nI got the following output and **warning**:\r\n```\r\nAuto-tuning parameters: UseCat = False\r\nAuto-tuning parameters: LearningRate = 0.2\r\nAuto-tuning parameters: NumLeaves = 20\r\nAuto-tuning parameters: MinDataPerLeaf = 5\r\nAuto-tuning parameters: UseSoftmax = False\r\nLightGBM objective=multiclassova\r\nWarning: There is no NA value for type 'I4'. The missing key value will be mapped to the default value of 'I4'\r\nWarning: There is no NA value for type 'I4'. The missing key value will be mapped to the default value of 'I4'\r\nWarning: There is no NA value for type 'I4'. The missing key value will be mapped to the default value of 'I4'\r\nPredicted flower type is: 2\r\n```\r\n\r\n- **What did you expect?**\r\n\r\nI did not expect any warning for using integers as labels. It is a warning from [KeyToValueTransform](https://github.com/dotnet/machinelearning/blob/759ac33ef064c75cb977bfd6e6081186b295c6f5/src/Microsoft.ML.Data/Transforms/KeyToValueTransform.cs#L332). The same warning appears when using string labels instead of integer labels. \r\n\r\nI think the reason for the warning is that KeyToValue might be lossy, since we do not support missing values for integers, and we warn the user every time integer labels are used. We currently map missing values to the default value of int which is 0. If we are using 0 as a label, which is a very reasonable thing to do with int labels, we would be mapping missing labels to an existing label. \r\n\r\nWe don't want this warning to be displayed every time, since integer labels are reasonable to have. A possible solution might be **not to warn** the user every time that integer labels are used, but instead **only warn when missing integer labels are mapped to an existing label**.\r\n\r\n\r\n\r\n\r\n\r\n___________________________________________\r\nCode that I ran:\r\n```\r\nusing Microsoft.ML.Runtime.Api;\r\nusing Microsoft.ML.Runtime.Data;\r\nusing Microsoft.ML.Runtime.LightGBM;\r\nusing System;\r\n\r\nnamespace myApp\r\n{\r\n    class Program\r\n    {\r\n        // STEP 1: Define your data structures\r\n\r\n        // IrisData is used to provide training data, and as \r\n        // input for prediction operations\r\n        // - First 4 properties are inputs/features used to predict the label\r\n        // - Label is what you are predicting, and is only set when training\r\n        public class IrisData\r\n        {\r\n            [Column(\"0\")]\r\n            public float SepalLength;\r\n\r\n            [Column(\"1\")]\r\n            public float SepalWidth;\r\n\r\n            [Column(\"2\")]\r\n            public float PetalLength;\r\n\r\n            [Column(\"3\")]\r\n            public float PetalWidth;\r\n\r\n            [Column(\"4\")]\r\n            [ColumnName(\"Label\")]\r\n            public int Label;\r\n        }\r\n\r\n        // IrisPrediction is the result returned from prediction operations\r\n        public class IrisPrediction\r\n        {\r\n            [ColumnName(\"PredictedLabel\")]\r\n            public int PredictedLabels;\r\n        }\r\n\r\n        static TextLoader.Arguments GetIrisLoaderArgs()\r\n        {\r\n            return new TextLoader.Arguments()\r\n            {\r\n                Separator = \"comma\",\r\n                HasHeader = true,\r\n                Column = new[]\r\n                {\r\n                    new TextLoader.Column(\"SepalLength\", DataKind.R4, 0),\r\n                    new TextLoader.Column(\"SepalWidth\", DataKind.R4, 1),\r\n                    new TextLoader.Column(\"PetalLength\", DataKind.R4, 2),\r\n                    new TextLoader.Column(\"PetalWidth\", DataKind.R4, 3),\r\n                    new TextLoader.Column(\"Label\", DataKind.I4, 4)\r\n                }\r\n            };\r\n        }\r\n\r\n        static void Main(string[] args)\r\n        {\r\n            // STEP 2: Create a pipeline and load your data\r\n            //var pipeline = new LearningPipeline();\r\n            var env = new ConsoleEnvironment();\r\n\r\n            // If working in Visual Studio, make sure the 'Copy to Output Directory' \r\n            // property of iris-data.txt is set to 'Copy always'\r\n            string dataPath = \"iris-data.txt\";\r\n            var data = new TextLoader(env, GetIrisLoaderArgs()).Read(new MultiFileSource(dataPath));\r\n\r\n            // STEP 3: Transform your data\r\n            // Assign numeric values to text in the \"Label\" column, because only\r\n            // numbers can be processed during model training\r\n            var pipeline = new TermEstimator(env, \"Label\")\r\n                // Puts all features into a vector\r\n                .Append(new ConcatEstimator(env, \"Features\", new string[] { \"SepalLength\", \"SepalWidth\", \"PetalLength\", \"PetalWidth\" }))\r\n                // STEP 4: Add learner\r\n                // Add a learning algorithm to the pipeline. \r\n                // This is a classification scenario (What type of iris is this?)\r\n                .Append(new LightGbmMulticlassTrainer(env, \"Label\", \"Features\"))\r\n                // Convert the Label back into original text (after converting to number in step 3)\r\n                .Append(new KeyToValueEstimator(env, \"PredictedLabel\"));\r\n\r\n            // STEP 5: Train your model based on the data set\r\n            var model = pipeline.Fit(data);\r\n            var engine = model.MakePredictionFunction<IrisData, IrisPrediction>(env);\r\n\r\n            // STEP 6: Use your model to make a prediction\r\n            // You can change these numbers to test different predictions\r\n            var prediction = engine.Predict(new IrisData()\r\n            {\r\n                SepalLength = 3.3f,\r\n                SepalWidth = 1.6f,\r\n                PetalLength = 0.2f,\r\n                PetalWidth = 5.1f,\r\n            });\r\n\r\n            Console.WriteLine($\"Predicted flower type is: {prediction.PredictedLabels}\");\r\n            Console.ReadLine();\r\n        }\r\n    }\r\n}\r\n```","Url":"https://github.com/dotnet/machinelearning/issues/1059","RelatedDescription":"Open issue \"Warninig messages when using types not supporting missing values as labels\" (#1059)"},{"Id":"364210602","IsPullRequest":false,"CreatedAt":"2018-09-26T22:02:12","Actor":"codemzs","Number":"1049","RawContent":null,"Title":"Assembly fails to load when running a pipeline from console app","State":"closed","Body":"dotnet MML.dll train data=\"E:\\dataset\\day_0_sample.txt\" loader=TextLoader{col=Label:R4:0 col=NumFeatures:R4:1-13 col=LowCardCat:TX:19,22,30,33 col=HighCardCat:TX:~} xf=CategoricalTransform{col=LowCardCat} xf=CategoricalHashTransform{col=HighCardCat bits=16} xf=MissingValueIndicatorTransform{col=NumFeatures} xf=Concat{ col=Features:NumFeatures,LowCardCat,HighCardCat } cache- tr=ap{iter=10} out=e:\\data\\model.zip\r\n\r\nCould not load assembly E:\\machinelearning\\bin\\AnyCPU.Release\\Microsoft.ML.Console\\netcoreapp2.1\\CpuMathNative.dll:\r\nSystem.BadImageFormatException: Bad IL format.\r\n   at System.Runtime.Loader.AssemblyLoadContext.LoadFromPath(IntPtr ptrNativeAssemblyLoadContext, String ilPath, String niPath, ObjectHandleOnStack retAssembly)\r\n   at System.Runtime.Loader.AssemblyLoadContext.LoadFromAssemblyPath(String assemblyPath)\r\n   at System.Reflection.Assembly.LoadFrom(String assemblyFile)\r\n   at Microsoft.ML.Runtime.AssemblyLoadingUtils.LoadAssembly(IHostEnvironment env, String path) in E:\\machinelearning\\src\\Common\\AssemblyLoadingUtils.cs:line 207\r\nCould not load assembly E:\\machinelearning\\bin\\AnyCPU.Release\\Microsoft.ML.Console\\netcoreapp2.1\\FactorizationMachineNative.dll:\r\nSystem.BadImageFormatException: Bad IL format.\r\n   at System.Runtime.Loader.AssemblyLoadContext.LoadFromPath(IntPtr ptrNativeAssemblyLoadContext, String ilPath, String niPath, ObjectHandleOnStack retAssembly)\r\n   at System.Runtime.Loader.AssemblyLoadContext.LoadFromAssemblyPath(String assemblyPath)\r\n   at System.Reflection.Assembly.LoadFrom(String assemblyFile)\r\n   at Microsoft.ML.Runtime.AssemblyLoadingUtils.LoadAssembly(IHostEnvironment env, String path) in E:\\machinelearning\\src\\Common\\AssemblyLoadingUtils.cs:line 207\r\nSkipping assembly 'E:\\machinelearning\\bin\\AnyCPU.Release\\Microsoft.ML.Console\\netcoreapp2.1\\FastTreeNative.dll' because its name was filtered.\r\nCould not load assembly E:\\machinelearning\\bin\\AnyCPU.Release\\Microsoft.ML.Console\\netcoreapp2.1\\LdaNative.dll:\r\nSystem.BadImageFormatException: Bad IL format.\r\n   at System.Runtime.Loader.AssemblyLoadContext.LoadFromPath(IntPtr ptrNativeAssemblyLoadContext, String ilPath, String niPath, ObjectHandleOnStack retAssembly)\r\n   at System.Runtime.Loader.AssemblyLoadContext.LoadFromAssemblyPath(String assemblyPath)\r\n   at System.Reflection.Assembly.LoadFrom(String assemblyFile)\r\n   at Microsoft.ML.Runtime.AssemblyLoadingUtils.LoadAssembly(IHostEnvironment env, String path) in E:\\machinelearning\\src\\Common\\AssemblyLoadingUtils.cs:line 207\r\n\r\nI see these errors but I can still run the pipeline.\r\n\r\nCC: @eerhardt ","Url":"https://github.com/dotnet/machinelearning/issues/1049","RelatedDescription":"Closed issue \"Assembly fails to load when running a pipeline from console app\" (#1049)"},{"Id":"364229993","IsPullRequest":false,"CreatedAt":"2018-09-26T21:59:28","Actor":"GalOshri","Number":"1057","RawContent":null,"Title":"Some components do not have descriptions (or useful descriptions) in intellisense","State":"open","Body":"Some components do not have a description when looking at them in intellisense (images below). A few examples: `ToPrincipalComponents`, `ReplaceWithMissingValues`, `FeaturizeText`. \r\n\r\nFor components like `FastTree` and `LightGBM`, the description just says this is an extension method for FastTree/LightGBM. Perhaps this should at least mention that these are decision trees or some other information? SDCA has a more helpful description.\r\n\r\nExplanation:\r\n![image](https://user-images.githubusercontent.com/2601900/46111518-22efcd00-c19c-11e8-9b2e-3f6400b5da3e.png)\r\n\r\nNo explanation:\r\n![image](https://user-images.githubusercontent.com/2601900/46111536-3864f700-c19c-11e8-8852-63a9c5fb2686.png)\r\n","Url":"https://github.com/dotnet/machinelearning/issues/1057","RelatedDescription":"Open issue \"Some components do not have descriptions (or useful descriptions) in intellisense\" (#1057)"},{"Id":"364227739","IsPullRequest":false,"CreatedAt":"2018-09-26T21:52:41","Actor":"GalOshri","Number":"1056","RawContent":null,"Title":"ReplaceWithMissingValues is a confusing name for handling missing values","State":"open","Body":"The `ReplaceWithMissingValues` transform handles missing values in the data, but the name makes it sound like the transform will replace my data with missing values.","Url":"https://github.com/dotnet/machinelearning/issues/1056","RelatedDescription":"Open issue \"ReplaceWithMissingValues is a confusing name for handling missing values\" (#1056)"},{"Id":"364225330","IsPullRequest":false,"CreatedAt":"2018-09-26T21:46:30","Actor":"sfilipi","Number":"1055","RawContent":null,"Title":"can't instantiate loadable class IDataView with name - warning on using transforms","State":"open","Body":"Running the [Tensorflow sample]\r\n(https://github.com/dotnet/machinelearning-samples/tree/master/samples/csharp/examples/DeepLearning_TensorFlowMLNETInceptionv3ModelScoring) prints a bunch of warnings on the transforms it uses. \r\n\r\nThey are discouraging to sample users :) \r\n\r\nList of warnings for that sample:\r\nCacheClassesFromAssembly: can't instantiate loadable class IDataView with name KeyToVectorTransform\r\nCacheClassesFromAssembly: can't instantiate loadable class IDataView with name TermTransform\r\nCacheClassesFromAssembly: can't map name ToVector to IDataTransform, already mapped to IDataTransform\r\nCacheClassesFromAssembly: can't instantiate loadable class IDataView with name KeyToBinaryTransform","Url":"https://github.com/dotnet/machinelearning/issues/1055","RelatedDescription":"Open issue \"can't instantiate loadable class IDataView with name - warning on using transforms\" (#1055)"},{"Id":"364215147","IsPullRequest":false,"CreatedAt":"2018-09-26T21:16:56","Actor":"sfilipi","Number":"1054","RawContent":null,"Title":"The Trainers list for any training context is empty","State":"open","Body":"nuget: 0.6.0-preview-26926-9\r\n\r\nImport the NuGet package. \r\nInstantiate any training context. \r\nCtrl+Space after context.Trainers \r\n\r\nBug: notice that the list of trainers is empty. \r\n\r\n  var ctx = new Microsoft.ML.RegressionContext(env).Trainers.  <= no trainers display. \r\n","Url":"https://github.com/dotnet/machinelearning/issues/1054","RelatedDescription":"Open issue \"The Trainers list for any training context is empty\" (#1054)"},{"Id":"364214338","IsPullRequest":false,"CreatedAt":"2018-09-26T21:14:20","Actor":"jignparm","Number":"1053","RawContent":null,"Title":"OnnxTransform: Let user pick the output column name from the transform, instead using the same name as the one the model has.","State":"open","Body":"","Url":"https://github.com/dotnet/machinelearning/issues/1053","RelatedDescription":"Open issue \"OnnxTransform: Let user pick the output column name from the transform, instead using the same name as the one the model has.\" (#1053)"},{"Id":"364213459","IsPullRequest":false,"CreatedAt":"2018-09-26T21:11:36","Actor":"GalOshri","Number":"1052","RawContent":null,"Title":"FieldAwareFactorizationMachine should be able to take single float vector features","State":"open","Body":"ML.NET NuGet version: 0.6.0-preview-26925-3\r\n\r\nFFM today requires the features to be passed in as a Vector<float>[]. (I believe this is to enable interaction between the fields, right?)\r\n\r\nSince it is possible to include just a single Vector<float> as a feature, should there be an overload to enable that? \r\n","Url":"https://github.com/dotnet/machinelearning/issues/1052","RelatedDescription":"Open issue \"FieldAwareFactorizationMachine should be able to take single float vector features\" (#1052)"},{"Id":"364212525","IsPullRequest":false,"CreatedAt":"2018-09-26T21:08:48","Actor":"jignparm","Number":"1051","RawContent":null,"Title":"OnnxTransform: Make Create() method public, for use via Nuget package","State":"open","Body":"We need this method to be public, instead of private:\r\nIDataView trans = OnnxTransform.Create(env, pixels, model_location, \"Output\", \"Input\" });","Url":"https://github.com/dotnet/machinelearning/issues/1051","RelatedDescription":"Open issue \"OnnxTransform: Make Create() method public, for use via Nuget package\" (#1051)"},{"Id":"364212010","IsPullRequest":false,"CreatedAt":"2018-09-26T21:07:15","Actor":"jignparm","Number":"1050","RawContent":null,"Title":"OnnxTransform: Change namespace to Microsoft.ML.Transforms (currently Microsoft.ML.OnnxScoring)","State":"open","Body":"","Url":"https://github.com/dotnet/machinelearning/issues/1050","RelatedDescription":"Open issue \"OnnxTransform: Change namespace to Microsoft.ML.Transforms (currently Microsoft.ML.OnnxScoring)\" (#1050)"},{"Id":"364208272","IsPullRequest":false,"CreatedAt":"2018-09-26T20:56:18","Actor":"TomFinley","Number":"1048","RawContent":null,"Title":"Text featurizer Pigstension has auxiliary outputs, but they're not returned anywhere","State":"open","Body":"One thing I noticed about the `FeaturizeText` pigstension specified here:\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/759ac33ef064c75cb977bfd6e6081186b295c6f5/src/Microsoft.ML.Transforms/Text/TextTransform.cs#L711\r\n\r\nI was attempting to translate the following pipeline. Perhaps not everything is there yet, which is fine, but that I could not just directly address `LDAText_TransformedText` without going *out* of pigsty, then redeclaring the entire schema just to get the column that was missed is not good. Another method with more return values to cover this case would probably be the most helpful thing we could do.\r\n\r\n```\r\nloader=TextLoader{quote=- col=IncidentId:TX:0 col=Title:TX:1 col=Status:TX:2 col=Severity:TX:3 col=SourceName:TX:5\r\ncol=SourceCreatedBy:TX:6 col=SiloId:TX:7 col=OriginatingTenantId:TX:8 col=OwningTenantName:TX:9 col=OwningTenantId:TX:10 col=OwningTeamName:TX:11\r\ncol=OwningTeamId:TX:12 col=FirstOwningTeamId:TX:13 col=SecondOwningTeamId:TX:14 col=ThirdOwningTeamId:TX:15 col=ResponsibleTenantId:TX:16\r\ncol=IncidentType:TX:17 col=ImpactStartDate:TX:18 col=CustomerName:TX:19 col=ImpactedScenarios:TX:20 col=IsCustomerImpacting:TX:21 col=Keywords:TX:22\r\ncol=OccurringDatacenter:TX:23 col=OccurringDeviceGroup:TX:24 col=OccurringDeviceName:TX:25 col=OccurringServiceInstanceId:TX:26\r\ncol=RaisingDatacenter:TX:27 col=RaisingDeviceGroup:TX:28 col=RaisingDeviceName:TX:29 col=RaisingServiceInstanceId:TX:30 col=Description:TX:31 header=+}\r\n\r\ndata=\\\\vivekserver\\G$\\AIRTrainigData\\Portal\\2018-08-06\\IncidentData_0.tsv\r\n\r\nxf=Convert{col=OwningTeamId col=Severity col=OwningTenantId type=R4}\r\n\r\nxf=CopyColumns{col=Label:OwningTeamId}\r\n\r\nxf=CopyColumns{col=LabelTenant:OwningTenantId}\r\n\r\nxf=Term{col=Label}\r\n\r\nxf=Term{col=LabelTenant}\r\n\r\nxf=CopyColumns{col=text:Description}\r\n\r\nxf=TextTransform{col=LDAText:Description remover=PredefinedStopWordsRemover punc=- num=- tokens=+ wordExtractor={} charExtractor={} norm=None}\r\n\r\nxf=NltLemmatizerTransform{col=LDAText:LDAText_TransformedText}\r\n\r\nxf=WordEmbeddingsTransform{col=FeatureWordEmbedding:LDAText_TransformedText model=FastTextWikipedia300D}\r\n\r\nxf=NltKeyPhraseExtractorTransform{src=Title dst=KeyPhrasesTitle thres=5 idf=+ lemma=+}\r\n\r\nxf=NltKeyPhraseExtractorTransform{src=text dst=KeyPhrases thres=5 idf=+ lemma=+}\r\n\r\nxf=Concat{col=text:CustomerName,ImpactedScenarios,Keywords,KeyPhrasesTitle,Title}\r\n\r\nxf=TextTransform{col=FeaturesText1:text  remover=PredefinedStopWordsRemover  norm=L1  wordExtractor={} charExtractor=NGramHashExtractorTransform{ngram=7 bits=15 all=+ skips=0}}\r\n\r\nxf=Concat{col=text:Description,KeyPhrases}\r\n\r\nxf=TextTransform{col=FeaturesText2:text   norm=L2  wordExtractor=NGramExtractorTransform{ngram=2 weighting=Idf all=+ skips=1} charExtractor={}}\r\n\r\nxf=Concat{col=Features:FeaturesText1,FeaturesText2,FeatureWordEmbedding}\r\n\r\nxf=CopyColumns{col=FeaturesTenant:Features} xf=CountFeatureSelectionTransform{col=FeaturesTenant c=10}\r\n\r\nxf=TrainScore{tr=SDCAMC feat=FeaturesTenant lab=LabelTenant} xf=MutualInformationFeatureSelection{col=Features topk=50000} xf=Concat{col=Features:Features,Score}\r\n```\r\n\r\nSecondary note while we're at it, it looks like there's no actually usage of `usedNames` in the reconciler to avoid name collisions, which is sort of a nasty bug just waiting to happen.","Url":"https://github.com/dotnet/machinelearning/issues/1048","RelatedDescription":"Open issue \"Text featurizer Pigstension has auxiliary outputs, but they're not returned anywhere\" (#1048)"},{"Id":"364207232","IsPullRequest":false,"CreatedAt":"2018-09-26T20:53:08","Actor":"Zruty0","Number":"1047","RawContent":null,"Title":"Label column is required again in static pipe","State":"open","Body":"We didn't add any provision to make certain estimators 'train-only'.\r\n\r\nCompare the following:\r\n```c#\r\nvar pipeline = new ConcatEstimator(env, \"Features\", \"SepalLength\", \"SepalWidth\", \"PetalLength\", \"PetalWidth\")\r\n    .Append(new TermEstimator(env, \"Label\"), TransformerScope.TrainTest)\r\n    .Append(new SdcaMultiClassTrainer(env, new SdcaMultiClassTrainer.Arguments { MaxIterations = 100, Shuffle = true, NumThreads = 1 }, \"Features\", \"Label\"))\r\n    .Append(new KeyToValueEstimator(env, \"PredictedLabel\"));\r\n\r\nvar model = pipeline.Fit(data).GetModelFor(TransformerScope.Scoring); // <-- that's how we can clean up the pipeline\r\nvar engine = model.MakePredictionFunction<IrisDataNoLabel, IrisPrediction>(env);\r\n```\r\nAnd here is the static one:\r\n```c#\r\nvar learningPipeline = reader.MakeNewEstimator()\r\n    .Append(r => (\r\n        r.Label,\r\n        Features: r.SepalLength.ConcatWith(r.SepalWidth, r.PetalLength, r.PetalWidth)))\r\n    .Append(r => (\r\n        r.Label,\r\n        Predictions: classification.Trainers.Sdca(r.Label.ToKey(), r.Features)))\r\n    .Append(r => r.Predictions.predictedLabel.ToValue());\r\n```\r\nCan we keep the concise pipeline description, yet allow for something like 'GetModelForScoring' in some way?\r\n\r\n/cc @TomFinley  @markusweimer ","Url":"https://github.com/dotnet/machinelearning/issues/1047","RelatedDescription":"Open issue \"Label column is required again in static pipe\" (#1047)"},{"Id":"364201441","IsPullRequest":false,"CreatedAt":"2018-09-26T20:36:51","Actor":"sfilipi","Number":"1046","RawContent":null,"Title":"Finish the sentence on documentation ","State":"open","Body":"Update https://github.com/dotnet/machinelearning/blob/master/src/Microsoft.ML.Data/DataLoadSave/Text/TextLoaderStatic.cs#L18 to complete the description of the TTupleShape param. ","Url":"https://github.com/dotnet/machinelearning/issues/1046","RelatedDescription":"Open issue \"Finish the sentence on documentation \" (#1046)"},{"Id":"364196882","IsPullRequest":false,"CreatedAt":"2018-09-26T20:26:08","Actor":"Zruty0","Number":"1045","RawContent":null,"Title":"Creating both environment and context is annoying","State":"open","Body":"This is what I have to write in the docs all the time:\r\n```c#\r\n// Create a new environment for ML.NET operations. It can be used for exception tracking and logging, \r\n// as well as the source of randomness.\r\nvar env = new LocalEnvironment();\r\n\r\n// We know that this is a classification task, so we create a multiclass classification context: it will give us the algorithms\r\n// we need, as well as the evaluation procedure.\r\nvar classification = new MulticlassClassificationContext(env);\r\n```\r\n\r\nCan we make context create the environment if they aren't provided one? And also expose it as a property?\r\n\r\n/cc @TomFinley ","Url":"https://github.com/dotnet/machinelearning/issues/1045","RelatedDescription":"Open issue \"Creating both environment and context is annoying\" (#1045)"},{"Id":"364194444","IsPullRequest":false,"CreatedAt":"2018-09-26T20:20:32","Actor":"Ivanidzo4ka","Number":"1044","RawContent":null,"Title":"ReplaceWithMissingValues and ToPrincipalComponents doesn't have summary comments, so it's unclear what it does.","State":"open","Body":"","Url":"https://github.com/dotnet/machinelearning/issues/1044","RelatedDescription":"Open issue \"ReplaceWithMissingValues and ToPrincipalComponents doesn't have summary comments, so it's unclear what it does.\" (#1044)"},{"Id":"364191117","IsPullRequest":false,"CreatedAt":"2018-09-26T20:12:51","Actor":"Ivanidzo4ka","Number":"1043","RawContent":null,"Title":"ConcatWith and AsVector need to be more restrictive regarding types they can be applicable.","State":"open","Body":"```\r\nvar pipe = data.MakeNewEstimator().Append(row => (label: row.label.ToKey(), features: row.image.LoadAsImage()));\r\n```\r\nI'm loading images. As soon as I hit dot after LoadAsImage I get suggestions to Resize and  AsGreyscale \r\nwhich make sense. But I also got suggestion from intellisence to apply AsVector and ConcatWith. Which doesn't make much sense for me.","Url":"https://github.com/dotnet/machinelearning/issues/1043","RelatedDescription":"Open issue \"ConcatWith and AsVector need to be more restrictive regarding types they can be applicable.\" (#1043)"},{"Id":"364190624","IsPullRequest":false,"CreatedAt":"2018-09-26T20:11:41","Actor":"shauheen","Number":"1042","RawContent":null,"Title":"Legacy pipeline API needs to be loaded after subcomponent changes","State":"open","Body":"Running legacy API against the new 0.6 nugets will cause \"System.InvalidOperationException has been thrown\". \"Entry point '...' not found\".\r\n\r\nThe entry points don't seem to be loaded for the pipeline and workaround is to manually load them, but the issue needs to be fixed.\r\n\r\nI created a new project and added the 0.6 nugets then tried something like this:\r\n\r\n```C#\r\n\r\nusing Microsoft.ML.Legacy.Models;\r\nusing Microsoft.ML.Legacy.Trainers;\r\nusing Microsoft.ML.Legacy.Transforms;\r\nusing Microsoft.ML.Legacy.Data;\r\nusing Microsoft.ML.Legacy;\r\nusing System;\r\nusing Microsoft.ML.Runtime.Api;\r\n         \r\nvar pipeline = new LearningPipeline();\r\n\r\n            //var n = new Microsoft.ML.Runtime.Data.CategoricalEstimator.ColumnInfo(\"foo\", \"\");\r\n           //new Microsoft.ML.Runtime.Learners.SdcaMultiClassTrainer.Arguments();\r\n\r\n\t\t\tpipeline.Add(new TextLoader(dataPath).CreateFrom<HousePriceData>(useHeader: true, separator: ','));\r\n\r\n            pipeline.Add(new ColumnConcatenator(outputColumn: \"NumericalFeatures\", \r\n...\r\n\t\t\t                                    \"SqftLot15\"));\r\n\r\n            pipeline.Add(new ColumnConcatenator(outputColumn: \"CategoryFeatures\",\r\n...\r\n\t\t\t                                    \"Zipcode\"));\r\n\r\n            pipeline.Add(new CategoricalOneHotVectorizer(\"CategoryFeatures\"));\r\n            pipeline.Add(new ColumnConcatenator(outputColumn: \"Features\",\r\n                \"NumericalFeatures\", \"CategoryFeatures\"));\r\n            pipeline.Add(new StochasticDualCoordinateAscentRegressor());\r\n\r\n            PredictionModel<HousePriceData, HousePricePrediction> model = pipeline.Train<HousePriceData, HousePricePrediction>();\r\n\r\n```\r\n\r\nnote the two commented new lines.\r\n@eerhardt , @Zruty0 ","Url":"https://github.com/dotnet/machinelearning/issues/1042","RelatedDescription":"Open issue \"Legacy pipeline API needs to be loaded after subcomponent changes\" (#1042)"},{"Id":"364184340","IsPullRequest":false,"CreatedAt":"2018-09-26T19:53:47","Actor":"Ivanidzo4ka","Number":"1041","RawContent":null,"Title":"Why I can't just pass file name to DataReader.Read method?","State":"open","Body":"```\r\nConsoleEnvironment env = new ConsoleEnvironment();\r\nvar reader = TextLoader.CreateReader(env, row => (label: row.LoadText(0), image: row.LoadText(1));\r\nvar data = reader.Read(\"file.csv\");\r\n```\r\nwill force me to cast file name to MultifileSource. Can I just pass filename if I have only one file?","Url":"https://github.com/dotnet/machinelearning/issues/1041","RelatedDescription":"Open issue \"Why I can't just pass file name to DataReader.Read method?\" (#1041)"},{"Id":"364184089","IsPullRequest":false,"CreatedAt":"2018-09-26T19:53:00","Actor":"GalOshri","Number":"1040","RawContent":null,"Title":"Simple example for getting input and output nodes of TF graph","State":"open","Body":"#862 enabled extracting information about nodes in a TF model. However, it's not completely clear how to extract the most important information for using the model with the TF Transform: what are the input and output nodes? \r\n\r\nThe [`DnnAnalyzer`](https://github.com/dotnet/machinelearning/blob/a627d5b02d14ff21c1a31a94b1904261211431f6/src/Microsoft.ML.DnnAnalyzer/Microsoft.ML.DnnAnalyzer/DnnAnalyzer.cs) shows how to view all the nodes, but this can be improved to identify which are the input and output nodes (based on the other links) to make this easier.\r\n\r\nProposal: either modify `DnnAnalyzer` to identify the input and output nodes, or provide a separate sample that does this.\r\n\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/1040","RelatedDescription":"Open issue \"Simple example for getting input and output nodes of TF graph\" (#1040)"},{"Id":"364179470","IsPullRequest":false,"CreatedAt":"2018-09-26T19:39:05","Actor":"ganik","Number":"1039","RawContent":null,"Title":"TensorFlowScorer has duplicate parameter Model","State":"open","Body":"ML.NET version 0.6.0\r\n\r\n\r\nSee [manifest.json](https://github.com/dotnet/machinelearning/blob/master/test/BaselineOutput/Common/EntryPoints/core_manifest.json) \r\n\r\nOne Model is Input param, another Model is output param. This causes issues in auto code generators that automatically create method signatures based on manifest. Pls use model_location for input param\r\n\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/1039","RelatedDescription":"Open issue \"TensorFlowScorer has duplicate parameter Model\" (#1039)"}],"ResultType":"GitHubIssue"}},"RunOn":"2018-09-27T05:30:34.8240429Z","RunDurationInMilliseconds":921}