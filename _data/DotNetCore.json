{"Data":{"Blog":{"FeedItems":[{"Title":"Introducing ML.NET: Cross-platform, Proven and Open Source Machine Learning Framework","PublishedOn":"2018-05-08T00:41:28+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today at //Build 2018, we are excited to announce the preview of ML.NET, a cross-platform, open source machine learning framework. ML.NET will allow .NET developers to develop their own models and...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/05/07/introducing-ml-net-cross-platform-proven-and-open-source-machine-learning-framework/","RawContent":null},{"Title":"Announcing Entity Framework Core 2.1 RC 1","PublishedOn":"2018-05-07T18:00:05+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"Today, we are excited to announce that the first release candidate of EF Core 2.1 is available, alongside .NET Core 2.1 RC 1 and ASP.NET Core 2.1 RC 1, for broad testing, and now also for production...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/05/07/announcing-entity-framework-core-2-1-rc-1/","RawContent":null},{"Title":".NET Core 3 and Support for Windows Desktop Applications","PublishedOn":"2018-05-07T15:40:04+00:00","CommentsCount":101,"FacebookCount":0,"Summary":"At Microsoft Build Live today, we are sharing a first look at our plans for .NET Core 3. The highlight of .NET Core 3 is support for Windows desktop applications, specifically Windows Forms, Windows...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/05/07/net-core-3-and-support-for-windows-desktop-applications/","RawContent":null},{"Title":"Announcing .NET Core 2.1 RC 1","PublishedOn":"2018-05-07T15:39:20+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"Today, we&#8217;re announcing .NET Core 2.1 Release Candidate 1 (RC 1). The .NET Core 2.1 RC 1 is now ready for broad testing and for production use. Our quality, reliability, and performance testing...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/05/07/announcing-net-core-2-1-rc-1/","RawContent":null},{"Title":"Announcing the .NET Framework 4.7.2","PublishedOn":"2018-04-30T20:56:19+00:00","CommentsCount":45,"FacebookCount":0,"Summary":"Today, we are happy to announce the release of the .NET Framework 4.7.2. It’s included in the Windows 10 April 2018 Update. .NET Framework 4.7.2 is also available on Windows 7+ and Windows Server 2008...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/04/30/announcing-the-net-framework-4-7-2/","RawContent":null},{"Title":"Help us plan the future of .NET!","PublishedOn":"2018-04-20T16:55:37+00:00","CommentsCount":75,"FacebookCount":0,"Summary":"We’re currently planning our next major .NET releases and would love to hear your feedback on how you interact with .NET Framework and .NET Core today. Please fill out the survey below and help shape...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/04/20/help-us-plan-the-future-of-net/","RawContent":null},{"Title":"Performance Improvements in .NET Core 2.1","PublishedOn":"2018-04-18T19:29:45+00:00","CommentsCount":48,"FacebookCount":0,"Summary":"Back before .NET Core 2.0 shipped, I wrote a post highlighting various performance improvements in .NET Core 2.0 when compared with .NET Core 1.1 and the .NET Framework. As .NET Core 2.1 is in its...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/04/18/performance-improvements-in-net-core-2-1/","RawContent":null},{"Title":".NET Highlights in Visual Studio 2017 version 15.7 Preview 4","PublishedOn":"2018-04-18T19:00:00+00:00","CommentsCount":11,"FacebookCount":0,"Summary":"As you know we continue to incrementally improve Visual Studio 2017 (version 15), and our 7th significant update is currently well under way with the 4th preview shipping today. As we’re winding down...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/04/18/visual-studio-2017-15-7-preview-4/","RawContent":null},{"Title":".NET Core April 2018 Update","PublishedOn":"2018-04-17T23:50:13+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"Today, we are releasing the .NET Core April 2018 Update. This update includes .NET Core 1.0.11, 1.1.8 and 2.0.7. There are no new security fixes in this update. See April 2018 .NET Updates for other...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/04/17/net-core-april-2018-update/","RawContent":null},{"Title":"Announcing Entity Framework Core 2.1 Preview 2","PublishedOn":"2018-04-11T18:02:40+00:00","CommentsCount":14,"FacebookCount":0,"Summary":"Today we’re releasing the second preview of EF Core 2.1, alongside .NET Core 2.1 Preview 2 and ASP.NET Core 2.1 Preview 2. Thank you so much to everyone who has tried our early builds and has helped...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/04/11/announcing-entity-framework-core-2-1-preview-2/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"7640755266","Type":"PullRequestEvent","CreatedAt":"2018-05-08T00:32:51","Actor":"shauheen","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/102","RelatedDescription":"Opened pull request \"Update projects.json adding MLNET\" (#102) at dotnet/home","RelatedBody":""},{"Id":"7640750127","Type":"PullRequestEvent","CreatedAt":"2018-05-08T00:31:03","Actor":"shauheen","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/101","RelatedDescription":"Opened pull request \"Create mlnet.md\" (#101) at dotnet/home","RelatedBody":""},{"Id":"7559882384","Type":"PullRequestEvent","CreatedAt":"2018-04-20T06:42:59","Actor":"Cheesebaron","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/100","RelatedDescription":"Opened pull request \"Create mvvmcross.md\" (#100) at dotnet/home","RelatedBody":"Added MvvmCross as project"},{"Id":"7452103949","Type":"PullRequestEvent","CreatedAt":"2018-03-29T07:03:03","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/97","RelatedDescription":"Merged pull request \"update CLA PDF link\" (#97) at dotnet/home","RelatedBody":""},{"Id":"7419410563","Type":"IssuesEvent","CreatedAt":"2018-03-22T14:02:36","Actor":"vvavrychuk","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/issues/99","RelatedDescription":"Opened issue \"not working \"Linux Distribution\" dropdown on http://www.microsoft.com/net/learn/get-started/linux \" (#99) at dotnet/home","RelatedBody":"On the page http://www.microsoft.com/net/learn/get-started/linux dropdown \"Linux Distribution\" has no effect on the installation instruction next to him (they are always displayed for RedHat).\r\n\r\n![screenshot from 2018-03-22 16-02-19](https://user-images.githubusercontent.com/152563/37775020-6ec5778e-2dea-11e8-9ea3-b33e26c1c4e1.png)\r\n"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"7619224203","Type":"IssuesEvent","CreatedAt":"2018-05-02T20:28:55","Actor":"MichaelSimons","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/65","RelatedDescription":"Opened issue \".NET Framework Runtime and Builder Docker repos have merged \" (#65) at dotnet/announcements","RelatedBody":"# .NET Framework Runtime and Builder Docker repos have merged\r\n\r\nThe [microsoft/dotnet-framework-build](https://hub.docker.com/r/microsoft/dotnet-framework-build/) Docker Hub repo has been merged into the [microsoft/dotnet-framework](https://hub.docker.com/r/microsoft/dotnet-framework/) Docker Hub repo.  All new tags going forward will only be pushed to [microsoft/dotnet-framework](https://hub.docker.com/r/microsoft/dotnet-framework/).  The images in the [microsoft/dotnet-framework-build](https://hub.docker.com/r/microsoft/dotnet-framework-build/) Docker Hub repo will be retained and serviced accordingly as to not affect existing usage.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [Microsoft/dotnet-framework-docker #125](https://github.com/Microsoft/dotnet-framework-docker/issues/125)\r\n\r\n## Details\r\n\r\nThe [microsoft/dotnet-framework-build](https://hub.docker.com/r/microsoft/dotnet-framework-build/) Docker Hub repo has been merged into the [microsoft/dotnet-framework](https://hub.docker.com/r/microsoft/dotnet-framework/) Docker Hub repo.\r\n\r\n* https://github.com/Microsoft/dotnet-framework-docker/pull/123\r\n* https://github.com/Microsoft/dotnet-framework-docker/issues/78\r\n\r\nIn order to differentiate the runtime and build images, `runtime` and `sdk` distinguishing identifiers have been added to the tags.  For example, `4.7.2-runtime` and `4.7.2-sdk`.\r\n\r\nAll new tags going forward will only be pushed to [microsoft/dotnet-framework](https://hub.docker.com/r/microsoft/dotnet-framework/).   For example, the build images for 4.7.2 which was released today, only exist in [microsoft/dotnet-framework](https://hub.docker.com/r/microsoft/dotnet-framework/) repo.\r\n\r\nThe existing tags in [microsoft/dotnet-framework-build](https://hub.docker.com/r/microsoft/dotnet-framework-build/) will remain and be serviced accordingly.  For example, the stable tags such as `4.7.1-windowsservercore-1709` will continue to be patched on a monthly basis.\r\n\r\nWe recommend that as you create and maintain your code, you move to use the new `runtime` and `sdk` images from the [microsoft/dotnet-framework](https://hub.docker.com/r/microsoft/dotnet-framework/) repo.\r\n"},{"Id":"7545995438","Type":"IssuesEvent","CreatedAt":"2018-04-18T00:20:14","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/64","RelatedDescription":"Opened issue \"April 2018 .NET Updates\" (#64) at dotnet/announcements","RelatedBody":"# April 2018 .NET Updates\r\n\r\nThe following .NET updates were released this month. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Framework\r\n\r\n* No new releases. See: [.NET Framework February 2018 Security and Quality Rollup](https://blogs.msdn.microsoft.com/dotnet/2018/02/13/net-framework-february-2018-security-and-quality-rollup/).\r\n* [microsoft/dotnet-framework](https://hub.docker.com/r/microsoft/dotnet-framework/) and related Docker images were updated for [KB4093112](https://support.microsoft.com/help/4093112) and associated updates.\r\n\r\n## .NET Core\r\n\r\n* [.NET Core April 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/04/17/net-core-april-2018-update/)\r\n   * [2.0.7 Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.0/2.0.7.md)\r\n   * [1.1.8 Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.1/1.1.8.md)\r\n   * [1.0.11 Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.0/1.0.11.md)\r\n* [.NET Core 2.1 Preview 2](https://blogs.msdn.microsoft.com/dotnet/2018/04/11/announcing-net-core-2-1-preview-2/)\r\n* [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/) and related Docker images were updated for [KB4093112](https://support.microsoft.com/help/4093112) and associated updates.\r\n* Latest .NET Core security release: [.NET Core March 2018 Update](https://github.com/dotnet/core/issues/1341)\r\n\r\n## .NET for UWP\r\n\r\n* No new releases. See: [.NET for UWP January 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-for-uwp-january-2018-update/).\r\n\r\n## Previous Updates\r\n\r\n* [February 2018 Security and Quality Updates](https://github.com/dotnet/announcements/issues/59)"},{"Id":"7387413694","Type":"IssuesEvent","CreatedAt":"2018-03-15T21:18:32","Actor":"mairaw","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/announcements/issues/63","RelatedDescription":"Reopened issue \"Transport Layer Security (TLS) best practices with the .NET Framework article published\" (#63) at dotnet/announcements","RelatedBody":"# Transport Layer Security (TLS) best practices with the .NET Framework article published\r\n\r\nA new article was published that discusses the Transport Layer Security (TLS) best practices at https://docs.microsoft.com/dotnet/framework/network-programming/tls.\r\n\r\nTo ensure .NET Framework applications remain secure, the TLS version should **not** be hardcoded. .NET Framework applications should use the TLS version the operating system (OS) supports.\r\n\r\nThe (TLS) best practices article targets developers who are:\r\n* Directly using the System.Net APIs (for example, `System.Net.Http.HttpClient` and `System.Net.Security.SslStream`).\r\n* Directly using WCF clients and services using the `System.ServiceModel` namespace.\r\n* Using [Azure Cloud Services](https://azure.microsoft.com/services/cloud-services/) Web and Worker roles to host and run your application. See the [Azure Cloud Services](https://docs.microsoft.com/dotnet/framework/network-programming/tls#azure-cloud-services) section.\r\n\r\nThe article explains how to enable the strongest security available for the version of the .NET Framework that your app targets and runs on.\r\n\r\nThe section [Audit your code and make code changes](https://docs.microsoft.com/dotnet/framework/network-programming/tls#audit-your-code-and-make-code-changes) covers auditing and updating your code.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts and have any discussions with us at:\r\n\r\ndotnet/docs#4675"},{"Id":"7387391842","Type":"IssuesEvent","CreatedAt":"2018-03-15T21:13:45","Actor":"mairaw","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/63","RelatedDescription":"Closed issue \"Transport Layer Security (TLS) best practices with the .NET Framework article published\" (#63) at dotnet/announcements","RelatedBody":"# Transport Layer Security (TLS) best practices with the .NET Framework article published\r\n\r\nA new article was published that discussed the Transport Layer Security (TLS) best practices at https://docs.microsoft.com/dotnet/framework/network-programming/tls.\r\n\r\nTo ensure .NET Framework applications remain secure, the TLS version should **not** be hardcoded. .NET Framework applications should use the TLS version the operating system (OS) supports.\r\n\r\nThe (TLS) best practices article targets developers who are:\r\n* Directly using the System.Net APIs (for example, `System.Net.Http.HttpClient` and `System.Net.Security.SslStream`).\r\n* Directly using WCF clients and services using the `System.ServiceModel` namespace.\r\n* Using [Azure Cloud Services](https://azure.microsoft.com/services/cloud-services/) Web and Worker roles to host and run your application. See the [Azure Cloud Services](https://docs.microsoft.com/dotnet/framework/network-programming/tls#azure-cloud-services) section.\r\n\r\nThe article explains how to enable the strongest security available for the version of the .NET Framework that your app targets and runs on.\r\n\r\nThe section [Audit your code and make code changes](https://docs.microsoft.com/dotnet/framework/network-programming/tls#audit-your-code-and-make-code-changes) covers auditing and updating your code.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts and have any discussions with us at:\r\n\r\ndotnet/docs#4675"},{"Id":"7373349220","Type":"IssuesEvent","CreatedAt":"2018-03-13T17:01:53","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/62","RelatedDescription":"Opened issue \"Microsoft Security Advisory CVE-2018-0875: Hash Collison can cause Denial of Service\" (#62) at dotnet/announcements","RelatedBody":"# Microsoft Security Advisory CVE-2018-0875: Hash Collison can cause Denial of Service\r\n## Executive Summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in the public versions of .NET Core 1.0 and 2.0 (including other minor and patch releases).\r\nThis advisory also provides guidance on what developers can do to update their applications correctly.\r\n\r\nMicrosoft is aware of a security vulnerability in the public versions of .NET Core where a malicious file or web request could cause a denial of service (DoS) attack.\r\n\r\nSystem administrators are advised to update their .NET Core runtimes to versions 1.0.10, 1.1.7 or 2.0.6. Developers are advised to update their .NET Core SDK to versions 1.1.8 or 2.1.101.\r\n\r\n## Discussion\r\n\r\nUse *TBD* for discussion of this advisory.\r\n\r\n### Mitigation Factors\r\nNone\r\n\r\n### Affected Software\r\n\r\nAny application running against .NET Core 1.0.9 or lower versions, 1.1.6 or lower minor versions or 2.0.5 or lower minor versions is affected. \r\n\r\n### Advisory FAQ\r\n#### How do I know if I am affected?\r\nAny application running against .NET Core 1.0.9 or lower versions, 1.1.6 or lower minor versions or 2.0.5 or lower minor versions is affected. \r\n\r\nA complete list of runtimes can be discovered by performing a directory listing in the install root directories. The default root directories are listed in the following table:\r\n\r\n| Operating System | Location |\r\n|------------------|----------|\r\n| Windows\t| `C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\` |\r\n| macOS\t| `/usr/local/share/dotnet/shared/Microsoft.NETCore.App/` |\r\n| Supported Linux platforms\t| `/usr/share/dotnet/shared/Microsoft.NETCore.App/` |\r\n\r\nEach runtime version is installed in its own directory, where the directory name is the version number. If you don't have a directory for 1.0.10, 1.1.7 and 2.0.6, then any applications targeting the respective major/minor versions, 1.0 or 1.1 or 2.0 of .NET Core are vulnerable.\r\n\r\nAdditionally, if you've deployed self-contained applications targeting any of the impacted versions, these applications are also vulnerable and must be recompiled and redeployed.\r\n\r\n#### How do I fix my affected application?\r\n\r\nApplications can be fixed by installing the latest .NET Core runtimes or SDKs. Typically, application servers only have runtime packages installed and developer machines have the SDKs installed. \r\nInstallers for the runtimes can be downloaded from the [Runtime and SDK download archive](https://github.com/dotnet/core/blob/master/release-notes/download-archive.md). \r\n.NET Core 1.1.8 SDK installs both versions 1.0.10 and 1.1.7 of the .NET Core runtime.\r\n\r\nIf you've built a self-contained application, you must install the new runtime and SDK, recompile your application and redeploy.\r\n\r\n#### What if the update breaks my application?\r\nAn application can be pinned to a previous version of the runtime by editing the `application.runtime.config` file for that application. Set the framework version to the desired version and the `rollForward` property to false. These settings should be treated as a temporary measure and the application updated to work with the patched versions of the framework.\r\n\r\nSince the `application.runtime.config` file is an optional file, you may need to create one for each application and add it alongside the executable.\r\n\r\n### Acknowledgments\r\n[Ben Adams](https://twitter.com/ben_a_adams) of [Illyriad Games](https://www.illyriad.co.uk/)\r\n\r\n### External Links\r\n[CVE-2018-0875](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-0875)\r\n\r\n### Revisions\r\n\r\nV1.0 (Mar 13, 2018): Advisory published.\r\n\r\n_Version 1.0_\r\n_Last Updated 2018-03-13_\r\n"}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"7641490092","Type":"PullRequestEvent","CreatedAt":"2018-05-08T05:18:45","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/17908","RelatedDescription":"Merged pull request \" Remove ConcurrentDictionary from System.Private.CoreLib\" (#17908) at dotnet/coreclr","RelatedBody":"The only place it was used was in ConcurrentExclusiveSchedulerPair, and there `ThreadLocal<T>` is actually a better fit, both in purpose and performance.  Replace the usage and delete it from corelib.\r\n\r\ncc: @jkotas, @danmosemsft, @maryamariyan \r\nRelated to https://github.com/dotnet/coreclr/pull/17800 (https://github.com/dotnet/coreclr/pull/17800#issuecomment-385092192)"},{"Id":"7641280650","Type":"PullRequestEvent","CreatedAt":"2018-05-08T03:50:34","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/17891","RelatedDescription":"Merged pull request \"Speed up Array.Reverse by using ref reassignment\" (#17891) at dotnet/coreclr","RelatedBody":"This takes advantage of Roslyn's new ref reassignment feature to speed up the inner loop in `Array.Reverse`. Testing shows that for large arrays the reversal time is cut by approx. 20% from the baseline.\r\n\r\nOld loop codegen:\r\n\r\n```asm\r\n00007ff8`8311fc2c 4c63c0          movsxd  r8,eax\r\n00007ff8`8311fc2f 468b0c81        mov     r9d,dword ptr [rcx+r8*4]\r\n00007ff8`8311fc33 4e8d0481        lea     r8,[rcx+r8*4]\r\n00007ff8`8311fc37 4c63d2          movsxd  r10,edx\r\n00007ff8`8311fc3a 468b1c91        mov     r11d,dword ptr [rcx+r10*4]\r\n00007ff8`8311fc3e 458918          mov     dword ptr [r8],r11d\r\n00007ff8`8311fc41 46890c91        mov     dword ptr [rcx+r10*4],r9d\r\n00007ff8`8311fc45 ffc0            inc     eax\r\n00007ff8`8311fc47 ffca            dec     edx\r\n00007ff8`8311fc49 3bc2            cmp     eax,edx\r\n00007ff8`8311fc4b 7cdf            jl      ... (00007ff8`8311fc2c)\r\n```\r\n\r\nNew loop codegen:\r\n\r\n```asm\r\n00007ff8`831238e2 8b11            mov     edx,dword ptr [rcx]\r\n00007ff8`831238e4 448b00          mov     r8d,dword ptr [rax]\r\n00007ff8`831238e7 448901          mov     dword ptr [rcx],r8d\r\n00007ff8`831238ea 8910            mov     dword ptr [rax],edx\r\n00007ff8`831238ec 4883c104        add     rcx,4\r\n00007ff8`831238f0 4883c0fc        add     rax,0FFFFFFFFFFFFFFFCh\r\n00007ff8`831238f4 483bc8          cmp     rcx,rax\r\n00007ff8`831238f7 72e9            jb      ... (00007ff8`831238e2)\r\n```\r\n\r\nThe codegen samples above are for reversing an `int[]`. I saw similar performance gains for other types. Referential types like `object[]` don't get as large a benefit due to the card table checks, but there is still some speedup.\r\n\r\nI also took the opportunity to collapse the precondition checks using the recommended patterns for (index, count) parameters."},{"Id":"7641275400","Type":"PullRequestEvent","CreatedAt":"2018-05-08T03:48:31","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/17912","RelatedDescription":"Merged pull request \"Arm64 debugger step into behavior\" (#17912) at dotnet/coreclr","RelatedBody":"- Fix #ifdef in StubManagerHelpers::StubGetSecondArg that erroneously referred to TARGET_ARM instead of TARGET_ARM64\r\n- Add condition in StubManagerHelpers::GetTailCallTarget to refer to X12 as is used by the various helpers that can pause in the midst of stepping\r\n  - Fix StubDispatchFixupStub to use X12 as tail call register instead of X9 to match the other tail-calling stubs"},{"Id":"7640791562","Type":"PullRequestEvent","CreatedAt":"2018-05-08T00:46:19","Actor":"dotnet-maestro-bot","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/17913","RelatedDescription":"Opened pull request \"Update CoreClr to preview1-26508-01 (master)\" (#17913) at dotnet/coreclr","RelatedBody":"/cc @dotnet/coreclr-auto-update-notify"},{"Id":"7640678469","Type":"IssuesEvent","CreatedAt":"2018-05-08T00:05:13","Actor":"briansull","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/14672","RelatedDescription":"Closed issue \"In certain cases, IEnumerator::MoveNext() throws System.InvalidProgramException\" (#14672) at dotnet/coreclr","RelatedBody":"Reproduction of this exception is in the following **gist**:\r\nhttps://gist.github.com/myarichuk/db2a290ec8ae5ea0faf2698b0c5b02c2\r\n\r\nIn this case, **InvalidProgramException** exception is thrown when the anonymous object in in the **Map_0()** function has more than 43 fields. \r\n\r\nThe code in the **gist** runs fine in a .Net 4.7 project."},{"Id":"7640661323","Type":"IssuesEvent","CreatedAt":"2018-05-07T23:59:21","Actor":"briansull","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/14568","RelatedDescription":"Closed issue \"[arm64] Assertion failed 'emitCurIG != emitPrologIG'\" (#14568) at dotnet/coreclr","RelatedBody":"Found in an x64_arm64_altjit JitStress=2 JitStressRegs=1 run.\r\n\r\nE.g.,\r\n```\r\nAssertion failed 'emitCurIG != emitPrologIG' in 'DomainBoundILStubClass:IL_STUB_PInvoke(long,struct,double,struct,float,struct,int,struct,char,struct,int,struct,float,struct,long,struct,float,struct,double,struct,float,struct,short,struct):struct' (IL size 262)\r\n\r\n    File: e:\\gh\\coreclr2\\src\\jit\\emit.cpp Line: 6634\r\n    Image: E:\\gh\\coreclr2\\bin\\tests\\Windows_NT.x64.Checked\\Tests\\Core_Root\\CoreRun.exe\r\n```\r\n\r\nTests:\r\n```\r\nJIT\\jit64\\mcc\\interop\\mcc_i77\\mcc_i77.cmd\r\nJIT\\jit64\\mcc\\interop\\mcc_i76\\mcc_i76.cmd\r\n```\r\n"}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"7641352122","Type":"IssuesEvent","CreatedAt":"2018-05-08T04:20:35","Actor":"Petermarcu","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/9110","RelatedDescription":"Closed issue \"ArgumentOutOfRangeException\" (#9110) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\nrun `dotnet publish -f` in a folder that doesn't have a project. I ran it at the root of the .NET Core installation.\r\n\r\n## Expected  behavior\r\nUseful error or message.\r\n\r\n## Actual behavior\r\n```\r\nSystem.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\r\nParameter name: index\r\n   at System.ThrowHelper.ThrowArgumentOutOfRange_IndexException()\r\n   at System.SZArrayHelper.get_Item[T](Int32 index)\r\n   at System.Linq.Enumerable.ElementAt[TSource](IEnumerable`1 source, Int32 index)\r\n   at Microsoft.DotNet.Cli.Telemetry.TopLevelCommandNameAndOptionToLog.AllowList(ParseResult parseResult)\r\n   at Microsoft.DotNet.Cli.Telemetry.TelemetryFilter.Filter(Object objectToFilter)\r\n   at Microsoft.DotNet.Cli.Utils.TelemetryEventEntry.SendFiltered(Object o)\r\n   at Microsoft.DotNet.Cli.Program.ProcessArgs(String[] args, ITelemetry telemetryClient)\r\n   at Microsoft.DotNet.Cli.Program.Main(String[] args)\r\n```\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.1.300-preview3-008646\r\n Commit:    8e01912b36\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.16299\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\dotnettest\\sdk\\2.1.300-preview3-008646\\\r\n\r\nHost (useful for support):\r\n  Version: 2.1.0-rc1-26419-02\r\n  Commit:  515f580aa0\r\n\r\n.NET Core SDKs installed:\r\n  2.1.2 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.102 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.103 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.300-preview3-008646 [C:\\dotnettest\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.0-preview1-final [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.0-rc1-30613 [C:\\dotnettest\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.0-preview1-final [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.0-rc1-30613 [C:\\dotnettest\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.0-preview2-25407-01 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.0-preview3-25516-01 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.0-preview1-26216-03 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.0-rc1-26419-02 [C:\\dotnettest\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\n\r\n\r\n\r\n"},{"Id":"7641339012","Type":"IssuesEvent","CreatedAt":"2018-05-08T04:15:01","Actor":"Petermarcu","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/9218","RelatedDescription":"Opened issue \"ARM32 tar.gz's for SDK and ASP.NET Runtime\" (#9218) at dotnet/cli","RelatedBody":"Filing this here to track getting ASP.NET Core runtime tar.gz's as well as ASP.NET runtime included in the ARM32 SDK."},{"Id":"7640931056","Type":"IssuesEvent","CreatedAt":"2018-05-08T01:38:56","Actor":"DoCode","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/9217","RelatedDescription":"Opened issue \"[2.1.0-rc1] 'dotnet restore' with '--packages' failed 'Unable to find package...'\" (#9217) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\nExecute an restore on a simple project:\r\n```\r\ndotnet restore --packages \"D:\\projects\\test\\packages\" --ignore-failed-sources --no-dependencies --force --verbosity detailed \"D:\\projects\\test\\src\\TestRepo\\TestRepo.csproj\" /p:TargetFramework=net462\r\n```\r\n\r\n## Expected  behavior\r\nSuccessful restore, same as when we execute the command without the `--packages` switch:\r\nThen it's restored successfully!?\r\n\r\n## Actual behavior\r\n```\r\nD:\\projects\\test\\src\\TestRepo\\TestRepo.csproj : error NU1102: Unable to find package runtime.win-x86.Microsoft.NETCore.App with version (>= 2.1.0-rc1-26428-03) \r\n         D:\\projects\\test\\src\\TestRepo\\TestRepo.csproj : error NU1102: - Found 11 version(s) in nuget.org v3 [ Nearest version: 2.1.0-rc1 ] \r\n```\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.1.300-rc1-008673\r\n Commit:    f5e3ddbe73\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   D:\\projects\\test\\src\\TestRepo\\_buildtools\\dotnetcli\\sdk\\2.1.300-rc1-008673\\\r\n\r\nHost (useful for support):\r\n  Version: 2.1.0-rc1-26428-03\r\n  Commit:  2c36b039fd\r\n\r\n.NET Core SDKs installed:\r\n  1.1.8 [C:\\Program Files\\dotnet\\sdk]\r\n  1.1.9 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.104 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.105 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.200-preview-007589 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.200-preview-007597 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.200 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.300-rc1-008673 [D:\\projects\\gliwa\\buildtools-vnext\\_buildtools\\dotnetcli\\sdk]\r\n  2.1.300-rc1-008673 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.0-rc1-30682 [D:\\projects\\gliwa\\buildtools-vnext\\_buildtools\\dotnetcli\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.0-rc1-final [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.0-rc1-30682 [D:\\projects\\gliwa\\buildtools-vnext\\_buildtools\\dotnetcli\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.0-rc1-final [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.10 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.0.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.0-rc1 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.0-rc1-26428-03 [D:\\projects\\gliwa\\buildtools-vnext\\_buildtools\\dotnetcli\\shared\\Microsoft.NETCore.App]\r\n```"},{"Id":"7640862428","Type":"IssuesEvent","CreatedAt":"2018-05-08T01:13:47","Actor":"mikeharder","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/9216","RelatedDescription":"Opened issue \"Cannot run application if `NUGET_PACKAGES` is set to a folder under the app\" (#9216) at dotnet/cli","RelatedBody":"If `NUGET_PACKAGES` is set to a folder under the app, the `hostfxr.dll` and `hostpolicy.dll` files are copied to the wrong location under `bin`, which prevents the compiled application from being executed.\r\n\r\n# Repro Steps\r\n1. `mkdir C:\\console`\r\n2. `cd C:\\console`\r\n3. `dotnet new console`\r\n4. `set NUGET_PACKAGES=C:\\my-nuget-packages`\r\n5. `dotnet build -r win-x64`\r\n6. `dir /s /b /a-d bin`\r\n```\r\nbin\\Debug\\netcoreapp2.1\\win-x64\\console.deps.json             \r\nbin\\Debug\\netcoreapp2.1\\win-x64\\console.dll                   \r\nbin\\Debug\\netcoreapp2.1\\win-x64\\console.exe                   \r\nbin\\Debug\\netcoreapp2.1\\win-x64\\console.pdb                   \r\nbin\\Debug\\netcoreapp2.1\\win-x64\\console.runtimeconfig.dev.json\r\nbin\\Debug\\netcoreapp2.1\\win-x64\\console.runtimeconfig.json    \r\nbin\\Debug\\netcoreapp2.1\\win-x64\\hostfxr.dll                   \r\nbin\\Debug\\netcoreapp2.1\\win-x64\\hostpolicy.dll                \r\n```\r\n7. `cd bin\\Debug\\netcoreapp2.1\\win-x64`\r\n8. `console.exe`\r\n```\r\nHello World!\r\n```\r\n9. `cd C:\\console`\r\n10. `set NUGET_PACKAGES=C:\\console\\my-nuget-packages`\r\n11. `dotnet build -r win-x64`\r\n12. `dir /s /b /a-d bin`\r\n```\r\nbin\\Debug\\netcoreapp2.1\\win-x64\\console.deps.json                                                                                                    \r\nbin\\Debug\\netcoreapp2.1\\win-x64\\console.dll                                                                                                          \r\nbin\\Debug\\netcoreapp2.1\\win-x64\\console.exe                                                                                                          \r\nbin\\Debug\\netcoreapp2.1\\win-x64\\console.pdb                                                                                                          \r\nbin\\Debug\\netcoreapp2.1\\win-x64\\console.runtimeconfig.dev.json                                                                                       \r\nbin\\Debug\\netcoreapp2.1\\win-x64\\console.runtimeconfig.json                                                                                           \r\nbin\\Debug\\netcoreapp2.1\\win-x64\\my-nuget-packages\\runtime.win-x64.microsoft.netcore.dotnethostpolicy\\2.1.0-rc1\\runtimes\\win-x64\\native\\hostpolicy.dll\r\nbin\\Debug\\netcoreapp2.1\\win-x64\\my-nuget-packages\\runtime.win-x64.microsoft.netcore.dotnethostresolver\\2.1.0-rc1\\runtimes\\win-x64\\native\\hostfxr.dll \r\n```\r\n13. `cd bin\\Debug\\netcoreapp2.1\\win-x64`\r\n14. `console.exe`\r\n```\r\nUsage: dotnet [host-options] [path-to-application]\r\n\r\npath-to-application:\r\n  The path to an application .dll file to execute.\r\n\r\nhost-options:\r\n  --additionalprobingpath <path>      Path containing probing policy and assemblies to probe for\r\n  --depsfile <path>                   Path to <application>.deps.json file\r\n  --runtimeconfig <path>              Path to <application>.runtimeconfig.json file\r\n  --fx-version <version>              Version of the installed Shared Framework to use to run the application.\r\n  --roll-forward-on-no-candidate-fx   Roll forward on no candidate shared framework is enabled\r\n  --additional-deps <path>            Path to additonal deps.json file\r\n  --list-runtimes                     Display the installed runtimes\r\n  --list-sdks                         Display the installed SDKs\r\n\r\nCommon Options:\r\n  -h|--help                           Displays this help.\r\n  --info                              Display .NET Core information.\r\n```\r\n"},{"Id":"7640652242","Type":"IssuesEvent","CreatedAt":"2018-05-07T23:56:13","Actor":"martincostello","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/9215","RelatedDescription":"Opened issue \"dotnet build for ASP.NET Core app on macOS fails due to missing Microsoft.NETCore.App package for RC1\" (#9215) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\n\r\nBuild justeat/httpclient-interception#23 at [e53fd38](https://github.com/justeat/httpclient-interception/pull/23/commits/e53fd389ce8161f4bbe802d8fe28eb59fe4899e5) for macOS in Travis CI.\r\n\r\n## Expected  behavior\r\n\r\nBuild succeeds.\r\n\r\n## Actual behavior\r\n\r\nBuild fails [with error](https://travis-ci.org/justeat/httpclient-interception/jobs/376103297#L226):\r\n\r\n```sh\r\n/Users/travis/build/justeat/httpclient-interception/samples/SampleApp/SampleApp.csproj : error NU1102: Unable to find package Microsoft.NETCore.App with version (>= 2.1.0-rc1-26428-03) [/Users/travis/build/justeat/httpclient-interception/samples/SampleApp.Tests/SampleApp.Tests.csproj]\r\n/Users/travis/build/justeat/httpclient-interception/samples/SampleApp/SampleApp.csproj : error NU1102:   - Found 32 version(s) in nuget.org [ Nearest version: 2.1.0-rc1 ] [/Users/travis/build/justeat/httpclient-interception/samples/SampleApp.Tests/SampleApp.Tests.csproj]\r\n/Users/travis/build/justeat/httpclient-interception/samples/SampleApp.Tests/SampleApp.Tests.csproj : error NU1102: Unable to find package Microsoft.NETCore.App with version (>= 2.1.0-rc1-26428-03)\r\n/Users/travis/build/justeat/httpclient-interception/samples/SampleApp.Tests/SampleApp.Tests.csproj : error NU1102:   - Found 32 version(s) in nuget.org [ Nearest version: 2.1.0-rc1 ]\r\n```\r\n\r\nThe same commit builds successfully in Travis CI for Linux and in AppVeyor for Windows.\r\n"}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"7619511676","Type":"PullRequestEvent","CreatedAt":"2018-05-02T21:29:23","Actor":"ericstj","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/722","RelatedDescription":"Merged pull request \"Fix LockFileCache when SDK and trimming task are using different NuGet dlls\" (#722) at dotnet/standard","RelatedBody":"Previously I copied the SDK caching code for caching the loaded lock file across task boundaries.\r\n\r\nThis became a problem when the SDK updated their NuGet version.\r\n\r\nWe didn't agree on the type that belonged in the cache.\r\n\r\nAvoid this by using a versioned prefix for the cache key.  Of course we will no longer share the read if we happen to be on the same version, but this is safer.\r\n\r\n/cc @nguerrera @dsplaisted "},{"Id":"7619284155","Type":"PullRequestEvent","CreatedAt":"2018-05-02T20:41:05","Actor":"ericstj","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/722","RelatedDescription":"Opened pull request \"Fix LockFileCache when SDK and trimming task are using different NuGet dlls\" (#722) at dotnet/standard","RelatedBody":"Previously I copied the SDK caching code for caching the loaded lock file across task boundaries.\r\n\r\nThis became a problem when the SDK updated their NuGet version.\r\n\r\nWe didn't agree on the type that belonged in the cache.\r\n\r\nAvoid this by using a versioned prefix for the cache key.  Of course we will no longer share the read if we happen to be on the same version, but this is safer.\r\n\r\n/cc @nguerrera @dsplaisted "}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"7641487342","Type":"PullRequestEvent","CreatedAt":"2018-05-08T05:17:39","Actor":"jkotas","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/29565","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#29565) at dotnet/corefx","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7641422157","Type":"PullRequestEvent","CreatedAt":"2018-05-08T04:51:10","Actor":"jkotas","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/pull/29550","RelatedDescription":"Closed pull request \"Diagnostic source guidance\" (#29550) at dotnet/corefx","RelatedBody":"@brianrob "},{"Id":"7641381397","Type":"IssuesEvent","CreatedAt":"2018-05-08T04:33:15","Actor":"hez2010","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/29566","RelatedDescription":"Opened issue \"partial view bug of MVC website in .NET Core 2.1 rc1\" (#29566) at dotnet/corefx","RelatedBody":"I use .NET Core 2.1.300-rc1 to create a new MVC web app with individual authentication, then I use identity scaffolder and specify layout file with \"~/Views/Shared/_Layout.cshtml\" to generate identity related code in Areas/Identity.\r\n\r\nWhen I try to build, the compiler warns me that I need to use <partial /> instead of @Html.Partial. Of course I can replace @Html.Partial to <partial /> manually, but why not generate code with <partial /> automatically at the beginning?\r\n\r\nAnd then I run the website, when I navigated to Login/Register page in browser, I found that the _LoginPartial View could not be loaded correctly that it still remained <a asp-area=\"Identity\" asp-page=\"/Account/Login\"></a> but not <a href=\"/Identity/Account/Login\"></a> in HTML source so that I could not click Login or Register again.\r\n\r\nBut after I changed the code in _Layout.cshtml:\r\n<partial name=\"_LoginPartial\" />   ----->   <partial name=\"_LoginPartial.cshtml\" />, it works again. \r\n\r\nHope that you can fix this bug, thanks!"},{"Id":"7641285034","Type":"PullRequestEvent","CreatedAt":"2018-05-08T03:52:21","Actor":"dotnet-bot","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/29565","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#29565) at dotnet/corefx","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7641280574","Type":"IssuesEvent","CreatedAt":"2018-05-08T03:50:32","Actor":"LandonCampbell","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/29564","RelatedDescription":"Opened issue \"System.Data.SqlClient 4.4.3 and SQL Server Compatibility\" (#29564) at dotnet/corefx","RelatedBody":"Hi, I've been struggling with the SQL server exceptions outlined in both of these previous issues, and I wanted to confirm that the solution is to upgrade from Server 2008 to _at least_ Server 2008 R2 SP3:\r\n\r\n- https://github.com/dotnet/corefx/issues/9719\r\n- https://github.com/dotnet/corefx/issues/6467\r\n\r\nOne of our SQL Server instances is 2008 SP3, and from it I always get \"SqlException: Connection Timeout Expired. The timeout period elapsed during the post-login phase.\"\r\n\r\nThe other instance is 2008 SP4, which works _most_ of the time, but often responds with \"A connection was successfully established with the server, but then an error occurred during the login process\".\r\n\r\nIf you could confirm my suspicions, I would greatly appreciate it. Thanks."},{"Id":"7641014262","Type":"IssuesEvent","CreatedAt":"2018-05-08T02:09:35","Actor":"mitchcapper","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/29563","RelatedDescription":"Opened issue \"Trusted People certificate store behavior change with .NET core 2.1 (no longer allows untrusted roots)\" (#29563) at dotnet/corefx","RelatedBody":"So there is a bit of a difference.  My understanding of trusted people is that certificates placed in there should be accepted as explicitly valid no matter what.\r\nGranted placing a certificate in the \"Current User/Trusted People\" store never worked with .net Core, but \"System Certificates/Trusted People\" worked just fine in .NET 2.0.\r\n\r\nSo in .net 2.0 ```(tsk = (new HttpClient()).GetStringAsync(\"https://untrusted-root.badssl.com/\")).Wait();``` works (after you grab that certificate and install it.\r\n\r\nIn .net 2.1 however that command (even with the certificate installed) will throw an error ```AuthenticationException: The remote certificate is invalid according to the validation procedure.```.\r\n\r\nSelf signed certificates (rather than simply an unknown CA) work fine as before installed in Trusted People:\r\n```(tsk = (new HttpClient()).GetStringAsync(\"https://self-signed.badssl.com/\")).Wait();```\r\nin both .net 2.0 and .net 2.1.\r\n\r\nThere is no equivalent of Trusted People on platforms other than windows so it is a Windows bug, but as self signed certs still work in Trusted People this behavior is inconsistent (not TP being phased out as part of uniformity).  \r\n\r\nIf you are saying why would this matter? Just trust the untrusted CA?  Signal uses an untrusted certificate issued by an unpublished CA (https://textsecure-service.whispersystems.org/).\r\n\r\nThere are work around with .net core 2.1 thanks to the new certificate validation options on web socket(dotnet/corefx#28141), so it won't horridly break things but as this does not seem intended wanted to confirm."},{"Id":"7640997592","Type":"IssuesEvent","CreatedAt":"2018-05-08T02:03:32","Actor":"yaakov-h","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/29562","RelatedDescription":"Opened issue \"Get Span view of Embedded Resource\" (#29562) at dotnet/corefx","RelatedBody":"Hi,\r\n\r\nWould it be possible to add an API to `Assembly` that allows applications to get a `ReadOnlySpan<>` view of an embedded resource, rather than a stream?\r\n\r\nIf this has been discussed before, please just point me at that issue.\r\n\r\nThanks."},{"Id":"7640784945","Type":"PullRequestEvent","CreatedAt":"2018-05-08T00:43:50","Actor":"dotnet-maestro-bot","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/29561","RelatedDescription":"Opened pull request \"Update CoreClr, CoreSetup to preview1-26508-01, preview1-26507-05, respectively (master)\" (#29561) at dotnet/corefx","RelatedBody":""},{"Id":"7640666396","Type":"IssuesEvent","CreatedAt":"2018-05-08T00:00:57","Actor":"caesar1995","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/29557","RelatedDescription":"Closed issue \"ClientWebSocket does not provide upgrade request error details\" (#29557) at dotnet/corefx","RelatedBody":"ClientWebSocket on .NET Core does not provide the upgrade request errors in the exception details as it does on the .NET Framework.\r\nRepro code\r\nvar client = new ClientWebSocket();\r\nclient.ConnectAsync(new Uri(\"wss://speech.platform.bing.com/speech/recognition/interactive/cognitiveservices/v1\"), CancellationToken.None).GetAwaiter().GetResult()\r\n"}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"7641437619","Type":"IssuesEvent","CreatedAt":"2018-05-08T04:57:33","Actor":"jaredpar","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/26709","RelatedDescription":"Opened issue \"Need to update our Tasks dependency\" (#26709) at dotnet/roslyn","RelatedBody":"Context Change: https://github.com/dotnet/roslyn/pull/23557\r\n\r\nThis PR added a reference to System.Threading.Tasks.Extensions in the MS.CA project. This effectively makes it a dependency of anything in Roslyn as that is our root most project. Yet our tooling did not catch three places where we needed to re-state our dependency on this DLL:\r\n\r\n1. Microsoft.CodeAnalysis.swr (fixed by https://github.com/dotnet/roslyn/pull/26703) \r\n1. Microsoft.Net.Compilers.nuspec\r\n1. Microsoft.NetCore.Compilers.nuspec\r\n1. VS.Tools.Roslyn.nuspec \r\n\r\nI'm unsure that there is really tooling that can help us with 2 or 3 above. Need to add some consistency checks to ensure that everything else is updated in the case 2 / 3 is changed. \r\n"},{"Id":"7641161432","Type":"PullRequestEvent","CreatedAt":"2018-05-08T03:04:47","Actor":"jasonmalinowski","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/26706","RelatedDescription":"Merged pull request \"Cherry pick .editorconfig deadlock fix into master-vs-deps\" (#26706) at dotnet/roslyn","RelatedBody":"@brettfo (and @agocke): it seems something was mismerged which meant this change never made it into master-vs-deps. I *do* see it in master, and it's marked as having merged into master-vs-deps. We need to figure out what happened and redo the underlying merge."},{"Id":"7641152261","Type":"PullRequestEvent","CreatedAt":"2018-05-08T03:01:27","Actor":"jasonmalinowski","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/26707","RelatedDescription":"Merged pull request \"Merge master to master-vs-deps\" (#26707) at dotnet/roslyn","RelatedBody":"\nThis is an automatically generated pull request from master into master-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-master-vs-deps\ngit reset --hard upstream/master-vs-deps\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push merges/master-to-master-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"7641099322","Type":"PullRequestEvent","CreatedAt":"2018-05-08T02:41:41","Actor":"jcouv","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/26698","RelatedDescription":"Merged pull request \"Update LangVersion to 7.3\" (#26698) at dotnet/roslyn","RelatedBody":"Although not strictly necessary, I'd been holding off updating the language version used in Roslyn projects until VS 15.7 released. And today, it did.\r\n\r\nFixes https://github.com/dotnet/roslyn/issues/25816\r\n\r\n@sharwell @jasonmalinowski @dotnet/roslyn-infrastructure for review. Thanks"},{"Id":"7641099318","Type":"IssuesEvent","CreatedAt":"2018-05-08T02:41:41","Actor":"jcouv","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/25816","RelatedDescription":"Closed issue \"Enable LangVersion 7.3 in master (for 15.8)\" (#25816) at dotnet/roslyn","RelatedBody":"We should dogfood C# 7.3 as soon as possible.\r\n\r\nFor this we need:\r\n- [ ] 15.7 ~~preview 3~~ RTM to be released\r\n- [x] sign-off from source build folks"},{"Id":"7640980077","Type":"PullRequestEvent","CreatedAt":"2018-05-08T01:57:22","Actor":"heejaechang","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/26708","RelatedDescription":"Opened pull request \"[WIP] remove random last token from format engine.\" (#26708) at dotnet/roslyn","RelatedBody":"trying to see what breaks."},{"Id":"7640963849","Type":"IssuesEvent","CreatedAt":"2018-05-08T01:51:18","Actor":"hungdluit","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/4114","RelatedDescription":"Closed issue \"Is scripting engine included in version which is published in nuget?\" (#4114) at dotnet/roslyn","RelatedBody":""}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"7641485765","Type":"PullRequestEvent","CreatedAt":"2018-05-08T05:17:04","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5783","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#5783) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7641267516","Type":"IssuesEvent","CreatedAt":"2018-05-08T03:45:24","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/issues/5758","RelatedDescription":"Closed issue \"[Question] Discover types exported from referenced assembly in UWP app (.Net Native Release Build)\" (#5758) at dotnet/corert","RelatedBody":"I have a UWP project with Unity IOC container. I would like to register all the ViewModels defined in the referenced assemblies. I am using VS 2017 15.6.7 with 16299 SDK.\r\n\r\nAs long as I know the assembly name I am able to load the types from that assembly like\r\n\r\n`var types = Assembly.Load(new AssemblyName(\"Simple\")).ExportedTypes.ToList();`\r\n\r\nHowever, if I try to dynamically load the assemblies, and then find the types, it does not work\r\n\r\n```\r\nvar files = await Windows.ApplicationModel.Package.Current.InstalledLocation.GetFilesAsync().AsTask().ConfigureAwait(false);\r\nforeach (var file in files.Where(file => file.FileType == \".dll\" ))\r\n{\r\n    try\r\n    {\r\n        types.AddRange(Assembly.Load(new AssemblyName(file.DisplayName)).ExportedTypes);\r\n    }\r\n    catch (Exception ex) {}\r\n}\r\n``` \r\n\r\nThe code above returns two files one is the `App.dll` and second is `clrcompression.dll`. It does not return the referenced assembly. Some other people have also reported this too [UWP .NET Native - Iterate Through Types and Assemblies\r\n](https://stackoverflow.com/q/46460948/1139856).  It maybe that `Unity` guys have an open issue because of this too (unitycontainer/registration-by-convention#2).\r\n \r\nIs it something to do with Default.rd.xml? However, it is not clear what to do, maybe some examples would help.\r\n\r\nSo, my question is, is it possible to dynamically discover the types to do registeration by convention. If not what are the alternatives, because, otherwise it seems that we can't submit our apps to store."},{"Id":"7641256046","Type":"IssuesEvent","CreatedAt":"2018-05-08T03:40:52","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/issues/5611","RelatedDescription":"Closed issue \".Net Native tool chain - UWP won't launch when using Microsoft.NETCore.UniversalWindowsPlatform 6.0.x\" (#5611) at dotnet/corert","RelatedBody":"We have a centennial UWP app which is using `Microsoft.NETCore.UniversalWindowsPlatform 6.0.x`.\r\nIt has UWP part, WPF part, and a .NetStardard 1.4 part for shard components\r\n\r\nIt can build and run normally with debug build configuration, but when building with release (compile with .Net Native tool chain) the app won't launch. \r\n\r\nWhen I check the event viewer, I see following errors:\r\n`The server xxxxxxxx did not register with DCOM within the required timeout.`\r\n\r\nWhen we downgrade the `Microsoft.NETCore.UniversalWindowsPlatform` nuget to version 5.3.x, we can launch the app which is compiled with .Net Native tool chain\r\n\r\nWhen we upgrade the Microsoft.NETCore.UniversalWindowsPlatform nuget to version 5.4 (Microsoft.Net.Native.Compiler 1.7.0) We can launch the app but it crashes right after launch. \r\n(Faulting module name: mrt100_app.dll, version: 1.6.24903.0, time stamp: 0x586b2b6d)\r\n\r\nCould you please help to trouble shoot this issue? We really want to use `Microsoft.NETCore.UniversalWindowsPlatform 6.0.x` that includes many more features from c# 7.0. Thanks!\r\n\r\nHere is the build log when we use `Microsoft.NETCore.UniversalWindowsPlatform 6.0.x`\r\nThe build log is too big (26MB) so I zipped it here.\r\n[BuildLog.zip](https://github.com/dotnet/corert/files/1843822/BuildLog.zip)\r\n\r\nThanks again!\r\n\r\n"},{"Id":"7641231587","Type":"IssuesEvent","CreatedAt":"2018-05-08T03:31:10","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/issues/5782","RelatedDescription":"Closed issue \"WinForm on corert\" (#5782) at dotnet/corert","RelatedBody":"According to the article(https://blogs.msdn.microsoft.com/dotnet/2018/05/07/net-core-3-and-support-for-windows-desktop-applications/), winform will be supported on .net core 3.0. And it also said \"We’re working on new build tools that will bundle your app and .NET Core together as in a single executable, as a new option\". So my question is:\r\n1. Is it related to corert ?\r\n2. If not, is it possible that corert will support winform in .net core 3.0?\r\n\r\nThanks."},{"Id":"7641007343","Type":"IssuesEvent","CreatedAt":"2018-05-08T02:06:59","Actor":"ismlsmile","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/issues/5782","RelatedDescription":"Opened issue \"WinForm on corert\" (#5782) at dotnet/corert","RelatedBody":"According to the article(https://blogs.msdn.microsoft.com/dotnet/2018/05/07/net-core-3-and-support-for-windows-desktop-applications/), winform will be supported on .net core 3.0. And it also said \"We’re working on new build tools that will bundle your app and .NET Core together as in a single executable, as a new option\". So my question is:\r\n1. Is it related to corert ?\r\n2. If not, is it possible that corert will support winform in .net core 3.0?\r\n\r\nThanks."},{"Id":"7640110892","Type":"PullRequestEvent","CreatedAt":"2018-05-07T21:23:34","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5781","RelatedDescription":"Opened pull request \"Partial implementation of Thread.GetApartmentState\" (#5781) at dotnet/corert","RelatedBody":"Related to #5776"},{"Id":"7637399956","Type":"IssuesEvent","CreatedAt":"2018-05-07T12:39:13","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/issues/5779","RelatedDescription":"Closed issue \"Way of setting File version for resultant AOT exe?\" (#5779) at dotnet/corert","RelatedBody":"Is there a way to control the file version attributes for the resultant native AOT exe? Attributes on main IL asssembly such as AssemblyFileVersion are readable via Assembly.GetExecutingAssembly().CustomAttributes but encapsulating file of the exe itself has no related version."}],"ResultType":"GitHubEvent"},"SDK":{"Events":[{"Id":"7640445792","Type":"IssuesEvent","CreatedAt":"2018-05-07T22:49:02","Actor":"johnbeisner","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/issues/1637","RelatedDescription":"Closed issue \"SDK and the unified NuGet Transport Feed\" (#1637) at dotnet/sdk","RelatedBody":"Two steps to complete moving the SDK to the Transport Feed:\r\n- [x] 1. Use the Transport Feed as the default feed\r\n- [x] 2. Publish the SDK NuGet packages to the Transport Feed\r\n- [x] 3. use the transport feed exclusively - requirement: all dependencies are publishing to the new feed\r\n"},{"Id":"7639431073","Type":"PullRequestEvent","CreatedAt":"2018-05-07T19:03:13","Actor":"johnbeisner","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/2223","RelatedDescription":"Merged pull request \"Merge release/2.1.3xx to release/2.1.4xx\" (#2223) at dotnet/sdk","RelatedBody":"\nThis is an automatically generated pull request from release/2.1.3xx into release/2.1.4xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1.3xx-to-release/2.1.4xx\ngit reset --hard upstream/release/2.1.4xx\ngit merge upstream/release/2.1.3xx\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.1.3xx-to-release/2.1.4xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"993631068413681664","CreatedAt":"2018-05-07T23:18:02+00:00","UserScreenname":"dotnet","Text":"Dates just announced! Save the date for #dotNETConf 2018, 9/12-14.  This virtual training event is brought to you b… https://t.co/TOmBUcX9bN","Source":"<a href=\"https://prod2.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod2</a>","RetweetCount":76,"FavoriteCount":41,"RawContent":null},{"Id":"993612196121907200","CreatedAt":"2018-05-07T22:03:02+00:00","UserScreenname":"dotnet","Text":".NET Core 2.1 RC is now available! Download the bits and enter to win an awesome poster of the Mar/Apr issue cover… https://t.co/tBQ6CoENAW","Source":"<a href=\"https://prod2.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod2</a>","RetweetCount":53,"FavoriteCount":25,"RawContent":null},{"Id":"993599106114293762","CreatedAt":"2018-05-07T21:11:01+00:00","UserScreenname":"dotnet","Text":"Dev &amp; infuse custom AI into your apps w/o having prior machine learning expertise.\n\nAnnouncing… https://t.co/kU3t51jeNo","Source":"<a href=\"https://prod2.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod2</a>","RetweetCount":41,"FavoriteCount":24,"RawContent":null},{"Id":"993589793622814721","CreatedAt":"2018-05-07T20:34:01+00:00","UserScreenname":"dotnet","Text":"Don’t have machine learning expertise? #dotNET devs can now use a set of C# APIs for training models, using models… https://t.co/SN7z5PIIoB","Source":"<a href=\"https://prod2.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod2</a>","RetweetCount":175,"FavoriteCount":102,"RawContent":null},{"Id":"993573187291172865","CreatedAt":"2018-05-07T19:28:02+00:00","UserScreenname":"dotnet","Text":"We’re making the .NET Core 2.1 RC available w/ a \"Go-Live\" license to use it in prod. Also included in the update,… https://t.co/ie0QNrCJ5p","Source":"<a href=\"https://prod2.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod2</a>","RetweetCount":230,"FavoriteCount":150,"RawContent":null},{"Id":"993566896795668480","CreatedAt":"2018-05-07T19:03:02+00:00","UserScreenname":"dotnet","Text":"Announcing the roadmap for the next major version of .NET Core, .NET Core 3.0 - expanding the supported workloads t… https://t.co/eLIOuTmGKk","Source":"<a href=\"https://prod2.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod2</a>","RetweetCount":409,"FavoriteCount":258,"RawContent":null},{"Id":"993561619887108097","CreatedAt":"2018-05-07T18:42:04+00:00","UserScreenname":"dotnet","Text":"ASPNET Core 2.1.0-rc1 now available https://t.co/ptH9K6a80F #MSBuild2018","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":52,"FavoriteCount":49,"RawContent":null},{"Id":"993561416119418880","CreatedAt":"2018-05-07T18:41:15+00:00","UserScreenname":"dotnet","Text":"Announcing Entity Framework Core 2.1 RC 1 https://t.co/CTEW50MWEe #msbuild2018","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":48,"FavoriteCount":27,"RawContent":null},{"Id":"993516954034962432","CreatedAt":"2018-05-07T15:44:35+00:00","UserScreenname":"dotnet","Text":".NET Core 3 and Support for Windows Desktop Applications https://t.co/09cuZ6AbaX #MSBuild2018","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":585,"FavoriteCount":481,"RawContent":null}]}},"RunOn":"2018-05-08T05:30:22.0192049Z","RunDurationInMilliseconds":7784}