{"Data":{"GitHub":{"Issues":[{"Id":"399173592","IsPullRequest":false,"CreatedAt":"2019-01-15T03:28:46","Actor":"justinormont","Number":"2147","RawContent":null,"Title":"Check range of ScalePosWeight in LightGBM","State":"open","Body":"Our recommendation seems to be (0,Inf) for `ScalePosWeight`, but we then restrict it to (0,1].\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/a570da14a41f2870eb8f61d84496a58422398253/src/Microsoft.ML.LightGBM/LightGbmArguments.cs#L155-L158\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/a570da14a41f2870eb8f61d84496a58422398253/src/Microsoft.ML.LightGBM/LightGbmArguments.cs#L170\r\n\r\nThis likely should be:\r\n```C#\r\nContracts.CheckUserArg(Args.ScalePosWeight > 0, nameof(Args.ScalePosWeight), \"must be > 0.\");\r\n```","Url":"https://github.com/dotnet/machinelearning/issues/2147","RelatedDescription":"Open issue \"Check range of ScalePosWeight in LightGBM\" (#2147)"},{"Id":"399172306","IsPullRequest":true,"CreatedAt":"2019-01-15T03:21:51","Actor":"artidoro","Number":"2146","RawContent":null,"Title":"WIP: KeyType Simplification","State":"open","Body":"Fixes #1540.\r\n\r\nIn this PR I remove the Min and Contiguous fields of KeyType. The reason for doing so is elaborated in the issue #1540.\r\n\r\nBefore this PR, a valid range of values for a key could be 1000 to 4000. This was represented by a key with Min 1000 and Count 4001. Having a key that starts at a value that is not 1 only very rarely happened in practice.\r\n\r\nNow by default a valid range will start at 1, up to Count, with 0 being used for missing values.\r\n\r\nAs part of this PR I also removed the Min and Contiguous field of KeyRange (KeyRange serves the purpose of representing a valid range of values for a KeyType). It is useful to note that the max of a KeyRange will be equal to Count - 1 of the associated KeyType.\r\n\r\nNOTE: Still need to fix the comments to make sure they reflect the change.","Url":"https://github.com/dotnet/machinelearning/pull/2146","RelatedDescription":"Open PR \"WIP: KeyType Simplification\" (#2146)"},{"Id":"399162632","IsPullRequest":false,"CreatedAt":"2019-01-15T02:32:33","Actor":"zeahmed","Number":"2145","RawContent":null,"Title":"Relocate Microsoft.ML.TensorFlow.TestModels nuget or grant access to dotnet-core feed.","State":"open","Body":"Currently, Microsoft.ML.TensorFlow.TestModels nuget is created from https://github.com/dotnet/machinelearning-testdata and push to dotnet-core feed. \r\n\r\nML.Net people don't have push access to dotnet-core feed. Whenever there is a change in the repo and nuget needs to be regenerated, we need to ask the relevant people (who have access) to do this. The solution is either create a new feed where ML.Net people have access to or grant push access on dotnet-core to ML.Net people (whichever is convenient).\r\n\r\nCc: @yaeldekel, @ericstj, @eerhardt.","Url":"https://github.com/dotnet/machinelearning/issues/2145","RelatedDescription":"Open issue \"Relocate Microsoft.ML.TensorFlow.TestModels nuget or grant access to dotnet-core feed.\" (#2145)"},{"Id":"399077549","IsPullRequest":true,"CreatedAt":"2019-01-15T01:17:24","Actor":"wschin","Number":"2139","RawContent":null,"Title":"Remove ISchema in BinaryLoader","State":"closed","Body":"As title. Parade of #1501 continues today.\r\n","Url":"https://github.com/dotnet/machinelearning/pull/2139","RelatedDescription":"Closed or merged PR \"Remove ISchema in BinaryLoader\" (#2139)"},{"Id":"399147635","IsPullRequest":false,"CreatedAt":"2019-01-15T01:16:49","Actor":"najeeb-kazmi","Number":"2144","RawContent":null,"Title":"Decide a good name for TextLoader","State":"open","Body":"In #1690 we renamed `MLContext.Data.CreateTextReader` to `MLContext.Data.CreateTextLoader` to have the method match the return type `TextLoader`.\r\n\r\nIn #581 and subsequent work, we are replacing `IDataLoader` with `IDataReader`, and so renaming the `TextLoader` to `TextReader` would make sense. However, doing so would lead to disambiguation issues between `Microsoft.ML.Data.TextReader` and `System.IO.TextReader`, which we should avoid as per .NET guidelines. So, we must come up with a new name for `TextLoader` that is descriptive but is different from `TextReader`.\r\n\r\nSome suggestions:\r\n- `DelimitedTextReader`\r\n- `DelimTextReader`\r\n- `TextDataReader`\r\n\r\ncc: @glebuk @eerhardt @TomFinley ","Url":"https://github.com/dotnet/machinelearning/issues/2144","RelatedDescription":"Open issue \"Decide a good name for TextLoader\" (#2144)"},{"Id":"399134254","IsPullRequest":true,"CreatedAt":"2019-01-15T00:19:52","Actor":"eerhardt","Number":"2143","RawContent":null,"Title":"Remove ColumnType.RawKind usages Round 1.","State":"open","Body":"Remove all usages of RawKind that are outside of ML.Core and ML.Data assemblies. The next round will completely remove ColumnType.RawKind.\r\n\r\nPart of the work necessary for #1860 and contributes to #1533.","Url":"https://github.com/dotnet/machinelearning/pull/2143","RelatedDescription":"Open PR \"Remove ColumnType.RawKind usages Round 1.\" (#2143)"},{"Id":"399126527","IsPullRequest":true,"CreatedAt":"2019-01-14T23:50:51","Actor":"rogancarr","Number":"2142","RawContent":null,"Title":"Refactor GAM Predictor to be Generic","State":"open","Body":"This PR refactors the GAM trainer and predictor such that all training information remains in the trainer, and the GAM predictor is for any generic (binned) GAM.\r\n\r\nFixes #1948\r\n","Url":"https://github.com/dotnet/machinelearning/pull/2142","RelatedDescription":"Open PR \"Refactor GAM Predictor to be Generic\" (#2142)"},{"Id":"399112226","IsPullRequest":false,"CreatedAt":"2019-01-14T22:54:10","Actor":"yaeldekel","Number":"2141","RawContent":null,"Title":"Why can't SlotDroppingTransformer be applied to integer columns?","State":"open","Body":"This is the comment on the IsValidColumnType method of the transformer:\r\nhttps://github.com/dotnet/machinelearning/blob/master/src/Microsoft.ML.Data/Transforms/DropSlotsTransform.cs#L474\r\n\r\nBoth scalars and vectors are acceptable types, but the item type must have a default value which means it must be a string, a key, a float or a double.\r\n\r\nI think integers fit this description as well.","Url":"https://github.com/dotnet/machinelearning/issues/2141","RelatedDescription":"Open issue \"Why can't SlotDroppingTransformer be applied to integer columns?\" (#2141)"},{"Id":"399097824","IsPullRequest":true,"CreatedAt":"2019-01-14T22:17:02","Actor":"wschin","Number":"2140","RawContent":null,"Title":"Remove ISchema in TextLoader.cs and TextLoaderCursor.cs","State":"open","Body":"As title. This might be the tail of #1501.","Url":"https://github.com/dotnet/machinelearning/pull/2140","RelatedDescription":"Open PR \"Remove ISchema in TextLoader.cs and TextLoaderCursor.cs\" (#2140)"},{"Id":"399066289","IsPullRequest":true,"CreatedAt":"2019-01-14T20:46:18","Actor":"stephentoub","Number":"2138","RawContent":null,"Title":"Avoid using exceptions for control flow in GetBatch","State":"open","Body":"Fixes https://github.com/dotnet/machinelearning/issues/2137\r\nContributes to https://github.com/dotnet/machinelearning/issues/2099\r\n\r\nThis avoids using Take() in GetBatch, instead using TryTake with an infinite timeout, the only difference being whether it expects to eventually get data, and thus whether it throws or returns false when it finds the collection empty and marked for completion. This doesn't fix #2099, but it helps.  These exceptions are largely a side-effect of tons of threads getting created, which is another huge contributor to #2099.\r\n\r\ncc: @TomFinley ","Url":"https://github.com/dotnet/machinelearning/pull/2138","RelatedDescription":"Open PR \"Avoid using exceptions for control flow in GetBatch\" (#2138)"},{"Id":"399055967","IsPullRequest":false,"CreatedAt":"2019-01-14T20:16:03","Actor":"TomFinley","Number":"2137","RawContent":null,"Title":"Change TextLoader synchronization to not use exceptions","State":"open","Body":"The `TextLoader` code in its current form uses multithreading in its parsing. While reading the raw data from the file is in a single thread, the work of interpreting that data, putting it into buffers, etc. etc., is done in separate threads as that was the bottleneck in parsing. It uses blocking collections to synchronize this work, as we do in many other places. So far, so good.\r\n\r\nNow, unfortunately, unlike our other usages of blocking collections, this implementation uses exception catching simply as a matter of course, to detect and react to empty buffers, etc. While this always seemed to me to have at least a bad code smell, apparently it is detrimental from a perf perspective as well, being needlessly slow compared to the other exception free mechanisms of using blocking collections, according to @stephentoub, whose diagnosis I quote directly below:\r\n\r\n> I believe the problem is that the demo is throwing ~110,000 exceptions (which are caught internally).  Adding the AppendCacheCheckpoint drops that to 50.  Exception throwing/catching is expensive, and there’s a noticeable difference in throughput even without the debugger attached, but exceptions are even more expensive when a debugger is attached, hence F5 being super slow.\r\n> \r\n> Almost all of the exceptions are InvalidOperationExceptions stemming from invalid use of a BlockingCollection:\r\n> System.InvalidOperationException: The collection argument is empty and has been marked as complete with regards to additions.\r\n> \r\n> Coming from:\r\n> \r\n> ```\r\n> System.Collections.Concurrent.dll!System.Collections.Concurrent.BlockingCollection<Microsoft.ML.Data.TextLoader.Cursor.LineBatch>.Take() Line 545     C#\r\n> Microsoft.ML.Data.dll!Microsoft.ML.Data.TextLoader.Cursor.LineReader.GetBatch() Line 451     C#\r\n> Microsoft.ML.Data.dll!Microsoft.ML.Data.TextLoader.Cursor.GetSomeLines(Microsoft.ML.Data.IMultiStreamSource source, int count, ref System.Collections.Generic.List<System.ReadOnlyMemory<char>> lines = null) Line 221    C#\r\n> Microsoft.ML.Data.dll!Microsoft.ML.Data.TextLoader.Bindings.Bindings(Microsoft.ML.Data.TextLoader parent = {Microsoft.ML.Data.TextLoader}, Microsoft.ML.Data.TextLoader.Column[] cols = {Microsoft.ML.Data.TextLoader.Column[5]}, Microsoft.ML.Data.IMultiStreamSource headerFile = null, Microsoft.ML.Data.IMultiStreamSource dataSample) Line 570      C#\r\n> Microsoft.ML.Data.dll!Microsoft.ML.Data.TextLoader.TextLoader(Microsoft.ML.IHostEnvironment env, Microsoft.ML.Data.TextLoader.Arguments args, Microsoft.ML.Data.IMultiStreamSource dataSample) Line 1135     C#\r\n> Microsoft.ML.Data.dll!Microsoft.ML.TextLoaderSaverCatalog.CreateTextReader(Microsoft.ML.DataOperations catalog, Microsoft.ML.Data.TextLoader.Arguments args, Microsoft.ML.Data.IMultiStreamSource dataSample) Line 37 C#\r\n> MulticlassClassification_Iris.dll!MulticlassClassification_Iris.Program.BuildTrainEvaluateAndSaveModel(Microsoft.ML.MLContext mlContext = {Microsoft.ML.MLContext}) Line 51 C#\r\n> MulticlassClassification_Iris.dll!MulticlassClassification_Iris.Program.Main(string[] args = {string[0]}) Line 38      C#\r\n> ```\r\n> \r\n> Whether or not that’s the only issue, I don’t know, but my guess is if you fix that issue, the perf will get a lot better.\r\n\r\nTangentially related to #2099, insofar as it sprang from the same discussion.","Url":"https://github.com/dotnet/machinelearning/issues/2137","RelatedDescription":"Open issue \"Change TextLoader synchronization to not use exceptions\" (#2137)"},{"Id":"399020074","IsPullRequest":true,"CreatedAt":"2019-01-14T18:37:03","Actor":"Ivanidzo4ka","Number":"2136","RawContent":null,"Title":"[WIP] [Don't Review]. PR to figure out solution for failing tests.","State":"open","Body":"","Url":"https://github.com/dotnet/machinelearning/pull/2136","RelatedDescription":"Open PR \"[WIP] [Don't Review]. PR to figure out solution for failing tests.\" (#2136)"},{"Id":"398476760","IsPullRequest":true,"CreatedAt":"2019-01-14T18:10:09","Actor":"yaeldekel","Number":"2130","RawContent":null,"Title":"Fix bug with order of pixels in the Interleave=true case","State":"closed","Body":"Fixes #2129.","Url":"https://github.com/dotnet/machinelearning/pull/2130","RelatedDescription":"Closed or merged PR \"Fix bug with order of pixels in the Interleave=true case\" (#2130)"},{"Id":"398476524","IsPullRequest":false,"CreatedAt":"2019-01-14T18:10:09","Actor":"yaeldekel","Number":"2129","RawContent":null,"Title":"ImagePixelExtractor bug when interleave=true","State":"closed","Body":"The outer for loop is over x and the inner loop is over y, causing the results to be inconsistent with the interleave=false case, which loops over y first and x second.","Url":"https://github.com/dotnet/machinelearning/issues/2129","RelatedDescription":"Closed issue \"ImagePixelExtractor bug when interleave=true\" (#2129)"},{"Id":"398087933","IsPullRequest":true,"CreatedAt":"2019-01-14T17:07:37","Actor":"wschin","Number":"2119","RawContent":null,"Title":"Remove ISchema in FCC","State":"closed","Body":"Again a part of #1501.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/2119","RelatedDescription":"Closed or merged PR \"Remove ISchema in FCC\" (#2119)"},{"Id":"398506488","IsPullRequest":true,"CreatedAt":"2019-01-12T01:25:05","Actor":"wschin","Number":"2135","RawContent":null,"Title":"Add a test to make sure example pipeline can run","State":"open","Body":"An [example](https://github.com/dotnet/machinelearning-samples/blob/16acc2f55880808bd34f3465e3eec4571565cb89/samples/csharp/getting-started/MatrixFactorization_MovieRecommendation/MovieRecommendation/Program.cs#L48) built with 0.7 doesn't work anymore because we reorder a function's arguments. Therefore, I'd like add a test for preventing it from happening again.","Url":"https://github.com/dotnet/machinelearning/pull/2135","RelatedDescription":"Open PR \"Add a test to make sure example pipeline can run\" (#2135)"},{"Id":"398491210","IsPullRequest":false,"CreatedAt":"2019-01-11T23:40:25","Actor":"CESARDELATORRE","Number":"2134","RawContent":null,"Title":"Support for \"Multi target regression models\" (MTR)","State":"open","Body":"This feature request started from a particular customer feedback (see feedback at the end of the comment).\r\n\r\nContext/explanation:\r\n\r\nMost Machine Learning models targeting a regression problem usually support a single target variable to predict, which for the case of a regression is a numeric value.\r\n\r\nHowever, other machine learning frameworks also provide \"Multi target regression models\" (MTR) like explained in the post link below:\r\n\r\nhttps://towardsdatascience.com/regression-models-with-multiple-target-variables-8baa75aacd \r\n\r\nHowever, ML.NET currently doesn't have a built-in multi-output regression learner/trainer.\r\n\r\nCurrently, by just using ML.NET, you need to use a different trained model per each target variable/prediction. If you want to predict 5 different target or dependent variables , you'd need to create 5 different models for that, instead of a single model predicting 5 target variables. \r\n\r\nFEATURE:\r\n\r\nThe implementation of this feature would allow ML.NET to support \"Multi target regression models\" (MTR), built-in in ML.NET without needing external frameworks like TensorFlow.\r\n\r\n--------------------------------------------------------------------------------------------------------\r\nCUSTOMER FEEDBACK:\r\n--------------------------------------------------------------------------------------------------------\r\nta.speot.is\r\nHi, thanks for improving ML.NET. I’ve spent a little bit of time with it and it’s nice to have a first-class .NET API for Machine Learning.\r\n\r\nRight now I’m using ML.NET very much like described in “Tutorial: Predict New York taxi fares using a regression learner with ML.NET” but I’m wondering how to build on it. Presently I’m predicting one attribute (in the tutorial’s case: the taxi fare) but I have more complicated scenarios I want to predict that involve multiple attributes (using the tutorial’s domain it would be predicting, say, taxi fare AND a surge charging multiple e.g. 1.0x, 1.5x).\r\n\r\nTrying to make “Score” an array of floats didn’t work (the glossary on MSDN says regression is “the output is a real value, for example, double” i.e. one value so that it didn’t work was to be expected).\r\n\r\n**Obviously I could train 10 models for the 10 attributes I want to predict but I feel like there’s a better way.** \r\n\r\nIf anybody has any thoughts I’d appreciate any suggestions!\r\n\r\n--------------------------------------------------------------------------------------------------------\r\n","Url":"https://github.com/dotnet/machinelearning/issues/2134","RelatedDescription":"Open issue \"Support for \"Multi target regression models\" (MTR)\" (#2134)"},{"Id":"398485238","IsPullRequest":false,"CreatedAt":"2019-01-11T23:12:10","Actor":"sfilipi","Number":"2133","RawContent":null,"Title":"Command-line oriented arguments, that have more suitable alternatives for the API should be made internal","State":"open","Body":"In the arguments classes there are several arguments that get translated to the same parameter for the estimators/transforms. \r\n\r\nOne of the variant is  a convenience for the command line version of ML.Net. \r\n\r\nI think those can be made internal, and kept away from the user for v1. \r\n\r\nExample:\r\n\r\n[ValueToKeyMappingTransformer.ArgumentsBase](https://github.com/dotnet/machinelearning/blob/312f9e4c71953bee701ea2a63be3cb4d2d276d20/src/Microsoft.ML.Data/Transforms/ValueToKeyMappingTransformer.cs#L53)\r\n\r\n```csharp\r\npublic abstract class ArgumentsBase : TransformInputBase\r\n{\r\n     [Argument(ArgumentType.AtMostOnce, HelpText = \"Maximum number of terms to keep per column when auto-training\", ShortName = \"max\", SortOrder = 5)]\r\n      public int MaxNumTerms = ValueToKeyMappingEstimator.Defaults.MaxNumTerms;\r\n\r\n      [Argument(ArgumentType.AtMostOnce, HelpText = \"Comma separated list of terms\", SortOrder = 105, Visibility = ArgumentAttribute.VisibilityType.CmdLineOnly)]\r\n      public string Terms;\r\n\r\n      [Argument(ArgumentType.AtMostOnce, HelpText = \"List of terms\", SortOrder = 106, Visibility = ArgumentAttribute.VisibilityType.EntryPointsOnly)]\r\n      public string[] Term;\r\n```\r\n\r\nI don't think our API users should see the first \r\n\r\n`public string Terms`","Url":"https://github.com/dotnet/machinelearning/issues/2133","RelatedDescription":"Open issue \"Command-line oriented arguments, that have more suitable alternatives for the API should be made internal\" (#2133)"},{"Id":"398482437","IsPullRequest":true,"CreatedAt":"2019-01-11T22:59:12","Actor":"wschin","Number":"2132","RawContent":null,"Title":"Remove ISchema in TreeEnsembleFeaturizer","State":"open","Body":"New member of #1501.","Url":"https://github.com/dotnet/machinelearning/pull/2132","RelatedDescription":"Open PR \"Remove ISchema in TreeEnsembleFeaturizer\" (#2132)"},{"Id":"398465288","IsPullRequest":true,"CreatedAt":"2019-01-11T22:57:37","Actor":"eerhardt","Number":"2128","RawContent":null,"Title":"Publish test trx files on failure","State":"closed","Body":"There are times when the tests fail, but we don't know why. Publish the trx files as well during test failures.","Url":"https://github.com/dotnet/machinelearning/pull/2128","RelatedDescription":"Closed or merged PR \"Publish test trx files on failure\" (#2128)"},{"Id":"398480598","IsPullRequest":true,"CreatedAt":"2019-01-11T22:50:42","Actor":"eerhardt","Number":"2131","RawContent":null,"Title":"Remove \"VectorType\" specific members on ColumnType.","State":"open","Body":"Remove the following members from ColumnType:\r\n\r\n- IsVector\r\n- ItemType\r\n- IsKnownSizeVector\r\n- VectorSize\r\n- ValueCount\r\n\r\nPart of the work necessary for #1860 and contributes to #1533.","Url":"https://github.com/dotnet/machinelearning/pull/2131","RelatedDescription":"Open PR \"Remove \"VectorType\" specific members on ColumnType.\" (#2131)"},{"Id":"398434532","IsPullRequest":false,"CreatedAt":"2019-01-11T20:07:14","Actor":"CESARDELATORRE","Number":"2127","RawContent":null,"Title":"Allow multiple numeric data types in pipeline and estimators, plus allow different datatypes in the Concat estimator","State":"open","Body":"Related to this issue at the ML.NET Samples repo with feedback from a customer: https://github.com/dotnet/machinelearning-samples/issues/198\r\n\r\nMost of our algorithms expect floating point values as input. You need to either read your input as floats (DataKind.R4 or DataKind.R8) or convert ints to floats later in the pipeline.\r\n\r\nThis is a typical problem that customers might have when starting with new datasets where data could initially be Integer, etc. and since DataKind enum has more than just float and double it can be misleading and create trouble when getting started.\r\n\r\nIt's definitely unclear to beginners why integer only wouldn't work, etc. \r\n\r\nPROPOSALS:\r\n\r\n- 1. Expand API so it'd accept additional numeric data types like Integer. Do conversions/cast internally?\r\n\r\n- 2. Expand Concat estimator API to accept multiple/different numeric column types for the multiple columns being being concatenated. So I could concatenate an integer column with a double column and so forth. Again, it might need conversions, but it probably could be done internally?\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/2127","RelatedDescription":"Open issue \"Allow multiple numeric data types in pipeline and estimators, plus allow different datatypes in the Concat estimator\" (#2127)"},{"Id":"398417494","IsPullRequest":false,"CreatedAt":"2019-01-11T19:15:47","Actor":"taohu88","Number":"2126","RawContent":null,"Title":"Please add vector distance transform","State":"open","Body":"### Issue\r\n- **What did you do?**\r\nWhen I used SSWE WordEmbedding, I'd like to have VectorDistanceTranform to compute similarity score between two sentiment vectors. In my use case,  I don't need to maintain two sentiment vectors beyond the similarity score.\r\n\r\n- **What did you expect?**\r\nI would like to have VectorDistanceTransform to compute similarity score.\r\n","Url":"https://github.com/dotnet/machinelearning/issues/2126","RelatedDescription":"Open issue \"Please add vector distance transform\" (#2126)"},{"Id":"398404049","IsPullRequest":true,"CreatedAt":"2019-01-11T18:33:21","Actor":"najeeb-kazmi","Number":"2125","RawContent":null,"Title":"Rename CreateTextReader to CreateTextLoader","State":"open","Body":"Fixes #1690 \r\n\r\nRename `CreateTextReader` to `CreateTextLoader` to conform to the return type:\r\n\r\n```csharp\r\nTextLoader textLoader = mlContext.Data.CreateTextLoader(new TextLoader.Arguments() ...\r\n```","Url":"https://github.com/dotnet/machinelearning/pull/2125","RelatedDescription":"Open PR \"Rename CreateTextReader to CreateTextLoader\" (#2125)"},{"Id":"398398054","IsPullRequest":true,"CreatedAt":"2019-01-11T18:14:31","Actor":"najeeb-kazmi","Number":"2124","RawContent":null,"Title":"[WIP] Make array argument names plural","State":"open","Body":"Fixes #2040 \r\n\r\nMakes array argument names plural where they were singular.\r\n\r\nIn three places, we had arguments `string Terms`, a comma separated list of terms, visible to command line only and `string[] Term` visible to entry points only. Here, the array argument could not be named `Terms` without a conflict, so I also renamed `string Terms` to `string TermsList`.\r\n\r\nThat is to say this:\r\n```csharp\r\n            [Argument(ArgumentType.AtMostOnce, HelpText = \"Comma separated list of terms\", SortOrder = 105, Visibility = ArgumentAttribute.VisibilityType.CmdLineOnly)]\r\n            public string Terms;\r\n\r\n            [Argument(ArgumentType.AtMostOnce, HelpText = \"List of terms\", SortOrder = 106, Visibility = ArgumentAttribute.VisibilityType.EntryPointsOnly)]\r\n            public string[] Term;\r\n```\r\n\r\nbecame this:\r\n```csharp\r\n            [Argument(ArgumentType.AtMostOnce, HelpText = \"Comma separated list of terms\", Name = \"Terms\", SortOrder = 105, Visibility = ArgumentAttribute.VisibilityType.CmdLineOnly)]\r\n            public string TermsList;\r\n\r\n            [Argument(ArgumentType.AtMostOnce, HelpText = \"List of terms\", SortOrder = 106, Visibility = ArgumentAttribute.VisibilityType.EntryPointsOnly)]\r\n            public string[] Terms;\r\n```","Url":"https://github.com/dotnet/machinelearning/pull/2124","RelatedDescription":"Open PR \"[WIP] Make array argument names plural\" (#2124)"},{"Id":"398383243","IsPullRequest":true,"CreatedAt":"2019-01-11T17:28:11","Actor":"wschin","Number":"2123","RawContent":null,"Title":"Remove ISchema in TensorflowUtils.cs and polish its shape translation","State":"open","Body":"As title. Party member of #1501.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/2123","RelatedDescription":"Open PR \"Remove ISchema in TensorflowUtils.cs and polish its shape translation\" (#2123)"},{"Id":"398225244","IsPullRequest":false,"CreatedAt":"2019-01-11T10:24:55","Actor":"rauhs","Number":"2122","RawContent":null,"Title":"New StaticPipe nuget should be mentioned in release notes","State":"open","Body":"Title says it all. I just spend way too much time on this issue.","Url":"https://github.com/dotnet/machinelearning/issues/2122","RelatedDescription":"Open issue \"New StaticPipe nuget should be mentioned in release notes\" (#2122)"},{"Id":"398118616","IsPullRequest":false,"CreatedAt":"2019-01-11T03:36:11","Actor":"CESARDELATORRE","Number":"2121","RawContent":null,"Title":"ImageLoadingEstimator for TensorFlow scoring should allow in-memory image streams as input in addition to images from files on drive ","State":"open","Body":"Right now the only way for ML.NET to load images is via ImageLoadingEstimator, which can load them *only* from disk files (as confirmed by @yaeldekel and Pete a few weeks ago).\r\n\r\nHowever, it is a very common scenario in applications, such as a web app, where users submit images through Http, then the DataView/pipeline would load in-memory image streams (either BitMap, byte[], Image) instead of loading images from files in a folder on a disk/drive. \r\n\r\nThat's the right way to do it for many scenarios in web apps and services (Web APIs).\r\nAnd for instance, you can do that when using TensorFlowSharp in C#. But we cannot in ML.NET, as of today.\r\n\r\nWhen implementing this feature improvement in ML.NET, there could be the following two approaches:\r\n\r\n- Modify schema comprehension to be able to map Bitmap fields/properties to Image columns of a data view.\r\n\r\n- Add another version of ImageLoading transformer that loads/decodes the image from a byte vector, rather than from a disk file identified by path.\r\n\r\nIn any case, this is an important scenario to implement because not being able to load images from in-memory streams and only from files can be a big handicap in performance for on-line scenarios like the ones mentioned.\r\n\r\nWith the current implementation in ML.NET, the only workaround is to save the upcoming image from http and in-memory into a temporary file on the disk and load it from there. But that is a very \"coarse/poor\" workaround, not performant at all for a real application in production. \r\n\r\nThe following is a sample app I created for this online scenario where the user uploads an image from the browser into a service (Web API) and ultimately you get it as an in-memory image stream.\r\n\r\nSEE CODE HERE:\r\n\r\nhttps://github.com/CESARDELATORRE/TensorFlowImageClassificationWebAPI\r\n\r\n\r\n![image](https://user-images.githubusercontent.com/1712635/51009187-00dc4980-1504-11e9-866d-2c69bbd0db74.png)\r\n\r\n- That web form uploads the image through Http into a service (Web API) in the server-side. At that point, the image is an in-memory image stream.\r\n\r\n- In this implementation the sample app works because I implemented a workaround so the submitted image is temporarily stored as a file, then loaded from the file into the DataView through the pipeline...)\r\n\r\nBasically, when the C# method in the Web API gets the image as an in-memory stream it should be able to load it directly in the DataView. The following code is an example:\r\n\r\n```cs\r\n        // Controller's method from Web API \r\n        [HttpPost]\r\n        [ProducesResponseType(200)]\r\n        [ProducesResponseType(400)]\r\n        [Route(\"classifyimage\")]\r\n        public async Task<IActionResult> ClassifyImage(IFormFile imageFile)\r\n        {\r\n                if (imageFile.Length == 0)\r\n                    return BadRequest();\r\n\r\n                // WORKAROUND: Save image into a temporal file\r\n                //Save the temp image image into the temp-folder \r\n                string fileName = await _imageWriter.UploadImageAsync(imageFile, _imagesTmpFolder);\r\n                string imageFilePath = Path.Combine(_imagesTmpFolder, fileName);\r\n\r\n                // Use image filename as the workaround...\r\n                // Rest of the implementation with ML.NET API for scoring TensorFlow model...\r\n                // ...\r\n           \r\n        }\r\n```\r\n\r\nTo sum up:\r\n\r\nI believe it is \"a must\" for ML.NET to be able to load in-memory image streams into the DataView to use those images when scoring TensorFlow models (in addition \"from files\") because of the mentioned on-line and in-memory scenarios that are pretty common.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/2121","RelatedDescription":"Open issue \"ImageLoadingEstimator for TensorFlow scoring should allow in-memory image streams as input in addition to images from files on drive \" (#2121)"},{"Id":"398096620","IsPullRequest":false,"CreatedAt":"2019-01-11T01:54:03","Actor":"wschin","Number":"2120","RawContent":null,"Title":"Several functions in FCC scorer not used/tested","State":"open","Body":"As title. The functions below have zero reference counts.\r\n```csharp\r\n        private static IDataScorerTransform Create(IHostEnvironment env, Arguments args, IDataView data, ISchemaBoundMapper mapper, RoleMappedSchema trainSchema)\r\n        {\r\n            Contracts.CheckValue(env, nameof(env));\r\n            env.CheckValue(data, nameof(data));\r\n            env.CheckValue(mapper, nameof(mapper));\r\n            if (args.Top< 0)\r\n                throw env.Except($\"Number of top contribution must be non negative\");\r\n            if (args.Bottom < 0)\r\n                throw env.Except($\"Number of bottom contribution must be non negative\");\r\n\r\n            var contributionMapper = mapper as RowMapper;\r\n            env.CheckParam(mapper != null, nameof(mapper), \"Unexpected mapper\");\r\n\r\n            var scorer = ScoreUtils.GetScorerComponent(env, contributionMapper);\r\n            var scoredPipe = scorer.CreateComponent(env, data, contributionMapper, trainSchema);\r\n            return scoredPipe;\r\n        }\r\n\r\n        // Factory method for SignatureBindableMapper.\r\n        private static ISchemaBindableMapper Create(IHostEnvironment env, Arguments args, IPredictor predictor)\r\n        {\r\n            Contracts.CheckValue(env, nameof(env));\r\n            env.CheckValue(predictor, nameof(predictor));\r\n            var pred = predictor as IFeatureContributionMapper;\r\n            env.CheckParam(pred != null, nameof(predictor), \"Predictor doesn't support getting feature contributions\");\r\n            return new BindableMapper(env, pred, args.Top, args.Bottom, args.Normalize, args.Stringify);\r\n        }\r\n\r\n        // Factory method for SignatureLoadModel.\r\n        private static ISchemaBindableMapper Create(IHostEnvironment env, ModelLoadContext ctx)\r\n            => new BindableMapper(env, ctx);\r\n```\r\nI further commented out the whole `FeatureContributionCalculation.cs`, rebuilt my solution, and ran all tests starting with `FeatureCont`. Surprisingly, all tests passed.","Url":"https://github.com/dotnet/machinelearning/issues/2120","RelatedDescription":"Open issue \"Several functions in FCC scorer not used/tested\" (#2120)"},{"Id":"398077662","IsPullRequest":true,"CreatedAt":"2019-01-11T00:30:32","Actor":"sfilipi","Number":"2118","RawContent":null,"Title":"swapping the order or arguments on the constructors of the ConversionExtensionsCatalog. Internalizing the constructors.","State":"open","Body":"Working towards resolving #2064 by swapping the order or arguments on the constructors of the ConversionExtensions Catalog. Internalizing the constructors.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/2118","RelatedDescription":"Open PR \"swapping the order or arguments on the constructors of the ConversionExtensionsCatalog. Internalizing the constructors.\" (#2118)"}],"ResultType":"GitHubIssue"}},"RunOn":"2019-01-15T05:30:43.9211702Z","RunDurationInMilliseconds":912}