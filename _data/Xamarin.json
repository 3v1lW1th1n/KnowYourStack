{"Data":{"Blog":{"FeedItems":[{"Title":"Developer Community Events in March","PublishedOn":"2019-03-01T17:59:05+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"User groups are getting together to learn about new, exciting releases and tooling to help jumpstart their next mobile development project. Network with your local community and you too could get all...","Href":"https://blog.xamarin.com/developer-community-events-in-march/","RawContent":null},{"Title":"View PDF Files within Your Xamarin.Forms Apps Using the Syncfusion PDF Viewer","PublishedOn":"2019-02-28T17:04:29+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"This post was guest authored and contributed by Suresh Mohan. Suresh is the Product Manager for PDF Viewer at Syncfusion Software where he specializes in desktop and mobile app development. &#160;...","Href":"https://blog.xamarin.com/xamarin-forms-apps-syncfusion-pdf-viewer/","RawContent":null},{"Title":"Quick Tip: Debugging Local ASP.NET Core Web APIs on Android Emulators","PublishedOn":"2019-02-25T19:36:04+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"When developing mobile applications with a web API backend there is always a need to debug locally on your development machine. If you are using Visual Studio for Mac and debugging iOS applications...","Href":"https://blog.xamarin.com/debug-local-asp-net-core-web-apis-android-emulators/","RawContent":null},{"Title":"Xamarin and Azure Office Hours Recap from December 2018 and January 2019","PublishedOn":"2019-02-21T18:11:51+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"That&#8217;s right, I ❤️ every single one of you(!) and I want to know more about your stories building mobile apps. I want to hear stories of your successes and also, the not-so-successful...","Href":"https://blog.xamarin.com/xamarin-azure-office-hours-recap-december-january/","RawContent":null},{"Title":"Persisting Settings and Preferences in Mobile Apps with Xamarin.Essentials","PublishedOn":"2019-02-19T19:56:32+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"An essential part of any mobile application is the ability to persist data. Sometimes that is a large amount of data that requires a database, but often it is smaller pieces of data such as settings...","Href":"https://blog.xamarin.com/persisting-settings-preferences-mobile-apps-xamarin-essentials/","RawContent":null},{"Title":"Xamarin Developer Blog is Getting an Update!","PublishedOn":"2019-02-15T18:56:04+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"In the coming weeks, the Xamarin Developer Blog will be migrating to a new platform with a modern, clean design and powerful features that will make it easy for you to discover and share great...","Href":"https://blog.xamarin.com/xamarin-developer-blog-is-getting-an-update/","RawContent":null},{"Title":"Visual Studio Mobile Developer Podcast: Releases, Previews, and Roadmaps!","PublishedOn":"2019-02-13T19:56:28+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"The Visual Studio Mobile Developer Podcast features Matt Soucoup and James Montemagno discussing the latest and greatest in mobile and cloud development. In this episode, we discuss the best of...","Href":"https://blog.xamarin.com/podcast-releases-previews-roadmaps/","RawContent":null},{"Title":"Easily Check Mobile Device Connectivity with Xamarin.Essentials","PublishedOn":"2019-02-12T19:06:36+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"One of the best parts of a mobile device is their instant access to the internet. As a mobile app developer, it&#8217;s great to be able to pull data from the server to our apps to provide users with...","Href":"https://blog.xamarin.com/easily-check-mobile-device-connectivity-with-xamarin-essentials/","RawContent":null},{"Title":"5 Things You’ll Love in Xamarin.Forms 3.5","PublishedOn":"2019-02-06T17:22:16+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Although Valentine&#8217;s Day isn&#8217;t for a few more days, we just couldn&#8217;t wait to celebrate the love by sharing a new stable release of Xamarin.Forms &#8211; 3.5. Your engagement and...","Href":"https://blog.xamarin.com/5-things-youll-love-xamarin-forms-3-5/","RawContent":null},{"Title":"Using Existing C++ Libraries in Cross-Platform Xamarin.Forms Applications","PublishedOn":"2019-02-04T18:52:08+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"There are many libraries developed using C or C++ which can be brought to bear when creating Xamarin-based mobile apps such as those leveraged by Microsoft’s Hyperlapse Mobile and Pix Camera in order...","Href":"https://blog.xamarin.com/using-c-libraries-xamarin-forms-apps/","RawContent":null}],"ResultType":"Feed"},"Android":{"Events":[{"Id":"9168856705","Type":"PullRequestEvent","CreatedAt":"2019-03-03T03:01:19","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2781","RelatedDescription":"Merged pull request \"[Xamarin.Android.Build.Tasks] support enhanced fastdev + D8\" (#2781) at xamarin/xamarin-android","RelatedBody":"A couple problems where happening when you mix:\r\n\r\n    <AndroidDexTool>d8</AndroidDexTool>\r\n    <AndroidFastDeploymentType>Assemblies:Dexes</AndroidFastDeploymentType>\r\n\r\nIt seems the D8 MSBuild targets weren't doing the right thing:\r\n\r\n* D8 targets are using `@(_JavaLibrariesToCompile)` throughout, but\r\n  should be using `@(_JavaLibrariesToCompileForAppDx)` to be \"aware\"\r\n  of enhanced fastdev.\r\n* D8/R8 are generally more strict about missing libraries, so we need\r\n  to make sure a `--lib` switch is added for all the Java libraries.\r\n  Since their dex files are fast deployed, they won't be dexed by the\r\n  calls here.\r\n\r\nSo the changes here are:\r\n\r\n* Rename `@(_JavaLibrariesToCompileForAppDx)` to just\r\n  `@(_JavaLibrariesToCompileForApp)` so it makes sense for DX and D8.\r\n* Use `@(_JavaLibrariesToCompileForApp)` throughout the D8 targets.\r\n* Add the Java libraries to `@(AndroidExternalJavaLibrary)` when\r\n  `$(_InstantRunEnabled)` is `True`. This will add the `--lib` switch\r\n  for each library during the `<D8/>` or `<R8/>` call.\r\n* I switched to using `<ItemGroup/>` over `<CreateItem/>`"},{"Id":"9168850480","Type":"PullRequestEvent","CreatedAt":"2019-03-03T02:57:02","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2779","RelatedDescription":"Merged pull request \"[Xamarin.Android.Build.Tasks] AndroidUseAapt2 defaults to False\" (#2779) at xamarin/xamarin-android","RelatedBody":"In preparation for branching for d16-1, we need `$(AndroidUseAapt2)`\r\nto be disabled by default.\r\n\r\nWe currently have aapt2 disabled on d16-0: ac1b29e8\r\n\r\nI am hoping a one-line change is all we need here, since master also\r\nhas: 61716bb3"},{"Id":"9167342608","Type":"IssuesEvent","CreatedAt":"2019-03-02T12:48:11","Actor":"vjlomocso","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/2783","RelatedDescription":"Opened issue \"Allowing microphone permission in runtime has no effect the first time\" (#2783) at xamarin/xamarin-android","RelatedBody":"### Steps to Reproduce\r\n\r\n1. Request permission using API\r\n2. Allow permission\r\n3. call `AudioRecord#StartRecording`\r\n4. The AudioRecord#StartRecording method will throw an exception saying something like the AudioRecord is uninitialized. This is exactly what happens when you don't allow the permission.\r\n\r\nHere's a repro project\r\nhttps://github.com/vjlomocso/XamarinAndroidPermissionBug\r\n\r\n### Expected Behavior\r\nShould not throw exception after allowing permission\r\n\r\n### Actual Behavior\r\nThrows exception\r\n\r\n### Version Information\r\n\r\n<!--\r\n1. On macOS and within Visual Studio, select Visual Studio > About Visual Studio, then click the Show Details button, then click the Copy Information button.\r\n\r\n2. Paste below this comment block.\r\n-->\r\nhttps://github.com/vjlomocso/XamarinAndroidPermissionBug/blob/master/versioninfo.txt\r\n\r\n\r\n### Log File\r\n\r\n<!--\r\n1. On macOS and within Visual Studio:\r\n    a. Click **Tools** > **SDK Command Prompt**.\r\n    b. Within the launched `Terminal.app` window, run:\r\n\r\n            adb logcat -d | pbcopy\r\n\r\n2. Paste below this comment block\r\n-->\r\nhttps://github.com/vjlomocso/XamarinAndroidPermissionBug/blob/master/logcat.log\r\n\r\n\r\n<!--\r\nSwitch to the \"Preview\" tab to ensure your issue renders correctly.\r\n\r\nPlease add an appropriate \"Area:\" label in the Labels section.\r\n-->"},{"Id":"9166265496","Type":"PullRequestEvent","CreatedAt":"2019-03-02T01:46:02","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2782","RelatedDescription":"Merged pull request \"[build] Upload unit test results\" (#2782) at xamarin/xamarin-android","RelatedBody":"There was some unexpected and unforeseen fallout from commit 241d9416:\r\n`make package-build-status` is only run once.\r\n\r\nThis doesn't *sound* problematic -- hence the oversight -- but the\r\n`msbuild*.binlog` files that the `xa-build-status*.zip` file contained\r\nprior to commit 241d9416 contained *unit test execution logs*, e.g.\r\n`msbuild-*-Target-RunApkTests.binlog`\twhich contains on-device\r\nexecution of the `.apk` unit tests.\r\n\r\nHowever, these files don't exist until *after* the unit tests are run.\r\nMeanwhile, `make package-build-status` is executed *before* unit tests\r\nare run, and thus the resulting `xa-build-status*.zip` file no longer\r\ncontains unit test information!\r\n\r\n(This makes it rather difficult to actually review anything about unit\r\ntest execution!)\r\n\r\nThe fix?  Update the `$(MSBUILD_BINLOG)` Make `define` so that it now\r\ntakes an optional 3rd parameter: part of the directory name to place\r\nfiles into, which defaults to `Build`.  (This allows overriding things\r\nso that unit-test related `.binlog` files now go into\r\n`bin/Test$(Configuration)`, not `bin/Build$(Configuration)`.)\r\n\r\nAdditionally, *rename* the `make package-test-errors` rule to\r\n`make package-test-results`, have it produce an `xa-test-results*.zip`\r\nfile, and include the `bin/Test$(Configuration)/msbuild*.binlog` files\r\ninto `xa-test-results*.zip`.\r\n\r\n`make package-test-results` is executed after unit tests are executed,\r\nso this change allows us the uploaded `xa-test-results.zip` file to\r\ncontain unit test execution results."},{"Id":"9166113496","Type":"PullRequestEvent","CreatedAt":"2019-03-02T00:42:15","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2778","RelatedDescription":"Merged pull request \"Bump to mono/mono/2018-08@56906e23\" (#2778) at xamarin/xamarin-android","RelatedBody":"Context: https://github.com/xamarin/xamarin-android/issues/2679\r\n\r\nBumps to mono/api-snapshot@a388436d\r\n\r\nCrash reporting improvements.\r\n\r\nMake `System.dll` internals visible to `Mono.Android`."},{"Id":"9165839115","Type":"PullRequestEvent","CreatedAt":"2019-03-01T23:14:15","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2782","RelatedDescription":"Opened pull request \"[build] Upload unit test results\" (#2782) at xamarin/xamarin-android","RelatedBody":"There was some unexpected and unforeseen fallout from commit 241d9416:\r\n`make package-build-status` is only run once.\r\n\r\nThis doesn't *sound* problematic -- hence the oversight -- but the\r\n`msbuild*.binlog` files that the `xa-build-status*.zip` file contained\r\nprior to commit 241d9416 contained *unit test execution logs*, e.g.\r\n`msbuild-*-Target-RunApkTests.binlog`\twhich contains on-device\r\nexecution of the `.apk` unit tests.\r\n\r\nHowever, these files don't exist until *after* the unit tests are run.\r\nMeanwhile, `make package-build-status` executed *before* unit tests\r\nare run, and thus the resulting `xa-build-status*.zip` file no longer\r\ncontains unit test information!\r\n\r\n(This makes it rather difficult to actually review anything about unit\r\ntest execution!)\r\n\r\nThe fix?  Update the `$(MSBUILD_BINLOG)` Make `define` so that it now\r\ntakes an optional 3rd parameter: part of the directory name to place\r\nfiles into, which defaults to `Build`.  (This allows overriding things\r\nso that unit-test related `.binlog` files now go into\r\n`bin/Test$(Configuration)`, not `bin/Build$(Configuration)`.)\r\n\r\nAdditionally, *rename* the `make package-test-errors` rule to\r\n`make package-test-results`, have it produce an `xa-test-results*.zip`\r\nfile, and include the `bin/Test$(Configuration)/msbuild*.binlog` files\r\ninto `xa-test-results*.zip`.\r\n\r\n`make package-test-results` is executed after unit tests are executed,\r\nso this change allows us the uploaded `xa-test-results.zip` file to\r\ncontain unit test execution results."},{"Id":"9165655167","Type":"PullRequestEvent","CreatedAt":"2019-03-01T22:28:17","Actor":"jonathanpeppers","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2781","RelatedDescription":"Opened pull request \"[Xamarin.Android.Build.Tasks] support enhanced fastdev + D8\" (#2781) at xamarin/xamarin-android","RelatedBody":"A couple problems where happening when you mix:\r\n\r\n    <AndroidDexTool>d8</AndroidDexTool>\r\n    <AndroidFastDeploymentType>Assemblies:Dexes</AndroidFastDeploymentType>\r\n\r\nIt seems the D8 MSBuild targets weren't doing the right thing:\r\n\r\n* D8 targets are using `@(_JavaLibrariesToCompile)` throughout, but\r\n  should be using `@(_JavaLibrariesToCompileForAppDx)` to be \"aware\"\r\n  of enhanced fastdev.\r\n* D8/R8 are generally more strict about missing libraries, so we need\r\n  to make sure a `--lib` switch is added for all the Java libraries.\r\n  Since their dex files are fast deployed, they won't be dexed by the\r\n  calls here.\r\n\r\nSo the changes here are:\r\n\r\n* Rename `@(_JavaLibrariesToCompileForAppDx)` to just\r\n  `@(_JavaLibrariesToCompileForApp)` so it makes sense for DX and D8.\r\n* Use `@(_JavaLibrariesToCompileForApp)` throughout the D8 targets.\r\n* Add the Java libraries to `@(AndroidExternalJavaLibrary)` when\r\n  `$(_InstantRunEnabled)` is `True`. This will add the `--lib` switch\r\n  for each library during the `<D8/>` or `<R8/>` call.\r\n* I switched to using `<ItemGroup/>` over `<CreateItem/>`"},{"Id":"9165547072","Type":"IssuesEvent","CreatedAt":"2019-03-01T22:04:34","Actor":"pjcollins","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/2780","RelatedDescription":"Opened issue \"[mono-2018-10] No longer able to load certain 64bit system libraries\" (#2780) at xamarin/xamarin-android","RelatedBody":"I'm encountering a new crash on startup when running certain projects on 64bit devices that appears to only occur against builds from https://github.com/xamarin/xamarin-android/tree/mono-2018-10.\r\n\r\n### Steps to Reproduce\r\n\r\n1. Download and run https://github.com/xamarin/xamarin-forms-samples/tree/master/SkiaSharpForms/MandelAnima on device a 64bit device. If deploying in Release mode, ensure `arm64-v8a` is enabled as a supported ABI.\r\n\r\nThis results in the following crash:\r\nhttp://xqa.blob.core.windows.net/gist/report-37f88bd9516342a0b03dfc95c16ddb3d.txt\r\n\r\n#### Secondary steps to Reproduce\r\n1. Download and run https://github.com/xamarin/xamarin-forms-samples/tree/master/FormsGallery on device a 64bit device. If deploying in Release mode, ensure `arm64-v8a` is enabled as a supported ABI.\r\n2. Click on the \"OpenGLView\" page.\r\n\r\nThis results in the following crash:\r\nhttp://xqa.blob.core.windows.net/gist/report-01671efd2d8044afbb975c331373b6a5.txt\r\n<!--\r\nIf you have a repro project, you may drag & drop the .zip/etc. onto the issue editor to attach it.\r\n-->\r\n\r\n\r\n### Version Information\r\nMono version: 5.20.0.228 (5849bb2f221)  (2019-02-26 21:33:32 -05:00)\r\nXA version: 9.2.99.36 (HEAD/82e2d017) \r\n<!--\r\n1. On macOS and within Visual Studio, select Visual Studio > About Visual Studio, then click the Show Details button, then click the Copy Information button.\r\n\r\n2. Paste below this comment block.\r\n-->\r\n\r\n\r\n<!--\r\n1. On macOS and within Visual Studio:\r\n    a. Click **Tools** > **SDK Command Prompt**.\r\n    b. Within the launched `Terminal.app` window, run:\r\n\r\n            adb logcat -d | pbcopy\r\n\r\n2. Paste below this comment block\r\n-->\r\n\r\n\r\n\r\n<!--\r\nSwitch to the \"Preview\" tab to ensure your issue renders correctly.\r\n\r\nPlease add an appropriate \"Area:\" label in the Labels section.\r\n-->"},{"Id":"9165343599","Type":"PullRequestEvent","CreatedAt":"2019-03-01T21:23:38","Actor":"jonathanpeppers","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2779","RelatedDescription":"Opened pull request \"[Xamarin.Android.Build.Tasks] AndroidUseAapt2 defaults to False\" (#2779) at xamarin/xamarin-android","RelatedBody":"In preparation for branching for d16-1, we need `$(AndroidUseAapt2)`\r\nto be disabled by default.\r\n\r\nWe currently have aapt2 disabled on d16-0: ac1b29e8\r\n\r\nI am hoping a one-line change is all we need here, since master also\r\nhas: 61716bb3"},{"Id":"9165228388","Type":"PullRequestEvent","CreatedAt":"2019-03-01T21:01:01","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2778","RelatedDescription":"Opened pull request \"Bump to mono/mono/2018-08@56906e23\" (#2778) at xamarin/xamarin-android","RelatedBody":"Context: https://github.com/xamarin/xamarin-android/issues/2679\r\n\r\nBumps to mono/api-snapshot@a388436d\r\n\r\nCrash reporting improvements.\r\n\r\nMake `System.dll` internals visible to `Mono.Android`."},{"Id":"9165197909","Type":"PullRequestEvent","CreatedAt":"2019-03-01T20:55:08","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2777","RelatedDescription":"Merged pull request \"[build] Use specific ninja binary for libzip builds\" (#2777) at xamarin/xamarin-android","RelatedBody":"Commit f44de8e987a6fc5e80c24308dd51b7a674940773 made a change to build Windows\r\nlibraries with a specific `ninja` binary. However, it seems that there are more\r\nplaces where this ninja treatment is necessary.\r\n\r\nThis commit applies the treatment to both host and Windows `libzip` builds."}],"ResultType":"GitHubEvent"},"Forms":{"Events":[{"Id":"9168648181","Type":"PullRequestEvent","CreatedAt":"2019-03-03T00:30:59","Actor":"hartez","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/5432","RelatedDescription":"Opened pull request \"[iOS] Check new element before creating placeholder label\" (#5432) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\n\r\nCreatePlaceholderLabel is being called even if the new Element is null, which causes a crash on on dispose.\r\n\r\n### Issues Resolved ### \r\n\r\n- fixes crash when disposing Editor\r\n\r\n### API Changes ###\r\n\r\n None\r\n\r\n### Platforms Affected ### \r\n\r\n- iOS\r\n\r\n### Behavioral/Visual Changes ###\r\n\r\nNone\r\n\r\n### Before/After Screenshots ### \r\n\r\nNot applicable\r\n\r\n### PR Checklist ###\r\n\r\n- [x] Has automated tests <!-- (if tests are omitted or manual, state reason in description) -->\r\n- [x] Rebased on top of the target branch at time of PR\r\n- [x] Changes adhere to coding standard\r\n"},{"Id":"9168566518","Type":"IssuesEvent","CreatedAt":"2019-03-02T23:36:37","Actor":"hvaughan3","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/5431","RelatedDescription":"Opened issue \"[iOS] ViewCell ForceUpdateSize causing flickering on first click\" (#5431) at xamarin/Xamarin.Forms","RelatedBody":"### Description\r\nTriggering `ViewCell.ForceUpdateSize()` causes the cell to grow and then immediately shrink back down to its original size on the first click. The second click expands the cell to the correct size as expected.\r\n\r\nIn the production application that I first noticed this issue, the cell has more content and the \"grow then shrink\" process takes at least 4 calls to `ViewCell.ForceUpdateSize()` before it stays expanded so this issue is worse in certain cases. While messing with the layout of the production app, at one point the cell never stayed expanded no matter how many times `ViewCell.ForceUpdateSize()` was called.\r\n\r\nWhen setting `ListViewCachingStrategy` to `RetainElement`, the problem goes away.\r\n\r\n### Steps to Reproduce\r\n\r\n1. Run the attached project\r\n2. Click the **Display & Force Update Size** button one time\r\n3. See the cell expand and then immediately shrink back down\r\n4. Click again and see the cell stay expanded\r\n\r\n### Expected Behavior\r\nCell stays expanded after the first click.\r\n\r\n### Actual Behavior\r\nCell expands and then contracts immediately.\r\n\r\n### Basic Information\r\n\r\n- Version with issue (only ones I tested):\r\n  - Xamarin.Forms 3.4.0.1008975\r\n  - Xamarin.Forms 3.4.0.1029999\r\n  - Xamarin.Forms 3.5.0.169047\r\n  - Xamarin.Forms 3.6.0.169048-pre2\r\n  - Xamarin.Forms 4.0.0.169.046-pre5\r\n- Last known good version:\r\n  - Unknown\r\n- IDE:\r\n  - Visual Studio 2017 (in Windows)\r\n- Platform Target Frameworks: <!-- All that apply -->\r\n  - iOS:  <!-- The version of the iOS SDK you are compiling against, e.g. 11.1 -->\r\n- Affected Devices:\r\n  - Tested on iPhone 4, iOS 9 simulator and iPhone 5s, iOS 12.1 simulator\r\n\r\n### Reproduction Link\r\n\r\n[App1.zip](https://github.com/xamarin/Xamarin.Forms/files/2922593/App1.zip)\r\n\r\n### Workaround\r\n\r\nSet `ListViewCachingStrategy` to `RetainElement` or try this [SO Answer](https://stackoverflow.com/a/49202240/3850012)"},{"Id":"9166439676","Type":"IssuesEvent","CreatedAt":"2019-03-02T03:17:50","Actor":"samhouts","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/5170","RelatedDescription":"Closed issue \"Crash on launch after upgrading to 3.5\" (#5170) at xamarin/Xamarin.Forms","RelatedBody":"<!-- Bug report best practices: https://github.com/xamarin/Xamarin.Forms/wiki/Submitting-Issues -->\r\n\r\n### Description\r\n\r\n### Steps to Reproduce\r\n\r\n1. Upgrade project from 3.4.0.1029999 to 3.5.0.129452\r\n\r\n### Expected Behavior\r\n\r\nThere are no documented API/breaking changes, so project should be compatible.\r\n\r\n### Actual Behavior\r\n\r\nCrash on launch, both Android and UWP, see screenshot below.\r\n\r\n![xamforms_missingfieldexception](https://user-images.githubusercontent.com/22454118/52478354-0c6f6e80-2b9d-11e9-8075-eafebc1d5f76.jpg)\r\n\r\n### Basic Information\r\n\r\n- Version with issue: 3.5.0.129452\r\n- Last known good version: 3.4.0.1029999\r\n- IDE: Visual Studio 2017 15.9.6\r\n- Platform Target Frameworks:\r\n  - Android: 9.0\r\n  - UWP: 17763\r\n- Android Support Library Version: 28.0.0.1\r\n\r\n### Reproduction Link\r\n\r\nManaged to reproduce a similar exception, simply by taking a new Xamarin.Forms Master-Detail project and updating all nuget packages. See below.\r\n\r\n![xamforms_entrypointnotfoundexception](https://user-images.githubusercontent.com/22454118/52481019-46dd0980-2ba5-11e9-9cda-fbad3b13927e.jpg)\r\n\r\n[App1.zip](https://github.com/xamarin/Xamarin.Forms/files/2845264/App1.zip)\r\n\r\n"},{"Id":"9166439671","Type":"IssuesEvent","CreatedAt":"2019-03-02T03:17:50","Actor":"samhouts","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/4644","RelatedDescription":"Closed issue \"[iOS] Additional parameter on ToolbarItemExtensions.ToUIBarButtonItem in XF 4 is a breaking change\" (#4644) at xamarin/Xamarin.Forms","RelatedBody":"As part of the Shell work (according to the history) an extra optional parameter was added to a method:\r\n\r\nhttps://github.com/xamarin/Xamarin.Forms/blob/0a67f8b0a105fbf56b6ac704cfc283840a189817/Xamarin.Forms.Platform.iOS/Extensions/ToolbarItemExtensions.cs#L12\r\n\r\nThis was an added as an optional parameter, but that doesn't prevent libraries built against older versions of Xamarin Forms from breaking.\r\n\r\nThis change means any library using the method `ToolbarItemExtensions.ToUIBarButtonItem` will have to synchronize a source change with a Forms dependency change (which will be a problem if there are any libraries using this method that are no longer maintained).\r\n\r\nAlthough I suspect the number of libraries this could affect is quite low, this just came up here: https://github.com/jsmarcus/Iconize/issues/115\r\n\r\nIt should be possible to add the new behavior as an overload (without optional parameters).\r\n"},{"Id":"9166439665","Type":"IssuesEvent","CreatedAt":"2019-03-02T03:17:49","Actor":"samhouts","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/5360","RelatedDescription":"Closed issue \"EntryCell.IsEnabled is not working on WPF\" (#5360) at xamarin/Xamarin.Forms","RelatedBody":"\r\n### Description\r\nI have a EntryCell, with IsEnabled set to false. The textbox shown on the WPF item is enabled.\r\n\r\n### Steps to Reproduce\r\n\r\n1. Put a TableView on a page, containing an EntryCell. Set its IsEnabled property to false\r\n2. You will notice that the control at runtime, in WPF is enabled. \r\n\r\n### Expected Behavior\r\n\r\nThe entry should be disabled.\r\n\r\n### Actual Behavior\r\n\r\nThe entry is not disabled.\r\n\r\n### Basic Information\r\n\r\n- Version with issue: \r\n- Last known good version: None I'm aware of\r\n- IDE: JetBrains Rider\r\n- Platform Target Frameworks: <!-- All that apply -->\r\n  - WPF:  .NET 4.7.1\r\n\r\nFixing it is a matter of fixing the data template. PR coming.\r\n"},{"Id":"9166439660","Type":"IssuesEvent","CreatedAt":"2019-03-02T03:17:49","Actor":"samhouts","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/3478","RelatedDescription":"Closed issue \"Allow TintColor and UnselectedItemTintColor as platform-specifics\" (#3478) at xamarin/Xamarin.Forms","RelatedBody":"### Description\r\nNow that we have...\r\n\r\n```\r\nOn<Android>().SetBarItemColor(Color.Red);           // Unselected image+text color\r\nOn<Android>().SetBarSelectedItemColor(Color.White); // Selected image+text color\r\n```\r\n\r\n...we no longer need a TabbedPage renderer for Android just to set these items. However, it is still required to have an iOS TabbedPage renderer to set the equivalents on iOS side (`TintColor` and `UnselectedItemTintColor`). For feature parity between the two (and for ease of setting these very common properties), I propose the equivalents on iOS such as...\r\n\r\n```\r\nOn<iOS>().SetTintColor(Color.Red);                 // Unselected image+text color\r\nOn<iOS>().SetUnselectedItemTintColor(Color.White); // Selected image+text color\r\n```\r\n\r\n### Basic Information\r\n\r\nXamarin.Forms 3.1.0.697729"},{"Id":"9166434945","Type":"PullRequestEvent","CreatedAt":"2019-03-02T03:15:09","Actor":"samhouts","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/5426","RelatedDescription":"Merged pull request \"fix changed apis\" (#5426) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\n- Fix API changes\r\n\r\n### Issues Resolved ### \r\n- fixes #4644\r\n- fixes #5170\r\n\r\n### API Changes ###\r\n- added back default handler for HandlerAttribute\r\n- set UpdateTextColor, UpdatePlaceHolderText, UpdateFont, UpdatePlaceholderColor, UpdateColor on the EntryRenderers to protected so they are exposed to the world\r\n- add back *public PickerEditText(Context context, IPickerRenderer pickerRenderer) : this(context)*\r\n- add back *public static void ApplyKeyboard(this IUITextInput textInput, Keyboard keyboard)*\r\n- add back *public static UIKit.UIBarButtonItem ToUIBarButtonItem(this Xamarin.Forms.ToolbarItem item, bool forceName)*\r\n\r\n\r\n### Platforms Affected ### \r\n- Core/XAML (all platforms)\r\n- iOS\r\n- Android\r\n\r\n"}],"ResultType":"GitHubEvent"},"Macios":{"Events":[{"Id":"9166882646","Type":"IssuesEvent","CreatedAt":"2019-03-02T08:02:06","Actor":"ForkBug","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/issues/5705","RelatedDescription":"Opened issue \"[Question]What's the equivalence of CFStringTransform in Xamarin?\" (#5705) at xamarin/xamarin-macios","RelatedBody":"We want to convert some strings but couldn't find  the equivalence of CFStringTransform"},{"Id":"9165110240","Type":"IssuesEvent","CreatedAt":"2019-03-01T20:38:05","Actor":"shudson302","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/issues/5704","RelatedDescription":"Opened issue \"OIDC login flow with Xamarin.Mac\" (#5704) at xamarin/xamarin-macios","RelatedBody":"<!-- 🚨 STOP 🚨 𝗦𝗧𝗢𝗣 🚨 𝑺𝑻𝑶𝑷 🚨 -->\r\n\r\n<!--\r\nPlease fill in the *entire* template below.\r\nThe template is designed to avoid unnecessary delays to confirm and fix reported issues. Issues with missing information generally end up with a `need-info` label and take significantly more time to fix. Please help us help you!\r\nFor more information see https://github.com/xamarin/xamarin-macios/wiki/Submitting-Bugs-&-Suggestions\r\nFor support requests use https://www.xamarin.com/support\r\n-->\r\n### Steps to Reproduce\r\n\r\n1. Create a Xamarin.Forms application for MacOS\r\n2.  Need to authenticate to IDentityServer with OIDC hybrid flow\r\n \r\n\r\nThere is no implementation similar to ASWebAuthenticationSession on IOS or WebAuthenticationBroker on UWP that allows authentication on Mac.  \r\n\r\n\r\n### Expected Behavior\r\nBe able to invoke a method to perform authentication\r\n\r\n\r\n### Actual Behavior\r\nThere are no libraries to allow that\r\n\r\n### Environment\r\nXamarin.Forms version 3.5.0.129452\r\n\r\nMicrosoft Visual Studio Professional 2017 \r\nVersion 15.9.5\r\nVisualStudio.15.Release/15.9.5+28307.280\r\nMicrosoft .NET Framework\r\nVersion 4.7.03056\r\n\r\nInstalled Version: Professional\r\n\r\nVisual C++ 2017   00369-60000-00001-AA441\r\nMicrosoft Visual C++ 2017\r\n\r\nADL Tools Service Provider   1.0\r\nThis package contains services used by Data Lake tools\r\n\r\nApplication Insights Tools for Visual Studio Package   8.14.11009.1\r\nApplication Insights Tools for Visual Studio\r\n\r\nASP.NET and Web Tools 2017   15.9.04012.0\r\nASP.NET and Web Tools 2017\r\n\r\nASP.NET Core Razor Language Services   15.8.31590\r\nProvides languages services for ASP.NET Core Razor.\r\n\r\nASP.NET Web Frameworks and Tools 2017   5.2.60913.0\r\nFor additional information, visit https://www.asp.net/\r\n\r\nAzure App Service Tools v3.0.0   15.9.03024.0\r\nAzure App Service Tools v3.0.0\r\n\r\nAzure Data Lake Node   1.0\r\nThis package contains the Data Lake integration nodes for Server Explorer.\r\n\r\nAzure Data Lake Tools for Visual Studio   2.3.7000.1\r\nMicrosoft Azure Data Lake Tools for Visual Studio\r\n\r\nAzure Functions and Web Jobs Tools   15.9.02046.0\r\nAzure Functions and Web Jobs Tools\r\n\r\nAzure Stream Analytics Tools for Visual Studio   2.3.7000.1\r\nMicrosoft Azure Stream Analytics Tools for Visual Studio\r\n\r\nC# Tools   2.10.0-beta2-63501-03+b9fb1610c87cccc8ceb74a770dba261a58e39c4a\r\nC# components used in the IDE. Depending on your project type and settings, a different version of the compiler may be used.\r\n\r\nCommon Azure Tools   1.10\r\nProvides common services for use by Azure Mobile Services and Microsoft Azure Tools.\r\n\r\nExtensibility Message Bus   1.1.49 (remotes/origin/d15-8@ee674f3)\r\nProvides common messaging-based MEF services for loosely coupled Visual Studio extension components communication and integration.\r\n\r\nFabric.DiagnosticEvents   1.0\r\nFabric Diagnostic Events\r\n\r\nJavaScript Language Service   2.0\r\nJavaScript Language Service\r\n\r\nJavaScript Project System   2.0\r\nJavaScript Project System\r\n\r\nJavaScript UWP Project System   2.0\r\nJavaScript UWP Project System\r\n\r\nJsonViewer   1.0\r\nJSON viewer\r\n\r\nMicrosoft Azure HDInsight Azure Node   2.3.7000.1\r\nHDInsight Node under Azure Node\r\n\r\nMicrosoft Azure Hive Query Language Service   2.3.7000.1\r\nLanguage service for Hive query\r\n\r\nMicrosoft Azure Service Fabric Tools for Visual Studio   2.4\r\nMicrosoft Azure Service Fabric Tools for Visual Studio\r\n\r\nMicrosoft Azure Stream Analytics Language Service   2.3.7000.1\r\nLanguage service for Azure Stream Analytics\r\n\r\nMicrosoft Azure Stream Analytics Node   1.0\r\nAzure Stream Analytics Node under Azure Node\r\n\r\nMicrosoft Azure Tools   2.9\r\nMicrosoft Azure Tools for Microsoft Visual Studio 2017 - v2.9.10730.2\r\n\r\nMicrosoft Continuous Delivery Tools for Visual Studio   0.4\r\nSimplifying the configuration of Azure DevOps pipelines from within the Visual Studio IDE.\r\n\r\nMicrosoft JVM Debugger   1.0\r\nProvides support for connecting the Visual Studio debugger to JDWP compatible Java Virtual Machines\r\n\r\nMicrosoft Library Manager   1.0\r\nInstall client-side libraries easily to any web project\r\n\r\nMicrosoft MI-Based Debugger   1.0\r\nProvides support for connecting Visual Studio to MI compatible debuggers\r\n\r\nMicrosoft Visual C++ Wizards   1.0\r\nMicrosoft Visual C++ Wizards\r\n\r\nMicrosoft Visual Studio Tools for Containers   1.1\r\nDevelop, run, validate your ASP.NET Core applications in the target environment. F5 your application directly into a container with debugging, or CTRL + F5 to edit & refresh your app without having to rebuild the container.\r\n\r\nMicrosoft Visual Studio VC Package   1.0\r\nMicrosoft Visual Studio VC Package\r\n\r\nMLGen Package Extension   1.0\r\nMLGen Package Visual Studio Extension Detailed Info\r\n\r\nMono Debugging for Visual Studio   4.13.12-pre (9bc9548)\r\nSupport for debugging Mono processes with Visual Studio.\r\n\r\nNode.js Tools   1.4.21001.1 Commit Hash:8dd15923800d931b153ab9e4de74e42a74eba5e6\r\nAdds support for developing and debugging Node.js apps in Visual Studio\r\n\r\nNuGet Package Manager   4.6.0\r\nNuGet Package Manager in Visual Studio. For more information about NuGet, visit http://docs.nuget.org/.\r\n\r\nProjectServicesPackage Extension   1.0\r\nProjectServicesPackage Visual Studio Extension Detailed Info\r\n\r\nPuma Scan Professional   0.9.1.1\r\nPuma Scan is a software security Visual Studio analyzer extension providing real time, continuous source code analysis as development teams write code. Vulnerabilities are immediately displayed in the development environment as spell check and compiler warnings, preventing security bugs from entering your applications. The professional edition is a licensed product with advanced data flow analysis, configurable rules, and customer support.\r\n\r\nResourcePackage Extension   1.0\r\nResourcePackage Visual Studio Extension Detailed Info\r\n\r\nResourcePackage Extension   1.0\r\nResourcePackage Visual Studio Extension Detailed Info\r\n\r\nSQL Server Data Tools   15.1.61901.03220\r\nMicrosoft SQL Server Data Tools\r\n\r\nTest Adapter for Boost.Test   1.0\r\nEnables Visual Studio's testing tools with unit tests written for Boost.Test.  The use terms and Third Party Notices are available in the extension installation directory.\r\n\r\nTest Adapter for Google Test   1.0\r\nEnables Visual Studio's testing tools with unit tests written for Google Test.  The use terms and Third Party Notices are available in the extension installation directory.\r\n\r\nText Macros for Visual Studio 2012-2017   1.12\r\nBrings back text-editing macro support in Visual Studio 2012-2017\r\n\r\nToolWindowHostedEditor   1.0\r\nHosting json editor into a tool window\r\n\r\nTypeScript Tools   15.9.20918.2001\r\nTypeScript Tools for Microsoft Visual Studio\r\n\r\nVisual Basic Tools   2.10.0-beta2-63501-03+b9fb1610c87cccc8ceb74a770dba261a58e39c4a\r\nVisual Basic components used in the IDE. Depending on your project type and settings, a different version of the compiler may be used.\r\n\r\nVisual F# Tools 10.2 for F# 4.5   15.8.0.0.  Commit Hash: 6e26c5bacc8c4201e962f5bdde0a177f82f88691.\r\nMicrosoft Visual F# Tools 10.2 for F# 4.5\r\n\r\nVisual Studio Code Debug Adapter Host Package   1.0\r\nInterop layer for hosting Visual Studio Code debug adapters in Visual Studio\r\n\r\nVisual Studio Tools for CMake   1.0\r\nVisual Studio Tools for CMake\r\n\r\nVisual Studio Tools for Containers   1.0\r\nVisual Studio Tools for Containers\r\n\r\nVisual Studio Tools for Universal Windows Apps   15.0.28307.208\r\nThe Visual Studio Tools for Universal Windows apps allow you to build a single universal app experience that can reach every device running Windows 10: phone, tablet, PC, and more. It includes the Microsoft Windows 10 Software Development Kit.\r\n\r\nVisualStudio.Mac   1.0\r\nMac Extension for Visual Studio\r\n\r\nXamarin   4.12.3.78 (d15-9@a9bbf702f)\r\nVisual Studio extension to enable development for Xamarin.iOS and Xamarin.Android.\r\n\r\nXamarin Designer   4.16.13 (45a16efd4)\r\nVisual Studio extension to enable Xamarin Designer tools in Visual Studio.\r\n\r\nXamarin Templates   1.1.128 (6f5ebb2)\r\nTemplates for building iOS, Android, and Windows apps with Xamarin and Xamarin.Forms.\r\n\r\nXamarin.Android SDK   9.1.5.0 (HEAD/4b951a3e7)\r\nXamarin.Android Reference Assemblies and MSBuild support.\r\n\r\nXamarin.iOS and Xamarin.Mac SDK   12.2.1.12 (65ec520)\r\nXamarin.iOS and Xamarin.Mac Reference Assemblies and MSBuild support."},{"Id":"9165047502","Type":"PullRequestEvent","CreatedAt":"2019-03-01T20:25:52","Actor":"chamons","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/5688","RelatedDescription":"Merged pull request \"[d16-0] [xm] Support UseHardenendRuntime in code signing\" (#5688) at xamarin/xamarin-macios","RelatedBody":"- https://github.com/xamarin/xamarin-macios/issues/4288\r\n\r\nThere is some IDE work needed to full support hardened runtime, but this is enough to allow people to support it if they are willing to use a text editor on their csproj.\n\nBackport of #5536.\n\n/cc @chamons "},{"Id":"9164560323","Type":"PullRequestEvent","CreatedAt":"2019-03-01T18:57:25","Actor":"lewurm","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/5703","RelatedDescription":"Opened pull request \"[xi interpreter] bump mono\" (#5703) at xamarin/xamarin-macios","RelatedBody":"Mostly FYI for @spouliot. I backported the changes to https://github.com/mono/mono/tree/spouliot-2018-08-intr\r\n\r\nCommit list for mono/mono:\r\n\r\n* mono/mono@940791157f4 [interp] mixed mode fixes for delegates\r\n* mono/mono@a5838f331bd [2018-10] [aot] abort lookup early when a method isn\\u0027t available in AOT image (#13179)\r\n* mono/mono@a0908c2327b [2018-10] AOT fixes for interp mixed mode (#13172)\r\n\r\nDiff: https://github.com/mono/mono/compare/5df8d062938ecfa377dff031e31d7e557eef141c...940791157f41a74c40f8cfa35dadef8d2c0bf82f\r\n\r\nFixes https://github.com/xamarin/xamarin-macios/issues/5622 and https://github.com/xamarin/xamarin-macios/issues/5618"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1101572485114462220","CreatedAt":"2019-03-01T19:58:41+00:00","UserScreenname":"xamarinhq","Text":"Developer Community User Groups are gathering to learn about new, exciting releases and tooling to help jumpstart t… https://t.co/GgCWj5LttS","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":35,"FavoriteCount":16,"RawContent":null},{"Id":"1101202237752258564","CreatedAt":"2019-02-28T19:27:27+00:00","UserScreenname":"xamarinhq","Text":"Want to display PDF docs w/i your #Xamarin apps? Now you can. Learn to view PDF files within your Xamarin.Forms app… https://t.co/GjuKzrvNYM","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":91,"FavoriteCount":28,"RawContent":null},{"Id":"1100455963361005570","CreatedAt":"2019-02-26T18:02:01+00:00","UserScreenname":"xamarinhq","Text":"In this episode of the #dotNETCore podcast, @jimbobbennett talks #Xamarin &amp; .NET Standard. Listen in or read the tr… https://t.co/VDFrb1excV","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":39,"FavoriteCount":14,"RawContent":null},{"Id":"1100149148282769409","CreatedAt":"2019-02-25T21:42:51+00:00","UserScreenname":"xamarinhq","Text":"Android emulators have their own networking config but now you can debug #Android apps locally regardless of whethe… https://t.co/Hbsm6gbXft","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":72,"FavoriteCount":30,"RawContent":null},{"Id":"1098996242238111745","CreatedAt":"2019-02-22T17:21:37+00:00","UserScreenname":"xamarinhq","Text":"This week on the #XamarinShow, @DavidOrtinau gives us all the reasons and features to &lt;3 in Xamarin.Forms 3.5. This… https://t.co/pVcHVX6LYJ","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":55,"FavoriteCount":26,"RawContent":null},{"Id":"1097993381496700935","CreatedAt":"2019-02-19T22:56:36+00:00","UserScreenname":"xamarinhq","Text":"With only a few lines of code, today's #Xamarin.Essentials API of the week helps you persist settings and preferenc… https://t.co/izkl5pGL6m","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":48,"FavoriteCount":20,"RawContent":null},{"Id":"1097939132532310018","CreatedAt":"2019-02-19T19:21:02+00:00","UserScreenname":"xamarinhq","Text":"On this week's #XamarinShow Essential API of the week, we take a look at Secure Storage, which enables you to easil… https://t.co/OwQSZ1QRlI","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":45,"FavoriteCount":25,"RawContent":null},{"Id":"1097603017375993857","CreatedAt":"2019-02-18T21:05:26+00:00","UserScreenname":"xamarinhq","Text":"Xamarin.Forms 101: Command Parameters: https://t.co/rwzzq9yQib\n\n.@JamesMontemagno takes us through a new mini-serie… https://t.co/ZFInvKFhSL","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":111,"FavoriteCount":48,"RawContent":null},{"Id":"1096561048562384898","CreatedAt":"2019-02-16T00:05:01+00:00","UserScreenname":"xamarinhq","Text":"The #Xamarin Developer Blog is migrating to a new platform with a modern, clean design and powerful features that m… https://t.co/nJUxXItfe8","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":98,"FavoriteCount":35,"RawContent":null},{"Id":"1095804816121581570","CreatedAt":"2019-02-13T22:00:01+00:00","UserScreenname":"xamarinhq","Text":"The #VisualStudio Mobile Dev Podcast is out. In this episode, @CodeMillMatt &amp; @JamesMontemagno discuss the latest &amp;… https://t.co/SPEvfxFuLn","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":57,"FavoriteCount":14,"RawContent":null},{"Id":"1095445655076700162","CreatedAt":"2019-02-12T22:12:51+00:00","UserScreenname":"xamarinhq","Text":"To provide the best user experience we need access to the current network state of our users’ devices.\n\n...new from… https://t.co/w2ZGMgKqli","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":42,"FavoriteCount":24,"RawContent":null},{"Id":"1093221405917937670","CreatedAt":"2019-02-06T18:54:28+00:00","UserScreenname":"xamarinhq","Text":"Every month we survey &amp; interview our Xamarin devs, listening to your firsthand stories. Why? To make #Xamarin bett… https://t.co/Gwc32YD8qG","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":94,"FavoriteCount":41,"RawContent":null},{"Id":"1093196382901547008","CreatedAt":"2019-02-06T17:15:02+00:00","UserScreenname":"xamarinhq","Text":"On a recent #XamarinShow, Mike Parker from the Microsoft Mobile Customer Advisory Team that shows us how to easily… https://t.co/jdjf2oZXwI","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":49,"FavoriteCount":17,"RawContent":null},{"Id":"1092542167078326279","CreatedAt":"2019-02-04T21:55:25+00:00","UserScreenname":"xamarinhq","Text":"Walk through some techniques for separating the concerns of dev'ing a C/C++ library, a C# wrapper, &amp; a mobile app s… https://t.co/W1RmRSHzXZ","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":72,"FavoriteCount":36,"RawContent":null},{"Id":"1091455153868296201","CreatedAt":"2019-02-01T21:56:01+00:00","UserScreenname":"xamarinhq","Text":"Announcing .NET Foundation Open Membership. We're making some big changes to expand the #dotNET Foundation. We’re i… https://t.co/iePYJUdean","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":69,"FavoriteCount":39,"RawContent":null},{"Id":"1091387761297362944","CreatedAt":"2019-02-01T17:28:13+00:00","UserScreenname":"xamarinhq","Text":"There's a new Xamarin.Essentials out. Today, @JamesMontemagno highlights API of the Week, App Information; which gi… https://t.co/WlU6hQHbNl","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":66,"FavoriteCount":22,"RawContent":null},{"Id":"1090678537491808256","CreatedAt":"2019-01-30T18:30:01+00:00","UserScreenname":"xamarinhq","Text":"Check out this super-interesting use-case for creating complex UI using FastGrid for Xamarin.Forms with many cell v… https://t.co/SNff8XhdJ3","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":99,"FavoriteCount":42,"RawContent":null},{"Id":"1089964090339049472","CreatedAt":"2019-01-28T19:11:04+00:00","UserScreenname":"xamarinhq","Text":"Finding it a bit complex packaging your Xamarin. Android application? Here's some excellent info about Android’s D8… https://t.co/1qhLDuX3m6","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":71,"FavoriteCount":28,"RawContent":null}]}},"RunOn":"2019-03-03T05:30:50.1506807Z","RunDurationInMilliseconds":2615}