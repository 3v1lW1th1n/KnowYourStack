{"Data":{"GitHubIssues":{"Issues":[{"Id":"337131938","IsPullRequest":true,"CreatedAt":"2018-06-29T20:44:00","Actor":"rynowak","Number":"1061","RawContent":null,"Title":"Update versions to 2.1","State":"open","Body":"Updates ASP.NET package versions to 2.1\r\n\r\nTweaks TFMs\r\n- libraries = netstandard2.0\r\n- exes/apps/tools = netcoreapp2.1\r\n- unit tests = netcoreapp2.0\r\n- e2e tests = netcoreapp2.1 (dependency on apps)\r\n\r\nThe exception to this is the Browser.JS project which depends on our\r\ntool for its build. however this project just builds the js code so its\r\nTFM doesn't really matter.","Url":"https://github.com/aspnet/Blazor/pull/1061","RelatedDescription":"Open PR \"Update versions to 2.1\" (#1061)"},{"Id":"336991850","IsPullRequest":true,"CreatedAt":"2018-06-29T19:41:16","Actor":"zefubachs","Number":"1059","RawContent":null,"Title":"Changed TFM of Blazor.Server to netstandard2.0","State":"closed","Body":"As asked in #986","Url":"https://github.com/aspnet/Blazor/pull/1059","RelatedDescription":"Closed or merged PR \"Changed TFM of Blazor.Server to netstandard2.0\" (#1059)"},{"Id":"337104361","IsPullRequest":true,"CreatedAt":"2018-06-29T19:40:58","Actor":"rynowak","Number":"1060","RawContent":null,"Title":"Update build tools","State":"closed","Body":"","Url":"https://github.com/aspnet/Blazor/pull/1060","RelatedDescription":"Closed or merged PR \"Update build tools\" (#1060)"},{"Id":"336944064","IsPullRequest":false,"CreatedAt":"2018-06-29T14:33:04","Actor":"joshpearce","Number":"1057","RawContent":null,"Title":"CodeDOM or RazorEngine","State":"closed","Body":"Hi, I'd like to use Blazor to write an application for developer screening website, where problems must be solved by writing C# code. So the whole reason I'm attracted to Blazor is for the potential to compile and run the C# in the browser rather than server, for security.\r\n\r\nSeems I would need Blazor to be running on the Mono for WebAssembly describes as,\r\n\r\n> The second prototype compiles the Mono C runtime into web assembly, and then uses Mono’s IL interpreter to run managed code.\r\n\r\nIs that possible?\r\n\r\nAlternatively, is there a way to compile assemblies independently (on the server), and load them into a running Blazor application.\r\n\r\nFinally, if neither of the above options are available, is there any guidance on something like on-demand server-side Blazor app compilation for reloading in an iframe?\r\n\r\nThanks in advance!! Exciting project!!\r\n","Url":"https://github.com/aspnet/Blazor/issues/1057","RelatedDescription":"Closed issue \"CodeDOM or RazorEngine\" (#1057)"},{"Id":"336958945","IsPullRequest":false,"CreatedAt":"2018-06-29T13:36:54","Actor":"liuxh0","Number":"1058","RawContent":null,"Title":"Http header field always lowercased","State":"closed","Body":"I'm trying to add custom header using:\r\n```\r\nStringContent body = new StringContent(\"\");\r\nbody.Headers.Add(\"MyHeader\", \"value\");\r\n```\r\n\r\nBut the request headers are always lowercased, in this case I got `myheader: value`. Calling `TryAddWithoutValidation` does *not* help.\r\n\r\nI'm aware that RFC 2616 says header fields should be case-insensitive. But if I use .NET Core/Framework, like if I create an Windows 10 App using Visual Studio, I can send http request *without* lowercased headers.","Url":"https://github.com/aspnet/Blazor/issues/1058","RelatedDescription":"Closed issue \"Http header field always lowercased\" (#1058)"},{"Id":"336784319","IsPullRequest":false,"CreatedAt":"2018-06-29T06:17:31","Actor":"simonziegler","Number":"1053","RawContent":null,"Title":"bind-value change action not firing in a component","State":"closed","Body":"Hi,\r\n\r\nI have made my first attempt to bind to a component, and found that when the component's `Value` changed, the `ValueChanged` property was not firing and propagating that change to the parent. I used the work around shown below (see code heavily highlighted in yellow to the bottom right). Is this an issue that the Blazor development team need to know about? I do not need a resolution and am comfortable with the pattern of coding I show below.\r\n\r\nThanks, Simon\r\n\r\n![image](https://user-images.githubusercontent.com/11708435/42061245-67a56674-7b21-11e8-9d15-ac489b6294d4.png)\r\n\r\n","Url":"https://github.com/aspnet/Blazor/issues/1053","RelatedDescription":"Closed issue \"bind-value change action not firing in a component\" (#1053)"},{"Id":"336870633","IsPullRequest":false,"CreatedAt":"2018-06-29T05:46:41","Actor":"chenyj796","Number":"1056","RawContent":null,"Title":"CultureInfo didn't set appropriately","State":"open","Body":"In a Blazor cshtml, add \"@CultureInfo.CurrentCulture.DisplayName\", and then get \"Invariant Language (Invariant Country)\" while I expect \"中文(简体，中国)\". \r\nDateTime.Now is not correct also.","Url":"https://github.com/aspnet/Blazor/issues/1056","RelatedDescription":"Open issue \"CultureInfo didn't set appropriately\" (#1056)"},{"Id":"336868290","IsPullRequest":true,"CreatedAt":"2018-06-29T05:32:21","Actor":"rynowak","Number":"1055","RawContent":null,"Title":"Add sync context","State":"open","Body":"This seems like 90% done to me, but I wanted to get eyeballs on it in case you had any feedback.\r\n\r\nI know I at least want to add another test that verifies you can `await` and resume in the sync context. I also might need to add some more code to the synchronous code path to apply the sync context. ","Url":"https://github.com/aspnet/Blazor/pull/1055","RelatedDescription":"Open PR \"Add sync context\" (#1055)"},{"Id":"336851319","IsPullRequest":false,"CreatedAt":"2018-06-29T03:32:44","Actor":"samuelGrahame","Number":"1054","RawContent":null,"Title":"Easier way to have interaction with javascript","State":"open","Body":"I tried to convert, my library I am working on, I know there are higher priorities, (I might be doing it wrong) https://github.com/samuelGrahame/ClassicFormsBlazor - for instance, I wanted to create HTMLElements, (without using razor pages) - I registered javascript function's to create a htmlelement, then stored that htmlelement in a dictionary in javascript, returning the key (GUID) to csharp.\r\n\r\nthen with events, create the event, in csharp against a GUID - then send the inline event to call c# method.\r\n\r\nthis all work's, but if there was a easier way to create html / use javascript variable pointers.  i think would be a good feature, as thing's like xamarin.forms can be converted - just creating the html elements in the c# library.\r\n\r\n","Url":"https://github.com/aspnet/Blazor/issues/1054","RelatedDescription":"Open issue \"Easier way to have interaction with javascript\" (#1054)"},{"Id":"336051483","IsPullRequest":false,"CreatedAt":"2018-06-28T08:39:51","Actor":"w8w8w8","Number":"1044","RawContent":null,"Title":"Method not found: double System.Math.Log(double)","State":"closed","Body":"when i use  assembly.load()\r\nmy code is this:\r\n`var assembly = Assembly.Load(bytes);\r\n            obj = assembly.CreateInstance(ClassFullName);\r\n            var t = assembly.GetType(ClassFullName);\r\n            method = t.GetMethod(\"Run\");`\r\n\r\nbut there is  some error:\r\nSystem.Reflection.TargetInvocationException: Exception has been thrown by the target of \r\nan invocation. ---> System.MissingMethodException: Method not found: double System.Math.Log(double)\r\n![qq 20180627100426](https://user-images.githubusercontent.com/4744039/41948881-84012a28-79f1-11e8-99e1-dc2a3fbe97ab.png)\r\n","Url":"https://github.com/aspnet/Blazor/issues/1044","RelatedDescription":"Closed issue \"Method not found: double System.Math.Log(double)\" (#1044)"},{"Id":"336152228","IsPullRequest":false,"CreatedAt":"2018-06-28T08:37:40","Actor":"simonziegler","Number":"1046","RawContent":null,"Title":"Http Posts and Puts failing in Blazor 0.4.0","State":"closed","Body":"Hi,\r\n\r\nI have found that Posts and Puts have been failing in a test web app that I created with Blazor 0.3.0 once I update to 0.4.0. I do not know if this is due to an error I am making or a bug. I have isolated the problem to a few lines of code that I have added to an out-of-the-box Blazor 0.4.0 hosted project, which can be found at https://github.com/simonziegler/TestBlazorSendJson. I modified only FetchData.cshtml and SampleDataController.cs. I would really like to find out what is happening here and apply a fix or work around.\r\n\r\nThanks,     Simon","Url":"https://github.com/aspnet/Blazor/issues/1046","RelatedDescription":"Closed issue \"Http Posts and Puts failing in Blazor 0.4.0\" (#1046)"},{"Id":"336457806","IsPullRequest":false,"CreatedAt":"2018-06-28T08:36:26","Actor":"FIVIL","Number":"1049","RawContent":null,"Title":"RTM","State":"closed","Body":"Hi, ive just seen this repo and ive got very excited about it, as im a huge fan of C# instead of JS so i was wondering when you guys are gonna release an RTM stable version of Blazor?, and also is there any documentation like the one for the ASP.net core in docs.microsoft.com or any where else??\r\n\r\ntnx","Url":"https://github.com/aspnet/Blazor/issues/1049","RelatedDescription":"Closed issue \"RTM\" (#1049)"},{"Id":"336495562","IsPullRequest":false,"CreatedAt":"2018-06-28T08:35:28","Actor":"TheCamel","Number":"1050","RawContent":null,"Title":"DataTable not removed between pages","State":"closed","Body":"Hi,\r\nFrom the sample,, I try to replace static table with dynamic one from https://datatables.net/examples/data_sources/server_side.html\r\n\r\nI call an init in javascript from button clic and it works well.....but when i change to other pages the header stay there.\r\n\r\n@page \"/logview\"\r\n@using Microsoft.AspNetCore.Blazor.Browser.Interop\r\n@inject HttpClient Http\r\n<button class=\"btn btn-primary\" onclick=\"@UpdateHeading\">\r\n    Update heading\r\n</button>\r\n@if (logData == null)\r\n{\r\n    <p><em>Loading...</em></p>\r\n}\r\nelse\r\n{\r\n    <table id=\"example\" class=\"hover\" style=\"max-width:1500px\"> \r\n        <thead>\r\n            <tr>\r\n                <th>Date</th>\r\n                <th>Type</th>\r\n                <th>Application</th>\r\n                <th>LogID</th>\r\n                <th>Host</th>\r\n                <th>Ceb</th>\r\n                <th>Method</th>\r\n                <th>Content</th>\r\n                <th>Exception</th>\r\n            </tr>\r\n        </thead>\r\n        <tbody>\r\n            @foreach (var forecast in logData)\r\n            {\r\n                <tr>\r\n                    <td>@forecast.DateTime.ToShortDateString()</td>\r\n                    <td>@forecast.Type</td>\r\n                    <td>@forecast.ApplicationID</td>\r\n                    <td>@forecast.LogID</td>\r\n                    <td>@forecast.Host</td>\r\n                    <td>@forecast.CebID</td>\r\n                    <td>@forecast.Method</td>\r\n                    <td>@forecast.Content</td>\r\n                    <td>@forecast.Exception</td>\r\n                </tr>\r\n            }\r\n        </tbody>\r\n    </table>\r\n}\r\n\r\n@functions {\r\nIEnumerable<LogEntry> logData;\r\n\r\nprotected override async Task OnInitAsync()\r\n{\r\n    logData = await Http.GetJsonAsync<IEnumerable<LogEntry>>(\"http://localhost/Trace.Lib.Web.Api/All\");\r\n}\r\nvoid UpdateHeading(UIMouseEventArgs e)\r\n{\r\n    RegisteredFunction.Invoke<string>(\"LoadTable\");\r\n}\r\n}\r\n\r\nin index?html\r\n\r\nBlazor.registerFunction(\r\n            'LoadTable',\r\n            () => {\r\n                console.dir(\"test ok\");\r\n                $('#example').DataTable({\r\n                    \"scrollX\": true,\r\n                    \"scrollY\": 600,\r\n                    \"scrollCollapse\": true,\r\n                    \"paging\": false\r\n                });\r\n            });\r\n\r\n\r\n![blazor_table](https://user-images.githubusercontent.com/7381872/42017908-d3a4540a-7ab0-11e8-818d-7801d2d2fe5f.png)","Url":"https://github.com/aspnet/Blazor/issues/1050","RelatedDescription":"Closed issue \"DataTable not removed between pages\" (#1050)"},{"Id":"336511273","IsPullRequest":false,"CreatedAt":"2018-06-28T08:33:13","Actor":"moataz1991","Number":"1051","RawContent":null,"Title":"Error: no suitable method found to override","State":"closed","Body":"Hi :)\r\n\r\nafter setting up everything i started a new project and selected Blazor _only_ template \r\ni noticed something weird\r\n\r\n>     protected override async Task OnInitAsync()\r\n>     {\r\n>         forecasts = await Http.GetJsonAsync<WeatherForecast[]>(\"sample-data/weather.json\");\r\n>     }\r\n\r\nthis method is not found to be overridden !\r\nand the HttpCient does not contain definition for GetJsonAsync , am i missing an assembly reference ?\r\n\r\ni ran the project to see whats what , after the \"_Loading..._\" nothing appeared , total white page ","Url":"https://github.com/aspnet/Blazor/issues/1051","RelatedDescription":"Closed issue \"Error: no suitable method found to override\" (#1051)"},{"Id":"336520932","IsPullRequest":true,"CreatedAt":"2018-06-28T08:23:00","Actor":"SteveSandersonMS","Number":"1052","RawContent":null,"Title":"Add RenderBatch reader abstraction","State":"open","Body":"This is also part of the out-of-process execution work. It separates the knowledge of `RenderBatch` (etc) memory layout from the logic that actually uses the information in the `RenderBatch` (etc).\r\n\r\nWith this change, we'll be able to continue with shared-memory interop for the in-proc scenario, and plug in a different `RenderBatch` reader for out-of-process hosting. It means we can use any serialization format we want for the `RenderBatch` without having to simulate the same memory layout, which in turn will allow for a more compact and easily-implemented representation.\r\n\r\n**Implementation note**\r\n\r\nThe reason we have all these `xyzReader` APIs that act upon references to read properties (e.g., `frameReader.attributeName(frame)` instead of `frame.attributeName`) is so that we don't have to parse all the incoming data into a large graph of objects. We keep the incoming data in its original form (e.g., a single byte array) and walk through it without instantiating any child objects to represent different parts of it. This avoids the need for any up-front parsing (especially good for parts of the data structure we might turn out not to even look at) and dramatically lessens GC pressure.","Url":"https://github.com/aspnet/Blazor/pull/1052","RelatedDescription":"Open PR \"Add RenderBatch reader abstraction\" (#1052)"},{"Id":"336328573","IsPullRequest":false,"CreatedAt":"2018-06-27T21:44:13","Actor":"IyyappanAmirthalingam","Number":"1048","RawContent":null,"Title":"Error <LangVersion>7.3</LangVersion>","State":"closed","Body":"Hi,\r\n\r\nWhen I try to create and run the Blazor app with the following steps it throws the follwing error \r\n\r\n**Steps 👍 \r\ndotnet new -i Microsoft.AspNetCore.Blazor.Templates\r\ndotnet new blazor -o BlazorApp1\r\ncd BlazorApp1\r\ndotnet run**\r\n\r\nError 👎 \r\n**CSC : error CS1617: Invalid option '7.3' for /langversion. Use '/langversion:?' to list supported values. [C:\\sample\\BlazorApp1\\BlazorApp1.csproj]**\r\n\r\n**The build failed. Please fix the build errors and run again.**\r\n\r\nThanks.","Url":"https://github.com/aspnet/Blazor/issues/1048","RelatedDescription":"Closed issue \"Error <LangVersion>7.3</LangVersion>\" (#1048)"},{"Id":"336163562","IsPullRequest":false,"CreatedAt":"2018-06-27T10:09:55","Actor":"TheFanatr","Number":"1047","RawContent":null,"Title":"Blazor as an Alternative to Razor Pages","State":"open","Body":"# A Request to Provide the Blazor Language as an Alternative to Razor Pages' CSHTML Language and PageModel Combination\r\n\r\nFor the past while, I have been using Razor Pages with ASP.NET Core 2 in order to serve web pages for websites that I am working on. It is a very nice framework and is far easier to use than MVC, but after using the Blazor language only very briefly, I am finding it hard to go back. Considering that the Blazor language is simply an extension of Razor Pages' CSHTML language, is there any way that it could be used in-place? I am not asking for a full server-side solution, as requested in #1004, but rather just a way to interact with server-side code from within the UI code more easily by exposing the Blazor language to server-side ASP.NET Core projects. This post explores how this could theoretically be achieved, and aims to start a conversation on how it would be possible to actually implement such feature.\r\n\r\n## Theoretical Implementation\r\n\r\nThis section explores the way in how it could be theoretically possible to implement the Blazor language as an in-place alternative to the CSHTML language provided for Razor Pages.\r\n\r\n### Blazor Language to Razor Pages CSHTML-and-PageModel-Class Transpiler Method\r\n\r\nThis section explores how the implementation of a server-side version of the Blazor language could work if the code is interpreted into a Razor Pages CSHTML file and backing PageModel class.\r\n\r\n#### Explanation\r\n\r\nUpon receiving valid Blazor language code on compilation, the server-side-context Blazor language parser/transpiler would generate valid Razor Pages CSHTML code, as well as a `PageModel` file containing the contents of the `@functions` block as well as generated Razor Pages HTTP protocol interaction methods for everything that is being used from the `@functions` block. After that the Razor Pages compilation/interpretation system would take over.\r\n\r\n#### Possible Caveats\r\n\r\nRecognizing that the Blazor language was designed for code generation in terms of client-side UI interactions and data operations as opposed to server-side, it may not be possible to achieve identical behaviour with certain Blazor language code when used in a server-side context instead of a client side one, especially in reference to data binding; however, it is unknown as to whether or not this would be an issue, as long as the observed effects on both the UI and the data are the same.\r\n\r\n### Razor Pages Processer Modification Method\r\n\r\nThis section explores how the implementation of a server-side version of the Blazor language could work if the compile-time Razor Pages processing system is forked and modified to interpret the Blazor language, so that the generated code is synonymous to code that would be generated in a normal Razor Pages environment as long as the given Razor Pages code and Blazor language code was also synonymous.\r\n\r\n#### Explanation\r\n\r\nUpon receiving valid Blazor language code on compilation, the server-side-context Blazor language parsing/processing system would generate the same valid code that the Razor Pages compile time interpretation/processing system would when given Razor Pages code that is synonymous to the Blazor language code given to the hypothetical Blazor language parsing/processing system, so that Razor Pages code and Blazor language code would yield the same or similar generated code.\r\n\r\n#### Caveats\r\n\r\nThe way that a Blazor language parsing/processing system in a server-side context would have to work may differ too greatly to how the Razor Pages code interpretation/processing system currently works for the code generated by the two systems to ever be the same, even if the inputs were synonymous, due to a need to essentially write an entirely different processing system. This could lead to unintentional side-effects of yielding different behaviour from the generated code from the Blazor language parsing/processing system versus the Razor Pages code interpretation/processing system, even if the inputs are synonymous, but this may also be a non-issue as long as the perceived effects on both the UI and the data are still the same.\r\n\r\n## Conclusion\r\n\r\nImplementing such a system may not be trivial, but it may be a great alternative to or starting point for implementing full server-side support for all of Blazor such as what was detailed in #1004, as providing just the language itself to server-side-context ASP.NET Core projects is enough to say that \"Blazor supports server-side ASP.NET\", but would also provide enough scaffolding and base code to go the other direction and reach a full implementation. If you are experienced with the inner workings of this project, please comment below how you think either or both of the aforementioned options for implementing a server-side version of the Blazor language could be implemented and/or how any way could work.\r\n\r\n**footnote** *by \"full server-side solution\" I mean the ability to run full .NET Framework code in a separate runtime through Mono connected to the UI, the ability to access the local filesystem easily, the actual Blazor layout system, etc.*","Url":"https://github.com/aspnet/Blazor/issues/1047","RelatedDescription":"Open issue \"Blazor as an Alternative to Razor Pages\" (#1047)"},{"Id":"335511556","IsPullRequest":false,"CreatedAt":"2018-06-27T09:39:50","Actor":"simonziegler","Number":"1041","RawContent":null,"Title":"Failed update to Blazor 0.4.0","State":"closed","Body":"Hi, I'm testing a system with Blazor 0.3.0 and am keen to pick up some of the new stuff in 0.4.0. However when I update and try running (client/server), I get presented with the following in my browser. Any ideas what may be the issue?\r\n\r\nThanks!\r\n\r\n![image](https://user-images.githubusercontent.com/11708435/41867493-30bce592-78ab-11e8-9e0b-0ac14cb0c2ca.png)\r\n","Url":"https://github.com/aspnet/Blazor/issues/1041","RelatedDescription":"Closed issue \"Failed update to Blazor 0.4.0\" (#1041)"},{"Id":"336107948","IsPullRequest":false,"CreatedAt":"2018-06-27T07:27:42","Actor":"phanronald","Number":"1045","RawContent":null,"Title":"WASM: Cannot enlarge memory arrays.","State":"open","Body":"I get this error when I am trying to do some complex c# foreach loops and recursion. Did not see anywhere that I can add any of these settings.\r\n\r\n\r\nWASM: Cannot enlarge memory arrays. Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value 2147352576, (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which allows increasing the size at runtime, or (3) if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ","Url":"https://github.com/aspnet/Blazor/issues/1045","RelatedDescription":"Open issue \"WASM: Cannot enlarge memory arrays.\" (#1045)"},{"Id":"335673328","IsPullRequest":false,"CreatedAt":"2018-06-26T13:17:39","Actor":"DNF-SaS","Number":"1043","RawContent":null,"Title":"Missing package Mono.WebAssembly.Interop","State":"closed","Body":"When trying to update to build 10324, NuGet says: \"Unable to find package Mono.WebAssembly.Interop. No packages exist with this id in source(s): Microsoft Visual Studio Offline Packages, MyGet: Blazor-Dev, MyGet: Reactive Extensions, nuget.org\r\n","Url":"https://github.com/aspnet/Blazor/issues/1043","RelatedDescription":"Closed issue \"Missing package Mono.WebAssembly.Interop\" (#1043)"},{"Id":"335607130","IsPullRequest":false,"CreatedAt":"2018-06-25T23:47:11","Actor":"marcusbooyah","Number":"1042","RawContent":null,"Title":"Route precedence ","State":"open","Body":"I have an app with two routes:\r\n\r\n`@page \"/{multiple}/catalog/new\"`\r\n`@page \"/{multiple}/catalog/{catalogId}\"`\r\n\r\nWhen accessing the /{multiple}/catalog/new URL, the router seems to be taking me to the /{multiple}/catalog/{catalogId} route. This used to work the other way around for me. Is this a bug, or am I doing something wrong?\r\n\r\nThis is on Blazor 0.5.0-preview1","Url":"https://github.com/aspnet/Blazor/issues/1042","RelatedDescription":"Open issue \"Route precedence \" (#1042)"},{"Id":"335454117","IsPullRequest":false,"CreatedAt":"2018-06-25T15:57:25","Actor":"carlosalcantara2668","Number":"1040","RawContent":null,"Title":"How can register any function of jquery in BLAZOR ?","State":"closed","Body":"how can you register the autocomplete function of jquery in blazor through JavaScript Interop in Blazor. it could be done","Url":"https://github.com/aspnet/Blazor/issues/1040","RelatedDescription":"Closed issue \"How can register any function of jquery in BLAZOR ?\" (#1040)"},{"Id":"334921717","IsPullRequest":true,"CreatedAt":"2018-06-25T14:14:43","Actor":"SteveSandersonMS","Number":"1033","RawContent":null,"Title":"JavaScript interop v3","State":"closed","Body":"This is one of the big pieces needed for #959. It changes how the JS interop works so it's factored out of the Blazor codebase itself, and makes \"async\" calls the mainstream lowest-common-denominator case (with sync and unmarshalled calls still available via certain casts if you really need that).\r\n\r\nIt's a monstrously big PR, but it does all have to happen in one go because once you change the underpinnings there are so many consequences. @rynowak, we can discuss whether or how you want to review this.\r\n\r\nI'll write up a list of changes (especially the breaking API changes) in here later. For now I just want the CI run to start so am submitting this.","Url":"https://github.com/aspnet/Blazor/pull/1033","RelatedDescription":"Closed or merged PR \"JavaScript interop v3\" (#1033)"},{"Id":"335409810","IsPullRequest":true,"CreatedAt":"2018-06-25T13:34:51","Actor":"RemiBou","Number":"1039","RawContent":null,"Title":"[WIP] Resolving #1009 by adding null values for parameter missing from some routes","State":"open","Body":"I just want to validate that this is ok for you , I've added a RouteTableEdited so I can launch BenchmarkDotNet (see Program.cs in benchmarks). Here are the results \r\n\r\n> // * Summary *\r\n> \r\n> BenchmarkDotNet=v0.10.13, OS=Windows 10.0.17134\r\n> Intel Core i7-6700 CPU 3.40GHz (Skylake), 1 CPU, 8 logical cores and 4 physical cores\r\n> Frequency=3328125 Hz, Resolution=300.4695 ns, Timer=TSC\r\n> .NET Core SDK=2.1.300\r\n>   [Host] : .NET Core 2.0.7 (CoreCLR 4.6.26328.01, CoreFX 4.6.26403.03), 64bit RyuJIT  [AttachedDebugger]\r\n\r\n> // * Detailed results *\r\n> RouteTableEntryBenchMark.Before: Job-WLZQGL(Toolchain=InProcessToolchain, RunStrategy=Throughput)\r\n> Runtime = ; GC = \r\n> Mean = 14.0737 ns, StdErr = 0.0335 ns (0.24%); N = 15, StdDev = 0.1297 ns\r\n> Min = 13.7929 ns, Q1 = 13.9738 ns, Median = 14.0770 ns, Q3 = 14.1618 ns, Max = 14.2909 ns\r\n> IQR = 0.1880 ns, LowerFence = 13.6919 ns, UpperFence = 14.4437 ns\r\n> ConfidenceInterval = [13.9350 ns; 14.2123 ns] (CI 99.9%), Margin = 0.1386 ns (0.99% of Mean)\r\n> Skewness = -0.32, Kurtosis = 2.42\r\n> \r\n> \r\n> RouteTableEntryBenchMark.After: Job-WLZQGL(Toolchain=InProcessToolchain, RunStrategy=Throughput)\r\n> Runtime = ; GC = \r\n> Mean = 13.3245 ns, StdErr = 0.0254 ns (0.19%); N = 15, StdDev = 0.0985 ns\r\n> Min = 13.1397 ns, Q1 = 13.2408 ns, Median = 13.3071 ns, Q3 = 13.4047 ns, Max = 13.4880 ns\r\n> IQR = 0.1639 ns, LowerFence = 12.9950 ns, UpperFence = 13.6505 ns\r\n> ConfidenceInterval = [13.2192 ns; 13.4298 ns] (CI 99.9%), Margin = 0.1053 ns (0.79% of Mean)\r\n> Skewness = 0.09, Kurtosis = 2.06\r\n> \r\n> \r\n> RouteTableEntryBenchMark.BeforeWithParam: Job-WLZQGL(Toolchain=InProcessToolchain, RunStrategy=Throughput)\r\n> Runtime = ; GC = \r\n> Mean = 10.3525 ns, StdErr = 0.0115 ns (0.11%); N = 13, StdDev = 0.0415 ns\r\n> Min = 10.3034 ns, Q1 = 10.3070 ns, Median = 10.3497 ns, Q3 = 10.3926 ns, Max = 10.4219 ns\r\n> IQR = 0.0856 ns, LowerFence = 10.1787 ns, UpperFence = 10.5210 ns\r\n> ConfidenceInterval = [10.3028 ns; 10.4022 ns] (CI 99.9%), Margin = 0.0497 ns (0.48% of Mean)\r\n> Skewness = 0.2, Kurtosis = 1.48\r\n> \r\n> \r\n> RouteTableEntryBenchMark.AfterWithParam: Job-WLZQGL(Toolchain=InProcessToolchain, RunStrategy=Throughput)\r\n> Runtime = ; GC = \r\n> Mean = 9.8868 ns, StdErr = 0.0212 ns (0.21%); N = 15, StdDev = 0.0822 ns\r\n> Min = 9.7680 ns, Q1 = 9.8238 ns, Median = 9.8745 ns, Q3 = 9.9930 ns, Max = 10.0240 ns\r\n> IQR = 0.1691 ns, LowerFence = 9.5701 ns, UpperFence = 10.2467 ns\r\n> ConfidenceInterval = [9.7990 ns; 9.9747 ns] (CI 99.9%), Margin = 0.0878 ns (0.89% of Mean)\r\n> Skewness = 0.35, Kurtosis = 1.64\r\n> \r\n> \r\n> RouteTableEntryBenchMark.BeforeAllParam: Job-WLZQGL(Toolchain=InProcessToolchain, RunStrategy=Throughput)\r\n> Runtime = ; GC = \r\n> Mean = 650.0142 ns, StdErr = 1.0916 ns (0.17%); N = 15, StdDev = 4.2278 ns\r\n> Min = 643.5151 ns, Q1 = 646.2995 ns, Median = 649.7372 ns, Q3 = 653.3484 ns, Max = 658.0280 ns\r\n> IQR = 7.0488 ns, LowerFence = 635.7262 ns, UpperFence = 663.9216 ns\r\n> ConfidenceInterval = [645.4945 ns; 654.5340 ns] (CI 99.9%), Margin = 4.5197 ns (0.70% of Mean)\r\n> Skewness = 0.13, Kurtosis = 1.94\r\n> \r\n> \r\n> RouteTableEntryBenchMark.AfterAllParam: Job-WLZQGL(Toolchain=InProcessToolchain, RunStrategy=Throughput)\r\n> Runtime = ; GC = \r\n> Mean = 643.2216 ns, StdErr = 1.3856 ns (0.22%); N = 14, StdDev = 5.1843 ns\r\n> Min = 636.7704 ns, Q1 = 638.6427 ns, Median = 642.9343 ns, Q3 = 646.1165 ns, Max = 654.5397 ns\r\n> IQR = 7.4738 ns, LowerFence = 627.4321 ns, UpperFence = 657.3272 ns\r\n> ConfidenceInterval = [637.3734 ns; 649.0698 ns] (CI 99.9%), Margin = 5.8482 ns (0.91% of Mean)\r\n> Skewness = 0.66, Kurtosis = 2.44\r\n> \r\n> \r\n> RouteTableEntryBenchMark.BeforeCtor: Job-WLZQGL(Toolchain=InProcessToolchain, RunStrategy=Throughput)\r\n> Runtime = ; GC = \r\n> Mean = 4.6092 ns, StdErr = 0.0505 ns (1.10%); N = 25, StdDev = 0.2526 ns\r\n> Min = 4.3945 ns, Q1 = 4.4412 ns, Median = 4.4998 ns, Q3 = 4.7609 ns, Max = 5.1406 ns\r\n> IQR = 0.3196 ns, LowerFence = 3.9618 ns, UpperFence = 5.2403 ns\r\n> ConfidenceInterval = [4.4200 ns; 4.7984 ns] (CI 99.9%), Margin = 0.1892 ns (4.10% of Mean)\r\n> Skewness = 1.07, Kurtosis = 2.37\r\n> \r\n> \r\n> RouteTableEntryBenchMark.AfterCtor: Job-WLZQGL(Toolchain=InProcessToolchain, RunStrategy=Throughput)\r\n> Runtime = ; GC = \r\n> Mean = 1.4789 us, StdErr = 0.0040 us (0.27%); N = 14, StdDev = 0.0149 us\r\n> Min = 1.4575 us, Q1 = 1.4696 us, Median = 1.4769 us, Q3 = 1.4821 us, Max = 1.5129 us\r\n> IQR = 0.0125 us, LowerFence = 1.4509 us, UpperFence = 1.5007 us\r\n> ConfidenceInterval = [1.4622 us; 1.4957 us] (CI 99.9%), Margin = 0.0168 us (1.13% of Mean)\r\n> Skewness = 0.67, Kurtosis = 2.75\r\n> \r\n\r\nIf it's alright for you, I'll clean the branch (remove the temporary class, merge it with the current one, remove code from benchmarks).","Url":"https://github.com/aspnet/Blazor/pull/1039","RelatedDescription":"Open PR \"[WIP] Resolving #1009 by adding null values for parameter missing from some routes\" (#1039)"},{"Id":"334913079","IsPullRequest":false,"CreatedAt":"2018-06-25T10:01:24","Actor":"fs86","Number":"1032","RawContent":null,"Title":"Unable to register component event without ParameterAttribute","State":"closed","Body":"I noticed that events in custom components can only be registered from the parent component if ParameterAttribute is present. I have followed the example of @danroth27, which is described here: #610 \r\n\r\nMy custom component:\r\n```csharp\r\n<input type=\"text\" value=\"@Value\" onchange=\"@OnInputChanged\" />\r\n\r\n@functions\r\n{\r\n    [Parameter] string Value { get; set; }\r\n    public Action<string> ValueChanged { get; set; }\r\n    void OnInputChanged(UIChangeEventArgs e)\r\n    {\r\n        Value = e.Value.ToString();\r\n        ValueChanged(Value);\r\n    }\r\n}\r\n```\r\n\r\nMy parent component:\r\n```csharp\r\n<MyCustomComponent Value=\"@Product.Name\" ValueChanged=\"@OnValueChanged\" />\r\n\r\n@functions\r\n{\r\n    void OnValueChanged(string value)\r\n    {\r\n        Product.Name = value;\r\n        StateHasChanged();\r\n    }\r\n}\r\n```\r\n\r\nOutput: \"Cannot convert method group 'OnValueChanged' to non-delegate type 'object'. Did you intend to invoke the method?\"\r\n\r\nIf I add [Parameter] to my event, everything works fine.","Url":"https://github.com/aspnet/Blazor/issues/1032","RelatedDescription":"Closed issue \"Unable to register component event without ParameterAttribute\" (#1032)"},{"Id":"335122197","IsPullRequest":false,"CreatedAt":"2018-06-25T09:59:57","Actor":"cornishcoder","Number":"1034","RawContent":null,"Title":"Public properties in @functions not in scope after Js/c# Interop calls","State":"closed","Body":".Net Core 2.1.300\r\nBlazor 0.4.0\r\n\r\nI am using GitHub Pages to host my experimental Blazor app, which simply fetches the latest weather for a given city using OpenWeatherApi. I am having to use JsonP calls to the service due to CORS. This means, calling a Javascript function to make the API call with a C# function acting as the callback with the data, using Blazor interop. This works and is not a problem. \r\n\r\nThe issue is that when the C# callback function is called, the member variable forecasts does not appear to be in scope, causing an exception. \r\n\r\n```\r\nList<WeatherForecast> forecasts = new List<WeatherForecast>();\r\nstring city;\r\nstring apiKey;\r\n```\r\n\r\n```\r\nprotected void OnClick()\r\n{\r\n    var url = $\"http://api.openweathermap.org/data/2.5/forecast?APPID={apiKey}&q={city}&units=metric\";\r\n    RegisteredFunction.Invoke<string>(\"jsonP\", url);\r\n}\r\n\r\npublic void ApiCallback(string data)\r\n{\r\n    var serializer = new DataContractJsonSerializer(typeof(RootObject));\r\n\r\n    using (var ms = new MemoryStream(Encoding.UTF8.GetBytes(data)))\r\n    {\r\n        var rootObject = serializer.ReadObject(ms) as RootObject;\r\n        foreach (var entry in rootObject.list)\r\n        {\r\n           var f = new WeatherForecast()\r\n           {\r\n                Date = DateTime.Parse(entry.dt_txt),\r\n                TemperatureC = entry.main.temp,\r\n                WindSpeed = entry.wind.speed,\r\n                Summary = entry.weather.Single().description\r\n            };\r\n            Console.WriteLine($\"{f.Date} - {f.TemperatureC} - {f.WindSpeed} - {f.Summary}\");\r\n            try\r\n            {\r\n                forecasts?.Add(f);  // Object reference not set to an instance of an object.\r\n            }\r\n            catch (Exception ex)\r\n            {\r\n               Console.WriteLine($\"Exception: {ex.Message}\");\r\n            }\r\n        }\r\n   }\r\n }\r\n```\r\n\r\n```\r\nBlazor.registerFunction('jsonP', function (url) {\r\n    var data = {};\r\n    var callback = function (data) {\r\n        const apiCallback = Blazor.platform.findMethod(\r\n            'CornishCoderBlazor',\r\n            'CornishCoderBlazor.Pages',\r\n            'FetchData',\r\n            'ApiCallback'\r\n        );\r\n       \r\n        console.log(data);\r\n        Blazor.platform.callMethod(apiCallback, null, [Blazor.platform.toDotNetString(JSON.stringify(data))]);\r\n    };\r\n\r\n    J50Npi.getJSON(url, data, callback);\r\n});\r\n```\r\n\r\nApp running here: http://cornishcoder.uk/fetchdata \r\nSource here: https://github.com/cornishcoder/CornishCoderBlazor/blob/weatherAPI/CornishCoderBlazor/Pages/FetchData.cshtml\r\n\r\nUpdate: I've added a simpler example to the Counter page:\r\n  https://github.com/cornishcoder/CornishCoderBlazor/blob/weatherAPI/CornishCoderBlazor/Pages/Counter.cshtml","Url":"https://github.com/aspnet/Blazor/issues/1034","RelatedDescription":"Closed issue \"Public properties in @functions not in scope after Js/c# Interop calls\" (#1034)"},{"Id":"335185961","IsPullRequest":false,"CreatedAt":"2018-06-25T09:57:00","Actor":"MelnikovIG","Number":"1036","RawContent":null,"Title":"[Question] Can blazor pages locate at other project instead of host app?","State":"closed","Body":"I know currently it is allowed to locate components in different projects like showed in @SteveSandersonMS  video https://youtu.be/JU-6pAxqAa4?t=3205 . I modified _ViewImports.cshtml and added reference to my library like in video, but i can't use pages such way, only components. Requests to my page, located at separate project, redirected to main page. Is it possible for now?","Url":"https://github.com/aspnet/Blazor/issues/1036","RelatedDescription":"Closed issue \"[Question] Can blazor pages locate at other project instead of host app?\" (#1036)"},{"Id":"335260948","IsPullRequest":false,"CreatedAt":"2018-06-25T09:55:42","Actor":"nvrnight","Number":"1037","RawContent":null,"Title":"Unable to run Blazor without a web server...","State":"closed","Body":"Since Blazor is a client-side framework, I figured I should be able to run it like any other javascript files in a local folder from a regular html file.\r\n\r\nI ran into some issues within mono.js when trying this approach, fetch() was looking for a response with a Content-Type header of \"application/wasm\" which it's not going to get from trying to fetch a local file. I modified a couple of the instances where fetch is used to XMLHTTPRequest instead and everything worked in an electron application, but still fails in a regular browser due to \"Cross origin requests are only supported for protocol schemes: http, data, chrome, chrome-extension, https.\" which I suspect can be gotten around by coding in a better way.\r\n\r\nI suppose there may be no way around by-passing the browser security to retrieve a local file, but I'm hoping that maybe the fetch could be changed at-least so Blazor can work for Electron apps without a server(even though I've already read that Electron isn't an intended use for Blazor).\r\n\r\nAttached my PoC of Blazor/Electron with my modification to mono.js. Should be able to run it after doing npm install by doing npm start. It's just the sample Blazor app with the counter and fetch request page(which obviously doesn't work without a web server to fetch the data from).\r\n\r\n[ElectronBlazor.zip](https://github.com/aspnet/Blazor/files/2131825/ElectronBlazor.zip)\r\n","Url":"https://github.com/aspnet/Blazor/issues/1037","RelatedDescription":"Closed issue \"Unable to run Blazor without a web server...\" (#1037)"},{"Id":"335282714","IsPullRequest":false,"CreatedAt":"2018-06-25T09:53:21","Actor":"desalbres","Number":"1038","RawContent":null,"Title":"Add sections...","State":"closed","Body":"Hello, \r\n\r\nCould you add @section to razor views like in ASP.NET MVC ?\r\n\r\nThanks,\r\n\r\nRaphaël Desalbres","Url":"https://github.com/aspnet/Blazor/issues/1038","RelatedDescription":"Closed issue \"Add sections...\" (#1038)"},{"Id":"335150082","IsPullRequest":false,"CreatedAt":"2018-06-24T16:20:51","Actor":"ylluminate","Number":"1035","RawContent":null,"Title":"YAML instead of XML?","State":"closed","Body":"Just saw this project, looks interesting. I find the WASM + JS interop + a fully vertical isomorphic stack very appealing.  Perhaps similar to wonderful options like Ruby on Rails or Roda + Opal + Hyperloop.\r\n\r\nHave you considered using YAML for config instead of XML?  I think readability of the language and things like configs are important to really making a stack appealing to devs.  Some folks might like XML, but honestly, it's not as quick to visually parse as a human being and I think decisions about readability and self documentation are important for popularity.","Url":"https://github.com/aspnet/Blazor/issues/1035","RelatedDescription":"Closed issue \"YAML instead of XML?\" (#1035)"}],"ResultType":"GitHubIssue"}},"RunOn":"2018-06-30T05:30:02.6270022Z","RunDurationInMilliseconds":1219}