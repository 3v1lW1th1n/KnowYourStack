{"Data":{"Blog":{"FeedItems":[{"Title":"Surfacing GitHub Usage for packages on NuGet.org","PublishedOn":"2019-07-17T20:00:23+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"There are several criteria you can use today to evaluate NuGet packages. We received feedback that you would like even more information to help choose the right packages. We&#8217;re excited to...","Href":"https://devblogs.microsoft.com/nuget/surfacing-github-usage-for-packages-on-nuget-org/","RawContent":null},{"Title":"NuGet Spring 2019 Roadmap","PublishedOn":"2019-04-10T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We published our last NuGet roadmap in June last year. Many of the features announced were major additions to NuGet and we have been hard at work to implement those over the last few months. In this...","Href":"https://devblogs.microsoft.com/nuget/nuget-spring-2019-roadmap/","RawContent":null},{"Title":"Enable repeatable package restores using a lock file","PublishedOn":"2018-12-17T08:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"With PackageReference, NuGet always tries to produce the same closure of package dependencies if the input package reference list has not changed. However, there are a few scenarios where it may not...","Href":"https://devblogs.microsoft.com/nuget/enable-repeatable-package-restores-using-a-lock-file/","RawContent":null},{"Title":"Lock down your dependencies using configurable trust policies","PublishedOn":"2018-12-05T08:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"For the past several months we have focused on various features to improve package security and trust. Around a year back, we had announced our plans on various signing functionalities that we have...","Href":"https://devblogs.microsoft.com/nuget/lock-down-your-dependencies-using-configurable-trust-policies/","RawContent":null},{"Title":"Improved package debugging experience with the NuGet.org symbol server","PublishedOn":"2018-11-16T08:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Starting today, you can publish symbol packages to the NuGet.org symbol server. With NuGet.org as a single service provider for libraries and symbols, package authors and consumers will have a...","Href":"https://devblogs.microsoft.com/nuget/improved-package-debugging-experience-with-the-nuget-org-symbol-server/","RawContent":null},{"Title":"Introducing Source Code Link for NuGet packages","PublishedOn":"2018-08-27T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"NuGet.org now supports surfacing source code repository link for NuGet packages. This will enable package authors to surface both the project&#8217;s website and the source repository using the...","Href":"https://devblogs.microsoft.com/nuget/introducing-source-code-link-for-nuget-packages/","RawContent":null},{"Title":"NuGet.org starts repo-signing packages","PublishedOn":"2018-08-10T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"In May, we implemented Stage 1 and enabled support for any NuGet.org user to submit signed packages to NuGet.org. Today, we are announcing Stage 2 of our NuGet package signing journey &#8211; tamper...","Href":"https://devblogs.microsoft.com/nuget/introducing-repository-signatures/","RawContent":null},{"Title":"NuGet Summer 2018 Roadmap","PublishedOn":"2018-07-02T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"This blog post provides insights into the NuGet team plans for the upcoming quarter (July &#8211; Sep 2018). In the March 2018 NuGet Spring 2018 Roadmap, we had outlined Package Signing,...","Href":"https://devblogs.microsoft.com/nuget/nuget-summer-2018-roadmap/","RawContent":null},{"Title":"Introducing signed package submissions to NuGet.org","PublishedOn":"2018-05-22T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"In September 2017, we announced our plans to improve the security of the NuGet ecosystem by introducing the ability for package authors to sign packages. Today, we want to announce support for any...","Href":"https://devblogs.microsoft.com/nuget/introducing-signed-package-submissions/","RawContent":null},{"Title":"NuGet.org will only support MSA/AAD starting June 1st, 2018","PublishedOn":"2018-05-15T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We had previously announced the deprecation of NuGet.org&#8217;s home-grown authentication in favor of Microsoft accounts (MSA) that will allow us to add support for additional security systems such...","Href":"https://devblogs.microsoft.com/nuget/nuget-org-will-only-support-msa-aad-starting-june/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"10187840158","Type":"IssuesEvent","CreatedAt":"2019-08-11T04:14:55","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7441","RelatedDescription":"Opened issue \"Dispose DI container every job loop of JsonConfigurationJob\" (#7441) at NuGet/NuGetGallery","RelatedBody":"Today, every time `JsonConfigurationJob.Init` is called, a new DI container is created replacing the reference to the previous one in `_serviceProvider`:\r\nhttps://github.com/NuGet/NuGet.Jobs/blob/1b6f4a0bf6605fb676cccca6a839cabdb5c17f2a/src/NuGet.Jobs.Common/JsonConfigurationJob.cs#L66\r\n\r\nThis is a pit to fall in because DI containers can contain `IDisposable` instances (in particular singletons) and if we never dispose the previous container then the `IDisposable` instances inside of it will never be disposed, leading to leaks.\r\n\r\nIn short, a DI container is considered to \"own\" instances and `IDisposable` instances handed out by the DI container are typically the container's job to dispose -- especially singletons.\r\n\r\nThe `AutofacServiceProvider` container from Autofac.Extensions.DependencyInjection 4.2.0 does not implement `IDisposable` but the Autofac `IContainer` inside of it does. We should:\r\n\r\n1. [ ] Update to Autofac.Extensions.DependencyInjection version 4.3.0 or later\r\n    - See https://autofac.readthedocs.io/en/latest/integration/aspnetcore.html#id3. We need this to make `AutofacServiceProvider` disposable\r\n1. [ ] Dispose the previous instance, if non-null. It will be non-null after the first job loop.\r\n\r\nAfter this is done we can safely put `IDisposable` things in the DI container.\r\n"},{"Id":"10187770277","Type":"PullRequestEvent","CreatedAt":"2019-08-11T03:20:35","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/7440","RelatedDescription":"Opened pull request \"Split read vs. read/write feature flag storage services\" (#7440) at NuGet/NuGetGallery","RelatedBody":"Update to latest server common to pull in https://github.com/NuGet/ServerCommon/pull/306\r\nProgress on https://github.com/NuGet/NuGetGallery/issues/7439\r\n\r\nThis will allow other components (e.g. NuGet.Jobs) to use feature flags without needing the \"write\" feature flag method. In particular, the \"write\" feature flag service (`EditableFeatureFlagFileStorageService`) needs an `IAuditingService` which shouldn't be needed in a background job context where only \"read\" feature flag operations are performed.\r\n\r\nThe NuGet.Services.FeatureFlags update makes app shutdown much faster. I was able to trigger the cancellation token provided by `HostingEnvironment.QueueBackgroundWorkItem` getting to a cancelled state by stopping the site in IIS Express. It seems like the shutdown before this change triggered some sort of timeout case in IIS where the background work item `Task` would be abandoned after about 30 seconds. In other words, previously if the feature flag `RefreshInterval` has more than ~30 seconds left, IIS would stop the app anyway. This was not harmful to the app since it was shutting down anyway but it did delay shutdown."},{"Id":"10187677112","Type":"IssuesEvent","CreatedAt":"2019-08-11T02:07:39","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7439","RelatedDescription":"Opened issue \"[Queue-Back] Add feature flag support for validation jobs\" (#7439) at NuGet/NuGetGallery","RelatedBody":""},{"Id":"10187273400","Type":"PullRequestEvent","CreatedAt":"2019-08-10T21:05:56","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/7438","RelatedDescription":"Opened pull request \"Make the admin index page a little better looking\" (#7438) at NuGet/NuGetGallery","RelatedBody":"The `<ul>` dots before the icons look bad. Also it's too spaced out.\r\n\r\n## Before \r\n\r\n![screencapture-localhost-Admin-2019-08-10-14_03_54](https://user-images.githubusercontent.com/94054/62826838-cf019300-bb77-11e9-8727-54a4dc458a5c.png)\r\n\r\n## After\r\n\r\n![screencapture-localhost-Admin-2019-08-10-14_03_06](https://user-images.githubusercontent.com/94054/62826840-d32db080-bb77-11e9-8cf8-df034ecf6edd.png)\r\n"},{"Id":"10184993672","Type":"PullRequestEvent","CreatedAt":"2019-08-09T23:22:09","Actor":"ryuyu","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/7437","RelatedDescription":"Opened pull request \"[Delete][Feature] Flagged Self Service Delete\" (#7437) at NuGet/NuGetGallery","RelatedBody":"Introduces a new flag that allows self service account deletion.\r\n\r\ntesting is still in progress. Thanks."},{"Id":"10184884243","Type":"PullRequestEvent","CreatedAt":"2019-08-09T22:46:39","Actor":"scottbommarito","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/7436","RelatedDescription":"Opened pull request \"Block TLS 1.0 and 1.1\" (#7436) at NuGet/NuGetGallery","RelatedBody":"https://github.com/nuget/engineering/issues/2617"},{"Id":"10184871357","Type":"PullRequestEvent","CreatedAt":"2019-08-09T22:42:52","Actor":"ryuyu","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/7435","RelatedDescription":"Merged pull request \"[Hotfix]Pass through version on a timestamp check.\" (#7435) at NuGet/NuGetGallery","RelatedBody":"Resolution of a merge conflict ended up causing a build issue. This patch fixes the error."},{"Id":"10184782549","Type":"PullRequestEvent","CreatedAt":"2019-08-09T22:18:16","Actor":"ryuyu","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/7435","RelatedDescription":"Opened pull request \"[Hotfix]Pass through version on a timestamp check.\" (#7435) at NuGet/NuGetGallery","RelatedBody":"Resolution of a merge conflict ended up causing a build issue. This patch fixes the error."}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"10186934057","Type":"IssuesEvent","CreatedAt":"2019-08-10T17:44:51","Actor":"janabueno","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8443","RelatedDescription":"Opened issue \"how to use PackageReference to another project on same repo & build\" (#8443) at NuGet/Home","RelatedBody":"Assume Project A and Project B are on same repo and same build queue.\r\nProject A creates package A which contains a set of tools, mulitple libraries, props, targets files.\r\nProject B uses package A - via PackageReference to a nuget feed - and creates another package\r\n\r\nWhen I make a change to Project A, I need to build, publish package A, then make a change on Project B to consume new Package A, build, publish package B.\r\n\r\nHow to improve this loop? Is there a \"ProjectPackageReference\"?\r\nThere are some (hard to maintain) workarounds by defining a \"local feed\" and forcing a certain order of build/restore from local feed/build to simulate.\r\n"},{"Id":"10185035779","Type":"IssuesEvent","CreatedAt":"2019-08-09T23:37:02","Actor":"JarahSi","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8296","RelatedDescription":"Closed issue \"Rule: Package uses ref assemblies but no assemblies in ref folder\" (#8296) at NuGet/Home","RelatedBody":"[Spec](https://github.com/NuGet/Engineering/blob/dev-refAssemblies/Client.Specs/PackageValidation/RefAssembliesInNuspecMatchRefFolder.md)\r\n\r\n[PR](https://github.com/NuGet/NuGet.Client/pull/2987)"},{"Id":"10184494743","Type":"IssuesEvent","CreatedAt":"2019-08-09T21:12:01","Actor":"bergbria","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8442","RelatedDescription":"Opened issue \"Lock file missing entries when RuntimeIdentifier is specified for netcoreapp 3.0 projects\" (#8442) at NuGet/Home","RelatedBody":"## Details about Problem\r\n\r\nNuGet product used: dotnet.exe\r\n\r\nNuGet version (x.x.x.xxx):\r\n\r\ndotnet.exe --version (if appropriate): 3.0.100-preview7-012821\r\n\r\nWorked before? If so, with which NuGet version: yes. Seems to work even with current sdk if targeting netcoreapp2.0\r\n\r\n## Detailed repro steps so we can see the same problem\r\n\r\n### Automated repro\r\nDownload [repro_missingRuntimePackage.zip](https://github.com/NuGet/Home/files/3488060/repro_missingRuntimePackage.zip) and run repro.bat for an automated repro.\r\n\r\n### Manual steps\r\n\r\n1. Create a basic .csproj targeting netcoreapp3.0\r\n\r\n2. Add <RuntimeIdentifier>win-x64</RuntimeIdentifier>\r\n\r\n3. `dotnet restore --use-lock-file`\r\n\r\n4. Notice that the generated lock file has no packages in it even though the build actually uses several (e.g. microsoft.netcore.app.runtime.win-x64)\r\n\r\nThis is a regression from netcoreapp2.0, which listed all packages as expected.\r\n\r\nTagging @rrelyea and @nkolev92 as FYI.\r\n"},{"Id":"10184471560","Type":"IssuesEvent","CreatedAt":"2019-08-09T21:07:21","Actor":"scottbommarito","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8441","RelatedDescription":"Opened issue \"\"Error_UnableToFindProjectInfo\" message is not grammatically correct\" (#8441) at NuGet/Home","RelatedBody":"Message currently reads:\r\n\r\n```\r\nUnable to find project information for '{0}'. Inside Visual Studio, this may be because the project is unloaded or not part of current solution so please run a restore from command-line. Otherwise the project file may be invalid or missing targets required for restore.\r\n```\r\n\r\nIt is not very clear and is also not grammatically correct."},{"Id":"10184355015","Type":"IssuesEvent","CreatedAt":"2019-08-09T20:44:46","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8279","RelatedDescription":"Closed issue \"dotnet list package --deprecated\" (#8279) at NuGet/Home","RelatedBody":"The list command should be able to output deprecated packages with `--deprecated` option.\r\nSee [spec](https://github.com/NuGet/Home/wiki/Deprecate-packages#cli).\r\n\r\n```\r\n> dotnet list package --deprecated\r\n\r\nThe following sources were used:\r\n   nuget.org - https://api.nuget.org/v3/index.json\r\n   Local - C:\\NuGet\\NuGetLocal\r\n\r\nProject `ClassLibrary1` uses the following deprecated packages\r\n   [netcoreapp2.0]:\r\n   Top-level Package              Resolved     Reason                 Alternative\r\n   > My.Legacy.Package            2.0.0        Legacy                 My.Awesome.Package (>= 3.0.0)\r\n   > My.Buggy.Package\t          1.1.0        Critical Bugs          My.NotBuggy.Package (>= 2.0.0)\r\n   > My.Deprecated.Package        3.2.1        Other                  My.NotBuggy.Package (>= 2.0.0)\r\n   > My.CompletelyBroken.Package  0.9.0        Legacy, Critical Bugs  My.Awesome.Package (>= 1.0.0)\r\n\r\n> To see all packages including transitive packages, additional option `--include-transitive` can be used. \r\n```\r\n\r\nThe list command should be able to show deprecation message even if a package is deprecated on one of the many repositories/feeds."},{"Id":"10184338989","Type":"IssuesEvent","CreatedAt":"2019-08-09T20:41:44","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8440","RelatedDescription":"Opened issue \"Tests should run against 3.0 SDK\" (#8440) at NuGet/Home","RelatedBody":"We insert into 3.0. We should fix up the test infrastructure so that we test against that as well. \r\n\r\nIt will also allow us to enable. DotnetListPackage_DeprecatedAndOutdated_Fail. \r\n\r\n//cc @NuGet/nuget-client @xavierdecoster "},{"Id":"10184321620","Type":"IssuesEvent","CreatedAt":"2019-08-09T20:38:28","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8151","RelatedDescription":"Closed issue \"NUGET_PLUGIN_PATHS cannot be set to work cross framework\" (#8151) at NuGet/Home","RelatedBody":"NUGET_PLUGIN_PATHS can't be configured statically, to work for both nuget.exe and dotnet.  If you add paths for the .exe and .dll credential providers to handle both cases, nuget fails trying to execute a dll and dotnet fails trying to execute the full framework .exe.\r\n\r\n## Details about Problem\r\n\r\nNuGet product used (NuGet.exe | VS UI | Package Manager Console | dotnet.exe):\r\n**nuget.exe, dotnet.exe**\r\nNuGet version (x.x.x.xxx):\r\n**5.0.0.5856**\r\ndotnet.exe --version (if appropriate):\r\n**2.2.300**\r\nVS version (if appropriate):\r\n\r\nOS version (i.e. win10 v1607 (14393.321)):\r\n**win10 v1903**\r\nWorked before? If so, with which NuGet version:\r\n**no**\r\n## Detailed repro steps so we can see the same problem\r\n\r\n1. `set nuget_plugin_paths=d:\\tools\\credprovider\\plugins\\netcore\\CredentialProvider.Microsoft\\CredentialProvider.Microsoft.dll;d:\\tools\\credprovider\\plugins\\netfx\\CredentialProvider.Microsoft\\CredentialProvider.Microsoft.exe`\r\n2. (fails) `nuget.exe install newtonsoft.json`\r\n3. (fails) `dotnet new web & dotnet add package newtonsoft.json`\r\n\r\n\r\n\r\n"},{"Id":"10184125778","Type":"IssuesEvent","CreatedAt":"2019-08-09T20:01:49","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8439","RelatedDescription":"Opened issue \"Create docs for new pack validation codes\" (#8439) at NuGet/Home","RelatedBody":"Create docs pages for the pack validations that @JarahSi created."},{"Id":"10180587880","Type":"IssuesEvent","CreatedAt":"2019-08-09T10:42:47","Actor":"v-luzh","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8438","RelatedDescription":"Opened issue \"[Test Failure] A clickable block show at the bottom of left panel in PM UI of Blend for VS\" (#8438) at NuGet/Home","RelatedBody":"## Details about Problem\r\nNuGet version: NuGet Client Dev\\5.3.0.6154\r\nVS Version: Master\\29208.39\r\nOS: Windows-10-Enterprise-19H1-04-05-2019\r\n## Detailed repro steps\r\n1. Launch Blend for VS and create a project: C# Blank App (Universal Windows).\r\n2. Open PM UI of this project and click go to “Browse” tab.\r\n3. Type some string (e.g. Blend) in the search box.\r\n4. Hover on the bottom of the left panel.\r\n## Expected\r\nThere is no clickable block show at the bottom of the left panel in PM UI.\r\n## Actual\r\nA clickable block show at the bottom of the left panel in PM UI as below screenshot.\r\n![BlockShow](https://user-images.githubusercontent.com/20632625/62773499-e176c080-bad4-11e9-9d28-7ebfa158f0e1.png)\r\n## Note\r\n1. It just repro in Blend, doesn’t repro in VS.\r\n2. Clicking the block will show next package in the list.\r\n3. It is not a regression since it did repro on D15.9 28307.158 (NuGet 4.9.3.5777)."},{"Id":"10178725714","Type":"IssuesEvent","CreatedAt":"2019-08-09T05:14:13","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8437","RelatedDescription":"Opened issue \"Docs for the deterministic pack switch\" (#8437) at NuGet/Home","RelatedBody":""},{"Id":"10177515116","Type":"IssuesEvent","CreatedAt":"2019-08-08T23:11:47","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8436","RelatedDescription":"Closed issue \"Reserve NU5036\" (#8436) at NuGet/Home","RelatedBody":"https://aka.ms/malformedNuGetLicenseUrl redirects to https://docs.microsoft.com/en-us/nuget/reference/errors-and-warnings/nu5036, so we should prevent any new warnings/errors using this code."},{"Id":"10177065584","Type":"IssuesEvent","CreatedAt":"2019-08-08T21:33:28","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8436","RelatedDescription":"Opened issue \"Reserve NU5036\" (#8436) at NuGet/Home","RelatedBody":"https://aka.ms/malformedNuGetLicenseUrl redirects to https://docs.microsoft.com/en-us/nuget/reference/errors-and-warnings/nu5036, so we should prevent any new warnings/errors using this code."},{"Id":"10176667452","Type":"IssuesEvent","CreatedAt":"2019-08-08T20:28:04","Actor":"heng-liu","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8403","RelatedDescription":"Closed issue \"Remove NuGet.Build.Tasks.Pack.Sdk2x package\" (#8403) at NuGet/Home","RelatedBody":"As there is no more NuGet insertion into SDK 2.x, there is no need to generate the NuGet.Build.Tasks.Pack.Sdk2x package in our code.\r\nWe should remove related code.\r\nRelated issue https://github.com/NuGet/Home/issues/8043"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"10168692521","Type":"IssuesEvent","CreatedAt":"2019-08-07T21:31:54","Actor":"anangaur","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/37","RelatedDescription":"Opened issue \"Using OData to query NuGet.org repository is being deprecated\" (#37) at NuGet/Announcements","RelatedBody":"We introduced `V3 APIs` in early 2016. We have made continuous investments to make it more reliable, performant and secure. Going forward, we plan to bring all new features and improvements only to the newer `V3 APIs`. As part of this strategy, we are deprecating the usage of `OData` queries. Subsequently, we plan to **disable the `OData` queries starting Feb 5th, 2020**.\r\n\r\n**Call to Action: Transition to V3 APIs**\r\n\r\nHere are some resources to help you with the migration:\r\n* [NuGet Server `V3 APIs` reference](https://devblogs.microsoft.com/nuget/switching-from-wcf-odata-to-web-api/)\r\n* [Guide to transition from NuGet `V2 API` to `V3 API`](https://docs.microsoft.com/en-us/nuget/guides/api/query-for-all-published-packages). \r\n* [Blog post: Switching from WCF OData to Web API](https://devblogs.microsoft.com/nuget/switching-from-wcf-odata-to-web-api/)\r\n\r\nIf you need further help in moving your use case to `V3 APIs`, do reach out to us at [support@nuget.org](mailto:support@nuget.org).\r\n"},{"Id":"10115721045","Type":"IssuesEvent","CreatedAt":"2019-07-30T22:44:31","Actor":"shoter","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Announcements/issues/36","RelatedDescription":"Closed issue \"Replace reference to codeplex issue numer 3072\" (#36) at NuGet/Announcements","RelatedBody":"This is copy of codeplex issue number 3072 as it is referenced inside code. I should do a PR shortly to address this one.\r\n\r\nThe place where it is referenced is RuntimeHelper.cs:150\r\n\r\n\r\n---\r\n\r\nWe're hitting an issue with Microsoft.Bcl package where NuGet is adding a binding redirect for a binary that is considered part of the framework, this causes the application to crash because the binding redirect refers to assembly version that is not available at runtime.\r\n\r\n@Repro:\r\n\r\n1. Create a new Console Application targeting 4.5\r\n2. Create a new Portable Library targeting .NET Framework 4.5, Silverlight 4, Windows Phone 7.5 and .NET for Windows Store apps\r\n3. Add a reference to the portable library from the Console Application\r\n4. Install the Microsoft.Bcl package (1.0.16-rc) to both projects\r\n\r\n@Expected: No binding redirect for System.Runtime in the .NET Framework 4.5 project because a ___later version___ is part of the target framework (see C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.5\\RedistList\\FrameworkList.xml)\r\n@Actual: Binding redirect\r\n\r\n<dependentAssembly>\r\n<assemblyIdentity name=\"System.Runtime\" publicKeyToken=\"b03f5f7f11d50a3a\" culture=\"neutral\" />\r\n<bindingRedirect oldVersion=\"0.0.0.0-1.5.11.0\" newVersion=\"1.5.11.0\" />\r\n</dependentAssembly>\r\n\r\n\r\nYou can use the IVsFrameworkMultiTargeting to determine if a given assembly version is available as part of a given target framework.\r\nMake sure when you fix this, that you only skip the binding redirect if ___a later or same version___ is available in the framework.  \r\n2013-02-22\r\n\r\n---\r\n\r\nWe'll do this in 2.4 release.  \r\n2013-02-26\r\n\r\n---\r\n\r\nIs IVsFrameworkMultiTargeting.IsReferenceableInTargetFx the method I need to call? What should I pass to pwszAssemblySpec?  \r\n2013-06-08\r\n\r\n---\r\n\r\nIt's the full name of the assembly (mscorlib, Version=[version], PublicKeyToken=[token], Culture=[culture]). It can either contain all the information (key, version, etc), or just the simple name (\"mscorlib\")  \r\n2013-06-10\r\n\r\n---\r\n\r\nSo look like I can only check for the same version of the target framework. Can't check for a later version using this method, because I don't know what future versions will be.  \r\n2013-06-12\r\n\r\n---\r\n\r\nThat's fine. That's exactly the behavior we want. For example, System.Runtime didn't ship in 4.0, but did in 4.5. We still want a binding redirect generated for it in 4.0, but not for 4.5.  \r\n2013-06-13\r\n\r\n---\r\n\r\nI followed the exact same steps above, but there's no binding redirect added to the Console Application. It's only added to the __Portable Library project__. Is that the bug?  \r\n2013-06-13\r\n\r\n---\r\n\r\nThe binding redirects added to the Portable Library project seems to come from the Microsoft.Bcl package itself (from the content folder's app.config.transform file). this looks like a non-bug.\r\n2013-06-13\r\n\r\n  \r\nI'm chasing up the repro with Eric St. John. He walked through the code and figured out where it was broken.\r\n\r\nIt's the not the app.config.tranform, notice how the net45 content is empty, and hence no transforms. We also marked our transforms with a special marker that indicates that we added the redirects . The binding redirects we were seeing were not coming from us.  \r\n2013-06-13\r\n\r\n---\r\n\r\nAre you seeing the binding redirects added to the Console Application or the Portable Library? I don't see binding redirect added to Console Application, only the Portable Library.  \r\n2013-06-13\r\n\r\n---\r\n\r\nYes I'm talking about the ConsoleApplication. The binding redirects in the portable library project are expected, and do not affect runtime behavior (as the app.config is ignored and not copied to the app project), and hence can't cause an application to crash.\r\n\r\nI've found another repro (NuGet has really weird logic around when it decides to add binding redirects so it was hard to find a repro).\r\n\r\nThe repro is instead of using the Microsoft.Bcl package, install the Microsoft.Net.Http, 2.2.3-beta package. Make sure you are targeting __4.5__ from the ConsoleApplication and the exact platforms that I called out above for portable.  \r\n2013-06-13\r\n\r\n---\r\n\r\nAlso, the ConsoleApplication must be referencing the portable project before installing the package.  \r\n2013-06-13\r\n\r\n---\r\n\r\nOK now I can repro  \r\n2013-06-14\r\n\r\n---\r\n\r\nOK, I've got a fix now. It no longer adds the binding redirect for System.Runtime.dll, but still adds one for System.Net.Http.Primitives. I guess it's expected, right? Please confirm.\r\n\r\n```\r\n<assemblyBinding xmlns=\"urn:schemas-microsoft-com:asm.v1\">\r\n<dependentAssembly>\r\n<assemblyIdentity name=\"System.Net.Http.Primitives\" publicKeyToken=\"b03f5f7f11d50a3a\" culture=\"neutral\" />\r\n<bindingRedirect oldVersion=\"0.0.0.0-4.2.3.0\" newVersion=\"4.2.3.0\" />\r\n</dependentAssembly>\r\n</assemblyBinding>\r\n```  \r\n2013-06-14\r\n\r\n---\r\n\r\n\r\nYes that's correct. System.Net.Http.Primitives does not exist in the framework.  \r\n2013-06-14\r\n\r\n---\r\n\r\nFixed in changeset b8d515f6341193b970d2a9d837e580e762d2eb71  \r\n2013-06-19\r\n\r\n---\r\n\r\ni get the same issue with my test project still, runtime being added... if i comment this out the tests run fine... if not i get exceptions thrown from json.net  \r\n2013-08-09\r\n\r\n---\r\n\r\n(or i can change the version up to 4.0.0.0 or something and it works)  \r\n2013-08-09"},{"Id":"10115715827","Type":"IssuesEvent","CreatedAt":"2019-07-30T22:43:23","Actor":"shoter","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/36","RelatedDescription":"Opened issue \"Replace reference to codeplex issue numer 3072\" (#36) at NuGet/Announcements","RelatedBody":"This is copy of codeplex issue number 3072 as it is referenced inside code. I should do a PR shortly to address this one.\r\n\r\nThe place where it is referenced is RuntimeHelper.cs:150\r\n\r\n\r\n---\r\n\r\nWe're hitting an issue with Microsoft.Bcl package where NuGet is adding a binding redirect for a binary that is considered part of the framework, this causes the application to crash because the binding redirect refers to assembly version that is not available at runtime.\r\n\r\n@Repro:\r\n\r\n1. Create a new Console Application targeting 4.5\r\n2. Create a new Portable Library targeting .NET Framework 4.5, Silverlight 4, Windows Phone 7.5 and .NET for Windows Store apps\r\n3. Add a reference to the portable library from the Console Application\r\n4. Install the Microsoft.Bcl package (1.0.16-rc) to both projects\r\n\r\n@Expected: No binding redirect for System.Runtime in the .NET Framework 4.5 project because a ___later version___ is part of the target framework (see C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.5\\RedistList\\FrameworkList.xml)\r\n@Actual: Binding redirect\r\n\r\n<dependentAssembly>\r\n<assemblyIdentity name=\"System.Runtime\" publicKeyToken=\"b03f5f7f11d50a3a\" culture=\"neutral\" />\r\n<bindingRedirect oldVersion=\"0.0.0.0-1.5.11.0\" newVersion=\"1.5.11.0\" />\r\n</dependentAssembly>\r\n\r\n\r\nYou can use the IVsFrameworkMultiTargeting to determine if a given assembly version is available as part of a given target framework.\r\nMake sure when you fix this, that you only skip the binding redirect if ___a later or same version___ is available in the framework.  \r\n2013-02-22\r\n\r\n---\r\n\r\nWe'll do this in 2.4 release.  \r\n2013-02-26\r\n\r\n---\r\n\r\nIs IVsFrameworkMultiTargeting.IsReferenceableInTargetFx the method I need to call? What should I pass to pwszAssemblySpec?  \r\n2013-06-08\r\n\r\n---\r\n\r\nIt's the full name of the assembly (mscorlib, Version=[version], PublicKeyToken=[token], Culture=[culture]). It can either contain all the information (key, version, etc), or just the simple name (\"mscorlib\")  \r\n2013-06-10\r\n\r\n---\r\n\r\nSo look like I can only check for the same version of the target framework. Can't check for a later version using this method, because I don't know what future versions will be.  \r\n2013-06-12\r\n\r\n---\r\n\r\nThat's fine. That's exactly the behavior we want. For example, System.Runtime didn't ship in 4.0, but did in 4.5. We still want a binding redirect generated for it in 4.0, but not for 4.5.  \r\n2013-06-13\r\n\r\n---\r\n\r\nI followed the exact same steps above, but there's no binding redirect added to the Console Application. It's only added to the __Portable Library project__. Is that the bug?  \r\n2013-06-13\r\n\r\n---\r\n\r\nThe binding redirects added to the Portable Library project seems to come from the Microsoft.Bcl package itself (from the content folder's app.config.transform file). this looks like a non-bug.\r\n2013-06-13\r\n\r\n  \r\nI'm chasing up the repro with Eric St. John. He walked through the code and figured out where it was broken.\r\n\r\nIt's the not the app.config.tranform, notice how the net45 content is empty, and hence no transforms. We also marked our transforms with a special marker that indicates that we added the redirects . The binding redirects we were seeing were not coming from us.  \r\n2013-06-13\r\n\r\n---\r\n\r\nAre you seeing the binding redirects added to the Console Application or the Portable Library? I don't see binding redirect added to Console Application, only the Portable Library.  \r\n2013-06-13\r\n\r\n---\r\n\r\nYes I'm talking about the ConsoleApplication. The binding redirects in the portable library project are expected, and do not affect runtime behavior (as the app.config is ignored and not copied to the app project), and hence can't cause an application to crash.\r\n\r\nI've found another repro (NuGet has really weird logic around when it decides to add binding redirects so it was hard to find a repro).\r\n\r\nThe repro is instead of using the Microsoft.Bcl package, install the Microsoft.Net.Http, 2.2.3-beta package. Make sure you are targeting __4.5__ from the ConsoleApplication and the exact platforms that I called out above for portable.  \r\n2013-06-13\r\n\r\n---\r\n\r\nAlso, the ConsoleApplication must be referencing the portable project before installing the package.  \r\n2013-06-13\r\n\r\n---\r\n\r\nOK now I can repro  \r\n2013-06-14\r\n\r\n---\r\n\r\nOK, I've got a fix now. It no longer adds the binding redirect for System.Runtime.dll, but still adds one for System.Net.Http.Primitives. I guess it's expected, right? Please confirm.\r\n\r\n```\r\n<assemblyBinding xmlns=\"urn:schemas-microsoft-com:asm.v1\">\r\n<dependentAssembly>\r\n<assemblyIdentity name=\"System.Net.Http.Primitives\" publicKeyToken=\"b03f5f7f11d50a3a\" culture=\"neutral\" />\r\n<bindingRedirect oldVersion=\"0.0.0.0-4.2.3.0\" newVersion=\"4.2.3.0\" />\r\n</dependentAssembly>\r\n</assemblyBinding>\r\n```  \r\n2013-06-14\r\n\r\n---\r\n\r\n\r\nYes that's correct. System.Net.Http.Primitives does not exist in the framework.  \r\n2013-06-14\r\n\r\n---\r\n\r\nFixed in changeset b8d515f6341193b970d2a9d837e580e762d2eb71  \r\n2013-06-19\r\n\r\n---\r\n\r\ni get the same issue with my test project still, runtime being added... if i comment this out the tests run fine... if not i get exceptions thrown from json.net  \r\n2013-08-09\r\n\r\n---\r\n\r\n(or i can change the version up to 4.0.0.0 or something and it works)  \r\n2013-08-09"},{"Id":"10105705706","Type":"IssuesEvent","CreatedAt":"2019-07-29T18:41:10","Actor":"anangaur","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/35","RelatedDescription":"Opened issue \"Machine readable output for dotnet list package\" (#35) at NuGet/Announcements","RelatedBody":"The spec for 'Machine readable output for dotnet list package' is ready for **review**:\r\n\r\n|Spec wiki|Discussion issue|\r\n|----------|------------------|\r\n|[Machine readable output for dotnet list package](https://github.com/NuGet/Home/wiki/%5BSpec%5D-Machine-readable-output-for-dotnet-list-package) | https://github.com/NuGet/Home/issues/7752 |"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1159229316351197184","CreatedAt":"2019-08-07T22:26:21+00:00","UserScreenname":"nuget","Text":"Using OData to query https://t.co/F9kiKfdOWi repository is being deprecated\n#Announcement \n\nhttps://t.co/dtelctlNOe","Source":"<a href=\"http://twitter.com/download/iphone\" rel=\"nofollow\">Twitter for iPhone</a>","RetweetCount":9,"FavoriteCount":3,"RawContent":null},{"Id":"1124053944269983745","CreatedAt":"2019-05-02T20:51:58+00:00","UserScreenname":"nuget","Text":"https://t.co/F9kiKfvqkS is currently degraded and some pages might take too long to load. We are investigating the… https://t.co/j3saBGKARZ","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":3,"FavoriteCount":2,"RawContent":null},{"Id":"1121348019914334210","CreatedAt":"2019-04-25T09:39:36+00:00","UserScreenname":"nuget","Text":"Thanks for your contribution. https://t.co/RDrP9LnHU3","Source":"<a href=\"http://twitter.com/download/iphone\" rel=\"nofollow\">Twitter for iPhone</a>","RetweetCount":26,"FavoriteCount":3,"RawContent":null},{"Id":"1116042504854335488","CreatedAt":"2019-04-10T18:17:22+00:00","UserScreenname":"nuget","Text":"We have just published the NuGet Roadmap for Spring 2019. Check it out now! \nhttps://t.co/gt7qR0S3wV","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":24,"FavoriteCount":18,"RawContent":null}]}},"RunOn":"2019-08-11T05:30:44.7518856Z","RunDurationInMilliseconds":2016}