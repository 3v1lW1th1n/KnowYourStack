{"Data":{"Blog":{"FeedItems":[{"Title":"Podcast: POP! New docs, blogs, customer showcases, and Twitch streams!","PublishedOn":"2019-03-08T17:03:42+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"The Visual Studio Mobile Developer Podcast features Matt Soucoup and James Montemagno discussing the latest and greatest in mobile and cloud development. Podcast Highlights This month&#8217;s Visual...","Href":"https://blog.xamarin.com/podcast-pop-docs-blogs-showcases-twitch/","RawContent":null},{"Title":"Beautiful Material Design for Android & iOS","PublishedOn":"2019-03-07T20:27:10+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"This week, Xamarin.Forms 3.6 shipped with another round of improvements, the most exciting of which is called Visual. Visual enables developers to create beautiful, cross-platform mobile applications...","Href":"https://blog.xamarin.com/beautiful-material-design-android-ios/","RawContent":null},{"Title":"Xamarin.Forms 3.6: Visual Has Materialized","PublishedOn":"2019-03-06T20:12:09+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We’re pleased to announce the release of Xamarin.Forms 3.6 in the usual cadence of our regular releases. In addition to the usual enhancements and bug fixes, we’re also moving our Visual feature from...","Href":"https://blog.xamarin.com/xamarin-forms-3-6-visual-has-materialized/","RawContent":null},{"Title":"Best Practices and Tips for Using Xamarin.UITest","PublishedOn":"2019-03-04T19:35:49+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We can all agree that it is very important for mobile apps to have great user interfaces, be accessible, and be extremely performant. Given the plethora of devices with different screen sizes, screen...","Href":"https://blog.xamarin.com/best-practices-tips-xamarin-uitest/","RawContent":null},{"Title":"Developer Community Events in March","PublishedOn":"2019-03-01T17:59:05+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"User groups are getting together to learn about new, exciting releases and tooling to help jumpstart their next mobile development project. Network with your local community and you too could get all...","Href":"https://blog.xamarin.com/developer-community-events-in-march/","RawContent":null},{"Title":"View PDF Files within Your Xamarin.Forms Apps Using the Syncfusion PDF Viewer","PublishedOn":"2019-02-28T17:04:29+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"This post was guest authored and contributed by Suresh Mohan. Suresh is the Product Manager for PDF Viewer at Syncfusion Software where he specializes in desktop and mobile app development. &#160;...","Href":"https://blog.xamarin.com/xamarin-forms-apps-syncfusion-pdf-viewer/","RawContent":null},{"Title":"Quick Tip: Debugging Local ASP.NET Core Web APIs on Android Emulators","PublishedOn":"2019-02-25T19:36:04+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"When developing mobile applications with a web API backend there is always a need to debug locally on your development machine. If you are using Visual Studio for Mac and debugging iOS applications...","Href":"https://blog.xamarin.com/debug-local-asp-net-core-web-apis-android-emulators/","RawContent":null},{"Title":"Xamarin and Azure Office Hours Recap from December 2018 and January 2019","PublishedOn":"2019-02-21T18:11:51+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"That&#8217;s right, I ❤️ every single one of you(!) and I want to know more about your stories building mobile apps. I want to hear stories of your successes and also, the not-so-successful...","Href":"https://blog.xamarin.com/xamarin-azure-office-hours-recap-december-january/","RawContent":null},{"Title":"Persisting Settings and Preferences in Mobile Apps with Xamarin.Essentials","PublishedOn":"2019-02-19T19:56:32+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"An essential part of any mobile application is the ability to persist data. Sometimes that is a large amount of data that requires a database, but often it is smaller pieces of data such as settings...","Href":"https://blog.xamarin.com/persisting-settings-preferences-mobile-apps-xamarin-essentials/","RawContent":null},{"Title":"Xamarin Developer Blog is Getting an Update!","PublishedOn":"2019-02-15T18:56:04+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"In the coming weeks, the Xamarin Developer Blog will be migrating to a new platform with a modern, clean design and powerful features that will make it easy for you to discover and share great...","Href":"https://blog.xamarin.com/xamarin-developer-blog-is-getting-an-update/","RawContent":null}],"ResultType":"Feed"},"Android":{"Events":[{"Id":"9209147955","Type":"PullRequestEvent","CreatedAt":"2019-03-08T21:20:06","Actor":"jonathanpeppers","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2811","RelatedDescription":"Opened pull request \"[build] use RegisterTaskObject in <GitCommitInfo/>\" (#2811) at xamarin/xamarin-android","RelatedBody":"When building `Xamarin.Android.sln` (even with no changes),\r\n`<GitCommitInfo/>` runs 15 times, which takes about 6 seconds on my\r\nmachine.\r\n\r\nReviewing the input values to `<GitCommitInfo/>`, 2/3 of the calls\r\nseem to be duplicate. This is a classic example where\r\n`RegisterTaskObject` can help.\r\n\r\nI cached the `CommitInfo` output property using the important inputs\r\nas a key to `RegisterTaskObject`:\r\n\r\n* `WorkingDirectory`\r\n* `XASourceDirectory`\r\n* `SubmoduleName`\r\n* `GitRemoteName`\r\n\r\nI used the simple syntax for creating a C# tuple as the lookup key. I\r\nhad to update the TFV of two projects to v4.7 to use the simplified\r\ntuple syntax. I prefer this over `Tuple<string,string,string,string>`.\r\n\r\nThis saves ~4 seconds on incremental builds of `Xamarin.Android.sln`."},{"Id":"9209008055","Type":"PullRequestEvent","CreatedAt":"2019-03-08T20:52:31","Actor":"jonathanpeppers","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2810","RelatedDescription":"Opened pull request \"Revert \"[Xamarin.Android.Build.Tasks] AndroidUseAapt2 defaults to False\" (#2810) at xamarin/xamarin-android","RelatedBody":"This reverts commit 0c7d8fd4425c24bf9d073936d621dd12464ee7a0."},{"Id":"9208938223","Type":"PullRequestEvent","CreatedAt":"2019-03-08T20:38:41","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2798","RelatedDescription":"Merged pull request \"[mono-runtimes] `make` output is of Low importance\" (#2798) at xamarin/xamarin-android","RelatedBody":"Context: https://github.com/xamarin/xamarin-android/pull/2790\r\nContext: https://jenkins.mono-project.com/view/Xamarin.Android/job/xamarin-android-pr-builder-release/1001/\r\n\r\nMono bumps are expected to be time consuming.  They can also be\r\nexpected to produce *lots* of build log output.\r\n\r\nWhat's unexpected is the *vast size* of the build logs: a \"normal\" PR\r\nbuild log is usually ~20-30MB in size.  Add in a complete mono bump,\r\nand the build log becomes 1.4GB.\r\n\r\nTake a page out of commit 987a05fa8: the Console log has \"normal\"\r\nverbosity, and `.binlog` files are produced which contain \"diagnostic\"\r\nlevel output.  Why does the Console log for mono bumps need to be so\r\nginormous?\r\n\r\nThe answer is, they don't.\r\n\r\nUpdate the `<Exec/>` tasks within `mono-runtimes.targets` so that\r\n`StandardOutputImportance=\"Low\"` is specified.  This will *hide*\r\nmono's build messages from the normal Console output, while preserving\r\nthe build logs within the `.binlog` files.\r\n\r\nThis should make the default Console log significantly smaller, which\r\nin turn will allow the Jenkins **Failure Cause Management** scanning\r\nto be effective.  (If the Console log is too large, then the error\r\nindicators that Failure Cause Management aren't actually checked.)\r\n\r\nIf the full mono build log is necessary, it can still be obtained from\r\nthe `.binlog` files within the `xa-build-status*.zip` package."},{"Id":"9208899787","Type":"PullRequestEvent","CreatedAt":"2019-03-08T20:31:19","Actor":"jonathanpeppers","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2809","RelatedDescription":"Opened pull request \"[build] improve XA's build for proguard & r8\" (#2809) at xamarin/xamarin-android","RelatedBody":"If you build `Xamarin.Android.sln`, a lot of stuff happens even if\r\nthere are no changes...\r\n\r\nOur build doesn't follow our own \"MSBuild Best Practices\", and we have\r\na few MSBuild targets that always run.\r\n\r\n## r8.csproj ##\r\n\r\nThe main problem here was that we were invoking `gradlew` every time,\r\nand it takes quite a while to startup when using the `--no-daemon`\r\nswitch.\r\n\r\nI added proper `Inputs` and `Outputs` for the `_BuildR8` MSBuild\r\ntarget, as well as a `<Touch/>` call.\r\n\r\nThese changes saved 6 seconds(!!!) on incremental builds of\r\n`Xamarin.Android.sln`.\r\n\r\n## proguard.csproj ##\r\n\r\nThis project was invoking `<Ant/>` and copying files every time.\r\n\r\nI cleaned this project up a bit by creating an `@(_Outputs)` item\r\ngroup to be used throughout. Adding `Inputs` and `Outputs` to\r\n`_BuildProGuard` and a `<Touch/>` call fixed the incremental build.\r\n\r\nThe `Clean` target was actually broken. Since there is a chain of\r\n`<ProjectReference/>` here, `Xamarin.Android.Tools.BootstrapTasks`\r\ncontaining the `<Ant/>` MSBuild task gets cleaned! Then the actual\r\ncall to `<Ant/>` fails due to the assembly being missing. The fix here\r\nis to just completely replace the `Clean` target with our own, so\r\n`<ProjectReference/>` will not be cleaned. This is the same behavior\r\n`r8.csproj` already had.\r\n\r\nThere was also a general problem with the `CoreCompile` target. I\r\ndon't think it is appropriate to run `<Ant/>` during a design-time\r\nbuild in Visual Studio. I just made this target empty--I think it is\r\nhere to appease OmniSharp.\r\n\r\nThese changes saved ~2 seconds on incremental builds of\r\n`Xamarin.Android.sln`.\r\n\r\nThis brings us to a grand total of ~8 seconds saved."},{"Id":"9208634291","Type":"PullRequestEvent","CreatedAt":"2019-03-08T19:42:37","Actor":"jonathanpeppers","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2808","RelatedDescription":"Opened pull request \"[build] fixes for jit-times.csproj\" (#2808) at xamarin/xamarin-android","RelatedBody":"`jit-times.csproj` had a couple issues that caused it to not build on\r\nWindows:\r\n\r\n* `Configuration.props` was imported *after* the `Debug` configuration\r\n  settings, so `$(XAInstallPrefix)` wasn't declared.\r\n* The reference to `Mono.Options.dll` should actually point to the\r\n  `packages` directory at the root of this repo."},{"Id":"9208554383","Type":"PullRequestEvent","CreatedAt":"2019-03-08T19:28:19","Actor":"grendello","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2807","RelatedDescription":"Opened pull request \"[build] Use system cmake and ninja to build mingw deps and libzip\" (#2807) at xamarin/xamarin-android","RelatedBody":"Commit a014bd30 reverted e84e502e in hope that we will be able to properly\r\nbootstrap from a squeeky clean system, but that hope was failed because I missed\r\nthe fact that `mingw-dependencies` and `libzip` as well as `libzip-windows`\r\nprojects, all built during the `android-toolchain` phase used the `cmake` and\r\n`ninja` programs provided with the Android SDK. Well, that couldn't work :P\r\n\r\nThis commit makes the above projects build with the system `cmake` and `ninja`\r\nbinaries and adds both of them to list of macOS dependencies.\r\n\r\nIf this works fine we will be able to restore e84e502e"},{"Id":"9206984596","Type":"PullRequestEvent","CreatedAt":"2019-03-08T15:12:02","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2801","RelatedDescription":"Merged pull request \"[tools] Add jit-times tool\" (#2801) at xamarin/xamarin-android","RelatedBody":"Original project: https://github.com/radekdoulik/jit-times/\r\n\r\nAlso add jit-times script to ease the use of it"},{"Id":"9206614638","Type":"PullRequestEvent","CreatedAt":"2019-03-08T14:15:08","Actor":"alexischr","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2253","RelatedDescription":"Closed pull request \"Bump to mono:2018-10\" (#2253) at xamarin/xamarin-android","RelatedBody":""},{"Id":"9206315154","Type":"PullRequestEvent","CreatedAt":"2019-03-08T13:24:22","Actor":"jonathanpeppers","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2806","RelatedDescription":"Opened pull request \"[Xamarin.Android.Build.Tasks] fix for \"build-less\" designer (#2803)\" (#2806) at xamarin/xamarin-android","RelatedBody":"Fixes: http://work.devdiv.io/813889\r\n\r\nBackport to `d16-0`:\r\n\r\n* Had to remove the change to `DesignerTests.cs`, since this test\r\n  doesn't exist here.\r\n\r\nIn VS for Mac 2019 Preview, a specific scenario is broken:\r\n\r\n1. Download the repro (the creatively-named, perhaps legendary?\r\n   `App72.sln`)\r\n2. Delete the `bin` and `obj` directories\r\n3. Open a new VS for Mac instance. (`Automatic NuGet restore` should\r\n   be off)\r\n4. Open the solution, wait for any build progress to complete such as\r\n   `Updating resources...`, etc.\r\n5. Restore NuGet packages via `Project->Restore NuGet Packages`\r\n6. Open `MainPage.xaml`: designer displays a gray rectangle that says\r\n   \"AndroidFormsPreviewerRenderer\"\r\n\r\nDoing a full Build solves the problem, but this is the whole point of\r\nthe \"build-less\" designer/previewer feature in Dev16.\r\n\r\nBehind the scenes, the failure is the `SetupDependenciesForDesigner`\r\nMSBuild target. Opening the designer's log file, there are lots and\r\nlots of `javac` errors, such as:\r\n\r\n    ERROR: :   :  error: cannot find symbol\r\n        public Toolbar_NavigationOnClickEventDispatcher (android.support.v7.widget.Toolbar p0)\r\n    symbol:   class Toolbar\r\n    location: package android.support.v7.widget\r\n\r\nDoing more digging, I was able to reproduce the problem with a bash\r\nscript:\r\n\r\n    PROJ='App72/App72.Android/App72.Android.csproj'\r\n    SLN='App72.sln'\r\n    MSBUILD_ARGS='/nologo /v:quiet /p:DesignTimeBuild=True /p:BuildingInsideVisualStudio=True'\r\n    DESIGNER_ARGS='/p:AndroidUseManagedDesignTimeResourceGenerator=False'\r\n    MSBUILD=msbuild\r\n\r\n    # If you have a local xamarin-android build\r\n    MSBUILD=\"$HOME/Desktop/Git/xamarin-android/bin/Debug/bin/xabuild\"\r\n\r\n    rm logs.zip *.binlog\r\n    rm -r App72/App72.Android/obj App72/App72.Android/bin\r\n\r\n    $MSBUILD $PROJ $MSBUILD_ARGS \\\r\n        /t:UpdateAndroidResources /bl:dtb1.binlog\r\n\r\n    $MSBUILD $SLN $MSBUILD_ARGS /t:Restore /bl:restore.binlog\r\n\r\n    $MSBUILD $PROJ $MSBUILD_ARGS $DESIGNER_ARGS \\\r\n        /t:SetupDependenciesForDesigner /bl:designer2.binlog\r\n\r\n    zip logs.zip *.binlog\r\n\r\nAt this point, I could also reproduce the problem with\r\nxamarin-android/master. So, this is a not something we've fixed in\r\nmaster.\r\n\r\nNow... We have `DesignerTests.DesignerBeforeNuGetRestore` which does\r\nalmost *exactly* what this script is doing!\r\n\r\nBut then I tried splitting apart the NuGet restore, to more closely\r\nmatch the script. When calling `/t:Restore` in a separate MSBuild\r\ncall, the existing test we have failed in the exact same way as the\r\nscript: many `javac` errors.\r\n\r\nI reviewed the `binlog` file, looking for any interesting MSBuild\r\ntargets that were skipped:\r\n\r\n    Skipping target \"_BuildLibraryImportsCache\" because all output files are up-to-date with respect to the input files.\r\n\r\nGoing back through @alanmcgovern's notes, he could resolve the problem\r\nby deleting this file:\r\n\r\n    obj/Debug/designtime/libraryimports.cache.stamp\r\n\r\nBut then reviewing, the `Inputs` for `_BuildLibraryImportsCache`, they\r\ndidn't seem to be correct?\r\n\r\n    <Target Name=\"_BuildLibraryImportsCache\"\r\n        Inputs=\"$(MSBuildProjectFullPath);@(ReferencePath);@(ReferenceDependencyPaths);$(_AndroidBuildPropertiesCache)\"\r\n        Outputs=\"$(_AndroidLibraryImportsCache).stamp\">\r\n      <GetImportedLibraries ... CacheFile=\"$(_AndroidLibraryImportsCache)\" />\r\n      <Touch Files=\"$(_AndroidLibraryImportsCache).stamp\" AlwaysCreate=\"True\" />\r\n\r\nIf `<GetImportedLibraries/>` operates on\r\n`$(_AndroidLibraryProjectImportsCache)`, shouldn't it be an `Input`?\r\n\r\nSure enough, adding one more input solved the problem.\r\n\r\nI looked through our git history, and these `Inputs` have been this\r\nway at least since 2016. So this bug has just been here a while?"},{"Id":"9205780615","Type":"PullRequestEvent","CreatedAt":"2019-03-08T11:38:00","Actor":"dellis1972","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2803","RelatedDescription":"Merged pull request \"[Xamarin.Android.Build.Tasks] fix for \"build-less\" designer\" (#2803) at xamarin/xamarin-android","RelatedBody":"Fixes: http://work.devdiv.io/813889\r\n\r\nIn VS for Mac 2019 Preview, a specific scenario is broken:\r\n\r\n1. Download the repro (the creatively-named, perhaps legendary?\r\n   `App72.sln`)\r\n2. Delete the `bin` and `obj` directories\r\n3. Open a new VS for Mac instance. (`Automatic NuGet restore` should\r\n   be off)\r\n4. Open the solution, wait for any build progress to complete such as\r\n   `Updating resources...`, etc.\r\n5. Restore NuGet packages via `Project->Restore NuGet Packages`\r\n6. Open `MainPage.xaml`: designer displays a gray rectangle that says\r\n   \"AndroidFormsPreviewerRenderer\"\r\n\r\nDoing a full Build solves the problem, but this is the whole point of\r\nthe \"build-less\" designer/previewer feature in Dev16.\r\n\r\nBehind the scenes, the failure is the `SetupDependenciesForDesigner`\r\nMSBuild target. Opening the designer's log file, there are lots and\r\nlots of `javac` errors, such as:\r\n\r\n    ERROR: :   :  error: cannot find symbol\r\n        public Toolbar_NavigationOnClickEventDispatcher (android.support.v7.widget.Toolbar p0)\r\n    symbol:   class Toolbar\r\n    location: package android.support.v7.widget\r\n\r\nDoing more digging, I was able to reproduce the problem with a bash\r\nscript:\r\n\r\n    PROJ='App72/App72.Android/App72.Android.csproj'\r\n    SLN='App72.sln'\r\n    MSBUILD_ARGS='/nologo /v:quiet /p:DesignTimeBuild=True /p:BuildingInsideVisualStudio=True'\r\n    DESIGNER_ARGS='/p:AndroidUseManagedDesignTimeResourceGenerator=False'\r\n    MSBUILD=msbuild\r\n\r\n    # If you have a local xamarin-android build\r\n    MSBUILD=\"$HOME/Desktop/Git/xamarin-android/bin/Debug/bin/xabuild\"\r\n\r\n    rm logs.zip *.binlog\r\n    rm -r App72/App72.Android/obj App72/App72.Android/bin\r\n\r\n    $MSBUILD $PROJ $MSBUILD_ARGS \\\r\n        /t:UpdateAndroidResources /bl:dtb1.binlog\r\n\r\n    $MSBUILD $SLN $MSBUILD_ARGS /t:Restore /bl:restore.binlog\r\n\r\n    $MSBUILD $PROJ $MSBUILD_ARGS $DESIGNER_ARGS \\\r\n        /t:SetupDependenciesForDesigner /bl:designer2.binlog\r\n\r\n    zip logs.zip *.binlog\r\n\r\nAt this point, I could also reproduce the problem with\r\nxamarin-android/master. So, this is a not something we've fixed in\r\nmaster.\r\n\r\nNow... We have `DesignerTests.DesignerBeforeNuGetRestore` which does\r\nalmost *exactly* what this script is doing!\r\n\r\nBut then I tried splitting apart the NuGet restore, to more closely\r\nmatch the script. When calling `/t:Restore` in a separate MSBuild\r\ncall, the existing test we have failed in the exact same way as the\r\nscript: many `javac` errors.\r\n\r\nI reviewed the `binlog` file, looking for any interesting MSBuild\r\ntargets that were skipped:\r\n\r\n    Skipping target \"_BuildLibraryImportsCache\" because all output files are up-to-date with respect to the input files.\r\n\r\nGoing back through @alanmcgovern's notes, he could resolve the problem\r\nby deleting this file:\r\n\r\n    obj/Debug/designtime/libraryimports.cache.stamp\r\n\r\nBut then reviewing, the `Inputs` for `_BuildLibraryImportsCache`, they\r\ndidn't seem to be correct?\r\n\r\n    <Target Name=\"_BuildLibraryImportsCache\"\r\n        Inputs=\"$(MSBuildProjectFullPath);@(ReferencePath);@(ReferenceDependencyPaths);$(_AndroidBuildPropertiesCache)\"\r\n        Outputs=\"$(_AndroidLibraryImportsCache).stamp\">\r\n      <GetImportedLibraries ... CacheFile=\"$(_AndroidLibraryImportsCache)\" />\r\n      <Touch Files=\"$(_AndroidLibraryImportsCache).stamp\" AlwaysCreate=\"True\" />\r\n\r\nIf `<GetImportedLibraries/>` operates on\r\n`$(_AndroidLibraryProjectImportsCache)`, shouldn't it be an `Input`?\r\n\r\nSure enough, adding one more input solved the problem.\r\n\r\nI looked through our git history, and these `Inputs` have been this\r\nway at least since 2016. So this bug has just been here a while?"},{"Id":"9205399658","Type":"IssuesEvent","CreatedAt":"2019-03-08T10:27:45","Actor":"jamesmcroft","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/2805","RelatedDescription":"Opened issue \"Uploading a large media file with AndroidClientHandler throws an out of memory exception when 'Transfer-Encoding: chunked' header is set\" (#2805) at xamarin/xamarin-android","RelatedBody":"### Steps to Reproduce\r\n\r\nOn a low-end device with ~1 or 2 GB of RAM.\r\n\r\n1. Upload a 500MB file to a server using HttpClient and the custom AndroidHttpClientHandler with Transfer-Encoding: chunked set in the header of the request.\r\n2. Sometimes a OutOfMemoryError exception will be thrown explaining that there wasn't enough resource to allocate which then crashes the app.\r\n\r\n#### Code example\r\n```csharp\r\nStream fileStream = await storageFile.OpenReadAsync();\r\nMediaUploadContent streamContent = new MediaUploadContent(fileStream); // A custom StreamContent for reporting upload progress.\r\nstreamContent.Progress += this.OnUploadProgress;\r\n\r\nform.Add(streamContent, \"File\", this._mediaEntry.Name);\r\n\r\nHttpRequestMessage request =\r\n    new HttpRequestMessage { RequestUri = fullUri, Method = HttpMethod.Post, Content = form };\r\n\r\nrequest.Headers.TransferEncodingChunked = true;\r\n\r\nthis.SetCustomHeadersAsync(request); // Sets any additional headers required by the system\r\nif (!string.IsNullOrWhiteSpace(this.json))\r\n{\r\n    request.Headers.Add(\"Metadata\", this.json);\r\n}\r\n\r\ntry\r\n{\r\n    HttpResponseMessage response = cts != null\r\n        ? await httpClient.SendAsync(\r\n            request,\r\n            HttpCompletionOption.ResponseHeadersRead,\r\n            cts.Token)\r\n        : await httpClient.SendAsync(\r\n            request,\r\n            HttpCompletionOption.ResponseHeadersRead);\r\n\r\n    CheckForCustomError(response);\r\n\r\n    response.EnsureSuccessStatusCode();\r\n}\r\nfinally\r\n{\r\n    this.CompleteMediaResponse(); // Calls back to the relevant listeners to finalize media upload.\r\n}\r\n```\r\n\r\nWhen I looked into implementing chunking in Android network requests, I started poking around in the AndroidClientHandler and noticed that the configuration for chunking is in there but doesn't appear to be configured correctly as the out of memory exception should not have occurred with the chunking size set at [line 990](https://github.com/xamarin/xamarin-android/blob/9bd0650519635091fb6da754cdb3ae068dd5aeb0/src/Mono.Android/Xamarin.Android.Net/AndroidClientHandler.cs#L990) using the default (0).\r\n\r\nPotentially a side issue, but I also noted that there isn't a way currently with this handler or as part of the request to set a custom chunking size.\r\n\r\n### Expected Behavior\r\n\r\n- When uploading a file with chunking, it should not throw an out of memory exception.\r\n\r\n### Actual Behavior\r\n\r\n- The file should upload chunked, and support a custom chunking size\r\n\r\n### Version Information\r\n\r\n<!--\r\n1. On macOS and within Visual Studio, select Visual Studio > About Visual Studio, then click the Show Details button, then click the Copy Information button.\r\n\r\n2. Paste below this comment block.\r\n-->\r\n\r\nMicrosoft Visual Studio Enterprise 2017 \r\nVersion 15.9.8\r\nVisualStudio.15.Release/15.9.8+28307.481\r\nMicrosoft .NET Framework\r\nVersion 4.8.03749\r\n\r\nInstalled Version: Enterprise\r\n\r\nVisual C++ 2017   00369-60000-00001-AA427\r\nMicrosoft Visual C++ 2017\r\n\r\nADL Tools Service Provider   1.0\r\nThis package contains services used by Data Lake tools\r\n\r\nApplication Insights Tools for Visual Studio Package   8.14.20131.1\r\nApplication Insights Tools for Visual Studio\r\n\r\nASP.NET and Web Tools 2017   15.9.04012.0\r\nASP.NET and Web Tools 2017\r\n\r\nASP.NET Core Razor Language Services   15.8.31590\r\nProvides languages services for ASP.NET Core Razor.\r\n\r\nASP.NET Web Frameworks and Tools 2017   5.2.60913.0\r\nFor additional information, visit https://www.asp.net/\r\n\r\nAzure App Service Tools v3.0.0   15.9.03024.0\r\nAzure App Service Tools v3.0.0\r\n\r\nAzure Data Lake Node   1.0\r\nThis package contains the Data Lake integration nodes for Server Explorer.\r\n\r\nAzure Data Lake Tools for Visual Studio   2.3.7000.1\r\nMicrosoft Azure Data Lake Tools for Visual Studio\r\n\r\nAzure Functions and Web Jobs Tools   15.9.02046.0\r\nAzure Functions and Web Jobs Tools\r\n\r\nAzure Stream Analytics Tools for Visual Studio   2.3.7000.1\r\nMicrosoft Azure Stream Analytics Tools for Visual Studio\r\n\r\nC# Tools   2.10.0-beta2-63501-03+b9fb1610c87cccc8ceb74a770dba261a58e39c4a\r\nC# components used in the IDE. Depending on your project type and settings, a different version of the compiler may be used.\r\n\r\nCommon Azure Tools   1.10\r\nProvides common services for use by Azure Mobile Services and Microsoft Azure Tools.\r\n\r\nExtensibility Message Bus   1.1.49 (remotes/origin/d15-8@ee674f3)\r\nProvides common messaging-based MEF services for loosely coupled Visual Studio extension components communication and integration.\r\n\r\nFabric.DiagnosticEvents   1.0\r\nFabric Diagnostic Events\r\n\r\nGitHub.VisualStudio   2.8.0.6968\r\nA Visual Studio Extension that brings the GitHub Flow into Visual Studio.\r\n\r\nJavaScript Language Service   2.0\r\nJavaScript Language Service\r\n\r\nJavaScript Project System   2.0\r\nJavaScript Project System\r\n\r\nJavaScript UWP Project System   2.0\r\nJavaScript UWP Project System\r\n\r\nJetBrains ReSharper Ultimate 2018.3.3   Build 183.0.20190208.91313\r\nJetBrains ReSharper Ultimate package for Microsoft Visual Studio. For more information about ReSharper Ultimate, visit http://www.jetbrains.com/resharper. Copyright © 2019 JetBrains, Inc.\r\n\r\nMicrosoft Azure HDInsight Azure Node   2.3.7000.1\r\nHDInsight Node under Azure Node\r\n\r\nMicrosoft Azure Hive Query Language Service   2.3.7000.1\r\nLanguage service for Hive query\r\n\r\nMicrosoft Azure Service Fabric Tools for Visual Studio   2.4\r\nMicrosoft Azure Service Fabric Tools for Visual Studio\r\n\r\nMicrosoft Azure Stream Analytics Language Service   2.3.7000.1\r\nLanguage service for Azure Stream Analytics\r\n\r\nMicrosoft Azure Stream Analytics Node   1.0\r\nAzure Stream Analytics Node under Azure Node\r\n\r\nMicrosoft Azure Tools   2.9\r\nMicrosoft Azure Tools for Microsoft Visual Studio 2017 - v2.9.0.0\r\n\r\nMicrosoft Continuous Delivery Tools for Visual Studio   0.4\r\nSimplifying the configuration of Azure DevOps pipelines from within the Visual Studio IDE.\r\n\r\nMicrosoft JVM Debugger   1.0\r\nProvides support for connecting the Visual Studio debugger to JDWP compatible Java Virtual Machines\r\n\r\nMicrosoft Library Manager   1.0\r\nInstall client-side libraries easily to any web project\r\n\r\nMicrosoft MI-Based Debugger   1.0\r\nProvides support for connecting Visual Studio to MI compatible debuggers\r\n\r\nMicrosoft Visual C++ Wizards   1.0\r\nMicrosoft Visual C++ Wizards\r\n\r\nMicrosoft Visual Studio Tools for Containers   1.1\r\nDevelop, run, validate your ASP.NET Core applications in the target environment. F5 your application directly into a container with debugging, or CTRL + F5 to edit & refresh your app without having to rebuild the container.\r\n\r\nMicrosoft Visual Studio VC Package   1.0\r\nMicrosoft Visual Studio VC Package\r\n\r\nMLGen Package Extension   1.0\r\nMLGen Package Visual Studio Extension Detailed Info\r\n\r\nMono Debugging for Visual Studio   4.13.12-pre (9bc9548)\r\nSupport for debugging Mono processes with Visual Studio.\r\n\r\nNuGet Package Manager   4.6.0\r\nNuGet Package Manager in Visual Studio. For more information about NuGet, visit http://docs.nuget.org/.\r\n\r\nOffice Developer Tools for Visual Studio 2017 ENU   15.0.28224.00\r\nMicrosoft Office Developer Tools for Visual Studio 2017 ENU\r\n\r\nProjectServicesPackage Extension   1.0\r\nProjectServicesPackage Visual Studio Extension Detailed Info\r\n\r\nResourcePackage Extension   1.0\r\nResourcePackage Visual Studio Extension Detailed Info\r\n\r\nResourcePackage Extension   1.0\r\nResourcePackage Visual Studio Extension Detailed Info\r\n\r\nSnapshot Debugging Extension   1.0\r\nSnapshot Debugging Visual Studio Extension Detailed Info\r\n\r\nSQL Server Data Tools   15.1.61902.21100\r\nMicrosoft SQL Server Data Tools\r\n\r\nStylerPackage Extension   1.0\r\nStylerPackage Visual Stuido Extension Detailed Info\r\n\r\nSyntax Visualizer   1.0\r\nAn extension for visualizing Roslyn SyntaxTrees.\r\n\r\nToolWindowHostedEditor   1.0\r\nHosting json editor into a tool window\r\n\r\nTypeScript Tools   15.9.20918.2001\r\nTypeScript Tools for Microsoft Visual Studio\r\n\r\nVisual Basic Tools   2.10.0-beta2-63501-03+b9fb1610c87cccc8ceb74a770dba261a58e39c4a\r\nVisual Basic components used in the IDE. Depending on your project type and settings, a different version of the compiler may be used.\r\n\r\nVisual F# Tools 10.2 for F# 4.5   15.8.0.0.  Commit Hash: 6e26c5bacc8c4201e962f5bdde0a177f82f88691.\r\nMicrosoft Visual F# Tools 10.2 for F# 4.5\r\n\r\nVisual Studio Code Debug Adapter Host Package   1.0\r\nInterop layer for hosting Visual Studio Code debug adapters in Visual Studio\r\n\r\nVisual Studio Tools for Containers   1.0\r\nVisual Studio Tools for Containers\r\n\r\nVisual Studio Tools for Unity   3.9.0.3\r\nVisual Studio Tools for Unity\r\n\r\nVisual Studio Tools for Universal Windows Apps   15.0.28307.421\r\nThe Visual Studio Tools for Universal Windows apps allow you to build a single universal app experience that can reach every device running Windows 10: phone, tablet, PC, and more. It includes the Microsoft Windows 10 Software Development Kit.\r\n\r\nVisualStudio.Mac   1.0\r\nMac Extension for Visual Studio\r\n\r\nWorkflow Manager Tools 1.0   1.0\r\nThis package contains the necessary Visual Studio integration components for Workflow Manager.\r\n\r\nXamarin   4.12.3.80 (d15-9@914127c74)\r\nVisual Studio extension to enable development for Xamarin.iOS and Xamarin.Android.\r\n\r\nXamarin Designer   4.16.13 (45a16efd4)\r\nVisual Studio extension to enable Xamarin Designer tools in Visual Studio.\r\n\r\nXamarin Templates   1.1.128 (6f5ebb2)\r\nTemplates for building iOS, Android, and Windows apps with Xamarin and Xamarin.Forms.\r\n\r\nXamarin.Android SDK   9.1.7.0 (HEAD/ba9da7a76)\r\nXamarin.Android Reference Assemblies and MSBuild support.\r\n\r\nXamarin.iOS and Xamarin.Mac SDK   12.2.1.15 (d60abd1)\r\nXamarin.iOS and Xamarin.Mac Reference Assemblies and MSBuild support."}],"ResultType":"GitHubEvent"},"Forms":{"Events":[{"Id":"9209893857","Type":"PullRequestEvent","CreatedAt":"2019-03-09T00:19:33","Actor":"PureWeen","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/5235","RelatedDescription":"Closed pull request \"[UWP] improve performance\" (#5235) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\n\r\nImprove performance.\r\n\r\n### Issues Resolved ### \r\n\r\nnone\r\n\r\n### API Changes ###\r\n\r\nChanged:\r\n```C# \r\npublic interface IElementConfiguration<out TElement>\r\n```\r\nto\r\n```C#\r\npublic interface IElementConfiguration<TElement>\r\n```\r\n\r\n### Platforms Affected ### \r\n\r\n- Core (all platforms)\r\n- UWP\r\n\r\n### Behavioral/Visual Changes ###\r\n\r\nNone\r\n\r\n### Before/After Screenshots ### \r\n<!-- If possible, take a screenshot of your test case before these changes were made and another screenshot after the changes were made to show possible visual changes. -->\r\n\r\nNot applicable\r\n\r\n### Testing Procedure ###\r\n\r\n- run any UItest\r\n\r\n### PR Checklist ###\r\n\r\n- [ ] Has automated tests <!-- (if tests are omitted or manual, state reason in description) -->\r\n- [ ] Rebased on top of the target branch at time of PR\r\n- [ ] Changes adhere to coding standard\r\n"},{"Id":"9208772156","Type":"IssuesEvent","CreatedAt":"2019-03-08T20:07:06","Actor":"kingces95","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/5498","RelatedDescription":"Closed issue \"Maps Binding - Possible typo in the bindable property\" (#5498) at xamarin/Xamarin.Forms","RelatedBody":"I was looking to see how the template binding was done in #4269  and noticed this line of code :\r\n\r\nhttps://github.com/xamarin/Xamarin.Forms/blob/138791927206ef6c2f64243f8b991ee768ef4193/Xamarin.Forms.Maps/Map.cs#L21\r\n\r\nShould this not have been nameof(ItemsSource):\r\n\r\n`\t\tpublic static readonly BindableProperty ItemsSourceProperty = BindableProperty.Create(nameof(ItemsSource), typeof(IEnumerable), typeof(Map), default(IEnumerable),`\r\n\r\n\r\n"}],"ResultType":"GitHubEvent"},"Macios":{"Events":[{"Id":"9208233200","Type":"PullRequestEvent","CreatedAt":"2019-03-08T18:31:54","Actor":"rolfbjarne","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/5746","RelatedDescription":"Merged pull request \"[xharness] Simplify/unify the code to load simulators/devices.\" (#5746) at xamarin/xamarin-macios","RelatedBody":""},{"Id":"9208229044","Type":"PullRequestEvent","CreatedAt":"2019-03-08T18:31:11","Actor":"rolfbjarne","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/5745","RelatedDescription":"Merged pull request \"[tests] Check all architectures when verifying public symbols.\" (#5745) at xamarin/xamarin-macios","RelatedBody":"Otherwise we'd only check x86_64 (the executing architecture) if the Mach-O\nfile had that architecture.\n\nThis also means updating the whitelisted symbols."},{"Id":"9208210493","Type":"PullRequestEvent","CreatedAt":"2019-03-08T18:27:54","Actor":"rolfbjarne","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/5744","RelatedDescription":"Merged pull request \"[tests] Don't run BitcodeNotSupported tests on watchOS.\" (#5744) at xamarin/xamarin-macios","RelatedBody":"Ref: https://github.com/mono/mono/pull/13007"},{"Id":"9207500190","Type":"PullRequestEvent","CreatedAt":"2019-03-08T16:28:05","Actor":"mandel-macaque","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/5751","RelatedDescription":"Opened pull request \"[XHarness] Reneable System.Security nunit tests on mac os x.\" (#5751) at xamarin/xamarin-macios","RelatedBody":"Fixes  https://github.com/xamarin/maccore/issues/1197"},{"Id":"9207490189","Type":"PullRequestEvent","CreatedAt":"2019-03-08T16:26:36","Actor":"mandel-macaque","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/5750","RelatedDescription":"Opened pull request \"[XHarness] Don't run BitcodeNotSupported BCL tests on watchOS.\" (#5750) at xamarin/xamarin-macios","RelatedBody":"Similar to PR https://github.com/xamarin/xamarin-macios/pull/5744"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1103762250509283332","CreatedAt":"2019-03-07T21:00:02+00:00","UserScreenname":"xamarinhq","Text":"Introducing Material Design; a suite of cross-platform components in the #Xamarin.Forms 3.6 Visual feature that boo… https://t.co/gin9lpb0eQ","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":126,"FavoriteCount":63,"RawContent":null},{"Id":"1103750171215699968","CreatedAt":"2019-03-07T20:12:02+00:00","UserScreenname":"xamarinhq","Text":"Level up your mobile development skills at #MSBuild, May 6-8, 2019 in Seattle. Registration is now open!… https://t.co/EZNWhIn3p6","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":36,"FavoriteCount":8,"RawContent":null},{"Id":"1103709031066189825","CreatedAt":"2019-03-07T17:28:33+00:00","UserScreenname":"xamarinhq","Text":"Happening right now! Join the Mobile #dotNET Teams for our community stand-up covering great community contribution… https://t.co/9HUp86ZqBU","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":29,"FavoriteCount":14,"RawContent":null},{"Id":"1103701857682231296","CreatedAt":"2019-03-07T17:00:03+00:00","UserScreenname":"xamarinhq","Text":"On this week's Essential API of the week we take a look at Accelerometer, which enables you monitor the device's ac… https://t.co/UxhHHar5zN","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":53,"FavoriteCount":16,"RawContent":null},{"Id":"1103399934966067200","CreatedAt":"2019-03-06T21:00:19+00:00","UserScreenname":"xamarinhq","Text":"Announcing Xamarin.Forms 3.6:\n- we've made enhancements, cleaned up some bugs, AND, we've moved our Visual feature… https://t.co/fG4RqX25PH","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":251,"FavoriteCount":124,"RawContent":null},{"Id":"1102666586194931713","CreatedAt":"2019-03-04T20:26:15+00:00","UserScreenname":"xamarinhq","Text":"Sweeky Satpathy (from the Mobile Customer Advisory Team) shares some best practices &amp; tips/tricks the team uses to… https://t.co/GSrw6zLTHZ","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":59,"FavoriteCount":18,"RawContent":null},{"Id":"1101572485114462220","CreatedAt":"2019-03-01T19:58:41+00:00","UserScreenname":"xamarinhq","Text":"Developer Community User Groups are gathering to learn about new, exciting releases and tooling to help jumpstart t… https://t.co/GgCWj5LttS","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":47,"FavoriteCount":21,"RawContent":null},{"Id":"1101202237752258564","CreatedAt":"2019-02-28T19:27:27+00:00","UserScreenname":"xamarinhq","Text":"Want to display PDF docs w/i your #Xamarin apps? Now you can. Learn to view PDF files within your Xamarin.Forms app… https://t.co/GjuKzrvNYM","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":98,"FavoriteCount":30,"RawContent":null},{"Id":"1100455963361005570","CreatedAt":"2019-02-26T18:02:01+00:00","UserScreenname":"xamarinhq","Text":"In this episode of the #dotNETCore podcast, @jimbobbennett talks #Xamarin &amp; .NET Standard. Listen in or read the tr… https://t.co/VDFrb1excV","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":39,"FavoriteCount":14,"RawContent":null},{"Id":"1100149148282769409","CreatedAt":"2019-02-25T21:42:51+00:00","UserScreenname":"xamarinhq","Text":"Android emulators have their own networking config but now you can debug #Android apps locally regardless of whethe… https://t.co/Hbsm6gbXft","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":71,"FavoriteCount":31,"RawContent":null},{"Id":"1098996242238111745","CreatedAt":"2019-02-22T17:21:37+00:00","UserScreenname":"xamarinhq","Text":"This week on the #XamarinShow, @DavidOrtinau gives us all the reasons and features to &lt;3 in Xamarin.Forms 3.5. This… https://t.co/pVcHVX6LYJ","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":56,"FavoriteCount":27,"RawContent":null},{"Id":"1097993381496700935","CreatedAt":"2019-02-19T22:56:36+00:00","UserScreenname":"xamarinhq","Text":"With only a few lines of code, today's #Xamarin.Essentials API of the week helps you persist settings and preferenc… https://t.co/izkl5pGL6m","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":49,"FavoriteCount":21,"RawContent":null},{"Id":"1097939132532310018","CreatedAt":"2019-02-19T19:21:02+00:00","UserScreenname":"xamarinhq","Text":"On this week's #XamarinShow Essential API of the week, we take a look at Secure Storage, which enables you to easil… https://t.co/OwQSZ1QRlI","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":46,"FavoriteCount":26,"RawContent":null},{"Id":"1097603017375993857","CreatedAt":"2019-02-18T21:05:26+00:00","UserScreenname":"xamarinhq","Text":"Xamarin.Forms 101: Command Parameters: https://t.co/rwzzq9yQib\n\n.@JamesMontemagno takes us through a new mini-serie… https://t.co/ZFInvKFhSL","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":110,"FavoriteCount":48,"RawContent":null},{"Id":"1096561048562384898","CreatedAt":"2019-02-16T00:05:01+00:00","UserScreenname":"xamarinhq","Text":"The #Xamarin Developer Blog is migrating to a new platform with a modern, clean design and powerful features that m… https://t.co/nJUxXItfe8","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":98,"FavoriteCount":35,"RawContent":null},{"Id":"1095804816121581570","CreatedAt":"2019-02-13T22:00:01+00:00","UserScreenname":"xamarinhq","Text":"The #VisualStudio Mobile Dev Podcast is out. In this episode, @CodeMillMatt &amp; @JamesMontemagno discuss the latest &amp;… https://t.co/SPEvfxFuLn","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":55,"FavoriteCount":14,"RawContent":null},{"Id":"1095445655076700162","CreatedAt":"2019-02-12T22:12:51+00:00","UserScreenname":"xamarinhq","Text":"To provide the best user experience we need access to the current network state of our users’ devices.\n\n...new from… https://t.co/w2ZGMgKqli","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":43,"FavoriteCount":25,"RawContent":null},{"Id":"1093221405917937670","CreatedAt":"2019-02-06T18:54:28+00:00","UserScreenname":"xamarinhq","Text":"Every month we survey &amp; interview our Xamarin devs, listening to your firsthand stories. Why? To make #Xamarin bett… https://t.co/Gwc32YD8qG","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":94,"FavoriteCount":42,"RawContent":null},{"Id":"1093196382901547008","CreatedAt":"2019-02-06T17:15:02+00:00","UserScreenname":"xamarinhq","Text":"On a recent #XamarinShow, Mike Parker from the Microsoft Mobile Customer Advisory Team that shows us how to easily… https://t.co/jdjf2oZXwI","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":50,"FavoriteCount":18,"RawContent":null}]}},"RunOn":"2019-03-09T05:30:50.4313016Z","RunDurationInMilliseconds":2580}