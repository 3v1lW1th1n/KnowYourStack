{"Data":{"Blog":{"FeedItems":[{"Title":"Xamarin Podcast: Visual Studio 2019 is released!","PublishedOn":"2019-04-12T17:14:51+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"The Xamarin Podcast features Matt Soucoup and James Montemagno discussing the latest and greatest in Xamarin and cloud development.\n\nPodcast Highlights\nVisual Studio 2019 has been released and is...","Href":"https://devblogs.microsoft.com/xamarin/xamarin-podcast-visual-studio-2019-is-released/","RawContent":null},{"Title":"Sharing Files & Email Attachments with Xamarin.Essentials Preview Features","PublishedOn":"2019-04-10T19:15:56+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"In the recent release of Xamarin.Essentials (1.1.0), we introduced several new stable features including detect shake, browser customization, and a plethora of platform helpers. The team has also been...","Href":"https://devblogs.microsoft.com/xamarin/sharing-files-attachments-xamarin-essentials/","RawContent":null},{"Title":"Getting Started With WorkManager","PublishedOn":"2019-04-08T18:12:29+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"If you need to schedule a background task on Android, you&#8217;re probably familiar with all of the various ways to accomplish this such as:\n\nGoogle Cloud Messaging\nFirebase Cloud...","Href":"https://devblogs.microsoft.com/xamarin/getting-started-workmanager/","RawContent":null},{"Title":"Visual Challenge Conquered!","PublishedOn":"2019-04-03T19:03:49+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"The post Visual Challenge Conquered! appeared first on Xamarin Blog.","Href":"https://devblogs.microsoft.com/xamarin/visual-challenge-conquered/","RawContent":null},{"Title":"What’s New for Xamarin Developers in Visual Studio 2019","PublishedOn":"2019-04-02T19:56:18+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"The post What&#8217;s New for Xamarin Developers in Visual Studio 2019 appeared first on Xamarin Blog.","Href":"https://devblogs.microsoft.com/xamarin/xamarin-visual-studio-2019/","RawContent":null},{"Title":"Xamarin and .NET Developer Events in April","PublishedOn":"2019-04-01T19:05:22+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"The post Xamarin and .NET Developer Events in April appeared first on Xamarin Blog.","Href":"https://devblogs.microsoft.com/xamarin/xamarin-and-net-developer-events-in-april/","RawContent":null},{"Title":"GlideX For Fast Images on Android","PublishedOn":"2019-03-28T16:01:13+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"The post GlideX For Fast Images on Android appeared first on Xamarin Blog.","Href":"https://devblogs.microsoft.com/xamarin/glidex-fast-images-android/","RawContent":null},{"Title":"Introducing the Xamarin.iOS Interpreter","PublishedOn":"2019-03-26T16:41:43+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"The post Introducing the Xamarin.iOS Interpreter appeared first on Xamarin Blog.","Href":"https://devblogs.microsoft.com/xamarin/introducing-xamarin-ios-interpreter/","RawContent":null},{"Title":"Join the Xamarin Visual Challenge","PublishedOn":"2019-03-22T20:00:01+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"For the past month, we have been running a low-key challenge to flex the new Xamarin.Forms 3.6 feature, Visual with Material Design. For more information about what Visual is and what you can do with...","Href":"https://devblogs.microsoft.com/xamarin/join-the-xamarin-visual-challenge/","RawContent":null},{"Title":"Get Your Apps Ready for Apple’s New Watch Processor Architecture","PublishedOn":"2019-03-20T19:59:52+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"The post Get Your Apps Ready for Apple&#8217;s New Watch Processor Architecture appeared first on Xamarin Blog.","Href":"https://devblogs.microsoft.com/xamarin/apple-new-processor-architecture/","RawContent":null}],"ResultType":"Feed"},"Android":{"Events":[{"Id":"9434974086","Type":"PullRequestEvent","CreatedAt":"2019-04-12T20:47:46","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2977","RelatedDescription":"Merged pull request \"[android-toolchain] update to 28.0.2 platform-tools\" (#2977) at xamarin/xamarin-android","RelatedBody":"Context: https://jenkins.mono-project.com/view/Xamarin.Android/job/xamarin-android/451/testReport/junit/Mono/Android_TestsMultiDex/Possible_Crash___Release/\r\nContext: https://developer.android.com/studio/releases/platform-tools\r\n\r\nWe have been seeing `adb` crash during our APK tests:\r\n\r\n    Task \"RunInstrumentationTests\" (TaskId:274)\r\n    ...\r\n    Executing: /Users/builder/android-toolchain/sdk/platform-tools/adb -s emulator-5570  logcat -v threadtime -d (TaskId:274)\r\n        appending stdout to file: /Users/builder/jenkins/workspace/xamarin-android/xamarin-android/build-tools/scripts/../../bin/TestRelease/logcat-Release-Bundle-Mono.Android_TestsMultiDex.txt (TaskId:274)\r\n    /Users/builder/jenkins/workspace/xamarin-android/xamarin-android/build-tools/scripts/TestApks.targets(226,5): warning : * daemon not running; starting now at tcp:5037 [/Users/builder/jenkins/workspace/xamarin-android/xamarin-android/tests/RunApkTests.targets]\r\n    /Users/builder/jenkins/workspace/xamarin-android/xamarin-android/build-tools/scripts/TestApks.targets(226,5): warning : * daemon started successfully [/Users/builder/jenkins/workspace/xamarin-android/xamarin-android/tests/RunApkTests.targets]\r\n    ...\r\n\r\nThis log message is starting the `adb` daemon when it *should* have\r\nalready been running.\r\n\r\nLooking at the release notes for `platform-tools`, there is some\r\nmention of fixes for `adb` for 28.0.1 and 28.0.2.\r\n\r\nLet's update `platform-tools` and see if this problem gets any better."},{"Id":"9434679402","Type":"PullRequestEvent","CreatedAt":"2019-04-12T19:55:46","Actor":"grendello","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2978","RelatedDescription":"Opened pull request \"Pass `--debug` to Mono when running tests etc\" (#2978) at xamarin/xamarin-android","RelatedBody":"Currently we don't do that which causes the local/host stack traces not to have\r\nsource location information. Pass `--debug` to mono via `$(ManagedRuntime)`\r\nwhich is used whenever we need to launch a managed program."},{"Id":"9434470168","Type":"PullRequestEvent","CreatedAt":"2019-04-12T19:16:43","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2975","RelatedDescription":"Merged pull request \"[Xamarin.Android.Build.Tasks] cache aapt2 version in AppDomain\" (#2975) at xamarin/xamarin-android","RelatedBody":"If you have `$(AndroidUseAapt2)` set to `True` (which is also the\r\ndefault on master), the `<ResolveAndroidTooling/>` tooling task seems\r\nto take longer:\r\n\r\n    aapt2:\r\n        83 ms  ResolveAndroidTooling                      2 calls\r\n    aapt:\r\n         4 ms  ResolveAndroidTooling                      2 calls\r\n\r\nI figured out this was due to how we shell out to `aapt2 version` to\r\ncheck the version of `aapt2`.\r\n\r\nWe should use `RegisterTaskObject` and cache the result of this call!\r\n\r\n* I used a key that contains the path to `aapt2`, so if someone changes the\r\n  `aapt2` used, it should call `aapt2 version` again.\r\n* I don't think we actually need to invalidate the cached value on\r\n  anything else because we are shipping `aapt2` now.\r\n\r\nBut what if there is a Xamarin.Android update?\r\n\r\nIf you install a new VSIX, VS on Windows makes you restart the IDE. If\r\nyou install a PKG on Mac, you need to restart the IDE *anyway*,\r\nbecause it keeps all system MSBuild `.targets` files in memory...\r\nWeird things will happen if you install a Xamarin.Android PKG on Mac\r\nand don't restart VS for Mac.\r\n\r\nAfter this change, when the `aapt2 version` call is cached:\r\n\r\n    2 ms  ResolveAndroidTooling                      2 calls\r\n\r\nThis was the \"Hello World\" sample project in this repo."},{"Id":"9434377876","Type":"PullRequestEvent","CreatedAt":"2019-04-12T19:00:25","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2974","RelatedDescription":"Merged pull request \"[tests] Measure activity displayed time\" (#2974) at xamarin/xamarin-android","RelatedBody":"Add special-case handled measurement of activity displayed message\r\nfrom Android Activity manager.\r\n\r\nWe have special case code for that, because our normal message\r\nmeasurements come from the app process, while the activity manager is\r\na separate process and thus would not be matched by our timing\r\ndefinitions, which use the PID to pre-filter the matches.\r\n\r\nThe activity manager adds message to the log when activity is\r\ndisplayed. We hope that this corelates with actual time the activity\r\nis displayed on screen and thus is interesting time to measure.\r\n\r\nThe activity messages look like this:\r\n\r\n    04-05 15:50:00.421  1201  1239 I ActivityManager: Displayed com.google.android.deskclock/com.android.deskclock.alarms.AlarmActivity: +136ms\r\n    04-05 16:00:01.157  1201  1239 I ActivityManager: Displayed com.google.android.deskclock/com.android.deskclock.alarms.AlarmActivity: +145ms\r\n    04-05 16:36:23.803  1201  1239 I ActivityManager: Displayed Xamarin.Forms_Performance_Integration/xamarin.forms.performance.integration.MainActivity: +1s255ms\r\n    04-05 16:38:14.092  1201  1239 I ActivityManager: Displayed org.androworks.meteorgram/.MeteorgramActivity: +580ms\r\n    04-05 16:38:42.140  1201  1239 I ActivityManager: Displayed org.mozilla.firefox/org.mozilla.gecko.BrowserApp: +469ms\r\n    04-05 16:38:54.098  1201  1239 I ActivityManager: Displayed com.whatsapp/.HomeActivity: +545ms\r\n\r\nExample measurement for our XF test:\r\n\r\n    last-Debug,JNI.init-Debug,init-Debug,OnCreateBegin-Debug,OnCreateEnd-Debug,OnStartBegin-Debug,OnStartEnd-Debug,OnResumeBegin-Debug,OnResumeEnd-Debug,ActivityDisplayed-Debug\r\n    1908,492,492,585,1332,1337,1338,1338,1341,2047\r\n\r\nNOTE: as can be seen above, the activity displayed message comes long\r\nafter OnResumeEnd was called"},{"Id":"9433764021","Type":"PullRequestEvent","CreatedAt":"2019-04-12T17:17:10","Actor":"jonathanpeppers","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2977","RelatedDescription":"Opened pull request \"[android-toolchain] update to 28.0.2 platform-tools\" (#2977) at xamarin/xamarin-android","RelatedBody":"Context: https://jenkins.mono-project.com/view/Xamarin.Android/job/xamarin-android/451/testReport/junit/Mono/Android_TestsMultiDex/Possible_Crash___Release/\r\nContext: https://developer.android.com/studio/releases/platform-tools\r\n\r\nWe have been seeing `adb` crash during our APK tests:\r\n\r\n    Task \"RunInstrumentationTests\" (TaskId:274)\r\n    ...\r\n    Executing: /Users/builder/android-toolchain/sdk/platform-tools/adb -s emulator-5570  logcat -v threadtime -d (TaskId:274)\r\n        appending stdout to file: /Users/builder/jenkins/workspace/xamarin-android/xamarin-android/build-tools/scripts/../../bin/TestRelease/logcat-Release-Bundle-Mono.Android_TestsMultiDex.txt (TaskId:274)\r\n    /Users/builder/jenkins/workspace/xamarin-android/xamarin-android/build-tools/scripts/TestApks.targets(226,5): warning : * daemon not running; starting now at tcp:5037 [/Users/builder/jenkins/workspace/xamarin-android/xamarin-android/tests/RunApkTests.targets]\r\n    /Users/builder/jenkins/workspace/xamarin-android/xamarin-android/build-tools/scripts/TestApks.targets(226,5): warning : * daemon started successfully [/Users/builder/jenkins/workspace/xamarin-android/xamarin-android/tests/RunApkTests.targets]\r\n    ...\r\n\r\nThis log message is starting the `adb` daemon when it *should* have\r\nalready been running.\r\n\r\nLooking at the release notes for `platform-tools`, there is some\r\nmention of fixes for `adb` for 28.0.1 and 28.0.2.\r\n\r\nLet's update `platform-tools` and see if this problem gets any better."},{"Id":"9433478940","Type":"PullRequestEvent","CreatedAt":"2019-04-12T16:29:16","Actor":"lambdageek","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2976","RelatedDescription":"Opened pull request \"[mono-2019-02][Xamarin.Android.BCL_Tests] Copy xunit tests to IntermediateOutputPath\" (#2976) at xamarin/xamarin-android","RelatedBody":"so that their references can be resolved\r\n\r\nOtherwise, any referenced assemblies that are only used by the xunit testsuites\r\nwill not be included in the APK.\r\n\r\n\r\n---\r\n\r\nI'm not sure if this is the best way - with this the XUnit test assemblies all end up inside the APK in the `assemblies/` folder (the same way that all the NUnit test assemblies already do) - which means they're duplicated in the `Xamarin.Android.BCL_Test.apk` - they're included once more in the `bcl-tests.zip` that's embedded as a resource in the `assemblies/Xamarin.Android.Bcl_Tests.dll` inside the APK.\r\n\r\nBut I've been told that that's a know issue that will be dealt with separately."},{"Id":"9433462758","Type":"PullRequestEvent","CreatedAt":"2019-04-12T16:26:38","Actor":"jonathanpeppers","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2975","RelatedDescription":"Opened pull request \"[Xamarin.Android.Build.Tasks] cache aapt2 version in AppDomain\" (#2975) at xamarin/xamarin-android","RelatedBody":"If you have `$(AndroidUseAapt2)` set to `True` (which is also the\r\ndefault on master), the `<ResolveAndroidTooling/>` tooling task seems\r\nto take longer:\r\n\r\n    aapt2:\r\n        83 ms  ResolveAndroidTooling                      2 calls\r\n    aapt:\r\n         4 ms  ResolveAndroidTooling                      2 calls\r\n\r\nI figured out this was due to how we shell out to `aapt2 version` to\r\ncheck the version of `aapt2`.\r\n\r\nWe should use `RegisterTaskObject` and cache the result of this call!\r\n\r\n* I used a key that contains the path to `aapt2`, so if that\r\n* I don't think we actually need to invalidate the cached value on\r\n  anything else because we are shipping `aapt2` now.\r\n\r\nBut what if there is a Xamarin.Android update?\r\n\r\nIf you install a new VSIX, VS on Windows makes you restart the IDE. If\r\nyou install a PKG on Mac, you need to restart the IDE *anyway*,\r\nbecause it keeps all system MSBuild `.targets` files in memory...\r\nWeird things will happen if you install a Xamarin.Android PKG on Mac\r\nand don't restart VS for Mac.\r\n\r\nAfter this change, when the `aapt2 version` call is cached:\r\n\r\n    2 ms  ResolveAndroidTooling                      2 calls\r\n\r\nThis was the \"Hello World\" sample project in this repo."},{"Id":"9431908383","Type":"PullRequestEvent","CreatedAt":"2019-04-12T12:55:30","Actor":"radekdoulik","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2974","RelatedDescription":"Opened pull request \"[tests] Measure activity displayed time\" (#2974) at xamarin/xamarin-android","RelatedBody":"Add special-case handled measurement of activity displayed message\r\nfrom Android Activity manager.\r\n\r\nWe have special case code for that, because our normal message\r\nmeasurements come from the app process, while the activity manager is\r\na separate process and thus would not be matched by our timing\r\ndefinitions, which use the PID to pre-filter the matches.\r\n\r\nThe activity manager adds message to the log when activity is\r\ndisplayed. We hope that this corelates with actual time the activity\r\nis displayed on screen and thus is interesting time to measure.\r\n\r\nThe activity messages look like this:\r\n\r\n    04-05 15:50:00.421  1201  1239 I ActivityManager: Displayed com.google.android.deskclock/com.android.deskclock.alarms.AlarmActivity: +136ms\r\n    04-05 16:00:01.157  1201  1239 I ActivityManager: Displayed com.google.android.deskclock/com.android.deskclock.alarms.AlarmActivity: +145ms\r\n    04-05 16:36:23.803  1201  1239 I ActivityManager: Displayed Xamarin.Forms_Performance_Integration/xamarin.forms.performance.integration.MainActivity: +1s255ms\r\n    04-05 16:38:14.092  1201  1239 I ActivityManager: Displayed org.androworks.meteorgram/.MeteorgramActivity: +580ms\r\n    04-05 16:38:42.140  1201  1239 I ActivityManager: Displayed org.mozilla.firefox/org.mozilla.gecko.BrowserApp: +469ms\r\n    04-05 16:38:54.098  1201  1239 I ActivityManager: Displayed com.whatsapp/.HomeActivity: +545ms\r\n\r\nExample measurement for our XF test:\r\n\r\n    last-Debug,JNI.init-Debug,init-Debug,OnCreateBegin-Debug,OnCreateEnd-Debug,OnStartBegin-Debug,OnStartEnd-Debug,OnResumeBegin-Debug,OnResumeEnd-Debug,ActivityDisplayed-Debug\r\n    1908,492,492,585,1332,1337,1338,1338,1341,2047\r\n\r\nNOTE: as can be seen above, the activity displayed message comes long\r\nafter OnResumeEnd was called"},{"Id":"9431751910","Type":"PullRequestEvent","CreatedAt":"2019-04-12T12:33:22","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2958","RelatedDescription":"Merged pull request \"[Xamarin.Android.Build.Tasks] <FilterAssemblies/> support missing TFI\" (#2958) at xamarin/xamarin-android","RelatedBody":"Context: https://www.nuget.org/packages/Refractored.Controls.CircleImageView/\r\nContext: https://github.com/Azure-Samples/MyDriving\r\nContext: https://github.com/xamarin/xamarin-android/pull/2934\r\n\r\nThe MyDriving sample app currently fails to build on master with:\r\n\r\n    Resources/layout/fragment_profile.axml(2): error APT0000: attribute civ_border_width (aka com.microsoft.mydriving:civ_border_width) not found.\r\n\r\nThe failure happens with both `aapt` and `aapt2`.\r\n\r\nThis layout is using a custom view such as:\r\n\r\n    <?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n    <ScrollView\r\n        xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n        xmlns:local=\"http://schemas.android.com/apk/res-auto\">\r\n        ...\r\n        <refractored.controls.CircleImageView local:civ_border_width=\"0dp\" />\r\n        ...\r\n    </ScrollView>\r\n\r\nThis comes from the `Refractored.Controls.CircleImageView` NuGet\r\npackage.\r\n\r\nIn 5ec3e3a, I added a `<FilterAssemblies/>` MSBuild task that appears\r\nto be to blame. It is not returning\r\n`Refractored.Controls.CircleImageView.dll`, but it needs to!\r\n\r\n`Refractored.Controls.CircleImageView.dll` has no `[assembly: System.Runtime.Versioning.TargetFrameworkAttribute]`...\r\n\r\n    // C:\\src\\des\\MyDriving\\packages\\Refractored.Controls.CircleImageView.1.0.1\\lib\\MonoAndroid10\\Refractored.Controls.CircleImageView.dll\r\n    // Refractored.Controls.CircleImageView, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null\r\n    // Global type: <Module>\r\n    // Architecture: x86\r\n    // Runtime: v4.0.30319\r\n    // Hash algorithm: SHA1\r\n\r\n    using Android.Runtime;\r\n    using System.Reflection;\r\n    using System.Runtime.CompilerServices;\r\n    using System.Security;\r\n    using System.Security.Permissions;\r\n\r\n    [assembly: AssemblyTitle(\"Refractored.Controls.CircleImageView\")]\r\n    [assembly: AssemblyDescription(\"\")]\r\n    [assembly: AssemblyConfiguration(\"\")]\r\n    [assembly: AssemblyCompany(\"\")]\r\n    [assembly: AssemblyProduct(\"\")]\r\n    [assembly: AssemblyCopyright(\"2015 Refractored LLC/James Montemagno\")]\r\n    [assembly: AssemblyTrademark(\"\")]\r\n    [assembly: NamespaceMapping(Java = \"de.hdodenhof.circleimageview\", Managed = \"Refractored.Controls\")]\r\n    [assembly: RuntimeCompatibility(WrapNonExceptionThrows = true)]\r\n    [assembly: SecurityPermission(8, SkipVerification = true)]\r\n    [assembly: AssemblyVersion(\"1.0.0.0\")]\r\n    [module: UnverifiableCode]\r\n\r\nIt is indeed a `MonoAndroid` assembly, since it references\r\n`Mono.Android.dll`. It is weird, though...\r\n\r\n## What should we do? ##\r\n\r\nOne idea is to look for `Mono.Android.dll` references in each\r\nassembly *instead* of `TargetFrameworkIdentifier`.\r\n\r\nLooking at the assemblies in Xamarin.Forms, there is a complication to\r\nthis:\r\n\r\n* `Xamarin.Forms.Core.dll` (a NetStandard library) references\r\n  * `Xamarin.Forms.Platform.dll` (a MonoAndroid library?) references\r\n    * `Xamarin.Forms.Platform.Android.dll`\r\n\r\nBut `Xamarin.Forms.Platform.dll` does not reference\r\n`Mono.Android.dll`?\r\n\r\nSo then should we \"recursively\" look for any reference to\r\n`Mono.Android.dll` in a given dependency tree?\r\n\r\nI don't think so? This would include more assemblies than we want...\r\nIn the above example `Xamarin.Forms.Core.dll` would get counted as a\r\n\"MonoAndroid\" assembly.\r\n\r\n## Conclusion ##\r\n\r\nI think we should stick with `TargetFrameworkIdentifier`, and in the\r\nrare case it is missing look for a `Mono.Android.dll` reference for\r\nthe single assembly. This seems like it is going to cover all cases to\r\nme, and we still will get good performance.\r\n\r\nSo we will cover:\r\n\r\n* `Xamarin.Forms.Platform.dll` counted as a \"MonoAndroid\" assembly\r\n  since it has a `TargetFrameworkIdentifier` (but no reference).\r\n* `Refractored.Controls.CircleImageView.dll` counted as a\r\n  \"MonoAndroid\" assembly. It has no `TargetFrameworkIdentifier, but\r\n  has a reference to `Mono.Android.dll`.\r\n\r\nChanges include:\r\n\r\n* `<FilterAssemblies/>` needs to also check for an assembly reference\r\n  to `Mono.Android` as a fallback.\r\n* `<ResolveAssemblies/>` now adds a `%(MonoAndroidReference)=True`\r\n  item metadata.\r\n* When creating the `@(_ResolvedUserMonoAndroidAssemblies)` item\r\n  group, we also check for `%(MonoAndroidReference)=True`.\r\n\r\nI added a few tests to verify these scenarios."},{"Id":"9431365116","Type":"PullRequestEvent","CreatedAt":"2019-04-12T11:28:01","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2968","RelatedDescription":"Merged pull request \"[Xamarin.Android.Build.Tasks] De-pluralize @(AndroidAotProfile)\" (#2968) at xamarin/xamarin-android","RelatedBody":"MSBuild naming convention is for item groups to be *singular*, not\r\nplural, names.  For example, `@(Compile)`, `@(Reference)`, etc.\r\n\r\nRename `@(AndroidAotProfiles)` to `@(AndroidAotProfile)` to be\r\nconsistent with this convention."},{"Id":"9430345728","Type":"IssuesEvent","CreatedAt":"2019-04-12T08:48:47","Actor":"linxh0936","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/2973","RelatedDescription":"Opened issue \"AndroidEnablePreloadAssemblies have a bug.\" (#2973) at xamarin/xamarin-android","RelatedBody":"### Steps to Reproduce\r\n\r\n1. Updated to Xamarin.Android 9.2.0.5;\r\n\r\n### Expected Behavior\r\nAppDomain.CurrentDomain.GetAssemblies () return contains self project assembly.\r\n### Actual Behavior\r\nAppDomain.CurrentDomain.GetAssemblies () not contains self project assembly.\r\n### Version Information\r\nVs for Mac 8.0 with Xamarin.Android 9.2.0.5\r\n"}],"ResultType":"GitHubEvent"},"Forms":{"Events":[{"Id":"9435652149","Type":"IssuesEvent","CreatedAt":"2019-04-12T23:28:18","Actor":"samhouts","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/5900","RelatedDescription":"Closed issue \"[Bug]  Scrolling of Content does not work, inside a Shell Container\" (#5900) at xamarin/Xamarin.Forms","RelatedBody":"<!-- Bug report best practices: https://github.com/xamarin/Xamarin.Forms/wiki/Submitting-Issues -->\r\n\r\n### Description\r\nHi Team,\r\nI am facing issue in scrolling the content of WebView, While placing a Web View, as ShellContent of Shell Container.\r\n\r\n\r\n### Steps to Reproduce\r\n\r\n1. Run the sample attached below.\r\n2. Sample will open and loaded with Website on WebView.\r\n3. Now, Scroll the Content of the Website.\r\n4. Scrolling interaction will be restricted.\r\n\r\n### Expected Behavior\r\nWebView Content should Scroll without any interaction issue.\r\n\r\n### Actual Behavior\r\nWebView Content is not Scrollable.\r\n\r\n### Basic Information\r\n\r\n- Version with issue:  Xamarin.Forms->  4.0.0.304370-pre8\r\n- Last known good version:\r\n- IDE: Visual Studio 2017 15.9.11.\r\n- Platform Target Frameworks: <!-- All that apply -->\r\n  - iOS:  Not Applicable\r\n  - Android: Samsung Tablet Android version 7.1\r\n  - UWP: Not Applicable\r\n- Android Support Library Version: Version 27.0.2.1\r\n- Nuget Packages: 4.0.0.304370-pre8\r\n- Affected Devices:\r\nAll Android Devices.\r\n\r\n### Screenshots\r\nNot Applicable\r\n\r\n<!-- If the issue is a visual issue, please include screenshots showing the problem if possible -->\r\n\r\n### Reproduction Link\r\n[ShellContainer.zip](https://github.com/xamarin/Xamarin.Forms/files/3072578/ShellContainer.zip)\r\n\r\n<!-- Please upload or provide a link to a reproduction case -->\r\n"},{"Id":"9435645141","Type":"PullRequestEvent","CreatedAt":"2019-04-12T23:25:55","Actor":"samhouts","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/5902","RelatedDescription":"Merged pull request \"Add explicit references back into nuspec\" (#5902) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\nReferences have to specified explicitly otherwise the design package gets added into VS for Mac which causes exceptions\r\n\r\nhttps://devdiv.visualstudio.com/DevDiv/_workitems/edit/846719"},{"Id":"9435175276","Type":"PullRequestEvent","CreatedAt":"2019-04-12T21:26:09","Actor":"PureWeen","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/5906","RelatedDescription":"Opened pull request \"remove unused Group Header Template\" (#5906) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\nRemoved GroupHeaderTemplate as it has not been implemented yet and we can add it back once the work is done to create it\r\n\r\n### Issues Resolved ### \r\n- fixes #5870\r\n\r\n### API Changes ###\r\n\r\n Removed:\r\n - Shell.GroupHeaderTemplate as it has not been implemented.\r\n \r\n\r\n### Platforms Affected ### \r\n- Core/XAML (all platforms)\r\n\r\n\r\n### PR Checklist ###\r\n\r\n- [ ] Has automated tests <!-- (if tests are omitted or manual, state reason in description) -->\r\n- [ ] Rebased on top of the target branch at time of PR\r\n- [ ] Changes adhere to coding standard\r\n"}],"ResultType":"GitHubEvent"},"Macios":{"Events":[{"Id":"9434368961","Type":"IssuesEvent","CreatedAt":"2019-04-12T18:58:54","Actor":"rolfbjarne","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/xamarin-macios/issues/5815","RelatedDescription":"Closed issue \"Could not compile file(s) '/../Xamarin.iOS.dll.s'\" (#5815) at xamarin/xamarin-macios","RelatedBody":"<!-- 🚨 STOP 🚨 𝗦𝗧𝗢𝗣 🚨 𝑺𝑻𝑶𝑷 🚨 -->\r\n\r\n<!--\r\nPlease fill in the *entire* template below.\r\nThe template is designed to avoid unnecessary delays to confirm and fix reported issues. Issues with missing information generally end up with a `need-info` label and take significantly more time to fix. Please help us help you!\r\nFor more information see https://github.com/xamarin/xamarin-macios/wiki/Submitting-Bugs-&-Suggestions\r\nFor support requests use https://www.xamarin.com/support\r\n-->\r\n### Steps to Reproduce\r\n\r\n1. Pair Visual Studio with the mac\r\n2. Connect iPhone that is already included in devices that are registered in the used Provisionig Profile\r\n3. Select Debug option and the iPhone already plugged in the mac\r\n\r\n### Expected Behavior\r\nDeploy application on the device\r\n### Actual Behavior\r\nThere is Compilation error when I start deploying.\r\nI've cleaned the solution, deleted both 'bin' and 'obj' folders, along with the '/Users/MyUser/Library/Caches/Xamarin' whole folder on the mac.\r\nAnd there is still below compilation error occured: Could not compile the file(s) '/Users/MyUser/Library/Caches/Xamarin/mtbs/builds/MyProject.iOS/88a37a8ff8359042479f20abe19eb7ae/obj/iPhone/Debug/mtouch-cache/armv7/Xamarin.iOS.dll.s'. Please file a bug report at http://bugzilla.xamarin.com\r\nThere is no problem with debugging on ios simulators.\r\n### Environment\r\n\r\n<!--\r\n1.\r\nVisual Studio: Help > About Microsoft Visual Studio > Copy Info [button]\r\nVisual Studio for Mac: Visual Studio > About Visual Studio > Show Details > Copy Information [button]\r\n2. Paste into the code block below (between ```)\r\n-->\r\n\r\n`Microsoft Visual Studio Professional 2017 \r\nVersion 15.9.10\r\nVisualStudio.15.Release/15.9.10+28307.557\r\nMicrosoft .NET Framework\r\nVersion 4.7.03056\r\n\r\nInstalled Version: Professional\r\n\r\nApplication Insights Tools for Visual Studio Package   8.14.20131.1\r\nApplication Insights Tools for Visual Studio\r\n\r\nASP.NET and Web Tools 2017   15.9.04012.0\r\nASP.NET and Web Tools 2017\r\n\r\nASP.NET Core Razor Language Services   15.8.31590\r\nProvides languages services for ASP.NET Core Razor.\r\n\r\nASP.NET Web Frameworks and Tools 2017   5.2.60913.0\r\nFor additional information, visit https://www.asp.net/\r\n\r\nAzure App Service Tools v3.0.0   15.9.03024.0\r\nAzure App Service Tools v3.0.0\r\n\r\nAzure Functions and Web Jobs Tools   15.9.02046.0\r\nAzure Functions and Web Jobs Tools\r\n\r\nC# Tools   2.10.0-beta2-63501-03+b9fb1610c87cccc8ceb74a770dba261a58e39c4a\r\nC# components used in the IDE. Depending on your project type and settings, a different version of the compiler may be used.\r\n\r\nCommon Azure Tools   1.10\r\nProvides common services for use by Azure Mobile Services and Microsoft Azure Tools.\r\n\r\nExtensibility Message Bus   1.1.49 (remotes/origin/d15-8@ee674f3)\r\nProvides common messaging-based MEF services for loosely coupled Visual Studio extension components communication and integration.\r\n\r\nJavaScript Language Service   2.0\r\nJavaScript Language Service\r\n\r\nMicrosoft Azure Tools   2.9\r\nMicrosoft Azure Tools for Microsoft Visual Studio 2017 - v2.9.0.0\r\n\r\nMicrosoft Continuous Delivery Tools for Visual Studio   0.4\r\nSimplifying the configuration of Azure DevOps pipelines from within the Visual Studio IDE.\r\n\r\nMicrosoft JVM Debugger   1.0\r\nProvides support for connecting the Visual Studio debugger to JDWP compatible Java Virtual Machines\r\n\r\nMicrosoft Library Manager   1.0\r\nInstall client-side libraries easily to any web project\r\n\r\nMicrosoft MI-Based Debugger   1.0\r\nProvides support for connecting Visual Studio to MI compatible debuggers\r\n\r\nMicrosoft Visual Studio Tools for Containers   1.1\r\nDevelop, run, validate your ASP.NET Core applications in the target environment. F5 your application directly into a container with debugging, or CTRL + F5 to edit & refresh your app without having to rebuild the container.\r\n\r\nMono Debugging for Visual Studio   4.13.12-pre (9bc9548)\r\nSupport for debugging Mono processes with Visual Studio.\r\n\r\nNuGet Package Manager   4.6.0\r\nNuGet Package Manager in Visual Studio. For more information about NuGet, visit http://docs.nuget.org/.\r\n\r\nProjectServicesPackage Extension   1.0\r\nProjectServicesPackage Visual Studio Extension Detailed Info\r\n\r\nResourcePackage Extension   1.0\r\nResourcePackage Visual Studio Extension Detailed Info\r\n\r\nResourcePackage Extension   1.0\r\nResourcePackage Visual Studio Extension Detailed Info\r\n\r\nSQL Server Data Tools   15.1.61903.01040\r\nMicrosoft SQL Server Data Tools\r\n\r\nTypeScript Tools   15.9.20918.2001\r\nTypeScript Tools for Microsoft Visual Studio\r\n\r\nVisual Basic Tools   2.10.0-beta2-63501-03+b9fb1610c87cccc8ceb74a770dba261a58e39c4a\r\nVisual Basic components used in the IDE. Depending on your project type and settings, a different version of the compiler may be used.\r\n\r\nVisual F# Tools 10.2 for F# 4.5   15.8.0.0.  Commit Hash: 6e26c5bacc8c4201e962f5bdde0a177f82f88691.\r\nMicrosoft Visual F# Tools 10.2 for F# 4.5\r\n\r\nVisual Studio Code Debug Adapter Host Package   1.0\r\nInterop layer for hosting Visual Studio Code debug adapters in Visual Studio\r\n\r\nVisual Studio Tools for Containers   1.0\r\nVisual Studio Tools for Containers\r\n\r\nVisualStudio.Mac   1.0\r\nMac Extension for Visual Studio\r\n\r\nXamarin   4.12.3.81 (d15-9@780082716)\r\nVisual Studio extension to enable development for Xamarin.iOS and Xamarin.Android.\r\n\r\nXamarin Designer   4.16.13 (45a16efd4)\r\nVisual Studio extension to enable Xamarin Designer tools in Visual Studio.\r\n\r\nXamarin Templates   1.1.128 (6f5ebb2)\r\nTemplates for building iOS, Android, and Windows apps with Xamarin and Xamarin.Forms.\r\n\r\nXamarin.Android SDK   9.1.7.0 (HEAD/ba9da7a76)\r\nXamarin.Android Reference Assemblies and MSBuild support.\r\n\r\nXamarin.iOS and Xamarin.Mac SDK   12.2.1.16 (2dc06c7)\r\nXamarin.iOS and Xamarin.Mac Reference Assemblies and MSBuild support.``\r\n`Xcode Version 10.2(10E125)``\r\n\r\n### Build Logs\r\n\r\n<!--\r\n1. Place cursor below this comment block.\r\n2. Attach build log or link to gist (https://gist.github.com/) of the log.\r\n-->\r\nSeverity\tCode\tDescription\tProject\tFile\tLine\tSuppression State\r\nError\t\tCould not compile the file(s) '/Users/MyUser/Library/Caches/Xamarin/mtbs/builds/MyProject.iOS/88a37a8ff8359042479f20abe19eb7ae/obj/iPhone/Debug/mtouch-cache/armv7/Xamarin.iOS.dll.s'. Please file a bug report at http://bugzilla.xamarin.com\tMyProject.iOS\t\t\t\r\n\r\nThis is the output & the Xamarin.iOS.dll file\r\n[LogFile&dll.zip](https://github.com/xamarin/xamarin-macios/files/3022038/LogFile.dll.zip)\r\n\r\n\r\n### Example Project (If Possible)\r\n\r\n<!--\r\n1. Place cursor below this comment block.\r\n2. Drag and drop the compressed project or files needed to reproduce.\r\n-->\r\n\r\n<!--\r\nSwitch to the \"Preview\" tab to ensure your issue renders correctly.\r\n-->\r\n"},{"Id":"9433699791","Type":"PullRequestEvent","CreatedAt":"2019-04-12T17:06:05","Actor":"rolfbjarne","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/5893","RelatedDescription":"Merged pull request \"[jenkins] Set a 1h build timeout.\" (#5893) at xamarin/xamarin-macios","RelatedBody":"Builds take approximately 30 minutes on a bot now, so 1 hour should be plenty.\n\nThis makes sure a 32-bit dialog doesn't waste 9h of bot time just sitting\nthere."},{"Id":"9433698140","Type":"PullRequestEvent","CreatedAt":"2019-04-12T17:05:48","Actor":"rolfbjarne","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/5891","RelatedDescription":"Merged pull request \"[bgen] Add support for sequential and parallel execution of the generator within the same process.\" (#5891) at xamarin/xamarin-macios","RelatedBody":"This has two main advantages:\n\n* It'll be possible to step into the generator's code when debugging tests,\n  since we won't be launching an external process to run bgen.\n\n* The tests run slightly faster (32s vs 39s on my machine), since we spawn\n  fewer subprocesses.\n\nThe required changes basically consist of making sure we don't have static\nstate anywhere. This is mostly accomplished by passing instances around\ninstead of relying on static API. In many cases I was able to create an\ninstance field with the same name as the type, which made existing code work\nwithout change.\n\nThe only exception is error reporting: in that case we rely on a ThreadStatic\nfield to store the warnings-as-errors list, since otherwise the modifications\nwere both ugly and numerous. This will probably break if we one day start\nusing async in the generator, but for now it should be safe enough.\n\nMost of the other changes were fairly mechanical: just add a parameter or a\nfield, and then use it.\n\nThis PR is best reviewed commit-by-commit."}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1116762533346652160","CreatedAt":"2019-04-12T17:58:31+00:00","UserScreenname":"xamarinhq","Text":"There’re tons in store for you in the latest podcast... @codemillmatt and @JamesMontemagno rundown the new features… https://t.co/1TlcD9N8yV","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":23,"FavoriteCount":10,"RawContent":null},{"Id":"1115620503232962560","CreatedAt":"2019-04-09T14:20:29+00:00","UserScreenname":"xamarinhq","Text":"Under the Hood: Take an inside look at #DevOps at Microsoft, in this webinar with @abelsquidhead and @Applitools on… https://t.co/qgf7T5OPvM","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":40,"FavoriteCount":23,"RawContent":null},{"Id":"1115323538091720704","CreatedAt":"2019-04-08T18:40:27+00:00","UserScreenname":"xamarinhq","Text":"Say 'Hello' to WorkManager - a library that makes it easy to schedule deferrable, asynchronous tasks even if the ap… https://t.co/xOYvf5E0K0","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":107,"FavoriteCount":46,"RawContent":null},{"Id":"1113833658920472576","CreatedAt":"2019-04-04T16:00:12+00:00","UserScreenname":"xamarinhq","Text":"Join us live right now for another @dotnet #CommunityStandup with live demoes and QA from the #Xamarin team https://t.co/Umwxz8RtPj","Source":"<a href=\"https://www.elgato.com/gaming\" rel=\"nofollow\">Elgato Stream Deck</a>","RetweetCount":31,"FavoriteCount":11,"RawContent":null},{"Id":"1113554700702449664","CreatedAt":"2019-04-03T21:31:44+00:00","UserScreenname":"xamarinhq","Text":"Last week we issued a challenge to the Xamarin community to use the new Material Design controls with Visual by rep… https://t.co/JpaGEihELG","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":142,"FavoriteCount":52,"RawContent":null},{"Id":"1113137014768066560","CreatedAt":"2019-04-02T17:52:00+00:00","UserScreenname":"xamarinhq","Text":"News from the #VisualStudio 2019 Launch Event. See what’s new for #Xamarin Developers in #VS2019,… https://t.co/ylrA7eBnQ4","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":146,"FavoriteCount":72,"RawContent":null},{"Id":"1112804184166944768","CreatedAt":"2019-04-01T19:49:27+00:00","UserScreenname":"xamarinhq","Text":"Learn about the new, exciting releases and tooling to help jumpstart your next mobile development project.\n\nJoin us… https://t.co/4AhXCdCrB0","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":27,"FavoriteCount":13,"RawContent":null},{"Id":"1111358962681765893","CreatedAt":"2019-03-28T20:06:39+00:00","UserScreenname":"xamarinhq","Text":"Unlock the power of Glide with “GlideX”: a simple library to swap-in Glide’s image loading implementation in-place… https://t.co/bAk49l9er6","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":47,"FavoriteCount":25,"RawContent":null},{"Id":"1111318034789158912","CreatedAt":"2019-03-28T17:24:01+00:00","UserScreenname":"xamarinhq","Text":"How are we doing? The #Xamarin March survey is now ready for your feedback: https://t.co/yfktVy49Pl \nIt's only avai… https://t.co/gX2uC9QShF","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":54,"FavoriteCount":37,"RawContent":null},{"Id":"1110599405390962693","CreatedAt":"2019-03-26T17:48:26+00:00","UserScreenname":"xamarinhq","Text":"Interpret some of the #CSharp in your application while compiling the rest ahead of time as usual.\n\nCool.... Introd… https://t.co/vkhDptAeTr","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":96,"FavoriteCount":44,"RawContent":null},{"Id":"1109140611515498502","CreatedAt":"2019-03-22T17:11:43+00:00","UserScreenname":"xamarinhq","Text":"https://t.co/GFuU36E9x5 - Let's walk through a basic building block of #Xamarin.Forms. In the latest episode of Xam… https://t.co/qczJXvqcNK","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":68,"FavoriteCount":29,"RawContent":null},{"Id":"1108410911151345664","CreatedAt":"2019-03-20T16:52:09+00:00","UserScreenname":"xamarinhq","Text":"We're ready for testing &amp; app submission. The latest #Xamarin .iOS SDKs shipping with #VS2019 and #VS4Mac 8.0, are… https://t.co/KC1Gih3MFF","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":59,"FavoriteCount":26,"RawContent":null},{"Id":"1107723971531862017","CreatedAt":"2019-03-18T19:22:29+00:00","UserScreenname":"xamarinhq","Text":"We have received some great pull requests to add some new features and that have gone into the newest release. Now… https://t.co/EqNQUDloOm","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":119,"FavoriteCount":47,"RawContent":null},{"Id":"1106650380182659080","CreatedAt":"2019-03-15T20:16:25+00:00","UserScreenname":"xamarinhq","Text":"Introducing the New Xamarin Customer Showcase\n\nHighlighting the amazing work developers are doing for all sorts of… https://t.co/yQbcA4cYc6","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":97,"FavoriteCount":42,"RawContent":null},{"Id":"1106576630884065280","CreatedAt":"2019-03-15T15:23:22+00:00","UserScreenname":"xamarinhq","Text":"This week on the #XamarinShow, @JamesMontemagno &amp; @JonathanPeppers show us how to optimize image loading for Androi… https://t.co/FkiznwhBep","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":74,"FavoriteCount":17,"RawContent":null},{"Id":"1105942645308678144","CreatedAt":"2019-03-13T21:24:08+00:00","UserScreenname":"xamarinhq","Text":"There have been some drastic changes across key libraries for Google Play Services &amp; Android Support. Let's get a q… https://t.co/heywxPz0Qs","Source":"<a href=\"http://twitter.com\" rel=\"nofollow\">Twitter Web Client</a>","RetweetCount":41,"FavoriteCount":25,"RawContent":null},{"Id":"1105573743986917377","CreatedAt":"2019-03-12T20:58:15+00:00","UserScreenname":"xamarinhq","Text":"#MFractor is a powerful #VS4Mac extension to streamline Xamarin app dev so you can save significant time &amp; effort o… https://t.co/pEwcgwzd3t","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":45,"FavoriteCount":22,"RawContent":null},{"Id":"1105491570583851008","CreatedAt":"2019-03-12T15:31:44+00:00","UserScreenname":"xamarinhq","Text":".@codemillmatt &amp; @JamesMontemagno talk about a ton of newness out there for all mobile devs including a hot new… https://t.co/05m3VTmUBe","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":62,"FavoriteCount":24,"RawContent":null},{"Id":"1103762250509283332","CreatedAt":"2019-03-07T21:00:02+00:00","UserScreenname":"xamarinhq","Text":"Introducing Material Design; a suite of cross-platform components in the #Xamarin.Forms 3.6 Visual feature that boo… https://t.co/gin9lpb0eQ","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":150,"FavoriteCount":70,"RawContent":null}]}},"RunOn":"2019-04-13T05:30:53.1002083Z","RunDurationInMilliseconds":2261}