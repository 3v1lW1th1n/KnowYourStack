{"Data":{"GitHub":{"Issues":[{"Id":"414434974","IsPullRequest":false,"CreatedAt":"2019-02-26T05:15:47","Actor":"Neeraj-Kashyap","Number":"2732","RawContent":null,"Title":"Can speech recognition be done in ML.NET?","State":"open","Body":"### System information\r\n\r\n- **OS version/distro**:  Windows\r\n- **.NET Version (eg., dotnet --info)**:  .NET Framework 4.6\r\n\r\n### Issue\r\n\r\nI am new to Machine Learning. I came across ML.NET (Machine Learning framework by Microsoft). Can we use this framework for speech recognition? What all things you should know if you want to do a speech recognition in ML.NET?\r\n\r\n ","Url":"https://github.com/dotnet/machinelearning/issues/2732","RelatedDescription":"Open issue \"Can speech recognition be done in ML.NET?\" (#2732)"},{"Id":"414430411","IsPullRequest":true,"CreatedAt":"2019-02-26T04:52:21","Actor":"artidoro","Number":"2731","RawContent":null,"Title":"Rename IDataLoader, IDataReader and IDataReaderEstimator","State":"open","Body":"Fixes #2144.\r\n\r\nAs discussed in the issue, it was agreed that `TextReader`, `BinaryReader` and `IDataReader` were bad names because they overlap with .NET concepts.\r\n\r\nIn this PR I:\r\n1. rename `IDataLoader` to `ILegacyDataLoader` (commit 1).\r\n2. rename `IDataReader` to `IDataLoader` and `IDataReaderEstimator` to `IDataLoaderEstimator` (commit 2).","Url":"https://github.com/dotnet/machinelearning/pull/2731","RelatedDescription":"Open PR \"Rename IDataLoader, IDataReader and IDataReaderEstimator\" (#2731)"},{"Id":"414355875","IsPullRequest":false,"CreatedAt":"2019-02-26T03:51:39","Actor":"codemzs","Number":"2720","RawContent":null,"Title":"Remove and combine Microsoft.ML.UniversalModelFormat.Onnx with Microsoft.ML.Model.OnnxConverter","State":"closed","Body":"towards #2326\r\n","Url":"https://github.com/dotnet/machinelearning/issues/2720","RelatedDescription":"Closed issue \"Remove and combine Microsoft.ML.UniversalModelFormat.Onnx with Microsoft.ML.Model.OnnxConverter\" (#2720)"},{"Id":"414381392","IsPullRequest":true,"CreatedAt":"2019-02-26T01:06:51","Actor":"zeahmed","Number":"2730","RawContent":null,"Title":"Scrubbing FieldAwareFactorizationMachine learner.","State":"open","Body":"This PR partially addressed https://github.com/dotnet/machinelearning/issues/2620\r\n\r\nIn FieldAwareFactorizationMachine related classes, the following tasks were performed.\r\n* Checking to make sure that unnecessary public methods/properties be `internal`.\r\n* Renaming parameters according to standard.\r\n* Creating/Refactoring samples according to standards.\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/2730","RelatedDescription":"Open PR \"Scrubbing FieldAwareFactorizationMachine learner.\" (#2730)"},{"Id":"414380910","IsPullRequest":true,"CreatedAt":"2019-02-26T01:04:44","Actor":"najeeb-kazmi","Number":"2729","RawContent":null,"Title":"Adding sample for LightGbm ranking","State":"open","Body":"Replacing PR #2704 and #2650 as I messed up commit history there.\r\n\r\nFixes #2530\r\nFixes #776\r\n\r\n* Adds a sample for LightGbm ranking.\r\n* Cleans up namespaces in Microsoft.ML.Samples project.\r\n* Addresses feedback from previous PRs","Url":"https://github.com/dotnet/machinelearning/pull/2729","RelatedDescription":"Open PR \"Adding sample for LightGbm ranking\" (#2729)"},{"Id":"413653324","IsPullRequest":true,"CreatedAt":"2019-02-26T01:03:16","Actor":"najeeb-kazmi","Number":"2704","RawContent":null,"Title":"Adding a sample for LightGbm ranking","State":"closed","Body":"Replacing PR #2650 as I messed up commit history there.\r\n\r\nFixes #2530\r\nFixes #776\r\n\r\n- Adds a sample for LightGbm ranking. \r\n- Cleans up namespaces in Microsoft.ML.Samples project.\r\n- Addresses feedback from first round of #2650. ","Url":"https://github.com/dotnet/machinelearning/pull/2704","RelatedDescription":"Closed or merged PR \"Adding a sample for LightGbm ranking\" (#2704)"},{"Id":"414380107","IsPullRequest":false,"CreatedAt":"2019-02-26T01:01:09","Actor":"Ivanidzo4ka","Number":"2728","RawContent":null,"Title":"Ranker Evaluate doesn't allow you specify metric parameters.","State":"open","Body":"https://github.com/dotnet/machinelearning/blob/3b9d407d9dc4f8c46fa85ab80575ef16d74df6df/src/Microsoft.ML.Data/TrainCatalog.cs#L626\r\nI can't specify how deep I want to calculate NDCG@i (i.e. i maximum), I can't specify custom gains.","Url":"https://github.com/dotnet/machinelearning/issues/2728","RelatedDescription":"Open issue \"Ranker Evaluate doesn't allow you specify metric parameters.\" (#2728)"},{"Id":"414373920","IsPullRequest":true,"CreatedAt":"2019-02-26T00:33:57","Actor":"Anipik","Number":"2727","RawContent":null,"Title":"Added performance tests for small array input for cpumath functions","State":"open","Body":"I also tried Unrolling the loop for small input. \r\nFor small functions like add, scale unrolling the loop only shows improvement for length 13-15\r\nFor little complex functions like dotproduct , loop is always better than the unrolling scenario.\r\n\r\nThe pr adds the performance tests for small inputs software implementation\r\n","Url":"https://github.com/dotnet/machinelearning/pull/2727","RelatedDescription":"Open PR \"Added performance tests for small array input for cpumath functions\" (#2727)"},{"Id":"414350523","IsPullRequest":false,"CreatedAt":"2019-02-26T00:31:46","Actor":"rogancarr","Number":"2719","RawContent":null,"Title":"Enumerable over IDataView cannot be Zip'ped","State":"closed","Body":"When an enumerator over an `IDataView` is `zip`ped with Linq, the following error is thrown:\r\n\r\n\"**System.InvalidOperationException**: Collection was modified; enumeration operation may not execute.\"\r\n\r\nHere is an example:\r\n```cs\r\nvar myEnumerable = mlContext.CreateEnumerable<MyClass>(data, true);\r\nforeach (var rowAndNumber in myEnumerable.Zip(numbers, (row, number) => new { row, number }))\r\n{\r\n    Console.WriteLine($\"{rowAndNumber.row.Column}\\t{rowAndNumber.number}\");\r\n}\r\n```\r\n\r\nI marked this as a bug, but is this expected behavior?","Url":"https://github.com/dotnet/machinelearning/issues/2719","RelatedDescription":"Closed issue \"Enumerable over IDataView cannot be Zip'ped\" (#2719)"},{"Id":"414369082","IsPullRequest":false,"CreatedAt":"2019-02-26T00:13:46","Actor":"wschin","Number":"2726","RawContent":null,"Title":"Text loader v.s in-memory data structure in examples","State":"open","Body":"We often starts our trainer examples with text loader but recently I feel loading text into `IDataView` is not directly related to the actual training procedure. If we use\r\n```csharp\r\n        /// <summary>\r\n        /// Example with one binary label and 10 feature values.\r\n        /// </summary>\r\n        public class BinaryLabelFloatFeatureVectorSample\r\n        {\r\n            public bool Label;\r\n\r\n            [VectorType(_simpleBinaryClassSampleFeatureLength)]\r\n            public float[] Features;\r\n        }\r\n```\r\nas our in-memory example, we can create more [flexible examples](https://github.com/dotnet/machinelearning/blob/7cc208c36edec554b6353a3a268cfb5e49274d17/docs/samples/Microsoft.ML.Samples/Dynamic/Trainers/BinaryClassification/SDCASupportVectorMachine.cs#L12) like [scikit-learn ones (where data matrix is float matrix)](https://scikit-learn.org/stable/modules/svm.html#multi-class-classification) and make ML.NET's learning curve smoother (because users don't need to learn, text loader, the loaded data, and trainer at the same time).\r\n\r\ncc @shmoradims, @rogancarr, @sfilipi.","Url":"https://github.com/dotnet/machinelearning/issues/2726","RelatedDescription":"Open issue \"Text loader v.s in-memory data structure in examples\" (#2726)"},{"Id":"414367658","IsPullRequest":false,"CreatedAt":"2019-02-26T00:08:10","Actor":"Ivanidzo4ka","Number":"2725","RawContent":null,"Title":"Are we happy with Anomaly Detection metrics?","State":"open","Body":"Right now it has two properties.\r\nAUC and DetectionRateAtKFalsePosititives.\r\nWe describe `DetectionRateAtKFalsePosititives`\r\nas:\r\n```\r\n /// This is computed as follows:\r\n        /// 1.Sort the test examples by the output of the anomaly detector in descending order of scores.\r\n        /// 2.Among the top K False Positives,  compute ratio :  (True Positive @ K)  / (Total anomalies in test data)\r\n        /// Example confusion matrix for anomaly detection:\r\n        ///                            Anomalies (in test data)  | Non-Anomalies (in test data)\r\n        ///  Predicted Anomalies     :         TP                |           FP\r\n        ///  Predicted Non-Anomalies :         FN                |           TN\r\n```\r\nand we expose nothing of that.\r\nNo True positive, no total anomalies, no K which user need to save somewhere else.\r\n\r\nShould we expand this metrics right now or wait till v1.0 release?\r\n","Url":"https://github.com/dotnet/machinelearning/issues/2725","RelatedDescription":"Open issue \"Are we happy with Anomaly Detection metrics?\" (#2725)"},{"Id":"414359914","IsPullRequest":false,"CreatedAt":"2019-02-25T23:54:09","Actor":"rogancarr","Number":"2723","RawContent":null,"Title":"CreateEnumerable with reused-object and CustomMapping returns identical rows","State":"closed","Body":"When a pipeline with a `CustomMapping` is enumerated over with `CreateEnumerable(reuseRowObject: true)`, the row produced will be identical: The last row in the IDataView.\r\n\r\nThis is a reproducing example that can be run from the `Functional.Tests` project:\r\n```cs\r\nvar mlContext = new MLContext(seed: 1, conc: 1);\r\n\r\n// Load the Iris dataset\r\nvar data = mlContext.Data.ReadFromTextFile<Iris>(\r\n    GetDataPath(TestDatasets.iris.trainFilename),\r\n    hasHeader: TestDatasets.iris.fileHasHeader, \r\n    separatorChar: TestDatasets.iris.fileSeparator);\r\n\r\n// Subsample it down to the first 10 rows\r\nint numSamples = 10;\r\ndata = mlContext.Data.TakeRows(data, numSamples);\r\n\r\n// Create a function that generates a random number as a column.\r\n// Save this number for debugging.\r\nvar rng = new Random(1);\r\nvar randomNumbers = new List<int>(capacity: numSamples) { };\r\nAction<Iris, IrisWithGroup> generateGroupId = (input, output) =>\r\n{\r\n    var randomNumber = rng.Next(0, 30);\r\n    randomNumbers.Add(randomNumber);\r\n    Output.WriteLine($\"{input.Label}\\t{input.PetalLength}\\t{randomNumbers.Count()}\\t{randomNumber}\\t{randomNumbers.Sum()}\");\r\n    output.Label = input.Label;\r\n    output.GroupId = randomNumber;\r\n    output.PetalLength = input.PetalLength;\r\n    output.PetalWidth = input.PetalWidth;\r\n    output.SepalLength = input.SepalLength;\r\n    output.SepalWidth = input.SepalWidth;\r\n};\r\n\r\n// Create a pipeline to execute the custom function.\r\nvar pipeline = mlContext.Transforms.CustomMapping(generateGroupId, null);\r\n\r\n// Transform the data\r\nvar transformedData = pipeline.Fit(data).Transform(data);\r\n\r\n// Verify that the column has the correct data.\r\n// Bug: Switch this to `reuseRowObject: false` for correct behavior\r\nvar transformedRows = mlContext.CreateEnumerable<IrisWithGroup>(transformedData, reuseRowObject: true).Take(numSamples).ToArray();\r\nAssert.Equal(randomNumbers.Count(), transformedRows.Length);\r\nfor (int i = 0; i < transformedRows.Length; i++)\r\n    Output.WriteLine($\"{transformedRows[i].Label}\\t{transformedRows[i].PetalLength}\\t{transformedRows[i].GroupId}\\t{randomNumbers[i]}\");\r\n```\r\n\r\nNote that the iterator over the enumerable prints the last row over and over again.","Url":"https://github.com/dotnet/machinelearning/issues/2723","RelatedDescription":"Closed issue \"CreateEnumerable with reused-object and CustomMapping returns identical rows\" (#2723)"},{"Id":"414362751","IsPullRequest":true,"CreatedAt":"2019-02-25T23:49:56","Actor":"sfilipi","Number":"2724","RawContent":null,"Title":"More namespace alignment","State":"open","Body":"More work on #2326 by : \r\n1- First commit\r\nsubstituting :\r\n\r\nMicrosoft.ML.Trainers.Ensemble.DiversityMeasure\r\nMicrosoft.ML.Trainers.Ensemble.FeatureSelector\r\nMicrosoft.ML.Trainers.Ensemble.SubModelSelector\r\n\r\nwith:\r\nMicrosoft.ML.Trainers.Ensemble\r\n\r\n2 - Second commit:\r\nMicrosoft.ML.FactorizationMachine becomes Microsoft.ML.Trainers.FactorizationMachine\r\nMicrosoft.ML.EntryPoints.JsonUtils becomes Microsoft.ML.EntryPoints\r\n\r\n3- third commit\r\nMicrosoft.ML.ImageAnalytics.EntryPoints becomes Microsoft.ML.ImageAnalytics\r\nMicrosoft.ML.Internal.Calibration becomes Microsoft.Ml.Calibrator\r\n\r\n4- Fourth commit\r\nMicrosoft.ML.StaticPipe.Runtime changes to Microsoft.ML.StaticPipe\r\n\r\neasier to review commit by commit. \r\n\r\nI have used the VS replace all + reordering namespaces through Ctrl+R+G ","Url":"https://github.com/dotnet/machinelearning/pull/2724","RelatedDescription":"Open PR \"More namespace alignment\" (#2724)"},{"Id":"414356716","IsPullRequest":true,"CreatedAt":"2019-02-25T23:27:14","Actor":"codemzs","Number":"2722","RawContent":null,"Title":"Remove and combine Microsoft.ML.UniversalModelFormat.Onnx with Microsoft.ML.Model.OnnxConverter.","State":"open","Body":"fixes #2721\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/2722","RelatedDescription":"Open PR \"Remove and combine Microsoft.ML.UniversalModelFormat.Onnx with Microsoft.ML.Model.OnnxConverter.\" (#2722)"},{"Id":"414355960","IsPullRequest":false,"CreatedAt":"2019-02-25T23:24:28","Actor":"codemzs","Number":"2721","RawContent":null,"Title":"Remove and combine Microsoft.ML.UniversalModelFormat.Onnx with Microsoft.ML.Model.OnnxConverter","State":"open","Body":"towards #2326\r\n","Url":"https://github.com/dotnet/machinelearning/issues/2721","RelatedDescription":"Open issue \"Remove and combine Microsoft.ML.UniversalModelFormat.Onnx with Microsoft.ML.Model.OnnxConverter\" (#2721)"},{"Id":"414343076","IsPullRequest":true,"CreatedAt":"2019-02-25T23:09:45","Actor":"codemzs","Number":"2715","RawContent":null,"Title":"Drop Microsoft.ML.Training and replace it with Microsoft.ML.Trainers.","State":"closed","Body":"fixes #2713\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/2715","RelatedDescription":"Closed or merged PR \"Drop Microsoft.ML.Training and replace it with Microsoft.ML.Trainers.\" (#2715)"},{"Id":"414333079","IsPullRequest":false,"CreatedAt":"2019-02-25T23:09:44","Actor":"codemzs","Number":"2713","RawContent":null,"Title":"Drop Microsoft.ML.Training and replace it with Microsoft.ML.Trainers","State":"closed","Body":"towards #2326","Url":"https://github.com/dotnet/machinelearning/issues/2713","RelatedDescription":"Closed issue \"Drop Microsoft.ML.Training and replace it with Microsoft.ML.Trainers\" (#2713)"},{"Id":"414345802","IsPullRequest":true,"CreatedAt":"2019-02-25T22:51:43","Actor":"Ivanidzo4ka","Number":"2718","RawContent":null,"Title":"Remove Ensemble from Microsoft.ML nuget","State":"open","Body":"fix #2717","Url":"https://github.com/dotnet/machinelearning/pull/2718","RelatedDescription":"Open PR \"Remove Ensemble from Microsoft.ML nuget\" (#2718)"},{"Id":"414344958","IsPullRequest":false,"CreatedAt":"2019-02-25T22:49:12","Actor":"Ivanidzo4ka","Number":"2717","RawContent":null,"Title":"Ensemble project shouldn't be part of Microsoft.ML","State":"open","Body":"From public perspective it's just dll with 0 public classes and none of other projects in Microsoft.ML rely on it.","Url":"https://github.com/dotnet/machinelearning/issues/2717","RelatedDescription":"Open issue \"Ensemble project shouldn't be part of Microsoft.ML\" (#2717)"},{"Id":"414343258","IsPullRequest":true,"CreatedAt":"2019-02-25T22:43:54","Actor":"artidoro","Number":"2716","RawContent":null,"Title":"Move ReadFromEnum and CreateEnumerable and add sample","State":"open","Body":"Fixes #2609.\r\n\r\n1. I moved `ReadFromEnumerable` method outside of `ComponentCreation`. I could therefore make the class `ComponentCreation` BestFriend internal, while making the internal methods public. \r\n2. I moved the extension method for `CreateEnumerable` which used to be under `MLContext` to the `Data` extensions where `ReadFromEnumerable` lives. I could therefore make the `CursoringUtils` class internal.\r\n3. I added a sample for `CreateEnumerable` and `ReadFromEnumerable`.\r\n\r\nOnly non trivial changes are in DataViewEnumerable.cs, DataOperationsCatalog.cs, MLContext.cs, TypedCursor.cs, ComponentCreation.cs. The rest are simply adjusting the code to use `mlContext.Data.CreateEnumerable`.","Url":"https://github.com/dotnet/machinelearning/pull/2716","RelatedDescription":"Open PR \"Move ReadFromEnum and CreateEnumerable and add sample\" (#2716)"},{"Id":"414333531","IsPullRequest":false,"CreatedAt":"2019-02-25T22:16:10","Actor":"codemzs","Number":"2714","RawContent":null,"Title":" Microsoft.ML.Internal.Calibration and Microsoft.ML.Internal.Internallearn should be hidden/moved/renamed.","State":"open","Body":"towards #2326","Url":"https://github.com/dotnet/machinelearning/issues/2714","RelatedDescription":"Open issue \" Microsoft.ML.Internal.Calibration and Microsoft.ML.Internal.Internallearn should be hidden/moved/renamed.\" (#2714)"},{"Id":"414208070","IsPullRequest":true,"CreatedAt":"2019-02-25T21:48:19","Actor":"eerhardt","Number":"2707","RawContent":null,"Title":"Make DataViewRowId not act like a number.","State":"closed","Body":"- Remove it from the NumberDataViewType.\r\n- Remove any method/operator that makes it feel like a number.\r\n\r\nWorking towards #2297","Url":"https://github.com/dotnet/machinelearning/pull/2707","RelatedDescription":"Closed or merged PR \"Make DataViewRowId not act like a number.\" (#2707)"},{"Id":"414320247","IsPullRequest":true,"CreatedAt":"2019-02-25T21:41:27","Actor":"eerhardt","Number":"2712","RawContent":null,"Title":"Rename DataView Metadata to Annotations.","State":"open","Body":"I have ensured there is no public API with the word `metadata` in it anymore. The only place this occurs is in the `Microsoft.ML.UniversalModelFormat.Onnx` namespace, which is a different type of \"metadata\".\r\n\r\nThere are still internal/private usages of the term \"metadata\", but this PR is large enough. We can fix those in a subsequent change.\r\n\r\nFix #1843\r\nFix #2297 \r\n","Url":"https://github.com/dotnet/machinelearning/pull/2712","RelatedDescription":"Open PR \"Rename DataView Metadata to Annotations.\" (#2712)"},{"Id":"414309883","IsPullRequest":false,"CreatedAt":"2019-02-25T21:14:14","Actor":"rogancarr","Number":"2711","RawContent":null,"Title":"Create functional tests for all V1 Data Transformation scenarios","State":"open","Body":"As laid out in #2498 , we need scenarios to cover the Data Transformation functionality we want fully supported in V1.\r\n\r\n- Extensible transformation: It should be possible to write simple row-mapping transforms.\r\nExamples: \"I can add custom steps to my pipeline such as creating a new column that is the addition of two other columns, or easily add cosine similarity, without having to create my own build of ML.NET.\r\n- I can modify settings in the TextFeaturizer to update the number of word-grams and char-grams used along with things like the normalization.\t \t \t \r\n- I can apply normalization to the columns of my data","Url":"https://github.com/dotnet/machinelearning/issues/2711","RelatedDescription":"Open issue \"Create functional tests for all V1 Data Transformation scenarios\" (#2711)"},{"Id":"414234005","IsPullRequest":true,"CreatedAt":"2019-02-25T18:04:22","Actor":"wschin","Number":"2710","RawContent":null,"Title":"Make text loaders consistent","State":"open","Body":"Another attempt to fix #2472.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/2710","RelatedDescription":"Open PR \"Make text loaders consistent\" (#2710)"},{"Id":"414233798","IsPullRequest":true,"CreatedAt":"2019-02-25T18:03:50","Actor":"artidoro","Number":"2709","RawContent":null,"Title":"Renaming ColumnInfo to ColumnOptions","State":"open","Body":"Fixes #2554.\r\n\r\nAs discussed in the issue, we decided to rename `ColumnInfo` to `ColumnOptions`.\r\nI used Visual Studio to find and replace instances of `ColumnInfo`. I did an operation of find and replace for each different casing. I also went over the changes to double check.","Url":"https://github.com/dotnet/machinelearning/pull/2709","RelatedDescription":"Open PR \"Renaming ColumnInfo to ColumnOptions\" (#2709)"},{"Id":"414216728","IsPullRequest":false,"CreatedAt":"2019-02-25T17:22:40","Actor":"rogancarr","Number":"2708","RawContent":null,"Title":"Log loss metric can be Infinity or NaN","State":"open","Body":"For binary classification (and perhaps multiclass classification) the `log loss` can be infinite. The `log loss reduction` can also be negative infinity, as it is a shifting and rescaling of the `log loss`.\r\n\r\nSimilarly, the `log loss` can be a `NaN`. This is specifically guarded against in the code, but does seems like a bug too.\r\n\r\nThe culprit for both cases lies in the initial calculations in the `ProcessRow()` method of the `Aggregator` for the `BinaryClassifierEvaluator`.\r\n\r\n```cs\r\nDouble logloss;\r\nif (!Single.IsNaN(prob))\r\n{\r\n    if (_label > 0)\r\n    {\r\n        // REVIEW: Should we bring back the option to use ln instead of log2?\r\n        logloss = -Math.Log(prob, 2);\r\n    }\r\n    else\r\n        logloss = -Math.Log(1.0 - prob, 2);\r\n}\r\nelse\r\n    logloss = Double.NaN;\r\n```\r\n\r\nI propose that to guard against infinities we add an epsilon before taking the log.\r\n\r\nTo guard against `NaNs`, we will need to fix the probability calculations (e.g. in the calibrator(s)).","Url":"https://github.com/dotnet/machinelearning/issues/2708","RelatedDescription":"Open issue \"Log loss metric can be Infinity or NaN\" (#2708)"},{"Id":"413628805","IsPullRequest":true,"CreatedAt":"2019-02-24T02:20:09","Actor":"eerhardt","Number":"2703","RawContent":null,"Title":"Move the builder classes in DataViewSchema","State":"closed","Body":"- Move MetadataBuilder to be DataViewSchema.Metadata.Builder.\r\n- Move SchemaBuilder to DataViewSchema.Builder.\r\n- Rename `GetMetadata` and `GetSchema` to `ToMetadata` and `ToSchema`\r\n\r\nWorking towards #2297\r\n\r\nThere are 2 tasks left before that issue can be closed.\r\n\r\n1. Rename 'metadata' to 'annotations' - a very large change.\r\n2. Remove anything from DataViewRowId that makes it seem like a number.","Url":"https://github.com/dotnet/machinelearning/pull/2703","RelatedDescription":"Closed or merged PR \"Move the builder classes in DataViewSchema\" (#2703)"},{"Id":"413723002","IsPullRequest":true,"CreatedAt":"2019-02-23T22:10:54","Actor":"codemzs","Number":"2706","RawContent":null,"Title":"Remove MD5Hasher.","State":"closed","Body":"fixes #2696\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/2706","RelatedDescription":"Closed or merged PR \"Remove MD5Hasher.\" (#2706)"},{"Id":"413656877","IsPullRequest":true,"CreatedAt":"2019-02-23T14:24:14","Actor":"singlis","Number":"2705","RawContent":null,"Title":"Fixing the project reference in the nuget packages for OnnxTransformer","State":"closed","Body":"- Fixes the project reference path for OnnxTransformer.\r\nFound while fixing #689, moved to separate commit.","Url":"https://github.com/dotnet/machinelearning/pull/2705","RelatedDescription":"Closed or merged PR \"Fixing the project reference in the nuget packages for OnnxTransformer\" (#2705)"}],"ResultType":"GitHubIssue"}},"RunOn":"2019-02-26T05:30:59.6528671Z","RunDurationInMilliseconds":969}