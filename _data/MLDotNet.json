{"Data":{"GitHub":{"Issues":[{"Id":"403452422","IsPullRequest":false,"CreatedAt":"2019-01-26T15:33:31","Actor":"ThomasMuhr","Number":"2255","RawContent":null,"Title":"linqpad fails to load ml.net because of wrong package definition","State":"open","Body":"### System information\r\n\r\n- **OS Windows 10**:\r\n- **.NET Version (latest**: \r\n\r\n### Issue\r\n\r\n- **What did you do?**\r\nLoad nuget in LinqPad 5\r\n\r\n- **What happened?**\r\nError reading a falsely formatted  attribute in [nontent.types].xml\r\n<Override PartName=\"//LICENSE\" ContentType=\"application/octet\" />\r\nThe two slaches //LICENSE prevent loading\r\n\r\n- **What did you expect?**\r\nThat it loads without hassle!\r\n\r\n\r\n### Source code / logs\r\n\r\nPlease paste or attach the code or logs or traces that would be helpful to diagnose the issue you are reporting.\r\n","Url":"https://github.com/dotnet/machinelearning/issues/2255","RelatedDescription":"Open issue \"linqpad fails to load ml.net because of wrong package definition\" (#2255)"},{"Id":"403401444","IsPullRequest":true,"CreatedAt":"2019-01-26T03:44:53","Actor":"eerhardt","Number":"2254","RawContent":null,"Title":"Move IDataView to Microsoft.Data.DataView namespace.","State":"open","Body":"Renaming the namespace of the IDataView types.\r\n\r\nFollow up to #1860 \r\n\r\nI also added a few copyrights where they were missing.","Url":"https://github.com/dotnet/machinelearning/pull/2254","RelatedDescription":"Open PR \"Move IDataView to Microsoft.Data.DataView namespace.\" (#2254)"},{"Id":"403384908","IsPullRequest":false,"CreatedAt":"2019-01-26T00:46:35","Actor":"Anipik","Number":"2253","RawContent":null,"Title":"AvxIntrinsics.DotU is Slower than the native version","State":"open","Body":"We can verify this by running the benchmark https://github.com/dotnet/machinelearning/blob/master/test/Microsoft.ML.Benchmarks/StochasticDualCoordinateAscentClassifierBench.cs#L157\r\n\r\n``` ini\r\n\r\nBenchmarkDotNet=v0.11.3, OS=Windows 10.0.17763.253 (1809/October2018Update/Redstone5)\r\nIntel Xeon CPU E5-1650 v4 3.60GHz, 1 CPU, 12 logical and 6 physical cores\r\n.NET Core SDK=3.0.100-preview-009812\r\n  [Host]     : .NET Core 2.1.6 (CoreCLR 4.6.27019.06, CoreFX 4.6.27019.05), 64bit RyuJIT\r\n  Job-RQXZIO : .NET Core 2.1.6 (CoreCLR 4.6.27019.06, CoreFX 4.6.27019.05), 64bit RyuJIT\r\n\r\nArguments=/p:Configuration=Release  Toolchain=netcoreapp2.1  MaxIterationCount=20  \r\nWarmupCount=1  \r\n\r\n```\r\n|      Method |     (netcoreapp2.1)Mean |    Error |   StdDev |        netcoreapp3.0 |\r\n|------------ |--------------:|---------:|---------:|--------------------:|\r\n| PredictIris | 515.6 ns | 3.097 ns | 2.745 ns | 620.3ns |\r\n\r\nif we use ```UseIntrinsics=false``` Then we get the same performance for netcoreapp3.0\r\n\r\nI verified using the perfview that the cause of regression is DotU. The Inclusive time fot DotU on netcoreapp3.0  is 95ns and on native version of cpumath is 11 ns\r\n\r\n\r\ncc @danmosemsft @adamsitnik @tannergooding @eerhardt ","Url":"https://github.com/dotnet/machinelearning/issues/2253","RelatedDescription":"Open issue \"AvxIntrinsics.DotU is Slower than the native version\" (#2253)"},{"Id":"403379725","IsPullRequest":false,"CreatedAt":"2019-01-26T00:12:59","Actor":"CESARDELATORRE","Number":"2252","RawContent":null,"Title":"Lack of support for UWP apps in ML.NET","State":"open","Body":"Current version (0.9 and 0.10) don't support UWP apps properly.\r\n\r\nSee additional details in this Blog Post:\r\nhttps://xamlbrewer.wordpress.com/2019/01/25/machine-learning-with-ml-net-in-uwp-clustering/ \r\n\r\nRelated issues:\r\nhttps://github.com/dotnet/machinelearning/issues/1736\r\nhttps://github.com/dotnet/machinelearning/issues/1595\r\n\r\nSUGGESTED APPROACH:\r\n\r\nUsually, the common scenario for UWP apps (visual desktop applications) is just about scoring a model.\r\nThe same common scenario for ARM based platforms like Xamarin on iOS and Android.\r\n(ARM has nothing to do with this #2252 issue, it just happens that we still don't support ARM, neither)\r\n\r\nThe suggested approach would be to split ML.NET components/NuGet packages so the scoring components are segregated from the rest of ML.NET. \r\n\r\nAchieving support in UWP and ARM just for the \"scoring part\" of ML.NET might be easier and require less cost/work in testing and development than achieving support for the whole ML.NET (training/test model area).\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/2252","RelatedDescription":"Open issue \"Lack of support for UWP apps in ML.NET\" (#2252)"},{"Id":"403374666","IsPullRequest":false,"CreatedAt":"2019-01-25T23:43:39","Actor":"TomFinley","Number":"2251","RawContent":null,"Title":"IPredictor and related parts hiding","State":"open","Body":"We have a few types inside `IPredictor.cs` that are perhaps useful for internal infrastructure, but are not directly useful from the point of view of the `IEstimator`/`ITransformer`/`MLContext` public API.\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/3e03fcef46e0bdd6961e0cccb7cc490ab535fbaf/src/Microsoft.ML.Core/Prediction/IPredictor.cs#L10\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/3e03fcef46e0bdd6961e0cccb7cc490ab535fbaf/src/Microsoft.ML.Core/Prediction/IPredictor.cs#L31\r\n\r\nThe thing that makes me the most nervous are things like `IPredictorProducing` and `IDistPredictorProducing`, which are definitely marker interfaaces that we don't want, but I would argue we don't really want any of this to be public.\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/3e03fcef46e0bdd6961e0cccb7cc490ab535fbaf/src/Microsoft.ML.Core/Prediction/IPredictor.cs#L43\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/3e03fcef46e0bdd6961e0cccb7cc490ab535fbaf/src/Microsoft.ML.Core/Prediction/IPredictor.cs#L67\r\n\r\nThere are a significant number of side effects from this, including the hiding of many other APIs that we want hidden anyway, since anything that is part of the `IEstimator`/`ITransformer`/`IDataView`/`MLConext` idiom does not take an `IPredictor` (it *produces* things that implement that interface, but generally we do not use that interface). So this will be a driver for hiding many other things.","Url":"https://github.com/dotnet/machinelearning/issues/2251","RelatedDescription":"Open issue \"IPredictor and related parts hiding\" (#2251)"},{"Id":"403347041","IsPullRequest":true,"CreatedAt":"2019-01-25T23:16:57","Actor":"Anipik","Number":"2248","RawContent":null,"Title":"Enabling the tests to run on netcoreapp3.0 without Intrinsics","State":"closed","Body":"The 3.0 is supported on ci as well as local environments.\r\n\r\nThe change will enable people to run the tests with netcoreapp3.0 and have the possibility of using the native implementation of cpumath functions\r\n\r\nIt helps to distinguish between the regressions caused by netcoreapp3.0 or new Intrinsics","Url":"https://github.com/dotnet/machinelearning/pull/2248","RelatedDescription":"Closed or merged PR \"Enabling the tests to run on netcoreapp3.0 without Intrinsics\" (#2248)"},{"Id":"403365063","IsPullRequest":true,"CreatedAt":"2019-01-25T22:56:07","Actor":"Ivanidzo4ka","Number":"2250","RawContent":null,"Title":"Expose schema for prediction engine","State":"open","Body":"towards https://github.com/dotnet/machinelearning/issues/2233\r\nI don't think our current work with metadata is best thing we can offer to the users, but at least this changes can unblock whole possibility to lookup into metadata for prediction engine.\r\n@TomFinley  @CESARDELATORRE ","Url":"https://github.com/dotnet/machinelearning/pull/2250","RelatedDescription":"Open PR \"Expose schema for prediction engine\" (#2250)"},{"Id":"403357373","IsPullRequest":false,"CreatedAt":"2019-01-25T22:26:25","Actor":"eerhardt","Number":"2249","RawContent":null,"Title":"Internalize or remove Zlib implementation","State":"open","Body":"We have public Zlib types. We should at least make them internal, and remove them if possible.\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/0c62e30b4d9eabb60322b2a3e75bc90e20007889/src/Microsoft.ML.Data/DataLoadSave/Binary/Zlib/ZDeflateStream.cs#L10","Url":"https://github.com/dotnet/machinelearning/issues/2249","RelatedDescription":"Open issue \"Internalize or remove Zlib implementation\" (#2249)"},{"Id":"402924395","IsPullRequest":true,"CreatedAt":"2019-01-25T22:24:32","Actor":"najeeb-kazmi","Number":"2234","RawContent":null,"Title":"Adding attribution info for the Iris dataset","State":"closed","Body":"Adding attribution info for the Iris dataset\r\n","Url":"https://github.com/dotnet/machinelearning/pull/2234","RelatedDescription":"Closed or merged PR \"Adding attribution info for the Iris dataset\" (#2234)"},{"Id":"403263774","IsPullRequest":true,"CreatedAt":"2019-01-25T19:37:24","Actor":"eerhardt","Number":"2246","RawContent":null,"Title":"Disable publishing to myget","State":"closed","Body":"Fix #2244\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/2246","RelatedDescription":"Closed or merged PR \"Disable publishing to myget\" (#2246)"},{"Id":"403253739","IsPullRequest":false,"CreatedAt":"2019-01-25T19:37:24","Actor":"eerhardt","Number":"2244","RawContent":null,"Title":"Official builds are broken because myget is full","State":"closed","Body":"We are not getting official builds because the step that publishes the NuGet package to myget is failing because our feed is full. See https://github.com/dotnet/core-eng/issues/5070.\r\n\r\nWe should disable this step, for now, until the underlying myget feed is fixed.\r\n\r\n/cc @shauheen @safern @Ivanidzo4ka ","Url":"https://github.com/dotnet/machinelearning/issues/2244","RelatedDescription":"Closed issue \"Official builds are broken because myget is full\" (#2244)"},{"Id":"403291754","IsPullRequest":false,"CreatedAt":"2019-01-25T19:00:12","Actor":"abgoswam","Number":"2247","RawContent":null,"Title":"Adding ModelParameters concept in the ML.NET documentation","State":"open","Body":"We should probably consider adding ModelParameters concept in the ML.NET documentation  \r\n(albeit one of the low-priority concepts)\r\n\r\nRelated to #1866 \r\n\r\n@eerhardt  @TomFinley  @sfilipi ","Url":"https://github.com/dotnet/machinelearning/issues/2247","RelatedDescription":"Open issue \"Adding ModelParameters concept in the ML.NET documentation\" (#2247)"},{"Id":"402936797","IsPullRequest":true,"CreatedAt":"2019-01-25T17:57:35","Actor":"Ivanidzo4ka","Number":"2236","RawContent":null,"Title":"Add sample for stop words removing.","State":"closed","Body":"Addresses #1996","Url":"https://github.com/dotnet/machinelearning/pull/2236","RelatedDescription":"Closed or merged PR \"Add sample for stop words removing.\" (#2236)"},{"Id":"403262592","IsPullRequest":true,"CreatedAt":"2019-01-25T17:47:03","Actor":"TomFinley","Number":"2245","RawContent":null,"Title":"No loader on APIs for ValueToKey/OneHotEncoding","State":"open","Body":"Fixes #2231. We should work to scour this more thoroughly once the changes to allow non-public settings objects on `Arguments`/`Settings` classes goes in.\r\n\r\nAlso: I had thought another estimator (stopwords) did not have loader as part of its name as I had thought, but I still fixed the name.","Url":"https://github.com/dotnet/machinelearning/pull/2245","RelatedDescription":"Open PR \"No loader on APIs for ValueToKey/OneHotEncoding\" (#2245)"},{"Id":"403247315","IsPullRequest":true,"CreatedAt":"2019-01-25T17:12:56","Actor":"wschin","Number":"2243","RawContent":null,"Title":"[WIP] Public Interface of RegressionTree and TreeEnsemble","State":"open","Body":"This PR proposes some changes to make RegressionTree and TreeEnsemble not mutable to users. Our strategy is\r\n\r\n1. Create wrapper classes of RegressionTreeView and TreeEnsembleView over their internal relatives. Those wrapper classes are not mutable.\r\n2. Internalize everything (around tree models) which should not be public.\r\n\r\nTHIS PR IS NOT FINISHED YET. Just want to have a preview of our overall plan. My hope is that those two `View`s could finally become the predictors used only for prediction. Hopefully this will fix #1960.","Url":"https://github.com/dotnet/machinelearning/pull/2243","RelatedDescription":"Open PR \"[WIP] Public Interface of RegressionTree and TreeEnsemble\" (#2243)"},{"Id":"403153995","IsPullRequest":false,"CreatedAt":"2019-01-25T13:18:14","Actor":"erustin-ln","Number":"2242","RawContent":null,"Title":"FastTreeBinaryClassificiationTrainer class declaration is incorrect","State":"open","Body":"Using ML.Net 0.9 an error is given when attempting the following - \r\n`var pipeline = mlContext.Transforms.Concatenate(\"Features\", featureNames)\r\n        .Append(mlContext.Transforms.Normalize(\"Features\"))\r\n        .Append(mlContext.BinaryClassification.Trainers.FastTree(numLeaves: 50, numTrees: 50, minDatapointsInLeaves: 20));\r\n\r\n      var model = pipeline.Fit(dataView);\r\n            \r\n      var m = model.LastTransformer.Model;\r\n`\r\n\r\nwhere the error given is - `'TNewTrans' does not contain a definition for 'Model' and no accessible extension method 'Model' accepting a first argument of type 'TNewTrans' could be found (are you missing a using directive or an assembly reference?)`\r\n\r\nAdvise given on gitter is that this is due to the class declaration for FastTreeBinaryClassification (FastTreeClassification.cs : line 106) being incorrect and that in that declaration BinaryPredictionTransformer<IPredictorWithFeatureWeights<float>> should be changed to RegressionPredictionTransformer<FastTreeBinaryModelParameters>","Url":"https://github.com/dotnet/machinelearning/issues/2242","RelatedDescription":"Open issue \"FastTreeBinaryClassificiationTrainer class declaration is incorrect\" (#2242)"},{"Id":"402963382","IsPullRequest":true,"CreatedAt":"2019-01-25T01:09:38","Actor":"Ivanidzo4ka","Number":"2241","RawContent":null,"Title":"Make sure seed works for stratification column in TrainTest and CrossValidate","State":"open","Body":"I hope this is final nail into #1635.\r\nFixes #1635 ","Url":"https://github.com/dotnet/machinelearning/pull/2241","RelatedDescription":"Open PR \"Make sure seed works for stratification column in TrainTest and CrossValidate\" (#2241)"},{"Id":"402963317","IsPullRequest":false,"CreatedAt":"2019-01-25T01:09:22","Actor":"fedoranimus","Number":"2240","RawContent":null,"Title":"Help utilizing multi-column vectors","State":"open","Body":"### System information\r\n\r\n- **OS version/distro**: Windows 10\r\n- **.NET Version (eg., dotnet --info)**:  2.1.5\r\n\r\n### Issue\r\n\r\n- **What did you do?**\r\nIn my migration to v0.8, I'm moving away from the legacy API and have data that consists of over 400 columns. Previously, by manually mapping each column, I achieved results from evaluation:\r\n```\r\nRMS = 1.02567798627118\r\nRSquared = 0.993830469856289\r\n```\r\n\r\nNow, I'm reading in the columns as multi-column vectors (note: column names have been obfuscated here):\r\n```\r\nTextLoader textLoader = mlContext.Data.TextReader(new TextLoader.Arguments()\r\n            {\r\n                Column = new TextLoader.Column[] {\r\n                    new TextLoader.Column(\"NumericRelatedData\", DataKind.R4, 0, 359),\r\n                    new TextLoader.Column(\"CategoricalRelatedData\", DataKind.Text, 360, 407),\r\n                    new TextLoader.Column(\"SpecificData1\", DataKind.Text, 408),\r\n                    new TextLoader.Column(\"SpecificData2\", DataKind.Text, 409),\r\n                    new TextLoader.Column(\"SpecificData3\", DataKind.R4, 410),\r\n                    new TextLoader.Column(\"Label\", DataKind.R4, 411)\r\n                },\r\n                HasHeader = true,\r\n                Separator = \",\"\r\n            });\r\n```\r\n\r\n- **What happened?**\r\nI got vastly different results from my model evaluation:\r\n```\r\n*       L1 Loss:        1.543\r\n*       L2 Loss:        182.015\r\n*       RMS:            13.491\r\n*       Loss Function:  182.015\r\n*       R-squared:      -0.067\r\n```\r\n\r\nAdditionally, the model is not explorable, because the class I have to represent a single prediction has each column mapped to a different field, but those fields cannot be identified in the model.\r\n\r\n- **What did you expect?**\r\nI expected identical metrics, since I'm using the same trainer (`FastTree`)\r\n\r\nIt's obvious that I'm not understanding how the multi-column vectors are supposed to work.\r\n\r\n**My question is primarily: Do I have to continue to map each column in the TextLoader (and thus all subsequent uses of it in transformers) to get the results I'd like?**\r\n\r\n### Source code / logs\r\n\r\nI'm asking a very similar question in the [documentation repo](https://github.com/dotnet/docs/issues/9962)\r\n","Url":"https://github.com/dotnet/machinelearning/issues/2240","RelatedDescription":"Open issue \"Help utilizing multi-column vectors\" (#2240)"},{"Id":"402962982","IsPullRequest":true,"CreatedAt":"2019-01-25T01:07:35","Actor":"sfilipi","Number":"2239","RawContent":null,"Title":"WIP - Input output swap","State":"open","Body":"Fixes issue #2064 \r\n\r\n1- Change the order of the parameters from inputColumn, outputColumn to outputColumnName, sourceColumnName. \r\n\r\n2 - Changing the \"source\" parameter name and field in the Columninfo classes, to be \"sourceColumnName\", as suggested.\r\n\r\n3- Changing the \"name\" parameter to \"outputColumnName\" in the:\r\n- estimator extension APIs\r\n- estimator ctors\r\n- column pairs expressed through tuples, because in context it reads better than name.\r\n\r\nNote: in the columnInfo classes i left it to \"name\" because \"outputColumnName\" makes no sense.\r\n\r\n4 - Nit on standardizing the XML comments.\r\n5 - Arranging the order of the parameters to be: outputColumnName, required parameters, nullable sourceColumnName.\r\n6 - fixed some bugs i bumped into. \r\n\r\nBest reviews with pop corn near. ","Url":"https://github.com/dotnet/machinelearning/pull/2239","RelatedDescription":"Open PR \"WIP - Input output swap\" (#2239)"},{"Id":"402948523","IsPullRequest":false,"CreatedAt":"2019-01-25T00:00:39","Actor":"luisquintanilla","Number":"2238","RawContent":null,"Title":"Code Snippet Language Options Visible for Languages Not Yet Available","State":"open","Body":"On the top toolbar there is a dropdown to select the language to display the code snippet in with options for F# and VB. However, when either F# or VB are selected, the code in the code snipped remains the default C# implementation. \n\n---\n#### Document Details\n\n⚠ *Do not edit this section. It is required for docs.microsoft.com ➟ GitHub issue linking.*\n\n* ID: 209d151a-38b8-5ef8-57b9-bbdb0fcdef55\n* Version Independent ID: 0dbd3424-7e4e-8189-5f6b-f46767cc7554\n* Content: [OnnxTransform Class (Microsoft.ML.Transforms)](https://docs.microsoft.com/en-us/dotnet/api/microsoft.ml.transforms.onnxtransform?view=ml-dotnet#feedback)\n* Content Source: [dotnet/xml/Microsoft.ML.Transforms/OnnxTransform.xml](https://github.com/dotnet/ml-api-docs/blob/live/dotnet/xml/Microsoft.ML.Transforms/OnnxTransform.xml)\n* Product: **dotnet-ml-api**\n* GitHub Login: @sfilipi\n* Microsoft Alias: **johalex**","Url":"https://github.com/dotnet/machinelearning/issues/2238","RelatedDescription":"Open issue \"Code Snippet Language Options Visible for Languages Not Yet Available\" (#2238)"},{"Id":"402947185","IsPullRequest":false,"CreatedAt":"2019-01-24T23:54:43","Actor":"singlis","Number":"2237","RawContent":null,"Title":"Remove learningRate argument from FastForest constructor","State":"open","Body":"Started from issue #1983 where there is a comment about learningRate is accessible from the FastForest constructor but not accessible from the FastForest Arguments (now Options) class. After investigating, learningRate is not an argument for FastForest and that it was added to the constructor by mistake. \r\n\r\nFor this issue, the fix is to remove learningRate from the constructor for FastForest and update the code/tests as needed:\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/1baaec31e0477cb17032b8a9a8a8488acb3606af/src/Microsoft.ML.FastTree/RandomForestClassification.cs#L155\r\n\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/2237","RelatedDescription":"Open issue \"Remove learningRate argument from FastForest constructor\" (#2237)"},{"Id":"402646345","IsPullRequest":true,"CreatedAt":"2019-01-24T23:02:08","Actor":"hvitved","Number":"2228","RawContent":null,"Title":"Fix a bug in `ColumnTypeExtensions.SameSizeAndItemType()`","State":"closed","Body":"Hi,\r\n\r\nI came across this when looking at the alerts for this project on LGTM.com (full disclosure: I work on the C# analysis there). It appears to have been introduced recently on https://github.com/dotnet/machinelearning/pull/2131.\r\n\r\nYou can see the original alert on LGTM.com here: https://lgtm.com/projects/g/dotnet/machinelearning/alerts/?mode=tree&lang=csharp&ruleFocus=1506097706076\r\n\r\nBest regards,\r\nTom\r\n\r\n(I will leave these bits below unfilled until you've determined whether this is actually a bug fix or not...)\r\n\r\n- [ ] There's a descriptive title that will make sense to other developers some time from now. \r\n- [ ] There's associated issues. All PR's should have issue(s) associated - unless a trivial self-evident change such as fixing a typo. You can use the format `Fixes #nnnn` in your description to cause GitHub to automatically close the issue(s) when your PR is merged.\r\n- [ ] Your change description explains what the change does, why you chose your approach, and anything else that reviewers should know.\r\n- [ ] You have included any necessary tests in the same PR.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/2228","RelatedDescription":"Closed or merged PR \"Fix a bug in `ColumnTypeExtensions.SameSizeAndItemType()`\" (#2228)"},{"Id":"402933005","IsPullRequest":true,"CreatedAt":"2019-01-24T22:58:17","Actor":"codemzs","Number":"2235","RawContent":null,"Title":"Enhance code coverage bot message.","State":"open","Body":"","Url":"https://github.com/dotnet/machinelearning/pull/2235","RelatedDescription":"Open PR \"Enhance code coverage bot message.\" (#2235)"},{"Id":"402915267","IsPullRequest":false,"CreatedAt":"2019-01-24T22:02:50","Actor":"CESARDELATORRE","Number":"2233","RawContent":null,"Title":"Enable to get ranked-list of predicted labels when performing a multi-class classification prediction","State":"open","Body":"This is a needed scenario that can be pretty common from a business needs perspective.\r\n\r\nWhen using ML.NET code implementing multi-class classification, we’re returning/predicting a single label… \r\n\r\n**Multi-class Classification**\r\n- Label: Original Label of the example.\r\n- Score: Its an array whose length is equal to number of classes and contains probability for each class.\r\n**- PredictedLabel: Predicted class.** _<-- (*) There's a single PredictedLabel_\r\n\r\nBut in many business scenarios, a list of possible labels where something can be classified is also very useful.\r\n\r\n•\tFor instance, a real product might be related to multiple product-categories in an eCommerce, not just one category.\r\n•\tAnother example where this scenario is possible (and we actually have it working), is image classification in TensorFlow, you can get a list of the best labels with a score per each, from the TF model.\r\n\r\nIn fact, the class used to get a prediction is like:\r\n\r\n   ```\r\n public class MyPrediction\r\n    {\r\n        public float[] Score;\r\n\r\n        public string PredictedLabelValue;\r\n    }\r\n```\r\n\r\nSo, we actually get an array of Scores, like here:\r\n\r\n![image](https://user-images.githubusercontent.com/1712635/51705169-bc56b080-1fcf-11e9-8bd2-1ba930359a4a.png)\r\n\r\n**We need a way to map the array of float confidence/score levels back to each original class/label names, in addition to the “single best” PredictedLabelValue.**\r\n\r\nAdditional info provided by **Ivan Matantsev**: \r\n\r\n_Technically it should be accessible via metadata in Schema, but I don’t see any way to access it in transformer.\r\nTheoretically if you load model from file, you can call GetOutputSchema, but if you just do prediction, you don’t have dataview to get Schema you just have example/prediction classes.\r\nSo we either need a way to Expose output Schema in prediction function or to have Transformer which would spit out specific metadata for certain columns._\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/2233","RelatedDescription":"Open issue \"Enable to get ranked-list of predicted labels when performing a multi-class classification prediction\" (#2233)"},{"Id":"402862049","IsPullRequest":true,"CreatedAt":"2019-01-24T19:31:34","Actor":"zeahmed","Number":"2232","RawContent":null,"Title":"ValueMapperTransformer: Added support for loading map from file through dataview.","State":"open","Body":"This fixes #2162. This is the 2nd part where the support for loading the mapping from file is added.","Url":"https://github.com/dotnet/machinelearning/pull/2232","RelatedDescription":"Open PR \"ValueMapperTransformer: Added support for loading map from file through dataview.\" (#2232)"},{"Id":"402813009","IsPullRequest":true,"CreatedAt":"2019-01-24T19:27:01","Actor":"sharwell","Number":"2230","RawContent":null,"Title":"Enable test coverage","State":"closed","Body":"This change works around tonerdo/coverlet#318 to immediately enable correct coverage for test code.","Url":"https://github.com/dotnet/machinelearning/pull/2230","RelatedDescription":"Closed or merged PR \"Enable test coverage\" (#2230)"},{"Id":"402859597","IsPullRequest":false,"CreatedAt":"2019-01-24T19:24:57","Actor":"TomFinley","Number":"2231","RawContent":null,"Title":"Remove IDataLoader from public API surfaces for specifying data","State":"open","Body":"So in \"command line\" world, we have things that look like this:\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/eed91b988fe6850d13255d599c9191c9a9b80aa0/src/Microsoft.ML.Data/Transforms/ValueToKeyMappingTransformer.cs#L116-L123\r\n\r\nThis makes sense, considering that when invoking a command line, you are not working in the context of an existing process but starting a new one, so the most plausible source for data is some file, which we have to specify how to load and so on and so on.\r\n\r\nHowever, then we enter API land, and (understandably, to be clear) people just decided to do a direct translation, as we see below:\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/eed91b988fe6850d13255d599c9191c9a9b80aa0/src/Microsoft.ML.Data/Transforms/ValueToKeyMappingEstimator.cs#L41-L42\r\n\r\nThat the API might resemble command line as a first preference is understandable, but in this specific context of an API, a variance from this trend would make sense. We've invented what amounts to an entirely new API to load data from a source, when we already have mechanisms to do this.\r\n\r\nIf we wanted this to work over input `IDataView`s, which seems to be what the authors are really getting at, then it should just do so directly. This has a few advantages:\r\n\r\n1. No new way of loading files distinct from existing API for that same task,\r\n2. Simpler method signatures,\r\n3. Hides `IDataLoader` transform, which is something relating to #1995 we need to do anyway. (This in particular is why we might consider this to have some greater urgency.)\r\n\r\n/cc @Ivanidzo4ka @sfilipi ","Url":"https://github.com/dotnet/machinelearning/issues/2231","RelatedDescription":"Open issue \"Remove IDataLoader from public API surfaces for specifying data\" (#2231)"},{"Id":"402791302","IsPullRequest":true,"CreatedAt":"2019-01-24T19:10:55","Actor":"sharwell","Number":"2229","RawContent":null,"Title":"Revert \"exclude test folder from codecov.\"","State":"closed","Body":"Reverts dotnet/machinelearning#2227\r\n\r\nPossibly blocked on tonerdo/coverlet#318 (though I would not personally block on that issue).","Url":"https://github.com/dotnet/machinelearning/pull/2229","RelatedDescription":"Closed or merged PR \"Revert \"exclude test folder from codecov.\"\" (#2229)"},{"Id":"402541247","IsPullRequest":true,"CreatedAt":"2019-01-24T05:32:26","Actor":"codemzs","Number":"2227","RawContent":null,"Title":"exclude test folder from codecov.","State":"closed","Body":"\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/2227","RelatedDescription":"Closed or merged PR \"exclude test folder from codecov.\" (#2227)"},{"Id":"402520887","IsPullRequest":true,"CreatedAt":"2019-01-24T03:02:22","Actor":"codemzs","Number":"2226","RawContent":null,"Title":"hot fix.","State":"closed","Body":"Fix master branch, since it broke with changes from @zeahmed.\r\n","Url":"https://github.com/dotnet/machinelearning/pull/2226","RelatedDescription":"Closed or merged PR \"hot fix.\" (#2226)"}],"ResultType":"GitHubIssue"}},"RunOn":"2019-01-27T05:30:55.9785982Z","RunDurationInMilliseconds":1001}