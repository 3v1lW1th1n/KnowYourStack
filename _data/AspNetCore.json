{"Data":{"Blog":{"FeedItems":[{"Title":"Announcing Preview 1 of ASP.NET MVC 5.2.5, Web API 5.2.5, and Web Pages 3.2.5","PublishedOn":"2018-03-19T22:00:27+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today we released Preview 1 of ASP.NET MVC 5.2.5, Web API 5.2.5, and Web Pages 3.2.5 on NuGet. This is a patch release that contains only bug fixes. You can find the full list of bug fixes for this...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/03/19/announcing-preview-1-of-asp-net-mvc-5-2-5-web-api-5-2-5-and-web-pages-3-2-5/","RawContent":null},{"Title":"ASP.NET Core 2.1.0-preview1: Functional testing of MVC applications","PublishedOn":"2018-03-05T18:30:28+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"For ASP.NET Core 2.1 we have created a new package, Microsoft.AspNetCore.Mvc.Testing, to help streamline in-memory end-to-end testing of MVC applications using TestServer. This package takes care of...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/03/05/asp-net-core-2-1-0-preview1-functional-testing-of-mvc-applications/","RawContent":null},{"Title":"ASP.NET Core 2.1.0-preview1: GDPR enhancements","PublishedOn":"2018-03-04T19:21:40+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"2018 sees the introduction of the General Data Protection Regulation, an EU framework to allow EU citizens to control, correct and delete their data, no matter where in the word it is held. In ASP.NET...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/03/04/asp-net-core-2-1-0-preview1-gdpr-enhancements/","RawContent":null},{"Title":"ASP.NET Core 2.1.0-preview1: Introducing Identity UI as a library","PublishedOn":"2018-03-02T19:00:19+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"ASP.NET Core has historically provided project templates with code for setting up ASP.NET Core Identity, which enables support for identity related features like user registration, login, account...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/03/02/aspnetcore-2-1-identity-ui/","RawContent":null},{"Title":"ASP.NET Core 2.1.0-preview1: Razor UI in class libraries","PublishedOn":"2018-03-01T18:00:26+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"One frequently requested scenario that ASP.NET Core 2.1 improves is building UI in reusable class libraries. With ASP.NET Core 2.1 you can package your Razor views and pages (.cshtml files) along with...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/03/01/asp-net-core-2-1-razor-ui-in-class-libraries/","RawContent":null},{"Title":"ASP.NET Core 2.1.0-preview1: Improvements to IIS hosting","PublishedOn":"2018-03-01T01:56:02+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"The ASP.NET Core Module (ANCM) is a global IIS module that has been responsible for proxying requests over from IIS to your backend ASP.NET Core application running Kestrel.Â Since 2.0 we have been...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/02/28/asp-net-core-2-1-0-preview1-improvements-to-iis-hosting/","RawContent":null},{"Title":"ASP.NET Core 2.1-preview1: Introducing HTTPClient factory","PublishedOn":"2018-03-01T01:47:41+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"HttpClient factory is an opinionated factory for creating HttpClient instances to be used in your applications. It is designed to: Provide a central location for naming and configuring logical...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/02/28/asp-net-core-2-1-preview1-introducing-httpclient-factory/","RawContent":null},{"Title":"ASP.NET Core 2.1.0-preview1: Improvements for building Web APIs","PublishedOn":"2018-02-27T23:30:07+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"ASP.NET Core 2.1 adds a number of features that make it easier and more convenient to build Web APIs. These features include Web API controller specific conventions, more robust input processing and...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/02/27/asp-net-core-2-1-web-apis/","RawContent":null},{"Title":"ASP.NET Core 2.1.0-preview1: Introducing compatibility version in MVC","PublishedOn":"2018-02-27T22:34:39+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"This post was written by Ryan Nowak In 2.1 we&#8217;re adding a feature to address a long-standing problem for maintaining MVC &#8211; how do we make improvements to framework code without making it...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/02/27/introducing-compatibility-version-in-mvc/","RawContent":null},{"Title":"ASP.NET Core 2.1.0-preview1: Getting started with SignalR","PublishedOn":"2018-02-27T21:57:11+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"Since 2013, ASP.NET developers have been using SignalR to build real-time web applications. Now, with ASP.NET Core 2.1 Preview 1, we&#8217;re bringing SignalR over to ASP.NET Core so you can build...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/02/27/asp-net-core-2-1-0-preview1-getting-started-with-signalr/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"7404360176","Type":"IssuesEvent","CreatedAt":"2018-03-20T04:13:33","Actor":"johnstairs","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Home/issues/2980","RelatedDescription":"Closed issue \"NullReferenceException in Microsoft.AspNetCore.Http.Internal.DefaultHttpRequest.get_Headers()\" (#2980) at aspnet/Home","RelatedBody":"Opening this issue as an FYI. We found this in our logs. Perhaps it is a race condition. Using version 2.0.1 on Windows.\r\n\r\n```\r\nSystem.NullReferenceException: Object reference not set to an instance of an object.\r\n   at Microsoft.AspNetCore.Http.Internal.DefaultHttpRequest.get_Headers()\r\n   at Microsoft.AspNetCore.Mvc.Internal.ObjectResultExecutor.GetAcceptableMediaTypes(HttpRequest request)\r\n   at Microsoft.AspNetCore.Mvc.Internal.ObjectResultExecutor.SelectFormatter(OutputFormatterWriteContext formatterContext, MediaTypeCollection contentTypes, IList`1 formatters)\r\n   at Microsoft.AspNetCore.Mvc.Internal.ObjectResultExecutor.ExecuteAsync(ActionContext context, ObjectResult result)\r\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.<InvokeResultAsync>d__19.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.<InvokeNextResultFilterAsync>d__24.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.Rethrow(ResultExecutedContext context)\r\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.Next(State& next, Scope& scope, Object& state, Boolean& isCompleted)\r\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.<InvokeNextResourceFilter>d__22.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.Rethrow(ResourceExecutedContext context)\r\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.Next(State& next, Scope& scope, Object& state, Boolean& isCompleted)\r\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.<InvokeFilterPipelineAsync>d__17.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.<InvokeAsync>d__15.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.AspNetCore.Builder.RouterMiddleware.<Invoke>d__4.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.Health.Fhir.Cloud.FhirService.Modules.PersistenceModule.<>c__DisplayClass1_0.<<Configure>b__0>d.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.Health.Cloud.ServicePlatform.OperationCanceledMiddleware.<>c.<<UseOperationCanceledHandlingMiddleware>b__0_0>d.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.AspNetCore.Diagnostics.StatusCodePagesMiddleware.<Invoke>d__3.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.AspNetCore.Diagnostics.ExceptionHandlerMiddleware.<Invoke>d__6.MoveNext()\r\n```"},{"Id":"7403359785","Type":"IssuesEvent","CreatedAt":"2018-03-19T22:32:35","Actor":"johnstairs","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Home/issues/2980","RelatedDescription":"Opened issue \"NullReferenceException in Microsoft.AspNetCore.Http.Internal.DefaultHttpRequest.get_Headers()\" (#2980) at aspnet/Home","RelatedBody":"Opening this issue as an FYI. We found this in our logs. Perhaps it is a race condition. Using version 2.0.1 on Windows.\r\n\r\n```\r\nSystem.NullReferenceException: Object reference not set to an instance of an object.\r\n   at Microsoft.AspNetCore.Http.Internal.DefaultHttpRequest.get_Headers()\r\n   at Microsoft.AspNetCore.Mvc.Internal.ObjectResultExecutor.GetAcceptableMediaTypes(HttpRequest request)\r\n   at Microsoft.AspNetCore.Mvc.Internal.ObjectResultExecutor.SelectFormatter(OutputFormatterWriteContext formatterContext, MediaTypeCollection contentTypes, IList`1 formatters)\r\n   at Microsoft.AspNetCore.Mvc.Internal.ObjectResultExecutor.ExecuteAsync(ActionContext context, ObjectResult result)\r\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.<InvokeResultAsync>d__19.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.<InvokeNextResultFilterAsync>d__24.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.Rethrow(ResultExecutedContext context)\r\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.Next(State& next, Scope& scope, Object& state, Boolean& isCompleted)\r\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.<InvokeNextResourceFilter>d__22.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.Rethrow(ResourceExecutedContext context)\r\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.Next(State& next, Scope& scope, Object& state, Boolean& isCompleted)\r\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.<InvokeFilterPipelineAsync>d__17.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.<InvokeAsync>d__15.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.AspNetCore.Builder.RouterMiddleware.<Invoke>d__4.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.Health.Fhir.Cloud.FhirService.Modules.PersistenceModule.<>c__DisplayClass1_0.<<Configure>b__0>d.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.Health.Cloud.ServicePlatform.OperationCanceledMiddleware.<>c.<<UseOperationCanceledHandlingMiddleware>b__0_0>d.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.AspNetCore.Diagnostics.StatusCodePagesMiddleware.<Invoke>d__3.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.AspNetCore.Diagnostics.ExceptionHandlerMiddleware.<Invoke>d__6.MoveNext()\r\n```"},{"Id":"7402130713","Type":"IssuesEvent","CreatedAt":"2018-03-19T18:20:42","Actor":"rynowak","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Home/issues/2772","RelatedDescription":"Closed issue \"Route not matched for specific route variable value\" (#2772) at aspnet/Home","RelatedBody":"My ASP.NET Core 2 app is not matching a route for a specific variable in the path. I have been unable to reproduce this outside of the project it occurs in, or with any other values for the variable.\r\n\r\nThe route below is not matched when the tenant is \"evt\".\r\n```\r\n routes.MapRoute(\r\n    name: \"tenant\",\r\n    template: \"{tenant}/{controller}/{action}/{id?}\");\r\n```\r\nLog entries for the failed and successful matches:\r\nRequest starting HTTP/1.1 GET http://localhost:44314/evt/projects/index  \r\nThe request path  does not match a supported file type\r\nRequest did not match any routes.\r\n\r\nRequest starting HTTP/1.1 GET http://localhost:44314/es/projects/index  \r\nThe request path /es/projects/index does not match a supported file type\r\nRequest successfully matched the route with name 'tenant' and template '{tenant}/{controller}/{action}/{id?}'.\r\n\r\nRequest starting HTTP/1.1 GET http://localhost:44314/wtfwtf/projects/index  \r\nThe request path /wtfwtf/projects/index does not match a supported file type\r\nRequest successfully matched the route with name 'tenant' and template '{tenant}/{controller}/{action}/{id?}'.\r\n\r\nI set up an IRouter implementation that simply wraps routes.DefaultHandler and the RouteAsync method is not hit for the failing URL, it is for all others. The log message from the StaticFileMiddleware\r\nThe request path  does not match a supported file type \r\nfor the failing request is missing the path, which I'm sure is a clue but I don't know how to troubleshoot further.\r\n"},{"Id":"7401793219","Type":"IssuesEvent","CreatedAt":"2018-03-19T17:20:27","Actor":"muratg","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Home/issues/2898","RelatedDescription":"Closed issue \"Build and pack symbols for libuv\" (#2898) at aspnet/Home","RelatedBody":"The libuv packages we build do not have any corresponding debug symbols. We should explore how we can produce and pack debug symbols in a libuv symbols package and publish this to the symbols server.\r\n\r\ncc @davidfowl @halter73 for libuv expertise\r\ncc @Eilon @muratg for triage\r\ncc @natemcmaster for including additional symbols packages in our build.\r\n"},{"Id":"7401581605","Type":"IssuesEvent","CreatedAt":"2018-03-19T16:44:58","Actor":"Eilon","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Home/issues/2974","RelatedDescription":"Closed issue \"Environment Variables Options Reloading Azure Hosted\" (#2974) at aspnet/Home","RelatedBody":"Hi,\r\n\r\nBased on the documentation, working with reloading options when the underlying \r\ndata source changes is really great.\r\n\r\nHowever could this be implemented when we are updating settings under the Application Settings\r\nfor an App in Azure?\r\n\r\nWe use a json file, for default values and so on. When we deploy to Azure we switch to using Application Settings, which get pulled in by the call AddEnvironmentVariables();\r\n\r\nWe would like to not expect from our production environment team to have to understand, that if a change request is made for setting a, then would need to login in to Azure, navigate to the App Service Editor, make a change to that file (by someone who is not a developer), then save the changes and verify that setting was changed correctly. We prefer this file is not touched or edited at runtime.\r\n\r\nThe Application Settings in Azure, is a great way for that team to manage settings against change control requests. The issue currently is that when a change is made here, the application must be restarted so that the change can take affect. On a production system this is not ideal.\r\n\r\nI am aware that there are many other ways to handle application settings, I did however want to make use of the Application Settings specifically within Azure, as it is a \"standard\" way of handling this kind of operation across different applications, different teams. Basically as long as we hosted in an Azure Application Service, we could use this single method."},{"Id":"7401297640","Type":"IssuesEvent","CreatedAt":"2018-03-19T15:59:57","Actor":"gfoidl","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Home/issues/2975","RelatedDescription":"Closed issue \"Move AspNetCoreBenchmarkAttribute to shared BenchmarkRunner.Sources\" (#2975) at aspnet/Home","RelatedBody":"# Background / Motivation\r\n\r\n[BenchmarkRunner.Sources](https://github.com/aspnet/Common/tree/75b76ebb8129b2080bca88eb456675abf63ddab3/shared/Microsoft.AspNetCore.BenchmarkRunner.Sources) contains common code for easily setting up benchmarks:\r\n ```xml\r\n<ItemGroup>\r\n  <Compile Include=\"..\\..\\shared\\Microsoft.AspNetCore.BenchmarkRunner.Sources\\**\\*.cs\">\r\n    <Link>Shared\\%(FileName)%(Extension)</Link>\r\n  </Compile>\r\n</ItemGroup>\r\n```\r\nSo the benchmark-project just needs to add the intrinsically benchmark-code, for instance [Microsoft.Extensions.Primitives.Performance](https://github.com/aspnet/Common/tree/75b76ebb8129b2080bca88eb456675abf63ddab3/benchmarks/Microsoft.Extensions.Primitives.Performance).\r\n\r\nQuite easy -- one may think...\r\nWhen running the benchmarks I always get trapped by `No loggers defined, you will not see any progress!`.\r\nIt's because there needs to be added the `AspNetCoreBenchmark` at assembly-level (via AssemblyInfo.cs). \r\n\r\n# Proposal\r\n\r\nTo make the \"setup\" for benchmark-projects consistent with e.g. `Program.cs` this attribute should be moved to the shared sources, so no manual adding / copying of AssemblyInfo.cs is needed.\r\n\r\nIn https://github.com/aspnet/SignalR/pull/1251#discussion_r158564943 something similar was mentioned.\r\n\r\n# Affected projects\r\n\r\n* [Microsoft.Extensions.Primitives.Performance](https://github.com/aspnet/Common/blob/a344c4f677f777e6788ac67a0a44f134edb991c3/benchmarks/Microsoft.Extensions.Primitives.Performance/Properties/AssemblyInfo.cs#L4)\r\n* [Microsoft.Extensions.ObjectPool.Performance](https://github.com/aspnet/Common/blob/36b7064bbfc7954ecaf7a423ac11e699ba836c6b/benchmarks/Microsoft.Extensions.ObjectPool.Performance/Properties/AssemblyInfo.cs#L4)\r\n* [Kestrel.Performance](https://github.com/aspnet/KestrelHttpServer/blob/e7cc0d33af55c60ca386f774ab30dfdab2305c73/benchmarks/Kestrel.Performance/AssemblyInfo.cs#L1)\r\n* [Microsoft.AspNetCore.SignalR.Microbenchmarks](https://github.com/aspnet/SignalR/blob/f08311f33707a5528b8b35576620a9953ca1e13b/benchmarks/Microsoft.AspNetCore.SignalR.Microbenchmarks/AssemblyInfo.cs#L1)\r\n* [Microsoft.AspNetCore.Razor.Performance](https://github.com/aspnet/Razor/blob/98e74b9a69b7b277fc9a78c068de967185104d69/benchmarks/Microsoft.AspNetCore.Razor.Performance/AssemblyInfo.cs#L1)\r\n* [DI.Performance](https://github.com/aspnet/DependencyInjection/blob/8e1f92f95c885a4b046f50f085d47c539e6f6792/benchmarks/DI.Performance/AssemblyInfo.cs#L1)\r\n* [Microsoft.AspNetCore.Mvc.Performance](https://github.com/aspnet/Mvc/blob/997544077a0ed6535c2eac9f0590f8d7afe0677d/benchmarks/Microsoft.AspNetCore.Mvc.Performance/AssemblyInfo.cs#L1)"},{"Id":"7401252652","Type":"IssuesEvent","CreatedAt":"2018-03-19T15:53:14","Actor":"davidfowl","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Home/issues/2979","RelatedDescription":"Opened issue \"Move BindingAddress to public namespace\" (#2979) at aspnet/Home","RelatedBody":"I'm not sure why this was made pubternal instead of public and why we're even using pubternal APIs across assemblies. We should fix this and BindingAddress should be public.\r\n\r\n/cc @Tratcher @jkotalik "}],"ResultType":"GitHubEvent"},"SignalR":{"Events":[{"Id":"7404475509","Type":"IssuesEvent","CreatedAt":"2018-03-20T05:02:16","Actor":"BrennanConroy","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/SignalR/issues/1105","RelatedDescription":"Closed issue \"Error when scaling out app service\" (#1105) at aspnet/SignalR","RelatedBody":"Howdy,\r\n\r\nI'm having an issue when setting up a Redis backplane to back a couple web instances in Azure. If I stand up two instances, I'll fail half the time.\r\n\r\nAttempt #1: Information: WebSocket connected to wss://signalrsandbox....azurewebsites.net/chat?id=e6648196-c140-48c4-bd8e-f89e184da69b\r\n\r\nAttempt #2: signalr-client-1.0.0-alpha2-final.min.js:1 WebSocket connection to 'wss://signalrsandbox...azurewebsites.net/chat?id=c5a5efd0-fcd0-449a-a665-8a5f52fee316' failed: Error during WebSocket handshake: Unexpected response code: 404\r\n\r\nWhat is really confusing me is that if I stand up two instances locally on different ports, then things work perfectly - I'll hammer on the refresh button and I'll only ever succeed. Any idea what would be difference between two local instances on my dev machine and two App Service instances deployed in Azure?\r\n\r\n**Client code:**\r\n\r\n```\r\n<script src=\"node_modules/@aspnet/signalr-client/dist/browser/signalr-client-1.0.0-alpha2-final.min.js\"></script>\r\n    <script>\r\n      let connection = new signalR.HubConnection('https://signalrsandbox....azurewebsites.net/chat');\r\n\r\n      connection.on('send', data => {\r\n          console.log(data);\r\n      });\r\n\r\n      connection.start()\r\n          .then(() => connection.invoke('send', 'Hello world'));\r\n    </script>\r\n```\r\n\r\n**Server code**\r\n\r\n```\r\npublic void ConfigureServices(IServiceCollection services)\r\n        {\r\n            services.AddCors(options =>\r\n            {\r\n                options.AddPolicy(\"CorsPolicy\",\r\n                    builder => builder.AllowAnyOrigin()\r\n                    .AllowAnyMethod()\r\n                    .AllowAnyHeader()\r\n                    .AllowCredentials() );\r\n            });\r\n            ConfigurationOptions config = new ConfigurationOptions\r\n            {\r\n                EndPoints =\r\n                {\r\n                    { \"pub-redisxxxxxx.1.azure.garantiadata.com\", 11915 },\r\n                },\r\n                KeepAlive = 180,\r\n                Password = \"xxxxxxxxxxxxx\"\r\n            };\r\n            services.AddSignalR().AddRedis((opts) => {\r\n                opts.Options = config;\r\n            });\r\n        }\r\n```\r\n\r\nI haven't seen much documentation about the redis backplane (awesome it's being baked in, btw!!!), so if this feature isn't ready, feel free to just close this ticket and I'll wait.\r\n\r\nPS - total aside, but here's a pic of my BBQ I leveled-up with SignalR Core this weekend :)\r\n\r\n![img_20170708_142651](https://user-images.githubusercontent.com/2429373/32694690-52d6fe86-c714-11e7-94b9-8301ec4aa838.jpg)\r\n"},{"Id":"7404474605","Type":"PullRequestEvent","CreatedAt":"2018-03-20T05:01:53","Actor":"BrennanConroy","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/SignalR/pull/1653","RelatedDescription":"Merged pull request \"Cleanup rogue timeout in TS client\" (#1653) at aspnet/SignalR","RelatedBody":""},{"Id":"7404473624","Type":"PullRequestEvent","CreatedAt":"2018-03-20T05:01:29","Actor":"BrennanConroy","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/SignalR/pull/1652","RelatedDescription":"Merged pull request \"Fix CORS on TS Client\" (#1652) at aspnet/SignalR","RelatedBody":"#1105 \r\n\r\n/cc @blowdart "},{"Id":"7404429714","Type":"IssuesEvent","CreatedAt":"2018-03-20T04:42:47","Actor":"JamesNK","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/SignalR/issues/1636","RelatedDescription":"Closed issue \"Error when executing functional test in quick succession\" (#1636) at aspnet/SignalR","RelatedBody":"Test:\r\n`hubConnection using json over LongPolling transport throws an exception when invoking streaming method with invoke`\r\n\r\nError:\r\n```\r\nSystem.NullReferenceException: Object reference not set to an instance of an object.\r\n   at System.Collections.Generic.Dictionary`2.FindEntry(TKey key)\r\n   at System.Collections.Generic.Dictionary`2.TryGetValue(TKey key, TValue& value)\r\n   at Microsoft.AspNetCore.Sockets.ConnectionMetadata.System.Collections.Generic.IDictionary<System.Object,System.Object>.get_Item(Object key) in C:\\Development\\Source\\SignalR\\src\\Microsoft.AspNetCore.Sockets.Abstractions\\ConnectionMetadata.cs:line 29\r\n   at Microsoft.AspNetCore.Sockets.HttpConnectionDispatcher.ProcessSend(HttpContext context, HttpSocketOptions options) in C:\\Development\\Source\\SignalR\\src\\Microsoft.AspNetCore.Sockets.Http\\HttpConnectionDispatcher.cs:line 443\r\n   at Microsoft.AspNetCore.Sockets.HttpConnectionDispatcher.ExecuteAsync(HttpContext context, HttpSocketOptions options, ConnectionDelegate connectionDelegate) in C:\\Development\\Source\\SignalR\\src\\Microsoft.AspNetCore.Sockets.Http\\HttpConnectionDispatcher.cs:line 52\r\n   at Microsoft.AspNetCore.Builder.RouterMiddleware.Invoke(HttpContext httpContext)\r\n   at Microsoft.AspNetCore.Builder.RouterMiddleware.Invoke(HttpContext httpContext)\r\n   at Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware.Invoke(HttpContext context)\r\n   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware.Invoke(HttpContext context)\r\n```\r\n\r\n`DefaultConnectionContext.Items` is shared between calls and can be modified by each. Replace Dictionary with ConcurrentDictionary?"},{"Id":"7404429481","Type":"IssuesEvent","CreatedAt":"2018-03-20T04:42:41","Actor":"JamesNK","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/SignalR/issues/1548","RelatedDescription":"Closed issue \"Consider adding a \"Close\" frame type to Hub Protocol\" (#1548) at aspnet/SignalR","RelatedBody":"Right now, there is no way for the server (or client, for that matter) to communicate **why** it is closing the connection. If it's due to an error, the server has no way to communicate this error back to the client. We can communicate errors in invocations by sending Completion messages, but there's no way to send connection-level errors in the protocol.\r\n\r\nWe should consider adding a Close frame that can optional carry an error payload of some kind."},{"Id":"7404424014","Type":"PullRequestEvent","CreatedAt":"2018-03-20T04:40:23","Actor":"JamesNK","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/SignalR/pull/1591","RelatedDescription":"Merged pull request \"Rename negotiate to handshake, add response, add close frame\" (#1591) at aspnet/SignalR","RelatedBody":""},{"Id":"7404371425","Type":"IssuesEvent","CreatedAt":"2018-03-20T04:18:30","Actor":"JamesNK","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/SignalR/issues/1657","RelatedDescription":"Opened issue \"Optimize reading handshake request and response JSON\" (#1657) at aspnet/SignalR","RelatedBody":"Handshake request and response JSON is loaded into a `JObject`.\r\n\r\nCould save cycles and allocations by reading JSON with `JsonTextReader` like JSON protocol now does."},{"Id":"7404313203","Type":"IssuesEvent","CreatedAt":"2018-03-20T03:55:00","Actor":"anurse","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/SignalR/issues/1542","RelatedDescription":"Closed issue \"Don't specify the 'browser' field in package.json\" (#1542) at aspnet/SignalR","RelatedBody":"It turns out webpack tries to use that when packing even though it is more appropriate for it use the CommonJS build (currently in `main`). We just need to remove the `browser` field, I misunderstood it :)"},{"Id":"7404313194","Type":"PullRequestEvent","CreatedAt":"2018-03-20T03:55:00","Actor":"anurse","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/SignalR/pull/1655","RelatedDescription":"Merged pull request \"Merge the needful to dev\" (#1655) at aspnet/SignalR","RelatedBody":"@pranavkm Your commits are leaking ;). Is this safe to merge to dev or should I do something fancier?"},{"Id":"7404237405","Type":"PullRequestEvent","CreatedAt":"2018-03-20T03:26:28","Actor":"anurse","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/SignalR/pull/1656","RelatedDescription":"Opened pull request \"clean up test output\" (#1656) at aspnet/SignalR","RelatedBody":"* More greppable, just search for `not ok`\r\n* The TAP formatter libraries just aren't cutting it on the CI, so just use the raw output\r\n* Disable verbose mode (which interleaves server log messages) by default because it is le noisy."}],"ResultType":"GitHubEvent"},"Mvc":{"Events":[{"Id":"7404362990","Type":"PullRequestEvent","CreatedAt":"2018-03-20T04:14:45","Actor":"rynowak","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Mvc/pull/7510","RelatedDescription":"Opened pull request \"Make handler selector more flexible\" (#7510) at aspnet/Mvc","RelatedBody":"Some details of this pending discussion, but this is a new 2.1 change\r\nand compatibility switch in the spirit of making pages handler selection\r\nless error-prone.\r\n\r\nIn particular we don't want anyone to have to define HEAD to do the\r\ntrivial thing. This currently routes all 'safe' HTTP methods to the GET\r\nhandler and all other HTTP methods to the POST handler.\r\n\r\nThis is technically not the correct thing to do for OPTIONS and TRACE,\r\nso we might still do something different.\r\n\r\nThe tests will change a little depending on exactly what we decide to\r\ndo, but this is the main idea of the change."},{"Id":"7404059964","Type":"IssuesEvent","CreatedAt":"2018-03-20T02:23:37","Actor":"dougbu","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Mvc/issues/7509","RelatedDescription":"Opened issue \"Support `[ValidateNever]` on parameters\" (#7509) at aspnet/Mvc","RelatedBody":"Especially now that MVC supports validation of top-level nodes such as action and page handler parameters, suggest we allow the `ValidateNeverAttribute` to be applied to parameters.\r\n\r\nWill probably require an extension to `DefaultValidationMetadataProvider`'s support for `IPropertyValidationFilter` for this to work end-to-end.\r\n\r\n----\r\nSuggest adding tests of `[ValidateNever]` on controller and page model properties. It _should_ work but it not clear the scenario has been tested."}],"ResultType":"GitHubEvent"},"Identity":{"Events":[{"Id":"7403847915","Type":"PullRequestEvent","CreatedAt":"2018-03-20T01:08:07","Actor":"jbagga","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/Identity/pull/1697","RelatedDescription":"Merged pull request \"Use partial tag helper (#1696)\" (#1697) at aspnet/Identity","RelatedBody":""},{"Id":"7403847587","Type":"PullRequestEvent","CreatedAt":"2018-03-20T01:07:59","Actor":"jbagga","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Identity/pull/1697","RelatedDescription":"Opened pull request \"Use partial tag helper (#1696)\" (#1697) at aspnet/Identity","RelatedBody":""},{"Id":"7403847002","Type":"PullRequestEvent","CreatedAt":"2018-03-20T01:07:46","Actor":"jbagga","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/Identity/pull/1696","RelatedDescription":"Merged pull request \"Use partial tag helper\" (#1696) at aspnet/Identity","RelatedBody":"Addresses https://github.com/aspnet/templating/issues/338"},{"Id":"7403062344","Type":"PullRequestEvent","CreatedAt":"2018-03-19T21:24:14","Actor":"jbagga","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Identity/pull/1696","RelatedDescription":"Opened pull request \"Use partial tag helper\" (#1696) at aspnet/Identity","RelatedBody":"Addresses https://github.com/aspnet/templating/issues/338"},{"Id":"7402835716","Type":"PullRequestEvent","CreatedAt":"2018-03-19T20:39:30","Actor":"jbagga","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/Identity/pull/1695","RelatedDescription":"Merged pull request \"Update jQuery (#1692)\" (#1695) at aspnet/Identity","RelatedBody":""},{"Id":"7402835080","Type":"PullRequestEvent","CreatedAt":"2018-03-19T20:39:21","Actor":"jbagga","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Identity/pull/1695","RelatedDescription":"Opened pull request \"Update jQuery (#1692)\" (#1695) at aspnet/Identity","RelatedBody":""},{"Id":"7402833659","Type":"PullRequestEvent","CreatedAt":"2018-03-19T20:39:04","Actor":"jbagga","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/Identity/pull/1692","RelatedDescription":"Merged pull request \"Update jQuery\" (#1692) at aspnet/Identity","RelatedBody":"cc @mkArtakMSFT @javiercn \r\n\r\njQuery was updated in templating"},{"Id":"7402773161","Type":"PullRequestEvent","CreatedAt":"2018-03-19T20:27:16","Actor":"HaoK","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Identity/pull/1694","RelatedDescription":"Opened pull request \"Add AddDefaultIdentity() method\" (#1694) at aspnet/Identity","RelatedBody":"- Fixes https://github.com/aspnet/Identity/issues/1625\r\n- Adds new template sugar method (AddIdentityV2) basically.\r\n- Roles are now not included by default, can be easily added back via `.AddRoles<IdentityRole>()`\r\n- Note this has to live in the UI package since that's the leaf package that has everything.\r\n- Still clobbers the authentication schemes to point to identity cookies, we'll revisit that in 2.2\r\n- Rolls the MaxKeyLength into a hidden default in the sugar method (should we set it only in the args less overload?)\r\n\r\n@ajcvickers @blowdart @javiercn "},{"Id":"7402644255","Type":"PullRequestEvent","CreatedAt":"2018-03-19T20:01:42","Actor":"bricelam","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Identity/pull/1693","RelatedDescription":"Opened pull request \"Remove Microsoft.EntityFrameworkCore.Tools.DotNet\" (#1693) at aspnet/Identity","RelatedBody":""},{"Id":"7402437127","Type":"PullRequestEvent","CreatedAt":"2018-03-19T19:19:29","Actor":"jbagga","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Identity/pull/1692","RelatedDescription":"Opened pull request \"Update jQuery\" (#1692) at aspnet/Identity","RelatedBody":"cc @mkArtakMSFT @javiercn \r\n\r\njQuery was updated in templating"}],"ResultType":"GitHubEvent"},"Kestrel":{"Events":[{"Id":"7403777293","Type":"PullRequestEvent","CreatedAt":"2018-03-20T00:42:36","Actor":"halter73","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/pull/2409","RelatedDescription":"Opened pull request \"React to aspnet/BuildTools#611\" (#2409) at aspnet/KestrelHttpServer","RelatedBody":"This should fix the travis linux builds."},{"Id":"7403770476","Type":"PullRequestEvent","CreatedAt":"2018-03-20T00:40:11","Actor":"halter73","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/pull/2408","RelatedDescription":"Closed pull request \"[DO NOT MERGE] TRAVIS_OS_NAME?\" (#2408) at aspnet/KestrelHttpServer","RelatedBody":""},{"Id":"7403740982","Type":"PullRequestEvent","CreatedAt":"2018-03-20T00:29:50","Actor":"halter73","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/pull/2407","RelatedDescription":"Merged pull request \"Never run continuation inline in SocketAwaitable.OnCompleted\" (#2407) at aspnet/KestrelHttpServer","RelatedBody":"In the very unlikely event that the awaitable is repeatedly completed between the read/write loop checking IsCompleted and calling OnCompleted, there's the potential the loop could stack dive without the Task.Run. "},{"Id":"7403738697","Type":"PullRequestEvent","CreatedAt":"2018-03-20T00:28:59","Actor":"davidfowl","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/pull/2379","RelatedDescription":"Closed pull request \"Trust SSL stream to not block\" (#2379) at aspnet/KestrelHttpServer","RelatedBody":"Remove the Task.Run around SSL Stream invocation.\r\n\r\n@halter73 come at me bro ð \r\n\r\n~Before:~\r\n\r\n~[11:18:48.860] RequestsPerSecond:           868930~\r\n\r\n~After:~\r\n\r\n~[11:17:23.194] RequestsPerSecond:           895962~"},{"Id":"7403572311","Type":"PullRequestEvent","CreatedAt":"2018-03-19T23:32:57","Actor":"halter73","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/pull/2408","RelatedDescription":"Opened pull request \"[DO NOT MERGE] TRAVIS_OS_NAME?\" (#2408) at aspnet/KestrelHttpServer","RelatedBody":""},{"Id":"7403483408","Type":"IssuesEvent","CreatedAt":"2018-03-19T23:06:27","Actor":"halter73","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/issues/2361","RelatedDescription":"Closed issue \"Remove package dependency from Kestrel to Kestrel.Transport.Libuv\" (#2361) at aspnet/KestrelHttpServer","RelatedBody":"Related issue: #2360 \r\n\r\nRemove the package dependency from Microsoft.AspNetCore.Server.Kestrel to Microsoft.AspNetCore.Server.Kestrel.Transport.Libuv.\r\n\r\nThis will break those who only depend on the Microsoft.AspNetCore.Server.Kestrel package _and_ who call `WebHostBuilderLibuvExtensions.UseLibuv()`. These users can fix their projects by re-adding the dependency to libuv.\r\n```xml\r\n<PackageReference Include=\"Microsoft.AspNetCore.Server.Kestrel.Transport.Libuv\" Version=\"2.1.0\" />\r\n```\r\n\r\nTo minimize the number of 2.0 users that this will break, we should keep Microsoft.AspNetCore.Server.Kestrel.Transport.Libuv in the dependency graph of Microsoft.AspNetCore.All.\r\n\r\n[Design meeting notes from March 2, 2018](https://gist.github.com/natemcmaster/43a3980b724fb0b167844fb574df75dc)\r\n\r\n/cc @halter73 @davidfowl @muratg "},{"Id":"7403481109","Type":"IssuesEvent","CreatedAt":"2018-03-19T23:05:48","Actor":"halter73","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/issues/2360","RelatedDescription":"Closed issue \"Switch default transport to sockets\" (#2360) at aspnet/KestrelHttpServer","RelatedBody":"Currently, it is our goal by 2.1.0 to make sockets the default transport. We made the [switch in early builds of 2.1.0](https://github.com/aspnet/KestrelHttpServer/pull/2100) but reverted that for preview1 (https://github.com/aspnet/KestrelHttpServer/issues/2220) due to performance issues.\r\n\r\nMotivations:\r\n - broad platform support. Wherever managed sockets are supported, Kestrel should work. Doesn't require recompiling libuv to bring up a new OS.\r\n - source-build. (https://github.com/dotnet/source-build). In current form, Kestrel packages can't be produced in a source-build environment\r\n - ecosystem. Helps to drive improvement to the .NET sockets implementation, which benefits anyone else using managed sockets.\r\n\r\n/cc @halter73 @davidfowl @muratg \r\n\r\n"},{"Id":"7403272297","Type":"PullRequestEvent","CreatedAt":"2018-03-19T22:10:37","Actor":"halter73","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/pull/2407","RelatedDescription":"Opened pull request \"Never run continuation inline in SocketAwaitable.OnCompleted\" (#2407) at aspnet/KestrelHttpServer","RelatedBody":"In the very unlikely event that the awaitable is repeatedly completed between the read/write loop checking IsCompleted and calling OnCompleted, there's the potential the loop could stack dive without the Task.Run. "}],"ResultType":"GitHubEvent"},"Razor":{"Events":[{"Id":"7404401757","Type":"PullRequestEvent","CreatedAt":"2018-03-20T04:31:17","Actor":"pranavkm","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/Razor/pull/2198","RelatedDescription":"Merged pull request \"Do not write generated files to disk if the input has parser errors\" (#2198) at aspnet/Razor","RelatedBody":"Fixes #2169"},{"Id":"7404401753","Type":"IssuesEvent","CreatedAt":"2018-03-20T04:31:17","Actor":"pranavkm","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Razor/issues/2169","RelatedDescription":"Closed issue \"Incremental build ignores view compilation errors\" (#2169) at aspnet/Razor","RelatedBody":"Repro,\r\n- Create an app and introduce a compilation error in a view\r\n- Run `dotnet build`. There will be a compilation error\r\n- Run `dotnet build` again.\r\n\r\nExpected:\r\nThe same compilation error\r\n\r\nActual:\r\nNo error (The precompiled views dll is generated with errored views)\r\n\r\ncc @pranavkm @rynowak "},{"Id":"7404401122","Type":"PullRequestEvent","CreatedAt":"2018-03-20T04:31:03","Actor":"pranavkm","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Razor/pull/2198","RelatedDescription":"Opened pull request \"Do not write generated files to disk if the input has parser errors\" (#2198) at aspnet/Razor","RelatedBody":"Fixes #2169"},{"Id":"7404400475","Type":"PullRequestEvent","CreatedAt":"2018-03-20T04:30:48","Actor":"pranavkm","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/Razor/pull/2189","RelatedDescription":"Merged pull request \"Do not write generated files to disk if the input has parser errors\" (#2189) at aspnet/Razor","RelatedBody":"Fixes #2169"},{"Id":"7404071176","Type":"IssuesEvent","CreatedAt":"2018-03-20T02:27:32","Actor":"ajaybhargavb","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Razor/issues/2173","RelatedDescription":"Closed issue \"IntelliSense is lost on empty line immediately following directives\" (#2173) at aspnet/Razor","RelatedBody":"Issue:\r\n```\r\n@page\r\n|\r\n```\r\ndon't type the pipe but try and invoke intelliSense at the pipe.\r\n\r\nYou'd expect for HTML IntelliSense but in actuality you don't get IntelliSense. This seems to be due to our `SpanKind.None` addition; basically we mark the end of `@page` as `SpanKind.None` (expected) but that has an adverse effect of turning off IntelliSense on the line following it (if there's no content). We should be adding a marker symbol after our `SpanKind.None` to indicate to the editor that we expect HTML at that location.\r\n\r\nThis was originally reported in TFS: https://devdiv.visualstudio.com/DevDiv/_workitems/edit/584082\r\n\r\nPutting this in the VS15.7 milestone to correspond with either preview3 or 4."},{"Id":"7404067823","Type":"IssuesEvent","CreatedAt":"2018-03-20T02:26:24","Actor":"ajaybhargavb","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Razor/issues/2197","RelatedDescription":"Opened issue \"Consider not showing Html intellisense after the semicolon following a directive\" (#2197) at aspnet/Razor","RelatedBody":"Follow up to https://github.com/aspnet/Razor/pull/2196.\r\n```c#\r\n@model DateTime  ;  |\r\n```\r\nIdeally we don't want to show any intellisense at the end of a directive line. But the fix for this could be complicated as discussed in the PR. \r\nIMO we should probably keep this in the back burner and do it if more people are sad about this.\r\n\r\nNote: We already do the right thing (Not show intellisense) in the most common scenario below,\r\n```c#\r\n@model DateTime |\r\n```"},{"Id":"7404034538","Type":"PullRequestEvent","CreatedAt":"2018-03-20T02:14:23","Actor":"ajaybhargavb","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/Razor/pull/2196","RelatedDescription":"Merged pull request \"Fix: Missing Html intellisense after directives\" (#2196) at aspnet/Razor","RelatedBody":"https://github.com/aspnet/Razor/issues/2173\r\n\r\nWe were outputting the newline after a directive as `SpanKind.None` which was preventing intellisense from getting invoked.\r\n\r\nFixed this to have the following behavior,\r\nHtml intellisense **should work** at the pipe in the following cases:\r\n```c#\r\n@model DateTime   ;  |\r\n```\r\n```c#\r\n@model DateTime\r\n|\r\n```\r\n```c#\r\n@page |\r\n```\r\n```c#\r\n@page\r\n|\r\n```\r\n\r\nHtml intellisense **shouldn't work** at the pipe in the following cases:\r\n```c#\r\n@model DateTime |\r\n```\r\n``` c#\r\n@model DateTime   |  ;   \r\n```\r\n\r\nI've verified all of the above cases work with this code in VS. Also, updated the unit tests."}],"ResultType":"GitHubEvent"},"Templates":{"Events":[],"ResultType":"GitHubEvent"},"Tooling":{"Events":[{"Id":"7381313128","Type":"IssuesEvent","CreatedAt":"2018-03-14T22:19:23","Actor":"AngelosP","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Tooling/issues/240","RelatedDescription":"Closed issue \"Support debugging of JS executed with EdgeJS in VS\" (#240) at aspnet/Tooling","RelatedBody":"We would like to do the server side HTML rendering with ReactJS in our ASP.NET application. This works with EdgeJS, but there is currently no way to debug the JS code in VS. \n\nIt would be nice if this would work and we wouldn't need node-inspector for this.\n\nhttps://github.com/tjanczuk/edge/issues/316\n"},{"Id":"7376247861","Type":"IssuesEvent","CreatedAt":"2018-03-14T05:33:19","Actor":"barrytang","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Tooling/issues/1068","RelatedDescription":"Closed issue \"Switch between Razor Page View and Code Behind\" (#1068) at aspnet/Tooling","RelatedBody":"In the old web forms you were able to quickly switch between the ASPX file and the code behind using F7/Shift F7 or going View->Code or View->Designer. It would be useful if this was possible with Razor Pages in aspnet core projects?\r\n"},{"Id":"7372052889","Type":"IssuesEvent","CreatedAt":"2018-03-13T13:46:08","Actor":"TheConservativeCoder","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Tooling/issues/1068","RelatedDescription":"Opened issue \"Switch between Razor Page View and Code Behind\" (#1068) at aspnet/Tooling","RelatedBody":"In the old web forms you were able to quickly switch between the ASPX file and the code behind using F7/Shift F7 or going View->Code or View->Designer. It would be useful if this was possible with Razor Pages in aspnet core projects?\r\n"},{"Id":"7369868082","Type":"IssuesEvent","CreatedAt":"2018-03-13T05:33:42","Actor":"barrytang","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Tooling/issues/1067","RelatedDescription":"Closed issue \"Support dotnet watch in launchSettings.json\" (#1067) at aspnet/Tooling","RelatedBody":"I used to be able to use `dotnet watch` in Visual Studio by adding the following section to `launchSettings.json` and starting the project without debugging using CTRL + F5.\r\n\r\n```\r\n    \"Kestrel (dotnet watch run)\": {\r\n      \"commandName\": \"Executable\",\r\n      \"executablePath\": \"C:\\\\Program Files\\\\dotnet\\\\dotnet.exe\",\r\n      \"commandLineArgs\": \"watch run\",\r\n      \"launchBrowser\": true,\r\n      \"launchUrl\": \"https://localhost:5001/\",\r\n      \"environmentVariables\": {\r\n        \"ASPNETCORE_ENVIRONMENT\": \"Development\"\r\n      }\r\n    },\r\n```\r\n\r\nThis used to work in ASP.NET Core 1.1 but no longer does. According to https://github.com/aspnet/DotNetTools/issues/404 the new format for ASP.NET Core 2.0 is:\r\n\r\n```\r\n   \"Kestrel (dotnet watch run)\": {\r\n      \"commandName\": \"Executable\",\r\n      \"executablePath\": \"C:\\\\Program Files\\\\dotnet\\\\dotnet.exe\",\r\n      \"commandLineArgs\": \"watch run\",\r\n      \"workingDirectory\": \"C:\\\\Users\\\\namc\\\\source\\\\repos\\\\WebApplication2\\\\WebApplication2\",\r\n      \"launchBrowser\": true,\r\n      \"launchUrl\": \"https://localhost:5001/\",\r\n      \"environmentVariables\": {\r\n        \"ASPNETCORE_ENVIRONMENT\": \"Development\"\r\n      }\r\n    }\r\n```\r\n\r\nThe problem with this is the hard coded `executablePath` which is Windows specific and the `workingDirectory` which is specific to wherever I did a Git clone on my local machine."},{"Id":"7364725434","Type":"IssuesEvent","CreatedAt":"2018-03-12T10:19:58","Actor":"RehanSaeed","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Tooling/issues/1067","RelatedDescription":"Opened issue \"Support dotnet watch in launchSettings.json\" (#1067) at aspnet/Tooling","RelatedBody":"I used to be able to use `dotnet watch` in Visual Studio by adding the following section to `launchSettings.json` and starting the project without debugging using CTRL + F5.\r\n\r\n```\r\n    \"Kestrel (dotnet watch run)\": {\r\n      \"commandName\": \"Executable\",\r\n      \"executablePath\": \"C:\\\\Program Files\\\\dotnet\\\\dotnet.exe\",\r\n      \"commandLineArgs\": \"watch run\",\r\n      \"launchBrowser\": true,\r\n      \"launchUrl\": \"https://localhost:5001/\",\r\n      \"environmentVariables\": {\r\n        \"ASPNETCORE_ENVIRONMENT\": \"Development\"\r\n      }\r\n    },\r\n```\r\n\r\nThis used to work in ASP.NET Core 1.1 but no longer does. According to https://github.com/aspnet/DotNetTools/issues/404 the new format for ASP.NET Core 2.0 is:\r\n\r\n```\r\n   \"Kestrel (dotnet watch run)\": {\r\n      \"commandName\": \"Executable\",\r\n      \"executablePath\": \"C:\\\\Program Files\\\\dotnet\\\\dotnet.exe\",\r\n      \"commandLineArgs\": \"watch run\",\r\n      \"workingDirectory\": \"C:\\\\Users\\\\namc\\\\source\\\\repos\\\\WebApplication2\\\\WebApplication2\",\r\n      \"launchBrowser\": true,\r\n      \"launchUrl\": \"https://localhost:5001/\",\r\n      \"environmentVariables\": {\r\n        \"ASPNETCORE_ENVIRONMENT\": \"Development\"\r\n      }\r\n    }\r\n```\r\n\r\nThe problem with this is the hard coded `executablePath` which is Windows specific and the `workingDirectory` which is specific to wherever I did a Git clone on my local machine."},{"Id":"7307968614","Type":"IssuesEvent","CreatedAt":"2018-02-28T06:01:18","Actor":"barrytang","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Tooling/issues/1066","RelatedDescription":"Closed issue \"Nesting bug\" (#1066) at aspnet/Tooling","RelatedBody":"The is a problem nesting embedded resources.  I was experimenting with nesting .cshtml files using the existing rules and did this:\r\n\r\nModal.cs (bootstrap modal web component)\r\n   -> Modal.cs.cshtml (it's view file)\r\n\r\n`Modal.cs.cshtml` is set to Embedded Resource, and clearly shows it, but is completed IGNORED by the build process (simply open the DLL in a text editor [such as Notepad++] and scroll to the bottom and look for text).  If I rename the file to \"Modal.cshtml\" instead it works perfectly fine!  :/  I don't think whether or not a file is embedded should have and role in excluding a file from being embedded so this seems like a bug to me.\r\n\r\nYes, I'm aware of upcoming nesting controls in v15.6, but I'm not able to install it yet, and regardless, this should work fine, so it should be looked into nonetheless.\r\n\r\nJust to add: I'm using wild-cards to include the file.  If I explicitly add it I get this:\r\n\r\n`Duplicate 'EmbeddedResource' items were included. ...`\r\n\r\nSo it's clearly found.  It's obviously something up with the build process not finding the nested file."},{"Id":"7307353364","Type":"IssuesEvent","CreatedAt":"2018-02-28T02:19:15","Actor":"rjamesnw","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Tooling/issues/1066","RelatedDescription":"Opened issue \"Nesting bug\" (#1066) at aspnet/Tooling","RelatedBody":"The is a problem nesting embedded resources.  I was experimenting with nesting .cshtml files using the existing rules and did this:\r\n\r\nModal.cs (bootstrap modal web component)\r\n   -> Modal.cs.cshtml (it's view file)\r\n\r\n`Modal.cs.cshtml` is set to Embedded Resource, and is completed IGNORED by the build process (simply open the DLL in a text editor [such as Notepad++] and scroll to the bottom and look for text).  If I rename the file to \"Modal.cshtml\" instead it works perfectly fine!  :/  I don't think whether or not a file is embedded should have and role in excluding a file from being embedded so this seems like a bug to me.\r\n\r\n"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"7390961156","Type":"IssuesEvent","CreatedAt":"2018-03-16T14:09:54","Actor":"natemcmaster","Repository":"aspnet/Announcements","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Announcements/issues/297","RelatedDescription":"Closed issue \"Model binding accesses read-only properties in post-back\" (#297) at aspnet/Announcements","RelatedBody":"I have a simple edit model, which contains a few computed/read-only properties. When posting to a controller method, the model validation engine accesses these properties, causing an exception.\r\n\r\nHowever, it does not make sense to access or attempt to validate a read-only property.\r\n\r\nAdditionally, all properties are marked with [BindNever], which seems to have no effect on this behavior.\r\n\r\nThe controller method takes a single parameter (the edit model) decorated with [FromForm].\r\n\r\nUsing 2.1.0-preview2-30355."},{"Id":"7390872316","Type":"IssuesEvent","CreatedAt":"2018-03-16T13:54:05","Actor":"mnmr","Repository":"aspnet/Announcements","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Announcements/issues/297","RelatedDescription":"Opened issue \"Model binding accesses read-only properties in post-back\" (#297) at aspnet/Announcements","RelatedBody":"I have a simple edit model, which contains a few computed/read-only properties. When posting to a controller method, the model validation engine accesses these properties, causing an exception.\r\n\r\nHowever, it does not make sense to access or attempt to validate a read-only property.\r\n\r\nAdditionally, all properties are marked with [BindNever], which seems to have no effect on this behavior.\r\n\r\nThe controller method takes a single parameter (the edit model) decorated with [FromForm].\r\n\r\nUsing 2.1.0-preview2-30355."},{"Id":"7373364495","Type":"IssuesEvent","CreatedAt":"2018-03-13T17:04:24","Actor":"blowdart","Repository":"aspnet/Announcements","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Announcements/issues/294","RelatedDescription":"Opened issue \"Microsoft Security Advisory CVE-2018-0808: ASP.NET Core Denial Of Service Vulnerability\" (#294) at aspnet/Announcements","RelatedBody":"# Microsoft Security Advisory CVE-2018-0808: ASP.NET Core Denial Of Service Vulnerability\r\n\r\n## Executive Summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in public ASP.NET Core 1.0, 1.1 and 2.0. This advisory also provides guidance on what developers can do to update their applications correctly.\r\n\r\nMicrosoft is aware of a security vulnerability in all public versions of ASP.NET Core where, if an application is hosted behind Internet Information Server (IIS) a remote unauthenticated attacker can use a specially crafted request can cause a Denial of Service.\r\n\r\n## Dicussion\r\n\r\nDiscussion for this issue can be found at https://github.com/aspnet/IISIntegration/issues/658\r\n\r\n### Mitigation Factors\r\nAny site hosted behind a different proxy, such as nginx or an application hosted in Azure, which uses Application Request Routing (ARR) as a proxy is not affected. \r\n\r\n## Affected Software\r\nThe vulnerabilities affect any Microsoft ASP.NET Core project if it is hosted behind an IIS server running AspNetCoreModule (ANCM) prior to 7.1.1990.0.\r\n\r\n## Advisory FAQ\r\n### How do I know if I am affected? \r\n\r\nOpen a PowerShell prompt and run the following command\r\n\r\n```powershell\r\n(Get-Item $env:SystemDrive\\Windows\\System32\\inetsrv\\aspnetcore.dll).VersionInfo\r\n```\r\n\r\nor use the Windows file properties dialog to check the version on `C:\\Windows\\System32\\inetsrv\\aspnetcore.dll`, where C: is your OS install drive.\r\n\r\nIf the file version is less than 7.1.1990.0 you are affected.\r\n\r\n### How do I fix the issue? \r\nInstall the latest version of the ASP.NET Core Hosting Bundle \r\n(You need only install a single version, i.e. installing Version 2.0 will protect Version 1.0/1.1 .NET Core applications and vice versa. Choose the one that corresponds to the highest runtime version on your server).\r\n\r\n* [Hosting Bundle for ASP.NET Core 1.0/1.1](https://go.microsoft.com/fwlink/?linkid=869677)\r\n* [Hosting Bundle for ASP.NET Core 2.0](https://go.microsoft.com/fwlink/?linkid=869674)\r\n\r\nThen restart IIS by running \r\n\r\n```\r\nnet stop was /y\r\nnet start w3svc\r\n```\r\n\r\nfrom an elevated command line.\r\n\r\n## Other Information\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including Terms and Conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue where you can ask questions.\r\n\t\r\n### Disclaimer\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgements\r\n\r\nAndrei Gorlov\r\n\r\n### External Links\r\n\r\n[CVE-2018-0808](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-0808)\r\n\r\n### Revisions\r\n\r\nV1.0 (Mar 13, 2018): Advisory published.\r\n\r\n_Version 1.0_\r\n_Last Updated 2018-03-13_"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"975923268740833280","CreatedAt":"2018-03-20T02:33:33+00:00","UserScreenname":"aspnet","Text":"This week's #ASPNET Community Standup is on Tuesday at 10 AM  Pacific / 1800 GMT. @sshirhatti will be showingâ¦ https://t.co/qlOERhEOaw","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":3,"FavoriteCount":4,"RawContent":null},{"Id":"974312682647162880","CreatedAt":"2018-03-15T15:53:40+00:00","UserScreenname":"aspnet","Text":"Watch @csharpfritz and @shanselman in this recorded video from today's LiveStream about converting an application tâ¦ https://t.co/6QP4SCXJ3S","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":15,"FavoriteCount":3,"RawContent":null},{"Id":"974274384792866817","CreatedAt":"2018-03-15T13:21:29+00:00","UserScreenname":"aspnet","Text":"Tune in to @csharpfritz and @shanselman talking through an #ASP.NET upgrade at 10am ET / 7am PT / 14:00 UTC! https://t.co/vJe8zHT12j","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":4,"FavoriteCount":3,"RawContent":null},{"Id":"973691520728510464","CreatedAt":"2018-03-13T22:45:23+00:00","UserScreenname":"aspnet","Text":"Starting now... join us for the weekly #ASPNET Community Standup at https://t.co/4Ioo9jNSN2","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":10,"FavoriteCount":12,"RawContent":null},{"Id":"973553523186159621","CreatedAt":"2018-03-13T13:37:02+00:00","UserScreenname":"aspnet","Text":"Today, Jeff shows you how to use dependency injection with web forms... check it out! https://t.co/viqZ28DBrV","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":23,"FavoriteCount":9,"RawContent":null},{"Id":"973350716046626816","CreatedAt":"2018-03-13T00:11:09+00:00","UserScreenname":"aspnet","Text":"Join us for the weekly #ASPNET Community Standup this Tuesday at 3:45 PM Pacific / 23:45 GMT at https://t.co/4Ioo9jNSN2","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":5,"FavoriteCount":3,"RawContent":null},{"Id":"972484011556818945","CreatedAt":"2018-03-10T14:47:10+00:00","UserScreenname":"aspnet","Text":"Be sure to check out Jeff's live coding stream this morning to see more about our #ASP.NET Core 2.1 preview release. https://t.co/EtKk0fMOgU","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":24,"FavoriteCount":10,"RawContent":null},{"Id":"971084152693866496","CreatedAt":"2018-03-06T18:04:38+00:00","UserScreenname":"aspnet","Text":"We are live at https://t.co/4Ioo9jNSN2 ! Join us!","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":11,"FavoriteCount":3,"RawContent":null},{"Id":"971075755168841728","CreatedAt":"2018-03-06T17:31:16+00:00","UserScreenname":"aspnet","Text":"This week's #ASPNET Community Standup starts at 10 AM  Pacific / 1800 GMT. Ryan Nowak will be showing Web API 2.1 fâ¦ https://t.co/OW0zeYZPyq","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":22,"FavoriteCount":10,"RawContent":null},{"Id":"970812132399890432","CreatedAt":"2018-03-06T00:03:43+00:00","UserScreenname":"aspnet","Text":"This week's #ASPNET Community Standup is a feature deep dive on Web API improvements in 2.1 with Ryan Nowak.\n\nTuesdâ¦ https://t.co/eKElaXNIR3","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":36,"FavoriteCount":11,"RawContent":null},{"Id":"969671939106025473","CreatedAt":"2018-03-02T20:33:00+00:00","UserScreenname":"aspnet","Text":"Jon the Azure AD team for their first Office Hours call on March 8. https://t.co/kVYF9JWzeZ","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":10,"FavoriteCount":6,"RawContent":null},{"Id":"968561906003791872","CreatedAt":"2018-02-27T19:02:08+00:00","UserScreenname":"aspnet","Text":"Join us for the weekly #ASPNET Community Standup today at 3:45 PM Pacific / 23:45 GMT at https://t.co/4Ioo9jNSN2","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":8,"FavoriteCount":6,"RawContent":null},{"Id":"968550190889267201","CreatedAt":"2018-02-27T18:15:34+00:00","UserScreenname":"aspnet","Text":"#ASPNET Core 2.1.0-preview1 now available https://t.co/loVh03KKfz","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":70,"FavoriteCount":54,"RawContent":null},{"Id":"966009382377897985","CreatedAt":"2018-02-20T17:59:19+00:00","UserScreenname":"aspnet","Text":"Starting now! \n\nJoin the #ASPNET Community Standup at https://t.co/4Ioo9jNSN2","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":11,"FavoriteCount":8,"RawContent":null},{"Id":"965988674474188800","CreatedAt":"2018-02-20T16:37:01+00:00","UserScreenname":"aspnet","Text":"Catch the #ASPNET Community Standup today at 10 AM Pacific / 18:00 GMT with Javier C Nelson showing a preview of Raâ¦ https://t.co/Fg8NoQJtJp","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":14,"FavoriteCount":4,"RawContent":null},{"Id":"965964952442933249","CreatedAt":"2018-02-20T15:02:46+00:00","UserScreenname":"aspnet","Text":"Jeff is working with cognitive services and Bots today on stream... check it out! https://t.co/HVyIw0Wcgd","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":7,"FavoriteCount":9,"RawContent":null}]}},"RunOn":"2018-03-20T05:30:10.8319933Z","RunDurationInMilliseconds":9496}