{"Data":{"Blog":{"FeedItems":[{"Title":"Give the Visual Studio 2017 Version 15.5 Preview a Try!","PublishedOn":"2017-10-13T20:06:22+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"<p>With Visual Studio 2017 version 15.4 now stable and sporting some awesome new features, such as Xamarin Live integration, Android Oreo / iOS 11 support, and a smarter, smaller installation, it&#8217;s time to turn our attention to the next version of Visual Studio 2017, version 15.5! This upcoming release is now available as a preview [&#8230;]</p>\n<p>The post <a rel=\"nofollow\" href=\"https://blog.xamarin.com/give-visual-studio-2017-version-15-5-preview-try/\">Give the Visual Studio 2017 Version 15.5 Preview a Try!</a> appeared first on <a rel=\"nofollow\" href=\"https://blog.xamarin.com\">Xamarin Blog</a>.</p>\n","Href":"https://blog.xamarin.com/give-visual-studio-2017-version-15-5-preview-try/","RawContent":null},{"Title":"Bring 3D Models To Life in Augmented Reality with UrhoSharp","PublishedOn":"2017-10-12T19:28:50+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"<p>UrhoSharp brings 3D to a variety of platforms and uses its own binary mdl format for model files. There are many sources for 3D models, including cgtrader and TurboSquid, and formats such as FBX, OBJ, DAE and BLEND. Urho3D provides tools like AssetImporter and the Urho3D Blender Add-in so you can use these models. In [&#8230;]</p>\n<p>The post <a rel=\"nofollow\" href=\"https://blog.xamarin.com/bring-3d-models-life-augmented-reality-urhosharp/\">Bring 3D Models To Life in Augmented Reality with UrhoSharp</a> appeared first on <a rel=\"nofollow\" href=\"https://blog.xamarin.com\">Xamarin Blog</a>.</p>\n","Href":"https://blog.xamarin.com/bring-3d-models-life-augmented-reality-urhosharp/","RawContent":null},{"Title":"Updating Xamarin.iOS Apps for the iPhone X","PublishedOn":"2017-10-11T18:35:38+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"<p>There&#8217;s no doubt that one of the biggest announcements at WWDC this year was the iPhone X. The new Super Retina display is edge-to-edge on the device, creating an immersive experience we had yet to see on iPhones. With the new screen changes on the iPhone X, developers may be asking themselves, &#8220;What do I [&#8230;]</p>\n<p>The post <a rel=\"nofollow\" href=\"https://blog.xamarin.com/updating-xamarin-ios-apps-for-the-iphone-x/\">Updating Xamarin.iOS Apps for the iPhone X</a> appeared first on <a rel=\"nofollow\" href=\"https://blog.xamarin.com\">Xamarin Blog</a>.</p>\n","Href":"https://blog.xamarin.com/updating-xamarin-ios-apps-for-the-iphone-x/","RawContent":null},{"Title":"Build and Release Five-Star Apps Faster","PublishedOn":"2017-10-10T17:49:16+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"<p>The first step in the life of a mobile app is build automation, which builds the app and runs required tests to make sure the app follows required rules. Build automation is also the first step towards shipping high quality, five-star mobile apps. When building iOS and Android mobile applications, one of the main challenges [&#8230;]</p>\n<p>The post <a rel=\"nofollow\" href=\"https://blog.xamarin.com/build-and-release-five-star-apps-faster-with-visual-studio-mobile-center/\">Build and Release Five-Star Apps Faster</a> appeared first on <a rel=\"nofollow\" href=\"https://blog.xamarin.com\">Xamarin Blog</a>.</p>\n","Href":"https://blog.xamarin.com/build-and-release-five-star-apps-faster-with-visual-studio-mobile-center/","RawContent":null},{"Title":"Developing Real-Time Communication Apps with WebSocket","PublishedOn":"2017-10-09T21:17:54+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"<p>WebSockets is a two-way communication protocol, or persistence communication channel over TCP connection, an extremely powerful protocol leveraged by numerous games, apps with chat functionality, and real-time apps such as stock tickers. In this blog post, we&#8217;ll discuss how to build a simple Xamarin chat room application that will leverage and connect to an ASP.NET [&#8230;]</p>\n<p>The post <a rel=\"nofollow\" href=\"https://blog.xamarin.com/developing-real-time-communication-apps-with-websocket/\">Developing Real-Time Communication Apps with WebSocket</a> appeared first on <a rel=\"nofollow\" href=\"https://blog.xamarin.com\">Xamarin Blog</a>.</p>\n","Href":"https://blog.xamarin.com/developing-real-time-communication-apps-with-websocket/","RawContent":null},{"Title":"DataBinding Power Moves You May Not Be Using (Yet)","PublishedOn":"2017-10-05T21:05:47+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"<p>DataBinding is a fantastic feature that cleanly decouples your UI from the backing data models while providing the plumbing to move data back and forth as you need. But, are you getting the most out of the Binding features in Xamarin.Forms? Building on our previous Introduction to DataBinding and Advanced Data Binding posts, I’ll show [&#8230;]</p>\n<p>The post <a rel=\"nofollow\" href=\"https://blog.xamarin.com/databinding-power-moves-you-may-not-be-using-yet/\">DataBinding Power Moves You May Not Be Using (Yet)</a> appeared first on <a rel=\"nofollow\" href=\"https://blog.xamarin.com\">Xamarin Blog</a>.</p>\n","Href":"https://blog.xamarin.com/databinding-power-moves-you-may-not-be-using-yet/","RawContent":null},{"Title":"The Solar System with ARKit and F#","PublishedOn":"2017-10-04T21:09:02+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"<p>A few years ago, my colleague Joel Martinez and I wrote a F# program we called “Oculus Thrift” that demonstrated iOS SceneKit in a Google Cardboard stereoscopic viewer. With the recent release of iOS 11, I wanted to see if we could do something similar with ARKit, Apple’s augmented-reality framework. It took just 8 lines [&#8230;]</p>\n<p>The post <a rel=\"nofollow\" href=\"https://blog.xamarin.com/the-solar-system-with-arkit-and-f/\">The Solar System with ARKit and F#</a> appeared first on <a rel=\"nofollow\" href=\"https://blog.xamarin.com\">Xamarin Blog</a>.</p>\n","Href":"https://blog.xamarin.com/the-solar-system-with-arkit-and-f/","RawContent":null},{"Title":"Microcharts: Elegant Cross-Platform Charts for Every App","PublishedOn":"2017-10-03T19:13:09+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"<p>This is a guest post from Alo&#239;s Deniel. Alo&#239;s works at Orange Applications for Business as a Xamarin consultant. You can find him on Twitter at @aloisdeniel and on Github at @aloisdeniel. Displaying charts in mobile apps has always been a great way to offer users a clear overview of numerical data. In my time [&#8230;]</p>\n<p>The post <a rel=\"nofollow\" href=\"https://blog.xamarin.com/microcharts-elegant-cross-platform-charts-for-any-app/\">Microcharts: Elegant Cross-Platform Charts for Every App</a> appeared first on <a rel=\"nofollow\" href=\"https://blog.xamarin.com\">Xamarin Blog</a>.</p>\n","Href":"https://blog.xamarin.com/microcharts-elegant-cross-platform-charts-for-any-app/","RawContent":null},{"Title":"Android Support Library v26 Overview","PublishedOn":"2017-10-02T19:25:39+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"<p>The Android Support Library v26 brings lots of new features to our Android apps, including fonts as resources, downloadable fonts, emoji support, an autosizing TextView, physics driven animations via Spring and Fling, backwards compatibility for animated vectors, and a slimmer library by increasing the minSdkVersion to 14. If it isn&#8217;t already, the minSdkVersion for all [&#8230;]</p>\n<p>The post <a rel=\"nofollow\" href=\"https://blog.xamarin.com/android-support-library-v26-overview/\">Android Support Library v26 Overview</a> appeared first on <a rel=\"nofollow\" href=\"https://blog.xamarin.com\">Xamarin Blog</a>.</p>\n","Href":"https://blog.xamarin.com/android-support-library-v26-overview/","RawContent":null},{"Title":"Xamarin at Local Developer Events this October","PublishedOn":"2017-09-29T19:24:14+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"<p>We&#8217;re at the height of conference season, and that means tons of new and exciting releases, tooling, and updates to talk about with your local developer community! Mobile .NET developer conferences and meetups are the perfect opportunities to learn the latest on Xamarin and related technologies while networking with other developers. Below are just a [&#8230;]</p>\n<p>The post <a rel=\"nofollow\" href=\"https://blog.xamarin.com/xamarin-at-local-developer-events-this-october/\">Xamarin at Local Developer Events this October</a> appeared first on <a rel=\"nofollow\" href=\"https://blog.xamarin.com\">Xamarin Blog</a>.</p>\n","Href":"https://blog.xamarin.com/xamarin-at-local-developer-events-this-october/","RawContent":null}],"ResultType":"Feed"},"Android":{"Events":[{"Id":"6716563354","Type":"PullRequestEvent","CreatedAt":"2017-10-14T09:59:23","Actor":"radekdoulik","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/929","RelatedDescription":"Merged pull request \"[tests] Add Configuration info to test names\" (#929) at xamarin/xamarin-android","RelatedBody":"Context: 0077d151\r\nContext: d1d9820a\r\n\r\nA \"funny\" thing happened when commit e9daf5ea didn't build on Jenkins:\r\nI realized that not all tests were run in all configurations. From\r\ncommit d1d9820a:\r\n\r\n> Why are some tests Debug-only and some aren't?\r\n\r\nThe answer: time, primarily. Why run tests multiple times, when they\r\ncan be potentially time-consuming?\r\n\r\nWhile tests can be slow, they're not always *that* slow -- except for\r\n`Xamarin.Android.Build.Tests` and the BCL tests -- and even there,\r\nprogram behavior can alter between Debug and Release configurations.\r\nSee in particular commit 0077d151, in which the BCL tests are run only\r\nin the Debug configuration because tests *failed* when run in the\r\nRelease configuration.\r\n\r\nThe desire, then, is to run *all* tests in both Debug and Release\r\nconfigurations. Yes, it'll take longer! So what! (Within reason:\r\n`Xamarin.Android.Build.Tests` should only be run once!)\r\n\r\nHowever, this raises two problems:\r\n\r\n 1. Filename collisions\r\n 2. Jenkins unit test display\r\n\r\nUntil now, all tests wrote files into a filename that didn't include\r\nthe Configuration, e.g. `TestResult-Mono.Android_Tests.xml`. If we did\r\nrun these tests twice, the second test invocation would overwrite the\r\nfirst test invocation. This isn't desirable.\r\n\r\nThen there's the display on Jenkins: if we did have e.g.\r\n`TestResult-Mono.Android_Tests-Debug.xml`       and\r\n`TestResult-Mono.Android_Tests-Release.xml`, how will Jenkins display\r\nthat information? I haven't tested, but I would assume that one of two\r\nthings will occur, assuming reasonable Jenkins behavior:\r\n\r\n 1. Each test will be listed twice, e.g.\r\n\r\n        ApplicationContextIsApp\r\n        ApplicationContextIsApp\r\n\r\n 2. They'll be \"merged\" into a single entry.\r\n\r\nNeither of these behaviors is desirable: if Debug passes but Release\r\nfails, we need to be able to differentiate between them. Neither of\r\nthese possible renderings allows us to tell which configuration fails.\r\n\r\nSolve both of these problems by introducing a new `<RenameTestCases/>`\r\ntask. This task takes three values of importance:\r\n\r\n```xml\r\n<RenameTestCases\r\n    Configuration=\"CONFIGURATION\"\r\n    SourceFile=\"SOURCE\"\r\n    DestinationFolder=\"DESTINATION\"\r\n/>\r\n```\r\n\r\nThe `<RenameTestCases/>` task will read in `SOURCE`, and if `SOURCE`\r\nis an XML file which we determine is NUnit2-formatted XML (root\r\nelement of `<test-case/>`), we will update every `//test-case/@name`\r\nvalue so that it ends with ` / CONFIGURATION`. The updated XML is\r\nthen written to the `DESTINATION` directory, with a filename that\r\ncontains `CONFIGURATION`, and `SOURCE` is deleted.\r\n\r\nThus, if we have a Debug-configuration\r\n`TestResult-Mono.Android_Tests.xml` file with XML fragment:\r\n\r\n```xml\r\n<test-case\r\n    name=\"Mono.Android_Tests, Android.AppTests.ApplicationTest.ApplicationContextIsApp\"\r\n    ...\r\n/>\r\n```\r\n\r\nthen `<RenameTestCases/>` will create the file\r\n`TestResult-Mono.Android_Tests-Debug.xml` file with XML fragment:\r\n\r\n```xml\r\n<test-case\r\n    name=\"Mono.Android_Tests, Android.AppTests.ApplicationTest.ApplicationContextIsApp / Debug\"\r\n    ...\r\n/>\r\n```\r\n\r\nThis allows us to run tests in both Debug and Release configurations\r\nwhile not inadvertently overwriting the `TestResults*.xml` files that\r\nJenkins reads, and ensuring that the Jenkins test result output is\r\nrendered in a meaningfully useful fashion.\r\n\r\nAside: when updating `//test-case/@name`, the resulting value *cannot*\r\nend in `)`. If it does, then the `(root)` package name issue fixed in\r\ncommit 23b2642e reappears for the `generator` unit tests.\r\n\r\n**Completely random aside about the state of `xbuild`**:\r\nA development version of `<RenameTestCases/>` was \"saner\", using\r\n`ITaskItem[]` and not string:\r\n\r\n```csharp\r\npartial class RenameTestCases {\r\n    public      ITaskItem[]   SourceFiles {get; set;}\r\n    // vs.\r\n    //  public  string        SourceFile  {get; set;}\r\n}\r\n```\r\n\r\nThe problem is that the above, while entirely reasonable, did not work\r\nat all correctly with `xbuild`:\r\n\r\n```xml\r\n<RenameTestCases SourceFiles=\"%(TestApk.ResultsPath)\" />\r\n```\r\n\r\nUnder `xbuild`, MSBuild properties would not be expanded, e.g.\r\n`RenameTestCases.SourceFiles` would get a \"bizarro\" value of e.g.\r\n`$(OutputPath)Mono.Android_Tests-Signed.apk`, which is *useless* and\r\nwould result in `FileNotFoundException`s.\r\n\r\nMSBuild proper, of course, worked as desired.\r\n\r\nTODO: Once this is merged, update the Jenkins Configuration page so\r\nthat instead of:\r\n\r\n        make run-all-tests V=1 || exit 1\r\n\r\nit instead runs both Debug and Release configuration tests:\r\n\r\n        make run-all-tests SKIP_NUNIT_TESTS=1    V=1 || exit 1\r\n        make run-all-tests CONFIGURATION=Release V=1 || exit 1\r\n\r\nNote that `$(SKIP_NUNIT_TESTS)` is specified so that we only run the\r\nlengthy (1+hr!) `Xamarin.Android.Build.Tests` tests in the Release\r\nconfiguration, not the Debug + Release configurations."},{"Id":"6715423235","Type":"PullRequestEvent","CreatedAt":"2017-10-13T21:05:14","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/910","RelatedDescription":"Merged pull request \"[xabuild.exe] cross-platform form of tools/scripts/xabuild\" (#910) at xamarin/xamarin-android","RelatedBody":"Context: https://github.com/jonathanpeppers/xabuild\r\n\r\nxabuild.exe is a nice wrapper around MSBuild for compiling\r\nXamarin.Android projects using a locally built version of\r\nXamarin.Android on your system. It seems to work on Windows, MacOS, and\r\nLinux and doesn’t require elevation or modify your system.\r\n\r\nxabuild.exe works by doing the following:\r\n- Reference `MSBuild.exe` or `MSBuild.dll` depending on the platform\r\n- Overrides the `app.config` file of MSBuild to set various properties\r\n- This allows `xabuild.exe` to build Xamarin.Android projects using\r\nlocal Xamarin.Android build output\r\n- Creates symbolic links to `.NETPortable` and `.NETFramework`\r\ndirectories inside the Xamarin.Android build output directory\r\n- Run MSBuild’s `Main()` method\r\n\r\n### Changes\r\n- Added `xabuild.csproj` to Xamarin.Android.sln\r\n- `tools/scripts/xabuild` now runs `xabuild.exe` if `MSBUILD=msbuild`\r\n- Xamarin.Android.Build.Tests run `tools/scripts/xabuild` on Unix\r\nand `xabuild.exe` on Windows\r\n\r\n### Usage\r\n\r\nAn example on MacOS:\r\n```\r\n$ make prepare all MSBUILD=msbuild\r\n$ make all-tests MSBUILD=msbuild\r\n$ make run-nunit-tests MSBUILD=msbuild NUNIT_TESTS=bin/TestDebug/Xamarin.Android.Build.Tests.dll\r\n```\r\n\r\nAn example on Windows (msbuild should be 15.3 from VS 2017):\r\n```\r\n> msbuild build-tools\\scripts\\PrepareWindows.targets\r\n> msbuild Xamarin.Android.sln\r\n> bin\\Debug\\bin\\xabuild.exe Xamarin.Android-Tests.sln /p:XAIntegratedTests=False\r\n> packages\\NUnit.ConsoleRunner.3.7.0\\tools\\nunit3-console.exe bin\\TestDebug\\Xamarin.Android.Build.Tests.dll\r\n```\r\nNote, these tests are not all passing on Windows yet. See [here](https://devdiv.visualstudio.com/DevDiv/Default/_build/index?buildId=1022831) for latest results."},{"Id":"6715151675","Type":"PullRequestEvent","CreatedAt":"2017-10-13T19:52:52","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/936","RelatedDescription":"Merged pull request \"[bcl tests] fix remaining issue for Release configuration\" (#936) at xamarin/xamarin-android","RelatedBody":"The results reporting acted weird and hid 2 failures, which were not\r\nreported in the instrumentation result lines\r\n\r\n         INSTRUMENTATION_RESULT: failed=0\r\n         INSTRUMENTATION_RESULT: inconclusive=0\r\n         INSTRUMENTATION_RESULT: passed=20134\r\n         INSTRUMENTATION_RESULT: run=20466\r\n         INSTRUMENTATION_RESULT: nunit2-results-path=/data/data/Xamarin.Android.Bcl_Tests/files/.__override__/TestResults.xml\r\n         INSTRUMENTATION_RESULT: skipped=322\r\n         INSTRUMENTATION_CODE: -1\r\n\r\nand were only reported in the\r\n`TestResult-Xamarin.Android.Bcl_Tests-Release.xml` file.\r\n\r\nFrom logcat output we can see the crash (same for both failures)\r\n\r\n    --------- beginning of crash\r\n    E/AndroidRuntime( 3826): FATAL EXCEPTION: main\r\n    E/AndroidRuntime( 3826): Process: Xamarin.Android.Bcl_Tests, PID: 3826\r\n    E/AndroidRuntime( 3826): android.runtime.JavaProxyThrowable: System.Reflection.TargetInvocationException: Exception has been thrown by the target of an invocation. ---> System.NotSupportedException: Linked away.\r\n    E/AndroidRuntime( 3826):   at (wrapper managed-to-native) System.Object:__icall_wrapper_ves_icall_object_new_specific (intptr)\r\n    E/AndroidRuntime( 3826):   at MonoTests.System.Runtime.Remoting.ContextTest..ctor () [0x00000] in <0484cb939a1a4a72be4938b3c08edcaa>:0\r\n    E/AndroidRuntime( 3826):   at (wrapper managed-to-native) System.Reflection.MonoCMethod:InternalInvoke (System.Reflection.MonoCMethod,object,object[],System.Exception&)\r\n    E/AndroidRuntime( 3826):   at System.Reflection.MonoCMethod.InternalInvoke (System.Object obj, System.Object[] parameters) [0x00002] in <0e1d684ae38a4822aaf6364f06390ad6>:0\r\n    E/AndroidRuntime( 3826):    --- End of inner exception stack trace ---\r\n\r\nThat lead us to the `mono/mono/metadata/object.c` source, where\r\n`mono_error_set_not_supported (error, \"Linked away.\");` is used 6\r\ntimes.\r\n\r\nOne of the cases was related to `im = mono_class_get_method_from_name\r\n(klass, \"CreateProxyForType\", 1);`. That led us to the linked away\r\nSystem.Runtime.Remoting.Activation.ActivationServices.CreateProxyForType\r\nmethod."},{"Id":"6715056139","Type":"PullRequestEvent","CreatedAt":"2017-10-13T19:27:07","Actor":"radekdoulik","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/936","RelatedDescription":"Opened pull request \"[bcl tests] fix remaining issue for Release configuration\" (#936) at xamarin/xamarin-android","RelatedBody":"The results reporting acted weird and hid 2 failures, which were not\r\nreported in the instrumentation result lines\r\n\r\n         INSTRUMENTATION_RESULT: failed=0\r\n         INSTRUMENTATION_RESULT: inconclusive=0\r\n         INSTRUMENTATION_RESULT: passed=20134\r\n         INSTRUMENTATION_RESULT: run=20466\r\n         INSTRUMENTATION_RESULT: nunit2-results-path=/data/data/Xamarin.Android.Bcl_Tests/files/.__override__/TestResults.xml\r\n         INSTRUMENTATION_RESULT: skipped=322\r\n         INSTRUMENTATION_CODE: -1\r\n\r\nand were only reported in the\r\n`TestResult-Xamarin.Android.Bcl_Tests-Release.xml` file.\r\n\r\nFrom logcat output we can see the crash (same for both failures)\r\n\r\n    --------- beginning of crash\r\n    E/AndroidRuntime( 3826): FATAL EXCEPTION: main\r\n    E/AndroidRuntime( 3826): Process: Xamarin.Android.Bcl_Tests, PID: 3826\r\n    E/AndroidRuntime( 3826): android.runtime.JavaProxyThrowable: System.Reflection.TargetInvocationException: Exception has been thrown by the target of an invocation. ---> System.NotSupportedException: Linked away.\r\n    E/AndroidRuntime( 3826):   at (wrapper managed-to-native) System.Object:__icall_wrapper_ves_icall_object_new_specific (intptr)\r\n    E/AndroidRuntime( 3826):   at MonoTests.System.Runtime.Remoting.ContextTest..ctor () [0x00000] in <0484cb939a1a4a72be4938b3c08edcaa>:0\r\n    E/AndroidRuntime( 3826):   at (wrapper managed-to-native) System.Reflection.MonoCMethod:InternalInvoke (System.Reflection.MonoCMethod,object,object[],System.Exception&)\r\n    E/AndroidRuntime( 3826):   at System.Reflection.MonoCMethod.InternalInvoke (System.Object obj, System.Object[] parameters) [0x00002] in <0e1d684ae38a4822aaf6364f06390ad6>:0\r\n    E/AndroidRuntime( 3826):    --- End of inner exception stack trace ---\r\n\r\nThat lead us to the `mono/mono/metadata/object.c` source, where\r\n`mono_error_set_not_supported (error, \"Linked away.\");` is used 6\r\ntimes.\r\n\r\nOne of the cases was related to `im = mono_class_get_method_from_name\r\n(klass, \"CreateProxyForType\", 1);`. That led us to the linked away\r\nSystem.Runtime.Remoting.Activation.ActivationServices.CreateProxyForType\r\nmethod."},{"Id":"6713492073","Type":"PullRequestEvent","CreatedAt":"2017-10-13T13:40:12","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/933","RelatedDescription":"Merged pull request \"[linker] backport a linker fix from macios\" (#933) at xamarin/xamarin-android","RelatedBody":"It fixes issues seen in Bcl_Tests in Release configuration, like this failure:\r\n\r\n                INSTRUMENTATION_RESULT: failure: MonoTests.System.Data.SqlClient.SqlParameterTest.SqlTypes_SqlXml=System.TypeInitializationException : The type initializer for 'System.Data.SqlTypes.SqlXml' threw an exception.\r\n                  ----> System.NullReferenceException : Object reference not set to an instance of an object\r\n                  at MonoTests.System.Data.SqlClient.SqlParameterTest.SqlTypes_SqlXml () [0x0000f] in <d3fe7682843340618220fc60464eade1>:0\r\n                  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (System.Reflection.MonoMethod,object,object[],System.Exception&)\r\n                  at System.Reflection.MonoMethod.Invoke (System.Object obj, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00032] in <51a329e8e71c4397bca44989ce6da968>:0\r\n                --NullReferenceException\r\n                  at System.Data.SqlTypes.SqlXml.CreateSqlReaderDelegate () [0x00005] in <4d34b2f0d7b341ba8bf5662ec34a478a>:0\r\n                  at System.Data.SqlTypes.SqlXml..cctor () [0x00000] in <4d34b2f0d7b341ba8bf5662ec34a478a>:0\r\n\r\nThe original commit in maccore:\r\n```\r\ncommit efa526447d915061b6d3376a747675847c6ce5fe\r\nAuthor: Marek Safar <marek.safar@gmail.com>\r\nDate:   Wed May 27 20:28:11 2015 +0200\r\n\r\n    [linker] Mark internal System.Xml XmlReader::CreateSqlReader used by System.Data\r\n```"},{"Id":"6713128688","Type":"PullRequestEvent","CreatedAt":"2017-10-13T12:17:41","Actor":"dellis1972","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/935","RelatedDescription":"Opened pull request \"[Xamarin.Android.Build.Tasks] Add new Disabled Issue for MissingSuperCall\" (#935) at xamarin/xamarin-android","RelatedBody":"lint 26.1.1 added a new MissingSuperCall check to lint. This\r\nerrors out if a class does NOT call `super.OnCreate`. Because\r\nour generated code doesn't need to call `supoer.OnCreate`."},{"Id":"6711087161","Type":"PullRequestEvent","CreatedAt":"2017-10-13T01:23:40","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/934","RelatedDescription":"Merged pull request \"[tests] Add link description xml file for Bcl_tests\" (#934) at xamarin/xamarin-android","RelatedBody":"Some of the tests use reflection to access BCL API. Parts of the\r\nneeded API is linked away by the linker. The link description file\r\nmakes sure the needed parts stay in the mscorlib and thus the tests\r\ndon't fail.\r\n\r\nThis fixes remaining issues in the Bcl_tests in Release configuration\r\nand the test should run without failures when linked (LinkSdkOnly)."}],"ResultType":"GitHubEvent"},"Forms":{"Events":[{"Id":"6715230067","Type":"PullRequestEvent","CreatedAt":"2017-10-13T20:13:34","Actor":"kingces95","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/1200","RelatedDescription":"Opened pull request \"Clear MainPage renderer if exists after reload\" (#1200) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\n\r\nCustomer expected MainPage could be re-initialized after reloading app. Actually, existence of a renderer for the MainPage prevented MainPage from being attached the the new activity. This is \"correct\" (although still a regression) as the old MainPage renderer existed in a different context. \r\n\r\nThe \"fix\" is to clear the MainPage renderer so a new renderer is created in the correct context. I say, \"fix\" because it does not reuse the existing renderer so the customer will not see the same performance benefit however it'll likely have saved the customer from even more insidious bugs stemming from using views from a deleted context. \r\n\r\n### Bugs Fixed ###\r\n\r\nhttps://bugzilla.xamarin.com/show_bug.cgi?id=59882\r\n\r\n### API Changes ###\r\n\r\nNone\r\n\r\n### Behavioral Changes ###\r\n\r\nAllow MainPage to be re-initialized after re-launch.\r\n\r\n### PR Checklist ###\r\n\r\n- [ ] Has tests (if omitted, state reason in description)\r\n- [x] Rebased on top of master at time of PR\r\n- [x] Changes adhere to coding standard\r\n- [x] Consolidate commits as makes sense\r\n"},{"Id":"6714685280","Type":"PullRequestEvent","CreatedAt":"2017-10-13T17:56:09","Actor":"kingces95","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/1199","RelatedDescription":"Opened pull request \"Deduplicate AutomationPropertiesProvider\" (#1199) at xamarin/Xamarin.Forms","RelatedBody":"Expected fast renderers to reuse slow renderer code where possible. Actually found duplication. This is an attempt to de-duplicate the automation code and establish a precedent for code reuse going forward. "},{"Id":"6714342232","Type":"PullRequestEvent","CreatedAt":"2017-10-13T16:31:53","Actor":"hartez","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/1198","RelatedDescription":"Opened pull request \"[Android] Allow VisualElementRenderer to process Click and LongClick\" (#1198) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\n\r\nRecent changes to fix some gesture problems on Android could interfere with custom Click/LongClick listeners on custom renderers by preventing the touch events from being processed. This change allows the renderers to process the events and fire off Click/LongClick if necessary.\r\n\r\n### Bugs ###\r\n\r\n- [60122 – LongClick on image not working](https://bugzilla.xamarin.com/show_bug.cgi?id=60122)\r\n\r\n### API Changes ###\r\n\r\nNone\r\n\r\n### Behavioral Changes ###\r\n\r\nNone\r\n\r\n### PR Checklist ###\r\n\r\n- [x] Has tests (if omitted, state reason in description)\r\n- [x] Rebased on top of master at time of PR\r\n- [x] Changes adhere to coding standard\r\n- [x] Consolidate commits as makes sense\r\n"},{"Id":"6710102681","Type":"PullRequestEvent","CreatedAt":"2017-10-12T20:18:17","Actor":"pauldipietro","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/1197","RelatedDescription":"Opened pull request \"[Android] Prevent a custom Entry/Editor Drawable from modifying non-custom ones\" (#1197) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\n\r\nUsing a custom renderer for an `Entry`/`Editor` which uses a modified `Drawable` as the first one on the page affects the others (in the report, it refers to the tint that changes the underline's color). Utilizing [`DrawableCompat.Wrap(Drawable drawable)`](https://developer.android.com/reference/android/support/v4/graphics/drawable/DrawableCompat.html#wrap(android.graphics.drawable.Drawable)) adjusts its state in a manner so that a custom renderers won't interfere with the default appearance. \r\n\r\nBefore:\r\n![before](https://user-images.githubusercontent.com/1251024/31516711-7c9b03bc-af67-11e7-92d2-91f6454c48de.JPG)\r\n\r\nAfter:\r\n![after](https://user-images.githubusercontent.com/1251024/31516714-809a991e-af67-11e7-9d2a-a6ed3fe2b27f.JPG)\r\n\r\n\r\n### Bugs Fixed ###\r\n\r\nhttps://bugzilla.xamarin.com/show_bug.cgi?id=59457\r\n\r\n### API Changes ###\r\n\r\nNone\r\n\r\n### Behavioral Changes ###\r\n\r\nBased on the screenshots above, side-effects don't seem apparent, and any subsequent changes in overriding `OnElementChanged` (such as with the custom renderer in this example) should still be respected.\r\n\r\n### PR Checklist ###\r\n\r\n- [ ] Has tests (if omitted, state reason in description)\r\n- [x] Rebased on top of master at time of PR\r\n- [x] Changes adhere to coding standard\r\n- [x] Consolidate commits as makes sense\r\n"}],"ResultType":"GitHubEvent"},"Macios":{"Events":[{"Id":"6715658158","Type":"PullRequestEvent","CreatedAt":"2017-10-13T22:19:30","Actor":"timrisi","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/2891","RelatedDescription":"Opened pull request \"[macOS] Fix Introspection and API tests\" (#2891) at xamarin/xamarin-macios","RelatedBody":""},{"Id":"6715557333","Type":"PullRequestEvent","CreatedAt":"2017-10-13T21:45:49","Actor":"Aguilex","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/2889","RelatedDescription":"Merged pull request \"Updated reference to mono/mono@38da0b3\" (#2889) at xamarin/xamarin-macios","RelatedBody":"Updated reference to mono/mono@38da0b3\r\n\r\nhttps://github.com/mono/mono/compare/b21ae3e874e8a3f55c63a33e9e39d143361fe10a...d15-5-2017-06"},{"Id":"6714999354","Type":"PullRequestEvent","CreatedAt":"2017-10-13T19:12:14","Actor":"dalexsoto","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/2890","RelatedDescription":"Opened pull request \"Remove annoying warnings CS0105, CS0109 and CS0618 from our builds\" (#2890) at xamarin/xamarin-macios","RelatedBody":""},{"Id":"6714964937","Type":"PullRequestEvent","CreatedAt":"2017-10-13T19:03:45","Actor":"xamarin-release-manager","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/2889","RelatedDescription":"Opened pull request \"Updated reference to mono/mono@38da0b3\" (#2889) at xamarin/xamarin-macios","RelatedBody":""},{"Id":"6714938328","Type":"PullRequestEvent","CreatedAt":"2017-10-13T18:57:18","Actor":"Aguilex","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/2888","RelatedDescription":"Merged pull request \"Updated reference to mono/mono@b21ae3e\" (#2888) at xamarin/xamarin-macios","RelatedBody":"Updated reference to mono/mono@b21ae3e\r\n"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"919305335759953927","CreatedAt":"2017-10-14T20:54:06+00:00","UserScreenname":"xamarinhq","Text":"Weekend project: add some new features to your #Xamarin Android apps with our Android Support Library v26 overview:… https://t.co/49gaLayBhU","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":23,"FavoriteCount":10,"RawContent":null},{"Id":"918566588483342336","CreatedAt":"2017-10-12T19:58:35+00:00","UserScreenname":"xamarinhq","Text":"Bring 3D Models to life in augmented reality with #UrhoSharp: https://t.co/0c8YDgfF2Z https://t.co/j4LE7PWPMd","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":66,"FavoriteCount":32,"RawContent":null},{"Id":"918507552811487232","CreatedAt":"2017-10-12T16:04:00+00:00","UserScreenname":"xamarinhq","Text":"Learn how to build better apps with @BritchDavid's eBook on \"Enterprise Application Patterns using #XamarinForms\": https://t.co/YryVqlrejk","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":38,"FavoriteCount":8,"RawContent":null},{"Id":"918186189634572288","CreatedAt":"2017-10-11T18:47:01+00:00","UserScreenname":"xamarinhq","Text":"Update your #Xamarin iOS apps for the iPhone X: https://t.co/Yi49G6ijnP https://t.co/OmUwO59Fdx","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":55,"FavoriteCount":31,"RawContent":null},{"Id":"918142648204124160","CreatedAt":"2017-10-11T15:54:00+00:00","UserScreenname":"xamarinhq","Text":"#XamarinDevDays are a great way to learn how to build, test, &amp; connect native apps with #Xamarin! Find one near you: https://t.co/Ytw07Fr9eL","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":23,"FavoriteCount":16,"RawContent":null},{"Id":"917846344714391552","CreatedAt":"2017-10-10T20:16:35+00:00","UserScreenname":"xamarinhq","Text":"Learn how to build and release high quality, five-star apps faster using #VSMobileCenter: https://t.co/XHMCHeVNSB https://t.co/3hhv3CG6uh","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":62,"FavoriteCount":29,"RawContent":null},{"Id":"917779002781249539","CreatedAt":"2017-10-10T15:49:00+00:00","UserScreenname":"xamarinhq","Text":"Learn how to display data with #macOS Table Views: https://t.co/NHwCfrILH6","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":17,"FavoriteCount":11,"RawContent":null},{"Id":"917501676159893504","CreatedAt":"2017-10-09T21:27:00+00:00","UserScreenname":"xamarinhq","Text":"Learn how to build a real-time #XamarinForms communication app with #WebSocket: https://t.co/u3wk0FzGbu","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":116,"FavoriteCount":65,"RawContent":null},{"Id":"917416111804702720","CreatedAt":"2017-10-09T15:47:00+00:00","UserScreenname":"xamarinhq","Text":"Build a sample app that spans devices and mobile platforms using Microsoft's Project Rome: https://t.co/SLeQw6q4YO","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":40,"FavoriteCount":19,"RawContent":null},{"Id":"917203711692337152","CreatedAt":"2017-10-09T01:43:00+00:00","UserScreenname":"xamarinhq","Text":"Xamarin's @nishanil shows you how to add #facetracking and live recognition to your Android app: https://t.co/5R7K2hNJXY","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":33,"FavoriteCount":18,"RawContent":null},{"Id":"916789236879290370","CreatedAt":"2017-10-07T22:16:01+00:00","UserScreenname":"xamarinhq","Text":"Sign up for our FREE event in Denver (10/10) or McLean (10/12) where you'll learn how to build a #XamarinForms app:… https://t.co/frCmLy2kS5","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":13,"FavoriteCount":5,"RawContent":null},{"Id":"916409733246017536","CreatedAt":"2017-10-06T21:08:01+00:00","UserScreenname":"xamarinhq","Text":"Get excited! https://t.co/0m45zTRqFK","Source":"<a href=\"http://twitter.com\" rel=\"nofollow\">Twitter Web Client</a>","RetweetCount":37,"FavoriteCount":19,"RawContent":null},{"Id":"916329451205595137","CreatedAt":"2017-10-06T15:49:00+00:00","UserScreenname":"xamarinhq","Text":"Build a sample enterprise app with the Microsoft Authentication Library and #MicrosoftGraph APIs: https://t.co/d9Rlu92TWT","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":62,"FavoriteCount":28,"RawContent":null},{"Id":"916052505406197760","CreatedAt":"2017-10-05T21:28:31+00:00","UserScreenname":"xamarinhq","Text":"DataBinding Power Moves You May Not Be Using (Yet), with @davidortinau: https://t.co/VpucH7m8z9","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":52,"FavoriteCount":29,"RawContent":null},{"Id":"915970088846659584","CreatedAt":"2017-10-05T16:01:01+00:00","UserScreenname":"xamarinhq","Text":"Upgrade to #XamarinForms Stable release 2.4.0 with .NET Standard 2.0 support today! Learn more about this release:… https://t.co/Ku71DbGybm","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":97,"FavoriteCount":70,"RawContent":null},{"Id":"915688986986901504","CreatedAt":"2017-10-04T21:24:01+00:00","UserScreenname":"xamarinhq","Text":"#Xamarin's @lobrien explores the solar system with #ARKit and F#: https://t.co/0UXY2Lk1XB https://t.co/QclUHc5QGx","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":36,"FavoriteCount":28,"RawContent":null},{"Id":"915603919925125121","CreatedAt":"2017-10-04T15:46:00+00:00","UserScreenname":"xamarinhq","Text":"ICYMI, check out our webinar recording on using UrhoSharp 3D and #Xamarin Workbooks to add 3D animation to your app: https://t.co/AG37mw39QS","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":20,"FavoriteCount":6,"RawContent":null},{"Id":"915295800825204736","CreatedAt":"2017-10-03T19:21:38+00:00","UserScreenname":"xamarinhq","Text":"Add beautiful charts to ANY app with #Microcharts in today's post from guest blogger @aloisdeniel :… https://t.co/Gl1XMS0UDG","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":221,"FavoriteCount":87,"RawContent":null},{"Id":"915249837368627205","CreatedAt":"2017-10-03T16:19:00+00:00","UserScreenname":"xamarinhq","Text":"Learn how to embed any #XamarinForms ContentPage into your #Xamarin iOS and Android projects: https://t.co/U3QvCAOeFf","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":34,"FavoriteCount":30,"RawContent":null},{"Id":"914940829604679681","CreatedAt":"2017-10-02T19:51:07+00:00","UserScreenname":"xamarinhq","Text":"Add emoji support, physics driven animations, and more to your #Xamarin apps with Android Support Library v26:… https://t.co/iM0N4411PQ","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":66,"FavoriteCount":36,"RawContent":null}]}},"RunOn":"2017-10-15T05:30:37.3018466Z","RunDurationInMilliseconds":3944}