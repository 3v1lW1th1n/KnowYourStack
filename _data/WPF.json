{"Data":{"GitHub":{"Issues":[{"Id":"532875434","IsPullRequest":false,"CreatedAt":"2019-12-05T00:29:00","Actor":"njannink","Number":"2277","RawContent":null,"Title":"After update to VS 16.4 projects stop compiling","State":"closed","Body":"After I updated to 16.4 my wpf projects stopped compiling with the following error:\r\n\r\n_Microsoft.WinFX.targets(225,9): error MC1000: Unknown build error, 'Could not find assembly 'mscorlib, Version=2.0.5.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e'. Either explicitly load this assembly using a method such as LoadFromAssemblyPath() or use a MetadataAssemblyResolver that returns a valid assembly.'_\r\n\r\nEverything was working fine in 16.3\r\n\r\nMy project file:\r\n\r\n```\r\n<Project Sdk=\"Microsoft.NET.Sdk.WindowsDesktop\">\r\n\r\n  <PropertyGroup>\r\n    <TargetFramework>net472</TargetFramework>\r\n    <UseWPF>true</UseWPF>\r\n    <RootNamespace>xxx.UI</RootNamespace>\r\n    <AssemblyName>xxx.UI</AssemblyName>\r\n  </PropertyGroup>\r\n\r\n    <ItemGroup>\r\n    <PackageReference Include=\"BracketPipe\" Version=\"0.7.7232.28997\" />\r\n    <PackageReference Include=\"DynamicData\" Version=\"6.13.21\" />\r\n    <PackageReference Include=\"Markdig.Wpf\" Version=\"0.3.1\" />\r\n    <PackageReference Include=\"Microsoft.Xaml.Behaviors.Wpf\" Version=\"1.1.3\" />\r\n    <PackageReference Include=\"RtfPipe\" Version=\"1.0.7246.39337\" />\r\n  </ItemGroup>\r\n\r\n  <ItemGroup>\r\n    <None Remove=\"Resources\\**\\*.*\" />\r\n    <Resource Include=\"Resources\\**\\*.*\" />\r\n  </ItemGroup>\r\n\r\n  <ItemGroup>\r\n    <Compile Update=\"Properties\\Resources.Designer.cs\">\r\n      <DesignTime>True</DesignTime>\r\n      <AutoGen>True</AutoGen>\r\n      <DependentUpon>Resources.resx</DependentUpon>\r\n    </Compile>\r\n  </ItemGroup>\r\n\r\n  <ItemGroup>\r\n    <EmbeddedResource Update=\"Properties\\Resources.resx\">\r\n      <Generator>PublicResXFileCodeGenerator</Generator>\r\n      <LastGenOutput>Resources.Designer.cs</LastGenOutput>\r\n    </EmbeddedResource>\r\n  </ItemGroup>\r\n</Project>\r\n```","Url":"https://github.com/dotnet/wpf/issues/2277","RelatedDescription":"Closed issue \"After update to VS 16.4 projects stop compiling\" (#2277)"},{"Id":"532863848","IsPullRequest":false,"CreatedAt":"2019-12-04T18:39:30","Actor":"scalablecory","Number":"2276","RawContent":null,"Title":"Using a BackgroundVisualHost causes a crash in WPF (example repo available)","State":"open","Body":"_From @adscott1982 on Tuesday, December 3, 2019 5:04:20 PM_\r\n\r\nShowing / hiding UI on a non-main thread dispatcher will cause WPF to crash.\r\n\r\nThis problem is present on .NET Core 3.0, Framework 4.8, 4.7.2 and 4.7.0 and perhaps others.\r\n\r\nUsing the technique in the following blog post used to work, but will now eventually cause a crash in WPF:\r\n\r\nhttp://gettinggui.com/creating-a-busy-indicator-in-a-separate-thread-in-wpf/\r\n\r\nThis issue has only been seen since around September 2019.\r\n\r\nA repo demonstrating the issue is here, and will usually cause the issue within a couple of minutes:\r\n\r\nhttps://github.com/adscott1982/BackgroundUIThreadError\r\n\r\nMy system is:\r\n\r\nWindows 10 Professional 1909\r\nVisual Studio 2019 Professional\r\nNvidia Quadro P400\r\n\r\nThere are various different exception messages that will be shown when the issue presents itself. I will gather up as many as I can and attach them as text files.\r\n\r\n[Catastrophic failure.txt](https://github.com/dotnet/core/files/3917794/Catastrophic.failure.txt)\r\n[internal error in the dot net runtime.txt](https://github.com/dotnet/core/files/3917810/internal.error.in.the.dot.net.runtime.txt)\r\n[render thread failure.txt](https://github.com/dotnet/core/files/3917837/render.thread.failure.txt)\r\n[missing end command.txt](https://github.com/dotnet/core/files/3917839/missing.end.command.txt)\r\n\r\n\r\n_Copied from original issue: dotnet/core#3948_","Url":"https://github.com/dotnet/wpf/issues/2276","RelatedDescription":"Open issue \"Using a BackgroundVisualHost causes a crash in WPF (example repo available)\" (#2276)"},{"Id":"532679890","IsPullRequest":true,"CreatedAt":"2019-12-04T13:29:10","Actor":"dotnet-maestro[bot]","Number":"2275","RawContent":null,"Title":"[master] Update dependencies from dnceng/internal/dotnet-wpf-int","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:46a15fe4-6c2c-480d-9cdd-08d71053b252)\r\n## From https://dev.azure.com/dnceng/internal/_git/dotnet-wpf-int\r\n- **Build**: 20191203.4\r\n- **Date Produced**: 12/4/2019 1:04 AM\r\n- **Commit**: 9078ec67020253a103fed694528f6093ba165a8c\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Wpf.DncEng** -> 5.0.0-alpha.1.19603.4\r\n\r\n[marker]: <> (End:46a15fe4-6c2c-480d-9cdd-08d71053b252)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/2275","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dnceng/internal/dotnet-wpf-int\" (#2275)"},{"Id":"532573416","IsPullRequest":false,"CreatedAt":"2019-12-04T10:00:36","Actor":"olivegamestudio","Number":"2274","RawContent":null,"Title":"Updating to 16.4 from 16.3.x causes build issues with WPF project file.","State":"open","Body":"When building a WPF project the following error is shown, this built fine in the last 16.3.x version that was released.\r\n\r\n> C:\\Program Files\\dotnet\\sdk\\3.1.100\\Sdks\\Microsoft.NET.Sdk.WindowsDesktop\\targets\\Microsoft.WinFX.targets(225,9): error MC1000: Unknown build error, 'Could not find assembly 'mscorlib, Version=2.0.5.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e'. Either explicitly load this assembly using a method such as LoadFromAssemblyPath() or use a MetadataAssemblyResolver that returns a valid assembly.'\r\n\r\nThe project file:\r\n\r\n```\r\n<Project Sdk=\"Microsoft.NET.Sdk.WindowsDesktop\">\r\n\r\n  <PropertyGroup>\r\n    <OutputType>Library</OutputType>\r\n    <TargetFramework>net461</TargetFramework>\r\n    <UseWPF>true</UseWPF>\r\n    <Platforms>x86</Platforms>\r\n    <GeneratePackageOnBuild>false</GeneratePackageOnBuild>\r\n    <Version>1.0.0</Version>\r\n    <Description></Description>\r\n    <FileVersion>1.0.0.0</FileVersion>\r\n    <AssemblyVersion>1.0.0.0</AssemblyVersion>\r\n    <ApplicationIcon />\r\n    <StartupObject />\r\n  </PropertyGroup>\r\n\r\n</Project>\r\n```","Url":"https://github.com/dotnet/wpf/issues/2274","RelatedDescription":"Open issue \"Updating to 16.4 from 16.3.x causes build issues with WPF project file.\" (#2274)"},{"Id":"532298026","IsPullRequest":false,"CreatedAt":"2019-12-03T22:06:04","Actor":"vatsan-madhavan","Number":"2273","RawContent":null,"Title":"Happy Holidays (aka Dec Update for WPF on .NET Core )","State":"open","Body":"## Happy Holidays (aka Dec Update for WPF on .NET Core )\r\n\r\nWe recently announced [.NET Core 3.0.1](https://devblogs.microsoft.com/dotnet/net-core-november-2019/). Although this is a small update, it has significant bug-fixes. We also just released [.NET Core 3.1](https://dotnet.microsoft.com/download/dotnet-core/3.1), which will be an LTS release. \r\n\r\nSince our [last update](https://github.com/dotnet/wpf/issues/1731), the WPF team has fixed several bugs and has started work that will continue onto the next year. \r\n\r\nThematically, the work we have been doing over the past several weeks can be categorized into improvements in the following focus areas:\r\n\r\n- High DPI \r\n- Accessibility \r\n- SDK\r\n- [WPF Samples](https://github.com/Microsoft/WPF-Samples)\r\n\r\n\r\n### High DPI \r\n\r\nAll issues noted below assume that applications are [manifested for high-DPI](https://docs.microsoft.com/en-us/previous-versions/windows/desktop/legacy/mt846517(v%3Dvs.85)). \r\n\r\n- When moving applications from one monitor to another, the insertion caret sometimes disappears. (https://github.com/dotnet/wpf/issues/1774). \r\n  - @SamBent found that the OS doesn't scale `SPI_GETCARETWIDTH` like it does with other metrics, and added a [fix](https://github.com/dotnet/wpf/pull/1949) to scale it appropriately before using it in WPF. \r\n- Sometimes, Context Menus fail to be displayed correctly, aren't displayed at all (https://github.com/dotnet/wpf/issues/2088); or seemingly lose their DataContext (https://github.com/dotnet/wpf/issues/2172). \r\n  - We found that a recent change inherited from .NET 4.8 had called into a helper method to destroy an HWND which also performed additional work and resulted in unexpected side-effects. It was [fixed](https://github.com/dotnet/wpf/pull/2097) by limiting the scope of the work done to destroy the HWND.\r\n- Applications that host native windows via `HwndHost` in a mixed-DPI context (i.e., the `HwndHost` hosted window is marked as `DPI_AWARENESS_CONTEXT_SYSTEMAWARE`, for e.g.), sometimes crash with `KeyNotFoundException` (https://github.com/dotnet/wpf/issues/2089)\r\n  - The full explanation of the root-cause and the fix can be found at https://github.com/dotnet/wpf/pull/2100. \r\n\r\n### SDK\r\n\r\n- We missed including a few important types like `ObservableCollection` in our reference-assemblies in the 3.0.100 SDK (https://github.com/dotnet/wpf/issues/1964). We appreciate the help of all the community members who brought this to our attention, and your patience with us while we worked on getting a fix out. \r\n  - @rladuca has since fixed this via https://github.com/dotnet/wpf/pull/2011 and the 3.0.101 SDK should have a complete set of API reference surface. \r\n- As part of porting WPF to .NET Core, we built an updated version of the markup compiler (which is contained in PresentationBuildTasks.dll). Although it is largely similar to the one that ships with .NET Framework, there are significant differences as well. This new version of PresentationBuildTasks.dll ships with the .NET Core SDK. In fact, there are copies of the DLL that we ship with the `Microsoft.NET.Sdk.WindowsDEsktop` SDK - `tools\\net472\\PresentationBuildTasks.dll` used by MSBuild and Visual Studio, and `tools\\netcoreapp2.1\\PresentationBuildTasks.dll` used by `dotnet` builds. @ryalanms found during internal testing that the SDK was not correctly using `tools\\net472\\PresentationBuildTasks.dll`, and was instead incorrectly utilizing the .NET Framework's copy of `PresentationBuildTasks.dll` (typically found under `%windir%\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\WPF`). https://github.com/dotnet/wpf/issues/1998\r\n  - @vatsan-madhavan fixed this via https://github.com/dotnet/wpf/issues/1998, and had much help from @rainersigwald, @nguerrera and @ryalanms . We learned that `UsingTask` in MSBuild is a 'first-one-wins' construct (https://github.com/MicrosoftDocs/visualstudio-docs/pull/4040). \r\n  - For those of you used to seeing `WinFX.targets` in your MSBuild logs, you'll start seeing a matching `WinFX.props` now! \r\n- WPF .NET Core application templates were missing `[ThemeInfoAttribute]` out of the box https://github.com/dotnet/wpf/issues/1699. \r\n  - This is now [fixed](https://github.com/dotnet/wpf/pull/2005) and will become available in the 3.1 SDK. \r\n- Sometimes, WPF projects fail to build correctly in Visual Studio, with the following error: `Error: ‘CS0103 - The name ‘InitializeComponent’ does not exist in the current context`. https://github.com/dotnet/wpf/issues/1915. \r\n  - @davidwengier contributed a fix for this (https://github.com/dotnet/wpf/pull/1895) and it will also be available in .NET Core 3.1 SDK. \r\n- .NET Core SDK is designed to reference WPF assemblies as a _set_. We either reference the 'WPF', 'WinForms' or the full profile depending on the values of *UseWpf* and *UseWindowsForms* properties in a `Microsoft.NET.WindowsDesktop.SDK` project. In any of these configurations, all WPF assemblies are referenced together, which includes WPF's *theme assemblies*:\r\n  - `PresentationFramework.Aero`\r\n  - `PresentationFramework.Aero2`\r\n  - `PresentationFramework.AeroLite`\r\n  - `PresentationFramework.Classic`\r\n  - `PresentationFramework.Luna`\r\n  - `PresentationFramework.Royale`\r\n  \r\n  These assemblies are unusual in one particular way - they contain the _same types_ in them (albeit with different theme resources). Referencing more than one of these assemblies would make it impractical to access the types within them programmatically - since the compiler would be unable to decide how to disambiguate between the referenced assemblies. \r\n  \r\n  See https://github.com/dotnet/wpf/issues/765\r\n  \r\n  We worked with the SDK team to evaluate different options, but  ultimately decided that directly solving this in the SDK was not within the scope of 3.0 or 3.1. We believe that the number of affected projects would be small, and they can leverage a workaround that we have proposed [here](https://github.com/dotnet/wpf/issues/765#issuecomment-555163388)\r\n  \r\n  We will continue to listen to customer feedback and revisit this in .NET 5 if we learn that our current recommendation is not meeting the needs of our customers. \r\n\r\n### Accessibility \r\n\r\n- When applying _High Contrast Black_ theme, button selection is not visible. (https://github.com/dotnet/wpf/issues/1458)\r\n  - @arpitmathur fixed this via https://github.com/dotnet/wpf/pull/2092. You can see the before vs. after difference. \r\n\r\n  - Before vs. After:\r\n    - ![](https://user-images.githubusercontent.com/5456126/65924723-e6ecda80-e3a2-11e9-860d-66c72212c0e0.png) \r\n    - ![](https://user-images.githubusercontent.com/5456126/65924964-c709e680-e3a3-11e9-8eab-fd1016e4c3b3.png)\r\n\r\n- Screen Reader read incorrect values for number of menu items, and calculate their positions incorrectly. This can result in incorrect announcements. https://github.com/dotnet/wpf/issues/1467\r\n  - This was also fixed by @arpitmathur in https://github.com/dotnet/wpf/pull/2090\r\n  \r\n### WPF Samples \r\n\r\n- We have archived the [.NET Framework branch](https://github.com/microsoft/WPF-Samples/tree/netframework) of the [WPF Samples](https://github.com/microsoft/WPF-Samples) repo, and have enabled the master branch to build on .NET Core 3.0 by default. \r\n- We have also now enabled PR builds on this repo, and worked through the backlog of PR's. \r\n- We [recently added](https://github.com/microsoft/WPF-Samples/pull/112) support for the *Samples Browser* at https://docs.microsoft.com/samples. \r\n  - Much thanks to _Dan Delimarschi_(@docs-product) for helping us through this process. \r\n  - Most of these samples can now be discovered from https://docs.microsoft.com/en-us/samples/browse/\r\n \r\n\r\nOver the next couple of months, the WPF team will be identifying a small set of samples that illustrate end-to-end applications, and improving them to showcase how Accessibility best-practices can be followed when building WPF apps. We hope to produce improved samples that would complement tools like [Accessiblity Insights for Windows](https://accessibilityinsights.io/docs/en/windows/overview) and our [developer guidelines](https://developer.microsoft.com/en-us/windows/accessible-apps). \r\n\r\n### Open Sourcing \r\n\r\nWe haven't forgotten about the open-sourcing of native binaries. \r\n\r\nThere has been much ongoing work to vet the sources for IP, security issues etc. - and make appropriate changes before they can be published on GitHub.  We have been working on it and we will share more in the next update. \r\n\r\n#### Happy Holidays\r\n\r\nLate November through early December is the start of holiday season in the US. Many of our colleagues start going on longer vacations around this time. We will be back with our next update in January when full attendance at work resumes. \r\n\r\n**_Happy New Year!_**\r\n\r\n_The WPF Team_ \r\n@dotnet/wpf-developers ","Url":"https://github.com/dotnet/wpf/issues/2273","RelatedDescription":"Open issue \"Happy Holidays (aka Dec Update for WPF on .NET Core )\" (#2273)"},{"Id":"530373844","IsPullRequest":false,"CreatedAt":"2019-12-03T20:01:58","Actor":"soeron","Number":"2261","RawContent":null,"Title":"DataGridCell.DataGridOwner accessibility","State":"closed","Body":"Currently the property [DataGridOwner](https://github.com/dotnet/wpf/blob/ae1790531c3b993b56eba8b1f0dd395a3ed7de75/src/Microsoft.DotNet.Wpf/src/PresentationFramework/System/Windows/Controls/DataGridCell.cs#L1034) is marked as internal, which is coming from full framework like this. But there are many situations where the cell may need access to its owning data grid. A simple example is the VerticalContentAlignment property of the datagrid which does nothing and is not respected in any way with the current templates in the .NET framework which is ported line by line for now. There are many other use cases where accessing the owning data grid is needed. Grid wide attached properties etc.\r\nOther elements of the datagrid like rows, columns have this property and it is still internal. Please make it public. I can't see a reason to leave it internal.","Url":"https://github.com/dotnet/wpf/issues/2261","RelatedDescription":"Closed issue \"DataGridCell.DataGridOwner accessibility\" (#2261)"},{"Id":"531978838","IsPullRequest":true,"CreatedAt":"2019-12-03T13:29:18","Actor":"dotnet-maestro[bot]","Number":"2272","RawContent":null,"Title":"[master] Update dependencies from dnceng/internal/dotnet-wpf-int","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:46a15fe4-6c2c-480d-9cdd-08d71053b252)\r\n## From https://dev.azure.com/dnceng/internal/_git/dotnet-wpf-int\r\n- **Build**: 20191202.20\r\n- **Date Produced**: 12/3/2019 1:20 AM\r\n- **Commit**: 391eb59c42bd7281f04bdf87f124649aa2368a27\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Wpf.DncEng** -> 5.0.0-alpha.1.19602.20\r\n\r\n[marker]: <> (End:46a15fe4-6c2c-480d-9cdd-08d71053b252)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/2272","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dnceng/internal/dotnet-wpf-int\" (#2272)"},{"Id":"531595384","IsPullRequest":true,"CreatedAt":"2019-12-02T23:01:18","Actor":"SamBent","Number":"2271","RawContent":null,"Title":"TreeView scroll hang","State":"open","Body":"Ask Mode Template:  \r\n\r\nDescription \r\n\r\nCertain scrolling operations cause TreeView to hang.  There are two causes:\r\n  1. Floating-point catastrophic cancellation while detecting an element’s position within the viewport\r\n  2. Inappropriate “offset replacement” when filling the “before” cache.   (Internal concepts, I’d need a whiteboard to explain fully.)\r\n\r\nCustomer Impact \r\n\r\nHang. \r\n\r\nRegression \r\n\r\nNo.   (Port of servicing fix for .NET 4.7 - 4.8)\r\n\r\nRisk \r\n\r\nLow \r\n\r\nFixes #1962\r\nWPF TreeView, virtualization, scroll, freeze ","Url":"https://github.com/dotnet/wpf/pull/2271","RelatedDescription":"Open PR \"TreeView scroll hang\" (#2271)"},{"Id":"531587559","IsPullRequest":true,"CreatedAt":"2019-12-02T22:44:36","Actor":"SamBent","Number":"2270","RawContent":null,"Title":"SharedSizeGroup loop","State":"open","Body":"Ask Mode Template:  \r\n\r\nDescription \r\n\r\nAfter every layout pass, a SharedSizeGroup re-evaluates its  shared size and updates the state of its constituent ColumnDefinitions.  The  goal is to mark the \"long-pole\" definitions (the largest ones in the group), and  to identify Grids that need to be remeasured.  The logic for this is flawed in  several ways;  both goals can fail in either direction (false positive or false  negative).   These flaws usually result in redundant layout work - the Grids get  measured twice, with the mistakes in the second pass cancelling those in in the  first - but correct layout results.  But in some cases they lead to an infinite  cycle of re-layout;  the app hangs.   In the customer's scenario this happens  when  \r\na. the Grids are within the scope of a ScrollViewer with  VerticalScrollbarVisibility=\"Auto\"  \r\nb. there are more than 157 Grids (the  threshold for coalescing pending measure tasks into one task at the root)   \r\nc. the minimum width of a non-long-pole Grid increases, away from the shared column\r\n\r\nCustomer Impact \r\n\r\nHang. \r\n\r\nRegression \r\n\r\nNo.   (Port of servicing fix for .NET 4.5.2 - 4.8)\r\n\r\nRisk \r\n\r\nLow \r\n\r\nFixes #2222\r\nHang during layout when using SharedSizeGroup","Url":"https://github.com/dotnet/wpf/pull/2270","RelatedDescription":"Open PR \"SharedSizeGroup loop\" (#2270)"},{"Id":"531506248","IsPullRequest":true,"CreatedAt":"2019-12-02T20:02:45","Actor":"SamBent","Number":"2269","RawContent":null,"Title":"Ribbon focus war","State":"open","Body":"Ask Mode Template:  \r\n\r\nDescription \r\n\r\nAn app that programmatically disables a RibbonMenuButton and replaces its  menu items with new ones can cause a focus war leading to infinite recursion and  StackOverflow.  This can happen if the user presses the toggle button (which  opens the menu dropdown) and drags the mouse over the dropdown, and the  programmatic disable/replace occurs before the user releases the mouse  button.\r\n\r\nCustomer Impact \r\n\r\nCrash. \r\n\r\nRegression \r\n\r\nNo.   (Port of servicing fix for .NET 4.7 - 4.8)\r\n\r\nRisk \r\n\r\nLow \r\n\r\nFixes #2220\r\nStackOverflow due to focus war in RibbonMenuButton","Url":"https://github.com/dotnet/wpf/pull/2269","RelatedDescription":"Open PR \"Ribbon focus war\" (#2269)"},{"Id":"529981218","IsPullRequest":false,"CreatedAt":"2019-12-02T16:52:13","Actor":"getandplay","Number":"2258","RawContent":null,"Title":".Net Core 3.0 WPF Resource doesn't work in project","State":"closed","Body":"* .NET Core Version: (e.g. 3.0 Preview1, or daily build number, use `dotnet --info`)\r\n  > **.Net Core 3.0  netcoreapp3.0**\r\n* Windows version: (`winver`)\r\n   > **win10**\r\n* Does the bug reproduce also in WPF for .NET Framework 4.8?: Yes/No\r\n  > **The bug can reproduce in WPF .Net Core but it works fine in .NET Framework 4.7**\r\n* Is this bug related specifically to tooling in Visual Studio (e.g. XAML Designer, Code editing, etc...)? If yes, please file the issue via the instructions [here](https://docs.microsoft.com/visualstudio/ide/how-to-report-a-problem-with-visual-studio?view=vs-2019).\r\n> No, I think it is .Net Core Bug\r\n \r\n **Problem description:**\r\n > In my solution there are three projects all base on .Net Core 3.0.\r\n    - WpfApp1(exe project)\r\n    - WpfLibrary1\r\n    - Wpf.app.test\r\n    And I add an image as **Resource** in Wps.app.test (I have set the image's build action to Resource), then in WpfLibrary1 I add a ResourceDictionary ,\r\n``` xml\r\n<ResourceDictionary xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"\r\n                    xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\">\r\n\r\n    <BitmapImage x:Key=\"Hello\" UriSource=\"pack://application:,,,/Wpf.app.test;component/calendar.png\"/>\r\n    \r\n</ResourceDictionary>\r\n```\r\nIn WpfApp1 I use this BitmapImage in my xaml\r\n```xml\r\n <Window.Resources>\r\n        <ResourceDictionary>\r\n            <ResourceDictionary.MergedDictionaries>\r\n                <ResourceDictionary Source=\"pack://application:,,,/WpfLibrary1;component/Test/Dictionary1.xaml\"/>\r\n            </ResourceDictionary.MergedDictionaries>\r\n        </ResourceDictionary>\r\n    </Window.Resources>\r\n    <Grid>\r\n        <!--It works Fine-->\r\n        <!--It will throw Exception, but .Net FrameWork works fine-->\r\n        <Image Width=\"200\" Height=\"200\" Source=\"{StaticResource Hello}\" HorizontalAlignment=\"Right\"/>\r\n    </Grid>\r\n```\r\nwhen I run WpfApp1 I got an error:\r\n![image](https://user-images.githubusercontent.com/3829760/69818350-2fb5e980-11c2-11ea-89f7-dc8a4e54ee0f.png)\r\nAnd we decompile the Wpf.app.test.dll found that there is no Image in the Dll. ( I have set image's build action to **Resource** )\r\nThe Wpf.app.test.project code\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp3.0</TargetFramework>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <None Remove=\"calendar.png\" />\r\n  </ItemGroup>\r\n\r\n  <ItemGroup>\r\n    <Resource Include=\"calendar.png\" />\r\n  </ItemGroup>\r\n\r\n</Project>\r\n```\r\nThe Decompile result:\r\n![image](https://user-images.githubusercontent.com/3829760/69818783-25481f80-11c3-11ea-9f8c-e7373edd2cc9.png)\r\n\r\n\r\n **Actual behavior:** <!-- callstack for crashes / exceptions -->\r\n > Throw an exception: System.Windows.Markup.XamlParseException: ''Initialization of 'System.Windows.Media.Imaging.BitmapImage' threw an exception.' Line number '4' and line position '32'.'\r\n>Inner Exception\r\n>IOException: Cannot locate resource 'calendar.png'.\r\n\r\n **Expected behaviour:**\r\n> No Error, No exception\r\n \r\n **Minimal repro:**\r\nHere is the demo for this bug\r\n[WpfApp1.zip](https://github.com/dotnet/wpf/files/3902314/WpfApp1.zip)\r\n","Url":"https://github.com/dotnet/wpf/issues/2258","RelatedDescription":"Closed issue \".Net Core 3.0 WPF Resource doesn't work in project\" (#2258)"},{"Id":"531123162","IsPullRequest":true,"CreatedAt":"2019-12-02T13:40:25","Actor":"dotnet-maestro[bot]","Number":"2268","RawContent":null,"Title":"[master] Update dependencies from dnceng/internal/dotnet-wpf-int","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:46a15fe4-6c2c-480d-9cdd-08d71053b252)\r\n## From https://dev.azure.com/dnceng/internal/_git/dotnet-wpf-int\r\n- **Build**: 20191201.9\r\n- **Date Produced**: 12/1/2019 11:58 PM\r\n- **Commit**: 5f6057269b70d3d4eaaea18816b555bcab729d50\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Wpf.DncEng** -> 5.0.0-alpha.1.19601.9\r\n\r\n[marker]: <> (End:46a15fe4-6c2c-480d-9cdd-08d71053b252)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/2268","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dnceng/internal/dotnet-wpf-int\" (#2268)"},{"Id":"530777435","IsPullRequest":false,"CreatedAt":"2019-12-01T18:56:41","Actor":"keelerjr12","Number":"2267","RawContent":null,"Title":"Clearing Bound ObservableCollection causes System.InvalidOperationException: 'Added item does not appear at given index '0'.'","State":"open","Body":"When calling ObservableCollection.Clear() and then re-loading (i.e. adding) items back into ObservableCollection, a System.InvalidOperationException:  'Added item does not appear at given index '0'.' gets thrown. I have provided a snippet of my code below. I have indicated where the issue is.\r\n\r\n```\r\n        private void TransactionCreated(object? sender, EventArgs e)\r\n        {\r\n            if (!(sender is TransactionRowViewModel row))\r\n                return;\r\n\r\n            if (row.Account == null)\r\n                    return;\r\n\r\n            var id = _transactionService.Create(row.Date, row.Account.Id, _accountId, row.Value, row.Description);\r\n            row.TransactionId = id;\r\n\r\n            //Transactions = new ObservableCollection<TransactionRowViewModel>();\r\n            Transactions.Clear();\r\n            LoadTransactions(); \r\n\r\n            // ISSUE: After TransactionCreated returns, exception is thrown!\r\n        }\r\n```\r\n\r\nAnd here is the stack trace:\r\n\r\n```\r\nUnhandled exception. System.InvalidOperationException: Added item does not appear at given index '0'.\r\n   at System.Windows.Data.ListCollectionView.AdjustBefore(NotifyCollectionChangedAction action, Object item, Int32 index)\r\n   at System.Windows.Data.ListCollectionView.CommitNew()\r\n   at System.Windows.Controls.ItemCollection.System.ComponentModel.IEditableCollectionView.CommitNew()\r\n   at System.Windows.Controls.DataGrid.CommitRowItem()\r\n   at System.Windows.Controls.DataGrid.OnExecutedCommitEdit(ExecutedRoutedEventArgs e)\r\n   at System.Windows.Controls.DataGrid.OnExecutedCommitEdit(Object sender, ExecutedRoutedEventArgs e)\r\n   at System.Windows.Input.CommandBinding.OnExecuted(Object sender, ExecutedRoutedEventArgs e)\r\n   at System.Windows.Input.CommandManager.FindCommandBinding(Object sender, RoutedEventArgs e, ICommand command, Boolean execute)\r\n   at System.Windows.Input.CommandManager.OnExecuted(Object sender, ExecutedRoutedEventArgs e)\r\n   at System.Windows.UIElement.OnExecutedThunk(Object sender, ExecutedRoutedEventArgs e)\r\n   at System.Windows.RoutedEventArgs.InvokeHandler(Delegate handler, Object target)\r\n   at System.Windows.EventRoute.InvokeHandlersImpl(Object source, RoutedEventArgs args, Boolean reRaised)\r\n   at System.Windows.UIElement.RaiseEventImpl(DependencyObject sender, RoutedEventArgs args)\r\n   at System.Windows.UIElement.RaiseEvent(RoutedEventArgs args, Boolean trusted)\r\n   at System.Windows.Input.RoutedCommand.ExecuteImpl(Object parameter, IInputElement target, Boolean userInitiated)\r\n   at System.Windows.Input.RoutedCommand.Execute(Object parameter, IInputElement target)\r\n   at System.Windows.Controls.DataGrid.EndEdit(RoutedCommand command, DataGridCell cellContainer, DataGridEditingUnit editingUnit, Boolean exitEditMode)\r\n   at System.Windows.Controls.DataGrid.CommitAnyEdit()\r\n   at System.Windows.Controls.DataGrid.OnEnterKeyDown(KeyEventArgs e)\r\n   at System.Windows.Controls.DataGrid.OnKeyDown(KeyEventArgs e)\r\n   at System.Windows.UIElement.OnKeyDownThunk(Object sender, KeyEventArgs e)\r\n   at System.Windows.RoutedEventArgs.InvokeHandler(Delegate handler, Object target)\r\n   at System.Windows.EventRoute.InvokeHandlersImpl(Object source, RoutedEventArgs args, Boolean reRaised)\r\n   at System.Windows.UIElement.RaiseEventImpl(DependencyObject sender, RoutedEventArgs args)\r\n   at System.Windows.UIElement.RaiseTrustedEvent(RoutedEventArgs args)\r\n   at System.Windows.Input.InputManager.ProcessStagingArea()\r\n   at System.Windows.Input.InputProviderSite.ReportInput(InputReport inputReport)\r\n   at System.Windows.Interop.HwndKeyboardInputProvider.ReportInput(IntPtr hwnd, InputMode mode, Int32 timestamp, RawKeyboardActions actions, Int32 scanCode, Boolean isExtendedKey, Boolean isSystemKey, Int32 virtualKey)\r\n   at System.Windows.Interop.HwndKeyboardInputProvider.ProcessKeyAction(MSG& msg, Boolean& handled)\r\n   at System.Windows.Interop.HwndSource.CriticalTranslateAccelerator(MSG& msg, ModifierKeys modifiers)\r\n   at System.Windows.Interop.HwndSource.OnPreprocessMessage(Object param)\r\n   at System.Windows.Threading.ExceptionWrapper.InternalRealCall(Delegate callback, Object args, Int32 numArgs)\r\n   at System.Windows.Threading.ExceptionWrapper.TryCatchWhen(Object source, Delegate callback, Object args, Int32 numArgs, Delegate catchHandler)\r\n   at System.Windows.Threading.Dispatcher.LegacyInvokeImpl(DispatcherPriority priority, TimeSpan timeout, Delegate method, Object args, Int32 numArgs)\r\n   at System.Windows.Interop.HwndSource.OnPreprocessMessageThunk(MSG& msg, Boolean& handled)\r\n   at System.Windows.Interop.ComponentDispatcherThread.RaiseThreadMessage(MSG& msg)\r\n   at System.Windows.Threading.Dispatcher.PushFrameImpl(DispatcherFrame frame)\r\n   at System.Windows.Threading.Dispatcher.PushFrame(DispatcherFrame frame)\r\n   at System.Windows.Threading.Dispatcher.Run()\r\n   at System.Windows.Application.RunDispatcher(Object ignore)\r\n   at System.Windows.Application.RunInternal(Window window)\r\n   at System.Windows.Application.Run()\r\n```","Url":"https://github.com/dotnet/wpf/issues/2267","RelatedDescription":"Open issue \"Clearing Bound ObservableCollection causes System.InvalidOperationException: 'Added item does not appear at given index '0'.'\" (#2267)"},{"Id":"530776700","IsPullRequest":true,"CreatedAt":"2019-12-01T18:52:43","Actor":"dotnet-maestro[bot]","Number":"2266","RawContent":null,"Title":"[release/3.1] Update dependencies from dotnet/winforms","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:fd5f4619-cca3-4e12-8f56-08d72a4ce301)\r\n## From https://github.com/dotnet/winforms\r\n- **Build**: 20191127.13\r\n- **Date Produced**: 11/28/2019 1:16 AM\r\n- **Commit**: 258bdd135d0e159a301545d53bc1c0ffb438d54c\r\n- **Branch**: refs/heads/release/3.1\r\n- **Updates**:\r\n  - **Microsoft.Private.Winforms** -> 4.8.1-servicing.19577.13\r\n\r\n[marker]: <> (End:fd5f4619-cca3-4e12-8f56-08d72a4ce301)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/2266","RelatedDescription":"Closed or merged PR \"[release/3.1] Update dependencies from dotnet/winforms\" (#2266)"},{"Id":"530776625","IsPullRequest":true,"CreatedAt":"2019-12-01T18:52:33","Actor":"dotnet-maestro[bot]","Number":"2265","RawContent":null,"Title":"[release/3.0] Update dependencies from dotnet/winforms","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:07c1f64b-2232-48be-3da4-08d6ba11e0be)\r\n## From https://github.com/dotnet/winforms\r\n- **Build**: 20191127.10\r\n- **Date Produced**: 12/1/2019 6:16 PM\r\n- **Commit**: 076a69fb42b53fca7cd245ecf7c779496a79f59e\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.Private.Winforms** -> 4.8.0-servicing.19577.10\r\n\r\n[marker]: <> (End:07c1f64b-2232-48be-3da4-08d6ba11e0be)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/2265","RelatedDescription":"Closed or merged PR \"[release/3.0] Update dependencies from dotnet/winforms\" (#2265)"},{"Id":"530730419","IsPullRequest":true,"CreatedAt":"2019-12-01T13:38:48","Actor":"dotnet-maestro[bot]","Number":"2264","RawContent":null,"Title":"[master] Update dependencies from dnceng/internal/dotnet-wpf-int","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:46a15fe4-6c2c-480d-9cdd-08d71053b252)\r\n## From https://dev.azure.com/dnceng/internal/_git/dotnet-wpf-int\r\n- **Build**: 20191130.4\r\n- **Date Produced**: 12/1/2019 12:45 AM\r\n- **Commit**: 4684574d2f9c317ea56158a5c0cac4620a9b1c8f\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Wpf.DncEng** -> 5.0.0-alpha.1.19580.4\r\n\r\n[marker]: <> (End:46a15fe4-6c2c-480d-9cdd-08d71053b252)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/2264","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dnceng/internal/dotnet-wpf-int\" (#2264)"},{"Id":"530578052","IsPullRequest":true,"CreatedAt":"2019-11-30T13:39:15","Actor":"dotnet-maestro[bot]","Number":"2263","RawContent":null,"Title":"[master] Update dependencies from dnceng/internal/dotnet-wpf-int","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:46a15fe4-6c2c-480d-9cdd-08d71053b252)\r\n## From https://dev.azure.com/dnceng/internal/_git/dotnet-wpf-int\r\n- **Build**: 20191129.4\r\n- **Date Produced**: 11/30/2019 12:39 AM\r\n- **Commit**: d24ce78d4c3b592af0426bb229f78a89671ac32f\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Wpf.DncEng** -> 5.0.0-alpha.1.19579.4\r\n\r\n[marker]: <> (End:46a15fe4-6c2c-480d-9cdd-08d71053b252)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/2263","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dnceng/internal/dotnet-wpf-int\" (#2263)"},{"Id":"530534848","IsPullRequest":false,"CreatedAt":"2019-11-30T05:23:24","Actor":"angtianqiang","Number":"2262","RawContent":null,"Title":"Very strange problem ClientContext data loss","State":"open","Body":"  I tested a very strange question\r\n\r\nI tested a very strange question\r\nRunning environment: WPF netcore3.0 csla5.0.1\r\nProblem description: set the ClientContext value in the WPF start window and read it as null, while it can be read normally in the non-wpf main window. This problem has not occurred before with WPF (net4.0)+csla4.7.2, can you help to see what is going on\r\n\r\nTest code:\r\n\r\n  public partial class MainWindow : Window\r\n    {\r\n        public MainWindow()\r\n        {\r\n            InitializeComponent();\r\n            Csla.ApplicationContext.ClientContext[\"a\"] = \"test\";\r\n        }\r\n\r\n        private void Button_Click(object sender, RoutedEventArgs e)\r\n        {\r\n            var aa = Csla.ApplicationContext.ClientContext[\"a\"];\r\n            //   aa = null;\r\n            //This is in the main window and reads null\r\n        }\r\n\r\n       \r\n    }\r\n\r\n\r\n\r\n public partial class Window1 : Window\r\n    {\r\n        public Window1()\r\n        {\r\n            InitializeComponent();\r\n            Csla.ApplicationContext.ClientContext[\"b\"] = \"test\";\r\n        }\r\n\r\n        private void Button_Click(object sender, RoutedEventArgs e)\r\n        {\r\n            var bb = Csla.ApplicationContext.ClientContext[\"b\"];\r\n            //  bb = test\"\r\n            //This is the non-wpf main window and can be read normally\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/wpf/issues/2262","RelatedDescription":"Open issue \"Very strange problem ClientContext data loss\" (#2262)"},{"Id":"530343152","IsPullRequest":true,"CreatedAt":"2019-11-29T13:39:19","Actor":"dotnet-maestro[bot]","Number":"2260","RawContent":null,"Title":"[master] Update dependencies from dnceng/internal/dotnet-wpf-int","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:46a15fe4-6c2c-480d-9cdd-08d71053b252)\r\n## From https://dev.azure.com/dnceng/internal/_git/dotnet-wpf-int\r\n- **Build**: 20191128.4\r\n- **Date Produced**: 11/28/2019 10:54 PM\r\n- **Commit**: 9f998e22f7867d1b5765c9539270b9f393d7f005\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Wpf.DncEng** -> 5.0.0-alpha.1.19578.4\r\n\r\n[marker]: <> (End:46a15fe4-6c2c-480d-9cdd-08d71053b252)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/2260","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dnceng/internal/dotnet-wpf-int\" (#2260)"},{"Id":"530068935","IsPullRequest":false,"CreatedAt":"2019-11-28T20:33:20","Actor":"vatsan-madhavan","Number":"2259","RawContent":null,"Title":"STATUS_ILLEGAL_INSTRUCTION exception in win-x86 wpfgfx_cor3.dll running on x64 Win Server 2012 R2","State":"open","Body":"Hi I have the same issue \r\n\r\nProblem signature:\r\n  Problem Event Name:\tAPPCRASH\r\n  Application Name:\tRocketM.exe\r\n  Application Version:\t2.0.0.0\r\n  Application Timestamp:\t5d7bb0cb\r\n  Fault Module Name:\twpfgfx_cor3.dll\r\n  Fault Module Version:\t4.800.19.46238\r\n  Fault Module Timestamp:\t5d7ab8ec\r\n  Exception Code:\tc000001d\r\n  Exception Offset:\t00158e19\r\n  OS Version:\t6.3.9600.2.0.0.272.7\r\n  Locale ID:\t5129\r\n  Additional Information 1:\t5861\r\n  Additional Information 2:\t5861822e1919d7c014bbb064c64908b2\r\n  Additional Information 3:\t6fbe\r\n  Additional Information 4:\t6fbe6bde2701766d81cbca0597a5fa35\r\n\r\nRead our privacy statement online:\r\n  http://go.microsoft.com/fwlink/?linkid=280262\r\n\r\nIf the online privacy statement is not available, please read our privacy statement offline:\r\n  C:\\Windows\\system32\\en-US\\erofflps.txt\r\n\r\nOS is \r\n\r\n![image](https://user-images.githubusercontent.com/4112014/69830042-9f41dc80-1287-11ea-8ca4-7b2be7c17e8d.png)\r\n\r\napp is x86\r\n\r\n_Originally posted by @thudugala in https://github.com/dotnet/wpf/issues/2057#issuecomment-559595015_","Url":"https://github.com/dotnet/wpf/issues/2259","RelatedDescription":"Open issue \"STATUS_ILLEGAL_INSTRUCTION exception in win-x86 wpfgfx_cor3.dll running on x64 Win Server 2012 R2\" (#2259)"},{"Id":"529908399","IsPullRequest":true,"CreatedAt":"2019-11-28T13:29:23","Actor":"dotnet-maestro[bot]","Number":"2257","RawContent":null,"Title":"[master] Update dependencies from dnceng/internal/dotnet-wpf-int","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:46a15fe4-6c2c-480d-9cdd-08d71053b252)\r\n## From https://dev.azure.com/dnceng/internal/_git/dotnet-wpf-int\r\n- **Build**: 20191127.16\r\n- **Date Produced**: 11/27/2019 11:14 PM\r\n- **Commit**: c2650e0f5c9279314309e44f4f42d7baf6323b99\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Wpf.DncEng** -> 5.0.0-alpha.1.19577.16\r\n\r\n[marker]: <> (End:46a15fe4-6c2c-480d-9cdd-08d71053b252)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/2257","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dnceng/internal/dotnet-wpf-int\" (#2257)"},{"Id":"529781187","IsPullRequest":false,"CreatedAt":"2019-11-28T09:08:48","Actor":"VBAndCs","Number":"2256","RawContent":null,"Title":"Support DataAnnotations and TagHelpers in WPF","State":"open","Body":"I suggest that you allow using the attributes defined in System.ComponentModel.DataAnnotations with any property in a wpf project, like ASP.NET does. For example:\r\n```C#\r\n[Required]\r\n[MinLength(2)]\r\n[MaxLength(12)]\r\npublic string FirstName { get; set; }\r\n ```\r\nASP.NET generates server side validation code for these attributes (beside the client side validation scripts), so, I think you can make WPF borrow the class that generates the server side code to achieve this. Note: There are some attributes used with tag helpers to affect the UI such as DisplayAttribute. I think XAML should also add the tag helpers concept too. I find it easier and shorter than the currently used data binding.\r\n","Url":"https://github.com/dotnet/wpf/issues/2256","RelatedDescription":"Open issue \"Support DataAnnotations and TagHelpers in WPF\" (#2256)"},{"Id":"529657891","IsPullRequest":false,"CreatedAt":"2019-11-28T02:25:48","Actor":"Kybs0","Number":"2255","RawContent":null,"Title":"After Modified screen dpi，Unloaded/Loaded is trigged unexpectedly","State":"open","Body":"When I modify the system dpi in screen setting, a userControl in window raises unload event, as more amazing unload event of window that contains the userControl is not triggered.\r\n\r\nAs all I known, loaded/unloaded can be triggered by these cases:\r\nFrameworkElement raises loaded/unloaded when it's added/removed to visual tree. \r\nTabControl selection change from tab A to tab B, raise A'UnLoaded and B'Loaded\r\nExpander、MenuItem and so on...All these cases, emmm.. seems like loaded/unloaded event raises just as element or it's parent leave from or add to wpf visual tree.\r\n\r\nBut, How Unloaded/Loaded can be raised by changing screen dpi ?\r\nFor testing, I create a window, then create and add a simple UserControl named A in window xaml, continue to create and add UserControl named B in A xaml. After window is showed in screen, modify screen dpi from 100% to 150%, UserControl A raise unloaded event, then UserControl B raise unloaded. As joking, window itself has no unloaded.\r\nunloaded event stack:\r\n![image](https://user-images.githubusercontent.com/21971433/69771912-65aa9c00-11c9-11ea-814a-1ac46f301e04.png)\r\nAs additional, before modify dpi setting, drag window and move near the taskbar, the issue occurs more probabily~\r\n![image](https://user-images.githubusercontent.com/21971433/69771084-7e658280-11c6-11ea-9b98-3ccb08e42356.png)\r\n\r\nMore details please see my blog https://www.cnblogs.com/kybs0/p/11943313.html\r\nExpecting you advise for this bug~\r\n","Url":"https://github.com/dotnet/wpf/issues/2255","RelatedDescription":"Open issue \"After Modified screen dpi，Unloaded/Loaded is trigged unexpectedly\" (#2255)"},{"Id":"529635809","IsPullRequest":true,"CreatedAt":"2019-11-28T01:30:59","Actor":"dotnet-maestro[bot]","Number":"2254","RawContent":null,"Title":"[release/3.0] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:e226e5ed-6125-48cb-94d5-08d690bc143a)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20191127.5\r\n- **Date Produced**: 11/27/2019 11:33 PM\r\n- **Commit**: 99c6b59a8afff97fe891341b39abe985f1d3c565\r\n- **Branch**: refs/heads/release/3.x\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19577.5\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19577.5\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19577.5\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19577.5\r\n  - **Microsoft.DotNet.Helix.Sdk** -> 2.0.0-beta.19577.5\r\n\r\n[marker]: <> (End:e226e5ed-6125-48cb-94d5-08d690bc143a)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/2254","RelatedDescription":"Closed or merged PR \"[release/3.0] Update dependencies from dotnet/arcade\" (#2254)"},{"Id":"529633523","IsPullRequest":true,"CreatedAt":"2019-11-28T01:01:30","Actor":"dotnet-maestro[bot]","Number":"2253","RawContent":null,"Title":"[release/3.1] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:f6560d32-4c6b-4ed3-5c71-08d72a4d3f20)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20191127.5\r\n- **Date Produced**: 11/27/2019 11:33 PM\r\n- **Commit**: 99c6b59a8afff97fe891341b39abe985f1d3c565\r\n- **Branch**: refs/heads/release/3.x\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19577.5\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19577.5\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19577.5\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19577.5\r\n  - **Microsoft.DotNet.Helix.Sdk** -> 2.0.0-beta.19577.5\r\n\r\n[marker]: <> (End:f6560d32-4c6b-4ed3-5c71-08d72a4d3f20)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/2253","RelatedDescription":"Closed or merged PR \"[release/3.1] Update dependencies from dotnet/arcade\" (#2253)"},{"Id":"529619918","IsPullRequest":true,"CreatedAt":"2019-11-27T23:43:23","Actor":"vatsan-madhavan","Number":"2252","RawContent":null,"Title":"Improve `HWND` validity testing in `HwndHost` ","State":"open","Body":"Fixes #2239 \r\n\r\n`s/_hwnd.Handle/Handle` in a few places, notably in in a check in `BuildOrReparentWindow`\r\n\r\n--\r\n\r\nThe key change is in `BuildOrReparentWindow `where an additional check for  `IsWindow()` is desirable; without this check, non-`NULL` yet invalid `HWND`'s are able to make their way into the \"reparent under a `SystemResources` managed message-only `HWND`\" logic, which in turn tries to query other characteristics of the (invalid) `HWND`. \r\n\r\nOne of these steps eventually fails, and WPF decides that the failure is sufficiently bad and crashes (this happens in `MS.Internal.DpiUtil.HwndDpiInfo.NearestMonitorInfoFromWindow(IntPtr hwnd)`).\r\n\r\nAlso changing `_hwnd.Handle` to `Handle` in a few other places where additional check for `HWND` validity seems valuable.\r\n\r\n/cc @teh173 \r\n\r\n[NearestMonitorDpiCrash.zip](https://github.com/dotnet/wpf/files/3899149/NearestMonitorDpiCrash.zip)","Url":"https://github.com/dotnet/wpf/pull/2252","RelatedDescription":"Open PR \"Improve `HWND` validity testing in `HwndHost` \" (#2252)"},{"Id":"529518554","IsPullRequest":true,"CreatedAt":"2019-11-27T18:49:09","Actor":"mmitche","Number":"2251","RawContent":null,"Title":"Add internal ci triggers and clean  up trigger list","State":"closed","Body":"","Url":"https://github.com/dotnet/wpf/pull/2251","RelatedDescription":"Closed or merged PR \"Add internal ci triggers and clean  up trigger list\" (#2251)"},{"Id":"529511645","IsPullRequest":true,"CreatedAt":"2019-11-27T18:40:25","Actor":"dotnet-maestro[bot]","Number":"2250","RawContent":null,"Title":"[release/3.0] Update dependencies from dotnet/winforms","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:07c1f64b-2232-48be-3da4-08d6ba11e0be)\r\n## From https://github.com/dotnet/winforms\r\n- **Build**: 20191127.5\r\n- **Date Produced**: 11/27/2019 6:09 PM\r\n- **Commit**: ace27af05350ce947fee65a54d24b0007ce2c8a2\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.Private.Winforms** -> 4.8.0-servicing.19577.5\r\n\r\n[marker]: <> (End:07c1f64b-2232-48be-3da4-08d6ba11e0be)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/2250","RelatedDescription":"Closed or merged PR \"[release/3.0] Update dependencies from dotnet/winforms\" (#2250)"},{"Id":"529492946","IsPullRequest":true,"CreatedAt":"2019-11-27T18:20:44","Actor":"dotnet-maestro[bot]","Number":"2248","RawContent":null,"Title":"[release/3.1] Update dependencies from dotnet/winforms","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:fd5f4619-cca3-4e12-8f56-08d72a4ce301)\r\n## From https://github.com/dotnet/winforms\r\n- **Build**: 20191127.4\r\n- **Date Produced**: 11/27/2019 5:31 PM\r\n- **Commit**: ec7144e9e1b54a651fda52339298873607d4baca\r\n- **Branch**: refs/heads/release/3.1\r\n- **Updates**:\r\n  - **Microsoft.Private.Winforms** -> 4.8.1-servicing.19577.4\r\n\r\n[marker]: <> (End:fd5f4619-cca3-4e12-8f56-08d72a4ce301)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/2248","RelatedDescription":"Closed or merged PR \"[release/3.1] Update dependencies from dotnet/winforms\" (#2248)"},{"Id":"529496349","IsPullRequest":false,"CreatedAt":"2019-11-27T17:53:29","Actor":"nsivov","Number":"2249","RawContent":null,"Title":"[DirectWriteForwarder] Unmanaged object leak","State":"open","Body":"There seems to be a leak of a file loader object here:\r\n \r\nhttps://github.com/dotnet/wpf/blob/3fd5b221be5bf8f83e46e19a858c365e03b3dd3f/src/Microsoft.DotNet.Wpf/src/DirectWriteForwarder/CPP/DWriteWrapper/FontFile.cpp#L75-L81\r\n'fontFileLoader' is never released.\r\n\r\n[edit/@vatsan-madhavan]: replacing quoted inline code with link to code. ","Url":"https://github.com/dotnet/wpf/issues/2249","RelatedDescription":"Open issue \"[DirectWriteForwarder] Unmanaged object leak\" (#2249)"}],"ResultType":"GitHubIssue"}},"RunOn":"2019-12-05T05:30:58.3724333Z","RunDurationInMilliseconds":598}