{"Data":{"Blog":{"FeedItems":[{"Title":"Tell us your thoughts on ML.NET, an open source and cross-platform machine learning framework","PublishedOn":"2019-01-09T17:31:15+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"ML.NET is an open source and cross-platform machine learning framework made for .NET developers. .NET developers can use their C# or F# skills to easily integrate custom machine learning into their...","Href":"https://blogs.msdn.microsoft.com/dotnet/2019/01/09/tell-us-your-thoughts-on-ml-net/","RawContent":null},{"Title":".NET Core January 2019 Updates – 2.1.7 and 2.2.1","PublishedOn":"2019-01-09T02:07:05+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Today, we are releasing the .NET Core January 2019 Update. These updates contain security and reliability fixes. .NET Core 2.1.7 and .NET Core SDK 2.1.503 ( Download &#124; Release Notes ) .NET Core...","Href":"https://blogs.msdn.microsoft.com/dotnet/2019/01/08/net-core-january-2019-update/","RawContent":null},{"Title":".NET Framework January 2019 Security and Quality Rollup","PublishedOn":"2019-01-08T18:59:07+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, we are releasing the January 2019 Security and Quality Rollup. Security CVE-2019-0545 – Windows Security Feature Bypass Vulnerability This security update resolves a vulnerability in Microsoft...","Href":"https://blogs.msdn.microsoft.com/dotnet/2019/01/08/net-framework-january-2019-security-and-quality-rollup/","RawContent":null},{"Title":"Announcing .NET Framework 4.8 Early Access Build 3707","PublishedOn":"2018-12-15T02:11:55+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"We have another early access build to share today! This release includes several accessibility, performance, reliability and stability fixes across the major framework libraries. We will continue to...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/12/14/announcing-net-framework-4-8-early-access-build-3707/","RawContent":null},{"Title":"Visual Studio 2019 Preview .NET Productivity","PublishedOn":"2018-12-14T00:13:41+00:00","CommentsCount":18,"FacebookCount":0,"Summary":"As you hopefully heard, the first preview of Visual Studio 2019 is now available. In this post I’ll cover some of the productivity improvements for .NET developers we’re most excited about. For a...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/12/13/visual-studio-2019-net-productivity/","RawContent":null},{"Title":".NET Framework December 2018 Security and Quality Rollup","PublishedOn":"2018-12-11T18:23:48+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"Today, we are releasing the December 2018 Security and Quality Rollup. Security CVE-2018-8540 – Windows Remote Code Execution Vulnerability This security update resolves a vulnerability in Microsoft...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/12/11/net-framework-december-2018-security-and-quality-rollup/","RawContent":null},{"Title":"Open Sourcing XAML Behaviors for WPF","PublishedOn":"2018-12-10T19:27:32+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"Today, we are excited to announce that we are open sourcing XAML Behaviors for WPF. In the past, we open sourced XAML Behaviors for UWP which has been a great success and the Behaviors NuGet package...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/12/10/open-sourcing-xaml-behaviors-for-wpf/","RawContent":null},{"Title":"Take C# 8.0 for a spin","PublishedOn":"2018-12-05T23:51:33+00:00","CommentsCount":99,"FacebookCount":0,"Summary":"Take C# 8.0 for a spin Yesterday we announced the first preview of both Visual Studio 2019 (Making every developer more productive with Visual Studio 2019) and .NET Core 3.0 (Announcing .NET Core 3...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/12/05/take-c-8-0-for-a-spin/","RawContent":null},{"Title":".NET Framework December 5, 2018 Preview of Cumulative Update for Windows 10 version 1809 and Windows Server 2019","PublishedOn":"2018-12-05T22:00:42+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"Today, we are releasing the December 5, 2018 Preview of .NET Framework Cumulative Update for Windows 10 version 1809 and Windows Server 2019. For more information about the new Cumulative Updates for...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/12/05/net-framework-december-4-2018-preview-of-cumulative-update-for-windows-10-version-1809-and-windows-server-2019/","RawContent":null},{"Title":"Announcing .NET Core 3 Preview 1 and Open Sourcing Windows Desktop Frameworks","PublishedOn":"2018-12-04T16:41:34+00:00","CommentsCount":82,"FacebookCount":0,"Summary":"Today, we are announcing .NET Core 3 Preview 1. It is the first public release of .NET Core 3. We have some exciting new features to share and would love your feedback. You can develop .NET Core 3...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/12/04/announcing-net-core-3-preview-1-and-open-sourcing-windows-desktop-frameworks/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"8860916656","Type":"PullRequestEvent","CreatedAt":"2019-01-09T22:28:14","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/128","RelatedDescription":"Merged pull request \"Update of EF description\" (#128) at dotnet/foundation","RelatedBody":"@divega !"},{"Id":"8837337598","Type":"PullRequestEvent","CreatedAt":"2019-01-05T03:23:40","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/129","RelatedDescription":"Merged pull request \"Update to absolute path\" (#129) at dotnet/foundation","RelatedBody":"Update to absolute path so that when this list is copied the link will actually work"},{"Id":"8833785661","Type":"PullRequestEvent","CreatedAt":"2019-01-04T11:57:11","Actor":"MarcBruins","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/129","RelatedDescription":"Opened pull request \"Update to absolute path\" (#129) at dotnet/foundation","RelatedBody":"Update to absolute path so that when this list is copied the link will actually work"},{"Id":"8833210040","Type":"PullRequestEvent","CreatedAt":"2019-01-04T09:40:51","Actor":"ErikEJ","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/128","RelatedDescription":"Opened pull request \"Update of EF description\" (#128) at dotnet/foundation","RelatedBody":"@divega !"},{"Id":"8831721539","Type":"PullRequestEvent","CreatedAt":"2019-01-04T00:22:43","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/127","RelatedDescription":"Merged pull request \"Update documentation information\" (#127) at dotnet/foundation","RelatedBody":""},{"Id":"8830688181","Type":"PullRequestEvent","CreatedAt":"2019-01-03T20:00:04","Actor":"carloscds","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/127","RelatedDescription":"Opened pull request \"Update documentation information\" (#127) at dotnet/foundation","RelatedBody":""},{"Id":"8826767123","Type":"PullRequestEvent","CreatedAt":"2019-01-03T04:47:09","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/122","RelatedDescription":"Merged pull request \"targets the existing document\" (#122) at dotnet/foundation","RelatedBody":""},{"Id":"8826765854","Type":"PullRequestEvent","CreatedAt":"2019-01-03T04:46:31","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/121","RelatedDescription":"Merged pull request \"Add Newtonsoft.Json\" (#121) at dotnet/foundation","RelatedBody":"// @jongalloway "}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"8852414845","Type":"IssuesEvent","CreatedAt":"2019-01-08T18:17:46","Actor":"leecow","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/96","RelatedDescription":"Opened issue \"January 2019 .NET Updates\" (#96) at dotnet/announcements","RelatedBody":"# January 2019 .NET Updates\r\n\r\nThe following .NET updates were released in January 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Core\r\n\r\n* .NET Core 2.1.7 and .NET Core SDK 2.1.503 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.7.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.1) )\r\n\r\n* .NET Core 2.2.1 and .NET Core SDK 2.2.102 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.1.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.2) )\r\n\r\nA discussion issue is available at [core/2210](https://github.com/dotnet/core/issues/2210)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)"},{"Id":"8852318390","Type":"IssuesEvent","CreatedAt":"2019-01-08T18:00:28","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/95","RelatedDescription":"Opened issue \" Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability\" (#95) at dotnet/announcements","RelatedBody":"# Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a tampering vulnerability exists when .NET Core improperly handles specially crafted files. An attacker who successfully exploited this vulnerability could write arbitrary files and directories to certain locations on a vulnerable system. However, an attacker would have limited control over the destination of the files and directories.\r\n\r\nTo exploit the vulnerability, an attacker must send a specially crafted file to a vulnerable system\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core handles these files.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/ **TBD**\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nIf your application does not extract ZIP compressed files it is unaffected.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the [System.IO.Compression.ZipFile](https://www.nuget.org/packages/System.IO.Compression.ZipFile/) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.IO.Compression.ZipFile | 4.0.0, 4.0.1, 4.3.0 | 4.3.1\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n`System.IO.Compression.ZipFile` is distributed as part of the .NET Core 2.1 runtime. To check the currently installed runtimes, open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed, you'll see output like the following;\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your host version is 2.1.x and the highest `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\nIf your host version is 2.2.x and the highest 2.1.x `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\n\r\nYou will not see SDK versions if you have only installed the runtime.\r\n\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nIf your host version is a 2.1.x host you must install version 2.1.7 or later of the [.NET Core 2.1 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.1), or corresponding [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\nIf your host version is a 2.2.x you must install version 2.2.1 or later of the [.NET Core 2.2 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.2), or corresponding  [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\nFinally, you must restart your applications once an updated runtime or SDK is installed.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgments\r\n\r\n[Danny Grander](https://twitter.com/grander) of [Snyk](https://snyk.io/)\r\n\r\n### External Links\r\n\r\n[CVE-2018-8416](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-8416)\r\n\r\n### Revisions\r\n\r\nV1.0 (January 8, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-01-08_\r\n\r\n"},{"Id":"8852317992","Type":"IssuesEvent","CreatedAt":"2019-01-08T18:00:24","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/94","RelatedDescription":"Opened issue \"Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability\" (#94) at dotnet/announcements","RelatedBody":"# Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of an information disclosure vulnerability exists in .NET Framework and .NET Core which allows bypassing Cross-origin Resource Sharing (CORS) configurations. An attacker who successfully exploited the vulnerability could retrieve content, that is normally restricted, from a web application.\r\n\r\nThe security update addresses the vulnerability by enforcing CORS configuration to prevent its bypass.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/ **TBD**\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nMicrosoft has not identified any mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the [System.Net.Http](https://www.nuget.org/packages/System.Net.Http/) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.Net.Http | 4.3.0, 4.3.1, 4.3.2, 4.3.3, 4.3.4 | 4.3.5\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n#### Applications that use Microsoft.NetCore.App\r\n\r\n`System.Net.Http` is distributed as part of the .NET Core 2.1 runtime. To check the currently installed runtimes, open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed, you'll see output like the following;\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your host version is 2.1.x and the highest `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\nIf your host version is 2.2.x and the highest 2.1.x `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\n\r\nYou will not see SDK versions if you have only installed the runtime.\r\n\r\n#### Applications not using Microsoft.NetCore.App\r\n\r\nThe affected assembly is also available separately as a NuGet package. If you are not using Microsoft.NetCore.App, you may still be affected if you are referencing the packages listed above.\r\n\r\n##### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file. They can be fixed by [editing the project file](#fixing-direct-dependencies) or using NuGet to update the dependency.\r\n\r\n##### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects\r\n\r\nThe `project.assets.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json)).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `SSystem.Net.Http/4.3.0` is a reference to version 4.3.0 of `System.Net.Http`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\n#### Updating the version of Microsoft.NETCore.App\r\n\r\nIf your host version is a 2.1.x host you must install version 2.1.7 or later of the [.NET Core 2.1 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.1), or corresponding [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\nIf your host version is a 2.2.x you must install version 2.2.1 or later of the [.NET Core 2.2 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.2), or corresponding  [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\n#### <a name=\"fixing-direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.Net.Http` version 4.3.0\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.IO.Pipelines` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.5\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"transitive-dependencies\"></a>Fixing transitive dependencies\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.5\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n##### Rebuilding your application\r\n\r\nFinally, you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2019-0545](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0545)\r\n\r\n### Revisions\r\n\r\nV1.0 (January 8, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-01-08_\r\n"},{"Id":"8752496804","Type":"IssuesEvent","CreatedAt":"2018-12-14T03:22:59","Actor":"1015450578","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/93","RelatedDescription":"Closed issue \"Docker image with tag '2.2-aspnetcore-runtime' is not compatible\" (#93) at dotnet/announcements","RelatedBody":"1. Install  .NET Core 2.2.100 sdk\r\n2. Create a new 'AspNetCore Web Api' by using Visual Studio 2017,and enbale docker support.\r\n3. F5 ,the Output Windows shows:\r\n>It was not possible to find any compatible framework version\r\n>The specified framework 'Microsoft.AspNetCore.App', version '2.2.0' was not found.\r\n>  - Check application dependencies and target a framework version installed at:\r\n>      /usr/share/dotnet/\r\n>  - Installing .NET Core prerequisites might help resolve this problem:\r\n>     http://go.microsoft.com/fwlink/?LinkID=798306&clcid=0x409\r\n>  - The .NET Core framework and SDK can be installed from:\r\n>      https://aka.ms/dotnet-download\r\n>  - The following versions are installed:\r\n>      2.2.0-preview3-35497 at [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]"},{"Id":"8752467326","Type":"IssuesEvent","CreatedAt":"2018-12-14T03:12:36","Actor":"1015450578","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/93","RelatedDescription":"Opened issue \"Docker image with tag '2.2-aspnetcore-runtime' is not compatible\" (#93) at dotnet/announcements","RelatedBody":"1. Install  .NET Core 2.2.100 sdk\r\n2. Create a new 'AspNetCore Web Api' by using Visual Studio 2017,and enbale docker support.\r\n3. F5 ,the Output Windows shows:\r\n>It was not possible to find any compatible framework version\r\n>The specified framework 'Microsoft.AspNetCore.App', version '2.2.0' was not found.\r\n>  - Check application dependencies and target a framework version installed at:\r\n>      /usr/share/dotnet/\r\n>  - Installing .NET Core prerequisites might help resolve this problem:\r\n>     http://go.microsoft.com/fwlink/?LinkID=798306&clcid=0x409\r\n>  - The .NET Core framework and SDK can be installed from:\r\n>      https://aka.ms/dotnet-download\r\n>  - The following versions are installed:\r\n>      2.2.0-preview3-35497 at [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]"},{"Id":"8741036679","Type":"IssuesEvent","CreatedAt":"2018-12-12T12:56:54","Actor":"bilalMlaik","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/92","RelatedDescription":"Closed issue \".net core Console\" (#92) at dotnet/announcements","RelatedBody":"I am running dot net core console app as web jobs and it is working perfectly in docker with docker compose. Now the issue is I want to pass a value to the application via Console.ReadLine() over this value i make some decision but i am unable to pass value via Console.ReadLine(). How i can do it please help me. For more understanding, i have added my docker compose file below\r\n`version: '3.4'\r\n\r\nservices:\r\n  \r\n  tt.core.web:\r\n    image: ${DOCKER_REGISTRY-}ttcoreweb\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.Web/Dockerfile\r\n    depends_on:\r\n     - db\r\n    networks:\r\n     - app-network\r\n\r\n  tt.core.downtime.webjob:\r\n    image: ${DOCKER_REGISTRY-}ttcoredowntimewebjob\r\n    environment:\r\n      CORE_ENVIRONMENT: devdocker\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.Downtime.Webjob/Dockerfile\r\n    depends_on:\r\n     - db\r\n     - tt.core.web\r\n    networks:\r\n     - app-network\r\n\r\n  db:\r\n    image: microsoft/mssql-server-linux\r\n    container_name: db\r\n    environment:\r\n      SA_PASSWORD: \"Thingtrax%1\"\r\n      ACCEPT_EULA: \"Y\"\r\n      MSSQL_PID: Express\r\n    ports:\r\n      - \"7002:1433\"\r\n    networks:\r\n      app-network:\r\n        ipv4_address: 172.24.0.2\r\n\r\nnetworks:\r\n  app-network:\r\n    ipam:\r\n      driver: default\r\n      config:\r\n        - subnet: 172.24.0.0/16\r\n\r\n`\r\nIf the detail is not enough or you do not get my point, you can share your confusion in comment"},{"Id":"8740711774","Type":"IssuesEvent","CreatedAt":"2018-12-12T11:57:02","Actor":"bilalMlaik","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/92","RelatedDescription":"Opened issue \".net core Console\" (#92) at dotnet/announcements","RelatedBody":"This repo doesn't accept issues. Please see README.md in the root for more details.\r\nI am running dot net core console app as web jobs and it is working perfectly in docker with docker compose. Now the issue is I want to pass a value to the application via Console.ReadLine() over this value i make some decision but i am unable to pass value via Console.ReadLine(). How i can do it please help me. For more understanding, i have added my docker compose file below\r\n`version: '3.4'\r\n\r\nservices:\r\n  \r\n  tt.core.web:\r\n    image: ${DOCKER_REGISTRY-}ttcoreweb\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.Web/Dockerfile\r\n    depends_on:\r\n     - db\r\n     - redis\r\n    networks:\r\n     - app-network\r\n\r\n  tt.core.downtime.webjob:\r\n    image: ${DOCKER_REGISTRY-}ttcoredowntimewebjob\r\n    environment:\r\n      CORE_ENVIRONMENT: devdocker\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.Downtime.Webjob/Dockerfile\r\n    depends_on:\r\n     - db\r\n     - tt.core.web\r\n     - redis\r\n    networks:\r\n     - app-network\r\n\r\n  tt.core.iothub.simulator:\r\n    image: ${DOCKER_REGISTRY-}ttcoreiothubsimulator\r\n    environment:\r\n      CORE_ENVIRONMENT: devdocker\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.IotHub.Simulator/Dockerfile\r\n    depends_on:\r\n     - db\r\n     - tt.core.web\r\n     - mqtt\r\n    networks:\r\n     - app-network\r\n\r\n  tt.core.labourtelemetry.webjob:\r\n    image: ${DOCKER_REGISTRY-}ttcorelabourtelemetrywebjob\r\n    environment:\r\n      CORE_ENVIRONMENT: devdocker\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.LabourTelemetry.WebJob/Dockerfile\r\n    depends_on:\r\n     - db\r\n     - tt.core.web\r\n     - redis\r\n    networks:\r\n     - app-network\r\n\r\n  tt.core.telemetry.webjob:\r\n    image: ${DOCKER_REGISTRY-}ttcoretelemetrywebjob\r\n    environment:\r\n      CORE_ENVIRONMENT: devdocker\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.Telemetry.WebJob/Dockerfile\r\n    depends_on:\r\n     - db\r\n     - tt.core.web\r\n     - mqtt\r\n     - redis\r\n    networks:\r\n     - app-network\r\n\r\n  redis:\r\n    image: redis\r\n    command: redis-server --appendonly yes\r\n    ports:\r\n      - '6379:6379'\r\n    volumes:\r\n      - ${APPDATA}/redis:/bitnami/redis/data\r\n    networks:\r\n      app-network:\r\n        ipv4_address: 172.24.0.16\r\n\r\n  mqtt:\r\n    image: eclipse-mosquitto\r\n    hostname: mqtt\r\n    container_name: mqtt\r\n    expose:\r\n      - \"1883\"\r\n      - \"9001\"\r\n    ports:\r\n      - \"1883:1883\"\r\n      - \"9001:9001\"\r\n    volumes:\r\n      - ${APPDATA}/mosquitto/mosquitto.conf:/mosquitto/config/mosquitto.conf\r\n    networks:\r\n      app-network:\r\n        ipv4_address: 172.24.0.8\r\n\r\n  db:\r\n    image: microsoft/mssql-server-linux\r\n    container_name: db\r\n    environment:\r\n      SA_PASSWORD: \"Thingtrax%1\"\r\n      ACCEPT_EULA: \"Y\"\r\n      MSSQL_PID: Express\r\n    ports:\r\n      - \"7002:1433\"\r\n    networks:\r\n      app-network:\r\n        ipv4_address: 172.24.0.2\r\n\r\nnetworks:\r\n  app-network:\r\n    ipam:\r\n      driver: default\r\n      config:\r\n        - subnet: 172.24.0.0/16\r\n\r\n`\r\n"}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"8862323542","Type":"PullRequestEvent","CreatedAt":"2019-01-10T05:21:45","Actor":"cshung","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/21925","RelatedDescription":"Opened pull request \"For non-versionable code, we do not need to check the code version manager\" (#21925) at dotnet/coreclr","RelatedBody":""},{"Id":"8861891531","Type":"PullRequestEvent","CreatedAt":"2019-01-10T02:55:01","Actor":"am11","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/21924","RelatedDescription":"Opened pull request \"Set visibility option to hidden\" (#21924) at dotnet/coreclr","RelatedBody":"Defined and used `DllExport` macro instead of `PUB` (aligned with the name used in CoreFX).\r\n\r\nWhile testing in different operating systems, I found that it is possible to have just `py` executable available in PATH via default installation without `python`, so I have added it in probing paths inside cmake and sh files as well.\r\n\r\nCloses #2484"},{"Id":"8861735307","Type":"PullRequestEvent","CreatedAt":"2019-01-10T02:07:09","Actor":"AndyAyersMS","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/21893","RelatedDescription":"Merged pull request \"JIT: modify inline budget update to use estimated imported IL size\" (#21893) at dotnet/coreclr","RelatedBody":"The inliner keeps a time budget to try and avoid pathological runaway inline\r\nbehavior (see #4375). The jit estimates the time impact of an inline using a\r\nsimple projection based on IL size. If an prospective inline would put the jit\r\nover the time budget, the inline is blocked -- and note even aggressive inlines\r\ncan be blocked this way.\r\n\r\nWe now have a fair number of aggressive inline methods like\r\n`Vector256<T>.IsSupported` where the IL is optimized early on by the jit and the\r\nactual impact on the calling method is much less than the initial IL size would\r\nsuggest. For instance `IsSupported` is 286 bytes of IL, but the net contribution\r\nof this method at jit time is either a constant 0 or 1, and so the effective size\r\nis more like 2 bytes of IL.\r\n\r\nThis set of changes updates the jit to estimate the imported IL size of a method\r\nwhen updating the budget.\r\n\r\nCloses #21794."},{"Id":"8861735298","Type":"IssuesEvent","CreatedAt":"2019-01-10T02:07:09","Actor":"AndyAyersMS","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/21794","RelatedDescription":"Closed issue \"Vector128/256<T>: Too many calls to \"ThrowIfUnsupportedType\" prevents inlining\" (#21794) at dotnet/coreclr","RelatedBody":"I am trying to optimize certain generic helpers of `Vector128/256<T>` by HW intrinsic and other helpers, which relies on inlining to get the optimal codegen. However, sometimes these helpers cannot get inlined due to \"inline exceeds budget\" because too many `ThrowIfUnsupportedType` need to be eliminated by inlining. This issue may give users unexpected codegen when they heavily use generic `Vector128/256<T>` helpers (e.g., `Count`, `GetLower`, etc.)\r\nhttps://github.com/dotnet/coreclr/blob/10c3e60c863d01f638daa240af957c3c5791cda5/src/System.Private.CoreLib/shared/System/Runtime/Intrinsics/Vector256_1.cs#L342-L347\r\nhttps://github.com/dotnet/coreclr/blob/10c3e60c863d01f638daa240af957c3c5791cda5/src/System.Private.CoreLib/shared/System/Runtime/Intrinsics/Vector256_1.cs#L78-L103\r\n\r\nWe need to find an approach to reduce the number of `ThrowIfUnsupportedType` call-site.\r\n\r\n@CarolEidt @tannergooding @eerhardt @AndyAyersMS "},{"Id":"8861725100","Type":"PullRequestEvent","CreatedAt":"2019-01-10T02:03:59","Actor":"stephentoub","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/21919","RelatedDescription":"Merged pull request \"[automated] Merge branch 'release/2.1' => 'release/2.2'\" (#21919) at dotnet/coreclr","RelatedBody":"I detected changes in the release/2.1 branch which have not been merged yet to release/2.2. I'm a robot and am configured to help you automatically keep release/2.2 up to date, so I've opened this PR.\r\n\r\nThis PR merges commits made on release/2.1 by the following committers:\n\n* @RussKeldorph\r\n\r\n## Instructions for merging\r\n\r\nThis repo does not appear to allow merge commits from the GitHub UI, so you will need to update this PR with a merge commit before closing this PR.\r\n\r\n``` sh\r\ngit fetch\r\ngit checkout release/2.1\r\ngit pull --ff-only\r\ngit checkout release/2.2\r\ngit pull --ff-only\r\ngit merge --no-ff release/2.1\r\n# If there are merge conflicts, resolve them and then run git merge --continue to complete the merge\r\ngit push https://github.com/dotnet-maestro-bot/coreclr HEAD:merge/release/2.1-to-release/2.2\r\n```\r\n\r\n<details>\r\n<summary>or if you are using SSH</summary>\r\n\r\n```\r\ngit push git@github.com:dotnet-maestro-bot/coreclr HEAD:merge/release/2.1-to-release/2.2\r\n```\r\n\r\n</details>\r\n\r\n\r\nAfter PR checks are complete push the branch\r\n```\r\ngit push\r\n```\r\n\r\nPlease contact .NET Core Engineering if you have questions or issues.\r\nAlso, if this PR was generated incorrectly, help us fix it. See https://github.com/dotnet/arcade/blob/master/scripts/GitHubMergeBranches.ps1.\r\n"},{"Id":"8861689033","Type":"IssuesEvent","CreatedAt":"2019-01-10T01:53:14","Actor":"BruceForstall","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/21665","RelatedDescription":"Closed issue \"Build failed with error MSB3073: The command exited with code -1073741819\" (#21665) at dotnet/coreclr","RelatedBody":"**Job:**\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/view/x64_arm64_altjit/job/jitstress/job/x64_arm64_altjit_checked_windows_nt_jitstress2_jitstressregs3/386/\r\n**Failed log:**\r\n```\r\nD:\\j\\workspace\\x64_arm64_alt---50816bd7\\tests\\build.proj(55,5): error MSB3073: The command \"\"D:\\j\\workspace\\x64_arm64_alt---50816bd7\\tests\\..\\Tools\\dotnetcli\\dotnet.exe\" restore --packages \"D:\\j\\workspace\\x64_arm64_alt---50816bd7\\tests\\..\\packages\" --source https://dotnet.myget.org/F/dotnet-corefxlab/api/v3/index.json --source https://dotnetfeed.blob.core.windows.net/dotnet-core/index.json --source https://dotnet.myget.org/F/dotnet-core/api/v3/index.json --source https://api.nuget.org/v3/index.json D:\\j\\workspace\\x64_arm64_alt---50816bd7\\tests\\scripts\\scripts.csproj \" exited with code -1073741819.\r\n    1 Warning(s)\r\n    1 Error(s)\r\n```"}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"8861864837","Type":"IssuesEvent","CreatedAt":"2019-01-10T02:46:46","Actor":"dsplaisted","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/10581","RelatedDescription":"Opened issue \"Update targeting pack asset resolution to handle assets from \"real\" targeting packs\" (#10581) at dotnet/cli","RelatedBody":"With https://github.com/dotnet/sdk/pull/2774, we are resolving assets from \"targeting packs\", but we are using the existing packages (such as Microsoft.NETCore.App) as the targeting packs.  We plan to use different packages with different layouts as the real targeting packs.  Along with that, we will need to update the asset resolution logic to account for this."},{"Id":"8861397428","Type":"PullRequestEvent","CreatedAt":"2019-01-10T00:26:13","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/10579","RelatedDescription":"Merged pull request \"Merge release/2.1.5xx to release/2.2.1xx\" (#10579) at dotnet/cli","RelatedBody":"\nThis is an automatically generated pull request from release/2.1.5xx into release/2.2.1xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1.5xx-to-release/2.2.1xx\ngit reset --hard upstream/release/2.2.1xx\ngit merge upstream/release/2.1.5xx\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.1.5xx-to-release/2.2.1xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"8860923338","Type":"PullRequestEvent","CreatedAt":"2019-01-09T22:29:36","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/10578","RelatedDescription":"Merged pull request \"Merge release/2.1.6xx into release/2.2.2xx\" (#10578) at dotnet/cli","RelatedBody":""},{"Id":"8860861218","Type":"PullRequestEvent","CreatedAt":"2019-01-09T22:17:10","Actor":"dotnet-bot","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/10580","RelatedDescription":"Opened pull request \"Merge release/2.2.1xx to release/2.2.2xx\" (#10580) at dotnet/cli","RelatedBody":"\nThis is an automatically generated pull request from release/2.2.1xx into release/2.2.2xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.2.1xx-to-release/2.2.2xx\ngit reset --hard upstream/release/2.2.2xx\ngit merge upstream/release/2.2.1xx\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.2.1xx-to-release/2.2.2xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"8860860971","Type":"PullRequestEvent","CreatedAt":"2019-01-09T22:17:07","Actor":"dotnet-bot","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/10579","RelatedDescription":"Opened pull request \"Merge release/2.1.5xx to release/2.2.1xx\" (#10579) at dotnet/cli","RelatedBody":"\nThis is an automatically generated pull request from release/2.1.5xx into release/2.2.1xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1.5xx-to-release/2.2.1xx\ngit reset --hard upstream/release/2.2.1xx\ngit merge upstream/release/2.1.5xx\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.1.5xx-to-release/2.2.1xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"8854143660","Type":"IssuesEvent","CreatedAt":"2019-01-08T23:57:44","Actor":"dsplaisted","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/1051","RelatedDescription":"Opened issue \"Create targeting pack for .NET Standard\" (#1051) at dotnet/standard","RelatedBody":"For .NET Core 3.0, we expect to separate targeting packs, which contain the assets needed at build time when targeting .NET Core 3.0 (for example, reference assemblies and intellisense documentation) from \"runtime packs\", which will include the platform-specific runtime components for .NET Core 3.  See dotnet/cli#10006, and [dotnet/designs#50](https://github.com/dotnet/designs/pull/50/files?short_path=ebf265d#diff-ebf265d0476041dd8cab82fa24ab5b0e)\r\n\r\nWe will have targeting pack for each shared framework (.NET Core, ASP.NET Core, and WindowsDesktop), as well as for .NET Standard.  This issue tracks the work required a .NET Standard targeting pack.  Ideally, we should create targeting packs for both .NET Standard 2.1 and 2.0.\r\n\r\nThe work required includes:\r\n\r\n- A new NuGet package including the targeting pack assets.  This should include the reference assemblies, intellisense documentation, and platform manifest file.  The current straw man proposal for the package ID is `Microsoft.NETCore.App.Ref`\r\n- Installers for each supported installer format (msi, deb, pkg, and rpm), which lay out the targeting pack files under `<DOTNET_ROOT>/packs/<PackageId>/version`.  These installers will be bundled or depended on by the corresponding .NET Core SDK installers.\r\n\r\nSome of the details (such as package layout, names, etc) are still [under design](https://github.com/dotnet/designs/pull/50/files?short_path=ebf265d#diff-ebf265d0476041dd8cab82fa24ab5b0e) and may change slightly."},{"Id":"8848838829","Type":"IssuesEvent","CreatedAt":"2019-01-08T08:34:45","Actor":"duncand","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/1050","RelatedDescription":"Opened issue \"Proposal to rename Standard 2.1 to 2.2, make 2.1 a Framework compatible subset\" (#1050) at dotnet/standard","RelatedBody":"I'm looking to provide input on .NET Standard and this appears to be the best place.\r\n\r\nSee https://blogs.msdn.microsoft.com/dotnet/2018/11/05/announcing-net-standard-2-1/ for reference.\r\n\r\nI propose that what is currently planned for .NET Standard 2.1 be pushed back to .NET Standard 2.2, and that .NET Standard 2.1 instead just have the subset of those changes that are implementable on .NET Framework.\r\n\r\nWhile going forward, .NET Standard after 2.0 is mainly adding new features that are not practical to implement in .NET Framework, some of the proposals for 2.1 contained bringing out some things that already existed but missed the 2.0 window.\r\n\r\nIf we do what I propose, then we have a last chance to increase the API surface that can run everywhere, before it is permanently shut out due to releasing a .NET Standard version that Framework can't run, given that each increasing Standard version is a superset of what came before."}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"8862103692","Type":"PullRequestEvent","CreatedAt":"2019-01-10T04:02:21","Actor":"geoffkizer","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/34458","RelatedDescription":"Merged pull request \"Clean up HttpClientTest\" (#34458) at dotnet/corefx","RelatedBody":"HttpClientTest contains tests for the HttpClient class. Currently, it is mostly, but not entirely, independent of the actual HttpClientHandler used.\r\n\r\nClean this up so it no longer relies on the HttpClientHandler. This means:\r\n(1) Moving a couple tests to HttpClientHandlerTest\r\n(2) Modifying a few tests to use the mock handler instead of a real handler (most were already doing this)\r\n\r\nWith this change, HttpClientTest no longer needs to derive from HttpClientTestBase, so remove the dependency and handler-specific derivations.\r\n\r\nAlso, rename HttpClientTestBase to HttpClientHandlerTestBase.\r\n\r\nThere are two commits in this PR. The first contains all the significant code changes. The second is simply the rename from HttpClientTestBase -> HttpClientHandlerTestBase.\r\n\r\n@dotnet/ncl \r\n"},{"Id":"8862094193","Type":"PullRequestEvent","CreatedAt":"2019-01-10T03:59:09","Actor":"bartonjs","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/34485","RelatedDescription":"Opened pull request \"Introduce JsonDocument\" (#34485) at dotnet/corefx","RelatedBody":"JsonDocument is a read-only random-access document model for JSON payloads.\r\n\r\nThe JsonDocument class holds parsing state, and carves off JsonElement\r\nand JsonProperty cursors as needed to represent different locations within\r\nthe logical document.\r\n\r\nContributes to #33968.\r\nBlocked by #33292.\r\nBlocked by #33998."},{"Id":"8861818972","Type":"PullRequestEvent","CreatedAt":"2019-01-10T02:32:43","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/34399","RelatedDescription":"Merged pull request \"SecurityIdentifier.ToString test fixes\" (#34399) at dotnet/corefx","RelatedBody":"fixes https://github.com/dotnet/corefx/issues/34395\r\n\r\nremoved the hardcoded NT authority and validate the authority value as a long between 0 and 48 set bits.\r\nremoved end check and asserted that a value has been found, if it hasn't the test should fail anyway.\r\n\r\n/cc @stephentoub @bartonjs "},{"Id":"8861818965","Type":"IssuesEvent","CreatedAt":"2019-01-10T02:32:43","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/34395","RelatedDescription":"Closed issue \"ValidateToStringUsingWhoami/ValidateToString tests are buggy\" (#34395) at dotnet/corefx","RelatedBody":"ValidateToStringUsingWhoami initializes `endSid` to 0 and then never sets it to anything other than its initial value:\r\nhttps://github.com/dotnet/corefx/blob/b04b5f22e933b0dae74af3e8b4d1bd5c12cbed01/src/System.Security.Principal.Windows/tests/SecurityIdentifierTests.cs#L68\r\nWe then check if `endSid > startSid`, which can only happen if `startSid` is `-1` due to the `int startSid = output.IndexOf(\"S-1-5-\")` not finding the target string, in which case `output.Substring(startSid, (endSid - startSid))` will throw an exception due to passing `-1` as the offset to `Substring`:\r\nhttps://github.com/dotnet/corefx/blob/b04b5f22e933b0dae74af3e8b4d1bd5c12cbed01/src/System.Security.Principal.Windows/tests/SecurityIdentifierTests.cs#L81\r\n\r\nAdditionally, the test seems to assume that the user's SID begins with `S-1-5-`, which mine doesn't, which is how I found the above.  The ValidateToString test has this same issue.\r\n\r\ncc: @bartonjs, @Wraith2"}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"8861907880","Type":"PullRequestEvent","CreatedAt":"2019-01-10T03:00:05","Actor":"dotnet-automerge-bot","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/32310","RelatedDescription":"Merged pull request \"Merge master to master-vs-deps\" (#32310) at dotnet/roslyn","RelatedBody":"\nThis is an automatically generated pull request from master into master-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-master-vs-deps\ngit reset --hard upstream/master-vs-deps\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push merges/master-to-master-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"8861869693","Type":"PullRequestEvent","CreatedAt":"2019-01-10T02:48:18","Actor":"ryzngard","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/32314","RelatedDescription":"Opened pull request \"Feature/move to namespace\" (#32314) at dotnet/roslyn","RelatedBody":""},{"Id":"8861807420","Type":"PullRequestEvent","CreatedAt":"2019-01-10T02:29:07","Actor":"dotnet-automerge-bot","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/32311","RelatedDescription":"Merged pull request \"Merge dev16.1-preview1 to dev16.1-preview1-vs-deps\" (#32311) at dotnet/roslyn","RelatedBody":"\nThis is an automatically generated pull request from dev16.1-preview1 into dev16.1-preview1-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/dev16.1-preview1-to-dev16.1-preview1-vs-deps\ngit reset --hard upstream/dev16.1-preview1-vs-deps\ngit merge upstream/dev16.1-preview1\n# Fix merge conflicts\ngit commit\ngit push merges/dev16.1-preview1-to-dev16.1-preview1-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"8861755282","Type":"PullRequestEvent","CreatedAt":"2019-01-10T02:13:08","Actor":"ivanbasov","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/32307","RelatedDescription":null,"RelatedBody":"Fixes https://github.com/dotnet/roslyn/issues/32209\r\n\r\nThis is a regression in Dev16. I assume it is caused by https://github.com/dotnet/roslyn/pull/30242\r\nBTW it does not happen in the new completion.\r\n\r\n@jinujoseph please review if it still should be targeted to Preview 2. \r\n@sharwell , @jasonmalinowski please let me know what kind of unit tests cover the area."},{"Id":"8861755123","Type":"PullRequestEvent","CreatedAt":"2019-01-10T02:13:05","Actor":"ivanbasov","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/pull/32307","RelatedDescription":"Closed pull request \"Completion window tooltip for constants/extension methods always show…\" (#32307) at dotnet/roslyn","RelatedBody":"Fixes https://github.com/dotnet/roslyn/issues/32209\r\n\r\nThis is a regression in Dev16. I assume it is caused by https://github.com/dotnet/roslyn/pull/30242\r\nBTW it does not happen in the new completion.\r\n\r\n@jinujoseph please review if it still should be targeted to Preview 2. \r\n@sharwell , @jasonmalinowski please let me know what kind of unit tests cover the area."},{"Id":"8861752597","Type":"PullRequestEvent","CreatedAt":"2019-01-10T02:12:18","Actor":"ivanbasov","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/32267","RelatedDescription":null,"RelatedBody":"### Customer scenario\r\n\r\n**Scenario**\r\n1. A completion (new completion implementation) happens in a multi-buffer scenario such as Razor, Debugger or TypeScript+C#.\r\n2. Roslyn provides calculates _potential commit characters_ for a content type (using completion service) and put into a subject buffer.\r\n3. Editor does not pass a surface buffer to the Commit Manager. The surface buffer differs from the subject buffer and it does not contains the _potential commit characters_.\r\n4. Later one user presses a commit character.\r\n\r\n**Expected**\r\nEditor verifies that a commit character has been pressed and asks Roslyn to TryCommit.\r\n\r\n**Actual**\r\nEditor could not find any commit character and does not make any completion commits. \r\n### Bugs this fixes\r\n\r\nFixes https://github.com/dotnet/roslyn/issues/31922\r\n\r\n### Workarounds, if any\r\nNone\r\n\r\n### Risk\r\nLow\r\n\r\n### Performance impact\r\nNone\r\n\r\n### Is this a regression from a previous update?\r\nNo\r\n\r\n### Root cause analysis\r\nThis functionality is under validation before shipping.\r\nThere was a design discussion between the Roslyn team and the Editor team regarding transporting information about potential commit characters from CompletionSource to CommitManager. A decision was made some time ago: use buffers. Some time after that the Editor found that the buffer provided to CompletionSource should be different from one found in the CommitManager. This caused the bug.\r\n\r\nActually, the Editor team and the Roslyn team should think about a better, more reliable transport for this information rather than a property bag. A better solution require changing the API.\r\n\r\n### How was the bug found?\r\nPartner team verification"},{"Id":"8861752299","Type":"PullRequestEvent","CreatedAt":"2019-01-10T02:12:13","Actor":"ivanbasov","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/pull/32267","RelatedDescription":"Closed pull request \"AsyncCompletion in Debugger: potential commit chars is empty\" (#32267) at dotnet/roslyn","RelatedBody":"### Customer scenario\r\n\r\n**Scenario**\r\n1. A completion (new completion implementation) happens in a multi-buffer scenario such as Razor, Debugger or TypeScript+C#.\r\n2. Roslyn provides calculates _potential commit characters_ for a content type (using completion service) and put into a subject buffer.\r\n3. Editor does not pass a surface buffer to the Commit Manager. The surface buffer differs from the subject buffer and it does not contains the _potential commit characters_.\r\n4. Later one user presses a commit character.\r\n\r\n**Expected**\r\nEditor verifies that a commit character has been pressed and asks Roslyn to TryCommit.\r\n\r\n**Actual**\r\nEditor could not find any commit character and does not make any completion commits. \r\n### Bugs this fixes\r\n\r\nFixes https://github.com/dotnet/roslyn/issues/31922\r\n\r\n### Workarounds, if any\r\nNone\r\n\r\n### Risk\r\nLow\r\n\r\n### Performance impact\r\nNone\r\n\r\n### Is this a regression from a previous update?\r\nNo\r\n\r\n### Root cause analysis\r\nThis functionality is under validation before shipping.\r\nThere was a design discussion between the Roslyn team and the Editor team regarding transporting information about potential commit characters from CompletionSource to CommitManager. A decision was made some time ago: use buffers. Some time after that the Editor found that the buffer provided to CompletionSource should be different from one found in the CommitManager. This caused the bug.\r\n\r\nActually, the Editor team and the Roslyn team should think about a better, more reliable transport for this information rather than a property bag. A better solution require changing the API.\r\n\r\n### How was the bug found?\r\nPartner team verification"},{"Id":"8861700089","Type":"PullRequestEvent","CreatedAt":"2019-01-10T01:56:28","Actor":"dotnet-automerge-bot","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/32299","RelatedDescription":"Merged pull request \"Merge dev16.0-preview2 to dev16.0-preview2-vs-deps\" (#32299) at dotnet/roslyn","RelatedBody":"\nThis is an automatically generated pull request from dev16.0-preview2 into dev16.0-preview2-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/dev16.0-preview2-to-dev16.0-preview2-vs-deps\ngit reset --hard upstream/dev16.0-preview2-vs-deps\ngit merge upstream/dev16.0-preview2\n# Fix merge conflicts\ngit commit\ngit push merges/dev16.0-preview2-to-dev16.0-preview2-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"8862078952","Type":"PullRequestEvent","CreatedAt":"2019-01-10T03:54:04","Actor":"yowl","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/6800","RelatedDescription":"Opened pull request \"WIP: WASM: Enable reflection for types\" (#6800) at dotnet/corert","RelatedBody":"Fixes #5842 \r\nThanks for all the help on this.\r\nI'm leaving this WIP as it contains 2 changes from @morganbr in `ILToWebAssemblyImporter.cs`: the funclets for try/catch/finally which is needed here; and some alignment fixes which is not strictly necessary for the WASM=1 output, but it was earlier in the branch and was useful for debugging.  Ideally these changes would be merged separately but this work is getting old and I wanted to push it along as the merge to `master` was hard enough now.  And with respect to the merge, the work here might be useful for Morgan as due to the overlapping time of the `ThrowIfNull` changes and these the merge is not straightforward.   Also maybe the other parts of this could be reviewed?"},{"Id":"8861130650","Type":"PullRequestEvent","CreatedAt":"2019-01-09T23:16:03","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/6799","RelatedDescription":"Opened pull request \"Merge changes from TFS\" (#6799) at dotnet/corert","RelatedBody":"When merging, this PR, please ensure a merge commit is created as automation requires the merge commit.  Do not 'Squash and merge' or 'Rebase and merge'!"},{"Id":"8861093955","Type":"PullRequestEvent","CreatedAt":"2019-01-09T23:06:55","Actor":"trylek","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/6798","RelatedDescription":"Opened pull request \"Generic lookup fixes\" (#6798) at dotnet/corert","RelatedBody":"1) Add new form of generic lookup for generic non-GC static base.\r\n\r\n2) Stop back-translating canonical fields to their runtime\r\ndetermined counterparts for the purpose of emitting R2R signatures.\r\n\r\nThese changes fix three Pri# 0 CoreCLR tests.\r\n\r\nThanks\r\n\r\nTomas"},{"Id":"8860904883","Type":"PullRequestEvent","CreatedAt":"2019-01-09T22:25:51","Actor":"trylek","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/6791","RelatedDescription":"Merged pull request \"Fix generic lookup cells to be per method context\" (#6791) at dotnet/corert","RelatedBody":"1) Clean up generic lookup tests so that the TH->RTTH helper is\r\nonly called from a single method (GetTypeName). This is no longer\r\nstrictly necessary as Crossgen started to support the helper\r\nbut I believe it to be good for general hygiene.\r\n\r\n2) Minor improvements in the R2R test harness to display ordered\r\nsets of whitelisted vs. non-whitelisted jitted methods.\r\n\r\n3) It seems to me that GenericLookupSignature should always pass\r\naround the instantiating stub flag as the exact purpose of the\r\nsignature is to cater for shared methods with the extra\r\ninstantiation argument.\r\n\r\n4) Based on JanK's clarification I have fixed the CPAOT compiler\r\nto emit separate generic lookup cells for each context method.\r\n\r\nThanks\r\n\r\nTomas"},{"Id":"8860692373","Type":"PullRequestEvent","CreatedAt":"2019-01-09T21:46:00","Actor":"nattress","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/6797","RelatedDescription":"Opened pull request \"Update RyuJIT\" (#6797) at dotnet/corert","RelatedBody":""},{"Id":"8859274944","Type":"PullRequestEvent","CreatedAt":"2019-01-09T17:27:50","Actor":"Dotnet-GitSync-Bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/6796","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#6796) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @jkotas @marek-safar @jkotas"},{"Id":"8858953192","Type":"IssuesEvent","CreatedAt":"2019-01-09T16:37:55","Actor":"xoofx","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/issues/6794","RelatedDescription":"Closed issue \"Failure with ReadyToRun without asking for ReadyToRun\" (#6794) at dotnet/corert","RelatedBody":"Hey,\r\n\r\nI'm trying to use the latest clrjit(ilc) by compiling from CoreCLR master but I'm getting a weird behavior where the `CorInfoImpl.GetHelperFtnUncached` is being called with arguments that are not handled (like `CORINFO_HELP_THROW_TYPE_NOT_SUPPORTED`, `CORINFO_HELP_POLL_GC`...etc.) and If I add fake handling here, it will fail later on `getReadyToRunHelper` not handling `CORINFO_HELP_TYPEHANDLE_TO_RUNTIMETYPEHANDLE_MAYBENULL` while I'm not using ilc with the readytorun option.\r\n\r\nThe code that I'm trying to compile is quite simple though:\r\n\r\n```c#\r\n    class Program\r\n    {\r\n        static int Main()\r\n        {\r\n            var array = new int[] {1, 2, 3, 4};\r\n\r\n            var result = 0;\r\n            for (int i = 0; i < array.Length; i++)\r\n            {\r\n                result = array[i];\r\n            }\r\n\r\n            return result;\r\n        }\r\n    }\r\n```\r\n\r\nAm I doing something wrong? Or something changed in CoreCLR that should be passed to RyuJit or?"},{"Id":"8857241292","Type":"PullRequestEvent","CreatedAt":"2019-01-09T12:19:04","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/6795","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#6795) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @wfurt"},{"Id":"8856781847","Type":"PullRequestEvent","CreatedAt":"2019-01-09T10:54:06","Actor":"Dotnet-GitSync-Bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/6795","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#6795) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"8855696904","Type":"IssuesEvent","CreatedAt":"2019-01-09T07:36:16","Actor":"xoofx","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/issues/6794","RelatedDescription":"Opened issue \"Failure with ReadyToRun without asking for ReadyToRun\" (#6794) at dotnet/corert","RelatedBody":"Hey,\r\n\r\nI'm trying to use the latest clrjit(ilc) from CoreCLR but I'm getting a weird behavior where the the `CorInfoImpl.GetHelperFtnUncached` is being called with arguments that are not handled (like `CORINFO_HELP_THROW_TYPE_NOT_SUPPORTED`, `CORINFO_HELP_POLL_GC`...etc.) and If I add fake handling here, it will fail later on `getReadyToRunHelper` not handling `CORINFO_HELP_TYPEHANDLE_TO_RUNTIMETYPEHANDLE_MAYBENULL` while I'm not using ilc with the readytorun option.\r\n\r\nThe code that I'm trying to compile is quite simple though:\r\n\r\n```c#\r\n    class Program\r\n    {\r\n        static int Main()\r\n        {\r\n            var array = new int[] {1, 2, 3, 4};\r\n\r\n            var result = 0;\r\n            for (int i = 0; i < array.Length; i++)\r\n            {\r\n                result = array[i];\r\n            }\r\n\r\n            return result;\r\n        }\r\n    }\r\n```\r\n\r\nAm I doing something wrong? Or something changed in CoreCLR that should be passed to RyuJit or?"},{"Id":"8855623924","Type":"IssuesEvent","CreatedAt":"2019-01-09T07:18:02","Actor":"rocket0634","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/issues/6793","RelatedDescription":"Closed issue \"RuntimeIdentifier Platform 'win-x64' and the PlatformTarget 'x86' must be compatible\" (#6793) at dotnet/corert","RelatedBody":"I was attempting to build a console application in DotNet Native, to try and minimize the amount of files I would need to distribute when publishing my .NET Core app. Before trying to migrate my entire app, I tried to just compile a simple Hello World app, and found instructions in this github for generating one. Unfortunately, any time I try to run this command:\r\ndotnet publish -r win-x64 -c release\r\nI get the error shown in the title. [error NETSDK1032: The RuntimeIdentifier Platform 'win-x64' and the PlatformTarget 'x86' must be compatible]\r\nI've followed every step in the Hello World tutorial exactly, which doesn't really say more than to grab a couple of nuget files and publish. If someone could direct me to additional things I need to do to make it work, please let me know. [In the long run, I want to publish the app for Windows, Mac, and Linux, in either 32/64 bit, and if corert can't manage one of them, then I can use normal Net Core to publish them. For now, I'm just trying to get win64 to work.]\r\n\r\nAlso, in previous attempts, I ran into this issue: \"The PrivateSdkAssemblies ItemGroup is required for _ComputeAssembliesToCompileToNative\"."},{"Id":"8855272239","Type":"IssuesEvent","CreatedAt":"2019-01-09T05:40:39","Actor":"rocket0634","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/issues/6793","RelatedDescription":"Opened issue \"RuntimeIdentifier Platform 'win-x64' and the PlatformTarget 'x86' must be compatible\" (#6793) at dotnet/corert","RelatedBody":"I was attempting to build a console application in DotNet Native, to try and minimize the amount of files I would need to distribute when publishing my .NET Core app. Before trying to migrate my entire app, I tried to just compile a simple Hello World app, and found instructions in this github for generating one. Unfortunately, any time I try to run this command:\r\ndotnet publish -r win-x64 -c release\r\nI get the error shown in the title. [error NETSDK1032: The RuntimeIdentifier Platform 'win-x64' and the PlatformTarget 'x86' must be compatible]\r\nI've followed every step in the Hello World tutorial exactly, which doesn't really say more than to grab a couple of nuget files and publish. If someone could direct me to additional things I need to do to make it work, please let me know. [In the long run, I want to publish the app for Windows, Mac, and Linux, in either 32/64 bit, and if corert can't manage one of them, then I can use normal Net Core to publish them. For now, I'm just trying to get win64 to work.]\r\n\r\nAlso, in previous attempts, I ran into this issue: \"The PrivateSdkAssemblies ItemGroup is required for _ComputeAssembliesToCompileToNative\"."}],"ResultType":"GitHubEvent"},"SDK":{"Events":[{"Id":"8861714241","Type":"PullRequestEvent","CreatedAt":"2019-01-10T02:00:40","Actor":"peterhuene","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/2805","RelatedDescription":"Opened pull request \"[WIP] Respect PlatformTarget when setting DefaultAppHostRuntimeIdentifier.\" (#2805) at dotnet/sdk","RelatedBody":"This commit uses `PlatformTarget` to determine the value for\r\n`DefaultAppHostRuntimeIdentifier` on Windows.\r\n\r\nIf `PlatformTarget` is set to `x86`, then a PE32 apphost is used.\r\n\r\nIf `PlatformTarget` is set to `x64`, then a PE32+ apphost is used.\r\n\r\nOtherwise, the apphost for the SDK RID is used.\r\n\r\nFixes #2632."},{"Id":"8861674505","Type":"PullRequestEvent","CreatedAt":"2019-01-10T01:48:40","Actor":"nguerrera","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/2799","RelatedDescription":"Merged pull request \"Insert NuGet Build 5.0.0-preview1.5754 into sdk\" (#2799) at dotnet/sdk","RelatedBody":"Insert NuGet Build 5.0.0-preview1.5754 into sdk release/2.1.6xx branch"}],"ResultType":"GitHubEvent"},"Home-Issues":{"Issues":[{"Id":"395863354","IsPullRequest":true,"CreatedAt":"2019-01-09T22:28:14","Actor":"ErikEJ","Number":"128","RawContent":null,"Title":"Update of EF description","State":"closed","Body":"@divega !","Url":"https://github.com/dotnet/foundation/pull/128","RelatedDescription":"Closed or merged PR \"Update of EF description\" (#128)"},{"Id":"395901602","IsPullRequest":true,"CreatedAt":"2019-01-05T03:23:39","Actor":"MarcBruins","Number":"129","RawContent":null,"Title":"Update to absolute path","State":"closed","Body":"Update to absolute path so that when this list is copied the link will actually work","Url":"https://github.com/dotnet/foundation/pull/129","RelatedDescription":"Closed or merged PR \"Update to absolute path\" (#129)"},{"Id":"395705579","IsPullRequest":true,"CreatedAt":"2019-01-04T00:22:42","Actor":"carloscds","Number":"127","RawContent":null,"Title":"Update documentation information","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/127","RelatedDescription":"Closed or merged PR \"Update documentation information\" (#127)"},{"Id":"391459057","IsPullRequest":true,"CreatedAt":"2019-01-03T04:47:09","Actor":"manne","Number":"122","RawContent":null,"Title":"targets the existing document","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/122","RelatedDescription":"Closed or merged PR \"targets the existing document\" (#122)"},{"Id":"384569679","IsPullRequest":true,"CreatedAt":"2019-01-03T04:46:31","Actor":"JamesNK","Number":"121","RawContent":null,"Title":"Add Newtonsoft.Json","State":"closed","Body":"// @jongalloway ","Url":"https://github.com/dotnet/foundation/pull/121","RelatedDescription":"Closed or merged PR \"Add Newtonsoft.Json\" (#121)"},{"Id":"391460225","IsPullRequest":false,"CreatedAt":"2018-12-16T11:57:53","Actor":"manne","Number":"126","RawContent":null,"Title":"No logo provided for Prism","State":"open","Body":"Can/should this [image](http://prismlibrary.github.io/images/logo-prism-symbol@2x.png) be used?\r\n\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L155-L157","Url":"https://github.com/dotnet/foundation/issues/126","RelatedDescription":"Open issue \"No logo provided for Prism\" (#126)"},{"Id":"391459919","IsPullRequest":false,"CreatedAt":"2018-12-16T11:53:31","Actor":"manne","Number":"125","RawContent":null,"Title":"Missing logo for MVVM Light Toolkit","State":"open","Body":"`https://raw.githubusercontent.com/paulcbetts/mvvmlight/master/Installer/InstallItems/html/MVVM_BlackText_190x147.png` results in a 404.\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L137-L139","Url":"https://github.com/dotnet/foundation/issues/125","RelatedDescription":"Open issue \"Missing logo for MVVM Light Toolkit\" (#125)"},{"Id":"391459812","IsPullRequest":false,"CreatedAt":"2018-12-16T11:52:07","Actor":"manne","Number":"124","RawContent":null,"Title":"Missing logo for Umbraco","State":"open","Body":"`https://fbcdn-profile-a.akamaihd.net/hprofile-ak-xap1/v/t1.0-1/p160x160/971596_519168901464439_566592989_n.png?oh=ce61e5b4cbd60c0d99c4164cbb05a434&oe=54F091C9&__gda__=1424472439_c9f76213a915bc2af88246f464f29e8b` results in a 404.\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L149-L151","Url":"https://github.com/dotnet/foundation/issues/124","RelatedDescription":"Open issue \"Missing logo for Umbraco\" (#124)"},{"Id":"391459677","IsPullRequest":false,"CreatedAt":"2018-12-16T11:50:29","Actor":"manne","Number":"123","RawContent":null,"Title":"Missing logo for Steeltoe","State":"open","Body":"`https://brandfolder.com/pivotal-assets/attachments/ohxttd-7yxa60-clvf50/pivotal-assets-pivotal-genericfile.png` redirects to a sign in page\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L128-L130","Url":"https://github.com/dotnet/foundation/issues/123","RelatedDescription":"Open issue \"Missing logo for Steeltoe\" (#123)"},{"Id":"384212839","IsPullRequest":true,"CreatedAt":"2018-11-26T09:33:50","Actor":"stefanov-stefan","Number":"120","RawContent":null,"Title":"Added Telerik info","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/120","RelatedDescription":"Closed or merged PR \"Added Telerik info\" (#120)"},{"Id":"384212448","IsPullRequest":true,"CreatedAt":"2018-11-26T09:33:22","Actor":"stefanov-stefan","Number":"119","RawContent":null,"Title":"Added Telerik UWP proj","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/119","RelatedDescription":"Closed or merged PR \"Added Telerik UWP proj\" (#119)"},{"Id":"382378851","IsPullRequest":true,"CreatedAt":"2018-11-23T10:32:15","Actor":"pkgw","Number":"118","RawContent":null,"Title":"Update WorldWide Telescope","State":"closed","Body":"Some layout fixes, but the main change is that @pkgw is now the project director.","Url":"https://github.com/dotnet/foundation/pull/118","RelatedDescription":"Closed or merged PR \"Update WorldWide Telescope\" (#118)"},{"Id":"380070557","IsPullRequest":true,"CreatedAt":"2018-11-23T10:31:49","Actor":"leastprivilege","Number":"117","RawContent":null,"Title":"Update identityserver.md","State":"closed","Body":"significant whitespace","Url":"https://github.com/dotnet/foundation/pull/117","RelatedDescription":"Closed or merged PR \"Update identityserver.md\" (#117)"},{"Id":"379731798","IsPullRequest":true,"CreatedAt":"2018-11-13T04:22:32","Actor":"leastprivilege","Number":"114","RawContent":null,"Title":"Update identityserver.md","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/114","RelatedDescription":"Closed or merged PR \"Update identityserver.md\" (#114)"},{"Id":"379777451","IsPullRequest":true,"CreatedAt":"2018-11-13T04:21:35","Actor":"scottbrady91","Number":"116","RawContent":null,"Title":"Update to IdentityManager project","State":"closed","Body":"My employer and I have recently taken over the IdentityManager project from Dom & Brock. I've updated the IdentityManager page to reflect this and the newer version of the core repo.","Url":"https://github.com/dotnet/foundation/pull/116","RelatedDescription":"Closed or merged PR \"Update to IdentityManager project\" (#116)"},{"Id":"379733880","IsPullRequest":true,"CreatedAt":"2018-11-13T04:20:23","Actor":"leastprivilege","Number":"115","RawContent":null,"Title":"Create identitymodel.md","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/115","RelatedDescription":"Closed or merged PR \"Create identitymodel.md\" (#115)"},{"Id":"371941750","IsPullRequest":true,"CreatedAt":"2018-11-01T16:20:07","Actor":"SeanKilleen","Number":"113","RawContent":null,"Title":"Update logo for couchbase-lite in projects.json","State":"closed","Body":"Uses a working link to the logo.\r\n\r\nResolves https://github.com/dotnet/dotnetfoundation-website/issues/65\r\n\r\nFix can be verified by copying/pasting the URL into a browser.","Url":"https://github.com/dotnet/foundation/pull/113","RelatedDescription":"Closed or merged PR \"Update logo for couchbase-lite in projects.json\" (#113)"},{"Id":"365089074","IsPullRequest":false,"CreatedAt":"2018-09-29T02:45:47","Actor":"athinboy","Number":"112","RawContent":null,"Title":"Suggest: key  F12  go to source code of dotnetcore  rather then metadata","State":"open","Body":"Apology for my poor english!\r\n\r\nI have change to Java due to the boss's decision .   I think dotnet  need a big change. In China, more and more dotnet project go to die,  but new java project continuously increase!\r\n\r\nI suggest:key  F12  go to source code of dotnetcore  rather then metadata(e.g.    ***.dll.source.zip \\****.exe.source.zip),   maybe there is already done,but i don't know. \r\n\r\nthanks!\r\n","Url":"https://github.com/dotnet/foundation/issues/112","RelatedDescription":"Open issue \"Suggest: key  F12  go to source code of dotnetcore  rather then metadata\" (#112)"},{"Id":"356296763","IsPullRequest":false,"CreatedAt":"2018-09-02T16:49:34","Actor":"adamralph","Number":"111","RawContent":null,"Title":"Sourcelink location is confusing","State":"open","Body":"The README has link under the \"Cameron Taggart\" section pointing to https://github.com/ctaggart/SourceLink but the project now seems to live under the \"dotnet\" org in https://github.com/dotnet/sourcelink/ which suggests the link should be changed to that, and moved under the \"Microsoft\" section.","Url":"https://github.com/dotnet/foundation/issues/111","RelatedDescription":"Open issue \"Sourcelink location is confusing\" (#111)"},{"Id":"353832272","IsPullRequest":true,"CreatedAt":"2018-08-27T16:21:55","Actor":"jkonicki","Number":"110","RawContent":null,"Title":"Fix - add missing comma","State":"closed","Body":"@jongalloway - Looks like I missed a comma in my previous PR. Here is the fix.","Url":"https://github.com/dotnet/foundation/pull/110","RelatedDescription":"Closed or merged PR \"Fix - add missing comma\" (#110)"},{"Id":"352736883","IsPullRequest":true,"CreatedAt":"2018-08-23T23:10:07","Actor":"anthonychu","Number":"108","RawContent":null,"Title":"Fix errors in projects.json","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/108","RelatedDescription":"Closed or merged PR \"Fix errors in projects.json\" (#108)"},{"Id":"353536205","IsPullRequest":true,"CreatedAt":"2018-08-23T23:09:07","Actor":"jkonicki","Number":"109","RawContent":null,"Title":"Add Steeltoe to the project listing","State":"closed","Body":"Hi @jongalloway, Here is the PR for adding Steeltoe to the projects listing.  Let me know if you need any changes. \r\nThanks.","Url":"https://github.com/dotnet/foundation/pull/109","RelatedDescription":"Closed or merged PR \"Add Steeltoe to the project listing\" (#109)"},{"Id":"339545098","IsPullRequest":true,"CreatedAt":"2018-08-17T23:19:54","Actor":"slide","Number":"105","RawContent":null,"Title":"Add DLR/IronPython2/IronPython3","State":"closed","Body":"Add DLR/IronPython2/IronPython3 to project list.","Url":"https://github.com/dotnet/foundation/pull/105","RelatedDescription":"Closed or merged PR \"Add DLR/IronPython2/IronPython3\" (#105)"},{"Id":"336936558","IsPullRequest":false,"CreatedAt":"2018-08-07T07:06:40","Actor":"tomkerkhove","Number":"104","RawContent":null,"Title":"About still mentions CodePlex","State":"closed","Body":"About still mentions CodePlex which is now in archive mode.\r\n\r\n![image](https://user-images.githubusercontent.com/4345663/42086259-e0b7d008-7b92-11e8-96c9-02ee61ddc457.png)\r\n\r\nIs this something that I can PR?","Url":"https://github.com/dotnet/foundation/issues/104","RelatedDescription":"Closed issue \"About still mentions CodePlex\" (#104)"},{"Id":"340355507","IsPullRequest":false,"CreatedAt":"2018-07-11T18:28:16","Actor":"Eilon","Number":"107","RawContent":null,"Title":"Links to .NET Foundation web site use HTTP instead of HTTPS","State":"open","Body":"It appears that HTTPS works just fine: https://www.dotnetfoundation.org/\r\n\r\nBut the links at these places use HTTP:\r\n1. The link in the header of https://github.com/dotnet/home\r\n2. The link in the header of https://github.com/dotnet\r\n3. Some links in https://github.com/dotnet/home/blob/master/README.md (both to .NET Foundation, and a GitHub link to another project)\r\n\r\nThese links should all change to HTTPS.","Url":"https://github.com/dotnet/foundation/issues/107","RelatedDescription":"Open issue \"Links to .NET Foundation web site use HTTP instead of HTTPS\" (#107)"},{"Id":"340126921","IsPullRequest":false,"CreatedAt":"2018-07-11T07:41:25","Actor":"glatzert","Number":"106","RawContent":null,"Title":"Updates are not requested from local WSUS","State":"open","Body":"The Team somewhen Mention, that fixes should be installed automatically, if .NET Core is on a Windows Server.\r\nThis seems not to work. What are the prerequisits for this to be working?","Url":"https://github.com/dotnet/foundation/issues/106","RelatedDescription":"Open issue \"Updates are not requested from local WSUS\" (#106)"},{"Id":"326192782","IsPullRequest":true,"CreatedAt":"2018-05-24T16:33:09","Actor":"danmosemsft","Number":"103","RawContent":null,"Title":"Add ML.NET to readme","State":"closed","Body":"cc @shauheen @jongalloway ","Url":"https://github.com/dotnet/foundation/pull/103","RelatedDescription":"Closed or merged PR \"Add ML.NET to readme\" (#103)"},{"Id":"316146229","IsPullRequest":true,"CreatedAt":"2018-05-18T19:05:34","Actor":"Cheesebaron","Number":"100","RawContent":null,"Title":"Create mvvmcross.md","State":"closed","Body":"Added MvvmCross as project as part of on-boarding.\r\n\r\nhttps://github.com/MvvmCross/MvvmCross/issues/2415","Url":"https://github.com/dotnet/foundation/pull/100","RelatedDescription":"Closed or merged PR \"Create mvvmcross.md\" (#100)"},{"Id":"321003666","IsPullRequest":true,"CreatedAt":"2018-05-18T19:05:07","Actor":"shauheen","Number":"102","RawContent":null,"Title":"Update projects.json adding MLNET","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/102","RelatedDescription":"Closed or merged PR \"Update projects.json adding MLNET\" (#102)"},{"Id":"321003407","IsPullRequest":true,"CreatedAt":"2018-05-18T19:04:23","Actor":"shauheen","Number":"101","RawContent":null,"Title":"Create mlnet.md","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/101","RelatedDescription":"Closed or merged PR \"Create mlnet.md\" (#101)"}],"ResultType":"GitHubIssue"},"CoreCLR-Issues":{"Issues":[{"Id":"397676790","IsPullRequest":true,"CreatedAt":"2019-01-10T05:21:45","Actor":"cshung","Number":"21925","RawContent":null,"Title":"For non-versionable code, we do not need to check the code version manager","State":"open","Body":"","Url":"https://github.com/dotnet/coreclr/pull/21925","RelatedDescription":"Open PR \"For non-versionable code, we do not need to check the code version manager\" (#21925)"},{"Id":"397651144","IsPullRequest":true,"CreatedAt":"2019-01-10T02:55:01","Actor":"am11","Number":"21924","RawContent":null,"Title":"Set visibility option to hidden","State":"open","Body":"Defined and used `DllExport` macro instead of `PUB` (aligned with the name used in CoreFX).\r\n\r\nWhile testing in different operating systems, I found that it is possible to have just `py` executable available in PATH via default installation without `python`, so I have added it in probing paths inside cmake and sh files as well.\r\n\r\nCloses #2484","Url":"https://github.com/dotnet/coreclr/pull/21924","RelatedDescription":"Open PR \"Set visibility option to hidden\" (#21924)"},{"Id":"397587806","IsPullRequest":true,"CreatedAt":"2019-01-10T02:03:59","Actor":"dotnet-maestro-bot","Number":"21919","RawContent":null,"Title":"[automated] Merge branch 'release/2.1' => 'release/2.2'","State":"closed","Body":"I detected changes in the release/2.1 branch which have not been merged yet to release/2.2. I'm a robot and am configured to help you automatically keep release/2.2 up to date, so I've opened this PR.\r\n\r\nThis PR merges commits made on release/2.1 by the following committers:\n\n* @RussKeldorph\r\n\r\n## Instructions for merging\r\n\r\nThis repo does not appear to allow merge commits from the GitHub UI, so you will need to update this PR with a merge commit before closing this PR.\r\n\r\n``` sh\r\ngit fetch\r\ngit checkout release/2.1\r\ngit pull --ff-only\r\ngit checkout release/2.2\r\ngit pull --ff-only\r\ngit merge --no-ff release/2.1\r\n# If there are merge conflicts, resolve them and then run git merge --continue to complete the merge\r\ngit push https://github.com/dotnet-maestro-bot/coreclr HEAD:merge/release/2.1-to-release/2.2\r\n```\r\n\r\n<details>\r\n<summary>or if you are using SSH</summary>\r\n\r\n```\r\ngit push git@github.com:dotnet-maestro-bot/coreclr HEAD:merge/release/2.1-to-release/2.2\r\n```\r\n\r\n</details>\r\n\r\n\r\nAfter PR checks are complete push the branch\r\n```\r\ngit push\r\n```\r\n\r\nPlease contact .NET Core Engineering if you have questions or issues.\r\nAlso, if this PR was generated incorrectly, help us fix it. See https://github.com/dotnet/arcade/blob/master/scripts/GitHubMergeBranches.ps1.\r\n","Url":"https://github.com/dotnet/coreclr/pull/21919","RelatedDescription":"Closed or merged PR \"[automated] Merge branch 'release/2.1' => 'release/2.2'\" (#21919)"},{"Id":"397636525","IsPullRequest":false,"CreatedAt":"2019-01-10T01:36:54","Actor":"stephentoub","Number":"21923","RawContent":null,"Title":"Unnecessary mov generated in MemoryMarshal.Cast","State":"open","Body":"This:\r\n```C#\r\n[MethodImpl(MethodImplOptions.NoInlining)]\r\npublic static ReadOnlySpan<byte> GetBytes(ReadOnlySpan<int> s) => MemoryMarshal.Cast<int, byte>(s);\r\n```\r\nresults in this asm:\r\n```\r\nG_M23838_IG01:\r\n       4883EC28             sub      rsp, 40\r\n       90                   nop\r\n\r\nG_M23838_IG02:\r\n       488B02               mov      rax, bword ptr [rdx]\r\n       8B5208               mov      edx, dword ptr [rdx+8]\r\n       8BD2                 mov      edx, edx\r\n       48C1E202             shl      rdx, 2\r\n       4881FAFFFFFF7F       cmp      rdx, 0x7FFFFFFF\r\n       770E                 ja       SHORT G_M23838_IG04\r\n       488901               mov      bword ptr [rcx], rax\r\n       895108               mov      dword ptr [rcx+8], edx\r\n       488BC1               mov      rax, rcx\r\n\r\nG_M23838_IG03:\r\n       4883C428             add      rsp, 40\r\n       C3                   ret\r\n\r\nG_M23838_IG04:\r\n       E83384C95F           call     CORINFO_HELP_OVERFLOW\r\n       CC                   int3\r\n```\r\nbut that `mov edx, edx` is superfluous.\r\n\r\n@AndyAyersMS is investigating a fix.\r\n","Url":"https://github.com/dotnet/coreclr/issues/21923","RelatedDescription":"Open issue \"Unnecessary mov generated in MemoryMarshal.Cast\" (#21923)"},{"Id":"397182520","IsPullRequest":false,"CreatedAt":"2019-01-10T01:18:43","Actor":"VincentBu","Number":"21903","RawContent":null,"Title":"[x64] Test failed: System.Net.Http.Functional.Tests.SocketsHttpHandler_HttpClientHandler_Authentication_Test.SocketsHttpHandler_Authentication_Succeeds ","State":"closed","Body":"**Job:**\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/view/x64/job/jitstress/job/x64_checked_ubuntu_corefx_jitstressregs0x80/820/\r\n\r\n**Failed test:**\r\nSystem.Net.Http.Functional.Tests.SocketsHttpHandler_HttpClientHandler_Authentication_Test.SocketsHttpHandler_Authentication_Succeeds\r\n\r\n**Log:**\r\n```\r\nSystem.Net.Http.Functional.Tests.SocketsHttpHandler_HttpClientHandler_Authentication_Test.SocketsHttpHandler_Authentication_Succeeds(authenticateHeader: \"Digest realm=\\\"testrealm\\\", algorithm=md5-Sess, no\"..., result: True) [FAIL]\r\n  [m[31;1m[m[37m      Assert.Equal() Failure\r\n  [m[37m      Expected: OK\r\n  [m[37m      Actual:   Unauthorized\r\n  [m[30;1m      Stack Trace:\r\n  [m[37m        /mnt/j/workspace/dotnet_coreclr/master/jitstress/x64_checked_ubuntu_corefx_jitstressregs0x80/_/fx/src/System.Net.Http/tests/FunctionalTests/HttpClientHandlerTest.Authentication.cs(31,0): at System.Net.Http.Functional.Tests.HttpClientHandler_Authentication_Test.<>c.<<-cctor>b__19_0>d.MoveNext()\r\n  [m[37m        --- End of stack trace from previous location where exception was thrown ---\r\n  [m[37m        /mnt/j/workspace/dotnet_coreclr/master/jitstress/x64_checked_ubuntu_corefx_jitstressregs0x80/_/fx/src/Common/tests/System/Threading/Tasks/TaskTimeoutExtensions.cs(77,0): at System.Threading.Tasks.TaskTimeoutExtensions.WhenAllOrAnyFailed(Task[] tasks)\r\n  [m[37m        /mnt/j/workspace/dotnet_coreclr/master/jitstress/x64_checked_ubuntu_corefx_jitstressregs0x80/_/fx/src/Common/tests/System/Threading/Tasks/TaskTimeoutExtensions.cs(105,0): at System.Threading.Tasks.TaskTimeoutExtensions.WhenAllOrAnyFailed(Task[] tasks)\r\n  [m[37m        /mnt/j/workspace/dotnet_coreclr/master/jitstress/x64_checked_ubuntu_corefx_jitstressregs0x80/_/fx/src/Common/tests/System/Threading/Tasks/TaskTimeoutExtensions.cs(65,0): at System.Threading.Tasks.TaskTimeoutExtensions.WhenAllOrAnyFailed(Task[] tasks, Int32 millisecondsTimeout)\r\n  [m[37m        /mnt/j/workspace/dotnet_coreclr/master/jitstress/x64_checked_ubuntu_corefx_jitstressregs0x80/_/fx/src/System.Net.Http/tests/FunctionalTests/HttpClientHandlerTest.Authentication.cs(59,0): at System.Net.Http.Functional.Tests.HttpClientHandler_Authentication_Test.<>c__DisplayClass6_0.<<HttpClientHandler_Authentication_Succeeds>b__0>d.MoveNext()\r\n  [m[37m        --- End of stack trace from previous location where exception was thrown ---\r\n```","Url":"https://github.com/dotnet/coreclr/issues/21903","RelatedDescription":"Closed issue \"[x64] Test failed: System.Net.Http.Functional.Tests.SocketsHttpHandler_HttpClientHandler_Authentication_Test.SocketsHttpHandler_Authentication_Succeeds \" (#21903)"},{"Id":"397625402","IsPullRequest":true,"CreatedAt":"2019-01-10T00:40:23","Actor":"sbomer","Number":"21922","RawContent":null,"Title":"Re-enable publishing of transport packages","State":"open","Body":"Core-setup currently uses nuget restore to download transport packages containing coreclr symbols to redistribute. This re-enables publishing of transport packages in our new official builds. Fixes https://github.com/dotnet/coreclr/issues/21897.\r\n\r\n@rakeshsinghranchi @echesakov @jashook ","Url":"https://github.com/dotnet/coreclr/pull/21922","RelatedDescription":"Open PR \"Re-enable publishing of transport packages\" (#21922)"},{"Id":"397619533","IsPullRequest":false,"CreatedAt":"2019-01-10T00:12:13","Actor":"fiigii","Number":"21921","RawContent":null,"Title":"[RyuJIT/x86/x64] Unify and streamline emitter for operand-size override prefix (0x66)","State":"open","Body":"Now, the emitter has a lot of code like below for adding operand-size override prefix (0x66) or estimating code size of it.\r\n```cpp\r\n    if (attrSize == EA_2BYTE && ins != INS_movzx && ins != INS_movsx)\r\n    {\r\n        ...\r\n    }\r\n```\r\nWe need to refactor the emitter to unify and simplify the code.\r\n\r\ncc @CarolEidt @tannergooding","Url":"https://github.com/dotnet/coreclr/issues/21921","RelatedDescription":"Open issue \"[RyuJIT/x86/x64] Unify and streamline emitter for operand-size override prefix (0x66)\" (#21921)"},{"Id":"397122897","IsPullRequest":true,"CreatedAt":"2019-01-10T00:02:37","Actor":"jkoritzinsky","Number":"21896","RawContent":null,"Title":"Implement AssemblyDependencyResolver","State":"closed","Body":"Implement the `System.Runtime.Loader.AssemblyDependencyResolver` type as per dotnet/corefx#33165.\r\n\r\nImplements dotnet/corefx#33165\r\nSupercedes vitek-karas#8.\r\n\r\ncc: @eerhardt @ericstj @vitek-karas \r\n\r\nFrom vitek-karas#8:\r\n\r\n> PInvokes into hostpolicy.dll (which should live next to the runtime and thus always be reachable).\r\n> If the PInvoke fails (missing hostpolicy.dll) we will fail for now.\r\n> \r\n> Adds tests for the API into CoreCLR repo. The main reason is that with corerun\r\n> we can easily mock the hostpolicy.dll since there's none to start with.\r\n> Writing the same tests in CoreFX or any other place which starts the runtime through\r\n> hostpolicy would require test-only functionality to exist in either the class itself\r\n> or in the hostpolicy.\r\n","Url":"https://github.com/dotnet/coreclr/pull/21896","RelatedDescription":"Closed or merged PR \"Implement AssemblyDependencyResolver\" (#21896)"},{"Id":"397582018","IsPullRequest":true,"CreatedAt":"2019-01-09T23:42:35","Actor":"RussKeldorph","Number":"21917","RawContent":null,"Title":"[release/2.2] Update Helix queues used for testing","State":"closed","Body":"Also port fecf57a0bfc8267e7ca50e9a532a83fa29ebec87","Url":"https://github.com/dotnet/coreclr/pull/21917","RelatedDescription":"Closed or merged PR \"[release/2.2] Update Helix queues used for testing\" (#21917)"},{"Id":"397612149","IsPullRequest":true,"CreatedAt":"2019-01-09T23:40:16","Actor":"chuckries","Number":"21920","RawContent":null,"Title":"Don't trim AsyncIteratororMethodBuilder.ObjectIdForDebugger","State":"open","Body":"","Url":"https://github.com/dotnet/coreclr/pull/21920","RelatedDescription":"Open PR \"Don't trim AsyncIteratororMethodBuilder.ObjectIdForDebugger\" (#21920)"},{"Id":"397583047","IsPullRequest":true,"CreatedAt":"2019-01-09T23:18:26","Actor":"RussKeldorph","Number":"21918","RawContent":null,"Title":"[release/2.1] Update Helix queues used for testing","State":"closed","Body":"Also port fecf57a0bfc8267e7ca50e9a532a83fa29ebec87","Url":"https://github.com/dotnet/coreclr/pull/21918","RelatedDescription":"Closed or merged PR \"[release/2.1] Update Helix queues used for testing\" (#21918)"},{"Id":"397505522","IsPullRequest":true,"CreatedAt":"2019-01-09T21:59:00","Actor":"GrabYourPitchforks","Number":"21912","RawContent":null,"Title":"Move OperationStatus into shared source","State":"closed","Body":"This is the first step to moving OperationStatus from corefx into coreclr. It'll be used by the transcoding APIs which live in System.Private.CoreLib.","Url":"https://github.com/dotnet/coreclr/pull/21912","RelatedDescription":"Closed or merged PR \"Move OperationStatus into shared source\" (#21912)"},{"Id":"397563879","IsPullRequest":true,"CreatedAt":"2019-01-09T21:11:25","Actor":"adiaaida","Number":"21916","RawContent":null,"Title":"Fix perf prep for release branches","State":"open","Body":"","Url":"https://github.com/dotnet/coreclr/pull/21916","RelatedDescription":"Open PR \"Fix perf prep for release branches\" (#21916)"},{"Id":"397562353","IsPullRequest":true,"CreatedAt":"2019-01-09T21:06:57","Actor":"AndyAyersMS","Number":"21915","RawContent":null,"Title":"JIT: fix byte range used by RangeCheck","State":"open","Body":"Fix wrong byte range introduced in #21857.\r\n\r\nThanks to @jakobbotsch for spotting this.","Url":"https://github.com/dotnet/coreclr/pull/21915","RelatedDescription":"Open PR \"JIT: fix byte range used by RangeCheck\" (#21915)"},{"Id":"397500808","IsPullRequest":true,"CreatedAt":"2019-01-09T20:56:31","Actor":"adiaaida","Number":"21911","RawContent":null,"Title":"Fix perf-prep to pass the branch name","State":"closed","Body":"For the release branches, we need to specify the branch name when pulling down coreclr test artifacts, and not just pull down from master. This change modifies perf-prep.sh to allow us to specify the branch name, which we will then port to the release branches.","Url":"https://github.com/dotnet/coreclr/pull/21911","RelatedDescription":"Closed or merged PR \"Fix perf-prep to pass the branch name\" (#21911)"},{"Id":"397411143","IsPullRequest":true,"CreatedAt":"2019-01-09T20:38:26","Actor":"benaadams","Number":"21908","RawContent":null,"Title":"Reduce ExecutionContext register handling code size","State":"closed","Body":"Brought up in https://github.com/dotnet/coreclr/pull/21875#issuecomment-452363722\r\n\r\nRemove executing on the ExecutionContext with error handling out of flow to `RunReturningAnyException` methods; away from setting and restoring ExecutionContext to reduce the need for manual enregistering workarounds.\r\n\r\n```\r\nTotal bytes of diff: -1955 (-0.05% of base)\r\n    diff is an improvement.\r\n\r\nTotal byte diff includes 2397 bytes from reconciling methods\r\n        Base had    0 unique methods,        0 unique bytes\r\n        Diff had    4 unique methods,     2397 unique bytes\r\n\r\nTop file improvements by size (bytes):\r\n       -1955 : System.Private.CoreLib.dasm (-0.05% of base)\r\n\r\n1 total files with size differences (1 improved, 0 regressed), 0 unchanged.\r\n\r\nTop method regessions by size (bytes):\r\n        2074 : System.Private.CoreLib.dasm - AsyncMethodBuilderCore:RunReturningAnyException(byref):ref (0/25 methods)\r\n         174 : System.Private.CoreLib.dasm - ExecutionContext:RunReturningAnyException(ref,byref):ref (0/2 methods)\r\n          84 : System.Private.CoreLib.dasm - ExecutionContext:RunReturningAnyException(ref,ref):ref (0/1 methods)\r\n          65 : System.Private.CoreLib.dasm - ExecutionContext:RestoreChangedContextToThread(ref,ref,ref) (0/1 methods)\r\n\r\nTop method improvements by size (bytes):\r\n       -3974 : System.Private.CoreLib.dasm - AsyncMethodBuilderCore:Start(byref) (25 methods)\r\n        -168 : System.Private.CoreLib.dasm - ExecutionContext:RunInternal(ref,ref,byref) (2 methods)\r\n        -129 : System.Private.CoreLib.dasm - ExecutionContext:RunInternal(ref,ref,ref)\r\n         -81 : System.Private.CoreLib.dasm - ExecutionContext:RunFromThreadPoolDispatchLoop(ref,ref,ref,ref)\r\n\r\n8 total methods with size differences (4 improved, 4 regressed), 17548 unchanged.\r\n```\r\n\r\nhttps://github.com/dotnet/coreclr/pull/21908/files?w=1\r\n\r\n/cc @stephentoub @jkotas not sure if this is a help or hindrance?","Url":"https://github.com/dotnet/coreclr/pull/21908","RelatedDescription":"Closed or merged PR \"Reduce ExecutionContext register handling code size\" (#21908)"},{"Id":"397546276","IsPullRequest":true,"CreatedAt":"2019-01-09T20:18:56","Actor":"sandreenko","Number":"21914","RawContent":null,"Title":"Add an exclusion for hugeexpr1 on arm32 under `JitOptSensitive`.","State":"open","Body":"Fixes #21842 \r\n\r\nPTAL @BruceForstall, @echesakovMSFT.\r\ncc @dotnet/jit-contrib.","Url":"https://github.com/dotnet/coreclr/pull/21914","RelatedDescription":"Open PR \"Add an exclusion for hugeexpr1 on arm32 under `JitOptSensitive`.\" (#21914)"},{"Id":"397519505","IsPullRequest":true,"CreatedAt":"2019-01-09T19:26:03","Actor":"sbomer","Number":"21913","RawContent":null,"Title":"Work around OSX native dependency install issue","State":"open","Body":"This works around https://github.com/dotnet/coreclr/issues/21910 by running `brew update`.\r\n@chcosta @jashook @echesakov ","Url":"https://github.com/dotnet/coreclr/pull/21913","RelatedDescription":"Open PR \"Work around OSX native dependency install issue\" (#21913)"},{"Id":"397476966","IsPullRequest":false,"CreatedAt":"2019-01-09T17:31:32","Actor":"sbomer","Number":"21910","RawContent":null,"Title":"Intermittent failure to install native OSX dependencies in official builds","State":"open","Body":"See the failing OSX build in https://dnceng.visualstudio.com/internal/_build/results?buildId=68976.\r\nThe error is as follows, during a `brew install`:\r\n```\r\n2019-01-09T13:02:12.5324730Z /usr/local/Homebrew/Library/Homebrew/config.rb:39:in `initialize': no implicit conversion of nil into String (TypeError)\r\n2019-01-09T13:02:12.5325920Z \tfrom /usr/local/Homebrew/Library/Homebrew/config.rb:39:in `new'\r\n2019-01-09T13:02:12.5326790Z \tfrom /usr/local/Homebrew/Library/Homebrew/config.rb:39:in `<top (required)>'\r\n2019-01-09T13:02:12.5327660Z \tfrom /System/Library/Frameworks/Ruby.framework/Versions/2.3/usr/lib/ruby/2.3.0/rubygems/core_ext/kernel_require.rb:55:in `require'\r\n2019-01-09T13:02:12.5328500Z \tfrom /System/Library/Frameworks/Ruby.framework/Versions/2.3/usr/lib/ruby/2.3.0/rubygems/core_ext/kernel_require.rb:55:in `require'\r\n2019-01-09T13:02:12.5329490Z \tfrom /usr/local/Homebrew/Library/Homebrew/global.rb:25:in `<top (required)>'\r\n2019-01-09T13:02:12.5330250Z \tfrom /usr/local/Homebrew/Library/Homebrew/brew.rb:13:in `require_relative'\r\n2019-01-09T13:02:12.5330940Z \tfrom /usr/local/Homebrew/Library/Homebrew/brew.rb:13:in `<main>'\r\n```","Url":"https://github.com/dotnet/coreclr/issues/21910","RelatedDescription":"Open issue \"Intermittent failure to install native OSX dependencies in official builds\" (#21910)"},{"Id":"397476776","IsPullRequest":true,"CreatedAt":"2019-01-09T17:31:01","Actor":"benaadams","Number":"21909","RawContent":null,"Title":"Move restoring ExecutionContext out of generic methods","State":"open","Body":"From https://github.com/dotnet/coreclr/pull/21908#discussion_r246458369\r\n\r\n```\r\nTotal bytes of diff: -2322 (-0.06% of base)\r\n    diff is an improvement.\r\n\r\nTotal byte diff includes 65 bytes from reconciling methods\r\n        Base had    0 unique methods,        0 unique bytes\r\n        Diff had    1 unique methods,       65 unique bytes\r\n\r\nTop file improvements by size (bytes):\r\n       -2322 : System.Private.CoreLib.dasm (-0.06% of base)\r\n\r\n1 total files with size differences (1 improved, 0 regressed), 0 unchanged.\r\n\r\nTop method regessions by size (bytes):\r\n          65 : System.Private.CoreLib.dasm - ExecutionContext:RestoreChangedContextToThread(ref,ref,ref) (0/1 methods)\r\n\r\nTop method improvements by size (bytes):\r\n       -2042 : System.Private.CoreLib.dasm - AsyncMethodBuilderCore:Start(byref) (25 methods)\r\n        -170 : System.Private.CoreLib.dasm - ExecutionContext:RunInternal(ref,ref,byref) (2 methods)\r\n         -85 : System.Private.CoreLib.dasm - ExecutionContext:RunInternal(ref,ref,ref)\r\n         -50 : System.Private.CoreLib.dasm - ExecutionContext:RunFromThreadPoolDispatchLoop(ref,ref,ref,ref)\r\n         -40 : System.Private.CoreLib.dasm - ExecutionContext:RunForThreadPoolUnsafe(ref,ref,byref) (2 methods)\r\n\r\n6 total methods with size differences (5 improved, 1 regressed), 17550 unchanged.\r\n```\r\n\r\n/cc @jkotas @stephentoub ","Url":"https://github.com/dotnet/coreclr/pull/21909","RelatedDescription":"Open PR \"Move restoring ExecutionContext out of generic methods\" (#21909)"},{"Id":"397172862","IsPullRequest":true,"CreatedAt":"2019-01-09T17:23:33","Actor":"Dotnet-GitSync-Bot","Number":"21901","RawContent":null,"Title":"Mirror changes from dotnet/corert","State":"closed","Body":"This PR contains mirrored changes from dotnet/corert\n\n\n**Please REBASE this PR when merging**\n\n cc @marek-safar","Url":"https://github.com/dotnet/coreclr/pull/21901","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corert\" (#21901)"},{"Id":"397396988","IsPullRequest":false,"CreatedAt":"2019-01-09T14:32:26","Actor":"treenew","Number":"21907","RawContent":null,"Title":" dotnet 2.2.1 Exited with return code 2147943401","State":"open","Body":"I use nssm.exe run a windows server with dotnet.exe.\r\n```\r\n错误应用程序名称: dotnet.exe，版本: 2.2.27207.3，时间戳: 0x5c0ab1b7\r\n错误模块名称: coreclr.dll，版本: 4.6.27207.3，时间戳: 0x5c0a9582\r\n异常代码: 0xc00000fd\r\n错误偏移量: 0x00000000001135a8\r\n错误进程 ID: 0x1408\r\n错误应用程序启动时间: 0x01d4a8254eb45db1\r\n错误应用程序路径: C:\\Program Files\\dotnet\\dotnet.exe\r\n错误模块路径: C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\2.2.1\\coreclr.dll\r\n报告 ID: f10e597c-141a-11e9-90e7-d6b159e14e24\r\n```","Url":"https://github.com/dotnet/coreclr/issues/21907","RelatedDescription":"Open issue \" dotnet 2.2.1 Exited with return code 2147943401\" (#21907)"},{"Id":"397175402","IsPullRequest":true,"CreatedAt":"2019-01-09T10:53:36","Actor":"wfurt","Number":"21902","RawContent":null,"Title":"fix DateTime overflow on ARM32","State":"closed","Body":"fixes https://github.com/dotnet/corefx/issues/33965\r\n\r\nWith this fix all the runtime tests pass:\r\n```\r\n   Finished:    System.Runtime.Tests\r\n  === TEST EXECUTION SUMMARY ===\r\n     System.Runtime.Tests  Total: 31300, Errors: 0, Failed: 0, Skipped: 16, Time: 121.682s\r\n  /ssd/toweinfu/wfurt-corefx-arm/src/System.Runtime/tests\r\n```","Url":"https://github.com/dotnet/coreclr/pull/21902","RelatedDescription":"Closed or merged PR \"fix DateTime overflow on ARM32\" (#21902)"},{"Id":"397284604","IsPullRequest":false,"CreatedAt":"2019-01-09T09:37:05","Actor":"caozhiyuan","Number":"21906","RawContent":null,"Title":"[profiler api] definemethod generic method problem","State":"open","Body":"i use IMetaDataImport2 find a generic method (ExecuteAsyncImpl) of type ，and use this method props define a renamed method, and copy il to new method, but C# code reflect this generic method returntype info get\r\n\r\n```\r\nUnhandled Exception: System.BadImageFormatException: Trying to load incorrect format programs 。 (Exception from HRESULT: 0x8007000B)\r\n   at System.Signature.GetSignature(Void* pCorSig, Int32 cCorSig, RuntimeFieldHandleInternal fieldHandle, IRuntimeMethodInfo methodHandle, RuntimeType declaringType)\r\n   at System.Signature..ctor(IRuntimeMethodInfo methodHandle, RuntimeType declaringType)\r\n   at System.Reflection.RuntimeMethodInfo.get_Signature()\r\n   at System.Reflection.RuntimeMethodInfo.get_ReturnType()\r\n```\r\n\r\nC++ profiler sample code like this \r\n\r\n```\r\n       const LPCWSTR typeNameToProb = L\"StackExchange.Redis.ConnectionMultiplexer\";\r\n            mdTypeDef typeToProb;\r\n            hr = metadata_import->FindTypeDefByName(\r\n                typeNameToProb,\r\n                mdTokenNil,\r\n                &typeToProb);\r\n            RETURN_OK_IF_FAILED(hr);\r\n\r\n            LPCWSTR mdProbeNames[] = { L\"ExecuteAsyncImpl\",L\"ExecuteSyncImpl\", L\"Configure\" };\r\n            for (LPCWSTR smdProbeName : mdProbeNames)\r\n            {\r\n                mdMethodDef mdProb;\r\n                hr = metadata_import->FindMember(\r\n                    typeToProb,\r\n                    smdProbeName,\r\n                    sigFunctionProbe.data(),\r\n                    (DWORD)sigFunctionProbe.size(),\r\n                    &mdProb);\r\n                RETURN_OK_IF_FAILED(hr);\r\n\r\n                trace::Info(\"FindMember\"_W);\r\n\r\n                DWORD       pdwAttr;\r\n                PCCOR_SIGNATURE ppvSigBlob;\r\n                ULONG       pcbSigBlob;\r\n                ULONG       pulCodeRVA;\r\n                DWORD       pdwImplFlags;\r\n                hr = metadata_import->GetMethodProps(\r\n                    mdProb,\r\n                    nullptr,\t   // Put method's class here. \r\n                    nullptr,\t\t   // Put method's name here.  \r\n                    0,\t\t\t       // Size of szMethod buffer in wide chars.   \r\n                    nullptr,\t\t   // Put actual size here \r\n                    &pdwAttr,\t\t   // Put flags here.  \r\n                    &ppvSigBlob,       // [OUT] point to the blob value of meta data   \r\n                    &pcbSigBlob,\t   // [OUT] actual size of signature blob  \r\n                    &pulCodeRVA,\r\n                    &pdwImplFlags);\r\n                RETURN_OK_IF_FAILED(hr);\r\n\r\n                Info(pulCodeRVA);\r\n\r\n                const WSTRING prefixStr = \"Trace_\"_W;\r\n                WSTRING mdProbeWrapperName = prefixStr + WSTRING(smdProbeName);\r\n                mdMethodDef mdWrapperProb;\r\n                hr = pEmit->DefineMethod(\r\n                    typeToProb,\r\n                    mdProbeWrapperName.data(),\r\n                    pdwAttr,\r\n                    ppvSigBlob,\r\n                    pcbSigBlob,\r\n                    pulCodeRVA,\r\n                    pdwImplFlags,\r\n                    &mdWrapperProb);\r\n                RETURN_OK_IF_FAILED(hr);\r\n\r\n                trace::Info(\"DefineWrapperMethod\"_W);\r\n\r\n                LPCBYTE pMethodBytes;\r\n                ULONG pMethodSize;\r\n                hr = corProfilerInfo->GetILFunctionBody(moduleId, mdProb, &pMethodBytes, &pMethodSize);\r\n                RETURN_OK_IF_FAILED(hr);\r\n\r\n                trace::Info(\"GetILFunctionBody\"_W);\r\n\r\n                IMethodMalloc* pIMethodMalloc;\r\n                hr = corProfilerInfo->GetILFunctionBodyAllocator(moduleId, &pIMethodMalloc);\r\n                RETURN_OK_IF_FAILED(hr);\r\n\r\n                LPBYTE pNewMethodBytes = (LPBYTE)pIMethodMalloc->Alloc(pMethodSize);\r\n                pIMethodMalloc->Release();\r\n                memcpy(pNewMethodBytes, pMethodBytes, pMethodSize);\r\n                hr = corProfilerInfo->SetILFunctionBody(moduleId, mdWrapperProb, pNewMethodBytes);\r\n                RETURN_OK_IF_FAILED(hr);\r\n\r\n                trace::Info(\"SetILFunctionBody\"_W);\r\n            }            \r\n```\r\nno generic method (Trace_Configure) can reflect to run success, can anybody explain it?","Url":"https://github.com/dotnet/coreclr/issues/21906","RelatedDescription":"Open issue \"[profiler api] definemethod generic method problem\" (#21906)"},{"Id":"397269814","IsPullRequest":true,"CreatedAt":"2019-01-09T08:56:50","Actor":"dotnet-maestro-bot","Number":"21905","RawContent":null,"Title":"Update CoreClr, CoreFx, PgoData to preview-27309-02, preview.19059.7, master-20190109.7, respectively (master)","State":"open","Body":"/cc @dotnet/maestro-reviewers-core","Url":"https://github.com/dotnet/coreclr/pull/21905","RelatedDescription":"Open PR \"Update CoreClr, CoreFx, PgoData to preview-27309-02, preview.19059.7, master-20190109.7, respectively (master)\" (#21905)"},{"Id":"397184916","IsPullRequest":false,"CreatedAt":"2019-01-09T02:29:13","Actor":"VincentBu","Number":"21904","RawContent":null,"Title":"[x64] Test failed: System.Diagnostics.Tests.EventLogRecordTests.FormatDescription","State":"open","Body":"**Job:**\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/view/x64/job/jitstress/job/x64_checked_windows_nt_corefx_jitstressregs0x10/751/\r\n\r\n**Failed test:**\r\nSystem.Diagnostics.Tests.EventLogRecordTests.FormatDescription\r\n\r\n**Log:**\r\n```\r\nSystem.Diagnostics.Tests.EventLogRecordTests.FormatDescription [FAIL]\r\n        Assert.Throws() Failure\r\n        Expected: typeof(System.Diagnostics.Eventing.Reader.EventLogNotFoundException)\r\n        Actual:   (No exception was thrown)\r\n        Stack Trace:\r\n          D:\\j\\workspace\\x64_checked_w---1d068d3b\\_\\fx\\src\\System.Diagnostics.EventLog\\tests\\System\\Diagnostics\\Reader\\EventLogRecordTests.cs(44,0): at System.Diagnostics.Tests.EventLogRecordTests.FormatDescription()\r\n```","Url":"https://github.com/dotnet/coreclr/issues/21904","RelatedDescription":"Open issue \"[x64] Test failed: System.Diagnostics.Tests.EventLogRecordTests.FormatDescription\" (#21904)"},{"Id":"397129045","IsPullRequest":true,"CreatedAt":"2019-01-09T00:26:42","Actor":"dotnet-maestro-bot","Number":"21900","RawContent":null,"Title":"[automated] Merge branch 'release/2.1' => 'release/2.2'","State":"closed","Body":"I detected changes in the release/2.1 branch which have not been merged yet to release/2.2. I'm a robot and am configured to help you automatically keep release/2.2 up to date, so I've opened this PR.\r\n\r\nThis PR merges commits made on release/2.1 by the following committers:\n\n* @wtgodbe\n* @adiaaida\n* @DrewScoggins\n* @danmosemsft\r\n\r\n## Instructions for merging\r\n\r\nThis repo does not appear to allow merge commits from the GitHub UI, so you will need to update this PR with a merge commit before closing this PR.\r\n\r\n``` sh\r\ngit fetch\r\ngit checkout release/2.1\r\ngit pull --ff-only\r\ngit checkout release/2.2\r\ngit pull --ff-only\r\ngit merge --no-ff release/2.1\r\n# If there are merge conflicts, resolve them and then run git merge --continue to complete the merge\r\ngit push https://github.com/dotnet-maestro-bot/coreclr HEAD:merge/release/2.1-to-release/2.2\r\n```\r\n\r\n<details>\r\n<summary>or if you are using SSH</summary>\r\n\r\n```\r\ngit push git@github.com:dotnet-maestro-bot/coreclr HEAD:merge/release/2.1-to-release/2.2\r\n```\r\n\r\n</details>\r\n\r\n\r\nAfter PR checks are complete push the branch\r\n```\r\ngit push\r\n```\r\n\r\nPlease contact .NET Core Engineering if you have questions or issues.\r\nAlso, if this PR was generated incorrectly, help us fix it. See https://github.com/dotnet/arcade/blob/master/scripts/GitHubMergeBranches.ps1.\r\n","Url":"https://github.com/dotnet/coreclr/pull/21900","RelatedDescription":"Closed or merged PR \"[automated] Merge branch 'release/2.1' => 'release/2.2'\" (#21900)"},{"Id":"397125492","IsPullRequest":false,"CreatedAt":"2019-01-08T22:36:49","Actor":"pentp","Number":"21899","RawContent":null,"Title":"Bmi2.MultiplyNoFlags issues","State":"open","Body":"I have a working version of `decimal.DecCalc` which uses `MultiplyNoFlags` from #21480 in a [branch](https://github.com/pentp/coreclr/tree/decimal-mulx), but I discovered two issues.\r\n\r\nIf `MultiplyNoFlags` is called without having its result used, then it's assumed to be a no-op, even if the `low` part is used. While such use would be sub-optimal, it should still be valid.\r\n``` C#\r\nstatic unsafe ulong mulxbug(ulong a, ulong b)\r\n{\r\n\tulong r;\r\n\tX86.Bmi2.X64.MultiplyNoFlags(a, b, &r);\r\n\treturn r;\r\n}\r\n```\r\n``` asm\r\n       nop\r\n       xor      rax, rax\r\n       ret\r\n```\r\n\r\nThe second problem is that performance is increased only up to 3% for some methods, while others suffer a performance penalty up to 20%! This is primarily caused by forcing the low result to be written to memory and excessive temporary register use, compounded by forced zero-init of the locals (even with no `.locals init`) which affects all code paths of the function.\r\n``` C#\r\nstatic unsafe ulong mulx(ulong a, ulong b)\r\n{\r\n\tulong r;\r\n\treturn X86.Bmi2.X64.MultiplyNoFlags(a, b, &r) + r;\r\n}\r\n```\r\n``` asm\r\n; Assembly listing for method DecCalc:mulx(long,long):long\r\n; Emitting BLENDED_CODE for X64 CPU with AVX - Windows\r\n; optimized code\r\n; rsp based frame\r\n; partially interruptible\r\n; Final local variable assignments\r\n;\r\n;  V00 arg0         [V00,T00] (  3,  3   )    long  ->  rcx        \r\n;  V01 arg1         [V01,T01] (  3,  3   )    long  ->  [rsp+0x18]  \r\n;  V02 loc0         [V02    ] (  2,  2   )    long  ->  [rsp+0x00]   do-not-enreg[X] must-init addr-exposed ld-addr-op\r\n;# V03 OutArgs      [V03    ] (  1,  1   )  lclBlk ( 0) [rsp+0x00]   \"OutgoingArgSpace\"\r\n;\r\n; Lcl frame size = 8\r\n\r\nG_M42317_IG01:\r\n       push     rax\r\n       xor      rax, rax\r\n       mov      qword ptr [rsp], rax\r\n       mov      qword ptr [rsp+18H], rdx\r\n\r\nG_M42317_IG02:\r\n       lea      rax, bword ptr [rsp]\r\n       mov      rdx, rcx\r\n       mulx     rdx, r8, qword ptr [rsp+18H]\r\n       mov      qword ptr [rax], r8\r\n       mov      rax, rdx\r\n       add      rax, qword ptr [rsp]\r\n\r\nG_M42317_IG03:\r\n       add      rsp, 8\r\n       ret      \r\n\r\n; Total bytes of code 41, prolog size 7 for method DecCalc:mulx(long,long):long\r\n```\r\nWhile ideally this should be just:\r\n``` asm\r\n       mulx     rax, rcx, rcx\r\n       add      rax, rcx\r\n       ret      \r\n```","Url":"https://github.com/dotnet/coreclr/issues/21899","RelatedDescription":"Open issue \"Bmi2.MultiplyNoFlags issues\" (#21899)"},{"Id":"397123969","IsPullRequest":false,"CreatedAt":"2019-01-08T22:31:20","Actor":"sbomer","Number":"21898","RawContent":null,"Title":"Symbol publishing issues in coreclr official build","State":"open","Body":"corefx consumption of new coreclr official builds currently fails with issues related to missing symbol packages: https://github.com/dotnet/corefx/pull/34169.\r\nSome of the official builds seem not to be building symbol packages at all despite it working locally. We need to ensure that symbol packages are being correctly pushed to blob feeds and included in the BAR update so that downstream repos can consume them.","Url":"https://github.com/dotnet/coreclr/issues/21898","RelatedDescription":"Open issue \"Symbol publishing issues in coreclr official build\" (#21898)"},{"Id":"397122984","IsPullRequest":false,"CreatedAt":"2019-01-08T22:28:06","Actor":"sbomer","Number":"21897","RawContent":null,"Title":"Enable transport packages for core-setup","State":"open","Body":"With our new official builds, I turned off transport packages because it seems we should only publish these assets once and ask core-setup to consume them from the official packages we publish anyway. However, transport packages need to be turned on for the moment to unblock core-setup builds.","Url":"https://github.com/dotnet/coreclr/issues/21897","RelatedDescription":"Open issue \"Enable transport packages for core-setup\" (#21897)"}],"ResultType":"GitHubIssue"},"CLI-Issues":{"Issues":[{"Id":"397649585","IsPullRequest":false,"CreatedAt":"2019-01-10T02:46:46","Actor":"dsplaisted","Number":"10581","RawContent":null,"Title":"Update targeting pack asset resolution to handle assets from \"real\" targeting packs","State":"open","Body":"With https://github.com/dotnet/sdk/pull/2774, we are resolving assets from \"targeting packs\", but we are using the existing packages (such as Microsoft.NETCore.App) as the targeting packs.  We plan to use different packages with different layouts as the real targeting packs.  Along with that, we will need to update the asset resolution logic to account for this.\r\n\r\nSee [dotnet/designs#50](https://github.com/dotnet/designs/pull/50/files?short_path=ebf265d#diff-ebf265d0476041dd8cab82fa24ab5b0e) for the current design for the targeting pack layout.\r\n\r\nItems that should be resolved from targeting packs:\r\n\r\n- Assembly references\r\n- Platform manifests for conflict resolution\r\n- `PackageConflictPreferredPackages`\r\n- Possibly, `PackageConflictOverrides` items","Url":"https://github.com/dotnet/cli/issues/10581","RelatedDescription":"Open issue \"Update targeting pack asset resolution to handle assets from \"real\" targeting packs\" (#10581)"},{"Id":"397586042","IsPullRequest":true,"CreatedAt":"2019-01-10T00:26:12","Actor":"dotnet-bot","Number":"10579","RawContent":null,"Title":"Merge release/2.1.5xx to release/2.2.1xx","State":"closed","Body":"\nThis is an automatically generated pull request from release/2.1.5xx into release/2.2.1xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1.5xx-to-release/2.2.1xx\ngit reset --hard upstream/release/2.2.1xx\ngit merge upstream/release/2.1.5xx\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.1.5xx-to-release/2.2.1xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/cli/pull/10579","RelatedDescription":"Closed or merged PR \"Merge release/2.1.5xx to release/2.2.1xx\" (#10579)"},{"Id":"397570591","IsPullRequest":true,"CreatedAt":"2019-01-09T22:29:35","Actor":"livarcocc","Number":"10578","RawContent":null,"Title":"Merge release/2.1.6xx into release/2.2.2xx","State":"closed","Body":"","Url":"https://github.com/dotnet/cli/pull/10578","RelatedDescription":"Closed or merged PR \"Merge release/2.1.6xx into release/2.2.2xx\" (#10578)"},{"Id":"397586057","IsPullRequest":true,"CreatedAt":"2019-01-09T22:17:09","Actor":"dotnet-bot","Number":"10580","RawContent":null,"Title":"Merge release/2.2.1xx to release/2.2.2xx","State":"open","Body":"\nThis is an automatically generated pull request from release/2.2.1xx into release/2.2.2xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.2.1xx-to-release/2.2.2xx\ngit reset --hard upstream/release/2.2.2xx\ngit merge upstream/release/2.2.1xx\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.2.1xx-to-release/2.2.2xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/cli/pull/10580","RelatedDescription":"Open PR \"Merge release/2.2.1xx to release/2.2.2xx\" (#10580)"},{"Id":"397524367","IsPullRequest":true,"CreatedAt":"2019-01-09T21:59:49","Actor":"mmitche","Number":"10577","RawContent":null,"Title":"Add a darc dependency for Microsoft.TemplateEngine.Cli","State":"closed","Body":"- If this PR should not run tests please add text \"skip[REMOVE_THIS]ci[REMOVE_THIS]please\" (remove the marked text, no quotes).\r\n- Please add description for changes you are making.\r\n- If there is an issue related to this PR, please add the reference.\r\n","Url":"https://github.com/dotnet/cli/pull/10577","RelatedDescription":"Closed or merged PR \"Add a darc dependency for Microsoft.TemplateEngine.Cli\" (#10577)"},{"Id":"397029847","IsPullRequest":true,"CreatedAt":"2019-01-09T21:36:16","Actor":"nugetlurker","Number":"10559","RawContent":null,"Title":"Insert NuGet Build 5.0.0-preview1.5754 into cli","State":"closed","Body":"Insert NuGet Build 5.0.0-preview1.5754 into cli release/2.2.2xx branch","Url":"https://github.com/dotnet/cli/pull/10559","RelatedDescription":"Closed or merged PR \"Insert NuGet Build 5.0.0-preview1.5754 into cli\" (#10559)"},{"Id":"397029870","IsPullRequest":true,"CreatedAt":"2019-01-09T21:35:46","Actor":"nugetlurker","Number":"10560","RawContent":null,"Title":"Insert NuGet Build 5.0.0-preview1.5754 into cli","State":"closed","Body":"Insert NuGet Build 5.0.0-preview1.5754 into cli release/2.1.6xx branch","Url":"https://github.com/dotnet/cli/pull/10560","RelatedDescription":"Closed or merged PR \"Insert NuGet Build 5.0.0-preview1.5754 into cli\" (#10560)"},{"Id":"397362465","IsPullRequest":true,"CreatedAt":"2019-01-09T18:03:50","Actor":"dotnet-maestro[bot]","Number":"10575","RawContent":null,"Title":"Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19058.2\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/10575","RelatedDescription":"Closed or merged PR \"Update dependencies from dotnet/arcade\" (#10575)"},{"Id":"397199669","IsPullRequest":true,"CreatedAt":"2019-01-09T17:50:20","Actor":"livarcocc","Number":"10570","RawContent":null,"Title":"Merge release/2.2.1xx to release/2.2.2xx","State":"closed","Body":"","Url":"https://github.com/dotnet/cli/pull/10570","RelatedDescription":"Closed or merged PR \"Merge release/2.2.1xx to release/2.2.2xx\" (#10570)"},{"Id":"397362609","IsPullRequest":true,"CreatedAt":"2019-01-09T17:32:44","Actor":"dotnet-maestro[bot]","Number":"10576","RawContent":null,"Title":"Update dependencies from dotnet/sdk","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/sdk\r\n\r\n- Microsoft.NET.Sdk - 3.0.100-preview.19058.3\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/10576","RelatedDescription":"Closed or merged PR \"Update dependencies from dotnet/sdk\" (#10576)"},{"Id":"397200126","IsPullRequest":true,"CreatedAt":"2019-01-09T17:32:16","Actor":"livarcocc","Number":"10572","RawContent":null,"Title":"Updating branding to 2.2.103","State":"closed","Body":"","Url":"https://github.com/dotnet/cli/pull/10572","RelatedDescription":"Closed or merged PR \"Updating branding to 2.2.103\" (#10572)"},{"Id":"397199931","IsPullRequest":true,"CreatedAt":"2019-01-09T17:32:03","Actor":"livarcocc","Number":"10571","RawContent":null,"Title":"Updating branding to 2.1.504","State":"closed","Body":"","Url":"https://github.com/dotnet/cli/pull/10571","RelatedDescription":"Closed or merged PR \"Updating branding to 2.1.504\" (#10571)"},{"Id":"397340135","IsPullRequest":true,"CreatedAt":"2019-01-09T17:31:29","Actor":"dotnet-bot","Number":"10574","RawContent":null,"Title":"Merge release/2.2.1xx to release/2.2.2xx","State":"closed","Body":"\nThis is an automatically generated pull request from release/2.2.1xx into release/2.2.2xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.2.1xx-to-release/2.2.2xx\ngit reset --hard upstream/release/2.2.2xx\ngit merge upstream/release/2.2.1xx\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.2.1xx-to-release/2.2.2xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/cli/pull/10574","RelatedDescription":"Closed or merged PR \"Merge release/2.2.1xx to release/2.2.2xx\" (#10574)"},{"Id":"397099180","IsPullRequest":false,"CreatedAt":"2019-01-09T15:26:38","Actor":"tremblaysimon","Number":"10563","RawContent":null,"Title":"dotnet pack doesn't care of VersionPrefix and VersionSuffix properties with version 2.1.502","State":"closed","Body":"## Steps to reproduce\r\n\r\n1. Get dotnet CLI version 2.1.502\r\n\r\n2. Create a new project PROJECT_NAME and add in csproj VersionPrefix and/or VersionSuffix properties.\r\n\r\nExample:\r\n\r\n```\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <TargetFramework>netstandard2.0</TargetFramework>\r\n    <VersionPrefix>1.2.3</VersionPrefix>\r\n  </PropertyGroup>\r\n\r\n</Project>\r\n```\r\n3. Run dotnet pack PROJECT_NAME\r\n\r\n\r\n## Expected  behavior\r\n\r\nCreate a new nuget package PROJECT_NAME.**1.2.3**.nupkg\r\n\r\n## Actual behavior\r\n\r\nIt creates a new nuget package PROJECT_NAME.**1.0.0**.nupkg\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.1.502\r\n Commit:    c74ce8f29f\r\n\r\nRuntime Environment:\r\n OS Name:     ubuntu\r\n OS Version:  18.04\r\n OS Platform: Linux\r\n RID:         ubuntu.18.04-x64\r\n Base Path:   /usr/share/dotnet/sdk/2.1.502/\r\n\r\nHost (useful for support):\r\n  Version: 2.1.6\r\n  Commit:  3f4f8eebd8\r\n\r\n.NET Core SDKs installed:\r\n  2.1.502 [/usr/share/dotnet/sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [/usr/share/dotnet/shared/Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [/usr/share/dotnet/shared/Microsoft.NETCore.App]\r\n\r\n```\r\n\r\nI try to get the official documentation about these properties (VersionPrefix, VersionSuffix, Version, PackageVersion) but I didn't find anything except that unofficial link to understand how dotnet pack is working with these properties: https://andrewlock.net/version-vs-versionsuffix-vs-packageversion-what-do-they-all-mean/#version \r\n\r\nIt works with version 2.1.402 or version 2.1.403.\r\n\r\nI don't have nuget CLI installed on my desktop.\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/10563","RelatedDescription":"Closed issue \"dotnet pack doesn't care of VersionPrefix and VersionSuffix properties with version 2.1.502\" (#10563)"},{"Id":"397205481","IsPullRequest":true,"CreatedAt":"2019-01-09T04:17:12","Actor":"JadynWong","Number":"10573","RawContent":null,"Title":"Change the wrong word LocalizableStrings.zh-Hans.xlf","State":"open","Body":"Change the wrong word\r\n`推出遥测` => '退出遥测'","Url":"https://github.com/dotnet/cli/pull/10573","RelatedDescription":"Open PR \"Change the wrong word LocalizableStrings.zh-Hans.xlf\" (#10573)"},{"Id":"397174423","IsPullRequest":true,"CreatedAt":"2019-01-09T03:36:42","Actor":"dotnet-bot","Number":"10569","RawContent":null,"Title":"Merge release/2.1.5xx to release/2.2.1xx","State":"closed","Body":"\nThis is an automatically generated pull request from release/2.1.5xx into release/2.2.1xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1.5xx-to-release/2.2.1xx\ngit reset --hard upstream/release/2.2.1xx\ngit merge upstream/release/2.1.5xx\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.1.5xx-to-release/2.2.1xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/cli/pull/10569","RelatedDescription":"Closed or merged PR \"Merge release/2.1.5xx to release/2.2.1xx\" (#10569)"},{"Id":"397039931","IsPullRequest":true,"CreatedAt":"2019-01-09T03:36:24","Actor":"livarcocc","Number":"10561","RawContent":null,"Title":"Merge release/2.2.1xx-msrc into release/2.2.1xx","State":"closed","Body":"","Url":"https://github.com/dotnet/cli/pull/10561","RelatedDescription":"Closed or merged PR \"Merge release/2.2.1xx-msrc into release/2.2.1xx\" (#10561)"},{"Id":"397153661","IsPullRequest":true,"CreatedAt":"2019-01-09T02:30:16","Actor":"livarcocc","Number":"10567","RawContent":null,"Title":"Merge release/2.1.5xx into release/2.1.6xx","State":"closed","Body":"","Url":"https://github.com/dotnet/cli/pull/10567","RelatedDescription":"Closed or merged PR \"Merge release/2.1.5xx into release/2.1.6xx\" (#10567)"},{"Id":"397080921","IsPullRequest":true,"CreatedAt":"2019-01-09T02:29:35","Actor":"dotnet-maestro-bot","Number":"10562","RawContent":null,"Title":"Update aspnet, aspnet, coresetup to rtm-35537, rtm-35537, 2.1.0, respectively (release/2.2.1xx)","State":"closed","Body":"/cc @dotnet/dotnet-cli","Url":"https://github.com/dotnet/cli/pull/10562","RelatedDescription":"Closed or merged PR \"Update aspnet, aspnet, coresetup to rtm-35537, rtm-35537, 2.1.0, respectively (release/2.2.1xx)\" (#10562)"},{"Id":"397158501","IsPullRequest":false,"CreatedAt":"2019-01-09T01:13:54","Actor":"ArgoZhang","Number":"10568","RawContent":null,"Title":"duplicate  targetframework attribute in multiple target enabled live unit testing","State":"closed","Body":"## Steps to reproduce\r\n1. create new project modify proj file\r\n    <TargetFrameworks>netstandard2.0;net40</TargetFrameworks>\r\ncoding some class ......\r\n \r\n2. create UnitTestProject use xunit\r\ncoding some test method ......\r\n\r\n3. Configure live unit test option\r\nTools -> Options... Choose Live Unit Testing item -> General\r\nset logging level -> Verbose\r\n\r\n4. Start live unit testing\r\n Test-> Live Unit Testing -> Start\r\n\r\n## Expected  behavior\r\nlive unit testing running successfully.\r\n\r\n## Actual behavior\r\nlive unit testing build fail.\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n[08:52:17.377 Verbose] - BuildManager - D:\\src\\Longbow\\Longbow.Utility2010\\Longbow.Security.Cryptography\\Longbow.Security.Cryptography.csproj(0,0): error MSB4057: The target \"GetTargetPath\" does not exist in the project.\r\n[08:52:19.963 Verbose] - BuildManager - obj\\Debug\\netstandard2.0\\Longbow.Security.Cryptography.AssemblyInfo.cs(14,12): error CS0579: Duplicate 'System.Reflection.AssemblyCompanyAttribute' attribute\r\n[08:52:19.963 Verbose] - BuildManager - obj\\Debug\\netstandard2.0\\Longbow.Security.Cryptography.AssemblyInfo.cs(15,12): error CS0579: Duplicate 'System.Reflection.AssemblyConfigurationAttribute' attribute\r\n[08:52:19.963 Verbose] - BuildManager - obj\\Debug\\netstandard2.0\\Longbow.Security.Cryptography.AssemblyInfo.cs(16,12): error CS0579: Duplicate 'System.Reflection.AssemblyDescriptionAttribute' attribute\r\n[08:52:19.963 Verbose] - BuildManager - obj\\Debug\\netstandard2.0\\Longbow.Security.Cryptography.AssemblyInfo.cs(17,12): error CS0579: Duplicate 'System.Reflection.AssemblyFileVersionAttribute' attribute\r\n[08:52:19.963 Verbose] - BuildManager - obj\\Debug\\netstandard2.0\\Longbow.Security.Cryptography.AssemblyInfo.cs(18,12): error CS0579: Duplicate 'System.Reflection.AssemblyInformationalVersionAttribute' attribute\r\n[08:52:19.963 Verbose] - BuildManager - obj\\Debug\\netstandard2.0\\Longbow.Security.Cryptography.AssemblyInfo.cs(19,12): error CS0579: Duplicate 'System.Reflection.AssemblyProductAttribute' attribute\r\n[08:52:19.963 Verbose] - BuildManager - obj\\Debug\\netstandard2.0\\Longbow.Security.Cryptography.AssemblyInfo.cs(20,12): error CS0579: Duplicate 'System.Reflection.AssemblyTitleAttribute' attribute\r\n[08:52:19.963 Verbose] - BuildManager - obj\\Debug\\netstandard2.0\\Longbow.Security.Cryptography.AssemblyInfo.cs(21,12): error CS0579: Duplicate 'System.Reflection.AssemblyVersionAttribute' attribute\r\n[08:52:19.964 Verbose] - BuildManager - D:\\src\\Longbow\\Longbow.Utility2010\\.vs\\Longbow.Utility2010\\lut\\0\\i\\Longbow.Security.Cryptography\\Debug\\netstandard2.0\\Longbow.Security.Cryptography.AssemblyInfo.cs(14,12): error CS0579: Duplicate 'System.Reflection.AssemblyCompanyAttribute' attribute\r\n[08:52:19.964 Verbose] - BuildManager - D:\\src\\Longbow\\Longbow.Utility2010\\.vs\\Longbow.Utility2010\\lut\\0\\i\\Longbow.Security.Cryptography\\Debug\\netstandard2.0\\Longbow.Security.Cryptography.AssemblyInfo.cs(15,12): error CS0579: Duplicate 'System.Reflection.AssemblyConfigurationAttribute' attribute\r\n[08:52:19.964 Verbose] - BuildManager - D:\\src\\Longbow\\Longbow.Utility2010\\.vs\\Longbow.Utility2010\\lut\\0\\i\\Longbow.Security.Cryptography\\Debug\\netstandard2.0\\Longbow.Security.Cryptography.AssemblyInfo.cs(16,12): error CS0579: Duplicate 'System.Reflection.AssemblyDescriptionAttribute' attribute\r\n[08:52:19.964 Verbose] - BuildManager - D:\\src\\Longbow\\Longbow.Utility2010\\.vs\\Longbow.Utility2010\\lut\\0\\i\\Longbow.Security.Cryptography\\Debug\\netstandard2.0\\Longbow.Security.Cryptography.AssemblyInfo.cs(17,12): error CS0579: Duplicate 'System.Reflection.AssemblyFileVersionAttribute' attribute\r\n[08:52:19.964 Verbose] - BuildManager - D:\\src\\Longbow\\Longbow.Utility2010\\.vs\\Longbow.Utility2010\\lut\\0\\i\\Longbow.Security.Cryptography\\Debug\\netstandard2.0\\Longbow.Security.Cryptography.AssemblyInfo.cs(18,12): error CS0579: Duplicate 'System.Reflection.AssemblyInformationalVersionAttribute' attribute\r\n[08:52:19.964 Verbose] - BuildManager - D:\\src\\Longbow\\Longbow.Utility2010\\.vs\\Longbow.Utility2010\\lut\\0\\i\\Longbow.Security.Cryptography\\Debug\\netstandard2.0\\Longbow.Security.Cryptography.AssemblyInfo.cs(19,12): error CS0579: Duplicate 'System.Reflection.AssemblyProductAttribute' attribute\r\n[08:52:19.964 Verbose] - BuildManager - D:\\src\\Longbow\\Longbow.Utility2010\\.vs\\Longbow.Utility2010\\lut\\0\\i\\Longbow.Security.Cryptography\\Debug\\netstandard2.0\\Longbow.Security.Cryptography.AssemblyInfo.cs(20,12): error CS0579: Duplicate 'System.Reflection.AssemblyTitleAttribute' attribute\r\n[08:52:19.964 Verbose] - BuildManager - D:\\src\\Longbow\\Longbow.Utility2010\\.vs\\Longbow.Utility2010\\lut\\0\\i\\Longbow.Security.Cryptography\\Debug\\netstandard2.0\\Longbow.Security.Cryptography.AssemblyInfo.cs(21,12): error CS0579: Duplicate 'System.Reflection.AssemblyVersionAttribute' attribute\r\n[08:52:21.641 Info] - BuildManager - Build completed (failed).\r\n\r\nBTW:\r\nif set  <TargetFrameworks>netstandard2.0;net40</TargetFrameworks> as  <TargetFramework>netstandard2.0</TargetFramework> everythings will be ok.\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/10568","RelatedDescription":"Closed issue \"duplicate  targetframework attribute in multiple target enabled live unit testing\" (#10568)"},{"Id":"397128331","IsPullRequest":true,"CreatedAt":"2019-01-09T00:32:47","Actor":"livarcocc","Number":"10565","RawContent":null,"Title":"Updating Rolsyn to 3.0.0-beta2-19055-10","State":"closed","Body":"This matches the version inserted into VS.\r\n","Url":"https://github.com/dotnet/cli/pull/10565","RelatedDescription":"Closed or merged PR \"Updating Rolsyn to 3.0.0-beta2-19055-10\" (#10565)"},{"Id":"397112317","IsPullRequest":true,"CreatedAt":"2019-01-09T00:02:45","Actor":"dotnet-maestro-bot","Number":"10564","RawContent":null,"Title":"Update aspnet, coresetup to servicing-31150, preview1-26216-03, respectively (release/2.1.5xx)","State":"closed","Body":"/cc @dotnet/dotnet-cli","Url":"https://github.com/dotnet/cli/pull/10564","RelatedDescription":"Closed or merged PR \"Update aspnet, coresetup to servicing-31150, preview1-26216-03, respectively (release/2.1.5xx)\" (#10564)"},{"Id":"397132842","IsPullRequest":false,"CreatedAt":"2019-01-08T23:03:46","Actor":"peterhuene","Number":"10566","RawContent":null,"Title":"Limit default apphost feature to netcoreapp3.0","State":"open","Body":"## Steps to reproduce\r\n\r\nUsing a 3.0 SDK:\r\n\r\n1. `dotnet new console`.\r\n2. Change the `TargetFramework` property to `netcoreapp2.1`.\r\n3. Build.\r\n\r\n## Expected  behavior\r\n\r\nThere should be no default apphost present.\r\n\r\n## Actual behavior\r\n\r\nA default apphost (.exe) is created.\r\n\r\nThere are two reasons why this is undesirable:\r\n\r\n1. The default apphost feature was implemented in such a way that impacts restore; namely that a restore for the current SDK's platform occurs so the apphost package appears in the assets graph.  This has a performance impact on dotnet commands that do a restore and unnecessarily pollutes the assets graph.  The hope was that we would support \"download only\" packages that don't affect the restore operation and assets graph.  This feature is coming online to support framework and targeting packs, but is limited to `netcoreapp3.0+`.\r\n\r\n2. Users that upgrade their SDK, even for major SDK releases, should reasonably expect no new build outputs when their target framework has not changed.  This is the reason we limit the \"copy local dependencies on build\" feature to `netcoreapp3.0+`.\r\n\r\n## Environment data\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview-009812\r\n Commit:    e3abf6e935\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17763\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview-009812\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview-27122-01\r\n  Commit:  00c5c8bc40\r\n\r\n.NET Core SDKs installed:\r\n  2.1.402 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.403 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.500 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview-009793 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview-009812 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview-18577-0031 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview-18579-0056 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview-27122-01 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-alpha-27122-4 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-alpha-27128-4 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/10566","RelatedDescription":"Open issue \"Limit default apphost feature to netcoreapp3.0\" (#10566)"},{"Id":"396897348","IsPullRequest":true,"CreatedAt":"2019-01-08T18:10:16","Actor":"dotnet-maestro[bot]","Number":"10558","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/sdk\r\n\r\n- Microsoft.NET.Sdk - 3.0.100-preview.19057.1\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/10558","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#10558)"},{"Id":"396890783","IsPullRequest":false,"CreatedAt":"2019-01-08T17:46:30","Actor":"fromorbonia","Number":"10556","RawContent":null,"Title":"Different build behaviour for .net core web apps between local VS IDE and msbuild","State":"closed","Body":"## Steps to reproduce\r\nPublishing a .NET Core web application with a FileSystem profile under VS2017 IDE creates a diretory with an EXE (e.g. MyProject.exe)\r\nThere is a Jenkins build server running msbuild, which correctly picks up the publish profile that was used and configured locally.\r\n\r\n## Expected  behavior\r\nI would expect the build server to also create exactly the same set of files (specifically in this case it should include MyProject.exe).\r\n\r\n## Actual behavior\r\nThe publish folder contains an apphost.exe and MyProject.dll, but no EXE. \r\nThe web.config file created actually references MyProject.exe (in processPath), and of course the web site doesn't not run on IIS.\r\n\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\nFor the local VS2017 IDE this is:\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.1.401\r\n Commit:    91b1c13032\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  6.1.7601\r\n OS Platform: Windows\r\n RID:         win7-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.401\\\r\n\r\nHost (useful for support):\r\n  Version: 2.1.3\r\n  Commit:  124038c13e\r\n\r\n.NET Core SDKs installed:\r\n  2.1.101 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.202 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.401 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.0.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nFor the Jenkins build server:\r\n12:53:26 .NET Core SDK (reflecting any global.json):\r\n12:53:26  Version:   2.1.502\r\n12:53:26  Commit:    c74ce8f29f\r\n12:53:26 \r\n12:53:26 Runtime Environment:\r\n12:53:26  OS Name:     Windows\r\n12:53:26  OS Version:  10.0.14393\r\n12:53:26  OS Platform: Windows\r\n12:53:26  RID:         win10-x64\r\n12:53:26  Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.502\\\r\n12:53:26 \r\n12:53:26 Host (useful for support):\r\n12:53:26   Version: 2.1.6\r\n12:53:26   Commit:  3f4f8eebd8\r\n12:53:26 \r\n12:53:26 .NET Core SDKs installed:\r\n12:53:26   2.1.401 [C:\\Program Files\\dotnet\\sdk]\r\n12:53:26   2.1.500 [C:\\Program Files\\dotnet\\sdk]\r\n12:53:26   2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n12:53:26 \r\n12:53:26 .NET Core runtimes installed:\r\n12:53:26   Microsoft.AspNetCore.All 2.1.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n12:53:26   Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n12:53:26   Microsoft.AspNetCore.App 2.1.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n12:53:26   Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n12:53:26   Microsoft.NETCore.App 2.1.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n12:53:26   Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/10556","RelatedDescription":"Closed issue \"Different build behaviour for .net core web apps between local VS IDE and msbuild\" (#10556)"},{"Id":"396862570","IsPullRequest":false,"CreatedAt":"2019-01-08T17:44:07","Actor":"DGuidi","Number":"10555","RawContent":null,"Title":"dotnet build don't perform \"restore\" anymore","State":"closed","Body":"## Steps to reproduce\r\n\r\n1. Using Visual Studio 2017, clear nuget cache\r\n![screenshot_44](https://user-images.githubusercontent.com/216627/50827257-48b17400-133e-11e9-9117-81d35a1ae7fa.png) or delete manually `X:\\Users\\me\\.nuget` folder\r\n1. execute `dotnet build MySolution.sln` from a command line\r\n\r\n## Expected  behavior\r\nnuget cache restored correctly - see [docs](https://docs.microsoft.com/it-it/dotnet/core/tools/dotnet-build?tabs=netcore2x) - and build successfully completed\r\n\r\n## Actual behavior\r\nnuget cache not restored correctly and build errors. \r\n\r\n## Additional info\r\nVisual Studio 2017 build works correctly, and after vs build all subsequent command line builds works as expected.  \r\nI've verified this issue also with a colleague of mine, and I'm pretty sure that sdk 2.1 worked.\r\n\r\n\r\n## Workaround\r\nusing `dotnet build --force` instead of regular `dotnet build` fixed problem\r\n\r\n## Environment data\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.101\r\n Commit:    236713b0b7\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17763\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.101\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.201 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.202 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.302 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.400 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.401 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.402 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.403 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.500 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.101 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.0.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.3-servicing-26724-03 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n```\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/10555","RelatedDescription":"Closed issue \"dotnet build don't perform \"restore\" anymore\" (#10555)"},{"Id":"396897300","IsPullRequest":true,"CreatedAt":"2019-01-08T17:41:17","Actor":"dotnet-maestro[bot]","Number":"10557","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19057.6\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/10557","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#10557)"},{"Id":"396423791","IsPullRequest":false,"CreatedAt":"2019-01-08T02:24:13","Actor":"YunWeiaa","Number":"10553","RawContent":null,"Title":"For .NET Core 3.0, create a .net core ASP.NET Core web/webapi/mvc project via CLI, dotnet run failed with error: The specified framework 'Microsoft.NETCore.App', version '3.0.0-preview-27219-3' was not found...","State":"closed","Body":"## Steps to reproduce\r\nUsing CLI : Create a .net core ASP.NET Core web/Web API/Web App (Model-View-Controller) project\r\n\r\n## Expected  behavior\r\nDotnet restore and build and run succeed without errors or warnings.\r\n\r\n## Actual behavior\r\ndotnet new web/webapi/mvc --> succeed\r\ndotnet restore/build -->succeed\r\ndotnet run -->failed with error: The specified framework 'Microsoft.NETCore.App', version '3.0.0-preview-27219-3' was not found...\r\n\r\n![3](https://user-images.githubusercontent.com/33921754/50762120-1143b880-12a7-11e9-9bae-ac3e7d9e2041.PNG)\r\n**Note**: Add localfeed package source https://dotnet.myget.org/F/dotnet-core/api/v3/index.json or https://dotnetfeed.blob.core.windows.net/3-0/20181121-01/index.json doesn’t work.\r\n## Environment data\r\n`dotnet --info` output:\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview-010006\r\n Commit:    166534d9bf\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview-010006\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview-27218-01\r\n  Commit:  d40b87f29d\r\n\r\n.NET Core SDKs installed:\r\n  2.1.600-preview-009426 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.200-preview-009648 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview-010000 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview-010006 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview-18579-0056 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview-18630-0234 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview-27218-01 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-alpha-27220-11 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/10553","RelatedDescription":"Closed issue \"For .NET Core 3.0, create a .net core ASP.NET Core web/webapi/mvc project via CLI, dotnet run failed with error: The specified framework 'Microsoft.NETCore.App', version '3.0.0-preview-27219-3' was not found...\" (#10553)"},{"Id":"396389137","IsPullRequest":false,"CreatedAt":"2019-01-07T18:24:17","Actor":"JiahongJin1","Number":"10552","RawContent":null,"Title":"Can publish a framework-dependent application with application host but without RID","State":"closed","Body":"## Steps to reproduce\r\n1.\tRun `dotnet new console`.\r\n2.\tRun `dotnet publish -p:UseAppHost=true`.\r\n\r\n## Expected  behavior\r\nAn error should be printed from the SDK informing you that a `RuntimeIdentifier` must be specified.\r\n\r\n## Actual behavior\r\nIt runs successfully.\r\n\r\n![cli](https://user-images.githubusercontent.com/46206739/50755362-bbb1e080-1293-11e9-8975-1f5bc2605c86.PNG)\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview-010006\r\n Commit:    166534d9bf\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview-010006\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview-27218-01\r\n  Commit:  d40b87f29d\r\n\r\n.NET Core SDKs installed:\r\n  2.1.600-preview-009426 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.200-preview-009648 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview-010006 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview-18630-0234 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview-27218-01 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-alpha-27220-11 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/10552","RelatedDescription":"Closed issue \"Can publish a framework-dependent application with application host but without RID\" (#10552)"},{"Id":"396430219","IsPullRequest":false,"CreatedAt":"2019-01-07T18:06:45","Actor":"tmds","Number":"10554","RawContent":null,"Title":"latest 3.0 sdk has issue resolving project argument","State":"closed","Body":"## Steps to reproduce\r\n\r\n```\r\ncd /tmp\r\nmkdir lib\r\ncd lib\r\ndotnet new classlib\r\ncd ..\r\ndotnet build lib\r\n```\r\n\r\n## Expected  behavior\r\n\r\nlib project should build\r\n\r\n## Actual behavior\r\n\r\nproject isn't properly resolved, note: `lib/lib/lib.csproj`\r\n```\r\n/tmp/lib/lib/lib.csproj : error MSB4025: The project file could not be loaded. Could not find a part of the path '/tmp/lib/lib/lib.csproj'.\r\n```\r\n## Additional info\r\n\r\nThis regression occurs on 3.0 daily since 5 Dec.","Url":"https://github.com/dotnet/cli/issues/10554","RelatedDescription":"Closed issue \"latest 3.0 sdk has issue resolving project argument\" (#10554)"}],"ResultType":"GitHubIssue"},"Standard-Issues":{"Issues":[{"Id":"397146216","IsPullRequest":false,"CreatedAt":"2019-01-08T23:57:44","Actor":"dsplaisted","Number":"1051","RawContent":null,"Title":"Create targeting pack for .NET Standard","State":"open","Body":"For .NET Core 3.0, we expect to separate targeting packs, which contain the assets needed at build time when targeting .NET Core 3.0 (for example, reference assemblies and intellisense documentation) from \"runtime packs\", which will include the platform-specific runtime components for .NET Core 3.  See dotnet/cli#10006, and [dotnet/designs#50](https://github.com/dotnet/designs/pull/50/files?short_path=ebf265d#diff-ebf265d0476041dd8cab82fa24ab5b0e)\r\n\r\nWe will have targeting pack for each shared framework (.NET Core, ASP.NET Core, and WindowsDesktop), as well as for .NET Standard.  This issue tracks the work required a .NET Standard targeting pack.  Ideally, we should create targeting packs for both .NET Standard 2.1 and 2.0.\r\n\r\nThe work required includes:\r\n\r\n- A new NuGet package including the targeting pack assets.  This should include the reference assemblies, intellisense documentation, and platform manifest file.  The current straw man proposal for the package ID is `Microsoft.NETCore.App.Ref`\r\n- Installers for each supported installer format (msi, deb, pkg, and rpm), which lay out the targeting pack files under `<DOTNET_ROOT>/packs/<PackageId>/version`.  These installers will be bundled or depended on by the corresponding .NET Core SDK installers.\r\n\r\nSome of the details (such as package layout, names, etc) are still [under design](https://github.com/dotnet/designs/pull/50/files?short_path=ebf265d#diff-ebf265d0476041dd8cab82fa24ab5b0e) and may change slightly.","Url":"https://github.com/dotnet/standard/issues/1051","RelatedDescription":"Open issue \"Create targeting pack for .NET Standard\" (#1051)"},{"Id":"396798571","IsPullRequest":false,"CreatedAt":"2019-01-08T08:34:45","Actor":"duncand","Number":"1050","RawContent":null,"Title":"Proposal to rename Standard 2.1 to 2.2, make 2.1 a Framework compatible subset","State":"open","Body":"I'm looking to provide input on .NET Standard and this appears to be the best place.\r\n\r\nSee https://blogs.msdn.microsoft.com/dotnet/2018/11/05/announcing-net-standard-2-1/ for reference.\r\n\r\nI propose that what is currently planned for .NET Standard 2.1 be pushed back to .NET Standard 2.2, and that .NET Standard 2.1 instead just have the subset of those changes that are implementable on .NET Framework.\r\n\r\nWhile going forward, .NET Standard after 2.0 is mainly adding new features that are not practical to implement in .NET Framework, some of the proposals for 2.1 contained bringing out some things that already existed but missed the 2.0 window.\r\n\r\nIf we do what I propose, then we have a last chance to increase the API surface that can run everywhere, before it is permanently shut out due to releasing a .NET Standard version that Framework can't run, given that each increasing Standard version is a superset of what came before.","Url":"https://github.com/dotnet/standard/issues/1050","RelatedDescription":"Open issue \"Proposal to rename Standard 2.1 to 2.2, make 2.1 a Framework compatible subset\" (#1050)"},{"Id":"396675175","IsPullRequest":false,"CreatedAt":"2019-01-07T22:27:48","Actor":"Entomy","Number":"1049","RawContent":null,"Title":"String Enhancements","State":"open","Body":"In .NET Core >=2.1 there exists a `.Join()` method that takes strings and chars, and a `.Split()` method that takes strings and chars. However in .NET Standard, `.Join()` only accepts strings, and `.Split()` only accepts chars. This is an odd seeming, and inconvenient, limitation. Can this be added to a future version?","Url":"https://github.com/dotnet/standard/issues/1049","RelatedDescription":"Open issue \"String Enhancements\" (#1049)"},{"Id":"396646204","IsPullRequest":true,"CreatedAt":"2019-01-07T22:02:02","Actor":"wtgodbe","Number":"1048","RawContent":null,"Title":" Move source items into src folder","State":"closed","Body":"With this, we group all source items into an `src` folder to match the convention of other repos. I've done a diff of the `artifacts` dir before & after this change to confirm that everything still looks like the same. @ViktorHofer @danmosemsft @terrajobst PTAL\r\n\r\nFixes https://github.com/dotnet/standard/issues/1037","Url":"https://github.com/dotnet/standard/pull/1048","RelatedDescription":"Closed or merged PR \" Move source items into src folder\" (#1048)"},{"Id":"393015237","IsPullRequest":false,"CreatedAt":"2019-01-07T22:02:02","Actor":"ViktorHofer","Number":"1037","RawContent":null,"Title":"Group source items in a src folder","State":"closed","Body":"We should move\r\n- netstandard\r\n- platforms\r\n- apicompat\r\n- dir.traversal.targets\r\n- package.builds\r\n- src.builds\r\n\r\ninto a `src` folder to align with other dotnet repos.\r\n\r\ncc @wtgodbe @danmosemsft @terrajobst","Url":"https://github.com/dotnet/standard/issues/1037","RelatedDescription":"Closed issue \"Group source items in a src folder\" (#1037)"},{"Id":"396610837","IsPullRequest":true,"CreatedAt":"2019-01-07T19:06:28","Actor":"wtgodbe","Number":"1047","RawContent":null,"Title":"Bump AssemblyVersion for nestandard.dll to 2.1.0.0","State":"open","Body":"Fixes https://github.com/dotnet/standard/issues/929\r\n\r\nCC @ericstj @terrajobst ","Url":"https://github.com/dotnet/standard/pull/1047","RelatedDescription":"Open PR \"Bump AssemblyVersion for nestandard.dll to 2.1.0.0\" (#1047)"},{"Id":"396598897","IsPullRequest":true,"CreatedAt":"2019-01-07T18:47:02","Actor":"wtgodbe","Number":"1046","RawContent":null,"Title":"Update APICompat baseline","State":"closed","Body":"I see these updates to the APICompat baselines after building from clean - I've confirmed that they weren't present before https://github.com/dotnet/standard/commit/dbb3e847a6dd09a8c9ec0206463ed1b848a5c90b. I figured I'd open a PR to use first as an easy way to view the diff & discuss, then to take into master if we decide it's the right thing. @ViktorHofer did you notice these locally when fixing up APICompat/GenAPI?","Url":"https://github.com/dotnet/standard/pull/1046","RelatedDescription":"Closed or merged PR \"Update APICompat baseline\" (#1046)"},{"Id":"396591596","IsPullRequest":false,"CreatedAt":"2019-01-07T18:06:51","Actor":"wtgodbe","Number":"1045","RawContent":null,"Title":"Convert seed.sh/.cmd files to proj files & update GenAPI invocations","State":"open","Body":"We should convert files like https://github.com/dotnet/standard/blob/8ca3d4c0c9599186d50196781484312176a9b2ad/platforms/xamarin.android/seed.sh to `.proj` files that can be built on-demand (either by direct invocation of `dotnet msbuild`, or a wrapper .ps1/.sh script that builds the project). This way we'll have access to the up-to-date version of `GenAPI`. We should also update the invocation of GenAPI to match the new standard introduced by https://github.com/dotnet/arcade/pull/1676\r\n\r\nCC @ViktorHofer ","Url":"https://github.com/dotnet/standard/issues/1045","RelatedDescription":"Open issue \"Convert seed.sh/.cmd files to proj files & update GenAPI invocations\" (#1045)"},{"Id":"396287501","IsPullRequest":false,"CreatedAt":"2019-01-06T19:38:08","Actor":"gpcaretti","Number":"1044","RawContent":null,"Title":"FAQ: how to understand a package is compatible with NETStandard","State":"open","Body":"I am developing a library bases on .NETstandard 2.0.\r\n\r\nMy question is: if in my library I need to refer a class defined outside the .NETstandard library (e.g. the `System.ComponentModel.DataAnnotations.DataTypeAttribute` class), how do I understand if I do not break the multiplatfom compatibility of my library by referring the external library `System.ComponentModel.DataAnnotations`?","Url":"https://github.com/dotnet/standard/issues/1044","RelatedDescription":"Open issue \"FAQ: how to understand a package is compatible with NETStandard\" (#1044)"},{"Id":"396025237","IsPullRequest":true,"CreatedAt":"2019-01-04T19:25:54","Actor":"ViktorHofer","Number":"1043","RawContent":null,"Title":"Fix GenAPI invocation with new args","State":"closed","Body":"Also need to use DARC to get a GenApi fix in.","Url":"https://github.com/dotnet/standard/pull/1043","RelatedDescription":"Closed or merged PR \"Fix GenAPI invocation with new args\" (#1043)"},{"Id":"395644781","IsPullRequest":true,"CreatedAt":"2019-01-04T16:29:48","Actor":"ViktorHofer","Number":"1042","RawContent":null,"Title":"Respect ApiCompat cmd changes","State":"closed","Body":"Depends on https://github.com/dotnet/arcade/pull/1676","Url":"https://github.com/dotnet/standard/pull/1042","RelatedDescription":"Closed or merged PR \"Respect ApiCompat cmd changes\" (#1042)"},{"Id":"394796330","IsPullRequest":false,"CreatedAt":"2018-12-29T13:33:18","Actor":"MV10","Number":"1041","RawContent":null,"Title":"System.MathF missing in .NET Standard 2.1 README","State":"open","Body":"Minor, but `System.MathF` is missing from the [README](https://github.com/dotnet/standard/blob/master/docs/planning/netstandard-2.1/README.md). I figured it would be in the Miscellaneous list at a minimum. (As I understand it, this is still on schedule for .NET Standard 2.1 per  https://github.com/dotnet/corefx/issues/15830, correct?)\r\n\r\n","Url":"https://github.com/dotnet/standard/issues/1041","RelatedDescription":"Open issue \"System.MathF missing in .NET Standard 2.1 README\" (#1041)"},{"Id":"393264404","IsPullRequest":true,"CreatedAt":"2018-12-26T21:14:18","Actor":"terrajobst","Number":"1039","RawContent":null,"Title":"Fix representation of enum values","State":"closed","Body":"We finally fixed the missing feature in our source emitter so that it now includes a human readable bitmask rather than the underlying value.\r\n\r\n***This doesn't change any API surface but makes diffs more human readable.***","Url":"https://github.com/dotnet/standard/pull/1039","RelatedDescription":"Closed or merged PR \"Fix representation of enum values\" (#1039)"},{"Id":"393009607","IsPullRequest":false,"CreatedAt":"2018-12-21T01:08:29","Actor":"ViktorHofer","Number":"1036","RawContent":null,"Title":"Disable Jenkins","State":"closed","Body":"We need to disable Jenkins so I doesn't get queued in a PR anymore and if not already done point mc.dot.net to the new Azure DevOps run. I also noticed that the last official build happened 12/3, maybe the cron job is not configured right?","Url":"https://github.com/dotnet/standard/issues/1036","RelatedDescription":"Closed issue \"Disable Jenkins\" (#1036)"},{"Id":"393267915","IsPullRequest":true,"CreatedAt":"2018-12-21T00:51:26","Actor":"ViktorHofer","Number":"1040","RawContent":null,"Title":"Remove the manual config system","State":"open","Body":"Fixes https://github.com/dotnet/standard/issues/1032","Url":"https://github.com/dotnet/standard/pull/1040","RelatedDescription":"Open PR \"Remove the manual config system\" (#1040)"},{"Id":"393171059","IsPullRequest":true,"CreatedAt":"2018-12-20T19:19:30","Actor":"wtgodbe","Number":"1038","RawContent":null,"Title":"Add APICompat run for NetStandard2.0","State":"closed","Body":"Adds ApiCompat coverage for .netstandard2.0\r\n\r\n@ViktorHofer @terrajobst PTAL\r\n\r\nresolves https://github.com/dotnet/standard/issues/1029","Url":"https://github.com/dotnet/standard/pull/1038","RelatedDescription":"Closed or merged PR \"Add APICompat run for NetStandard2.0\" (#1038)"},{"Id":"392786865","IsPullRequest":false,"CreatedAt":"2018-12-20T19:19:30","Actor":"wtgodbe","Number":"1029","RawContent":null,"Title":"Add ApiCompat run for netstandard2.0","State":"closed","Body":"We should add an APICompat run that checks against 2.0, similar the ones we already have for 1.0-1.6: https://github.com/dotnet/standard/blob/master/apicompat/baselines/ApiCompatBaseline.netstandard1.6.txt","Url":"https://github.com/dotnet/standard/issues/1029","RelatedDescription":"Closed issue \"Add ApiCompat run for netstandard2.0\" (#1029)"},{"Id":"393005614","IsPullRequest":true,"CreatedAt":"2018-12-20T18:07:43","Actor":"ViktorHofer","Number":"1035","RawContent":null,"Title":"Cleanup files after arcade switch & update baseline","State":"closed","Body":"Cleaning up some leftovers and running the build once to regenerate the baseline files.\r\n\r\nOpened https://github.com/dotnet/standard/issues/1031 and https://github.com/dotnet/standard/issues/1032 which should also be done.\r\n\r\nFailing CI jobs are leftovers: https://github.com/dotnet/standard/issues/1036\r\n\r\ncc @danmosemsft ","Url":"https://github.com/dotnet/standard/pull/1035","RelatedDescription":"Closed or merged PR \"Cleanup files after arcade switch & update baseline\" (#1035)"},{"Id":"393001679","IsPullRequest":true,"CreatedAt":"2018-12-20T11:31:22","Actor":"ViktorHofer","Number":"1034","RawContent":null,"Title":"Cleanup files after arcade switch & update baseline","State":"closed","Body":"Cleaning up some leftovers and running the build once to regenerate the baseline files.\r\n\r\nOpened https://github.com/dotnet/standard/issues/1031 and https://github.com/dotnet/standard/issues/1032 which should also be done.\r\n\r\ncc @danmosemsft ","Url":"https://github.com/dotnet/standard/pull/1034","RelatedDescription":"Closed or merged PR \"Cleanup files after arcade switch & update baseline\" (#1034)"},{"Id":"392986163","IsPullRequest":false,"CreatedAt":"2018-12-20T10:40:01","Actor":"ViktorHofer","Number":"1032","RawContent":null,"Title":"Remove slim configuration system and stop overloading Configuration","State":"open","Body":"We should stop overloading the `Configuration` property in favor of the right msbuild properties and remove the `ConfigurationGroup` property to enable native VS support and remove a lot of obsolete stuff.\r\n\r\n```\r\n  <PropertyGroup Condition=\"'$(Configuration)'==''\">\r\n    <ConfigurationGroup Condition=\"'$(ConfigurationGroup)'==''\">Debug</ConfigurationGroup>\r\n    <Configuration>$(ConfigurationGroup)</Configuration>\r\n    <Configuration Condition=\"'$(TargetGroup)'!=''\">$(TargetGroup)_$(Configuration)</Configuration>\r\n    <Configuration Condition=\"'$(OSGroup)'!='' and '$(OSGroup)'!='AnyOS'\">$(OSGroup)_$(Configuration)</Configuration>\r\n  </PropertyGroup>\r\n```\r\n\r\ncc @ericstj @wtgodbe ","Url":"https://github.com/dotnet/standard/issues/1032","RelatedDescription":"Open issue \"Remove slim configuration system and stop overloading Configuration\" (#1032)"},{"Id":"392982975","IsPullRequest":false,"CreatedAt":"2018-12-20T10:31:53","Actor":"ViktorHofer","Number":"1031","RawContent":null,"Title":"Remove depproj approach and enable project restore","State":"open","Body":"As discussed in another PR I think it makes sense to remove the depproj approach here in the standard repo and follow the usual way of referencing packages directly in the respective project, in this case netstandard.csproj. Also the netstandard.builds file which restores for different frameworks can be incorporated in the csproj by adding a `TargetFrameworks` property and right PackageReference conditions. \r\n\r\ncc @wtgodbe @ericstj ","Url":"https://github.com/dotnet/standard/issues/1031","RelatedDescription":"Open issue \"Remove depproj approach and enable project restore\" (#1031)"},{"Id":"392822069","IsPullRequest":true,"CreatedAt":"2018-12-20T10:07:40","Actor":"wtgodbe","Number":"1030","RawContent":null,"Title":"Delete CI & redundant publish file","State":"closed","Body":"This deletes the old `netci.groovy` file, since we're using Azure DevOps for CI now. It also deletes `publish.msbuild`, which isn't used anywhere.\r\n\r\n@ViktorHofer PTAL","Url":"https://github.com/dotnet/standard/pull/1030","RelatedDescription":"Closed or merged PR \"Delete CI & redundant publish file\" (#1030)"},{"Id":"391885087","IsPullRequest":true,"CreatedAt":"2018-12-19T23:33:25","Actor":"wtgodbe","Number":"1027","RawContent":null,"Title":"Build Standard entirely against Arcade, without Buildtools","State":"closed","Body":"This cuts out buildtools entirely from the Standard repo, so that we fully rely on the Arcade SDK to build against instead. It replaces the functionality for code analyzers, `ValidateApiCompatForSrc`, and the build tasks.\r\n\r\n@ericstj @safern @danmosemsft @ViktorHofer @chcosta PTAL\r\n\r\nCC @karelz ","Url":"https://github.com/dotnet/standard/pull/1027","RelatedDescription":"Closed or merged PR \"Build Standard entirely against Arcade, without Buildtools\" (#1027)"},{"Id":"390839367","IsPullRequest":true,"CreatedAt":"2018-12-19T01:29:43","Actor":"terrajobst","Number":"1020","RawContent":null,"Title":"Reduce noise in reference assemblies","State":"closed","Body":"This doesn't change any APIs. It's just reducing noise from in the textual diff of the reference assemblies.\r\n\r\n* Fix trailing whitespace (69cb85e)\r\n* Mark types as partial (c9725f7)\r\n* Replace handwritten base calls with generated ones (78649f6)\r\n","Url":"https://github.com/dotnet/standard/pull/1020","RelatedDescription":"Closed or merged PR \"Reduce noise in reference assemblies\" (#1020)"},{"Id":"392146465","IsPullRequest":true,"CreatedAt":"2018-12-18T13:01:40","Actor":"dotnet-maestro[bot]","Number":"1028","RawContent":null,"Title":"Update dependency files","State":"open","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.ApiCompat - 1.0.0-beta.18617.7\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18617.7\r\n- Microsoft.DotNet.Build.Tasks.Packaging - 1.0.0-beta.18617.7\r\n- Microsoft.DotNet.GenAPI - 1.0.0-beta.18617.7\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.ApiCompat - 1.0.0-beta.18618.7\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18618.7\r\n- Microsoft.DotNet.Build.Tasks.Packaging - 1.0.0-beta.18618.7\r\n- Microsoft.DotNet.GenAPI - 1.0.0-beta.18618.7\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1028","RelatedDescription":"Open PR \"Update dependency files\" (#1028)"},{"Id":"391702003","IsPullRequest":true,"CreatedAt":"2018-12-17T15:07:31","Actor":"dotnet-maestro[bot]","Number":"1026","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.ApiCompat - 1.0.0-beta.18616.5\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18616.5\r\n- Microsoft.DotNet.Build.Tasks.Packaging - 1.0.0-beta.18616.5\r\n- Microsoft.DotNet.GenAPI - 1.0.0-beta.18616.5\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1026","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#1026)"},{"Id":"391465145","IsPullRequest":true,"CreatedAt":"2018-12-16T19:53:13","Actor":"dotnet-maestro[bot]","Number":"1025","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.ApiCompat - 1.0.0-beta.18615.1\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18615.1\r\n- Microsoft.DotNet.Build.Tasks.Packaging - 1.0.0-beta.18615.1\r\n- Microsoft.DotNet.GenAPI - 1.0.0-beta.18615.1\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1025","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#1025)"},{"Id":"391463924","IsPullRequest":false,"CreatedAt":"2018-12-16T12:45:44","Actor":"dmitriyse","Number":"1024","RawContent":null,"Title":"[Proposal] .Net Standard 3.0.0 with breaking changes, semantic versioning and migration toolset","State":"open","Body":"Please open new .NetStandard branch with deep refresh of .Net API surface.\r\nCurrently .NetStandard 2.0 and it's successor .NetStandard 2.1 contains everything that were added in .net since version 1.0. Some API is already outdated and another will become outdated soon.\r\n\r\n.Net Standard 2.1 have some positive movements. It's drops some components to out of standard into additional components.\r\n\r\nBut it's not enough. It's time to stay in .Net Standard only good and modern parts.\r\nFor example:\r\n```CSharp\r\npublic class List<T>\r\n{\r\n     // ...\r\n     void CopyTo(T[] array);\r\n     // ...\r\n}\r\n```\r\ncan be replaced with:\r\n\r\n```CSharp\r\npublic class List<T>\r\n{\r\n     // ...\r\n     void CopyTo(Span<T> output);\r\n     // ...\r\n}\r\n```\r\nAssemblies targeting .NetStandard 2.0, .NetStandard 2.1 and proposed .NetStandard 3.0.0 should be capable to work side-by-side inside the same AppDomain.\r\n\r\nTODO: Add diagram.\r\n","Url":"https://github.com/dotnet/standard/issues/1024","RelatedDescription":"Open issue \"[Proposal] .Net Standard 3.0.0 with breaking changes, semantic versioning and migration toolset\" (#1024)"},{"Id":"391376312","IsPullRequest":true,"CreatedAt":"2018-12-15T13:41:30","Actor":"dotnet-maestro[bot]","Number":"1023","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.ApiCompat - 1.0.0-beta.18614.3\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18614.3\r\n- Microsoft.DotNet.Build.Tasks.Packaging - 1.0.0-beta.18614.3\r\n- Microsoft.DotNet.GenAPI - 1.0.0-beta.18614.3\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1023","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#1023)"},{"Id":"391102384","IsPullRequest":true,"CreatedAt":"2018-12-14T13:21:43","Actor":"dotnet-maestro[bot]","Number":"1021","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.ApiCompat - 1.0.0-beta.18613.20\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18613.20\r\n- Microsoft.DotNet.Build.Tasks.Packaging - 1.0.0-beta.18613.20\r\n- Microsoft.DotNet.GenAPI - 1.0.0-beta.18613.20\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1021","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#1021)"}],"ResultType":"GitHubIssue"},"CoreFx-Issues":{"Issues":[{"Id":"397316284","IsPullRequest":true,"CreatedAt":"2019-01-10T04:02:20","Actor":"geoffkizer","Number":"34458","RawContent":null,"Title":"Clean up HttpClientTest","State":"closed","Body":"HttpClientTest contains tests for the HttpClient class. Currently, it is mostly, but not entirely, independent of the actual HttpClientHandler used.\r\n\r\nClean this up so it no longer relies on the HttpClientHandler. This means:\r\n(1) Moving a couple tests to HttpClientHandlerTest\r\n(2) Modifying a few tests to use the mock handler instead of a real handler (most were already doing this)\r\n\r\nWith this change, HttpClientTest no longer needs to derive from HttpClientTestBase, so remove the dependency and handler-specific derivations.\r\n\r\nAlso, rename HttpClientTestBase to HttpClientHandlerTestBase.\r\n\r\nThere are two commits in this PR. The first contains all the significant code changes. The second is simply the rename from HttpClientTestBase -> HttpClientHandlerTestBase.\r\n\r\n@dotnet/ncl \r\n","Url":"https://github.com/dotnet/corefx/pull/34458","RelatedDescription":"Closed or merged PR \"Clean up HttpClientTest\" (#34458)"},{"Id":"397662820","IsPullRequest":true,"CreatedAt":"2019-01-10T03:59:08","Actor":"bartonjs","Number":"34485","RawContent":null,"Title":"Introduce JsonDocument","State":"open","Body":"JsonDocument is a read-only random-access document model for JSON payloads.\r\n\r\nThe JsonDocument class holds parsing state, and carves off JsonElement\r\nand JsonProperty cursors as needed to represent different locations within\r\nthe logical document.\r\n\r\nContributes to #33968.\r\nBlocked by #33292.\r\nBlocked by #33998.","Url":"https://github.com/dotnet/corefx/pull/34485","RelatedDescription":"Open PR \"Introduce JsonDocument\" (#34485)"},{"Id":"397582831","IsPullRequest":true,"CreatedAt":"2019-01-10T00:28:38","Actor":"Dotnet-GitSync-Bot","Number":"34482","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @GrabYourPitchforks","Url":"https://github.com/dotnet/corefx/pull/34482","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#34482)"},{"Id":"397618403","IsPullRequest":true,"CreatedAt":"2019-01-10T00:06:55","Actor":"jkoritzinsky","Number":"34484","RawContent":null,"Title":"Expose System.Runtime.Loader.AssemblyDependencyResolver.","State":"open","Body":"Expose the new `System.Runtime.Loader.AssemblyDependencyResolver` type.\r\n\r\nFixes #33165\r\n\r\nDepends on dotnet/coreclr#21896 propagating to corefx.\r\n","Url":"https://github.com/dotnet/corefx/pull/34484","RelatedDescription":"Open PR \"Expose System.Runtime.Loader.AssemblyDependencyResolver.\" (#34484)"},{"Id":"397617933","IsPullRequest":true,"CreatedAt":"2019-01-10T00:05:01","Actor":"dotnet-maestro-bot","Number":"34483","RawContent":null,"Title":"Update CoreFx to preview.19059.7 (master)","State":"open","Body":"/cc @dotnet/maestro-reviewers-core","Url":"https://github.com/dotnet/corefx/pull/34483","RelatedDescription":"Open PR \"Update CoreFx to preview.19059.7 (master)\" (#34483)"},{"Id":"397241675","IsPullRequest":true,"CreatedAt":"2019-01-09T22:30:04","Actor":"dotnet-maestro-bot","Number":"34456","RawContent":null,"Title":"Update CoreClr, ProjectNTfs, ProjectNTfsTestILC to preview-27309-02, beta-27309-01, beta-27309-01, respectively (master)","State":"closed","Body":"/cc @dotnet/maestro-reviewers-core","Url":"https://github.com/dotnet/corefx/pull/34456","RelatedDescription":"Closed or merged PR \"Update CoreClr, ProjectNTfs, ProjectNTfsTestILC to preview-27309-02, beta-27309-01, beta-27309-01, respectively (master)\" (#34456)"},{"Id":"397582704","IsPullRequest":true,"CreatedAt":"2019-01-09T22:07:12","Actor":"dotnet-maestro-bot","Number":"34481","RawContent":null,"Title":"[automated] Merge branch 'release/2.1' => 'release/2.2'","State":"open","Body":"I detected changes in the release/2.1 branch which have not been merged yet to release/2.2. I'm a robot and am configured to help you automatically keep release/2.2 up to date, so I've opened this PR.\r\n\r\nThis PR merges commits made on release/2.1 by the following committers:\n\n* @danmosemsft\r\n\r\n## Instructions for merging\r\n\r\nThis repo does not appear to allow merge commits from the GitHub UI, so you will need to update this PR with a merge commit before closing this PR.\r\n\r\n``` sh\r\ngit fetch\r\ngit checkout release/2.1\r\ngit pull --ff-only\r\ngit checkout release/2.2\r\ngit pull --ff-only\r\ngit merge --no-ff release/2.1\r\n# If there are merge conflicts, resolve them and then run git merge --continue to complete the merge\r\ngit push https://github.com/dotnet-maestro-bot/corefx HEAD:merge/release/2.1-to-release/2.2\r\n```\r\n\r\n<details>\r\n<summary>or if you are using SSH</summary>\r\n\r\n```\r\ngit push git@github.com:dotnet-maestro-bot/corefx HEAD:merge/release/2.1-to-release/2.2\r\n```\r\n\r\n</details>\r\n\r\n\r\nAfter PR checks are complete push the branch\r\n```\r\ngit push\r\n```\r\n\r\nPlease contact .NET Core Engineering if you have questions or issues.\r\nAlso, if this PR was generated incorrectly, help us fix it. See https://github.com/dotnet/arcade/blob/master/scripts/GitHubMergeBranches.ps1.\r\n","Url":"https://github.com/dotnet/corefx/pull/34481","RelatedDescription":"Open PR \"[automated] Merge branch 'release/2.1' => 'release/2.2'\" (#34481)"},{"Id":"397475492","IsPullRequest":true,"CreatedAt":"2019-01-09T22:06:02","Actor":"Dotnet-GitSync-Bot","Number":"34470","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @jkotas @marek-safar @jkotas","Url":"https://github.com/dotnet/corefx/pull/34470","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#34470)"},{"Id":"397579052","IsPullRequest":true,"CreatedAt":"2019-01-09T21:56:34","Actor":"ViktorHofer","Number":"34480","RawContent":null,"Title":"Darc update from build '20190108.5'","State":"open","Body":"","Url":"https://github.com/dotnet/corefx/pull/34480","RelatedDescription":"Open PR \"Darc update from build '20190108.5'\" (#34480)"},{"Id":"397560507","IsPullRequest":false,"CreatedAt":"2019-01-09T21:01:26","Actor":"k0st1x","Number":"34479","RawContent":null,"Title":"System.Drawing - Font is not scaled on Bitmap with scaled Resolution (Linux platform)","State":"open","Body":"On the Windows platform the Font size (with GraphicsUnit.Point) will increase proportionally depending on the resolution of the Bitmap.\r\nbut not on the Linux platform.\r\nsample code:\r\n```C#\r\nconst string outputFile = \"output\";\r\nconst int max = 5;\r\nconst int originalBitmapSize = 128;\r\nfor(int i = 1; i < max + 1; i++) {\r\n    float resolution = 96 * i * 0.75f;\r\n    int size = (int)(originalBitmapSize * resolution / 96);\r\n    using(var bitmap = new Bitmap(size, size))\r\n    using(var font = new Font(\"Arial\", 20f, FontStyle.Regular, GraphicsUnit.Point)) {\r\n        bitmap.SetResolution(resolution, resolution);\r\n        using(var graphics = Graphics.FromImage(bitmap)) {\r\n            graphics.FillRectangle(Brushes.LightBlue, 0, 0, bitmap.Width, bitmap.Height);\r\n            graphics.DrawString(\"test\", font, Brushes.Black, 0, 0);\r\n            bitmap.Save(outputFile + i + \".png\", ImageFormat.Png);\r\n        }\r\n    }\r\n}\r\n```\r\nthe output \"test\" string on the Linux platforms will not be enlarged.","Url":"https://github.com/dotnet/corefx/issues/34479","RelatedDescription":"Open issue \"System.Drawing - Font is not scaled on Bitmap with scaled Resolution (Linux platform)\" (#34479)"},{"Id":"397554524","IsPullRequest":false,"CreatedAt":"2019-01-09T20:43:37","Actor":"GammaFour","Number":"34478","RawContent":null,"Title":"Feature Request: Transaction Information in call to Commit, Prepare and Rollback.","State":"open","Body":"This has been a constant annoyance to me for over a decade now.  I have **ReaderWriterLock**s that protect resources in multi-threaded operations.  I can't release the lock on these resources until the transaction is completed.  Releasing locks in an environment that exploits async and await means you can't depend on thread affinities, you need to associate the locks with a transaction (or some higher unit of work).  Currently, I need to hang an action on the TransactionCompleted event handler to release the lock at the end of the transaction because you don't pass the Transaction information to the Commit and Rollback methods.  This is a design oversight as the Commit and Rollback need to know what transaction is being committed or rolled-back (at least it does for handling locks).\r\n","Url":"https://github.com/dotnet/corefx/issues/34478","RelatedDescription":"Open issue \"Feature Request: Transaction Information in call to Commit, Prepare and Rollback.\" (#34478)"},{"Id":"397525585","IsPullRequest":true,"CreatedAt":"2019-01-09T19:42:33","Actor":"Marusyk","Number":"34477","RawContent":null,"Title":"System.Management. Refactor DllImports","State":"open","Body":"Issue #33774\r\n\r\nPlease review. Thank you in advance.","Url":"https://github.com/dotnet/corefx/pull/34477","RelatedDescription":"Open PR \"System.Management. Refactor DllImports\" (#34477)"},{"Id":"397451866","IsPullRequest":true,"CreatedAt":"2019-01-09T19:24:55","Actor":"ViktorHofer","Number":"34468","RawContent":null,"Title":"Bump ReportGenerator to 4.0.5 stable","State":"closed","Body":"","Url":"https://github.com/dotnet/corefx/pull/34468","RelatedDescription":"Closed or merged PR \"Bump ReportGenerator to 4.0.5 stable\" (#34468)"},{"Id":"397510766","IsPullRequest":true,"CreatedAt":"2019-01-09T19:02:20","Actor":"Marusyk","Number":"34476","RawContent":null,"Title":"System.Runtime.Caching. Refactor DllImports","State":"open","Body":"Issue #33774\r\n\r\nShould I remove unused constants from `NativeMethods` in Dbg.cs?\r\n\r\nPlease review","Url":"https://github.com/dotnet/corefx/pull/34476","RelatedDescription":"Open PR \"System.Runtime.Caching. Refactor DllImports\" (#34476)"},{"Id":"397507482","IsPullRequest":true,"CreatedAt":"2019-01-09T18:53:17","Actor":"ViktorHofer","Number":"34475","RawContent":null,"Title":"Randomize UapRunner GUID","State":"open","Body":"Fixes https://github.com/dotnet/corefx/issues/33550","Url":"https://github.com/dotnet/corefx/pull/34475","RelatedDescription":"Open PR \"Randomize UapRunner GUID\" (#34475)"},{"Id":"397507028","IsPullRequest":true,"CreatedAt":"2019-01-09T18:52:01","Actor":"tannergooding","Number":"34474","RawContent":null,"Title":"[WIP] Updating S.N.Tensors to have interfaces declaring the public surface area","State":"open","Body":"This is just a WIP right now. It currently takes the existing public surface area (as is) and puts them in the corresponding interfaces that we are going to have.\r\n\r\nThere is likely still some cleanup of the interfaces that needs to be done and the types need to be cleaned up so that they are value types, rather than reference types.\r\n\r\nCC. @ericstj, @eerhardt, @danmosemsft ","Url":"https://github.com/dotnet/corefx/pull/34474","RelatedDescription":"Open PR \"[WIP] Updating S.N.Tensors to have interfaces declaring the public surface area\" (#34474)"},{"Id":"397481539","IsPullRequest":false,"CreatedAt":"2019-01-09T18:41:09","Actor":"natemcmaster","Number":"34473","RawContent":null,"Title":"Missing System.Threading.Tasks.Extensions from latest 3.0 builds. Intentional?","State":"closed","Body":"Just noticed that System.Threading.Tasks.Extensions is no longer getting produced from 3.0 Preview 2 builds, so current builds of aspnet are using a stale dependency. Was this package intentionally dropped? There was a 3.0 Preview 1 version of this package. \r\n\r\ncc @tarekgh ","Url":"https://github.com/dotnet/corefx/issues/34473","RelatedDescription":"Closed issue \"Missing System.Threading.Tasks.Extensions from latest 3.0 builds. Intentional?\" (#34473)"},{"Id":"397477858","IsPullRequest":false,"CreatedAt":"2019-01-09T18:23:56","Actor":"Xeeynamo","Number":"34472","RawContent":null,"Title":"Uri.Authority does not follow RFC 3986","State":"closed","Body":"According to RFC 3986 (https://tools.ietf.org/html/rfc3986) paragraph 3.2, the Authority of a URI is composed by \r\n\r\n> [ userinfo \"@\" ] host [ \":\" port ]\r\n\r\n. But both .Net Framework and .Net Core returns only \r\n\r\n> host [ \":\" port ]\r\n\r\nignoring the userinfo. I don't think that's the expected behaviour, unless it was intentional. \r\n\r\n`        [Theory]`\r\n`        [InlineData(\"\", \"scheme:path\")]`\r\n`        [InlineData(\"host\", \"scheme://host\")]`\r\n`        [InlineData(\"host:12345\", \"scheme://host:12345\")]`\r\n`        [InlineData(\"userinfo@host:12345\", \"scheme://userinfo@host:12345\")] // FAILS!`\r\n`        public void AuthorityTest(string expected, string strUri)`\r\n`        {`\r\n`            Assert.Equal(expected, new Uri(strUri).Authority);`\r\n`        }`","Url":"https://github.com/dotnet/corefx/issues/34472","RelatedDescription":"Closed issue \"Uri.Authority does not follow RFC 3986\" (#34472)"},{"Id":"397476953","IsPullRequest":true,"CreatedAt":"2019-01-09T17:31:30","Actor":"jkotas","Number":"34471","RawContent":null,"Title":"Unify DispatchWrapper behavior for null","State":"open","Body":"","Url":"https://github.com/dotnet/corefx/pull/34471","RelatedDescription":"Open PR \"Unify DispatchWrapper behavior for null\" (#34471)"},{"Id":"397470291","IsPullRequest":false,"CreatedAt":"2019-01-09T17:14:19","Actor":"spushpendra2000","Number":"34469","RawContent":null,"Title":"System.IO.Enumeration.FileSystemEnumerator`1.FindNextEntry Input/output error","State":"open","Body":"Any idea about this .netcore 2.0 exception.\r\n\r\n20885 1     01/09 11:54:16 ### ### launchKestrel - Exception Message [Input/output error]\r\n20885 1     01/09 11:54:16 ### ### launchKestrel - Exception Source [System.IO.FileSystem]\r\n20885 1     01/09 11:54:16 ### ### launchKestrel - Exception StackTrace [   at System.IO.Enumeration.FileSystemEnumerator`1.FindNextEntry()\r\n   at System.IO.Enumeration.FileSystemEnumerator`1.MoveNext()\r\n   at System.IO.FileSystemWatcher.RunningInstance.AddDirectoryWatchUnlocked(WatchedDirectory parent, String directoryName)\r\n   at System.IO.FileSystemWatcher.RunningInstance.AddDirectoryWatchUnlocked(WatchedDirectory parent, String directoryName)\r\n   at System.IO.FileSystemWatcher.RunningInstance.AddDirectoryWatchUnlocked(WatchedDirectory parent, String directoryName)\r\n   at System.IO.FileSystemWatcher.RunningInstance.AddDirectoryWatchUnlocked(WatchedDirectory parent, String directoryName)\r\n   at System.IO.FileSystemWatcher.RunningInstance.AddDirectoryWatchUnlocked(WatchedDirectory parent, String directoryName)\r\n   at System.IO.FileSystemWatcher.RunningInstance.AddDirectoryWatchUnlocked(WatchedDirectory parent, String directoryName)\r\n   at System.IO.FileSystemWatcher.RunningInstance.AddDirectoryWatchUnlocked(WatchedDirectory parent, String directoryName)\r\n   at System.IO.FileSystemWatcher.RunningInstance..ctor(FileSystemWatcher watcher, SafeFileHandle inotifyHandle, String directoryPath, Boolean includeSubdirectories, NotifyFilters notifyFilters, CancellationToken cancellationToken)\r\n   at System.IO.FileSystemWatcher.StartRaisingEvents()\r\n   at System.IO.FileSystemWatcher.StartRaisingEventsIfNotDisposed()\r\n   at System.IO.FileSystemWatcher.set_EnableRaisingEvents(Boolean value)\r\n   at Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.TryEnableFileSystemWatcher()\r\n   at Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.CreateFileChangeToken(String filter)\r\n   at Microsoft.AspNetCore.Mvc.RazorPages.Internal.PageActionDescriptorChangeProvider.GetChangeToken()\r\n   at Microsoft.Extensions.Primitives.ChangeToken.OnChange(Func`1 changeTokenProducer, Action changeTokenConsumer)\r\n   at Microsoft.AspNetCore.Mvc.Internal.ActionDescriptorCollectionProvider..ctor(IEnumerable`1 actionDescriptorProviders, IEnumerable`1 actionDescriptorChangeProviders)\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitConstructor(ConstructorCallSite constructorCallSite, ServiceProvider provider)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitScoped(ScopedCallSite scopedCallSite, ServiceProvider provider)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitConstructor(ConstructorCallSite constructorCallSite, ServiceProvider provider)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitScoped(ScopedCallSite scopedCallSite, ServiceProvider provider)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitConstructor(ConstructorCallSite constructorCallSite, ServiceProvider provider)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitTransient(TransientCallSite transientCallSite, ServiceProvider provider)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitIEnumerable(IEnumerableCallSite enumerableCallSite, ServiceProvider provider)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitConstructor(ConstructorCallSite constructorCallSite, ServiceProvider provider)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitScoped(ScopedCallSite scopedCallSite, ServiceProvider provider)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitConstructor(ConstructorCallSite constructorCallSite, ServiceProvider provider)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitScoped(ScopedCallSite scopedCallSite, ServiceProvider provider)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService(IServiceProvider provider, Type serviceType)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService[T](IServiceProvider provider)\r\n   at Microsoft.AspNetCore.Builder.MvcApplicationBuilderExtensions.UseMvc(IApplicationBuilder app, Action`1 configureRoutes)\r\n   at IndexServer.Startup.Configure(IApplicationBuilder app, IHostingEnvironment env, ILoggerFactory loggerFactory)\r\n","Url":"https://github.com/dotnet/corefx/issues/34469","RelatedDescription":"Open issue \"System.IO.Enumeration.FileSystemEnumerator`1.FindNextEntry Input/output error\" (#34469)"},{"Id":"397423289","IsPullRequest":true,"CreatedAt":"2019-01-09T15:30:03","Actor":"MarcoRossignoli","Number":"34467","RawContent":null,"Title":"Remove UNC path check from System.Drawing.Icon.ExtractAssociatedIcon","State":"open","Body":"closes https://github.com/dotnet/corefx/issues/34122\r\n\r\n/cc @safern @maryamariyan @danmosemsft ","Url":"https://github.com/dotnet/corefx/pull/34467","RelatedDescription":"Open PR \"Remove UNC path check from System.Drawing.Icon.ExtractAssociatedIcon\" (#34467)"},{"Id":"397415281","IsPullRequest":false,"CreatedAt":"2019-01-09T15:12:28","Actor":"Suchiman","Number":"34466","RawContent":null,"Title":"HttpClient ignores WebRequest.DefaultWebProxy","State":"open","Body":"Right now there's no way to coerce all web requests of a specific application through a specific configured proxy since `HttpClient` disregards `WebRequest.DefaultWebProxy` and only respects `SystemProxyInfo.ConstructSystemProxy()`.\r\n`HttpWebRequest` and `WebClient` who just wrap `HttpClient` explicitly take care of assigning `HttpClientHandler.Proxy = WebRequest.DefaultWebProxy` but if this is left unassigned, `HttpClient` will consult `SystemProxyInfo.ConstructSystemProxy()`. This is very unfortunate if you have no control over the HttpClients created and no control over the system proxy (e.g. Azure Web Apps).\r\n\r\nI'd like to request support for HttpClient to use `WebRequest.DefaultWebProxy` when it has been set by the user and only otherwise the default system proxy.\r\n\r\nI'd also take another API that allows to globally configure a Proxy.","Url":"https://github.com/dotnet/corefx/issues/34466","RelatedDescription":"Open issue \"HttpClient ignores WebRequest.DefaultWebProxy\" (#34466)"},{"Id":"397315702","IsPullRequest":true,"CreatedAt":"2019-01-09T14:42:04","Actor":"Dotnet-GitSync-Bot","Number":"34457","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @wfurt","Url":"https://github.com/dotnet/corefx/pull/34457","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#34457)"},{"Id":"397400255","IsPullRequest":false,"CreatedAt":"2019-01-09T14:39:56","Actor":"mikhailovalex","Number":"34465","RawContent":null,"Title":".Net Core 3.0 - INotifyPropertyChanged does not work as expected in the WinForms app.","State":"open","Body":"* .NET Core Version: 3.0.100-preview-009844\r\n* Have you experienced this same bug with .NET Framework?: No\r\n\r\n**Problem description:**\r\nChange property value doesn't affect controls if we use a Control.DataBindings property. It looks like a compatibility bug.\r\n\r\n**Minimal repro:**\r\n1. Create a new WinForms Core App.\r\n2. Replace the following Code into the Form's code-behind:\r\n```\r\npublic partial class Form1 : Form\r\n    {\r\n        MyClass _myClass = new MyClass();\r\n        public Form1()\r\n        {\r\n            InitializeComponent();         \r\n            label1.DataBindings.Add(nameof(label1.Text), _myClass, nameof(_myClass.MyProperty), true, DataSourceUpdateMode.OnPropertyChanged);\r\n            buttonExit.Text = \"Click me\";\r\n            _myClass.MyProperty = \"Click the button to show the current time\";\r\n        }\r\n        public class MyClass : INotifyPropertyChanged {\r\n            private string myProperty;\r\n            public string MyProperty {\r\n                get {\r\n                    return myProperty;\r\n                }\r\n                set {\r\n                    if(myProperty == value)\r\n                        return;\r\n                    myProperty = value;\r\n                    PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(nameof(MyProperty)));\r\n                }\r\n            }\r\n            public event PropertyChangedEventHandler PropertyChanged;\r\n        }\r\n\r\n        private void buttonExit_Click(object sender, EventArgs e)\r\n        {\r\n            _myClass.MyProperty = DateTime.Now.ToString();\r\n        }\r\n    }\r\n```\r\n3. Click the button.\r\n\r\n**Actual behavior:**\r\nThe label text doesn't change on button click.\r\n\r\n**Expected behavior:**\r\nThe binding should work like in .Net Framework.\r\n\r\n**P.S.**\r\nhttps://github.com/dotnet/corefx/blob/a20e52392cfb80be0bc6aa29e84697690f254a9a/src/System.ComponentModel.TypeConverter/src/System/ComponentModel/ReflectPropertyDescriptor.cs#L242\r\n\r\n","Url":"https://github.com/dotnet/corefx/issues/34465","RelatedDescription":"Open issue \".Net Core 3.0 - INotifyPropertyChanged does not work as expected in the WinForms app.\" (#34465)"},{"Id":"397372826","IsPullRequest":true,"CreatedAt":"2019-01-09T14:03:43","Actor":"amagrath","Number":"34464","RawContent":null,"Title":"Correctly honour the \"breakOnFirstError\" parameter ","State":"closed","Body":"in the \"Validator.GetObjectValidationErrors\" method, so that the \"IValidatableObject.Validate\" method is called when \"breakOnFirstError\" is false and there are earlier validation-attribute-related errors.\r\n\r\nNo-where in the documentation does it say that you cannot mix attribute and class-based Validate methods. Therefore, the Validator should return ALL relevant ValidationResult objects when \"breakOnFirstError\" is set to false.","Url":"https://github.com/dotnet/corefx/pull/34464","RelatedDescription":"Closed or merged PR \"Correctly honour the \"breakOnFirstError\" parameter \" (#34464)"},{"Id":"397349733","IsPullRequest":false,"CreatedAt":"2019-01-09T12:29:00","Actor":"mklement0","Number":"34463","RawContent":null,"Title":"Console.Clear() doesn't clear the scrollback buffer on Unix-like platforms","State":"open","Body":"[`Console.Clear()`'s documentation](https://docs.microsoft.com/en-us/dotnet/api/system.console.clear?view=netcore-2.2) states (emphasis added):\r\n\r\n> _Clears the console buffer_ and corresponding console window of display information.\r\n\r\nIndeed, not just clearing the current terminal _window_ (screen), but also the scrollback buffer is the typical use case, and it is how this method has always worked on Windows.<sup>[1]</sup>\r\n\r\nBy contrast, **the Unix implementation currently only clears the _screen_, which makes for an inconsistent cross-platform experience.**\r\n\r\nWhile there is no POSIX-compliant way to clear the scrollback buffer (only clearing the _screen_ is mandated by POSIX, via `tput clear`), [xterm](https://en.wikipedia.org/wiki/Xterm)-compatible terminal applications do support escape sequence `<esc>[3J` - see [Wikipedia](https://en.wikipedia.org/wiki/ANSI_escape_code#CSI_sequences).\r\n\r\nIn practice, the macOS terminal application and the one on Ubuntu, for instance, do support this escape sequence - generally, terminal emulators based on the [X Window System](https://en.wikipedia.org/wiki/X_Window_System).\r\n\r\nI don't know if there are popular terminal emulators out there that do _not_ support it, but even a best-effort implementation would be useful.\r\n\r\nHere's a workaround that demonstrates use of the escape sequence:\r\n\r\n```csharp\r\n// Clears the screen and the scrollback buffer in xterm-compatible terminals.\r\nConsole.Clear(); Console.WriteLine(\"\\x1b[3J\")\r\n```\r\n---\r\n\r\n<sup>[1] Whether there should be an opt-in for predictably clearing _only_ the screen across platforms, while leaving the scrollback buffer intact, is a separate question.</sup>","Url":"https://github.com/dotnet/corefx/issues/34463","RelatedDescription":"Open issue \"Console.Clear() doesn't clear the scrollback buffer on Unix-like platforms\" (#34463)"},{"Id":"397339577","IsPullRequest":false,"CreatedAt":"2019-01-09T11:59:40","Actor":"geoffkizer","Number":"34462","RawContent":null,"Title":"HTTP2: Make HTTP2 tests run against platform handlers","State":"open","Body":"We have some HTTP2-specific tests in SocketsHttpHandler.Http2.cs.\r\n\r\nThese are currently only running against SocketsHttpHandler. To ensure consistent behavior, we should make these run against platform handlers as well, at least to the extent reasonably possible.\r\n","Url":"https://github.com/dotnet/corefx/issues/34462","RelatedDescription":"Open issue \"HTTP2: Make HTTP2 tests run against platform handlers\" (#34462)"},{"Id":"397333898","IsPullRequest":false,"CreatedAt":"2019-01-09T11:43:18","Actor":"geoffkizer","Number":"34461","RawContent":null,"Title":"HTTP2: Incorrect handling of frames received on closed stream","State":"open","Body":"Per RFC section 5.1:\r\n\r\n```\r\nSimilarly, an endpoint\r\n      that receives any frames after receiving a frame with the\r\n      END_STREAM flag set MUST treat that as a connection error\r\n      (Section 5.4.1) of type STREAM_CLOSED, unless the frame is\r\n      permitted as described below\r\n```\r\n\r\nThe EmptyResponse_FrameReceived_ResetsStream test is incorrect and should be changed.\r\n\r\n@rmkerr \r\n","Url":"https://github.com/dotnet/corefx/issues/34461","RelatedDescription":"Open issue \"HTTP2: Incorrect handling of frames received on closed stream\" (#34461)"},{"Id":"397323023","IsPullRequest":false,"CreatedAt":"2019-01-09T11:12:54","Actor":"geoffkizer","Number":"34460","RawContent":null,"Title":"HTTP2: Rework existing remote server tests to run against remote HTTP2 endpoint also","State":"open","Body":"We have a lot of remote server tests that are currently only running against the HTTP/1.1 remote endpoint.\r\n\r\nWe should modify these to run against the remote HTTP2 endpoint as well.\r\n","Url":"https://github.com/dotnet/corefx/issues/34460","RelatedDescription":"Open issue \"HTTP2: Rework existing remote server tests to run against remote HTTP2 endpoint also\" (#34460)"},{"Id":"397322354","IsPullRequest":false,"CreatedAt":"2019-01-09T11:11:04","Actor":"geoffkizer","Number":"34459","RawContent":null,"Title":"HTTP2: Rework existing loopback-based tests to be protocol version neutral, where applicable","State":"open","Body":"We have a lot of loopback-based tests that are HTTP/1.1 specific.\r\n\r\nMost of these apply to HTTP2 as well. We should:\r\n(1) Implement a loopback server abstraction that allows tests to run against either an HTTP/1.1 loopback server or an HTTP2 loopback server (and other versions in the future)\r\n(2) Modify applicable loopback-based tests to use this abstraction","Url":"https://github.com/dotnet/corefx/issues/34459","RelatedDescription":"Open issue \"HTTP2: Rework existing loopback-based tests to be protocol version neutral, where applicable\" (#34459)"}],"ResultType":"GitHubIssue"},"Roslyn-Issues":{"Issues":[{"Id":"397616796","IsPullRequest":true,"CreatedAt":"2019-01-10T03:00:04","Actor":"dotnet-bot","Number":"32310","RawContent":null,"Title":"Merge master to master-vs-deps","State":"closed","Body":"\nThis is an automatically generated pull request from master into master-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-master-vs-deps\ngit reset --hard upstream/master-vs-deps\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push merges/master-to-master-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/32310","RelatedDescription":"Closed or merged PR \"Merge master to master-vs-deps\" (#32310)"},{"Id":"397649892","IsPullRequest":true,"CreatedAt":"2019-01-10T02:48:17","Actor":"ryzngard","Number":"32314","RawContent":null,"Title":"Feature/move to namespace","State":"open","Body":"","Url":"https://github.com/dotnet/roslyn/pull/32314","RelatedDescription":"Open PR \"Feature/move to namespace\" (#32314)"},{"Id":"397616810","IsPullRequest":true,"CreatedAt":"2019-01-10T02:29:07","Actor":"dotnet-bot","Number":"32311","RawContent":null,"Title":"Merge dev16.1-preview1 to dev16.1-preview1-vs-deps","State":"closed","Body":"\nThis is an automatically generated pull request from dev16.1-preview1 into dev16.1-preview1-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/dev16.1-preview1-to-dev16.1-preview1-vs-deps\ngit reset --hard upstream/dev16.1-preview1-vs-deps\ngit merge upstream/dev16.1-preview1\n# Fix merge conflicts\ngit commit\ngit push merges/dev16.1-preview1-to-dev16.1-preview1-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/32311","RelatedDescription":"Closed or merged PR \"Merge dev16.1-preview1 to dev16.1-preview1-vs-deps\" (#32311)"},{"Id":"397585756","IsPullRequest":true,"CreatedAt":"2019-01-10T01:56:28","Actor":"dotnet-bot","Number":"32299","RawContent":null,"Title":"Merge dev16.0-preview2 to dev16.0-preview2-vs-deps","State":"closed","Body":"\nThis is an automatically generated pull request from dev16.0-preview2 into dev16.0-preview2-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/dev16.0-preview2-to-dev16.0-preview2-vs-deps\ngit reset --hard upstream/dev16.0-preview2-vs-deps\ngit merge upstream/dev16.0-preview2\n# Fix merge conflicts\ngit commit\ngit push merges/dev16.0-preview2-to-dev16.0-preview2-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/32299","RelatedDescription":"Closed or merged PR \"Merge dev16.0-preview2 to dev16.0-preview2-vs-deps\" (#32299)"},{"Id":"397616699","IsPullRequest":true,"CreatedAt":"2019-01-10T01:56:24","Actor":"dotnet-bot","Number":"32308","RawContent":null,"Title":"Merge master to dev16.1-preview1","State":"closed","Body":"\nThis is an automatically generated pull request from master into dev16.1-preview1.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-dev16.1-preview1\ngit reset --hard upstream/dev16.1-preview1\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push merges/master-to-dev16.1-preview1 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/32308","RelatedDescription":"Closed or merged PR \"Merge master to dev16.1-preview1\" (#32308)"},{"Id":"397616851","IsPullRequest":true,"CreatedAt":"2019-01-10T01:30:05","Actor":"dotnet-bot","Number":"32312","RawContent":null,"Title":"Merge master to features/editorconfig-in-compiler","State":"closed","Body":"\nThis is an automatically generated pull request from master into features/editorconfig-in-compiler.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-features/editorconfig-in-compiler\ngit reset --hard upstream/features/editorconfig-in-compiler\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push merges/master-to-features/editorconfig-in-compiler --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/32312","RelatedDescription":"Closed or merged PR \"Merge master to features/editorconfig-in-compiler\" (#32312)"},{"Id":"397629677","IsPullRequest":true,"CreatedAt":"2019-01-10T01:01:21","Actor":"jasonmalinowski","Number":"32313","RawContent":null,"Title":"Finish the project context implementation for the free-threaded project system shims","State":"open","Body":"The handling for determination of project contexts wasn't finished when we merged the work for free-threaded project system shims. This completes the work and fixes a bunch of issues as well.\r\n\r\nThis should fix the Roslyn side of #21358, but there are also some project system bugs that have been found too that will impact it.\r\n\r\nReviewers are **strongly** encouraged to go commit-by-commit here.\r\n\r\nWork remaining:\r\n\r\n- [ ] Remove the existing hack around skipping locks when we remove projects, since those don't work correctly if just files are removed.","Url":"https://github.com/dotnet/roslyn/pull/32313","RelatedDescription":"Open PR \"Finish the project context implementation for the free-threaded project system shims\" (#32313)"},{"Id":"397616749","IsPullRequest":true,"CreatedAt":"2019-01-10T00:30:08","Actor":"dotnet-bot","Number":"32309","RawContent":null,"Title":"Merge master-vs-deps to dev16.1-preview1-vs-deps","State":"closed","Body":"\nThis is an automatically generated pull request from master-vs-deps into dev16.1-preview1-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-vs-deps-to-dev16.1-preview1-vs-deps\ngit reset --hard upstream/dev16.1-preview1-vs-deps\ngit merge upstream/master-vs-deps\n# Fix merge conflicts\ngit commit\ngit push merges/master-vs-deps-to-dev16.1-preview1-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/32309","RelatedDescription":"Closed or merged PR \"Merge master-vs-deps to dev16.1-preview1-vs-deps\" (#32309)"},{"Id":"397585802","IsPullRequest":true,"CreatedAt":"2019-01-10T00:00:06","Actor":"dotnet-bot","Number":"32301","RawContent":null,"Title":"Merge dev16.1-preview1 to dev16.1-preview1-vs-deps","State":"closed","Body":"\nThis is an automatically generated pull request from dev16.1-preview1 into dev16.1-preview1-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/dev16.1-preview1-to-dev16.1-preview1-vs-deps\ngit reset --hard upstream/dev16.1-preview1-vs-deps\ngit merge upstream/dev16.1-preview1\n# Fix merge conflicts\ngit commit\ngit push merges/dev16.1-preview1-to-dev16.1-preview1-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/32301","RelatedDescription":"Closed or merged PR \"Merge dev16.1-preview1 to dev16.1-preview1-vs-deps\" (#32301)"},{"Id":"397614390","IsPullRequest":true,"CreatedAt":"2019-01-09T23:50:08","Actor":"ivanbasov","Number":"32307","RawContent":null,"Title":"Completion window tooltip for constants/extension methods always show…","State":"open","Body":"Fixes https://github.com/dotnet/roslyn/issues/32209\r\n\r\nThis is a regression in Dev16. I assume it is caused by https://github.com/dotnet/roslyn/pull/30242\r\nBTW it does not happen in the new completion.\r\n\r\n@jinujoseph please review if it still should be targeted to Preview 2. \r\n@sharwell , @jasonmalinowski please let me know what kind of unit tests cover the area.","Url":"https://github.com/dotnet/roslyn/pull/32307","RelatedDescription":"Open PR \"Completion window tooltip for constants/extension methods always show…\" (#32307)"},{"Id":"397585617","IsPullRequest":true,"CreatedAt":"2019-01-09T23:30:13","Actor":"dotnet-bot","Number":"32297","RawContent":null,"Title":"Merge dev16.0-preview2 to master","State":"closed","Body":"\nThis is an automatically generated pull request from dev16.0-preview2 into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/dev16.0-preview2-to-master\ngit reset --hard upstream/master\ngit merge upstream/dev16.0-preview2\n# Fix merge conflicts\ngit commit\ngit push merges/dev16.0-preview2-to-master --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/32297","RelatedDescription":"Closed or merged PR \"Merge dev16.0-preview2 to master\" (#32297)"},{"Id":"397585816","IsPullRequest":true,"CreatedAt":"2019-01-09T23:30:06","Actor":"dotnet-bot","Number":"32302","RawContent":null,"Title":"Merge dev16.0-preview2 to features/enhanced-using","State":"closed","Body":"\nThis is an automatically generated pull request from dev16.0-preview2 into features/enhanced-using.\n\n``` bash\ngit fetch --all\ngit checkout merges/dev16.0-preview2-to-features/enhanced-using\ngit reset --hard upstream/features/enhanced-using\ngit merge upstream/dev16.0-preview2\n# Fix merge conflicts\ngit commit\ngit push merges/dev16.0-preview2-to-features/enhanced-using --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/32302","RelatedDescription":"Closed or merged PR \"Merge dev16.0-preview2 to features/enhanced-using\" (#32302)"},{"Id":"397604106","IsPullRequest":true,"CreatedAt":"2019-01-09T23:21:17","Actor":"sharwell","Number":"32306","RawContent":null,"Title":"Avoid retrying work after the queue is cancelled","State":"open","Body":"Fixes #28062\r\n\r\n<details><summary>Ask Mode</summary>\r\n\r\n### Customer scenario\r\n\r\nNo direct reproducer is known.\r\n\r\n### Bugs this fixes\r\n\r\n#28062\r\n\r\n### Workarounds, if any\r\n\r\nNone.\r\n\r\n### Risk\r\n\r\nVery low. This change avoids scheduling work items in three specific queues after global shutdown is requested.\r\n\r\n### Performance impact\r\n\r\nThis change may improve test performance, but is unlikely to have an observable impact elsewhere.\r\n\r\n### Is this a regression from a previous update?\r\n\r\nNo.\r\n\r\n### Root cause analysis\r\n\r\nIf project or document processing was cancelled because the workspace was shut down, items could be rescheduled for execution and never actually execute.\r\n\r\n### How was the bug found?\r\n\r\nCaught by automated testing.\r\n\r\n### Test documentation updated?\r\n\r\nN/A\r\n\r\n</details>","Url":"https://github.com/dotnet/roslyn/pull/32306","RelatedDescription":"Open PR \"Avoid retrying work after the queue is cancelled\" (#32306)"},{"Id":"397592345","IsPullRequest":false,"CreatedAt":"2019-01-09T22:37:56","Actor":"marek-safar","Number":"32305","RawContent":null,"Title":"Quite confusing error message CS0282","State":"open","Body":"**Version Used**: Microsoft (R) Visual C# Compiler version 2.8.2.62916 (2ad4aabc)\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Compile following code\r\n```c#\r\nusing System;\r\nusing System.Runtime.InteropServices;\r\n\r\npartial class Exception2\r\n{\r\n\tprotected event Action a;\r\n}\r\n\r\n[StructLayout (LayoutKind.Sequential)]\r\npartial class Exception2\r\n{\r\n\tprotected event Action b;\r\n}\r\n```\r\n\r\n**Expected Behavior**:\r\n\r\nA warning which makes sense\r\n\r\n**Actual Behavior**:\r\n\r\n```warning CS0282: There is no defined ordering between fields in multiple declarations of partial struct 'Exception2'. To specify an ordering, all instance fields must be in the same declaration.```\r\n\r\n- there is no struct 'Exception2' (it's a class)\r\n- referring to events underlying implementation fields is also confusing\r\n","Url":"https://github.com/dotnet/roslyn/issues/32305","RelatedDescription":"Open issue \"Quite confusing error message CS0282\" (#32305)"},{"Id":"397585637","IsPullRequest":true,"CreatedAt":"2019-01-09T22:30:19","Actor":"dotnet-bot","Number":"32298","RawContent":null,"Title":"Merge master to dev16.1-preview1","State":"closed","Body":"\nThis is an automatically generated pull request from master into dev16.1-preview1.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-dev16.1-preview1\ngit reset --hard upstream/dev16.1-preview1\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push merges/master-to-dev16.1-preview1 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/32298","RelatedDescription":"Closed or merged PR \"Merge master to dev16.1-preview1\" (#32298)"},{"Id":"397585771","IsPullRequest":true,"CreatedAt":"2019-01-09T22:30:13","Actor":"dotnet-bot","Number":"32300","RawContent":null,"Title":"Merge master to master-vs-deps","State":"closed","Body":"\nThis is an automatically generated pull request from master into master-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-master-vs-deps\ngit reset --hard upstream/master-vs-deps\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push merges/master-to-master-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/32300","RelatedDescription":"Closed or merged PR \"Merge master to master-vs-deps\" (#32300)"},{"Id":"397585838","IsPullRequest":true,"CreatedAt":"2019-01-09T22:30:04","Actor":"dotnet-bot","Number":"32303","RawContent":null,"Title":"Merge master to features/editorconfig-in-compiler","State":"closed","Body":"\nThis is an automatically generated pull request from master into features/editorconfig-in-compiler.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-features/editorconfig-in-compiler\ngit reset --hard upstream/features/editorconfig-in-compiler\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push merges/master-to-features/editorconfig-in-compiler --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/32303","RelatedDescription":"Closed or merged PR \"Merge master to features/editorconfig-in-compiler\" (#32303)"},{"Id":"397589803","IsPullRequest":true,"CreatedAt":"2019-01-09T22:29:31","Actor":"cston","Number":"32304","RawContent":null,"Title":"Non-nullable fields of default struct value should be treated as nullable","State":"open","Body":"Fixes #30731","Url":"https://github.com/dotnet/roslyn/pull/32304","RelatedDescription":"Open PR \"Non-nullable fields of default struct value should be treated as nullable\" (#32304)"},{"Id":"397577803","IsPullRequest":true,"CreatedAt":"2019-01-09T21:52:53","Actor":"InRedikaWB","Number":"32296","RawContent":null,"Title":"Add missed space in markdown header","State":"open","Body":"","Url":"https://github.com/dotnet/roslyn/pull/32296","RelatedDescription":"Open PR \"Add missed space in markdown header\" (#32296)"},{"Id":"397570921","IsPullRequest":false,"CreatedAt":"2019-01-09T21:32:16","Actor":"chborl","Number":"32295","RawContent":null,"Title":"Need documentation page itemizing the command handling chains","State":"open","Body":"From PR comments https://github.com/dotnet/roslyn/pull/30743#discussion_r245030803 and https://github.com/dotnet/roslyn/pull/30743#discussion_r246420636\r\n\r\nWe should document command handling chains ","Url":"https://github.com/dotnet/roslyn/issues/32295","RelatedDescription":"Open issue \"Need documentation page itemizing the command handling chains\" (#32295)"},{"Id":"397570757","IsPullRequest":true,"CreatedAt":"2019-01-09T21:31:42","Actor":"mavasani","Number":"32294","RawContent":null,"Title":"Skip flaky test Test_TagSourceDiffer","State":"open","Body":"#28062 tracks fixing and unskipping the test","Url":"https://github.com/dotnet/roslyn/pull/32294","RelatedDescription":"Open PR \"Skip flaky test Test_TagSourceDiffer\" (#32294)"},{"Id":"397564220","IsPullRequest":true,"CreatedAt":"2019-01-09T21:12:26","Actor":"mavasani","Number":"32293","RawContent":null,"Title":"Handle null value for `IDeclarationPatternOperation.DeclaredSymbol`","State":"open","Body":"https://github.com/dotnet/roslyn/commit/6224a5c2feb8c9096cf5765f3d8d2ded396e7e88#diff-b68aa1802251151217571a56d9bfd2b8R31 changed the semantics of `IDeclarationPatternOperation` to allow null `DeclaredSymbol`. Fix SymbolUsageAnalysis invoked by unused parameters/values analyzer to handle this case. Confirmed the NRE in the unit test prior to the fix.\r\n\r\nFixes #32287","Url":"https://github.com/dotnet/roslyn/pull/32293","RelatedDescription":"Open PR \"Handle null value for `IDeclarationPatternOperation.DeclaredSymbol`\" (#32293)"},{"Id":"397555693","IsPullRequest":false,"CreatedAt":"2019-01-09T20:47:11","Actor":"gafter","Number":"32292","RawContent":null,"Title":"Permit a trailing comma inside a switch expression","State":"open","Body":"Per LDM 2019-01-09 we have accepted the proposal in https://github.com/dotnet/csharplang/issues/2098 to allow a trailing comma inside a switch expression\r\n``` c#\r\n_ = e switch\r\n    {\r\n        1 => 2,\r\n        3 => 4, // comma now allowed here\r\n    }\r\n```\r\nThis needs to be implemented.\r\n","Url":"https://github.com/dotnet/roslyn/issues/32292","RelatedDescription":"Open issue \"Permit a trailing comma inside a switch expression\" (#32292)"},{"Id":"397554576","IsPullRequest":false,"CreatedAt":"2019-01-09T20:43:50","Actor":"gafter","Number":"32291","RawContent":null,"Title":"Rename deconstruct_pattern to positional_pattern","State":"open","Body":"We should change both the spec grammar and the syntax nodes.","Url":"https://github.com/dotnet/roslyn/issues/32291","RelatedDescription":"Open issue \"Rename deconstruct_pattern to positional_pattern\" (#32291)"},{"Id":"397553624","IsPullRequest":false,"CreatedAt":"2019-01-09T20:40:53","Actor":"gafter","Number":"32290","RawContent":null,"Title":"Change the syntactic interaction of array dimension specifiers and the nullable annotation","State":"open","Body":"Per LDM 2019-01-09: We revisited the interaction of the nullable annotation and array dimension specifiers.  The new resolution is that the `?` annotation is a type constructor that can be applied to array types, and an array type does not have any `?` among its array specifiers.  This is the second option in https://github.com/dotnet/roslyn/issues/32141#issuecomment-451801073.\r\n\r\nThe [current implementation of specifying nullable annotations on array types](https://github.com/dotnet/csharplang/blob/master/meetings/2018/LDM-2018-11-28.md#nullable-array-specifiers) is something like this\r\n\r\n``` antlr\r\narray_type\r\n    : non_array_type rank_specifier+\r\n    ;\r\n\r\nnullable_type\r\n    : non_array_or_nullable_type '?'\r\n    ;\r\n\r\nrank_specifier\r\n    : '[' dim_separator* ']' '?'?\r\n    ;\r\n\r\ndim_separator\r\n    : ','\r\n    ;\r\n```\r\n\r\nThe revised approach is something like this\r\n\r\n``` antlr\r\narray_type\r\n    : non_array_type rank_specifier+\r\n    ;\r\n\r\nnullable_type\r\n    : non_nullable_type '?'\r\n    ;\r\n\r\nrank_specifier\r\n    : '[' dim_separator* ']'\r\n    ;\r\n\r\ndim_separator\r\n    : ','\r\n    ;\r\n```\r\n","Url":"https://github.com/dotnet/roslyn/issues/32290","RelatedDescription":"Open issue \"Change the syntactic interaction of array dimension specifiers and the nullable annotation\" (#32290)"},{"Id":"397550768","IsPullRequest":false,"CreatedAt":"2019-01-09T20:32:14","Actor":"jcouv","Number":"32289","RawContent":null,"Title":"Async-streams: allow pattern-based `await foreach` to use extension methods","State":"open","Body":"Previously, we thought this would be handled by the general feature of allowing pattern-based `foreach` to use extension methods. But that was split into a separate feature (hopefully still candidate for 8.0).\r\n\r\nEven if we don't do it for regular `foreach`, LDM wants to do this for `await foreach`.\r\nAnd when we do it, the order should be: (1) instance method, (2) interface, (3) extension method.\r\nThat order matches the behavior we want for `foreach` and we also think it is sensible in general.\r\n\r\nFrom LDM 1/9.\r\n\r\n```C#\r\n        [Fact]\r\n        public void TestGetAsyncEnumeratorPatternViaExtensions()\r\n        {\r\n            string source = @\"\r\npublic class C\r\n{\r\n    async System.Threading.Tasks.Task M()\r\n    {\r\n        await foreach (var i in new C())\r\n        {\r\n        }\r\n    }\r\n    public sealed class Enumerator\r\n    {\r\n    }\r\n}\r\npublic static class Extensions\r\n{\r\n    public static C.Enumerator GetAsyncEnumerator(this C c)\r\n    {\r\n        throw null;\r\n    }\r\n}\";\r\n            var comp = CreateCompilationWithMscorlib46(source);\r\n            comp.VerifyDiagnostics(\r\n                // (6,33): error CS8411: Async foreach statement cannot operate on variables of type 'C' because 'C' does not contain a public definition for 'GetAsyncEnumerator'\r\n                //         await foreach (var i in new C())\r\n                Diagnostic(ErrorCode.ERR_AwaitForEachMissingMember, \"new C()\").WithArguments(\"C\", \"GetAsyncEnumerator\").WithLocation(6, 33)\r\n                );\r\n        }\r\n```","Url":"https://github.com/dotnet/roslyn/issues/32289","RelatedDescription":"Open issue \"Async-streams: allow pattern-based `await foreach` to use extension methods\" (#32289)"},{"Id":"397549006","IsPullRequest":false,"CreatedAt":"2019-01-09T20:29:19","Actor":"chsienki","Number":"32288","RawContent":null,"Title":"Nested nullability cannot be cast away without warning","State":"closed","Body":"Casting away nested nullability results in a warning:\r\n\r\n``` c#\r\n#nullable enable\r\nclass C<T>\r\n{\r\n    static void F(C<object?> y)\r\n    {\r\n        var x = (C<object>)y; // warning CS8619: Nullability of reference types in value of type 'C<object?>' doesn't match target type 'C<object>'\r\n    }\r\n}\r\n\r\n```\r\n\r\nPossibly related to #29641","Url":"https://github.com/dotnet/roslyn/issues/32288","RelatedDescription":"Closed issue \"Nested nullability cannot be cast away without warning\" (#32288)"},{"Id":"397480816","IsPullRequest":true,"CreatedAt":"2019-01-09T19:31:28","Actor":"JoeRobich","Number":"32285","RawContent":null,"Title":"Trigger Branch and PR CI builds for 16.0 preview branches","State":"closed","Body":"","Url":"https://github.com/dotnet/roslyn/pull/32285","RelatedDescription":"Closed or merged PR \"Trigger Branch and PR CI builds for 16.0 preview branches\" (#32285)"},{"Id":"397513286","IsPullRequest":false,"CreatedAt":"2019-01-09T19:09:16","Actor":"jeremymeng","Number":"32287","RawContent":null,"Title":"Warning\tAD0001\tAnalyzer 'Microsoft.CodeAnalysis.CSharp.RemoveUnusedParametersAndValues.CSharpRemoveUnusedParametersAndValuesDiagnosticAnalyzer' threw an exception of type 'System.NullReferenceException'","State":"open","Body":"**Version Used**: VS 2019 Preview 28508.105.d16.0\r\nC# Tools   3.0.0-beta2-19055-10+15504ac30ab7b6f5bfedcdeee0a180915689f66f\r\n\r\n**Steps to Reproduce**:\r\nI don't have a repro yet. The following warnings are showing in my Error List\r\n\r\n```\r\n\r\nSeverity\tCode\tDescription\tProject\tFile\tLine\tSuppression State\tDetail Description\r\nWarning\tAD0001\tAnalyzer 'Microsoft.CodeAnalysis.CSharp.RemoveUnusedParametersAndValues.CSharpRemoveUnusedParametersAndValuesDiagnosticAnalyzer' threw an exception of type 'System.NullReferenceException' with message 'Object reference not set to an instance of an object.'.\tMicrosoft.CodeAnalysis.Converter\t\t1\tActive\tAnalyzer 'Microsoft.CodeAnalysis.CSharp.RemoveUnusedParametersAndValues.CSharpRemoveUnusedParametersAndValuesDiagnosticAnalyzer' threw the following exception:\r\n'Exception occurred with following context:\r\nCompilation: Microsoft.CodeAnalysis.Converter\r\nISymbol: VisitSimpleArgument (Method)\r\n\r\nSystem.NullReferenceException: Object reference not set to an instance of an object.\r\n   at Microsoft.CodeAnalysis.FlowAnalysis.SymbolUsageAnalysis.SymbolUsageAnalysis.AnalysisData.OnWriteReferenceFound(ISymbol symbol, IOperation operation, Boolean maybeWritten)\r\n   at Microsoft.CodeAnalysis.FlowAnalysis.SymbolUsageAnalysis.SymbolUsageAnalysis.Walker.OnReferenceFound(ISymbol symbol, IOperation operation)\r\n   at Microsoft.CodeAnalysis.FlowAnalysis.SymbolUsageAnalysis.SymbolUsageAnalysis.Walker.VisitDeclarationPattern(IDeclarationPatternOperation operation)\r\n   at Microsoft.CodeAnalysis.Operations.DeclarationPatternOperation.Accept(OperationVisitor visitor)\r\n   at Microsoft.CodeAnalysis.Operations.OperationWalker.Visit(IOperation operation)\r\n   at Microsoft.CodeAnalysis.Operations.OperationWalker.VisitArray[T](IEnumerable`1 operations)\r\n   at Microsoft.CodeAnalysis.Operations.OperationWalker.DefaultVisit(IOperation operation)\r\n   at Microsoft.CodeAnalysis.Operations.OperationVisitor.VisitPatternCaseClause(IPatternCaseClauseOperation operation)\r\n   at Microsoft.CodeAnalysis.Operations.BasePatternCaseClauseOperation.Accept(OperationVisitor visitor)\r\n   at Microsoft.CodeAnalysis.Operations.OperationWalker.Visit(IOperation operation)\r\n   at Microsoft.CodeAnalysis.Operations.OperationWalker.VisitArray[T](IEnumerable`1 operations)\r\n   at Microsoft.CodeAnalysis.Operations.OperationWalker.DefaultVisit(IOperation operation)\r\n   at Microsoft.CodeAnalysis.Operations.OperationVisitor.VisitSwitchCase(ISwitchCaseOperation operation)\r\n   at Microsoft.CodeAnalysis.Operations.BaseSwitchCaseOperation.Accept(OperationVisitor visitor)\r\n   at Microsoft.CodeAnalysis.Operations.OperationWalker.Visit(IOperation operation)\r\n   at Microsoft.CodeAnalysis.Operations.OperationWalker.VisitArray[T](IEnumerable`1 operations)\r\n   at Microsoft.CodeAnalysis.Operations.OperationWalker.DefaultVisit(IOperation operation)\r\n   at Microsoft.CodeAnalysis.Operations.OperationVisitor.VisitSwitch(ISwitchOperation operation)\r\n   at Microsoft.CodeAnalysis.Operations.BaseSwitchOperation.Accept(OperationVisitor visitor)\r\n   at Microsoft.CodeAnalysis.Operations.OperationWalker.Visit(IOperation operation)\r\n   at Microsoft.CodeAnalysis.Operations.OperationWalker.VisitArray[T](IEnumerable`1 operations)\r\n   at Microsoft.CodeAnalysis.Operations.OperationWalker.DefaultVisit(IOperation operation)\r\n   at Microsoft.CodeAnalysis.Operations.OperationVisitor.VisitBlock(IBlockOperation operation)\r\n   at Microsoft.CodeAnalysis.Operations.BaseBlockOperation.Accept(OperationVisitor visitor)\r\n   at Microsoft.CodeAnalysis.Operations.OperationWalker.Visit(IOperation operation)\r\n   at Microsoft.CodeAnalysis.Operations.OperationWalker.VisitArray[T](IEnumerable`1 operations)\r\n   at Microsoft.CodeAnalysis.Operations.OperationWalker.DefaultVisit(IOperation operation)\r\n   at Microsoft.CodeAnalysis.Operations.OperationVisitor.VisitConditional(IConditionalOperation operation)\r\n   at Microsoft.CodeAnalysis.Operations.BaseConditionalOperation.Accept(OperationVisitor visitor)\r\n   at Microsoft.CodeAnalysis.Operations.OperationWalker.Visit(IOperation operation)\r\n   at Microsoft.CodeAnalysis.Operations.OperationWalker.VisitArray[T](IEnumerable`1 operations)\r\n   at Microsoft.CodeAnalysis.Operations.OperationWalker.DefaultVisit(IOperation operation)\r\n   at Microsoft.CodeAnalysis.Operations.OperationVisitor.VisitBlock(IBlockOperation operation)\r\n   at Microsoft.CodeAnalysis.Operations.BaseBlockOperation.Accept(OperationVisitor visitor)\r\n   at Microsoft.CodeAnalysis.Operations.OperationWalker.Visit(IOperation operation)\r\n   at Microsoft.CodeAnalysis.FlowAnalysis.SymbolUsageAnalysis.SymbolUsageAnalysis.Walker.Visit(IEnumerable`1 operations, AnalysisData analysisData, CancellationToken cancellationToken)\r\n   at Microsoft.CodeAnalysis.FlowAnalysis.SymbolUsageAnalysis.SymbolUsageAnalysis.Walker.AnalyzeOperationsAndUpdateData(IEnumerable`1 operations, AnalysisData analysisData, CancellationToken cancellationToken)\r\n   at Microsoft.CodeAnalysis.FlowAnalysis.SymbolUsageAnalysis.SymbolUsageAnalysis.Run(IOperation rootOperation, ISymbol owningSymbol, CancellationToken cancellationToken)\r\n   at Microsoft.CodeAnalysis.RemoveUnusedParametersAndValues.AbstractRemoveUnusedParametersAndValuesDiagnosticAnalyzer.SymbolStartAnalyzer.BlockAnalyzer.AnalyzeUnusedValueAssignments(OperationBlockAnalysisContext context, Boolean isComputingUnusedParams, PooledHashSet`1 symbolUsageResultsBuilder, Boolean& hasBlockWithAllUsedSymbolWrites)\r\n   at Microsoft.CodeAnalysis.RemoveUnusedParametersAndValues.AbstractRemoveUnusedParametersAndValuesDiagnosticAnalyzer.SymbolStartAnalyzer.BlockAnalyzer.AnalyzeOperationBlockEnd(OperationBlockAnalysisContext context)\r\n   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.<>c__55`2.<ExecuteBlockActions>b__55_1(ValueTuple`2 data)\r\n   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.ExecuteAndCatchIfThrows_NoLock[TArg](DiagnosticAnalyzer analyzer, Action`1 analyze, TArg argument, Nullable`1 info)\r\n-----\r\n'.\r\n```\r\n\r\n\r\n**Expected Behavior**:\r\n\r\nNo AD0001 warnings\r\n\r\n**Actual Behavior**:\r\n","Url":"https://github.com/dotnet/roslyn/issues/32287","RelatedDescription":"Open issue \"Warning\tAD0001\tAnalyzer 'Microsoft.CodeAnalysis.CSharp.RemoveUnusedParametersAndValues.CSharpRemoveUnusedParametersAndValuesDiagnosticAnalyzer' threw an exception of type 'System.NullReferenceException'\" (#32287)"},{"Id":"397487877","IsPullRequest":true,"CreatedAt":"2019-01-09T18:00:00","Actor":"sharwell","Number":"32286","RawContent":null,"Title":"Fix formatting of positional patterns","State":"open","Body":"Closes #27268","Url":"https://github.com/dotnet/roslyn/pull/32286","RelatedDescription":"Open PR \"Fix formatting of positional patterns\" (#32286)"}],"ResultType":"GitHubIssue"},"CoreRT-Issues":{"Issues":[{"Id":"397661972","IsPullRequest":true,"CreatedAt":"2019-01-10T03:54:04","Actor":"yowl","Number":"6800","RawContent":null,"Title":"WIP: WASM: Enable reflection for types","State":"open","Body":"Fixes #5842 \r\nThanks for all the help on this.\r\nI'm leaving this WIP as it contains 2 changes from @morganbr in `ILToWebAssemblyImporter.cs`: the funclets for try/catch/finally which is needed here; and some alignment fixes which is not strictly necessary for the WASM=1 output, but it was earlier in the branch and was useful for debugging.  Ideally these changes would be merged separately but this work is getting old and I wanted to push it along as the merge to `master` was hard enough now.  And with respect to the merge, the work here might be useful for Morgan as due to the overlapping time of the `ThrowIfNull` changes and these the merge is not straightforward.   Also maybe the other parts of this could be reviewed?","Url":"https://github.com/dotnet/corert/pull/6800","RelatedDescription":"Open PR \"WIP: WASM: Enable reflection for types\" (#6800)"},{"Id":"397602731","IsPullRequest":true,"CreatedAt":"2019-01-09T23:16:03","Actor":"dotnet-bot","Number":"6799","RawContent":null,"Title":"Merge changes from TFS","State":"open","Body":"When merging, this PR, please ensure a merge commit is created as automation requires the merge commit.  Do not 'Squash and merge' or 'Rebase and merge'!","Url":"https://github.com/dotnet/corert/pull/6799","RelatedDescription":"Open PR \"Merge changes from TFS\" (#6799)"},{"Id":"397600408","IsPullRequest":true,"CreatedAt":"2019-01-09T23:06:55","Actor":"trylek","Number":"6798","RawContent":null,"Title":"Generic lookup fixes","State":"open","Body":"1) Add new form of generic lookup for generic non-GC static base.\r\n\r\n2) Stop back-translating canonical fields to their runtime\r\ndetermined counterparts for the purpose of emitting R2R signatures.\r\n\r\nThese changes fix three Pri# 0 CoreCLR tests.\r\n\r\nThanks\r\n\r\nTomas","Url":"https://github.com/dotnet/corert/pull/6798","RelatedDescription":"Open PR \"Generic lookup fixes\" (#6798)"},{"Id":"397152681","IsPullRequest":true,"CreatedAt":"2019-01-09T22:25:51","Actor":"trylek","Number":"6791","RawContent":null,"Title":"Fix generic lookup cells to be per method context","State":"closed","Body":"1) Clean up generic lookup tests so that the TH->RTTH helper is\r\nonly called from a single method (GetTypeName). This is no longer\r\nstrictly necessary as Crossgen started to support the helper\r\nbut I believe it to be good for general hygiene.\r\n\r\n2) Minor improvements in the R2R test harness to display ordered\r\nsets of whitelisted vs. non-whitelisted jitted methods.\r\n\r\n3) It seems to me that GenericLookupSignature should always pass\r\naround the instantiating stub flag as the exact purpose of the\r\nsignature is to cater for shared methods with the extra\r\ninstantiation argument.\r\n\r\n4) Based on JanK's clarification I have fixed the CPAOT compiler\r\nto emit separate generic lookup cells for each context method.\r\n\r\nThanks\r\n\r\nTomas","Url":"https://github.com/dotnet/corert/pull/6791","RelatedDescription":"Closed or merged PR \"Fix generic lookup cells to be per method context\" (#6791)"},{"Id":"397575422","IsPullRequest":true,"CreatedAt":"2019-01-09T21:45:59","Actor":"nattress","Number":"6797","RawContent":null,"Title":"Update RyuJIT","State":"open","Body":"Breaking JIT interface change requires updating CoreRT's RyuJit version so we can create local debug JITs to debug CPAOT.","Url":"https://github.com/dotnet/corert/pull/6797","RelatedDescription":"Open PR \"Update RyuJIT\" (#6797)"},{"Id":"397475559","IsPullRequest":true,"CreatedAt":"2019-01-09T17:27:44","Actor":"Dotnet-GitSync-Bot","Number":"6796","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"open","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @jkotas @marek-safar @jkotas","Url":"https://github.com/dotnet/corert/pull/6796","RelatedDescription":"Open PR \"Mirror changes from dotnet/coreclr\" (#6796)"},{"Id":"397245960","IsPullRequest":false,"CreatedAt":"2019-01-09T16:37:51","Actor":"xoofx","Number":"6794","RawContent":null,"Title":"Failure with ReadyToRun without asking for ReadyToRun","State":"closed","Body":"Hey,\r\n\r\nI'm trying to use the latest clrjit(ilc) by compiling from CoreCLR master but I'm getting a weird behavior where the `CorInfoImpl.GetHelperFtnUncached` is being called with arguments that are not handled (like `CORINFO_HELP_THROW_TYPE_NOT_SUPPORTED`, `CORINFO_HELP_POLL_GC`...etc.) and If I add fake handling here, it will fail later on `getReadyToRunHelper` not handling `CORINFO_HELP_TYPEHANDLE_TO_RUNTIMETYPEHANDLE_MAYBENULL` while I'm not using ilc with the readytorun option.\r\n\r\nThe code that I'm trying to compile is quite simple though:\r\n\r\n```c#\r\n    class Program\r\n    {\r\n        static int Main()\r\n        {\r\n            var array = new int[] {1, 2, 3, 4};\r\n\r\n            var result = 0;\r\n            for (int i = 0; i < array.Length; i++)\r\n            {\r\n                result = array[i];\r\n            }\r\n\r\n            return result;\r\n        }\r\n    }\r\n```\r\n\r\nAm I doing something wrong? Or something changed in CoreCLR that should be passed to RyuJit or?","Url":"https://github.com/dotnet/corert/issues/6794","RelatedDescription":"Closed issue \"Failure with ReadyToRun without asking for ReadyToRun\" (#6794)"},{"Id":"397315768","IsPullRequest":true,"CreatedAt":"2019-01-09T12:19:04","Actor":"Dotnet-GitSync-Bot","Number":"6795","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @wfurt","Url":"https://github.com/dotnet/corert/pull/6795","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#6795)"},{"Id":"397219613","IsPullRequest":false,"CreatedAt":"2019-01-09T07:18:01","Actor":"rocket0634","Number":"6793","RawContent":null,"Title":"RuntimeIdentifier Platform 'win-x64' and the PlatformTarget 'x86' must be compatible","State":"closed","Body":"I was attempting to build a console application in DotNet Native, to try and minimize the amount of files I would need to distribute when publishing my .NET Core app. Before trying to migrate my entire app, I tried to just compile a simple Hello World app, and found instructions in this github for generating one. Unfortunately, any time I try to run this command:\r\ndotnet publish -r win-x64 -c release\r\nI get the error shown in the title. [error NETSDK1032: The RuntimeIdentifier Platform 'win-x64' and the PlatformTarget 'x86' must be compatible]\r\nI've followed every step in the Hello World tutorial exactly, which doesn't really say more than to grab a couple of nuget files and publish. If someone could direct me to additional things I need to do to make it work, please let me know. [In the long run, I want to publish the app for Windows, Mac, and Linux, in either 32/64 bit, and if corert can't manage one of them, then I can use normal Net Core to publish them. For now, I'm just trying to get win64 to work.]\r\n\r\nAlso, in previous attempts, I ran into this issue: \"The PrivateSdkAssemblies ItemGroup is required for _ComputeAssembliesToCompileToNative\".","Url":"https://github.com/dotnet/corert/issues/6793","RelatedDescription":"Closed issue \"RuntimeIdentifier Platform 'win-x64' and the PlatformTarget 'x86' must be compatible\" (#6793)"},{"Id":"397162184","IsPullRequest":true,"CreatedAt":"2019-01-09T02:00:56","Actor":"Dotnet-GitSync-Bot","Number":"6792","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub","Url":"https://github.com/dotnet/corert/pull/6792","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#6792)"},{"Id":"397144944","IsPullRequest":true,"CreatedAt":"2019-01-09T01:28:07","Actor":"trylek","Number":"6790","RawContent":null,"Title":"Fix getFuntionEntryPoint and canTailCall according to Crossgen","State":"closed","Body":"This change fixes the two JIT interface methods according to their\r\nCrossgen implementation.\r\n\r\nThanks\r\n\r\nTomas","Url":"https://github.com/dotnet/corert/pull/6790","RelatedDescription":"Closed or merged PR \"Fix getFuntionEntryPoint and canTailCall according to Crossgen\" (#6790)"},{"Id":"396689793","IsPullRequest":true,"CreatedAt":"2019-01-09T01:27:27","Actor":"marek-safar","Number":"6782","RawContent":null,"Title":"Moves common COM type to shared corelib partition","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/6782","RelatedDescription":"Closed or merged PR \"Moves common COM type to shared corelib partition\" (#6782)"},{"Id":"397140992","IsPullRequest":true,"CreatedAt":"2019-01-09T00:41:31","Actor":"trylek","Number":"6789","RawContent":null,"Title":"Mark monitor helpers as requiring runtime JIT","State":"closed","Body":"In accordance with Crossgen behavior I am blocking out the\r\nMonitor-related R2R helpers as requiring runtime JIT.\r\n\r\nThanks\r\n\r\nTomas","Url":"https://github.com/dotnet/corert/pull/6789","RelatedDescription":"Closed or merged PR \"Mark monitor helpers as requiring runtime JIT\" (#6789)"},{"Id":"397121586","IsPullRequest":true,"CreatedAt":"2019-01-08T22:23:33","Actor":"trylek","Number":"6788","RawContent":null,"Title":"CPAOT support for RVA-backed static fields","State":"open","Body":"This change adds support for the helper\r\nCORINFO_HELP_TYPEHANDLE_TO_RUNTIMETYPEHANDLE and fixes RVA field\r\nmanagement. In contrast to Crossgen which selectively copies over\r\nparts of the MSIL file (including the RVA field data), we simply\r\npoint the RVA field address to the pre-existing data block in the\r\nMSIL file embedded in the R2R image.\r\n\r\nTo achieve this goal I had to slightly generalize the section\r\nbuilder by adding new support for \"section start nodes\" - symbol\r\nnodes representing the beginning of each PE section. In case of\r\nsections copied from the original MSIL executable, the section\r\nstart nodes point at the \"original\" MSIL section content.\r\n\r\nUsing this construct I was able to introduce a new node RVAFieldNode\r\nwhich represents a given RVA field as an offset relative to one\r\nof the section start symbols. Upon codegen, the RVAFieldNode\r\nemits a relocatable pointer-sized record in the R/W data section\r\nwhich points at the beginning of the RVA field data in the MSIL.\r\n\r\nI have also ported JanK's RVA unit test to our base CPAOT test suite.\r\n\r\nThanks\r\n\r\nTomas","Url":"https://github.com/dotnet/corert/pull/6788","RelatedDescription":"Open PR \"CPAOT support for RVA-backed static fields\" (#6788)"},{"Id":"396900376","IsPullRequest":true,"CreatedAt":"2019-01-08T16:36:49","Actor":"trylek","Number":"6786","RawContent":null,"Title":"Fix data blob offset for dynamic statics","State":"closed","Body":"In my initial implementation of dynamic statics, I misread the code\r\nin DomainLocalModule::NormalDynamicEntry as I incorrectly thought\r\nthat FEATURE_64BIT_ALIGNMENT would be set for AMD64. This is wrong,\r\nthe flag is only used on ARM32 where it makes sure that the data\r\nblob starts at an 8-byte boundary. This also implies that the constants\r\nmust be per architecture, not per pointer size. This change seems to be\r\nfixing almost a hundred CoreCLR Pri#0 test failures.\r\n\r\nThanks\r\n\r\nTomas","Url":"https://github.com/dotnet/corert/pull/6786","RelatedDescription":"Closed or merged PR \"Fix data blob offset for dynamic statics\" (#6786)"},{"Id":"396905432","IsPullRequest":false,"CreatedAt":"2019-01-08T13:24:43","Actor":"RustyCZ","Number":"6787","RawContent":null,"Title":"Access violation in GC thread","State":"open","Body":"I have tried Microsoft.DotNet.ILCompiler in version 1.0.0-alpha-27221-02 and I have encountered an error Access violation reading location 0x0000000000000000 in garbage collector thread. I am using Span of structures which have explicit layout and size if it may be of any help. It was compiled for win-x64 netcoreapp2.1.\r\n\r\nException thrown at 0x00007FF7325F5870 in Test.exe: 0xC0000005: Access violation reading location 0x0000000000000000.\r\n\r\n[Inline Frame] Test.exe!WKS::my_get_size\r\n[Inline Frame] Test.exe!WKS::my_get_size(Object *) Line 8905\r\nTest.exe!WKS::gc_heap::mark_object_simple1(unsigned char * oo, unsigned char * start) Line 17649\r\nTest.exe!WKS::gc_heap::mark_object_simple(unsigned char * * po) Line 18182\r\nTest.exe!WKS::GCHeap::Promote(Object * * ppObject, ScanContext * sc, unsigned int flags) Line 33839\r\nTest.exe!ScanConsecutiveHandlesWithoutUserData(Object * * pValue, Object * * pLast, ScanCallbackInfo * pInfo, unsigned __int64 * __formal) Line 452\r\n[Inline Frame] Test.exe!BlockScanBlocksEphemeralWorker(unsigned int * dwClumpMask, unsigned int) Line 685\r\nTest.exe!BlockScanBlocksEphemeral(TableSegment * pSegment, unsigned int uBlock, unsigned int uCount, ScanCallbackInfo * pInfo) Line 742\r\n[Inline Frame] Test.exe!SegmentScanByTypeMap(TableSegment *) Line 1698\r\nTest.exe!TableScanHandles(HandleTable * pTable, const unsigned int * puType, unsigned int uTypeCount, TableSegment *(*)(HandleTable *, TableSegment *, CrstHolderWithState *) pfnSegmentIterator, void(*)(TableSegment *, unsigned int, unsigned int, ScanCallbackInfo *) pfnBlockHandler, ScanCallbackInfo * pInfo, CrstHolderWithState * pCrstHolder) Line 1756\r\nTest.exe!HndScanHandlesForGC(HandleTable * hTable, void(*)(Object * *, unsigned __int64 *, unsigned __int64, unsigned __int64) scanProc, unsigned __int64 param1, unsigned __int64 param2, const unsigned int * types, unsigned int typeCount, unsigned int condemned, unsigned int maxgen, unsigned int flags) Line 1044\r\nTest.exe!Ref_TraceNormalRoots(unsigned int condemned, unsigned int maxgen, ScanContext * sc, void(*)(Object * *, ScanContext *, unsigned int) fn) Line 1144\r\nTest.exe!GCScan::GcScanHandles(void(*)(Object * *, ScanContext *, unsigned int) fn, int condemned, int max_gen, ScanContext * sc) Line 187\r\nTest.exe!WKS::gc_heap::mark_phase(int condemned_gen_number, unsigned int mark_only_p) Line 19638\r\nTest.exe!WKS::gc_heap::gc1() Line 15272\r\nTest.exe!WKS::gc_heap::garbage_collect(int n) Line 16864\r\nTest.exe!WKS::GCHeap::GarbageCollectGeneration(unsigned int gen, gc_reason reason) Line 35231\r\nTest.exe!WKS::gc_heap::try_allocate_more_space(alloc_context * acontext, unsigned __int64 size, int gen_number) Line 13083\r\n[Inline Frame] Test.exe!WKS::gc_heap::allocate_more_space(alloc_context *) Line 13370\r\n[Inline Frame] Test.exe!WKS::gc_heap::allocate(unsigned __int64) Line 13401\r\nTest.exe!WKS::GCHeap::Alloc(gc_alloc_context * context, unsigned __int64 size, unsigned int flags) Line 34542\r\nTest.exe!RhpNewObject() Line 76\r\n[External Code]\r\n","Url":"https://github.com/dotnet/corert/issues/6787","RelatedDescription":"Open issue \"Access violation in GC thread\" (#6787)"},{"Id":"396767508","IsPullRequest":true,"CreatedAt":"2019-01-08T12:30:49","Actor":"Dotnet-GitSync-Bot","Number":"6785","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @danmosemsft","Url":"https://github.com/dotnet/corert/pull/6785","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#6785)"},{"Id":"396739613","IsPullRequest":false,"CreatedAt":"2019-01-08T03:46:39","Actor":"frankzye","Number":"6784","RawContent":null,"Title":"using npgsql but throw Object reference not set to an instance of an object exception","State":"open","Body":"System.NullReferenceException: Object reference not set to an instance of an object . \r\nat Npgsql.Logging.NpgsqlLogManager.GetClassFullName() + 0x64 .    \r\nat Npgsql.NpgsqlConnection..cctor() + 0x53 . \r\n\r\nand I found the following source code:  \r\n`\r\nMethodBase method = frame.GetMethod();  \r\n                declaringType = method.DeclaringType;  \r\n                if (declaringType == null) { . \r\n                    className = method.Name;  \r\n                    break;  \r\n}\r\n`\r\nhow to handle this exception , and when the third class lib using reflection, are there any work around ways?\r\n","Url":"https://github.com/dotnet/corert/issues/6784","RelatedDescription":"Open issue \"using npgsql but throw Object reference not set to an instance of an object exception\" (#6784)"},{"Id":"396710200","IsPullRequest":true,"CreatedAt":"2019-01-08T03:10:45","Actor":"Dotnet-GitSync-Bot","Number":"6783","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @marek-safar","Url":"https://github.com/dotnet/corert/pull/6783","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#6783)"},{"Id":"396548672","IsPullRequest":true,"CreatedAt":"2019-01-07T20:09:27","Actor":"Dotnet-GitSync-Bot","Number":"6781","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @marek-safar","Url":"https://github.com/dotnet/corert/pull/6781","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#6781)"},{"Id":"396456488","IsPullRequest":false,"CreatedAt":"2019-01-07T11:47:26","Actor":"adamsitnik","Number":"6780","RawContent":null,"Title":"Potential deadlock?","State":"open","Body":"@jkotas I tried to run all the benchmarks from `dotnet/performance` repository for CoreRT (https://github.com/dotnet/performance/pull/218)\r\n\r\nI started all the benchmarks before going to sleep and expected that in the morning I am going to have all the results ready waiting for me. However, the run got deadlocked after 1h and I don't have full results yet.\r\n\r\nBenchmark which got deadlocked comes from [CoreFX](https://github.com/dotnet/corefx/blob/4378851bc5fd0e3c5043a6d0a3ac835e838fcf7d/src/System.Collections.Concurrent/tests/Performance/Perf.ConcurrentStack.cs#L146) and I ported in the following [way](https://github.com/dotnet/performance/blob/3941f11e000edd7a404599fc2e401129c25bc4ad/src/benchmarks/micro/corefx/System.Collections/Concurrent/AddRemoveFromDifferentThreads.cs#L71-L107) to the performance repo.\r\n\r\n@stephentoub could you please take a look at my port? I double checked it and it looks good to me.\r\n\r\nI was able to create a small repro without BenchmarkDotNet dependency and reproduce the deadlock on my Ubuntu machine:\r\n\r\n```cs\r\nusing System;\r\nusing System.Diagnostics;\r\nusing System.Linq;\r\nusing System.Threading;\r\nusing System.Threading.Tasks;\r\nusing System.Runtime.CompilerServices;\r\nusing System.Collections.Concurrent;\r\n\r\nnamespace BenchmarkDotNet.Autogenerated\r\n{\r\n    public class UniqueProgramName\r\n    {\r\n        public static void Main(string[] args)\r\n        {\r\n            var sut = new AddRemoveFromDifferentThreads<int>();\r\n\r\n            for(int i = 0; i < 100; i++)\r\n            {\r\n                Console.WriteLine($\"ConcurrentStack {i}\");\r\n\r\n                sut.SetupConcurrentStackIteration();\r\n                sut.ConcurrentStack();\r\n                sut.IterationCleanup();\r\n            }\r\n\r\n            Console.WriteLine(\"OK\");\r\n        }\r\n    }\r\n\r\n    public class AddRemoveFromDifferentThreads<T>\r\n    {\r\n        const int NumThreads = 2;\r\n\r\n        public int Size = 2_000_000;\r\n\r\n        private Barrier _barrier;\r\n        private Task _producer, _consumer;\r\n\r\n        public void SetupConcurrentStackIteration()\r\n        {\r\n            var stack = new ConcurrentStack<T>();\r\n\r\n            _barrier = new Barrier(NumThreads + 1);\r\n            \r\n            _producer = Task.Factory.StartNew(() =>\r\n            {\r\n                _barrier.SignalAndWait();\r\n                _barrier.SignalAndWait();\r\n\r\n                for (int i = 0; i < Size; i++)\r\n                {\r\n                    stack.Push(default);\r\n                }\r\n            }, CancellationToken.None, TaskCreationOptions.LongRunning, TaskScheduler.Default);\r\n\r\n            _consumer = Task.Factory.StartNew(() =>\r\n            {\r\n                _barrier.SignalAndWait();\r\n                _barrier.SignalAndWait();\r\n\r\n                int count = 0;\r\n                while (count < Size)\r\n                {\r\n                    if (stack.TryPop(out T _))\r\n                    {\r\n                        count++;\r\n                    }\r\n                }\r\n            }, CancellationToken.None, TaskCreationOptions.LongRunning, TaskScheduler.Default);\r\n            \r\n            _barrier.SignalAndWait();\r\n        }\r\n\r\n        public void ConcurrentStack() => SignalAndWaitForAllTasks();\r\n\r\n        private void SignalAndWaitForAllTasks()\r\n        {\r\n            _barrier.SignalAndWait();\r\n\r\n            Task.WaitAll(_producer, _consumer);\r\n        }\r\n\r\n\tpublic void IterationCleanup() => _barrier.Dispose();\r\n    }\r\n}\r\n```\r\n\r\nThe code does not always get deadlocked, sometimes I need to re-run the app 3 times.\r\n\r\nProject file:\r\n\r\n```xml\r\n<Project ToolsVersion=\"15.0\">\r\n  <PropertyGroup>\r\n    <ImportDirectoryBuildProps>false</ImportDirectoryBuildProps>\r\n    <ImportDirectoryBuildTargets>false</ImportDirectoryBuildTargets>\r\n  </PropertyGroup>\r\n\r\n  <Import Project=\"Sdk.props\" Sdk=\"Microsoft.NET.Sdk\" />\r\n\r\n  <PropertyGroup>\r\n    <OutputType>Exe</OutputType>\r\n    <TargetFramework>netcoreapp3.0</TargetFramework>\r\n    <LangVersion>7.2</LangVersion>\r\n    <RuntimeIdentifier>linux-x64</RuntimeIdentifier>\r\n    <AllowUnsafeBlocks>true</AllowUnsafeBlocks>\r\n    <TreatWarningsAsErrors>False</TreatWarningsAsErrors>\r\n    <DebugType>pdbonly</DebugType>\r\n    <DebugSymbols>true</DebugSymbols>\r\n    <UseSharedCompilation>false</UseSharedCompilation>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.DotNet.ILCompiler\" Version=\"1.0.0-alpha-*\" />\r\n  </ItemGroup>\r\n  <Import Project=\"Sdk.targets\" Sdk=\"Microsoft.NET.Sdk\" />\r\n</Project>\r\n```\r\nNuGet.config\r\n\r\n```xml\r\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<configuration>\r\n  <packageSources>\r\n    \r\n    <add key=\"coreRtNuGetFeed\" value=\"https://dotnet.myget.org/F/dotnet-core/api/v3/index.json\" />\r\n  </packageSources>\r\n</configuration>\r\n```\r\n\r\nbuild.sh\r\n\r\n```sh\r\n/home/adam/projects/performace_corert/tools/dotnet/x64/dotnet restore --packages \"/home/adam/projects/performace_corert/artifacts/packages\"  /p:UseSharedCompilation=false -r linux-x64\r\n/home/adam/projects/performace_corert/tools/dotnet/x64/dotnet build -c Release  /p:UseSharedCompilation=false -r linux-x64\r\n/home/adam/projects/performace_corert/tools/dotnet/x64/dotnet publish -c Release  /p:UseSharedCompilation=false -r linux-x64\r\n```\r\n\r\nI can't reproduce it for .NET Core 3.0 or any previous .NET Core.\r\n\r\n```log\r\nadam@adsitnik-ubuntu:~/projects/performace_corert$ hostnamectl\r\n   Static hostname: adsitnik-ubuntu\r\n         Icon name: computer-desktop\r\n           Chassis: desktop\r\n        Machine ID: 21e2aa4fa8ba420ca524966404ceec9d\r\n           Boot ID: 518e9cf7cbe34d948a2f9710b1d0f1b9\r\n  Operating System: Ubuntu 18.04.1 LTS\r\n            Kernel: Linux 4.15.0-42-generic\r\n      Architecture: x86-64\r\nadam@adsitnik-ubuntu:~/projects/performace_corert$ /home/adam/projects/performace_corert/tools/dotnet/x64/dotnet --info\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview-010006\r\n Commit:    166534d9bf\r\n\r\nRuntime Environment:\r\n OS Name:     ubuntu\r\n OS Version:  18.04\r\n OS Platform: Linux\r\n RID:         ubuntu.18.04-x64\r\n Base Path:   /home/adam/projects/performace_corert/tools/dotnet/x64/sdk/3.0.100-preview-010006/\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview-27218-01\r\n  Commit:  d40b87f29d\r\n\r\n.NET Core SDKs installed:\r\n  3.0.100-preview-010006 [/home/adam/projects/performace_corert/tools/dotnet/x64/sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.App 3.0.0-preview-18630-0234 [/home/adam/projects/performace_corert/tools/dotnet/x64/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview-27218-01 [/home/adam/projects/performace_corert/tools/dotnet/x64/shared/Microsoft.NETCore.App]\r\n```\r\n\r\nmicrosoft.dotnet.ilcompiler got resolved to 1.0.0-alpha-27305-01\r\n\r\n@jkotas should I disable this benchmark and try to get the results for other benchmarks?","Url":"https://github.com/dotnet/corert/issues/6780","RelatedDescription":"Open issue \"Potential deadlock?\" (#6780)"},{"Id":"396274433","IsPullRequest":true,"CreatedAt":"2019-01-07T03:16:09","Actor":"Dotnet-GitSync-Bot","Number":"6778","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @jkotas","Url":"https://github.com/dotnet/corert/pull/6778","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#6778)"},{"Id":"396301624","IsPullRequest":true,"CreatedAt":"2019-01-07T03:14:43","Actor":"trylek","Number":"6779","RawContent":null,"Title":"Fix enumeration value of R2R helpers [Dbl|Flt][Rem|Round]","State":"closed","Body":"In accordance with my CoreCLR change \r\n\r\nhttps://github.com/dotnet/coreclr/pull/21836\r\n\r\nI'm fixing the incorrect enumeration values we inherited\r\nfrom an old typo in CoreCLR. This change seems to fix\r\nabout a dozen CoreCLR Pri#0 tests.\r\n\r\nThanks\r\n\r\nTomas","Url":"https://github.com/dotnet/corert/pull/6779","RelatedDescription":"Closed or merged PR \"Fix enumeration value of R2R helpers [Dbl|Flt][Rem|Round]\" (#6779)"},{"Id":"396148907","IsPullRequest":true,"CreatedAt":"2019-01-06T12:37:14","Actor":"xoofx","Number":"6772","RawContent":null,"Title":"Add cross-targeting support to ObjectWriter","State":"closed","Body":"This PR is for the following item from issue #2606 \r\n\r\n> - [ ]  Add cross-targeting support to ObjectWriter https://github.com/dotnet/llilc/tree/master/lib/ObjWriter (add a new argument to Initialize method to specify target platform)\r\n\r\nIt allows typically to generate ELF output from Windows directly\r\n\r\nThere is a TODO in this PR related to the ARM/ARM64 platforms/abi. It would require for example to add Tizen as a platform to be able to specify properly the `gnueabi`\r\n\r\ncc: @jkotas  @alpencolt","Url":"https://github.com/dotnet/corert/pull/6772","RelatedDescription":"Closed or merged PR \"Add cross-targeting support to ObjectWriter\" (#6772)"},{"Id":"396230243","IsPullRequest":true,"CreatedAt":"2019-01-06T06:38:14","Actor":"Dotnet-GitSync-Bot","Number":"6777","RawContent":null,"Title":"Mirror changes from dotnet/corefx,coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/corefx,coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @benaadams","Url":"https://github.com/dotnet/corert/pull/6777","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corefx,coreclr\" (#6777)"},{"Id":"396220226","IsPullRequest":true,"CreatedAt":"2019-01-06T05:36:25","Actor":"Dotnet-GitSync-Bot","Number":"6776","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @benaadams","Url":"https://github.com/dotnet/corert/pull/6776","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#6776)"},{"Id":"396215268","IsPullRequest":true,"CreatedAt":"2019-01-06T02:01:47","Actor":"Dotnet-GitSync-Bot","Number":"6775","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @benaadams","Url":"https://github.com/dotnet/corert/pull/6775","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#6775)"},{"Id":"396189065","IsPullRequest":true,"CreatedAt":"2019-01-06T00:42:58","Actor":"jkotas","Number":"6774","RawContent":null,"Title":"Disable strongname signing for ILCompiler.Build.Tasks","State":"closed","Body":"Workaround for https://github.com/dotnet/corert/issues/6306","Url":"https://github.com/dotnet/corert/pull/6774","RelatedDescription":"Closed or merged PR \"Disable strongname signing for ILCompiler.Build.Tasks\" (#6774)"},{"Id":"396176750","IsPullRequest":false,"CreatedAt":"2019-01-05T16:01:17","Actor":"TFTomSun","Number":"6773","RawContent":null,"Title":"Simple Console App fails to build","State":"open","Body":"Hi I tried to publish an empty console application.\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <OutputType>Exe</OutputType>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.DotNet.ILCompiler\" Version=\"1.0.0-alpha-*\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIt fails with the message:\r\nThe \"ComputeManagedAssemblies\" task could not be loaded from the assembly C:\\Users\\tftom\\.nuget\\packages\\microsoft.dotnet.ilcompiler\\1.0.0-alpha-27305-01\\build\\..\\tools\\ILCompiler.Build.Tasks.dll. Could not load file or assembly 'ILCompiler.Build.Tasks, Version=999.999.999.999, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51' or one of its dependencies. Strong name validation failed. (Exception from HRESULT: 0x8013141A) Confirm that the <UsingTask> declaration is correct, that the assembly and all its dependencies are available, and that the task contains a public class that implements Microsoft.Build.Framework.ITask.\r\n\r\nI used the following publish config:\r\n![image](https://user-images.githubusercontent.com/5387192/50726330-0143a180-110c-11e9-8dd7-eed67ce9ee01.png)\r\n\r\nI have installed the latest .net core 2.2 sdk","Url":"https://github.com/dotnet/corert/issues/6773","RelatedDescription":"Open issue \"Simple Console App fails to build\" (#6773)"},{"Id":"396043651","IsPullRequest":true,"CreatedAt":"2019-01-05T01:33:59","Actor":"Dotnet-GitSync-Bot","Number":"6771","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @benaadams","Url":"https://github.com/dotnet/corert/pull/6771","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#6771)"}],"ResultType":"GitHubIssue"},"SDK-Issues":{"Issues":[{"Id":"397640906","IsPullRequest":true,"CreatedAt":"2019-01-10T02:00:40","Actor":"peterhuene","Number":"2805","RawContent":null,"Title":"[WIP] Respect PlatformTarget when setting DefaultAppHostRuntimeIdentifier.","State":"open","Body":"This commit uses `PlatformTarget` to determine the value for\r\n`DefaultAppHostRuntimeIdentifier` on Windows.\r\n\r\nIf `PlatformTarget` is set to `x86`, then a PE32 apphost is used.\r\n\r\nIf `PlatformTarget` is set to `x64`, then a PE32+ apphost is used.\r\n\r\nOtherwise, the apphost for the SDK RID is used.\r\n\r\nFixes #2632.","Url":"https://github.com/dotnet/sdk/pull/2805","RelatedDescription":"Open PR \"[WIP] Respect PlatformTarget when setting DefaultAppHostRuntimeIdentifier.\" (#2805)"},{"Id":"397029578","IsPullRequest":true,"CreatedAt":"2019-01-10T01:48:39","Actor":"nugetlurker","Number":"2799","RawContent":null,"Title":"Insert NuGet Build 5.0.0-preview1.5754 into sdk","State":"closed","Body":"Insert NuGet Build 5.0.0-preview1.5754 into sdk release/2.1.6xx branch","Url":"https://github.com/dotnet/sdk/pull/2799","RelatedDescription":"Closed or merged PR \"Insert NuGet Build 5.0.0-preview1.5754 into sdk\" (#2799)"},{"Id":"397362127","IsPullRequest":true,"CreatedAt":"2019-01-09T17:44:41","Actor":"dotnet-maestro[bot]","Number":"2803","RawContent":null,"Title":"Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19058.2\r\n- Microsoft.DotNet.SignTool - 1.0.0-beta.19058.2\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/2803","RelatedDescription":"Closed or merged PR \"Update dependencies from dotnet/arcade\" (#2803)"},{"Id":"397403353","IsPullRequest":false,"CreatedAt":"2019-01-09T14:46:45","Actor":"Xarkam","Number":"2804","RawContent":null,"Title":"Remove old sdk can't remove all old runtime","State":"open","Body":"Hello,\r\n\r\nToday, I removed old sdk from my machine.\r\nBut, I have two old runtime not removed:\r\n![image](https://user-images.githubusercontent.com/331816/50906063-93a5b700-1424-11e9-88e6-5e40f2bf028e.png)\r\n![image](https://user-images.githubusercontent.com/331816/50906249-fa2ad500-1424-11e9-976f-a190e4af12a4.png)\r\n![image](https://user-images.githubusercontent.com/331816/50906311-1c245780-1425-11e9-964d-7b4c466a66e7.png)\r\nIs there a reason for these two versions to still be present?\r\nWhy folders 2.1.0 and 2.1.2 in `C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App` are not empty and is not listed as installed ?\r\n\r\nHow to delete them?\r\n\r\nMy sdk :\r\n![image](https://user-images.githubusercontent.com/331816/50906146-c485ec00-1424-11e9-9e06-87cf022b91cf.png)\r\n\r\nI do not have a runtime installed outside of those installed by the sdk.\r\n\r\nThanks","Url":"https://github.com/dotnet/sdk/issues/2804","RelatedDescription":"Open issue \"Remove old sdk can't remove all old runtime\" (#2804)"},{"Id":"397217147","IsPullRequest":false,"CreatedAt":"2019-01-09T05:26:51","Actor":"dsplaisted","Number":"2802","RawContent":null,"Title":"Set metadata on references coming from shared framework targeting pack to show them in solution explorer tree view","State":"open","Body":"See https://github.com/dotnet/project-system/issues/4444","Url":"https://github.com/dotnet/sdk/issues/2802","RelatedDescription":"Open issue \"Set metadata on references coming from shared framework targeting pack to show them in solution explorer tree view\" (#2802)"},{"Id":"397167762","IsPullRequest":true,"CreatedAt":"2019-01-09T04:22:42","Actor":"nguerrera","Number":"2801","RawContent":null,"Title":"Fix dogfood.sh","State":"closed","Body":"Various infrastructure changes or changes only to dogfood.ps1 have left `source eng\\dogfood.sh` broken...","Url":"https://github.com/dotnet/sdk/pull/2801","RelatedDescription":"Closed or merged PR \"Fix dogfood.sh\" (#2801)"},{"Id":"397081406","IsPullRequest":true,"CreatedAt":"2019-01-09T04:01:06","Actor":"nguerrera","Number":"2800","RawContent":null,"Title":"Separate copying of refs from preservation of compilation info","State":"closed","Body":"PreserveCompilationContext does two things today:\r\n\r\n1. Write compilation info to .deps\r\n2. Copy reference-only assemblies to build/publish refs/ folder\r\n\r\nAdd PreserveCompilationReferences to control (2) independently and default it to PreserveCompilationContext for backwards compatibility.\r\n\r\nFix #2122 \r\n\r\ncc @pranavkm @rynowak @eerhardt ","Url":"https://github.com/dotnet/sdk/pull/2800","RelatedDescription":"Closed or merged PR \"Separate copying of refs from preservation of compilation info\" (#2800)"},{"Id":"397029560","IsPullRequest":true,"CreatedAt":"2019-01-08T18:27:08","Actor":"nugetlurker","Number":"2798","RawContent":null,"Title":"Insert NuGet Build 5.0.0-preview1.5754 into sdk","State":"open","Body":"Insert NuGet Build 5.0.0-preview1.5754 into sdk release/2.2.2xx branch","Url":"https://github.com/dotnet/sdk/pull/2798","RelatedDescription":"Open PR \"Insert NuGet Build 5.0.0-preview1.5754 into sdk\" (#2798)"},{"Id":"396896917","IsPullRequest":true,"CreatedAt":"2019-01-08T17:39:14","Actor":"dotnet-maestro[bot]","Number":"2797","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19057.6\r\n- Microsoft.DotNet.SignTool - 1.0.0-beta.19057.6\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/2797","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#2797)"},{"Id":"396751430","IsPullRequest":true,"CreatedAt":"2019-01-08T05:01:05","Actor":"livarcocc","Number":"2796","RawContent":null,"Title":"Add netstandard2.1 to the list of supported target frameworks.","State":"open","Body":"Fixes internal bug https://devdiv.visualstudio.com/DevDiv/_workitems/edit/761489","Url":"https://github.com/dotnet/sdk/pull/2796","RelatedDescription":"Open PR \"Add netstandard2.1 to the list of supported target frameworks.\" (#2796)"},{"Id":"396741517","IsPullRequest":false,"CreatedAt":"2019-01-08T03:57:42","Actor":"yaakov-h","Number":"2795","RawContent":null,"Title":"Incorrect assembly binding redirects generated in 3.0 preview","State":"open","Body":"See: https://github.com/KirillOsenkov/SourceBrowser/issues/108\r\n\r\nWhen building SourceBrowser with SDK v2.1.502, binding redirects for `Newtonsoft.Json` and `System.Collections.Immutable` are generated for versions `11.0.0.0` and `1.2.3.0` respectively.\r\n\r\nWhen building SourceBrowser with SDK v3.0.100-preview-009812 (as shipped with VS2019 Preview 1), binding redirects for `Newtonsoft.Json` and `System.Collections.Immutable` are generated for versions `9.0.0.0` and `1.2.1.0` respectively.\r\n\r\nThis appears to be a regression in the SDK.","Url":"https://github.com/dotnet/sdk/issues/2795","RelatedDescription":"Open issue \"Incorrect assembly binding redirects generated in 3.0 preview\" (#2795)"},{"Id":"396709121","IsPullRequest":false,"CreatedAt":"2019-01-08T00:57:39","Actor":"xen2","Number":"2794","RawContent":null,"Title":"runtime.json only works if PackageReference is directly referenced by project","State":"open","Body":"I have a a `netcoreapp2.1` app with a `PackageReference` (let's call it MyPackageA) that contains a `runtime.json`.\r\n\r\nIt seems that if I don't include this MyPackageA `PackageReference` explicitly in the final executable project, its `runtime.json` is not properly used to compute the deps.json file (and it can't find/load some of the .dll).\r\n\r\nWhat works:\r\n- Main executable project: `PackageReference` to MyPackageA in main executable project\r\n\r\nWhat doesn't work:\r\n- Main executable project: `PackageReference` that references MyPackageA transitively\r\n- Library1: `PackageReference` to MyPackageA + Main executable: ProjectReference to Library1\r\n\r\nThis problem doesn't happen with net461 (libraries are properly copied by Visual Studio in all situations).","Url":"https://github.com/dotnet/sdk/issues/2794","RelatedDescription":"Open issue \"runtime.json only works if PackageReference is directly referenced by project\" (#2794)"},{"Id":"396634759","IsPullRequest":false,"CreatedAt":"2019-01-07T20:19:51","Actor":"natemcmaster","Number":"2792","RawContent":null,"Title":"RuntimeFrameworkVersion for 3.0 apps","State":"open","Body":"Filing on behalf of @DamianEdwards @davidfowl \r\n\r\nIt appears the RuntimeFrameworkVersion property is no longer honored in netcoreapp3.0 projects. If our recollection is correct, the plan was to use this property so customers could define the versions used by FrameworkReference. \r\n\r\nOpen question: how to handle the difference between shared framework versions. After RTM, we should (in theory) always patch all in-box shared frameworks. But during per-release, however, these versions will rarely align. \r\n","Url":"https://github.com/dotnet/sdk/issues/2792","RelatedDescription":"Open issue \"RuntimeFrameworkVersion for 3.0 apps\" (#2792)"},{"Id":"396163554","IsPullRequest":true,"CreatedAt":"2019-01-07T18:08:25","Actor":"dotnet-maestro[bot]","Number":"2791","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19054.13\r\n- Microsoft.DotNet.SignTool - 1.0.0-beta.19054.13\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19055.1\r\n- Microsoft.DotNet.SignTool - 1.0.0-beta.19055.1\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19055.1\r\n- Microsoft.DotNet.SignTool - 1.0.0-beta.19055.1\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/2791","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#2791)"},{"Id":"395802481","IsPullRequest":true,"CreatedAt":"2019-01-04T23:37:56","Actor":"johnbeisner","Number":"2788","RawContent":null,"Title":"Adding a performance test: Build Web Large 3.0","State":"closed","Body":"Adding a performance test: \"Build Web Large 3.0\" that targets netcoreapp3.0","Url":"https://github.com/dotnet/sdk/pull/2788","RelatedDescription":"Closed or merged PR \"Adding a performance test: Build Web Large 3.0\" (#2788)"},{"Id":"396675588","IsPullRequest":false,"CreatedAt":"2019-01-04T21:36:37","Actor":"Lohnegrim","Number":"2793","RawContent":null,"Title":"Result of chr() cannot be used as initial value of a Const in .Net Core 3 Preview 1","State":"open","Body":"Version: 3.0.100-preview-009812\r\nCommit: e3abf6e935\r\n\r\nRuntime Environment:\r\nOS Name: Windows\r\nOS Version: 10.0.17763\r\nOS Platform: Windows\r\nRID: win10-x64\r\nBase Path: C:\\Program Files\\dotnet\\sdk\\3.0.100-preview-009812\\\r\n\r\nHost (useful for support):\r\nVersion: 3.0.0-preview-27122-01\r\nCommit: 00c5c8bc40\r\n\r\nHave you experienced this same bug with .NET Framework?: No\r\n\r\nIn the .Net Framework using VB.Net you can compile this Line:\r\n\r\n``` vb\r\nPrivate Const TabChar As Char = Chr(9)\r\n``` \r\n\r\nIn .Net Core 3 Preview 1 it failes with:\r\nerror BC30059: Constant expression is required.","Url":"https://github.com/dotnet/sdk/issues/2793","RelatedDescription":"Open issue \"Result of chr() cannot be used as initial value of a Const in .Net Core 3 Preview 1\" (#2793)"},{"Id":"396017030","IsPullRequest":false,"CreatedAt":"2019-01-04T18:08:35","Actor":"ryantrem","Number":"2790","RawContent":null,"Title":"Generalize multi-pass build support","State":"open","Body":"There are already several standard build \"dimensions,\" including Configuration, Platform, and TargetFramework. These dimensions and their potential values create a matrix of overall build configurations. I can specify which element of the matrix to use to configure the build by specifying values for each dimension (e.g. Debug|x86|net46). If I want to perform multiple build passes (multiple elements of the matrix), then I have a few options depending on the dimension(s) I want vary.\r\n\r\nFor TargetFramework, I can specify a set of TargetFramework**s** and the dotnet sdk targets will perform multiple build passes, one for each TargetFramework specified.\r\n\r\nFor Configuration and Platform, I can use Visual Studio's Batch Build feature to select multiple Configurations and/or Platforms.\r\n\r\nFor my own custom \"dimension,\" my only real option is multiple MSBuild invocations from the command line, passing in values for my properties (and this might be a lot of invocations depending on the number of dimensions and number of potential values per dimension).\r\n\r\nIt would be great if the multi-pass build support for TargetFrameworks was generalized into a mechanism that supported multi-pass builds across arbitrary build dimensions. I could imagine this perhaps being expressed as follows:\r\n\r\n```xml\r\n<!-- Define each build dimension. -->\r\n<ItemGroup>\r\n  <BuildDimension Condition=\"'$(Configuration)' == ''\" Include=\"Configuration\">\r\n    <Values>Debug;Release</Values>\r\n  </BuildDimension>\r\n  <BuildDimension Condition=\"'$(Platform)' == ''\" Include=\"Platform\">\r\n    <Values>x86;x64;arm;AnyCPU</Values>\r\n  </BuildDimension>\r\n  <BuildDimension Condition=\"'$(TargetFramework)' == ''\" Include=\"TargetFramework\">\r\n    <Values>net46;netstandard2.0;uap10.0.14393</Values>\r\n  </BuildDefinition>\r\n</ItemGroup>\r\n```\r\n\r\nThe idea would be that a specific value for a build dimension (e.g. Configuration=Debug) could be specified, otherwise multiple passes would be performed for that dimension. I could imagine this showing up in Visual Studio as dropdowns for each build dimension, similar to what we have today for Configuration and Platform. I would also imagine the default output path would be generated by simply combining the values of each dimension (e.g. Debug\\x86\\net46).\r\n\r\nUsually, a build configuration matrix is sparse, so I'd also want to be able to ignore certain elements of the matrix (don't build them). I could imagine this perhaps being expressed as follows:\r\n\r\n```xml\r\n<PropertyGroup>\r\n  <!-- Allow an early out of the inner build loop, which is effectively allowing for a sparse build dimension matrix. -->\r\n  <BuildPassEnabled Condition=\"'$(Platform)' == 'arm' AND '$(TargetFramework)' != 'uap10.0.14393'\">false</BuildPassEnabled>\r\n</PropertyGroup>\r\n```\r\n\r\nGeneralized build dimensions and multi-pass builds are particularly useful when you need to define your own custom build dimensions. For example, when writing code to be consumed by Unity 3D, I have the concept of Unity Players (runtimes) (e.g. Windows Store, Android, iOS, etc.). Depending on the target Player, I might want to include different source files, define different conditional compilation symbols, etc. Further, I might want to define a \"compatibility graph\" in the same way TargetFramework does (e.g. netstandard2.0 is \"compatible with\" net471, so a net471 project can consume a netstandard2.0 project). Taking my Unity 3D example further, different Unity Players support different .NET runtimes. For example, iOS and Android are based on .NET Framework, while Windows Store is based on UWP .NET Core). So ideally I'd want to be able to have UnityIOS and UnityAndroid be \"compatible with\" UnityNetFramework (for example). I could imagine this perhaps being expressed as follows:\r\n\r\n### My common props that *define* the build dimension\r\n\r\n```xml\r\n<ItemGroup>\r\n  <BuildDimensionCompatibility Include=\"UnityEditor;UnityIOS;UnityAndroid\">\r\n    <CompatibleWith>UnityNetFramework</CompatibleWith>\r\n  </BuildDimensionCompatibility>\r\n</ItemGroup>\r\n```\r\n\r\n### Project 1\r\n\r\n```xml\r\n<ItemGroup>\r\n  <BuildDimension Condition=\"'$(UnityPlayer)' == ''\" Include=\"UnityPlayer\">\r\n    <Values>UnityUAP;UnityNetFramework</Values>\r\n  </BuildDimension>\r\n</ItemGroup>\r\n```\r\n\r\n### Project 2\r\n\r\n```xml\r\n<ItemGroup>\r\n  <BuildDimension Condition=\"'$(UnityPlayer)' == ''\" Include=\"UnityPlayer\">\r\n    <Values>UnityUAP;UnityEditor;UnityIOS;UnityAndroid</Values>\r\n  </BuildDimension>\r\n  <!-- This ProjectReference works because UnityEditor/UnityIOS/UnityAndroid are compatible with UnityNetFramework in the same way that net471 and netcore5 are compatible with netstandard2.0 -->\r\n  <ProjectReference Include=\"Project1.csproj\" />\r\n</ItemGroup>\r\n```\r\n\r\nFinally, for all this to be effective, I'd want the same custom build dimension support and compatibility graph support to be part of NuGet (in terms of having build results from multiple build passes in the package and having the right assemblies/content being consumed by the consuming project).\r\n\r\nI feel like a solution like this would drastically simplify scenarios where custom \"build dimensions\" are needed, which in my experience is fairly common, and almost always results in some hacky solution that only one or two people on the team understand.","Url":"https://github.com/dotnet/sdk/issues/2790","RelatedDescription":"Open issue \"Generalize multi-pass build support\" (#2790)"},{"Id":"395918022","IsPullRequest":true,"CreatedAt":"2019-01-04T16:40:57","Actor":"dotnet-maestro[bot]","Number":"2789","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19053.2\r\n- Microsoft.DotNet.SignTool - 1.0.0-beta.19053.2\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/2789","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#2789)"},{"Id":"395727980","IsPullRequest":false,"CreatedAt":"2019-01-03T21:19:05","Actor":"kouvel","Number":"2787","RawContent":null,"Title":"Changes to runtime config options in .csproj are not reflected in .runtimeconfig.json on partial build","State":"open","Body":"Repro:\r\n\r\n```\r\ndotnet new console\r\ndotnet build -c Release\r\n```\r\n\r\nThe `.runtimeconfig.json` file in `bin` has the following contents:\r\n```json\r\n{\r\n  \"runtimeOptions\": {\r\n    \"tfm\": \"netcoreapp3.0\",\r\n    \"framework\": {\r\n      \"name\": \"Microsoft.NETCore.App\",\r\n      \"version\": \"3.0.0-preview-27218-01\"\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nEdit the `.csproj` file and add the following into the `PropertyGroup` element:\r\n```xml\r\n<TieredCompilation>false</TieredCompilation>\r\n```\r\n\r\n```\r\ndotnet build -c Release\r\n```\r\n\r\nThe `.runtimeconfig.json` file in `bin` has the same contents as above.\r\n\r\nExpected contents:\r\n```json\r\n{\r\n  \"runtimeOptions\": {\r\n    \"tfm\": \"netcoreapp3.0\",\r\n    \"framework\": {\r\n      \"name\": \"Microsoft.NETCore.App\",\r\n      \"version\": \"3.0.0-preview-27218-01\"\r\n    },\r\n    \"configProperties\": {\r\n      \"System.Runtime.TieredCompilation\": false\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nWorkaround is to delete `bin` and `obj` folders after updating the `.csproj` and before building. The same issue exists the other way around, if the runtime config option is removed from the `.csproj`, the `.runtimeconfig.json` is not updated until a clean build.\r\n\r\nMy versions:\r\n```\r\n.NET Core SDKs installed:\r\n  3.0.100-preview-009825\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.NETCore.App 3.0.0-preview-27206-02\r\n```","Url":"https://github.com/dotnet/sdk/issues/2787","RelatedDescription":"Open issue \"Changes to runtime config options in .csproj are not reflected in .runtimeconfig.json on partial build\" (#2787)"},{"Id":"395660681","IsPullRequest":true,"CreatedAt":"2019-01-03T18:35:31","Actor":"nguerrera","Number":"2786","RawContent":null,"Title":"Use correct property name for additional test runner arguments","State":"closed","Body":"React to https://github.com/dotnet/arcade/pull/1438\r\n\r\nFix #2712 \r\n\r\nWe were running with too many levels of paralellism, spawning too many processes, and slowing down test runs while wasting resources.","Url":"https://github.com/dotnet/sdk/pull/2786","RelatedDescription":"Closed or merged PR \"Use correct property name for additional test runner arguments\" (#2786)"},{"Id":"395658198","IsPullRequest":true,"CreatedAt":"2019-01-03T18:27:59","Actor":"nguerrera","Number":"2785","RawContent":null,"Title":"Remove NETStandard.Library version override","State":"closed","Body":"This caused downgrade errors while trying to manually build projects in the .perftestsource repo.\r\n\r\nWe should make sure to prevent the perf test projects from picking up the outer repository customization, and I believe @johnbeisner is looking at that.\r\n\r\nNevertheless, I see no reason for this override remaining, so taking the opportunity to clean it up. We don't even have any non-test assets in this repo targeting netstandard.","Url":"https://github.com/dotnet/sdk/pull/2785","RelatedDescription":"Closed or merged PR \"Remove NETStandard.Library version override\" (#2785)"},{"Id":"395652187","IsPullRequest":false,"CreatedAt":"2019-01-03T17:15:24","Actor":"DouglasDRF","Number":"2784","RawContent":null,"Title":"Why IList does not have the method signature RemoveAll?","State":"closed","Body":"```\r\npublic class List : ICollection, IEnumerable, IEnumerable, IList, IReadOnlyCollection, IReadOnlyList, ICollection, IList\r\n\r\npublic interface IList : ICollection, IEnumerable, IEnumerable\r\n```\r\n\r\nIList only have Remove() and RemoveAt()... Wouldn't be more interesting put the RemoveAll() method signature in IList for access it?? Neither ICollection or IEnumerable has these methods signatures. Because if I want to remove all items under a specific condition through IList interface I have to transform to a List first\r\n\r\n```\r\n// Enderecos is IList type\r\n       var listEnderecos = clienteModel.Enderecos.ToList();\r\n            listEnderecos.RemoveAll(p => p == null);\r\n            clienteModel.Enderecos = listEnderecos;\r\n```\r\n\r\nWith RemoveAll() method in IList\r\n\r\n```\r\n// Enderecos is IList type\r\n       clienteModel.Enderecos.RemoveAll(p => p == null);\r\n```","Url":"https://github.com/dotnet/sdk/issues/2784","RelatedDescription":"Closed issue \"Why IList does not have the method signature RemoveAll?\" (#2784)"},{"Id":"395565090","IsPullRequest":true,"CreatedAt":"2019-01-03T16:25:31","Actor":"dotnet-maestro[bot]","Number":"2783","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19052.1\r\n- Microsoft.DotNet.SignTool - 1.0.0-beta.19052.1\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/2783","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#2783)"},{"Id":"395081205","IsPullRequest":true,"CreatedAt":"2019-01-02T15:59:00","Actor":"dotnet-maestro[bot]","Number":"2782","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18631.2\r\n- Microsoft.DotNet.SignTool - 1.0.0-beta.18631.2\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19051.1\r\n- Microsoft.DotNet.SignTool - 1.0.0-beta.19051.1\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/2782","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#2782)"},{"Id":"394828587","IsPullRequest":true,"CreatedAt":"2018-12-31T18:32:45","Actor":"jp2masa","Number":"2778","RawContent":null,"Title":"Added back the PublishDepsFilePath property","State":"closed","Body":"Fixes #2777\r\n\r\n## Changes\r\n- Added back the PublishDepsFilePath property.","Url":"https://github.com/dotnet/sdk/pull/2778","RelatedDescription":"Closed or merged PR \"Added back the PublishDepsFilePath property\" (#2778)"},{"Id":"394828220","IsPullRequest":false,"CreatedAt":"2018-12-31T18:32:45","Actor":"jp2masa","Number":"2777","RawContent":null,"Title":".NET Global Tools publish broken","State":"closed","Body":".NET Global Tools publish uses the `PublishDepsFilePath` property to include the deps file, but it no longer exists (.NET Core 3.0 Preview 1).\r\n\r\nThis bug was introduced here: https://github.com/dotnet/sdk/commit/1936ebd7307cebd6c5d1d8d699b9844f73b8fb2c#diff-7dc833d02f198e5a9f0ab88e229db18aL520.\r\n\r\nI believe that the property shouldn't have been removed.","Url":"https://github.com/dotnet/sdk/issues/2777","RelatedDescription":"Closed issue \".NET Global Tools publish broken\" (#2777)"},{"Id":"394977369","IsPullRequest":true,"CreatedAt":"2018-12-31T18:30:23","Actor":"dotnet-maestro[bot]","Number":"2781","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18630.2\r\n- Microsoft.DotNet.SignTool - 1.0.0-beta.18630.2\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/2781","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#2781)"},{"Id":"394928884","IsPullRequest":false,"CreatedAt":"2018-12-31T04:50:13","Actor":"MattLavalleeMA","Number":"2780","RawContent":null,"Title":"NuGetFallbackFolder resolving File Version conflicts for same Package Versions","State":"open","Body":"I have a .NET Core 2.2 solution (migrated from 2.1) with eight projects: two AspNetCore projects, five class libraries, and a unit test project.  Recently, I started receiving version resolution \"messages\" for _HandlePackageFileConflicts like this:\r\n\r\n> C:\\Program Files\\dotnet\\sdk\\2.2.100\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.ConflictResolution.targets(41,5): message NETSDK1041: Encountered conflict between 'Platform:System.Security.Principal.Windows.dll' and 'Runtime:C:\\Users\\mlavallee\\.nuget\\packages\\system.security.principal.windows\\4.5.1\\lib\\netstandard2.0\\System.Security.Principal.Windows.dll'.  NETSDK1034: Choosing 'Platform:System.Security.Principal.Windows.dll' because file version '4.6.27110.4' is greater than '4.6.26919.2'.\r\n\r\nand\r\n\r\n> C:\\Program Files\\dotnet\\sdk\\2.2.100\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.ConflictResolution.targets(41,5): message NETSDK1041: Encountered conflict between 'Platform:System.Security.AccessControl.dll' and 'Runtime:C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\system.security.accesscontrol\\4.5.0\\lib\\netstandard2.0\\System.Security.AccessControl.dll'.  NETSDK1034: Choosing 'Platform:System.Security.AccessControl.dll' because file version '4.6.27110.4' is greater than '4.6.26515.6'.\r\n\r\nWe've all had to deal with binding _package version_ conflicts before, but in this case it seems to be at the _file version_ level, and with references that are included/embedded in the .NET Core 2.2 SDK itself.  Looking at the manifest file:\r\n`C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.2.0\\build\\netcoreapp2.2\\Microsoft.NETCore.App.PlatformManifest.txt`\r\n>System.Security.Principal.Windows.dll|Microsoft.NETCore.App|4.1.1.1|4.6.27110.4\r\n>System.Security.AccessControl.dll|Microsoft.NETCore.App|4.1.1.0|4.6.27110.4\r\n\r\nHowever, the newest packages on NuGet have the file versions noted in the conflicts above and are from much older build sources (9/18/2018 vs. 12/6/2018).  So, a few questions from this:\r\n\r\n1. Why is the SDK embedded reference file newer than what's available on NuGet?\r\n2. Why does the NuGetFallbackFolder have earlier versions than the SDK?\r\n3. Why are the file versions for the same package versions different?\r\n4. What's the purpose of the NuGetFallbackFolder if I also have a package cache? (This seems like pure bloat)\r\n\r\nAlthough these aren't raised as build warnings, just _messages_, it seems like I can't have confidence in the reference code being consistent between builds, so either they should be warnings or there should be a way of resolving them.\r\n\r\nThanks,\r\nMatt","Url":"https://github.com/dotnet/sdk/issues/2780","RelatedDescription":"Open issue \"NuGetFallbackFolder resolving File Version conflicts for same Package Versions\" (#2780)"},{"Id":"394887253","IsPullRequest":false,"CreatedAt":"2018-12-30T17:13:08","Actor":"livarcocc","Number":"2779","RawContent":null,"Title":"\"error NETSDK1007: Cannot find project info\" when a csproj with a certain name depends on another in the same directory.","State":"open","Body":"_From @davedissian on December 29, 2018 14:42_\n\nIf I have two csproj's within the same directory, where csproj (1) depends on csproj (2), I get a NETSDK1007 error if the dependency (2) has a name which is lexicographically greater than the root project (1). For example, if I have `Worker.csproj` which depends on `Library.csproj`, it compiles fine. However, If I have `AWorker.csproj` which depends on `Library.csproj`, I get an `NETSDK1007` error.\r\n\r\nI guess the cause might have something to do with dependency resolution only being a single pass process (rather than being a two pass process that stores projects in a lookup table before resolving them).\r\n\r\n### Steps to reproduce\r\n\r\nI have attached a zip file with 3 solutions: [NETSDK1007-issue.zip](https://github.com/Microsoft/msbuild/files/2716463/NETSDK1007-issue.zip)\r\n\r\n* Broken - A solution containing projects `AWorker.csproj` and `Library.csproj`\r\n* Working - A solution containing projects `Worker.csproj` and `Library.csproj`\r\n* WorkingSeparateDir - A solution containing projects `AWorker.csproj` and `Library\\Library.csproj`\r\n\r\nIf I try and run `dotnet build Worker.sln` inside `Broken`, I get the following output:\r\n\r\n```\r\nMicrosoft (R) Build Engine version 15.9.20+g88f5fadfbe for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  Restoring packages for /Users/david/Projects/DotnetCsharpBug/Broken/AWorker.csproj...\r\n  Generating MSBuild file /Users/david/Projects/DotnetCsharpBug/Broken/obj/AWorker.csproj.nuget.g.props.\r\n  Generating MSBuild file /Users/david/Projects/DotnetCsharpBug/Broken/obj/AWorker.csproj.nuget.g.targets.\r\n  Restore completed in 244.37 ms for /Users/david/Projects/DotnetCsharpBug/Broken/AWorker.csproj.\r\n/usr/local/share/dotnet/sdk/2.2.100/Sdks/Microsoft.NET.Sdk/targets/Microsoft.NET.Sdk.targets(129,5): error NETSDK1007: Cannot find project info for '/Users/david/Projects/DotnetCsharpBug/Broken/Library.csproj'. This can indicate a missing project reference. [/Users/david/Projects/DotnetCsharpBug/Broken/Library.csproj]\r\n\r\nBuild FAILED.\r\n\r\n/usr/local/share/dotnet/sdk/2.2.100/Sdks/Microsoft.NET.Sdk/targets/Microsoft.NET.Sdk.targets(129,5): error NETSDK1007: Cannot find project info for '/Users/david/Projects/DotnetCsharpBug/Broken/Library.csproj'. This can indicate a missing project reference. [/Users/david/Projects/DotnetCsharpBug/Broken/Library.csproj]\r\n    0 Warning(s)\r\n    1 Error(s)\r\n\r\nTime Elapsed 00:00:01.23\r\n```\r\n\r\nThe project files look like this:\r\n\r\n`AWorker.csproj`:\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n    <EnableDefaultCompileItems>false</EnableDefaultCompileItems>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <ProjectReference Include=\"Library.csproj\" />\r\n    <Compile Include=\"Class1.cs\" />\r\n  </ItemGroup>\r\n\r\n</Project>\r\n```\r\n\r\n`Library.csproj`:\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n    <EnableDefaultCompileItems>false</EnableDefaultCompileItems>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <Compile Include=\"Library\\Class1.cs\" />\r\n  </ItemGroup>\r\n\r\n</Project>\r\n```\r\n\r\n\r\n### Expected behavior\r\n\r\nIt compiles successfully.\r\n\r\n### Environment data\r\n```\r\n$ dotnet msbuild -version\r\nMicrosoft (R) Build Engine version 15.9.20+g88f5fadfbe for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n15.9.20.62856\r\n```\r\n\r\nOS info:\r\nmacOS Mojave 10.14.2\r\n\r\nIf applicable, version of the tool that invokes MSBuild (Visual Studio, dotnet CLI, etc): \r\n```\r\n$ dotnet --version\r\n2.2.100\r\n```\r\n\n\n_Copied from original issue: Microsoft/msbuild#4035_","Url":"https://github.com/dotnet/sdk/issues/2779","RelatedDescription":"Open issue \"\"error NETSDK1007: Cannot find project info\" when a csproj with a certain name depends on another in the same directory.\" (#2779)"},{"Id":"394794079","IsPullRequest":true,"CreatedAt":"2018-12-30T17:01:06","Actor":"dotnet-maestro[bot]","Number":"2776","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18627.1\r\n- Microsoft.DotNet.SignTool - 1.0.0-beta.18627.1\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18629.1\r\n- Microsoft.DotNet.SignTool - 1.0.0-beta.18629.1\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/2776","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#2776)"}],"ResultType":"GitHubIssue"},"Announcements-Issues":{"Issues":[{"Id":"397026248","IsPullRequest":false,"CreatedAt":"2019-01-08T18:17:45","Actor":"leecow","Number":"96","RawContent":null,"Title":"January 2019 .NET Updates","State":"open","Body":"# January 2019 .NET Updates\r\n\r\nThe following .NET updates were released in January 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n\r\n* [.NET Framework January 2019 Security and Quality Rollup - January 8, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/01/08/net-framework-january-2019-security-and-quality-rollup/)\r\n\r\n## .NET Core\r\n\r\n* .NET Core 2.1.7 and .NET Core SDK 2.1.503 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.7/2.1.7.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.1) )\r\n\r\n* .NET Core 2.2.1 and .NET Core SDK 2.2.102 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.1/2.2.1.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.2) )\r\n\r\nA discussion issue is available at [core/2210](https://github.com/dotnet/core/issues/2210)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/96","RelatedDescription":"Open issue \"January 2019 .NET Updates\" (#96)"},{"Id":"397020176","IsPullRequest":false,"CreatedAt":"2019-01-08T18:00:27","Actor":"blowdart","Number":"95","RawContent":null,"Title":" Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a tampering vulnerability exists when .NET Core improperly handles specially crafted files. An attacker who successfully exploited this vulnerability could write arbitrary files and directories to certain locations on a vulnerable system. However, an attacker would have limited control over the destination of the files and directories.\r\n\r\nTo exploit the vulnerability, an attacker must send a specially crafted file to a vulnerable system\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core handles these files.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/34427\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nIf your application does not extract ZIP compressed files it is unaffected.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the [System.IO.Compression.ZipFile](https://www.nuget.org/packages/System.IO.Compression.ZipFile/) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nMicrosoft.NETCore.App (System.IO.Compression.ZipFile) | 2.1.0, 2.1.1, 2.1.2, 2.1.3, 2.1.4, 2.1.5, 2.1.6 | 2.1.7\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n`System.IO.Compression.ZipFile` is distributed as part of the .NET Core 2.1 runtime. To check the currently installed runtimes, open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed, you'll see output like the following;\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your host version is 2.1.x and the highest `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\nIf your host version is 2.2.x and the highest 2.1.x `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\n\r\nYou will not see SDK versions if you have only installed the runtime.\r\n\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nIf your host version is a 2.1.x host you must install version 2.1.7 or later of the [.NET Core 2.1 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.1), or corresponding [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\nIf your host version is a 2.2.x you must install version 2.2.1 or later of the [.NET Core 2.2 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.2), or corresponding  [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\nFinally, you must restart your applications once an updated runtime or SDK is installed.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgments\r\n\r\n[Danny Grander](https://twitter.com/grander) of [Snyk](https://snyk.io/)\r\n\r\n### External Links\r\n\r\n[CVE-2018-8416](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-8416)\r\n\r\n### Revisions\r\n\r\nV1.1 (January 9, 2019): Correct affected pacakge table.\r\nV1.0 (January 8, 2019): Advisory published.\r\n\r\n_Version 1.1_\r\n\r\n_Last Updated 2019-01-09_\r\n\r\n","Url":"https://github.com/dotnet/announcements/issues/95","RelatedDescription":"Open issue \" Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability\" (#95)"},{"Id":"397020142","IsPullRequest":false,"CreatedAt":"2019-01-08T18:00:23","Actor":"blowdart","Number":"94","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of an information disclosure vulnerability exists in .NET Framework and .NET Core which allows bypassing Cross-origin Resource Sharing (CORS) configurations. An attacker who successfully exploited the vulnerability could retrieve content, that is normally restricted, from a web application.\r\n\r\nThe security update addresses the vulnerability by enforcing CORS configuration to prevent its bypass.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/34428\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nMicrosoft has not identified any mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the [System.Net.Http](https://www.nuget.org/packages/System.Net.Http/) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nMicrosoft.NETCore.App (System.Net.Http) | 2.1.0, 2.1.1, 2.1.2, 2.1.3, 2.1.4, 2.1.5, 2.1.6 | 2.1.7\r\nMicrosoft.NETCore.App (System.Net.Http) | 2.2.0 | 2.2.1\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n#### Applications that use Microsoft.NetCore.App\r\n\r\n`System.Net.Http` is distributed as part of the .NET Core 2.1 runtime. To check the currently installed runtimes, open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed, you'll see output like the following;\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your host version is 2.1.x and the highest `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\nIf your host version is 2.2.x and the highest 2.1.x `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\n\r\nYou will not see SDK versions if you have only installed the runtime.\r\n\r\n#### Applications not using Microsoft.NetCore.App\r\n\r\nThe affected assembly is also available separately as a NuGet package. If you are not using Microsoft.NetCore.App, you may still be affected if you are referencing the packages listed above.\r\n\r\n##### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file. They can be fixed by [editing the project file](#fixing-direct-dependencies) or using NuGet to update the dependency.\r\n\r\n##### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects\r\n\r\nThe `project.assets.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json)).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `SSystem.Net.Http/4.3.0` is a reference to version 4.3.0 of `System.Net.Http`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\n#### Updating the version of Microsoft.NETCore.App\r\n\r\nIf your host version is a 2.1.x host you must install version 2.1.7 or later of the [.NET Core 2.1 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.1), or corresponding [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\nIf your host version is a 2.2.x you must install version 2.2.1 or later of the [.NET Core 2.2 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.2), or corresponding  [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\n#### <a name=\"fixing-direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.Net.Http` version 4.3.0\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.IO.Pipelines` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.5\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"transitive-dependencies\"></a>Fixing transitive dependencies\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.5\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n##### Rebuilding your application\r\n\r\nFinally, you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2019-0545](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0545)\r\n\r\n### Revisions\r\n\r\nV1.1 (January 9, 2019): Correct affected package table. \r\nV1.0 (January 8, 2019): Advisory published.\r\n\r\n_Version 1.1_\r\n\r\n_Last Updated 2019-01-09_\r\n","Url":"https://github.com/dotnet/announcements/issues/94","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability\" (#94)"},{"Id":"390948658","IsPullRequest":false,"CreatedAt":"2018-12-14T03:22:58","Actor":"1015450578","Number":"93","RawContent":null,"Title":"Docker image with tag '2.2-aspnetcore-runtime' is not compatible","State":"closed","Body":"1. Install  .NET Core 2.2.100 sdk\r\n2. Create a new 'AspNetCore Web Api' by using Visual Studio 2017,and enbale docker support.\r\n3. F5 ,the Output Windows shows:\r\n>It was not possible to find any compatible framework version\r\n>The specified framework 'Microsoft.AspNetCore.App', version '2.2.0' was not found.\r\n>  - Check application dependencies and target a framework version installed at:\r\n>      /usr/share/dotnet/\r\n>  - Installing .NET Core prerequisites might help resolve this problem:\r\n>     http://go.microsoft.com/fwlink/?LinkID=798306&clcid=0x409\r\n>  - The .NET Core framework and SDK can be installed from:\r\n>      https://aka.ms/dotnet-download\r\n>  - The following versions are installed:\r\n>      2.2.0-preview3-35497 at [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]","Url":"https://github.com/dotnet/announcements/issues/93","RelatedDescription":"Closed issue \"Docker image with tag '2.2-aspnetcore-runtime' is not compatible\" (#93)"},{"Id":"390193072","IsPullRequest":false,"CreatedAt":"2018-12-12T12:56:53","Actor":"bilalMlaik","Number":"92","RawContent":null,"Title":".net core Console","State":"closed","Body":"I am running dot net core console app as web jobs and it is working perfectly in docker with docker compose. Now the issue is I want to pass a value to the application via Console.ReadLine() over this value i make some decision but i am unable to pass value via Console.ReadLine(). How i can do it please help me. For more understanding, i have added my docker compose file below\r\n`version: '3.4'\r\n\r\nservices:\r\n  \r\n  tt.core.web:\r\n    image: ${DOCKER_REGISTRY-}ttcoreweb\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.Web/Dockerfile\r\n    depends_on:\r\n     - db\r\n    networks:\r\n     - app-network\r\n\r\n  tt.core.downtime.webjob:\r\n    image: ${DOCKER_REGISTRY-}ttcoredowntimewebjob\r\n    environment:\r\n      CORE_ENVIRONMENT: devdocker\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.Downtime.Webjob/Dockerfile\r\n    depends_on:\r\n     - db\r\n     - tt.core.web\r\n    networks:\r\n     - app-network\r\n\r\n  db:\r\n    image: microsoft/mssql-server-linux\r\n    container_name: db\r\n    environment:\r\n      SA_PASSWORD: \"Thingtrax%1\"\r\n      ACCEPT_EULA: \"Y\"\r\n      MSSQL_PID: Express\r\n    ports:\r\n      - \"7002:1433\"\r\n    networks:\r\n      app-network:\r\n        ipv4_address: 172.24.0.2\r\n\r\nnetworks:\r\n  app-network:\r\n    ipam:\r\n      driver: default\r\n      config:\r\n        - subnet: 172.24.0.0/16\r\n\r\n`\r\nIf the detail is not enough or you do not get my point, you can share your confusion in comment","Url":"https://github.com/dotnet/announcements/issues/92","RelatedDescription":"Closed issue \".net core Console\" (#92)"},{"Id":"380346599","IsPullRequest":false,"CreatedAt":"2018-11-13T17:44:44","Actor":"leecow","Number":"91","RawContent":null,"Title":"November 2018 .NET Updates","State":"open","Body":"# November 2018 .NET Updates\r\n\r\nThe following .NET updates were released in November 2018. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Core\r\n\r\n* [.NET Core November 2018 (2.1.6 and SDK 2.1.500) Update release notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.6/2.1.6.md)\r\n\r\nA [discussion issue](https://github.com/dotnet/core/issues/2053) is available for questions or feedback about this release.\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n* [October 2018](https://github.com/dotnet/announcements/issues/89)\r\n* [September 2018](https://github.com/dotnet/announcements/issues/84)\r\n* [August 2018](https://github.com/dotnet/announcements/issues/79)\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)","Url":"https://github.com/dotnet/announcements/issues/91","RelatedDescription":"Open issue \"November 2018 .NET Updates\" (#91)"},{"Id":"375230004","IsPullRequest":false,"CreatedAt":"2018-10-29T21:45:27","Actor":"terrajobst","Number":"90","RawContent":null,"Title":"The future of JSON in .NET Core 3.0","State":"open","Body":"JSON has become an essential part of virtually all modern .NET applications and in many cases even surpassed the usage of XML. However, .NET hasn't had a (great) built-in way to deal with JSON. Instead we've relied on [Json.NET] which continues to serve the .NET ecosystem well.\r\n\r\n[Json.NET]: https://www.newtonsoft.com/json\r\n\r\nMoving forward, we plan on making some changes to our JSON support:\r\n\r\n* **We need high-performance JSON APIs**. We need a new set of JSON APIs that are highly tuned for performance by using `Span<T>` and allows for processing UTF-8 directly without having to transcode to UTF-16 `string` instances. Both aspects are critical for our web server Kestrel, where throughput is a key requirement.\r\n\r\n* **Remove dependency from ASP.NET Core to Json.NET**. Today, ASP.NET Core has a dependency on Json.NET. While this provides a tight integration between ASP.NET Core and Json.NET, it also means that application developers cannot freely choose which JSON library they are using. This is also problematic for customers of Json.NET as the version is dictated by the underlying platform. However, Json.NET is frequently updated and application developers often want to -- or even have to -- use a specific version. Thus, we want to remove the dependency from ASP.NET Core 3.0 to Json.NET so that customers can choose which version to use, without fearing they might accidentally break the underlying platform. In addition, this makes it also possible to plug-in an entirely different JSON library.\r\n\r\n* **Provide an ASP.NET Core integration package for Json.NET**. Json.NET has basically become the Swiss Army knife of JSON processing in .NET. It provides many options and facilities that allow customers to handle their JSON needs with ease. We don't want to compromise on the Json.NET support customers are getting today, for example, the ability to configure the JSON serialization via the `AddJsonOptions` extension method. Thus, we want to provide the Json.NET integration as a NuGet package that developers can optionally install so they get all the bells and whistles they get from Json.NET today. The other part of this work item is to ensure we have the right extension points so that other parties can provide similar integration packages for their JSON library of choice.\r\n\r\nBelow are more details around this plan.\r\n\r\n## The need for high-performance JSON APIs\r\n\r\nThe requirements for the .NET stack have changed a bit since the arrival of .NET Core. Historically, .NET has valued usability and convenience. With .NET Core, we've added a focus on performance, and we've made significant investments to serve high performance needs. And the [improvements we made][techempower] in the popular TechEmpower benchmark are a testament to that.\r\n\r\n[techempower]: https://www.techempower.com/blog/2016/11/16/framework-benchmarks-round-13/\r\n\r\nWith .NET Core 2.1, we've added a brand new primitive called [Span\\<T>][span-msdn] that allows us to represent native memory and arrays in a uniform way. With this type, we've also added a set of parsing and encoding APIs that are much more memory efficient without having to resort to unsafe code.\r\n\r\n[span-msdn]: https://msdn.microsoft.com/en-us/magazine/mt814808.aspx\r\n\r\nPart of the work of minimizing allocations is to avoid having to transcode UTF-8 payloads into UTF-16 strings, purely for parsing reasons. Currently, Json.NET is implemented by reading UTF-16. We need the ability to read (and write) JSON documents directly in UTF-8 because most network protocols (including HTTP) use UTF-8.\r\n\r\nDuring .NET Core 2.1 we've learned that updating our existing APIs to leverage `Span<T>` has limits. While we did add a bunch of overloads that accept spans, we also had to produce brand new APIs that are designed around minimizing allocations and dealing with buffers, which we exposed in `System.Buffers` namespaces. And with `System.IO.Pipelines` we've also added a programming model that enables developers to share buffers without having to deal with lifetime issues.\r\n\r\nBased on these experiences we believe in order to support JSON parsing, we'll need to expose a new set of JSON APIs that are specifically geared for high-performance scenarios.\r\n\r\nYou might wonder why we can't just update Json.NET to include support for parsing JSON using `Span<T>`? Well, James Newton-King -- the author of Json.NET -- has the following to say about that:\r\n\r\n> Json.NET was created over 10 years ago, and since then it has added a wide range of features aimed to help developers work with JSON in .NET. In that time Json.NET has also become far and away NuGet's most depended on and downloaded package, and is the go-to library for JSON support in .NET. Unfortunately, Json.NET's wealth of features and popularity works against making major changes to it. Supporting new technologies like `Span<T>` would require fundamental breaking changes to the library and would disrupt existing applications and libraries that depend on it.\r\n>\r\n> Going forward Json.NET will continue to be worked on and invested in, both addressing known issues today and supporting new platforms in the future. Json.NET has always existed alongside other JSON libraries for .NET, and there will be nothing to prevent you using one or more together, depending on whether you need the performance of the new JSON APIs or the large feature set of Json.NET.\r\n\r\n## Move Json.NET integration into a separate NuGet package\r\n\r\nToday, you cannot use ASP.NET Core without Json.NET because it is a dependency of ASP.NET Core itself. Over the years, we've received feedback that the dependency can conflict with other libraries that have their own dependency on a different version of Json.NET. In the past, we've considered addressing this issue by using a private copy of Json.NET in ASP.NET. However, this would create problems when developers want to configure Json.NET (for instance, in order to control how the serializer behaves when formatting JSON objects).\r\n\r\nMoving forward we'd like to:\r\n\r\n1. Replace the internal usage of Json.NET in ASP.NET Core by the new platform-provided JSON APIs.\r\n\r\n2. Factor the public facing usage of Json.NET into an optional integration package that can be acquired from NuGet.\r\n\r\nSo the existing integration between ASP.NET Core and Json.NET will continue to be supported, but will be moving out of the platform and into a separate package. However, since the integration is then designed to sit on top of the platform, it will also allow customers to update Json.NET to later versions.\r\n\r\nFurthermore, customers who need more performance can also choose to use the new JSON APIs, at the expense of the rich feature set that Json.NET offers.\r\n\r\n## Discussion\r\n\r\nFor a discussion, please go to https://github.com/dotnet/corefx/issues/33115.","Url":"https://github.com/dotnet/announcements/issues/90","RelatedDescription":"Open issue \"The future of JSON in .NET Core 3.0\" (#90)"},{"Id":"368440353","IsPullRequest":false,"CreatedAt":"2018-10-09T23:44:06","Actor":"vivmishra","Number":"89","RawContent":null,"Title":"October 2018 .NET Updates","State":"open","Body":"# October 2018 .NET Updates\r\n\r\nThe following .NET updates were released in October 2018. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Core\r\n\r\n* [.NET Core October 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/10/09/net-core-october-2018-update-net-core-1-0-and-1-1/)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n* [September 2018](https://github.com/dotnet/announcements/issues/84)\r\n* [August 2018](https://github.com/dotnet/announcements/issues/79)\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)","Url":"https://github.com/dotnet/announcements/issues/89","RelatedDescription":"Open issue \"October 2018 .NET Updates\" (#89)"},{"Id":"368429033","IsPullRequest":false,"CreatedAt":"2018-10-09T22:51:18","Actor":"leecow","Number":"88","RawContent":null,"Title":"Microsoft Security Advisory CVE-2018-8292: .NET Core Information Disclosure Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-8292: .NET Core Information Disclosure Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a security feature bypass vulnerability that exists when .NET Core when HTTP authentication information is inadvertently exposed in an outbound request that encounters an HTTP redirect. An attacker who successfully exploited this vulnerability could use the information to further compromise the web application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core applications handles HTTP redirects.\r\n\r\nSystem administrators running .NET Core 1.0 or .NET Core 1.1 applications must update their .NET Core runtimes to versions 1.0.13 and 1.1.10 then restart their applications. If installed applications target .NET Core 2.0, the applications must be migrated to 2.1 or newer and redeployed.\r\n\r\nDevelopers must update their .NET Core SDK to versions 1.1.11 and migrate any [.NET Core 2.0](https://docs.microsoft.com/dotnet/core/migration/20-21) or [ASP.NET Core 2.0](https://docs.microsoft.com/aspnet/core/migration/20_21?view=aspnetcore-2.1) applications to 2.1 then redeploy.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at <https://github.com/dotnet/corefx/issues/32730>\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nNone\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core application that runs on a .NET Core 1.0.x runtime with a version number of 1.0.12 or lower, or a .NET Core application that runs on a .NET Core 1.1.x runtime with a version number of 1.1.9 or lower, or a .NET Core application that runs on a .NET Core 2.0.x runtime.\r\n\r\nAdditionally package authors should check their dependencies to ensure they aren't depending on a vulnerable version of the following package:\r\n\r\n<a name=\"package-list\"></a>Package name | Vulnerable versions | Secure versions\r\n------------ | ---------------- | -------------------------\r\nSystem.Net.Http| 2.0.20126.16343, 2.0.20505, 2.0.20710, 4.0.0, 4.1.0, 4.1.1, 4.1.2, 4.3.0, 4.3.1, 4.3.2, 4.3.3 |  4.3.4 or later\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nAny .NET Core application that runs on a .NET Core 1.0.x runtime with a version number of 1.0.12 or lower, or a .NET Core application that runs on a .NET Core 1.1.x runtime with a version number of 1.1.9 or lower, or a .NET Core application that runs on a .NET Core 2.0.x runtime.\r\n\r\nTo check the currently installed runtimes and SDKs with version 2.1 or later of .NET Core, open a command prompt and run the `dotnet --info` command. You should see an output similar to the following:\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.1.403\r\n Commit:    04e15494b6\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17763\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.403\\\r\n\r\nHost (useful for support):\r\n  Version: 2.1.5\r\n  Commit:  290303f510\r\n\r\n.NET Core SDKs installed:\r\n  1.0.4 [C:\\Program Files\\dotnet\\sdk]\r\n  1.1.10 [C:\\Program Files\\dotnet\\sdk]\r\n  2.0.3 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.4 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf you don't see a runtime entry for 1.0.13 or 1.1.10, any .NET Core 1.x applications run on that computer are vulnerable.\r\n\r\nIf you don't have a 2.1 version of the runtime or SDK installed, you can produce the complete list of runtimes by performing a directory listing in the install root directories. The default root directories are listed in the following table:\r\n\r\n| Operating System | Location |\r\n|------------------|----------|\r\n| Windows | `C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\` |\r\n| macOS | `/usr/local/share/dotnet/shared/Microsoft.NETCore.App/` |\r\n| Supported Linux platforms | `/usr/share/dotnet/shared/Microsoft.NETCore.App/` |\r\n\r\nEach runtime version is installed in its own directory, where the directory name is the version number. If you don't have a directory for 1.0.13, 1.1.10 then any application targeting versions 1.0 or 1.1 are vulnerable.\r\n\r\nAdditionally, if you've deployed [self-contained applications](https://docs.microsoft.com/dotnet/core/deploying/#self-contained-deployments-scd) targeting any of the impacted versions, these applications are also vulnerable and must be recompiled and redeployed.\r\n\r\n### <a name=\"fix-runtime\">How do I fix the vulnerability?\r\n\r\nSystem administrators are advised to update their .NET Core runtimes to versions 1.0.13, 1.1.10 and install the latest 2.1 runtime, ensuring that any 2.0 applications are migrated to 2.1 as soon as possible.\r\n\r\n Developers are advised to update their .NET Core SDK to versions 1.1.11 and migrate any [.NET Core](https://docs.microsoft.com/dotnet/core/migration/20-21) or [ASP.NET Core 2.0](https://docs.microsoft.com/aspnet/core/migration/20_21?view=aspnetcore-2.1) applications to 2.1 and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at <https://github.com/dotnet/> and <https://github.com/aspnet/>, respectively. The Announcements repo for each product (<https://github.com/dotnet/Announcements> and <https://github.com/aspnet/Announcements>) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2018-8292](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-CVE-2018-8292)\r\n\r\n### Revisions\r\n\r\nV1.0 (October 10, 2018): Advisory published.\r\n_Version 1.0_\r\n_Last Updated 2018-10-10_\r\n","Url":"https://github.com/dotnet/announcements/issues/88","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2018-8292: .NET Core Information Disclosure Vulnerability\" (#88)"},{"Id":"367393517","IsPullRequest":false,"CreatedAt":"2018-10-05T22:58:51","Actor":"leecow","Number":"87","RawContent":null,"Title":".NET Core Release Data (releases.json) Redesign and v1 Deprecation Plan","State":"open","Body":"# .NET Core Release Data (releases.json) Redesign and Deprecation\r\n\r\nThe releases.json and releases.csv files began life as helper tools for some of our internal release work, some experimentation and to possibly be useful to the community. It has been great to learn the files are indeed in use and many folks depend on them as a trigger for a number of activities.\r\n\r\n* [release-notes/releases.json](https://github.com/dotnet/core/blob/master/release-notes/releases.json)\r\n* [release-notes/releases.csv](https://github.com/dotnet/core/blob/master/release-notes/releases.csv)\r\n\r\nA discussion topic is available to share thoughts and see what others are thinking at https://github.com/dotnet/core/issues/1986\r\n\r\nBetween the usages which we have become aware and in considering further activities that could be enabled to reason about things such as checking .NET Core version availability and support status, it became clear the current format is inadequate.\r\n\r\nAn updated format has been designed and tested which will replace the current files. The timeline below describes the path to obsoleting the current files.\r\n\r\n## The Plan\r\n\r\n| Date | Action |\r\n| :--- | :----- |\r\n| Oct 2018 | Notify the community of the coming change |\r\n| Oct 2018 | Release the new json format into dotnet/core |\r\n| Oct 2018 - Feb 2019 | Maintain the old json and csv files |\r\n| Feb 2019 | Reminder announcement that old format file is coming soon |\r\n| Mar 2019 | Old json and csv files are obsoleted and removed from dotnet/core |\r\n\r\n## Breaking change\r\n\r\nIf you are currently utilizing the old version json or csv, you will need to update the relevant code to work with the new format. If you are just getting started with consuming this data, use the new version.\r\n\r\n## The Format\r\n\r\nBelow are fragments of the files from our most recent .NET Core release.\r\n\r\n### release-index.json\r\n\r\nThis file consists of a top level array with data on the latest release versions and a property for locating the more detailed channel-specific releases.json. This file is found in [dotnet/core/release-notes](https://github.com/dotnet/core/tree/new-json/release-notes/)\r\n\r\n[releases-index.json](https://github.com/dotnet/core/blob/new-json/release-notes/releases-index.json)\r\n\r\n```\r\n{\r\n    \"releases-index\": [\r\n        {\r\n            \"channel-version\": \"2.1\",\r\n            \"latest-release\": \"2.1.5\",\r\n            \"latest-release-date\":\"2018-10-02\",\r\n            \"product\": \".NET Core\",\r\n            \"support-phase\": \"lts\",\r\n            \"eol-date\": \"\",\r\n            \"releases.json\": \"https://github.com/dotnet/core/blob/master/release-notes/2.1/releases.json\",\r\n        },\r\n        ...\r\n}\r\n```\r\n\r\n### releases.json\r\n\r\nThis file provides detailed data for each release. A copy of this file will be found in each versioned directories under [dotnet/core/release-notes](https://github.com/dotnet/core/release-notes). For example [dotnet/core/release-notes/2.1](https://github.com/dotnet/core/tree/new-json/release-notes/2.1)\r\n\r\n\r\n[releases.json](https://github.com/dotnet/core/tree/new-json/release-notes/2.1/releases.json)\r\n\r\n```\r\n{\r\n    \"channel-version\": \"2.1\",\r\n    \"latest-release\": \"2.1.5\",\r\n    \"latest-release-date\":\"2018-10-12\",\r\n    \"support-phase\": \"lts\",\r\n    \"eol-date\": \"\",\r\n    \"lifecycle-policy\": \"https://www.microsoft.com/net/support/policy\",\r\n    \"releases\":\r\n    [\r\n        {\r\n            \"release-date\":  \"2018-10-02\",\r\n            \"release-version\":  \"2.1.5\",\r\n            \"security\":  false,\r\n            \"release-notes\":  \"https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.5/2.1.5.md\",\r\n            \"runtime\":  \r\n            {\r\n                \"version\":  \"2.1.5\",\r\n                \"version-display\":  \"2.1.5\",\r\n                \"vs-version\":  \"15.8.6\",\r\n                \"files\":  \r\n                [\r\n                    {\r\n                        \"name\": \"dotnet-runtime-linux-arm.tar.gz\",\r\n                        \"url\": \"https://download.visualstudio.microsoft.com/download/pr/4d555219-1f04-47c6-90e5-8b3ff8989b9c/0798763e6e4b98a62846116f997d046e/dotnet-runtime-2.1.5-linux-arm.tar.gz\",\r\n                        \"hash\": \"89a77a07065ea24e7198c77a233b9ce5c6cf51b1deb2ef55c88f0adbb2ecd9db1ba4e7d55eec2ef7139c47f91346fed360161a5bb6e3a7ccfc4559bcde286364\"\r\n                    },\r\n                    ...\r\n                ]\r\n            }\r\n            \"sdk\":  \r\n            {\r\n                \"version\":  \"2.1.403\",\r\n                \"version-display\":  \"2.1.403\",\r\n                \"vs-version\":  \"15.8.6\",\r\n                \"csharp-language\":  \"7.3\",\r\n                \"fsharp-language\":  \"4.5\",\r\n                \"files\":  \r\n                [...]\r\n            }\r\n        }\r\n    ]\r\n}\r\n```","Url":"https://github.com/dotnet/announcements/issues/87","RelatedDescription":"Open issue \".NET Core Release Data (releases.json) Redesign and v1 Deprecation Plan\" (#87)"},{"Id":"366416503","IsPullRequest":false,"CreatedAt":"2018-10-03T16:11:18","Actor":"leecow","Number":"86","RawContent":null,"Title":".NET Core 2.0 has reached end of life","State":"open","Body":"[.NET Core 2.0 reached end of life](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/) on October 1, 2018. This means [.NET Core 2.0](https://blogs.msdn.microsoft.com/dotnet/2017/08/14/announcing-net-core-2-0/) is no longer supported and updates will no longer be provided. We recommend moving to [.NET Core 2.1](https://blogs.msdn.microsoft.com/dotnet/2018/05/30/announcing-net-core-2-1/), our long term support (LTS) release.\r\n\r\n- [Download .NET Core 2.1](https://www.microsoft.com/net/download/dotnet-core/2.1)\r\n- [.NET Core 2.1 LTS statement](https://blogs.msdn.microsoft.com/dotnet/2018/08/21/net-core-august-2018-update/)\r\n- [.NET Core 2.0 end-of-life statement](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/)\r\n\r\n## Discussion\r\n\r\nPlease share you thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet/core#1983](https://github.com/dotnet/core/issues/1983)\r\n\r\n## Lifecycle Context\r\n\r\n.NET Core releases belong to one of two [support lifecycles](https://www.microsoft.com/net/platform/support-policy): long term support (LTS) and Current. LTS releases are stable release which receive critical updates and are supported for at least three years. Current releases can include new features that may undergo future change based on feedback. Current releases are supported for three months after the subsequent .NET Core major or minor release. Both LTS and Current releases receive critical fixes throughout their lifecycle, for security, reliability, or to add support for new operating system versions. You must stay up-to-date with the latest patches to qualify for support. \r\n\r\n## .NET Core 2.0 Lifecycle\r\n\r\n[.NET Core 2.0](https://blogs.msdn.microsoft.com/dotnet/2017/08/14/announcing-net-core-2-0/) was released in August 2017 as a Current release. Per the lifecycle policy, Current releases reach end of life 3 months after a subsequent release (Current or LTS). .NET Core 2.1 released May 2018 and began the end of life countdown for .NET Core 2.0. The 3 month maintenance period for .NET Core 2.0 was scheduled to end August 2018 but was [extended to October](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/) to allow time to address an issue some customers were experiencing while migrating to .NET Core 2.1.\r\n\r\n## .NET Core 2.0 Downloads\r\n\r\n.NET Core 2.0 installers, zips and tar.gzs will remain available, but unsupported. This includes existing releases available on Linux package feeds. Previous versions, including 2.0, will be accessible through the [Download Archives](https://www.microsoft.com/net/download/archives). \r\n\r\n## .NET Core 2.0 Docker Images\r\n\r\n.NET Core 2.0 will be removed from the .NET and ASP.NET Docker repo READMEs, however the existing images remain available in those repos.\r\n\r\n* [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/)\r\n* [microsoft/dotnet-nightly](https://hub.docker.com/r/microsoft/dotnet-nightly/)\r\n* [microsoft/aspnetcore](https://hub.docker.com/r/microsoft/aspnetcore/)\r\n* [microsoft/aspnetcore-build](https://hub.docker.com/r/microsoft/aspnetcore-build/)\r\n\r\n## Policy Information\r\n\r\nAdditional lifecycle and support details  and background can be seen in the following:\r\n\r\n* [.NET Core Support Lifecycle](https://www.microsoft.com/net/platform/support-policy)\r\n* [Support and Versioning](https://blogs.msdn.microsoft.com/dotnet/2016/07/26/net-support-and-versioning/)\r\n* [2.0 end of life early announcement](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n","Url":"https://github.com/dotnet/announcements/issues/86","RelatedDescription":"Open issue \".NET Core 2.0 has reached end of life\" (#86)"},{"Id":"361098704","IsPullRequest":false,"CreatedAt":"2018-09-18T01:10:23","Actor":"spshant","Number":"85","RawContent":null,"Title":"NET Framework 4.8 Early Access build 3646 is available!","State":"open","Body":"Today, we are happy to share an Early Access build for the .NET Framework 4.8. This includes an updated .NET 4.8 runtime as well as the .NET 4.8 Developer Pack (a a single package that bundles the .NET Framework 4.8 runtime, the .NET 4.8 Targeting Pack, and the .NET Framework 4.8 SDK). \r\n\r\nPlease help us ensure this is a high quality and compatible release by trying out this build and exploring the new features. \r\n\r\n**Next steps:**\r\nTo explore the new features, download the [.NET 4.8 Developer Pack build 3646](https://go.microsoft.com/fwlink/?LinkId=2018486).  Instead, if you want to try just the .NET 4.8 runtime, you can download either of these:\r\n•\t[.NET 4.8 Web Installer](https://go.microsoft.com/fwlink/?LinkId=2018525) - requires an internet connection during installation \r\n•\t[.NET 4.8 Offline installer](https://go.microsoft.com/fwlink/?LinkId=2018531) - can be downloaded and installed later in a disconnected state\r\n\r\nPlease provide your feedback by [reporting an issue at the .NET Framework Early Access GitHub repository](https://github.com/Microsoft/dotnet-framework-early-access/issues/new).\r\n\r\n**Note**: this release is still under development, you can expect to see more features and fixes in future preview builds. Also, a reminder that this build is not supported for production use.\r\n\r\nThis preview build 3646 includes improvements/fixes in the following areas:\r\n•\t**[Runtime]** JIT and NGEN improvements\r\n•\t**[Windows Forms]** Accessibility enhancements\r\n•\t**[WPF]** SelectionTextBrush Property\r\n•\t**[BCL]** Updated ZLib\r\n\r\nYou can see the complete list of improvements in this build [here](https://github.com/Microsoft/dotnet-framework-early-access/blob/master/release-notes/NET48/build-3646/changes.md).\r\n\r\n.NET Framework build 3646 is also included in the next update for Windows 10. You can sign up for [Windows Insiders](https://insider.windows.com/en-us/) to validate that your applications work great on the latest .NET Framework included in the latest Windows 10 releases.\r\n","Url":"https://github.com/dotnet/announcements/issues/85","RelatedDescription":"Open issue \"NET Framework 4.8 Early Access build 3646 is available!\" (#85)"},{"Id":"359151445","IsPullRequest":false,"CreatedAt":"2018-09-11T17:44:50","Actor":"leecow","Number":"84","RawContent":null,"Title":"September 2018 .NET Updates","State":"open","Body":"# September 2018 .NET Updates\r\n\r\nThe following .NET updates were released in September 2018. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Framework\r\n* [.NET Framework September 2018 Security and Quality Rollup - September 11, 2018](https://blogs.msdn.microsoft.com/dotnet/2018/09/11/net-framework-september-2018-security-and-quality-rollup/)\r\n\r\n## .NET Core\r\n\r\n* [.NET Core September 2018 Update - September 11, 2018](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.4/2.1.4.md)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n\r\n* [August 2018](https://github.com/dotnet/announcements/issues/79)\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)","Url":"https://github.com/dotnet/announcements/issues/84","RelatedDescription":"Open issue \"September 2018 .NET Updates\" (#84)"},{"Id":"359136325","IsPullRequest":false,"CreatedAt":"2018-09-11T17:00:55","Actor":"blowdart","Number":"83","RawContent":null,"Title":"Microsoft Security Advisory CVE-2018-8409: .NET Core Denial Of Service Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-8409: .NET Core Denial Of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a denial of service vulnerability in .NET Core when System.IO.Pipelines improperly handles requests. An attacker who successfully exploited this vulnerability could cause a denial of service against an application that is leveraging System.IO.Pipelines. The vulnerability can be exploited remotely, without authentication. A remote unauthenticated attacker could exploit this vulnerability by providing specially crafted requests to the application.\r\n\r\nThe update addresses the vulnerability by correcting how System.IO.Pipelines handles requests.\r\n\r\nIf you are using ASP.NET Core 2.1 you will also need to update your ASP.NET version this by following the instructions in the [ASP.NET Core bulletin](https://github.com/aspnet/Announcements/issues/316).\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/32228\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nThere are no mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the System.IO.Pipelines package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.IO.Pipelines | 4.5.0 | 4.5.1\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n#### Applications which use System.IO.Pipelines\r\n\r\nSystem.IO.Pipelines is distributed both in ASP.NET Core 2.1 and separately as a NuGet package. If you are not using Microsoft.AspNetCore.App or .All, you may still be affected if you are referencing the System.IO.Pipelines package.\r\n\r\n##### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file. They can be fixed by [editing the project file](#fixing-direct-dependencies) or using NuGet to update the dependency.\r\n\r\n##### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects\r\n\r\nThe `project.assets.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json)).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `System.IO.Pipelines/4.5.0` is a reference to version 4.5.0 of `System.IO.Pipelines`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\n#### <a name=\"fixing-direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.IO.Pipelines\" Version=\"4.5.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.IO.Pipelines` version 4.5.0\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.IO.Pipelines` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.IO.Pipelines\" Version=\"4.5.1\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"transitive-dependencies\"></a>Fixing transitive dependencies\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.IO.Pipelines\" Version=\"4.5.1\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n#### Rebuilding your application\r\n\r\nFinally you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2018-8409](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-CVE-2018-8409)\r\n\r\n### Revisions\r\n\r\nV1.0 (September 11, 2018): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2018-09-11_\r\n","Url":"https://github.com/dotnet/announcements/issues/83","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2018-8409: .NET Core Denial Of Service Vulnerability\" (#83)"},{"Id":"357399856","IsPullRequest":false,"CreatedAt":"2018-09-05T20:56:25","Actor":"richlander","Number":"82","RawContent":null,"Title":".NET Core Runtime ARM64 Status","State":"open","Body":"# .NET Core Runtime ARM64 Status\r\n\r\nThe .NET Core team is in the process of adding support for ARM64, as part of the .NET Core 3.0 project. This issue will be updated as ARM64 support progresses.\r\n\r\n[.NET Core 3.0 Preview 1](https://github.com/dotnet/core/issues/2099) includes support for Linux ARM64. Please try this build and provide support.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet/coreclr #19843](https://github.com/dotnet/coreclr/issues/19843)\r\n\r\n## Current Status\r\n\r\nARM64 builds are functional, for console and ASP.NET Core apps.\r\n\r\n## Details\r\n\r\nInitial support for ARM64 was added in the .NET Core 2.1 release. The team is not maintaining .NET Core 2.x branches with respect to ARM64. All ARM64 improvements will be made in the .NET Core 3.0 branch (currently [master](https://github.com/dotnet/coreclr)).\r\n\r\nSee [Installing .NET Core 3.0 on Linux ARM64](https://gist.github.com/richlander/467813274cea8abc624553ee72b28213) to install .NET Core on your ARM64 machine. Builds are available from the [daily builds page](https://github.com/dotnet/core/blob/master/daily-builds.md).\r\n\r\n## Bug Queries\r\n\r\nthe following bugs queries are available for ARM64:\r\n\r\n* [dotnet/coreclr](https://github.com/dotnet/coreclr/issues?q=is%3Aopen+is%3Aissue+label%3Aarch-arm64)\r\n* [dotnet/corefx](https://github.com/dotnet/corefx/issues?q=is%3Aopen+is%3Aissue+label%3Aarch-arm64)\r\n\r\n## Operating Systems\r\n\r\n.NET Core 3.0 ARM64 builds are tested on the following operating systems:\r\n\r\n* Ubuntu 16.04 and 18.04\r\n* Debian 9\r\n\r\n## Test Hardware\r\n\r\n.NET Core 3.0 ARM64 builds have been tested on the following hardware:\r\n\r\n* [NVIDIA Jetson TX2 Module](https://developer.nvidia.com/embedded/buy/jetson-tx2)\r\n* [Pine A64](https://www.pine64.org/?page_id=46823)\r\n* [Qualcomm Centriq 2400](https://www.qualcomm.com/products/qualcomm-centriq-2400-processor)\r\n* [Qualcomm Snapdragon](https://www.qualcomm.com/snapdragon/always-connected-pc)\r\n* [Raspberry Pi3](https://www.raspberrypi.org/products/raspberry-pi-3-model-b-plus/)","Url":"https://github.com/dotnet/announcements/issues/82","RelatedDescription":"Open issue \".NET Core Runtime ARM64 Status\" (#82)"},{"Id":"349693735","IsPullRequest":false,"CreatedAt":"2018-08-22T18:23:01","Actor":"richlander","Number":"80","RawContent":null,"Title":"Improving Performance of ARM32 Docker Images with .NET Core Package Cache","State":"closed","Body":"# Improving Performance of ARM32 Docker Images with .NET Core Package Cache\r\n\r\n.NET Core SDK distributions include a compressed copy of NuGet packages for .NET Core, ASP.NET Core and EF Core. These packages are decompressed upon installation of the .NET Core SDK. The packages are not currently included in ARM32 distributions due to the time and space cost to decompress the packages. Instead, they will be added to [.NET Core ARM32 Docker images](https://hub.docker.com/r/microsoft/dotnet/), where these costs can be paid as part of image creation.\r\n\r\nThese NuGet packages include content for two purposes:\r\n\r\n- Reference assemblies for .NET Core, for code compilation.\r\n- Pre-compiled assemblies (compiled with [crossgen](https://github.com/dotnet/coreclr/blob/master/Documentation/building/crossgen.md)) for .NET Core, for use in self-contained applications.\r\n\r\nIn both cases, the presence of these packages avoid the need to access remote NuGet feeds for .NET Core assemblies as part of package restore.\r\n\r\nThis change only affects [.NET Core 2.1 SDK ARM32 Docker images](https://hub.docker.com/r/microsoft/dotnet/). This change will be made in August 2018.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet/dotnet-docker #653](https://github.com/dotnet/dotnet-docker/issues/653)\r\n\r\n## .NET Core SDK NugetFallbackFolder\r\n\r\nThe .NET Core SDK includes a compressed copy of all NuGet package, in LZMA format. It exists at the following version-specific location:\r\n\r\n```\r\nroot@3778032bc43d:/# ls -l /usr/share/dotnet/sdk/2.1.302/*.lzma\r\n-rw-r--r-- 1 1004 sudo 35995936 Jul  2 22:51 /usr/share/dotnet/sdk/2.1.302/nuGetPackagesArchive.lzma\r\n```\r\n\r\nThis file is decompressed to the following location: `/usr/share/dotnet/sdk/NuGetFallbackFolder/`\r\n\r\nA package restore for a .NET Core assembly will restore the assembly from the NuGetFallbackFolder location and copy it to the user NuGet cache. At that point, regular NuGet behavior is used.\r\n\r\n## Impact of this change\r\n\r\nThere should be no functional difference in behavior after this change. .NET SDK commands should complete faster and require fewer package restore network requests.\r\n\r\nThe following examples demonstrates the benefit of this change. The improvement can be observed with package restore. Build times (assuming no restore) are not affected.\r\n\r\n### .NET Core 2.1 SDK image after this change\r\n\r\n> The change has already been made in the `microsoft/dotnet-nightly` repo, as you can see in the example below. In August, this same change will be made available in the `microsoft/dotnet` repo.\r\n\r\n```console\r\npi@raspberrypi:~ $ docker run -it --rm microsoft/dotnet-nightly:2.1-sdk\r\nroot@416731f24915:/# time dotnet new mvc -o mvcapp\r\nGetting ready...\r\nThe template \"ASP.NET Core Web App (Model-View-Controller)\" was created successfully.\r\nThis template contains technologies from parties other than Microsoft, see https://aka.ms/aspnetcore-template-3pn-210 for details.\r\n\r\nProcessing post-creation actions...\r\nRunning 'dotnet restore' on mvcapp/mvcapp.csproj...\r\n  Restoring packages for /mvcapp/mvcapp.csproj...\r\n  Generating MSBuild file /mvcapp/obj/mvcapp.csproj.nuget.g.props.\r\n  Generating MSBuild file /mvcapp/obj/mvcapp.csproj.nuget.g.targets.\r\n  Restore completed in 6.68 sec for /mvcapp/mvcapp.csproj.\r\n\r\nRestore succeeded.\r\n\r\n\r\nreal    0m32.496s\r\nuser    0m35.820s\r\nsys     0m4.280s\r\nroot@416731f24915:/# cd mvcapp/\r\nroot@416731f24915:/mvcapp# time dotnet build\r\nMicrosoft (R) Build Engine version 15.8.138-preview+ge0cd4f1c1f for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  Restore completed in 524.78 ms for /mvcapp/mvcapp.csproj.\r\n/usr/share/dotnet/sdk/2.1.401-preview-009081/Sdks/Microsoft.NET.Sdk/targets/Microsoft.NET.RuntimeIdentifierInference.targets(143,5): message NETSDK1057: You are working with a preview version of the .NET Core SDK. You can define the SDK version via a global.json file in the current project. More at https://go.microsoft.com/fwlink/?linkid=869452 [/mvcapp/mvcapp.csproj]\r\n  mvcapp -> /mvcapp/bin/Debug/netcoreapp2.1/mvcapp.dll\r\n  mvcapp -> /mvcapp/bin/Debug/netcoreapp2.1/mvcapp.Views.dll\r\n\r\nBuild succeeded.\r\n    0 Warning(s)\r\n    0 Error(s)\r\n\r\nTime Elapsed 00:02:09.15\r\n\r\nreal    2m13.377s\r\nuser    1m25.260s\r\nsys     0m9.420s\r\nroot@416731f24915:/mvcapp#\r\n```\r\n\r\n### .NET Core 2.1 SDK image before this change\r\n\r\n```console\r\npi@raspberrypi:~ $ docker run -it --rm microsoft/dotnet:2.1-sdk\r\nroot@9d1d5e45df6a:/# time dotnet new mvc -o mvcapp\r\nGetting ready...\r\nThe template \"ASP.NET Core Web App (Model-View-Controller)\" was created successfully.\r\nThis template contains technologies from parties other than Microsoft, see https://aka.ms/aspnetcore-template-3pn-210 for details.\r\n\r\nProcessing post-creation actions...\r\nRunning 'dotnet restore' on mvcapp/mvcapp.csproj...\r\n  Restoring packages for /mvcapp/mvcapp.csproj...\r\n  Installing System.Xml.XmlSerializer 4.3.0.\r\n  Installing System.Threading.Tasks.Extensions 4.0.0.\r\n  Installing System.Globalization.Extensions 4.0.1.\r\n  Installing runtime.native.System.Security.Cryptography 4.0.0.\r\n  Installing System.Security.Cryptography.OpenSsl 4.0.0.\r\n  Installing System.Security.Cryptography.Cng 4.2.0.\r\n  Installing System.Security.Cryptography.Csp 4.0.0.\r\n  Installing runtime.native.System.Net.Http 4.0.1.\r\n  Installing runtime.native.System 4.0.0.\r\n  Installing runtime.native.System.IO.Compression 4.1.0.\r\n  Installing System.Buffers 4.0.0.\r\n  Installing System.Private.DataContractSerialization 4.3.0.\r\n  Installing System.Security.Principal 4.3.0.\r\n  Installing runtime.osx.10.10-x64.runtime.native.System.Security.Cryptography.Apple 4.3.0.\r\n  Installing runtime.rhel.7-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing runtime.ubuntu.14.04-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing runtime.opensuse.42.1-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.NETCore.App 2.1.0.\r\n  Installing runtime.ubuntu.16.10-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.AspNetCore.App 2.1.1.\r\n  Installing runtime.ubuntu.16.04-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.NETCore.Platforms 2.1.0.\r\n  Installing Microsoft.NETCore.Targets 2.1.0.\r\n  Installing NETStandard.Library 2.0.3.\r\n  Installing Microsoft.NETCore.DotNetHostPolicy 2.1.0.\r\n  Installing Microsoft.AspNetCore 2.1.1.\r\n  Installing Microsoft.AspNetCore.Antiforgery 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Localization 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Session 2.1.1.\r\n  Installing Microsoft.AspNetCore.SpaServices 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.KeyPerFile 2.1.1.\r\n  Installing Microsoft.Extensions.FileProviders.Abstractions 2.1.1.\r\n  Installing Microsoft.Extensions.Hosting 2.1.1.\r\n  Installing Microsoft.Extensions.FileProviders.Embedded 2.1.1.\r\n  Installing Microsoft.Extensions.FileProviders.Physical 2.1.1.\r\n  Installing Microsoft.Extensions.Localization 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.Cookies 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.Core 2.1.1.\r\n  Installing runtime.osx.10.10-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.AspNetCore.Authentication.Google 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.Facebook 2.1.1.\r\n  Installing Microsoft.Extensions.Hosting.Abstractions 2.1.1.\r\n  Installing runtime.opensuse.13.2-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.AspNetCore.HttpsPolicy 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.MicrosoftAccount 2.1.1.\r\n  Installing Microsoft.Extensions.Http 2.1.1.\r\n  Installing Microsoft.AspNetCore.MiddlewareAnalysis 2.1.1.\r\n  Installing Microsoft.Extensions.FileSystemGlobbing 2.1.1.\r\n  Installing Microsoft.Extensions.DiagnosticAdapter 2.1.0.\r\n  Installing Microsoft.Extensions.Identity.Core 2.1.1.\r\n  Installing Microsoft.Extensions.Identity.Stores 2.1.1.\r\n  Installing Microsoft.Extensions.Options.ConfigurationExtensions 2.1.1.\r\n  Installing Microsoft.Extensions.Localization.Abstractions 2.1.1.\r\n  Installing Microsoft.Extensions.Logging.Abstractions 2.1.1.\r\n  Installing runtime.fedora.24-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.Extensions.Options 2.1.1.\r\n  Installing Microsoft.Extensions.FileProviders.Composite 2.1.1.\r\n  Installing Microsoft.Extensions.Logging 2.1.1.\r\n  Installing Microsoft.Extensions.Logging.Configuration 2.1.1.\r\n  Installing Microsoft.Extensions.Logging.TraceSource 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.UserSecrets 2.1.1.\r\n  Installing Microsoft.Extensions.Logging.Debug 2.1.1.\r\n  Installing Microsoft.Extensions.Logging.Console 2.1.1.\r\n  Installing Microsoft.Extensions.DependencyInjection 2.1.1.\r\n  Installing Microsoft.Extensions.ObjectPool 2.1.1.\r\n  Installing runtime.debian.8-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.Extensions.DependencyInjection.Abstractions 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.Binder 2.1.1.\r\n  Installing runtime.fedora.23-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.Extensions.Configuration.EnvironmentVariables 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.FileExtensions 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.Abstractions 2.1.1.\r\n  Installing Microsoft.Extensions.Caching.Memory 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.CommandLine 2.1.1.\r\n  Installing Microsoft.Extensions.Caching.Abstractions 2.1.1.\r\n  Installing Microsoft.Net.Http.Headers 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.InMemory 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.Abstractions 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.Ini 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.Analyzers 2.1.1.\r\n  Installing Microsoft.AspNetCore.StaticFiles 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.Relational 2.1.1.\r\n  Installing Microsoft.AspNetCore.Server.Kestrel.Https 2.1.1.\r\n  Installing Microsoft.Extensions.Primitives 2.1.1.\r\n  Installing Microsoft.AspNetCore.SpaServices.Extensions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Server.Kestrel 2.1.1.\r\n  Installing Microsoft.Extensions.WebEncoders 2.1.1.\r\n  Installing Microsoft.AspNetCore.WebUtilities 2.1.1.\r\n  Installing Microsoft.AspNetCore.SignalR 1.0.1.\r\n  Installing Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets 2.1.1.\r\n  Installing Microsoft.AspNetCore.Routing 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.Tools 2.1.1.\r\n  Installing Microsoft.AspNetCore.Routing.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Rewrite 2.1.1.\r\n  Installing Microsoft.AspNetCore.ResponseCaching.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Server.Kestrel.Transport.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.ResponseCaching 2.1.1.\r\n  Installing Microsoft.AspNetCore.ResponseCompression 2.1.1.\r\n  Installing System.Globalization.Extensions 4.3.0.\r\n  Installing Microsoft.AspNetCore.Razor.Language 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.TagHelpers 2.1.1.\r\n  Installing Microsoft.AspNetCore.Razor.Runtime 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.RazorPages 2.1.1.\r\n  Installing Microsoft.AspNetCore.Owin 2.1.1.\r\n  Installing Microsoft.AspNetCore.Razor 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Razor.Extensions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Razor.ViewCompilation 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Analyzers 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Localization 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Formatters.Json 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.Design 2.1.1.\r\n  Installing Microsoft.AspNetCore.WebSockets 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Cors 2.1.1.\r\n  Installing System.Diagnostics.DiagnosticSource 4.3.0.\r\n  Installing Microsoft.AspNetCore.Mvc.DataAnnotations 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.ApiExplorer 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Formatters.Xml 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc 2.1.1.\r\n  Installing Microsoft.Extensions.Logging.EventSource 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.OAuth 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.Json 2.1.1.\r\n  Installing Microsoft.AspNetCore.SignalR.Protocols.Json 1.0.1.\r\n  Installing Microsoft.AspNetCore.NodeServices 2.1.1.\r\n  Installing Microsoft.AspNetCore.SignalR.Common 1.0.1.\r\n  Installing Microsoft.AspNetCore.JsonPatch 2.1.1.\r\n  Installing Microsoft.AspNetCore.Localization.Routing 2.1.1.\r\n  Installing Microsoft.AspNetCore.Server.IISIntegration 2.1.1.\r\n  Installing Microsoft.AspNetCore.Identity.UI 2.1.1.\r\n  Installing Microsoft.AspNetCore.Razor.Design 2.1.1.\r\n  Installing Microsoft.AspNetCore.Identity.EntityFrameworkCore 2.1.1.\r\n  Installing Microsoft.AspNetCore.Http.Extensions 2.1.1.\r\n  Installing Microsoft.AspNetCore.HttpOverrides 2.1.1.\r\n  Installing Microsoft.AspNetCore.Identity 2.1.1.\r\n  Installing Microsoft.AspNetCore.Http.Features 2.1.1.\r\n  Installing Microsoft.AspNetCore.Http.Connections 1.0.1.\r\n  Installing Microsoft.AspNetCore.Http.Connections.Common 1.0.1.\r\n  Installing Microsoft.AspNetCore.Http 2.1.1.\r\n  Installing Microsoft.AspNetCore.Diagnostics.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Cors 2.1.1.\r\n  Installing Microsoft.AspNetCore.Hosting.Server.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Http.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.DataProtection.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Hosting.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Diagnostics.EntityFrameworkCore 2.1.1.\r\n  Installing Microsoft.AspNetCore.Cryptography.Internal 2.1.1.\r\n  Installing Microsoft.AspNetCore.Cryptography.KeyDerivation 2.1.1.\r\n  Installing Microsoft.AspNetCore.DataProtection.Extensions 2.1.1.\r\n  Installing Microsoft.AspNetCore.HostFiltering 2.1.1.\r\n  Installing Microsoft.CSharp 4.0.1.\r\n  Installing Microsoft.AspNetCore.CookiePolicy 2.1.1.\r\n  Installing Microsoft.AspNetCore.Server.Kestrel.Core 2.1.1.\r\n  Installing Microsoft.AspNetCore.Html.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.Twitter 2.1.1.\r\n  Installing Microsoft.AspNetCore.Connections.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authorization.Policy 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authorization 2.1.1.\r\n  Installing Microsoft.AspNetCore.Diagnostics 2.1.1.\r\n  Installing Microsoft.AspNetCore.Server.HttpSys 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.Xml 2.1.1.\r\n  Installing Microsoft.AspNetCore.Hosting 2.1.1.\r\n  Installing Microsoft.AspNetCore.DataProtection 2.1.1.\r\n  Installing Microsoft.Extensions.Caching.SqlServer 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.SqlServer 2.1.1.\r\n  Installing Microsoft.AspNet.WebApi.Client 5.2.6.\r\n  Installing Microsoft.AspNetCore.SignalR.Core 1.0.1.\r\n  Installing Microsoft.AspNetCore.Mvc.ViewFeatures 2.1.1.\r\n  Installing Microsoft.CodeAnalysis.Razor 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.JwtBearer 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.OpenIdConnect 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Razor 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.WsFederation 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore 2.1.1.\r\n  Installing System.Runtime.Serialization.Primitives 4.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Core 2.1.1.\r\n  Installing System.Xml.ReaderWriter 4.0.11.\r\n  Installing Microsoft.NETCore.DotNetHostResolver 2.1.0.\r\n  Installing System.Diagnostics.DiagnosticSource 4.5.0.\r\n  Installing System.ComponentModel.Annotations 4.5.0.\r\n  Installing System.Buffers 4.5.0.\r\n  Installing System.Memory 4.5.1.\r\n  Installing System.Runtime.CompilerServices.Unsafe 4.5.1.\r\n  Installing System.Text.Encodings.Web 4.5.0.\r\n  Installing Microsoft.CSharp 4.5.0.\r\n  Installing System.Net.WebSockets.WebSocketProtocol 4.5.1.\r\n  Installing Newtonsoft.Json 11.0.2.\r\n  Installing System.IO.Pipelines 4.5.0.\r\n  Installing System.Numerics.Vectors 4.5.0.\r\n  Installing System.Security.Principal.Windows 4.5.0.\r\n  Installing System.Threading.Tasks.Extensions 4.5.1.\r\n  Installing System.Security.Cryptography.Cng 4.5.0.\r\n  Installing System.Net.Http 4.1.0.\r\n  Installing System.Security.Cryptography.Xml 4.5.0.\r\n  Installing Microsoft.Win32.Registry 4.5.0.\r\n  Installing System.Reflection.Metadata 1.6.0.\r\n  Installing System.Data.SqlClient 4.5.1.\r\n  Installing Newtonsoft.Json.Bson 1.0.1.\r\n  Installing Newtonsoft.Json 10.0.1.\r\n  Installing System.Threading.Channels 4.5.0.\r\n  Installing System.Reflection.Emit 4.3.0.\r\n  Installing Microsoft.CodeAnalysis.CSharp 2.8.0.\r\n  Installing Microsoft.CodeAnalysis.Common 2.8.0.\r\n  Installing System.Security.Cryptography.Algorithms 4.2.0.\r\n  Installing Microsoft.IdentityModel.Protocols.OpenIdConnect 5.2.0.\r\n  Installing System.IdentityModel.Tokens.Jwt 5.2.0.\r\n  Installing Microsoft.IdentityModel.Protocols.WsFederation 5.2.0.\r\n  Installing System.Collections.Immutable 1.5.0.\r\n  Installing Remotion.Linq 2.2.0.\r\n  Installing System.Interactive.Async 3.1.1.\r\n  Installing Microsoft.Extensions.DependencyModel 2.1.0.\r\n  Installing Microsoft.NETCore.DotNetAppHost 2.1.0.\r\n  Installing Microsoft.NETCore.Platforms 2.0.0.\r\n  Installing System.Security.Cryptography.Pkcs 4.5.0.\r\n  Installing System.Security.Permissions 4.5.0.\r\n  Installing System.Security.AccessControl 4.5.0.\r\n  Installing NETStandard.Library 1.6.1.\r\n  Installing System.Text.Encoding.CodePages 4.5.0.\r\n  Installing System.Linq 4.3.0.\r\n  Installing runtime.native.System.Data.SqlClient.sni 4.4.0.\r\n  Installing System.Diagnostics.Debug 4.3.0.\r\n  Installing System.Globalization 4.3.0.\r\n  Installing System.IO 4.3.0.\r\n  Installing System.Collections 4.3.0.\r\n  Installing System.Runtime.Serialization.Primitives 4.3.0.\r\n  Installing System.Runtime.Serialization.Formatters 4.3.0.\r\n  Installing System.Xml.XmlDocument 4.3.0.\r\n  Installing System.Threading 4.3.0.\r\n  Installing System.Resources.ResourceManager 4.3.0.\r\n  Installing System.Text.Encoding.Extensions 4.3.0.\r\n  Installing System.Xml.XDocument 4.3.0.\r\n  Installing System.Threading.Tasks 4.3.0.\r\n  Installing System.Linq.Expressions 4.3.0.\r\n  Installing System.Runtime.Numerics 4.3.0.\r\n  Installing System.Text.Encoding 4.3.0.\r\n  Installing System.Reflection.Extensions 4.3.0.\r\n  Installing System.Text.RegularExpressions 4.3.0.\r\n  Installing System.Runtime.Extensions 4.3.0.\r\n  Installing System.Reflection 4.3.0.\r\n  Installing System.ObjectModel 4.3.0.\r\n  Installing System.Dynamic.Runtime 4.3.0.\r\n  Installing System.Xml.ReaderWriter 4.3.0.\r\n  Installing Microsoft.CSharp 4.3.0.\r\n  Installing System.ComponentModel.TypeConverter 4.3.0.\r\n  Installing System.Runtime 4.3.0.\r\n  Installing System.Reflection.Emit.ILGeneration 4.3.0.\r\n  Installing System.Reflection.Primitives 4.3.0.\r\n  Installing System.AppContext 4.3.0.\r\n  Installing System.Console 4.3.0.\r\n  Installing System.Collections.Concurrent 4.3.0.\r\n  Installing System.Diagnostics.Tools 4.3.0.\r\n  Installing System.Security.Cryptography.Encoding 4.0.0.\r\n  Installing System.IO.Compression 4.3.0.\r\n  Installing System.IO.FileSystem 4.3.0.\r\n  Installing System.IO.FileSystem.Primitives 4.3.0.\r\n  Installing System.Security.Cryptography.Encoding 4.3.0.\r\n  Installing System.Collections.Immutable 1.3.1.\r\n  Installing System.Runtime.InteropServices 4.3.0.\r\n  Installing System.Security.Cryptography.X509Certificates 4.1.0.\r\n  Installing System.Diagnostics.StackTrace 4.3.0.\r\n  Installing System.Reflection.Metadata 1.4.2.\r\n  Installing System.Threading.Thread 4.3.0.\r\n  Installing Microsoft.CodeAnalysis.Analyzers 1.1.0.\r\n  Installing System.Security.Cryptography.X509Certificates 4.3.0.\r\n  Installing System.ValueTuple 4.3.0.\r\n  Installing System.Diagnostics.FileVersionInfo 4.3.0.\r\n  Installing System.Threading.Tasks.Parallel 4.3.0.\r\n  Installing System.Security.Cryptography.Algorithms 4.3.0.\r\n  Installing System.Xml.XPath.XDocument 4.3.0.\r\n  Installing System.Text.Encoding.CodePages 4.3.0.\r\n  Installing System.Runtime.InteropServices 4.1.0.\r\n  Installing Microsoft.IdentityModel.Protocols 5.2.0.\r\n  Installing Microsoft.IdentityModel.Tokens 5.2.0.\r\n  Installing Microsoft.IdentityModel.Xml 5.2.0.\r\n  Installing System.Diagnostics.Debug 4.0.11.\r\n  Installing System.Reflection.Extensions 4.0.1.\r\n  Installing Microsoft.IdentityModel.Tokens.Saml 5.2.0.\r\n  Installing System.Runtime.Extensions 4.1.0.\r\n  Installing System.Threading 4.0.11.\r\n  Installing System.Collections 4.0.11.\r\n  Installing System.Reflection 4.1.0.\r\n  Installing System.ObjectModel 4.0.12.\r\n  Installing System.Linq 4.1.0.\r\n  Installing System.Linq.Queryable 4.0.1.\r\n  Installing System.Linq.Expressions 4.1.0.\r\n  Installing System.Runtime 4.1.0.\r\n  Installing NETStandard.Library 1.6.0.\r\n  Installing System.Dynamic.Runtime 4.0.11.\r\n  Installing Newtonsoft.Json 9.0.1.\r\n  Installing Microsoft.DotNet.PlatformAbstractions 2.1.0.\r\n  Installing System.Runtime.CompilerServices.Unsafe 4.5.0.\r\n  Installing runtime.win-x64.runtime.native.System.Data.SqlClient.sni 4.4.0.\r\n  Installing runtime.win-x86.runtime.native.System.Data.SqlClient.sni 4.4.0.\r\n  Installing runtime.win-arm64.runtime.native.System.Data.SqlClient.sni 4.4.0.\r\n  Installing Microsoft.NETCore.Platforms 1.1.0.\r\n  Installing Microsoft.Win32.Primitives 4.3.0.\r\n  Installing System.Net.Sockets 4.3.0.\r\n  Installing System.Diagnostics.Tracing 4.3.0.\r\n  Installing System.IO.Compression.ZipFile 4.3.0.\r\n  Installing System.Globalization.Calendars 4.3.0.\r\n  Installing System.Threading.Timer 4.3.0.\r\n  Installing System.Security.Cryptography.Primitives 4.3.0.\r\n  Installing System.Runtime.InteropServices.RuntimeInformation 4.0.0.\r\n  Installing System.Runtime.Handles 4.3.0.\r\n  Installing System.Runtime.InteropServices.RuntimeInformation 4.3.0.\r\n  Installing System.Net.Http 4.3.0.\r\n  Installing Microsoft.NETCore.Targets 1.1.0.\r\n  Installing System.Net.Primitives 4.3.0.\r\n  Installing System.Reflection.Emit.Lightweight 4.3.0.\r\n  Installing System.Reflection.TypeExtensions 4.3.0.\r\n  Installing System.Threading.Tasks.Extensions 4.3.0.\r\n  Installing System.ComponentModel 4.3.0.\r\n  Installing System.ComponentModel.Primitives 4.3.0.\r\n  Installing System.Collections.NonGeneric 4.3.0.\r\n  Installing System.Collections.Specialized 4.3.0.\r\n  Installing runtime.native.System 4.3.0.\r\n  Installing runtime.native.System.IO.Compression 4.3.0.\r\n  Installing System.Buffers 4.3.0.\r\n  Installing runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing runtime.native.System.Net.Http 4.3.0.\r\n  Installing System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing System.Security.Cryptography.Cng 4.3.0.\r\n  Installing System.Security.Cryptography.Csp 4.3.0.\r\n  Installing runtime.native.System.Security.Cryptography.Apple 4.3.0.\r\n  Installing System.Xml.XPath 4.3.0.\r\n  Installing Microsoft.IdentityModel.Logging 5.2.0.\r\n  Installing System.Diagnostics.Contracts 4.3.0.\r\n  Installing System.Runtime.Serialization.Xml 4.3.0.\r\n  Installing Microsoft.NETCore.Platforms 1.0.1.\r\n  Installing Microsoft.NETCore.Targets 1.0.1.\r\n  Installing System.Security.Claims 4.3.0.\r\n  Installing System.Reflection.Primitives 4.0.1.\r\n  Installing System.IO 4.1.0.\r\n  Installing System.Globalization 4.0.11.\r\n  Installing System.Threading.Tasks 4.0.11.\r\n  Installing System.Resources.ResourceManager 4.0.1.\r\n  Installing System.Reflection.Emit 4.0.1.\r\n  Installing System.Reflection.TypeExtensions 4.1.0.\r\n  Installing System.Reflection.Emit.ILGeneration 4.0.1.\r\n  Installing System.Reflection.Emit.Lightweight 4.0.1.\r\n  Installing System.AppContext 4.1.0.\r\n  Installing System.Collections.Concurrent 4.0.12.\r\n  Installing System.IO.FileSystem.Primitives 4.0.1.\r\n  Installing System.Runtime.Numerics 4.0.1.\r\n  Installing System.Security.Cryptography.Primitives 4.0.0.\r\n  Installing System.Xml.XDocument 4.0.11.\r\n  Installing System.Text.RegularExpressions 4.1.0.\r\n  Installing Microsoft.Win32.Primitives 4.0.1.\r\n  Installing System.Console 4.0.0.\r\n  Installing System.Diagnostics.Tools 4.0.1.\r\n  Installing System.Diagnostics.Tracing 4.1.0.\r\n  Installing System.Globalization.Calendars 4.0.1.\r\n  Installing System.IO.FileSystem 4.0.1.\r\n  Installing System.Net.Sockets 4.1.0.\r\n  Installing System.Text.Encoding 4.0.11.\r\n  Installing System.Threading.Timer 4.0.1.\r\n  Installing System.Net.Primitives 4.0.11.\r\n  Installing System.Runtime.Handles 4.0.1.\r\n  Installing System.Text.Encoding.Extensions 4.0.11.\r\n  Installing System.IO.Compression.ZipFile 4.0.1.\r\n  Installing System.IO.Compression 4.1.0.\r\n  Generating MSBuild file /mvcapp/obj/mvcapp.csproj.nuget.g.props.\r\n  Generating MSBuild file /mvcapp/obj/mvcapp.csproj.nuget.g.targets.\r\n  Restore completed in 44.04 sec for /mvcapp/mvcapp.csproj.\r\n\r\nRestore succeeded.\r\n\r\n\r\nreal    1m8.386s\r\nuser    1m8.010s\r\nsys     0m18.190s\r\nroot@9d1d5e45df6a:/# cd mvcapp/\r\nroot@9d1d5e45df6a:/mvcapp# time dotnet build\r\nMicrosoft (R) Build Engine version 15.7.179.6572 for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  Restore completed in 557.76 ms for /mvcapp/mvcapp.csproj.\r\n  mvcapp -> /mvcapp/bin/Debug/netcoreapp2.1/mvcapp.dll\r\n  mvcapp -> /mvcapp/bin/Debug/netcoreapp2.1/mvcapp.Views.dll\r\n\r\nBuild succeeded.\r\n    0 Warning(s)\r\n    0 Error(s)\r\n\r\nTime Elapsed 00:02:07.34\r\n\r\nreal    2m11.716s\r\nuser    1m22.990s\r\nsys     0m8.880s\r\nroot@9d1d5e45df6a:/mvcapp#\r\n```\r\n","Url":"https://github.com/dotnet/announcements/issues/80","RelatedDescription":"Closed issue \"Improving Performance of ARM32 Docker Images with .NET Core Package Cache\" (#80)"},{"Id":"350233220","IsPullRequest":false,"CreatedAt":"2018-08-13T23:50:57","Actor":"richlander","Number":"81","RawContent":null,"Title":"Advisory serializing/deserializing a CultureAwareComparer with .NET Framework 4.6+","State":"open","Body":"# Advisory serializing/deserializing a CultureAwareComparer with .NET Framework 4.6+\r\n\r\nAn [issue with serializing/deserializing a CultureAwareComparer](https://github.com/Microsoft/dotnet/blob/master/releases/net471/KnownIssues/521954%20-%20BCL%20CultureAwareComparer%20with%20ignore%20casing%20on%20serialized%20on%20previous%20versions%20of%20.NET%20do%20not%20correctly%20deserialize%20on%20.NET%204.7.1.md) was discovered with [.NET Framework 4.7.1](https://blogs.msdn.microsoft.com/dotnet/2017/10/17/announcing-the-net-framework-4-7-1/). This issue was resolved earlier this year, with the [May 2018 Preview of Quality Rollup](https://blogs.msdn.microsoft.com/dotnet/2018/05/15/net-framework-may-2018-preview-of-quality-rollup/). We recently learned that some applications, including Johnson Controls’ C-CURE 9000 Software, were negatively impacted by this change as this update requires all client and server workstations to be updated simultaneously with the appropriate Microsoft updates. The changes made to .NET Framework 4.7.1 were also integrated into .NET Framework 4.6 and later servicing releases. As a result, this advisory applies to .NET Framework 4.6 and later versions.\r\n\r\nThis advisory is provided so that developers can correctly diagnose this issue and be aware of our guidance. We will continue to update this issue as we have new information to share.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [microsoft/dotnet #832](https://github.com/Microsoft/dotnet/issues/832)\r\n\r\n## Guidance\r\n\r\nThis guidance only applies to customers that have experienced this issue.\r\n\r\nWe have released [an update for .NET Framework 4.6](https://blogs.msdn.microsoft.com/dotnet/2018/08/30/net-framework-august-2018-preview-of-quality-rollup/) and later that resolves the issue. **You must deploy the .NET Framework update for this issue to all .NET Framework 4.6+ machines that communicate via serialized objects**. After doing that, cross-machine serialization will work as expected. \r\n \r\nPlease consult your software vendor to understand if this impacts the software you are using.\r\n\r\n## Technical Context\r\n\r\nIn the [May 2018 Preview of Quality Rollup](https://blogs.msdn.microsoft.com/dotnet/2018/05/15/net-framework-may-2018-preview-of-quality-rollup/), we made a change to the internal type CultureAwareComparer to implement ISerializable. We made the change in order to address [issue with serializing/deserializing a CultureAwareComparer](https://github.com/Microsoft/dotnet/blob/master/releases/net471/KnownIssues/521954%20-%20BCL%20CultureAwareComparer%20with%20ignore%20casing%20on%20serialized%20on%20previous%20versions%20of%20.NET%20do%20not%20correctly%20deserialize%20on%20.NET%204.7.1.md).\r\n\r\nThe issue reported was that a type that contains an instance of CultureAwareComparer was not able to correctly serialize and deserialize across different versions of the .NET Framework. There are a few types in .NET Framework that do this, the most commonly impacted one being the Dictionary<TKey, TValue> type.\r\n \r\nThe change to implement the ISerializable interface had unintended side effects when exchanging this type across different machines. We have had a small number of reports from customers who have been affected.\r\n\r\nA common, but not unique way, of exchanging objects across machines is to use WCF in conjunction with a serializer. One of the common serializers being DataContractSerializer. The side-effect of the change prevented data serialized on systems where the type implements ISerializable to correctly deserialize of systems where the type does NOT implement ISerializable. The same is true of the opposite case, that systems where the type does not implement ISerializable will not correctly deserialize data from systems where the type does implement ISerializable.\r\n\r\nWe have an updated fix that we intend to release within the next month that will remove the implementation of the ISerializable interface on the type and use a different internal mechanism for ensuring the cross-version serialization continues to work as expected. This change addresses the break experienced with WCF.\r\n\r\nThe upcoming fix will remove the implementation of the ISerializable interface on the type and use a different mechanism for ensuring the cross-version serialization of that type continues to work. This change addresses the break experienced with WCF.\r\n\r\n## Symptoms\r\n\r\nAn application that is affected by this issue will most likely crash when trying to deserialize an object. It may print or log an error message similar to the following one:\r\n\r\n```\r\nThe formatter threw an exception while trying to deserialize the message: \r\nThere was an error while trying to deserialize parameter . The InnerException message was ''EndElement' 'Comparer' from namespace '' is not expected. Expecting element '_compareInfo'.'.  Please see InnerException for more details.\r\n```\r\n","Url":"https://github.com/dotnet/announcements/issues/81","RelatedDescription":"Open issue \"Advisory serializing/deserializing a CultureAwareComparer with .NET Framework 4.6+\" (#81)"},{"Id":"348162872","IsPullRequest":false,"CreatedAt":"2018-08-07T04:26:40","Actor":"richlander","Number":"79","RawContent":null,"Title":"August 2018 .NET Updates","State":"open","Body":"# August 2018 .NET Updates\r\n\r\nThe following .NET updates were released in August 2018. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Framework \r\n\r\n* [August 2018 .NET Framework Security and Quality Rollup - August 14, 2018](https://blogs.msdn.microsoft.com/dotnet/2018/08/14/august-2018-security-and-quality-rollup/)\r\n* [Advisory serializing/deserializing a CultureAwareComparer with .NET Framework 4.6+](https://github.com/dotnet/announcements/issues/81)\r\n* [Advisory on July 2018 .NET Framework Updates](https://blogs.msdn.microsoft.com/dotnet/2018/07/20/advisory-on-july-2018-net-framework-updates/)\r\n* [August 2018 Preview of Quality Rollup - August 30, 2018](https://blogs.msdn.microsoft.com/dotnet/2018/08/30/net-framework-august-2018-preview-of-quality-rollup/)\r\n\r\n## .NET Core\r\n\r\n* [.NET Core August 2018 Update - August 21, 2018](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.3/2.1.3.md)\r\n* [.NET Core 2.1.400 SDK Update - August 14, 2018](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.400-SDK/2.1.400-sdk.md)\r\n\r\n## End of Support for Operating System Versions\r\n\r\n.NET Core does not support systems that are out of support. The following operating systems are now out of support. To stay supported, move to a [later version of the given operating system](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md).\r\n\r\n* [Debian 8 -- Jessie](https://lists.debian.org/debian-security-announce/2018/msg00132.html)\r\n* [Ubuntu 17.10 -- Artful Aardvark](https://lists.ubuntu.com/archives/ubuntu-announce/2018-July/000232.html)\r\n\r\nSee [Debian Jessie End of Life -- Impact on .NET Core Docker Images](https://github.com/dotnet/announcements/issues/78)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)","Url":"https://github.com/dotnet/announcements/issues/79","RelatedDescription":"Open issue \"August 2018 .NET Updates\" (#79)"},{"Id":"348161534","IsPullRequest":false,"CreatedAt":"2018-08-07T04:18:01","Actor":"richlander","Number":"78","RawContent":null,"Title":"Debian Jessie End of Life -- Impact on .NET Core Docker Images","State":"open","Body":"# Debian Jessie End of Life -- Impact on .NET Core Docker Images\r\n\r\nDebian Jessie (AKA Debian 8) is now [out of support](https://lists.debian.org/debian-security-announce/2018/msg00132.html). Debian Jessie is no longer a supported operating system for .NET Core. Docker users need to switch to Debian Stretch-based (AKA Debian 9) images to stay in support.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet/dotnet-docker #647](https://github.com/dotnet/dotnet-docker/issues/647)\r\n\r\n## Context\r\n\r\nJessie-based images are currently provided for .NET Core 1.0, 1.1 and 2.0. .NET Core 1.0 and 1.1 expose multi-arch tags, such as `1.0-runtime` and `1.1-sdk`, that support Debian Jessie. When pulled for a Linux Docker daemon (on Linux or Windows), these tags pull Jessie-based images. .NET Core 2.0 supports Jessie, but it is not the default. .NET Core 2.0 multi-arch tags, such as `2.0-runtime` and `2.0-sdk`, pull Debian Stretch-based images, when pulled for a Linux Docker daemon. We made a conscious decision with .NET Core 2.0 to move off of Jessie as the default to avoid this problem, based the Jessie 2018 EOL date. .NET Core 2.1 does not support Jessie, only Stretch.\r\n\r\nWe recently posted about our policy for underlying operating system dependencies with Docker:\r\n\r\n> For each major and minor .NET version, we may take a new major operating system version dependency. As I mentioned earlier, we adopted Debian 9 as the base image for .NET Core 2.0. We stayed with Debian 9 for .NET Core 2.1, since Debian 10 (AKA “Buster”) has not been released. Debian 9 will remain the default base image for .NET Core 2.1 for the life of .NET Core 2.1. **Once we adopt an underlying operating system major version, we will not change it for the life of that given .NET release.**\r\n\r\nSource: https://blogs.msdn.microsoft.com/dotnet/2018/06/18/staying-up-to-date-with-net-container-images/\r\n\r\n## Plan\r\n\r\nWe will continue to re-build .NET Core 1.0 and 1.1 multi-arch tags on top of Jessie for the remaining [supported lifetime of .NET Core 1.0 and 1.1](https://github.com/dotnet/core/blob/master/microsoft-support.md). We will also provide a Stretch-based image for .NET Core 1.1. This tag will look like the following: `1.1-runtime-stretch` or `1.1.9-sdk-stretch`. This is same format that Jessie has used.\r\n\r\nWe will produce Jessie-based images for NET Core 2.0 until October 2018, which is when [.NET Core 2.0 support ends](https://github.com/dotnet/core/blob/master/microsoft-support.md). .NET Core 2.0 multi-arch tags support Debian Stretch, not Jessie, as described above.\r\n\r\nIn summary, .NET Core is no longer supported on Debian Jessie, with Docker or otherwise. We will produce Docker images for Jessie until .NET Core 1.0, 1.1 and 2.0 support ends, respectively, to avoid breaking applications. This aligns with the policy defined above, per [Staying up-to-date with .NET Container Images](https://blogs.msdn.microsoft.com/dotnet/2018/06/18/staying-up-to-date-with-net-container-images/).\r\n\r\n## Affected Repos\r\n\r\n* [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/)\r\n* [microsoft/dotnet-nightly](https://hub.docker.com/r/microsoft/dotnet-nightly/)\r\n* [microsoft/aspnetcore](https://hub.docker.com/r/microsoft/aspnetcore/)\r\n* [microsoft/aspnetcore-build](https://hub.docker.com/r/microsoft/aspnetcore-build/)","Url":"https://github.com/dotnet/announcements/issues/78","RelatedDescription":"Open issue \"Debian Jessie End of Life -- Impact on .NET Core Docker Images\" (#78)"},{"Id":"345028102","IsPullRequest":false,"CreatedAt":"2018-07-26T22:31:32","Actor":"leecow","Number":"77","RawContent":null,"Title":"https://dot.net now using TLS 1.2-only","State":"open","Body":"Earlier today, https://dot.net switched to using TLS 1.2-only. Most Windows Powershell instances default to TLS 1.1 and will thus fail with `wget : The underlying connection was closed: An unexpected error occurred on a send. trying to run the previous command.`\r\n\r\nAn example of a PowerShell script fix can be seen in https://github.com/dotnet/docs/pull/6689","Url":"https://github.com/dotnet/announcements/issues/77","RelatedDescription":"Open issue \"https://dot.net now using TLS 1.2-only\" (#77)"},{"Id":"343360319","IsPullRequest":false,"CreatedAt":"2018-07-21T22:29:05","Actor":"richlander","Number":"76","RawContent":null,"Title":"July 2018 .NET Updates","State":"open","Body":"# July 2018 .NET Updates\r\n\r\nThe following .NET updates were released in June 2018. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Framework \r\n\r\n* [.NET Framework 4.7.2 is available on Windows Update, WSUS and MU Catalog](https://blogs.msdn.microsoft.com/dotnet/2018/07/10/net-framework-4-7-2-is-available-on-windows-update-wsus-and-mu-catalog/)\r\n* [Announcing .NET Framework 4.8 Early Access build 3632](https://blogs.msdn.microsoft.com/dotnet/2018/07/18/announcing-net-framework-4-8-early-access-build-3632/)\r\n* [Advisory on July 2018 .NET Framework Updates](https://blogs.msdn.microsoft.com/dotnet/2018/07/20/advisory-on-july-2018-net-framework-updates/)\r\n* [.NET Framework July 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/07/30/net-framework-july-2018-update/)\r\n\r\n## .NET Core\r\n\r\n* [.NET Core July 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/07/10/net-core-july-2018-update/)\r\n\r\n## .NET Core Support Policies\r\n\r\n* [Microsoft Support for .NET Core](https://github.com/dotnet/core/blob/master/microsoft-support.md)\r\n* [.NET Core Supported OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)\r\n* [April 2018](https://github.com/dotnet/announcements/issues/64)\r\n","Url":"https://github.com/dotnet/announcements/issues/76","RelatedDescription":"Open issue \"July 2018 .NET Updates\" (#76)"},{"Id":"343360017","IsPullRequest":false,"CreatedAt":"2018-07-21T22:22:25","Actor":"richlander","Number":"75","RawContent":null,"Title":"June 2018 .NET Updates","State":"open","Body":"# June 2018 .NET Updates\r\n\r\nThe following .NET updates were released in June 2018.\r\n\r\n## .NET Framework \r\n\r\n* [.NET Framework June 2018 Security and Quality Rollup](https://blogs.msdn.microsoft.com/dotnet/2018/06/13/net-framework-june-2018-security-and-quality-rollup/)\r\n* [Announcing .NET Framework 4.8 Early Access build 3621!](https://blogs.msdn.microsoft.com/dotnet/2018/06/06/announcing-net-framework-4-8-early-access-build-3621/)\r\n\r\n## .NET Core\r\n\r\n* [.NET Core 2.1 June Update](https://blogs.msdn.microsoft.com/dotnet/2018/06/22/net-core-2-1-june-update/)\r\n* [.NET Core 2.0 will reach End of Life on October 1, 2018](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/)\r\n* [.NET Core 1.0 and 1.1 EOL Dates Documented](https://github.com/dotnet/core/blob/master/microsoft-support.md)\r\n\r\n## Previous Updates\r\n\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)\r\n* [April 2018](https://github.com/dotnet/announcements/issues/64)\r\n* [February 2018](https://github.com/dotnet/announcements/issues/59)","Url":"https://github.com/dotnet/announcements/issues/75","RelatedDescription":"Open issue \"June 2018 .NET Updates\" (#75)"},{"Id":"343283437","IsPullRequest":false,"CreatedAt":"2018-07-21T00:56:48","Actor":"richlander","Number":"74","RawContent":null,"Title":"Advisory on July 2018 .NET Framework Updates","State":"open","Body":"# Advisory on July 2018 .NET Framework Updates\r\n\r\nUpdated: 08/14/2018\r\n\r\n> A new [.NET Framework August 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/08/14/august-2018-security-and-quality-rollup/) has been released that **resolves this advisory for all supported Windows versions**.\r\n\r\n~~A new [.NET Framework July 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/07/30/net-framework-july-2018-update/) has been released that resolves this advisory. See Guidance section.~~\r\n\r\n~~Guidance has changed for Windows 7, Windows Server 2008 and Windows Server 2008 R2. See Guidance section.~~\r\n\r\nThe [July 2018 Security and Quality Rollup updates for .NET Framework](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2018-8356) was released earlier this month. We have received multiple customer reports of [applications that fail to start or don't run correctly](https://support.microsoft.com/en-us/help/4345913) after installing the July 2018 update. These reports are specific to applications that initialize a COM component and run with restricted permissions.\r\n\r\nWe have stopped distributing the .NET Framework July 2018 updates on Windows Update and are actively working on fixing and re-shipping this month's updates. If you installed the July 2018 update and have not yet seen any negative behavior, we recommend that you leave your systems as-is but closely monitor them and ensure that you apply upcoming .NET Framework updates.\r\n\r\nAs a team, we regret that this release was shipped with this flaw. This release was tested using our regular and extensive testing process. We discovered while investigating this issue that we have a test hole for the specific combination of COM activation and restricted permissions, including impersonation. We will be mitigating that gap going forward. Again, we are sorry for any inconvenience that this product flaw has caused.\r\n\r\nWe will continue to update this issue and [post](https://blogs.msdn.microsoft.com/dotnet/2018/07/20/advisory-on-july-2018-net-framework-updates/) as we have new information.\r\n\r\n## Discussion\r\nPlease share your thoughts/experience on this advisory and see what others are saying at:\r\n\r\n* [microsoft/dotnet #811](https://github.com/Microsoft/dotnet/issues/811)\r\n\r\n## Guidance\r\n\r\nWe strongly recommend that you install [.NET Framework August 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/08/14/august-2018-security-and-quality-rollup/).\r\n\r\n~~We recommend that you install [.NET Framework July 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/07/30/net-framework-july-2018-update/) on your systems if you experienced the symptoms described in this advisory. If you did not experience these symptoms, we recommend you wait to update your machines until the next regular update, in August.~~\r\n\r\n~~On Windows 7, Windows Server 2008, and Windows Server 2008 R2, we have found that the combination of [July 2018 Security and Quality Rollup updates for .NET Framework](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2018-8356) and  [.NET Framework July 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/07/30/net-framework-july-2018-update/) do not resolve all symptoms. On these Windows versions, if you are experiencing these symptoms after installing this combination of patches, we recommend that you uninstall (only) the Monthly Rollup patch and then install the appropriate Security Only patch listed at [July 2018 Security and Quality Rollup updates for .NET Framework](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2018-8356).~~\r\n\r\n## Technical Context\r\n\r\nThe .NET Framework runtime uses the process token to determine whether the process is being run within an elevated context. These system calls can fail if the required process inspection permissions are not present. This causes an “access denied\" error.\r\n\r\n## Symptoms\r\n\r\nA COM component fails to load because of “access denied,” “class not registered,” or “internal failure occurred for unknown reasons” errors. \r\n\r\nThe most commonly reported failure results in the following error message:\r\n\r\n```console\r\nException type: System.UnauthorizedAccessException\r\nMessage: Access is denied. (Exception from HRESULT: 0x80070005 (E_ACCESSDENIED))\r\n```\r\n\r\n### Sharepoint\r\n\r\nWhen users browse to a SharePoint site they may see the following HTTP 403 message:\r\n\r\n```console\r\n\"The Web Site declined to show this webpage\"\r\n```\r\n\r\nThe SharePoint ULS Logs will contain a message like the following:  \r\n\r\n```console\r\nw3wp.exe (0x1894)         0x0B94  SharePoint Foundation  General 0000       High                UnauthorizedAccessException for the request. 403 Forbidden will be returned. Error=An error occurred creating the configuration section handler for system.serviceModel/extensions: Could not load file or assembly <AssemblySignature>  or one of its dependencies. Access is denied. (C:\\Windows\\Microsoft.NET\\Framework64\\v2.0.50727\\Config\\machine.config line 180)    \r\n\r\nw3wp.exe (0x1894)         0x0B94  SharePoint Foundation  General b6p2      VerboseEx                Sending HTTP response 403:403 FORBIDDEN.      \r\n\r\nw3wp.exe (0x1894)         0x0B94  SharePoint Foundation  General 8nca       Verbose                Application error when access /, Error=Access is denied. (Exception from HRESULT: 0x80070005 (E_ACCESSDENIED))\r\n```\r\n\r\nWhen crawling a people content source, the request may fail with the following entry logged to the SharePoint ULS Log: \r\n\r\n```console\r\nmssearch.exe (0x118C) 0x203C SharePoint Server Search Crawler:Gatherer Plugin cd11 Warning The start address sps3s://<URLtoSite> cannot be crawled.  Context: Application 'Search_Service_Application', Catalog 'Portal_Content'  Details:  Class not registered   (0x80040154)  \r\n\r\nIIS Hosted Classic ASP calling CreateObject for .NET COM objects may receive error \"ActiveX component can't create object\" \r\n\r\n.NET Application creates instance of .NET COM application within an Impersonation Context may receive error \"0x80040154 (REGDB_E_CLASSNOTREG)\"\r\n```\r\n\r\n### BizTalk Server Administration Console\r\n\r\nBizTalk Server Administration Console fails to launch properly with the following errors: \r\n\r\n```console\r\nAn internal failure occurred for unknown reasons. (WinMgmt) \r\n\r\nProgram Location:  \r\n\r\n   at System.Runtime.InteropServices.Marshal.ThrowExceptionForHRInternal(Int32 errorCode, IntPtr errorInfo) \r\n\r\n   at System.Management.ManagementObject.Get() \r\n\r\n   at Microsoft.BizTalk.SnapIn.Framework.WmiProvider.SelectInstance\r\n```\r\n\r\n> Warning: The following workarounds may make a computer or a network more vulnerable to attack by malicious users or by malicious software such as viruses. We do not recommend these workarounds but are providing this information so that you can implement the workarounds at your own discretion. Use these workarounds at your own risk.\r\n\r\nUse the following guidance as a workaround:\r\n\r\n* Add “NETWORK SERVICE” to the local Administrators group. \r\n\r\n### IIS with Classic ASP\r\n\r\nIIS Hosted Classic ASP calling CreateObject for .NET COM objects may receive the following error: \"ActiveX component can't create object\". Use the following guidance as a workaround.\r\n\r\n* If your web site uses Anonymous Authentication, change the Web Site Anonymous Authentication credentials to use the \"Application pool identity\"\r\n* If your site uses Basic Authentication, log into the application once as the application pool identity and then create an instance of the .NET COM component. All subsequent activations for that .NET COM component should succeed, for any user.\r\n\r\n### .NET applications using COM and impersonation\r\n\r\n.NET Applications that creates instances of .NET COM application within an Impersonation Context may receive the following error: \"0x80040154 (REGDB_E_CLASSNOTREG)\". Use the following guidance as a workaround.\r\n\r\n* Create an instance of the .NET COM component prior to the impersonation context call. Later impersonated create instance calls should work as expected.\r\n* Run the .NET Application in the context of the impersonated user\r\n* Avoid using Impersonation when creating the .NET COM object","Url":"https://github.com/dotnet/announcements/issues/74","RelatedDescription":"Open issue \"Advisory on July 2018 .NET Framework Updates\" (#74)"},{"Id":"339929129","IsPullRequest":false,"CreatedAt":"2018-07-10T17:00:37","Actor":"blowdart","Number":"73","RawContent":null,"Title":"Microsoft Security Advisory CVE-2018-8356: .NET Core Security Feature Bypass Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-8356: .NET Core Security Feature Bypass Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a security feature bypass vulnerability that exists when .NET Core does not correctly validate certificates. An attacker who successfully exploited this vulnerability could present an expired certificate when challenged.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core applications handle certificate validation.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/wcf/issues/3009\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\n* If an application does not use Windows Communication Foundation you are not affected.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core, or ASP.NET Core based application that uses System.Private.ServiceModel with a version of 4.5.1 or earlier.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ---------------- | -------------------------\r\nSystem.Private.ServiceModel | 4.0.0, 4.1.0, 4.1.1 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 |  4.1.3 or later <br /> 4.3.3 or later <br /> 4.4.4 or later <br /> 4.5.3 or later\r\nSystem.ServiceModel.Duplex | 4.0.0, 4.0.1, 4.0.2 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 | 4.0.4 or later <br /> 4.3.3 or later <br /> 4.443 or later <br /> 4.5.3 or later\r\nSystem.ServiceModel.Http | 4.0.0, 4.0.10, 4.1.0, 4.1.1 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 | 4.1.3 or later <br /> 4.3.3 or later <br /> 4.4.4 or later <br /> 4.5.3 or later\r\nSystem.ServiceModel.NetTcp | 4.0.0, 4.1.0, 4.1.1 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 | 4.1.3 or later <br /> 4.3.3 or later <br /> 4.4.4 or later <br /> 4.5.3 or later\r\nSystem.ServiceModel.Primitives | 4.0.0, 4.1.0, 4.1.1 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 | 4.1.2 or later <br /> 4.3.3 or later <br /> 4.4.4 or later <br /> 4.5.3 or later\r\nSystem.ServiceModel.Security | 4.0.0, 4.0.1, 4.0.2 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 | 4.0.4 or later <br /> 4.3.3 or later <br /> 4.4.4 or later <br /> 4.5.3 or later\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n.NET Core projects have two types of dependencies: direct and transitive. You must update your projects using the following instructions to address both types of dependency.\r\n\r\n### <a name=\"project-format\"></a>.NET Core Project formats\r\n\r\n.NET Core has two different project file formats, depending on what software created the project.\r\n\r\n1. `project.json` is the format used in .NET Core 1.0 and Microsoft Visual Studio 2015.\r\n2. `csproj` is the format used in .NET Core 1.1, .NET Core 2.0 and Microsoft Visual Studio 2017.\r\n\r\n#### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file or your `project.json` file. They can be fixed by [editing the project file](#direct-dependencies) or using NuGet to update the dependency.\r\n\r\n The `System.Private.ServiceModel` package is not meant to be directly depended on and will not appear in your direct dependency list.\r\n\r\n#### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in three ways, depending on your [project format](#project-format):\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects *OR*.\r\n* By examining the `project.lock.json` file contained in the root directory of your project for `project.json` based projects.\r\n\r\nThe `project.assets.json` and `project.lock.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\n#### <a name=\"direct-dependencies-vs2017\"></a>Fixing direct dependencies in a csproj based project / Visual Studio 2017\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.ServiceModel.Http\" Version=\"4.4.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.ServiceModel.Http` version 4.4.0.\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.ServiceModel.Http` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.ServiceModel.Http\" Version=\"4.4.3\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"direct-dependencies-vs2015\"></a> Fixing Direct Dependencies in project.json based project / Visual Studio 2015\r\n\r\nOpen your `project.json` file in your editor. Look for the dependencies section. Below is an example dependencies section:\r\n\r\n``` json\r\n    \"dependencies\": {\r\n      \"Microsoft.NETCore.App\": {\r\n        \"version\": \"1.0.1\",\r\n        \"type\": \"platform\"\r\n      },\r\n     \"Microsoft.AspNetCore.Mvc.Core\": \"1.0.6\",\r\n     \"System.ServiceModel.Http\" : \"4.0.0\"\r\n    }\r\n```\r\n\r\nThis example has three direct dependencies: `Microsoft.NETCore.App`, `Microsoft.AspNetCore.Mvc.Core` and `System.ServiceModel.Http`.\r\n\r\n`Microsoft.NetCore.App` is the platform the application targets, you should ignore this. The other packages expose their version to the right of the package name. In our example, our non-platform packages are version 1.0.1.\r\n\r\nReview your direct dependencies for any instance of the packages and versions listed above. In the example above, there is a direct dependency on a vulnerable package, `System.ServiceModel.Http` version 4.4.0.\r\n\r\nTo update to the fixed package, change the version number to be the appropriate package for your release. In the example, this would be updating `System.ServiceModel.Http` to 4.4.3.\r\n\r\nAfter updating the vulnerable package versions, save your `project.json` file.\r\n\r\nThe dependencies section in our example `project.json` would now look as follows:\r\n\r\n```json\r\n  \"dependencies\": {\r\n    \"Microsoft.NETCore.App\": {\r\n      \"version\": \"1.0.1\",\r\n      \"type\": \"platform\"\r\n    },\r\n    \"Microsoft.AspNetCore.Mvc.Core\": \"1.0.6\",\r\n    \"System.ServiceModel.Http \": \"4.4.3\"\r\n  }\r\n```\r\n\r\nIf you are using Visual Studio and save your updated `project.json` file, Visual Studio will restore the new package version. You can see the restore results by opening the Output Window (Ctrl+Alt+O) and changing the Show output from drop-down list to Package Manager.\r\n\r\nIf you are not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore your new dependency.\r\n\r\nAfter you have addressed all of your direct dependencies, you must also review your transitive dependencies.\r\n\r\nAfter you've addressed all of your direct dependencies, you must review your transitive dependencies.\r\n\r\n#### Discovering and fixing transitive dependencies\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json) or the [the `project.lock.json` file](#project-lock-json).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json (csproj/VS2017)\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `System.ServiceModel.Http/4.3.0` is a reference to version 4.3.0 of `System.ServiceModel.Http`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.ServiceModel.Http\" Version=\"4.3.2\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n##### <a name=\"project-lock-json\"></a> Manually reviewing project.lock.json (project.json/VS2015)\r\n\r\nOpen the `project.lock.json` file in your editor. We suggest you use an editor that understands json and allows you to collapse and expand nodes to review this file; both Visual Studio and Visual Studio Code provide this functionality.\r\n\r\nIf you are using Visual Studio the `project.lock.json` file is “under” the `project.json` file. Click the right pointing triangle, ▷, to the left of the `project.json` file to expand the solution tree to expose the `project.lock.json` file. The following image shows a project with the `project.json` file expanded to show the `project.lock.json` file.\r\n\r\n![project lock json](https://cloud.githubusercontent.com/assets/796298/25858179/f6e01200-348f-11e7-8a77-7176d8dd3f03.png)\r\n\r\nSearch the `project.lock.json` file for the vulnerable packages, using the format `packagename/`, using each of the package names from the table above. If you find any vulnerable assembly name in your search examine the line on which they are found, the version number is after the `/` and compare to the vulnerable versions table above. For example a search result that shows `System.ServiceModel.Http/4.0.1` is a reference to v4.0.1 of `System.ServiceModel.Http`.   If your `project.lock.json` file includes references to any of the package versions shown above then you will need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to a vulnerable version of `System.ServiceModel.Http` this means none of your direct dependencies depend on any vulnerable packages or you have already fixed the problem by updating the direct dependencies.\r\n\r\nIf your transitive dependency review found references to any of the vulnerable packages you must add a direct dependency to the updated package to your `project.json` file to override the transitive dependency. Open your `project.json` and find the dependencies section. For example:\r\n\r\n``` json\r\n  \"dependencies\": {\r\n    \"Microsoft.NETCore.App\": {\r\n      \"version\": \"1.0.1\",\r\n      \"type\": \"platform\"\r\n    },\r\n    \"Microsoft.AspNetCore.Mvc\": \"1.0.0\"\r\n  }\r\n```\r\n\r\nFor each of the vulnerable packages your search returned you must add a direct dependency to the updated version by adding it to the `project.json` file. You do this by adding a new line to the dependencies section, referring the fixed version. For example, if your search showed a transitive reference to the vulnerable `System.ServiceModel.Http` version 1.0.0 you would add a reference to the appropriate fixed version, 1.0.6. Edit the `project.json` file as follows:\r\n\r\n``` json\r\n  \"dependencies\": {\r\n    \"Microsoft.NETCore.App\": {\r\n      \"version\": \"1.0.1\",\r\n      \"type\": \"platform\"\r\n    },\r\n    \"System.ServiceModel.Http\": \"4.1.2\",\r\n    \"Microsoft.AspNetCore.Mvc\": \"1.0.0\"\r\n  }\r\n```\r\n\r\nAfter you have added direct dependencies to the fixed packages, save your `project.json` file.\r\n\r\nIf you are using Visual Studio save your updated `project.json` file and Visual Studio will restore the new package versions. You can see the restore results by opening the Output Window (Ctrl+Alt+O) and changing the Show output from drop-down list to Package Manager.\r\n\r\nIf you are not using Visual Studio open a command line and change to your project directory. Execute the `dotnet restore` command to restore your new dependencies.\r\n\r\n#### Rebuilding your application\r\n\r\nFinally you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2018-8356](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-CVE-2018-8356)\r\n\r\n### Revisions\r\n\r\nV1.1 (July 23, 2018): Updated package versions, as some assemblies were released unsigned.\r\nV1.0 (July 10, 2018): Advisory published.\r\n\r\n_Version 1.1_\r\n\r\n_Last Updated 2018-07-23_\r\n","Url":"https://github.com/dotnet/announcements/issues/73","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2018-8356: .NET Core Security Feature Bypass Vulnerability\" (#73)"},{"Id":"329614193","IsPullRequest":false,"CreatedAt":"2018-06-05T20:33:10","Actor":"huanwu","Number":"72","RawContent":null,"Title":"Introducing dotnet-svcutil.xmlserializer for .NET Core","State":"open","Body":"# Introducing dotnet-svcutil.xmlserializer for .NET Core\r\nOn the full .NET Framework you are able to pre-generate a serialization assembly using the tool svcutil. We are providing similar functionality on .NET Core by releasing the dotnet-svcutil.xmlserializer NuGet package. It pre-generates c# serialization code for the types used by WCF Service Contract in the client applications that can be serialized using the XmlSerializer to improve the startup performance of Xml Serialization when serializing or de-serializing objects of those types using XmlSerializer. \r\nYou can start using the tool today by following the [instructions](https://github.com/dotnet/core/blob/master/samples/dotnet-svcutil.xmlserializer-instructions.md). \r\n\r\n## Discussion \r\nPlease share with us any thoughts of questions that you may have at: \r\n\r\n- dotnet/wcf [#2927](https://github.com/dotnet/wcf/issues/2927)\r\n## Details \r\nWhen to use XmlSerializer with WCF in an app to serialize contract data types, it will generate an XmlSerializer during runtime to do the serialization. You can improve the startup performance of Xml serialization by simply adding the reference of dotnet-svcutil.xmlserializer NuGet package to your project. This tool will generate the serialization code and compile it into an assembly next to your output assembly at build time in advance. This assembly can then be deployed and ran with your application. \r\n\r\nPlease create an issue with your feedback at [dotnet/wcf](https://github.com/dotnet/wcf/issues). We are actively looking to improve the tool and your input is a valuable part of the process. ","Url":"https://github.com/dotnet/announcements/issues/72","RelatedDescription":"Open issue \"Introducing dotnet-svcutil.xmlserializer for .NET Core\" (#72)"},{"Id":"327817883","IsPullRequest":false,"CreatedAt":"2018-05-30T17:02:38","Actor":"MichaelSimons","Number":"71","RawContent":null,"Title":".NET Core 2.1 Docker Image Updates","State":"open","Body":"# .NET Core 2.1 Docker Image Updates\r\n\r\nWe have consolidating the set of Docker Hub repositories that we use for .NET Core and ASP.NET Core. We will use [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/) as the only repository that we publish to for .NET Core 2.1 and later releases.\r\n\r\nWe added a set of environment variables to .NET Core images to make it easier to host ASP.NET Core sites at any .NET Core image layer and to enable `dotnet watch` in SDK container images without additional configuration.\r\n\r\nAlpine and ARM32 image variants have been added and are supported.\r\n\r\n[.NET Core Docker Samples](https://github.com/dotnet/dotnet-docker/blob/master/samples/README.md) have been moved to the [dotnet/dotnet-docker](https://github.com/dotnet/dotnet-docker) repo. The samples have been updated for .NET Core 2.1. New samples have been added, including [Hosting ASP.NET Core Images with Docker over HTTPS](https://github.com/dotnet/dotnet-docker/blob/master/samples/aspnetapp/aspnetcore-docker-https.md).\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet/dotnet-docker #560](https://github.com/dotnet/dotnet-docker/issues/560)\r\n\r\n## Details\r\n\r\nThe following changes have been made as part of the .NET Core 2.1 release.\r\n\r\n### Repo consolidation\r\n\r\n.NET Core and ASP.NET Core images will be published to the [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/) Docker Hub repo for .NET Core 2.1 and later releases. Co-location of images improves image discovery. The .NET Core runtime and SDK images are already co-located. We are adding the ASP.NET Core runtime images to the [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/) repo as a third image type. We are [no longer producing the microsoft/aspnetcore-build image](https://github.com/aspnet/Announcements/issues/298) with .NET Core 2.1.\r\n\r\nThe following three tags are now available at the [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/) repo:\r\n\r\n* `2.1-sdk`\r\n* `2.1-aspnetcore-runtime`\r\n* `2.1-runtime`\r\n\r\n### Environment variables enable new scenarios\r\n\r\nWe added a set of environment variables to .NET Core docker images, for .NET Core 2.1 and later. These environment variables enable more scenarios to work without additional configuration, such as [developing ASP.NET Core applications in a container](https://github.com/dotnet/dotnet-docker/blob/master/samples/aspnetapp/aspnet-docker-dev-in-container.md).\r\n\r\nNew sdk image environment variables ([example](https://github.com/dotnet/dotnet-docker/blob/master/2.1/sdk/bionic/amd64/Dockerfile#L28-L32))\r\n* `ASPNETCORE_URLS=http://+:80`\r\n* `DOTNET_RUNNING_IN_CONTAINER=true`\r\n* `DOTNET_USE_POLLING_FILE_WATCHER=true`\r\n\r\nNew Linux runtime-deps image environment variables ([example](https://github.com/dotnet/dotnet-docker/blob/master/2.1/runtime-deps/alpine3.7/amd64/Dockerfile#L19-L21))\r\n* `ASPNETCORE_URLS=http://+:80`\r\n* `DOTNET_RUNNING_IN_CONTAINER=true`\r\n\r\nNew Windows runtime image environment variables ([example](https://github.com/dotnet/dotnet-docker/blob/master/2.1/runtime/nanoserver-1709/amd64/Dockerfile#L33-L35))\r\n* `ASPNETCORE_URLS=http://+:80`\r\n* `DOTNET_RUNNING_IN_CONTAINER=true`\r\n\r\n### New image variants\r\n\r\nAlpine and ARM32 image variants have been added and are supported as part of the .NET Core 2.1 release. \r\n\r\nFor Alpine, you must [use specific tags to create Alpine-based images](https://github.com/dotnet/dotnet-docker/blob/master/samples/dotnetapp/README.md#build-and-run-the-sample-for-alpine-with-docker), such as `2.1-runtime-alpine`. \r\n\r\nFor ARM32, you can use the regular multi-arch tags, like `2.1-runtime` and `2.1-sdk` if you are building on an ARM32 device. If you are building on another type of machine, you need to use ARM32-specific tags for the runtime images you create, such as `2.1-runtime-bionic-arm32v7` (for Ubuntu 18.04).\r\n\r\n### Related repos\r\n\r\nThe following repos are related to this announcement:\r\n\r\n* [microsoft/aspnetcore](https://hub.docker.com/r/microsoft/aspnetcore/)\r\n* [microsoft/aspnetcore-build](https://hub.docker.com/r/microsoft/aspnetcore-build/)\r\n* [microsoft/dotnet/](https://hub.docker.com/r/microsoft/dotnet/)\r\n","Url":"https://github.com/dotnet/announcements/issues/71","RelatedDescription":"Open issue \".NET Core 2.1 Docker Image Updates\" (#71)"},{"Id":"325815293","IsPullRequest":false,"CreatedAt":"2018-05-23T18:04:46","Actor":"mlacouture","Number":"70","RawContent":null,"Title":"Introducing dotnet-svcutil","State":"open","Body":"# Introducing dotnet-svcutil\r\n\r\nThe Microsoft Windows Communication Foundation (WCF) **dotnet-svcutil** tool is a .NET Core CLI tool that retrieves metadata from a web service on a network location or from a WSDL file, and generates a WCF class containing client proxy methods that you can use to access the web service operations.\r\n\r\nSimilarly to the [Service Model Metadata - svcutil](https://docs.microsoft.com/en-us/dotnet/framework/wcf/servicemodel-metadata-utility-tool-svcutil-exe) tool for .NET Framework projects, the **dotnet-svcutil** is a command line tool for generating a web service reference compatible with .NET Core and .NET Standard projects. \r\n\r\nThe **dotnet-svcutil** tool is an alternative option to the [WCF Web Service Reference ](https://docs.microsoft.com/en-us/dotnet/core/additional-tools/wcf-web-service-reference-guide)Visual Studio connected service provider which first shipped with Visual Studio 2017 v15.5.  The **dotnet-svcutil** tool as a .NET Core CLI tool, however, can be run on multiple platforms like Linux and MacOS in addition to Windows.\r\n\r\n# Discussion\r\nPlease share your thoughts with us by commenting on GitHub issue dotnet/wcf#2894\r\n","Url":"https://github.com/dotnet/announcements/issues/70","RelatedDescription":"Open issue \"Introducing dotnet-svcutil\" (#70)"},{"Id":"321374728","IsPullRequest":false,"CreatedAt":"2018-05-08T22:56:33","Actor":"richlander","Number":"68","RawContent":null,"Title":"May 2018 .NET Updates","State":"open","Body":"# May 2018 .NET Updates\r\n\r\nThe following .NET updates were released this month. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Framework\r\n\r\n* [.NET Framework May 2018 Preview of Quality Rollup for Windows 10 April 2018 Update (version 1803)](https://blogs.msdn.microsoft.com/dotnet/2018/05/23/net-framework-may-2018-preview-of-quality-rollup-for-windows-10-april-2018-update-version-1803/)\r\n* [.NET Framework May 2018 Preview of Quality Rollup for Windows 10 1709 (Fall Creators Update)](https://blogs.msdn.microsoft.com/dotnet/2018/05/21/net-framework-may-2018-preview-of-quality-rollup-for-windows-10-1709-fall-creators-update/)\r\n* [.NET Framework May 2018 Security and Quality Rollup for Windows 10](https://blogs.msdn.microsoft.com/dotnet/2018/05/17/net-framework-may-2018-preview-of-quality-rollup-for-windows-10/)\r\n* [.NET Framework May 2018 Security and Quality Rollup](https://blogs.msdn.microsoft.com/dotnet/2018/05/08/net-framework-may-2018-security-and-quality-rollup/)\r\n* [microsoft/dotnet-framework](https://hub.docker.com/r/microsoft/dotnet-framework/) and related Docker images were updated for [Windows Server, version 1803](https://docs.microsoft.com/en-us/windows-server/get-started/get-started-with-1803).\r\n\r\n## .NET Core\r\n\r\n* [Announcing .NET Core 2.1](https://blogs.msdn.microsoft.com/dotnet/2018/05/30/announcing-net-core-2-1/)\r\n* [.NET Core May 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/05/08/net-core-may-2018-update/)\r\n* [.NET Core 2.1 RC1](https://blogs.msdn.microsoft.com/dotnet/2018/05/07/announcing-net-core-2-1-rc-1/)\r\n* [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/) and related Docker images were updated for [Windows Server, version 1803](https://docs.microsoft.com/en-us/windows-server/get-started/get-started-with-1803).\r\n\r\n## Previous Updates\r\n\r\n* [April 2018 .NET Updates](https://github.com/dotnet/announcements/issues/64)\r\n* [February 2018 Security and Quality Updates](https://github.com/dotnet/announcements/issues/59)","Url":"https://github.com/dotnet/announcements/issues/68","RelatedDescription":"Open issue \"May 2018 .NET Updates\" (#68)"},{"Id":"321269154","IsPullRequest":false,"CreatedAt":"2018-05-08T17:03:39","Actor":"blowdart","Number":"67","RawContent":null,"Title":"Microsoft Security Advisory CVE-2018-0765: .NET Core Denial Of Service Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-0765: .NET Core Denial Of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core and .NET native version 2.0. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a denial of service vulnerability that exists when .NET Framework and .NET Core improperly process XML documents. An attacker who successfully exploited this vulnerability could cause a denial of service against a .NET Framework, .NET Core, or .NET native application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Framework, .NET Core, and .NET native applications handle XML document processing.\r\n\r\nIf your application is an ASP.NET Core application, developers are also advised to update to [ASP.NET Core 2.0.8](https://www.nuget.org/packages/Microsoft.AspNetCore.All/2.0.8).\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/29578\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\n* If an application does not process signed XML, it is not affected by this vulnerability.\r\n* If your application targets .NET Core 1.x or .NET native 1.x, it is not affected as the vulnerable package is not available for these platforms.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core, .NET native, or ASP.NET Core based application that uses System.Security.Cryptography.Xml with a version of 4.4.1 or earlier.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ---------------- | -------------------------\r\nSystem.Security.Cryptography.Xml | ≤4.4.1 |  4.4.2 or later\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n.NET Core has two types of dependencies: direct and transitive. Direct dependencies are dependencies where you specifically add a package to your project, transitive dependencies occur when you add a package to your project that in turn relies on another package.\r\n\r\nFor example, the `Microsoft.AspNetCore.Mvc` package depends on the `Microsoft.AspNetCore.Mvc.Core` package. When you add a dependency on `Microsoft.AspNetCore.Mvc` in your project, you're taking a transitive dependency on `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\nAny application that has a direct or transitive dependency on the [affected package](#affected-software) can be exposed to the vulnerability if it does not meet any of the [mitigation factors](#mitigation-factors).\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n---\r\n\r\nIf you're targeting ASP.NET Core 2.0 and using the `Microsoft.AspNetCore.All` metapackage:\r\n\r\n* Update its version number to [2.0.8](https://www.nuget.org/packages/Microsoft.AspNetCore.All/2.0.8) to pull in updated packages that update their transitive dependencies to the fixed version of `System.Security.Cryptography.Xml`.\r\n\r\n---\r\n\r\n.NET Core projects have two types of dependencies: direct and transitive. You must update your projects using the following instructions to address both types of dependency.\r\n\r\n#### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your *csproj* file. They can be fixed by [editing the csproj file](#direct-dependencies) or using NuGet to update the dependency.\r\n\r\n#### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the *project.assets.json* file contained in the obj directory of your project.\r\n\r\nThe *project.assets.json* files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\n#### <a name=\"direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Security.Cryptography.Xml\" Version=\"4.4.1\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.Security.Cryptography.Xml` version 4.4.1.\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.Security.Cryptography.Xml` to a [fixed package number](#affected-software). Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Security.Cryptography.Xml\" Version=\"4.4.2\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\nAfter you've addressed all of your direct dependencies, you must review your transitive dependencies.\r\n\r\n#### Discovering and fixing transitive dependencies\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can [review the *project.assets.json* file](#project-assets-json).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio 2017, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a>Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `System.Security.Cryptography.Xml/4.4.0` is a reference to version 4.4.0 of `System.Security.Cryptography.Xml`.\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\n##### Fixing transitive dependencies\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.Security.Cryptography.Xml` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Security.Cryptography.Xml\" Version=\"4.4.2\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n#### Rebuilding your application\r\n\r\nFinally you must rebuild your application, test, and redeploy.\r\n\r\n---\r\n\r\nIf you're targeting .NET native for a Universal Windows Platform (UWP) application, you should update your dependencies and republish your application.\r\n\r\nIf you submit an application to the Windows Store with an outdated reference, the store will update the reference automatically, which has the potential for compatibility issues. Thus, we recommend updating your application directly and testing its functionality before resubmitting.\r\n\r\n---\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2018-0787](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-CVE-2018-0765)\r\n\r\n### Revisions\r\n\r\nV1.0 (May 8, 2018): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2018-05-08_","Url":"https://github.com/dotnet/announcements/issues/67","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2018-0765: .NET Core Denial Of Service Vulnerability\" (#67)"},{"Id":"319701474","IsPullRequest":false,"CreatedAt":"2018-05-02T20:31:57","Actor":"MichaelSimons","Number":"66","RawContent":null,"Title":".NET Framework Docker Samples have moved","State":"open","Body":"# .NET Framework Docker Samples have moved\r\nThe .NET Framework Docker samples have moved to the [samples folder of Microsoft/dotnet-framework-docker](https://github.com/Microsoft/dotnet-framework-docker/tree/master/samples).\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [Microsoft/dotnet-framework-docker #128](https://github.com/Microsoft/dotnet-framework-docker/issues/128)\r\n\r\n## Details\r\nThe .NET Framework Docker samples have been enhanced and moved to the [samples folder of Microsoft/dotnet-framework-docker](https://github.com/Microsoft/dotnet-framework-docker/tree/master/samples).\r\n\r\n- https://github.com/Microsoft/dotnet-framework-docker/pull/126\r\n- https://github.com/Microsoft/dotnet-framework-docker-samples/issues/22\r\n\r\nThe samples show various ways to use the .NET Framework and Docker together. You can use the samples as the basis of your own Docker images or just to play.\r\n\r\nThe samples exercise various levels of functionality. The [.NET Framework Docker sample](https://github.com/Microsoft/dotnet-framework-docker/blob/master/samples/dotnetapp/README.md) includes the most functionality, including build, unit testing, and pushing images to a container registry. The [ASP.NET Docker sample](https://github.com/Microsoft/dotnet-framework-docker/blob/master/samples/aspnetapp/README.md) includes instructions for testing images with [Azure Container Instances](https://azure.microsoft.com/services/container-instances/). The samples include detailed instructions for use with and without Docker.\r\n","Url":"https://github.com/dotnet/announcements/issues/66","RelatedDescription":"Open issue \".NET Framework Docker Samples have moved\" (#66)"}],"ResultType":"GitHubIssue"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1082818321353912320","CreatedAt":"2019-01-09T01:56:20+00:00","UserScreenname":"dotnet","Text":"Oopsie. Looks like @WhildyBeast executed\n\n$ dotnet clean https://t.co/gCte14spFY","Source":"<a href=\"http://twitter.com/download/iphone\" rel=\"nofollow\">Twitter for iPhone</a>","RetweetCount":29,"FavoriteCount":5,"RawContent":null},{"Id":"1082768839874535424","CreatedAt":"2019-01-08T22:39:42+00:00","UserScreenname":"dotnet","Text":"We just blogged about the .NET Framework January 2019 Security and Quality Rollup. https://t.co/XW8wiS0AIV","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":33,"FavoriteCount":17,"RawContent":null},{"Id":"1082649436851982337","CreatedAt":"2019-01-08T14:45:15+00:00","UserScreenname":"dotnet","Text":"In 15 minutes, join our @csharpfritz as he explores the @elgatogaming StreamDeck's new SDK and how to interact with… https://t.co/H2oVdzFOgr","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":42,"FavoriteCount":9,"RawContent":null},{"Id":"1081303837263069184","CreatedAt":"2019-01-04T21:38:19+00:00","UserScreenname":"dotnet","Text":"“Code is, in our not-so-humble opinion, the most inexhaustible source of magic.” https://t.co/HtYQeRiB8t","Source":"<a href=\"http://twitter.com/download/iphone\" rel=\"nofollow\">Twitter for iPhone</a>","RetweetCount":141,"FavoriteCount":31,"RawContent":null},{"Id":"1081214419672096768","CreatedAt":"2019-01-04T15:43:00+00:00","UserScreenname":"dotnet","Text":"In this On .NET episode we learn about XAML Islands and how to integrate UI components from the Universal Windows P… https://t.co/JMXJ3aoBsM","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":36,"FavoriteCount":18,"RawContent":null}]}},"RunOn":"2019-01-10T05:30:46.4345921Z","RunDurationInMilliseconds":22398}