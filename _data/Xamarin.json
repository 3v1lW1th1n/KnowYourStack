{"Data":{"Blog":{"FeedItems":[{"Title":"Upcoming Webinar | Xamarin University Presents: Building Your First Intelligent App with Xamarin and Microsoft Cognitive Services","PublishedOn":"2018-02-07T19:39:30+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today&#8217;s apps must be “intelligent” to win app users’ loyalty, whether for a consumer app or a business app. With Xamarin.Forms and Microsoft Cognitive Services, you can easily create your first...","Href":"https://blog.xamarin.com/upcoming-webinar-xamarin-university-presents-building-first-intelligent-app-xamarin-microsoft-cognitive-services/","RawContent":null},{"Title":"Draw your Next App Idea with Ink to Code","PublishedOn":"2018-02-05T18:50:43+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Imagine that you&#8217;ve just been struck by inspiration for your next great app. You might start by jotting some notes and sketching out screens. If you&#8217;re thinking about reaching for a...","Href":"https://blog.xamarin.com/draw-next-app-idea-ink-code/","RawContent":null},{"Title":"Lose the Cables: Make Deploying to an iOS or tvOS Device Easier","PublishedOn":"2018-02-02T19:59:02+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"One thing most developers consistently do during app development is deploy to a testing device. One main drawback during this process is the struggle to find a cable, connect it to a computer, plug it...","Href":"https://blog.xamarin.com/lose-cables-make-deploying-ios-tvos-device-easier/","RawContent":null},{"Title":"Just Push Play: Using Google Play on an Android Emulator","PublishedOn":"2018-02-01T20:22:55+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"The needs of an Android developer using the Android emulator continuously expand. The latest emulator development from Google provides a system image for the Google Play Store, which includes a fully...","Href":"https://blog.xamarin.com/just-push-play-using-google-play-android-emulator/","RawContent":null},{"Title":"Xamarin Developer Events in February","PublishedOn":"2018-01-31T19:26:04+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"If you haven&#8217;t started working on your new year&#8217;s resolutions yet, we have the perfect solution: get out there and start building on your mobile app development education by networking...","Href":"https://blog.xamarin.com/xamarin-developer-events-february/","RawContent":null},{"Title":"Webinar Recording | Xamarin University Presents: Ship Better Apps with Visual Studio App Center","PublishedOn":"2018-01-30T19:53:57+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"In this pre-recorded webinar, Mark Smith, Director of Xamarin University, shows you how to automate your app development pipeline with Visual Studio App Center, walking through how to connect your app...","Href":"https://blog.xamarin.com/webinar-recording-xamarin-university-presents-ship-better-apps-visual-studio-app-center/","RawContent":null},{"Title":"Android Emulator Quick Boot","PublishedOn":"2018-01-29T19:41:31+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Android Emulator version 27.0.2 now includes a feature called Quick Boot, which launches the emulator in just a few seconds. For Quick Boot to work, your AVD must perform a cold boot on its first time...","Href":"https://blog.xamarin.com/android-emulator-quick-boot/","RawContent":null},{"Title":"First Look: Xamarin Android Device Manager Preview","PublishedOn":"2018-01-25T19:45:47+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"With the release of SDK Tools 26, Google replaced the standalone UI for the SDK and Device Manager with a command line interface. In an effort to make Android component management accessible and easy...","Href":"https://blog.xamarin.com/first-look-xamarin-android-device-manager-preview/","RawContent":null},{"Title":"Better Resource Organization in Xamarin.Forms","PublishedOn":"2018-01-23T19:28:44+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Resource Dictionary is a foundational building block to all Xamarin.Forms mobile development. It&#8217;s the primary vehicle for declaring XAML resources you’ll use throughout your mobile application,...","Href":"https://blog.xamarin.com/better-resource-organization-xamarin-forms/","RawContent":null},{"Title":"The What, Why, and How of Mobile DevOps with Visual Studio App Center","PublishedOn":"2018-01-22T18:52:27+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"With constant operating system releases, ever-shifting user expectations, and new form factors launching every year, making sure your apps are high-quality, take advantage of the latest technology,...","Href":"https://blog.xamarin.com/mobile-devops-visual-studio-app-center/","RawContent":null}],"ResultType":"Feed"},"Android":{"Events":[{"Id":"7214387100","Type":"PullRequestEvent","CreatedAt":"2018-02-08T01:58:58","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1268","RelatedDescription":"Merged pull request \"[Xamarin.Android.Build.Tasks] Add `AndroidAarLibrary` Build Action\" (#1268) at xamarin/xamarin-android","RelatedBody":"Our components team currently have to go through a ton\r\nof hoops to include .aar files in the build system.\r\nBecause we are not allowed to ship some of the google .aar\r\nfiles with the Nuget packasges they need to be downloaded\r\non demand. To work within the current build system these\r\n.aar files then need to be unpacked, restructured,\r\ncompressed and included in the Nuget assembly as an\r\nEmbeddedResource. This requires updating the assembly\r\nafter it has been downloaded from nuget.\r\n\r\nWith the introduction of the `AndroidAarLibrary` build\r\naction we can remove the rebuilding of the Nuget assembly\r\ncompletely. The new system will still download the required\r\n.aar files on demand. But instead of repacking them into\r\nthe .dll, the Nuget .targets file will simply add these\r\n.aar files to the `AndroidAarLibrary` ItemGroup. These\r\nItems will then be picked up by the `ResolveLibraryProjectImports`\r\ntask. They will then be extracted into the `$(IntermediateOutputDir)`.\r\nFrom there the resources, assets and .jar files in the .aar will\r\nthen be included in the build system of the application."},{"Id":"7212987174","Type":"PullRequestEvent","CreatedAt":"2018-02-07T20:05:59","Actor":"xamarin-release-manager","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1283","RelatedDescription":"Opened pull request \"Updated reference to mono/mono@da1e498\" (#1283) at xamarin/xamarin-android","RelatedBody":"Updated reference to mono/mono@da1e498"},{"Id":"7212392267","Type":"IssuesEvent","CreatedAt":"2018-02-07T18:08:51","Actor":"rihadavid","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/1277","RelatedDescription":"Closed issue \"async void OnCreate not reporting errors on API 15/16\" (#1277) at xamarin/xamarin-android","RelatedBody":"### Steps to Reproduce\r\n\r\n1. Use this sample code:\r\n       \r\n        public class MyActivity : AppCompatActivity\r\n        {\r\n           protected override async void OnCreate(Bundle savedInstanceState)\r\n           {\r\n                base.OnCreate(savedInstanceState);\r\n                throw new Exception();\r\n           }\r\n        }\r\n2. Run the app and open the activity on API 15 or 16\r\n3. The exception is ignored, app continues running\r\n4. when removing the word ``async``, the exception gets reported, app crashes.\r\n\r\n### Expected Behavior\r\nApp should crash no matter whether it is ``async void`` or just ``void``, especially if the exception is thrown before any ``await``.\r\n### Actual Behavior\r\nOn API 15 and 16, it only crashes if it is ``void``. On android M and others, it crashes with both ``async void`` and ``void``.\r\n### Version Information\r\nMicrosoft Visual Studio Community 2017 \r\nVersion 15.5.2\r\nVisualStudio.15.Release/15.5.2+27130.2010\r\nMicrosoft .NET Framework\r\nVersion 4.7.02556\r\n\r\nInstalled Version: Community\r\n\r\nVisual Basic 2017   00369-60000-00001-AA614\r\nMicrosoft Visual Basic 2017\r\n\r\nVisual C# 2017   00369-60000-00001-AA614\r\nMicrosoft Visual C# 2017\r\n\r\nVisual F# 4.1   00369-60000-00001-AA614\r\nMicrosoft Visual F# 4.1\r\n\r\nApplication Insights Tools for Visual Studio Package   8.10.01106.1\r\nApplication Insights Tools for Visual Studio\r\n\r\nASP.NET and Web Tools 2017   15.0.31125.0\r\nASP.NET and Web Tools 2017\r\n\r\nASP.NET Core Razor Language Services   1.0\r\nProvides languages services for ASP.NET Core Razor.\r\n\r\nASP.NET Web Frameworks and Tools 2017   5.2.51007.0\r\nFor additional information, visit https://www.asp.net/\r\n\r\nAzure App Service Tools v3.0.0   15.0.31106.0\r\nAzure App Service Tools v3.0.0\r\n\r\nCommon Azure Tools   1.10\r\nProvides common services for use by Azure Mobile Services and Microsoft Azure Tools.\r\n\r\nJavaScript Language Service   2.0\r\nJavaScript Language Service\r\n\r\nJavaScript Project System   2.0\r\nJavaScript Project System\r\n\r\nMerq   1.1.17-rc (cba4571)\r\nCommand Bus, Event Stream and Async Manager for Visual Studio extensions.\r\n\r\nMicrosoft Azure Tools   2.9\r\nMicrosoft Azure Tools for Microsoft Visual Studio 2017 - v2.9.51120.3\r\n\r\nMicrosoft Continuous Delivery Tools for Visual Studio   0.3\r\nSimplifying the configuration of continuous build integration and continuous build delivery from within the Visual Studio IDE.\r\n\r\nMicrosoft JVM Debugger   1.0\r\nProvides support for connecting the Visual Studio debugger to JDWP compatible Java Virtual Machines\r\n\r\nMicrosoft MI-Based Debugger   1.0\r\nProvides support for connecting Visual Studio to MI compatible debuggers\r\n\r\nMicrosoft Visual Studio Tools for Containers   1.1\r\nDevelop, run, validate your ASP.NET Core applications in the target environment. F5 your application directly into a container with debugging, or CTRL + F5 to edit & refresh your app without having to rebuild the container.\r\n\r\nMono Debugging for Visual Studio   4.8.4-pre (3fe64e3)\r\nSupport for debugging Mono processes with Visual Studio.\r\n\r\nNode.js Tools   1.4.11025.7\r\nAdds support for developing and debugging Node.js apps in Visual Studio\r\n\r\nNuGet Package Manager   4.5.0\r\nNuGet Package Manager in Visual Studio. For more information about NuGet, visit http://docs.nuget.org/.\r\n\r\nSQL Server Data Tools   15.1.61710.120\r\nMicrosoft SQL Server Data Tools\r\n\r\nTypeScript Tools   15.5.11025.1\r\nTypeScript Tools for Microsoft Visual Studio\r\n\r\nVisual Studio Code Debug Adapter Host Package   1.0\r\nInterop layer for hosting Visual Studio Code debug adapters in Visual Studio\r\n\r\nVisualStudio.Mac   1.0\r\nMac Extension for Visual Studio\r\n\r\nXamarin   4.8.0.753 (6575bd113)\r\nVisual Studio extension to enable development for Xamarin.iOS and Xamarin.Android.\r\n\r\nXamarin Designer   4.8.188 (c5813fa34)\r\nVisual Studio extension to enable Xamarin Designer tools in Visual Studio.\r\n\r\nXamarin.Android SDK   8.1.0.25 (HEAD/d8c6e504f)\r\nXamarin.Android Reference Assemblies and MSBuild support.\r\n\r\nXamarin.iOS and Xamarin.Mac SDK   11.6.1.2 (6857dfc)\r\nXamarin.iOS and Xamarin.Mac Reference Assemblies and MSBuild support."},{"Id":"7211429721","Type":"IssuesEvent","CreatedAt":"2018-02-07T15:23:12","Actor":"rros","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/1282","RelatedDescription":"Opened issue \"System.ObjectDisposedException when using AndroidClientHandler with POST-requests where the response is a 302 redirect\" (#1282) at xamarin/xamarin-android","RelatedBody":"### Steps to Reproduce\r\n\r\n1. Configure the HttpClient to use the AndroidClientHandler.\r\n2. Perform a POST-request **with a request body** to an URL where the response is a 302 redirect.\r\n3. An ObjectDisposedException is thrown from the WriteRequestContentToOutput-method.\r\n\r\nThis is reproducible with the following code:\r\n```csharp\r\nnamespace App8\r\n{\r\n    using System;\r\n    using System.Net.Http;\r\n    using System.Text;\r\n    using System.Threading.Tasks;\r\n\r\n    using Android.App;\r\n    using Android.OS;\r\n\r\n    using Xamarin.Android.Net;\r\n\r\n    [Activity(MainLauncher = true)]\r\n    public class MainActivity : Activity\r\n    {\r\n        protected override async void OnCreate(Bundle savedInstanceState)\r\n        {\r\n            base.OnCreate(savedInstanceState);\r\n\r\n            await this.PerformPostRedirectGetAsync(new HttpClientHandler(), false);     // POST -> 302 Found -> GET -> 200 OK\r\n            await this.PerformPostRedirectGetAsync(new HttpClientHandler(), true);      // POST -> 302 Found -> GET -> 200 OK\r\n            await this.PerformPostRedirectGetAsync(new AndroidClientHandler(), false);  // POST -> 302 Found -> GET -> 200 OK\r\n            await this.PerformPostRedirectGetAsync(new AndroidClientHandler(), true);   // POST -> 302 Found -> System.ObjectDisposedException: Cannot access a closed Stream.\r\n\r\n            // Set our view from the \"main\" layout resource\r\n            this.SetContentView(Resource.Layout.Main);\r\n        }\r\n\r\n        private async Task PerformPostRedirectGetAsync(HttpMessageHandler httpMessageHandler, bool withRequestContent)\r\n        {\r\n            // This URL returns a 302 Found to https://httpbin.org/get\r\n            const string Url = \"https://httpbin.org/redirect-to?url=https%3A%2F%2Fhttpbin.org%2Fget\";\r\n\r\n            try\r\n            {\r\n                var client = new HttpClient(httpMessageHandler);\r\n\r\n                var request = new HttpRequestMessage(HttpMethod.Post, Url);\r\n                if (withRequestContent)\r\n                {\r\n                    request.Content = new StringContent(\"{}\", Encoding.UTF8, \"application/json\");\r\n                }\r\n\r\n                var response = await client.SendAsync(request).ConfigureAwait(false);\r\n\r\n                System.Diagnostics.Debug.WriteLine(\r\n                    $\"Response success: {response.IsSuccessStatusCode}, statuscode: {response.StatusCode} ({(int)response.StatusCode})\");\r\n\r\n                var content = await response.Content.ReadAsStringAsync().ConfigureAwait(false);\r\n\r\n                System.Diagnostics.Debug.WriteLine(content);\r\n            }\r\n            catch (Exception e)\r\n            {\r\n                System.Diagnostics.Debug.WriteLine(e.Message);\r\n            }\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n### Expected Behavior\r\nThe HttpClient should follow the redirect and issue a GET-request to the URL from the Location-header\r\n\r\n### Actual Behavior\r\nSystem.ObjectDisposedException: Cannot access a closed Stream.\r\nStacktrace:\r\n```\r\n  at System.IO.MemoryStream.CopyToAsync (System.IO.Stream destination, System.Int32 bufferSize, System.Threading.CancellationToken cancellationToken) [0x00037] in /Users/builder/jenkins/workspace/xamarin-android-d15-5/xamarin-android/external/mono/mcs/class/referencesource/mscorlib/system/io/memorystream.cs:433 \r\n  at Xamarin.Android.Net.AndroidClientHandler+<WriteRequestContentToOutput>d__43.MoveNext () [0x00089] in /Users/builder/data/lanes/5749/75f8c683/source/xamarin-android/src/Mono.Android/Xamarin.Android.Net/AndroidClientHandler.cs:319 \r\n--- End of stack trace from previous location where exception was thrown ---\r\n  at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw () [0x0000c] in /Users/builder/jenkins/workspace/xamarin-android-d15-5/xamarin-android/external/mono/mcs/class/referencesource/mscorlib/system/runtime/exceptionservices/exceptionservicescommon.cs:152 \r\n  at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess (System.Threading.Tasks.Task task) [0x00037] in /Users/builder/jenkins/workspace/xamarin-android-d15-5/xamarin-android/external/mono/mcs/class/referencesource/mscorlib/system/runtime/compilerservices/TaskAwaiter.cs:187 \r\n  at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification (System.Threading.Tasks.Task task) [0x00028] in /Users/builder/jenkins/workspace/xamarin-android-d15-5/xamarin-android/external/mono/mcs/class/referencesource/mscorlib/system/runtime/compilerservices/TaskAwaiter.cs:156 \r\n  at System.Runtime.CompilerServices.TaskAwaiter.ValidateEnd (System.Threading.Tasks.Task task) [0x00008] in /Users/builder/jenkins/workspace/xamarin-android-d15-5/xamarin-android/external/mono/mcs/class/referencesource/mscorlib/system/runtime/compilerservices/TaskAwaiter.cs:128 \r\n  at System.Runtime.CompilerServices.TaskAwaiter.GetResult () [0x00000] in /Users/builder/jenkins/workspace/xamarin-android-d15-5/xamarin-android/external/mono/mcs/class/referencesource/mscorlib/system/runtime/compilerservices/TaskAwaiter.cs:113 \r\n  at Xamarin.Android.Net.AndroidClientHandler+<DoProcessRequest>d__44.MoveNext () [0x002a5] in /Users/builder/data/lanes/5749/75f8c683/source/xamarin-android/src/Mono.Android/Xamarin.Android.Net/AndroidClientHandler.cs:391 \r\n--- End of stack trace from previous location where exception was thrown ---\r\n  at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw () [0x0000c] in /Users/builder/jenkins/workspace/xamarin-android-d15-5/xamarin-android/external/mono/mcs/class/referencesource/mscorlib/system/runtime/exceptionservices/exceptionservicescommon.cs:152 \r\n  at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess (System.Threading.Tasks.Task task) [0x00037] in /Users/builder/jenkins/workspace/xamarin-android-d15-5/xamarin-android/external/mono/mcs/class/referencesource/mscorlib/system/runtime/compilerservices/TaskAwaiter.cs:187 \r\n  at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification (System.Threading.Tasks.Task task) [0x00028] in /Users/builder/jenkins/workspace/xamarin-android-d15-5/xamarin-android/external/mono/mcs/class/referencesource/mscorlib/system/runtime/compilerservices/TaskAwaiter.cs:156 \r\n  at System.Runtime.CompilerServices.TaskAwaiter.ValidateEnd (System.Threading.Tasks.Task task) [0x00008] in /Users/builder/jenkins/workspace/xamarin-android-d15-5/xamarin-android/external/mono/mcs/class/referencesource/mscorlib/system/runtime/compilerservices/TaskAwaiter.cs:128 \r\n  at System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1+ConfiguredTaskAwaiter[TResult].GetResult () [0x00000] in /Users/builder/jenkins/workspace/xamarin-android-d15-5/xamarin-android/external/mono/mcs/class/referencesource/mscorlib/system/runtime/compilerservices/TaskAwaiter.cs:535 \r\n  at Xamarin.Android.Net.AndroidClientHandler+<SendAsync>d__39.MoveNext () [0x001e2] in /Users/builder/data/lanes/5749/75f8c683/source/xamarin-android/src/Mono.Android/Xamarin.Android.Net/AndroidClientHandler.cs:278 \r\n--- End of stack trace from previous location where exception was thrown ---\r\n  at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw () [0x0000c] in /Users/builder/jenkins/workspace/xamarin-android-d15-5/xamarin-android/external/mono/mcs/class/referencesource/mscorlib/system/runtime/exceptionservices/exceptionservicescommon.cs:152 \r\n  at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess (System.Threading.Tasks.Task task) [0x00037] in /Users/builder/jenkins/workspace/xamarin-android-d15-5/xamarin-android/external/mono/mcs/class/referencesource/mscorlib/system/runtime/compilerservices/TaskAwaiter.cs:187 \r\n  at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification (System.Threading.Tasks.Task task) [0x00028] in /Users/builder/jenkins/workspace/xamarin-android-d15-5/xamarin-android/external/mono/mcs/class/referencesource/mscorlib/system/runtime/compilerservices/TaskAwaiter.cs:156 \r\n  at System.Runtime.CompilerServices.TaskAwaiter.ValidateEnd (System.Threading.Tasks.Task task) [0x00008] in /Users/builder/jenkins/workspace/xamarin-android-d15-5/xamarin-android/external/mono/mcs/class/referencesource/mscorlib/system/runtime/compilerservices/TaskAwaiter.cs:128 \r\n  at System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1+ConfiguredTaskAwaiter[TResult].GetResult () [0x00000] in /Users/builder/jenkins/workspace/xamarin-android-d15-5/xamarin-android/external/mono/mcs/class/referencesource/mscorlib/system/runtime/compilerservices/TaskAwaiter.cs:535 \r\n  at System.Net.Http.HttpClient+<SendAsyncWorker>d__49.MoveNext () [0x00080] in /Users/builder/jenkins/workspace/xamarin-android-d15-5/xamarin-android/external/mono/mcs/class/System.Net.Http/System.Net.Http/HttpClient.cs:276 \r\n--- End of stack trace from previous location where exception was thrown ---\r\n```\r\n\r\n### Version Information\r\nXamarin.Android SDK   8.1.5.0 (HEAD/75f8c6838)"},{"Id":"7211254928","Type":"PullRequestEvent","CreatedAt":"2018-02-07T14:53:58","Actor":"dellis1972","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1280","RelatedDescription":"Merged pull request \"Fix builds when there Android toolchain directory doesn't exist yet\" (#1280) at xamarin/xamarin-android","RelatedBody":"Part of the XA build process is download and installation of Android SDK, NDK as\r\nwell as creation of native compilation toolchains. However, it appears that at\r\nsome point we regressed and stopped performing those tasks and, thus, the builds\r\nfail when adjusting API description files with api-xml-adjuster since at this\r\npoint no SDK, NDK or toolchains are found. The download and installation of\r\nthose components is handled by the android-toolchain project which is dependent\r\nupon by several other projects in XA that require the SDK and the NDK to be\r\npresent. android-xml-adjuster needs them as well but it hasn't dependent on\r\nandroid-toolchain until this commit which adds a reference to the toolchain\r\nproject and fixes the build."},{"Id":"7211057812","Type":"IssuesEvent","CreatedAt":"2018-02-07T14:19:48","Actor":"garuma","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/1274","RelatedDescription":"Closed issue \"An Exception is thrown in VS 2017 when opening an existing project with a layout file (axml)\" (#1274) at xamarin/xamarin-android","RelatedBody":"### Steps to Reproduce\r\n\r\n1. Create an empty activity xamarin.Android project in Visual Studio 2017\r\n2. Double click on the Main.axml and open the desginer\r\n3. Add few controls, it doesn't matter what you add\r\n4. Save the project and make sure the Main.axml remains open in Visual Studio\r\n5. Close Visual Studio\r\n6. Launch VS and open the project. You should now get an exception from VS complaining about a failed extension\r\n\r\n### Expected Behavior\r\nLaunching a project with a layout file already open should not cause Visual Studio to throw an exception.\r\n\r\n### Actual Behavior\r\nVisual studio throws the exception below\r\n\r\n```\r\n<entry>\r\n    <record>624</record>\r\n    <time>2018/02/05 18:38:17.821</time>\r\n    <type>Error</type>\r\n    <source>Editor or Editor Extension</source>\r\n    <description>System.NullReferenceException: Object reference not set to an instance of an object.&#x000D;&#x000A;   at Xamarin.VisualStudio.Android.Designer.MonoAndroidDesignerService.FindBestAndroidTarget(DesignerProject designerProject, Int32 apiLevel) in E:\\A\\_work\\12\\s\\Xamarin.Designer.VisualStudio\\src\\VisualStudio.Android.Designer\\MonoAndroidDesignerService.cs:line 136&#x000D;&#x000A;   at Xamarin.VisualStudio.Android.Designer.AxmlTextViewCreationListener.VsTextViewCreated(IVsTextView textViewAdapter) in E:\\A\\_work\\12\\s\\Xamarin.Designer.VisualStudio\\src\\VisualStudio.Android.Designer\\Editor\\AxmlTextViewCreationListener.cs:line 59&#x000D;&#x000A;   at Microsoft.VisualStudio.Editor.Implementation.SimpleTextViewWindow.&lt;&gt;c__DisplayClass565_0.&lt;SendVsTextViewCreated&gt;b__0()&#x000D;&#x000A;   at Microsoft.VisualStudio.Text.Utilities.GuardedOperations.CallExtensionPoint(Object errorSource, Action call)&#x000D;&#x000A;--- End of stack trace from previous location where exception was thrown ---&#x000D;&#x000A;   at Microsoft.VisualStudio.Telemetry.WindowsErrorReporting.WatsonReport.GetClrWatsonExceptionInfo(Exception exceptionObject)</description>\r\n  </entry>\r\n```\r\n\r\n### Version Information\r\n\r\nMicrosoft Visual Studio Professional 2017 \r\nVersion 15.5.5\r\nVisualStudio.15.Release/15.5.5+27130.2026\r\nMicrosoft .NET Framework\r\nVersion 4.7.02053\r\n\r\nInstalled Version: Professional\r\n\r\nVisual Basic 2017   00370-10001-14471-AA819\r\nMicrosoft Visual Basic 2017\r\n\r\nVisual C# 2017   00370-10001-14471-AA819\r\nMicrosoft Visual C# 2017\r\n\r\nVisual C++ 2017   00370-10001-14471-AA819\r\nMicrosoft Visual C++ 2017\r\n\r\nVisual F# 4.1   00370-10001-14471-AA819\r\nMicrosoft Visual F# 4.1\r\n\r\nApplication Insights Tools for Visual Studio Package   8.10.01106.1\r\nApplication Insights Tools for Visual Studio\r\n\r\nASP.NET and Web Tools 2017   15.0.31127.0\r\nASP.NET and Web Tools 2017\r\n\r\nASP.NET Core Razor Language Services   1.0\r\nProvides languages services for ASP.NET Core Razor.\r\n\r\nAzure App Service Tools v3.0.0   15.0.31106.0\r\nAzure App Service Tools v3.0.0\r\n\r\nCommon Azure Tools   1.10\r\nProvides common services for use by Azure Mobile Services and Microsoft Azure Tools.\r\n\r\nJavaScript Language Service   2.0\r\nJavaScript Language Service\r\n\r\nJetBrains ReSharper Ultimate 2017.3.2    Build 111.0.20180201.63358\r\nJetBrains ReSharper Ultimate package for Microsoft Visual Studio. For more information about ReSharper Ultimate, visit http://www.jetbrains.com/resharper. Copyright © 2018 JetBrains, Inc.\r\n\r\nMerq   1.1.17-rc (cba4571)\r\nCommand Bus, Event Stream and Async Manager for Visual Studio extensions.\r\n\r\nMicrosoft Continuous Delivery Tools for Visual Studio   0.3\r\nSimplifying the configuration of continuous build integration and continuous build delivery from within the Visual Studio IDE.\r\n\r\nMicrosoft JVM Debugger   1.0\r\nProvides support for connecting the Visual Studio debugger to JDWP compatible Java Virtual Machines\r\n\r\nMicrosoft MI-Based Debugger   1.0\r\nProvides support for connecting Visual Studio to MI compatible debuggers\r\n\r\nMicrosoft Visual C++ Wizards   1.0\r\nMicrosoft Visual C++ Wizards\r\n\r\nMicrosoft Visual Studio VC Package   1.0\r\nMicrosoft Visual Studio VC Package\r\n\r\nMono Debugging for Visual Studio   4.8.4-pre (3fe64e3)\r\nSupport for debugging Mono processes with Visual Studio.\r\n\r\nNuGet Package Manager   4.5.0\r\nNuGet Package Manager in Visual Studio. For more information about NuGet, visit http://docs.nuget.org/.\r\n\r\nSQL Server Data Tools   15.1.61710.120\r\nMicrosoft SQL Server Data Tools\r\n\r\nTypeScript Tools   15.5.11025.1\r\nTypeScript Tools for Microsoft Visual Studio\r\n\r\nVisual Studio Code Debug Adapter Host Package   1.0\r\nInterop layer for hosting Visual Studio Code debug adapters in Visual Studio\r\n\r\nVisual Studio Tools for CMake   1.0\r\nVisual Studio Tools for CMake\r\n\r\nVisualStudio.Mac   1.0\r\nMac Extension for Visual Studio\r\n\r\nXamarin   4.8.0.760 (fc93f3f5b)\r\nVisual Studio extension to enable development for Xamarin.iOS and Xamarin.Android.\r\n\r\nXamarin Designer   4.8.188 (c5813fa34)\r\nVisual Studio extension to enable Xamarin Designer tools in Visual Studio.\r\n\r\nXamarin.Android SDK   8.1.5.0 (HEAD/75f8c6838)\r\nXamarin.Android Reference Assemblies and MSBuild support.\r\n\r\nXamarin.iOS and Xamarin.Mac SDK   11.6.1.4 (db807ec)\r\nXamarin.iOS and Xamarin.Mac Reference Assemblies and MSBuild support.\r\n\r\n### Log File\n\n> VS bug #563441"}],"ResultType":"GitHubEvent"},"Forms":{"Events":[{"Id":"7214654597","Type":"IssuesEvent","CreatedAt":"2018-02-08T03:34:00","Actor":"owlstack","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/1573","RelatedDescription":"Closed issue \"GetTasksAbi task could not be loaded in 2.5.0\" (#1573) at xamarin/Xamarin.Forms","RelatedBody":"### Description\r\n\r\n### Steps to Reproduce\r\n\r\n1. Upgrade Xamarin.Forms project from 2.4.0.282 to 2.5.0.122 (With .NET standard 1.4 for shared logic class) \r\n2. Build solution with device connected (in my case UWP device)\r\n3. Get the error \r\n\r\nOddly, it happens frequently intermittently-- that is, it happens and then I try to build my solution again by clicking on the run button several times. After several times, my solution builds just fine but I still get the error. \r\n\r\n### Expected Behavior\r\nNo error and I can run my app just fine \r\n\r\n### Actual Behavior\r\n\r\nError: \r\n\r\n> The \"Xamarin.Forms.Build.Tasks.GetTasksAbi\" task could not be loaded from the assembly C:\\Users\\parallels\\.nuget\\packages\\xamarin.forms\\2.5.0.122203\\build\\netstandard1.0\\Xamarin.Forms.Build.Tasks.dll.  Confirm that the <UsingTask> declaration is correct, that the assembly and all its dependencies are available, and that the task contains a public class that implements Microsoft.Build.Framework.ITask.\r\n\r\nAnd I can't build my solution. \r\n\r\n### Basic Information\r\n\r\n- Version with issue: 2.5.0.122\r\n- Last known good version: 2.4.0 (not sure about \"last\" but this is the version I upgraded from)\r\n- IDE: Visual Studio 2017\r\n- Platform Target Frameworks: \r\n  - UWP: 10.0.14393.0\r\n- Nuget Packages: Xamarin.Forms 2.5.0.122, Xamarin 4.8.0\r\n- Affected Devices:\r\nUWP Windows 10 device \r\n\r\n"},{"Id":"7213966238","Type":"IssuesEvent","CreatedAt":"2018-02-07T23:44:02","Actor":"EmilAlipiev","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/1835","RelatedDescription":"Opened issue \"Using AOT and LLVM makes app size too large when installed on the device\" (#1835) at xamarin/Xamarin.Forms","RelatedBody":"I tried using AOT and LLVM to reduce start up time in my xamarin forms app on android. It really made trick. I had around 10-12secs and now google firebase reports between 2-7secs based on the device as shown below.\r\n\r\n![image](https://user-images.githubusercontent.com/10422347/35947583-d6bbf29e-0c68-11e8-8875-6c4b55297b69.png)\r\n\r\nWhat my settings are as followings; - Link SDK and User assemblies - Bundle into native assemblies - Proguard - no-write-symbols,nodebug - Separate Apk for each Abis\r\n\r\nProject file for related group looks like as below;\r\n\r\n```\r\n<PropertyGroup Condition=\" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' \">\r\n    <Optimize>true</Optimize>\r\n    <OutputPath>bin\\Release\\</OutputPath>\r\n    <DefineConstants>TRACE</DefineConstants>\r\n    <ErrorReport>prompt</ErrorReport>\r\n    <WarningLevel>4</WarningLevel>\r\n    <AndroidUseSharedRuntime>False</AndroidUseSharedRuntime>\r\n    <DebugType>\r\n    </DebugType>\r\n    <AndroidLinkMode>Full</AndroidLinkMode>\r\n    <EmbedAssembliesIntoApk>true</EmbedAssembliesIntoApk>\r\n    <AndroidCreatePackagePerAbi>true</AndroidCreatePackagePerAbi>\r\n    <JavaMaximumHeapSize>1G</JavaMaximumHeapSize>\r\n    <AotAssemblies>true</AotAssemblies>\r\n    <EnableLLVM>true</EnableLLVM>\r\n    <AndroidAotAdditionalArguments>no-write-symbols,nodebug</AndroidAotAdditionalArguments>\r\n    <DebugSymbols>false</DebugSymbols>\r\n    <BundleAssemblies>true</BundleAssemblies>\r\n    <AndroidEnableMultiDex>True</AndroidEnableMultiDex>\r\n    <EnableProguard>true</EnableProguard>\r\n    <Debugger>Xamarin</Debugger>\r\n    <AndroidSupportedAbis>armeabi-v7a;x86;x86_64</AndroidSupportedAbis>\r\n    <AndroidLinkSkip>Akavache;Akavache.Sqlite3;SQLiteNetExtensions;SQLiteNetExtensionsAsync;SQLite.Net;SQLite.Net.Async;Syncfusion.DataSource.Portable;Syncfusion.Data.Portable;Syncfusion.Pdf.Portable;Syncfusion.SfDataGrid.XForms;Syncfusion.SfNumericUpDown.XForms;Syncfusion.SfDataGrid.XForms.Android;Syncfusion.SfNavigationDrawer.Android;Syncfusion.SfNavigationDrawer.XForms;Syncfusion.SfNavigationDrawer.XForms.Android;Syncfusion.SfSchedule.XForms;Syncfusion.SfSchedule.XForms.Android;Syncfusion.SfSchedule.Android;Syncfusion.Compression.Portable;Xamarin.GooglePlayServices.AppIndexing;Xamarin.Insights;Splat;Xamarin.GooglePlayServices.Basement;Xamarin.FireBase.AppIndexing;Xamarin.FireBase.Common;Xamarin.GooglePlayServices.Gcm;</AndroidLinkSkip>\r\n    <AndroidEnableMultipleDex>true</AndroidEnableMultipleDex>\r\n    <AndroidExplicitCrunch>true</AndroidExplicitCrunch>\r\n  </PropertyGroup>\r\n```\r\n \r\n**PROBLEM;** App size increased as expected but it is not the Apk size problem for me, rather installed size on device. here are the values.\r\n\r\nAPK is 20mb using single apk, settings above but no AOT no LLVM\r\nAPK separate apks per abi are 16mb, settings above but no AOT no LLVM\r\nsingle apk 49 mb, , settings above but with AOT + LLVM\r\nseparate Apks per abi are 26 mb,settings above with AOT + LLVM a\r\nUntil here, everything seems perfect. I can accept 6mb-10mb increase even it is still so high amount but the difference is installed size of the app on the device. without AOT is around 30mb installs. with AOT+LLVM 100mb+\r\n\r\nWhen I extract the apk, i can see what is in the apk. Capture below is from lib folder (biggest folder) without using AOT and Bundle into Native assemblies\r\n\r\n![image](https://user-images.githubusercontent.com/10422347/35947624-160e8574-0c69-11e8-9ebf-9f54908380ec.png)\r\n\r\nCapture for with AOT+LLVVM.. see the yellow highlighteds are indeed what we need to install the apk according to the previous apk. I dont know if I need any extra library to run AOT but why those blue underlined 3rd party libraries are there. they are supposed to be bundled into native assemblies as in the first screenshot. Do I understand it wrong or Xamarin has bug on using AOT with Bundles into Native assemblies?\r\n\r\n![image](https://user-images.githubusercontent.com/10422347/35947638-244149f6-0c69-11e8-83d8-5fff802e80f0.png)\r\n"},{"Id":"7213921030","Type":"IssuesEvent","CreatedAt":"2018-02-07T23:31:06","Actor":"fernandovm","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/1834","RelatedDescription":"Opened issue \"Clicks/taps stops works after Content property changes in OnAppearing on Xamarin.Forms iOS!\" (#1834) at xamarin/Xamarin.Forms","RelatedBody":"### Description\r\n\r\nAfter a change that I do in the first execution of OnAppearing of a ContentPage the clicks/taps does not works. The change is very simple: I create a new StackLayout (S1) and set it to Content property of the ContentPage. Inside the S1 I create two StackLayout (S2 e S3). Inside S2 I put the old Content (S0) property of ContentPage and in S3 I put another new StackLayout with a Label view.\r\n\r\nIf I create the content page without do the change, all works fine. If I create the same content page but doing the change, all clicks/taps stops works. In the Android platform all works fine in all conditions.\r\n\r\n### Steps to Reproduce\r\n\r\n1. Compile and Run the reproduction case attached project.\r\n2. Click in the button 'Open without dock' and all will work.\r\n3. Click in the button 'Open with dock' and Clicks/taps stops works.\r\n\r\n### Expected Behavior\r\n\r\nThe clicks/taps must works in both Android and iOS platforms.\r\n\r\n### Actual Behavior\r\n\r\nThe clicks/taps does not works in iOS platform.\r\n\r\n### Basic Information\r\n\r\n- Version with issue: Xamarin.Forms 2.5.0.121934\r\n- Last known good version: None\r\n- IDE: Visual Studio 2017 15.4.5\r\n[XamApp.zip](https://github.com/xamarin/Xamarin.Forms/files/1705122/XamApp.zip)\r\n\r\n- Platform Target Frameworks: \r\n  - iOS:  Any\r\n  - Android: Any\r\n"},{"Id":"7213466277","Type":"PullRequestEvent","CreatedAt":"2018-02-07T21:45:41","Actor":"PureWeen","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/1833","RelatedDescription":"Opened pull request \"AutoCapitalization support for Entry/Editor  (#1683)\" (#1833) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\n\r\nThe Entry and Editor controls do not have a simple mechanism for controlling the native automatic capitalization features.\r\n\r\n#### Android\r\nMapped the enum to the following types\r\n```c#\r\nAutoCapitalization.Characters: InputTypes.TextFlagCapCharacters;\r\nAutoCapitalization.Sentences: InputTypes.TextFlagCapSentences;\r\nAutoCapitalization.Words: InputTypes.TextFlagCapWords;\r\nAutoCapitalization.None: Doesn't exist for Android so just clears the Input TextFlagCap** \r\nAutoCapitalization.Default:  clears the Input TextFlagCap**\r\n```\r\n\r\n#### iOS\r\nMapped the enum to the following types\r\n```c#\r\nAutoCapitalization.Characters: UITextAutocapitalizationType.AllCharacters;\r\nAutoCapitalization.Sentences: UITextAutocapitalizationType.Sentences;\r\nAutoCapitalization.Words: UITextAutocapitalizationType.Words;\r\nAutoCapitalization.None: UITextAutocapitalizationType.None;\r\n\r\n/*If this is set and the AutoCapitalization has never been set then this does nothing and Auto Cap is ignored. \r\nIf the bindable property is cleared or set back to Default then iOS capitalization is set back to the default\r\n*/\r\nAutoCapitalization.Default:   \r\n\r\n```\r\n\r\n#### UWP\r\n\r\n*AutoCapitalization.Characters*: Implemented using the OnTextChanging handler. I realize you can set the *CharacterCasing* in UWP to Upper but that forces all text no matter what to be upper case.  Thus if you set the Entry.Text field to \"lower case text\" on UWP it'll be capitalized whereas on iOS and Android it won't be.  If the developer wants the text to go in at a certain casing the onus is on them and we should allow that text to represent whatever the developer set it to. AutoCapitalization is also more a function of the keyboard and less a function of the field itself\r\n\r\n*AutoCapitalization.Sentences* and *AutoCapitalization.Words*:\r\nUWP doesn't have a specific setting for these that you can apply to the keyboard. They are inferred from InputScope  https://msdn.microsoft.com/en-us/library/windows/apps/mt280229.aspx?f=255&MSPPError=-2147217396  and from *Typing Settings* on the OS itself so forcing a custom implementation here isn't going to result in an experience a Windows user expects as they have specifically set the OS rules themselves\r\n\r\n### Bugs Fixed ###\r\n\r\nhttps://github.com/xamarin/Xamarin.Forms/issues/1683\r\n\r\n### API Changes ###\r\n\r\n\r\nAdded:\r\n - AutoCapitalizationInputView.AutoCapitalization { get; set; } //Bindable Property\r\n```\r\n    public enum AutoCapitalization\r\n    {\r\n\t\t/// <summary>\r\n\t\t/// Don't set anything on the platform component.\r\n\t\t/// Currently this only affects iOS\r\n\t\t/// </summary>\r\n\t\tDefault = 0,\r\n\t\t/// <summary>\r\n\t\t/// no automatic text capitalization.\r\n\t\t/// </summary>\r\n\t\tNone = 1,\r\n\t\t/// <summary>\r\n\t\t/// capitalize the first character of every word.\r\n\t\t/// </summary>\r\n\t\tWords = 2,\r\n\t\t/// <summary>\r\n\t\t/// capitalize the first character of each sentence. \r\n\t\t/// </summary>\r\n\t\tSentences = 3,\r\n\t\t/// <summary>\r\n\t\t///  capitalize all characters. \r\n\t\t/// </summary>\r\n\t\tCharacters = 4\r\n\t}\r\n```\r\n\r\n### PR Checklist ###\r\n\r\n- [X ] Has tests (if omitted, state reason in description)\r\n- [ X] Rebased on top of master at time of PR\r\n- [ X] Changes adhere to coding standard\r\n- [ X] Consolidate commits as makes sense\r\n"},{"Id":"7213243729","Type":"IssuesEvent","CreatedAt":"2018-02-07T20:59:32","Actor":"davidortinau","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/1435","RelatedDescription":"Closed issue \"\"NullReferenceException\" in \"Xamarin.Forms.Platform.iOS.Renderers.LabelRenderer.cs\" within \"UpdateText()\" & \"UpdateTextColor()\"\" (#1435) at xamarin/Xamarin.Forms","RelatedBody":"Migrated from https://bugzilla.xamarin.com/show_bug.cgi?id=59813\r\n\r\n### Description\r\nIt happens within a list view which gets cyclically updated every second if it is visible. \r\nThe list view only contains labels with different colors and is part of a child page within a carousel page.\r\n\r\nIt happens when swiping into the child page containing the list view (The list view has been updated with new items shortly before).\r\n\r\nProposed Fixes:\r\nhttps://github.com/xamarin/Xamarin.Forms/pull/1216\r\nhttps://github.com/xamarin/Xamarin.Forms/pull/1226\r\nhttps://github.com/xamarin/Xamarin.Forms/pull/1244 \r\n\r\n### Basic Information\r\n\r\n- Version with issue: 2.4.0.280, 2.5.0.77107\r\n- Last known good version: 2.3.5.239-pre3\r\n\r\n\r\n### Reproduction Link\r\n\r\n[XamarinBugzillaBug59813.zip](https://github.com/xamarin/Xamarin.Forms/files/1573815/XamarinBugzillaBug59813.zip)\r\n\r\n"},{"Id":"7213213852","Type":"IssuesEvent","CreatedAt":"2018-02-07T20:53:16","Actor":"davidortinau","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/1434","RelatedDescription":"Closed issue \"Viewmodel instantiates twice using a ViewModelLocator\" (#1434) at xamarin/Xamarin.Forms","RelatedBody":"Migrated from https://bugzilla.xamarin.com/show_bug.cgi?id=57081\r\n\r\n### Description\r\nIn our app we have a problem of viewmodels instantiated twice. \r\n\r\nThe reason this is happening is that creating a new Page instantiates a new viewmodel and then pushing the page on the Navigation stack creates the second viewmodel.In the Page XAML we are referencing a view model locator. This viewmodelLocator has a property of the view model and the getter of this property returns a new viewmodel via a resolve in the dependency container (Unity). So, the problem in fact is that pushing the page on the navigation stack using Navigation.PushAsync(page, true) gets a new view model because somehow the bindings reference the viewmodellocator which in turn get the new viewmodel. \r\n\r\nSide information : The dependency container registers viewmodels in a Transient way, not “static”.\r\n\r\nAm I wrong to rely on the concept of resolving a new viemwodel each time the MyViewModel property gets called? I don’t want to have a direct reference to the viewmodels because keeping these references means that the Garbage Collector will not release them and the services/repository that gets injection also are not released.\r\n\r\nOr does the Navigation.PushAsync() does something that is not correct?\r\nFunny thing is that Navigation.PushModelAsync() works as expected and does not have the side effect of creating a new viewmodel.\r\n\r\nBrowsing the internet I could only find one other person with the same problem.\r\nhttps://forums.xamarin.com/discussion/49257/view-model-instantiating-multiple-times\r\n\r\nOne solution is to remove the BindingContext to the viewmodellocator from the XAML and putting it in the code behind, but I think this will kill my possibility to have live data in the Xamarin Previewer. Am I Right?\r\n\r\nParts of my code for a better understanding of the problem:\r\n\r\nViewmodellocator\r\n\r\npublic CarsViewModel CarsVIewModel \r\n{\r\n\tget\r\n\t{\r\n\t\treturn _dependencyContainer.Resolve<CarsViewModel>();\r\n\t}\r\n\r\n}\r\n\r\nCarsPage\r\n\r\nBindingContext=“{Binding CarsViewModel, Source={StaticResource ViewModelLocator}}\"\r\n\r\nNavigationService\r\n\r\nvar page = Actvator.CreateInstance(type) as BasePage;\r\nawait (page.BindingContext as BaseEventsViewModel).Initialize();\r\nawait (page.BindingContext as BaseEventsViewModel).LoadDataAsync();\r\nawait Navigation.PushAsync(page, true);\r\n\r\nCan you tell me why the last line of code calls the ViewModelLocator (again) and gets me a new ViewModelLocator ?\r\nDo I need to strip the BindingContext from the XAML and put it in the code behind? Or do I need to resolve the view model in my NavigationService? And if I strip the BindingContext from the XAML and put in the code behind, would the Xamarin Previewer Still work? \r\n\r\nIf it might be the case that this is a known bug that will or can not be fixed in the near future, I would like to know what the next best solution would be and, maybe a more interesting question : Are we wrong for wanting the view models and every injected class to NOT live long? Our current app is a reasonably big App with lots of functionality and lots of view models etc. that would all be in memory.\r\n\r\nReferences : https://bugzilla.xamarin.com/show_bug.cgi?id=45557 \r\n           : https://github.com/xamarin/Xamarin.Forms/pull/470\r\n: https://github.com/xamarin/Xamarin.Forms/pull/983\r\n\r\n### Steps to Reproduce\r\n\r\n1. Open the solution in Xamarin Studio \r\n2. Run on iOS Simulator\r\n3. Type something in the username and password entries.\r\n4. Place a breakpoint in the constructor of the CarsViewModel and you will see that the Breakpoint is hit more than once\r\n\r\n### Basic Information\r\n\r\n- Version with issue: 2.3.4\r\n\r\n### Reproduction Link\r\n\r\n[BindingsCall.zip](https://github.com/xamarin/Xamarin.Forms/files/1573769/BindingsCall.zip)"},{"Id":"7213211607","Type":"PullRequestEvent","CreatedAt":"2018-02-07T20:52:49","Actor":"kingces95","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/1832","RelatedDescription":"Opened pull request \"Retain row-as-header behavior when recycling\" (#1832) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\n\r\nExpect tapping on header of ListView to do nothing. Actually crashed as logic didn't account for implementation reserving a row for header use.\r\n\r\n### Bugs Fixed ###\r\n\r\nhttps://github.com/xamarin/Xamarin.Forms/issues/1598\r\n\r\n### API Changes ###\r\n\r\nNone\r\n\r\n### Behavioral Changes ###\r\n\r\nNone\r\n\r\n### PR Checklist ###\r\n\r\n- [ ] Has tests (if omitted, state reason in description)\r\n- [x] Rebased on top of master at time of PR\r\n- [x] Changes adhere to coding standard\r\n- [x] Consolidate commits as makes sense\r\n"},{"Id":"7212920165","Type":"IssuesEvent","CreatedAt":"2018-02-07T19:52:41","Actor":"pauldipietro","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/1428","RelatedDescription":"Closed issue \"Page with ListView or ScrollView not resized properly when using WindowSoftInputModeAdjust.Resize\" (#1428) at xamarin/Xamarin.Forms","RelatedBody":"Migrated from https://bugzilla.xamarin.com/show_bug.cgi?id=58556\r\n\r\n### Description\r\n\r\nWhen using \r\n\r\n        App.Current.On<Xamarin.Forms.PlatformConfiguration.Android>().UseWindowSoftInputModeAdjust(WindowSoftInputModeAdjust.Resize);\r\n\r\ncode to set Android to use the AdjustResize option for the SoftInputMode, an initial page with a ScrollView or a ListView is not resized properly if navigated back to from a detail page when the keyboard is showing. \r\n\r\n\r\n### Steps to Reproduce\r\n\r\n\r\n1. Open the attached test project\r\n\r\n2. Deploy the Android app to an Android emulator or device (tested with a Marshmallow emulator)\r\n\r\n3. Select an item from the ListView\r\n\r\n4. Click on the Entry at the bottom of the new page. The keyboard will show. Leave it showing. \r\n\r\n5. Click the back arrow on the upper left to go back to the first page. \r\n\r\n6. repeat steps 3-5 (may not be necessary, but on occasion I have had to do this twice to reproduce the issue)\r\n\r\n### Expected Behavior\r\n\r\nListView will take up full screen and be the same size as it was initially.\r\n\r\n### Actual Behavior\r\n\r\nBottom part of the ListView is missing. ListView seems to still be resized to allow for the area taken up by \r\nthe keyboard. \r\n\r\n### Basic Information\r\n\r\n- Version with issue: 2.3.5.256-pre6\r\n- IDE: VSMac\r\n\r\n### Reproduction Link\r\n\r\n[AndroidAdjustResizeBug.zip](https://github.com/xamarin/Xamarin.Forms/files/1573713/AndroidAdjustResizeBug.zip)\r\n"},{"Id":"7212775039","Type":"PullRequestEvent","CreatedAt":"2018-02-07T19:24:48","Actor":"jassmith","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/1761","RelatedDescription":"Merged pull request \"[Core] AbsoluteLayout content now fills all available space on Android devices\" (#1761) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\n\r\nChanged AbsoluteLayout.cs to use a platform specific DisplayRound method to allow for cases where a straight Math.Round won't correctly round to the pixel density of the device.  Currently this is only overridden in Android and all the other platforms still just use Math.Round\r\n\r\n### Bugs Fixed ###\r\n\r\nhttps://bugzilla.xamarin.com/show_bug.cgi?id=40092\r\nfixes #1128\r\n\r\n### API Changes ###\r\n\r\nAdded:\r\n - public override double DisplayRound(double value)\r\n\r\nPlatforms can now customize how rounding works for calculations that pertain to pixels.\r\n\r\n### Behavioral Changes ###\r\n\r\nNone\r\n\r\n### PR Checklist ###\r\n\r\n- [X ] Has tests (if omitted, state reason in description)\r\n- [ X] Rebased on top of master at time of PR\r\n- [ X] Changes adhere to coding standard\r\n- [ X] Consolidate commits as makes sense\r\n"}],"ResultType":"GitHubEvent"},"Macios":{"Events":[{"Id":"7214926102","Type":"PullRequestEvent","CreatedAt":"2018-02-08T05:24:24","Actor":"spouliot","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/3432","RelatedDescription":"Opened pull request \"[xtro][passkit] Clean xtro todo for a missing designated initializer\" (#3432) at xamarin/xamarin-macios","RelatedBody":"it's already fixed in master"},{"Id":"7214830952","Type":"PullRequestEvent","CreatedAt":"2018-02-08T04:44:38","Actor":"spouliot","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/3431","RelatedDescription":"Opened pull request \"[webkit] Add NSUserInterfaceValidations conformance to WebView and WKWebView\" (#3431) at xamarin/xamarin-macios","RelatedBody":"Fix remaining xtro todo on webkit"},{"Id":"7214771545","Type":"PullRequestEvent","CreatedAt":"2018-02-08T04:19:49","Actor":"spouliot","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/3428","RelatedDescription":"Merged pull request \"Bump ObjectiveSharpie to a version that supports choosing its Xcode. (#3409)\" (#3428) at xamarin/xamarin-macios","RelatedBody":"Bump ObjectiveSharpie to a version that supports choosing which Xcode to use,\nand also change xtro to do exactly that.\n\nFixes https://github.com/xamarin/maccore/issues/627.\n\nBackport of https://github.com/xamarin/xamarin-macios/pull/3409 to xcode9.3 to\nease switching back and forth with master"},{"Id":"7214613737","Type":"PullRequestEvent","CreatedAt":"2018-02-08T03:18:35","Actor":"spouliot","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/3430","RelatedDescription":"Opened pull request \"[uikit] Add [Advice] on UIImage.FromBundle to mention it was not thread safe before iOS9\" (#3430) at xamarin/xamarin-macios","RelatedBody":"This is related, but not a direct fix, to bug\nhttps://bugzilla.xamarin.com/show_bug.cgi?id=40520\n\nThe original fix was made, a long time ago, in\nmaccore/e39d21e26dd863d019269117d4c110c3ac8ce9f5"},{"Id":"7214535082","Type":"PullRequestEvent","CreatedAt":"2018-02-08T02:50:25","Actor":"spouliot","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/3426","RelatedDescription":"Merged pull request \"Updated reference to mono/mono@da1e498\" (#3426) at xamarin/xamarin-macios","RelatedBody":"Updated reference to mono/mono@da1e498\r\n\r\nhttps://github.com/mono/mono/compare/38502063cac0b9c258af2c59dce9cd2d0a12b4d1...da1e498884ddc56ac6ca82d3703096dc6370e1b2\r\n\r\nfixes https://github.com/mono/mono/issues/6777"},{"Id":"7214509641","Type":"PullRequestEvent","CreatedAt":"2018-02-08T02:41:26","Actor":"spouliot","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/3429","RelatedDescription":"Opened pull request \"[src] Add a few missing [RequiresSuper] attributes. Fix #3253\" (#3429) at xamarin/xamarin-macios","RelatedBody":"Those were missed because xtro did not scan ObjC categories for\n`objc_requires_super` attributes.\n\nFixing the naming mapping (to consider inlined categories) also\nuncovered a few API with extraneous [DesignatedInitializer] attributes\nThose were deprecated (API) and moved into categories so xtro missed\nthe designated initializer was removed.\n\nAll your `base`, well `super` in ObjC, now belong to us :)\n\nhttps://github.com/xamarin/xamarin-macios/issues/3253"},{"Id":"7214500677","Type":"PullRequestEvent","CreatedAt":"2018-02-08T02:38:11","Actor":"spouliot","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/3428","RelatedDescription":"Opened pull request \"Bump ObjectiveSharpie to a version that supports choosing its Xcode. (#3409)\" (#3428) at xamarin/xamarin-macios","RelatedBody":"Bump ObjectiveSharpie to a version that supports choosing which Xcode to use,\nand also change xtro to do exactly that.\n\nFixes https://github.com/xamarin/maccore/issues/627.\n\nBackport of https://github.com/xamarin/xamarin-macios/pull/3409 to xcode9.3 to\nease switching back and forth with master"},{"Id":"7214494403","Type":"PullRequestEvent","CreatedAt":"2018-02-08T02:35:57","Actor":"spouliot","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/3411","RelatedDescription":"Merged pull request \"[imageio] Update for xcode 9.3 beta 2\" (#3411) at xamarin/xamarin-macios","RelatedBody":"Two constants with `__IPHONE_NA` were changed to `__IPHONE_11_3`.\n\nAlso decorate with [TV] and [Watch] attributes since they are implicit,\ni.e. not in the headers but available in tvOS 11.3+ and WatchOS 4.3+\nand, without our attributes, would seems to have been available much\nearlier"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"961326059965870080","CreatedAt":"2018-02-07T19:49:27+00:00","UserScreenname":"xamarinhq","Text":"Register now for our upcoming webinar with @XamarinU on building your first intelligent app with #Xamarin and Micro… https://t.co/lEsIH9mU1Q","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":31,"FavoriteCount":26,"RawContent":null},{"Id":"961281908750635008","CreatedAt":"2018-02-07T16:54:01+00:00","UserScreenname":"xamarinhq","Text":"Get started with even easier iOS app provisioning in #VS4Mac: https://t.co/vdtAckbzWn https://t.co/48PO2bI3Mt","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":29,"FavoriteCount":12,"RawContent":null},{"Id":"960921785641455616","CreatedAt":"2018-02-06T17:03:01+00:00","UserScreenname":"xamarinhq","Text":"Upload your certificates and install them temporarily on the build machine to sign your applications with #VSTS:… https://t.co/OXIdlOPZyn","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":35,"FavoriteCount":11,"RawContent":null},{"Id":"960588991375511552","CreatedAt":"2018-02-05T19:00:37+00:00","UserScreenname":"xamarinhq","Text":"Sketch out your next great app idea with Ink to Code, and see your ideas immediately converted into recognized comp… https://t.co/sIDGF4Kcp0","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":247,"FavoriteCount":124,"RawContent":null},{"Id":"960557379606794248","CreatedAt":"2018-02-05T16:55:00+00:00","UserScreenname":"xamarinhq","Text":"DataBinding Power Moves You May Not Be Using (Yet), with @davidortinau: https://t.co/VpucH7m8z9","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":40,"FavoriteCount":13,"RawContent":null},{"Id":"960308752409923584","CreatedAt":"2018-02-05T00:27:02+00:00","UserScreenname":"xamarinhq","Text":"#Xamarin's @lobrien explores the solar system with #ARKit and F#: https://t.co/0UXY2Lk1XB https://t.co/ChPi6XDAGH","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":29,"FavoriteCount":18,"RawContent":null},{"Id":"959520671754850304","CreatedAt":"2018-02-02T20:15:29+00:00","UserScreenname":"xamarinhq","Text":"Make deploying to an iOS or tvOS device easier with Wireless Deployment and our new Unlock Device Alert: https://t.co/DKgtjGzPfo","Source":"<a href=\"http://twitter.com\" rel=\"nofollow\">Twitter Web Client</a>","RetweetCount":48,"FavoriteCount":22,"RawContent":null},{"Id":"959469971301691392","CreatedAt":"2018-02-02T16:54:01+00:00","UserScreenname":"xamarinhq","Text":"Add beautiful charts to ANY app with #MicroCharts from guest blogger @aloisdeniel: https://t.co/VeqfS1vfIL https://t.co/qc6cGwoxhK","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":96,"FavoriteCount":29,"RawContent":null},{"Id":"959164072196526085","CreatedAt":"2018-02-01T20:38:29+00:00","UserScreenname":"xamarinhq","Text":"Just push play—using Google Play on an Android Emulator: https://t.co/wl37sjNIjv https://t.co/kmW8uIDW80","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":42,"FavoriteCount":18,"RawContent":null},{"Id":"959109618067738624","CreatedAt":"2018-02-01T17:02:06+00:00","UserScreenname":"xamarinhq","Text":"Bring 3D Models to life in augmented reality with #UrhoSharp: https://t.co/0c8YDgfF2Z https://t.co/xYx6fUVhML","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":42,"FavoriteCount":10,"RawContent":null},{"Id":"958788443647152136","CreatedAt":"2018-01-31T19:45:53+00:00","UserScreenname":"xamarinhq","Text":"Help ensure a productive 2018 with #Xamarin developer events near you this February: https://t.co/9aPslPGW2O https://t.co/zRGM0lEoZe","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":24,"FavoriteCount":7,"RawContent":null},{"Id":"958747709963415552","CreatedAt":"2018-01-31T17:04:01+00:00","UserScreenname":"xamarinhq","Text":"Supercharge your Xamarin.Mac app startup time: https://t.co/JzwELyF3Tm https://t.co/xLDqS3Z9sI","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":52,"FavoriteCount":21,"RawContent":null},{"Id":"958386328797884416","CreatedAt":"2018-01-30T17:08:01+00:00","UserScreenname":"xamarinhq","Text":"Explore Augmented Reality for #XamarinAndroid with #ARCore, featuring motion tracking, plane detection, and more:… https://t.co/JOLj1szAol","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":37,"FavoriteCount":16,"RawContent":null},{"Id":"958065243565051904","CreatedAt":"2018-01-29T19:52:08+00:00","UserScreenname":"xamarinhq","Text":"Check out Android Emulator version 27.0.2, now featuring \"Quick Boot\" to launch the emulator in just a few seconds:… https://t.co/75XbYDGg8m","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":225,"FavoriteCount":123,"RawContent":null},{"Id":"958020024941334528","CreatedAt":"2018-01-29T16:52:27+00:00","UserScreenname":"xamarinhq","Text":"Build a meeting scheduling mobile app using #XamarinForms and the Microsoft Graph API: https://t.co/LsMgiFD20d https://t.co/QvuhUZfhAd","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":84,"FavoriteCount":27,"RawContent":null},{"Id":"957782606992543745","CreatedAt":"2018-01-29T01:09:02+00:00","UserScreenname":"xamarinhq","Text":"Making iOS 11 even easier with #XamarinForms: https://t.co/nIDGNXGuF1 https://t.co/6qXhuCMSDp","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":48,"FavoriteCount":17,"RawContent":null},{"Id":"957415179091873792","CreatedAt":"2018-01-28T00:49:01+00:00","UserScreenname":"xamarinhq","Text":"Learn how to publish to #Azure from #VS4Mac: https://t.co/wnNmElsQrM https://t.co/DdxYLvB9ap","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":35,"FavoriteCount":16,"RawContent":null},{"Id":"956935518746546177","CreatedAt":"2018-01-26T17:03:01+00:00","UserScreenname":"xamarinhq","Text":"Add large titles to your iOS 11 apps in this post from @conceptdev: https://t.co/RDyk6GDVUU https://t.co/WlylY4fcZS","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":20,"FavoriteCount":5,"RawContent":null}]}},"RunOn":"2018-02-08T05:30:40.1331968Z","RunDurationInMilliseconds":4235}