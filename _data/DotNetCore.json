{"Data":{"Blog":{"FeedItems":[{"Title":"Announcing UWP Support for .NET Standard 2.0","PublishedOn":"2017-10-10T22:57:46+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"This post was mostly written by Rich Lander with contributions from Immo Landwerth. Today, we are releasing huge updates to UWP for .NET developers. The really big improvement is adding support for .NET Standard 2.0. UWP developers now have access to ~ 20k more APIs. This release brings UWP to partity with the other .NET implementations... <a aria-label=\"read more about Announcing UWP Support for .NET Standard 2.0\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/10/10/announcing-uwp-support-for-net-standard-2-0/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/10/10/announcing-uwp-support-for-net-standard-2-0/","RawContent":null},{"Title":".NET Framework 4.7.1 Runtime and Compiler Features","PublishedOn":"2017-09-28T23:56:59+00:00","CommentsCount":8,"FacebookCount":0,"Summary":"This post describes the new Runtime, Compiler and Base Class Library (BCL) improvements in the .NET Framework 4.7.1. You can try out these features by downloading the Developer Pack, described in the Welcome to the .NET Framework 4.7.1 Early Access blog post.  BCL &#8211; .NET Standard 2.0 Support .NET Framework 4.7.1 has built-in support for .NET Standard 2.0. .NET Framework 4.7.1... <a aria-label=\"read more about .NET Framework 4.7.1 Runtime and Compiler Features\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/09/28/net-framework-4-7-1-runtime-and-compiler-features/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/09/28/net-framework-4-7-1-runtime-and-compiler-features/","RawContent":null},{"Title":"Build a web service with F# and .NET Core 2.0","PublishedOn":"2017-09-26T16:39:23+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"Earlier this year, I wrote about an update to the roadmap for F# and .NET Core. I had mentioned that there were a number of things you could build with F# and .NET Core today, such as web services. In this post, I&#8217;ll walk through building a web service with F# and .NET Core 2.0... <a aria-label=\"read more about Build a web service with F# and .NET Core 2.0\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/09/26/build-a-web-service-with-f-and-net-core-2-0/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/09/26/build-a-web-service-with-f-and-net-core-2-0/","RawContent":null},{"Title":".NET Framework September 2017 Preview of Quality Rollup","PublishedOn":"2017-09-25T19:57:18+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Today, we are releasing the September 2017 Preview of Quality Rollup. This type of rollup is intended for businesses that want to the preview or use quality improvements as soon as they are available. This update applies to Windows 10 Update 1607 (Anniversary Update) and to Windows Server 2016. FYI: The KBs for Windows Server 2016... <a aria-label=\"read more about .NET Framework September 2017 Preview of Quality Rollup\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/09/25/net-framework-september-2017-preview-of-quality-rollup/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/09/25/net-framework-september-2017-preview-of-quality-rollup/","RawContent":null},{"Title":".NET Core September 2017 Update — macOS High Sierra Support","PublishedOn":"2017-09-22T22:29:09+00:00","CommentsCount":4,"FacebookCount":0,"Summary":"We released .NET Core updates for macOS High Sierra Support and additional quality fixes. You can download and install the update for Windows, macOS and Linux. This update is for .NET Core 1.0 and 1.1. The initial .NET Core 2.0 release includes similar improvements, so is not being updated with this release. Downloads .NET Core 1.0.7 .NET... <a aria-label=\"read more about .NET Core September 2017 Update &#8212; macOS High Sierra Support\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/09/22/net-core-september-2017-update-macos-high-sierra-support/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/09/22/net-core-september-2017-update-macos-high-sierra-support/","RawContent":null},{"Title":".NET Framework 4.7.1 Accessibility and WPF Improvements","PublishedOn":"2017-09-21T22:00:20+00:00","CommentsCount":19,"FacebookCount":0,"Summary":"This post describes the new WPF and accessibility features and improvements in .NET Framework 4.7.1. You can try out these features by downloading the Developer Pack, described in the Welcome to the .NET Framework 4.7.1 Early Access blog post. Accessibility improvements .NET Framework 4.7.1 brings in a lot of accessibility improvements across different libraries to align with the... <a aria-label=\"read more about .NET Framework 4.7.1 Accessibility and WPF Improvements\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/09/21/net-framework-4-7-1-accessibility-and-wpf-improvements/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/09/21/net-framework-4-7-1-accessibility-and-wpf-improvements/","RawContent":null},{"Title":"Watch .NET Conf 2017!","PublishedOn":"2017-09-19T14:35:54+00:00","CommentsCount":12,"FacebookCount":0,"Summary":".NET Conf starts today. It&#8217;s a three-day, free, virtual and global .NET conference. All you need to do is point your web browser to channel9.msdn.com, starting at 8AM Pacific Time. We have a packed agenda with a great set of expert .NET developers. What will you learn? Many things. You will learn to build for... <a aria-label=\"read more about Watch .NET Conf 2017!\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/09/19/watch-net-conf-2017/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/09/19/watch-net-conf-2017/","RawContent":null},{"Title":".NET Framework 4.7.1 ASP.NET and Configuration features","PublishedOn":"2017-09-14T00:23:49+00:00","CommentsCount":25,"FacebookCount":0,"Summary":"This post describes the new ASP.NET, Configuration and System.Messaging features and improvements in the .NET Framework 4.7.1. More information on the build these features are available in and how to get the Developer Pack is covered in the Welcome to the .NET Framework 4.7.1 Early Access blog post. Configuration builders Configuration builders allow developers to inject and build... <a aria-label=\"read more about .NET Framework 4.7.1 ASP.NET and Configuration features\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/09/13/net-framework-4-7-1-asp-net-and-configuration-features/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/09/13/net-framework-4-7-1-asp-net-and-configuration-features/","RawContent":null},{"Title":".NET Framework September 2017 Security and Quality Rollup","PublishedOn":"2017-09-13T01:11:33+00:00","CommentsCount":25,"FacebookCount":0,"Summary":"Last Updated: 2017.09.21. Today, we are releasing the September 2017 Security and Quality Rollup and Security Only Update. This update applies to Windows 7 and later client versions and Windows Server 2008 and later server versions. This update has known issues. Please see them at the bottom of the update. Security This release contains the... <a aria-label=\"read more about .NET Framework September 2017 Security and Quality Rollup\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/09/12/net-framework-september-2017-security-and-quality-rollup/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/09/12/net-framework-september-2017-security-and-quality-rollup/","RawContent":null},{"Title":"The week in .NET – Let’s Encrypt Web App Renewer, Seattle CodeCamp 2017","PublishedOn":"2017-08-29T08:33:21+00:00","CommentsCount":15,"FacebookCount":0,"Summary":"Previous posts: Project File Tools, Maira Wenzel, Mixed Reality in Miami .NET Core 2.0, ASP.NET Core 2.0, Entity Framework 2.0, Visual Studio 2017 Update 3, enterprise Entity Framework Core in Boston Rezoom.SQL, Protobuf in Orlando Open-source project of the week: Let&#8217;s Encrypt Azure Web App Renewer There&#8217;s a growing consensus that all web sites should... <a aria-label=\"read more about The week in .NET &#8211; Let&#8217;s Encrypt Web App Renewer, Seattle CodeCamp 2017\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/08/29/the-week-in-net/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/08/29/the-week-in-net/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"6650451504","Type":"IssuesEvent","CreatedAt":"2017-09-28T16:22:10","Actor":"hughbe","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/issues/87","RelatedDescription":"Opened issue \"PRs to repos outside of dotnet/* pattern should not always thank for signing the CLA\" (#87) at dotnet/home","RelatedBody":"For example: https://github.com/mono/libgdiplus/pull/109\r\n\r\nI have already signed the CLI. On the dotnet/corefx etc. projects, I don't get the extra message:\r\n\r\n```\r\n@hughbe,\r\nThanks for having already signed the Contribution License Agreement. Your agreement was validated by .NET Foundation. We will now review your pull request.\r\nThanks,\r\n.NET Foundation Pull Request Bot\r\n```\r\n\r\nJust a small gripe, as I get an email each time I do this. I've seen this in Mono and Xunit.\r\n\r\n/cc @karelz I know this is unrelated to corefx but maybe you know the right person/repo to route this to :D\r\n"},{"Id":"6515896963","Type":"PullRequestEvent","CreatedAt":"2017-08-26T22:20:18","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/85","RelatedDescription":"Merged pull request \"Create telerik-ui-for-uwp.md\" (#85) at dotnet/home","RelatedBody":"Submission of Telerik UI for UWP"},{"Id":"6515896506","Type":"PullRequestEvent","CreatedAt":"2017-08-26T22:19:49","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/86","RelatedDescription":"Merged pull request \"Corrected list of maintainers\" (#86) at dotnet/home","RelatedBody":""},{"Id":"6483200432","Type":"PullRequestEvent","CreatedAt":"2017-08-18T19:58:41","Actor":"gep13","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/86","RelatedDescription":"Opened pull request \"Corrected list of maintainers\" (#86) at dotnet/home","RelatedBody":""}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"6645912196","Type":"IssuesEvent","CreatedAt":"2017-09-27T19:47:08","Actor":"terrajobst","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/32","RelatedDescription":"Opened issue \".NET Framework 4.7.1 provides built-in support for .NET Standard 2.0\" (#32) at dotnet/announcements","RelatedBody":"## Summary\r\n\r\n.NET Framework 4.7.1 will have built-in support for .NET Standard 2.0. This means that you don't have to deploy any additional files or use binding redirects to use .NET Standard 2.0 libraries.\r\n\r\nFor a demo, check out [this video][video].\r\n\r\n## Details\r\n\r\nWhile libraries targeting [.NET Standard 2.0][ns20post] are can be consumed by applications and libraries [targeting .NET Framework 4.6.1][nstable] and higher, not all files that are required for .NET Standard libraries were part of .NET Framework 4.6.1. In fact, .NET Framework 4.6.1 was shipped before .NET Standard 2.0 was even designed. That's why building an application targeting .NET Framework 4.6.1 (as well as 4.6.2 and 4.7) will have to deploy additional files.\r\n\r\n* If you use **Visual Studio 2017 15.3** or higher, these files are automatically copied to the application's output folder.\r\n\r\n* If you use **Visual Studio 2015 and [use NuGet 3.6][nuget36]**, we'll prompt you to install a [support package][vs2015support] which will handle copying the files to the output directory.\r\n\r\nStarting with .NET Framework 4.7.1 these files no longer have to be deployed with the application -- they are built right into the .NET Framework itself.\r\n\r\n.NET Framework 4.7.1 also adds[about 200 missing APIs][missingapis] that were part of .NET Standard 2.0 but not actually implemented by .NET Framework 4.6.1, 4.6.2 or 4.7.\r\n\r\nThis also removes the need for [binding redirects][netfx-issues] when using .NET Standard libraries on .NET Framework because the CLR automatically unifies version numbers of assemblies that are part of the platform.\r\n\r\nLearn more [by reading the .NET Standard FAQ](http://aka.ms/netstandardfaq).\r\n\r\n## Discussion\r\n\r\nDiscussion\r\n\r\nFor a discussion, please go to dotnet/standard#514.\r\n\r\n[ns20post]: https://blogs.msdn.microsoft.com/dotnet/2017/08/14/announcing-net-standard-2-0/\r\n[nstable]: https://docs.microsoft.com/en-us/dotnet/standard/net-standard\r\n[nuget36]: https://dist.nuget.org/visualstudio-2015-vsix/v3.6.0/NuGet.Tools.vsix\r\n[vs2015support]: https://aka.ms/netstandard-build-support-netfx\r\n[missingapis]: https://github.com/dotnet/standard/blob/master/netstandard/src/ApiCompatBaseline.net461.txt\r\n[netfx-issues]: https://github.com/dotnet/standard/issues/481\r\n[video]: https://www.youtube.com/watch?v=u67Eu_IgEMs\r\n\r\nhttps://github.com/dotnet/standard/issues/514"}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"6700359737","Type":"IssuesEvent","CreatedAt":"2017-10-11T04:09:57","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/14410","RelatedDescription":"Closed issue \"ASPNET CORE 2.0 AND WCF: Could not load file or assembly 'System.ServiceModel, Version=4.0.0.0\" (#14410) at dotnet/coreclr","RelatedBody":"Hello.\r\nI make .Net Core 2.0 application with net standart 2.0. I created WCF application with framework 4.7 and hoated it into Windows Servive by net.tcp. WCF app works fine for console and winforms app. But I can't connect netcore app to wcf.\r\nWCF server and client works without app.config.\r\n\r\nWhen I connect to WCF by WinForm app I use this:\r\n\r\n```\r\nIChat chat = null;\r\nChannelFactory<IChat>` channelFactory = null;\r\nEndpointAddress ep = new EndpointAddress(\"net.tcp://{server}:{port}/Chat/\");\r\nNetTcpBinding tcpb = new NetTcpBinding();\r\n\r\nchannelFactory = new ChannelFactory<IChat>(tcpb); // !!!!!!!!!!!!\r\nchat = channelFactory.CreateChannel(ep);\r\n```\r\n\r\nBut, at my netcore app I can't do it. I must write:\r\n`channelFactory = new ChannelFactory<IChat>(tcpb, ep); // !!!!!!!!!!!`\r\n\r\nI get next error: \r\n`System.InvalidOperationException: An error occurred while loading attribute 'ServiceContractAttribute' on type 'IChat'.  Please see InnerException for more details. ---> System.IO.FileNotFoundException: Could not load file or assembly 'System.ServiceModel, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'. The system cannot find the file specified.`\r\n\r\nHow can I fix it? Please, help."},{"Id":"6700305863","Type":"IssuesEvent","CreatedAt":"2017-10-11T03:46:16","Actor":"303248153","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/14414","RelatedDescription":"Opened issue \"[Question][GCInfo] How StackSlotIdKey.m_offset calculated for gc argument passed by stack?\" (#14414) at dotnet/coreclr","RelatedBody":"When building gc info, there is a slot table contains register variables and stack variables:\r\n\r\n- RegSlotIdKey: register variables\r\n- StackSlotIdKey: stack variables\r\n- StackSlotIdKey: arguments passed by stack\r\n\r\nFor register variables, `RegSlotIdKey.m_offset` and `Slot.RegisterNumber` is register number.\r\nFor stack variables, `StackSlotIdKey.m_offset` and `Slot.Stack.SpOffset` is the offset from `Slot.Stack.Base`.\r\nBut for arguments passed by stack, I don't understand what `StackSlotIdKey.m_offset` means.\r\n\r\nHere is parts of the code from `gcencode.cpp`:\r\n\r\n``` c++\r\nfor (regPtrDsc* genRegPtrTemp = gcRegPtrList; genRegPtrTemp != nullptr; genRegPtrTemp = genRegPtrTemp->rpdNext)\r\n{\r\n\tint nextOffset = genRegPtrTemp->rpdOffs;\r\n\r\n\tif (genRegPtrTemp->rpdArg)\r\n\t{\r\n\t\tif (genRegPtrTemp->rpdArgTypeGet() == rpdARG_KILL)\r\n\t\t{\r\n\t\t\t// Kill all arguments for a call\r\n\t\t\tif ((mode == MAKE_REG_PTR_MODE_DO_WORK) && (regStackArgFirst != nullptr))\r\n\t\t\t{\r\n\t\t\t\t// Record any outgoing arguments as becoming dead\r\n\t\t\t\tgcInfoRecordGCStackArgsDead(gcInfoEncoder, genRegPtrTemp->rpdOffs, regStackArgFirst,\r\n\t\t\t\t\t\t\t\t\t\t\tgenRegPtrTemp);\r\n\t\t\t}\r\n\t\t\tregStackArgFirst = nullptr;\r\n\t\t}\r\n\t\telse if (genRegPtrTemp->rpdGCtypeGet() != GCT_NONE)\r\n\t\t{\r\n\t\t\tif (genRegPtrTemp->rpdArgTypeGet() == rpdARG_PUSH || (genRegPtrTemp->rpdPtrArg != 0))\r\n\t\t\t{\r\n\t\t\t\tbool isPop = genRegPtrTemp->rpdArgTypeGet() == rpdARG_POP;\r\n\t\t\t\tassert(!isPop);\r\n\t\t\t\tgcInfoRecordGCStackArgLive(gcInfoEncoder, mode, genRegPtrTemp);\r\n\t\t\t\tif (regStackArgFirst == nullptr)\r\n\t\t\t\t{\r\n\t\t\t\t\tregStackArgFirst = genRegPtrTemp;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\t// We know it's a POP.  Sometimes we'll record a POP for a call, just to make sure\r\n\t\t\t\t// the call site is recorded.\r\n\t\t\t\t// This is just the negation of the condition:\r\n\t\t\t\tassert(genRegPtrTemp->rpdArgTypeGet() == rpdARG_POP && genRegPtrTemp->rpdPtrArg == 0);\r\n\t\t\t\t// This asserts that we only get here when we're recording a call site.\r\n\t\t\t\tassert(genRegPtrTemp->rpdArg && genRegPtrTemp->rpdIsCallInstr());\r\n\r\n\t\t\t\t// Kill all arguments for a call\r\n\t\t\t\tif ((mode == MAKE_REG_PTR_MODE_DO_WORK) && (regStackArgFirst != nullptr))\r\n\t\t\t\t{\r\n\t\t\t\t\t// Record any outgoing arguments as becoming dead\r\n\t\t\t\t\tgcInfoRecordGCStackArgsDead(gcInfoEncoder, genRegPtrTemp->rpdOffs, regStackArgFirst,\r\n\t\t\t\t\t\t\t\t\t\t\t\tgenRegPtrTemp);\r\n\t\t\t\t}\r\n\t\t\t\tregStackArgFirst = nullptr;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\telse\r\n\t{\r\n\t\t// Record any registers that are becoming dead.\r\n\r\n\t\tregMaskSmall regMask   = genRegPtrTemp->rpdCompiler.rpdDel & ptrRegs;\r\n\t\tregMaskSmall byRefMask = 0;\r\n\t\tif (genRegPtrTemp->rpdGCtypeGet() == GCT_BYREF)\r\n\t\t{\r\n\t\t\tbyRefMask = regMask;\r\n\t\t}\r\n\t\tgcInfoRecordGCRegStateChange(gcInfoEncoder, mode, genRegPtrTemp->rpdOffs, regMask, GC_SLOT_DEAD,\r\n\t\t\t\t\t\t\t\t\t byRefMask, &ptrRegs);\r\n\r\n\t\t// Record any registers that are becoming live.\r\n\t\tregMask   = genRegPtrTemp->rpdCompiler.rpdAdd & ~ptrRegs;\r\n\t\tbyRefMask = 0;\r\n\t\t// As far as I (DLD, 2010) can tell, there's one GCtype for the entire genRegPtrTemp, so if\r\n\t\t// it says byref then all the registers in \"regMask\" contain byrefs.\r\n\t\tif (genRegPtrTemp->rpdGCtypeGet() == GCT_BYREF)\r\n\t\t{\r\n\t\t\tbyRefMask = regMask;\r\n\t\t}\r\n\t\tgcInfoRecordGCRegStateChange(gcInfoEncoder, mode, genRegPtrTemp->rpdOffs, regMask, GC_SLOT_LIVE,\r\n\t\t\t\t\t\t\t\t\t byRefMask, &ptrRegs);\r\n\t}\r\n}\r\n```\r\n\r\nThis code will create slots and add transition for each push and kill(pop),\r\nwhat I didn't understand is `genRegPtrTemp->rpdPtrArg` which `StackSlotIdKey.m_offset` will assign from this value.\r\nAs I saw `rpdPtrArg` is a record of `stack level`, it will always increase or decrease by 1,\r\nwhich mean `esp + rpdPtrArg` won't give us the offset of pushed variable.\r\nI tried use lldb but it never hits here, looks like this code never run on x64 debug or release mode.\r\n\r\nFinally, my question is:\r\n\r\nWhy `StackSlotIdKey.m_offset` for stack variable store offset,\r\nbut `StackSlotIdKey.m_offset` for arguments passed by stack store stack level?\r\n"},{"Id":"6700208331","Type":"PullRequestEvent","CreatedAt":"2017-10-11T03:06:05","Actor":"hseok-oh","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/14413","RelatedDescription":"Opened pull request \"[CI][Linux/x86] Save test native builds in build job\" (#14413) at dotnet/coreclr","RelatedBody":"Fix to save test native build in build job\r\nSaved native builds are used on test job"},{"Id":"6700115792","Type":"PullRequestEvent","CreatedAt":"2017-10-11T02:28:55","Actor":"wtgodbe","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/13795","RelatedDescription":"Merged pull request \"Use new publish mechanism in CoreCLR\" (#13795) at dotnet/coreclr","RelatedBody":"Implementation of https://github.com/karajas/core-eng/blob/a7a0b11360468535c66eaefb4dbdf455f563ceee/Documentation/Project-Docs/Onboard-Feed-Tools.md in CoreCLR. \r\n\r\n@karajas @weshaggard PTAL"},{"Id":"6700096793","Type":"PullRequestEvent","CreatedAt":"2017-10-11T02:20:59","Actor":"hseok-oh","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/14412","RelatedDescription":"Opened pull request \"Fix bug to check xunit result file's directory\" (#14412) at dotnet/coreclr","RelatedBody":"Use dirname instead of basename to check xunit result file's directory existing"},{"Id":"6700040654","Type":"PullRequestEvent","CreatedAt":"2017-10-11T01:58:26","Actor":"sandreenko","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/14411","RelatedDescription":"Opened pull request \"Fix fat pointer call for CoreRT\" (#14411) at dotnet/coreclr","RelatedBody":"Comments and functions headers will be added later.\r\nFix dotnet/corert#4251."},{"Id":"6699977568","Type":"IssuesEvent","CreatedAt":"2017-10-11T01:32:02","Actor":"isegos","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/14410","RelatedDescription":"Opened issue \"Could not load file or assembly 'System.ServiceModel, Version=4.0.0.0\" (#14410) at dotnet/coreclr","RelatedBody":"Hello.\r\nI make .Net Core 2.0 application with net standart 2.0. I created WCF application with framework 4.7 and hoated it into Windows Servive by net.tcp. WCF app works fine for console and winforms app. But I can't connect netcore app to wcf.\r\nWCF server and client works without app.config.\r\n\r\nWhen I connect to WCF by WinForm app I use this:\r\n\r\n```\r\nIChat chat = null;\r\nChannelFactory<IChat>` channelFactory = null;\r\nEndpointAddress ep = new EndpointAddress(\"net.tcp://{server}:{port}/Chat/\");\r\nNetTcpBinding tcpb = new NetTcpBinding();\r\n\r\nchannelFactory = new ChannelFactory<IChat>(tcpb); // !!!!!!!!!!!!\r\nchat = channelFactory.CreateChannel(ep);\r\n```\r\n\r\nBut, at my netcore app I can't do it. I must write:\r\n`channelFactory = new ChannelFactory<IChat>(tcpb, ep); // !!!!!!!!!!!`\r\n\r\nI get next error: \r\n`System.InvalidOperationException: An error occurred while loading attribute 'ServiceContractAttribute' on type 'IChat'.  Please see InnerException for more details. ---> System.IO.FileNotFoundException: Could not load file or assembly 'System.ServiceModel, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'. The system cannot find the file specified.`\r\n\r\nHow can I fix it? Please, help."}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"6700494016","Type":"PullRequestEvent","CreatedAt":"2017-10-11T05:14:29","Actor":"dsplaisted","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/7804","RelatedDescription":"Opened pull request \"Update branch info to release/15.5\" (#7804) at dotnet/cli","RelatedBody":"Some links in the README will be broken until we have a successful 15.5 build after this PR is merged.\r\n\r\n@livarcocc @nguerrera "},{"Id":"6700355472","Type":"PullRequestEvent","CreatedAt":"2017-10-11T04:07:55","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/7803","RelatedDescription":"Merged pull request \"Updating the websdk version to 2.0.0-rel-20171010-665\" (#7803) at dotnet/cli","RelatedBody":"Package available here - https://dotnet.myget.org/feed/dotnet-web/package/nuget/Microsoft.NET.Sdk.Publish/2.0.0-rel-20171010-665\r\n\r\nBug fix: https://github.com/aspnet/websdk/pull/244/files\r\n\r\n@nguerrera @mlorbetske \r\n"},{"Id":"6700352087","Type":"PullRequestEvent","CreatedAt":"2017-10-11T04:06:15","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/7801","RelatedDescription":"Merged pull request \"Insert NuGet Build 4.5.0-preview1-4526 into cli\" (#7801) at dotnet/cli","RelatedBody":"Insert NuGet Build 4.5.0-preview1-4526 into cli release/15.5 branch"},{"Id":"6699705173","Type":"PullRequestEvent","CreatedAt":"2017-10-10T23:41:16","Actor":"vijayrkn","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/7803","RelatedDescription":"Opened pull request \"Updating the websdk version to 2.0.0-rel-20171010-665\" (#7803) at dotnet/cli","RelatedBody":"Package available here - https://dotnet.myget.org/feed/dotnet-web/package/nuget/Microsoft.NET.Sdk.Publish/2.0.0-rel-20171010-665\r\n\r\nBug fix: https://github.com/aspnet/websdk/pull/244/files\r\n\r\n@nguerrera @mlorbetske \r\n"},{"Id":"6699490918","Type":"PullRequestEvent","CreatedAt":"2017-10-10T22:29:01","Actor":"dotnet-bot","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/7802","RelatedDescription":"Opened pull request \"Update CoreSetup to preview1-25810-02 (master)\" (#7802) at dotnet/cli","RelatedBody":"/cc @dotnet/dotnet-cli"},{"Id":"6699443931","Type":"IssuesEvent","CreatedAt":"2017-10-10T22:15:51","Actor":"mbrameld","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/7798","RelatedDescription":"Closed issue \"Make telemetry opt-in instead of opt-out\" (#7798) at dotnet/cli","RelatedBody":"Should be a very simple fix.\r\n"},{"Id":"6699417818","Type":"PullRequestEvent","CreatedAt":"2017-10-10T22:08:35","Actor":"nugetlurker","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/7801","RelatedDescription":"Opened pull request \"Insert NuGet Build 4.5.0-preview1-4526 into cli\" (#7801) at dotnet/cli","RelatedBody":"Insert NuGet Build 4.5.0-preview1-4526 into cli release/15.5 branch"},{"Id":"6699305668","Type":"PullRequestEvent","CreatedAt":"2017-10-10T21:39:37","Actor":"janvorli","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/7799","RelatedDescription":"Merged pull request \"Add RHEL6 leg to the CI\" (#7799) at dotnet/cli","RelatedBody":""},{"Id":"6699217871","Type":"PullRequestEvent","CreatedAt":"2017-10-10T21:18:32","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/pull/7790","RelatedDescription":"Closed pull request \"Merge release/2.0.0 to master\" (#7790) at dotnet/cli","RelatedBody":"\nThis is an automatically generated pull request from release/2.0.0 into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.0.0-to-master-20171009-070028\ngit reset --hard upstream/master\ngit merge upstream/release/2.0.0\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.0.0-to-master-20171009-070028 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"6699351370","Type":"IssuesEvent","CreatedAt":"2017-10-10T21:50:58","Actor":"joshmouch","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/532","RelatedDescription":"Opened issue \"After installed .Net Standard 2.0 and upgrading my projects, now getting exception in Visual Studio\" (#532) at dotnet/standard","RelatedBody":"Earlier today I installed .Net Stand 2.0, and upgrade my projects to use it.  And now I randomly get a pop up in Visual Studio saying there was an exception.  Here is what was logged in the file it generated.\r\n\r\n=====================\r\n10/10/2017 5:41:49 PM\r\nRecoverable\r\nSystem.AggregateException: One or more errors occurred. ---> System.IndexOutOfRangeException: Index was outside the bounds of the array.\r\n   at System.Collections.Generic.Dictionary`2.Insert(TKey key, TValue value, Boolean add)\r\n   at Microsoft.VisualStudio.LanguageServices.Implementation.TaskList.ExternalErrorDiagnosticUpdateSource.InprogressState.SupportedDiagnosticId(ProjectId projectId, String id)\r\n   at Microsoft.VisualStudio.LanguageServices.Implementation.TaskList.ExternalErrorDiagnosticUpdateSource.SupportedDiagnosticId(ProjectId projectId, String id)\r\n   at Microsoft.VisualStudio.LanguageServices.Implementation.TaskList.ProjectExternalErrorReporter.CanHandle(String errorId)\r\n   at Microsoft.VisualStudio.LanguageServices.Implementation.TaskList.ProjectExternalErrorReporter.ReportError2(String bstrErrorMessage, String bstrErrorId, VSTASKPRIORITY nPriority, Int32 iStartLine, Int32 iStartColumn, Int32 iEndLine, Int32 iEndColumn, String bstrFileName)\r\n   at Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.AbstractProject.Microsoft.VisualStudio.Shell.Interop.IVsLanguageServiceBuildErrorReporter2.ReportError2(String bstrErrorMessage, String bstrErrorId, VSTASKPRIORITY nPriority, Int32 iStartLine, Int32 iStartColumn, Int32 iEndLine, Int32 iEndColumn, String bstrFileName)\r\n   at Microsoft.VisualStudio.ProjectSystem.VS.Build.LanguageServiceErrorListProvider.<AddMessageCoreAsync>d__8.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.VisualStudio.ProjectSystem.VS.Implementation.Build.VsProjectBuildErrorListPublishService.<AddMessagesAsync>d__29.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.VisualStudio.ProjectSystem.VS.Implementation.Build.VsProjectBuildErrorListPublishService.<ProcessQueueAsync>d__28.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at Microsoft.VisualStudio.ProjectSystem.CommonProjectSystemTools.Rethrow(Exception ex)\r\n   at Microsoft.VisualStudio.ProjectSystem.ProjectErrorReporting.<>c__DisplayClass6_0.<SubmitErrorReport>b__0()\r\n   at Microsoft.VisualStudio.ProjectSystem.ExceptionFilter.<>c__DisplayClass2_0.<Guard>b__0()\r\n   at GuardMethodClass.GuardMethod(Func`1 , Func`2 , Func`2 )\r\n   --- End of inner exception stack trace ---\r\n---> (Inner Exception #0) System.IndexOutOfRangeException: Index was outside the bounds of the array.\r\n   at System.Collections.Generic.Dictionary`2.Insert(TKey key, TValue value, Boolean add)\r\n   at Microsoft.VisualStudio.LanguageServices.Implementation.TaskList.ExternalErrorDiagnosticUpdateSource.InprogressState.SupportedDiagnosticId(ProjectId projectId, String id)\r\n   at Microsoft.VisualStudio.LanguageServices.Implementation.TaskList.ExternalErrorDiagnosticUpdateSource.SupportedDiagnosticId(ProjectId projectId, String id)\r\n   at Microsoft.VisualStudio.LanguageServices.Implementation.TaskList.ProjectExternalErrorReporter.CanHandle(String errorId)\r\n   at Microsoft.VisualStudio.LanguageServices.Implementation.TaskList.ProjectExternalErrorReporter.ReportError2(String bstrErrorMessage, String bstrErrorId, VSTASKPRIORITY nPriority, Int32 iStartLine, Int32 iStartColumn, Int32 iEndLine, Int32 iEndColumn, String bstrFileName)\r\n   at Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.AbstractProject.Microsoft.VisualStudio.Shell.Interop.IVsLanguageServiceBuildErrorReporter2.ReportError2(String bstrErrorMessage, String bstrErrorId, VSTASKPRIORITY nPriority, Int32 iStartLine, Int32 iStartColumn, Int32 iEndLine, Int32 iEndColumn, String bstrFileName)\r\n   at Microsoft.VisualStudio.ProjectSystem.VS.Build.LanguageServiceErrorListProvider.<AddMessageCoreAsync>d__8.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.VisualStudio.ProjectSystem.VS.Implementation.Build.VsProjectBuildErrorListPublishService.<AddMessagesAsync>d__29.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.VisualStudio.ProjectSystem.VS.Implementation.Build.VsProjectBuildErrorListPublishService.<ProcessQueueAsync>d__28.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at Microsoft.VisualStudio.ProjectSystem.CommonProjectSystemTools.Rethrow(Exception ex)\r\n   at Microsoft.VisualStudio.ProjectSystem.ProjectErrorReporting.<>c__DisplayClass6_0.<SubmitErrorReport>b__0()\r\n   at Microsoft.VisualStudio.ProjectSystem.ExceptionFilter.<>c__DisplayClass2_0.<Guard>b__0()\r\n   at GuardMethodClass.GuardMethod(Func`1 , Func`2 , Func`2 )<---"},{"Id":"6694208094","Type":"IssuesEvent","CreatedAt":"2017-10-10T00:19:47","Actor":"danmosemsft","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/524","RelatedDescription":"Closed issue \"After the final release of .Net Standard 2.0 and .Net Core 2.0, what are the missing 43 API that not implemented in net461?\" (#524) at dotnet/standard","RelatedBody":"I read the discussion:\r\n[Understanding why there is no cleaner way than .NET Framework 4.6.1 supporting .NET Standard 2.0 #133](https://github.com/dotnet/standard/issues/133) and \r\n[What are the 43 APIs that are in .Net Standard 2.0 but not in .Net Framework 4.6.1?](https://stackoverflow.com/questions/43601101/what-are-the-43-apis-that-are-in-net-standard-2-0-but-not-in-net-framework-4-6)\r\nAnd find that these 43 API are not documented anywhere on the Internet, so I ask:\r\n\r\n- What are the missing 43 API that is not implemented in net461?\r\n- How to avoid their usage in net461 (before firing exceptions in unit test)?\r\n- Can we get a browser like [.NET API Browser](https://docs.microsoft.com/en-us/dotnet/api/) or tool in github  that mention frankly these API?\r\n- Can  multi target project (netstandard2,net461) protect against the usage of these 43 API?\r\n"}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"6700502913","Type":"PullRequestEvent","CreatedAt":"2017-10-11T05:18:37","Actor":"dotnet-maestro-bot","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/24569","RelatedDescription":"Opened pull request \"Update ProjectNTfs, ProjectNTfsTestILC to beta-25811-00, beta-25811-00, respectively (master)\" (#24569) at dotnet/corefx","RelatedBody":""},{"Id":"6700291760","Type":"PullRequestEvent","CreatedAt":"2017-10-11T03:40:11","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/24511","RelatedDescription":"Merged pull request \"Avoid assert failure due to incorrect bytes written returned\" (#24511) at dotnet/corefx","RelatedBody":"Workaround for https://github.com/dotnet/corefx/issues/24508\r\n\r\nThis is likely not the long term fix but it stops it failing on my machine. Per #24508, it probably should handle the case where it does not write all the bytes."},{"Id":"6700290041","Type":"PullRequestEvent","CreatedAt":"2017-10-11T03:39:28","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/24515","RelatedDescription":"Merged pull request \"Update System.Net.Http to use Memory-based Stream methods\" (#24515) at dotnet/corefx","RelatedBody":"- Overrides Read/WriteAsync(Memory, ...) on streams\r\n- Updates calls where relevant to use ReadAsync(Memory, ...) to avoid task allocation when possible\r\n- Removed NET46 #ifdefs in files I was touching\r\n\r\nFixes https://github.com/dotnet/corefx/issues/22396\r\ncc: @geoffkizer, @davidsh"},{"Id":"6700290024","Type":"IssuesEvent","CreatedAt":"2017-10-11T03:39:27","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/22396","RelatedDescription":"Closed issue \"Override new Span/Buffer-based APIs on streams used in System.Net.Http\" (#22396) at dotnet/corefx","RelatedBody":"Dependent on #22381."},{"Id":"6700275180","Type":"IssuesEvent","CreatedAt":"2017-10-11T03:33:22","Actor":"ahsonkhan","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/24568","RelatedDescription":"Opened issue \"Add Base64 conversion APIs that support UTF-8 for Span<T> \" (#24568) at dotnet/corefx","RelatedBody":"## Rationale\r\nThese API allows for encoding of a Span\\<byte\\> into UTF-8 Base64 encoded span (binary to text operation) and decoding of a UTF-8 Base64 encoded span to Span\\<byte\\> (text to binary operation). They APIs will be used by SignalR (for example [here](https://github.com/SignalR/SignalR/blob/master/src/Microsoft.AspNet.SignalR.Core/Infrastructure/DefaultProtectedData.cs#L22), [here](https://github.com/SignalR/SignalR/blob/master/src/Microsoft.AspNet.SignalR.Core/Infrastructure/DataProtectionProviderProtectedData.cs#L40), and [here](https://github.com/aspnet/SignalR/blob/dev/src/Microsoft.AspNetCore.SignalR.Common/Internal/Encoders/Base64Encoder.cs)).\r\n\r\nA prototype of the API is available in corefxlab: \r\nhttps://github.com/dotnet/corefxlab/tree/master/src/System.Binary.Base64\r\n\r\n## Usage\r\n\r\nFor valid input data:\r\n```C#\r\nSpan<byte>input; // input buffer to be encoded containing binary data\r\nSpan<byte> encodedBytes = new byte[Base64.BytesToUtf8Length(input.Length)];\r\nOperationStatus status = Base64.BytesToUtf8(input, encodedBytes, out int consumed, out int encodedBytesCount);\r\n// status == OperationStatus.Done\r\n// encodedBytes.Length == encodedBytesCount\r\n// consumed == input.Length\r\n```\r\n```C#\r\nSpan<byte>input; // input buffer to be decoded containing textual data\r\nSpan<byte> decodedBytes = new byte[Base64.Utf8ToBytesLength(input)];\r\nOperationStatus status = Base64.Utf8ToBytes(input, decodedBytes, out int consumed, out int decodedByteCount);\r\n// status == OperationStatus.Done\r\n// decodedBytes.Length == decodedByteCount\r\n// consumed == input.Length\r\n```\r\n\r\nUsing these new APIs, we can take the following code snippet (from [here](https://github.com/aspnet/SignalR/blob/dev/src/Microsoft.AspNetCore.SignalR.Common/Internal/Encoders/Base64Encoder.cs)):\r\n```C#\r\npublic byte[] Decode(byte[] payload)\r\n{\r\n    var buffer = new ReadOnlyBuffer<byte>(payload);\r\n    LengthPrefixedTextMessageParser.TryParseMessage(ref buffer, out var message);\r\n\r\n    return Convert.FromBase64String(Encoding.UTF8.GetString(message.ToArray()));\r\n}\r\n```\r\nAnd re-write it as follows (if we want to keep the input/output as byte arrays):\r\n```C#\r\npublic byte[] Decode(byte[] payload)\r\n{\r\n    var buffer = new ReadOnlyBuffer<byte>(payload);\r\n    LengthPrefixedTextMessageParser.TryParseMessage(ref buffer, out var message);\r\n    \r\n    // assume message.Span is UTF-8 encoded (for instance, using the upcoming UTF8 encoder APIs)\r\n    Span<byte> bytes = new byte[Utf8ToBytesLength(message.Span)];\r\n    Base64.Utf8ToBytes(message.Span, bytes, out int consumed, out int written);\r\n    return bytes.ToArray();\r\n}\r\n```\r\nFor potentially invalid (or incomplete) input, the user can check the returned status. For example, change the above code as follows:\r\n```C#\r\n    Span<byte> bytes = new byte[Utf8ToBytesLength(message.Span)];\r\n    OperationStatus status = Base64.Utf8ToBytes(message.Span, bytes, out int consumed, out int written);\r\n    return status == OperationStatus.Done ? bytes.ToArray() : <user-defined behavior>;\r\n}\r\n```\r\n\r\n## Proposed API\r\n```C#\r\n// System.Memory.dll\r\nnamespace System.Buffers.Text {\r\n    public static class Base64 {\r\n        public static readonly BufferDecoder Utf8ToBytesDecoder;\r\n        public static readonly BufferEncoder BytesToUtf8Encoder;\r\n        public static OperationStatus BytesToUtf8(ReadOnlySpan<byte> bytes, Span<byte> utf8, out int consumed, out int written);\r\n        public static OperationStatus BytesToUtf8InPlace(Span<byte> buffer, int bytesLength, out int written);\r\n        public static int BytesToUtf8Length(int bytesLength);\r\n        public static OperationStatus Utf8ToBytes(ReadOnlySpan<byte> utf8, Span<byte> bytes, out int consumed, out int written);\r\n        public static OperationStatus Utf8ToBytesInPlace(Span<byte> buffer, out int consumed, out int written);\r\n        public static int Utf8ToBytesLength(ReadOnlySpan<byte> utf8);\r\n    }\r\n}\r\nnamespace System.Buffers {\r\n    public abstract class BufferDecoder : IBufferOperation {\r\n        protected BufferDecoder();\r\n        public virtual bool IsDecodeInPlaceSupported { get; }\r\n        public abstract OperationStatus Decode(ReadOnlySpan<byte> input, Span<byte> output, out int consumed, out int written);\r\n        public virtual OperationStatus DecodeInPlace(Span<byte> buffer, int inputLength, out int written);\r\n        public override bool Equals(object obj);\r\n        public override int GetHashCode();\r\n        OperationStatus System.Buffers.IBufferOperation.Execute(ReadOnlySpan<byte> input, Span<byte> output, out int consumed, out int written);\r\n        public override string ToString();\r\n    }\r\n    public abstract class BufferEncoder : IBufferOperation {\r\n        protected BufferEncoder();\r\n        public virtual bool IsEncodeInPlaceSupported { get; }\r\n        public abstract OperationStatus Encode(ReadOnlySpan<byte> input, Span<byte> output, out int consumed, out int written);\r\n        public virtual OperationStatus EncodeInPlace(Span<byte> buffer, int inputLength, out int written);\r\n        public override bool Equals(object obj);\r\n        public override int GetHashCode();\r\n        OperationStatus System.Buffers.IBufferOperation.Execute(ReadOnlySpan<byte> input, Span<byte> output, out int consumed, out int written);\r\n        public override string ToString();\r\n    }\r\n    public interface IBufferOperation {\r\n        OperationStatus Execute(ReadOnlySpan<byte> input, Span<byte> output, out int consumed, out int written);\r\n    }\r\n```\r\n**Note:** OperationStatus is the same as TransformationStatus (https://github.com/dotnet/corefx/issues/22412).\r\n\r\ncc @KrzysztofCwalina, @GrabYourPitchforks, @davidfowl, @terrajobst, @karelz "},{"Id":"6700260219","Type":"IssuesEvent","CreatedAt":"2017-10-11T03:27:31","Actor":"FDUdannychen","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/24567","RelatedDescription":"Opened issue \"Long path issue in Directory.CreateDirectory\" (#24567) at dotnet/corefx","RelatedBody":"I found strange behaviors in `Directory.CreateDirectory` in my .net core app. My test code looks like:\r\n```\r\nvar length255 = new string(Enumerable.Repeat('a', byte.MaxValue).ToArray());\r\n\r\nvar lastLength = 225;\r\nvar last = new string(Enumerable.Repeat('a', lastLength).ToArray());\r\n\r\nvar path = Path.Combine(@\"D:\\\", Path.Combine(Enumerable.Repeat(length255, 127).ToArray()), last);            \r\n            \r\ntry\r\n{\r\n    Console.WriteLine(path.Length);\r\n    Directory.CreateDirectory(path);\r\n}\r\ncatch (Exception e)\r\n{\r\n    Console.WriteLine(e.GetType());\r\n    Console.WriteLine(Directory.Exists(path));\r\n}\r\n```\r\nI change the value of `lastLength` a few times, here is the question:\r\nQ1: `lastLength = 224, path.Length = 32739` everything is working fine. What's the magic of 32739? \r\n\r\nQ2: '225 <= lastLength <= 247, 32740 <= path.Length <= 32762` throws `System.IO.PathTooLongException`, meanwhile `Directory.Exists` prints `False`. However I can see the first few level directories are created(not all directories), which means the creation is partially done with an exception. Why?\r\n\r\nQ3:  '248 <= lastLength <= 251, 32763 <= path.Length <= 32766` cases are almost the same as those in Q2, except the exception is `System.IO.DirectoryNotFoundException`, why?\r\n\r\n`lastLength > = 252, path.Length >= 32767 fails with `System.IO.PathTooLongException`, no directory is created, which is as expected.\r\n\r\n"},{"Id":"6700204142","Type":"IssuesEvent","CreatedAt":"2017-10-11T03:04:26","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/24472","RelatedDescription":"Closed issue \"HttpClient post request throws exception \"Couldn't connect to server\" in ubuntu server\" (#24472) at dotnet/corefx","RelatedBody":"The deployment I'm doing in ubuntu server in pair of Kestrel, Nginx e.t.c.\r\nAll the steps from this documentation: https://docs.microsoft.com/en-us/aspnet/core/publishing/linuxproduction?tabs=aspnetcore2x\r\n\r\n**Ubuntu information:**\r\nDistributor ID: Ubuntu\r\nDescription: Ubuntu 16.04.3 LTS\r\nRelease: 16.04\r\nCodename:  xenial\r\n\r\n\r\nSo, the problem as I see from the stack trace is exactly on the HttpClient initialization .cs line 34\r\n\r\n> Oct 06 05:43:12 smsassist smsassistservice[21050]:          at SmsAssistKitchen.Managers.AccountManager.<RegisterAsync>d__2.MoveNext() in D:\\Startup projects\\smsassistservice\\SmsAssistKitchen\\SmsAssistKitchen\\Managers\\AccountManager.cs:line 34\r\n\r\n**Full stack trace:**\r\n> -- Logs begin at Thu 2017-10-05 11:34:12 UTC. --\r\n> Oct 06 05:43:12 smsassist smsassistservice[21050]:          at System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1.ConfiguredTaskAwaiter.GetResult()\r\n> Oct 06 05:43:12 smsassist smsassistservice[21050]:          at System.Net.Http.HttpClient.<FinishSendAsyncBuffered>d__58.MoveNext()\r\n> Oct 06 05:43:12 smsassist smsassistservice[21050]:       --- End of stack trace from previous location where exception was thrown ---\r\n> Oct 06 05:43:12 smsassist smsassistservice[21050]:          at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n> Oct 06 05:43:12 smsassist smsassistservice[21050]:          at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n> Oct 06 05:43:12 smsassist smsassistservice[21050]:          at SmsAssistKitchen.Managers.AccountManager.<RegisterAsync>d__2.MoveNext() in D:\\Startup projects\\smsassistservice\\SmsAssistKitchen\\SmsAssistKitchen\\Managers\\AccountManager.cs:line 34\r\n> Oct 06 05:43:12 smsassist smsassistservice[21050]:       --- End of stack trace from previous location where exception was thrown ---\r\n> Oct 06 05:43:12 smsassist smsassistservice[21050]:          at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n> Oct 06 05:43:12 smsassist smsassistservice[21050]:          at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n> Oct 06 05:43:12 smsassist smsassistservice[21050]:          at SmsAssistKitchen.Controllers.AccountController.<Register>d__5.MoveNext() in D:\\Startup projects\\smsassistservice\\SmsAssistKitchen\\SmsAssistKitchen\\Controllers\\AccountController.cs:line 129\r\n> \r\n\r\n**Here is example how I'm doing the request**:\r\n\r\nThis static method is placed in static class so called AccountManager and this method is doing post request to another service to register an account.\r\nThis method is invoked from the post async controller you can see it a little below\r\n\r\n```\r\npublic static async Task<HttpResponseMessage> RegisterAsync(AccountModel account)\r\n        {\r\n            using (var httpClient = new HttpClient())\r\n                {\r\n                    var jsonEntity = JsonConvert.SerializeObject(account);\r\n                    var content = new StringContent(jsonEntity, Encoding.UTF8);\r\n                    content.Headers.ContentType = new MediaTypeHeaderValue(\"application/json\");\r\n                    var response = await httpClient.PostAsync(\"http://127.0.0.1:8080/account/register\", content);\r\n                    return response;\r\n                }     \r\n        }\r\n```\r\n\r\n```\r\n[HttpPost]\r\n        public async Task<ActionResult> Register(AccountModel account)\r\n        {\r\n            try\r\n            {\r\n                logger.LogDebug(\"ModelState is valid? {0}\", ModelState.IsValid);\r\n\r\n                if (!ModelState.IsValid)\r\n                {\r\n                    logger.LogDebug(\"Going to response with a json result\");\r\n                    Response.StatusCode = (int)HttpStatusCode.Conflict;\r\n                    var jsonResult = new JsonResult(JsonConvert.SerializeObject(new RegistrationResponseModel { Message = \"Model state is invalid\" }));\r\n                    logger.LogDebug(\"Json result with serialized object. {0}\", jsonResult.Value);\r\n                    return jsonResult;\r\n                }\r\n\r\n                logger.LogDebug(\"Going to register new account {0}\", account.Email);\r\n                var responseMessage = await AccountManager.RegisterAsync(logger, account);\r\n\r\n                logger.LogDebug(\"Response for account registration is: \");\r\n                logger.LogDebug(\"StatusCode: {0}\", responseMessage.StatusCode.ToString());\r\n                logger.LogDebug(\"ReasonPhrase: {0}\", responseMessage.ReasonPhrase);\r\n                logger.LogDebug(\"IsSuccessStatusCode: {0}\", responseMessage.IsSuccessStatusCode);\r\n           \r\n                switch (responseMessage.StatusCode)\r\n                {\r\n                    case HttpStatusCode.OK:\r\n                        {\r\n                            var content = await responseMessage.Content.ReadAsStringAsync();\r\n                            var responseModel = JsonConvert.DeserializeObject<RegistrationResponseModel>(content);\r\n\r\n                            HttpContext.Session.Set(\"access.token\", Encoding.UTF8.GetBytes(responseModel.AccessToken.TokenString));\r\n\r\n                            Response.StatusCode = (int)HttpStatusCode.OK;\r\n\r\n                            var jsonResult = new JsonResult(JsonConvert.SerializeObject(new RegistrationResponseModel\r\n                            {\r\n                                Message = responseModel.Message,\r\n                                AccessToken = responseModel.AccessToken\r\n                            }));\r\n\r\n                            return jsonResult;\r\n                        }\r\n\r\n                    case HttpStatusCode.Conflict:\r\n                        {\r\n                            var content = await responseMessage.Content.ReadAsStringAsync();\r\n\r\n                            var responseModel = JsonConvert.DeserializeObject<RegistrationResponseModel>(content);\r\n\r\n                            Response.StatusCode = (int)HttpStatusCode.Conflict;\r\n\r\n                            var jsonResult = new JsonResult(JsonConvert.SerializeObject(new RegistrationResponseModel\r\n                            {\r\n                                Message = responseModel.Message,\r\n                                AccessToken = responseModel.AccessToken\r\n                            }));\r\n\r\n                            return jsonResult;\r\n                        }\r\n\r\n                    default:\r\n                        {\r\n                            var content = await responseMessage.Content.ReadAsStringAsync();\r\n\r\n                            var responseModel = JsonConvert.DeserializeObject<RegistrationResponseModel>(content);\r\n\r\n                            Response.StatusCode = (int)HttpStatusCode.InternalServerError;\r\n\r\n                            var jsonResult = new JsonResult(JsonConvert.SerializeObject(new RegistrationResponseModel\r\n                            {\r\n                                Message = responseModel.Message,\r\n                                AccessToken = responseModel.AccessToken\r\n                            }));\r\n\r\n                            return jsonResult;\r\n                        }\r\n                }\r\n            }\r\n            catch (Exception e)\r\n            {\r\n                logger.LogError(\"Was thrown an exception {0}\", e.ToString());\r\n\r\n                logger.LogDebug(\"Going to response with a json result\");\r\n\r\n                Response.StatusCode = (int)HttpStatusCode.InternalServerError;\r\n\r\n                var jsonResult = new JsonResult(JsonConvert.SerializeObject(new RegistrationResponseModel\r\n                {\r\n                    Message = e.Message,\r\n                    AccessToken = null\r\n                }));\r\n\r\n                logger.LogDebug(\"Json result with serialized object. {0}\", jsonResult.Value);\r\n\r\n                return jsonResult;\r\n            }\r\n        }\r\n```\r\n\r\n\r\n\r\n"},{"Id":"6700197629","Type":"IssuesEvent","CreatedAt":"2017-10-11T03:01:52","Actor":"Jiayili1","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/24566","RelatedDescription":"Opened issue \"System.Net.Sockets.Tests.IPPacketInformationTest.Equals_NonDefaultValue_Success failed with \"Xunit.Sdk.TrueException\"\" (#24566) at dotnet/corefx","RelatedBody":"     System.Net.Sockets.Tests.IPPacketInformationTest.Equals_NonDefaultValue_Success [FAIL]\r\n18:26:35         Assert.True() Failure\r\n18:26:35         Expected: True\r\n18:26:35         Actual:   False\r\n18:26:35         Stack Trace:\r\n18:26:35   downloaded dumpling.py\r\n18:26:35   total elapsed time 0:00:00.156276\r\n18:26:35   downloaded dumpling.py\r\n18:26:35   total elapsed time 0:00:00.155070\r\n18:26:35            /Users/dotnet-bot/j/workspace/dotnet_corefx/master/osx10.12_release/src/System.Net.Sockets/tests/FunctionalTests/IPPacketInformationTest.cs(76,0): at System.Net.Sockets.Tests.IPPacketInformationTest.GetNonDefaultIPPacketInformation()\r\n18:26:35            /Users/dotnet-bot/j/workspace/dotnet_corefx/master/osx10.12_release/src/System.Net.Sockets/tests/FunctionalTests/IPPacketInformationTest.cs(32,0): at System.Net.Sockets.Tests.IPPacketInformationTest.Equals_NonDefaultValue_Success()\r\n\r\nConfiguration: osx10.12_release\r\n\r\nDetail: https://ci.dot.net/job/dotnet_corefx/job/master/job/osx10.12_release/3312/\r\n\r\nDetail: https://ci.dot.net/job/dotnet_corefx/job/master/job/osx10.12_release/3312/consoleFull#-14347295752d31e50d-1517-49fc-92b3-2ca637122019"}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"6700501747","Type":"PullRequestEvent","CreatedAt":"2017-10-11T05:18:06","Actor":"KevinH-MS","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/22655","RelatedDescription":"Opened pull request \"Update ibc training data again (d15prerel 27010.3001)...\" (#22655) at dotnet/roslyn","RelatedBody":"**Customer scenario**\r\n\r\nWhat does the customer do to get into this situation, and why do we think this\r\nis common enough to address for this release.  (Granted, sometimes this will be\r\nobvious \"Open project, VS crashes\" but in general, I need to understand how\r\ncommon a scenario is)\r\n\r\n**Bugs this fixes:**\r\n\r\n(either VSO or GitHub links)\r\n\r\n**Workarounds, if any**\r\n\r\nAlso, why we think they are insufficient for RC vs. RC2, RC3, or RTW\r\n\r\n**Risk**\r\n\r\nThis is generally a measure our how central the affected code is to adjacent\r\nscenarios and thus how likely your fix is to destabilize a broader area of code\r\n\r\n**Performance impact**\r\n\r\n(with a brief justification for that assessment (e.g. \"Low perf impact because no extra allocations/no complexity changes\" vs. \"Low\")\r\n\r\n**Is this a regression from a previous update?**\r\n\r\n**Root cause analysis:**\r\n\r\nHow did we miss it?  What tests are we adding to guard against it in the future?\r\n\r\n**How was the bug found?**\r\n\r\n(E.g. customer reported it vs. ad hoc testing)\r\n\r\n**Test documentation updated?**\r\n\r\nIf this is a new non-compiler feature or a significant improvement to an existing feature, update https://github.com/dotnet/roslyn/wiki/Manual-Testing once you know which release it is targeting.\r\n"},{"Id":"6700499233","Type":"PullRequestEvent","CreatedAt":"2017-10-11T05:16:53","Actor":"KevinH-MS","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/pull/21940","RelatedDescription":"Closed pull request \"Update ibc training data (collected on d15prerel.26824.3000)...\" (#21940) at dotnet/roslyn","RelatedBody":"**Customer scenario**\r\n\r\nWhat does the customer do to get into this situation, and why do we think this\r\nis common enough to address for this release.  (Granted, sometimes this will be\r\nobvious \"Open project, VS crashes\" but in general, I need to understand how\r\ncommon a scenario is)\r\n\r\n**Bugs this fixes:**\r\n\r\n(either VSO or GitHub links)\r\n\r\n**Workarounds, if any**\r\n\r\nAlso, why we think they are insufficient for RC vs. RC2, RC3, or RTW\r\n\r\n**Risk**\r\n\r\nThis is generally a measure our how central the affected code is to adjacent\r\nscenarios and thus how likely your fix is to destabilize a broader area of code\r\n\r\n**Performance impact**\r\n\r\n(with a brief justification for that assessment (e.g. \"Low perf impact because no extra allocations/no complexity changes\" vs. \"Low\")\r\n\r\n**Is this a regression from a previous update?**\r\n\r\n**Root cause analysis:**\r\n\r\nHow did we miss it?  What tests are we adding to guard against it in the future?\r\n\r\n**How was the bug found?**\r\n\r\n(E.g. customer reported it vs. ad hoc testing)\r\n\r\n**Test documentation updated?**\r\n\r\nIf this is a new non-compiler feature or a significant improvement to an existing feature, update https://github.com/dotnet/roslyn/wiki/Manual-Testing once you know which release it is targeting.\r\n"},{"Id":"6700375148","Type":"IssuesEvent","CreatedAt":"2017-10-11T04:17:13","Actor":"SergeyTeplyakov","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/22654","RelatedDescription":"Opened issue \"Suboptimal code for type pattern matching in a switch statement\" (#22654) at dotnet/roslyn","RelatedBody":"The compiler is smart enough to group different clauses with the same type together:\r\n\r\n```csharp\r\npublic void SwitchBasedPatternMatching2(object o)\r\n{\r\n    switch (o)\r\n    {\r\n        case int n when n == 1:\r\n            Console.WriteLine(\"1\"); break;\r\n        case int n when n == 2:\r\n            Console.WriteLine(\"2\"); break;\r\n        case string s:\r\n            Console.WriteLine(\"s\"); break;\r\n    }\r\n}\r\n```\r\n\r\nThe generated code roughly looks like this:\r\n\r\n```csharp\r\npublic void SwitchBasedPatternMatching2(object o)\r\n{\r\n    if ( o != null)\r\n    {\r\n        bool isInt = o is int;\r\n        int num = isInt ? ((int)o) : 0;\r\n        if (isInt)\r\n        {\r\n            if (num == 1)\r\n            {\r\n                Console.WriteLine(\"1\");\r\n                return;\r\n            }\r\n            if (num == 2)\r\n            {\r\n                Console.WriteLine(\"2\");\r\n                return;\r\n            }\r\n        }\r\n        string text;\r\n        if ((text = (o as string)) != null)\r\n        {\r\n            Console.WriteLine(\"s\");\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nIt means that the type is checked two types and if the `o` is `int` then the unboxing operation happens once with two exclusive checks.\r\n\r\nBut if the cases clauses intermixed with each other, then the code is not that optimal:\r\n\r\n```csharp\r\npublic void SwitchBasedPatternMatching(object o)\r\n{\r\n    switch (o)\r\n    {\r\n        case int n when n == 1:\r\n            Console.WriteLine(\"1\"); break;\r\n        case string s:\r\n            Console.WriteLine(\"s\"); break;\r\n        case int n when n == 2:\r\n            Console.WriteLine(\"2\"); break;\r\n    }\r\n}\r\n```\r\n\r\nIn this case, the generated code checks that `o` is `int` two times:\r\n\r\npublic void SwitchBasedPatternMatching(object o)\r\n{\r\n    if (o != null)\r\n    {\r\n        bool isInt1 = o is int;\r\n        int num = isInt1 ? ((int)o) : 0;\r\n        if (isInt1 && num == 1)\r\n        {\r\n            Console.WriteLine(\"1\");\r\n            return;\r\n        }\r\n        string text;\r\n        if ((text = (o as string)) != null)\r\n        {\r\n            Console.WriteLine(\"s\");\r\n            return;\r\n        }\r\n        bool isInt2 = o is int;\r\n        num = (isInt2 ? ((int)o) : 0);\r\n        if (isInt2 && num == 2)\r\n        {\r\n            Console.WriteLine(\"2\");\r\n        }\r\n    }\r\n}\r\n\r\nIt is clear that the order of the case clauses matters know. But I can't see why the compiler can't group different cases together based on a type and generate effectively the same code as for the case before.\r\n\r\nIs there a use case when this optimization will have an observable side effect or there is a room for optimization here?"},{"Id":"6700043013","Type":"IssuesEvent","CreatedAt":"2017-10-11T01:59:28","Actor":"heejaechang","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/22196","RelatedDescription":"Reopened issue \"[IOperation] Single Line Lambda Expressions have an extra block statement\" (#22196) at dotnet/roslyn","RelatedBody":"```VB.NET\r\nDim a As Action = Sub()\r\n                      Console.WriteLine()\r\n                  End Sub\r\n```\r\n```\r\nIDelegateCreationExpression (OperationKind.DelegateCreationExpression, Type: System.Action) (Syntax: 'Sub()'BIND: ... End Sub')\r\n  Target: IAnonymousFunctionExpression (Symbol: Sub ()) (OperationKind.AnonymousFunctionExpression, Type: null) (Syntax: 'Sub()'BIND: ... End Sub')\r\n      IBlockStatement (3 statements) (OperationKind.BlockStatement) (Syntax: 'Sub()'BIND: ... End Sub')\r\n        IExpressionStatement (OperationKind.ExpressionStatement) (Syntax: 'Console.WriteLine()')\r\n          Expression: IInvocationExpression (Sub System.Console.WriteLine()) (OperationKind.InvocationExpression, Type: System.Void) (Syntax: 'Console.WriteLine()')\r\n              Instance Receiver: null\r\n              Arguments(0)\r\n        ILabeledStatement (Label: exit) (OperationKind.LabeledStatement) (Syntax: 'End Sub')\r\n          Statement: null\r\n        IReturnStatement (OperationKind.ReturnStatement) (Syntax: 'End Sub')\r\n          ReturnedValue: null\r\n```\r\n```VB.NET\r\nDim a As Action = Sub() Console.WriteLine()\r\n```\r\n```\r\nIDelegateCreationExpression (OperationKind.DelegateCreationExpression, Type: System.Action) (Syntax: 'Sub() Conso ... WriteLine()')\r\n  Target: IAnonymousFunctionExpression (Symbol: Sub ()) (OperationKind.AnonymousFunctionExpression, Type: null) (Syntax: 'Sub() Conso ... WriteLine()')\r\n      IBlockStatement (3 statements) (OperationKind.BlockStatement) (Syntax: 'Sub() Conso ... WriteLine()')\r\n        IBlockStatement (1 statements) (OperationKind.BlockStatement) (Syntax: 'Sub() Conso ... WriteLine()')\r\n          IExpressionStatement (OperationKind.ExpressionStatement) (Syntax: 'Console.WriteLine()')\r\n            Expression: IInvocationExpression (Sub System.Console.WriteLine()) (OperationKind.InvocationExpression, Type: System.Void) (Syntax: 'Console.WriteLine()')\r\n                Instance Receiver: null\r\n                Arguments(0)\r\n        ILabeledStatement (Label: exit) (OperationKind.LabeledStatement) (Syntax: 'Sub() Conso ... WriteLine()')\r\n          Statement: null\r\n        IReturnStatement (OperationKind.ReturnStatement) (Syntax: 'Sub() Conso ... WriteLine()')\r\n          ReturnedValue: null\r\n```\r\n\r\nNote the extra IBlockStatement in the single line version. This should not be there."},{"Id":"6700042842","Type":"IssuesEvent","CreatedAt":"2017-10-11T01:59:23","Actor":"heejaechang","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/22196","RelatedDescription":"Closed issue \"[IOperation] Single Line Lambda Expressions have an extra block statement\" (#22196) at dotnet/roslyn","RelatedBody":"```VB.NET\r\nDim a As Action = Sub()\r\n                      Console.WriteLine()\r\n                  End Sub\r\n```\r\n```\r\nIDelegateCreationExpression (OperationKind.DelegateCreationExpression, Type: System.Action) (Syntax: 'Sub()'BIND: ... End Sub')\r\n  Target: IAnonymousFunctionExpression (Symbol: Sub ()) (OperationKind.AnonymousFunctionExpression, Type: null) (Syntax: 'Sub()'BIND: ... End Sub')\r\n      IBlockStatement (3 statements) (OperationKind.BlockStatement) (Syntax: 'Sub()'BIND: ... End Sub')\r\n        IExpressionStatement (OperationKind.ExpressionStatement) (Syntax: 'Console.WriteLine()')\r\n          Expression: IInvocationExpression (Sub System.Console.WriteLine()) (OperationKind.InvocationExpression, Type: System.Void) (Syntax: 'Console.WriteLine()')\r\n              Instance Receiver: null\r\n              Arguments(0)\r\n        ILabeledStatement (Label: exit) (OperationKind.LabeledStatement) (Syntax: 'End Sub')\r\n          Statement: null\r\n        IReturnStatement (OperationKind.ReturnStatement) (Syntax: 'End Sub')\r\n          ReturnedValue: null\r\n```\r\n```VB.NET\r\nDim a As Action = Sub() Console.WriteLine()\r\n```\r\n```\r\nIDelegateCreationExpression (OperationKind.DelegateCreationExpression, Type: System.Action) (Syntax: 'Sub() Conso ... WriteLine()')\r\n  Target: IAnonymousFunctionExpression (Symbol: Sub ()) (OperationKind.AnonymousFunctionExpression, Type: null) (Syntax: 'Sub() Conso ... WriteLine()')\r\n      IBlockStatement (3 statements) (OperationKind.BlockStatement) (Syntax: 'Sub() Conso ... WriteLine()')\r\n        IBlockStatement (1 statements) (OperationKind.BlockStatement) (Syntax: 'Sub() Conso ... WriteLine()')\r\n          IExpressionStatement (OperationKind.ExpressionStatement) (Syntax: 'Console.WriteLine()')\r\n            Expression: IInvocationExpression (Sub System.Console.WriteLine()) (OperationKind.InvocationExpression, Type: System.Void) (Syntax: 'Console.WriteLine()')\r\n                Instance Receiver: null\r\n                Arguments(0)\r\n        ILabeledStatement (Label: exit) (OperationKind.LabeledStatement) (Syntax: 'Sub() Conso ... WriteLine()')\r\n          Statement: null\r\n        IReturnStatement (OperationKind.ReturnStatement) (Syntax: 'Sub() Conso ... WriteLine()')\r\n          ReturnedValue: null\r\n```\r\n\r\nNote the extra IBlockStatement in the single line version. This should not be there."},{"Id":"6700042042","Type":"IssuesEvent","CreatedAt":"2017-10-11T01:59:03","Actor":"heejaechang","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/22208","RelatedDescription":"Closed issue \"IOperation statement inserted when it is not needed\" (#22208) at dotnet/roslyn","RelatedBody":"see this comment (https://github.com/dotnet/roslyn/pull/21857/files#r139825112)\r\n\r\nbasically, what is happening is that in some cases such as IVariableDeclarationStatement or ExpressionStatement, it gets inserted into IOperation tree when it is not actually needed.\r\n\r\nwe need to decide whether we want to get rid of it or add it for all cases."},{"Id":"6700039901","Type":"IssuesEvent","CreatedAt":"2017-10-11T01:58:07","Actor":"heejaechang","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/22395","RelatedDescription":"Closed issue \"[Ioperation] Verify and add tests for ...\" (#22395) at dotnet/roslyn","RelatedBody":"- [ ] https://github.com/dotnet/roslyn/issues/18042#issuecomment-332685154 \r\n- [ ] https://github.com/dotnet/roslyn/issues/18062#issuecomment-332684941\r\n- [ ] https://github.com/dotnet/roslyn/issues/18062#issuecomment-332684941"},{"Id":"6699973751","Type":"PullRequestEvent","CreatedAt":"2017-10-11T01:30:27","Actor":"heejaechang","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/22570","RelatedDescription":"Merged pull request \"fixed using block\" (#22570) at dotnet/roslyn","RelatedBody":"this fixes https://github.com/dotnet/roslyn/issues/22561\r\n\r\nusing block didn't properly created variable decls in the using block.\r\n\r\nthis require this PR to be in (https://github.com/dotnet/roslyn/pull/22435) since it addressed issues with newly re-enabled tests."},{"Id":"6699973745","Type":"IssuesEvent","CreatedAt":"2017-10-11T01:30:26","Actor":"heejaechang","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/22561","RelatedDescription":"Closed issue \"GetUsingStatementDeclaration is not creating IVariableDeclarationStatement correctly\" (#22561) at dotnet/roslyn","RelatedBody":"see this - (https://github.com/dotnet/roslyn/pull/22435#discussion_r142274418)\r\n\r\nthis has a bug\r\n\r\n```vb\r\nPrivate Function GetUsingStatementDeclaration(resourceList As ImmutableArray(Of BoundLocalDeclarationBase), syntax As SyntaxNode) As IVariableDeclarationStatement\r\n            If resourceList.IsDefault Then\r\n                Return Nothing\r\n            End If\r\n            ** Dim declaration = resourceList.Select(Function(n) Create(n)).OfType(Of IVariableDeclaration).ToImmutableArray() **\r\n            Return New VariableDeclarationStatement(\r\n                            declaration,\r\n                            _semanticModel,\r\n                            syntax,\r\n                            type:=Nothing,\r\n                            constantValue:=Nothing,\r\n                            isImplicit:=False) ' Declaration is always explicit\r\n        End Function\r\n```\r\n\r\nvb factory doesn't handle BoundLocalDeclaration kind so resouceList ends up becomes Operation.Node and filtered out since it can't go into variable declaration statement"},{"Id":"6699776708","Type":"PullRequestEvent","CreatedAt":"2017-10-11T00:08:49","Actor":"genlu","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/22653","RelatedDescription":"Opened pull request \"Remove duplicate member symbol from EventReferenceExpression\" (#22653) at dotnet/roslyn","RelatedBody":""}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"6700287561","Type":"PullRequestEvent","CreatedAt":"2017-10-11T03:38:23","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/4705","RelatedDescription":"Merged pull request \"Merge nmirror to master\" (#4705) at dotnet/corert","RelatedBody":""},{"Id":"6699971737","Type":"PullRequestEvent","CreatedAt":"2017-10-11T01:29:37","Actor":"morganbr","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/4709","RelatedDescription":"Merged pull request \"implemented ldobj/stobj in terms of ldind/stind\" (#4709) at dotnet/corert","RelatedBody":"this should fix #4708"},{"Id":"6699971735","Type":"IssuesEvent","CreatedAt":"2017-10-11T01:29:36","Actor":"morganbr","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/issues/4708","RelatedDescription":"Closed issue \"Implement stobj opcode\" (#4708) at dotnet/corert","RelatedBody":"Implement the stobj opcode, which stores a value type at a pointer. It may be possible to just call through to the other overload of ImportStoreIndirect, which was implemented in #4702 The method to fill in is at:\r\nhttps://github.com/dotnet/corert/blob/baeebd4f5facf198c1252ed7e02940285982d534/src/ILCompiler.WebAssembly/src/CodeGen/ILToWebAssemblyImporter.cs#L890"},{"Id":"6699865738","Type":"PullRequestEvent","CreatedAt":"2017-10-11T00:45:54","Actor":"hippiehunter","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/4709","RelatedDescription":"Opened pull request \"implemented ldobj/stobj in terms of ldind/stind\" (#4709) at dotnet/corert","RelatedBody":"this should fix #4708"},{"Id":"6699772374","Type":"IssuesEvent","CreatedAt":"2017-10-11T00:07:03","Actor":"morganbr","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/issues/4521","RelatedDescription":"Closed issue \"Implement stind opcode\" (#4521) at dotnet/corert","RelatedBody":"Implement the stind opcode, which stores a value at a pointer. The method to fill in is at:\r\nhttps://github.com/dotnet/corert/blob/e6d0a9398e3d8fc83d047cccda302ed13610f190/src/ILCompiler.WebAssembly/src/CodeGen/ILToWebAssemblyImporter.cs#L757\r\n\r\nTesting this might depend on #4520 "},{"Id":"6699767137","Type":"PullRequestEvent","CreatedAt":"2017-10-11T00:05:04","Actor":"morganbr","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/4702","RelatedDescription":"Merged pull request \"added support for stind in WASM\" (#4702) at dotnet/corert","RelatedBody":"This adds support for integer and pointer types inside stind for the TypeDesc overload."},{"Id":"6699555196","Type":"PullRequestEvent","CreatedAt":"2017-10-10T22:48:48","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/4700","RelatedDescription":"Merged pull request \"Use default calling convention for jitinterface wrapper\" (#4700) at dotnet/corert","RelatedBody":"Avoids calling convention confusion on Unix. #4699"},{"Id":"6699551277","Type":"PullRequestEvent","CreatedAt":"2017-10-10T22:47:32","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/4707","RelatedDescription":"Merged pull request \"Merge changes from TFS\" (#4707) at dotnet/corert","RelatedBody":"When merging, this PR, please ensure a merge commit is created as automation requires the merge commit.  Do not 'Squash and merge' or 'Rebase and merge'!"},{"Id":"6699549379","Type":"PullRequestEvent","CreatedAt":"2017-10-10T22:46:54","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/4707","RelatedDescription":"Opened pull request \"Merge changes from TFS\" (#4707) at dotnet/corert","RelatedBody":"When merging, this PR, please ensure a merge commit is created as automation requires the merge commit.  Do not 'Squash and merge' or 'Rebase and merge'!"},{"Id":"6699281246","Type":"PullRequestEvent","CreatedAt":"2017-10-10T21:33:30","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/4703","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#4703) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"6699229368","Type":"IssuesEvent","CreatedAt":"2017-10-10T21:21:13","Actor":"fadimounir","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/issues/4453","RelatedDescription":"Closed issue \"Instantiating unboxing stubs target lookup\" (#4453) at dotnet/corert","RelatedBody":"unboxing->target info to be encoded in the gcinfo portion (flag + reloc)"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"916703209548214272","CreatedAt":"2017-10-07T16:34:11+00:00","UserScreenname":"dotnet","Text":"Join @terrajobst at his fire place for a story about .NET Standard versioning. https://t.co/8JAOGpk0Pm","Source":"<a href=\"http://twitter.com/#!/download/ipad\" rel=\"nofollow\">Twitter for iPad</a>","RetweetCount":49,"FavoriteCount":26,"RawContent":null}]}},"RunOn":"2017-10-11T05:30:17.5506375Z","RunDurationInMilliseconds":6225}