{"Data":{"Blog":{"FeedItems":[{"Title":"Exploring Azure App Service – Web Apps and SQL Azure","PublishedOn":"2018-05-18T19:40:05+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"There is a good chance that your web app uses a database. In my previous post introducing Azure App Service, I showed some of the benefits of hosting apps in Azure App Service, and how easy it is to...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/05/18/exploring-azure-app-service-web-apps-and-sql-azure/","RawContent":null},{"Title":"ASP.NET Core 2.1.0-rc1 now available","PublishedOn":"2018-05-07T18:00:55+00:00","CommentsCount":18,"FacebookCount":0,"Summary":"Today we’re happy to announce the first release candidate of ASP.NET Core 2.1! This release should be very close to the final stable release of ASP.NET Core 2.1 and includes primarily bug fixes and...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/05/07/asp-net-core-2-1-0-rc1-now-available/","RawContent":null},{"Title":"Exploring Azure App Service – Introduction","PublishedOn":"2018-05-02T23:01:28+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Have you ever needed to quickly stand up a web site, or web API app that was publicly available? Is your team or organization thinking about moving to the cloud but aren’t sure the best place to...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/05/02/exploring-azure-app-service-introduction/","RawContent":null},{"Title":"Blazor 0.3.0 experimental release now available","PublishedOn":"2018-05-02T19:50:50+00:00","CommentsCount":10,"FacebookCount":0,"Summary":"Blazor 0.3.0 is now available! This release includes important bug fixes and many new feature enhancements. New features in this release (details below): Project templates updated to use Bootstrap 4...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/05/02/blazor-0-3-0-experimental-release-now-available/","RawContent":null},{"Title":"Announcing ASP.NET MVC 5.2.5, Web API 5.2.5, and Web Pages 3.2.5","PublishedOn":"2018-05-02T19:35:23+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today we released ASP.NET MVC 5.2.5, Web API 5.2.5, and Web Pages 3.2.5 on NuGet. This is a patch release that contains only bug fixes. You can find the full list of bug fixes for this release in the...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/05/02/announcing-asp-net-mvc-5-2-5-web-api-5-2-5-and-web-pages-3-2-5/","RawContent":null},{"Title":"Cosmos DB Solves Common Data Challenges in App Development","PublishedOn":"2018-04-27T17:35:54+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"When considering how to implement your application with a relational database, it can change how you build it dramatically. Some of these challenges include adding an abstract implementation of the...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/04/27/cosmos-db-solves-common-data-challenges/","RawContent":null},{"Title":"Publish Improvements in Visual Studio 2017 version 15.7","PublishedOn":"2018-04-18T19:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today we released Visual Studio 2017 version 15.7. Our 15.7 update brings some exciting updates for publishing applications from Visual Studio that we’re excited to tell you about, including: Ability...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/04/18/visual-studio-2017-15-7-p4-publish/","RawContent":null},{"Title":"What Happened to Bower?","PublishedOn":"2018-04-18T18:04:55+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Bower is a popular package management system for managing static content used by client-side web applications. Visual Studio provides rich support for Bower, including templates and package management...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/04/18/what-happened-to-bower/","RawContent":null},{"Title":"Library Manager: Client-side content manager for web apps","PublishedOn":"2018-04-17T21:48:24+00:00","CommentsCount":11,"FacebookCount":0,"Summary":"If you’re developing a modern web app, chances are your app will reference client-side JavaScript and CSS files like jQuery or bootstrap. Maybe you copy these from a previous project, download them,...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/04/17/library-manager-client-side-content-manager-for-web-apps/","RawContent":null},{"Title":"Blazor 0.2.0 release now available","PublishedOn":"2018-04-17T17:59:55+00:00","CommentsCount":8,"FacebookCount":0,"Summary":"Just a few weeks ago we announced the first preview release of an experimental web UI framework called Blazor. Blazor enables full-stack web development using C# and WebAssembly. So far thousands of...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/04/17/blazor-0-2-0-release-now-available/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"7697247757","Type":"IssuesEvent","CreatedAt":"2018-05-18T18:04:42","Actor":"javiercn","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Home/issues/3124","RelatedDescription":"Closed issue \"[Common]: Running tests pops up a dialog asking to confirm removing certs\" (#3124) at aspnet/Home","RelatedBody":"```\r\nFailed   Microsoft.AspNetCore.Certificates.Generation.Tests.CertificateManagerTests.EnsureCreateHttpsCertificate_DoesNotCreateACertificate_WhenThereIsAnExistingHttpsCertificates\r\nRUNDOTNET : error Message: \r\n   Internal.Cryptography.CryptoThrowHelper+WindowsCryptographicException : The operation was canceled by the user\r\n  Stack Trace:\r\n     at Internal.Cryptography.Pal.StorePal.Remove(ICertificatePal certificate)\r\n     at System.Security.Cryptography.X509Certificates.X509Store.Remove(X509Certificate2 certificate)\r\n     at Microsoft.AspNetCore.Certificates.Generation.CertificateManager.RemoveCertificateFromTrustedRoots(X509Certificate2 certificate) in D:\\work\\Common\\shared\\Microsoft.AspNetCore.Certificates.Generation.Sources\\CertificateManager.cs:line 506\r\n     at Microsoft.AspNetCore.Certificates.Generation.CertificateManager.RemoveCertificate(X509Certificate2 certificate, RemoveLocations locations) in D:\\work\\Common\\shared\\Microsoft.AspNetCore.Certificates.Generation.Sources\\CertificateManager.cs:line 467\r\n     at Microsoft.AspNetCore.Certificates.Generation.CertificateManager.RemoveAllCertificates(CertificatePurpose purpose, StoreName storeName, StoreLocation storeLocation, String subject) in D:\\work\\Common\\shared\\Microsoft.AspNetCore.Certificates.Generation.Sources\\CertificateManager.cs:line 451\r\n     at Microsoft.AspNetCore.Certificates.Generation.Tests.CertificateManagerTests.EnsureCreateHttpsCertificate_DoesNotCreateACertificate_WhenThereIsAnExistingHttpsCertificates() in D:\\work\\Common\\test\\Microsoft.Extensions.Internal.Test\\CertificateManagerTests.cs:line 140\r\n  [xUnit.net 00:00:17.2386222]     Microsoft.AspNetCore.Certificates.Generation.Tests.CertificateManagerTests.EnsureAspNetCoreHttpsDevelopmentCertificate_CanRemoveCertificates [SKIP]\r\n  [xUnit.net 00:00:17.2400855]     Microsoft.AspNetCore.Certificates.Generation.Tests.CertificateManagerTests.EnsureAspNetCoreHttpsDevelopmentCertificate_ReturnsCorrectResult_WhenUserCancelsTrustStepOnWindows [SKIP]\r\n```\r\n"},{"Id":"7697241823","Type":"IssuesEvent","CreatedAt":"2018-05-18T18:03:21","Actor":"own3mall","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Home/issues/3158","RelatedDescription":"Opened issue \"AuthorizationContext Filter - HttpContext.Request.IsAjaxRequest() Returning True when X-Requested-With POSTed as Form Parameter\" (#3158) at aspnet/Home","RelatedBody":"In one of my ASP.NET MVC projects, I am using an authorization filter which is applied to all controllers.  The filter checks to see if a request has been made with AJAX.  If the request is not an AJAX request, we check the normal anti-CSRF token if the request method is POST.  If the request is an AJAX request, we check the ORIGIN header to authorize whether or not our application should complete the request.\r\n\r\nIt is easy to trick ASP.NET into thinking that a request is an AJAX request when it's not.  From my custom filter, HttpContext.Request.IsAjaxRequest() returns true if the form data contains the X-Requested-With parameter.\r\n\r\nFor example, the following posted form will return true for HttpContext.Request.IsAjaxRequest() when the X-Requested-With header is missing from the HttpContext.Request.Headers (because it was submitted using a POST form request, not an AJAX POST request):\r\n\r\n```\r\n<form method=\"post\" action=\"/Home/Index\">\r\n    <input type=\"hidden\" name=\"X&#45;Requested&#45;With\" value=\"XMLHttpRequest\">\r\n    <input type=\"submit\">\r\n</form>\r\n```\r\n\r\nWhen the above form is submitted, HttpContext.Request.IsAjaxRequest() should return false because the HttpContext.Request.Headers[\"X-Requested-With\"] header is null and wasn't supplied by the browser.  However, it currently returns true because it found X-Requested-With in the posted data which is incorrect.\r\n"},{"Id":"7697066502","Type":"IssuesEvent","CreatedAt":"2018-05-18T17:24:43","Actor":"ryanbrandenburg","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Home/issues/3157","RelatedDescription":"Opened issue \"Either update xplat Getting started guide or remove it entirely\" (#3157) at aspnet/Home","RelatedBody":"[This](https://github.com/aspnet/Home/wiki/Getting-Started-Prerequisites-for-Debian,-Ubuntu-and-derivitives) getting started guide for Ubuntu style linux distros is VERY out of date. We should either update it to match the new world or remove it entirely."},{"Id":"7692339953","Type":"IssuesEvent","CreatedAt":"2018-05-17T21:23:03","Actor":"dasMulli","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Home/issues/3156","RelatedDescription":"Opened issue \"Testing is hard to set up and may break on shared framework servicing\" (#3156) at aspnet/Home","RelatedBody":"Sort of a follow-up to @poke's https://github.com/dotnet/sdk/issues/2253 but orthogonal.\r\n\r\nTL;DR: Unit tests should have an option to run on the asp.net core shared framework using the same servicing strategy that the main subject-under-test application uses, which means referencing the shared framework using the latest known version of the web SDK and applying NuGet and assembly resolution accordingly.\r\n\r\nStory:\r\nAs a developer, I want to add a new test project with a reference to my asp.net core project so that I can write integration tests.\r\n\r\nNaive steps:\r\n* dotnet new razor -o ../RazorPagesProject\r\n* dotnet new xunit\r\n* dotnet add reference ../RazorPagesProject\r\n* dotnet add package Microsoft.AspNetCore.Mvc.Testing -v 2.1.0-rc1-final\r\n* add C# code\r\n```c#\r\n\r\n    public class SampleIntegrationTests : IClassFixture<WebApplicationFactory<Startup>>\r\n    {\r\n        public HttpClient Client { get; }\r\n\r\n        public SampleIntegrationTests(WebApplicationFactory<Startup> fixture)\r\n        {\r\n            Client = fixture.CreateDefaultClient();\r\n        }\r\n\r\n        [Fact]\r\n        public async Task ItShallWork()\r\n        {\r\n            var response = await Client.GetAsync(\"/\");\r\n            Assert.Equal(HttpStatusCode.OK, response.StatusCode);\r\n        }\r\n    }\r\n```\r\n * dotnet test\r\n\r\nExpected: Test passes\r\n\r\nActual:\r\n```\r\nStarting test execution, please wait...\r\n[xUnit.net 00:00:00.5209160]   Discovering: SampleTests\r\n[xUnit.net 00:00:00.5793000]   Discovered:  SampleTests\r\n[xUnit.net 00:00:00.5854810]   Starting:    SampleTests\r\n[xUnit.net 00:00:00.7291840]     SampleTests.SampleIntegrationTests.ItShallWork [FAIL]\r\n[xUnit.net 00:00:00.7305700]       System.IO.FileNotFoundException : Could not load file or assembly 'Microsoft.AspNetCore, Version=2.1.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60'. The system cannot find the file specified.\r\n[xUnit.net 00:00:00.7306390]\r\n[xUnit.net 00:00:00.7461290]   Finished:    SampleTests\r\nFailed   SampleTests.SampleIntegrationTests.ItShallWork\r\nError Message:\r\n System.IO.FileNotFoundException : Could not load file or assembly 'Microsoft.AspNetCore, Version=2.1.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60'. Thesystem cannot find the file specified.\r\n```\r\n\r\nWorkaround:\r\nAdd a Package reference to the test project (!):\r\n\r\n```xml\r\n<ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.All\" Version=\"2.1.0-rc1-final\" />\r\n</ItemGroup>\r\n```\r\n\r\nWhat I really want:\r\n* It should **just work** ™️ \r\n* Integration tests shall run on the asp.net core shared framework\r\n* Integration tests shall use the same patch level of asp.net core components that `dotnet run` or `dotnet publish` + `dotnet myapp.dll` would use\r\n\r\nWhat could be done here? an web-test-SDK maybe?"},{"Id":"7692253664","Type":"IssuesEvent","CreatedAt":"2018-05-17T21:04:02","Actor":"Ro3A","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Home/issues/3155","RelatedDescription":"Opened issue \".Net Core 2.1 Angular SPA + Service Worker?\" (#3155) at aspnet/Home","RelatedBody":"What is the correct implementation for using service workers in a .Net Core 2.1 Angular SPA?\r\n\r\nI'm hung up on not being able to successfully run ng build --prod and thus only able to run the site in development mode. \r\n\r\nMy question is, should I be following documentation on adding service worker to an Angular App, or should I be using the WebEssentials extension by Mads Kristensen? \r\n\r\nhttps://github.com/madskristensen/WebEssentials.AspNetCore.ServiceWorker\r\n"}],"ResultType":"GitHubEvent"},"SignalR":{"Events":[{"Id":"7700665657","Type":"PullRequestEvent","CreatedAt":"2018-05-20T04:54:11","Actor":"anurse","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/SignalR/pull/2324","RelatedDescription":"Merged pull request \"Add note about building TS library first\" (#2324) at aspnet/SignalR","RelatedBody":"I lied @JamesNK ;). Turns out you do have to build the library first because of how the `signalr-protocol-msgpack` tests work. They depend upon the compiled version of `signalr`."},{"Id":"7700554071","Type":"IssuesEvent","CreatedAt":"2018-05-20T02:59:08","Actor":"JamesNK","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/SignalR/issues/1858","RelatedDescription":"Closed issue \"CanStartConnectionFromClosedEvent \" (#1858) at aspnet/SignalR","RelatedBody":"A timeout was observed in this PR https://travis-ci.org/aspnet/SignalR/jobs/362365310. Related to the C# client. We can wait to see if we see it more than once before declaring it flaky but we might need to start looking at the .NET client for flaky tests.\r\n\r\nThe strange thing here is that the test run was aborted, which usually means something is throwing on a background thread (it might not be related to this test).\r\n\r\n```\r\nThe active test run was aborted. Reason: Unhandled Exception: System.TimeoutException: Operation in CanStartConnectionFromClosedEvent timed out at /_/test/Microsoft.AspNetCore.SignalR.Client.FunctionalTests/HubConnectionTests.cs:176\r\n   at System.Threading.Tasks.TaskExtensions.<OrTimeout>d__2.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.AspNetCore.SignalR.Client.FunctionalTests.HubConnectionTests.<>c__DisplayClass7_0.<<CanStartConnectionFromClosedEvent>b__0>d.MoveNext() in /_/test/Microsoft.AspNetCore.SignalR.Client.FunctionalTests/HubConnectionTests.cs:line 177\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state)\r\n   at System.Threading.ThreadPoolWorkQueue.Dispatch()\r\nTotal tests: Unknown. Passed: 1110. Failed: 0. Skipped: 2.\r\n```"},{"Id":"7699980139","Type":"IssuesEvent","CreatedAt":"2018-05-19T18:44:52","Actor":"isijoc","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/SignalR/issues/2325","RelatedDescription":"Opened issue \"Is there a way to convert/create instance of a specified type using some sort of utility that encapsulates the underlying protocol in a hub method? \" (#2325) at aspnet/SignalR","RelatedBody":"We are trying to create a `generic hub method` that can process different types of objects. If we only use the JsonHubProtocol then we can infer that opaque objects are deserialized as `JObject` and therefore take advantage of facilities provided to perform the translation from opaque objects to well-known ones. But if we use another hub protocol then the previous assumption is no longer valid. Is there a way accomplish this type of logic using a protocol agnostic approach?\r\n\r\nThank you very much for taking the time to read this and kudos to all of you for creating such amazing framework!\r\n\r\n```csharp\r\nnamespace test\r\n{\r\n    public class MessagePayload\r\n    {\r\n        public string PayloadType { get; set; }\r\n        public object Payload { get; set; }\r\n    }\r\n\r\n    public class PayloadTypeA \r\n    {\r\n        public int Id { get; set; }\r\n    }\r\n\r\n    public class PayloadTypeB\r\n    {\r\n        public string Description { get; set; }\r\n    }\r\n\r\n    public class MessageBusHub : Hub\r\n    {\r\n        public void OnMessageArrived(MessagePayload message)\r\n        {\r\n            Type payloadType = Type.GetType(message.PayloadType);\r\n            var actualPayload = ((JObject)message.Payload).ToObject(payloadType);\r\n        }\r\n    } \r\n}\r\n```"},{"Id":"7699870232","Type":"PullRequestEvent","CreatedAt":"2018-05-19T17:28:41","Actor":"anurse","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/SignalR/pull/2324","RelatedDescription":"Opened pull request \"Add note about building TS library first\" (#2324) at aspnet/SignalR","RelatedBody":"I lied @JamesNK ;). Turns out you do have to build the library first because of how the `signalr-protocol-msgpack` tests work. They depend upon the compiled version of `signalr`."},{"Id":"7699836389","Type":"IssuesEvent","CreatedAt":"2018-05-19T17:06:38","Actor":"anurse","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/SignalR/issues/2296","RelatedDescription":"Closed issue \"@aspnet/signalr not working IE11\" (#2296) at aspnet/SignalR","RelatedBody":"### Please include as much of the following as you can in your bug report\r\n\r\n* Versions of Client-Side NuGet/NPM Packages:\r\n```\r\n \"@angular/animations\": \"^5.1\",\r\n    \"@angular/common\": \"^5.1\",\r\n    \"@angular/core\": \"^5.1\",\r\n    \"@angular/forms\": \"^5.2.4\",\r\n    \"@angular/platform-browser\": \"^5.1\",\r\n    \"@angular/platform-browser-dynamic\": \"^5.1\",\r\n    \"@angular/router\": \"^5.2.9\",\r\n    \"@aspnet/signalr\": \"^1.0.0-preview2-final\",\r\n    \"@camco/common\": \"^1.0.0\",\r\n    \"@turf/turf\": \"^5.1.6\",\r\n    \"@types/d3\": \"^5.0.0\",\r\n    \"@types/materialize-css\": \"^1.0.1\",\r\n    \"@types/ol\": \"^4.6.1\",\r\n    \"core-js\": \"^2.5.3\",\r\n    \"d3\": \"^5.0.0\",\r\n    \"keysim\": \"^2.0.0\",\r\n    \"materialize-css\": \"1.0.0-alpha.4\",\r\n    \"ol\": \"^4.6.4\",\r\n    \"rxjs\": \"^5.5.6\",\r\n    \"zone.js\": \"^0.8.20\"\r\n```\r\n* Are you using the C# client or the JavaScript client:\r\njavascript client\r\n* The Server you are using (Kestrel/HttpSysServer/IIS/IIS Express/Azure Web App/etc.): \r\nKestrel\r\n* The Operating System on the Server (Windows/Linux/macOS):\r\nWindows\r\n* The Operating System on the Client (Windows/Linux/macOS):\r\nWindows\r\n* The Browser on the client, if using the JavaScript client (IE/Chrome/Edge/Firefox/etc.):\r\nIE\r\n\r\nWhile developing an application using the Angular CLI (version 5), the application does not seem to start in Internet Explorer while working perfectly fine in Firefox and Chrome.\r\nWhen attempting to run the application in Internet Explorer 11 after including `@aspnet/signalr` throws a syntax error (see screenshots below):\r\n![angular-issue-devtools](https://user-images.githubusercontent.com/39370794/40171563-e4b2744e-59cb-11e8-9f69-ff4280017029.PNG)\r\n![angular-issue-code](https://user-images.githubusercontent.com/39370794/40171564-e4d3dab2-59cb-11e8-9623-2854d0803d6a.PNG)\r\n\r\nThe code used to include SignalR is shown below:\r\n```typescript\r\nimport { HubConnection } from '@aspnet/signalr';\r\n\r\nexport class Hub {\r\n\r\n\tprotected connection: HubConnection;\r\n\r\n\tconstructor(url: string) {\r\n\t\tthis.connection = new HubConnection(url);\r\n\t}\r\n\r\n\tpublic connect(reconnect: () => void, onConnectionSucces: () => void, setConnected: (connected: boolean) => void, retry: number) {\r\n\t\tthis.connection.onclose(() => {\r\n\t\t\tsetConnected(false);\r\n\t\t\tsetTimeout(reconnect, retry);\r\n\t\t});\r\n\r\n\t\tthis.connection.start()\r\n\t\t\t.then(() => {\r\n\t\t\t\tonConnectionSucces();\r\n\t\t\t\tsetConnected(true);\r\n\t\t\t})\r\n\t\t\t.catch(() => {\r\n\t\t\t\tsetConnected(false);\r\n\t\t\t\tsetTimeout(reconnect, retry);\r\n\t\t\t});\r\n\t}\r\n\r\n\tprotected on(eventName: string, callback: (...msg: any[]) => void) {\r\n\t\tthis.connection.on(eventName, callback);\r\n\t}\r\n}\r\n\r\n```\r\n"}],"ResultType":"GitHubEvent"},"Mvc":{"Events":[{"Id":"7700399442","Type":"IssuesEvent","CreatedAt":"2018-05-20T00:20:12","Actor":"zeus82","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Mvc/issues/7796","RelatedDescription":"Opened issue \"ASP.NET Core 2.1 'Feature' Project Structure Not Working\" (#7796) at aspnet/Mvc","RelatedBody":"I'm trying to port a ASP.NET Core 2.0 project to 2.1.  It uses the feature layout:\r\n\r\n    Website.csproj\r\n        |--Features\r\n            |--Home\r\n                |--HomeController.cs\r\n                |--Index.cshtml\r\n                |--About.cshtml\r\n                |--Contact.cshtml\r\n                |--Privacy.cshtml\r\n\r\nThis is how I configure Mvc:\r\n\r\n    services\r\n        .AddMvc()\r\n        .AddRazorOptions(options =>\r\n        {\r\n            // {0} - Action Name\r\n            // {1} - Controller Name\r\n            // {2} - Area Name\r\n            // {3} - Feature Name\r\n            // Replace normal view location entirely\r\n            options.ViewLocationFormats.Clear();\r\n            options.ViewLocationFormats.Add(\"/Features/{3}/{1}/{0}.cshtml\");\r\n            options.ViewLocationFormats.Add(\"/Features/{3}/{0}.cshtml\");\r\n            options.ViewLocationFormats.Add(\"/Features/Shared/{0}.cshtml\");\r\n            options.ViewLocationExpanders.Add(new FeatureViewLocationExpander());\r\n        })\r\n        .SetCompatibilityVersion(CompatibilityVersion.Version_2_1); // This line is new to 2.1, there is nothing like this in my 2.0 project\r\n\r\nThis is my ViewLocationExpander:\r\n\r\n\tpublic class FeatureViewLocationExpander : IViewLocationExpander\r\n\t{\r\n\t\tpublic IEnumerable<string> ExpandViewLocations(ViewLocationExpanderContext context, IEnumerable<string> viewLocations)\r\n\t\t{\r\n\t\t\t// Error checking removed for brevity\r\n\t\t\tvar controllerActionDescriptor =\r\n\t\t\t  context.ActionContext.ActionDescriptor as ControllerActionDescriptor;\r\n\t\t\tstring featureName = controllerActionDescriptor.Properties[\"feature\"] as string; //KeyNotFound Exception\r\n\t\t\tforeach (var location in viewLocations)\r\n\t\t\t{\r\n\t\t\t\tyield return location.Replace(\"{3}\", featureName);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tpublic void PopulateValues(ViewLocationExpanderContext context)\r\n\t\t{\r\n\t\t}\r\n\t}\r\n\r\nIn 2.1 I get a KeyNotFoundException on  `controllerActionDescriptor.Properties[\"feature\"]`, Anyone know how to make this work in 2.1?"},{"Id":"7699880640","Type":"IssuesEvent","CreatedAt":"2018-05-19T17:35:24","Actor":"ericwj","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Mvc/issues/7795","RelatedDescription":"Opened issue \"[IgnoreAntiForgeryToken] Not working in Razor Pages\" (#7795) at aspnet/Mvc","RelatedBody":"#### Is this a Bug or Feature request?:\r\nBug\r\n\r\n#### Steps to reproduce (preferrably a link to a GitHub repo with a repro project):\r\nSee below\r\n\r\n#### Description of the problem:\r\nAdding `[IgnoreAntiForgeryToken]` in a controller works as expected, however, adding it to a Razor Pages method has no effect.\r\n\r\n#### Version of `Microsoft.AspNetCore.Mvc` or `Microsoft.AspNetCore.App` or `Microsoft.AspNetCore.All`:\r\n2.1.0-rc1-final\r\n\r\n#### Test Script\r\n```PS\r\n$Body = \"message=PowerShell\" \r\n$Uri = \"https://localhost:44387/Test\"\r\n(curl -UseBasicParsing -Uri $Uri -Body $Body -Method Post -ContentType \"application/x-www-form-urlencoded\").RawContent\r\n$Uri = \"https://localhost:44387/Contact\"\r\n(curl -UseBasicParsing -Uri $Uri -Body $Body -Method Post -ContentType \"application/x-www-form-urlencoded\").RawContent\r\n```\r\n\r\n#### Output\r\n```\r\nHTTP/1.1 200 OK\r\nPragma: no-cache\r\nTransfer-Encoding: chunked\r\nX-Frame-Options: SAMEORIGIN\r\nX-SourceFiles: =?UTF-8?B?QzpcVXNlcnNcRXJpY1xTb3VyY2VcSXNzdWVzXElnbm9yZUFudGlGb3JnZXJ5VG9rZW5cVGVzdA==?=\r\nCache-Control: no-cache, no-store\r\nContent-Type: text/html; charset=utf-8\r\nDate: Sat, 19 May 2018 17:30:19 GMT\r\nSet-Cookie: .AspNetCore.Antiforgery.oPQX9jHeIUM=CfDJ8Mtg_UjBP8dLpGAth2hE68d-IyvTEhGzHEtPh5gqWZyTAPQh1Q8Qe0L70AZE3ZBRurb7YCUuc_xEYjiNmCP12o6uVVZBVSMYacekaSn3BrlaCF7nwg4Ci7l736g3GrON7oJEgv7aiQmadaI4KmF7W\r\n5I; path=/; samesite=strict; httponly\r\nServer: Kestrel\r\nX-Powered-By: ASP.NET\r\n\r\n\r\n<h2>PowerShell</h2>\r\n\r\n<form method=\"post\">\r\n    <input type=\"text\" id=\"Message\" name=\"Message\" value=\"PowerShell\" />\r\n    <input type=\"submit\" value=\"OK\"/>\r\n<input name=\"__RequestVerificationToken\" type=\"hidden\" value=\"CfDJ8Mtg_UjBP8dLpGAth2hE68cI5gq5FINEiYp098QnwwxvNGW9QT3-PsHlwEiVC1L_D1dWzfISgD1HSv3Qz-2uNfbvdMrcw_dcwDgYBnOpT6NVFhExpUd-3Rbb2WjEYHz8X4F1i2f\r\n4XluCTCnW7h7vPWw\" /></form>\r\ncurl : The remote server returned an error: (400) Bad Request.\r\nAt line:6 char:2\r\n+ (curl -UseBasicParsing -Uri $Uri -Body $Body -Method Post -ContentTyp ...\r\n+  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n    + CategoryInfo          : InvalidOperation: (System.Net.HttpWebRequest:HttpWebRequest) [Invoke-WebRequest], WebException\r\n    + FullyQualifiedErrorId : WebCmdletWebResponseException,Microsoft.PowerShell.Commands.InvokeWebRequestCommand\r\n```"},{"Id":"7699420223","Type":"PullRequestEvent","CreatedAt":"2018-05-19T12:24:41","Actor":"ErazerBrecht","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Mvc/pull/7794","RelatedDescription":"Opened pull request \"Fix documentation AnchorTagHelper\" (#7794) at aspnet/Mvc","RelatedBody":"Fixed incorrect documentation.\r\nBecause of the wrong documentation I got confused.\r\n\r\nI was trying to ['scaffold Identity'](https://docs.microsoft.com/en-us/aspnet/core/security/authentication/scaffold-identity?view=aspnetcore-2.1&tabs=visual-studio). And wanted to add a link to the 'Razor Pages' in the 'Identity' area. Because of the 'wrong' documentation I was trying to fix this on an incorrect way.\r\n\r\nAfter checking how Identity did it there self I found out that using `asp-page` and `asp-area` together is allowed. \r\nhttps://github.com/aspnet/Identity/blob/ae6933af2e15f5dddf2fcebb1150be2f2104509d/samples/IdentitySample.DefaultUI/Views/Shared/_LoginPartial.cshtml#L10\r\n\r\n### Actual behaviour:\r\n\r\n|TagHelper|Description|\r\n|-----------|-------------|\r\n|asp-area|The name of the area. Must be null if AnchorTagHelper.Route or AnchorTagHelper.Page is non-null.\r\n|asp-page|The name of the page. Must be null if AnchorTagHelper.Route or AnchorTagHelper.Action, AnchorTagHelper.Controller or AnchorTagHelper.Area is non-null.|\r\n\r\n### Expected behaviour:\r\n|TagHelper|Description|\r\n|-----------|-------------|\r\n|asp-area|The name of the area. Must be null if AnchorTagHelper.Route is non-null.\r\n|asp-page|The name of the page. Must be null if AnchorTagHelper.Route or AnchorTagHelper.Action, AnchorTagHelper.Controller is non-null.|\r\n\r\nSincerely,\r\nBrecht"}],"ResultType":"GitHubEvent"},"Identity":{"Events":[{"Id":"7698485136","Type":"IssuesEvent","CreatedAt":"2018-05-18T23:42:21","Actor":"chrisckc","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Identity/issues/1797","RelatedDescription":"Closed issue \"Issues with Personal Data page (does not delete saved tokens when deleting user)\" (#1797) at aspnet/Identity","RelatedBody":"It looks like the personal data pages were added with the EU GDPR regulations in mind, the pull is here:\r\n[https://github.com/aspnet/Identity/pull/1559](https://github.com/aspnet/Identity/pull/1559)\r\n\r\nHowever using the dotnet-sdk-2.1.300-rc1 identity scaffolded files, when deleting a user, any saved tokens for the user that are stored in the database table \"AspNetUserTokens\" are left behind so it is not fully deleting the user and their personal data. The User Claims are correctly deleted from \"AspNetUserClaims\" table. Not sure about other related tables as i haven't got around to trying out the roles etc.\r\n\r\nThis can easily be fixed by modifying the deletion code in the scaffolded files but really needs to be correct from the start.\r\n\r\nAnother issue is that when downloading personal data, the User Claims are not downloaded from the database, these are relevant as it is personal data that is stored in the database. Obviously if you have a custom user class and have added your own fields then you will need to update the download code to include them, but there is no reason that the claims should not be downloaded by default.\r\n\r\nTechnically any stored 3rd party provider access tokens should also be included in the download as it is still personal data. I think the hashed password of the local login doesn't count as personal data with it being a hash which is irreversible."},{"Id":"7698480136","Type":"IssuesEvent","CreatedAt":"2018-05-18T23:40:03","Actor":"chrisckc","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Identity/issues/1797","RelatedDescription":"Opened issue \"Issues with Personal Data page (does not delete saved tokens when deleting user)\" (#1797) at aspnet/Identity","RelatedBody":"It looks like the personal data pages were added with the EU GDPR regulations in mind, the pull is here:\r\n[https://github.com/aspnet/Identity/pull/1559](https://github.com/aspnet/Identity/pull/1559)\r\n\r\nHowever using the dotnet-sdk-2.1.300-rc1 identity scaffolded files, when deleting a user, any saved tokens for the user that are stored in the database table \"AspNetUserTokens\" are left behind so it is not fully deleting the user and their personal data. The User Claims are correctly deleted from \"AspNetUserClaims\" table. Not sure about other related tables as i haven't got around to trying out the roles etc.\r\n\r\nThis can easily be fixed by modifying the deletion code in the scaffolded files but really needs to be correct from the start.\r\n\r\nAnother issue is that when downloading personal data, the User Claims are not downloaded from the database, these are relevant as it is personal data that is stored in the database. Obviously if you have a custom user class and have added your own fields then you will need to update the download code to include them, but there is no reason that the claims should not be downloaded by default.\r\n\r\nTechnically any stored 3rd party provider access tokens should also be included in the download as it is still personal data. I think the hashed password of the local login doesn't count as personal data with it being a hash which is irreversible."},{"Id":"7697719416","Type":"IssuesEvent","CreatedAt":"2018-05-18T19:52:18","Actor":"eriksendc","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Identity/issues/1790","RelatedDescription":"Closed issue \"Microsoft.AspNetCore.Diagnostics.ExceptionHandlerMiddleware An unhandled exception has occurred: Failed to retrieve Facebook user information (BadRequest) Please check if the authentication information is correct and the corresponding Facebook Graph API is enabled.\" (#1790) at aspnet/Identity","RelatedBody":"Hi All,\r\n\r\nStarting May 1st at approximately 1:33pm Eastern US time we started seeing the following error reported in  our logs:\r\n\r\n`Microsoft.AspNetCore.Diagnostics.ExceptionHandlerMiddleware An unhandled exception has occurred: Failed to retrieve Facebook user information (BadRequest) Please check if the authentication information is correct and the corresponding Facebook Graph API is enabled.`\r\n\r\nWe made no code changes at that time. This just started happening out of the blue. We know this is affecting users because we've had at least 10 requests for help per day from our users since the 1st. It's becoming a real user experience issue. Any clues?\r\n\r\nWe're on 2.0.1 in general, and specifically for Microsoft.AspNetCore.Authentication.Facebook.\r\n\r\nThanks in advance!\r\n\r\n-Brian Eriksen"},{"Id":"7697382502","Type":"IssuesEvent","CreatedAt":"2018-05-18T18:34:14","Actor":"blowdart","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Identity/issues/1793","RelatedDescription":"Closed issue \"Primary Key in RoleClaim & UserClaim provider dependent\" (#1793) at aspnet/Identity","RelatedBody":"This probably belongs in the EntityFrameworkCore repo, but I haven't bumped into it before using Identity. The migration generated for `RoleClaim` and `UserClaim` is provider dependent on the provider that was used when generating the migration.\r\n\r\nFor example the primary keys are generated with `Annotation(Sqlite:Autoincrement, true)` when using SQLite, and `Annotation(\"SqlServer:ValueGenerationStrategy\", SqlServerValueGenerationStrategy.IdentityColumn)` when creating the migration with SqlServer.\r\n\r\nWhile this probably works when generating a migration for a single application it totally breaks when using it in a reusable library that is not supposed to be database dependent because the migration only works on the same type of database as it was created for.\r\n\r\nIt also seems a bit odd as one of the main features of EntityFramework is to abstract the database provider from the application making it easy to change the underlying infrastructure.\r\n\r\nBest regards\r\n\r\nHåkan"},{"Id":"7697241604","Type":"IssuesEvent","CreatedAt":"2018-05-18T18:03:18","Actor":"javiercn","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Identity/issues/1786","RelatedDescription":"Closed issue \"Microsoft.AspNetCore.Identity.UI.csproj failed to load\" (#1786) at aspnet/Identity","RelatedBody":"git clone code, then load it in VS 2017 ver 15.7.1 \r\nMicrosoft.AspNetCore.Identity.UI.csproj load failed.\r\n\r\n![image](https://user-images.githubusercontent.com/5031611/39835715-a0f6e776-5403-11e8-857d-17086584219f.png)\r\n"},{"Id":"7696396657","Type":"IssuesEvent","CreatedAt":"2018-05-18T15:11:49","Actor":"javiercn","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Identity/issues/1796","RelatedDescription":"Closed issue \"Scaffold: Missing ShowRecoveryCodes\" (#1796) at aspnet/Identity","RelatedBody":"Scaffolding is missing the ShowRecoveryCodes page."},{"Id":"7691549583","Type":"PullRequestEvent","CreatedAt":"2018-05-17T18:43:50","Actor":"kichalla","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/Identity/pull/1795","RelatedDescription":"Merged pull request \"Added test for verifying fallbacksrc data\" (#1795) at aspnet/Identity","RelatedBody":""},{"Id":"7689060238","Type":"IssuesEvent","CreatedAt":"2018-05-17T11:29:48","Actor":"adams-hub","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Identity/issues/1796","RelatedDescription":"Opened issue \"Scaffold: Missing ShowRecoveryCodes\" (#1796) at aspnet/Identity","RelatedBody":"Scaffolding is missing the ShowRecoveryCodes page."},{"Id":"7686002481","Type":"PullRequestEvent","CreatedAt":"2018-05-16T21:22:30","Actor":"kichalla","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Identity/pull/1795","RelatedDescription":"Opened pull request \"Added test for verifying fallbacksrc data\" (#1795) at aspnet/Identity","RelatedBody":""}],"ResultType":"GitHubEvent"},"Kestrel":{"Events":[{"Id":"7699266495","Type":"IssuesEvent","CreatedAt":"2018-05-19T10:16:12","Actor":"sepehr1014","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/issues/2591","RelatedDescription":"Opened issue \"Random 404 errors\" (#2591) at aspnet/KestrelHttpServer","RelatedBody":"On 2.1 RC1, we're getting occasional 404 errors from our API controllers (about 5 in 100). I was wondering if there's a known issue in this release and has a workaround. If not, I would appreciate tips on how to debug this issue and get to the root cause of these 404 errors."},{"Id":"7698686261","Type":"IssuesEvent","CreatedAt":"2018-05-19T01:49:15","Actor":"mikeharder","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/issues/2590","RelatedDescription":"Opened issue \"Flaky Test:  AddressRegistrationTests.CanRebindToEndPoint\" (#2590) at aspnet/KestrelHttpServer","RelatedBody":""},{"Id":"7698579663","Type":"PullRequestEvent","CreatedAt":"2018-05-19T00:32:13","Actor":"halter73","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/pull/2552","RelatedDescription":"Closed pull request \" Improve MaxRequestBufferSizeTests reliability\" (#2552) at aspnet/KestrelHttpServer","RelatedBody":""},{"Id":"7698448376","Type":"IssuesEvent","CreatedAt":"2018-05-18T23:25:23","Actor":"mikeharder","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/issues/2539","RelatedDescription":"Closed issue \"Failing Test: RequestTimesOutWhenRequestBodyNotReceivedAtSpecifiedMinimumRate\" (#2539) at aspnet/KestrelHttpServer","RelatedBody":"This is the flakiest kestrel test on the CI right now.\r\nhttp://aspnetci/project.html?projectId=XPlat&buildTypeId=&tab=testDetails&testNameId=3964293374486126820&order=TEST_STATUS_DESC&branch_XPlat=__all_branches__&itemsCount=50\r\n\r\nIt started on April 14th and has 38 failures. It does not appear to be OS specific except that there are no failures on Mac.\r\n\r\n```\r\nSystem.TimeoutException : The operation at /_/test/shared/TestConnection.cs:129 timed out after reaching the limit of 60000ms.\r\n   at Microsoft.AspNetCore.Testing.TaskExtensions.<TimeoutAfter>d__0`1.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.AspNetCore.Testing.TestConnection.<Receive>d__21.MoveNext() in /_/test/shared/TestConnection.cs:line 131\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.AspNetCore.Server.Kestrel.FunctionalTests.RequestBodyTimeoutTests.<RequestTimesOutWhenRequestBodyNotReceivedAtSpecifiedMinimumRate>d__0.MoveNext() in /_/test/Kestrel.FunctionalTests/RequestBodyTimeoutTests.cs:line 59\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n```"},{"Id":"7698447458","Type":"PullRequestEvent","CreatedAt":"2018-05-18T23:25:02","Actor":"mikeharder","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/pull/2589","RelatedDescription":"Merged pull request \"Improve reliability of RequestTimesOutWhenRequestBodyNotReceivedAtSpecifiedMinimumRate\" (#2589) at aspnet/KestrelHttpServer","RelatedBody":"- Fix race condition in test code\r\n- Addresses https://github.com/aspnet/KestrelHttpServer/issues/2539"},{"Id":"7698418651","Type":"IssuesEvent","CreatedAt":"2018-05-18T23:12:07","Actor":"mikeharder","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/issues/2197","RelatedDescription":"Closed issue \"Flaky test: HttpsConnectionClosedWhenResponseDoesNotSatisfyMinimumDataRate\" (#2197) at aspnet/KestrelHttpServer","RelatedBody":"http://aspnetci/viewLog.html?buildId=360375&tab=buildResultsDiv&buildTypeId=Lite_KestrelStressTest#testNameId4971464264492862489\r\n\r\n```\r\nAssert.True() Failure\r\nExpected: True\r\nActual:   False\r\n   at Microsoft.AspNetCore.Server.Kestrel.FunctionalTests.ResponseTests.<HttpsConnectionClosedWhenResponseDoesNotSatisfyMinimumDataRate>d__66.MoveNext() in C:\\b\\w\\33bdfc1cae7b2a38\\modules\\KestrelHttpServer\\test\\Kestrel.FunctionalTests\\ResponseTests.cs:line 2611\r\n--- End of stack trace from previous location where exception was thrown ---\r\n--- End of stack trace from previous location where exception was thrown ---\r\n--- End of stack trace from previous location where exception was thrown ---\r\n```\r\n\r\nIt would be nice if we could add descriptive error messages to Assert.Trues going forward too."},{"Id":"7698408620","Type":"IssuesEvent","CreatedAt":"2018-05-18T23:07:59","Actor":"mikeharder","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/issues/2197","RelatedDescription":"Reopened issue \"Flaky test: HttpsConnectionClosedWhenResponseDoesNotSatisfyMinimumDataRate\" (#2197) at aspnet/KestrelHttpServer","RelatedBody":"http://aspnetci/viewLog.html?buildId=360375&tab=buildResultsDiv&buildTypeId=Lite_KestrelStressTest#testNameId4971464264492862489\r\n\r\n```\r\nAssert.True() Failure\r\nExpected: True\r\nActual:   False\r\n   at Microsoft.AspNetCore.Server.Kestrel.FunctionalTests.ResponseTests.<HttpsConnectionClosedWhenResponseDoesNotSatisfyMinimumDataRate>d__66.MoveNext() in C:\\b\\w\\33bdfc1cae7b2a38\\modules\\KestrelHttpServer\\test\\Kestrel.FunctionalTests\\ResponseTests.cs:line 2611\r\n--- End of stack trace from previous location where exception was thrown ---\r\n--- End of stack trace from previous location where exception was thrown ---\r\n--- End of stack trace from previous location where exception was thrown ---\r\n```\r\n\r\nIt would be nice if we could add descriptive error messages to Assert.Trues going forward too."}],"ResultType":"GitHubEvent"},"Razor":{"Events":[{"Id":"7700091558","Type":"PullRequestEvent","CreatedAt":"2018-05-19T20:06:25","Actor":"rynowak","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/Razor/pull/2360","RelatedDescription":"Merged pull request \"Fix mef attributes project path provider\" (#2360) at aspnet/Razor","RelatedBody":""},{"Id":"7700038669","Type":"PullRequestEvent","CreatedAt":"2018-05-19T19:28:04","Actor":"rynowak","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Razor/pull/2360","RelatedDescription":"Opened pull request \"Fix mef attributes project path provider\" (#2360) at aspnet/Razor","RelatedBody":""},{"Id":"7698048151","Type":"IssuesEvent","CreatedAt":"2018-05-18T21:11:02","Actor":"mkArtakMSFT","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Razor/issues/2359","RelatedDescription":"Closed issue \"New file type (e.g. 'csjs') implementing Razor engine to use C# code with javascript outside of cshtml file\" (#2359) at aspnet/Razor","RelatedBody":"Render the js code into the file by something like @Html.RazorJavascript(\"~/Scripts/code.csjs\")"},{"Id":"7697876136","Type":"IssuesEvent","CreatedAt":"2018-05-18T20:29:37","Actor":"Everest84","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Razor/issues/2359","RelatedDescription":"Opened issue \"New file type (e.g. 'csjs') implementing Razor engine to use C# code with javascript outside of cshtml file\" (#2359) at aspnet/Razor","RelatedBody":"Render the js code into the file by something like @Html.Partial(\"code.csjs\")"},{"Id":"7692602917","Type":"PullRequestEvent","CreatedAt":"2018-05-17T22:28:22","Actor":"NTaylorMullen","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/Razor/pull/2358","RelatedDescription":"Merged pull request \"Add `ProjectPathProvider` abstract for document tracker creation.\" (#2358) at aspnet/Razor","RelatedBody":"- First iteration of live share replaced the document tracker factory entirely; however, this will be prone to breaking changes in the future when me make changes to document tracker to not rely on a file path. To pre-emptively prevent breaking changes I added a project path provider that can be overridden in the live share case. Note that one big difference here between old and new is that instead of being a MEF service implementation for the project path resolution we're bringing that to the Workspace service level.\r\n- Added tests to validate the two flows of the default project path provider.\r\n"}],"ResultType":"GitHubEvent"},"Templates":{"Events":[],"ResultType":"GitHubEvent"},"Tooling":{"Events":[{"Id":"7687608828","Type":"IssuesEvent","CreatedAt":"2018-05-17T06:31:53","Actor":"Pichasepong","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Tooling/issues/1072","RelatedDescription":"Closed issue \"can not upload file FTPS. \" (#1072) at aspnet/Tooling","RelatedBody":"I don't understand why can't upload result is false. At the highlights in yellow. Help me.\r\n![2018-05-17_9-21-13](https://user-images.githubusercontent.com/12063904/40155003-9812f0d8-59bb-11e8-82ae-8b8e7576b1a1.png)\r\n![2018-05-17_11-02-28](https://user-images.githubusercontent.com/12063904/40156168-efe61078-59c1-11e8-8c4c-7657ba2dd536.png)\r\n\r\n\r\n"},{"Id":"7686968343","Type":"IssuesEvent","CreatedAt":"2018-05-17T02:31:07","Actor":"Pichasepong","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Tooling/issues/1072","RelatedDescription":"Opened issue \"can not upload file FTPS. \" (#1072) at aspnet/Tooling","RelatedBody":"I don't understand why can't upload result is false. At the highlights in yellow. Help me.\r\n![2018-05-17_9-21-13](https://user-images.githubusercontent.com/12063904/40153549-85278454-59b4-11e8-9b07-621a5de873f8.png)\r\n"},{"Id":"7686951810","Type":"IssuesEvent","CreatedAt":"2018-05-17T02:25:02","Actor":"Pichasepong","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Tooling/issues/1060","RelatedDescription":"Closed issue \"Problems .net core 1.0.1 vs 2015 tooling preview 2 error logs file.Help Me. \" (#1060) at aspnet/Tooling","RelatedBody":"Problems installing on Server 2012 R2 ,Dot net core 1.0.1 vs 2015 tooling preview 2 error logs file.\r\n\r\n![product_dotnetcoreerror](https://user-images.githubusercontent.com/12063904/31985990-040a5f72-b991-11e7-9356-ddd06160a87c.jpg)\r\n"},{"Id":"7582805417","Type":"IssuesEvent","CreatedAt":"2018-04-25T06:34:01","Actor":"TheAlphamerc","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Tooling/issues/1071","RelatedDescription":"Opened issue \" Unable to start debugging\" (#1071) at aspnet/Tooling","RelatedBody":"The project is success fully build but unable to start debugger. See [here][2018-04-25_11-20-19.7244.Ide.log](https://github.com/aspnet/Tooling/files/1945717/2018-04-25_11-20-19.7244.Ide.log) for more details. \r\n\r\n\r\n\r\n\r\n"},{"Id":"7576035394","Type":"IssuesEvent","CreatedAt":"2018-04-24T05:17:55","Actor":"barrytang","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Tooling/issues/1070","RelatedDescription":"Closed issue \"Visual studio freezes when I run add-migration \" (#1070) at aspnet/Tooling","RelatedBody":"I have enabled migrations and added migrations within my project previously. However now when I run add-migration visual studio freezes and I need to close visual studio via the task manger."},{"Id":"7567897452","Type":"IssuesEvent","CreatedAt":"2018-04-22T14:52:17","Actor":"rberger247","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Tooling/issues/1070","RelatedDescription":"Opened issue \"Visual studio freezes when I run add-migration \" (#1070) at aspnet/Tooling","RelatedBody":"I have enabled migrations and added migrations within my project previously. However now when I run add-migration visual studio freezes and I need to close visual studio via the task manger."}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"7671761413","Type":"IssuesEvent","CreatedAt":"2018-05-14T16:32:50","Actor":"jkotalik","Repository":"aspnet/Announcements","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Announcements/issues/301","RelatedDescription":"Opened issue \"HttpsRedirectionMiddleware will not redirect to HTTPS if no port is available\" (#301) at aspnet/Announcements","RelatedBody":"We have changed the behavior of the HttpsRedirectionMiddleware between 2.1.0-preview2 to 2.1.0-rc1. Instead of always redirecting a request to HTTPS, we will now not redirect to HTTPS if no port is available. The HTTPS port can be specified by setting ```HttpsRedirectionOptions.HttpsPort```, setting the ASPNETCORE_HTTPS_PORT environment variable, or by setting an HTTPS url in launchsettings.json.\r\n\r\nIf you want to continue keeping the original behavior the HttpsRedirectionMiddleware which redirects to port 443, you can set the ```HttpsRedirectionOptions.HttpsPort = 443```.\r\n \r\n---\r\n\r\n*Please use aspnet/BasicMiddleware#329 for further discussion.*"},{"Id":"7644982634","Type":"IssuesEvent","CreatedAt":"2018-05-08T17:07:05","Actor":"blowdart","Repository":"aspnet/Announcements","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Announcements/issues/300","RelatedDescription":"Opened issue \"Microsoft Security Advisory ASPNETCore-Mar18: ASP.NET Core Denial Of Service Vulnerability\" (#300) at aspnet/Announcements","RelatedBody":"# Microsoft Security Advisory ASPNETCore-Mar18: ASP.NET Core Denial Of Service Vulnerability\r\n\r\n## Executive Summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in ASP.NET Core 2.0.\r\nThis advisory also provides guidance on what developers can do to update their applications correctly.\r\n\r\nMicrosoft made an internal discovery of a security vulnerability in version 2.x of ASP.NET Core where\r\na specially crafted request can cause excess resource consumption in Kestrel.\r\n\r\n## Dicussion\r\n\r\nDiscussion for this issue can be found at https://github.com/aspnet/Kestrel/issues/ **TBD**\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nThere are no mitigations for this issue.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nThe vulnerability also affects any ASP.NET Core 2.0 project if it uses the following package versions, which must also be [updated](#app-update), in addition to addressing your proxy configuration :\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ---------------- | -------------------------\r\nMicrosoft.AspNetCore.Server.Kestrel.Core | 2.0.0, 2.0.1, 2.0.2<br />2.1.0-preview1, 2.1.0-preview2 | 2.0.3<br />2.1.0-rc1-final\r\nMicrosoft.AspNetCore.Server.Kestrel.Transport.Abstractions | 2.0.0, 2.0.1, 2.0.2<br />2.1.0-preview1, 2.1.0-preview2 | 2.0.3<br />2.1.0-rc1-final\r\nMicrosoft.AspNetCore.Server.Kestrel.Transport.Libuv | 2.0.0, 2.0.1, 2.0.2<br />2.1.0-preview1, 2.1.0-preview2 | 2.0.3<br />2.1.0-rc1-final\r\nMicrosoft.AspNetCore.All | 2.0.0, 2.0,3, 2.0.4, 2.0.5, 2.0.6, 2.0.7<br />2.1.0-preview1, 2.1.0-preview2 | 2.0.8<br />2.1.0-rc1-final\r\n\r\n## Advisory FAQ\r\n\r\n### How do I know if I am affected?\r\n\r\n.NET Core has two types of dependencies: direct and transitive. Direct dependencies are dependencies where you specifically add a package to your project, transitive dependencies occur when you add a package to your project that in turn relies on another package.\r\n\r\nFor example, the `Microsoft.AspNetCore.Mvc` package depends on the `Microsoft.AspNetCore.Mvc.Core` package. When you add a dependency on `Microsoft.AspNetCore.Mvc` in your project, you're taking a transitive dependency on `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\nAny application that has a direct or transitive dependency on the [affected packages](#affected-software) can be exposed to the vulnerability.\r\n\r\n### How do I fix the issue?\r\n\r\n---\r\n\r\nIf you're targeting .NET Core 2.x and the `Microsoft.AspNetCore.All` \"metapackage\":\r\n\r\n* Update its version number to 2.0.8 if you have targetted 2.0.x *OR*\r\n* Update its version number to 2.1.0-rc1-final if you have targetted previews of 2.1\r\n\r\nUpdating the metapackage will update the [affected packages](#affected-software)\r\n\r\n---\r\n\r\n.NET Core projects have two types of dependencies: direct and transitive. You must update your projects using the following instructions to address both types of dependency.\r\n\r\n#### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your *csproj* file. They can be fixed by [editing the csproj file](#direct-dependencies) or using NuGet to update the dependency.\r\n\r\n#### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the *project.assets.json* file contained in the obj directory of your project.\r\n\r\nThe *project.assets.json* files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\n#### <a name=\"direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Server.Kestrel.Core\" Version=\"2.0.1\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to a [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `Microsoft.AspNetCore.Server.Kestrel.Core` version 2.0.1.\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `Microsoft.AspNetCore.Server.Kestrel.Core` to a [fixed package number](#affected-software). Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Server.Kestrel.Core\" Version=\"2.0.3 />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\nAfter you've addressed all of your direct dependencies, you must review your transitive dependencies.\r\n\r\n#### Discovering and fixing transitive dependencies\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can [review the *project.assets.json* file](#project-assets-json).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio 2017, and then press Ctrl+; to activate the search in Solution Explorer. Search for each of the [vulnerable packages](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a>Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `System.Security.Cryptography.Xml/4.4.0` is a reference to version 4.4.0 of `System.Security.Cryptography.Xml`.\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\n##### Fixing transitive dependencies\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `Microsoft.AspNetCore.Server.Kestrel.Core` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Server.Kestrel.Core\" Version=\"2.0.3\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n#### Rebuilding your application\r\n\r\nFinally you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including Terms and Conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue where you can ask questions.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Revisions\r\n\r\nV1.0 (May 8, 2018): Advisory published.\r\n\r\n_Version 1.0_"},{"Id":"7630948535","Type":"IssuesEvent","CreatedAt":"2018-05-04T21:52:58","Actor":"danroth27","Repository":"aspnet/Announcements","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Announcements/issues/299","RelatedDescription":"Opened issue \"ASP.NET Core WebHooks moved out of ASP.NET Core 2.1\" (#299) at aspnet/Announcements","RelatedBody":"We are moving ASP.NET Core WebHooks out of the ASP.NET Core 2.1 to give more time to validate the design and implementation. We will continue to ship previews ASP.NET Core WebHooks packages, but they not ship as stable packages as part of the ASP.NET Core 2.1 release.\r\n\r\n### Why?\r\n\r\n[ASP.NET Core WebHooks](https://github.com/aspnet/webhooks) is only a partial port of [ASP.NET WebHooks](https://github.com/aspnet/aspnetwebhooks) and hasn't received sufficient attention during the ASP.NET Core 2.1 release for us to feel comfortable shipping it at this time. \r\n"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"996435611354447872","CreatedAt":"2018-05-15T17:02:17+00:00","UserScreenname":"aspnet","Text":"And we're live! Join us as https://t.co/3dFxSj11IQ https://t.co/PAZDWtuk1r","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":11,"FavoriteCount":3,"RawContent":null},{"Id":"996432221497057285","CreatedAt":"2018-05-15T16:48:49+00:00","UserScreenname":"aspnet","Text":"Starting soon - join us for an MVC Functional Testing overview with Javier Calvarro Nelson at… https://t.co/FavBvWbz0w","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":6,"FavoriteCount":3,"RawContent":null},{"Id":"996146847939883009","CreatedAt":"2018-05-14T21:54:50+00:00","UserScreenname":"aspnet","Text":"Tuesday at 10 Pacific / 18 GMT - #ASPNET Community Standup\n\nMVC Functional Testing with Javier Calvarro Nelson… https://t.co/twYeUUd1RO","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":30,"FavoriteCount":15,"RawContent":null},{"Id":"993841130545426433","CreatedAt":"2018-05-08T13:12:44+00:00","UserScreenname":"aspnet","Text":"Jeff will be pair-programming using @VisualStudio Live Share on an @aspnet Core project with YOU at the Live Share… https://t.co/i0sm9cCOGz","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":13,"FavoriteCount":2,"RawContent":null},{"Id":"991768334419902464","CreatedAt":"2018-05-02T19:56:11+00:00","UserScreenname":"aspnet","Text":"Blazor 0.3.0 experimental release now available\n\nhttps://t.co/2ixEeVbBbN https://t.co/3VB4sDxvwR","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":484,"FavoriteCount":271,"RawContent":null},{"Id":"991361559426314241","CreatedAt":"2018-05-01T16:59:49+00:00","UserScreenname":"aspnet","Text":"We're live! Join us at https://t.co/4Ioo9jNSN2 https://t.co/uGAnWHOWD5","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":7,"FavoriteCount":4,"RawContent":null},{"Id":"991092623849865217","CreatedAt":"2018-04-30T23:11:09+00:00","UserScreenname":"aspnet","Text":"Tuesday at 10 Pacific / 18 GMT - #ASPNET Community Standup\n\nSignalR and Project Bedrock updates with @davidfowl… https://t.co/B8XmP5YkCW","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":76,"FavoriteCount":35,"RawContent":null},{"Id":"989160632908791808","CreatedAt":"2018-04-25T15:14:07+00:00","UserScreenname":"aspnet","Text":"Do you have questions about how to work with ASPNet Core Identity?  Check out the video from yesterday's session wi… https://t.co/hjaoJRCR7l","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":48,"FavoriteCount":14,"RawContent":null},{"Id":"988913487190544384","CreatedAt":"2018-04-24T22:52:03+00:00","UserScreenname":"aspnet","Text":"We're live on the #ASPNET Community Standup! Join us! https://t.co/4Ioo9jNSN2","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":10,"FavoriteCount":4,"RawContent":null},{"Id":"988873497614024704","CreatedAt":"2018-04-24T20:13:08+00:00","UserScreenname":"aspnet","Text":"Join us for the weekly #ASPNET Community Standup today at 3:45 PM Pacific / 23:45 GMT at https://t.co/4Ioo9jNSN2 https://t.co/dCyzj19KZU","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":10,"FavoriteCount":4,"RawContent":null},{"Id":"988762250331676673","CreatedAt":"2018-04-24T12:51:05+00:00","UserScreenname":"aspnet","Text":"Our @csharpfritz and @coolcsh will be broadcasting LIVE from @ch9 studios and answering your questions today about… https://t.co/d37Sob12rv","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":24,"FavoriteCount":10,"RawContent":null},{"Id":"986683993180590080","CreatedAt":"2018-04-18T19:12:50+00:00","UserScreenname":"aspnet","Text":"Tune in to the @PhillyDotNet user group today at 6pm ET / 3pm PT to learn more about Blazor from our MVP Chris Gome… https://t.co/D6svQPb95X","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":7,"FavoriteCount":2,"RawContent":null},{"Id":"986310111256858624","CreatedAt":"2018-04-17T18:27:09+00:00","UserScreenname":"aspnet","Text":"Blazor 0.2.0 release now available https://t.co/rFE8xvlvM3","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":249,"FavoriteCount":148,"RawContent":null}]}},"RunOn":"2018-05-20T05:30:13.1409747Z","RunDurationInMilliseconds":8043}