{"Data":{"Blog":{"FeedItems":[{"Title":"Deprecating packages on nuget.org","PublishedOn":"2019-09-30T18:29:23+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We are excited to announce that nuget.org now supports package deprecation. This has been a long standing ask that will help the ecosystem use supported packages. As a package publisher on nuget.org,...","Href":"https://devblogs.microsoft.com/nuget/deprecating-packages-on-nuget-org/","RawContent":null},{"Title":"New and improved NuGet Search is here!","PublishedOn":"2019-08-23T03:31:26+00:00","CommentsCount":11,"FacebookCount":0,"Summary":"Itâ€™s been a long time coming, and today we are excited to announce the new and improved search on NuGet.org leveraging Azure Search. We want to start this post with a huge thanks to you, the NuGet...","Href":"https://devblogs.microsoft.com/nuget/new-and-improved-nuget-search/","RawContent":null},{"Title":"Surfacing GitHub Usage for packages on NuGet.org","PublishedOn":"2019-07-17T20:00:23+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"There are several criteria you can use today to evaluate NuGet packages. We received feedback that you would like even more information to help choose the right packages. We&#8217;re excited to...","Href":"https://devblogs.microsoft.com/nuget/surfacing-github-usage-for-packages-on-nuget-org/","RawContent":null},{"Title":"NuGet Spring 2019 Roadmap","PublishedOn":"2019-04-10T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We published our last NuGet roadmap in June last year. Many of the features announced were major additions to NuGet and we have been hard at work to implement those over the last few months. In this...","Href":"https://devblogs.microsoft.com/nuget/nuget-spring-2019-roadmap/","RawContent":null},{"Title":"Enable repeatable package restores using a lock file","PublishedOn":"2018-12-17T08:00:00+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"With PackageReference, NuGet always tries to produce the same closure of package dependencies if the input package reference list has not changed. However, there are a few scenarios where it may not...","Href":"https://devblogs.microsoft.com/nuget/enable-repeatable-package-restores-using-a-lock-file/","RawContent":null},{"Title":"Lock down your dependencies using configurable trust policies","PublishedOn":"2018-12-05T08:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"For the past several months we have focused on various features to improve package security and trust. Around a year back, we had announced our plans on various signing functionalities that we have...","Href":"https://devblogs.microsoft.com/nuget/lock-down-your-dependencies-using-configurable-trust-policies/","RawContent":null},{"Title":"Improved package debugging experience with the NuGet.org symbol server","PublishedOn":"2018-11-16T08:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Starting today, you can publish symbol packages to the NuGet.org symbol server. With NuGet.org as a single service provider for libraries and symbols, package authors and consumers will have a...","Href":"https://devblogs.microsoft.com/nuget/improved-package-debugging-experience-with-the-nuget-org-symbol-server/","RawContent":null},{"Title":"Introducing Source Code Link for NuGet packages","PublishedOn":"2018-08-27T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"NuGet.org now supports surfacing source code repository link for NuGet packages. This will enable package authors to surface both the project&#8217;s website and the source repository using the...","Href":"https://devblogs.microsoft.com/nuget/introducing-source-code-link-for-nuget-packages/","RawContent":null},{"Title":"NuGet.org starts repo-signing packages","PublishedOn":"2018-08-10T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"In May, we implemented Stage 1 and enabled support for any NuGet.org user to submit signed packages to NuGet.org. Today, we are announcing Stage 2 of our NuGet package signing journey &#8211; tamper...","Href":"https://devblogs.microsoft.com/nuget/introducing-repository-signatures/","RawContent":null},{"Title":"NuGet Summer 2018 Roadmap","PublishedOn":"2018-07-02T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"This blog post provides insights into the NuGet team plans for the upcoming quarter (July &#8211; Sep 2018). In the March 2018 NuGet Spring 2018 Roadmap, we had outlined Package Signing,...","Href":"https://devblogs.microsoft.com/nuget/nuget-summer-2018-roadmap/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"10539495923","Type":"IssuesEvent","CreatedAt":"2019-10-02T05:24:04","Actor":"donnie-msft","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7598","RelatedDescription":"Opened issue \"Certificate error on https://nuget.smbsrc.net\" (#7598) at NuGet/NuGetGallery","RelatedBody":"@xuzhg commented on [Mon Sep 30 2019](https://github.com/NuGet/Home/issues/8647)\n\nIt's failed to upload the symbols to the symbols sever, the error message:\r\n\r\n![image](https://user-images.githubusercontent.com/9426627/65919348-e4818500-e390-11e9-87df-4ac052329dcc.png)\r\n\r\n\r\nI tried the nuget.exe 5.2.0 version. It's same error message. \r\n\r\nHow can we upload the symbols server again?\r\n\n\n---\n\n@donnie-msft commented on [Tue Oct 01 2019](https://github.com/NuGet/Home/issues/8647#issuecomment-537340606)\n\n@xuzhg thanks for letting us know, moving to NuGet Gallery\n\n"},{"Id":"10538374509","Type":"PullRequestEvent","CreatedAt":"2019-10-02T00:17:39","Actor":"zhhyu","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/7596","RelatedDescription":"Merged pull request \"Revert \"Upgrade to AppInsights v2.10 (#7499)\"\" (#7596) at NuGet/NuGetGallery","RelatedBody":"This reverts commit d199584d61d92757081f2f4be3fe39d6aa65860d."},{"Id":"10538322835","Type":"IssuesEvent","CreatedAt":"2019-10-02T00:04:22","Actor":"loic-sharma","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7597","RelatedDescription":"Opened issue \"Fix gallery nightly deployments\" (#7597) at NuGet/NuGetGallery","RelatedBody":"Update this: https://nuget.visualstudio.com/NuGetBuild/_git/NuGetBuild?path=%2FGalleryFunctionalConfig%2FDev.json&version=GBmaster&line=2&lineStyle=plain&lineEnd=3&lineStartColumn=1&lineEndColumn=1\r\n\r\nUsed by: https://github.com/NuGet/NuGetGallery/blob/23d3aeb8cc96f8038df5473f8392e543fb840a0b/tests/NuGetGallery.LoadTests/LoadTests.cs#L123\r\n\r\nFunctional tests will need to use the latest NuGetBuild commit"},{"Id":"10538298068","Type":"PullRequestEvent","CreatedAt":"2019-10-01T23:58:21","Actor":"zhhyu","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/7596","RelatedDescription":"Opened pull request \"Revert \"Upgrade to AppInsights v2.10 (#7499)\"\" (#7596) at NuGet/NuGetGallery","RelatedBody":"This reverts commit d199584d61d92757081f2f4be3fe39d6aa65860d."},{"Id":"10538281004","Type":"PullRequestEvent","CreatedAt":"2019-10-01T23:53:58","Actor":"scottbommarito","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/7595","RelatedDescription":"Opened pull request \"Add GalleryTools command to delete unconfirmed accounts\" (#7595) at NuGet/NuGetGallery","RelatedBody":"https://github.com/nuget/engineering/issues/2707\r\n\r\nI felt writing a tool to use the `DeleteAccountService` to delete these accounts was safer than writing a large `DELETE FROM Users` query, as the `DeleteAccountService` properly removes all credentials and other data and doesn't rely on foreign key deletion cascades."},{"Id":"10536191815","Type":"IssuesEvent","CreatedAt":"2019-10-01T18:21:08","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7227","RelatedDescription":"Closed issue \"[Azure Search] Add V3 monitoring check to verify that all packages make it into search index\" (#7227) at NuGet/NuGetGallery","RelatedBody":"We can't use this for fast reaction to pipeline outage but will give us a completeness guarantee never before implemented for search."},{"Id":"10529187913","Type":"IssuesEvent","CreatedAt":"2019-10-01T00:14:34","Actor":"karann-msft","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7594","RelatedDescription":"Opened issue \"Surface PackageType in the search API and NuGet.org search syntax\" (#7594) at NuGet/NuGetGallery","RelatedBody":"Users can specify a package type - https://docs.microsoft.com/en-us/nuget/create-packages/set-package-type\r\n\r\nIt should be possible to search for all DotnetCliTool packages on NuGet.org\r\n\r\nProposal\r\nExpose a new query parameter called  `packageType`\r\n\r\nFor example, the following query would return all dotnet CLI tools on NuGet.org that match the search term\r\n```\r\nhttps://azuresearch-usnc.nuget.org/query?q=codegenerator&packageType=DotnetCliTool\r\n```"},{"Id":"10528356760","Type":"IssuesEvent","CreatedAt":"2019-09-30T21:23:56","Actor":"nkolev92","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7593","RelatedDescription":"Opened issue \"NuGetGallery (and other service builds) do not lock down the sources properly\" (#7593) at NuGet/NuGetGallery","RelatedBody":"### For issues regarding the NuGet client tools (the Visual Studio extension, NuGet.exe command line tool, etc.), file a bug on [NuGet Home](https://github.com/nuget/home/issues).\r\n\r\n### Describe the bug\r\n\r\nNuGetGallery builds do not lock down the sources. \r\n\r\nhttps://github.com/NuGet/NuGetGallery/blob/dev/NuGet.config\r\nshould be: \r\n\r\n```xml\r\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<configuration>\r\n  <config>\r\n    <add key=\"repositorypath\" value=\".\\packages\" />\r\n  </config>\r\n  <packageRestore>\r\n    <add key=\"enabled\" value=\"True\" />\r\n    <add key=\"automatic\" value=\"True\" />\r\n  </packageRestore>\r\n  <packageSources>\r\n    <clear/>\r\n    <add key=\"nuget\" value=\"https://api.nuget.org/v3/index.json\" />\r\n    <add key=\"nugetbuild\" value=\"https://dotnet.myget.org/F/nuget-build/api/v3/index.json\" />\r\n    <add key=\"dotnetcore\" value=\"https://dotnet.myget.org/F/dotnet-core/api/v3/index.json\" />\r\n  </packageSources>\r\n  <activePackageSource>\r\n    <add key=\"All\" value=\"(Aggregate source)\" />\r\n  </activePackageSource>\r\n  <disabledPackageSources>\r\n\t    <clear />\r\n  </disabledPackageSources>\r\n</configuration>\r\n```\r\n\r\nNote the clear tags in disabledPackageSources and package sources. \r\n\r\n//cc @loic-sharma @joelverhagen \r\n\r\n### To Reproduce\r\nRun restore :)\r\n\r\n### Expected behavior\r\nDon't use machine specific sources. \r\n\r\n### Screenshots\r\nN/A\r\n\r\n### Additional context\r\nEncountered this while investigating the issues with builds in the NuGet Deployment repo. \r\nI can fix the gallery one with a PR, but I can't easily change all the public/private repos as I simply don't know them all :) "},{"Id":"10528246291","Type":"IssuesEvent","CreatedAt":"2019-09-30T21:07:45","Actor":"devlead","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7592","RelatedDescription":"Opened issue \"Package download stats not updating\" (#7592) at NuGet/NuGetGallery","RelatedBody":"### Describe the bug\r\n\r\n2 days ago we released Cake version 0.35.0, normally it should at least be a couple of thousands of downloads, it's still 0.\r\n\r\n### To Reproduce\r\n\r\nhttps://www.nuget.org/packages/Cake.Tool/0.35.0\r\nhttps://www.nuget.org/packages/Cake.CoreCLR/0.35.0\r\nhttps://www.nuget.org/packages/Cake/0.35.0\r\n\r\n### Expected behavior\r\n\r\nDownload count to increase each day.\r\n\r\n### Screenshots\r\n![image](https://user-images.githubusercontent.com/1647294/65917169-0dc50400-e3d7-11e9-8bdb-c0ed1bb2e1b7.png)\r\n![image](https://user-images.githubusercontent.com/1647294/65917004-bb83e300-e3d6-11e9-85b5-fe15e387906c.png)\r\n![image](https://user-images.githubusercontent.com/1647294/65917094-ea9a5480-e3d6-11e9-8db5-85357e39b3b1.png)\r\n"},{"Id":"10528156384","Type":"PullRequestEvent","CreatedAt":"2019-09-30T20:55:29","Actor":"loic-sharma","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/7591","RelatedDescription":"Merged pull request \"[HOTFIX] Show pending organization members\" (#7591) at NuGet/NuGetGallery","RelatedBody":""},{"Id":"10527944154","Type":"PullRequestEvent","CreatedAt":"2019-09-30T20:26:34","Actor":"loic-sharma","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/7591","RelatedDescription":"Opened pull request \"[HOTFIX] Show pending organization members\" (#7591) at NuGet/NuGetGallery","RelatedBody":""}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"10539495881","Type":"IssuesEvent","CreatedAt":"2019-10-02T05:24:03","Actor":"donnie-msft","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8647","RelatedDescription":"Closed issue \"Certificate error on https://nuget.smbsrc.net\" (#8647) at NuGet/Home","RelatedBody":"It's failed to upload the symbols to the symbols sever, the error message:\r\n\r\n![image](https://user-images.githubusercontent.com/9426627/65919348-e4818500-e390-11e9-87df-4ac052329dcc.png)\r\n\r\n\r\nI tried the nuget.exe 5.2.0 version. It's same error message. \r\n\r\nHow can we upload the symbols server again?\r\n"},{"Id":"10538197861","Type":"IssuesEvent","CreatedAt":"2019-10-01T23:33:12","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/6166","RelatedDescription":"Closed issue \"Nuget.exe update solution.sln does not use projects from solution but from directory hierarchy\" (#6166) at NuGet/Home","RelatedBody":"## Problem\r\n\r\nNuGet product used: NuGet.exe\r\nNuGet version (4.3.0.4406)\r\n\r\nNuget.exe does not use the projects from the solution file when updating nuget packages, it only updates projects that are on the same directory level as the .sln file or below.\r\n\r\n## Steps to reproduce\r\n\r\nTo reproduce see the archive attached.\r\nIt contains a Visual Studio solution and two projects. Both projects have the package GitVersion v3.6.0 installed. Extract it to some %directory%.\r\nThe solution file is under ClassLibrary1\\ClassLibrary1.sln, next to it is the first project file ClassLibrary1\\ClassLibrary1\\ClassLibrary1.csproj.\r\nThe second project is at the top level of the zip: ClassLibrary2\\ClassLibrary2.csproj.\r\n\r\nNow you run '%directory%\\ClassLibrary1>nuget update ClassLibrary1.sln -Id GitVersion -Version 3.6.5' on the command line.\r\nNuget states is has found one project with a packages.config file:\r\n'Found 1 project with a packages.config file. (ClassLibrary1.csproj)'\r\n\r\nAs another test I removed all the project entries from the solution file, creating an empty solution.\r\nRunning the update command on that solution produces the same result as before! ClassLibrary1.csproj gets a new version of GitVersion installed.\r\n\r\nThis raises the question if this behavior is desired and when so, why do I have to specify a solution if the content does not matter?\r\n\r\n### Sample Project\r\n[nugetupdate.zip](https://github.com/NuGet/Home/files/1467299/nugetupdate.zip)\r\n\r\n"},{"Id":"10538195342","Type":"IssuesEvent","CreatedAt":"2019-10-01T23:32:33","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/7029","RelatedDescription":"Closed issue \"`nuget update solution.sln` considers all packages.config instead of only the solution project's\" (#7029) at NuGet/Home","RelatedBody":"Please read the following information before posting the issue.\r\n\r\n## Details about Problem\r\n*Product:* `nuget.exe`\r\n*Version:* `NuGet Version: 4.6.2.5055`\r\n*OS*: Irrelevant\r\n\r\n\r\n## Repro:\r\n\r\n1. Create a solution\r\n2. Add 2 projects to solution, both with `packages.config`\r\n3. Remove one of the projects from solution\r\n4. issue `nuget update myproject.sln`\r\n5. Realize that nuget updates all projects\r\n\r\n## Cause of the isssue:\r\n\r\nRelevant code https://github.com/NuGet/NuGet.Client/blob/release-4.6.1-rtm/src/NuGet.Clients/NuGet.CommandLine/Commands/UpdateCommand.cs#L121\r\n\r\n```csharp\r\n            string[] packagesConfigFiles = Directory.GetFiles(\r\n                solutionDir, \"*.config\", SearchOption.AllDirectories);\r\n\r\n            var projects = packagesConfigFiles.Where(s => Path.GetFileName(s).StartsWith(\"packages.\", StringComparison.OrdinalIgnoreCase))\r\n                                              .Select(s => GetProject(s, projectContext))\r\n                                              .Where(p => p != null)\r\n                                              .Distinct()\r\n                                              .ToList();\r\n```\r\n\r\nThis piece of code considers every directory with a `packages.config` as a project of the solution which is _incorrect_ in many cases.\r\nAlso, the input file is used only to determine the base path under which packages.configs are searched.\r\n\r\n### Expected functionality\r\n\r\nCross reference solution file to determine which projects actually belong to the solution file. Maybe `Microsoft.Build.Construction.SolutionFile` could be of help here.\r\n\r\n### Why do I want to do it\r\n\r\nThere are some large solutions that share some of the directories/solutions. They, however have to be updated with different nuget configs.\r\n"},{"Id":"10537987977","Type":"IssuesEvent","CreatedAt":"2019-10-01T22:45:40","Actor":"JaimeStill","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8654","RelatedDescription":"Opened issue \"Allow SDK-style Package Installs\" (#8654) at NuGet/Home","RelatedBody":"## Details about Problem\r\n\r\nMost of the work I do with .Net Core is in an offline environment. Currently, if I want to update the global nuget cache on my offline environment, I have to update dependencies with the `dotnet` CLI as follows:\r\n\r\n```\r\ndotnet add package <package> --package-directory <path-to-directory>\r\n```\r\n\r\nThis is because of:\r\n\r\nWhere I work, I have access to the `nuget` CLI, but cannot install .NET Core SDK on my internet-connected machine. This means that all of my dependency updates have to be done at home. "},{"Id":"10537679860","Type":"IssuesEvent","CreatedAt":"2019-10-01T21:47:07","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8648","RelatedDescription":"Closed issue \"Plugin: A task was canceled - early cancellation in plugin infrastructure cause restore frequent failures\" (#8648) at NuGet/Home","RelatedBody":"The scenario is NuGet restore with one or more protected feeds (in every report we've been dealing with Azure Devops feeds, but that's because majority of the reports are internal). \r\nÂ \r\nThe manifestation of this is restore failing with \"A task was canceled\" exception.\r\nThis is something that happens with the latest NuGet (5.2, 5.3 were both tested) and the latest version of the artifacts-credprovider 0.1.18.\r\nÂ \r\nThe current reasoning of the investigation is that we have 2 issues: \r\n\t1. Early cancellation of operations that we canâ€™t recover from (plugin startup)\r\n\t1. Threadpool starvation. \r\nÂ \r\nA child of https://github.com/NuGet/Home/issues/8528. \r\n\r\nThe plugin infra cannot handle cancellations that happen during the plugin init process so we simply don't honor those said cancellations. \r\n\r\nThis issue tracks the first problem"},{"Id":"10537313341","Type":"IssuesEvent","CreatedAt":"2019-10-01T20:51:32","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8653","RelatedDescription":"Opened issue \"Improve ConcurrencyUtilities (reduce CPU usage)\" (#8653) at NuGet/Home","RelatedBody":"`ConcurrencyUtilities.ExecuteWithFileLockedAsync` is used for locking both between processes and within a single process. It works by looping trying to exclusively open a file and sleeping just 10ms when an exception is caught.\r\n\r\nOn a solution with a large number of projects that use the same package, this can cause a lot of wasted CPU cycles because each project will spinlock until the file can be opened.\r\n\r\nThe exclusive file lock is a good idea for concurrent restores across different processes, but NuGet should be more intelligent within a process about locking and waiting."},{"Id":"10536721157","Type":"IssuesEvent","CreatedAt":"2019-10-01T19:31:13","Actor":"nguerrera","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8652","RelatedDescription":"Opened issue \"Race condition in nuget msbuild sdk resolver can cause intermittent failures\" (#8652) at NuGet/Home","RelatedBody":"See repro steps in https://github.com/dotnet/arcade/issues/2377\r\n\r\nWith a clear global packages folder + pristine working directory +  a large solution importing msbuild sdks via nuget, there can be failures to resolve the SDK when opening the solution. Attaching a debugger shows this exception as a possible root cause:\r\n\r\n```\r\nSystem.IO.IOException\r\n  HResult=0x80070020\r\n  Message=The process cannot access the file 'C:\\Users\\nicholg\\AppData\\Local\\Temp\\NuGetScratch\\lock\\19d6b8e17ce108081ea2107ff2d8329b6568f80d' because it is being used by another process\r\n```\r\n"},{"Id":"10534585635","Type":"IssuesEvent","CreatedAt":"2019-10-01T15:04:37","Actor":"jc1001","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8651","RelatedDescription":"Opened issue \"NuGet cli install with -DependencyVersion Lowest parameter not working as expected\" (#8651) at NuGet/Home","RelatedBody":"## Details about Problem\r\n\r\nNuGet product used: NuGet.exe\r\nNuGet version: 5.2.0\r\nOS version: Windows 10, Version 1903\r\nWorked before? Not as far as I can tell\r\n\r\n## Detailed repro steps so we can see the same problem\r\n\r\nI have a NuGet package with 2 dependencies:\r\n```xml\r\n<dependencies>\r\n      <dependency id=\"YamlDotNet.Signed\" version=\"5.1.0\" />\r\n      <dependency id=\"Newtonsoft.Json\" version=\"8.0.1\" />\r\n</dependencies>\r\n```\r\nBoth of these are valid dependencies that have higher versions available.\r\n\r\nWhen I install my package (using the NuGet cli tool) , I use the following syntax:\r\n```\r\nnuget.exe install MyPackage -Source c:\\Temp\\Packages -Source https://api.nuget.org/v3/index.json -DependencyVersion Lowest -OutputDirectory c:\\Temp\\Output\r\n```\r\nIn this case, I would expect the output directory (c:\\Temp\\Output) to contain the following packages:\r\n```\r\nMyPackage.1.0.0\r\nNewtonsoft.Json.8.0.1\r\nYamlDotNet.Signed.5.1.0\r\n```\r\n\r\nIt however contains the following:\r\n```\r\nMyPackage.1.0.0\r\nNewtonsoft.Json.8.0.1\r\nYamlDotNet.6.0.0\r\nYamlDotNet.Signed.6.0.0\r\n```\r\n### Verbose Logs\r\n```\r\nNuGet Version: 5.2.0.6090\r\nFeeds used:\r\n  c:\\Temp\\Packages\r\n  https://api.nuget.org/v3/index.json\r\n\r\nInstalling package 'MyPackage' to 'c:\\Temp\\Output'.\r\n  CACHE https://api.nuget.org/v3/registration3-gz-semver2/mypackage/index.json\r\n\r\n\r\nAttempting to gather dependency information for package 'MyPackage.1.0.0' with respect to project 'c:\\Temp\\Output', targeting 'Any,Version=v0.0'\r\nPackage MyPackage from source c:\\Temp\\Packages gathered from cache.\r\nPackage MyPackage from source nuget.org gathered from cache.\r\n  CACHE https://api.nuget.org/v3/registration3-gz-semver2/yamldotnet.signed/index.json\r\n  CACHE https://api.nuget.org/v3/registration3-gz-semver2/yamldotnet.signed/page/3.3.1/3.9.0-pre262.json\r\n  CACHE https://api.nuget.org/v3/registration3-gz-semver2/yamldotnet.signed/page/3.9.0-pre263/4.2.2-net200423.json\r\n  CACHE https://api.nuget.org/v3/registration3-gz-semver2/newtonsoft.json/index.json\r\n  CACHE https://api.nuget.org/v3/registration3-gz-semver2/yamldotnet.signed/page/4.2.2-pre0424/6.0.0.json\r\n  CACHE https://api.nuget.org/v3/registration3-gz-semver2/system.collections/index.json\r\n  CACHE https://api.nuget.org/v3/registration3-gz-semver2/yamldotnet/index.json\r\n  CACHE https://api.nuget.org/v3/registration3-gz-semver2/yamldotnet/page/2.3.0-rc/3.9.0-pre239.json\r\n  CACHE https://api.nuget.org/v3/registration3-gz-semver2/yamldotnet/page/3.9.0-pre240/4.1.1-pre0355.json\r\n  CACHE https://api.nuget.org/v3/registration3-gz-semver2/yamldotnet/page/4.1.1-pre0356/8.0.0-emit-default-values0565.json\r\n  CACHE https://api.nuget.org/v3/registration3-gz-semver2/system.runtime/index.json\r\nTotal number of results gathered : 17\r\nGathering dependency information took 201.43 ms\r\nSummary of time taken to gather dependencies per source :\r\nc:\\Temp\\Output\t-\t11.53 ms\r\nhttps://api.nuget.org/v3/index.json\t-\t289.18 ms\r\nc:\\Temp\\Packages\t-\t11.41 ms\r\nAttempting to resolve dependencies for package 'MyPackage.1.0.0' with DependencyBehavior 'Lowest'\r\nResolving dependency information took 0 ms\r\nResolving actions to install package 'MyPackage.1.0.0'\r\nResolved actions to install package 'MyPackage.1.0.0'\r\nRetrieving package 'MyPackage 1.0.0' from 'c:\\Temp\\Packages'.\r\nRetrieving package 'Newtonsoft.Json 8.0.1' from 'nuget.org'.\r\nRetrieving package 'YamlDotNet 6.0.0' from 'nuget.org'.\r\nRetrieving package 'YamlDotNet.Signed 6.0.0' from 'nuget.org'.\r\nAdding package 'Newtonsoft.Json.8.0.1' to folder 'c:\\Temp\\Output'\r\nAdded package 'Newtonsoft.Json.8.0.1' to folder 'c:\\Temp\\Output'\r\nAdded package 'Newtonsoft.Json.8.0.1' to folder 'c:\\Temp\\Output' from source 'https://api.nuget.org/v3/index.json'\r\nSuccessfully installed 'Newtonsoft.Json 8.0.1' to c:\\Temp\\Output\r\nAdding package 'YamlDotNet.6.0.0' to folder 'c:\\Temp\\Output'\r\nAdded package 'YamlDotNet.6.0.0' to folder 'c:\\Temp\\Output'\r\nAdded package 'YamlDotNet.6.0.0' to folder 'c:\\Temp\\Output' from source 'https://api.nuget.org/v3/index.json'\r\nSuccessfully installed 'YamlDotNet 6.0.0' to c:\\Temp\\Output\r\nAdding package 'YamlDotNet.Signed.6.0.0' to folder 'c:\\Temp\\Output'\r\nAdded package 'YamlDotNet.Signed.6.0.0' to folder 'c:\\Temp\\Output'\r\nAdded package 'YamlDotNet.Signed.6.0.0' to folder 'c:\\Temp\\Output' from source 'https://api.nuget.org/v3/index.json'\r\nSuccessfully installed 'YamlDotNet.Signed 6.0.0' to c:\\Temp\\Output\r\nAdding package 'MyPackage.1.0.0' to folder 'c:\\Temp\\Output'\r\nAdded package 'MyPackage.1.0.0' to folder 'c:\\Temp\\Output'\r\nAdded package 'MyPackage.1.0.0' to folder 'c:\\Temp\\Output' from source 'c:\\Temp\\Packages'\r\nSuccessfully installed 'MyPackage 1.0.0' to c:\\Temp\\Output\r\nExecuting nuget actions took 533.56 ms\r\n```\r\n### Sample Project\r\n\r\nI've attached a zip file that contains the directory structure and necessary files that I've used in the example above.\r\n[Temp.zip](https://github.com/NuGet/Home/files/3676995/Temp.zip)\r\n\r\nThank you and please let me know if you require anything else.\r\n\r\n"},{"Id":"10533043371","Type":"IssuesEvent","CreatedAt":"2019-10-01T12:13:41","Actor":"JaimeStill","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8650","RelatedDescription":"Opened issue \"Provide Detailed Missing Dependency Messages\" (#8650) at NuGet/Home","RelatedBody":"## Details about Problem\r\n\r\nWhen a `dotnet build` fails in an offline environment, it does not provide adequate context regarding the package that was missing and the source it was missing from.\r\n\r\n**`dotnet build` Error**  \r\n```\r\nC:\\Program Files\\dotnet\\sdk\\3.0.100\\Nuget.targets : error : \r\nUnable to load the service index for source https://api.nuget.org/v3/index.json.\r\nC:\\Program Files\\dotnet\\sdk\\3.0.100\\Nuget.targets : error :\r\nNo such host is known.\r\n```\r\n\r\nLikewise, if a warning is encountered when running `dotnet restore` in an offline environment, the warning does not specify the source the missing dependency is missing from.\r\n\r\n**`dotnet restore -s %USERPROFILE%\\.nuget\\packages` Warning Example**  \r\n```\r\nWarning NU1603 : Microsoft.Data.SqlClient 1.0.19249.1 depends on\r\nruntime.native.System.Data.SqlClient.sni (>= 4.4.0) but\r\nruntime.native.System.Data.SqlClient.sni 4.4.0 was not found.\r\nAn approximate best match of runtime.native.System.Data.SqlClient.sni\r\n4.5.0 was resolved.\r\n```\r\n\r\n## Environment Details\r\n\r\nNuGet product used: `dotnet` CLI  \r\nNuGet version: 5.3.0.4  \r\ndotnet.exe --version: 3.0.100  \r\nOS version (i.e. win10 v1607 (14393.321)): Windows 10 v1903 (18362.387)\r\n\r\n## Detailed repro steps so we can see the same problem\r\n\r\n> See [dotnet/SqlClient - Microsoft.Data.SqlClient not restoring from Global NuGet Cache - 1.0.19249.1](https://github.com/dotnet/SqlClient/issues/236) for full history that led to this issue.\r\n\r\n`runtime.native.System.Data.SqlClient.sni` 4.4.0 was missing from [C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder](https://github.com/NuGet/Home/wiki/%5BSpec%5D-Fallback-package-folders) in my offline environment.\r\n\r\nThis pre-built package is a dependency for `Microsoft.Data.SqlClient`, so to repro, remove the above pre-built package from the `NuGetFallbackFolder` on a machine with no internet connection and run the following:\r\n\r\n```\r\ndotnet new classlib -f netcoreapp3.0 -o {ProjectName}\r\ncd {ProjectName}\r\n\r\n// For error message\r\ndotnet build\r\n\r\n// For restore warning\r\ndotnet restore -s %USERPROFILE%\\.nuget\\packages\r\n```\r\n\r\n## Other suggested things\r\n\r\n**Offline Build Error Messages**  \r\nShould indicate the missing package that caused the error, as well as the location it was searched for. In order to guide the user towards how to remedy the missing dependency, something similar to the following could be appended as a third line to the current error message:\r\n\r\n```\r\nC:\\Program Files\\dotnet\\sdk\\3.0.100\\Nuget.targets : error :\r\n{dependency} could not be located in {sources}\r\n```\r\n\r\nThis would give an indication as to how to fix build issues in a disconnected environment.\r\n\r\n**Offline Restore Warning Messages**  \r\nThe current warning message already indicates the package that was missing, as well as an approximate best match. In order to guide the user towards how to remedy the missing dependency, adding the location the package is missing from to the warning would be helpful. Something similar to the following:\r\n\r\n```\r\nWarning NU1603 : {package} depends on {dependency} ({min-version}) \r\nbut {dependency}{version} was not found at {location}. \r\nAn approximate best match of {package}{found-version} was resolved\r\nat {location}.\r\n```"},{"Id":"10530909689","Type":"IssuesEvent","CreatedAt":"2019-10-01T07:12:06","Actor":"abhisheka1993","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8649","RelatedDescription":"Opened issue \"Imports Newtonsoft.Json in VS 2010\" (#8649) at NuGet/Home","RelatedBody":"I want to imports Newtonsoft.Json in vs 2010 for converting the xml string into json but I am not able to add it with version 2.12+\r\nanyone knows how to fix this"},{"Id":"10530798089","Type":"IssuesEvent","CreatedAt":"2019-10-01T06:54:21","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8648","RelatedDescription":"Opened issue \"Plugin: A task was canceled - early cancellation\" (#8648) at NuGet/Home","RelatedBody":"The scenario is NuGet restore with one or more protected feeds (in every report we've been dealing with Azure Devops feeds, but that's because majority of the reports are internal). \r\nÂ \r\nThe manifestation of this is restore failing with \"A task was canceled\" exception.\r\nThis is something that happens with the latest NuGet (5.2, 5.3 were both tested) and the latest version of the artifacts-credprovider 0.1.18.\r\nÂ \r\nThe current reasoning of the investigation is that we have 2 issues: \r\n\t1. Early cancellation of operations that we canâ€™t recover from (plugin startup)\r\n\t1. Threadpool starvation. \r\nÂ \r\nA child of https://github.com/NuGet/Home/issues/8528. \r\n\r\nThe plugin infra cannot handle cancellations that happen during the plugin init process so we simply don't honor those said cancellations. \r\n\r\nThis issue tracks the first problem"},{"Id":"10528494863","Type":"IssuesEvent","CreatedAt":"2019-09-30T21:45:46","Actor":"xuzhg","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8647","RelatedDescription":"Opened issue \"Certificate error on https://nuget.smbsrc.net\" (#8647) at NuGet/Home","RelatedBody":"It's failed to upload the symbols to the symbols sever, the error message:\r\n\r\n![image](https://user-images.githubusercontent.com/9426627/65919348-e4818500-e390-11e9-87df-4ac052329dcc.png)\r\n\r\n\r\nI tried the nuget.exe 5.2.0 version. It's same error message. \r\n\r\nHow can we upload the symbols server again?\r\n"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"10286366828","Type":"IssuesEvent","CreatedAt":"2019-08-26T13:37:09","Actor":"karann-msft","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/38","RelatedDescription":"Opened issue \"New and improved NuGet Search is live!\" (#38) at NuGet/Announcements","RelatedBody":"Announcing the new and improved search on NuGet.org leveraging Azure Search.\r\n\r\n[Blogpost](https://devblogs.microsoft.com/nuget/new-and-improved-nuget-search/) | [Feedback Issue](https://github.com/NuGet/NuGetGallery/issues/4124)"},{"Id":"10168692521","Type":"IssuesEvent","CreatedAt":"2019-08-07T21:31:54","Actor":"anangaur","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/37","RelatedDescription":"Opened issue \"Using OData to query NuGet.org repository is being deprecated\" (#37) at NuGet/Announcements","RelatedBody":"We introduced `V3 APIs` in early 2016. We have made continuous investments to make it more reliable, performant and secure. Going forward, we plan to bring all new features and improvements only to the newer `V3 APIs`. As part of this strategy, we are deprecating the usage of `OData` queries. Subsequently, we plan to **disable the `OData` queries starting Feb 5th, 2020**.\r\n\r\n**Call to Action: Transition to V3 APIs**\r\n\r\nHere are some resources to help you with the migration:\r\n* [NuGet Server `V3 APIs` reference](https://devblogs.microsoft.com/nuget/switching-from-wcf-odata-to-web-api/)\r\n* [Guide to transition from NuGet `V2 API` to `V3 API`](https://docs.microsoft.com/en-us/nuget/guides/api/query-for-all-published-packages). \r\n* [Blog post: Switching from WCF OData to Web API](https://devblogs.microsoft.com/nuget/switching-from-wcf-odata-to-web-api/)\r\n\r\nIf you need further help in moving your use case to `V3 APIs`, do reach out to us at [support@nuget.org](mailto:support@nuget.org).\r\n"},{"Id":"10115721045","Type":"IssuesEvent","CreatedAt":"2019-07-30T22:44:31","Actor":"shoter","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Announcements/issues/36","RelatedDescription":"Closed issue \"Replace reference to codeplex issue numer 3072\" (#36) at NuGet/Announcements","RelatedBody":"This is copy of codeplex issue number 3072 as it is referenced inside code. I should do a PR shortly to address this one.\r\n\r\nThe place where it is referenced is RuntimeHelper.cs:150\r\n\r\n\r\n---\r\n\r\nWe're hitting an issue with Microsoft.Bcl package where NuGet is adding a binding redirect for a binary that is considered part of the framework, this causes the application to crash because the binding redirect refers to assembly version that is not available at runtime.\r\n\r\n@Repro:\r\n\r\n1. Create a new Console Application targeting 4.5\r\n2. Create a new Portable Library targeting .NET Framework 4.5, Silverlight 4, Windows Phone 7.5 and .NET for Windows Store apps\r\n3. Add a reference to the portable library from the Console Application\r\n4. Install the Microsoft.Bcl package (1.0.16-rc) to both projects\r\n\r\n@Expected: No binding redirect for System.Runtime in the .NET Framework 4.5 project because a ___later version___ is part of the target framework (see C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.5\\RedistList\\FrameworkList.xml)\r\n@Actual: Binding redirect\r\n\r\n<dependentAssembly>\r\n<assemblyIdentity name=\"System.Runtime\" publicKeyToken=\"b03f5f7f11d50a3a\" culture=\"neutral\" />\r\n<bindingRedirect oldVersion=\"0.0.0.0-1.5.11.0\" newVersion=\"1.5.11.0\" />\r\n</dependentAssembly>\r\n\r\n\r\nYou can use the IVsFrameworkMultiTargeting to determine if a given assembly version is available as part of a given target framework.\r\nMake sure when you fix this, that you only skip the binding redirect if ___a later or same version___ is available in the framework.  \r\n2013-02-22\r\n\r\n---\r\n\r\nWe'll do this in 2.4 release.  \r\n2013-02-26\r\n\r\n---\r\n\r\nIs IVsFrameworkMultiTargeting.IsReferenceableInTargetFx the method I need to call? What should I pass to pwszAssemblySpec?  \r\n2013-06-08\r\n\r\n---\r\n\r\nIt's the full name of the assembly (mscorlib, Version=[version], PublicKeyToken=[token], Culture=[culture]). It can either contain all the information (key, version, etc), or just the simple name (\"mscorlib\")  \r\n2013-06-10\r\n\r\n---\r\n\r\nSo look like I can only check for the same version of the target framework. Can't check for a later version using this method, because I don't know what future versions will be.  \r\n2013-06-12\r\n\r\n---\r\n\r\nThat's fine. That's exactly the behavior we want. For example, System.Runtime didn't ship in 4.0, but did in 4.5. We still want a binding redirect generated for it in 4.0, but not for 4.5.  \r\n2013-06-13\r\n\r\n---\r\n\r\nI followed the exact same steps above, but there's no binding redirect added to the Console Application. It's only added to the __Portable Library project__. Is that the bug?  \r\n2013-06-13\r\n\r\n---\r\n\r\nThe binding redirects added to the Portable Library project seems to come from the Microsoft.Bcl package itself (from the content folder's app.config.transform file). this looks like a non-bug.\r\n2013-06-13\r\n\r\n  \r\nI'm chasing up the repro with Eric St. John. He walked through the code and figured out where it was broken.\r\n\r\nIt's the not the app.config.tranform, notice how the net45 content is empty, and hence no transforms. We also marked our transforms with a special marker that indicates that we added the redirects . The binding redirects we were seeing were not coming from us.  \r\n2013-06-13\r\n\r\n---\r\n\r\nAre you seeing the binding redirects added to the Console Application or the Portable Library? I don't see binding redirect added to Console Application, only the Portable Library.  \r\n2013-06-13\r\n\r\n---\r\n\r\nYes I'm talking about the ConsoleApplication. The binding redirects in the portable library project are expected, and do not affect runtime behavior (as the app.config is ignored and not copied to the app project), and hence can't cause an application to crash.\r\n\r\nI've found another repro (NuGet has really weird logic around when it decides to add binding redirects so it was hard to find a repro).\r\n\r\nThe repro is instead of using the Microsoft.Bcl package, install the Microsoft.Net.Http, 2.2.3-beta package. Make sure you are targeting __4.5__ from the ConsoleApplication and the exact platforms that I called out above for portable.  \r\n2013-06-13\r\n\r\n---\r\n\r\nAlso, the ConsoleApplication must be referencing the portable project before installing the package.  \r\n2013-06-13\r\n\r\n---\r\n\r\nOK now I can repro  \r\n2013-06-14\r\n\r\n---\r\n\r\nOK, I've got a fix now. It no longer adds the binding redirect for System.Runtime.dll, but still adds one for System.Net.Http.Primitives. I guess it's expected, right? Please confirm.\r\n\r\n```\r\n<assemblyBinding xmlns=\"urn:schemas-microsoft-com:asm.v1\">\r\n<dependentAssembly>\r\n<assemblyIdentity name=\"System.Net.Http.Primitives\" publicKeyToken=\"b03f5f7f11d50a3a\" culture=\"neutral\" />\r\n<bindingRedirect oldVersion=\"0.0.0.0-4.2.3.0\" newVersion=\"4.2.3.0\" />\r\n</dependentAssembly>\r\n</assemblyBinding>\r\n```  \r\n2013-06-14\r\n\r\n---\r\n\r\n\r\nYes that's correct. System.Net.Http.Primitives does not exist in the framework.  \r\n2013-06-14\r\n\r\n---\r\n\r\nFixed in changeset b8d515f6341193b970d2a9d837e580e762d2eb71  \r\n2013-06-19\r\n\r\n---\r\n\r\ni get the same issue with my test project still, runtime being added... if i comment this out the tests run fine... if not i get exceptions thrown from json.net  \r\n2013-08-09\r\n\r\n---\r\n\r\n(or i can change the version up to 4.0.0.0 or something and it works)  \r\n2013-08-09"},{"Id":"10115715827","Type":"IssuesEvent","CreatedAt":"2019-07-30T22:43:23","Actor":"shoter","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/36","RelatedDescription":"Opened issue \"Replace reference to codeplex issue numer 3072\" (#36) at NuGet/Announcements","RelatedBody":"This is copy of codeplex issue number 3072 as it is referenced inside code. I should do a PR shortly to address this one.\r\n\r\nThe place where it is referenced is RuntimeHelper.cs:150\r\n\r\n\r\n---\r\n\r\nWe're hitting an issue with Microsoft.Bcl package where NuGet is adding a binding redirect for a binary that is considered part of the framework, this causes the application to crash because the binding redirect refers to assembly version that is not available at runtime.\r\n\r\n@Repro:\r\n\r\n1. Create a new Console Application targeting 4.5\r\n2. Create a new Portable Library targeting .NET Framework 4.5, Silverlight 4, Windows Phone 7.5 and .NET for Windows Store apps\r\n3. Add a reference to the portable library from the Console Application\r\n4. Install the Microsoft.Bcl package (1.0.16-rc) to both projects\r\n\r\n@Expected: No binding redirect for System.Runtime in the .NET Framework 4.5 project because a ___later version___ is part of the target framework (see C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.5\\RedistList\\FrameworkList.xml)\r\n@Actual: Binding redirect\r\n\r\n<dependentAssembly>\r\n<assemblyIdentity name=\"System.Runtime\" publicKeyToken=\"b03f5f7f11d50a3a\" culture=\"neutral\" />\r\n<bindingRedirect oldVersion=\"0.0.0.0-1.5.11.0\" newVersion=\"1.5.11.0\" />\r\n</dependentAssembly>\r\n\r\n\r\nYou can use the IVsFrameworkMultiTargeting to determine if a given assembly version is available as part of a given target framework.\r\nMake sure when you fix this, that you only skip the binding redirect if ___a later or same version___ is available in the framework.  \r\n2013-02-22\r\n\r\n---\r\n\r\nWe'll do this in 2.4 release.  \r\n2013-02-26\r\n\r\n---\r\n\r\nIs IVsFrameworkMultiTargeting.IsReferenceableInTargetFx the method I need to call? What should I pass to pwszAssemblySpec?  \r\n2013-06-08\r\n\r\n---\r\n\r\nIt's the full name of the assembly (mscorlib, Version=[version], PublicKeyToken=[token], Culture=[culture]). It can either contain all the information (key, version, etc), or just the simple name (\"mscorlib\")  \r\n2013-06-10\r\n\r\n---\r\n\r\nSo look like I can only check for the same version of the target framework. Can't check for a later version using this method, because I don't know what future versions will be.  \r\n2013-06-12\r\n\r\n---\r\n\r\nThat's fine. That's exactly the behavior we want. For example, System.Runtime didn't ship in 4.0, but did in 4.5. We still want a binding redirect generated for it in 4.0, but not for 4.5.  \r\n2013-06-13\r\n\r\n---\r\n\r\nI followed the exact same steps above, but there's no binding redirect added to the Console Application. It's only added to the __Portable Library project__. Is that the bug?  \r\n2013-06-13\r\n\r\n---\r\n\r\nThe binding redirects added to the Portable Library project seems to come from the Microsoft.Bcl package itself (from the content folder's app.config.transform file). this looks like a non-bug.\r\n2013-06-13\r\n\r\n  \r\nI'm chasing up the repro with Eric St. John. He walked through the code and figured out where it was broken.\r\n\r\nIt's the not the app.config.tranform, notice how the net45 content is empty, and hence no transforms. We also marked our transforms with a special marker that indicates that we added the redirects . The binding redirects we were seeing were not coming from us.  \r\n2013-06-13\r\n\r\n---\r\n\r\nAre you seeing the binding redirects added to the Console Application or the Portable Library? I don't see binding redirect added to Console Application, only the Portable Library.  \r\n2013-06-13\r\n\r\n---\r\n\r\nYes I'm talking about the ConsoleApplication. The binding redirects in the portable library project are expected, and do not affect runtime behavior (as the app.config is ignored and not copied to the app project), and hence can't cause an application to crash.\r\n\r\nI've found another repro (NuGet has really weird logic around when it decides to add binding redirects so it was hard to find a repro).\r\n\r\nThe repro is instead of using the Microsoft.Bcl package, install the Microsoft.Net.Http, 2.2.3-beta package. Make sure you are targeting __4.5__ from the ConsoleApplication and the exact platforms that I called out above for portable.  \r\n2013-06-13\r\n\r\n---\r\n\r\nAlso, the ConsoleApplication must be referencing the portable project before installing the package.  \r\n2013-06-13\r\n\r\n---\r\n\r\nOK now I can repro  \r\n2013-06-14\r\n\r\n---\r\n\r\nOK, I've got a fix now. It no longer adds the binding redirect for System.Runtime.dll, but still adds one for System.Net.Http.Primitives. I guess it's expected, right? Please confirm.\r\n\r\n```\r\n<assemblyBinding xmlns=\"urn:schemas-microsoft-com:asm.v1\">\r\n<dependentAssembly>\r\n<assemblyIdentity name=\"System.Net.Http.Primitives\" publicKeyToken=\"b03f5f7f11d50a3a\" culture=\"neutral\" />\r\n<bindingRedirect oldVersion=\"0.0.0.0-4.2.3.0\" newVersion=\"4.2.3.0\" />\r\n</dependentAssembly>\r\n</assemblyBinding>\r\n```  \r\n2013-06-14\r\n\r\n---\r\n\r\n\r\nYes that's correct. System.Net.Http.Primitives does not exist in the framework.  \r\n2013-06-14\r\n\r\n---\r\n\r\nFixed in changeset b8d515f6341193b970d2a9d837e580e762d2eb71  \r\n2013-06-19\r\n\r\n---\r\n\r\ni get the same issue with my test project still, runtime being added... if i comment this out the tests run fine... if not i get exceptions thrown from json.net  \r\n2013-08-09\r\n\r\n---\r\n\r\n(or i can change the version up to 4.0.0.0 or something and it works)  \r\n2013-08-09"},{"Id":"10105705706","Type":"IssuesEvent","CreatedAt":"2019-07-29T18:41:10","Actor":"anangaur","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/35","RelatedDescription":"Opened issue \"Machine readable output for dotnet list package\" (#35) at NuGet/Announcements","RelatedBody":"The spec for 'Machine readable output for dotnet list package' is ready for **review**:\r\n\r\n|Spec wiki|Discussion issue|\r\n|----------|------------------|\r\n|[Machine readable output for dotnet list package](https://github.com/NuGet/Home/wiki/%5BSpec%5D-Machine-readable-output-for-dotnet-list-package) | https://github.com/NuGet/Home/issues/7752 |"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1164220617710686209","CreatedAt":"2019-08-21T17:00:00+00:00","UserScreenname":"nuget","Text":"âš  Restoring packages from https://t.co/KVB7werYQh might fail in some regions. We are investigating the issue. Folloâ€¦ https://t.co/t69YZ9eFo1","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":4,"FavoriteCount":2,"RawContent":null},{"Id":"1162433926578626560","CreatedAt":"2019-08-16T18:40:19+00:00","UserScreenname":"nuget","Text":"Did you check out the new docs landing page? We tried to make it better and more useful. What do you think?â€¦ https://t.co/96nBP0rV5l","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":13,"FavoriteCount":3,"RawContent":null},{"Id":"1159229316351197184","CreatedAt":"2019-08-07T22:26:21+00:00","UserScreenname":"nuget","Text":"Using OData to query https://t.co/F9kiKfdOWi repository is being deprecated\n#Announcement \n\nhttps://t.co/dtelctlNOe","Source":"<a href=\"http://twitter.com/download/iphone\" rel=\"nofollow\">Twitter for iPhone</a>","RetweetCount":10,"FavoriteCount":3,"RawContent":null}]}},"RunOn":"2019-10-02T05:30:46.0351348Z","RunDurationInMilliseconds":3936}