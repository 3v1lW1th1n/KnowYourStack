{"Data":{"Blog":{"FeedItems":[{"Title":"Calling all Desktop Developers: how should UI development be improved?","PublishedOn":"2018-03-23T18:01:31+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"The user interface (UI) of any application is critical in making your app convenient and efficient for the folks using it. When developing applications for Enterprise use, a good UI can shave time off...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/03/23/calling-all-desktop-developers-how-should-ui-development-be-improved/","RawContent":null},{"Title":".NET Framework 4.7.2 Developer Pack Early Access build 3056 is available!","PublishedOn":"2018-03-08T23:22:13+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Today, we are happy to share an Early Access build with the .NET Framework 4.7.2 Developer Pack. The .NET Framework 4.7.2 Developer Pack lets developers build applications that target the .NET...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/03/08/net-framework-4-7-2-developer-pack-early-access-build-3056-is-available/","RawContent":null},{"Title":"F# language and tools update for Visual Studio 2017 version 15.6","PublishedOn":"2018-03-06T18:28:06+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"With the release of Visual Studio 2017 version 15.6, we’re excited to share updates to the F# language and core library, F# tooling in Visual Studio, and infrastructure updates that concern OSS...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/03/06/f-language-and-tools-update-for-visual-studio-2017-version-15-6/","RawContent":null},{"Title":"Announcing Entity Framework Core 2.1 Preview 1","PublishedOn":"2018-02-27T18:11:29+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"Today we are releasing the first preview of EF Core 2.1, alongside .NET Core 2.1 Preview 1 and ASP.NET Core 2.1 Preview 1. The new bits are available in NuGet as part of the individual packages, and...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/27/announcing-entity-framework-core-2-1-preview-1/","RawContent":null},{"Title":"Announcing .NET Core 2.1 Preview 1","PublishedOn":"2018-02-27T18:08:23+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Today, we are announcing .NET Core 2.1 Preview 1. It is the first public release of .NET Core 2.1. We have great improvements that we want to share and that we would love to get your feedback on,...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/27/announcing-net-core-2-1-preview-1/","RawContent":null},{"Title":"Calling All Desktop Developers: How do you interact with data?","PublishedOn":"2018-02-27T17:00:36+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Connecting to databases and services is an important part of desktop application development for many of our customers. Visual Studio provides a variety of tools and technologies that can help you...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/27/calling-all-desktop-developers-how-do-you-interact-with-data/","RawContent":null},{"Title":"Azure Blob Storage as a Network Drive","PublishedOn":"2018-02-26T16:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Many applications make use of a network drive to backup and store files. When I was in university I found myself constantly coding for fun, and one example took the form of a network share for my...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/26/azure-blob-storage-as-a-network-drive/","RawContent":null},{"Title":".NET Framework February 2018 Security and Quality Rollup","PublishedOn":"2018-02-14T04:27:17+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, we are releasing the February 2018 Security and Quality Rollup. Security No new security fixes. See .NET Framework January 2018 Security and Quality Rollup for the latest security updates....","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/13/net-framework-february-2018-security-and-quality-rollup/","RawContent":null},{"Title":"Machine Learning in .NET – Help us build the right experience!","PublishedOn":"2018-02-13T17:17:58+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"In the past few years, Machine Learning (ML) and Artificial Intelligence (AI) have paved the road for building smarter applications through advancements in speech recognition, computer vision,...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/13/machine-learning-in-net-help-us-build-the-right-experience/","RawContent":null},{"Title":"Announcing .NET Framework 4.7.2 Early Access build 3052!","PublishedOn":"2018-02-05T21:55:13+00:00","CommentsCount":14,"FacebookCount":0,"Summary":"Today, we are happy to share the .NET Framework 4.7.2 Early Access build 3052 for your feedback. .NET Framework 4.7.2 is the next version of the .NET Framework. It is currently feature-complete and in...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/05/announcing-net-framework-4-7-2-early-access-build-3052/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"7452103949","Type":"PullRequestEvent","CreatedAt":"2018-03-29T07:03:03","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/97","RelatedDescription":"Merged pull request \"update CLA PDF link\" (#97) at dotnet/home","RelatedBody":""},{"Id":"7419410563","Type":"IssuesEvent","CreatedAt":"2018-03-22T14:02:36","Actor":"vvavrychuk","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/issues/99","RelatedDescription":"Opened issue \"not working \"Linux Distribution\" dropdown on http://www.microsoft.com/net/learn/get-started/linux \" (#99) at dotnet/home","RelatedBody":"On the page http://www.microsoft.com/net/learn/get-started/linux dropdown \"Linux Distribution\" has no effect on the installation instruction next to him (they are always displayed for RedHat).\r\n\r\n![screenshot from 2018-03-22 16-02-19](https://user-images.githubusercontent.com/152563/37775020-6ec5778e-2dea-11e8-9ea3-b33e26c1c4e1.png)\r\n"},{"Id":"7192252734","Type":"PullRequestEvent","CreatedAt":"2018-02-03T01:30:47","Actor":"karann-msft","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/98","RelatedDescription":"Opened pull request \"Updates to reflect the latest information\" (#98) at dotnet/home","RelatedBody":""},{"Id":"7187459205","Type":"PullRequestEvent","CreatedAt":"2018-02-02T05:26:03","Actor":"mairaw","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/97","RelatedDescription":"Opened pull request \"update CLA PDF link\" (#97) at dotnet/home","RelatedBody":""},{"Id":"7102763357","Type":"PullRequestEvent","CreatedAt":"2018-01-16T00:17:04","Actor":"galatrash-at-dnn","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/96","RelatedDescription":"Opened pull request \"Adding DNN Platform.\" (#96) at dotnet/home","RelatedBody":""},{"Id":"7097053889","Type":"PullRequestEvent","CreatedAt":"2018-01-14T15:15:00","Actor":"bfistein","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/95","RelatedDescription":"Opened pull request \"Fix broken logo URL\" (#95) at dotnet/home","RelatedBody":""},{"Id":"7065382954","Type":"PullRequestEvent","CreatedAt":"2018-01-06T19:21:47","Actor":"ctaggart","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/94","RelatedDescription":"Opened pull request \"add SourceLink\" (#94) at dotnet/home","RelatedBody":"Adding SourceLink to the project list as per the checklist https://github.com/ctaggart/SourceLink/issues/138"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"7387413694","Type":"IssuesEvent","CreatedAt":"2018-03-15T21:18:32","Actor":"mairaw","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/announcements/issues/63","RelatedDescription":"Reopened issue \"Transport Layer Security (TLS) best practices with the .NET Framework article published\" (#63) at dotnet/announcements","RelatedBody":"# Transport Layer Security (TLS) best practices with the .NET Framework article published\r\n\r\nA new article was published that discusses the Transport Layer Security (TLS) best practices at https://docs.microsoft.com/dotnet/framework/network-programming/tls.\r\n\r\nTo ensure .NET Framework applications remain secure, the TLS version should **not** be hardcoded. .NET Framework applications should use the TLS version the operating system (OS) supports.\r\n\r\nThe (TLS) best practices article targets developers who are:\r\n* Directly using the System.Net APIs (for example, `System.Net.Http.HttpClient` and `System.Net.Security.SslStream`).\r\n* Directly using WCF clients and services using the `System.ServiceModel` namespace.\r\n* Using [Azure Cloud Services](https://azure.microsoft.com/services/cloud-services/) Web and Worker roles to host and run your application. See the [Azure Cloud Services](https://docs.microsoft.com/dotnet/framework/network-programming/tls#azure-cloud-services) section.\r\n\r\nThe article explains how to enable the strongest security available for the version of the .NET Framework that your app targets and runs on.\r\n\r\nThe section [Audit your code and make code changes](https://docs.microsoft.com/dotnet/framework/network-programming/tls#audit-your-code-and-make-code-changes) covers auditing and updating your code.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts and have any discussions with us at:\r\n\r\ndotnet/docs#4675"},{"Id":"7387391842","Type":"IssuesEvent","CreatedAt":"2018-03-15T21:13:45","Actor":"mairaw","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/63","RelatedDescription":"Closed issue \"Transport Layer Security (TLS) best practices with the .NET Framework article published\" (#63) at dotnet/announcements","RelatedBody":"# Transport Layer Security (TLS) best practices with the .NET Framework article published\r\n\r\nA new article was published that discussed the Transport Layer Security (TLS) best practices at https://docs.microsoft.com/dotnet/framework/network-programming/tls.\r\n\r\nTo ensure .NET Framework applications remain secure, the TLS version should **not** be hardcoded. .NET Framework applications should use the TLS version the operating system (OS) supports.\r\n\r\nThe (TLS) best practices article targets developers who are:\r\n* Directly using the System.Net APIs (for example, `System.Net.Http.HttpClient` and `System.Net.Security.SslStream`).\r\n* Directly using WCF clients and services using the `System.ServiceModel` namespace.\r\n* Using [Azure Cloud Services](https://azure.microsoft.com/services/cloud-services/) Web and Worker roles to host and run your application. See the [Azure Cloud Services](https://docs.microsoft.com/dotnet/framework/network-programming/tls#azure-cloud-services) section.\r\n\r\nThe article explains how to enable the strongest security available for the version of the .NET Framework that your app targets and runs on.\r\n\r\nThe section [Audit your code and make code changes](https://docs.microsoft.com/dotnet/framework/network-programming/tls#audit-your-code-and-make-code-changes) covers auditing and updating your code.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts and have any discussions with us at:\r\n\r\ndotnet/docs#4675"},{"Id":"7373349220","Type":"IssuesEvent","CreatedAt":"2018-03-13T17:01:53","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/62","RelatedDescription":"Opened issue \"Microsoft Security Advisory CVE-2018-0875: Hash Collison can cause Denial of Service\" (#62) at dotnet/announcements","RelatedBody":"# Microsoft Security Advisory CVE-2018-0875: Hash Collison can cause Denial of Service\r\n## Executive Summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in the public versions of .NET Core 1.0 and 2.0 (including other minor and patch releases).\r\nThis advisory also provides guidance on what developers can do to update their applications correctly.\r\n\r\nMicrosoft is aware of a security vulnerability in the public versions of .NET Core where a malicious file or web request could cause a denial of service (DoS) attack.\r\n\r\nSystem administrators are advised to update their .NET Core runtimes to versions 1.0.10, 1.1.7 or 2.0.6. Developers are advised to update their .NET Core SDK to versions 1.1.8 or 2.1.101.\r\n\r\n## Discussion\r\n\r\nUse *TBD* for discussion of this advisory.\r\n\r\n### Mitigation Factors\r\nNone\r\n\r\n### Affected Software\r\n\r\nAny application running against .NET Core 1.0.9 or lower versions, 1.1.6 or lower minor versions or 2.0.5 or lower minor versions is affected. \r\n\r\n### Advisory FAQ\r\n#### How do I know if I am affected?\r\nAny application running against .NET Core 1.0.9 or lower versions, 1.1.6 or lower minor versions or 2.0.5 or lower minor versions is affected. \r\n\r\nA complete list of runtimes can be discovered by performing a directory listing in the install root directories. The default root directories are listed in the following table:\r\n\r\n| Operating System | Location |\r\n|------------------|----------|\r\n| Windows\t| `C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\` |\r\n| macOS\t| `/usr/local/share/dotnet/shared/Microsoft.NETCore.App/` |\r\n| Supported Linux platforms\t| `/usr/share/dotnet/shared/Microsoft.NETCore.App/` |\r\n\r\nEach runtime version is installed in its own directory, where the directory name is the version number. If you don't have a directory for 1.0.10, 1.1.7 and 2.0.6, then any applications targeting the respective major/minor versions, 1.0 or 1.1 or 2.0 of .NET Core are vulnerable.\r\n\r\nAdditionally, if you've deployed self-contained applications targeting any of the impacted versions, these applications are also vulnerable and must be recompiled and redeployed.\r\n\r\n#### How do I fix my affected application?\r\n\r\nApplications can be fixed by installing the latest .NET Core runtimes or SDKs. Typically, application servers only have runtime packages installed and developer machines have the SDKs installed. \r\nInstallers for the runtimes can be downloaded from the [Runtime and SDK download archive](https://github.com/dotnet/core/blob/master/release-notes/download-archive.md). \r\n.NET Core 1.1.8 SDK installs both versions 1.0.10 and 1.1.7 of the .NET Core runtime.\r\n\r\nIf you've built a self-contained application, you must install the new runtime and SDK, recompile your application and redeploy.\r\n\r\n#### What if the update breaks my application?\r\nAn application can be pinned to a previous version of the runtime by editing the `application.runtime.config` file for that application. Set the framework version to the desired version and the `rollForward` property to false. These settings should be treated as a temporary measure and the application updated to work with the patched versions of the framework.\r\n\r\nSince the `application.runtime.config` file is an optional file, you may need to create one for each application and add it alongside the executable.\r\n\r\n### Acknowledgments\r\n[Ben Adams](https://twitter.com/ben_a_adams) of [Illyriad Games](https://www.illyriad.co.uk/)\r\n\r\n### External Links\r\n[CVE-2018-0875](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-0875)\r\n\r\n### Revisions\r\n\r\nV1.0 (Mar 13, 2018): Advisory published.\r\n\r\n_Version 1.0_\r\n_Last Updated 2018-03-13_\r\n"},{"Id":"7301596554","Type":"IssuesEvent","CreatedAt":"2018-02-27T06:10:33","Actor":"mairaw","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/61","RelatedDescription":"Opened issue \"New offline books released for Visual Studio 2017\" (#61) at dotnet/announcements","RelatedBody":"# New offline books released for Visual Studio 2017\r\n\r\nEarlier this month, we released an update to Offline Books for the Visual Studio 2017 Help Viewer.\r\n\r\nThis release includes new .NET books, including .NET Core Guide, .NET Guide, .NET Framework Guide and the .NET API Reference. It also includes the latest content for Visual Studio 2017 version 15.5, the latest updates to Visual Basic, C# (7.1 and 7.2), F#, ASP.NET Core, NuGet, SQL Server, and the Universal Windows Platform.\r\n\r\nThe .NET Guide, .NET Framework Guide and .NET API Reference books together are a replacement for the .NET Framework 4.6 and 4.5 book, which can be removed. Just be aware that the new .NET API Reference book currently displays the API syntax block for C# only, but examples are shown in other languages, just like the experience you currently have on docs.microsoft.com.If you need to see the API syntax for Visual Basic, C++/CLI or F#, then you should keep the old book until the new reference book is updated again in a few weeks. Once you remove the .NET Framework 4.6 and 4.5 book, you cannot reinstall it.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts and have any discussions with us at:\r\n\r\n- https://github.com/dotnet/docs/issues/4502\r\n\r\n## Add new content\r\n\r\nYou will see these new books when you have Help Viewer installed and choose **Help** > **Add and Remove Content** from the Visual Studio 2017 main menu. If you don't see this menu item, then [open the Visual Studio Installer](https://docs.microsoft.com/visualstudio/install/modify-visual-studio), click the **More** dropdown and choose **Modify**. When the component list appears, choose **Individual Components** at the top, then check **Help Viewer**.\r\n\r\n![help_viewer_component](https://user-images.githubusercontent.com/12971179/36713111-c9d49a7c-1b40-11e8-918a-e7e3619669a2.png)\r\n\r\n## Help Viewer Installation\r\n\r\nTo start the installation, select the **Modify** button in the lower right corner of the Installer window.\r\n\r\nTo update individual books whose status is \"Updates available\", remove the book and then click **Add** to get the new version. To update all your books at once, select the link in the lower right corner of the **Add and Remove Content** window:\r\n\r\n![offline-books](https://user-images.githubusercontent.com/12971179/36713028-75b944f6-1b40-11e8-91c4-4830355f815e.png)"},{"Id":"7300537622","Type":"IssuesEvent","CreatedAt":"2018-02-27T00:12:10","Actor":"eerhardt","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/60","RelatedDescription":"Opened issue \"System.Runtime.Intrinsics in .NET Core 2.1\" (#60) at dotnet/announcements","RelatedBody":"# System.Runtime.Intrinsics in .NET Core 2.1\r\n\r\n.NET Core 2.1 has been adding platform intrinsic APIs to support directly calling processor specific instructions, such as Intel’s x86 SIMD instructions.  See the [initial platform intrinsics design](https://github.com/dotnet/designs/blob/master/accepted/platform-intrinsics.md) for more information.\r\n\r\nWe have decided that it makes the most sense for this intrinsics feature to ship in a “preview” status in the .NET Core 2.1 RTM timeframe.  This means that the runtime support we are implementing will be included, but the assembly exposing the intrinsics will only be available to projects via explicit reference to a “preview-only” package.  These APIs won’t be included in the official .NET Core 2.1 packages.\r\n\r\nGiven our limited time and resources, recent changes in the approach we take to expose the intrinsics, and API changes prompted by design feedback from the community, we don’t believe there is enough time to settle these APIs for 2.1. We plan to follow the pattern of other recent features like Span<T> and Memory<T> that first shipped in preview before formally joining the supported API surface.  Not only would we expect the next version of .NET Core to support more intrinsics than could be supported in 2.1, but we expect to have real usage examples in CoreFX and higher level components as well.  These real world examples, as well as feedback from customers who opt in to the preview, should give us the confidence we need to officially support the APIs going forward.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\nhttps://github.com/dotnet/corefx/issues/27486\r\n\r\n## Details\r\n\r\nIn the coming days, we plan on removing System.Runtime.Intrinsics.dll from the Microsoft.NETCore.App package.  This means any libraries/applications that are using these APIs will no longer compile by default, and will not run on new builds of .NET Core 2.1.\r\n\r\nAt the same time, we will start producing a new System.Runtime.Intrinsics.Experimental NuGet package.  In order to continue using these APIs on .NET Core 2.1, a project will need to add a reference to this new package.\r\n\r\nAs its name implies, this package is experimental and should only be used for preview purposes.  It isn’t expected to be used in production scenarios.  Future version of .NET Core (after 2.1) will be allowed to break this package. This enables us respond to future feedback that requires the APIs to be modified.\r\n\r\nIn the future, when we are confident we have the intrinsic APIs right, we will stop producing the System.Runtime.Intrinsics.Experimental package. The platform intrinsics APIs will then be added back to Microsoft.NETCore.App and will be officially supported."},{"Id":"7273056222","Type":"IssuesEvent","CreatedAt":"2018-02-21T02:28:03","Actor":"KathleenDollard","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/57","RelatedDescription":"Opened issue \"Manually Uninstall .NET Core SDK 2.2.0-Preview Nightly Builds\" (#57) at dotnet/announcements","RelatedBody":"# Manually Uninstall .NET Core SDK 2.2.0-Preview Nightly Builds\r\n\r\n[A change in the version number strategy for .NET Core SDK](https://github.com/dotnet/designs/pull/29) resulted in some nightly builds having a higher version number. This higher version number will block the installation of the correct .NET Core SDK.\r\n\r\nIf you have installed nightly builds of the .NET Core SDK that start with version number that begin with `2.2.0-preview1`, you must manually uninstall these preview builds before later versions of the SDK with version numbers like 2.1.xxx will be available. This may have occurred by installing nightly builds of the .NET Core SDK or nightly builds of Visual Studio 15.5 Preview. \r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n[dotnet/cli #8652](https://github.com/dotnet/cli/issues/8652)\r\n\r\n## Details\r\n\r\n[We changed the version number strategy for .NET Core SDK](https://github.com/dotnet/designs/pull/29) as development was ongoing. Because of this, version numbers on the old scheme appeared in nightly builds. Unfortunately, these numbers are higher than the version numbers in the new scheme. All of the newer SDKs for .NET Core 2.1 will be ignored due to this higher version number; this includes newer nightly builds, public previews and eventual releases.\r\n\r\nThese older version numbers are similar to the following, with the last several different values in the last six digits:\r\n\r\n```\r\n2.2.0-preview1-008000\r\n```\r\n\r\nSince the newer versions are in the form:\r\n\r\n```\r\n2.1.300-preview1-008000\r\n```\r\n\r\n## Call to Action\r\n\r\nIf you have installed nightly builds. Please uninstall any .NET SDK versions that start with 2.2.0-preview1."}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"7470383236","Type":"IssuesEvent","CreatedAt":"2018-04-03T04:37:57","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/17310","RelatedDescription":"Closed issue \"MEF tests failed on redhat 69 for possible runtime issue\" (#17310) at dotnet/coreclr","RelatedBody":"MEF tests failed on redhat 69 for possible runtime issue\r\n\r\nDetails:\r\n```\r\n Discovering: System.ComponentModel.Composition.Tests\r\n Discovered:  System.ComponentModel.Composition.Tests\r\n Starting:    System.ComponentModel.Composition.Tests\r\n requiredService: System.ComponentModel.Composition.Hosting.CompositionContainer+CompositionServiceShim\r\n optionalService: System.ComponentModel.Composition.Hosting.CompositionContainer+CompositionServiceShim\r\n /home/helixbot/dotnetbuild/work/10f7163c-1a92-4504-9c3c-53c1cf142621/Work/7133f59b-1b5d-421f-b049-eb73728c0614/Unzip/RunTests.sh: line 95: 93251 Aborted\r\n (core dumped) $RUNTIME_PATH/dotnet xunit.console.netcore.exe System.ComponentModel.Composition.Tests.dll -xml testResults.xml -notrait category=nonnetcoreapptests -notrait category=nonlinuxtests -notrait category=failing\r\n Dumpling has not been installed yet. Please run \"DumplingHelper.py install_dumpling\" before collect_dumps.\r\n ~/dotnetbuild/work/10f7163c-1a92-4504-9c3c-53c1cf142621/Work/7133f59b-1b5d-421f-b049-eb73728c0614/Unzip\r\n ----- end 09:13:48 ----- exit code 134 ----------------------------------------------------------\r\n Looking around for any Linux dump...\r\n Looking for files matching core.93251 ...\r\n Printing info from core file core.93251\r\n Missing separate debuginfo for ..../Payload/dotnet\r\n ....\r\n [Thread debugging using libthread_db enabled]\r\n Missing separate debuginfo for ..../Payload/host/fxr/9.9.9/libhostfxr.so\r\n Try: yum --enablerepo='*-debug*' install /usr/lib/debug/.build-id/b9/571b3e33fca3dd72032aac5e8d1429f094773d.debug\r\n Missing separate debuginfo for ..../Payload/shared/Microsoft.NETCore.App/9.9.9/libhostpolicy.so\r\n Try: yum --enablerepo='*-debug*' install /usr/lib/debug/.build-id/1e/efba7defe2402155b53b8bf2f550c228b412fd.debug\r\n Missing separate debuginfo for ..../Payload/shared/Microsoft.NETCore.App/9.9.9/libclrjit.so\r\n Try: yum --enablerepo='*-debug*' install /usr/lib/debug/.build-id/28/9ecb37d0b8869d97ae27f3e0071b435ba9d0da.debug\r\n Core was generated by `..../Payload/do'.\r\n Program terminated with signal 6, Aborted.\r\n #0  0x0000003596a32495 in raise () from /lib64/libc.so.6\r\n```\r\n\r\nBelow showing a bit of dump from Thread 1 and Thread 9:\r\n\r\n```\r\nThread 1 (Thread 0x7fe43ebfd700 (LWP 93262)):\r\n  #0  0x0000003596a32495 in raise () from /lib64/libc.so.6\r\nNo symbol table info available.\r\n  #1  0x0000003596a33c75 in abort () from /lib64/libc.so.6\r\nNo symbol table info available.\r\n  #2  0x00007fe4e81d9dfe in PROCAbort () at /root/coreclr/src/pal/src/thread/process.cpp:3068\r\n  #3  0x00007fe4e81d8cfb in PROCEndProcess(void*, unsigned int, int) () at /root/coreclr/src/pal/src/thread/process.cpp:1394\r\n  #4  0x00007fe4e7e9135e in SafeExitProcess(unsigned int, int, ShutdownCompleteAction) () at /root/coreclr/src/vm/eepolicy.cpp:519\r\n  #5  0x00007fe4e7e92828 in EEPolicy::HandleFatalError(unsigned int, unsigned long, char16_t const*, _EXCEPTION_POINTERS*, char16_t const*, char16_t const*) () at /root/coreclr/src/vm/eepolicy.cpp:1545\r\n  #6  0x00007fe4e7f4365e in ProcessCLRException () at /root/coreclr/src/vm/exceptionhandling.cpp:1029\r\n  #7  0x00007fe4e7f476e4 in UnwindManagedExceptionPass1(PAL_SEHException&, _CONTEXT*) () at /root/coreclr/src/vm/exceptionhandling.cpp:4630\r\n  #8  0x00007fe4e7f479e3 in DispatchManagedException(PAL_SEHException&, bool) () at /root/coreclr/src/vm/exceptionhandling.cpp:4752\r\n  #9  0x00007fe4e7f42284 in HandleHardwareException(PAL_SEHException*) () at /root/coreclr/src/vm/exceptionhandling.cpp:5275\r\n  #10 0x00007fe4e81a1a91 in SEHProcessException(PAL_SEHException*) () at /root/coreclr/src/pal/src/exception/seh.cpp:286\r\n```\r\n\r\n```\r\n Thread 9 (Thread 0x7fe43e1fc700 (LWP 93263)):\r\n  #0  JIT_IsInstanceOfInterface_Portable () at /root/coreclr/src/vm/jithelpers.cpp:2487\r\n  #1  0x00007fe46ed6f3be in ?? ()\r\n No symbol table info available.\r\n  #2  0x00007fe43e1f9ae8 in ?? ()\r\n No symbol table info available.\r\n....\r\n  #19 0x00007fe46f11c734 in ?? ()\r\n No symbol table info available.\r\n  #20 0x00007fe43e1f9a80 in ?? ()\r\n No symbol table info available.\r\n  #21 0x00007fe4e7ec2bf2 in JIT_MonExit_Portable () at /root/coreclr/src/vm/threads.inl:34\r\n Backtrace stopped: previous frame inner to this frame (corrupt stack?)\r\n```\r\n\r\ncc: @danmosemsft @jkotas "},{"Id":"7470179664","Type":"PullRequestEvent","CreatedAt":"2018-04-03T03:17:57","Actor":"stephentoub","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/17391","RelatedDescription":"Opened pull request \"Consolidate and optimize TextInfo.ChangeCase (string/char.ToUpper/Lower)\" (#17391) at dotnet/coreclr","RelatedBody":"- Move most of the implementation to the platform-agnostic file, rather than having completely different implementations for Windows and Unix.  Now the only logic in each platform-specific file is the logic around invoking the associated P/Invoke.\r\n- Optimize that implementation to take a fast path that doesn't allocate when no case change is needed, and to avoid the native call when the whole string is ASCII.\r\n\r\ncc: @jkotas, @danmosemsft, @tarekgh, @ahsonkhan \r\n\r\nUsing the perf tests added in https://github.com/dotnet/corefx/pull/28748:\r\n\r\n| System.Runtime.Performance.Tests.dll                                                                              | Unit           | Current | PR | Diff    | \r\n|-------------------------------------------------------------------------------------------------------------------|----------------|----------------|---------------|---------| \r\n| \"System.Tests.Perf_String.ToLower(size: 1, options: None, cultureName: \"\"en-US\"\")\"                                | GC Allocations | 321520.944     | 0.00          | #DIV/0! | \r\n| \"System.Tests.Perf_String.ToLower(size: 1, options: UniqueString, cultureName: \"\"en-US\"\")\"                        | GC Allocations | 321709.776     | 0.00          | #DIV/0! | \r\n| \"System.Tests.Perf_String.ToLower(size: 10, options: None, cultureName: \"\"en-US\"\")\"                               | GC Allocations | 482977.472     | 0.00          | #DIV/0! | \r\n| \"System.Tests.Perf_String.ToLower(size: 10, options: UniqueString, cultureName: \"\"en-US\"\")\"                       | GC Allocations | 483279.328     | 0.00          | #DIV/0! | \r\n| \"System.Tests.Perf_String.ToLower(size: 500, options: None, cultureName: \"\"en-US\"\")\"                              | GC Allocations | 1.10E+07       | 0.00          | #DIV/0! | \r\n| \"System.Tests.Perf_String.ToLower(size: 500, options: UniqueString, cultureName: \"\"en-US\"\")\"                      | GC Allocations | 1.10E+07       | 0.00          | #DIV/0! | \r\n| \"System.Tests.Perf_String.ToUpper(size: 1, options: None, cultureName: \"\"en-US\"\")\"                                | GC Allocations | 321422.216     | 0.00          | #DIV/0! | \r\n| \"System.Tests.Perf_String.ToUpper(size: 1, options: UniqueString, cultureName: \"\"en-US\"\")\"                        | GC Allocations | 321722.096     | 0.00          | #DIV/0! | \r\n| \"System.Tests.Perf_String.ToUpper(size: 10, options: None, cultureName: \"\"en-US\"\")\"                               | GC Allocations | 482810.392     | 0.00          | #DIV/0! | \r\n| \"System.Tests.Perf_String.ToUpper(size: 10, options: UniqueString, cultureName: \"\"en-US\"\")\"                       | GC Allocations | 483392.68      | 0.00          | #DIV/0! | \r\n| \"System.Tests.Perf_String.ToUpper(size: 500, options: None, cultureName: \"\"en-US\"\")\"                              | GC Allocations | 1.10E+07       | 0.00          | #DIV/0! | \r\n| \"System.Tests.Perf_String.ToUpper(size: 500, options: UniqueString, cultureName: \"\"en-US\"\")\"                      | GC Allocations | 1.10E+07       | 0.00          | #DIV/0! | \r\n| \"System.Tests.Perf_String.ToLower(size: 500, options: UniqueString, cultureName: \"\"en-US\"\")\"                      | Duration       | 22.196         | 3.36          | 6.61x   | \r\n| \"System.Tests.Perf_String.ToUpper(size: 500, options: UniqueString, cultureName: \"\"en-US\"\")\"                      | Duration       | 21.12          | 3.37          | 6.26x   | \r\n| \"System.Tests.Perf_String.ToLower(size: 1, options: None, cultureName: \"\"en-US\"\")\"                                | Duration       | 0.636          | 0.16          | 3.95x   | \r\n| \"System.Tests.Perf_String.ToLower(size: 10, options: UniqueString, cultureName: \"\"en-US\"\")\"                       | Duration       | 0.836          | 0.21          | 3.92x   | \r\n| \"System.Tests.Perf_String.ToUpper(size: 10, options: None, cultureName: \"\"en-US\"\")\"                               | Duration       | 0.776          | 0.21          | 3.75x   | \r\n| \"System.Tests.Perf_String.ToUpper(size: 1, options: UniqueString, cultureName: \"\"en-US\"\")\"                        | Duration       | 0.59           | 0.16          | 3.66x   | \r\n| \"System.Tests.Perf_String.ToUpper(size: 10, options: UniqueString, cultureName: \"\"en-US\"\")\"                       | Duration       | 0.77           | 0.21          | 3.63x   | \r\n| \"System.Tests.Perf_String.ToLower(size: 10, options: None, cultureName: \"\"en-US\"\")\"                               | Duration       | 0.77           | 0.21          | 3.62x   | \r\n| \"System.Tests.Perf_String.ToLower(size: 1, options: UniqueString, cultureName: \"\"en-US\"\")\"                        | Duration       | 0.571          | 0.16          | 3.61x   | \r\n| \"System.Tests.Perf_String.ToUpper(size: 1, options: None, cultureName: \"\"en-US\"\")\"                                | Duration       | 0.57           | 0.16          | 3.48x   | \r\n| \"System.Tests.Perf_String.ToLower(size: 500, options: None, cultureName: \"\"en-US\"\")\"                              | Duration       | 9.84           | 2.91          | 3.39x   | \r\n| \"System.Tests.Perf_String.ToUpper(size: 500, options: None, cultureName: \"\"en-US\"\")\"                              | Duration       | 9.554          | 2.88          | 3.31x   | \r\n| \"System.Tests.Perf_String.ToUpper(size: 1, options: MiddleDifferentCase, cultureName: \"\"en-US\"\")\"                 | Duration       | 0.647          | 0.23          | 2.88x   | \r\n| \"System.Tests.Perf_String.ToLower(size: 1, options: MiddleDifferentCase, cultureName: \"\"en-US\"\")\"                 | Duration       | 0.583          | 0.22          | 2.70x   | \r\n| \"System.Tests.Perf_String.ToUpper(size: 1, options: AllDifferentCase, cultureName: \"\"en-US\"\")\"                    | Duration       | 0.61           | 0.24          | 2.58x   | \r\n| \"System.Tests.Perf_String.ToLower(size: 1, options: UniqueString, AllDifferentCase, cultureName: \"\"en-US\"\")\"      | Duration       | 0.617          | 0.25          | 2.51x   | \r\n| \"System.Tests.Perf_String.ToUpper(size: 10, options: UniqueString, MiddleDifferentCase, cultureName: \"\"en-US\"\")\"  | Duration       | 0.936          | 0.38          | 2.47x   | \r\n| \"System.Tests.Perf_String.ToUpper(size: 10, options: MiddleDifferentCase, cultureName: \"\"en-US\"\")\"                | Duration       | 0.803          | 0.33          | 2.46x   | \r\n| \"System.Tests.Perf_String.ToLower(size: 1, options: AllDifferentCase, cultureName: \"\"en-US\"\")\"                    | Duration       | 0.529          | 0.22          | 2.46x   | \r\n| \"System.Tests.Perf_String.ToUpper(size: 1, options: UniqueString, AllDifferentCase, cultureName: \"\"en-US\"\")\"      | Duration       | 0.59           | 0.25          | 2.37x   | \r\n| \"System.Tests.Perf_String.ToLower(size: 1, options: UniqueString, MiddleDifferentCase, cultureName: \"\"en-US\"\")\"   | Duration       | 0.563          | 0.24          | 2.34x   | \r\n| \"System.Tests.Perf_String.ToLower(size: 10, options: MiddleDifferentCase, cultureName: \"\"en-US\"\")\"                | Duration       | 0.734          | 0.32          | 2.31x   | \r\n| \"System.Tests.Perf_String.ToUpper(size: 10, options: UniqueString, AllDifferentCase, cultureName: \"\"en-US\"\")\"     | Duration       | 0.83           | 0.36          | 2.31x   | \r\n| \"System.Tests.Perf_String.ToUpper(size: 1, options: UniqueString, MiddleDifferentCase, cultureName: \"\"en-US\"\")\"   | Duration       | 0.568          | 0.25          | 2.27x   | \r\n| \"System.Tests.Perf_String.ToUpper(size: 10, options: AllDifferentCase, cultureName: \"\"en-US\"\")\"                   | Duration       | 0.731          | 0.32          | 2.27x   | \r\n| \"System.Tests.Perf_String.ToLower(size: 10, options: UniqueString, AllDifferentCase, cultureName: \"\"en-US\"\")\"     | Duration       | 0.764          | 0.36          | 2.10x   | \r\n| \"System.Tests.Perf_String.ToLower(size: 10, options: UniqueString, MiddleDifferentCase, cultureName: \"\"en-US\"\")\"  | Duration       | 0.787          | 0.38          | 2.07x   | \r\n| \"System.Tests.Perf_String.ToLower(size: 500, options: MiddleDifferentCase, cultureName: \"\"en-US\"\")\"               | Duration       | 9.461          | 4.77          | 1.98x   | \r\n| \"System.Tests.Perf_String.ToUpper(size: 500, options: MiddleDifferentCase, cultureName: \"\"en-US\"\")\"               | Duration       | 9.477          | 4.86          | 1.95x   | \r\n| \"System.Tests.Perf_String.ToLower(size: 10, options: AllDifferentCase, cultureName: \"\"en-US\"\")\"                   | Duration       | 0.687          | 0.35          | 1.94x   | \r\n| \"System.Tests.Perf_String.ToLower(size: 500, options: AllDifferentCase, cultureName: \"\"en-US\"\")\"                  | Duration       | 10.095         | 5.20          | 1.94x   | \r\n| \"System.Tests.Perf_String.ToUpper(size: 500, options: AllDifferentCase, cultureName: \"\"en-US\"\")\"                  | Duration       | 9.723          | 5.25          | 1.85x   | \r\n| \"System.Tests.Perf_String.ToUpper(size: 500, options: UniqueString, MiddleDifferentCase, cultureName: \"\"en-US\"\")\" | Duration       | 21.61          | 15.60         | 1.39x   | \r\n| \"System.Tests.Perf_String.ToLower(size: 500, options: MiddleTurkishI, cultureName: \"\"en-US\"\")\"                    | Duration       | 9.666          | 7.06          | 1.37x   | \r\n| \"System.Tests.Perf_String.ToUpper(size: 500, options: MiddleTurkishI, cultureName: \"\"en-US\"\")\"                    | Duration       | 9.685          | 7.27          | 1.33x   | \r\n| \"System.Tests.Perf_String.ToUpper(size: 500, options: UniqueString, AllDifferentCase, cultureName: \"\"en-US\"\")\"    | Duration       | 20.475         | 15.43         | 1.33x   | \r\n| \"System.Tests.Perf_String.ToLower(size: 500, options: UniqueString, AllDifferentCase, cultureName: \"\"en-US\"\")\"    | Duration       | 20.164         | 15.97         | 1.26x   | \r\n| \"System.Tests.Perf_String.ToLower(size: 500, options: UniqueString, MiddleDifferentCase, cultureName: \"\"en-US\"\")\" | Duration       | 21.567         | 17.10         | 1.26x   | \r\n| \"System.Tests.Perf_String.ToUpper(size: 500, options: UniqueString, MiddleTurkishI, cultureName: \"\"en-US\"\")\"      | Duration       | 20.594         | 16.50         | 1.25x   | \r\n| \"System.Tests.Perf_String.ToLower(size: 500, options: UniqueString, MiddleTurkishI, cultureName: \"\"en-US\"\")\"      | Duration       | 20.1           | 17.14         | 1.17x   | \r\n| \"System.Tests.Perf_String.ToLower(size: 10, options: UniqueString, MiddleDifferentCase, cultureName: \"\"en-US\"\")\"  | GC Allocations | 483082.664     | 482351.68     | 1.00x   | \r\n| \"System.Tests.Perf_String.ToUpper(size: 10, options: UniqueString, MiddleDifferentCase, cultureName: \"\"en-US\"\")\"  | GC Allocations | 483062.328     | 482354.55     | 1.00x   | \r\n| \"System.Tests.Perf_String.ToUpper(size: 1, options: UniqueString, AllDifferentCase, cultureName: \"\"en-US\"\")\"      | GC Allocations | 321657.152     | 321233.96     | 1.00x   | \r\n| \"System.Tests.Perf_String.ToLower(size: 1, options: AllDifferentCase, cultureName: \"\"en-US\"\")\"                    | GC Allocations | 321521.112     | 321103.42     | 1.00x   | \r\n| \"System.Tests.Perf_String.ToUpper(size: 1, options: UniqueString, MiddleTurkishI, cultureName: \"\"en-US\"\")\"        | GC Allocations | 321812.704     | 321470.34     | 1.00x   | \r\n| \"System.Tests.Perf_String.ToLower(size: 1, options: UniqueString, AllDifferentCase, cultureName: \"\"en-US\"\")\"      | GC Allocations | 321766.96      | 321451.08     | 1.00x   | \r\n| \"System.Tests.Perf_String.ToLower(size: 1, options: MiddleDifferentCase, cultureName: \"\"en-US\"\")\"                 | GC Allocations | 321402         | 321180.61     | 1.00x   | \r\n| \"System.Tests.Perf_String.ToUpper(size: 10, options: AllDifferentCase, cultureName: \"\"en-US\"\")\"                   | GC Allocations | 482989.416     | 482681.72     | 1.00x   | \r\n| \"System.Tests.Perf_String.ToUpper(size: 10, options: UniqueString, AllDifferentCase, cultureName: \"\"en-US\"\")\"     | GC Allocations | 483620.056     | 483379.00     | 1.00x   | \r\n| \"System.Tests.Perf_String.ToLower(size: 10, options: UniqueString, MiddleTurkishI, cultureName: \"\"en-US\"\")\"       | GC Allocations | 483833.656     | 483599.46     | 1.00x   | \r\n| \"System.Tests.Perf_String.ToUpper(size: 10, options: UniqueString, MiddleTurkishI, cultureName: \"\"en-US\"\")\"       | GC Allocations | 483827.64      | 483600.13     | 1.00x   | \r\n| \"System.Tests.Perf_String.ToLower(size: 10, options: UniqueString, AllDifferentCase, cultureName: \"\"en-US\"\")\"     | GC Allocations | 483603.688     | 483377.29     | 1.00x   | \r\n| \"System.Tests.Perf_String.ToLower(size: 10, options: MiddleDifferentCase, cultureName: \"\"en-US\"\")\"                | GC Allocations | 483135.88      | 482913.70     | 1.00x   | \r\n| \"System.Tests.Perf_String.ToUpper(size: 10, options: MiddleDifferentCase, cultureName: \"\"en-US\"\")\"                | GC Allocations | 483222         | 483124.38     | 1.00x   | \r\n| \"System.Tests.Perf_String.ToLower(size: 500, options: AllDifferentCase, cultureName: \"\"en-US\"\")\"                  | GC Allocations | 1.10E+07       | 11000000.00   | 1.00x   | \r\n| \"System.Tests.Perf_String.ToLower(size: 500, options: MiddleDifferentCase, cultureName: \"\"en-US\"\")\"               | GC Allocations | 1.10E+07       | 11000000.00   | 1.00x   | \r\n| \"System.Tests.Perf_String.ToLower(size: 500, options: MiddleTurkishI, cultureName: \"\"en-US\"\")\"                    | GC Allocations | 1.10E+07       | 11000000.00   | 1.00x   | \r\n| \"System.Tests.Perf_String.ToLower(size: 500, options: UniqueString, AllDifferentCase, cultureName: \"\"en-US\"\")\"    | GC Allocations | 1.10E+07       | 11000000.00   | 1.00x   | \r\n| \"System.Tests.Perf_String.ToLower(size: 500, options: UniqueString, MiddleDifferentCase, cultureName: \"\"en-US\"\")\" | GC Allocations | 1.10E+07       | 11000000.00   | 1.00x   | \r\n| \"System.Tests.Perf_String.ToLower(size: 500, options: UniqueString, MiddleTurkishI, cultureName: \"\"en-US\"\")\"      | GC Allocations | 1.10E+07       | 11000000.00   | 1.00x   | \r\n| \"System.Tests.Perf_String.ToUpper(size: 500, options: AllDifferentCase, cultureName: \"\"en-US\"\")\"                  | GC Allocations | 1.10E+07       | 11000000.00   | 1.00x   | \r\n| \"System.Tests.Perf_String.ToUpper(size: 500, options: MiddleDifferentCase, cultureName: \"\"en-US\"\")\"               | GC Allocations | 1.10E+07       | 11000000.00   | 1.00x   | \r\n| \"System.Tests.Perf_String.ToUpper(size: 500, options: MiddleTurkishI, cultureName: \"\"en-US\"\")\"                    | GC Allocations | 1.10E+07       | 11000000.00   | 1.00x   | \r\n| \"System.Tests.Perf_String.ToUpper(size: 500, options: UniqueString, AllDifferentCase, cultureName: \"\"en-US\"\")\"    | GC Allocations | 1.10E+07       | 11000000.00   | 1.00x   | \r\n| \"System.Tests.Perf_String.ToUpper(size: 500, options: UniqueString, MiddleDifferentCase, cultureName: \"\"en-US\"\")\" | GC Allocations | 1.10E+07       | 11000000.00   | 1.00x   | \r\n| \"System.Tests.Perf_String.ToUpper(size: 500, options: UniqueString, MiddleTurkishI, cultureName: \"\"en-US\"\")\"      | GC Allocations | 1.10E+07       | 11000000.00   | 1.00x   | \r\n| \"System.Tests.Perf_String.ToUpper(size: 10, options: MiddleTurkishI, cultureName: \"\"en-US\"\")\"                     | GC Allocations | 482485.296     | 482489.72     | 1.00x   | \r\n| \"System.Tests.Perf_String.ToLower(size: 10, options: AllDifferentCase, cultureName: \"\"en-US\"\")\"                   | GC Allocations | 482999.344     | 483005.01     | 1.00x   | \r\n| \"System.Tests.Perf_String.ToLower(size: 1, options: UniqueString, MiddleTurkishI, cultureName: \"\"en-US\"\")\"        | GC Allocations | 321589.952     | 321600.74     | 1.00x   | \r\n| \"System.Tests.Perf_String.ToLower(size: 10, options: MiddleTurkishI, cultureName: \"\"en-US\"\")\"                     | GC Allocations | 482488.08      | 482596.29     | 1.00x   | \r\n| \"System.Tests.Perf_String.ToUpper(size: 1, options: UniqueString, MiddleDifferentCase, cultureName: \"\"en-US\"\")\"   | GC Allocations | 320956.352     | 321086.74     | 1.00x   | \r\n| \"System.Tests.Perf_String.ToLower(size: 1, options: MiddleTurkishI, cultureName: \"\"en-US\"\")\"                      | GC Allocations | 321201.952     | 321403.47     | 1.00x   | \r\n| \"System.Tests.Perf_String.ToLower(size: 1, options: UniqueString, MiddleDifferentCase, cultureName: \"\"en-US\"\")\"   | GC Allocations | 320957.872     | 321182.16     | 1.00x   | \r\n| \"System.Tests.Perf_String.ToUpper(size: 1, options: MiddleDifferentCase, cultureName: \"\"en-US\"\")\"                 | GC Allocations | 321076.624     | 321396.39     | 1.00x   | \r\n| \"System.Tests.Perf_String.ToUpper(size: 1, options: MiddleTurkishI, cultureName: \"\"en-US\"\")\"                      | GC Allocations | 321188.84      | 321519.10     | 1.00x   | \r\n| \"System.Tests.Perf_String.ToUpper(size: 1, options: AllDifferentCase, cultureName: \"\"en-US\"\")\"                    | GC Allocations | 321421.744     | 321846.92     | 1.00x   | \r\n| \"System.Tests.Perf_String.ToUpper(size: 1, options: UniqueString, MiddleTurkishI, cultureName: \"\"en-US\"\")\"        | Duration       | 0.7            | 0.71          | 0.98x   | \r\n| \"System.Tests.Perf_String.ToUpper(size: 10, options: UniqueString, MiddleTurkishI, cultureName: \"\"en-US\"\")\"       | Duration       | 0.811          | 0.89          | 0.91x   | \r\n| \"System.Tests.Perf_String.ToUpper(size: 10, options: MiddleTurkishI, cultureName: \"\"en-US\"\")\"                     | Duration       | 0.728          | 0.81          | 0.90x   | \r\n| \"System.Tests.Perf_String.ToUpper(size: 1, options: MiddleTurkishI, cultureName: \"\"en-US\"\")\"                      | Duration       | 0.612          | 0.69          | 0.88x   | \r\n| \"System.Tests.Perf_String.ToLower(size: 10, options: MiddleTurkishI, cultureName: \"\"en-US\"\")\"                     | Duration       | 0.686          | 0.80          | 0.86x   | \r\n| \"System.Tests.Perf_String.ToLower(size: 1, options: UniqueString, MiddleTurkishI, cultureName: \"\"en-US\"\")\"        | Duration       | 0.572          | 0.67          | 0.86x   | \r\n| \"System.Tests.Perf_String.ToLower(size: 1, options: MiddleTurkishI, cultureName: \"\"en-US\"\")\"                      | Duration       | 0.553          | 0.66          | 0.84x   | \r\n| \"System.Tests.Perf_String.ToLower(size: 10, options: UniqueString, MiddleTurkishI, cultureName: \"\"en-US\"\")\"       | Duration       | 0.766          | 0.91          | 0.84x   | \r\n"},{"Id":"7470001925","Type":"PullRequestEvent","CreatedAt":"2018-04-03T02:12:46","Actor":"AndyAyersMS","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/17390","RelatedDescription":"Opened pull request \"Mark GcCollect test as incompatible with GcStress\" (#17390) at dotnet/coreclr","RelatedBody":"Extends changes in #17319 to cover stress tests run via the normal\r\nmsbuild/xunit test harness."},{"Id":"7469905895","Type":"IssuesEvent","CreatedAt":"2018-04-03T01:37:21","Actor":"AndyAyersMS","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/17389","RelatedDescription":"Opened issue \"AVX2_ro fails with jitstress=2\" (#17389) at dotnet/coreclr","RelatedBody":"Forked from #17027 / #17330.\r\n\r\nx64 checked build. AVX2_ro fails to validate with jitstress=2. The `BlendVariable<Byte>` are the ones failing.\r\n```\r\nAvx2.BlendVariable<Byte>(Vector256<Byte>, Vector256<Byte>, Vector256<Byte>): RunBasicScenario_Load failed:\r\n   firstOp: (63, 251, 58, 216, 203, 64, 178, 128, 158, 102, 241, 93, 117, 12, 119, 40, 204, 56, 100, 37, 64, 108, 251, 16, 7, 29, 119, 127, 144, 21, 114, 30)\r\n  secondOp: (151, 55, 219, 192, 119, 228, 54, 168, 120, 32, 66, 32, 41, 148, 50, 0, 40, 175, 220, 151, 239, 227, 58, 209, 0, 41, 208, 173, 200, 50, 238, 136)\r\n   thirdOp: (128, 1, 128, 1, 128, 1, 128, 1, 128, 1, 128, 1, 128, 1, 128, 1, 128, 1, 128, 1, 128, 1, 128, 1, 128, 1, 128, 1, 128, 1, 128, 1)\r\n    result: (151, 251, 219, 216, 119, 64, 54, 128, 120, 102, 66, 93, 41, 12, 50, 40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)\r\n... etc ... \r\n```\r\n\r\ncc @dotnet/jit-contrib @RussKeldorph @fiigii \r\n"},{"Id":"7469810494","Type":"PullRequestEvent","CreatedAt":"2018-04-03T01:02:45","Actor":"ianhays","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/17388","RelatedDescription":"Opened pull request \"[1.1] Remove libsosplugin from OpenSuse423\" (#17388) at dotnet/coreclr","RelatedBody":"Required libraries are missing to make the libsosplugin on opensuse423 unless we get them from sources that aren't officially supported.\r\n\r\n@janvorli "},{"Id":"7469797333","Type":"IssuesEvent","CreatedAt":"2018-04-03T00:57:51","Actor":"AndyAyersMS","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/17387","RelatedDescription":"Opened issue \"JitStress STRESS_OPT_BOOLS_GC transformation questionable on xarch in face of GC Stress\" (#17387) at dotnet/coreclr","RelatedBody":"Under JitStress, `optOptimizeBoolsGcStress` may transform `x == null` into `(x | x) == 0` or `(x & x) == 0` for gc-typed `x`. However the casting out of GC is done in a way that can lead to a hole in GC, as the xarch code generator will implement `t = x | x; t == 0` as `t = x; t |= x; t == 0`, and since `t` is typed non-gc a GC interrupt between the first two instructions can relocate `x` and so change the sense of the comparison.\r\n\r\nThis may explain many of the GC stress failures seen in the x86 gcstress=0xC jitstress=2 legs, for instance [this one](https://ci.dot.net/job/dotnet_coreclr/job/master/job/jitstress/job/x86_checked_windows_nt_gcstress0xc_zapdisable_jitstress2_prtest/13/#showFailuresLink). \r\n\r\nI have not yet confirmed this is the cause of the stress failures in those tests, but will update this bug if/when I do.\r\n\r\nOne such example (with zapdisable is) `System.Threading.WaitHandle:WaitAll(ref,int,bool):bool` on x86, where there is a null check right at the start of the method, and the jit generates:\r\n```asm\r\n; prolog\r\npush    ebp\r\nmov     ebp,esp\r\npush    edi\r\npush    esi\r\npush    ebx\r\npush    eax\r\nmov     esi,ecx\r\nmov     edi,edx          // GC info +ESI\r\n; start of method body\r\nmov     ecx,esi\r\nor      ecx,esi          // GC interrupt here can change ESI and not ECX\r\njne     ...\r\n```\r\n\r\nThis is split off from the ongoing efforts to triage and fix up gc stress in #17027 / #17330.\r\n\r\ncc @RussKeldorph @dotnet/jit-contrib "},{"Id":"7469753245","Type":"PullRequestEvent","CreatedAt":"2018-04-03T00:41:04","Actor":"VSadov","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/17386","RelatedDescription":"Opened pull request \"[WIP] Faster `List<T>` element write\" (#17386) at dotnet/coreclr","RelatedBody":""}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"7470415228","Type":"PullRequestEvent","CreatedAt":"2018-04-03T04:51:39","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/8975","RelatedDescription":"Opened pull request \"Updating SDK to 2.1.200-preview-62803-04\" (#8975) at dotnet/cli","RelatedBody":"This contains a matching NuGet version to the one in the CLI.\r\n"},{"Id":"7470378705","Type":"IssuesEvent","CreatedAt":"2018-04-03T04:36:03","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/8927","RelatedDescription":"Closed issue \"The error text should not indicating version issue when conflicting shim exists\" (#8927) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\n1. Setup tools local feed. \r\n2. Prepare 2 tools that have different package ID but same command name. Add <ToolCommandName>mytool2</ToolCommandName> after <PackAsTool>true</PackAsTool> to customize nameSetup tools local feed. Prepare 2 tools that have different package ID but same command name. Add <ToolCommandName>mytool2</ToolCommandName> after <PackAsTool>true</PackAsTool> to customize name\r\n3. Run dotnet tool install -g mytool1 \r\n4. Run dotnet tool install -g mytool2\r\n\r\n\r\n## Expected  behavior\r\nTool mytool2 installation failed with clear error indicates \"tool with the same name already existed\". \r\n\r\n## Actual behavior\r\nTool mytool2 installation failed with error indicating version issue. \r\n![image](https://user-images.githubusercontent.com/1578239/38072375-8ba3aa2e-3358-11e8-81c0-4687affc91b7.png)\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.1.300-preview2-008407\r\n Commit:    5a5e35cf02\r\n\r\nRuntime Environment:\r\n OS Name:     ubuntu\r\n OS Version:  16.04\r\n OS Platform: Linux\r\n RID:         ubuntu.16.04-x64\r\n Base Path:   /usr/share/dotnet/sdk/2.1.300-preview2-008407/\r\n\r\nHost (useful for support):\r\n  Version: 2.1.0-preview2-26326-03\r\n  Commit:  01c8d79c6a\r\n\r\n.NET Core SDKs installed:\r\n  2.1.300-preview2-008407 [/usr/share/dotnet/sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.0-preview2-30478 [/usr/share/dotnet/shared/Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.0-preview2-30478 [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.0-preview2-26326-03 [/usr/share/dotnet/shared/Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n\r\n\r\n\r\n\r\n\r\n\r\n"},{"Id":"7470378425","Type":"PullRequestEvent","CreatedAt":"2018-04-03T04:35:56","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/8942","RelatedDescription":"Merged pull request \"Show version guide only when restore fails\" (#8942) at dotnet/cli","RelatedBody":"fix https://github.com/dotnet/cli/issues/8927"},{"Id":"7469785398","Type":"PullRequestEvent","CreatedAt":"2018-04-03T00:53:18","Actor":"wli3","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/8974","RelatedDescription":"Opened pull request \"WIP test ci\" (#8974) at dotnet/cli","RelatedBody":"- If this PR should not run tests please add text \"skip[REMOVE_THIS]ci[REMOVE_THIS]please\" (remove the marked text, no quotes).\r\n- Please add description for changes you are making.\r\n- If there is an issue related to this PR, please add the reference.\r\n"},{"Id":"7469759188","Type":"IssuesEvent","CreatedAt":"2018-04-03T00:43:22","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/8973","RelatedDescription":"Closed issue \"I cannot create a .NET Core 2.0 console app with `dotnet new console`\" (#8973) at dotnet/cli","RelatedBody":"I want to do this:\r\n\r\n````\r\ndotnet new console -f netcorapp2.0\r\n```\r\n\r\nI cannot. How do I specify the TFM for a new app?"},{"Id":"7469589281","Type":"IssuesEvent","CreatedAt":"2018-04-02T23:42:16","Actor":"richlander","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/8973","RelatedDescription":"Opened issue \"I cannot create a .NET Core 2.0 console app with `dotnet new console`\" (#8973) at dotnet/cli","RelatedBody":"I want to do this:\r\n\r\n````\r\ndotnet new console -f netcorapp2.0\r\n```\r\n\r\nI cannot. How do I specify the TFM for a new app?"}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"7467609091","Type":"PullRequestEvent","CreatedAt":"2018-04-02T15:55:55","Actor":"ericstj","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/699","RelatedDescription":"Opened pull request \"Don't fail trimming on missing files\" (#699) at dotnet/standard","RelatedBody":"Instead, warn if that file happens to be included in the closure.\r\n\r\nFixes #697\r\n\r\nIt's still not clear to me this is required, but we can add it.  It may even be more appropriate to error."},{"Id":"7462410593","Type":"IssuesEvent","CreatedAt":"2018-03-31T15:52:06","Actor":"metadings","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/698","RelatedDescription":"Closed issue \"New Version Hell\" (#698) at dotnet/standard","RelatedBody":"Look. I thought .NET would solve this problem.\r\n\r\nNow you do have .NET Framework 2.0, 4.0, 4.5, .NET Standard 1.x, 2.x, .NET Core 1.x, 2.x - you could compile once for all of them, but you've decided to use stupid `#if NETSTANDARD1_x` directives without value (like [this](https://github.com/metadings/Blake2B.cs/pull/2/files)). You do have a lot of DLLs again and no way to detect which platform is running (`readonly static bool IsMono = Type.GetType(\"Mono.Runtime\") != null`).\r\n\r\nI want you to cancel .NET standard; in favor of just .NET framework (and mono)."},{"Id":"7462024550","Type":"IssuesEvent","CreatedAt":"2018-03-31T11:14:43","Actor":"metadings","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/698","RelatedDescription":"Opened issue \"New Version Hell\" (#698) at dotnet/standard","RelatedBody":"Look. I thought .NET would solve this problem.\r\n\r\nNow you do have .NET Framework 2.0, 4.0, 4.5, .NET Standard 1.x, 2.x, .NET Core 1.x, 2.x - you could compile for all of them, but you've decided to use stupid #if directives. You do have a lot of DLLs again and no way to detect which platform is running (IsMono = Type.GetType(\"Mono.Runtime\") != null).\r\n\r\nI want you to cancel .NET core and standard; in favor of just .NET and mono."},{"Id":"7460346731","Type":"IssuesEvent","CreatedAt":"2018-03-30T19:16:00","Actor":"jnm2","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/697","RelatedDescription":"Opened issue \"Trimmer tries to run when assemblies are missing\" (#697) at dotnet/standard","RelatedBody":"When project B depends on project A and something causes project A to stop compiling, this appears for project B:\r\n\r\n> Error MSB4018 The \"TrimFiles\" task failed unexpectedly. System.IO.FileNotFoundException: Could not find file 'ProjectA\\bin\\Debug\\ProjectA.exe'.\r\n\r\n```\r\n   at System.IO.__Error.WinIOError(Int32 errorCode, String maybeFullPath)\r\n   at System.IO.FileStream.Init(String path, FileMode mode, FileAccess access, Int32 rights, Boolean useRights, FileShare share, Int32 bufferSize, FileOptions options, SECURITY_ATTRIBUTES secAttrs, String msgPath, Boolean bFromProxy, Boolean useLongPath, Boolean checkHost)\r\n   at System.IO.FileStream..ctor(String path, FileMode mode, FileAccess access, FileShare share)\r\n   at Microsoft.DotNet.Build.Tasks.FileNode.PopulateDependenciesInternal(IDictionary`2 allFiles, Boolean preferNativeImage, ILog log, Stack`1 stack)\r\n   at Microsoft.DotNet.Build.Tasks.FileNode.PopulateDependencies(IDictionary`2 allFiles, Boolean preferNativeImage, ILog log)\r\n   at Microsoft.DotNet.Build.Tasks.TrimFiles.GetFiles(IDictionary`2 packages)\r\n   at Microsoft.DotNet.Build.Tasks.TrimFiles.Execute()\r\n   at Microsoft.Build.BackEnd.TaskExecutionHost.Microsoft.Build.BackEnd.ITaskExecutionHost.Execute()\r\n   at Microsoft.Build.BackEnd.TaskBuilder.<ExecuteInstantiatedTask>d__26.MoveNext()\r\n```\r\n\r\n(build\\Microsoft.Packaging.Tools.Trimming.targets, line 71)\r\n\r\nI don't know if this is the whole picture, but when I ran into this I added `Condition=\"Exists(@(IntermediateAssembly))\"` to the main trimming target which had `AfterTargets=\"CoreCompile\"`.\r\n\r\n/cc @ericstj \r\n"},{"Id":"7457305260","Type":"PullRequestEvent","CreatedAt":"2018-03-30T03:20:07","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/440","RelatedDescription":"Merged pull request \"Update reference for .NET Standard 2.0 to match final bits\" (#440) at dotnet/standard","RelatedBody":"The diff is surprisingly large, but that seems to be a result of [this CCI change](https://github.com/dotnet/buildtools/commit/7cf90764ff3f869ad6c680fb71a5c89d26a16cc5).\r\n\r\n@weshaggard "}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"7470357296","Type":"PullRequestEvent","CreatedAt":"2018-04-03T04:27:21","Actor":"Anipik","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/28753","RelatedDescription":"Opened pull request \"Add new non english CI [WIP]\" (#28753) at dotnet/corefx","RelatedBody":"Fixes https://github.com/dotnet/corefx/issues/28729"},{"Id":"7470279808","Type":"IssuesEvent","CreatedAt":"2018-04-03T03:56:16","Actor":"AlexRadch","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/28752","RelatedDescription":"Opened issue \"I suggest to add ReadOnlySequence constructor for ArraySegment\" (#28752) at dotnet/corefx","RelatedBody":"I suggest to add ReadOnlySequence constructor for ArraySegment.\r\n\r\n# Proposed API\r\n```cs\r\n    public readonly partial struct ReadOnlySequence<T>\r\n    {\r\n        /// <summary>\r\n        /// Creates an instance of <see cref=\"ReadOnlySequence{T}\"/> from the <see cref=\"ArraySegment{T}\"/>.\r\n        /// </summary>\r\n        public ReadOnlySequence(ArraySegment<T> arraySegment);\r\n    }\r\n```"},{"Id":"7470240043","Type":"IssuesEvent","CreatedAt":"2018-04-03T03:40:16","Actor":"benaadams","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/28751","RelatedDescription":"Opened issue \"Remove .Length from MemoryManager<T>\" (#28751) at dotnet/corefx","RelatedBody":"It adds no utility; and only gives scope to implementors to get `Memory` and `Length` properties out of sync.\r\n\r\nSuggested change:\r\n```diff\r\npublic abstract partial class MemoryManager<T>\r\n{\r\n-    public virtual int Length => GetSpan().Length;\r\n-    public virtual Memory<T> Memory => new Memory<T>(this, 0, Length);\r\n+    public virtual Memory<T> Memory => new Memory<T>(this, 0, GetSpan().Length);\r\n}\r\n```\r\n\r\nIf an implementor wants to go faster than `GetSpan().Length` rather than having a choice on overriding either `Length` or `Memory` or both; it is now clear they only need to override `Memory` as there is no alternate path.\r\n\r\nA common usage is checking `Memory.Length` (as `.Length` isn't exposed up stream via `IMemoryOwner`) so if overriding `.Length` were the path chosen; then that's an interface call to `Memory`, which then makes a virtual call to `.Length` so its a bad path anyway.\r\n\r\nOverriding `Memory` on the other hand is an interface call; then you're done, so its the better path.\r\n\r\ne.g. the second should be chosen over the first below for performance in its common usage pattern\r\n```diff\r\n-   public override int Length => _array.Length;\r\n+   public override Memory<T> Memory => new Memory<T>(this, 0, _array.Length)\r\n```\r\n\r\nAdditionally currently there is the confusion of which choice to make of the two properties to override. The `Memory` override also provide greater utility as the `offset` can be changed.\r\n\r\n"},{"Id":"7470226600","Type":"IssuesEvent","CreatedAt":"2018-04-03T03:35:11","Actor":"AlexRadch","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/28750","RelatedDescription":"Opened issue \"Should we provide direct ReadOnlySequence constructors for MemoryManager?\" (#28750) at dotnet/corefx","RelatedBody":"Early ReadOnlySequence has constructors to create it with OwnedMemory. Now OwnedMemory is replaced by MemoryManager and constructors was removed.\r\n\r\nNow it is possible to create ReadOnlySequence with MemoryManager by using MemoryManager.Memory property. But it seems strange that we convert MemoryManager to ReadOnlyMemory and then ReadOnlySequence convert it back to MemoryManager by using marshaling.\r\n\r\nShould we provide direct ReadOnlySequence constructors for MemoryManager as it was for OwnedMemory?"},{"Id":"7470211312","Type":"PullRequestEvent","CreatedAt":"2018-04-03T03:29:34","Actor":"danmosemsft","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/corefx/pull/28742","RelatedDescription":null,"RelatedBody":""},{"Id":"7470211211","Type":"PullRequestEvent","CreatedAt":"2018-04-03T03:29:32","Actor":"danmosemsft","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/pull/28742","RelatedDescription":"Closed pull request \"Update BuildTools, CoreClr, CoreFx to preview3-02702-01, preview3-26403-01, preview3-26403-01, respectively (master)\" (#28742) at dotnet/corefx","RelatedBody":""}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"7470449420","Type":"IssuesEvent","CreatedAt":"2018-04-03T05:05:43","Actor":"sharwell","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/25612","RelatedDescription":"Closed issue \"Decompiler should add a file header on top like Metadata As Source\" (#25612) at dotnet/roslyn","RelatedBody":"Decompiled files should have a comment header on top like Metadata As Source, containing the full path to the assembly being decompiled.\r\n\r\nThis feature of Metadata As Source is incredibly useful and without it I really don't know how to determine which assembly the symbol is defined in."}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"7467807339","Type":"PullRequestEvent","CreatedAt":"2018-04-02T16:41:22","Actor":"BredPet","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5646","RelatedDescription":"Opened pull request \"Fix cmake toolchain compile flags loop\" (#5646) at dotnet/corert","RelatedBody":"\t- fix https://github.com/dotnet/corert/issues/5093\r\n\t- cmake toolchain refactoring\r\n"},{"Id":"7463996183","Type":"IssuesEvent","CreatedAt":"2018-04-01T13:15:44","Actor":"christianscheuer","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/issues/5645","RelatedDescription":"Opened issue \"Method not found: System.ReadOnlyMemory`1<Byte>.Retain(Boolean) -> System.Buffers.MemoryHandle \" (#5645) at dotnet/corert","RelatedBody":"I'm hitting a `MissingMethodException` in the `ReadOnlyMemory<T>` class when using a HttpClient. I suspect this might be a case of mismatching dependencies / the API change for Span/Memory that hasn't completely solidified yet. Is there a workaround for this or will it resolve itself when the dependencies get in sync?\r\n\r\n\r\n```\r\nSystem.MissingMethodException: Method not found: 'System.Buffers.MemoryHandle System.ReadOnlyMemory`1<Byte>.Retain(Boolean)'.\r\n   at test!<BaseAddress>+0x521d1f\r\n   at Internal.Runtime.CompilerHelpers.ThrowHelpers.ThrowMissingMethodException(ExceptionStringID, String) + 0x5\r\n   at System.Net.Security.SslStreamPal.EncryptMessage(SafeDeleteContext, ReadOnlyMemory`1, Int32, Int32, Byte[]&, Int32&) + 0x11\r\n   at System.Net.Security.SecureChannel.Encrypt(ReadOnlyMemory`1, Byte[]&, Int32&) + 0xeb\r\n   at System.Net.Security.SslStreamInternal.WriteSingleChunk[TWriteAdapter](TWriteAdapter, ReadOnlyMemory`1) + 0x193\r\n   at System.Net.Security.SslStreamInternal.WriteAsyncInternal[TWriteAdapter](TWriteAdapter, ReadOnlyMemory`1) + 0x13b\r\n   at System.Net.Security.SslStream.WriteAsync(ReadOnlyMemory`1, CancellationToken) + 0xbc\r\n   at System.Net.Http.HttpConnection.WriteToStreamAsync(ReadOnlyMemory`1) + 0x17c\r\n   at System.Net.Http.HttpConnection.FlushAsync() + 0xa7\r\n   at System.Net.Http.HttpConnection.<SendAsyncCore>d__59.MoveNext() + 0x35ee\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw() + 0x30\r\n   at System.Net.Http.HttpConnectionPool.<SendWithRetryAsync>d__36.MoveNext() + 0x3e4\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw() + 0x30\r\n   at test!<BaseAddress>+0x5036f2\r\n   at System.Net.Http.RedirectHandler.<SendAsync>d__4.MoveNext() + 0x13c\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw() + 0x30\r\n   at test!<BaseAddress>+0x5036f2\r\n   at System.Net.Http.HttpClient.<FinishSendAsyncBuffered>d__62.MoveNext() + 0x42f\r\n```\r\n"},{"Id":"7463985669","Type":"PullRequestEvent","CreatedAt":"2018-04-01T13:08:07","Actor":"christianscheuer","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5644","RelatedDescription":"Opened pull request \"Add gss as NativeFramework on OSX to support System.Net.Security.Native.a linking\" (#5644) at dotnet/corert","RelatedBody":"When using features from CoreFX that rely on System.Net.Security.Native.a, the 'gss' Framework needs to be linked in on OSX.\r\nI'm not sure if this should go here automatically, but I guess there shouldn't be any downsides to providing the Framework link if it isn't used."},{"Id":"7462130052","Type":"PullRequestEvent","CreatedAt":"2018-03-31T12:39:36","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5643","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#5643) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7461748066","Type":"PullRequestEvent","CreatedAt":"2018-03-31T07:32:29","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5643","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#5643) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7461202402","Type":"PullRequestEvent","CreatedAt":"2018-03-31T00:07:38","Actor":"ahsonkhan","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5642","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#5642) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7460989580","Type":"PullRequestEvent","CreatedAt":"2018-03-30T22:31:31","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5642","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#5642) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7459227263","Type":"IssuesEvent","CreatedAt":"2018-03-30T14:26:36","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/issues/5604","RelatedDescription":"Closed issue \"Net Native compilation fails with Out of Memory (Xamarin/UWP)\" (#5604) at dotnet/corert","RelatedBody":"_From @sebastianfilke on March 22, 2018 13:54_\n\nWe have a big problem with the net native compilation in a relative big project.\r\nThe release build only works if we disable the option “Compile with .NET Native tool chain” or “Optimize code”.\r\nOtherwise the build takes up to 10 minutes and ends with an out of memory error.\r\n\r\nThe build log file is attached: [build.log](https://github.com/dotnet/core/files/1837784/build.log)\r\n\r\nThere is also an ilcRepro.zip file attached:\r\nhttps://drive.google.com/file/d/1bhEwZco0fugxxRDxj0hi86jnb9eJIpOV/view?usp=sharing\r\n\r\nWe tried several different settings in the Default.rd.xml, but nothing worked yet.\r\n\r\n•\tWe comment out the application assembly tag\r\n<!-- <Assembly Name=\"*Application*\" Dynamic=\"Required All\" DoNotOptimize=\"true\"/> -->\r\n•\tWe also tried to add an extra assembly tag for every assembly and with DoNotOptimize\r\n\r\nBut neither worked. \r\n\r\nPlease give me an advice or another solution. I don’t know if this is a bug or an assembly doesn’t worked or is not ready for net native.\r\n\n\n_Copied from original issue: dotnet/core#1372_"}],"ResultType":"GitHubEvent"},"SDK":{"Events":[{"Id":"7470374392","Type":"PullRequestEvent","CreatedAt":"2018-04-03T04:34:12","Actor":"livarcocc","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/2105","RelatedDescription":"Merged pull request \"Insert NuGet Build 4.7.0-preview3.5059 into sdk\" (#2105) at dotnet/sdk","RelatedBody":"Insert NuGet Build 4.7.0-preview3.5059 into sdk release/2.1.2xx branch"},{"Id":"7469716461","Type":"PullRequestEvent","CreatedAt":"2018-04-03T00:27:05","Actor":"livarcocc","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/2106","RelatedDescription":"Merged pull request \"Turning OFF GivenThatWeWantToStoreAProjectWithDependencies.compose_multifile\" (#2106) at dotnet/sdk","RelatedBody":"Turning OFF Microsoft.NET.Publish.Tests.GivenThatWeWantToStoreAProjectWithDependencies.compose_multifile\r\n\r\nTurning this test off until we can make it stable again."},{"Id":"7469550724","Type":"IssuesEvent","CreatedAt":"2018-04-02T23:29:11","Actor":"nguerrera","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/issues/2035","RelatedDescription":"Closed issue \"S.R.TypeExtensions not deployed for net461 application\" (#2035) at dotnet/sdk","RelatedBody":"Have a situation where System.Reflection.TypeExtensions is not being deployed. Here is the project setup that we have:\r\n\r\n- CSharpCompilerTestUtilites: targets netstandard1.3 and uses System.Reflection.TypeExtensions\r\n- CSharpCompilerEmitTests: targets net461 + netcoreapp2.0, references CSharpCompilerTestUtilities\r\n\r\nThe net461 output of CSharpCompilerEmitTests does not contain System.Reflection.TypeExtensions. That is necessary to run and hence some of our unit tests fail. \r\n\r\nTo repro:\r\n\r\n- Clone https://github.com/jaredpar/roslyn\r\n- Switch to branch repro/deploy-type-extensions\r\n- `powershell build/scripts/build.ps1 -build -restore` \r\n- Check the contents of `Binaries\\Debug\\UnitTests\\CSharpCompilerEmitTests\\net461` \r\n\r\nNote: In our build `DisableImplicitFrameworkReferences` is `false` by default and we have a tendancy to use explicit package references (hold over from the project.json days). It's possible this is contributing here but I'm unable to track this down. \r\n\r\n"},{"Id":"7469474901","Type":"PullRequestEvent","CreatedAt":"2018-04-02T23:04:53","Actor":"nugetlurker","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/2107","RelatedDescription":"Opened pull request \"Insert NuGet Build 4.7.0-preview4.5062 into sdk\" (#2107) at dotnet/sdk","RelatedBody":"Insert NuGet Build 4.7.0-preview4.5062 into sdk master branch"},{"Id":"7468964276","Type":"PullRequestEvent","CreatedAt":"2018-04-02T20:53:55","Actor":"livarcocc","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/2106","RelatedDescription":"Opened pull request \"Turning OFF GivenThatWeWantToStoreAProjectWithDependencies.compose_multifile\" (#2106) at dotnet/sdk","RelatedBody":"Turning OFF Microsoft.NET.Publish.Tests.GivenThatWeWantToStoreAProjectWithDependencies.compose_multifile\r\n\r\nTurning this test off until we can make it stable again."}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"977245582724022272","CreatedAt":"2018-03-23T18:07:57+00:00","UserScreenname":"dotnet","Text":"Calling all Desktop Developers: how should UI development be improved? https://t.co/lKHACsK0Sv","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":107,"FavoriteCount":74,"RawContent":null},{"Id":"976910301634465792","CreatedAt":"2018-03-22T19:55:40+00:00","UserScreenname":"dotnet","Text":"Get started building .NET web apps in the browser with Blazor https://t.co/OokEA8H4Mo","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":230,"FavoriteCount":180,"RawContent":null}]}},"RunOn":"2018-04-03T05:30:20.4058829Z","RunDurationInMilliseconds":7758}