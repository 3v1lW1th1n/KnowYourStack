{"Data":{"Blog":{"FeedItems":[{"Title":"Update on .NET Standard adoption","PublishedOn":"2019-08-07T18:01:39+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"It&#8217;s about two years ago that I announced .NET Standard 2.0. Since then we&#8217;ve been working hard to increase the set of .NET Standard-based libraries for .NET. This includes many of the BCL...","Href":"https://devblogs.microsoft.com/dotnet/update-on-net-standard-adoption/","RawContent":null},{"Title":"Calling all .NET desktop and mobile developers!","PublishedOn":"2019-08-07T15:00:29+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We would love to hear about your experience with building client applications in .NET. Your feedback will greatly help us to improve the .NET tooling and ensure our roadmap focuses on your needs....","Href":"https://devblogs.microsoft.com/dotnet/calling-all-net-desktop-and-mobile-developers/","RawContent":null},{"Title":"Try out Nullable Reference Types","PublishedOn":"2019-08-06T20:29:02+00:00","CommentsCount":26,"FacebookCount":0,"Summary":"Try out Nullable Reference Types\nWith the release of .NET Core 3.0 Preview 7, C# 8.0 is considered &#34;feature complete&#34;. That means that the biggest feature of them all, Nullable Reference...","Href":"https://devblogs.microsoft.com/dotnet/try-out-nullable-reference-types/","RawContent":null},{"Title":"Improving .NET Core installation in Visual Studio and on Windows","PublishedOn":"2019-08-06T02:07:24+00:00","CommentsCount":8,"FacebookCount":0,"Summary":"Visual Studio 2019 version 16.3 and .NET Core 3.0 Preview 7 improve the installation experience of .NET Core on Windows. The goal is to reduce the number of .NET Core versions that might be on a...","Href":"https://devblogs.microsoft.com/dotnet/improving-net-core-installation-in-visual-studio-and-on-windows/","RawContent":null},{"Title":"Announcing Entity Framework Core 3.0 Preview 7 and Entity Framework 6.3 Preview 7","PublishedOn":"2019-07-23T17:06:53+00:00","CommentsCount":5,"FacebookCount":0,"Summary":"Today, we are making new previews of EF Core 3.0 and EF 6.3 available on nuget.org.\n.NET Core 3.0 Preview 7 and ASP.NET Core 3.0 Preview 7 were also made available today.\nWe encourage you to install...","Href":"https://devblogs.microsoft.com/dotnet/announcing-entity-framework-core-3-0-preview-7-and-entity-framework-6-3-preview-7/","RawContent":null},{"Title":"Announcing .NET Core 3.0 Preview 7","PublishedOn":"2019-07-23T17:00:54+00:00","CommentsCount":37,"FacebookCount":0,"Summary":"Today, we are announcing .NET Core 3.0 Preview 7. We&#8217;ve transitioned from creating new features to polishing the release. Expect a singular focus on quality for the remaining preview...","Href":"https://devblogs.microsoft.com/dotnet/announcing-net-core-3-0-preview-7/","RawContent":null},{"Title":"Announcing ML.NET 1.2 and Model Builder updates (Machine Learning for .NET)","PublishedOn":"2019-07-17T19:25:46+00:00","CommentsCount":5,"FacebookCount":0,"Summary":"We are excited to announce ML.NET 1.2 and updates to Model Builder and the CLI. ML.NET is an open-source and cross-platform machine learning framework for .NET developers. ML.NET also includes Model...","Href":"https://devblogs.microsoft.com/dotnet/announcing-ml-net-1-2-and-model-builder-updates-machine-learning-for-net/","RawContent":null},{"Title":"Write Better Code Faster with Roslyn Analyzers","PublishedOn":"2019-07-10T16:40:11+00:00","CommentsCount":14,"FacebookCount":0,"Summary":"Roslyn, the .NET compiler platform, helps you catch bugs even before you run your code. One example is Roslyn’s spellcheck analyzer that is built into Visual Studio. Let’s say you are creating a...","Href":"https://devblogs.microsoft.com/dotnet/write-better-code-faster-with-roslyn-analyzers/","RawContent":null},{"Title":".NET Core July 2019 Updates – 2.1.12 and 2.2.6","PublishedOn":"2019-07-09T17:50:51+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Today, we are releasing the .NET Core July 2019 Update. These updates contain security and reliability fixes. See the individual release notes for details on updated packages.\nNOTE: If you are a...","Href":"https://devblogs.microsoft.com/dotnet/net-core-july-2019/","RawContent":null},{"Title":".NET Framework July 2019 Security and Quality Rollup","PublishedOn":"2019-07-09T17:22:13+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Today, we are releasing the July 2019 Cumulative Update, Security and Quality Rollup, and Security Only Update for .NET Framework.\nSecurity\nCVE-2019-1006 – WCF/WIF SAML Token Authentication Bypass...","Href":"https://devblogs.microsoft.com/dotnet/net-framework-july-2019-security-and-quality-rollup/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"10123005051","Type":"IssuesEvent","CreatedAt":"2019-07-31T19:23:23","Actor":"MeikTranel","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/issues/148","RelatedDescription":"Opened issue \"Clarify guidelines in regards to Options and Requirements\" (#148) at dotnet/foundation","RelatedBody":"I'd be interested in which part of the project submission guidelines is optional and which are deal breaker requirements.\r\n\r\n- Is the Role Matrix laid out an absolute or (as can be read between the lines) just a preset, which may be subject to individual projects needs?\r\n- Is it a strong requirement that the project uses the contributor covenant CoC?"},{"Id":"9814702366","Type":"PullRequestEvent","CreatedAt":"2019-06-13T10:49:31","Actor":"gep13","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/147","RelatedDescription":"Opened pull request \"(GH-111) Update SourceLink location\" (#147) at dotnet/foundation","RelatedBody":""},{"Id":"9812903344","Type":"PullRequestEvent","CreatedAt":"2019-06-13T06:28:59","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/146","RelatedDescription":"Merged pull request \"Update Cake Project Contacts\" (#146) at dotnet/foundation","RelatedBody":"@jongalloway just noticed that this wasn't up to date."},{"Id":"9812878014","Type":"PullRequestEvent","CreatedAt":"2019-06-13T06:23:52","Actor":"gep13","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/146","RelatedDescription":"Opened pull request \"Update Cake Project Contacts\" (#146) at dotnet/foundation","RelatedBody":"@jongalloway just noticed that this wasn't up to date."}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"10047192673","Type":"IssuesEvent","CreatedAt":"2019-07-19T16:54:03","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/118","RelatedDescription":"Opened issue \".NET Core master branches have switched to \"5.0\"\" (#118) at dotnet/announcements","RelatedBody":"# .NET Core master branches have switched to \"5.0\"\r\n\r\nVarious .NET Core repos have switched their `master` branches to \"5.0\", and will use 3.x branches for 3.0 and 3.1 projects. This is very similar to how we approached 2.x and 3.0 projects. As context, `master` branches produced 3.0 builds for the entire period of the 2.2 project.\r\n\r\nAt present, this change is only relevant if you contribute to .NET Core repositories. Otherwise, we recommend that you wait for the 5.0 Preview releases before installing this new version.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n[dotnet/core #3059](https://github.com/dotnet/core/issues/3059)\r\n\r\n## Details\r\n\r\nThe following repos have moved their master branches to \"5.0\":\r\n\r\n- [dotnet/coreclr](https://github.com/dotnet/coreclr)\r\n- [dotnet/corefx](https://github.com/dotnet/corefx)\r\n- [dotnet/core-setup](https://github.com/dotnet/core-setup)\r\n\r\nYou can see that [5.0 .NET Core Runtime builds](https://github.com/dotnet/core-setup#daily-builds) are now being built and published at dotnet/core-setup.\r\n\r\nIn large part, we switched `master` to 5.0 to enable to the community to contribute changes. As the .NET Core 3.0 released has progressed, we've had to increase scrutiny on the changes we will accept. Now that we've permanently branched for 3.0, we can accept a much broader set of changes. Please consider that to be an open invitation!\r\n\r\nNotably, [dotnet/core-sdk](https://github.com/dotnet/core-sdk) is not yet producing 5.0 builds. We expect that the dotnet/core-sdk master branch will continue as a 3.0 branch for 2-3 months while we finish up the .NET Core 3.0 project.\r\n\r\nAt present, there is no developer experience for 5.0. We are waiting on the dotnet/core-sdk repo to switch to 5.0. Switching your project file to target `netcoreapp5.0` won't do anything useful. We'll update this issue when a 5.0 SDK comes available."},{"Id":"9971220766","Type":"IssuesEvent","CreatedAt":"2019-07-08T23:25:31","Actor":"terrajobst","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/117","RelatedDescription":"Opened issue \"System.Text.Json usability study results\" (#117) at dotnet/announcements","RelatedBody":"We've performed a usability study on the new `System.Text.Json` APIs which will replace JSON.NET as the default JSON experience in .NET Core 3.0:\r\n\r\n* We focused on the primary \"getting started\" scenarios to validate that we picked the right type- and method names.\r\n* We simulated what we believe to be common error cases to validate that our exception messages are understandable and actionable.\r\n* Since we were short on time, we couldn't use the recruiting provided by the UX lab but instead brought in our own developers, which we recruited from the .NET engineering team\r\n\r\nThis has worked out well for us as we were able to get short term feedback which resulted in significant improvements to the overall API shape and usability. In the future, we should do more API focused UX studies 😊\r\n\r\n## Tasks\r\n\r\n| # | Description                            | Code\r\n|:--|:---------------------------------------|:-----\r\n| 1 | Serialize and pretty print             | [Link](https://github.com/ahsonkhan/JsonUxStudy/blob/master/UxScenarios/Scenario1/Program.cs#L19-L31)\r\n| 2 | Deserialize with trailing comma        | [Link](https://github.com/ahsonkhan/JsonUxStudy/blob/master/UxScenarios/Scenario2/Program.cs#L19-L25)\r\n| 3 | Deserialize with custom property names | [Link](https://github.com/ahsonkhan/JsonUxStudy/blob/master/UxScenarios/Scenario3/Program.cs#L30-L45)\r\n| 4 | Read with DOM                          | [Link](https://github.com/ahsonkhan/JsonUxStudy/blob/master/UxScenarios/Scenario4/Program.cs#L20-L35)\r\n| 5 | Pretty print an existing JSON file     | [Link](https://github.com/ahsonkhan/JsonUxStudy/blob/master/UxScenarios/Scenario5/Program.cs#L26-L34)\r\n\r\n## Hypotheses\r\n\r\nWe expect developers to...\r\n\r\n| # | Description                                            | Result\r\n|:--|:-------------------------------------------------------|:---------------\r\n| 1 | ...assume the APIs are similar/identical to JSON.NET   |  Validated\r\n| 2 | ...complete tasks 1-4 successfully                     |  Validated\r\n| 3 | ...struggle/unable to complete the task 5, because it requires working with two different components which is very different from JSON.NET |  Invalidated\r\n| 4 | ...not look at documentation for most of their coding as IntelliSense is good enough |  Invalidated\r\n| 5 | ...be happy with the experience of using the API                                     |  Validated\r\n| 6 | ...plan on using `System.Text.Json` for their next JSON task                         |  Partially Validated\r\n\r\n##  Key Observations\r\n\r\n* Everyone completed scenarios #1-#3, 2 didn't complete #4, 6 didn't complete #5\r\n    - The reason was always \"out of time\". Every person who started a scenario successfully finished it.\r\n    - We feel this validates that we picked the right scope for a 60 minute study of people from various backgrounds\r\n* Overall people liked the new API\r\n    - Key value prop for most people was the fact that \"it's now built in\"\r\n    - Very few mentioned perf and the ones that did thought that it probably wouldn't make a difference in their scenarios.\r\n    - Most people said they would prefer `System.Text.Json` for new APIs, but would stick to JSON.NET in code that already uses it.\r\n    - **[Action]** None, this is in line with what we expected.\r\n* Virtually everyone tried to google for sample code in the documentation\r\n    - Everyone found our blog post and online documentation\r\n    - People new to .NET were confused that JSON.NET and `System.Text.Json` weren't the same thing\r\n    - Everyone complained that the current docs are lacking, especially sample code.\r\n    - **[Action]** Docs are work in progress. We plan on shipping with a fully documented API surface and sample code.\r\n* Virtually everyone found the key type relatively quickly\r\n    - Some people were confused when types were static, rather than something that one can new up\r\n    - **[Action]** None. This is by-design as we try to reduce the number of allocations.\r\n* Virtually everyone had trouble selecting the correct method on\r\n  `JsonSerializer`\r\n    - We chose a very complicated naming convention\r\n    - **[Action]** We simplified it by using names that people in the study told us were looking for.\r\n* Most of our error messages were well received because they told people what\r\n  the problem is & how they can fix them.\r\n    - One error message was unclear because we reported an unexpected character when we could have reported that we didn't expect a comment.\r\n    - **[Action]** We've reworded the error message.\r\n    - We had one error message that was generated by a lower layer and provided an action item that doesn't make sense when people receive it when using the higher layer component.\r\n    - **[Action]** We've reworded the error message to be more generic so it makes sense for both kind of consumers.\r\n* Virtually everyone used the new Roslyn completion feature which will also show\r\n  types from namespaces not imported yet.\r\n    - However, virtually nobody realized that they were doing it.\r\n    - This caused confusion when people found other APIs that happen to include Json in them, specifically the old data contract serialization.\r\n    - **[Action]** Talk to the Roslyn IDE team to see if this something more people will run into. This could prove to be especially problematic for technologies that share type names (e.g. `UserControl` in WinForms and WPF) and both are referenced by the project.\r\n* Optional parameters and `async`/`await` are usability cliffs\r\n    - Many were confused by optional parameters and tried to pass them in, even though they didn't have to.\r\n    - **[Action]** Talk to the Roslyn IDE team to see if we can visualize them better in VS.\r\n    - **[Action]** Try to avoid heavy use of optional parameters for mainline APIs.\r\n    - Async is a very steep cliff. People have no idea what to do in their code to make async work. While IntelliSense shows the usage by prefixing it with await, people didn't notice that.\r\n    - **[Action]** Unclear; this is a broader issue.\r\n* Virtually nobody used F1 to get help for APIs\r\n    - *Surprise*. I expected more people to use <kbd>F1</kbd>.\r\n* Virtually everyone used F12 to explore the API (\"metadata view\")\r\n    - *Surprise*. I expected most people to explore the type via the\r\n      IntelliSense completion\r\n* Nobody used Object Browser to explorer the APIs\r\n    - *Surprise*. I expected at least some people to.\r\n\r\n## Discussion\r\n\r\nFor a discussion, please go to https://github.com/dotnet/corefx/issues/39304."}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"10170433691","Type":"PullRequestEvent","CreatedAt":"2019-08-08T05:18:23","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/26060","RelatedDescription":"Merged pull request \"Delete dead code\" (#26060) at dotnet/coreclr","RelatedBody":""},{"Id":"10170321815","Type":"IssuesEvent","CreatedAt":"2019-08-08T04:46:55","Actor":"AaronRobinsonMSFT","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/26051","RelatedDescription":"Closed issue \"Sign NuGet packages prior to publish\" (#26051) at dotnet/coreclr","RelatedBody":"In PR https://github.com/dotnet/coreclr/pull/26020 sign checking has been deferred. This is being deferred because the coreclr doesn't presently sign `nupkg` files. Once that is done, sign validation can be re-enabled.\r\n\r\ncc @dotnet/coreclr-infra "},{"Id":"10170137985","Type":"PullRequestEvent","CreatedAt":"2019-08-08T03:50:38","Actor":"sandreenko","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/25898","RelatedDescription":"Merged pull request \"Separate statements from GenTree, part 1\" (#25898) at dotnet/coreclr","RelatedBody":"bcbf3704a8: Fix some leftovers where we used GenTree instead of GenTreeStmt.\r\n\r\n39adc78439: Separate GT_IL_OFFSET and GT_STMT.\r\n\r\n1c50f5b2b9: Add unreached to gtHashValue for GT_STMT.\r\n\r\nit has an assert that tree is not GT_STMT: https://github.com/dotnet/coreclr/blob/65a50887b9a460d7833f0ab476fab9027f1e8166/src/jit/gentree.cpp#L1837 the assert was added before 2010.\r\n\r\n3fff1716a9: Do not use gtCloneExpr for stms.\r\n\r\nContributes to #25899 "},{"Id":"10169879302","Type":"IssuesEvent","CreatedAt":"2019-08-08T02:37:40","Actor":"xhk","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/26061","RelatedDescription":"Closed issue \"首先，感谢各位的捧场！\" (#26061) at dotnet/coreclr","RelatedBody":"首先，感谢各位的捧场！\r\n其次，跟.net core团队致歉，我说话有点难听，对不起，Sorry！\r\n\r\n我不知道.net core支持不支持龙芯、mips这类架构的cpu，之前看论坛确实有人尝试过，但是没有成功。\r\n\r\n我认为每种cpu架构的指令会有些许的区别，如果要适配可能需要.net core团队加入特定的cpu指令，我想这是一个C#程序员搞不定的地方，对着编译教程能编译通过就是一件不容易的事了，更别想自己适配cpu指令了。\r\n\r\n希望有能力的人尽早加入.net core的开源社区多多贡献吧，也希望.net core越来越好，早日实现自己心中的目标。\r\n\r\n_为了显示我道歉的诚意，就不翻译。_\r\n\r\n_Originally posted by @guodf in https://github.com/dotnet/coreclr/issues/25983#issuecomment-518899822_\r\n\r\n支持各种cpu的活，C#程序员就不用操心了，这点交给C/C++程序员就好了。"},{"Id":"10169878496","Type":"IssuesEvent","CreatedAt":"2019-08-08T02:37:26","Actor":"xhk","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/26061","RelatedDescription":"Opened issue \"首先，感谢各位的捧场！\" (#26061) at dotnet/coreclr","RelatedBody":"首先，感谢各位的捧场！\r\n其次，跟.net core团队致歉，我说话有点难听，对不起，Sorry！\r\n\r\n我不知道.net core支持不支持龙芯、mips这类架构的cpu，之前看论坛确实有人尝试过，但是没有成功。\r\n\r\n我认为每种cpu架构的指令会有些许的区别，如果要适配可能需要.net core团队加入特定的cpu指令，我想这是一个C#程序员搞不定的地方，对着编译教程能编译通过就是一件不容易的事了，更别想自己适配cpu指令了。\r\n\r\n希望有能力的人尽早加入.net core的开源社区多多贡献吧，也希望.net core越来越好，早日实现自己心中的目标。\r\n\r\n_为了显示我道歉的诚意，就不翻译。_\r\n\r\n_Originally posted by @guodf in https://github.com/dotnet/coreclr/issues/25983#issuecomment-518899822_\r\n\r\n支持各种cpu的活，C#程序员就不用操心了，这点交给C/C++程序员就好了。"},{"Id":"10169831466","Type":"PullRequestEvent","CreatedAt":"2019-08-08T02:24:25","Actor":"mjsabby","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/26060","RelatedDescription":"Opened pull request \"Delete dead code\" (#26060) at dotnet/coreclr","RelatedBody":""},{"Id":"10169765645","Type":"IssuesEvent","CreatedAt":"2019-08-08T02:06:05","Actor":"stephentoub","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/26059","RelatedDescription":"Opened issue \"Enable same analyzers as corefx for Corelib\" (#26059) at dotnet/coreclr","RelatedBody":"We've been increasing the number of analyzer rules we run on corefx code, but corelib has been left out.  We need to\r\n- Move CodeAnalyzers.ruleset to shared.\r\n- Get Corelib clean against the same set of rules.\r\n- Enable the analyzers."},{"Id":"10169746036","Type":"PullRequestEvent","CreatedAt":"2019-08-08T02:00:45","Actor":"stephentoub","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/26058","RelatedDescription":"Merged pull request \"Delete PROJECTN ifdefs from Corelib\" (#26058) at dotnet/coreclr","RelatedBody":"Per comment at https://github.com/dotnet/corefx/pull/39921#discussion_r311324865\r\ncc: @jkotas, @ViktorHofer "},{"Id":"10169070239","Type":"PullRequestEvent","CreatedAt":"2019-08-07T22:51:03","Actor":"jashook","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/25925","RelatedDescription":"Merged pull request \"Publish built tests\" (#25925) at dotnet/coreclr","RelatedBody":"This will allow us to publish the tests that are built during the azure dev ops run."},{"Id":"10168948931","Type":"IssuesEvent","CreatedAt":"2019-08-07T22:22:47","Actor":"sywhang","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/23299","RelatedDescription":"Closed issue \"Pending IPC work items\" (#23299) at dotnet/coreclr","RelatedBody":"## Pending IPC work items\r\n- [x] Add tests\r\n- [x] Add streaming functionality\r\n- [x] Repurpose LF_REMOTING (currently used under the Diagnostics STRESS_LOG usage)\r\n- [x] Replace the use of LOG under the Diagnostics Server with STRESS_LOG\r\n- [x] Revisit the IPC mode of sending messages (byte vs message)\r\n- [x] Handle shutdown on non-Windows platform (Need to unlink socket on the filesystem when the runtime exit with Ctrl-C/Ctrl-Break)"}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"10169432263","Type":"IssuesEvent","CreatedAt":"2019-08-08T00:28:16","Actor":"ivanbasov","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/12168","RelatedDescription":"Opened issue \"Provide a map file generation to use for remove unused references functionality\" (#12168) at dotnet/cli","RelatedBody":"This task is a part of https://github.com/dotnet/roslyn/issues/36068.\r\n\r\nThe build team will generate a file with a map of assemblies, packages which can be checked for usage/non-usage. MS Build will generated the file. If other environments are used, they have to provide this file on their own."},{"Id":"10168989238","Type":"PullRequestEvent","CreatedAt":"2019-08-07T22:31:45","Actor":"dotnet-maestro[bot]","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/12167","RelatedDescription":"Merged pull request \"[release/3.0.1xx] Update dependencies from dotnet/core-setup\" (#12167) at dotnet/cli","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:1a2c0403-dbb9-4253-1c2d-08d6fb3704ce)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190807.10\r\n- **Date Produced**: 8/7/2019 9:45 PM\r\n- **Commit**: 88e391bb71d5659c28fdb23434752cab6878cc06\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.0.0-preview9-19407-10\r\n  - **Microsoft.NET.HostModel** -> 3.0.0-preview9-19407-10\r\n  - **Microsoft.Extensions.DependencyModel** -> 3.0.0-preview9-19407-10\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 3.0.0-preview9-19407-10\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 3.0.0-preview9-19407-10\r\n\r\n[marker]: <> (End:1a2c0403-dbb9-4253-1c2d-08d6fb3704ce)\r\n\r\n"}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"10170252837","Type":"IssuesEvent","CreatedAt":"2019-08-08T04:25:55","Actor":"chrisaut","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/1408","RelatedDescription":"Opened issue \"Include IHttpClientFactory?\" (#1408) at dotnet/standard","RelatedBody":"Microsoft [recommends](https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests) using IHttpClientFactory instead of either create a new HttpClient for each use ([potential socket starvation](https://aspnetmonsters.com/2016/08/2016-08-27-httpclientwrong/) even if disposing correctly), or reusing same client yourself ([DNS updat issues](https://github.com/dotnet/corefx/issues/11224)).\r\n\r\nThis is available [since .net core 2.1](https://apisof.net/catalog/System.Net.Http.IHttpClientFactory) but not in any net standard version.\r\n\r\nCould/should this be included in 2.1? Some libraries may want to take it on as a constructor arg"},{"Id":"10165149913","Type":"PullRequestEvent","CreatedAt":"2019-08-07T13:20:33","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/1407","RelatedDescription":"Merged pull request \"[master] Update dependencies from dotnet/corefx\" (#1407) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190807.1\r\n- **Date Produced**: 8/7/2019 9:33 AM\r\n- **Commit**: de38804d52f6b65f0f290b81383f01e6943a6d8f\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19407.1\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19407.1\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19407.1\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n"},{"Id":"10165085212","Type":"PullRequestEvent","CreatedAt":"2019-08-07T13:12:23","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/1406","RelatedDescription":"Merged pull request \"[master] Update dependencies from dotnet/corefx\" (#1406) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190807.1\r\n- **Date Produced**: 8/7/2019 9:33 AM\r\n- **Commit**: de38804d52f6b65f0f290b81383f01e6943a6d8f\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19407.1\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19407.1\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19407.1\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n"},{"Id":"10165031152","Type":"PullRequestEvent","CreatedAt":"2019-08-07T13:05:22","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/1407","RelatedDescription":"Opened pull request \"[master] Update dependencies from dotnet/corefx\" (#1407) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190807.1\r\n- **Date Produced**: 8/7/2019 9:33 AM\r\n- **Commit**: de38804d52f6b65f0f290b81383f01e6943a6d8f\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19407.1\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19407.1\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19407.1\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n"},{"Id":"10165007183","Type":"PullRequestEvent","CreatedAt":"2019-08-07T13:02:16","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/1406","RelatedDescription":"Opened pull request \"[master] Update dependencies from dotnet/corefx\" (#1406) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190807.1\r\n- **Date Produced**: 8/7/2019 9:33 AM\r\n- **Commit**: de38804d52f6b65f0f290b81383f01e6943a6d8f\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19407.1\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19407.1\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19407.1\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n"},{"Id":"10164660572","Type":"PullRequestEvent","CreatedAt":"2019-08-07T12:15:03","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/1405","RelatedDescription":"Merged pull request \"[master] Update dependencies from dotnet/arcade\" (#1405) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190806.7\r\n- **Date Produced**: 8/7/2019 12:08 AM\r\n- **Commit**: c155e609f88491128e1a66d09f413062f3344d4b\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19406.7\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19406.7\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19406.7\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19406.7\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19406.7\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19406.7\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n"},{"Id":"10164657787","Type":"PullRequestEvent","CreatedAt":"2019-08-07T12:14:39","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/1404","RelatedDescription":"Merged pull request \"[master] Update dependencies from dotnet/arcade\" (#1404) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190806.7\r\n- **Date Produced**: 8/7/2019 12:08 AM\r\n- **Commit**: c155e609f88491128e1a66d09f413062f3344d4b\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19406.7\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19406.7\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19406.7\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19406.7\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19406.7\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19406.7\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n"},{"Id":"10164592478","Type":"PullRequestEvent","CreatedAt":"2019-08-07T12:04:56","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/1405","RelatedDescription":"Opened pull request \"[master] Update dependencies from dotnet/arcade\" (#1405) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190806.7\r\n- **Date Produced**: 8/7/2019 12:08 AM\r\n- **Commit**: c155e609f88491128e1a66d09f413062f3344d4b\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19406.7\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19406.7\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19406.7\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19406.7\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19406.7\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19406.7\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n"},{"Id":"10164589697","Type":"PullRequestEvent","CreatedAt":"2019-08-07T12:04:33","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/1404","RelatedDescription":"Opened pull request \"[master] Update dependencies from dotnet/arcade\" (#1404) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190806.7\r\n- **Date Produced**: 8/7/2019 12:08 AM\r\n- **Commit**: c155e609f88491128e1a66d09f413062f3344d4b\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19406.7\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19406.7\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19406.7\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19406.7\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19406.7\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19406.7\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n"}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"10170406569","Type":"PullRequestEvent","CreatedAt":"2019-08-08T05:10:48","Actor":"danmosemsft","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/40128","RelatedDescription":"Merged pull request \"[release/3.0] Disable System.Net.Http.FunctionalTests SetDelegate_ConnectionSucceeds on OSX\" (#40128) at dotnet/corefx","RelatedBody":"Per discussion in #39989 disabling the test on MacOS Catalina.\r\nPorts: https://github.com/dotnet/corefx/pull/40119\r\n\r\n#### Description\r\n\r\nDisable System.Net.Http.FunctionalTests SetDelegate_ConnectionSucceeds on OSX Catalina\r\n\r\n#### Customer Impact\r\n\r\nNone - this is a test only change (reducing noise on the official test runs)\r\n\r\n#### Regression?\r\n\r\nNo\r\n\r\n#### Risk\r\n\r\nNone - test only change\r\n"},{"Id":"10170328367","Type":"PullRequestEvent","CreatedAt":"2019-08-08T04:48:55","Actor":"Dotnet-GitSync-Bot","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/40132","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#40132) at dotnet/corefx","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"10170221455","Type":"PullRequestEvent","CreatedAt":"2019-08-08T04:16:11","Actor":"Dotnet-GitSync-Bot","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/40131","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#40131) at dotnet/corefx","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"10170148841","Type":"PullRequestEvent","CreatedAt":"2019-08-08T03:54:00","Actor":"layomia","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/pull/39094","RelatedDescription":"Closed pull request \"Add real world tests\" (#39094) at dotnet/corefx","RelatedBody":""}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"10170406020","Type":"IssuesEvent","CreatedAt":"2019-08-08T05:10:41","Actor":"jcouv","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/35684","RelatedDescription":"Closed issue \"Should `static bool IsDefault<T>(T xx = default) => xx == default;` compile?\" (#35684) at dotnet/roslyn","RelatedBody":"**Version Used**: \r\nsharplab.io(master/2.9.0)\r\n\r\n**Steps to Reproduce**:\r\nhttps://sharplab.io/#v2:EYLgtghgzgLgpgJwDQBMQGoA+ABADAAmwEYBuAWAChsBmQgJnwGF8BvS/DwogNn2AHt+AG3wBJKABE4AMwgBXITCIAeACoA+ABSr8AD134AvPhQz5igJRH1eg4eMA7BUPIVOXXgOFjJZhTDo1LR19IxM/S2tbfABLKHwnIRd2TmJPQRFxKVl/aiDtaONTHMjDG1D7cJKYV3cAejq0vgyfbPMYABZ8kLsq9qsywqKImG0LVwBfIA=\r\n\r\n**Expected Behavior**:\r\nhttps://github.com/dotnet/csharplang/blob/98043cdc889303d956d540d7ab3bc4f5044a9d3b/proposals/csharp-7.1/target-typed-default.md\r\n`xx == default` should be the same as `xx == default(T)`, and can't compile.\r\n\r\n**Actual Behavior**:\r\n`xx == default` is compile as `xx == null` without warns, and so `default(T) == default` is always false for struct."},{"Id":"10170390505","Type":"PullRequestEvent","CreatedAt":"2019-08-08T05:06:28","Actor":"jcouv","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/37684","RelatedDescription":"Merged pull request \"Make it clear in Syntax.xml when fields are exclusive of each other.\" (#37684) at dotnet/roslyn","RelatedBody":"This is a followup to https://github.com/dotnet/roslyn/pull/37674.  It will be easier to review once that goes in.\r\n\r\nThis is my **final** PR related to tweaking syntax.xml.    I'm at a happy point now.  \r\n\r\nThis PR adds some helper annotation nodes into the tree to make the relationship between different field-nodes in a type clearer.  For example, instead of just saying `a lambda has an optional block, or an optional expression`, the syntax now says `a lambda has either a block or an expression`.  This helps more clearly indicate that you really don't expect legal syntax to have neither of these, nor do you expect legal syntax to have both of them.\r\n\r\nThis is useful for some downstream tooling.  Specifically, it means we can generate better g4 productions like:\r\n\r\n```g4\r\nlambda_expression\r\n  : parenthesized_lambda_expression\r\n  | simple_lambda_expression\r\n  ;\r\n\r\nparenthesized_lambda_expression\r\n  : 'async'? parameter_list '=>' (block | expression)\r\n  ;\r\n\r\nsimple_lambda_expression\r\n  : 'async'? parameter '=>' (block | expression)\r\n  ;\r\n```\r\n\r\ninstead of\r\n\r\n```g4\r\nlambda_expression\r\n  : parenthesized_lambda_expression\r\n  | simple_lambda_expression\r\n  ;\r\n\r\nparenthesized_lambda_expression\r\n  : 'async'? parameter_list '=>' block? expression?\r\n  ;\r\n\r\nsimple_lambda_expression\r\n  : 'async'? parameter '=>' block? expression?\r\n  ;\r\n```"},{"Id":"10169440052","Type":"PullRequestEvent","CreatedAt":"2019-08-08T00:30:34","Actor":"dotnet-automerge-bot","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/37813","RelatedDescription":"Merged pull request \"Merge release/dev16.2 to release/dev16.2-vs-deps\" (#37813) at dotnet/roslyn","RelatedBody":"\nThis is an automatically generated pull request from release/dev16.2 into release/dev16.2-vs-deps.\n(created from a manual run of the PR generation tool)\n\n``` bash\ngit fetch --all\ngit checkout merges/release/dev16.2-to-release/dev16.2-vs-deps\ngit reset --hard upstream/release/dev16.2-vs-deps\ngit merge upstream/release/dev16.2\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/dev16.2-to-release/dev16.2-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"10169417503","Type":"PullRequestEvent","CreatedAt":"2019-08-08T00:24:04","Actor":"jasonmalinowski","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/37822","RelatedDescription":"Opened pull request \"Remove inaccessible attributes when generating from the navigation bar\" (#37822) at dotnet/roslyn","RelatedBody":"When generating code from the navigation bar, we should remove inaccessible attributes, since there's no value in spitting code that won't build.\r\n\r\nFixes https://github.com/dotnet/roslyn/issues/37621 although perhaps not in the ideal way. We may also want to generally drop all nullable attributes when generating VB code, but that's being tracked by https://github.com/dotnet/roslyn/issues/30327 as there's some design questions still out."}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"10170223639","Type":"PullRequestEvent","CreatedAt":"2019-08-08T04:16:51","Actor":"Dotnet-GitSync-Bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7674","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr,corefx\" (#7674) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr,corefx\n\n\n**Please REBASE this PR when merging**"},{"Id":"10164608801","Type":"PullRequestEvent","CreatedAt":"2019-08-07T12:07:26","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7673","RelatedDescription":"Merged pull request \"Pass stack trace policy\" (#7673) at dotnet/corert","RelatedBody":"Found this change among a bunch of untracked files when I was cleaning up some CPAOT instrumentation I was doing.\r\n\r\nThis was supposed to go in with #7665."},{"Id":"10163832151","Type":"PullRequestEvent","CreatedAt":"2019-08-07T10:09:17","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7673","RelatedDescription":"Opened pull request \"Pass stack trace policy\" (#7673) at dotnet/corert","RelatedBody":"Found this change among a bunch of untracked files when I was cleaning up some CPAOT instrumentation I was doing.\r\n\r\nThis was supposed to go in with #7665."},{"Id":"10162689422","Type":"PullRequestEvent","CreatedAt":"2019-08-07T07:33:48","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7671","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#7671) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @tannergooding @lambdageek"},{"Id":"10162092048","Type":"PullRequestEvent","CreatedAt":"2019-08-07T05:38:36","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/corert/pull/7671","RelatedDescription":null,"RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @tannergooding @lambdageek"},{"Id":"10162091945","Type":"PullRequestEvent","CreatedAt":"2019-08-07T05:38:34","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/pull/7671","RelatedDescription":"Closed pull request \"Mirror changes from dotnet/coreclr\" (#7671) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @tannergooding @lambdageek"},{"Id":"10161271512","Type":"IssuesEvent","CreatedAt":"2019-08-07T01:49:37","Actor":"mjsabby","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/issues/7672","RelatedDescription":"Opened issue \"Add Span/ROSpan to Test.CoreLib\" (#7672) at dotnet/corert","RelatedBody":"I think add Span and ROS to Test.CoreLib makes it considerably more useful. I'm not sure what the threshold for Test.CoreLib is. Is it the absolute minimum? Or is it the absolute minimum + extremely extremely important stuff.\r\n\r\nFor example, I don't believe `object.ToString()` needs to be in Test.CoreLib but I can understand if this starts to get into a slippery slope."},{"Id":"10158921401","Type":"PullRequestEvent","CreatedAt":"2019-08-06T18:06:22","Actor":"Dotnet-GitSync-Bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7671","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#7671) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"10156436745","Type":"PullRequestEvent","CreatedAt":"2019-08-06T12:50:03","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7670","RelatedDescription":"Merged pull request \"Fix a couple R2R issues I hit\" (#7670) at dotnet/corert","RelatedBody":"* I don't know how, but I missed the PInvoke ReadyToRun helpers exist in CoreCLR\r\n* Add a couple more CORINFO_HELP helpers that don't have R2R mapping\r\n* Cannot get FieldInfo for a field with an indeterminate offset."},{"Id":"10155226683","Type":"PullRequestEvent","CreatedAt":"2019-08-06T09:49:30","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7670","RelatedDescription":"Opened pull request \"Fix a couple R2R issues I hit\" (#7670) at dotnet/corert","RelatedBody":"* I don't know how, but I missed the PInvoke ReadyToRun helpers exist in CoreCLR\r\n* Add a couple more CORINFO_HELP helpers that don't have R2R mapping\r\n* Cannot get FieldInfo for a field with an indeterminate offset."},{"Id":"10153051013","Type":"PullRequestEvent","CreatedAt":"2019-08-06T02:41:04","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7669","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/corefx\" (#7669) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/corefx\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub"},{"Id":"10149412157","Type":"PullRequestEvent","CreatedAt":"2019-08-05T15:10:07","Actor":"Dotnet-GitSync-Bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7669","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/corefx\" (#7669) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/corefx\n\n\n**Please REBASE this PR when merging**"},{"Id":"10146455203","Type":"PullRequestEvent","CreatedAt":"2019-08-05T08:11:44","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7665","RelatedDescription":"Merged pull request \"Fix stack traces when reflection is disabled\" (#7665) at dotnet/corert","RelatedBody":"This enables stack trace metadata when `IlcDisableReflection == true` and `IlcGenerateStackTraceData == true`. Enabling stack trace metadata had no effect before this change.\r\n\r\nThis also has a side effect of always generating the metadata blob. This is necessary because `ModuleList` tends to ignore modules that don't have the embedded metadata blob (https://github.com/dotnet/corert/blob/635cf21aca11265ded9d78d216424bd609c052f5/src/System.Private.TypeLoader/src/Internal/Runtime/TypeLoader/ModuleList.cs#L713-L720). Emitting an empty blob fixes the bug where delegate interop didn't work with reflection disabled."},{"Id":"10146265912","Type":"PullRequestEvent","CreatedAt":"2019-08-05T07:41:07","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7659","RelatedDescription":"Merged pull request \"Prevent computing bad layout\" (#7659) at dotnet/corert","RelatedBody":"Value type fields that contain GC pointers need to start at pointer boundaries.\r\n\r\nCoreCLR does this check a bit differently (it technically allows unaligned fields, provided the GC pointer inside the valuetype ends up being aligned with respect to the beginning of the type, but in reality, I don't think it's possible to end up in such situation - the layout of the field type itself would end up being invalid).\r\n\r\nFixes one of the CPAOT failures."}],"ResultType":"GitHubEvent"},"SDK":{"Events":[],"ResultType":"GitHubEvent"},"Home-Issues":{"Issues":[{"Id":"475315730","IsPullRequest":false,"CreatedAt":"2019-07-31T19:23:23","Actor":"MeikTranel","Number":"148","RawContent":null,"Title":"Clarify guidelines in regards to Options and Requirements","State":"open","Body":"I'd be interested in which part of the project submission guidelines is optional and which are deal breaker requirements.\r\n\r\n- Is the Role Matrix laid out an absolute or (as can be read between the lines) just a preset, which may be subject to individual projects needs?\r\n- Is it a strong requirement that the project uses the contributor covenant CoC?","Url":"https://github.com/dotnet/foundation/issues/148","RelatedDescription":"Open issue \"Clarify guidelines in regards to Options and Requirements\" (#148)"},{"Id":"455670422","IsPullRequest":true,"CreatedAt":"2019-06-13T10:49:30","Actor":"gep13","Number":"147","RawContent":null,"Title":"(GH-111) Update Source Link location","State":"open","Body":"","Url":"https://github.com/dotnet/foundation/pull/147","RelatedDescription":"Open PR \"(GH-111) Update Source Link location\" (#147)"},{"Id":"455555823","IsPullRequest":true,"CreatedAt":"2019-06-13T06:28:59","Actor":"gep13","Number":"146","RawContent":null,"Title":"Update Cake Project Contacts","State":"closed","Body":"@jongalloway just noticed that this wasn't up to date.","Url":"https://github.com/dotnet/foundation/pull/146","RelatedDescription":"Closed or merged PR \"Update Cake Project Contacts\" (#146)"},{"Id":"441542047","IsPullRequest":true,"CreatedAt":"2019-05-09T18:35:22","Actor":"mitchelsellers","Number":"145","RawContent":null,"Title":"Edits to DNN Platform Information","State":"closed","Body":"Edits to reflect changes in repository structure with recent modifications to the overall project structure.","Url":"https://github.com/dotnet/foundation/pull/145","RelatedDescription":"Closed or merged PR \"Edits to DNN Platform Information\" (#145)"},{"Id":"437980746","IsPullRequest":true,"CreatedAt":"2019-05-03T20:10:38","Actor":"FlorianRappl","Number":"143","RawContent":null,"Title":"Add AngleSharp","State":"closed","Body":"cc @jongalloway ","Url":"https://github.com/dotnet/foundation/pull/143","RelatedDescription":"Closed or merged PR \"Add AngleSharp\" (#143)"},{"Id":"426787230","IsPullRequest":true,"CreatedAt":"2019-05-03T20:08:40","Actor":"mairaw","Number":"141","RawContent":null,"Title":"add links to ML.NET docs","State":"closed","Body":"/cc @JRAlexander @shauheen \r\n\r\nTo match the info we have added for other projects","Url":"https://github.com/dotnet/foundation/pull/141","RelatedDescription":"Closed or merged PR \"add links to ML.NET docs\" (#141)"},{"Id":"440030132","IsPullRequest":true,"CreatedAt":"2019-05-03T20:08:15","Actor":"tomasherceg","Number":"144","RawContent":null,"Title":"Add DotVVM","State":"closed","Body":"cc @jongalloway ","Url":"https://github.com/dotnet/foundation/pull/144","RelatedDescription":"Closed or merged PR \"Add DotVVM\" (#144)"},{"Id":"426787542","IsPullRequest":true,"CreatedAt":"2019-03-29T14:44:24","Actor":"mairaw","Number":"142","RawContent":null,"Title":"add docs samples link","State":"closed","Body":"@BillWagner should we add the samples project too?","Url":"https://github.com/dotnet/foundation/pull/142","RelatedDescription":"Closed or merged PR \"add docs samples link\" (#142)"},{"Id":"426658581","IsPullRequest":true,"CreatedAt":"2019-03-29T02:16:07","Actor":"scottaddie","Number":"139","RawContent":null,"Title":"Add link to ASP.NET Core docs","State":"closed","Body":"Provide a link to the docs site for ASP.NET Core.","Url":"https://github.com/dotnet/foundation/pull/139","RelatedDescription":"Closed or merged PR \"Add link to ASP.NET Core docs\" (#139)"},{"Id":"426666928","IsPullRequest":true,"CreatedAt":"2019-03-29T02:15:48","Actor":"BillWagner","Number":"140","RawContent":null,"Title":"add links to .NET docs","State":"closed","Body":"/cc @mairaw @scottaddie\r\n\r\nMaira, did I miss any project repos to tag?","Url":"https://github.com/dotnet/foundation/pull/140","RelatedDescription":"Closed or merged PR \"add links to .NET docs\" (#140)"},{"Id":"419205679","IsPullRequest":true,"CreatedAt":"2019-03-18T21:04:01","Actor":"MikeWilliams-UK","Number":"137","RawContent":null,"Title":"Add V3.1 repo and change documentation link","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/137","RelatedDescription":"Closed or merged PR \"Add V3.1 repo and change documentation link\" (#137)"},{"Id":"419897914","IsPullRequest":true,"CreatedAt":"2019-03-18T21:03:34","Actor":"devlead","Number":"138","RawContent":null,"Title":"Add Dave to cake.md","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/138","RelatedDescription":"Closed or merged PR \"Add Dave to cake.md\" (#138)"},{"Id":"391459677","IsPullRequest":false,"CreatedAt":"2019-03-08T19:00:06","Actor":"manne","Number":"123","RawContent":null,"Title":"Missing logo for Steeltoe","State":"closed","Body":"`https://brandfolder.com/pivotal-assets/attachments/ohxttd-7yxa60-clvf50/pivotal-assets-pivotal-genericfile.png` redirects to a sign in page\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L128-L130","Url":"https://github.com/dotnet/foundation/issues/123","RelatedDescription":"Closed issue \"Missing logo for Steeltoe\" (#123)"},{"Id":"417018694","IsPullRequest":true,"CreatedAt":"2019-03-08T18:59:32","Actor":"jkonicki","Number":"136","RawContent":null,"Title":"Fix logo and update team contributors","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/136","RelatedDescription":"Closed or merged PR \"Fix logo and update team contributors\" (#136)"},{"Id":"416428925","IsPullRequest":true,"CreatedAt":"2019-03-08T18:59:00","Actor":"manne","Number":"135","RawContent":null,"Title":"adds Umbraco logo","State":"closed","Body":"fixes #124 ","Url":"https://github.com/dotnet/foundation/pull/135","RelatedDescription":"Closed or merged PR \"adds Umbraco logo\" (#135)"},{"Id":"391459812","IsPullRequest":false,"CreatedAt":"2019-03-08T18:59:00","Actor":"manne","Number":"124","RawContent":null,"Title":"Missing logo for Umbraco","State":"closed","Body":"`https://fbcdn-profile-a.akamaihd.net/hprofile-ak-xap1/v/t1.0-1/p160x160/971596_519168901464439_566592989_n.png?oh=ce61e5b4cbd60c0d99c4164cbb05a434&oe=54F091C9&__gda__=1424472439_c9f76213a915bc2af88246f464f29e8b` results in a 404.\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L149-L151","Url":"https://github.com/dotnet/foundation/issues/124","RelatedDescription":"Closed issue \"Missing logo for Umbraco\" (#124)"},{"Id":"416427614","IsPullRequest":true,"CreatedAt":"2019-03-08T18:58:45","Actor":"manne","Number":"134","RawContent":null,"Title":"adds the prism logo","State":"closed","Body":"fixes #126 ","Url":"https://github.com/dotnet/foundation/pull/134","RelatedDescription":"Closed or merged PR \"adds the prism logo\" (#134)"},{"Id":"391460225","IsPullRequest":false,"CreatedAt":"2019-03-08T18:58:44","Actor":"manne","Number":"126","RawContent":null,"Title":"No logo provided for Prism","State":"closed","Body":"Can/should this [image](http://prismlibrary.github.io/images/logo-prism-symbol@2x.png) be used?\r\n\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L155-L157","Url":"https://github.com/dotnet/foundation/issues/126","RelatedDescription":"Closed issue \"No logo provided for Prism\" (#126)"},{"Id":"416157860","IsPullRequest":true,"CreatedAt":"2019-03-08T18:58:26","Actor":"glennawatson","Number":"133","RawContent":null,"Title":"Add additional ReactiveUI organization projects.","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/133","RelatedDescription":"Closed or merged PR \"Add additional ReactiveUI organization projects.\" (#133)"},{"Id":"407251900","IsPullRequest":true,"CreatedAt":"2019-02-18T17:45:44","Actor":"Potapy4","Number":"132","RawContent":null,"Title":"Update MVVM project logo","State":"closed","Body":"Fixes dotnet/dotnetfoundation-website#72\r\nFixes #125","Url":"https://github.com/dotnet/foundation/pull/132","RelatedDescription":"Closed or merged PR \"Update MVVM project logo\" (#132)"},{"Id":"391459919","IsPullRequest":false,"CreatedAt":"2019-02-18T17:45:44","Actor":"manne","Number":"125","RawContent":null,"Title":"Missing logo for MVVM Light Toolkit","State":"closed","Body":"`https://raw.githubusercontent.com/paulcbetts/mvvmlight/master/Installer/InstallItems/html/MVVM_BlackText_190x147.png` results in a 404.\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L137-L139","Url":"https://github.com/dotnet/foundation/issues/125","RelatedDescription":"Closed issue \"Missing logo for MVVM Light Toolkit\" (#125)"},{"Id":"406210463","IsPullRequest":true,"CreatedAt":"2019-02-18T17:44:39","Actor":"NextTurn","Number":"131","RawContent":null,"Title":"Replace http links with https links","State":"closed","Body":"Replace http links with https where possible - both returned 200 OK.","Url":"https://github.com/dotnet/foundation/pull/131","RelatedDescription":"Closed or merged PR \"Replace http links with https links\" (#131)"},{"Id":"399191617","IsPullRequest":true,"CreatedAt":"2019-02-02T11:04:15","Actor":"NextTurn","Number":"130","RawContent":null,"Title":"Update Open XML links","State":"closed","Body":"OpenXmlDeveloper.org was shut down long ago.\r\n\r\nThe content has been moved to EricWhite.com.","Url":"https://github.com/dotnet/foundation/pull/130","RelatedDescription":"Closed or merged PR \"Update Open XML links\" (#130)"},{"Id":"395863354","IsPullRequest":true,"CreatedAt":"2019-01-09T22:28:14","Actor":"ErikEJ","Number":"128","RawContent":null,"Title":"Update of EF description","State":"closed","Body":"@divega !","Url":"https://github.com/dotnet/foundation/pull/128","RelatedDescription":"Closed or merged PR \"Update of EF description\" (#128)"},{"Id":"395901602","IsPullRequest":true,"CreatedAt":"2019-01-05T03:23:39","Actor":"MarcBruins","Number":"129","RawContent":null,"Title":"Update to absolute path","State":"closed","Body":"Update to absolute path so that when this list is copied the link will actually work","Url":"https://github.com/dotnet/foundation/pull/129","RelatedDescription":"Closed or merged PR \"Update to absolute path\" (#129)"},{"Id":"395705579","IsPullRequest":true,"CreatedAt":"2019-01-04T00:22:42","Actor":"carloscds","Number":"127","RawContent":null,"Title":"Update documentation information","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/127","RelatedDescription":"Closed or merged PR \"Update documentation information\" (#127)"},{"Id":"391459057","IsPullRequest":true,"CreatedAt":"2019-01-03T04:47:09","Actor":"manne","Number":"122","RawContent":null,"Title":"targets the existing document","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/122","RelatedDescription":"Closed or merged PR \"targets the existing document\" (#122)"},{"Id":"384569679","IsPullRequest":true,"CreatedAt":"2019-01-03T04:46:31","Actor":"JamesNK","Number":"121","RawContent":null,"Title":"Add Newtonsoft.Json","State":"closed","Body":"// @jongalloway ","Url":"https://github.com/dotnet/foundation/pull/121","RelatedDescription":"Closed or merged PR \"Add Newtonsoft.Json\" (#121)"},{"Id":"384212839","IsPullRequest":true,"CreatedAt":"2018-11-26T09:33:50","Actor":"stefanov-stefan","Number":"120","RawContent":null,"Title":"Added Telerik info","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/120","RelatedDescription":"Closed or merged PR \"Added Telerik info\" (#120)"},{"Id":"384212448","IsPullRequest":true,"CreatedAt":"2018-11-26T09:33:22","Actor":"stefanov-stefan","Number":"119","RawContent":null,"Title":"Added Telerik UWP proj","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/119","RelatedDescription":"Closed or merged PR \"Added Telerik UWP proj\" (#119)"}],"ResultType":"GitHubIssue"},"CoreCLR-Issues":{"Issues":[{"Id":"478218423","IsPullRequest":true,"CreatedAt":"2019-08-08T05:18:22","Actor":"mjsabby","Number":"26060","RawContent":null,"Title":"Delete dead code","State":"closed","Body":"","Url":"https://github.com/dotnet/coreclr/pull/26060","RelatedDescription":"Closed or merged PR \"Delete dead code\" (#26060)"},{"Id":"478065534","IsPullRequest":false,"CreatedAt":"2019-08-08T04:46:54","Actor":"AaronRobinsonMSFT","Number":"26051","RawContent":null,"Title":"Sign NuGet packages prior to publish","State":"closed","Body":"In PR https://github.com/dotnet/coreclr/pull/26020 sign checking has been deferred. This is being deferred because the coreclr doesn't presently sign `nupkg` files. Once that is done, sign validation can be re-enabled.\r\n\r\ncc @dotnet/coreclr-infra ","Url":"https://github.com/dotnet/coreclr/issues/26051","RelatedDescription":"Closed issue \"Sign NuGet packages prior to publish\" (#26051)"},{"Id":"478221295","IsPullRequest":false,"CreatedAt":"2019-08-08T02:37:40","Actor":"xhk","Number":"26061","RawContent":null,"Title":"首先，感谢各位的捧场！","State":"closed","Body":"首先，感谢各位的捧场！\r\n其次，跟.net core团队致歉，我说话有点难听，对不起，Sorry！\r\n\r\n我不知道.net core支持不支持龙芯、mips这类架构的cpu，之前看论坛确实有人尝试过，但是没有成功。\r\n\r\n我认为每种cpu架构的指令会有些许的区别，如果要适配可能需要.net core团队加入特定的cpu指令，我想这是一个C#程序员搞不定的地方，对着编译教程能编译通过就是一件不容易的事了，更别想自己适配cpu指令了。\r\n\r\n希望有能力的人尽早加入.net core的开源社区多多贡献吧，也希望.net core越来越好，早日实现自己心中的目标。\r\n\r\n_为了显示我道歉的诚意，就不翻译。_\r\n\r\n_Originally posted by @guodf in https://github.com/dotnet/coreclr/issues/25983#issuecomment-518899822_\r\n\r\n支持各种cpu的活，C#程序员就不用操心了，这点交给C/C++程序员就好了。","Url":"https://github.com/dotnet/coreclr/issues/26061","RelatedDescription":"Closed issue \"首先，感谢各位的捧场！\" (#26061)"},{"Id":"478214507","IsPullRequest":false,"CreatedAt":"2019-08-08T02:06:02","Actor":"stephentoub","Number":"26059","RawContent":null,"Title":"Enable same analyzers as corefx for Corelib","State":"open","Body":"We've been increasing the number of analyzer rules we run on corefx code, but corelib has been left out.  We need to\r\n- Move CodeAnalyzers.ruleset to shared.\r\n- Get Corelib clean against the same set of rules.\r\n- Enable the analyzers.","Url":"https://github.com/dotnet/coreclr/issues/26059","RelatedDescription":"Open issue \"Enable same analyzers as corefx for Corelib\" (#26059)"},{"Id":"478159051","IsPullRequest":true,"CreatedAt":"2019-08-08T02:00:44","Actor":"stephentoub","Number":"26058","RawContent":null,"Title":"Delete PROJECTN ifdefs from Corelib","State":"closed","Body":"Per comment at https://github.com/dotnet/corefx/pull/39921#discussion_r311324865\r\ncc: @jkotas, @ViktorHofer ","Url":"https://github.com/dotnet/coreclr/pull/26058","RelatedDescription":"Closed or merged PR \"Delete PROJECTN ifdefs from Corelib\" (#26058)"},{"Id":"478156685","IsPullRequest":false,"CreatedAt":"2019-08-07T21:54:29","Actor":"elinor-fung","Number":"26057","RawContent":null,"Title":"error : Failed to resolve SDK 'Microsoft.DotNet.Helix.Sdk'. Package restore was successful but a package with the ID of \"Microsoft.DotNet.Helix.Sdk\" was not installed.","State":"open","Body":"PR and outerloop builds are intermittently hitting this when sending tests to Helix:\r\n```\r\n/__w/2/s/tests/helixpublishwitharcade.proj(7,3): error : Failed to resolve SDK 'Microsoft.DotNet.Helix.Sdk'. Package restore was successful but a package with the ID of \"Microsoft.DotNet.Helix.Sdk\" was not installed.\r\n```\r\nThe strange thing is that it looks like the test run jobs are actually sent and completed after the error.\r\n\r\nExamples:\r\n- PR build [293716](https://dev.azure.com/dnceng/public/_build/results?buildId=293716&view=logs&lineStart=49&jobId=6c23f58b-dd4e-59d4-0149-12bcf7fa0bde&taskId=4150e432-679f-5945-da61-a2b1889dc85c)\r\n- PR build [298122](https://dev.azure.com/dnceng/public/_build/results?buildId=298122&view=logs&lineStart=42&jobId=9c532748-9ca4-586a-2db0-c47bd86f8652&taskId=1c6bd9fc-3899-5882-0618-d192d93e914c)\r\n- outerloop build [286673](https://dev.azure.com/dnceng/public/_build/results?buildId=286673&view=logs&lineStart=46&jobId=02288672-4313-54e7-ac78-0c78077b23f1&taskId=7d1b159a-1648-5a13-c85c-cd5b5d582719)\r\n- outerloop build [296676](https://dev.azure.com/dnceng/public/_build/results?buildId=296676&view=logs&lineStart=50&jobId=5df70884-47c0-5c34-2344-7b08ed4395e9&taskId=f3456839-a8d5-574a-8533-4ebf43d189a8)\r\n\r\ncc @dotnet/coreclr-infra ","Url":"https://github.com/dotnet/coreclr/issues/26057","RelatedDescription":"Open issue \"error : Failed to resolve SDK 'Microsoft.DotNet.Helix.Sdk'. Package restore was successful but a package with the ID of \"Microsoft.DotNet.Helix.Sdk\" was not installed.\" (#26057)"},{"Id":"477643020","IsPullRequest":true,"CreatedAt":"2019-08-07T21:49:26","Actor":"sywhang","Number":"26035","RawContent":null,"Title":"Improve ArgumentNullExceptions on DiagnosticCounter.DisplayName/Unit","State":"closed","Body":"Fix #25967. \r\n\r\ncc @stephentoub ","Url":"https://github.com/dotnet/coreclr/pull/26035","RelatedDescription":"Closed or merged PR \"Improve ArgumentNullExceptions on DiagnosticCounter.DisplayName/Unit\" (#26035)"},{"Id":"478142941","IsPullRequest":true,"CreatedAt":"2019-08-07T21:15:29","Actor":"sywhang","Number":"26056","RawContent":null,"Title":"[3.0 port] Allow for interface implementations in EventSource.WriteEventVarArgs","State":"open","Body":"Backport #25844 to 3.0. Creating on behalf of @josalem who is OOF this week. \r\n\r\nAuthor: John Salem\r\n\r\nIssue: https://github.com/dotnet/coreclr/issues/20493, https://github.com/dotnet/corefx/issues/39431 (related)\r\n\r\nCode Reviewer: Noah Falk, Sung Yoon Whang, Tom McDonald\r\n\r\nDescription\r\nThere is a type check in the runtime that fires a warning message in the debugger log when user tries to log an type that contains an interface implementation through EventSource.\r\n\r\nCustomer Impact\r\nASP.NET enabled EventSource logging by default so any customer that attaches a debugger and any tracing session (EventListener, EventPipe, ETW, etc.) to *any* ASP.NET application will get flooded with the debug message.\r\nCustomers have been reporting this issue and providing feedback that the frequent warning messages disrupt their workflow (ex. https://github.com/aspnet/Extensions/issues/651) .\r\n\r\nRegression?\r\nNo\r\n\r\nRisk\r\nThis is a fairly small change. I believe the risk is minimal.\r\n\r\n/cc @shirhatti @anurse ","Url":"https://github.com/dotnet/coreclr/pull/26056","RelatedDescription":"Open PR \"[3.0 port] Allow for interface implementations in EventSource.WriteEventVarArgs\" (#26056)"},{"Id":"478136591","IsPullRequest":false,"CreatedAt":"2019-08-07T20:58:27","Actor":"X1C3","Number":"26055","RawContent":null,"Title":"AssemblyLoadContext - WPF - Collectable Assemblies are not garbage collected","State":"open","Body":"I have a problem with a plugin that has a wpf usercontrol. If an instance of the control is created then the plugin assembly will not be garbage collected. Whats wrong here?\r\n\r\n```\r\nProject1:\r\npublic interface IPlugin\r\n    {\r\n        object GuiControl { get; }\r\n    }\r\n```\r\n\r\n```\r\nProject2:\r\npublic class Plugin : IPlugin\r\n    {\r\n        public object GuiControl { get; }\r\n\r\n        public Plugin()\r\n        {\r\n            GuiControl = new UserControl1(); // Comment this line out => Assemblies are now garbage collected\r\n        }\r\n\r\n        ~Plugin()\r\n        {\r\n            Console.WriteLine(\"Plugin: Calling destructor\");\r\n        }\r\n    }\r\n```\r\n\r\n```\r\nProject3:\r\npublic class CollectableAssemblyLoadContext : AssemblyLoadContext\r\n    {\r\n        public CollectableAssemblyLoadContext(string name) : base(name, true) { }\r\n              \r\n        protected override Assembly Load(AssemblyName assemblyName) => null;\r\n\r\n        public Assembly Load(byte[] rawAssembly)\r\n        {\r\n            using (var memoryStream = new MemoryStream(rawAssembly))\r\n            {\r\n                var assembly = LoadFromStream(memoryStream);\r\n                return assembly;\r\n            }\r\n        }\r\n    }\r\n\r\nclass Program\r\n    {\r\n        [STAThread]\r\n        static void Main(string[] args)\r\n        {\r\n            for (int i = 0; i < 500; i++)\r\n                TestRun();\r\n\r\n            int counter = 0;\r\n            //while(counter == 100)\r\n            //{\r\n            counter++;\r\n\r\n            GC.Collect();\r\n            GC.WaitForPendingFinalizers();\r\n\r\n            //Thread.Sleep(2500);\r\n            //}\r\n\r\n            Console.WriteLine(\"Assemblies: {0}\", AppDomain.CurrentDomain.GetAssemblies().Where(p => p.IsCollectible).Count()); // 500 Assemblies - Why?\r\n            Console.WriteLine(\"ALC's: {0}\", AssemblyLoadContext.All.Count()); // 1 ALC \"Default\"\r\n\r\n            Console.ReadKey();\r\n        }       \r\n        \r\n        public static void TestRun()\r\n        {\r\n            var context = new CollectableAssemblyLoadContext(Guid.NewGuid().ToString());\r\n            var assembly = context.LoadFromAssemblyPath(Path.Combine(Directory.GetCurrentDirectory(), \"GuiPlugin.dll\"));\r\n\r\n            var instance = (IPlugin) Activator.CreateInstance(assembly.GetType(\"GuiPlugin.Plugin\"));            \r\n\r\n            context.Unload();\r\n        }\r\n    }\r\n```","Url":"https://github.com/dotnet/coreclr/issues/26055","RelatedDescription":"Open issue \"AssemblyLoadContext - WPF - Collectable Assemblies are not garbage collected\" (#26055)"},{"Id":"478066969","IsPullRequest":true,"CreatedAt":"2019-08-07T20:22:38","Actor":"gbalykov","Number":"26052","RawContent":null,"Title":"Fix undefined references with FEATURE_PREJIT=true","State":"closed","Body":"Fix undefined references to methods from `MetaData::HotTable` during ilasm build with `FEATURE_PREJIT=true`, which started to appear after #25144. \r\n\r\n```\r\nundefined reference to `MetaData::HotTable::GetData(unsigned int, unsigned char**, unsigned int, MetaData::HotTableHeader*)'\r\nundefined reference to `MetaData::HotTable::CheckTables(MetaData::HotTablesDirectory*)'\r\n```\r\n\r\ncc @alpencolt @jkotas","Url":"https://github.com/dotnet/coreclr/pull/26052","RelatedDescription":"Closed or merged PR \"Fix undefined references with FEATURE_PREJIT=true\" (#26052)"},{"Id":"478065231","IsPullRequest":false,"CreatedAt":"2019-08-07T20:22:21","Actor":"jashook","Number":"26050","RawContent":null,"Title":"[CI] Separate test job into a build-test job and a run-test job","State":"closed","Body":"This will allow retrying the test without burning another 1hr+ in building the tests.","Url":"https://github.com/dotnet/coreclr/issues/26050","RelatedDescription":"Closed issue \"[CI] Separate test job into a build-test job and a run-test job\" (#26050)"},{"Id":"478115464","IsPullRequest":false,"CreatedAt":"2019-08-07T20:05:49","Actor":"jakobbotsch","Number":"26054","RawContent":null,"Title":"Infinite loop in GenerateShuffleArray on unix64","State":"open","Body":"The following example gets stuck in an infinite loop in `GenerateShuffleArray` on unix64:\r\n```csharp\r\ninternal class Program\r\n{\r\n    private static int Main()\r\n    {\r\n        FooDelegate f = Foo;\r\n        return 100;\r\n    }\r\n\r\n    static int Foo(long a, long b, long c, long d, S16 e, S24 f, long g, long h)\r\n    {\r\n        return 42;\r\n    }\r\n\r\n    delegate int FooDelegate(long a, long b, long c, long d, S16 e, S24 f, long g, long h);\r\n\r\n    struct S16 { long A, B; }\r\n    struct S24 { long A, B, C; }\r\n}\r\n```","Url":"https://github.com/dotnet/coreclr/issues/26054","RelatedDescription":"Open issue \"Infinite loop in GenerateShuffleArray on unix64\" (#26054)"},{"Id":"478011406","IsPullRequest":true,"CreatedAt":"2019-08-07T19:38:37","Actor":"omajid","Number":"26047","RawContent":null,"Title":"Support managed build on linux/aarch64","State":"closed","Body":"We have everything we need to build the native and managed components on aarch64 (hosted, not cross compiled). So lets enable building the managed components on aarch64.\r\n\r\n<details><summary>I have tested this on RHEL 8 + aarch64</summary>\r\n<p>\r\n\r\n```\r\nCommencing build of managed components for Linux.arm64.Debug                                                          \r\n  Restore completed in 140.57 ms for /home/omajid/coreclr/src/build.proj.                                             \r\n  Restore completed in 1.41 sec for /home/omajid/coreclr/src/tools/runincontext/runincontext.csproj.                  \r\n  Restore completed in 9.51 sec for /home/omajid/coreclr/src/tools/r2rdump/R2RDump.csproj.                            \r\n  Restore completed in 9.59 sec for /home/omajid/coreclr/src/System.Private.CoreLib/System.Private.CoreLib.csproj.\r\n\r\nBuild succeeded.                                                                                                      \r\n    0 Warning(s)                                                                                                      \r\n    0 Error(s)                                                                                                        \r\n\r\nTime Elapsed 00:00:15.89                                                                                              \r\n  runincontext -> /home/omajid/coreclr/bin/Product/Linux.arm64.Debug/runincontext.dll                                 \r\n  R2RDump -> /home/omajid/coreclr/bin/Product/Linux.arm64.Debug/R2RDump.dll                                           \r\n  System.Private.CoreLib -> /home/omajid/coreclr/bin/Product/Linux.arm64.Debug/IL/System.Private.CoreLib.dll\r\n\r\nBuild succeeded.                                                                                                      \r\n    0 Warning(s)                                                                                                      \r\n    0 Error(s)                                                                                                        \r\n\r\nTime Elapsed 00:00:34.51                                                                                              \r\nGenerating native image of System.Private.CoreLib.dll for Linux.arm64.Debug. Logging to \"/home/omajid/coreclr/bin/Logs/CrossgenCoreLib_Linux.arm64.Debug.log\".                                                                              \r\n/home/omajid/coreclr/bin/Product/Linux.arm64.Debug/crossgen /Platform_Assemblies_Paths /home/omajid/coreclr/bin/Product/Linux.arm64.Debug/IL  /out /home/omajid/coreclr/bin/Product/Linux.arm64.Debug/System.Private.CoreLib.dll /home/omajid/coreclr/bin/Product/Linux.arm64.Debug/IL/System.Private.CoreLib.dll\r\nGenerating symbol file for System.Private.CoreLib.dll                                                                 \r\n/home/omajid/coreclr/bin/Product/Linux.arm64.Debug/crossgen /Platform_Assemblies_Paths /home/omajid/coreclr/bin/Product/Linux.arm64.Debug /CreatePerfMap /home/omajid/coreclr/bin/Product/Linux.arm64.Debug /home/omajid/coreclr/bin/Product /Linux.arm64.Debug/System.Private.CoreLib.dll                                                                         \r\nGenerating nuget packages for Linux                                                                                   \r\nDistroRid is linux-arm64\r\nROOTFS_DIR is                                                                                                         \r\n/home/omajid/coreclr/.dotnet/sdk/3.0.100-preview6-012264/MSBuild.dll /nologo -bl:/home/omajid/coreclr/bin/Logs/Nuget_Debug.binlog -distributedlogger:Microsoft.DotNet.Tools.MSBuild.MSBuildLogger,/home/omajid/coreclr/.dotnet/sdk/3.0.100-preview6-012264/dotnet.dll*Microsoft.DotNet.Tools.MSBuild.MSBuildForwardingLogger,/home/omajid/coreclr/.dotnet/sdk/3.0.100-preview6-012264/dotnet.dll -maxcpucount /m -verbosity:m /v:minimal /clp:Summary /nr:true /nodeReuse:false /p:TreatWarningsAsErrors=true /p:ContinuousIntegrationBuild=false /p:Configuration=Debug /p:RepoRoot=/home/omajid/coreclr /p:Restore=true /p:Build=true /p:Rebuild=false /p:Test=false /p:Pack=false /p:IntegrationTest=false /p:PerformanceTest=false /p:Sign=false /p:Publish=false /p:PortableBuild=true /p:ArcadeBuild=true /p:__IntermediatesDir=/home/omajid/coreclr/bin/obj/Linux.arm64.Debug /p:__RootBinDir=/home/omajid/coreclr/bin /p:__DoCrossArchBuild=0 /p:__BuildArch=arm64 /p:__BuildType=Debug /p:__BuildOS=Linux /p:RestoreDuringBuild=true /p:Projects=/home/omajid/coreclr/src/.nuget/packages.builds /warnaserror /home/omajid/coreclr/.packages/microsoft.dotnet.arcade.sdk/1.0.0-beta.19405.9/tools/Build.proj\r\n  Restore completed in 43.99 sec for /home/omajid/coreclr/.packages/microsoft.dotnet.arcade.sdk/1.0.0-beta.19405.9/tools/Tools.proj.\r\n  Restore completed in 72.82 ms for /home/omajid/coreclr/src/.nuget/Microsoft.NETCore.Jit/Microsoft.NETCore.Jit.builds.\r\n  Restore completed in 72.28 ms for /home/omajid/coreclr/src/.nuget/Microsoft.NETCore.Native/Microsoft.NETCore.Native.builds.\r\n  Restore completed in 71.72 ms for /home/omajid/coreclr/src/.nuget/Microsoft.NETCore.TestHost/Microsoft.NETCore.TestHost.builds.\r\n  Restore completed in 76.4 ms for /home/omajid/coreclr/src/.nuget/Microsoft.NETCore.ILAsm/Microsoft.NETCore.ILAsm.builds.\r\n  Restore completed in 76.13 ms for /home/omajid/coreclr/src/.nuget/Microsoft.NETCore.Runtime.CoreCLR/Microsoft.NETCore.Runtime.CoreCLR.builds.\r\n  Restore completed in 81.39 ms for /home/omajid/coreclr/src/.nuget/packages.builds.\r\n  Restore completed in 80.07 ms for /home/omajid/coreclr/src/.nuget/Microsoft.NETCore.ILDAsm/Microsoft.NETCore.ILDAsm.builds.\r\n  Microsoft.NETCore.Native -> /home/omajid/coreclr/bin/Product/Linux.arm64.Debug/.nuget//pkg/specs/runtime.linux-arm64.Microsoft.NETCore.Native.nuspec\r\n  Microsoft.NETCore.TestHost -> /home/omajid/coreclr/bin/Product/Linux.arm64.Debug/.nuget//pkg/specs/runtime.linux-arm64.Microsoft.NETCore.TestHost.nuspec\r\n  Microsoft.NETCore.ILAsm -> /home/omajid/coreclr/bin/Product/Linux.arm64.Debug/.nuget//pkg/specs/runtime.linux-arm64.Microsoft.NETCore.ILAsm.nuspec\r\n  Microsoft.NETCore.ILDAsm -> /home/omajid/coreclr/bin/Product/Linux.arm64.Debug/.nuget//pkg/specs/runtime.linux-arm64.Microsoft.NETCore.ILDAsm.nuspec\r\n  Microsoft.NETCore.ILDAsm -> /home/omajid/coreclr/bin/Product/Linux.arm64.Debug/.nuget//pkg/specs/Microsoft.NETCore.ILDAsm.nuspec\r\n  Microsoft.NETCore.Native -> /home/omajid/coreclr/bin/Product/Linux.arm64.Debug/.nuget//pkg/specs/Microsoft.NETCore.Native.nuspec\r\n  Microsoft.NETCore.ILAsm -> /home/omajid/coreclr/bin/Product/Linux.arm64.Debug/.nuget//pkg/specs/Microsoft.NETCore.ILAsm.nuspec\r\n  Microsoft.NETCore.TestHost -> /home/omajid/coreclr/bin/Product/Linux.arm64.Debug/.nuget//pkg/specs/Microsoft.NETCore.TestHost.nuspec\r\n  Microsoft.NETCore.Jit -> /home/omajid/coreclr/bin/Product/Linux.arm64.Debug/.nuget//pkg/specs/runtime.linux-arm64.Microsoft.NETCore.Jit.nuspec\r\n  Microsoft.NETCore.Jit -> /home/omajid/coreclr/bin/Product/Linux.arm64.Debug/.nuget//pkg/specs/Microsoft.NETCore.Jit.nuspec\r\n  Microsoft.NETCore.Runtime.CoreCLR -> /home/omajid/coreclr/bin/Product/Linux.arm64.Debug/.nuget//pkg/specs/runtime.linux-arm64.Microsoft.NETCore.Runtime.CoreCLR.nuspec\r\n  Microsoft.NETCore.Runtime.CoreCLR -> /home/omajid/coreclr/bin/Product/Linux.arm64.Debug/.nuget//pkg/specs/Microsoft.NETCore.Runtime.CoreCLR.nuspec\r\n\r\nBuild succeeded.\r\n    0 Warning(s)\r\n    0 Error(s)\r\n\r\nTime Elapsed 00:02:00.11\r\nRepo successfully built.\r\nProduct binaries are available at /home/omajid/coreclr/bin/Product/Linux.arm64.Debug\r\n```\r\n\r\n</p>\r\n</details>\r\n","Url":"https://github.com/dotnet/coreclr/pull/26047","RelatedDescription":"Closed or merged PR \"Support managed build on linux/aarch64\" (#26047)"},{"Id":"478039515","IsPullRequest":true,"CreatedAt":"2019-08-07T19:31:07","Actor":"elinor-fung","Number":"26048","RawContent":null,"Title":"Fix passing unprocessed build args when building managed tests","State":"closed","Body":"Fix escaping of logging and unprocessed arguments when calling powershell scripts with `-Command`\r\n\r\nFixes #26039 ","Url":"https://github.com/dotnet/coreclr/pull/26048","RelatedDescription":"Closed or merged PR \"Fix passing unprocessed build args when building managed tests\" (#26048)"},{"Id":"477799398","IsPullRequest":false,"CreatedAt":"2019-08-07T19:31:07","Actor":"spacelg","Number":"26039","RawContent":null,"Title":"CoreCLR failed to build due to error MSB1008 with MSVC on windows","State":"closed","Body":"Environment: Windows Server 2016 + VS2017 CoreCLR master branch latest srouce code\r\n\r\nWe tried to build CoreCLR and it failed to build due to error MSB1008: Only one project can be specified.  It can be first reproduced on 929da85 revision. It should be a CoreCLR source issue. Could you look at this issue? Thanks a lot.\r\n\r\nRepro steps:\r\n1.git clone https://github.com/dotnet/coreclr D:\\CoreCLR\\src\r\n2.Open a clean x86 prompt and browse to D:\\CoreCLR\\src\r\n3.build x86 release -- /clp:ShowCommandLine\r\n\r\n[log_x86_build.log](https://github.com/dotnet/coreclr/files/3476195/log_x86_build.log)\r\n\r\nError info:\r\nTime Elapsed 00:01:10.28\r\nBUILDTEST: Starting the Managed Tests Build\r\nBUILDTEST: Building tests divided into 3 test groups\r\nRunning: msbuild D:\\CoreCLR\\src\\tests\\build.proj /flp:Verbosity=normal;LogFile=\"D:\\CoreCLR\\src\\bin\\Logs\\Tests_Managed_Windows_NT__x86__Release.log\";Append=false /flp1:WarningsOnly;LogFile=\"D:\\CoreCLR\\src\\bin\\Logs\\Tests_Managed_Windows_NT__x86__Release.wrn\";Append=false /flp2:ErrorsOnly;LogFile=\"D:\\CoreCLR\\src\\bin\\Logs\\Tests_Managed_Windows_NT__x86__Release.err\";Append=false /p:TargetsWindows=true /p:__BuildOS=Windows_NT /p:__BuildType=Release /p:__BuildArch=x86 /nologo /verbosity:minimal /clp:Summary /maxcpucount     /clp:ShowCommandLine\r\nMSBUILD : error MSB1008: Only one project can be specified.\r\nSwitch:  /clp:ShowCommandLine\r\n\r\nFor switch syntax, type \"MSBuild -help\"\r\nBuild failed.\r\nBUILDTEST: Error: managed test build failed. Refer to the build log files for details:\r\n    D:\\CoreCLR\\src\\bin\\Logs\\Tests_Managed_Windows_NT__x86__Release.log\r\n    D:\\CoreCLR\\src\\bin\\Logs\\Tests_Managed_Windows_NT__x86__Release.wrn\r\n    D:\\CoreCLR\\src\\bin\\Logs\\Tests_Managed_Windows_NT__x86__Release.err\r\n[command took 1076 seconds] \r\n","Url":"https://github.com/dotnet/coreclr/issues/26039","RelatedDescription":"Closed issue \"CoreCLR failed to build due to error MSB1008 with MSVC on windows\" (#26039)"},{"Id":"478073711","IsPullRequest":false,"CreatedAt":"2019-08-07T18:21:55","Actor":"VSadov","Number":"26053","RawContent":null,"Title":"Consider not restricting level of parallelism in a container when user did not ask for it.","State":"open","Body":"In a container scenario, depending on orchestration used, it is generally possible for a user to limit CPU quota and level of parallelism. \r\nOne does not imply another. That is why there are distinct knobs.\r\n\r\nExample: on a machine with 4 cores, it is conceivable to have 8 containers limited to 1/8 of total CPU time for fairness/over-committing, but  \r\n1)  each limited to using 1 CPU at a time. This would favor compute-intensive scenarios. \r\nOR\r\n2)  each having access to all 4 CPUs. This would favor latency sensitive, IO-performing, bursty workloads.\r\n\r\nIt looks like coreclr may see no distinction between these cases and treat them both as `#1`.\r\n\r\nThere is a common pattern where once the quota falls below user-set Core count, we reduce the available Core count to match the quota. \r\n\r\nUser could ask for reduced parallelism, but did not. \r\nEven if user might be doing this by accident, perhaps that should be respected? Otherwise, if there is a legit need for `#2`, it cannot be done.\r\n\r\n== \r\nhttps://github.com/dotnet/coreclr/blob/1d78ed88ff9078febdbb5c37173b313da5c023a3/src/utilcode/util.cpp#L1294\r\n\r\nhttps://github.com/dotnet/coreclr/blob/31acad70cae93caf0afe753775f14ebe80db31ed/src/classlibnative/bcltype/system.cpp#L358\r\n\r\nhttps://github.com/dotnet/coreclr/blob/31acad70cae93caf0afe753775f14ebe80db31ed/src/classlibnative/bcltype/system.cpp#L358\r\n\r\n\r\n \r\n\r\n","Url":"https://github.com/dotnet/coreclr/issues/26053","RelatedDescription":"Open issue \"Consider not restricting level of parallelism in a container when user did not ask for it.\" (#26053)"},{"Id":"478042395","IsPullRequest":false,"CreatedAt":"2019-08-07T17:04:02","Actor":"jakobbotsch","Number":"26049","RawContent":null,"Title":"Incorrect caching of VA sig cookies used in dynamic methods","State":"open","Body":"In debug the JIT uses VA sig cookies whenever it encounters a `calli` instruction. The signature for this cookie is allocated in reclaimable memory going through this code path:\r\nhttps://github.com/dotnet/coreclr/blob/7df151664237b539de91f1394e97f145460d05b6/src/vm/jitinterface.cpp#L1858-L1863\r\n\r\nhttps://github.com/dotnet/coreclr/blob/7df151664237b539de91f1394e97f145460d05b6/src/vm/dynamicmethod.cpp#L1335-L1337\r\n\r\nThis pointer is later used in a cache:\r\nhttps://github.com/dotnet/coreclr/blob/7df151664237b539de91f1394e97f145460d05b6/src/vm/ceeload.cpp#L13296-L13386\r\n\r\nWhen the dynamic method is collected, this entry is not removed from the cache and later a new dynamic method can get a wrong cookie for its `calli`. This causes my ABIStress tool (which uses `DynamicMethod` and `calli`) to fail when running in debug. To reproduce (on Windows):\r\n1. Checkout ABIStress (https://github.com/jakobbotsch/ABIStress) commit 6e168c1d4f\r\n2. Comment the following line: https://github.com/jakobbotsch/ABIStress/blob/6e168c1d4f14d82ddea3b46037c2099e3f0aa966/Program.cs#L175\r\n3. Run with `dotnet run -- --num-calls 1000`\r\n\r\ncc @AaronRobinsonMSFT @jkoritzinsky ","Url":"https://github.com/dotnet/coreclr/issues/26049","RelatedDescription":"Open issue \"Incorrect caching of VA sig cookies used in dynamic methods\" (#26049)"},{"Id":"478008993","IsPullRequest":true,"CreatedAt":"2019-08-07T15:49:19","Actor":"adamsitnik","Number":"26046","RawContent":null,"Title":"make DateTime.UtcNow 5% faster to minimize the leap second performance impact","State":"open","Body":"Today I've again profiled #25728 and was looking for some ways of lowering the regression.\r\n\r\nI started with reading the source code of `FileTimeToSystemTime` and `RtlpTimeToTimeFields` methods. The `RtlpTimeToTimeFields` takes care of leap second support, it knows all leap seconds and knows how to handle the positive and negative ones. Copying this logic from OS to .NET makes obviously no sense, it's too complex and too expensive to maintain.\r\n\r\nBy inlining some small methods that are called by `DateTime.UtcNow` I was able to make it 5% faster. It ain't much, but that's all I could do.\r\n\r\nBefore:\r\n\r\n![obraz](https://user-images.githubusercontent.com/6011991/62635135-6e841300-b937-11e9-8310-8026e1f9b629.png)\r\n\r\nAfter:\r\n\r\n![obraz](https://user-images.githubusercontent.com/6011991/62635236-9f644800-b937-11e9-8058-848fb9bdcc95.png)\r\n\r\n```cs\r\n[Benchmark]\r\npublic DateTimeOffset GetUtcNow() => DateTimeOffset.UtcNow;\r\n\r\n[Benchmark]\r\npublic DateTime GetUtcNow() => DateTime.UtcNow;\r\n```\r\n\r\n\r\n|                Type |    Method |           Toolchain |     Mean | Ratio |\r\n|-------------------- |---------- |-------------------- |---------:|------:|\r\n|       Perf_DateTime | GetUtcNow |  \\after\\CoreRun.exe | 67.25 ns |  0.95 |\r\n|       Perf_DateTime | GetUtcNow | \\before\\CoreRun.exe | 70.75 ns |  1.00 |\r\n|                     |           |                     |          |       |\r\n| Perf_DateTimeOffset | GetUtcNow |  \\after\\CoreRun.exe | 80.81 ns |  0.97 |\r\n| Perf_DateTimeOffset | GetUtcNow | \\before\\CoreRun.exe | 83.27 ns |  1.00 |\r\n\r\nAnd yes, all the `[MethodImpl(MethodImplOptions.AggressiveInlining)]` were really needed. Moving the throws to `ThrowHelper` was not enough to get those methods inlined.\r\n\r\n/cc @danmosemsft ","Url":"https://github.com/dotnet/coreclr/pull/26046","RelatedDescription":"Open PR \"make DateTime.UtcNow 5% faster to minimize the leap second performance impact\" (#26046)"},{"Id":"478001322","IsPullRequest":true,"CreatedAt":"2019-08-07T15:34:30","Actor":"EgorBo","Number":"26045","RawContent":null,"Title":"Move AppContext.CoreCLR.cs to shared, remove static ctor","State":"open","Body":"1) Move AppContext.CoreCLR.cs content to shared (to share with Mono)\r\n2) Remove static constructor (`s_dataStore` should not be accessed before Setup finishes anyway)\r\n\r\n/cc @jkotas ","Url":"https://github.com/dotnet/coreclr/pull/26045","RelatedDescription":"Open PR \"Move AppContext.CoreCLR.cs to shared, remove static ctor\" (#26045)"},{"Id":"477900733","IsPullRequest":true,"CreatedAt":"2019-08-07T14:28:30","Actor":"dotnet-maestro[bot]","Number":"26044","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d21e78e6-fa30-42ea-2807-08d690bc5860)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190807.1\r\n- **Date Produced**: 8/7/2019 9:50 AM\r\n- **Commit**: 4c30ef251c88b0c3343f54d4021dcd2ce7c4f860\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19407.1\r\n\r\n[marker]: <> (End:d21e78e6-fa30-42ea-2807-08d690bc5860)\r\n\r\n","Url":"https://github.com/dotnet/coreclr/pull/26044","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#26044)"},{"Id":"477899868","IsPullRequest":true,"CreatedAt":"2019-08-07T14:28:09","Actor":"dotnet-maestro[bot]","Number":"26043","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:16d3c6aa-851a-4668-94d4-08d690bc143a)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190807.1\r\n- **Date Produced**: 8/7/2019 9:33 AM\r\n- **Commit**: de38804d52f6b65f0f290b81383f01e6943a6d8f\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.Platforms** -> 5.0.0-alpha1.19407.1\r\n  - **Microsoft.Private.CoreFx.NETCoreApp** -> 5.0.0-alpha1.19407.1\r\n\r\n[marker]: <> (End:16d3c6aa-851a-4668-94d4-08d690bc143a)\r\n\r\n","Url":"https://github.com/dotnet/coreclr/pull/26043","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#26043)"},{"Id":"477896240","IsPullRequest":true,"CreatedAt":"2019-08-07T14:27:58","Actor":"dotnet-maestro[bot]","Number":"26041","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:1cc0f2b0-7abd-45f0-cee6-08d67668456c)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190806.7\r\n- **Date Produced**: 8/7/2019 12:08 AM\r\n- **Commit**: c155e609f88491128e1a66d09f413062f3344d4b\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19406.7\r\n  - **Microsoft.DotNet.Build.Tasks.Feed** -> 2.2.0-beta.19406.7\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19406.7\r\n  - **Microsoft.DotNet.Helix.Sdk** -> 2.0.0-beta.19406.7\r\n\r\n[marker]: <> (End:1cc0f2b0-7abd-45f0-cee6-08d67668456c)\r\n\r\n","Url":"https://github.com/dotnet/coreclr/pull/26041","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#26041)"},{"Id":"477895762","IsPullRequest":true,"CreatedAt":"2019-08-07T14:27:45","Actor":"dotnet-maestro[bot]","Number":"26040","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:1cc0f2b0-7abd-45f0-cee6-08d67668456c)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190806.7\r\n- **Date Produced**: 8/7/2019 12:08 AM\r\n- **Commit**: c155e609f88491128e1a66d09f413062f3344d4b\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19406.7\r\n  - **Microsoft.DotNet.Build.Tasks.Feed** -> 2.2.0-beta.19406.7\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19406.7\r\n  - **Microsoft.DotNet.Helix.Sdk** -> 2.0.0-beta.19406.7\r\n\r\n[marker]: <> (End:1cc0f2b0-7abd-45f0-cee6-08d67668456c)\r\n\r\n","Url":"https://github.com/dotnet/coreclr/pull/26040","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#26040)"},{"Id":"477898740","IsPullRequest":true,"CreatedAt":"2019-08-07T12:29:16","Actor":"dotnet-maestro[bot]","Number":"26042","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:16d3c6aa-851a-4668-94d4-08d690bc143a)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190807.1\r\n- **Date Produced**: 8/7/2019 9:33 AM\r\n- **Commit**: de38804d52f6b65f0f290b81383f01e6943a6d8f\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.Platforms** -> 5.0.0-alpha1.19407.1\r\n  - **Microsoft.Private.CoreFx.NETCoreApp** -> 5.0.0-alpha1.19407.1\r\n\r\n[marker]: <> (End:16d3c6aa-851a-4668-94d4-08d690bc143a)\r\n\r\n","Url":"https://github.com/dotnet/coreclr/pull/26042","RelatedDescription":"Open PR \"[master] Update dependencies from dotnet/corefx\" (#26042)"},{"Id":"477791394","IsPullRequest":false,"CreatedAt":"2019-08-07T08:48:19","Actor":"wrathofodin","Number":"26038","RawContent":null,"Title":"Missing script: makeSmOpcodeDef.pl","State":"open","Body":"https://github.com/dotnet/coreclr/blob/master/src/jit/smopcode.def\r\n\r\n> To generate this file, run \"makeSmOpcodeDef.pl > smopcode.def\"                        \r\n\r\nBut there's no such script in the repo.","Url":"https://github.com/dotnet/coreclr/issues/26038","RelatedDescription":"Open issue \"Missing script: makeSmOpcodeDef.pl\" (#26038)"},{"Id":"477724467","IsPullRequest":true,"CreatedAt":"2019-08-07T06:05:35","Actor":"VSadov","Number":"26037","RawContent":null,"Title":"[WIP] Thread injection experiments.","State":"open","Body":"","Url":"https://github.com/dotnet/coreclr/pull/26037","RelatedDescription":"Open PR \"[WIP] Thread injection experiments.\" (#26037)"},{"Id":"477662981","IsPullRequest":true,"CreatedAt":"2019-08-07T05:37:38","Actor":"sandreenko","Number":"26036","RawContent":null,"Title":"Delete TRANSLATE_PDB.","State":"closed","Body":"Does anybody know what it was for and if it is still used?\r\nI have not found any references in desktop sources.\r\nI see that `TRANSLATE_PDB` existed before 2001, but can't find when it was introduced and how it was used.\r\n\r\nWhen you enable it there are many compile errors.\r\n\r\n\r\nPTAL @dotnet/jit-contrib ","Url":"https://github.com/dotnet/coreclr/pull/26036","RelatedDescription":"Closed or merged PR \"Delete TRANSLATE_PDB.\" (#26036)"},{"Id":"477351654","IsPullRequest":true,"CreatedAt":"2019-08-06T16:53:52","Actor":"dotnet-maestro[bot]","Number":"26032","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:16d3c6aa-851a-4668-94d4-08d690bc143a)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190805.13\r\n- **Date Produced**: 8/6/2019 1:51 AM\r\n- **Commit**: c707378f2a8ae1da5ebc5d02bbe2e0a3fd26a6a0\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.Platforms** -> 5.0.0-alpha1.19405.13\r\n  - **Microsoft.Private.CoreFx.NETCoreApp** -> 5.0.0-alpha1.19405.13\r\n\r\n[marker]: <> (End:16d3c6aa-851a-4668-94d4-08d690bc143a)\r\n\r\n","Url":"https://github.com/dotnet/coreclr/pull/26032","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#26032)"},{"Id":"477353478","IsPullRequest":true,"CreatedAt":"2019-08-06T14:44:52","Actor":"dotnet-maestro[bot]","Number":"26033","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d21e78e6-fa30-42ea-2807-08d690bc5860)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190805.9\r\n- **Date Produced**: 8/5/2019 10:41 PM\r\n- **Commit**: 490c40397e4645cf0c47e528466b6d4a301cc04c\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19405.9\r\n\r\n[marker]: <> (End:d21e78e6-fa30-42ea-2807-08d690bc5860)\r\n\r\n","Url":"https://github.com/dotnet/coreclr/pull/26033","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#26033)"},{"Id":"477360966","IsPullRequest":false,"CreatedAt":"2019-08-06T12:49:11","Actor":"GSPP","Number":"26034","RawContent":null,"Title":"Cannot profile exception performance possibly due to stack walking issue","State":"open","Body":"It appears impossible to profile the CPU usage of exceptions. There seems to be some issue with stack walking.\r\n\r\n            while (true)\r\n            {\r\n                try\r\n                {\r\n                    var reader = new Utf8JsonReader(new byte[] { (byte)'{' });\r\n                    while (reader.Read()) ;\r\n                }\r\n                catch\r\n                {\r\n                }\r\n            }\r\n\r\nProcess Explorer shows a truncated stack with unusual 0x0000 entries:\r\n\r\n![image](https://user-images.githubusercontent.com/12032350/62540924-fba46a80-b858-11e9-9150-b541726554f0.png)\r\n\r\nPerfView loses track of where the time is spent:\r\n\r\n![image](https://user-images.githubusercontent.com/12032350/62540993-2262a100-b859-11e9-8dec-2f404646204f.png)\r\n\r\nNote, that 95% of the time is unaccounted for and it appears as if JSON code calls into `Main`.\r\n\r\nDotTrace shows a lot of time spent in \"Unsafe Stack Walking\" but in the wrong place:\r\n\r\n![image](https://user-images.githubusercontent.com/12032350/62540942-065eff80-b859-11e9-9b3d-d3c7f343aa4f.png)\r\n\r\nThere might be some quicks in how the tools are functioning. But it seems that the basic stack walking data available to profilers is broken.\r\n\r\nEnvironment:\r\n\r\n* In 3.0.100-preview7-012821\r\n* Windows 10\r\n* Latest Windows SDK for dbghelp.dll\r\n* Latest PerfView\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/coreclr/issues/26034","RelatedDescription":"Open issue \"Cannot profile exception performance possibly due to stack walking issue\" (#26034)"}],"ResultType":"GitHubIssue"},"CLI-Issues":{"Issues":[{"Id":"478195177","IsPullRequest":false,"CreatedAt":"2019-08-08T00:28:15","Actor":"ivanbasov","Number":"12168","RawContent":null,"Title":"Provide a map file generation to use for remove unused references functionality","State":"open","Body":"This task is a part of https://github.com/dotnet/roslyn/issues/36068.\r\n\r\nThe build team will generate a file with a map of assemblies, packages which can be checked for usage/non-usage. MS Build will generated the file. If other environments are used, they have to provide this file on their own.","Url":"https://github.com/dotnet/cli/issues/12168","RelatedDescription":"Open issue \"Provide a map file generation to use for remove unused references functionality\" (#12168)"},{"Id":"478153899","IsPullRequest":true,"CreatedAt":"2019-08-07T22:31:45","Actor":"dotnet-maestro[bot]","Number":"12167","RawContent":null,"Title":"[release/3.0.1xx] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:1a2c0403-dbb9-4253-1c2d-08d6fb3704ce)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190807.10\r\n- **Date Produced**: 8/7/2019 9:45 PM\r\n- **Commit**: 88e391bb71d5659c28fdb23434752cab6878cc06\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.0.0-preview9-19407-10\r\n  - **Microsoft.NET.HostModel** -> 3.0.0-preview9-19407-10\r\n  - **Microsoft.Extensions.DependencyModel** -> 3.0.0-preview9-19407-10\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 3.0.0-preview9-19407-10\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 3.0.0-preview9-19407-10\r\n\r\n[marker]: <> (End:1a2c0403-dbb9-4253-1c2d-08d6fb3704ce)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12167","RelatedDescription":"Closed or merged PR \"[release/3.0.1xx] Update dependencies from dotnet/core-setup\" (#12167)"},{"Id":"477325111","IsPullRequest":true,"CreatedAt":"2019-08-07T20:14:15","Actor":"Cosebdd","Number":"12149","RawContent":null,"Title":"Solution items are now considered when removing empty folders","State":"closed","Body":"Solution items are now considered when removing empty folders. A test added to check whether the logic is maintained. Fixes #10669\r\n\r\nhttps://github.com/dotnet/cli/issues/10669\r\n","Url":"https://github.com/dotnet/cli/pull/12149","RelatedDescription":"Closed or merged PR \"Solution items are now considered when removing empty folders\" (#12149)"},{"Id":"478101670","IsPullRequest":true,"CreatedAt":"2019-08-07T20:13:17","Actor":"epvanhouten","Number":"12166","RawContent":null,"Title":"Fixing broken link to developer guide","State":"closed","Body":"The developer guide is currently living in project-docs not general.\r\n","Url":"https://github.com/dotnet/cli/pull/12166","RelatedDescription":"Closed or merged PR \"Fixing broken link to developer guide\" (#12166)"},{"Id":"478076545","IsPullRequest":true,"CreatedAt":"2019-08-07T18:59:14","Actor":"dotnet-maestro[bot]","Number":"12165","RawContent":null,"Title":"[release/3.0.1xx] Update dependencies from aspnet/AspNetCore","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d54a5172-b4ce-4f86-d36b-08d6f038a15f)\r\n## From https://github.com/aspnet/AspNetCore\r\n- **Build**: 20190807.2\r\n- **Date Produced**: 8/7/2019 6:28 PM\r\n- **Commit**: 1b477405ca98a950bc2c3cb77af616ca883ced37\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.AspNetCore.DeveloperCertificates.XPlat** -> 3.0.0-preview9.19407.2\r\n\r\n[marker]: <> (End:d54a5172-b4ce-4f86-d36b-08d6f038a15f)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12165","RelatedDescription":"Closed or merged PR \"[release/3.0.1xx] Update dependencies from aspnet/AspNetCore\" (#12165)"},{"Id":"478060224","IsPullRequest":true,"CreatedAt":"2019-08-07T18:23:55","Actor":"dotnet-maestro[bot]","Number":"12164","RawContent":null,"Title":"[release/3.0.1xx] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:1a2c0403-dbb9-4253-1c2d-08d6fb3704ce)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190807.06\r\n- **Date Produced**: 8/7/2019 5:47 PM\r\n- **Commit**: f02340ac7635ce12a06bc519152d7b3c30dd54d9\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.0.0-preview9-19407-06\r\n  - **Microsoft.NET.HostModel** -> 3.0.0-preview9-19407-06\r\n  - **Microsoft.Extensions.DependencyModel** -> 3.0.0-preview9-19407-06\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 3.0.0-preview9-19407-06\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 3.0.0-preview9-19407-06\r\n\r\n[marker]: <> (End:1a2c0403-dbb9-4253-1c2d-08d6fb3704ce)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12164","RelatedDescription":"Closed or merged PR \"[release/3.0.1xx] Update dependencies from dotnet/core-setup\" (#12164)"},{"Id":"478029764","IsPullRequest":false,"CreatedAt":"2019-08-07T16:33:22","Actor":"dasMulli","Number":"12163","RawContent":null,"Title":"PublishSingleFile should have verb option for publish","State":"open","Body":"`dotnet publish` should accept a `--single-file` option to be translated to `-p:PublishSingleFile=True`.","Url":"https://github.com/dotnet/cli/issues/12163","RelatedDescription":"Open issue \"PublishSingleFile should have verb option for publish\" (#12163)"},{"Id":"477888175","IsPullRequest":true,"CreatedAt":"2019-08-07T12:57:14","Actor":"dotnet-maestro[bot]","Number":"12162","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:433865d5-f754-408e-06ed-08d645e2db8e)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190806.7\r\n- **Date Produced**: 8/7/2019 12:08 AM\r\n- **Commit**: c155e609f88491128e1a66d09f413062f3344d4b\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19406.7\r\n\r\n[marker]: <> (End:433865d5-f754-408e-06ed-08d645e2db8e)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12162","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#12162)"},{"Id":"477887941","IsPullRequest":true,"CreatedAt":"2019-08-07T12:52:10","Actor":"dotnet-maestro[bot]","Number":"12161","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:433865d5-f754-408e-06ed-08d645e2db8e)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190806.7\r\n- **Date Produced**: 8/7/2019 12:08 AM\r\n- **Commit**: c155e609f88491128e1a66d09f413062f3344d4b\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19406.7\r\n\r\n[marker]: <> (End:433865d5-f754-408e-06ed-08d645e2db8e)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12161","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#12161)"},{"Id":"477673528","IsPullRequest":false,"CreatedAt":"2019-08-07T02:23:15","Actor":"AungMy0","Number":"12160","RawContent":null,"Title":"INFO: [xUnit.Net-v2 (default)] - No test report file(s) were found with the pattern Jenkin Xunit Test generate Report","State":"open","Body":"## Steps to reproduce\r\nI tried to integrate Xunit Test plugin with jenkin and to generate my unit test report\r\n\r\n## Expected  behavior\r\n\r\n\r\n## Actual behavior\r\nJenkin said no test report files found.\r\n\r\nINFO: Processing xUnit.Net-v2 (default)\r\nINFO: [xUnit.Net-v2 (default)] - No test report file(s) were found with the pattern 'HelloJenkinTest\\TestResults\\*/xml' \r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/12160","RelatedDescription":"Open issue \"INFO: [xUnit.Net-v2 (default)] - No test report file(s) were found with the pattern Jenkin Xunit Test generate Report\" (#12160)"},{"Id":"477557157","IsPullRequest":true,"CreatedAt":"2019-08-06T22:00:31","Actor":"dotnet-maestro[bot]","Number":"12159","RawContent":null,"Title":"[release/3.0.1xx] Update dependencies from dotnet/sdk","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:fa87930c-8514-45a1-0d47-08d6910cd73b)\r\n## From https://github.com/dotnet/sdk\r\n- **Build**: 20190806.3\r\n- **Date Produced**: 8/6/2019 9:27 PM\r\n- **Commit**: 11e0233a76795f37e8a938ba2c738c2b379d0abb\r\n- **Branch**: refs/heads/release/3.0.1xx\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk** -> 3.0.100-preview9.19406.3\r\n\r\n[marker]: <> (End:fa87930c-8514-45a1-0d47-08d6910cd73b)\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12159","RelatedDescription":"Closed or merged PR \"[release/3.0.1xx] Update dependencies from dotnet/sdk\" (#12159)"},{"Id":"477431638","IsPullRequest":false,"CreatedAt":"2019-08-06T21:25:23","Actor":"VictorioBerra","Number":"12155","RawContent":null,"Title":"dotnet nuget push source does not recognize PSDrive.","State":"closed","Body":"## Steps to reproduce\r\n- Mount a PSDrive without using `-Persist`\r\n- Try and push a nuget package to it.\r\n\r\n## Expected  behavior\r\nIt should see it as a file source and just work (tm)\r\n\r\n## Actual behavior\r\nI get an error about not providing an API Key as if it were a MyGet server or something.\r\n\r\nIf I use `-Persist`, the code works just fine.\r\n\r\n```powershell\r\n$null = new-psdrive Name \"X\" -PSProvider FileSystem -root $DeploymentTarget -Credential $cred -ErrorAction Stop;\r\ndotnet nuget push something.nupkg -s \"X:\\\"; # ERROR!!! MISSING API KEY\r\n```\r\n\r\nSimply adding `-Persist` will map the share top a drive letter and things work again.\r\n\r\nIs there some way around this? I do not want to use `-Persist` on my build server.\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/12155","RelatedDescription":"Closed issue \"dotnet nuget push source does not recognize PSDrive.\" (#12155)"},{"Id":"477556852","IsPullRequest":true,"CreatedAt":"2019-08-06T19:33:06","Actor":"dotnet-maestro[bot]","Number":"12158","RawContent":null,"Title":"[master] Update dependencies from aspnet/AspNetCore","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2ccdb5a8-3feb-4e97-d36a-08d6f038a15f)\r\n## From https://github.com/aspnet/AspNetCore\r\n- **Build**: 20190806.3\r\n- **Date Produced**: 8/6/2019 7:32 PM\r\n- **Commit**: e7398ca25d53432eb96dc7d4e0d56be501b771a4\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.AspNetCore.DeveloperCertificates.XPlat** -> 5.0.0-alpha1.19406.3\r\n\r\n[marker]: <> (End:2ccdb5a8-3feb-4e97-d36a-08d6f038a15f)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12158","RelatedDescription":"Open PR \"[master] Update dependencies from aspnet/AspNetCore\" (#12158)"},{"Id":"477518845","IsPullRequest":false,"CreatedAt":"2019-08-06T18:02:46","Actor":"eiriktsarpalis","Number":"12157","RawContent":null,"Title":"Disabling first run welcome message?","State":"open","Body":"Is there a good way to completely disable the first time user notice when installing a new version of the SDK? Looking at the code, it seems that it can only be done by creating the appropriate [`dotnetFirstTimeUseSentinel`](https://github.com/dotnet/cli/blob/143a75dcacfbcc3665d9bbfa54d14217ce3e0ab3/src/Microsoft.DotNet.Configurer/FirstTimeUseNoticeSentinel.cs#L13) file.\r\n\r\nThere should be an easier way to disable this, like setting an environment variable maybe. \r\nI work a lot with nightly builds of the sdk across multiple machines, so the message is a minor source of annoyance for me.","Url":"https://github.com/dotnet/cli/issues/12157","RelatedDescription":"Open issue \"Disabling first run welcome message?\" (#12157)"},{"Id":"477493329","IsPullRequest":true,"CreatedAt":"2019-08-06T17:33:35","Actor":"dotnet-maestro[bot]","Number":"12156","RawContent":null,"Title":"[release/3.0.100-preview8] Update dependencies from dotnet/sdk","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:6e10c9b4-9a39-4546-565f-08d7114adc5e)\r\n## From https://github.com/dotnet/sdk\r\n- **Build**: 20190806.1\r\n- **Date Produced**: 8/6/2019 5:01 PM\r\n- **Commit**: 7c9956bc0e4c5fe5390ce82a9806dbf8af9d050e\r\n- **Branch**: refs/heads/release/3.0.100-preview8\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk** -> 3.0.100-preview8.19406.1\r\n\r\n[marker]: <> (End:6e10c9b4-9a39-4546-565f-08d7114adc5e)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12156","RelatedDescription":"Closed or merged PR \"[release/3.0.100-preview8] Update dependencies from dotnet/sdk\" (#12156)"},{"Id":"477163721","IsPullRequest":true,"CreatedAt":"2019-08-06T14:39:31","Actor":"dotnet-maestro[bot]","Number":"12148","RawContent":null,"Title":"[release/3.0.100-preview8] Update dependencies from aspnet/AspNetCore","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:3cd0c0b2-118b-4b45-565e-08d7114adc5e)\r\n## From https://github.com/aspnet/AspNetCore\r\n- **Build**: 20190805.7\r\n- **Date Produced**: 8/6/2019 4:30 AM\r\n- **Commit**: 4a42afc5aea63750638e118560d43db04bd9ccc2\r\n- **Branch**: refs/heads/release/3.0-preview8\r\n- **Updates**:\r\n  - **Microsoft.AspNetCore.DeveloperCertificates.XPlat** -> 3.0.0-preview8.19405.7\r\n\r\n[marker]: <> (End:3cd0c0b2-118b-4b45-565e-08d7114adc5e)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12148","RelatedDescription":"Closed or merged PR \"[release/3.0.100-preview8] Update dependencies from aspnet/AspNetCore\" (#12148)"},{"Id":"477416823","IsPullRequest":false,"CreatedAt":"2019-08-06T14:31:35","Actor":"MisinformedDNA","Number":"12154","RawContent":null,"Title":"Feature request: Add ability to build solution filter","State":"open","Body":"In VS2019 we are able to create solution filters of file type *.slnf. It would be great if we could build these file types at the command line (i.e. `dotnet build [solution].slnf`).\r\n\r\nI can see this as beneficial in CI workflows where only the selected projects need to be built. I could just use SLN files, but then I would ditch SLNF files as I don't want to maintain two solutions.\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.1.700\r\n Commit:    c2ef055a0f\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.700\\\r\n\r\nHost (useful for support):\r\n  Version: 2.1.11\r\n  Commit:  d6a5616240\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/12154","RelatedDescription":"Open issue \"Feature request: Add ability to build solution filter\" (#12154)"},{"Id":"477345057","IsPullRequest":true,"CreatedAt":"2019-08-06T13:01:14","Actor":"dotnet-maestro[bot]","Number":"12153","RawContent":null,"Title":"[master] Update dependencies from dotnet/templating","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:0be14b38-c39d-4bd1-cee3-08d67668456c)\r\n## From https://github.com/dotnet/templating\r\n- **Build**: 20190805.1\r\n- **Date Produced**: 8/5/2019 12:55 PM\r\n- **Commit**: 39c2dd5fde6368747fe127b9dde822b3b6afce08\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.TemplateEngine.Cli** -> 5.0.0-alpha1.19405.1\r\n\r\n[marker]: <> (End:0be14b38-c39d-4bd1-cee3-08d67668456c)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12153","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/templating\" (#12153)"},{"Id":"477345003","IsPullRequest":true,"CreatedAt":"2019-08-06T12:56:32","Actor":"dotnet-maestro[bot]","Number":"12152","RawContent":null,"Title":"[master] Update dependencies from dotnet/templating","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:0be14b38-c39d-4bd1-cee3-08d67668456c)\r\n## From https://github.com/dotnet/templating\r\n- **Build**: 20190805.1\r\n- **Date Produced**: 8/5/2019 12:55 PM\r\n- **Commit**: 39c2dd5fde6368747fe127b9dde822b3b6afce08\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.TemplateEngine.Cli** -> 5.0.0-alpha1.19405.1\r\n\r\n[marker]: <> (End:0be14b38-c39d-4bd1-cee3-08d67668456c)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12152","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/templating\" (#12152)"},{"Id":"477341820","IsPullRequest":true,"CreatedAt":"2019-08-06T12:49:17","Actor":"dotnet-maestro[bot]","Number":"12151","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:433865d5-f754-408e-06ed-08d645e2db8e)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190805.9\r\n- **Date Produced**: 8/6/2019 12:26 AM\r\n- **Commit**: 44ccf0f527de559b07f9ad955a47ec97f03f2146\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19405.9\r\n\r\n[marker]: <> (End:433865d5-f754-408e-06ed-08d645e2db8e)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12151","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#12151)"},{"Id":"477341499","IsPullRequest":true,"CreatedAt":"2019-08-06T12:48:35","Actor":"dotnet-maestro[bot]","Number":"12150","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:433865d5-f754-408e-06ed-08d645e2db8e)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190805.9\r\n- **Date Produced**: 8/6/2019 12:26 AM\r\n- **Commit**: 44ccf0f527de559b07f9ad955a47ec97f03f2146\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19405.9\r\n\r\n[marker]: <> (End:433865d5-f754-408e-06ed-08d645e2db8e)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12150","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#12150)"},{"Id":"477120500","IsPullRequest":true,"CreatedAt":"2019-08-06T01:48:52","Actor":"dotnet-maestro[bot]","Number":"12147","RawContent":null,"Title":"[release/3.0.1xx] Update dependencies from dotnet/sdk","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:fa87930c-8514-45a1-0d47-08d6910cd73b)\r\n## From https://github.com/dotnet/sdk\r\n- **Build**: 20190805.1\r\n- **Date Produced**: 8/6/2019 1:13 AM\r\n- **Commit**: 4f452f6da9d6aeb389d79432febb160b5aab4eed\r\n- **Branch**: refs/heads/release/3.0.1xx\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk** -> 3.0.100-preview9.19405.1\r\n\r\n[marker]: <> (End:fa87930c-8514-45a1-0d47-08d6910cd73b)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12147","RelatedDescription":"Closed or merged PR \"[release/3.0.1xx] Update dependencies from dotnet/sdk\" (#12147)"},{"Id":"477091432","IsPullRequest":true,"CreatedAt":"2019-08-05T23:27:37","Actor":"dotnet-maestro[bot]","Number":"12146","RawContent":null,"Title":"[release/3.0.1xx] Update dependencies from aspnet/AspNetCore","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d54a5172-b4ce-4f86-d36b-08d6f038a15f)\r\n## From https://github.com/aspnet/AspNetCore\r\n- **Build**: 20190805.4\r\n- **Date Produced**: 8/5/2019 10:51 PM\r\n- **Commit**: 397f924e8da45975d38f5d2c2a1e097399365eba\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.AspNetCore.DeveloperCertificates.XPlat** -> 3.0.0-preview9.19405.4\r\n\r\n[marker]: <> (End:d54a5172-b4ce-4f86-d36b-08d6f038a15f)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12146","RelatedDescription":"Closed or merged PR \"[release/3.0.1xx] Update dependencies from aspnet/AspNetCore\" (#12146)"},{"Id":"477061010","IsPullRequest":true,"CreatedAt":"2019-08-05T22:27:43","Actor":"dotnet-maestro[bot]","Number":"12145","RawContent":null,"Title":"[release/3.0.100-preview8] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:1323e428-028e-4f02-070d-08d7114b0b3e)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190805.07\r\n- **Date Produced**: 8/5/2019 9:13 PM\r\n- **Commit**: d01b2fb7bc6bd4911e157fbd51353059a3ba1a6c\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.0.0-preview8-28405-07\r\n  - **Microsoft.NET.HostModel** -> 3.0.0-preview8-28405-07\r\n  - **Microsoft.Extensions.DependencyModel** -> 3.0.0-preview8-28405-07\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 3.0.0-preview8-28405-07\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 3.0.0-preview8-28405-07\r\n\r\n[marker]: <> (End:1323e428-028e-4f02-070d-08d7114b0b3e)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12145","RelatedDescription":"Closed or merged PR \"[release/3.0.100-preview8] Update dependencies from dotnet/core-setup\" (#12145)"},{"Id":"476825991","IsPullRequest":true,"CreatedAt":"2019-08-05T16:29:03","Actor":"dotnet-maestro[bot]","Number":"12143","RawContent":null,"Title":"[master] Update dependencies from dotnet/templating","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:0be14b38-c39d-4bd1-cee3-08d67668456c)\r\n## From https://github.com/dotnet/templating\r\n- **Build**: 20190804.1\r\n- **Date Produced**: 8/4/2019 12:51 PM\r\n- **Commit**: 3717c89af67bc055ad07599cddf08330a7878f32\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.TemplateEngine.Cli** -> 5.0.0-alpha1.19404.1\r\n\r\n[marker]: <> (End:0be14b38-c39d-4bd1-cee3-08d67668456c)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12143","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/templating\" (#12143)"},{"Id":"476822509","IsPullRequest":true,"CreatedAt":"2019-08-05T16:27:50","Actor":"dotnet-maestro[bot]","Number":"12140","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:433865d5-f754-408e-06ed-08d645e2db8e)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190804.1\r\n- **Date Produced**: 8/4/2019 12:42 PM\r\n- **Commit**: b1c2f33f0cef32d1df6e7f388017fd6761d3fcad\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19404.1\r\n\r\n[marker]: <> (End:433865d5-f754-408e-06ed-08d645e2db8e)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12140","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#12140)"},{"Id":"476928807","IsPullRequest":true,"CreatedAt":"2019-08-05T16:08:22","Actor":"dotnet-maestro[bot]","Number":"12144","RawContent":null,"Title":"[release/3.0.1xx] Update dependencies from aspnet/AspNetCore","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d54a5172-b4ce-4f86-d36b-08d6f038a15f)\r\n## From https://github.com/aspnet/AspNetCore\r\n- **Build**: 20190805.1\r\n- **Date Produced**: 8/5/2019 3:37 PM\r\n- **Commit**: 2ff6a5c0f8b2905e42d8bb6ff70e53d3f056f6ef\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.AspNetCore.DeveloperCertificates.XPlat** -> 3.0.0-preview9.19405.1\r\n\r\n[marker]: <> (End:d54a5172-b4ce-4f86-d36b-08d6f038a15f)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12144","RelatedDescription":"Closed or merged PR \"[release/3.0.1xx] Update dependencies from aspnet/AspNetCore\" (#12144)"},{"Id":"476825838","IsPullRequest":true,"CreatedAt":"2019-08-05T15:58:17","Actor":"dotnet-maestro[bot]","Number":"12142","RawContent":null,"Title":"[master] Update dependencies from dotnet/templating","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:0be14b38-c39d-4bd1-cee3-08d67668456c)\r\n## From https://github.com/dotnet/templating\r\n- **Build**: 20190804.1\r\n- **Date Produced**: 8/4/2019 12:51 PM\r\n- **Commit**: 3717c89af67bc055ad07599cddf08330a7878f32\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.TemplateEngine.Cli** -> 5.0.0-alpha1.19404.1\r\n\r\n[marker]: <> (End:0be14b38-c39d-4bd1-cee3-08d67668456c)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12142","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/templating\" (#12142)"},{"Id":"476822815","IsPullRequest":true,"CreatedAt":"2019-08-05T12:43:54","Actor":"dotnet-maestro[bot]","Number":"12141","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:433865d5-f754-408e-06ed-08d645e2db8e)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190804.1\r\n- **Date Produced**: 8/4/2019 12:42 PM\r\n- **Commit**: b1c2f33f0cef32d1df6e7f388017fd6761d3fcad\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19404.1\r\n\r\n[marker]: <> (End:433865d5-f754-408e-06ed-08d645e2db8e)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12141","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#12141)"},{"Id":"476546570","IsPullRequest":true,"CreatedAt":"2019-08-04T12:54:11","Actor":"dotnet-maestro[bot]","Number":"12138","RawContent":null,"Title":"[master] Update dependencies from dotnet/templating","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:0be14b38-c39d-4bd1-cee3-08d67668456c)\r\n## From https://github.com/dotnet/templating\r\n- **Build**: 20190803.1\r\n- **Date Produced**: 8/3/2019 12:49 PM\r\n- **Commit**: ee824bdd8d041c4eb731f000f7dadcf458274f69\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.TemplateEngine.Cli** -> 5.0.0-alpha1.19403.1\r\n\r\n[marker]: <> (End:0be14b38-c39d-4bd1-cee3-08d67668456c)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12138","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/templating\" (#12138)"}],"ResultType":"GitHubIssue"},"Standard-Issues":{"Issues":[{"Id":"478243724","IsPullRequest":false,"CreatedAt":"2019-08-08T04:25:55","Actor":"chrisaut","Number":"1408","RawContent":null,"Title":"Include IHttpClientFactory?","State":"open","Body":"Microsoft [recommends](https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests) using IHttpClientFactory instead of either create a new HttpClient for each use ([potential socket starvation](https://aspnetmonsters.com/2016/08/2016-08-27-httpclientwrong/) even if disposing correctly), or reusing same client yourself ([DNS updat issues](https://github.com/dotnet/corefx/issues/11224)).\r\n\r\nThis is available [since .net core 2.1](https://apisof.net/catalog/System.Net.Http.IHttpClientFactory) but not in any net standard version.\r\n\r\nCould/should this be included in 2.1? Some libraries may want to take it on as a constructor arg","Url":"https://github.com/dotnet/standard/issues/1408","RelatedDescription":"Open issue \"Include IHttpClientFactory?\" (#1408)"},{"Id":"477917127","IsPullRequest":true,"CreatedAt":"2019-08-07T13:20:32","Actor":"dotnet-maestro[bot]","Number":"1407","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190807.1\r\n- **Date Produced**: 8/7/2019 9:33 AM\r\n- **Commit**: de38804d52f6b65f0f290b81383f01e6943a6d8f\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19407.1\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19407.1\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19407.1\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1407","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1407)"},{"Id":"477915499","IsPullRequest":true,"CreatedAt":"2019-08-07T13:12:22","Actor":"dotnet-maestro[bot]","Number":"1406","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190807.1\r\n- **Date Produced**: 8/7/2019 9:33 AM\r\n- **Commit**: de38804d52f6b65f0f290b81383f01e6943a6d8f\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19407.1\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19407.1\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19407.1\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1406","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1406)"},{"Id":"477887123","IsPullRequest":true,"CreatedAt":"2019-08-07T12:15:02","Actor":"dotnet-maestro[bot]","Number":"1405","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190806.7\r\n- **Date Produced**: 8/7/2019 12:08 AM\r\n- **Commit**: c155e609f88491128e1a66d09f413062f3344d4b\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19406.7\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19406.7\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19406.7\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19406.7\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19406.7\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19406.7\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1405","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1405)"},{"Id":"477886937","IsPullRequest":true,"CreatedAt":"2019-08-07T12:14:39","Actor":"dotnet-maestro[bot]","Number":"1404","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190806.7\r\n- **Date Produced**: 8/7/2019 12:08 AM\r\n- **Commit**: c155e609f88491128e1a66d09f413062f3344d4b\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19406.7\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19406.7\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19406.7\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19406.7\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19406.7\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19406.7\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1404","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1404)"},{"Id":"477522586","IsPullRequest":false,"CreatedAt":"2019-08-06T18:11:49","Actor":"dagood","Number":"1403","RawContent":null,"Title":"What version of .NET Standard should be bundled in 5.0 SDK builds?","State":"open","Body":"Currently, we bundle netstandard 2.1 in SDK 3.0. I see dotnet/standard `master` is producing netstandard 2.2.\r\n\r\nShould Core-Setup bundle up 2.2 and have that used in the SDK (https://github.com/dotnet/core-setup/issues/7567)? Or should the SDK continue to bundle netstandard 2.1? Should more than one version be bundled?\r\n\r\nThe question of whether we need more .NET Standard releases in a 5.0 world seems very relevant. (I don't know any newer info than https://devblogs.microsoft.com/dotnet/introducing-net-5/.)\r\n\r\n@wtgodbe @nguerrera ","Url":"https://github.com/dotnet/standard/issues/1403","RelatedDescription":"Open issue \"What version of .NET Standard should be bundled in 5.0 SDK builds?\" (#1403)"},{"Id":"477364336","IsPullRequest":true,"CreatedAt":"2019-08-06T17:48:46","Actor":"dotnet-maestro[bot]","Number":"1401","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190805.13\r\n- **Date Produced**: 8/6/2019 1:51 AM\r\n- **Commit**: c707378f2a8ae1da5ebc5d02bbe2e0a3fd26a6a0\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19405.13\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19405.13\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19405.13\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1401","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1401)"},{"Id":"477364832","IsPullRequest":true,"CreatedAt":"2019-08-06T13:07:00","Actor":"dotnet-maestro[bot]","Number":"1402","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190805.13\r\n- **Date Produced**: 8/6/2019 1:51 AM\r\n- **Commit**: c707378f2a8ae1da5ebc5d02bbe2e0a3fd26a6a0\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19405.13\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19405.13\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19405.13\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1402","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1402)"},{"Id":"477340949","IsPullRequest":true,"CreatedAt":"2019-08-06T12:15:23","Actor":"dotnet-maestro[bot]","Number":"1400","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190805.9\r\n- **Date Produced**: 8/6/2019 12:26 AM\r\n- **Commit**: 44ccf0f527de559b07f9ad955a47ec97f03f2146\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19405.9\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19405.9\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19405.9\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19405.9\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19405.9\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19405.9\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1400","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1400)"},{"Id":"477340687","IsPullRequest":true,"CreatedAt":"2019-08-06T12:14:45","Actor":"dotnet-maestro[bot]","Number":"1399","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190805.9\r\n- **Date Produced**: 8/6/2019 12:26 AM\r\n- **Commit**: 44ccf0f527de559b07f9ad955a47ec97f03f2146\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19405.9\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19405.9\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19405.9\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19405.9\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19405.9\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19405.9\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1399","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1399)"},{"Id":"476843973","IsPullRequest":true,"CreatedAt":"2019-08-05T13:05:59","Actor":"dotnet-maestro[bot]","Number":"1398","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190804.2\r\n- **Date Produced**: 8/4/2019 3:02 PM\r\n- **Commit**: 8df22b4642c83e646b4472860442ab1fb11fb3cd\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19404.2\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19404.2\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19404.2\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1398","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1398)"},{"Id":"476843431","IsPullRequest":true,"CreatedAt":"2019-08-05T13:04:49","Actor":"dotnet-maestro[bot]","Number":"1397","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190804.2\r\n- **Date Produced**: 8/4/2019 3:02 PM\r\n- **Commit**: 8df22b4642c83e646b4472860442ab1fb11fb3cd\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19404.2\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19404.2\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19404.2\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1397","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1397)"},{"Id":"476821836","IsPullRequest":true,"CreatedAt":"2019-08-05T12:15:23","Actor":"dotnet-maestro[bot]","Number":"1396","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190804.1\r\n- **Date Produced**: 8/4/2019 12:42 PM\r\n- **Commit**: b1c2f33f0cef32d1df6e7f388017fd6761d3fcad\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19404.1\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19404.1\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19404.1\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19404.1\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19404.1\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19404.1\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1396","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1396)"},{"Id":"476821605","IsPullRequest":true,"CreatedAt":"2019-08-05T12:14:47","Actor":"dotnet-maestro[bot]","Number":"1395","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190804.1\r\n- **Date Produced**: 8/4/2019 12:42 PM\r\n- **Commit**: b1c2f33f0cef32d1df6e7f388017fd6761d3fcad\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19404.1\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19404.1\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19404.1\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19404.1\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19404.1\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19404.1\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1395","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1395)"},{"Id":"476550793","IsPullRequest":true,"CreatedAt":"2019-08-04T13:07:29","Actor":"dotnet-maestro[bot]","Number":"1394","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190804.1\r\n- **Date Produced**: 8/4/2019 9:19 AM\r\n- **Commit**: 4408bcb04b4e3a6174d9ec9660fadc71185af712\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19404.1\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19404.1\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19404.1\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1394","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1394)"},{"Id":"476550563","IsPullRequest":true,"CreatedAt":"2019-08-04T13:05:09","Actor":"dotnet-maestro[bot]","Number":"1393","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190804.1\r\n- **Date Produced**: 8/4/2019 9:19 AM\r\n- **Commit**: 4408bcb04b4e3a6174d9ec9660fadc71185af712\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19404.1\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19404.1\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19404.1\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1393","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1393)"},{"Id":"476545674","IsPullRequest":true,"CreatedAt":"2019-08-04T12:15:06","Actor":"dotnet-maestro[bot]","Number":"1392","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190803.1\r\n- **Date Produced**: 8/3/2019 1:03 PM\r\n- **Commit**: 3b75ef38a33579dcd32f2912ee69e886356b0f18\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19403.1\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19403.1\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19403.1\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19403.1\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19403.1\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19403.1\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1392","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1392)"},{"Id":"476545661","IsPullRequest":true,"CreatedAt":"2019-08-04T12:14:53","Actor":"dotnet-maestro[bot]","Number":"1391","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190803.1\r\n- **Date Produced**: 8/3/2019 1:03 PM\r\n- **Commit**: 3b75ef38a33579dcd32f2912ee69e886356b0f18\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19403.1\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19403.1\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19403.1\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19403.1\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19403.1\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19403.1\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1391","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1391)"},{"Id":"476449316","IsPullRequest":true,"CreatedAt":"2019-08-03T13:04:37","Actor":"dotnet-maestro[bot]","Number":"1390","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190802.28\r\n- **Date Produced**: 8/3/2019 2:44 AM\r\n- **Commit**: 8a958aa3d1cf2e91f6e9cf839e023ad4f8d489f2\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19402.28\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19402.28\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19402.28\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1390","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1390)"},{"Id":"476448944","IsPullRequest":true,"CreatedAt":"2019-08-03T13:00:12","Actor":"dotnet-maestro[bot]","Number":"1389","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190802.28\r\n- **Date Produced**: 8/3/2019 2:44 AM\r\n- **Commit**: 8a958aa3d1cf2e91f6e9cf839e023ad4f8d489f2\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19402.28\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19402.28\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19402.28\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1389","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1389)"},{"Id":"476445367","IsPullRequest":true,"CreatedAt":"2019-08-03T12:14:47","Actor":"dotnet-maestro[bot]","Number":"1388","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190802.16\r\n- **Date Produced**: 8/3/2019 12:35 AM\r\n- **Commit**: d8457f6ba527aef165ff6fb0aded44bf8123ce83\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19402.16\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19402.16\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19402.16\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19402.16\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19402.16\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19402.16\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1388","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1388)"},{"Id":"476445350","IsPullRequest":true,"CreatedAt":"2019-08-03T12:14:32","Actor":"dotnet-maestro[bot]","Number":"1387","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190802.16\r\n- **Date Produced**: 8/3/2019 12:35 AM\r\n- **Commit**: d8457f6ba527aef165ff6fb0aded44bf8123ce83\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19402.16\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19402.16\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19402.16\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19402.16\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19402.16\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19402.16\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1387","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1387)"},{"Id":"476164729","IsPullRequest":true,"CreatedAt":"2019-08-02T13:02:57","Actor":"dotnet-maestro[bot]","Number":"1386","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190801.3\r\n- **Date Produced**: 8/2/2019 12:21 AM\r\n- **Commit**: c4e7347021eabaac1bdc0b0e13dc46f8c1e37419\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19401.3\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19401.3\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19401.3\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1386","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1386)"},{"Id":"476146337","IsPullRequest":true,"CreatedAt":"2019-08-02T12:14:50","Actor":"dotnet-maestro[bot]","Number":"1385","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190801.23\r\n- **Date Produced**: 8/2/2019 6:58 AM\r\n- **Commit**: 941d6497356e00ea6b2bc35a22a67f4ecf988fd6\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19401.23\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19401.23\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19401.23\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19401.23\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19401.23\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19401.23\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1385","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1385)"},{"Id":"475661515","IsPullRequest":true,"CreatedAt":"2019-08-01T12:54:03","Actor":"dotnet-maestro[bot]","Number":"1384","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190731.8\r\n- **Date Produced**: 8/1/2019 2:10 AM\r\n- **Commit**: a12c557a72988070b8624cc7ecc46899629895c4\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19381.8\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19381.8\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19381.8\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1384","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1384)"},{"Id":"475644095","IsPullRequest":true,"CreatedAt":"2019-08-01T12:14:44","Actor":"dotnet-maestro[bot]","Number":"1383","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190731.19\r\n- **Date Produced**: 8/1/2019 12:27 AM\r\n- **Commit**: 48787606d809963cc800151cbfbefe0a74ae74b4\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19381.19\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19381.19\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19381.19\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19381.19\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19381.19\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19381.19\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1383","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1383)"},{"Id":"475352106","IsPullRequest":false,"CreatedAt":"2019-07-31T20:52:29","Actor":"mwpowellhtx","Number":"1382","RawContent":null,"Title":"Reconsider Debug.Listeners API exposure","State":"open","Body":"I am staring at a use case right now that I need to listen for ``System.Diagnostics.Debug.WriteLine`` messages and a listener would be just what I need to get the job done. Therefore, I strongly suggest [reconsidering Debug.Listeners exposure](/dotnet/standard/issues/84). Absent that we must look at adding unnecessary layers of overhead to our ``Debug.WriteLine`` listening efforts when a listener would fit the bill nicely.","Url":"https://github.com/dotnet/standard/issues/1382","RelatedDescription":"Open issue \"Reconsider Debug.Listeners API exposure\" (#1382)"},{"Id":"475124222","IsPullRequest":true,"CreatedAt":"2019-07-31T12:57:06","Actor":"dotnet-maestro[bot]","Number":"1381","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190730.6\r\n- **Date Produced**: 7/30/2019 8:44 PM\r\n- **Commit**: 5b6a74d8455aab11f64377f3200ace1df71110ea\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19380.6\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19380.6\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19380.6\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1381","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1381)"},{"Id":"474306086","IsPullRequest":true,"CreatedAt":"2019-07-30T16:43:12","Actor":"JohnTortugo","Number":"1379","RawContent":null,"Title":"Patch reference to _PublishUsingPipelines","State":"closed","Body":"For context see description of this Arcade PR: https://github.com/dotnet/arcade/pull/3482\r\n\r\n/cc @riarenas @jcagme ","Url":"https://github.com/dotnet/standard/pull/1379","RelatedDescription":"Closed or merged PR \"Patch reference to _PublishUsingPipelines\" (#1379)"},{"Id":"474564366","IsPullRequest":true,"CreatedAt":"2019-07-30T12:56:42","Actor":"dotnet-maestro[bot]","Number":"1380","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190729.12\r\n- **Date Produced**: 7/30/2019 5:11 AM\r\n- **Commit**: b2ff0db61cc9348775d73a8934ad80218ded8bc0\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19379.12\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19379.12\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19379.12\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1380","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1380)"}],"ResultType":"GitHubIssue"},"CoreFx-Issues":{"Issues":[{"Id":"478182352","IsPullRequest":true,"CreatedAt":"2019-08-08T05:10:47","Actor":"krwq","Number":"40128","RawContent":null,"Title":"[release/3.0] Disable System.Net.Http.FunctionalTests SetDelegate_ConnectionSucceeds on OSX","State":"closed","Body":"Per discussion in #39989 disabling the test on MacOS Catalina.\r\nPorts: https://github.com/dotnet/corefx/pull/40119\r\n\r\n#### Description\r\n\r\nDisable System.Net.Http.FunctionalTests SetDelegate_ConnectionSucceeds on OSX Catalina\r\n\r\n#### Customer Impact\r\n\r\nNone - this is a test only change (reducing noise on the official test runs)\r\n\r\n#### Regression?\r\n\r\nNo\r\n\r\n#### Risk\r\n\r\nNone - test only change\r\n","Url":"https://github.com/dotnet/corefx/pull/40128","RelatedDescription":"Closed or merged PR \"[release/3.0] Disable System.Net.Http.FunctionalTests SetDelegate_ConnectionSucceeds on OSX\" (#40128)"},{"Id":"478248763","IsPullRequest":true,"CreatedAt":"2019-08-08T04:48:54","Actor":"Dotnet-GitSync-Bot","Number":"40132","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"open","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub","Url":"https://github.com/dotnet/corefx/pull/40132","RelatedDescription":"Open PR \"Mirror changes from dotnet/coreclr\" (#40132)"},{"Id":"478241585","IsPullRequest":true,"CreatedAt":"2019-08-08T04:16:10","Actor":"Dotnet-GitSync-Bot","Number":"40131","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"open","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @sywhang","Url":"https://github.com/dotnet/corefx/pull/40131","RelatedDescription":"Open PR \"Mirror changes from dotnet/coreclr\" (#40131)"},{"Id":"478236116","IsPullRequest":false,"CreatedAt":"2019-08-08T03:48:43","Actor":"rjmholt","Number":"40130","RawContent":null,"Title":"Environment.SetEnvironmentVariable() works differently to setenv() p/Invoke","State":"open","Body":"I've been working on adding login shell support to PowerShell in https://github.com/PowerShell/PowerShell/pull/10050.\r\n\r\nOne of the optimisations I've been trying to add is a short circuit at startup so we don't check for login twice.\r\n\r\nThe idea we settled on was to set an environment variable, which for the purposes of this issue looks like this:\r\n\r\n```csharp\r\nstatic void DoPowerShellLogin()\r\n{\r\n        if (Environment.GetEnvironmentVariable(\"ALREADY_CHECKED_LOGIN\") != null)\r\n        {\r\n            return;\r\n        }\r\n\r\n        Environment.SetEnvironmentVariable(\"ALREADY_CHECKED_LOGIN\", \"1\");\r\n        exec(\"/path/to/pwsh\", new string[] { null });\r\n}\r\n\r\n[DllImport(\"libc\")]\r\nprivate static extern int exec(string path, string[] args);\r\n```\r\n\r\nIn the debugger, this successfully created the environment variable in the first pass, but on the other side of the `exec` call it wasn't defined.\r\n\r\nI played with this a bit and eventually tried a direct invocation of the `setenv` syscall:\r\n\r\n\r\n```csharp\r\nstatic void DoPowerShellLogin()\r\n{\r\n        if (Environment.GetEnvironmentVariable(\"ALREADY_CHECKED_LOGIN\") != null)\r\n        {\r\n            return;\r\n        }\r\n\r\n        setenv(\"ALREADY_CHECKED_LOGIN\", \"1\", true);\r\n        exec(\"/path/to/pwsh\", new string[] { null });\r\n}\r\n\r\n[DllImport(\"libc\")]\r\nprivate static extern int exec(string path, string[] args);\r\n\r\n[DllImport(\"libc\")]\r\nprivate static extern int setenv(string name, string value, bool overwrite);\r\n```\r\n\r\nAnd this now worked.\r\n\r\nMost interestingly, before calling `exec` but after calling `setenv`, `Environment.GetEnvironmentVariable(\"ALREADY_CHECKED_LOGIN\")` returned `null`.\r\n\r\nI'm assuming this behaviour is by design, but I'm not really sure why it is the way it is; I certainly didn't expect `setenv` to work when `Environment.SetEnvironmentVariable()` didn't.","Url":"https://github.com/dotnet/corefx/issues/40130","RelatedDescription":"Open issue \"Environment.SetEnvironmentVariable() works differently to setenv() p/Invoke\" (#40130)"},{"Id":"478154790","IsPullRequest":true,"CreatedAt":"2019-08-08T01:08:36","Actor":"stephentoub","Number":"40121","RawContent":null,"Title":"Fix several test uses of RunContinuationsAsynchronously","State":"closed","Body":"","Url":"https://github.com/dotnet/corefx/pull/40121","RelatedDescription":"Closed or merged PR \"Fix several test uses of RunContinuationsAsynchronously\" (#40121)"},{"Id":"478124162","IsPullRequest":true,"CreatedAt":"2019-08-08T01:08:00","Actor":"stephentoub","Number":"40113","RawContent":null,"Title":"Re-enable StyleCop warnings SA1028 and SA1518 (trailing whitespace and blank lines)","State":"closed","Body":"Mechanical/automated change.  The only manual changes were a) removing the two rules from the CodeAnalysis.ruleset file, b) removing spaces from one line of a .targets file that is used to generate a .cs file, and c) reverting the changes in a few test files where the naive replacement happened in the middle of a verbatim string where the whitespace actually mattered.\r\n\r\nChanges were made via:\r\n```C#\r\nusing System;\r\nusing System.IO;\r\n\r\nclass Program\r\n{\r\n    static void Main()\r\n    {\r\n        foreach (string path in Directory.EnumerateFiles(@\"d:\\repos\\corefx\\src\\\", \"*.cs\", SearchOption.AllDirectories))\r\n        {\r\n            bool modified = false;\r\n            string[] lines = File.ReadAllLines(path);\r\n\r\n            // Remove whitespace from end of lines\r\n            for (int i = 0; i < lines.Length; i++)\r\n            {\r\n                string line = lines[i];\r\n                int spaces = 0;\r\n                for (int c = line.Length - 1; c >= 0; c--)\r\n                {\r\n                    if (!char.IsWhiteSpace(line[c])) break;\r\n                    spaces++;\r\n                }\r\n                if (spaces > 0)\r\n                {\r\n                    lines[i] = line.Substring(0, line.Length - spaces);\r\n                    modified = true;\r\n                }\r\n            }\r\n\r\n            // Remove ending blank lines\r\n            int endingBlankLines = 0;\r\n            for (int i = lines.Length - 1; i >= 0; i--)\r\n            {\r\n                if (!string.IsNullOrWhiteSpace(lines[i])) break;\r\n                endingBlankLines++;\r\n            }\r\n            if (endingBlankLines > 0)\r\n            {\r\n                lines = lines.AsSpan(0, lines.Length - endingBlankLines).ToArray();\r\n                modified = true;\r\n            }\r\n\r\n            if (modified)\r\n            {\r\n                File.WriteAllLines(path, lines);\r\n                Console.WriteLine(path);\r\n            }\r\n        }\r\n    }\r\n}\r\n```\r\n\r\ncc: @safern, @ViktorHofer ","Url":"https://github.com/dotnet/corefx/pull/40113","RelatedDescription":"Closed or merged PR \"Re-enable StyleCop warnings SA1028 and SA1518 (trailing whitespace and blank lines)\" (#40113)"},{"Id":"478185242","IsPullRequest":true,"CreatedAt":"2019-08-07T23:42:42","Actor":"ericstj","Number":"40129","RawContent":null,"Title":"[release/3.0] Enable partial package build during source build (#40061)","State":"open","Body":"Release port of #40061 \r\nFixes #39793 \r\nFixes #39787\r\n\r\n#### Description\r\n\r\nUpstack repos require some CoreFx packages that are not normally built by source build.  Enable those as \"partial\" packages in order to flow bits.\r\n\r\n#### Customer Impact\r\n\r\nUnable to build product from source without prebuilts.\r\n\r\n#### Regression?\r\n\r\nNo\r\n\r\n#### Risk\r\n\r\nCould break the build or not be enough for all upstack consumers (eg: suppose someone **needs** a netcoreapp2.0 or desktop targeting asset that we don't build during source build because those prebuilts are not available).  We've done our best to mitigate this via manual testing and inspection.","Url":"https://github.com/dotnet/corefx/pull/40129","RelatedDescription":"Open PR \"[release/3.0] Enable partial package build during source build (#40061)\" (#40129)"},{"Id":"478145118","IsPullRequest":true,"CreatedAt":"2019-08-07T23:24:48","Actor":"krwq","Number":"40119","RawContent":null,"Title":"Disable System.Net.Http.FunctionalTests SetDelegate_ConnectionSucceeds on OSX","State":"closed","Body":"Per discussion in https://github.com/dotnet/corefx/issues/39989 disabling the test\r\n\r\nWe can consider porting to 3.0 to reduce noise if needed.","Url":"https://github.com/dotnet/corefx/pull/40119","RelatedDescription":"Closed or merged PR \"Disable System.Net.Http.FunctionalTests SetDelegate_ConnectionSucceeds on OSX\" (#40119)"},{"Id":"478070453","IsPullRequest":true,"CreatedAt":"2019-08-07T23:15:27","Actor":"stephentoub","Number":"40108","RawContent":null,"Title":"Re-enable a few more StyleCop rules (1019, 1020, 1112, 1113, 1115, 1302, 1517)","State":"closed","Body":"Filling the few-minutes gaps between several meetings today...","Url":"https://github.com/dotnet/corefx/pull/40108","RelatedDescription":"Closed or merged PR \"Re-enable a few more StyleCop rules (1019, 1020, 1112, 1113, 1115, 1302, 1517)\" (#40108)"},{"Id":"478178794","IsPullRequest":true,"CreatedAt":"2019-08-07T23:14:44","Actor":"jkoritzinsky","Number":"40127","RawContent":null,"Title":"[release/3.0] Add DecoratedNameAttribute","State":"open","Body":"#### Description\r\n\r\nThe `System.Runtime.CompilerServices.DecoratedNameAttribute` type is needed by WPF. This type used to exist in .NET Framework; this is just porting the attribute as-is to .NET Core. This type is used by the C++/CLI compiler. Without it, WPF has been seeing \"invalid typeref\" warnings at crossgen time.\r\n\r\nI've confirmed with the C++/CLI team that this change allows them to correctly find the type on their end.\r\n\r\n#### Customer Impact\r\n\r\nWithout this change, WPF gets `Could not load type 'System.Runtime.CompilerServices.DecoratedNameAttribute' from assembly 'System.Runtime, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'. while resolving 0xa000014 - System.Runtime.CompilerServices.DecoratedNameAttribute..ctor` errors when running crossgen on their assemblies.\r\n\r\nSee dotnet/wpf#634\r\n\r\n#### Regression?\r\n\r\nNo. Since WPF and C++/CLI are new to .NET Core 3.0, this is not a regression.\r\n\r\n#### Risk\r\n\r\nMinimal. The implementation of the `DecoratedNameAttribute` matches the .NET Framework implementation exactly. I've already verified with @tgani-msft that this enables the C++/CLI compiler to emit a correct typeref token.\r\n\r\nSee #40125 for the corresponding change in master.","Url":"https://github.com/dotnet/corefx/pull/40127","RelatedDescription":"Open PR \"[release/3.0] Add DecoratedNameAttribute\" (#40127)"},{"Id":"478178282","IsPullRequest":true,"CreatedAt":"2019-08-07T23:12:33","Actor":"steveharter","Number":"40126","RawContent":null,"Title":"Improve exception message for cycles during serialization","State":"open","Body":"Improves message as called out by https://github.com/dotnet/corefx/issues/39911\r\n\r\nWent from\r\n`CurrentDepth ({0}) is equal to or larger than the maximum allowed depth of {1}. Cannot write the next JSON object or array.`\r\nto\r\n`A possible object cycle was detected which is not supported. This can either be due to a cycle or if the object depth is larger than the maximum allowed depth of {0}.`\r\n\r\nI recommend porting this to 3.0.\r\n\r\n### Discussion issue:\r\nThe exception continues to be `JsonException` (JE) with no inner exception. Having JE allows the cycle to be discovered via the `Path` property which is important for generic logging reasons (ASP.NET and others). If this was a simple case where Path isn't important, we would just throw `InvalidOperationException` (IOE). As a side note we currently wrap almost all exceptions thrown from the reader\\writer\\document with a generic JE with the message \"_The object or value could not be serialized. Path: {0}._\" + set the inner exception.\r\n\r\nSo a valid alternative is to throw IOE instead with the nice error message and allow the current serialization infrastructure to automatically catch this as re-throw as JE. However, that results in that generic JE message which is not very friendly but will show the (very long recursive) path in the message so the cycle will be somewhat obvious.\r\n\r\nAnother alternative is to use the same nice string message for both the JE and the inner IOE but currently we don't do this anywhere.\r\n\r\nIt comes down to whether:\r\n- Do we want a \"correct\" inner exception of IOE?\r\n- Do we want the Path to be visible in the exception message (the one thrown\\caught, the not the inner)? With the current PR the path is not visible in the exception message without inspecting the Path property.","Url":"https://github.com/dotnet/corefx/pull/40126","RelatedDescription":"Open PR \"Improve exception message for cycles during serialization\" (#40126)"},{"Id":"478177118","IsPullRequest":true,"CreatedAt":"2019-08-07T23:07:39","Actor":"jkoritzinsky","Number":"40125","RawContent":null,"Title":"[master] Add DecoratedNameAttribute needed by C++/CLI compiler","State":"open","Body":"The `System.Runtime.CompilerServices.DecoratedNameAttribute` type is needed by WPF. This type used to exist in .NET Framework; this is just porting the attribute as-is to .NET Core. This type is used by the C++/CLI compiler. Without it, WPF has been seeing \"invalid typeref\" warnings at crossgen time.\r\n\r\nI've confirmed with the C++/CLI team that this change allows them to correctly find the type on their end.\r\n\r\nSee dotnet/wpf#634\r\n\r\nSee #40127 for the corresponding change in release/3.0.","Url":"https://github.com/dotnet/corefx/pull/40125","RelatedDescription":"Open PR \"[master] Add DecoratedNameAttribute needed by C++/CLI compiler\" (#40125)"},{"Id":"478176379","IsPullRequest":true,"CreatedAt":"2019-08-07T23:04:37","Actor":"safern","Number":"40124","RawContent":null,"Title":"Move corefx to stages, use arcade's package artifacts convention","State":"open","Body":"**Simpler to review by hiding white space changes because of yaml indentation**\r\nThis depends on: https://github.com/dotnet/arcade/pull/3542 to be consumed, will add it once it is available in BAR.\r\n\r\nBuild demo: https://dev.azure.com/dnceng/internal/_build/results?buildId=299769\r\n\r\nFixes: https://github.com/dotnet/corefx/issues/39802\r\n\r\nI will add SDL validation on a separate PR, such as cron schedules to outerloop builds to keep this PR simpler.\r\n\r\nThis will need to be ported to 3.0 once merged.\r\n\r\ncc: @danmosemsft ","Url":"https://github.com/dotnet/corefx/pull/40124","RelatedDescription":"Open PR \"Move corefx to stages, use arcade's package artifacts convention\" (#40124)"},{"Id":"478166247","IsPullRequest":true,"CreatedAt":"2019-08-07T22:25:52","Actor":"geoffkizer","Number":"40123","RawContent":null,"Title":"HTTP2: Ensure we don't try to send RST_STREAM or EndStream while holding the stream lock","State":"open","Body":"Fixes #40115\r\n\r\nSending a frame -- specifically, calling SendRstStreamAsync or SendEndStreamAsync -- can fail, which causes active streams to be aborted. Avoid doing this under the stream lock, to prevent lock reentrancy issues.\r\n\r\n@danmosemsft This will need to get ported to 3.0","Url":"https://github.com/dotnet/corefx/pull/40123","RelatedDescription":"Open PR \"HTTP2: Ensure we don't try to send RST_STREAM or EndStream while holding the stream lock\" (#40123)"},{"Id":"478146790","IsPullRequest":false,"CreatedAt":"2019-08-07T21:25:58","Actor":"willyt150","Number":"40120","RawContent":null,"Title":"New Asp.NET Core 3.0 Json doesn't serialize Dictionary<Key,Value>","State":"open","Body":".NET Core 3.0 Preview 7\r\n\r\nAsp.NET Web Apis, when returning a Dictionary it fails with a NotSupportedException. I've included the exception below.\r\n\r\nAlso, the `ControllerBase.BadRequest` method takes in a `ModelStateDictionary`, but when that's returned the serializer blows up as well with a NotSupportedException, but a slightly different message.\r\n\r\nWhen will this support be added? Since this has been supported in Json.net and other serializers for a while I hope this is on the radar.\r\n\r\nI do appreciate the fact that I can opt back in to using Json.net, so thank you very much for that!\r\n\r\n**Exception when returning a Dictionary**\r\nSystem.NotSupportedException: The collection type 'System.Collections.Generic.Dictionary`2[System.Int32,System.String]' is not supported.\r\n   at System.Text.Json.JsonClassInfo.GetElementType(Type propertyType, Type parentType, MemberInfo memberInfo, JsonSerializerOptions options)\r\n   at System.Text.Json.JsonClassInfo.CreateProperty(Type declaredPropertyType, Type runtimePropertyType, PropertyInfo propertyInfo, Type parentClassType, JsonSerializerOptions options)\r\n   at System.Text.Json.JsonClassInfo.AddProperty(Type propertyType, PropertyInfo propertyInfo, Type classType, JsonSerializerOptions options)\r\n   at System.Text.Json.JsonClassInfo.AddPolicyProperty(Type propertyType, JsonSerializerOptions options)\r\n   at System.Text.Json.JsonClassInfo..ctor(Type type, JsonSerializerOptions options)\r\n   at System.Text.Json.JsonSerializerOptions.GetOrAddClass(Type classType)\r\n   at System.Text.Json.WriteStackFrame.Initialize(Type type, JsonSerializerOptions options)\r\n   at System.Text.Json.JsonSerializer.WriteAsyncCore(Stream utf8Json, Object value, Type type, JsonSerializerOptions options, CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Mvc.Formatters.SystemTextJsonOutputFormatter.WriteResponseBodyAsync(OutputFormatterWriteContext context, Encoding selectedEncoding)\r\n   at Microsoft.AspNetCore.Mvc.Formatters.SystemTextJsonOutputFormatter.WriteResponseBodyAsync(OutputFormatterWriteContext context, Encoding selectedEncoding)\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeResultAsync>g__Logged|21_0(ResourceInvoker invoker, IActionResult result)\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeNextResultFilterAsync>g__Awaited|29_0[TFilter,TFilterAsync](ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.Rethrow(ResultExecutedContextSealed context)\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.ResultNext[TFilter,TFilterAsync](State& next, Scope& scope, Object& state, Boolean& isCompleted)\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.InvokeResultFilters()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeFilterPipelineAsync>g__Awaited|19_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Logged|17_1(ResourceInvoker invoker)\r\n   at Microsoft.AspNetCore.Routing.EndpointMiddleware.<Invoke>g__AwaitRequestTask|6_0(Endpoint endpoint, Task requestTask, ILogger logger)\r\n   at Microsoft.AspNetCore.Authentication.AuthenticationMiddleware.Invoke(HttpContext context)\r\n   at Microsoft.AspNetCore.Authorization.AuthorizationMiddleware.Invoke(HttpContext context)\r\n   at Microsoft.AspNetCore.Builder.Extensions.MapWhenMiddleware.Invoke(HttpContext context)\r\n   at Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIMiddleware.Invoke(HttpContext httpContext)\r\n   at Swashbuckle.AspNetCore.Swagger.SwaggerMiddleware.Invoke(HttpContext httpContext, ISwaggerProvider swaggerProvider)\r\n   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware.Invoke(HttpContext context)\r\n\r\n**Exception when returning BadRequest**\r\nSystem.NotSupportedException: The collection type 'Microsoft.AspNetCore.Mvc.SerializableError' is not supported.\r\n   at System.Text.Json.JsonClassInfo.GetElementType(Type propertyType, Type parentType, MemberInfo memberInfo, JsonSerializerOptions options)\r\n   at System.Text.Json.JsonClassInfo.CreateProperty(Type declaredPropertyType, Type runtimePropertyType, PropertyInfo propertyInfo, Type parentClassType, JsonSerializerOptions options)\r\n   at System.Text.Json.JsonClassInfo.AddProperty(Type propertyType, PropertyInfo propertyInfo, Type classType, JsonSerializerOptions options)\r\n   at System.Text.Json.JsonClassInfo.AddPolicyProperty(Type propertyType, JsonSerializerOptions options)\r\n   at System.Text.Json.JsonClassInfo..ctor(Type type, JsonSerializerOptions options)\r\n   at System.Text.Json.JsonSerializerOptions.GetOrAddClass(Type classType)\r\n   at System.Text.Json.WriteStackFrame.Initialize(Type type, JsonSerializerOptions options)\r\n   at System.Text.Json.JsonSerializer.WriteAsyncCore(Stream utf8Json, Object value, Type type, JsonSerializerOptions options, CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Mvc.Formatters.SystemTextJsonOutputFormatter.WriteResponseBodyAsync(OutputFormatterWriteContext context, Encoding selectedEncoding)\r\n   at Microsoft.AspNetCore.Mvc.Formatters.SystemTextJsonOutputFormatter.WriteResponseBodyAsync(OutputFormatterWriteContext context, Encoding selectedEncoding)\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeResultAsync>g__Logged|21_0(ResourceInvoker invoker, IActionResult result)\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeNextResultFilterAsync>g__Awaited|29_0[TFilter,TFilterAsync](ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.Rethrow(ResultExecutedContextSealed context)\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.ResultNext[TFilter,TFilterAsync](State& next, Scope& scope, Object& state, Boolean& isCompleted)\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.InvokeResultFilters()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeFilterPipelineAsync>g__Awaited|19_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Logged|17_1(ResourceInvoker invoker)\r\n   at Microsoft.AspNetCore.Routing.EndpointMiddleware.<Invoke>g__AwaitRequestTask|6_0(Endpoint endpoint, Task requestTask, ILogger logger)\r\n   at Microsoft.AspNetCore.Authentication.AuthenticationMiddleware.Invoke(HttpContext context)\r\n   at Microsoft.AspNetCore.Authorization.AuthorizationMiddleware.Invoke(HttpContext context)\r\n   at Microsoft.AspNetCore.Builder.Extensions.MapWhenMiddleware.Invoke(HttpContext context)\r\n   at Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIMiddleware.Invoke(HttpContext httpContext)\r\n   at Swashbuckle.AspNetCore.Swagger.SwaggerMiddleware.Invoke(HttpContext httpContext, ISwaggerProvider swaggerProvider)\r\n   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware.Invoke(HttpContext context)","Url":"https://github.com/dotnet/corefx/issues/40120","RelatedDescription":"Open issue \"New Asp.NET Core 3.0 Json doesn't serialize Dictionary<Key,Value>\" (#40120)"},{"Id":"478142849","IsPullRequest":false,"CreatedAt":"2019-08-07T21:15:16","Actor":"kasiabulat","Number":"40118","RawContent":null,"Title":"Fix implicit cast operator for JsonNumber","State":"open","Body":"Implicit cast operator for `JsonNumber` can throw an exception, which is against the FDG:\r\nhttps://docs.microsoft.com/en-us/dotnet/standard/design-guidelines/operator-overloads#conversion-operators. We need to consider if we want implicit cast operators for `JsonNumber`, `JsonBoolean` and `JsonString` at all.\r\n\r\n```C#\r\nJsonNumber number = float.PositiveInfinity; // throws\r\n```\r\n\r\n_Originally posted by @ahsonkhan in https://github.com/dotnet/corefx/pull/39917#discussion_r311362455","Url":"https://github.com/dotnet/corefx/issues/40118","RelatedDescription":"Open issue \"Fix implicit cast operator for JsonNumber\" (#40118)"},{"Id":"478141697","IsPullRequest":true,"CreatedAt":"2019-08-07T21:12:12","Actor":"buyaa-n","Number":"40117","RawContent":null,"Title":"[release/3.0]Handle `UnparseableExtension` status code when building X509Chain on …","State":"open","Body":"Fixes #39988\r\nPort of #40063\r\n\r\n#### Description\r\nHandle `UnparseableExtension` status code when building X509Chain on OSX 10.15\r\n#### Impact\r\nAllow building X509Chain to support `UnparseableExtension` status and gracefully fail on latest OSX\r\n#### Regression?\r\nNo\r\n#### Risk\r\nLow","Url":"https://github.com/dotnet/corefx/pull/40117","RelatedDescription":"Open PR \"[release/3.0]Handle `UnparseableExtension` status code when building X509Chain on …\" (#40117)"},{"Id":"478107560","IsPullRequest":true,"CreatedAt":"2019-08-07T20:56:47","Actor":"dotnet-maestro[bot]","Number":"40111","RawContent":null,"Title":"[release/3.0] Update dependencies from dotnet/coreclr","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:66928e2e-bd95-4f7e-280f-08d690bc5860)\r\n## From https://github.com/dotnet/coreclr\r\n- **Build**: 20190807.3\r\n- **Date Produced**: 8/7/2019 7:42 PM\r\n- **Commit**: f879b52ac9dd9d64bfcde6c9c39f1ccca2bab9a2\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk.IL** -> 3.0.0-preview9.19407.3\r\n  - **Microsoft.NETCore.ILAsm** -> 3.0.0-preview9.19407.3\r\n  - **Microsoft.NETCore.Runtime.CoreCLR** -> 3.0.0-preview9.19407.3\r\n\r\n[marker]: <> (End:66928e2e-bd95-4f7e-280f-08d690bc5860)\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/40111","RelatedDescription":"Closed or merged PR \"[release/3.0] Update dependencies from dotnet/coreclr\" (#40111)"},{"Id":"478135732","IsPullRequest":false,"CreatedAt":"2019-08-07T20:56:10","Actor":"buyaa-n","Number":"40116","RawContent":null,"Title":"Building X509Chain should propagate error to X509Chain.ChainStatus","State":"open","Body":"In https://github.com/dotnet/corefx/issues/39988 we have started handling `UnparseableExtension` status code on OSX but we have noticed that error on Windows (and possibly Linux) is not being propagated to X509Chain.ChainStatus.\r\n\r\nHere is an example test case modification which will show the issue.\r\n\r\nIn src/System.Security.Cryptography.X509Certificates/tests/DynamicChainTests.cs, test case `TestInvalidAia`\r\n\r\nfollowing assert should be added\r\n\r\n```csharp\r\n Assert.Contains(chain.ChainStatus, (status) => status.Status.HasFlag(X509ChainStatusFlags.InvalidExtension));\r\n```\r\n\r\ncurrently this will fail on Windows.\r\n\r\nWe should investigate how can the error messages be improved.\r\n\r\ncc: @bartonjs @krwq","Url":"https://github.com/dotnet/corefx/issues/40116","RelatedDescription":"Open issue \"Building X509Chain should propagate error to X509Chain.ChainStatus\" (#40116)"},{"Id":"478135087","IsPullRequest":false,"CreatedAt":"2019-08-07T20:54:34","Actor":"danmosemsft","Number":"40115","RawContent":null,"Title":"Http2Stream.OnReset assertion failed exception running test on macOS: OSX.1013.Amd64.Open.","State":"open","Body":"```\r\nProcess terminated. Assertion failed.\r\n   at System.Net.Http.Http2Connection.Http2Stream.OnReset(Exception resetException, Nullable`1 resetStreamErrorCode, Boolean canRetry) in /_/src/System.Net.Http/src/System/Net/Http/SocketsHttpHandler/Http2Stream.cs:line 658\r\n   at System.Net.Http.Http2Connection.AbortStreams(Exception abortException) in /_/src/System.Net.Http/src/System/Net/Http/SocketsHttpHandler/Http2Connection.cs:line 1439\r\n   at System.Net.Http.Http2Connection.Abort(Exception abortException) in /_/src/System.Net.Http/src/System/Net/Http/SocketsHttpHandler/Http2Connection.cs:line 1369\r\n   at System.Net.Http.Http2Connection.FlushOutgoingBytesAsync() in /_/src/System.Net.Http/src/System/Net/Http/SocketsHttpHandler/Http2Connection.cs:line 186\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[TStateMachine](TStateMachine& stateMachine) in /_/src/System.Private.CoreLib/shared/System/Runtime/CompilerServices/AsyncMethodBuilder.cs:line 1015\r\n   at System.Net.Http.Http2Connection.FlushOutgoingBytesAsync()\r\n   at System.Net.Http.Http2Connection.EndWrite(Boolean forceFlush) in /_/src/System.Net.Http/src/System/Net/Http/SocketsHttpHandler/Http2Connection.cs:line 778\r\n   at System.Net.Http.Http2Connection.FinishWrite(FlushTiming flush) in /_/src/System.Net.Http/src/System/Net/Http/SocketsHttpHandler/Http2Connection.cs:line 751\r\n   at System.Net.Http.Http2Connection.SendRstStreamAsync(Int32 streamId, Http2ProtocolErrorCode errorCode) in /_/src/System.Net.Http/src/System/Net/Http/SocketsHttpHandler/Http2Connection.cs:line 867\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[TStateMachine](TStateMachine& stateMachine) in /_/src/System.Private.CoreLib/shared/System/Runtime/CompilerServices/AsyncMethodBuilder.cs:line 1015\r\n   at System.Net.Http.Http2Connection.SendRstStreamAsync(Int32 streamId, Http2ProtocolErrorCode errorCode)\r\n   at System.Net.Http.Http2Connection.Http2Stream.Reset() in /_/src/System.Net.Http/src/System/Net/Http/SocketsHttpHandler/Http2Stream.cs:line 284\r\n   at System.Net.Http.Http2Connection.Http2Stream.CancelResponseBody() in /_/src/System.Net.Http/src/System/Net/Http/SocketsHttpHandler/Http2Stream.cs:line 345\r\n   at System.Net.Http.Http2Connection.Http2Stream.Cancel() in /_/src/System.Net.Http/src/System/Net/Http/SocketsHttpHandler/Http2Stream.cs:line 320\r\n   at System.Net.Http.Http2Connection.Http2Stream.ReadResponseHeadersAsync(CancellationToken cancellationToken) in /_/src/System.Net.Http/src/System/Net/Http/SocketsHttpHandler/Http2Stream.cs:line 779\r\n   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state) in /_/src/System.Private.CoreLib/shared/System/Threading/ExecutionContext.cs:line 172\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.AsyncStateMachineBox`1.MoveNext(Thread threadPoolThread) in /_/src/System.Private.CoreLib/shared/System/Runtime/CompilerServices/AsyncMethodBuilder.cs:line 617\r\n   at System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(IAsyncStateMachineBox box, Boolean allowInlining) in /_/src/System.Private.CoreLib/shared/System/Threading/Tasks/TaskContinuation.cs:line 794\r\n   at System.Threading.Tasks.Task.RunContinuations(Object continuationObject) in /_/src/System.Private.CoreLib/shared/System/Threading/Tasks/Task.cs:line 3319\r\n   at System.Threading.Tasks.Task.FinishStageThree() in /_/src/System.Private.CoreLib/shared/System/Threading/Tasks/Task.cs:line 2176\r\n   at System.Threading.Tasks.Task.CancellationCleanupLogic() in /_/src/System.Private.CoreLib/shared/System/Threading/Tasks/Task.cs:line 3151\r\n   at System.Threading.Tasks.Task.TrySetCanceled(CancellationToken tokenToRecord, Object cancellationException) in /_/src/System.Private.CoreLib/shared/System/Threading/Tasks/Task.cs:line 3266\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.SetException(Exception exception) in /_/src/System.Private.CoreLib/shared/System/Runtime/CompilerServices/AsyncMethodBuilder.cs:line 784\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder.SetException(Exception exception) in /_/src/System.Private.CoreLib/shared/System/Runtime/CompilerServices/AsyncMethodBuilder.cs:line 283\r\n   at System.Net.Http.Http2Connection.Http2Stream.GetCancelableWaiterTask(CancellationToken cancellationToken) in /_/src/System.Net.Http/src/System/Net/Http/SocketsHttpHandler/Http2Stream.cs:line 1044\r\n   at System.Threading.ExecutionContext.RunFromThreadPoolDispatchLoop(Thread threadPoolThread, ExecutionContext executionContext, ContextCallback callback, Object state) in /_/src/System.Private.CoreLib/shared/System/Threading/ExecutionContext.cs:line 289\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.AsyncStateMachineBox`1.MoveNext(Thread threadPoolThread) in /_/src/System.Private.CoreLib/shared/System/Runtime/CompilerServices/AsyncMethodBuilder.cs:line 625\r\n   at System.Threading.ThreadPoolWorkQueue.Dispatch() in /_/src/System.Private.CoreLib/shared/System/Threading/ThreadPool.cs:line 663\r\n./RunTests.sh: line 161: 25287 Abort trap: 6           \"$RUNTIME_PATH/dotnet\" exec --runtimeconfig System.Net.Http.Functional.Tests.runtimeconfig.json xunit.console.dll System.Net.Http.Functional.Tests.dll -xml testResults.xml -nologo -nocolor -notrait category=nonnetcoreapptests -notrait category=nonosxtests -notrait category=IgnoreForCI -notrait category=OuterLoop -notrait category=failing $RSP_FILE\r\n```\r\nSince thisi s macOS, we do not have a dump (I think @mjanecke is working on that). Also no good clue which test failed.\r\n\r\nhttps://helix.dot.net/api/2019-06-17/jobs/0fef5713-a52e-40f7-8542-641b0bdb491c/workitems/System.Net.Http.Functional.Tests/console","Url":"https://github.com/dotnet/corefx/issues/40115","RelatedDescription":"Open issue \"Http2Stream.OnReset assertion failed exception running test on macOS: OSX.1013.Amd64.Open.\" (#40115)"},{"Id":"478127399","IsPullRequest":true,"CreatedAt":"2019-08-07T20:35:35","Actor":"steveharter","Number":"40114","RawContent":null,"Title":"Change 'in' modifier usage to 'ref' for performance","State":"open","Body":"Some minor optimizations to change `in` modifier to `ref`. This reduces the generated code size for these cases.\r\n\r\nPertains to https://github.com/dotnet/corefx/issues/39935 (doesn't \"fix\" as original issue was related to potential bugs).\r\n\r\nFor example with the code in [UnescapeString] ()https://github.com/dotnet/corefx/blob/1841042b99062de13dc80098cede9413be569238/src/System.Text.Json/src/System/Text/Json/Document/JsonDocument.cs#L904\r\n\r\nWith `in`:\r\n```\r\n   904:             int loc = row.Location;\r\n push        rsi  \r\n sub         rsp,150h  \r\n vzeroupper  \r\n lea         rbp,[rsp+160h]  \r\n mov         rsi,rcx  \r\n lea         rdi,[rbp-140h]  \r\n mov         ecx,4Ah  \r\n xor         eax,eax  \r\n rep stos    dword ptr [rdi]  \r\n mov         rcx,rsi  \r\n mov         qword ptr [rbp+10h],rcx  \r\n mov         qword ptr [rbp+18h],rdx  \r\n mov         qword ptr [rbp+20h],r8  \r\n mov         qword ptr [rbp+28h],r9  \r\n mov         rcx,qword ptr [rbp+20h]  \r\n mov         rax,qword ptr [rcx]  \r\n mov         qword ptr [rbp-50h],rax  \r\n mov         eax,dword ptr [rcx+8]  \r\n mov         dword ptr [rbp-48h],eax  \r\n lea         rcx,[rbp-50h]  \r\n call        00007FF833E55FE0  \r\n mov         dword ptr [rbp-14h],eax  \r\n```\r\n\r\nAnd with `ref`:\r\n```\r\n  904:             int loc = row.Location;\r\n push        rsi  \r\n sub         rsp,140h  \r\n vzeroupper  \r\n lea         rbp,[rsp+150h]  \r\n mov         rsi,rcx  \r\n lea         rdi,[rbp-130h]  \r\n mov         ecx,46h  \r\n xor         eax,eax  \r\n rep stos    dword ptr [rdi]  \r\n mov         rcx,rsi  \r\n mov         qword ptr [rbp+10h],rcx  \r\n mov         qword ptr [rbp+18h],rdx  \r\n mov         qword ptr [rbp+20h],r8  \r\n mov         qword ptr [rbp+28h],r9  \r\n mov         rcx,qword ptr [rbp+20h]  \r\n call        00007FF833E771F0  \r\n mov         dword ptr [rbp-14h],eax  \r\n```\r\n","Url":"https://github.com/dotnet/corefx/pull/40114","RelatedDescription":"Open PR \"Change 'in' modifier usage to 'ref' for performance\" (#40114)"},{"Id":"478113084","IsPullRequest":true,"CreatedAt":"2019-08-07T19:59:57","Actor":"geoffkizer","Number":"40112","RawContent":null,"Title":"[release/3.0] HTTP2: Fix handling of RST_STREAM with error = NO_ERROR after response EndStream","State":"open","Body":"Fixes #39586\r\nFixes #40030\r\n\r\nPort of #39882 to release/3.0\r\n\r\n**Description**\r\n\r\nThe RFC defines special behavior for receiving a RST_STREAM with error = NO_ERROR after the response body stream has been completed. When this happens, a client is supposed to cancel sending the request body but still consider the request successful. Previously, we did not do this.\r\n\r\n**Impact**\r\n\r\nFixes a hang found in gRPC scenarios. Also affects non-GRPC scenarios, e.g. POST and receive early 4xx response like Forbidden; many servers will send RST_STREAM with NO_ERROR in this scenario.\r\n\r\n**Regression?**\r\n\r\nNo\r\n\r\n**Risk**\r\n\r\nLow\r\n\r\n@danmosemsft \r\n","Url":"https://github.com/dotnet/corefx/pull/40112","RelatedDescription":"Open PR \"[release/3.0] HTTP2: Fix handling of RST_STREAM with error = NO_ERROR after response EndStream\" (#40112)"},{"Id":"478078239","IsPullRequest":false,"CreatedAt":"2019-08-07T18:33:08","Actor":"eiriktsarpalis","Number":"40110","RawContent":null,"Title":"Annotate corefx build artifacts with commit hashes","State":"open","Body":"I would be nice if assemblies produced by the corefx repo were annotated with git metadata. For example:\r\n```csharp\r\n[assembly: AssemblyMetadata(\"GitBranch\", \"release/3.0\")]\r\n[assembly: AssemblyMetadata(\"GitHash\", \"abc123\")]\r\n```\r\nHaving this information available at runtime would help a great deal in traceability when investigating issues.","Url":"https://github.com/dotnet/corefx/issues/40110","RelatedDescription":"Open issue \"Annotate corefx build artifacts with commit hashes\" (#40110)"},{"Id":"478077857","IsPullRequest":true,"CreatedAt":"2019-08-07T18:32:11","Actor":"davidsh","Number":"40109","RawContent":null,"Title":"[release/2.1] Port Kerberos auth fixes to 2.1 branch","State":"open","Body":"This PR ports some important Kerberos auth fixes from the 3.0 to 2.1 LTS\r\nbranch. These fixes help enterprise customers that have complex Kerberos\r\nauthentication scenarios that involve cross Windows (Active Directory)\r\nand Linux (Kerberos) domains/realms.\r\n\r\nThese fixes are from PRs:\r\n\r\n* #38465 - Use 'Host' header when calculating SPN for Kerberos auth\r\n* #38377 - Use GSS_C_NT_HOSTBASED_SERVICE format for Linux Kerberos SPN\r\n\r\nand are related to issue #36329.","Url":"https://github.com/dotnet/corefx/pull/40109","RelatedDescription":"Open PR \"[release/2.1] Port Kerberos auth fixes to 2.1 branch\" (#40109)"},{"Id":"478070191","IsPullRequest":true,"CreatedAt":"2019-08-07T18:13:22","Actor":"kasiabulat","Number":"40107","RawContent":null,"Title":"Json string and boolean","State":"open","Body":"I added `JsonString` and `JsonBoolean` implementation.\r\n\r\naddresses: #39922 \r\ncc: @joperezr @bartonjs @ericstj @ahsonkhan @terrajobst @JamesNK","Url":"https://github.com/dotnet/corefx/pull/40107","RelatedDescription":"Open PR \"Json string and boolean\" (#40107)"},{"Id":"478044069","IsPullRequest":true,"CreatedAt":"2019-08-07T18:09:15","Actor":"Dotnet-GitSync-Bot","Number":"40104","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @sywhang @tannergooding","Url":"https://github.com/dotnet/corefx/pull/40104","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#40104)"},{"Id":"478039227","IsPullRequest":true,"CreatedAt":"2019-08-07T18:07:19","Actor":"dotnet-maestro[bot]","Number":"40103","RawContent":null,"Title":"[release/3.0] Update dependencies from dotnet/coreclr","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:66928e2e-bd95-4f7e-280f-08d690bc5860)\r\n## From https://github.com/dotnet/coreclr\r\n- **Build**: 20190807.2\r\n- **Date Produced**: 8/7/2019 4:53 PM\r\n- **Commit**: 7259ed2b3676930cbe6c274fd71af9701ca69fe3\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk.IL** -> 3.0.0-preview9.19407.2\r\n  - **Microsoft.NETCore.ILAsm** -> 3.0.0-preview9.19407.2\r\n  - **Microsoft.NETCore.Runtime.CoreCLR** -> 3.0.0-preview9.19407.2\r\n\r\n[marker]: <> (End:66928e2e-bd95-4f7e-280f-08d690bc5860)\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/40103","RelatedDescription":"Closed or merged PR \"[release/3.0] Update dependencies from dotnet/coreclr\" (#40103)"},{"Id":"478066555","IsPullRequest":true,"CreatedAt":"2019-08-07T18:04:15","Actor":"JeffreyZhao","Number":"40106","RawContent":null,"Title":"Improve get/set performance in HashSet<T>","State":"open","Body":"Similar optimization in Dictionary<,> has been ported to HashSet<>.\r\n\r\n`_comparer` has been made nullable, and default by `null`. This\r\nmakes us possible to check if it's null for faster branches, instead\r\nof comparing it to `EqualityComparer<T>.Default`. Since `_comparer`\r\nis `null` by default, the constructors and the `OnDeserialization`\r\nmethod have been modified accordingly to save `null` instead of the\r\n`EqualityComparer<T>.Default` if it's been passed/saved. Also, the\r\nplaces that use `_comparer` directly much do a null check and switch\r\nto `EqualityComparer<T>.Default` instead.\r\n\r\nThe major optimization is under `Contains` and `AddIfNotPresent`\r\nmethods. Basically the code was:\r\n\r\n``\r\n// Code uses _comparer\r\n``\r\n\r\nNow it becomes:\r\n\r\n```\r\nvar comparer = _comparer;\r\nif (comparer == null)\r\n{\r\n  if (default(T) != null)\r\n  {\r\n    // Code uses EqualityComparer<T>.Default for de-virtualizing.\r\n  }\r\n  else\r\n  {\r\n    var defaultComparer = EqualityComparer<T>.Default;\r\n    // Code uses cached defaultComparer\r\n  }\r\n}\r\nelse\r\n{\r\n  // Code uses comparer\r\n}\r\n```\r\n\r\nI've intentionally kept the origin implementation and comments as\r\nmuch as possible, and the optimized code is not exactly the same as\r\nin `Dictionary<T>`. Further micro-optimizations might be possible\r\nbut I think it's cleaner to keep it that way in the first step.\r\n\r\nThe `Remove` method hasn't been optimized since it's complicated,\r\nand not been done in `Dictionary` either. Some other methods like\r\n`AddOrGetLocation` or `InternalIndexOf` are not optimized since\r\nthey're only used in less-common scenarios, and not in the scope\r\nof the current issue.\r\n\r\nThe benchmark shows there're obvious improvements in get and set\r\noperations for all cases, especialy if the item is a value type.\r\nI was actually expecting to see some pull back for \"slower\" case,\r\nlike if we use a custom comparer, but it turns out it's getting\r\nfaster too, since we have cached the comparer instead of using\r\n`_comparer` directly in the loop.\r\n\r\nThe benchmark also shows the optimized `HashSet` has close or\r\nbetter performance comparing to `Dictionary` in almost all cases,\r\nexcept for `HashSet<string>` with default comparer. The default\r\ncomparer in `Dictionary<string>` is a \"non-random\" implementation\r\nthat performs better. Unfortunately the comparer is internal to\r\nthe CoreLib.\r\n\r\nThe optimized `HashSet<string>` is still faster since it's using\r\ncached comparer of type `EqualityComparer<string>`, which uses\r\nvirtual method dispatching instead of interface dispatching. It's\r\njust not as faster as `Dictionary<string, T>` yet.\r\n\r\nFix #36448","Url":"https://github.com/dotnet/corefx/pull/40106","RelatedDescription":"Open PR \"Improve get/set performance in HashSet<T>\" (#40106)"},{"Id":"478059423","IsPullRequest":true,"CreatedAt":"2019-08-07T17:46:35","Actor":"Tratcher","Number":"40105","RawContent":null,"Title":"Map NetSecurityNative.Status to SecurityStatusPalErrorCode","State":"open","Body":"Customers have provided feedback on the new ASP.NET Core Negotiate handler asking for granular error handling (https://github.com/aspnet/AspNetCore/issues/12566). We’d like to address this in 3.0 or 3.1. \r\n \r\nHttpListener has a feature where it maps certain SChannel errors to specific HTTP status codes.\r\nhttps://github.com/dotnet/corefx/blob/3ad1a980399b3656a7c94ad60fcdb877d859add0/src/System.Net.HttpListener/src/System/Net/Windows/HttpListener.Windows.cs#L1549-L1593\r\n \r\nThis is easy for us to replicate on Windows, but it doesn’t work on Linux because the granular error codes aren’t being surfaced. AcceptSecurityContext always returns SecurityStatusPalErrorCode.InternalError and a custom exception:\r\nhttps://github.com/dotnet/corefx/blob/7f920b2984a97ce8643bc8e64a93e7bd4d8a059e/src/Common/src/System/Net/Security/NegotiateStreamPal.Unix.cs#L425\r\nhttps://github.com/dotnet/corefx/blob/7f920b2984a97ce8643bc8e64a93e7bd4d8a059e/src/Common/src/System/Net/Security/NegotiateStreamPal.Unix.cs#L222\r\n\r\nGSS_S_NO_CRED is the primary one we're interested in at the moment, but I added mappings for several others documented as being returned  from `gss_accept_sec_context`.\r\n\r\nNo tests were modified because this field does not surface in NegotiateStream server scenarios. I confirmed the changes locally by temporarily changing CreateExceptionFromError to include the enum value in the exception message.","Url":"https://github.com/dotnet/corefx/pull/40105","RelatedDescription":"Open PR \"Map NetSecurityNative.Status to SecurityStatusPalErrorCode\" (#40105)"},{"Id":"478034281","IsPullRequest":false,"CreatedAt":"2019-08-07T16:44:16","Actor":"ericstj","Number":"40102","RawContent":null,"Title":"Add a leg to CI protect source build","State":"open","Body":"Ensure we don't break source build nor take new dependencies on packages outside of source build.","Url":"https://github.com/dotnet/corefx/issues/40102","RelatedDescription":"Open issue \"Add a leg to CI protect source build\" (#40102)"}],"ResultType":"GitHubIssue"},"Roslyn-Issues":{"Issues":[{"Id":"478171649","IsPullRequest":true,"CreatedAt":"2019-08-08T00:30:34","Actor":"dotnet-bot","Number":"37813","RawContent":null,"Title":"Merge release/dev16.2 to release/dev16.2-vs-deps","State":"closed","Body":"\nThis is an automatically generated pull request from release/dev16.2 into release/dev16.2-vs-deps.\n(created from a manual run of the PR generation tool)\n\n``` bash\ngit fetch --all\ngit checkout merges/release/dev16.2-to-release/dev16.2-vs-deps\ngit reset --hard upstream/release/dev16.2-vs-deps\ngit merge upstream/release/dev16.2\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/dev16.2-to-release/dev16.2-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/37813","RelatedDescription":"Closed or merged PR \"Merge release/dev16.2 to release/dev16.2-vs-deps\" (#37813)"},{"Id":"478194242","IsPullRequest":true,"CreatedAt":"2019-08-08T00:24:03","Actor":"jasonmalinowski","Number":"37822","RawContent":null,"Title":"Remove inaccessible attributes when generating from the navigation bar","State":"open","Body":"When generating code from the navigation bar, we should remove inaccessible attributes, since there's no value in spitting code that won't build.\r\n\r\nFixes https://github.com/dotnet/roslyn/issues/37621 although perhaps not in the ideal way. We may also want to generally drop all nullable attributes when generating VB code, but that's being tracked by https://github.com/dotnet/roslyn/issues/30327 as there's some design questions still out.","Url":"https://github.com/dotnet/roslyn/pull/37822","RelatedDescription":"Open PR \"Remove inaccessible attributes when generating from the navigation bar\" (#37822)"},{"Id":"478171248","IsPullRequest":true,"CreatedAt":"2019-08-08T00:00:54","Actor":"dotnet-bot","Number":"37810","RawContent":null,"Title":"Merge release/dev16.2 to release/dev16.3-preview2","State":"closed","Body":"\nThis is an automatically generated pull request from release/dev16.2 into release/dev16.3-preview2.\n(created from a manual run of the PR generation tool)\n\n``` bash\ngit fetch --all\ngit checkout merges/release/dev16.2-to-release/dev16.3-preview2\ngit reset --hard upstream/release/dev16.3-preview2\ngit merge upstream/release/dev16.2\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/dev16.2-to-release/dev16.3-preview2 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/37810","RelatedDescription":"Closed or merged PR \"Merge release/dev16.2 to release/dev16.3-preview2\" (#37810)"},{"Id":"478188501","IsPullRequest":false,"CreatedAt":"2019-08-07T23:58:04","Actor":"jcouv","Number":"37821","RawContent":null,"Title":"Spec: record details of target-typing","State":"open","Body":"1. `default as TClass`: we target-type the operand only if it is the `default` literal\r\n2. `$\"{default}\"`: we target-type the insertion to `object`\r\n3. `using (default) ...`: we target-type the operand to `IDisposable` only if it is the `default` literal\r\n4. During return type inference of lambdas, expressions are neither required to be target-typed or to have a natural type.\r\n5. Introduced a new kind of conversion: \"default literal\" conversion.\r\n\r\nRelates to PR https://github.com/dotnet/roslyn/pull/37596\r\n\r\nFYI @gafter","Url":"https://github.com/dotnet/roslyn/issues/37821","RelatedDescription":"Open issue \"Spec: record details of target-typing\" (#37821)"},{"Id":"478183542","IsPullRequest":true,"CreatedAt":"2019-08-07T23:35:01","Actor":"jasonmalinowski","Number":"37820","RawContent":null,"Title":"Update ownership of CompilerGeneratorTools to the compiler team","State":"open","Body":"Otherwise the infrastructure team gets tagged and that's not useful.","Url":"https://github.com/dotnet/roslyn/pull/37820","RelatedDescription":"Open PR \"Update ownership of CompilerGeneratorTools to the compiler team\" (#37820)"},{"Id":"478181292","IsPullRequest":true,"CreatedAt":"2019-08-07T23:25:21","Actor":"jasonmalinowski","Number":"37819","RawContent":null,"Title":"Simplify away nullable annotations in non-nullable contexts","State":"open","Body":"We can use the simplifer to clean up ? in places where it was auto-generated but isn't valid due to nullable context. Please review commit-at-a-time, as commits have additional comments.","Url":"https://github.com/dotnet/roslyn/pull/37819","RelatedDescription":"Open PR \"Simplify away nullable annotations in non-nullable contexts\" (#37819)"},{"Id":"478150313","IsPullRequest":true,"CreatedAt":"2019-08-07T22:58:23","Actor":"JoeRobich","Number":"37804","RawContent":null,"Title":"Clear Major/MinorVersion to keep arcade from overwriting our VersionPrefix","State":"closed","Body":"","Url":"https://github.com/dotnet/roslyn/pull/37804","RelatedDescription":"Closed or merged PR \"Clear Major/MinorVersion to keep arcade from overwriting our VersionPrefix\" (#37804)"},{"Id":"478173615","IsPullRequest":true,"CreatedAt":"2019-08-07T22:54:03","Actor":"gafter","Number":"37818","RawContent":null,"Title":"Handle hoisted temporary variables of the switch expression pattern-matching machinery.","State":"open","Body":"Fixes #37713\r\n\r\nNote that before this bug fix we produce bad code for the added tests (we fail to hoist a needed temp or hoist a restricted type).\r\n","Url":"https://github.com/dotnet/roslyn/pull/37818","RelatedDescription":"Open PR \"Handle hoisted temporary variables of the switch expression pattern-matching machinery.\" (#37818)"},{"Id":"478171887","IsPullRequest":true,"CreatedAt":"2019-08-07T22:47:18","Actor":"dotnet-bot","Number":"37817","RawContent":null,"Title":"Merge master to features/param-nullchecking","State":"open","Body":"\nThis is an automatically generated pull request from master into features/param-nullchecking.\n(created from a manual run of the PR generation tool)\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-features/param-nullchecking\ngit reset --hard upstream/features/param-nullchecking\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-features/param-nullchecking --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/37817","RelatedDescription":"Open PR \"Merge master to features/param-nullchecking\" (#37817)"},{"Id":"478171788","IsPullRequest":true,"CreatedAt":"2019-08-07T22:46:57","Actor":"dotnet-bot","Number":"37816","RawContent":null,"Title":"Merge release/dev16.4-preview1 to release/dev16.4-preview1-vs-deps","State":"open","Body":"\nThis is an automatically generated pull request from release/dev16.4-preview1 into release/dev16.4-preview1-vs-deps.\n(created from a manual run of the PR generation tool)\n\n``` bash\ngit fetch --all\ngit checkout merges/release/dev16.4-preview1-to-release/dev16.4-preview1-vs-deps\ngit reset --hard upstream/release/dev16.4-preview1-vs-deps\ngit merge upstream/release/dev16.4-preview1\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/dev16.4-preview1-to-release/dev16.4-preview1-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/37816","RelatedDescription":"Open PR \"Merge release/dev16.4-preview1 to release/dev16.4-preview1-vs-deps\" (#37816)"},{"Id":"478171748","IsPullRequest":true,"CreatedAt":"2019-08-07T22:46:48","Actor":"dotnet-bot","Number":"37815","RawContent":null,"Title":"Merge master to master-vs-deps","State":"open","Body":"\nThis is an automatically generated pull request from master into master-vs-deps.\n(created from a manual run of the PR generation tool)\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-master-vs-deps\ngit reset --hard upstream/master-vs-deps\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-master-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/37815","RelatedDescription":"Open PR \"Merge master to master-vs-deps\" (#37815)"},{"Id":"478171707","IsPullRequest":true,"CreatedAt":"2019-08-07T22:46:40","Actor":"dotnet-bot","Number":"37814","RawContent":null,"Title":"Merge release/dev16.3-preview2 to release/dev16.3-preview2-vs-deps","State":"open","Body":"\nThis is an automatically generated pull request from release/dev16.3-preview2 into release/dev16.3-preview2-vs-deps.\n(created from a manual run of the PR generation tool)\n\n``` bash\ngit fetch --all\ngit checkout merges/release/dev16.3-preview2-to-release/dev16.3-preview2-vs-deps\ngit reset --hard upstream/release/dev16.3-preview2-vs-deps\ngit merge upstream/release/dev16.3-preview2\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/dev16.3-preview2-to-release/dev16.3-preview2-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/37814","RelatedDescription":"Open PR \"Merge release/dev16.3-preview2 to release/dev16.3-preview2-vs-deps\" (#37814)"},{"Id":"478171467","IsPullRequest":true,"CreatedAt":"2019-08-07T22:45:39","Actor":"dotnet-bot","Number":"37812","RawContent":null,"Title":"Merge release/dev16.2-vs-deps to release/dev16.3-preview2-vs-deps","State":"open","Body":"\nThis is an automatically generated pull request from release/dev16.2-vs-deps into release/dev16.3-preview2-vs-deps.\n(created from a manual run of the PR generation tool)\n\n``` bash\ngit fetch --all\ngit checkout merges/release/dev16.2-vs-deps-to-release/dev16.3-preview2-vs-deps\ngit reset --hard upstream/release/dev16.3-preview2-vs-deps\ngit merge upstream/release/dev16.2-vs-deps\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/dev16.2-vs-deps-to-release/dev16.3-preview2-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/37812","RelatedDescription":"Open PR \"Merge release/dev16.2-vs-deps to release/dev16.3-preview2-vs-deps\" (#37812)"},{"Id":"478171286","IsPullRequest":true,"CreatedAt":"2019-08-07T22:45:01","Actor":"dotnet-bot","Number":"37811","RawContent":null,"Title":"Merge release/dev16.3-preview2 to master","State":"open","Body":"\nThis is an automatically generated pull request from release/dev16.3-preview2 into master.\n(created from a manual run of the PR generation tool)\n\n``` bash\ngit fetch --all\ngit checkout merges/release/dev16.3-preview2-to-master\ngit reset --hard upstream/master\ngit merge upstream/release/dev16.3-preview2\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/dev16.3-preview2-to-master --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/37811","RelatedDescription":"Open PR \"Merge release/dev16.3-preview2 to master\" (#37811)"},{"Id":"478167522","IsPullRequest":false,"CreatedAt":"2019-08-07T22:30:31","Actor":"jasonmalinowski","Number":"37809","RawContent":null,"Title":"Calling GetNullableContext on a speculative semantic model doesn't inherit from the point of speculation","State":"open","Body":"If you have a speculative semantic model, and then call GetNullableContext on an expression in the speculated expression that doesn't contain any `#nullable` directive, it returns the compilation's default state, even if the point of speculation was otherwise surrounded by a `#nullable` directive. It should be considering first the speculated expression itself, then the point it was speculated in, and then finally fall back to the default compilation state.\r\n\r\nIf nothing else this means taking an expression and and speculating itself (which should be a no-op) is observable which seems a bit strange.","Url":"https://github.com/dotnet/roslyn/issues/37809","RelatedDescription":"Open issue \"Calling GetNullableContext on a speculative semantic model doesn't inherit from the point of speculation\" (#37809)"},{"Id":"478163767","IsPullRequest":false,"CreatedAt":"2019-08-07T22:17:27","Actor":"333fred","Number":"37808","RawContent":null,"Title":"Avoid emitting NullableAttribute when unecessary","State":"open","Body":"```\r\n#nullable enable \r\npublic class C\r\n{\r\n    public void Foo(string arg1, string arg2) { }\r\n    public void Bar(string arg1, string arg2) { }\r\n}\r\n```\r\nWe shouldn't need to emit both `NullableContext(1)` and `Nullable(0)` for this simple class, but we are today. @cston, do you know if there's a reason we're doing this?","Url":"https://github.com/dotnet/roslyn/issues/37808","RelatedDescription":"Open issue \"Avoid emitting NullableAttribute when unecessary\" (#37808)"},{"Id":"478161652","IsPullRequest":true,"CreatedAt":"2019-08-07T22:10:35","Actor":"dibarbet","Number":"37807","RawContent":null,"Title":"Liveshare Lsp syntax classifications","State":"open","Body":"Create an experiment to run syntactic classification on the remote host to see what the experience is like.\r\n\r\nNote that we will be following up with more treatments (textmate) and more services (indentation).","Url":"https://github.com/dotnet/roslyn/pull/37807","RelatedDescription":"Open PR \"Liveshare Lsp syntax classifications\" (#37807)"},{"Id":"478153819","IsPullRequest":false,"CreatedAt":"2019-08-07T21:46:00","Actor":"gafter","Number":"37806","RawContent":null,"Title":"Treat constant when clauses specially in EnC","State":"open","Body":"They are not actually evaluated at runtime.\r\nYou probably should not even be able to set a breakpoint on them.\r\nYou certainly cannot change them in EnC.\r\n","Url":"https://github.com/dotnet/roslyn/issues/37806","RelatedDescription":"Open issue \"Treat constant when clauses specially in EnC\" (#37806)"},{"Id":"478152447","IsPullRequest":false,"CreatedAt":"2019-08-07T21:41:44","Actor":"gafter","Number":"37805","RawContent":null,"Title":"Permit breakpoints in the switch expression.","State":"open","Body":"In support of https://github.com/dotnet/roslyn/issues/22016 please make the compiler generate the necessary sequence points so that we can set breakpoints in the when clause and expression part of a switch expression.  This would require promoting the temps to long-lived temps.","Url":"https://github.com/dotnet/roslyn/issues/37805","RelatedDescription":"Open issue \"Permit breakpoints in the switch expression.\" (#37805)"},{"Id":"478145556","IsPullRequest":true,"CreatedAt":"2019-08-07T21:22:31","Actor":"mavasani","Number":"37803","RawContent":null,"Title":"Disable interprocedural dataflow analysis for DisposableFieldsShouldB…","State":"open","Body":"…eDisposedDiagnosticAnalyzer\r\n\r\nThis should fix the performance issues reported in VS feedback tickets [#672009](https://developercommunity.visualstudio.com/content/problem/672009/live-analysis-eats-up-memory-resulting-in-vs-crash.html) and [#672909](https://developercommunity.visualstudio.com/content/problem/672909/live-code-analysis-extremely-slow-and-vs-2019-cras.html).","Url":"https://github.com/dotnet/roslyn/pull/37803","RelatedDescription":"Open PR \"Disable interprocedural dataflow analysis for DisposableFieldsShouldB…\" (#37803)"},{"Id":"478126529","IsPullRequest":true,"CreatedAt":"2019-08-07T20:33:30","Actor":"chborl","Number":"37802","RawContent":null,"Title":"Add Containing Type and Containing Member columns to FAR","State":"open","Body":"#34336 \r\nThis isn't ready for review yet.  Still needs testing and refactoring.","Url":"https://github.com/dotnet/roslyn/pull/37802","RelatedDescription":"Open PR \"Add Containing Type and Containing Member columns to FAR\" (#37802)"},{"Id":"478112940","IsPullRequest":true,"CreatedAt":"2019-08-07T19:59:37","Actor":"JoeRobich","Number":"37801","RawContent":null,"Title":"Enable debugging/EnC integration tests","State":"open","Body":"The recent failures for BasicEnC integration tests were because of the test image updating to 16.3 preview1. The changes in the vs-deps branches were waiting on this update and we can enable these tests again in these branches.\r\n\r\nResolves https://github.com/dotnet/roslyn/issues/35965 and https://github.com/dotnet/roslyn/issues/37689","Url":"https://github.com/dotnet/roslyn/pull/37801","RelatedDescription":"Open PR \"Enable debugging/EnC integration tests\" (#37801)"},{"Id":"478111443","IsPullRequest":true,"CreatedAt":"2019-08-07T19:55:50","Actor":"ivanbasov","Number":"37800","RawContent":null,"Title":"completion unit test for reduce extension method does not check type constraints","State":"open","Body":"Unit tests for https://github.com/dotnet/roslyn/issues/37780\r\nFeel free to either update the PR with a fix or cherry pick the test into a new PR with the fix","Url":"https://github.com/dotnet/roslyn/pull/37800","RelatedDescription":"Open PR \"completion unit test for reduce extension method does not check type constraints\" (#37800)"},{"Id":"478105842","IsPullRequest":false,"CreatedAt":"2019-08-07T19:41:50","Actor":"vsfeedback","Number":"37799","RawContent":null,"Title":"c# Keyword crash","State":"open","Body":"_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/problem/676928/c-keyword-crash.html)._\n\n---\n\nsealed;     &lt;------- Enter this line and press backback a few times\n\n---\n### Original Comments\n\n#### Visual Studio Feedback System on 8/5/2019, 02:34 AM: \n\n<p>We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.</p>\n\n#### vsq_kuangqi on 8/6/2019, 00:55 AM: \n\nusing Newtonsoft.Json;  <------ Crash when input to using new\n\n---\n### Original Solutions\n(no solutions)","Url":"https://github.com/dotnet/roslyn/issues/37799","RelatedDescription":"Open issue \"c# Keyword crash\" (#37799)"},{"Id":"478074906","IsPullRequest":false,"CreatedAt":"2019-08-07T18:24:50","Actor":"jcouv","Number":"37798","RawContent":null,"Title":"`null` literal should get a `ConvertedType`","State":"open","Body":"Neal fixed some conversion issues around tuple literals and switch expressions. I'm fixing similar issues around `default` literal (PR https://github.com/dotnet/roslyn/pull/37596).\r\n\r\nBut similar issues remain for the `null` literal.","Url":"https://github.com/dotnet/roslyn/issues/37798","RelatedDescription":"Open issue \"`null` literal should get a `ConvertedType`\" (#37798)"},{"Id":"478052372","IsPullRequest":false,"CreatedAt":"2019-08-07T17:29:20","Actor":"kryptine","Number":"37797","RawContent":null,"Title":"Switch to MIT license","State":"open","Body":"I suggest that Roslyn's license should be changed to a MIT license. This would [alleviate legal problems for developers](https://github.com/dotnet/fsharp/issues/1727) and be consistent with the rest of .NET Core.","Url":"https://github.com/dotnet/roslyn/issues/37797","RelatedDescription":"Open issue \"Switch to MIT license\" (#37797)"},{"Id":"478051550","IsPullRequest":false,"CreatedAt":"2019-08-07T17:27:17","Actor":"vsfeedback","Number":"37796","RawContent":null,"Title":"class diagram show as collection association not working for IList<T> and T is in the same project","State":"open","Body":"_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/problem/679870/class-diagram-show-as-collection-association-not-w.html)._\r\n\r\n---\r\nI have two classes, one A and one B, B has an A property and A has a list of B, like above\r\n\r\n``` C#\r\n\r\npublic class A\r\n{\r\n public virtual IList<B> B {get;set;}\r\n}\r\n\r\n\r\npublic class B\r\n{\r\npublic virtual A A {get;set;}\r\n}\r\n\r\n```\r\n\r\nIf I go to class diagram ans add those two classes, and press Show as collection association in B property on A class, it returns this error\r\n\r\n---------------------------\r\nMicrosoft Visual Studio\r\n---------------------------\r\nCannot show as association because 'System.Collections.Generic.IList&lt;MC.AspNetCore.Workflow.Model.Passo.Passo&gt;' cannot be found.\r\n\r\nTry one of the following:\r\n\r\n- Ensure that 'System.Collections.Generic.IList&lt;B&gt;' is an existing type.\r\n\r\n- If 'System.Collections.Generic.IList&lt;B&gt;' is defined outside your project, ensure you have placed the correct references in Solution Explorer.\r\n---------------------------\r\nOK   Help   \r\n---------------------------\r\n\r\n---\r\n### Original Comments\r\n\r\n#### Visual Studio Feedback System on 8/7/2019, 04:57 AM: \r\n\r\n<p>We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.</p>\r\n\r\n\r\n---\r\n### Original Solutions\r\n(no solutions)","Url":"https://github.com/dotnet/roslyn/issues/37796","RelatedDescription":"Open issue \"class diagram show as collection association not working for IList<T> and T is in the same project\" (#37796)"},{"Id":"478050763","IsPullRequest":true,"CreatedAt":"2019-08-07T17:25:17","Actor":"mavasani","Number":"37795","RawContent":null,"Title":"Add support to use editorconfig for set severity command in the Analy…","State":"open","Body":"…zers node context menu\r\n\r\n1. Renamed \"Set Rule Set Severity\" command to \"Set severity\". Also renamed \"Info\" and \"Hidden\" sub-menus to \"Suggestion\" and \"Silent\" respectively to align with our editorconfig severity terminology.\r\n2. The set severity command handler checks if the project uses no ruleset or the default built-in ruleset, and if so it adds or updates editorconfig to configure severity. Otherwise, we continue using specified ruleset for configuration.\r\n3. Updated the effective ruleset severity computation for the rule nodes under Analyzers node to account for severity settings from editorconfig (analyzer config documents).\r\n\r\nFollow-up work for subsequent PR:\r\n1. Add a new right click menu command to Analyzers node to open active editorconfig for project (and create one if none exists) - similar to the existing \"Open Active Rule Set\" command for rulesets.\r\n2. Hide the \"Open Active Rule Set\" command, unless the project already has a non-default non-built in ruleset.","Url":"https://github.com/dotnet/roslyn/pull/37795","RelatedDescription":"Open PR \"Add support to use editorconfig for set severity command in the Analy…\" (#37795)"},{"Id":"478050300","IsPullRequest":false,"CreatedAt":"2019-08-07T17:24:04","Actor":"vsfeedback","Number":"37794","RawContent":null,"Title":"C# intellisense suggesting invalid generic methods","State":"open","Body":"_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/problem/679722/c-intellisense-suggesting-invalid-generic-methods.html)._\r\n\r\n---\r\nIntellisense shows method &quot;DoSomething&quot; as a suggestion for variables that don't match the generic type constraint of the method.\r\n\r\nCode below, type `d.` and see &quot;DoSomething&quot; show up in the suggested list:\r\n\r\n```\r\nusing System;\r\n\r\nnamespace broke\r\n{\r\n    public class SomeClass\r\n    {\r\n    }\r\n\r\n    public static class SomeTypeExtensions\r\n    {\r\n        public static void DoSomething<TType>(this TType type) where TType : SomeClass\r\n        {\r\n        }\r\n    }\r\n\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            IDisposable d;\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n---\r\n### Original Comments\r\n\r\n#### Visual Studio Feedback System on 8/7/2019, 03:23 AM: \r\n\r\n<p>We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.</p>\r\n\r\n#### Visual Studio Feedback System on 8/7/2019, 10:16 AM: \r\n\r\n<p>This issue is currently being investigated. Our team will get back to you if either more information is needed, a workaround is available, or the issue is resolved.</p>\r\n\r\n\r\n---\r\n### Original Solutions\r\n(no solutions)\r\n\r\n![image](https://user-images.githubusercontent.com/7817401/62643751-850d7880-b8fd-11e9-9020-801a8a4db65e.png)\r\n","Url":"https://github.com/dotnet/roslyn/issues/37794","RelatedDescription":"Open issue \"C# intellisense suggesting invalid generic methods\" (#37794)"},{"Id":"478048302","IsPullRequest":false,"CreatedAt":"2019-08-07T17:18:52","Actor":"vsfeedback","Number":"37793","RawContent":null,"Title":"Find All References does not find all references","State":"open","Body":"_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/problem/679669/find-all-references-does-not-find-all-references.html)._\r\n\r\n---\r\nPerforming a Find All References skips over overridden implementation and does not report that in the find results. From the image, the NotifyTestRecordsChangedAsync API is used in 4 places from the code lens indicators which is correct but I dont see the find results matching. This is from the VSUniTesting repo - https://devdiv.visualstudio.com/DevDiv/_git/VSUnitTesting.\r\n\r\n---\r\n### Original Comments\r\n\r\n#### Visual Studio Feedback System on 8/6/2019, 11:28 PM: \r\n\r\n<p>We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.</p>\r\n\r\n\r\n---\r\n### Original Solutions\r\n(no solutions)\r\n\r\n![image](https://user-images.githubusercontent.com/7817401/62643443-d5380b00-b8fc-11e9-93fc-33902d1c644b.png)\r\n","Url":"https://github.com/dotnet/roslyn/issues/37793","RelatedDescription":"Open issue \"Find All References does not find all references\" (#37793)"}],"ResultType":"GitHubIssue"},"CoreRT-Issues":{"Issues":[{"Id":"478241731","IsPullRequest":true,"CreatedAt":"2019-08-08T04:16:51","Actor":"Dotnet-GitSync-Bot","Number":"7674","RawContent":null,"Title":"Mirror changes from dotnet/coreclr,corefx","State":"open","Body":"This PR contains mirrored changes from dotnet/coreclr,corefx\n\n\n**Please REBASE this PR when merging**\n\n cc @sywhang @stephentoub","Url":"https://github.com/dotnet/corert/pull/7674","RelatedDescription":"Open PR \"Mirror changes from dotnet/coreclr,corefx\" (#7674)"},{"Id":"477833566","IsPullRequest":true,"CreatedAt":"2019-08-07T12:07:25","Actor":"MichalStrehovsky","Number":"7673","RawContent":null,"Title":"Pass stack trace policy","State":"closed","Body":"Found this change among a bunch of untracked files when I was cleaning up some CPAOT instrumentation I was doing.\r\n\r\nThis was supposed to go in with #7665.","Url":"https://github.com/dotnet/corert/pull/7673","RelatedDescription":"Closed or merged PR \"Pass stack trace policy\" (#7673)"},{"Id":"477520366","IsPullRequest":true,"CreatedAt":"2019-08-07T07:33:48","Actor":"Dotnet-GitSync-Bot","Number":"7671","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @tannergooding @lambdageek","Url":"https://github.com/dotnet/corert/pull/7671","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7671)"},{"Id":"477666470","IsPullRequest":false,"CreatedAt":"2019-08-07T01:49:36","Actor":"mjsabby","Number":"7672","RawContent":null,"Title":"Add Span/ROSpan to Test.CoreLib","State":"open","Body":"I think add Span and ROS to Test.CoreLib makes it considerably more useful. I'm not sure what the threshold for Test.CoreLib is. Is it the absolute minimum? Or is it the absolute minimum + extremely extremely important stuff.\r\n\r\nFor example, I don't believe `object.ToString()` needs to be in Test.CoreLib but I can understand if this starts to get into a slippery slope.","Url":"https://github.com/dotnet/corert/issues/7672","RelatedDescription":"Open issue \"Add Span/ROSpan to Test.CoreLib\" (#7672)"},{"Id":"477280907","IsPullRequest":true,"CreatedAt":"2019-08-06T12:50:02","Actor":"MichalStrehovsky","Number":"7670","RawContent":null,"Title":"Fix a couple R2R issues I hit","State":"closed","Body":"* I don't know how, but I missed the PInvoke ReadyToRun helpers exist in CoreCLR\r\n* Add a couple more CORINFO_HELP helpers that don't have R2R mapping\r\n* Cannot get FieldInfo for a field with an indeterminate offset.","Url":"https://github.com/dotnet/corert/pull/7670","RelatedDescription":"Closed or merged PR \"Fix a couple R2R issues I hit\" (#7670)"},{"Id":"476914604","IsPullRequest":true,"CreatedAt":"2019-08-06T02:41:03","Actor":"Dotnet-GitSync-Bot","Number":"7669","RawContent":null,"Title":"Mirror changes from dotnet/corefx","State":"closed","Body":"This PR contains mirrored changes from dotnet/corefx\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub","Url":"https://github.com/dotnet/corert/pull/7669","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corefx\" (#7669)"},{"Id":"476583874","IsPullRequest":true,"CreatedAt":"2019-08-05T08:11:44","Actor":"MichalStrehovsky","Number":"7665","RawContent":null,"Title":"Fix stack traces when reflection is disabled","State":"closed","Body":"This enables stack trace metadata when `IlcDisableReflection == true` and `IlcGenerateStackTraceData == true`. Enabling stack trace metadata had no effect before this change.\r\n\r\nThis also has a side effect of always generating the metadata blob. This is necessary because `ModuleList` tends to ignore modules that don't have the embedded metadata blob (https://github.com/dotnet/corert/blob/635cf21aca11265ded9d78d216424bd609c052f5/src/System.Private.TypeLoader/src/Internal/Runtime/TypeLoader/ModuleList.cs#L713-L720). Emitting an empty blob fixes the bug where delegate interop didn't work with reflection disabled.","Url":"https://github.com/dotnet/corert/pull/7665","RelatedDescription":"Closed or merged PR \"Fix stack traces when reflection is disabled\" (#7665)"},{"Id":"474043889","IsPullRequest":true,"CreatedAt":"2019-08-05T07:41:06","Actor":"MichalStrehovsky","Number":"7659","RawContent":null,"Title":"Prevent computing bad layout","State":"closed","Body":"Value type fields that contain GC pointers need to start at pointer boundaries.\r\n\r\nCoreCLR does this check a bit differently (it technically allows unaligned fields, provided the GC pointer inside the valuetype ends up being aligned with respect to the beginning of the type, but in reality, I don't think it's possible to end up in such situation - the layout of the field type itself would end up being invalid).\r\n\r\nFixes one of the CPAOT failures.","Url":"https://github.com/dotnet/corert/pull/7659","RelatedDescription":"Closed or merged PR \"Prevent computing bad layout\" (#7659)"},{"Id":"476665808","IsPullRequest":true,"CreatedAt":"2019-08-05T05:39:28","Actor":"jkotas","Number":"7668","RawContent":null,"Title":"Add link to CoreRT Future issue","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/7668","RelatedDescription":"Closed or merged PR \"Add link to CoreRT Future issue\" (#7668)"},{"Id":"476583894","IsPullRequest":true,"CreatedAt":"2019-08-04T19:18:34","Actor":"MichalStrehovsky","Number":"7666","RawContent":null,"Title":"Add a note about `strip` program","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/7666","RelatedDescription":"Closed or merged PR \"Add a note about `strip` program\" (#7666)"},{"Id":"476583904","IsPullRequest":true,"CreatedAt":"2019-08-04T19:07:53","Actor":"MichalStrehovsky","Number":"7667","RawContent":null,"Title":"Add a doc on debugging CoreRT programs","State":"open","Body":"A couple useful tips.","Url":"https://github.com/dotnet/corert/pull/7667","RelatedDescription":"Open PR \"Add a doc on debugging CoreRT programs\" (#7667)"},{"Id":"476442652","IsPullRequest":false,"CreatedAt":"2019-08-03T13:05:03","Actor":"shaggygi","Number":"7664","RawContent":null,"Title":"[Question] Clean up milestones","State":"closed","Body":"Not a biggie, but could older milestones be closed?  See [September](https://github.com/dotnet/corert/milestone/15) and [October](https://github.com/dotnet/corert/milestone/14).","Url":"https://github.com/dotnet/corert/issues/7664","RelatedDescription":"Closed issue \"[Question] Clean up milestones\" (#7664)"},{"Id":"476147096","IsPullRequest":true,"CreatedAt":"2019-08-02T13:36:07","Actor":"Dotnet-GitSync-Bot","Number":"7663","RawContent":null,"Title":"Mirror changes from dotnet/corefx,coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/corefx,coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub","Url":"https://github.com/dotnet/corert/pull/7663","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corefx,coreclr\" (#7663)"},{"Id":"475993675","IsPullRequest":true,"CreatedAt":"2019-08-02T12:03:22","Actor":"Dotnet-GitSync-Bot","Number":"7662","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @josalem","Url":"https://github.com/dotnet/corert/pull/7662","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7662)"},{"Id":"475915591","IsPullRequest":true,"CreatedAt":"2019-08-02T04:42:37","Actor":"Dotnet-GitSync-Bot","Number":"7661","RawContent":null,"Title":"Mirror changes from dotnet/coreclr,corefx","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr,corefx\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub @ts2do @sywhang","Url":"https://github.com/dotnet/corert/pull/7661","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr,corefx\" (#7661)"},{"Id":"475661957","IsPullRequest":false,"CreatedAt":"2019-08-01T13:06:06","Actor":"kvittokonito","Number":"7660","RawContent":null,"Title":"Inconsistent usage of rd.xml on referenced projects","State":"closed","Body":"When AOT compiling projects with dependent referenced projects via CoreRT, the rd.xml of the referenced child dependent projects is read used but that feature seems to be inconsistent at best.\r\nSupported directives are properly parsed and used but unsupported directives that would error on the root project such as \"<Namespace />\" do not throw an error and instead are ignored without warning.\r\n\r\nFor example, the following directive will produce an unsupported error when it is included in the rd.xml of the root project:\r\n`<Namespace Name=\"System.Collections.Generic\" Dynamic=\"Required All\" />`\r\n\r\nHowever, this directive will simply be silently ignored if it is included in the rd.xml of a project referenced via \"<ProjectReference />\" on the csproj of the root project.","Url":"https://github.com/dotnet/corert/issues/7660","RelatedDescription":"Closed issue \"Inconsistent usage of rd.xml on referenced projects\" (#7660)"},{"Id":"473658285","IsPullRequest":true,"CreatedAt":"2019-07-29T06:41:45","Actor":"MichalStrehovsky","Number":"7657","RawContent":null,"Title":"Split interop manager to usage- and analysis-based","State":"closed","Body":"This puts interop manager on the same plan as metadata manager. The reason we need two managers is inlining: to determine what structs/delegates need marshaling data, we look at what methods got compiled. This works great as long as there's no inlining of these methods. If we inline a method used as such marker, we lose track of what needs interop data.\r\n\r\nWith this split, we can collect usage information during the IL scanning phase, and for codegen phase, we can reuse the information from the scanner.\r\n\r\nCommit 4c1058a removes a bunch of workarounds that we had in place because of this.\r\n\r\nThe commits mostly make sense (might help reviewing this big change), although I'm planning to squash them anyway. The `Don't make so much marshalling data` commit undoes something I did wrong in the `Track interop dependencies in the dependency graph` commit.\r\n\r\nFixes #6063.","Url":"https://github.com/dotnet/corert/pull/7657","RelatedDescription":"Closed or merged PR \"Split interop manager to usage- and analysis-based\" (#7657)"},{"Id":"473677246","IsPullRequest":true,"CreatedAt":"2019-07-27T21:00:42","Actor":"Suchiman","Number":"7658","RawContent":null,"Title":"Add support for embedding and processing embedded stacktrace line infos","State":"open","Body":"As discussed @MichalStrehovsky \r\n**TODO**:\r\n- configurability\r\n- compression\r\n- disabling reflection fallback\r\n\r\nUncompressed numbers for sizes:\r\nFor a debug Hello World application (which includes debug information for corelib).\r\n\r\n| Section | bytes | count |\r\n| --- | --- | --- |\r\n| rvaTokenMap | 127.788 | 10.648 |\r\n| sequencePoints | 1.012.608 | 111.737 |\r\n| stringHeap | 70.160 | 767 |","Url":"https://github.com/dotnet/corert/pull/7658","RelatedDescription":"Open PR \"Add support for embedding and processing embedded stacktrace line infos\" (#7658)"},{"Id":"472235106","IsPullRequest":false,"CreatedAt":"2019-07-27T17:10:19","Actor":"FrancoisM","Number":"7648","RawContent":null,"Title":"Build error: nutc_driver.exe returned exit code 1 with VS2019. No others errors. Ok on VS2017","State":"closed","Body":"My project has built on Azure Pipelines hosted agent for months.\r\nI switched from VS2017 to VS2019. Now it fails with \"nutc_driver.exe returned exit code 1\".\r\n\r\nI read about similar issue saying to use `<Use64BitCompiler>true</Use64BitCompiler>`. I did yet the problem remains. Other issues mention \"Out of memory\" or other errors. In my case, the log doesn't have any other errors but the one I report.\r\n\r\nI tried to uncheck \"native compilation\" but then the build took 2min (instead of over an hour), the app was about 30mb (vs 100mb usually) and would'nt install.\r\n","Url":"https://github.com/dotnet/corert/issues/7648","RelatedDescription":"Closed issue \"Build error: nutc_driver.exe returned exit code 1 with VS2019. No others errors. Ok on VS2017\" (#7648)"},{"Id":"473484940","IsPullRequest":true,"CreatedAt":"2019-07-27T09:46:44","Actor":"MichalStrehovsky","Number":"7656","RawContent":null,"Title":"Use a single ReadyToRunHelper enum","State":"closed","Body":"When I was troubleshooting the double/float helpers issue, it was really hairy because we have two copies or ReadyToRunHelper. We only need one.\r\n\r\nWhen Jan initially added the ILCompiler version in #129, it already came with `Keep in sync with https://github.com/dotnet/coreclr/blob/master/src/inc/readytorun.h`. We then added a couple helpers that don't exist in CoreCLR R2R because it was convenient, but we do want these numbers to match.\r\n\r\nI extracted the AOT specific ones to the end of the file, realizing that the ReadyToRun mode is trying to handle things it shouldn't. I deleted those.","Url":"https://github.com/dotnet/corert/pull/7656","RelatedDescription":"Closed or merged PR \"Use a single ReadyToRunHelper enum\" (#7656)"},{"Id":"473380499","IsPullRequest":true,"CreatedAt":"2019-07-26T19:08:27","Actor":"MichalStrehovsky","Number":"7653","RawContent":null,"Title":"Delete dead code in ILCompiler.ReadyToRun","State":"closed","Body":"Not sure how much of this is earmarked for the future (I left a couple that I found obvious), and how much is just leftovers from old designs that we should delete.","Url":"https://github.com/dotnet/corert/pull/7653","RelatedDescription":"Closed or merged PR \"Delete dead code in ILCompiler.ReadyToRun\" (#7653)"},{"Id":"473452930","IsPullRequest":true,"CreatedAt":"2019-07-26T19:07:42","Actor":"Dotnet-GitSync-Bot","Number":"7654","RawContent":null,"Title":"Mirror changes from dotnet/corefx","State":"closed","Body":"This PR contains mirrored changes from dotnet/corefx\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub","Url":"https://github.com/dotnet/corert/pull/7654","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corefx\" (#7654)"},{"Id":"473357025","IsPullRequest":true,"CreatedAt":"2019-07-26T19:07:33","Actor":"MichalStrehovsky","Number":"7652","RawContent":null,"Title":"Add R2R implementation of getMethodSync","State":"closed","Body":"The R2R implementation is to just throw.\r\n\r\nThis doesn't throw in crossgen, but it takes an NGen-specific code path and _then_ throws when we deal with `CORINFO_HELP_MON_ENTER_STATIC`/`CORINFO_HELP_MON_EXIT_STATIC` (that the result of `getMethodSync` is the parameter for).","Url":"https://github.com/dotnet/corert/pull/7652","RelatedDescription":"Closed or merged PR \"Add R2R implementation of getMethodSync\" (#7652)"},{"Id":"473477763","IsPullRequest":true,"CreatedAt":"2019-07-26T18:15:15","Actor":"trylek","Number":"7655","RawContent":null,"Title":"One more fix for SuperILC OOM","State":"open","Body":"In my previous change I fixed OOM's caused by copying too long\r\nexecution log files but I forgot to apply the same fix to compilation\r\nlogs. This additional delta does just that.\r\n\r\nThanks\r\n\r\nTomas","Url":"https://github.com/dotnet/corert/pull/7655","RelatedDescription":"Open PR \"One more fix for SuperILC OOM\" (#7655)"},{"Id":"473264674","IsPullRequest":true,"CreatedAt":"2019-07-26T11:03:46","Actor":"trylek","Number":"7651","RawContent":null,"Title":"Fork RyuJit and ReadyToRun version of getGSCookie","State":"closed","Body":"In CPAOT, we need a CoreCLR-compatible version of the GS cookie\r\nusing the appropriate R2R helper, not some hardcoded constant\r\npresumably used by the full AOT CoreRT runtime.\r\n\r\nThanks\r\n\r\nTomas","Url":"https://github.com/dotnet/corert/pull/7651","RelatedDescription":"Closed or merged PR \"Fork RyuJit and ReadyToRun version of getGSCookie\" (#7651)"},{"Id":"473050887","IsPullRequest":true,"CreatedAt":"2019-07-26T06:02:22","Actor":"MichalStrehovsky","Number":"7650","RawContent":null,"Title":"Revert \"Fix enumeration value of R2R helpers [Dbl|Flt][Rem|Round]\"","State":"closed","Body":"Reverts dotnet/corert#6779\r\n\r\nThis is so that the enum matches CoreCLR readytorun.h.","Url":"https://github.com/dotnet/corert/pull/7650","RelatedDescription":"Closed or merged PR \"Revert \"Fix enumeration value of R2R helpers [Dbl|Flt][Rem|Round]\"\" (#7650)"},{"Id":"472326257","IsPullRequest":true,"CreatedAt":"2019-07-25T07:51:34","Actor":"Dotnet-GitSync-Bot","Number":"7649","RawContent":null,"Title":"Mirror changes from dotnet/corefx","State":"closed","Body":"This PR contains mirrored changes from dotnet/corefx\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub","Url":"https://github.com/dotnet/corert/pull/7649","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corefx\" (#7649)"},{"Id":"472004492","IsPullRequest":true,"CreatedAt":"2019-07-24T02:07:47","Actor":"Dotnet-GitSync-Bot","Number":"7647","RawContent":null,"Title":"Mirror changes from dotnet/coreclr,corefx","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr,corefx\n\n\n**Please REBASE this PR when merging**\n\n cc @sywhang","Url":"https://github.com/dotnet/corert/pull/7647","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr,corefx\" (#7647)"},{"Id":"471969859","IsPullRequest":true,"CreatedAt":"2019-07-24T02:00:21","Actor":"nattress","Number":"7646","RawContent":null,"Title":"Add Linux / Mac ReadyToRun CI testing","State":"closed","Body":"* Remove Windows_NT only condition on CI R2R test leg\r\n* Use Top200 suite of CoreCLR tests since they reliably pass in R2R mode","Url":"https://github.com/dotnet/corert/pull/7646","RelatedDescription":"Closed or merged PR \"Add Linux / Mac ReadyToRun CI testing\" (#7646)"},{"Id":"471965978","IsPullRequest":true,"CreatedAt":"2019-07-23T21:35:43","Actor":"trylek","Number":"7645","RawContent":null,"Title":"CoreCLR Pri#1 fixes for the IsManagedSequential method","State":"open","Body":"This change fixes all remaining differences between CPAOT\r\nand Crossgen for the CoreCLR Pri#1 tests w.r.t. my recently\r\nimplemented IsManagedSequential instrumentation.\r\n\r\nThanks\r\n\r\nTomas","Url":"https://github.com/dotnet/corert/pull/7645","RelatedDescription":"Open PR \"CoreCLR Pri#1 fixes for the IsManagedSequential method\" (#7645)"}],"ResultType":"GitHubIssue"},"SDK-Issues":{"Issues":[{"Id":"477070233","IsPullRequest":false,"CreatedAt":"2019-08-07T22:33:41","Actor":"wli3","Number":"3508","RawContent":null,"Title":"Warning from RAR with hint path has extra new line","State":"closed","Body":"Given a hint path has extra new line. On full msbuild it will have warning:\r\n\r\n```\r\nC:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Preview\\MSBuild\\Current\\Bin\\Microsoft.Common.CurrentVersion.targets(2106,5): warning MSB3246: Resolved file has a bad image, no metada\r\nta, or is otherwise inaccessible. Illegal characters in path. [C:\\work\\temp\\notNETFrameworkLibrary2\\NETFrameworkLibrary.csproj]\r\n```\r\n\r\n- [x] Check if 16.2 has the same warning, the message might be different\r\n- [ ] core does not have that error, why?\r\n\r\n```xml\r\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <OutputType>Library</OutputType>\r\n    <RestoreAdditionalProjectSources>$(RestoreAdditionalProjectSources);https://dotnet.myget.org/F/roslyn-tools/api/v3/index.json</RestoreAdditionalProjectSources>\r\n    <TargetFramework>net472</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.NETFramework.ReferenceAssemblies\" Version=\"1.0.0-preview.2\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <Reference Include=\"System.Net.Http\">\r\n      <HintPath>\r\n      C:\\work\\sdk3\\artifacts\\tmp\\Debug\\SimpleNamesWi---6143883E\\NETFrameworkLibrary\\bin\\Debug\\net462\\NETFrameworkLibrary.dll\r\n      </HintPath>\r\n    </Reference>\r\n  </ItemGroup>\r\n</Project>\r\n```","Url":"https://github.com/dotnet/sdk/issues/3508","RelatedDescription":"Closed issue \"Warning from RAR with hint path has extra new line\" (#3508)"},{"Id":"478141934","IsPullRequest":true,"CreatedAt":"2019-08-07T21:12:51","Actor":"peterhuene","Number":"3516","RawContent":null,"Title":"Separate supported target framework into app/standard lists.","State":"open","Body":"#### Description\r\n\r\nThis commit makes the `SupportedTargetFramework` items be composed of\r\n`NETCoreApp` and `NETStandard` versions so that other SDKs, such as\r\nWindowsDesktop, can selectively remove unsupported target frameworks from these\r\nlists.\r\n\r\nFixes #3438.\r\n\t\t\r\n#### Customer Impact\r\n\r\nWithout this change, the Windows Desktop SDK cannot easily filter out unsupported target frameworks.\r\n\t\t\r\n#### Regression?\r\n\r\nNo.\r\n\t\t\r\n#### Risk\r\n\r\nLow","Url":"https://github.com/dotnet/sdk/pull/3516","RelatedDescription":"Open PR \"Separate supported target framework into app/standard lists.\" (#3516)"},{"Id":"477919088","IsPullRequest":true,"CreatedAt":"2019-08-07T13:09:15","Actor":"dotnet-maestro[bot]","Number":"3515","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:c3e20d8c-7bed-4085-8124-08d70655e1d3)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190807.1\r\n- **Date Produced**: 8/7/2019 9:50 AM\r\n- **Commit**: 4c30ef251c88b0c3343f54d4021dcd2ce7c4f860\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NET.HostModel** -> 5.0.0-alpha1.19407.1\r\n\r\n[marker]: <> (End:c3e20d8c-7bed-4085-8124-08d70655e1d3)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3515","RelatedDescription":"Open PR \"[master] Update dependencies from dotnet/core-setup\" (#3515)"},{"Id":"477887362","IsPullRequest":true,"CreatedAt":"2019-08-07T12:05:27","Actor":"dotnet-maestro[bot]","Number":"3514","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190806.7\r\n- **Date Produced**: 8/7/2019 12:08 AM\r\n- **Commit**: c155e609f88491128e1a66d09f413062f3344d4b\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19406.7\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19406.7\r\n\r\n[marker]: <> (End:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3514","RelatedDescription":"Open PR \"[master] Update dependencies from dotnet/arcade\" (#3514)"},{"Id":"477679461","IsPullRequest":true,"CreatedAt":"2019-08-07T02:50:23","Actor":"nguerrera","Number":"3513","RawContent":null,"Title":"React to removal of types in Microsoft.VisualBasic.Core.dll","State":"open","Body":"#### Description\r\nTypes are being removed from Microsoft.VisualBasic.Core.dll in https://github.com/dotnet/corefx/pull/39972 to allow them to be put in a higher layer in a future release.\r\n\r\nDisable generation of `My.*` code by default, as `My.*` cannot compile without those types.\r\n\r\n#### Customer Impact\r\nAll VB projects would fail to build without the corefx change, but not this change.  (There would be a workaround of disabling `My.* yourself, but we can't have File -> New Project -> VB fail.\r\n\r\n\r\n#### Regression?\r\nNo. This was expected fallout of removing those types.\r\n\r\n#### Risk\r\nMinimal. Tested all 11 VB .NET Core projects with this + a private drop of  https://github.com/dotnet/corefx/pull/39972 \r\n\r\n---\r\n\r\nDue to layering issues, several types that are necessary for VB My.* support are being removed from 3.0:\r\n\r\nhttps://github.com/dotnet/corefx/pull/39972\r\n\r\nFurthermore, this would cause all .NET Core 3.0 projects to fail to build without this change, which sets MyType=Empty by default to prevent the My.* code spit that would depend on these types from happening by default.\r\n\r\nNote that .NET Core 2.x is not impacted because it still uses VBRuntime=Embed, which also suppresses `My.*`. It also prevents other VB constructs from working that still work .NET Core 3.0 without these types. The test has been adapted to test some of those constructs for 3.0 instead of testing for `My.*` working.\r\n\r\nAlso fix related issue that could cause a bug or misconfigured project to result in the .NET Framework VB compiler trying to reference the .NET Framework Microsoft.VisualBasic.dll in the runtime directory instead of the resolved Microsoft.VisualBasic.dll.","Url":"https://github.com/dotnet/sdk/pull/3513","RelatedDescription":"Open PR \"React to removal of types in Microsoft.VisualBasic.Core.dll\" (#3513)"},{"Id":"477620210","IsPullRequest":false,"CreatedAt":"2019-08-06T22:22:05","Actor":"vatsan-madhavan","Number":"3512","RawContent":null,"Title":"Theme assemblies cannot be referenced from XAML in latest SDK","State":"open","Body":"@vatsan-madhavan commented on [Tue Aug 06 2019](https://github.com/dotnet/wpf/issues/1552)\r\n\r\nThis is related to #765, which primarily deals with the inability to reference theme assemblies for consumption in C#/VB etc. code. \r\n\r\nIn recent preview8 builds, XAML like this no longer builds because the WPF theme assembles are no longer referenced by default by `Microsoft.WindowsDesktop`.\r\n\r\n```XAML\r\n... xmlns:theme=\"clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Aero\"\r\n\r\n<theme:SystemDropShadowChrome>\r\n       <HeaderedContentControl Padding=\"10\" Foreground=\"#CCFFFFFF\">\r\n              <HeaderedContentControl.Header>\r\n\r\n```\r\n\r\nGiven there is no way to reference these directly at build-time,  the theme assemblies are not complete unusable. \r\n\r\nThis change was made by https://github.com/dotnet/core-setup/issues/7218, which was done in due to a miscommunication between the WPF and the SDK teams. We are working together to undo this change for .NET Core 3.0. \r\n\r\nAlso related: https://github.com/dotnet/sdk/issues/3265\r\n\r\n","Url":"https://github.com/dotnet/sdk/issues/3512","RelatedDescription":"Open issue \"Theme assemblies cannot be referenced from XAML in latest SDK\" (#3512)"},{"Id":"476666506","IsPullRequest":true,"CreatedAt":"2019-08-06T20:08:09","Actor":"wli3","Number":"3505","RawContent":null,"Title":"Need apphost in build but do not pack it","State":"closed","Body":"fix https://github.com/dotnet/sdk/issues/3023\r\n\r\n### Description\r\n\r\nApphost generation is disabled for dotnet tools to prevent the apphost from being packaged in the package. When debugging a WPF or Winforms project that has PackAsTool set to true, there is no exe generated with appropriate Windows PE bits set, because we disabled it as described above. Instead of disabling apphost generation when PackAsTool=true, SDK should generate it during build, but prevent it from being packaged in the nupkg.\r\n\r\n### Customer Impact\r\n\r\nWhen debugging an WPF or Winforms dotnet tool project (PackAsTool=true) in VS, the user would see the command line instead of the GUI. The app's GUI is not rendered and you get only a blank command prompt.\r\n\r\n### Regression?\r\n\r\nYes. This regressed from .NET Core SDK 3.0.100-preview3 due to https://github.com/dotnet/sdk/commit/3487007c6bf8316ce3c871aadbe75498ab2da7c4\r\n\r\n### Risk\r\n\r\nLow risk.\r\n\r\n### Test changes in this PR\r\n\r\nAdded new unit test coverage to ensure `RunCommand`(which VS debug calls) uses the apphost exe instead of the dll.","Url":"https://github.com/dotnet/sdk/pull/3505","RelatedDescription":"Closed or merged PR \"Need apphost in build but do not pack it\" (#3505)"},{"Id":"477085186","IsPullRequest":true,"CreatedAt":"2019-08-06T18:23:39","Actor":"peterhuene","Number":"3511","RawContent":null,"Title":"Fix publishing of applications that specify a full path to the profile.","State":"closed","Body":"#### Description\r\n\r\nWhen an application is published in Visual Studio, the full path to the publish\r\nprofile is passed as the `WebPublishProfileFile` global property.\r\n\r\nBecause the .NET Core SDK now imports the publish profile, this caused every\r\nproject referenced to also import the publish profile during restore. This may\r\nhave unintentional consequences of restoring `netstandard` projects as\r\n`netcoreapp` if a `netcoreapp` TFM is set in the publish profile, for example.\r\n\r\nHowever, during build/publish, the Web SDK is removing `WebPublishProfileFile`\r\nfrom the global properties for project references.  This causes an error due to\r\na potential mismatch between the TFM restored and the TFM being\r\nbuilt/published for dependent projects.\r\n\r\nFixes aspnet/websdk#604.\r\n\t\t\r\n#### Customer Impact\r\n\r\nCustomers will not be able to publish their .NET Core web applications that have references on projects that have a different TFM (e.g. `netstandard` libraries) from Visual Studio.\r\n\t\t\r\n#### Regression?\r\n\r\nYes.\r\n\t\t\r\n#### Risk\r\n\r\nRisk is low.\r\n\r\nThe fix is to import the publish profile only when the full path isn't set or\r\nif the project being built is the one being published (i.e. the project to\r\noverride project extensions for).","Url":"https://github.com/dotnet/sdk/pull/3511","RelatedDescription":"Closed or merged PR \"Fix publishing of applications that specify a full path to the profile.\" (#3511)"},{"Id":"476393427","IsPullRequest":true,"CreatedAt":"2019-08-06T18:23:24","Actor":"peterhuene","Number":"3500","RawContent":null,"Title":"Retry apphost creation. ","State":"closed","Body":"#### Description\r\n\r\nThis PR implements a parameterized retry count for creating the apphost.\r\n\r\nLike the `Copy` task from MSBuild, the `CreateAppHost` task now takes a\r\nparameter to specify the number of retries and the delay between retries (in\r\nmilliseconds) to perform if the creation fails.\r\n\r\nThis should help alleviate build failures when external processes are locking\r\nthe intermediate apphost during a build (especially on Windows).\r\n\r\nFixes [AB#950462](https://devdiv.visualstudio.com/0bdbc590-a062-4c3f-b0f6-9383f67865ee/_workitems/edit/950462).\r\nFixes dotnet/cli#11650.\r\n\t\t\r\n#### Customer Impact\r\n\r\nSome users are running into an issue where an external application has the intermediate apphost exclusively locked.  This change helps mitigate the issue by retrying the apphost modification a configurable number of times.\r\n\t\t\r\n#### Regression?\r\n\r\nNo.\r\n\t\t\r\n#### Risk\r\n\r\nLow.\r\n","Url":"https://github.com/dotnet/sdk/pull/3500","RelatedDescription":"Closed or merged PR \"Retry apphost creation. \" (#3500)"},{"Id":"474566203","IsPullRequest":true,"CreatedAt":"2019-08-06T17:37:25","Actor":"dotnet-maestro[bot]","Number":"3487","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:c3e20d8c-7bed-4085-8124-08d70655e1d3)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190805.9\r\n- **Date Produced**: 8/5/2019 10:41 PM\r\n- **Commit**: 490c40397e4645cf0c47e528466b6d4a301cc04c\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NET.HostModel** -> 5.0.0-alpha1.19405.9\r\n\r\n[marker]: <> (End:c3e20d8c-7bed-4085-8124-08d70655e1d3)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3487","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#3487)"},{"Id":"476146474","IsPullRequest":true,"CreatedAt":"2019-08-06T17:37:03","Actor":"dotnet-maestro[bot]","Number":"3498","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190805.9\r\n- **Date Produced**: 8/6/2019 12:26 AM\r\n- **Commit**: 44ccf0f527de559b07f9ad955a47ec97f03f2146\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19405.9\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19405.9\r\n\r\n[marker]: <> (End:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3498","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#3498)"},{"Id":"477060930","IsPullRequest":true,"CreatedAt":"2019-08-06T03:58:51","Actor":"dotnet-maestro[bot]","Number":"3507","RawContent":null,"Title":"[release/3.0.100-preview8] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:0e68ca02-619f-4dab-d003-08d7114cdbad)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190805.07\r\n- **Date Produced**: 8/5/2019 9:13 PM\r\n- **Commit**: d01b2fb7bc6bd4911e157fbd51353059a3ba1a6c\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.NET.HostModel** -> 3.0.0-preview8-28405-07\r\n\r\n[marker]: <> (End:0e68ca02-619f-4dab-d003-08d7114cdbad)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3507","RelatedDescription":"Closed or merged PR \"[release/3.0.100-preview8] Update dependencies from dotnet/core-setup\" (#3507)"},{"Id":"477071789","IsPullRequest":true,"CreatedAt":"2019-08-05T23:44:49","Actor":"wli3","Number":"3509","RawContent":null,"Title":"Change the assertion to not to catch the RAR warning","State":"closed","Body":"It is intent to catch the warning from Conflict Resolution.\r\n\r\nContinue investigation on why RAR start to have such warning in https://github.com/dotnet/sdk/issues/3508\r\n\r\n### Description\r\n\r\n The test is blocking any SDK PR. `It_tolerates_newline_in_hint_path` is intended to prevent regression of \"crash in conflict resolution when hintpath has new line\". However, due to a msbuild change, the RAR warning also has the same partial text the test asserts on.\r\n\r\n### Customer Impact\r\n\r\nno\r\n\r\n### Regression?\r\n\r\nno\r\n\r\n### Risk\r\n\r\nLow risk.\r\n\r\n### Test changes in this PR\r\n\r\nN/A","Url":"https://github.com/dotnet/sdk/pull/3509","RelatedDescription":"Closed or merged PR \"Change the assertion to not to catch the RAR warning\" (#3509)"},{"Id":"477073127","IsPullRequest":false,"CreatedAt":"2019-08-05T21:48:06","Actor":"fadimounir","Number":"3510","RawContent":null,"Title":"Double writes on publish, causes R2R task failure","State":"open","Body":"I don't know if this is related to #3257, but I was able to repro this issue again using the latest Preview9 bits (8e9948a3b768811ca5b3a666ff06207a16be69ec, 3.0.100-preview9-013692).\r\n\r\nHere's the repro:\r\n1) clone https://github.com/aspnet/Benchmarks (commit hash for repro: 3ddf6558ec4d3636dc8fec4f0c142834ffa38bf5)\r\n2) dotnet publish  -f netcoreapp3.0 -r win-x64 -v n src\\BenchmarksServer  /bl\r\n\r\nThere are 3 files double-written:\r\n- Dia2Lib.dll\r\n- TraceReloggerLib.dll\r\n- OSExtensions.dll.\r\n\r\nI'll attach the binlog.\r\n\r\nAlso, this causes the R2R task to fail with errors like this one, if you add /p:PublishReadyToRun=true to the publish command:\r\n```console\r\ne:\\dotnet_preview9\\sdk\\3.0.100-preview9-013692\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Publish.targets(308,28): error MSB4094: \"C:\\Users\\fadim\\.nuget\\packages\\microsoft.diagnostics.tracing.traceevent\\2.0.44\\lib\\netstandard1.6\\OSExtensions.dll;C:\\Users\\fadim\\.nuget\\packages\\microsoft.diagnostics.tracing.traceevent\\2.0.44\\lib\\netstandard2.0\\OSExtensions.dll\" is an invalid value for the \"CompilationEntry\" parameter of the \"RunReadyToRunCompiler\" task. Multiple items cannot be passed into a parameter of type \"Microsoft.Build.Framework.ITaskItem\". [D:\\GIT\\Benchmarks\\src\\BenchmarksServer\\BenchmarksServer.csproj]\r\n```","Url":"https://github.com/dotnet/sdk/issues/3510","RelatedDescription":"Open issue \"Double writes on publish, causes R2R task failure\" (#3510)"},{"Id":"476972296","IsPullRequest":true,"CreatedAt":"2019-08-05T17:23:03","Actor":"jkoritzinsky","Number":"3506","RawContent":null,"Title":"Emit progid information into the CLSIDMap.","State":"open","Body":"This is the SDK-side of the work for https://github.com/dotnet/core-setup/pull/7551. These PRs allow users to activate .NET classes via COM using ProgIDs instead of CLSIDs for languages or platforms that do not support using CLSIDs.\r\n\r\nAdditionally, fixes a bug that would cause loading nested classes via COM to fail to find the type.\r\n\r\nContributes to dotnet/coreclr#25966\r\n\r\nThis PR doesn't need to wait for dotnet/core-setup#7551 to go in since the changes are backward compatible with previous versions of the COM host that don't have ProgID support.\r\n\r\ncc: @nguerrera \r\n\r\n================================\r\n\r\n#### Description\r\nAdd support for generating .cslidmaps with ProgIDs for com registration. See dotnet/core-setup#7573 for the host work. This PR also fixes a bug that breaks loading nested types via COM.\r\n\r\n#### Customer Impact\r\nWithout this support consumption of COM classes in languages that don't have `GUID` support is impossible.\r\n\r\nAdditionally, without the fix for nested types, it is impossible to activate a nested type via COM on .NET Core.\r\n\r\nFixes: dotnet/coreclr#25966\r\nRelated: https://github.com/dotnet/coreclr/issues/25946\r\n\r\n#### Regression?\r\nCOM support is new in 3.0 so this is not a regression from a previous .NET Core release, but is a regression in COM support from .NET Framework using the `RegAsm` tool.\r\n\r\n#### Risk\r\nMinimal. Unused information in the clsidmap such as ProgId information is ignored in previous previews of .NET Core.","Url":"https://github.com/dotnet/sdk/pull/3506","RelatedDescription":"Open PR \"Emit progid information into the CLSIDMap.\" (#3506)"},{"Id":"476589815","IsPullRequest":false,"CreatedAt":"2019-08-04T20:17:24","Actor":"nguerrera","Number":"3504","RawContent":null,"Title":"Defensively set DisableSdkPath=true for non .NET framework VB projects","State":"open","Body":"Generally, this is benign, because we pass VBRuntime which will override the SDK path, but if there is a bug or other misconfiguration, the compiler will try to locate the SDK Path using the current runtime. This causes it to try to use Microsoft.VisualBasic.dll from the .NET framework while building against core, and leads to confounding errors such as \r\n\r\n```\r\nvbc error BC30560: 'User' is ambiguous in the namespace 'Microsoft.VisualBasic.ApplicationServices'. [C:\\Users\\nicholg\\Source\\repos\\WpfControlLibrary2\\WpfControlLibrary2\\WpfControlLibrary2.vbproj]\r\n```\r\n\r\nWithout the fix for https://github.com/dotnet/sdk/issues/3450, you get errors like above with `msbuild` instead of the \"Could not find library Microsoft.VisualBasic.dll\" that was reported for `dotnet bulild`.\r\n\r\nWe should make a defensive change to set DisableSdkPath=true so that the symptom for any failure to find the correct vb runtime is consistently cannot find Microsoft.VisualBasic.dll regardless of which compiler (.NET Core or desktop) is used.\r\n\r\nThis is not a blocking issue, though, as it changes the error symptoms only when the product has other bugs or the project has been misconfigured.\r\n\r\nRelated to https://dev.azure.com/devdiv/DevDiv/_workitems/edit/960757","Url":"https://github.com/dotnet/sdk/issues/3504","RelatedDescription":"Open issue \"Defensively set DisableSdkPath=true for non .NET framework VB projects\" (#3504)"},{"Id":"475397200","IsPullRequest":false,"CreatedAt":"2019-08-03T21:53:55","Actor":"sebastienros","Number":"3496","RawContent":null,"Title":"ResolveAssemblyReference returns 3.0 assemblies when 5.0 is requested","State":"closed","Body":"I have a project where I try to use the latest 5.0 branded aspnet core. I use a `FrameworkReference` update to do so. The machine has the latest sdk (5.0.x) and the latest aspnet core shared runtimes 3.0.x and 5.0.x.\r\n\r\nAt compilation I get this:\r\n\r\n```\r\nStartup.cs(188,21): error CS1705: Assembly 'Microsoft.AspNetCore.Mvc.NewtonsoftJson' with identity 'Microsoft.AspNetCore.Mvc.NewtonsoftJson, Version=5.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60' uses 'Microsoft.AspNetCore.Mvc.Core, Version=5.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60' which has a higher version than referenced assembly 'Microsoft.AspNetCore.Mvc.Core' with identity 'Microsoft.AspNetCore.Mvc.Core, Version=3.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60' [/tmp/BenchmarksServer/43sztvs0.trd/benchmarks/src/Benchmarks/Benchmarks.csproj]\r\nProgram.cs(117,21): error CS1705: Assembly 'Microsoft.AspNetCore.Server.Kestrel.Transport.Libuv' with identity 'Microsoft.AspNetCore.Server.Kestrel.Transport.Libuv, Version=5.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60' uses 'Microsoft.AspNetCore.Hosting.Abstractions, Version=5.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60' which has a higher version than referenced assembly 'Microsoft.AspNetCore.Hosting.Abstractions' with identity 'Microsoft.AspNetCore.Hosting.Abstractions, Version=3.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60' [/tmp/BenchmarksServer/43sztvs0.trd/benchmarks/src/Benchmarks/Benchmarks.csproj]\r\n```\r\n\r\nThe .binlog shows that `ResolveAssemblyReference` is returning these conflicting assemblies where it should instead pick them from the 5.0.x folder.\r\n\r\n[msbuild.binlog.zip](https://github.com/dotnet/sdk/files/3454241/msbuild.binlog.zip)\r\n\r\nRename the file by removing the .zip extension, don't extract it (GH limitation)\r\n","Url":"https://github.com/dotnet/sdk/issues/3496","RelatedDescription":"Closed issue \"ResolveAssemblyReference returns 3.0 assemblies when 5.0 is requested\" (#3496)"},{"Id":"476449692","IsPullRequest":true,"CreatedAt":"2019-08-03T12:59:37","Actor":"dotnet-maestro[bot]","Number":"3503","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:c3e20d8c-7bed-4085-8124-08d70655e1d3)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190807.1\r\n- **Date Produced**: 8/7/2019 9:50 AM\r\n- **Commit**: 4c30ef251c88b0c3343f54d4021dcd2ce7c4f860\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NET.HostModel** -> 5.0.0-alpha1.19407.1\r\n\r\n[marker]: <> (End:c3e20d8c-7bed-4085-8124-08d70655e1d3)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3503","RelatedDescription":"Open PR \"[master] Update dependencies from dotnet/core-setup\" (#3503)"},{"Id":"476445375","IsPullRequest":true,"CreatedAt":"2019-08-03T12:04:51","Actor":"dotnet-maestro[bot]","Number":"3502","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190806.7\r\n- **Date Produced**: 8/7/2019 12:08 AM\r\n- **Commit**: c155e609f88491128e1a66d09f413062f3344d4b\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19406.7\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19406.7\r\n\r\n[marker]: <> (End:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3502","RelatedDescription":"Open PR \"[master] Update dependencies from dotnet/arcade\" (#3502)"},{"Id":"476418956","IsPullRequest":true,"CreatedAt":"2019-08-03T05:44:40","Actor":"nguerrera","Number":"3501","RawContent":null,"Title":"Removed outdated, commented out code","State":"open","Body":"Fixing small things that distracted me while doing https://github.com/dotnet/core-sdk/pull/3741\r\n\r\nSubmitting for P9 consideration as I'd prefer not to stay confused by this for the lifetime of 3.0","Url":"https://github.com/dotnet/sdk/pull/3501","RelatedDescription":"Open PR \"Removed outdated, commented out code\" (#3501)"},{"Id":"476341414","IsPullRequest":false,"CreatedAt":"2019-08-02T20:20:33","Actor":"nguerrera","Number":"3499","RawContent":null,"Title":"Redundant PackageName and NuGetPackageId metadata","State":"open","Body":"There's a mix of checking PackageName and NuGetPackageId in the targets and now we seem to be setting both all the time in ResolvePackageAssets.\r\n\r\nI actually trimmed down the metadata in 2.1 to stop doing this, but it crept back in c7549ffe\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/sdk/issues/3499","RelatedDescription":"Open issue \"Redundant PackageName and NuGetPackageId metadata\" (#3499)"},{"Id":"475644278","IsPullRequest":true,"CreatedAt":"2019-08-01T14:11:23","Actor":"dotnet-maestro[bot]","Number":"3497","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190731.19\r\n- **Date Produced**: 8/1/2019 12:27 AM\r\n- **Commit**: 48787606d809963cc800151cbfbefe0a74ae74b4\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19381.19\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19381.19\r\n\r\n[marker]: <> (End:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3497","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#3497)"},{"Id":"475349038","IsPullRequest":true,"CreatedAt":"2019-08-01T03:37:28","Actor":"nugetlurker","Number":"3494","RawContent":null,"Title":"Insert NuGet Build 5.3.0-preview.2.6136 into sdk","State":"closed","Body":"Insert NuGet Build 5.3.0-preview.2.6136 into sdk release/3.0.100-preview8 branch","Url":"https://github.com/dotnet/sdk/pull/3494","RelatedDescription":"Closed or merged PR \"Insert NuGet Build 5.3.0-preview.2.6136 into sdk\" (#3494)"},{"Id":"475361769","IsPullRequest":false,"CreatedAt":"2019-07-31T21:17:43","Actor":"nguerrera","Number":"3495","RawContent":null,"Title":"Inclusion of runtime graph for all TFMs causes existing .NET Framework projects to turn x86","State":"open","Body":"So, it seems that giving the runtime graph to nuget for all TFMs is actually a pretty severe breaking change for .NET Framework in some cases.\r\n\r\nRoslyn builds with preview 8 (maybe 7, not sure when the rid graph change landed) will switch the .NET Framework csc.exe, vbc.exe, VBCSCompiler.exe to x86 from Any CPU.\r\n\r\nThis happens because they have a ref to Microsoft.DiasymReader.Native which has runtimes/win-x86 assets. The design for .NET Framework is that when we find RID-specific assets AND there is no explicit AnyCPU and no explicit RID, then we take the win7-x86 assets and use PlatformTarget=x86. \r\n\r\n(I regret this design, but that is the design since 1.0 SDK. It was done so that .NET Framework ASP.NET Core projects could consume libuv without setting a RID or PlatformTarget. Project.json just picked the RID of the current machine, which was worse as you get different apps on different machines. We tried to make it an error and say you had to pick a PlatformTarget or RID on .NET Framework exes, but there was a ton of complaints about it and we landed on the design described above by compromise.)\r\n\r\nThe thing is that we use win7-x86, but without a RID graph, we/NuGet don't know that win-x86 assets are applicable to win7-x86. Now that we have the RID graph always, we discover these win-x86 assets for the first time and the (regrettable) design actually kicks in.\r\n\r\nMy suggestion to avoid a breaking change here is to not pass the RID graph by default for TFMs that are not .NET Core 3.0+ or .NET Standard 2.1+. We can put it behind an opt-in for other TFMs.\r\n\r\nSeparately, roslyn should explicitly set Any CPU defensively so that they are not sensitive to which SDK is used to build them.\r\n\r\ncc @jaredpar @dsplaisted ","Url":"https://github.com/dotnet/sdk/issues/3495","RelatedDescription":"Open issue \"Inclusion of runtime graph for all TFMs causes existing .NET Framework projects to turn x86\" (#3495)"},{"Id":"474566979","IsPullRequest":true,"CreatedAt":"2019-07-31T20:00:57","Actor":"dotnet-maestro[bot]","Number":"3488","RawContent":null,"Title":"[release/3.0.1xx] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee7760b1-2875-4869-d002-08d7114cdbad)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190729.05\r\n- **Date Produced**: 7/29/2019 3:24 PM\r\n- **Commit**: d15a0adeb874801e7bfaa4fbbb306a2efa268497\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.NET.HostModel** -> 3.0.0-preview8-28379-05\r\n\r\n[marker]: <> (End:ee7760b1-2875-4869-d002-08d7114cdbad)\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3488","RelatedDescription":"Closed or merged PR \"[release/3.0.1xx] Update dependencies from dotnet/core-setup\" (#3488)"},{"Id":"475103999","IsPullRequest":true,"CreatedAt":"2019-07-31T15:57:53","Actor":"dotnet-maestro[bot]","Number":"3493","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190730.3\r\n- **Date Produced**: 7/30/2019 6:57 PM\r\n- **Commit**: def377f94747dac91482aad67b33a1c011ffc770\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19380.3\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19380.3\r\n\r\n[marker]: <> (End:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3493","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#3493)"},{"Id":"474677142","IsPullRequest":true,"CreatedAt":"2019-07-30T23:33:44","Actor":"dotnet-maestro[bot]","Number":"3491","RawContent":null,"Title":"[release/3.0.100-preview8] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:0e68ca02-619f-4dab-d003-08d7114cdbad)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190730.08\r\n- **Date Produced**: 7/30/2019 7:48 PM\r\n- **Commit**: c855ac718789051d5d67282c88decca445de7711\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.NET.HostModel** -> 3.0.0-preview8-28380-08\r\n\r\n[marker]: <> (End:0e68ca02-619f-4dab-d003-08d7114cdbad)\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3491","RelatedDescription":"Closed or merged PR \"[release/3.0.100-preview8] Update dependencies from dotnet/core-setup\" (#3491)"},{"Id":"474614791","IsPullRequest":false,"CreatedAt":"2019-07-30T22:18:15","Actor":"JohanLarsson","Number":"3489","RawContent":null,"Title":"Pack when referencing Microsoft.CodeAnalysis.CSharp generates exclude=\"Build,Analyzers\"","State":"closed","Body":"Repro steps:\r\n\r\n1. New project:\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <TargetFramework>netstandard1.3</TargetFramework>\r\n  </PropertyGroup>\r\n\r\n  <PropertyGroup>\r\n    <Version>0.1.0-dev</Version>\r\n    <Authors>Author</Authors>\r\n    <Description>Descriptor</Description>\r\n    <NeutralLanguage>en</NeutralLanguage>\r\n    <GeneratePackageOnBuild>true</GeneratePackageOnBuild>\r\n    <PackageLicenseExpression>MIT</PackageLicenseExpression>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.CodeAnalysis.CSharp\" Version=\"2.3.1\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\n2. Build in VS\r\n3. Check created package.\r\n\r\n```xml\r\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<package xmlns=\"http://schemas.microsoft.com/packaging/2012/06/nuspec.xsd\">\r\n  <metadata>\r\n    <id>PackRepro</id>\r\n    <version>0.1.0-dev</version>\r\n    <authors>Author</authors>\r\n    <owners>Author</owners>\r\n    <requireLicenseAcceptance>false</requireLicenseAcceptance>\r\n    <license type=\"expression\">MIT</license>\r\n    <description>Descriptor</description>\r\n    <dependencies>\r\n      <group targetFramework=\".NETStandard1.3\">\r\n        <dependency id=\"Microsoft.CodeAnalysis.CSharp\" version=\"2.3.1\" exclude=\"Build,Analyzers\" />\r\n        <dependency id=\"NETStandard.Library\" version=\"1.6.1\" exclude=\"Build,Analyzers\" />\r\n      </group>\r\n    </dependencies>\r\n  </metadata>\r\n</package>\r\n```\r\n\r\nI tried `<PackageReference Include=\"Microsoft.CodeAnalysis.CSharp\" Version=\"2.3.1\" PrivateAssets=\"none\"/>` but it did not have any effect.\r\n\r\nIs there a way to pack this so that analyzers are not excluded?\r\nIs there documentation about this?","Url":"https://github.com/dotnet/sdk/issues/3489","RelatedDescription":"Closed issue \"Pack when referencing Microsoft.CodeAnalysis.CSharp generates exclude=\"Build,Analyzers\"\" (#3489)"},{"Id":"474858582","IsPullRequest":false,"CreatedAt":"2019-07-30T18:57:29","Actor":"davidmatson","Number":"3492","RawContent":null,"Title":"When using new-style csproj with .NET Framework, the default TargetPlatform is x86 rather than AnyCPU","State":"open","Body":"**Visual Studio Version**:\r\n2019 (16.2.0)\r\n\r\n**Summary**:\r\nWhen using the new-style (CPS?) csproj but targeting .NET Framework, the default TargetPlatform is differe than either .NET Core or old-style .NET Framework csprojs (x86 rather than AnyCPU).\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. File -> New -> Project -> .NET Core exe\r\n\r\n2. Unload the csproj and replace the target framework line with: ```<TargetFramework>net472</TargetFramework>```\r\n\r\n3. Releoad the project and check its properties\r\n\r\n**Expected Behavior**:\r\nTarget platform in AnyCPU.\r\n\r\n**Actual Behavior**:\r\nTarget platform is x86.\r\n\r\n**User Impact**:\r\nConfusing behavior when restoring NuGet packages, and inconsistency with all other C# project variants.","Url":"https://github.com/dotnet/sdk/issues/3492","RelatedDescription":"Open issue \"When using new-style csproj with .NET Framework, the default TargetPlatform is x86 rather than AnyCPU\" (#3492)"},{"Id":"474626403","IsPullRequest":false,"CreatedAt":"2019-07-30T14:40:37","Actor":"JohanLarsson","Number":"3490","RawContent":null,"Title":"Pack without explicit NETStandard.Library dependency","State":"open","Body":"Repro steps:\r\n1. New project:\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <TargetFramework>netstandard1.3</TargetFramework>\r\n  </PropertyGroup>\r\n\r\n  <PropertyGroup>\r\n    <Version>0.1.0-dev</Version>\r\n    <Authors>Author</Authors>\r\n    <Description>Descriptor</Description>\r\n    <NeutralLanguage>en</NeutralLanguage>\r\n    <GeneratePackageOnBuild>true</GeneratePackageOnBuild>\r\n    <PackageLicenseExpression>MIT</PackageLicenseExpression>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.CodeAnalysis.CSharp\" Version=\"2.3.1\" PrivateAssets=\"none\"/>\r\n    <PackageReference Update=\"NETStandard.Library\" PrivateAssets=\"all\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\n2. Build in VS\r\n3. Inspect package:\r\n\r\n```xml\r\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<package xmlns=\"http://schemas.microsoft.com/packaging/2012/06/nuspec.xsd\">\r\n  <metadata>\r\n    <id>PackRepro</id>\r\n    <version>0.1.0-dev</version>\r\n    <authors>Author</authors>\r\n    <owners>Author</owners>\r\n    <requireLicenseAcceptance>false</requireLicenseAcceptance>\r\n    <license type=\"expression\">MIT</license>\r\n    <description>Descriptor</description>\r\n    <dependencies>\r\n      <group targetFramework=\".NETStandard1.3\">\r\n        <dependency id=\"Microsoft.CodeAnalysis.CSharp\" version=\"2.3.1\" exclude=\"Build,Analyzers\" />\r\n        <dependency id=\"NETStandard.Library\" version=\"1.6.1\" exclude=\"Build,Analyzers\" />\r\n      </group>\r\n    </dependencies>\r\n  </metadata>\r\n</package>\r\n```","Url":"https://github.com/dotnet/sdk/issues/3490","RelatedDescription":"Open issue \"Pack without explicit NETStandard.Library dependency\" (#3490)"}],"ResultType":"GitHubIssue"},"Announcements-Issues":{"Issues":[{"Id":"470434872","IsPullRequest":false,"CreatedAt":"2019-07-19T16:54:02","Actor":"richlander","Number":"118","RawContent":null,"Title":".NET Core master branches have switched to \"5.0\"","State":"open","Body":"# .NET Core master branches have switched to \"5.0\"\r\n\r\nVarious .NET Core repos have switched their `master` branches to \"5.0\", and will use 3.x branches for 3.0 and 3.1 projects. This is very similar to how we approached 2.x and 3.0 projects. As context, `master` branches produced 3.0 builds for the entire period of the 2.2 project.\r\n\r\nAt present, this change is only relevant if you contribute to .NET Core repositories. Otherwise, we recommend that you wait for the 5.0 Preview releases before installing this new version.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n[dotnet/core #3059](https://github.com/dotnet/core/issues/3059)\r\n\r\n## Details\r\n\r\nThe following repos have moved their master branches to \"5.0\":\r\n\r\n- [dotnet/coreclr](https://github.com/dotnet/coreclr)\r\n- [dotnet/corefx](https://github.com/dotnet/corefx)\r\n- [dotnet/core-setup](https://github.com/dotnet/core-setup)\r\n\r\nYou can see that [5.0 .NET Core Runtime builds](https://github.com/dotnet/core-setup#daily-builds) are now being built and published at dotnet/core-setup.\r\n\r\nIn large part, we switched `master` to 5.0 to enable to the community to contribute changes. As the .NET Core 3.0 released has progressed, we've had to increase scrutiny on the changes we will accept. Now that we've permanently branched for 3.0, we can accept a much broader set of changes. Please consider that to be an open invitation!\r\n\r\nNotably, [dotnet/core-sdk](https://github.com/dotnet/core-sdk) is not yet producing 5.0 builds. We expect that the dotnet/core-sdk master branch will continue as a 3.0 branch for 2-3 months while we finish up the .NET Core 3.0 project.\r\n\r\nAt present, there is no developer experience for 5.0. We are waiting on the dotnet/core-sdk repo to switch to 5.0. Switching your project file to target `netcoreapp5.0` won't do anything useful. We'll update this issue when a 5.0 SDK comes available.","Url":"https://github.com/dotnet/announcements/issues/118","RelatedDescription":"Open issue \".NET Core master branches have switched to \"5.0\"\" (#118)"},{"Id":"465501070","IsPullRequest":false,"CreatedAt":"2019-07-08T23:25:31","Actor":"terrajobst","Number":"117","RawContent":null,"Title":"System.Text.Json usability study results","State":"open","Body":"We've performed a usability study on the new `System.Text.Json` APIs which will replace JSON.NET as the default JSON experience in .NET Core 3.0:\r\n\r\n* We focused on the primary \"getting started\" scenarios to validate that we picked the right type- and method names.\r\n* We simulated what we believe to be common error cases to validate that our exception messages are understandable and actionable.\r\n* Since we were short on time, we couldn't use the recruiting provided by the UX lab but instead brought in our own developers, which we recruited from the .NET engineering team\r\n\r\nThis has worked out well for us as we were able to get short term feedback which resulted in significant improvements to the overall API shape and usability. In the future, we should do more API focused UX studies 😊\r\n\r\n## Tasks\r\n\r\n| # | Description                            | Code\r\n|:--|:---------------------------------------|:-----\r\n| 1 | Serialize and pretty print             | [Link](https://github.com/ahsonkhan/JsonUxStudy/blob/master/UxScenarios/Scenario1/Program.cs#L19-L31)\r\n| 2 | Deserialize with trailing comma        | [Link](https://github.com/ahsonkhan/JsonUxStudy/blob/master/UxScenarios/Scenario2/Program.cs#L19-L25)\r\n| 3 | Deserialize with custom property names | [Link](https://github.com/ahsonkhan/JsonUxStudy/blob/master/UxScenarios/Scenario3/Program.cs#L30-L45)\r\n| 4 | Read with DOM                          | [Link](https://github.com/ahsonkhan/JsonUxStudy/blob/master/UxScenarios/Scenario4/Program.cs#L20-L35)\r\n| 5 | Pretty print an existing JSON file     | [Link](https://github.com/ahsonkhan/JsonUxStudy/blob/master/UxScenarios/Scenario5/Program.cs#L26-L34)\r\n\r\n## Hypotheses\r\n\r\nWe expect developers to...\r\n\r\n| # | Description                                            | Result\r\n|:--|:-------------------------------------------------------|:---------------\r\n| 1 | ...assume the APIs are similar/identical to JSON.NET   |  Validated\r\n| 2 | ...complete tasks 1-4 successfully                     |  Validated\r\n| 3 | ...struggle/unable to complete the task 5, because it requires working with two different components which is very different from JSON.NET |  Invalidated\r\n| 4 | ...not look at documentation for most of their coding as IntelliSense is good enough |  Invalidated\r\n| 5 | ...be happy with the experience of using the API                                     |  Validated\r\n| 6 | ...plan on using `System.Text.Json` for their next JSON task                         |  Partially Validated\r\n\r\n##  Key Observations\r\n\r\n* Everyone completed scenarios #1-#3, 2 didn't complete #4, 6 didn't complete #5\r\n    - The reason was always \"out of time\". Every person who started a scenario successfully finished it.\r\n    - We feel this validates that we picked the right scope for a 60 minute study of people from various backgrounds\r\n* Overall people liked the new API\r\n    - Key value prop for most people was the fact that \"it's now built in\"\r\n    - Very few mentioned perf and the ones that did thought that it probably wouldn't make a difference in their scenarios.\r\n    - Most people said they would prefer `System.Text.Json` for new APIs, but would stick to JSON.NET in code that already uses it.\r\n    - **[Action]** None, this is in line with what we expected.\r\n* Virtually everyone tried to google for sample code in the documentation\r\n    - Everyone found our blog post and online documentation\r\n    - People new to .NET were confused that JSON.NET and `System.Text.Json` weren't the same thing\r\n    - Everyone complained that the current docs are lacking, especially sample code.\r\n    - **[Action]** Docs are work in progress. We plan on shipping with a fully documented API surface and sample code.\r\n* Virtually everyone found the key type relatively quickly\r\n    - Some people were confused when types were static, rather than something that one can new up\r\n    - **[Action]** None. This is by-design as we try to reduce the number of allocations.\r\n* Virtually everyone had trouble selecting the correct method on\r\n  `JsonSerializer`\r\n    - We chose a very complicated naming convention\r\n    - **[Action]** We simplified it by using names that people in the study told us were looking for.\r\n* Most of our error messages were well received because they told people what\r\n  the problem is & how they can fix them.\r\n    - One error message was unclear because we reported an unexpected character when we could have reported that we didn't expect a comment.\r\n    - **[Action]** We've reworded the error message.\r\n    - We had one error message that was generated by a lower layer and provided an action item that doesn't make sense when people receive it when using the higher layer component.\r\n    - **[Action]** We've reworded the error message to be more generic so it makes sense for both kind of consumers.\r\n* Virtually everyone used the new Roslyn completion feature which will also show\r\n  types from namespaces not imported yet.\r\n    - However, virtually nobody realized that they were doing it.\r\n    - This caused confusion when people found other APIs that happen to include Json in them, specifically the old data contract serialization.\r\n    - **[Action]** Talk to the Roslyn IDE team to see if this something more people will run into. This could prove to be especially problematic for technologies that share type names (e.g. `UserControl` in WinForms and WPF) and both are referenced by the project.\r\n* Optional parameters and `async`/`await` are usability cliffs\r\n    - Many were confused by optional parameters and tried to pass them in, even though they didn't have to.\r\n    - **[Action]** Talk to the Roslyn IDE team to see if we can visualize them better in VS.\r\n    - **[Action]** Try to avoid heavy use of optional parameters for mainline APIs.\r\n    - Async is a very steep cliff. People have no idea what to do in their code to make async work. While IntelliSense shows the usage by prefixing it with await, people didn't notice that.\r\n    - **[Action]** Unclear; this is a broader issue.\r\n* Virtually nobody used F1 to get help for APIs\r\n    - *Surprise*. I expected more people to use <kbd>F1</kbd>.\r\n* Virtually everyone used F12 to explore the API (\"metadata view\")\r\n    - *Surprise*. I expected most people to explore the type via the\r\n      IntelliSense completion\r\n* Nobody used Object Browser to explorer the APIs\r\n    - *Surprise*. I expected at least some people to.\r\n\r\n## Discussion\r\n\r\nFor a discussion, please go to https://github.com/dotnet/corefx/issues/39304.","Url":"https://github.com/dotnet/announcements/issues/117","RelatedDescription":"Open issue \"System.Text.Json usability study results\" (#117)"},{"Id":"465034831","IsPullRequest":false,"CreatedAt":"2019-07-08T03:13:38","Actor":"leecow","Number":"116","RawContent":null,"Title":"Updates to releases.json (.NET Core release metadata)","State":"open","Body":"**The changes described in this issue will be live with the .NET Core July update on 7/9/2019.**\r\n\r\nThe releases.json files (e.g. [2.2 releases.json](https://raw.githubusercontent.com/dotnet/core/master/release-notes/2.2/releases.json)) are comprehensive metadata files which capture details of each .NET Core release. These files, along with the top level [releases-index.json](https://raw.githubusercontent.com/dotnet/core/master/release-notes/releases-index.json), are becoming increasingly important .NET Core release assets. These files, one for each major.minor channel, are relied upon by many to detect when updates for .NET Core are available, discover security update details and other uses.\r\n\r\nChanges are sometimes necessary, and the growing dependencies require that we treat compatibility of the schema with the utmost care. This announcement describes an addition to the releases.json schema.\r\n\r\n## SDK Versions and Visual Studio\r\n\r\nBecause of current .NET Core SDK product construction dependencies, there is a hard link between the Runtime, SDK, toolset (compilers, MSBuild, NuGet, and other components), and Visual Studio. Simplistically, this means that when anything updates, everything updates. The unfortunate result of this linking is that multiple versions of the SDK are released with each monthly update for each supported versions of Visual Studio. For example, the May Update for .NET Core 2.2 included the 2.2.5 runtime, 2.2.107 SDK for Visual Studio 2017 and 2.2.204 for Visual Studio 2019 and yet another pair of SDK versions for .NET Core 2.1. An example of this is the [2.2.5 Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.5/2.2.5.md). \r\n\r\nThis is a confusing situation and we are working to mitigate the need to release multiple SDKs with .NET Core 3.0. The need for multiple SDK versions will persist for 2.1 LTS.\r\n\r\n## Adding the SDKS array\r\n\r\nTo appropriately model multiple SDKs per release, we are adding an SDKs array to releases.json, which will contain SDK objects. The top-level SDK object will represent the highest versioned SDK for a given update. Using the previous 2.2.5 update example, SDK 2.2.204 is in the top SDK object as well as duplicated in the SDKS array. All other applicable 2.2* SDK objects are included in the SDKS array. The SDK objects within the array will carry specific Visual Studio compatibility and version inclusion information to provide appropriate context.\r\n\r\nHere is an example of the new array based on the upcoming July update.\r\nAgain, this will be additive and the previous SDK object will include the highest SDK version for the release.\r\n\r\n```json\r\n{\r\n    \"sdk\": {\r\n        \"version\": \"2.2.301\",\r\n        \"version-display\": \"2.2.301\",\r\n        \"runtime-version\": \"2.2.6\",\r\n        \"vs-version\": \"16.1.3\",\r\n        \"vs-support\": \"Visual Studio 2019 (v16.1)\",\r\n        \"csharp-version\": \"7.3\",\r\n        \"fsharp-version\": \"4.5\",\r\n        \"vb-version\": null,\r\n        \"files\": []\r\n    },\r\n    \"sdks\": [\r\n        {\r\n            \"version\": \"2.2.301\",\r\n            \"version-display\": \"2.2.301\",\r\n            \"runtime-version\": \"2.2.6\",\r\n            \"vs-version\": \"16.1.3\",\r\n            \"vs-support\": \"Visual Studio 2019 (v16.1)\",\r\n            \"csharp-version\": \"7.3\",\r\n            \"fsharp-version\": \"4.5\",\r\n            \"vb-version\": null,\r\n            \"files\": []\r\n        },\r\n        {\r\n          \"version\": \"2.2.205\",\r\n          \"version-display\": \"2.2.205\",\r\n          \"runtime-version\": \"2.2.6\",\r\n          \"vs-version\": \"16.0.5\",\r\n          \"vs-support\": \"Visual Studio 2019 (v16.0)\",\r\n          \"csharp-version\": \"7.3\",\r\n          \"fsharp-version\": \"4.5\",\r\n          \"vb-version\": null,\r\n          \"files\": []\r\n        }\r\n    ]\r\n}\r\n```\r\n\r\n## vs-version and the Runtime\r\n\r\nThe same version of the runtime is included in multiple versions of Visual Studio. To account for this, the vs-version field is being updated to a comma-delimited string. The string will represent all versions of Visual Studio which first include the particular .NET Core update. Again, an example from the upcoming July Update.\r\n\r\n```json\r\n\"runtime\": {\r\n        \"version\": \"2.2.6\",\r\n        \"version-display\": \"2.2.6\",\r\n        \"vs-version\": \"15.9.13, 16.1.3, 16.2.0\",\r\n```\r\n\r\nThe same `vs-versions` changes will be seen in the `aspnetcore-runtime` object.\r\n\r\n## Future Enhancements\r\n\r\nThere are other improvements to the schema which have been suggested by the community which we are evaluating. Generally, theses enhancements are additive and should not represent compatibility compromises for existing parsers and similar announcements will be published ahead of any changes.\r\n\r\n","Url":"https://github.com/dotnet/announcements/issues/116","RelatedDescription":"Open issue \"Updates to releases.json (.NET Core release metadata)\" (#116)"},{"Id":"444065225","IsPullRequest":false,"CreatedAt":"2019-05-14T18:38:23","Actor":"TaraOverfield","Number":"114","RawContent":null,"Title":"May 2019 .NET Updates","State":"open","Body":"# May 2019 .NET Updates\r\n\r\nThe following .NET updates were released in May 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Core\r\n\r\n* .NET Core 1.0.16 and .NET Core SDK 1.1.13( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.0/1.0.16/1.0.16.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/1.0) )\r\n\r\n* .NET Core 1.1.12 and .NET Core SDK 1.1.13 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.1/1.1.13/1.1.13.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/1.1) )\r\n\r\n* .NET Core 2.1.11 and .NET Core SDK ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.11/2.1.11.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.1) )\r\n\r\n* .NET Core 2.2.5 and .NET Core SDK ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.5/2.2.5.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.2) )\r\n\r\nA discussion issue is available at [core/2727](https://github.com/dotnet/core/issues/2727)\r\n\r\n## .NET Framework\r\n* [.NET Framework May 2019 Security and Quality Rollup - May 14, 2019](https://devblogs.microsoft.com/dotnet/net-framework-may-2019-security-and-quality-rollup/)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/114","RelatedDescription":"Open issue \"May 2019 .NET Updates\" (#114)"},{"Id":"444027703","IsPullRequest":false,"CreatedAt":"2019-05-14T17:06:24","Actor":"blowdart","Number":"113","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0981: .NET Core Denial of Service Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2019-0981: .NET Core Denial of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core and ASP.NET Core 1.0, 1.1, 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nA denial of service vulnerability exists when .NET Core and ASP.NET Core improperly handle web requests. An attacker who successfully exploited this vulnerability could cause a denial of service against a .NET Core and ASP.NET Core application. The vulnerability can be exploited remotely, without authentication.\r\n\r\nA remote unauthenticated attacker could exploit this vulnerability by issuing specially crafted requests to a .NET Core application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core and ASP.NET Core web applications handle web requests.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/37651\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nThere are no mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the System.Private.Uri package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.Private.Uri | 4.3.0, 4.3.1 | 4.3.2\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nThe affected assemblies are part of .NET Core. If you are running a vulnerable version of .NET Core you may be affected.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nTo fix the issue please install the latest version of .NET Core. If you have multiple versions of .NET Core installed you will need to install multiple runtimes, or SDKs depending on what you have installed.\r\n\r\nIf you have .NET Core 2.0 or greater installed you can list the versions you have installed by running the `dotnet --info` command. You will see output like the following;\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview3-010431\r\n Commit:    d72abce213\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18362\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview3-010431\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview3-27503-5\r\n  Commit:  3844df9537\r\n\r\n.NET Core SDKs installed:\r\n  1.1.13 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.602 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.202 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview3-010431 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\\\r\n  Microsoft.AspNetCore.All 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview3-19153-02 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.15 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview3-27503-5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview3-27504-2 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your version of .NET Core does not support the `dotnet --info` command then you have either .NET Core 1.0 or .NET Core 1.1 installed.\r\n\r\n* For machines running .NET Core 1.0 you should download Runtime 1.0.16 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.0.\r\n* For machines running .NET Core 1.1 you should download Runtime 1.1.13 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.1.\r\n* For machines running .NET 2.1 you should download Runtime 2.1.11 or SDK 2.1.507 for Visual Studio 2017 or SDK 2.1.604 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.1\r\n* For machines running .NET 2.2 you should download Runtime 2.2.5 or SDK 2.2.107 for Visual Studio 2017 or SDK 2.2.204 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.2.\r\n\r\nOnce you have installed the updated runtime or SDK you should restart your apps for the update to take effect.\r\n\r\nIf you have [pinned your application](https://docs.microsoft.com/en-us/dotnet/core/versions/selection) to a specific version of the runtime you must update your app, recompile and redeploy it for the update to take effect.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgments\r\n\r\n[Nemanja Mijailovic](https://mijailovic.net/)\r\n\r\n### External Links\r\n\r\n[CVE-2019-0981](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0981)\r\n\r\n### Revisions\r\n\r\nV1.0 (May 14, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-05-14_","Url":"https://github.com/dotnet/announcements/issues/113","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0981: .NET Core Denial of Service Vulnerability\" (#113)"},{"Id":"444027025","IsPullRequest":false,"CreatedAt":"2019-05-14T17:04:45","Actor":"blowdart","Number":"112","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0980: .NET Core Denial of Service Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2019-0980: .NET Core Denial of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core and ASP.NET Core 1.0, 1.1, 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nA denial of service vulnerability exists when .NET Core and ASP.NET Core improperly handle web requests. An attacker who successfully exploited this vulnerability could cause a denial of service against a .NET Core and ASP.NET Core application. The vulnerability can be exploited remotely, without authentication.\r\n\r\nA remote unauthenticated attacker could exploit this vulnerability by issuing specially crafted requests to a .NET Core application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core and ASP.NET Core web applications handle web requests.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/37650\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nThere are no mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the System.Private.Uri package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.Private.Uri | 4.3.0, 4.3.1 | 4.3.2\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nThe affected assemblies are part of .NET Core. If you are running a vulnerable version of .NET Core you may be affected.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nTo fix the issue please install the latest version of .NET Core. If you have multiple versions of .NET Core installed you will need to install multiple runtimes, or SDKs depending on what you have installed.\r\n\r\nIf you have .NET Core 2.0 or greater installed you can list the versions you have installed by running the `dotnet --info` command. You will see output like the following;\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview3-010431\r\n Commit:    d72abce213\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18362\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview3-010431\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview3-27503-5\r\n  Commit:  3844df9537\r\n\r\n.NET Core SDKs installed:\r\n  1.1.13 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.602 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.202 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview3-010431 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\\\r\n  Microsoft.AspNetCore.All 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview3-19153-02 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.15 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview3-27503-5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview3-27504-2 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your version of .NET Core does not support the `dotnet --info` command then you have either .NET Core 1.0 or .NET Core 1.1 installed.\r\n\r\n* For machines running .NET Core 1.0 you should download Runtime 1.0.16 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.0.\r\n* For machines running .NET Core 1.1 you should download Runtime 1.1.13 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.1.\r\n* For machines running .NET 2.1 you should download Runtime 2.1.11 or SDK 2.1.507 for Visual Studio 2017 or SDK 2.1.604 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.1\r\n* For machines running .NET 2.2 you should download Runtime 2.2.5 or SDK 2.2.107 for Visual Studio 2017 or SDK 2.2.204 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.2.\r\n\r\nOnce you have installed the updated runtime or SDK you should restart your apps for the update to take effect.\r\n\r\nIf you have [pinned your application](https://docs.microsoft.com/en-us/dotnet/core/versions/selection) to a specific version of the runtime you must update your app, recompile and redeploy it for the update to take effect.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgments\r\n\r\n[Nemanja Mijailovic](https://mijailovic.net/)\r\n\r\n### External Links\r\n\r\n[CVE-2019-0980](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0980)\r\n\r\n### Revisions\r\n\r\nV1.0 (May 14, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-05-14_","Url":"https://github.com/dotnet/announcements/issues/112","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0980: .NET Core Denial of Service Vulnerability\" (#112)"},{"Id":"444026277","IsPullRequest":false,"CreatedAt":"2019-05-14T17:02:57","Actor":"blowdart","Number":"111","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0820: .NET Core Denial of Service Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2019-0820: .NET Core Denial of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 1.0, 1.1, 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nA denial of service vulnerability exists when .NET Core improperly process RegEx strings. An attacker who successfully exploited this vulnerability could cause a denial of service against a .NET application.\r\n\r\nA remote unauthenticated attacker could exploit this vulnerability by issuing specially crafted requests to a .NET Core application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core applications handle RegEx string processing.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/37649\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nThere are no mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the System.Text.RegularExpressions package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.Text.RegularExpressions.dll | 4.3.0 | 4.3.1\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nThe affected assemblies are part of .NET Core. If you are running a vulnerable version of .NET Core you may be affected.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nTo fix the issue please install the latest version of .NET Core. If you have multiple versions of .NET Core installed you will need to install multiple runtimes, or SDKs depending on what you have installed.\r\n\r\nIf you have .NET Core 2.0 or greater installed you can list the versions you have installed by running the `dotnet --info` command. You will see output like the following;\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview3-010431\r\n Commit:    d72abce213\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18362\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview3-010431\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview3-27503-5\r\n  Commit:  3844df9537\r\n\r\n.NET Core SDKs installed:\r\n  1.1.13 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.602 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.202 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview3-010431 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\\\r\n  Microsoft.AspNetCore.All 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview3-19153-02 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.15 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview3-27503-5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview3-27504-2 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your version of .NET Core does not support the `dotnet --info` command then you have either .NET Core 1.0 or .NET Core 1.1 installed.\r\n\r\n* For machines running .NET Core 1.0 you should download Runtime 1.0.16 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.0.\r\n* For machines running .NET Core 1.1 you should download Runtime 1.1.13 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.1.\r\n* For machines running .NET 2.1 you should download Runtime 2.1.11 or SDK 2.1.507 for Visual Studio 2017 or SDK 2.1.604 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.1\r\n* For machines running .NET 2.2 you should download Runtime 2.2.5 or SDK 2.2.107 for Visual Studio 2017 or SDK 2.2.204 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.2.\r\n\r\nOnce you have installed the updated runtime or SDK you should restart your apps for the update to take effect.\r\n\r\nIf you have [pinned your application](https://docs.microsoft.com/en-us/dotnet/core/versions/selection) to a specific version of the runtime you must update your app, recompile and redeploy it for the update to take effect.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2019-0820](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0820)\r\n\r\n### Revisions\r\n\r\nV1.0 (May 14, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-05-14_","Url":"https://github.com/dotnet/announcements/issues/111","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0820: .NET Core Denial of Service Vulnerability\" (#111)"},{"Id":"435015242","IsPullRequest":false,"CreatedAt":"2019-04-19T01:16:10","Actor":"MichaelSimons","Number":"110","RawContent":null,"Title":"New images for .NET Framework 4.8","State":"open","Body":"# New images for .NET Framework 4.8\r\n\r\nNew images have been released with support for [.NET Framework 4.8 runtime and SDK](https://devblogs.microsoft.com/dotnet/announcing-the-net-framework-4-8/).\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [Microsoft/dotnet-framework-docker#271](https://github.com/Microsoft/dotnet-framework-docker/issues/271)\r\n\r\n## Details\r\n* Pull request: #270\r\n\r\nYou can access these new images with the following tags:\r\n* `mcr.microsoft.com/dotnet/framework/runtime:4.8`\r\n* `mcr.microsoft.com/dotnet/framework/sdk:4.8`\r\n\r\nIn addition, the `latest` tag has been updated to refer to these new 4.8 images.\r\n\r\nCheck out the readme files for more information on the latest tags:\r\n* [Runtime](https://github.com/Microsoft/dotnet-framework-docker/blob/master/README.runtime.md)\r\n* [SDK](https://github.com/Microsoft/dotnet-framework-docker/blob/master/README.sdk.md)\r\n\r\nThe [3.5 SDK](https://github.com/Microsoft/dotnet-framework-docker/tree/master/3.5/sdk) images are intended to always contain the latest .NET Framework SDK and have also been updated to use the 4.8 SDK.","Url":"https://github.com/dotnet/announcements/issues/110","RelatedDescription":"Open issue \"New images for .NET Framework 4.8\" (#110)"},{"Id":"433297298","IsPullRequest":false,"CreatedAt":"2019-04-15T13:57:07","Actor":"MichaelSimons","Number":"109","RawContent":null,"Title":".NET Framework SDK container images now contain the Visual Studio 2019 toolset","State":"open","Body":"# .NET Framework SDK container images now contain the Visual Studio 2019 toolset\r\n.NET Framework SDK container images now include Visual Studio 2019 tools. For most scenarios, this change will not be observable, however, there may be some breaks that will be documented in this issue. We did not add additional tools to the SDK, but updated existing tools to match the same tools in Visual Studio 2019. Previously, the tools in SDK matched the same tools in Visual Studio 2017.\r\n\r\nWe will only produce .NET Framework SDK images that include Visual Studio 2019 tools. We will not produce another set of .NET Framework SDK images that includes Visual Studio 2017 tools. There is a strong goal that the tools remain compatible over releases.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [Microsoft/dotnet-framework-docker#269](https://github.com/Microsoft/dotnet-framework-docker/issues/269)\r\n\r\n## Details\r\nVisual Studio 2019 was released on April 2, 2019. We updated the .NET Framework SDK container images, on the same day, to include a new version of the .NET Framework SDK that contains tools that match the same tools in Visual Studio 2019.\r\n\r\nThese tools include:\r\n* MSBuild\r\n* NuGet\r\n* C# compiler\r\n* F# compiler\r\n* VB compiler\r\n* VS Test\r\n\r\nIf you encounter a breaking change or other issues and need to quickly unblock yourself, you can reference the previous version of the image by using its full version tag (e.g. mcr.microsoft.com/dotnet/framework/sdk:4.7.2-20190312-windowsservercore-ltsc2019).\r\n\r\nRelated pull request: [#252](https://github.com/Microsoft/dotnet-framework-docker/pull/252)","Url":"https://github.com/dotnet/announcements/issues/109","RelatedDescription":"Open issue \".NET Framework SDK container images now contain the Visual Studio 2019 toolset\" (#109)"},{"Id":"432735158","IsPullRequest":false,"CreatedAt":"2019-04-12T20:35:55","Actor":"KathleenDollard","Number":"108","RawContent":null,"Title":".NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017","State":"open","Body":"# .NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017\r\n\r\n.NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017. For example, 2.2.203 and 2.1.603 cause failures in Visual Studio 2017. To work on projects in Visual Studio 2017, use .NET Core SDK 2.2.1nn and 2.1.5nn, such as 2.2.106 and 2.1.506. You can install any combination of these SDKs side by side.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n[dotnet/sdk #3124](https://github.com/dotnet/sdk/issues/3124)\r\n\r\n## Details\r\n\r\nYou can find the SDKs on you machine using the following at a command prompt:\r\n\r\n```bash\r\ndotnet --list-sdks\r\n```\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.2\r\n\r\nIf you receive the error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.2. Either target .NET Core 2.1 or lower, or use a version of the .NET SDK that supports .NET Core 2.2.`\r\n\r\nIf you downloaded the .NET Core SDK 2.2 between April 2 and April 12, 2019, the main [.NET downloads page](https://dotnet.microsoft.com/download/) included only 2.2.2nn. Starting April 12th, a new button marked \"Compatible with Visual Studio 2017\" is provided to target 2.2.1nn. If you downloaded 2.2 prior to this date, and you use Visual Studio 2017, install the compatible version.\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.1\r\n\r\nIf you receive this error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.1. Either target .NET Core 2.0 or lower, or use a version of the .NET SDK that supports .NET Core 2.1.`\r\n\r\nThis problem most often occurs because you manually uninstall the 2.1.5nn version. Simply reinstall it from the [.NET Core 2.1 downloads page](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\n## More information\r\n\r\nHere is the draft of an article we are preparing for .NET Core documentation:\r\n\r\n---\r\n\r\n## Solving Problems with .NET Core SDK Selection in Visual Studio\r\n\r\nYou may have .NET Core SDKs on your machine and still have problems with Visual Studio finding an appropriate one. This article explains why this happens and how you can fix your installation.\r\n\r\nWhen Visual Studio can't find an appropriate version of the .NET Core SDK, you'll receive an error message. This may appear in the Error pane as NETSDK1045:\r\n\r\n\"The current .NET SDK does not support targeting .NET Core 2...\"\r\n\r\nYou can check what .NET Core SDKs you have on your machine with the following command:\r\n\r\n```bash\r\ndotnet --list-sdks\r\n```\r\n\r\nUnless you have a global.json file, when you use `dotnet` from the command line, the latest .NET Core SDK is used.\r\n\r\n> [TIP!] \r\n> Open a command prompt and try to build with `dotnet build`. If the command line build works, but Visual Studio doesn't suggestions in this article may help.\r\n\r\nThe last two digits of the .NET Core SDK version numbers are in the format are a patch number, which is represented by `nn` in this article because we will continue to service them to include the latest runtimes. To find out more, vist the [Overview of how .NET Core is versioned page](https://docs.microsoft.com/en-us/dotnet/core/versions/).\r\n\r\n## Fixes for Common Problems\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.2\r\n\r\nIf you receive the error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.2… Either target .NET Core 2.1 or lower, or use a version of the .NET SDK that supports .NET Core 2.2.`\r\n\r\nUse `dotnet --list-sdks` to ensure you have .NET Core SDK 2.2.1nn. As an example, 2.2.106 would be a valid entry.\r\n\r\nIf you downloaded the .NET Core SDK 2.2 after April 2, 2019, version 2.2.2nn (such as 2.2.203) is listed first and is the highest version available. However, Visual Studio 2017 requires 2.2.1nn (such as 2.2.106). .NET Core SDK 2.2.2nn works with Visual Studio 2019. Visual Studio 2017 and Visual Studio 2019 can be installed side by side, but this requires both .NET Core SDK 2.2.1nn and .NET Core SDK 2.2.2nn to develop .NET Core 2.2 applications.\r\n\r\nTo download .NET Core SDK 2.2.2nn, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.1\r\n\r\nIf you receive this error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.1. Either target .NET Core 2.0 or lower, or use a version of the .NET SDK that supports .NET Core 2.1.`\r\n\r\nUse `dotnet --list-sdks` to ensure you have .NET Core SDK 2.1.5nn. As an example, 2.1.505 would be a valid entry. \r\n\r\nThis problem occurs of you manually uninstall the 2.1.5nn version.\r\n\r\nThe Visual Studio 2019 installation will not remove this file and Visual Studio 2017 will continue to work side by side.\r\n\r\nTo reinstall .NET Core SDK 2.1.5nn, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\n### Visual Studio 2019 can't target .NET Core 3.0 Preview\r\n\r\nIf you receive this error message in Visual Studio 2019:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.1. Either target .NET Core 2.0 or lower, or use a version of the .NET SDK that supports .NET Core 2.1.`\r\n\r\nUse `dotnet --list-sdks` to ensure you have .NET Core SDK 3.0.100-preview... As an example, SDK 3.0.100-preview3-010431 would be a valid entry.\r\n\r\nTo install .NET Core SDK 3.0.1nn preview, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core/3.0).\r\n\r\nIn Visual Studio, go to `Tools\\Options\\Projects and Solutions\\.NET Core` and check the box `Use Previews of the .NET Core SDK`.\r\n\r\n> [NOTE!]\r\n> This option will be moving to `Tools\\Options\\Environment` and renamed `Preview Features` in Visual Studio 2019 version 16.1 Preview 2.\r\n\r\nIf you are targeting .NET Core 3.0 preview, the [C# language version will be C# 8.0 Preview by default](https://docs.microsoft.com/en-us/visualstudio/releases/2019/release-notes#csharp-defaults) allowing you to use new C# features.\r\n\r\n## Understand the relationship between .NET Core SDKs and Visual Studio build tools\r\n\r\nVisual Studio has its own copies of tools like MSBuild, NuGet and the compilers. If you install the .NET Core workload, it also installs the .NET Core SDK which has versions of these tools and provides tasks and targets. These two versions are built from the same repositories, but target .NET Framework and .NET Core respectively. \r\n\r\nWhen you build a .NET Core project in Visual Studio, it uses Visual Studio's copy of MSBuild, but the tasks and targets are supplied from the selected version of the .NET Core SDK. \r\n\r\nWhen you upgrade the .NET Core SDK, you get new tasks and targets. These new tasks and targets may contain features that are not supported by older versions of MSBuild. Like all of the .NET Core SDK, MSBuild is backwards compatible. It is not forwards compatible.\r\n\r\nThis generally works well, but requires a guarantee that the tasks and targets work with the MSBuild version. To ensure this, each .NET Core SDK indicates an MSBuild version range that is used by Visual Studio to determine compatibility. Versions of the .NET Core SDK that have a higher MSBuild identifier than expected are ignored by Visual Studio. In the normal case, this simply means you use the tasks and targets that were installed with your version of Visual Studio.\r\n\r\nBecause of this, you may have many versions of the .NET Core SDK on your machine and Visual Studio still fail to find one it considers appropriate. This is compounded by a poor error message, which we cannot fully correct because it is from the old version of the .NET Core SDK on your machine. Confusion is also compounded by a complex non-linear release matrix that makes it difficult to predict the right .NET Core SDK to select. We are working to improve all this. \r\n\r\n## The Visual Studio / .NET Core SDK support matrix\r\n\r\nThe last two digits of the .NET Core SDK version number are a patch number, which are represented by a `nn` in this table. You can learn more about .NET Core SDK and .NET Core Runtime versioning at the [Overview of how .NET Core is versioned page](https://docs.microsoft.com/en-us/dotnet/core/versions/).\r\n\r\nThe following table shows which Visual Studio versions and .NET Core SDKs are compatible and how they are acquired if you are working with Visual Studio. \r\n\r\n| .NET Core SDK | .NET Core Runtime | Compatible Visual Studio | MSBuild | Notes                                     |\r\n|---------------|-------------------|--------------------------|---------|-------------------------------------------|\r\n| 2.1.5nn       | 2.1               | 2017                     | 15      | Installed as part of VS 2017 version 15.9 |\r\n| 2.1.6nn       | 2.1               | 2019                     | 16      | Installed as part of VS 2019              |\r\n| 2.2.1nn       | 2.2               | 2017                     | 15      | Installed manually                        |\r\n| 2.2.2nn       | 2.2               | 2019                     | 16      | Installed as part of VS 2019              |\r\n| 3.0.1nn       | 3.0 (Preview)     | 2019                     | 16      | Installed manually                        |\r\n\r\nVisual Studio 2017 cannot work with .NET Core SDK 2.1.6nn or 2.2.2nn.\r\n\r\nTo find out more about removing older versions of the .NET Core Runtime and .NET Core SDK, visit the [How to remove the .NET Core Runtime and SDK page](https://docs.microsoft.com/en-us/dotnet/core/versions/remove-runtime-sdk-versions?tabs=macos).\r\n\r\nTo download the .NET Core SDK, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core).","Url":"https://github.com/dotnet/announcements/issues/108","RelatedDescription":"Open issue \".NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017\" (#108)"},{"Id":"432081093","IsPullRequest":false,"CreatedAt":"2019-04-11T15:16:43","Actor":"KathleenDollard","Number":"107","RawContent":null,"Title":"Limit DotNetCliToolReference Tools to .NET Core 2.2 and Below","State":"open","Body":"# Limit DotNetCliToolReference Tools to .NET Core 2.2 and Below\r\n\r\n.NET Core 3 takes the next step in the .NET Core tool strategy with local tools. As part of this process, starting in Preview 4 DotNetCliToolReference tools will be restricted to targeting .NET Core 2.2 and below. DotNetCliToolReference tools can be used in projects targeting .NET Core 3.0, but the tools themselves should target .NET Core 2.2 or below.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n[dotnet/sdk #3115](https://github.com/dotnet/sdk/issues/3115)\r\n\r\n## Details\r\n\r\nThe suggested approach going forward is to to use [.NET Core Local Tools](https://aka.ms/local-tools) when you want a tool that is specific to a project or repository. At the same time we are removing the need to access local tools by the verbose `dotnet tool run <toolname>` that was present in earlier previews. You can now access local tools via `dotnet <toolname>`.\r\n\r\nDotNetCliToolReference tools have a flaw in how their dependencies are restored which can create [difficult to diagnose bugs when running these tools](https://github.com/NuGet/Home/issues/5067). This issue would occur much more frequently if targeting .NET Core 3.0 was allowed. Restricting tools to target only .NET Core 2.2 and below means existing scenarios to continue to work (as well as they previously did), regardless of the framework version targeted by the project or the current .NET Core SDK. \r\n\r\nThe new .NET Core tool strategy avoids this flaw in restore strategy and offers other benefits, like the ability to author one type of tool and install it in different ways depending on project and user needs.\r\n\r\nWe look forward to your feedback on .NET Core Local Tools, and on challenges you face moving away from DotNetCliToolReference tools. \r\n\r\n[dotnet/sdk #3057](https://github.com/dotnet/sdk/pull/3057)","Url":"https://github.com/dotnet/announcements/issues/107","RelatedDescription":"Open issue \"Limit DotNetCliToolReference Tools to .NET Core 2.2 and Below\" (#107)"},{"Id":"431012407","IsPullRequest":false,"CreatedAt":"2019-04-09T14:51:18","Actor":"MichaelSimons","Number":"106","RawContent":null,"Title":".NET Core SDK container images now contain the Visual Studio 2019 toolset","State":"open","Body":"# .NET Core SDK container images now contain the Visual Studio 2019 toolset\r\n\r\n.NET Core SDK container images now include Visual Studio 2019 tools. For most scenarios, this change will not be observable, however, there may be some breaks that will be documented in this issue. We did not add *additional* tools to the SDK, but updated existing tools to match the same tools in Visual Studio 2019. Previously, the tools in SDK matched the same tools in Visual Studio 2017.\r\n\r\nWe will only produce .NET Core SDK images that include Visual Studio 2019 tools. We will not produce another set of .NET Core SDK images that includes Visual Studio 2017 tools. There is a strong goal that the tools remain compatible over releases.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #1042](https://github.com/dotnet/dotnet-docker/issues/1042)\r\n\r\n## Details\r\n\r\n[Visual Studio 2019](https://devblogs.microsoft.com/visualstudio/visual-studio-2019-code-faster-work-smarter-create-the-future/) was released on April 2, 2019. We updated the .NET Core SDK container images, on the same day, to include a new version of the .NET Core SDK that contains tools that match the same tools in Visual Studio 2019.\r\n\r\nThese tools include:\r\n\r\n* MSBuild\r\n* NuGet\r\n* C# compiler\r\n* F# compiler\r\n* VB compiler\r\n* VS Test\r\n\r\nIf you encounter a breaking change or other issues and need to quickly unblock yourself, you can reference the previous version of the image by using its full version tag:\r\n\r\n* 2.1: `mcr.microsoft.com/dotnet/core/sdk:2.1.505`\r\n* 2.2: `mcr.microsoft.com/dotnet/core/sdk:2.2.105`\r\n\r\nDetails:\r\n\r\n* [dotnet/dotnet-docker #1029](https://github.com/dotnet/dotnet-docker/pull/1029)\r\n* [2.1 SDK release notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.602-SDK/2.1.602-SDK.md)\r\n* [2.2 SDK release notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.202-SDK/2.2.202-SDK.md)\r\n\r\n## Known Breaking Changes for SDK images (VS 2017 to VS 2019 upgrade)\r\n\r\nThe following issues and breaks have been discovered.\r\n \r\n### Test Log File Name Change\r\n\r\nA change was introduced to the `dotnet test` command when a user-defined log file name is specified.  In the previous version the resulting log file would be named exactly as specified.  In the current version, the log file is named with a timestamp suffix automatically added to the user-defined name.  \r\n\r\nDetails:\r\n* [Microsoft/vstest #1603](https://github.com/Microsoft/vstest/issues/1603) \r\n* [Microsoft/vstest#1876](https://github.com/Microsoft/vstest/issues/1876)","Url":"https://github.com/dotnet/announcements/issues/106","RelatedDescription":"Open issue \".NET Core SDK container images now contain the Visual Studio 2019 toolset\" (#106)"},{"Id":"431003701","IsPullRequest":false,"CreatedAt":"2019-04-09T14:35:39","Actor":"MichaelSimons","Number":"105","RawContent":null,"Title":"Windows Server, version 1709 no longer Supported by .NET Framework","State":"open","Body":"# Windows Server, version 1709 no longer Supported by .NET Framework\r\n\r\nWindows Server, version 1709 is no longer supported. As a result, this version of Windows is no longer supported by the .NET Team and we will no longer produce .NET Framework container images for those Windows versions.\r\n\r\nSupport statements:\r\n\r\n* [Currently supported .NET Framework Docker images](https://hub.docker.com/_/microsoft-dotnet-framework)\r\n* [.NET Framework Support Policy](https://dotnet.microsoft.com/platform/support/policy/dotnet-framework)\r\n* [Products Reaching End of Support for 2019](https://support.microsoft.com/en-us/help/4316957/products-reaching-end-of-support-for-2019)\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-framework-docker #259](https://github.com/Microsoft/dotnet-framework-docker/issues/259)\r\n\r\n## Details\r\n\r\nDocker tags that contain `windowsservercore-1709` are no longer be produced. We will not delete existing images or those tags, however, they contain unsupported builds of Windows Server and .NET Framework.\r\n\r\n## Pulling manifest tags\r\n\r\nThese changes also affect manifest tags (AKA “multi-arch tags“), such as `4.7.1`, and  `4.7.2`. These are tags that are supported on multiple operating systems and versions, and do  not contain the operating system in them. As a result of no longer producing new images for Windows Server, version 1709, manifest tags no longer include entries for Windows 10, version 1709, and Windows Server,version 1709. That means that .NET Core manifest tags are no longer usable on those Windows versions.\r\n\r\nIf you pull a manifest tag on one of the Windows versions described, you may get one of the following error messages:\r\n\r\n* `a Windows version 10.0.17134-based image is incompatible with a 10.0.16299 host`\r\n* `no matching manifest for windows/amd64 in the manifest list entries`\r\n* `no matching manifest for unknown in the manifest list entries`\r\n\r\nIf you need to still use Windows Server, version 1709 images (even though they are no longer supported), you will need to use tags that include the Windows Server version (these are non-manifest tags), for example `mcr.microsoft.com/dotnet/framework/runtime:4.7.2-windowsservercore-1709` or `mcr.microsoft.com/dotnet/framework/sdk:4.7.2-windowsservercore-1709`.","Url":"https://github.com/dotnet/announcements/issues/105","RelatedDescription":"Open issue \"Windows Server, version 1709 no longer Supported by .NET Framework\" (#105)"},{"Id":"430998341","IsPullRequest":false,"CreatedAt":"2019-04-09T14:25:57","Actor":"MichaelSimons","Number":"104","RawContent":null,"Title":"Nano Server 2016 and 1709 no longer Supported by .NET Core","State":"open","Body":"# Nano Server 2016 and 1709 no longer Supported by .NET Core\r\n\r\nNano Server 2016 and Nano Server, version 1709 are no longer supported. As a result, these versions of Windows are no longer supported by the .NET Team and we will no longer produce .NET Core container images for those Windows versions.\r\n\r\nSupport statements:\r\n\r\n* [Currently supported .NET Core Docker images](https://hub.docker.com/_/microsoft-dotnet-core)\r\n* [.NET Core Support Policy](https://dotnet.microsoft.com/platform/support/policy/dotnet-core)\r\n* [Products Reaching End of Support for 2018](https://support.microsoft.com/en-us/help/4043450/products-reaching-end-of-support-for-2018)\r\n* [Products Reaching End of Support for 2019](https://support.microsoft.com/en-us/help/4316957/products-reaching-end-of-support-for-2019)\r\n\r\nWe previously announced Nano Server 2016 going out of support in [.NET Core Container Images now Published to Microsoft Container Registry](https://devblogs.microsoft.com/dotnet/net-core-container-images-now-published-to-microsoft-container-registry/). That post is still accurate.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #1041](https://github.com/dotnet/dotnet-docker/issues/1041)\r\n\r\n## Details\r\n\r\nDocker tags that contain `nanoserver-sac2016` and `nanoserver-1709` are no longer be produced. We will not delete existing images or those tags, however, they contain unsupported builds of Nano Server and .NET Core.\r\n\r\n## Pulling manifest tags\r\n\r\nThese changes also affect manifest tags (AKA “multi-arch tags“), such as `2.1`, `2.1-sdk`, `2.2.1-runtime`. These are tags that are supported on multiple operating systems, and do not contain the operating system in them. As a result of no longer producing new images for Nano Server 2016 and Nano Server, version 1709, manifest tags no longer include entries for Nano Server 2016, Windows Server 2016, Windows 10, version 1607, Windows 10, version 1709, and Windows Server, version 1709. That means that .NET Core manifest tags are no longer usable on those Windows versions.\r\n\r\nIf you pull a manifest tag on one of the Windows versions described, you may get one of the following error messages:\r\n\r\n* `a Windows version 10.0.16299-based image is incompatible with a 10.0.14393 host`\r\n* `no matching manifest for windows/amd64 in the manifest list entries`\r\n* `no matching manifest for unknown in the manifest list entries`\r\n\r\nIf you need to still use Nano Server 2016 or Nano Server, version 1709 images (even though they are no longer supported), you will need to use tags that include the Nano Server version (these are non-manifest tags), for example `mcr.microsoft.com/dotnet/core/runtime:2.1-nanoserver-sac2016` or `mcr.microsoft.com/dotnet/core/runtime:2.1-nanoserver-1709`.\r\n\r\n### Nano Server Support\r\n\r\n.NET Core is supported on Nano Server, version 1803 and later. \r\n\r\n.NET Core 2.x and 3.0 images are available for all supported versions of Nano Server, version 1803 and later. This means that 2.x and 3.0 manifest tags can be used on Windows 10, version 1803+, and Windows Server, version 1803+. You can also use non-manifest tags for those versions, too, such as `2.2-nanoserver-1809`.\r\n\r\n.NET Core 1.x images are available for Nano Server, version 1809 and later. This means that 1.x manifest tags can be used on Windows 10, version 1809+, Windows Server, version 1809+ and Windows Server 2019. You can also use non-manifest tags for those versions, too, such as `1.1-nanoserver-1809` tag.","Url":"https://github.com/dotnet/announcements/issues/104","RelatedDescription":"Open issue \"Nano Server 2016 and 1709 no longer Supported by .NET Core\" (#104)"},{"Id":"420117627","IsPullRequest":false,"CreatedAt":"2019-03-12T17:35:16","Actor":"vivmishra","Number":"103","RawContent":null,"Title":"March 2019 .NET Updates","State":"open","Body":"# March 2019 .NET Updates\r\n\r\nThe following .NET updates were released in March 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n* [.NET Framework March 2019 Update - March 19, 2019](https://devblogs.microsoft.com/dotnet/net-framework-march-2019-update/)\r\n* [.NET Framework April 2, 2019 Cumulative Update for Windows 10 version 1809 and Windows Server 2019 - April 2, 2019](https://devblogs.microsoft.com/dotnet/net-framework-april-2-2019-cumulative-update-for-windows-10-version-1809-and-windows-server-2019/)\r\n\r\n\r\n## .NET Core\r\n\r\n* .NET Core 1.0.15 and .NET Core SDK 1.1.13 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.0/1.0.15/1.0.15.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/1.0) )\r\n\r\n* .NET Core 1.1.12 and .NET Core SDK 1.1.13 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.1/1.1.12/1.1.12.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/1.1) )\r\n\r\n* .NET Core 2.1.9 and .NET Core SDK 2.1.505 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.9/2.1.9.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.1) )\r\n\r\n* .NET Core 2.2.3 and .NET Core SDK 2.2.105 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.3/2.2.3.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.2) )\r\n\r\nA discussion issue is available at [core/2432](https://github.com/dotnet/core/issues/2432)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/103","RelatedDescription":"Open issue \"March 2019 .NET Updates\" (#103)"},{"Id":"415363751","IsPullRequest":false,"CreatedAt":"2019-02-27T22:49:51","Actor":"leecow","Number":"102","RawContent":null,"Title":"SDK Installers will remove previous patch versions","State":"open","Body":"The SDK Installers for Windows will upgrade patch versions in place within the same feature band. This will reduce the number of SDKs that are installed on programmer machines.\r\n\r\nFeature bands of the SDK are defined like 3.0.1nn. [Find out more about SDK version numbers](https://docs.microsoft.com/dotnet/core/versions/#versioning-details).\r\n\r\nThis means when .NET Core SDK 3.0.101 becomes available and is installed, .NET Core SDK 3.0.100 will be removed from the machine if it exists. When .NET Core SDK 3.0.200 becomes available and is installed on the same machine, .NET Core SDK versions like 3.0.101 will not be removed but stay side by side with 3.0.200.\r\n\r\nThis approach supports use of `global.json` which will roll forward across patch versions, but not feature bands of the SDK. Thus, upgrading via the SDK installer will not result in errors due to a missing SDK. Feature bands also align with side by side Visual Studio installations for those users that install SDKs for Visual Studio use. For example, Visual Studio 15.9 uses .NET Core SDK 2.2.500 but does not support .NET Core SDK 2.2.600.\r\n\r\nFind out how to [remove other .NET Core SDK versions here.](https://docs.microsoft.com/dotnet/core/versions/remove-runtime-sdk-versions).","Url":"https://github.com/dotnet/announcements/issues/102","RelatedDescription":"Open issue \"SDK Installers will remove previous patch versions\" (#102)"},{"Id":"410971363","IsPullRequest":false,"CreatedAt":"2019-02-15T22:24:40","Actor":"richlander","Number":"101","RawContent":null,"Title":"Publishing .NET Core images to Microsoft Container Registry (MCR)","State":"open","Body":"# Publishing .NET Core images to Microsoft Container Registry (MCR)\r\n\r\nMicrosoft teams are now publishing container images to the [Microsoft Container Registry](https://azure.microsoft.com/en-us/blog/microsoft-syndicates-container-catalog/). There are two primary reasons for this change:\r\n\r\n* Syndicate Microsoft-provided container images to multiple registries, like Docker Hub and Red Hat.\r\n* Use Microsoft Azure as a global CDN for delivering Microsoft-provided container images.\r\n\r\nYou will use and see MCR as a storage back-end for Microsoft images. The primary way you learn about Microsoft container images and tags will be through a registry, which for most users will continue to be Docker Hub. Most of the experience you've had browsing for .NET Core container images will continue unchanged with this new model. The Docker Hub URLs you've used for Microsoft repos will continue to work, and forward to updated locations on Docker Hub. Existing Docker Hub will images will be maintained as-is.\r\n\r\nSee [.NET Core Container Images now Published to Microsoft Container Registry](https://devblogs.microsoft.com/dotnet/net-core-container-images-now-published-to-microsoft-container-registry/) for the most updated information on our use of MCR.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #935](https://github.com/dotnet/dotnet-docker/issues/935)\r\n\r\n## Starting with .NET Core nightly repo\r\n\r\nOn the .NET team, we started our [transition to MCR](https://github.com/dotnet/dotnet-docker/issues/745) with the .NET Core \"nightly\" repo. [dotnet-nightly](dockerhub.com/r/microsoft/dotnet-nightly) is now hosted on MCR and syndicated to Docker Hub. We started with the nightly repo in order to discover and fix any challenges we found with this new model before we move our higher-traffic primary container repository.\r\n\r\nWe will start publishing [dotnet](dockerhub.com/r/microsoft/dotnet) to MCR a bit later, in either February or March. This issue will be updated when that happens.\r\n\r\n## Repo Split\r\n\r\nThe [.NET Core repo](https://hub.docker.com/r/microsoft/dotnet) currently includes 4 major categories of tags: \r\n\r\n* `sdk`\r\n* `aspnetcore-runtime`\r\n* `runtime` \r\n* `runtime-deps`\r\n\r\nProviding all of the tags in one place has helped with discoverability but made for a repo with an enormous README that can be challenging to navigate and consume. It is large enough that we exceeded Docker Hub README limits and had to artificially make it smaller.\r\n\r\nGoing forward, we will provide a repo for each of the tag categories listed above. We'll also provide a \"product repo\" that will hierarchicaly group all of our repos together. This will satisfy discoverability needs so that it will be easy to find the tags you want.\r\n\r\nYou can already see this experience with [microsoft-dotnet-core-nightly](https://hub.docker.com/_/microsoft-dotnet-core-nightly). There are now multiple repos for our nightly builds:\r\n\r\n* [.NET Core Nightly product repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly)\r\n* [.NET Core SDK Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-sdk/)\r\n* [.NET Core ASP.NET Core Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-aspnet/)\r\n* [.NET Core Runtime Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-runtime/)\r\n* [.NET Core Runtime-deps Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-runtime-deps/)\r\n\r\nThe same split will exist for the non-nightly stable repo (currently hosted at  [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet)) when we start publishing it to MCR and syndicating it back to DockerHub.\r\n\r\n## Changes to registry URL\r\n\r\nThe biggest change is that your Dockerfiles need to be updated to point to the MCR registry in order get access to new .NET Core container tags. The same change is required for scripts or human operations that pull images via `docker pull`.\r\n\r\nThe following example shows the registry path, repo and tag for the .NET Core 2.2 \"Nightly\" SDK on MCR:\r\n\r\n```console\r\nmcr.microsoft.com/dotnet/core-nightly/sdk:2.2\r\n```\r\n\r\nAs comparison, the following repo and tag have been used to date for the .NET Core 2.2 \"Nightly\" SDK on Docker Hub:\r\n\r\n```console\r\nmicrosoft/dotnet-nightly:2.2-sdk\r\n```\r\n\r\nThe new repo URL is provided at each of the news repos. For example, the new .NET Core SDK \"nightly\" repo provides a box on the right where you can copy and paste the correct MCR-based repo syntax that you can use for `docker pull` or in `FROM` statements in your Dockerfiles.\r\n\r\n![image](https://user-images.githubusercontent.com/2608468/52811702-95c5eb80-304a-11e9-8de8-e6ea1f4b4d75.png)\r\n\r\n## Servicing existing Docker Hub tags\r\n\r\nWe will continue to service existing non-version-specific or floating tags on Docker Hub while the associated .NET Core version is supported. For example the `microsoft/dotnet:2.1-sdk` tag is a floating tag that will continue to be serviced for the lifetime of .NET Core 2.1. You can continue using floating tags without issue.\r\n\r\nIf you use non-floating tags, like `microsoft/dotnet:2.1.504-sdk-alpine`, then you will need to update your Dockerfile to use a new non-floating tag. No new non-floating tags will be published to `microsoft/dotnet` and `microsoft/dotnet-nightly` after we fully transition to MCR.\r\n\r\n.NET Core 3.0 Preview 3 and later will only be made available on MCR.\r\n\r\n## Microsoft is a Verified Publisher\r\n\r\nUntil now, Microsoft-provided container images were considered \"community images\". As part of this change, we are re-classifying Microsoft as a \"verified publisher\" on Docker Hub. This designation should make it clearer that .NET and other Microsoft-provided images are coming from a verified source. There clearly was that expectation previously, but Docker is now making that clearer in the Docker Hub pages they host for Microsoft.\r\n\r\nWe will provide official vulnerability scanning Microsoft-provided images as a second phase of this transition.","Url":"https://github.com/dotnet/announcements/issues/101","RelatedDescription":"Open issue \"Publishing .NET Core images to Microsoft Container Registry (MCR)\" (#101)"},{"Id":"410784442","IsPullRequest":false,"CreatedAt":"2019-02-15T14:06:29","Actor":"TaraOverfield","Number":"100","RawContent":null,"Title":"RESOLVED: Advisory on February 2019 Security update for Windows 10 update 1809","State":"open","Body":"<strong><em>Final Update 2/19/19 @1:30 PM (PST)</em></strong><em>: This </em><em>advisory is now resolved with no action needed from Microsoft Customers. The issue was not applicable to any valid or supported configuration. There is no consequence for .NET 4.8 Preview customers. </em>\r\n\r\n<em>We strive to share timely information to protect our customer’s productivity, in this case, our finding was thankfully of no consequence for customers on supported configurations.</em>\r\n\r\n<del><em><strong>Update 2/15/19 @3:35 PM (PST)</strong></em><em>: As we continue our investigation, we are finding the issue to be restricted to a limited and isolated set of test-only systems that are using non-official versions of the .NET 4.8 Preview. As of 2/15/19 around 12:00 pm (PST) we further tightened our delivery mechanisms to ensure that the February .NET security updates are only deployed to their expected target systems.</em></del>\r\n\r\n<del><span>The </span><a href=\"https://blogs.msdn.microsoft.com/dotnet/2019/02/13/net-framework-february-2019-security-and-quality-rollup/\" rel=\"nofollow\">February 2019 Security and Quality Rollup for Windows 10 update 1809</a><span> was released earlier this week. We have received multiple customer reports of issues when a customer has installed .NET Framework 4.8 Preview then installed the February security update, <a href=\"https://support.microsoft.com/kb/4483452\" rel=\"nofollow\">4483452</a>.</span> These reports are specific to only to the scenario when a customer has installed both .NET Framework 4.8 Preview and the February security update.</del>\r\n\r\n<del>We are actively working on investigating and addressing this issue. If you installed the February 2019 security update and have not seen any negative behavior, we recommend that you leave your system as-is but closely monitor it and ensure that you apply upcoming .NET Framework updates.</del>\r\n\r\n<del>We will continue to update this <a href=\"https://github.com/dotnet/announcements/issues/100\" rel=\"nofollow\">post</a> as we have new information.</del>\r\n<h2><del>Guidance</del></h2>\r\n<del>We are working on guidance and will update this post and as we have new information.</del>\r\n<h2><del>Workaround</del></h2>\r\n<del>There are no known workarounds at this time.</del>\r\n<h2><del>Symptoms</del></h2>\r\n<del>After installing .NET Framework 4.8 Preview then the February 2019 security update, <a href=\"https://support.microsoft.com/kb/4483452\" rel=\"nofollow\">4483452</a>, Visual Studios will crash with this error message:</del>\r\n<p class=\"xxxxxmsonormal\"><del><b><span style=\"font-size: 10.5pt;font-family: 'Segoe UI',sans-serif;color: black\">\"Exception has been thrown by the target of an invocation.\"</span></b></del></p>","Url":"https://github.com/dotnet/announcements/issues/100","RelatedDescription":"Open issue \"RESOLVED: Advisory on February 2019 Security update for Windows 10 update 1809\" (#100)"},{"Id":"410455095","IsPullRequest":false,"CreatedAt":"2019-02-14T19:28:25","Actor":"richlander","Number":"99","RawContent":null,"Title":"Supporting new Alpine versions (for containers)","State":"open","Body":"# Supporting new Alpine versions (for containers)\r\n\r\n[Alpine 3.9](https://twitter.com/alpinelinux/status/1090416212822110214) was recently announced. Congratulations, Alpine team! On the .NET team, we are committed to supporting new Alpine versions quickly, and also need to define a policy for older versions. This policy only applies for the container images that we publish.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #933](https://github.com/dotnet/dotnet-docker/issues/933)\r\n\r\n## Policy\r\n\r\nWe intend to establish the following policy for supporting Alpine with .NET Core container images:\r\n\r\n* Support new Alpine versions within 60 days of release (hopefully much less).\r\n* Support n-1 Alpine versions for 3 months after we support a new Alpine version.\r\n\r\nNote: The [.NET Core support policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md) may be broader. This policy is specific to the container images we produce.\r\n\r\n## Plans\r\n\r\nWe're in the process of [fixing issues required to support Alpine 3.9](https://github.com/dotnet/dotnet-docker/issues/921). We expect that these issues will be resolved in February and that we'll be able to provide support for Alpine 3.9 in March.\r\n\r\nWe will produce Alpine 3.9 images for .NET Core 2.1, 2.2 and 3.0. Assuming we publish 3.9 images in March, we'll stop producing and supporting Alpine 3.7 and 3.8 images after June (2019).\r\n\r\n## Using Alpine-based .NET Core images\r\n\r\nWe produce a variety of Alpine-based images. You can either depend on a specific Alpine version, like with `microsoft/dotnet:2.2-sdk-alpine3.8` or opt to use the latest Alpine image we have to offer, like with `microsoft/dotnet:2.2-sdk-alpine`. Either are good choices. It is just a question of whether you want to make a conscious decision to move to later Alpine releases.\r\n\r\n## Support for ARM32?\r\n\r\nWe produce Alpine images for x64 (and ARM64, shortly). The [Alpine 3.9 announcement](https://twitter.com/alpinelinux/status/1090416212822110214) made mention of support for ARM32v7. We would like to enable .NET Core [Alpine-based images on ARM32](https://github.com/gliderlabs/docker-alpine/issues/463#issuecomment-460530395). We are patiently waiting for that to happen. If that's important to you, you should comment on that thread.","Url":"https://github.com/dotnet/announcements/issues/99","RelatedDescription":"Open issue \"Supporting new Alpine versions (for containers)\" (#99)"},{"Id":"409840927","IsPullRequest":false,"CreatedAt":"2019-02-13T14:48:21","Actor":"TaraOverfield","Number":"98","RawContent":null,"Title":"February 2019 .NET Updates","State":"open","Body":"# February 2019 .NET Updates\r\nThe following .NET updates were released in February 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n* [.NET Framework February 2019 Security and Quality Rollup - February 12, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/02/13/net-framework-february-2019-security-and-quality-rollup/)\r\n* [.NET Framework February 2019 Preview of Quality Rollup - February 19, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/02/19/net-framework-february-2019-preview-of-quality-rollup/)\r\n\r\n## .NET Support Policies\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/98","RelatedDescription":"Open issue \"February 2019 .NET Updates\" (#98)"},{"Id":"409436643","IsPullRequest":false,"CreatedAt":"2019-02-12T18:21:22","Actor":"leecow","Number":"97","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0657: .NET Core Domain Spoofing Vulnerability","State":"open","Body":"## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 1.0, 1.1, 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a domain spoofing vulnerability in .NET Framework and .NET Core which causes the meaning of a URI to change when International Domain Name encoding is applied. An attacker who successfully exploited the vulnerability could redirect a URI.\r\n\r\nThe security update addresses the vulnerability by disallowing certain Unicode characters from the URI.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/35265\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nMicrosoft has not identified any mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core 1.0 or 1.1 based application that uses the [System.Private.Uri](https://www.nuget.org/packages/System.Private.Uri/) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.Private.Uri | 4.3.0 | 4.3.1\r\n\r\nAny .NET Core 2.1 or 2.2 based application that uses the [Microsoft.NETCore.App](https://www.nuget.org/packages/Microsoft.NETCore.App) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nMicrosoft.NETCore.App | 2.1.0, 2.1.1, 2.1.2, 2.1.3, 2.1.4, 2.1.5, 2.1.6, 2.1.7, 2.2.0, 2.2.1 | 2.1.8, 2.2.2\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n#### Applications that use Microsoft.NetCore.App\r\n\r\n`System.Private.Uri` is distributed as part of the .NET Core 2.1 runtime. To check the currently installed runtimes, open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed, you'll see output like the following;\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your host version is 2.1.x and the highest `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\nIf your host version is 2.2.x and the highest 2.1.x `Microsoft.NETCore.App` runtime version is less than 2.2.1, you're vulnerable to this issue.\r\n\r\nYou will not see SDK versions if you have only installed the runtime.\r\n\r\n#### Applications not using Microsoft.NetCore.App\r\n\r\nThe affected assembly is also available separately as a NuGet package. If you are not using Microsoft.NetCore.App, you may still be affected if you are referencing the packages listed above.\r\n\r\n##### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file. They can be fixed by [editing the project file](#fixing-direct-dependencies) or using NuGet to update the dependency.\r\n\r\n##### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects\r\n\r\nThe `project.assets.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json)).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `System.Private.Uri/4.3.0` is a reference to version 4.3.0 of `System.Private.Uri`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\n#### Updating the version of Microsoft.NETCore.App\r\n\r\nIf your host version is a 2.1.x host you must install version 2.1.8 or later of the [.NET Core 2.1 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.1), or corresponding [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\nIf your host version is a 2.2.x you must install version 2.2.2 or later of the [.NET Core 2.2 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.2), or corresponding  [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\n#### <a name=\"fixing-direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Private.Uri\" Version=\"4.3.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.Private.Uri` version 4.3.0\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.Private.Uri` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Private.Uri\" Version=\"4.3.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"transitive-dependencies\"></a>Fixing transitive dependencies\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Private.Uri\" Version=\"4.3.0\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n##### Rebuilding your application\r\n\r\nFinally, you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2019-0657](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0657)\r\n\r\n### Revisions\r\n\r\nV1.0 (February 12, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-02-08_\r\n","Url":"https://github.com/dotnet/announcements/issues/97","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0657: .NET Core Domain Spoofing Vulnerability\" (#97)"},{"Id":"397026248","IsPullRequest":false,"CreatedAt":"2019-01-08T18:17:45","Actor":"leecow","Number":"96","RawContent":null,"Title":"January 2019 .NET Updates","State":"open","Body":"# January 2019 .NET Updates\r\n\r\nThe following .NET updates were released in January 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n\r\n* [.NET Framework January 2019 Preview of Quality Rollup - January 15, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/01/15/net-framework-january-2019-preview-of-quality-rollup/)\r\n* [.NET Framework January 2019 Security and Quality Rollup - January 8, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/01/08/net-framework-january-2019-security-and-quality-rollup/)\r\n* [.NET Framework January 22, 2018 Preview of Cumulative Update for Windows 10 version 1809 and Windows Server 2019 - January 22, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/01/22/net-framework-january-22-2018-preview-of-cumulative-update-for-windows-10-version-1809-and-windows-server-2019/)\r\n\r\n## .NET Core\r\n\r\n* .NET Core 2.1.7 and .NET Core SDK 2.1.503 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.7/2.1.7.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.1) )\r\n\r\n* .NET Core 2.2.1 and .NET Core SDK 2.2.102 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.1/2.2.1.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.2) )\r\n\r\nA discussion issue is available at [core/2210](https://github.com/dotnet/core/issues/2210)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/96","RelatedDescription":"Open issue \"January 2019 .NET Updates\" (#96)"},{"Id":"397020176","IsPullRequest":false,"CreatedAt":"2019-01-08T18:00:27","Actor":"blowdart","Number":"95","RawContent":null,"Title":" Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a tampering vulnerability exists when .NET Core improperly handles specially crafted files. An attacker who successfully exploited this vulnerability could write arbitrary files and directories to certain locations on a vulnerable system. However, an attacker would have limited control over the destination of the files and directories.\r\n\r\nTo exploit the vulnerability, an attacker must send a specially crafted file to a vulnerable system\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core handles these files.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/34427\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nIf your application does not extract ZIP compressed files it is unaffected.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the [System.IO.Compression.ZipFile](https://www.nuget.org/packages/System.IO.Compression.ZipFile/) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nMicrosoft.NETCore.App (System.IO.Compression.ZipFile) | 2.1.0, 2.1.1, 2.1.2, 2.1.3, 2.1.4, 2.1.5, 2.1.6 | 2.1.7\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n`System.IO.Compression.ZipFile` is distributed as part of the .NET Core 2.1 runtime. To check the currently installed runtimes, open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed, you'll see output like the following;\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your host version is 2.1.x and the highest `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\nIf your host version is 2.2.x and the highest 2.1.x `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\n\r\nYou will not see SDK versions if you have only installed the runtime.\r\n\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nIf your host version is a 2.1.x host you must install version 2.1.7 or later of the [.NET Core 2.1 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.1), or corresponding [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\nIf your host version is a 2.2.x you must install version 2.2.1 or later of the [.NET Core 2.2 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.2), or corresponding  [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\nFinally, you must restart your applications once an updated runtime or SDK is installed.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgments\r\n\r\n[Danny Grander](https://twitter.com/grander) of [Snyk](https://snyk.io/)\r\n\r\n### External Links\r\n\r\n[CVE-2018-8416](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-8416)\r\n\r\n### Revisions\r\n\r\nV1.1 (January 9, 2019): Correct affected pacakge table.\r\nV1.0 (January 8, 2019): Advisory published.\r\n\r\n_Version 1.1_\r\n\r\n_Last Updated 2019-01-09_\r\n\r\n","Url":"https://github.com/dotnet/announcements/issues/95","RelatedDescription":"Open issue \" Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability\" (#95)"},{"Id":"397020142","IsPullRequest":false,"CreatedAt":"2019-01-08T18:00:23","Actor":"blowdart","Number":"94","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of an information disclosure vulnerability exists in .NET Framework and .NET Core which allows bypassing Cross-origin Resource Sharing (CORS) configurations. An attacker who successfully exploited the vulnerability could retrieve content, that is normally restricted, from a web application.\r\n\r\nThe security update addresses the vulnerability by enforcing CORS configuration to prevent its bypass.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/34428\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nMicrosoft has not identified any mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the [System.Net.Http](https://www.nuget.org/packages/System.Net.Http/) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nMicrosoft.NETCore.App (System.Net.Http) | 2.1.0, 2.1.1, 2.1.2, 2.1.3, 2.1.4, 2.1.5, 2.1.6 | 2.1.7\r\nMicrosoft.NETCore.App (System.Net.Http) | 2.2.0 | 2.2.1\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n#### Applications that use Microsoft.NetCore.App\r\n\r\n`System.Net.Http` is distributed as part of the .NET Core 2.1 runtime. To check the currently installed runtimes, open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed, you'll see output like the following;\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your host version is 2.1.x and the highest `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\nIf your host version is 2.2.x and the highest 2.1.x `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\n\r\nYou will not see SDK versions if you have only installed the runtime.\r\n\r\n#### Applications not using Microsoft.NetCore.App\r\n\r\nThe affected assembly is also available separately as a NuGet package. If you are not using Microsoft.NetCore.App, you may still be affected if you are referencing the packages listed above.\r\n\r\n##### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file. They can be fixed by [editing the project file](#fixing-direct-dependencies) or using NuGet to update the dependency.\r\n\r\n##### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects\r\n\r\nThe `project.assets.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json)).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `SSystem.Net.Http/4.3.0` is a reference to version 4.3.0 of `System.Net.Http`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\n#### Updating the version of Microsoft.NETCore.App\r\n\r\nIf your host version is a 2.1.x host you must install version 2.1.7 or later of the [.NET Core 2.1 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.1), or corresponding [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\nIf your host version is a 2.2.x you must install version 2.2.1 or later of the [.NET Core 2.2 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.2), or corresponding  [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\n#### <a name=\"fixing-direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.Net.Http` version 4.3.0\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.IO.Pipelines` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.5\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"transitive-dependencies\"></a>Fixing transitive dependencies\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.5\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n##### Rebuilding your application\r\n\r\nFinally, you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2019-0545](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0545)\r\n\r\n### Revisions\r\n\r\nV1.1 (January 9, 2019): Correct affected package table. \r\nV1.0 (January 8, 2019): Advisory published.\r\n\r\n_Version 1.1_\r\n\r\n_Last Updated 2019-01-09_\r\n","Url":"https://github.com/dotnet/announcements/issues/94","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability\" (#94)"},{"Id":"390948658","IsPullRequest":false,"CreatedAt":"2018-12-14T03:22:58","Actor":"wu-yafeng","Number":"93","RawContent":null,"Title":"Docker image with tag '2.2-aspnetcore-runtime' is not compatible","State":"closed","Body":"1. Install  .NET Core 2.2.100 sdk\r\n2. Create a new 'AspNetCore Web Api' by using Visual Studio 2017,and enbale docker support.\r\n3. F5 ,the Output Windows shows:\r\n>It was not possible to find any compatible framework version\r\n>The specified framework 'Microsoft.AspNetCore.App', version '2.2.0' was not found.\r\n>  - Check application dependencies and target a framework version installed at:\r\n>      /usr/share/dotnet/\r\n>  - Installing .NET Core prerequisites might help resolve this problem:\r\n>     http://go.microsoft.com/fwlink/?LinkID=798306&clcid=0x409\r\n>  - The .NET Core framework and SDK can be installed from:\r\n>      https://aka.ms/dotnet-download\r\n>  - The following versions are installed:\r\n>      2.2.0-preview3-35497 at [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]","Url":"https://github.com/dotnet/announcements/issues/93","RelatedDescription":"Closed issue \"Docker image with tag '2.2-aspnetcore-runtime' is not compatible\" (#93)"},{"Id":"390193072","IsPullRequest":false,"CreatedAt":"2018-12-12T12:56:53","Actor":"bilalmalik777","Number":"92","RawContent":null,"Title":".net core Console","State":"closed","Body":"I am running dot net core console app as web jobs and it is working perfectly in docker with docker compose. Now the issue is I want to pass a value to the application via Console.ReadLine() over this value i make some decision but i am unable to pass value via Console.ReadLine(). How i can do it please help me. For more understanding, i have added my docker compose file below\r\n`version: '3.4'\r\n\r\nservices:\r\n  \r\n  tt.core.web:\r\n    image: ${DOCKER_REGISTRY-}ttcoreweb\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.Web/Dockerfile\r\n    depends_on:\r\n     - db\r\n    networks:\r\n     - app-network\r\n\r\n  tt.core.downtime.webjob:\r\n    image: ${DOCKER_REGISTRY-}ttcoredowntimewebjob\r\n    environment:\r\n      CORE_ENVIRONMENT: devdocker\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.Downtime.Webjob/Dockerfile\r\n    depends_on:\r\n     - db\r\n     - tt.core.web\r\n    networks:\r\n     - app-network\r\n\r\n  db:\r\n    image: microsoft/mssql-server-linux\r\n    container_name: db\r\n    environment:\r\n      SA_PASSWORD: \"Thingtrax%1\"\r\n      ACCEPT_EULA: \"Y\"\r\n      MSSQL_PID: Express\r\n    ports:\r\n      - \"7002:1433\"\r\n    networks:\r\n      app-network:\r\n        ipv4_address: 172.24.0.2\r\n\r\nnetworks:\r\n  app-network:\r\n    ipam:\r\n      driver: default\r\n      config:\r\n        - subnet: 172.24.0.0/16\r\n\r\n`\r\nIf the detail is not enough or you do not get my point, you can share your confusion in comment","Url":"https://github.com/dotnet/announcements/issues/92","RelatedDescription":"Closed issue \".net core Console\" (#92)"},{"Id":"380346599","IsPullRequest":false,"CreatedAt":"2018-11-13T17:44:44","Actor":"leecow","Number":"91","RawContent":null,"Title":"November 2018 .NET Updates","State":"open","Body":"# November 2018 .NET Updates\r\n\r\nThe following .NET updates were released in November 2018. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Core\r\n\r\n* [.NET Core November 2018 (2.1.6 and SDK 2.1.500) Update release notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.6/2.1.6.md)\r\n\r\nA [discussion issue](https://github.com/dotnet/core/issues/2053) is available for questions or feedback about this release.\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n* [October 2018](https://github.com/dotnet/announcements/issues/89)\r\n* [September 2018](https://github.com/dotnet/announcements/issues/84)\r\n* [August 2018](https://github.com/dotnet/announcements/issues/79)\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)","Url":"https://github.com/dotnet/announcements/issues/91","RelatedDescription":"Open issue \"November 2018 .NET Updates\" (#91)"},{"Id":"375230004","IsPullRequest":false,"CreatedAt":"2018-10-29T21:45:27","Actor":"terrajobst","Number":"90","RawContent":null,"Title":"The future of JSON in .NET Core 3.0","State":"open","Body":"JSON has become an essential part of virtually all modern .NET applications and in many cases even surpassed the usage of XML. However, .NET hasn't had a (great) built-in way to deal with JSON. Instead we've relied on [Json.NET] which continues to serve the .NET ecosystem well.\r\n\r\n[Json.NET]: https://www.newtonsoft.com/json\r\n\r\nMoving forward, we plan on making some changes to our JSON support:\r\n\r\n* **We need high-performance JSON APIs**. We need a new set of JSON APIs that are highly tuned for performance by using `Span<T>` and allows for processing UTF-8 directly without having to transcode to UTF-16 `string` instances. Both aspects are critical for our web server Kestrel, where throughput is a key requirement.\r\n\r\n* **Remove dependency from ASP.NET Core to Json.NET**. Today, ASP.NET Core has a dependency on Json.NET. While this provides a tight integration between ASP.NET Core and Json.NET, it also means that application developers cannot freely choose which JSON library they are using. This is also problematic for customers of Json.NET as the version is dictated by the underlying platform. However, Json.NET is frequently updated and application developers often want to -- or even have to -- use a specific version. Thus, we want to remove the dependency from ASP.NET Core 3.0 to Json.NET so that customers can choose which version to use, without fearing they might accidentally break the underlying platform. In addition, this makes it also possible to plug-in an entirely different JSON library.\r\n\r\n* **Provide an ASP.NET Core integration package for Json.NET**. Json.NET has basically become the Swiss Army knife of JSON processing in .NET. It provides many options and facilities that allow customers to handle their JSON needs with ease. We don't want to compromise on the Json.NET support customers are getting today, for example, the ability to configure the JSON serialization via the `AddJsonOptions` extension method. Thus, we want to provide the Json.NET integration as a NuGet package that developers can optionally install so they get all the bells and whistles they get from Json.NET today. The other part of this work item is to ensure we have the right extension points so that other parties can provide similar integration packages for their JSON library of choice.\r\n\r\nBelow are more details around this plan.\r\n\r\n## The need for high-performance JSON APIs\r\n\r\nThe requirements for the .NET stack have changed a bit since the arrival of .NET Core. Historically, .NET has valued usability and convenience. With .NET Core, we've added a focus on performance, and we've made significant investments to serve high performance needs. And the [improvements we made][techempower] in the popular TechEmpower benchmark are a testament to that.\r\n\r\n[techempower]: https://www.techempower.com/blog/2016/11/16/framework-benchmarks-round-13/\r\n\r\nWith .NET Core 2.1, we've added a brand new primitive called [Span\\<T>][span-msdn] that allows us to represent native memory and arrays in a uniform way. With this type, we've also added a set of parsing and encoding APIs that are much more memory efficient without having to resort to unsafe code.\r\n\r\n[span-msdn]: https://msdn.microsoft.com/en-us/magazine/mt814808.aspx\r\n\r\nPart of the work of minimizing allocations is to avoid having to transcode UTF-8 payloads into UTF-16 strings, purely for parsing reasons. Currently, Json.NET is implemented by reading UTF-16. We need the ability to read (and write) JSON documents directly in UTF-8 because most network protocols (including HTTP) use UTF-8.\r\n\r\nDuring .NET Core 2.1 we've learned that updating our existing APIs to leverage `Span<T>` has limits. While we did add a bunch of overloads that accept spans, we also had to produce brand new APIs that are designed around minimizing allocations and dealing with buffers, which we exposed in `System.Buffers` namespaces. And with `System.IO.Pipelines` we've also added a programming model that enables developers to share buffers without having to deal with lifetime issues.\r\n\r\nBased on these experiences we believe in order to support JSON parsing, we'll need to expose a new set of JSON APIs that are specifically geared for high-performance scenarios.\r\n\r\nYou might wonder why we can't just update Json.NET to include support for parsing JSON using `Span<T>`? Well, James Newton-King -- the author of Json.NET -- has the following to say about that:\r\n\r\n> Json.NET was created over 10 years ago, and since then it has added a wide range of features aimed to help developers work with JSON in .NET. In that time Json.NET has also become far and away NuGet's most depended on and downloaded package, and is the go-to library for JSON support in .NET. Unfortunately, Json.NET's wealth of features and popularity works against making major changes to it. Supporting new technologies like `Span<T>` would require fundamental breaking changes to the library and would disrupt existing applications and libraries that depend on it.\r\n>\r\n> Going forward Json.NET will continue to be worked on and invested in, both addressing known issues today and supporting new platforms in the future. Json.NET has always existed alongside other JSON libraries for .NET, and there will be nothing to prevent you using one or more together, depending on whether you need the performance of the new JSON APIs or the large feature set of Json.NET.\r\n\r\n## Move Json.NET integration into a separate NuGet package\r\n\r\nToday, you cannot use ASP.NET Core without Json.NET because it is a dependency of ASP.NET Core itself. Over the years, we've received feedback that the dependency can conflict with other libraries that have their own dependency on a different version of Json.NET. In the past, we've considered addressing this issue by using a private copy of Json.NET in ASP.NET. However, this would create problems when developers want to configure Json.NET (for instance, in order to control how the serializer behaves when formatting JSON objects).\r\n\r\nMoving forward we'd like to:\r\n\r\n1. Replace the internal usage of Json.NET in ASP.NET Core by the new platform-provided JSON APIs.\r\n\r\n2. Factor the public facing usage of Json.NET into an optional integration package that can be acquired from NuGet.\r\n\r\nSo the existing integration between ASP.NET Core and Json.NET will continue to be supported, but will be moving out of the platform and into a separate package. However, since the integration is then designed to sit on top of the platform, it will also allow customers to update Json.NET to later versions.\r\n\r\nFurthermore, customers who need more performance can also choose to use the new JSON APIs, at the expense of the rich feature set that Json.NET offers.\r\n\r\n## Discussion\r\n\r\nFor a discussion, please go to https://github.com/dotnet/corefx/issues/33115.","Url":"https://github.com/dotnet/announcements/issues/90","RelatedDescription":"Open issue \"The future of JSON in .NET Core 3.0\" (#90)"},{"Id":"368440353","IsPullRequest":false,"CreatedAt":"2018-10-09T23:44:06","Actor":"vivmishra","Number":"89","RawContent":null,"Title":"October 2018 .NET Updates","State":"open","Body":"# October 2018 .NET Updates\r\n\r\nThe following .NET updates were released in October 2018. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Core\r\n\r\n* [.NET Core October 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/10/09/net-core-october-2018-update-net-core-1-0-and-1-1/)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n* [September 2018](https://github.com/dotnet/announcements/issues/84)\r\n* [August 2018](https://github.com/dotnet/announcements/issues/79)\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)","Url":"https://github.com/dotnet/announcements/issues/89","RelatedDescription":"Open issue \"October 2018 .NET Updates\" (#89)"},{"Id":"368429033","IsPullRequest":false,"CreatedAt":"2018-10-09T22:51:18","Actor":"leecow","Number":"88","RawContent":null,"Title":"Microsoft Security Advisory CVE-2018-8292: .NET Core Information Disclosure Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-8292: .NET Core Information Disclosure Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a security feature bypass vulnerability that exists when .NET Core when HTTP authentication information is inadvertently exposed in an outbound request that encounters an HTTP redirect. An attacker who successfully exploited this vulnerability could use the information to further compromise the web application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core applications handles HTTP redirects.\r\n\r\nSystem administrators running .NET Core 1.0 or .NET Core 1.1 applications must update their .NET Core runtimes to versions 1.0.13 and 1.1.10 then restart their applications. If installed applications target .NET Core 2.0, the applications must be migrated to 2.1 or newer and redeployed.\r\n\r\nDevelopers must update their .NET Core SDK to versions 1.1.11 and migrate any [.NET Core 2.0](https://docs.microsoft.com/dotnet/core/migration/20-21) or [ASP.NET Core 2.0](https://docs.microsoft.com/aspnet/core/migration/20_21?view=aspnetcore-2.1) applications to 2.1 then redeploy.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at <https://github.com/dotnet/corefx/issues/32730>\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nNone\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core application that runs on a .NET Core 1.0.x runtime with a version number of 1.0.12 or lower, or a .NET Core application that runs on a .NET Core 1.1.x runtime with a version number of 1.1.9 or lower, or a .NET Core application that runs on a .NET Core 2.0.x runtime.\r\n\r\nAdditionally package authors should check their dependencies to ensure they aren't depending on a vulnerable version of the following package:\r\n\r\n<a name=\"package-list\"></a>Package name | Vulnerable versions | Secure versions\r\n------------ | ---------------- | -------------------------\r\nSystem.Net.Http| 2.0.20126.16343, 2.0.20505, 2.0.20710, 4.0.0, 4.1.0, 4.1.1, 4.1.2, 4.3.0, 4.3.1, 4.3.2, 4.3.3 |  4.3.4 or later\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nAny .NET Core application that runs on a .NET Core 1.0.x runtime with a version number of 1.0.12 or lower, or a .NET Core application that runs on a .NET Core 1.1.x runtime with a version number of 1.1.9 or lower, or a .NET Core application that runs on a .NET Core 2.0.x runtime.\r\n\r\nTo check the currently installed runtimes and SDKs with version 2.1 or later of .NET Core, open a command prompt and run the `dotnet --info` command. You should see an output similar to the following:\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.1.403\r\n Commit:    04e15494b6\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17763\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.403\\\r\n\r\nHost (useful for support):\r\n  Version: 2.1.5\r\n  Commit:  290303f510\r\n\r\n.NET Core SDKs installed:\r\n  1.0.4 [C:\\Program Files\\dotnet\\sdk]\r\n  1.1.10 [C:\\Program Files\\dotnet\\sdk]\r\n  2.0.3 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.4 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf you don't see a runtime entry for 1.0.13 or 1.1.10, any .NET Core 1.x applications run on that computer are vulnerable.\r\n\r\nIf you don't have a 2.1 version of the runtime or SDK installed, you can produce the complete list of runtimes by performing a directory listing in the install root directories. The default root directories are listed in the following table:\r\n\r\n| Operating System | Location |\r\n|------------------|----------|\r\n| Windows | `C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\` |\r\n| macOS | `/usr/local/share/dotnet/shared/Microsoft.NETCore.App/` |\r\n| Supported Linux platforms | `/usr/share/dotnet/shared/Microsoft.NETCore.App/` |\r\n\r\nEach runtime version is installed in its own directory, where the directory name is the version number. If you don't have a directory for 1.0.13, 1.1.10 then any application targeting versions 1.0 or 1.1 are vulnerable.\r\n\r\nAdditionally, if you've deployed [self-contained applications](https://docs.microsoft.com/dotnet/core/deploying/#self-contained-deployments-scd) targeting any of the impacted versions, these applications are also vulnerable and must be recompiled and redeployed.\r\n\r\n### <a name=\"fix-runtime\">How do I fix the vulnerability?\r\n\r\nSystem administrators are advised to update their .NET Core runtimes to versions 1.0.13, 1.1.10 and install the latest 2.1 runtime, ensuring that any 2.0 applications are migrated to 2.1 as soon as possible.\r\n\r\n Developers are advised to update their .NET Core SDK to versions 1.1.11 and migrate any [.NET Core](https://docs.microsoft.com/dotnet/core/migration/20-21) or [ASP.NET Core 2.0](https://docs.microsoft.com/aspnet/core/migration/20_21?view=aspnetcore-2.1) applications to 2.1 and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at <https://github.com/dotnet/> and <https://github.com/aspnet/>, respectively. The Announcements repo for each product (<https://github.com/dotnet/Announcements> and <https://github.com/aspnet/Announcements>) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2018-8292](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-CVE-2018-8292)\r\n\r\n### Revisions\r\n\r\nV1.0 (October 10, 2018): Advisory published.\r\n_Version 1.0_\r\n_Last Updated 2018-10-10_\r\n","Url":"https://github.com/dotnet/announcements/issues/88","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2018-8292: .NET Core Information Disclosure Vulnerability\" (#88)"}],"ResultType":"GitHubIssue"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1158903079120470016","CreatedAt":"2019-08-07T00:50:00+00:00","UserScreenname":"dotnet","Text":"Try out Nullable Reference Types\n\nhttps://t.co/slv9yaObMI","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":116,"FavoriteCount":74,"RawContent":null},{"Id":"1158800246995992576","CreatedAt":"2019-08-06T18:01:23+00:00","UserScreenname":"dotnet","Text":"Improving .NET Core installation in Visual Studio and on Windows https://t.co/xLzfvAyAXw","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":40,"FavoriteCount":23,"RawContent":null},{"Id":"1158783788219940866","CreatedAt":"2019-08-06T16:55:58+00:00","UserScreenname":"dotnet","Text":"Join us live right now for another @dotnet #CommunityStandup with live demos and QA https://t.co/ptNZnKrqoO","Source":"<a href=\"https://www.elgato.com/gaming\" rel=\"nofollow\">Elgato Stream Deck</a>","RetweetCount":9,"FavoriteCount":1,"RawContent":null},{"Id":"1158741011876552706","CreatedAt":"2019-08-06T14:06:00+00:00","UserScreenname":"dotnet","Text":"Dive deep into the Visual Studio Test Platform with @gotheap &amp; @sarabjotkochar \n\nhttps://t.co/Uiitu1jeiG #VisualStudio #SoftwareTesting","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":20,"FavoriteCount":10,"RawContent":null},{"Id":"1157309583326633988","CreatedAt":"2019-08-02T15:18:01+00:00","UserScreenname":"dotnet","Text":"•Unity? ✔\n•Visual Studio? ✔\n•C#? ✔\n•41 videos on scripting fundamentals? ✔\n•$$$ - free\nCheck out our new, free lear… https://t.co/x9mazJYw7c","Source":"<a href=\"https://prod2.sprinklr.com\" rel=\"nofollow\">Sprinklr Publisher</a>","RetweetCount":139,"FavoriteCount":45,"RawContent":null},{"Id":"1156973009279733761","CreatedAt":"2019-08-01T17:00:35+00:00","UserScreenname":"dotnet","Text":"Join us live right now for another @dotnet #CommunityStandup with live demos and QA https://t.co/ptNZnKrqoO","Source":"<a href=\"https://www.elgato.com/gaming\" rel=\"nofollow\">Elgato Stream Deck</a>","RetweetCount":17,"FavoriteCount":5,"RawContent":null}]}},"RunOn":"2019-08-08T05:30:37.7779623Z","RunDurationInMilliseconds":15235}