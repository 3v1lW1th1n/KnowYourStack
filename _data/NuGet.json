{"Data":{"Blog":{"FeedItems":[{"Title":"NuGet.org will continue to support TLS 1.0 and 1.1 until further notice","PublishedOn":"2020-04-22T23:53:04+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Last November, we shared our two-stage plan for deprecating TLS 1.0/1.1 on NuGet.org and actions you can take today to ensure your systems use TLS 1.2. In that post, we announced that NuGet.org would...","Href":"https://devblogs.microsoft.com/nuget/nuget-org-will-continue-to-support-tls-1-0-and-1-1-until-further-notice/","RawContent":null},{"Title":"Deprecating TLS 1.0 and 1.1 on NuGet.org","PublishedOn":"2019-11-15T18:58:33+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"co-authored by Scott Bommarito\nAt Microsoft, using the latest and secure encryption techniques is very important to us to ensure the security and privacy of our customers. TLS 1.0 and TLS 1.1,...","Href":"https://devblogs.microsoft.com/nuget/deprecating-tls-1-0-and-1-1-on-nuget-org/","RawContent":null},{"Title":"Deprecating packages on nuget.org","PublishedOn":"2019-09-30T18:29:23+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We are excited to announce that nuget.org now supports package deprecation. This has been a long standing ask that will help the ecosystem use supported packages. As a package publisher on nuget.org,...","Href":"https://devblogs.microsoft.com/nuget/deprecating-packages-on-nuget-org/","RawContent":null},{"Title":"New and improved NuGet Search is here!","PublishedOn":"2019-08-23T03:31:26+00:00","CommentsCount":11,"FacebookCount":0,"Summary":"It’s been a long time coming, and today we are excited to announce the new and improved search on NuGet.org leveraging Azure Search. We want to start this post with a huge thanks to you, the NuGet...","Href":"https://devblogs.microsoft.com/nuget/new-and-improved-nuget-search/","RawContent":null},{"Title":"Surfacing GitHub Usage for packages on NuGet.org","PublishedOn":"2019-07-17T20:00:23+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"There are several criteria you can use today to evaluate NuGet packages. We received feedback that you would like even more information to help choose the right packages. We&#8217;re excited to...","Href":"https://devblogs.microsoft.com/nuget/surfacing-github-usage-for-packages-on-nuget-org/","RawContent":null},{"Title":"NuGet Spring 2019 Roadmap","PublishedOn":"2019-04-10T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We published our last NuGet roadmap in June last year. Many of the features announced were major additions to NuGet and we have been hard at work to implement those over the last few months. In this...","Href":"https://devblogs.microsoft.com/nuget/nuget-spring-2019-roadmap/","RawContent":null},{"Title":"Enable repeatable package restores using a lock file","PublishedOn":"2018-12-17T08:00:00+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"With PackageReference, NuGet always tries to produce the same closure of package dependencies if the input package reference list has not changed. However, there are a few scenarios where it may not...","Href":"https://devblogs.microsoft.com/nuget/enable-repeatable-package-restores-using-a-lock-file/","RawContent":null},{"Title":"Lock down your dependencies using configurable trust policies","PublishedOn":"2018-12-05T08:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"For the past several months we have focused on various features to improve package security and trust. Around a year back, we had announced our plans on various signing functionalities that we have...","Href":"https://devblogs.microsoft.com/nuget/lock-down-your-dependencies-using-configurable-trust-policies/","RawContent":null},{"Title":"Improved package debugging experience with the NuGet.org symbol server","PublishedOn":"2018-11-16T08:00:00+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Starting today, you can publish symbol packages to the NuGet.org symbol server. With NuGet.org as a single service provider for libraries and symbols, package authors and consumers will have a...","Href":"https://devblogs.microsoft.com/nuget/improved-package-debugging-experience-with-the-nuget-org-symbol-server/","RawContent":null},{"Title":"Introducing Source Code Link for NuGet packages","PublishedOn":"2018-08-27T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"NuGet.org now supports surfacing source code repository link for NuGet packages. This will enable package authors to surface both the project&#8217;s website and the source repository using the...","Href":"https://devblogs.microsoft.com/nuget/introducing-source-code-link-for-nuget-packages/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"12129843848","Type":"PullRequestEvent","CreatedAt":"2020-04-22T23:43:37","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/7960","RelatedDescription":"Opened pull request \"Remove redirects from error handling and clean Elmah\" (#7960) at NuGet/NuGetGallery","RelatedBody":"The core purpose of this change is to stop redirecting when some kind of error occurs. The root cause of this is the `ResponseRedirect` directive in the web.config. This makes telemetry more difficult because we see a lot of 302 cases but really it's a bad request or an exception getting thrown by our application.\r\n\r\nI also cleaned up the things that get logged to Elmah since this will make Elmah useful again to see real problems (right now it is flooded by nasty URL exceptions).\r\n\r\nI spent quite some time evaluating the best options and it seems there is not a very effective way to use the pretty error pages for cases that escape MVC error handling and are dealt with by IIS. Therefore, I introduced three simple HTML pages that IIS can `ResponseRewrite` to.\r\n\r\nWe can reduce the \"simple HTML\" cases by making our routes and error handling inside MVC more bullet proof in the future. This PR is meant to improve the \"what if\" when MVC itself bubbles an exception out.\r\n\r\nThis blog post has some of the background is you are interested:\r\nhttps://benfoster.io/blog/aspnet-mvc-custom-error-pages\r\n\r\nFixes:\r\n\r\n1. 400, 404, and 500 never redirect now.\r\n   - Example: `GET /.nuGetV3/feed.json:properties`\r\n     - Before: 302 to `/Errors/400?aspxerrorpath=/.nuGetV3/feed.json:properties`\r\n     - After: 400, but not the pretty HTML\r\n   - Example: `GET /packages/BaseTestPackage/invalid-version`\r\n     - Before: 302 to `/Errors/404?aspxerrorpath=/packages/BaseTestPackage/invalid-version`\r\n     - After: 404, but not the pretty HTML\r\n   - Example: `GET /pages/simulate-error?type=HttpException503`\r\n     - Before 302 to `/Errors/500?aspxerrorpath=/pages/simulate-error`\r\n     - After: 500, but not the pretty HTML\r\n2. Bad cookies now cause a 400 not a 500\r\n   - Example: cookie `__Controller::TempData` = `<script>alert(1)</script>`\r\n     - Before: 302 to `/Errors/500?aspxerrorpath=/`\r\n     - After: 400, but not the pretty HTML\r\n3. No longer put the following things in Elmah:\r\n   - HTTP 409 (these are common from functional tests)\r\n   - The nasty path exception\r\n     - Ex: `A potentially dangerous Request.Path value was detected from the client (:).`\r\n   - Exceptions coming from the simulated error routes\r\n\r\nProgress on https://github.com/NuGet/NuGetGallery/issues/7868."},{"Id":"12128777618","Type":"IssuesEvent","CreatedAt":"2020-04-22T21:08:28","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7959","RelatedDescription":"Opened issue \"Some 404 pages behave differently than others\" (#7959) at NuGet/NuGetGallery","RelatedBody":"Consider these URLs, which return a pretty 404 page and do not redirect.\r\n\r\n- https://www.nuget.org/does-not-exist\r\n- https://www.nuget.org/api/does-not-exist\r\n- https://www.nuget.org/packages/package--cannot--exist\r\n\r\nConsider these URLs, which redirect to a 404 page.\r\n\r\n- https://www.nuget.org/packages/BaseTestPackage/invalid-version\r\n- https://www.nuget.org/packages/BaseTestPackage/1.0.0/Mismanage\r\n\r\nIt makes telemetry more confusing and is arguably incorrect from an HTTP perspective to return a redirect when you really mean \"not found\"."},{"Id":"12127344549","Type":"PullRequestEvent","CreatedAt":"2020-04-22T18:33:47","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/7958","RelatedDescription":"Merged pull request \"Add simulated error for exceptions in view and error page\" (#7958) at NuGet/NuGetGallery","RelatedBody":"Progress on https://github.com/NuGet/NuGetGallery/issues/7868.\r\nAlso switched from diagnostics service to logger factory to aid in debugging."}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"12129270703","Type":"IssuesEvent","CreatedAt":"2020-04-22T22:10:57","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/6755","RelatedDescription":"Closed issue \"ResolveNuGetPackageAssets allocates 3.7% of solution-wide design-time build\" (#6755) at NuGet/Home","RelatedBody":"_From @davkean on September 26, 2017 12:55_\n\nThis is literally turning text -> text, can we do this without NewtonSoft.Json? Otherwise, try the lower level reader API that JSON.NET has?\r\n![image](https://user-images.githubusercontent.com/1103906/30861318-ab9065ec-a30d-11e7-98ce-04584375a089.png)\r\n\n\n_Copied from original issue: dotnet/sdk#1605_"},{"Id":"12129265932","Type":"IssuesEvent","CreatedAt":"2020-04-22T22:10:18","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/2001","RelatedDescription":"Closed issue \"TargetPath not set correctly for contentFiles\" (#2001) at NuGet/Home","RelatedBody":"When trying to use contentFiles with UWP project, the files were not copied to the expected subdirectory.\r\n\r\nHere's the nuspec:\r\nhttps://gist.github.com/onovotny/5d007fd323a8393412b9\r\n\r\nI expected Doc2.txt to be in the `AppX\\Resources\\Doc2.txt` directory. Instead, it was in `AppX\\Doc2.txt`\r\n\r\nLooking at a diagnostic build, it seems like the TargetPath metadata was not set correctly:\r\n\r\n```\r\n1>        C:\\Users\\oren\\.nuget\\packages\\TestWhitelist\\1.2.0\\contentFiles\\any\\uap10.0\\Resources\\Doc2.txt\r\n1>                NuGetItemType=Content\r\n1>                NuGetPackageId=TestWhitelist\r\n1>                NuGetPackageVersion=1.2.0\r\n1>                OriginalItemSpec=C:\\Users\\oren\\.nuget\\packages\\TestWhitelist\\1.2.0\\contentFiles\\any\\uap10.0\\Resources\\Doc2.txt\r\n1>                TargetPath=Doc2.txt\r\n```\r\n"},{"Id":"12129252089","Type":"IssuesEvent","CreatedAt":"2020-04-22T22:08:23","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/1863","RelatedDescription":"Closed issue \"GetProjectsReferencingProjectJson has wrong \"ProjectJson\" metadata for projectname.project.json\" (#1863) at NuGet/Home","RelatedBody":"The code today:\n\n```\n<ItemGroup Condition=\"'$(ResolveNuGetPackages)' == 'true'\">\n  <_ProjectReferencingProjectJsonFile Include=\"$(MSBuildProjectFullPath)\">\n    <ProjectReferences>@(ProjectReference)</ProjectReferences>\n    <ProjectJson>$(MSBuildProjectDirectory)\\project.json</ProjectJson>\n  </_ProjectReferencingProjectJsonFile>\n</ItemGroup>\n```\n\nThe ProjectJson is hard-coded to project.json, but it might have been [projectname].project.json in reality.\n\n(Mentioned internally in bug 149651 and also by @onovotny.)\n"},{"Id":"12129208413","Type":"IssuesEvent","CreatedAt":"2020-04-22T22:02:32","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/7255","RelatedDescription":"Closed issue \"ContentFiles: Embedded resources are always flattened\" (#7255) at NuGet/Home","RelatedBody":"When a NuGet package is created with content files in a nested directory structure, the (manifest) resource names of the embedded resources that are created for these files do not contain the relative directory path (with slashes converted to dots).\r\n\r\n### Steps to reproduce:\r\n\r\n1. Create a **NuGet** package with the following content:\r\n\r\n```\r\ncontentFiles\r\n                any\r\n                        any\r\n                                sub\r\n                                       myResource.txt\r\n```\r\n\r\n2.  In the **.nuspec** for this package, add the following fragment to the metadata element:\r\n\r\n```xml\r\n   <contentFiles>\r\n        <files include=\"**\" buildAction=\"EmbeddedResource\" />\r\n    </contentFiles>\r\n```\r\n\r\n3. Pack & Publish the **NuGet** package.\r\n4. Create (for example) a **C# Console App** project named **ConsoleApp1** (with default namespace **ConsoleApp1**¨)  in Visual Studio (15.8).\r\n5. Ensure that the default package management format is **PackageReference** in the *NuGet Package Manager Settings**.\r\n6. Add a reference to the **NuGet** package that we published in step **3**.\r\n7. Build the project.\r\n\r\n### Expected result:\r\n\r\nThe **myResource.txt** file is embedded in the **ConsoleApp1.exe** assembly with the name 'ConsoleApp1.sub.myResource.txt'.\r\n\r\n### Actual result:\r\n\r\nThe **myResource.txt** file is embedded in the **ConsoleApp1.exe** assembly with the name 'ConsoleApp1.myResource.txt'.\r\n\r\nNuGet product used: VS UI (15.8.1)\r\nOS version: Windows 7 Build 7601\r\n"},{"Id":"12129109066","Type":"IssuesEvent","CreatedAt":"2020-04-22T21:49:31","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/1856","RelatedDescription":"Closed issue \"ResolveNuGetPackageAssets will throw NullReferenceException when ProjectLanguage is not set\" (#1856) at NuGet/Home","RelatedBody":"See https://github.com/dotnet/buildtools/pull/341.  There should be a friendly error when ProjectLanguage is not set.\n"},{"Id":"12129099100","Type":"IssuesEvent","CreatedAt":"2020-04-22T21:48:13","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/1843","RelatedDescription":"Closed issue \"ResolveNuGetPackageAssets.ReferencedPackages returns the wrong result when dependencies are listed under framework\" (#1843) at NuGet/Home","RelatedBody":"Sample project:\r\n\r\n```\r\n{\r\n  \"dependencies\": {\r\n    \"System.Runtime\": \"4.0.0\",\r\n    \"System.Dynamic.Runtime\": \"4.0.0\",\r\n    \"System.Linq.Expressions\": \"4.0.0\"\r\n  },\r\n  \"frameworks\": {\r\n    \"dotnet5.1\": {\r\n      \"dependencies\": {\r\n        \"System.IO\": \"4.0.0\"\r\n      }\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nWhen building this I would expect the build task to return System.IO in the list of ReferencedPackages.  It does not.\r\n\r\nPotentially hacky fix: https://github.com/dotnet/buildtools/pull/368\r\n"},{"Id":"12128501213","Type":"IssuesEvent","CreatedAt":"2020-04-22T20:37:24","Actor":"cristinamanum","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/9467","RelatedDescription":"Opened issue \"[CPVM-OnBoard] Error on multiple entries for the same package ids in Directory.Packages.props\" (#9467) at NuGet/Home","RelatedBody":"\r\n## Details about Problem\r\n\r\nError on multiple entries for the same package ids in Directory.Packages.props.\r\n\r\nIn the current  design the first declared entry is honored and the others are ignored. \r\n\r\n"},{"Id":"12128452767","Type":"IssuesEvent","CreatedAt":"2020-04-22T20:32:00","Actor":"cristinamanum","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/9466","RelatedDescription":"Opened issue \"[CPVM-OnBoard] Support inheritance across Directory.packages.props\" (#9466) at NuGet/Home","RelatedBody":"\r\n## Details about Problem\r\n\r\n> Can Directory.Packages.props be arranged in multiple levels of the tree, such that different subtrees can have different default versions of packages? Is the goal to eventually aggregate the multi-level files so that the closest one overrides the parent ones but inherits what it doesn't change? Alternatively I suppose we can simply define the overrides in the nearer one and then <Import> the original one, since given the behavior you said it has, the subsequent ones that conflict will be ignored.\r\n\r\n\r\n\r\n"},{"Id":"12128348005","Type":"IssuesEvent","CreatedAt":"2020-04-22T20:20:28","Actor":"cristinamanum","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/9465","RelatedDescription":"Opened issue \"[CPVM-OnBoard] Support version overrides\" (#9465) at NuGet/Home","RelatedBody":"\r\n## Details about Problem\r\n\r\nFeature request\r\n\r\nCPVM support version overrides.\r\n\r\nCurrently one approach could be to use the Import MsBuild element but there is not a build in experience for the version overrides. \r\n\r\n``` xml\r\n<Project>\r\n\t  <ItemGroup>\r\n\t    <PackageVersion Include=\"Xunit.StaFact.Mac\" Version=\"1.0.24-beta-g88c3555268\"/>\r\n\t    <PackageVersion Include=\"xunit.stafact\" Version=\"1.0.24-beta-g88c3555268\"/>\r\n\t  </ItemGroup>\r\n\t\r\n\t  <Import Project=\"$([MSBuild]::GetDirectoryNameOfFileAbove($(MSBuildThisFileDirectory).., Directory.Packages.props))\\Directory.Packages.props\" Condition=\"'$([MSBuild]::GetDirectoryNameOfFileAbove($(MSBuildThisFileDirectory).., Directory.Packages.props))' != ''\" />\r\n\t</Project>\r\n\r\n```\r\n\r\n\r\n"},{"Id":"12128259918","Type":"IssuesEvent","CreatedAt":"2020-04-22T20:10:44","Actor":"cristinamanum","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/9464","RelatedDescription":"Opened issue \"[CPVM-OnBoard] Implicit flow of central transitive dependencies \" (#9464) at NuGet/Home","RelatedBody":"\r\n\r\n## Details about Problem\r\n\r\nFeature Request\r\nIssue details from customer\r\n\r\n> I really hope this doesn't become the new packages.config that was so hard to maintain since updating one package meant having to update so many other packages just so that the set of versions was coherent.\r\nIn this new CPV world, I'm seeing something very similar cropping up. Here's the scenario:\r\n•\tPackage A references package B\r\n•\tSome projects reference A while others reference B\r\n•\tI now have to specify the version for both A and B in my Directory.Packages.props\r\n•\tWhen I bump the version of A, I often get a warning that I am downgrading the version of B. I have to manually update B too.\r\nKey point: What I'd like to do is just specify Package A's version in my CPV file. The transitive closure of dependencies that specify B should imply a unified version of B in my repo so that anyone who references B directly automatically gets the same version that A points to. \r\nExplicitly specifying a version for B should of course be allowed.\r\nThe above scenario is the reduced form of what is actually a very large package graph. We have a metapackages or deep dependency trees yet projects frequently reach into many parts of that tree. I would much rather maintain just a few \"top-level\" package versions and let them automatically imply the versions that everyone should use who reach for only some subtrees of it.\r\n\r\nScenarios and expectations\r\nCase 1: \r\nPackageA 2.0.0 -> PackageB 2.0.0\r\nProjectA -> PackageA \r\nProjectB -> PackageB\r\n    \r\nDirectory.Packages.props\r\n``` xml\r\n    <PackageVersion Include=”PackageA” Version=”2.0.0” />\r\n ```\r\nDesired output:\r\nRestore ProjectB  resolve the PackageB to version 2.0.0\r\n \r\nCase 2: \r\nPackageA 2.0.0 -> PackageB 2.0.0\r\nProjectA -> PackageA \r\nProjectB -> PackageB\r\n    \r\nDirectory.Packages.props\r\n``` xml\r\n    <PackageVersion Include=”PackageA” Version=”2.0.0” />\r\n    <PackageVersion Include=”PackageB” Version=”3.0.0” />\r\n ```\r\nDesired output:\r\nRestore ProjectB  resolve the PackageB to version 3.0.0\r\nRestore ProjectA resolve PackageB to version 3.0.0\r\n \r\n \r\nCase 3: \r\nPackageA 2.0.0 -> PackageB 2.0.0\r\nPackageC 3.0.0 -> PackageB 3.0.0\r\n \r\nProjectA -> PackageA \r\nProjectB -> PackageB\r\n    \r\nDirectory.Packages.props\r\n``` xml\r\n   <PackageVersion Include=”PackageA” Version=”2.0.0” />\r\n   <PackageVersion Include=”PackageC” Version=”3.0.0” />\r\n```  \r\n \r\nDesired:\r\n\r\n> I would suggest we consider that just like we would if ProjectB referenced PackageA and PackageC: fail with an ambiguity and require that PackageB now be added to the Directory.Packages.props file. \r\nThe alternative I guess would be to take the higher of the two. But I don't think that's how nuget version conflicts are resolved today, and I can live with your current policy there.\r\n\r\n\r\n\r\n\r\n## Detailed repro steps so we can see the same problem\r\n\r\n1.\r\n\r\n2.\r\n\r\n...\r\n\r\n## Other suggested things\r\n\r\n### Verbose Logs\r\n\r\nPlease include verbose logs (NuGet.exe <COMMAND> -verbosity detailed | dotnet.exe <COMMAND> --verbosity diag | etc...)\r\n\r\n### Sample Project\r\n\r\nVery helpful if you can zip a project and paste into this issue!\r\n\r\n"},{"Id":"12126848786","Type":"IssuesEvent","CreatedAt":"2020-04-22T17:42:29","Actor":"donnie-msft","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/9449","RelatedDescription":"Closed issue \"Packages node lost its 'Manage NuGet Packages...'\" (#9449) at NuGet/Home","RelatedBody":"## Details about Problem\r\n\r\n'Manage NuGet Packages...' has disappeared from the **Packages node** in Solution Explorer.\r\nThis is likely due to recent work by Project System which rejiggered a lot of node GUIDs/IDs. \r\n\r\nNuGet product used: VS 16.6.0 Preview 2.1\r\nWorked before? VS 16.5.3\r\n\r\n## Detailed repro steps so we can see the same problem\r\n\r\n### Actual\r\n![image](https://user-images.githubusercontent.com/49205731/79519413-d1c75880-8021-11ea-8d98-1d7b667977cc.png)\r\n\r\n### Expected\r\n![image](https://user-images.githubusercontent.com/49205731/79519459-f0c5ea80-8021-11ea-9fac-5cff7113a914.png)\r\n\r\n/cc: @chgill-MSFT \r\n\r\n"},{"Id":"12126119249","Type":"IssuesEvent","CreatedAt":"2020-04-22T16:31:08","Actor":"Therzok","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/9463","RelatedDescription":"Opened issue \"HttpSourceAuthenticationHandler SemaphoreSlim future proofing\" (#9463) at NuGet/Home","RelatedBody":"## Details about Problem\r\n\r\nNuGet product used (NuGet.exe | VS UI | Package Manager Console | dotnet.exe): Any, I think.\r\n\r\nNuGet version (x.x.x.xxx): Any\r\n\r\nWorked before? If so, with which NuGet version: Yes, it works, just an improvement in the logic.\r\n\r\n## Detailed repro steps so we can see the same problem\r\n\r\n1.https://github.com/NuGet/NuGet.Client/blob/1fbc87841107a627c6f4349f733e48c28fcff028/src/NuGet.Core/NuGet.Protocol/HttpSource/HttpSourceAuthenticationHandler.cs#L22\r\n2.  In case `WaitAsync` throws, `Release` should not be called. Although, `WaitAsync` only is documented to throw `ObjectDisposedException`, which would cause `Release` to throw `ObjectDisposeException` later on, this would make the code resilient to changes to other overloads, which can throw other exceptions too, like `OperationCanceledException` if a cancellation token is passed.\r\n\r\nPR open already: https://github.com/NuGet/NuGet.Client/pull/3357\r\n"},{"Id":"12125439999","Type":"IssuesEvent","CreatedAt":"2020-04-22T15:32:35","Actor":"ghost1372","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/9462","RelatedDescription":"Opened issue \"Script not work on Dot Net Core 3.0\" (#9462) at NuGet/Home","RelatedBody":"Hi, I have a script that needs to be run after the package is installed. This works well in .NET Framework. But in .NET Core 3.0, the script does not run\r\n\r\nNuGet product used (NuGet.exe | VS UI | Package Manager Console | dotnet.exe):\r\n\r\ndotnet.exe --version (if appropriate): 5.3.1.6268\r\n\r\nVS version (if appropriate): 2019 16.6 pre 3\r\n\r\nOS version (i.e. win10 v1607 (14393.321)): win 10 - 18363"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"11608975127","Type":"IssuesEvent","CreatedAt":"2020-02-25T23:07:38","Actor":"karann-msft","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/42","RelatedDescription":"Opened issue \"Deprecating TLS 1.0 and 1.1 on NuGet.org – Stage 1\" (#42) at NuGet/Announcements","RelatedBody":"## NuGet.org will temporarily remove support for TLS 1.0/1.1 on February 26, 2020\r\n\r\nWe plan to temporarily remove support for TLS 1.0/1.1 across 3 time slots in a 24 hour period, for 4 hours each, to ensure overlap with normal working hours across the globe. If you discover that you are impacted and cannot identify a workaround, please open an issue on the NuGet Gallery GitHub repo.\r\n\r\nRead this blog post to learn more and to identify the test slot time in your time zone - https://devblogs.microsoft.com/nuget/deprecating-tls-1-0-and-1-1-on-nuget-org-stage-1/\r\n\r\n"},{"Id":"11502675218","Type":"IssuesEvent","CreatedAt":"2020-02-12T19:33:43","Actor":"karann-msft","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/41","RelatedDescription":"Opened issue \"Support pre-release packages with floating versions\" (#41) at NuGet/Announcements","RelatedBody":"|Spec wiki|Discussion issue|\r\n|----------|------------------|\r\n|[Support pre-release packages with floating versions](https://github.com/NuGet/Home/wiki/Support-pre-release-packages-with-floating-versions) | https://github.com/NuGet/Home/issues/912|"},{"Id":"11467027718","Type":"IssuesEvent","CreatedAt":"2020-02-08T01:39:00","Actor":"karann-msft","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/40","RelatedDescription":"Opened issue \"Add nuget sources command to the dotnet CLI\" (#40) at NuGet/Announcements","RelatedBody":"|Spec wiki|Discussion issue|\r\n|----------|------------------|\r\n|[Add nuget sources command to the dotnet CLI](https://github.com/NuGet/Home/wiki/Add-nuget-sources-command-to-the-dotnet-CLI) | https://github.com/NuGet/Home/issues/4126|"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1219766107269025792","CreatedAt":"2020-01-21T23:37:56+00:00","UserScreenname":"nuget","Text":"https://t.co/F9kiKfdOWi package publishing is currently facing technical difficulty and new packages pushed to… https://t.co/4E67LHHnbI","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":2,"FavoriteCount":2,"RawContent":null},{"Id":"1204812404573392897","CreatedAt":"2019-12-11T17:17:16+00:00","UserScreenname":"nuget","Text":"We are currently experiencing CDN issues in a few geographies.  https://t.co/F9kiKfdOWi services like package resto… https://t.co/0ZVMeF11CW","Source":"<a href=\"http://twitter.com/download/iphone\" rel=\"nofollow\">Twitter for iPhone</a>","RetweetCount":10,"FavoriteCount":8,"RawContent":null},{"Id":"1190360390980395008","CreatedAt":"2019-11-01T20:10:07+00:00","UserScreenname":"nuget","Text":"The issue with the publishing pipeline has been resolved and packages are now being published normally. https://t.co/NdK8mVk7UF","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":3,"FavoriteCount":0,"RawContent":null}]}},"RunOn":"2020-04-23T05:30:39.8538209Z","RunDurationInMilliseconds":1882}