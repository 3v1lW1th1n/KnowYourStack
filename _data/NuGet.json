{"Data":{"Blog":{"FeedItems":[{"Title":"New and improved NuGet Search is here!","PublishedOn":"2019-08-23T03:31:26+00:00","CommentsCount":4,"FacebookCount":0,"Summary":"It’s been a long time coming, and today we are excited to announce the new and improved search on NuGet.org leveraging Azure Search. We want to start this post with a huge thanks to you, the NuGet...","Href":"https://devblogs.microsoft.com/nuget/new-and-improved-nuget-search/","RawContent":null},{"Title":"Surfacing GitHub Usage for packages on NuGet.org","PublishedOn":"2019-07-17T20:00:23+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"There are several criteria you can use today to evaluate NuGet packages. We received feedback that you would like even more information to help choose the right packages. We&#8217;re excited to...","Href":"https://devblogs.microsoft.com/nuget/surfacing-github-usage-for-packages-on-nuget-org/","RawContent":null},{"Title":"NuGet Spring 2019 Roadmap","PublishedOn":"2019-04-10T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We published our last NuGet roadmap in June last year. Many of the features announced were major additions to NuGet and we have been hard at work to implement those over the last few months. In this...","Href":"https://devblogs.microsoft.com/nuget/nuget-spring-2019-roadmap/","RawContent":null},{"Title":"Enable repeatable package restores using a lock file","PublishedOn":"2018-12-17T08:00:00+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"With PackageReference, NuGet always tries to produce the same closure of package dependencies if the input package reference list has not changed. However, there are a few scenarios where it may not...","Href":"https://devblogs.microsoft.com/nuget/enable-repeatable-package-restores-using-a-lock-file/","RawContent":null},{"Title":"Lock down your dependencies using configurable trust policies","PublishedOn":"2018-12-05T08:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"For the past several months we have focused on various features to improve package security and trust. Around a year back, we had announced our plans on various signing functionalities that we have...","Href":"https://devblogs.microsoft.com/nuget/lock-down-your-dependencies-using-configurable-trust-policies/","RawContent":null},{"Title":"Improved package debugging experience with the NuGet.org symbol server","PublishedOn":"2018-11-16T08:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Starting today, you can publish symbol packages to the NuGet.org symbol server. With NuGet.org as a single service provider for libraries and symbols, package authors and consumers will have a...","Href":"https://devblogs.microsoft.com/nuget/improved-package-debugging-experience-with-the-nuget-org-symbol-server/","RawContent":null},{"Title":"Introducing Source Code Link for NuGet packages","PublishedOn":"2018-08-27T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"NuGet.org now supports surfacing source code repository link for NuGet packages. This will enable package authors to surface both the project&#8217;s website and the source repository using the...","Href":"https://devblogs.microsoft.com/nuget/introducing-source-code-link-for-nuget-packages/","RawContent":null},{"Title":"NuGet.org starts repo-signing packages","PublishedOn":"2018-08-10T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"In May, we implemented Stage 1 and enabled support for any NuGet.org user to submit signed packages to NuGet.org. Today, we are announcing Stage 2 of our NuGet package signing journey &#8211; tamper...","Href":"https://devblogs.microsoft.com/nuget/introducing-repository-signatures/","RawContent":null},{"Title":"NuGet Summer 2018 Roadmap","PublishedOn":"2018-07-02T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"This blog post provides insights into the NuGet team plans for the upcoming quarter (July &#8211; Sep 2018). In the March 2018 NuGet Spring 2018 Roadmap, we had outlined Package Signing,...","Href":"https://devblogs.microsoft.com/nuget/nuget-summer-2018-roadmap/","RawContent":null},{"Title":"Introducing signed package submissions to NuGet.org","PublishedOn":"2018-05-22T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"In September 2017, we announced our plans to improve the security of the NuGet ecosystem by introducing the ability for package authors to sign packages. Today, we want to announce support for any...","Href":"https://devblogs.microsoft.com/nuget/introducing-signed-package-submissions/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"10408090431","Type":"PullRequestEvent","CreatedAt":"2019-09-13T03:34:13","Actor":"agr","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/7556","RelatedDescription":"Opened pull request \"IconUrl deprecation message.\" (#7556) at NuGet/NuGetGallery","RelatedBody":"Addresses https://github.com/NuGet/NuGetGallery/issues/7478\r\n\r\nBrowser:\r\n![iconUrlDepr](https://user-images.githubusercontent.com/102933/64835790-3dcd7400-d59c-11e9-828d-7f56aa70fc9d.PNG)\r\n\r\nCommand line:\r\n![iconUrlDeprCL](https://user-images.githubusercontent.com/102933/64835801-5178da80-d59c-11e9-8456-f2579ed49205.PNG)\r\n"},{"Id":"10407551686","Type":"IssuesEvent","CreatedAt":"2019-09-13T00:43:40","Actor":"scottbommarito","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7555","RelatedDescription":"Opened issue \"If a manually created event on the status page has all of its messages deleted, it still affects status forever\" (#7555) at NuGet/NuGetGallery","RelatedBody":"1. On-call posts status message and creates event associated with it.\r\n2. On-call deletes status message instead of posting new message and deactivating event.\r\n3. Status page continues to show \"degraded\".\r\n\r\nA couple thoughts:\r\n- deleting all messages from a manually created event should delete it as well\r\n- it should be clearer to on-call what the process of posting a status message is\r\n\r\nWe had to mitigate this by manually inserting a new row into table storage.\r\nSpecifically:\r\n`partitionKey` - `manual`\r\n`rowKey` - (any guid)\r\n`EventStartTime` - start time of ghost event\r\n`EventAffectedComponent` - affected component of ghost event\r\n`Type` - 2"},{"Id":"10407429307","Type":"PullRequestEvent","CreatedAt":"2019-09-13T00:08:04","Actor":"dannyjdev","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/7554","RelatedDescription":"Opened pull request \"Secure database access on AutocompleteDatabasePackage*Query classes.\" (#7554) at NuGet/NuGetGallery","RelatedBody":"To be compliant with our processes I checked for any database access that can be compromised.\r\n\r\n* AutocompleteDatabase* classes were updated to use IReadOnlyEntityRepository.\r\n* dynamic sql queries removed from those classes.\r\n\r\nAddress: https://github.com/NuGet/Engineering/issues/2713"},{"Id":"10407257373","Type":"IssuesEvent","CreatedAt":"2019-09-12T23:23:53","Actor":"dannyjdev","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7553","RelatedDescription":"Closed issue \"[SDL] SQL Injection Investigation\" (#7553) at NuGet/NuGetGallery","RelatedBody":"Investigate if there are files in our projects that contain code that is not compliant.\n\nPart of: [[SDL] Use secure methods to access databases and storage](https://github.com/NuGet/Engineering/issues/2673)"},{"Id":"10407239907","Type":"IssuesEvent","CreatedAt":"2019-09-12T23:19:17","Actor":"dannyjdev","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7553","RelatedDescription":"Opened issue \"[SDL] SQL Injection Investigation\" (#7553) at NuGet/NuGetGallery","RelatedBody":"Investigate if there are files in our projects that contain code that is not compliant.\n\nPart of: [[SDL] Use secure methods to access databases and storage](https://github.com/NuGet/Engineering/issues/2673)"},{"Id":"10406999845","Type":"IssuesEvent","CreatedAt":"2019-09-12T22:24:01","Actor":"skofman1","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7468","RelatedDescription":"Closed issue \"Update docs link in header to point to https://docs.microsoft.com/nuget/\" (#7468) at NuGet/NuGetGallery","RelatedBody":""},{"Id":"10406991591","Type":"IssuesEvent","CreatedAt":"2019-09-12T22:22:17","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7552","RelatedDescription":"Opened issue \"[Azure Search] Add V3 monitoring check to verify that all packages make it into hijack index\" (#7552) at NuGet/NuGetGallery","RelatedBody":"Like https://github.com/NuGet/NuGetGallery/issues/7227 but for hijack index. Search query pattern is more important than hijack right now so this one should happen second."},{"Id":"10406943208","Type":"IssuesEvent","CreatedAt":"2019-09-12T22:12:14","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7551","RelatedDescription":"Opened issue \"Write a blog about the engineering side of Azure Search migration\" (#7551) at NuGet/NuGetGallery","RelatedBody":""},{"Id":"10406912670","Type":"IssuesEvent","CreatedAt":"2019-09-12T22:06:04","Actor":"agr","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7093","RelatedDescription":"Closed issue \"[Icons] Icon-related Gallery UI while package is being published\" (#7093) at NuGet/NuGetGallery","RelatedBody":"Need to ensure proper fallbacks are in place and message is displayed in Gallery for the package owner regarding the package availability while indexing."},{"Id":"10406912558","Type":"IssuesEvent","CreatedAt":"2019-09-12T22:06:03","Actor":"agr","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7239","RelatedDescription":"Closed issue \"[Icons] Gallery embedded icon preview for validate package page\" (#7239) at NuGet/NuGetGallery","RelatedBody":"Icon should be displayed on the validate package page right after package upload."},{"Id":"10406912549","Type":"IssuesEvent","CreatedAt":"2019-09-12T22:06:03","Actor":"agr","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7063","RelatedDescription":"Closed issue \"[Icons] Gallery embedded icon validation\" (#7063) at NuGet/NuGetGallery","RelatedBody":"* File size check;\r\n* File format check;\r\n* zip bomb check;\r\n* tests;"},{"Id":"10406808057","Type":"IssuesEvent","CreatedAt":"2019-09-12T21:46:36","Actor":"loic-sharma","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7550","RelatedDescription":"Opened issue \"[Registration] Improve \"ProcessBatchSeconds\" metric on failure\" (#7550) at NuGet/NuGetGallery","RelatedBody":"The catalog2registration job records a `ProcessBatchSeconds` metric each time a batch finishes (even if the batch fails). It's unclear from this metric whether that batch succeeded or not, we should consider adding a `success` dimension. This would help on-call investigations"},{"Id":"10406719216","Type":"PullRequestEvent","CreatedAt":"2019-09-12T21:31:07","Actor":"skofman1","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/7541","RelatedDescription":"Merged pull request \"Build&Sign config for GalleryTools\" (#7541) at NuGet/NuGetGallery","RelatedBody":"Required for https://github.com/NuGet/Engineering/issues/2697"},{"Id":"10406465240","Type":"IssuesEvent","CreatedAt":"2019-09-12T20:51:58","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7549","RelatedDescription":"Opened issue \"[Deployment] Week of 2019-09-16\" (#7549) at NuGet/NuGetGallery","RelatedBody":"- [ ] INT\r\n  - [ ] Scan and sign job ([release](https://devdiv.visualstudio.com/DevDiv/_build/results?buildId=3043358&view=results))\r\n- [ ] PROD\r\n  - [ ] Scan and sign job ([release](https://devdiv.visualstudio.com/DevDiv/_build/results?buildId=3043358&view=results))\r\n\r\n### Changes\r\n\r\n- Add queue-back to scan and sign submitter (https://github.com/NuGet/NuGetGallery/issues/7483)"}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"10407613786","Type":"IssuesEvent","CreatedAt":"2019-09-13T01:03:17","Actor":"ghogen","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8586","RelatedDescription":"Opened issue \"NU1101 in ASP.NET Core template projects with VS 2019 16.3 Preview 3\" (#8586) at NuGet/Home","RelatedBody":"\r\n## Details about Problem\r\nI just installed VS 2019 16.3 Preview 3 and created a Web Application project (tried .NET Core 2.1 and .NET Core 3.0) and noticed that my NuGet packages are not restoring properly, so that out-of-the-box templates didn’t build.  I was getting NU1101 – couldn’t locate the package in the source ‘Microsoft VisualStudio Offline Packages’.\r\n\r\nI was able to get these to build by going into “NuGet Package Manager” and adding a new package source as follows:\r\n\r\nhttps://api.nuget.org/v3/index.json\r\n\r\nSo it would seem that VS is not setting things up correctly with the right package sources, or something.\r\n\r\nNuGet product used ( VS UI ):\r\n\r\nNuGet version ():\r\n\r\nVS version (if appropriate): 16.3 Preview 3\r\n\r\nOS version (iwin10 v1903)\r\n\r\n"},{"Id":"10407375476","Type":"IssuesEvent","CreatedAt":"2019-09-12T23:53:56","Actor":"dominoFire","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8582","RelatedDescription":"Closed issue \"Removing all packages from created as a test\" (#8582) at NuGet/Home","RelatedBody":"Hi,\r\nI will publish my first set of Packages to NuGet, but before doing so I created a small test library and published 3 packages versions with NuGet CLI.\r\nNow I would like to exclude all ( they are just tests ! ) but the only option I find is \"delete/unlist\".\r\nHow could I get rid of them ?\r\nWill NuGet keep this packages forever ?\r\n\r\nhttps://www.nuget.org/packages/Mock\r\n\r\nThanks\r\n"},{"Id":"10406466665","Type":"IssuesEvent","CreatedAt":"2019-09-12T20:52:09","Actor":"donnie-msft","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8585","RelatedDescription":"Opened issue \"NuGet Client Package Version should link to commit in Source Code\" (#8585) at NuGet/Home","RelatedBody":"## Details about Problem\r\nIn https://github.com/NuGet/NuGetGallery/issues/7537, I suggested NuGet.org display a link to the commit for each package version where we know the commit hash, and the repository (eg, GitHub).\r\n\r\nFirst, NuGet UI / List need to show the repositoryUrl in the first place: https://github.com/NuGet/Home/issues/8584\r\n\r\nOnce that parity is complete, the NuGet Client should also show the link to the \"revision\" (or, commit) just as NuGet.org is now doing.\r\n\r\nGeneral area I'm thinking in VS (any tab could show this in the detail), both Solution and Project views. Likely would want this immediately below the Repository URL, once that's added:\r\n![image](https://user-images.githubusercontent.com/49205731/64819812-f7f4b980-d563-11e9-9c04-24ad14e33075.png)\r\n"},{"Id":"10406407624","Type":"IssuesEvent","CreatedAt":"2019-09-12T20:43:30","Actor":"donnie-msft","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8584","RelatedDescription":"Opened issue \"Display repositoryUrl in PM UI and maybe List\" (#8584) at NuGet/Home","RelatedBody":"## Details about Problem\r\nRepository URL should be displayed in the PM UI, when available. Nuget.org currently shows this, and would be nice to have parity inside of VS. \r\n\r\nAdditionally, `nuget list <...> -verbosity detailed` could show this as well? We show License URL there, today.\r\n\r\nGeneral area I'm thinking in VS (any tab could show this in the detail), both Solution and Project views.\r\n![image](https://user-images.githubusercontent.com/49205731/64819231-a4ce3700-d562-11e9-95c4-cfd2b98fa356.png)\r\n\r\nNuGet product used: VS UI\r\n"},{"Id":"10405119691","Type":"IssuesEvent","CreatedAt":"2019-09-12T17:40:45","Actor":"ericstj","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8583","RelatedDescription":"Opened issue \"Projects which set IncludeBuildOutput=false are likely to hit NU5128\" (#8583) at NuGet/Home","RelatedBody":"## Details about Problem\r\nMany projects set IncludeBuildOutput=false, then manually define the layout of their package.  In case they are defining content other than lib/ref (eg: build/*, tools, or SDK) they are likely to hit NU5218, since the project's dependencies will make it into the package: IncludeBuildOutput does not control the inclusion of dependencies.\r\n\r\nNuGet product used (NuGet.exe | VS UI | Package Manager Console | dotnet.exe):\r\ndotnet.exe\r\n\r\nNuGet version (x.x.x.xxx):\r\n5.3.0.6192\r\n\r\ndotnet.exe --version (if appropriate):\r\n3.0.0-rc1-19455-02\r\n\r\nVS version (if appropriate):\r\nN/A\r\n\r\nOS version (i.e. win10 v1607 (14393.321)):\r\nN/A\r\n\r\nWorked before? If so, with which NuGet version:\r\nYes, dotnet 2.x, past previews of 3.0\r\n\r\n## Detailed repro steps so we can see the same problem\r\n\r\n1. Run `dotnet pack` against the following project:\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <TargetFramework>netstandard2.0</TargetFramework>\r\n    <IncludeBuildOutput>false</IncludeBuildOutput>\r\n    <IsPackable>true</IsPackable>\r\n    <TreatWarningsAsErrors>true</TreatWarningsAsErrors>\r\n  </PropertyGroup>\r\n  \r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Text.Json\" Version=\"4.6.0-rc2.19461.4\" />\r\n  </ItemGroup>\r\n\r\n</Project>\r\n```\r\n\r\nExpect: no build errors\r\nActual: build errors due to warnings as errors for NU5128.  \r\n\r\nWorkaround is to set `<SuppressDependenciesWhenPacking>true</SuppressDependenciesWhenPacking>` as *may* be the intent for a project setting `<IncludeBuildOutput>false</IncludeBuildOutput>`.  I don't think this is *always* the intent, so I don't think this property should be derived from `IncludeBuildOutput`.\r\n\r\n## Other suggested things\r\nIssue is originally discussed here: https://github.com/dotnet/arcade/pull/3861#issuecomment-530048779\r\n\r\nRelated: https://github.com/NuGet/Home/issues/8576\r\n\r\n### Verbose Logs\r\n\r\nhttps://github.com/NuGet/Home/files/3602557/msbuild.binlog.zip\r\n\r\n### Sample Project\r\n\r\nSee above\r\n\r\n"},{"Id":"10403517623","Type":"IssuesEvent","CreatedAt":"2019-09-12T14:24:52","Actor":"EasyLOB","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8582","RelatedDescription":"Opened issue \"Removing all packages from created as a test\" (#8582) at NuGet/Home","RelatedBody":"Hi,\r\nI will publish my first set of Packages to NuGet, but before doing so I created a small test library and published 3 packages versions with NuGet CLI.\r\nNow I would like to exclude all ( they are just tests ! ) but the only option I find is \"delete/unlist\".\r\nHow could I get rid of them ?\r\nWill NuGet keep this packages forever ?\r\n\r\nhttps://www.nuget.org/packages/Mock\r\n\r\nThanks\r\n"},{"Id":"10401035681","Type":"IssuesEvent","CreatedAt":"2019-09-12T09:03:44","Actor":"v-luzh","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8581","RelatedDescription":"Opened issue \"[Test Failure] Same project reference names have different casings in lock file \" (#8581) at NuGet/Home","RelatedBody":"## Details about Problem\r\nNuGet version: NuGet Client Dev\\5.4.0.6233\r\nVS Version: Master\\29311.58\r\nOS: Windows-10-Enterprise-19H1-04-05-2019\r\n## Detailed repro steps \r\n1. Create a solution with three .NET Core Class Library projects (named Lib1/Lib2/Lib3), make the project graph structure: Lib1 -> Lib2 -> Lib3 through “Add reference” context menu in Solution Explorer. \r\n2. Set property “RestorePackagesWithLockFile” to true in csproj file of Lib1.\r\n3. Restore the solution and look at the generated lock file “packages.lock.json”.\r\n## Expected\r\nSame project reference names should have the same casings in lock file.\r\n## Actual\r\nSame project reference names have different casings in lock file as below screenshot.\r\n![CasingIssue](https://user-images.githubusercontent.com/20632625/64770080-12885c00-d57f-11e9-8f58-393ddbe5fa72.png)\r\n\r\n## Note\r\nIt started to repro from fixing of the bug [7840.](https://github.com/NuGet/Home/issues/7840)\r\n\r\n"},{"Id":"10400629392","Type":"IssuesEvent","CreatedAt":"2019-09-12T08:09:23","Actor":"jwillmer","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8580","RelatedDescription":"Opened issue \"Invalid or unrecognized response\" (#8580) at NuGet/Home","RelatedBody":"I run the following script in GitHub Actions:\r\n\r\n```\r\n      - name: Publish Nuget to GitHub registry\r\n        run: dotnet nuget push ./MyNugetPackage.3.4.24.nupk -s https://nuget.pkg.github.com/USERNAME/index.json -k ${GITHUB_TOKEN}  \r\n        env:\r\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\r\n```\r\n\r\nand I get the following output:\r\n\r\n```\r\n\r\nRun nuget push ./MyNugetPackage.3.4.24.nupk -Source https://nuget.pkg.github.com/USERNAME/index.json\r\nPushing MyNugetPackage.3.4.24.3.4.24.nupkg to 'https://nuget.pkg.github.com/USERNAME'...\r\n  PUT https://nuget.pkg.github.com/USERNAME/\r\nAn error was encountered when fetching 'PUT https://nuget.pkg.github.com/USERNAME/'. The request will now be retried.\r\nAn error occurred while sending the request.\r\n  The server returned an invalid or unrecognized response.\r\n  PUT https://nuget.pkg.github.com/USERNAME/\r\nAn error was encountered when fetching 'PUT https://nuget.pkg.github.com/USERNAME/'. The request will now be retried.\r\nAn error occurred while sending the request.\r\n  The server returned an invalid or unrecognized response.\r\n  PUT https://nuget.pkg.github.com/USERNAME/\r\nAn error occurred while sending the request.\r\n  The server returned an invalid or unrecognized response.\r\n##[error]Process completed with exit code 1.\r\n```\r\n\r\nI'm running my code inside of `ubuntu-latest` (18.04) that has the following versions installed: [software-in-virtual-environments-for-github-actions](https://help.github.com/en/articles/software-in-virtual-environments-for-github-actions#ubuntu-1804-lts)\r\n\r\nCan someone help me explain what this error means? I don't know how to solve this.\r\n"},{"Id":"10398738774","Type":"IssuesEvent","CreatedAt":"2019-09-12T01:02:18","Actor":"dominoFire","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8579","RelatedDescription":"Opened issue \"Escrow builds fails in OptProfV2 CI tasks\" (#8579) at NuGet/Home","RelatedBody":"## Details about Problem\r\n\r\nWhen you set `$IsEscrowMode = true` and increment `$NetCoreAssemblyVersionNumber`, official CI builds start to fail.\r\n\r\nWorked before? If so, with which NuGet version:\r\nLast good build is 5.3.0.6234\r\n\r\n## Detailed repro steps so we can see the same problem\r\n\r\nManually trigger an official CI build\r\n\r\n### Verbose Logs\r\nhttps://devdiv.visualstudio.com/DevDiv/_build/results?buildId=3042987&view=logs&j=8460ae35-dae7-5d3d-b89d-5bc71d24ad43\r\n\r\nFailing task is `OptProfV2:  set the TestDrop environment variable`:\r\n\r\nLogs (edited):\r\n\r\n```\r\nStarting: OptProfV2:  set the TestDrop environment variable\r\n==============================================================================\r\nTask         : PowerShell\r\nDescription  : Run a PowerShell script\r\nVersion      : 1.2.3\r\nAuthor       : Microsoft Corporation\r\nHelp         : [More Information](https://go.microsoft.com/fwlink/?LinkID=613736)\r\n==============================================================================\r\n. 'C:\\Users\\dlab14\\AppData\\Local\\Temp\\66624a9b-6200-4bea-969f-34289437c52c.ps1' \r\nBuild drop:  \r\n##[error]Exception calling \"Substring\" with \"1\" argument(s): \"startIndex cannot be larger than length of string.\r\nParameter name: startIndex\"\r\nAt C:\\Users\\dlab14\\AppData\\Local\\Temp\\66624a9b-6200-4bea-969f-34289437c52c.ps1:7 char:1\r\n+ [string] $testDropPath = $buildDropPath.Replace('/Products/', '/Tests ...\r\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n    + CategoryInfo          : NotSpecified: (:) [], MethodInvocationException\r\n    + FullyQualifiedErrorId : ArgumentOutOfRangeException\r\n \r\n\r\nTest drop:  \r\n##[error]Process completed with exit code 0 and had 1 error(s) written to the error stream.\r\nFinishing: OptProfV2:  set the TestDrop environment variable\r\n```"},{"Id":"10398669362","Type":"IssuesEvent","CreatedAt":"2019-09-12T00:42:08","Actor":"dominoFire","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8578","RelatedDescription":"Opened issue \"Related OptProfV2 related tasks run even if `ShouldSkipOptimize = true`\" (#8578) at NuGet/Home","RelatedBody":"## Details about Problem\r\n\r\nIf you set `ShouldSkipOptimize = true` when you queue a build, the OptProfV2 install task is skipped but, the remaining related tasks are executed, leading to undefined behaviors.\r\n\r\nWorked before? If so, with which NuGet version: \r\nLast good build is 5.3.0.6234\r\n\r\n## Detailed repro steps so we can see the same problem\r\n\r\n1. Manually trigger an official build.\r\n\r\n### Sample Project\r\n\r\nN/A"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"10286366828","Type":"IssuesEvent","CreatedAt":"2019-08-26T13:37:09","Actor":"karann-msft","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/38","RelatedDescription":"Opened issue \"New and improved NuGet Search is live!\" (#38) at NuGet/Announcements","RelatedBody":"Announcing the new and improved search on NuGet.org leveraging Azure Search.\r\n\r\n[Blogpost](https://devblogs.microsoft.com/nuget/new-and-improved-nuget-search/) | [Feedback Issue](https://github.com/NuGet/NuGetGallery/issues/4124)"},{"Id":"10168692521","Type":"IssuesEvent","CreatedAt":"2019-08-07T21:31:54","Actor":"anangaur","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/37","RelatedDescription":"Opened issue \"Using OData to query NuGet.org repository is being deprecated\" (#37) at NuGet/Announcements","RelatedBody":"We introduced `V3 APIs` in early 2016. We have made continuous investments to make it more reliable, performant and secure. Going forward, we plan to bring all new features and improvements only to the newer `V3 APIs`. As part of this strategy, we are deprecating the usage of `OData` queries. Subsequently, we plan to **disable the `OData` queries starting Feb 5th, 2020**.\r\n\r\n**Call to Action: Transition to V3 APIs**\r\n\r\nHere are some resources to help you with the migration:\r\n* [NuGet Server `V3 APIs` reference](https://devblogs.microsoft.com/nuget/switching-from-wcf-odata-to-web-api/)\r\n* [Guide to transition from NuGet `V2 API` to `V3 API`](https://docs.microsoft.com/en-us/nuget/guides/api/query-for-all-published-packages). \r\n* [Blog post: Switching from WCF OData to Web API](https://devblogs.microsoft.com/nuget/switching-from-wcf-odata-to-web-api/)\r\n\r\nIf you need further help in moving your use case to `V3 APIs`, do reach out to us at [support@nuget.org](mailto:support@nuget.org).\r\n"},{"Id":"10115721045","Type":"IssuesEvent","CreatedAt":"2019-07-30T22:44:31","Actor":"shoter","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Announcements/issues/36","RelatedDescription":"Closed issue \"Replace reference to codeplex issue numer 3072\" (#36) at NuGet/Announcements","RelatedBody":"This is copy of codeplex issue number 3072 as it is referenced inside code. I should do a PR shortly to address this one.\r\n\r\nThe place where it is referenced is RuntimeHelper.cs:150\r\n\r\n\r\n---\r\n\r\nWe're hitting an issue with Microsoft.Bcl package where NuGet is adding a binding redirect for a binary that is considered part of the framework, this causes the application to crash because the binding redirect refers to assembly version that is not available at runtime.\r\n\r\n@Repro:\r\n\r\n1. Create a new Console Application targeting 4.5\r\n2. Create a new Portable Library targeting .NET Framework 4.5, Silverlight 4, Windows Phone 7.5 and .NET for Windows Store apps\r\n3. Add a reference to the portable library from the Console Application\r\n4. Install the Microsoft.Bcl package (1.0.16-rc) to both projects\r\n\r\n@Expected: No binding redirect for System.Runtime in the .NET Framework 4.5 project because a ___later version___ is part of the target framework (see C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.5\\RedistList\\FrameworkList.xml)\r\n@Actual: Binding redirect\r\n\r\n<dependentAssembly>\r\n<assemblyIdentity name=\"System.Runtime\" publicKeyToken=\"b03f5f7f11d50a3a\" culture=\"neutral\" />\r\n<bindingRedirect oldVersion=\"0.0.0.0-1.5.11.0\" newVersion=\"1.5.11.0\" />\r\n</dependentAssembly>\r\n\r\n\r\nYou can use the IVsFrameworkMultiTargeting to determine if a given assembly version is available as part of a given target framework.\r\nMake sure when you fix this, that you only skip the binding redirect if ___a later or same version___ is available in the framework.  \r\n2013-02-22\r\n\r\n---\r\n\r\nWe'll do this in 2.4 release.  \r\n2013-02-26\r\n\r\n---\r\n\r\nIs IVsFrameworkMultiTargeting.IsReferenceableInTargetFx the method I need to call? What should I pass to pwszAssemblySpec?  \r\n2013-06-08\r\n\r\n---\r\n\r\nIt's the full name of the assembly (mscorlib, Version=[version], PublicKeyToken=[token], Culture=[culture]). It can either contain all the information (key, version, etc), or just the simple name (\"mscorlib\")  \r\n2013-06-10\r\n\r\n---\r\n\r\nSo look like I can only check for the same version of the target framework. Can't check for a later version using this method, because I don't know what future versions will be.  \r\n2013-06-12\r\n\r\n---\r\n\r\nThat's fine. That's exactly the behavior we want. For example, System.Runtime didn't ship in 4.0, but did in 4.5. We still want a binding redirect generated for it in 4.0, but not for 4.5.  \r\n2013-06-13\r\n\r\n---\r\n\r\nI followed the exact same steps above, but there's no binding redirect added to the Console Application. It's only added to the __Portable Library project__. Is that the bug?  \r\n2013-06-13\r\n\r\n---\r\n\r\nThe binding redirects added to the Portable Library project seems to come from the Microsoft.Bcl package itself (from the content folder's app.config.transform file). this looks like a non-bug.\r\n2013-06-13\r\n\r\n  \r\nI'm chasing up the repro with Eric St. John. He walked through the code and figured out where it was broken.\r\n\r\nIt's the not the app.config.tranform, notice how the net45 content is empty, and hence no transforms. We also marked our transforms with a special marker that indicates that we added the redirects . The binding redirects we were seeing were not coming from us.  \r\n2013-06-13\r\n\r\n---\r\n\r\nAre you seeing the binding redirects added to the Console Application or the Portable Library? I don't see binding redirect added to Console Application, only the Portable Library.  \r\n2013-06-13\r\n\r\n---\r\n\r\nYes I'm talking about the ConsoleApplication. The binding redirects in the portable library project are expected, and do not affect runtime behavior (as the app.config is ignored and not copied to the app project), and hence can't cause an application to crash.\r\n\r\nI've found another repro (NuGet has really weird logic around when it decides to add binding redirects so it was hard to find a repro).\r\n\r\nThe repro is instead of using the Microsoft.Bcl package, install the Microsoft.Net.Http, 2.2.3-beta package. Make sure you are targeting __4.5__ from the ConsoleApplication and the exact platforms that I called out above for portable.  \r\n2013-06-13\r\n\r\n---\r\n\r\nAlso, the ConsoleApplication must be referencing the portable project before installing the package.  \r\n2013-06-13\r\n\r\n---\r\n\r\nOK now I can repro  \r\n2013-06-14\r\n\r\n---\r\n\r\nOK, I've got a fix now. It no longer adds the binding redirect for System.Runtime.dll, but still adds one for System.Net.Http.Primitives. I guess it's expected, right? Please confirm.\r\n\r\n```\r\n<assemblyBinding xmlns=\"urn:schemas-microsoft-com:asm.v1\">\r\n<dependentAssembly>\r\n<assemblyIdentity name=\"System.Net.Http.Primitives\" publicKeyToken=\"b03f5f7f11d50a3a\" culture=\"neutral\" />\r\n<bindingRedirect oldVersion=\"0.0.0.0-4.2.3.0\" newVersion=\"4.2.3.0\" />\r\n</dependentAssembly>\r\n</assemblyBinding>\r\n```  \r\n2013-06-14\r\n\r\n---\r\n\r\n\r\nYes that's correct. System.Net.Http.Primitives does not exist in the framework.  \r\n2013-06-14\r\n\r\n---\r\n\r\nFixed in changeset b8d515f6341193b970d2a9d837e580e762d2eb71  \r\n2013-06-19\r\n\r\n---\r\n\r\ni get the same issue with my test project still, runtime being added... if i comment this out the tests run fine... if not i get exceptions thrown from json.net  \r\n2013-08-09\r\n\r\n---\r\n\r\n(or i can change the version up to 4.0.0.0 or something and it works)  \r\n2013-08-09"},{"Id":"10115715827","Type":"IssuesEvent","CreatedAt":"2019-07-30T22:43:23","Actor":"shoter","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/36","RelatedDescription":"Opened issue \"Replace reference to codeplex issue numer 3072\" (#36) at NuGet/Announcements","RelatedBody":"This is copy of codeplex issue number 3072 as it is referenced inside code. I should do a PR shortly to address this one.\r\n\r\nThe place where it is referenced is RuntimeHelper.cs:150\r\n\r\n\r\n---\r\n\r\nWe're hitting an issue with Microsoft.Bcl package where NuGet is adding a binding redirect for a binary that is considered part of the framework, this causes the application to crash because the binding redirect refers to assembly version that is not available at runtime.\r\n\r\n@Repro:\r\n\r\n1. Create a new Console Application targeting 4.5\r\n2. Create a new Portable Library targeting .NET Framework 4.5, Silverlight 4, Windows Phone 7.5 and .NET for Windows Store apps\r\n3. Add a reference to the portable library from the Console Application\r\n4. Install the Microsoft.Bcl package (1.0.16-rc) to both projects\r\n\r\n@Expected: No binding redirect for System.Runtime in the .NET Framework 4.5 project because a ___later version___ is part of the target framework (see C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.5\\RedistList\\FrameworkList.xml)\r\n@Actual: Binding redirect\r\n\r\n<dependentAssembly>\r\n<assemblyIdentity name=\"System.Runtime\" publicKeyToken=\"b03f5f7f11d50a3a\" culture=\"neutral\" />\r\n<bindingRedirect oldVersion=\"0.0.0.0-1.5.11.0\" newVersion=\"1.5.11.0\" />\r\n</dependentAssembly>\r\n\r\n\r\nYou can use the IVsFrameworkMultiTargeting to determine if a given assembly version is available as part of a given target framework.\r\nMake sure when you fix this, that you only skip the binding redirect if ___a later or same version___ is available in the framework.  \r\n2013-02-22\r\n\r\n---\r\n\r\nWe'll do this in 2.4 release.  \r\n2013-02-26\r\n\r\n---\r\n\r\nIs IVsFrameworkMultiTargeting.IsReferenceableInTargetFx the method I need to call? What should I pass to pwszAssemblySpec?  \r\n2013-06-08\r\n\r\n---\r\n\r\nIt's the full name of the assembly (mscorlib, Version=[version], PublicKeyToken=[token], Culture=[culture]). It can either contain all the information (key, version, etc), or just the simple name (\"mscorlib\")  \r\n2013-06-10\r\n\r\n---\r\n\r\nSo look like I can only check for the same version of the target framework. Can't check for a later version using this method, because I don't know what future versions will be.  \r\n2013-06-12\r\n\r\n---\r\n\r\nThat's fine. That's exactly the behavior we want. For example, System.Runtime didn't ship in 4.0, but did in 4.5. We still want a binding redirect generated for it in 4.0, but not for 4.5.  \r\n2013-06-13\r\n\r\n---\r\n\r\nI followed the exact same steps above, but there's no binding redirect added to the Console Application. It's only added to the __Portable Library project__. Is that the bug?  \r\n2013-06-13\r\n\r\n---\r\n\r\nThe binding redirects added to the Portable Library project seems to come from the Microsoft.Bcl package itself (from the content folder's app.config.transform file). this looks like a non-bug.\r\n2013-06-13\r\n\r\n  \r\nI'm chasing up the repro with Eric St. John. He walked through the code and figured out where it was broken.\r\n\r\nIt's the not the app.config.tranform, notice how the net45 content is empty, and hence no transforms. We also marked our transforms with a special marker that indicates that we added the redirects . The binding redirects we were seeing were not coming from us.  \r\n2013-06-13\r\n\r\n---\r\n\r\nAre you seeing the binding redirects added to the Console Application or the Portable Library? I don't see binding redirect added to Console Application, only the Portable Library.  \r\n2013-06-13\r\n\r\n---\r\n\r\nYes I'm talking about the ConsoleApplication. The binding redirects in the portable library project are expected, and do not affect runtime behavior (as the app.config is ignored and not copied to the app project), and hence can't cause an application to crash.\r\n\r\nI've found another repro (NuGet has really weird logic around when it decides to add binding redirects so it was hard to find a repro).\r\n\r\nThe repro is instead of using the Microsoft.Bcl package, install the Microsoft.Net.Http, 2.2.3-beta package. Make sure you are targeting __4.5__ from the ConsoleApplication and the exact platforms that I called out above for portable.  \r\n2013-06-13\r\n\r\n---\r\n\r\nAlso, the ConsoleApplication must be referencing the portable project before installing the package.  \r\n2013-06-13\r\n\r\n---\r\n\r\nOK now I can repro  \r\n2013-06-14\r\n\r\n---\r\n\r\nOK, I've got a fix now. It no longer adds the binding redirect for System.Runtime.dll, but still adds one for System.Net.Http.Primitives. I guess it's expected, right? Please confirm.\r\n\r\n```\r\n<assemblyBinding xmlns=\"urn:schemas-microsoft-com:asm.v1\">\r\n<dependentAssembly>\r\n<assemblyIdentity name=\"System.Net.Http.Primitives\" publicKeyToken=\"b03f5f7f11d50a3a\" culture=\"neutral\" />\r\n<bindingRedirect oldVersion=\"0.0.0.0-4.2.3.0\" newVersion=\"4.2.3.0\" />\r\n</dependentAssembly>\r\n</assemblyBinding>\r\n```  \r\n2013-06-14\r\n\r\n---\r\n\r\n\r\nYes that's correct. System.Net.Http.Primitives does not exist in the framework.  \r\n2013-06-14\r\n\r\n---\r\n\r\nFixed in changeset b8d515f6341193b970d2a9d837e580e762d2eb71  \r\n2013-06-19\r\n\r\n---\r\n\r\ni get the same issue with my test project still, runtime being added... if i comment this out the tests run fine... if not i get exceptions thrown from json.net  \r\n2013-08-09\r\n\r\n---\r\n\r\n(or i can change the version up to 4.0.0.0 or something and it works)  \r\n2013-08-09"},{"Id":"10105705706","Type":"IssuesEvent","CreatedAt":"2019-07-29T18:41:10","Actor":"anangaur","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/35","RelatedDescription":"Opened issue \"Machine readable output for dotnet list package\" (#35) at NuGet/Announcements","RelatedBody":"The spec for 'Machine readable output for dotnet list package' is ready for **review**:\r\n\r\n|Spec wiki|Discussion issue|\r\n|----------|------------------|\r\n|[Machine readable output for dotnet list package](https://github.com/NuGet/Home/wiki/%5BSpec%5D-Machine-readable-output-for-dotnet-list-package) | https://github.com/NuGet/Home/issues/7752 |"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1164220617710686209","CreatedAt":"2019-08-21T17:00:00+00:00","UserScreenname":"nuget","Text":"⚠ Restoring packages from https://t.co/KVB7werYQh might fail in some regions. We are investigating the issue. Follo… https://t.co/t69YZ9eFo1","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":4,"FavoriteCount":2,"RawContent":null},{"Id":"1162433926578626560","CreatedAt":"2019-08-16T18:40:19+00:00","UserScreenname":"nuget","Text":"Did you check out the new docs landing page? We tried to make it better and more useful. What do you think?… https://t.co/96nBP0rV5l","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":13,"FavoriteCount":3,"RawContent":null},{"Id":"1159229316351197184","CreatedAt":"2019-08-07T22:26:21+00:00","UserScreenname":"nuget","Text":"Using OData to query https://t.co/F9kiKfdOWi repository is being deprecated\n#Announcement \n\nhttps://t.co/dtelctlNOe","Source":"<a href=\"http://twitter.com/download/iphone\" rel=\"nofollow\">Twitter for iPhone</a>","RetweetCount":9,"FavoriteCount":3,"RawContent":null}]}},"RunOn":"2019-09-13T05:30:50.3535356Z","RunDurationInMilliseconds":2543}