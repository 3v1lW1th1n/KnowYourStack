{"Data":{"Blog":{"FeedItems":[{"Title":"Android Build Performance and Reliability","PublishedOn":"2018-11-21T16:45:55+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"As a Xamarin developer working on Android apps, you may be well-aware of two issues that slow down your everyday development; build times and the correctness of the build. If you aren&#8217;t sure...","Href":"https://blog.xamarin.com/android-build-performance-reliability/","RawContent":null},{"Title":"Xamarin.Forms 3.4.0: Say Hello to ImageButton","PublishedOn":"2018-11-15T19:17:28+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"As part of our long-term goal to have more frequent releases, we’re pleased to announce the release of Xamarin.Forms 3.4.0. As always, this release contains even more bug fixes and most notably,...","Href":"https://blog.xamarin.com/xamarin-forms-3-4-0-say-hello-to-imagebutton/","RawContent":null},{"Title":"Twitch Workshop: Build Your First Mobile App with C#, Xamarin, and the Cloud","PublishedOn":"2018-11-14T18:45:19+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Have you been clamoring to get started with mobile development using C# and Xamarin? What if you could attend a full day workshop from the comfort of your house or in a conference room with some...","Href":"https://blog.xamarin.com/twitch-workshop-build-your-first-mobile-app/","RawContent":null},{"Title":"Gorilla Player: A Tool to Craft Beautiful XAML UIs for Xamarin.Forms","PublishedOn":"2018-11-08T21:00:06+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"This is a guest post contributed by Leonardo Rodríguez Viacava. Leo is co-founder and CTO of UXDivers, creators of Grial UIKit and Gorilla Player. UXDivers specializes in designing and coding engaging...","Href":"https://blog.xamarin.com/gorilla-player-a-tool-to-craft-beautiful-xaml-uis-for-xamarin-forms/","RawContent":null},{"Title":"Xamarin and .NET Community Events in November","PublishedOn":"2018-11-01T16:01:30+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Here are just a few of the awesome community-run events scheduled this month. Get the full list of mobile developer engagements happening all over the world through our Community page. There you will...","Href":"https://blog.xamarin.com/xamarin-and-net-community-events-in-november/","RawContent":null},{"Title":"Xamarin.Forms and Zeplin: Speed Up Your Design to Development Process","PublishedOn":"2018-10-23T18:53:51+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"This guest post was contributed by Arnstein Johansen, a Norwegian software engineer interested in mobile and web development. He works for Itema AS, a consultant agency in Trondheim, Norway and a...","Href":"https://blog.xamarin.com/xamarin-forms-and-zeplin-speed-up-your-design-to-development-process/","RawContent":null},{"Title":"Xamarin.Forms 3.3.0: Little Things, Huge Difference","PublishedOn":"2018-10-18T19:06:38+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"The Xamarin.Forms team has been working closely with our open-source community to help fill in the “little things”. Things you’ve told us are important to building your mobile apps and being supremely...","Href":"https://blog.xamarin.com/xamarin-forms-3-3-0-little-things-huge-difference/","RawContent":null},{"Title":"Complex Animations in Xamarin.Forms using Finite State Machine","PublishedOn":"2018-10-16T17:32:32+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"This guest post was contributed by Slava Chernikoff, a Principal Engineer at Binwell. Microsoft MVP and Xamarin Certified experienced mobile cross-platform and native developer. Also, a previously...","Href":"https://blog.xamarin.com/complex-animations-xamarin-forms-using-finite-state-machine/","RawContent":null},{"Title":"Protect your Xamarin.Android Apps at Runtime with Dotfuscator","PublishedOn":"2018-10-12T18:34:39+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"This is a guest blog by Bill Leach. Bill is CTO and co-founder of PreEmptive Solutions, makers of Dotfuscator and DashO application protection tools. Protecting Your Xamarin.Android Apps In a previous...","Href":"https://blog.xamarin.com/protect-xamarin-android-apps-dotfuscator/","RawContent":null},{"Title":"Upgrade Your App with Sentiment Analysis","PublishedOn":"2018-10-04T05:00:22+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Understanding the sentiment of an email or text message can be difficult. Someone may send a message, intending for it to be encouraging, but it may be accidentally interpreted as mean or...","Href":"https://blog.xamarin.com/upgrade-your-app-with-sentiment-analysis/","RawContent":null}],"ResultType":"Feed"},"Android":{"Events":[{"Id":"8634512158","Type":"IssuesEvent","CreatedAt":"2018-11-22T17:06:39","Actor":"grendello","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/2178","RelatedDescription":"Closed issue \"[Feedback] VS2017 enterprise check Budle Assemblies into Native Code, Localization not work\" (#2178) at xamarin/xamarin-android","RelatedBody":"_From @samhouts on September 5, 2018 19:8_\r\n\r\n### Reproduction\r\n[TodoLocalized.zip](https://github.com/xamarin/xamarin-android/files/2372808/TodoLocalized.zip)\r\n\r\nIf you set the Android project configuration to \r\nRelease Mode and check \"Bundle assemblies into native code\" then localization doesn't work\r\nif you uncheck  \"Bundle assemblies into native code\" then localization works\r\n\r\n1) on the first page there's a picker at the top you can click to select different languages\r\n2) select a different language\r\n3) click on the PLUS arrow to go to the second page\r\n4) the text on the buttons should now be in the language you selected\r\n\r\n\r\nThis has come up before\r\nhttps://stackoverflow.com/questions/43787461/localization-doesnt-work-using-bundle-assemblies-into-native-code-in-release\r\nhttps://bugzilla.xamarin.com/show_bug.cgi?id=55603\r\n\r\n### Description From Dev Community\r\n\r\n<p>xamarin.forms , Currently when build release Xamarin Android Apk then install app on device,it is run well ,but Localization is not work, it is only show system language(chinese) and english,when I change language to Korean ,it is show english not\r\nKorean .\r\nwhen i not check Budle Assemblies into Native Code,it is run well for Localization .\r\n\r\nproject  See Attachment\r\n\r\nSteps:\r\n1.select release mode,check Budle Assemblies into \r\n   Native Code ,then generate project\r\n2.Archive the project and distribute\r\n3.Install app on device,then open app, change \r\n   language\r\n\r\n\r\nhope get help,thanks!</p>\r\n<a href=\"https://developercommunity.visualstudio.com/content/problem/267954/vs2017-enterprise-check-budle-assemblies-into-nati-1.html\">View on Developer Community</a>\r\n<br>To find diagnostic information, see the <a href=\"https://devdiv.visualstudio.com/DevDiv/_workitems/edit/627183\">original linked feedback ticket</a>.\r\n\r\n### Source\r\n\r\n[661459](https://devdiv.visualstudio.com/DevDiv/_workitems/edit/661459)\r\n\r\n_Copied from original issue: xamarin/Xamarin.Forms#3718_\r\n\r\n"},{"Id":"8634484228","Type":"IssuesEvent","CreatedAt":"2018-11-22T17:00:23","Actor":"felipecds","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/2455","RelatedDescription":"Opened issue \"VS 2017 15.9.2 axml code broken\" (#2455) at xamarin/xamarin-android","RelatedBody":"### Steps to Reproduce\r\n\r\n1. Open a pre-created file\r\n2. Try to add a new property for any element (android:id for example)\r\n\r\n### Expected Behavior\r\nThe editor continue working and I can type the value for property\r\n### Actual Behavior\r\nVS crashes without any sign of log file and reopens sometimes\r\n### Version Information\r\n15.9.2\r\n\r\n"},{"Id":"8632703486","Type":"PullRequestEvent","CreatedAt":"2018-11-22T11:36:11","Actor":"radekdoulik","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2454","RelatedDescription":"Opened pull request \"jnimarshalmethod-gen.exe Windows support\" (#2454) at xamarin/xamarin-android","RelatedBody":"Added `monow.exe` to the `host-mxe-*` directories and to the bundle."},{"Id":"8632391673","Type":"PullRequestEvent","CreatedAt":"2018-11-22T10:39:47","Actor":"lateralusX","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2453","RelatedDescription":"Opened pull request \"Bump Mono LLVM commit to include workaround for 32-bit mingw gcc compiler bug.\" (#2453) at xamarin/xamarin-android","RelatedBody":"Should fix https://github.com/xamarin/xamarin-android/issues/2290.\r\n\r\nFix for crash in 32-bit llc.exe should be fixed by https://github.com/mono/llvm/pull/19. PR bumps to that commit in Mono LLVM release_60 branch."},{"Id":"8629017460","Type":"IssuesEvent","CreatedAt":"2018-11-21T19:15:03","Actor":"Redth","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/2452","RelatedDescription":"Opened issue \"`AndroidSdkBuildToolsVersion` is not exported in binding projects\" (#2452) at xamarin/xamarin-android","RelatedBody":"Looks like the msbuild property `AndroidSdkBuildToolsVersion` is not being exported in binding projects.\r\n\r\nHere's a binlog with an example of it:\r\n\r\n[binlog.zip](https://github.com/xamarin/xamarin-android/files/2605457/binlog.zip)\r\n"},{"Id":"8628800242","Type":"PullRequestEvent","CreatedAt":"2018-11-21T18:30:49","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2449","RelatedDescription":"Merged pull request \"Bump to mono/mono/2018-06@b63e5378\" (#2449) at xamarin/xamarin-android","RelatedBody":"\t$ git diff --shortstat 709b46e3..b63e5378\r\n\t 14 files changed, 138 insertions(+), 77 deletions(-)\r\n\r\nVarious fixes, primarily for iOS."}],"ResultType":"GitHubEvent"},"Forms":{"Events":[{"Id":"8639763955","Type":"IssuesEvent","CreatedAt":"2018-11-23T21:21:20","Actor":"StephaneDelcroix","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/4526","RelatedDescription":"Closed issue \"EntryRenderer Obsolete: Please provide guide how to use new EntryRenderer\" (#4526) at xamarin/Xamarin.Forms","RelatedBody":"<!-- Bug report best practices: https://github.com/xamarin/Xamarin.Forms/wiki/Submitting-Issues -->\r\n\r\n### Description\r\nInheriting EntryRenderer shows \"Obsolete since version 2.5.... Please use EntryRenderer(Context) instead\"\r\n\r\n### Steps to Reproduce\r\n\r\n1. Create new renderer class\r\n2. Inherit EntryRenderer\r\n3. You should see the warning above\r\n\r\n### Expected Behavior\r\nIf you change implementation, provide some instructions how to use it.  It looks like Context is also obsolete, \r\n\r\n### Actual Behavior\r\nNo warnings should happen, or instructions should be provided\r\n\r\n"},{"Id":"8639756042","Type":"PullRequestEvent","CreatedAt":"2018-11-23T21:17:32","Actor":"StephaneDelcroix","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/4529","RelatedDescription":"Opened pull request \"[WIP] support compiled binding to arrays\" (#4529) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\n\r\nAllow bindings to arrays to be compiled.\r\nThis is still work in progress, I still have to fix\r\n- setters\r\n- handlers\r\n- value types arrays\r\n\r\n### Issues Resolved ### \r\n\r\n- fixes #4524\r\n\r\n### API Changes ###\r\n<!-- List all API changes here (or just put None), example:\r\n\r\nAdded:\r\n - string ListView.GroupName { get; set; } //Bindable Property\r\n - int ListView.GroupId { get; set; } // Bindable Property\r\n - void ListView.Clear ();\r\n\r\nChanged:\r\n - object ListView.SelectedItem => Cell ListView.SelectedItem\r\n \r\n Removed:\r\n - object ListView.SelectedItem => Cell ListView.SelectedItem\r\n \r\n -->\r\n \r\n None\r\n\r\n### Platforms Affected ### \r\n<!-- Please list all platforms affected by these changes -->\r\n\r\n- Core/XAML (all platforms)\r\n\r\n\r\n### Behavioral/Visual Changes ###\r\n<!-- Describe any changes that may change how a user's app behaves or appears when upgrading to this version of the codebase. -->\r\n\r\nNone\r\n\r\n### Before/After Screenshots ### \r\n<!-- If possible, take a screenshot of your test case before these changes were made and another screenshot after the changes were made to show possible visual changes. -->\r\n\r\nNot applicable\r\n\r\n### Testing Procedure ###\r\n<!-- Please list the steps that should be taken to properly test these changes on each relevant platform. If you were unable to test these changes yourself on any or all platforms, please let us know. Also, if you are able to attach a video of your test run, you will be our personal hero. -->\r\n\r\n### PR Checklist ###\r\n\r\n- [ ] Has automated tests <!-- (if tests are omitted or manual, state reason in description) -->\r\n- [ ] Rebased on top of the target branch at time of PR\r\n- [ ] Changes adhere to coding standard\r\n"},{"Id":"8639602714","Type":"PullRequestEvent","CreatedAt":"2018-11-23T20:09:05","Actor":"jfversluis","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/4528","RelatedDescription":"Opened pull request \"[UWP] Label MaxLines doesn't work\" (#4528) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\n\r\nIn `UpdateLineBreakMode` take into account that `MaxLines` can be set and we do need to allow wrapping then truncating.\r\n\r\n### Issues Resolved ### \r\n<!-- Please use the format \"fixes #xxxx\" for each issue this PR addresses -->\r\n\r\n- fixes #4458\r\n\r\n### API Changes ###\r\n<!-- List all API changes here (or just put None), example:\r\n\r\nAdded:\r\n - string ListView.GroupName { get; set; } //Bindable Property\r\n - int ListView.GroupId { get; set; } // Bindable Property\r\n - void ListView.Clear ();\r\n\r\nChanged:\r\n - object ListView.SelectedItem => Cell ListView.SelectedItem\r\n \r\n Removed:\r\n - object ListView.SelectedItem => Cell ListView.SelectedItem\r\n \r\n -->\r\n \r\n None\r\n\r\n### Platforms Affected ### \r\n<!-- Please list all platforms affected by these changes -->\r\n\r\n- UWP\r\n\r\n### Behavioral/Visual Changes ###\r\n<!-- Describe any changes that may change how a user's app behaves or appears when upgrading to this version of the codebase. -->\r\n\r\n`MaxLines` together with `LineBreakMode` now work on UWP!\r\n\r\n### Before/After Screenshots ### \r\n<!-- If possible, take a screenshot of your test case before these changes were made and another screenshot after the changes were made to show possible visual changes. -->\r\n\r\n<img width=\"1002\" alt=\"screenshot 2018-11-23 22 56 28\" src=\"https://user-images.githubusercontent.com/939291/48958906-0d680b00-ef73-11e8-99ef-41f7d1cd6da8.png\">\r\n\r\n### Testing Procedure ###\r\n<!-- Please list the steps that should be taken to properly test these changes on each relevant platform. If you were unable to test these changes yourself on any or all platforms, please let us know. Also, if you are able to attach a video of your test run, you will be our personal hero. -->\r\n\r\n### PR Checklist ###\r\n\r\n- [ ] Has automated tests <!-- (if tests are omitted or manual, state reason in description) -->\r\n- [x] Rebased on top of the target branch at time of PR\r\n- [x] Changes adhere to coding standard\r\n"},{"Id":"8639480310","Type":"PullRequestEvent","CreatedAt":"2018-11-23T19:18:57","Actor":"jfversluis","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/4527","RelatedDescription":"Opened pull request \"[Enhancement][Core, iOS, Android, UWP, Mac OS, Tizen] Make Label display HTML from a string\" (#4527) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\n\r\nWith the new `Html` property you can now set HTML formatted content on the `Label`\r\n\r\n### Issues Resolved ### \r\n<!-- Please use the format \"fixes #xxxx\" for each issue this PR addresses -->\r\n\r\n- fixes #4504\r\n\r\n### API Changes ###\r\nAdded:\r\n - string Label.Html { get; set; } //Bindable Property\r\n\r\n### Platforms Affected ### \r\n<!-- Please list all platforms affected by these changes -->\r\n\r\n- Core/XAML (all platforms)\r\n- iOS\r\n- Android\r\n- UWP\r\n- Mac OS\r\n- Tizen\r\n\r\n### Behavioral/Visual Changes ###\r\n<!-- Describe any changes that may change how a user's app behaves or appears when upgrading to this version of the codebase. -->\r\n\r\nNone by default, but the user is now able to show HTML formatted content with the new property\r\n\r\n### Before/After Screenshots ### \r\n<!-- If possible, take a screenshot of your test case before these changes were made and another screenshot after the changes were made to show possible visual changes. -->\r\n\r\n<img width=\"554\" alt=\"HTML Content on iOS\" src=\"https://user-images.githubusercontent.com/939291/48957751-ba3e8a00-ef6b-11e8-98a7-2e6b561bb58e.png\">\r\n\r\n<img width=\"625\" alt=\"HTML Content on Android\" src=\"https://user-images.githubusercontent.com/939291/48957789-0f7a9b80-ef6c-11e8-86be-c4a28f75f00c.png\">\r\n\r\n(Tizen's support for tags seems very limited)\r\n\r\n<img width=\"470\" alt=\"HTML Content on Tizen\" src=\"https://user-images.githubusercontent.com/939291/48957852-70a26f00-ef6c-11e8-8571-0470f8098405.png\">\r\n\r\n### Testing Procedure ###\r\n<!-- Please list the steps that should be taken to properly test these changes on each relevant platform. If you were unable to test these changes yourself on any or all platforms, please let us know. Also, if you are able to attach a video of your test run, you will be our personal hero. -->\r\n\r\nTest cases were added in the gallery app\r\n\r\n### PR Checklist ###\r\n\r\n- [ ] Has automated tests <!-- (if tests are omitted or manual, state reason in description) -->\r\n- [x] Rebased on top of the target branch at time of PR\r\n- [x] Changes adhere to coding standard\r\n"},{"Id":"8639450969","Type":"IssuesEvent","CreatedAt":"2018-11-23T19:07:29","Actor":"dinobu","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/4526","RelatedDescription":"Opened issue \"EntryRenderer Obsolete: Please provide guide how to use new EntryRenderer\" (#4526) at xamarin/Xamarin.Forms","RelatedBody":"<!-- Bug report best practices: https://github.com/xamarin/Xamarin.Forms/wiki/Submitting-Issues -->\r\n\r\n### Description\r\n\r\n### Steps to Reproduce\r\n\r\n1. \r\n2. \r\n3. \r\n\r\n### Expected Behavior\r\n\r\n### Actual Behavior\r\n\r\n### Basic Information\r\n\r\n- Version with issue:\r\n- Last known good version:\r\n- IDE:\r\n- Platform Target Frameworks: <!-- All that apply -->\r\n  - iOS:  <!-- The version of the iOS SDK you are compiling against, e.g. 11.1 -->\r\n  - Android: <!-- The version of the Android SDK you are compiling against, e.g. 7.1 --> \r\n  - UWP:  <!-- The version of the UWP SDK you are compiling against, e.g. 16299 --> \r\n- Android Support Library Version: <!-- if applicable -->\r\n- Nuget Packages:\r\n- Affected Devices:\r\n\r\n### Screenshots\r\n\r\n<!-- If the issue is a visual issue, please include screenshots showing the problem if possible -->\r\n\r\n### Reproduction Link\r\n\r\n<!-- Please upload or provide a link to a reproduction case -->\r\n"},{"Id":"8639212112","Type":"IssuesEvent","CreatedAt":"2018-11-23T17:40:29","Actor":"rmarinho","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/4435","RelatedDescription":"Closed issue \"Spec: Visual\" (#4435) at xamarin/Xamarin.Forms","RelatedBody":"## Rationale\r\n\r\nCustomers desire to more easily create Xamarin.Forms applications that look mostly or exactly the same by default on iOS and Android. In examining the style of design that is most typically implemented, Material design is the most beneficial starting point. \r\n\r\nDevelopers should be able to express their design for this starting point at the top level of their Xamarin.Forms application, and have that preference reflected throughout.\r\n\r\nDevelopers should be able to also control this preference at the ContentPage and control levell.\r\n\r\nIn the future, additional Visual styles may be supported, such as Cupertino, Fluent, or any other design styling that someone would wish to implement themselves.\r\n\r\n\r\n## Goals\r\n\r\n- Visually identical rendering\r\n  - Not to be confused with “pixel perfect”. Visually identical means the naked eye can’t tell the difference at a glance.\r\n- High performance\r\n  - Switching\r\n  - Rendering\r\n  - Inflation\r\n- Dynamic switching between visuals\r\n- Target controls\r\n  - ActivityIndicator\r\n  - Button\r\n  - DatePicker\r\n  - Entry\r\n  - Editor\r\n  - ListView\r\n    - Done with just some default property setting really\r\n  - Picker\r\n  - ProgressBar\r\n  - SearchBar\r\n  - Slider\r\n  - Stepper\r\n  - Switch\r\n  - TimePicker\r\nStretch Goals\r\n- User control of rendering\r\n  - In renderer\r\n  - In cross-platform code\r\n- Support of Material-only properties\r\n  - Elevation in particular would be neat\r\n\r\n## Button\r\n\r\n### Icon\r\n- On Android the Icon will now be placed directly to the left/right of the text\r\n- More Icon configuration properties (bounds, aspect, or implicit sizing)\r\n\r\n```C#\r\nclass Button\r\n{\r\n     public Color ImageTint {get; set;}\r\n     public Size ImageSize {get; set;}\r\n     public ImageSizing ImageSizing {get; set;}\r\n     public Aspect ImageAspect {get; set;}\r\n}\r\n\r\npublic enum ImageSizing\r\n{\r\n      Default,\r\n      MatchTextHeight, //this will maintain image ratio\r\n      MatchSizeToTextHeight //this will make a square out of all images\r\n}\r\n```\r\n\r\n## Limitations\r\n\r\n* The controls remain native controls, and as such there will naturally still be differences in areas such as fonts, shadows, elevation, and colors (consider how iOS does alpha blending on the navigation bar for example, resulting in visual color differences compared to Android).\r\n* Not all controls have a material implementation or style. \r\n\r\n## Implementation\r\n\r\n### Branch working from ###\r\n\r\n- https://github.com/xamarin/Xamarin.Forms/tree/visual\r\n```C#\r\n\r\npublic class VisualElement\r\n{\r\n  \r\n  [TypeConverter] //used for css\r\n  public IVisual Visual { get; set; } //BP\r\n}\r\n\r\npublic interface IVisual {}\r\n\r\nnamespace Xamarin.Forms\r\n{\r\n\tpublic static class Visual\r\n\t{\r\n\t\tpublic static IVisual MatchParent { get; } = new MatchParentVisual();\r\n\t\tpublic static IVisual Default { get; } = new DefaultVisual();\r\n\t\tpublic static IVisual Material { get; } = new MaterialVisual();\r\n\r\n\t\tpublic sealed class MaterialVisual : IVisual { }\r\n\t\tpublic sealed class DefaultVisual : IVisual { }\r\n\t\tpublic sealed class MatchParentVisual : IVisual { }\r\n\t}\r\n\r\n\tpublic interface IVisual { }\r\n}\r\n\r\nnamespace Xamarin.Forms\r\n{\r\n\t[AttributeUsage(AttributeTargets.Assembly, AllowMultiple = true)]\r\n\tpublic abstract class HandlerAttribute : Attribute\r\n\t{\r\n\t\tprotected HandlerAttribute(Type handler, Type target, Type[] supportedVisuals = null)\r\n\t\t{\r\n\t\t\tSupportedVisuals = supportedVisuals ?? new[] { typeof(Visual.DefaultVisual) };\r\n\t\t\tTargetType = target;\r\n\t\t\tHandlerType = handler;\r\n\t\t}\r\n\r\n\t\tinternal Type[] SupportedVisuals { get; private set; }\r\n\t\tinternal Type HandlerType { get; private set; }\r\n\r\n\t\tinternal Type TargetType { get; private set; }\r\n\r\n\t\tpublic virtual bool ShouldRegister()\r\n\t\t{\r\n\t\t\treturn true;\r\n\t\t}\r\n\t}\r\n}\r\n```\r\n\r\n### Example Renderer ###\r\n\r\n```C#\r\n[assembly: ExportRenderer(typeof(Entry), typeof(MaterialTextViewRenderer), new[] { typeof(Visual.MateralVisual) })]\r\nnamespace Xamarin.Forms.ControlGallery.Android\r\n{\r\n\tpublic class MaterialEntryRenderer : ViewRenderer<Xamarin.Forms.Controls.App.MaterialTextView, global::Android.Support.Design.Widget.TextInputLayout>\r\n\t{\r\n\t}\r\n}\r\n```\r\n\r\n### Example CSS ###\r\n\r\n```\r\n\r\n* {\r\n  visual: material;\r\n}\r\n\r\nButton {\r\n  visual: fluent;\r\n}\r\n\r\n.normal {\r\n  visual: normal;\r\n}\r\n```\r\n\r\nAt Renderer selection time the Visual property of the View is inspected and included in the renderer selection process. When the Visual changes the Renderer is recreated from scratch along with any children. The SupportsVisualTypes property on the renderer is tested\r\n\r\n`IVisual` is nothing more than a marker interface used at renderer selection time. For something like a skia backend you would then use an attached property to attach the drawing to the visual. This API gives us maximum flexibility.\r\n\r\n## Implementation Notes ##\r\n\r\nCurrently just creating new renderers for material components\r\n- If a single renderer contains a reference to both the material text box and the normal one then the material one can't be linked out \r\n- When implementing the MaterialEntryRenderer on iOS the placeholder code will break it so for now I feel it's just easier to develop as it's own thing while it's being spiked and once it's in a happy place merging behavior can make sense\r\n\r\n### iOS ###\r\nhttps://www.nuget.org/packages/Xamarin.iOS.MaterialComponents/\r\n\r\n### Android ###\r\n- Will take a hard dependency on the v28 of the support libraries as these contain all the Material theme's and components\r\n- Currently it will be required to set your theme to Material in order to get the Material Components https://github.com/material-components/material-components-android/blob/master/docs/getting-started.md\r\n- Support libraries v28 are still a bit quirky. I had to enable multi dex for the project to compile and currently some interfaces dealing with tabs are broken so those had to be commented out\r\n\r\n"},{"Id":"8639211393","Type":"PullRequestEvent","CreatedAt":"2018-11-23T17:40:17","Actor":"rmarinho","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/4449","RelatedDescription":"Merged pull request \"[Enhancement] Add Visual progress behind feature flag \" (#4449) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\nAdd a Visual property to VisualElement that allows us to swap out different renderers based on a Visual Type property\r\n\r\nhttps://github.com/xamarin/Xamarin.Forms/issues/4435\r\n\r\nThis PR also adds a starting set of Material Renderers as the first use case for this behavior\r\n- Button\r\n- Entry\r\n- Frame (CardView)\r\n- ProgressBar (iOS)\r\n\r\n### API Changes ###\r\n\r\nAdded:\r\n\r\n```C#\r\npublic class VisualElement\r\n{\r\n\t\tpublic IVisual Visual\r\n\t\t{\r\n\t\t\tget { return (IVisual)GetValue(VisualProperty); }\r\n\t\t\tset { SetValue(VisualProperty, value); }\r\n\t\t}\r\n}\r\n\r\n```\r\n```C#\r\npublic sealed class ExportRendererAttribute : HandlerAttribute\r\n{\r\n\t\tpublic ExportRendererAttribute(Type handler, Type target) : this(handler, target, null)\r\n\t\t{\r\n\t\t}\r\n}\r\n// Example Usage\r\n[assembly: ExportRenderer(typeof(Xamarin.Forms.Button), typeof(Xamarin.Forms.Platform.iOS.Material.MaterialButtonRenderer), new[] { typeof(VisualRendererMarker.Material) })]\r\nnamespace Xamarin.Forms.Platform.iOS.Material\r\n{\r\n\tpublic class MaterialButtonRenderer : ViewRenderer<Button, MButton>\r\n\r\n```\r\n\r\n\r\n\r\n\r\n### Platforms Affected ### \r\n<!-- Please list all platforms affected by these changes -->\r\n\r\n- Core/XAML (all platforms)\r\n- iOS\r\n- Android\r\n- UWP\r\n\r\n### Before/After Screenshots ### \r\nThere should be no visual changes to standard Default Renderers \r\nHere is the view when using Material Visuals\r\n\r\n![image](https://user-images.githubusercontent.com/5375137/48643300-9b089100-e99c-11e8-8742-5de12dbed301.png)\r\n\r\n![image](https://user-images.githubusercontent.com/5375137/48644475-e96b5f00-e99f-11e8-802a-387f5228cc45.png)\r\n\r\n\r\n### Testing Procedure ###\r\n- Make sure Visuals are hidden behind the experimental flag correctly\r\n- Make sure all current renderer behavior has been maintained (lots of changes to registrar) so that this change isn't breaking\r\n\r\n### PR Checklist ###\r\n\r\n- [X] Has automated tests <!-- (if tests are omitted or manual, state reason in description) -->\r\n- [X] Rebased on top of the target branch at time of PR\r\n- [X] Changes adhere to coding standard\r\n"}],"ResultType":"GitHubEvent"},"Macios":{"Events":[{"Id":"8639988151","Type":"PullRequestEvent","CreatedAt":"2018-11-23T23:25:32","Actor":"spouliot","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/5176","RelatedDescription":"Merged pull request \"[tests][intro] Fix CoreImage location check for older macOS versions\" (#5176) at xamarin/xamarin-macios","RelatedBody":"addendum to https://github.com/xamarin/xamarin-macios/pull/5159\n\nfailure on internal bots https://github.com/xamarin/xamarin-macios/commit/4f1c39a00fda2d7bbbe0fb6ed3b39261005f33f1#commitcomment-31401007"},{"Id":"8639626457","Type":"PullRequestEvent","CreatedAt":"2018-11-23T20:19:16","Actor":"spouliot","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/5175","RelatedDescription":"Merged pull request \"Revert \"Mono 5.16.0.87+ breaks us, so make sure we don't use it for now. (#5088)\"\" (#5175) at xamarin/xamarin-macios","RelatedBody":"This reverts commit 1ca7da537da1e81d56bcdeb215c63e16d2a08bdc.\n\nThis is fixed so the restriction is not needed anymore."},{"Id":"8639562326","Type":"PullRequestEvent","CreatedAt":"2018-11-23T19:52:27","Actor":"spouliot","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/5177","RelatedDescription":"Opened pull request \"Bump mono to head of 2018-06\" (#5177) at xamarin/xamarin-macios","RelatedBody":"Commit list for mono/mono:\n\n* mono/mono@b63e5378e38 [2018-06][ios] fix path for llvm invocation (#11737)\n\nDiff: https://github.com/mono/mono/compare/bb3ae37d71a0993a09abc59a0d8255c074dc885b...b63e5378e389f675640fba97999b82f3ca7a44c2"},{"Id":"8639189953","Type":"PullRequestEvent","CreatedAt":"2018-11-23T17:33:31","Actor":"spouliot","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/5176","RelatedDescription":"Opened pull request \"[tests][intro] Fix CoreImage location check for older macOS versions\" (#5176) at xamarin/xamarin-macios","RelatedBody":"addendum to https://github.com/xamarin/xamarin-macios/pull/5159\n\nfailure on internal bots https://github.com/xamarin/xamarin-macios/commit/4f1c39a00fda2d7bbbe0fb6ed3b39261005f33f1#commitcomment-31401007"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1063457672048058371","CreatedAt":"2018-11-16T15:44:01+00:00","UserScreenname":"xamarinhq","Text":"Announcing the release of Xamarin.Forms 3.4.0 w/ even more bug fixes and another new highly requested feature, an I… https://t.co/EJadLHYi73","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":174,"FavoriteCount":100,"RawContent":null},{"Id":"1063145593562902528","CreatedAt":"2018-11-15T19:03:56+00:00","UserScreenname":"xamarinhq","Text":"Build and deploy #ethereum smart contracts using the new @trufflesuite extension for #VSCode from @MSFTBlockchain… https://t.co/nEbiFUYaM2","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":35,"FavoriteCount":14,"RawContent":null},{"Id":"1062819180100100099","CreatedAt":"2018-11-14T21:26:53+00:00","UserScreenname":"xamarinhq","Text":"Want to get started w/ mobile dev using C# &amp; #Xamarin? We've got a Twitch Workshop for that.\n\nComing Friday, Nov 16… https://t.co/ce2vH9dC4t","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":112,"FavoriteCount":57,"RawContent":null},{"Id":"1058039721652297729","CreatedAt":"2018-11-01T16:55:01+00:00","UserScreenname":"xamarinhq","Text":"Get all the links you need for the world-wide, community-run mobile dev engagements happening for the Xamarin &amp;… https://t.co/eiJXYtWfvG","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":42,"FavoriteCount":23,"RawContent":null},{"Id":"1053027600086552576","CreatedAt":"2018-10-18T20:58:38+00:00","UserScreenname":"xamarinhq","Text":"TY2 you &amp; the Xamarin.Forms team we've filled in some of the features you’ve told us are important to building your… https://t.co/lwqRjrIFEi","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":62,"FavoriteCount":28,"RawContent":null},{"Id":"1052217100041945088","CreatedAt":"2018-10-16T15:18:00+00:00","UserScreenname":"xamarinhq","Text":"A full day of community-driven sessions on cross-platform mobile application development with Xamarin, DevOps with… https://t.co/07SVz6rgLT","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":52,"FavoriteCount":18,"RawContent":null},{"Id":"1050824055014744064","CreatedAt":"2018-10-12T19:02:32+00:00","UserScreenname":"xamarinhq","Text":"Now, in #VisualStudio 15.8, Dotfuscator Community can help protect your https://t.co/FGIvdxOrYa Apps at Runtime by… https://t.co/iPm1GjIrpS","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":53,"FavoriteCount":27,"RawContent":null},{"Id":"1050447051228631040","CreatedAt":"2018-10-11T18:04:28+00:00","UserScreenname":"xamarinhq","Text":"With Xamarin.Forms, the UI and app logic for your app resides in a single codebase and you get to use a single IDE… https://t.co/SMq0XwjtKL","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":62,"FavoriteCount":36,"RawContent":null},{"Id":"1047580523881799680","CreatedAt":"2018-10-03T20:13:54+00:00","UserScreenname":"xamarinhq","Text":"Do both types of testing with your Visual Studio App Center CI/CD pipeline - cover the Data Access Layer with unit… https://t.co/6y14u8p3lQ","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":65,"FavoriteCount":31,"RawContent":null},{"Id":"1046875654631886850","CreatedAt":"2018-10-01T21:33:00+00:00","UserScreenname":"xamarinhq","Text":"Microsoft named a leader in 2018 analyst reports on mobile app development. Get complimentary access to reports fro… https://t.co/EWg450kHpI","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":69,"FavoriteCount":30,"RawContent":null},{"Id":"1041764665536196609","CreatedAt":"2018-09-17T19:03:45+00:00","UserScreenname":"xamarinhq","Text":"...released to NuGet today, Xamarin.Forms 3.2.0. We've kicked off another round of updates, and this time we tackle… https://t.co/zyFILHsEUu","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":201,"FavoriteCount":109,"RawContent":null},{"Id":"1039264258511527936","CreatedAt":"2018-09-10T21:28:02+00:00","UserScreenname":"xamarinhq","Text":"Watch #dotNETConf Live! The 3-day virtual developer conference co-organized by the .NET community and Microsoft is… https://t.co/bM5JCj7M0h","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":95,"FavoriteCount":54,"RawContent":null},{"Id":"1037778121582419970","CreatedAt":"2018-09-06T19:02:39+00:00","UserScreenname":"xamarinhq","Text":"Get started with AI without being a machine learning or data science expert... New on the Xamarin Blog: Using Objec… https://t.co/uwpu4pUWFj","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":91,"FavoriteCount":46,"RawContent":null},{"Id":"1035572899996987397","CreatedAt":"2018-08-31T16:59:54+00:00","UserScreenname":"xamarinhq","Text":"Xamarin and .NET Developer Events in September\nHere are all the links you'll need to get involved.… https://t.co/YJAa83E61y","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":51,"FavoriteCount":36,"RawContent":null}]}},"RunOn":"2018-11-24T05:30:55.4269447Z","RunDurationInMilliseconds":4014}