{"Data":{"GitHub":{"Issues":[{"Id":"386392122","IsPullRequest":false,"CreatedAt":"2018-11-30T23:53:47","Actor":"TomFinley","Number":"1798","RawContent":null,"Title":"Creation of components through MLContext: advanced options and other feedback","State":"open","Body":"In our estimators and other similar components often have advanced settings, because, sometimes people have unusual circumstances. At the same time, there is a 95% or 99% scenario for \"simple\" usage that most people will be happy with. For this reason we have often made a distinction between common and advanced settings, as we see here.\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/cb37c7e7f1e1b29b5608a2755db793c5435d10b1/src/Microsoft.ML.FastTree/TreeTrainersCatalog.cs#L29-L38\r\n\r\nThere are some possible things that excited feedback:\r\n\r\n1. Echoing feedback seen in #1690, these things where we're making something should have the prefix `Create`, even in situations where this a catalog where we are *always* creating. Note: `Create` preferred to `Make`.\r\n\r\n2. The worth of ASP.NET style configuration was questioned (seen above as `Action<FastTreeRegressionTrainer.Arguments> advancedSettings`), e.g., there may not be much purpose in having a delegate. The older style where it just takes the `Arguments` *period* was preferred.\r\n\r\n3. Having this `Arguments` object as a nested class the component being created was viewed as positive, but this would be more idiomatically called `Options` -- `Arguments` was a holdover name from when these were exclusively for command line arguments, but for the API this is not a great name. So while keeping the general structure of how they are placed currently, they should probably be renamed to `Options`.\r\n\r\n4. It is good to have the convenience for the simple arguments, however, if we have both simple and advanced settings, we should not mix them but have instead two distinct constructors/extension methods. (E.g., in the above, we would have two methods, one that took the advanced options.) To do otherwise is to invite confusion about which \"wins\" if we have the setting set in both.\r\n\r\n    * Note that phase setting \"set in both,\" which suggests that these settings object should retain the \"simpler\" settings in them. This reinforces feedback elsewhere as seen [here](https://github.com/dotnet/machinelearning/pull/1352#discussion_r228319239).\r\n\r\n5. If the simple arguments are totally sufficient, then there is no need to expose this `Arguments` class in hte public API. (For practical reasons relating to command line and entry-point usage, we still need to always have these `Arguments` objects, but if they serve no purpose for the API the class can simply be made internal.)\r\n\r\n/cc @KrzysztofCwalina, @terrajobst , on whose feedback this list is primarily based, and who can correct me and provide clarification in case I misspoke.","Url":"https://github.com/dotnet/machinelearning/issues/1798","RelatedDescription":"Open issue \"Creation of components through MLContext: advanced options and other feedback\" (#1798)"},{"Id":"386380493","IsPullRequest":false,"CreatedAt":"2018-11-30T22:55:06","Actor":"TomFinley","Number":"1797","RawContent":null,"Title":"Remove TextLoader.Read(string), promote IDataReader<MSS> extension","State":"open","Body":"Pursuant to #1090 and #1041 there was agreement that we should be able to just pass a *string* into a data reader that reads from streams, rather than have to muck about with the creation of this `IMultiStreamSource` object.\r\n\r\nAs it happens, this one request was done in two separate ways:\r\n\r\n1. #1252 where this instance method on `TextLoader` was created:\r\n  \r\n https://github.com/dotnet/machinelearning/blob/cb37c7e7f1e1b29b5608a2755db793c5435d10b1/src/Microsoft.ML.Data/DataLoadSave/Text/TextLoader.cs#L1340\r\n\r\n2. #1281 where an extension method on top of `IDataReader<IMultiStreamSource>` was introduced.\r\n\r\nClearly we don't need both, and the second being more flexible and more broadly applicable was the one that should be checked in, so let us remove the class specific method introduced in #1252. The extension method should however be moved to a namespace where it is more likely to be picked up (probably `Microsoft.ML`) since right now it's a bit buried and generally people would never see this extension method.","Url":"https://github.com/dotnet/machinelearning/issues/1797","RelatedDescription":"Open issue \"Remove TextLoader.Read(string), promote IDataReader<MSS> extension\" (#1797)"},{"Id":"386378043","IsPullRequest":false,"CreatedAt":"2018-11-30T22:43:44","Actor":"TomFinley","Number":"1796","RawContent":null,"Title":"Rename types inside MLContext as Catalogs","State":"open","Body":"We had an idea in #949 to have \"context\" objects that enabled the easy and convenient creation of training algorithms. We eventually came to like this idea so much that it expanded considerably, until we came to think it actually a good idea that *most* components (whether trainers or not) could work through this object, to the point where eventually in in #1098, there was a \"master\" context, of which the formerly independent contexts became properties of that master context.\r\n\r\nThe newer things that were added were then called \"catalogs,\" for example:\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/cb37c7e7f1e1b29b5608a2755db793c5435d10b1/src/Microsoft.ML.Data/MLContext.cs#L47\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/cb37c7e7f1e1b29b5608a2755db793c5435d10b1/src/Microsoft.ML.Data/MLContext.cs#L52\r\n\r\nHowever the old objects retained the type names they had back when they were independent.\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/cb37c7e7f1e1b29b5608a2755db793c5435d10b1/src/Microsoft.ML.Data/MLContext.cs#L25\r\n\r\nWe ought to probably standardize the name of these things as being \"catalogs.\" E.g., things in here with the type name suffix `Context` should change that to `Catalog`, things that are catalogs but aren't named that yet (`DataOperations`) should be standardized as well.","Url":"https://github.com/dotnet/machinelearning/issues/1796","RelatedDescription":"Open issue \"Rename types inside MLContext as Catalogs\" (#1796)"},{"Id":"385520391","IsPullRequest":false,"CreatedAt":"2018-11-30T22:41:04","Actor":"GalOshri","Number":"1770","RawContent":null,"Title":"MatrixFactorization cannot be found in the MLContext catalog","State":"closed","Body":"`MatrixFactorization` cannot be found in the MLContext catalog. MLContext.Recommendation is currently empty. \r\n\r\nThis is with the 0.8.0-preview-27128-6 Microsoft.ML and Microsoft.ML.MatrixFactorization NuGets.","Url":"https://github.com/dotnet/machinelearning/issues/1770","RelatedDescription":"Closed issue \"MatrixFactorization cannot be found in the MLContext catalog\" (#1770)"},{"Id":"386330600","IsPullRequest":true,"CreatedAt":"2018-11-30T21:51:37","Actor":"rogancarr","Number":"1792","RawContent":null,"Title":"Update the PFI Binary Classification XML Docs","State":"closed","Body":"This PR updates the Permutation Feature Importance (PFI) for Binary Classification XML docs with the latest version of the documentation. It also fixes one typo in the Regression XML Docs (the name of the class of objects returned).\r\n\r\nFixes #1764 \r\n","Url":"https://github.com/dotnet/machinelearning/pull/1792","RelatedDescription":"Closed or merged PR \"Update the PFI Binary Classification XML Docs\" (#1792)"},{"Id":"386358567","IsPullRequest":false,"CreatedAt":"2018-11-30T21:34:28","Actor":"wschin","Number":"1795","RawContent":null,"Title":"Evaluator of one-class matrix factorizaition is missing","State":"open","Body":"One class matrix factorization is solved as a regression problem but common metrics in practices are top-k accuracy, nDCG, etc.\r\n","Url":"https://github.com/dotnet/machinelearning/issues/1795","RelatedDescription":"Open issue \"Evaluator of one-class matrix factorizaition is missing\" (#1795)"},{"Id":"386356570","IsPullRequest":false,"CreatedAt":"2018-11-30T21:28:09","Actor":"montebhoover","Number":"1794","RawContent":null,"Title":"Time series improvements","State":"open","Body":"Mainly for @codemzs, I wanted to ask what additional work is needed for time series.  Here are few things I noticed:\r\n\r\n1. Add support for doubles in SSA and IID estimators. Currently we check to verify floats, for all other types we throw an exception.\r\n2. Create class with named properties for output metrics of Martingale, P-Value, Alert, and Score.  Currently we output a column of vector type that contains these four values. Alternate approach would be to have four output columns.\r\n3. Move everything under namespace `Microsoft.ML.Runtime.TimeSeriesProcessing` into `Microsoft.ML.TimeSeries`.  Is there a reason why we need both namespaces?\r\n4. Add missing unit tests.  I believe we are missing tests for IID transformers, and we don't have code coverage over types such double, int, etc.\r\n5. Improve naming for estimator arguments.  Currently we have `Source` for our input column and `Name` for our output column.  It would make more sense to be `Source` and `Dest` or `InputColumn` and `OutputColumn`.\r\n6. Format the samples for the docs site.  For each transformer we have the option of using the transformer on a batch of data or creating a prediction engine - which should we be displaying as the sample on the docs site? Both on separate pages?","Url":"https://github.com/dotnet/machinelearning/issues/1794","RelatedDescription":"Open issue \"Time series improvements\" (#1794)"},{"Id":"386348176","IsPullRequest":true,"CreatedAt":"2018-11-30T20:59:33","Actor":"rogancarr","Number":"1793","RawContent":null,"Title":"Adding a binary classification PFI Example","State":"open","Body":"This PR adds a binary classification example. I added it to the same file as the regression example, and refactored out the file loading so that the examples focus more on the technique and less on file-loading. I also added a discussion on random fluctuations in PFI values.\r\n\r\nFixes #1766","Url":"https://github.com/dotnet/machinelearning/pull/1793","RelatedDescription":"Open PR \"Adding a binary classification PFI Example\" (#1793)"},{"Id":"386324624","IsPullRequest":false,"CreatedAt":"2018-11-30T19:44:28","Actor":"artidoro","Number":"1791","RawContent":null,"Title":"Feature Contribution Calculation should become Transformer","State":"open","Body":"We should make the `FeatureContributionCalculationTransform` a transfomrer, and add a related estimator that produces it so that it can become part of a pipeline. Below I show how it could look like with the new API:\r\n\r\n```csharp\r\n// Define a pipeline for feature extraction with a trainer at the end\r\nvar pipeline_1 = mlContext.BinaryClassification.Trainers.trainerEstimator(arguments);\r\n// Train model and cast it to IPredictor\r\nvar predictor = pipeline.Fit(data).Model;\r\n```\r\nTwo ways of applying FeatureContributionCalculation:\r\n```csharp\r\n// 1 First Way: Define another pipeline with FeatureContributionCalculation and possibly more \r\n// estimators appended to it\r\nvar pipeline_2 = mlContext.Model.Explainability.FeatureContributionCalculatingEstimator(arguments, predictor);\r\nvar outputData = pipeline_2.Fit(data).Transform(data);\r\n``` \r\n\r\n```csharp\r\n// 2 Second Way: Use the transformer directly, as it is not a trainable transformer\r\nvar transformer = new FeatureContributionCalculatingTransformer(mlContext, arguments, predictor);\r\nvar outputData = transformer.Transform(data);\r\n```\r\n\r\nIn either cases the output data will contain a `score` column along with a `FeatureContribution` column.\r\n\r\ncc: @rogancarr, @TomFinley, @Zruty0, @Ivanidzo4ka ","Url":"https://github.com/dotnet/machinelearning/issues/1791","RelatedDescription":"Open issue \"Feature Contribution Calculation should become Transformer\" (#1791)"},{"Id":"386318747","IsPullRequest":false,"CreatedAt":"2018-11-30T19:26:57","Actor":"shmoradims","Number":"1790","RawContent":null,"Title":"Support scoring on ARM","State":"open","Body":"This issue is a concrete work item from question #1662.\r\n\r\nMotivation:\r\nWe need ARM for scoring models on IoT devices and for mobile devices running Xamarin apps on iOS or Android. All those workloads are important for .NET.","Url":"https://github.com/dotnet/machinelearning/issues/1790","RelatedDescription":"Open issue \"Support scoring on ARM\" (#1790)"},{"Id":"386312702","IsPullRequest":false,"CreatedAt":"2018-11-30T19:08:06","Actor":"shmoradims","Number":"1789","RawContent":null,"Title":"Provide sample and documentation for PredictionFunction object-pooling for ASP.NET applications","State":"open","Body":"This is the concrete work item from discussions in #1718.\r\n\r\nMotivation:\r\nMajority of .NET Core apps use ASP.NET Core. In order to get the best developer experience we should provide a sample that implements object pooling approach for PredictionFucntion (which is not trivial) and also document it in docs.microsoft.com.\r\n\r\nBased on feedback from users, we might add this functionality to ML.NET. \r\n","Url":"https://github.com/dotnet/machinelearning/issues/1789","RelatedDescription":"Open issue \"Provide sample and documentation for PredictionFunction object-pooling for ASP.NET applications\" (#1789)"},{"Id":"385979997","IsPullRequest":true,"CreatedAt":"2018-11-30T18:18:22","Actor":"eerhardt","Number":"1786","RawContent":null,"Title":"Remove IRandom and replace with System.Random.","State":"closed","Body":"Also make TauswortheHybrid internal/BestFriend.\r\n\r\nFix #1316\r\n","Url":"https://github.com/dotnet/machinelearning/pull/1786","RelatedDescription":"Closed or merged PR \"Remove IRandom and replace with System.Random.\" (#1786)"},{"Id":"385528888","IsPullRequest":false,"CreatedAt":"2018-11-30T18:08:06","Actor":"vaeksare","Number":"1773","RawContent":null,"Title":"Official build can fail due to copying of the same redist assets","State":"closed","Body":"Currently, all of the files under Redist are assumed to be RID specific, and get built/executed by every leg of the official build script. This is not the case for the DNNImageFeaturizer models, which means the same models get copied over from each RID leg (MacOS, Linux, etc) into the same destination container. This can cause issues if this happens at the exact same time.","Url":"https://github.com/dotnet/machinelearning/issues/1773","RelatedDescription":"Closed issue \"Official build can fail due to copying of the same redist assets\" (#1773)"},{"Id":"386284789","IsPullRequest":true,"CreatedAt":"2018-11-30T17:40:33","Actor":"montebhoover","Number":"1788","RawContent":null,"Title":"SSA time series samples","State":"open","Body":"Samples for SsaChangePointDetectorPrediction and SsaSpikeDetectorPrediction.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/1788","RelatedDescription":"Open PR \"SSA time series samples\" (#1788)"},{"Id":"386276592","IsPullRequest":false,"CreatedAt":"2018-11-30T17:16:01","Actor":"eerhardt","Number":"1787","RawContent":null,"Title":"Delete the Legacy API","State":"open","Body":"Before shipping v1.0, we need to delete all the APIs that are marked \"legacy\" and \"obsolete\". Specifically, after this work is completed https://github.com/dotnet/machinelearning/tree/master/src/Microsoft.ML.Legacy should be completely removed, and any assets in it that need to remain should be migrated elsewhere. For example #1565 is for migrating the entry-points that we still need.","Url":"https://github.com/dotnet/machinelearning/issues/1787","RelatedDescription":"Open issue \"Delete the Legacy API\" (#1787)"},{"Id":"385926412","IsPullRequest":true,"CreatedAt":"2018-11-29T23:38:27","Actor":"abgoswam","Number":"1782","RawContent":null,"Title":"Add LDA example to Microsoft.ML.Samples","State":"closed","Body":"- Adding a LDA example to Microsoft.ML.Samples . This was a pending comment on #1410 ","Url":"https://github.com/dotnet/machinelearning/pull/1782","RelatedDescription":"Closed or merged PR \"Add LDA example to Microsoft.ML.Samples\" (#1782)"},{"Id":"385973073","IsPullRequest":true,"CreatedAt":"2018-11-29T23:32:51","Actor":"GalOshri","Number":"1785","RawContent":null,"Title":"Add release notes for ML.NET 0.8","State":"open","Body":"This adds release notes for ML.NET 0.8.","Url":"https://github.com/dotnet/machinelearning/pull/1785","RelatedDescription":"Open PR \"Add release notes for ML.NET 0.8\" (#1785)"},{"Id":"385952794","IsPullRequest":true,"CreatedAt":"2018-11-29T22:23:12","Actor":"artidoro","Number":"1784","RawContent":null,"Title":"Clean up of TextLoader constructor","State":"open","Body":"Fixes #1611.\r\n\r\n1. Hid the constructor of `TextLoader` that takes Arguments, and exposed `HasHeader` and `SeparatorChars` as non-advanced parameters. \r\n2. Made Create methods internal and modified the code accordingly. \r\n3. Added comments for the public facing constructor that was retained.","Url":"https://github.com/dotnet/machinelearning/pull/1784","RelatedDescription":"Open PR \"Clean up of TextLoader constructor\" (#1784)"},{"Id":"385530466","IsPullRequest":true,"CreatedAt":"2018-11-29T22:12:05","Actor":"vaeksare","Number":"1775","RawContent":null,"Title":"Add fixes to prevent potential build failures due to redist copying","State":"closed","Body":"Adds a new build script flag that allows specifying that certain RID agnostic files inside redist should not be built/executed. This is used to prevent the DNNImageFeaturizer models from being copied on each leg causing possible build failures. Instead, the copying only happens on Windows x64. Fixes #1775 ","Url":"https://github.com/dotnet/machinelearning/pull/1775","RelatedDescription":"Closed or merged PR \"Add fixes to prevent potential build failures due to redist copying\" (#1775)"},{"Id":"385940933","IsPullRequest":false,"CreatedAt":"2018-11-29T21:49:02","Actor":"sfilipi","Number":"1783","RawContent":null,"Title":"Change the <a> tags to <image> tags","State":"open","Body":"In the RankerMetrics the `<a>`  tags for images will need to get converted to `<image>` tags, so the images display. \r\n\r\nhttps://github.com/dotnet/machinelearning/blob/master/src/Microsoft.ML.Data/Evaluators/Metrics/RankerMetrics.cs#L23","Url":"https://github.com/dotnet/machinelearning/issues/1783","RelatedDescription":"Open issue \"Change the <a> tags to <image> tags\" (#1783)"},{"Id":"385549124","IsPullRequest":true,"CreatedAt":"2018-11-29T20:16:54","Actor":"Anipik","Number":"1777","RawContent":null,"Title":"Correcting Documentation, adding asserts and disabling failing ci tests","State":"closed","Body":"- Adding Some More Asserts\r\n- Correcting netcoreapp 3.0 documentation\r\n- Disabling\\correcting netcoreapp 3.0 tests \r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/1777","RelatedDescription":"Closed or merged PR \"Correcting Documentation, adding asserts and disabling failing ci tests\" (#1777)"},{"Id":"385900239","IsPullRequest":false,"CreatedAt":"2018-11-29T19:53:45","Actor":"daholste","Number":"1781","RawContent":null,"Title":"FastTree uses lots of memory with dropout on","State":"open","Body":"### System information\r\n\r\n- **OS version/distro**: Windows 10\r\n- **.NET Version (eg., dotnet --info)**: .NET Core 2.1\r\n\r\n### Issue\r\n\r\n- **What did you do?**\r\nRan FastTreeRegressor with DropoutRate > 0.\r\n\r\n- **What happened?**\r\nConsumed around 15 GB of memory. Memory usage increased linearly with # of trees\r\n\r\nRunning FastTreeRegressor with DropoutRate > 0 leads to much higher memory consumption than when DropoutRate = 0. It used approx 14 GB more for 200 trees, and ran into an out of memory exception for 500 trees. Perhaps there is a leak? (Turning on DropoutRate seemed to consistently cause memory footprint to rise significantly.)","Url":"https://github.com/dotnet/machinelearning/issues/1781","RelatedDescription":"Open issue \"FastTree uses lots of memory with dropout on\" (#1781)"},{"Id":"385859737","IsPullRequest":true,"CreatedAt":"2018-11-29T18:07:11","Actor":"wschin","Number":"1780","RawContent":null,"Title":"Remove auto-cache mechanism","State":"open","Body":"Fixes #1604.","Url":"https://github.com/dotnet/machinelearning/pull/1780","RelatedDescription":"Open PR \"Remove auto-cache mechanism\" (#1780)"},{"Id":"385749720","IsPullRequest":true,"CreatedAt":"2018-11-29T14:00:24","Actor":"Jungmaus","Number":"1779","RawContent":null,"Title":"Microsoft.ML.Api - Code cleaned and if else blocks improved","State":"open","Body":"We are excited to review your PR.\r\n\r\nSo we can do the best job, please check:\r\n\r\n- [ ] There's a descriptive title that will make sense to other developers some time from now. \r\n- [ ] There's associated issues. All PR's should have issue(s) associated - unless a trivial self-evident change such as fixing a typo. You can use the format `Fixes #nnnn` in your description to cause GitHub to automatically close the issue(s) when your PR is merged.\r\n- [x] Your change description explains what the change does, why you chose your approach, and anything else that reviewers should know.\r\n- [ ] You have included any necessary tests in the same PR.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/1779","RelatedDescription":"Open PR \"Microsoft.ML.Api - Code cleaned and if else blocks improved\" (#1779)"},{"Id":"385558004","IsPullRequest":false,"CreatedAt":"2018-11-29T04:06:37","Actor":"markusweimer","Number":"1778","RawContent":null,"Title":"Consider adding convenience functions to load / save models from / to files","State":"closed","Body":"In order to load a model from disk, one currently has to do something like this:\r\n\r\n```cs\r\nITransformer trainedModel;\r\nusing (var stream = new FileStream(ModelPath, FileMode.Open, FileAccess.Read, FileShare.Read))\r\n{\r\n  trainedModel = mlContext.Model.Load(stream);\r\n}\r\n```\r\n\r\n(Code taken from our sample [here](https://github.com/dotnet/machinelearning-samples/blob/ff0ae26e3bd2366c1fe55e8e8fbee17b4596cc61/samples/csharp/getting-started/BinaryClassification_SentimentAnalysis/SentimentAnalysis/SentimentAnalysisConsoleApp/Program.cs#L101)\r\n\r\nWe should consider adding convenience methods for this common case to allow for code like this:\r\n\r\n```cs\r\nITransformer trainedModel = mlContext.Model.LoadFromFile(ModelPath);\r\n```\r\n\r\nSimilarly, we could consider adding a convenience method to save to a file to allow for code like this:\r\n\r\n```cs\r\nmlContext.Model.SaveToFile(trainedModel, ModelPath);\r\n```\r\n\r\nOf course, we might also want the `*Async` variants thereof.","Url":"https://github.com/dotnet/machinelearning/issues/1778","RelatedDescription":"Closed issue \"Consider adding convenience functions to load / save models from / to files\" (#1778)"},{"Id":"385532361","IsPullRequest":false,"CreatedAt":"2018-11-29T01:48:19","Actor":"Anipik","Number":"1776","RawContent":null,"Title":"Extra Spaces in Baseline file for Netcoreapp3.0","State":"open","Body":"TestName EntryPointPipelineEnsembleGetSummary\r\n\r\nThe original baseline file contains ```\"Features.bare_nuclei\\t%Number%  \\t%Number% \\t%Number%  \\t%Number% ***\"```\r\nfile - machinelearning\\\\test\\\\BaselineOutput\\\\Common\\\\EntryPoints\\\\ensemble-summary.txt\"\r\n\r\nbaseline - \"Features.bare_nuclei\\t%Number%   \\t%Number% \\t%Number%  \\t%Number% ***\"\r\noutput -   \"Features.bare_nuclei\\t%Number%  \\t%Number% \\t%Number%  \\t%Number% ***\"\r\n\r\ncc @eerhardt @danmosemsft @shauheen ","Url":"https://github.com/dotnet/machinelearning/issues/1776","RelatedDescription":"Open issue \"Extra Spaces in Baseline file for Netcoreapp3.0\" (#1776)"},{"Id":"385529295","IsPullRequest":false,"CreatedAt":"2018-11-29T01:33:55","Actor":"Anipik","Number":"1774","RawContent":null,"Title":"Regression in Rff Code","State":"open","Body":"I ran a benchmark provided to me By @justinormont  that uses Rff Transformer.\r\nI ran it too on  master as well as on https://github.com/dotnet/machinelearning/commit/7d9660a3e3881e444f7a4212b175856aaa9bdbe0\r\nand https://github.com/dotnet/machinelearning/commit/8b19930c3413b578b1b9603633f0e9ec30cd8acd\r\n\r\nThe time taken by the benchmark for both of the last two commit was around 850 ms for both netstandard as well as netcoreapp 3.0 implementation where as it was around 1.3 sec for the master branch.\r\n\r\nI am working on adding the benchmark into the repo.\r\nThe rsp being used here is \r\n![image](https://user-images.githubusercontent.com/10516582/49246698-651ad200-f3ca-11e8-8f1e-4d4275a1aa98.png)\r\n\r\n\r\n\r\ncc @adamsitnik @eerhardt @danmosemsft @shauheen \r\n","Url":"https://github.com/dotnet/machinelearning/issues/1774","RelatedDescription":"Open issue \"Regression in Rff Code\" (#1774)"},{"Id":"385523553","IsPullRequest":false,"CreatedAt":"2018-11-29T01:06:29","Actor":"yaeldekel","Number":"1772","RawContent":null,"Title":"GenericSpanSortHelper should have an overload that takes an IComparer","State":"open","Body":"This would enable sorting using a custom comparer, instead of the default CompareTo() method.","Url":"https://github.com/dotnet/machinelearning/issues/1772","RelatedDescription":"Open issue \"GenericSpanSortHelper should have an overload that takes an IComparer\" (#1772)"},{"Id":"385521137","IsPullRequest":false,"CreatedAt":"2018-11-29T00:56:06","Actor":"artidoro","Number":"1771","RawContent":null,"Title":"PFI should work for multi class classification, clustering and recommendation","State":"open","Body":"PFI currently only works for binary classification and regression. It should be extended to multi class classification, clustering and recommendation to provide explainability functionalities in other experiment categories.\r\n\r\nThe PFI approach works for all the above training scenarios, and it is natural for users that use the tool for binary classification/regression to also want to use it for other scenarios.\r\n\r\ncc: @rogancarr ","Url":"https://github.com/dotnet/machinelearning/issues/1771","RelatedDescription":"Open issue \"PFI should work for multi class classification, clustering and recommendation\" (#1771)"},{"Id":"385520367","IsPullRequest":false,"CreatedAt":"2018-11-29T00:52:17","Actor":"wschin","Number":"1769","RawContent":null,"Title":"Need example for one-class matrix factorization","State":"open","Body":"Currently we only have [one test](https://github.com/dotnet/machinelearning/blob/533e18647a77c31f8149ccf2618ccb2e354f8e62/test/Microsoft.ML.Tests/TrainerEstimators/MatrixFactorizationTests.cs#L376) as our example. We should add one into our sample project. Also, in that actual example, we need to tell user to install MatrixFactorization nuget. The ultimate scope of the new example is to cover everything user needs to do to run one-class matrix factorization.\r\n\r\nAlso, because of some settings in our test framework, our tests are not examples which can be run by copy-and-paste.","Url":"https://github.com/dotnet/machinelearning/issues/1769","RelatedDescription":"Open issue \"Need example for one-class matrix factorization\" (#1769)"}],"ResultType":"GitHubIssue"}},"RunOn":"2018-12-01T05:31:15.2212848Z","RunDurationInMilliseconds":1140}