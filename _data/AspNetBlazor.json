{"Data":{"GitHubIssues":{"Issues":[{"Id":"321020475","IsPullRequest":false,"CreatedAt":"2018-05-08T03:50:10","Actor":"hungdluit","Number":"790","RawContent":null,"Title":"Parent-Childs hierarchy","State":"closed","Body":"The idea is, I want to build the hierarchy after rendering. The component will know and easy to access its parent and child component by using Parent and Childrens property.\r\n\r\nIs there a way to achieve this?","Url":"https://github.com/aspnet/Blazor/issues/790","RelatedDescription":"Closed issue \"Parent-Childs hierarchy\" (#790)"},{"Id":"320605496","IsPullRequest":false,"CreatedAt":"2018-05-08T01:45:29","Actor":"hungdluit","Number":"778","RawContent":null,"Title":"Render custom Element","State":"closed","Body":"```\r\nprotected override void BuildRenderTree(RenderTreeBuilder builder)\r\n{\r\n          base.BuildRenderTree(builder);\r\n\r\n            builder.OpenElement(0, \"div\");\r\n            BuildContentRenderTree(builder);\r\n            builder.CloseElement();\r\n }\r\n\r\n protected virtual void BuildContentRenderTree(RenderTreeBuilder builder)\r\n {\r\n            if (ChildContent != null)\r\n            {\r\n                ChildContent(builder);\r\n            }\r\n   }\r\n```\r\n\r\n```\r\n@page \"/usercontrolsample\"\r\n\r\n<UserControl>\r\n    <a>This is a User Control</a>\r\n</UserControl>\r\n```\r\nResult:\r\n\r\n![image](https://user-images.githubusercontent.com/5623089/39675253-a89e1ebe-5182-11e8-8499-bcaff2db793e.png)\r\n\r\nI'm following same samples on the internet. But it does not work in my case.\r\nI think 'div' should be rendered instead of 'usercontrol'","Url":"https://github.com/aspnet/Blazor/issues/778","RelatedDescription":"Closed issue \"Render custom Element\" (#778)"},{"Id":"321007388","IsPullRequest":false,"CreatedAt":"2018-05-08T01:06:14","Actor":"w8w8w8","Number":"789","RawContent":null,"Title":"it is not work in IE11 or FireFox59.0.3","State":"closed","Body":"when I test use IE11 , it is not work,  show \"promise\" undefined.\r\ncan you help me? or how to fix this bug","Url":"https://github.com/aspnet/Blazor/issues/789","RelatedDescription":"Closed issue \"it is not work in IE11 or FireFox59.0.3\" (#789)"},{"Id":"320987119","IsPullRequest":false,"CreatedAt":"2018-05-07T22:59:59","Actor":"GoldenCrystal","Number":"788","RawContent":null,"Title":"Proposal: Optimize render tree build & diff with lazy RenderFragments","State":"open","Body":"# Summary\r\n\r\nI noticed that components that produce a lot of HTML elements tend to become noticeably slow.\r\n\r\nYou can observe this on the linked page if you click on the button at the bottom a few times : https://unicode-browser.azurewebsites.net/blocks/CJK%20Unified%20Ideographs\r\nWhat you should observe is that at some point, even the spinner takes time to appear.\r\n(Likely because Blazor is re-rendering the whole table for each small update)\r\n\r\n# Rationale\r\n\r\nToday, it seems we are able to separate updates of the DOM by enclosing parts of the application in a component.\r\nHowever, splitting a page in many small components only for the purpose of rendering optimization tends to be very tedious, and maybe not doable at all in some cases.\r\n\r\nThe idea here is to provide a way for avoiding to re-render semi-static content everytime the ````BuildRenderTree```` is called.\r\n\r\n# Proposal\r\n\r\nI propose that Blazor would provide a mechanism in-between ````RenderFragment```` and ````BlazorComponent````.\r\nLet's say that we provide to ````RenderTreeBuilder```` a ````RenderFragment```` that is tagged with a **unique** string ID (e.g. a GUID string in some cases).\r\n\r\nThe API could look like this:\r\n\r\n````csharp\r\nclass RenderTreeBuilder\r\n{\r\n    // …\r\n    public void AddLazyContent(int sequence, string id, RenderFragment fragment) { /* … */ }\r\n    // …\r\n}\r\n````\r\n\r\nThe idea is that you generate a unique ID so as to let the render tree diff builder to identify your specific fragment (and detect addition/removal of said fragment), but the lazy fragment is only rendered once, when it is newly added in the render tree.\r\n(NB: It may be rendered subsequently if it is removed, then added back later)\r\n\r\n## Caveats\r\n\r\nDevelopers would have to stay aware that the lazy content will be evaluated outside of the ````BuildRenderTree```` method (hence its lazyness), and remember to be careful about closures.\r\nHowever, it might not be that different from ````RenderFragments```` generated outside of the ````BuildRenderTree```` method.\r\n\r\n## Advantages\r\n\r\n### For Razor codegen\r\n\r\nCode generation for cshtml could take advantage of this in cases like these:\r\n````html\r\n<table>\r\n    <!-- This part is static -->\r\n    <thead>\r\n        <tr>\r\n            <th>Foo</th>\r\n            <th>Bar</th>\r\n        </tr>\r\n    </thead>\r\n    <!-- End of the static part -->\r\n\r\n    <!-- This contains dynamic content -->\r\n    <tbody>\r\n        @foreach (var item in Items)\r\n        {\r\n            <tr><td>@item.Foo</td><td>@item.Bar</td></tr>\r\n        }\r\n    </tbody>\r\n    <!-- End of the dynamic content -->\r\n</table>\r\n````\r\n\r\nThere, the codegen could determine that ````table > thead````, unlike ````table > tbody````, is purely static content and generate a lazy fragment (with a statically generated string ID) that would span the whole ````thead```` tag and would only be evaluated once.\r\n\r\nThus, when the developer requests the page to refresh, the whole markup for the table header wouldn't have to be re-generated, and only the parts related to the dynamically-generated ````tbody```` would be rebuilt. (That obviously includes the enclosing ````table```` element, which contains the ````tbody````, itself containing the dynamic content)\r\n\r\n### For manually generated components\r\n\r\nDevelopers could use lazy content for parts of the document that are dynamic, at their own risk, thus avoiding the cost of rebuilding the whole render tree when they only need to update a small part of a document.\r\n\r\n## Going furher\r\n\r\n### For manually generated components\r\n\r\nIt might be even better if lazy fragments could be forcefully re-rendered, thus blurring the lines with components even more.\r\nI am not sure how this would be best achieved, however. Maybe by calling a method based on the string ID ?\r\n\r\n### For components\r\n\r\nIt would be great if there was a way to indicate that an element should be treated as lazy, even tough it contains fragments of C#. (Maybe something like a ````blazor-lazy```` attribute ?)\r\nThis would allow more flexibility in the design of pages/components, without having to resort to manually built render trees.\r\n","Url":"https://github.com/aspnet/Blazor/issues/788","RelatedDescription":"Open issue \"Proposal: Optimize render tree build & diff with lazy RenderFragments\" (#788)"},{"Id":"320974840","IsPullRequest":true,"CreatedAt":"2018-05-07T22:05:06","Actor":"SteveSandersonMS","Number":"787","RawContent":null,"Title":"Simple autorebuild mechanism for hosted apps","State":"open","Body":"In the 0.3.0 release we had to disable autorebuild for hosted apps due to a bug. This PR re-enables it, replacing the implementation with a much simpler alternative.\r\n\r\nThis implementation should be understood as a stopgap measure until some future version of ASP.NET Core and VS can hopefully extend the native autorebuild support to rebuild when there are changes in referenced projects. Once (and if) that is implemented, both the standalone and hosted variants of Blazor's autorebuild feature could be removed because both would inherit it from ASP.NET Core.","Url":"https://github.com/aspnet/Blazor/pull/787","RelatedDescription":"Open PR \"Simple autorebuild mechanism for hosted apps\" (#787)"},{"Id":"320859449","IsPullRequest":false,"CreatedAt":"2018-05-07T15:57:57","Actor":"attilah","Number":"786","RawContent":null,"Title":"Need a published NPM types module for Blazor","State":"open","Body":"Library authors cannot write JS parts in Typescript since there is no published declaration file for the public surface of Blazor JS.\r\n\r\nAdding ```declaration: true``` to tsconfig.js does not solve it, since there are compile errors because of how/what things exported/consumed.\r\n\r\nAlso it would be good to have a library multi project template 1 C# netstandard (no blazor build), and 1 typescript (like blazor js) project with nuget packaging support out of the box.\r\n\r\nQuestion:\r\nHow should we pack the javascript file into nuget to make it consumable in blazor projects (when js and blazor component are in 2 different projects)?","Url":"https://github.com/aspnet/Blazor/issues/786","RelatedDescription":"Open issue \"Need a published NPM types module for Blazor\" (#786)"},{"Id":"320560951","IsPullRequest":false,"CreatedAt":"2018-05-07T15:46:37","Actor":"galvesribeiro","Number":"776","RawContent":null,"Title":"Failure on touch event handling","State":"closed","Body":"While implementing #771, handling the touch events, I have the following issues:\r\n\r\n![image](https://user-images.githubusercontent.com/4714040/39669660-2416704c-50c9-11e8-9ed9-04f71445deea.png)\r\n\r\nAs you may see in the picture, I'm getting the `touchstart` event on the `EventForDotNet.ts` properly (hence the log in the first part of the image) but it crashes right after that with a `[Intervention]` warning right before that exception...\r\n\r\nIf I follow the link at the warning (https://www.chromestatus.com/features/5093566007214080) It looks like for listeners of the touch event attached to the document, the `preventDefault` called before dispatch the events in Blazor are being ignore and everything else explodes.\r\n\r\nCan someone point me what is going on internally? I was unable to track the reason on Blazor's code...\r\n\r\nThanks!\r\n","Url":"https://github.com/aspnet/Blazor/issues/776","RelatedDescription":"Closed issue \"Failure on touch event handling\" (#776)"},{"Id":"320843493","IsPullRequest":true,"CreatedAt":"2018-05-07T15:14:02","Actor":"LunicLynx","Number":"785","RawContent":null,"Title":"[WIP] Prerendering","State":"open","Body":"Just for the sake of it, its still working and relevant. (Original #238)\r\n* Rebased on latest dev branch\r\n\r\n# [WIP] Prerendering (#24)\r\n\r\n## How does it work\r\nWhen ever a request comes in that would result in returning the content of `index.html`, the prerendering kicks in and replaces the `app` tag with the prerendered content.\r\n\r\n### In detail\r\n1. Call `app.UseBlazorPrerendering<TEntryComponent>(\"app\", configure => {});` in the server project. `TEntryComponent` will be the component to get prerendered and inserted into the `app` tag.\r\n2. `UseBlazorPrerendering` attaches the `BlazorPrerenderingMiddleware` to the `ISpaBuilder`, to intercept requests to `index.html`.\r\n3. If a request is satisfied by `index.html`. The `index.html` is parsed with `AngleSharp`, and modified to contain the prerendered content. This implementation is almost 100% the same as the one in `IndexHtmlFileProvider`.\r\n4. To Prerender the content there is a new implementation of `Renderer`. This implementation for the most part is identical to the one in `BrowserRenderer.ts`. But it only supports the initial creation, since update on the serverside does not make sense. Also when encountering a `Component` it goes into recursion, which is different from the Browser version.\r\n\r\n## What is in this PR\r\n### Microsoft.AspNetCore.Blazor.Server.Rendering project\r\nContains all things related to prerendering\r\n* `PreRenderer` implementation of `Renderer` (needs cleanup)\r\n\r\n### PrerenderingApp sample\r\n* input component\r\n* list component (foreach)\r\n* input element\r\n* 2 bound input elements\r\n* FetchDataComponent using a service making a HttpRequest on the client while using the data directly when prerendering.\r\n\r\n## Current Limitations\r\n* After the page is returned to the browser, it is static until the browser catches up with bootstrapping and rerendering the page. It would be nice to actually have some kind of way to map the elements to components. Maybe a custom data tag containing the component id.\r\n* Services used for controllers and prerendering must be specified two times for DI.\r\n* Routing not yet tested. It probably doesn't work.\r\n* `IUriHelper` implementation `PreUriHelper` of method `GetBaseUriPrefix` harcoded to match server url.\r\n* **Missing Tests** If this is the way to go, i will write them.\r\n* ~~It only works with the `app` tag. There should be some way to define the entry component. Also it would be nice to have different services (which also means different references) on server vs client side.~~\r\n~~As of now i can only imaging 3 projects.~~\r\n  * ~~One containing the Components~~\r\n  * ~~One for bootstrapping in Browser~~\r\n  * ~~One for bootstrapping in Server~~\r\n* ~~No way to supply services to prerendering. It would be nice to be able to supply different services while prerendering. This would allow to reuse server services to prerender the content without issuing http calls on the server side.~~\r\n\r\n## What now?\r\nI know the issue #24 is not yet assigned to any version. And maybe this implementation is going completely haywire. I just did what i thought might be the general idea. Either way, this was major fun. \r\nLet me know what you think!","Url":"https://github.com/aspnet/Blazor/pull/785","RelatedDescription":"Open PR \"[WIP] Prerendering\" (#785)"},{"Id":"320807613","IsPullRequest":false,"CreatedAt":"2018-05-07T15:07:24","Actor":"Marcel-B","Number":"783","RawContent":null,"Title":"The demo app displays nothing in the browser.","State":"closed","Body":"Hello, everybody.\r\n\r\nWhen I start the demo project, the browser opens, but it is nothing displayed (only **Loading...** for a few seconds) . It looks like everything (e.g. .net dll's, blazor.js, mono.js and mono.wasm) is loaded correctly into the browser. There are no visible errors or exceptions. In the windows cmd are also no errors, only green info messages.\r\nIn the \"Inspektor\" I only see inside the body tags:\r\n\r\n`<router appassembly=\"typeof(Program).Assembly\"></router>`\r\n\r\n_(Visual Studio 2017 Preview Professional on Windows 10, Blazor v0.3.0, Mozilla Firefox)_","Url":"https://github.com/aspnet/Blazor/issues/783","RelatedDescription":"Closed issue \"The demo app displays nothing in the browser.\" (#783)"},{"Id":"320815432","IsPullRequest":false,"CreatedAt":"2018-05-07T13:58:36","Actor":"rpedretti","Number":"784","RawContent":null,"Title":"Cannot bind to style when binding to events","State":"open","Body":"I'm using Blazor 0.3.0 and whenever I bind to an event any bind to 'style' breaks.\r\n\r\nI have a sample app at [https://github.com/rpedretti/BlazorApp](https://github.com/rpedretti/BlazorApp) on branch version_0_3_0 that the bug can be reproduced, but I guess it' happens in any project\r\n\r\nGiven a simple tag like\r\n\r\n```html\r\n<p onmouseover=\"@ViewModel.OnComponentHover\"\r\n  style=\"background: @ViewModel.ParentBgColor;\" />\r\n```\r\n\r\nThe compiler throws \r\n\r\n> Error Component attributes do not support complex content (mixed C# and markup). Attribute: 'style', text 'background:ViewModel.ParentBgColor;\r\n\r\nand even the intellisense breakes:\r\n![image](https://user-images.githubusercontent.com/675601/39705115-d74273bc-51e3-11e8-83a8-39cd8511f4e2.png)\r\n\r\nBy removing any of the properties the project compiles beautifully and intellisense works again.\r\n\r\n![image](https://user-images.githubusercontent.com/675601/39705170-fc444618-51e3-11e8-89e9-c9fca3884ffb.png)\r\n\r\n","Url":"https://github.com/aspnet/Blazor/issues/784","RelatedDescription":"Open issue \"Cannot bind to style when binding to events\" (#784)"},{"Id":"320752430","IsPullRequest":false,"CreatedAt":"2018-05-07T12:38:51","Actor":"magnihansen","Number":"782","RawContent":null,"Title":"[Feature Request] Blazor VS page templates","State":"closed","Body":"Sme Blazor page templates would be nice.","Url":"https://github.com/aspnet/Blazor/issues/782","RelatedDescription":"Closed issue \"[Feature Request] Blazor VS page templates\" (#782)"},{"Id":"320711280","IsPullRequest":false,"CreatedAt":"2018-05-07T08:05:47","Actor":"simonziegler","Number":"781","RawContent":null,"Title":"Https","State":"open","Body":"Hi,\r\n\r\nAs I experiment, I would like to see if I can enforce Https communication between the Blazor Client and Server. Is there a way to do this please? Sorry if this is a basic question.\r\n\r\nSimon","Url":"https://github.com/aspnet/Blazor/issues/781","RelatedDescription":"Open issue \"Https\" (#781)"},{"Id":"320568795","IsPullRequest":false,"CreatedAt":"2018-05-07T04:48:35","Actor":"Psvensso","Number":"777","RawContent":null,"Title":"Eventhandlers not binding as expected: The call is ambiguous between BindMethods.GetEventHandlerValue...","State":"closed","Body":"Trying to update the blazor-realworld-example-app on a local fork but having problems updating to the new onclick=\"@x\" binder syntax.\r\n\r\nExample: \r\n`<a class=\"nav-link\" onclick=\"@clicktest\"> Click test</a>`\r\n\r\n`void clicktest(UIMouseEventArgs e) {\r\n        Console.WriteLine(\"Click testing \");\r\n    }`\r\n\r\n \r\nResult: \r\nThe call is ambiguous between the following methods or properties: 'BindMethods.GetEventHandlerValue<T>(Action<T>)' and 'BindMethods.GetEventHandlerValue<T>(Func<T, Task>)'\tBlazorRealworld\r\n(Same result with or without the UIMouseEventArgs n the handler)\r\n\r\nNote: \r\nA lambda works fine\r\n`<a class=\"nav-link\" onclick=\"@((e)=>clicktest(e))\">\r\n                        Click test\r\n                    </a>`\r\n\r\n\r\nRefs:\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n\r\n  <PropertyGroup>\r\n    <TargetFramework>netstandard2.0</TargetFramework>\r\n    <RunCommand>dotnet</RunCommand>\r\n    <RunArguments>blazor serve</RunArguments>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    \r\n    <PackageReference Include=\"CommonMark.NET\" Version=\"0.15.1\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Razor.Design\" Version=\"2.1.0-preview2-final\" PrivateAssets=\"all\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Blazor.Browser\" Version=\"0.3.0\" PrivateAssets=\"all\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Blazor.Build\" Version=\"0.3.0\" />\r\n    <PackageReference Include=\"Microsoft.NET.Sdk.Razor\" Version=\"2.1.0-preview2-final\" PrivateAssets=\"All\" />\r\n    <DotNetCliToolReference Include=\"Microsoft.AspNetCore.Blazor.Cli\" Version=\"0.3.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nCore SDK: 2.1.300-preview2-008533\r\nTest repo: https://github.com/Psvensso/blazor-realworld-example-app/tree/onclick-snapshot","Url":"https://github.com/aspnet/Blazor/issues/777","RelatedDescription":"Closed issue \"Eventhandlers not binding as expected: The call is ambiguous between BindMethods.GetEventHandlerValue...\" (#777)"},{"Id":"320617599","IsPullRequest":false,"CreatedAt":"2018-05-06T18:47:12","Actor":"thesobercoder","Number":"780","RawContent":null,"Title":"[Feature Request] Provide a way to restrict the usage of tags inside a parent component","State":"open","Body":"As point-of-view from a library authoring it is necessary as an author to limit the usage of tag that can be authored inside a parent component.\r\n\r\nA trivial example would be \r\n\r\n```\r\n<MyAwesomeDropdown>\r\n    <Item Value=\"1\" Text=\"A\" />\r\n    <Item Value=\"2\" Text=\"B\" />\r\n    <SomeOtherNotValidTag /> <!-- Should be Invalid -->\r\n    <div>Hello World</div> <!-- Should be Invalid -->\r\n</MyAwesomeDropdown>\r\n```\r\n\r\nSince we are in the awesome sugary strongly typed C# land, the type system gives the author confidence on shipping the library with hard set rules and also lets the consumer adopt the library easily without fiddling around at run-time to find out what went wrong.","Url":"https://github.com/aspnet/Blazor/issues/780","RelatedDescription":"Open issue \"[Feature Request] Provide a way to restrict the usage of tags inside a parent component\" (#780)"},{"Id":"320613769","IsPullRequest":false,"CreatedAt":"2018-05-06T18:02:18","Actor":"csnewman","Number":"779","RawContent":null,"Title":"Invalid XHTML markup causes lockup","State":"open","Body":"Invalid xhtml markup in the form of an unterminated tag causes the CPU to hit 100% and for the page to become completely unresponsive until chrome asks you if you wish to kill the page.\r\n\r\n```\r\n@page \"/example\"\r\n\r\n<h5 class=\"card-title\">(some text)</h5>\r\n<p class=\"card-text\">\r\n    (Some text as well)\r\n<p class=\"card-text\">\r\n   (Some other text)\r\n</p>\r\n```\r\n\r\nAs seen, the first p tag is not terminated. \r\n","Url":"https://github.com/aspnet/Blazor/issues/779","RelatedDescription":"Open issue \"Invalid XHTML markup causes lockup\" (#779)"},{"Id":"320560101","IsPullRequest":false,"CreatedAt":"2018-05-06T03:45:03","Actor":"danroth27","Number":"775","RawContent":null,"Title":"Blazor dev tools browser extension","State":"open","Body":"Other frameworks like [Vue](https://chrome.google.com/webstore/detail/vuejs-devtools/nhdogjmejiglipccpnnnanhbledajbpd) and [Redux](https://chrome.google.com/webstore/detail/redux-devtools/lmhkpmbekcpmknklioeibfkpmmfibljd) have some pretty nice dev tools browser extensions. \r\n\r\nWe should consider having a Blazor dev tools browser extension. Potential scenarios:\r\n- Inspect components\r\n- Update components with live reloading\r\n","Url":"https://github.com/aspnet/Blazor/issues/775","RelatedDescription":"Open issue \"Blazor dev tools browser extension\" (#775)"},{"Id":"320556305","IsPullRequest":false,"CreatedAt":"2018-05-06T02:09:37","Actor":"attilah","Number":"774","RawContent":null,"Title":"camelCase all the things","State":"open","Body":"It is a question not an issue.\r\n\r\nNow as @SteveSandersonMS 's camel case PR merged, wouldn't it be nice to update all the TS data structures (I'm thinking about events for example) to move from pascal case to camel case property names?\r\n\r\nSince @galvesribeiro is [working on](https://github.com/aspnet/Blazor/pull/771) filling up the events with payload it would be good to have a decision on it.","Url":"https://github.com/aspnet/Blazor/issues/774","RelatedDescription":"Open issue \"camelCase all the things\" (#774)"},{"Id":"320549560","IsPullRequest":false,"CreatedAt":"2018-05-05T23:35:18","Actor":"Suchiman","Number":"773","RawContent":null,"Title":"Html in Attribute values cause build errors in current CI builds","State":"open","Body":"```cshtml\r\n@page \"/\"\r\n\r\n<h1>Hello, world!</h1>\r\n\r\nWelcome to your new app.\r\n\r\n<SurveyPrompt Title=\"<div>Test!</div>\" />\r\n```\r\nwill cause\r\n```\r\nOne or more errors occurred. (Unexpected node type Microsoft.AspNetCore.Blazor.Razor.HtmlElementIntermediateNode)\r\nat System.Threading.Tasks.TaskReplicator.Run[TState](ReplicatableUserAction`1 action, ParallelOptions options, Boolean stopOnFirstFailure)\r\nat System.Threading.Tasks.Parallel.ForWorker[TLocal](Int32 fromInclusive, Int32 toExclusive, ParallelOptions parallelOptions, Action`1 body, Action`2 bodyWithState, Func`4 bodyWithLocal, Func`1 localInit, Action`1 localFinally)\r\n--- End of stack trace from previous location where exception was thrown ---\r\nat System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nat System.Threading.Tasks.Parallel.ThrowSingleCancellationExceptionOrOtherException(ICollection exceptions, CancellationToken cancelToken, Exception otherException)\r\nat System.Threading.Tasks.Parallel.ForWorker[TLocal](Int32 fromInclusive, Int32 toExclusive, ParallelOptions parallelOptions, Action`1 body, Action`2 bodyWithState, Func`4 bodyWithLocal, Func`1 localInit, Action`1 localFinally)\r\nat System.Threading.Tasks.Parallel.For(Int32 fromInclusive, Int32 toExclusive, ParallelOptions parallelOptions, Action`1 body)\r\nat Microsoft.AspNetCore.Razor.Tools.GenerateCommand.GenerateCode(RazorProjectEngine engine, SourceItem[] inputs)\r\nat Microsoft.AspNetCore.Razor.Tools.GenerateCommand.ExecuteCore(RazorConfiguration configuration, String projectDirectory, String tagHelperManifest, List`1 sources, List`1 outputs, List`1 relativePaths)\r\nat Microsoft.AspNetCore.Razor.Tools.GenerateCommand.ExecuteCoreAsync()\r\nat Microsoft.AspNetCore.Razor.Tools.CommandBase.<ExecuteAsync>d__10.MoveNext()\r\npackages\\microsoft.aspnetcore.blazor.build\\0.4.0-preview1-10282\\targets\\RazorCompilation.targets(281,5): error : rzc generate exited with code 1. [WebApplication7\\WebApplication7\\WebApplication7.csproj]\r\n```","Url":"https://github.com/aspnet/Blazor/issues/773","RelatedDescription":"Open issue \"Html in Attribute values cause build errors in current CI builds\" (#773)"},{"Id":"320528509","IsPullRequest":false,"CreatedAt":"2018-05-05T17:51:37","Actor":"Suchiman","Number":"772","RawContent":null,"Title":"ArgumentOutOfRangeException in current CI VSIX builds","State":"open","Body":"Start with\r\n```cshtml\r\n@page \"/\"\r\n\r\n<h1>Hello, world!</h1>\r\n\r\nWelcome to your new app.\r\n\r\n<SurveyPrompt\r\n```\r\nnow autocomplete Title and you'll end up with ( | = cursor )\r\n```cshtml\r\n@page \"/\"\r\n\r\n<h1>Hello, world!</h1>\r\n\r\nWelcome to your new app.\r\n\r\n<SurveyPrompt Title=\"|\"\r\n```\r\nat this point, VS will freeze and restart, caused by this exception\r\n```\r\nSystem.ArgumentOutOfRangeException\r\n   at Microsoft.AspNetCore.Razor.Language.Intermediate.IntermediateNodeCollection.get_Item(Int32)\r\n   at Microsoft.AspNetCore.Blazor.Razor.BlazorDesignTimeNodeWriter.WriteComponentAttribute(Microsoft.AspNetCore.Razor.Language.CodeGeneration.CodeRenderingContext, Microsoft.AspNetCore.Blazor.Razor.ComponentAttributeExtensionNode)\r\n   at Microsoft.AspNetCore.Blazor.Razor.ComponentAttributeExtensionNode.WriteNode(Microsoft.AspNetCore.Razor.Language.CodeGeneration.CodeTarget, Microsoft.AspNetCore.Razor.Language.CodeGeneration.CodeRenderingContext)\r\n   at Microsoft.AspNetCore.Razor.Language.CodeGeneration.DefaultDocumentWriter+Visitor.VisitExtension(Microsoft.AspNetCore.Razor.Language.Intermediate.ExtensionIntermediateNode)\r\n   at Microsoft.AspNetCore.Razor.Language.Intermediate.ExtensionIntermediateNode.AcceptExtensionNode[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]](System.__Canon, Microsoft.AspNetCore.Razor.Language.Intermediate.IntermediateNodeVisitor)\r\n   at Microsoft.AspNetCore.Blazor.Razor.ComponentAttributeExtensionNode.Accept(Microsoft.AspNetCore.Razor.Language.Intermediate.IntermediateNodeVisitor)\r\n   at Microsoft.AspNetCore.Razor.Language.Intermediate.IntermediateNodeVisitor.Visit(Microsoft.AspNetCore.Razor.Language.Intermediate.IntermediateNode)\r\n   at Microsoft.AspNetCore.Razor.Language.CodeGeneration.DefaultCodeRenderingContext.RenderNode(Microsoft.AspNetCore.Razor.Language.Intermediate.IntermediateNode)\r\n   at Microsoft.AspNetCore.Blazor.Razor.BlazorDesignTimeNodeWriter.WriteComponent(Microsoft.AspNetCore.Razor.Language.CodeGeneration.CodeRenderingContext, Microsoft.AspNetCore.Blazor.Razor.ComponentExtensionNode)\r\n   at Microsoft.AspNetCore.Blazor.Razor.ComponentExtensionNode.WriteNode(Microsoft.AspNetCore.Razor.Language.CodeGeneration.CodeTarget, Microsoft.AspNetCore.Razor.Language.CodeGeneration.CodeRenderingContext)\r\n   at Microsoft.AspNetCore.Razor.Language.CodeGeneration.DefaultDocumentWriter+Visitor.VisitExtension(Microsoft.AspNetCore.Razor.Language.Intermediate.ExtensionIntermediateNode)\r\n   at Microsoft.AspNetCore.Razor.Language.Intermediate.ExtensionIntermediateNode.AcceptExtensionNode[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]](System.__Canon, Microsoft.AspNetCore.Razor.Language.Intermediate.IntermediateNodeVisitor)\r\n   at Microsoft.AspNetCore.Blazor.Razor.ComponentExtensionNode.Accept(Microsoft.AspNetCore.Razor.Language.Intermediate.IntermediateNodeVisitor)\r\n   at Microsoft.AspNetCore.Razor.Language.Intermediate.IntermediateNodeVisitor.Visit(Microsoft.AspNetCore.Razor.Language.Intermediate.IntermediateNode)\r\n   at Microsoft.AspNetCore.Razor.Language.CodeGeneration.DefaultCodeRenderingContext.RenderChildren(Microsoft.AspNetCore.Razor.Language.Intermediate.IntermediateNode)\r\n   at Microsoft.AspNetCore.Razor.Language.CodeGeneration.DefaultDocumentWriter+Visitor.VisitDefault(Microsoft.AspNetCore.Razor.Language.Intermediate.IntermediateNode)\r\n   at Microsoft.AspNetCore.Razor.Language.CodeGeneration.DefaultDocumentWriter+Visitor.VisitMethodDeclaration(Microsoft.AspNetCore.Razor.Language.Intermediate.MethodDeclarationIntermediateNode)\r\n   at Microsoft.AspNetCore.Razor.Language.Intermediate.MethodDeclarationIntermediateNode.Accept(Microsoft.AspNetCore.Razor.Language.Intermediate.IntermediateNodeVisitor)\r\n   at Microsoft.AspNetCore.Razor.Language.Intermediate.IntermediateNodeVisitor.Visit(Microsoft.AspNetCore.Razor.Language.Intermediate.IntermediateNode)\r\n   at Microsoft.AspNetCore.Razor.Language.CodeGeneration.DefaultCodeRenderingContext.RenderChildren(Microsoft.AspNetCore.Razor.Language.Intermediate.IntermediateNode)\r\n   at Microsoft.AspNetCore.Razor.Language.CodeGeneration.DefaultDocumentWriter+Visitor.VisitDefault(Microsoft.AspNetCore.Razor.Language.Intermediate.IntermediateNode)\r\n   at Microsoft.AspNetCore.Razor.Language.CodeGeneration.DefaultDocumentWriter+Visitor.VisitClassDeclaration(Microsoft.AspNetCore.Razor.Language.Intermediate.ClassDeclarationIntermediateNode)\r\n   at Microsoft.AspNetCore.Razor.Language.Intermediate.ClassDeclarationIntermediateNode.Accept(Microsoft.AspNetCore.Razor.Language.Intermediate.IntermediateNodeVisitor)\r\n   at Microsoft.AspNetCore.Razor.Language.Intermediate.IntermediateNodeVisitor.Visit(Microsoft.AspNetCore.Razor.Language.Intermediate.IntermediateNode)\r\n   at Microsoft.AspNetCore.Razor.Language.CodeGeneration.DefaultCodeRenderingContext.RenderChildren(Microsoft.AspNetCore.Razor.Language.Intermediate.IntermediateNode)\r\n   at Microsoft.AspNetCore.Razor.Language.CodeGeneration.DefaultDocumentWriter+Visitor.VisitDefault(Microsoft.AspNetCore.Razor.Language.Intermediate.IntermediateNode)\r\n   at Microsoft.AspNetCore.Razor.Language.CodeGeneration.DefaultDocumentWriter+Visitor.VisitNamespaceDeclaration(Microsoft.AspNetCore.Razor.Language.Intermediate.NamespaceDeclarationIntermediateNode)\r\n   at Microsoft.AspNetCore.Razor.Language.Intermediate.NamespaceDeclarationIntermediateNode.Accept(Microsoft.AspNetCore.Razor.Language.Intermediate.IntermediateNodeVisitor)\r\n   at Microsoft.AspNetCore.Razor.Language.Intermediate.IntermediateNodeVisitor.Visit(Microsoft.AspNetCore.Razor.Language.Intermediate.IntermediateNode)\r\n   at Microsoft.AspNetCore.Razor.Language.CodeGeneration.DefaultCodeRenderingContext.RenderChildren(Microsoft.AspNetCore.Razor.Language.Intermediate.IntermediateNode)\r\n   at Microsoft.AspNetCore.Razor.Language.CodeGeneration.DefaultDocumentWriter+Visitor.VisitDefault(Microsoft.AspNetCore.Razor.Language.Intermediate.IntermediateNode)\r\n   at Microsoft.AspNetCore.Razor.Language.CodeGeneration.DefaultDocumentWriter+Visitor.VisitDocument(Microsoft.AspNetCore.Razor.Language.Intermediate.DocumentIntermediateNode)\r\n   at Microsoft.AspNetCore.Razor.Language.CodeGeneration.DefaultDocumentWriter.WriteDocument(Microsoft.AspNetCore.Razor.Language.RazorCodeDocument, Microsoft.AspNetCore.Razor.Language.Intermediate.DocumentIntermediateNode)\r\n   at Microsoft.AspNetCore.Blazor.Razor.BlazorRazorCSharpLoweringPhase.ExecuteCore(Microsoft.AspNetCore.Razor.Language.RazorCodeDocument)\r\n   at Microsoft.AspNetCore.Razor.Language.RazorEnginePhaseBase.Execute(Microsoft.AspNetCore.Razor.Language.RazorCodeDocument)\r\n   at Microsoft.AspNetCore.Razor.Language.DefaultRazorEngine.Process(Microsoft.AspNetCore.Razor.Language.RazorCodeDocument)\r\n   at Microsoft.AspNetCore.Razor.Language.DefaultRazorProjectEngine.ProcessCore(Microsoft.AspNetCore.Razor.Language.RazorCodeDocument)\r\n   at Microsoft.AspNetCore.Razor.Language.RazorProjectEngine.ProcessDesignTime(Microsoft.AspNetCore.Razor.Language.RazorProjectItem)\r\n   at Microsoft.VisualStudio.Editor.Razor.BackgroundParser+BackgroundThread.WorkerLoop()\r\n   at System.Threading.ThreadHelper.ThreadStart_Context(System.Object)\r\n   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)\r\n   at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)\r\n   at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object)\r\n   at System.Threading.ThreadHelper.ThreadStart()\r\n```","Url":"https://github.com/aspnet/Blazor/issues/772","RelatedDescription":"Open issue \"ArgumentOutOfRangeException in current CI VSIX builds\" (#772)"},{"Id":"320527558","IsPullRequest":true,"CreatedAt":"2018-05-05T17:37:35","Actor":"galvesribeiro","Number":"771","RawContent":null,"Title":"Event payload","State":"open","Body":"Enhanced DOM events with proper payload.\r\n\r\nEvery commit comes with a particular (or set of related) event(s). \r\n\r\nI'll rebase/reset once the review is over.\r\n\r\n~~Blockers:~~\r\n\r\n~~- Touch events are blocked by #776~~","Url":"https://github.com/aspnet/Blazor/pull/771","RelatedDescription":"Open PR \"Event payload\" (#771)"},{"Id":"320509048","IsPullRequest":true,"CreatedAt":"2018-05-05T16:41:08","Actor":"Suchiman","Number":"770","RawContent":null,"Title":"Recognize synchronously-completed tasks in BlazorComponent","State":"closed","Body":"Don't schedule StateHasChanged if async lifecycle events complete synchronously, fixes #760","Url":"https://github.com/aspnet/Blazor/pull/770","RelatedDescription":"Closed or merged PR \"Recognize synchronously-completed tasks in BlazorComponent\" (#770)"},{"Id":"320505037","IsPullRequest":false,"CreatedAt":"2018-05-05T16:33:55","Actor":"boukenka","Number":"769","RawContent":null,"Title":"Some questions about milestones","State":"closed","Body":"First of all, thank you for that great project. It is opening so many new possibilities.\r\nHere are my questions:\r\n\r\n1. Why not remove the 2 remaining requests (SignalR and Events) and assign then to the milestone 0.4? I guess they will take some time.\r\n2. Do you plan to have more than 2 points for the milestone 0.4?\r\nI am just curious what will contain the next milestones.\r\nAlso I can see the number of issues/questions rapidly increasing in the last days.\r\nI guess it becoming more difficult to process/analyze all of them.","Url":"https://github.com/aspnet/Blazor/issues/769","RelatedDescription":"Closed issue \"Some questions about milestones\" (#769)"},{"Id":"320487389","IsPullRequest":false,"CreatedAt":"2018-05-05T16:10:08","Actor":"DierkDroth","Number":"767","RawContent":null,"Title":"We needed to talk performance","State":"closed","Body":"Hi,\r\n\r\nWe're investing significant effort in migrating our fat client .NET app to the web. Obviously we're very excited about wasm and Blazor and already made our business logic .NET Standard 2.0 compliant. In the last few days our prototype showed the first signs of life. However, we immediately hit a road block/show stopper ...\r\n\r\nSorry for being frank, but **performance is a desaster**\r\n\r\nDetails:\r\n- we found (using StopWatch) that our business logic is executed >= **100x slower** on wasm/Blazor than on desktop/.NET framework\r\n- we initially were in a disbelieve, but confirmed those findings by some simple/crude performance benchmarks\r\n\r\nAs per [FAQ ](https://github.com/aspnet/Blazor/wiki/FAQ) I understand that the app is not compiled but MSIL code is 'interpreted' by the .NET runtime (which is compiled to wasm)  as wasm binary. The compile option only is rendered as 'may be'.\r\n\r\nQuestions:\r\n1) are our performance findings accurate or are we missing something?\r\n2) if our findings are accurate: what is the path for Blazor to overcome that performance show stopper?\r\n\r\nThanks in advance","Url":"https://github.com/aspnet/Blazor/issues/767","RelatedDescription":"Closed issue \"We needed to talk performance\" (#767)"},{"Id":"320458024","IsPullRequest":false,"CreatedAt":"2018-05-05T16:02:14","Actor":"Andrzej-W","Number":"766","RawContent":null,"Title":"Add scoped lifetime to DI - inject the same service instance to child components","State":"closed","Body":"Let's assume I have a Customer component - this is the parent component. I also have CustomerList and CustomerDetails components - these are child components and they are displayed inside Customer component. All three components have to share some data and some business logic including Web API calls. I want to encapsulate this in CustomerService. Currently the only reasonable choice is to register CustomerService as Singleton and then inject it into all three Customer* components.\r\n\r\nIt's OK but below is another scenario where Singleton is not enough.\r\n\r\nI have CustomerComparer component and I want to display two different customers side by side. To do this I want to use two Customer components. Of course they cannot work with the same instance of CustomerService. The only solution I see here is to register CustomerService as Scoped (which is currently equivalent to Singleton). Scoped should work as follows:\r\n- service injected into the first component in hierarchy should work as Transient,\r\n- all child components should get the same service instance as parent component.\r\n\r\nWith the above functionality I will be able to display two Customer components at the same time.\r\n\r\nLook at #464 also.","Url":"https://github.com/aspnet/Blazor/issues/766","RelatedDescription":"Closed issue \"Add scoped lifetime to DI - inject the same service instance to child components\" (#766)"},{"Id":"320378541","IsPullRequest":false,"CreatedAt":"2018-05-05T16:00:42","Actor":"chanan","Number":"764","RawContent":null,"Title":"Loops, Lambdas, and Variables","State":"closed","Body":"This might be a known Razor issue, and since I haven't used Razor in ages I was caught off guard.\r\n\r\nThis does not work:\r\n```\r\n@for (int i = 0; i < items.Count; i++)\r\n{\r\n  <CarouselItem IsActive=\"@(SecondIndex == i)\" src=\"@item[i].Source\" alt=\"@items[i].Alt\">\r\n    <h5>@items[0].Header</h5>\r\n  </CarouselItem>\r\n}\r\n```\r\n\r\nYou get an exception with the h5 line (the previous lines are fine):\r\n\r\n```\r\nUncaught Error: System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\r\nParameter name: index\r\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) <0x1f27f48 + 0x00018> in <140509c0d46c421ca83585ed625d5577>:0 \r\n  at Sample.Pages.Carousels+<>c__DisplayClass0_0.<BuildRenderTree>b__10 (Microsoft.AspNetCore.Blazor.RenderTree.RenderTreeBuilder builder3) <0x1f3d190 + 0x00090> in <14d8d1e2ea4743fa889b8a5ddf494a58>:0 \r\n\r\n```\r\n\r\nThe work around is to add a capture variable in the loop like so:\r\n```\r\n@for (int i = 0; i < items.Count; i++)\r\n{\r\n  Item item = items[i];\r\n  <CarouselItem IsActive=\"@(SecondIndex == i)\" src=\"@item.Source\" alt=\"@item.Alt\">\r\n    <h5>@item.Header</h5>\r\n  </CarouselItem>\r\n}\r\n```\r\n\r\nLike I said not sure if this is fixable since it might be in Razor like that, but at the very least a better error message and adding this to the docs would be helpful.","Url":"https://github.com/aspnet/Blazor/issues/764","RelatedDescription":"Closed issue \"Loops, Lambdas, and Variables\" (#764)"},{"Id":"320499475","IsPullRequest":false,"CreatedAt":"2018-05-05T10:47:15","Actor":"stavroskasidis","Number":"768","RawContent":null,"Title":"Component rendering logic requiring javascript interop with ElementRef","State":"open","Body":"I am stuck with the following problem in a component library I am developing. I want to expose an \"`Func<ElementRef,bool> EnabledHandler`\" parameter in my component, because the consumer of the component is expected to decide whether the component should be enabled or not based on some Javascript logic that includes the element reference. \r\n\r\nBecause I am dependent on the `ElementRef` I tried to insert the logic in the `OnAfterRender` event, however it is too late in the component's lifecycle to change the rendered html.\r\n\r\nLet me elaborate, consider the following example:\r\n\r\n### Index.cshtml\r\n\r\n```\r\n<div>\r\n    <DynamicButton EnabledHandler=\"@DynamicEnabled\" />\r\n</div>\r\n<span>\r\n    <DynamicButton EnabledHandler=\"@DynamicEnabled\" />\r\n</span>\r\n\r\n@functions{\r\n    bool DynamicEnabled(ElementRef element)\r\n    {\r\n        //Do some javascript stuff with the element and decide if the component should be enabled\r\n        return RegisteredFunction.Invoke<bool>(\"buttonEnabledLogic\", element); ;\r\n    }\r\n}\r\n```\r\n\r\n### Javascript\r\n```html\r\n<script>\r\n\tBlazor.registerFunction('buttonEnabledLogic', function (elem) {\r\n\t\t//some example js logic that requires the element\r\n\t\treturn elem.parentNode.nodeName == \"DIV\";\r\n\t});\r\n</script>\r\n```\r\n\r\n### DynamicButton.cshtml\r\n\r\n```xml\r\n<button ref=\"@ButtonRef\" disabled=\"@(!Enabled)\">I am dynamically enabled</button>\r\n@functions{\r\n\r\n    ElementRef ButtonRef;\r\n    bool Enabled { get; set; } = true;\r\n    [Parameter]\r\n    Func<ElementRef, bool> EnabledHandler { get; set; }\r\n\r\n    protected override void OnAfterRender()\r\n    {\r\n        //The EnabledHandler requires ButtonRef to be populated, so \r\n        //it must be OnAfterRender\r\n\r\n        var oldEnabledValue = Enabled;\r\n        if (EnabledHandler != null)\r\n        {\r\n            Enabled = EnabledHandler(ButtonRef);\r\n        }\r\n\r\n        if (oldEnabledValue != Enabled)\r\n        {\r\n            //This does not work\r\n            StateHasChanged();\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nAny suggestions/workarounds ? \r\nThanks in advance","Url":"https://github.com/aspnet/Blazor/issues/768","RelatedDescription":"Open issue \"Component rendering logic requiring javascript interop with ElementRef\" (#768)"},{"Id":"320422428","IsPullRequest":true,"CreatedAt":"2018-05-04T23:29:01","Actor":"attilah","Number":"765","RawContent":null,"Title":"Add support for pointer events, change oncontextmenu event type","State":"closed","Body":"- Add support for pointer events\r\n- Change oncontextmenu event from pointerevent to mouseevent (based on MDN docs)\r\n\r\nFixes: https://github.com/aspnet/Blazor/issues/763","Url":"https://github.com/aspnet/Blazor/pull/765","RelatedDescription":"Closed or merged PR \"Add support for pointer events, change oncontextmenu event type\" (#765)"},{"Id":"320350287","IsPullRequest":false,"CreatedAt":"2018-05-04T23:29:01","Actor":"attilah","Number":"763","RawContent":null,"Title":"pointer events as not handled and oncontextmenu event type is wrong","State":"closed","Body":"I found out that [pointer](https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent) events are not handled by Blazor 0.3.0.\r\n\r\nWhen I was about to add them, I saw that Blazor already have a ```UIPointerEventArgs``` class and it is associated with the [onContextMenu](https://github.com/aspnet/Blazor/blob/dev/src/Microsoft.AspNetCore.Blazor/Components/EventHandlers.cs#L44) handler, which is by the specs does not make sense, since it is a [mouse](https://developer.mozilla.org/en-US/docs/Web/Events/contextmenu) event.\r\n\r\nIf I see it correctly the only changes needed to support pointer events are:\r\n\r\nEventhandlers.cs:\r\n\r\n```c#\r\n    // Pointer events\r\n    [EventHandler(\"gotpointercapture\", typeof(UIPointerEventArgs))]\r\n    [EventHandler(\"lostpointercapture\", typeof(UIPointerEventArgs))]\r\n    [EventHandler(\"pointercancel\", typeof(UIPointerEventArgs))]\r\n    [EventHandler(\"pointerdown\", typeof(UIPointerEventArgs))]\r\n    [EventHandler(\"pointerenter\", typeof(UIPointerEventArgs))]\r\n    [EventHandler(\"pointerleave\", typeof(UIPointerEventArgs))]\r\n    [EventHandler(\"pointermove\", typeof(UIPointerEventArgs))]\r\n    [EventHandler(\"pointerout\", typeof(UIPointerEventArgs))]\r\n    [EventHandler(\"pointerover\", typeof(UIPointerEventArgs))]\r\n    [EventHandler(\"pointerup\", typeof(UIPointerEventArgs))]\r\n```\r\n\r\nEventForDotNet.ts:\r\n\r\n```js\r\ncase 'gotpointercapture':\r\ncase 'lostpointercapture':\r\ncase 'pointercancel':\r\ncase 'pointerdown':\r\ncase 'pointerenter':\r\ncase 'pointerleave':\r\ncase 'pointermove':\r\ncase 'pointerout':\r\ncase 'pointerover':\r\ncase 'pointerup':\r\n  return new EventForDotNet<UIPointerEventArgs>('pointer', { Type: event.type });\r\n```\r\n\r\nAll the other places because of the ```oncontextmenu``` handler already having the pieces for pointer events.\r\n\r\nWould you like to have a PR or you will copy these to the appropriate places?\r\n","Url":"https://github.com/aspnet/Blazor/issues/763","RelatedDescription":"Closed issue \"pointer events as not handled and oncontextmenu event type is wrong\" (#763)"},{"Id":"320348974","IsPullRequest":true,"CreatedAt":"2018-05-04T17:42:29","Actor":"eakoning","Number":"762","RawContent":null,"Title":"typo","State":"closed","Body":"Just a small typo... ;-)","Url":"https://github.com/aspnet/Blazor/pull/762","RelatedDescription":"Closed or merged PR \"typo\" (#762)"},{"Id":"320317062","IsPullRequest":false,"CreatedAt":"2018-05-04T15:26:53","Actor":"dlr1","Number":"761","RawContent":null,"Title":"question: Bound parameter value","State":"closed","Body":"I have a component(\"mycomp\"). I am just writing the value of parameter and expect the values to be in sync. what am I missing?\r\n```\r\n<div class=\"row\" style=\"height:100px;width:300px;\">\r\n    bound charttype value:@ChartType\r\n    <br />\r\n    ChartTypeInMethod: @ChartTypeInMethod\r\n</div>\r\n\r\n\r\n@functions{\r\n    [Parameter]\r\n    string ChartType { get; set; }\r\n\r\n    string ChartTypeInMethod { get; set; }\r\n    public void MyMethod()\r\n    {\r\n        ChartTypeInMethod = ChartType;\r\n    }\r\n}\r\n```\r\nI am using the above component in another page like below\r\n```\r\n<div class=\"row\">\r\n    <mycomp ChartType=\"@ChartType\" ref=\"comp1\"></mycomp>   \r\n    <div>\r\n        <input type=\"radio\" name=\"charttype\" checked=\"@(ChartType==\"bar\")\" value=\"bar\" onchange=\"@((e)=>charttypeChanged(e))\"/>bar\r\n        <input type=\"radio\" name=\"charttype\" checked=\"@(ChartType==\"line\")\" value=\"line\" onchange=\"@((e)=>charttypeChanged(e))\" />line\r\n    </div>\r\n</div>\r\n\r\n@functions{        \r\n    string ChartType { get; set; }\r\n    mycomp comp1;\r\n    \r\n    void charttypeChanged(UIChangeEventArgs e)\r\n    {\r\n        ChartType = e.Value.ToString();        \r\n        comp1.MyMethod();\r\n    }\r\n}\r\n```","Url":"https://github.com/aspnet/Blazor/issues/761","RelatedDescription":"Closed issue \"question: Bound parameter value\" (#761)"}],"ResultType":"GitHubIssue"}},"RunOn":"2018-05-08T05:30:02.4756994Z","RunDurationInMilliseconds":1173}