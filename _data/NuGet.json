{"Data":{"Blog":{"FeedItems":[{"Title":"Deprecating TLS 1.0 and 1.1 on NuGet.org","PublishedOn":"2019-11-15T18:58:33+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"At Microsoft, using the latest and secure encryption techniques is very important to us to ensure the security and privacy of our customers. TLS 1.0 and TLS 1.1, released in 1999 and 2006...","Href":"https://devblogs.microsoft.com/nuget/deprecating-tls-1-0-and-1-1-on-nuget-org/","RawContent":null},{"Title":"Deprecating packages on nuget.org","PublishedOn":"2019-09-30T18:29:23+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We are excited to announce that nuget.org now supports package deprecation. This has been a long standing ask that will help the ecosystem use supported packages. As a package publisher on nuget.org,...","Href":"https://devblogs.microsoft.com/nuget/deprecating-packages-on-nuget-org/","RawContent":null},{"Title":"New and improved NuGet Search is here!","PublishedOn":"2019-08-23T03:31:26+00:00","CommentsCount":11,"FacebookCount":0,"Summary":"It’s been a long time coming, and today we are excited to announce the new and improved search on NuGet.org leveraging Azure Search. We want to start this post with a huge thanks to you, the NuGet...","Href":"https://devblogs.microsoft.com/nuget/new-and-improved-nuget-search/","RawContent":null},{"Title":"Surfacing GitHub Usage for packages on NuGet.org","PublishedOn":"2019-07-17T20:00:23+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"There are several criteria you can use today to evaluate NuGet packages. We received feedback that you would like even more information to help choose the right packages. We&#8217;re excited to...","Href":"https://devblogs.microsoft.com/nuget/surfacing-github-usage-for-packages-on-nuget-org/","RawContent":null},{"Title":"NuGet Spring 2019 Roadmap","PublishedOn":"2019-04-10T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We published our last NuGet roadmap in June last year. Many of the features announced were major additions to NuGet and we have been hard at work to implement those over the last few months. In this...","Href":"https://devblogs.microsoft.com/nuget/nuget-spring-2019-roadmap/","RawContent":null},{"Title":"Enable repeatable package restores using a lock file","PublishedOn":"2018-12-17T08:00:00+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"With PackageReference, NuGet always tries to produce the same closure of package dependencies if the input package reference list has not changed. However, there are a few scenarios where it may not...","Href":"https://devblogs.microsoft.com/nuget/enable-repeatable-package-restores-using-a-lock-file/","RawContent":null},{"Title":"Lock down your dependencies using configurable trust policies","PublishedOn":"2018-12-05T08:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"For the past several months we have focused on various features to improve package security and trust. Around a year back, we had announced our plans on various signing functionalities that we have...","Href":"https://devblogs.microsoft.com/nuget/lock-down-your-dependencies-using-configurable-trust-policies/","RawContent":null},{"Title":"Improved package debugging experience with the NuGet.org symbol server","PublishedOn":"2018-11-16T08:00:00+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Starting today, you can publish symbol packages to the NuGet.org symbol server. With NuGet.org as a single service provider for libraries and symbols, package authors and consumers will have a...","Href":"https://devblogs.microsoft.com/nuget/improved-package-debugging-experience-with-the-nuget-org-symbol-server/","RawContent":null},{"Title":"Introducing Source Code Link for NuGet packages","PublishedOn":"2018-08-27T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"NuGet.org now supports surfacing source code repository link for NuGet packages. This will enable package authors to surface both the project&#8217;s website and the source repository using the...","Href":"https://devblogs.microsoft.com/nuget/introducing-source-code-link-for-nuget-packages/","RawContent":null},{"Title":"NuGet.org starts repo-signing packages","PublishedOn":"2018-08-10T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"In May, we implemented Stage 1 and enabled support for any NuGet.org user to submit signed packages to NuGet.org. Today, we are announcing Stage 2 of our NuGet package signing journey &#8211; tamper...","Href":"https://devblogs.microsoft.com/nuget/introducing-repository-signatures/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"10964448993","Type":"PullRequestEvent","CreatedAt":"2019-11-27T22:38:55","Actor":"agr","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/7713","RelatedDescription":"Merged pull request \"Deployment label log enrichment\" (#7713) at NuGet/NuGetGallery","RelatedBody":"Progress on https://github.com/NuGet/Engineering/issues/1912\r\n\r\nNeed it to differentiate between the deployments for app service conversion since `DeploymentIdTelemetryEnricher` will not work there. Unfortunately, this change will only work with App services, so for transition period we would need to look at both. I didn't find a way to pass this configuration bit to the cloud service configuration."},{"Id":"10963183509","Type":"IssuesEvent","CreatedAt":"2019-11-27T19:02:45","Actor":"loic-sharma","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/6890","RelatedDescription":"Reopened issue \"Response status code does not indicate success: 500 (Internal Server Error)\" (#6890) at NuGet/NuGetGallery","RelatedBody":"## Details about Problem\r\n\r\nNuGet product used (NuGet.exe | VS UI | Package Manager Console | dotnet.exe):\r\nNuGet.exe\r\nNuGet version (x.x.x.xxx):\r\n4.9.2.5706\r\ndotnet.exe --version (if appropriate):\r\n\r\nVS version (if appropriate):\r\n\r\nOS version (i.e. win10 v1607 (14393.321)):\r\nwindows 10 1803\r\nWorked before? If so, with which NuGet version:\r\n\r\n## Detailed repro steps so we can see the same problem\r\n\r\n1. I followed the Nuget document to publish the package, I've created the API keys, and it starts to PUT the package to https://www.nuget.org/api/v2/package/, my package is about 169MB.\r\n\r\n2. After some time, it shows:\r\nInternalServerError https://www.nuget.org/api/v2/package/ 602383ms, I don't get any detailed error information.\r\n\r\n![image](https://user-images.githubusercontent.com/3942409/52620006-44005280-2ede-11e9-8aa5-d9740af10602.png)\r\n\r\n----- Logs\r\nError while copying content to a stream.\r\n  Unable to read data from the transport connection: The connection was closed.\r\nSystem.Net.Http.HttpRequestException: Error while copying content to a stream. ---> System.IO.IOException: Unable to read data from the transport connection: The connection was closed.\r\n   at System.Net.ConnectStream.EndWrite(IAsyncResult asyncResult)\r\n   at System.Net.Http.StreamToStreamCopy.BufferWrittenCallback(IAsyncResult ar)\r\n   --- End of inner exception stack trace ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at NuGet.Protocol.ServerWarningLogHandler.<SendAsync>d__1.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at NuGet.Protocol.StsAuthenticationHandler.<SendAsync>d__9.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at NuGet.Protocol.HttpSourceAuthenticationHandler.<SendAsync>d__9.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at NuGet.Protocol.TimeoutUtility.<StartWithTimeout>d__0`1.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at NuGet.Protocol.HttpRetryHandler.<SendAsync>d__0.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at NuGet.Protocol.HttpSource.<GetThrottledResponse>d__20.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at NuGet.Protocol.HttpSource.<ProcessResponseAsync>d__18`1.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at NuGet.Protocol.Core.Types.PackageUpdateResource.<PushPackageToServer>d__23.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at NuGet.Protocol.Core.Types.PackageUpdateResource.<PushPackageCore>d__20.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at NuGet.Protocol.Core.Types.PackageUpdateResource.<PushPackage>d__19.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at NuGet.Protocol.Core.Types.PackageUpdateResource.<Push>d__14.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at NuGet.Commands.PushRunner.<Run>d__0.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at NuGet.CommandLine.PushCommand.<ExecuteCommandAsync>d__32.MoveNext()\r\n\r\n-----\r\n\r\nAre there anyone help?\r\nThanks!\r\n"},{"Id":"10962479860","Type":"IssuesEvent","CreatedAt":"2019-11-27T17:20:13","Actor":"skofman1","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7701","RelatedDescription":"Closed issue \"Unable to load the service index for source https://api.nuget.org/v3/index.json\" (#7701) at NuGet/NuGetGallery","RelatedBody":"Issue: [nuget.org] Unable to load the service index for source https://api.nuget.org/v3/index.json.\r\n  An error occurred while sending the request.\r\n  The request was aborted: Could not create SSL/TLS secure channel.\r\nIDE: Visual Studio 2019\r\nPlease help me resolve it\r\n\r\nThanks"},{"Id":"10954715701","Type":"IssuesEvent","CreatedAt":"2019-11-26T21:22:40","Actor":"dannyjdev","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7705","RelatedDescription":"Closed issue \"\"Could not create SSL/TLS secure channel\" error in Visual Studio\" (#7705) at NuGet/NuGetGallery","RelatedBody":"### Describe the bug\r\nSome Visual Studio customers are reporting the following error:\r\n\r\n```\r\nUnable to load the service index for source https://api.nuget.org/v3/index.json.\r\nAn error occurred while sending the request.\r\nThe request was aborted: Could not create SSL/TLS secure channel.\r\n```\r\n\r\nThe NuGet team is actively investigating this problem. At this time, the issue's root cause is unknown. See: https://developercommunity.visualstudio.com/content/problem/815971/unable-to-browse-nuget-packages-1.html\r\n\r\n### Workaround\r\n\r\nSome customers have reported that disabling TLS 1.3 has resolved their issues:\r\n\r\n```ps1\r\nNew-Item 'HKLM:\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\SCHANNEL\\Protocols\\TLS 1.3\\Server' -Force | Out-Null\r\n\t\r\nNew-ItemProperty -path 'HKLM:\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\SCHANNEL\\Protocols\\TLS 1.3\\Server' -name 'Enabled' -value '0' -PropertyType 'DWord' -Force | Out-Null\r\n\t\r\nNew-ItemProperty -path 'HKLM:\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\SCHANNEL\\Protocols\\TLS 1.3\\Server' -name 'DisabledByDefault' -value 1 -PropertyType 'DWord' -Force | Out-Null\r\n\t\r\nNew-Item 'HKLM:\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\SCHANNEL\\Protocols\\TLS 1.3\\Client' -Force | Out-Null\r\n\t\r\nNew-ItemProperty -path 'HKLM:\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\SCHANNEL\\Protocols\\TLS 1.3\\Client' -name 'Enabled' -value '0' -PropertyType 'DWord' -Force | Out-Null\r\n\t\r\nNew-ItemProperty -path 'HKLM:\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\SCHANNEL\\Protocols\\TLS 1.3\\Client' -name 'DisabledByDefault' -value 1 -PropertyType 'DWord' -Force | Out-Null\r\nWrite-Host 'TLS 1.3 has been disabled.'\r\n```\r\n\r\nYou may also need to change your .NET Framework default TLS version:\r\n\r\n```ps1\r\nreg add HKLM\\SOFTWARE\\Microsoft\\.NETFramework\\v4.0.30319 /v SystemDefaultTlsVersions /t REG_DWORD /d 1 /f /reg:64\r\nreg add HKLM\\SOFTWARE\\Microsoft\\.NETFramework\\v4.0.30319 /v SystemDefaultTlsVersions /t REG_DWORD /d 1 /f /reg:32\r\n```"},{"Id":"10952754342","Type":"IssuesEvent","CreatedAt":"2019-11-26T17:02:13","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7714","RelatedDescription":"Opened issue \"Gallery should reject packages with duplicate dependencies\" (#7714) at NuGet/NuGetGallery","RelatedBody":"These packages can't be opened by some tools (NuGet Package Explorer) and the semantics of a duplicate dependency are undefined.\r\n\r\nFor example:\r\nhttps://www.nuget.org/packages/Paket.Core/5.237.1\r\n\r\n![image](https://user-images.githubusercontent.com/94054/69655106-bf289480-102a-11ea-9368-ee717e540b9b.png)\r\n\r\nThese duplicate dependencies became an array with two items for the dependency range, which is invalid and caused Catalog2Lucene to get blocked.\r\n\r\n/cc @zhhyu "}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"10964230009","Type":"IssuesEvent","CreatedAt":"2019-11-27T21:55:20","Actor":"joelverhagen","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8863","RelatedDescription":"Opened issue \"No way to determine if a vs/nuget/searchselection event is emitted from auto-selection\" (#8863) at NuGet/Home","RelatedBody":"## Details about Problem\r\n\r\n**NuGet product used:** VS UI\r\n**NuGet version:** 5.5.06319\r\n**VS version:** 16.5.0 Preview 2\r\n**OS version:** Windows 10, 1909\r\n**Worked before?** Don't think so :(\r\n\r\n## Detailed repro steps so we can see the same problem\r\n\r\n1. Open VS Telemetry Monitor\r\n1. Filter to events starting with \"vs/nuget/search\"\r\n1. Open PM UI\r\n1. Go to Browse tab\r\n1. Select any item, e.g. the second item Microsoft.Extensions.Logging\r\n1. Search for anything specific, e.g. nuget\r\n1. Notice that there is already a \"vs/nuget/searchselection\" event for the second search even though you didn't click anything\r\n\r\n## Other suggested things\r\n\r\nI think the event is going out any time the right-pane of the PM UI (the package details area) is populated _not_ when someone clicks a search result.\r\n\r\nThis essentially means that a search selection event will automatically get emitted from every subsequent search after a single selection has been made. Most of the time this latter selection event is for the first item in the list.\r\n\r\nIt would be nice to have a bool to distinguish between a search selection from a click and one from an auto-displayed package details pane.\r\n\r\nOr don't auto-load the package details page on a subsequent search.\r\n\r\nOr don't emit an event in this auto-load case.\r\n\r\n"},{"Id":"10964156085","Type":"IssuesEvent","CreatedAt":"2019-11-27T21:41:36","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8853","RelatedDescription":"Closed issue \"DownloadTimeoutStream should not block by calling .Result\" (#8853) at NuGet/Home","RelatedBody":"Discovered while working on https://github.com/NuGet/Home/issues/8528. \r\n```\r\nName\r\nEvent Microsoft-DotNETCore-SampleProfiler/Thread/Sample\r\n+ Type: External\r\n|+ System.Private.CoreLib!ManualResetEventSlim.Wait\r\n||+ System.Private.CoreLib!Task.SpinThenBlockingWait\r\n|| + System.Private.CoreLib!Task.InternalWaitCore\r\n||  + System.Private.CoreLib!System.Threading.Tasks.Task`1[System.Int32].GetResultCore(bool)\r\n||   + System.Private.CoreLib!System.Threading.Tasks.Task`1[System.Int32].get_Result()\r\n||    + nuget.protocol!DownloadTimeoutStream.Read\r\n||     + nuget.protocol!ProtocolDiagnosticsStream.Read\r\n||      + System.Private.CoreLib!System.IO.Stream+<>c.<BeginReadInternal>b__43_0(class System.Object)\r\n||       + System.Private.CoreLib!System.Threading.Tasks.Task`1[System.Int32].InnerInvoke()\r\n||        + System.Private.CoreLib!System.Threading.Tasks.Task+<>c.<.cctor>b__274_0(class System.Object)\r\n||         + System.Private.CoreLib!ExecutionContext.RunFromThreadPoolDispatchLoop\r\n||          + System.Private.CoreLib!Task.ExecuteWithThreadLocal\r\n||           + System.Private.CoreLib!Task.ExecuteEntryUnsafe\r\n||            + System.Private.CoreLib!Task.ExecuteFromThreadPool\r\n||             + System.Private.CoreLib!ThreadPoolWorkQueue.Dispatch\r\n||              + System.Private.CoreLib!_ThreadPoolWaitCallback.PerformWaitCallback\r\n||               + Thread (592) (.NET ThreadPool)\r\n```\r\n\r\n```\r\nName\r\nEvent Microsoft-DotNETCore-SampleProfiler/Thread/Sample\r\n+ Type: External\r\n|+ ?!0x7f4fe536bbfa\r\n||+ System.Private.CoreLib!FileStream.ReadNative\r\n|| + System.Private.CoreLib!FileStream.ReadSpan\r\n||  + System.Private.CoreLib!FileStream.Read\r\n||   + System.Private.CoreLib!System.IO.Stream+<>c.<BeginReadInternal>b__43_0(class System.Object)\r\n||    + System.Private.CoreLib!System.Threading.Tasks.Task`1[System.Int32].InnerInvoke()\r\n||     + System.Private.CoreLib!System.Threading.Tasks.Task+<>c.<.cctor>b__274_0(class System.Object)\r\n||      + System.Private.CoreLib!ExecutionContext.RunFromThreadPoolDispatchLoop\r\n||       + System.Private.CoreLib!Task.ExecuteWithThreadLocal\r\n||        + System.Private.CoreLib!Task.ExecuteEntryUnsafe\r\n||         + System.Private.CoreLib!Task.ExecuteFromThreadPool\r\n||          + System.Private.CoreLib!ThreadPoolWorkQueue.Dispatch\r\n||           + System.Private.CoreLib!_ThreadPoolWaitCallback.PerformWaitCallback\r\n||            + Thread (603) (.NET IO ThreadPool Worker)\r\n```\r\n\r\nDownloadTimeoutStream is a custom implementation for a stream timeout. The reasoning behind that is that the timeout property is not observed for asynchronous operations. \r\n\r\nhttps://docs.microsoft.com/en-us/dotnet/api/system.net.sockets.networkstream.readtimeout?view=netframework-4.8#remarks\r\n\r\nThis class is only used in one place in the HttpRetry handler. \r\nhttps://github.com/NuGet/NuGet.Client/blob/1ce56a3cd779ec4ebae39a1b0ce3f7ccc3310584/src/NuGet.Core/NuGet.Protocol/HttpSource/HttpRetryHandler.cs#L141\r\n\r\nWe only really call the async APIs. \r\n\r\nThe sync api is implemented by calling .Result on the async call. This blocks the current thread. \r\nhttps://github.com/NuGet/NuGet.Client/blob/1ce56a3cd779ec4ebae39a1b0ce3f7ccc3310584/src/NuGet.Core/NuGet.Protocol/Utility/DownloadTimeoutStream.cs#L43\r\nOriginally the intention was that this would never be called.\r\nAnd it's not, not explicitly in the NuGet code at least. \r\n\r\nIt is however called indirectly by the framework implementation. \r\n\r\n.NET Core: \r\nSpecifically: https://github.com/NuGet/NuGet.Client/blob/1ce56a3cd779ec4ebae39a1b0ce3f7ccc3310584/src/NuGet.Core/NuGet.Protocol/HttpSource/HttpCacheUtility.cs#L78\r\n\r\nCopyToAsync  [=>](https://github.com/dotnet/corefx/blob/e99ec129cfd594d53f4390bf97d1d736cff6f860/src/Common/src/CoreLib/System/IO/Stream.cs#L112) CopyToAsyncInternal [=>](https://github.com/dotnet/corefx/blob/e99ec129cfd594d53f4390bf97d1d736cff6f860/src/Common/src/CoreLib/System/IO/Stream.cs#L122)\r\nReadAsync [=>](https://github.com/dotnet/corefx/blob/e99ec129cfd594d53f4390bf97d1d736cff6f860/src/Common/src/CoreLib/System/IO/Stream.cs#L356-L358)\r\nBeginEndReadAsync [=>](https://github.com/dotnet/corefx/blob/e99ec129cfd594d53f4390bf97d1d736cff6f860/src/Common/src/CoreLib/System/IO/Stream.cs#L390) \r\nStream.BeginReadInternal [=>](https://github.com/dotnet/corefx/blob/e99ec129cfd594d53f4390bf97d1d736cff6f860/src/Common/src/CoreLib/System/IO/Stream.cs#L291) synchronous read https://github.com/NuGet/NuGet.Client/blob/1ce56a3cd779ec4ebae39a1b0ce3f7ccc3310584/src/NuGet.Core/NuGet.Protocol/Utility/DownloadTimeoutStream.cs#L43\r\n\r\nNote that this codepath is only taken because we do not override [BeginRead](https://github.com/NuGet/NuGet.Client/blob/1ce56a3cd779ec4ebae39a1b0ce3f7ccc3310584/src/NuGet.Core/NuGet.Protocol/Utility/DownloadTimeoutStream.cs#L52) on .NET Core. \r\n\r\nIn .NET Framework\r\n\r\nCopyToAsync => CopyToAsyncInternal => ReadAsync => BeginEndReadAsync => BeginRead => BeginReadInternal => Stream.Read. \r\n\r\nfyi @joelverhagen Thanks for providing context on the original change :) "},{"Id":"10963309682","Type":"IssuesEvent","CreatedAt":"2019-11-27T19:21:43","Actor":"donnie-msft","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8862","RelatedDescription":"Opened issue \"Sanity-Check Push CLI Arguments and error-out earlier\" (#8862) at NuGet/Home","RelatedBody":"## Details about Problem\r\n\r\nMy recent Push Command work in https://github.com/NuGet/Home/issues/8148 revealed that we don't perform some validation on CLI arguments until deep within the logic. If the file being pushed doesn't exist, there's no purpose in analyzing config, sources, credentials, etc, just to error-out with a File Not Found error. \r\n\r\nI'd like a discussion about this as a philosophy that we may want to apply to other Commands. The pattern would be relevant in many places.\r\n\r\n### Why didn't I fix this already? \r\nIf Dotnet.exe and NuGet.exe CLI's are responsible for validating a File exists (especially a Wildcard), then one of these happen:\r\n\r\n1. Change the public [PushRunner.Run](https://github.com/NuGet/NuGet.Client/blob/dev/src/NuGet.Core/NuGet.Commands/CommandRunners/PushRunner.cs#L20) and [PackageUpdateResource.Push](https://github.com/NuGet/NuGet.Client/blob/dev/src/NuGet.Core/NuGet.Protocol/Resources/PackageUpdateResource.cs#L57) methods to accept a collection of resolved package paths rather than a single PackagePath.\r\n\r\n - The benefit is we did this early, and can error before diving into logic that loads and validates\r\n\r\n- This **changes our API** such that we are giving a user control over passing a large set of directory paths, not necessarily in the same root folder. I don't know if there are any problems around this. \r\n\r\n- We could avoid breaking users by having a wrapper API that still resolves a single PackagePath.\r\n\r\n2. Read directories twice. Once, preemptively in the CLIs. This could be more of a \"abort as soon as I find 1 matching file\" approach. Then once again as it currently does, within the inner plumbing of PackageUpdateResource. This is redundant but avoids API changes and wrappers which may be overkill? \r\n\r\n- What's the cost here? Expect it would be low-cost for a filename or for a small directory of nupkgs. Do users push *.nupkg in a directory with hundreds (or more) nupkgs? The resolving of wildcards occurs in [ResolvePackageFromPath](https://github.com/NuGet/NuGet.Client/blob/dev/src/NuGet.Core/NuGet.Protocol/Utility/LocalFolderUtility.cs#L958)."},{"Id":"10959427178","Type":"IssuesEvent","CreatedAt":"2019-11-27T11:22:49","Actor":"v-luzh","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8861","RelatedDescription":"Opened issue \"[Bug Bash][Test Failure][Suggestion] Properties info of the installed PackageReference package should not be empty\" (#8861) at NuGet/Home","RelatedBody":"## Details about Problem\r\nNuGet version: NuGet Client Dev\\5.5.0.6326\r\nVS Version: D16.4\\29526.122\r\nOS: Windows-10-Enterprise-RS5\r\n## Detailed repro steps \r\n1. Create a project [e.g. C# Console App (.NET Framework 4.8) template] via VS.\r\n2. Open PM UI of the project by right-clicking the project->Manage NuGet Packages… in Solution Explorer.\r\n3. Install several packages with PacakgeReference format.\r\n4. Open Solution Explorer window and go to “References” node.\r\n5. Right-click an installed package and press the cotext menu: “Properties” (or hit the hotkey “Alt+Enter”). \r\n## Expected\r\nProperties info of the installed PackageReference package should not be empty. (Not repro on .NET Core project as below screenshot.)\r\n![CorrectProperties](https://user-images.githubusercontent.com/20632625/69719268-17ef4e80-114b-11ea-8af9-e0d43961e668.png)\r\n## Actual\r\nProperties info of the installed PackageReference package is empty as below screenshot.\r\n![EmptyProperties](https://user-images.githubusercontent.com/20632625/69719279-1de52f80-114b-11ea-9f70-ba3fe96951ca.png)\r\n## Note\r\n1. Another resolution option (maybe): Don’t show the cotext menu: “Properties” for this package type.\r\n2. It repro on 16.1 GA (D16.1\\28916.193) with implicit NuGet 5.1.0.6013.\r\n\r\n"},{"Id":"10959396240","Type":"IssuesEvent","CreatedAt":"2019-11-27T11:18:49","Actor":"v-luzh","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8860","RelatedDescription":"Opened issue \"[Bug Bash][Test Failure][Accessibility]Hotkey “Del” for package context menu “Remove” in Solution Expolorer doesn’t work \" (#8860) at NuGet/Home","RelatedBody":"## Details about Problem\r\nNuGet version: NuGet Client Dev\\5.5.0.6326\r\nVS Version: D16.4\\29526.122\r\nOS: Windows-10-Enterprise-RS5\r\n## Detailed repro steps \r\n1. Create a project [e.g. C# Console App (.NET Core 3.1) template] via VS.\r\n2. Open PM UI of the project by right-clicking the project->Manage NuGet Packages… in Solution Explorer.\r\n3. Install several packages.\r\n4. Open Solution Explorer window and go to Dependencies->Packages node.\r\n5. Click an installed package and press the hotkey “Del” on keyboard. (The hotkey is described on the context menu of the installed package.)\r\n## Expected\r\nThe package should be deleted successfully. (Same with clicking the context menu: “X Remove”)\r\n## Actual\r\nHotkey “Del” for package context menu “Remove” in Solution Expolorer doesn’t work as below screenshot.\r\n![HotkeyDelDoesn'tWork](https://user-images.githubusercontent.com/20632625/69719018-9697bc00-114a-11ea-82fb-3398aacebaa3.png)\r\n## Note\r\n1. The package can be deleted successfully after pressing the context menu: “X Remove”.\r\n2. The hotkey “Alt+Enter” for package context menu “Properties” works well.\r\n3. It repro on 16.1 GA (D16.1\\28916.193) with implicit NuGet 5.1.0.6013."},{"Id":"10957640009","Type":"IssuesEvent","CreatedAt":"2019-11-27T07:29:34","Actor":"LuGuangguang","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8859","RelatedDescription":"Opened issue \"I Can't delete a new create package\" (#8859) at NuGet/Home","RelatedBody":"I learn to how to create a package.When I had public a package,I want to delete this. But I can't by the URL \"https://docs.microsoft.com/zh-cn/nuget/quickstart/create-and-publish-a-package-using-visual-studio-net-framework\".This is no the delete button.\r\n \r\nthis doc\r\n![PHZE(IIAT (%RF51${(RNDR](https://user-images.githubusercontent.com/34500722/69702479-47da2a00-112a-11ea-916c-46b7e5464878.jpg)\r\n\r\nthis my project\r\n![L9%FP{ AT56MX)A80PD@3EV](https://user-images.githubusercontent.com/34500722/69702619-98ea1e00-112a-11ea-910e-246141aae206.png)\r\n\r\n\r\n\r\n"},{"Id":"10957412535","Type":"IssuesEvent","CreatedAt":"2019-11-27T06:48:47","Actor":"HelioVaGator","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8844","RelatedDescription":"Closed issue \"nuget not resolving dependency using what specified in nuget package for Microsoft.Extensions.Logging\" (#8844) at NuGet/Home","RelatedBody":"## Background\r\nI have created a class library for .net core (targetting v`2.2`), and I have a .net core application as well (targetting v`2.2`).\r\nI am trying to export the library as nuget package and install it in my application.\r\nHere is the dependencies for my library\r\n![MyLib dependencies](https://user-images.githubusercontent.com/6700486/69222069-b7866d00-0b9e-11ea-9cad-956c8c667ea9.png)\r\nI am able to export it as nuget package and for now I am storing it in local nuget repo.\r\nBut when I try to install this library package in my application it's not getting installed due to package version conflict for `Microsoft.Extensions.Logging`. Here's package manager console output.\r\n![PackageManagerConsoleOutput](https://user-images.githubusercontent.com/6700486/69222266-2368d580-0b9f-11ea-8fc0-56348e6a2b70.png)\r\n\r\n## Issue: \r\nI have specified the exact version for  `Microsoft.Extensions.Logging` i.e. `[2.2.0]` as we could confirm that in the screenshot showing dependency for my library, then why it's getting resolved to version `3.0.0`?\r\nHow could I resolve this issue?\r\n\r\n## Details about environment\r\n\r\nNuGet product used (Package Manager Console):\r\n\r\nNuGet version: Package Manager Console Host Version 5.3.1.6268\r\n\r\nVS version (if appropriate): Microsoft Visual Studio Community 2019 Version 16.3.8\r\n\r\nOS version (i.e. win10 v1607 (14393.321)): Win 10 Ent Version: 1809\r\n"},{"Id":"10956733833","Type":"IssuesEvent","CreatedAt":"2019-11-27T04:19:47","Actor":"kartheekp-ms","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8856","RelatedDescription":"Closed issue \"Manage Package for Solutions shows error while browsing packages from an internal JFrog NuGet artifactory\" (#8856) at NuGet/Home","RelatedBody":"NuGet product used (NuGet.exe | VS UI | Package Manager Console):\r\n\r\nNuGet version (x.x.x.xxx): 5.3.1.6268\r\n\r\ndotnet.exe --version (if appropriate): 3.0.100\r\n\r\nVS version (if appropriate): 2017\r\n\r\nOS version (i.e. win10 v1607 (14393.321)): win10\r\n\r\nWorked before? If so, with which NuGet version: No\r\n\r\nPrerequisite: Downloaded latest nuget.exe \r\n\r\n1. Created and pushed a NuGet package to an internal JFrog artifactory. Everything works fine and I can view my package at the artifactory. i.e. nuget push <packageName> is successful.\r\n\r\n2. When I try to connect the artifactory from Visual studio ( Tools > NuGet Package Manager > Manage Packages for Solution), It just shows me an error message \r\n![image](https://user-images.githubusercontent.com/10449218/69584225-88527000-0f91-11ea-9024-27d6420f735b.png)\r\nI believe, if it doesnot find any apikey, then it should allow me to enter the apikey. But it does nothing.\r\n\r\n3. I set up my api key from package manager console from the Visual Studio 17, with the following command: \r\nnuget setapikey <USERNAME>:<PASSWORD> -Source Artifactory\r\n\r\n4. I try to list all the packages in my artifactory using command : nuget list \r\nBut it hangs for a while and gives me following error\r\n![image](https://user-images.githubusercontent.com/10449218/69584535-3e1dbe80-0f92-11ea-9601-4cdae1716d64.png)\r\nHere, it first says Please provide credentials for ... for there is no space to enter the username and password. It does nothing and it waits for the timeout.\r\n\r\n5. As an alternative, I perform steps 3 and 4 from cmd, it works and shows me all the packages. So, I'm assuming something is wrong while using it with Visual Studio 17. \r\n...\r\n\r\n"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"10740159942","Type":"IssuesEvent","CreatedAt":"2019-10-29T17:39:29","Actor":"anangaur","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/39","RelatedDescription":"Opened issue \"Flag vulnerable packages\" (#39) at NuGet/Announcements","RelatedBody":"The spec for 'Flagging vulnerable packages' is ready for **review**:\r\n\r\n|Spec wiki|Discussion issue|\r\n|----------|------------------|\r\n|[Flag vulnerable packages](https://github.com/NuGet/Home/wiki/Flag-vulnerable-packages) | https://github.com/nuget/home/issues/8087|"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1190360390980395008","CreatedAt":"2019-11-01T20:10:07+00:00","UserScreenname":"nuget","Text":"The issue with the publishing pipeline has been resolved and packages are now being published normally. https://t.co/NdK8mVk7UF","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":3,"FavoriteCount":0,"RawContent":null},{"Id":"1190331936293572608","CreatedAt":"2019-11-01T18:17:03+00:00","UserScreenname":"nuget","Text":"We are experiencing an issue with our publishing pipeline causing a delay in the publishing of new packages. We are… https://t.co/gM91QcE1Zc","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":5,"FavoriteCount":3,"RawContent":null}]}},"RunOn":"2019-11-28T05:30:48.0736609Z","RunDurationInMilliseconds":2043}