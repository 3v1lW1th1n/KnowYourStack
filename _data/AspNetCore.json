{"Data":{"Blog":{"FeedItems":[{"Title":"Get started building .NET web apps that run in the browser with Blazor","PublishedOn":"2018-03-22T17:00:26+00:00","CommentsCount":17,"FacebookCount":0,"Summary":"Today we released our first public preview of Blazor, a new experimental .NET web framework using C#/Razor and HTML that runs in the browser with WebAssembly. Blazor enables full stack web development...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/03/22/get-started-building-net-web-apps-in-the-browser-with-blazor/","RawContent":null},{"Title":"ASP.NET Core manageability and Application Insights improvements","PublishedOn":"2018-03-22T14:12:38+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"There are many great investments on the ASP.NET Core 2.1 roadmap. These investments make ASP.NET Core applications easier to write, host, test, and make security and standards compliant. This blog...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/03/22/asp-net-core-manageability-and-application-insights-improvements/","RawContent":null},{"Title":"Announcing Preview 1 of ASP.NET MVC 5.2.5, Web API 5.2.5, and Web Pages 3.2.5","PublishedOn":"2018-03-19T22:00:27+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today we released Preview 1 of ASP.NET MVC 5.2.5, Web API 5.2.5, and Web Pages 3.2.5 on NuGet. This is a patch release that contains only bug fixes. You can find the full list of bug fixes for this...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/03/19/announcing-preview-1-of-asp-net-mvc-5-2-5-web-api-5-2-5-and-web-pages-3-2-5/","RawContent":null},{"Title":"ASP.NET Core 2.1.0-preview1: Functional testing of MVC applications","PublishedOn":"2018-03-05T18:30:28+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"For ASP.NET Core 2.1 we have created a new package, Microsoft.AspNetCore.Mvc.Testing, to help streamline in-memory end-to-end testing of MVC applications using TestServer. This package takes care of...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/03/05/asp-net-core-2-1-0-preview1-functional-testing-of-mvc-applications/","RawContent":null},{"Title":"ASP.NET Core 2.1.0-preview1: GDPR enhancements","PublishedOn":"2018-03-04T19:21:40+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"2018 sees the introduction of the General Data Protection Regulation, an EU framework to allow EU citizens to control, correct and delete their data, no matter where in the word it is held. In ASP.NET...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/03/04/asp-net-core-2-1-0-preview1-gdpr-enhancements/","RawContent":null},{"Title":"ASP.NET Core 2.1.0-preview1: Introducing Identity UI as a library","PublishedOn":"2018-03-02T19:00:19+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"ASP.NET Core has historically provided project templates with code for setting up ASP.NET Core Identity, which enables support for identity related features like user registration, login, account...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/03/02/aspnetcore-2-1-identity-ui/","RawContent":null},{"Title":"ASP.NET Core 2.1.0-preview1: Razor UI in class libraries","PublishedOn":"2018-03-01T18:00:26+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"One frequently requested scenario that ASP.NET Core 2.1 improves is building UI in reusable class libraries. With ASP.NET Core 2.1 you can package your Razor views and pages (.cshtml files) along with...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/03/01/asp-net-core-2-1-razor-ui-in-class-libraries/","RawContent":null},{"Title":"ASP.NET Core 2.1.0-preview1: Improvements to IIS hosting","PublishedOn":"2018-03-01T01:56:02+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"The ASP.NET Core Module (ANCM) is a global IIS module that has been responsible for proxying requests over from IIS to your backend ASP.NET Core application running Kestrel. Since 2.0 we have been...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/02/28/asp-net-core-2-1-0-preview1-improvements-to-iis-hosting/","RawContent":null},{"Title":"ASP.NET Core 2.1-preview1: Introducing HTTPClient factory","PublishedOn":"2018-03-01T01:47:41+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"HttpClient factory is an opinionated factory for creating HttpClient instances to be used in your applications. It is designed to: Provide a central location for naming and configuring logical...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/02/28/asp-net-core-2-1-preview1-introducing-httpclient-factory/","RawContent":null},{"Title":"ASP.NET Core 2.1.0-preview1: Improvements for building Web APIs","PublishedOn":"2018-02-27T23:30:07+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"ASP.NET Core 2.1 adds a number of features that make it easier and more convenient to build Web APIs. These features include Web API controller specific conventions, more robust input processing and...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/02/27/asp-net-core-2-1-web-apis/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"7464696166","Type":"IssuesEvent","CreatedAt":"2018-04-01T20:58:23","Actor":"dennisaubrey","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Home/issues/3015","RelatedDescription":"Opened issue \"Error! After Installation of AspNetCore and dotnet core the IIS Handle Mappings - aspNetCore is not installed \" (#3015) at aspnet/Home","RelatedBody":"Error! After Installation of AspNetCore and dotnet core the IIS Handle Mappings - aspNetCore is not installed \r\n\r\nWindows 10 Pro \r\nAspNetCore.2.0.5.RuntimePackageStore_x64 \r\ndotnet-runtime-2.0.5-win-x64\r\nI also tried AspNetCore.2.0.6.RuntimePackageStore_x64\r\ndotnet-runtime-2.0.6-win-x64 \r\n![image](https://user-images.githubusercontent.com/36566794/38177309-4543984c-35cd-11e8-99d6-5df0a460196b.png)\r\n\r\nWorked on another Windows 10 computer, but had the same issue. I installed, repaired, uninstalled. \r\n\r\nThere were other similar posts on this Back in December 2017. The issue was the installer did not correctly register the aspNetCore dll. \r\n\r\nThank you\r\n\r\n  \r\n"},{"Id":"7464341647","Type":"IssuesEvent","CreatedAt":"2018-04-01T17:00:25","Actor":"sepehr1014","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Home/issues/3014","RelatedDescription":"Opened issue \"WebSocketException (0x80004005): The WebSocket is in an invalid state ('Closed') for this operation. Valid states are: 'Open, CloseSent'\" (#3014) at aspnet/Home","RelatedBody":"Using Microsoft.AspNetCore 2.1.0-preview1-final we get this exception on ReceiveAsync. The usage is quite ordinary and we didn't get any errors on the earlier builds. The first thing we do after we accept the socket is:\r\n\r\n`result = await currentSocket.ReceiveAsync(new ArraySegment<byte>(buffer), CancellationToken.None)`\r\n\r\nAnd here's the exception:\r\n\r\n```\r\nSystem.Net.WebSockets.WebSocketException (0x80004005): The WebSocket is in an invalid state ('Closed') for this operation. Valid states are: 'Open, CloseSent'\r\n   at System.Net.WebSockets.WebSocketValidate.ThrowIfInvalidState(WebSocketState currentState, Boolean isDisposed, WebSocketState[] validStates)\r\n   at System.Net.WebSockets.ManagedWebSocket.ReceiveAsync(ArraySegment`1 buffer, CancellationToken cancellationToken)\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n```"}],"ResultType":"GitHubEvent"},"SignalR":{"Events":[{"Id":"7465389544","Type":"PullRequestEvent","CreatedAt":"2018-04-02T04:12:00","Actor":"davidfowl","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/SignalR/pull/1816","RelatedDescription":"Merged pull request \"Clean up the SSE client side transport\" (#1816) at aspnet/SignalR","RelatedBody":"- Renamed StreamPipeConnection to PipeReaderFactory\r\n- Flow the transport cancellation token to the CopyToAsync routine ~and use it in ReadAsync (as much as it pains me)~\r\n- Use the PipeWriterStream from src/Common\r\n- Other small cleanup and nits to make the style consistent with the other pipe reader loops"},{"Id":"7465189888","Type":"PullRequestEvent","CreatedAt":"2018-04-02T02:34:12","Actor":"davidfowl","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/SignalR/pull/1819","RelatedDescription":"Merged pull request \"Clean up the logging style for HttpConnectionManager\" (#1819) at aspnet/SignalR","RelatedBody":""}],"ResultType":"GitHubEvent"},"Mvc":{"Events":[{"Id":"7465457426","Type":"IssuesEvent","CreatedAt":"2018-04-02T04:48:51","Actor":"Eilon","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Mvc/issues/7585","RelatedDescription":"Closed issue \"Any plan to include a cscss file type?\" (#7585) at aspnet/Mvc","RelatedBody":"Is there any plan to include a dynamically-generated css file type at some point?\r\n\r\nI would appreciate to be able to generate dynamically some parts of the css, including some localization rules issues, calculations or whatever other things that require a smarter comutation."},{"Id":"7465452708","Type":"IssuesEvent","CreatedAt":"2018-04-02T04:46:11","Actor":"Eilon","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Mvc/issues/7588","RelatedDescription":"Closed issue \"Login by email, not by username\" (#7588) at aspnet/Mvc","RelatedBody":"Asp.Net MVC wants to log in by username, not by email. I think mostly web apps log in by emails, not by username. And, Let's think that user changed his username, and he forgot it?!  But, he surely knows his email, so he should be logged in by email, not by username!\r\n\r\n`PasswordSignInAsync(string UserName, string Password, bool RememberMe, bool shouldLockout)`\r\n\r\nshould be replaced by\r\n\r\n`PasswordSignInAsync(string Email, string Password, bool RememberMe, bool shouldLockout)`\r\n\r\n\r\nCurrently I use (Account, Login) which was\r\n```\r\nvar result = await SignInManager.PasswordSignInAsync(model.Email, model.Password, model.RememberMe, shouldLockout: false);\r\n\r\nvar userid = UserManager.FindByEmail(model.Email)?.Id;\r\n```\r\n\r\nlike this\r\n\r\n```\r\nvar user = UserManager.FindByEmail(model.Email);\r\n\r\nvar result = await SignInManager.PasswordSignInAsync(user.UserName, model.Password, model.RememberMe, shouldLockout: false);\r\n\r\nvar userid = user?.Id;\r\n```\r\nSorry for perfect English\r\n"},{"Id":"7464856087","Type":"IssuesEvent","CreatedAt":"2018-04-01T22:59:10","Actor":"BolatovAlau","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Mvc/issues/7588","RelatedDescription":"Opened issue \"Login Error\" (#7588) at aspnet/Mvc","RelatedBody":"Asp.Net MVC wants to log in by username, not by email. Let's think that user changed his username, and he forgot it?! But, he surely knows his email, so he should be logged in by email not by username!\r\n\r\nI think this (Account->login)\r\n\r\n```\r\nvar result = await SignInManager.PasswordSignInAsync(model.Email, model.Password, model.RememberMe, shouldLockout: false);\r\n\r\nvar userid = UserManager.FindByEmail(model.Email)?.Id;\r\n```\r\n\r\nshould be replaced by this\r\n\r\n```\r\nvar user = UserManager.FindByEmail(model.Email);\r\n\r\nvar result = await SignInManager.PasswordSignInAsync(user.UserName, model.Password, model.RememberMe, shouldLockout: false);\r\n\r\nvar userid = user?.Id;\r\n```\r\nSorry for perfect English\r\n"},{"Id":"7463240761","Type":"IssuesEvent","CreatedAt":"2018-04-01T02:04:43","Actor":"shanselman","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Mvc/issues/7587","RelatedDescription":"Opened issue \"No easy way to change ASPNETCORE_ENVIRONMENT or get User Secrets with WebApplicationTextFixture\" (#7587) at aspnet/Mvc","RelatedBody":"Trying to follow https://blogs.msdn.microsoft.com/webdev/2018/03/05/asp-net-core-2-1-0-preview1-functional-testing-of-mvc-applications/\r\n\r\nThe defaults are not sensible. I should not have to do this, to just use Development, or use User Secrets:\r\n\r\n  ```\r\n  public class MyOwnTextFixture<TStartup> : WebApplicationTestFixture<Startup> where TStartup : class\r\n    {\r\n            public MyOwnTextFixture() { }\r\n\r\n            protected override void ConfigureWebHost(IWebHostBuilder builder)\r\n            {\r\n                builder.UseEnvironment(\"Development\");\r\n            }\r\n    }\r\n```\r\n\r\n@davidfowl "},{"Id":"7462858973","Type":"IssuesEvent","CreatedAt":"2018-03-31T20:43:07","Actor":"mnmr","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Mvc/issues/7586","RelatedDescription":"Opened issue \"View precompilation during publish in 2.1-latest only works if using 2.0.0 reference\" (#7586) at aspnet/Mvc","RelatedBody":"As I understand it, if you reference the Microsoft.AspNetCore.Mvc.Razor.ViewCompilation package, then views are supposed to be pre-compiled during publish.\r\n\r\nThis only works for us if we reference version 2.0.0 of the package, as opposed to the 2.1 version matching the other packages (we're using \"2.1.0-*\" to reference the latest stable CI build)."},{"Id":"7462010671","Type":"IssuesEvent","CreatedAt":"2018-03-31T11:03:03","Actor":"JeanCollas","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Mvc/issues/7585","RelatedDescription":"Opened issue \"Any plan to include a cscss file type?\" (#7585) at aspnet/Mvc","RelatedBody":"Is there any plan to include a dynamically-generated css file type at some point?\r\n\r\nI would appreciate to be able to generate dynamically some parts of the css, including some localization rules issues."}],"ResultType":"GitHubEvent"},"Identity":{"Events":[{"Id":"7464604365","Type":"IssuesEvent","CreatedAt":"2018-04-01T19:57:32","Actor":"aneequrrehman","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Identity/issues/1729","RelatedDescription":"Closed issue \"Expose some internal helpers on UserManager\" (#1729) at aspnet/Identity","RelatedBody":"Referring to #1348 by @HaoK \r\n\r\nShouldn't `ValidateUserAsync` and `ValidatePasswordAsync` be virtual as well?"},{"Id":"7464596980","Type":"IssuesEvent","CreatedAt":"2018-04-01T19:52:41","Actor":"aneequrrehman","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Identity/issues/1729","RelatedDescription":"Opened issue \"Expose some internal helpers on UserManager\" (#1729) at aspnet/Identity","RelatedBody":"Referring to #1348 by @HaoK \r\n\r\nShouldn't `ValidateUserAsync` and `ValidatePasswordAsync` by virtual as well?"},{"Id":"7461135015","Type":"IssuesEvent","CreatedAt":"2018-03-30T23:32:50","Actor":"kichalla","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Identity/issues/1643","RelatedDescription":"Closed issue \"Add third party notice to identity UI package\" (#1643) at aspnet/Identity","RelatedBody":""},{"Id":"7461058708","Type":"PullRequestEvent","CreatedAt":"2018-03-30T22:59:12","Actor":"kichalla","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/Identity/pull/1728","RelatedDescription":"Merged pull request \"Reacting to templating repo's script changes\" (#1728) at aspnet/Identity","RelatedBody":""},{"Id":"7461042048","Type":"PullRequestEvent","CreatedAt":"2018-03-30T22:52:27","Actor":"kichalla","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Identity/pull/1728","RelatedDescription":"Opened pull request \"Reacting to templating repo's script changes\" (#1728) at aspnet/Identity","RelatedBody":""},{"Id":"7461013313","Type":"PullRequestEvent","CreatedAt":"2018-03-30T22:40:40","Actor":"kichalla","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Identity/pull/1727","RelatedDescription":"Opened pull request \"[Fixes #1643] Add third party notice to identity UI package\" (#1727) at aspnet/Identity","RelatedBody":""},{"Id":"7459413828","Type":"IssuesEvent","CreatedAt":"2018-03-30T15:13:03","Actor":"weedkiller","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Identity/issues/1726","RelatedDescription":"Opened issue \"Add sample views for Managing Roles, Users in Roles etc.\" (#1726) at aspnet/Identity","RelatedBody":"Please add some additional sample views for roles, users in roles, roles containing user.\r\nNumber of failed login attempts in one hour. with lock out option.\r\n\r\nhttps://github.com/aspnet/Identity/tree/dev/samples/IdentitySample.Mvc/Views/Account"},{"Id":"7459280221","Type":"IssuesEvent","CreatedAt":"2018-03-30T14:40:11","Actor":"kichalla","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Identity/issues/1618","RelatedDescription":"Closed issue \"[IdentityUI] Consider returning a 404 in the DownloadPersonalData.OnGet\" (#1618) at aspnet/Identity","RelatedBody":"We render the DownloadPersonalData page, but it has no content. The page is meant to only have an OnPost handler which is reached via the Personal Data page. Here's what you see if you visit /Identity/Account/Manage/DownloadPersonalData from the browser:\r\n\r\n![image](https://user-images.githubusercontent.com/174281/35944193-70e478a4-0c10-11e8-9d1d-c3dc39642f6a.png)\r\n"},{"Id":"7459280205","Type":"PullRequestEvent","CreatedAt":"2018-03-30T14:40:11","Actor":"kichalla","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/Identity/pull/1720","RelatedDescription":"Merged pull request \"[Fixes #1618] Consider returning a 404 in the DownloadPersonalData.OnGet\" (#1720) at aspnet/Identity","RelatedBody":""}],"ResultType":"GitHubEvent"},"Kestrel":{"Events":[{"Id":"7463576697","Type":"IssuesEvent","CreatedAt":"2018-04-01T07:34:37","Actor":"davidfowl","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/issues/2454","RelatedDescription":"Opened issue \"Aborted tests happening more often\" (#2454) at aspnet/KestrelHttpServer","RelatedBody":"https://ci3.dot.net/job/aspnet_KestrelHttpServer/job/dev/job/linux-Configuration_Release_prtest/22/console\r\n\r\nSomething is causing the test process to crash hard."},{"Id":"7463557958","Type":"PullRequestEvent","CreatedAt":"2018-04-01T07:18:01","Actor":"davidfowl","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/pull/2453","RelatedDescription":"Opened pull request \"Remove bogus test\" (#2453) at aspnet/KestrelHttpServer","RelatedBody":"- We do copy bytes from the transport pipe to the body pipe, I think we're just getting lucky here.\r\n\r\nThe reason this works with the current pool is because the array is actually a giant slab and blocks are all backed by the same array. We're not really verifying anything other than the fact that they came from the same slab. In fact, we're still incurring a copy from transport pipe into the request body pipe so if a pool implementation wasn't slab based, this test could never pass. I'm not sure if we want to preserve anything from this test, but let me know.\r\n\r\nContributes to #2449"},{"Id":"7463549748","Type":"PullRequestEvent","CreatedAt":"2018-04-01T07:10:44","Actor":"davidfowl","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/pull/2452","RelatedDescription":"Opened pull request \"Use 4K as the minimum segment size\" (#2452) at aspnet/KestrelHttpServer","RelatedBody":"- This normalizes the behavior for kestrel no matter what memory pool implementation is used. The transports should behave the same (ask for 1/2 full blocks) across pool implementations.\r\n\r\nContributes to #2449"},{"Id":"7463542917","Type":"PullRequestEvent","CreatedAt":"2018-04-01T07:04:03","Actor":"davidfowl","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/pull/2450","RelatedDescription":"Merged pull request \" Fixed a parser bug found when trying out the array pool\" (#2450) at aspnet/KestrelHttpServer","RelatedBody":"- When using the array pool (https://github.com/aspnet/KestrelHttpServer/issues/2449), we get terrible block density (@pakrym we need to look into this as SignalR is using this pool currently with pipelines) and as a result\r\nthe header parser was failing.\r\n- This fixes the case where the parser needed to read ahead 2 bytes at the end\r\n(which is unrealistic) at the beginning of every header parse to determine if it's at the end. Previously we were comparing the current index to the reader index is incorrect\r\nsince we may end up at the same index in another segment. Now we just check a boolean to determine if we did read ahead or not.\r\n\r\nHere's what debugging revealed:\r\n\r\n![image](https://user-images.githubusercontent.com/95136/38170282-2c059a2a-3536-11e8-916c-92678917d7b4.png)\r\n\r\n\r\n/cc @jkotas"}],"ResultType":"GitHubEvent"},"Razor":{"Events":[{"Id":"7456810989","Type":"IssuesEvent","CreatedAt":"2018-03-29T23:45:26","Actor":"ajaybhargavb","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Razor/issues/2230","RelatedDescription":"Closed issue \"Shutdown command needs to compute the correct default pipe name\" (#2230) at aspnet/Razor","RelatedBody":"We recently changed the server to be created using the pipe name computed from the path to `rzc.dll` https://github.com/aspnet/Razor/issues/2216. But when the shutdown command is directly invoked, we don't pass in the tool assembly path [here](https://github.com/aspnet/Razor/blob/dev/src/Microsoft.AspNetCore.Razor.Tools/ShutdownCommand.cs#L30). It should instead pass in the tool assembly path to `ComputeDefault()`.\r\n\r\ncc @rynowak "},{"Id":"7456398269","Type":"PullRequestEvent","CreatedAt":"2018-03-29T21:44:52","Actor":"ajaybhargavb","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/Razor/pull/2232","RelatedDescription":"Merged pull request \"Normalize the tool assembly path before using it as the base for pipe…\" (#2232) at aspnet/Razor","RelatedBody":"… name\r\n\r\n#2230 \r\n\r\nThe actual reason for this bug was the tool assembly path that MsBuild passes in looks like\r\n`C:\\Users\\ajbaaska\\.nuget\\packages\\microsoft.aspnetcore.razor.design\\2.1.0-preview2-t000\\build\\netstandard2.0\\..\\..\\tools\\rzc.dll`\r\n\r\nbut the shutdown command uses the path\r\n`C:\\Users\\ajbaaska\\.nuget\\packages\\microsoft.aspnetcore.razor.design\\2.1.0-preview2-t000\\build\\netstandard2.0\\tools\\rzc.dll`\r\n\r\nNotice the lack of `\\build\\netstandard2.0\\..\\..\\`\r\n\r\nSo calling `Path.GetFullPath` before using this to compute pipe name fixes the problem.\r\n\r\nAdded a test"},{"Id":"7455835879","Type":"PullRequestEvent","CreatedAt":"2018-03-29T19:44:58","Actor":"ajaybhargavb","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Razor/pull/2232","RelatedDescription":"Opened pull request \"Normalize the tool assembly path before using it as the base for pipe…\" (#2232) at aspnet/Razor","RelatedBody":"… name\r\n\r\n#2230 \r\n\r\nThe actual reason for this bug was the tool assembly path that MsBuild passes in looks like\r\n`C:\\Users\\ajbaaska\\.nuget\\packages\\microsoft.aspnetcore.razor.design\\2.1.0-preview2-t000\\build\\netstandard2.0\\..\\..\\tools\\rzc.dll`\r\n\r\nbut the shutdown command uses the path\r\n`C:\\Users\\ajbaaska\\.nuget\\packages\\microsoft.aspnetcore.razor.design\\2.1.0-preview2-t000\\build\\netstandard2.0\\tools\\rzc.dll`\r\n\r\nNotice the lack of `\\build\\netstandard2.0\\..\\..\\`\r\n\r\nSo calling `Path.GetFullPath` before using this to compute pipe name fixes the problem.\r\n\r\nAdded a test"},{"Id":"7455342054","Type":"IssuesEvent","CreatedAt":"2018-03-29T17:49:46","Actor":"NTaylorMullen","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Razor/issues/2231","RelatedDescription":"Closed issue \"Abstract DocumentTracker lifecycle from directly depending on ITextViews\" (#2231) at aspnet/Razor","RelatedBody":"Today our document trackers live and die based off of having an ITextView associated with them.  We need to be able to work in an invisible editor world (live share) which does not have any associated text views."}],"ResultType":"GitHubEvent"},"Templates":{"Events":[],"ResultType":"GitHubEvent"},"Tooling":{"Events":[{"Id":"7439234583","Type":"IssuesEvent","CreatedAt":"2018-03-27T05:23:09","Actor":"barrytang","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Tooling/issues/1069","RelatedDescription":"Closed issue \"EntityFramework migrations not available to be applied during publish\" (#1069) at aspnet/Tooling","RelatedBody":"Workaround does not work for me. Apply migration missing in any case. after rebuilt, reload, restart etc"},{"Id":"7438189808","Type":"IssuesEvent","CreatedAt":"2018-03-26T23:00:08","Actor":"dvdobrovolskiy","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Tooling/issues/1069","RelatedDescription":"Opened issue \"EntityFramework migrations not available to be applied during publish\" (#1069) at aspnet/Tooling","RelatedBody":"Workaround does not work for me. Apply migration missing in any case. after rebuilt, reload, restart etc"},{"Id":"7416019717","Type":"IssuesEvent","CreatedAt":"2018-03-21T22:57:29","Actor":"snebjorn","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Tooling/issues/823","RelatedDescription":"Closed issue \"Make tooling support splitting asp.net and bootstrapping in different projects (onion architecture)\" (#823) at aspnet/Tooling","RelatedBody":"I'd like to see better tooling support for a more onion architecture like solution structure.\n\nFor instance\n- Solution\n  - Core (business logic, domain model, etc)\n  - Infrastructure.EntityFramework (DAL)\n  - Presentation.ASPNET (MVC or WebApi)\n  - Bootstrapper (Program.cs and Startup.cs)\n\nSo basically I just moved Program.cs and Startup.cs to another project. This is important because according to the onion architecture Presentation.ASPNET should not have references to Entity Framework.\n\nIf I do this today I loose the \"IIS Express\" run button and I cannot publish via wed deploy in the way I'm used to. Plus a ton of other issues.\n\nWould be sweet if there was better support for this setup :)\n"},{"Id":"7381313128","Type":"IssuesEvent","CreatedAt":"2018-03-14T22:19:23","Actor":"AngelosP","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Tooling/issues/240","RelatedDescription":"Closed issue \"Support debugging of JS executed with EdgeJS in VS\" (#240) at aspnet/Tooling","RelatedBody":"We would like to do the server side HTML rendering with ReactJS in our ASP.NET application. This works with EdgeJS, but there is currently no way to debug the JS code in VS. \n\nIt would be nice if this would work and we wouldn't need node-inspector for this.\n\nhttps://github.com/tjanczuk/edge/issues/316\n"},{"Id":"7376247861","Type":"IssuesEvent","CreatedAt":"2018-03-14T05:33:19","Actor":"barrytang","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Tooling/issues/1068","RelatedDescription":"Closed issue \"Switch between Razor Page View and Code Behind\" (#1068) at aspnet/Tooling","RelatedBody":"In the old web forms you were able to quickly switch between the ASPX file and the code behind using F7/Shift F7 or going View->Code or View->Designer. It would be useful if this was possible with Razor Pages in aspnet core projects?\r\n"},{"Id":"7372052889","Type":"IssuesEvent","CreatedAt":"2018-03-13T13:46:08","Actor":"TheConservativeCoder","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Tooling/issues/1068","RelatedDescription":"Opened issue \"Switch between Razor Page View and Code Behind\" (#1068) at aspnet/Tooling","RelatedBody":"In the old web forms you were able to quickly switch between the ASPX file and the code behind using F7/Shift F7 or going View->Code or View->Designer. It would be useful if this was possible with Razor Pages in aspnet core projects?\r\n"},{"Id":"7369868082","Type":"IssuesEvent","CreatedAt":"2018-03-13T05:33:42","Actor":"barrytang","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Tooling/issues/1067","RelatedDescription":"Closed issue \"Support dotnet watch in launchSettings.json\" (#1067) at aspnet/Tooling","RelatedBody":"I used to be able to use `dotnet watch` in Visual Studio by adding the following section to `launchSettings.json` and starting the project without debugging using CTRL + F5.\r\n\r\n```\r\n    \"Kestrel (dotnet watch run)\": {\r\n      \"commandName\": \"Executable\",\r\n      \"executablePath\": \"C:\\\\Program Files\\\\dotnet\\\\dotnet.exe\",\r\n      \"commandLineArgs\": \"watch run\",\r\n      \"launchBrowser\": true,\r\n      \"launchUrl\": \"https://localhost:5001/\",\r\n      \"environmentVariables\": {\r\n        \"ASPNETCORE_ENVIRONMENT\": \"Development\"\r\n      }\r\n    },\r\n```\r\n\r\nThis used to work in ASP.NET Core 1.1 but no longer does. According to https://github.com/aspnet/DotNetTools/issues/404 the new format for ASP.NET Core 2.0 is:\r\n\r\n```\r\n   \"Kestrel (dotnet watch run)\": {\r\n      \"commandName\": \"Executable\",\r\n      \"executablePath\": \"C:\\\\Program Files\\\\dotnet\\\\dotnet.exe\",\r\n      \"commandLineArgs\": \"watch run\",\r\n      \"workingDirectory\": \"C:\\\\Users\\\\namc\\\\source\\\\repos\\\\WebApplication2\\\\WebApplication2\",\r\n      \"launchBrowser\": true,\r\n      \"launchUrl\": \"https://localhost:5001/\",\r\n      \"environmentVariables\": {\r\n        \"ASPNETCORE_ENVIRONMENT\": \"Development\"\r\n      }\r\n    }\r\n```\r\n\r\nThe problem with this is the hard coded `executablePath` which is Windows specific and the `workingDirectory` which is specific to wherever I did a Git clone on my local machine."},{"Id":"7364725434","Type":"IssuesEvent","CreatedAt":"2018-03-12T10:19:58","Actor":"RehanSaeed","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Tooling/issues/1067","RelatedDescription":"Opened issue \"Support dotnet watch in launchSettings.json\" (#1067) at aspnet/Tooling","RelatedBody":"I used to be able to use `dotnet watch` in Visual Studio by adding the following section to `launchSettings.json` and starting the project without debugging using CTRL + F5.\r\n\r\n```\r\n    \"Kestrel (dotnet watch run)\": {\r\n      \"commandName\": \"Executable\",\r\n      \"executablePath\": \"C:\\\\Program Files\\\\dotnet\\\\dotnet.exe\",\r\n      \"commandLineArgs\": \"watch run\",\r\n      \"launchBrowser\": true,\r\n      \"launchUrl\": \"https://localhost:5001/\",\r\n      \"environmentVariables\": {\r\n        \"ASPNETCORE_ENVIRONMENT\": \"Development\"\r\n      }\r\n    },\r\n```\r\n\r\nThis used to work in ASP.NET Core 1.1 but no longer does. According to https://github.com/aspnet/DotNetTools/issues/404 the new format for ASP.NET Core 2.0 is:\r\n\r\n```\r\n   \"Kestrel (dotnet watch run)\": {\r\n      \"commandName\": \"Executable\",\r\n      \"executablePath\": \"C:\\\\Program Files\\\\dotnet\\\\dotnet.exe\",\r\n      \"commandLineArgs\": \"watch run\",\r\n      \"workingDirectory\": \"C:\\\\Users\\\\namc\\\\source\\\\repos\\\\WebApplication2\\\\WebApplication2\",\r\n      \"launchBrowser\": true,\r\n      \"launchUrl\": \"https://localhost:5001/\",\r\n      \"environmentVariables\": {\r\n        \"ASPNETCORE_ENVIRONMENT\": \"Development\"\r\n      }\r\n    }\r\n```\r\n\r\nThe problem with this is the hard coded `executablePath` which is Windows specific and the `workingDirectory` which is specific to wherever I did a Git clone on my local machine."}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"7390961156","Type":"IssuesEvent","CreatedAt":"2018-03-16T14:09:54","Actor":"natemcmaster","Repository":"aspnet/Announcements","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Announcements/issues/297","RelatedDescription":"Closed issue \"Model binding accesses read-only properties in post-back\" (#297) at aspnet/Announcements","RelatedBody":"I have a simple edit model, which contains a few computed/read-only properties. When posting to a controller method, the model validation engine accesses these properties, causing an exception.\r\n\r\nHowever, it does not make sense to access or attempt to validate a read-only property.\r\n\r\nAdditionally, all properties are marked with [BindNever], which seems to have no effect on this behavior.\r\n\r\nThe controller method takes a single parameter (the edit model) decorated with [FromForm].\r\n\r\nUsing 2.1.0-preview2-30355."},{"Id":"7390872316","Type":"IssuesEvent","CreatedAt":"2018-03-16T13:54:05","Actor":"mnmr","Repository":"aspnet/Announcements","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Announcements/issues/297","RelatedDescription":"Opened issue \"Model binding accesses read-only properties in post-back\" (#297) at aspnet/Announcements","RelatedBody":"I have a simple edit model, which contains a few computed/read-only properties. When posting to a controller method, the model validation engine accesses these properties, causing an exception.\r\n\r\nHowever, it does not make sense to access or attempt to validate a read-only property.\r\n\r\nAdditionally, all properties are marked with [BindNever], which seems to have no effect on this behavior.\r\n\r\nThe controller method takes a single parameter (the edit model) decorated with [FromForm].\r\n\r\nUsing 2.1.0-preview2-30355."}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"979863409561812993","CreatedAt":"2018-03-30T23:30:16+00:00","UserScreenname":"aspnet","Text":"We just released some minor bug fixes to jquery-ajax-unobtrusive and jquery-validation-unobtrusive:… https://t.co/9P5vskn1i8","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":23,"FavoriteCount":13,"RawContent":null},{"Id":"978766397814710272","CreatedAt":"2018-03-27T22:51:08+00:00","UserScreenname":"aspnet","Text":"We're live on the #ASPNET Community Standup! Join us! https://t.co/4Ioo9jNSN2","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":11,"FavoriteCount":7,"RawContent":null},{"Id":"978605317293576193","CreatedAt":"2018-03-27T12:11:03+00:00","UserScreenname":"aspnet","Text":"This will be a fun show that you won't want to miss if you're starting to lean #ASP.NET Core.  Jeff and Shayne are… https://t.co/MdzhQjXGY3","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":47,"FavoriteCount":12,"RawContent":null},{"Id":"978387927041323008","CreatedAt":"2018-03-26T21:47:14+00:00","UserScreenname":"aspnet","Text":"Join us for the weekly #ASPNET Community Standup this Tuesday at 3:45 PM Pacific / 23:45 GMT at https://t.co/4Ioo9jNSN2","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":9,"FavoriteCount":10,"RawContent":null},{"Id":"976910278083432449","CreatedAt":"2018-03-22T19:55:35+00:00","UserScreenname":"aspnet","Text":"Get started building .NET web apps in the browser with Blazor https://t.co/NLDaIe6hpY","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":158,"FavoriteCount":100,"RawContent":null},{"Id":"976141395114082304","CreatedAt":"2018-03-20T17:00:19+00:00","UserScreenname":"aspnet","Text":"Starting now!\n\nThe #ASPNET Community Standup with @sshirhatti showing #aspnetcore 2.1 Improvements for IIS Hosting.\n\nhttps://t.co/4Ioo9jNSN2","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":21,"FavoriteCount":10,"RawContent":null},{"Id":"975923268740833280","CreatedAt":"2018-03-20T02:33:33+00:00","UserScreenname":"aspnet","Text":"This week's #ASPNET Community Standup is on Tuesday at 10 AM  Pacific / 1800 GMT. @sshirhatti will be showing… https://t.co/qlOERhEOaw","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":19,"FavoriteCount":14,"RawContent":null},{"Id":"974312682647162880","CreatedAt":"2018-03-15T15:53:40+00:00","UserScreenname":"aspnet","Text":"Watch @csharpfritz and @shanselman in this recorded video from today's LiveStream about converting an application t… https://t.co/6QP4SCXJ3S","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":20,"FavoriteCount":4,"RawContent":null},{"Id":"974274384792866817","CreatedAt":"2018-03-15T13:21:29+00:00","UserScreenname":"aspnet","Text":"Tune in to @csharpfritz and @shanselman talking through an #ASP.NET upgrade at 10am ET / 7am PT / 14:00 UTC! https://t.co/vJe8zHT12j","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":3,"FavoriteCount":3,"RawContent":null},{"Id":"973691520728510464","CreatedAt":"2018-03-13T22:45:23+00:00","UserScreenname":"aspnet","Text":"Starting now... join us for the weekly #ASPNET Community Standup at https://t.co/4Ioo9jNSN2","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":10,"FavoriteCount":12,"RawContent":null},{"Id":"973553523186159621","CreatedAt":"2018-03-13T13:37:02+00:00","UserScreenname":"aspnet","Text":"Today, Jeff shows you how to use dependency injection with web forms... check it out! https://t.co/viqZ28DBrV","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":23,"FavoriteCount":9,"RawContent":null},{"Id":"973350716046626816","CreatedAt":"2018-03-13T00:11:09+00:00","UserScreenname":"aspnet","Text":"Join us for the weekly #ASPNET Community Standup this Tuesday at 3:45 PM Pacific / 23:45 GMT at https://t.co/4Ioo9jNSN2","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":5,"FavoriteCount":3,"RawContent":null},{"Id":"972484011556818945","CreatedAt":"2018-03-10T14:47:10+00:00","UserScreenname":"aspnet","Text":"Be sure to check out Jeff's live coding stream this morning to see more about our #ASP.NET Core 2.1 preview release. https://t.co/EtKk0fMOgU","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":23,"FavoriteCount":10,"RawContent":null},{"Id":"971084152693866496","CreatedAt":"2018-03-06T18:04:38+00:00","UserScreenname":"aspnet","Text":"We are live at https://t.co/4Ioo9jNSN2 ! Join us!","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":11,"FavoriteCount":3,"RawContent":null},{"Id":"971075755168841728","CreatedAt":"2018-03-06T17:31:16+00:00","UserScreenname":"aspnet","Text":"This week's #ASPNET Community Standup starts at 10 AM  Pacific / 1800 GMT. Ryan Nowak will be showing Web API 2.1 f… https://t.co/OW0zeYZPyq","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":22,"FavoriteCount":10,"RawContent":null},{"Id":"970812132399890432","CreatedAt":"2018-03-06T00:03:43+00:00","UserScreenname":"aspnet","Text":"This week's #ASPNET Community Standup is a feature deep dive on Web API improvements in 2.1 with Ryan Nowak.\n\nTuesd… https://t.co/eKElaXNIR3","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":36,"FavoriteCount":11,"RawContent":null},{"Id":"969671939106025473","CreatedAt":"2018-03-02T20:33:00+00:00","UserScreenname":"aspnet","Text":"Jon the Azure AD team for their first Office Hours call on March 8. https://t.co/kVYF9JWzeZ","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":10,"FavoriteCount":6,"RawContent":null}]}},"RunOn":"2018-04-02T05:30:09.9842478Z","RunDurationInMilliseconds":8283}