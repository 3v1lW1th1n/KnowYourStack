{"Data":{"Blog":{"FeedItems":[{"Title":"Supporting iOS 11 and iPhone X in Xamarin.iOS Apps","PublishedOn":"2018-06-18T19:18:01+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Apple has indicated that starting in July 2018 all new apps and app updates submitted to the App Store must be built with the iOS 11 SDK and support the iPhone X Super Retina display. The following...","Href":"https://blog.xamarin.com/supporting-ios-11-iphone-x-xamarin-apps/","RawContent":null},{"Title":"More Cross-Platform APIs with Xamarin.Essentials Latest Preview","PublishedOn":"2018-06-14T19:11:55+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We announced Xamarin.Essentials, a core set of cross-platform APIs to help developers build native apps, at Microsoft Build 2018. Xamarin.Essentials gives developers access to over thirty...","Href":"https://blog.xamarin.com/cross-platform-apis-xamarin-essentials-latest-preview/","RawContent":null},{"Title":"Use MongoDB With Your Xamarin Apps","PublishedOn":"2018-06-12T20:01:43+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"One of the most important decisions that you&#8217;ll make when designing an app is what type of database to use. Not too long ago, the choice was limited to relational databases like SQL server....","Href":"https://blog.xamarin.com/write-apps-using-mongodb-xamarin/","RawContent":null},{"Title":"Build 2018: Conference Vision Demo App","PublishedOn":"2018-06-07T20:43:39+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"At Build 2018 we shipped Xamarin.Forms 3.0. Did you miss the announcement? No worries, you can watch it here to catch up on many of the great new things that will help make you more productive...","Href":"https://blog.xamarin.com/build-2018-conference-vision-demo-app/","RawContent":null},{"Title":"Xamarin.Android Firebase Job Dispatcher: Background Scheduling for all Android Devices","PublishedOn":"2018-06-04T16:00:05+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Running tasks in the background is important for Android apps. It&#8217;s what helps keep an app responsive to the user and allows work to get done even when the user isn’t actively engaged with the...","Href":"https://blog.xamarin.com/xamarin-android-firebase-job-dispatcher-background-scheduling-android-devices/","RawContent":null},{"Title":"Xamarin and .NET Developer Events this June","PublishedOn":"2018-06-01T18:13:14+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Since the recent Microsoft Build conference, Xamarin and .NET recap events have been springing up all over the globe! Find an event near you this month to get the latest news on the exciting releases,...","Href":"https://blog.xamarin.com/xamarin-and-net-developer-events-this-june/","RawContent":null},{"Title":"Xamarin University Presents: Guest Lectures from Industry Luminaries!","PublishedOn":"2018-05-30T18:46:26+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Technology moves quickly; new software, platforms, and frameworks are constantly being developed, improved, and released. Exploring the landscape of developer tools and libraries that we can consume...","Href":"https://blog.xamarin.com/xamarin-university-presents-guest-lectures/","RawContent":null},{"Title":"Contributing to Xamarin.Android","PublishedOn":"2018-05-25T18:15:10+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Xamarin has been open source for over two years now, starting the day we made the exciting announcement about the future of Xamarin. Since then, we&#8217;ve moved the majority of our work out in the...","Href":"https://blog.xamarin.com/contributing-xamarin-android/","RawContent":null},{"Title":"Guest Post: Securing and Versioning Xamarin Apps with Mobile.BuildTools","PublishedOn":"2018-05-23T19:11:22+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Dan Siegel is a Microsoft MVP, maintainer of the Prism Library, author of numerous dev tools and OSS libraries, leader of the San Diego Xamarin Dev’s Meetup, and a Xamarin blogger. Dan works as a...","Href":"https://blog.xamarin.com/securing-versioning-xamarin-apps-with-mobilebuildtools/","RawContent":null},{"Title":"Xamarin.Essentials: Cross-Platform APIs for Mobile Apps","PublishedOn":"2018-05-16T18:36:37+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"When developing iOS and Android apps with Xamarin, developers can access every native platform API using C#. These bindings not only expose the platform APIs in C#, but add powerful C# features, such...","Href":"https://blog.xamarin.com/xamarin-essentials-cross-platform-apis-mobile-apps/","RawContent":null}],"ResultType":"Feed"},"Android":{"Events":[{"Id":"7841474732","Type":"IssuesEvent","CreatedAt":"2018-06-18T19:45:05","Actor":"chrismcb","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/1847","RelatedDescription":"Opened issue \"Xamarin Forms App occasionally hangs during Resource.UpdateIdValues call\" (#1847) at xamarin/xamarin-android","RelatedBody":"This might be related to #1544 \r\nAbout 1/4 the time the app boots, we hang during the Resources.UpdateIdValues call. Appears to happen in both debug and release builds.\r\nI originally thought this was related to 1544 as we'll have about 50 calls to UpdateIdValues on the stack. But I added some code to UpdateIdValues to not allow it to be reentrant, and we still see the same hang.\r\nIf it hangs, it appears to hang on the line:\r\n`global::Xamarin.Forms.Platform.Android.Resource.Attribute.actionBarSize = global::.....Droid.Resource.Attribute.actionBarSize;`\r\nIf I comment this line out, we won't hang.\r\nThe hang isn't consistent, but when it does happen, there is nothing on the stack. Almost like the stack was overwritten (again, making it seem like #1544 is the issue)\r\nWe have just under 4000 items in UpdateIdValues\r\n\r\nCurrently using VS 15.7.3 and this started happening when we switched to Xamarin Forms 3.0. We are considering switching back the previous release\r\n"},{"Id":"7841342760","Type":"PullRequestEvent","CreatedAt":"2018-06-18T19:17:17","Actor":"xamarin-release-manager","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1846","RelatedDescription":"Opened pull request \"Updated reference to mono/mono@4e1474e\" (#1846) at xamarin/xamarin-android","RelatedBody":"Updated reference to mono/mono@4e1474e"},{"Id":"7841321875","Type":"IssuesEvent","CreatedAt":"2018-06-18T19:12:53","Actor":"garuma","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/1845","RelatedDescription":"Opened issue \"Cannot build projects with latest mono 2018-04\" (#1845) at xamarin/xamarin-android","RelatedBody":"Either a normal build or invoking `msbuild /restore` will error-out with the following:\r\n\r\n> /Library/Frameworks/Mono.framework/External/xbuild/Xamarin/Android/Xamarin.Android.Common.targets(654,2): error MSB3644: The reference assemblies for framework \"MonoAndroid,Version=v1.0\" were not found. To resolve this, install the SDK or Targeting Pack for this framework version or retarget your application to a version of the framework for which you have the SDK or Targeting Pack installed. Note that assemblies will be resolved from the Global Assembly Cache (GAC) and will be used in place of reference assemblies. Therefore your assembly may not be correctly targeted for the framework you intend.\r\n\r\nThis issue is reproducible with build from https://github.com/mono/mono/commit/07c8f25fe536dbb7e244f965aa3f9a871f41e953  but not with earlier build https://github.com/mono/mono/commit/33a9dca4932ab793ff4a3c644e3a332f0e04af14 which could suggest https://github.com/mono/mono/commit/543b6872febade4b06429269eb40eeba0ad16a5a is the culprit"},{"Id":"7840252411","Type":"PullRequestEvent","CreatedAt":"2018-06-18T15:49:37","Actor":"jonathanpeppers","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1844","RelatedDescription":"Opened pull request \"[tests] kill adb when Xamarin.Android.Build.Tests complete\" (#1844) at xamarin/xamarin-android","RelatedBody":"Context: https://devdiv.visualstudio.com/DevDiv/_build?buildId=1768391\r\nContext: https://devdiv.visualstudio.com/DevDiv/_build?buildId=1778620\r\n\r\nThere are a couple issues happening on VSTS:\r\n1. If the build needs to delete/recreate `~\\android-toolchain\\sdk`,\r\n   sometimes `adb.exe` is running and so the directory cannot be\r\n   deleted.\r\n2. Sometimes the `<Exec />` MSBuild task will hang indefinitely, even\r\n   though the NUnit tests have completed.\r\n\r\nOur test run `adb.exe` here, to determine if a device/emulator is\r\nconnected:\r\n\r\nhttps://github.com/xamarin/xamarin-android/blob/master/src/Xamarin.Android.Build.Tasks/Tests/Xamarin.Android.Build.Tests/Utilities/BaseTest.cs#L19-L21\r\n\r\nIt turns out the two issues are directly related. If you launch\r\n`adb.exe`, and it is the first instance of `adb`, it will continue to\r\nrun as a daemon-like process. The `<Exec />` task will block until all\r\nchild processes of `nunit3-console.exe` exit, and so we get a hang\r\nrunning our tests...\r\n\r\nTo fix this, I setup a `[SetUpFixture]`, which is a feature of NUnit\r\nthat lets you run code before and after all the tests complete. I\r\nmoved the `static ctor` of `BaseTest` into a `[OneTimeSetUp]` method,\r\nand then created a `[OneTimeTearDown]` method to kill `adb`.\r\n\r\nOther changes:\r\n- I let VS sort the using statements, since they were oddly ordered."},{"Id":"7840142138","Type":"PullRequestEvent","CreatedAt":"2018-06-18T15:31:43","Actor":"jonathanpeppers","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1838","RelatedDescription":"Closed pull request \"[test] experiment to see if NUnit2 format is causing hang on Windows\" (#1838) at xamarin/xamarin-android","RelatedBody":""},{"Id":"7839891497","Type":"IssuesEvent","CreatedAt":"2018-06-18T14:53:05","Actor":"onesadjam","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/1843","RelatedDescription":"Opened issue \"BluetoothGattCallback.OnCharacteristicWrite not called on OS prior to 8.0\" (#1843) at xamarin/xamarin-android","RelatedBody":"### Steps to Reproduce\r\n\r\n1. Use BluetoothDevice.ConnectGatt to connect to a known bluetooth device\r\n2. OnConnectionStateChange to connected, make call to BluetoothGatt.DiscoverServices\r\n3. OnServicesDiscovered success, identify expected service and characteristic.  Call BluetoothGattCharacteristic.SetValue to assign a new value, then BluetoothGatt.WriteCharacteristic(characteristicToWrite) to send the request to the device.\r\n\r\n### Expected Behavior\r\nOnce BluetoothGatt.WriteCharacteristic is called the OnCharacteristicWrite callback should be called to either indicate the value was successfully written to the device or the write failed.\r\n\r\n### Actual Behavior\r\nWhen the target platform is running Android OS 8.0 or higher the behavior is as expected.  If running an earlier version of the OS the callback is never called.\r\n\r\n### Version Information\r\n\r\nMicrosoft Visual Studio Professional 2017 \r\nVersion 15.7.3\r\nVisualStudio.15.Release/15.7.3+27703.2026\r\nMicrosoft .NET Framework\r\nVersion 4.7.03056\r\n\r\nInstalled Version: Professional\r\n\r\nMicrosoft Visual Studio Tools for Applications 2017   00369-60000-00001-AA736\r\nMicrosoft Visual Studio Tools for Applications 2017\r\n\r\nApplication Insights Tools for Visual Studio Package   8.12.10405.1\r\nApplication Insights Tools for Visual Studio\r\n\r\nASP.NET and Web Tools 2017   15.0.40522.0\r\nASP.NET and Web Tools 2017\r\n\r\nASP.NET Core Razor Language Services   15.7.31476\r\nProvides languages services for ASP.NET Core Razor.\r\n\r\nASP.NET Web Frameworks and Tools 2012   4.0.21208.0\r\nFor additional information, visit https://www.asp.net/\r\n\r\nASP.NET Web Frameworks and Tools 2017   5.2.60419.0\r\nFor additional information, visit https://www.asp.net/\r\n\r\nAzure App Service Tools v3.0.0   15.0.40424.0\r\nAzure App Service Tools v3.0.0\r\n\r\nAzure Functions and Web Jobs Tools   15.0.40424.0\r\nAzure Functions and Web Jobs Tools\r\n\r\nC# Tools   2.8.3-beta6-62923-07. Commit Hash: 7aafab561e449da50712e16c9e81742b8e7a2969\r\nC# components used in the IDE. Depending on your project type and settings, a different version of the compiler may be used.\r\n\r\nCommon Azure Tools   1.10\r\nProvides common services for use by Azure Mobile Services and Microsoft Azure Tools.\r\n\r\nFabric.DiagnosticEvents   1.0\r\nFabric Diagnostic Events\r\n\r\nJavaScript Language Service   2.0\r\nJavaScript Language Service\r\n\r\nJetBrains ReSharper Ultimate 2017.3.3    Build 111.0.20180302.65130\r\nJetBrains ReSharper Ultimate package for Microsoft Visual Studio. For more information about ReSharper Ultimate, visit http://www.jetbrains.com/resharper. Copyright © 2018 JetBrains, Inc.\r\n\r\nMerq   1.1.19-rc (a4ffc1b)\r\nCommand Bus, Event Stream and Async Manager for Visual Studio extensions.\r\n\r\nMicrosoft Azure Service Fabric Tools for Visual Studio   2.1\r\nMicrosoft Azure Service Fabric Tools for Visual Studio\r\n\r\nMicrosoft Azure Tools   2.9\r\nMicrosoft Azure Tools for Microsoft Visual Studio 2017 - v2.9.10420.2\r\n\r\nMicrosoft Continuous Delivery Tools for Visual Studio   0.3\r\nSimplifying the configuration of continuous build integration and continuous build delivery from within the Visual Studio IDE.\r\n\r\nMicrosoft JVM Debugger   1.0\r\nProvides support for connecting the Visual Studio debugger to JDWP compatible Java Virtual Machines\r\n\r\nMicrosoft MI-Based Debugger   1.0\r\nProvides support for connecting Visual Studio to MI compatible debuggers\r\n\r\nMicrosoft Visual Studio Tools for Containers   1.1\r\nDevelop, run, validate your ASP.NET Core applications in the target environment. F5 your application directly into a container with debugging, or CTRL + F5 to edit & refresh your app without having to rebuild the container.\r\n\r\nMono Debugging for Visual Studio   4.10.5-pre (ab58725)\r\nSupport for debugging Mono processes with Visual Studio.\r\n\r\nNuGet Package Manager   4.6.0\r\nNuGet Package Manager in Visual Studio. For more information about NuGet, visit http://docs.nuget.org/.\r\n\r\nProjectServicesPackage Extension   1.0\r\nProjectServicesPackage Visual Studio Extension Detailed Info\r\n\r\nResourcePackage Extension   1.0\r\nResourcePackage Visual Studio Extension Detailed Info\r\n\r\nSlowCheetah - XML config transforms   1.0\r\nThis package enables you to transform your app.config or any other XML file based on the build configuration. It also adds additional tooling to help you create XML transforms.\r\n\r\nSQL Server Data Tools   15.1.61804.210\r\nMicrosoft SQL Server Data Tools\r\n\r\nSQL Server Integration Services   \r\nMicrosoft SQL Server Integration Services Designer\r\nVersion 14.0.800.98\r\n\r\nTypeScript Tools   15.7.20419.2003\r\nTypeScript Tools for Microsoft Visual Studio\r\n\r\nVisual Basic Tools   2.8.3-beta6-62923-07. Commit Hash: 7aafab561e449da50712e16c9e81742b8e7a2969\r\nVisual Basic components used in the IDE. Depending on your project type and settings, a different version of the compiler may be used.\r\n\r\nVisual F# Tools 10.1 for F# 4.1   15.7.0.0.  Commit Hash: 2527e6829ecdc8281ee60d83be8cfd0fa720a648.\r\nMicrosoft Visual F# Tools 10.1 for F# 4.1\r\n\r\nVisual Studio Code Debug Adapter Host Package   1.0\r\nInterop layer for hosting Visual Studio Code debug adapters in Visual Studio\r\n\r\nVisualStudio.Mac   1.0\r\nMac Extension for Visual Studio\r\n\r\nXamarin   4.10.10.1 (f1760154c)\r\nVisual Studio extension to enable development for Xamarin.iOS and Xamarin.Android.\r\n\r\nXamarin Designer   4.12.1 (f3257e429)\r\nVisual Studio extension to enable Xamarin Designer tools in Visual Studio.\r\n\r\nXamarin.Android SDK   8.3.3.2 (HEAD/dffc59120)\r\nXamarin.Android Reference Assemblies and MSBuild support.\r\n\r\nXamarin.iOS and Xamarin.Mac SDK   11.12.0.4 (64fece5)\r\nXamarin.iOS and Xamarin.Mac Reference Assemblies and MSBuild support.\r\n\r\n"}],"ResultType":"GitHubEvent"},"Forms":{"Events":[{"Id":"7842818941","Type":"PullRequestEvent","CreatedAt":"2018-06-19T01:54:47","Actor":"rookiejava","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/3079","RelatedDescription":"Opened pull request \"[Controls] Support NativeView to ControlGallery.Tizen\" (#3079) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\n\r\nThis PR adds support for `Xaml Native Views Gallery` on tizen backend. This also include `SampleNativeControl` tizen implementation coming from #2772.\r\n\r\n<img src=\"https://user-images.githubusercontent.com/1029134/41571613-f35c40c2-73ae-11e8-82b4-abb66d7b4254.png\" width=240><img src=\"https://user-images.githubusercontent.com/1029134/41571616-f4813cbe-73ae-11e8-92bb-908cfc274573.png\" width=240>\r\n\r\n\r\n### Issues Resolved ###\r\n\r\nNone\r\n\r\n### API Changes ###\r\n\r\nNone\r\n\r\n### Platforms Affected ###\r\n\r\n- Tizen\r\n\r\n### Behavioral/Visual Changes ###\r\n\r\nNone\r\n\r\n### PR Checklist ###\r\n\r\n- [ ] Has automated tests <!-- (if tests are omitted or manual, state reason in description) -->\r\n- [X] Rebased on top of the target branch at time of PR\r\n- [X] Changes adhere to coding standard\r\n"},{"Id":"7842568104","Type":"PullRequestEvent","CreatedAt":"2018-06-19T00:19:28","Actor":"samhouts","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/3078","RelatedDescription":"Opened pull request \"[Android] Don't throw ArgumentNullException when ObservableCollection is cleared asynchronously\" (#3078) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\n\r\nWe were attempting to get the list item from the ListProxy for the DataTemplateSelector. When the source is cleared asynchronously, the ListProxy is empty, causing the lookup to fail. No longer attempting to look up the value when there are no items in ListProxy.\r\n\r\n### Issues Resolved ###\r\n\r\n- fixes #1939\r\n\r\n### API Changes ###\r\n\r\nNone\r\n\r\n### Platforms Affected ###\r\n\r\n- Android\r\n\r\n### Behavioral/Visual Changes ###\r\n\r\nNone\r\n\r\n### PR Checklist ###\r\n\r\n- [x] Has automated tests <!-- (if tests are omitted or manual, state reason in description) -->\r\n- [x] Rebased on top of the target branch at time of PR\r\n- [x] Changes adhere to coding standard\r\n"},{"Id":"7842304998","Type":"IssuesEvent","CreatedAt":"2018-06-18T22:49:41","Actor":"dirivero","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/3077","RelatedDescription":"Opened issue \"Horizontal text alignment is treated differently in Android and iOS for Labels with arabic content\" (#3077) at xamarin/Xamarin.Forms","RelatedBody":"### Description\r\n\r\nHorizontalTextAlignment on Labels behaves differently in iOS and Android when the label contains arabic text.\r\n\r\n### Steps to Reproduce\r\n\r\nOpen attached project, compile and run in Android & iOS to see the rendering differences.\r\n\r\nCode is just this:\r\n```\r\n<StackLayout Margin=\"0,50\">\r\n    <Label Text=\"Welcome to Xamarin.Forms!\" HorizontalOptions=\"FillAndExpand\" HorizontalTextAlignment=\"Start\" />\r\n    <Label Text=\"مرحبًا بكم في Xamarin.Forms!\" HorizontalOptions=\"FillAndExpand\" HorizontalTextAlignment=\"Start\" />\r\n</StackLayout>\r\n```\r\n\r\nNote: it doesn't matter whether this is included in Android's manifest or not: `android:supportsRtl=\"true\"`\r\n\r\n### Actual Behavior\r\n\r\nIn Android, the arabic text inverts the text alignment whereas in iOS the text alignment defined by the programmer is honored.\r\n\r\n### Expected Behavior\r\n\r\nBoth platforms should behave the same. \r\n\r\nI believe that making the alignment dependent on the label content makes it difficult if you have apps with mixed content (or multiple language support). For instance, regular numbers are treated as LTR text and they are used in arabic applications so if you have to display a list of data and some are numbers the layout may suffer unless you invert the text alignment just for numbers. It may be even harder if you don't know exactly if the data to show is arabic or not. \r\n\r\nFor that, I'd prefer that Android behaves as iOS does and not the other way round, or at least have an option to get the current iOS behavior everywhere.\r\n\r\n### Basic Information\r\n\r\n- Version with issue: 3.0.0.561731 and 3.1.0.561732-pre4\r\n- Last known good version: 2.5.1.527436\r\n- IDE: VS for Mac\r\n- Platform Target Frameworks:\r\n  - iOS:  11.4\r\n  - Android: tried with Android 6 and 8\r\n- Android Support Library Version: 27.0.2.1\r\n- Affected Devices: Android simulators\r\n\r\n### Screenshots\r\n\r\niOS:\r\n![image](https://user-images.githubusercontent.com/7670773/41565746-6dfdb4a4-732e-11e8-80c7-47aa933b9ddc.png)\r\n\r\nAndroid:\r\n![image](https://user-images.githubusercontent.com/7670773/41565758-7d95ccc6-732e-11e8-8398-fc998e883cb7.png)\r\n\r\n### Reproduction Link\r\n\r\n[TextAlignment.zip](https://github.com/xamarin/Xamarin.Forms/files/2113198/TextAlignment.zip)\r\n"},{"Id":"7841456233","Type":"PullRequestEvent","CreatedAt":"2018-06-18T19:41:08","Actor":"hartez","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/3076","RelatedDescription":"Opened pull request \"[UWP] Clean up \"backButton\" stuff in PageControl\" (#3076) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\n\r\nThe UWP PageControl class contains code to manage the back button, but the back button it manages does not exist anywhere in the template. It looks like this is code left over from handling Windows 8.1 TabletResources.\r\n\r\nNo automated tests, there's literally nothing to test for.\r\n\r\n### Issues Resolved ###\r\n\r\nNone\r\n\r\n### API Changes ###\r\n\r\nNone\r\n\r\n### Platforms Affected ###\r\n\r\n- UWP\r\n\r\n### Behavioral/Visual Changes ###\r\n\r\nNone\r\n\r\n### PR Checklist ###\r\n\r\n- [ ] Has automated tests <!-- (if tests are omitted or manual, state reason in description) -->\r\n- [x] Rebased on top of the target branch at time of PR\r\n- [x] Changes adhere to coding standard\r\n"},{"Id":"7841439183","Type":"IssuesEvent","CreatedAt":"2018-06-18T19:37:30","Actor":"hartez","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/3075","RelatedDescription":"Closed issue \"Nightly builds are not nightly\" (#3075) at xamarin/Xamarin.Forms","RelatedBody":"Currently, the last nightly build (https://myget.org/feed/xamarinforms-ci/package/nuget/Xamarin.Forms) is dated May, 19th. \r\nIt would be nice to have real nightly builds, which are much more frequent. For instance, I'd like to try the following change: https://github.com/xamarin/Xamarin.Forms/issues/2993, but no package contains it. "},{"Id":"7841423622","Type":"IssuesEvent","CreatedAt":"2018-06-18T19:34:03","Actor":"pfedotovsky","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/3075","RelatedDescription":"Opened issue \"Nightly builds are not nightly\" (#3075) at xamarin/Xamarin.Forms","RelatedBody":"Currently, the last nightly build (https://myget.org/feed/xamarinforms-ci/package/nuget/Xamarin.Forms) is dated May, 19th. \r\nIt would be nice to have real nightly builds, which are much more frequent. For instance, I'd like to try the following change: https://github.com/xamarin/Xamarin.Forms/issues/2993, but no package contains it. "},{"Id":"7841340757","Type":"PullRequestEvent","CreatedAt":"2018-06-18T19:16:52","Actor":"hartez","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/3074","RelatedDescription":"Opened pull request \"[UWP] Allow PageControl to find its template if a NavigationPage is the app root\" (#3074) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\n\r\nFor some reason, if a Navigation Page was the root page of a Forms application, on UWP the containing PageControl could not properly load its ControlTemplate. This had the side effect of preventing the ActivityIndicator from displaying or running.\r\n\r\nThis change allows the PageControl to find its template even when the Navigation Page is the root, which allows the ActivityIndicator to display properly.\r\n\r\nUnfortunately, there's no good way to automate the test for this (we can't verify that the ActivityIndicator is displaying correctly, and the test app can't launch with the test page as its root).\r\n\r\n### Issues Resolved ###\r\n\r\n- fixes #1483 \r\n\r\n### API Changes ###\r\n\r\nNone\r\n\r\n### Platforms Affected ###\r\n\r\n- UWP\r\n\r\n### Behavioral/Visual Changes ###\r\n\r\nNone\r\n\r\n### PR Checklist ###\r\n\r\n- [ ] Has automated tests <!-- (if tests are omitted or manual, state reason in description) -->\r\n- [x] Rebased on top of the target branch at time of PR\r\n- [x] Changes adhere to coding standard\r\n"},{"Id":"7841179291","Type":"IssuesEvent","CreatedAt":"2018-06-18T18:44:42","Actor":"LGFox","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/3073","RelatedDescription":"Opened issue \"WebView shows blank screen with XF3.0\" (#3073) at xamarin/Xamarin.Forms","RelatedBody":"<!-- Bug report best practices: https://github.com/xamarin/Xamarin.Forms/wiki/Submitting-Issues -->\r\n### Description\r\nXamarin.Forms WebView control doesn't apply custom port in URL on iOS and shows blank screen.\r\n\r\n### Steps to Reproduce\r\n1. Create empty Xamarin.Forms app.\r\n2. In xaml add <WebView Source=\"http://portquiz.net:8080/\" HorizontalOptions=\"FillAndExpand\" VerticalOptions=\"FillAndExpand\" />\r\n3. Run it on iOS.\r\n\r\n### Expected Behavior\r\nThe page is opened. (It does on Android)\r\n\r\n### Actual Behavior\r\nBlank screen displayed.\r\n\r\n### Basic Information\r\n- Version with issue:  Xamarin.Forms.3.0.0.561731\r\n- Last known good version: --\r\n- IDE: VisualStudio 2017 15.7.2\r\n- Affected Devices: Checked on iPhone 7 Plus\r\n\r\n### Reproduction Link\r\nhttps://github.com/LGFox/WebView.Bug"}],"ResultType":"GitHubEvent"},"Macios":{"Events":[{"Id":"7843331157","Type":"PullRequestEvent","CreatedAt":"2018-06-19T05:20:29","Actor":"rolfbjarne","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/4287","RelatedDescription":"Merged pull request \"[jenkins] Make the Jenkins-built packages the official ones.\" (#4287) at xamarin/xamarin-macios","RelatedBody":null},{"Id":"7843329979","Type":"PullRequestEvent","CreatedAt":"2018-06-19T05:20:03","Actor":"rolfbjarne","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/4282","RelatedDescription":"Merged pull request \"[mmp] Exec the binary in the script.\" (#4282) at xamarin/xamarin-macios","RelatedBody":"This way the mmp process is killed if the parent process kills the process\nit spawned.\n\nIt also uses one less process."},{"Id":"7841969532","Type":"PullRequestEvent","CreatedAt":"2018-06-18T21:25:00","Actor":"spouliot","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/4291","RelatedDescription":"Opened pull request \"[contacts] Update for beta 1\" (#4291) at xamarin/xamarin-macios","RelatedBody":"A new enum value and the removal of availability on existing error codes\nsince they are output, not input."},{"Id":"7841924547","Type":"IssuesEvent","CreatedAt":"2018-06-18T21:15:05","Actor":"equinox2k","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/xamarin-macios/issues/4289","RelatedDescription":"Closed issue \"Crash with Mojave + photo asset request\" (#4289) at xamarin/xamarin-macios","RelatedBody":"### Steps to Reproduce\r\n\r\nNot sure on exact steps to reproduce at moment but the segment of code I think is crashing is as follows...\r\n\r\n```\r\n         \t\tpublic static async Task<NSImage> LoadLowQualityAssetImageAsync(string assetUrl, CGSize size, Action<double> progressAction = null)\r\n        {\r\n            return await Task.Run(() =>\r\n            {\r\n\r\n                NSImage result = null;\r\n\r\n                var asset = ProjectCollectionManager.SharedInstance().Assets[assetUrl];\r\n\r\n                PHImageRequestOptions options = new PHImageRequestOptions\r\n                {\r\n                    DeliveryMode = PHImageRequestOptionsDeliveryMode.FastFormat,\r\n                    ResizeMode = PHImageRequestOptionsResizeMode.Fast,\r\n                    NetworkAccessAllowed = true,\r\n                    Synchronous = true,\r\n                    ProgressHandler = (double progress, NSError error, out bool stop, NSDictionary info) =>\r\n                    {\r\n                        stop = false;\r\n                        progressAction?.Invoke(progress);\r\n                    }\r\n                };\r\n                 \r\n                PHImageManager.DefaultManager.RequestImageForAsset(asset, new CGSize(500, 500), PHImageContentMode.AspectFit, options, (image, info) =>\r\n                {\r\n                    result = image;\r\n                });\r\n  \r\n                return result;\r\n\r\n            });\r\n        }\r\n```\r\n\r\n### Expected Behavior\r\n\r\nNot to crash\r\n\r\n### Actual Behavior\r\n\r\nCrash with following error...\r\n\r\n```\r\nCrashed Thread:        1  Dispatch queue: PFQOSPriorityQueueExtension scheduling queue for com.apple.lithium.ipc.pid0.1.sendQueue\r\n\r\nException Type:        EXC_CRASH (SIGABRT)\r\nException Codes:       0x0000000000000000, 0x0000000000000000\r\nException Note:        EXC_CORPSE_NOTIFY\r\n\r\nExternal Modification Warnings:\r\nDebugger attached to process.\r\n\r\nApplication Specific Information:\r\nabort() called\r\nAssertion failure in +[PFDispatchQueue globalQOSQueue:], /BuildRoot/Library/Caches/com.apple.xbs/Sources/PhotoApp_SubFrameworks/PhotoApp-3401.2.164/lib/photofoundation/source/util/PFDispatchQueue/PFDispatchQueue.m:217\r\nNo global queue for unspecified QOS\r\n\r\nThread 0:: tid_307  Dispatch queue: com.apple.main-thread\r\n0   libsystem_kernel.dylib        \t0x00007fff69fc60d2 __semwait_signal + 10\r\n1   libsystem_c.dylib             \t0x00007fff69f317f0 nanosleep + 199\r\n2   libsystem_c.dylib             \t0x00007fff69f31652 sleep + 41\r\n3   com.pnimedia.PNI-Mobile-Mac   \t0x00000001056bc63a mono_threads_summarize + 826 (threads.c:5671)\r\n4   com.pnimedia.PNI-Mobile-Mac   \t0x0000000105563241 sigterm_signal_handler + 65 (mini-posix.c:230)\r\n5   libsystem_platform.dylib      \t0x00007fff6a057d9a _sigtramp + 26\r\n6   ???                           \t0x0000000105c9c080 0 + 4392075392\r\n7   com.pnimedia.PNI-Mobile-Mac   \t0x00000001054be1a6 suspend_current + 310 (mono-os-mutex.h:173)\r\n8   com.pnimedia.PNI-Mobile-Mac   \t0x00000001054a625b process_single_step_inner + 75 (debugger-agent.c:5290)\r\n9   com.pnimedia.PNI-Mobile-Mac   \t0x00000001054a61ba debugger_agent_single_step_from_context + 154 (debugger-agent.c:5446)\r\n10  ???                           \t0x0000000107705dff 0 + 4419771903\r\n11  ???                           \t0x00000001077b57a9 0 + 4420491177\r\n12  ???                           \t0x00000001077b49f3 0 + 4420487667\r\n13  ???                           \t0x00000001077b424b 0 + 4420485707\r\n\r\nThread 1 Crashed:: Dispatch queue: PFQOSPriorityQueueExtension scheduling queue for com.apple.lithium.ipc.pid0.1.sendQueue\r\n0   libsystem_kernel.dylib        \t0x00007fff69fc5eb6 __pthread_kill + 10\r\n1   libsystem_pthread.dylib       \t0x00007fff6a063088 pthread_kill + 285\r\n2   libsystem_c.dylib             \t0x00007fff69f12228 __abort + 144\r\n3   libsystem_c.dylib             \t0x00007fff69f12198 abort + 142\r\n4   com.apple.PhotoFoundation     \t0x00007fff5ed12fc0 -[PFAssertionPolicyAbort notifyAssertion:] + 58\r\n5   com.apple.PhotoFoundation     \t0x00007fff5ed126e6 -[PFAssertionPolicyComposite notifyAssertion:] + 217\r\n6   com.apple.PhotoFoundation     \t0x00007fff5ed128e3 -[PFAssertionPolicyUnique notifyAssertion:] + 232\r\n7   com.apple.PhotoFoundation     \t0x00007fff5ed11e83 -[PFAssertionHandler handleFailureInFunction:file:lineNumber:description:arguments:] + 164\r\n8   com.apple.PhotoFoundation     \t0x00007fff5ed11a7c _PFAssertFailHandler + 274\r\n9   com.apple.PhotoFoundation     \t0x00007fff5ed44c2e +[PFDispatchQueue globalQOSQueue:] + 129\r\n10  com.apple.PhotoFoundation     \t0x00007fff5ecfc634 __46-[PFPriorityQueueExtension _scheduleNextBlock]_block_invoke.66 + 71\r\n11  libdispatch.dylib             \t0x00007fff69e220cf _dispatch_call_block_and_release + 12\r\n12  libdispatch.dylib             \t0x00007fff69e1b4d2 _dispatch_client_callout + 8\r\n13  libdispatch.dylib             \t0x00007fff69e2e19a _dispatch_lane_serial_drain + 609\r\n14  libdispatch.dylib             \t0x00007fff69e2ec82 _dispatch_lane_invoke + 436\r\n15  libdispatch.dylib             \t0x00007fff69e3533a _dispatch_workloop_worker_thread + 603\r\n16  libsystem_pthread.dylib       \t0x00007fff6a0608e9 _pthread_wqthread + 409\r\n17  libsystem_pthread.dylib       \t0x00007fff6a06073d start_wqthread + 13\r\n```\r\n\r\n### Environment\r\n\r\nVisual Studio for Mac, MacOS Mojave + Xcode 10"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1008802730993967104","CreatedAt":"2018-06-18T20:04:48+00:00","UserScreenname":"xamarinhq","Text":"Get ready for the July 2018 deadline by ensuring your  #Xamarin apps support iOS 11 and iPhone X: https://t.co/1Wx6Bo4TSQ","Source":"<a href=\"http://twitter.com/download/iphone\" rel=\"nofollow\">Twitter for iPhone</a>","RetweetCount":21,"FavoriteCount":10,"RawContent":null},{"Id":"1007343670775963649","CreatedAt":"2018-06-14T19:27:01+00:00","UserScreenname":"xamarinhq","Text":"Get access to more cross-platform APIs with the latest Xamarin.Essentials Preview: https://t.co/WqtCV8OneC https://t.co/FgdScqkpPt","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":113,"FavoriteCount":59,"RawContent":null},{"Id":"1007280505820254209","CreatedAt":"2018-06-14T15:16:01+00:00","UserScreenname":"xamarinhq","Text":"Implement drawer and split UI with the #XamarinForms MasterDetailPage: https://t.co/77WkBtKGpx https://t.co/zLa3RTUgaL","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":44,"FavoriteCount":18,"RawContent":null},{"Id":"1006915501405167616","CreatedAt":"2018-06-13T15:05:37+00:00","UserScreenname":"xamarinhq","Text":"Using #TensorFlow and #Azure to add image classification to your Android apps: https://t.co/45lGqihW7e https://t.co/U9huu5DdJW","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":60,"FavoriteCount":22,"RawContent":null},{"Id":"1006682387743461376","CreatedAt":"2018-06-12T23:39:19+00:00","UserScreenname":"xamarinhq","Text":"Create your first #Xamarin app using #MongoDB: https://t.co/Nu6lZzYwYX","Source":"<a href=\"http://twitter.com/download/iphone\" rel=\"nofollow\">Twitter for iPhone</a>","RetweetCount":60,"FavoriteCount":27,"RawContent":null},{"Id":"1006563778471788544","CreatedAt":"2018-06-12T15:48:00+00:00","UserScreenname":"xamarinhq","Text":"Check out this handy curated list of awesome #Xamarin books written by other developers in the #Xamarin community: https://t.co/Yu7V3tVSRq","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":57,"FavoriteCount":23,"RawContent":null},{"Id":"1006201893369106433","CreatedAt":"2018-06-11T15:50:00+00:00","UserScreenname":"xamarinhq","Text":"A brief history of #dotNET Standard (and where it's going): https://t.co/AfiPETlRiv","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":43,"FavoriteCount":23,"RawContent":null},{"Id":"1005923084023582721","CreatedAt":"2018-06-10T21:22:07+00:00","UserScreenname":"xamarinhq","Text":"Learn how to use the iOS 11 drag and drop APIs in your #Xamarin iOS apps: https://t.co/bWru3lL6he https://t.co/OPYTFzsQk4","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":67,"FavoriteCount":28,"RawContent":null},{"Id":"1005574764382117888","CreatedAt":"2018-06-09T22:18:01+00:00","UserScreenname":"xamarinhq","Text":"Localize your #XamarinForms apps for right-to-left languages with the help of the new FlowDirection property:… https://t.co/kaQCoeUycf","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":37,"FavoriteCount":22,"RawContent":null},{"Id":"1005116748180402176","CreatedAt":"2018-06-08T15:58:01+00:00","UserScreenname":"xamarinhq","Text":"Get started debugging Mono from the source code in the third part of our #Xamarin Open Source Frameworks series:… https://t.co/vjjKyuTsDH","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":31,"FavoriteCount":10,"RawContent":null},{"Id":"1004839391477592064","CreatedAt":"2018-06-07T21:35:54+00:00","UserScreenname":"xamarinhq","Text":"Check out the code for the #MSBuild 2018 Conference Vision demo app: https://t.co/tpcBITRsnu https://t.co/kVwUJR5NoL","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":158,"FavoriteCount":85,"RawContent":null},{"Id":"1004743034813276160","CreatedAt":"2018-06-07T15:13:01+00:00","UserScreenname":"xamarinhq","Text":"Learn how to build #XamariniOS from the source code in the second part of our four-part series on debugging… https://t.co/88r7PENPNw","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":29,"FavoriteCount":20,"RawContent":null},{"Id":"1004393225787002881","CreatedAt":"2018-06-06T16:03:00+00:00","UserScreenname":"xamarinhq","Text":"We’ve updated the #XamarinForms project templates in #VS2017 to include #dotNET Standard support and customization… https://t.co/6IkmiiY1Jp","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":82,"FavoriteCount":32,"RawContent":null},{"Id":"1004381931470049282","CreatedAt":"2018-06-06T15:18:07+00:00","UserScreenname":"xamarinhq","Text":"Implement drawer and split UI with the #XamarinForms MasterDetailPage: https://t.co/77WkBtKGpx https://t.co/6jygocRw2d","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":37,"FavoriteCount":24,"RawContent":null},{"Id":"1004017778859347975","CreatedAt":"2018-06-05T15:11:06+00:00","UserScreenname":"xamarinhq","Text":"Adding geospatial calculations to your #Xamarin apps with #Azure #CosmosDB: https://t.co/acrN8gdJdS https://t.co/rS6ZWBVQDw","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":46,"FavoriteCount":20,"RawContent":null}]}},"RunOn":"2018-06-19T05:30:56.7599736Z","RunDurationInMilliseconds":3981}