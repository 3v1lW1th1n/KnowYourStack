{"Data":{"Blog":{"FeedItems":[{"Title":"Extend Xamarin.Forms Controls Functionality with Behaviors","PublishedOn":"2018-02-16T18:48:28+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Xamarin.Forms provides a way to build 100% native, cross-platform applications with both a shared logic layer and a shared user-interface layer. Built-in Xamarin.Forms controls also provide a ton of...","Href":"https://blog.xamarin.com/extend-xamarin-forms-controls-functionality-with-behaviors/","RawContent":null},{"Title":"Xamarin.iOS and Xcode 9.3 Web Preview","PublishedOn":"2018-02-15T20:36:32+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"The next release of Xcode, version 9.3, is currently in beta. Development of Xamarin.iOS to support the new Xcode 9.3 version is in-progress and available now as a web preview. Participating in...","Href":"https://blog.xamarin.com/xcode-9-3-web-preview-high-sierra-required/","RawContent":null},{"Title":"Add a Search Bar to Your Xamarin Apps in iOS 11","PublishedOn":"2018-02-12T20:00:25+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"As described in the Go Large with iOS 11 post, view controllers in iOS 11 can use large titles to improve the clarity of an app&#8217;s user interface. To complement a view controller&#8217;s large...","Href":"https://blog.xamarin.com/add-search-bar-xamarin-ios-11/","RawContent":null},{"Title":"Podcast: Rapid UI Prototyping with Ink to Code, Merged Dictionaries in Xamarin.Forms, & Android Emulator Tips","PublishedOn":"2018-02-09T19:33:06+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"In this episode of the Xamarin Podcast, James Montemagno and I talk about a new tool that turns drawings into Android or UWP layouts, merged dictionaries coming to Xamarin.Forms, ways to make your...","Href":"https://blog.xamarin.com/podcast-rapid-ui-prototyping-ink-code-merged-dictionaries-xamarin-forms-android-emulator-tips/","RawContent":null},{"Title":"Add Languages to Your Xamarin Apps with Multilingual App Toolkit","PublishedOn":"2018-02-08T20:10:34+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"With Xamarin, you can extend your cross-platform apps with support for native speakers, reaching markets that might otherwise be overlooked. However, managing multiple languages and keeping everything...","Href":"https://blog.xamarin.com/add-languages-to-your-apps-with-xamarin-and-multilingual-app-toolkit/","RawContent":null},{"Title":"Upcoming Webinar | Xamarin University Presents: Building Your First Intelligent App with Xamarin and Microsoft Cognitive Services","PublishedOn":"2018-02-07T19:39:30+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today&#8217;s apps must be “intelligent” to win app users’ loyalty, whether for a consumer app or a business app. With Xamarin.Forms and Microsoft Cognitive Services, you can easily create your first...","Href":"https://blog.xamarin.com/upcoming-webinar-xamarin-university-presents-building-first-intelligent-app-xamarin-microsoft-cognitive-services/","RawContent":null},{"Title":"Draw your Next App Idea with Ink to Code","PublishedOn":"2018-02-05T18:50:43+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Imagine that you&#8217;ve just been struck by inspiration for your next great app. You might start by jotting some notes and sketching out screens. If you&#8217;re thinking about reaching for a...","Href":"https://blog.xamarin.com/draw-next-app-idea-ink-code/","RawContent":null},{"Title":"Lose the Cables: Make Deploying to an iOS or tvOS Device Easier","PublishedOn":"2018-02-02T19:59:02+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"One thing most developers consistently do during app development is deploy to a testing device. One main drawback during this process is the struggle to find a cable, connect it to a computer, plug it...","Href":"https://blog.xamarin.com/lose-cables-make-deploying-ios-tvos-device-easier/","RawContent":null},{"Title":"Just Push Play: Using Google Play on an Android Emulator","PublishedOn":"2018-02-01T20:22:55+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"The needs of an Android developer using the Android emulator continuously expand. The latest emulator development from Google provides a system image for the Google Play Store, which includes a fully...","Href":"https://blog.xamarin.com/just-push-play-using-google-play-android-emulator/","RawContent":null},{"Title":"Xamarin Developer Events in February","PublishedOn":"2018-01-31T19:26:04+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"If you haven&#8217;t started working on your new year&#8217;s resolutions yet, we have the perfect solution: get out there and start building on your mobile app development education by networking...","Href":"https://blog.xamarin.com/xamarin-developer-events-february/","RawContent":null}],"ResultType":"Feed"},"Android":{"Events":[{"Id":"7264813019","Type":"PullRequestEvent","CreatedAt":"2018-02-19T15:37:11","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1322","RelatedDescription":"Merged pull request \"[msbuild] Fix <Import>-ed filename, for case sensitivity.\" (#1322) at xamarin/xamarin-android","RelatedBody":"There is a trivial difference between `msbuild` and `xbuild` - `msbuild`\r\nseems to respect (or ignorant of) the fact that filenames that are different\r\nin case are actually different on case-sensitive filesystem.\r\n\r\nThus with `msbuild`, our binding projects don't build due to \"missing\"\r\nMicrosoft.CSharp.Targets (there are only Microsoft.CSharp.targets even in\r\n`xbuild` support files in mono).\r\n\r\nThis trivial fix should make it work."},{"Id":"7264273849","Type":"PullRequestEvent","CreatedAt":"2018-02-19T13:57:10","Actor":"atsushieno","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1322","RelatedDescription":"Opened pull request \"[msbuild] Fix <Import>-ed filename, for case sensitivity.\" (#1322) at xamarin/xamarin-android","RelatedBody":"There is a trivial difference between `msbuild` and `xbuild` - `msbuild`\r\nseems to respect (or ignorant of) the fact that filenames that are different\r\nin case are actually different on case-sensitive filesystem.\r\n\r\nThus with `msbuild`, our binding projects don't build due to \"missing\"\r\nMicrosoft.CSharp.Targets (there are only Microsoft.CSharp.targets even in\r\n`xbuild` support files in mono).\r\n\r\nThis trivial fix should make it work."},{"Id":"7261230270","Type":"PullRequestEvent","CreatedAt":"2018-02-18T18:43:18","Actor":"luhenry","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1320","RelatedDescription":"Opened pull request \"[mono-sdks] Start integration of build targets\" (#1320) at xamarin/xamarin-android","RelatedBody":""},{"Id":"7258343257","Type":"IssuesEvent","CreatedAt":"2018-02-17T05:56:10","Actor":"JoshaMunnik","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/1319","RelatedDescription":"Opened issue \"Binding Library properties shows class-parse but jar2xml is used by default\" (#1319) at xamarin/xamarin-android","RelatedBody":"### Steps to Reproduce\r\n\r\n1. Create new Android Binding Library\r\n2. Add jar/aar (for example firebase-messaging-11.8.0.jar)\r\n3. Open properties, Android Class Parser shows \"class-parse\"\r\n4. Set MSBUILD to Diagnostic (Tools ->Options -> Projects and Solutions -> Build and Run)\r\n5. Build\r\n6. Output shows some JAR2XML warnings\r\n\r\n### Expected Behavior\r\nClass-parse being used\r\n\r\n### Actual Behavior\r\nJar2xml being used\r\n\r\n### Workaround\r\n1. Open properties\r\n2. Switch Android Class Parser to \"jar2xml\"\r\n3. Save\r\n4. Switch Android Class Parse to \"class-parse\"\r\n5. Save\r\n\r\nWhen build/rebuilding class-parse gets used.\r\n\r\n### Version Information\r\nMicrosoft Visual Studio Community 2017 \r\nVersion 15.5.6\r\nVisualStudio.15.Release/15.5.6+27130.2027\r\nMicrosoft .NET Framework\r\nVersion 4.7.02556\r\nInstalled Version: Community\r\nVisual Basic 2017   00369-60000-00001-AA733\r\nMicrosoft Visual Basic 2017\r\nVisual C# 2017   00369-60000-00001-AA733\r\nMicrosoft Visual C# 2017\r\nVisual F# 4.1   00369-60000-00001-AA733\r\nMicrosoft Visual F# 4.1\r\nApplication Insights Tools for Visual Studio Package   8.10.01106.1\r\nASP.NET and Web Tools 2017   15.0.31127.0\r\nASP.NET and Web Tools 2017\r\nASP.NET Core Razor Language Services   1.0\r\nASP.NET Web Frameworks and Tools 2017   5.2.51007.0\r\nAzure App Service Tools v3.0.0   15.0.31106.0\r\nCommon Azure Tools   1.10\r\nFabric.DiagnosticEvents   1.0\r\nFile Nesting   2.6.67\r\nJavaScript Language Service   2.0\r\nJetBrains ReSharper Ultimate 2017.3    Build 111.0.20171218.133305\r\nMerq   1.1.17-rc (cba4571)\r\nMicrosoft Azure Service Fabric Tools for Visual Studio   2.0\r\nMicrosoft Azure Tools   2.9\r\nMicrosoft Azure Tools for Microsoft Visual Studio 2017 - v2.9.51120.3\r\nMicrosoft Continuous Delivery Tools for Visual Studio   0.3\r\nMicrosoft JVM Debugger   1.0\r\nMicrosoft MI-Based Debugger   1.0\r\nMicrosoft Visual Studio Tools for Containers   1.1\r\nMono Debugging for Visual Studio   4.8.4-pre (3fe64e3)\r\nNuGet Package Manager   4.5.0\r\nSQL Server Data Tools   15.1.61710.120\r\nTypeScript Tools   15.5.11025.1\r\nVisual Studio Code Debug Adapter Host Package   1.0\r\nVisual Studio Tools for Unity   3.5.0.3\r\nVisualStudio.Mac   1.0\r\nWeb Compiler   1.11.326\r\nWebJobs Tools v1.0.0   15.0.31201.0\r\nXamarin   4.8.0.760 (fc93f3f5b)\r\nXamarin Designer   4.8.188 (c5813fa34)\r\nXamarin.Android SDK   8.1.5.0 (HEAD/75f8c6838)\r\nXamarin.iOS and Xamarin.Mac SDK   11.6.1.4 (db807ec)\r\nXamarin.iOS and Xamarin.Mac Reference Assemblies and MSBuild support.\r\n\r\n"},{"Id":"7257465174","Type":"PullRequestEvent","CreatedAt":"2018-02-16T22:09:44","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1318","RelatedDescription":"Merged pull request \"Bump to mono:2017-12\" (#1318) at xamarin/xamarin-android","RelatedBody":"We want that to start working on the Mono SDKs integration to XA."}],"ResultType":"GitHubEvent"},"Forms":{"Events":[{"Id":"7266747599","Type":"PullRequestEvent","CreatedAt":"2018-02-20T00:00:54","Actor":"rmarinho","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/1923","RelatedDescription":"Merged pull request \"[UITest] Fix tests for UITest package update\" (#1923) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\n\r\nSeems tests are failing because of failing to find the button on top of the page\r\n\r\n### PR Checklist ###\r\n\r\n- [ ] Has tests (if omitted, state reason in description)\r\n- [ ] Rebased on top of master at time of PR\r\n- [ ] Changes adhere to coding standard\r\n- [ ] Consolidate commits as makes sense"},{"Id":"7266687102","Type":"IssuesEvent","CreatedAt":"2018-02-19T23:37:31","Actor":"mll","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/1927","RelatedDescription":"Opened issue \"iOS ListViewRenderer has a bug in row insertion/deletion logic.\" (#1927) at xamarin/Xamarin.Forms","RelatedBody":"### Description\r\n\r\nSee commit 1f770f65886213e28677092ccea355ee799cfa51 (the current commit on master at the time of writing).\r\n\r\nThe code in Xamarin.Forms/Xamarin.Forms.Platform.iOS/Renderers/ListViewRenderer.cs: 532-544\r\nreads:\r\n\r\n\t\t\tswitch (e.Action)\r\n\t\t\t{\r\n\t\t\t\tcase NotifyCollectionChangedAction.Add:\r\n\r\n\t\t\t\t\tUpdateEstimatedRowHeight();\r\n\t\t\t\t\tif (e.NewStartingIndex == -1 || groupReset)\r\n\t\t\t\t\t\tgoto case NotifyCollectionChangedAction.Reset;\r\n\r\n\t\t\t\t\tControl.BeginUpdates();\r\n\t\t\t\t\tControl.InsertRows(GetPaths(section, e.NewStartingIndex, e.NewItems.Count), InsertRowsAnimation);\r\n\t\t\t\t\tControl.EndUpdates();\r\n\r\n\t\t\t\t\tbreak;\r\n\r\nThis code is buggy and leads to crashes when the ListView is dynamically updated using ObservableCollection as its data source. This is because updates to the UITableView are not issued in an appropriate way. \r\n\r\nImagine an empty list. When you try to dynamically add an element using ObservableCollection.Add(),\r\nthe event is intercepted and the code above is executed. The problem is that the dataSource for UITableView gets updated *before* BeginUpdates() gets called. This causes a crash coming from UITableView internals that reads:\r\n\r\n\"NSInternalInconsistencyException Reason: Invalid update: invalid number of rows in section 0.  The number of rows contained in an existing section after the update (1) must be equal to the number of rows contained in that section before the update (1), plus or minus the number of rows inserted or deleted from that section (1 inserted, 0 deleted) and plus or minus the number of rows moved into or out of that section (0 moved in, 0 moved out).\"\r\n\r\nThis is because the data source was updated way before the code on hand was run. The data source should reflect the situation before the update at the time BeginUpdates() gets called, then the update to the data source should be applied, then the InsertRows() should be called and finally EndUpdates() should be issued.\r\n\r\n### Steps to Reproduce\r\n\r\n1.  Create a new project with a single page containing a ListView bound to ObservableCollection<string> as its ItemSource and a single button.\r\n2. On a button action, call Add(\"test\") on the ObservableCollection.\r\n\r\n### Expected Behavior\r\n\r\nThe \"test\" row should be added to the list.\r\n\r\n### Actual Behavior\r\n\r\nObserve a crash when running on iOS.\r\n\r\n### Basic Information\r\n\r\n- Version with issue: 2.5.0.122203\r\n- Last known good version:\r\n- IDE: Visual Studio OS X 7.3.2(12) and Visual Studio 2017 on a PC\r\n- Platform Target Frameworks: \r\n  - iOS:  All\r\n  - Android: Irrelevant\r\n  - UWP:  Irrelevant\r\n- Android Support Library Version: Irrelevant\r\n- Nuget Packages: Irrelevant\r\n- Affected Devices: All iOS devices\r\n"},{"Id":"7266552701","Type":"PullRequestEvent","CreatedAt":"2018-02-19T22:49:58","Actor":"kzu","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/1926","RelatedDescription":"Opened pull request \"Use relative URL to support recursive checkout in VSTS\" (#1926) at xamarin/Xamarin.Forms","RelatedBody":"This is the norm in all other repos building in VSTS and\r\nmakes upstream build definitions and scripts much simpler."},{"Id":"7266482847","Type":"PullRequestEvent","CreatedAt":"2018-02-19T22:27:28","Actor":"jassmith","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/1880","RelatedDescription":"Merged pull request \"Implemented MaxLength property on Entry and Editor\" (#1880) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\n\r\nImplementation of MaxLength on both the Entry as well as the Editor (by implementing it on the InputView) for all platforms supported today. Fixes #1663.\r\n\r\nNo unit tests have been added since I would just be testing the getter/setter of the property.\r\n\r\n### Bugs Fixed ###\r\n\r\n- N/A\r\n\r\n### API Changes ###\r\nAdded:\r\n - `static BindableProperty InputView.MaxLengthProperty;`\r\n - `int InputView.MaxLength { get; set; }` //Bindable Property, default value int.MaxValue\r\n\r\n### Behavioral Changes ###\r\n\r\nThere shouldn't be any behavioral changes by just upgrading. But they now have the ability to limit the input length of the Editor and Entry controls.\r\n\r\n### PR Checklist ###\r\n\r\n- [ ] Has tests (if omitted, state reason in description)\r\n- [x] Rebased on top of master at time of PR\r\n- [x] Changes adhere to coding standard\r\n- [x] Consolidate commits as makes sense"},{"Id":"7266482842","Type":"IssuesEvent","CreatedAt":"2018-02-19T22:27:28","Actor":"jassmith","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/1663","RelatedDescription":"Closed issue \"[Enhancement] Entry.MaxLength\" (#1663) at xamarin/Xamarin.Forms","RelatedBody":"## Rational\r\n\r\nSometimes the user needs to limit the maximum number of characters a user can enter into an Entry. While this could be done with a reactive implementation, sometimes setting a property is easier.\r\n\r\n## Implementation\r\n\r\n```csharp\r\npublic class Entry : View\r\n{\r\n\t<SNIP>\r\n    \r\n    public uint MaxLength { get; set; } // BP, Default MaxValue\r\n}\r\n```\r\n\r\nDo not set the native property unless the user changes the MaxLength away from MaxValue otherwise breakage of existing applications may occur.\r\n\r\n## Expected Result\r\nWhen the user attempts to enter more text than the max length it should clip at the limit.\r\n\r\n### Android\r\n```csharp\r\nControl.SetFilters(new []{ new InputFilter.LengthFilter(length) });\r\n```\r\n\r\nMake sure to pay attention to the comment from Shane below.\r\n\r\n### iOS\r\nBasically needs to do this: https://stackoverflow.com/questions/433337/set-the-maximum-character-length-of-a-uitextfield\r\n\r\nDO NOT COPY AND PASTE CODE.\r\n\r\n### UWP\r\nJust set the MaxLength property of the TextBox.\r\n\r\n## Implications for CSS\r\nNot relevant to CSS\r\n\r\n## Backward Compatibility\r\n\r\nThird party renderers may need to be updated to ensure that this functionality is supported through the new official mechanism. Further we will need to be careful to code the changes to the renderers in a careful manner to ensure that if someone is already using an effect support this feature that the effect is as best as possible not broken by our changes.\r\n\r\n## Difficulty : Easy\r\n\r\nThe implementation is relatively easy on each target platform. It is unfortunately not possible to detect if the user has already set these values on all platforms. This will make avoid backwards-compatibility issues much harder."},{"Id":"7266346073","Type":"IssuesEvent","CreatedAt":"2018-02-19T21:46:27","Actor":"derekwheeler-tylertech","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/1925","RelatedDescription":"Opened issue \"mono-symbolicate errors (on iOS only): \"Warning: MVID directory does not exist: ...\"\" (#1925) at xamarin/Xamarin.Forms","RelatedBody":"Bug report best practices: https://github.com/xamarin/Xamarin.Forms/wiki/Submitting-Issues\r\n\r\n### Description\r\n\r\n We have several Xamarin.Forms apps that are instrumented with the HockeyApp SDK to send crash reports. The build environment is Visual Studio 2017 on Windows 10 with local builds for android and remote builds to a Mac for iOS builds. We've recently gotten the android versions to build in such a way that they produce the needed .mSym files and have been successful in using mono-symbolicate to view the filenames and line numbers from stack traces sent to HockeyApp for production builds. For iOS, on the build server in the \"~/Library/Caches/Xamarin/mtbs/builds/<ourApp>/<someGuid>/bin/iPhone/Ad-Hoc/<ourApp>.mSYM\" directory, there are a bunch of sub-directories. But when we run mono-symbolicate, every sub-directory that it's looking for isn't found. So each line of the input stack trace produces an error \"Warning: MVID directory does not exist: <someSubDirectory>\". Example error line:\r\n\r\nWarning: MVID directory does not exist: /Users/derek.wheeler/Library/Caches/Xamarin/mtbs/builds/FieldSheet.iOS/b5f6c442719e634bde4b19906949135b/bin/iPhone/Ad-Hoc/FieldSheet.app.mSYM/1861ef8a8a87467c9c37202d50ff68b2\r\n  at FieldSheet.Pages.ConnectionSettingsPage.TestAppCrash () <0x100925550 + 0x0001f> in <1861ef8a8a87467c9c37202d50ff68b2#d25ebbac98c60d1ed35df16528c08be6>:0\r\n\r\nOf note too, we get a build warning that sounds like a problem producing the mSYM stuff:\r\n\r\n1>C:\\Program Files (x86)\\MSBuild\\Xamarin\\iOS\\Xamarin.iOS.Common.targets(777,3): warning : Aot files could not be copied to the destination directory /Users/derek.wheeler/Library/Caches/Xamarin/mtbs/builds/FieldSheet.iOS/b5f6c442719e634bde4b19906949135b/obj/iPhone/Ad-Hoc/mtouch-cache/64/Build/Msym/Msym/tmp: Could not start process.\r\n\r\nWe've tried a bunch of different build options but couldn't find a definitive source for this so we were basically just guessing. The latest version from the iOS csproj:\r\n\r\n <PropertyGroup Condition=\" '$(Configuration)|$(Platform)' == 'Ad-Hoc|iPhone' \">\r\n    <DebugType>pdbonly</DebugType>\r\n    <Optimize>True</Optimize>\r\n    <OutputPath>bin\\iPhone\\Ad-Hoc</OutputPath>\r\n    <ErrorReport>prompt</ErrorReport>\r\n    <WarningLevel>4</WarningLevel>\r\n    <ConsolePause>False</ConsolePause>\r\n    <MtouchArch>ARMv7, ARM64</MtouchArch>\r\n    <BuildIpa>True</BuildIpa>\r\n    <CodesignKey>...redacted...</CodesignKey>\r\n    <CodesignEntitlements>Entitlements.plist</CodesignEntitlements>\r\n    <GenerateSerializationAssemblies>Off</GenerateSerializationAssemblies>\r\n    <DebugSymbols>True</DebugSymbols>\r\n    <MonoSymbolArchive>True</MonoSymbolArchive>\r\n    <MtouchEnableSGenConc>false</MtouchEnableSGenConc>\r\n</PropertyGroup>\r\n\r\n### Steps to Reproduce\r\n\r\nsee Description\r\n\r\n### Expected Behavior\r\n\r\nmono-symbolicate should be able to show filenames and line numbers for Ad-Hoc iOS builds\r\n\r\n### Actual Behavior\r\n\r\nmono-symbolicate shows errors\r\n\r\n### Basic Information\r\n\r\n- Version with issue: Xamarin=4.8.0.760\r\n- Last known good version: This is the first time we're trying this. \r\n- IDE: Visual Studio Enterprise 2015, Version 14.0.25425.01 Update 3\r\n- Platform Target Frameworks: \r\n  - iOS:   Xamarin.iOS and Xamarin.Mac SDK = 11.6.1.4 (db807ec)\r\n\r\n### Screenshots\r\n\r\n### Reproduction Link\r\n\r\n"},{"Id":"7266027559","Type":"IssuesEvent","CreatedAt":"2018-02-19T20:17:41","Actor":"Paul-Brenner-Tangoe","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/1924","RelatedDescription":"Opened issue \"StackLayout with large HeightRequest overflows boundary of containing StackLayout\" (#1924) at xamarin/Xamarin.Forms","RelatedBody":"Bug report best practices: https://github.com/xamarin/Xamarin.Forms/wiki/Submitting-Issues\r\n\r\n### Description\r\nMigrating https://bugzilla.xamarin.com/show_bug.cgi?id=42727 here\r\n\r\nFrom the bugzilla report:\r\nI've got a Label in a StackLayout in a StackLayout:\r\n\r\nDue to the large HeightRequest the inner StackLayout fills the whole space available. But if we remove its child Label, the StackLayout grows beyond the size of its parent StackLayout.\r\n\r\nThe attached screenshot demonstrates the behavior.\r\n\r\nWe'd expect the HeightRequest to be evaluated independently of the containing Children.\r\n\r\nAlso as noted in the report, a button acts differently than a label, with a button added it overflows, while a label doesn't.\r\n\r\n### Steps to Reproduce\r\n\r\nRun app\r\nNote that the yellow stacklayout does not overflow\r\nComment out the label in stacklayout, or change it to be a button instead\r\nNote that the yellow stacklayout overflows\r\n\r\n### Expected Behavior\r\nStacklayout overflows\r\n\r\n### Actual Behavior\r\nStacklayout does not overflow\r\n\r\n### Basic Information\r\n\r\n- Version with issue: 2.5.0.280555\r\n- Last known good version: N/A\r\n- IDE: VS2017\r\n- Platform Target Frameworks: <!-- All that apply -->\r\n  - iOS:  yes\r\n  - Android: yes\r\n  - UWP:  not tested\r\n- Android Support Library Version: 25\r\n- Nuget Packages: just forms\r\n- Affected Devices: tested on Nexus 5x running Android 7, and iPhone 6s running iOS 9.3\r\n\r\n### Screenshots\r\nhttps://bugzilla.xamarin.com/attachment.cgi?id=16754\r\n\r\n### Reproduction Link\r\nhttps://www.dropbox.com/s/ruznx1levdzkdwi/stacklayoutheightsample.zip?dl=0\r\n\r\n"},{"Id":"7265656429","Type":"PullRequestEvent","CreatedAt":"2018-02-19T18:37:26","Actor":"rmarinho","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/1923","RelatedDescription":"Opened pull request \"[UITest] Fix tests for UITest package update\" (#1923) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\n\r\nSeems tests are failing because of failing to find the button on top of the page\r\n\r\n### PR Checklist ###\r\n\r\n- [ ] Has tests (if omitted, state reason in description)\r\n- [ ] Rebased on top of master at time of PR\r\n- [ ] Changes adhere to coding standard\r\n- [ ] Consolidate commits as makes sense"}],"ResultType":"GitHubEvent"},"Macios":{"Events":[{"Id":"7267222228","Type":"IssuesEvent","CreatedAt":"2018-02-20T03:22:23","Actor":"migueldeicaza","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/issues/3541","RelatedDescription":"Opened issue \"[AppKit] NSApplication.NextEvent expiration parameter should be nullable.\" (#3541) at xamarin/xamarin-macios","RelatedBody":"In the following AppKit definition, the expiration parameter can be null:\r\n\r\n```\r\n                [Export (\"nextEventMatchingMask:untilDate:inMode:dequeue:\"), Protected]\r\n                NSEvent NextEvent (nuint mask, NSDate expiration, string mode, bool deqFlag);\r\n```\r\n\r\nShould be \"[NullAllowed] NSData expiration\""},{"Id":"7267220428","Type":"IssuesEvent","CreatedAt":"2018-02-20T03:21:34","Actor":"migueldeicaza","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/issues/3540","RelatedDescription":"Opened issue \"[AppKit] NSApplication.NextEvent should have an override that takes a strongly typed NSRunLoopMode\" (#3540) at xamarin/xamarin-macios","RelatedBody":"\r\nThe current declaration takes a string, which we have to marshal, and internally, might not be compared for content equality, but for pointer equality.\r\n\r\n```\r\n                [Export (\"nextEventMatchingMask:untilDate:inMode:dequeue:\"), Protected]\r\n                NSEvent NextEvent (nuint mask, NSDate expiration, string mode, bool deqFlag);\r\n```\r\n\r\n"},{"Id":"7266786346","Type":"PullRequestEvent","CreatedAt":"2018-02-20T00:16:17","Actor":"spouliot","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/3532","RelatedDescription":"Merged pull request \"[linker] Take extra care to avoid 32/64 bits specific mscorlib.dll\" (#3532) at xamarin/xamarin-macios","RelatedBody":"We want to avoid separate `mscorlib.dll` assemblies for 32/64 bits so\nthe  architecture specific code for `n[u]int` and `nfloat` must be\npreserved in both cases.\n\nBecause a single, slightly larger, assembly is much smaller than two\n(slightly smaller) ones.\n\nThis is not a common situation since the extraneous preserved API are\noften used in the application (or 3rd party code) so, in most cases,\na single `mscorlib.dll` was already used.\n\nThis merely close the gap for some cases, like our `link all` application\nwhere this happened."},{"Id":"7266396496","Type":"PullRequestEvent","CreatedAt":"2018-02-19T22:01:18","Actor":"spouliot","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/3535","RelatedDescription":"Merged pull request \"Bump mono to head of 2017-12\" (#3535) at xamarin/xamarin-macios","RelatedBody":"Commit list for mono/mono:\n\n* mono/mono@177997b0632 [sdks] Fix for XA integration (#7108)\n* mono/mono@c8845164ad5 Merge more SDK changes from mono master. (#7090)\n* mono/mono@ac87945049b Revert \"Merge more SDK changes from mono master.\" (#7106)\n* mono/mono@5ef368bb1e3 [sdks] Fix for XA integration (#7092)\n* mono/mono@c67ec408791 Merge more SDK changes from mono master. (#7090)\n* mono/mono@fd1fd05f183 * Generalize commit 0c6932a985175a5cf0cbc59ffd3af4abf3db248e to support LDARG{0|1|2|3}, LDLOC{0|1|2|3}, LDARGS, LDLOCS, LDARG and LDLOC instead of LDLOC and LDLOCS. Improves generated code similar to issue #60945 (#7062)\n* mono/mono@936f7841d74 [ci] Disable monodoc tests on Windows for now\n* mono/mono@9a2f778a913 [coop] Disable failing tests on PR (#6472)\n* mono/mono@96eee2f9012 Disable some PngCodecTest that have trouble on CI right now\n* mono/mono@28e047fd35d [debugger] disable StepOutAsync test because it's flaky\n* mono/mono@0d51a8063be [sdks] Backport changes from master (#7084)\n* mono/mono@b232a3929b0 Bump aot file format version because of 7cac757e60cd61aa070f7e0fffca225364f58c0c. (#7083)\n\nDiff: https://github.com/mono/mono/compare/fbc4f0546d3994984f775b1a7ade5289ae6bfe92...177997b0632b3b2391ed62a5c2eb2ce6dc4bf9f0\n\nhttps://bugzilla.xamarin.com/show_bug.cgi?id=60945"},{"Id":"7266149952","Type":"PullRequestEvent","CreatedAt":"2018-02-19T20:51:57","Actor":"rolfbjarne","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/3539","RelatedDescription":"Opened pull request \"[registrar] Fix resolving linked away generic types. Fixes #3523.\" (#3539) at xamarin/xamarin-macios","RelatedBody":"Fixes #3523."},{"Id":"7266144271","Type":"PullRequestEvent","CreatedAt":"2018-02-19T20:50:24","Actor":"rolfbjarne","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/3531","RelatedDescription":"Merged pull request \"[mtouch] Rename temporary directories so the order assemblies move is clearer.\" (#3531) at xamarin/xamarin-macios","RelatedBody":"I implemented this myself, but I can never remember in which order assemblies\ngo from one directory to another during the build.\n\nSo number these temporary directories, so that even the most forgetful minds\ncan understand without having to remember anything."},{"Id":"7266012275","Type":"PullRequestEvent","CreatedAt":"2018-02-19T20:13:41","Actor":"mandel-macaque","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/3538","RelatedDescription":"Opened pull request \"[Tests] Change the guid of the test project to allow to use VS.\" (#3538) at xamarin/xamarin-macios","RelatedBody":""},{"Id":"7265959178","Type":"IssuesEvent","CreatedAt":"2018-02-19T19:59:03","Actor":"imhoffj","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/issues/3537","RelatedDescription":"Opened issue \"Cannot Install\" (#3537) at xamarin/xamarin-macios","RelatedBody":"### Steps to Reproduce\r\n\r\n1. macOS Sierra - 10.12.6\r\n2. Download Visual Studios for Mac, latest\r\n3. Double Click install\r\n\r\n### Expected Behavior\r\nStarts installation.\r\n### Actual Behavior\r\nSilently fails\r\n### Environment\r\n\r\nBy running the installer from terminal, receive the following. Any help is appreciated.\r\n\r\njustins-MacBook-Pro:~ justin$ /Volumes/Visual\\ Studio\\ for\\ Mac\\ Installer/Install\\ Visual\\ Studio\\ for\\ Mac.app/Contents/MacOS/Install_Visual_Studio ; exit;\r\n2018-02-19 12:44:59.252 Install_Visual_Studio[15016:5781250] \r\nUnhandled Exception:\r\nSystem.ArgumentException: Illegal characters in path.\r\n  at System.IO.Path.IsPathRooted (System.String path) [0x00037] in /Library/Frameworks/Xamarin.Mac.framework/Versions/2.10.0.113/src/mono/mcs/class/corlib/System.IO/Path.cs:544 \r\n  at System.Linq.Enumerable+WhereArrayIterator`1[TSource].MoveNext () [0x00031] in /Library/Frameworks/Xamarin.Mac.framework/Versions/2.10.0.113/src/mono/mcs/class/referencesource/System.Core/System/Linq/Enumerable.cs:189 \r\n  at MacInstaller.Utilities.AppendMissingPathsFromFile (System.Collections.Generic.List`1[T] paths, System.String filePath) [0x00078] in /Users/builder/data/lanes/5758/e32e17ec/source/installer/MacInstaller.Universal/Utilities.cs:170 \r\n  at MacInstaller.Utilities.AppendMissingPathsToPATH () [0x000cf] in /Users/builder/data/lanes/5758/e32e17ec/source/installer/MacInstaller.Universal/Utilities.cs:193 \r\n  at MacInstaller.MainClass.Main (System.String[] args) [0x00172] in /Users/builder/data/lanes/5758/e32e17ec/source/installer/MacInstaller.Universal/Main.cs:71 \r\n2018-02-19 12:45:02.170 Install_Visual_Studio[15016:5781250] \r\nUnhandled Exception:\r\nXamarin.Web.Installer.InstallException: Installation manifest file not found.\r\n  at Xamarin.Web.Installer.InstallationState.EnsureLists () [0x002ae] in /Users/builder/data/lanes/5758/e32e17ec/source/installer/Xamarin.Web.Installer/InstallationState.cs:411 \r\n  at Xamarin.Web.Installer.InstallationState.get_SoftwareItems () [0x00000] in /Users/builder/data/lanes/5758/e32e17ec/source/installer/Xamarin.Web.Installer/InstallationState.cs:144 \r\n  at MacInstaller.Utilities.ShutdownInstaller () [0x000e2] in /Users/builder/data/lanes/5758/e32e17ec/source/installer/MacInstaller.Universal/Utilities.cs:79 \r\n  at MacInstaller.MainClass.Main (System.String[] args) [0x00187] in /Users/builder/data/lanes/5758/e32e17ec/source/installer/MacInstaller.Universal/Main.cs:76 \r\n[ERROR] FATAL UNHANDLED EXCEPTION: Xamarin.Web.Installer.InstallException: Installation manifest file not found.\r\n  at Xamarin.Web.Installer.InstallationState.EnsureLists () [0x002ae] in /Users/builder/data/lanes/5758/e32e17ec/source/installer/Xamarin.Web.Installer/InstallationState.cs:411 \r\n  at Xamarin.Web.Installer.InstallationState.get_SoftwareItems () [0x00000] in /Users/builder/data/lanes/5758/e32e17ec/source/installer/Xamarin.Web.Installer/InstallationState.cs:144 \r\n  at MacInstaller.Utilities.ShutdownInstaller () [0x000e2] in /Users/builder/data/lanes/5758/e32e17ec/source/installer/MacInstaller.Universal/Utilities.cs:79 \r\n  at MacInstaller.MainClass.Main (System.String[] args) [0x00187] in /Users/builder/data/lanes/5758/e32e17ec/source/installer/MacInstaller.Universal/Main.cs:76 \r\nlogout\r\nSaving session...\r\n...copying shared history...\r\n...saving history...truncating history files...\r\n...completed.\r\nDeleting expired sessions...1 completed.\r\n\r\n\r\nCurrent environment has XCode and Android studio installed\r\n\r\n\r\n"},{"Id":"7265849473","Type":"PullRequestEvent","CreatedAt":"2018-02-19T19:29:20","Actor":"rolfbjarne","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/3536","RelatedDescription":"Opened pull request \"[mtouch/mmp] Fix tracking of whether the static registrar should run again or not. Fixes #641. (#3534)\" (#3536) at xamarin/xamarin-macios","RelatedBody":"* [tests] Improve debug spew for the RebuildTest_WithExtensions test.\n\n* [mtouch/mmp] Store/load if the dynamic registrar is removed or not into the cached link results.\n\nStore/load if the dynamic registrar is removed or not into the cached link\nresults, so that we generate the correct main.m even if cached linker results\nare used.\n\n* [mtouch/mmp] The static registrar must not execute if we're loading cached results from the linker.\n\nThe static registrar must not execute if we're loading cached results from the\nlinker, because the static registrar needs information from the linker that's\nnot restored from the cache.\n\n* [mtouch/mmp] Share Touch code.\n\n* [mtouch/mmp] Make it possible to touch inexistent files (to create them).\n\n* [mtouch/mmp] Fix tracking of whether the static registrar should run again or not.\n\nThe recent changes to support optimizing away the dynamic registrar caused the\nXamarin.MTouch.RebuildTest_WithExtensions test to regress.\n\nThe problem\n-----------\n\n* The linker now collects and stores information the static registrar needs.\n* This information is not restored from disk when the linker realizes that it\n  can reload previously linked assemblies instead of executing again.\n* The static registrar runs again (for another reason).\n* The information the static registrar needs isn't available, and incorrect\n  output follows.\n\nSo fix 1: show an error if the static registrar runs when the linker loaded\ncached results.\n\nThe exact scenario the test ran into is this:\n\n* 1st build: everything is new and everything is built.\n* 2nd build: contents of .exe changes, the linker runs again, the static\n  registrar runs again, but sees that the generated output didn't change, so\n  it doesn't write the new content to disk (this is an optimization to avoid\n  compiling the registrar.m file again unless needed).\n* 3rd build: only the .exe timestamp changes, the linker sees nothing changes\n  in the contents of the .exe and loads the previously linked assemblies from\n  disk, the static registrar sees that the .exe's timestamp is newer than\n  registrar.m's timestamp and run again, but doesn't produce the right result\n  because it doesn't have the information it needs.\n\nConsidered solutions\n--------------------\n\n1. Only track timestamps, not file contents. This is not ideal, since it will\n   result in more work done: in particular for the case above, it would add a\n   registrar.m compilation in build #2, and linker rerun + static registrar\n   rerun + registrar.m compilation + final native link in build #3.\n2. Always write the output of the static registrar, even if it hasn't changed.\n   This is not ideal either, since it will also result in more work done: for\n   the case above, it would add a registrar.m compilation + final native link\n   in build #3.\n3. Always write the output of the static registrar, but track if it changed or\n   not, and if it didn't, just touch registrar.o instead of recompiling it.\n   This only means the final native link in build #3 is added (see #5 for why\n   this is worse than it sounds).\n4. Always write the output of the static registrar, but track it it changed or\n   not, and if it didn't, just touch registrar.o instead of recompiling it,\n   and track that too, so that the final native link in build #3 isn't needed\n   anymore. Unfortunately this may result in incorrect behavior, because now\n   the msbuild tasks will detect that the executable has changed, and may run\n   dsymutil + strip again. The executable didn't actually change, which means\n   it would be the previously stripped executable, and thus we'd end up with\n   an empty .dSYM because we ran dsymtil on an already stripped executable.\n5. Idea #4, but write the output of the final link into a temporary directory\n   instead of the .app, so that we could track whether we should update the\n   executable in the .app or not. This is not optimal either, because\n   executables can be *big* (I've seen multi-GB tvOS bitcode executables), and\n   extra copies of such files should not be taken lightly.\n6. Idea #4, but tell the MSBuild tasks that dsymutil/strip doesn't need to be\n   rerun even if the timestamp of the executable changed. This might actually\n   work, but now the solution's become quite complex.\n\nImplemented solution\n--------------------\n\nUse stamp files to detect whether a file is up-to-date or not.\n\nIn particular:\n\n* When we don't write to a file because the new contents are identical to the\n  old contents, we now touch a .stamp file. This stamp file means \"the\n  accompanying file was determined to be up-to-date when the stamp was\n  touched.\"\n* When checking whether a file is up-to-date, also check for the presence of a\n  .stamp file, and if it exists, use the highest timestamp between the stamp\n  file and the actual file.\n\nNow the test scenario becomes:\n\n* 1st build: everything is new and everything is built.\n* 2nd build: contents of .exe changes, the linker runs again, the static\n  registrar runs again, but sees that the generated output didn't change, so\n  it doesn't write the new content to disk, but it creates a registrar.m.stamp\n  file to indicate the point in time when registrar.m was considered up-to-\n  date.\n* 3rd build: only the .exe timestamp changes, the linker sees nothing changes\n  in the contents of the .exe and loads the previously linked assemblies from\n  disk, the static registrar sees that the .exe's timestamp is *older* than\n  registrar.m.stamp's timestamp and doesn't run again.\n\nWe only use the stamp file for source code (registrar.[m|h], main.[m|h],\npinvokes.[m|h]), since using it every time has too much potential for running\ninto other problems (for instance we should never create .stamp files inside\nthe .app).\n\nFixes these test failures:\n\n    1) Failed : Xamarin.MTouch.RebuildTest_WithExtensions(\"single\",\"\",False,System.String[])\n      single\n      Expected: <empty>\n      But was:  < \"/Users/builder/data/lanes/5746/4123bf7e/source/xamarin-macios/tests/mtouch/bin/Debug/tmp-test-dir/Xamarin.Tests.BundlerTool.CreateTemporaryDirectory371/testApp.app/testApp is modified, timestamp: 2/15/2018 3:04:11 PM > 2/15/2018 3:04:09 PM\" >\n\n    2) Failed : Xamarin.MTouch.RebuildTest_WithExtensions(\"dual\",\"armv7,arm64\",False,System.String[])\n      dual\n      Expected: <empty>\n      But was:  < \"/Users/builder/data/lanes/5746/4123bf7e/source/xamarin-macios/tests/mtouch/bin/Debug/tmp-test-dir/Xamarin.Tests.BundlerTool.CreateTemporaryDirectory375/testApp.app/testApp is modified, timestamp: 2/15/2018 3:06:03 PM > 2/15/2018 3:06:00 PM\" >\n\n    3) Failed : Xamarin.MTouch.RebuildTest_WithExtensions(\"llvm\",\"armv7+llvm\",False,System.String[])\n      llvm\n      Expected: <empty>\n      But was:  < \"/Users/builder/data/lanes/5746/4123bf7e/source/xamarin-macios/tests/mtouch/bin/Debug/tmp-test-dir/Xamarin.Tests.BundlerTool.CreateTemporaryDirectory379/testApp.app/testApp is modified, timestamp: 2/15/2018 3:07:14 PM > 2/15/2018 3:07:12 PM\" >\n\n    4) Failed : Xamarin.MTouch.RebuildTest_WithExtensions(\"debug\",\"\",True,System.String[])\n      debug\n      Expected: <empty>\n      But was:  < \"/Users/builder/data/lanes/5746/4123bf7e/source/xamarin-macios/tests/mtouch/bin/Debug/tmp-test-dir/Xamarin.Tests.BundlerTool.CreateTemporaryDirectory383/testApp.app/testApp is modified, timestamp: 2/15/2018 3:08:16 PM > 2/15/2018 3:08:13 PM\" >\n\n    5) Failed : Xamarin.MTouch.RebuildTest_WithExtensions(\"single-framework\",\"\",False,System.String[])\n      single-framework\n      Expected: <empty>\n      But was:  < \"/Users/builder/data/lanes/5746/4123bf7e/source/xamarin-macios/tests/mtouch/bin/Debug/tmp-test-dir/Xamarin.Tests.BundlerTool.CreateTemporaryDirectory387/testApp.app/testApp is modified, timestamp: 2/15/2018 3:09:18 PM > 2/15/2018 3:09:16 PM\" >\n\nFixes https://github.com/xamarin/maccore/issues/641"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"965632571618062337","CreatedAt":"2018-02-19T17:02:00+00:00","UserScreenname":"xamarinhq","Text":"Curated resources on getting up and started quickly with #XamarinForms from Program Manager @davidortinau: https://t.co/amiCZn15ns","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":41,"FavoriteCount":15,"RawContent":null},{"Id":"965372405307904001","CreatedAt":"2018-02-18T23:48:11+00:00","UserScreenname":"xamarinhq","Text":"Start shipping better apps, faster with this curated list of #VSAppCenter resources: https://t.co/jU0cnONnM8 https://t.co/jYvtDxgwWV","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":48,"FavoriteCount":18,"RawContent":null},{"Id":"965038410061754371","CreatedAt":"2018-02-18T01:41:01+00:00","UserScreenname":"xamarinhq","Text":"Minimizes the complexity of video playback across Android, iOS, and Windows environments to deliver rich media expe… https://t.co/RWk7OAQZFR","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":117,"FavoriteCount":43,"RawContent":null},{"Id":"964574735530065920","CreatedAt":"2018-02-16T18:58:32+00:00","UserScreenname":"xamarinhq","Text":"Extending #XamarinForms controls functionality with Behaviors: https://t.co/8arBeS4lBP https://t.co/7nB0W3r0xF","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":58,"FavoriteCount":21,"RawContent":null},{"Id":"964541888152920064","CreatedAt":"2018-02-16T16:48:01+00:00","UserScreenname":"xamarinhq","Text":"Adding sound to a #XamarinForms app using the SimpleAudioPlayer plugin: https://t.co/r8NSFRpl33 https://t.co/WXW0TRw6LE","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":41,"FavoriteCount":10,"RawContent":null},{"Id":"964239391743979520","CreatedAt":"2018-02-15T20:46:00+00:00","UserScreenname":"xamarinhq","Text":"Try out the just-released Xamarin.iOS and Xcode 9.3 Web Preview: https://t.co/2zZi61OBFp","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":30,"FavoriteCount":16,"RawContent":null},{"Id":"964183272367579136","CreatedAt":"2018-02-15T17:03:00+00:00","UserScreenname":"xamarinhq","Text":"Don't miss next week's webinar with @XamarinU on building your first intelligent app with #Xamarin and Microsoft… https://t.co/Dn5JtYz3iz","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":32,"FavoriteCount":17,"RawContent":null},{"Id":"963815851416834049","CreatedAt":"2018-02-14T16:43:00+00:00","UserScreenname":"xamarinhq","Text":"Adaptive UI with #XamarinForms: https://t.co/XZYix2Cv0j","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":60,"FavoriteCount":22,"RawContent":null},{"Id":"963459759562199040","CreatedAt":"2018-02-13T17:08:01+00:00","UserScreenname":"xamarinhq","Text":"CoreML Programming with Xamarin.Mac and F#: https://t.co/vI7JuxjkWa https://t.co/mH5kYVNNvT","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":50,"FavoriteCount":19,"RawContent":null},{"Id":"963145186711830528","CreatedAt":"2018-02-12T20:18:01+00:00","UserScreenname":"xamarinhq","Text":"Add a search bar to your iOS 11 #Xamarin apps: https://t.co/T9OdiJFhmH https://t.co/ZG5Y2IRf3r","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":58,"FavoriteCount":20,"RawContent":null},{"Id":"963094603065937920","CreatedAt":"2018-02-12T16:57:01+00:00","UserScreenname":"xamarinhq","Text":"Get started with the open source suite of SmartHotel360 reference #XamarinForms, Xamarin.iOS, and… https://t.co/5bwxwaCxyV","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":129,"FavoriteCount":45,"RawContent":null},{"Id":"962828622875815936","CreatedAt":"2018-02-11T23:20:06+00:00","UserScreenname":"xamarinhq","Text":"Our own @jamesmontemagno shows you how to leverage the #Xamarin Live Player with your iOS applications:… https://t.co/389iYhDt9o","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":91,"FavoriteCount":42,"RawContent":null},{"Id":"962480803748999168","CreatedAt":"2018-02-11T00:18:00+00:00","UserScreenname":"xamarinhq","Text":"Get a quick overview of the latest updates to the Xamarin iOS designer, including a new toolbar for managing trait… https://t.co/eJkPovjm0G","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":46,"FavoriteCount":16,"RawContent":null},{"Id":"962049464084062208","CreatedAt":"2018-02-09T19:44:00+00:00","UserScreenname":"xamarinhq","Text":"This week on the @XamarinPodcast, @JamesMontemagno and @pierceboggan talk rapid UI prototyping with Ink to Code, me… https://t.co/FTH39xKI1K","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":49,"FavoriteCount":20,"RawContent":null},{"Id":"962005422142967809","CreatedAt":"2018-02-09T16:49:00+00:00","UserScreenname":"xamarinhq","Text":"Learn how to build a real-time #XamarinForms communication app with #WebSocket: https://t.co/u3wk0Fi4MU","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":94,"FavoriteCount":36,"RawContent":null},{"Id":"961696657250443269","CreatedAt":"2018-02-08T20:22:05+00:00","UserScreenname":"xamarinhq","Text":"Extend your #Xamarin app's reach by adding language support with the Multilingual App Toolkit:… https://t.co/pUb6M2pQLn","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":85,"FavoriteCount":33,"RawContent":null},{"Id":"961642559880749056","CreatedAt":"2018-02-08T16:47:07+00:00","UserScreenname":"xamarinhq","Text":"Expand your app horizons by building your first #tvOS app with #Xamarin: https://t.co/A5jZpraqm1 https://t.co/utcp887bgL","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":31,"FavoriteCount":11,"RawContent":null},{"Id":"961326059965870080","CreatedAt":"2018-02-07T19:49:27+00:00","UserScreenname":"xamarinhq","Text":"Register now for our upcoming webinar with @XamarinU on building your first intelligent app with #Xamarin and Micro… https://t.co/lEsIH9mU1Q","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":61,"FavoriteCount":41,"RawContent":null},{"Id":"961281908750635008","CreatedAt":"2018-02-07T16:54:01+00:00","UserScreenname":"xamarinhq","Text":"Get started with even easier iOS app provisioning in #VS4Mac: https://t.co/vdtAckbzWn https://t.co/48PO2bI3Mt","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":47,"FavoriteCount":19,"RawContent":null}]}},"RunOn":"2018-02-20T05:30:38.1895075Z","RunDurationInMilliseconds":4662}