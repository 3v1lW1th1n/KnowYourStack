{"Data":{"Blog":{"FeedItems":[{"Title":"Handling a new era in the Japanese calendar in .NET","PublishedOn":"2018-11-14T20:30:13+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"Typically, calendar eras represent long time periods. In the Gregorian calendar, for example, the current era spans (as of this year) 2,018 years. In the Japanese calendar, however, a new era begins...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/11/14/handling-a-new-era-in-the-japanese-calendar-in-net/","RawContent":null},{"Title":".NET Framework November 2018 Security and Quality Rollup","PublishedOn":"2018-11-14T00:24:37+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, we are releasing the November 2018 Security and Quality Rollup. Security No new security fixes. See .NET Framework September 2018 Security and Quality Rollup for the latest security updates....","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/11/13/net-framework-november-2018-security-and-quality-rollup/","RawContent":null},{"Title":".NET Core tooling update for Visual Studio 2017 version 15.9","PublishedOn":"2018-11-13T18:09:43+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"Starting with Visual Studio 2017 version 15.9, we’ve changed how the Visual Studio tooling for .NET consumes .NET Core SDKs. Prior to this change, installing a preview version of the .NET Core SDK...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/11/13/net-core-tooling-update-for-visual-studio-2017-version-15-9/","RawContent":null},{"Title":"Cross-platform Time Zones with .NET Core","PublishedOn":"2018-11-13T18:00:21+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"Developing applications that span multiple operating systems in .NET Core while working with Time Zone information can lead to unexpected results for developers not familiar with the differences in...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/11/13/cross-platform-time-zones-with-net-core/","RawContent":null},{"Title":"Building C# 8.0","PublishedOn":"2018-11-13T00:00:02+00:00","CommentsCount":143,"FacebookCount":0,"Summary":"Building C# 8.0 The next major version of C# is C# 8.0. It&#8217;s been in the works for quite some time, even as we built and shipped the minor releases C# 7.1, 7.2 and 7.3, and I&#8217;m quite...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/11/12/building-c-8-0/","RawContent":null},{"Title":"Announcing ML.NET 0.7 (Machine Learning .NET)","PublishedOn":"2018-11-08T20:57:16+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"We&#8217;re excited to announce today the release of ML.NET 0.7 &#8211; the latest release of the cross-platform and open source machine learning framework for .NET developers (ML.NET 0.1 was released...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/11/08/announcing-ml-net-0-7-machine-learning-net/","RawContent":null},{"Title":"Understanding the Whys, Whats, and Whens of ValueTask","PublishedOn":"2018-11-07T18:00:31+00:00","CommentsCount":14,"FacebookCount":0,"Summary":"The .NET Framework 4 saw the introduction of the System.Threading.Tasks namespace, and with it the Task class. This type and the derived Task&#60;TResult&#62; have long since become a staple of .NET...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/11/07/understanding-the-whys-whats-and-whens-of-valuetask/","RawContent":null},{"Title":"Announcing .NET Standard 2.1","PublishedOn":"2018-11-05T17:42:38+00:00","CommentsCount":107,"FacebookCount":0,"Summary":"Since we shipped .NET Standard 2.0 about a year ago, we&#8217;ve shipped two updates to .NET Core 2.1 and are about to release .NET Core 2.2. It&#8217;s time to update the standard to include some of...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/11/05/announcing-net-standard-2-1/","RawContent":null},{"Title":"Announcing .NET Framework 4.8 Early Access build 3673","PublishedOn":"2018-10-30T19:27:39+00:00","CommentsCount":19,"FacebookCount":0,"Summary":"We are happy to share the next Early Access build for the .NET Framework 4.8. This includes an updated .NET 4.8 runtime as well as the .NET 4.8 Developer Pack (a single package that bundles the .NET...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/10/30/announcing-net-framework-4-8-early-access-build-3673/","RawContent":null},{"Title":"Bringing .NET application performance analysis to Linux","PublishedOn":"2018-10-24T21:36:02+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"Both the Windows and Linux ecosystems have a swath of battle-hardened performance analysis and investigation tools. But up until recently, developers and platform engineers could use none of these...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/10/24/bringing-net-application-performance-analysis-to-linux/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"8578587104","Type":"PullRequestEvent","CreatedAt":"2018-11-13T05:53:19","Actor":"leastprivilege","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/117","RelatedDescription":"Opened pull request \"Update identityserver.md\" (#117) at dotnet/foundation","RelatedBody":"significant whitespace"},{"Id":"8578321898","Type":"PullRequestEvent","CreatedAt":"2018-11-13T04:22:33","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/114","RelatedDescription":"Merged pull request \"Update identityserver.md\" (#114) at dotnet/foundation","RelatedBody":""},{"Id":"8573927252","Type":"PullRequestEvent","CreatedAt":"2018-11-12T13:30:25","Actor":"scottbrady91","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/116","RelatedDescription":"Opened pull request \"Update to IdentityManager project\" (#116) at dotnet/foundation","RelatedBody":"My employer and I have recently taken over the IdentityManager project from Dom & Brock. I've updated the IdentityManager page to reflect this and the newer version of the core repo."},{"Id":"8573265026","Type":"PullRequestEvent","CreatedAt":"2018-11-12T11:25:41","Actor":"leastprivilege","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/115","RelatedDescription":"Opened pull request \"Create identitymodel.md\" (#115) at dotnet/foundation","RelatedBody":""},{"Id":"8573235551","Type":"PullRequestEvent","CreatedAt":"2018-11-12T11:20:18","Actor":"leastprivilege","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/114","RelatedDescription":"Opened pull request \"Update identityserver.md\" (#114) at dotnet/foundation","RelatedBody":""},{"Id":"8520090559","Type":"PullRequestEvent","CreatedAt":"2018-11-01T16:20:08","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/113","RelatedDescription":"Merged pull request \"Update logo for couchbase-lite in projects.json\" (#113) at dotnet/foundation","RelatedBody":"Uses a working link to the logo.\r\n\r\nResolves https://github.com/dotnet/dotnetfoundation-website/issues/65\r\n\r\nFix can be verified by copying/pasting the URL into a browser."},{"Id":"8448824845","Type":"PullRequestEvent","CreatedAt":"2018-10-19T12:44:07","Actor":"SeanKilleen","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/113","RelatedDescription":"Opened pull request \"Update logo for couchbase-lite in projects.json\" (#113) at dotnet/foundation","RelatedBody":"Uses a working link to the logo.\r\n\r\nResolves https://github.com/dotnet/dotnetfoundation-website/issues/65"},{"Id":"8341294365","Type":"IssuesEvent","CreatedAt":"2018-09-29T02:45:47","Actor":"athinboy","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/issues/112","RelatedDescription":"Opened issue \"Suggest: key  F12  go to source code of dotnetcore  rather then metadata\" (#112) at dotnet/foundation","RelatedBody":"Apology for my poor english!\r\n\r\nI have change to Java due to the boss's decision .   I think dotnet  need a big change. In China, more and more dotnet project go to die,  but new java project continuously increase!\r\n\r\nI suggest:key  F12  go to source code of dotnetcore  rather then metadata(e.g.    ***.dll.source.zip \\****.exe.source.zip),   maybe there is already done,but i don't know. \r\n\r\nthanks!\r\n"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"8582735181","Type":"IssuesEvent","CreatedAt":"2018-11-13T17:44:44","Actor":"leecow","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/91","RelatedDescription":"Opened issue \".NET Core November Update - 2.1.6 and SDK 2.1.500\" (#91) at dotnet/announcements","RelatedBody":"# November 2018 .NET Updates\r\n\r\nThe following .NET updates were released in November 2018. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Core\r\n\r\n* [.NET Core November 2018 (2.1.6 and SDK 2.1.500) Update release notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.6/2.1.6.md)\r\n\r\nA [discussion issue](https://github.com/dotnet/core/issues/2053) is available for questions or feedback about this release.\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n* [October 2018[(https://github.com/dotnet/announcements/issues/89)\r\n* [September 2018](https://github.com/dotnet/announcements/issues/84)\r\n* [August 2018](https://github.com/dotnet/announcements/issues/79)\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)"}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"8610059562","Type":"PullRequestEvent","CreatedAt":"2018-11-19T02:38:31","Actor":"benaadams","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/21076","RelatedDescription":"Opened pull request \"Vectorize string.IndexOf(..., StringComparison.Ordinal)\" (#21076) at dotnet/coreclr","RelatedBody":"For\r\n\r\n```csharp\r\n// where comparisonType == StringComparison.Ordinal \r\nstring.IndexOf(string value, StringComparison comparisonType)\r\nstring.IndexOf(string value, int startIndex, StringComparison comparisonType)\r\nstring.IndexOf(string value, int startIndex, int count, StringComparison comparisonType)\r\n\r\n// where T : char\r\nIndexOf<T>(this Span<T> span, ReadOnlySpan<T> value)\r\nIndexOf<T>(this ReadOnlySpan<T> span, ReadOnlySpan<T> value)\r\n\r\n// where comparisonType == StringComparison.Ordinal\r\nIndexOf(this ReadOnlySpan<char> span, ReadOnlySpan<char> value, StringComparison comparisonType)\r\n\r\n// where options = CompareOptions.Ordinal \r\nCompareInfo.IndexOf(string source, string value, CompareOptions options)\r\nCompareInfo.IndexOf(string source, string value, int startIndex, CompareOptions options)\r\nCompareInfo.IndexOf(string source, string value, int startIndex, int count, CompareOptions options)\r\n```\r\n\r\nResolves https://github.com/dotnet/coreclr/issues/19672"},{"Id":"8609297256","Type":"PullRequestEvent","CreatedAt":"2018-11-18T20:08:32","Actor":"AaronRobinsonMSFT","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/20163","RelatedDescription":"Merged pull request \"Add headers to all md*, v3binder*, and ceefgen vcxproj\" (#20163) at dotnet/coreclr","RelatedBody":"Work toward #14884"}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"8609570950","Type":"IssuesEvent","CreatedAt":"2018-11-18T22:40:49","Actor":"ChaosCA","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/10359","RelatedDescription":"Opened issue \"dotnet can never find dependencies\" (#10359) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\nHave a project with a dependency, in my case `Ben.Demystifier.dll`\r\n`dotnet publish -c Release -o out`\r\nMove the compiled project to another machine with the dotnet runtime\r\n`dotnet mydll.dll`\r\n\r\n## Expected  behavior\r\nProject runs fine.\r\n\r\n## Actual behavior\r\n```\r\nError:\r\n  An assembly specified in the application dependencies manifest (mydll.deps.json) was not found:\r\n    package: 'Ben.Demystifier', version: '0.1.0'\r\n    path: 'lib/netstandard2.0/Ben.Demystifier.dll'\r\n```\r\n\r\nI have tried moving that dll everywhere. I have moved it to the same dir under the path specified above, but it's unable to find it every time.\r\n\r\nWhere is this path set and why can't it find my dll?\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n```\r\nHost (useful for support):\r\n  Version: 2.1.6\r\n  Commit:  3f4f8eebd8\r\n\r\n.NET Core SDKs installed:\r\n  No SDKs were found.\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.NETCore.App 2.1.6 [/usr/share/dotnet/shared/Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\n\r\n\r\n\r\n"},{"Id":"8609025015","Type":"IssuesEvent","CreatedAt":"2018-11-18T17:36:05","Actor":"lukasvosyka","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/10358","RelatedDescription":"Opened issue \"Help needed: Using VSTS CI to build and package shared libraries that project reference themselves\" (#10358) at dotnet/cli","RelatedBody":"Hi,\r\n\r\nI am wondering what the intended approach is, when I want to have multiple projects within a repository being built and packaged using nuget (or dotnet pack) that have project references, but are not built all at the same time, but on a per project base. An important side note might be that I want to have the *build number being part of the nuget package version*.\r\n\r\nWe have one Git repository (dotnetShared) that contains many shared library projects. Some of those projects have project references to other projects. Let say the repository looks like the following:\r\n\r\n/dotnetShared\r\n/dotnetShared.Models\r\n/dotnetShared.Db\r\n/dotnetShared.Messaging\r\netc.\r\n\r\nNow lets say /dotnetShared/dotnetShared.csproj has following contents in regards to references:\r\n\r\n`\r\n<ItemGroup>\r\n    <ProjectReference Include=\"..\\dotnetShared.Models\\dotnetShared.Models.csproj\" />\r\n    <ProjectReference Include=\"..\\dotnetShared.Db\\dotnetShared.Db.csproj\" />\r\n</ItemGroup>\r\n`\r\n\r\nI want to create a VSTS build definition for each of those projects using Path Filters, so only projects get built and packages, that have changed.\r\n\r\nMy build definition in VSTS looks like this\r\n- Exec Powershell script to read major and minor version from csproj and append VSTS $buildnumber) and set the new $(buildnumber).\r\n- dotnet build\r\n- dotnet test\r\n- dotnet pack\r\n- dotnet push\r\n\r\nNow I realized that when, for example, the dotnetShared project builds, the resulting dotnetShared nuget package (let say in version 1.0.6435) has dependencies to\r\n- dotnetShared.Models version >= 1.0.6435\r\n- dotnetShared.Db version >= 1.0.6435\r\n\r\nBut this is wrong, because for example the latest dotnetShared.Models version that is available via nuget is 1.0.6400 (because changes to that project are some time ago and has not changed, nor has dotnetShared.Db). \r\n\r\nThe only way I see it working currently is that the whole repository projects get built together and pushed together, but this is sub-optimal. \r\n\r\nI could not find any documention about how to tackle this very scenario. I tried looking into aspnet/extensions repository because I thought they might have the same problem there but it looked like they also have to do some MSBuild stuff.\r\n\r\nI am wondering if someone could point me in the right direction on either documentation or how to do this? As I said, the package version is determined during VSTS CI build and ideally the project references get looked up in my package feed what the latest version is and set as dependency.\r\n\r\nThanks for any info about this!\r\n\r\nCheers,\r\nLukas\r\n\r\n\r\n\r\n"}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"8608544477","Type":"PullRequestEvent","CreatedAt":"2018-11-18T13:11:16","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/974","RelatedDescription":"Merged pull request \"Update dependency files\" (#974) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18567.1\r\n\r\n"},{"Id":"8608527951","Type":"PullRequestEvent","CreatedAt":"2018-11-18T13:01:10","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/974","RelatedDescription":"Opened pull request \"Update dependency files\" (#974) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18567.1\r\n\r\n"},{"Id":"8607067179","Type":"IssuesEvent","CreatedAt":"2018-11-17T18:30:40","Actor":"AaronRobinsonMSFT","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/973","RelatedDescription":"Opened issue \"Consider adding IDispatchConstantAttribute\" (#973) at dotnet/standard","RelatedBody":"The `IUnknownConstantAttribute` is in netstandard, but the related `IDispatchConstantAttribute` is not. We should consider whether this attribute should be added for consistency.\r\n\r\nSee dotnet/corefx#33559"},{"Id":"8606561246","Type":"PullRequestEvent","CreatedAt":"2018-11-17T13:26:20","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/972","RelatedDescription":"Merged pull request \"Update dependency files\" (#972) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18566.6\r\n\r\n"},{"Id":"8606522234","Type":"PullRequestEvent","CreatedAt":"2018-11-17T13:01:12","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/972","RelatedDescription":"Opened pull request \"Update dependency files\" (#972) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18566.6\r\n\r\n"},{"Id":"8602147237","Type":"PullRequestEvent","CreatedAt":"2018-11-16T13:16:27","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/971","RelatedDescription":"Merged pull request \"Update dependency files\" (#971) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18565.9\r\n\r\n"},{"Id":"8602071401","Type":"PullRequestEvent","CreatedAt":"2018-11-16T13:01:21","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/971","RelatedDescription":"Opened pull request \"Update dependency files\" (#971) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18565.9\r\n\r\n"}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"8610296254","Type":"IssuesEvent","CreatedAt":"2018-11-19T04:06:52","Actor":"ahsonkhan","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/33585","RelatedDescription":"Opened issue \"Refactor duplicate code between single and multi-segment for Utf8JsonReader (where possible)\" (#33585) at dotnet/corefx","RelatedBody":"Multi-segment support added in https://github.com/dotnet/corefx/pull/33462."},{"Id":"8610293519","Type":"IssuesEvent","CreatedAt":"2018-11-19T04:05:44","Actor":"ahsonkhan","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/33584","RelatedDescription":"Opened issue \"Improve multi-segment Utf8JsonReader test coverage for ReadOnlySequence\" (#33584) at dotnet/corefx","RelatedBody":"In particular:\r\n- Add more tests for various sequence segment sizes with invalid JSON.\r\n- Add tests with valid comments that can be skipped or allowed.\r\n\r\nBorrow the tests for the span-based Utf8JsonReader as a starting point.\r\n\r\nMulti-segment support added here: https://github.com/dotnet/corefx/pull/33462"},{"Id":"8610288090","Type":"IssuesEvent","CreatedAt":"2018-11-19T04:03:26","Actor":"ahsonkhan","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/33518","RelatedDescription":"Closed issue \"Consider moving the use of the allocation free container into CustomUncheckedBitArray \" (#33518) at dotnet/corefx","RelatedBody":"For context:\r\nhttps://github.com/dotnet/corefx/pull/33378#discussion_r233725658\r\n\r\ncc @jkotas"},{"Id":"8610103443","Type":"IssuesEvent","CreatedAt":"2018-11-19T02:54:12","Actor":"danmosemsft","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/33430","RelatedDescription":"Closed issue \"Inconsistent null checks in Array.Copy\" (#33430) at dotnet/corefx","RelatedBody":"```c#\r\n        public static void Copy(Array sourceArray, Array destinationArray, int length)\r\n        {\r\n            if (sourceArray == null)\r\n                ThrowHelper.ThrowArgumentNullException(ExceptionArgument.sourceArray);\r\n            if (destinationArray == null)\r\n                ThrowHelper.ThrowArgumentNullException(ExceptionArgument.destinationArray);\r\n\r\n            Copy(sourceArray, sourceArray.GetLowerBound(0), destinationArray, destinationArray.GetLowerBound(0), length, false);\r\n        }\r\n\r\n        public static void Copy(Array sourceArray, int sourceIndex, Array destinationArray, int destinationIndex, int length)\r\n        {\r\n            Copy(sourceArray, sourceIndex, destinationArray, destinationIndex, length, false);\r\n        }\r\n\r\n        [MethodImplAttribute(MethodImplOptions.InternalCall)]\r\n        internal static extern void Copy(Array sourceArray, int sourceIndex, Array destinationArray, int destinationIndex, int length, bool reliable);\r\n```\r\n\r\nIf I call the 3 param overload with a null array I get a message pointing to the bad argument. If I call the 5 param overload I get the runtime message `System.ArgumentNullException: 'Value cannot be null.'`.\r\n\r\nI guess I don't care much about this. It's nice I can call the 5 param overload if I want to avoid the extra null checks."},{"Id":"8610073182","Type":"PullRequestEvent","CreatedAt":"2018-11-19T02:43:13","Actor":"dotnet-maestro-bot","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/33583","RelatedDescription":"Opened pull request \"Update CoreClr, CoreSetup to preview-27119-01, preview-27118-04, respectively (master)\" (#33583) at dotnet/corefx","RelatedBody":""},{"Id":"8609828612","Type":"PullRequestEvent","CreatedAt":"2018-11-19T01:04:57","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/33575","RelatedDescription":"Merged pull request \"Update CoreClr, CoreFx, CoreFxOptimizationData, CoreSetup to preview-27118-03, preview.18568.4, master-20181118-0046, preview-27118-02, respectively (master)\" (#33575) at dotnet/corefx","RelatedBody":""},{"Id":"8609661698","Type":"IssuesEvent","CreatedAt":"2018-11-18T23:32:40","Actor":"terrajobst","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/33553","RelatedDescription":"Closed issue \"Reconsider recommended casing/naming for tuple members in corefx.\" (#33553) at dotnet/corefx","RelatedBody":"https://github.com/dotnet/corefx/pull/26582 Added a new 'Zip' extension for IEnumerables with teh following signature:\r\n\r\n```c#\r\npublic static IEnumerable<(TFirst First,TSecond Second)> Zip<TFirst, TSecond>(\r\n    this IEnumerable<TFirst> first, IEnumerable<TSecond> second)\r\n```\r\n\r\nThe capitalization of the tuple members names (i.e. `First/Second`) was somewhat surprising to me as that wasn't the naming pattern that I thought we generally followed when creating and presenting tuples, and was not the naming pattern we've used in dotnet/roslyn itself.\r\n\r\nThe intuition here was that tuples very commonly act as a shorthand way to bundle lightweight data together so they can easily be grouped and passed in and out of methods without hte heavyweight need to define an entire struct (and all the rest of the ceremony you would need there).\r\n\r\nThis naturally leads to two reasonable interpretations of things that could influence naming decisions:\r\n1. this is just a simpler way of dealing with a named struct.  These are fields, and as such should likely be named similar to public mutable fields/properties (so presumably `PascalCased`). \r\n2. these are a collection of parameters.  The tuple itself is intended to fade out of the way, and people will most naturally think of working with these as a bunch of parameters/locals.  As such, they should be named similar (so presumably `camelCased`).\r\n\r\nIMO, from my recollection of the design here in the LDM, we'd been pushing harder on the second position.  We've put a lot of effort into making it feel very natural to just 'splat/deconstruct' tuples, pushing the positoin more that the tuple is less relevant, and it's just a bundle of variables you'll be working with locally in your methods.  While it's true that that doesn't necessarily mean the tuple field names have to match the expected usage names, it feels unfortunate that these names would now have to differ in case.  This goes for both consumption, where field names are being splatted into different local names, as well as construction.  It's extremely natural for someone to just construct a tuple like so: `(name, age)`, but this would, for example, now create a tuple with names that don't actually match a method that returns something like `(string Name, int Age)`.  This lack of symmetry obviously is not a problem in terms of compilation (the language allows and converts here).  However, it feels problematic to me because the code is now no longer working consistently with the same names that flow in, get worked on, and flow out.\r\n\r\nThis is not a huge deal.  But i think it warrants discussion as any decision made here will effectively impact all future usages of tuples across our APIs and our customers' APIs. \r\n\r\nThanks very much.\r\n\r\n--\r\n\r\nNote: additional data points.  Both swift and go allow one to return multiple *named* values from a method/function.  In both those cases, naming of those multiple-named values matches parameter naming.  "}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"8610445307","Type":"PullRequestEvent","CreatedAt":"2018-11-19T05:08:05","Actor":"Cosifne","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/31247","RelatedDescription":"Opened pull request \"SetupAuthoring for Roslyn localization\" (#31247) at dotnet/roslyn","RelatedBody":"Related [issue](https://devdiv.visualstudio.com/DevDiv/_workitems/edit/723558)\r\n\r\nGenerally I just follow the pattern of Tom's previous commits.\r\nAnd add resources file for each Vsix appears in the SignToolData.json\r\n\r\n"},{"Id":"8610427812","Type":"IssuesEvent","CreatedAt":"2018-11-19T05:01:01","Actor":"jcouv","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/31246","RelatedDescription":"Opened issue \"Async-streams: Consider optimizing return logic of `MoveNextAsync()`\" (#31246) at dotnet/roslyn","RelatedBody":"Reported by @stephentoub \r\n\r\nRight now I see this for MoveNextAsync:\r\n\r\n```C#\r\n[DebuggerHidden]\r\nValueTask<bool> IAsyncEnumerator<int>.MoveNextAsync()\r\n{\r\n    if (this.<>1__state == -2)\r\n    {\r\n        return new ValueTask<bool>();\r\n    }\r\n\r\n    this.<>v__promiseOfValueOrEnd.Reset();\r\n    Program.<DoStuffAsync>d__1 stateMachine = this;\r\n    this.<>t__builder.Start<Program.<DoStuffAsync>d__1>(ref stateMachine);\r\n    return new ValueTask<bool>(this, this.<>v__promiseOfValueOrEnd.Version);\r\n}\r\n```\r\n \r\nThat last line will force the resulting usage of the `ValueTask<bool>` to go through the underlying interface, even if there is already a yielded value available (which we expect to be common).  That means that in such a case we’ll end up making two unnecessary interface calls: `IsCompleted` and `GetResult`.  If we were to instead check the `ManualResetValueTaskSourceCore` to see if there’s already a value available, and if there is, return a `new ValueTask<bool>(true)`, it would make that path faster.  We should of course benchmark it, but I expect the savings will more than make up for the extra branch."},{"Id":"8609779395","Type":"IssuesEvent","CreatedAt":"2018-11-19T00:39:36","Actor":"CyrusNajmabadi","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/31245","RelatedDescription":"Opened issue \"FindRefsPresenter has inadequate testing.\" (#31245) at dotnet/roslyn","RelatedBody":"Found here: https://github.com/dotnet/roslyn/pull/31134#issuecomment-439740121\r\n\r\nLooks like we're lacking adequate testing of the FindRefs UI.  Our existing integration tests validate some of the data, but fail to cover:\r\n\r\n```c#\r\n            public override bool TryCreateColumnContent(string columnName, out FrameworkElement content)\r\n            {\r\n                if (columnName == StandardTableColumnDefinitions2.LineText)\r\n                {\r\n                    var inlines = CreateLineTextInlines();\r\n                    var textBlock = inlines.ToTextBlock(Presenter.ClassificationFormatMap, Presenter.TypeMap, wrap: false);\r\n\r\n                    content = textBlock;\r\n                    return true;\r\n                }\r\n\r\n                content = null;\r\n                return false;\r\n            }\r\n```\r\n\r\nI looked back, and it looks like things changed here several times with our integration tests and different subsystems.  Original expectation was that this was hitting a codepath already tested for presenting user code as runs.  However, that code (and tests) seems to have been lost into the ether (maybe when we did LiveShare, or rewrote integration tests).  As such, this doesn't really have any testing coverage.  \r\n\r\nWe should address this gap in testing before doing more work in this area.  Future changes to subsystems also need more in-depth reviews to understand testing fallout and to discover if they cause testing holes.  Feature work that is layered on top of subsystems should also have at least one test that validates the end-to-end usage of the underlying subsystems.  That way we're not left with no tests when things are refactored underneath."}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"8609540888","Type":"PullRequestEvent","CreatedAt":"2018-11-18T22:24:38","Actor":"yowl","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/6592","RelatedDescription":"Opened pull request \"WIP wasm: Fix callback to NativeCallable methods\" (#6592) at dotnet/corert","RelatedBody":"Fixes #6580. Previously when making the callback to a NativeCallable function, the wrong PInvoke method was used as described in #6580 .  This change fixes that, and also fixes a problem where the thread state was not being changed from Cooperative->Preemptive->Cooperative on managed->unmanaged->managed Pinvokes.  When calling back from unmanaged to the NativeCallable an asssert is made on the thread being in Preemptive mode, but the change from Cooperative->Preemptive was missing and hence the assert failed.  @morganbr I'm marking this as WIP because I needed to add some C++ function to get a simple test that exercised the callback, so I have this in a cpp file https://github.com/dotnet/corert/compare/master...yowl:callbackfromnative?expand=1#diff-380d7928db22ba701b6239aaf0c6d09c, but I'm not sure how to go about changing the build to get this included.  Do I just make the changes in https://github.com/dotnet/corert/blob/master/src/BuildIntegration/Microsoft.NETCore.Native.targets so that I can `emcc` the bitcode for the cpp and add it to the linker command?\r\n\r\n"},{"Id":"8609507826","Type":"PullRequestEvent","CreatedAt":"2018-11-18T22:06:11","Actor":"trylek","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/6590","RelatedDescription":"Merged pull request \"Further CPAOT infra fixes for release mode support\" (#6590) at dotnet/corert","RelatedBody":"1) Pass the proper configuration and architecture to msbuild when\r\nrestoring XUnitTooling so that it gets restored into the proper\r\nfolder - this fixes building the CoreCLR tests in release mode.\r\n\r\n2) Set the 'Optimize' property for Microsoft.NetCore.Native.targets\r\nin CoreCLR test and framework assembly build to actually make a\r\ndifference w.r.t. release codegen by passing '-O' to ILC.\r\n\r\n3) Update comments in the R2R test scripts to indicate we now\r\nsupport per-configuration output folders.\r\n\r\nThanks\r\n\r\nTomas\r\n\r\nP.S. Top200 tests have approximately the same pass rate in\r\ndebug and release mode (debug reports 6-8 errors, release 8-9 errors\r\nin my local testing).\r\n\r\nFramework assembly compilation in release mode has somewhat worse\r\npass rate, 110 out of the 152 assemblies build amounting to about\r\n72% pass rate."},{"Id":"8609487772","Type":"PullRequestEvent","CreatedAt":"2018-11-18T21:54:57","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/6591","RelatedDescription":"Merged pull request \"Fixes to allow non-.NET base class libraries\" (#6591) at dotnet/corert","RelatedBody":"A couple fixes so that we can compile base class libraries that don't look like regular .NET base class libraries. This is for a weekend project, but general purpose enough."},{"Id":"8609349985","Type":"PullRequestEvent","CreatedAt":"2018-11-18T20:37:56","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/6591","RelatedDescription":"Opened pull request \"Fixes to allow non-.NET base class libraries\" (#6591) at dotnet/corert","RelatedBody":"A couple fixes so that we can compile base class libraries that don't look like regular .NET base class libraries. This is for a weekend project, but general purpose enough."},{"Id":"8606074769","Type":"IssuesEvent","CreatedAt":"2018-11-17T07:34:58","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/issues/6585","RelatedDescription":"Closed issue \"ILC Reported  FileLoadErrorGeneric: System.Data.Common when using [Newtonsoft.Json]\" (#6585) at dotnet/corert","RelatedBody":"This happened when I using CoreRT to build a static library, is it a something not done yet or am I doing anything wrong?\r\n\r\n![image](https://user-images.githubusercontent.com/29968862/48625983-a9ca6480-e9eb-11e8-83a3-38ba0bb8a53f.png)\r\n\r\n\r\n```\r\nEXEC : warning : Method `[Newtonsoft.Json]Newtonsoft.Json.Converters.DataTableConverter.CanConvert(Type)` will always throw because: [TEMPORARY EXCEPTION MESSAGE] FileLoadErrorGeneric: System.Data.Common [H:\\project\\newNuget\\HelloWorld\\Main.csproj]\r\nEXEC : warning : Method `[Newtonsoft.Json]Newtonsoft.Json.Converters.DataSetConverter.CanConvert(Type)` will always throw because: [TEMPORARY EXCEPTION MESSAGE] FileLoadErrorGeneric: System.Data.Common [H:\\project\\newNuget\\HelloWorld\\Main.csproj]\r\nEXEC : warning : Method `[Newtonsoft.Json]Newtonsoft.Json.Converters.BinaryConverter.CanConvert(Type)` will always throw because: [TEMPORARY EXCEPTION MESSAGE] FileLoadErrorGeneric: System.Data.Common [H:\\project\\newNuget\\HelloWorld\\Main.csproj]\r\nEXEC : warning : Method `[Newtonsoft.Json]Newtonsoft.Json.Converters.BinaryConverter.GetByteArray(object)` will always throw because: [TEMPORARY EXCEPTION MESSAGE] FileLoadErrorGeneric: System.Data.Common [H:\\project\\newNuget\\HelloWorld\\Main.csproj]\r\nEXEC : warning : Method `[Newtonsoft.Json]Newtonsoft.Json.Converters.DataTableConverter.WriteJson(JsonWriter,object,JsonSerializer)` will always throw because: [TEMPORARY EXCEPTION MESSAGE] FileLoadErrorGeneric: System.Data.Common [H:\\project\\newNuget\\HelloWorld\\Main.csproj]\r\nEXEC : warning : Method `[Newtonsoft.Json]Newtonsoft.Json.Converters.DataSetConverter.WriteJson(JsonWriter,object,JsonSerializer)` will always throw because: [TEMPORARY EXCEPTION MESSAGE] FileLoadErrorGeneric: System.Data.Common [H:\\project\\newNuget\\HelloWorld\\Main.csproj]\r\nEXEC : warning : Method `[Newtonsoft.Json]Newtonsoft.Json.Converters.DataTableConverter.ReadJson(JsonReader,Type,object,JsonSerializer)` will always throw because: [TEMPORARY EXCEPTION MESSAGE] FileLoadErrorGeneric: System.Data.Common [H:\\project\\newNuget\\HelloWorld\\Main.csproj]\r\nEXEC : warning : Method `[Newtonsoft.Json]Newtonsoft.Json.Converters.DataSetConverter.ReadJson(JsonReader,Type,object,JsonSerializer)` will always throw because: [TEMPORARY EXCEPTION MESSAGE] FileLoadErrorGeneric: System.Data.Common [H:\\project\\newNuget\\HelloWorld\\Main.csproj]\r\nEXEC : warning : Method `[Newtonsoft.Json]Newtonsoft.Json.Converters.BinaryConverter.ReadJson(JsonReader,Type,object,JsonSerializer)` will always throw because: [TEMPORARY EXCEPTION MESSAGE] FileLoadErrorGeneric: System.Data.Common [H:\\project\\newNuget\\HelloWorld\\Main.csproj]\r\n  Microsoft (R) Library Manager Version 14.14.26433.0\r\n  Copyright (C) Microsoft Corporation.  All rights reserved.\r\n\r\n  \"/OUT:bin\\release\\netcoreapp2.1\\win-x64\\native\\Main.lib\"\r\n  \"obj\\release\\netcoreapp2.1\\win-x64\\native\\Main.obj\"\r\n  Main -> H:\\project\\newNuget\\HelloWorld\\bin\\release\\netcoreapp2.1\\win-x64\\publish\\\r\nC:\\Users\\h6hfhrht\\.nuget\\packages\\microsoft.dotnet.ilcompiler\\1.0.0-alpha-27116-01\\build\\Microsoft.NETCore.Native.Publish.targets(77,5): error MSB3030: Could not copy the file \"bin\\release\\netcoreapp2.1\\win-x64\\native\\Main.pdb\" because it was not found. [H:\\project\\newNuget\\HelloWorld\\Main.csproj]\r\n\r\n```"},{"Id":"8606067631","Type":"PullRequestEvent","CreatedAt":"2018-11-17T07:29:32","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/6589","RelatedDescription":"Merged pull request \"Try to include System.Data.Common in the framework\" (#6589) at dotnet/corert","RelatedBody":""},{"Id":"8605151710","Type":"PullRequestEvent","CreatedAt":"2018-11-16T22:50:29","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/6588","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr,corefx\" (#6588) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr,corefx\n\n\n**Please REBASE this PR when merging**\n\n cc @tarekgh"},{"Id":"8605151195","Type":"PullRequestEvent","CreatedAt":"2018-11-16T22:50:20","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/6587","RelatedDescription":"Merged pull request \"Disambiguate Span indexer intrinsic\" (#6587) at dotnet/corert","RelatedBody":"Port https://github.com/dotnet/coreclr/issues/21051 to CoreRT"}],"ResultType":"GitHubEvent"},"SDK":{"Events":[{"Id":"8608488012","Type":"IssuesEvent","CreatedAt":"2018-11-18T12:36:07","Actor":"ghost1372","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/issues/2676","RelatedDescription":"Opened issue \"run wpf on linux\" (#2676) at dotnet/sdk","RelatedBody":"hi i want run my wpf app on linux so:\r\n1 - Create WPF app dotnet new wpf\r\n2 - dotnet publish -c release -r ubuntu.16.04-x64\r\n3 - Copy Publish folder on linux\r\n4 - chmod 777 ./wpfapp\r\n5 - ./wpfapp\r\nbut i get this error:\r\n\r\n> Unhandled Exception: System.IO.FileNotFoundException: Could not load file or assembly 'PresentationFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'. The system cannot find the file specified.\r\n\r\n\r\n\r\n"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1062754536018898946","CreatedAt":"2018-11-14T17:10:01+00:00","UserScreenname":"dotnet","Text":"Hear the latest and greatest on the future of .NET and check out demos of #dotNET Core . You'll also get a chance t… https://t.co/yskyvl0xjt","Source":"<a href=\"https://prod2.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod2</a>","RetweetCount":78,"FavoriteCount":39,"RawContent":null}]}},"RunOn":"2018-11-19T05:30:29.3460774Z","RunDurationInMilliseconds":7149}