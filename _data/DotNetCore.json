{"Data":{"Blog":{"FeedItems":[{"Title":".NET Framework 4.7.2 Developer Pack Early Access build 3056 is available!","PublishedOn":"2018-03-08T23:22:13+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, we are happy to share an Early Access build with the .NET Framework 4.7.2 Developer Pack. The .NET Framework 4.7.2 Developer Pack lets developers build applications that target the .NET...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/03/08/net-framework-4-7-2-developer-pack-early-access-build-3056-is-available/","RawContent":null},{"Title":"F# language and tools update for Visual Studio 2017 version 15.6","PublishedOn":"2018-03-06T18:28:06+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"With the release of Visual Studio 2017 version 15.6, we’re excited to share updates to the F# language and core library, F# tooling in Visual Studio, and infrastructure updates that concern OSS...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/03/06/f-language-and-tools-update-for-visual-studio-2017-version-15-6/","RawContent":null},{"Title":"Announcing Entity Framework Core 2.1 Preview 1","PublishedOn":"2018-02-27T18:11:29+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"Today we are releasing the first preview of EF Core 2.1, alongside .NET Core 2.1 Preview 1 and ASP.NET Core 2.1 Preview 1. The new bits are available in NuGet as part of the individual packages, and...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/27/announcing-entity-framework-core-2-1-preview-1/","RawContent":null},{"Title":"Announcing .NET Core 2.1 Preview 1","PublishedOn":"2018-02-27T18:08:23+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Today, we are announcing .NET Core 2.1 Preview 1. It is the first public release of .NET Core 2.1. We have great improvements that we want to share and that we would love to get your feedback on,...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/27/announcing-net-core-2-1-preview-1/","RawContent":null},{"Title":"Calling All Desktop Developers: How do you interact with data?","PublishedOn":"2018-02-27T17:00:36+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Connecting to databases and services is an important part of desktop application development for many of our customers. Visual Studio provides a variety of tools and technologies that can help you...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/27/calling-all-desktop-developers-how-do-you-interact-with-data/","RawContent":null},{"Title":"Azure Blob Storage as a Network Drive","PublishedOn":"2018-02-26T16:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Many applications make use of a network drive to backup and store files. When I was in university I found myself constantly coding for fun, and one example took the form of a network share for my...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/26/azure-blob-storage-as-a-network-drive/","RawContent":null},{"Title":".NET Framework February 2018 Security and Quality Rollup","PublishedOn":"2018-02-14T04:27:17+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, we are releasing the February 2018 Security and Quality Rollup. Security No new security fixes. See .NET Framework January 2018 Security and Quality Rollup for the latest security updates....","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/13/net-framework-february-2018-security-and-quality-rollup/","RawContent":null},{"Title":"Machine Learning in .NET – Help us build the right experience!","PublishedOn":"2018-02-13T17:17:58+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"In the past few years, Machine Learning (ML) and Artificial Intelligence (AI) have paved the road for building smarter applications through advancements in speech recognition, computer vision,...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/13/machine-learning-in-net-help-us-build-the-right-experience/","RawContent":null},{"Title":"Announcing .NET Framework 4.7.2 Early Access build 3052!","PublishedOn":"2018-02-05T21:55:13+00:00","CommentsCount":11,"FacebookCount":0,"Summary":"Today, we are happy to share the .NET Framework 4.7.2 Early Access build 3052 for your feedback. .NET Framework 4.7.2 is the next version of the .NET Framework. It is currently feature-complete and in...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/05/announcing-net-framework-4-7-2-early-access-build-3052/","RawContent":null},{"Title":"Entity Framework Core 2.1 Roadmap","PublishedOn":"2018-02-02T18:39:25+00:00","CommentsCount":8,"FacebookCount":0,"Summary":"As mentioned in the announcement of the .NET Core 2.1 roadmap earlier today, at this point we know the overall shape of our next release and we have decided on a general schedule for it. As we...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/02/entity-framework-core-2-1-roadmap/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"7192252734","Type":"PullRequestEvent","CreatedAt":"2018-02-03T01:30:47","Actor":"karann-msft","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/98","RelatedDescription":"Opened pull request \"Updates to reflect the latest information\" (#98) at dotnet/home","RelatedBody":""},{"Id":"7187459205","Type":"PullRequestEvent","CreatedAt":"2018-02-02T05:26:03","Actor":"mairaw","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/97","RelatedDescription":"Opened pull request \"update CLA PDF link\" (#97) at dotnet/home","RelatedBody":""},{"Id":"7102763357","Type":"PullRequestEvent","CreatedAt":"2018-01-16T00:17:04","Actor":"galatrash-at-dnn","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/96","RelatedDescription":"Opened pull request \"Adding DNN Platform.\" (#96) at dotnet/home","RelatedBody":""},{"Id":"7097053889","Type":"PullRequestEvent","CreatedAt":"2018-01-14T15:15:00","Actor":"bfistein","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/95","RelatedDescription":"Opened pull request \"Fix broken logo URL\" (#95) at dotnet/home","RelatedBody":""},{"Id":"7065382954","Type":"PullRequestEvent","CreatedAt":"2018-01-06T19:21:47","Actor":"ctaggart","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/94","RelatedDescription":"Opened pull request \"add SourceLink\" (#94) at dotnet/home","RelatedBody":"Adding SourceLink to the project list as per the checklist https://github.com/ctaggart/SourceLink/issues/138"},{"Id":"7044237283","Type":"PullRequestEvent","CreatedAt":"2017-12-31T20:25:44","Actor":"onovotny","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/93","RelatedDescription":"Opened pull request \"Add Humanizer\" (#93) at dotnet/home","RelatedBody":"Onboarding Humanizer: https://github.com/Humanizr/Humanizer/issues/682"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"7301596554","Type":"IssuesEvent","CreatedAt":"2018-02-27T06:10:33","Actor":"mairaw","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/61","RelatedDescription":"Opened issue \"New offline books released for Visual Studio 2017\" (#61) at dotnet/announcements","RelatedBody":"# New offline books released for Visual Studio 2017\r\n\r\nEarlier this month, we released an update to Offline Books for the Visual Studio 2017 Help Viewer.\r\n\r\nThis release includes new .NET books, including .NET Core Guide, .NET Guide, .NET Framework Guide and the .NET API Reference. It also includes the latest content for Visual Studio 2017 version 15.5, the latest updates to Visual Basic, C# (7.1 and 7.2), F#, ASP.NET Core, NuGet, SQL Server, and the Universal Windows Platform.\r\n\r\nThe .NET Guide, .NET Framework Guide and .NET API Reference books together are a replacement for the .NET Framework 4.6 and 4.5 book, which can be removed. Just be aware that the new .NET API Reference book currently displays the API syntax block for C# only, but examples are shown in other languages, just like the experience you currently have on docs.microsoft.com.If you need to see the API syntax for Visual Basic, C++/CLI or F#, then you should keep the old book until the new reference book is updated again in a few weeks. Once you remove the .NET Framework 4.6 and 4.5 book, you cannot reinstall it.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts and have any discussions with us at:\r\n\r\n- https://github.com/dotnet/docs/issues/4502\r\n\r\n## Add new content\r\n\r\nYou will see these new books when you have Help Viewer installed and choose **Help** > **Add and Remove Content** from the Visual Studio 2017 main menu. If you don't see this menu item, then [open the Visual Studio Installer](https://docs.microsoft.com/visualstudio/install/modify-visual-studio), click the **More** dropdown and choose **Modify**. When the component list appears, choose **Individual Components** at the top, then check **Help Viewer**.\r\n\r\n![help_viewer_component](https://user-images.githubusercontent.com/12971179/36713111-c9d49a7c-1b40-11e8-918a-e7e3619669a2.png)\r\n\r\n## Help Viewer Installation\r\n\r\nTo start the installation, select the **Modify** button in the lower right corner of the Installer window.\r\n\r\nTo update individual books whose status is \"Updates available\", remove the book and then click **Add** to get the new version. To update all your books at once, select the link in the lower right corner of the **Add and Remove Content** window:\r\n\r\n![offline-books](https://user-images.githubusercontent.com/12971179/36713028-75b944f6-1b40-11e8-91c4-4830355f815e.png)"},{"Id":"7300537622","Type":"IssuesEvent","CreatedAt":"2018-02-27T00:12:10","Actor":"eerhardt","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/60","RelatedDescription":"Opened issue \"System.Runtime.Intrinsics in .NET Core 2.1\" (#60) at dotnet/announcements","RelatedBody":"# System.Runtime.Intrinsics in .NET Core 2.1\r\n\r\n.NET Core 2.1 has been adding platform intrinsic APIs to support directly calling processor specific instructions, such as Intel’s x86 SIMD instructions.  See the [initial platform intrinsics design](https://github.com/dotnet/designs/blob/master/accepted/platform-intrinsics.md) for more information.\r\n\r\nWe have decided that it makes the most sense for this intrinsics feature to ship in a “preview” status in the .NET Core 2.1 RTM timeframe.  This means that the runtime support we are implementing will be included, but the assembly exposing the intrinsics will only be available to projects via explicit reference to a “preview-only” package.  These APIs won’t be included in the official .NET Core 2.1 packages.\r\n\r\nGiven our limited time and resources, recent changes in the approach we take to expose the intrinsics, and API changes prompted by design feedback from the community, we don’t believe there is enough time to settle these APIs for 2.1. We plan to follow the pattern of other recent features like Span<T> and Memory<T> that first shipped in preview before formally joining the supported API surface.  Not only would we expect the next version of .NET Core to support more intrinsics than could be supported in 2.1, but we expect to have real usage examples in CoreFX and higher level components as well.  These real world examples, as well as feedback from customers who opt in to the preview, should give us the confidence we need to officially support the APIs going forward.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\nhttps://github.com/dotnet/corefx/issues/27486\r\n\r\n## Details\r\n\r\nIn the coming days, we plan on removing System.Runtime.Intrinsics.dll from the Microsoft.NETCore.App package.  This means any libraries/applications that are using these APIs will no longer compile by default, and will not run on new builds of .NET Core 2.1.\r\n\r\nAt the same time, we will start producing a new System.Runtime.Intrinsics.Experimental NuGet package.  In order to continue using these APIs on .NET Core 2.1, a project will need to add a reference to this new package.\r\n\r\nAs its name implies, this package is experimental and should only be used for preview purposes.  It isn’t expected to be used in production scenarios.  Future version of .NET Core (after 2.1) will be allowed to break this package. This enables us respond to future feedback that requires the APIs to be modified.\r\n\r\nIn the future, when we are confident we have the intrinsic APIs right, we will stop producing the System.Runtime.Intrinsics.Experimental package. The platform intrinsics APIs will then be added back to Microsoft.NETCore.App and will be officially supported."},{"Id":"7273056222","Type":"IssuesEvent","CreatedAt":"2018-02-21T02:28:03","Actor":"KathleenDollard","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/57","RelatedDescription":"Opened issue \"Manually Uninstall .NET Core SDK 2.2.0-Preview Nightly Builds\" (#57) at dotnet/announcements","RelatedBody":"# Manually Uninstall .NET Core SDK 2.2.0-Preview Nightly Builds\r\n\r\n[A change in the version number strategy for .NET Core SDK](https://github.com/dotnet/designs/pull/29) resulted in some nightly builds having a higher version number. This higher version number will block the installation of the correct .NET Core SDK.\r\n\r\nIf you have installed nightly builds of the .NET Core SDK that start with version number that begin with `2.2.0-preview1`, you must manually uninstall these preview builds before later versions of the SDK with version numbers like 2.1.xxx will be available. This may have occurred by installing nightly builds of the .NET Core SDK or nightly builds of Visual Studio 15.5 Preview. \r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n[dotnet/cli #8652](https://github.com/dotnet/cli/issues/8652)\r\n\r\n## Details\r\n\r\n[We changed the version number strategy for .NET Core SDK](https://github.com/dotnet/designs/pull/29) as development was ongoing. Because of this, version numbers on the old scheme appeared in nightly builds. Unfortunately, these numbers are higher than the version numbers in the new scheme. All of the newer SDKs for .NET Core 2.1 will be ignored due to this higher version number; this includes newer nightly builds, public previews and eventual releases.\r\n\r\nThese older version numbers are similar to the following, with the last several different values in the last six digits:\r\n\r\n```\r\n2.2.0-preview1-008000\r\n```\r\n\r\nSince the newer versions are in the form:\r\n\r\n```\r\n2.1.300-preview1-008000\r\n```\r\n\r\n## Call to Action\r\n\r\nIf you have installed nightly builds. Please uninstall any .NET SDK versions that start with 2.2.0-preview1."},{"Id":"7253280422","Type":"IssuesEvent","CreatedAt":"2018-02-16T04:14:06","Actor":"terrajobst","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/56","RelatedDescription":"Closed issue \"Can you help with this issue?\" (#56) at dotnet/announcements","RelatedBody":"https://stackoverflow.com/questions/48819198/weird-behavior-of-httpclienthandler-sslprotocol-property-in-net-framework-4-7-1\r\n"},{"Id":"7253090788","Type":"IssuesEvent","CreatedAt":"2018-02-16T02:41:24","Actor":"rudeGit","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/56","RelatedDescription":"Opened issue \"Can you help with this issue?\" (#56) at dotnet/announcements","RelatedBody":"https://stackoverflow.com/questions/48819198/weird-behavior-of-httpclienthandler-sslprotocol-property-in-net-framework-4-7-1\r\n"},{"Id":"7227221771","Type":"IssuesEvent","CreatedAt":"2018-02-10T18:30:42","Actor":"kasper3","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/55","RelatedDescription":"Closed issue \"Needs clarity on open / close source nature of product being announced\" (#55) at dotnet/announcements","RelatedBody":"On first page of this repository, it reads:\r\n\r\n> Subscribe to this repo to be notified of Announcements and changes in .NET Core.\r\n\r\nDoes that mean all announcements are related to .NET Core and all products being announced are are open sourced?\r\n\r\nIf there are announcements about the propitiatory or closed-source products, the products whose sources <b>in full*</b> are not accessible by public, should be marked as such either using a label (https://github.com/dotnet/announcements/labels), or clearly stated in text.\r\n\r\n#### * Source code including the build script that generates the package end user downloads from nuget or myget feeds\r\n\r\nOne example is https://github.com/dotnet/announcements/issues/30, where it is presented to user as if the product ILLink is in open, but the package https://dotnet.myget.org/feed/dotnet-core/package/nuget/Illink.Tasks is produced by script which are nowhere to b found in open. Read more at https://github.com/dotnet/core/issues/915#issuecomment-364645429"},{"Id":"7226630380","Type":"IssuesEvent","CreatedAt":"2018-02-10T11:59:43","Actor":"kasper3","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/55","RelatedDescription":"Opened issue \"Needs clarity on open / close source nature of product being announced\" (#55) at dotnet/announcements","RelatedBody":"On first page of this repository, it reads:\r\n\r\n> Subscribe to this repo to be notified of Announcements and changes in .NET Core.\r\n\r\nDoes that mean all announcements are related to .NET Core and all products being announced are are open sourced?\r\n\r\nIf there are announcements about the propitiatory or closed-source products, the products whose sources <b>in full*</b> are not accessible by public, should be marked as such either using a label (https://github.com/dotnet/announcements/labels), or clearly stated in text.\r\n\r\n#### * Source code including the build script that generates the package end user downloads from nuget or myget feeds\r\n\r\nOne example is https://github.com/dotnet/announcements/issues/30, where it is presented to user as if the product ILLink is in open, but the package https://dotnet.myget.org/feed/dotnet-core/package/nuget/Illink.Tasks is produced by script which are nowhere to b found in open. Read more at https://github.com/dotnet/core/issues/915#issuecomment-364645429"}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"7369802777","Type":"PullRequestEvent","CreatedAt":"2018-03-13T05:07:59","Actor":"danmosemsft","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/16902","RelatedDescription":"Merged pull request \"Update BuildTools, CoreFx to preview2-02612-03, preview2-26313-01, respectively (master)\" (#16902) at dotnet/coreclr","RelatedBody":"/cc @dotnet/coreclr-auto-update-notify"},{"Id":"7369089609","Type":"PullRequestEvent","CreatedAt":"2018-03-13T00:38:28","Actor":"JeremyKuhne","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/16901","RelatedDescription":"Merged pull request \"Fix short path expansion\" (#16901) at dotnet/coreclr","RelatedBody":"Also make methods internal so I can add better unit tests.\r\n\r\nI'll link in the System.Runtime.Extensions test change that catches this shortly.\r\n\r\ncc: @danmosemsft, @pjanotti, @Anipik \r\n\r\nFixes https://github.com/dotnet/corefx/issues/27966"},{"Id":"7369083273","Type":"IssuesEvent","CreatedAt":"2018-03-13T00:36:00","Actor":"brianrob","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/11993","RelatedDescription":"Closed issue \"EventPipeEventInstance::GetData is not Inlined\" (#11993) at dotnet/coreclr","RelatedBody":"This is a super-hot function when writing from the circular buffer.\r\n\r\n![image](https://cloud.githubusercontent.com/assets/6210322/26607336/d9445c44-454a-11e7-8eae-4128ebd6e63c.png)\r\n\r\n![image](https://cloud.githubusercontent.com/assets/6210322/26607371/0aea57d0-454b-11e7-9cce-aebe26d13f67.png)\r\n"},{"Id":"7368961787","Type":"PullRequestEvent","CreatedAt":"2018-03-12T23:53:18","Actor":"dotnet-maestro-bot","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/16902","RelatedDescription":"Opened pull request \"Update BuildTools to preview2-02612-03 (master)\" (#16902) at dotnet/coreclr","RelatedBody":"/cc @dotnet/coreclr-auto-update-notify"},{"Id":"7368945734","Type":"PullRequestEvent","CreatedAt":"2018-03-12T23:47:48","Actor":"Anipik","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/16869","RelatedDescription":"Merged pull request \"Missing Case In Remove Relative Segments\" (#16869) at dotnet/coreclr","RelatedBody":"Tests https://github.com/dotnet/corefx/pull/27844"},{"Id":"7368744459","Type":"IssuesEvent","CreatedAt":"2018-03-12T22:47:20","Actor":"sandreenko","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/13476","RelatedDescription":"Closed issue \"Invalid program crashes 32bit RyuJIT in Lowering::IsBinOpInRMWStoreInd\" (#13476) at dotnet/coreclr","RelatedBody":"The following (invalid) program (when compiled in debug mode) crashes x86 RyuJIT. x64 and x86 with optimizations enabled (release mode) are not affected by this minimal repro, but a similar larger invalid method crashed in x86 release mode also (in `Lowering::LowerCompare`).\r\n```C#\r\nusing System;\r\nusing System.Reflection.Emit;\r\n\r\nclass Program\r\n{\r\n\tstatic void Main()\r\n\t{\r\n\t\tvar dm = new DynamicMethod(\"test\", typeof(void), null, typeof(Program) /*owner is required*/);\r\n\t\tvar il = dm.GetILGenerator();\r\n\t\til.DeclareLocal(typeof(int));\r\n\t\til.Emit(OpCodes.Ldloc_0);\r\n\t\til.Emit(OpCodes.Ldc_I4_1);\r\n\t\til.Emit(OpCodes.Conv_I8); // source of trouble (removing this removes the crash)\r\n\t\til.Emit(OpCodes.Add); // this looks invalid (int32 + int64), but should not crash JIT\r\n\t\til.Emit(OpCodes.Stloc_0);\r\n\t\til.Emit(OpCodes.Ret);\r\n\t\tvar action = (Action)dm.CreateDelegate(typeof(Action));\r\n\t\taction();\r\n\t}\r\n}\r\n"}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"7369580580","Type":"IssuesEvent","CreatedAt":"2018-03-13T03:37:14","Actor":"kouvel","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/8776","RelatedDescription":"Opened issue \"Dotnet does not report error when there's a RuntimeFrameworkVersion mismatch between projects\" (#8776) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\n- Install dotnet sdk 2.1.4 (runtime 2.0.5) and uninstall any other installed runtime.\r\n- In a console window, in a temp folder:\r\n\r\n```bat\r\nmkdir Cons\r\nmkdir Lib\r\ncd Cons\r\ndotnet new console\r\nnotepad Cons.csproj\r\n  Add the following, save, close:\r\n  <ItemGroup>\r\n    <ProjectReference Include=\"..\\Lib\\Lib.csproj\"/>\r\n  </ItemGroup>\r\ncd ..\\Lib\r\ndotnet new classlib\r\nnotepad Lib.csproj\r\n  Add the following in PropertyGroup section, save, close:\r\n    <RuntimeFrameworkVersion>2.0.5</RuntimeFrameworkVersion>\r\ncd ..\\Cons\r\ndotnet publish --self-contained --runtime win10-x64\r\ndir bin\\Debug\\netcoreapp2.0\\win10-x64\\publish\\coreclr.dll\r\n```\r\n\r\n## Expected  behavior\r\n- Error due to mismatched `RuntimeFrameworkVersion` between projects\r\n\r\n## Actual behavior\r\n- Examining coreclr.dll above, it is from runtime version 2.0.0, this is a silent failure as one of the projects intends to run against 2.0.5\r\n- Similar silent failure when using `dotnet build` / `dotnet ...\\Cons,dll`, which unexpectedly runs against the 2.0.0 runtime\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n```\r\n.NET Command Line Tools (2.1.4)\r\n\r\nProduct Information:\r\n Version:            2.1.4\r\n Commit SHA-1 hash:  5e8add2190\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.16299\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.4\\\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.5\r\n  Build    : 17373eb129b3b05aa18ece963f8795d65ef8ea54\r\n```\r\n\r\nInitially reported by @BrendanGrant in https://github.com/dotnet/corefx/issues/27952#issuecomment-372521802"},{"Id":"7369445015","Type":"IssuesEvent","CreatedAt":"2018-03-13T02:47:55","Actor":"jaredpar","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/8775","RelatedDescription":"Opened issue \"Packing a NuSpec file\" (#8775) at dotnet/cli","RelatedBody":"I'm converting a part of our build which depended on using `nuget pack` on a nuspec file directly to use `dotnet pack`. I've read a number of threads on this, including #2170, and none seem to fit the scenario I have here.\r\n\r\nThe nupkg I'm trying to build is for the Roslyn compiler tools. This is a collection of projects which are built separately. There is no single project that builds the entire set of binaries that I can attach a `<NuspecFile>` entry too. \r\n\r\nI've tried creating a dummy csproj file just to drive the NuSpec file argument but that's not working:\r\n\r\n``` xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n    <NuspecFile>Microsoft.NETCore.Compilers.nuspec</NuspecFile>\r\n  </PropertyGroup>\r\n  <Target Name=\"Build\" />\r\n</Project>\r\n```\r\n\r\nAttempting to run `dotnet pack` on this project still tries to build the project. That's a huge step backwards for us. Particularly because there are ~30 nuspec files we need to migrate. Adding 30 new dummy builds is excessive here. \r\n\r\nHow can I use a nuspec file for a project that has no reasonable build story?\r\n\r\n\r\n"},{"Id":"7369209567","Type":"IssuesEvent","CreatedAt":"2018-03-13T01:22:59","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/7402","RelatedDescription":"Closed issue \"Cannot run build.cmd on windows\" (#7402) at dotnet/cli","RelatedBody":"Repo steps:\r\n\r\n- Clone dotnet/cli\r\n- Run build.cmd \r\n\r\nThe expected results are that everything succeeds. Instead I end up with the following errors:\r\n\r\n```\r\n    15>DOTNETTEST : error Message:  [E:\\code\\cli\\build\\test\\RunTest.proj]\r\n          System.IO.DirectoryNotFoundException : Could not find a part of the path 'E:\\code\\cli\\.nuget\\packages\\.tools\\dotnet-portable\\1.0.0\\netcoreapp2.0\\project.assets.json'.\r\n         Stack Trace:\r\n            at System.IO.FileStream.OpenHandle(FileMode mode, FileShare share, FileOptions options)\r\n            at System.IO.FileStream..ctor(String path, FileMode mode, FileAccess access, FileShare share, Int32 bufferSize, FileOptions options)\r\n            at NuGet.ProjectModel.LockFileFormat.Read(String filePath, ILogger log)\r\n            at Microsoft.DotNet.Tests.GivenAProjectToolsCommandResolver.GenerateDepsJsonMethodDoesntOverwriteWhenDepsFileAlreadyExists() in E:\\code\\cli\\test\\Microsoft.DotNet.Cli.Utils.Tests\\GivenAProjectToolsCommandResolver.cs:line 267\r\n         Executing - E:\\code\\cli\\artifacts\\win10-x64\\stage2\\dotnet.exe restore   --disable-parallel -  in pwd E:\\code\\cli\\test\\Microsoft.DotNet.Cli.Utils.Tests\\bin\\Debug\\netcoreapp2.0\\ItShowsStackTraceWhenRunAsTool\\AppThrowingException\\AppDependingOnOtherAsTool\r\n```"},{"Id":"7369203698","Type":"IssuesEvent","CreatedAt":"2018-03-13T01:20:53","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/8774","RelatedDescription":"Closed issue \"dotnet restore no longer works for VS solutions that contain a mix of SDK and non-SDK projects\" (#8774) at dotnet/cli","RelatedBody":"Original issue was #7294 but prior to sdk version 2.1.100 that came out last week the VS 2017 15.6, dotnet restore would only display errors for projects it didn't understand.  Now it quits altogether and as such, has broken our automated builds.\r\n\r\nI ask again - why can't it just ignore non-SDK projects it finds in the VS .sln files?\r\n\r\nHere is an image of the step in our build def that now stops the build:\r\n![image](https://user-images.githubusercontent.com/18301427/37315036-14796454-261d-11e8-92fa-1f2393e5f5a5.png)\r\n\r\nAnd here is an image of the build working on a build PC without the 15.6 update (and thus, using dotnet sdk v 2.1.4):\r\n![image](https://user-images.githubusercontent.com/18301427/37315063-3cf8184e-261d-11e8-9472-063c146c48ee.png)\r\n\r\n"},{"Id":"7369195779","Type":"IssuesEvent","CreatedAt":"2018-03-13T01:18:00","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/8773","RelatedDescription":"Closed issue \"File Access Error on watch run\" (#8773) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\nCheckout a project that uses \"watch\" on a new computer, type \"dotnet watch run\"\r\n\r\n## Expected  behavior\r\nIt should build and run\r\n\r\n## Actual behavior\r\nThe first thing it does is try to populate a local package cache at the same time it watches, leading to a file contention error.\r\n\r\nWork-around:\r\n\r\nFirst, just do \"dotnet run\".  It will build the local package cache.  Afterwards you can use \"dotnet watch run\" without file contention.\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n.NET Command Line Tools (2.1.4)\r\n\r\nProduct Information:\r\n Version:            2.1.4\r\n Commit SHA-1 hash:  5e8add2190\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.16299\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.4\\\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n  Version  : 2.0.5\r\n  Build    : 17373eb129b3b05aa18ece963f8795d65ef8ea54\r\n\r\n"},{"Id":"7368940797","Type":"IssuesEvent","CreatedAt":"2018-03-12T23:46:11","Actor":"DaveSlinn","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/8774","RelatedDescription":"Opened issue \"dotnet restore no longer works for VS solutions that contain a mix of SDK and non-SDK projects\" (#8774) at dotnet/cli","RelatedBody":"Original issue was #7294 but prior to sdk version 2.1.100 that came out last week the VS 2017 15.6, dotnet restore would only display errors for projects it didn't understand.  Now it quits altogether and as such, has broken our automated builds.\r\n\r\nI ask again - why can't it just ignore non-SDK projects it finds in the VS .sln files?\r\n\r\nHere is an image of the step in our build def that now stops the build:\r\n![image](https://user-images.githubusercontent.com/18301427/37315036-14796454-261d-11e8-92fa-1f2393e5f5a5.png)\r\n\r\nAnd here is an image of the build working on a build PC without the 15.6 update (and thus, using dotnet sdk v 2.1.4):\r\n![image](https://user-images.githubusercontent.com/18301427/37315063-3cf8184e-261d-11e8-9472-063c146c48ee.png)\r\n\r\n"},{"Id":"7368895982","Type":"IssuesEvent","CreatedAt":"2018-03-12T23:31:52","Actor":"jdenekat","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/8773","RelatedDescription":"Opened issue \"File Access Error on watch run\" (#8773) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\nCheckout a project that uses \"watch\" on a new computer, type \"dotnet watch run\"\r\n\r\n## Expected  behavior\r\nIt should build and run\r\n\r\n## Actual behavior\r\nThe first thing it does is try to populate a local package cache at the same time it watches, leading to a file contention error.\r\n\r\nWork-around:\r\n\r\nFirst, just do \"dotnet run\".  It will build the local package cache.  Afterwards you can use \"dotnet watch run\" without file contention.\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n.NET Command Line Tools (2.1.4)\r\n\r\nProduct Information:\r\n Version:            2.1.4\r\n Commit SHA-1 hash:  5e8add2190\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.16299\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.4\\\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n  Version  : 2.0.5\r\n  Build    : 17373eb129b3b05aa18ece963f8795d65ef8ea54\r\n\r\n"},{"Id":"7368777590","Type":"IssuesEvent","CreatedAt":"2018-03-12T22:56:26","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/6274","RelatedDescription":"Closed issue \"Add option to not restore on `dotnet add`\" (#6274) at dotnet/cli","RelatedBody":"I'm in the process of updating a project from an old version. I created a new `.csproj` and then started adding references one by one using `dotnet add`. It's inconvenient that restore is getting called automatically. It would be better to have an option for this. I'd rather add all my dependencies, review the changes, and then call `dotnet restore` on my own."}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"7367636518","Type":"IssuesEvent","CreatedAt":"2018-03-12T18:54:39","Actor":"ericstj","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/675","RelatedDescription":"Opened issue \"Trimming task footprint is too large\" (#675) at dotnet/standard","RelatedBody":"There's probably a perf issue here too.  We're using the NuGet ProjectModel OM for loading the project.assets.json when we only need to read out package ID relationships.  We could do this with much smaller JSON-based reader.  Ideally it wouldn't parse the entire file (which can be huge) when we only need the package relationships."},{"Id":"7367620302","Type":"IssuesEvent","CreatedAt":"2018-03-12T18:51:39","Actor":"ericstj","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/667","RelatedDescription":"Closed issue \"Trimming fails for .NET Framework projects that use PackageReference\" (#667) at dotnet/standard","RelatedBody":"The csproj has:\r\n\r\n```xml\r\n  <PropertyGroup>\r\n    <TrimUnusedDependencies>true</TrimUnusedDependencies>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <PackageReference Include=\"SourceLink.Embed.AllSourceFiles\" Version=\"2.7.4\" PrivateAssets=\"all\" />\r\n    <PackageReference Include=\"Microsoft.Packaging.Tools.Trimming\" Version=\"1.1.0-preview1-25818-01\" />\r\n  </ItemGroup>\r\n```\r\n\r\nIt fails to build, giving:\r\n\r\n> Microsoft.Packaging.Tools.Trimming.targets(55,5): error MSB4018: The \"TrimFiles\" task failed unexpectedly.\r\n> System.Exception: Root package SourceLink.Embed.AllSourceFiles was specified but was not found in PackageDependencies\r\n>    at Microsoft.DotNet.Build.Tasks.TrimFiles.GetPackageRoots(IDictionary`2 packages, Trimmable trimmable)\r\n>    at Microsoft.DotNet.Build.Tasks.TrimFiles.Execute()\r\n>    at Microsoft.Build.BackEnd.TaskExecutionHost.Microsoft.Build.BackEnd.ITaskExecutionHost.Execute()\r\n>    at Microsoft.Build.BackEnd.TaskBuilder.<ExecuteInstantiatedTask>d__26.MoveNext()\r\n\r\nIs this expected to work?"},{"Id":"7367393689","Type":"PullRequestEvent","CreatedAt":"2018-03-12T18:09:41","Actor":"ericstj","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/671","RelatedDescription":"Merged pull request \"Trimming fixes\" (#671) at dotnet/standard","RelatedBody":"Fixes #670, #667, #626 \r\n\r\nThis honors MSBuild's related files (eg: .pdb) that are added to ReferenceCopyLocalPaths.  I added a switch to turn off this behavior if it is undesired.\r\n\r\nI've also fixed the package-graph issues by bringing back the assets file reading that I previously removed in a723e6ca6c49d6947803d2952517e46f1465c0ce, but as a fallback.\r\n\r\n/cc @jnm2 @weshaggard "},{"Id":"7367393684","Type":"IssuesEvent","CreatedAt":"2018-03-12T18:09:41","Actor":"ericstj","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/670","RelatedDescription":"Closed issue \"Trimming is not preserving non-assembly ReferenceCopyLocalPaths\" (#670) at dotnet/standard","RelatedBody":"Our trimmer only removed ReferenceCopyLocalPaths that had either an `OriginalItemSpec` (old csproj) or a `ResolvedFrom` (new csproj) of a removed assembly, but your trimmer removes all non-assembly ReferenceCopyLocalPaths. Namely, 50 PDBs from NuGet packages. We want those PDBs in build output for two reasons: stepping into embedded or linked source while debugging, and snapshotting them easily with each CI build for use in future debugging.\r\n\r\nIs there a workaround I could apply? It [looks](https://github.com/dotnet/standard/blob/master/Microsoft.Packaging.Tools.Trimming/tasks/TrimFiles.cs#L99) like the MSBuild task is missing the facility to keep related reference items together.\r\n\r\n/cc @ericstj "},{"Id":"7367283560","Type":"PullRequestEvent","CreatedAt":"2018-03-12T17:49:48","Actor":"dotnet-maestro-bot","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/674","RelatedDescription":"Opened pull request \"Update BuildTools to preview2-02612-02 (master)\" (#674) at dotnet/standard","RelatedBody":""},{"Id":"7367082371","Type":"PullRequestEvent","CreatedAt":"2018-03-12T17:14:57","Actor":"weshaggard","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/661","RelatedDescription":"Merged pull request \"Update BuildTools to preview2-02612-01 (master)\" (#661) at dotnet/standard","RelatedBody":""},{"Id":"7365308371","Type":"IssuesEvent","CreatedAt":"2018-03-12T12:23:09","Actor":"aventurella","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/673","RelatedDescription":"Opened issue \"Support ExternalAttributes in System.IO.Compression.ZipArchiveEntry\" (#673) at dotnet/standard","RelatedBody":"This is currently available in .NET Core 2.x but not .NET Standard 2.x for some reason?\r\n\r\ndotnet/corefx#18565\r\ndotnet/corefx#17067\r\n\r\n\r\n.NET Standard Docs:\r\nhttps://docs.microsoft.com/en-us/dotnet/api/system.io.compression.ziparchiveentry?view=netstandard-2.0\r\n\r\n.NET Core Docs:\r\nhttps://docs.microsoft.com/en-us/dotnet/api/system.io.compression.ziparchiveentry?view=netcore-2.0\r\n\r\n"},{"Id":"7364176468","Type":"IssuesEvent","CreatedAt":"2018-03-12T08:23:07","Actor":"molinch","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/668","RelatedDescription":"Closed issue \"Adding package referencing .NET Standard 2 seems to break build\" (#668) at dotnet/standard","RelatedBody":"Hi all,\r\n\r\nI know there are a couple of already opened issues with a similar topic, but in my case it looks slightly different. The issue is with a web application.\r\n\r\nI have some projects that use Microsoft.CodeAnalysis.CSharp.Scripting and Ben.Demystify.\r\nSince they need a different System.IO. I ended up with binding redirects, so I use System.IO 4.1.1.0.\r\nThis used to work great, and System.IO used to be copied automatically to the web application bin/ folder. The System.IO comes from the nuget package.\r\n\r\nNow I just added to another project the package SixLabors.ImageSharp, it references .NET Standard 2, 1.3 and 1. For that project System.IO comes from C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\MSBuild\\Microsoft\\Microsoft.NET.Build.Extensions\\net461\\lib\\System.IO.dll\r\nThe issue is that System.IO and some other dlls are no longer copied to the web application bin/ folder. Because of that the app fails to run, it requires System.IO 4.1.1.0 to be there in the bin\\ since I have a binding redirect for it.\r\n\r\nIt seems somehow related to: https://github.com/dotnet/corefx/issues/25773#issuecomment-350000563\r\n\r\nDo you have any work around?\r\n\r\n"}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"7369771065","Type":"PullRequestEvent","CreatedAt":"2018-03-13T04:54:45","Actor":"wfurt","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/pull/27344","RelatedDescription":"Closed pull request \"refactor some proxy tests using new loopback server functions and new auth\" (#27344) at dotnet/corefx","RelatedBody":"This is beginning to get some feedback. If it looks ok, I can finish rest of the tests and retire LoopbackGetRequestHttpProxy. It also should be easier to write tests for something like #27293.  "},{"Id":"7369698015","Type":"PullRequestEvent","CreatedAt":"2018-03-13T04:23:37","Actor":"danmosemsft","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/28004","RelatedDescription":"Merged pull request \"Fix unbounded stackalloc in System.IO.FileSystem\" (#28004) at dotnet/corefx","RelatedBody":""},{"Id":"7369620810","Type":"PullRequestEvent","CreatedAt":"2018-03-13T03:52:42","Actor":"Anipik","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/27844","RelatedDescription":"Merged pull request \"Tests for remove relative segments\" (#27844) at dotnet/corefx","RelatedBody":"Coreclr PR :- https://github.com/dotnet/coreclr/pull/16829\r\nRemove Relative Segments have been moved to PathIntenal in the coreclr PR. So this pr contaitns the tests for it"},{"Id":"7369608774","Type":"PullRequestEvent","CreatedAt":"2018-03-13T03:48:09","Actor":"VSadov","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/28006","RelatedDescription":"Opened pull request \"Couple simple optimizations around dynamic callsites/binding\" (#28006) at dotnet/corefx","RelatedBody":"- reduce the size of DynamicMetaObject by one field . \r\n- avoid allocation of a new matchmaker on every call in polymorphic call sites"}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"7369787766","Type":"PullRequestEvent","CreatedAt":"2018-03-13T05:01:39","Actor":"jaredpar","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/25440","RelatedDescription":"Opened pull request \"WIP: Move bootstrap phase to use NuPkg files\" (#25440) at dotnet/roslyn","RelatedBody":"When creating the compiler binary layout for bootstrapping our build scripts were doing a completely ad-hoc layout. It was meant to mimic the layout we have on disk when installed into MSBuild, dotnet, etc ... but was simply not the same. The ad-hoc layout functions by copying around build output while the NuSpecs tend to explicitly list dependencies. \r\n\r\nThe differences are small but over time have allowed a number of product bugs to creep in:\r\n\r\n- Compiler took dependencies on DLLs that never got added to NuSpec.\r\n- Targets files had relative path issues.\r\n- Props files had syntax errors but were simply not excercised in the adhoc layout. \r\n- Dependencies deployed into different locations for adhoc and NuSpec\r\n\r\nThis change address that by redefining our bootstrap layout in terms of our NuSpec file. The bootstrap phase will now construct the nupkg file, unzip it and plug the unzipped contents into our build through the props file only (exactly as our customers do). This will prevent us from having similar errors in the future. "},{"Id":"7369765366","Type":"IssuesEvent","CreatedAt":"2018-03-13T04:52:20","Actor":"jaredpar","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/25439","RelatedDescription":"Opened issue \"Move to dotnet pack\" (#25439) at dotnet/roslyn","RelatedBody":"Presently our build infrastructure uses `nuget pack` to create our NuGet packages. This means we can only build our packages on Windows. Need to move to using `dotnet pack` for package creation."},{"Id":"7369737948","Type":"PullRequestEvent","CreatedAt":"2018-03-13T04:40:35","Actor":"jcouv","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/25438","RelatedDescription":"Opened pull request \"Test EnC on expression variables in initializers and queries\" (#25438) at dotnet/roslyn","RelatedBody":"Tagging @ivanbasov @tmat @AlekseyTs "},{"Id":"7369614891","Type":"PullRequestEvent","CreatedAt":"2018-03-13T03:50:24","Actor":"VSadov","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/25430","RelatedDescription":"Merged pull request \"Merging Dev15.7.x into features/stackalloc-init\" (#25430) at dotnet/roslyn","RelatedBody":"Dev15.7.x will be the eventual target branch for the feature merge.   \r\n(features/compiler is being retired)\r\n\r\nTrivial merge with no merge conflicts - since we have just merged from features/compiler which is still fairly up-to-date.\r\n"},{"Id":"7369409591","Type":"PullRequestEvent","CreatedAt":"2018-03-13T02:34:57","Actor":"Shyam-Gupta","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/25418","RelatedDescription":"Merged pull request \"Merge dev15.7.x to dev15.7.x-vs-deps\" (#25418) at dotnet/roslyn","RelatedBody":"\nThis is an automatically generated pull request from dev15.7.x into dev15.7.x-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/dev15.7.x-to-dev15.7.x-vs-deps\ngit reset --hard upstream/dev15.7.x-vs-deps\ngit merge upstream/dev15.7.x\n# Fix merge conflicts\ngit commit\ngit push merges/dev15.7.x-to-dev15.7.x-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"7369173625","Type":"IssuesEvent","CreatedAt":"2018-03-13T01:09:50","Actor":"jinujoseph","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/25437","RelatedDescription":"Opened issue \"IDE0011 \"Add Braces\" should leave the cursor between the braces \" (#25437) at dotnet/roslyn","RelatedBody":"![image](https://user-images.githubusercontent.com/12449387/37317176-86fff10c-2620-11e8-80f4-1d32845c5ca6.png)\r\n"},{"Id":"7369072281","Type":"PullRequestEvent","CreatedAt":"2018-03-13T00:32:02","Actor":"VSadov","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/25430","RelatedDescription":null,"RelatedBody":"Dev15.7.x will be the eventual target branch for the feature merge.   \r\n(features/compiler is being retired)\r\n\r\nTrivial merge with no merge conflicts - since we have just merged from features/compiler which is still fairly up-to-date.\r\n"},{"Id":"7369072184","Type":"PullRequestEvent","CreatedAt":"2018-03-13T00:32:00","Actor":"VSadov","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/pull/25430","RelatedDescription":"Closed pull request \"Merging Dev15.7.x into features/stackalloc-init\" (#25430) at dotnet/roslyn","RelatedBody":"Dev15.7.x will be the eventual target branch for the feature merge.   \r\n(features/compiler is being retired)\r\n\r\nTrivial merge with no merge conflicts - since we have just merged from features/compiler which is still fairly up-to-date.\r\n"}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"7369566265","Type":"IssuesEvent","CreatedAt":"2018-03-13T03:31:59","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/issues/5537","RelatedDescription":"Opened issue \"Integrate ILLinker into CoreRT build\" (#5537) at dotnet/corert","RelatedBody":"CoreRT port of https://github.com/dotnet/coreclr/pull/16876"},{"Id":"7369300509","Type":"PullRequestEvent","CreatedAt":"2018-03-13T01:55:57","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5536","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#5536) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7369091746","Type":"PullRequestEvent","CreatedAt":"2018-03-13T00:39:17","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5536","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#5536) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7369068767","Type":"PullRequestEvent","CreatedAt":"2018-03-13T00:30:43","Actor":"Anipik","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5535","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#5535) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7368948581","Type":"PullRequestEvent","CreatedAt":"2018-03-12T23:48:42","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5535","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#5535) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7368787697","Type":"PullRequestEvent","CreatedAt":"2018-03-12T22:59:21","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5534","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#5534) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7368590221","Type":"PullRequestEvent","CreatedAt":"2018-03-12T22:07:37","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5534","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#5534) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7368571227","Type":"PullRequestEvent","CreatedAt":"2018-03-12T22:03:10","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5532","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#5532) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7367796292","Type":"PullRequestEvent","CreatedAt":"2018-03-12T19:26:29","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5533","RelatedDescription":"Opened pull request \"Fix interface dispatch with CppCodegen\" (#5533) at dotnet/corert","RelatedBody":"I had a quick look and this turned out to be simple enough.\r\n\r\nI remember we had trouble with the Intefaces test on Unix before, but I'm trying to enable it for CppCodegen again in the hopes that whatever the issue was, we fixed it (maybe it was unboxing stubs or something like that; I never actually looked)."},{"Id":"7367478573","Type":"PullRequestEvent","CreatedAt":"2018-03-12T18:25:16","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5532","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#5532) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7366402872","Type":"PullRequestEvent","CreatedAt":"2018-03-12T15:28:11","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5531","RelatedDescription":"Opened pull request \"Fix empty dispatch map optimization and unnormalized vtables\" (#5531) at dotnet/corert","RelatedBody":"Since we currently allow unnormalized things in the dependency graph (see #5264), we need to ensure scanner produces a dependency graph that can be queried for unnormalized vtable slices.\r\n\r\nThis fixes a regression in a ASP.NET scenario."},{"Id":"7364181138","Type":"PullRequestEvent","CreatedAt":"2018-03-12T08:24:22","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5530","RelatedDescription":"Merged pull request \"Merge nmirror to master\" (#5530) at dotnet/corert","RelatedBody":""}],"ResultType":"GitHubEvent"},"SDK":{"Events":[],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"971915245378715648","CreatedAt":"2018-03-09T01:07:06+00:00","UserScreenname":"dotnet","Text":".NET Framework 4.7.2 Developer Pack Early Access build 3056 is available! https://t.co/OjVLK9nv9f","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":38,"FavoriteCount":27,"RawContent":null}]}},"RunOn":"2018-03-13T05:30:21.3010954Z","RunDurationInMilliseconds":8345}