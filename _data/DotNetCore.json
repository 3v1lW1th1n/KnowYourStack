{"Data":{"Blog":{"FeedItems":[{"Title":".NET Core May 2018 Update","PublishedOn":"2018-05-08T22:31:30+00:00","CommentsCount":8,"FacebookCount":0,"Summary":"Today, we are releasing the .NET Core May 2018 Update. This update includes .NET Core 2.1.200 SDK and ASP.NET Core 2.0.8. Security Microsoft is releasing this security advisory to provide information...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/05/08/net-core-may-2018-update/","RawContent":null},{"Title":".NET Framework May 2018 Security and Quality Rollup","PublishedOn":"2018-05-08T21:18:17+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, we are releasing the May 2018 Security and Quality Rollup. Security CVE-2018-1039 – Windows Security Feature Bypass Vulnerability A security feature bypass vulnerability exists in Windows which...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/05/08/net-framework-may-2018-security-and-quality-rollup/","RawContent":null},{"Title":"F# language and tools update for Visual Studio 2017 version 15.7","PublishedOn":"2018-05-08T18:22:06+00:00","CommentsCount":4,"FacebookCount":0,"Summary":"We’re excited to share updates about changes to F# and F# tools which shipped with the Visual Studio 2017 version 15.7 release. Let’s dive in! Type Providers now support .NET Standard For those who...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/05/08/f-language-and-tools-update-for-visual-studio-2017-version-15-7/","RawContent":null},{"Title":"Introducing ML.NET: Cross-platform, Proven and Open Source Machine Learning Framework","PublishedOn":"2018-05-08T00:41:28+00:00","CommentsCount":19,"FacebookCount":0,"Summary":"Today at //Build 2018, we are excited to announce the preview of ML.NET, a cross-platform, open source machine learning framework. ML.NET will allow .NET developers to develop their own models and...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/05/07/introducing-ml-net-cross-platform-proven-and-open-source-machine-learning-framework/","RawContent":null},{"Title":"Announcing Entity Framework Core 2.1 RC 1","PublishedOn":"2018-05-07T18:00:05+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"Today, we are excited to announce that the first release candidate of EF Core 2.1 is available, alongside .NET Core 2.1 RC 1 and ASP.NET Core 2.1 RC 1, for broad testing, and now also for production...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/05/07/announcing-entity-framework-core-2-1-rc-1/","RawContent":null},{"Title":".NET Core 3 and Support for Windows Desktop Applications","PublishedOn":"2018-05-07T15:40:04+00:00","CommentsCount":243,"FacebookCount":0,"Summary":"At Microsoft Build Live today, we are sharing a first look at our plans for .NET Core 3. The highlight of .NET Core 3 is support for Windows desktop applications, specifically Windows Forms, Windows...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/05/07/net-core-3-and-support-for-windows-desktop-applications/","RawContent":null},{"Title":"Announcing .NET Core 2.1 RC 1","PublishedOn":"2018-05-07T15:39:20+00:00","CommentsCount":26,"FacebookCount":0,"Summary":"Today, we&#8217;re announcing .NET Core 2.1 Release Candidate 1 (RC 1). The .NET Core 2.1 RC 1 is now ready for broad testing and for production use. Our quality, reliability, and performance testing...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/05/07/announcing-net-core-2-1-rc-1/","RawContent":null},{"Title":"Announcing the .NET Framework 4.7.2","PublishedOn":"2018-04-30T20:56:19+00:00","CommentsCount":54,"FacebookCount":0,"Summary":"Today, we are happy to announce the release of the .NET Framework 4.7.2. It’s included in the Windows 10 April 2018 Update. .NET Framework 4.7.2 is also available on Windows 7+ and Windows Server 2008...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/04/30/announcing-the-net-framework-4-7-2/","RawContent":null},{"Title":"Help us plan the future of .NET!","PublishedOn":"2018-04-20T16:55:37+00:00","CommentsCount":75,"FacebookCount":0,"Summary":"We’re currently planning our next major .NET releases and would love to hear your feedback on how you interact with .NET Framework and .NET Core today. Please fill out the survey below and help shape...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/04/20/help-us-plan-the-future-of-net/","RawContent":null},{"Title":"Performance Improvements in .NET Core 2.1","PublishedOn":"2018-04-18T19:29:45+00:00","CommentsCount":48,"FacebookCount":0,"Summary":"Back before .NET Core 2.0 shipped, I wrote a post highlighting various performance improvements in .NET Core 2.0 when compared with .NET Core 1.1 and the .NET Framework. As .NET Core 2.1 is in its...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/04/18/performance-improvements-in-net-core-2-1/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"7640755266","Type":"PullRequestEvent","CreatedAt":"2018-05-08T00:32:51","Actor":"shauheen","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/102","RelatedDescription":"Opened pull request \"Update projects.json adding MLNET\" (#102) at dotnet/home","RelatedBody":""},{"Id":"7640750127","Type":"PullRequestEvent","CreatedAt":"2018-05-08T00:31:03","Actor":"shauheen","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/101","RelatedDescription":"Opened pull request \"Create mlnet.md\" (#101) at dotnet/home","RelatedBody":""},{"Id":"7559882384","Type":"PullRequestEvent","CreatedAt":"2018-04-20T06:42:59","Actor":"Cheesebaron","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/100","RelatedDescription":"Opened pull request \"Create mvvmcross.md\" (#100) at dotnet/home","RelatedBody":"Added MvvmCross as project"},{"Id":"7452103949","Type":"PullRequestEvent","CreatedAt":"2018-03-29T07:03:03","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/97","RelatedDescription":"Merged pull request \"update CLA PDF link\" (#97) at dotnet/home","RelatedBody":""},{"Id":"7419410563","Type":"IssuesEvent","CreatedAt":"2018-03-22T14:02:36","Actor":"vvavrychuk","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/issues/99","RelatedDescription":"Opened issue \"not working \"Linux Distribution\" dropdown on http://www.microsoft.com/net/learn/get-started/linux \" (#99) at dotnet/home","RelatedBody":"On the page http://www.microsoft.com/net/learn/get-started/linux dropdown \"Linux Distribution\" has no effect on the installation instruction next to him (they are always displayed for RedHat).\r\n\r\n![screenshot from 2018-03-22 16-02-19](https://user-images.githubusercontent.com/152563/37775020-6ec5778e-2dea-11e8-9ea3-b33e26c1c4e1.png)\r\n"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"7644965785","Type":"IssuesEvent","CreatedAt":"2018-05-08T17:03:40","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/67","RelatedDescription":"Opened issue \"Microsoft Security Advisory CVE-2018-0765: .NET Core Denial Of Service Vulnerability\" (#67) at dotnet/announcements","RelatedBody":"# Microsoft Security Advisory CVE-2018-0765: .NET Core Denial Of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core and .NET native version 2.0. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a denial of service vulnerability that exists when .NET Framework and .NET Core improperly process XML documents. An attacker who successfully exploited this vulnerability could cause a denial of service against a .NET Framework, .NET Core, or .NET native application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Framework, .NET Core, and .NET native applications handle XML document processing.\r\n\r\nIf your application is an ASP.NET Core application, developers are also advised to update to ASP.NET Core 2.0.8.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/Home/ **TBD**\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\n* If an application does not process signed XML, it is not affected by this vulnerability.\r\n* If your application targets .NET Core 1.x or .NET native 1.x, it is not affected as the vulnerable package is not available for these platforms.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core, .NET native, or ASP.NET Core based application that uses System.Security.Cryptography.Xml with a version of 4.4.1 or earlier.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ---------------- | -------------------------\r\nSystem.Security.Cryptography.Xml | ≤4.4.1 |  4.4.2 or later\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n.NET Core has two types of dependencies: direct and transitive. Direct dependencies are dependencies where you specifically add a package to your project, transitive dependencies occur when you add a package to your project that in turn relies on another package.\r\n\r\nFor example, the `Microsoft.AspNetCore.Mvc` package depends on the `Microsoft.AspNetCore.Mvc.Core` package. When you add a dependency on `Microsoft.AspNetCore.Mvc` in your project, you're taking a transitive dependency on `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\nAny application that has a direct or transitive dependency on the [affected package](#affected-software) can be exposed to the vulnerability if it does not meet any of the [mitigation factors](#mitigation-factors).\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n---\r\n\r\nIf you're targeting ASP.NET Core 2.0 and using the `Microsoft.AspNetCore.All` metapackage:\r\n\r\n* Update its version number to 2.0.8 to pull in updated packages that update their transitive dependencies to the fixed version of `System.Security.Cryptography.Xml`.\r\n\r\n---\r\n\r\n.NET Core projects have two types of dependencies: direct and transitive. You must update your projects using the following instructions to address both types of dependency.\r\n\r\n#### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your *csproj* file. They can be fixed by [editing the csproj file](#direct-dependencies) or using NuGet to update the dependency.\r\n\r\n#### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the *project.assets.json* file contained in the obj directory of your project.\r\n\r\nThe *project.assets.json* files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\n#### <a name=\"direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Security.Cryptography.Xml\" Version=\"4.4.1\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.Security.Cryptography.Xml` version 4.4.1.\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.Security.Cryptography.Xml` to a [fixed package number](#affected-software). Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Security.Cryptography.Xml\" Version=\"4.4.2\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\nAfter you've addressed all of your direct dependencies, you must review your transitive dependencies.\r\n\r\n#### Discovering and fixing transitive dependencies\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can [review the *project.assets.json* file](#project-assets-json).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio 2017, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a>Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `System.Security.Cryptography.Xml/4.4.0` is a reference to version 4.4.0 of `System.Security.Cryptography.Xml`.\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\n##### Fixing transitive dependencies\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.Security.Cryptography.Xml` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Security.Cryptography.Xml\" Version=\"4.4.2\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n#### Rebuilding your application\r\n\r\nFinally you must rebuild your application, test, and redeploy.\r\n\r\n---\r\n\r\nIf you're targeting .NET native for a Universal Windows Platform (UWP) application, you should update your dependencies and republish your application.\r\n\r\nIf you submit an application to the Windows Store with an outdated reference, the store will update the reference automatically, which has the potential for compatibility issues. Thus, we recommend updating your application directly and testing its functionality before resubmitting.\r\n\r\n---\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2018-0787](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-CVE-2018-0765)\r\n\r\n### Revisions\r\n\r\nV1.0 (May 8, 2018): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2018-05-08_"},{"Id":"7619224203","Type":"IssuesEvent","CreatedAt":"2018-05-02T20:28:55","Actor":"MichaelSimons","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/65","RelatedDescription":"Opened issue \".NET Framework Runtime and Builder Docker repos have merged \" (#65) at dotnet/announcements","RelatedBody":"# .NET Framework Runtime and Builder Docker repos have merged\r\n\r\nThe [microsoft/dotnet-framework-build](https://hub.docker.com/r/microsoft/dotnet-framework-build/) Docker Hub repo has been merged into the [microsoft/dotnet-framework](https://hub.docker.com/r/microsoft/dotnet-framework/) Docker Hub repo.  All new tags going forward will only be pushed to [microsoft/dotnet-framework](https://hub.docker.com/r/microsoft/dotnet-framework/).  The images in the [microsoft/dotnet-framework-build](https://hub.docker.com/r/microsoft/dotnet-framework-build/) Docker Hub repo will be retained and serviced accordingly as to not affect existing usage.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [Microsoft/dotnet-framework-docker #125](https://github.com/Microsoft/dotnet-framework-docker/issues/125)\r\n\r\n## Details\r\n\r\nThe [microsoft/dotnet-framework-build](https://hub.docker.com/r/microsoft/dotnet-framework-build/) Docker Hub repo has been merged into the [microsoft/dotnet-framework](https://hub.docker.com/r/microsoft/dotnet-framework/) Docker Hub repo.\r\n\r\n* https://github.com/Microsoft/dotnet-framework-docker/pull/123\r\n* https://github.com/Microsoft/dotnet-framework-docker/issues/78\r\n\r\nIn order to differentiate the runtime and build images, `runtime` and `sdk` distinguishing identifiers have been added to the tags.  For example, `4.7.2-runtime` and `4.7.2-sdk`.\r\n\r\nAll new tags going forward will only be pushed to [microsoft/dotnet-framework](https://hub.docker.com/r/microsoft/dotnet-framework/).   For example, the build images for 4.7.2 which was released today, only exist in [microsoft/dotnet-framework](https://hub.docker.com/r/microsoft/dotnet-framework/) repo.\r\n\r\nThe existing tags in [microsoft/dotnet-framework-build](https://hub.docker.com/r/microsoft/dotnet-framework-build/) will remain and be serviced accordingly.  For example, the stable tags such as `4.7.1-windowsservercore-1709` will continue to be patched on a monthly basis.\r\n\r\nWe recommend that as you create and maintain your code, you move to use the new `runtime` and `sdk` images from the [microsoft/dotnet-framework](https://hub.docker.com/r/microsoft/dotnet-framework/) repo.\r\n"},{"Id":"7545995438","Type":"IssuesEvent","CreatedAt":"2018-04-18T00:20:14","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/64","RelatedDescription":"Opened issue \"April 2018 .NET Updates\" (#64) at dotnet/announcements","RelatedBody":"# April 2018 .NET Updates\r\n\r\nThe following .NET updates were released this month. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Framework\r\n\r\n* No new releases. See: [.NET Framework February 2018 Security and Quality Rollup](https://blogs.msdn.microsoft.com/dotnet/2018/02/13/net-framework-february-2018-security-and-quality-rollup/).\r\n* [microsoft/dotnet-framework](https://hub.docker.com/r/microsoft/dotnet-framework/) and related Docker images were updated for [KB4093112](https://support.microsoft.com/help/4093112) and associated updates.\r\n\r\n## .NET Core\r\n\r\n* [.NET Core April 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/04/17/net-core-april-2018-update/)\r\n   * [2.0.7 Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.0/2.0.7.md)\r\n   * [1.1.8 Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.1/1.1.8.md)\r\n   * [1.0.11 Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.0/1.0.11.md)\r\n* [.NET Core 2.1 Preview 2](https://blogs.msdn.microsoft.com/dotnet/2018/04/11/announcing-net-core-2-1-preview-2/)\r\n* [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/) and related Docker images were updated for [KB4093112](https://support.microsoft.com/help/4093112) and associated updates.\r\n* Latest .NET Core security release: [.NET Core March 2018 Update](https://github.com/dotnet/core/issues/1341)\r\n\r\n## .NET for UWP\r\n\r\n* No new releases. See: [.NET for UWP January 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-for-uwp-january-2018-update/).\r\n\r\n## Previous Updates\r\n\r\n* [February 2018 Security and Quality Updates](https://github.com/dotnet/announcements/issues/59)"},{"Id":"7387413694","Type":"IssuesEvent","CreatedAt":"2018-03-15T21:18:32","Actor":"mairaw","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/announcements/issues/63","RelatedDescription":"Reopened issue \"Transport Layer Security (TLS) best practices with the .NET Framework article published\" (#63) at dotnet/announcements","RelatedBody":"# Transport Layer Security (TLS) best practices with the .NET Framework article published\r\n\r\nA new article was published that discusses the Transport Layer Security (TLS) best practices at https://docs.microsoft.com/dotnet/framework/network-programming/tls.\r\n\r\nTo ensure .NET Framework applications remain secure, the TLS version should **not** be hardcoded. .NET Framework applications should use the TLS version the operating system (OS) supports.\r\n\r\nThe (TLS) best practices article targets developers who are:\r\n* Directly using the System.Net APIs (for example, `System.Net.Http.HttpClient` and `System.Net.Security.SslStream`).\r\n* Directly using WCF clients and services using the `System.ServiceModel` namespace.\r\n* Using [Azure Cloud Services](https://azure.microsoft.com/services/cloud-services/) Web and Worker roles to host and run your application. See the [Azure Cloud Services](https://docs.microsoft.com/dotnet/framework/network-programming/tls#azure-cloud-services) section.\r\n\r\nThe article explains how to enable the strongest security available for the version of the .NET Framework that your app targets and runs on.\r\n\r\nThe section [Audit your code and make code changes](https://docs.microsoft.com/dotnet/framework/network-programming/tls#audit-your-code-and-make-code-changes) covers auditing and updating your code.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts and have any discussions with us at:\r\n\r\ndotnet/docs#4675"},{"Id":"7387391842","Type":"IssuesEvent","CreatedAt":"2018-03-15T21:13:45","Actor":"mairaw","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/63","RelatedDescription":"Closed issue \"Transport Layer Security (TLS) best practices with the .NET Framework article published\" (#63) at dotnet/announcements","RelatedBody":"# Transport Layer Security (TLS) best practices with the .NET Framework article published\r\n\r\nA new article was published that discussed the Transport Layer Security (TLS) best practices at https://docs.microsoft.com/dotnet/framework/network-programming/tls.\r\n\r\nTo ensure .NET Framework applications remain secure, the TLS version should **not** be hardcoded. .NET Framework applications should use the TLS version the operating system (OS) supports.\r\n\r\nThe (TLS) best practices article targets developers who are:\r\n* Directly using the System.Net APIs (for example, `System.Net.Http.HttpClient` and `System.Net.Security.SslStream`).\r\n* Directly using WCF clients and services using the `System.ServiceModel` namespace.\r\n* Using [Azure Cloud Services](https://azure.microsoft.com/services/cloud-services/) Web and Worker roles to host and run your application. See the [Azure Cloud Services](https://docs.microsoft.com/dotnet/framework/network-programming/tls#azure-cloud-services) section.\r\n\r\nThe article explains how to enable the strongest security available for the version of the .NET Framework that your app targets and runs on.\r\n\r\nThe section [Audit your code and make code changes](https://docs.microsoft.com/dotnet/framework/network-programming/tls#audit-your-code-and-make-code-changes) covers auditing and updating your code.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts and have any discussions with us at:\r\n\r\ndotnet/docs#4675"}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"7659153387","Type":"PullRequestEvent","CreatedAt":"2018-05-11T04:41:45","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/17954","RelatedDescription":"Merged pull request \"Fix Avx.ConvertToSingle flags\" (#17954) at dotnet/coreclr","RelatedBody":"Fixes #17951 "},{"Id":"7659153377","Type":"IssuesEvent","CreatedAt":"2018-05-11T04:41:45","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/17951","RelatedDescription":"Closed issue \"[RyuJIT] Avx.ConvertToSingle intrinsic not recognized\" (#17951) at dotnet/coreclr","RelatedBody":"I'm doing some work with the new X86 intrinsics support, and it seems like some of the intrinsics might not be recognized by RyuJIT yet.  Is there some documentation for what's fully implemented vs what's missing?\r\n\r\nIn this sample program, `Avx.SetAllVector256` works but then the program crashes on `Avx.ConvertToSingle`\r\n\r\n```C#\r\nusing System;\r\nusing System.Runtime.Intrinsics.X86;\r\nusing System.Runtime.CompilerServices;\r\n\r\nclass Program\r\n{\r\n\tstatic void Main(string[] args)\r\n\t{\r\n\t\tif (!Avx.IsSupported)\r\n\t\t{\r\n\t\t\tConsole.WriteLine(\"No AVX :(\");\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tFoo();\r\n\t}\r\n\r\n\t[MethodImpl(MethodImplOptions.NoInlining)]\r\n\tstatic void Foo()\r\n\t{\r\n\t\tvar v = Avx.SetAllVector256(42f);\r\n\t\tfloat f = Avx.ConvertToSingle(v);\r\n\t\tConsole.WriteLine(f);\r\n\t}\r\n}\r\n\r\n```\r\n\r\nI've just built the current master from coreclr to enable RyuJIT debugging, and the issue is still there.  Here's the JitDump output\r\n\r\n```\r\n****** START compiling Program:Foo() (MethodHash=eeb3d2db)\r\nGenerating code for Windows x64\r\nOPTIONS: compCodeOpt = BLENDED_CODE\r\nOPTIONS: compDbgCode = false\r\nOPTIONS: compDbgInfo = true\r\nOPTIONS: compDbgEnC  = false\r\nOPTIONS: compProcedureSplitting   = false\r\nOPTIONS: compProcedureSplittingEH = false\r\nOPTIONS: Stack probing is DISABLED\r\nIL to import:\r\nIL_0000  22 00 00 28 42    ldc.r4       42.000000\r\nIL_0005  28 01 00 00 2b    call         0x2B000001\r\nIL_000a  0a                stloc.0\r\nIL_000b  06                ldloc.0\r\nIL_000c  28 10 00 00 0a    call         0xA000010\r\nIL_0011  0b                stloc.1\r\nIL_0012  07                ldloc.1\r\nIL_0013  28 11 00 00 0a    call         0xA000011\r\nIL_0018  2a                ret\r\nHW Intrinsic SIMD Candidate Type Vector256`1 with Base Type Single\r\n  Found type Hardware Intrinsic SIMD Vector256<float>\r\n\r\nlvaGrabTemp returning 2 (V02 tmp0) (a long lifetime temp) called for OutgoingArgSpace.\r\n; Initial local variable assignments\r\n;\r\n;  V00 loc0           simd32\r\n;  V01 loc1            float\r\n;  V02 OutArgs        lclBlk (na)\r\n*************** In compInitDebuggingInfo() for Program:Foo()\r\ngetVars() returned cVars = 0, extendOthers = true\r\ninfo.compVarScopesCount = 2\r\n        VarNum  LVNum         Name      Beg     End\r\n 0:     00h     00h       V00 loc0      000h    019h\r\n 1:     01h     01h       V01 loc1      000h    019h\r\ninfo.compStmtOffsetsCount    = 0\r\ninfo.compStmtOffsetsImplicit = 0005h ( STACK_EMPTY CALL_SITE )\r\n*************** In fgFindBasicBlocks() for Program:Foo()\r\nJump targets:\r\n  none\r\nNew Basic Block BB01 [0000] created.\r\nBB01 [000..019)\r\nIL Code Size,Instr   25,   9, Basic Block count   1, Local Variable Num,Ref count   3,  4 for method Program:Foo()\r\nOPTIONS: opts.MinOpts() == false\r\nBasic block list for 'Program:Foo()'\r\n\r\n--------------------------------------------------------------------------------------------------------------------------------------\r\nBBnum BBid ref try hnd                 weight    [IL range]     [jump]      [EH region]         [flags]\r\n--------------------------------------------------------------------------------------------------------------------------------------\r\nBB01 [0000]  1                             1     [000..019)        (return)\r\n--------------------------------------------------------------------------------------------------------------------------------------\r\n*************** In impImport() for Program:Foo()\r\n\r\nimpImportBlockPending for BB01\r\n\r\nImporting BB01 (PC=000) of 'Program:Foo()'\r\n    [ 0]   0 (0x000) ldc.r4 42.000000000000000\r\n    [ 1]   5 (0x005) call 2B000001\r\nIn Compiler::impImportCall: opcode is call, kind=0, callRetType is struct, structSize is 32\r\n  Known type Vector256<float>\r\n  Known type Vector256<float>\r\n\r\n    [ 1]  10 (0x00a) stloc.0\r\n\r\n               [000006] ------------              *  STMT      void  (IL 0x000...  ???)\r\n               [000002] ------------              |  /--*  HWIntrinsic simd32 float SetAllVector256\r\n               [000001] ------------              |  |  \\--*  CNS_DBL   float  42.000000000000000\r\n               [000005] -A------R---              \\--*  ASG       simd32 (copy)\r\n               [000003] D-----------                 \\--*  LCL_VAR   simd32 V00 loc0\r\n\r\n    [ 0]  11 (0x00b) ldloc.0\r\n    [ 1]  12 (0x00c) call 0A000010\r\nIn Compiler::impImportCall: opcode is call, kind=0, callRetType is float, structSize is 0\r\n\r\n```\r\n"},{"Id":"7659149177","Type":"PullRequestEvent","CreatedAt":"2018-05-11T04:39:53","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/17962","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/corefx\" (#17962) at dotnet/coreclr","RelatedBody":"This PR contains mirrored changes from dotnet/corefx\n\n\n**Please REBASE this PR when merging**"},{"Id":"7659042075","Type":"IssuesEvent","CreatedAt":"2018-05-11T03:53:33","Actor":"benaadams","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/17963","RelatedDescription":"Opened issue \"Jit can generate pointless movs\" (#17963) at dotnet/coreclr","RelatedBody":"e.g.\r\n```asm\r\n mov    r8d,r8d\r\n mov    eax,eax\r\n```\r\nExample\r\n\r\nThe Checksum routine [Magma.Common/Checksum.cs](https://github.com/ProjectMagma/Magma/blob/4daec54a0719e187540a9a981f94cbe2b0ca69cf/src/Magma.Common/Checksum.cs#L11-L93)\r\n\r\n```csharp\r\npublic static ushort Calcuate(ref byte buffer, int length)\r\n{\r\n    ref var current = ref buffer;\r\n    ulong sum = 0;\r\n\r\n    while (length >= sizeof(ulong))\r\n    {\r\n        length -= sizeof(ulong);\r\n\r\n        var ulong0 = Unsafe.As<byte, ulong>(ref current);\r\n        current = ref Unsafe.Add(ref current, sizeof(ulong));\r\n\r\n        // Add with carry\r\n        sum += ulong0;\r\n        if (sum < ulong0)\r\n        {\r\n            sum++;\r\n        }\r\n    }\r\n\r\n    if ((length & sizeof(uint)) != 0)\r\n    {\r\n        var uint0 = Unsafe.As<byte, uint>(ref current);\r\n        current = ref Unsafe.Add(ref current, sizeof(uint));\r\n\r\n        // Add with carry\r\n        sum += uint0;\r\n        if (sum < uint0)\r\n        {\r\n            sum++;\r\n        }\r\n    }\r\n\r\n    if ((length & sizeof(ushort)) != 0)\r\n    {\r\n        var ushort0 = Unsafe.As<byte, ushort>(ref current);\r\n        current = ref Unsafe.Add(ref current, sizeof(ushort));\r\n\r\n        // Add with carry\r\n        sum += ushort0;\r\n        if (sum < ushort0)\r\n        {\r\n            sum++;\r\n        }\r\n    }\r\n\r\n    if ((length & sizeof(byte)) != 0)\r\n    {\r\n        var byte0 = current;\r\n\r\n        // Add with carry\r\n        sum += byte0;\r\n        if (sum < byte0)\r\n        {\r\n            sum++;\r\n        }\r\n    }\r\n\r\n    // Fold down to 16 bits\r\n\r\n    var uint1 = (uint)(sum >> 32);\r\n    var uint2 = (uint)sum;\r\n\r\n    // Add with carry\r\n    uint1 += uint2;\r\n    if (uint1 < uint2)\r\n    {\r\n        uint1++;\r\n    }\r\n\r\n    var ushort2 = (ushort)uint1;\r\n    var ushort1 = (ushort)(uint1 >> 16);\r\n\r\n    // Add with carry\r\n    ushort1 = (ushort)(ushort1 + ushort2);\r\n    if (ushort1 < ushort2)\r\n    {\r\n        ushort1++;\r\n    }\r\n\r\n    // Invert to get ones-complement result \r\n    return (ushort)~ushort1;\r\n}\r\n```\r\nGenerates asm with 3 pointless movs\r\n```asm\r\n mov    rax,rcx  \r\n xor    ecx,ecx  \r\n cmp    edx,8  \r\n jl     00007FFB767741B4  \r\n add    edx,0FFFFFFF8h  \r\n mov    r8,qword ptr [rax]  \r\n add    rax,8  \r\n add    rcx,r8  \r\n cmp    rcx,r8  \r\n jae    00007FFB767741AF  \r\n inc    rcx  \r\n cmp    edx,8  \r\n jge    00007FFB7677419A  \r\n test   dl,4  \r\n je     00007FFB767741CE  \r\n mov    r8d,dword ptr [rax]  \r\n add    rax,4  \r\n mov    r8d,r8d                 ; pointless mov \r\n add    rcx,r8  \r\n cmp    rcx,r8  \r\n jae    00007FFB767741CE  \r\n inc    rcx  \r\n test   dl,2  \r\n je     00007FFB767741E9  \r\n movzx  r8d,word ptr [rax]  \r\n add    rax,2  \r\n mov    r8d,r8d                 ; pointless mov   \r\n add    rcx,r8  \r\n cmp    rcx,r8  \r\n jae    00007FFB767741E9  \r\n inc    rcx  \r\n test   dl,1  \r\n je     00007FFB767741FE  \r\n movzx  eax,byte ptr [rax]  \r\n mov    eax,eax                 ; pointless mov   \r\n add    rcx,rax  \r\n cmp    rcx,rax  \r\n jae    00007FFB767741FE  \r\n inc    rcx  \r\n mov    rax,rcx  \r\n shr    rax,20h  \r\n add    eax,ecx  \r\n cmp    eax,ecx  \r\n jae    00007FFB7677420D  \r\n inc    eax  \r\n movzx  edx,ax  \r\n shr    eax,10h  \r\n movzx  eax,ax  \r\n add    eax,edx  \r\n movzx  eax,ax  \r\n cmp    eax,edx  \r\n jge    00007FFB76774224  \r\n inc    eax  \r\n movzx  eax,ax  \r\n not    eax  \r\n movzx  eax,ax  \r\n ret    \r\n```"},{"Id":"7658907161","Type":"PullRequestEvent","CreatedAt":"2018-05-11T02:57:49","Actor":"noahfalk","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/17953","RelatedDescription":"Merged pull request \"update profiler API status to reflect that #13153 is resolved\" (#17953) at dotnet/coreclr","RelatedBody":"https://github.com/dotnet/coreclr/issues/13153 was resolved. Updating the profiling API docs to update this. "},{"Id":"7658834267","Type":"PullRequestEvent","CreatedAt":"2018-05-11T02:28:40","Actor":"dotnet-bot","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/17962","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/corefx\" (#17962) at dotnet/coreclr","RelatedBody":"This PR contains mirrored changes from dotnet/corefx\n\n\n**Please REBASE this PR when merging**"},{"Id":"7658617299","Type":"PullRequestEvent","CreatedAt":"2018-05-11T01:01:34","Actor":"dotnet-maestro-bot","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/17961","RelatedDescription":"Opened pull request \"Update BuildTools, CoreClr, CoreFx to preview1-02810-02, preview1-26511-01, preview1-26510-05, respectively (master)\" (#17961) at dotnet/coreclr","RelatedBody":"/cc @dotnet/coreclr-auto-update-notify"},{"Id":"7658606656","Type":"PullRequestEvent","CreatedAt":"2018-05-11T00:57:16","Actor":"sandreenko","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/17960","RelatedDescription":"Opened pull request \"Add explicit null check for VSD via tail call stub.\" (#17960) at dotnet/coreclr","RelatedBody":"Always add explicit null check before calling tail call stub that calls VSD.\r\n\r\nFixes #17585.\r\n\r\nFor arm64 it hits #6675."}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"7658954911","Type":"IssuesEvent","CreatedAt":"2018-05-11T03:16:52","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/9256","RelatedDescription":"Closed issue \"Why so many SDKs?\" (#9256) at dotnet/cli","RelatedBody":"\r\n![image](https://user-images.githubusercontent.com/16289643/39903916-11a30644-5508-11e8-8b61-f9fdd13c57f6.png)\r\n\r\nWhy they are coexist？ Not  Cover upgrade\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"},{"Id":"7658874289","Type":"IssuesEvent","CreatedAt":"2018-05-11T02:44:33","Actor":"717009629","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/9256","RelatedDescription":"Opened issue \"Why so many SDKs?\" (#9256) at dotnet/cli","RelatedBody":"\r\n![image](https://user-images.githubusercontent.com/16289643/39903916-11a30644-5508-11e8-8b61-f9fdd13c57f6.png)\r\n\r\nWhy they are coexist？ Not  Cover upgrade\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"},{"Id":"7658372896","Type":"IssuesEvent","CreatedAt":"2018-05-10T23:26:45","Actor":"abk-x","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/9250","RelatedDescription":"Closed issue \"Ansi Color On Linux\" (#9250) at dotnet/cli","RelatedBody":"Looking for some guidance on how to debug this issue. How is dotnet cli determining if Ansi support is available? (Edit: I have seen https://github.com/dotnet/cli/issues/1977, but this was a very long time ago and I believe that this was resolved)\r\n\r\n## Steps to reproduce\r\n1. `dotnet new console`\r\n2. `dotnet add package Microsoft.DotNet.Cli.Utils --version 2.0.0` (this is what dotnet build/run uses)\r\n3. Following code:\r\n\r\n```\r\nusing System;\r\nusing Microsoft.DotNet.Cli.Utils;\r\n\r\nnamespace test\r\n{\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            var console = AnsiConsole.GetOutput();\r\n            console.WriteLine(\"\\x1b[31mRedText\");\r\n\r\n            Console.ForegroundColor = ConsoleColor.Red;\r\n            Console.WriteLine(\"RedText2\");\r\n        }\r\n    }\r\n}\r\n```\r\n4. `dotnet run`\r\n\r\n## Expected  behavior\r\nBoth RedText and RedText2 should appear red.\r\n\r\n## Actual behavior\r\nBoth text appear white.\r\nAdditionally:\r\n\r\n`$ script -q -c \"dotnet run\" out.txt && cat -A out.txt` produces:\r\n```\r\nScript started on 2018-05-10 13:53:40+1000$\r\n^[[?1h^[=^[[?1h^[=^[[?1h^[=^[[39;49mRedText^M$\r\n^[[39;49mRedText2^M$\r\n$\r\nScript done on 2018-05-10 13:53:42+1000$\r\n```\r\n\r\nWhich doesn't appear to contain the correct ANSI escape chars for the correct colors (red is 31, 39 is default console color) , furthermore, dotnet build does not seem to output colors, unless I specify `/clp:ForceConsoleColor` (which is only possible for dotnet build, not dotnet run). I have also tried setting DOTNET_CLI_CONTEXT_ANSI_PASS_THRU=1 in the environment, but this does not change the result.\r\n\r\n## Environment data\r\n\r\n$TERM is xterm-256color\r\n$SHELL is bash\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.1.300-rc1-008673\r\n Commit:    f5e3ddbe73\r\n\r\nRuntime Environment:\r\n OS Name:     debian\r\n OS Version:  \r\n OS Platform: Linux\r\n RID:         debian-x64\r\n Base Path:   /usr/share/dotnet/sdk/2.1.300-rc1-008673/\r\n\r\nHost (useful for support):\r\n  Version: 2.1.0-rc1\r\n  Commit:  eb9bc92051\r\n\r\n.NET Core SDKs installed:\r\n  2.1.300-rc1-008673 [/usr/share/dotnet/sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.0-rc1-final [/usr/share/dotnet/shared/Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.0-rc1-final [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.0-rc1 [/usr/share/dotnet/shared/Microsoft.NETCore.App]\r\n```\r\n\r\n\r\n\r\n\r\n\r\n\r\n"},{"Id":"7658266246","Type":"IssuesEvent","CreatedAt":"2018-05-10T22:51:59","Actor":"mikem8361","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/9255","RelatedDescription":"Opened issue \"The \"https://dot.net/v1/dotnet-install.sh\" script doesn't work on Fedora or OpenSuse\" (#9255) at dotnet/cli","RelatedBody":"Download the above script and run it on Fedora or OpenSuse to install a version of .NET Core. It fails with \"find\" or \"tput\" not found. It seems that not all of the Linux distros have these common utilities.\r\n\r\n\r\n\r\n\r\n\r\n"},{"Id":"7656479107","Type":"IssuesEvent","CreatedAt":"2018-05-10T16:24:51","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/9243","RelatedDescription":"Closed issue \"Issue when running deployed application\" (#9243) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\nWe have built an angular 5 application on .NET core 2.1.300-rc1-008673 and when we try to publish and run the application we get the following error:\r\n\r\n(abbreviated stack trace)\r\n Unable to start Kestrel.\r\nSystem.IO.IOException: Failed to bind to address http://localhost:9080. ---> System.AggregateException: One or more errors occurred. (Method 'Rent' in type 'System.Buffers.MemoryPool' from assembly 'System.IO.Pipelines, Version=0.1.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60' does not have an implementation.) (Method 'Rent' in type 'System.Buffers.MemoryPool' from assembly 'System.IO.Pipelines, Version=0.1.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60' does not have an implementation.) ---> System.TypeLoadException: Method 'Rent' in type 'System.Buffers.MemoryPool' from assembly 'System.IO.Pipelines, Version=0.1.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60' does not have an implementation.\r\n   at Microsoft.AspNetCore.Server.Kestrel.Transport.Libuv.Internal.LibuvThread..ctor(LibuvTransport transport)\r\n   at Microsoft.AspNetCore.Server.Kestrel.Transport.Libuv.LibuvTransport.BindAsync()\r\n   at Microsoft.AspNetCore.Server.Kestrel.Core.KestrelServer.<>c__DisplayClass22_0`1.<<StartAsync>g__OnBind|0>d.MoveNext()\r\n\r\n(we tried several ports not just this one using the environment variable ASPNETCORE_URLS and nothing works)\r\n\r\n## Expected  behavior\r\nThe application should theoretically launch without errors\r\n\r\n## Actual behavior\r\nThe application fails to run with the error message from above\r\n\r\n## Environment data\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.1.300-rc1-008673\r\n Commit:    f5e3ddbe73\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.14393\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.300-rc1-008673\\\r\n\r\nHost (useful for support):\r\n  Version: 2.1.0-rc1\r\n  Commit:  eb9bc92051\r\n\r\n.NET Core SDKs installed:\r\n  2.1.300-rc1-008673 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.0-rc1-final [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.0-rc1-final [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.0-rc1 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]"}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"7656799964","Type":"PullRequestEvent","CreatedAt":"2018-05-10T17:30:13","Actor":"dotnet-maestro-bot","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/723","RelatedDescription":"Opened pull request \"Update BuildTools to preview1-02810-01 (master)\" (#723) at dotnet/standard","RelatedBody":""},{"Id":"7652677945","Type":"PullRequestEvent","CreatedAt":"2018-05-09T23:15:58","Actor":"weshaggard","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/721","RelatedDescription":"Merged pull request \"Update BuildTools to preview1-02808-01 (master)\" (#721) at dotnet/standard","RelatedBody":""}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"7659180343","Type":"IssuesEvent","CreatedAt":"2018-05-11T04:54:05","Actor":"caesar1995","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/14674","RelatedDescription":"Closed issue \"[Cookie] System.Net.Cookie doesn't conform to RFC 2965\" (#14674) at dotnet/corefx","RelatedBody":"In RFC 2965, section 3.2.2 it states\r\n>    Version=value\r\n      REQUIRED.  The value of the Version attribute, a decimal integer,\r\n      identifies the version of the state management specification to\r\n      which the cookie conforms.  For this specification, Version=1\r\n      applies.\r\n\r\nIn the msdn documentation for [Cookie.Version](https://msdn.microsoft.com/en-us/library/system.net.cookie.version(v=vs.110).aspx), it states\r\n>    The default value for the Version property is 0, complying with the original Netscape specification. If the value is explicitly set to 1, then this Cookie must conform to RFC 2109.\r\n\r\nRFC 2109 was obsoleted by RFC 2965 so as per the newer spec, specifying Version=1 means RFC 2965 applies. RFC 2109 requires a specified domain to be have a leading dot whereas RFC 2965 does not require this. When making a request using HttpClient to an HTTP server which returns a cookie with an explicit domain without a leading dot and specifying version=1, the cookie is dropped. Here is some simple code reproducing the issue.\r\n```csharp\r\n            var mycookie = \"lang=en-US; Domain=example.com;Path=/;version=1\";\r\n            var uri = new Uri(\"http://example.com\");\r\n            CookieContainer container = new CookieContainer();\r\n            container.SetCookies(uri, mycookie);\r\n```\r\nThis throws a CookieException when the cookie is valid. The cookie parsing code in HttpClient swallows this exception.\r\n\r\nRFC 2965 is further obsoleted by RFC 6265 which makes no mention of the Version attribute but does say that there is no need for a leading dot, and if it is there, to strip it out and ignore it. So either the latest RFC should apply in which case the example cookie I provided should parse, or the latest RFC which claims it should apply which mentions the Version attribute should apply."},{"Id":"7659178279","Type":"IssuesEvent","CreatedAt":"2018-05-11T04:53:09","Actor":"caesar1995","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/18013","RelatedDescription":"Closed issue \"[Cookie] HttpClient does not properly parse all Set-Cookie headers\" (#18013) at dotnet/corefx","RelatedBody":"Hello,\r\n\r\nI'm currently trying to build a .Net Core application that automates some HTTP requests.\r\nIn the first request I receive several cookies which should be sent back to the server on the second request.\r\nFor demonstration purposes I have created a small PHP script that sends some `Set-Cookie` headers similar to the style I receive them from the actual application.\r\nThe source code of this script is https://gist.github.com/Nothing4You/6623cda16eb2c2c5b4d3d9106b95a6ce. You can find a live version at https://hosting.rep.pm/cookietest.php.\r\nI have tested the script using a web browser (Firefox), curl (in a linux shell) aswell as using python requests, which all handle cookies and show me the expected output in the second request:\r\n```\r\nCookie[test1]: test1value\r\nCookie[test2]: test=2&value=2\r\nCookie[test3]: $test-3\r\nCookie[test4]: test4\r\n```\r\n\r\nHowever, if I try to do the same thing using `System.Net.Http.HttpClient` it only sets the 2 out of 4 cookies.\r\n\r\nAccording to Visual Studio I'm using SDK version 1.1.1.\r\nHttpClient is the following version:\r\n```\r\nAssembly: System.Net.Http, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\r\nAssembly location: .nuget\\packages\\system.net.http\\4.3.0\\ref\\netstandard1.3\\System.Net.Http.dll\r\n```\r\n\r\nExample code: https://gist.github.com/Nothing4You/c04af6781f8520efb4921ef144733731"},{"Id":"7659177339","Type":"IssuesEvent","CreatedAt":"2018-05-11T04:52:40","Actor":"caesar1995","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/27520","RelatedDescription":"Closed issue \"[Cookie] HttpClient does not handle cookies with a non-matching path\" (#27520) at dotnet/corefx","RelatedBody":"_From @dgweldon on February 15, 2018 22:28_\n\nI have an interesting problem related to OpenID Connect Authentication in ASP .NET Core.  We have an Identity Server 3 OIDC implementation that uses a client certificate authentication provider.  When migrating to ASP .NET Core, we had no problem integrating with our existing OIDC server.  At least when launched from a browser (Edge, Chrome).\r\n\r\nHowever, we have a small ClickOnce application (using the full .NET framework) that also authenticates and makes calls through the ASP.  It does this by using a HttpClient with a certificate selected by the user.  This ClickOnce application fails during authentication.  The code is pretty simple.\r\n\r\n```\r\nusing (WebRequestHandler certHandler = new WebRequestHandler\r\n{\r\n   CookieContainer = new CookieContainer(),\r\n   ClientCertificateOptions = ClientCertificateOption.Manual,\r\n   UseDefaultCredentials = true,\r\n   AllowAutoRedirect = true\r\n})\r\n{\r\n   // Init\r\n   certHandler.ClientCertificates.Add(certificate);\r\n\r\n   using (HttpClient client = new HttpClient(certHandler) { BaseAddress = baseUri })\r\n   {\r\n      HttpResponseMessage response = a_client.GetAsync(ssoLoginUri).GetAwaiter().GetResult();\r\n      response.EnsureSuccessStatusCode();\r\n\r\n      // Process self submitting form responses as long as needed\r\n      do\r\n      {\r\n         response = ProcessFormAutoSubmit(a_client, response);\r\n      }\r\n      while (response != null);\r\n   }\r\n}\r\n```\r\n\r\nAfter moving to ASP .NET Core, this code no longer works.  The issue is that when MVC redirects to Identity Server, it includes 2 cookies (.ASPNetCore.Correlation.OpenIdConnect and .AspNetCore.OpenIdConnect.Nonce).  Those cookies never make it into my CookieContainer (other cookies from Identity Server are handled fine).  When the signin-oidc callback is made, MVC fails with the error: \"Correlation failed: .AspNetCore.Correlation.OpenIdConnect.9N18bzJ1hcpG5YjRMw_QgUJ_PnapfVx2lBmdvb8Q_zA' cookie not found.\".  Makes sense.  But why is the cookie not added?\r\n\r\nAfter playing around, I was able to get around this by handling each redirect and manually adding any cookies that had a path (both of which the 2 missing cookies had).  The code now looks like this:\r\n\r\n```\r\n...\r\nHttpResponseMessage response = a_client.GetAsync(ssoLoginUri).GetAwaiter().GetResult();\r\nRegex cookiePathRegex = new Regex(@\"path=([^;]*);?\");\r\n\r\ndo\r\n{\r\n   // Ideally we would just use automatic redirects in the HttpClient, but we need to intercept cookies for special processing\r\n   if (response.StatusCode == HttpStatusCode.Redirect)\r\n   {\r\n      Uri requestUri = response.Headers.Location;\r\n      if (!requestUri.IsAbsoluteUri)\r\n      {\r\n         requestUri = UriUtil.Combine(response.RequestMessage.RequestUri.GetLeftPart(UriPartial.Authority), response.Headers.Location.OriginalString);\r\n      }\r\n\r\n      response = a_client.GetAsync(requestUri).GetAwaiter().GetResult();\r\n\r\n      IEnumerable<string> responseCookies = null;\r\n      if (response.Headers.TryGetValues(\"set-cookie\", out responseCookies))\r\n      {\r\n         // Cookies that have a path aren't currently supported with HttpClient\r\n         // Such cookies are used with the new ASP .NET Core OpenId Connect implementation\r\n         // Just manually add these cookies\r\n         foreach (string sCookie in responseCookies)\r\n         {\r\n            Match pathMatch = cookiePathRegex.Match(sCookie);\r\n            if (pathMatch.Success)\r\n            {\r\n               a_webRequestHandler.CookieContainer.SetCookies(\r\n                  UriUtil.Combine(requestUri.GetLeftPart(UriPartial.Authority), pathMatch.Groups[1].Value),\r\n                  cookiePathRegex.Replace(sCookie, String.Empty));\r\n            }\r\n         }\r\n      }\r\n   }\r\n   else\r\n   {\r\n      response.EnsureSuccessStatusCode();\r\n      response = ProcessFormAutoSubmit(a_client, response);\r\n   }\r\n}\r\nwhile (response != null);\r\n```\r\n\r\n\r\nThis works, but seems like a hack.  Any idea why these cookies aren't handled by HttpClient?\r\n\r\nI realize this may not be directly be an ASP .NET Core issue, but wanted to start here since it seems to be related to cookies from ASP .NET Core.\r\n\r\nThanks,\r\n\r\n--David\n\n_Copied from original issue: aspnet/Home#2880_"},{"Id":"7659177026","Type":"IssuesEvent","CreatedAt":"2018-05-11T04:52:32","Actor":"caesar1995","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/21250","RelatedDescription":"Closed issue \"[Cookie] CookieContainer has issues with cookies set to a different path than the current request uri path\" (#21250) at dotnet/corefx","RelatedBody":"When a server sends back a cookie with a path different than the current request uri, CookieContainer throws an exception indicating that the path portion of the cookie is invalid. For example:\r\n\r\n* HttpClient send a request to `/Home/About`\r\n* The server answers with a redirect response to `/tfp/Identity/signinsignup/...` and sets a cookie to `/signin-oidc`\r\n* Internally, CookieContainer throws or silently fails on line https://github.com/dotnet/corefx/blob/master/src/System.Net.Primitives/src/System/Net/Cookie.cs#L508\r\n\r\nI believe this is due to the fact that an old version of the spec required any path on any cookie set by the server to be a prefix path of the current request URI. This doesn't seem to be the case in the latest version of the standard.\r\n\r\nhttps://tools.ietf.org/html/rfc6265 (new version)\r\nhttps://tools.ietf.org/html/rfc2109 (old version)\r\n\r\nFor reference, this works fine on all major browsers (Chrome, Firefox, Edge,...)\r\n\r\nWe ran into this on our authentication tests (that run the scenario mentioned above).\r\n\r\nLimiting the path check in the code linked above to only the case when the cookie refers to an old version of the spec should be enough."},{"Id":"7659176748","Type":"IssuesEvent","CreatedAt":"2018-05-11T04:52:23","Actor":"caesar1995","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/19166","RelatedDescription":"Closed issue \"[Cookie] .net core 2.0 HttpClient cookie handling bug \" (#19166) at dotnet/corefx","RelatedBody":"I tested client application and found bug related to cookies. Here i provide test server in python. Basically, first GET request sets cookie on client, second POST request followed by redirect updates that cookie.\r\n\r\nExample work as intended in python requests, curl,  System.Net.Http.WinHttpHandler 4.3.0.\r\n\r\nExpected Response:\r\n\r\n-- Done Set\r\n-- Done Index: Set-Cookie: p=not_overwritten\r\n-- Done Index: Set-Cookie: p=overwritten_on_post_with_redirect\r\n\r\nWhen i test it with .Net Core 2.0 on Windows i get this:\r\n\r\n-- Done Set\r\n-- Done Index: No cookie!\r\n-- Done Index: No cookie!\r\n\r\nWhen i test it with .Net Core 2.0 on Debian 8 i get this:\r\n\r\n-- Done Set\r\n-- Done Index: No cookie!\r\n-- Done Index: Set-Cookie: p=overwritten_on_post_with_redirect\r\n\r\nIf i modify my server code **to include Path in cookies**, everything starts to work as intended. This bug could be related to https://github.com/dotnet/corefx/issues/18013\r\n\r\nHere is test server : https://gist.github.com/ism/b5ecb70cb9f947435ac863ef5c27c7f0\r\nHere is python requests test code: https://gist.github.com/ism/1bf4a0003c797d264193db559c8f20ac\r\nHere is .net core 2.0 code (Windows & Debian) : https://gist.github.com/ism/b9cce55d399883c0a689cf9ec37de44d\r\nHere is WinHttpHandler test code: https://gist.github.com/ism/3580fe5c0c2fccbc0c3e6856814c6626\r\n\r\nExample raw headers output given by server on first GET request:\r\n\r\nHTTP/1.1 200 OK\r\nDate: Sun, 29 Apr 2017 14:26:31 GMT\r\nServer: CherryPy/10.2.1\r\nContent-Length: 11\r\nContent-Type: text/html;charset=utf-8\r\nSet-Cookie: p=not_overwritten; httponly\r\n\r\n\r\n\r\ndotnet --info\r\n\r\n.NET Command Line Tools (2.0.0-preview2-005905)\r\n\r\nProduct Information:\r\n Version:            2.0.0-preview2-005905\r\n Commit SHA-1 hash:  2cc5612fec\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  6.1.7601\r\n OS Platform: Windows\r\n RID:         win7-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.0.0-preview2-005905\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.0-preview2-002093-00\r\n  Build    : 1a195046fd92bd73d993d804bea2f4506c2b56f1"},{"Id":"7659172766","Type":"IssuesEvent","CreatedAt":"2018-05-11T04:50:32","Actor":"caesar1995","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/29651","RelatedDescription":"Opened issue \"[Cookie] Implement RFC 6265 for Cookie\" (#29651) at dotnet/corefx","RelatedBody":"Current Cookie implementation follows RFC 2109, which obsoleted by RFC 6265.\r\n\r\nPer RFC 2109:\r\n\r\n```\r\n4.3.2  Rejecting Cookies\r\n\r\n   To prevent possible security or privacy violations, a user agent\r\n   rejects a cookie (shall not store its information) if any of the\r\n   following is true:\r\n\r\n   * The value for the Path attribute is not a prefix of the request-\r\n     URI.\r\n\r\n   * The value for the Domain attribute contains no embedded dots or\r\n     does not start with a dot.\r\n\r\n   * The value for the request-host does not domain-match the Domain\r\n     attribute.\r\n```\r\n\r\nRFC 6265 is more tolerant for accepting Cookies, and removes those restrictions. Modern browsers support RFC 6265, and we should match the behavior.\r\n\r\nEspecially, there are three areas needed to be improved/changed. Path scoping, domain restriction, and other fields (for example, Version attribute, also obsoleted by RFC 6265). Currently we have 5 related issues because of not implementing RFC 6265.\r\n\r\nPath related issues:\r\n- [ ] #27520 \r\n- [ ] #21250 \r\n- [ ] #19166\r\n\r\nDomain related issues:\r\n- [ ] #18013 \r\n- [ ] #14674\r\n\r\nThe suggested way to approach this umbrella issue is that, adding tests first to demonstrate correct behavior\r\n\r\n1. verify the correctness of the Cookie data by testing with browser, \r\n2. disable them using this issue number ,\r\n3. be prepared that those tests may fail on Framework, which still follows old RFC, \r\n\r\nthen submitting PRs to make product change.\r\n\r\nExternal contributions are welcomed!"},{"Id":"7658967660","Type":"IssuesEvent","CreatedAt":"2018-05-11T03:22:12","Actor":"davidsh","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/27037","RelatedDescription":"Closed issue \"Test failed: System.Net.Http.WinHttpHandlerFunctional.Tests.ServerCertificateTest / UseCallback_CallbackReturnsFailure_ThrowsInnerSecurityFailureException\" (#27037) at dotnet/corefx","RelatedBody":"Failed tests: System.Net.Http.WinHttpHandlerFunctional.Tests.ServerCertificateTest.UseCallback_CallbackReturnsFailure_ThrowsInnerSecurityFailureException\r\n\r\nDetails:\r\nhttps://ci.dot.net/job/dotnet_corefx/job/master/job/outerloop_netcoreapp_win7_release/398/testReport/System.Net.Http.WinHttpHandlerFunctional.Tests/ServerCertificateTest/UseCallback_CallbackReturnsFailure_ThrowsInnerSecurityFailureException/\r\n\r\nConfiguration: Outerloop_netcoreapp_win7_debug\r\n\r\nMESSAGE:\r\nAssert.Equal() Failure\\r\\nExpected: 12175\\r\\nActual: 12017\r\n+++++++++++++++++++\r\nSTACK TRACE:\r\nat System.Net.Http.WinHttpHandlerFunctional.Tests.ServerCertificateTest.UseCallback_CallbackReturnsFailure_ThrowsInnerSecurityFailureException() --- End of stack trace from previous location where exception was thrown ---"},{"Id":"7658834270","Type":"IssuesEvent","CreatedAt":"2018-05-11T02:28:40","Actor":"mobi12","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/29650","RelatedDescription":"Opened issue \"I have a problem\" (#29650) at dotnet/corefx","RelatedBody":"On ubuntu18.04 \r\n下列软件包有未满足的依赖关系：\r\n dotnet-sdk-2.1.4 : 依赖: dotnet-runtime-2.0.5 但是它将不会被安装\r\nE: 无法修正错误，因为您要求某些软件包保持现状，就是它们破坏了软件包间的依赖关系。\r\nand if I try install dotnet-runtime\r\n下列软件包有未满足的依赖关系：\r\n dotnet-runtime-2.0.5 : 依赖: libicu57 但无法安装它\r\n                        依赖: dotnet-hostfxr-2.0.5 但是它将不会被安装\r\nthen I install libicu57\r\n没有可用的软件包 libicu57，但是它被其它的软件包引用了。\r\n这可能意味着这个缺失的软件包可能已被废弃，\r\n或者只能在其他发布源中找到\r\n"},{"Id":"7658832350","Type":"PullRequestEvent","CreatedAt":"2018-05-11T02:27:55","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/29636","RelatedDescription":"Merged pull request \"Improvements to FormatMessage\" (#29636) at dotnet/corefx","RelatedBody":"This PR does two things.\r\n\r\nFirst, it unifies our copies of Interop.FormatMessage.cs between the shared copy from CoreLib and the corefx copy; we now just use the one shared with CoreLib, but replaced with the one from corefx that had a few improvements from https://github.com/dotnet/corefx/commit/98227f1a18c1859c5614a0f045a09660f34e6cc1.\r\n\r\nSecond, it fixes a long-standing annoyance where error messages from Win32 have their ending period removed.  I don't know why this was done, as it's been there effectively forever, but there does not seem to be a good reason for it.  Example:\r\n```C#\r\nusing System;\r\nusing System.ComponentModel;\r\n\r\nclass Test\r\n{\r\n    public static void Main()\r\n    {\r\n        for (int i = 1; i < 20; i++) Console.WriteLine(new Win32Exception(i).Message);\r\n    }\r\n}\r\n```\r\nBefore:\r\n```\r\nIncorrect function\r\nThe system cannot find the file specified\r\nThe system cannot find the path specified\r\nThe system cannot open the file\r\nAccess is denied\r\nThe handle is invalid\r\nThe storage control blocks were destroyed\r\nNot enough memory resources are available to process this command\r\nThe storage control block address is invalid\r\nThe environment is incorrect\r\nAn attempt was made to load a program with an incorrect format\r\nThe access code is invalid\r\nThe data is invalid\r\nNot enough memory resources are available to complete this operation\r\nThe system cannot find the drive specified\r\nThe directory cannot be removed\r\nThe system cannot move the file to a different disk drive\r\nThere are no more files\r\nThe media is write protected\r\n```\r\nAfter:\r\n```\r\nIncorrect function.\r\nThe system cannot find the file specified.\r\nThe system cannot find the path specified.\r\nThe system cannot open the file.\r\nAccess is denied.\r\nThe handle is invalid.\r\nThe storage control blocks were destroyed.\r\nNot enough memory resources are available to process this command.\r\nThe storage control block address is invalid.\r\nThe environment is incorrect.\r\nAn attempt was made to load a program with an incorrect format.\r\nThe access code is invalid.\r\nThe data is invalid.\r\nNot enough memory resources are available to complete this operation.\r\nThe system cannot find the drive specified.\r\nThe directory cannot be removed.\r\nThe system cannot move the file to a different disk drive.\r\nThere are no more files.\r\nThe media is write protected.\r\n```\r\n\r\ncc: @jkotas, @danmosemsft "}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"7659040334","Type":"PullRequestEvent","CreatedAt":"2018-05-11T03:52:45","Actor":"mavasani","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/26690","RelatedDescription":"Merged pull request \"Handle dynamic operations in CFG\" (#26690) at dotnet/roslyn","RelatedBody":"Specifically: [IDynamicInvocationOperation](http://source.roslyn.io/#Microsoft.CodeAnalysis/Operations/IDynamicInvocationOperation.cs,19), [IDynamicIndexerAccessOperation](http://source.roslyn.io/#Microsoft.CodeAnalysis/Operations/IDynamicIndexerAccessOperation.cs,18) and [IDynamicMemberReferenceOperation](http://source.roslyn.io/#Microsoft.CodeAnalysis/Operations/IDynamicMemberReferenceOperation.cs,19)"},{"Id":"7658947330","Type":"PullRequestEvent","CreatedAt":"2018-05-11T03:13:48","Actor":"CyrusNajmabadi","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/26764","RelatedDescription":null,"RelatedBody":"Fixes https://github.com/dotnet/roslyn/issues/26686\r\n\r\nTagging @dpoeschl .  Note: this is not ready for review.  I still need to do all the testing here.  But this gives you an idea about how i think this should actually be done in a real and supported manner in our API without scary edge cases.\r\n\r\nNote: one nice thing about this model is that it actually cleans up a bunch of stuff in our code.  For example, all the places we used to have to jam on special suffixes (like ```<>```) which we then had to special case later.  "},{"Id":"7658947228","Type":"PullRequestEvent","CreatedAt":"2018-05-11T03:13:45","Actor":"CyrusNajmabadi","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/pull/26764","RelatedDescription":"Closed pull request \"Switch to a more appropriate model for supporting prefix/suffix text in completoin items.\" (#26764) at dotnet/roslyn","RelatedBody":"Fixes https://github.com/dotnet/roslyn/issues/26686\r\n\r\nTagging @dpoeschl .  Note: this is not ready for review.  I still need to do all the testing here.  But this gives you an idea about how i think this should actually be done in a real and supported manner in our API without scary edge cases.\r\n\r\nNote: one nice thing about this model is that it actually cleans up a bunch of stuff in our code.  For example, all the places we used to have to jam on special suffixes (like ```<>```) which we then had to special case later.  "},{"Id":"7658898785","Type":"PullRequestEvent","CreatedAt":"2018-05-11T02:54:23","Actor":"sharwell","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/26787","RelatedDescription":"Opened pull request \"Convert to AsyncPackage\" (#26787) at dotnet/roslyn","RelatedBody":"<details><summary>Ask Mode template not completed</summary>\r\n\r\n<!-- This template is not always required. If you aren't sure about whether it's needed or want help filling out the sections,\r\nsubmit the pull request and then ask us for help. :) -->\r\n\r\n### Customer scenario\r\n\r\nWhat does the customer do to get into this situation, and why do we think this\r\nis common enough to address for this release.  (Granted, sometimes this will be\r\nobvious \"Open project, VS crashes\" but in general, I need to understand how\r\ncommon a scenario is)\r\n\r\n### Bugs this fixes\r\n\r\n(either VSO or GitHub links)\r\n\r\n### Workarounds, if any\r\n\r\nAlso, why we think they are insufficient for RC vs. RC2, RC3, or RTW\r\n\r\n### Risk\r\n\r\nThis is generally a measure our how central the affected code is to adjacent\r\nscenarios and thus how likely your fix is to destabilize a broader area of code\r\n\r\n### Performance impact\r\n\r\n(with a brief justification for that assessment (e.g. \"Low perf impact because no extra allocations/no complexity changes\" vs. \"Low\")\r\n\r\n### Is this a regression from a previous update?\r\n\r\n### Root cause analysis\r\n\r\nHow did we miss it?  What tests are we adding to guard against it in the future?\r\n\r\n### How was the bug found?\r\n\r\n(E.g. customer reported it vs. ad hoc testing)\r\n\r\n### Test documentation updated?\r\n\r\nIf this is a new non-compiler feature or a significant improvement to an existing feature, update https://github.com/dotnet/roslyn/wiki/Manual-Testing once you know which release it is targeting.\r\n\r\n</details>\r\n"},{"Id":"7658897461","Type":"PullRequestEvent","CreatedAt":"2018-05-11T02:53:50","Actor":"sharwell","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/pull/26321","RelatedDescription":"Closed pull request \"[WIP] OwnedDisposable<T>\" (#26321) at dotnet/roslyn","RelatedBody":"* Implement transferable disposables with `OwnedDisposable<T>`\r\n* Apply `OwnedDisposable<T>` to `RemoteHostClient.Connection`\r\n\r\nThe types and patterns provided in this change work towards a design goal of addressing https://github.com/dotnet/roslyn/issues/25880#issuecomment-377967573 in a world where the following hold:\r\n\r\n* The `IDisposable` analyzers are enabled with severity Error\r\n* Warnings for the analyzers must not be suppressed\r\n\r\n<details><summary>Ask Mode template not completed</summary>\r\n\r\n<!-- This template is not always required. If you aren't sure about whether it's needed or want help filling out the sections,\r\nsubmit the pull request and then ask us for help. :) -->\r\n\r\n### Customer scenario\r\n\r\nWhat does the customer do to get into this situation, and why do we think this\r\nis common enough to address for this release.  (Granted, sometimes this will be\r\nobvious \"Open project, VS crashes\" but in general, I need to understand how\r\ncommon a scenario is)\r\n\r\n### Bugs this fixes\r\n\r\n(either VSO or GitHub links)\r\n\r\n### Workarounds, if any\r\n\r\nAlso, why we think they are insufficient for RC vs. RC2, RC3, or RTW\r\n\r\n### Risk\r\n\r\nThis is generally a measure our how central the affected code is to adjacent\r\nscenarios and thus how likely your fix is to destabilize a broader area of code\r\n\r\n### Performance impact\r\n\r\n(with a brief justification for that assessment (e.g. \"Low perf impact because no extra allocations/no complexity changes\" vs. \"Low\")\r\n\r\n### Is this a regression from a previous update?\r\n\r\n### Root cause analysis\r\n\r\nHow did we miss it?  What tests are we adding to guard against it in the future?\r\n\r\n### How was the bug found?\r\n\r\n(E.g. customer reported it vs. ad hoc testing)\r\n\r\n### Test documentation updated?\r\n\r\nIf this is a new non-compiler feature or a significant improvement to an existing feature, update https://github.com/dotnet/roslyn/wiki/Manual-Testing once you know which release it is targeting.\r\n\r\n</details>\r\n"},{"Id":"7658895633","Type":"PullRequestEvent","CreatedAt":"2018-05-11T02:53:02","Actor":"CyrusNajmabadi","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/26764","RelatedDescription":null,"RelatedBody":"Fixes https://github.com/dotnet/roslyn/issues/26686\r\n\r\nTagging @dpoeschl .  Note: this is not ready for review.  I still need to do all the testing here.  But this gives you an idea about how i think this should actually be done in a real and supported manner in our API without scary edge cases.\r\n\r\nNote: one nice thing about this model is that it actually cleans up a bunch of stuff in our code.  For example, all the places we used to have to jam on special suffixes (like ```<>```) which we then had to special case later.  "},{"Id":"7658895546","Type":"PullRequestEvent","CreatedAt":"2018-05-11T02:52:59","Actor":"CyrusNajmabadi","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/pull/26764","RelatedDescription":"Closed pull request \"Switch to a more appropriate model for supporting prefix/suffix text in completoin items.\" (#26764) at dotnet/roslyn","RelatedBody":"Fixes https://github.com/dotnet/roslyn/issues/26686\r\n\r\nTagging @dpoeschl .  Note: this is not ready for review.  I still need to do all the testing here.  But this gives you an idea about how i think this should actually be done in a real and supported manner in our API without scary edge cases.\r\n\r\nNote: one nice thing about this model is that it actually cleans up a bunch of stuff in our code.  For example, all the places we used to have to jam on special suffixes (like ```<>```) which we then had to special case later.  "}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"7659155682","Type":"PullRequestEvent","CreatedAt":"2018-05-11T04:42:48","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5795","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#5795) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7658601111","Type":"PullRequestEvent","CreatedAt":"2018-05-11T00:55:03","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5793","RelatedDescription":"Merged pull request \"Extract class library composition into `.targets`\" (#5793) at dotnet/corert","RelatedBody":"Contributes to #5662. Still not putting that library under a `Condition = Exe` because I'm not quite sure how many concepts `System.Private.DeveloperExperience.Console` is conflating (it doesn't seem like it's doing only what the name implies).\r\n\r\nI'm doing this mostly so that the compiler is more hack-friendly for an after work project of mine."},{"Id":"7658517356","Type":"PullRequestEvent","CreatedAt":"2018-05-11T00:20:36","Actor":"hippiehunter","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5794","RelatedDescription":"Opened pull request \"improved llvm generated variable names for WASM\" (#5794) at dotnet/corert","RelatedBody":"@morganbr \r\nThis is to follow up on the work done in #5784, it tries to pipe through as much info as possible when generating the names for llvm variables. Its not perfect, but I think it dramatically improves the readability of most common cases."},{"Id":"7658289053","Type":"PullRequestEvent","CreatedAt":"2018-05-10T22:58:50","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5793","RelatedDescription":"Opened pull request \"Extract class library composition into `.targets`\" (#5793) at dotnet/corert","RelatedBody":"Contributes to #5662. Still not putting that library under a `Condition = Exe` because I'm not quite sure how many concepts `System.Private.DeveloperExperience.Console` is conflating (it doesn't seem like it's doing only what the name implies).\r\n\r\nI'm doing this mostly so that the compiler is more hack-friendly for an after work project of mine."},{"Id":"7658227125","Type":"PullRequestEvent","CreatedAt":"2018-05-10T22:39:49","Actor":"morganbr","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5784","RelatedDescription":"Merged pull request \"fix dup instruction result to no longer reference the original memory in WASM\" (#5784) at dotnet/corert","RelatedBody":"@morganbr \r\nFix #5614 \r\nI ended up fixing the LoadExpressionEntry.Duplicate method to actually do a value copy, along with fixing what looks like bad copy pasta in AddressExpressionEntry.Duplicate that was ending up changing the meaning of the StackEntry when it was duplicated.\r\n\r\nI think I got the right order of what's a copy and what's the original, but please pay special attention to the order of the StackEntries that was changed in ImportDup.  "},{"Id":"7658227121","Type":"IssuesEvent","CreatedAt":"2018-05-10T22:39:49","Actor":"morganbr","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/issues/5614","RelatedDescription":"Closed issue \"Dup opcode redoing loads instead of remembering results\" (#5614) at dotnet/corert","RelatedBody":" The ```dup``` opcode implementation isn't remembering loaded values, it's redoing their loads. Usually that's the same, but in the case of:\r\n```\r\nsomeArray[index++] = somethingToStore;\r\n```\r\nThe compiler generates\r\n```\r\nldloc.0 // someArray\r\nldloc.1 // index\r\ndup\r\nldc.i4.1\r\nadd\r\nstloc.1 // store the incremented value\r\nldloc.2 // somethingToStore\r\nstelem // should be indexed based on the original value of index that was dup'd\r\n```\r\nDue to this bug, it stores the incremented value and then reloads it instead of remembering the previous value (and ends up writing to the wrong array index)."},{"Id":"7657406932","Type":"PullRequestEvent","CreatedAt":"2018-05-10T19:33:31","Actor":"stephentoub","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5792","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#5792) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7656993780","Type":"PullRequestEvent","CreatedAt":"2018-05-10T18:09:09","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5792","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#5792) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7655306148","Type":"IssuesEvent","CreatedAt":"2018-05-10T12:47:24","Actor":"dgorbach","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/issues/5791","RelatedDescription":"Opened issue \"MissingMetadataException at System.Linq.Expressions.Expression`1.Compile\" (#5791) at dotnet/corert","RelatedBody":"Given this extended HelloWorld-Program:\r\n```\r\n    public class Person\r\n    {\r\n        public string Name { get; set; }\r\n    }\r\n\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            Expression<Func<Person, string>> e = x => x.Name;\r\n\r\n            var f = e.Compile();\r\n\r\n            var p = new Person() { Name = \"Joe\" };\r\n\r\n            Console.Write($\"Hello, my name is '{f(p)}'.\");\r\n\r\n        }\r\n    }\r\n``` \r\n\r\nfrom Microsoft.DotNet.ILCompiler -v 1.0.0-alpha-26430-01 onwards this programm fails:\r\n```\r\nUnhandled Exception: System.Reflection.MissingMetadataException: This operation cannot be carried out because metadata for the following object was removed for performance reasons:\\n\\n  <unavailable>\\n\\nNo further information is available. Rebuild in debug mode for better information.\\n\\n\r\n   at HelloWorld!<BaseAddress>+0xa532c\r\n   at HelloWorld!<BaseAddress>+0x1587e0\r\n   at HelloWorld!<BaseAddress>+0x41d28\r\n   at HelloWorld!<BaseAddress>+0xa6753\r\n   at HelloWorld!<BaseAddress>+0xa6066\r\n   at HelloWorld!<BaseAddress>+0xa64d6\r\n   at HelloWorld!<BaseAddress>+0xa54f6\r\n   at HelloWorld!<BaseAddress>+0xc1faf\r\n   at HelloWorld!<BaseAddress>+0xc3c2f\r\n   at HelloWorld!<BaseAddress>+0xc3dfd\r\n   at HelloWorld!<BaseAddress>+0xb97d1\r\n   at System.Linq.Expressions.Expression`1.Compile(Boolean) + 0x23\r\n   at HelloWorld.Program.Main(String[]) + 0xbc\r\n   at HelloWorld!<BaseAddress>+0x6460fa\r\n```\r\n\r\nwith-v 1.0.0-alpha-26428-01 and earlier the result is:\r\n```\r\nHello, my name is 'Joe'.\r\n```\r\nCode and rd.xml: [HelloWorld.zip](https://github.com/dotnet/corert/files/1991592/HelloWorld.zip), to reproduce, follow the instructions in README.md\r\n\r\n\r\n"},{"Id":"7653154455","Type":"PullRequestEvent","CreatedAt":"2018-05-10T02:11:31","Actor":"tarekgh","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5790","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#5790) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7652789171","Type":"PullRequestEvent","CreatedAt":"2018-05-09T23:54:33","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5790","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#5790) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"}],"ResultType":"GitHubEvent"},"SDK":{"Events":[{"Id":"7658480565","Type":"PullRequestEvent","CreatedAt":"2018-05-11T00:05:48","Actor":"nguerrera","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/sdk/pull/2229","RelatedDescription":null,"RelatedBody":"## Issues fixed\r\n\r\n#2226 \r\n\r\n## Description of Issue\r\n\r\nRunning `dotnet clean` on a pristine working copy with no project.assets.json files present will fail.\r\n\r\nAlso impacts `msbuild /t:Clean` and Clean from VS with auto-restore disabled.\r\n\r\nThis regressed from preview 2 to RTM and was reported by a customer.\r\n\r\n## Customer Impact\r\n\r\nCan't clean without doing restore first, which is extremely unintuitive: why do I need to restore things in order to delete things?\r\nAnother workaround is to use `git clean` to obliterate everything instead of using the build target.\r\n\r\n## Risk\r\n\r\nLow\r\n\r\n## Testing\r\n\r\nRegression coverage added as a unit test\r\n\r\n## Implementation notes\r\n\r\nIdeally, we wouldn't read the assets file at all on Clean, but there are complications around rebuild with that, so it is tracked #2233 and not fixed here. A test is added that will fail if the naive fix for #2233. \r\n\r\nInstead, this change takes the conservative approach of reverting to the 2.1.300-preview2 (and all releases before that) behavior of having Clean only read the assets file when present.\r\n\r\nI've also replaced the SuppressAssetsLogMessages and UnsuppressAssetsLogMessages with _SdkBeforeClean and _SdkBeforeRebuild for two reasons:\r\n\r\n1. These have never shipped in an RTM release and I don't want them to be considered supported extensibility points. Hence the \"_\". In addressing #2233, we may find a better way to handle issues with cleaning.\r\n2.  I didn't want to start a pattern of adding more target pairs every time something is wrong with clean."},{"Id":"7658480457","Type":"PullRequestEvent","CreatedAt":"2018-05-11T00:05:46","Actor":"nguerrera","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/pull/2229","RelatedDescription":"Closed pull request \"Fix regression in clean when no assets file is present\" (#2229) at dotnet/sdk","RelatedBody":"## Issues fixed\r\n\r\n#2226 \r\n\r\n## Description of Issue\r\n\r\nRunning `dotnet clean` on a pristine working copy with no project.assets.json files present will fail.\r\n\r\nAlso impacts `msbuild /t:Clean` and Clean from VS with auto-restore disabled.\r\n\r\nThis regressed from preview 2 to RTM and was reported by a customer.\r\n\r\n## Customer Impact\r\n\r\nCan't clean without doing restore first, which is extremely unintuitive: why do I need to restore things in order to delete things?\r\nAnother workaround is to use `git clean` to obliterate everything instead of using the build target.\r\n\r\n## Risk\r\n\r\nLow\r\n\r\n## Testing\r\n\r\nRegression coverage added as a unit test\r\n\r\n## Implementation notes\r\n\r\nIdeally, we wouldn't read the assets file at all on Clean, but there are complications around rebuild with that, so it is tracked #2233 and not fixed here. A test is added that will fail if the naive fix for #2233. \r\n\r\nInstead, this change takes the conservative approach of reverting to the 2.1.300-preview2 (and all releases before that) behavior of having Clean only read the assets file when present.\r\n\r\nI've also replaced the SuppressAssetsLogMessages and UnsuppressAssetsLogMessages with _SdkBeforeClean and _SdkBeforeRebuild for two reasons:\r\n\r\n1. These have never shipped in an RTM release and I don't want them to be considered supported extensibility points. Hence the \"_\". In addressing #2233, we may find a better way to handle issues with cleaning.\r\n2.  I didn't want to start a pattern of adding more target pairs every time something is wrong with clean."},{"Id":"7658350051","Type":"IssuesEvent","CreatedAt":"2018-05-10T23:18:50","Actor":"gordon-matt","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/issues/2235","RelatedDescription":"Opened issue \"How do I copy only specific packages to the output directory in .NET Core 2.0?\" (#2235) at dotnet/sdk","RelatedBody":"I have a framework with a plugin system that I am migrating from MVC5 to .NET Core 2.0. These plugins are installed and uninstalled by an admin user at runtime in the production environment.\r\n\r\nOne problem I am facing is that there is no \"Copy Local\" option for NuGet references the way there was for references in the older .NET Framework.\r\n\r\nI did find `<CopyLocalLockFileAssemblies>true</CopyLocalLockFileAssemblies>` but that copies everything. I ended up with probably about 100 references I didn't need just for the one very small plugin I tested that on. What I mean by \"didn't need\" is that those packages are already referenced by the main web app (all the MVC, Entity Framework and other Microsoft DLLs, etc). I'd like to only copy the few packages to local output directory that are unique to those plugins. For example, I have a Redis Caching plugin that references a NuGet package called **StackExchange.Redis** and this is not copied to the output directory unless I set `CopyLocalLockFileAssemblies` which as I said, copies everything.\r\n\r\nIs there any way I can specify to only copy the ones I want? If not, I'd like to request that such an option be created.\r\n\r\n> **NOTE:** I'm not sure if this is the right repo to be adding this issue to. If not, please let me know the correct one and I will move it"},{"Id":"7657815024","Type":"PullRequestEvent","CreatedAt":"2018-05-10T20:57:43","Actor":"wli3","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/2234","RelatedDescription":"Opened pull request \"Let EmbedAppNameInHost task call the csharp class\" (#2234) at dotnet/sdk","RelatedBody":"Prerequisite for https://github.com/dotnet/sdk/pull/2230\r\n\r\nThat csharp class was extracted and copied to CLI first. Doing so can help reduce the duplication of cli and sdk work in the future https://github.com/dotnet/cli/issues/9027\r\n\r\nAlso, Shim generation on PackAsTool need to use the EmbedAppNameInHostUtil, since compared to the original task, it can embed relative path, not just a file name. https://github.com/dotnet/sdk/pull/2230/files#diff-a19564bd6fa2c5ce365c212cb5b11fb7R80\r\n"},{"Id":"7657812404","Type":"IssuesEvent","CreatedAt":"2018-05-10T20:57:12","Actor":"nguerrera","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/issues/2233","RelatedDescription":"Opened issue \"Clean target should not read assets file, issues with /t:Clean;Build\" (#2233) at dotnet/sdk","RelatedBody":"Currently, the Clean target ends up triggering a read of the assets file if it exists. \r\n\r\nThis is due to the following competing concerns:\r\n\r\n1. Assets file resolution is responsible for populating transitive project references\r\n2. Transitive project references must be added before AssignProjectConfiguration\r\n3. Clean must run AssignProjectConfiguration in order to clean referenced projects\r\n\r\nWe don't need the transitive project references to clean, but the problem is that once AssignProjectConfiguration is run, it won't re-run if there's a subsequent invocation of the Build task.\r\n\r\nWe have some code to special case clean, and it is smart enough to not kick in if the build is triggered by /t:rebuild, but not if /t:build;clean is used. \r\n\r\nIssues with /t:Clean;Build \r\n* When there has not been a prior restore, it will not trigger \"assets file is missing, run restore\", but instead resolve no assets and move on to compilaton that will fail to resolve anything.\r\n* It will hide all assets log messages\r\n\r\nSo to be clear, this issue tracks two related things:\r\n1. /t:Clean;Build should work the same as /t:Rebuild and /t:Clean in all cases.\r\n2. /t:Clean alone should never read the assets file\r\n"},{"Id":"7657536610","Type":"IssuesEvent","CreatedAt":"2018-05-10T20:00:28","Actor":"tmat","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/issues/2232","RelatedDescription":"Opened issue \"GenerateDepsFile throws ArgumentException when building project with dependency on a package of the same name\" (#2232) at dotnet/sdk","RelatedBody":"Repro: [cycle.zip](https://github.com/dotnet/sdk/files/1993060/cycle.zip)\r\n\r\nThe zip contains project `cycle.csproj` and a package `cycle.nupkg`.\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <TargetFramework>netstandard2.0</TargetFramework>\r\n    <RestoreSources>$(MSBuildThisProjectDirectory)toolset</RestoreSources>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <PackageReference Include=\"cycle\" Version=\"1.0.0\" PrivateAssets=\"all\" />\r\n  </ItemGroup>\r\n\r\n  <!-- \r\n    Workaround for https://github.com/NuGet/Home/issues/6754).\r\n  -->\r\n  <PropertyGroup>\r\n    <PackageId>*$(MSBuildProjectFullPath)*</PackageId>\r\n  </PropertyGroup>\r\n\r\n  <Target Name=\"_UpdatePackageId\" BeforeTargets=\"$(PackDependsOn)\" >\r\n    <PropertyGroup>\r\n      <PackageId>$(MSBuildProjectName)</PackageId>\r\n    </PropertyGroup>\r\n  </Target>\r\n</Project>\r\n```\r\n"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"994438149693620225","CreatedAt":"2018-05-10T04:45:05+00:00","UserScreenname":"dotnet","Text":"Bye bye! See you next year for #MSBuild 👋 https://t.co/IwcXQwKarV","Source":"<a href=\"http://twitter.com/download/iphone\" rel=\"nofollow\">Twitter for iPhone</a>","RetweetCount":100,"FavoriteCount":10,"RawContent":null},{"Id":"993982168476012544","CreatedAt":"2018-05-08T22:33:10+00:00","UserScreenname":"dotnet","Text":".NET Core May 2018 Update https://t.co/OZkHLwpebZ","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":56,"FavoriteCount":34,"RawContent":null},{"Id":"993982051735879680","CreatedAt":"2018-05-08T22:32:43+00:00","UserScreenname":"dotnet","Text":".NET Framework May 2018 Security and Quality Rollup https://t.co/jmOfJy1TEn","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":13,"FavoriteCount":7,"RawContent":null}]}},"RunOn":"2018-05-11T05:30:23.8608633Z","RunDurationInMilliseconds":8266}