{"Data":{"Blog":{"FeedItems":[{"Title":"New and improved NuGet Search is here!","PublishedOn":"2019-08-23T03:31:26+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"It’s been a long time coming, and today we are excited to announce the new and improved search on NuGet.org leveraging Azure Search. We want to start this post with a huge thanks to you, the NuGet...","Href":"https://devblogs.microsoft.com/nuget/new-and-improved-nuget-search/","RawContent":null},{"Title":"Surfacing GitHub Usage for packages on NuGet.org","PublishedOn":"2019-07-17T20:00:23+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"There are several criteria you can use today to evaluate NuGet packages. We received feedback that you would like even more information to help choose the right packages. We&#8217;re excited to...","Href":"https://devblogs.microsoft.com/nuget/surfacing-github-usage-for-packages-on-nuget-org/","RawContent":null},{"Title":"NuGet Spring 2019 Roadmap","PublishedOn":"2019-04-10T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We published our last NuGet roadmap in June last year. Many of the features announced were major additions to NuGet and we have been hard at work to implement those over the last few months. In this...","Href":"https://devblogs.microsoft.com/nuget/nuget-spring-2019-roadmap/","RawContent":null},{"Title":"Enable repeatable package restores using a lock file","PublishedOn":"2018-12-17T08:00:00+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"With PackageReference, NuGet always tries to produce the same closure of package dependencies if the input package reference list has not changed. However, there are a few scenarios where it may not...","Href":"https://devblogs.microsoft.com/nuget/enable-repeatable-package-restores-using-a-lock-file/","RawContent":null},{"Title":"Lock down your dependencies using configurable trust policies","PublishedOn":"2018-12-05T08:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"For the past several months we have focused on various features to improve package security and trust. Around a year back, we had announced our plans on various signing functionalities that we have...","Href":"https://devblogs.microsoft.com/nuget/lock-down-your-dependencies-using-configurable-trust-policies/","RawContent":null},{"Title":"Improved package debugging experience with the NuGet.org symbol server","PublishedOn":"2018-11-16T08:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Starting today, you can publish symbol packages to the NuGet.org symbol server. With NuGet.org as a single service provider for libraries and symbols, package authors and consumers will have a...","Href":"https://devblogs.microsoft.com/nuget/improved-package-debugging-experience-with-the-nuget-org-symbol-server/","RawContent":null},{"Title":"Introducing Source Code Link for NuGet packages","PublishedOn":"2018-08-27T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"NuGet.org now supports surfacing source code repository link for NuGet packages. This will enable package authors to surface both the project&#8217;s website and the source repository using the...","Href":"https://devblogs.microsoft.com/nuget/introducing-source-code-link-for-nuget-packages/","RawContent":null},{"Title":"NuGet.org starts repo-signing packages","PublishedOn":"2018-08-10T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"In May, we implemented Stage 1 and enabled support for any NuGet.org user to submit signed packages to NuGet.org. Today, we are announcing Stage 2 of our NuGet package signing journey &#8211; tamper...","Href":"https://devblogs.microsoft.com/nuget/introducing-repository-signatures/","RawContent":null},{"Title":"NuGet Summer 2018 Roadmap","PublishedOn":"2018-07-02T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"This blog post provides insights into the NuGet team plans for the upcoming quarter (July &#8211; Sep 2018). In the March 2018 NuGet Spring 2018 Roadmap, we had outlined Package Signing,...","Href":"https://devblogs.microsoft.com/nuget/nuget-summer-2018-roadmap/","RawContent":null},{"Title":"Introducing signed package submissions to NuGet.org","PublishedOn":"2018-05-22T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"In September 2017, we announced our plans to improve the security of the NuGet ecosystem by introducing the ability for package authors to sign packages. Today, we want to announce support for any...","Href":"https://devblogs.microsoft.com/nuget/introducing-signed-package-submissions/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"10286380843","Type":"PullRequestEvent","CreatedAt":"2019-08-26T22:39:18","Actor":"robertmuehsig","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/7484","RelatedDescription":"Opened pull request \"Documenation for #7475 - SQL 2016 prerequisite\" (#7484) at NuGet/NuGetGallery","RelatedBody":"This should \"fix\" https://github.com/NuGet/NuGetGallery/issues/7475\r\n\r\nAdd a point for the SQL 2016 dependency in the readme. Nothing fancy and I'm open for wording chances ;)"},{"Id":"10287194277","Type":"IssuesEvent","CreatedAt":"2019-08-26T16:09:28","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7448","RelatedDescription":"Closed issue \"[Azure Search] Run E2E tests after Catalog2AzureSearch deployment\" (#7448) at NuGet/NuGetGallery","RelatedBody":""},{"Id":"10287167571","Type":"IssuesEvent","CreatedAt":"2019-08-26T16:03:08","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/2405","RelatedDescription":"Closed issue \"Improve search on the gallery\" (#2405) at NuGet/NuGetGallery","RelatedBody":"We want to tweak search to provide better results overall. This is a place holder bug, please add samples here so when we do the work we can consider many cases at once.\r\n1. https://github.com/NuGet/NuGetGallery/issues/7486 - Satellite package should stay hidden\r\n2. https://github.com/NuGet/Home/issues/257 - Download count should count a bit more.\r\n3. Can we consider page hits as well? Perhaps using Bing as input\r\n"},{"Id":"10287162886","Type":"IssuesEvent","CreatedAt":"2019-08-26T16:02:05","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7486","RelatedDescription":"Opened issue \"Satellite package should stay hidden\" (#7486) at NuGet/NuGetGallery","RelatedBody":"Split out from: https://github.com/nuget/nugetgallery/issues/2405\r\n\r\nToday, some package searches return a lot of satellite packages.\r\n\r\nLocalized satellite packages:\r\nhttps://docs.microsoft.com/en-us/nuget/create-packages/creating-localized-packages#localized-satellite-packages\r\n\r\nExample:\r\nhttps://www.nuget.org/packages?q=humanizer\r\n![image](https://user-images.githubusercontent.com/94054/63729052-cb7a3700-c81a-11e9-9a3a-43bcc05b4844.png)\r\n"},{"Id":"10286699435","Type":"IssuesEvent","CreatedAt":"2019-08-26T14:29:26","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7354","RelatedDescription":"Closed issue \"[Queue-Back] Handle check validator messages in orchestrator\" (#7354) at NuGet/NuGetGallery","RelatedBody":""},{"Id":"10286692510","Type":"IssuesEvent","CreatedAt":"2019-08-26T14:28:16","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7439","RelatedDescription":"Closed issue \"[Queue-Back] Add feature flag support for validation jobs\" (#7439) at NuGet/NuGetGallery","RelatedBody":""},{"Id":"10286473515","Type":"IssuesEvent","CreatedAt":"2019-08-26T13:53:32","Actor":"skofman1","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7485","RelatedDescription":"Opened issue \"Investigate package download performance in Australia\" (#7485) at NuGet/NuGetGallery","RelatedBody":"We got feedback that package download from Australia is slow:\r\nhttps://twitter.com/thenickrandolph/status/1165034353589534722\r\n\r\nWe should setup CatchPoint test to see if there's a widespread issue or this is localized to the customer's network."},{"Id":"10286015944","Type":"IssuesEvent","CreatedAt":"2019-08-26T12:45:25","Actor":"agr","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7241","RelatedDescription":"Closed issue \"[Icons] E2E tests for embedded icons\" (#7241) at NuGet/NuGetGallery","RelatedBody":"Tests should cover correct publishing of packages with embedded icons and generation of correct V3 responses."},{"Id":"10286015457","Type":"IssuesEvent","CreatedAt":"2019-08-26T12:45:21","Actor":"agr","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7064","RelatedDescription":"Closed issue \"[Icons] DB changes\" (#7064) at NuGet/NuGetGallery","RelatedBody":"Add a flag to the packages container indicating the presence of the icon file in flat container."},{"Id":"10286015328","Type":"IssuesEvent","CreatedAt":"2019-08-26T12:45:20","Actor":"agr","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7092","RelatedDescription":"Closed issue \"[Icons] Gallery should serve icons from flat container when available\" (#7092) at NuGet/NuGetGallery","RelatedBody":"Related to #7066"},{"Id":"10285787102","Type":"IssuesEvent","CreatedAt":"2019-08-26T12:11:38","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/4731","RelatedDescription":"Closed issue \"Suggestion: Searching could do with a little improvement?\" (#4731) at NuGet/NuGetGallery","RelatedBody":"Recently I've noticed some searches on nuget.org and in Visual Studio don't easily find the package I'm looking for.\r\n\r\nExample: I want to install Entity Framework Core.\r\n\r\n1. I search for \"entity framework\".  Nada. \r\n![search1](https://user-images.githubusercontent.com/3924814/30773130-5e829c8c-a062-11e7-9fb1-3f9c3e60c39d.png)\r\n2. Ok, let's try \"entity framework core\". Nope.\r\n![search2](https://user-images.githubusercontent.com/3924814/30773131-5e96f24a-a062-11e7-8dc4-1cd9ef817b6e.png)\r\n3. \"EntityFrameworkCore\"? Nah.\r\n![search3](https://user-images.githubusercontent.com/3924814/30773133-5ea453e0-a062-11e7-9a64-c2eb6e842c3c.png)\r\n4. \"Microsoft.EntityFrameworkCore\"? Bingo.\r\n![search4](https://user-images.githubusercontent.com/3924814/30773132-5ea2f6e4-a062-11e7-9dcc-c95adf4ee8c2.png)\r\n\r\nI checked the EF Core 2.0's tags, and it has \"Entity Framework Core entity-framework-core EF Data O/RM\", so I was surprised it wasn't being found in the results."},{"Id":"10285755229","Type":"IssuesEvent","CreatedAt":"2019-08-26T12:06:54","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7402","RelatedDescription":"Closed issue \"[Azure Search] Move service index to Azure Search for V3 search\" (#7402) at NuGet/NuGetGallery","RelatedBody":""},{"Id":"10279561435","Type":"IssuesEvent","CreatedAt":"2019-08-26T00:24:41","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7483","RelatedDescription":"Opened issue \"[Queue-Back] Add queue-back support to ESRP submitter\" (#7483) at NuGet/NuGetGallery","RelatedBody":""},{"Id":"10277290245","Type":"IssuesEvent","CreatedAt":"2019-08-25T02:52:14","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7482","RelatedDescription":"Opened issue \"[Queue-Back] Add queue-back to signature processor and certificate validator\" (#7482) at NuGet/NuGetGallery","RelatedBody":""}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"10287955646","Type":"IssuesEvent","CreatedAt":"2019-08-26T19:28:10","Actor":"dtivel","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8495","RelatedDescription":"Closed issue \"VS:  ngen fails\" (#8495) at NuGet/Home","RelatedBody":"ngen of NuGet assemblies failed in a test run because `vsn.exe` was not found.\r\n```\r\n08/22/2019 18:09:26.487 [8808]: Executing command from offline queue: install \"D:\\Program Files (x86)\\Microsoft Visual Studio 15.0\\Common7\\IDE\\CommonExtensions\\Microsoft\\NuGet\\NuGet.Console.dll\" /NoDependencies /ExeConfig:\"vsn.exe\" /queue:2\r\n08/22/2019 18:09:26.487 [8808]: Error: The specified file or directory \"vsn.exe\" is invalid.\r\n```\r\nI suspect that by not specifying [`NgenApplication`](https://github.com/NuGet/NuGet.Client/blob/bb60d6720d24890b8f3e071e70d27ea0f2bef57e/src/NuGet.Clients/NuGet.VisualStudio.Client/NuGet.VisualStudio.Client.csproj#L117) it will just work."},{"Id":"10283965341","Type":"IssuesEvent","CreatedAt":"2019-08-26T16:51:19","Actor":"HermannGruber","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8494","RelatedDescription":"Opened issue \"Operation failed as details for project could not be loaded during test discovery\" (#8494) at NuGet/Home","RelatedBody":"I originally posted the problem in the Visual Studio forum... \r\nhttps://developercommunity.visualstudio.com/content/problem/685158/the-operation-failed-as-details-for-project-could-2.html\r\n... and they reported that they migrated it to the \"nuget forum\", but I cannot find the issue in this github project. Unfortunately, I could not ask for a link to the migrated issue, since the original issue is closed for comments. So for completeness, I copypaste my error report again here:\r\n\r\nI have a solution with a dozen projects in dotnet core 2.2 (some projects are dotnet standard). When I build or rebuild the solution, the build succeeds, but in the lowermost pane, a message appears “unexpected errors detected. See the tests output pane for details”. In the text output pane, I see the following:\r\n\r\n[09.08.2019 9:59:07.635 Warning] Failed to parse target framework ‘,Version=’ for project ‘docker-compose’.\r\n[09.08.2019 9:59:29.163 Error] System.InvalidOperationException: The operation failed as details for project NServicebusConnector could not be loaded.\r\nat NuGet.PackageManagement.VisualStudio.NetCorePackageReferenceProject.GetPackageSpecsAsync(DependencyGraphCacheContext context)\r\nat NuGet.VisualStudio.VsPackageInstallerServices.<GetPackagesPathResolverAsync>d__8.MoveNext()\r\n— End of stack trace from previous location where exception was thrown —\r\nat System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\nat System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nat NuGet.VisualStudio.VsPackageInstallerServices.<>c__DisplayClass7_0.<<GetInstalledPackages>b__0>d.MoveNext()\r\n— End of stack trace from previous location where exception was thrown —\r\nat System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\nat System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nat Microsoft.VisualStudio.Threading.JoinableTask.CompleteOnCurrentThread()\r\nat Microsoft.VisualStudio.Threading.JoinableTask1.CompleteOnCurrentThread() at Microsoft.VisualStudio.Threading.JoinableTaskFactory.Run[T](Func1 asyncMethod, JoinableTaskCreationOptions creationOptions)\r\nat NuGet.VisualStudio.VsPackageInstallerServices.GetInstalledPackages()\r\nat Microsoft.VisualStudio.TestWindow.Controller.UnitTestExtensionDiscoverer.GetNugetAdapters()\r\n— End of stack trace from previous location where exception was thrown —\r\nat Microsoft.VisualStudio.Telemetry.WindowsErrorReporting.WatsonReport.GetClrWatsonExceptionInfo(Exception exceptionObject)\r\n[09.08.2019 9:59:29.163 Informational] ---------- Discovery started ----------\r\n[09.08.2019 9:59:29.166 Informational] ========== Discovery skipped: All test containers are up to date ==========\r\n[09.08.2019 9:59:29.179 Error] System.InvalidOperationException: The operation failed as details for project NServicebusConnector could not be loaded.\r\nat NuGet.PackageManagement.VisualStudio.NetCorePackageReferenceProject.GetPackageSpecsAsync(DependencyGraphCacheContext context)\r\nat NuGet.VisualStudio.VsPackageInstallerServices.<GetPackagesPathResolverAsync>d__8.MoveNext()\r\n— End of stack trace from previous location where exception was thrown —\r\nat System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\nat System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nat NuGet.VisualStudio.VsPackageInstallerServices.<>c__DisplayClass7_0.<<GetInstalledPackages>b__0>d.MoveNext()\r\n— End of stack trace from previous location where exception was thrown —\r\nat System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\nat System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nat Microsoft.VisualStudio.Threading.JoinableTask.CompleteOnCurrentThread()\r\nat Microsoft.VisualStudio.Threading.JoinableTask1.CompleteOnCurrentThread() at Microsoft.VisualStudio.Threading.JoinableTaskFactory.Run[T](Func1 asyncMethod, JoinableTaskCreationOptions creationOptions)\r\nat NuGet.VisualStudio.VsPackageInstallerServices.GetInstalledPackages()\r\nat Microsoft.VisualStudio.TestWindow.Controller.UnitTestExtensionDiscoverer.GetNugetAdapters()\r\n— End of stack trace from previous location where exception was thrown —\r\nat Microsoft.VisualStudio.Telemetry.WindowsErrorReporting.WatsonReport.GetClrWatsonExceptionInfo(Exception exceptionObject)\r\n[09.08.2019 9:59:29.179 Informational] ---------- Discovery started ----------\r\n[09.08.2019 9:59:30.459 Informational] NUnit Adapter 3.13.0.0: Test discovery starting\r\n[09.08.2019 9:59:31.106 Informational] NUnit Adapter 3.13.0.0: Test discovery complete\r\n[09.08.2019 9:59:31.940 Informational] NUnit Adapter 3.13.0.0: Test discovery starting\r\n[09.08.2019 9:59:32.583 Informational] NUnit Adapter 3.13.0.0: Test discovery complete\r\n[09.08.2019 9:59:32.614 Informational] ========== Discovery finished: 314 tests found (0:00:03,4346751) ==========\r\n[09.08.2019 10:01:59.294 Error] System.InvalidOperationException: The operation failed as details for project NServicebusConnector could not be loaded.\r\nat NuGet.PackageManagement.VisualStudio.NetCorePackageReferenceProject.GetPackageSpecsAsync(DependencyGraphCacheContext context)\r\nat NuGet.VisualStudio.VsPackageInstallerServices.<GetPackagesPathResolverAsync>d__8.MoveNext()\r\n— End of stack trace from previous location where exception was thrown —\r\nat System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\nat System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nat NuGet.VisualStudio.VsPackageInstallerServices.<>c__DisplayClass7_0.<<GetInstalledPackages>b__0>d.MoveNext()\r\n— End of stack trace from previous location where exception was thrown —\r\nat System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\nat System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nat Microsoft.VisualStudio.Threading.JoinableTask.CompleteOnCurrentThread()\r\nat Microsoft.VisualStudio.Threading.JoinableTask1.CompleteOnCurrentThread() at Microsoft.VisualStudio.Threading.JoinableTaskFactory.Run[T](Func1 asyncMethod, JoinableTaskCreationOptions creationOptions)\r\nat NuGet.VisualStudio.VsPackageInstallerServices.GetInstalledPackages()\r\nat Microsoft.VisualStudio.TestWindow.Controller.UnitTestExtensionDiscoverer.GetNugetAdapters()\r\n— End of stack trace from previous location where exception was thrown —\r\nat Microsoft.VisualStudio.Telemetry.WindowsErrorReporting.WatsonReport.GetClrWatsonExceptionInfo(Exception exceptionObject)\r\n[09.08.2019 10:01:59.294 Informational] ---------- Discovery started ----------\r\n[09.08.2019 10:02:00.321 Informational] NUnit Adapter 3.13.0.0: Test discovery starting\r\n[09.08.2019 10:02:01.020 Informational] NUnit Adapter 3.13.0.0: Test discovery complete\r\n[09.08.2019 10:02:01.912 Informational] NUnit Adapter 3.13.0.0: Test discovery starting\r\n[09.08.2019 10:02:02.552 Informational] NUnit Adapter 3.13.0.0: Test discovery complete\r\n[09.08.2019 10:02:02.592 Informational] \r\n========== Discovery finished: 314 tests found (0:00:03,2978137) ==========\r\n"},{"Id":"10286770213","Type":"IssuesEvent","CreatedAt":"2019-08-26T14:41:51","Actor":"dtivel","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8496","RelatedDescription":"Opened issue \"Test:  3 Find-Package tests failing consistently\" (#8496) at NuGet/Home","RelatedBody":"3 end-to-end tests are consistently failing due to https://github.com/NuGet/NuGetGallery/issues/7402\r\n\r\n* FindPackageByIdAndPrereleaseVersion\r\n* FindPackageByIdWithFirstAndSkip\r\n* InstallPackageWithValuesFromPipe"},{"Id":"10284864956","Type":"IssuesEvent","CreatedAt":"2019-08-26T12:57:15","Actor":"mhsimkin","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8464","RelatedDescription":"Closed issue \"NU1107: Version Conflict on mix framework project\" (#8464) at NuGet/Home","RelatedBody":"## Details about Problem\r\nNuGet product used (NuGet.exe | VS UI | Package Manager Console | dotnet.exe): VS UI\r\nNuGet version (x.x.x.xxx): 5.2.0\r\ndotnet.exe --version (if appropriate): N/A\r\nVS version (if appropriate): VS 2019 Enterprise 16.2.2\r\nOS version (i.e. win10 v1607 (14393.321)): Windows 10 Pro Build 1809\r\nWorked before? If so, with which NuGet version: N/A\r\n\r\n## Detailed repro steps so we can see the same problem\r\nI’m in the process of converting our internal libraries into .NET Standard 2.  As a result, I have packages that are multi-targeting .Net 4.7.2 and .Net Standard 2.0.  At the same time, I’m still developing new applications and updating older applications.\r\n\r\nIn a new application (Windows service) that targets 4.7.2 there is a conflict pulling in packages.\r\nHere is the actual error message:\r\n\r\n> NU1107: Version conflict detected for RabbitMQ.Client. Install/reference RabbitMQ.Client 5.1.0 directly to project MprProductSync to resolve this issue. \r\n>  MprProductSync -> ScribeClientAPI.MSLogging.Legacy 2019.8.13.6 -> ScribeClientAPI.Legacy 2019.8.13.6 -> Messaging.RabbitMq 2019.8.13.57 -> RabbitMQ.Client (>= 5.1.0) \r\n>  MprProductSync -> RENAPI.Standard 2019.8.16.2 -> UtilsLibrary 2019.8.15.6 -> RabbitMQ.Client (= 2.5.1).\r\n> NuGet package restore failed. Please see Error List window for detailed warnings and errors.\r\n\r\nBelow is a list of what frameworks each one of the targets/packages in the above error are using:\r\nMprProductSync :                                  4.7.2\r\nScribeClientAPI.MSLogging.Legacy:      Standard 2\r\nScribeClientAPI.Legacy:                         Standard 2\r\nMessaging.,RabbitMQ:                          Standard 2\r\nRabbitMQ.Client:                                   4.5.1/Standard 1.5/Standard 2\r\nRENAPI.Standard:                                  Standard 2\r\nUtilsLibrary:                                           4.7.2/Standard 2\r\nRabbitMQ.Client:                                  4.5.1/Standard 1.5/Standard 2\r\n\r\nI understand that NuGet will attempt to match a project targeting 4.7.2 with a library built with 4.7.2. \r\n\r\nMy expectation is that if a .NET Standard package was determined to be the best match, that all  descendant packages also resolve to .NET Standard.\r\n\r\nFor example, RENAPI.Standard is a Standard 2 package.  It has a dependency on UtilsLibrary which also has a Standard 2 version, which would use the RabbitMQ.Client that is also compiled against .NET Standard. Both the UtilsLibrary and RabbitMQ.Client are multi-targeted packages.\r\n\r\nInstead it seems that during the package resolution the full framework version of UtilsLibrary is being used, which results in the specific version locked RabbitMQ.Client is being used.\r\n\r\nHaving to always package the full framework and standard versions separately will lead to other problems.  (1) duplicate packages with just the name and framework being different, (2) unable to seamlessly update existing applications without changing the package name.\r\n\r\nThis will just make it harder to migrate from the full framework to .NET Core/Standard.\r\n\r\n### Verbose Logs\r\nPlease include verbose logs (NuGet.exe <COMMAND> -verbosity detailed | dotnet.exe <COMMAND> --verbosity diag | etc...)\r\nSee attached msbuild.log\r\n[msbuild.log](https://github.com/NuGet/Home/files/3510441/msbuild.log)\r\n\r\n**Build Environment:**\r\nWindows 10 Pro Build 1809\r\nVisual Studio 2019 Enterprise 16.2.2\r\n.NET Framework 4.7.2 and 4.8\r\n\r\n**Also Installed, but not used for this build**\r\nVisual Studio 2019 Enterprise Preview 16.3.0 Preview 2\r\n.NET Core 2.2.401 and 3.0.100-preview8-013656\r\n\r\nThanks\r\n-marc\r\n"},{"Id":"10284670904","Type":"IssuesEvent","CreatedAt":"2019-08-26T12:27:03","Actor":"chrishylton","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8491","RelatedDescription":"Closed issue \"NPM Add Package failing (unable to get local issuer certificate)\" (#8491) at NuGet/Home","RelatedBody":"## Details about Problem\r\n\r\nNuget Package Manager Version 1.1.6\r\nVS Code (with latest updates applied)\r\n\r\nWorked before? If so, with which NuGet version:\r\nDo not recall when this didn't work, but been working on a project for awhile with no new Nuget packages added.\r\n\r\n## Detailed repro steps so we can see the same problem\r\n\r\nCtrl Shift P, Add Nuget Package, type in anything for the search, enter, and I get the following error.\r\n\r\n> request to https://api-v2v3search-0.nuget.org/autocomplete?q=Dapper&prerelease=true&take=100 failed, reason: unable to get local issuer certificate\r\n\r\nI've tried reinstalling the Nuget Package Manager.  Visual Studio still works fine from 'Manage Nuget Packages for Solution/Project'.  This is only happening in VS Code at this point.\r\n\r\nI've tried changing turning off/on Proxy Strict SSL in VS Code settings file, same error.\r\n\r\nAny suggestions on what could be causing this or what to check on my system?  Thanks!\r\n"},{"Id":"10285669924","Type":"IssuesEvent","CreatedAt":"2019-08-26T11:54:46","Actor":"dtivel","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8495","RelatedDescription":"Opened issue \"VS:  ngen fails\" (#8495) at NuGet/Home","RelatedBody":"ngen of NuGet assemblies failed in a test run because `vsn.exe` was not found.\r\n```\r\n08/22/2019 18:09:26.487 [8808]: Executing command from offline queue: install \"D:\\Program Files (x86)\\Microsoft Visual Studio 15.0\\Common7\\IDE\\CommonExtensions\\Microsoft\\NuGet\\NuGet.Console.dll\" /NoDependencies /ExeConfig:\"vsn.exe\" /queue:2\r\n08/22/2019 18:09:26.487 [8808]: Error: The specified file or directory \"vsn.exe\" is invalid.\r\n```\r\nI suspect that by not specifying [`NgenApplication`](https://github.com/NuGet/NuGet.Client/blob/bb60d6720d24890b8f3e071e70d27ea0f2bef57e/src/NuGet.Clients/NuGet.VisualStudio.Client/NuGet.VisualStudio.Client.csproj#L117) it will just work."},{"Id":"10284789113","Type":"IssuesEvent","CreatedAt":"2019-08-26T09:45:37","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/7279","RelatedDescription":"Closed issue \"Support hardcoding a different TFM for a packagereference's resolution\" (#7279) at NuGet/Home","RelatedBody":"**Introduction:**\r\n\r\nI have faced a problem of installing many packages (not needed)  in a project net461 as described in this  issue #7263 ,Why nuget install many dll dependenices in FFW 4.6.1\r\n\r\nI was adviced by @PatoBeltran \r\n>Ideally suave (in your case CommandLineParser) should contain a group without the netstandard dependencies that specifically targets .NETFramework to avoid unneeded dependencies.\r\n\r\nI followed his advice by adding an empty group for net45,as the following line:\r\n\r\n\t\t<group targetFramework=\"net45\"/>\r\n\t\t\r\nThe details of the solution: https://github.com/NuGet/Home/issues/7263#issuecomment-419197714\r\n\r\nand this line resolved the problem. \t\r\nThis requires that the owners of most of the packages should modify .nuspec file and add the previous line.\r\n\r\n**The Feature Request:**\r\n\r\nIt's nice if you can add to the  PowerShell command  [Install-package command](https://docs.microsoft.com/en-us/powershell/module/packagemanagement/install-package?view=powershell-6)\r\n\r\na parameter named Framework, something like:\r\n\r\n\t\tInstall-package  ......   \t-Framework net45\r\nAnd user can define his Nearest Framework ,e.g, net45 \t\r\n\r\n**The advantage:**\r\n\r\nThe Framework  option imply that the nuget install-command when reading the dependency from nuspec file included in the package, add the empty  dependency group  line:\r\n\r\n\t<group targetFramework=\"myframework-in-Framework-parameter\"/>\r\nto dependencies and consequently install net45 lib not netstandard package (which is currently auto selected by nuget for frameork net46x)\r\nFor example: the following dependency in nuspec file:\r\n\r\n       <dependencies>\t   \r\n\t  <group targetFramework=\".NETStandard1.5\">\r\n\t\t<dependency id=\"System.Collections\" version=\"4.0.11-rc2-24027\" />\r\n\t\t<dependency id=\"System.Console\" version=\"4.0.0-rc2-24027\" />\r\n\t\t..... \r\n\t  </group>           \r\n\t</dependencies>\r\n\r\nby running the command:\r\n     install-package  mypacke  -Framework net45\r\n\r\nThe dependencies will become in memory:\r\n\r\n        <dependencies>\r\n\t   <group targetFramework=\"net45\"/>    <!-- this line added by the new feature -->\r\n\t  <group targetFramework=\".NETStandard1.5\">\r\n\t\t<dependency id=\"System.Collections\" version=\"4.0.11-rc2-24027\" />\r\n\t\t<dependency id=\"System.Console\" version=\"4.0.0-rc2-24027\" />\r\n\t\t......\r\n\t  </group>           \r\n\t</dependencies>\r\n\t\r\nThis avoid the modification  of nuspec file of many packages need to be modified by the owner of the package to add this empty group and avoid installs superfluous dependencies of netstandard as the the  Nearest Framework.\r\n\r\nThe great benefit is enabling the developer immediately  to select his nearest package and avoid the installation of netstandard dependncies for framework net461,462,471,..\r\n\r\nThe same is applied for update-package (may be other commands for consistency)\r\n\r\n"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"10286366828","Type":"IssuesEvent","CreatedAt":"2019-08-26T13:37:09","Actor":"karann-msft","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/38","RelatedDescription":"Opened issue \"New and improved NuGet Search is live!\" (#38) at NuGet/Announcements","RelatedBody":"Announcing the new and improved search on NuGet.org leveraging Azure Search.\r\n\r\n[Blogpost](https://devblogs.microsoft.com/nuget/new-and-improved-nuget-search/) | [Feedback Issue](https://github.com/NuGet/NuGetGallery/issues/4124)"},{"Id":"10168692521","Type":"IssuesEvent","CreatedAt":"2019-08-07T21:31:54","Actor":"anangaur","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/37","RelatedDescription":"Opened issue \"Using OData to query NuGet.org repository is being deprecated\" (#37) at NuGet/Announcements","RelatedBody":"We introduced `V3 APIs` in early 2016. We have made continuous investments to make it more reliable, performant and secure. Going forward, we plan to bring all new features and improvements only to the newer `V3 APIs`. As part of this strategy, we are deprecating the usage of `OData` queries. Subsequently, we plan to **disable the `OData` queries starting Feb 5th, 2020**.\r\n\r\n**Call to Action: Transition to V3 APIs**\r\n\r\nHere are some resources to help you with the migration:\r\n* [NuGet Server `V3 APIs` reference](https://devblogs.microsoft.com/nuget/switching-from-wcf-odata-to-web-api/)\r\n* [Guide to transition from NuGet `V2 API` to `V3 API`](https://docs.microsoft.com/en-us/nuget/guides/api/query-for-all-published-packages). \r\n* [Blog post: Switching from WCF OData to Web API](https://devblogs.microsoft.com/nuget/switching-from-wcf-odata-to-web-api/)\r\n\r\nIf you need further help in moving your use case to `V3 APIs`, do reach out to us at [support@nuget.org](mailto:support@nuget.org).\r\n"},{"Id":"10115721045","Type":"IssuesEvent","CreatedAt":"2019-07-30T22:44:31","Actor":"shoter","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Announcements/issues/36","RelatedDescription":"Closed issue \"Replace reference to codeplex issue numer 3072\" (#36) at NuGet/Announcements","RelatedBody":"This is copy of codeplex issue number 3072 as it is referenced inside code. I should do a PR shortly to address this one.\r\n\r\nThe place where it is referenced is RuntimeHelper.cs:150\r\n\r\n\r\n---\r\n\r\nWe're hitting an issue with Microsoft.Bcl package where NuGet is adding a binding redirect for a binary that is considered part of the framework, this causes the application to crash because the binding redirect refers to assembly version that is not available at runtime.\r\n\r\n@Repro:\r\n\r\n1. Create a new Console Application targeting 4.5\r\n2. Create a new Portable Library targeting .NET Framework 4.5, Silverlight 4, Windows Phone 7.5 and .NET for Windows Store apps\r\n3. Add a reference to the portable library from the Console Application\r\n4. Install the Microsoft.Bcl package (1.0.16-rc) to both projects\r\n\r\n@Expected: No binding redirect for System.Runtime in the .NET Framework 4.5 project because a ___later version___ is part of the target framework (see C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.5\\RedistList\\FrameworkList.xml)\r\n@Actual: Binding redirect\r\n\r\n<dependentAssembly>\r\n<assemblyIdentity name=\"System.Runtime\" publicKeyToken=\"b03f5f7f11d50a3a\" culture=\"neutral\" />\r\n<bindingRedirect oldVersion=\"0.0.0.0-1.5.11.0\" newVersion=\"1.5.11.0\" />\r\n</dependentAssembly>\r\n\r\n\r\nYou can use the IVsFrameworkMultiTargeting to determine if a given assembly version is available as part of a given target framework.\r\nMake sure when you fix this, that you only skip the binding redirect if ___a later or same version___ is available in the framework.  \r\n2013-02-22\r\n\r\n---\r\n\r\nWe'll do this in 2.4 release.  \r\n2013-02-26\r\n\r\n---\r\n\r\nIs IVsFrameworkMultiTargeting.IsReferenceableInTargetFx the method I need to call? What should I pass to pwszAssemblySpec?  \r\n2013-06-08\r\n\r\n---\r\n\r\nIt's the full name of the assembly (mscorlib, Version=[version], PublicKeyToken=[token], Culture=[culture]). It can either contain all the information (key, version, etc), or just the simple name (\"mscorlib\")  \r\n2013-06-10\r\n\r\n---\r\n\r\nSo look like I can only check for the same version of the target framework. Can't check for a later version using this method, because I don't know what future versions will be.  \r\n2013-06-12\r\n\r\n---\r\n\r\nThat's fine. That's exactly the behavior we want. For example, System.Runtime didn't ship in 4.0, but did in 4.5. We still want a binding redirect generated for it in 4.0, but not for 4.5.  \r\n2013-06-13\r\n\r\n---\r\n\r\nI followed the exact same steps above, but there's no binding redirect added to the Console Application. It's only added to the __Portable Library project__. Is that the bug?  \r\n2013-06-13\r\n\r\n---\r\n\r\nThe binding redirects added to the Portable Library project seems to come from the Microsoft.Bcl package itself (from the content folder's app.config.transform file). this looks like a non-bug.\r\n2013-06-13\r\n\r\n  \r\nI'm chasing up the repro with Eric St. John. He walked through the code and figured out where it was broken.\r\n\r\nIt's the not the app.config.tranform, notice how the net45 content is empty, and hence no transforms. We also marked our transforms with a special marker that indicates that we added the redirects . The binding redirects we were seeing were not coming from us.  \r\n2013-06-13\r\n\r\n---\r\n\r\nAre you seeing the binding redirects added to the Console Application or the Portable Library? I don't see binding redirect added to Console Application, only the Portable Library.  \r\n2013-06-13\r\n\r\n---\r\n\r\nYes I'm talking about the ConsoleApplication. The binding redirects in the portable library project are expected, and do not affect runtime behavior (as the app.config is ignored and not copied to the app project), and hence can't cause an application to crash.\r\n\r\nI've found another repro (NuGet has really weird logic around when it decides to add binding redirects so it was hard to find a repro).\r\n\r\nThe repro is instead of using the Microsoft.Bcl package, install the Microsoft.Net.Http, 2.2.3-beta package. Make sure you are targeting __4.5__ from the ConsoleApplication and the exact platforms that I called out above for portable.  \r\n2013-06-13\r\n\r\n---\r\n\r\nAlso, the ConsoleApplication must be referencing the portable project before installing the package.  \r\n2013-06-13\r\n\r\n---\r\n\r\nOK now I can repro  \r\n2013-06-14\r\n\r\n---\r\n\r\nOK, I've got a fix now. It no longer adds the binding redirect for System.Runtime.dll, but still adds one for System.Net.Http.Primitives. I guess it's expected, right? Please confirm.\r\n\r\n```\r\n<assemblyBinding xmlns=\"urn:schemas-microsoft-com:asm.v1\">\r\n<dependentAssembly>\r\n<assemblyIdentity name=\"System.Net.Http.Primitives\" publicKeyToken=\"b03f5f7f11d50a3a\" culture=\"neutral\" />\r\n<bindingRedirect oldVersion=\"0.0.0.0-4.2.3.0\" newVersion=\"4.2.3.0\" />\r\n</dependentAssembly>\r\n</assemblyBinding>\r\n```  \r\n2013-06-14\r\n\r\n---\r\n\r\n\r\nYes that's correct. System.Net.Http.Primitives does not exist in the framework.  \r\n2013-06-14\r\n\r\n---\r\n\r\nFixed in changeset b8d515f6341193b970d2a9d837e580e762d2eb71  \r\n2013-06-19\r\n\r\n---\r\n\r\ni get the same issue with my test project still, runtime being added... if i comment this out the tests run fine... if not i get exceptions thrown from json.net  \r\n2013-08-09\r\n\r\n---\r\n\r\n(or i can change the version up to 4.0.0.0 or something and it works)  \r\n2013-08-09"},{"Id":"10115715827","Type":"IssuesEvent","CreatedAt":"2019-07-30T22:43:23","Actor":"shoter","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/36","RelatedDescription":"Opened issue \"Replace reference to codeplex issue numer 3072\" (#36) at NuGet/Announcements","RelatedBody":"This is copy of codeplex issue number 3072 as it is referenced inside code. I should do a PR shortly to address this one.\r\n\r\nThe place where it is referenced is RuntimeHelper.cs:150\r\n\r\n\r\n---\r\n\r\nWe're hitting an issue with Microsoft.Bcl package where NuGet is adding a binding redirect for a binary that is considered part of the framework, this causes the application to crash because the binding redirect refers to assembly version that is not available at runtime.\r\n\r\n@Repro:\r\n\r\n1. Create a new Console Application targeting 4.5\r\n2. Create a new Portable Library targeting .NET Framework 4.5, Silverlight 4, Windows Phone 7.5 and .NET for Windows Store apps\r\n3. Add a reference to the portable library from the Console Application\r\n4. Install the Microsoft.Bcl package (1.0.16-rc) to both projects\r\n\r\n@Expected: No binding redirect for System.Runtime in the .NET Framework 4.5 project because a ___later version___ is part of the target framework (see C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.5\\RedistList\\FrameworkList.xml)\r\n@Actual: Binding redirect\r\n\r\n<dependentAssembly>\r\n<assemblyIdentity name=\"System.Runtime\" publicKeyToken=\"b03f5f7f11d50a3a\" culture=\"neutral\" />\r\n<bindingRedirect oldVersion=\"0.0.0.0-1.5.11.0\" newVersion=\"1.5.11.0\" />\r\n</dependentAssembly>\r\n\r\n\r\nYou can use the IVsFrameworkMultiTargeting to determine if a given assembly version is available as part of a given target framework.\r\nMake sure when you fix this, that you only skip the binding redirect if ___a later or same version___ is available in the framework.  \r\n2013-02-22\r\n\r\n---\r\n\r\nWe'll do this in 2.4 release.  \r\n2013-02-26\r\n\r\n---\r\n\r\nIs IVsFrameworkMultiTargeting.IsReferenceableInTargetFx the method I need to call? What should I pass to pwszAssemblySpec?  \r\n2013-06-08\r\n\r\n---\r\n\r\nIt's the full name of the assembly (mscorlib, Version=[version], PublicKeyToken=[token], Culture=[culture]). It can either contain all the information (key, version, etc), or just the simple name (\"mscorlib\")  \r\n2013-06-10\r\n\r\n---\r\n\r\nSo look like I can only check for the same version of the target framework. Can't check for a later version using this method, because I don't know what future versions will be.  \r\n2013-06-12\r\n\r\n---\r\n\r\nThat's fine. That's exactly the behavior we want. For example, System.Runtime didn't ship in 4.0, but did in 4.5. We still want a binding redirect generated for it in 4.0, but not for 4.5.  \r\n2013-06-13\r\n\r\n---\r\n\r\nI followed the exact same steps above, but there's no binding redirect added to the Console Application. It's only added to the __Portable Library project__. Is that the bug?  \r\n2013-06-13\r\n\r\n---\r\n\r\nThe binding redirects added to the Portable Library project seems to come from the Microsoft.Bcl package itself (from the content folder's app.config.transform file). this looks like a non-bug.\r\n2013-06-13\r\n\r\n  \r\nI'm chasing up the repro with Eric St. John. He walked through the code and figured out where it was broken.\r\n\r\nIt's the not the app.config.tranform, notice how the net45 content is empty, and hence no transforms. We also marked our transforms with a special marker that indicates that we added the redirects . The binding redirects we were seeing were not coming from us.  \r\n2013-06-13\r\n\r\n---\r\n\r\nAre you seeing the binding redirects added to the Console Application or the Portable Library? I don't see binding redirect added to Console Application, only the Portable Library.  \r\n2013-06-13\r\n\r\n---\r\n\r\nYes I'm talking about the ConsoleApplication. The binding redirects in the portable library project are expected, and do not affect runtime behavior (as the app.config is ignored and not copied to the app project), and hence can't cause an application to crash.\r\n\r\nI've found another repro (NuGet has really weird logic around when it decides to add binding redirects so it was hard to find a repro).\r\n\r\nThe repro is instead of using the Microsoft.Bcl package, install the Microsoft.Net.Http, 2.2.3-beta package. Make sure you are targeting __4.5__ from the ConsoleApplication and the exact platforms that I called out above for portable.  \r\n2013-06-13\r\n\r\n---\r\n\r\nAlso, the ConsoleApplication must be referencing the portable project before installing the package.  \r\n2013-06-13\r\n\r\n---\r\n\r\nOK now I can repro  \r\n2013-06-14\r\n\r\n---\r\n\r\nOK, I've got a fix now. It no longer adds the binding redirect for System.Runtime.dll, but still adds one for System.Net.Http.Primitives. I guess it's expected, right? Please confirm.\r\n\r\n```\r\n<assemblyBinding xmlns=\"urn:schemas-microsoft-com:asm.v1\">\r\n<dependentAssembly>\r\n<assemblyIdentity name=\"System.Net.Http.Primitives\" publicKeyToken=\"b03f5f7f11d50a3a\" culture=\"neutral\" />\r\n<bindingRedirect oldVersion=\"0.0.0.0-4.2.3.0\" newVersion=\"4.2.3.0\" />\r\n</dependentAssembly>\r\n</assemblyBinding>\r\n```  \r\n2013-06-14\r\n\r\n---\r\n\r\n\r\nYes that's correct. System.Net.Http.Primitives does not exist in the framework.  \r\n2013-06-14\r\n\r\n---\r\n\r\nFixed in changeset b8d515f6341193b970d2a9d837e580e762d2eb71  \r\n2013-06-19\r\n\r\n---\r\n\r\ni get the same issue with my test project still, runtime being added... if i comment this out the tests run fine... if not i get exceptions thrown from json.net  \r\n2013-08-09\r\n\r\n---\r\n\r\n(or i can change the version up to 4.0.0.0 or something and it works)  \r\n2013-08-09"},{"Id":"10105705706","Type":"IssuesEvent","CreatedAt":"2019-07-29T18:41:10","Actor":"anangaur","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/35","RelatedDescription":"Opened issue \"Machine readable output for dotnet list package\" (#35) at NuGet/Announcements","RelatedBody":"The spec for 'Machine readable output for dotnet list package' is ready for **review**:\r\n\r\n|Spec wiki|Discussion issue|\r\n|----------|------------------|\r\n|[Machine readable output for dotnet list package](https://github.com/NuGet/Home/wiki/%5BSpec%5D-Machine-readable-output-for-dotnet-list-package) | https://github.com/NuGet/Home/issues/7752 |"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1164220617710686209","CreatedAt":"2019-08-21T17:00:00+00:00","UserScreenname":"nuget","Text":"⚠ Restoring packages from https://t.co/KVB7werYQh might fail in some regions. We are investigating the issue. Follo… https://t.co/t69YZ9eFo1","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":4,"FavoriteCount":2,"RawContent":null},{"Id":"1162433926578626560","CreatedAt":"2019-08-16T18:40:19+00:00","UserScreenname":"nuget","Text":"Did you check out the new docs landing page? We tried to make it better and more useful. What do you think?… https://t.co/96nBP0rV5l","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":13,"FavoriteCount":3,"RawContent":null},{"Id":"1159229316351197184","CreatedAt":"2019-08-07T22:26:21+00:00","UserScreenname":"nuget","Text":"Using OData to query https://t.co/F9kiKfdOWi repository is being deprecated\n#Announcement \n\nhttps://t.co/dtelctlNOe","Source":"<a href=\"http://twitter.com/download/iphone\" rel=\"nofollow\">Twitter for iPhone</a>","RetweetCount":9,"FavoriteCount":3,"RawContent":null},{"Id":"1124053944269983745","CreatedAt":"2019-05-02T20:51:58+00:00","UserScreenname":"nuget","Text":"https://t.co/F9kiKfvqkS is currently degraded and some pages might take too long to load. We are investigating the… https://t.co/j3saBGKARZ","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":3,"FavoriteCount":2,"RawContent":null}]}},"RunOn":"2019-08-27T05:30:43.8928643Z","RunDurationInMilliseconds":2590}