{"Data":{"Blog":{"FeedItems":[{"Title":"Getting Android Apps Ready for Google Play’s Target API Level Requirements","PublishedOn":"2018-06-21T18:46:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Developing Android applications is a unique experience, as it often involves taking advantage of the latest capabilities of Android while still providing backward compatibility to older Android...","Href":"https://blog.xamarin.com/android-apps-google-play-target-api-level-requirements/","RawContent":null},{"Title":"Supporting iOS 11 and iPhone X in Xamarin.iOS Apps","PublishedOn":"2018-06-18T19:18:01+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Apple has indicated that starting in July 2018 all new apps and app updates submitted to the App Store must be built with the iOS 11 SDK and support the iPhone X Super Retina display. The following...","Href":"https://blog.xamarin.com/supporting-ios-11-iphone-x-xamarin-apps/","RawContent":null},{"Title":"More Cross-Platform APIs with Xamarin.Essentials Latest Preview","PublishedOn":"2018-06-14T19:11:55+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We announced Xamarin.Essentials, a core set of cross-platform APIs to help developers build native apps, at Microsoft Build 2018. Xamarin.Essentials gives developers access to over thirty...","Href":"https://blog.xamarin.com/cross-platform-apis-xamarin-essentials-latest-preview/","RawContent":null},{"Title":"Use MongoDB With Your Xamarin Apps","PublishedOn":"2018-06-12T20:01:43+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"One of the most important decisions that you&#8217;ll make when designing an app is what type of database to use. Not too long ago, the choice was limited to relational databases like SQL server....","Href":"https://blog.xamarin.com/write-apps-using-mongodb-xamarin/","RawContent":null},{"Title":"Build 2018: Conference Vision Demo App","PublishedOn":"2018-06-07T20:43:39+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"At Build 2018 we shipped Xamarin.Forms 3.0. Did you miss the announcement? No worries, you can watch it here to catch up on many of the great new things that will help make you more productive...","Href":"https://blog.xamarin.com/build-2018-conference-vision-demo-app/","RawContent":null},{"Title":"Xamarin.Android Firebase Job Dispatcher: Background Scheduling for all Android Devices","PublishedOn":"2018-06-04T16:00:05+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Running tasks in the background is important for Android apps. It&#8217;s what helps keep an app responsive to the user and allows work to get done even when the user isn’t actively engaged with the...","Href":"https://blog.xamarin.com/xamarin-android-firebase-job-dispatcher-background-scheduling-android-devices/","RawContent":null},{"Title":"Xamarin and .NET Developer Events this June","PublishedOn":"2018-06-01T18:13:14+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Since the recent Microsoft Build conference, Xamarin and .NET recap events have been springing up all over the globe! Find an event near you this month to get the latest news on the exciting releases,...","Href":"https://blog.xamarin.com/xamarin-and-net-developer-events-this-june/","RawContent":null},{"Title":"Xamarin University Presents: Guest Lectures from Industry Luminaries!","PublishedOn":"2018-05-30T18:46:26+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Technology moves quickly; new software, platforms, and frameworks are constantly being developed, improved, and released. Exploring the landscape of developer tools and libraries that we can consume...","Href":"https://blog.xamarin.com/xamarin-university-presents-guest-lectures/","RawContent":null},{"Title":"Contributing to Xamarin.Android","PublishedOn":"2018-05-25T18:15:10+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Xamarin has been open source for over two years now, starting the day we made the exciting announcement about the future of Xamarin. Since then, we&#8217;ve moved the majority of our work out in the...","Href":"https://blog.xamarin.com/contributing-xamarin-android/","RawContent":null},{"Title":"Guest Post: Securing and Versioning Xamarin Apps with Mobile.BuildTools","PublishedOn":"2018-05-23T19:11:22+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Dan Siegel is a Microsoft MVP, maintainer of the Prism Library, author of numerous dev tools and OSS libraries, leader of the San Diego Xamarin Dev’s Meetup, and a Xamarin blogger. Dan works as a...","Href":"https://blog.xamarin.com/securing-versioning-xamarin-apps-with-mobilebuildtools/","RawContent":null}],"ResultType":"Feed"},"Android":{"Events":[{"Id":"7865487916","Type":"PullRequestEvent","CreatedAt":"2018-06-22T17:49:43","Actor":"jonathanpeppers","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1878","RelatedDescription":"Opened pull request \"[Xamarin.Android.Build.Tasks] clean intermediates if NuGets change\" (#1878) at xamarin/xamarin-android","RelatedBody":"Context: https://github.com/xamarin/xamarin-android/pull/1741\r\nFixes: https://github.com/xamarin/xamarin-android/issues/1828\r\n\r\nPR #1741 is a good attempt at fixing this, but...\r\n- It is a little heavy handed and basically \"nukes the world\".\r\n- It does not reproduce an issue in a test and \"fix it\", it fixes an\r\n  \"unknown\" #deletebinobj problem.\r\n\r\nI also have a few nitpicks about PR #1741:\r\n- It only comes into effect if `BuildingInsideVisualStudio` is `True`.\r\n  We should also fix command-line builds.\r\n- The `$(ProjectLockFile).stamp` file isn't added to `FileWrites`.\r\n\r\nSo let's improve on #1741! As it had some good ideas, we just need to\r\nnarrow its focus.\r\n\r\nFirst, I reproduced a real issue in a test with the following\r\nscenario:\r\n- Create a Xamarin.Forms 2.3.4 app that uses the 25.4.x support\r\n  libraries\r\n- Build it\r\n- Update the NuGets to Xamarin.Forms 3.0.x and the 27.x support\r\n  libraries\r\n- Build again\r\n- Stuff breaks... namely the following message:\r\n\r\n```\r\n    bin\\Debug\\lib\\xamarin.android\\xbuild\\Xamarin\\Android\\Xamarin.Android.Common.targets(2153,3): error MSB4018: The \"GenerateJavaStubs\" task failed unexpectedly.\r\n        System.IO.FileNotFoundException: Could not load assembly 'System.IO, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'. Perhaps it doesn't exist in the Mono for Android profile?\r\n        File name: 'System.IO.dll'\r\n        at Java.Interop.Tools.Cecil.DirectoryAssemblyResolver.Resolve(AssemblyNameReference reference, ReaderParameters parameters) in external\\Java.Interop\\src\\Java.Interop.Tools.Cecil\\Java.Interop.Tools.Cecil\\DirectoryAssemblyResolver.cs:line 241\r\n        at Java.Interop.Tools.Cecil.DirectoryAssemblyResolver.Resolve(AssemblyNameReference reference) in external\\Java.Interop\\src\\Java.Interop.Tools.Cecil\\Java.Interop.Tools.Cecil\\DirectoryAssemblyResolver.cs:line 191\r\n        at Mono.Cecil.MetadataResolver.Resolve(TypeReference type) in external\\mono\\external\\cecil\\Mono.Cecil\\MetadataResolver.cs:line 101\r\n        at Mono.Cecil.ModuleDefinition.Resolve(TypeReference type) in external\\mono\\external\\cecil\\Mono.Cecil\\ModuleDefinition.cs:line 774\r\n        at Mono.Cecil.TypeReference.Resolve() in external\\mono\\external\\cecil\\Mono.Cecil\\TypeReference.cs:line 280\r\n        at Java.Interop.Tools.Cecil.TypeDefinitionRocks.GetBaseType(TypeDefinition type) in external\\Java.Interop\\src\\Java.Interop.Tools.Cecil\\Java.Interop.Tools.Cecil\\TypeDefinitionRocks.cs:line 14\r\n        at Java.Interop.Tools.Cecil.TypeDefinitionRocks.<GetTypeAndBaseTypes>d__1.MoveNext() in external\\Java.Interop\\src\\Java.Interop.Tools.Cecil\\Java.Interop.Tools.Cecil\\TypeDefinitionRocks.cs:line 21\r\n        at System.Linq.Enumerable.Any[TSource](IEnumerable`1 source, Func`2 predicate)\r\n        at Java.Interop.Tools.Cecil.TypeDefinitionRocks.IsSubclassOf(TypeDefinition type, String typeName) in external\\Java.Interop\\src\\Java.Interop.Tools.Cecil\\Java.Interop.Tools.Cecil\\TypeDefinitionRocks.cs:line 55\r\n        at Java.Interop.Tools.JavaCallableWrappers.JavaTypeScanner.AddJavaTypes(List`1 javaTypes, TypeDefinition type) in external\\Java.Interop\\src\\Java.Interop.Tools.JavaCallableWrappers\\Java.Interop.Tools.JavaCallableWrappers\\JavaTypeScanner.cs:line 46\r\n        at Java.Interop.Tools.JavaCallableWrappers.JavaTypeScanner.GetJavaTypes(IEnumerable`1 assemblies, IAssemblyResolver resolver) in external\\Java.Interop\\src\\Java.Interop.Tools.JavaCallableWrappers\\Java.Interop.Tools.JavaCallableWrappers\\JavaTypeScanner.cs:line 36\r\n        at Xamarin.Android.Tasks.GenerateJavaStubs.Run(DirectoryAssemblyResolver res) in src\\Xamarin.Android.Build.Tasks\\Tasks\\GenerateJavaStubs.cs:line 138\r\n        at Xamarin.Android.Tasks.GenerateJavaStubs.Execute() in src\\Xamarin.Android.Build.Tasks\\Tasks\\GenerateJavaStubs.cs:line 91\r\n        at Microsoft.Build.BackEnd.TaskExecutionHost.Microsoft.Build.BackEnd.ITaskExecutionHost.Execute()\r\n        at Microsoft.Build.BackEnd.TaskBuilder.<ExecuteInstantiatedTask>d__26.MoveNext() [bin\\TestDebug\\temp\\BuildAfterUpgradingNuget\\UnnamedProject.csproj]\r\n```\r\n\r\nThe real problem here though is that many of the intermediate files in\r\n`obj\\Debug\\lp` (among others) are out of sync. Namely we can see\r\nmessages like this from the `ResolveLibraryProjectImports` MSBuild\r\ntask in the build log:\r\n\r\n    Skipped resource lookup for C:\\Users\\myuser\\.nuget\\packages\\xamarin.android.support.animated.vector.drawable\\27.0.2.1\\lib\\MonoAndroid81\\Xamarin.Android.Support.Animated.Vector.Drawable.dll: extracted files are up to date\r\n    Skipped resource lookup for C:\\Users\\myuser\\.nuget\\packages\\xamarin.android.support.annotations\\27.0.2.1\\lib\\MonoAndroid81\\Xamarin.Android.Support.Annotations.dll: extracted files are up to date\r\n    Skipped resource lookup for C:\\Users\\myuser\\.nuget\\packages\\xamarin.android.support.compat\\27.0.2.1\\lib\\MonoAndroid81\\Xamarin.Android.Support.Compat.dll: extracted files are up to date\r\n    Skipped resource lookup for C:\\Users\\myuser\\.nuget\\packages\\xamarin.android.support.core.ui\\27.0.2.1\\lib\\MonoAndroid81\\Xamarin.Android.Support.Core.UI.dll: extracted files are up to date\r\n    Skipped resource lookup for C:\\Users\\myuser\\.nuget\\packages\\xamarin.android.support.core.utils\\27.0.2.1\\lib\\MonoAndroid81\\Xamarin.Android.Support.Core.Utils.dll: extracted files are up to date\r\n    Skipped resource lookup for C:\\Users\\myuser\\.nuget\\packages\\xamarin.android.support.design\\27.0.2.1\\lib\\MonoAndroid81\\Xamarin.Android.Support.Design.dll: extracted files are up to date\r\n    Skipped resource lookup for C:\\Users\\myuser\\.nuget\\packages\\xamarin.android.support.fragment\\27.0.2.1\\lib\\MonoAndroid81\\Xamarin.Android.Support.Fragment.dll: extracted files are up to date\r\n    Skipped resource lookup for C:\\Users\\myuser\\.nuget\\packages\\xamarin.android.support.media.compat\\27.0.2.1\\lib\\MonoAndroid81\\Xamarin.Android.Support.Media.Compat.dll: extracted files are up to date\r\n    Skipped resource lookup for C:\\Users\\myuser\\.nuget\\packages\\xamarin.android.support.transition\\27.0.2.1\\lib\\MonoAndroid81\\Xamarin.Android.Support.Transition.dll: extracted files are up to date\r\n    Skipped resource lookup for C:\\Users\\myuser\\.nuget\\packages\\xamarin.android.support.v4\\27.0.2.1\\lib\\MonoAndroid81\\Xamarin.Android.Support.v4.dll: extracted files are up to date\r\n    Skipped resource lookup for C:\\Users\\myuser\\.nuget\\packages\\xamarin.android.support.v7.appcompat\\27.0.2.1\\lib\\MonoAndroid81\\Xamarin.Android.Support.v7.AppCompat.dll: extracted files are up to date\r\n    Skipped resource lookup for C:\\Users\\myuser\\.nuget\\packages\\xamarin.android.support.v7.cardview\\27.0.2.1\\lib\\MonoAndroid81\\Xamarin.Android.Support.v7.CardView.dll: extracted files are up to date\r\n    Skipped resource lookup for C:\\Users\\myuser\\.nuget\\packages\\xamarin.android.support.v7.mediarouter\\27.0.2.1\\lib\\MonoAndroid81\\Xamarin.Android.Support.v7.MediaRouter.dll: extracted files are up to date\r\n    Skipped resource lookup for C:\\Users\\myuser\\.nuget\\packages\\xamarin.android.support.v7.palette\\27.0.2.1\\lib\\MonoAndroid81\\Xamarin.Android.Support.v7.Palette.dll: extracted files are up to date\r\n    Skipped resource lookup for C:\\Users\\myuser\\.nuget\\packages\\xamarin.android.support.v7.recyclerview\\27.0.2.1\\lib\\MonoAndroid81\\Xamarin.Android.Support.v7.RecyclerView.dll: extracted files are up to date\r\n    Skipped resource lookup for C:\\Users\\myuser\\.nuget\\packages\\xamarin.android.support.vector.drawable\\27.0.2.1\\lib\\MonoAndroid81\\Xamarin.Android.Support.Vector.Drawable.dll: extracted files are up to date\r\n\r\nThese are *bad*, since the extracted files were from the 25.4.x\r\nsupport libraries! It is happening because the timestamps of these\r\nsystem-wide `%UserProfile%\\.nuget` NuGet packages are quite old.\r\n\r\nSo a solution for now, based on #1741:\r\n- When NuGet packages change\r\n- Clean some subset of files/directories -- not a full `Clean`\r\n\r\nI borrowed the logic for calculating `$(_NuGetAssetsFile)` from #1741,\r\nsince it was working pretty well. I added a\r\n`_CleanIntermediateIfNuGetsChange` MSBuild target that runs the\r\n`_CleanMonoAndroidIntermediateDir` target as this was the smallest\r\ndeletion I could figure out that fixes the problem. At first I tried\r\ndeleting other subsets of files/directories, but couldn't find a\r\ncombination that worked.\r\n\r\nThis change does have some impact on build times, when\r\n`_CleanIntermediateIfNuGetsChange` runs and deletes files, it takes\r\n1-2 seconds on my machine for the test case. There will also be\r\nfurther build time taken from other targets that run because files\r\nwere deleted. However, we would likely prefer a slightly slower,\r\ncorrect build, than a faster incorrect one... It is certaining going\r\nto be faster than the `Build`, error message, `Rebuild` cycle -- or\r\nnuking `bin` and `obj`.\r\n\r\nDown the road, we could consider some other change to refactor how\r\n`obj\\Debug\\lp` is generated and make it resilient to NuGet changes."},{"Id":"7864087588","Type":"PullRequestEvent","CreatedAt":"2018-06-22T13:14:40","Actor":"dellis1972","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1873","RelatedDescription":"Merged pull request \"[tests] fix failing MultiDex test on Windows\" (#1873) at xamarin/xamarin-android","RelatedBody":"Context: https://devdiv.visualstudio.com/DevDiv/_build?buildId=1793969\r\n\r\nOur VSTS builds on Windows have had one failing unit test for a while\r\n(but the build was otherwise broken in general).\r\n\r\n    Xamarin.Android.Build.Tests.BuildTest.BuildMultiDexApplication(False,\"v7.1\")\r\n        multidex-ed classes.zip exists\r\n        Expected: True\r\n        But was: False\r\n    at Xamarin.Android.Build.Tests.BuildTest.BuildMultiDexApplication(Boolean useJackAndJill, String fxVersion)\r\n        in E:\\A\\_work\\2\\s\\src\\Xamarin.Android.Build.Tasks\\Tests\\Xamarin.Android.Build.Tests\\BuildTest.cs:line 544\r\n\r\n1589dff3 was a good attempt at handling our new\r\n`AppendTargetFrameworkToIntermediateOutputPath` logic in this test.\r\n\r\nHowever, it was using `TargetFrameworkMoniker` *before* this line:\r\n\r\n    proj.TargetFrameworkVersion = b.LatestTargetFrameworkVersion ();\r\n\r\nAnd so, it was using an incorrect `TargetFrameworkMoniker` for\r\nassertions later in the test.\r\n\r\nMoving the usage of `TargetFrameworkMoniker` *after*\r\n`TargetFrameworkVersion` is set should fix this test and get the\r\nWindows build green again."},{"Id":"7861288625","Type":"IssuesEvent","CreatedAt":"2018-06-21T23:28:49","Actor":"atsushieno","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/1877","RelatedDescription":"Opened issue \"\"make framework-assemblies\" should not fail by broken framework lookup\" (#1877) at xamarin/xamarin-android","RelatedBody":"`make framework-assemblies` is to get all the frameworks and mono runtimes for each ABI and it need to run successfully (at least to build product). However it has been broken for months and it's never fixed:\r\n\r\n```\r\n\"/sources/xamarin-android/src/Mono.Android/Mono.Android.csproj\" (default target) (1) ->\r\n(GetReferenceAssemblyPaths target) -> \r\n  /devel/lib/mono/msbuild/15.0/bin/Microsoft.Common.CurrentVersion.targets(1140,5): error MSB3644: The reference assemblies for framework \"MonoAndroid,Version=v1.0\" were not found. To resolve this, install the SDK or Targeting Pack for this framework version or retarget your application to a version of the framework for which you have the SDK or Targeting Pack installed. Note that assemblies will be resolved from the Global Assembly Cache (GAC) and will be used in place of reference assemblies. Therefore your assembly may not be correctly targeted for the framework you intend. [/sources/xamarin-android/src/Mono.Android/Mono.Android.csproj]\r\n```\r\n\r\n`make framework-assemblies` internally runs make and msbuild many times, and the verbose build log for the most relevant msbuild execution can be found at: https://gist.github.com/atsushieno/1b8861f733c2562953b47f7f59e3527c"},{"Id":"7861046927","Type":"PullRequestEvent","CreatedAt":"2018-06-21T22:14:25","Actor":"jonathanpeppers","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1876","RelatedDescription":"Opened pull request \"[Xamarin.Android.Build.Tests] prevent build logs locking up IDEs\" (#1876) at xamarin/xamarin-android","RelatedBody":"When running tests in Visual Studio's test runner UI (Windows and\r\nmacOS), a test failure causes an unpleasant experience...\r\n\r\nSince the entire MSBuild diagnostic log is contained in\r\n`FailedBuildException`, the UI will hang anywhere from 30 seconds to 1\r\nminute while it tries to render the exception details in the IDE.\r\n\r\nThe solution here is to:\r\n- Detect if the unit test is running inside an IDE\r\n- Don't include the build log in the exception details in this case\r\n\r\nOn Windows, we can detect the test running by the process name, which\r\nis either `testhost.x86` or `testhost.x64`.\r\n\r\nOn macOS, we can detect VS for Mac by looking for the\r\n`MONO_GAC_PREFIX` environment variable, which points to\r\n`/Applications/Visual Studio.app/Contents/Resources` by default.\r\n\r\nIf neither of these cases are met, such as command line, the exception\r\nremains unchanged."},{"Id":"7859996568","Type":"IssuesEvent","CreatedAt":"2018-06-21T18:25:59","Actor":"garuma","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/1778","RelatedDescription":"Closed issue \"Xamarin.Android designer: How to tell when in design mode\" (#1778) at xamarin/xamarin-android","RelatedBody":"I don't know if this is the right place for this question but I don't know where to find the team in charge of the Designer.\r\n\r\nIn MvvmCross we have a bunch of code that fails in the designer because we count on things set up in a certain way.  I want to be able to mock these so that we can at least get our widgets displaying something useful in design mode.  Android provides a `View.isInEditMode` but by that point it's too late (at least for a clean solution.  Is there any other way to determine if we are in the designer?\n\n> VS bug [#629212](https://devdiv.visualstudio.com/DevDiv/_workitems/edit/629212)"}],"ResultType":"GitHubEvent"},"Forms":{"Events":[{"Id":"7866652214","Type":"PullRequestEvent","CreatedAt":"2018-06-22T22:40:00","Actor":"rmarinho","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/3128","RelatedDescription":"Merged pull request \"remove AfterBuild call to xbuild\" (#3128) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\n\r\nremove AfterBuild call to xbuild\r\n\r\n### Issues Resolved ###\r\n\r\nbuild is obsolete and not really needed anymore. This is also causing an error with the latest VS for Mac tooling\r\n\r\n\r\n### PR Checklist ###\r\n\r\n- [ ] Has automated tests <!-- (if tests are omitted or manual, state reason in description) -->\r\n- [ ] Rebased on top of the target branch at time of PR\r\n- [ ] Changes adhere to coding standard"},{"Id":"7866575931","Type":"IssuesEvent","CreatedAt":"2018-06-22T22:13:36","Actor":"samhouts","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/3121","RelatedDescription":"Closed issue \"Button with background color is incorrect rendered on Android\" (#3121) at xamarin/Xamarin.Forms","RelatedBody":"### Description\r\nWhen setting background color on a button, the border/margin/padding goes away, so buttons with background is missing spacing and is larger than the buttons without background color.\r\n### Steps to Reproduce\r\n\r\n1.  Set BackgroundColor on a button\r\n\r\n### Expected Behavior\r\nThat the button keeps its border/margin/padding\r\n\r\n### Actual Behavior\r\nThe border/margin/padding disappears, and button is visiably larger, eating up spacing.\r\n\r\n### Basic Information\r\n\r\n- Version with issue: Xamarin.Forms: 3.1.0.583944\r\n- Last known good version: Xamarin.Forms: 2.5.0.280555\r\n- IDE: Visual Studio 15.7.4\r\n- Platform Target Frameworks:\r\n  - Android: 8.3.3.2\r\n- Android Support Library Version:  27.0.2.1\r\n\r\n### Screenshots\r\nWith error\r\n![device-2018-06-22-144338](https://user-images.githubusercontent.com/4134254/41777432-94083d40-762b-11e8-9b4b-ed1473adc06f.png)\r\n\r\nWithout error\r\n![device-2018-06-22-145045](https://user-images.githubusercontent.com/4134254/41777468-ae8d2658-762b-11e8-9db9-1a1d06dd9757.png)\r\n\r\n\r\n### Reproduction Link\r\nhttps://www.dropbox.com/s/lvzyjjn76jjwt9m/ButtonBackgroudColorError.zip?dl=1\r\n\r\n"},{"Id":"7866476848","Type":"PullRequestEvent","CreatedAt":"2018-06-22T21:43:27","Actor":"samhouts","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/3129","RelatedDescription":"Opened pull request \"[Android] NavigationPage should not push a page that has already been pushed\" (#3129) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\n\r\nIf you push a page with a `WebView` onto a `NavigationPage` on `Application OnStart`, it seems to cause the `WebView` to infinitely navigate, rendering it basically useless.\r\n\r\nThis is hard to reproduce in the Control Gallery, since it only happens if you do the navigation `OnStart`, so to run the test, you must uncomment the test from the `App.cs OnStart` method.\r\n\r\nrelated to #1999\r\n\r\n### Issues Resolved ###\r\n\r\n<!-- Please use the format \"fixes #xxxx\" for each issue this PR addresses -->\r\n\r\n- fixes #2393\r\n\r\n### API Changes ###\r\n\r\nNone\r\n\r\n### Platforms Affected ###\r\n\r\n- Android\r\n\r\n\r\n### Behavioral/Visual Changes ###\r\n\r\n<!-- Describe any changes that may change how a user's app behaves or appears when upgrading to this version of the codebase. -->\r\n\r\nHonestly? Probably tons. O_O\r\n\r\n\r\n\r\n### PR Checklist ###\r\n\r\n- [ ] Has automated tests <!-- (if tests are omitted or manual, state reason in description) -->\r\n- [x] Rebased on top of the target branch at time of PR\r\n- [x] Changes adhere to coding standard\r\n"},{"Id":"7866459098","Type":"PullRequestEvent","CreatedAt":"2018-06-22T21:38:31","Actor":"PureWeen","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/3128","RelatedDescription":"Opened pull request \"remove AfterBuild call to xbuild\" (#3128) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\n\r\nremove AfterBuild call to xbuild\r\n\r\n### Issues Resolved ###\r\n\r\nbuild is obsolete and not really needed anymore. This is also causing an error with the latest VS for Mac tooling\r\n\r\n\r\n### PR Checklist ###\r\n\r\n- [ ] Has automated tests <!-- (if tests are omitted or manual, state reason in description) -->\r\n- [ ] Rebased on top of the target branch at time of PR\r\n- [ ] Changes adhere to coding standard"}],"ResultType":"GitHubEvent"},"Macios":{"Events":[],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1009871245574332422","CreatedAt":"2018-06-21T18:50:42+00:00","UserScreenname":"xamarinhq","Text":"Get your #Xamarin Android apps ready for Google Play’s target API level requirements: https://t.co/2iFf5ijjj9 https://t.co/iQmylzyQ7o","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":54,"FavoriteCount":30,"RawContent":null},{"Id":"1008802730993967104","CreatedAt":"2018-06-18T20:04:48+00:00","UserScreenname":"xamarinhq","Text":"Get ready for the July 2018 deadline by ensuring your  #Xamarin apps support iOS 11 and iPhone X: https://t.co/1Wx6Bo4TSQ","Source":"<a href=\"http://twitter.com/download/iphone\" rel=\"nofollow\">Twitter for iPhone</a>","RetweetCount":42,"FavoriteCount":17,"RawContent":null},{"Id":"1007343670775963649","CreatedAt":"2018-06-14T19:27:01+00:00","UserScreenname":"xamarinhq","Text":"Get access to more cross-platform APIs with the latest Xamarin.Essentials Preview: https://t.co/WqtCV8OneC https://t.co/FgdScqkpPt","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":116,"FavoriteCount":63,"RawContent":null},{"Id":"1007280505820254209","CreatedAt":"2018-06-14T15:16:01+00:00","UserScreenname":"xamarinhq","Text":"Implement drawer and split UI with the #XamarinForms MasterDetailPage: https://t.co/77WkBtKGpx https://t.co/zLa3RTUgaL","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":43,"FavoriteCount":19,"RawContent":null},{"Id":"1006915501405167616","CreatedAt":"2018-06-13T15:05:37+00:00","UserScreenname":"xamarinhq","Text":"Using #TensorFlow and #Azure to add image classification to your Android apps: https://t.co/45lGqihW7e https://t.co/U9huu5DdJW","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":62,"FavoriteCount":22,"RawContent":null},{"Id":"1006682387743461376","CreatedAt":"2018-06-12T23:39:19+00:00","UserScreenname":"xamarinhq","Text":"Create your first #Xamarin app using #MongoDB: https://t.co/Nu6lZzYwYX","Source":"<a href=\"http://twitter.com/download/iphone\" rel=\"nofollow\">Twitter for iPhone</a>","RetweetCount":60,"FavoriteCount":25,"RawContent":null},{"Id":"1006563778471788544","CreatedAt":"2018-06-12T15:48:00+00:00","UserScreenname":"xamarinhq","Text":"Check out this handy curated list of awesome #Xamarin books written by other developers in the #Xamarin community: https://t.co/Yu7V3tVSRq","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":58,"FavoriteCount":23,"RawContent":null},{"Id":"1006201893369106433","CreatedAt":"2018-06-11T15:50:00+00:00","UserScreenname":"xamarinhq","Text":"A brief history of #dotNET Standard (and where it's going): https://t.co/AfiPETlRiv","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":43,"FavoriteCount":23,"RawContent":null},{"Id":"1005923084023582721","CreatedAt":"2018-06-10T21:22:07+00:00","UserScreenname":"xamarinhq","Text":"Learn how to use the iOS 11 drag and drop APIs in your #Xamarin iOS apps: https://t.co/bWru3lL6he https://t.co/OPYTFzsQk4","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":68,"FavoriteCount":28,"RawContent":null},{"Id":"1005574764382117888","CreatedAt":"2018-06-09T22:18:01+00:00","UserScreenname":"xamarinhq","Text":"Localize your #XamarinForms apps for right-to-left languages with the help of the new FlowDirection property:… https://t.co/kaQCoeUycf","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":37,"FavoriteCount":22,"RawContent":null},{"Id":"1005116748180402176","CreatedAt":"2018-06-08T15:58:01+00:00","UserScreenname":"xamarinhq","Text":"Get started debugging Mono from the source code in the third part of our #Xamarin Open Source Frameworks series:… https://t.co/vjjKyuTsDH","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":31,"FavoriteCount":10,"RawContent":null},{"Id":"1004839391477592064","CreatedAt":"2018-06-07T21:35:54+00:00","UserScreenname":"xamarinhq","Text":"Check out the code for the #MSBuild 2018 Conference Vision demo app: https://t.co/tpcBITRsnu https://t.co/kVwUJR5NoL","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":158,"FavoriteCount":84,"RawContent":null},{"Id":"1004743034813276160","CreatedAt":"2018-06-07T15:13:01+00:00","UserScreenname":"xamarinhq","Text":"Learn how to build #XamariniOS from the source code in the second part of our four-part series on debugging… https://t.co/88r7PENPNw","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":29,"FavoriteCount":20,"RawContent":null},{"Id":"1004393225787002881","CreatedAt":"2018-06-06T16:03:00+00:00","UserScreenname":"xamarinhq","Text":"We’ve updated the #XamarinForms project templates in #VS2017 to include #dotNET Standard support and customization… https://t.co/6IkmiiY1Jp","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":82,"FavoriteCount":32,"RawContent":null},{"Id":"1004381931470049282","CreatedAt":"2018-06-06T15:18:07+00:00","UserScreenname":"xamarinhq","Text":"Implement drawer and split UI with the #XamarinForms MasterDetailPage: https://t.co/77WkBtKGpx https://t.co/6jygocRw2d","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":37,"FavoriteCount":24,"RawContent":null},{"Id":"1004017778859347975","CreatedAt":"2018-06-05T15:11:06+00:00","UserScreenname":"xamarinhq","Text":"Adding geospatial calculations to your #Xamarin apps with #Azure #CosmosDB: https://t.co/acrN8gdJdS https://t.co/rS6ZWBVQDw","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":46,"FavoriteCount":20,"RawContent":null}]}},"RunOn":"2018-06-23T05:30:57.1255197Z","RunDurationInMilliseconds":4355}