{"Data":{"Sdk":{"Events":[{"Id":"7509060465","Type":"PullRequestEvent","CreatedAt":"2018-04-10T19:06:36","Actor":"twsouthwick","Repository":"OfficeDev/Open-XML-SDK","Organization":"OfficeDev","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/OfficeDev/Open-XML-SDK/pull/468","RelatedDescription":"Merged pull request \"Enable saving without closing and provide a OpenXmlPackage.CanSave flag\" (#468) at OfficeDev/Open-XML-SDK","RelatedBody":"Fixes #294"},{"Id":"7509060449","Type":"IssuesEvent","CreatedAt":"2018-04-10T19:06:36","Actor":"twsouthwick","Repository":"OfficeDev/Open-XML-SDK","Organization":"OfficeDev","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/OfficeDev/Open-XML-SDK/issues/294","RelatedDescription":"Closed issue \"Calling Save() doesn't flush to the stream\" (#294) at OfficeDev/Open-XML-SDK","RelatedBody":"**Description**\r\n\r\nI am writing a wrapper class for SpreadsheetDocument. **I would like to be able to Save the document more than once**. Currently the only way to force SpreadsheetDocument to flush to the stream is by calling Close() on it. Is there anyway to avoid that?\r\n\r\n**Information**\r\n\r\n- .NET Target: .Net Standard 2.0\r\n- DocumentFormat.OpenXml Version: 2.7.2\r\n\r\n**Repro**\r\n\r\n```csharp\r\nusing DocumentFormat.OpenXml;\r\nusing DocumentFormat.OpenXml.Packaging;\r\nusing DocumentFormat.OpenXml.Spreadsheet;\r\nusing System;\r\nusing System.IO;\r\n\r\nnamespace OpenXmlDemo\r\n{\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            using (var stream = new MemoryStream())\r\n            {\r\n                var document = SpreadsheetDocument.Create(stream: stream,\r\n                                                          type: SpreadsheetDocumentType.Workbook,\r\n                                                          autoSave: true);\r\n\r\n                var workbookPart = document.AddWorkbookPart();\r\n                var workbook = workbookPart.Workbook = new Workbook();\r\n                var sheetsElement = new Sheets();\r\n                workbook.AppendChild(sheetsElement);\r\n\r\n                InsertSheet(document, workbookPart, sheetsElement, \"Sheet A\", 1);\r\n\r\n                // Save the workbook and document\r\n                workbook.Save();\r\n                document.Save();\r\n\r\n                // document.Close();\r\n\r\n                // Returns an empty array if the document isn't closed\r\n                // stream.Position = 0; // Some places suggested this, unfortunately this doesn't seem to help.\r\n                var bytes = stream.ToArray(); \r\n                File.WriteAllBytes(@\"D:\\sheet.xlsx\", bytes);\r\n            }\r\n        }\r\n\r\n        private static Sheet InsertSheet(SpreadsheetDocument doc,\r\n                                      WorkbookPart workbookpart,\r\n                                      Sheets sheetsElement,\r\n                                      string name,\r\n                                      uint id)\r\n        {\r\n            WorksheetPart newWorksheetPart = workbookpart.AddNewPart<WorksheetPart>();\r\n            newWorksheetPart.Worksheet = new Worksheet(new SheetData());\r\n\r\n            string relationshipId = workbookpart.GetIdOfPart(newWorksheetPart);\r\n\r\n            // Give the new worksheet a name.\r\n            if (string.IsNullOrEmpty(name))\r\n                name = \"Sheet\" + id;\r\n\r\n            // Append the new worksheet and associate it with the workbook.\r\n            Sheet sheet = new Sheet() { Id = relationshipId, SheetId = id, Name = name };\r\n            sheetsElement.AppendChild(sheet);\r\n\r\n            return sheet;\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n**Observed**\r\n\r\nThe stream is empty.\r\n\r\n**Expected**\r\n\r\nThe stream should contain the document.\r\n"},{"Id":"7508624990","Type":"IssuesEvent","CreatedAt":"2018-04-10T17:45:36","Actor":"twsouthwick","Repository":"OfficeDev/Open-XML-SDK","Organization":"OfficeDev","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/OfficeDev/Open-XML-SDK/issues/479","RelatedDescription":"Opened issue \"Create an abstracted package exporter/importer\" (#479) at OfficeDev/Open-XML-SDK","RelatedBody":"Currently, there is some functionality to export/import packages to/from strings via the `ToFlatOpcâ€¦` helpers. However, it would be nice to separate this out and create a generalized export/import pattern. This issue is to track this for vNext and to gather ideas of what we could/should include in this design."},{"Id":"7508417181","Type":"IssuesEvent","CreatedAt":"2018-04-10T17:06:26","Actor":"daniel-white","Repository":"OfficeDev/Open-XML-SDK","Organization":"OfficeDev","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/OfficeDev/Open-XML-SDK/issues/478","RelatedDescription":"Opened issue \"Add option ToFlatOpcString to exclude whitespace.\" (#478) at OfficeDev/Open-XML-SDK","RelatedBody":"**Description**\r\n\r\n`OpenXmlDocument.ToFlatOpcString` formulates the document with a lot of whitespace - line breaks and tabs. These aren't needed in XML and creates bloat when transferring.\r\n\r\n**Information**\r\n\r\n- .NET Target: Any\r\n- DocumentFormat.OpenXml Version: 2.8.1\r\n"},{"Id":"7501798213","Type":"PullRequestEvent","CreatedAt":"2018-04-09T16:36:58","Actor":"twsouthwick","Repository":"OfficeDev/Open-XML-SDK","Organization":"OfficeDev","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/OfficeDev/Open-XML-SDK/pull/477","RelatedDescription":"Merged pull request \"Convert SdbData types to readonly structs\" (#477) at OfficeDev/Open-XML-SDK","RelatedBody":"This is for performance (also cleans up some old code) that reduces the allocations used when loading the schema constraint data. Previously new objects were loaded for each of the items (which are thousands). This changes it to use structs instead of objects, which greatly reduces the memory allocated.\r\n\r\nmaster:\r\n```\r\n       Method |         Mean |         Error |        StdDev |     Gen 0 |     Gen 1 |    Gen 2 |   Allocated |\r\n------------- |-------------:|--------------:|--------------:|----------:|----------:|---------:|------------:|\r\n       Create |    160.83 us |     3.1316 us |     4.1806 us |   44.1895 |         - |        - |    68.01 KB |\r\n CreateNoSave |     49.63 us |     0.6315 us |     0.5907 us |   16.5405 |         - |        - |    25.42 KB |\r\n     ReadFile |  2,040.06 us |    31.1776 us |    29.1635 us |  312.5000 |   78.1250 |        - |   730.92 KB |\r\n   Validation | 86,703.67 us | 1,587.5713 us | 1,485.0151 us | 4750.0000 | 1000.0000 | 250.0000 | 16155.36 KB |\r\n     LoadData | 18,744.22 us |   367.6242 us |   393.3538 us |  531.2500 |  218.7500 |  62.5000 |  2988.81 KB |\r\n```\r\n\r\nwith change:\r\n\r\n```\r\n       Method |         Mean |       Error |      StdDev |     Gen 0 |     Gen 1 |    Gen 2 |   Allocated |\r\n------------- |-------------:|------------:|------------:|----------:|----------:|---------:|------------:|\r\n       Create |    156.42 us |   1.7637 us |   1.6498 us |   44.1895 |         - |        - |    68.01 KB |\r\n CreateNoSave |     50.22 us |   0.9710 us |   0.9083 us |   16.5405 |         - |        - |    25.42 KB |\r\n     ReadFile |  2,013.20 us |  19.1713 us |  17.9329 us |  312.5000 |   78.1250 |        - |   730.92 KB |\r\n   Validation | 86,429.49 us | 786.2571 us | 656.5602 us | 4562.5000 | 1062.5000 | 312.5000 | 16015.66 KB |\r\n     LoadData | 10,145.91 us | 171.3562 us | 160.2867 us |  328.1250 |  171.8750 |  46.8750 |  1874.71 KB |\r\n```\r\n\r\nThere is also a perf gain in the time it takes to load all the data by about 43%, and a reduction of allocations by 38%"},{"Id":"7498364301","Type":"PullRequestEvent","CreatedAt":"2018-04-09T04:04:17","Actor":"twsouthwick","Repository":"OfficeDev/Open-XML-SDK","Organization":"OfficeDev","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/OfficeDev/Open-XML-SDK/pull/477","RelatedDescription":"Opened pull request \"Convert SdbData types to readonly structs\" (#477) at OfficeDev/Open-XML-SDK","RelatedBody":"This is for performance (also cleans up some old code) that reduces the allocations used when loading the schema constraint data. Previously new objects were loaded for each of the items (which are thousands). This changes it to use structs instead of objects, which greatly reduces the memory allocated.\r\n\r\nBefore:\r\n\r\n\r\n```\r\n      Method |         Mean |      Error |     StdDev |     Gen 0 |    Gen 1 |    Gen 2 |   Allocated |\r\n------------- |-------------:|-----------:|-----------:|----------:|---------:|---------:|------------:|\r\n       Create |    171.09 us |   3.403 us |   8.784 us |   44.1895 |        - |        - |    68.01 KB |\r\n CreateNoSave |     51.27 us |   1.009 us |   1.919 us |   16.4795 |        - |        - |    25.42 KB |\r\n     ReadFile |  2,150.45 us | 208.723 us | 214.343 us |  316.4063 |  82.0313 |        - |   730.98 KB |\r\n   Validation | 83,571.12 us | 963.987 us | 854.550 us | 4250.0000 | 875.0000 | 250.0000 | 16154.99 KB |\r\n     LoadData | 18,009.41 us | 356.916 us | 333.859 us |  531.2500 | 218.7500 |  62.5000 |  2988.76 KB |\r\n```\r\n\r\nAfter:\r\n\r\n```\r\n       Method |         Mean |         Error |        StdDev |     Gen 0 |     Gen 1 |    Gen 2 |   Allocated |\r\n------------- |-------------:|--------------:|--------------:|----------:|----------:|---------:|------------:|\r\n       Create |    158.50 us |     3.0523 us |     2.3830 us |   44.1895 |         - |        - |    68.01 KB |\r\n CreateNoSave |     50.12 us |     0.8219 us |     0.7286 us |   16.5405 |         - |        - |    25.42 KB |\r\n     ReadFile |  2,057.23 us |    34.3426 us |    30.4438 us |  300.7813 |   78.1250 |        - |   730.82 KB |\r\n   Validation | 89,500.56 us | 1,776.7142 us | 2,371.8624 us | 4562.5000 | 1062.5000 | 312.5000 | 16016.65 KB |\r\n     LoadData | 10,323.75 us |   196.4410 us |   311.5763 us |  328.1250 |  171.8750 |  46.8750 |  1874.91 KB |\r\n```\r\n\r\nThere is also a perf gain in the time it takes to load all the data by about 43%, although validation increased about 6%, but the standard deviation there is larger."},{"Id":"7498298729","Type":"PullRequestEvent","CreatedAt":"2018-04-09T03:36:22","Actor":"twsouthwick","Repository":"OfficeDev/Open-XML-SDK","Organization":"OfficeDev","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/OfficeDev/Open-XML-SDK/pull/475","RelatedDescription":"Merged pull request \"Add tests for SdbData types\" (#475) at OfficeDev/Open-XML-SDK","RelatedBody":""}],"ResultType":"GitHubEvent"},"PowerTools":{"Events":[{"Id":"7497493664","Type":"PullRequestEvent","CreatedAt":"2018-04-08T20:15:11","Actor":"TiagoBonin","Repository":"OfficeDev/Open-Xml-PowerTools","Organization":"OfficeDev","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/OfficeDev/Open-Xml-PowerTools/pull/218","RelatedDescription":"Opened pull request \"Allow HtmlToWmlConverterCore to recognize the \"text-align\" css property\" (#218) at OfficeDev/Open-Xml-PowerTools","RelatedBody":"I working on a project where I have to convert an html file into a word document and insert it into a bigger word document.\r\n\r\nDuring the process I noticed that the code was not recognizing when the css property \"text-align\" was set, and because o that the text was never changing it's align.\r\n\r\nMy change consist in fixing it so the code will be able to recognize the \"text-align\" attribute.\r\n\r\nWhat I basicaly did is:\r\nCapturing every css atribute that is set in the HTML, and adding to the standard library of css properties with a foreach loop.\r\n\r\nI'm creating this pull request to try to improve the code, if I did it wrong please let me know\r\nThere are some auto corrections made by the visual studio, don't mind it."},{"Id":"7472826606","Type":"IssuesEvent","CreatedAt":"2018-04-03T13:48:13","Actor":"adamjez","Repository":"OfficeDev/Open-Xml-PowerTools","Organization":"OfficeDev","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/OfficeDev/Open-Xml-PowerTools/issues/217","RelatedDescription":"Closed issue \"ore\" (#217) at OfficeDev/Open-Xml-PowerTools","RelatedBody":""},{"Id":"7472825449","Type":"IssuesEvent","CreatedAt":"2018-04-03T13:47:58","Actor":"adamjez","Repository":"OfficeDev/Open-Xml-PowerTools","Organization":"OfficeDev","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/OfficeDev/Open-Xml-PowerTools/issues/217","RelatedDescription":"Opened issue \"ore\" (#217) at OfficeDev/Open-Xml-PowerTools","RelatedBody":""},{"Id":"7460221411","Type":"IssuesEvent","CreatedAt":"2018-03-30T18:41:29","Actor":"MatthewMcD","Repository":"OfficeDev/Open-Xml-PowerTools","Organization":"OfficeDev","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/OfficeDev/Open-Xml-PowerTools/issues/143","RelatedDescription":"Closed issue \"Unable to run any PowerShell Cmdlets\" (#143) at OfficeDev/Open-Xml-PowerTools","RelatedBody":"I am really struggling here.\r\nI cloned both Open-XML-SDK and Open-XML-PowerTools.\r\nI compiled the Open-XML-SDK\r\nI tried \r\n`Import-Module .\\Open-XML-PowerTools.psm1` and I get:\r\n> Add-Type : Cannot bind parameter 'Path' to the target. Exception setting \"Path\": \"Cannot find path 'C:\\Users\\ruby\\Documents\\WindowsPowerShell\\Modules\\Open-Xml-Sdk\\DocumentFormat.OpenXml\\bin\\debug\\System.IO.Packaging.dll' because it does not exist.\"\r\n> At C:\\Users\\ruby\\Documents\\WindowsPowerShell\\Modules\\Open-Xml-PowerTools\\AddTypes.ps1:69 char:16. -Type -Path \"$PSScriptRoot\\..\\Open-Xml-Sdk\\DocumentFormat.OpenXml\\bin ...\r\n> CategoryInfo          : WriteError: (:) [Add-Type], ParameterBindingException\r\n> FullyQualifiedErrorId : ParameterBindingFailed,Microsoft.PowerShell.Commands.AddTypeCommand\r\n> \r\n> Add-Type : (0) : Metadata file 'C:\\Users\\ruby\\Documents\\WindowsPowerShell\\Modules\\Open-Xml-PowerTools\\..\\Open-Xml-Sdk\\DocumentFormat.OpenXml\\bin\\debug\\System.IO.Packaging.dll' could not be found\r\n> At C:\\Users\\ruby\\Documents\\WindowsPowerShell\\Modules\\Open-Xml-PowerTools\\AddTypes.ps1:70 char:1\r\n> Add-Type -ReferencedAssemblies $assemblies -Path $sources -OutputAsse ...\r\n>  CategoryInfo          : InvalidData: (Microsoft.Power...peCompilerError:AddTypeCompilerError) [Add-Type], Exception FullyQualifiedErrorId : SOURCE_CODE_ERROR,Microsoft.PowerShell.Commands.AddTypeCommand\r\n> Add-Type : Cannot add type. Compilation errors occurred.\r\n> At C:\\Users\\ruby\\Documents\\WindowsPowerShell\\Modules\\Open-Xml-PowerTools\\AddTypes.ps1:70 char:1\r\n> Add-Type -ReferencedAssemblies $assemblies -Path $sources -OutputAsse ...\r\n>  CategoryInfo          : InvalidData: (:) [Add-Type], InvalidOperationException\r\n> FullyQualifiedErrorId : COMPILER_ERRORS,Microsoft.PowerShell.Commands.AddTypeCommand\r\n\r\nI fixed the paths by adding \"\\net46\\ to the debug dll locations in AddTypes.ps1 Now the Import-Module works without error. When I try any cmdlet like the example:\r\n`New-Docx Out-2.docx -Comment`\r\nI get:\r\n\r\n> New-Object : Cannot find type [System.Collections.Generic.List[OpenXmlPowerTools.Source]]: verify that the assembly containing this type is loaded.\r\n> At C:\\Users\\ruby\\Documents\\WindowsPowerShell\\Modules\\Open-Xml-PowerTools\\Cmdlets\\New-Docx.ps1:303 char:16   $srcList = New-Object 'System.Collections.Generic.List[OpenXmlPowerT ...\r\n> CategoryInfo          : InvalidType: (:) [New-Object], PSArgumentException\r\n> FullyQualifiedErrorId : TypeNotFound,Microsoft.PowerShell.Commands.NewObjectCommand\r\n> \r\n> New-Object : Cannot find type [OpenXmlPowerTools.WmlDocument]: verify that the assembly containing this type is loaded. At C:\\Users\\ruby\\Documents\\WindowsPowerShell\\Modules\\Open-Xml-PowerTools\\Cmdlets\\New-Docx.ps1:404 char:13\r\n> $wml = (New-Object OpenXmlPowerTools.WmlDocument(\"DummyName.docx\" ...\r\n> CategoryInfo          : InvalidType: (:) [New-Object], PSArgumentException\r\n> FullyQualifiedErrorId : TypeNotFound,Microsoft.PowerShell.Commands.NewObjectCommand\r\n> \r\n> New-Object : Cannot find type [OpenXmlPowerTools.Source]: verify that the assembly containing this type is loaded. At C:\\Users\\ruby\\Documents\\WindowsPowerShell\\Modules\\Open-Xml-PowerTools\\Cmdlets\\New-Docx.ps1:411 char:17\r\n> $src = (New-Object OpenXmlPowerTools.Source($wml))\r\n> CategoryInfo          : InvalidType: (:) [New-Object], PSArgumentException\r\n> FullyQualifiedErrorId : TypeNotFound,Microsoft.PowerShell.Commands.NewObjectCommand\r\n> \r\n> You cannot call a method on a null-valued expression.\r\n> At C:\\Users\\ruby\\Documents\\WindowsPowerShell\\Modules\\Open-Xml-PowerTools\\Cmdlets\\New-Docx.ps1:413 char:5\r\n> $srcList.Add($src)\r\n> \r\n> CategoryInfo          : InvalidOperation: (:) [], RuntimeException\r\n> FullyQualifiedErrorId : InvokeMethodOnNull\r\n> \r\n> Unable to find type [OpenXmlPowerTools.DocumentBuilder]. At C:\\Users\\ruby\\Documents\\WindowsPowerShell\\Modules\\Open-Xml-PowerTools\\Cmdlets\\New-Docx.ps1:351 char:26\r\n> $mergedWmlDocument = [OpenXmlPowerTools.DocumentBuilder]::BuildDo ...\r\n> CategoryInfo          : InvalidOperation: (OpenXmlPowerTools.DocumentBuilder:TypeName) [], RuntimeException FullyQualifiedErrorId : TypeNotFound\r\n> \r\n> You cannot call a method on a null-valued expression.\r\n> At C:\\Users\\ruby\\Documents\\WindowsPowerShell\\Modules\\Open-Xml-PowerTools\\Cmdlets\\New-Docx.ps1:385 char:13\r\n> $mergedWmlDocument.SaveAs($outputFi.FullName)\r\n> CategoryInfo          : InvalidOperation: (:) [], RuntimeException\r\n> FullyQualifiedErrorId : InvokeMethodOnNull\r\n> \r\n\r\nDoes the PowerShell work for anyone? I just want to use the project. I have spent several hours on and off trying to get this to work. Any help will be greatly appreciated.\r\n\r\nEven better...can I get an \"Install-Module\" option so I don't have to build it all myself?"}],"ResultType":"GitHubEvent"}},"RunOn":"2018-04-12T05:30:29.0463043Z","RunDurationInMilliseconds":1949}