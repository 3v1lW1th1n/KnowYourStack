{"Data":{"GitHub":{"Issues":[{"Id":"573077419","IsPullRequest":true,"CreatedAt":"2020-02-29T00:19:16","Actor":"antoniovs1029","Number":"4904","RawContent":null,"Title":"Calculate ReduceSum row by row in ONNX model from OneVsAllTrainer","State":"open","Body":"There's a bug with the ONNX models exported from `OneVsAllTrainers` that have `OutputFormula = OutputFormula.Softmax`. (Notice that to the best of my knowledge, only a LightGBM multiclass trainer that had `useSoftmax = true` would have such an `OutputFormula`).\r\n\r\nProblem was that the SoftMax (particularly the `ReduceSum` part of it) would be applied by summing the whole input batch, instead of doing separate sums for each row. This PR fixes that.\r\n\r\nNotice that this error wasn't presented in our tests, since the `OnnxTransformer` which applies the ONNX model, actually process one row at a time, so the batch would always consist of one row. When trying to use this model directly with OnnxRuntime API (without the `OnnxTransformer`), then this problem appeared.","Url":"https://github.com/dotnet/machinelearning/pull/4904","RelatedDescription":"Open PR \"Calculate ReduceSum row by row in ONNX model from OneVsAllTrainer\" (#4904)"},{"Id":"572912369","IsPullRequest":false,"CreatedAt":"2020-02-28T17:54:56","Actor":"artemiusgreat","Number":"4903","RawContent":null,"Title":"Dynamic number of features for the trainer / schema","State":"open","Body":"### System information\r\n\r\n- **OS version/distro**: Windows 10 Pro x64\r\n- **.NET Version (eg., dotnet --info)**: .NET Core 3.0\r\n\r\n### Issue \r\nTrying to use variable number of properties (dynamic schema) for the trainer using dataView.SelectColumns. This creates correct trainer with only 2 features, but prediction engine still requires to specify original input model and uses all 10+ features, even though all features except selected 2 were set to 0.  \r\n\r\n### What did you do?\r\n- use input model with 10 features / properties\r\n- create data view and select only 2 of these features \r\n- use LGBM as a trainer \r\n- create 3 input items with labels - Strategy1, Strategy2, Strategy3 and train estimator \r\n- try to make prediction providing test item identical to Strategy3\r\n\r\n### What happened?\r\n- output schema in CreatePredictionEngine shows that there are 10+ columns, even though, when I created a data view for training, I selected only 2 features\r\n- result of prediction is always the same - Strategy1, most probably because trainer always compares 10+ features instead of 2, even though all features except selected 2 were set to 0 \r\n\r\n### What did you expect?\r\n- if estimator was trained to use only 2 features / input properties, then prediction engine should use provided data view schema and should also work only with 2 selected properties\r\n- in the code below I'd like to make sure that properties Contrast, Param1 ... Param5 are ignored by prediction engine\r\n\r\n### Source code / logs\r\n\r\n```C#\r\npublic class MyInputModel\r\n{\r\n  [ColumnName(nameof(PredictorLabelsEnum.Strategy)), LoadColumn(0)]\r\n  public string Strategy { get; set; }\r\n\r\n  [ColumnName(nameof(InputNamesEnum.Pitch)), LoadColumn(1)]\r\n  public float Pitch { get; set; }\r\n\r\n  [ColumnName(nameof(InputNamesEnum.Energy)), LoadColumn(2)]\r\n  public float Energy { get; set; }\r\n\r\n  [ColumnName(nameof(InputNamesEnum.Contrast)), LoadColumn(3, 8), VectorType(6)]\r\n  public float[] Contrast { get; set; }\r\n  \r\n  [ColumnName(nameof(InputNamesEnum.Param1)), LoadColumn(9)]\r\n  public float Param1 { get; set; }\r\n\r\n  [ColumnName(nameof(InputNamesEnum.Param2)), LoadColumn(10)]\r\n  public float Param2 { get; set; }\r\n\r\n  [ColumnName(nameof(InputNamesEnum.Param3)), LoadColumn(11)]\r\n  public float Param3 { get; set; }\r\n\r\n  [ColumnName(nameof(InputNamesEnum.Param4)), LoadColumn(12)]\r\n  public float Param4 { get; set; }\r\n\r\n  [ColumnName(nameof(InputNamesEnum.Param5)), LoadColumn(13)]\r\n  public float Param5 { get; set; }\r\n}\r\n\r\npublic IEstimator<ITransformer> GetPipeline(IEnumerable<string> columns)\r\n{\r\n  var pipeline = Context\r\n    .Transforms\r\n    .Conversion\r\n    .MapValueToKey(new[] { new InputOutputColumnPair(\"Label\", \"Strategy\") })  // use property \"strategy\" as categorizable label\r\n    .Append(Context.Transforms.Concatenate(\"Combination\", columns.ToArray()))  // merge properties selected for analysis into \"Combination\"\r\n    .Append(Context.Transforms.NormalizeMinMax(new[] { new InputOutputColumnPair(\"Features\", \"Combination\") }));  // normalize selected properties as \"Features\"\r\n\r\n  return pipeline;\r\n}\r\n\r\npublic IEstimator<ITransformer> GetEstimator()\r\n{\r\n  var estimator = Context\r\n    .MulticlassClassification\r\n    .Trainers\r\n    .LightGbm()\r\n    .Append(Context.Transforms.Conversion.MapKeyToValue(new[] { new InputOutputColumnPair(\"Prediction\", \"PredictedLabel\") }));\r\n\r\n  return estimator;\r\n}\r\n\r\npublic byte[] SaveModel(IEnumerable<MyInputModel> items)\r\n{\r\n  var columns = new [] { \"Pitch\", \"Energy\" };\r\n  var estimator = GetEstimator();\r\n  var pipeline = GetPipeline(columns);\r\n  var sourceInputs = Context.Data.LoadFromEnumerable(items);\r\n  var inputs = Context\r\n    .Transforms\r\n    .SelectColumns(columns.Concat(new List<string> { \"Strategy\" }).ToArray()) // model has ~10 properties, we select only 2 of them \r\n    .Fit(sourceInputs)\r\n    .Transform(sourceInputs);\r\n\r\n  var pipelineModel = pipeline.Fit(inputs);\r\n  var pipelineView = pipelineModel.Transform(inputs);\r\n  var estimatorModel = pipeline.Append(estimator).Fit(inputs);\r\n  var model = new byte[0];\r\n\r\n  using (var memoryStream = new MemoryStream())\r\n  {\r\n    Context.Model.Save(estimatorModel, pipelineView.Schema, memoryStream);\r\n    model = memoryStream.ToArray();\r\n  }\r\n\r\n  return model;\r\n}\r\n\r\npublic string LoadModelAndEstimate(byte[] predictor)\r\n{\r\n  var prediction = string.Empty;\r\n\r\n  // let's make input identical to Strategy3, but somehow predicted result is still Strategy1\r\n\r\n  var input = new MyInputModel \r\n  {\r\n    Pitch = 50,\r\n    Energy = 10,\r\n    Contrast = new [] { 0, 0, 0, 0, 0, 0 },\r\n    Param1 = 0,\r\n    Param2 = 0,\r\n    Param3 = 0,\r\n    Param4 = 0,\r\n    Param5 = 0\r\n  };\r\n\r\n  using (var stream = new MemoryStream(predictor))\r\n  {\r\n    var model = Context.Model.Load(stream, out var schema) as TransformerChain<ITransformer>;\r\n    var chain = (model.LastTransformer as IEnumerable<ITransformer>).First() as MulticlassPredictionTransformer<OneVersusAllModelParameters>;\r\n    var chainModel = chain.Model as OneVersusAllModelParameters; // here I see only 3 properties with weights - Pitch, Energy, Label\r\n    var engine = Context.Model.CreatePredictionEngine<MyInputModel, MyOutputModel>(model); // here output schema shows 10+ columns, even though I expect 3\r\n    \r\n    // also tried to specify data view schema from the model explicitly for prediction engine\r\n    // var engine = Context.Model.CreatePredictionEngine<MyInputModel, MyOutputModel>(model, schema); \r\n    \r\n    prediction = engine.Predict(input);\r\n  }\r\n\r\n  return prediction;\r\n}\r\n```\r\n\r\n###  Example \r\n```\r\nvar testData = \r\n[\r\n  { \r\n    Strategy = \"Strategy1\",\r\n    Pitch = 115,\r\n    Energy = 50,\r\n    Contrast = new [] { 0, 0, 0, 0, 0, 0 },\r\n    Param1 = 0, Param2 = 0, Param3 = 0, Param4 = 0, Param5 = 0\r\n  },\r\n  {\r\n    Strategy = \"Strategy2\",\r\n    Pitch = 90,\r\n    Energy = 30,\r\n    Contrast = new [] { 0, 0, 0, 0, 0, 0 },\r\n    Param1 = 0, Param2 = 0, Param3 = 0, Param4 = 0, Param5 = 0\r\n  },\r\n  {\r\n    Strategy = \"Strategy3\",\r\n    Pitch = 50,\r\n    Energy = 10,\r\n    Contrast = new [] { 0, 0, 0, 0, 0, 0 },\r\n    Param1 = 0, Param2 = 0, Param3 = 0, Param4 = 0, Param5 = 0\r\n  }\r\n]\r\n```\r\n\r\n```\r\nvar trainData = \r\n[\r\n  {\r\n    Strategy = \"Strategy3\",\r\n    Pitch = 50,\r\n    Energy = 10,\r\n    Contrast = new [] { 0, 0, 0, 0, 0, 0 },\r\n    Param1 = 0, Param2 = 0, Param3 = 0, Param4 = 0, Param5 = 0\r\n  }\r\n]\r\n```","Url":"https://github.com/dotnet/machinelearning/issues/4903","RelatedDescription":"Open issue \"Dynamic number of features for the trainer / schema\" (#4903)"},{"Id":"572537582","IsPullRequest":true,"CreatedAt":"2020-02-28T05:55:01","Actor":"frank-dong-ms","Number":"4902","RawContent":null,"Title":"test benchmark test hanging","State":"open","Body":"We are excited to review your PR.\r\n\r\nSo we can do the best job, please check:\r\n\r\n- [ ] There's a descriptive title that will make sense to other developers some time from now. \r\n- [ ] There's associated issues. All PR's should have issue(s) associated - unless a trivial self-evident change such as fixing a typo. You can use the format `Fixes #nnnn` in your description to cause GitHub to automatically close the issue(s) when your PR is merged.\r\n- [ ] Your change description explains what the change does, why you chose your approach, and anything else that reviewers should know.\r\n- [ ] You have included any necessary tests in the same PR.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/4902","RelatedDescription":"Open PR \"test benchmark test hanging\" (#4902)"},{"Id":"570205587","IsPullRequest":true,"CreatedAt":"2020-02-27T22:42:36","Actor":"frank-dong-ms","Number":"4884","RawContent":null,"Title":"Light gbm regressor estimator issue","State":"closed","Body":"We are excited to review your PR.\r\n\r\nSo we can do the best job, please check:\r\n\r\n- [ ] There's a descriptive title that will make sense to other developers some time from now. \r\n- [ ] There's associated issues. All PR's should have issue(s) associated - unless a trivial self-evident change such as fixing a typo. You can use the format `Fixes #nnnn` in your description to cause GitHub to automatically close the issue(s) when your PR is merged.\r\n- [ ] Your change description explains what the change does, why you chose your approach, and anything else that reviewers should know.\r\n- [ ] You have included any necessary tests in the same PR.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/4884","RelatedDescription":"Closed or merged PR \"Light gbm regressor estimator issue\" (#4884)"},{"Id":"571713642","IsPullRequest":true,"CreatedAt":"2020-02-27T22:29:45","Actor":"frank-dong-ms","Number":"4896","RawContent":null,"Title":"disable test parallelization for ML.Test assembly to avoid crash","State":"closed","Body":"In ML.Tests assembly, when some tests run in parallel, there are chance the host process will crash due to below exception: \r\nThe thread tried to read from or write to a virtual address for which it does not have the appropriate access.\r\nUnhandled exception at 0x00007FFA70E7B049 (ntdll.dll) in dotnet.exe.12884.dmp: 0xC0000374: A heap has been corrupted (parameters: 0x00007FFA70EE27F0).\r\n\r\nLooked into this error in detail, they come from LightGBM/OnnxRuntime dll we are referencing, seems like null pointer error during object finalization. \r\n![image](https://user-images.githubusercontent.com/55860649/75403422-8f548b80-58bc-11ea-8444-eb48027567fa.png)\r\n\r\nThese crash issue can be mitigated if we disable test parallelization. At the meantime, I'm contacting LightGBM and OnnxRuntime team to take a deeper look, maybe they should do null pointer check at their end.\r\n\r\nBelow are combination of tests run in parallel likely to cause crash, there maybe more:\r\nLightGBMBinaryEstimatorUnbalanced and BinaryClassificationTrainersOnnxConversionTest\r\nLightGBMRegressorEstimator and BinaryClassificationTrainersOnnxConversionTest\r\nLightGBMBinaryEstimatorUnbalanced and TestSGDBinary\r\nLightGBMBinaryEstimatorUnbalanced and CommandLineOnnxConversionTest\r\nLightGBMBinaryEstimatorCorrectSigmoid and MulticlassConfusionMatrixSlotNames\r\nIrisVectorLightGbmWithLoadColumnName and PlattCalibratorOnnxConversionTest\r\n","Url":"https://github.com/dotnet/machinelearning/pull/4896","RelatedDescription":"Closed or merged PR \"disable test parallelization for ML.Test assembly to avoid crash\" (#4896)"},{"Id":"572389413","IsPullRequest":false,"CreatedAt":"2020-02-27T22:04:48","Actor":"jdahan91","Number":"4901","RawContent":null,"Title":"\"Metadata KeyValues does not exist\" in ImageClassification","State":"open","Body":"Choosing image classification, i'm trying to train a folder with three subfolders each subfolder has one image.\r\n\r\nBut I don't understand what's the problem that gives me this error. I tried including a .tsv files but still doesn't help.","Url":"https://github.com/dotnet/machinelearning/issues/4901","RelatedDescription":"Open issue \"\"Metadata KeyValues does not exist\" in ImageClassification\" (#4901)"},{"Id":"572317106","IsPullRequest":true,"CreatedAt":"2020-02-27T21:13:35","Actor":"Lynx1820","Number":"4900","RawContent":null,"Title":"Added boolean support for KeyToValue and ValueToKey","State":"closed","Body":"\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/4900","RelatedDescription":"Closed or merged PR \"Added boolean support for KeyToValue and ValueToKey\" (#4900)"},{"Id":"571739800","IsPullRequest":true,"CreatedAt":"2020-02-27T18:02:10","Actor":"frank-dong-ms","Number":"4897","RawContent":null,"Title":"upgrade hosted mac agent pool to use new version of mac os","State":"closed","Body":"current version of mac os will be out of support at March 23, 2020, move to new version:\r\n\r\nhttps://devblogs.microsoft.com/devops/removing-older-images-in-azure-pipelines-hosted-pools/","Url":"https://github.com/dotnet/machinelearning/pull/4897","RelatedDescription":"Closed or merged PR \"upgrade hosted mac agent pool to use new version of mac os\" (#4897)"},{"Id":"571782145","IsPullRequest":true,"CreatedAt":"2020-02-27T02:38:13","Actor":"najeeb-kazmi","Number":"4899","RawContent":null,"Title":"Misc doc/sample fixes, improvements, and typos","State":"open","Body":"Misc doc/sample improvements, fixes, and typos.\r\n\r\nFixes #2655 \r\nFixes #3627 \r\nFixes #3927 \r\nFixes #3841 \r\nFixes #4898 \r\n\r\nPartially addresses #3891\r\n\r\nRelated #4119 \r\nAnd a few minor fixes.\r\n\r\nMore to come.","Url":"https://github.com/dotnet/machinelearning/pull/4899","RelatedDescription":"Open PR \"Misc doc/sample fixes, improvements, and typos\" (#4899)"},{"Id":"571749579","IsPullRequest":false,"CreatedAt":"2020-02-27T00:49:50","Actor":"najeeb-kazmi","Number":"4898","RawContent":null,"Title":"What is the exact behavior of CreateTextLoader<TInput> when dataSample is given?","State":"open","Body":"We have this overload for `CreateTextLoader<TInput>`, where the schema is defined in `TInput`. \r\nhttps://github.com/dotnet/machinelearning/blob/c3d15927522ef9645dd335d9375fda15a2aaab34/src/Microsoft.ML.Data/DataLoadSave/Text/TextLoaderSaverCatalog.cs#L90-L98\r\n\r\nThe `dataSample` argument is meant to be used to infer schema. Since `TInput` must contain at least one field, there is always at least one column in the schema. Then, this condition is never hit, and consequently, `dataSample` is never used to infer the schema with the `CreateTextLoader<TInput>` overload.\r\nhttps://github.com/dotnet/machinelearning/blob/c3d15927522ef9645dd335d9375fda15a2aaab34/src/Microsoft.ML.Data/DataLoadSave/Text/TextLoader.cs#L1118\r\n\r\n~Presence of the `dataSample` argument is confusing here as it implies that a sample can be provided. In other places, this sample is used to infer schema, so the user would expect this to be the case here as well, but `dataSample` is ignored here.~\r\n\r\n~I will update the documentation to reflect this, but this should be removed. Since this will be an API breaking change, this should be revisited for 2.0.~","Url":"https://github.com/dotnet/machinelearning/issues/4898","RelatedDescription":"Open issue \"What is the exact behavior of CreateTextLoader<TInput> when dataSample is given?\" (#4898)"},{"Id":"570931760","IsPullRequest":true,"CreatedAt":"2020-02-26T23:05:46","Actor":"Lynx1820","Number":"4889","RawContent":null,"Title":"Added Onnx ValueToKey and KeyToValue support for more int types","State":"closed","Body":"","Url":"https://github.com/dotnet/machinelearning/pull/4889","RelatedDescription":"Closed or merged PR \"Added Onnx ValueToKey and KeyToValue support for more int types\" (#4889)"},{"Id":"571653515","IsPullRequest":false,"CreatedAt":"2020-02-26T22:49:24","Actor":"malterman","Number":"4894","RawContent":null,"Title":"how to add this option to LightGBM?","State":"closed","Body":"Is there a reference for how to add options (like below) to: mlContext.BinaryClassification.Trainers.LightGBM(...  ?\n\n            var options = new LightGbmBinaryTrainer.Options\n            {\n                NumberOfThreads = 4,\n                UnbalancedSets = true,\n                EvaluationMetric = LightGbmBinaryTrainer.Options.EvaluateMetricType.AreaUnderCurve\n            };\n\n---\n#### Document Details\n\n⚠ *Do not edit this section. It is required for docs.microsoft.com ➟ GitHub issue linking.*\n\n* ID: 6c83c9a9-84be-c526-4e54-62930bc16974\n* Version Independent ID: 63652672-e3bb-90c6-9f7d-470ed8dd32f5\n* Content: [LightGbmMulticlassTrainer.Options.UnbalancedSets Field (Microsoft.ML.Trainers.LightGbm)](https://docs.microsoft.com/en-us/dotnet/api/microsoft.ml.trainers.lightgbm.lightgbmmulticlasstrainer.options.unbalancedsets?view=ml-dotnet#feedback)\n* Content Source: [dotnet/xml/Microsoft.ML.Trainers.LightGbm/LightGbmMulticlassTrainer+Options.xml](https://github.com/dotnet/ml-api-docs/blob/live/dotnet/xml/Microsoft.ML.Trainers.LightGbm/LightGbmMulticlassTrainer+Options.xml)\n* Product: **dotnet-ml-api**\n* GitHub Login: @natke\n* Microsoft Alias: **nakersha**","Url":"https://github.com/dotnet/machinelearning/issues/4894","RelatedDescription":"Closed issue \"how to add this option to LightGBM?\" (#4894)"},{"Id":"571704768","IsPullRequest":false,"CreatedAt":"2020-02-26T22:39:17","Actor":"GKrivosheev-rms","Number":"4895","RawContent":null,"Title":"Please Expose ParquetDataLoader add implement ParquetWriter","State":"open","Body":"Apache Parquet is a popular data format in the industry.  It is used in ScikitLearn, Spark and a many other ML and big-data related software.   Currently ParquetReader is an internal class that is not exposed to end users.\r\nFeature Request:\r\n- Please provide ParquetReader to ML.NET users\r\n- Please implement ParquetWriter to ML.NET users.\r\n- Update Parquet.NET used by the framework to the latest as it offers bug fixes and perf improvements.\r\n\r\nThis would significantly simplify integration with various other ML and ETL  processes.\r\nThis would also provide a good industry-standard data interop between ML.NET and other ML and data tools, as an alternative to CSVs.","Url":"https://github.com/dotnet/machinelearning/issues/4895","RelatedDescription":"Open issue \"Please Expose ParquetDataLoader add implement ParquetWriter\" (#4895)"},{"Id":"571590434","IsPullRequest":true,"CreatedAt":"2020-02-26T18:59:11","Actor":"mstfbl","Number":"4893","RawContent":null,"Title":"Auto fit tests debugging","State":"open","Body":"","Url":"https://github.com/dotnet/machinelearning/pull/4893","RelatedDescription":"Open PR \"Auto fit tests debugging\" (#4893)"},{"Id":"571102380","IsPullRequest":true,"CreatedAt":"2020-02-26T18:15:04","Actor":"mstfbl","Number":"4890","RawContent":null,"Title":"Enabling SavePipeExponentialAverage test","State":"closed","Body":"This PR  re-enables the test `SavePipeExponentialAverage`, as the race condition/WaiterWaiter bug was fixed in PR #4829.","Url":"https://github.com/dotnet/machinelearning/pull/4890","RelatedDescription":"Closed or merged PR \"Enabling SavePipeExponentialAverage test\" (#4890)"},{"Id":"571499565","IsPullRequest":false,"CreatedAt":"2020-02-26T16:16:17","Actor":"srqdev","Number":"4892","RawContent":null,"Title":"AveragedPerceptron failure when used as a multiclass classifier with only one prediction specified in the input file","State":"open","Body":"When evaluating a model (MulticlassClassification.Evaluate) with testing data against a model created using the AveragedPerceptronTrainer in a multiclass scenario I get the failure shown below. This only occurs when the input data has a single prediction class and not multiple prediction classes.\r\n\r\n_'Schema mismatch for score column 'Score': expected vector of two or more items of type Single, got Vector<Single, 1>_\r\n\r\nIf I supply 1 to 'n' classes it should be consistent, ","Url":"https://github.com/dotnet/machinelearning/issues/4892","RelatedDescription":"Open issue \"AveragedPerceptron failure when used as a multiclass classifier with only one prediction specified in the input file\" (#4892)"},{"Id":"571125147","IsPullRequest":true,"CreatedAt":"2020-02-26T16:04:49","Actor":"harishsk","Number":"4891","RawContent":null,"Title":"Fixes to onnx export for text related transforms","State":"closed","Body":"and MultiClassLogisicRegression\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/4891","RelatedDescription":"Closed or merged PR \"Fixes to onnx export for text related transforms\" (#4891)"},{"Id":"570239040","IsPullRequest":true,"CreatedAt":"2020-02-26T06:13:55","Actor":"mstfbl","Number":"4885","RawContent":null,"Title":"Typo corrections","State":"closed","Body":"More typo corrections in this repository.\r\nThe typo corrects are almost all in comments, except for one variable which was misspelled.\r\nWe should really pay more attention to avoid misspellings, and perhaps do a periodical check to make sure no new mistakes are made.","Url":"https://github.com/dotnet/machinelearning/pull/4885","RelatedDescription":"Closed or merged PR \"Typo corrections\" (#4885)"},{"Id":"570854650","IsPullRequest":true,"CreatedAt":"2020-02-25T21:45:26","Actor":"mstfbl","Number":"4888","RawContent":null,"Title":"Updates NetCoreApp 3.0 builds to NetCoreApp 3.1","State":"open","Body":"Fix #4865 . Updates our builds using NetCoreApp 3.0 to NetCoreApp 3.1.","Url":"https://github.com/dotnet/machinelearning/pull/4888","RelatedDescription":"Open PR \"Updates NetCoreApp 3.0 builds to NetCoreApp 3.1\" (#4888)"},{"Id":"570828121","IsPullRequest":true,"CreatedAt":"2020-02-25T21:44:22","Actor":"harishsk","Number":"4887","RawContent":null,"Title":"Fixed bugs in OptionalColumnTransform and ColumnSelecting","State":"closed","Body":"","Url":"https://github.com/dotnet/machinelearning/pull/4887","RelatedDescription":"Closed or merged PR \"Fixed bugs in OptionalColumnTransform and ColumnSelecting\" (#4887)"},{"Id":"569239764","IsPullRequest":true,"CreatedAt":"2020-02-25T21:02:52","Actor":"Lynx1820","Number":"4875","RawContent":null,"Title":"Alternate solution for ColumnConcatenatingTransformer","State":"closed","Body":"- Added test isolating ColumnConcatenatingTransformer ","Url":"https://github.com/dotnet/machinelearning/pull/4875","RelatedDescription":"Closed or merged PR \"Alternate solution for ColumnConcatenatingTransformer\" (#4875)"},{"Id":"570741185","IsPullRequest":false,"CreatedAt":"2020-02-25T18:12:46","Actor":"gvashishtha","Number":"4886","RawContent":null,"Title":"Remove reference to \"Future\" plans in this doc","State":"open","Body":"https://docs.microsoft.com/en-us/dotnet/machine-learning/automate-training-with-cli#what-is-the-mlnet-command-line-interface-cli\r\n\r\nThe last bullet of the section above mentions \"Future\" plans, which is confusing for customers.","Url":"https://github.com/dotnet/machinelearning/issues/4886","RelatedDescription":"Open issue \"Remove reference to \"Future\" plans in this doc\" (#4886)"},{"Id":"569660027","IsPullRequest":true,"CreatedAt":"2020-02-25T01:36:35","Actor":"harishsk","Number":"4881","RawContent":null,"Title":"Slightly simplified version of adding KeyToValue for onnx export","State":"closed","Body":"This is a variation of @antoniovs1029 's fix. This adds KeyToValueMappingTransformer in only one place. The results are identical between the two. ","Url":"https://github.com/dotnet/machinelearning/pull/4881","RelatedDescription":"Closed or merged PR \"Slightly simplified version of adding KeyToValue for onnx export\" (#4881)"},{"Id":"570174985","IsPullRequest":true,"CreatedAt":"2020-02-24T22:57:37","Actor":"Lynx1820","Number":"4882","RawContent":null,"Title":"Updating onnxruntime version","State":"closed","Body":"\r\n","Url":"https://github.com/dotnet/machinelearning/pull/4882","RelatedDescription":"Closed or merged PR \"Updating onnxruntime version\" (#4882)"},{"Id":"570193009","IsPullRequest":true,"CreatedAt":"2020-02-24T22:42:35","Actor":"Lynx1820","Number":"4883","RawContent":null,"Title":"WIP: Verifying all CI machines support onnx","State":"open","Body":"","Url":"https://github.com/dotnet/machinelearning/pull/4883","RelatedDescription":"Open PR \"WIP: Verifying all CI machines support onnx\" (#4883)"},{"Id":"569550100","IsPullRequest":false,"CreatedAt":"2020-02-24T22:11:10","Actor":"NVentimiglia","Number":"4880","RawContent":null,"Title":"ML.NET Model Builder Feedback","State":"closed","Body":"I have been trying the ML.NET Model Builder Visual Studio Marketplace extension. I like it very much as I am able to jump into ML.NET and gain an understanding of the many moving parts with minimal effort. That said I have a few question.\r\n\r\n### Goal\r\nMy goal is to allow for the evaluation of text messages. I would like to score the message using multiple categorization and binary sentiment sets.  For instance I would like to give messages a emotional categorization, topic categorization, and N categorizations as I think of them.\r\n\r\nI would also like to do this with minimal code bloat, maximum code reuse, and support for future proofing (updating) my models without my current process of delete and create new-project.\r\n\r\nI understand this will take some work on my end refactoring the template projects, but I am struggling to envision what this refactor will look like. Additional resource links appreciated. \r\n\r\n### Solution Bloat / Model Reuse\r\nEvery time I go through the process of adding a new machine learning model, it produces two new projects. A model and a console app. The schema for some of these models are identical, and would like to consolidate them. Is this possible? What is the best strategy for consolidating this? \r\n\r\ne.g. A binary text model with csv for positive/negative sentiment and another csv for masculine/feminine sentiment?\r\n\r\n### Retraining / re-running the model\r\nWhen I run the console app that is generated, it completes really fast. The initial training for one of my data sets was 90 minutes long, but, the console when run on its own is only a second. \r\n\r\nI was thinking I could use this project for adding new / updated data to my model, but I am not so sure of that because it completes so fast. What is this project even doing? If I improve my data set, should I delete these template projects and restart the process!?\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/4880","RelatedDescription":"Closed issue \"ML.NET Model Builder Feedback\" (#4880)"},{"Id":"569312559","IsPullRequest":true,"CreatedAt":"2020-02-24T05:32:38","Actor":"harishsk","Number":"4878","RawContent":null,"Title":"Added multiple related fixes to enable automatic addition of KeyToValue","State":"closed","Body":"This PR includes a number of fixes to enable automatic addition of KeyToValue in the Nimbus codepath. Specifically:\r\n* Fixed BinaryClassfierScorer to support exporting key types\r\n* Fixed PredictedLabelScorerBase to include the right types and shapes in the onnx graph\r\n* Fixed OneVersusAllTrainer to include shape information\r\n* Fixed SaveAsOnnxCommand to include type information in the last Identity node\r\n* Fixed OptionalColumnTransform to have the correct variable names and types. (This one is a preemptive fix. It fixes a crash that happens with the code in the ORT master branch)","Url":"https://github.com/dotnet/machinelearning/pull/4878","RelatedDescription":"Closed or merged PR \"Added multiple related fixes to enable automatic addition of KeyToValue\" (#4878)"},{"Id":"569516659","IsPullRequest":false,"CreatedAt":"2020-02-23T16:02:10","Actor":"NVentimiglia","Number":"4879","RawContent":null,"Title":"Text Classification : Failed see more in Output Pane","State":"open","Body":"### System information\r\n\r\n- Windows 10\r\n- 3.1.1\r\n\r\n### Issue\r\n\r\n- **What did you do?**\r\nI am using the ML.NET Model builder tool for visual studio to add machine learning to an existing dot net core web application. Using the tool, I attempted to train a text classification data set. When training, the progress stops saying \r\n\r\n> Status Failed. See more in Output Pane. \r\n\r\nThe text in the output pane is \r\n\r\n> |     Trainer                              MicroAccuracy  MacroAccuracy  Duration #Iteration                     |\r\n\r\nMy data set can be found here : https://data.world/crowdflower/sentiment-analysis-in-text\r\n\r\n- **What did you expect?**\r\n\r\nEither for the training to succeed or for a actionable error message.\r\n\r\n### Source code / logs\r\n\r\nNo source code included, I am using the visual studio editor tool.","Url":"https://github.com/dotnet/machinelearning/issues/4879","RelatedDescription":"Open issue \"Text Classification : Failed see more in Output Pane\" (#4879)"},{"Id":"569293979","IsPullRequest":true,"CreatedAt":"2020-02-22T08:45:07","Actor":"frank-dong-ms","Number":"4877","RawContent":null,"Title":"enable 2 tests but skip running from x86","State":"closed","Body":"TestOldSavingAndLoading and TestDnnImageFeaturizer uses too much memory and not suitable to run on x86 (which has 2 GB memory limit by default).\r\n\r\nRe-enable these 2 tests if memory usage has been optimized.","Url":"https://github.com/dotnet/machinelearning/pull/4877","RelatedDescription":"Closed or merged PR \"enable 2 tests but skip running from x86\" (#4877)"},{"Id":"569240344","IsPullRequest":true,"CreatedAt":"2020-02-21T23:50:39","Actor":"mstfbl","Number":"4876","RawContent":null,"Title":"Incorporating varying tolerances through VaryingToleranceAttribute","State":"open","Body":"In this PR we are adding the ability to have varying tolerances for tests through VaryingToleranceAttribute.\r\n\r\nThe VaryingToleranceAttribute has been added to the following tests:\r\n\r\n- MulticlassLRTest\r\n- BinaryClassifierLogisticRegressionBinNormTest","Url":"https://github.com/dotnet/machinelearning/pull/4876","RelatedDescription":"Open PR \"Incorporating varying tolerances through VaryingToleranceAttribute\" (#4876)"}],"ResultType":"GitHubIssue"}},"RunOn":"2020-02-29T05:30:41.0743563Z","RunDurationInMilliseconds":641}