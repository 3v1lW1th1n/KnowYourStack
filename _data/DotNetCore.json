{"Data":{"Blog":{"FeedItems":[{"Title":".NET Core 2.1 June Update","PublishedOn":"2018-06-22T21:08:25+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"We released .NET Core 2.1.1. This update includes .NET Core SDK 2.1.301, ASP.NET Core 2.1.1 and .NET Core 2.1.1. See .NET Core 2.1.1 release notes for complete details on the release. Quality Updates...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/06/22/net-core-2-1-june-update/","RawContent":null},{"Title":".NET Core 2.0 will reach End of Life on October 1, 2018","PublishedOn":"2018-06-20T19:12:38+00:00","CommentsCount":11,"FacebookCount":0,"Summary":"Last Updated: 6/22/2018 .NET Core 2.0 was released on August 14, 2017. As a non-LTS release, it is supported for 3 months after the next release. .NET Core 2.1 was released on May 30th, 2018. As a...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/","RawContent":null},{"Title":"The RyuJIT transition is complete!","PublishedOn":"2018-06-19T22:53:27+00:00","CommentsCount":26,"FacebookCount":0,"Summary":"RyuJIT is the code name for the .NET just-in-time compiler, one of the foundational components of the .NET runtime. In contrast, the Roslyn C# compiler compiles C# code to IL byte code. The RyuJIT...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/06/19/the-ryujit-transition-is-complete/","RawContent":null},{"Title":"Staying up-to-date with .NET Container Images","PublishedOn":"2018-06-18T18:59:03+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"This post describes the container images that we produce and update for you, that you can use with Docker, Kubernetes and other systems. When you are using .NET and Docker together, you are probably...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/06/18/staying-up-to-date-with-net-container-images/","RawContent":null},{"Title":"Using .NET and Docker Together – DockerCon 2018 Update","PublishedOn":"2018-06-14T00:15:31+00:00","CommentsCount":10,"FacebookCount":0,"Summary":"I posted about Using .NET and Docker Together last year. With DockerCon 2018 being this week, it seemed like a great time to give you an update.  Since my last post, we&#8217;ve enabled a set of...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/06/13/using-net-and-docker-together-dockercon-2018-update/","RawContent":null},{"Title":".NET Framework June 2018 Security and Quality Rollup","PublishedOn":"2018-06-13T19:29:27+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, we are releasing the June 2018 Security and Quality Rollup. Security No new security fixes. See .NET Framework May 2018 Security and Quality Rollup for the latest security updates. Quality and...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/06/13/net-framework-june-2018-security-and-quality-rollup/","RawContent":null},{"Title":"Announcing .NET Framework 4.8 Early Access build 3621!","PublishedOn":"2018-06-06T21:19:43+00:00","CommentsCount":38,"FacebookCount":0,"Summary":"Today, we are happy to share the .NET Framework 4.8 Early Access build 3621 for your feedback. This is one of the in-development builds of the next version of the .NET Framework. The changes in this...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/06/06/announcing-net-framework-4-8-early-access-build-3621/","RawContent":null},{"Title":"Announcing ML.NET 0.2","PublishedOn":"2018-06-06T04:36:25+00:00","CommentsCount":5,"FacebookCount":0,"Summary":"Last month at //Build 2018, we released ML.NET 0.1, a cross-platform, open source machine learning framework. We would like to thank the community for the engagement so far in helping us shape ML.NET....","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/06/05/announcing-ml-net-0-2/","RawContent":null},{"Title":"Announcing .NET Core 2.1","PublishedOn":"2018-05-30T17:22:16+00:00","CommentsCount":71,"FacebookCount":0,"Summary":"We&#8217;re excited to announce the release of .NET Core 2.1. It includes improvements to performance, to the runtime and tools. It also includes a new way to deploy tools as NuGet packages....","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/05/30/announcing-net-core-2-1/","RawContent":null},{"Title":"Announcing Entity Framework Core 2.1","PublishedOn":"2018-05-30T17:22:00+00:00","CommentsCount":11,"FacebookCount":0,"Summary":"Today we are excited to announce the release of Entity Framework (EF) Core 2.1. This is the latest production-ready release of our open-source and cross-platform data access technology. We are...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/05/30/announcing-entity-framework-core-2-1/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"7896820874","Type":"IssuesEvent","CreatedAt":"2018-06-29T09:52:53","Actor":"tomkerkhove","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/issues/104","RelatedDescription":"Opened issue \"About still mentions CodePlex\" (#104) at dotnet/home","RelatedBody":"About still mentions CodePlex which is now in archive mode.\r\n\r\n![image](https://user-images.githubusercontent.com/4345663/42086259-e0b7d008-7b92-11e8-96c9-02ee61ddc457.png)\r\n\r\nIs this something that I can PR?"},{"Id":"7724991049","Type":"PullRequestEvent","CreatedAt":"2018-05-24T16:33:10","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/103","RelatedDescription":"Merged pull request \"Add ML.NET to readme\" (#103) at dotnet/home","RelatedBody":"cc @shauheen @jongalloway "},{"Id":"7724874671","Type":"PullRequestEvent","CreatedAt":"2018-05-24T16:12:32","Actor":"danmosemsft","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/103","RelatedDescription":"Opened pull request \"Add ML.NET to readme\" (#103) at dotnet/home","RelatedBody":"cc @shauheen @jongalloway "},{"Id":"7697543163","Type":"PullRequestEvent","CreatedAt":"2018-05-18T19:10:28","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/91","RelatedDescription":"Merged pull request \"Add NUnit to the .NET Foundation Projects\" (#91) at dotnet/home","RelatedBody":""},{"Id":"7697541521","Type":"PullRequestEvent","CreatedAt":"2018-05-18T19:10:06","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/92","RelatedDescription":"Merged pull request \"Remove contact email from system.drawing.md\" (#92) at dotnet/home","RelatedBody":"Contact email is outdated. Mono-project site's community section has better, more up-to-date information."},{"Id":"7697539314","Type":"PullRequestEvent","CreatedAt":"2018-05-18T19:09:35","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/93","RelatedDescription":"Merged pull request \"Add Humanizer\" (#93) at dotnet/home","RelatedBody":"Onboarding Humanizer: https://github.com/Humanizr/Humanizer/issues/682"},{"Id":"7697528376","Type":"PullRequestEvent","CreatedAt":"2018-05-18T19:07:09","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/94","RelatedDescription":"Merged pull request \"add SourceLink\" (#94) at dotnet/home","RelatedBody":"Adding SourceLink to the project list as per the checklist https://github.com/ctaggart/SourceLink/issues/138"},{"Id":"7697526900","Type":"PullRequestEvent","CreatedAt":"2018-05-18T19:06:48","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/95","RelatedDescription":"Merged pull request \"Fix broken logo URL\" (#95) at dotnet/home","RelatedBody":""},{"Id":"7697525283","Type":"PullRequestEvent","CreatedAt":"2018-05-18T19:06:25","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/96","RelatedDescription":"Merged pull request \"Adding DNN Platform.\" (#96) at dotnet/home","RelatedBody":""}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"7780591341","Type":"IssuesEvent","CreatedAt":"2018-06-05T20:33:11","Actor":"huanwu","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/72","RelatedDescription":"Opened issue \"Introducing dotnet-svcutil.xmlserializer for .NET Core\" (#72) at dotnet/announcements","RelatedBody":"# Introducing dotnet-svcutil.xmlserializer for .NET Core\r\nOn the full .NET Framework you are able to pre-generate a serialization assembly using the tool svcutil. We are providing similar functionality on .NET Core by releasing the dotnet-svcutil.xmlserializer NuGet package. It pre-generates c# serialization code for the types used by WCF Service Contract in the client applications that can be serialized using the XmlSerializer to improve the startup performance of Xml Serialization when serializing or de-serializing objects of those types using XmlSerializer. \r\nYou can start using the tool today by following the instructions. \r\n## Discussion \r\nPlease share with us any thoughts of questions that you may have at: \r\n\r\n- dotnet/wcf [#2927](https://github.com/dotnet/wcf/issues/2927)\r\n## Details \r\nWhen to use XmlSerializer with WCF in an app to serialize contract data types, it will generate an XmlSerializer during runtime to do the serialization. You can improve the startup performance of Xml serialization by simply adding the reference of dotnet-svcutil.xmlserializer NuGet package to your project. This tool will generate the serialization code and compile it into an assembly next to your output assembly at build time in advance. This assembly can then be deployed and ran with your application. \r\n\r\nPlease create an issue with your feedback at [dotnet/wcf](https://github.com/dotnet/wcf/issues). We are actively looking to improve the tool and your input is a valuable part of the process. "}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"7931581628","Type":"PullRequestEvent","CreatedAt":"2018-07-07T01:57:10","Actor":"Anipik","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/18799","RelatedDescription":null,"RelatedBody":"Related Corert Pr:- https://github.com/dotnet/corert/pull/6061"},{"Id":"7931581567","Type":"PullRequestEvent","CreatedAt":"2018-07-07T01:57:08","Actor":"Anipik","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/pull/18799","RelatedDescription":"Closed pull request \"Moved ManualResetEventSlim to shared\" (#18799) at dotnet/coreclr","RelatedBody":"Related Corert Pr:- https://github.com/dotnet/corert/pull/6061"},{"Id":"7931571332","Type":"PullRequestEvent","CreatedAt":"2018-07-07T01:47:48","Actor":"danmosemsft","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/18814","RelatedDescription":"Merged pull request \"TargetFrameworkName property initialized\" (#18814) at dotnet/coreclr","RelatedBody":"Fixes  https://github.com/dotnet/corefx/issues/23063\r\nTests PR https://github.com/dotnet/corefx/pull/30885"},{"Id":"7931470958","Type":"PullRequestEvent","CreatedAt":"2018-07-07T00:31:57","Actor":"BruceForstall","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/18817","RelatedDescription":"Opened pull request \"Enable ARM64 builds using release product tools\" (#18817) at dotnet/coreclr","RelatedBody":"Remove support for specifying the toolset directory for arm64,\r\nwhich was used to point to an internal toolset.\r\n\r\nBuilding for arm64 now works just like the other platforms, e.g.\r\ninvoke `build arm64`.\r\n\r\nThe requirements:\r\n\r\n- Visual Studio 2017 Update 4 or later, with ARM64 toolset installed\r\n- Windows SDK 10.0.17134.0 or later (installed with VS2017 15.7.1 and later)\r\n- CMake 3.10 or later\r\n\r\nFixes #18048 "},{"Id":"7931466330","Type":"PullRequestEvent","CreatedAt":"2018-07-07T00:29:02","Actor":"CarolEidt","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/18805","RelatedDescription":null,"RelatedBody":"Fix #18746"},{"Id":"7931466213","Type":"PullRequestEvent","CreatedAt":"2018-07-07T00:28:56","Actor":"CarolEidt","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/pull/18805","RelatedDescription":"Closed pull request \"Don't change PUTARG_REG spill type on arm64\" (#18805) at dotnet/coreclr","RelatedBody":"Fix #18746"},{"Id":"7931447993","Type":"PullRequestEvent","CreatedAt":"2018-07-07T00:16:57","Actor":"erozenfeld","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/18816","RelatedDescription":"Opened pull request \"Fixes for bugs in optNarrowTree.\" (#18816) at dotnet/coreclr","RelatedBody":"The fix under NARROW_IND prevents transformation of, e.g.,\r\nCAST      int <- ushort <- int\r\n    CLS_VAR byte\r\n\r\ninto\r\n\r\nCLS_VAR byte.\r\n\r\nWith the fix the CAST is not removed.\r\n\r\nThe fix under GT_CAST prevents transformation of, e.g.,\r\n\r\nCAST      int <- ushort <- long\r\n    CAST      long <- int\r\n       expr short\r\n\r\ninto\r\n\r\nexpt short.\r\n\r\nWith the fix it gets transformed into\r\n\r\nCAST      int <- ushort <- int\r\n    expr short\r\n\r\nFixes #18238.\r\n\r\nNo diffs in frameworks and tests (pmi and crossgen, x64 and x86), except for the added test cases."},{"Id":"7931388627","Type":"IssuesEvent","CreatedAt":"2018-07-06T23:45:37","Actor":"fiigii","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/18815","RelatedDescription":"Opened issue \"[RyuJIT] Assert failure \"unexpected operand size\" when folding LCL_FLD into Avx.BlendVariable \" (#18815) at dotnet/coreclr","RelatedBody":"The assert failture happens\r\n```\r\nAssert failure(PID 2324 [0x00000914], Thread: 8032 [0x1f60]): Assertion failed '!\"unexpected operand size\"' in 'Packet256Tracer:GetNaturalColor(struct,struct,struct,struct,ref):struct:this' (IL size 830)\r\n\r\n    File: d:\\workspace\\coreclr\\src\\jit\\emitxarch.cpp Line: 10343\r\n    Image: C:\\Program Files\\dotnet\\dotnet.exe\r\n```\r\nwhen RyuJIT tries to generate the below `vblendvps`\r\n```\r\nIN00cd:        vinsertf128 ymm8, ymm9, 1\r\nAdded IP mapping: 0x0095 STACK_EMPTY (G_M18437_IG06,ins#34,ofs#229)\r\nGenerating: N583 (  0,  3) [000182] ------------                 IL_OFFSET void   IL offset: 0x95 REG NA\r\nGenerating: N585 (  0,  0) [000178] ------------       t178 =    HWIntrinsic simd32 float SetZeroVector256 REG mm7 $626\r\nIN00ce:        vxorps   ymm7, ymm7, ymm7\r\n                                                             /--*  t178   simd32 \r\nGenerating: N587 (  0,  3) [000181] DA----------              *  STORE_LCL_VAR simd32 V17 loc10        d:3 mm7 REG mm7\r\n\t\t\t\t\t\t\tV17 in reg mm7 is becoming live  [000181]\r\n\t\t\t\t\t\t\tLive regs: 0000F0E8 {rbx rbp rsi rdi r12 r13 r14 r15 xmm8} => 0000F0E8 {rbx rbp rsi rdi r12 r13 r14 r15 xmm7 xmm8}\r\n\t\t\t\t\t\t\tLive vars: {V00 V01 V02 V03 V04 V05 V06 V07 V08 V14 V15 V21 V24 V25 V31} => {V00 V01 V02 V03 V04 V05 V06 V07 V08 V14 V15 V17 V21 V24 V25 V31}\r\nAdded IP mapping: 0x009C STACK_EMPTY (G_M18437_IG06,ins#35,ofs#234)\r\nGenerating: N589 (  8,  9) [000195] ------------                 IL_OFFSET void   IL offset: 0x9c REG NA\r\nGenerating: N591 (  1,  1) [000183] ------------       t183 =    LCL_VAR   simd32 V17 loc10        u:3 mm7 REG mm7 $7cb\r\nGenerating: N593 (  3,  4) [000184] -c----------       t184 =    LCL_FLD   simd32 V16 loc9         u:3[+0] Fseq[Xs] NA REG NA <l:$764, c:$765>\r\nGenerating: N595 (  1,  1) [000187] ------------       t187 =    LCL_VAR   simd32 V15 loc8         u:3 mm8 REG mm8 $6ff\r\n                                                             /--*  t183   simd32 \r\n                                                             +--*  t184   simd32 \r\n                                                             +--*  t187   simd32 \r\nGenerating: N597 (  8,  9) [000191] ------------       t191 = *  HWIntrinsic simd32 float BlendVariable REG mm0 $627\r\nIN00cf:        vblendvps ymm0, ymm7, [V16 rsp+1190H], ymm8\r\n```\r\n\r\nThis bug is detected in the work of https://github.com/dotnet/coreclr/issues/17798, and .NET Core 2.1 works fine, so it seems introduced by the recent containment change.\r\n\r\n@tannergooding @CarolEidt "},{"Id":"7931234629","Type":"PullRequestEvent","CreatedAt":"2018-07-06T22:35:05","Actor":"Anipik","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/18814","RelatedDescription":"Opened pull request \"TargetFrameworkName property initialized\" (#18814) at dotnet/coreclr","RelatedBody":"Fixes "}],"ResultType":"GitHubEvent"},"CLI":{"Events":[],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"7931123364","Type":"IssuesEvent","CreatedAt":"2018-07-06T21:56:00","Actor":"natemcmaster","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/794","RelatedDescription":"Opened issue \"xmldoc file in NETStandard.Library 2.0.3 is invalid xml\" (#794) at dotnet/standard","RelatedBody":"Trying to parse netstandard.library/2.0.3/build/netstandard2.0/ref/netstandard.xml with System.Xml.Linq.XDocument throws the following error:\r\n```\r\nThe 'p' start tag on line 654 position 2 does not match the end tag of 'th'. Line 654, position 86.\r\n```\r\n\r\nHere's the offending section:\r\n```\r\n    <member name=\"M:System.Collections.CaseInsensitiveComparer.Compare(System.Object,System.Object)\">\r\n      <summary>Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.</summary>\r\n      <param name=\"a\">The first object to compare.</param>\r\n      <param name=\"b\">The second object to compare.</param>\r\n      <returns><p sourcefile=\"netstandard.yml\" sourcestartlinenumber=\"1\" sourceendlinenumber=\"2\"><p sourcefile=\"netstandard.yml\" sourcestartlinenumber=\"1\" sourceendlinenumber=\"1\">A signed integer that indicates the relative values of <code data-dev-comment-type=\"paramref\">a</code> and <code data-dev-comment-type=\"paramref\">b</code>, as shown in the following table.  </p>\r\n <table><thead><tr><th> Value  <p>\r\n<p sourcefile=\"netstandard.yml\" sourcestartlinenumber=\"4\" sourceendlinenumber=\"4\"> </th><th> Meaning  <p>\r\n<p sourcefile=\"netstandard.yml\" sourcestartlinenumber=\"6\" sourceendlinenumber=\"6\"> </th></tr></thead><tbody><tr><td> Less than zero  <p>\r\n<p sourcefile=\"netstandard.yml\" sourcestartlinenumber=\"8\" sourceendlinenumber=\"8\"> </td><td><code data-dev-comment-type=\"paramref\">a</code> is less than <code data-dev-comment-type=\"paramref\">b</code>, with casing ignored.  <p>\r\n<p sourcefile=\"netstandard.yml\" sourcestartlinenumber=\"10\" sourceendlinenumber=\"10\"> </td></tr><tr><td> Zero  <p>\r\n<p sourcefile=\"netstandard.yml\" sourcestartlinenumber=\"12\" sourceendlinenumber=\"12\"> </td><td><code data-dev-comment-type=\"paramref\">a</code> equals <code data-dev-comment-type=\"paramref\">b</code>, with casing ignored.  <p>\r\n<p sourcefile=\"netstandard.yml\" sourcestartlinenumber=\"14\" sourceendlinenumber=\"14\"> </td></tr><tr><td> Greater than zero  <p>\r\n<p sourcefile=\"netstandard.yml\" sourcestartlinenumber=\"16\" sourceendlinenumber=\"16\"> </td><td><code data-dev-comment-type=\"paramref\">a</code> is greater than <code data-dev-comment-type=\"paramref\">b</code>, with casing ignored.  <p>\r\n<p sourcefile=\"netstandard.yml\" sourcestartlinenumber=\"18\" sourceendlinenumber=\"18\"> </td></tr></tbody></table></p>\r\n</returns>\r\n      <exception cref=\"T:System.ArgumentException\">Neither <paramref name=\"a\">a</paramref> nor <paramref name=\"b\">b</paramref> implements the <see cref=\"T:System.IComparable\"></see> interface.   -or-  <paramref name=\"a\">a</paramref> and <paramref name=\"b\">b</paramref> are of different types.</exception>\r\n    </member>\r\n```"},{"Id":"7930952606","Type":"PullRequestEvent","CreatedAt":"2018-07-06T21:07:36","Actor":"ionux","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/793","RelatedDescription":"Opened pull request \"Minor text correction for ObsoleteAttribute message.\" (#793) at dotnet/standard","RelatedBody":""},{"Id":"7916191014","Type":"IssuesEvent","CreatedAt":"2018-07-04T04:36:15","Actor":"ramsubbaraoc","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/792","RelatedDescription":"Closed issue \"vs2017 csproj don't have <ItemGroup> <Compile/> tag\" (#792) at dotnet/standard","RelatedBody":"This is not an issue.Just for information\r\nWhen i create a netstandard project in VS2017, the csproj file doesn't contain the list of cs files which are part of the solution/project. \r\nOld csproj(which have been created using older VS version) contain the list of files and using that for command-line wasn't a problem\r\n\r\n If i have to use csproj/sln file(created with VS2017) to compile the code from command-line how do i do it?"},{"Id":"7911966456","Type":"IssuesEvent","CreatedAt":"2018-07-03T11:33:03","Actor":"ramsubbaraoc","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/792","RelatedDescription":"Opened issue \"vs2017 csproj don't have <ItemGroup> <Compile/> tag\" (#792) at dotnet/standard","RelatedBody":"This is not an issue.Just for information\r\nWhen i create a netstandard project in VS2017, the csproj file doesn't contain the list of cs files which are part of the solution/project. \r\nOld csproj(which have been created using older VS version) contain the list of files and using that for command-line wasn't a problem\r\n\r\n If i have to use csproj/sln file(created with VS2017) to compile the code from command-line how do i do it?"},{"Id":"7910306192","Type":"IssuesEvent","CreatedAt":"2018-07-03T05:19:07","Actor":"EEVblog","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/791","RelatedDescription":"Opened issue \"When Building a UWP app with .netstandard 2.0 and Compile With Native Tool Chain, Build Hangs forever\" (#791) at dotnet/standard","RelatedBody":"I have a project that I have released into the windows app store and have an update which included porting from xamarin forms project to a .net standard project.\r\n\r\nAfter porting the project I have found that any time I build the app with the:\r\n\r\n\"Compile with .NET Native tool chain\" checked the build hangs forever. It will hang on any platform when this item is checked.\r\n\r\nI have tried the following flags in an attempt to fix it in my project build settings:\r\n\r\n<ShortcutGenericAnalysis>true</ShortcutGenericAnalysis>\r\n<SingleThreadNUTC>true</SingleThreadNUTC>\r\n<Use64BitCompiler>true</Use64BitCompiler>\r\n\r\nI have tried deleting obj and bin folders, no success.\r\nI have all of the latest VS updates and the latest package updates. "}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"7931658073","Type":"IssuesEvent","CreatedAt":"2018-07-07T03:08:01","Actor":"danmosemsft","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/corefx/issues/29807","RelatedDescription":"Reopened issue \"Inappropriate use of Win32Exception\" (#29807) at dotnet/corefx","RelatedBody":"If you look at:\r\n\r\nhttps://github.com/dotnet/corefx/blob/master/src/System.Diagnostics.Process/src/System/Diagnostics/Process.Unix.cs\r\n\r\nYou'll see that there are many places where **Win32Exceptions** are thrown and this doesn't feel right on non-Win32 platforms.\r\n\r\nThere probably is no great way to address this since moving away from **Win32Exception** would break existing applications.  I wonder though if it'd be an improvement if a new **ProcessException** type was introduced which descended from **Win32Exception**?  This way existing applications could continue to handle **Win32Exceptions** but developers could choose to handle **ProcessExceptions** when developing on non-Win32 platforms. "},{"Id":"7931657836","Type":"IssuesEvent","CreatedAt":"2018-07-07T03:07:48","Actor":"danmosemsft","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/29807","RelatedDescription":"Closed issue \"Inappropriate use of Win32Exception\" (#29807) at dotnet/corefx","RelatedBody":"If you look at:\r\n\r\nhttps://github.com/dotnet/corefx/blob/master/src/System.Diagnostics.Process/src/System/Diagnostics/Process.Unix.cs\r\n\r\nYou'll see that there are many places where **Win32Exceptions** are thrown and this doesn't feel right on non-Win32 platforms.\r\n\r\nThere probably is no great way to address this since moving away from **Win32Exception** would break existing applications.  I wonder though if it'd be an improvement if a new **ProcessException** type was introduced which descended from **Win32Exception**?  This way existing applications could continue to handle **Win32Exceptions** but developers could choose to handle **ProcessExceptions** when developing on non-Win32 platforms. "},{"Id":"7931635457","Type":"IssuesEvent","CreatedAt":"2018-07-07T02:46:52","Actor":"karelz","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/30842","RelatedDescription":"Closed issue \"IFormFile bug\" (#30842) at dotnet/corefx","RelatedBody":"If you upload a excel file to a web api endpoint,  IFormFile object type from Request.Form.Files collection  has bigger size than the original excel file and if you try to open the uploaded file from the upload folder is in incorrect format. The method to upload a file is taken from .net core 2.1 documentation site:\r\n           using (var stream = new FileStream(filePath, FileMode.Create))\r\n            {\r\n                await formFile.CopyToAsync(stream);\r\n            }\r\nwhere fromFile is IFormFile type.\r\nThis bug is happen from .net core version 2.0.6 and above."},{"Id":"7931633495","Type":"IssuesEvent","CreatedAt":"2018-07-07T02:45:01","Actor":"karelz","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/30855","RelatedDescription":"Closed issue \"Error while building an asp.net core 2.1 project in Ubuntu 17\" (#30855) at dotnet/corefx","RelatedBody":"\r\n```\r\n/usr/share/dotnet/sdk/2.1.301/Sdks/Microsoft.NET.Sdk/targets/Microsoft.PackageDependencyResolution.targets(198,5): error MSB4018: The \"ResolvePackageAssets\" task failed unexpectedly. [/home/sa/project_vulcan/src/HordeFlow.Core/HordeFlow.Core.csproj]\r\n/usr/share/dotnet/sdk/2.1.301/Sdks/Microsoft.NET.Sdk/targets/Microsoft.PackageDependencyResolution.targets(198,5): error MSB4018: System.ArgumentOutOfRangeException: Offset must be within plus or minus 14 hours. [/home/sa/project_vulcan/src/HordeFlow.Core/HordeFlow.Core.csproj]\r\n/usr/share/dotnet/sdk/2.1.301/Sdks/Microsoft.NET.Sdk/targets/Microsoft.PackageDependencyResolution.targets(198,5): error MSB4018: Parameter name: offset [/home/sa/project_vulcan/src/HordeFlow.Core/HordeFlow.Core.csproj]\r\n/usr/share/dotnet/sdk/2.1.301/Sdks/Microsoft.NET.Sdk/targets/Microsoft.PackageDependencyResolution.targets(198,5): error MSB4018:    at System.DateTimeOffset.ValidateOffset(TimeSpan offset) [/home/sa/project_vulcan/src/HordeFlow.Core/HordeFlow.Core.csproj]\r\n/usr/share/dotnet/sdk/2.1.301/Sdks/Microsoft.NET.Sdk/targets/Microsoft.PackageDependencyResolution.targets(198,5): error MSB4018:    at System.DateTimeOffset..ctor(DateTime dateTime) [/home/sa/project_vulcan/src/HordeFlow.Core/HordeFlow.Core.csproj]\r\n/usr/share/dotnet/sdk/2.1.301/Sdks/Microsoft.NET.Sdk/targets/Microsoft.PackageDependencyResolution.targets(198,5): error MSB4018:    at System.DateTimeOffset.FromFileTime(Int64 fileTime) [/home/sa/project_vulcan/src/HordeFlow.Core/HordeFlow.Core.csproj]\r\n/usr/share/dotnet/sdk/2.1.301/Sdks/Microsoft.NET.Sdk/targets/Microsoft.PackageDependencyResolution.targets(198,5): error MSB4018:    at System.IO.FileStatus.GetLastWriteTime(ReadOnlySpan`1 path, Boolean continueOnError) [/home/sa/project_vulcan/src/HordeFlow.Core/HordeFlow.Core.csproj]\r\n/usr/share/dotnet/sdk/2.1.301/Sdks/Microsoft.NET.Sdk/targets/Microsoft.PackageDependencyResolution.targets(198,5): error MSB4018:    at System.IO.FileSystem.GetLastWriteTime(String fullPath) [/home/sa/project_vulcan/src/HordeFlow.Core/HordeFlow.Core.csproj]\r\n/usr/share/dotnet/sdk/2.1.301/Sdks/Microsoft.NET.Sdk/targets/Microsoft.PackageDependencyResolution.targets(198,5): error MSB4018:    at System.IO.File.GetLastWriteTimeUtc(String path) [/home/sa/project_vulcan/src/HordeFlow.Core/HordeFlow.Core.csproj]\r\n/usr/share/dotnet/sdk/2.1.301/Sdks/Microsoft.NET.Sdk/targets/Microsoft.PackageDependencyResolution.targets(198,5): error MSB4018:    at Microsoft.NET.Build.Tasks.ResolvePackageAssets.CacheReader.CreateReaderFromDisk(ResolvePackageAssets task, Byte[] settingsHash) [/home/sa/project_vulcan/src/HordeFlow.Core/HordeFlow.Core.csproj]\r\n/usr/share/dotnet/sdk/2.1.301/Sdks/Microsoft.NET.Sdk/targets/Microsoft.PackageDependencyResolution.targets(198,5): error MSB4018:    at Microsoft.NET.Build.Tasks.ResolvePackageAssets.CacheReader..ctor(ResolvePackageAssets task) [/home/sa/project_vulcan/src/HordeFlow.Core/HordeFlow.Core.csproj]\r\n/usr/share/dotnet/sdk/2.1.301/Sdks/Microsoft.NET.Sdk/targets/Microsoft.PackageDependencyResolution.targets(198,5): error MSB4018:    at Microsoft.NET.Build.Tasks.ResolvePackageAssets.ReadItemGroups() [/home/sa/project_vulcan/src/HordeFlow.Core/HordeFlow.Core.csproj]\r\n/usr/share/dotnet/sdk/2.1.301/Sdks/Microsoft.NET.Sdk/targets/Microsoft.PackageDependencyResolution.targets(198,5): error MSB4018:    at Microsoft.NET.Build.Tasks.ResolvePackageAssets.ExecuteCore() [/home/sa/project_vulcan/src/HordeFlow.Core/HordeFlow.Core.csproj]\r\n/usr/share/dotnet/sdk/2.1.301/Sdks/Microsoft.NET.Sdk/targets/Microsoft.PackageDependencyResolution.targets(198,5): error MSB4018:    at Microsoft.NET.Build.Tasks.TaskBase.Execute() [/home/sa/project_vulcan/src/HordeFlow.Core/HordeFlow.Core.csproj]\r\n/usr/share/dotnet/sdk/2.1.301/Sdks/Microsoft.NET.Sdk/targets/Microsoft.PackageDependencyResolution.targets(198,5): error MSB4018:    at Microsoft.Build.BackEnd.TaskExecutionHost.Microsoft.Build.BackEnd.ITaskExecutionHost.Execute() [/home/sa/project_vulcan/src/HordeFlow.Core/HordeFlow.Core.csproj]\r\n/usr/share/dotnet/sdk/2.1.301/Sdks/Microsoft.NET.Sdk/targets/Microsoft.PackageDependencyResolution.targets(198,5): error MSB4018:    at Microsoft.Build.BackEnd.TaskBuilder.ExecuteInstantiatedTask(ITaskExecutionHost taskExecutionHost, TaskLoggingContext taskLoggingContext, TaskHost taskHost, ItemBucket bucket, TaskExecutionMode howToExecuteTask) [/home/sa/project_vulcan/src/HordeFlow.Core/HordeFlow.Core.csproj]\r\n/usr/share/dotnet/sdk/2.1.301/Sdks/Microsoft.NET.Sdk/targets/Microsoft.PackageDependencyResolution.targets(198,5): error MSB4018: The \"ResolvePackageAssets\" task failed unexpectedly. [/home/sa/project_vulcan/src/HordeFlow.Infrastructure/HordeFlow.Infrastructure.csproj]\r\n/usr/share/dotnet/sdk/2.1.301/Sdks/Microsoft.NET.Sdk/targets/Microsoft.PackageDependencyResolution.targets(198,5): error MSB4018: System.ArgumentOutOfRangeException: Offset must be within plus or minus 14 hours. [/home/sa/project_vulcan/src/HordeFlow.Infrastructure/HordeFlow.Infrastructure.csproj]\r\n/usr/share/dotnet/sdk/2.1.301/Sdks/Microsoft.NET.Sdk/targets/Microsoft.PackageDependencyResolution.targets(198,5): error MSB4018: Parameter name: offset [/home/sa/project_vulcan/src/HordeFlow.Infrastructure/HordeFlow.Infrastructure.csproj]\r\n/usr/share/dotnet/sdk/2.1.301/Sdks/Microsoft.NET.Sdk/targets/Microsoft.PackageDependencyResolution.targets(198,5): error MSB4018:    at System.DateTimeOffset.ValidateOffset(TimeSpan offset) [/home/sa/project_vulcan/src/HordeFlow.Infrastructure/HordeFlow.Infrastructure.csproj]\r\n/usr/share/dotnet/sdk/2.1.301/Sdks/Microsoft.NET.Sdk/targets/Microsoft.PackageDependencyResolution.targets(198,5): error MSB4018:    at System.DateTimeOffset..ctor(DateTime dateTime) [/home/sa/project_vulcan/src/HordeFlow.Infrastructure/HordeFlow.Infrastructure.csproj]\r\n/usr/share/dotnet/sdk/2.1.301/Sdks/Microsoft.NET.Sdk/targets/Microsoft.PackageDependencyResolution.targets(198,5): error MSB4018:    at System.DateTimeOffset.FromFileTime(Int64 fileTime) [/home/sa/project_vulcan/src/HordeFlow.Infrastructure/HordeFlow.Infrastructure.csproj]\r\n/usr/share/dotnet/sdk/2.1.301/Sdks/Microsoft.NET.Sdk/targets/Microsoft.PackageDependencyResolution.targets(198,5): error MSB4018:    at System.IO.FileStatus.GetLastWriteTime(ReadOnlySpan`1 path, Boolean continueOnError) [/home/sa/project_vulcan/src/HordeFlow.Infrastructure/HordeFlow.Infrastructure.csproj]\r\n/usr/share/dotnet/sdk/2.1.301/Sdks/Microsoft.NET.Sdk/targets/Microsoft.PackageDependencyResolution.targets(198,5): error MSB4018:    at System.IO.FileSystem.GetLastWriteTime(String fullPath) [/home/sa/project_vulcan/src/HordeFlow.Infrastructure/HordeFlow.Infrastructure.csproj]\r\n/usr/share/dotnet/sdk/2.1.301/Sdks/Microsoft.NET.Sdk/targets/Microsoft.PackageDependencyResolution.targets(198,5): error MSB4018:    at System.IO.File.GetLastWriteTimeUtc(String path) [/home/sa/project_vulcan/src/HordeFlow.Infrastructure/HordeFlow.Infrastructure.csproj]\r\n/usr/share/dotnet/sdk/2.1.301/Sdks/Microsoft.NET.Sdk/targets/Microsoft.PackageDependencyResolution.targets(198,5): error MSB4018:    at Microsoft.NET.Build.Tasks.ResolvePackageAssets.CacheReader.CreateReaderFromDisk(ResolvePackageAssets task, Byte[] settingsHash) [/home/sa/project_vulcan/src/HordeFlow.Infrastructure/HordeFlow.Infrastructure.csproj]\r\n/usr/share/dotnet/sdk/2.1.301/Sdks/Microsoft.NET.Sdk/targets/Microsoft.PackageDependencyResolution.targets(198,5): error MSB4018:    at Microsoft.NET.Build.Tasks.ResolvePackageAssets.CacheReader..ctor(ResolvePackageAssets task) [/home/sa/project_vulcan/src/HordeFlow.Infrastructure/HordeFlow.Infrastructure.csproj]\r\n/usr/share/dotnet/sdk/2.1.301/Sdks/Microsoft.NET.Sdk/targets/Microsoft.PackageDependencyResolution.targets(198,5): error MSB4018:    at Microsoft.NET.Build.Tasks.ResolvePackageAssets.ReadItemGroups() [/home/sa/project_vulcan/src/HordeFlow.Infrastructure/HordeFlow.Infrastructure.csproj]\r\n/usr/share/dotnet/sdk/2.1.301/Sdks/Microsoft.NET.Sdk/targets/Microsoft.PackageDependencyResolution.targets(198,5): error MSB4018:    at Microsoft.NET.Build.Tasks.ResolvePackageAssets.ExecuteCore() [/home/sa/project_vulcan/src/HordeFlow.Infrastructure/HordeFlow.Infrastructure.csproj]\r\n/usr/share/dotnet/sdk/2.1.301/Sdks/Microsoft.NET.Sdk/targets/Microsoft.PackageDependencyResolution.targets(198,5): error MSB4018:    at Microsoft.NET.Build.Tasks.TaskBase.Execute() [/home/sa/project_vulcan/src/HordeFlow.Infrastructure/HordeFlow.Infrastructure.csproj]\r\n/usr/share/dotnet/sdk/2.1.301/Sdks/Microsoft.NET.Sdk/targets/Microsoft.PackageDependencyResolution.targets(198,5): error MSB4018:    at Microsoft.Build.BackEnd.TaskExecutionHost.Microsoft.Build.BackEnd.ITaskExecutionHost.Execute() [/home/sa/project_vulcan/src/HordeFlow.Infrastructure/HordeFlow.Infrastructure.csproj]\r\n/usr/share/dotnet/sdk/2.1.301/Sdks/Microsoft.NET.Sdk/targets/Microsoft.PackageDependencyResolution.targets(198,5): error MSB4018:    at Microsoft.Build.BackEnd.TaskBuilder.ExecuteInstantiatedTask(ITaskExecutionHost taskExecutionHost, TaskLoggingContext taskLoggingContext, TaskHost taskHost, ItemBucket bucket, TaskExecutionMode howToExecuteTask) [/home/sa/project_vulcan/src/HordeFlow.Infrastructure/HordeFlow.Infrastructure.csproj]\r\n\r\nUsing Ubuntu 17 on a Hyper-V\r\n```\r\n**dotnet info**\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.1.301\r\n Commit:    59524873d6\r\n\r\nRuntime Environment:\r\n OS Name:     ubuntu\r\n OS Version:  17.10\r\n OS Platform: Linux\r\n RID:         ubuntu.17.10-x64\r\n Base Path:   /usr/share/dotnet/sdk/2.1.301/\r\n\r\nHost (useful for support):\r\n  Version: 2.1.1\r\n  Commit:  6985b9f684\r\n\r\n.NET Core SDKs installed:\r\n  2.1.301 [/usr/share/dotnet/sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.1 [/usr/share/dotnet/shared/Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.1 [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.1 [/usr/share/dotnet/shared/Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n"},{"Id":"7931571331","Type":"IssuesEvent","CreatedAt":"2018-07-07T01:47:48","Actor":"danmosemsft","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/23063","RelatedDescription":"Closed issue \"AppContext.TargetFrameworkName differs between CoreRT and CoreCLR\" (#23063) at dotnet/corefx","RelatedBody":"https://github.com/dotnet/coreclr/pull/13266#pullrequestreview-55061899\r\n\r\n In CoreCLR, AppContext.TargetFrameworkName will always return null. On CoreRT/ProjectN, it will return attribute value from main exe https://github.com/dotnet/corert/blob/ff7eba504516fa0bc0a50357ad559c19b45d1d51/src/System.Private.CoreLib/src/System/AppContext.cs#L45\r\n\r\nIf we are OK with updating CoreCLR, we return `                return Assembly.GetEntryAssembly()?.GetCustomAttribute<TargetFrameworkAttribute>()?.FrameworkName;\r\n` from AppDomainSetup.TargetFrameworkName\r\n\r\n this will cause AppContext to parse \".NETCoreApp,Version=v2.0\" and have an identifier and version instead of empty/null as it currently has and I don't know what that will do downstream."},{"Id":"7931454382","Type":"PullRequestEvent","CreatedAt":"2018-07-07T00:21:06","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/30690","RelatedDescription":"Merged pull request \"Port Marshal API tests from CoreCLR\" (#30690) at dotnet/corefx","RelatedBody":""}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"7931794655","Type":"PullRequestEvent","CreatedAt":"2018-07-07T05:23:44","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/corert/pull/6068","RelatedDescription":null,"RelatedBody":"This is required to use the correct forwarder for System.Runtime.InteropServices types that still\r\nhave a different home between CoreCLR and CoreRT.\r\n\r\nWorkaround for #3231\r\nFixes #6062"},{"Id":"7931794621","Type":"PullRequestEvent","CreatedAt":"2018-07-07T05:23:41","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/pull/6068","RelatedDescription":"Closed pull request \"Use uapaot mscorlib facade\" (#6068) at dotnet/corert","RelatedBody":"This is required to use the correct forwarder for System.Runtime.InteropServices types that still\r\nhave a different home between CoreCLR and CoreRT.\r\n\r\nWorkaround for #3231\r\nFixes #6062"},{"Id":"7931794031","Type":"PullRequestEvent","CreatedAt":"2018-07-07T05:23:07","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/6070","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#6070) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub"},{"Id":"7931719168","Type":"IssuesEvent","CreatedAt":"2018-07-07T04:06:33","Actor":"tiandian","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/issues/6072","RelatedDescription":"Closed issue \"It is possible make writing rd.xml easier by write a log in GetType()?\" (#6072) at dotnet/corert","RelatedBody":"When I publish a asp.net core app to corert, it often runs error,  i reference many third party libraries,\r\nI don't know which code generate the error, and I can't change the code in the third party libraries,\r\nbut I know it is most possible be a reflection error,   and it is most possible Type.GetType() return null,\r\n\r\nso I want ask it is possible let Type.GetType to write to a log file when it return null when publish to corert?\r\nchange Type.GetType's code to below:\r\n\r\n```\r\n        public static Type GetType(String typeName)\r\n        {\r\n            StackCrawlMark stackMark = StackCrawlMark.LookForMyCaller;\r\n            Type t = return RuntimeType.GetType(typeName, false, false, false, ref stackMark);\r\n\r\n#if LOG\r\n            if (t == null)\r\n            {\r\n                Writelog(\"ReflectionError.txt\", string.Format(\"GetType: typeName = {0} return null.\", typeName));\r\n            }\r\n#endif\r\n\r\n            return t;\r\n        }\r\n```\r\n\r\nthen when i run `dotnet publish -r win-x64 -c release --LOG=1`, when i run the published exe, it will write a ReflectionError.txt file, I don't need know which line code in the third library generate the error, I just need add the error type in the ReflectionError.txt to rd.xml to resolve the problem.\r\n\r\nthanks!\r\n"},{"Id":"7931717667","Type":"IssuesEvent","CreatedAt":"2018-07-07T04:05:30","Actor":"tiandian","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/issues/6073","RelatedDescription":"Opened issue \"It is possible add all Assemblies in rd.xml  by one line?\" (#6073) at dotnet/corert","RelatedBody":"Is it possible to add one line to rd.xml, to let dotnet publish add all the assemblies's metadata to the published exe?\r\n\r\n```\r\n<Directives>\r\n    <Application>\r\n           <Assembly Name=\"*\" Dynamic=\"Required All\" />\r\n    </Application>\r\n</Directives>\r\n```\r\n\r\nor if there is not rd.xml, then add all referenced assemblies's metadata to to published exe, just let it can work.\r\n\r\nI have used vb6, it can compile to p-code, and it can compilt to native-code too, it has all the  metadata in its exe file, and vb6's exe is small, and vb6's vm is small, it is just only 1.32M.\r\n\r\nSo I don't know the how big is dotnet core's  metadata? if the dotnet has 100M, the metadata has 1%, it will only has 1M,  but since the published corert exe is already so big, add 1M more to it, not much side effects.\r\n\r\nSo it is possible to let the corert's exe include all the referenced assemblies's metadata to the publish exe default, don't let the use to add line to rd.xml, even maybe it will make the exe file 1M bigger  , \r\n\r\nThanks.\r\n"},{"Id":"7931488581","Type":"IssuesEvent","CreatedAt":"2018-07-07T00:44:15","Actor":"tiandian","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/issues/6072","RelatedDescription":"Opened issue \"It is possible make writing rd.xml easier by write a log in GetType()?\" (#6072) at dotnet/corert","RelatedBody":"When I publish a asp.net core app to corert, it often runs error,  i reference many third party libraries,\r\nI don't know which code generate the error, and I can't change the code in the third party libraries,\r\nbut I know it is most possible be a reflection error,   and it is most possible Type.GetType() return null,\r\n\r\nso I want ask it is possible let Type.GetType to write to a log file when it return null when publish to corert?\r\nchange Type.GetType's code to below:\r\n\r\n```\r\n        public static Type GetType(String typeName)\r\n        {\r\n            StackCrawlMark stackMark = StackCrawlMark.LookForMyCaller;\r\n            Type t = return RuntimeType.GetType(typeName, false, false, false, ref stackMark);\r\n\r\n#if LOG\r\n            if (t == null)\r\n            {\r\n                Writelog(\"ReflectionError.txt\", string.Format(\"GetType: typeName = {0} return null.\", typeName));\r\n            }\r\n#endif\r\n\r\n            return t;\r\n        }\r\n```\r\n\r\nthen when i run `dotnet publish -r win-x64 -c release --LOG=1`, when i run the published exe, it will write a ReflectionError.txt file, I don't need know which line code in the third library generate the error, I just need add the error type in the ReflectionError.txt to rd.xml to resolve the problem.\r\n\r\nthanks!\r\n"},{"Id":"7931207392","Type":"IssuesEvent","CreatedAt":"2018-07-06T22:25:27","Actor":"ncsurfus","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/issues/6071","RelatedDescription":"Opened issue \"Linux non-trivial marshalling support\" (#6071) at dotnet/corert","RelatedBody":"Any idea when this will be fixed or how I can work around it? I can't make HttpClient requests with the CurlHandler as it always fails with the same exception. If I use the SocketsHttpHandler I run into another marshaling issue for authentication (GSSAPI). I have no issues on Windows.\r\n\r\n```\r\nUnhandled Exception: System.Exception: Method '[System.Net.Http]Interop+Http.RegisterSslCtxCallback(SafeCurlHandle,SslCtxCallback,native int,SafeCallbackHandle&)' requires non-trivial marshalling that is not yet supported by this compiler.\r\n   at Interop.Http.RegisterSslCtxCallback(Interop.Http.SafeCurlHandle, Interop.Http.SslCtxCallback, IntPtr, Interop.Http.SafeCallbackHandle&) + 0x24\r\n   at System.Net.Http.CurlHandler.SslProvider.SetSslOptionsForSupportedBackend(CurlHandler.EasyRequest, CurlHandler.ClientCertificateProvider, IntPtr) + 0x2a\r\n   at System.Net.Http.CurlHandler.SslProvider.SetSslOptions(CurlHandler.EasyRequest, ClientCertificateOption) + 0x157\r\n   at System.Net.Http.CurlHandler.EasyRequest.InitializeCurl() + 0x188\r\n   at System.Net.Http.CurlHandler.MultiAgent.ActivateNewRequest(CurlHandler.EasyRequest) + 0x16c\r\n```\r\n\r\n```\r\nUnhandled Exception: System.ComponentModel.Win32Exception (0x80090020): Method '[System.Net.Http]Interop+NetSecurityNative.InitSecContext(Status&,SafeGssCredHandle,SafeGssContextHandle&,bool,SafeGssNameHandle,uint32,uint8[],int32,GssBuffer&,uint32&,int32&)' requires non-trivial marshalling that is not yet supported by this compiler.\r\n   at System.Net.NTAuthentication.GetOutgoingBlob(Byte[], Boolean, SecurityStatusPal&) + 0x550\r\n   at System.Net.NTAuthentication.GetOutgoingBlob(String) + 0x64\r\n   at System.Net.Http.AuthenticationHelper.<SendWithNtAuthAsync>d__46.MoveNext() + 0x396\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw() + 0x1b\r\n   at System.Net.Http.HttpConnectionPool.<SendWithRetryAsync>d__39.MoveNext() + 0x3c1\r\n```"},{"Id":"7930255668","Type":"PullRequestEvent","CreatedAt":"2018-07-06T18:04:29","Actor":"dotnet-maestro-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/6070","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#6070) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7930243859","Type":"PullRequestEvent","CreatedAt":"2018-07-06T18:01:33","Actor":"Anipik","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/pull/6069","RelatedDescription":"Closed pull request \"Mirror changes from dotnet/coreclr\" (#6069) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub"},{"Id":"7930173461","Type":"PullRequestEvent","CreatedAt":"2018-07-06T17:44:55","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/pull/6035","RelatedDescription":"Closed pull request \"[WIP] Make the generic composition details relative addresses\" (#6035) at dotnet/corert","RelatedBody":"Marking this as WIP because eventually I'll need to submit this through the TFS side and update rhbind as well. I would like to do most of the code review through Git though because CoreRT is just a nicer place to prototype in.\r\n\r\nI'm looking at size regressions between .NET Native 1.7 and the current mainline branch. A thing that stood out is universally bigger EETypes. A contributor to this was getting rid of GenericInstanceDescs between 1.7 and 2.0 and replacing them by direct references to generic composition details from the EEType. Size-wise, this was mostly a wash, but we can actually do better - these new fields are not critical to be pointer-sized.\r\n\r\nThis change turns them into relative pointers. This saves 33 kB on a hello world app. I expect around 100 kB savings on the UWP People app based on my back-of-the-envelope calculation.\r\n\r\nWe could apply the same treatment to the optional fields pointer and the generic composition data."}],"ResultType":"GitHubEvent"},"SDK":{"Events":[],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1013052742326280192","CreatedAt":"2018-06-30T13:32:50+00:00","UserScreenname":"dotnet","Text":"Tune in for Jeff's Saturday show, learn how to use C# and @ASPNET Core.  Always a good time https://t.co/KJoRPYHnHt","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":31,"FavoriteCount":8,"RawContent":null}]}},"RunOn":"2018-07-07T05:30:40.1532256Z","RunDurationInMilliseconds":6961}