{"Data":{"Blog":{"FeedItems":[{"Title":"Modernize existing .NET apps with Windows Containers and Azure","PublishedOn":"2017-11-01T23:14:48+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"As part of the series of posts announced at this initial blog post (.NET Application Architecture Guidance) that explores each of the architecture areas currently covered by our team, this current blog post focuses on introducing the new &#8220;Modernize existing .NET applications with Windows Containers and Azure&#8221; eBook which you can download here. Just as a reminder,... <a aria-label=\"read more about Modernize existing .NET apps with Windows Containers and Azure\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/11/01/modernize-existing-net-apps-with-windows-containers-and-azure/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/01/modernize-existing-net-apps-with-windows-containers-and-azure/","RawContent":null},{"Title":"Introducing API Analyzer","PublishedOn":"2017-10-31T23:24:24+00:00","CommentsCount":14,"FacebookCount":0,"Summary":"This post was written by Olia Gavrysh. Have you ever wondered which APIs are deprecated and which should you use instead? Or have you ever used an API and then found out it didn&#8217;t work on Mac or Linux? Have that ever happened to you too late when a major part of your code is... <a aria-label=\"read more about Introducing API Analyzer\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/10/31/introducing-api-analyzer/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/10/31/introducing-api-analyzer/","RawContent":null},{"Title":"Welcome to C# 7.1","PublishedOn":"2017-10-31T22:39:48+00:00","CommentsCount":16,"FacebookCount":0,"Summary":"With C# we have always tended towards major releases: bundle a lot of features up, and release less frequently. We even went so far as routinely omitting the traditional &#34;.0&#34; when we talked about C# 6.0! In the C# 7.0 &#34;wave&#34; we are trying something new. Tools such as Visual Studio upgrade on a frequent... <a aria-label=\"read more about Welcome to C# 7.1\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/10/31/welcome-to-c-7-1/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/10/31/welcome-to-c-7-1/","RawContent":null},{"Title":"Moving to real time test discovery in Test Explorer","PublishedOn":"2017-10-30T22:46:58+00:00","CommentsCount":5,"FacebookCount":0,"Summary":"Real time test discovery is a new Visual Studio feature that uses a Roslyn analyzer to discover tests and populate the test explorer in real time without requiring you to build your project. This feature has been introduced in Visual Studio 2017 15.5 Preview 2 behind a feature flag. You can try it out by... <a aria-label=\"read more about Moving to real time test discovery in Test Explorer\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/10/30/real-time-test-discovery/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/10/30/real-time-test-discovery/","RawContent":null},{"Title":"Entity Framework 6.2 Runtime Released","PublishedOn":"2017-10-26T21:32:59+00:00","CommentsCount":21,"FacebookCount":0,"Summary":"Today we announce the availability of EF 6.2 runtime in NuGet.org. Entity Framework (EF) is Microsoft&#8217;s traditional object/relational mapper (O/RM) for .NET Framework. To understand the difference between EF6 and EF Core, please refer to our documentation. How to obtain the new package You can install EF 6.2 either using the &#8220;Manage NuGet Packages&#8221; option... <a aria-label=\"read more about Entity Framework 6.2 Runtime Released\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/10/26/entity-framework-6-2-runtime-released/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/10/26/entity-framework-6-2-runtime-released/","RawContent":null},{"Title":".NET Core Performance Profiling with Intel® VTune™ Amplifier 2018","PublishedOn":"2017-10-23T16:41:13+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"This post was written by Varun Venkatesan, Li Tian, and Juan Rodriguez, engineers at Intel. They are excited to share .NET Core-specific enhancements that Intel has made to VTune Amplifier 2018. We&#8217;re excited to have a new tool to use to help make .NET Core faster on Intel chips. Intel has been a strong partner in the development... <a aria-label=\"read more about .NET Core Performance Profiling with Intel® VTune™ Amplifier 2018\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/10/23/net-core-performance-profiling-with-intel-vtune-amplifier-2018/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/10/23/net-core-performance-profiling-with-intel-vtune-amplifier-2018/","RawContent":null},{"Title":"Experiment with Azure for FREE!","PublishedOn":"2017-10-19T14:00:11+00:00","CommentsCount":39,"FacebookCount":0,"Summary":"What is Azure? What can it do for me? Do I need it? How do I find out? How do I use it? Will it help my business? Can it help my career? With all the things Azure can do, it&#8217;s hard to know where to start answering these important questions. But there&#8217;s a really... <a aria-label=\"read more about Experiment with Azure for FREE!\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/10/19/experiment-with-azure-for-free/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/10/19/experiment-with-azure-for-free/","RawContent":null},{"Title":"Announcing the .NET Framework 4.7.1","PublishedOn":"2017-10-17T21:26:30+00:00","CommentsCount":37,"FacebookCount":0,"Summary":"Today, we are announcing the release of the .NET Framework 4.7.1. It’s included in the Windows 10 Fall Creators Update. .NET Framework 4.7.1 is also available on Windows 7+ and Windows Server 2008 R2+.  We’ve added support for targeting the .NET Framework 4.7.1 in Visual Studio 2017 15.5. The .NET Framework 4.7.1 includes improvements in several areas: Accessibility improvements... <a aria-label=\"read more about Announcing the .NET Framework 4.7.1\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/10/17/announcing-the-net-framework-4-7-1/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/10/17/announcing-the-net-framework-4-7-1/","RawContent":null},{"Title":".NET Framework October 2017 Preview of Quality Rollup","PublishedOn":"2017-10-17T20:56:56+00:00","CommentsCount":5,"FacebookCount":0,"Summary":"Today, we are releasing the October 2017 Preview of Quality Rollup. This type of rollup is intended for businesses that want to the preview or use quality improvements as soon as they are available. Quality and Reliability This release contains the following quality and reliability improvements. CLR Code optimization bug for x64 C# code targeting... <a aria-label=\"read more about .NET Framework October 2017 Preview of Quality Rollup\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/10/17/net-framework-october-2017-preview-of-quality-rollup/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/10/17/net-framework-october-2017-preview-of-quality-rollup/","RawContent":null},{"Title":"RyuJIT Just-in-Time Compiler Optimization Enhancements","PublishedOn":"2017-10-17T05:16:50+00:00","CommentsCount":15,"FacebookCount":0,"Summary":"I&#8217;d like to tell you about some of the recent changes we&#8217;ve made as part of our ongoing work to extend the optimization capabilities of RyuJIT, the MSIL-to-native code generator used by .NET Core and .NET Framework. I hope it will make for an interesting read, and offer some insight into the sorts of optimization opportunities we have... <a aria-label=\"read more about RyuJIT Just-in-Time Compiler Optimization Enhancements\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/10/16/ryujit-just-in-time-compiler-optimization-enhancements/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/10/16/ryujit-just-in-time-compiler-optimization-enhancements/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"6797468573","Type":"PullRequestEvent","CreatedAt":"2017-11-01T23:04:17","Actor":"bfistein","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/89","RelatedDescription":"Opened pull request \"New logo and SSL certificate for Peachpie\" (#89) at dotnet/home","RelatedBody":""},{"Id":"6767783059","Type":"IssuesEvent","CreatedAt":"2017-10-26T05:52:31","Actor":"HarelM","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/issues/88","RelatedDescription":"Opened issue \"File system watcher crach\" (#88) at dotnet/home","RelatedBody":"Not sure where to open this issue.\r\nI'm experiencing crashes since I migrated to .net core 2.0 while running my site.\r\nThe following is the exception and stack trace:\r\n```\r\nAn unhandled exception of type 'System.ArgumentException' occurred in System.Private.CoreLib.dll\r\nThe path is not of a legal form.\r\n\r\nSystem.Private.CoreLib.dll!System.IO.Path.GetFullPath(string path)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileSystemGlobbing.dll!Microsoft.Extensions.FileSystemGlobbing.InMemoryDirectoryInfo.InMemoryDirectoryInfo(string rootDir, System.Collections.Generic.IEnumerable<string> files, bool normalized)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileSystemGlobbing.dll!Microsoft.Extensions.FileSystemGlobbing.MatcherExtensions.Match(Microsoft.Extensions.FileSystemGlobbing.Matcher matcher, string rootDir, System.Collections.Generic.IEnumerable<string> files)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileSystemGlobbing.dll!Microsoft.Extensions.FileSystemGlobbing.MatcherExtensions.Match(Microsoft.Extensions.FileSystemGlobbing.Matcher matcher, string file)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileProviders.Physical.dll!Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.ReportChangeForMatchedEntries(string path)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileProviders.Physical.dll!Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.OnFileSystemEntryChange(string fullPath)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileProviders.Physical.dll!Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.OnRenamed(object sender, System.IO.RenamedEventArgs e)\tUnknown\tNo symbols loaded.\r\n \tSystem.IO.FileSystem.Watcher.dll!System.IO.FileSystemWatcher.NotifyRenameEventArgs(System.IO.WatcherChangeTypes action, string name, string oldName)\tUnknown\tNo symbols loaded.\r\n \tSystem.IO.FileSystem.Watcher.dll!System.IO.FileSystemWatcher.ParseEventBufferAndNotifyForEach(byte[] buffer)\tUnknown\tNo symbols loaded.\r\n \tSystem.IO.FileSystem.Watcher.dll!System.IO.FileSystemWatcher.ReadDirectoryChangesCallback(uint errorCode, uint numBytes, System.Threading.NativeOverlapped* overlappedPointer)\tUnknown\tNo symbols loaded.\r\n \tSystem.Private.CoreLib.dll!System.Threading._IOCompletionCallback.PerformIOCompletionCallback(uint errorCode, uint numBytes, System.Threading.NativeOverlapped* pOVERLAP)\tUnknown\tNo symbols loaded.\r\n```\r\n\r\nI'm not sure how to fix this. I can reproduce it although it's not easy since I think it has to do with timing..."}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"6766996801","Type":"IssuesEvent","CreatedAt":"2017-10-26T00:24:01","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/36","RelatedDescription":"Opened issue \"microsoft/dotnet-framework images now support Windows Server 1709\" (#36) at dotnet/announcements","RelatedBody":"# microsoft/dotnet-framework images now support Windows Server 1709\r\n\r\n[Windows Server Version 1709](https://blogs.technet.microsoft.com/windowsserver/2017/10/17/windows-server-version-1709-available-for-download/) was released earlier this month. [microsoft/windowsservercore](https://hub.docker.com/r/microsoft/windowsservercore/) images have been updated to support [Windows Server 1709](https://docs.microsoft.com/en-us/windows-server/get-started/whats-new-in-windows-server-1709). These images can be identified with the `1709` [tag](https://hub.docker.com/r/microsoft/windowsservercore/tags/).\r\n\r\nThe following repos have been updated:\r\n\r\n* [microsoft/aspnet](https://hub.docker.com/r/microsoft/aspnet/)\r\n* [microsoft/dotnet-framework](https://hub.docker.com/r/microsoft/dotnet-framework)\r\n* [microsoft/wcf](https://hub.docker.com/r/microsoft/wcf)\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [Microsoft/dotnet-framework-docker #35](https://github.com/Microsoft/dotnet-framework-docker/issues/35)\r\n\r\n## Details\r\n\r\n* [microsoft/dotnet-framework-docker #31](https://github.com/Microsoft/dotnet-framework-docker/pull/31)\r\n* [microsoft/dotnet-framework-docker #34](https://github.com/Microsoft/dotnet-framework-docker/pull/34)\r\n* [microsoft/dotnet-framework-docker #32](https://github.com/Microsoft/dotnet-framework-docker/issues/32)\r\n\r\n.NET Framework Docker images now support Windows Server 1709, the latest version of Windows Server.\r\n\r\n.NET Framework 3.5 and 4.7.1 images are available for Windows Server 1709. Windows Server 1709 includes the .NET Framework 4.7.1. .NET Framework 4.6.2 and .NET Framework 4.7 images are only available with Windows Server 2016 images. You can see an example of 1709-based images in the following example.\r\n\r\n![.NET Framework Windows 1709 images](https://user-images.githubusercontent.com/2608468/32028249-6684a82c-b9a2-11e7-8afa-1b1abf89eb3b.png)\r\n\r\nYou can identify Windows Server 1709-based .NET Framework images with the tag substring `windowsservercore-1709` and Windows Server 2016 images with the tag substring `windowsservercore-10.0.14393`. You will likely notice that the 1709-based images are easier to identify than the Windows Server 2016 ones. \r\n\r\nChanges have been made in Windows Server 1709 that affect the [compatibility of Windows container images](https://docs.microsoft.com/en-us/virtualization/windowscontainers/deploy-containers/version-compatibility). The practical impact is that Windows Server 2016, Windows 10 Anniversary Update, and Windows 10 Creative Update hosts cannot load Windows Server 1709 images. Windows 10 Fall Creative Update and Windows Server 1709 can load both original Windows Server 2016 and Windows Server 1709 images. Windows Server 1709 requires Hyper-V isolation (`docker run --isolation=hyperv`) in order to load Windows Server 2016 images.\r\n\r\nGiven the compatibility differences with Windows container images, .NET Framework images will adopt [manifest lists](https://github.com/Microsoft/dotnet-framework-docker/issues/32) so that a single logical tag, like `4.7.1`, can be used on both older and newer Windows 10 and Windows Server versions. `docker pull microsoft/dotnet-framework:4.7.1` will pull a Windows Server 2016 image on Windows Server 2016, Windows 10 Anniversary Update, and Windows 10 Creators Update machines. The same command will pull a Windows Server 1709 based image on Windows Server 1709 and Windows 10 Fall Creators Update machines. The same rules apply to FROM lines. [.NET Core](https://hub.docker.com/r/microsoft/dotnet) Docker images use this same feature to support Linux and Windows hosts and AMD64 and ARM32 hosts with the same logical tag, like `2.0-runtime`.\r\n\r\nThe following tags will be updated to use manifest lists:\r\n\r\n- `latest`\r\n- `4.7.1`\r\n- `3.5`\r\n\r\nYou need [Docker 17.10](https://docs.docker.com/release-notes/docker-ce/#17100-ce-2017-10-17) or later to use Windows-version-specific manifest list tags. The following change from the Docker 17.10 release notes is the one that enables this functionality.\r\n\r\n* Add support for Windows version filtering on pull [moby/moby#35090](https://github.com/moby/moby/pull/35090)\r\n\r\nYou are only recommended to use manifest tags if you want flexibility for development and deployment environments. That's what manifest tags deliver. In general, you should select the most specific tag you can. The more specific the tag, the more predictable the result of each `docker pull` and `docker build` will be."},{"Id":"6761784781","Type":"IssuesEvent","CreatedAt":"2017-10-25T04:03:38","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/35","RelatedDescription":"Opened issue \"microsoft/dotnet-framework latest tag updated to 4.7.1\" (#35) at dotnet/announcements","RelatedBody":"# microsoft/dotnet-framework latest tag updated to 4.7.1\r\n\r\nThe [.NET Framework 4.7.1](https://blogs.msdn.microsoft.com/dotnet/2017/10/17/announcing-the-net-framework-4-7-1/) was released earlier this month. The [microsoft/dotnet-framework](https://hub.docker.com/r/microsoft/dotnet-framework) `latest` [tag](https://hub.docker.com/r/microsoft/dotnet-framework/tags/) was also updated.\r\n\r\nThe .NET Framework 4.7.1 is represented by the `microsoft/dotnet-framework:4.7.1` tag.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [Microsoft/dotnet-framework-docker #33](https://github.com/Microsoft/dotnet-framework-docker/issues/33)\r\n\r\n## Details\r\n\r\n* [microsoft/dotnet-framework-docker #28](https://github.com/Microsoft/dotnet-framework-docker/pull/28)\r\n* [microsoft/dotnet-framework-docker #27](https://github.com/Microsoft/dotnet-framework-docker/pull/27)\r\n\r\nThe .NET Framework 4.7.1 image is now available as a Docker image. The `latest` tag points to the same image.\r\n\r\nThe following repos were updated:\r\n\r\n* [microsoft/asp](https://hub.docker.com/r/microsoft/aspnet/)\r\n* [microsoft/dotnet-framework](https://hub.docker.com/r/microsoft/dotnet-framework)\r\n* [microsoft/wcf](https://hub.docker.com/r/microsoft/wcf)\r\n\r\nThe [microsoft/dotnet-framework-samples](https://hub.docker.com/r/microsoft/dotnet-framework-samples) repo has not yet been updated.\r\n\r\nWe recommend that you use version-specific tags for production apps. For experimentation or while an application is in development, using the `latest` tag is a fine practice.\r\n\r\nWe recently found a [significant performance issue with .NET Framework Docker images](https://github.com/dotnet/announcements/issues/33). The .NET Framework 4.7.1 image includes the fix for that problem.\r\n"},{"Id":"6729762964","Type":"IssuesEvent","CreatedAt":"2017-10-17T21:21:15","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/34","RelatedDescription":"Opened issue \"Microsoft Security Advisory CVE-2017-8585 : Malformed Culture can cause application crash\" (#34) at dotnet/announcements","RelatedBody":"# Microsoft Security Advisory CVE-2017-8585 \r\n## Malformed Culture can cause application to crash\r\n### Executive Summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in the public versions of .NET Core 1.0 and 1.1. This advisory also provides guidance on what developers can do to update their applications correctly.\r\n\r\nMicrosoft is aware of a security vulnerability in the public version of .NET Core where a malformed string request could cause an application to crash and lead to a denial of service.\r\n\r\nSystem administrators are advised to update their .NET Core runtimes to versions 1.0.7 and 1.1.4. Developers are advised to update their .NET Core SDK to version 1.1.4.\r\n\r\n### Discussion\r\n\r\nUse https://github.com/dotnet/corefx/issues/24703 for discussion of this advisory.\r\n\r\n### Mitigation Factors\r\n\r\n.NET Core 2.0 is not affected by this issue.\r\n\r\n### Advisory FAQ\r\n#### How do I know if I am affected?\r\n\r\nAny application running against .NET Core 1.0.6 or lower versions, or 1.1.2 or lower versions is affected. The latest version of the .NET core runtime you have installed in your computer can be listed by running `dotnet --info`. Running that command produces an output similar to the following:\r\n\r\n```\r\n.NET Command Line Tools (2.0.2)\r\n\r\nProduct Information:\r\n Version:            2.0.2\r\n Commit SHA-1 hash:  a04b4bf512\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.16299\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.0.2\\\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.0\r\n  Build    : e8b8861ac7faf042c87a5c2f9f2d04c98b69f28d\r\n```\r\n\r\nAs this command only displays the latest version of the runtime installed (or the version set in the *global.json* file), it may hide the fact that you have a vulnerable runtime. A complete list of runtimes can be discovered by performing a directory listing in the install root directories. The default root directories are listed in the following table:\r\n\r\n| Operating System | Location          |\r\n|------------------|-------------------|\r\n| Windows          | C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\ |\r\n| macOS            | /usr/local/share/dotnet/shared/Microsoft.NETCore.App/ |\r\n| [Supported Linux platforms](https://docs.microsoft.com/dotnet/core/linux-prerequisites#supported-linux-versions) | /usr/share/dotnet/shared/Microsoft.NETCore.App/ |\r\n\r\nEach runtime version is installed in its own directory, where the directory name is the version number. If you don't have a directory for 1.0.7 and 1.1.4, then any applications targeting 1.0 or 1.1 of .NET Core are vulnerable.\r\n\r\nAlso, even if you have a directory for 1.0.7 and 1.1.4 present in your system, if you've deployed [self-contained applications](https://docs.microsoft.com/dotnet/core/deploying/#self-contained-deployments-scd) targeting the impacted versions, these applications are also vulnerable.\r\n\r\n#### How do I fix my affected application?\r\nApplications can be fixed by installing the latest .NET Core runtimes or SDKs. Typically, application servers only have runtime packages installed and developer machines have the SDKs installed. Installers for the runtimes can be downloaded from the [Runtime and SDK download archive](https://github.com/dotnet/core/blob/master/release-notes/download-archive.md). .NET Core 1.1.4 SDK installs both versions 1.0.7 and 1.1.4 of the .NET Core runtime.\r\n\r\nIf you've built a [self-contained application](https://docs.microsoft.com/dotnet/core/deploying/#self-contained-deployments-scd), you must install the new runtime and SDK, recompile your application and redeploy.\r\n\r\n#### What if the update breaks my application?\r\nAn application can be pinned to a previous version of the runtime by editing the [*application.runtime.config*](https://github.com/dotnet/cli/blob/ede74b6be1406ba0c086b6d5fc1a5d4eacff1f01/Documentation/specs/runtime-configuration-file.md#appnameruntimeconfigjson) file for that application. Set the framework version to the desired version and the `rollForward` property to `false`. These settings should be treated as a temporary measure and the application updated to work with the patched versions of the framework.\r\n\r\nSince the *application.runtime.config* file is an optional file, you may need to create one for each application and add it alongside the executable."},{"Id":"6725652001","Type":"IssuesEvent","CreatedAt":"2017-10-17T06:48:14","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/33","RelatedDescription":"Opened issue \".NET Framework Docker Performance Issue Resolved\" (#33) at dotnet/announcements","RelatedBody":"# .NET Framework Docker Performance Issue Resolved\r\n\r\nMultiple people have [reported](https://github.com/Microsoft/dotnet-framework-docker/issues/25) that [.NET Framework performance in Docker images is poor](https://github.com/moby/moby/issues/33096). In the cases reported, performance was an order of magnitude slower than expected.\r\n\r\nThis issue has now been resolved for [microsoft/dotnet-framework](https://hub.docker.com/r/microsoft/dotnet-framework/) images. It was due to incorrectly generated NGEN images. They are now correctly generated and expected performance has been restored.\r\n\r\n## Discussion \r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-framework-docker #29](https://github.com/Microsoft/dotnet-framework-docker/pull/29)\r\n\r\n## Details\r\n\r\n* [dotnet-framework-docker #27](https://github.com/Microsoft/dotnet-framework-docker/pull/27)\r\n\r\nThe .NET Framework uses [NGEN](https://docs.microsoft.com/dotnet/framework/tools/ngen-exe-native-image-generator) as a primary mechanism for startup performance. .NET Framework assemblies are compiled to native code with the NGEN tool as part of the .NET Framework setup process. The benefit of these files is that they can be loaded and executed without any additional significant extra work required by the Common Language Runtime (CLR). The lack of  additional work means that performance is very good.\r\n\r\nNGEN image generation interacts with a Windows subsystem that is not correctly supported in Windows containers. NGEN images are generated in Windows containers, but they are not valid. Fortunately, the CLR can still run in the presence of invalid images, but code execution is much slower.\r\n\r\nWe are in the process of fixing Windows containers so that NGEN will work correctly. In the interim, we have updated the [dotnet-framework/](https://hub.docker.com/r/microsoft/dotnet-framework/) images to correctly generate NGEN images. The [microsoft/windowsservercore/](https://hub.docker.com/r/microsoft/windowsservercore/) images still have the performance problem that was initially reported. We are working on updating Windows containers so that NGEN works as expected. You are recommended to use the [dotnet-framework/](https://hub.docker.com/r/microsoft/dotnet-framework/) base image if you can, so that you can get better performance.\r\n\r\nOne of the developers that reported the performance issue shared basic performance results. The first two rows are the before state. The last row is the dotnet-framework image after the fix. The improvement is quite significant.\r\n\r\n> Runing `powershell -command (measure-command { powershell -command exit }).TotalSeconds` in various images on our CI server produced this table of timings:\r\n \r\n| time (s) | image |\r\n|----------|--------|\r\n|10.7212372| microsoft/windowsservercore |\r\n|8.3278793  | microsoft/dotnet-framework:4.7|\r\n|0.6426073  | microsoft/dotnet-framework:4.7 (after fix)|\r\n"},{"Id":"6645912196","Type":"IssuesEvent","CreatedAt":"2017-09-27T19:47:08","Actor":"terrajobst","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/32","RelatedDescription":"Opened issue \".NET Framework 4.7.1 provides built-in support for .NET Standard 2.0\" (#32) at dotnet/announcements","RelatedBody":"## Summary\r\n\r\n.NET Framework 4.7.1 will have built-in support for .NET Standard 2.0. This means that you don't have to deploy any additional files or use binding redirects to use .NET Standard 2.0 libraries.\r\n\r\nFor a demo, check out [this video][video].\r\n\r\n## Details\r\n\r\nWhile libraries targeting [.NET Standard 2.0][ns20post] are can be consumed by applications and libraries [targeting .NET Framework 4.6.1][nstable] and higher, not all files that are required for .NET Standard libraries were part of .NET Framework 4.6.1. In fact, .NET Framework 4.6.1 was shipped before .NET Standard 2.0 was even designed. That's why building an application targeting .NET Framework 4.6.1 (as well as 4.6.2 and 4.7) will have to deploy additional files.\r\n\r\n* If you use **Visual Studio 2017 15.3** or higher, these files are automatically copied to the application's output folder.\r\n\r\n* If you use **Visual Studio 2015 and [use NuGet 3.6][nuget36]**, we'll prompt you to install a [support package][vs2015support] which will handle copying the files to the output directory.\r\n\r\nStarting with .NET Framework 4.7.1 these files no longer have to be deployed with the application -- they are built right into the .NET Framework itself.\r\n\r\n.NET Framework 4.7.1 also adds[about 200 missing APIs][missingapis] that were part of .NET Standard 2.0 but not actually implemented by .NET Framework 4.6.1, 4.6.2 or 4.7.\r\n\r\nThis also removes the need for [binding redirects][netfx-issues] when using .NET Standard libraries on .NET Framework because the CLR automatically unifies version numbers of assemblies that are part of the platform.\r\n\r\nLearn more [by reading the .NET Standard FAQ](http://aka.ms/netstandardfaq).\r\n\r\n## Discussion\r\n\r\nDiscussion\r\n\r\nFor a discussion, please go to dotnet/standard#514.\r\n\r\n[ns20post]: https://blogs.msdn.microsoft.com/dotnet/2017/08/14/announcing-net-standard-2-0/\r\n[nstable]: https://docs.microsoft.com/en-us/dotnet/standard/net-standard\r\n[nuget36]: https://dist.nuget.org/visualstudio-2015-vsix/v3.6.0/NuGet.Tools.vsix\r\n[vs2015support]: https://aka.ms/netstandard-build-support-netfx\r\n[missingapis]: https://github.com/dotnet/standard/blob/master/netstandard/src/ApiCompatBaseline.net461.txt\r\n[netfx-issues]: https://github.com/dotnet/standard/issues/481\r\n[video]: https://www.youtube.com/watch?v=u67Eu_IgEMs\r\n\r\nhttps://github.com/dotnet/standard/issues/514"}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"6798359747","Type":"PullRequestEvent","CreatedAt":"2017-11-02T05:00:53","Actor":"karajas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/14817","RelatedDescription":"Merged pull request \"Fix sync's location.\" (#14817) at dotnet/coreclr","RelatedBody":"PR #14807 places sync before clean. Therefore all the tools pulled down will be cleaned on the next task.\r\n\r\nThis switches that location."},{"Id":"6798318774","Type":"PullRequestEvent","CreatedAt":"2017-11-02T04:41:05","Actor":"jashook","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/14817","RelatedDescription":"Opened pull request \"Fix sync's location.\" (#14817) at dotnet/coreclr","RelatedBody":"PR #14807 places sync before clean. Therefore all the tools pulled down will be cleaned on the next task.\r\n\r\nThis switches that location."},{"Id":"6798116367","Type":"PullRequestEvent","CreatedAt":"2017-11-02T03:12:12","Actor":"ahsonkhan","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/14816","RelatedDescription":"Opened pull request \"Add object null checks in Memory<T> APIs to support default\" (#14816) at dotnet/coreclr","RelatedBody":"Fixes https://github.com/dotnet/corefx/issues/24985\r\n\r\nRelated PR: \r\n\r\ncc: @stephentoub, @KrzysztofCwalina"},{"Id":"6797958019","Type":"PullRequestEvent","CreatedAt":"2017-11-02T02:09:48","Actor":"AndyAyersMS","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/14815","RelatedDescription":"Opened pull request \"JIT: Merge legacy inlining policies\" (#14815) at dotnet/coreclr","RelatedBody":"Merge the LegacyPolicy and EnhancedLegacyPolicy into a unified policy that\r\nbehaves like the EnhancedLegacyPolicy. Rename this policy to the DefaultPolicy\r\nsince it is in fact the default inline policy.\r\n\r\nWe had been keeping the LegacyPolicy around in case we ever needed to revert\r\nback to the initial RyuJit inline behavior, but that safeguard no longer seems\r\nnecessary.\r\n\r\nRemove some of the checks in flowgraph.cpp that alter behavior based on policy\r\nas they are no longer needed.\r\n\r\nRemove the jit config setting that allowed selection of the LegacyPolicy.\r\n\r\nThis is the first stage in fixing #14441."},{"Id":"6797832338","Type":"IssuesEvent","CreatedAt":"2017-11-02T01:19:41","Actor":"CarolEidt","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/14546","RelatedDescription":"Closed issue \"[RyuJIT/arm32] Assertion failed 'recentAssignedRef->delayRegFree'\" (#14546) at dotnet/coreclr","RelatedBody":"From corefx x86_arm_altjit run, e.g. \"@dotnet-bot test Windows_NT x86_arm_altjit Checked corefx_baseline\".\r\n\r\nFound in System.Numerics.Vectors.Tests:\r\n```\r\nE:\\gh\\corefx\\bin\\tests\\System.Numerics.Vectors.Tests\\netcoreapp-Windows_NT-Release-x86>RunTests.cmd E:\\gh\\corefx\\bin\\testhost\\netcoreapp-Windows_NT-Release-x86\\\r\nUsing E:\\gh\\corefx\\bin\\testhost\\netcoreapp-Windows_NT-Release-x86\\ as the test runtime folder.\r\nExecuting in E:\\gh\\corefx\\bin\\tests\\System.Numerics.Vectors.Tests\\netcoreapp-Windows_NT-Release-x86\\\r\nRunning tests... Start time: 13:31:45.85\r\n\r\nE:\\gh\\corefx\\bin\\tests\\System.Numerics.Vectors.Tests\\netcoreapp-Windows_NT-Release-x86>set COMPlus_AltJit=*\r\nE:\\gh\\corefx\\bin\\tests\\System.Numerics.Vectors.Tests\\netcoreapp-Windows_NT-Release-x86>set COMPlus_AltJitNgen=*\r\nE:\\gh\\corefx\\bin\\tests\\System.Numerics.Vectors.Tests\\netcoreapp-Windows_NT-Release-x86>set COMPlus_AltJitName=protononjit.dll\r\nE:\\gh\\corefx\\bin\\tests\\System.Numerics.Vectors.Tests\\netcoreapp-Windows_NT-Release-x86>set COMPlus_NoGuiOnAssert=1\r\nE:\\gh\\corefx\\bin\\tests\\System.Numerics.Vectors.Tests\\netcoreapp-Windows_NT-Release-x86>set COMPlus_ContinueOnAssert=0\r\nE:\\gh\\corefx\\bin\\tests\\System.Numerics.Vectors.Tests\\netcoreapp-Windows_NT-Release-x86>set COMPlus_AltJitAssertOnNYI=1\r\n\r\nE:\\gh\\corefx\\bin\\tests\\System.Numerics.Vectors.Tests\\netcoreapp-Windows_NT-Release-x86>call E:\\gh\\corefx\\bin\\testhost\\netcoreapp-Windows_NT-Release-x86\\\\dotnet.exe xunit.console.netcore.exe System.Numerics.Vectors.Tests.dll  -xml testResults.xml -notrait Benchmark=true -notrait category=nonnetcoreapptests -notrait category=nonwindowstests  -notrait category=IgnoreForCI -notrait category=OuterLoop -notrait category=failing\r\nxUnit.net console test runner (32-bit .NET Core)\r\nCopyright (C) 2014 Outercurve Foundation.\r\n\r\nDiscovering: System.Numerics.Vectors.Tests\r\nDiscovered:  System.Numerics.Vectors.Tests\r\nStarting:    System.Numerics.Vectors.Tests\r\n\r\nAssert failure(PID 688 [0x000002b0], Thread: 17816 [0x4598]): Assertion failed 'recentAssignedRef->delayRegFree' in 'System.Numerics.Tests.GenericVectorTests:IsDiffTolerable(float,float,int):bool' (IL size 76)\r\n\r\n    File: e:\\gh\\coreclr2\\src\\jit\\lsra.cpp Line: 5942\r\n    Image: E:\\gh\\corefx\\bin\\testhost\\netcoreapp-Windows_NT-Release-x86\\dotnet.exe\r\n```\r\n\r\nFull repro:\r\n```\r\ndotnet/coreclr:\r\nE:\\gh\\coreclr2> build.cmd x86 checked\r\n\r\ndotnet/corefx:\r\nE:\\gh\\corefx> build.cmd -Release -os:Windows_NT -buildArch:x86 -- /p:CoreCLROverridePath=E:\\gh\\coreclr2\\bin\\Product\\Windows_NT.x86.Checked\r\nE:\\gh\\corefx> build-tests.cmd -Release -os:Windows_NT -buildArch:x86 -- /p:WithoutCategories=IgnoreForCI /p:PreExecutionTestScript=e:\\bugs\\SetStressModes.bat\r\n\r\nWith e:\\bugs\\SetStressModes.bat:\r\nset COMPlus_AltJit=*\r\nset COMPlus_AltJitNgen=*\r\nset COMPlus_AltJitName=protononjit.dll\r\nset COMPlus_NoGuiOnAssert=1\r\nset COMPlus_ContinueOnAssert=0\r\nset COMPlus_AltJitAssertOnNYI=1\r\n```\r\n"},{"Id":"6797822911","Type":"IssuesEvent","CreatedAt":"2017-11-02T01:16:01","Actor":"wateret","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/11822","RelatedDescription":"Closed issue \"[RyuJIT/arm32] armel support\" (#11822) at dotnet/coreclr","RelatedBody":"I am going to start the work with unit tests in `JIT/CodeGenBringUpTests`. Currently all of these tests pass on RyuJIT/arm(hardfp) so I think this would be a good starting point.\r\n\r\n### Current Status (JIT/CodeGenBringUpTests)\r\nHere is the current status with master branch 983962491816a98acafdfffd0046455423ac26ae(18, May).\r\n\r\n```\r\n=======================\r\n     Test Results\r\n=======================\r\n# CoreCLR Bin Dir  :\r\n# Tests Discovered : 158\r\n# Passed           : 87\r\n# Failed           : 71\r\n# Skipped          : 0\r\n=======================\r\n```\r\n\r\n### List of failed tests(71 tests)\r\n\r\nAs expected, most of failed tests are floating point related tests.\r\n\r\n<details><summary>Show List</summary>\r\n```\r\nFAILED   - [   9]JIT/CodeGenBringUpTests/ArrayExc/ArrayExc.sh\r\nFAILED   - [  23]JIT/CodeGenBringUpTests/DblAdd/DblAdd.sh\r\nFAILED   - [  24]JIT/CodeGenBringUpTests/DblAddConst/DblAddConst.sh\r\nFAILED   - [  25]JIT/CodeGenBringUpTests/DblArea/DblArea.sh\r\nFAILED   - [  26]JIT/CodeGenBringUpTests/DblArray/DblArray.sh\r\nFAILED   - [  27]JIT/CodeGenBringUpTests/DblAvg2/DblAvg2.sh\r\nFAILED   - [  28]JIT/CodeGenBringUpTests/DblAvg6/DblAvg6.sh\r\nFAILED   - [  29]JIT/CodeGenBringUpTests/DblCall1/DblCall1.sh\r\nFAILED   - [  30]JIT/CodeGenBringUpTests/DblCall2/DblCall2.sh\r\nFAILED   - [  31]JIT/CodeGenBringUpTests/DblDist/DblDist.sh\r\nFAILED   - [  32]JIT/CodeGenBringUpTests/DblDiv/DblDiv.sh\r\nFAILED   - [  33]JIT/CodeGenBringUpTests/DblDivConst/DblDivConst.sh\r\nFAILED   - [  34]JIT/CodeGenBringUpTests/DblFillArray/DblFillArray.sh\r\nFAILED   - [  35]JIT/CodeGenBringUpTests/DblMul/DblMul.sh\r\nFAILED   - [  36]JIT/CodeGenBringUpTests/DblMulConst/DblMulConst.sh\r\nFAILED   - [  37]JIT/CodeGenBringUpTests/DblNeg/DblNeg.sh\r\nFAILED   - [  38]JIT/CodeGenBringUpTests/DblRem/DblRem.sh\r\nFAILED   - [  39]JIT/CodeGenBringUpTests/DblRoots/DblRoots.sh\r\nFAILED   - [  40]JIT/CodeGenBringUpTests/DblSub/DblSub.sh\r\nFAILED   - [  41]JIT/CodeGenBringUpTests/DblSubConst/DblSubConst.sh\r\nFAILED   - [  42]JIT/CodeGenBringUpTests/DblVar/DblVar.sh\r\nFAILED   - [  43]JIT/CodeGenBringUpTests/DivConst/DivConst.sh\r\nFAILED   - [  45]JIT/CodeGenBringUpTests/FPAdd/FPAdd.sh\r\nFAILED   - [  46]JIT/CodeGenBringUpTests/FPAddConst/FPAddConst.sh\r\nFAILED   - [  47]JIT/CodeGenBringUpTests/FPArea/FPArea.sh\r\nFAILED   - [  48]JIT/CodeGenBringUpTests/FPArray/FPArray.sh\r\nFAILED   - [  49]JIT/CodeGenBringUpTests/FPAvg2/FPAvg2.sh\r\nFAILED   - [  50]JIT/CodeGenBringUpTests/FPAvg6/FPAvg6.sh\r\nFAILED   - [  51]JIT/CodeGenBringUpTests/FPCall1/FPCall1.sh\r\nFAILED   - [  52]JIT/CodeGenBringUpTests/FPCall2/FPCall2.sh\r\nFAILED   - [  53]JIT/CodeGenBringUpTests/FPConvDbl2Lng/FPConvDbl2Lng.sh\r\nFAILED   - [  54]JIT/CodeGenBringUpTests/FPConvF2F/FPConvF2F.sh\r\nFAILED   - [  55]JIT/CodeGenBringUpTests/FPConvF2I/FPConvF2I.sh\r\nFAILED   - [  56]JIT/CodeGenBringUpTests/FPConvF2Lng/FPConvF2Lng.sh\r\nFAILED   - [  57]JIT/CodeGenBringUpTests/FPConvI2F/FPConvI2F.sh\r\nFAILED   - [  58]JIT/CodeGenBringUpTests/FPDist/FPDist.sh\r\nFAILED   - [  59]JIT/CodeGenBringUpTests/FPDiv/FPDiv.sh\r\nFAILED   - [  60]JIT/CodeGenBringUpTests/FPDivConst/FPDivConst.sh\r\nFAILED   - [  61]JIT/CodeGenBringUpTests/FPError/FPError.sh\r\nFAILED   - [  62]JIT/CodeGenBringUpTests/FPFillArray/FPFillArray.sh\r\nFAILED   - [  63]JIT/CodeGenBringUpTests/FPMath/FPMath.sh\r\nFAILED   - [  64]JIT/CodeGenBringUpTests/FPMul/FPMul.sh\r\nFAILED   - [  65]JIT/CodeGenBringUpTests/FPMulConst/FPMulConst.sh\r\nFAILED   - [  66]JIT/CodeGenBringUpTests/FPNeg/FPNeg.sh\r\nFAILED   - [  67]JIT/CodeGenBringUpTests/FPRem/FPRem.sh\r\nFAILED   - [  68]JIT/CodeGenBringUpTests/FPRoots/FPRoots.sh\r\nFAILED   - [  69]JIT/CodeGenBringUpTests/FPSmall/FPSmall.sh\r\nFAILED   - [  70]JIT/CodeGenBringUpTests/FPSub/FPSub.sh\r\nFAILED   - [  71]JIT/CodeGenBringUpTests/FPSubConst/FPSubConst.sh\r\nFAILED   - [  72]JIT/CodeGenBringUpTests/FPVar/FPVar.sh\r\nFAILED   - [  81]JIT/CodeGenBringUpTests/InstanceCalls/InstanceCalls.sh\r\nFAILED   - [  85]JIT/CodeGenBringUpTests/JTrueEqDbl/JTrueEqDbl.sh\r\nFAILED   - [  86]JIT/CodeGenBringUpTests/JTrueEqFP/JTrueEqFP.sh\r\nFAILED   - [  88]JIT/CodeGenBringUpTests/JTrueGeDbl/JTrueGeDbl.sh\r\nFAILED   - [  89]JIT/CodeGenBringUpTests/JTrueGeFP/JTrueGeFP.sh\r\nFAILED   - [  91]JIT/CodeGenBringUpTests/JTrueGtDbl/JTrueGtDbl.sh\r\nFAILED   - [  92]JIT/CodeGenBringUpTests/JTrueGtFP/JTrueGtFP.sh\r\nFAILED   - [  94]JIT/CodeGenBringUpTests/JTrueLeDbl/JTrueLeDbl.sh\r\nFAILED   - [  95]JIT/CodeGenBringUpTests/JTrueLeFP/JTrueLeFP.sh\r\nFAILED   - [  97]JIT/CodeGenBringUpTests/JTrueLtDbl/JTrueLtDbl.sh\r\nFAILED   - [  98]JIT/CodeGenBringUpTests/JTrueLtFP/JTrueLtFP.sh\r\nFAILED   - [ 100]JIT/CodeGenBringUpTests/JTrueNeDbl/JTrueNeDbl.sh\r\nFAILED   - [ 101]JIT/CodeGenBringUpTests/JTrueNeFP/JTrueNeFP.sh\r\nFAILED   - [ 107]JIT/CodeGenBringUpTests/Localloc/Localloc.sh\r\nFAILED   - [ 121]JIT/CodeGenBringUpTests/ModConst/ModConst.sh\r\nFAILED   - [ 128]JIT/CodeGenBringUpTests/OpMembersOfStructLocal/OpMembersOfStructLocal.sh\r\nFAILED   - [ 135]JIT/CodeGenBringUpTests/StaticCalls/StaticCalls.sh\r\nFAILED   - [ 143]JIT/CodeGenBringUpTests/UDivConst/UDivConst.sh\r\nFAILED   - [ 144]JIT/CodeGenBringUpTests/UModConst/UModConst.sh\r\nFAILED   - [ 150]JIT/CodeGenBringUpTests/div2/div2.sh\r\nFAILED   - [ 157]JIT/CodeGenBringUpTests/struct16args/struct16args.sh\r\n```\r\n</details>\r\n\r\nFull Log : [ryujit_armel_full_log.txt](https://github.com/dotnet/coreclr/files/1021779/ryujit_armel_full_log.txt)\r\n\r\n"},{"Id":"6797776345","Type":"IssuesEvent","CreatedAt":"2017-11-02T00:57:12","Actor":"sywhang","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/14786","RelatedDescription":"Closed issue \"How To Build My Own .Net Core Profiler\" (#14786) at dotnet/coreclr","RelatedBody":"I have written a .NetCore(2.0) App and want to do some profile work. Based on the .NetCore  Profiling Overview docs(https://github.com/dotnet/coreclr/blob/master/Documentation/botr/profiling.md),\r\nit seems like that I just need to implement the Profiler DLL and add into my .NetCore Project(is that right?).But I have no experience on writing code like this(what I only know is that I need to implement the **ICorProfilerCallback2** interfaces in the Profiler DLL).\r\nSo, is there any suggestions on how to start to build my own Profiler or some Profiler examples? Thank you :)\r\n\r\n\r\nPS: My work OS is macOS&centOS 7,\r\nand in this file (https://github.com/dotnet/coreclr/blob/master/Documentation/project-docs/profiling-api-status.md) it seems that the profiling API was finished on Windows/Linux"}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"6798226451","Type":"PullRequestEvent","CreatedAt":"2017-11-02T03:57:52","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/7954","RelatedDescription":"Opened pull request \"Removing EvaluateRuntimeCoherence from the Publish dependent targets list.\" (#7954) at dotnet/cli","RelatedBody":""},{"Id":"6797427460","Type":"PullRequestEvent","CreatedAt":"2017-11-01T22:51:22","Actor":"nguerrera","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/7953","RelatedDescription":"Opened pull request \"WIP Generate symbols on crossgen for profiling\" (#7953) at dotnet/cli","RelatedBody":""},{"Id":"6797356213","Type":"PullRequestEvent","CreatedAt":"2017-11-01T22:29:59","Actor":"AndyGerlicher","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/7952","RelatedDescription":"Opened pull request \"MSBuild 15.5.172\" (#7952) at dotnet/cli","RelatedBody":"Contains: https://github.com/Microsoft/msbuild/pull/2690\r\n\r\nI'm told to proceed assuming this is approved. Ideally we could get this going ASAP and insert in the same VS PR?\r\n\r\nVS PR: https://devdiv.visualstudio.com/DevDiv/MSBuild/_git/VS/pullrequest/92347"},{"Id":"6797286620","Type":"PullRequestEvent","CreatedAt":"2017-11-01T22:10:20","Actor":"wfurt","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/7951","RelatedDescription":"Opened pull request \"add basic support for FreeBSD\" (#7951) at dotnet/cli","RelatedBody":"This is another part of https://github.com/dotnet/corefx/issues/1626\r\n\r\nThis adds basic handling for platform suffixes. \r\nWith this and previous core-setup changes I was able to get minimal sdk cli functions.  "},{"Id":"6795935435","Type":"IssuesEvent","CreatedAt":"2017-11-01T17:18:21","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/7904","RelatedDescription":"Closed issue \"'dotnet' is not recognized as an internal or external command, operable program or batch file.\" (#7904) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\nI am trying to create a Angular 2 spa template using cmd in Visual studio 2015 update 3\r\n\r\nI am trying to run \"dotnet new --install Microsoft.AspNetCore.SpaTemplate::*\"\r\nBut it gives 'dotnet' is not recognized as an internal or external command, operable program or batch file.\r\n\r\nI also installed DotNet core (dotnet-sdk-2.0.0-win-gs-x64)\r\n\r\n## Expected  behavior\r\nIt should run the command successfully and install SPA template\r\n\r\n## Actual behavior\r\n'dotnet' is not recognized as an internal or external command, operable program or batch file.\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n\r\n\r\n\r\n\r\n\r\n"},{"Id":"6795931043","Type":"IssuesEvent","CreatedAt":"2017-11-01T17:17:28","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/7888","RelatedDescription":"Closed issue \"'dotnet new xunit/mstest' commands always write to stderr\" (#7888) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\nExecuting `dotnet new mstest` or `dotnet new xunit` writes to stderr when being executed in `PowerShell 5.1`. This means that one sees red herring errors in CI systems like `AppVeyor` where stderr is treated as an error, see for example the original issue [here](https://github.com/appveyor/ci/issues/1873).\r\n```powershell\r\ndotnet new xunit 2>stderr.txt # capture stderr in file\r\ncat .\\stderr.txt\r\n```\r\n## Expected  behavior\r\nThe file should be empty if the command was successful.\r\n## Actual behavior\r\nThe following was written to stderr\r\n```\r\nAt line:1 char:1\r\n+ & dotnet new xunit  2>stderr2.txt\r\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n    + CategoryInfo          : NotSpecified: (:String) [], RemoteException\r\n    + FullyQualifiedErrorId : NativeCommandError\r\n```\r\n## Environment data\r\n`dotnet --info` output:\r\n```\r\n.NET Command Line Tools (2.0.2)\r\n\r\nProduct Information:\r\n Version:            2.0.2\r\n Commit SHA-1 hash:  a04b4bf512\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.15063\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.0.2\\\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.0\r\n  Build    : e8b8861ac7faf042c87a5c2f9f2d04c98b69f28d\r\n```"},{"Id":"6795925147","Type":"IssuesEvent","CreatedAt":"2017-11-01T17:16:16","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/7941","RelatedDescription":"Closed issue \"Dotnet CLI fails to build SLN with CloudServices\" (#7941) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\n1) Have SLN with mixed full framework and Core code\r\n2) Have CloudServices project in SLN\r\n3) run `dotnet build` on the SLN\r\n\r\n## Expected  behavior\r\nEverything builds\r\n\r\n## Actual behavior\r\nError\r\nerror MSB4019: The imported project \"C:\\Program Files\\dotnet\\sdk\\2.0.2\\Microsoft\\VisualStudio\\v10.0\\Windows Azure Tools\\2.9\\Microsoft.WindowsAzure.targets\" was not found. Confirm that the path in the <Import> declaration is correct, and that the file exists on disk.\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n.NET Command Line Tools (2.0.2)\r\n\r\nProduct Information:\r\n Version:            2.0.2\r\n Commit SHA-1 hash:  a04b4bf512\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.16299\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.0.2\\\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.0\r\n  Build    : e8b8861ac7faf042c87a5c2f9f2d04c98b69f28d\r\n\r\n\r\n\r\n\r\n\r\n"},{"Id":"6795917178","Type":"IssuesEvent","CreatedAt":"2017-11-01T17:14:39","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/7950","RelatedDescription":"Closed issue \"EF Migrations -> dnx to cli\" (#7950) at dotnet/cli","RelatedBody":"Hi Team, \r\n\r\nI have a project where we do entity framework migrations through dnx. Now, when we are running this project on new machines (with latest version of VS 2015), I am not able to run dnx (may be because it is no longer supported). I want to migrate the project from dnx to cli in order to be able to create migration successfully through cli and updating the database as well. Can someone recommend me an easy way to do that or share any link for the same."},{"Id":"6795913960","Type":"IssuesEvent","CreatedAt":"2017-11-01T17:13:59","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/7945","RelatedDescription":"Closed issue \"dotnet build : Bin folder is empty when passing /t:rebuild \" (#7945) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\n`dotnet build myproject.csproj /t:rebuild` \r\n\r\n[Sample repo](https://github.com/johnkors/dotnet-build-target-rebuild/blob/master/build.cmd)\r\n\r\n## Expected  behavior\r\nA rebuilt project and contents in the output folder\r\n\r\n## Actual behavior\r\nAn empty output folder\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n```\r\nλ dotnet --info\r\n.NET Command Line Tools (2.0.2)\r\n\r\nProduct Information:\r\n Version:            2.0.2\r\n Commit SHA-1 hash:  a04b4bf512\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  6.3.9600\r\n OS Platform: Windows\r\n RID:         win81-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.0.2\\\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.0\r\n  Build    : e8b8861ac7faf042c87a5c2f9f2d04c98b69f28d\r\n```\r\n\r\n\r\n\r\n\r\n\r\n"},{"Id":"6795869786","Type":"PullRequestEvent","CreatedAt":"2017-11-01T17:05:06","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/7943","RelatedDescription":"Merged pull request \"Insert Testplatform 15.5.0-preview-20171031-01\" (#7943) at dotnet/cli","RelatedBody":"DevDiv insertion PR: https://devdiv.visualstudio.com/DevDiv/_git/VS/pullrequest/91773?_a=overview\r\nRelease notes: [here](https://github.com/Microsoft/vstest-docs/blob/master/docs/releases.md#1550-preview-20171031-01)"},{"Id":"6795857867","Type":"PullRequestEvent","CreatedAt":"2017-11-01T17:02:34","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/7949","RelatedDescription":"Merged pull request \"Merge release/15.5 to master\" (#7949) at dotnet/cli","RelatedBody":"\nThis is an automatically generated pull request from release/15.5 into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/15.5-to-master-20171101-070036\ngit reset --hard upstream/master\ngit merge upstream/release/15.5\n# Fix merge conflicts\ngit commit\ngit push merges/release/15.5-to-master-20171101-070036 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"6795857801","Type":"PullRequestEvent","CreatedAt":"2017-11-01T17:02:33","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/7940","RelatedDescription":"Merged pull request \"Merge release/15.5 to master\" (#7940) at dotnet/cli","RelatedBody":"\nThis is an automatically generated pull request from release/15.5 into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/15.5-to-master-20171031-070033\ngit reset --hard upstream/master\ngit merge upstream/release/15.5\n# Fix merge conflicts\ngit commit\ngit push merges/release/15.5-to-master-20171031-070033 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"6795852629","Type":"PullRequestEvent","CreatedAt":"2017-11-01T17:01:30","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/7935","RelatedDescription":"Merged pull request \"Modifying the CLI so that it procudes only the CLI verbs + MSBuild pr…\" (#7935) at dotnet/cli","RelatedBody":"…ops/targets, instead of the whole toolset.\r\n\r\n- If this PR should not run tests please add text \"skip[REMOVE_THIS]ci[REMOVE_THIS]please\" (remove the marked text, no quotes).\r\n- Please add description for changes you are making.\r\n- If there is an issue related to this PR, please add the reference.\r\n"}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"6797584525","Type":"PullRequestEvent","CreatedAt":"2017-11-01T23:43:27","Actor":"dotnet-maestro-bot","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/570","RelatedDescription":"Opened pull request \"Update BuildTools to prerelease-02201-04 (master)\" (#570) at dotnet/standard","RelatedBody":""},{"Id":"6796392181","Type":"PullRequestEvent","CreatedAt":"2017-11-01T18:51:16","Actor":"chcosta","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/569","RelatedDescription":"Opened pull request \"Change feed source\" (#569) at dotnet/standard","RelatedBody":"package feed version change for this branch was auto-updated via maestro (and I just merged the change).  This change is updating the default TF restore url.  I've already updated the Pipebuild definition in VSTS."},{"Id":"6796355754","Type":"PullRequestEvent","CreatedAt":"2017-11-01T18:43:38","Actor":"chcosta","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/566","RelatedDescription":"Merged pull request \"Update BuildTools to prerelease-02201-02 (master)\" (#566) at dotnet/standard","RelatedBody":"<details><summary>Discarded auto-update commits (click to expand)</summary><auto-pr-discard-list>\r\n\r\n * [`861903d`](https://github.com/dotnet-maestro-bot/standard/commits/861903d76a2be458c8a734913fc8893aebbabe1a) Update BuildTools to prerelease-02201-02\r\n   * :hourglass: **OSX10.12** Started. [Details](https://ci.dot.net/job/dotnet_standard/job/master/job/OSX10.12_prtest/93/)\r\n   * :hourglass: **OSX10.12** Triggered. (1/1 on osx-10.12||OSX.1012.Amd64.Open) [Details]()\r\n   * :hourglass: **OSX10.12** Triggered. [Details]()\r\n   * :hourglass: **Ubuntu16.04** Started. [Details](https://ci.dot.net/job/dotnet_standard/job/master/job/Ubuntu16.04_prtest/161/)\r\n   * :hourglass: **Ubuntu16.04** Triggered. [Details]()\r\n   * :hourglass: **Windows_NT** Started. [Details](https://ci.dot.net/job/dotnet_standard/job/master/job/Windows_NT_prtest/161/)\r\n   * :hourglass: **Windows_NT** Triggered. (2/23 on win2012-20171003) [Details]()\r\n   * :hourglass: **Windows_NT** Triggered. (15/15 on win2012-20171003) [Details]()\r\n   * :hourglass: **Windows_NT** Triggered. [Details]()\r\n   * :heavy_check_mark: **license/cla** All CLA requirements met. [Details](https://cla.dotnetfoundation.org/dotnet/standard?pullRequest=566)\r\n   * :heavy_check_mark: **Ubuntu16.04** Build finished.  [Details](https://ci.dot.net/job/dotnet_standard/job/master/job/Ubuntu16.04_prtest/161/)\r\n   * :heavy_check_mark: **WIP** ready for review [Details](https://github.com/gr2m/wip-bot)\r\n * [`3802602`](https://github.com/dotnet-maestro-bot/standard/commits/3802602454df6d4fe56dd4442abdc1cdf9a52484) Update BuildTools to prerelease-02131-05\r\n   * :hourglass: **OSX10.12** Started. [Details](https://ci.dot.net/job/dotnet_standard/job/master/job/OSX10.12_prtest/92/)\r\n   * :hourglass: **OSX10.12** Triggered. [Details]()\r\n   * :hourglass: **Ubuntu16.04** Started. [Details](https://ci.dot.net/job/dotnet_standard/job/master/job/Ubuntu16.04_prtest/160/)\r\n   * :hourglass: **Ubuntu16.04** Triggered. (1/1 on ubuntu1604-20170925-1) [Details]()\r\n   * :hourglass: **Ubuntu16.04** Triggered. [Details]()\r\n   * :hourglass: **Windows_NT** Started. [Details](https://ci.dot.net/job/dotnet_standard/job/master/job/Windows_NT_prtest/160/)\r\n   * :hourglass: **Windows_NT** Triggered. [Details]()\r\n   * :heavy_check_mark: **license/cla** All CLA requirements met. [Details](https://cla.dotnetfoundation.org/dotnet/standard?pullRequest=566)\r\n   * :heavy_check_mark: **OSX10.12** Build finished.  [Details](https://ci.dot.net/job/dotnet_standard/job/master/job/OSX10.12_prtest/92/)\r\n   * :heavy_check_mark: **Ubuntu16.04** Build finished.  [Details](https://ci.dot.net/job/dotnet_standard/job/master/job/Ubuntu16.04_prtest/160/)\r\n   * :heavy_check_mark: **Windows_NT** Build finished.  [Details](https://ci.dot.net/job/dotnet_standard/job/master/job/Windows_NT_prtest/160/)\r\n   * :heavy_check_mark: **WIP** ready for review [Details](https://github.com/gr2m/wip-bot)\r\n   * :heavy_check_mark: **WIP** ready for review [Details](https://github.com/gr2m/wip-bot)\r\n * [`d5a9216`](https://github.com/dotnet-maestro-bot/standard/commits/d5a92167c720cad1503af9fe2c699392c0952f53) Update BuildTools to prerelease-02131-04\r\n   * :hourglass: **OSX10.12** Started. [Details](https://ci.dot.net/job/dotnet_standard/job/master/job/OSX10.12_prtest/91/)\r\n   * :hourglass: **OSX10.12** Triggered. (1/2 on osx-10.12||OSX.1012.Amd64.Open) [Details]()\r\n   * :hourglass: **OSX10.12** Triggered. [Details]()\r\n   * :hourglass: **Ubuntu16.04** Started. [Details](https://ci.dot.net/job/dotnet_standard/job/master/job/Ubuntu16.04_prtest/159/)\r\n   * :hourglass: **Ubuntu16.04** Triggered. (1/1 on ubuntu1604-20170925-1) [Details]()\r\n   * :hourglass: **Ubuntu16.04** Triggered. [Details]()\r\n   * :hourglass: **Windows_NT** Started. [Details](https://ci.dot.net/job/dotnet_standard/job/master/job/Windows_NT_prtest/159/)\r\n   * :hourglass: **Windows_NT** Triggered. (1/5 on win2012-20171003) [Details]()\r\n   * :hourglass: **Windows_NT** Triggered. [Details]()\r\n   * :heavy_check_mark: **license/cla** All CLA requirements met. [Details](https://cla.dotnetfoundation.org/dotnet/standard?pullRequest=566)\r\n   * :heavy_check_mark: **OSX10.12** Build finished.  [Details](https://ci.dot.net/job/dotnet_standard/job/master/job/OSX10.12_prtest/91/)\r\n   * :heavy_check_mark: **Ubuntu16.04** Build finished.  [Details](https://ci.dot.net/job/dotnet_standard/job/master/job/Ubuntu16.04_prtest/159/)\r\n   * :heavy_check_mark: **Windows_NT** Build finished.  [Details](https://ci.dot.net/job/dotnet_standard/job/master/job/Windows_NT_prtest/159/)\r\n   * :heavy_check_mark: **WIP** ready for review [Details](https://github.com/gr2m/wip-bot)\r\n   * :heavy_check_mark: **WIP** ready for review [Details](https://github.com/gr2m/wip-bot)\r\n * [`26f2768`](https://github.com/dotnet-maestro-bot/standard/commits/26f27684d62eebf2c74af0c6f037906807174825) Update BuildTools to prerelease-02131-03\r\n   * :hourglass: **OSX10.12** Started. [Details](https://ci.dot.net/job/dotnet_standard/job/master/job/OSX10.12_prtest/90/)\r\n   * :hourglass: **OSX10.12** Triggered. (6/11 on osx-10.12||OSX.1012.Amd64.Open) [Details]()\r\n   * :hourglass: **OSX10.12** Triggered. (8/10 on osx-10.12||OSX.1012.Amd64.Open) [Details]()\r\n   * :hourglass: **OSX10.12** Triggered. [Details]()\r\n   * :hourglass: **Ubuntu16.04** Started. [Details](https://ci.dot.net/job/dotnet_standard/job/master/job/Ubuntu16.04_prtest/158/)\r\n   * :hourglass: **Ubuntu16.04** Triggered. [Details]()\r\n   * :hourglass: **Windows_NT** Started. [Details](https://ci.dot.net/job/dotnet_standard/job/master/job/Windows_NT_prtest/158/)\r\n   * :hourglass: **Windows_NT** Triggered. [Details]()\r\n   * :heavy_check_mark: **license/cla** All CLA requirements met. [Details](https://cla.dotnetfoundation.org/dotnet/standard?pullRequest=566)\r\n   * :heavy_check_mark: **OSX10.12** Build finished.  [Details](https://ci.dot.net/job/dotnet_standard/job/master/job/OSX10.12_prtest/90/)\r\n   * :heavy_check_mark: **Ubuntu16.04** Build finished.  [Details](https://ci.dot.net/job/dotnet_standard/job/master/job/Ubuntu16.04_prtest/158/)\r\n   * :heavy_check_mark: **Windows_NT** Build finished.  [Details](https://ci.dot.net/job/dotnet_standard/job/master/job/Windows_NT_prtest/158/)\r\n   * :heavy_check_mark: **WIP** ready for review [Details](https://github.com/gr2m/wip-bot)\r\n   * :heavy_check_mark: **WIP** ready for review [Details](https://github.com/gr2m/wip-bot)\r\n * [`2e902ad`](https://github.com/dotnet-maestro-bot/standard/commits/2e902ad81bd8d571a9efd9d7ef7a03ad0d1c720d) Update BuildTools to prerelease-02131-02\r\n   * :hourglass: **OSX10.12** Started. [Details](https://ci.dot.net/job/dotnet_standard/job/master/job/OSX10.12_prtest/87/)\r\n   * :hourglass: **OSX10.12** Triggered. [Details]()\r\n   * :hourglass: **Ubuntu16.04** Started. [Details](https://ci.dot.net/job/dotnet_standard/job/master/job/Ubuntu16.04_prtest/155/)\r\n   * :hourglass: **Ubuntu16.04** Triggered. [Details]()\r\n   * :hourglass: **Windows_NT** Started. [Details](https://ci.dot.net/job/dotnet_standard/job/master/job/Windows_NT_prtest/155/)\r\n   * :hourglass: **Windows_NT** Triggered. [Details]()\r\n   * :heavy_check_mark: **license/cla** All CLA requirements met. [Details](https://cla.dotnetfoundation.org/dotnet/standard?pullRequest=566)\r\n   * :heavy_check_mark: **OSX10.12** Build finished.  [Details](https://ci.dot.net/job/dotnet_standard/job/master/job/OSX10.12_prtest/87/)\r\n   * :heavy_check_mark: **Ubuntu16.04** Build finished.  [Details](https://ci.dot.net/job/dotnet_standard/job/master/job/Ubuntu16.04_prtest/155/)\r\n   * :heavy_check_mark: **Windows_NT** Build finished.  [Details](https://ci.dot.net/job/dotnet_standard/job/master/job/Windows_NT_prtest/155/)\r\n   * :heavy_check_mark: **WIP** ready for review [Details](https://github.com/gr2m/wip-bot)\r\n   * :heavy_check_mark: **WIP** ready for review [Details](https://github.com/gr2m/wip-bot)\r\n * [`070b4a1`](https://github.com/dotnet-maestro-bot/standard/commits/070b4a1978c5f84300adeca56046cf40929b1d19) Update BuildTools to prerelease-02131-01\r\n   * :hourglass: **OSX10.12** Started. [Details](https://ci.dot.net/job/dotnet_standard/job/master/job/OSX10.12_prtest/85/)\r\n   * :hourglass: **OSX10.12** Triggered. [Details]()\r\n   * :hourglass: **Ubuntu16.04** Started. [Details](https://ci.dot.net/job/dotnet_standard/job/master/job/Ubuntu16.04_prtest/153/)\r\n   * :hourglass: **Ubuntu16.04** Triggered. (5/5 on ubuntu1604-20170925-1) [Details]()\r\n   * :hourglass: **Ubuntu16.04** Triggered. [Details]()\r\n   * :hourglass: **Windows_NT** Started. [Details](https://ci.dot.net/job/dotnet_standard/job/master/job/Windows_NT_prtest/153/)\r\n   * :hourglass: **Windows_NT** Triggered. (4/11 on win2012-20171003) [Details]()\r\n   * :hourglass: **Windows_NT** Triggered. [Details]()\r\n   * :heavy_check_mark: **OSX10.12** Build finished.  [Details](https://ci.dot.net/job/dotnet_standard/job/master/job/OSX10.12_prtest/85/)\r\n   * :heavy_check_mark: **Ubuntu16.04** Build finished.  [Details](https://ci.dot.net/job/dotnet_standard/job/master/job/Ubuntu16.04_prtest/153/)\r\n   * :heavy_check_mark: **Windows_NT** Build finished.  [Details](https://ci.dot.net/job/dotnet_standard/job/master/job/Windows_NT_prtest/153/)\r\n   * :heavy_check_mark: **WIP** ready for review [Details](https://github.com/gr2m/wip-bot)\r\n\r\n</auto-pr-discard-list></details>"},{"Id":"6793993825","Type":"IssuesEvent","CreatedAt":"2017-11-01T10:10:40","Actor":"drieseng","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/568","RelatedDescription":"Opened issue \"UAP assembly takes precedence over .NET Standard 2.0\" (#568) at dotnet/standard","RelatedBody":"I maintain an OSS project that currently ships a nuget containing (amongst others) an UAP10 and .NET Standard 1.3 assembly.\r\n\r\nI'm now looking adding a .NET Standard 2.0 assembly, but while testing I noticed that in a UWP project the UAP10 assembly ends up being used instead of the .NET Standard 2.0 assembly.\r\n\r\nIs this the normal behavior? Where can I find a page describing the target framework precedence?\r\nI found [this](https://docs.microsoft.com/en-us/nuget/schema/target-frameworks#precedence), but it's hardly complete.\r\n\r\nI have configured the UWP project like this:\r\n* both target version and min version set to **Windows 10 Fall Creators Update**.\r\n* **Microsoft.NETCore.UniversalWindowsPlatform** version **6.0.1**.\r\n\r\nI'm using Visual Studio 2017 (15.4.1)."},{"Id":"6791946259","Type":"IssuesEvent","CreatedAt":"2017-10-31T21:36:24","Actor":"AlexGhiondea","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/567","RelatedDescription":"Opened issue \".NET Standard issues on .NET Framework 4.7.1\" (#567) at dotnet/standard","RelatedBody":"## Summary\r\n\r\nApplications that target the .NET Framework 4.6.1 and use .NET Standard libraries may experience System.TypeLoadException exceptions when running on the .NET Framework 4.7.1\r\n\r\n## Symptoms and root cause\r\n\r\nThe .NET Framework 4.7.1 adds support for .NET Standard in-box. As part of this change, a few assemblies that used to ship independently from the .NET Framework have now been added to the .NET Framework. As these .NET Standard assemblies were not part of the .NET Framework prior to .NET 4.7.1, they were deployed with the application, and a binding redirect was added to the application's app.config file.\r\n\r\nWhen running on the .NET Framework 4.7.1, where the assemblies are now part of the Framework, the application now has two types with different identities, and that leads to a TypeLoadException. One type comes from the app-local assembly, and the other one comes from the .NET Framework assembly.\r\n\r\nAlso reported here: https://github.com/Microsoft/dotnet-framework-early-access/issues/9\r\n\r\nThe following types are potentially impacted by this issue.\r\n\r\n- System.Data.Common.DbColumn\r\n- System.Data.Common.DbDataReaderExtensions\r\n- System.Data.Common.IDbColumnSchemaGenerator\r\n- System.Diagnostics.StackFrameExtensions\r\n- System.Globalization.GlobalizationExtensions\r\n- System.Net.Sockets.SocketReceiveFromResult\r\n- System.Net.Sockets.SocketReceiveMessageFromResult\r\n- System.Net.Sockets.SocketTaskExtensions\r\n- System.Runtime.CompilerServices.TupleElementNamesAttribute\r\n- System.Runtime.InteropServices.Architecture\r\n- System.Runtime.InteropServices.OSPlatform\r\n- System.Runtime.InteropServices.RuntimeInformation\r\n- System.Runtime.Serialization.DataContractSerializerExtensions\r\n- System.Runtime.Serialization.ISerializationSurrogateProvider\r\n- System.Security.Cryptography.ECCurve\r\n- System.Security.Cryptography.ECParameters\r\n- System.Security.Cryptography.ECPoint\r\n- System.Security.Cryptography.IncrementalHash\r\n- System.Security.SecureStringMarshal\r\n- System.StringNormalizationExtensions\r\n- System.Threading.PreAllocatedOverlapped\r\n- System.Threading.ThreadPoolBoundHandle\r\n- System.TupleExtensions\r\n- System.ValueTuple\r\n- System.ValueTuple`1\r\n- System.ValueTuple`2\r\n- System.ValueTuple`3\r\n- System.ValueTuple`4\r\n- System.ValueTuple`5\r\n- System.ValueTuple`6\r\n- System.ValueTuple`7\r\n- System.ValueTuple`8\r\n- System.Xml.XPath.XDocumentExtensions\r\n\r\n### Plan\r\n\r\nWe have identified the problem and we will ship a fix for .NET Framework 4.7.1 in the next few months and in the next version of .NET Framework.\r\n\r\n## Workarounds\r\n\r\nThere are two ways to work around this issue:\r\n - When running on .NET Framework 4.7.1, remove the binding redirects from the app.config file for the assemblies that are now part of the .NET Framework.\r\n - Re-target your application to target the .NET Framwork 4.7 or .NET Framework 4.7.1.\r\n\r\n\r\n"},{"Id":"6789886145","Type":"PullRequestEvent","CreatedAt":"2017-10-31T14:51:19","Actor":"dseefeld","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/565","RelatedDescription":"Merged pull request \"Add retry logic for setup of dotnet cli\" (#565) at dotnet/standard","RelatedBody":"Copy init-tools.sh retry logic from corefx.\r\n\r\nFixes dotnet/core-eng#1966"}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"6798352692","Type":"IssuesEvent","CreatedAt":"2017-11-02T04:57:40","Actor":"Ark-kun","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/25011","RelatedDescription":"Opened issue \"[API] Array and List have BinarySearch, but SortedList does not. This seems illogical.\" (#25011) at dotnet/corefx","RelatedBody":"Binary search should be performed on an ordered list of items.\r\nThus it's a natural operation for SortedList and not so natural for Array or List as they may be non-ordered causing BinarySearch to return incorrect answer.\r\n\r\nBCL should either add BinarySearch to SortedList or better yet make am extension method for IList<T>."},{"Id":"6798193472","Type":"PullRequestEvent","CreatedAt":"2017-11-02T03:43:44","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/25004","RelatedDescription":"Merged pull request \"Fix concurrency in MultipleWaitingClients_ServerServesOneAtATime test\" (#25004) at dotnet/corefx","RelatedBody":"The Unix implementation works by having clients connect to the server socket, and connects are satisifed not when an accept happens but when there's room in the listen backlog.  Thus multiple clients might end up having their connects immediately satisfied, and we might try to then read/write the wrong client, and end up deadlocking.\r\n\r\nFixes https://github.com/dotnet/corefx/issues/24994"},{"Id":"6798191634","Type":"PullRequestEvent","CreatedAt":"2017-11-02T03:43:00","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/25010","RelatedDescription":"Opened pull request \"Fix a few WebSocketHandle.Managed issues\" (#25010) at dotnet/corefx","RelatedBody":"- At least until socket send/receives respect cancellation, we need to poll for cancellation after the handler's SendAsync completes.\r\n- We're unnecessarily allocating another CTS if no external cancellation was provided.\r\n- We're not disposing of the response object in the case of an error after SendAsync completes.\r\n\r\nFixes https://github.com/dotnet/corefx/issues/24969"},{"Id":"6798175497","Type":"PullRequestEvent","CreatedAt":"2017-11-02T03:36:11","Actor":"pjanotti","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/24989","RelatedDescription":"Merged pull request \"Add a simple way to test wmi remote\" (#24989) at dotnet/corefx","RelatedBody":"Simply using an environment variable, WmiTestTargetMachine, to specify\r\nthe target machine. When running the tests ensure that the account\r\nrunning the tests has rights on the target machine.\r\n\r\nThere is not much value in adding similar scope to other tests since\r\nregarding remote connectivity they actually end up hitting the same\r\ncode, so keep this just for some key tests."},{"Id":"6798116644","Type":"PullRequestEvent","CreatedAt":"2017-11-02T03:12:18","Actor":"ahsonkhan","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/25009","RelatedDescription":"Opened pull request \"Add null checks in Memory<T> APIs to support default\" (#25009) at dotnet/corefx","RelatedBody":"Fixes https://github.com/dotnet/corefx/issues/24985\r\n\r\nRelated PR: https://github.com/dotnet/coreclr/pull/14816\r\n\r\nAlso, applying the optimization from https://github.com/dotnet/coreclr/pull/14309\r\n\r\ncc: @stephentoub, @KrzysztofCwalina"},{"Id":"6797660195","Type":"IssuesEvent","CreatedAt":"2017-11-02T00:10:59","Actor":"ViktorHofer","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/21187","RelatedDescription":"Closed issue \"Remove unnecessary attributes and callback from non-serializable types\" (#21187) at dotnet/corefx","RelatedBody":"Relates to changes introduced in https://github.com/dotnet/corefx/issues/19119\r\nRemove unnecessary attributes and callbacks (NonSerialized, OnSerializing, etc) from non-serializable types.\r\n\r\n- [x] CoreFX\r\n- [ ] CoreCLR\r\n- [ ] CoreRT\r\n\r\ncc @danmosemsft @morganbr"},{"Id":"6797657732","Type":"IssuesEvent","CreatedAt":"2017-11-02T00:10:08","Actor":"shmao","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/1440","RelatedDescription":"Closed issue \"Improve code coverage for data contract serializers\" (#1440) at dotnet/corefx","RelatedBody":"Improve code coverage for DataContractSerializer and DataContractJsonSerializer\n"}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"6798356313","Type":"IssuesEvent","CreatedAt":"2017-11-02T04:59:22","Actor":"jcouv","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/18379","RelatedDescription":"Closed issue \"Unexpected value 'None' of type 'Microsoft.CodeAnalysis.SpecialType'\" (#18379) at dotnet/roslyn","RelatedBody":"**Version Used**: 1.2.0\r\n\r\n**Steps to Reproduce**: Unknown\r\n\r\n**Expected Behavior**: No exception thrown\r\n\r\n**Actual Behavior**:\r\nUnexpected value 'None' of type 'Microsoft.CodeAnalysis.SpecialType'\r\n`System.InvalidOperationException:\r\n   at Microsoft.CodeAnalysis.CSharp.Binder.DoUncheckedConversion (Microsoft.CodeAnalysis.CSharp, Version=1.2.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35)\r\n   at Microsoft.CodeAnalysis.CSharp.Binder.FoldConstantNumericConversion (Microsoft.CodeAnalysis.CSharp, Version=1.2.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35)\r\n   at Microsoft.CodeAnalysis.CSharp.Binder.FoldConstantConversion (Microsoft.CodeAnalysis.CSharp, Version=1.2.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35)\r\n   at Microsoft.CodeAnalysis.CSharp.Binder.CreateConversion (Microsoft.CodeAnalysis.CSharp, Version=1.2.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35)\r\n   at Microsoft.CodeAnalysis.CSharp.Binder.CoerceArguments (Microsoft.CodeAnalysis.CSharp, Version=1.2.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35)\r\n   at Microsoft.CodeAnalysis.CSharp.Binder.BindInvocationExpressionContinued (Microsoft.CodeAnalysis.CSharp, Version=1.2.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35)\r\n   at Microsoft.CodeAnalysis.CSharp.Binder.BindMethodGroupInvocation (Microsoft.CodeAnalysis.CSharp, Version=1.2.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35)\r\n   at Microsoft.CodeAnalysis.CSharp.Binder.BindInvocationExpression (Microsoft.CodeAnalysis.CSharp, Version=1.2.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35)\r\n   at Microsoft.CodeAnalysis.CSharp.Binder.BindInvocationExpression (Microsoft.CodeAnalysis.CSharp, Version=1.2.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35)\r\n   at Microsoft.CodeAnalysis.CSharp.Binder.BindExpressionInternal (Microsoft.CodeAnalysis.CSharp, Version=1.2.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35)\r\n   at Microsoft.CodeAnalysis.CSharp.Binder.BindExpression (Microsoft.CodeAnalysis.CSharp, Version=1.2.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35)\r\n   at Microsoft.CodeAnalysis.CSharp.Binder.BindPossibleArrayInitializer (Microsoft.CodeAnalysis.CSharp, Version=1.2.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35)\r\n   at Microsoft.CodeAnalysis.CSharp.Binder.BindVariableDeclaration (Microsoft.CodeAnalysis.CSharp, Version=1.2.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35)\r\n   at Microsoft.CodeAnalysis.CSharp.Binder.BindDeclarationStatement (Microsoft.CodeAnalysis.CSharp, Version=1.2.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35)\r\n   at Microsoft.CodeAnalysis.CSharp.Binder.BindStatement (Microsoft.CodeAnalysis.CSharp, Version=1.2.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35)\r\n   at Microsoft.CodeAnalysis.CSharp.MemberSemanticModel+IncrementalBinder.BindStatement (Microsoft.CodeAnalysis.CSharp, Version=1.2.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35)\r\n   at Microsoft.CodeAnalysis.CSharp.Binder.BindBlock (Microsoft.CodeAnalysis.CSharp, Version=1.2.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35)\r\n   at Microsoft.CodeAnalysis.CSharp.Binder.BindStatement (Microsoft.CodeAnalysis.CSharp, Version=1.2.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35)\r\n   at Microsoft.CodeAnalysis.CSharp.MemberSemanticModel+IncrementalBinder.BindStatement (Microsoft.CodeAnalysis.CSharp, Version=1.2.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35)\r\n   at Microsoft.CodeAnalysis.CSharp.Binder.BindPossibleEmbeddedStatement (Microsoft.CodeAnalysis.CSharp, Version=1.2.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35)\r\n   at Microsoft.CodeAnalysis.CSharp.Binder.BindIfStatement (Microsoft.CodeAnalysis.CSharp, Version=1.2.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35)\r\n   at Microsoft.CodeAnalysis.CSharp.Binder.BindStatement (Microsoft.CodeAnalysis.CSharp, Version=1.2.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35)\r\n   at Microsoft.CodeAnalysis.CSharp.MemberSemanticModel+IncrementalBinder.BindStatement (Microsoft.CodeAnalysis.CSharp, Version=1.2.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35)\r\n   at Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel.Bind (Microsoft.CodeAnalysis.CSharp, Version=1.2.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35)\r\n   at Microsoft.CodeAnalysis.CSharp.MethodBodySemanticModel.Bind (Microsoft.CodeAnalysis.CSharp, Version=1.2.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35)\r\n   at Microsoft.CodeAnalysis.CSharp.MemberSemanticModel.GetBoundNodes (Microsoft.CodeAnalysis.CSharp, Version=1.2.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35)\r\n   at Microsoft.CodeAnalysis.CSharp.MemberSemanticModel.GetLowerBoundNode (Microsoft.CodeAnalysis.CSharp, Version=1.2.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35)\r\n   at Microsoft.CodeAnalysis.CSharp.MemberSemanticModel.GetBoundNodes (Microsoft.CodeAnalysis.CSharp, Version=1.2.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35)\r\n   at Microsoft.CodeAnalysis.CSharp.MemberSemanticModel.GetSymbolInfoWorker (Microsoft.CodeAnalysis.CSharp, Version=1.2.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35)\r\n   at Microsoft.CodeAnalysis.CSharp.SyntaxTreeSemanticModel.GetSymbolInfoWorker (Microsoft.CodeAnalysis.CSharp, Version=1.2.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35)\r\n   at Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel.GetSymbolInfo (Microsoft.CodeAnalysis.CSharp, Version=1.2.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35)\r\n   at Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel.GetSymbolInfoFromNode (Microsoft.CodeAnalysis.CSharp, Version=1.2.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35)\r\n   at Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel.GetSymbolInfoCore (Microsoft.CodeAnalysis.CSharp, Version=1.2.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35)`\r\n"},{"Id":"6798226077","Type":"PullRequestEvent","CreatedAt":"2017-11-02T03:57:42","Actor":"AlekseyTs","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/22974","RelatedDescription":"Opened pull request \"Properly detect root of a tree in Operation.SearchParentOperation\" (#22974) at dotnet/roslyn","RelatedBody":"Fixes #22964\r\n"},{"Id":"6798070888","Type":"IssuesEvent","CreatedAt":"2017-11-02T02:54:14","Actor":"jcouv","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/22923","RelatedDescription":"Reopened issue \"Two symbols should be equal but they are not\" (#22923) at dotnet/roslyn","RelatedBody":"**Version Used**: VS Community 2017 15.4.1\r\n\r\n**Steps to Reproduce**:\r\n\r\nLet's say I have this code:\r\n```csharp\r\npublic class FooException<T> : Exception\r\n{\r\n    /// <exception cref=\"FooException{T}\"></exception>\r\n    private void Foo()\r\n    {\r\n        throw new FooException<T>();\r\n    }\r\n}\r\n```\r\n\r\nand I want to check symbols for equality:\r\n```csharp\r\nprivate static void Foo()\r\n{\r\n    SyntaxTree tree = CSharpSyntaxTree.ParseText(@\"\r\n        public class FooException<T> : Exception\r\n        {\r\n            /// <exception cref=\"\"FooException{T}\"\"></exception>\r\n            private void Foo()\r\n            {\r\n                throw new FooException<T>();\r\n            }\r\n\r\n        }\");\r\n\r\n    PortableExecutableReference reference = MetadataReference.CreateFromFile(typeof(object).Assembly.Location);\r\n    CSharpCompilation compilation = CSharpCompilation.Create(\"Compilation\", new SyntaxTree[] { tree }, new MetadataReference[] { reference });\r\n    SemanticModel semanticModel = compilation.GetSemanticModel(tree);\r\n    SyntaxNode root = tree.GetRoot();\r\n\r\n    CrefSyntax cref = root.DescendantNodes(descendIntoTrivia: true).OfType<CrefSyntax>().First();\r\n    ObjectCreationExpressionSyntax objectCreation = root.DescendantNodes().OfType<ObjectCreationExpressionSyntax>().First();\r\n\r\n    ITypeSymbol a = semanticModel.GetTypeSymbol(objectCreation);\r\n    ISymbol b = semanticModel.GetSymbol(cref);\r\n\r\n    Debug.WriteLine(a == b);\r\n    Debug.WriteLine(a == b.OriginalDefinition);\r\n    Debug.WriteLine(b == b.OriginalDefinition);\r\n    Debug.WriteLine(b.OriginalDefinition == b.OriginalDefinition.OriginalDefinition);\r\n}\r\n```\r\n\r\n**Output**: \r\n```\r\nFalse\r\nTrue\r\nFalse\r\nTrue\r\n```\r\n\r\n**Questions**:\r\n* Why `a == b` returns False?\r\n* Why `b == b.OriginalDefinition` returns False?\r\n* If this is correct behavior how can I compare these symbols for equality?\r\n"},{"Id":"6797863266","Type":"PullRequestEvent","CreatedAt":"2017-11-02T01:31:25","Actor":"jcouv","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/22973","RelatedDescription":"Opened pull request \"Clarify error for AssemblyVersion with wildcard when deterministic\" (#22973) at dotnet/roslyn","RelatedBody":"Fixes https://github.com/dotnet/roslyn/issues/22660"},{"Id":"6797814539","Type":"PullRequestEvent","CreatedAt":"2017-11-02T01:12:38","Actor":"333fred","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/22972","RelatedDescription":"Opened pull request \"Update static instance handling\" (#22972) at dotnet/roslyn","RelatedBody":"There were a few places in IOperation error cases where we would drop receivers of static calls always, even if it was explicit. This updates our handling of receivers in both languages to only exclude implicit `this` as a receiver, as that is only ever present when the compiler optimistically generates a receiver before determining the symbol is static. I also added tests for these scenarios, as they were missing. This fixes https://github.com/dotnet/roslyn/issues/22585. I will update it to fix https://github.com/dotnet/roslyn/issues/22737 as well, once we discuss the proper handling of that tomorrow."},{"Id":"6797725486","Type":"IssuesEvent","CreatedAt":"2017-11-02T00:36:18","Actor":"jcouv","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/22923","RelatedDescription":"Closed issue \"Two symbols should be equal but they are not\" (#22923) at dotnet/roslyn","RelatedBody":"**Version Used**: VS Community 2017 15.4.1\r\n\r\n**Steps to Reproduce**:\r\n\r\nLet's say I have this code:\r\n```csharp\r\npublic class FooException<T> : Exception\r\n{\r\n    /// <exception cref=\"FooException{T}\"></exception>\r\n    private void Foo()\r\n    {\r\n        throw new FooException<T>();\r\n    }\r\n}\r\n```\r\n\r\nand I want to check symbols for equality:\r\n```csharp\r\nprivate static void Foo()\r\n{\r\n    SyntaxTree tree = CSharpSyntaxTree.ParseText(@\"\r\n        public class FooException<T> : Exception\r\n        {\r\n            /// <exception cref=\"\"FooException{T}\"\"></exception>\r\n            private void Foo()\r\n            {\r\n                throw new FooException<T>();\r\n            }\r\n\r\n        }\");\r\n\r\n    PortableExecutableReference reference = MetadataReference.CreateFromFile(typeof(object).Assembly.Location);\r\n    CSharpCompilation compilation = CSharpCompilation.Create(\"Compilation\", new SyntaxTree[] { tree }, new MetadataReference[] { reference });\r\n    SemanticModel semanticModel = compilation.GetSemanticModel(tree);\r\n    SyntaxNode root = tree.GetRoot();\r\n\r\n    CrefSyntax cref = root.DescendantNodes(descendIntoTrivia: true).OfType<CrefSyntax>().First();\r\n    ObjectCreationExpressionSyntax objectCreation = root.DescendantNodes().OfType<ObjectCreationExpressionSyntax>().First();\r\n\r\n    ITypeSymbol a = semanticModel.GetTypeSymbol(objectCreation);\r\n    ISymbol b = semanticModel.GetSymbol(cref);\r\n\r\n    Debug.WriteLine(a == b);\r\n    Debug.WriteLine(a == b.OriginalDefinition);\r\n    Debug.WriteLine(b == b.OriginalDefinition);\r\n    Debug.WriteLine(b.OriginalDefinition == b.OriginalDefinition.OriginalDefinition);\r\n}\r\n```\r\n\r\n**Output**: \r\n```\r\nFalse\r\nTrue\r\nFalse\r\nTrue\r\n```\r\n\r\n**Questions**:\r\n* Why `a == b` returns False?\r\n* Why `b == b.OriginalDefinition` returns False?\r\n* If this is correct behavior how can I compare these symbols for equality?\r\n"}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"6798117519","Type":"PullRequestEvent","CreatedAt":"2017-11-02T03:12:37","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/4859","RelatedDescription":"Merged pull request \"Merge changes from TFS\" (#4859) at dotnet/corert","RelatedBody":"When merging, this PR, please ensure a merge commit is created as automation requires the merge commit.  Do not 'Squash and merge' or 'Rebase and merge'!"},{"Id":"6797667707","Type":"PullRequestEvent","CreatedAt":"2017-11-02T00:13:50","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/4859","RelatedDescription":"Opened pull request \"Merge changes from TFS\" (#4859) at dotnet/corert","RelatedBody":"When merging, this PR, please ensure a merge commit is created as automation requires the merge commit.  Do not 'Squash and merge' or 'Rebase and merge'!"},{"Id":"6797641213","Type":"PullRequestEvent","CreatedAt":"2017-11-02T00:03:52","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/4858","RelatedDescription":"Merged pull request \"Merge changes from TFS\" (#4858) at dotnet/corert","RelatedBody":"When merging, this PR, please ensure a merge commit is created as automation requires the merge commit.  Do not 'Squash and merge' or 'Rebase and merge'!"},{"Id":"6797386585","Type":"PullRequestEvent","CreatedAt":"2017-11-01T22:39:05","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/4858","RelatedDescription":"Opened pull request \"Merge changes from TFS\" (#4858) at dotnet/corert","RelatedBody":"When merging, this PR, please ensure a merge commit is created as automation requires the merge commit.  Do not 'Squash and merge' or 'Rebase and merge'!"},{"Id":"6796867577","Type":"PullRequestEvent","CreatedAt":"2017-11-01T20:33:09","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/4857","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#4857) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"6795916017","Type":"PullRequestEvent","CreatedAt":"2017-11-01T17:14:25","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/4854","RelatedDescription":"Merged pull request \"Merge changes from TFS\" (#4854) at dotnet/corert","RelatedBody":"When merging, this PR, please ensure a merge commit is created as automation requires the merge commit.  Do not 'Squash and merge' or 'Rebase and merge'!"},{"Id":"6795760521","Type":"IssuesEvent","CreatedAt":"2017-11-01T16:43:50","Actor":"alpencolt","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/issues/4856","RelatedDescription":"Opened issue \"[armel] CoreRT Linux/armel progress\" (#4856) at dotnet/corert","RelatedBody":"\r\nThis task is for reporting progress of CoreRT `Linux/armel` support.\r\nPeople are working on it @Dmitri-Botcharnikov @sergign60 @alpencolt @BredPet \r\n\r\n## Applications\r\nOn the latest master we are able to compile and execute Binary-trees, Spectral-norm, Mandelbrot and Fannkuch-redux(without threading version) benchmarks from CoreCLR. ElmSharp Hello Tizen application as well. All apps launched on Samsung Z3 phone\r\n\r\n## armel cross build on x86 host\r\nIt's possible to cross compile application for `armel` on x86  host (or on x64 using rootfs) now.\r\nCompilation time for HelloWorld application is reduced from **25** minutes (on Samsung Z3) to **3** minutes on PC. So for compiling all BringUpTests from CoreCLR it's needed about 6 hours (or about 3 days on mobile phone:scream:).\r\nDocumentation will be added soon.\r\n\r\n## BringUpTests from CoreCLR\r\n**1 Failed on compilation\r\n11 FAIL\r\n146 SUCCESS**\r\n\r\n1. Failed on compilation on CoreRT:\r\n```\r\nRecursiveTailCall.exe\r\nProcess is terminating due to StackOverflowException.\r\n```\r\n2. Assertion:\r\n```\r\nLocallocLarge.exe: corert/src/Native/Runtime/unix/UnixContext.cpp:538: bool FindProcInfo(UIntNative, UIntNative *, UIntNative *): Assertion `(procInfo.start_ip <= controlPC) && (controlPC < procInfo.end_ip)' failed.\r\nFAIL LocallocLarge.exe\r\n```\r\n3. Bus error:\r\n```\r\nArrayExc.exe\r\nDivConst.exe\r\nLocalloc.exe\r\nModConst.exe\r\nUDivConst.exe\r\nUModConst.exe\r\ndiv2.exet\r\n```\r\n4. Segmentation fault:\r\n```\r\nDblRoots.exe\r\nGcd.exe\r\nSwap.exe\r\n```\r\n\r\n## Bug fixing\r\nThere are a lot of remaining task and bugs. They will refer to current task as far as possible.\r\n\r\n\r\ncc @jkotas @MichalStrehovsky "},{"Id":"6795462956","Type":"PullRequestEvent","CreatedAt":"2017-11-01T15:47:02","Actor":"stephentoub","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/4855","RelatedDescription":"Opened pull request \"Port non-shared readonly changes from coreclr\" (#4855) at dotnet/corert","RelatedBody":"https://github.com/dotnet/coreclr/pull/14789\r\ncc: @jkotas "},{"Id":"6793027375","Type":"PullRequestEvent","CreatedAt":"2017-11-01T04:37:55","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/4854","RelatedDescription":"Opened pull request \"Merge changes from TFS\" (#4854) at dotnet/corert","RelatedBody":"When merging, this PR, please ensure a merge commit is created as automation requires the merge commit.  Do not 'Squash and merge' or 'Rebase and merge'!"},{"Id":"6792487578","Type":"PullRequestEvent","CreatedAt":"2017-11-01T00:41:15","Actor":"morganbr","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/4808","RelatedDescription":"Merged pull request \"implemented newobj for WASM using malloc\" (#4808) at dotnet/corert","RelatedBody":"@morganbr \r\nAlso added evaluation stack spillage and cut down on unneeded llvm casts. \r\nThe relationship between ILImporter and StackEntry doesn't feel 100% to me. Do you see a better way to do this without mixing functionality between ILImporter and StackEntry?\r\nSpillage, I'm not reusing slots at all here do I need to?\r\n\r\n"},{"Id":"6792144912","Type":"PullRequestEvent","CreatedAt":"2017-10-31T22:31:18","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/4853","RelatedDescription":"Merged pull request \"Merge master to nmirror\" (#4853) at dotnet/corert","RelatedBody":""},{"Id":"6792144399","Type":"PullRequestEvent","CreatedAt":"2017-10-31T22:31:08","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/4853","RelatedDescription":"Opened pull request \"Merge master to nmirror\" (#4853) at dotnet/corert","RelatedBody":""}],"ResultType":"GitHubEvent"},"SDK":{"Events":[{"Id":"6797115451","Type":"IssuesEvent","CreatedAt":"2017-11-01T21:28:19","Actor":"livarcocc","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/issues/1697","RelatedDescription":"Closed issue \"How to config *.runtimeconfig.json file, to let the .net standard program work fine with multiple versions SDKs.\" (#1697) at dotnet/sdk","RelatedBody":"I build a .net standard runnable program. The generated *.runtimeconfig.json file looks like follows:{\r\n    \"runtimeOptions\": {\r\n      \"framework\": {\r\n        \"name\": \"Microsoft.NETCore.App\",\r\n        \"version\": \"1.0.4\"\r\n      }\r\n    }\r\n  }\r\nIt works fine with runtime 1.0.4. However, it couldn't work with runtime 2.0.0. If I modify above version \"1.0.4\" to \"2.0.0\", the issue is solved.\r\n\r\nThe question is how to config the file *.runtimeconfig.json, to let it work fine with any SDK version."},{"Id":"6796598527","Type":"PullRequestEvent","CreatedAt":"2017-11-01T19:34:14","Actor":"tmat","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/1706","RelatedDescription":"Merged pull request \"Merge release/15.5 to master\" (#1706) at dotnet/sdk","RelatedBody":"\nThis is an automatically generated pull request from release/15.5 into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/15.5-to-master-20171101-070039\ngit reset --hard upstream/master\ngit merge upstream/release/15.5\n# Fix merge conflicts\ngit commit\ngit push merges/release/15.5-to-master-20171101-070039 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"6795865942","Type":"PullRequestEvent","CreatedAt":"2017-11-01T17:04:20","Actor":"nguerrera","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/pull/1704","RelatedDescription":"Closed pull request \"Merge release/15.5 to master\" (#1704) at dotnet/sdk","RelatedBody":"\nThis is an automatically generated pull request from release/15.5 into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/15.5-to-master-20171031-070036\ngit reset --hard upstream/master\ngit merge upstream/release/15.5\n# Fix merge conflicts\ngit commit\ngit push merges/release/15.5-to-master-20171031-070036 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"6795244534","Type":"IssuesEvent","CreatedAt":"2017-11-01T15:06:45","Actor":"ridomin","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/issues/1708","RelatedDescription":"Opened issue \"Sources under a folder named \"Packages\"  are ignored on build\" (#1708) at dotnet/sdk","RelatedBody":".NET Command Line Tools (15.5.0-preview-007044)\r\n\r\nAll source files and folders are included in the build, however, a folder named \"Packages\" is excluded. I've verified this behavior in CLI and VS 15.5 Preview.\r\n\r\nLooks like a regression from previous versions (checked in 15.4).\r\n\r\nRepro Steps.\r\n```\r\ndotnet new classlib\r\nmkdir Packages\r\necho 'bad c# file' > Packages/Class1.cs\r\ndotnet build\r\n```\r\n\r\nExpected. Build failed because Class1.cs is not a valid C# file\r\nObserved. Build succeed because Packages/Class1 is excluded from the build\r\n"},{"Id":"6793797902","Type":"IssuesEvent","CreatedAt":"2017-11-01T09:20:33","Actor":"qqbuby","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/issues/1707","RelatedDescription":"Opened issue \"error MSB3021: Unable to copy file\" (#1707) at dotnet/sdk","RelatedBody":"```\r\n/usr/share/dotnet/sdk/2.0.2/Sdks/Microsoft.NET.Sdk/build/Microsoft.NET.Publish.targets(109,5): error MSB3021: Unable to copy file . . .\r\n. . . . Could not find a part of the path  .  . .\r\n```\r\n```sh\r\n# dotnet --info\r\n.NET Command Line Tools (2.0.2)\r\n\r\nProduct Information:\r\n Version:            2.0.2\r\n Commit SHA-1 hash:  a04b4bf512\r\n\r\nRuntime Environment:\r\n OS Name:     debian\r\n OS Version:  9\r\n OS Platform: Linux\r\n RID:         linux-x64\r\n Base Path:   /usr/share/dotnet/sdk/2.0.2/\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.0\r\n  Build    : e8b8861ac7faf042c87a5c2f9f2d04c98b69f28d\r\n\r\n```\r\n"},{"Id":"6793353625","Type":"PullRequestEvent","CreatedAt":"2017-11-01T07:00:41","Actor":"dotnet-bot","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/1706","RelatedDescription":"Opened pull request \"Merge release/15.5 to master\" (#1706) at dotnet/sdk","RelatedBody":"\nThis is an automatically generated pull request from release/15.5 into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/15.5-to-master-20171101-070039\ngit reset --hard upstream/master\ngit merge upstream/release/15.5\n# Fix merge conflicts\ngit commit\ngit push merges/release/15.5-to-master-20171101-070039 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"925135073921310720","CreatedAt":"2017-10-30T22:59:24+00:00","UserScreenname":"dotnet","Text":"Experience real time test discovery in Test Explorer https://t.co/niKJvslM5p #visualstudio","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":59,"FavoriteCount":38,"RawContent":null},{"Id":"923592986562142208","CreatedAt":"2017-10-26T16:51:42+00:00","UserScreenname":"dotnet","Text":"Wish you could run the code sample you read in a book? You can now with Azure Notebooks. https://t.co/evx8HPzzqe","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":129,"FavoriteCount":78,"RawContent":null},{"Id":"923344981602942977","CreatedAt":"2017-10-26T00:26:13+00:00","UserScreenname":"dotnet","Text":"microsoft/dotnet-framework images now support Windows Server 1709 https://t.co/enC2cjj2ds /cc @Docker","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":42,"FavoriteCount":22,"RawContent":null},{"Id":"923037554265296896","CreatedAt":"2017-10-25T04:04:36+00:00","UserScreenname":"dotnet","Text":"microsoft/dotnet-framework latest tag updated to 4.7.1 https://t.co/NuV11juPrm /cc @Docker","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":42,"FavoriteCount":23,"RawContent":null},{"Id":"922503653402882049","CreatedAt":"2017-10-23T16:43:04+00:00","UserScreenname":"dotnet","Text":".NET Core Performance Profiling with Intel® VTune™ Amplifier 2018  https://t.co/TPKfGvwNLH /cc @intel","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":96,"FavoriteCount":56,"RawContent":null},{"Id":"921143443912474624","CreatedAt":"2017-10-19T22:38:05+00:00","UserScreenname":"dotnet","Text":"New .NET Rocks podcast with @coolcsh on understanding #dotnet standard &amp; future of #dotnetcore… https://t.co/b8BCeZKEqz","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":42,"FavoriteCount":20,"RawContent":null},{"Id":"920400974321147904","CreatedAt":"2017-10-17T21:27:47+00:00","UserScreenname":"dotnet","Text":"Announcing the .NET Framework 4.7.1 https://t.co/Vu3bilF8bZ","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":387,"FavoriteCount":347,"RawContent":null},{"Id":"920393493557555205","CreatedAt":"2017-10-17T20:58:03+00:00","UserScreenname":"dotnet","Text":".NET Framework October 2017 Preview of Quality Rollup https://t.co/oVqxMXye74","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":16,"FavoriteCount":16,"RawContent":null}]}},"RunOn":"2017-11-02T05:30:23.1163843Z","RunDurationInMilliseconds":7901}