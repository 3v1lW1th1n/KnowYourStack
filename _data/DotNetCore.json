{"Data":{"Blog":{"FeedItems":[{"Title":".NET Framework 4.7.1 Runtime and Compiler Features","PublishedOn":"2017-09-28T00:00:00","CommentsCount":0,"FacebookCount":0,"Summary":"This post describes the new Runtime, Compiler and Base Class Library (BCL) improvements in the .NET Framework 4.7.1. You can try out these features by downloading the Developer Pack, described in the Welcome to the .NET Framework 4.7.1 Early Access blog post.  BCL &#8211; .NET Standard 2.0 Support .NET Framework 4.7.1 has built-in support for .NET Standard 2.0. .NET Framework 4.7.1... <a aria-label=\"read more about .NET Framework 4.7.1 Runtime and Compiler Features\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/09/28/net-framework-4-7-1-runtime-and-compiler-features/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/09/28/net-framework-4-7-1-runtime-and-compiler-features/","RawContent":null},{"Title":"Build a web service with F# and .NET Core 2.0","PublishedOn":"2017-09-26T00:00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Earlier this year, I wrote about an update to the roadmap for F# and .NET Core. I had mentioned that there were a number of things you could build with F# and .NET Core today, such as web services. In this post, I&#8217;ll walk through building a web service with F# and .NET Core 2.0... <a aria-label=\"read more about Build a web service with F# and .NET Core 2.0\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/09/26/build-a-web-service-with-f-and-net-core-2-0/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/09/26/build-a-web-service-with-f-and-net-core-2-0/","RawContent":null},{"Title":".NET Framework September 2017 Preview of Quality Rollup","PublishedOn":"2017-09-25T00:00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Today, we are releasing the September 2017 Preview of Quality Rollup. This type of rollup is intended for businesses that want to the preview or use quality improvements as soon as they are available. This update applies to Windows 10 Update 1607 (Anniversary Update) and to Windows Server 2016. FYI: The KBs for Windows Server 2016... <a aria-label=\"read more about .NET Framework September 2017 Preview of Quality Rollup\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/09/25/net-framework-september-2017-preview-of-quality-rollup/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/09/25/net-framework-september-2017-preview-of-quality-rollup/","RawContent":null},{"Title":".NET Core September 2017 Update — macOS High Sierra Support","PublishedOn":"2017-09-22T00:00:00","CommentsCount":4,"FacebookCount":0,"Summary":"We released .NET Core updates for macOS High Sierra Support and additional quality fixes. You can download and install the update for Windows, macOS and Linux. This update is for .NET Core 1.0 and 1.1. The initial .NET Core 2.0 release includes similar improvements, so is not being updated with this release. Downloads .NET Core 1.0.7 .NET... <a aria-label=\"read more about .NET Core September 2017 Update &#8212; macOS High Sierra Support\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/09/22/net-core-september-2017-update-macos-high-sierra-support/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/09/22/net-core-september-2017-update-macos-high-sierra-support/","RawContent":null},{"Title":".NET Framework 4.7.1 Accessibility and WPF Improvements","PublishedOn":"2017-09-21T00:00:00","CommentsCount":16,"FacebookCount":0,"Summary":"This post describes the new WPF and accessibility features and improvements in .NET Framework 4.7.1. You can try out these features by downloading the Developer Pack, described in the Welcome to the .NET Framework 4.7.1 Early Access blog post. Accessibility improvements .NET Framework 4.7.1 brings in a lot of accessibility improvements across different libraries to align with the... <a aria-label=\"read more about .NET Framework 4.7.1 Accessibility and WPF Improvements\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/09/21/net-framework-4-7-1-accessibility-and-wpf-improvements/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/09/21/net-framework-4-7-1-accessibility-and-wpf-improvements/","RawContent":null},{"Title":"Watch .NET Conf 2017!","PublishedOn":"2017-09-19T00:00:00","CommentsCount":12,"FacebookCount":0,"Summary":".NET Conf starts today. It&#8217;s a three-day, free, virtual and global .NET conference. All you need to do is point your web browser to channel9.msdn.com, starting at 8AM Pacific Time. We have a packed agenda with a great set of expert .NET developers. What will you learn? Many things. You will learn to build for... <a aria-label=\"read more about Watch .NET Conf 2017!\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/09/19/watch-net-conf-2017/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/09/19/watch-net-conf-2017/","RawContent":null},{"Title":".NET Framework 4.7.1 ASP.NET and Configuration features","PublishedOn":"2017-09-14T00:00:00","CommentsCount":24,"FacebookCount":0,"Summary":"This post describes the new ASP.NET, Configuration and System.Messaging features and improvements in the .NET Framework 4.7.1. More information on the build these features are available in and how to get the Developer Pack is covered in the Welcome to the .NET Framework 4.7.1 Early Access blog post. Configuration builders Configuration builders allow developers to inject and build... <a aria-label=\"read more about .NET Framework 4.7.1 ASP.NET and Configuration features\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/09/13/net-framework-4-7-1-asp-net-and-configuration-features/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/09/13/net-framework-4-7-1-asp-net-and-configuration-features/","RawContent":null},{"Title":".NET Framework September 2017 Security and Quality Rollup","PublishedOn":"2017-09-13T00:00:00","CommentsCount":21,"FacebookCount":0,"Summary":"Last Updated: 2017.09.21. Today, we are releasing the September 2017 Security and Quality Rollup and Security Only Update. This update applies to Windows 7 and later client versions and Windows Server 2008 and later server versions. This update has known issues. Please see them at the bottom of the update. Security This release contains the... <a aria-label=\"read more about .NET Framework September 2017 Security and Quality Rollup\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/09/12/net-framework-september-2017-security-and-quality-rollup/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/09/12/net-framework-september-2017-security-and-quality-rollup/","RawContent":null},{"Title":"The week in .NET – Let’s Encrypt Web App Renewer, Seattle CodeCamp 2017","PublishedOn":"2017-08-29T00:00:00","CommentsCount":15,"FacebookCount":0,"Summary":"Previous posts: Project File Tools, Maira Wenzel, Mixed Reality in Miami .NET Core 2.0, ASP.NET Core 2.0, Entity Framework 2.0, Visual Studio 2017 Update 3, enterprise Entity Framework Core in Boston Rezoom.SQL, Protobuf in Orlando Open-source project of the week: Let&#8217;s Encrypt Azure Web App Renewer There&#8217;s a growing consensus that all web sites should... <a aria-label=\"read more about The week in .NET &#8211; Let&#8217;s Encrypt Web App Renewer, Seattle CodeCamp 2017\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/08/29/the-week-in-net/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/08/29/the-week-in-net/","RawContent":null},{"Title":"UWP & .NET Standard 2.0: A preview is now available!","PublishedOn":"2017-08-25T00:00:00","CommentsCount":50,"FacebookCount":0,"Summary":"Today, we released the first Preview of Visual Studio 2017 version 15.4. This includes an update to the UWP tooling that supports .NET Standard 2.0. In this post, I&#8217;ll outline what this means for UWP development with .NET. Prerequisites In order to use .NET Standard 2.0 in UWP, you need to target Fall Creators Update (FCU)... <a aria-label=\"read more about UWP &#38; .NET Standard 2.0: A preview is now available!\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/08/25/uwp-net-standard-2-0-preview/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/08/25/uwp-net-standard-2-0-preview/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"6650451504","Type":"IssuesEvent","CreatedAt":"2017-09-28T16:22:10","Actor":"hughbe","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/issues/87","RelatedDescription":"Opened issue \"PRs to repos outside of dotnet/* pattern should not always thank for signing the CLA\" (#87) at dotnet/home","RelatedBody":"For example: https://github.com/mono/libgdiplus/pull/109\r\n\r\nI have already signed the CLI. On the dotnet/corefx etc. projects, I don't get the extra message:\r\n\r\n```\r\n@hughbe,\r\nThanks for having already signed the Contribution License Agreement. Your agreement was validated by .NET Foundation. We will now review your pull request.\r\nThanks,\r\n.NET Foundation Pull Request Bot\r\n```\r\n\r\nJust a small gripe, as I get an email each time I do this. I've seen this in Mono and Xunit.\r\n\r\n/cc @karelz I know this is unrelated to corefx but maybe you know the right person/repo to route this to :D\r\n"},{"Id":"6515896963","Type":"PullRequestEvent","CreatedAt":"2017-08-26T22:20:18","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/85","RelatedDescription":"Merged pull request \"Create telerik-ui-for-uwp.md\" (#85) at dotnet/home","RelatedBody":"Submission of Telerik UI for UWP"},{"Id":"6515896506","Type":"PullRequestEvent","CreatedAt":"2017-08-26T22:19:49","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/86","RelatedDescription":"Merged pull request \"Corrected list of maintainers\" (#86) at dotnet/home","RelatedBody":""},{"Id":"6483200432","Type":"PullRequestEvent","CreatedAt":"2017-08-18T19:58:41","Actor":"gep13","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/86","RelatedDescription":"Opened pull request \"Corrected list of maintainers\" (#86) at dotnet/home","RelatedBody":""},{"Id":"6470589367","Type":"PullRequestEvent","CreatedAt":"2017-08-17T09:24:13","Actor":"stefanov-stefan","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/85","RelatedDescription":"Opened pull request \"Create telerik-ui-for-uwp.md\" (#85) at dotnet/home","RelatedBody":"Submission of Telerik UI for UWP"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"6645912196","Type":"IssuesEvent","CreatedAt":"2017-09-27T19:47:08","Actor":"terrajobst","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/32","RelatedDescription":"Opened issue \".NET Framework 4.7.1 provides built-in support for .NET Standard 2.0\" (#32) at dotnet/announcements","RelatedBody":"## Summary\r\n\r\n.NET Framework 4.7.1 will have built-in support for .NET Standard 2.0. This means that you don't have to deploy any additional files or use binding redirects to use .NET Standard 2.0 libraries.\r\n\r\nFor a demo, check out [this video][video].\r\n\r\n## Details\r\n\r\nWhile libraries targeting [.NET Standard 2.0][ns20post] are can be consumed by applications and libraries [targeting .NET Framework 4.6.1][nstable] and higher, not all files that are required for .NET Standard libraries were part of .NET Framework 4.6.1. In fact, .NET Framework 4.6.1 was shipped before .NET Standard 2.0 was even designed. That's why building an application targeting .NET Framework 4.6.1 (as well as 4.6.2 and 4.7) will have to deploy additional files.\r\n\r\n* If you use **Visual Studio 2017 15.3** or higher, these files are automatically copied to the application's output folder.\r\n\r\n* If you use **Visual Studio 2015 and [use NuGet 3.6][nuget36]**, we'll prompt you to install a [support package][vs2015support] which will handle copying the files to the output directory.\r\n\r\nStarting with .NET Framework 4.7.1 these files no longer have to be deployed with the application -- they are built right into the .NET Framework itself.\r\n\r\n.NET Framework 4.7.1 also adds[about 200 missing APIs][missingapis] that were part of .NET Standard 2.0 but not actually implemented by .NET Framework 4.6.1, 4.6.2 or 4.7.\r\n\r\nThis also removes the need for [binding redirects][netfx-issues] when using .NET Standard libraries on .NET Framework because the CLR automatically unifies version numbers of assemblies that are part of the platform.\r\n\r\nLearn more [by reading the .NET Standard FAQ](http://aka.ms/netstandardfaq).\r\n\r\n## Discussion\r\n\r\nDiscussion\r\n\r\nFor a discussion, please go to dotnet/standard#514.\r\n\r\n[ns20post]: https://blogs.msdn.microsoft.com/dotnet/2017/08/14/announcing-net-standard-2-0/\r\n[nstable]: https://docs.microsoft.com/en-us/dotnet/standard/net-standard\r\n[nuget36]: https://dist.nuget.org/visualstudio-2015-vsix/v3.6.0/NuGet.Tools.vsix\r\n[vs2015support]: https://aka.ms/netstandard-build-support-netfx\r\n[missingapis]: https://github.com/dotnet/standard/blob/master/netstandard/src/ApiCompatBaseline.net461.txt\r\n[netfx-issues]: https://github.com/dotnet/standard/issues/481\r\n[video]: https://www.youtube.com/watch?v=u67Eu_IgEMs\r\n\r\nhttps://github.com/dotnet/standard/issues/514"},{"Id":"6541935607","Type":"IssuesEvent","CreatedAt":"2017-09-01T22:57:04","Actor":"terrajobst","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/31","RelatedDescription":"Opened issue \"Issues with .NET Standard 2.0 with .NET Framework & NuGet\" (#31) at dotnet/announcements","RelatedBody":"## Summary\r\n\r\nWe've designed .NET Standard & our tooling so that projects targeting .NET Framework 4.6.1 can consume NuGet packages & projects targeting .NET Standard 2.0 or earlier. Unfortunately, we've seen a few issues around that scenario. The purpose of this document is to summarize the issues, outline our plan on addressing them, and providing workarounds you can deploy with today's state of our tooling.\r\n\r\n## Symptoms and root cause\r\n\r\nThe [primary symptom](https:/github.com/dotnet/standard/issues/410) is that applications crash with a `FileLoadException` or a `FileNotFoundException`. Another symptom is warnings at build time regarding assembly versions. This is due to one or both of the following issues:\r\n\r\n1. Missing binding redirects\r\n2. Missing binaries that come from indirect NuGet packages\r\n\r\n### Missing binding redirects\r\n\r\n.NET Standard 1.x was based around contracts. Many of these contracts shipped with .NET Framework 4.5 and later. However, different versions of .NET Framework picked up different versions of these contracts, as by-design of contract versioning. As a side effect of marking .NET Framework 4.6.1 as implementing .NET Standard 2.0, some projects will now start picking up binaries built for .NET Standard 1.5 and 1.6 (as opposed to previously where .NET Framework 4.6.1 was considered as implementing .NET Standard 1.4). This results in mismatches of the assembly versions between what was shipped in .NET Framework and what was part of .NET Standard 1.5/1.6.\r\n\r\nThis can be addressed by binding redirects. As writing them by hand sucks, we added an [Automatic Binding Redirect Generation][abrg] feature in .NET Framework 4.5.1. This feature is opt-in. Unfortunately, it's not enabled based on target framework, but by which target framework was selected when the project was created (as the feature is turned on via an MSBuild property that is conditionally emitted by the template). In practice, this means it's mostly off you often upgrade existing projects, rather than creating new ones.\r\n\r\n[abrg]: https://docs.microsoft.com/en-us/dotnet/framework/configure-apps/how-to-enable-and-disable-automatic-binding-redirection\r\n\r\n### Missing binaries\r\n\r\nThere are two primary flavors of NuGet: `packages.config` and `PackageReference`.\r\n\r\n* With `packages.config`, each project has a config file with a flattened graph of all the NuGet dependencies. The project file in turn has direct links to all the assets. The assets are selected at install time. None of this includes indirect NuGet references coming from referenced projects.\r\n\r\n* With `PackageReference` each project contains MSBuild `PackageReference` items. The project file contains no references to any assets as the assets are selected at build time. Package restore will compute the graph of all packages, including indirect NuGet references coming from referenced projects.\r\n\r\nThe default for .NET Framework projects is `packages.config`. This ensures more compatibility because `PackageReference` doesn't support all the features that `packages.config` did, for example, PowerShell install scripts and content.\r\n\r\nThe only supported mode for SDK-style projects (.NET Core/.NET Standard) is `PackageReference`. This means that a .NET Framework project referencing a .NET Standard project ends up crossing the streams between two different NuGet models. When the .NET Standard project references NuGet packages that the .NET Framework project doesn't reference, the application ends up missing all binaries coming from those packages.\r\n\r\nWhy has this worked before? Because with` packages.config`, all dependencies are copied to each project's output folder. MSBuild copies them up from there. With `PackageReference`, we don't copy the binaries because it relies on the consuming project to see its dependencies and extract the proper asset itself. This allows the consuming project to pick up the right assets for packages that use bait & switch (which many of the .NET packages must do).\r\n\r\n### Plan\r\n\r\nThe plan is to address these issues moving forward as follows:\r\n\r\n1. **Converge on `PackageReference` for all project types**, including .NET Framework. The short-term plan for (1) is to start blocking project-to-project references in Visual Studio 15.4 that will end up crossing the streams between `packages.config` and `PackageReference`. This block is UI only; you can still edit the reference by editing the project by hand. The error message will instruct you to switch the .NET Framework project to `PackageReference` if you want to reference a .NET Standard project. Referencing .NET Standard binaries or NuGet packages will not require this, it's only about project-to-project references. In later releases, we plan on providing a converter. The challenge is that `packages.config` has features we can't offer for `PackagReference` across the board, in particular PowerShell install scripts and content. We'll need good guidance and mitigations, if applicable.\r\n\r\n2. **Ensure binding redirects are on by default**. Short term, this means we need to fix our target files to make sure we turn on automatic binding redirect generation. However, binding redirects don't work well in all scenarios, when there is no application project (like unit tests or add-ins). We need to work on a plan to bring the regular “higher wins” binding policy without binding redirects. This needs a proposal and proper vetting, but it seems we've reached the point where this is necessary.\r\n\r\n## Workarounds\r\n\r\n### Regular .NET Framework projects\r\n\r\n1. Enable [automatic binding redirects][abrg] in the root .NET Framework application.\r\n2. Make sure your root application project doesn't use `packages.config` but uses `PackageReference` for NuGet packages\r\n    * If you currently don't have `packages.config`, simply add `<RestoreProjectStyle>PackageReference</RestoreProjectStyle>` to your project file\r\n    * If you currently do have a `packages.config`, convert the contents to packages references in the project file. The syntax is like this:\r\n        - `<PackageReference Include=\"package-id\" Version=\"package-version\" />`\r\n\r\n### ASP.NET web applications and web sites\r\n\r\n1. Web applications and web sites don't support automatic binding redirect generation. In order to resolve binding conflicts, you need to double click the warning in the error list and Visual Studio will add them to your `web.config` file.\r\n2. In web application projects, you should enable `PackageReference` like mentioned above. In web sites, you cannot use `PackageReference` as there is no project file. In that case, you need to install all NuGet packages into your web site that any of the direct or indirect project references depend on.\r\n\r\n## Discussion\r\n\r\nFor a discussion, please go to [https://github.com/dotnet/standard/issues/481]"}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"6652658766","Type":"PullRequestEvent","CreatedAt":"2017-09-29T03:05:37","Actor":"ahsonkhan","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/14248","RelatedDescription":"Merged pull request \"Fixing Retain to return MemoryHandle with correct PinnedPointer\" (#14248) at dotnet/coreclr","RelatedBody":"Fixes https://github.com/dotnet/corefx/issues/24317\r\n\r\n- AddOffset throws if PinnedPointer is null. Should it fail silently and do nothing?\r\n- Would it be better to create a setter for PinnedPointer instead of the AddOffset API?\r\n\r\nRelated PR: https://github.com/dotnet/corefx/pull/24323\r\n\r\ncc @pakrym, @KrzysztofCwalina, @stephentoub, @davidfowl, @jkotas "},{"Id":"6652582056","Type":"IssuesEvent","CreatedAt":"2017-09-29T02:30:55","Actor":"rartemev","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/13420","RelatedDescription":"Closed issue \"JIT: getKillSetForNode has side effects leading to CHK/REL codegen diffs\" (#13420) at dotnet/coreclr","RelatedBody":"Example program:\r\n```C#\r\nusing System;\r\nusing System.Runtime.CompilerServices;\r\n\r\nclass M\r\n{\r\n    int x;\r\n\r\n    M(int z) { x = z; }\r\n\r\n    [MethodImpl(MethodImplOptions.NoInlining)]\r\n    public static int Mod(M m1, M m2)\r\n    {\r\n        return m1.x % m2.x;\r\n    }\r\n\r\n    public static int Main()\r\n    {\r\n        M m1 = new M(201);\r\n        M m2 = new M(101);\r\n        return Mod(m1, m2);\r\n    }\r\n}\r\n```\r\nThe early kill of RDX by the `cdq; imul` used for the modulo operation is added twice in CHK but only once in REL. The extra call is under DEBUG in `buildRefPositionsForNode`. This leads to codegen differences:\r\n```\r\n;;; CHK\r\nG_M6135_IG01:\r\n       4889542410           mov      gword ptr [rsp+10H], rdx\r\n\r\nG_M6135_IG02:\r\n       8B4108               mov      eax, dword ptr [rcx+8]\r\n       488B4C2410           mov      rcx, gword ptr [rsp+10H]\r\n       99                   cdq\r\n       F77908               idiv     edx:eax, dword ptr [rcx+8]\r\n       8BC2                 mov      eax, edx\r\n\r\nG_M6135_IG03:\r\n       C3                   ret\r\n\r\n;;; REL\r\n00007FF982A504E0  mov         eax,dword ptr [rcx+8]  \r\n00007FF982A504E3  mov         rcx,rdx  \r\n00007FF982A504E6  cdq  \r\n00007FF982A504E7  idiv        eax,dword ptr [rcx+8]  \r\n00007FF982A504EA  mov         eax,edx  \r\n00007FF982A504EC  ret  \r\n```\r\n\r\n@CarolEidt PTAL\r\ncc @dotnet/jit-contrib "},{"Id":"6652581487","Type":"PullRequestEvent","CreatedAt":"2017-09-29T02:30:38","Actor":"rartemev","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/14247","RelatedDescription":"Merged pull request \"Fixed difference between produced code in CHK and REL modes\" (#14247) at dotnet/coreclr","RelatedBody":"Fixed issue #13420 \r\nAccording to author's (@sivarv) words it should be executed in stress mode."},{"Id":"6652445143","Type":"IssuesEvent","CreatedAt":"2017-09-29T01:30:17","Actor":"dotnet-mc-bot","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/14249","RelatedDescription":"Opened issue \"Test failure: baseservices_threading._waithandle_waitany_waitanyex4_waitanyex4_/_waithandle_waitany_waitanyex4_waitanyex4_cmd\" (#14249) at dotnet/coreclr","RelatedBody":"Opened on behalf of @Jiayili1\n\nThe test `baseservices_threading._waithandle_waitany_waitanyex4_waitanyex4_/_waithandle_waitany_waitanyex4_waitanyex4_cmd` has failed.\n\n\n    \n    Return code:      1\n    Raw output file:      C:\\dotnetbuild\\work\\e37d73b6-8a44-4960-b23f-5648adc3f9ae\\Work\\035b5af9-bc9a-46aa-aff8-0912fb8bfe9b\\Unzip\\Reports\\baseservices.threading\\waithandle\\waitany\\waitanyex4\\waitanyex4.output.txt\n    Raw output:\n    BEGIN EXECUTION\\r\n            1 file(s) copied.\\r\n    \" C:\\dotnetbuild\\work\\e37d73b6-8a44-4960-b23f-5648adc3f9ae\\Payload\\crossgen.exe\" /Platform_Assemblies_Paths C:\\dotnetbuild\\work\\e37d73b6-8a44-4960-b23f-5648adc3f9ae\\Payload;C:\\dotnetbuild\\work\\e37d73b6-8a44-4960-b23f-5648adc3f9ae\\Work\\035b5af9-bc9a-46aa-aff8-0912fb8bfe9b\\Unzip\\waithandle\\waitany\\waitanyex4\\IL;C:\\dotnetbuild\\work\\e37d73b6-8a44-4960-b23f-5648adc3f9ae\\Work\\035b5af9-bc9a-46aa-aff8-0912fb8bfe9b\\Unzip\\waithandle\\waitany\\waitanyex4 /in waitanyex4.org /out waitanyex4.exe\\r\n    Microsoft (R) CoreCLR Native Image Generator - Version 4.5.22220.0\\r\n    Copyright (c) Microsoft Corporation.  All rights reserved.\\r\n    \\r\n    Native image waitanyex4.exe generated successfully.\\r\n     \"C:\\dotnetbuild\\work\\e37d73b6-8a44-4960-b23f-5648adc3f9ae\\Payload\\corerun.exe\" waitanyex4.exe \\r\n    Abandoning only one Mutex in array with other WaitHandles\\r\n    Name created: fa44179b-3ec4-4a6d-92a3-eba8192de37a\\r\n    Name created: c67e1458-9931-4bdd-ae68-6ab9bcabdf19\\r\n    Name created: c81acf35-de2b-4fbe-85ec-1bf718c0f8d3\\r\n    Name created: ccdde6b1-ced0-4467-a8ab-baaa1690f219\\r\n    Name created: 3b38b8f2-0ed4-4d14-a6c4-d96965aa18f9\\r\n    Name created: 9e7161d2-cc86-4f7d-b384-8eaa48742921\\r\n    Name created: 9b69b284-14e7-4d77-aa43-5458d524130e\\r\n    Name created: 5151d32a-2e99-4c51-9715-92b60a0eda8d\\r\n    Name created: 8fdeb59d-20ad-4a64-b81b-4b13b14e3819\\r\n    Name created: 39f5f7e2-4d58-4ebf-8715-8135231635ec\\r\n    Name created: eeedabed-8d5a-4e8f-82cb-abe6280e6154\\r\n    Name created: 2b1b4bf7-efa6-4049-b4d2-1a9b7c8d7415\\r\n    Name created: 45dfcd63-eb8a-4f01-a2fb-0a34318ee5bd\\r\n    Name created: 9f28d873-4a3e-4f72-b37d-e2cecbbfd020\\r\n    Name created: 9244ad08-56d7-416f-834d-4705fca240e5\\r\n    Name created: f8a186cc-0a74-47a2-9b3e-fffe01f83d3b\\r\n    Name created: c57c85fd-b30d-45f3-9222-6d77502b7283\\r\n    Name created: 87040ea4-6126-4727-9d32-0bf5c41153a5\\r\n    Name created: 813bb3c1-7dfd-4d00-a40c-98dc1658b1ac\\r\n    Name created: 6abdc5d0-bbed-40f3-84dd-9a8db0c66911\\r\n    Name created: bae9156d-1965-44cc-b3e7-7443e54d05c7\\r\n    Waiting...\\r\n    WaitAny did not throw an exception\\r\n    Test Failed\\r\n    Expected: 100\\r\n    Actual: -1\\r\n    END EXECUTION - FAILED\\r\n    FAILED\\r\n    Test Harness Exitcode is : 1\\r\n    \n    To run the test:\n    > set CORE_ROOT=C:\\dotnetbuild\\work\\e37d73b6-8a44-4960-b23f-5648adc3f9ae\\Payload\n    > C:\\dotnetbuild\\work\\e37d73b6-8a44-4960-b23f-5648adc3f9ae\\Work\\035b5af9-bc9a-46aa-aff8-0912fb8bfe9b\\Unzip\\waithandle\\waitany\\waitanyex4\\waitanyex4.cmd\n    \\r\n    Expected: True\\r\n    Actual:   False\n\n        Stack Trace:\n\n        \nBuild : Master - 20170929.01 (Ready-To-Run Tests)\nFailing configurations:\n- Windows.10.Amd64.Core\n  - x64\n\nDetail: https://mc.dot.net/#/product/netcore/master/source/official~2Fcoreclr~2Fmaster~2F/type/test~2Ffunctional~2Fr2r~2Fcli~2F/build/20170929.01/workItem/baseservices.threading.XUnitWrapper/analysis/xunit/baseservices_threading._waithandle_waitany_waitanyex4_waitanyex4_~2F_waithandle_waitany_waitanyex4_waitanyex4_cmd"},{"Id":"6652411910","Type":"PullRequestEvent","CreatedAt":"2017-09-29T01:15:09","Actor":"ahsonkhan","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/14248","RelatedDescription":null,"RelatedBody":"Fixes https://github.com/dotnet/corefx/issues/24317\r\n\r\n- AddOffset throws if PinnedPointer is null. Should it fail silently and do nothing?\r\n- Would it be better to create a setter for PinnedPointer instead of the AddOffset API?\r\n\r\nRelated PR: https://github.com/dotnet/corefx/pull/24323\r\n\r\ncc @pakrym, @KrzysztofCwalina, @stephentoub, @davidfowl, @jkotas "},{"Id":"6652411762","Type":"PullRequestEvent","CreatedAt":"2017-09-29T01:15:05","Actor":"ahsonkhan","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/pull/14248","RelatedDescription":"Closed pull request \"Fixing Retain to return MemoryHandle with correct PinnedPointer\" (#14248) at dotnet/coreclr","RelatedBody":"Fixes https://github.com/dotnet/corefx/issues/24317\r\n\r\n- AddOffset throws if PinnedPointer is null. Should it fail silently and do nothing?\r\n- Would it be better to create a setter for PinnedPointer instead of the AddOffset API?\r\n\r\nRelated PR: https://github.com/dotnet/corefx/pull/24323\r\n\r\ncc @pakrym, @KrzysztofCwalina, @stephentoub, @davidfowl, @jkotas "},{"Id":"6652405870","Type":"PullRequestEvent","CreatedAt":"2017-09-29T01:12:25","Actor":"stephentoub","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/14219","RelatedDescription":"Merged pull request \"Added CopyToAsync overload using default buffer size\" (#14219) at dotnet/coreclr","RelatedBody":"Part of https://github.com/dotnet/corefx/issues/23312"},{"Id":"6652314243","Type":"PullRequestEvent","CreatedAt":"2017-09-29T00:29:47","Actor":"ahsonkhan","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/14248","RelatedDescription":"Opened pull request \"Fixing Retain to return MemoryHandle with correct PinnedPointer\" (#14248) at dotnet/coreclr","RelatedBody":"Fixes https://github.com/dotnet/corefx/issues/24317\r\n\r\n- AddOffset throws if PinnedPointer is null. Should it fail silently and do nothing?\r\n- Would it be better to create a setter for PinnedPointer instead of the AddOffset API?\r\n\r\nRelated PR: \r\n\r\ncc @pakrym, @KrzysztofCwalina, @stephentoub, @davidfowl, @jkotas "}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"6652621438","Type":"IssuesEvent","CreatedAt":"2017-09-29T02:48:38","Actor":"ahsonkhan","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/7726","RelatedDescription":"Opened issue \"Package restore failing for OSX and Ubuntu with Win32Exception\" (#7726) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\n1. Clone corefxlab repo https://github.com/dotnet/corefxlab\r\n2. Run ./build.sh\r\n3. Observe failure to restore pacakges (only on OSX and Ubuntu, package restore works fine on Windows).\r\n\r\nFrom:\r\nhttps://github.com/dotnet/corefxlab/pull/1787 https://ci.dot.net/job/dotnet_corefxlab/job/master/job/ubuntu16.04_release_prtest/807/consoleFull#7440085258bb52e59-de52-4f1c-b131-470db4c594cd\r\n\r\n```bash\r\necho \"Restoring all packages\"\r\n  ./$dotnetExePath restore $myFile /p:VersionSuffix=\"$BuildVersion\"\r\n  ret=$?\r\n  if [ $ret -ne 0 ]; then\r\n    echo \"Failed to restore packages.\"\r\n    exit -1\r\n  fi\r\n```\r\n\r\n\r\n## Expected  behavior\r\nPackage restore succeeds on all configurations.\r\n\r\n## Actual behavior\r\nPackage restore failing with System.ComponentModel.Win32Exception.\r\n\r\n18:50:13 System.ComponentModel.Win32Exception (0x80004005): The FileName property should not be a directory unless UseShellExecute is set.\r\n18:50:13    at System.Diagnostics.Process.StartCore(ProcessStartInfo startInfo)\r\n18:50:13    at System.Diagnostics.Process.Start()\r\n18:50:13    at Microsoft.DotNet.Cli.Utils.ProcessStartInfoExtensions.Execute(ProcessStartInfo startInfo)\r\n18:50:13    at Microsoft.DotNet.Tools.MSBuild.MSBuildForwardingApp.Execute()\r\n18:50:13    at Microsoft.DotNet.Tools.Restore.RestoreCommand.Run(String[] args)\r\n18:50:13    at Microsoft.DotNet.Cli.Program.ProcessArgs(String[] args, ITelemetry telemetryClient)\r\n18:50:13    at Microsoft.DotNet.Cli.Program.Main(String[] args)\r\n18:50:13 \r\n\r\n\r\n## Environment data\r\ndotnet cli version 2.1.0-preview1-007228\r\n\r\n\r\n\r\n\r\n\r\n\r\n"},{"Id":"6651786641","Type":"PullRequestEvent","CreatedAt":"2017-09-28T21:26:33","Actor":"dotnet-bot","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/7725","RelatedDescription":"Opened pull request \"Update CoreSetup to preview1-25728-02 (master)\" (#7725) at dotnet/cli","RelatedBody":"/cc @dotnet/dotnet-cli"},{"Id":"6651719876","Type":"PullRequestEvent","CreatedAt":"2017-09-28T21:09:27","Actor":"nguerrera","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/cli/pull/7721","RelatedDescription":null,"RelatedBody":"Porting the following to the new 2.0.x infrastructure branch from master:\r\n\r\n#7352 Update solution to reflect current state\r\n#7530 Eliminate warnings (just that subset, not the part of the PR that updated core-setup)\r\n#7460 Use REST API to upload to feed\r\n#7571 Logging for feed upload\r\n#7522 Rearrange output folders to fix incremental build\r\n#7594 Fix signing after output folders moved\r\n"},{"Id":"6651719672","Type":"PullRequestEvent","CreatedAt":"2017-09-28T21:09:24","Actor":"nguerrera","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/pull/7721","RelatedDescription":"Closed pull request \"Port infrastructure improvements from master to dev/release/2.0.0\" (#7721) at dotnet/cli","RelatedBody":"Porting the following to the new 2.0.x infrastructure branch from master:\r\n\r\n#7352 Update solution to reflect current state\r\n#7530 Eliminate warnings (just that subset, not the part of the PR that updated core-setup)\r\n#7460 Use REST API to upload to feed\r\n#7571 Logging for feed upload\r\n#7522 Rearrange output folders to fix incremental build\r\n#7594 Fix signing after output folders moved\r\n"},{"Id":"6651039139","Type":"IssuesEvent","CreatedAt":"2017-09-28T18:32:25","Actor":"saurav-sahu","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/7724","RelatedDescription":"Opened issue \"Unable to use @angular/cli commands in angular 2 template \" (#7724) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\ndotnet new angular && npm install\r\n\r\n## Expected  behavior\r\nangular template\r\n\r\n## Actual behavior\r\nangular template with all files except a .angular-cli.json. No ng (@angular/cli) commands work.\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n.NET Command Line Tools (2.0.0)\r\n\r\nProduct Information:\r\n Version:            2.0.0\r\n Commit SHA-1 hash:  cdcd1928c9\r\n\r\nRuntime Environment:\r\n OS Name:     ubuntu\r\n OS Version:  17.04\r\n OS Platform: Linux\r\n RID:         linux-x64\r\n Base Path:   /usr/share/dotnet/sdk/2.0.0/\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.0\r\n  Build    : e8b8861ac7faf042c87a5c2f9f2d04c98b69f28d\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"},{"Id":"6650991831","Type":"PullRequestEvent","CreatedAt":"2017-09-28T18:22:00","Actor":"johnbeisner","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/7723","RelatedDescription":"Opened pull request \"Handling the 'badge' naming for RedHat6\" (#7723) at dotnet/cli","RelatedBody":"Part of the work to enable RedHat 6\r\n\r\n@dotnet/dotnet-cli"},{"Id":"6650497711","Type":"PullRequestEvent","CreatedAt":"2017-09-28T16:31:47","Actor":"mmitche","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/cli/pull/7721","RelatedDescription":null,"RelatedBody":"Porting the following to the new 2.0.x infrastructure branch from master:\r\n\r\n#7352 Update solution to reflect current state\r\n#7350 Eliminate warnings (just that subset, not the part of the PR that updated core-setup)\r\n#7460 Use REST API to upload to feed\r\n#7571 Logging for feed upload\r\n#7522 Rearrange output folders to fix incremental build\r\n#7594 Fix signing after output folders moved\r\n"},{"Id":"6650497553","Type":"PullRequestEvent","CreatedAt":"2017-09-28T16:31:45","Actor":"mmitche","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/pull/7721","RelatedDescription":"Closed pull request \"Port infrastructure improvements from master to dev/release/2.0.0\" (#7721) at dotnet/cli","RelatedBody":"Porting the following to the new 2.0.x infrastructure branch from master:\r\n\r\n#7352 Update solution to reflect current state\r\n#7350 Eliminate warnings (just that subset, not the part of the PR that updated core-setup)\r\n#7460 Use REST API to upload to feed\r\n#7571 Logging for feed upload\r\n#7522 Rearrange output folders to fix incremental build\r\n#7594 Fix signing after output folders moved\r\n"},{"Id":"6650458332","Type":"PullRequestEvent","CreatedAt":"2017-09-28T16:23:34","Actor":"mmitche","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/cli/pull/7721","RelatedDescription":null,"RelatedBody":"Porting the following to the new 2.0.x infrastructure branch from master:\r\n\r\n#7352 Update solution to reflect current state\r\n#7350 Eliminate warnings (just that subset, not the part of the PR that updated core-setup)\r\n#7460 Use REST API to upload to feed\r\n#7571 Logging for feed upload\r\n#7522 Rearrange output folders to fix incremental build\r\n#7594 Fix signing after output folders moved\r\n"},{"Id":"6650458108","Type":"PullRequestEvent","CreatedAt":"2017-09-28T16:23:32","Actor":"mmitche","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/pull/7721","RelatedDescription":"Closed pull request \"Port infrastructure improvements from master to dev/release/2.0.0\" (#7721) at dotnet/cli","RelatedBody":"Porting the following to the new 2.0.x infrastructure branch from master:\r\n\r\n#7352 Update solution to reflect current state\r\n#7350 Eliminate warnings (just that subset, not the part of the PR that updated core-setup)\r\n#7460 Use REST API to upload to feed\r\n#7571 Logging for feed upload\r\n#7522 Rearrange output folders to fix incremental build\r\n#7594 Fix signing after output folders moved\r\n"}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"6650233493","Type":"IssuesEvent","CreatedAt":"2017-09-28T15:39:18","Actor":"ericstj","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/standard/issues/378","RelatedDescription":"Reopened issue \"Trimming fails if a conflict hits it\" (#378) at dotnet/standard","RelatedBody":"If conflict resolution doesn't resolve a conflict trimming will fail with an error like:\r\n```\r\nC:\\Users\\ericstj\\.nuget\\packages\\microsoft.packaging.tools.trimming\\1.0.0-preview2-25401-01\\build\\Microsoft.Packaging.Tools.Trimming.targets(55,5): error MSB4018: The \"TrimFiles\" task failed unexpectedly.\\r [F:\\testNetfx\\sdkProj\\sdkProj.csproj]\r\nC:\\Users\\ericstj\\.nuget\\packages\\microsoft.packaging.tools.trimming\\1.0.0-preview2-25401-01\\build\\Microsoft.Packaging.Tools.Trimming.targets(55,5): error MSB4018: System.ArgumentException: An item with the same key has already been added. Key: System.Security.Cryptography.Encoding.dll\\r [F:\\testNetfx\\sdkProj\\sdkProj.csproj]\r\nC:\\Users\\ericstj\\.nuget\\packages\\microsoft.packaging.tools.trimming\\1.0.0-preview2-25401-01\\build\\Microsoft.Packaging.Tools.Trimming.targets(55,5): error MSB4018:    at System.ThrowHelper.ThrowAddingDuplicateWithKeyArgumentException(Object key)\\r [F:\\testNetfx\\sdkProj\\sdkProj.csproj]\r\nC:\\Users\\ericstj\\.nuget\\packages\\microsoft.packaging.tools.trimming\\1.0.0-preview2-25401-01\\build\\Microsoft.Packaging.Tools.Trimming.targets(55,5): error MSB4018:    at System.Collections.Generic.Dictionary`2.TryInsert(TKey key, TValue value, InsertionBehavior behavior)\\r [F:\\testNetfx\\sdkProj\\sdkProj.csproj]\r\nC:\\Users\\ericstj\\.nuget\\packages\\microsoft.packaging.tools.trimming\\1.0.0-preview2-25401-01\\build\\Microsoft.Packaging.Tools.Trimming.targets(55,5): error MSB4018:    at System.Collections.Generic.Dictionary`2.Add(TKey key, TValue value)\\r [F:\\testNetfx\\sdkProj\\sdkProj.csproj]\r\nC:\\Users\\ericstj\\.nuget\\packages\\microsoft.packaging.tools.trimming\\1.0.0-preview2-25401-01\\build\\Microsoft.Packaging.Tools.Trimming.targets(55,5): error MSB4018:    at Microsoft.DotNet.Build.Tasks.TrimFiles.GetFiles(IDictionary`2 packages)\\r [F:\\testNetfx\\sdkProj\\sdkProj.csproj]\r\n```\r\n\r\nWe shouldn't fail here, instead we should just tolerate the duplicate and use one of them.\r\nhttps://github.com/dotnet/standard/blob/eacea174a2ea58c0dc8576cbec321e0cd44640a5/Microsoft.Packaging.Tools.Trimming/tasks/TrimFiles.cs#L310\r\n\r\n"},{"Id":"6650232780","Type":"PullRequestEvent","CreatedAt":"2017-09-28T15:39:11","Actor":"ericstj","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/461","RelatedDescription":"Merged pull request \"Handle file duplicates in trimming\" (#461) at dotnet/standard","RelatedBody":"Use last-in-wins (similar to what will happen with overwrite during\r\ncopy to output) when building the file graph.\r\n\r\nWe could instead merge the dependencies of the additional file but\r\nthat's not necessarily correct.\r\n\r\nFixes #378 \r\n\r\n/cc @weshaggard "},{"Id":"6650232762","Type":"IssuesEvent","CreatedAt":"2017-09-28T15:39:10","Actor":"ericstj","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/378","RelatedDescription":"Closed issue \"Trimming fails if a conflict hits it\" (#378) at dotnet/standard","RelatedBody":"If conflict resolution doesn't resolve a conflict trimming will fail with an error like:\r\n```\r\nC:\\Users\\ericstj\\.nuget\\packages\\microsoft.packaging.tools.trimming\\1.0.0-preview2-25401-01\\build\\Microsoft.Packaging.Tools.Trimming.targets(55,5): error MSB4018: The \"TrimFiles\" task failed unexpectedly.\\r [F:\\testNetfx\\sdkProj\\sdkProj.csproj]\r\nC:\\Users\\ericstj\\.nuget\\packages\\microsoft.packaging.tools.trimming\\1.0.0-preview2-25401-01\\build\\Microsoft.Packaging.Tools.Trimming.targets(55,5): error MSB4018: System.ArgumentException: An item with the same key has already been added. Key: System.Security.Cryptography.Encoding.dll\\r [F:\\testNetfx\\sdkProj\\sdkProj.csproj]\r\nC:\\Users\\ericstj\\.nuget\\packages\\microsoft.packaging.tools.trimming\\1.0.0-preview2-25401-01\\build\\Microsoft.Packaging.Tools.Trimming.targets(55,5): error MSB4018:    at System.ThrowHelper.ThrowAddingDuplicateWithKeyArgumentException(Object key)\\r [F:\\testNetfx\\sdkProj\\sdkProj.csproj]\r\nC:\\Users\\ericstj\\.nuget\\packages\\microsoft.packaging.tools.trimming\\1.0.0-preview2-25401-01\\build\\Microsoft.Packaging.Tools.Trimming.targets(55,5): error MSB4018:    at System.Collections.Generic.Dictionary`2.TryInsert(TKey key, TValue value, InsertionBehavior behavior)\\r [F:\\testNetfx\\sdkProj\\sdkProj.csproj]\r\nC:\\Users\\ericstj\\.nuget\\packages\\microsoft.packaging.tools.trimming\\1.0.0-preview2-25401-01\\build\\Microsoft.Packaging.Tools.Trimming.targets(55,5): error MSB4018:    at System.Collections.Generic.Dictionary`2.Add(TKey key, TValue value)\\r [F:\\testNetfx\\sdkProj\\sdkProj.csproj]\r\nC:\\Users\\ericstj\\.nuget\\packages\\microsoft.packaging.tools.trimming\\1.0.0-preview2-25401-01\\build\\Microsoft.Packaging.Tools.Trimming.targets(55,5): error MSB4018:    at Microsoft.DotNet.Build.Tasks.TrimFiles.GetFiles(IDictionary`2 packages)\\r [F:\\testNetfx\\sdkProj\\sdkProj.csproj]\r\n```\r\n\r\nWe shouldn't fail here, instead we should just tolerate the duplicate and use one of them.\r\nhttps://github.com/dotnet/standard/blob/eacea174a2ea58c0dc8576cbec321e0cd44640a5/Microsoft.Packaging.Tools.Trimming/tasks/TrimFiles.cs#L310\r\n\r\n"},{"Id":"6647190490","Type":"IssuesEvent","CreatedAt":"2017-09-28T02:19:07","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/513","RelatedDescription":"Closed issue \"Machine Key class not available in .net standard\" (#513) at dotnet/standard","RelatedBody":"We use the “MachineKey” class from the System.Web.Security assembly. In the .NetFramework version of the project, I right-clicked on references, add reference… then looked up the System.Web assembly and included it. Now with it being .NetStandard, if I right-click on Dependencies, add reference…\r\n\r\n@shanselman  @terrajobst  @ericstj  @EisenbergEffect "}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"6652930517","Type":"PullRequestEvent","CreatedAt":"2017-09-29T05:28:16","Actor":"danmosemsft","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/24325","RelatedDescription":"Merged pull request \"Port disable of stack frame tests for NETFX\" (#24325) at dotnet/corefx","RelatedBody":"Port https://github.com/dotnet/corefx/pull/23798. These were apparently broken by some change to NETFX itself.\r\n\r\nAlso this is a CI baseline"},{"Id":"6652929651","Type":"PullRequestEvent","CreatedAt":"2017-09-29T05:27:50","Actor":"danmosemsft","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/24311","RelatedDescription":"Merged pull request \"Port clean-up of CreateFileW\" (#24311) at dotnet/corefx","RelatedBody":"* Removing CreateFileW from UWP\r\n\r\n* CR: move conditional to its own ItemGroup\r\n\r\n* removed pinvoke exceptions for Runtime.Extensions\r\n\r\n* Fixed condition for CreateFile ItemGroup\r\n\r\n* exception still needed for netstandard"},{"Id":"6652924464","Type":"IssuesEvent","CreatedAt":"2017-09-29T05:25:10","Actor":"pjanotti","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/24318","RelatedDescription":"Closed issue \"UWP: 2 System.IO.Pipes failing after enabling other tests on same project\" (#24318) at dotnet/corefx","RelatedBody":"```\r\n     System.IO.Pipes.Tests.NamedPipeTest_Specific.Windows_GetImpersonationUserName_Succeed [FAIL]\r\n        GetNamedPipeHandleState failed\r\n        Expected: True\r\n        Actual:   False\r\n        Stack Trace:\r\n              at System.IO.Pipes.Tests.NamedPipeTest_Specific.<Windows_GetImpersonationUserName_Succeed>d__8.MoveNext()\r\n           --- End of stack trace from previous location where exception was thrown ---\r\n              at Void System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw() + 0x21\r\n              at Void System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task) + 0x7e\r\n              at Void System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task) + 0x53\r\n              at Void Xunit.Sdk.TestInvoker`1+<>c__DisplayClass46_1+<<InvokeTestMethodAsync>b__1>d.MoveNext() + 0x2ea\r\n           --- End of stack trace from previous location where exception was thrown ---\r\n              at Void System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw() + 0x21\r\n              at Void System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task) + 0x7e\r\n              at Void System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task) + 0x53\r\n           --- End of stack trace from previous location where exception was thrown ---\r\n              at Void System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw() + 0x21\r\n              at Void System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task) + 0x7e\r\n              at Void System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task) + 0x53\r\n\r\n     System.IO.Pipes.Tests.NamedPipeTest_RunAsClient.RunAsClient_Windows [FAIL]\r\n        Expected delegate to have been invoked\r\n        Expected: True\r\n        Actual:   False\r\n        Stack Trace:\r\n              at System.IO.Pipes.Tests.NamedPipeTest_RunAsClient.<RunAsClient_Windows>d__2.MoveNext()\r\n           --- End of stack trace from previous location where exception was thrown ---\r\n              at Void System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw() + 0x21\r\n              at Void System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task) + 0x7e\r\n              at Void System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task) + 0x53\r\n              at Void Xunit.Sdk.TestInvoker`1+<>c__DisplayClass46_1+<<InvokeTestMethodAsync>b__1>d.MoveNext() + 0x2ea\r\n           --- End of stack trace from previous location where exception was thrown ---\r\n              at Void System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw() + 0x21\r\n              at Void System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task) + 0x7e\r\n              at Void System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task) + 0x53\r\n           --- End of stack trace from previous location where exception was thrown ---\r\n              at Void System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw() + 0x21\r\n              at Void System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task) + 0x7e\r\n              at Void System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task) + 0x53\r\n\r\n  xUnit.net console test runner (64-bit .NET Core)\r\n  Copyright (C) 2014 Outercurve Foundation.\r\n```"},{"Id":"6652924248","Type":"PullRequestEvent","CreatedAt":"2017-09-29T05:25:03","Actor":"pjanotti","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/24324","RelatedDescription":"Merged pull request \"Revert \"Conditionally run namedPipes tests in uap if windows version …\" (#24324) at dotnet/corefx","RelatedBody":"…contains fix (#24307)\"\r\n\r\nThis reverts commit 161267c8645d4fd4cde51c3783d3c9326ed034f1."},{"Id":"6652916546","Type":"PullRequestEvent","CreatedAt":"2017-09-29T05:21:04","Actor":"dotnet-maestro-bot","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/24326","RelatedDescription":"Opened pull request \"Update ProjectNTfs, ProjectNTfsTestILC to beta-25729-00, beta-25729-00, respectively (master)\" (#24326) at dotnet/corefx","RelatedBody":""},{"Id":"6652867797","Type":"PullRequestEvent","CreatedAt":"2017-09-29T04:54:46","Actor":"danmosemsft","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/24325","RelatedDescription":"Opened pull request \"Port disable of stack frame tests for NETFX\" (#24325) at dotnet/corefx","RelatedBody":"Port https://github.com/dotnet/corefx/pull/23798. These were apparently broken by some change to NETFX itself."},{"Id":"6652836702","Type":"PullRequestEvent","CreatedAt":"2017-09-29T04:36:57","Actor":"pjanotti","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/pull/24319","RelatedDescription":"Closed pull request \"Mark 2 tests as active issue and correct IsWinRT* from previous commit\" (#24319) at dotnet/corefx","RelatedBody":"Related issue #24318 \r\n/cc @joperezr @danmosemsft "},{"Id":"6652805844","Type":"PullRequestEvent","CreatedAt":"2017-09-29T04:19:14","Actor":"pjanotti","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/24324","RelatedDescription":"Opened pull request \"Revert \"Conditionally run namedPipes tests in uap if windows version …\" (#24324) at dotnet/corefx","RelatedBody":"…contains fix (#24307)\"\r\n\r\nThis reverts commit 161267c8645d4fd4cde51c3783d3c9326ed034f1."},{"Id":"6652690481","Type":"PullRequestEvent","CreatedAt":"2017-09-29T03:20:38","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/24314","RelatedDescription":"Merged pull request \"Update BuildTools, CoreFx, CoreSetup to prerelease-02029-01, preview1-25729-01, preview1-25728-02, respectively (master)\" (#24314) at dotnet/corefx","RelatedBody":""},{"Id":"6652658775","Type":"IssuesEvent","CreatedAt":"2017-09-29T03:05:37","Actor":"ahsonkhan","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/24317","RelatedDescription":"Closed issue \"Memory.Retain returns invalid PinnedPointer if backed by OwnedMemory\" (#24317) at dotnet/corefx","RelatedBody":"`memory.Slice(10).Retain(true).PinnedPointer` would return pointer to first element of original memory instead of being offset by `10`.\r\n\r\n/cc @ahsonkhan @KrzysztofCwalina "}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"6652846851","Type":"PullRequestEvent","CreatedAt":"2017-09-29T04:42:44","Actor":"jcouv","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/22417","RelatedDescription":"Merged pull request \"Fix typo in INotifyCompletion API in doc\" (#22417) at dotnet/roslyn","RelatedBody":"Doc-only change."},{"Id":"6652771520","Type":"PullRequestEvent","CreatedAt":"2017-09-29T04:00:32","Actor":"gafter","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/22407","RelatedDescription":null,"RelatedBody":"Fixes #22244\r\nRelated to #22406\r\n\r\nThis is a comment-only change, to remove PROTOTYPE comments and replace by open issues.\r\n\r\n@jcouv Please review and approve for 15.5.\r\n"},{"Id":"6652771426","Type":"PullRequestEvent","CreatedAt":"2017-09-29T04:00:29","Actor":"gafter","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/pull/22407","RelatedDescription":"Closed pull request \"Remove PROTOTYPE markers from \"private protected\" feature\" (#22407) at dotnet/roslyn","RelatedBody":"Fixes #22244\r\nRelated to #22406\r\n\r\nThis is a comment-only change, to remove PROTOTYPE comments and replace by open issues.\r\n\r\n@jcouv Please review and approve for 15.5.\r\n"},{"Id":"6652695450","Type":"PullRequestEvent","CreatedAt":"2017-09-29T03:23:01","Actor":"jcouv","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/22419","RelatedDescription":"Opened pull request \"Add tests with ref readonly and ref assemblies\" (#22419) at dotnet/roslyn","RelatedBody":"Test-only change to close https://github.com/dotnet/roslyn/issues/22264\r\n\r\nThe test compiles a library (regular, metadata-only, and ref assembly), then compiles a client against each of these.\r\n\r\n@OmarTawfik @VSadov I don't understand what is going on with the delegate error. Am I doing it wrong, or is there a bug?"},{"Id":"6652635684","Type":"IssuesEvent","CreatedAt":"2017-09-29T02:55:01","Actor":"ArsenShnurkov","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/22418","RelatedDescription":"Opened issue \"Document is not available\" (#22418) at dotnet/roslyn","RelatedBody":"here - https://github.com/dotnet/roslyn/blob/999e20ef5189b54d59339d37c77fdf0e429233bb/src/Compilers/Core/MSBuildTask/Csc.cs#L261\r\nthis document is mentioned\r\nhttp://devdiv/spectool/Documents/Whidbey/VCSharp/Design%20Time/M3%20DCRs/DCR%20Assembly%20aliases.doc\r\nbut it is unavailable"},{"Id":"6652599703","Type":"PullRequestEvent","CreatedAt":"2017-09-29T02:39:01","Actor":"jcouv","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/22417","RelatedDescription":"Opened pull request \"Fix typo in INotifyCompletion API in doc\" (#22417) at dotnet/roslyn","RelatedBody":"Doc-only change."},{"Id":"6652537474","Type":"IssuesEvent","CreatedAt":"2017-09-29T02:10:49","Actor":"ChristopherHaws","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/22416","RelatedDescription":"Opened issue \"Invoking async delegates cause code completion to fail\" (#22416) at dotnet/roslyn","RelatedBody":"In the latest version of Visual Studio, it seems like code completion failed when invoked prior to an async delegate being awaited.\r\n\r\n**Version Used**: \r\nVisual Studio 2017 15.4.0 Preview 3.0\r\n\r\n**Steps to Reproduce**:\r\n1. Create a new class library (.NET Core or .NET Framework, it happens in both)\r\n2. Replace Class1 with the following code:\r\n```csharp\r\npublic class Class1\r\n{\r\n    public delegate Task TestDelegate(String arg);\r\n\r\n    public async Task InvokeAsync(String arg, TestDelegate next)\r\n    {\r\n        // Type 'arg.' and hit ctrl+space (Edit.CompleteWord) here\r\n\r\n        await next(arg);\r\n    }\r\n}\r\n```\r\n3. Create a line before `await next(arg);` and type `arg.`\r\n\r\n**Expected Behavior**:\r\nVisual Studio should show code completion for the `arg` string type.\r\n\r\n**Actual Behavior**:\r\nVisual Studio gives the error `'arg' is a variable used like a type` and does not invoke the code completion window."},{"Id":"6652535410","Type":"IssuesEvent","CreatedAt":"2017-09-29T02:09:53","Actor":"jcouv","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/20741","RelatedDescription":"Closed issue \"C# Named params argument in attribute constructor gets assigned wrong.\" (#20741) at dotnet/roslyn","RelatedBody":"**Version Used**: \r\nVisual Studio 15.1 (26403.7)\r\n**Steps to Reproduce**:\r\n\r\nUsing named arguments in conjunction with params arguments seems to assign the wrong parameter in attribute constructor calls.\r\n\r\n```CSharp\r\nusing System;\r\nusing System.Reflection;\r\n\r\nsealed class MarkAttribute : Attribute\r\n{\r\n    public MarkAttribute(bool otherArg, params object[] args)\r\n    {\r\n        Args = args;\r\n        OtherArg = otherArg;\r\n    }\r\n    public object[] Args { get;  }\r\n    public bool OtherArg { get; }\r\n}\r\n\r\n[Mark(args: new string[] { \"Hello\", \"World\" }, otherArg: true)]\r\nstatic class Program\r\n{\r\n    private static void Test(bool otherArg, params object[] args)\r\n        => PrintOutArgsInfo(args);\r\n\r\n    public static void Main()\r\n    {\r\n        Console.WriteLine(\"Method call\");\r\n        Test(args: new string[] { \"Hello\", \"World\" }, otherArg: true);\r\n\r\n        var attr = typeof(Program).GetCustomAttribute<MarkAttribute>();\r\n        Console.WriteLine(\"\\nAttribute constructor call\");\r\n        PrintOutArgsInfo(attr.Args);\r\n    }\r\n\r\n    private static void PrintOutArgsInfo(object[] args)\r\n    {\r\n        Console.WriteLine($\"Length: { args.Length } \");\r\n        Console.WriteLine($\"Value of Arr[0]: { args[0] } \");\r\n        Console.WriteLine($\"Type of Value[0]: { args[0].GetType().ToString() } \");\r\n    }\r\n}\r\n```\r\n**Expected Behavior**:\r\nDoes not compile or print out:\r\n```\r\nMethod call\r\nLength: 2\r\nValue of Arr[0]: Hello\r\nType of Value[0]: System.String\r\n\r\nAttribute constructor call\r\nLength: 2\r\nValue of Arr[0]: Hello\r\nType of Value[0]: System.String\r\n```\r\n\r\n**Actual Behavior**:\r\n```\r\nMethod call\r\nLength: 2\r\nValue of Arr[0]: Hello\r\nType of Value[0]: System.String\r\n\r\nAttribute constructor call\r\nLength: 1\r\nValue of Arr[0]: True\r\nType of Value[0]: System.Boolean\r\n```\r\n\r\nDiscovered during working on #20630."},{"Id":"6652535404","Type":"PullRequestEvent","CreatedAt":"2017-09-29T02:09:53","Actor":"jcouv","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/22231","RelatedDescription":"Merged pull request \"Fix serialization of attribute data to account for named params argument\" (#22231) at dotnet/roslyn","RelatedBody":"**Customer scenario**\r\n\r\nDefine attribute with `MarkAttribute(bool a, params object[] b)` and use it with `[Mark(b: new object[] { \"Hello\", \"World\" }, a: true)]`.\r\nIt will be incorrectly emitted as `[Mark(true, new object[] { true })]`.\r\n\r\n**Bugs this fixes:**\r\nFixes https://github.com/dotnet/roslyn/issues/20741\r\n\r\n**Workarounds, if any**\r\nUse attribute without naming arguments.\r\n\r\n**Risk**\r\n**Performance impact**\r\nLow. This only affects the serialization of attribute data for attributes that have a `params` parameter.\r\n\r\n**Is this a regression from a previous update?**\r\nNo. This code was largely unchanged during the whole git history.\r\n\r\n**Root cause analysis:**\r\nThe matching of arguments to parameters during overload resolution is fine. But when it comes time to prepare attribute data, we have logic to put arguments in the proper order (`GetRewrittenAttributeConstructorArguments`). It's implementation didn't handle named params arguments properly.\r\n\r\n**How was the bug found?**\r\nReported by customer\r\n\r\n**Test documentation updated?**\r\nNot applicable"},{"Id":"6652350722","Type":"PullRequestEvent","CreatedAt":"2017-09-29T00:46:46","Actor":"shyamnamboodiripad","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/22396","RelatedDescription":"Merged pull request \"Check for null before registering incremental analyzer\" (#22396) at dotnet/roslyn","RelatedBody":"This should enable the case where an analyzer provider needs to check whether a setting / feature flag is turned on before returning a valid analyzer. Currently, in such cases analyzer provider has to instead return an analyzer that ignores all changes that it is told about... After the change in this PR, analyzer provider can simply return null in such cases.\r\n"},{"Id":"6652344733","Type":"IssuesEvent","CreatedAt":"2017-09-29T00:44:00","Actor":"thauk-copperleaf","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/22415","RelatedDescription":"Opened issue \"Using Roslyn to analyze a .NET Framework project with .NET Core\" (#22415) at dotnet/roslyn","RelatedBody":"I am trying to analyze a .NET Framework project with Roslyn using .NET Core and an EAP build of Rider.\r\n\r\nI can compile the solution/project using Rider successfully.\r\n\r\nUsing Roslyn and a .NET Core project, I am able to create a workspace, add the .NET Framework solution, and find the project I wish to analyze.\r\n\r\n# Problem 1\r\n\r\nThe step `var compilationResult = compilation.GetCompilationAsync().Result` results in an \"empty\" compilation (no syntax trees), similar to this comment: https://github.com/dotnet/roslyn/issues/17968#issuecomment-299981189\r\n\r\nChecking `workspace.Diagnostics` shows the message:\r\n\r\n`[Failure] Msbuild failed when processing the file 'C:\\Path\\To\\Solution.csproj' with message: The imported project \"C:\\Program Files\\dotnet\\Microsoft.CSharp.targets\" was not found. Confirm that the path in the <Import> declaration is correct, and that the file exists on disk.  C:\\Path\\To\\Solution.csproj`\r\n\r\nThe answer to a similar question at https://stackoverflow.com/a/5695 suggests modifying the project file directly, replacing `MSBuildToolsPath` with `MSBuildBinPath` on this line:\r\n\r\n`<Import Project=\"$(MSBuildToolsPath)\\Microsoft.CSharp.targets\" />`\r\n\r\nHowever, this did not help. I tried hardcoding the path and removing `$(MSBuildToolsPath)` completely, but then it died trying to find the next `.targets` file.\r\n\r\nI found a temporary workaround by adding the following line of C# code to my analyzer project before creating the workspace, which resolved the diagnostic errors and resulted in the compilation having syntax trees:\r\n\r\n`Environment.SetEnvironmentVariable(\"MSBUILD_EXE_PATH\", @\"C:\\Program Files\\dotnet\\sdk\\2.0.0\\MSBuild.dll\");`\r\n\r\nHowever, this is not a good solution. I have version 15.3.409 of both `Microsoft.Build` and `Microsoft.Build.Tasks.Core` added as NuGet dependencies, and therefore I should be able to point Roslyn to use those packages instead of whatever MSBuild I happen to have installed globally.\r\n\r\n## What is the actual problem here? How can I fix it?\r\n\r\n# Problem 2\r\n\r\nI am attempting to do something similar to this: https://johnkoerner.com/csharp/creating-a-stand-alone-code-analyzer/\r\n\r\nThis line works:\r\n\r\n`var classDeclarations = tree.GetRoot().DescendantNodesAndSelf()`\r\n\r\nHowever, using `.Where(...)` like this\r\n\r\n`var classDeclarations = tree.GetRoot().DescendantNodesAndSelf().Where(x => x.IsKind(SyntaxKind.ClassDeclaration))`\r\n\r\nresults in an exception, which I can only see if I use Rider and evaluate the expression while debugging:\r\n\r\n`{System.NotSupportedException: Assembly.LoadFrom with hashValue is not supported.\r\n   at System.Reflection.Assembly.LoadFrom(String assemblyFile, Byte[] hashValue, AssemblyHashAlgorithm hashAlgorithm)}`\r\n\r\n## What am I doing wrong here? Is .NET Core unable to use Linq expressions? If so, what should I do instead?\r\n"}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"6652877660","Type":"PullRequestEvent","CreatedAt":"2017-09-29T05:00:16","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/4632","RelatedDescription":"Opened pull request \"Update CoreFx\" (#4632) at dotnet/corert","RelatedBody":""},{"Id":"6652877289","Type":"PullRequestEvent","CreatedAt":"2017-09-29T05:00:07","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/4627","RelatedDescription":"Merged pull request \"Port CoreCLR#13736 fix to CoreRT\" (#4627) at dotnet/corert","RelatedBody":"This ports PR https://github.com/dotnet/coreclr/pull/14088 to CoreRT which fixes some parameter validation issues in `GC.TryStartNoGCRegion`. Needed for the new tests in https://github.com/dotnet/corefx/pull/24201 to pass.\r\n\r\ncc @sergiy-k @Maoni0 @adityamandaleeka "},{"Id":"6652876915","Type":"PullRequestEvent","CreatedAt":"2017-09-29T04:59:55","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/4630","RelatedDescription":"Merged pull request \"Merge nmirror to master\" (#4630) at dotnet/corert","RelatedBody":""},{"Id":"6652812625","Type":"PullRequestEvent","CreatedAt":"2017-09-29T04:23:07","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/4631","RelatedDescription":"Merged pull request \"Update JIT/EE interface\" (#4631) at dotnet/corert","RelatedBody":"This got unnoticed in the RyuJIT update due to CI issues."},{"Id":"6652754048","Type":"PullRequestEvent","CreatedAt":"2017-09-29T03:51:40","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/4631","RelatedDescription":"Opened pull request \"Update JIT/EE interface\" (#4631) at dotnet/corert","RelatedBody":"This got unnoticed in the RyuJIT update due to CI issues."},{"Id":"6652725542","Type":"PullRequestEvent","CreatedAt":"2017-09-29T03:37:18","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/4630","RelatedDescription":"Opened pull request \"Merge nmirror to master\" (#4630) at dotnet/corert","RelatedBody":""},{"Id":"6651888172","Type":"PullRequestEvent","CreatedAt":"2017-09-28T21:53:40","Actor":"kouvel","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/pull/4124","RelatedDescription":"Closed pull request \"Enable CLR Thread Pool via a MSBuild flag (default enabled on Unix)\" (#4124) at dotnet/corert","RelatedBody":"This PR adds tests for the CLR Thread Pool. It also adds Windows implementations for the low level primitives used in the CLR Thread Pool.\r\n\r\nThe thread pool is enabled by setting the MSBuild property `FeaturePortableThreadPool` to `true`, which is the default on Unix.\r\n\r\nSupersedes #4039.\r\n\r\n@kouvel  @Sergiy-k @AntonLapounov @jkotas \r\n\r\nNote: This is tagged * NO MERGE * because it intermittently exposes a GC crash in root scan during thread setup. That bug is being tracked by #4214."},{"Id":"6651612125","Type":"PullRequestEvent","CreatedAt":"2017-09-28T20:44:30","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/4629","RelatedDescription":"Merged pull request \"Merge changes from TFS\" (#4629) at dotnet/corert","RelatedBody":"When merging, this PR, please ensure a merge commit is created as automation requires the merge commit.  Do not 'Squash and merge' or 'Rebase and merge'!"},{"Id":"6651608880","Type":"PullRequestEvent","CreatedAt":"2017-09-28T20:43:46","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/4629","RelatedDescription":"Opened pull request \"Merge changes from TFS\" (#4629) at dotnet/corert","RelatedBody":"When merging, this PR, please ensure a merge commit is created as automation requires the merge commit.  Do not 'Squash and merge' or 'Rebase and merge'!"},{"Id":"6651467391","Type":"PullRequestEvent","CreatedAt":"2017-09-28T20:10:40","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/corert/pull/4124","RelatedDescription":null,"RelatedBody":"This PR adds tests for the CLR Thread Pool. It also adds Windows implementations for the low level primitives used in the CLR Thread Pool.\r\n\r\nThe thread pool is enabled by setting the MSBuild property `FeaturePortableThreadPool` to `true`, which is the default on Unix.\r\n\r\nSupersedes #4039.\r\n\r\n@kouvel  @Sergiy-k @AntonLapounov @jkotas \r\n\r\nNote: This is tagged * NO MERGE * because it intermittently exposes a GC crash in root scan during thread setup. That bug is being tracked by #4214."},{"Id":"6651467223","Type":"PullRequestEvent","CreatedAt":"2017-09-28T20:10:38","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/pull/4124","RelatedDescription":"Closed pull request \"Enable CLR Thread Pool via a MSBuild flag (default enabled on Unix)\" (#4124) at dotnet/corert","RelatedBody":"This PR adds tests for the CLR Thread Pool. It also adds Windows implementations for the low level primitives used in the CLR Thread Pool.\r\n\r\nThe thread pool is enabled by setting the MSBuild property `FeaturePortableThreadPool` to `true`, which is the default on Unix.\r\n\r\nSupersedes #4039.\r\n\r\n@kouvel  @Sergiy-k @AntonLapounov @jkotas \r\n\r\nNote: This is tagged * NO MERGE * because it intermittently exposes a GC crash in root scan during thread setup. That bug is being tracked by #4214."}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"912821941706268673","CreatedAt":"2017-09-26T23:31:24+00:00","UserScreenname":"dotnet","Text":"Build a web service with F# and .NET Core 2.0 https://t.co/2jSgo1gbty","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":106,"FavoriteCount":63,"RawContent":null},{"Id":"912406212238442498","CreatedAt":"2017-09-25T19:59:27+00:00","UserScreenname":"dotnet","Text":".NET Framework September 2017 Preview of Quality Rollup https://t.co/tkuoBxjYHC","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":32,"FavoriteCount":19,"RawContent":null},{"Id":"911357565769936896","CreatedAt":"2017-09-22T22:32:30+00:00","UserScreenname":"dotnet","Text":".NET Core September 2017 Update — macOS High Sierra Support https://t.co/k9gJ5jFIN8","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":43,"FavoriteCount":24,"RawContent":null},{"Id":"911015945291919360","CreatedAt":"2017-09-21T23:55:01+00:00","UserScreenname":"dotnet","Text":"Last one! Happening now on .NET Fundamentals Track @ #dotNETConf: Learn how to use #FSharp to write front-end &amp; bac… https://t.co/OH8cMAcq4I","Source":"<a href=\"https://prod2.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod2</a>","RetweetCount":26,"FavoriteCount":16,"RawContent":null},{"Id":"911005750410960896","CreatedAt":"2017-09-21T23:14:31+00:00","UserScreenname":"dotnet","Text":"PSA: .NET Framework September Update - known issues published https://t.co/1yk2xwnrvP","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":21,"FavoriteCount":11,"RawContent":null},{"Id":"911000845860458498","CreatedAt":"2017-09-21T22:55:01+00:00","UserScreenname":"dotnet","Text":"Happening now on the .NET Fundamentals Track @ #dotNETConf: Get started w/ #FSharp, .NET Core &amp; #VSCode. Watch… https://t.co/VRkwBvSNPU","Source":"<a href=\"https://prod2.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod2</a>","RetweetCount":30,"FavoriteCount":15,"RawContent":null},{"Id":"910988157197344768","CreatedAt":"2017-09-21T22:04:36+00:00","UserScreenname":"dotnet","Text":".NET Framework 4.7.1 Accessibility and WPF Improvements https://t.co/eZLFQxhlLj","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":64,"FavoriteCount":52,"RawContent":null},{"Id":"910985746386911237","CreatedAt":"2017-09-21T21:55:01+00:00","UserScreenname":"dotnet","Text":"Happening now on the .NET Fundamentals Track @ #dotNETConf: Introducing Razor Pages - Join the session here:… https://t.co/NTQg6urmhQ","Source":"<a href=\"https://prod2.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod2</a>","RetweetCount":17,"FavoriteCount":6,"RawContent":null}]}},"RunOn":"2017-09-29T05:30:17.6388463Z","RunDurationInMilliseconds":6309}