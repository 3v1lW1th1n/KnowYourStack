{"Data":{"GitHub":{"Issues":[{"Id":"536076748","IsPullRequest":true,"CreatedAt":"2019-12-11T01:12:46","Actor":"vatsan-madhavan","Number":"2303","RawContent":null,"Title":"Import Microsoft.WinFx.props only when it is present","State":"closed","Body":"Import Microsoft.WinFx.props only when it is present\r\n","Url":"https://github.com/dotnet/wpf/pull/2303","RelatedDescription":"Closed or merged PR \"Import Microsoft.WinFx.props only when it is present\" (#2303)"},{"Id":"536043860","IsPullRequest":false,"CreatedAt":"2019-12-10T23:02:08","Actor":"climbak","Number":"2302","RawContent":null,"Title":"TreeView scroll issue","State":"open","Body":"I encountered a strange scrolling issue in the WPF TreeView. I can only reproduce it with a specific layout and I have created a sample app to reproduce. I tried debugging the decompiled source in PresentationFramework, but was not able to find the true source.\r\n\r\nThe basics: I have a Grid layout in which I have put in a TreeView with some items in one column, a DataGrid in another column that shows details of the selected item in the TreeView. In the row below both the DataGrid and the TreeView, I have a button (I've tested a few different controls that all reprod) and it's in the same column as the DataGrid.\r\n\r\nWhen the TreeView is scrolled down and an item is selected, the DataGrid populates with the details of the selected item and then an UpdateLayout is called on the TreeView which causes the ScrollInfo values on it's ScrollViewer to revert to a Y value of 0 and the TreeView scrolls to the top.\r\n\r\nIn my sample application, you can just run it, click the Fill button to add items then click Expand All to expand them. Scroll down a bit and select any leaf item and the TreeView will scroll back to the top.\r\n\r\nIf the button at the bottom is removed from the xaml or if the first Grid column that houses the TreeView is set to a set width or *, the errant scroll won't repro.\r\n\r\nThe sample project can be found here: https://github.com/climbak/TreeViewScrollingIssue","Url":"https://github.com/dotnet/wpf/issues/2302","RelatedDescription":"Open issue \"TreeView scroll issue\" (#2302)"},{"Id":"534286362","IsPullRequest":true,"CreatedAt":"2019-12-10T21:56:49","Actor":"rladuca","Number":"2288","RawContent":null,"Title":"Handle incremental build when XAML files are removed from the Page glob","State":"closed","Body":"Ensure that we don't include XAML files that no longer exist on disk as part of the LocalMarkupPages when we load from the compiler cache.\r\n\r\nThis allows SDK style projects to react to files deleted from the glob between two incremental builds.\r\n\r\nFixes #2287 ","Url":"https://github.com/dotnet/wpf/pull/2288","RelatedDescription":"Closed or merged PR \"Handle incremental build when XAML files are removed from the Page glob\" (#2288)"},{"Id":"534161006","IsPullRequest":false,"CreatedAt":"2019-12-10T21:56:48","Actor":"rladuca","Number":"2287","RawContent":null,"Title":"Handle incremental build when XAML files are removed from the Page glob","State":"closed","Body":"Related to https://github.com/microsoft/msbuild/issues/4963\r\n\r\nWPF needs to update its handling of incremental building in PBT (likely in [IncrementalCompileAnalyzer](https://github.com/dotnet/wpf/blob/f4e04b7a34f8c490b7d351b44d2825293462e8a5/src/Microsoft.DotNet.Wpf/src/PresentationBuildTasks/MS/Internal/Tasks/IncrementalCompileAnalyzer.cs)) so that it detects invalid items in the cache and ignores them during markup compilation.\r\n\r\nOtherwise, we potentially attempt to compile files that are no longer present on disk and the build will fail.\r\n\r\nMSBuild has no mechanism to do this automatically as of yet (see https://github.com/microsoft/msbuild/issues/2470), so this must be handled at the WPF level.","Url":"https://github.com/dotnet/wpf/issues/2287","RelatedDescription":"Closed issue \"Handle incremental build when XAML files are removed from the Page glob\" (#2287)"},{"Id":"535913935","IsPullRequest":true,"CreatedAt":"2019-12-10T18:42:23","Actor":"SamBent","Number":"2301","RawContent":null,"Title":"Add .NET SDK to developer guide","State":"open","Body":"Document dependency on .NET SDK.  \r\n\r\nThe build of PresentationCore uses IL tools.  ILdasm.exe is obtained from a .NET SDK, either 4.6.1 or 4.6.2 (but not higher).\r\n\r\nThis is a mitigation for #2298.","Url":"https://github.com/dotnet/wpf/pull/2301","RelatedDescription":"Open PR \"Add .NET SDK to developer guide\" (#2301)"},{"Id":"535906384","IsPullRequest":true,"CreatedAt":"2019-12-10T18:27:06","Actor":"SamBent","Number":"2300","RawContent":null,"Title":"Remove dependency on CorError.h","State":"open","Body":"Copy (from .NET 4.6.1 SDK) the one HR definition used by DirectWriteForwarder.\r\n\r\nFixes #2297 \r\n","Url":"https://github.com/dotnet/wpf/pull/2300","RelatedDescription":"Open PR \"Remove dependency on CorError.h\" (#2300)"},{"Id":"535905568","IsPullRequest":false,"CreatedAt":"2019-12-10T18:25:24","Actor":"fatihyildizhan","Number":"2299","RawContent":null,"Title":"TabControl and ComboBox look broken","State":"open","Body":"\r\n![ui](https://user-images.githubusercontent.com/602600/70565608-86003080-1ba3-11ea-84a2-1bb39f308459.jpg)\r\n* .NET Core 3.1.100\r\n* Windows 10 1903\r\n* Does the bug reproduce also in WPF for .NET Framework 4.8?: No \r\n\r\n **Problem description:**\r\n\r\nI am using TabControl and ComboBox. They look perfect on the first run. When you move the Window some of the tabs and ComboBox look melted/broken. \r\n\r\n** Repro **\r\nI tested this app on 4 different computers with almost the same configuration. Looks broken on 2 computers. \r\n\r\nMove the app for a while on Desktop, change Tabs, scroll ComboBox then UI become like this.\r\n\r\nEdit note: I attached a screenshot.\r\n","Url":"https://github.com/dotnet/wpf/issues/2299","RelatedDescription":"Open issue \"TabControl and ComboBox look broken\" (#2299)"},{"Id":"535439814","IsPullRequest":false,"CreatedAt":"2019-12-10T01:44:01","Actor":"SamBent","Number":"2298","RawContent":null,"Title":"Remove dependency on .NET IL tools","State":"open","Body":"* .NET Core Version: (e.g. 3.0 Preview1, or daily build number, use `dotnet --info`) 5.0.100-alpha1-015914\r\n* Windows version: (`winver`) 1909 (10.0.18363)\r\n* Does the bug reproduce also in WPF for .NET Framework 4.8?: No\r\n* Is this bug related specifically to tooling in Visual Studio (e.g. XAML Designer, Code editing, etc...)?  No\r\n\r\n **Problem description:** Build failure when suitable .NET SDK is not installed\r\n\r\n**Repro steps:**\r\n1. New machine with Win10 1909 (hence .NET 4.8).\r\n2. Setup machine per [WPF developer guide](https://github.com/dotnet/wpf/blob/master/Documentation/developer-guide.md).\r\n3. Fork/clone master branch of dotnet/wpf.\r\n4. Obtain fix for #2297 \r\n5. build \r\n \r\n **Actual behavior:** <!-- callstack for crashes / exceptions -->\r\n D:\\repos\\wpf\\eng\\WpfArcadeSdk\\tools\\InjectModuleInitializer.targets(372,5): error MSB4044: The \"ILDasmTask\" task was not given a value for the required parameter \"ILDAsm\". [D:\\repos\\wpf\\src\\Microsoft.DotNet.Wpf\\src\\PresentationCore\\PresentationCore.csproj]\r\n\r\n **Expected behavior:** No failure\r\n \r\nThis failure goes away after installing .NET 4.6.1 SDK, which makes a version of ildasm.exe visible to\r\nPresentationCore.csproj.  Note that ilasm.exe is already visible (at C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\ILAsm.exe) before installing a .NET SDK\r\n","Url":"https://github.com/dotnet/wpf/issues/2298","RelatedDescription":"Open issue \"Remove dependency on .NET IL tools\" (#2298)"},{"Id":"535437082","IsPullRequest":false,"CreatedAt":"2019-12-10T01:34:54","Actor":"SamBent","Number":"2297","RawContent":null,"Title":"Remove dependency on .NET include file","State":"open","Body":"* .NET Core Version: (e.g. 3.0 Preview1, or daily build number, use `dotnet --info`) 5.0.0-alpha.1.19564.1\r\n* Windows version: (`winver`) 1909 (OS Build 10.0.18363.476)\r\n* Does the bug reproduce also in WPF for .NET Framework 4.8?: No\r\n* Is this bug related specifically to tooling in Visual Studio (e.g. XAML Designer, Code editing, etc...)? No\r\n\r\n **Problem description:**  Build failure when suitable .NET SDK is not installed.\r\n \r\n**Repro steps:**\r\n1. New machine with Win10 1909 (hence .NET 4.8).\r\n2. Setup machine per [WPF developer guide](https://github.com/dotnet/wpf/blob/master/Documentation/developer-guide.md).\r\n3. Fork/clone master branch of dotnet/wpf.\r\n4. build \r\n\r\n **Actual behavior:** \r\nD:\\repos\\wpf\\src\\Microsoft.DotNet.Wpf\\src\\DirectWriteForwarder\\CPP\\DWriteWrapper\\Common.h(15,10): fatal error C1083: Cannot open include file: 'CorError.h': No such file or directory [D:\\repos\\wpf\\src\\Microsoft.DotNet.Wpf\\src\\DirectWriteForwarder\\DirectWriteForwarder.vcxproj]\r\n \r\n **Expected behavior:** No build failure.\r\n \r\nThis failure goes away after installing .NET 4.6.1 SDK, which makes a version of CorError.h visible to \r\nDirectWriteForwarder.vcxproj.","Url":"https://github.com/dotnet/wpf/issues/2297","RelatedDescription":"Open issue \"Remove dependency on .NET include file\" (#2297)"},{"Id":"534572314","IsPullRequest":true,"CreatedAt":"2019-12-10T00:38:16","Actor":"dotMorten","Number":"2292","RawContent":null,"Title":"Doc was still referring to 3.0 preview 1.","State":"closed","Body":"Updated to refer to 3.1","Url":"https://github.com/dotnet/wpf/pull/2292","RelatedDescription":"Closed or merged PR \"Doc was still referring to 3.0 preview 1.\" (#2292)"},{"Id":"535402741","IsPullRequest":false,"CreatedAt":"2019-12-09T23:40:02","Actor":"vatsan-madhavan","Number":"2296","RawContent":null,"Title":"Use Production C++ Tools in release/3.1 branch","State":"open","Body":"- Switch to use production C++ tools that are ambient to the build machine, instead of privatized C++ tools \r\n  - Dev/local builds would rely on tools from Dev16.4+ \r\n- Update tools.dotnet in global.json to 3.1.100\r\n\r\nThis change is being proposed based on a plan agreed with @tgani-msft and @jamshedd to move the LTS branch away from using private tools. \r\n\r\nThis was the plan: \r\n\r\n- Starts out with privatized tools (same as 3.0) \r\n- Switches to Dev 16.4 P1 when it becomes available (timing wise, this lines up with 3.0 RTM, roughly). \r\n- (not-critical) At 3.1 RTM, it will likely switch to using 16.4 RTM (3.1 and 16.4 schedules are lined up). \r\n- Steady State: 3.1 will use shipping tools, not private tools. ","Url":"https://github.com/dotnet/wpf/issues/2296","RelatedDescription":"Open issue \"Use Production C++ Tools in release/3.1 branch\" (#2296)"},{"Id":"534925110","IsPullRequest":true,"CreatedAt":"2019-12-09T14:03:14","Actor":"dotnet-maestro[bot]","Number":"2295","RawContent":null,"Title":"[master] Update dependencies from dnceng/internal/dotnet-wpf-int","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:46a15fe4-6c2c-480d-9cdd-08d71053b252)\r\n## From https://dev.azure.com/dnceng/internal/_git/dotnet-wpf-int\r\n- **Build**: 20191208.2\r\n- **Date Produced**: 12/8/2019 3:52 PM\r\n- **Commit**: c5e317b275dcc297b11f761003261d0032e176c3\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Wpf.DncEng** -> 5.0.0-alpha.1.19608.2\r\n\r\n[marker]: <> (End:46a15fe4-6c2c-480d-9cdd-08d71053b252)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/2295","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dnceng/internal/dotnet-wpf-int\" (#2295)"},{"Id":"534826405","IsPullRequest":false,"CreatedAt":"2019-12-09T10:18:11","Actor":"JosefNemec","Number":"2294","RawContent":null,"Title":"Laggy user experience when using VRR display","State":"open","Body":"* .NET Core Version 3.1\r\n* Windows version: 1903\r\n* Does the bug reproduce also in WPF for .NET Framework 4.8?: Yes\r\n\r\n**Problem description:**\r\n\r\nWhen using display with variable refresh rate (I only tested it on G-Sync one, but my guess is that the issue will occur on FreeSync too due to the nature of this behavior) the general user experience is not smooth and feels very unresponsive. The issue is that WPF (being DirectX application) is picked up by the display driver and display refresh is adjusted based on framerate output of WPF. However since WPF's framerate is usually bellow 60, this has a big impact on general responsiveness of the interface because even things like moving mouse will be noticeable stuttery. More so if user has display with high refresh rate (like 144Hz), the switch to and from WPF application can be quite jarring.\r\n \r\n**Expected behavior:**\r\n \r\nWPF's framerate is not picked up by the graphics driver and refresh rate stays static when using said app. For example I didn't notice this being an issue with UWP or other desktop applications with accelerated GPU rendering.\r\n\r\nI understand that technically this is working as intended, but in my opinion it doesn't make much sense for WPF application to be VRR compatible, given the type of applications that are generally created with it. I think it would make more sense to have VRR compatibly turned off by default, but have an option to enable old behavior if possible.\r\n\r\nI think this shouldn't be taken lightly since VRR display use is on rise and it's become de facto standard in gaming related PCs (I develop gaming related app and quite a few users noticed this issue).\r\n\r\n**Minimal repro:**\r\n\r\nThis simple example can be used to reproduce the behavior. Just moving mouse over list box items will force display to render at about 30 fps.\r\n\r\n```\r\n<Window x:Class=\"WpfApp1.MainWindow\"\r\n        xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"\r\n        xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\"\r\n        Height=\"450\" Width=\"800\">\r\n    <Grid>\r\n        <ListBox>\r\n            <ListBoxItem>test</ListBoxItem>\r\n            <ListBoxItem>test</ListBoxItem>\r\n            <ListBoxItem>test</ListBoxItem>\r\n        </ListBox>\r\n    </Grid>\r\n</Window>\r\n```","Url":"https://github.com/dotnet/wpf/issues/2294","RelatedDescription":"Open issue \"Laggy user experience when using VRR display\" (#2294)"},{"Id":"534579050","IsPullRequest":true,"CreatedAt":"2019-12-08T18:13:54","Actor":"dotMorten","Number":"2293","RawContent":null,"Title":"Updated target framework path to 3.1","State":"open","Body":"Fixed the reference path","Url":"https://github.com/dotnet/wpf/pull/2293","RelatedDescription":"Open PR \"Updated target framework path to 3.1\" (#2293)"},{"Id":"534540581","IsPullRequest":true,"CreatedAt":"2019-12-08T13:32:23","Actor":"dotnet-maestro[bot]","Number":"2291","RawContent":null,"Title":"[master] Update dependencies from dnceng/internal/dotnet-wpf-int","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:46a15fe4-6c2c-480d-9cdd-08d71053b252)\r\n## From https://dev.azure.com/dnceng/internal/_git/dotnet-wpf-int\r\n- **Build**: 20191207.6\r\n- **Date Produced**: 12/8/2019 1:10 AM\r\n- **Commit**: b080aa1ad0f1e26114f1f71625e84fda31f0e292\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Wpf.DncEng** -> 5.0.0-alpha.1.19607.6\r\n\r\n[marker]: <> (End:46a15fe4-6c2c-480d-9cdd-08d71053b252)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/2291","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dnceng/internal/dotnet-wpf-int\" (#2291)"},{"Id":"534486421","IsPullRequest":false,"CreatedAt":"2019-12-08T03:27:27","Actor":"lindexi","Number":"2290","RawContent":null,"Title":"How to build this project in github action","State":"open","Body":"I create a github action and call the build.cmd but build failed.\r\n\r\nThis is my action file https://github.com/dotnet-campus/wpf/pull/1/files\r\n\r\nAnd this is the build info: https://github.com/dotnet-campus/wpf/pull/1/checks?check_run_id=338492387\r\n\r\nCould you help me to build WPF project","Url":"https://github.com/dotnet/wpf/issues/2290","RelatedDescription":"Open issue \"How to build this project in github action\" (#2290)"},{"Id":"534400977","IsPullRequest":true,"CreatedAt":"2019-12-07T13:32:50","Actor":"dotnet-maestro[bot]","Number":"2289","RawContent":null,"Title":"[master] Update dependencies from dnceng/internal/dotnet-wpf-int","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:46a15fe4-6c2c-480d-9cdd-08d71053b252)\r\n## From https://dev.azure.com/dnceng/internal/_git/dotnet-wpf-int\r\n- **Build**: 20191206.4\r\n- **Date Produced**: 12/7/2019 1:03 AM\r\n- **Commit**: 8429f487bb3b9dcc86b211ad0b98bef9301c0c04\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Wpf.DncEng** -> 5.0.0-alpha.1.19606.4\r\n\r\n[marker]: <> (End:46a15fe4-6c2c-480d-9cdd-08d71053b252)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/2289","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dnceng/internal/dotnet-wpf-int\" (#2289)"},{"Id":"534066599","IsPullRequest":false,"CreatedAt":"2019-12-06T15:17:41","Actor":"Proxaaa","Number":"2286","RawContent":null,"Title":"An implicit style located in merged resource dictionary is not applied to the first control of the target type if the main resource dictionary is empty","State":"open","Body":"* .NET Core Version: 3.0\r\n* Windows version: Version 1903\r\n* Does the bug reproduce also in WPF for .NET Framework 4.8?: Yes\r\n\r\n **Problem description:**\r\nHello,\r\n\r\nPlease try the following setup:\r\n\r\n```\r\n<Window.Resources>\r\n    <ResourceDictionary>\r\n        <!--<system:String x:Key=\"DummyString\">Dummy</system:String>-->\r\n        <ResourceDictionary.MergedDictionaries>\r\n            <ResourceDictionary>\r\n                <Style TargetType=\"{x:Type TextBlock}\">\r\n                    <Setter Property=\"Text\" Value=\"Test\" />\r\n                </Style>\r\n            </ResourceDictionary>\r\n        </ResourceDictionary.MergedDictionaries>\r\n    </ResourceDictionary>\r\n</Window.Resources>\r\n\r\n<StackPanel>\r\n    <TextBlock />\r\n    <TextBlock />\r\n    <TextBlock />\r\n</StackPanel>\r\n```\r\n\r\n\r\n **Actual behavior:** \r\nThe first TextBlock there does not have its Text set to \"Test\". If I uncomment the DummyString resource it works as expected.\r\n \r\n **Expected behavior:**\r\nThe first TextBlock there has its Text set to \"Test\".\r\n \r\n **Minimal repro:**\r\nSee https://github.com/Proxaaa/MergeTest/tree/master","Url":"https://github.com/dotnet/wpf/issues/2286","RelatedDescription":"Open issue \"An implicit style located in merged resource dictionary is not applied to the first control of the target type if the main resource dictionary is empty\" (#2286)"},{"Id":"533973440","IsPullRequest":true,"CreatedAt":"2019-12-06T13:27:51","Actor":"dotnet-maestro[bot]","Number":"2285","RawContent":null,"Title":"[master] Update dependencies from dnceng/internal/dotnet-wpf-int","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:46a15fe4-6c2c-480d-9cdd-08d71053b252)\r\n## From https://dev.azure.com/dnceng/internal/_git/dotnet-wpf-int\r\n- **Build**: 20191205.11\r\n- **Date Produced**: 12/6/2019 1:45 AM\r\n- **Commit**: 292cdbc0db71ef4d25a0f5d263e564b71f04ac46\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Wpf.DncEng** -> 5.0.0-alpha.1.19605.11\r\n\r\n[marker]: <> (End:46a15fe4-6c2c-480d-9cdd-08d71053b252)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/2285","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dnceng/internal/dotnet-wpf-int\" (#2285)"},{"Id":"533678120","IsPullRequest":true,"CreatedAt":"2019-12-06T01:23:05","Actor":"dotnet-maestro[bot]","Number":"2284","RawContent":null,"Title":"[release/3.1] Update dependencies from dotnet/winforms","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:fd5f4619-cca3-4e12-8f56-08d72a4ce301)\r\n## From https://github.com/dotnet/winforms\r\n- **Build**: 20191205.5\r\n- **Date Produced**: 12/5/2019 10:05 PM\r\n- **Commit**: 9483a88b7764a74d71cbd449de6c56c1d5e0af21\r\n- **Branch**: refs/heads/release/3.1\r\n- **Updates**:\r\n  - **Microsoft.Private.Winforms** -> 4.8.1-servicing.19605.5\r\n\r\n[marker]: <> (End:fd5f4619-cca3-4e12-8f56-08d72a4ce301)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/2284","RelatedDescription":"Closed or merged PR \"[release/3.1] Update dependencies from dotnet/winforms\" (#2284)"},{"Id":"533580773","IsPullRequest":true,"CreatedAt":"2019-12-05T21:36:54","Actor":"mmitche","Number":"2283","RawContent":null,"Title":"Move to 3.1.100 RTM sdk","State":"closed","Body":"","Url":"https://github.com/dotnet/wpf/pull/2283","RelatedDescription":"Closed or merged PR \"Move to 3.1.100 RTM sdk\" (#2283)"},{"Id":"533531729","IsPullRequest":true,"CreatedAt":"2019-12-05T18:54:17","Actor":"vatsan-madhavan","Number":"2282","RawContent":null,"Title":"Fix STATUS_ILLEGAL_INSTRUCTION crash in win-x86 on some Xeon CPU's","State":"open","Body":"Fixes #2259, #2296\r\n\r\nMatching internal PR at https://dev.azure.com/dnceng/internal/_git/dotnet-wpf-int/pullrequest/4692?_a=overview\r\n\r\n### Description \r\n\r\n#### Part A\r\n- The C++ Tools prior VS 2019 16.4 has a bug in detecting AVX-512 support (512-bit extensions to 256-bit Advanced Vector Extensions SIMD instructions for x86 ISA). It reports support to be present incorrectly on some Xeon processors when the support is not available. \r\n- It results in a `STATUS_ILLEGAL_INSTRUCTION` crash when running x86 WPF apps on certain Xeon processors. \r\n- The fix is to simply recompile WPF using a newer 16.4 compiler tools. \r\n\r\n#### Part B\r\n\r\n- Switch to use production C++ tools that are ambient to the build machine, instead of privatized C++ tools \r\n  - Dev/local builds would rely on tools from Dev16.4+ \r\n- Update tools.dotnet in global.json to 3.1.100\r\n\r\nThis change is being proposed based on a plan to migrate to production tools that was agreed with @tgani-msft and @jamshedd to move the LTS branch away from using private tools. \r\n\r\nThis was the plan: \r\n\r\n- Starts out with privatized tools (same as 3.0) \r\n- Switches to Dev 16.4 P1 when it becomes available (timing wise, this lines up with 3.0 RTM, roughly). \r\n- (not-critical) At 3.1 RTM, it will likely switch to using 16.4 RTM (3.1 and 16.4 schedules are lined up). \r\n- Steady State: 3.1 will use shipping tools, not private tools. \r\n\r\n### Customer Impact \r\n\r\n#### Part A\r\n- Fixes a bad crash that prevents WPF from being used on a class of machines. \r\n\r\n#### Part B \r\n- Ship product built using production tools\r\n- libraries etc. could have fixes/updates (incl. security updates) that are delivered seamlessly when using ambient tools supplied by the build machines. \r\n\r\n### Regression \r\n\r\nYes - #2259 is a regression relative to .NET Framework. \r\n\r\n### Risk\r\nLow\r\n\r\n- All available WPF tests have been run on bits compiled with the new toolset, and no regressions have been found. \r\n- No functional changes are being made. \r\n- The customer who reported #2259 has verified that the new compiler correctly detects AVX-512 support\r\n  - This was verified using a test application, rather than verifying a private build of WPF directly. ","Url":"https://github.com/dotnet/wpf/pull/2282","RelatedDescription":"Open PR \"Fix STATUS_ILLEGAL_INSTRUCTION crash in win-x86 on some Xeon CPU's\" (#2282)"},{"Id":"533438131","IsPullRequest":false,"CreatedAt":"2019-12-05T15:54:03","Actor":"KirillOsenkov","Number":"2281","RawContent":null,"Title":"MarkupCompilePass2 shouldn't zero GeneratedInternalTypeHelper.g.cs","State":"open","Body":"This is for .NET Framework but it looks like it might be a problem for .NET Core as well.\r\n\r\nSometimes (and under circumstances unclear to me) MarkupCompilePass2 decides that the internal type helper is not necessary and it zeroes out the file:\r\n\r\nhttps://github.com/dotnet/wpf/blob/1570c84797250fcb0efa1f00d4d7c14c694a6213/src/Microsoft.DotNet.Wpf/src/PresentationBuildTasks/Microsoft/Build/Tasks/Windows/MarkupCompilePass2.cs#L663-L687\r\n\r\nFrom what I can see this is a race condition with MarkupCompilePass1 and/or design-time builds which write into the file. \r\n\r\nThe problem is that the presence or absence of the `GeneratedInternalTypeHelper` class in the assembly changes its public API. In scenarios where reference assemblies are used for better incremental builds (by setting `ProduceReferenceAssembly` property to `true`) this public API change results in a different reference assembly, thus invalidating the entire dependency tree and causing all dependent projects to rebuild unnecessarily.\r\n\r\nI'm not entirely certain whether this generated type is really required and when it is actually used, and why is it generated in the first place (nothing in the file looks like it couldn't be in a framework type). But if we are generating it, we should always be generating it deterministically, such that the public API surface doesn't flip flop between having this type and not having it.\r\n\r\nSee related: \r\nhttps://github.com/microsoft/msbuild/issues/4217","Url":"https://github.com/dotnet/wpf/issues/2281","RelatedDescription":"Open issue \"MarkupCompilePass2 shouldn't zero GeneratedInternalTypeHelper.g.cs\" (#2281)"},{"Id":"533346782","IsPullRequest":true,"CreatedAt":"2019-12-05T13:34:12","Actor":"dotnet-maestro[bot]","Number":"2280","RawContent":null,"Title":"[master] Update dependencies from dnceng/internal/dotnet-wpf-int","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:46a15fe4-6c2c-480d-9cdd-08d71053b252)\r\n## From https://dev.azure.com/dnceng/internal/_git/dotnet-wpf-int\r\n- **Build**: 20191204.4\r\n- **Date Produced**: 12/5/2019 12:59 AM\r\n- **Commit**: 11f1a0bacb2ccee8ff2373df88c8279a05f3db7d\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Wpf.DncEng** -> 5.0.0-alpha.1.19604.4\r\n\r\n[marker]: <> (End:46a15fe4-6c2c-480d-9cdd-08d71053b252)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/2280","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dnceng/internal/dotnet-wpf-int\" (#2280)"},{"Id":"533290734","IsPullRequest":false,"CreatedAt":"2019-12-05T11:36:17","Actor":"weitzhandler","Number":"2279","RawContent":null,"Title":"Provide more information with the ValidationRule","State":"closed","Body":"The `ValidationRule` class allows attaching `ValidationRule`s to a binding in WPF. The limitation with them are that they can only operate on the constant object produced by the binding.\r\n\r\nMy suggestion is that we add another property(s) to them, that provides the current `Binding` or `BindingExpression` as well, and/or maybe additional information about the current DataContext.  \r\n  \r\nThis would allow for more advanced scenarios, such as inter-property validation, or dynamic validation using the object's data annotations attributes.  \r\n\r\nI know the immediate response is \"use `INotifyDataErrorInfo`, but sometimes you just need to bind directly to the POCO model and can't or don't want to implement that interface in the model.\r\nHaving those `ValidationRule`s provide further info, would allow creating a general `DataAnnotationsValidationRule` that will retrieve the attributes for that property, without having to contaminate the POCO models with validation logic.","Url":"https://github.com/dotnet/wpf/issues/2279","RelatedDescription":"Closed issue \"Provide more information with the ValidationRule\" (#2279)"},{"Id":"533176238","IsPullRequest":false,"CreatedAt":"2019-12-05T07:33:41","Actor":"dragmz","Number":"2278","RawContent":null,"Title":"TabControl tab get selected when a Button is pressed on a ToolBar","State":"open","Body":".NET Core Version: 3.0 (also .NET Framework 4.7.1 - 4.8 but not 4.6.2)\r\nWindows version: 1903\r\n\r\n1. Create a new WPF App and use the following XAML for the window (no extra code behind):\r\n\r\n````xaml\r\n<Window x:Class=\"WpfApp.MainWindow\"\r\n        xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"\r\n        xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\"\r\n        Title=\"MainWindow\" Height=\"200\" Width=\"300\">\r\n    <Grid>\r\n        <TabControl>\r\n            <TabItem Header=\"Tab\">\r\n                <ToolBarTray>\r\n                    <ToolBar>\r\n                        <Button>Button</Button>\r\n                    </ToolBar>\r\n                </ToolBarTray>\r\n            </TabItem>\r\n            <TabItem Header=\"Tab\">\r\n                <ToolBarTray>\r\n                    <ToolBar>\r\n                        <Button>Button</Button>\r\n                    </ToolBar>\r\n                </ToolBarTray>\r\n            </TabItem>\r\n        </TabControl>\r\n    </Grid>\r\n</Window>\r\n````\r\n\r\n2. Run the app and switch to the second Tab\r\n3. Switch back to the first Tab and press Button\r\n\r\nThe TabControl changes the currently selected tab to the second tab while it's expected to stay on the first tab:\r\n\r\n![image](https://i.stack.imgur.com/Q9sDH.gif)\r\n\r\nA workaround is to set focused element for the Window:\r\n\r\n````xaml\r\n<Window x:Class=\"WpfApp.MainWindow\"\r\n        xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"\r\n        xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\"\r\n        Title=\"MainWindow\" Height=\"200\" Width=\"300\"\r\n        FocusManager.FocusedElement=\"{Binding ElementName=tabControl}\">\r\n    <Grid>\r\n        <TabControl x:Name=\"tabControl\">\r\n            <TabItem Header=\"Tab\">\r\n                <ToolBarTray>\r\n                    <ToolBar>\r\n                        <Button>Button</Button>\r\n                    </ToolBar>\r\n                </ToolBarTray>\r\n            </TabItem>\r\n            <TabItem Header=\"Tab\">\r\n                <ToolBarTray>\r\n                    <ToolBar>\r\n                        <Button>Button</Button>\r\n                    </ToolBar>\r\n                </ToolBarTray>\r\n            </TabItem>\r\n        </TabControl>\r\n    </Grid>\r\n</Window>\r\n````\r\n","Url":"https://github.com/dotnet/wpf/issues/2278","RelatedDescription":"Open issue \"TabControl tab get selected when a Button is pressed on a ToolBar\" (#2278)"},{"Id":"532875434","IsPullRequest":false,"CreatedAt":"2019-12-05T00:29:00","Actor":"njannink","Number":"2277","RawContent":null,"Title":"After update to VS 16.4 projects stop compiling","State":"closed","Body":"After I updated to 16.4 my wpf projects stopped compiling with the following error:\r\n\r\n_Microsoft.WinFX.targets(225,9): error MC1000: Unknown build error, 'Could not find assembly 'mscorlib, Version=2.0.5.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e'. Either explicitly load this assembly using a method such as LoadFromAssemblyPath() or use a MetadataAssemblyResolver that returns a valid assembly.'_\r\n\r\nEverything was working fine in 16.3\r\n\r\nMy project file:\r\n\r\n```\r\n<Project Sdk=\"Microsoft.NET.Sdk.WindowsDesktop\">\r\n\r\n  <PropertyGroup>\r\n    <TargetFramework>net472</TargetFramework>\r\n    <UseWPF>true</UseWPF>\r\n    <RootNamespace>xxx.UI</RootNamespace>\r\n    <AssemblyName>xxx.UI</AssemblyName>\r\n  </PropertyGroup>\r\n\r\n    <ItemGroup>\r\n    <PackageReference Include=\"BracketPipe\" Version=\"0.7.7232.28997\" />\r\n    <PackageReference Include=\"DynamicData\" Version=\"6.13.21\" />\r\n    <PackageReference Include=\"Markdig.Wpf\" Version=\"0.3.1\" />\r\n    <PackageReference Include=\"Microsoft.Xaml.Behaviors.Wpf\" Version=\"1.1.3\" />\r\n    <PackageReference Include=\"RtfPipe\" Version=\"1.0.7246.39337\" />\r\n  </ItemGroup>\r\n\r\n  <ItemGroup>\r\n    <None Remove=\"Resources\\**\\*.*\" />\r\n    <Resource Include=\"Resources\\**\\*.*\" />\r\n  </ItemGroup>\r\n\r\n  <ItemGroup>\r\n    <Compile Update=\"Properties\\Resources.Designer.cs\">\r\n      <DesignTime>True</DesignTime>\r\n      <AutoGen>True</AutoGen>\r\n      <DependentUpon>Resources.resx</DependentUpon>\r\n    </Compile>\r\n  </ItemGroup>\r\n\r\n  <ItemGroup>\r\n    <EmbeddedResource Update=\"Properties\\Resources.resx\">\r\n      <Generator>PublicResXFileCodeGenerator</Generator>\r\n      <LastGenOutput>Resources.Designer.cs</LastGenOutput>\r\n    </EmbeddedResource>\r\n  </ItemGroup>\r\n</Project>\r\n```","Url":"https://github.com/dotnet/wpf/issues/2277","RelatedDescription":"Closed issue \"After update to VS 16.4 projects stop compiling\" (#2277)"},{"Id":"532863848","IsPullRequest":false,"CreatedAt":"2019-12-04T18:39:30","Actor":"scalablecory","Number":"2276","RawContent":null,"Title":"Using a BackgroundVisualHost causes a crash in WPF (example repo available)","State":"open","Body":"_From @adscott1982 on Tuesday, December 3, 2019 5:04:20 PM_\r\n\r\nShowing / hiding UI on a non-main thread dispatcher will cause WPF to crash.\r\n\r\nThis problem is present on .NET Core 3.0, Framework 4.8, 4.7.2 and 4.7.0 and perhaps others.\r\n\r\nUsing the technique in the following blog post used to work, but will now eventually cause a crash in WPF:\r\n\r\nhttp://gettinggui.com/creating-a-busy-indicator-in-a-separate-thread-in-wpf/\r\n\r\nThis issue has only been seen since around September 2019.\r\n\r\nA repo demonstrating the issue is here, and will usually cause the issue within a couple of minutes:\r\n\r\nhttps://github.com/adscott1982/BackgroundUIThreadError\r\n\r\nMy system is:\r\n\r\nWindows 10 Professional 1909\r\nVisual Studio 2019 Professional\r\nNvidia Quadro P400\r\n\r\nThere are various different exception messages that will be shown when the issue presents itself. I will gather up as many as I can and attach them as text files.\r\n\r\n[Catastrophic failure.txt](https://github.com/dotnet/core/files/3917794/Catastrophic.failure.txt)\r\n[internal error in the dot net runtime.txt](https://github.com/dotnet/core/files/3917810/internal.error.in.the.dot.net.runtime.txt)\r\n[render thread failure.txt](https://github.com/dotnet/core/files/3917837/render.thread.failure.txt)\r\n[missing end command.txt](https://github.com/dotnet/core/files/3917839/missing.end.command.txt)\r\n\r\n\r\n_Copied from original issue: dotnet/core#3948_","Url":"https://github.com/dotnet/wpf/issues/2276","RelatedDescription":"Open issue \"Using a BackgroundVisualHost causes a crash in WPF (example repo available)\" (#2276)"},{"Id":"532679890","IsPullRequest":true,"CreatedAt":"2019-12-04T13:29:10","Actor":"dotnet-maestro[bot]","Number":"2275","RawContent":null,"Title":"[master] Update dependencies from dnceng/internal/dotnet-wpf-int","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:46a15fe4-6c2c-480d-9cdd-08d71053b252)\r\n## From https://dev.azure.com/dnceng/internal/_git/dotnet-wpf-int\r\n- **Build**: 20191203.4\r\n- **Date Produced**: 12/4/2019 1:04 AM\r\n- **Commit**: 9078ec67020253a103fed694528f6093ba165a8c\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Wpf.DncEng** -> 5.0.0-alpha.1.19603.4\r\n\r\n[marker]: <> (End:46a15fe4-6c2c-480d-9cdd-08d71053b252)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/2275","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dnceng/internal/dotnet-wpf-int\" (#2275)"},{"Id":"532573416","IsPullRequest":false,"CreatedAt":"2019-12-04T10:00:36","Actor":"olivegamestudio","Number":"2274","RawContent":null,"Title":"Updating to 16.4 from 16.3.x causes build issues with WPF project file.","State":"open","Body":"When building a WPF project the following error is shown, this built fine in the last 16.3.x version that was released.\r\n\r\n> C:\\Program Files\\dotnet\\sdk\\3.1.100\\Sdks\\Microsoft.NET.Sdk.WindowsDesktop\\targets\\Microsoft.WinFX.targets(225,9): error MC1000: Unknown build error, 'Could not find assembly 'mscorlib, Version=2.0.5.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e'. Either explicitly load this assembly using a method such as LoadFromAssemblyPath() or use a MetadataAssemblyResolver that returns a valid assembly.'\r\n\r\nThe project file:\r\n\r\n```\r\n<Project Sdk=\"Microsoft.NET.Sdk.WindowsDesktop\">\r\n\r\n  <PropertyGroup>\r\n    <OutputType>Library</OutputType>\r\n    <TargetFramework>net461</TargetFramework>\r\n    <UseWPF>true</UseWPF>\r\n    <Platforms>x86</Platforms>\r\n    <GeneratePackageOnBuild>false</GeneratePackageOnBuild>\r\n    <Version>1.0.0</Version>\r\n    <Description></Description>\r\n    <FileVersion>1.0.0.0</FileVersion>\r\n    <AssemblyVersion>1.0.0.0</AssemblyVersion>\r\n    <ApplicationIcon />\r\n    <StartupObject />\r\n  </PropertyGroup>\r\n\r\n</Project>\r\n```","Url":"https://github.com/dotnet/wpf/issues/2274","RelatedDescription":"Open issue \"Updating to 16.4 from 16.3.x causes build issues with WPF project file.\" (#2274)"}],"ResultType":"GitHubIssue"}},"RunOn":"2019-12-11T05:30:56.7850269Z","RunDurationInMilliseconds":860}