{"Data":{"GitHub":{"Issues":[{"Id":"392435842","IsPullRequest":true,"CreatedAt":"2018-12-19T04:25:21","Actor":"jignparm","Number":"1922","RawContent":null,"Title":"API changes for GPU support","State":"open","Body":"Fixes #1834 \r\n\r\nAdd CUDA 10.0 GPU execution support\r\n\r\nAdd Linux support\r\n\r\nAdd Mac support\r\n","Url":"https://github.com/dotnet/machinelearning/pull/1922","RelatedDescription":"Open PR \"API changes for GPU support\" (#1922)"},{"Id":"392421899","IsPullRequest":false,"CreatedAt":"2018-12-19T03:05:06","Actor":"mzhukovs","Number":"1921","RawContent":null,"Title":"Plans for EDA/Data Viz?","State":"open","Body":"Python ML/plotting libraries provide great ways to support Exploratory Data Analysis (EDA) with some awesome charting capabilities - any plans in this area for ML.NET?","Url":"https://github.com/dotnet/machinelearning/issues/1921","RelatedDescription":"Open issue \"Plans for EDA/Data Viz?\" (#1921)"},{"Id":"392395822","IsPullRequest":true,"CreatedAt":"2018-12-19T00:47:44","Actor":"Zruty0","Number":"1920","RawContent":null,"Title":"PredictionFunction becomes PredictionEngine","State":"open","Body":"Fixes #1761 \r\nFixes #1819 \r\n\r\nRenamed MakePredictionFunction to CreatePredictionEngine, and exposed the schema comprehension parameters to the factory method.\r\n\r\nAdded a method to `mlContext.Model` to create a prediction engine.","Url":"https://github.com/dotnet/machinelearning/pull/1920","RelatedDescription":"Open PR \"PredictionFunction becomes PredictionEngine\" (#1920)"},{"Id":"392387962","IsPullRequest":false,"CreatedAt":"2018-12-19T00:08:03","Actor":"Ivanidzo4ka","Number":"1919","RawContent":null,"Title":"We don't have backward compatibility with old models if they include normalize transform","State":"open","Body":"Try load old model with normalize transform. You get exception what it can't be loaded.\r\nWe broke this functionality during conversion to IEstimator.","Url":"https://github.com/dotnet/machinelearning/issues/1919","RelatedDescription":"Open issue \"We don't have backward compatibility with old models if they include normalize transform\" (#1919)"},{"Id":"392370919","IsPullRequest":true,"CreatedAt":"2018-12-18T22:56:53","Actor":"Ivanidzo4ka","Number":"1918","RawContent":null,"Title":"Load old models with normalizer.","State":"open","Body":"- [x] Add issue. Fixes https://github.com/dotnet/machinelearning/issues/1919\r\n- [x] Add test.\r\n","Url":"https://github.com/dotnet/machinelearning/pull/1918","RelatedDescription":"Open PR \"Load old models with normalizer.\" (#1918)"},{"Id":"392275479","IsPullRequest":true,"CreatedAt":"2018-12-18T22:04:28","Actor":"yaeldekel","Number":"1905","RawContent":null,"Title":"Fix LDA bug that ignores per-column arguments","State":"closed","Body":"Fixes #1904 .","Url":"https://github.com/dotnet/machinelearning/pull/1905","RelatedDescription":"Closed or merged PR \"Fix LDA bug that ignores per-column arguments\" (#1905)"},{"Id":"392274894","IsPullRequest":false,"CreatedAt":"2018-12-18T22:04:28","Actor":"yaeldekel","Number":"1904","RawContent":null,"Title":"LDA transform ignores per-column arguments","State":"closed","Body":"The constructor that instantiates the transform from the Arguments object ignores the arguments defined per column and just uses the global values defined in the args.","Url":"https://github.com/dotnet/machinelearning/issues/1904","RelatedDescription":"Closed issue \"LDA transform ignores per-column arguments\" (#1904)"},{"Id":"392353868","IsPullRequest":true,"CreatedAt":"2018-12-18T22:00:05","Actor":"Zruty0","Number":"1917","RawContent":null,"Title":"ISchema is now internal","State":"open","Body":"Addresses #1500\r\n\r\nColumnBindingsBase and ISchema are now internal. \r\nSchema and ColumnBindingsBase no longer implement ISchema.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/1917","RelatedDescription":"Open PR \"ISchema is now internal\" (#1917)"},{"Id":"392349570","IsPullRequest":false,"CreatedAt":"2018-12-18T21:47:35","Actor":"rogancarr","Number":"1916","RawContent":null,"Title":"Add support for signing models","State":"open","Body":"When a model is passed to a third party, it would be nice to have a guarantee for where the model originated, and that its parameters have not been modified. I propose adding a method for signing a model in such a way that the original developer can be identified an the contents can be shown to be unchanged.\r\n\r\nRelated to #511 ","Url":"https://github.com/dotnet/machinelearning/issues/1916","RelatedDescription":"Open issue \"Add support for signing models\" (#1916)"},{"Id":"392348895","IsPullRequest":false,"CreatedAt":"2018-12-18T21:45:32","Actor":"rogancarr","Number":"1915","RawContent":null,"Title":"Support adding metadata to models","State":"open","Body":"When a model is passed to a third party, information about the model, like the evaluation metrics, must be passed separately. It would be nice to have a supported way to encode metadata into models such that they can be visualized in an IDE and programatically extracted.\r\n\r\nRelated to #511 \r\nRelated to #1908 \r\nRelated to #1912 ","Url":"https://github.com/dotnet/machinelearning/issues/1915","RelatedDescription":"Open issue \"Support adding metadata to models\" (#1915)"},{"Id":"392348787","IsPullRequest":true,"CreatedAt":"2018-12-18T21:45:15","Actor":"abgoswam","Number":"1914","RawContent":null,"Title":"Separate assemblies for static extensions","State":"open","Body":"Fixes #1695 \r\n\r\n- Created separate assemblies to host the Static API extensions. Moved the Static API extensions to the appropriate assembly.\r\n- Requires adding [BestFriend] attribute in several places\r\n    \r\n1. Microsoft.ML.StaticPipe\r\n2. Microsoft.ML.LightGBM.StaticPipe\r\n3. Microsoft.ML.TensorFlow.StaticPipe\r\n4. Microsoft.ML.OnnxTransform.StaticPipe\r\n5. Microsoft.ML.HalLearners.StaticPipe\r\n\r\nNOTE: These assemblies are named  corresponding to nuget packages (with the Microsoft.ML prefix)  ","Url":"https://github.com/dotnet/machinelearning/pull/1914","RelatedDescription":"Open PR \"Separate assemblies for static extensions\" (#1914)"},{"Id":"392345332","IsPullRequest":false,"CreatedAt":"2018-12-18T21:34:46","Actor":"rogancarr","Number":"1913","RawContent":null,"Title":"Add tooling to measure bias metrics over datasets","State":"open","Body":"Bias and fairness in predictions are big concerns with deploying ML models, and bias can work its way into ML models through the datasets they are trained on**. It would be helpful for modelers to have tools to assist in calculating standard metrics for bias over training data.\r\n\r\n** Bias in the training data doesn't always translate evenly to the bias and fairness of the model's predictions, so we need separate evaluation metrics of bias and fairness for the model predictions (captured in #1911).\r\n\r\nRelated to #511 \r\nRelated to #1911 \r\nRelated to #1912 ","Url":"https://github.com/dotnet/machinelearning/issues/1913","RelatedDescription":"Open issue \"Add tooling to measure bias metrics over datasets\" (#1913)"},{"Id":"392337848","IsPullRequest":false,"CreatedAt":"2018-12-18T21:12:49","Actor":"rogancarr","Number":"1912","RawContent":null,"Title":"Add metadata of bias and fairness metrics to models","State":"open","Body":"Currently, we can use ML.NET to evaluate the performance of a model. However, when the model is passed to a third party, any metrics must be passed separately.\r\n\r\nIf you consider the bias and fairness metrics** to be properties of the model, then it makes sense to include them in the model. I expect this to be helpful in deployment, productionization, debugging, etc. Plus it would be nice to have properties of the model visible in an IDE and accessible programatically.\r\n\r\nRelated to #511\r\nRelated to #1911 \r\nRelated to #1908\r\n\r\n** e.g. over a dataset representative of the expected distribution of data to be seen by the model","Url":"https://github.com/dotnet/machinelearning/issues/1912","RelatedDescription":"Open issue \"Add metadata of bias and fairness metrics to models\" (#1912)"},{"Id":"392337059","IsPullRequest":false,"CreatedAt":"2018-12-18T21:10:33","Actor":"rogancarr","Number":"1911","RawContent":null,"Title":"Add an evaluator for Bias and Fairness metrics","State":"open","Body":"We currently have model evaluators that produce metrics on the predicted label. For practical use of machine learning, it is necessary to have a sense for any biases the model may propagate and any fairness issues the mode has. In this way, it would be great to have a standard evaluators for bias and fairness metrics.\r\n\r\nRelated to #511 ","Url":"https://github.com/dotnet/machinelearning/issues/1911","RelatedDescription":"Open issue \"Add an evaluator for Bias and Fairness metrics\" (#1911)"},{"Id":"392336144","IsPullRequest":true,"CreatedAt":"2018-12-18T21:07:49","Actor":"yaeldekel","Number":"1910","RawContent":null,"Title":"Make IStopWordsRemoverFactory return an IDataTransform","State":"open","Body":"Fixes #1909 .","Url":"https://github.com/dotnet/machinelearning/pull/1910","RelatedDescription":"Open PR \"Make IStopWordsRemoverFactory return an IDataTransform\" (#1910)"},{"Id":"392335902","IsPullRequest":false,"CreatedAt":"2018-12-18T21:07:08","Actor":"yaeldekel","Number":"1909","RawContent":null,"Title":"IStopWordsRemoverFactory returns null","State":"open","Body":"The implementations of CreateComponent() of the stop words removers return the IDataTransform as an IStopWordsRemoverTransform, which is null since the IDataTransform is actually a RowToRowMapperTransform.","Url":"https://github.com/dotnet/machinelearning/issues/1909","RelatedDescription":"Open issue \"IStopWordsRemoverFactory returns null\" (#1909)"},{"Id":"392326537","IsPullRequest":false,"CreatedAt":"2018-12-18T20:39:25","Actor":"rogancarr","Number":"1908","RawContent":null,"Title":"Add metadata of evaluation metrics to models","State":"open","Body":"Currently, we can use ML.NET to evaluate the performance of a model. However, when the model is passed to a third party, the evaluation metrics must be passed separately.\r\n\r\nIf you consider the evaluation metrics** to be properties of the model, then it makes sense to include them in the model. I expect this to be helpful in deployment, productionization, debugging, etc. Plus it would be nice to have properties of the model visible in an IDE and accessible programatically. \r\n\r\nRelated to #511 \r\n\r\n** e.g. over a dataset representative of the expected distribution of data to be seen by the model","Url":"https://github.com/dotnet/machinelearning/issues/1908","RelatedDescription":"Open issue \"Add metadata of evaluation metrics to models\" (#1908)"},{"Id":"392325428","IsPullRequest":false,"CreatedAt":"2018-12-18T20:35:53","Actor":"Zruty0","Number":"1907","RawContent":null,"Title":"One-time prediction without PredictionFunction","State":"open","Body":"This question has been asked a number of times now (recently in https://stackoverflow.com/questions/53837654/ml-net-makepredictionfunction-dynamic-type )\r\n\r\nEssentially, the users will sometimes need to perform the prediction without the ability to use schema comprehension to define the input/output classes. \r\n\r\nIn the API we have `IRowToRowMapper` that is performing the work under the hood: it takes a `Row` as an input, and outputs a `Row` with predictions. However, we don't have a good 'easy' way to 'make a `Row`'. Maybe we should have something public and similar to `SimpleRow` for this purpose?\r\n\r\ncc @TomFinley @yaeldekel ","Url":"https://github.com/dotnet/machinelearning/issues/1907","RelatedDescription":"Open issue \"One-time prediction without PredictionFunction\" (#1907)"},{"Id":"391992011","IsPullRequest":true,"CreatedAt":"2018-12-18T19:39:44","Actor":"TomFinley","Number":"1902","RawContent":null,"Title":"Internalize RoleMappedSchema and implications thereof","State":"closed","Body":"Internalization of everything related to role mapped schema, which includes schema-bindable mappers, much of the internal infrasturcture of evaluators, and so forth. As usual the commits are structured in such a way as only one \"group\" of code gets internalized at a time, with only the current last commit internalizing `RoleMappedSchema` itself.","Url":"https://github.com/dotnet/machinelearning/pull/1902","RelatedDescription":"Closed or merged PR \"Internalize RoleMappedSchema and implications thereof\" (#1902)"},{"Id":"392298832","IsPullRequest":false,"CreatedAt":"2018-12-18T19:22:25","Actor":"rogancarr","Number":"1906","RawContent":null,"Title":"Include confidence intervals for non-probabilistic scores","State":"open","Body":"For probabilistic classifiers, we get a sense for the confidence of a model's output from the probability. For other types of scorers (e.g. regression), we just get a raw score out. Oftentimes, consumers of ML models want to know how confident a model is in its prediction. Thus, it would be nice to output confidence intervals for predictions.\r\n\r\nThere are methods to generate confidence intervals for ML models, but those usually require a lot of hand tuning and a background in statistics. It would be nice to automate such techniques so that anybody could use them.\r\n\r\nRelated to #511 \r\n","Url":"https://github.com/dotnet/machinelearning/issues/1906","RelatedDescription":"Open issue \"Include confidence intervals for non-probabilistic scores\" (#1906)"},{"Id":"391931229","IsPullRequest":true,"CreatedAt":"2018-12-18T19:14:36","Actor":"Ivanidzo4ka","Number":"1896","RawContent":null,"Title":"Use seed specified for column in PcaTransform","State":"closed","Body":"Fixing this elite bug #1337. Fixes #1337.","Url":"https://github.com/dotnet/machinelearning/pull/1896","RelatedDescription":"Closed or merged PR \"Use seed specified for column in PcaTransform\" (#1896)"},{"Id":"391930971","IsPullRequest":false,"CreatedAt":"2018-12-18T19:02:45","Actor":"Anipik","Number":"1895","RawContent":null,"Title":"MurmurHash code slower on Netcoreapp3.0","State":"closed","Body":"MurmurHash function is slower on netcoreapp3.0 as compared netstandard. This is most probably due to codegen.\r\nThe numbers are\r\nsdk = 3.0.100-preview-009841\r\n``` ini\r\n\r\nBenchmarkDotNet=v0.11.3, OS=Windows 10.0.17134.471 (1803/April2018Update/Redstone4)\r\nIntel Xeon CPU E5-1650 v4 3.60GHz, 1 CPU, 12 logical and 6 physical cores\r\n.NET Core SDK=3.0.100-alpha1-009630\r\n  [Host]     : .NET Core 3.0.0-preview1-26928-03 (CoreCLR 4.6.26927.03, CoreFX 4.6.26927.03), 64bit RyuJIT\r\n  Job-GLYGMU : .NET Core 3.0.0-preview1-26928-03 (CoreCLR 4.6.26927.03, CoreFX 4.6.26927.03), 64bit RyuJIT\r\n\r\nBuildConfiguration=Release-Intrinsics  Toolchain=netcoreapp3.0  MaxIterationCount=20  \r\nWarmupCount=1  \r\n\r\n```\r\n|              Method |     Mean |    Error |   StdDev | Extra Metric |\r\n|-------------------- |---------:|---------:|---------:|-------------:|\r\n| MurmurHashBenchmark | 231.0 ns | 4.122 ns | 3.654 ns |            - |\r\n\r\n\r\n\r\n``` ini\r\n sdk version 2.1.401\r\n\r\n```\r\n|              Method |     Mean |     Error |    StdDev | Extra Metric |\r\n|-------------------- |---------:|----------:|----------:|-------------:|\r\n| MurmurHashBenchmark | 197.8 ns | 0.9518 ns | 0.8438 ns |            - |\r\n\r\n\r\nthe associated code is \r\n```C#\r\nchar[] input2;\r\nuint arg;\r\n\r\n[GlobalSetup(Target = nameof(MurmurHashBenchmark))]\r\npublic void setup2()\r\n{\r\n    int min = 0;\r\n    int max = 100;\r\n    Random randNum = new Random();\r\n    arg = (uint)randNum.Next(min, max);\r\n\r\n    input2 = new char[max];\r\n\r\n    for (int i = 0; i < input2.Length; i++)\r\n    {\r\n        input2[i] = (char)randNum.Next(min, 128);\r\n    }\r\n\r\n}\r\n\r\n[Benchmark]\r\npublic void MurmurHashBenchmark()\r\n{\r\n    ReadOnlySpan<char> _t = input2.AsSpan();\r\n    MurmurHash(arg, _t);\r\n}\r\n\r\npublic void MurmurHash(uint hash, ReadOnlySpan<char> span)\r\n{\r\n    ulong cur = 0;\r\n    int bits = 0;\r\n    for (int ich = 0; ich < span.Length; ich++)\r\n    {\r\n        uint ch = span[ich];\r\n        cur |= ch << bits;\r\n        bits += 8;\r\n\r\n        if (bits >= 32)\r\n        {\r\n            hash = MurmurRound(hash, (uint)cur);\r\n            cur = cur >> 32;\r\n            bits -= 32;\r\n        }\r\n    }\r\n}\r\n\r\npublic static uint MurmurRound(uint hash, uint chunk)\r\n{\r\n    chunk *= 0xCC9E2D51;\r\n    chunk = Rotate(chunk, 15);\r\n    chunk *= 0x1B873593;\r\n\r\n    hash ^= chunk;\r\n    hash = Rotate(hash, 13);\r\n    hash *= 5;\r\n    hash += 0xE6546B64;\r\n\r\n    return hash;\r\n}\r\n\r\nprivate static uint Rotate(uint x, int r)\r\n{\r\n    return (x << r) | (x >> (32 - r));\r\n}\r\n\r\n```\r\n@danmosemsft do I need to shorten the code more in order to open the codegen issue in coreclr ?\r\n\r\ncc @danmosemsft @tannergooding @eerhardt ","Url":"https://github.com/dotnet/machinelearning/issues/1895","RelatedDescription":"Closed issue \"MurmurHash code slower on Netcoreapp3.0\" (#1895)"},{"Id":"391930765","IsPullRequest":true,"CreatedAt":"2018-12-18T18:11:04","Actor":"Zruty0","Number":"1894","RawContent":null,"Title":"Making Schema implement ISchema explicitly","State":"closed","Body":"Addresses #1500 \r\n\r\nMade Schema implement ISchema explicitly. Removed all calls to the ISchema inteface when Schema is accessed, with the exception of TryGetColumnIndex, which was made internal.","Url":"https://github.com/dotnet/machinelearning/pull/1894","RelatedDescription":"Closed or merged PR \"Making Schema implement ISchema explicitly\" (#1894)"},{"Id":"392245697","IsPullRequest":false,"CreatedAt":"2018-12-18T16:52:19","Actor":"rogancarr","Number":"1903","RawContent":null,"Title":"Need a sample for multiclass classification in docs","State":"open","Body":"In the ML.NET docs, we have a [collection of samples](https://github.com/dotnet/machinelearning/tree/master/docs/samples/Microsoft.ML.Samples) but there are no samples for Multiclass classification. There has already been an issue (#459) where someone wanted to use a multiclass classifier to get the predictions across the top-K classes, but wasn't able to understand the APIs as is. It would be super helpful to have a simple sample for multiclass classification that prints out the results for a few examples and then discusses the overall evaluation metrics.","Url":"https://github.com/dotnet/machinelearning/issues/1903","RelatedDescription":"Open issue \"Need a sample for multiclass classification in docs\" (#1903)"},{"Id":"391933916","IsPullRequest":true,"CreatedAt":"2018-12-18T16:07:44","Actor":"abgoswam","Number":"1897","RawContent":null,"Title":"Fix copyright for Microsoft.ML.TensorFlow.Redist","State":"closed","Body":"Deleted extra space in copyright\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/1897","RelatedDescription":"Closed or merged PR \"Fix copyright for Microsoft.ML.TensorFlow.Redist\" (#1897)"},{"Id":"391955950","IsPullRequest":true,"CreatedAt":"2018-12-18T06:46:46","Actor":"codemzs","Number":"1900","RawContent":null,"Title":"Forecasting model framework for time series.","State":"closed","Body":"This PR introduces forecasting framework/interface for time series. It allows the following:\r\n1. Train forecasting model from an IDataView.\r\n2. Update the model with new observation using an IDataView.\r\n3. Forecast values up to a certain horizon.\r\n4. Checkpoint the model to disk.\r\n5. Load a model from disk.\r\n\r\nfixes #929\r\n\r\n*I'm not planning to check-in this PR without verifying the benchmark numbers from SSA forecasting algorithm* \r\n\r\nCC: @markusweimer ","Url":"https://github.com/dotnet/machinelearning/pull/1900","RelatedDescription":"Closed or merged PR \"Forecasting model framework for time series.\" (#1900)"},{"Id":"391988794","IsPullRequest":true,"CreatedAt":"2018-12-18T04:08:10","Actor":"najeeb-kazmi","Number":"1901","RawContent":null,"Title":"Public API for remaining learners","State":"open","Body":"Fixes #1703 \r\n\r\nPredictors covered in this PR:\r\n- `EnsemblePredictorBase`\r\n- `EnsembleDistributionPredictor`\r\n- `EnsemblePredictor`\r\n- `EnsembleMultiClassPredictor`\r\n- `GamPredictorBase`\r\n- `BinaryClassificationGamPredictor`\r\n- `RegressionGamPredictor`\r\n- `PcaPredictor`\r\n- `FieldAwareFactorizationmachinePredictor`\r\n- MultiClassLogisticRegressionPredictor`\r\n- `MultiClassNaiveBayesPredictor`\r\n- `OvaPredictor`\r\n- `PkpdPredictor`\r\n- `RandomPredictor`\r\n- `PriorPredictor`\r\n","Url":"https://github.com/dotnet/machinelearning/pull/1901","RelatedDescription":"Open PR \"Public API for remaining learners\" (#1901)"},{"Id":"391946894","IsPullRequest":false,"CreatedAt":"2018-12-18T00:30:10","Actor":"markusweimer","Number":"1899","RawContent":null,"Title":"Improve discoverability of components not in the main nuget","State":"open","Body":"ML.NET is split into multiple nugets, mostly motivated by the dependency structure of the components: Things that have native code are not in the main nuget, neither are things that pull in other OSS packages such as LightGBM or TensorFlow.\r\n\r\nThe benefit of this approach is that it allows apps to depend on the smallest possible and most portable subset of ML.NET with ease.\r\n\r\nThe major downside is that components in this other nugets aren't easily discovered, as they will only show up on `MLContext` after they have been installed. And there is no way to discover that they could be installed from e.g. IntelliSense.\r\n\r\nLet's use this issue to discuss ideas and strategies to improve this situation.","Url":"https://github.com/dotnet/machinelearning/issues/1899","RelatedDescription":"Open issue \"Improve discoverability of components not in the main nuget\" (#1899)"},{"Id":"391937986","IsPullRequest":true,"CreatedAt":"2018-12-17T23:49:35","Actor":"yaeldekel","Number":"1898","RawContent":null,"Title":"Remove Legacy dependency from Microsoft.ML.EntryPoints project","State":"open","Body":"The TrainTest, CV and OVA macros use the pipeline API. This PR removes the dependency on pipeline API by creating the EntryPointNodes directly.\r\n","Url":"https://github.com/dotnet/machinelearning/pull/1898","RelatedDescription":"Open PR \"Remove Legacy dependency from Microsoft.ML.EntryPoints project\" (#1898)"},{"Id":"391912276","IsPullRequest":true,"CreatedAt":"2018-12-17T23:01:28","Actor":"Zruty0","Number":"1893","RawContent":null,"Title":"Internalizing MetadataUtils","State":"closed","Body":"Contributes to #1500 \r\n\r\nMoved most of MetadataUtils to internal, except some public methods to access common metadata.\r\nRemoved some methods that are now trivial.\r\n","Url":"https://github.com/dotnet/machinelearning/pull/1893","RelatedDescription":"Closed or merged PR \"Internalizing MetadataUtils\" (#1893)"}],"ResultType":"GitHubIssue"}},"RunOn":"2018-12-19T05:30:52.0961099Z","RunDurationInMilliseconds":1293}