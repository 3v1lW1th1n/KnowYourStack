{"Data":{"Blog":{"FeedItems":[{"Title":".NET Framework 4.7.1 Runtime and Compiler Features","PublishedOn":"2017-09-28T23:56:59+00:00","CommentsCount":8,"FacebookCount":0,"Summary":"This post describes the new Runtime, Compiler and Base Class Library (BCL) improvements in the .NET Framework 4.7.1. You can try out these features by downloading the Developer Pack, described in the Welcome to the .NET Framework 4.7.1 Early Access blog post.  BCL &#8211; .NET Standard 2.0 Support .NET Framework 4.7.1 has built-in support for .NET Standard 2.0. .NET Framework 4.7.1... <a aria-label=\"read more about .NET Framework 4.7.1 Runtime and Compiler Features\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/09/28/net-framework-4-7-1-runtime-and-compiler-features/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/09/28/net-framework-4-7-1-runtime-and-compiler-features/","RawContent":null},{"Title":"Build a web service with F# and .NET Core 2.0","PublishedOn":"2017-09-26T16:39:23+00:00","CommentsCount":5,"FacebookCount":0,"Summary":"Earlier this year, I wrote about an update to the roadmap for F# and .NET Core. I had mentioned that there were a number of things you could build with F# and .NET Core today, such as web services. In this post, I&#8217;ll walk through building a web service with F# and .NET Core 2.0... <a aria-label=\"read more about Build a web service with F# and .NET Core 2.0\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/09/26/build-a-web-service-with-f-and-net-core-2-0/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/09/26/build-a-web-service-with-f-and-net-core-2-0/","RawContent":null},{"Title":".NET Framework September 2017 Preview of Quality Rollup","PublishedOn":"2017-09-25T19:57:18+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Today, we are releasing the September 2017 Preview of Quality Rollup. This type of rollup is intended for businesses that want to the preview or use quality improvements as soon as they are available. This update applies to Windows 10 Update 1607 (Anniversary Update) and to Windows Server 2016. FYI: The KBs for Windows Server 2016... <a aria-label=\"read more about .NET Framework September 2017 Preview of Quality Rollup\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/09/25/net-framework-september-2017-preview-of-quality-rollup/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/09/25/net-framework-september-2017-preview-of-quality-rollup/","RawContent":null},{"Title":".NET Core September 2017 Update — macOS High Sierra Support","PublishedOn":"2017-09-22T22:29:09+00:00","CommentsCount":4,"FacebookCount":0,"Summary":"We released .NET Core updates for macOS High Sierra Support and additional quality fixes. You can download and install the update for Windows, macOS and Linux. This update is for .NET Core 1.0 and 1.1. The initial .NET Core 2.0 release includes similar improvements, so is not being updated with this release. Downloads .NET Core 1.0.7 .NET... <a aria-label=\"read more about .NET Core September 2017 Update &#8212; macOS High Sierra Support\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/09/22/net-core-september-2017-update-macos-high-sierra-support/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/09/22/net-core-september-2017-update-macos-high-sierra-support/","RawContent":null},{"Title":".NET Framework 4.7.1 Accessibility and WPF Improvements","PublishedOn":"2017-09-21T22:00:20+00:00","CommentsCount":17,"FacebookCount":0,"Summary":"This post describes the new WPF and accessibility features and improvements in .NET Framework 4.7.1. You can try out these features by downloading the Developer Pack, described in the Welcome to the .NET Framework 4.7.1 Early Access blog post. Accessibility improvements .NET Framework 4.7.1 brings in a lot of accessibility improvements across different libraries to align with the... <a aria-label=\"read more about .NET Framework 4.7.1 Accessibility and WPF Improvements\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/09/21/net-framework-4-7-1-accessibility-and-wpf-improvements/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/09/21/net-framework-4-7-1-accessibility-and-wpf-improvements/","RawContent":null},{"Title":"Watch .NET Conf 2017!","PublishedOn":"2017-09-19T14:35:54+00:00","CommentsCount":12,"FacebookCount":0,"Summary":".NET Conf starts today. It&#8217;s a three-day, free, virtual and global .NET conference. All you need to do is point your web browser to channel9.msdn.com, starting at 8AM Pacific Time. We have a packed agenda with a great set of expert .NET developers. What will you learn? Many things. You will learn to build for... <a aria-label=\"read more about Watch .NET Conf 2017!\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/09/19/watch-net-conf-2017/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/09/19/watch-net-conf-2017/","RawContent":null},{"Title":".NET Framework 4.7.1 ASP.NET and Configuration features","PublishedOn":"2017-09-14T00:23:49+00:00","CommentsCount":24,"FacebookCount":0,"Summary":"This post describes the new ASP.NET, Configuration and System.Messaging features and improvements in the .NET Framework 4.7.1. More information on the build these features are available in and how to get the Developer Pack is covered in the Welcome to the .NET Framework 4.7.1 Early Access blog post. Configuration builders Configuration builders allow developers to inject and build... <a aria-label=\"read more about .NET Framework 4.7.1 ASP.NET and Configuration features\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/09/13/net-framework-4-7-1-asp-net-and-configuration-features/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/09/13/net-framework-4-7-1-asp-net-and-configuration-features/","RawContent":null},{"Title":".NET Framework September 2017 Security and Quality Rollup","PublishedOn":"2017-09-13T01:11:33+00:00","CommentsCount":25,"FacebookCount":0,"Summary":"Last Updated: 2017.09.21. Today, we are releasing the September 2017 Security and Quality Rollup and Security Only Update. This update applies to Windows 7 and later client versions and Windows Server 2008 and later server versions. This update has known issues. Please see them at the bottom of the update. Security This release contains the... <a aria-label=\"read more about .NET Framework September 2017 Security and Quality Rollup\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/09/12/net-framework-september-2017-security-and-quality-rollup/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/09/12/net-framework-september-2017-security-and-quality-rollup/","RawContent":null},{"Title":"The week in .NET – Let’s Encrypt Web App Renewer, Seattle CodeCamp 2017","PublishedOn":"2017-08-29T08:33:21+00:00","CommentsCount":15,"FacebookCount":0,"Summary":"Previous posts: Project File Tools, Maira Wenzel, Mixed Reality in Miami .NET Core 2.0, ASP.NET Core 2.0, Entity Framework 2.0, Visual Studio 2017 Update 3, enterprise Entity Framework Core in Boston Rezoom.SQL, Protobuf in Orlando Open-source project of the week: Let&#8217;s Encrypt Azure Web App Renewer There&#8217;s a growing consensus that all web sites should... <a aria-label=\"read more about The week in .NET &#8211; Let&#8217;s Encrypt Web App Renewer, Seattle CodeCamp 2017\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/08/29/the-week-in-net/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/08/29/the-week-in-net/","RawContent":null},{"Title":"UWP & .NET Standard 2.0: A preview is now available!","PublishedOn":"2017-08-25T21:00:11+00:00","CommentsCount":50,"FacebookCount":0,"Summary":"Today, we released the first Preview of Visual Studio 2017 version 15.4. This includes an update to the UWP tooling that supports .NET Standard 2.0. In this post, I&#8217;ll outline what this means for UWP development with .NET. Prerequisites In order to use .NET Standard 2.0 in UWP, you need to target Fall Creators Update (FCU)... <a aria-label=\"read more about UWP &#38; .NET Standard 2.0: A preview is now available!\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/08/25/uwp-net-standard-2-0-preview/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/08/25/uwp-net-standard-2-0-preview/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"6650451504","Type":"IssuesEvent","CreatedAt":"2017-09-28T16:22:10","Actor":"hughbe","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/issues/87","RelatedDescription":"Opened issue \"PRs to repos outside of dotnet/* pattern should not always thank for signing the CLA\" (#87) at dotnet/home","RelatedBody":"For example: https://github.com/mono/libgdiplus/pull/109\r\n\r\nI have already signed the CLI. On the dotnet/corefx etc. projects, I don't get the extra message:\r\n\r\n```\r\n@hughbe,\r\nThanks for having already signed the Contribution License Agreement. Your agreement was validated by .NET Foundation. We will now review your pull request.\r\nThanks,\r\n.NET Foundation Pull Request Bot\r\n```\r\n\r\nJust a small gripe, as I get an email each time I do this. I've seen this in Mono and Xunit.\r\n\r\n/cc @karelz I know this is unrelated to corefx but maybe you know the right person/repo to route this to :D\r\n"},{"Id":"6515896963","Type":"PullRequestEvent","CreatedAt":"2017-08-26T22:20:18","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/85","RelatedDescription":"Merged pull request \"Create telerik-ui-for-uwp.md\" (#85) at dotnet/home","RelatedBody":"Submission of Telerik UI for UWP"},{"Id":"6515896506","Type":"PullRequestEvent","CreatedAt":"2017-08-26T22:19:49","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/86","RelatedDescription":"Merged pull request \"Corrected list of maintainers\" (#86) at dotnet/home","RelatedBody":""},{"Id":"6483200432","Type":"PullRequestEvent","CreatedAt":"2017-08-18T19:58:41","Actor":"gep13","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/86","RelatedDescription":"Opened pull request \"Corrected list of maintainers\" (#86) at dotnet/home","RelatedBody":""}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"6645912196","Type":"IssuesEvent","CreatedAt":"2017-09-27T19:47:08","Actor":"terrajobst","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/32","RelatedDescription":"Opened issue \".NET Framework 4.7.1 provides built-in support for .NET Standard 2.0\" (#32) at dotnet/announcements","RelatedBody":"## Summary\r\n\r\n.NET Framework 4.7.1 will have built-in support for .NET Standard 2.0. This means that you don't have to deploy any additional files or use binding redirects to use .NET Standard 2.0 libraries.\r\n\r\nFor a demo, check out [this video][video].\r\n\r\n## Details\r\n\r\nWhile libraries targeting [.NET Standard 2.0][ns20post] are can be consumed by applications and libraries [targeting .NET Framework 4.6.1][nstable] and higher, not all files that are required for .NET Standard libraries were part of .NET Framework 4.6.1. In fact, .NET Framework 4.6.1 was shipped before .NET Standard 2.0 was even designed. That's why building an application targeting .NET Framework 4.6.1 (as well as 4.6.2 and 4.7) will have to deploy additional files.\r\n\r\n* If you use **Visual Studio 2017 15.3** or higher, these files are automatically copied to the application's output folder.\r\n\r\n* If you use **Visual Studio 2015 and [use NuGet 3.6][nuget36]**, we'll prompt you to install a [support package][vs2015support] which will handle copying the files to the output directory.\r\n\r\nStarting with .NET Framework 4.7.1 these files no longer have to be deployed with the application -- they are built right into the .NET Framework itself.\r\n\r\n.NET Framework 4.7.1 also adds[about 200 missing APIs][missingapis] that were part of .NET Standard 2.0 but not actually implemented by .NET Framework 4.6.1, 4.6.2 or 4.7.\r\n\r\nThis also removes the need for [binding redirects][netfx-issues] when using .NET Standard libraries on .NET Framework because the CLR automatically unifies version numbers of assemblies that are part of the platform.\r\n\r\nLearn more [by reading the .NET Standard FAQ](http://aka.ms/netstandardfaq).\r\n\r\n## Discussion\r\n\r\nDiscussion\r\n\r\nFor a discussion, please go to dotnet/standard#514.\r\n\r\n[ns20post]: https://blogs.msdn.microsoft.com/dotnet/2017/08/14/announcing-net-standard-2-0/\r\n[nstable]: https://docs.microsoft.com/en-us/dotnet/standard/net-standard\r\n[nuget36]: https://dist.nuget.org/visualstudio-2015-vsix/v3.6.0/NuGet.Tools.vsix\r\n[vs2015support]: https://aka.ms/netstandard-build-support-netfx\r\n[missingapis]: https://github.com/dotnet/standard/blob/master/netstandard/src/ApiCompatBaseline.net461.txt\r\n[netfx-issues]: https://github.com/dotnet/standard/issues/481\r\n[video]: https://www.youtube.com/watch?v=u67Eu_IgEMs\r\n\r\nhttps://github.com/dotnet/standard/issues/514"}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"6693358416","Type":"IssuesEvent","CreatedAt":"2017-10-09T20:01:03","Actor":"BruceForstall","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/13730","RelatedDescription":"Closed issue \"[RyuJIT/arm32] Assertion failed 'otherReg != REG_NA'\" (#13730) at dotnet/coreclr","RelatedBody":"Found in Windows RyuJIT/arm32 pri-1 test run.\r\n\r\nFor example:\r\n```\r\nAssert failure(PID 1952 [0x000007a0], Thread: 9148 [0x23bc]): Assertion failed 'otherReg != REG_NA' in 'MCCTest.MyClass:GetSum():struct:this' (IL size 190)\r\n\r\n    File: e:\\gh\\coreclr2\\src\\jit\\codegenarmarch.cpp Line: 1834\r\n    Image: c:\\brucefo\\core_root\\Windows_NT.arm.Checked.2017-08-23\\CoreRun.exe\r\n```\r\n\r\nTests:\r\n```\r\nJIT\\jit64\\mcc\\interop\\mcc_i66\\mcc_i66.cmd (TEST_IDENTIFIER = Tests.lst=mcc_i66.cmd_4418)\r\nJIT\\jit64\\mcc\\interop\\mcc_i76\\mcc_i76.cmd (TEST_IDENTIFIER = Tests.lst=mcc_i76.cmd_7428)\r\nJIT\\jit64\\mcc\\interop\\mcc_i86\\mcc_i86.cmd (TEST_IDENTIFIER = Tests.lst=mcc_i86.cmd_8782)\r\nJIT\\jit64\\mcc\\interop\\mcc_i56\\mcc_i56.cmd (TEST_IDENTIFIER = Tests.lst=mcc_i56.cmd_10490)\r\nJIT\\jit64\\mcc\\interop\\mcc_i36\\mcc_i36.cmd (TEST_IDENTIFIER = Tests.lst=mcc_i36.cmd_10553)\r\n```\r\n"},{"Id":"6693347536","Type":"IssuesEvent","CreatedAt":"2017-10-09T19:58:23","Actor":"BruceForstall","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/14157","RelatedDescription":"Closed issue \"Question: Mark tests for conditional disabling\" (#14157) at dotnet/coreclr","RelatedBody":"In dotnet/coreclr tests, it is possible to mark a test with various characteristics (\"traits\"), and then choose which tests NOT to run based on the tests so marked?\r\n\r\nThere is issues.targets, but it appears that is only used at test BUILD time, not test RUN time. I want to be able to (for example) build the x86 release tests once, then run any number of JIT stress modes, or altjit runs, with each type of run disabling some (different) subset of tests. I don't want to have to build the test wrappers again for each run type. I don't want to disable (via the existing issues.targets) the union of all failing tests for all possible modes (this is far too many, especially when considering altjit and platform bring-up).\r\n\r\nIt looks like xunit has a `-notrait` feature, but I don't see if it is currently plumbed through from a dotnet/coreclr test proj file to the auto-generated xunit wrappers, for example.\r\n\r\n@RussKeldorph @dotnet/jit-contrib @wtgodbe "},{"Id":"6693325066","Type":"IssuesEvent","CreatedAt":"2017-10-09T19:52:55","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/14366","RelatedDescription":"Closed issue \"Linux build break: /usr/include/numa.h:279: undefined reference to `numa_bitmask_free'\" (#14366) at dotnet/coreclr","RelatedBody":"#14359 appears to have caused a build break\r\n\r\n**Repro**\r\nUbuntu16.04 fully updated/upgraded\r\n./build.sh\r\n```\r\n../libcoreclrpal.a(numa.cpp.o): In function `numa_free_cpumask(bitmask*)':\r\n/usr/include/numa.h:279: undefined reference to `numa_bitmask_free'\r\nclang: error: linker command failed with exit code 1 (use -v to see invocation)\r\n```"},{"Id":"6693289469","Type":"PullRequestEvent","CreatedAt":"2017-10-09T19:43:58","Actor":"swaroop-sridhar","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/14395","RelatedDescription":"Opened pull request \"ILLink Perf: Fix Roslyn benchmark\" (#14395) at dotnet/coreclr","RelatedBody":"Use ILLink.Tasks package to build the Roslyn linked benchmark,\r\nnow that Roslyn can target netcoreapp2.0."},{"Id":"6693110518","Type":"PullRequestEvent","CreatedAt":"2017-10-09T18:58:39","Actor":"stephentoub","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/14394","RelatedDescription":"Opened pull request \"Undo unnecessary change from DateTime.Parse commit\" (#14394) at dotnet/coreclr","RelatedBody":"This change shouldn't have been included in my DateTime.Parse span change (https://github.com/dotnet/coreclr/pull/14352).  It was left- over from some local experimentation.  The change doesn't hurt anything functionally, but it does undo a small optimization; I've not measured whether it's impactful or not, so I'm putting it back the way it was."},{"Id":"6693108642","Type":"PullRequestEvent","CreatedAt":"2017-10-09T18:58:12","Actor":"mikedn","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/14393","RelatedDescription":"Opened pull request \"[WIP] Improve FP NEG/ABS codegen\" (#14393) at dotnet/coreclr","RelatedBody":""},{"Id":"6693103851","Type":"IssuesEvent","CreatedAt":"2017-10-09T18:57:02","Actor":"sillyousu","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/14361","RelatedDescription":"Closed issue \"How to get stripped debug symbol for native binary ?\" (#14361) at dotnet/coreclr","RelatedBody":"eg libcoreclr.so:\r\n```\r\n$ objdump -t  libcoreclr.so\r\n\r\nlibcoreclr.so:     file format elf64-x86-64\r\n\r\nSYMBOL TABLE:\r\nno symbols\r\n```"},{"Id":"6693103649","Type":"PullRequestEvent","CreatedAt":"2017-10-09T18:56:59","Actor":"adityamandaleeka","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/14386","RelatedDescription":"Merged pull request \"Fix incorrect name of class in RyuJIT overview\" (#14386) at dotnet/coreclr","RelatedBody":"I was just reading this and noticed a minor error: the parent class for `Interval` and `RegRecord` is `Referenceable`."},{"Id":"6692702167","Type":"PullRequestEvent","CreatedAt":"2017-10-09T17:21:24","Actor":"janvorli","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/14390","RelatedDescription":"Merged pull request \"[GDBJIT] Make gdbjit thread-safe & bug fix\" (#14390) at dotnet/coreclr","RelatedBody":"NotifyGdb::MethodPrepared method can be called from multiple threads simultaneously in this case gdbjit will work incorrectly as it uses global variable without synchronization. This patch reduces number of global variables and adds synchronization for them. Also it fixes DW_AT_comp_dir setting."}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"6692911265","Type":"PullRequestEvent","CreatedAt":"2017-10-09T18:11:05","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/7789","RelatedDescription":"Merged pull request \"Merge release/15.5 to release/2.0.0\" (#7789) at dotnet/cli","RelatedBody":"\nThis is an automatically generated pull request from release/15.5 into release/2.0.0.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/15.5-to-release/2.0.0-20171009-070027\ngit reset --hard upstream/release/2.0.0\ngit merge upstream/release/15.5\n# Fix merge conflicts\ngit commit\ngit push merges/release/15.5-to-release/2.0.0-20171009-070027 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"6692691781","Type":"IssuesEvent","CreatedAt":"2017-10-09T17:18:50","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/7787","RelatedDescription":"Closed issue \"Cannot run application in another machine due to wrong path for dependencies. \" (#7787) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\n\r\n1) Create a project with the following .csproj.\r\n\r\n```XML\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <OutputType>Exe</OutputType>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n    <RuntimeIdentifiers>win10-x64;ubuntu.16.04-x64</RuntimeIdentifiers>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"MySql.Data\" Version=\"8.0.9-dmr\" />\r\n    <PackageReference Include=\"Newtonsoft.Json\" Version=\"10.0.3\" />\r\n    <PackageReference Include=\"NUnit\" Version=\"3.8.1\" />\r\n    <PackageReference Include=\"TweetinviAPI\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\n2) Use the following commands:\r\n```\r\nPS> dotnet restore\r\nPS> dotnet publish -c Release -r ubuntu.16.04-x64\r\n```\r\n\r\n3) Execute the program on Ubuntu machine.\r\n\r\n## Expected  behavior\r\n\r\nThe applications is run successfully. \r\n\r\n## Actual behavior\r\n\r\nIt throws an error:\r\n`Error:\r\n  An assembly specified in the application dependencies manifest (Twitter.deps.json) was not found:\r\n    package: 'Autofac', version: '4.6.0'\r\n    path: 'lib/netstandard1.1/Autofac.dll'`\r\n\r\n## Environment data\r\n\r\n.NET Command Line Tools (2.0.0)\r\n\r\nProduct Information:\r\n Version:            2.0.0\r\n Commit SHA-1 hash:  cdcd1928c9\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.15063\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.0.0\\\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.0\r\n  Build    : e8b8861ac7faf042c87a5c2f9f2d04c98b69f28d\r\n\r\n## Diagnostic \r\n\r\nIt is failing to looking for the dependencies in the right place. On _runtimeconfig.dev.json_ file there is this in all deployments.\r\n\r\n```json\r\n{\r\n  \"runtimeOptions\": {\r\n    \"additionalProbingPaths\": [\r\n      \"C:\\\\Users\\\\leoat\\\\.dotnet\\\\store\\\\|arch|\\\\|tfm|\",\r\n      \"C:\\\\Users\\\\leoat\\\\.nuget\\\\packages\",\r\n      \"C:\\\\Program Files\\\\dotnet\\\\sdk\\\\NuGetFallbackFolder\"\r\n    ]\r\n  }\r\n}\r\n```\r\n\r\nThese paths exist on my computer, but not in the target Ubuntu machine, of course. I can reproduce the error on my own computer by removing all these paths. As a self-contained deployment, it should be looking for the dependencies on the _publish_ folder, they are all there, but it is looking for them in the wrong place.\r\n\r\n**Thanks you for the help!** \r\n\r\n\r\n\r\n\r\n"},{"Id":"6692655181","Type":"PullRequestEvent","CreatedAt":"2017-10-09T17:10:13","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/pull/7775","RelatedDescription":"Closed pull request \"Merge release/2.0.0 to master\" (#7775) at dotnet/cli","RelatedBody":"\nThis is an automatically generated pull request from release/2.0.0 into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.0.0-to-master-20171006-070027\ngit reset --hard upstream/master\ngit merge upstream/release/2.0.0\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.0.0-to-master-20171006-070027 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"6692617694","Type":"IssuesEvent","CreatedAt":"2017-10-09T17:00:56","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/7788","RelatedDescription":"Closed issue \"dotnet restore fails with private feeds on MacOS Sierra\" (#7788) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\n- Create a private feed on VSTS;\r\n- Clone VSTS' Git repository;\r\n- Configure `NuGet.config` accordingly:\r\n```\r\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<configuration>\r\n  <packageSources>\r\n    <clear/>\r\n    <add key=\"MyPrivateFeed\" value=\"https://{myPrivateRepo}.pkgs.visualstudio.com/_packaging/{MyPackages}/nuget/v3/index.json\"/>\r\n  </packageSources>\r\n</configuration>\r\n```\r\n- Call `dotnet restore`\r\n\r\n## Expected  behavior\r\nI should be able to restore my private feeds' packages. It works fine in a similar Windows environment.\r\n\r\n## Actual behavior\r\nI'm unable to restore packages from our private VSTS feeds when I call `dotnet restore`:\r\n\r\n```\r\n  Restoring packages for /Users/Marie-Francoise/Felix/Git/AutoVu.SaaS.Ptms.DataShareService/src/AutoVu.SaaS.Ptms.Dss.Business.Abstractions/AutoVu.SaaS.Ptms.Dss.Business.Abstractions.csproj...\r\n  Restoring packages for /Users/Marie-Francoise/Felix/Git/AutoVu.SaaS.Ptms.DataShareService/src/AutoVu.SaaS.Ptms.Dss.Business.Server/AutoVu.SaaS.Ptms.Dss.Business.Server.csproj...\r\n  Restoring packages for /Users/Marie-Francoise/Felix/Git/AutoVu.SaaS.Ptms.DataShareService/src/AutoVu.SaaS.Ptms.Dss.AzureFunctions/AutoVu.SaaS.Ptms.Dss.AzureFunctions.csproj...\r\n  Restoring packages for /Users/Marie-Francoise/Felix/Git/AutoVu.SaaS.Ptms.DataShareService/src/AutoVu.SaaS.Ptms.Dss.DataLayer/AutoVu.SaaS.Ptms.Dss.DataLayer.csproj...\r\n/usr/local/share/dotnet/sdk/2.0.0/NuGet.targets(102,5): error : Unable to load the service index for source https://autovurnd.pkgs.visualstudio.com/_packaging/AutoVuPackages/nuget/v3/index.json. [/Users/Marie-Francoise/Felix/Git/AutoVu.SaaS.Ptms.DataShareService/AutoVu.SaaS.Ptms.Dss.sln]\r\n/usr/local/share/dotnet/sdk/2.0.0/NuGet.targets(102,5): error :   Response status code does not indicate success: 401 (Unauthorized). [/Users/Marie-Francoise/Felix/Git/AutoVu.SaaS.Ptms.DataShareService/AutoVu.SaaS.Ptms.Dss.sln]\r\n```\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n```\r\nOutils en ligne de commande .NET (2.0.0)\r\n\r\nProduct Information:\r\n Version:            2.0.0\r\n Commit SHA-1 hash:  cdcd1928c9\r\n\r\nRuntime Environment:\r\n OS Name:     Mac OS X\r\n OS Version:  10.13\r\n OS Platform: Darwin\r\n RID:         osx.10.12-x64\r\n Base Path:   /usr/local/share/dotnet/sdk/2.0.0/\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.0\r\n  Build    : e8b8861ac7faf042c87a5c2f9f2d04c98b69f28d\r\n```\r\n\r\n\r\n\r\n\r\n\r\n"},{"Id":"6691248277","Type":"PullRequestEvent","CreatedAt":"2017-10-09T12:28:33","Actor":"Shyam-Gupta","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/7792","RelatedDescription":"Opened pull request \"Updated version of TestPlatform to 15.5.0-preview-20170923-02\" (#7792) at dotnet/cli","RelatedBody":"refer commit: https://github.com/dotnet/cli/pull/7709/commits/fa876f5b90d853df78de1942e596346aeb0cfaa9"},{"Id":"6690876010","Type":"IssuesEvent","CreatedAt":"2017-10-09T10:53:37","Actor":"evil-shrike","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/7791","RelatedDescription":"Opened issue \"[build] Passing a property (/property) with multiple values to msbuild isn't working\" (#7791) at dotnet/cli","RelatedBody":"I need to pass values for [`NoWarn` option](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-options/nowarn-compiler-option) to C# compiler. Previously with msbuild it was being passed as property:\r\n```\r\nmsbuild /p:NoWarn:\"1591;1573;3001;3002\"\r\n```\r\n\r\nBut with dotnet cli it doesn't work anymore.\r\nI tried both `build` and `msbuild` commands. \r\n\r\n\r\n## Steps to reproduce\r\n```\r\ndotnet.exe msbuild /property:NoWarn=1591;1573;3001;3002 mysolution.sln\r\n```\r\nor\r\n```\r\ndotnet.exe msbuild /property:NoWarn=\"1591;1573;3001;3002\" mysolution.sln\r\n```\r\nor\r\n```\r\ndotnet.exe msbuild \"/property:NoWarn=1591;1573;3001;3002\" mysolution.sln\r\n```\r\n\r\nall result in\r\n```\r\nMSBUILD : error MSB1006: Property is not valid.\r\nSwitch: 1573\r\n```\r\nWith `dotnet.exe `build` there's the same error.\r\n\r\nWhile if I set these values in csproj:\r\n```\r\n<NoWarn>1591;1573;3001;3002</NoWarn>\r\n```\r\nit works as expected (warning are being ignored)\r\n\r\n## Expected  behavior\r\nPass all warning code to the compiler.\r\n\r\n## Actual behavior\r\nFaulting with an error\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n```\r\nD:\\>dotnet --info\r\n.NET Command Line Tools (2.0.0)\r\n\r\nProduct Information:\r\n Version:            2.0.0\r\n Commit SHA-1 hash:  cdcd1928c9\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.15063\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.0.0\\\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.0\r\n  Build    : e8b8861ac7faf042c87a5c2f9f2d04c98b69f28d\r\n```\r\n\r\n\r\n\r\n\r\n"},{"Id":"6689991602","Type":"PullRequestEvent","CreatedAt":"2017-10-09T07:00:31","Actor":"dotnet-bot","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/7790","RelatedDescription":"Opened pull request \"Merge release/2.0.0 to master\" (#7790) at dotnet/cli","RelatedBody":"\nThis is an automatically generated pull request from release/2.0.0 into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.0.0-to-master-20171009-070028\ngit reset --hard upstream/master\ngit merge upstream/release/2.0.0\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.0.0-to-master-20171009-070028 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"6689991514","Type":"PullRequestEvent","CreatedAt":"2017-10-09T07:00:29","Actor":"dotnet-bot","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/7789","RelatedDescription":"Opened pull request \"Merge release/15.5 to release/2.0.0\" (#7789) at dotnet/cli","RelatedBody":"\nThis is an automatically generated pull request from release/15.5 into release/2.0.0.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/15.5-to-release/2.0.0-20171009-070027\ngit reset --hard upstream/release/2.0.0\ngit merge upstream/release/15.5\n# Fix merge conflicts\ngit commit\ngit push merges/release/15.5-to-release/2.0.0-20171009-070027 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"6692887807","Type":"PullRequestEvent","CreatedAt":"2017-10-09T18:05:23","Actor":"joperezr","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/531","RelatedDescription":"Opened pull request \"Updating to 2.0.0 RTM CLI\" (#531) at dotnet/standard","RelatedBody":"cc: @eerhardt @weshaggard \r\n\r\nUpdating Standard repo to 2.0 CLI on the dev/release/2.0 branch"},{"Id":"6690571613","Type":"IssuesEvent","CreatedAt":"2017-10-09T09:38:48","Actor":"gyeesoft","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/530","RelatedDescription":"Closed issue \"KeyedHashAlgorithm.Create(\"HMACSHA1\") throw \"Operation is not supported on this platform \" Exception\" (#530) at dotnet/standard","RelatedBody":".net standard 2.0 , The following code throw Operation is not supported on this platform exception。\r\n\r\nusing (var algorithm = KeyedHashAlgorithm.Create(\"HMACSHA1\"))\r\n{\r\n//... some codes\r\n}"},{"Id":"6690514515","Type":"IssuesEvent","CreatedAt":"2017-10-09T09:25:22","Actor":"gyeesoft","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/530","RelatedDescription":"Opened issue \"KeyedHashAlgorithm.Create(\"HMACSHA1\") throw \"Operation is not supported on this platform \" Exception\" (#530) at dotnet/standard","RelatedBody":".net standard 2.0 , The following code throw Operation is not supported on this platform exception。\r\n\r\nusing (var algorithm = KeyedHashAlgorithm.Create(\"HMACSHA1\"))\r\n{\r\n//... some codes\r\n}"},{"Id":"6689316337","Type":"IssuesEvent","CreatedAt":"2017-10-09T00:46:43","Actor":"Petermarcu","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/528","RelatedDescription":"Closed issue \".Close() on TcpClient & Socket missing for some platforms\" (#528) at dotnet/standard","RelatedBody":"@danielgerlag commented on [Mon Sep 11 2017](https://github.com/dotnet/core/issues/956)\n\n# .Close() on TcpClient & Socket missing for some platforms\r\n\r\n.Close() on TcpClient & Socket (System.Net.Sockets) is available in .net standard 2.0, only if compiling on a Windows machine... if I try compile on a Mac, these methods are missing.\r\nAlso, have to explicitly reference `System.Net.Sockets` when building from the Mac.\r\n\r\n# General\r\n\r\n.NET Standard 2.0\r\nWindows 10 vs. MacOS\r\n\n\n---\n\n@Petermarcu commented on [Thu Oct 05 2017](https://github.com/dotnet/core/issues/956#issuecomment-334622113)\n\n@weshaggard, we use the same ref's in both cases don't we? Any idea what may be going on?\n\n---\n\n@weshaggard commented on [Fri Oct 06 2017](https://github.com/dotnet/core/issues/956#issuecomment-334810208)\n\nYes we use the same ref everywhere when targeting netstandard20. @danielgerlag can you share more of how you are building? \r\n\r\nClose should be available on both of those types when targeting netstandard20\n\n"},{"Id":"6685680055","Type":"IssuesEvent","CreatedAt":"2017-10-06T23:45:39","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/529","RelatedDescription":"Opened issue \".NET Standard and Click Once\" (#529) at dotnet/standard","RelatedBody":"## Summary\r\n\r\nThere is currently a bug that prevents ClickOnce setups from correctly deploying all the necessary .NET Standard support files. But you can work this around by editing your project file.\r\n\r\n## Symptoms and root cause\r\n\r\nRunning the application from inside of Visual Studio succeeds, so does publishing and installing. But when the application is launched, it crashes with with an exception [like this one](https://github.com/dotnet/core/issues/1010):\r\n\r\n> Unable to initialize the application (Could not load file or assembly 'System.Runtime, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a' or one of its dependencies. The System cannot find the file specified.\r\n\r\nThe root cause is bug in the way ClickOnce discovers and packages dependencies from the application project.\r\n\r\n## Workaround\r\n\r\nIn order to make sure the right files are added to your installer, you need to add a custom target to your project file:\r\n\r\n1. Right click your project and select **Unload Project**.\r\n2. Then, right click your project again and select **Edit \\<your project\\>**.\r\n3. Locate the first `<Import>` element and copy & paste the code from below before the `<Import>` element.\r\n4. Right click your project and select **Reload Project**\r\n\r\n```xml\r\n  <ItemGroup>\r\n    <PublishFile Include=\"netfx.force.conflicts\">\r\n      <Visible>False</Visible>\r\n      <PublishState>Exclude</PublishState>\r\n      <IncludeHash>True</IncludeHash>\r\n      <FileType>Assembly</FileType>\r\n    </PublishFile>\r\n  </ItemGroup>\r\n  <Target Name=\"FixClickOnceDependencies\" BeforeTargets=\"_DeploymentComputeClickOnceManifestInfo\">\r\n    <ItemGroup>\r\n      <_noCopyRefs Include=\"@(ReferencePath)\" Condition=\"'%(ReferencePath.Private)' == 'false'\" />\r\n      <_noCopyRefsByFileName Include=\"@(_noCopyRefs->'%(FileName)')\">\r\n        <OriginalItem>%(Identity)</OriginalItem>\r\n      </_noCopyRefsByFileName>\r\n      <_libByFileName Include=\"@(ReferenceCopyLocalPaths->'%(FileName)')\">\r\n        <OriginalItem>%(Identity)</OriginalItem>\r\n      </_libByFileName>\r\n      <_overlappingRefByFileName Include=\"@(_noCopyRefsByFileName)\" Condition=\"'@(_noCopyRefsByFileName)' == '@(_libByFileName)' AND '%(Identity)' != ''\" />\r\n      <_overlappingLibByFileName Include=\"@(_libByFileName)\" Condition=\"'@(_noCopyRefsByFileName)' == '@(_libByFileName)' AND '%(Identity)' != ''\" />\r\n      <_overlappingRef Include=\"@(_overlappingRefByFileName->'%(OriginalItem)')\" />\r\n      <_overlappingLib Include=\"@(_overlappingLibByFileName->'%(OriginalItem)')\" />\r\n    </ItemGroup>\r\n    <ItemGroup Condition=\"'@(_overlappingRef)' != ''\">\r\n      <ReferencePath Remove=\"@(_overlappingRef)\" />\r\n      <ReferencePath Include=\"@(_overlappingLib)\">\r\n        <Private>True</Private>\r\n      </ReferencePath>\r\n    </ItemGroup>\r\n  </Target>\r\n```"},{"Id":"6685025919","Type":"IssuesEvent","CreatedAt":"2017-10-06T20:06:21","Actor":"Petermarcu","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/528","RelatedDescription":"Opened issue \".Close() on TcpClient & Socket missing for some platforms\" (#528) at dotnet/standard","RelatedBody":"@danielgerlag commented on [Mon Sep 11 2017](https://github.com/dotnet/core/issues/956)\n\n# .Close() on TcpClient & Socket missing for some platforms\r\n\r\n.Close() on TcpClient & Socket (System.Net.Sockets) is available in .net standard 2.0, only if compiling on a Windows machine... if I try compile on a Mac, these methods are missing.\r\nAlso, have to explicitly reference `System.Net.Sockets` when building from the Mac.\r\n\r\n# General\r\n\r\n.NET Standard 2.0\r\nWindows 10 vs. MacOS\r\n\n\n---\n\n@Petermarcu commented on [Thu Oct 05 2017](https://github.com/dotnet/core/issues/956#issuecomment-334622113)\n\n@weshaggard, we use the same ref's in both cases don't we? Any idea what may be going on?\n\n---\n\n@weshaggard commented on [Fri Oct 06 2017](https://github.com/dotnet/core/issues/956#issuecomment-334810208)\n\nYes we use the same ref everywhere when targeting netstandard20. @danielgerlag can you share more of how you are building? \r\n\r\nClose should be available on both of those types when targeting netstandard20\n\n"}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"6693289860","Type":"PullRequestEvent","CreatedAt":"2017-10-09T19:44:04","Actor":"dotnet-maestro-bot","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/24523","RelatedDescription":"Opened pull request \"Update BuildTools to prerelease-02109-01 (master)\" (#24523) at dotnet/corefx","RelatedBody":""},{"Id":"6693261613","Type":"IssuesEvent","CreatedAt":"2017-10-09T19:37:04","Actor":"krwq","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/24522","RelatedDescription":"Opened issue \"Add core-setup's RuntimeEnvironment (platform detection) logic to RuntimeInformation\" (#24522) at dotnet/corefx","RelatedBody":"Currently we have multiple pieces of code used for detection OS and its version:\r\nhttps://github.com/dotnet/corefx/blob/master/src/CoreFx.Private.TestUtilities/src/System/PlatformDetection.cs\r\nhttps://github.com/dotnet/core-setup/blob/master/src/managed/Microsoft.DotNet.PlatformAbstractions/RuntimeEnvironment.cs\r\n\r\nthis logic is non-trivial to get correctly and thus we should not duplicate this logic.\r\n\r\nI believe RuntimeInformation is the most intuitive place where platform detection code should live."},{"Id":"6693167536","Type":"PullRequestEvent","CreatedAt":"2017-10-09T19:13:02","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/24521","RelatedDescription":"Opened pull request \"Fix null ref exception when Dispose'ing SmtpClient\" (#24521) at dotnet/corefx","RelatedBody":"If SmtpClient is disposed after a failed send and no successful sends, it attempts to call Close on a null NetworkStream field.\r\n\r\nI can't reproduce the exact situation called out in https://github.com/dotnet/corefx/issues/24485, but this fixes the issue I noted in that thread, and I expect it'll fix the original issue as well.\r\n\r\ncc: @Priya91, @Petermarcu \r\nFixes https://github.com/dotnet/corefx/issues/24485\r\n\r\n(Separately, it looks like the connection mgmt in core's SmtpMail could be cleaned up; since a new connection is created per send, it's not clear to me why this close call is required at all.)"},{"Id":"6693099752","Type":"IssuesEvent","CreatedAt":"2017-10-09T18:56:04","Actor":"maryamariyan","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/24402","RelatedDescription":"Closed issue \"Process.Start() fails when a directory exists in the working directory with the same name as the executable\" (#24402) at dotnet/corefx","RelatedBody":"_From @ahsonkhan on September 29, 2017 2:48_\n\n## Steps to reproduce\r\n1. Clone corefxlab repo https://github.com/dotnet/corefxlab\r\n2. Run ./build.sh\r\n3. Observe failure to restore pacakges (only on OSX and Ubuntu, package restore works fine on Windows).\r\n\r\nFrom:\r\nhttps://github.com/dotnet/corefxlab/pull/1787 https://ci.dot.net/job/dotnet_corefxlab/job/master/job/ubuntu16.04_release_prtest/807/consoleFull#7440085258bb52e59-de52-4f1c-b131-470db4c594cd\r\n\r\n```bash\r\necho \"Restoring all packages\"\r\n  ./$dotnetExePath restore $myFile /p:VersionSuffix=\"$BuildVersion\"\r\n  ret=$?\r\n  if [ $ret -ne 0 ]; then\r\n    echo \"Failed to restore packages.\"\r\n    exit -1\r\n  fi\r\n```\r\n\r\n\r\n## Expected  behavior\r\nPackage restore succeeds on all configurations.\r\n\r\nPrevious CLI version (2.1.0-preview1-007191) was working as expected.\r\n\r\n## Actual behavior\r\nPackage restore failing with System.ComponentModel.Win32Exception.\r\n\r\n18:50:13 System.ComponentModel.Win32Exception (0x80004005): The FileName property should not be a directory unless UseShellExecute is set.\r\n18:50:13    at System.Diagnostics.Process.StartCore(ProcessStartInfo startInfo)\r\n18:50:13    at System.Diagnostics.Process.Start()\r\n18:50:13    at Microsoft.DotNet.Cli.Utils.ProcessStartInfoExtensions.Execute(ProcessStartInfo startInfo)\r\n18:50:13    at Microsoft.DotNet.Tools.MSBuild.MSBuildForwardingApp.Execute()\r\n18:50:13    at Microsoft.DotNet.Tools.Restore.RestoreCommand.Run(String[] args)\r\n18:50:13    at Microsoft.DotNet.Cli.Program.ProcessArgs(String[] args, ITelemetry telemetryClient)\r\n18:50:13    at Microsoft.DotNet.Cli.Program.Main(String[] args)\r\n18:50:13 \r\n\r\n\r\n## Environment data\r\ndotnet cli version 2.1.0-preview1-007228\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n_Copied from original issue: dotnet/cli#7726_"},{"Id":"6693099254","Type":"PullRequestEvent","CreatedAt":"2017-10-09T18:55:57","Actor":"maryamariyan","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/24498","RelatedDescription":"Merged pull request \"Allow ProcessStart when folder in CurDirectory has same name as file in ExecDirectory\" (#24498) at dotnet/corefx","RelatedBody":"Allow ProcessStart when folder in current directory has same name as file in execution directory\r\n\r\ncc: @danmosemsft @stephentoub @livarcocc @ahsonkhan "}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"6693312521","Type":"PullRequestEvent","CreatedAt":"2017-10-09T19:49:50","Actor":"tmat","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/22611","RelatedDescription":"Opened pull request \"WIP:  Use SymUnmanagedWriter from Microsoft.DiaSymReader\" (#22611) at dotnet/roslyn","RelatedBody":""},{"Id":"6693285733","Type":"IssuesEvent","CreatedAt":"2017-10-09T19:43:00","Actor":"jinujoseph","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/22610","RelatedDescription":"Opened issue \"Automatic indentation for method argument attributes is awkward\" (#22610) at dotnet/roslyn","RelatedBody":"[View on Developer Community](https://developercommunity.visualstudio.com/content/problem/39656/automatic-indentation-for-method-argument-attribut.html)\r\n\r\nIf I want to annotate a method argument with an attribute, most commonly for MEF importing constructors, then it can easily happen that the line gets too long and I'd like to have the attribute and argument on separate lines. The suggested indentation of VS is awkward here because it indendts the attribute (ok) and then unindents the actual argument (not ok)"},{"Id":"6693105603","Type":"PullRequestEvent","CreatedAt":"2017-10-09T18:57:28","Actor":"agocke","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/22608","RelatedDescription":"Opened pull request \"Support reassignment of ref parameters and locals\" (#22608) at dotnet/roslyn","RelatedBody":"**Customer scenario**\r\n\r\nNew feature\r\n\r\n**Bugs this fixes:**\r\n\r\n(either VSO or GitHub links)\r\n\r\n#22466\r\n\r\n**Risk**\r\n\r\nRisk is mostly limited to assignment, and ref-assignment at that.\r\n\r\n**Performance impact**\r\n\r\nLow/None. Constant time checks, mostly.\r\n\r\n**How was the bug found?**\r\n\r\nLDM decision\r\n"},{"Id":"6693085164","Type":"PullRequestEvent","CreatedAt":"2017-10-09T18:52:31","Actor":"jasonmalinowski","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/22607","RelatedDescription":"Opened pull request \"Merge preview 1 fixes into preview 2\" (#22607) at dotnet/roslyn","RelatedBody":"@heejaechang Can you re-review this? Our initial conflict resolution was wrong -- we have to still ensure we use `token` in that lambda instead of `cancellationToken`?"},{"Id":"6693036229","Type":"PullRequestEvent","CreatedAt":"2017-10-09T18:40:48","Actor":"jasonmalinowski","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/pull/22604","RelatedDescription":"Closed pull request \"Flowing some changes from preview 1 into preview 2\" (#22604) at dotnet/roslyn","RelatedBody":"Flowing some changes from preview 1 into preview 2."},{"Id":"6692848993","Type":"IssuesEvent","CreatedAt":"2017-10-09T17:56:14","Actor":"sharwell","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/21747","RelatedDescription":"Closed issue \"CSharpIntroduceVariableService.IntroduceFieldAsync doesn't drop leading and trailing trivia\" (#21747) at dotnet/roslyn","RelatedBody":"...the way IntroduceLocalAsync does (i.e. `expression.WithoutTrailingTrivia().WithoutLeadingTrivia()`).  As a result, the trivia appear in both the initializer of the newly-created field and at its use-site."},{"Id":"6692847617","Type":"PullRequestEvent","CreatedAt":"2017-10-09T17:55:55","Actor":"sharwell","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/22220","RelatedDescription":"Merged pull request \"IntroduceField code action should remove trivia as the other IntroduceVariable actions do.\" (#22220) at dotnet/roslyn","RelatedBody":"**Customer scenario**\r\n\r\nFrom #21747.\r\n\r\n> CSharpIntroduceVariableService.IntroduceFieldAsync doesn't drop leading and trailing trivia the way IntroduceLocalAsync does (i.e. expression.WithoutTrailingTrivia().WithoutLeadingTrivia()). As a result, the trivia appear in both the initializer of the newly-created field and at its use-site.\r\n\r\n> I didn't check VB.\r\n\r\nI also looked at the VB implementation and there it should be fine and covered by tests:\r\n\r\n* Code: [`VisualBasicIntroduceVariableService.CreateFieldDeclaration`](https://github.com/dotnet/roslyn/blob/6847f1e5a909395aae9456e8f366cbf4deb86b69/src/Features/VisualBasic/Portable/IntroduceVariable/VisualBasicIntroduceVariableService_IntroduceField.vb#L198)\r\n* Test: [`IntroduceVariableTests.TestIntroduceFieldWithTrailingTrivia`](https://github.com/dotnet/roslyn/blob/b57c9b1ebc7ad6eaabe4b8ea8fb37f9898a86325/src/EditorFeatures/VisualBasicTest/CodeActions/IntroduceVariable/IntroduceVariableTests.vb#L753)\r\n\r\n**Bugs this fixes:**\r\n\r\n#21747\r\n\r\n**Workarounds, if any**\r\n\r\nNone.\r\n\r\n**Risk**\r\n\r\nLow.\r\n\r\n**Performance impact**\r\n\r\nLow.\r\n\r\n**Is this a regression from a previous update?**\r\n\r\nNo.\r\n\r\n**Root cause analysis:**\r\n\r\nWasn't covered by tests.\r\n\r\n**How was the bug found?**\r\n\r\nReported by @amcasey \r\n\r\n**Test documentation updated?**\r\n\r\nNo."}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"6689551147","Type":"PullRequestEvent","CreatedAt":"2017-10-09T03:10:58","Actor":"morganbr","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/4695","RelatedDescription":"Opened pull request \"WebAssembly instance method support\" (#4695) at dotnet/corert","RelatedBody":"Implements instance method support for WebAssembly. String.Length now works (there aren't many testable instance methods since we don't have newobj yet). By doing this, many more methods start compiling, so I had to fix bugs related to those.\r\n\r\nIncludes:\r\n* Fixing instance method 'this' parameter handling\r\n* Correcting method names to include their types since LLVM was treating all methods with the same short name as the same method\r\n* Implementing ldfld for instance fields. Fixes #4530 \r\n* Implementing leave opcode to fix bad codegen that made LLVM fail compilation\r\n* Creating trap stubs for RuntimeImport methods since we can't build the runtime yet, but ignoring them would fail compilation\r\n"},{"Id":"6687934220","Type":"PullRequestEvent","CreatedAt":"2017-10-08T07:59:03","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/pull/4258","RelatedDescription":"Closed pull request \"Hook up target architecture to MSBuild\" (#4258) at dotnet/corert","RelatedBody":"On @sandreenko's machine when running the `desktop` project, `RuntimeInformation.ProcessArchitecture` (that we use to match CPU architecture of the host) reports x86 and then it goes ahead and loads an x64 RyuJIT DLL into the process without any problems. Looks like `ProcessArchitecture` is a lie on desktop CLR."},{"Id":"6687907251","Type":"IssuesEvent","CreatedAt":"2017-10-08T07:34:14","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/issues/4694","RelatedDescription":"Opened issue \"Intermittent failure in leakgenthrd test\" (#4694) at dotnet/corert","RelatedBody":"```\r\n       D:\\j\\workspace\\debug_windows_nt28ae10f6\\tests_downloaded\\CoreCLR\\GC\\Scenarios\\LeakGen\\leakgenthrd\\\\*.dll \r\n                0 file(s) copied.\r\n        Test should return with ExitCode 100 ...\r\n        Test Passed\r\n        Expected: 100\r\n        Actual: -1073741819\r\n        END EXECUTION - FAILED\r\n        FAILED\r\n        Test Harness Exitcode is : 1\r\n```\r\n\r\nThis fails about 5% of time in the CI. Example: https://ci.dot.net/job/dotnet_corert/job/master/job/debug_windows_nt/1228/\r\n\r\nThis test hasn't been touched in the CoreCLR repo for years: https://github.com/dotnet/coreclr/tree/master/tests/src/GC/Scenarios/LeakGen"},{"Id":"6687900503","Type":"PullRequestEvent","CreatedAt":"2017-10-08T07:27:43","Actor":"jkoritzinsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/4693","RelatedDescription":"Opened pull request \"Implement dup IL instruction\" (#4693) at dotnet/corert","RelatedBody":"Fixes #4513 "},{"Id":"6687560230","Type":"PullRequestEvent","CreatedAt":"2017-10-08T01:48:51","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/4692","RelatedDescription":"Merged pull request \"Merge master to nmirror\" (#4692) at dotnet/corert","RelatedBody":""},{"Id":"6687560074","Type":"PullRequestEvent","CreatedAt":"2017-10-08T01:48:41","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/4692","RelatedDescription":"Opened pull request \"Merge master to nmirror\" (#4692) at dotnet/corert","RelatedBody":""},{"Id":"6686997756","Type":"PullRequestEvent","CreatedAt":"2017-10-07T18:03:58","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/4691","RelatedDescription":"Opened pull request \"Update RyuJIT\" (#4691) at dotnet/corert","RelatedBody":""},{"Id":"6686913469","Type":"IssuesEvent","CreatedAt":"2017-10-07T17:05:18","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/issues/4690","RelatedDescription":"Opened issue \"InitializeArray intrinsic must always be expanded\" (#4690) at dotnet/corert","RelatedBody":"I'm hitting the `NO_WAY(\"JIT must expand the intrinsic!\");` in Microsoft.CSharp assembly. This is in the same spirit as dotnet/coreclr#9948.\r\n\r\nTo repro, compile a hello world app with\r\n\r\n```\r\n--singlemethodtypename Microsoft.CSharp.RuntimeBinder.Semantics.ExpressionBinder,Microsoft.CSharp --singlemethodname .cctor --codegenopt NGenDump=*\r\n```\r\n\r\nFrom the looks, this is caused by a stack spill somewhere else than `ldtoken`. This doesn't repro if `-O` is passed.\r\n\r\nNGenDump: \r\n[ngendump.txt](https://github.com/dotnet/corert/files/1366303/ngendump.txt)\r\n\r\n"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"916703209548214272","CreatedAt":"2017-10-07T16:34:11+00:00","UserScreenname":"dotnet","Text":"Join @terrajobst at his fire place for a story about .NET Standard versioning. https://t.co/8JAOGpk0Pm","Source":"<a href=\"http://twitter.com/#!/download/ipad\" rel=\"nofollow\">Twitter for iPad</a>","RetweetCount":47,"FavoriteCount":24,"RawContent":null},{"Id":"912821941706268673","CreatedAt":"2017-09-26T23:31:24+00:00","UserScreenname":"dotnet","Text":"Build a web service with F# and .NET Core 2.0 https://t.co/2jSgo1gbty","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":112,"FavoriteCount":64,"RawContent":null}]}},"RunOn":"2017-10-09T20:02:41.8431713Z","RunDurationInMilliseconds":6505}