{"Data":{"Blog":{"FeedItems":[{"Title":"Xamarin and .NET Community Events in January","PublishedOn":"2019-01-02T19:00:12+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"It&#8217;s a new year with tons of new and awesome community-run events scheduled this month. Get the full list of mobile developer engagements happening all over the world through our Community page....","Href":"https://blog.xamarin.com/xamarin-and-net-community-events-in-january/","RawContent":null},{"Title":"Accessing Native Features the Cross-Platform Way with Xamarin.Essentials","PublishedOn":"2018-12-19T22:46:18+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Every mobile application requires access to native functionality. When developing native mobile apps with Xamarin, developers are able to integrate deeply into iOS and Android since Xamarin exposes...","Href":"https://blog.xamarin.com/accessing-native-features-xamarin-essentials/","RawContent":null},{"Title":"November 2018 Xamarin and Azure Office Hours Recap","PublishedOn":"2018-12-14T21:08:29+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"I ❤️ every single developer. And I want to hear your stories. I want to hear about your successes, your &#8220;not-so-much&#8221; successes, and any questions or concerns you may have about our...","Href":"https://blog.xamarin.com/office-hours-november-2018-xamarin-azure/","RawContent":null},{"Title":"Xamarin.Forms 4.0 Feature Preview: An Entirely New Point of (Collection)View","PublishedOn":"2018-12-07T19:00:30+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"As part of the upcoming Xamarin.Forms 4.0 release, we are implementing the all new CollectionView control. The CollectionView is intended to be a successor to the ListView, improving upon its design...","Href":"https://blog.xamarin.com/xamarin-forms-4-0-feature-preview-an-entirely-new-point-of-collectionview/","RawContent":null},{"Title":"The Future of Mobile Development: Xamarin.Forms 4.0 Preview","PublishedOn":"2018-12-05T19:59:03+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Yesterday at Microsoft Connect(); 2018 we announced our plans for Xamarin.Forms 4.0 and shared a public preview. Let&#8217;s now take a deeper look at the big changes, starting with Xamarin.Forms...","Href":"https://blog.xamarin.com/xamarin-forms-4-0-preview/","RawContent":null},{"Title":"Connect(); 2018 Xamarin Announcements","PublishedOn":"2018-12-04T16:21:03+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, at Microsoft Connect(); 2018, we have several exciting announcements about brand new capabilities and foundational improvements in the Xamarin platform driven by your generous feedback....","Href":"https://blog.xamarin.com/connect-2018-xamarin-announcements/","RawContent":null},{"Title":"Xamarin and .NET Developer Events in December","PublishedOn":"2018-12-02T20:46:46+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Here are just a few of the awesome community-run events scheduled this month. Get the full list of mobile developer engagements happening all over the world through our Community page. There you will...","Href":"https://blog.xamarin.com/xamarin-and-net-developer-events-in-december/","RawContent":null},{"Title":"Multi-targeting with Android Support Library v28","PublishedOn":"2018-11-28T18:09:29+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Starting with Xamarin’s Android Support Library version 28, we are introducing multi-targeting. This includes assemblies for older support library versions when your application&#8217;s...","Href":"https://blog.xamarin.com/multi-targeting-with-android-support-library-v28/","RawContent":null},{"Title":"Android Build Performance and Reliability","PublishedOn":"2018-11-21T16:45:55+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"As a Xamarin developer working on Android apps, you may be well-aware of two issues that slow down your everyday development; build times and the correctness of the build. If you aren&#8217;t sure...","Href":"https://blog.xamarin.com/android-build-performance-reliability/","RawContent":null},{"Title":"Xamarin.Forms 3.4.0: Say Hello to ImageButton","PublishedOn":"2018-11-15T19:17:28+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"As part of our long-term goal to have more frequent releases, we’re pleased to announce the release of Xamarin.Forms 3.4.0. As always, this release contains even more bug fixes and most notably,...","Href":"https://blog.xamarin.com/xamarin-forms-3-4-0-say-hello-to-imagebutton/","RawContent":null}],"ResultType":"Feed"},"Android":{"Events":[{"Id":"8836846318","Type":"PullRequestEvent","CreatedAt":"2019-01-04T23:13:44","Actor":"jonathanpeppers","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2590","RelatedDescription":"Opened pull request \"[Xamarin.Android.Build.Tasks] Debug-mode linker improvements\" (#2590) at xamarin/xamarin-android","RelatedBody":"## Mono.Cecil ##\r\n\r\nDuring incremental Debug builds, the `<LinkAssemblies/>` MSBuild task\r\nalready has logic to skip linking on assemblies that are unchanged.\r\nThere is a `LinkOnlyNewerThan` property that enables this behavior for\r\nthe `_LinkAssembliesNoShrink` MSBuild target.\r\n\r\nHowever, we are still *loading* these assemblies into memory with\r\nMono.Cecil.\r\n\r\nI was able to prevent assemblies from being loaded into memory by:\r\n\r\n- Moving the `skiplist` logic to the beginning of the MSBuild task.\r\n- Only `Load ()` the assemblies that we are linking\r\n- Preserve the assembly search directories to the linker, so it *can*\r\n  load these assemblies if needed on-demand.\r\n\r\nThis should not modify the behavior for Release builds (builds running\r\n`_LinkAssembliesShrink`).\r\n\r\n### Results ###\r\n\r\nIncremental builds are a bit faster, due to not loading as many\r\nassemblies:\r\n\r\n  Before:\r\n  392 ms  LinkAssemblies                             1 calls\r\n  After:\r\n  157 ms  LinkAssemblies                             1 calls\r\n\r\nSaved ~250ms in a \"Hello World\" Xamarin.Forms app, after modifying XAML.\r\n\r\n## StripEmbeddedLibraries ##\r\n\r\nI have noticed the support libraries from NuGet are fairly large. In\r\ntotal I have seen them around 8MB in size! Much of their size is not\r\nin fact managed code, but the Android resources, jar files, etc.\r\ncontained within them.\r\n\r\nFor example, if you look at the size of\r\n`__AndroidLibraryProjects__.zip` embedded in\r\nXamarin.Android.Support.v7.MediaRouter 27.0.2.1:\r\n\r\n    592534 __AndroidLibraryProjects__.zip\r\n\r\n~0.5MB in a single assembly!\r\n\r\nSo I did an experiment to run the `StripEmbeddedLibraries` linker step\r\nduring a debug build.\r\n\r\n    Before:\r\n    9.66 MB total\r\n      22064 FormsViewGroup.dll\r\n     101376 HelloForms.Android.dll\r\n       6144 HelloForms.dll\r\n      35416 Xamarin.Android.Arch.Core.Common.dll\r\n      55904 Xamarin.Android.Arch.Lifecycle.Common.dll\r\n      31840 Xamarin.Android.Arch.Lifecycle.Runtime.dll\r\n      77432 Xamarin.Android.Support.Animated.Vector.Drawable.dll\r\n     151648 Xamarin.Android.Support.Annotations.dll\r\n    1699408 Xamarin.Android.Support.Compat.dll\r\n     545880 Xamarin.Android.Support.Core.UI.dll\r\n     228952 Xamarin.Android.Support.Core.Utils.dll\r\n     744528 Xamarin.Android.Support.Design.dll\r\n     409688 Xamarin.Android.Support.Fragment.dll\r\n     733280 Xamarin.Android.Support.Media.Compat.dll\r\n     322648 Xamarin.Android.Support.Transition.dll\r\n      41544 Xamarin.Android.Support.v4.dll\r\n    1995872 Xamarin.Android.Support.v7.AppCompat.dll\r\n      60504 Xamarin.Android.Support.v7.CardView.dll\r\n     780896 Xamarin.Android.Support.v7.MediaRouter.dll\r\n      68184 Xamarin.Android.Support.v7.Palette.dll\r\n     851552 Xamarin.Android.Support.v7.RecyclerView.dll\r\n      61024 Xamarin.Android.Support.Vector.Drawable.dll\r\n     673336 Xamarin.Forms.Core.dll\r\n     334416 Xamarin.Forms.Platform.Android.dll\r\n      16960 Xamarin.Forms.Platform.dll\r\n      85560 Xamarin.Forms.Xaml.dll\r\n\r\n    After:\r\n    5.60 MB total\r\n      12800 FormsViewGroup.dll\r\n     101376 HelloForms.Android.dll\r\n       6144 HelloForms.dll\r\n      16896 Xamarin.Android.Arch.Core.Common.dll\r\n      28160 Xamarin.Android.Arch.Lifecycle.Common.dll\r\n      13824 Xamarin.Android.Arch.Lifecycle.Runtime.dll\r\n      32256 Xamarin.Android.Support.Animated.Vector.Drawable.dll\r\n     118784 Xamarin.Android.Support.Annotations.dll\r\n    1142272 Xamarin.Android.Support.Compat.dll\r\n     301568 Xamarin.Android.Support.Core.UI.dll\r\n     123904 Xamarin.Android.Support.Core.Utils.dll\r\n     350208 Xamarin.Android.Support.Design.dll\r\n     231936 Xamarin.Android.Support.Fragment.dll\r\n     411136 Xamarin.Android.Support.Media.Compat.dll\r\n     137216 Xamarin.Android.Support.Transition.dll\r\n      28672 Xamarin.Android.Support.v4.dll\r\n     947200 Xamarin.Android.Support.v7.AppCompat.dll\r\n      28672 Xamarin.Android.Support.v7.CardView.dll\r\n     181248 Xamarin.Android.Support.v7.MediaRouter.dll\r\n      35328 Xamarin.Android.Support.v7.Palette.dll\r\n     497152 Xamarin.Android.Support.v7.RecyclerView.dll\r\n      20480 Xamarin.Android.Support.Vector.Drawable.dll\r\n     673336 Xamarin.Forms.Core.dll\r\n     334416 Xamarin.Forms.Platform.Android.dll\r\n      16960 Xamarin.Forms.Platform.dll\r\n      85560 Xamarin.Forms.Xaml.dll\r\n\r\nThis equates to:\r\n- 4.0 MB less assemblies shipped to the device during deployment!\r\n- 4.0 MB less assemblies loaded at startup!\r\n\r\nChanges to make this happen:\r\n\r\n- For this to work properly, I had to change `StripEmbeddedLibraries`\r\n  to operate on `Skip` assemblies. If the assembly is going to get\r\n  stripped, then its action will change to `Save`. This now means this\r\n  pass has to run *last*, so a comment seemed ideal in the list of\r\n  linker steps.\r\n\r\n### Results ###\r\n\r\nThe same \"Hello World\" Xamarin.Forms project had a minor improvement\r\nto the initial deployment:\r\n\r\n    Before:\r\n    2730 ms  InstallPackageAssemblies                   1 calls\r\n    After:\r\n    2549 ms  InstallPackageAssemblies                   1 calls\r\n\r\nSaved ~200ms during the first deployment.\r\n\r\nAnd if you review the size of the assemblies copied during\r\n`InstallPackageAssemblies`:\r\n\r\n    Before:\r\n    100% ... 10332kb of 10332kb copied\r\n    After:\r\n    100% ... 6173kb of 6173kb copied\r\n\r\nTODO: I need to measure startup time impact."},{"Id":"8836568380","Type":"PullRequestEvent","CreatedAt":"2019-01-04T21:54:39","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2579","RelatedDescription":"Merged pull request \"[Xamarin.Android.Build.Tasks] support Embedded DSOs\" (#2579) at xamarin/xamarin-android","RelatedBody":"Context: https://github.com/xamarin/xamarin-android/pull/2154\r\nFixes: https://github.com/xamarin/xamarin-android/issues/2415\r\n\r\nCurrently, in order to activate the embedded DSO support, one has to\r\nperform the following actions manually:\r\n\r\n1. Add the `android:extractNativeLibs=\"false\"` attribute to the\r\n   `<application>` element in the `Properties/AndroidManifest.xml`\r\n   file.\r\n\r\n2. Add the following property to the project file:\r\n```\r\n<AndroidStoreUncompressedFileExtensions>.so</AndroidStoreUncompressedFileExtensions>\r\n```\r\n3. Add an android environment file to the project with a line which\r\n   says:\r\n```\r\n__XA_DSO_IN_APK=1\r\n```\r\n## Changes ##\r\n\r\nThe presence of `android:extractNativeLibs=\"false\"` in\r\n`AndroidManifest.xml` should setup all the extra \"stuff\" so developers\r\ndon't have to manually do it.\r\n\r\n`android:extractNativeLibs=\"false\"` would automatically do the\r\nfollowing:\r\n\r\n1. `.so` will be appended to\r\n   `$(AndroidStoreUncompressedFileExtensions)`. Both the `<Aapt/>` and\r\n   `<BuildApk/>` MSBuild tasks use this property.\r\n\r\n3. A new generated file in `$(IntermediateOutputPath)` will add\r\n   `__XA_DSO_IN_APK=1` as an `@(AndroidEnvironment)` build item.\r\n\r\nI also added an MSBuild test to verify these changes are happening. I\r\nwas also able to update `tests/EmbeddedDSOs` to rely on the new\r\nfunctionality."},{"Id":"8836568366","Type":"IssuesEvent","CreatedAt":"2019-01-04T21:54:39","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/2415","RelatedDescription":"Closed issue \"[spec] Enable Embedded DSO Support via android:extractNativeLibs=\"false\"\" (#2415) at xamarin/xamarin-android","RelatedBody":"## Problem\r\n\r\nCurrently, in order to activate the embedded DSO support, one has to perform the following actions manually:\r\n\r\n1. Add the `android:extractNativeLibs=\"false\"` attribute to the `<application>`\r\nelement in the `Properties/AndroidManifest.xml` file.\r\n\r\n2. Add the following property to the project file:\r\n```xml\r\n<AndroidStoreUncompressedFileExtensions>.so</AndroidStoreUncompressedFileExtensions>\r\n```\r\n3. Add an android environment file to the project with a line which says:\r\n```\r\n__XA_DSO_IN_APK=1\r\n```\r\n\r\n## Proposal\r\n\r\nThe presence of `android:extractNativeLibs=\"false\"` in `AndroidManifest.xml` should setup all the extra \"stuff\" so developers don't have to manually do it.\r\n\r\n`android:extractNativeLibs=\"false\"` would automatically do the following:\r\n\r\n1. `.so` will be appended to `$(AndroidStoreUncompressedFileExtensions)`. Both the `<Aapt/>` and `<BuildApk/>` MSBuild tasks use this property.\r\n\r\n3. A new generated file in `$(IntermediateOutputPath)` will add `__XA_DSO_IN_APK=1` as an `@(AndroidEnvironment)` build item.\n\n> VS bug [#758653](https://devdiv.visualstudio.com/DevDiv/_workitems/edit/758653)"},{"Id":"8836302819","Type":"IssuesEvent","CreatedAt":"2019-01-04T20:50:27","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/1443","RelatedDescription":"Closed issue \"All app assemblies are loaded on startup\" (#1443) at xamarin/xamarin-android","RelatedBody":"### Steps to Reproduce\r\n\r\nGiven code like the following:\r\n\r\n```csharp\r\n// Some static dictionary somewhere:\r\npublic static Dictionary<string, Func<object>> Services { get; } = new Dictionary<string, Func<object>>();\r\n\r\n// From MainActivity.cs;\r\nServices.Add(nameof(BarServices.Bar), CreateBar);\r\nServices.Add(nameof(FooServices.Foo), CreateFoo);\r\n```\r\n\r\nAnd given that the two methods are defined to explicitly not be inlined or otherwise loaded until invoked:\r\n\r\n```csharp\r\n[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]\r\nstatic object CreateBar() => new BarServices.Bar();\r\n\r\n[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]\r\nstatic object CreateFoo() => new FooServices.Foo();\r\n```\r\n\r\nAnd given `FooServices.dll` and `BarServices.dll` are two completely independent assemblies from the main app's, it would be highly desirable for the assemblies to only be loaded when the dictionary entry is accessed and the delegate is invoked, instead of happening on app start, which slows down the process \"unnecessarily\".\r\n\r\nThe ~same code in a .NET app properly lazy loads the assemblies as needed:\r\n\r\n```csharp\r\n        public static Dictionary<string, Func<object>> Services { get; } = new Dictionary<string, Func<object>>(StringComparer.OrdinalIgnoreCase);\r\n\r\n        static void Main(string[] args)\r\n        {\r\n            // Both this approach as well as the inline lambda properly delay-load the assemblies\r\n            //Services.Add(nameof(BarServices.Bar), CreateBar);\r\n            //Services.Add(nameof(FooServices.Foo), CreateFoo);\r\n\r\n            Services.Add(nameof(BarServices.Bar), () => new BarServices.Bar());\r\n            Services.Add(nameof(FooServices.Foo), () => new FooServices.Foo());\r\n\r\n            var line = \"\";\r\n            while ((line = Console.ReadLine()).Length > 0)\r\n            {\r\n                Console.WriteLine(Services[line.Trim()].Invoke().ToString());\r\n            }\r\n        }\r\n\r\n        [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]\r\n        static object CreateBar() => new BarServices.Bar();\r\n\r\n        [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]\r\n        static object CreateFoo() => new FooServices.Foo();\r\n```\r\n\r\nThis is important for apps that use assembly-partitioning to split logic across modules, which should only be loaded whenever needed (i.e. when the UI that consumes them is navigated to, say).\r\n\r\n### Expected Behavior\r\n\r\nAssemblies are lazy-loaded.\r\n\r\n### Actual Behavior\r\n\r\nBoth assemblies are loaded up-front:\r\n\r\n```\r\n03-19 15:36:33.243    nexus_5x    Debug    13769    Mono    Assembly FooServices[0x9de4ed60] added to domain RootDomain, ref_count=1\r\n```\r\n\r\n### Version Information\r\n\r\nCurrently verified against 15.7 pre2\r\n\r\n"},{"Id":"8836302032","Type":"PullRequestEvent","CreatedAt":"2019-01-04T20:50:17","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2515","RelatedDescription":"Merged pull request \"Runtime startup performance improvements\" (#2515) at xamarin/xamarin-android","RelatedBody":"The goal of this commit is to make Xamarin.Android apps start faster. The\r\nchanges are focused only around the very first stage of application startup -\r\nbetween Android invoking our Java startup code (MonoPackageManager) and the end\r\nof our `Runtime.init` (`Java_mono_android_Runtime_init` in the native runtime)\r\nwhich is when the user application is fully initialized and ready to start is\r\nlauncher Activity.\r\n\r\nIn order to achieve the goal, the following changes were made:\r\n\r\n * Java class lookup (\"reflection\").\r\n   We used to call the `FindClass` JNI function as part of the startup at a cost\r\n   of several milliseconds. We now put the class handles (accessed with the\r\n   `.class` Java accessor) in the `Runtime` class and initialize them from the\r\n   static constructor. We then read those fields from within `Runtime.init`,\r\n   which is passed a reference to the Java instance of the Runtime class.\r\n   Additonally, a handful of class field/method lookups were moved out of the\r\n   init code so that the code that doesn't use them doesn't have to pay the tax.\r\n\r\n * Android API level is passed to `Runtime.init` from Java instead of using JNI\r\n   from the native code.\r\n\r\n * Limit logging.\r\n   Previously whenever any of the `log_{info,debug}` functions were called we'd\r\n   spend time preparing all the parameters to pass to the function, sometimes\r\n   involving memory allocation, function calls, etc - only to discard all of\r\n   that work **inside** the `log_*` call because the logging category used in\r\n   that call was disabled. Now we check whether the category is enabled before\r\n   we set out to construct the parameters.\r\n\r\n * Java/JNI type wrappers for string and array of strings.\r\n   This both a convenience/correctness as well as a performance change.\r\n   Introduced are two C++ wrapper classes for the `jstring` and `object array`\r\n   types (specialized for object == jstring) which take care of efficiently\r\n   caching the retrieved strings as well as of correctly deleting local\r\n   references to the obtained objects. Both classes, `jstring_wrapper` and\r\n   `jstring_array_wrapper` are optimized so that they compile into the\r\n   equivalent of the current, hand-written, code. They also take care to make\r\n   the minimum necessary number of calls in order to access the strings, both\r\n   standalone and from arrays, as well as to release the resources.\r\n   The string and array wrappers are passed around as references, thus using the\r\n   minimum amount of memory.\r\n\r\n * Do not preload managed assemblies.\r\n   We used to preload all of the application assemblies in order to find and\r\n   invoke type initializers. This resulted in the list of assemblies being\r\n   processed twice at the great expense of time. We now don't call the type\r\n   initializers at all and the assemblies are loaded on demand.\r\n\r\n * Do not store application environment variables in a file inside the apk.\r\n   The textual file used to be read from the apk(s) early in the process,\r\n   requiring iteration over all the application apk files, opening each of them,\r\n   browsing through the ZIP entries and, finally, reading the file line by line,\r\n   parsing into the name and value parts to create either a\r\n   property (`mono.aot`, `mono.llvm`) or any environment variables requested by\r\n   the application developer (or the XA runtime).\r\n   To speed the process up, this commit replaces the text file with a Java class\r\n   generated during application build which contains an array of `\"name\",\r\n   \"value\"` pairs. The class is passed to `Java_mono_android_Runtime_init` and\r\n   its elements are used to create the requested environment variables. A\r\n   handful of variables is special-cased in that they are not placed in the\r\n   environment but rather to set flags in the `AndroidSystem` class. The\r\n   variables are `mono.aot`, `mono.llvm` and `__XA_DSO_IN_APK`. This allowed to\r\n   remove calls to create (fake) system properties as well as `getenv` in the\r\n   init native function.\r\n\r\n * Don't try load LLVM.so when it won't be there because we're not using llvm\r\n\r\n * Convert package name to hash using optimized code without calling snprintf\r\n\r\n * Desktop build is determined on compile time instead of dynamically\r\n\r\n * xamarin_getifaddrs are initialized on demand, not at the startup.\r\n\r\nStartup time improvements for the XF integration test app (average, Pixel 3 XL):\r\n\r\n  * Debug mode:\r\n    Old: 1s 440ms\r\n    New: 1s 100ms\r\n\r\n  * Release mode:\r\n    Old: 650ms\r\n    New: 270ms"},{"Id":"8836203655","Type":"PullRequestEvent","CreatedAt":"2019-01-04T20:27:09","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2588","RelatedDescription":"Merged pull request \"[tests] BuildAfterUpgradingNuGet should be NonParallelizable\" (#2588) at xamarin/xamarin-android","RelatedBody":"Context: http://build.devdiv.io/2307677\r\n\r\nThe `BuildAfterUpgradingNuGet` test has been failing with:\r\n\r\n    Xamarin.ProjectTools.FailedBuildException : Build failure: UnnamedProject.csprojBuild log recorded\r\n\r\nReviewing the log, we are getting:\r\n\r\n    NuGet.targets(114,5): The process cannot access the file 'xamarin.forms.2.3.4.231.nupkg' because it is being used by another process.\r\n\r\nIt looks like two NuGet restores in parallel are stepping on each\r\nother.\r\n\r\nThis has happened a couple builds in a row, so I think it is worth\r\nadding the `[NonParallelizable]` attribute on this test."},{"Id":"8835706009","Type":"IssuesEvent","CreatedAt":"2019-01-04T18:36:42","Actor":"pjcollins","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/2583","RelatedDescription":"Closed issue \"The AdjustJavacVersionArguments task can fail during a rebuild in VS 2019\" (#2583) at xamarin/xamarin-android","RelatedBody":"### Steps to Reproduce\r\n\r\n1. Download, build, and rebuild the attached project:\r\n[Bug24206.zip](https://github.com/xamarin/xamarin-android/files/2725318/Bug24206.zip)\r\n\r\n2. msbuild /t:Build Bug24206\\AndroidApp1\\AndroidApp1.csproj\r\n3. msbuild /t:Rebuild Bug24206\\AndroidApp1\\AndroidApp1.csproj\r\n\r\n<!--\r\nIf you have a repro project, you may drag & drop the .zip/etc. onto the issue editor to attach it.\r\n-->\r\n\r\n### Expected Behavior\r\nBuilding and then rebuilding a project should succeed.\r\n\r\n### Actual Behavior\r\n`error MSB4044: The \"AdjustJavacVersionArguments\" task was not given a value for the required parameter \"JdkVersion\". `\r\n\r\nThis appears to be a regression as compared to VS 2017 (15.9.4).\r\n\r\n### Version Information\r\nXamarin.Android SDK   9.1.103.6 (HEAD/1127dc3a)\r\nXamarin.Android Reference Assemblies and MSBuild support.\r\n    Mono: mono/mono/2018-08@23f2024af80\r\n    Java.Interop: xamarin/java.interop/d16-0@c987483\r\n    LibZipSharp: grendello/LibZipSharp/master@44de300\r\n    LibZip: nih-at/libzip/rel-1-5-1@b95cf3f\r\n    MXE: xamarin/mxe/xamarin@b9cbb535\r\n    ProGuard: xamarin/proguard/master@905836d\r\n    SQLite: xamarin/sqlite/3.25.2@4ea4c69\r\n    Xamarin.Android Tools: xamarin/xamarin-android-tools/master@f05c0aa\r\n<!--\r\n1. On macOS and within Visual Studio, select Visual Studio > About Visual Studio, then click the Show Details button, then click the Copy Information button.\r\n\r\n2. Paste below this comment block.\r\n-->\r\n\r\n### Log File\r\nhttps://gist.githubusercontent.com/pjcollins/f5bff3f70a3ab743b0c8aac4e34be858/raw/9c39397848d24227e303b43f32de0d308ed5ff55/gistfile1.txt\r\n<!--\r\n1. On macOS and within Visual Studio:\r\n    a. Click **Tools** > **SDK Command Prompt**.\r\n    b. Within the launched `Terminal.app` window, run:\r\n\r\n            adb logcat -d | pbcopy\r\n\r\n2. Paste below this comment block\r\n-->\r\n\r\n\r\n\r\n<!--\r\nSwitch to the \"Preview\" tab to ensure your issue renders correctly.\r\n\r\nPlease add an appropriate \"Area:\" label in the Labels section.\r\n-->"},{"Id":"8834962941","Type":"PullRequestEvent","CreatedAt":"2019-01-04T16:03:16","Actor":"jonathanpeppers","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2589","RelatedDescription":"Opened pull request \"[Xamarin.Android.Build.Tasks] remove more %temp% file usage\" (#2589) at xamarin/xamarin-android","RelatedBody":"In various places throughout our build, we are still using a pattern\r\nsuch as:\r\n\r\n    try {\r\n        var temp = Path.GetTempFileName ();\r\n        //Write to the file\r\n        MonoAndroidHelper.CopyIfChanged (temp, dest);\r\n    } finally {\r\n        File.Delete (temp);\r\n    }\r\n\r\nOr sometimes variations that aren't even as nice as this...\r\n\r\nWe can instead use the new `MonoAndroidHelper.CopyIfStreamChanged`\r\nmethod and not use any temp files.\r\n\r\n## CopyResource ##\r\n\r\nThis MSBuild task had its own `CopyIfStreamChanged` behavior, and it\r\nhas been around a while. I was able to remove a lot of code from this\r\nMSBuild task; it is much simpler now.\r\n\r\nOther changes:\r\n\r\n- We don't really need an extra `Run` method here.\r\n- If we are putting `Assembly.GetExecutingAssembly ()` in a static\r\n  variable, let's put the jcwgen assembly in one as well.\r\n- Use string interpolation: `$`\r\n\r\n## GeneratePackageManagerJava ##\r\n\r\nA solid candidate that doesn't need a temp file.\r\n\r\nI am also unsure why we had:\r\n\r\n    try { File.Delete (temp); } catch (Exception) { }\r\n    try { File.Delete (temp); } catch (Exception) { }\r\n\r\n## MonoAndroidHelper and XDocumentExtensions ##\r\n\r\nEach had one method that was implementing \"SaveIfChanged\" behavior,\r\nbut used temp files.\r\n\r\n## Results ##\r\n\r\nI couldn't really see a build performance improvement, but it should\r\nbe slightly better. Most of these changes result in cleaner code, and\r\nless temp files!"}],"ResultType":"GitHubEvent"},"Forms":{"Events":[{"Id":"8837423701","Type":"PullRequestEvent","CreatedAt":"2019-01-05T04:35:20","Actor":"PureWeen","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/4904","RelatedDescription":"Opened pull request \"[Android] If drawable specified on shell doesn't exist don't dispose of it\" (#4904) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\nIf an Icon is specified on a ShellSection that doesn't exist it was causing an NRE when trying to dispose of it\r\n\r\n### PR Checklist ###\r\n\r\n- [ ] Has automated tests <!-- (if tests are omitted or manual, state reason in description) -->\r\n- [X] Rebased on top of the target branch at time of PR\r\n- [X] Changes adhere to coding standard\r\n"},{"Id":"8837087357","Type":"IssuesEvent","CreatedAt":"2019-01-05T00:47:33","Actor":"PureWeen","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/4862","RelatedDescription":"Closed issue \"AbsoluteLayout proportional positioning\" (#4862) at xamarin/Xamarin.Forms","RelatedBody":"<!-- Bug report best practices: https://github.com/xamarin/Xamarin.Forms/wiki/Submitting-Issues -->\r\n\r\n### Description\r\nProportional ain't proportional!\r\n\r\n### Steps to Reproduce\r\n\r\n1. MainPage.xaml\r\n```xaml\r\n<?xml version=\"1.0\" encoding=\"utf-8\" ?>\r\n<ContentPage xmlns=\"http://xamarin.com/schemas/2014/forms\"\r\n             xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\r\n             xmlns:local=\"clr-namespace:XFBindingTest\"\r\n             x:Class=\"XFBindingTest.MainPage\">\r\n\r\n    <AbsoluteLayout BackgroundColor=\"LightYellow\">\r\n        <BoxView AbsoluteLayout.LayoutBounds=\"0, 0, 1, 1\" AbsoluteLayout.LayoutFlags=\"All\" BackgroundColor=\"LightSalmon\"/>\r\n        <BoxView AbsoluteLayout.LayoutBounds=\"0, 0, 0.25, 0.25\" AbsoluteLayout.LayoutFlags=\"All\" BackgroundColor=\"Teal\"/>\r\n        <BoxView AbsoluteLayout.LayoutBounds=\"0.75, 0.75, 0.25, 0.25\" AbsoluteLayout.LayoutFlags=\"All\" BackgroundColor=\"Lime\"/>\r\n    </AbsoluteLayout>\r\n\r\n</ContentPage>\r\n```\r\n2. Build and run\r\n\r\n### Expected Behavior\r\nTop left quarter is teal colored, bottom right quarter is lime colored, the rest two quarters are light salmon colored\r\n\r\n### Actual Behavior\r\nTop left quarter and bottom right quarter positioned very awkwardly\r\n\r\n### Basic Information\r\n\r\n- Version with issue: 3.4.0.1008975\r\n- Last known good version: N/A\r\n- IDE: Visual Studio 15.9.4\r\n- Platform Target Frameworks:\r\n  - UWP:  16299\r\n\r\n### Screenshots\r\n![image](https://user-images.githubusercontent.com/19922066/50448974-378c5e80-095f-11e9-9700-0deba74054e8.png)\r\n\r\n### Reproduction Link\r\nComment if needed\r\n"},{"Id":"8837005233","Type":"IssuesEvent","CreatedAt":"2019-01-05T00:10:29","Actor":"PureWeen","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/4868","RelatedDescription":"Closed issue \"Multi line without text wrap in Label \" (#4868) at xamarin/Xamarin.Forms","RelatedBody":"\r\n\r\n### Help wanted: I want to display multi lines in a label control, without text wrapping, just scroll the content left to right when the screen can’t display the full line. I tried to set the linebreak mode or Max rows \r\nBut it doesn’t work well,the text is still wrap to a new line when the text length is long\r\n\r\n\r\nI test it on android \r\n\r\n\r\n### Expected Behavior\r\n\r\n### Actual Behavior\r\n\r\n### Basic Information\r\n\r\n- Version with issue:\r\n- Last known good version:\r\n- IDE:\r\n- Platform Target Frameworks: <!-- All that apply -->\r\n  - iOS:  <!-- The version of the iOS SDK you are compiling against, e.g. 11.1 -->\r\n  - Android: <!-- The version of the Android SDK you are compiling against, e.g. 7.1 --> \r\n  - UWP:  <!-- The version of the UWP SDK you are compiling against, e.g. 16299 --> \r\n- Android Support Library Version: <!-- if applicable -->\r\n- Nuget Packages:\r\n- Affected Devices:\r\n\r\n### Screenshots\r\n\r\n<!-- If the issue is a visual issue, please include screenshots showing the problem if possible -->\r\n\r\n### Reproduction Link\r\n\r\n<!-- Please upload or provide a link to a reproduction case -->\r\n"},{"Id":"8836913095","Type":"IssuesEvent","CreatedAt":"2019-01-04T23:37:01","Actor":"PureWeen","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/4874","RelatedDescription":"Closed issue \"[UWP] XF.PageRenderer Resizes Wrong in UWP Parents\" (#4874) at xamarin/Xamarin.Forms","RelatedBody":"### Description\r\n\r\nThis is a test for adding Xamarin.Forms controls or pages into UWP \r\n\r\nI had tried using some built-in renderers in my iOS/Android/UWP project's platform-aware codes, most works fine.\r\n\r\n### Steps to Reproduce\r\n\r\n1. Just run the sample I uploaded.\r\n2. When App.xaml.cs Line 38 is typeof(MainPage), it is in **origin** UWP environment.\r\n3. When App.xaml.cs Line 38 is typeof(MainPage2), it is in **Xamarin.Forms** UWP environment.\r\n\r\n### Expected Behavior\r\n\r\nThe page renders well in the Pivot.\r\n\r\n### Actual Behavior\r\n\r\nThe panel outside the real control's size becomes (0,0).\r\n\r\nBy the way, it seems that only one `ListViewItem` was added when in origin UWP environment.\r\n\r\n### Basic Information\r\n\r\n- Version with issue: 3.4.0\r\n- Last known good version: N/A\r\n- IDE: Visual Studio 2017.9.4\r\n- Platform Target Frameworks: <!-- All that apply -->\r\n  - UWP: 17134\r\n- Nuget Packages: 3.4.0\r\n\r\n### Screenshots\r\n\r\nFirst I'd like to say it is perfect with Xamarin.Forms UWP projects.\r\n\r\n![formswindowspageallright](https://user-images.githubusercontent.com/10959348/50563539-a7805780-0d58-11e9-98e9-f96e38751907.png)\r\n\r\nWhen the page seems blank, I found the `TextBlock`s for the datas in ViewTree Panel.\r\n\r\n![textblockaddedtoviewtree](https://user-images.githubusercontent.com/10959348/50563537-a6e7c100-0d58-11e9-9095-c3197302b75d.png)\r\n\r\nBut its parent `Panel` becomes invisible, which gets a size of (0,0).\r\n\r\n![textblockparentnotwellshown](https://user-images.githubusercontent.com/10959348/50563538-a6e7c100-0d58-11e9-8c67-c440034ece51.png)\r\n\r\n### Reproduction Link\r\n[App1.zip](https://github.com/xamarin/Xamarin.Forms/files/2718574/App1.zip)\r\n\r\nHappy new year!"},{"Id":"8836270398","Type":"IssuesEvent","CreatedAt":"2019-01-04T20:43:01","Actor":"hartez","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/4903","RelatedDescription":"Opened issue \"[UWP] SwitchCell in TableView disappears after toggling\" (#4903) at xamarin/Xamarin.Forms","RelatedBody":"<!-- Bug report best practices: https://github.com/xamarin/Xamarin.Forms/wiki/Submitting-Issues -->\r\n\r\n### Description\r\n\r\n### Steps to Reproduce\r\n\r\n1. In Control Gallery, navigate to SwitchCell Table Gallery Legacy\r\n2. Toggle the SwitchCell in the first row. Toggle it again.\r\n\r\n### Expected Behavior\r\n\r\nThe SwitchCell does not disappear.\r\n\r\n### Actual Behavior\r\n\r\nThe SwitchCell disappears.\r\n\r\n### Basic Information\r\n\r\n- Version with issue: 3.5.0\r\n\r\n### Screenshots\r\n\r\n![2019-01-04_13-39-15](https://user-images.githubusercontent.com/538025/50709914-a08e6900-1026-11e9-92a8-e2b2b6779f8d.gif)\r\n\r\n"},{"Id":"8836266579","Type":"IssuesEvent","CreatedAt":"2019-01-04T20:42:00","Actor":"PureWeen","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/4885","RelatedDescription":"Closed issue \"Gesture not firing for custom renderer on iOS\" (#4885) at xamarin/Xamarin.Forms","RelatedBody":"### Description\r\n\r\nGiven a gesture recognizer on a `View` _with_ custom renderer, the gesture is not firing events on iOS.\r\n\r\nThis code\r\n\r\n```\r\n<ContentPage.Content>\r\n        <AbsoluteLayout HorizontalOptions=\"FillAndExpand\" VerticalOptions=\"FillAndExpand\">\r\n            <vlc:VideoView x:Name=\"videoView\" MediaPlayer=\"{Binding MediaPlayer}\" AbsoluteLayout.LayoutBounds=\"0,0,1,1\" AbsoluteLayout.LayoutFlags=\"All\">\r\n                <vlc:VideoView.GestureRecognizers>\r\n                    <PanGestureRecognizer PanUpdated=\"PanGestureRecognizer_PanUpdated\"/>\r\n                </vlc:VideoView.GestureRecognizers>\r\n            </vlc:VideoView>\r\n            <Label Text=\"{Binding Message}\" AbsoluteLayout.LayoutBounds=\".5,1,1,.1\" AbsoluteLayout.LayoutFlags=\"All\" FontSize=\"20\" LineBreakMode=\"WordWrap\" TextColor=\"White\" />\r\n        </AbsoluteLayout>\r\n    </ContentPage.Content>\r\n```\r\n\r\nWorks fine on Android, while `PanGestureRecognizer_PanUpdated` is never raised on iOS.\r\n\r\nUsing an `Image` instead of the `VideoView` (custom renderer) works as expected on iOS.\r\nI don't think a custom renderered View needs any particular setup to make gesture recognizers work. So I'm confused as to why it works on Android and not on iOS.\r\n\r\n### Steps to Reproduce\r\n\r\n1. git clone https://github.com/mfkl/libvlcsharp-samples/\r\n2. git checkout gestures\r\n3. run Gestures.iOS and touch the screen\r\n\r\n### Expected Behavior\r\n\r\nPan events fire.\r\n\r\n### Actual Behavior\r\n\r\nPan events don't fire.\r\n\r\n### Basic Information\r\n\r\n- Version with issue: 3.3.0967583\r\n- IDE: VS4Mac 7.7.2\r\n- Platform Target Framework:\r\n  - iOS:  12.2.1.12\r\n\r\n\r\nThanks for looking into it. \r\n"},{"Id":"8836122530","Type":"IssuesEvent","CreatedAt":"2019-01-04T20:07:22","Actor":"senbeiwabaka","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/4902","RelatedDescription":"Opened issue \"[WPF] Slider converts Value to minimum when minimum is greater than zero\" (#4902) at xamarin/Xamarin.Forms","RelatedBody":"<!-- Bug report best practices: https://github.com/xamarin/Xamarin.Forms/wiki/Submitting-Issues -->\r\n\r\n### Description\r\nAs a developer, if I set the minimum value of a slider to anything other than 0, Xamarin.WPF will set the value to the minimum value.\r\n\r\n### Steps to Reproduce\r\n\r\n1. Set Minimum to 8 \r\n2. Set Maximum to any number greater than 8\r\n3. Bind Value to a property\r\n4. Set property value to a value greater than 8 but less than Maximum\r\n\r\n### Expected Behavior\r\nValue should be what you set it to.\r\n\r\n### Actual Behavior\r\nValue gets set to minimum.\r\n\r\n### Basic Information\r\n\r\n- Version with issue: 3.4.X\r\n- Last known good version: N/A\r\n- IDE: Visual Studio 2017 15.9.4\r\n- Platform Target Frameworks: \r\n  - WPF:  3.4\r\n- Nuget Packages: Xamarin.Forms, Xamarin.Platforms.WPF\r\n- Affected Devices: Windows?\r\n\r\n\r\n"},{"Id":"8835912758","Type":"IssuesEvent","CreatedAt":"2019-01-04T19:21:45","Actor":"PureWeen","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/3212","RelatedDescription":"Closed issue \"Get error when using FlexLayout with Xamarin Live Player\" (#3212) at xamarin/Xamarin.Forms","RelatedBody":"Xamarin Forms Version: 3.1.0583944 \r\nXamarin Live Player Version : beta V1.5.196 (696)\r\n\r\nError : \r\n\r\n**Position 7:6. Type FlexLayout not found in xmlns http://xamarin.com/schemas/2014/forms          \r\nDependent project myProject.csproj failed to build, using old version.**  "},{"Id":"8835912081","Type":"IssuesEvent","CreatedAt":"2019-01-04T19:21:36","Actor":"PureWeen","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/4884","RelatedDescription":"Closed issue \" Bottom TabbedPage not working with Xamarin Live Player from Android\" (#4884) at xamarin/Xamarin.Forms","RelatedBody":"IDE vs 2017 15.9\r\nNetStandard.Library v2.0.3\r\nXamarinForm 3.4.0.1008975\r\nWindows 10\r\n\r\nTabbedPage.Xaml looks like this:\r\n`<?xml version=\"1.0\" encoding=\"utf-8\" ?>\r\n<TabbedPage xmlns=\"https://xamarin.com/schemas/2014/forms\"            \r\nxmlns:x=\"https://schemas.microsoft.com/winfx/2009/xaml\"            \r\nx:Class=\"Spolujizda.MainTabbedPage\"            \r\nBarTextColor=\"Black\"            \r\nBarBackgroundColor=\"#f1f1f1\"            \r\nxmlns:android=\"clr-namespace:Xamarin.Forms.PlatformConfiguration.AndroidSpecific;assembly=Xamarin.Forms.Core\"            \r\nandroid:TabbedPage.ToolbarPlacement=\"Bottom\"            \r\nandroid:TabbedPage.BarItemColor=\"#999999\"            \r\nandroid:TabbedPage.BarSelectedItemColor=\"Black\">\r\n</TabbedPage>`\r\n\r\nWhen I build it in VS, it builds fine.\r\nWhen I deploy it into Hyper-V Android Emulator, it builds and works fine.\r\nHowever when I try to deploy it via Xamarin Live Player to my Google Pixel 2 I get this in output:\r\n\r\n`Start Spolujizda.Android, Google Pixel 2 Player, .\r\nAttempting connection to debug address: 192.168.88.11:37847.\r\nConnected to: 192.168.88.11:37847.\r\nDeploying C:\\dev\\csharp\\spolujizda\\Spolujizda\\Spolujizda.Android\\Spolujizda.Android.csproj...\r\nGot device info: Google Pixel 2 Player (Android) @ 192.168.88.11:37847\r\nSynchronizing files...\r\nBuilding and running...\r\nBuilt with 4 messages.\r\n(1,1): error: Position 8:13. No property, bindable property, or event found for 'ToolbarPlacement', or mismatching type between value and property.\r\n(1,1): error: Position 8:13. No property, bindable property, or event found for 'ToolbarPlacement', or mismatching type between value and property.\r\n(1,1): error: Dependent project Spolujizda.csproj failed to build, using old version.\r\nC:\\dev\\csharp\\spolujizda\\Spolujizda\\Spolujizda.Android\\MainActivity.cs(1,1): error: The type or namespace name 'App' could not be found (are you missing a using directive or an assembly reference?)\r\nFailed to debug your app.`"}],"ResultType":"GitHubEvent"},"Macios":{"Events":[{"Id":"8836698053","Type":"IssuesEvent","CreatedAt":"2019-01-04T22:29:27","Actor":"spouliot","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/xamarin-macios/issues/5347","RelatedDescription":"Closed issue \"Calling ARConfiguration.SupportedVideoFormats crash\" (#5347) at xamarin/xamarin-macios","RelatedBody":"### Steps to Reproduce\r\n\r\n1.  call `ARConfiguration.SupportedVideoFormats`\r\n\r\n### Expected Behavior\r\n\r\nno crash\r\n\r\n### Actual Behavior\r\n\r\nNative exception `NSInvalidArgumentException Reason: Supported video formats should be called on individual configuration class` leading to crash\r\n\r\n"},{"Id":"8836697659","Type":"PullRequestEvent","CreatedAt":"2019-01-04T22:29:20","Actor":"spouliot","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/5348","RelatedDescription":"Merged pull request \"[arkit] Fix crash in ARConfiguration.SupportedVideoFormats. Fixes #5347\" (#5348) at xamarin/xamarin-macios","RelatedBody":"Even if 'supportedVideoFormats' is static the type is abstract.\n\n> Important\n> ARConfiguration is an abstract base class, so its implementation of\n> this property always returns an empty array. Read this property from\n> the configuration subclass you plan to use for your AR session, such\n> as ARWorldTrackingConfiguration or ARFaceTrackingConfiguration.\nhttps://developer.apple.com/documentation/arkit/arconfiguration/2942261-supportedvideoformats?language=objc\n\nand this behave differently in Objective-C (than .net) as every (static)\nmethod will be different (and not a single implementation like C#).\n\nThe existing implementation (as a property) calls `ARConfiguration`\nimplementation which simply throws a (native) exception\n\n> NSInvalidArgumentException Reason: Supported video formats should be called on individual configuration class\n\nThe solution is to obsolete the property (can't be subclassed in .net\nsince it's static) and add, only on the subclasses, a method that\ncall the 'supportedVideoFormats' selector on the current (not base)\ntype.\n\nAdded unit test to detect the addition of newer subclasses - since they\nwill also need to expose this method.\n\nreference: https://github.com/xamarin/xamarin-macios/issues/5347"},{"Id":"8836346934","Type":"IssuesEvent","CreatedAt":"2019-01-04T21:00:39","Actor":"praeclarum","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/issues/5349","RelatedDescription":"Opened issue \"NSDocument.FileAttributesToWrite should not throw for null absoluteOriginalContentsUrl\" (#5349) at xamarin/xamarin-macios","RelatedBody":"Apple docs say that overrides should always call the base and merge the results.\r\n\r\nWhen a document is unsaved, `absoluteOriginalContentsUrl` will be null. This makes it impossible to call the base:\r\n\r\n```csharp\r\npublic override NSDictionary FileAttributesToWrite (NSUrl toUrl, string typeName, NSSaveOperationType saveOperation, NSUrl absoluteOriginalContentsUrl, out NSError outError)\r\n\t\t{\r\n\t\t\tvar b = base.FileAttributesToWrite (toUrl, typeName, saveOperation, absoluteOriginalContentsUrl, out outError);\r\n```\r\n\r\nThe binding should just pass the null on.\r\n\r\n### Environment\r\n\r\n```\r\n=== Visual Studio Enterprise 2017 for Mac ===\r\n\r\nVersion 7.7.2 (build 21)\r\nInstallation UUID: 4ba352e1-73e8-4dab-a9db-28012ca05af8\r\n\tGTK+ 2.24.23 (Raleigh theme)\r\n\tXamarin.Mac 4.4.1.178 (master / eeaeb7e6)\r\n\r\n\tPackage version: 516000221\r\n\r\n=== Mono Framework MDK ===\r\n\r\nRuntime:\r\n\tMono 5.16.0.221 (2018-06/b63e5378e38) (64-bit)\r\n\tPackage version: 516000221\r\n\r\n=== NuGet ===\r\n\r\nVersion: 4.8.0.5385\r\n\r\n=== .NET Core ===\r\n\r\nRuntime: /usr/local/share/dotnet/dotnet\r\nRuntime Versions:\r\n\t3.0.0-preview-27122-01\r\n\t2.1.2\r\n\t2.1.0-preview2-26406-04\r\n\t2.0.3\r\nSDK: /usr/local/share/dotnet/sdk/3.0.100-preview-009812/Sdks\r\nSDK Versions:\r\n\t3.0.100-preview-009812\r\n\t2.1.302\r\n\t2.1.300-preview2-008530\r\n\t2.0.3\r\nMSBuild SDKs: /Library/Frameworks/Mono.framework/Versions/5.16.0/lib/mono/msbuild/15.0/bin/Sdks\r\n\r\n=== Xamarin.Profiler ===\r\n\r\nVersion: 1.6.4\r\nLocation: /Applications/Xamarin Profiler.app/Contents/MacOS/Xamarin Profiler\r\n\r\n=== Apple Developer Tools ===\r\n\r\nXcode 10.1 (14460.46)\r\nBuild 10B61\r\n\r\n=== Xamarin.Mac ===\r\n\r\nVersion: 5.2.1.12 (Visual Studio Enterprise)\r\nHash: 65ec520f\r\nBranch: \r\nBuild date: 2018-12-05 12:06:09-0500\r\n\r\n=== Xamarin.iOS ===\r\n\r\nVersion: 12.2.1.12 (Visual Studio Enterprise)\r\nHash: 65ec520f\r\nBranch: d15-9\r\nBuild date: 2018-12-05 12:06:09-0500\r\n\r\n=== Xamarin.Android ===\r\n\r\nVersion: 9.1.4.2 (Visual Studio Enterprise)\r\nAndroid SDK: /Users/fak/Library/Developer/Xamarin/android-sdk-macosx\r\n\tSupported Android versions:\r\n\t\t7.0 (API level 24)\r\n\t\t7.1 (API level 25)\r\n\t\t8.1 (API level 27)\r\n\r\nSDK Tools Version: 26.1.1\r\nSDK Platform Tools Version: 26.0.2\r\nSDK Build Tools Version: 26.0.3\r\n\r\nJava SDK: /Users/fak/Library/Developer/Xamarin/jdk/microsoft_dist_openjdk_1.8.0.9\r\nopenjdk version \"1.8.0-9\"\r\nOpenJDK Runtime Environment (build 1.8.0-9-microsoft-b00)\r\nOpenJDK 64-Bit Server VM (build 25.71-b00, mixed mode)\r\n\r\nAndroid Designer EPL code available here:\r\nhttps://github.com/xamarin/AndroidDesigner.EPL\r\n\r\n=== Android Device Manager ===\r\n\r\nVersion: 7.7.1.0\r\nHash: 06ceaea1\r\n\r\n=== Xamarin Inspector ===\r\n\r\nVersion: 1.4.3\r\nHash: db27525\r\nBranch: 1.4-release\r\nBuild date: Mon, 09 Jul 2018 21:20:18 GMT\r\nClient compatibility: 1\r\n\r\n=== Build Information ===\r\n\r\nRelease ID: 707020021\r\nGit revision: f1fea53df9eb0bb5890a9563c0d7ea7b03922144\r\nBuild date: 2018-12-14 18:37:35+00\r\nBuild branch: release-7.7\r\nXamarin extensions: 9c5cea335e6a9ce4ccfde31c4aa06c25a3576085\r\n\r\n=== Operating System ===\r\n\r\nMac OS X 10.14.2\r\nDarwin 18.2.0 Darwin Kernel Version 18.2.0\r\n    Mon Nov 12 20:24:46 PST 2018\r\n    root:xnu-4903.231.4~2/RELEASE_X86_64 x86_64\r\n\r\n=== Enabled user installed extensions ===\r\n\r\nMSBuild Editor 2.1.0\r\n\r\n```\r\n\r\n"},{"Id":"8835825065","Type":"PullRequestEvent","CreatedAt":"2019-01-04T19:02:43","Actor":"spouliot","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/5348","RelatedDescription":"Opened pull request \"[arkit] Fix crash in ARConfiguration.SupportedVideoFormats. Fixes #5347\" (#5348) at xamarin/xamarin-macios","RelatedBody":"Even if 'supportedVideoFormats' is static the type is abstract.\n\n> Important\n> ARConfiguration is an abstract base class, so its implementation of\n> this property always returns an empty array. Read this property from\n> the configuration subclass you plan to use for your AR session, such\n> as ARWorldTrackingConfiguration or ARFaceTrackingConfiguration.\nhttps://developer.apple.com/documentation/arkit/arconfiguration/2942261-supportedvideoformats?language=objc\n\nand this behave differently in Objective-C (than .net) as every (static)\nmethod will be different (and not a single implementation like C#).\n\nThe existing implementation (as a property) calls `ARConfiguration`\nimplementation which simply throws a (native) exception\n\n> NSInvalidArgumentException Reason: Supported video formats should be called on individual configuration class\n\nThe solution is to obsolete the property (can't be subclassed in .net\nsince it's static) and add, only on the subclasses, a method that\ncall the 'supportedVideoFormats' selector on the current (not base)\ntype.\n\nAdded unit test to detect the addition of newer subclasses - since they\nwill also need to expose this method.\n\nreference: https://github.com/xamarin/xamarin-macios/issues/5347"},{"Id":"8835676211","Type":"IssuesEvent","CreatedAt":"2019-01-04T18:29:40","Actor":"spouliot","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/xamarin-macios/issues/5345","RelatedDescription":"Closed issue \"Add null allowing to `MKAnnotationView` ctor parameters \" (#5345) at xamarin/xamarin-macios","RelatedBody":"### Steps to Reproduce\r\n\r\n1. Download a [sample](https://github.com/xamarin/ios-samples/tree/map-callouts/MapCallouts)\r\n2. Open and run it\r\n\r\n--- \r\nYou can find the original sample [here](https://developer.apple.com/documentation/mapkit/mapkit_annotations/annotating_a_map_with_custom_data). As you can find there - swift allows passing `nil` into the `base (super)` constructor. \r\nApple documentation for this constructor is [here](https://developer.apple.com/documentation/mapkit/mkannotationview/1452779-init ). \r\n\r\n### Expected Behavior\r\nIt doesn't crush\r\n\r\n### Actual Behavior\r\nIt crashes with ANE on `CustomAnnotationView` creation step. \r\n\r\n### Environment\r\n\r\n1. VSfM\r\nhttps://gist.github.com/mykyta-bondarenko-gl/4ae8c636f541a497619c8448ade6f437\r\n\r\n### Build Logs\r\n\r\n1. Build Log\r\nhttps://gist.github.com/mykyta-bondarenko-gl/48f224f3d1e422f863f7341b48dc09e5\r\n\r\n### Example Project\r\n\r\n[MapCallouts](https://github.com/xamarin/ios-samples/tree/map-callouts/MapCallouts) "},{"Id":"8835649382","Type":"PullRequestEvent","CreatedAt":"2019-01-04T18:23:35","Actor":"spouliot","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/5346","RelatedDescription":"Merged pull request \"[mapkit] Add missing [NullAllowed] in initWithAnnotation:reuseIdentifier: Fixes 5345\" (#5346) at xamarin/xamarin-macios","RelatedBody":"It was missing on the first argument for `MKAnnotationView` and\ninconsistent on subclasses.\n\nreferences: https://github.com/xamarin/xamarin-macios/issues/5345"},{"Id":"8835082412","Type":"IssuesEvent","CreatedAt":"2019-01-04T16:25:14","Actor":"spouliot","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/issues/5347","RelatedDescription":"Opened issue \"Calling ARConfiguration.SupportedVideoFormats crash\" (#5347) at xamarin/xamarin-macios","RelatedBody":"### Steps to Reproduce\r\n\r\n1.  call `ARConfiguration.SupportedVideoFormats`\r\n\r\n### Expected Behavior\r\n\r\nno crash\r\n\r\n### Actual Behavior\r\n\r\nNative exception `NSInvalidArgumentException Reason: Supported video formats should be called on individual configuration class` leading to crash\r\n\r\n"},{"Id":"8834912381","Type":"IssuesEvent","CreatedAt":"2019-01-04T15:54:22","Actor":"spouliot","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/xamarin-macios/issues/5343","RelatedDescription":"Closed issue \"Run time Exception while removing the my custom control Element from main.xaml in Xamarin MAC platform\" (#5343) at xamarin/xamarin-macios","RelatedBody":"I create my Custom control window and use that custom control into my main.xaml file while closing that custom control window null reference exception fired for perficular MAC Platform only for other plafrom IOS, Android, and UWP it is working fine.\r\n\r\nIt is showing error message of Message \"Object reference not set to an instance of an object\" But the other exception that i found in my stack-trace is System.NotImplementedException:   The method or operation is not implemented.\r\n\r\nAfter the exception my application get crashed\r\n\r\n**This issue is occured after updation of All Xamarin dll, MAC OS, XCode, MAC Visual Studio and other updates.**\r\n\r\n### **Stack Trace of my Error**\r\n\r\nStackTrace | at (wrapper   managed-to-native)   AppKit.NSApplication.NSApplicationMain(int,string[])   at   AppKit.NSApplication.Main (System.String[] args) [0x00040] in   /Library/Frameworks/Xamarin.Mac.framework/Versions/5.2.1.12/src/   Xamarin.Mac/AppKit/NSApplication.cs:100          at   MyApplication.MainClass.Main (System.String[] args)    [0x00017] in   /MyApplication/Main.cs:11\r\n-- | --\r\nHResult | -2147467261\r\nMessage | \"Object   reference not set to an instance of an object\"\r\nStatic members       -Non-public members           _COMPlusExceptionCode | -532462766\r\nNon-public members |  \r\nIsTransient | System.NotImplementedException:   The method or operation is not implemented.\r\n_Hresult | -2147467261\r\n_className | \"System.NullReferenceException\"\r\n_message | \"Object   reference not set to an instance of an object\"\r\n\r\n### **Details of my System**\r\n\r\n**=== Visual Studio Community 2017 for Mac ===**\r\n\r\nVersion 7.7.2 (build 21)\r\nInstallation UUID: c06e658b-fea2-4764-b696-bc443c0dda7f\r\n\tGTK+ 2.24.23 (Raleigh theme)\r\n\tXamarin.Mac 4.4.1.178 (master / eeaeb7e6)\r\n\r\n\tPackage version: 516000221\r\n\r\n**=== Mono Framework MDK ===**\r\n\r\nRuntime:\r\n\tMono 5.16.0.221 (2018-06/b63e5378e38) (64-bit)\r\n\tPackage version: 516000221\r\n\r\n**=== NuGet ===**\r\n\r\nVersion: 4.8.0.5385\r\n\r\n**=== .NET Core ===**\r\n\r\nRuntime: /usr/local/share/dotnet/dotnet\r\nRuntime Versions:\r\n\t2.1.2\r\n\t2.0.5\r\nSDK: /usr/local/share/dotnet/sdk/2.1.302/Sdks\r\nSDK Versions:\r\n\t2.1.302\r\n\t2.1.4\r\nMSBuild SDKs: /Library/Frameworks/Mono.framework/Versions/5.16.0/lib/mono/msbuild/15.0/bin/Sdks\r\n\r\n**=== Xamarin.Profiler ===**\r\n\r\nVersion: 1.6.4\r\nLocation: /Applications/Xamarin Profiler.app/Contents/MacOS/Xamarin Profiler\r\n\r\n**=== Apple Developer Tools ===**\r\n\r\nXcode 10.1 (14460.46)\r\nBuild 10B61\r\n\r\n**=== Xamarin.Mac ===**\r\n\r\nVersion: 5.2.1.12 (Visual Studio Community)\r\nHash: 65ec520f\r\nBranch: \r\nBuild date: 2018-12-05 12:06:09-0500\r\n\r\n**=== Xamarin.Android ===**\r\n\r\nVersion: 9.1.4.2 (Visual Studio Community)\r\nAndroid SDK: /Users/cygnet/Library/Developer/Xamarin/android-sdk-macosx\r\n\tSupported Android versions:\r\n\t\t5.1 (API level 22)\r\n\t\t6.0 (API level 23)\r\n\t\t7.1 (API level 25)\r\n\t\t8.0 (API level 26)\r\n\t\t8.1 (API level 27)\r\n\r\nSDK Tools Version: 26.1.1\r\nSDK Platform Tools Version: 26.0.2\r\nSDK Build Tools Version: 26.0.3\r\n\r\nJava SDK: /Users/cygnet/Library/Developer/Xamarin/jdk/microsoft_dist_openjdk_1.8.0.9\r\nopenjdk version \"1.8.0-9\"\r\nOpenJDK Runtime Environment (build 1.8.0-9-microsoft-b00)\r\nOpenJDK 64-Bit Server VM (build 25.71-b00, mixed mode)\r\n\r\nAndroid Designer EPL code available here:\r\nhttps://github.com/xamarin/AndroidDesigner.EPL\r\n\r\n**=== Android Device Manager ===**\r\n\r\nVersion: 7.7.1.0\r\nHash: 06ceaea1\r\n\r\n**=== Xamarin Inspector ===**\r\n\r\nVersion: 1.4.3\r\nHash: db27525\r\nBranch: 1.4-release\r\nBuild date: Mon, 09 Jul 2018 21:20:18 GMT\r\nClient compatibility: 1\r\n\r\n**=== Xamarin.iOS ===**\r\n\r\nVersion: 12.2.1.12 (Visual Studio Community)\r\nHash: 65ec520f\r\nBranch: d15-9\r\nBuild date: 2018-12-05 12:06:09-0500\r\n\r\n**=== Build Information ===**\r\n\r\nRelease ID: 707020021\r\nGit revision: f1fea53df9eb0bb5890a9563c0d7ea7b03922144\r\nBuild date: 2018-12-14 18:37:35+00\r\nBuild branch: release-7.7\r\nXamarin extensions: 9c5cea335e6a9ce4ccfde31c4aa06c25a3576085\r\n\r\n**=== Operating System ===**\r\n\r\nMac OS X 10.13.6\r\nDarwin 17.7.0 Darwin Kernel Version 17.7.0\r\n    Thu Jun 21 22:53:14 PDT 2018\r\n    root:xnu-4570.71.2~1/RELEASE_X86_64 x86_64\r\n\r\n\r\n"},{"Id":"8834873042","Type":"PullRequestEvent","CreatedAt":"2019-01-04T15:47:18","Actor":"spouliot","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/5346","RelatedDescription":"Opened pull request \"[mapkit] Add missing [NullAllowed] in initWithAnnotation:reuseIdentifier: Fixes 5345\" (#5346) at xamarin/xamarin-macios","RelatedBody":"It was missing on the first argument for `MKAnnotationView` and\ninconsistent on subclasses.\n\nreferences: https://github.com/xamarin/xamarin-macios/issues/5345"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1080559862642282502","CreatedAt":"2019-01-02T20:22:01+00:00","UserScreenname":"xamarinhq","Text":"It’s a new year with tons of new and awesome Xamarin and .NET Community events coming this month. Get the full list… https://t.co/ZOykEyCRBN","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":56,"FavoriteCount":21,"RawContent":null},{"Id":"1075783769876033536","CreatedAt":"2018-12-20T16:03:32+00:00","UserScreenname":"xamarinhq","Text":"Introducing Xamarin.Essentials, a new library that abstracts native APIs into a set of cross-platform APIs giving y… https://t.co/EMM97iFY9o","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":269,"FavoriteCount":119,"RawContent":null},{"Id":"1072256672498966533","CreatedAt":"2018-12-10T22:28:06+00:00","UserScreenname":"xamarinhq","Text":"CarouselView is Here! Xamarin.Forms 4.0 now includes an entirely new point of view. ...as part of the upcoming rele… https://t.co/Vh8UMRM4ez","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":154,"FavoriteCount":68,"RawContent":null},{"Id":"1070425707770195968","CreatedAt":"2018-12-05T21:12:30+00:00","UserScreenname":"xamarinhq","Text":"Yesterday at Microsoft Connect(); 2018 we announced our plans &amp; preview for Xamarin.Forms 4.0. This post will give… https://t.co/oNXLJGsrQ8","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":144,"FavoriteCount":74,"RawContent":null},{"Id":"1070075277101944833","CreatedAt":"2018-12-04T22:00:01+00:00","UserScreenname":"xamarinhq","Text":"Today, at #MSFTConnect 2018, we have several exciting announcements about brand new capabilities and foundational i… https://t.co/olEK9QjR1j","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":54,"FavoriteCount":38,"RawContent":null},{"Id":"1069721699225088008","CreatedAt":"2018-12-03T22:35:02+00:00","UserScreenname":"xamarinhq","Text":"Here's what we have coming up this month for #Xamarin and #dotNET Developer Events in December:… https://t.co/oAMbLqXh9f","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":45,"FavoriteCount":18,"RawContent":null},{"Id":"1068601941339582469","CreatedAt":"2018-11-30T20:25:31+00:00","UserScreenname":"xamarinhq","Text":"Now announcing multi-targeting with Android Support Library v28. \n\n...but what is multi-targeting you ask? Well, no… https://t.co/oBJ1j9vP6P","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":94,"FavoriteCount":53,"RawContent":null},{"Id":"1067915081495846913","CreatedAt":"2018-11-28T22:56:10+00:00","UserScreenname":"xamarinhq","Text":"The Xamarin #Android team has been working hard on improving Build Performance &amp; Reliability in both #VS2017 v15.9… https://t.co/c4iSbZJDy9","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":84,"FavoriteCount":45,"RawContent":null},{"Id":"1063457672048058371","CreatedAt":"2018-11-16T15:44:01+00:00","UserScreenname":"xamarinhq","Text":"Announcing the release of Xamarin.Forms 3.4.0 w/ even more bug fixes and another new highly requested feature, an I… https://t.co/EJadLHYi73","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":178,"FavoriteCount":105,"RawContent":null},{"Id":"1063145593562902528","CreatedAt":"2018-11-15T19:03:56+00:00","UserScreenname":"xamarinhq","Text":"Build and deploy #ethereum smart contracts using the new @trufflesuite extension for #VSCode from @MSFTBlockchain… https://t.co/nEbiFUYaM2","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":37,"FavoriteCount":18,"RawContent":null},{"Id":"1062819180100100099","CreatedAt":"2018-11-14T21:26:53+00:00","UserScreenname":"xamarinhq","Text":"Want to get started w/ mobile dev using C# &amp; #Xamarin? We've got a Twitch Workshop for that.\n\nComing Friday, Nov 16… https://t.co/ce2vH9dC4t","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":114,"FavoriteCount":61,"RawContent":null},{"Id":"1058039721652297729","CreatedAt":"2018-11-01T16:55:01+00:00","UserScreenname":"xamarinhq","Text":"Get all the links you need for the world-wide, community-run mobile dev engagements happening for the Xamarin &amp;… https://t.co/eiJXYtWfvG","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":43,"FavoriteCount":26,"RawContent":null},{"Id":"1053027600086552576","CreatedAt":"2018-10-18T20:58:38+00:00","UserScreenname":"xamarinhq","Text":"TY2 you &amp; the Xamarin.Forms team we've filled in some of the features you’ve told us are important to building your… https://t.co/lwqRjrIFEi","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":62,"FavoriteCount":31,"RawContent":null},{"Id":"1052217100041945088","CreatedAt":"2018-10-16T15:18:00+00:00","UserScreenname":"xamarinhq","Text":"A full day of community-driven sessions on cross-platform mobile application development with Xamarin, DevOps with… https://t.co/07SVz6rgLT","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":53,"FavoriteCount":22,"RawContent":null},{"Id":"1050824055014744064","CreatedAt":"2018-10-12T19:02:32+00:00","UserScreenname":"xamarinhq","Text":"Now, in #VisualStudio 15.8, Dotfuscator Community can help protect your https://t.co/FGIvdxOrYa Apps at Runtime by… https://t.co/iPm1GjIrpS","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":53,"FavoriteCount":29,"RawContent":null},{"Id":"1050447051228631040","CreatedAt":"2018-10-11T18:04:28+00:00","UserScreenname":"xamarinhq","Text":"With Xamarin.Forms, the UI and app logic for your app resides in a single codebase and you get to use a single IDE… https://t.co/SMq0XwjtKL","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":62,"FavoriteCount":38,"RawContent":null},{"Id":"1047580523881799680","CreatedAt":"2018-10-03T20:13:54+00:00","UserScreenname":"xamarinhq","Text":"Do both types of testing with your Visual Studio App Center CI/CD pipeline - cover the Data Access Layer with unit… https://t.co/6y14u8p3lQ","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":65,"FavoriteCount":33,"RawContent":null},{"Id":"1046875654631886850","CreatedAt":"2018-10-01T21:33:00+00:00","UserScreenname":"xamarinhq","Text":"Microsoft named a leader in 2018 analyst reports on mobile app development. Get complimentary access to reports fro… https://t.co/EWg450kHpI","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":69,"FavoriteCount":33,"RawContent":null}]}},"RunOn":"2019-01-05T05:31:03.7691924Z","RunDurationInMilliseconds":2756}