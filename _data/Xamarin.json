{"Data":{"Blog":{"FeedItems":[{"Title":"Introducing the New Xamarin Customer Showcase","PublishedOn":"2019-03-15T16:53:07+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Developers around the world use Xamarin every day to build beautiful native mobile apps with .NET. What better way to highlight the amazing work that these developers are doing than with a customer...","Href":"https://blog.xamarin.com/new-xamarin-customer-showcase/","RawContent":null},{"Title":"A Quick Update on Google Components for iOS and Android","PublishedOn":"2019-03-13T19:12:15+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"One of the best parts about using Xamarin for mobile development is access to all of the platform APIs from C# bindings. Additionally, any native iOS or Android library can be consumed by a Xamarin...","Href":"https://blog.xamarin.com/update-google-components-ios-android/","RawContent":null},{"Title":"Enhanced Xamarin Development With MFractor","PublishedOn":"2019-03-12T15:58:18+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"This post was guest authored and contributed by Matthew Robbins. Matthew is a Microsoft MVP and the founder of MFractor, incredible Xamarin tools for Visual Studio Mac. MFractor MFractor is a powerful...","Href":"https://blog.xamarin.com/enhanced-xamarin-development-with-mfractor/","RawContent":null},{"Title":"Podcast: POP! New docs, blogs, customer showcases, and Twitch streams!","PublishedOn":"2019-03-08T17:03:42+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"The Visual Studio Mobile Developer Podcast features Matt Soucoup and James Montemagno discussing the latest and greatest in mobile and cloud development. Podcast Highlights This month&#8217;s Visual...","Href":"https://blog.xamarin.com/podcast-pop-docs-blogs-showcases-twitch/","RawContent":null},{"Title":"Beautiful Material Design for Android & iOS","PublishedOn":"2019-03-07T20:27:10+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"This week, Xamarin.Forms 3.6 shipped with another round of improvements, the most exciting of which is called Visual. Visual enables developers to create beautiful, cross-platform mobile applications...","Href":"https://blog.xamarin.com/beautiful-material-design-android-ios/","RawContent":null},{"Title":"Xamarin.Forms 3.6: Visual Has Materialized","PublishedOn":"2019-03-06T20:12:09+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We’re pleased to announce the release of Xamarin.Forms 3.6 in the usual cadence of our regular releases. In addition to the usual enhancements and bug fixes, we’re also moving our Visual feature from...","Href":"https://blog.xamarin.com/xamarin-forms-3-6-visual-has-materialized/","RawContent":null},{"Title":"Best Practices and Tips for Using Xamarin.UITest","PublishedOn":"2019-03-04T19:35:49+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We can all agree that it is very important for mobile apps to have great user interfaces, be accessible, and be extremely performant. Given the plethora of devices with different screen sizes, screen...","Href":"https://blog.xamarin.com/best-practices-tips-xamarin-uitest/","RawContent":null},{"Title":"Developer Community Events in March","PublishedOn":"2019-03-01T17:59:05+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"User groups are getting together to learn about new, exciting releases and tooling to help jumpstart their next mobile development project. Network with your local community and you too could get all...","Href":"https://blog.xamarin.com/developer-community-events-in-march/","RawContent":null},{"Title":"View PDF Files within Your Xamarin.Forms Apps Using the Syncfusion PDF Viewer","PublishedOn":"2019-02-28T17:04:29+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"This post was guest authored and contributed by Suresh Mohan. Suresh is the Product Manager for PDF Viewer at Syncfusion Software where he specializes in desktop and mobile app development. &#160;...","Href":"https://blog.xamarin.com/xamarin-forms-apps-syncfusion-pdf-viewer/","RawContent":null},{"Title":"Quick Tip: Debugging Local ASP.NET Core Web APIs on Android Emulators","PublishedOn":"2019-02-25T19:36:04+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"When developing mobile applications with a web API backend there is always a need to debug locally on your development machine. If you are using Visual Studio for Mac and debugging iOS applications...","Href":"https://blog.xamarin.com/debug-local-asp-net-core-web-apis-android-emulators/","RawContent":null}],"ResultType":"Feed"},"Android":{"Events":[{"Id":"9254854071","Type":"PullRequestEvent","CreatedAt":"2019-03-16T03:16:17","Actor":"jonathanpeppers","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2842","RelatedDescription":"Opened pull request \"[build] evaluate GetPathToStandardLibraries only when TFV is missing\" (#2842) at xamarin/xamarin-android","RelatedBody":"Downstream in monodroid, we are getting a build error such as:\r\n\r\n    OpenTK-0.9.JCW.csproj: error : /Users/builder/jenkins/workspace/monodroid-pr/monodroid/src/OpenGLES/OpenTK-0.9.JCW.csproj:\r\n        /Users/builder/jenkins/workspace/monodroid-pr/monodroid/external/xamarin-android/Configuration.props: Project file could not be imported, it was being imported by /Users/builder/jenkins/workspace/monodroid-pr/monodroid/src/OpenGLES/OpenTK-0.9.JCW.csproj: Microsoft.Build.Utilities.ToolLocationHelper\r\n    OpenTK-0.9.JCW.csproj: Microsoft.Build.BuildEngine.InvalidProjectFileException: /Users/builder/jenkins/workspace/monodroid-pr/monodroid/src/OpenGLES/OpenTK-0.9.JCW.csproj: /Users/builder/jenkins/workspace/monodroid-pr/monodroid/external/xamarin-android/Configuration.props: Project file could not be imported, it was being imported by /Users/builder/jenkins/workspace/monodroid-pr/monodroid/src/OpenGLES/OpenTK-0.9.JCW.csproj: Microsoft.Build.Utilities.ToolLocationHelper ---> Microsoft.Build.BuildEngine.InvalidProjectFileException: /Users/builder/jenkins/workspace/monodroid-pr/monodroid/external/xamarin-android/Configuration.props: Project file could not be imported, it was being imported by /Users/builder/jenkins/workspace/monodroid-pr/monodroid/src/OpenGLES/OpenTK-0.9.JCW.csproj: Microsoft.Build.Utilities.ToolLocationHelper ---> System.NotImplementedException: Microsoft.Build.Utilities.ToolLocationHelper\r\n        at Microsoft.Build.BuildEngine.Expression.GetTypeForStaticMethod (System.String typeName) [0x00522] in <64f40797b3d54493a3cca81a221ded16>:0\r\n        at Microsoft.Build.BuildEngine.Expression.ParsePropertyFunction (System.String text, System.Int32& pos) [0x0003c] in <64f40797b3d54493a3cca81a221ded16>:0\r\n        at Microsoft.Build.BuildEngine.Expression.ExtractProperties (System.String text) [0x0009c] in <64f40797b3d54493a3cca81a221ded16>:0\r\n        at Microsoft.Build.BuildEngine.Expression.Parse (System.String expression, Microsoft.Build.BuildEngine.ParseOptions options) [0x000e9] in <64f40797b3d54493a3cca81a221ded16>:0\r\n        at Microsoft.Build.BuildEngine.Expression.ParseAs[T] (System.String expression, Microsoft.Build.BuildEngine.ParseOptions options, Microsoft.Build.BuildEngine.Project project, Microsoft.Build.BuildEngine.ExpressionOptions exprOptions) [0x00005] in <64f40797b3d54493a3cca81a221ded16>:0\r\n        at Microsoft.Build.BuildEngine.BuildProperty.Evaluate () [0x00019] in <64f40797b3d54493a3cca81a221ded16>:0\r\n        at Microsoft.Build.BuildEngine.BuildPropertyGroup.Evaluate () [0x0003a] in <64f40797b3d54493a3cca81a221ded16>:0\r\n        at Microsoft.Build.BuildEngine.GroupingCollection.EvaluateBuildPropertyGroup (Microsoft.Build.BuildEngine.BuildPropertyGroup bpg) [0x00024] in <64f40797b3d54493a3cca81a221ded16>:0\r\n        at Microsoft.Build.BuildEngine.GroupingCollection.Evaluate (Microsoft.Build.BuildEngine.EvaluationType type) [0x00033] in <64f40797b3d54493a3cca81a221ded16>:0\r\n        at Microsoft.Build.BuildEngine.Project.AddImport (System.Xml.XmlElement xmlElement, Microsoft.Build.BuildEngine.ImportedProject importingProject, System.Boolean evaluate_properties) [0x0001e] in <64f40797b3d54493a3cca81a221ded16>:0\r\n        at Microsoft.Build.BuildEngine.Project.ProcessElements (System.Xml.XmlElement rootElement, Microsoft.Build.BuildEngine.ImportedProject ip) [0x00213] in <64f40797b3d54493a3cca81a221ded16>:0\r\n        at Microsoft.Build.BuildEngine.Import.Evaluate (System.Boolean ignoreMissingImports) [0x0008d] in <64f40797b3d54493a3cca81a221ded16>:0\r\n        at Microsoft.Build.BuildEngine.Project.AddSingleImport (System.Xml.XmlElement xmlElement, System.String projectPath, Microsoft.Build.BuildEngine.ImportedProject importingProject, System.String from_source_msg) [0x00142] in <64f40797b3d54493a3cca81a221ded16>:0\r\n        at Microsoft.Build.BuildEngine.Project+<>c__DisplayClass110_0.<AddImport>b__0 (System.String importPath, System.String from_source_msg) [0x00000] in <64f40797b3d54493a3cca81a221ded16>:0\r\n        at Microsoft.Build.BuildEngine.Import.ForEachExtensionPathTillFound (System.Xml.XmlElement xmlElement, Microsoft.Build.BuildEngine.Project project, Microsoft.Build.BuildEngine.ImportedProject importingProject, System.Func`3[T1,T2,TResult] func) [0x001d7] in <64f40797b3d54493a3cca81a221ded16>:0\r\n        --- End of inner exception stack trace ---\r\n        at Microsoft.Build.BuildEngine.Import.ForEachExtensionPathTillFound (System.Xml.XmlElement xmlElement, Microsoft.Build.BuildEngine.Project project, Microsoft.Build.BuildEngine.ImportedProject importingProject, System.Func`3[T1,T2,TResult] func) [0x00205] in <64f40797b3d54493a3cca81a221ded16>:0\r\n        at Microsoft.Build.BuildEngine.Project.AddImport (System.Xml.XmlElement xmlElement, Microsoft.Build.BuildEngine.ImportedProject importingProject, System.Boolean evaluate_properties) [0x0006e] in <64f40797b3d54493a3cca81a221ded16>:0\r\n        at Microsoft.Build.BuildEngine.Project.ProcessElements (System.Xml.XmlElement rootElement, Microsoft.Build.BuildEngine.ImportedProject ip) [0x00213] in <64f40797b3d54493a3cca81a221ded16>:0\r\n        at Microsoft.Build.BuildEngine.Project.ProcessXml () [0x000b6] in <64f40797b3d54493a3cca81a221ded16>:0\r\n        at Microsoft.Build.BuildEngine.Project.DoLoad (System.IO.TextReader textReader) [0x000fe] in <64f40797b3d54493a3cca81a221ded16>:0\r\n        --- End of inner exception stack trace ---\r\n        at Microsoft.Build.BuildEngine.Project.DoLoad (System.IO.TextReader textReader) [0x0012f] in <64f40797b3d54493a3cca81a221ded16>:0\r\n        at Microsoft.Build.BuildEngine.Project.Load (System.String projectFileName, Microsoft.Build.BuildEngine.ProjectLoadSettings projectLoadSettings) [0x00123] in <64f40797b3d54493a3cca81a221ded16>:0\r\n        at Microsoft.Build.BuildEngine.Project.Load (System.String projectFileName) [0x00000] in <64f40797b3d54493a3cca81a221ded16>:0\r\n        at Microsoft.Build.BuildEngine.Engine.BuildProjectFileInternal (System.String projectFile, System.String[] targetNames, Microsoft.Build.BuildEngine.BuildPropertyGroup globalProperties, System.Collections.IDictionary targetOutputs, Microsoft.Build.BuildEngine.BuildSettings buildFlags, System.String toolsVersion) [0x0009f] in <64f40797b3d54493a3cca81a221ded16>:0\r\n        at Microsoft.Build.BuildEngine.Engine.BuildProjectFile (System.String projectFile, System.String[] targetNames, Microsoft.Build.BuildEngine.BuildPropertyGroup globalProperties, System.Collections.IDictionary targetOutputs, Microsoft.Build.BuildEngine.BuildSettings buildFlags, System.String toolsVersion) [0x00008] in <64f40797b3d54493a3cca81a221ded16>:0\r\n\r\nSince it says:\r\n\r\n    Configuration.props: Project file could not be imported\r\n\r\nI think it is crashing at:\r\n\r\n    <_StandardLibraryPath>$([Microsoft.Build.Utilities.ToolLocationHelper]::GetPathToStandardLibraries('.NETFramework', 'v4.7.2', ''))</_StandardLibraryPath>\r\n\r\nThis line should be conditional if `$(TargetFrameworkVersion)` is\r\nblank. Hopefully this will avoid the call to\r\n`Microsoft.Build.BuildEngine.Expression.GetTypeForStaticMethod`, which\r\n*should* prevent this crash."},{"Id":"9254061621","Type":"PullRequestEvent","CreatedAt":"2019-03-15T21:56:12","Actor":"jonathanpeppers","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2841","RelatedDescription":"Opened pull request \"spec & protype of Android App Bundles\" (#2841) at xamarin/xamarin-android","RelatedBody":"This is a rough prototype that gets us this far:\r\n\r\n* We generate a `.aab` file\r\n* We can generate a `.apks` file specific for an attached device\r\n* We can *install* the `.apks` file\r\n\r\nThis workflow is achieved by:\r\n\r\n* The `<Aapt2Link/>` MSBuild task needs to pass `--proto-format`.\r\n* The `<AppBundleBaseZip/>` and `<BundleToolBuildBundle/>` MSBuild\r\n  tasks run instead of `<BuildApk/>`.\r\n* The `<BundleToolBuildApks/>` and `<BundleToolInstallApks/>` tasks\r\n  run instead of `adb install`. These are somewhat odd, but they use\r\n  the attached device to decide which format APK set is needed.\r\n  Otherwise the APK set was 200MB!\r\n\r\nUnfortunately the app crashes on start:\r\n\r\n    monodroid: Using runtime path: /data/app/UnnamedProject.UnnamedProject-D95CD1IP7HG9oVZimRYR9w==/lib/arm64\r\n    monodroid: Trying to load sgen from: /data/app/UnnamedProject.UnnamedProject-D95CD1IP7HG9oVZimRYR9w==/lib/arm64/libmonosgen-2.0.so\r\n    monodroid: Trying to load sgen from: /data/app/UnnamedProject.UnnamedProject-D95CD1IP7HG9oVZimRYR9w==/lib/arm64/libmonosgen-64bit-2.0.so\r\n    monodroid: Trying to load sgen from: /system/lib64/libmonosgen-2.0.so\r\n    monodroid: Cannot find 'libmonosgen-2.0.so'. Looked in the following locations:\r\n    monodroid:   /data/app/UnnamedProject.UnnamedProject-D95CD1IP7HG9oVZimRYR9w==/lib/arm64\r\n    monodroid: Do you have a shared runtime build of your app with AndroidManifest.xml android:minSdkVersion < 10 while running on a 64-bit Android 5.0 target? This combination is not supported.\r\n    monodroid: Please either set android:minSdkVersion >= 10 or use a build without the shared runtime (like default Release configuration).\r\n\r\nSome runtime changes seem to be needed, if I look around with `adb\r\nshell`:\r\n\r\n    $ run-as UnnamedProject.UnnamedProject ls -la /data/app/UnnamedProject.UnnamedProject-D95CD1IP7HG9oVZimRYR9w==/lib/arm64/\r\n    total 6\r\n    drwxr-xr-x 2 system system 3488 2019-03-15 16:20 .\r\n    drwxr-xr-x 3 system system 3488 2019-03-15 16:20 ..\r\n\r\n`lib/arm64` appears to be empty?\r\n\r\n    $ run-as UnnamedProject.UnnamedProject ls -la /data/app/UnnamedProject.UnnamedProject-D95CD1IP7HG9oVZimRYR9w==/\r\n    total 22682\r\n    drwxr-xr-x  3 system system     3488 2019-03-15 16:20 .\r\n    drwxrwx--x 67 system system    20480 2019-03-15 16:20 ..\r\n    -rw-r--r--  1 system system  2993994 2019-03-15 16:20 base.apk\r\n    drwxr-xr-x  3 system system     3488 2019-03-15 16:20 lib\r\n    -rw-r--r--  1 system system 20161118 2019-03-15 16:20 split_config.arm64_v8a.apk\r\n    -rw-r--r--  1 system system    23203 2019-03-15 16:20 split_config.xxxhdpi.apk\r\n\r\nIt appears that all the native libraries are in\r\n`split_config.arm64_v8a.apk`, and a few changes are needed to find\r\nthem.\r\n\r\nThere is still alot to do here, but I thought I could post this so far\r\nfor discussion."},{"Id":"9254004357","Type":"PullRequestEvent","CreatedAt":"2019-03-15T21:43:01","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2840","RelatedDescription":"Merged pull request \"[installers] Add missing 'libmono-native' file\" (#2840) at xamarin/xamarin-android","RelatedBody":"As far as I can tell we're not building this file for Windows. If we do need to do so, we could include the Windows build + installer update in this PR or in a future PR."},{"Id":"9253626459","Type":"PullRequestEvent","CreatedAt":"2019-03-15T20:26:23","Actor":"pjcollins","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2840","RelatedDescription":"Opened pull request \"[installers] Add missing 'libmono-native' file\" (#2840) at xamarin/xamarin-android","RelatedBody":""},{"Id":"9253624346","Type":"PullRequestEvent","CreatedAt":"2019-03-15T20:25:59","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2666","RelatedDescription":"Merged pull request \"[build] support for building with VS 2019\" (#2666) at xamarin/xamarin-android","RelatedBody":"Fixes: https://github.com/xamarin/xamarin-android/issues/2627\r\n\r\nThere are several things broken when building with MSBuild 16.0 and/or\r\nusing Visual Studio 2019.\r\n\r\n## TargetFrameworkVersion ##\r\n\r\nAnything referencing MSBuild assemblies must now be\r\n`TargetFrameworkVersion=v4.7.2`, since these assemblies are now\r\ntargeting it.\r\n\r\nWe should take this as an opportunity to consolidate all\r\n`$(TargetFrameworkVersion)`, so I moved this property into\r\n`Configuration.props`. I was able to remove the property in many\r\nprojects, and the IDE still seemed to work fine.\r\n\r\nThe only hang up is that some versions of Mono don't have v4.7.2 yet.\r\nSo I had to use the following trick:\r\n\r\n    <_StandardLibraryPath>$([Microsoft.Build.Utilities.ToolLocationHelper]::GetPathToStandardLibraries('.NETFramework', 'v4.7.2', ''))</_StandardLibraryPath>\r\n    <TargetFrameworkVersion Condition=\" '$(TargetFrameworkVersion)' == '' And '$(_StandardLibraryPath)' != '' \">v4.7.2</TargetFrameworkVersion>\r\n    <TargetFrameworkVersion Condition=\" '$(TargetFrameworkVersion)' == '' \">v4.7.1</TargetFrameworkVersion>\r\n\r\nSee: https://github.com/Microsoft/msbuild/blob/e03296fe14152b4c84e6610d2fd2fd10f1ecba82/src/Utilities/ToolLocationHelper.cs#L1736-L1747\r\n\r\nThis allows us to fallback to v4.7.1 if we have to.\r\n\r\n## Prepend<T> ##\r\n\r\nWith `$(TargetFrameworkVersion)` changing, this method:\r\n\r\n    internal static IEnumerable<T> Prepend<T> (this IEnumerable<T> l, T another) where T : XNode\r\n\r\nNow exists in the BCL, so we can remove it.\r\n\r\n## MSBuild.exe location ##\r\n\r\nIn VS 2017, MSBuild is located in:\r\n\r\n    %VsInstallDir%\\MSBuild\\15.0\\Bin\\MSBuild.exe\r\n\r\nIn VS 2019, it is now located in:\r\n\r\n    %VsInstallDir%\\MSBuild\\Current\\Bin\\MSBuild.exe\r\n\r\nRight now we have a bit of code that \"finds\" Visual Studio, MSBuild,\r\netc. so we should take this opportunity to improve it.\r\n\r\nWe originally thought about MSBuildLocator:\r\n\r\nhttps://www.nuget.org/packages/Microsoft.Build.Locator/\r\nhttps://github.com/Microsoft/MSBuildLocator\r\n\r\nBut the licensing of the library was concerning... We were uncertain\r\nif we could redistribute MSBuildLocator as part of an OSS product.\r\n\r\nFor now we can just use `vswhere.exe`:\r\n\r\nhttps://github.com/Microsoft/vswhere/wiki/Find-MSBuild\r\n\r\nI made a simple `vswhere.csproj` we can reference where this\r\nfunctionality is needed. Currently `xabuild` and\r\n`Xamarin.ProjectTools` need to locate the Visual Studio directory.\r\n\r\n## Other breakage in xabuild.exe ##\r\n\r\nIn VS 2019, the path to Roslyn is a bit odd:\r\n\r\n    %VsInstallDir%\\MSBuild\\15.0\\Bin\\Roslyn\r\n\r\nI had to rework things to still work when combined with a different\r\nMSBuild location:\r\n\r\n    %VsInstallDir%\\MSBuild\\Current\\Bin\\MSBuild.exe\r\n\r\nAdditionally, our binding redirects weren't working in this project at\r\nall. `App.config` was *not* in the csproj!\r\n\r\n## NUnit ##\r\n\r\nThere does not appear to be an NUnit extension available for VS 2019\r\nyet. I frequently use the `Test Explorer` in VS to individually run\r\ntests.\r\n\r\nHowever, it looks like they are switching to a different model for\r\ntest frameworks. Each test framework ships its own \"adapter\" that\r\nenables the testing UIs in Visual Studio. These are shipped on NuGet,\r\nand so they can work without installing any extra extensions.\r\n\r\nSo we just need:\r\n\r\n    https://www.nuget.org/packages/NUnit3TestAdapter/\r\n\r\nThis package should not affect anything on non-Windows platforms.\r\n\r\n## ILRepack ##\r\n\r\nWith the usage of TFV=v4.7.2 we were hitting:\r\n\r\n    \"src/Xamarin.Android.Build.Tasks/Xamarin.Android.Build.Tasks.csproj\" (default target) (1) ->\r\n        (ILRepacker target) ->\r\n        src/Xamarin.Android.Build.Tasks/ILRepack.targets(24,3): error : Failed to resolve assembly: 'netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51' [src/Xamarin.Android.Build.Tasks/Xamarin.Android.Build.Tasks.csproj]\r\n\r\nWe need to specify `TargetPlatformDirectory`, path logic in `ILRepack`\r\nappears to be failing, see:\r\n\r\nhttps://github.com/Alexx999/ILRepack.Lib.MSBuild.Task/blob/72c4c3bd051a166f5e3316b55457b24034c69a1d/ILRepack.Lib.MSBuild/ILRepack.cs#L148-L151\r\nhttps://github.com/Alexx999/il-repack/blob/18698fddc4bb577f676d7465a6ad271ced58abc1/ILRepack/ILRepack.cs#L450-L462\r\n\r\n## Other repositories ##\r\n\r\nWe will need to switch to `TargetFrameworkVersion=v4.7.2` and use the\r\nNUnit adapter in other repos:\r\n\r\n- Downstream in `monodroid`, things will likely break without these\r\n  changes.\r\n- `Java.Interop` is currently *working*, but should be updated.\r\n- `xamarin-android-tools` is currently *working*, but should be updated."},{"Id":"9253624324","Type":"IssuesEvent","CreatedAt":"2019-03-15T20:25:58","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/2627","RelatedDescription":"Closed issue \"[VS 2019] issues building Xamarin.Android and running tests\" (#2627) at xamarin/xamarin-android","RelatedBody":"### Steps to Reproduce\r\n\r\nIf using VS 2019, there are a few problems building Xamarin.Android itself (and running tests).\r\n\r\n* It seems anything referencing `MSBuild` assemblies now needs `$(TargetFrameworkVersion)` 4.7.2. We should look into making a `$(DefaultTargetFrameworkVersion)` property in `Configuration.props` at the same time.\r\n* `xabuild.exe` doesn't work as-is\r\n* `Xamarin.Android.Build.Tests` won't pass as-is\r\n\r\n### Expected Behavior\r\n\r\nWe should be able to develop Xamarin.Android with VS 2019.\r\n\r\n### Actual Behavior\r\n\r\nYou get build errors and/or test errors with VS 2019.\r\n\r\n### Other concerns\r\n\r\nWe have a bit of code looking for `MSBuild.exe`.\r\n\r\nThis isn't quite right, so we should *also* invest in making that better by either:\r\n- Use [MSBuild.Locator](https://www.nuget.org/packages/Microsoft.Build.Locator/) _if licensing permits_\r\n- Use [vswhere](https://github.com/Microsoft/vswhere)\r\n\r\n> VS bug [#770851](https://devdiv.visualstudio.com/DevDiv/_workitems/edit/770851)"},{"Id":"9253460239","Type":"PullRequestEvent","CreatedAt":"2019-03-15T19:54:35","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2839","RelatedDescription":"Merged pull request \"[linux] Fix the build, by ignoring libwinpthread-1.dll dependency\" (#2839) at xamarin/xamarin-android","RelatedBody":"The Linux build [is busted][0]:\r\n\r\n\tdh_clideps -X/usr/lib/xamarin.android/xbuild-frameworks/ \\\r\n\t...\r\n\tUnhandled Exception:\r\n\tIKVM.Reflection.BadImageFormatException: Exception of type 'IKVM.Reflection.BadImageFormatException' was thrown.\r\n\t  at IKVM.Reflection.Reader.PEReader.RvaToFileOffset (System.UInt32 rva) [0x00070] in <f3855a9b922743e79049757cdcdbb705>:0\r\n\t  at IKVM.Reflection.Reader.ModuleReader.Read (System.IO.Stream stream, System.Boolean mapped) [0x0004c] in <f3855a9b922743e79049757cdcdbb705>:0\r\n\t  at IKVM.Reflection.Reader.ModuleReader..ctor (IKVM.Reflection.Reader.AssemblyReader assembly, IKVM.Reflection.Universe universe, System.IO.Stream stream, System.String location, System.Boolean mapped) [0x0005b] in <f3855a9b922743e79049757cdcdbb705>:0\r\n\t  at IKVM.Reflection.Universe.OpenRawModule (System.IO.Stream stream, System.String location, System.Boolean mapped) [0x00028] in <f3855a9b922743e79049757cdcdbb705>:0\r\n\t  at IKVM.Reflection.Universe.OpenRawModule (System.IO.Stream stream, System.String location) [0x00000] in <f3855a9b922743e79049757cdcdbb705>:0\r\n\t  at Ildasm.TableDumper..ctor (System.String inputFile) [0x0002d] in <f3855a9b922743e79049757cdcdbb705>:0\r\n\t  at Ildasm.Program.Main (System.String[] args) [0x00307] in <f3855a9b922743e79049757cdcdbb705>:0\r\n\tdh_clideps: cli_parser call failed: 'LANG=C MONO_PATH= MONO_GAC_PREFIX=  /usr/bin/ikdasm --moduleref libwinpthread-1.dll 2>&1 > /tmp/dh_clideps.s9Ph' rc: 256\r\n\r\n`libwinpthread-1.dll` is a Windows native shared library, *not* an\r\nassembly, and thus it cannot be `ildasm`ed.\r\n\r\nThis build failure was presumably introduced with commit 4ccbeb74,\r\nwhich added `libwinpthread-1.dll` to the build.\r\n\r\nAdd `libwinpthread-1.dll` to the `dh_clideps --exclude-moduleref` list\r\nto avoid this error.\r\n\r\n[0]: https://jenkins.mono-project.com/view/Xamarin.Android/job/xamarin-android-linux-release/1051/console"},{"Id":"9252410961","Type":"PullRequestEvent","CreatedAt":"2019-03-15T16:57:17","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2839","RelatedDescription":"Opened pull request \"[linux] Fix the build, by ignoring libwinpthread-1.dll dependency\" (#2839) at xamarin/xamarin-android","RelatedBody":"The Linux build [is busted][0]:\r\n\r\n\tdh_clideps -X/usr/lib/xamarin.android/xbuild-frameworks/ \\\r\n\t...\r\n\tUnhandled Exception:\r\n\tIKVM.Reflection.BadImageFormatException: Exception of type 'IKVM.Reflection.BadImageFormatException' was thrown.\r\n\t  at IKVM.Reflection.Reader.PEReader.RvaToFileOffset (System.UInt32 rva) [0x00070] in <f3855a9b922743e79049757cdcdbb705>:0\r\n\t  at IKVM.Reflection.Reader.ModuleReader.Read (System.IO.Stream stream, System.Boolean mapped) [0x0004c] in <f3855a9b922743e79049757cdcdbb705>:0\r\n\t  at IKVM.Reflection.Reader.ModuleReader..ctor (IKVM.Reflection.Reader.AssemblyReader assembly, IKVM.Reflection.Universe universe, System.IO.Stream stream, System.String location, System.Boolean mapped) [0x0005b] in <f3855a9b922743e79049757cdcdbb705>:0\r\n\t  at IKVM.Reflection.Universe.OpenRawModule (System.IO.Stream stream, System.String location, System.Boolean mapped) [0x00028] in <f3855a9b922743e79049757cdcdbb705>:0\r\n\t  at IKVM.Reflection.Universe.OpenRawModule (System.IO.Stream stream, System.String location) [0x00000] in <f3855a9b922743e79049757cdcdbb705>:0\r\n\t  at Ildasm.TableDumper..ctor (System.String inputFile) [0x0002d] in <f3855a9b922743e79049757cdcdbb705>:0\r\n\t  at Ildasm.Program.Main (System.String[] args) [0x00307] in <f3855a9b922743e79049757cdcdbb705>:0\r\n\tdh_clideps: cli_parser call failed: 'LANG=C MONO_PATH= MONO_GAC_PREFIX=  /usr/bin/ikdasm --moduleref libwinpthread-1.dll 2>&1 > /tmp/dh_clideps.s9Ph' rc: 256\r\n\r\n`libwinpthread-1.dll` is a Windows native shared library, *not* an\r\nassembly, and thus it cannot be `ildasm`ed.\r\n\r\nThis build failure was presumably introduced with commit 4ccbeb74,\r\nwhich added `libwinpthread-1.dll` to the build.\r\n\r\nAdd `libwinpthread-1.dll` to the `dh_clideps --exclude-moduleref` list\r\nto avoid this error.\r\n\r\n[0]: https://jenkins.mono-project.com/view/Xamarin.Android/job/xamarin-android-linux-release/1051/console"},{"Id":"9252165233","Type":"PullRequestEvent","CreatedAt":"2019-03-15T16:21:32","Actor":"mjbond-msft","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2838","RelatedDescription":"Opened pull request \"Xamarin Android Linux pipeline builds\" (#2838) at xamarin/xamarin-android","RelatedBody":"Groovy script enabling pipeline builds to replace the following Linux freestyle workflows:\r\nhttps://jenkins.mono-project.com/view/Xamarin.Android/job/xamarin-android-linux/\r\nhttps://jenkins.mono-project.com/view/Xamarin.Android/job/xamarin-android-linux-release/\r\nhttps://jenkins.mono-project.com/view/Xamarin.Android/job/xamarin-anroid-linux-pr-builder/\r\n\r\nThe pipeline script supports separate `debug` and `release` builds\r\n\r\nIntroduce new utils.groovy file providing shared functionality between build.groovy and build.linux.groovy"},{"Id":"9250222184","Type":"PullRequestEvent","CreatedAt":"2019-03-15T11:41:19","Actor":"dellis1972","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2837","RelatedDescription":"Opened pull request \"[Xamarin.Android.Build.Tasks] Split out Aapt into its own Targets\" (#2837) at xamarin/xamarin-android","RelatedBody":"Commit 4ccbeb74 began the process of splitting up the\r\n`aapt2` calls into its own targets. This will help\r\nmake the product easier to maintain since the Targets\r\nare in their own .target files.\r\n\r\nThis commit builds on that and moves the old `aapt` calls\r\ninto their own targets. We also split out the remaining\r\n`aapt2` based calls from `_CreateBaseApk` and `_UpdateAndroidResgen`\r\ninto the `Xamarin.Android.Aapt2.targets`."},{"Id":"9249956117","Type":"IssuesEvent","CreatedAt":"2019-03-15T10:54:27","Actor":"dellis1972","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/2836","RelatedDescription":"Opened issue \"Rework `_GenerateJavaDesignerForComponent`\" (#2836) at xamarin/xamarin-android","RelatedBody":"The `_GenerateJavaDesignerForComponent` is tasked with generating the `R.java` files for all the referenced libraries which have an `AndroidManifest.xml`. This is so any java code which use resource items such as `android.support.transition.R.abc_fade_in` will compile. \r\n\r\nCurrently we call `aapt` or `aapt2` once per library to generate the file. We do this on the first build. But we also do it on subsequent builds if the library changes. For Nuget packages this means once its built it never gets built again unless the user does a `Clean`.\r\n\r\nWe do run these tasks in Parallel, which does improve things quite a bit. But it does put the CPU under allot of stress, since we have to launch a `aapt*` process *per* library. So if you have 8 cores on your machine you get 7 `aapt*` processes running.\r\n\r\nIs this the most efficient way of doing this? Looking at the output of the `R.java` file the ONLY code difference between ALL the files is the package declaration at the top.\r\nE.g `package android.support.compat;` vs `package android.support.transition;`\r\nSo the next question is why don't we generate one `R.java` file and then do a search & replace for each library reading the required `packageName` from the `AndroidManifest.xml`.\r\n\r\nThis would mean \r\n\r\nA) We are not duplicating a whole TON of work\r\nB) the initial build should be much quicker since we are not spawning up a whole ton of processes.\r\n"}],"ResultType":"GitHubEvent"},"Forms":{"Events":[{"Id":"9254872638","Type":"PullRequestEvent","CreatedAt":"2019-03-16T03:28:25","Actor":"kingces95","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/5588","RelatedDescription":"Opened pull request \"Profiler\" (#5588) at xamarin/Xamarin.Forms","RelatedBody":"Profiler. \r\n\r\nsee https://github.com/xamarin/Xamarin.Forms/pull/5248"},{"Id":"9254869478","Type":"PullRequestEvent","CreatedAt":"2019-03-16T03:26:14","Actor":"kingces95","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/5587","RelatedDescription":"Opened pull request \"Man init\" (#5587) at xamarin/Xamarin.Forms","RelatedBody":"Ala cart forms initialization.\r\n\r\nDisregard bat file stuff. "},{"Id":"9254657504","Type":"PullRequestEvent","CreatedAt":"2019-03-16T01:19:54","Actor":"samhouts","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/5586","RelatedDescription":"Merged pull request \"remove left over sealed on Material Entry Renderer\" (#5586) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\nLeft over sealed on Material Entry Renderer\r\n\r\n### API Changes ###\r\n- MaterialEntryRenderer is no longer sealed on android\r\n\r\n### Platforms Affected ### \r\n- Android\r\n"},{"Id":"9254655893","Type":"PullRequestEvent","CreatedAt":"2019-03-16T01:19:01","Actor":"PureWeen","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/5586","RelatedDescription":"Opened pull request \"remove left over sealed on Material Entry Renderer\" (#5586) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\nLeft over sealed on Material Entry Renderer\r\n\r\n### API Changes ###\r\n- MaterialEntryRenderer is no longer sealed on android\r\n\r\n### Platforms Affected ### \r\n- Android\r\n"},{"Id":"9254644977","Type":"PullRequestEvent","CreatedAt":"2019-03-16T01:13:15","Actor":"samhouts","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/5562","RelatedDescription":"Merged pull request \"[Android] Fix issue when Message is null on Android API19\" (#5562) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\n\r\nFix issue when Message is null on Android API19 introduced on PR #5462 \r\n\r\n### Issues Resolved ### \r\n<!-- Please use the format \"fixes #xxxx\" for each issue this PR addresses -->\r\n\r\n\r\n\r\n### API Changes ###\r\n<!-- List all API changes here (or just put None), example:\r\n\r\nAdded:\r\n - string ListView.GroupName { get; set; } //Bindable Property\r\n - int ListView.GroupId { get; set; } // Bindable Property\r\n - void ListView.Clear ();\r\n\r\nChanged:\r\n - object ListView.SelectedItem => Cell ListView.SelectedItem\r\n \r\n Removed:\r\n - object ListView.SelectedItem => Cell ListView.SelectedItem\r\n \r\n -->\r\n \r\n None\r\n\r\n### Platforms Affected ### \r\n<!-- Please list all platforms affected by these changes -->\r\n\r\n- Android\r\n\r\n### Behavioral/Visual Changes ###\r\n<!-- Describe any changes that may change how a user's app behaves or appears when upgrading to this version of the codebase. -->\r\n\r\nNone\r\n\r\n### Before/After Screenshots ### \r\n<!-- If possible, take a screenshot of your test case before these changes were made and another screenshot after the changes were made to show possible visual changes. -->\r\n\r\nNot applicable\r\n\r\n### Testing Procedure ###\r\n<!-- Please list the steps that should be taken to properly test these changes on each relevant platform. If you were unable to test these changes yourself on any or all platforms, please let us know. Also, if you are able to attach a video of your test run, you will be our personal hero. -->\r\n\r\nRun gallery and go to test #5461 or a test with a Scrollview on API19 \r\n\r\n### PR Checklist ###\r\n\r\n- [ ] Has automated tests <!-- (if tests are omitted or manual, state reason in description) -->\r\n- [ ] Rebased on top of the target branch at time of PR\r\n- [ ] Changes adhere to coding standard\r\n"}],"ResultType":"GitHubEvent"},"Macios":{"Events":[{"Id":"9253567277","Type":"PullRequestEvent","CreatedAt":"2019-03-15T20:15:05","Actor":"chamons","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/5764","RelatedDescription":"Merged pull request \"[d16-1] [msbuild] Xamarin.Mac Notary Support\" (#5764) at xamarin/xamarin-macios","RelatedBody":"Almost everything \"just worked\" after hardened runtime, once you get the certificate right.\r\n\r\nHowever, we need the secure timestamp argument.\n\nBackport of #5754.\n\n/cc @chamons "},{"Id":"9252755197","Type":"PullRequestEvent","CreatedAt":"2019-03-15T17:49:52","Actor":"rolfbjarne","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/5777","RelatedDescription":"Opened pull request \"[d16-1] Bump maccore\" (#5777) at xamarin/xamarin-macios","RelatedBody":"Diff: https://github.com/xamarin/maccore/compare/993e43e1a9b2437dacc0868b8dd6bd3d0985da6c...bc0e60db731b35db8b8ebe81258d408233f14689"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1106650380182659080","CreatedAt":"2019-03-15T20:16:25+00:00","UserScreenname":"xamarinhq","Text":"Introducing the New Xamarin Customer Showcase\n\nHighlighting the amazing work developers are doing for all sorts of… https://t.co/yQbcA4cYc6","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":50,"FavoriteCount":23,"RawContent":null},{"Id":"1106576630884065280","CreatedAt":"2019-03-15T15:23:22+00:00","UserScreenname":"xamarinhq","Text":"This week on the #XamarinShow, @JamesMontemagno &amp; @JonathanPeppers show us how to optimize image loading for Androi… https://t.co/FkiznwhBep","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":58,"FavoriteCount":15,"RawContent":null},{"Id":"1105942645308678144","CreatedAt":"2019-03-13T21:24:08+00:00","UserScreenname":"xamarinhq","Text":"There have been some drastic changes across key libraries for Google Play Services &amp; Android Support. Let's get a q… https://t.co/heywxPz0Qs","Source":"<a href=\"http://twitter.com\" rel=\"nofollow\">Twitter Web Client</a>","RetweetCount":39,"FavoriteCount":21,"RawContent":null},{"Id":"1105573743986917377","CreatedAt":"2019-03-12T20:58:15+00:00","UserScreenname":"xamarinhq","Text":"#MFractor is a powerful #VS4Mac extension to streamline Xamarin app dev so you can save significant time &amp; effort o… https://t.co/pEwcgwzd3t","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":44,"FavoriteCount":21,"RawContent":null},{"Id":"1105491570583851008","CreatedAt":"2019-03-12T15:31:44+00:00","UserScreenname":"xamarinhq","Text":".@codemillmatt &amp; @JamesMontemagno talk about a ton of newness out there for all mobile devs including a hot new… https://t.co/05m3VTmUBe","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":62,"FavoriteCount":22,"RawContent":null},{"Id":"1103762250509283332","CreatedAt":"2019-03-07T21:00:02+00:00","UserScreenname":"xamarinhq","Text":"Introducing Material Design; a suite of cross-platform components in the #Xamarin.Forms 3.6 Visual feature that boo… https://t.co/gin9lpb0eQ","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":147,"FavoriteCount":68,"RawContent":null},{"Id":"1103750171215699968","CreatedAt":"2019-03-07T20:12:02+00:00","UserScreenname":"xamarinhq","Text":"Level up your mobile development skills at #MSBuild, May 6-8, 2019 in Seattle. Registration is now open!… https://t.co/EZNWhIn3p6","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":39,"FavoriteCount":8,"RawContent":null},{"Id":"1103709031066189825","CreatedAt":"2019-03-07T17:28:33+00:00","UserScreenname":"xamarinhq","Text":"Happening right now! Join the Mobile #dotNET Teams for our community stand-up covering great community contribution… https://t.co/9HUp86ZqBU","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":30,"FavoriteCount":15,"RawContent":null},{"Id":"1103701857682231296","CreatedAt":"2019-03-07T17:00:03+00:00","UserScreenname":"xamarinhq","Text":"On this week's Essential API of the week we take a look at Accelerometer, which enables you monitor the device's ac… https://t.co/UxhHHar5zN","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":56,"FavoriteCount":17,"RawContent":null},{"Id":"1103399934966067200","CreatedAt":"2019-03-06T21:00:19+00:00","UserScreenname":"xamarinhq","Text":"Announcing Xamarin.Forms 3.6:\n- we've made enhancements, cleaned up some bugs, AND, we've moved our Visual feature… https://t.co/fG4RqX25PH","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":261,"FavoriteCount":129,"RawContent":null},{"Id":"1102666586194931713","CreatedAt":"2019-03-04T20:26:15+00:00","UserScreenname":"xamarinhq","Text":"Sweeky Satpathy (from the Mobile Customer Advisory Team) shares some best practices &amp; tips/tricks the team uses to… https://t.co/GSrw6zLTHZ","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":59,"FavoriteCount":19,"RawContent":null},{"Id":"1101572485114462220","CreatedAt":"2019-03-01T19:58:41+00:00","UserScreenname":"xamarinhq","Text":"Developer Community User Groups are gathering to learn about new, exciting releases and tooling to help jumpstart t… https://t.co/GgCWj5LttS","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":49,"FavoriteCount":22,"RawContent":null},{"Id":"1101202237752258564","CreatedAt":"2019-02-28T19:27:27+00:00","UserScreenname":"xamarinhq","Text":"Want to display PDF docs w/i your #Xamarin apps? Now you can. Learn to view PDF files within your Xamarin.Forms app… https://t.co/GjuKzrvNYM","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":99,"FavoriteCount":30,"RawContent":null},{"Id":"1100455963361005570","CreatedAt":"2019-02-26T18:02:01+00:00","UserScreenname":"xamarinhq","Text":"In this episode of the #dotNETCore podcast, @jimbobbennett talks #Xamarin &amp; .NET Standard. Listen in or read the tr… https://t.co/VDFrb1excV","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":40,"FavoriteCount":14,"RawContent":null},{"Id":"1100149148282769409","CreatedAt":"2019-02-25T21:42:51+00:00","UserScreenname":"xamarinhq","Text":"Android emulators have their own networking config but now you can debug #Android apps locally regardless of whethe… https://t.co/Hbsm6gbXft","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":72,"FavoriteCount":31,"RawContent":null},{"Id":"1098996242238111745","CreatedAt":"2019-02-22T17:21:37+00:00","UserScreenname":"xamarinhq","Text":"This week on the #XamarinShow, @DavidOrtinau gives us all the reasons and features to &lt;3 in Xamarin.Forms 3.5. This… https://t.co/pVcHVX6LYJ","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":56,"FavoriteCount":27,"RawContent":null},{"Id":"1097993381496700935","CreatedAt":"2019-02-19T22:56:36+00:00","UserScreenname":"xamarinhq","Text":"With only a few lines of code, today's #Xamarin.Essentials API of the week helps you persist settings and preferenc… https://t.co/izkl5pGL6m","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":50,"FavoriteCount":21,"RawContent":null},{"Id":"1097939132532310018","CreatedAt":"2019-02-19T19:21:02+00:00","UserScreenname":"xamarinhq","Text":"On this week's #XamarinShow Essential API of the week, we take a look at Secure Storage, which enables you to easil… https://t.co/OwQSZ1QRlI","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":46,"FavoriteCount":26,"RawContent":null},{"Id":"1097603017375993857","CreatedAt":"2019-02-18T21:05:26+00:00","UserScreenname":"xamarinhq","Text":"Xamarin.Forms 101: Command Parameters: https://t.co/rwzzq9yQib\n\n.@JamesMontemagno takes us through a new mini-serie… https://t.co/ZFInvKFhSL","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":109,"FavoriteCount":48,"RawContent":null}]}},"RunOn":"2019-03-16T05:30:48.1207798Z","RunDurationInMilliseconds":2488}