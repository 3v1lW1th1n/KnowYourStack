{"Data":{"Blog":{"FeedItems":[{"Title":".NET Framework October 2017 Security and Quality Rollup","PublishedOn":"2017-10-11T06:02:21+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, we are releasing the October 2017 Security and Quality Rollup. The update applies to all supported Windows versions. It includes a known issue for Windows 10 1507 (see below). Security This release contains no new security updates. Quality and Reliability This release contains the following quality and reliability improvements. WPF WPF fails to load... <a aria-label=\"read more about .NET Framework October 2017 Security and Quality Rollup\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/10/10/net-framework-october-2017-security-and-quality-rollup/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/10/10/net-framework-october-2017-security-and-quality-rollup/","RawContent":null},{"Title":"Announcing UWP Support for .NET Standard 2.0","PublishedOn":"2017-10-10T22:57:46+00:00","CommentsCount":12,"FacebookCount":0,"Summary":"This post was mostly written by Rich Lander with contributions from Immo Landwerth. Today, we are releasing huge updates to UWP for .NET developers. The really big improvement is adding support for .NET Standard 2.0. UWP developers now have access to ~ 20k more APIs. This release brings UWP to partity with the other .NET implementations... <a aria-label=\"read more about Announcing UWP Support for .NET Standard 2.0\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/10/10/announcing-uwp-support-for-net-standard-2-0/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/10/10/announcing-uwp-support-for-net-standard-2-0/","RawContent":null},{"Title":".NET Framework 4.7.1 Runtime and Compiler Features","PublishedOn":"2017-09-28T23:56:59+00:00","CommentsCount":9,"FacebookCount":0,"Summary":"This post describes the new Runtime, Compiler and Base Class Library (BCL) improvements in the .NET Framework 4.7.1. You can try out these features by downloading the Developer Pack, described in the Welcome to the .NET Framework 4.7.1 Early Access blog post.  BCL &#8211; .NET Standard 2.0 Support .NET Framework 4.7.1 has built-in support for .NET Standard 2.0. .NET Framework 4.7.1... <a aria-label=\"read more about .NET Framework 4.7.1 Runtime and Compiler Features\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/09/28/net-framework-4-7-1-runtime-and-compiler-features/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/09/28/net-framework-4-7-1-runtime-and-compiler-features/","RawContent":null},{"Title":"Build a web service with F# and .NET Core 2.0","PublishedOn":"2017-09-26T16:39:23+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"Earlier this year, I wrote about an update to the roadmap for F# and .NET Core. I had mentioned that there were a number of things you could build with F# and .NET Core today, such as web services. In this post, I&#8217;ll walk through building a web service with F# and .NET Core 2.0... <a aria-label=\"read more about Build a web service with F# and .NET Core 2.0\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/09/26/build-a-web-service-with-f-and-net-core-2-0/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/09/26/build-a-web-service-with-f-and-net-core-2-0/","RawContent":null},{"Title":".NET Framework September 2017 Preview of Quality Rollup","PublishedOn":"2017-09-25T19:57:18+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Today, we are releasing the September 2017 Preview of Quality Rollup. This type of rollup is intended for businesses that want to the preview or use quality improvements as soon as they are available. This update applies to Windows 10 Update 1607 (Anniversary Update) and to Windows Server 2016. FYI: The KBs for Windows Server 2016... <a aria-label=\"read more about .NET Framework September 2017 Preview of Quality Rollup\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/09/25/net-framework-september-2017-preview-of-quality-rollup/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/09/25/net-framework-september-2017-preview-of-quality-rollup/","RawContent":null},{"Title":".NET Core September 2017 Update — macOS High Sierra Support","PublishedOn":"2017-09-22T22:29:09+00:00","CommentsCount":4,"FacebookCount":0,"Summary":"We released .NET Core updates for macOS High Sierra Support and additional quality fixes. You can download and install the update for Windows, macOS and Linux. This update is for .NET Core 1.0 and 1.1. The initial .NET Core 2.0 release includes similar improvements, so is not being updated with this release. Downloads .NET Core 1.0.7 .NET... <a aria-label=\"read more about .NET Core September 2017 Update &#8212; macOS High Sierra Support\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/09/22/net-core-september-2017-update-macos-high-sierra-support/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/09/22/net-core-september-2017-update-macos-high-sierra-support/","RawContent":null},{"Title":".NET Framework 4.7.1 Accessibility and WPF Improvements","PublishedOn":"2017-09-21T22:00:20+00:00","CommentsCount":19,"FacebookCount":0,"Summary":"This post describes the new WPF and accessibility features and improvements in .NET Framework 4.7.1. You can try out these features by downloading the Developer Pack, described in the Welcome to the .NET Framework 4.7.1 Early Access blog post. Accessibility improvements .NET Framework 4.7.1 brings in a lot of accessibility improvements across different libraries to align with the... <a aria-label=\"read more about .NET Framework 4.7.1 Accessibility and WPF Improvements\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/09/21/net-framework-4-7-1-accessibility-and-wpf-improvements/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/09/21/net-framework-4-7-1-accessibility-and-wpf-improvements/","RawContent":null},{"Title":"Watch .NET Conf 2017!","PublishedOn":"2017-09-19T14:35:54+00:00","CommentsCount":12,"FacebookCount":0,"Summary":".NET Conf starts today. It&#8217;s a three-day, free, virtual and global .NET conference. All you need to do is point your web browser to channel9.msdn.com, starting at 8AM Pacific Time. We have a packed agenda with a great set of expert .NET developers. What will you learn? Many things. You will learn to build for... <a aria-label=\"read more about Watch .NET Conf 2017!\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/09/19/watch-net-conf-2017/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/09/19/watch-net-conf-2017/","RawContent":null},{"Title":".NET Framework 4.7.1 ASP.NET and Configuration features","PublishedOn":"2017-09-14T00:23:49+00:00","CommentsCount":25,"FacebookCount":0,"Summary":"This post describes the new ASP.NET, Configuration and System.Messaging features and improvements in the .NET Framework 4.7.1. More information on the build these features are available in and how to get the Developer Pack is covered in the Welcome to the .NET Framework 4.7.1 Early Access blog post. Configuration builders Configuration builders allow developers to inject and build... <a aria-label=\"read more about .NET Framework 4.7.1 ASP.NET and Configuration features\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/09/13/net-framework-4-7-1-asp-net-and-configuration-features/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/09/13/net-framework-4-7-1-asp-net-and-configuration-features/","RawContent":null},{"Title":".NET Framework September 2017 Security and Quality Rollup","PublishedOn":"2017-09-13T01:11:33+00:00","CommentsCount":25,"FacebookCount":0,"Summary":"Last Updated: 2017.09.21. Today, we are releasing the September 2017 Security and Quality Rollup and Security Only Update. This update applies to Windows 7 and later client versions and Windows Server 2008 and later server versions. This update has known issues. Please see them at the bottom of the update. Security This release contains the... <a aria-label=\"read more about .NET Framework September 2017 Security and Quality Rollup\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/09/12/net-framework-september-2017-security-and-quality-rollup/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/09/12/net-framework-september-2017-security-and-quality-rollup/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"6650451504","Type":"IssuesEvent","CreatedAt":"2017-09-28T16:22:10","Actor":"hughbe","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/issues/87","RelatedDescription":"Opened issue \"PRs to repos outside of dotnet/* pattern should not always thank for signing the CLA\" (#87) at dotnet/home","RelatedBody":"For example: https://github.com/mono/libgdiplus/pull/109\r\n\r\nI have already signed the CLI. On the dotnet/corefx etc. projects, I don't get the extra message:\r\n\r\n```\r\n@hughbe,\r\nThanks for having already signed the Contribution License Agreement. Your agreement was validated by .NET Foundation. We will now review your pull request.\r\nThanks,\r\n.NET Foundation Pull Request Bot\r\n```\r\n\r\nJust a small gripe, as I get an email each time I do this. I've seen this in Mono and Xunit.\r\n\r\n/cc @karelz I know this is unrelated to corefx but maybe you know the right person/repo to route this to :D\r\n"},{"Id":"6515896963","Type":"PullRequestEvent","CreatedAt":"2017-08-26T22:20:18","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/85","RelatedDescription":"Merged pull request \"Create telerik-ui-for-uwp.md\" (#85) at dotnet/home","RelatedBody":"Submission of Telerik UI for UWP"},{"Id":"6515896506","Type":"PullRequestEvent","CreatedAt":"2017-08-26T22:19:49","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/86","RelatedDescription":"Merged pull request \"Corrected list of maintainers\" (#86) at dotnet/home","RelatedBody":""}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"6645912196","Type":"IssuesEvent","CreatedAt":"2017-09-27T19:47:08","Actor":"terrajobst","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/32","RelatedDescription":"Opened issue \".NET Framework 4.7.1 provides built-in support for .NET Standard 2.0\" (#32) at dotnet/announcements","RelatedBody":"## Summary\r\n\r\n.NET Framework 4.7.1 will have built-in support for .NET Standard 2.0. This means that you don't have to deploy any additional files or use binding redirects to use .NET Standard 2.0 libraries.\r\n\r\nFor a demo, check out [this video][video].\r\n\r\n## Details\r\n\r\nWhile libraries targeting [.NET Standard 2.0][ns20post] are can be consumed by applications and libraries [targeting .NET Framework 4.6.1][nstable] and higher, not all files that are required for .NET Standard libraries were part of .NET Framework 4.6.1. In fact, .NET Framework 4.6.1 was shipped before .NET Standard 2.0 was even designed. That's why building an application targeting .NET Framework 4.6.1 (as well as 4.6.2 and 4.7) will have to deploy additional files.\r\n\r\n* If you use **Visual Studio 2017 15.3** or higher, these files are automatically copied to the application's output folder.\r\n\r\n* If you use **Visual Studio 2015 and [use NuGet 3.6][nuget36]**, we'll prompt you to install a [support package][vs2015support] which will handle copying the files to the output directory.\r\n\r\nStarting with .NET Framework 4.7.1 these files no longer have to be deployed with the application -- they are built right into the .NET Framework itself.\r\n\r\n.NET Framework 4.7.1 also adds[about 200 missing APIs][missingapis] that were part of .NET Standard 2.0 but not actually implemented by .NET Framework 4.6.1, 4.6.2 or 4.7.\r\n\r\nThis also removes the need for [binding redirects][netfx-issues] when using .NET Standard libraries on .NET Framework because the CLR automatically unifies version numbers of assemblies that are part of the platform.\r\n\r\nLearn more [by reading the .NET Standard FAQ](http://aka.ms/netstandardfaq).\r\n\r\n## Discussion\r\n\r\nDiscussion\r\n\r\nFor a discussion, please go to dotnet/standard#514.\r\n\r\n[ns20post]: https://blogs.msdn.microsoft.com/dotnet/2017/08/14/announcing-net-standard-2-0/\r\n[nstable]: https://docs.microsoft.com/en-us/dotnet/standard/net-standard\r\n[nuget36]: https://dist.nuget.org/visualstudio-2015-vsix/v3.6.0/NuGet.Tools.vsix\r\n[vs2015support]: https://aka.ms/netstandard-build-support-netfx\r\n[missingapis]: https://github.com/dotnet/standard/blob/master/netstandard/src/ApiCompatBaseline.net461.txt\r\n[netfx-issues]: https://github.com/dotnet/standard/issues/481\r\n[video]: https://www.youtube.com/watch?v=u67Eu_IgEMs\r\n\r\nhttps://github.com/dotnet/standard/issues/514"}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"6717713572","Type":"PullRequestEvent","CreatedAt":"2017-10-15T01:25:04","Actor":"dotnet-maestro-bot","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/14511","RelatedDescription":"Opened pull request \"Update CoreFx to preview1-25815-01 (master)\" (#14511) at dotnet/coreclr","RelatedBody":"/cc @dotnet/coreclr-auto-update-notify"},{"Id":"6717610148","Type":"PullRequestEvent","CreatedAt":"2017-10-14T23:43:31","Actor":"4creators","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/14510","RelatedDescription":"Opened pull request \"Optimize native build of coreclr repo release/2.0 branch - 4x less memory , 16% build time improvement\" (#14510) at dotnet/coreclr","RelatedBody":"Native build in coreclr repo suffers from overallocation of VC compiler instnces\r\n    which is a result of buggy parallelism handling by MSBuild for vcxproj. The machanism\r\n    is such that MSBuild allocates nodes (default number of nodes is equal to number\r\n    of logical processors on machine) which are capable of handling single vcxproj\r\n    from build graph each yet still every node invokes CL compiler passing to it\r\n    /MP option with multiple files which should be compiled in a given project.\r\n\r\nThis triggers parallel compilation mechanism in CL and next group of CL subprocesses\r\n    are spawned equal to number of nodes for each node. Consequently during native compilation\r\n    we can see 64 CL processes on 4 core / 8 thread machine which can consume up to 14 GB\r\n    of memory. Overallocation mechanism is exponential and as a result on 8 core / 16 thread\r\n    machine each processor core will handle 16 CL processess with theoretically 2 times\r\n    higher memory consumption per core - total memory usage would grow from 14 GB to 56 GB.\r\n\r\nMSBuild does not provide any command line switches which could be used to directly\r\n    solve this problem. Setting /m:x will affect both - number of nodes and number of\r\n    CL processess spawned by each node which will be equal to number of nodes. There\r\n    is no direct method to decouple number of MSBuild nodes and number of CL processess\r\n    spawned by each node.\r\n\r\nTo achive this without changing MSBuild and CL code it is necessary to use workaround\r\n    and set values independetly. It is done by using /p:ForceImportBeforeCppTargets MSBuild\r\n    command line switch and setting /m:2 global maximum CPU switch. First switch forces\r\n    import of clr.nativebuild.props file contining maximum CPU settings used by CL compiler\r\n    and set to experimentally optimized number equal to number of enabled processor cores -\r\n    what is rather an expected value. Additionally it bypassess setting of MSBuild parallel\r\n    compilation general switch by setting MultiProcessorCompilation value to true.\r\n\r\nMSBuild /m:2 switch works incorrectly with vcxproj builds since it spawns as expected\r\n    only 2 nodes but the limit of top level CL processes allowed is 3 - spawning is done\r\n    indirectly with Tracker.exe executable. This means that with /m:2 and maximum CL count\r\n    being set to 4 we will get maximum 12 CL processes and not as expected 8 CL processess.\r\n\r\nAfter experimentally determining optimal /m:x and CL process count combinations it was\r\n    found that on i7-4700MQ Intel processor with 16 GB RAM memory consumption could be reduced\r\n    more than 4 times to 2.5 GB from 10.8 GB (during source-build 14 GB), and compilation time\r\n    was reduced from 00:15:19 (average of 3 runs) to 12:54 (average of 4 runs) by 15,7 %.\r\n\r\nIt is possible to further reduce amount of memory used during compilation but it does\r\n    negatively impact compilation time. The next best combination found was /m:3 and CL 3\r\n    with maximum memory usage 2.2 GB and compilation time 13:24 (average of 3 runs)\r\n    - 30 seconds worse than optimum.\r\n\r\nIt is possible to further optimise build process but this would require changes to\r\n    MSBuild and to Tracker or eventually CL executables."},{"Id":"6717599084","Type":"PullRequestEvent","CreatedAt":"2017-10-14T23:32:12","Actor":"4creators","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/14509","RelatedDescription":"Opened pull request \"Optimize native build of coreclr repo - memeory 3x less, time improvement 11%\" (#14509) at dotnet/coreclr","RelatedBody":"Fixes #14406 \r\n\r\nAfter this commit is accepted and merged I will provide PR with build docs update\r\n\r\nNative build in coreclr repo suffers from overallocation of VC compiler instnces\r\n    which is a result of buggy parallelism handling by MSBuild for vcxproj. The machanism\r\n    is such that MSBuild allocates nodes (default number of nodes is equal to number\r\n    of logical processors on machine) which are capable of handling single vcxproj\r\n    from build graph each yet still every node invokes CL compiler passing to it\r\n    /MP option with multiple files which should be compiled in a given project.\r\n\r\n    This triggers parallel compilation mechanism in CL and next group of CL subprocesses\r\n    is spawned equal to number of nodes for each node. Consequently during native compilation\r\n    we can see 64 CL processes on 4 core / 8 thread machine which can consume up to 14 GB\r\n    of memory. Overallocation mechanism is exponential and as a result on 8 core / 16 thread\r\n    machine each processor core will handle 16 CL processess with theoretically 2 times\r\n    higher memory consumption per core - total memory usage would grow from 14 GB to 56 GB.\r\n\r\n    MSBuild does not provide any command line switches which could be used to directly\r\n    solve this problem. Setting /m:x will affect both - number of nodes and number of\r\n    CL processess spawned by each node which will be equal to number of nodes. There\r\n    is no direct method to decouple number of MSBuild nodes and number of CL processess\r\n    spawned by each node.\r\n\r\n    To achive this without changing MSBuild and CL code it is necessary to use workaround\r\n    and set values independetly. It is done by using /p:ForceImportBeforeCppTargets MSBuild\r\n    command line switch and setting /m:2 global maximum CPU switch. First switch forces\r\n    import of clr.nativebuild.props file contining maximum CPU settings used by CL compiler\r\n    and set to experimentally optimized number equal to number of enabled processor cores -\r\n    what is rather an expected value. Additionally it bypassess setting of MSBuild parallel\r\n    compilation general switch by setting MultiProcessorCompilation value to true.\r\n\r\n    MSBuild /m:2 switch works incorrectly with vcxproj builds since it spawns as expected\r\n    only 2 nodes but the limit of top level CL processes allowed is 3 - spawning is done\r\n    indirectly with Tracker.exe executable. This means that with /m:2 and maximum CL count\r\n    being set to 4 we will get maximum 12 CL processes and not as expected 8 CL processess.\r\n\r\n    After experimentally determining optimal /m:x and CL process count combinations it was\r\n    found that on i7-4700MQ Intel processor with 16 GB RAM memory consumption could be reduced\r\n    almost 3 times to 2.8 GB from 8 GB, and compilation time was reduced from 00:14:35 \r\n    (average of 3 runs) to 00:12:58 (average of 3 runs) by 11% (00:01:39).\r\n\r\n    It is possible to further reduce amount of memory used during compilation but it does\r\n    negatively impact compilation time.\r\n\r\n    It is possible to further optimise build process but this would require changes to\r\n    MSBuild and to Tracker or eventually CL executables."},{"Id":"6717351177","Type":"PullRequestEvent","CreatedAt":"2017-10-14T20:08:28","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/14507","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/corert\" (#14507) at dotnet/coreclr","RelatedBody":"This PR contains mirrored changes from dotnet/corert\n\n\n**Please REBASE this PR when merging**"},{"Id":"6717333833","Type":"IssuesEvent","CreatedAt":"2017-10-14T19:55:31","Actor":"jnm2","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/14508","RelatedDescription":"Opened issue \"Guarantee that newly allocated memory can't be stale for any thread\" (#14508) at dotnet/coreclr","RelatedBody":"Is it possible for another thread to have a stale view of the memory containing the fields that a constructor just initialized?\r\n\r\nI would guess for safety there would have to be a runtime guarantee of a write barrier every time an instance is allocated, or some other guarantee that there's no way the memory could be stale for other threads, but I'm not sure and I would like a definitive answer.\r\n\r\nThis is what it comes down to, practically. In this example, does `this.action = action` need to be `Volatile.Write(ref this.action, action)`?\r\nOr does the runtime take care of this with 100% certainty via implicit write barrier or other means so that I can't possibly need `Volatile.Write` in the constructor?\r\n\r\n```cs\r\npublic sealed class OnDisposeAction : IDisposable\r\n{\r\n    private Action action;\r\n\r\n    // Thread 1 does this:\r\n    public OnDisposeAction(Action action)\r\n    {\r\n        this.action = action;\r\n    }\r\n\r\n    // Interlocked because sometimes multiple threads race for this,\r\n    // but for the purposes of this question, only thread 2 ever calls this:\r\n    public void Dispose() => Interlocked.Exchange(ref action, null)?.Invoke();\r\n}\r\n\r\n// Thread 1\r\nVolatile.Write(sharedObject._x, new OnDisposeAction(() => { }));\r\n// sharedObject._x.action is not null\r\n// (waits)\r\n\r\n// Thread 2\r\nVolatile.Read(ref sharedObject._x).Dispose();\r\n// sharedObject._x.action is disposed and set to null; the write barrier\r\n// causes shared memory to be updated to `null` at the address of sharedObject._x.action\r\n// (waits)\r\n\r\n// Thread 1\r\nVolatile.Write(sharedObject._x, null);\r\nGC.Collect();\r\n// Let's suppose the runtime happens to pick the exact same memory location\r\n// to allocate the new OnDisposeAction that it used for the now-freed previous instance:\r\nVolatile.Write(sharedObject._x, new OnDisposeAction(() => { }));\r\n// If the constructor does not guarantee an implicit write barrier,\r\n// shared memory still has `null` at the address of sharedObject._x.action.\r\n// (waits)\r\n\r\n// Thread 2\r\nVolatile.Read(ref sharedObject._x).Dispose();\r\n// This should have disposed the instance, but instead it no-ops.\r\n// Interlocked.Exchange synced thread 2's memory with shared memory\r\n// but shared memory still has `null` for this memory address.\r\n// Thread 1's memory hasn't pushed the write of `this.action = action` to shared memory.\r\n```\r\n\r\nThank you.\r\n\r\n/cc @maoni and @swgillespie (via @tannergooding)\r\n/cc @sharwell from conversation\r\n"},{"Id":"6717043136","Type":"PullRequestEvent","CreatedAt":"2017-10-14T16:27:09","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/14476","RelatedDescription":"Merged pull request \"Update BuildTools, CoreFx, PgoData to prerelease-02113-01, preview1-25814-02, master-20171012-0049, respectively (master)\" (#14476) at dotnet/coreclr","RelatedBody":"/cc @dotnet/coreclr-auto-update-notify"},{"Id":"6717028017","Type":"PullRequestEvent","CreatedAt":"2017-10-14T16:16:34","Actor":"dotnet-bot","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/14507","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/corert\" (#14507) at dotnet/coreclr","RelatedBody":"This PR contains mirrored changes from dotnet/corert\n\n\n**Please REBASE this PR when merging**"}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"6717568705","Type":"IssuesEvent","CreatedAt":"2017-10-14T23:03:25","Actor":"rendmath","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/7840","RelatedDescription":"Opened issue \"dotnet new for --frameworks targeting the .NET Framework\" (#7840) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\ndotnet new console --framework net461\r\n\r\n## Expected  behavior\r\ndotnet creates a console (or other type of) application targeting the specified version of the .NET Framework.\r\n\r\n## Actual behavior\r\nError message:\r\nError: Invalid parameter(s):\r\n--framework net452\r\n    'net452' is not a valid value for --framework (Framework).\r\nRun dotnet new console --help for usage information.\r\nSee https://aka.ms/dotnet-install-templates to learn how to install additional template packs.\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n.NET Command Line Tools (2.1.0-preview1-007363)\r\n\r\nProduct Information:\r\n Version:            2.1.0-preview1-007363\r\n Commit SHA-1 hash:  ee6707ced0\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.15063\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.0-preview1-007363\\\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.1.0-preview2-25616-02\r\n  Build    : 8aa34a95bad481e1b5e4c8286e5cb2d7cb6ed943"},{"Id":"6716830978","Type":"IssuesEvent","CreatedAt":"2017-10-14T13:54:54","Actor":"jamescrowley","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/7839","RelatedDescription":"Opened issue \"Build consistently fails on first build, and succeeds on second.\" (#7839) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\n\r\n1. Download attached zip. \r\n[SampleConcurrencyBuildIssue.zip](https://github.com/dotnet/cli/files/1384703/SampleConcurrencyBuildIssue.zip)\r\n2. Run build.cmd (build fails)\r\n3. Run build.cmd (build passes)\r\n4. Rename folder that you've extracted to\r\n5. Run build.cmd (build fails)\r\n6. Run build.cmd (build passes)\r\n\r\nNote that the contents of this zip includes files generated by paket. But I have removed all trace of paket itself - you just see the artifacts. So regardless of what paket generates, I'm pretty confident this is a build toolchain issue.\r\n\r\n## Expected  behavior\r\n\r\nBuild should fail or pass consistently.\r\n\r\n## Actual behavior\r\n\r\n\r\nFirst build:\r\n\r\n\tC:\\Development\\Sample>dotnet build src/FundApps.Rapptr.Web/FundApps.Rapptr.Web.csproj\r\n\tMicrosoft (R) Build Engine version 15.4.8.50001 for .NET Core\r\n\tCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n\t  FundApps.Common -> C:\\Development\\Sample\\src\\FundApps.Common\\bin\\Debug\\net462\\FundApps.Common.dll\r\n\tC:\\Development\\Sample\\packages\\Microsoft.Net.Compilers\\tools\\Microsoft.CSharp.Core.targets(84,5): error MSB4062: The \"Microsoft.CodeAnalysis.BuildTasks.Csc\" task could not be loaded from the assembly C:\\Development\\Sample\\packages\\Microsoft.Net.Compilers\\build\\..\\tools\\Microsoft.Build.Tasks.CodeAnalysis.dll. Assembly with same name is already loaded Confirm that the <UsingTask> declaration is correct, that the assembly and all its dependencies are available, and that the task contains a public class that implements Microsoft.Build.Framework.ITask. [C:\\Development\\Sample\\src\\FundApps.Rapptr.Web\\FundApps.Rapptr.Web.csproj]\r\n\r\n\tBuild FAILED.\r\n\r\n\tC:\\Development\\Sample\\packages\\Microsoft.Net.Compilers\\tools\\Microsoft.CSharp.Core.targets(84,5): error MSB4062: The \"Microsoft.CodeAnalysis.BuildTasks.Csc\" task could not be loaded from the assembly C:\\Development\\Sample\\packages\\Microsoft.Net.Compilers\\build\\..\\tools\\Microsoft.Build.Tasks.CodeAnalysis.dll. Assembly with same name is already loaded Confirm that the <UsingTask> declaration is correct, that the assembly and all its dependencies are available, and that the task contains a public class that implements Microsoft.Build.Framework.ITask. [C:\\Development\\Sample\\src\\FundApps.Rapptr.Web\\FundApps.Rapptr.Web.csproj]\r\n\t    0 Warning(s)\r\n\t    1 Error(s)\r\n\r\n\tTime Elapsed 00:00:05.38\r\n\r\nSecond build:\r\n\r\n\tC:\\Development\\Sample>build\r\n\r\n\tC:\\Development\\Sample>dotnet build src/FundApps.Rapptr.Web/FundApps.Rapptr.Web.csproj\r\n\tMicrosoft (R) Build Engine version 15.4.8.50001 for .NET Core\r\n\tCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n\t  FundApps.Common -> C:\\Development\\Sample\\src\\FundApps.Common\\bin\\Debug\\net462\\FundApps.Common.dll\r\n\t  FundApps.Rapptr.Web -> C:\\Development\\Sample\\src\\FundApps.Rapptr.Web\\bin\\FundApps.Rapptr.Web.dll\r\n\r\n\tBuild succeeded.\r\n\t    0 Warning(s)\r\n\t    0 Error(s)\r\n\r\n\tTime Elapsed 00:00:11.91\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n.NET Command Line Tools (2.0.2)\r\n\r\nProduct Information:\r\n Version:            2.0.2\r\n Commit SHA-1 hash:  a04b4bf512\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.14393\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.0.2\\\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.0\r\n  Build    : e8b8861ac7faf042c87a5c2f9f2d04c98b69f28d"},{"Id":"6715723776","Type":"IssuesEvent","CreatedAt":"2017-10-13T22:45:32","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/7838","RelatedDescription":"Closed issue \"nuget: setting a source in nuget.config and using it with dotnet overrides creadentials for that source in global nuget.config\" (#7838) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\nGiven a global nuget.config (in user's profile) with several nuget sources and packageSourceCredentials for them. That is sources require authentication.\r\nGiven a project with local nuget.config (besides csproj) which contains only a source url:\r\n```\r\n\t<packageSources>\r\n\t\t<add key=\"my\" value=\"https://company/api/nuget/nuget-virtual\" />\r\n\t</packageSources>\r\n```\r\nrun any dotnet command requires contacting nuget, for example `dotnet add package ..`.\r\nIt'll fail as nuget will use the source specified in local nuget.config but won't use credentials in global nuget.config. \r\n\r\n## Expected  behavior\r\nnuget should use credentials from global nuget.config.\r\n\r\n## Actual behavior\r\nany dotnet commands fail with 401 (Unauthorized) as my source requires authentication.\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n```                                                    \r\nD:\\Work>dotnet --info       \r\n.NET Command Line Tools (2.0.2)                                 \r\n                                                                \r\nProduct Information:                                            \r\n Version:            2.0.2                                      \r\n Commit SHA-1 hash:  a04b4bf512                                 \r\n                                                                \r\nRuntime Environment:                                            \r\n OS Name:     Windows                                           \r\n OS Version:  10.0.15063                                        \r\n OS Platform: Windows                                           \r\n RID:         win10-x64                                         \r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.0.2\\                \r\n                                                                \r\nMicrosoft .NET Core Shared Framework Host                       \r\n                                                                \r\n  Version  : 2.0.0                                              \r\n```"},{"Id":"6715722397","Type":"PullRequestEvent","CreatedAt":"2017-10-13T22:44:57","Actor":"natemcmaster","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/pull/7837","RelatedDescription":"Closed pull request \"Update the 1.x templates for aspnetcore 1.0.7/1.1.4\" (#7837) at dotnet/cli","RelatedBody":"Update the aspnetcore templates for 1.x. Includes this change: https://github.com/aspnet/templating/pull/65\r\n\r\n\r\n"},{"Id":"6715148493","Type":"IssuesEvent","CreatedAt":"2017-10-13T19:52:01","Actor":"evil-shrike","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/7838","RelatedDescription":"Opened issue \"nuget: setting a source in nuget.config and using it with dotnet overrides creadentials for that source in global nuget.config\" (#7838) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\nGiven a global nuget.config (in user's profile) with several nuget sources and packageSourceCredentials for them. That is sources require authentication.\r\nGiven a project with local nuget.config (besides csproj) which contains only a source url:\r\n```\r\n\t<packageSources>\r\n\t\t<add key=\"my\" value=\"https://company/api/nuget/nuget-virtual\" />\r\n\t</packageSources>\r\n```\r\nrun any dotnet command requires contacting nuget, for example `dotnet add package ..`.\r\nIt'll fail as nuget will use the source specified in local nuget.config but won't use credentials in global nuget.config. \r\n\r\n## Expected  behavior\r\nnuget should use credentials from global nuget.config.\r\n\r\n## Actual behavior\r\nany dotnet commands fail with 401 (Unauthorized) as my source requires authentication.\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n```                                                    \r\nD:\\Work>dotnet --info       \r\n.NET Command Line Tools (2.0.2)                                 \r\n                                                                \r\nProduct Information:                                            \r\n Version:            2.0.2                                      \r\n Commit SHA-1 hash:  a04b4bf512                                 \r\n                                                                \r\nRuntime Environment:                                            \r\n OS Name:     Windows                                           \r\n OS Version:  10.0.15063                                        \r\n OS Platform: Windows                                           \r\n RID:         win10-x64                                         \r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.0.2\\                \r\n                                                                \r\nMicrosoft .NET Core Shared Framework Host                       \r\n                                                                \r\n  Version  : 2.0.0                                              \r\n```"},{"Id":"6714968280","Type":"PullRequestEvent","CreatedAt":"2017-10-13T19:04:33","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/7832","RelatedDescription":"Merged pull request \"Merge release/2.0.0 to dev/release/2.0\" (#7832) at dotnet/cli","RelatedBody":"\nThis is an automatically generated pull request from release/2.0.0 into dev/release/2.0.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.0.0-to-dev/release/2.0-20171013-070030\ngit reset --hard upstream/dev/release/2.0\ngit merge upstream/release/2.0.0\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.0.0-to-dev/release/2.0-20171013-070030 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"6714954143","Type":"PullRequestEvent","CreatedAt":"2017-10-13T19:01:06","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/7831","RelatedDescription":"Merged pull request \"Merge release/2.0.0 to release/15.5\" (#7831) at dotnet/cli","RelatedBody":"\nThis is an automatically generated pull request from release/2.0.0 into release/15.5.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.0.0-to-release/15.5-20171013-070028\ngit reset --hard upstream/release/15.5\ngit merge upstream/release/2.0.0\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.0.0-to-release/15.5-20171013-070028 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"6714827047","Type":"IssuesEvent","CreatedAt":"2017-10-13T18:30:12","Actor":"johnbeisner","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/7752","RelatedDescription":"Closed issue \"Amazon linux cannot be detected by install script\" (#7752) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\n1. Spawn an elastic beanstalk instance with Amazon Linux. Current version is \"64bit Amazon Linux 2017.03\".\r\n2. `wget https://dot.net/v1/dotnet-install.sh`\r\n3. `bash dotnet-install.sh --verbose`\r\n\r\n## Expected  behavior\r\nInstall is successful\r\n\r\n## Actual behavior\r\nInstall fails. Verbose output:\r\n```\r\ndotnet-install: Calling: machine_has curl\r\ndotnet-install: Calling: calculate_vars \r\ndotnet-install: Calling: get_normalized_architecture_from_architecture <auto>\r\ndotnet-install: Calling: get_machine_architecture \r\ndotnet-install: Calling: get_normalized_architecture_from_architecture x64\r\ndotnet-install: normalized_architecture=x64\r\ndotnet-install: Calling: get_specific_version_from_version https://dotnetcli.azureedge.net/dotnet LTS x64 Latest\r\ndotnet-install: Calling: get_latest_version_info https://dotnetcli.azureedge.net/dotnet LTS x64 false\r\ndotnet-install: get_latest_version_info: latest url: https://dotnetcli.blob.core.windows.net/dotnet/Sdk/LTS/latest.version\r\ndotnet-install: Calling: download https://dotnetcli.blob.core.windows.net/dotnet/Sdk/LTS/latest.version\r\ndotnet-install: Calling: machine_has curl\r\ndotnet-install: Calling: downloadcurl https://dotnetcli.blob.core.windows.net/dotnet/Sdk/LTS/latest.version\r\ndotnet-install: get_specific_version_from_version: version_info=af1e6684fd694616ec5070e1d05a7b501a98783f\r\n1.0.4\r\ndotnet-install: Calling: get_version_from_version_info \r\ndotnet-install: specific_version=1.0.4\r\ndotnet-install: Calling: construct_download_link https://dotnetcli.azureedge.net/dotnet LTS x64 1.0.4\r\ndotnet-install: Calling: get_current_os_name \r\ndotnet-install: Calling: get_distro_specific_os_name \r\ndotnet-install: Calling: get_os_download_name_from_platform amzn.2017.03\r\ndotnet-install: Distribution specific OS name and version could not be detected: amzn.2017.03\r\n```\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\nIrrevelant as the issue is with the install script\r\n\r\nSame issue happens when specifying `--version 2.0.0` or  `--shared-runtime`. Can be worked around by specifying runtime as `--runtime-id rhel.7`.\r\n\r\n\r\n"}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"6716718422","Type":"IssuesEvent","CreatedAt":"2017-10-14T12:20:47","Actor":"shaggygi","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/537","RelatedDescription":"Opened issue \"[Question] Clean up milestones\" (#537) at dotnet/standard","RelatedBody":"Is it possible to close out [.NET Standard 2.0 milestone](https://github.com/dotnet/standard/milestone/2) now it is released?  I'm assuming a new milestone for v2.1 will be created once roadmap is announced.  Thx"},{"Id":"6714225269","Type":"IssuesEvent","CreatedAt":"2017-10-13T16:04:12","Actor":"ajcvickers","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/460","RelatedDescription":"Closed issue \"EntityFrameworkCore2.0 a bug about mysql\" (#460) at dotnet/standard","RelatedBody":"I have a project join some nuget packages , mysql.data,microsoft.entityframeworkcore 2.0 then it have some issues.\r\nimportment:efcore1.3 have no issue ,but efcore2.0 have a not implement method .\r\nSystem.TypeLoadException:“Method 'Clone' in type 'MySQL.Data.EntityFrameworkCore.Infraestructure.Internal.MySQLOptionsExtension' from assembly 'MySql.Data.EntityFrameworkCore, Version=8.0.8.0, Culture=neutral, PublicKeyToken=c5687fc88969c44d' does not have an implementation.”\r\n\r\n"},{"Id":"6709887129","Type":"IssuesEvent","CreatedAt":"2017-10-12T19:28:11","Actor":"virzak","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/536","RelatedDescription":"Opened issue \"public interface IValueConverter\" (#536) at dotnet/standard","RelatedBody":"Should IValueConverter be part of the .NET Standard?\r\n\r\nIt seems so since it is identical in [WPF](https://msdn.microsoft.com/en-us/library/system.windows.data.ivalueconverter(v=vs.110).aspx), [UWP](https://docs.microsoft.com/en-us/uwp/api/windows.ui.xaml.data.ivalueconverter) and [Xamarin Forms](https://developer.xamarin.com/api/type/Xamarin.Forms.IValueConverter/)\r\n\r\n\r\n"},{"Id":"6709248377","Type":"PullRequestEvent","CreatedAt":"2017-10-12T17:06:27","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/535","RelatedDescription":"Merged pull request \"Add links to API browser\" (#535) at dotnet/standard","RelatedBody":"Seems like we should link to the docs as well :-)\r\n\r\n/cc @mairaw @dend "}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"6717567728","Type":"IssuesEvent","CreatedAt":"2017-10-14T23:02:30","Actor":"mkosieradzki","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/24653","RelatedDescription":"Opened issue \"ValueTuple compatibility issues in .NET Framework 4.7.1\" (#24653) at dotnet/corefx","RelatedBody":"Cross posting for better visibility:\r\nMicrosoft/dotnet-framework-early-access#9\r\n\r\nFall creators update is going live in two days. Heads up! It will generate nasty compat issues for applications using `Task<ValueTuple>`. Not sure if this is a known issue or by design, but I have lost entire day today trying to track it down.\r\n"},{"Id":"6717545049","Type":"IssuesEvent","CreatedAt":"2017-10-14T22:41:50","Actor":"rianjs","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/24652","RelatedDescription":"Opened issue \"UriTemplate from System.ServiceModel\" (#24652) at dotnet/corefx","RelatedBody":"It would be nice to be able to do something like this:\r\n\r\n```csharp\r\nprivate static readonly UriTemplate _activationTemplate = new UriTemplate(\"license/activate/{licenseKey}\");\r\npublic async Task<LicenseActivationResponse> ActivateAsync(LicenseActivationRequest activationRequest)\r\n{\r\n    var requestUrl = _activationTemplate.BindByPosition(_httpClient.BaseAddress, activationRequest.LicenseKey);\r\n    var serialized = JsonConvert.SerializeObject(activationRequest, _serializerSettings);\r\n    var content = new StringContent(serialized, Encoding.UTF8, \"application/json\");\r\n\r\n    using (var response = await _httpClient.PutAsync(requestUrl, content).ConfigureAwait(false))\r\n    {\r\n        // ...\r\n    }\r\n    // ...\r\n}\r\n```\r\n\r\n#7983 asks about the same thing, and the response was:\r\n\r\n> Thank you for the suggestion. It is a good idea in general about having templates, but we think it belongs where it is in WCF and is not generally applicable to .NET Core.\r\n\r\nI think that comment misunderstands the use case for `UriTemplate`s. There's nothing WCF-specific about `UriTemplate`. In fact, the code above is taken from a service client implementation that interacts with an ASP.NET Core web service.\r\n\r\n`UriTemplate` represents a superior solution to building URLs than string concatenation. It would be nice if it were available in .NET Core. Building URLs is not specific to WCF."},{"Id":"6717336019","Type":"PullRequestEvent","CreatedAt":"2017-10-14T19:57:17","Actor":"justinvp","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/24651","RelatedDescription":"Opened pull request \"Environment.SystemDirectory: Avoid StringBuilder overhead\" (#24651) at dotnet/corefx","RelatedBody":"Use a stack allocated buffer, with fallback to a char array.\r\n\r\nResults on my machine:\r\n\r\n| Method |      Mean |     Error |    StdDev |  Gen 0 | Allocated |\r\n|------- |----------:|----------:|----------:|-------:|----------:|\r\n| Before | 186.50 ns | 1.6456 ns | 1.5393 ns | 0.1447 |     608 B |\r\n|  After |  68.68 ns | 0.6775 ns | 0.6006 ns | 0.0151 |      64 B |"},{"Id":"6717299481","Type":"PullRequestEvent","CreatedAt":"2017-10-14T19:28:49","Actor":"safern","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/24612","RelatedDescription":"Merged pull request \"Mark packages as stable for 2.0.3\" (#24612) at dotnet/corefx","RelatedBody":"cc: @weshaggard "},{"Id":"6717153619","Type":"IssuesEvent","CreatedAt":"2017-10-14T17:42:48","Actor":"Rew","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/24650","RelatedDescription":"Opened issue \"System.ComponentModel.Win32Exception doesn't match ref contract\" (#24650) at dotnet/corefx","RelatedBody":"I encountered an issue while working with the corefx libraries using custom tooling.  It's possible that the following scenario is allowed, but here's what I'm seeing.\r\n\r\nIn M.Win32.Primitives Win32Exception has the GetObjectData method defined in the ref contract.  The method was removed from the implementation in https://github.com/dotnet/corefx/commit/9eafffc6054c8f039d788465621bcfd49a379ca1.  Assemblies in corefx build against the ref contract and have a memberref to a non existing member.  It is still implemented by a base type, but shouldn't this cause method binding errors?  Is this a case that is allowed by CIL spec or is this actually an error hidden by coreclr?"}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"6717691759","Type":"IssuesEvent","CreatedAt":"2017-10-15T01:02:33","Actor":"ashmind","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/22700","RelatedDescription":"Opened issue \"ArgumentException (duplicate key) in VisitLambdaOrFunction when using `+=` on an indexer with a lambda argument\" (#22700) at dotnet/roslyn","RelatedBody":"**Version Used**:  2.3.2\r\n\r\n**Steps to Reproduce**:\r\n```csharp\r\nusing System;\r\n\r\npublic class Test {\r\n    public void M() {\r\n        this[() => 0] += 1;\r\n    }\r\n    \r\n    public int this[Func<int> f] {\r\n        get { return 0; }\r\n        set {}\r\n    }\r\n}\r\n```\r\nhttps://sharplab.io/#v2:D4AQDABCCMDcCwAoJIDMUBMEAqBTAzgC4QDeSEFU6IALBALIAUAlKeZR4QBYCW+A2iwgBeAHwQwAXQgBqYRDjsKAXyUQ1aCDwB2xbn34gArAB4dhcQDNpZRBw4BzXMRJQA7BNgRVd+xXzOpD4cPspAA=\r\n\r\n**Expected Behavior**:\r\nCode is compiled correctly.\r\n\r\n**Actual Behavior**:\r\n```\r\nSystem.ArgumentException: An item with the same key has already been added.\r\n   at System.ThrowHelper.ThrowArgumentException(ExceptionResource resource)\r\n   at System.Collections.Generic.Dictionary`2.Insert(TKey key, TValue value, Boolean add)\r\n   at Microsoft.CodeAnalysis.CSharp.LambdaRewriter.Analysis.VisitLambdaOrFunction(IBoundLambdaOrFunction node)\r\n   at Microsoft.CodeAnalysis.CSharp.LambdaRewriter.Analysis.VisitLambda(BoundLambda node)\r\n   at Microsoft.CodeAnalysis.CSharp.BoundLambda.Accept(BoundTreeVisitor visitor)\r\n   at Microsoft.CodeAnalysis.CSharp.BoundTreeWalkerWithStackGuard.VisitExpressionWithoutStackGuard(BoundExpression node)\r\n   at Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor.VisitExpressionWithStackGuard(Int32& recursionDepth, BoundExpression node)\r\n   at Microsoft.CodeAnalysis.CSharp.BoundTreeWalkerWithStackGuard.Visit(BoundNode node)\r\n   at Microsoft.CodeAnalysis.CSharp.BoundTreeWalker.VisitConversion(BoundConversion node)\r\n   at Microsoft.CodeAnalysis.CSharp.BoundConversion.Accept(BoundTreeVisitor visitor)\r\n   at Microsoft.CodeAnalysis.CSharp.BoundTreeWalkerWithStackGuard.VisitExpressionWithoutStackGuard(BoundExpression node)\r\n   at Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor.VisitExpressionWithStackGuard(Int32& recursionDepth, BoundExpression node)\r\n   at Microsoft.CodeAnalysis.CSharp.BoundTreeWalkerWithStackGuard.Visit(BoundNode node)\r\n   at Microsoft.CodeAnalysis.CSharp.BoundTreeWalker.VisitList[T](ImmutableArray`1 list)\r\n   at Microsoft.CodeAnalysis.CSharp.BoundTreeWalker.VisitCall(BoundCall node)\r\n   at Microsoft.CodeAnalysis.CSharp.LambdaRewriter.Analysis.VisitCall(BoundCall node)\r\n   at Microsoft.CodeAnalysis.CSharp.BoundCall.Accept(BoundTreeVisitor visitor)\r\n   at Microsoft.CodeAnalysis.CSharp.BoundTreeWalkerWithStackGuard.VisitExpressionWithoutStackGuard(BoundExpression node)\r\n   at Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor.VisitExpressionWithStackGuard(Int32& recursionDepth, BoundExpression node)\r\n   at Microsoft.CodeAnalysis.CSharp.BoundTreeWalkerWithStackGuard.Visit(BoundNode node)\r\n   at Microsoft.CodeAnalysis.CSharp.BoundTreeWalker.VisitBinaryOperator(BoundBinaryOperator node)\r\n   at Microsoft.CodeAnalysis.CSharp.BoundTreeWalkerWithStackGuardWithoutRecursionOnTheLeftOfBinaryOperator.VisitBinaryOperator(BoundBinaryOperator node)\r\n   at Microsoft.CodeAnalysis.CSharp.BoundBinaryOperator.Accept(BoundTreeVisitor visitor)\r\n   at Microsoft.CodeAnalysis.CSharp.BoundTreeWalkerWithStackGuard.VisitExpressionWithoutStackGuard(BoundExpression node)\r\n   at Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor.VisitExpressionWithStackGuard(Int32& recursionDepth, BoundExpression node)\r\n   at Microsoft.CodeAnalysis.CSharp.BoundTreeWalkerWithStackGuard.Visit(BoundNode node)\r\n   at Microsoft.CodeAnalysis.CSharp.BoundTreeWalker.VisitList[T](ImmutableArray`1 list)\r\n   at Microsoft.CodeAnalysis.CSharp.BoundTreeWalker.VisitCall(BoundCall node)\r\n   at Microsoft.CodeAnalysis.CSharp.LambdaRewriter.Analysis.VisitCall(BoundCall node)\r\n   at Microsoft.CodeAnalysis.CSharp.BoundCall.Accept(BoundTreeVisitor visitor)\r\n   at Microsoft.CodeAnalysis.CSharp.BoundTreeWalkerWithStackGuard.VisitExpressionWithoutStackGuard(BoundExpression node)\r\n   at Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor.VisitExpressionWithStackGuard(BoundExpression node)\r\n   at Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor.VisitExpressionWithStackGuard(Int32& recursionDepth, BoundExpression node)\r\n   at Microsoft.CodeAnalysis.CSharp.BoundTreeWalkerWithStackGuard.Visit(BoundNode node)\r\n   at Microsoft.CodeAnalysis.CSharp.BoundTreeWalker.VisitExpressionStatement(BoundExpressionStatement node)\r\n   at Microsoft.CodeAnalysis.CSharp.BoundExpressionStatement.Accept(BoundTreeVisitor visitor)\r\n   at Microsoft.CodeAnalysis.CSharp.BoundTreeWalkerWithStackGuard.Visit(BoundNode node)\r\n   at Microsoft.CodeAnalysis.CSharp.BoundTreeWalker.VisitSequencePoint(BoundSequencePoint node)\r\n   at Microsoft.CodeAnalysis.CSharp.BoundSequencePoint.Accept(BoundTreeVisitor visitor)\r\n   at Microsoft.CodeAnalysis.CSharp.BoundTreeWalkerWithStackGuard.Visit(BoundNode node)\r\n   at Microsoft.CodeAnalysis.CSharp.BoundTreeWalker.VisitList[T](ImmutableArray`1 list)\r\n   at Microsoft.CodeAnalysis.CSharp.LambdaRewriter.Analysis.VisitBlock(BoundBlock node)\r\n   at Microsoft.CodeAnalysis.CSharp.BoundBlock.Accept(BoundTreeVisitor visitor)\r\n   at Microsoft.CodeAnalysis.CSharp.BoundTreeWalkerWithStackGuard.Visit(BoundNode node)\r\n   at Microsoft.CodeAnalysis.CSharp.LambdaRewriter.Analysis.Analyze(BoundNode node)\r\n   at Microsoft.CodeAnalysis.CSharp.LambdaRewriter.Rewrite(BoundStatement loweredBody, NamedTypeSymbol thisType, ParameterSymbol thisParameter, MethodSymbol method, Int32 methodOrdinal, MethodSymbol substitutedSourceMethod, ArrayBuilder`1 lambdaDebugInfoBuilder, ArrayBuilder`1 closureDebugInfoBuilder, VariableSlotAllocator slotAllocatorOpt, TypeCompilationState compilationState, DiagnosticBag diagnostics, HashSet`1 assignLocals)\r\n   at Microsoft.CodeAnalysis.CSharp.MethodCompiler.LowerBodyOrInitializer(MethodSymbol method, Int32 methodOrdinal, BoundStatement body, SynthesizedSubmissionFields previousSubmissionFields, TypeCompilationState compilationState, Boolean instrumentForDynamicAnalysis, DebugDocumentProvider debugDocumentProvider, ImmutableArray`1& dynamicAnalysisSpans, DiagnosticBag diagnostics, VariableSlotAllocator& lazyVariableSlotAllocator, ArrayBuilder`1 lambdaDebugInfoBuilder, ArrayBuilder`1 closureDebugInfoBuilder, StateMachineTypeSymbol& stateMachineTypeOpt)\r\n   at Microsoft.CodeAnalysis.CSharp.MethodCompiler.CompileMethod(MethodSymbol methodSymbol, Int32 methodOrdinal, ProcessedFieldInitializers& processedInitializers, SynthesizedSubmissionFields previousSubmissionFields, TypeCompilationState compilationState)\r\n   at Microsoft.CodeAnalysis.CSharp.MethodCompiler.CompileNamedType(NamedTypeSymbol containingType)\r\n   at Microsoft.CodeAnalysis.CSharp.MethodCompiler.<>c__DisplayClass21_0.<CompileNamedTypeAsTask>b__0()\r\n   at Roslyn.Utilities.UICultureUtilities.<>c__DisplayClass5_0.<WithCurrentUICulture>b__0()\r\n   at System.Threading.Tasks.Task.InnerInvoke()\r\n   at System.Threading.Tasks.Task.Execute()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.CodeAnalysis.CSharp.MethodCompiler.WaitForWorkers()\r\n   at Microsoft.CodeAnalysis.CSharp.MethodCompiler.CompileMethodBodies(CSharpCompilation compilation, PEModuleBuilder moduleBeingBuiltOpt, Boolean emittingPdb, Boolean emitTestCoverageData, Boolean hasDeclarationErrors, DiagnosticBag diagnostics, Predicate`1 filterOpt, CancellationToken cancellationToken)\r\n   at Microsoft.CodeAnalysis.CSharp.CSharpCompilation.CompileMethods(CommonPEModuleBuilder moduleBuilder, Boolean emittingPdb, Boolean emitMetadataOnly, Boolean emitTestCoverageData, DiagnosticBag diagnostics, Predicate`1 filterOpt, CancellationToken cancellationToken)\r\n   at Microsoft.CodeAnalysis.Compilation.Emit(Stream peStream, Stream metadataPEStream, Stream pdbStream, Stream xmlDocumentationStream, Stream win32Resources, IEnumerable`1 manifestResources, EmitOptions options, IMethodSymbol debugEntryPoint, Stream sourceLinkStream, IEnumerable`1 embeddedTexts, CompilationTestData testData, CancellationToken cancellationToken)\r\n   at Microsoft.CodeAnalysis.Compilation.Emit(Stream peStream, Stream pdbStream, Stream xmlDocumentationStream, Stream win32Resources, IEnumerable`1 manifestResources, EmitOptions options, IMethodSymbol debugEntryPoint, Stream sourceLinkStream, IEnumerable`1 embeddedTexts, Stream metadataPEStream, CancellationToken cancellationToken)\r\n```\r\n\r\nNote that `master` has a different (but similar) error: `System.ArgumentException: adding a duplicate`.\r\nSee: https://sharplab.io/#v2:EYLgtghgzgLgpgJwD4AEAMACFBGA3AWACgiUBmLAJgwBU5YMBvIjFrclAFgwFkAKASkbNWImAAsAllADaAjAF4AfBjQBdDAGp5GPMJYBfPRiNkMEgHYwM4qdJQBWADwWYygGbqmhESIDmcKwYsAHYVXAxDbx8WKADGSJFI/SA===\r\n"},{"Id":"6717303372","Type":"IssuesEvent","CreatedAt":"2017-10-14T19:31:52","Actor":"terrajobst","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/22699","RelatedDescription":"Opened issue \"Generate Constructor shouldn't generate protected constructor if the class is sealed\" (#22699) at dotnet/roslyn","RelatedBody":"**Version Used**: \r\n\r\nMicrosoft Visual Studio Enterprise 2017 \r\nVersion 15.3.5\r\nVisualStudio.15.Release/15.3.5+26730.16\r\nMicrosoft .NET Framework\r\nVersion 4.7.02556\r\n\r\n**Steps to Reproduce**:\r\n\r\nDefine these types:\r\n\r\n```C#\r\ninternal abstract class BaseClass\r\n{\r\n    protected BaseClass(int value)\r\n    {\r\n    }\r\n}\r\n\r\ninternal sealed class DerivedClass : BaseClass\r\n{\r\n\r\n}\r\n```\r\n\r\nYou'll get an error for `DerivedClass` that it doesn't call the base constructor. Invoke the fixer `Generate Constructor`.\r\n\r\n**Expected Behavior**:\r\n\r\nSince `DeviedClass` is sealed it should generate a public constructor.\r\n\r\n**Actual Behavior**:\r\n\r\nIt generates a constructor matching the base visibility's constructor, which was protected:\r\n\r\n```C#\r\ninternal sealed class DerivedClass : BaseClass\r\n{\r\n    protected DerivedClass(int value) : base(value)\r\n    {\r\n    }\r\n}\r\n```\r\n"},{"Id":"6717255241","Type":"IssuesEvent","CreatedAt":"2017-10-14T18:56:21","Actor":"Meir017","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/22698","RelatedDescription":"Opened issue \"writing a CodeFix to replace methods\" (#22698) at dotnet/roslyn","RelatedBody":"I'm working on writing an analyzer that will be able to replace multiple method calls into other method calls.\r\nI'm using this specifically to create analyzers that will report wrong usages of the library `FluentAssertions`.\r\n\r\nfor example:\r\nThe following code:\r\n```cs\r\nIEnumerable<string> actual = new[] { \"a\", \"b\" };\r\n\r\nactual.Should().NotBeNull()\r\n    .And.NotBeEmpty()\r\n    .And.HaveCount(2);\r\n```\r\nshould produce a codefix:\r\n```cs\r\nIEnumerable<string> actual = new[] { \"a\", \"b\" };\r\n\r\nactual.Should().NotBeNullOrEmpty()\r\n    .And.HaveCount(2);\r\n```\r\nbut I couldn't find a way not to lose the next statements after the part I refactored\r\n\r\n![image](https://user-images.githubusercontent.com/9786571/31578423-8336091a-b129-11e7-8e55-e7c15c382bc0.png)\r\n\r\nthe expression that represents `And.HaveCount(2)` contains all of the previous code so replacing `NotBeNull().And.NotBeEmpty()` with the wanted expression is not enough"},{"Id":"6716829405","Type":"IssuesEvent","CreatedAt":"2017-10-14T13:53:42","Actor":"AArnott","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/22697","RelatedDescription":"Opened issue \"OnDownloadFullDatabaseStartedWorkerAsync registers bad task with Task Status Center\" (#22697) at dotnet/roslyn","RelatedBody":"**Version Used**: vsuvscore 27013.4000 (~15.6)\r\n\r\n**Steps to Reproduce**:\r\n\r\nWith a debugger attached that breaks on first chance exceptions:\r\nOpen VS\r\nNew Project  -> C# class library (.NET Framework)\r\n\r\nA first chance exception is observed because `VisualStudioSymbolSearchProgressService.OnDownloadFullDatabaseStartedWorkerAsync` attempts to register a task with the Task Status Center with the `RetainOnFaulted` flag, but no `DisplayTaskDetails` delegate was provided. \r\n\r\n```\r\nSystem.ArgumentNullException occurred\r\n  HResult=0x80004003\r\n  Message=Value cannot be null.\r\nParameter name: DisplayTaskDetails\r\n  Source=<Cannot evaluate the exception source>\r\n  StackTrace:\r\n   at Microsoft.Internal.VisualStudio.Shell.Validate.IsNotNull(Object o, String paramName) in F:\\dd\\src\\platform\\Utilities\\Impl\\Validate.cs:line 27\r\n\r\n \tMicrosoft.VisualStudio.Utilities.dll!Microsoft.Internal.VisualStudio.Shell.Validate.IsNotNull(object o, string paramName) Line 26\tC#\tSymbols loaded.\r\n \tMicrosoft.VisualStudio.Shell.UI.Internal.dll!Microsoft.VisualStudio.TaskStatusCenter.TscUtilities.ValideTaskHandlerOptions(Microsoft.VisualStudio.TaskStatusCenter.TaskHandlerOptions options) Line 41\tC#\tSymbols loaded.\r\n \tMicrosoft.VisualStudio.Shell.UI.Internal.dll!Microsoft.VisualStudio.TaskStatusCenter.TaskStatusCenterModel.PreRegister(Microsoft.VisualStudio.TaskStatusCenter.TaskHandlerOptions options, Microsoft.VisualStudio.TaskStatusCenter.TaskProgressData data) Line 137\tC#\tSymbols loaded.\r\n>\tMicrosoft.VisualStudio.LanguageServices.dll!Microsoft.VisualStudio.LanguageServices.SymbolSearch.VisualStudioSymbolSearchProgressService.OnDownloadFullDatabaseStartedWorkerAsync(string title) Line 67\tC#\tSymbols loaded.\r\n \tMicrosoft.VisualStudio.LanguageServices.dll!Microsoft.VisualStudio.LanguageServices.SymbolSearch.VisualStudioSymbolSearchProgressService.OnDownloadFullDatabaseStartedAsync(string title) Line 35\tC#\tSymbols loaded.\r\n \tMicrosoft.CodeAnalysis.EditorFeatures.dll!Microsoft.CodeAnalysis.SymbolSearch.SymbolSearchUpdateEngine.Updater.DownloadFullDatabaseAsync() Line 229\tC#\tSymbols loaded.\r\n \tMicrosoft.CodeAnalysis.EditorFeatures.dll!Microsoft.CodeAnalysis.SymbolSearch.SymbolSearchUpdateEngine.Updater.UpdateDatabaseInBackgroundWorkerAsync() Line 184\tC#\tSymbols loaded.\r\n \tMicrosoft.CodeAnalysis.EditorFeatures.dll!Microsoft.CodeAnalysis.SymbolSearch.SymbolSearchUpdateEngine.Updater.UpdateInBackgroundAsync() Line 116\tC#\tSymbols loaded.\r\n \tMicrosoft.CodeAnalysis.EditorFeatures.dll!Microsoft.CodeAnalysis.SymbolSearch.SymbolSearchUpdateEngine.UpdateContinuouslyAsync(string source, string localSettingsDirectory) Line 80\tC#\tSymbols loaded.\r\n \tMicrosoft.VisualStudio.LanguageServices.dll!Microsoft.VisualStudio.LanguageServices.SymbolSearch.VisualStudioSymbolSearchService.UpdateSourceInBackgroundAsync(string sourceName) Line 107\tC#\tSymbols loaded.\r\n \tMicrosoft.VisualStudio.LanguageServices.dll!Microsoft.VisualStudio.LanguageServices.SymbolSearch.VisualStudioSymbolSearchService.StartWorking.AnonymousMethod__0() Line 87\tC#\tSymbols loaded.\r\n \tmscorlib.dll!System.Threading.Tasks.Task<System.Threading.Tasks.Task>.InnerInvoke() Line 680\tC#\tSymbols loaded.\r\n \tmscorlib.dll!System.Threading.Tasks.Task.Execute() Line 2498\tC#\tSymbols loaded.\r\n \tmscorlib.dll!System.Threading.Tasks.Task.ExecutionContextCallback(object obj) Line 2861\tC#\tSymbols loaded.\r\n \tmscorlib.dll!System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, object state, bool preserveSyncCtx) Line 954\tC#\tSymbols loaded.\r\n \tmscorlib.dll!System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, object state, bool preserveSyncCtx) Line 902\tC#\tSymbols loaded.\r\n \tmscorlib.dll!System.Threading.Tasks.Task.ExecuteWithThreadLocal(ref System.Threading.Tasks.Task currentTaskSlot) Line 2827\tC#\tSymbols loaded.\r\n \tmscorlib.dll!System.Threading.Tasks.Task.ExecuteEntry(bool bPreventDoubleExecution) Line 2767\tC#\tSymbols loaded.\r\n \tmscorlib.dll!System.Threading.Tasks.Task.System.Threading.IThreadPoolWorkItem.ExecuteWorkItem() Line 2704\tC#\tSymbols loaded.\r\n \tmscorlib.dll!System.Threading.ThreadPoolWorkQueue.Dispatch() Line 820\tC#\tSymbols loaded.\r\n \tmscorlib.dll!System.Threading._ThreadPoolWaitCallback.PerformWaitCallback() Line 1161\tC#\tSymbols loaded.\r\n \t[Native to Managed Transition]\t\tAnnotated Frame\r\n \tkernel32.dll!BaseThreadInitThunk(unsigned long RunProcessInit, long(__stdcall*)(void *) StartAddress, void * Argument) Line 64\tC\tSymbols loaded.\r\n \tntdll.dll!__RtlUserThreadStart(long(__stdcall*)(void *) StartAddress, void * Argument) Line 997\tC\tSymbols loaded.\r\n \tntdll.dll!_RtlUserThreadStart(long(__stdcall*)(void *) StartAddress, void * Argument) Line 914\tC\tSymbols loaded.\r\n```"},{"Id":"6716123268","Type":"IssuesEvent","CreatedAt":"2017-10-14T03:00:17","Actor":"sharwell","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/22650","RelatedDescription":"Closed issue \"Unbounded SQLite instances/connections contributing to OOM failures\" (#22650) at dotnet/roslyn","RelatedBody":"**Version Used**: 15.3\r\n\r\nCurrently we fail to bound the number of instances of the following types which are created at runtime:\r\n\r\n* `SQLitePCL.sqlite3`\r\n* `Microsoft.CodeAnalysis.SQLite.Interop.SqlConnection`\r\n\r\nAssociated with these types is a pair of allocations in the native heap. One is 64,000 bytes, and the other is 425,600 bytes. Ordinarily, this would not be a problem. However, it appears that it is possible for the number of connections to grow over time, resulting in overwhelming memory pressure stemming from the (mis-)use of SQLite. The following image shows one such case:\r\n\r\n![image](https://user-images.githubusercontent.com/1408396/31414939-00470432-ade6-11e7-9edc-d1788a80c01a.png)\r\n\r\n\r\nAfter fixing this for 15.5, we should port the fix to 15.4 servicing."},{"Id":"6716118119","Type":"IssuesEvent","CreatedAt":"2017-10-14T02:55:40","Actor":"onyxmaster","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/22339","RelatedDescription":"Closed issue \"Frequent SQLite operations when loading analysis data lead to unnecessary amount of syscalls\" (#22339) at dotnet/roslyn","RelatedBody":"**Version Used**: \r\nReleased with VS2017 15.3.5, also custom-built from dev15.5.x\r\n\r\n**Description**:\r\n\r\nConsider a moderately large solution (our solution has ~160 projects, Roslyn one will do as an example).\r\nI'm no expert in Roslyn internals, so this is more of a cargo cult performance research, but please bear with me.\r\nSome time after solution is loaded, the `DiagnosticIncrementalAnalyzer` attempts to load initial data using `ProjectState.LoadInitialAnalysisDataAsync()`, which in its turn attempts to load multiple `DiagnosticAnalysisResult`s from the analysis database. This (in VS) invokes `SQLitePersistentStorage.ReadStreamAsync`, that invokes SQLite. By default, SQLite uses [journal mode](https://sqlite.org/pragma.html#pragma_journal_mode) *DELETE*, which means that journal is deleted when not used. When [preparing a transaction](https://github.com/mackyle/sqlite/blob/5e9d7dc9750e4bf98e7709fa09628cd156d72b80/src/btree.c#L3259), SQLite [acquires a shared lock for a btree](https://github.com/mackyle/sqlite/blob/5e9d7dc9750e4bf98e7709fa09628cd156d72b80/src/btree.c#L2951), and, consequentially, [a pager](https://github.com/mackyle/sqlite/blob/f4d982b49fb4ac64e708f2552ce1c32ad82c5472/src/pager.c#L5140), where a [series](https://github.com/mackyle/sqlite/blob/f4d982b49fb4ac64e708f2552ce1c32ad82c5472/src/pager.c#L5036) of [checks](https://github.com/mackyle/sqlite/blob/f4d982b49fb4ac64e708f2552ce1c32ad82c5472/src/pager.c#L3334) is done, testing if database needs recovery (either has rollback journal or uses WAL). Unfortunately, since the journal is deleted after each successful transaction, even read-only transactions perform an extra 2 system calls (there are actually more than 2 extra calls in non-readonly case, but these ones would suffice for now) -- the `FileIoCreate` for files named \"storage.ide-journal\" and \"storage.ide-wal\".\r\n\r\nSince there is a lot of transactions, over the course of a 10-second ETW trace captured after solution finished loading and Roslyn kicked in to load diagnostics, about 200000 of each `FileIoCreate` syscalls were recorded, making it about 200000 * 2 / 10 = 40K syscalls/s.\r\nOn all machines I have access to, this syscall is not fast enough, and disk speed (RAMDrive made no difference vs PCI-E SSD), installed driver-level filters (Defender realtime protection was turned off) or filesystem (FAT32 made no difference vs NTFS) do not matter much. Over the same trace, out of ~9600ms CPU time spent by `DiagnosticsDataSerializer.DeserializeAsync` and its descendants, the combination of `kernel32!GetFileAttributesExW` and `kernel32!GetFileSize` account for ~4200ms of CPU time, which is roughly half of the time spent deserializing data.\r\n\r\n**Proposal**:\r\nWhile I believe that some kind of read combining for inital analysis data loading would be a better solution, I consider this a larger effort that should be addressed later, so my proposal is a bit simpler: enable [write-ahead logging](https://sqlite.org/wal.html). I did a quick search over issues/PRs and didn't find any explicit mentions of WAL, except #21800, which mentions WAL by itself, but doesn't introduce it. I did a simple test, and enabling WAL reduced the initial analysis load time by about 40%.\r\n\r\n**Final notes**:\r\nAs I'm no expert on neither Roslyn and its inner workings, nor SQLite, it may be so that my analysis is incorrect. Also, there might be reasons (unknown to me) that make WAL not an option. If this is the case, please excuse me for spending your time on reading this.\r\n\r\n**Technical details**:\r\nPerformance traces were recorded with PerfView with in-memory circular buffer to prevent event loss due to lots of async transfer events. I did not record thread time, because I wasn't researching stalls/locks.\r\n***CPU analysis***:\r\nPerfView `CPU Stacks` settings:\r\n```\r\nGroupPats: [group CLR/OS entries]\r\nFoldPats: mscorlib!;mscorlib.ni!;sqlitepclraw.core!;sqlitepclraw.provider.e_sqlite3!\r\n```\r\n\r\nBefore:\r\n```\r\nName                                                                                                                                   \tInc %\t     Inc\r\n module microsoft.codeanalysis.workspaces.desktop <<microsoft.codeanalysis.workspaces.desktop!SQLitePersistentStorage.ReadStreamAsync>>\t 86,7\t   9 168\r\n+ module e_sqlite3 <<e_sqlite3!?>>                                                                                                     \t 72,4\t   7 661\r\n|+ OS <<kernelbase!GetFileAttributesExW>>                                                                                              \t 42,2\t   4 463\r\n|+ OS <<kernelbase!GetFileSize>>                                                                                                       \t  6,2\t     658\r\n|+ OS <<kernelbase!LockFileEx>>                                                                                                        \t  4,2\t     448\r\n|+ OS <<kernelbase!ReadFile>>                                                                                                          \t  3,6\t     383\r\n|+ OS <<kernelbase!UnlockFileEx>>                                                                                                      \t  2,7\t     281\r\n```\r\n\r\nAfter:\r\n```\r\nName                                                                                                                                   \tInc %\t     Inc\r\n module microsoft.codeanalysis.workspaces.desktop <<microsoft.codeanalysis.workspaces.desktop!SQLitePersistentStorage.ReadStreamAsync>>\t 75,8\t   8 151\r\n+ module e_sqlite3 <<e_sqlite3!?>>                                                                                                     \t 40,9\t   4 398\r\n|+ OS <<kernelbase!LockFileEx>>                                                                                                        \t  8,7\t     940\r\n|+ OS <<kernelbase!UnlockFileEx>>                                                                                                      \t  5,4\t     585\r\n```\r\n\r\n***Syscall analysis***:\r\nPerfView `Files Stacks` settings:\r\n```\r\nGroupPats: [group module entries]\r\nFoldPats: wow64!;wow64cpu!;ntdll!;ntoskrnl!;kernelbase!;fltmgr!;fileinfo!;sqlitepclraw.provider.e_sqlite3!;sqlitepclraw.core!;mscorlib!\r\n```\r\n\r\n```\r\nName                                                                                                                                   \tInc %\t       Inc\r\n module microsoft.codeanalysis.workspaces.desktop <<microsoft.codeanalysis.workspaces.desktop!SQLitePersistentStorage.ReadStreamAsync>>\t 97,0\t   404 878\r\n+ module e_sqlite3 <<e_sqlite3!?>>                                                                                                     \t 97,0\t   404 878\r\n + FileOpenOrCreate ...\\v15\\sqlite3\\storage.ide-journal                              \t 48,5\t   202 439\r\n + FileOpenOrCreate ...\\v15\\sqlite3\\storage.ide-wal                                  \t 48,5\t   202 439\r\n```"}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"6717878693","Type":"PullRequestEvent","CreatedAt":"2017-10-15T04:12:30","Actor":"morganbr","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/4721","RelatedDescription":"Merged pull request \"Implement Shift Opcodes for WebAssembly\" (#4721) at dotnet/corert","RelatedBody":"Fixes #4523 \r\n@morganbr."},{"Id":"6717878692","Type":"IssuesEvent","CreatedAt":"2017-10-15T04:12:30","Actor":"morganbr","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/issues/4523","RelatedDescription":"Closed issue \"Implement shift opcodes\" (#4523) at dotnet/corert","RelatedBody":"Implement the shl, shr, and shr_un opcodes, which shift integers left and right. The method to fill in is:\r\nhttps://github.com/dotnet/corert/blob/e6d0a9398e3d8fc83d047cccda302ed13610f190/src/ILCompiler.WebAssembly/src/CodeGen/ILToWebAssemblyImporter.cs#L848"},{"Id":"6717656093","Type":"IssuesEvent","CreatedAt":"2017-10-15T00:27:59","Actor":"morganbr","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/issues/4525","RelatedDescription":"Closed issue \"Implement not opcode\" (#4525) at dotnet/corert","RelatedBody":"Implement the unary not opcode, which applies logical NOT to an integer. The function to fill in is (checking the opcode for ILOpcode.not)\r\nhttps://github.com/dotnet/corert/blob/e6d0a9398e3d8fc83d047cccda302ed13610f190/src/ILCompiler.WebAssembly/src/CodeGen/ILToWebAssemblyImporter.cs#L910"},{"Id":"6717647094","Type":"IssuesEvent","CreatedAt":"2017-10-15T00:19:26","Actor":"morganbr","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/issues/4524","RelatedDescription":"Closed issue \"Implement neg opcode\" (#4524) at dotnet/corert","RelatedBody":"Implement the unary neg opcode, which negates an integer. The function to fill in is (checking the opcod e for ILOpcode.neg)\r\nhttps://github.com/dotnet/corert/blob/e6d0a9398e3d8fc83d047cccda302ed13610f190/src/ILCompiler.WebAssembly/src/CodeGen/ILToWebAssemblyImporter.cs#L910"},{"Id":"6717647078","Type":"PullRequestEvent","CreatedAt":"2017-10-15T00:19:25","Actor":"morganbr","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/4725","RelatedDescription":"Merged pull request \"Implement neg (float/integer) and not IL instructions. Fixes #4524 and #4525\" (#4725) at dotnet/corert","RelatedBody":"I took some time to implement the neg and not opcode. I also added support to float for neg op because I noticed a BuildFNeg method was available. I don't really know if this it's correct.\r\nJust let me know if this can help you guys ;)"},{"Id":"6717620414","Type":"PullRequestEvent","CreatedAt":"2017-10-14T23:53:22","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/4728","RelatedDescription":"Merged pull request \"Merge nmirror to master\" (#4728) at dotnet/corert","RelatedBody":""},{"Id":"6717383997","Type":"PullRequestEvent","CreatedAt":"2017-10-14T20:33:11","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/4728","RelatedDescription":"Opened pull request \"Merge nmirror to master\" (#4728) at dotnet/corert","RelatedBody":""},{"Id":"6717383662","Type":"PullRequestEvent","CreatedAt":"2017-10-14T20:32:54","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/4727","RelatedDescription":"Merged pull request \"Merge changes from TFS\" (#4727) at dotnet/corert","RelatedBody":"When merging, this PR, please ensure a merge commit is created as automation requires the merge commit.  Do not 'Squash and merge' or 'Rebase and merge'!"},{"Id":"6717381560","Type":"PullRequestEvent","CreatedAt":"2017-10-14T20:31:19","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/4727","RelatedDescription":"Opened pull request \"Merge changes from TFS\" (#4727) at dotnet/corert","RelatedBody":"When merging, this PR, please ensure a merge commit is created as automation requires the merge commit.  Do not 'Squash and merge' or 'Rebase and merge'!"},{"Id":"6717350402","Type":"PullRequestEvent","CreatedAt":"2017-10-14T20:07:52","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/4726","RelatedDescription":"Merged pull request \"Delete EnvironmentAugments.GetEnvironmentVariables\" (#4726) at dotnet/corert","RelatedBody":"Port https://github.com/dotnet/coreclr/pull/14500"},{"Id":"6717101862","Type":"PullRequestEvent","CreatedAt":"2017-10-14T17:06:21","Actor":"justinvp","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/4726","RelatedDescription":"Opened pull request \"Delete EnvironmentAugments.GetEnvironmentVariables\" (#4726) at dotnet/corert","RelatedBody":"Port https://github.com/dotnet/coreclr/pull/14500"},{"Id":"6717022444","Type":"PullRequestEvent","CreatedAt":"2017-10-14T16:12:35","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/4724","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#4724) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"918494723425406976","CreatedAt":"2017-10-12T15:13:01+00:00","UserScreenname":"dotnet","Text":"So many fantastic #dotnetconf sessions this year! Check them out on-demand on @ch9 https://t.co/aFDC9i36Lu https://t.co/diQ3nfOU5p","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":100,"FavoriteCount":65,"RawContent":null},{"Id":"917994173541777409","CreatedAt":"2017-10-11T06:04:01+00:00","UserScreenname":"dotnet","Text":".NET Framework October 2017 Security and Quality Rollup https://t.co/MRrH6YjXGy","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":28,"FavoriteCount":21,"RawContent":null},{"Id":"916703209548214272","CreatedAt":"2017-10-07T16:34:11+00:00","UserScreenname":"dotnet","Text":"Join @terrajobst at his fire place for a story about .NET Standard versioning. https://t.co/8JAOGpk0Pm","Source":"<a href=\"http://twitter.com/#!/download/ipad\" rel=\"nofollow\">Twitter for iPad</a>","RetweetCount":49,"FavoriteCount":27,"RawContent":null}]}},"RunOn":"2017-10-15T05:30:18.494445Z","RunDurationInMilliseconds":6263}