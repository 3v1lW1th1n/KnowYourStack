{"Data":{"Blog":{"FeedItems":[{"Title":"Migrating your existing .NET application to the cloud? Tell us about it!","PublishedOn":"2017-12-05T18:14:46+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Hi everyone! The .NET team is conducting a survey to learn more about your approach for moving existing .NET applications to the cloud.  The survey should take less than 5 minutes to complete. Take...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/12/05/migrating-your-existing-net-application-to-the-cloud-tell-us-about-it/","RawContent":null},{"Title":"Announcing the Windows Compatibility Pack for .NET Core","PublishedOn":"2017-11-17T04:59:32+00:00","CommentsCount":73,"FacebookCount":0,"Summary":"Porting existing code to .NET Core used to be quite hard because the available API set was very small. In .NET Core 2.0, we already made this much easier, thanks to .NET Standard 2.0. Today,...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/16/announcing-the-windows-compatibility-pack-for-net-core/","RawContent":null},{"Title":"UPDATE – Microservices and Docker containers: Architecture, Patterns and Development guidance (Updated for .NET Core 2.0)","PublishedOn":"2017-11-16T22:00:06+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Nov. 15th 2017 update Earlier this year, we published this eBook/guide and sample application offering guidance for architecting microservices and Docker containers based applications. We have...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/16/update-microservices-and-docker-containers-architecture-patterns-and-development-guidance-updated-for-net-core-2-0/","RawContent":null},{"Title":"UPDATE – Web Applications with ASP.NET Core Architecture and Patterns guidance (Updated for ASP.NET Core 2)","PublishedOn":"2017-11-16T21:00:05+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"Nov. 15th 2017 update Earlier this year, we published an eBook/Guide and sample application offering guidance named Architecting Modern Web Applications with ASP.NET Core and Microsoft Azure. We have...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/16/update-web-applications-with-asp-net-core-architecture-and-patterns-guidance-updated-for-asp-net-core-2/","RawContent":null},{"Title":"Introducing Tensor for multi-dimensional Machine Learning and AI data","PublishedOn":"2017-11-15T22:00:18+00:00","CommentsCount":10,"FacebookCount":0,"Summary":"Overview Tensor is an exchange type for homogenous multi-dimensional data for 1 to N dimensions. The motivation behind introducing Tensor&#60;T&#62; is to make it easy for Machine Learning library...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/15/introducing-tensor-for-multi-dimensional-machine-learning-and-ai-data/","RawContent":null},{"Title":"Introducing Nullable Reference Types in C#","PublishedOn":"2017-11-15T20:00:47+00:00","CommentsCount":234,"FacebookCount":0,"Summary":"Today we released a prototype of a C# feature called &#8220;nullable reference types&#8220;, which is intended to help you find and fix most of your null-related bugs before they blow up at runtime....","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/15/nullable-reference-types-in-csharp/","RawContent":null},{"Title":"Announcing F# support for .NET Core and .NET Standard projects in Visual Studio","PublishedOn":"2017-11-15T19:00:49+00:00","CommentsCount":11,"FacebookCount":0,"Summary":"We&#8217;re pleased to announce that Visual Studio 2017 15.5 Preview 4 now supports F# projects targeting .NET Core, .NET Standard, and .NET Framework through the .NET Core SDK. Some of you have...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/15/announcing-f-support-for-net-core-and-net-standard-projects-in-visual-studio/","RawContent":null},{"Title":"Welcome to C# 7.2 and Span","PublishedOn":"2017-11-15T19:00:26+00:00","CommentsCount":29,"FacebookCount":0,"Summary":"C# 7.2 is the latest point release of C#, and adds a number of small but useful features. All the features are described in wonderful detail in the docs. Start with the overview, What&#8217;s new in...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/15/welcome-to-c-7-2-and-span/","RawContent":null},{"Title":".NET Core November 2017 Update","PublishedOn":"2017-11-15T05:25:23+00:00","CommentsCount":12,"FacebookCount":0,"Summary":"Today, we are releasing the .NET Core November Update. This includes .NET Core 1.0.8, 1.1.5 and 2.0.1 and .NET Core SDK 1.1.5 and 2.0.3. Details regarding the security issues addressed by this release...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/14/net-core-november-2017-update/","RawContent":null},{"Title":".NET Framework November 2017 Security and Quality Rollup","PublishedOn":"2017-11-15T03:54:36+00:00","CommentsCount":8,"FacebookCount":0,"Summary":"Today, we are releasing the November 2017 Security and Quality Rollup. Security This release contains no new security updates. The most recent .NET security updates were shipped with the September...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/14/net-framework-november-2017-security-and-quality-rollup/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"6946829856","Type":"PullRequestEvent","CreatedAt":"2017-12-05T18:08:42","Actor":"heiligerdankgesang","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/92","RelatedDescription":"Opened pull request \"Remove contact email from system.drawing.md\" (#92) at dotnet/home","RelatedBody":"Contact email is outdated. Mono-project site's community section has better, more up-to-date information."},{"Id":"6934052963","Type":"PullRequestEvent","CreatedAt":"2017-12-02T15:19:09","Actor":"rprouse","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/91","RelatedDescription":"Opened pull request \"Add NUnit to the .NET Foundation Projects\" (#91) at dotnet/home","RelatedBody":""},{"Id":"6872255902","Type":"PullRequestEvent","CreatedAt":"2017-11-17T22:01:26","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/90","RelatedDescription":"Merged pull request \"Add BenchmarkDotNet to README.md and project.json\" (#90) at dotnet/home","RelatedBody":""},{"Id":"6872252909","Type":"PullRequestEvent","CreatedAt":"2017-11-17T22:00:44","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/89","RelatedDescription":"Merged pull request \"New logo and SSL certificate for Peachpie\" (#89) at dotnet/home","RelatedBody":""},{"Id":"6868854916","Type":"PullRequestEvent","CreatedAt":"2017-11-17T09:04:03","Actor":"AndreyAkinshin","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/90","RelatedDescription":"Opened pull request \"Add BenchmarkDotNet to README.md and project.json\" (#90) at dotnet/home","RelatedBody":""},{"Id":"6816687850","Type":"IssuesEvent","CreatedAt":"2017-11-06T20:30:07","Actor":"Petermarcu","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/home/issues/88","RelatedDescription":"Closed issue \"File system watcher crash\" (#88) at dotnet/home","RelatedBody":"Not sure where to open this issue.\r\nI'm experiencing crashes since I migrated to .net core 2.0 while running my site.\r\nThe following is the exception and stack trace:\r\n```\r\nAn unhandled exception of type 'System.ArgumentException' occurred in System.Private.CoreLib.dll\r\nThe path is not of a legal form.\r\n\r\nSystem.Private.CoreLib.dll!System.IO.Path.GetFullPath(string path)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileSystemGlobbing.dll!Microsoft.Extensions.FileSystemGlobbing.InMemoryDirectoryInfo.InMemoryDirectoryInfo(string rootDir, System.Collections.Generic.IEnumerable<string> files, bool normalized)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileSystemGlobbing.dll!Microsoft.Extensions.FileSystemGlobbing.MatcherExtensions.Match(Microsoft.Extensions.FileSystemGlobbing.Matcher matcher, string rootDir, System.Collections.Generic.IEnumerable<string> files)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileSystemGlobbing.dll!Microsoft.Extensions.FileSystemGlobbing.MatcherExtensions.Match(Microsoft.Extensions.FileSystemGlobbing.Matcher matcher, string file)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileProviders.Physical.dll!Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.ReportChangeForMatchedEntries(string path)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileProviders.Physical.dll!Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.OnFileSystemEntryChange(string fullPath)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileProviders.Physical.dll!Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.OnRenamed(object sender, System.IO.RenamedEventArgs e)\tUnknown\tNo symbols loaded.\r\n \tSystem.IO.FileSystem.Watcher.dll!System.IO.FileSystemWatcher.NotifyRenameEventArgs(System.IO.WatcherChangeTypes action, string name, string oldName)\tUnknown\tNo symbols loaded.\r\n \tSystem.IO.FileSystem.Watcher.dll!System.IO.FileSystemWatcher.ParseEventBufferAndNotifyForEach(byte[] buffer)\tUnknown\tNo symbols loaded.\r\n \tSystem.IO.FileSystem.Watcher.dll!System.IO.FileSystemWatcher.ReadDirectoryChangesCallback(uint errorCode, uint numBytes, System.Threading.NativeOverlapped* overlappedPointer)\tUnknown\tNo symbols loaded.\r\n \tSystem.Private.CoreLib.dll!System.Threading._IOCompletionCallback.PerformIOCompletionCallback(uint errorCode, uint numBytes, System.Threading.NativeOverlapped* pOVERLAP)\tUnknown\tNo symbols loaded.\r\n```\r\n\r\nI'm not sure how to fix this. I can reproduce it although it's not easy since I think it has to do with timing..."},{"Id":"6797468573","Type":"PullRequestEvent","CreatedAt":"2017-11-01T23:04:17","Actor":"bfistein","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/89","RelatedDescription":"Opened pull request \"New logo and SSL certificate for Peachpie\" (#89) at dotnet/home","RelatedBody":""}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"6948315401","Type":"IssuesEvent","CreatedAt":"2017-12-05T23:41:57","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/50","RelatedDescription":"Closed issue \".Net Core ARM32 SDK availability\" (#50) at dotnet/announcements","RelatedBody":"Referencing #29.\r\n\r\nWill it be possible to : \r\n\r\na) Provide ARM32 builds for the SDK at its current state\r\nor\r\nb) Provide links on how to build the .Net Core SDK for ARM32?\r\n\r\nThe thing is I am planning to use it in a virtual environnement, through proot + qemu-arm-static. This way I would be able to build and, more importantly, run unit tests on ARM32. Another thing I am planning to do is to setup a build environnement on i686 through virtualisation as qemu doesn't seem to be able to emulate x86_64 on i686 (but arm32 does seem to work well enough).\r\n\r\nThank you in advance.\r\n\r\nSergio\r\n\r\n"},{"Id":"6944555922","Type":"IssuesEvent","CreatedAt":"2017-12-05T10:46:06","Actor":"tioduke","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/50","RelatedDescription":"Opened issue \".Net Core ARM32 SDK availability\" (#50) at dotnet/announcements","RelatedBody":"Will it be possible to : \r\n\r\na) Provide ARM32 builds for the SDK at its current state\r\nor\r\nb) Provide links on how to build the .Net Core SDK for ARM32?\r\n\r\nThe thing is I am planning to use it in a virtual environnement, through proot + qemu-arm-static. This way I would be able to build and, more importantly, run unit tests on ARM32. Another thing I am planning to do is to setup a build environnement on i686 through virtualisation as qemu doesn't seem to be able to emulate x86_64 on i686 (but arm32 does seem to work well enough).\r\n\r\nThank you in advance.\r\n\r\nSergio\r\n\r\n"},{"Id":"6886438076","Type":"IssuesEvent","CreatedAt":"2017-11-21T19:28:57","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/49","RelatedDescription":"Opened issue \".NET Core Alpine Image Ready for Testing\" (#49) at dotnet/announcements","RelatedBody":"# .NET Core Alpine Image Ready for Testing\r\n\r\nAn [Alpine](https://hub.docker.com/_/alpine/)-based Docker image is now available for .NET Core. Alpine is much smaller than Debian, which we have used for the .NET Core base image to date. There have been many requests for an Alpine image. We are pleased to make it available. Please check out [.NET Core Docker Alpine Production Sample (Preview)](https://github.com/dotnet/dotnet-docker-samples/blob/master/dotnetapp-prod-alpine-preview/README.md) to see examples of using this image.\r\n\r\nWe have added two new images:\r\n\r\n- `2.1-runtime-alpine`\r\n- `2.1-runtime-deps-alpine`\r\n\r\nAlpine support is part of the .NET Core 2.1 release. .NET Core 2.1 images are currently provided at the [microsoft/dotnet-nightly](https://hub.docker.com/r/microsoft/dotnet-nightly/) repo, including the new Alpine images. .NET Core 2.1 images will be promoted to the [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/) repo when .NET Core 2.1 is shipped as a Preview, expected to be early 2018.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet/dotnet-docker-nightly #500](https://github.com/dotnet/dotnet-docker-nightly/issues/500)\r\n\r\n## Details\r\n\r\n* [dotnet/dotnet-docker-nightly #480](https://github.com/dotnet/dotnet-docker-nightly/pull/480)\r\n* [dotnet/announcements #20](https://github.com/dotnet/announcements/issues/20)\r\n* [dotnet/dotnet-docker-samples #94](https://github.com/dotnet/dotnet-docker-samples/pull/94)\r\n\r\nThe primary goal of Alpine is very small deployments. We have been considering various design decisions to make .NET Core Alpine base images as small as possible to align with that. In this first iteration, we enabled [.NET Core 2.0 Globalization Invariant Mode](https://github.com/dotnet/announcements/issues/20) in order to reduce the default size of the image. This change reduced the image by ~30MB. You can see the reduction in size for .NET Core images relative to Debian in the following table.\r\n\r\n|2.1 Image|Debian|Alpine|\r\n|-----    |------|------|\r\n|`-deps`   |153MB (68MB compressed) |13.8 MB (6MB compressed)|\r\n|`-runtime`|222MB (96MB compressed) |82.5 (34MB compressed)|\r\n\r\nNote: The compressed size is what you will see in a [registry](https://hub.docker.com/r/microsoft/dotnet-nightly/tags/) and is the wire-size cost.\r\n\r\nWe are also considering saving more space by native-compiling fewer assemblies. .NET Core runtime assemblies are native-compiled with the [crossgen tool](https://github.com/dotnet/coreclr/blob/master/Documentation/building/crossgen.md) in the [Ready2Run format](https://github.com/dotnet/coreclr/blob/master/Documentation/botr/readytorun-overview.md). Native-compiled code delivers superior startup performance but at the cost of 2-3x larger files. We have the opportunity to compile less, skipping compiling assemblies in part or in whole. We believe that we can save at least another 10MB through compiling less without a material drop in performance. For scenarios that value size over startup or where wire cost is significant, it may be valuable to aggressively reduce the number/% of compilation.\r\n\r\nAlpine images are only available for .NET Core 2.1. At the current time, only Runtime images are available. We intend to offer SDK images at a later date.\r\n\r\nUse cases that cannot tolerate Globalization invariant mode can reset the `DOTNET_SYSTEM_GLOBALIZATION_INVARIANT` environment variable and install the ICU package. Please check out [.NET Core Docker Alpine Production Sample (Preview)](https://github.com/dotnet/dotnet-docker-samples/blob/master/dotnetapp-prod-alpine-preview/README.md) to see examples of using this image with and without Globalization Invariant Mode enabled.\r\n\r\n## Call to Action\r\n\r\nPlease test your workloads with the new Alpine image. In particular, we want to know if enabling .NET Core Globalization Invariant Mode is acceptable/appreciated.\r\n"}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"7032606973","Type":"PullRequestEvent","CreatedAt":"2017-12-27T05:11:13","Actor":"tannergooding","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/15640","RelatedDescription":"Opened pull request \"Adding basic containment analysis support for hardware intrinsics.\" (#15640) at dotnet/coreclr","RelatedBody":""},{"Id":"7032599320","Type":"PullRequestEvent","CreatedAt":"2017-12-27T05:06:08","Actor":"tannergooding","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/15639","RelatedDescription":"Opened pull request \"Updating Compiler::impIntrinsic to always expand hardware intrinsics.\" (#15639) at dotnet/coreclr","RelatedBody":"Hardware intrinsics were not always being expanded on first pass. This was causing method parameters to undergo later morphing and register assignment which could potentially cause assertions to fail.\r\n\r\nIn particular, I saw `GT_CNS_INT` being transformed to `GT_CAST->GT_UBYTE->GT_LCL_VAR` which would cause issues for instructions like `Sse.Shuffle`."},{"Id":"7032269690","Type":"IssuesEvent","CreatedAt":"2017-12-27T01:55:29","Actor":"4creators","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/15638","RelatedDescription":"Opened issue \"[RyuJIT/xarch] Assertion failed 'child->isContained()' in src/jit/lsraxarch.cpp Line: 494\" (#15638) at dotnet/coreclr","RelatedBody":"CI in PR #15585 was failing for some optimized tests only (#15618 was fixed in my PR with solution from #15637) with the following errors:\r\n\r\n`Windows_NT x86 Checked Innerloop Build and Test`\r\n```\r\nAssert failure(PID 7592 [0x00001da8], Thread: 11900 [0x2e7c]): Assertion failed 'child->isContained()' in 'IntelHardwareIntrinsicTest.Program:Main(ref):int' (IL size 1287)\r\n             File: d:\\j\\workspace\\x86_checked_w---b3a226f6\\src\\jit\\lsraxarch.cpp Line: 494\r\n             Image: D:\\j\\workspace\\x86_checked_w---b3a226f6\\bin\\tests\\Windows_NT.x86.Checked\\Tests\\Core_Root\\CoreRun.exe\r\n```\r\n\r\nIdentical asserts were hit for:\r\n`Windows_NT x86 Checked Innerloop Build and Test` https://ci.dot.net/job/dotnet_coreclr/job/master/job/x86_checked_windows_nt_prtest/13677/\r\n`Ubuntu x64 Checked Innerloop Build and Test ` https://ci.dot.net/job/dotnet_coreclr/job/master/job/checked_ubuntu_flow_prtest/14336/\r\n`OSX10.12 x64 Checked Innerloop Build and Test` https://ci.dot.net/job/dotnet_coreclr/job/master/job/checked_osx10.12_flow_prtest/10570/\r\n`CentOS7.1 x64 Checked Innerloop Build and Test` https://ci.dot.net/job/dotnet_coreclr/job/master/job/checked_centos7.1_flow_prtest/2090/\r\n\r\nIt was possible to create minimum repro for the assertion:\r\n\r\n```C#\r\nusing System;\r\nusing System.Runtime.Intrinsics;\r\nusing System.Runtime.Intrinsics.X86;\r\n\r\nnamespace IntelHardwareIntrinsicTest\r\n{\r\n    internal static partial class Program\r\n    {\r\n        static unsafe int Main(string[] args)\r\n        {\r\n            if (Sse2.IsSupported)\r\n            {\r\n                using (var doubleTable = TestTableVector128<double>.Create(testsCount))\r\n                {\r\n                    (Vector128<double>, Vector128<double>, Vector128<double>) value = doubleTable[i];\r\n                    doubleTable.SetOutArray(Sse2.Add(value.Item1, value.Item2));                                          // => this call triggers assert\r\n                }\r\n            }\r\n            return 0;\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nThe workaround for the issue is quite simple, it is enough to create local variable which will receive value from `Sse2.Add(value.Item1, value.Item2)` call before passing it to `doubleTable.SetOutArray` i.e..\r\n\r\n```C#\r\n                    var result = Sse2.Add(value.Item1, value.Item2);\r\n                    doubleTable.SetOutArray(result);\r\n```\r\n\r\nThe assert is hit for all Sse2 methods tested so far when built with optimization. `TestTableVector128` codes used in test case can be found here:\r\nhttps://github.com/dotnet/coreclr/pull/15585/files#diff-a673f392be079e241929d6095941fa16\r\n"},{"Id":"7031743003","Type":"PullRequestEvent","CreatedAt":"2017-12-26T20:19:17","Actor":"4creators","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/15637","RelatedDescription":"Opened pull request \"Add dir.props files to hardware intrinsics test directories to control test env variables\" (#15637) at dotnet/coreclr","RelatedBody":"\r\nFixes ##15618"},{"Id":"7030875676","Type":"PullRequestEvent","CreatedAt":"2017-12-26T13:25:04","Actor":"dotnet-maestro-bot","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/15636","RelatedDescription":"Opened pull request \"Update CoreClr to preview1-26026-02 (master)\" (#15636) at dotnet/coreclr","RelatedBody":"/cc @dotnet/coreclr-auto-update-notify"},{"Id":"7030231403","Type":"PullRequestEvent","CreatedAt":"2017-12-26T08:40:16","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/15630","RelatedDescription":"Merged pull request \"Update CoreClr, CoreFx to preview1-26026-01, preview1-26026-01, respectively (master)\" (#15630) at dotnet/coreclr","RelatedBody":"/cc @dotnet/coreclr-auto-update-notify"}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"7032106186","Type":"IssuesEvent","CreatedAt":"2017-12-27T00:04:09","Actor":"HaythemJ","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/8296","RelatedDescription":"Opened issue \"node_modules folder is not published\" (#8296) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\ndotnet core 2.0\r\nVisual Studio 2017 15.5.1\r\nPublish Web Application\r\n\r\n## Expected  behavior\r\nfolder with name node_modules should be published like any other folder\r\n\r\n## Actual behavior\r\nfolder with name node_modules is not published\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n.NET Command Line Tools (2.1.3)\r\n\r\nProduct Information:\r\n Version:            2.1.3\r\n Commit SHA-1 hash:  a0ca411ca5\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.16299\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.3\\\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.4\r\n  Build    : 7f262f453d8c8479b9af91d34c013b3aa05bc1ff\r\n\r\nI have a Web Application where I put Javascript files under wwwroot/lib/vendors/ like below:\r\n\r\n![image](https://user-images.githubusercontent.com/9905290/34366814-94801e48-eaa1-11e7-9466-b44317333e25.png)\r\n\r\nWhen publishing the folder wwwroot/lib/vendors/node_modules is not published in the output folder which leads to missing libraries.\r\n\r\nIs there a way to force the publish of that folder?\r\n\r\n\r\n\r\n\r\n\r\n"},{"Id":"7031553002","Type":"IssuesEvent","CreatedAt":"2017-12-26T18:40:14","Actor":"shishirsasal","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/8295","RelatedDescription":"Opened issue \"Unable to resolve .NETFRameWork reference in .NETCore solution\" (#8295) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\n1. Download roslyn - https://github.com/dotnet/roslyn\r\n2. Trying to build the whole solution\r\n\r\n## Expected  behavior\r\nBuild successful\r\n\r\n## Actual behavior\r\nThrows error\r\nError\tMSB3644\tThe reference assemblies for framework \".NETFramework,Version=v4.6.1\" were not found. To resolve this, install the SDK or Targeting Pack for this framework version or retarget your application to a version of the framework for which you have the SDK or Targeting Pack installed. Note that assemblies will be resolved from the Global Assembly Cache (GAC) and will be used in place of reference assemblies. Therefore your assembly may not be correctly targeted for the framework you intend.\tCSharpCodeStyleTests\tC:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\MSBuild\\15.0\\Bin\\Microsoft.Common.CurrentVersion.targets\t1122\t\r\n\r\n## Environment data\r\nHave installed .NETCore 2.0 SDK\r\nHave installed .NETFramework4.6,.NETFramework4.6.1\r\n\r\nNOTE: All other projects are referring .NETFrameWork 4.6.1 except the one shown in below attachment\r\n\r\n![gitissue](https://user-images.githubusercontent.com/34867438/34362487-17863956-ea9a-11e7-8e8e-57c2ec3572d5.PNG)\r\n\r\n\r\n\r\n\r\n"},{"Id":"7030142767","Type":"PullRequestEvent","CreatedAt":"2017-12-26T08:00:37","Actor":"dotnet-bot","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/8294","RelatedDescription":"Opened pull request \"Merge release/2.0.0 to release/2.1\" (#8294) at dotnet/cli","RelatedBody":"\nThis is an automatically generated pull request from release/2.0.0 into release/2.1.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.0.0-to-release/2.1-20171226-080036\ngit reset --hard upstream/release/2.1\ngit merge upstream/release/2.0.0\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.0.0-to-release/2.1-20171226-080036 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"7028226039","Type":"PullRequestEvent","CreatedAt":"2017-12-25T08:00:41","Actor":"dotnet-bot","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/8293","RelatedDescription":"Opened pull request \"Merge release/2.0.0 to release/2.1\" (#8293) at dotnet/cli","RelatedBody":"\nThis is an automatically generated pull request from release/2.0.0 into release/2.1.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.0.0-to-release/2.1-20171225-080039\ngit reset --hard upstream/release/2.1\ngit merge upstream/release/2.0.0\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.0.0-to-release/2.1-20171225-080039 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"7026179007","Type":"PullRequestEvent","CreatedAt":"2017-12-23T22:17:49","Actor":"dotnet-bot","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/8292","RelatedDescription":"Opened pull request \"Update CoreSetup to preview1-26023-02 (master)\" (#8292) at dotnet/cli","RelatedBody":"/cc @dotnet/dotnet-cli"},{"Id":"7026062843","Type":"IssuesEvent","CreatedAt":"2017-12-23T20:19:41","Actor":"ThadHouse","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/8291","RelatedDescription":"Opened issue \"Better instructions for using preview SDK's from Visual Studio\" (#8291) at dotnet/cli","RelatedBody":"I wanted to test out some of the Span functionality, so I was attempting to install the newest preview SDK in order to do this. I installed the latest version of the preview SDK (2.2.0-preview1-007851 at the time of this issue), and made sure I was using Visual Studio 15.5.2. I also added the myget nuget package source to my solution. However, visual studio does not seem to properly be restoring everything. I get an error `Unable to find package Microsoft.NETCore.App with version (>= 2.2.0-preview1-007851)`, and then a whole bunch of errors saying the System namespace can not be found. I can't find any more instructions on how to make it easy to use preview SDK's from visual studios. Can I get some help with getting this working, and potentially some better instructions for future users who want to do this? Below I have put my csproj file.\r\n\r\n\r\n```\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <OutputType>Exe</OutputType>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n    <RuntimeFrameworkVersion>2.2.0-preview1-007851</RuntimeFrameworkVersion>\r\n    <LangVersion>7.2</LangVersion>\r\n  </PropertyGroup>\r\n  \r\n</Project>\r\n```\r\n\r\n"},{"Id":"7026059654","Type":"IssuesEvent","CreatedAt":"2017-12-23T20:16:29","Actor":"richlander","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/8290","RelatedDescription":"Opened issue \".NET Core SDK doesn't run in globalization invariant mode\" (#8290) at dotnet/cli","RelatedBody":"I wasn't able to get the .NET Core SDK to run in globalization invariant mode with Alpine.\r\n\r\nSee https://github.com/dotnet/dotnet-docker-nightly/pull/508\r\n\r\nTo repro, remove the last three lines of the Dockerfile.\r\n\r\nSample you can use for testing is at https://github.com/dotnet/dotnet-docker-samples/tree/alpine/dotnetapp-prod"},{"Id":"7025997341","Type":"PullRequestEvent","CreatedAt":"2017-12-23T19:15:46","Actor":"johnbeisner","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/8289","RelatedDescription":"Merged pull request \"Update CoreSetup to preview1-26023-01 (master)\" (#8289) at dotnet/cli","RelatedBody":"/cc @dotnet/dotnet-cli"}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"7020301855","Type":"IssuesEvent","CreatedAt":"2017-12-21T20:59:25","Actor":"desmondgc","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/604","RelatedDescription":"Closed issue \"How to avoid incompatibilities between .NET Standard 2.0 and .NET Framework 4.6.1\" (#604) at dotnet/standard","RelatedBody":"I have a .NET Standard 2.0 class library that uses System.Net.Http.HttpClientHandler. The class library is referenced in multiple projects, including a WPF application targeting .NET Framework 4.6.1. I am trying to set the HttpClientHandler.MaxConnectionsPerServer property which causes a MissingMethodException on systems without .NET Framework 4.7.1 installed.\r\n\r\n```\r\nvar baseHandler = new HttpClientHandler\r\n{\r\n    AutomaticDecompression = System.Net.DecompressionMethods.GZip,\r\n    MaxConnectionsPerServer = 32\r\n};\r\n```\r\n\r\n```\r\nSystem.MissingMethodException: Method not found: 'Void System.Net.Http.HttpClientHandler.set_MaxConnectionsPerServer(Int32)'.\r\n```\r\n\r\nThis is expected - MaxConnectionsPerServer is one of the [APIs with known compatibility issues](https://github.com/dotnet/standard/blob/master/netstandard/src/ApiCompatBaseline.net461.txt).\r\n\r\nFirst workaround attempt - catch MissingMethodException:\r\n\r\n```\r\nvar baseHandler = new HttpClientHandler\r\n{\r\n    AutomaticDecompression = System.Net.DecompressionMethods.GZip,\r\n};\r\n\r\ntry\r\n{\r\n    baseHandler.MaxConnectionsPerServer = 32;\r\n}\r\ncatch (MissingMethodException)\r\n{\r\n    // Available since .NET Framework 4.7.1\r\n}\r\n```\r\n\r\nDoesn't work - the exception is still raised. Some SO posts suggest that it's generally not possible to catch MissingMethodException.\r\n\r\nSecond workaround attempt - reflection:\r\n\r\n```\r\nvar baseHandler = new HttpClientHandler\r\n{\r\n    AutomaticDecompression = System.Net.DecompressionMethods.GZip,\r\n};\r\n\r\nif (typeof(HttpClientHandler).GetProperty(\"MaxConnectionsPerServer\") != null)\r\n{\r\n    // Available since .NET Framework 4.7.1\r\n    baseHandler.MaxConnectionsPerServer = 32;\r\n}\r\n```\r\n\r\nDoesn't work - GetProperty doesn't return null.\r\n\r\nHow am I expected to avoid this scenario?"}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"7032389325","Type":"PullRequestEvent","CreatedAt":"2017-12-27T02:59:14","Actor":"benaadams","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/26077","RelatedDescription":"Opened pull request \"Don't capture AsyncLocals into MemoryCache timer\" (#26077) at dotnet/corefx","RelatedBody":"Resolves https://github.com/dotnet/corefx/issues/26076"},{"Id":"7032388791","Type":"IssuesEvent","CreatedAt":"2017-12-27T02:58:55","Actor":"benaadams","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/26076","RelatedDescription":"Opened issue \"MemoryCache shouldn't capture AsyncLocals into its Timer\" (#26076) at dotnet/corefx","RelatedBody":"Causing those AsyncLocal values to live forever for the default cache and as long as the cache for custom caches"},{"Id":"7032249930","Type":"PullRequestEvent","CreatedAt":"2017-12-27T01:43:49","Actor":"benaadams","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/26075","RelatedDescription":"Opened pull request \"Don't capture AsyncLocals into EventCounter timer\" (#26075) at dotnet/corefx","RelatedBody":"Resolves: https://github.com/dotnet/corefx/issues/26074"},{"Id":"7032249364","Type":"IssuesEvent","CreatedAt":"2017-12-27T01:43:28","Actor":"benaadams","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/26074","RelatedDescription":"Opened issue \"EventCounter shouldn't capture AsyncLocals into its Timer\" (#26074) at dotnet/corefx","RelatedBody":"Causing those AsyncLocal values to live as long as the EventCounter for no benefit"},{"Id":"7032215569","Type":"PullRequestEvent","CreatedAt":"2017-12-27T01:22:28","Actor":"benaadams","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/26073","RelatedDescription":"Opened pull request \"NetworkChange shouldn't capture AsyncLocals into its Timer\" (#26073) at dotnet/corefx","RelatedBody":"Resolves https://github.com/dotnet/corefx/issues/26072"},{"Id":"7032214908","Type":"IssuesEvent","CreatedAt":"2017-12-27T01:22:03","Actor":"benaadams","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/26072","RelatedDescription":"Opened issue \"NetworkChange shouldn't capture AsyncLocals into its (static) Timer\" (#26072) at dotnet/corefx","RelatedBody":"Causing those AsyncLocal values to live forever"},{"Id":"7032203807","Type":"PullRequestEvent","CreatedAt":"2017-12-27T01:14:36","Actor":"benaadams","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/26071","RelatedDescription":"Opened pull request \"Activity shouldn't capture AsyncLocals into its Timer\" (#26071) at dotnet/corefx","RelatedBody":"Resolves https://github.com/dotnet/corefx/issues/26069"},{"Id":"7032203597","Type":"PullRequestEvent","CreatedAt":"2017-12-27T01:14:27","Actor":"dotnet-maestro-bot","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/26070","RelatedDescription":"Opened pull request \"Update CoreClr, CoreSetup to preview1-26027-01, preview1-26026-02, respectively (master)\" (#26070) at dotnet/corefx","RelatedBody":""},{"Id":"7032202200","Type":"IssuesEvent","CreatedAt":"2017-12-27T01:13:24","Actor":"benaadams","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/26069","RelatedDescription":"Opened issue \"Activity shouldn't capture AsyncLocals into its Timer\" (#26069) at dotnet/corefx","RelatedBody":"Causing those AsyncLocal values to live forever"},{"Id":"7032167994","Type":"PullRequestEvent","CreatedAt":"2017-12-27T00:50:05","Actor":"benaadams","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/26068","RelatedDescription":"Opened pull request \"Don't capture AsyncLocals into HttpConnectionPools timer\" (#26068) at dotnet/corefx","RelatedBody":"Resolves https://github.com/dotnet/corefx/issues/26067"},{"Id":"7032167756","Type":"IssuesEvent","CreatedAt":"2017-12-27T00:49:51","Actor":"benaadams","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/26067","RelatedDescription":"Opened issue \"HttpConnectionPools shouldn't capture AsyncLocals into its Timer\" (#26067) at dotnet/corefx","RelatedBody":"Causing those AsyncLocal values to live forever"},{"Id":"7032046533","Type":"PullRequestEvent","CreatedAt":"2017-12-26T23:19:15","Actor":"benaadams","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/26066","RelatedDescription":"Opened pull request \"Don't capture AsyncLocals into ODBC ConnPool\" (#26066) at dotnet/corefx","RelatedBody":"Contributes to #26064"},{"Id":"7032039650","Type":"PullRequestEvent","CreatedAt":"2017-12-26T23:14:15","Actor":"benaadams","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/26065","RelatedDescription":"Opened pull request \"Don't capture AsyncLocals into SQL ConnPool\" (#26065) at dotnet/corefx","RelatedBody":"Contributes to https://github.com/dotnet/corefx/issues/26064"},{"Id":"7032038958","Type":"IssuesEvent","CreatedAt":"2017-12-26T23:13:48","Actor":"benaadams","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/26064","RelatedDescription":"Opened issue \"DbConnectionPool shouldn't capture AsyncLocals into its Timer\" (#26064) at dotnet/corefx","RelatedBody":"Causing those AsyncLocal values to live forever\r\n\r\nAs seen in https://github.com/dotnet/corefx/issues/25477#issuecomment-346866897"}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"7031474441","Type":"IssuesEvent","CreatedAt":"2017-12-26T18:00:01","Actor":"jcouv","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/23753","RelatedDescription":"Closed issue \"Don't get offered to deconstruct tuples if there's a clash of names\" (#23753) at dotnet/roslyn","RelatedBody":"``` C#\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            (DateTime time, string path) = GetInput();\r\n            (DateTime time, string path) output = GetOutput();\r\n        }\r\n\r\n        private static (DateTime time, string path) GetInput()\r\n        {\r\n            return default((DateTime time, string path));\r\n        }\r\n\r\n        private static (DateTime time, string path) GetOutput()\r\n        {\r\n            return default((DateTime time, string path));\r\n        }\r\n    }\r\n```\r\n\r\n**Expected:** Get offered to deconstruct `(DateTime time, string path) output = GetOutput();`\r\n**Actual:** Not offered to deconstruct\r\n\r\nEither we still offer but show there's a conflict or pick a different name. This confused me because the declarations were not next to each other in my case.\r\n\r\n"},{"Id":"7031373242","Type":"IssuesEvent","CreatedAt":"2017-12-26T17:08:15","Actor":"vsfeedback","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/23940","RelatedDescription":"Opened issue \"VS2017 crash with :: operator\" (#23940) at dotnet/roslyn","RelatedBody":"I'm attempting to to type in this program. VS 2017 crashes after I type the word List in Col::List\n\nusing System;\nusing Col = System.Collections.Generic;\n\nnamespace AliasTest\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            var list1 = new Col::List&lt;int&gt;\n        }\n    }\n}\n\n_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/155278/vs2017-crash-with-operator.html\nVSTS ticketId: 529066_\n_These are the original issue comments:_\n\nMichael Quinlan on ‎11‎/‎24‎/‎2017, 07:17 AM (32 days ago): <p>The code is C#. The problem only happens when I actually type in the code; VS 2017 doesn't crash if I copy-paste the program.</p><p>In Options under Text Editor--&gt;C#--&gt;IntelliSense, I tried disabling 'Show completion list after a character is typed', 'Highlight matching portions of completion list items', and 'Show completion item filters' but the problem still occurred.</p>\n\nMichael Quinlan on ‎12‎/‎5‎/‎2017, 02:13 PM (20 days ago): <p>Problem still occurs is Visual Studio 15.5.0 (edit to add: Community Edition)</p>\n\n_These are the original issue solutions:_\n(no solutions)"}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"7030966630","Type":"PullRequestEvent","CreatedAt":"2017-12-26T14:07:13","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5155","RelatedDescription":"Merged pull request \"Merge master to nmirror\" (#5155) at dotnet/corert","RelatedBody":""},{"Id":"7030966109","Type":"PullRequestEvent","CreatedAt":"2017-12-26T14:06:59","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5155","RelatedDescription":"Opened pull request \"Merge master to nmirror\" (#5155) at dotnet/corert","RelatedBody":""},{"Id":"7030689891","Type":"PullRequestEvent","CreatedAt":"2017-12-26T11:57:31","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5146","RelatedDescription":"Merged pull request \"Give MetadataManager option to control field reflectability\" (#5146) at dotnet/corert","RelatedBody":"Progress towards #3224: The policy that says all types have all of their fields reflectable was getting hardcoded in places we don't want.\r\n\r\nI'm moving the logic down into `MetadataManager` and it's descendants so that we can have more control over this logic. This has an immediate benefit that when `EmptyMetadataManager` is in use, we no longer root all the static bases of generated types.\r\n\r\nThe `UsageBasedMetadataManager` has extensibility points to be able to track exact fields that were statically used (so that we don't reflection enable fields that weren't statically referenced), but this is currently unused. We could implement exact tracking for when ILScanner is used, but I'm not sure we would actually want this kind of debug/release difference.\r\n\r\nThis is mostly done so that we can respect field reflectability information coming from an external tool."},{"Id":"7029903432","Type":"PullRequestEvent","CreatedAt":"2017-12-26T06:04:53","Actor":"tonerdo","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5154","RelatedDescription":"Opened pull request \"Automatic generation of method export file for shared libraries\" (#5154) at dotnet/corert","RelatedBody":"This PR adds automatic generation of `.def`, `.exports` and `.map` passed with linker options `/DEF`, `exported_symbols_list` and `version-script` for building shared libraries on Windows, macOS and Linux respectively.\r\n\r\nBuilding shared libraries on all platforms is now a simple:\r\n```bash\r\ndotnet build /t:LinkNative /p:NativeLib=Shared\r\n```\r\n\r\nA good side effect of this change is that on non-Windows platforms it shaves off about 2MB from the produced binary because internally used `NativeCallable` methods are no longer exported by default\r\n\r\nFixes #4986 "}],"ResultType":"GitHubEvent"},"SDK":{"Events":[{"Id":"7025969737","Type":"PullRequestEvent","CreatedAt":"2017-12-23T18:49:12","Actor":"johnbeisner","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/1831","RelatedDescription":"Merged pull request \"Insert NuGet Build 4.6.0-preview2-4759 into sdk\" (#1831) at dotnet/sdk","RelatedBody":"Insert NuGet Build 4.6.0-preview2-4759 into sdk master branch"},{"Id":"7024482097","Type":"PullRequestEvent","CreatedAt":"2017-12-22T21:13:52","Actor":"nugetlurker","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/1831","RelatedDescription":"Opened pull request \"Insert NuGet Build 4.6.0-preview2-4759 into sdk\" (#1831) at dotnet/sdk","RelatedBody":"Insert NuGet Build 4.6.0-preview2-4759 into sdk master branch"},{"Id":"7024443991","Type":"PullRequestEvent","CreatedAt":"2017-12-22T20:57:50","Actor":"johnbeisner","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/sdk/pull/1753","RelatedDescription":null,"RelatedBody":"Insert NuGet Build 4.5.0-rtm-4651 into sdk release/15.5 branch"},{"Id":"7024440549","Type":"PullRequestEvent","CreatedAt":"2017-12-22T20:56:24","Actor":"johnbeisner","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/pull/1753","RelatedDescription":"Closed pull request \"Insert NuGet Build 4.5.0-rtm-4651 into sdk\" (#1753) at dotnet/sdk","RelatedBody":"Insert NuGet Build 4.5.0-rtm-4651 into sdk release/15.5 branch"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"944564608391577600","CreatedAt":"2017-12-23T13:45:26+00:00","UserScreenname":"dotnet","Text":"Join our Jeff Fritz - @csharpfritz and MVP @IrisClasson in about an hour for LIVE CODING and pair programming on… https://t.co/kicrnl8tNJ","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":23,"FavoriteCount":11,"RawContent":null},{"Id":"943234846079496192","CreatedAt":"2017-12-19T21:41:26+00:00","UserScreenname":"dotnet","Text":"Join our Jeff Fritz (@csharpfritz) in a little more than 2 hours for LIVE CODING. He's working on an @aspnet Core p… https://t.co/Xm2utapspg","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":37,"FavoriteCount":15,"RawContent":null},{"Id":"942039735144452097","CreatedAt":"2017-12-16T14:32:29+00:00","UserScreenname":"dotnet","Text":"Join our Jeff Fritz in 30 minutes for some LIVE CODING and answering your questions about .NET and Visual Studio.  https://t.co/UjBOoFqFp5","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":23,"FavoriteCount":18,"RawContent":null},{"Id":"941295101212549121","CreatedAt":"2017-12-14T13:13:35+00:00","UserScreenname":"dotnet","Text":"Join our Jeff Fritz at 10am ET for a LIVE CODING session.  He'll answer your questions about .NET, Visual Studio, a… https://t.co/qJHWFDaUGf","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":21,"FavoriteCount":14,"RawContent":null}]}},"RunOn":"2017-12-27T05:30:21.9748412Z","RunDurationInMilliseconds":7918}