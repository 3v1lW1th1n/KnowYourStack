{"Data":{"Blog":{"FeedItems":[{"Title":".NET Core Performance Profiling with Intel® VTune™ Amplifier 2018","PublishedOn":"2017-10-23T16:41:13+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"This post was written by Varun Venkatesan, Li Tian, and Juan Rodriguez, engineers at Intel. They are excited to share .NET Core-specific enhancements that Intel has made to VTune Amplifier 2018. We&#8217;re excited to have a new tool to use to help make .NET Core faster on Intel chips. Intel has been a strong partner in the development... <a aria-label=\"read more about .NET Core Performance Profiling with Intel® VTune™ Amplifier 2018\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/10/23/net-core-performance-profiling-with-intel-vtune-amplifier-2018/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/10/23/net-core-performance-profiling-with-intel-vtune-amplifier-2018/","RawContent":null},{"Title":"Experiment with Azure for FREE!","PublishedOn":"2017-10-19T14:00:11+00:00","CommentsCount":35,"FacebookCount":0,"Summary":"What is Azure? What can it do for me? Do I need it? How do I find out? How do I use it? Will it help my business? Can it help my career? With all the things Azure can do, it&#8217;s hard to know where to start answering these important questions. But there&#8217;s a really... <a aria-label=\"read more about Experiment with Azure for FREE!\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/10/19/experiment-with-azure-for-free/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/10/19/experiment-with-azure-for-free/","RawContent":null},{"Title":"Announcing the .NET Framework 4.7.1","PublishedOn":"2017-10-17T21:26:30+00:00","CommentsCount":29,"FacebookCount":0,"Summary":"Today, we are announcing the release of the .NET Framework 4.7.1. It’s included in the Windows 10 Fall Creators Update. .NET Framework 4.7.1 is also available on Windows 7+ and Windows Server 2008 R2+.  We’ve added support for targeting the .NET Framework 4.7.1 in Visual Studio 2017 15.5. The .NET Framework 4.7.1 includes improvements in several areas: Accessibility improvements... <a aria-label=\"read more about Announcing the .NET Framework 4.7.1\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/10/17/announcing-the-net-framework-4-7-1/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/10/17/announcing-the-net-framework-4-7-1/","RawContent":null},{"Title":".NET Framework October 2017 Preview of Quality Rollup","PublishedOn":"2017-10-17T20:56:56+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"Today, we are releasing the October 2017 Preview of Quality Rollup. This type of rollup is intended for businesses that want to the preview or use quality improvements as soon as they are available. Quality and Reliability This release contains the following quality and reliability improvements. CLR Code optimization bug for x64 C# code targeting... <a aria-label=\"read more about .NET Framework October 2017 Preview of Quality Rollup\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/10/17/net-framework-october-2017-preview-of-quality-rollup/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/10/17/net-framework-october-2017-preview-of-quality-rollup/","RawContent":null},{"Title":"RyuJIT Just-in-Time Compiler Optimization Enhancements","PublishedOn":"2017-10-17T05:16:50+00:00","CommentsCount":12,"FacebookCount":0,"Summary":"I&#8217;d like to tell you about some of the recent changes we&#8217;ve made as part of our ongoing work to extend the optimization capabilities of RyuJIT, the MSIL-to-native code generator used by .NET Core and .NET Framework. I hope it will make for an interesting read, and offer some insight into the sorts of optimization opportunities we have... <a aria-label=\"read more about RyuJIT Just-in-Time Compiler Optimization Enhancements\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/10/16/ryujit-just-in-time-compiler-optimization-enhancements/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/10/16/ryujit-just-in-time-compiler-optimization-enhancements/","RawContent":null},{"Title":".NET Framework October 2017 Security and Quality Rollup","PublishedOn":"2017-10-11T06:02:21+00:00","CommentsCount":16,"FacebookCount":0,"Summary":"Today, we are releasing the October 2017 Security and Quality Rollup. The update applies to all supported Windows versions. It includes a known issue for Windows 10 1507 (see below). Security This release contains no new security updates. Quality and Reliability This release contains the following quality and reliability improvements. WPF WPF fails to load... <a aria-label=\"read more about .NET Framework October 2017 Security and Quality Rollup\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/10/10/net-framework-october-2017-security-and-quality-rollup/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/10/10/net-framework-october-2017-security-and-quality-rollup/","RawContent":null},{"Title":"Announcing UWP Support for .NET Standard 2.0","PublishedOn":"2017-10-10T22:57:46+00:00","CommentsCount":104,"FacebookCount":0,"Summary":"This post was mostly written by Rich Lander with contributions from Immo Landwerth. Today, we are releasing huge updates to UWP for .NET developers. The really big improvement is adding support for .NET Standard 2.0. UWP developers now have access to ~ 20k more APIs. This release brings UWP to partity with the other .NET implementations... <a aria-label=\"read more about Announcing UWP Support for .NET Standard 2.0\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/10/10/announcing-uwp-support-for-net-standard-2-0/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/10/10/announcing-uwp-support-for-net-standard-2-0/","RawContent":null},{"Title":".NET Framework 4.7.1 Runtime and Compiler Features","PublishedOn":"2017-09-28T23:56:59+00:00","CommentsCount":10,"FacebookCount":0,"Summary":"This post describes the new Runtime, Compiler and Base Class Library (BCL) improvements in the .NET Framework 4.7.1. You can try out these features by downloading the Developer Pack, described in the Welcome to the .NET Framework 4.7.1 Early Access blog post.  BCL &#8211; .NET Standard 2.0 Support .NET Framework 4.7.1 has built-in support for .NET Standard 2.0. .NET Framework 4.7.1... <a aria-label=\"read more about .NET Framework 4.7.1 Runtime and Compiler Features\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/09/28/net-framework-4-7-1-runtime-and-compiler-features/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/09/28/net-framework-4-7-1-runtime-and-compiler-features/","RawContent":null},{"Title":"Build a web service with F# and .NET Core 2.0","PublishedOn":"2017-09-26T16:39:23+00:00","CommentsCount":12,"FacebookCount":0,"Summary":"Earlier this year, I wrote about an update to the roadmap for F# and .NET Core. I had mentioned that there were a number of things you could build with F# and .NET Core today, such as web services. In this post, I&#8217;ll walk through building a web service with F# and .NET Core 2.0... <a aria-label=\"read more about Build a web service with F# and .NET Core 2.0\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/09/26/build-a-web-service-with-f-and-net-core-2-0/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/09/26/build-a-web-service-with-f-and-net-core-2-0/","RawContent":null},{"Title":".NET Framework September 2017 Preview of Quality Rollup","PublishedOn":"2017-09-25T19:57:18+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Today, we are releasing the September 2017 Preview of Quality Rollup. This type of rollup is intended for businesses that want to the preview or use quality improvements as soon as they are available. This update applies to Windows 10 Update 1607 (Anniversary Update) and to Windows Server 2016. FYI: The KBs for Windows Server 2016... <a aria-label=\"read more about .NET Framework September 2017 Preview of Quality Rollup\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/09/25/net-framework-september-2017-preview-of-quality-rollup/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/09/25/net-framework-september-2017-preview-of-quality-rollup/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"6650451504","Type":"IssuesEvent","CreatedAt":"2017-09-28T16:22:10","Actor":"hughbe","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/issues/87","RelatedDescription":"Opened issue \"PRs to repos outside of dotnet/* pattern should not always thank for signing the CLA\" (#87) at dotnet/home","RelatedBody":"For example: https://github.com/mono/libgdiplus/pull/109\r\n\r\nI have already signed the CLI. On the dotnet/corefx etc. projects, I don't get the extra message:\r\n\r\n```\r\n@hughbe,\r\nThanks for having already signed the Contribution License Agreement. Your agreement was validated by .NET Foundation. We will now review your pull request.\r\nThanks,\r\n.NET Foundation Pull Request Bot\r\n```\r\n\r\nJust a small gripe, as I get an email each time I do this. I've seen this in Mono and Xunit.\r\n\r\n/cc @karelz I know this is unrelated to corefx but maybe you know the right person/repo to route this to :D\r\n"},{"Id":"6515896963","Type":"PullRequestEvent","CreatedAt":"2017-08-26T22:20:18","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/85","RelatedDescription":"Merged pull request \"Create telerik-ui-for-uwp.md\" (#85) at dotnet/home","RelatedBody":"Submission of Telerik UI for UWP"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"6729762964","Type":"IssuesEvent","CreatedAt":"2017-10-17T21:21:15","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/34","RelatedDescription":"Opened issue \"Microsoft Security Advisory CVE-2017-8585 : Malformed Culture can cause application crash\" (#34) at dotnet/announcements","RelatedBody":"# Microsoft Security Advisory CVE-2017-8585 \r\n## Malformed Culture can cause application to crash\r\n### Executive Summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in the public versions of .NET Core 1.0 and 1.1. This advisory also provides guidance on what developers can do to update their applications correctly.\r\n\r\nMicrosoft is aware of a security vulnerability in the public version of .NET Core where a malformed string request could cause an application to crash and lead to a denial of service.\r\n\r\nSystem administrators are advised to update their .NET Core runtimes to versions 1.0.7 and 1.1.4. Developers are advised to update their .NET Core SDK to version 1.1.4.\r\n\r\n### Discussion\r\n\r\nUse https://github.com/dotnet/corefx/issues/24703 for discussion of this advisory.\r\n\r\n### Mitigation Factors\r\n\r\n.NET Core 2.0 is not affected by this issue.\r\n\r\n### Advisory FAQ\r\n#### How do I know if I am affected?\r\n\r\nAny application running against .NET Core 1.0.6 or lower versions, or 1.1.2 or lower versions is affected. The latest version of the .NET core runtime you have installed in your computer can be listed by running `dotnet --info`. Running that command produces an output similar to the following:\r\n\r\n```\r\n.NET Command Line Tools (2.0.2)\r\n\r\nProduct Information:\r\n Version:            2.0.2\r\n Commit SHA-1 hash:  a04b4bf512\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.16299\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.0.2\\\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.0\r\n  Build    : e8b8861ac7faf042c87a5c2f9f2d04c98b69f28d\r\n```\r\n\r\nAs this command only displays the latest version of the runtime installed (or the version set in the *global.json* file), it may hide the fact that you have a vulnerable runtime. A complete list of runtimes can be discovered by performing a directory listing in the install root directories. The default root directories are listed in the following table:\r\n\r\n| Operating System | Location          |\r\n|------------------|-------------------|\r\n| Windows          | C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\ |\r\n| macOS            | /usr/local/share/dotnet/shared/Microsoft.NETCore.App/ |\r\n| [Supported Linux platforms](https://docs.microsoft.com/dotnet/core/linux-prerequisites#supported-linux-versions) | /usr/share/dotnet/shared/Microsoft.NETCore.App/ |\r\n\r\nEach runtime version is installed in its own directory, where the directory name is the version number. If you don't have a directory for 1.0.7 and 1.1.4, then any applications targeting 1.0 or 1.1 of .NET Core are vulnerable.\r\n\r\nAlso, even if you have a directory for 1.0.7 and 1.1.4 present in your system, if you've deployed [self-contained applications](https://docs.microsoft.com/dotnet/core/deploying/#self-contained-deployments-scd) targeting the impacted versions, these applications are also vulnerable.\r\n\r\n#### How do I fix my affected application?\r\nApplications can be fixed by installing the latest .NET Core runtimes or SDKs. Typically, application servers only have runtime packages installed and developer machines have the SDKs installed. Installers for the runtimes can be downloaded from the [Runtime and SDK download archive](https://github.com/dotnet/core/blob/master/release-notes/download-archive.md). .NET Core 1.1.4 SDK installs both versions 1.0.7 and 1.1.4 of the .NET Core runtime.\r\n\r\nIf you've built a [self-contained application](https://docs.microsoft.com/dotnet/core/deploying/#self-contained-deployments-scd), you must install the new runtime and SDK, recompile your application and redeploy.\r\n\r\n#### What if the update breaks my application?\r\nAn application can be pinned to a previous version of the runtime by editing the [*application.runtime.config*](https://github.com/dotnet/cli/blob/ede74b6be1406ba0c086b6d5fc1a5d4eacff1f01/Documentation/specs/runtime-configuration-file.md#appnameruntimeconfigjson) file for that application. Set the framework version to the desired version and the `rollForward` property to `false`. These settings should be treated as a temporary measure and the application updated to work with the patched versions of the framework.\r\n\r\nSince the *application.runtime.config* file is an optional file, you may need to create one for each application and add it alongside the executable."},{"Id":"6725652001","Type":"IssuesEvent","CreatedAt":"2017-10-17T06:48:14","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/33","RelatedDescription":"Opened issue \".NET Framework Docker Performance Issue Resolved\" (#33) at dotnet/announcements","RelatedBody":"# .NET Framework Docker Performance Issue Resolved\r\n\r\nMultiple people have [reported](https://github.com/Microsoft/dotnet-framework-docker/issues/25) that [.NET Framework performance in Docker images is poor](https://github.com/moby/moby/issues/33096). In the cases reported, performance was an order of magnitude slower than expected.\r\n\r\nThis issue has now been resolved for [microsoft/dotnet-framework](https://hub.docker.com/r/microsoft/dotnet-framework/) images. It was due to incorrectly generated NGEN images. They are now correctly generated and expected performance has been restored.\r\n\r\n## Discussion \r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-framework-docker #29](https://github.com/Microsoft/dotnet-framework-docker/pull/29)\r\n\r\n## Details\r\n\r\n* [dotnet-framework-docker #27](https://github.com/Microsoft/dotnet-framework-docker/pull/27)\r\n\r\nThe .NET Framework uses [NGEN](https://docs.microsoft.com/dotnet/framework/tools/ngen-exe-native-image-generator) as a primary mechanism for startup performance. .NET Framework assemblies are compiled to native code with the NGEN tool as part of the .NET Framework setup process. The benefit of these files is that they can be loaded and executed without any additional significant extra work required by the Common Language Runtime (CLR). The lack of  additional work means that performance is very good.\r\n\r\nNGEN image generation interacts with a Windows subsystem that is not correctly supported in Windows containers. NGEN images are generated in Windows containers, but they are not valid. Fortunately, the CLR can still run in the presence of invalid images, but code execution is much slower.\r\n\r\nWe are in the process of fixing Windows containers so that NGEN will work correctly. In the interim, we have updated the [dotnet-framework/](https://hub.docker.com/r/microsoft/dotnet-framework/) images to correctly generate NGEN images. The [microsoft/windowsservercore/](https://hub.docker.com/r/microsoft/windowsservercore/) images still have the performance problem that was initially reported. We are working on updating Windows containers so that NGEN works as expected. You are recommended to use the [dotnet-framework/](https://hub.docker.com/r/microsoft/dotnet-framework/) base image if you can, so that you can get better performance.\r\n\r\nOne of the developers that reported the performance issue shared basic performance results. The first two rows are the before state. The last row is the dotnet-framework image after the fix. The improvement is quite significant.\r\n\r\n> Runing `powershell -command (measure-command { powershell -command exit }).TotalSeconds` in various images on our CI server produced this table of timings:\r\n \r\n| time (s) | image |\r\n|----------|--------|\r\n|10.7212372| microsoft/windowsservercore |\r\n|8.3278793  | microsoft/dotnet-framework:4.7|\r\n|0.6426073  | microsoft/dotnet-framework:4.7 (after fix)|\r\n"},{"Id":"6645912196","Type":"IssuesEvent","CreatedAt":"2017-09-27T19:47:08","Actor":"terrajobst","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/32","RelatedDescription":"Opened issue \".NET Framework 4.7.1 provides built-in support for .NET Standard 2.0\" (#32) at dotnet/announcements","RelatedBody":"## Summary\r\n\r\n.NET Framework 4.7.1 will have built-in support for .NET Standard 2.0. This means that you don't have to deploy any additional files or use binding redirects to use .NET Standard 2.0 libraries.\r\n\r\nFor a demo, check out [this video][video].\r\n\r\n## Details\r\n\r\nWhile libraries targeting [.NET Standard 2.0][ns20post] are can be consumed by applications and libraries [targeting .NET Framework 4.6.1][nstable] and higher, not all files that are required for .NET Standard libraries were part of .NET Framework 4.6.1. In fact, .NET Framework 4.6.1 was shipped before .NET Standard 2.0 was even designed. That's why building an application targeting .NET Framework 4.6.1 (as well as 4.6.2 and 4.7) will have to deploy additional files.\r\n\r\n* If you use **Visual Studio 2017 15.3** or higher, these files are automatically copied to the application's output folder.\r\n\r\n* If you use **Visual Studio 2015 and [use NuGet 3.6][nuget36]**, we'll prompt you to install a [support package][vs2015support] which will handle copying the files to the output directory.\r\n\r\nStarting with .NET Framework 4.7.1 these files no longer have to be deployed with the application -- they are built right into the .NET Framework itself.\r\n\r\n.NET Framework 4.7.1 also adds[about 200 missing APIs][missingapis] that were part of .NET Standard 2.0 but not actually implemented by .NET Framework 4.6.1, 4.6.2 or 4.7.\r\n\r\nThis also removes the need for [binding redirects][netfx-issues] when using .NET Standard libraries on .NET Framework because the CLR automatically unifies version numbers of assemblies that are part of the platform.\r\n\r\nLearn more [by reading the .NET Standard FAQ](http://aka.ms/netstandardfaq).\r\n\r\n## Discussion\r\n\r\nDiscussion\r\n\r\nFor a discussion, please go to dotnet/standard#514.\r\n\r\n[ns20post]: https://blogs.msdn.microsoft.com/dotnet/2017/08/14/announcing-net-standard-2-0/\r\n[nstable]: https://docs.microsoft.com/en-us/dotnet/standard/net-standard\r\n[nuget36]: https://dist.nuget.org/visualstudio-2015-vsix/v3.6.0/NuGet.Tools.vsix\r\n[vs2015support]: https://aka.ms/netstandard-build-support-netfx\r\n[missingapis]: https://github.com/dotnet/standard/blob/master/netstandard/src/ApiCompatBaseline.net461.txt\r\n[netfx-issues]: https://github.com/dotnet/standard/issues/481\r\n[video]: https://www.youtube.com/watch?v=u67Eu_IgEMs\r\n\r\nhttps://github.com/dotnet/standard/issues/514"}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"6755926468","Type":"PullRequestEvent","CreatedAt":"2017-10-24T03:45:06","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/14664","RelatedDescription":"Merged pull request \"Report registers as dead in GCInfo before the RhpPInvoke helper.\" (#14664) at dotnet/coreclr","RelatedBody":"`CORINFO_HELP_JIT_PINVOKE_BEGIN` makes transition to preemptive mode before a P/Invoke, so it requires GC pointer state to be cleared before the helper.\r\n\r\nI checked other occurrences of `IsUnmanaged()` and looks like they already consider or do not need to consider this helper case.\r\n\r\nIf `opts.ShouldUsePInvokeHelpers()` is enabled, than the state before the P/Invoke must be clean, so we can rewrite it as:\r\n\r\n\r\n```\r\nif (opts.ShouldUsePInvokeHelpers())\r\n{\r\n    if (call->gtCallMethHnd == eeFindHelper(CORINFO_HELP_JIT_PINVOKE_BEGIN))\r\n    {\r\n        return true;\r\n    }\r\n    else if (call->IsUnmanaged())\r\n    {\r\n       assert that the state has been cleared already.\r\n       return false;\r\n    }\r\n}\r\nelse if (call->IsUnmanaged())\r\n{\r\n    return true;\r\n}\r\n```\r\nbut it doesn't harm to return true for unmanaged calls always.\r\n\r\nFix dotnet/corert#4676 .\r\n\r\nChecked that it fixes the original test."},{"Id":"6755861214","Type":"PullRequestEvent","CreatedAt":"2017-10-24T03:19:06","Actor":"davmason","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/14612","RelatedDescription":"Merged pull request \"profiler changes for tiered compilation\" (#14612) at dotnet/coreclr","RelatedBody":"Adds new profiler APIs for tiered compilation support. Also as part of this change I updated ProfToEEInterfaceImpl::GetILToNativeMapping2 to properly respect the requested rejit ID."},{"Id":"6755489262","Type":"PullRequestEvent","CreatedAt":"2017-10-24T00:51:58","Actor":"BruceForstall","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/14647","RelatedDescription":"Merged pull request \"Add original ARM64 JIT frame layout design document\" (#14647) at dotnet/coreclr","RelatedBody":""},{"Id":"6755411164","Type":"PullRequestEvent","CreatedAt":"2017-10-24T00:20:16","Actor":"sandreenko","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/14664","RelatedDescription":"Opened pull request \"Report registers as dead in GCInfo before the RhpPInvoke helper.\" (#14664) at dotnet/coreclr","RelatedBody":"`CORINFO_HELP_JIT_PINVOKE_BEGIN` makes transition to preemptive mode before a P/Invoke, so it requires GC pointer state to be cleared before the helper.\r\n\r\nI checked other occurrences of `IsUnmanaged()` and looks like they already consider or do not need to consider this helper case.\r\n\r\nIf `opts.ShouldUsePInvokeHelpers()` is enabled, than the state before the P/Invoke must be clean, so we can rewrite it as:\r\n\r\n\r\n```\r\nif (opts.ShouldUsePInvokeHelpers())\r\n{\r\n    if (call->gtCallMethHnd == eeFindHelper(CORINFO_HELP_JIT_PINVOKE_BEGIN))\r\n    {\r\n        return true;\r\n    }\r\n    else if (call->IsUnmanaged())\r\n    {\r\n       assert that the state has been cleared already.\r\n       return false;\r\n    }\r\n}\r\nelse if (call->IsUnmanaged())\r\n{\r\n    return true;\r\n}\r\n```\r\nbut it doesn't harm to return true for unmanaged calls always.\r\n"},{"Id":"6755249329","Type":"PullRequestEvent","CreatedAt":"2017-10-23T23:21:30","Actor":"davmason","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/14643","RelatedDescription":"Merged pull request \"Fix for #12609 - add option to disable tiered compilation for profilers \" (#14643) at dotnet/coreclr","RelatedBody":"Fix for #12609"}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"6755121214","Type":"IssuesEvent","CreatedAt":"2017-10-23T22:39:26","Actor":"Amine-Smahi","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/7892","RelatedDescription":"Opened issue \"error NU1605:   Microsoft.AspNetCore.All (>= 2.0.0) -> Microsoft.EntityFrameworkCore.SqlServer (>= 2.0.0) \\r\" (#7892) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\n`dotnet restore`\r\n\r\n## Expected  behavior\r\n\r\n\r\n## Actual behavior\r\n\r\n` Restoring packages for C:\\Users\\DELL\\RiderProjects\\LibraryCore\\LibraryCore\\LibraryCore.csproj...\r\n  Restoring packages for C:\\Users\\DELL\\RiderProjects\\LibraryCore\\ClassLibrary\\ClassLibrary.csproj...\r\n  Restoring packages for C:\\Users\\DELL\\RiderProjects\\LibraryCore\\LibraryCore\\LibraryCore.csproj...\r\n  Restore completed in 110.05 ms for C:\\Users\\DELL\\RiderProjects\\LibraryCore\\ClassLibrary\\ClassLibrary.csproj.\r\n  Restore completed in 111.51 ms for C:\\Users\\DELL\\RiderProjects\\LibraryCore\\ClassLibrary\\ClassLibrary.csproj.\r\n  Generating MSBuild file C:\\Users\\DELL\\RiderProjects\\LibraryCore\\ClassLibrary\\obj\\ClassLibrary.csproj.nuget.g.props.\r\n  Restore completed in 1.18 sec for C:\\Users\\DELL\\RiderProjects\\LibraryCore\\ClassLibrary\\ClassLibrary.csproj.\r\n  Restore completed in 1.89 sec for C:\\Users\\DELL\\RiderProjects\\LibraryCore\\LibraryCore\\LibraryCore.csproj.\r\nC:\\Users\\DELL\\RiderProjects\\LibraryCore\\LibraryCore\\LibraryCore.csproj : error NU1102: Unable to find package Microsoft.EntityFrameworkCore.SqlServer.Design with version (>= 2.0.0)\\r\r\nC:\\Users\\DELL\\RiderProjects\\LibraryCore\\LibraryCore\\LibraryCore.csproj : error NU1102:   - Found 14 version(s) in nuget.org [ Nearest version: 2.0.0-preview1-final ]\\r\r\nC:\\Users\\DELL\\RiderProjects\\LibraryCore\\LibraryCore\\LibraryCore.csproj : error NU1102:   - Found 1 version(s) in CliFallbackFolder [ Nearest version: 2.0.0-preview1-final ]\r\n  Generating MSBuild file C:\\Users\\DELL\\RiderProjects\\LibraryCore\\LibraryCore\\obj\\LibraryCore.csproj.nuget.g.props.\r\n  Restore failed in 8.64 sec for C:\\Users\\DELL\\RiderProjects\\LibraryCore\\LibraryCore\\LibraryCore.csproj.`\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n`.NET Command Line Tools (2.0.0)\r\n\r\nProduct Information:\r\n Version:            2.0.0\r\n Commit SHA-1 hash:  cdcd1928c9\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.10586\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.0.0\\\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.0\r\n  Build    : e8b8861ac7faf042c87a5c2f9f2d04c98b69f28d\r\n`\r\n\r\n\r\n\r\n\r\n"},{"Id":"6754986091","Type":"PullRequestEvent","CreatedAt":"2017-10-23T22:00:29","Actor":"AndyGerlicher","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/7891","RelatedDescription":"Opened pull request \"MSBuild 15.5.165\" (#7891) at dotnet/cli","RelatedBody":"Approved by Shiproom. PR pending Val build pass:\r\nhttps://devdiv.visualstudio.com/DevDiv/_git/VS/pullrequest/90779?_a=overview\r\n\r\nWill update here when that passes."},{"Id":"6754951898","Type":"PullRequestEvent","CreatedAt":"2017-10-23T21:51:48","Actor":"KevinRansom","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/7890","RelatedDescription":"Opened pull request \"update fsharp compiler for preview release\" (#7890) at dotnet/cli","RelatedBody":"Update dotnet cli to latest F# compiler."},{"Id":"6754748332","Type":"IssuesEvent","CreatedAt":"2017-10-23T21:02:46","Actor":"dsplaisted","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/7889","RelatedDescription":"Opened issue \"dotnet add package String reference error\" (#7889) at dotnet/cli","RelatedBody":"_From @gregdegruy on October 10, 2017 21:12_\n\n# String reference error\r\n\r\nNotice how there is no proper string replacement done below.\r\n```\r\nError while adding package '{0}' to project '{1}'\r\n```\r\n\r\nWould like to help fix, but not sure where the repo or if it is open source for the ERROR handling in the dotnet CLI.\r\n\r\n## Error\r\n```\r\nC:\\GitHub\\_mr.robot\\DYN.Gamification\\DYN.Gamification [master ≡ +2 ~2 -0 !]> dotnet add package Microsoft.CrmSdk.CoreAssemblies --version 8.2.0.2\r\n  Writing C:\\Users\\grdegr\\AppData\\Local\\Temp\\tmp399F.tmp\r\ninfo : Adding PackageReference for package 'Microsoft.CrmSdk.CoreAssemblies' into project 'C:\\GitHub\\_mr.robot\\DYN.Gamification\\DYN.Gamification\\DYN.Gamification.csproj'.\r\nerror: Error while adding package '{0}' to project '{1}'. dotnet add package command supports adding package to one project at a time. But no project was found at the project path '{0}'.\r\nC:\\GitHub\\_mr.robot\\DYN.Gamification\\DYN.Gamification [master ≡ +2 ~2 -0 !]>\r\n```\r\n\r\n\n\n_Copied from original issue: dotnet/docs#3368_"},{"Id":"6754647052","Type":"IssuesEvent","CreatedAt":"2017-10-23T20:40:58","Actor":"jonsequitur","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/7863","RelatedDescription":"Closed issue \"argument parsing treats --force:true argument special in user command line.\" (#7863) at dotnet/cli","RelatedBody":"## Description\r\n\r\nFor some reason, `dotnet run` has special treatment for *user* arguments of the form `--force:foo`.  The `:` gets removed and the parameter gets split into two different entries in the `args[]` array.  This doesn't happen with other argument names (see below, with `--bob:true` it works as expected, but it **eats** the `:` on the `--force:true` argument.\r\n\r\n## Steps to reproduce\r\n\r\n1. dotnet new console\r\n1. change body of main() to `Console.WriteLine(string.Join(\",\", args));`\r\n1. run command line using `dotnet run -- --force:true --bob:true`\r\n\r\n## Expected  behavior\r\n\r\noutput should be `--force:true,--bob:true`\r\n\r\n## Actual behavior\r\n\r\noutput is `--force,true,--bob:true`\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n```\r\n.NET Command Line Tools (2.0.2)\r\n\r\nProduct Information:\r\n Version:            2.0.2\r\n Commit SHA-1 hash:  a04b4bf512\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.14393\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.0.2\\\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.0\r\n  Build    : e8b8861ac7faf042c87a5c2f9f2d04c98b69f28d\r\n```"},{"Id":"6754189773","Type":"IssuesEvent","CreatedAt":"2017-10-23T19:00:43","Actor":"bergmeister","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/7888","RelatedDescription":"Opened issue \"'dotnet new xunit/mstest' commands always write to stderr\" (#7888) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\nExecuting `dotnet new mstest` or `dotnet new xunit` writes to stderr when being executed in `PowerShell 5.1`. This means that one sees red herring errors in CI systems like `AppVeyor` where stderr is treated as an error, see for example the original issue [here](https://github.com/appveyor/ci/issues/1873).\r\n```powershell\r\ndotnet new xunit 2>stderr.txt # capture stderr in file\r\ncat .\\stderr.txt\r\n```\r\n## Expected  behavior\r\nThe file should be empty if the command was successful.\r\n## Actual behavior\r\nThe following was written to stderr\r\n```\r\nAt line:1 char:1\r\n+ & dotnet new xunit  2>stderr2.txt\r\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n    + CategoryInfo          : NotSpecified: (:String) [], RemoteException\r\n    + FullyQualifiedErrorId : NativeCommandError\r\n```\r\n## Environment data\r\n`dotnet --info` output:\r\n```\r\n.NET Command Line Tools (2.0.2)\r\n\r\nProduct Information:\r\n Version:            2.0.2\r\n Commit SHA-1 hash:  a04b4bf512\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.15063\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.0.2\\\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.0\r\n  Build    : e8b8861ac7faf042c87a5c2f9f2d04c98b69f28d\r\n```"},{"Id":"6754136791","Type":"PullRequestEvent","CreatedAt":"2017-10-23T18:49:43","Actor":"wli3","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/7887","RelatedDescription":"Opened pull request \"Sync solution\" (#7887) at dotnet/cli","RelatedBody":"So there is no error open in VS"},{"Id":"6753954990","Type":"IssuesEvent","CreatedAt":"2017-10-23T18:11:27","Actor":"Kritner","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/7886","RelatedDescription":"Opened issue \"Feature Request: CLI feature update NuGet packages on solution, project, and/or folder level.\" (#7886) at dotnet/cli","RelatedBody":"It could potentially be beneficial to have a CLI command that would allow for the updating of NuGet packages from the solution level.\r\n\r\nAs we add more projects to our solutions, the projects created more recently often (as expected) have more up to date versions of packages.  In our case, we are creating several solutions, some of which depend on some library projects.  We could go into each solution, and update the packages, but this is extremely time consuming.\r\n\r\nPart of the way we were getting around this, was to have an \"all\" solution, that contained all projects.  This would allow the use of the \"Manage NuGet packages\" dialogue to update all packages at once.  At this point however, VS seems to crash based on the number of projects in the \"all\" solution (in the neighborhood of 100).\r\n\r\nIt would be extremely useful if a `dotnet nuget update` command or similar was made available, at either the solution, project, or folder (assuming it could traverse directories) level.  I'm not sure if this is such a special potential use case or not, but thought I'd throw it out there.\r\n\r\nI'd imagine certain options would be useful such as:\r\n\r\n`-consolidate` (similar to the GUI, determine all packages used, and get them all updated to the same version\r\n`-update` - updates all nuget packages to the latest version\r\n`-update-pre` - updates all nuget packages to the latest version, can use pre-release packages rather than only stable.\r\n\r\n* when given a solution file, determine projects in solution, then nuget packages used across projects\r\n* when given a project file, update only packages pertaining to that project file\r\n* when given a folder, determine projects contained within folder, and nuget packages for each project.\r\n\r\nThoughts?  I couldn't imagine I'm the only one where the \"Solution manage nuget packages\" from Visual Studio sort of bombs out.\r\n\r\n"}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"6749336295","Type":"IssuesEvent","CreatedAt":"2017-10-22T17:42:32","Actor":"ghelyar","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/545","RelatedDescription":"Opened issue \"net462 referencing netstandard2.0 - can the large number of dlls be avoided?\" (#545) at dotnet/standard","RelatedBody":"If I have a net standard 2.0 library and it's referenced by a net framework 4.6.2 console application, building the net 462 application copies almost 100 dlls to the output directory, such as System.IO.dll, System.Console.dll, etc. It also copies netstandard.dll.\r\n\r\nIf I copy just the console app .exe, the netstandard2.0 project's dll and netstandard.dll to their own directory, the exe seems to work.\r\n\r\nI had heard that all these System.* dlls were going to go away in netstandard 2.0. Are all those other dlls necessary? If net framework 4.6.2 implements net standard 2.0, shouldn't having net462 be enough? Is there any way to prevent output of all of the individual System.* dlls?\r\n\r\nMy reason for asking is that I have installers that need to be maintained, and at the moment this is causing me to avoid pulling in nuget packages which target netstandard because of the maintenance burden of installing all of the dlls they output, but more and more nuget packages are just targeting netstandard in their latest versions now, which is preventing me from keeping them up to date."},{"Id":"6745741520","Type":"IssuesEvent","CreatedAt":"2017-10-20T20:51:57","Actor":"isaac2004","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/544","RelatedDescription":"Opened issue \"DotNet Standard 2.0 Project downgraded to 1.6 and cannot update\" (#544) at dotnet/standard","RelatedBody":"I have a CL that was Standard 2.0 and after installing the 2.0.1 SDK it got downgraded somehow to 1.6 (.csproj still says 2.0). The application fails on build because of namespaces not available. When I try to upgrade through VS, I get this\r\n\r\n![capture](https://user-images.githubusercontent.com/8878502/31841261-baa2e134-b5b6-11e7-856d-2f8eeac5d88b.PNG)\r\n \r\nI am blocked to upgrade the package. If I try to upgrade via CLI, I get\r\n\r\n````\r\nPS C:\\Development\\YahooFantasyWrapper\\src\\YahooFantasyWrapper> dotnet add package NETStandard.Library --version 2.0.0\r\n  Writing C:\\Users\\Isaac\\AppData\\Local\\Temp\\tmp5E87.tmp\r\ninfo : Adding PackageReference for package 'NETStandard.Library' into project 'C:\\Development\\YahooFantasyWrapper\\src\\YahooFantasyWrapper\\YahooFantasyWrapper.csproj'.\r\nlog  : Restoring packages for C:\\Development\\YahooFantasyWrapper\\src\\YahooFantasyWrapper\\YahooFantasyWrapper.csproj...\r\ninfo : Package 'NETStandard.Library' is compatible with all the specified frameworks in project 'C:\\Development\\YahooFantasyWrapper\\src\\YahooFantasyWrapper\\YahooFantasyWrapper.csproj'.\r\nerror: Error while performing Update for package 'NETStandard.Library'. Cannot edit items in imported files -\r\nerror:   Item 'PackageReference' for 'NETStandard.Library' in Imported file 'C:\\Program Files\\dotnet\\sdk\\2.1.0-preview1-007228\\Sdks\\Microsoft.NET.Sdk\\build\\Microsoft.NET.Sdk.DefaultItems.props'.\r\n````\r\nI imagine this has to do with me upgrading to 2.0.1, but I am unable to rollback in anyway. Do I need to uninstal 2.0.1 to have 2.0.0 work?"}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"6756133923","Type":"PullRequestEvent","CreatedAt":"2017-10-24T05:16:57","Actor":"bartonjs","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/24833","RelatedDescription":"Opened pull request \"Add locking to SecureTransport P/Invokes\" (#24833) at dotnet/corefx","RelatedBody":"Makes the macOS version of SslStream capable of doing one read and one write \"at the same time\" without taking down the process.\r\n\r\nFixes #24821 (and perhaps others).\r\nBest tested by #24759 (TBD)"},{"Id":"6755904695","Type":"IssuesEvent","CreatedAt":"2017-10-24T03:36:11","Actor":"eriawan","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/24769","RelatedDescription":"Closed issue \"Need a list of enhancements/features from .NET Core that incorporated into .NET Framework\" (#24769) at dotnet/corefx","RelatedBody":"# Background\r\n\r\nSince .NET Core has been around, some of the enhancements/optimizations are put into .NET Framework.\r\nFor example, this blog post seems to provide description of optimization in .NET Core 2.0 and .NET Framework 4.7: [https://blogs.msdn.microsoft.com/dotnet/2017/06/07/performance-improvements-in-net-core/](https://blogs.msdn.microsoft.com/dotnet/2017/06/07/performance-improvements-in-net-core/)\r\nIn that article, it's nice to have an article that describe the optimizations, but there's no easy way to see the detail of optimizations in terms of what changes. especially in the forms of detailed summary of changes in the perspective of commits and merges.\r\n\r\n# Problem\r\nSince there's no easy way to quickly see solved issues or merged PR that is related to these enhancements in .NET Core that is also made in .NET Framework, it's hard for most developers to justify the upgrade of older version (example: 4.6.x) to 4.7 or even 4.7.1, rather than waiting for the MS product lifecycle to enter post-mainstream support. Also it's hard to see in the perspective of .NET Framework users, because .NET Framework is closed source in nature.\r\n\r\nI know that I can open .NET Framework refererencesources, but I see that as _\"read only\"_ because it's not open source as the nature of .NET Core.\r\nIs there any way we could have what enhancements/optimizations/feature additions that incorporated from .NET Core to .NET Framework? \r\n\r\n# Proposal\r\nThese are my proposals:\r\n\r\n1. Not just having the list of related merge/commits of what .NET Core version mapped to which .NET FW version, it would be also nice to have the detail of what breaking changes might be.\r\n2. IF this list will be long and exhaustive, maybe it's better to have its own repo such as \"netcore-netfw-featuremap\" or whatever. Therefore many of us (especially non-MS FTE contributors) can amend or make the list better with actual sample code or article, just like the blog I've mention above.\r\n\r\nAny feedback welcome! \r\ncc @danmosemsft , @Petermarcu \r\n\r\n"},{"Id":"6755808212","Type":"IssuesEvent","CreatedAt":"2017-10-24T02:58:08","Actor":"chenhuiguo","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/24832","RelatedDescription":"Opened issue \"infinite recursion during resource lookup with system.private.corelib\" (#24832) at dotnet/corefx","RelatedBody":"my program ran on ubuntu 16.04.3 buildied with dotnet2.0.0,but it failed on one machine.\r\nstack trace:\r\nAssert Failure\r\nExpression: [Recursive resource lookup bug]\r\nDescription: Infinite recursion during resource lookup within System.Private.CoreLib.  This may be a bug in System.Private.CoreLib, or potentially in certain extensibility points such as assembly resolve events or CultureInfo names.  Resource name: ArgumentNull_Generic\r\nStack Trace:\r\n   at System.SR.InternalGetResourceString(String key)\r\n   at System.SR.GetResourceString(String resourceKey, String defaultString)\r\n   at System.ArgumentNullException..ctor(String paramName)\r\n   at System.Runtime.Loader.AssemblyLoadContext.GetLoadContext(Assembly assembly)\r\n   at System.Reflection.Assembly.LoadFromResolveHandler(Object sender, ResolveEventArgs args)\r\n   at System.AppDomain.OnAssemblyResolveEvent(RuntimeAssembly assembly, String assemblyFullName)\r\n   at System.Reflection.RuntimeAssembly._nLoad(AssemblyName fileName, String codeBase, Evidence assemblySecurity, RuntimeAssembly locationHint, StackCrawlMark& stackMark, IntPtr pPrivHostBinder, Boolean throwOnFileNotFound, Boolean forIntrospection, Boolean suppressSecurityChecks, IntPtr ptrLoadContextBinder)\r\n   at System.Reflection.RuntimeAssembly.InternalGetSatelliteAssembly(String name, CultureInfo culture, Version version, Boolean throwOnFileNotFound, StackCrawlMark& stackMark)\r\n   at System.Resources.ManifestBasedResourceGroveler.GetSatelliteAssembly(CultureInfo lookForCulture, StackCrawlMark& stackMark)\r\n   at System.Resources.ManifestBasedResourceGroveler.GrovelForResourceSet(CultureInfo culture, Dictionary`2 localResourceSets, Boolean tryParents, Boolean createIfNotExists, StackCrawlMark& stackMark)\r\n   at System.Resources.ResourceManager.InternalGetResourceSet(CultureInfo requestedCulture, Boolean createIfNotExists, Boolean tryParents, StackCrawlMark& stackMark)\r\n   at System.Resources.ResourceManager.InternalGetResourceSet(CultureInfo culture, Boolean createIfNotExists, Boolean tryParents)\r\n   at System.Resources.ResourceManager.GetString(String name, CultureInfo culture)\r\n   at System.SR.InternalGetResourceString(String key)\r\n   at System.SR.GetResourceString(String resourceKey, String defaultString)\r\n   at System.ArgumentNullException..ctor(String paramName)\r\n   at System.Runtime.Loader.AssemblyLoadContext.GetLoadContext(Assembly assembly)\r\n   at System.Reflection.Assembly.LoadFromResolveHandler(Object sender, ResolveEventArgs args)\r\n   at System.AppDomain.OnAssemblyResolveEvent(RuntimeAssembly assembly, String assemblyFullName)\r\n   at System.Reflection.RuntimeAssembly._nLoad(AssemblyName fileName, String codeBase, Evidence assemblySecurity, RuntimeAssembly locationHint, StackCrawlMark& stackMark, IntPtr pPrivHostBinder, Boolean throwOnFileNotFound, Boolean forIntrospection, Boolean suppressSecurityChecks, IntPtr ptrLoadContextBinder)\r\n   at System.Reflection.RuntimeAssembly.InternalGetSatelliteAssembly(String name, CultureInfo culture, Version version, Boolean throwOnFileNotFound, StackCrawlMark& stackMark)\r\n   at System.Resources.ManifestBasedResourceGroveler.GetSatelliteAssembly(CultureInfo lookForCulture, StackCrawlMark& stackMark)\r\n   at System.Resources.ManifestBasedResourceGroveler.GrovelForResourceSet(CultureInfo culture, Dictionary`2 localResourceSets, Boolean tryParents, Boolean createIfNotExists, StackCrawlMark& stackMark)\r\n   at System.Resources.ResourceManager.InternalGetResourceSet(CultureInfo requestedCulture, Boolean createIfNotExists, Boolean tryParents, StackCrawlMark& stackMark)\r\n   at System.Resources.ResourceManager.InternalGetResourceSet(CultureInfo culture, Boolean createIfNotExists, Boolean tryParents)\r\n   at System.Resources.ResourceManager.GetString(String name, CultureInfo culture)\r\n   at System.SR.InternalGetResourceString(String key)\r\n   at System.SR.GetResourceString(String resourceKey, String defaultString)\r\n   at System.Runtime.Loader.AssemblyLoadContext.ResolveUsingEvent(AssemblyName assemblyName)\r\n   at System.Runtime.Loader.AssemblyLoadContext.ResolveUsingResolvingEvent(IntPtr gchManagedAssemblyLoadContext, AssemblyName assemblyName)\r\n   at System.Reflection.RuntimeAssembly.GetType(RuntimeAssembly assembly, String name, Boolean throwOnError, Boolean ignoreCase, ObjectHandleOnStack type, ObjectHandleOnStack keepAlive)\r\n   at System.Reflection.RuntimeAssembly.GetType(RuntimeAssembly assembly, String name, Boolean throwOnError, Boolean ignoreCase, ObjectHandleOnStack type, ObjectHandleOnStack keepAlive)\r\n   at System.Reflection.RuntimeAssembly.GetType(String name, Boolean throwOnError, Boolean ignoreCase)\r\n   at System.Reflection.Assembly.CreateInstance(String typeName, Boolean ignoreCase, BindingFlags bindingAttr, Binder binder, Object[] args, CultureInfo culture, Object[] activationAttributes)\r\n   at System.Reflection.Assembly.CreateInstance(String typeName)"},{"Id":"6755616836","Type":"PullRequestEvent","CreatedAt":"2017-10-24T01:43:01","Actor":"dotnet-maestro-bot","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/24831","RelatedDescription":"Opened pull request \"Update BuildTools, CoreClr, CoreFx, CoreSetup, ProjectNTfs, ProjectNTfsTestILC, Standard to prerelease-02120-09, preview1-25822-02, preview1-25824-01, preview1-25823-01, beta-25823-00, beta-25823-00, preview1-25823-51, respectively (master)\" (#24831) at dotnet/corefx","RelatedBody":""}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"6756021214","Type":"IssuesEvent","CreatedAt":"2017-10-24T04:26:32","Actor":"ericmutta","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/22818","RelatedDescription":"Opened issue \"VB: Editor should provide option to preserve whitespace around assignment operator.\" (#22818) at dotnet/roslyn","RelatedBody":"**Version Used**: \r\n\r\nVisual Studio Community 2017 v15.3.3\r\n\r\n**Steps to Reproduce**:\r\n\r\nOver the years VB's pretty printer has become \"less aggressive\" which is quite handy when formatting code for readability/clarity. For example, with the relaxation around line continuation characters we can now easily write this:\r\n\r\n```vb\r\nDim SomeNumber = NumberOne +\r\n                 NumberTwo +\r\n                 NumberThree\r\n```\r\n\r\nThis flexibilty also applies to the assignment operator, so you can do this:\r\n\r\n```vb\r\nDim SomeNumber = \r\n    NumberOne +\r\n    NumberTwo +\r\n    NumberThree\r\n```\r\n\r\nIn the above case, the pretty printer doesn't try to remove the white space between the assignment operator and the first expression, it just leaves it the way you wrote it. However, if the whitespace is a sequence of just tabs/spaces, it insists on removing them so you CAN'T write code that looks like this:\r\n\r\n```vb\r\n  With SomeObj\r\n   .ShortName      = Whatever() '<--- pretty printer will remove the spaces before =\r\n   .MuchLongerName = WhateverMore()\r\n   .X =              BlahBlah() '<--- pretty printer will remove the spaces after =\r\n  End With\r\n```\r\n\r\n**Expected Behavior**:\r\n\r\nIt should be possible to tell the pretty printer to preserve all kinds of whitespace (not just line breaks) around symbols (e.g. brackets) and operators (e.g. the assignment operator). This would probably be an addition to the settings under `Options > Text Editor > Basic > Code Style`.\r\n\r\nIf the request requires significant changes, then an interim quick fix is to just target the assignment operator and allow spaces before/after it. This would allow lining up the left and right hand sides of a multiple assignments which appear one after another in separate lines:\r\n\r\n```vb\r\nDim LooooooongName = Foo()\r\nDim LooooongName   = Foo()\r\nDim LooongName     = Foo()\r\nDim LongName       = Foo()\r\n```"},{"Id":"6756007133","Type":"PullRequestEvent","CreatedAt":"2017-10-24T04:19:50","Actor":"AlekseyTs","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/22795","RelatedDescription":"Merged pull request \"Address a number of IOperation issues for VB\" (#22795) at dotnet/roslyn","RelatedBody":"1. Ensure correct syntax nodes and implicit state are used for IArgument nodes matching OmittedArgumentSyntax. Fixes #22486.\r\n2. Ensure correct argument kind is associated with synthesized arguments within query expressions. Fixes #22066.\r\n3. Ensure the invariant that “each syntax node has at most one corresponding explicit IOperation node” is met for all test scenarios we have at the moment. In order to achieve this the following changes are made:\r\n-mark some synthesized bound nodes as compiler generated.\r\n-for assignment statements, ensure that ISimpleAssignmentExpression and ICompoundAssignmentExpression nodes are marked as Implicit because they are sharing syntax node with containing IExpressionStatement and VB doesn’t have a concept of an assignment expression.\r\n-for throw statements, ensure that IThrowExpression node is marked as Implicit because it is sharing syntax node with containing IExpressionStatement and VB doesn’t have a concept of a throw expression.\r\n-for Add/RemoveHandler statements, ensure that IEventAssignmentExpression node is marked as Implicit because it is sharing syntax node with containing IExpressionStatement and VB doesn’t have a concept of an event assignment expression.\r\n-ensure that receivers for IPropertyReferenceExpression representing references to query range variables are marked as implicit.\r\n-ensure that IPropertyReferenceExpression and IParameterReferenceExpression nodes representing references to query range variables are associated with correct syntax nodes.\r\n-ensure that return statements and blocks in query lambdas are marked as implicit.\r\n-for IInterpolatedStringText node, ensure the underlying ILiteralExpression is marked as implicit because it is sharing syntax node with its parent.\r\n\r\nVSO bug : https://devdiv.visualstudio.com/DevDiv/NET%20Developer%20Experience%20Productivity/_workitems/edit/512836\r\n"},{"Id":"6756007110","Type":"IssuesEvent","CreatedAt":"2017-10-24T04:19:49","Actor":"AlekseyTs","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/22066","RelatedDescription":"Closed issue \"Incorrect ArgumentKind for argument to query invocation\" (#22066) at dotnet/roslyn","RelatedBody":"Test `ImplicitSelectClause_IOperation` in QueryExpressions.vb\r\nSee https://github.com/dotnet/roslyn/pull/21356#issuecomment-325050215"},{"Id":"6756007108","Type":"IssuesEvent","CreatedAt":"2017-10-24T04:19:49","Actor":"AlekseyTs","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/22486","RelatedDescription":"Closed issue \"Ensure correct syntax node is associated with matched BoundOmittedArgument\" (#22486) at dotnet/roslyn","RelatedBody":"See unit test `DirectlyBindOmittedArgument_InvocationExpression` and the baseline operation tree for the test. Issue is explained here: https://github.com/dotnet/roslyn/pull/22444#discussion_r142282133 and the underlying reason is explained here: https://github.com/dotnet/roslyn/pull/22444#discussion_r142439183"},{"Id":"6755810286","Type":"IssuesEvent","CreatedAt":"2017-10-24T02:58:58","Actor":"ufcpp","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/22817","RelatedDescription":"Opened issue \"Confusing error message for Span stackalloc\" (#22817) at dotnet/roslyn","RelatedBody":"**Version Used**: \r\n\r\n15.5 Preview 2\r\n\r\n**Steps to Reproduce**:\r\n\r\nConvert `stackalloc T` expression to `Span<T>`.\r\n\r\n![image](https://user-images.githubusercontent.com/3760955/31922647-35df7a40-b8b1-11e7-8603-cca084cb4b09.png)\r\n\r\n**Expected Behavior**:\r\n\r\nJudging from the [test code](https://github.com/dotnet/roslyn/blob/c83671f83929da8bb0674b99f192c894da9146a0/src/Compilers/CSharp/Test/Semantic/Semantics/SpanStackSafetyTests.cs#L1279), this conversion is not allowed because I use non-ref version of `Span<T>` (in System.Memory 4.4.0-preview2-25405-01).\r\n\r\nError message should indicate that.\r\n\r\n**Actual Behavior**:\r\n\r\nThe error message is:\r\n\r\nConversion of a stackalloc expression of type 'byte' to type 'Span<byte>' is not possible.\r\n"},{"Id":"6755640371","Type":"IssuesEvent","CreatedAt":"2017-10-24T01:52:19","Actor":"TonyValenti","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/22816","RelatedDescription":"Opened issue \"GUI Issue with Object Initializer for C#\" (#22816) at dotnet/roslyn","RelatedBody":"**Version Used**: \r\nVisual Studio 2017 (15.5.0 Preview 1)\r\n\r\n\r\n**Steps to Reproduce**:\r\n\r\n````\r\n       //Put this class\r\n        public class OnlyGets {\r\n            public string[] First { get; } = new[] { \"\"};\r\n            public long[] Second { get; } = new[] { 0L };\r\n        }\r\n\r\n            var C = new OnlyGets() {\r\n              //When you create one like this, First and Second both show up as suggested autocompletes but you can't do anything with them.  Shouldn't they not be listed at all?\r\n            };\r\n\r\n````\r\n\r\n**Expected Behavior**:\r\nNo members show up in AutoComplete when I do var C = ....\r\n\r\n**Actual Behavior**:\r\nBoth First and Second actually show up even though there is no way I can assign anything to them.\r\n"},{"Id":"6755573339","Type":"IssuesEvent","CreatedAt":"2017-10-24T01:25:25","Actor":"tmat","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/22815","RelatedDescription":"Opened issue \"PathMap incorrectly handles unit-style root path \" (#22815) at dotnet/roslyn","RelatedBody":"On Windows running this command:\r\n\r\n```\r\ncsc a.cs /debug:portable /pathmap:D:\\temp=/\r\n```\r\n\r\nproduces document name ```\\a.cs``` in the PDB while I expect it to be ```/a.cs```. \r\n\r\nThe problem is the combination of trimming separators here:\r\n\r\nhttp://source.roslyn.io/#Microsoft.CodeAnalysis/CommandLine/CommonCommandLineParser.cs,209\r\n\r\nand then then not having the separator in this check:\r\n\r\nhttp://source.roslyn.io/#Microsoft.CodeAnalysis/FileSystem/PathUtilities.cs,643 \r\n\r\nAs a result we flip the separator from ```/``` to ```\\```. \r\n\r\n"}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"6755926444","Type":"IssuesEvent","CreatedAt":"2017-10-24T03:45:05","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/issues/4676","RelatedDescription":"Closed issue \"Simple/Threading test is crashing intermittently on Linux/OSX Release\" (#4676) at dotnet/corert","RelatedBody":"Repro:\r\n1. Build release on Linux or OSX\r\n2. Run Simple/Threading test in a loop\r\n\r\nResult: Intermittent crash with this callstack:\r\n```\r\n  * frame #0: 0x000000010003c450 Threading`WKS::GCHeap::Promote(Object**, ScanContext*, unsigned int) + 16\r\n    frame #1: 0x000000010000dd44 Threading`EnumGcRefsCallback(void*, void**, unsigned int) + 36\r\n    frame #2: 0x000000010009c2ae Threading`GcInfoDecoder::EnumerateLiveSlots(REGDISPLAY*, bool, unsigned int, void (*)(void*, void**, unsigned int), void*) + 5230\r\n    frame #3: 0x000000010009df78 Threading`UnixNativeCodeManager::EnumGcRefs(MethodInfo*, void*, REGDISPLAY*, GCEnumContext*) + 136\r\n    frame #4: 0x000000010000dd0d Threading`RedhawkGCInterface::EnumGcRefs(ICodeManager*, MethodInfo*, void*, REGDISPLAY*, void*, void*) + 45\r\n    frame #5: 0x000000010001bede Threading`Thread::GcScanRootsWorker(void*, void*, StackFrameIterator&) + 350\r\n    frame #6: 0x000000010001bd65 Threading`Thread::GcScanRoots(void*, void*) + 85\r\n    frame #7: 0x000000010000eaf9 Threading`GCToEEInterface::GcScanRoots(void (*)(Object**, ScanContext*, unsigned int), int, int, ScanContext*) + 313\r\n    frame #8: 0x0000000100030f74 Threading`WKS::gc_heap::mark_phase(int, unsigned int) + 420\r\n    frame #9: 0x000000010002e850 Threading`WKS::gc_heap::gc1() + 448\r\n```"},{"Id":"6755243843","Type":"PullRequestEvent","CreatedAt":"2017-10-23T23:19:30","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/4784","RelatedDescription":"Merged pull request \"Merge changes from TFS\" (#4784) at dotnet/corert","RelatedBody":"When merging, this PR, please ensure a merge commit is created as automation requires the merge commit.  Do not 'Squash and merge' or 'Rebase and merge'!"},{"Id":"6754960751","Type":"PullRequestEvent","CreatedAt":"2017-10-23T21:54:03","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/4784","RelatedDescription":"Opened pull request \"Merge changes from TFS\" (#4784) at dotnet/corert","RelatedBody":"When merging, this PR, please ensure a merge commit is created as automation requires the merge commit.  Do not 'Squash and merge' or 'Rebase and merge'!"},{"Id":"6754537387","Type":"IssuesEvent","CreatedAt":"2017-10-23T20:17:11","Actor":"morganbr","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/issues/4519","RelatedDescription":"Closed issue \"Implement switch opcode\" (#4519) at dotnet/corert","RelatedBody":"Implement the switch opcode, which handles switch statements. It may be possible to map this onto LLVM's switch statement handling. The method to fill in is:\r\nhttps://github.com/dotnet/corert/blob/e6d0a9398e3d8fc83d047cccda302ed13610f190/src/ILCompiler.WebAssembly/src/CodeGen/ILToWebAssemblyImporter.cs#L745"},{"Id":"6754537241","Type":"PullRequestEvent","CreatedAt":"2017-10-23T20:17:09","Actor":"morganbr","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/4769","RelatedDescription":"Merged pull request \"Emit switch in wasm\" (#4769) at dotnet/corert","RelatedBody":"This is emit switch in LLVM for the WASM target.\r\nAs I said in my last contribution, I tried to implement the newarr op before this one but I think we first need the newobj."},{"Id":"6753746011","Type":"PullRequestEvent","CreatedAt":"2017-10-23T17:26:54","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/4783","RelatedDescription":"Merged pull request \"Merge changes from TFS\" (#4783) at dotnet/corert","RelatedBody":"When merging, this PR, please ensure a merge commit is created as automation requires the merge commit.  Do not 'Squash and merge' or 'Rebase and merge'!"},{"Id":"6753741919","Type":"PullRequestEvent","CreatedAt":"2017-10-23T17:26:00","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/4783","RelatedDescription":"Opened pull request \"Merge changes from TFS\" (#4783) at dotnet/corert","RelatedBody":"When merging, this PR, please ensure a merge commit is created as automation requires the merge commit.  Do not 'Squash and merge' or 'Rebase and merge'!"},{"Id":"6753727192","Type":"PullRequestEvent","CreatedAt":"2017-10-23T17:22:45","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/4775","RelatedDescription":"Merged pull request \"Allow rooting a generic method in RD.XML\" (#4775) at dotnet/corert","RelatedBody":"Adds support for following syntax:\r\n\r\n```xml\r\n<Directives xmlns=\"http://schemas.microsoft.com/netfx/2013/01/metadata\">\r\n  <Application>\r\n    <Assembly Name=\"repro\">\r\n      <Type Name=\"Program\">\r\n        <Method Name=\"SayHello\">\r\n          <GenericArgument Name=\"System.Object, System.Private.CoreLib\" />\r\n        </Method>\r\n      </Type>\r\n    </Assembly>\r\n  </Application>\r\n</Directives>\r\n```\r\n\r\nSince this is temporary code, I just twisted the RD.XML syntax a bit so that we can reuse the type string parser we have for custom attribute blobs."},{"Id":"6753439069","Type":"PullRequestEvent","CreatedAt":"2017-10-23T16:22:40","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/4782","RelatedDescription":"Merged pull request \"Search/replace Debug.Assert(false, => Debug.Fail(\" (#4782) at dotnet/corert","RelatedBody":"https://github.com/dotnet/coreclr/pull/14654"},{"Id":"6753173838","Type":"PullRequestEvent","CreatedAt":"2017-10-23T15:34:46","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/4782","RelatedDescription":"Opened pull request \"Search/replace Debug.Assert(false, => Debug.Fail(\" (#4782) at dotnet/corert","RelatedBody":""},{"Id":"6751124631","Type":"IssuesEvent","CreatedAt":"2017-10-23T08:36:22","Actor":"sergign60","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/issues/4781","RelatedDescription":"Opened issue \"[RyuJIT/Armel] CoreRT generates almost unfinite stack of DivConst_DivConst__I4_Div_0 before assert DivideByZero\" (#4781) at dotnet/corert","RelatedBody":"CoreRT generates many calls of ```DivConst_DivConst__I4_Div_0``` before ```Assert (\"Divide by zero\")``` on the following tests from the regular CoreCLR test suite \r\n```\r\n   DivConst\r\n   ModConst\r\n   UDivConst\r\n   UModConst\r\n```\r\nthe call stack is \r\n```\r\nThread 1 \"DivConst\" received signal SIGABRT, Aborted.\r\n0xb6cba094 in raise () from /lib/libc.so.6\r\n(gdb) bt\r\n#0  0xb6cba094 in raise () from /lib/libc.so.6\r\n#1  0xb6cbb3f0 in abort () from /lib/libc.so.6\r\n#2  0x000207be in Assert (expr=0x3f2282 \"j && \\\"Divide by zero!\\\"\", \r\n    file=0x3f2299 \"/share/CORERT/corert/src/Native/Runtime/MathHelpers.cpp\", line_num=90, message=0x0)\r\n    at /share/CORERT/corert/src/Native/Runtime/rhassert.cpp:25\r\n#3  0x00026c18 in RhpIDiv (i=42, j=0) at /share/CORERT/corert/src/Native/Runtime/MathHelpers.cpp:90\r\n#4  0x00194d58 in DivConst_DivConst__I4_Div_0 () at /share/CORERT/corert/src/System.Private.CoreLib/src/System/EETypePtr.cs:112\r\n#5  0x00194d58 in DivConst_DivConst__I4_Div_0 () at /share/CORERT/corert/src/System.Private.CoreLib/src/System/EETypePtr.cs:112\r\n#6  0x00194d58 in DivConst_DivConst__I4_Div_0 () at /share/CORERT/corert/src/System.Private.CoreLib/src/System/EETypePtr.cs:112\r\n#7  0x00194d58 in DivConst_DivConst__I4_Div_0 () at /share/CORERT/corert/src/System.Private.CoreLib/src/System/EETypePtr.cs:112\r\n#8  0x00194d58 in DivConst_DivConst__I4_Div_0 () at /share/CORERT/corert/src/System.Private.CoreLib/src/System/EETypePtr.cs:112\r\n#9  0x00194d58 in DivConst_DivConst__I4_Div_0 () at /share/CORERT/corert/src/System.Private.CoreLib/src/System/EETypePtr.cs:112\r\n#10 0x00194d58 in DivConst_DivConst__I4_Div_0 () at /share/CORERT/corert/src/System.Private.CoreLib/src/System/EETypePtr.cs:112\r\n#11 0x00194d58 in DivConst_DivConst__I4_Div_0 () at /share/CORERT/corert/src/System.Private.CoreLib/src/System/EETypePtr.cs:112\r\n#12 0x00194d58 in DivConst_DivConst__I4_Div_0 () at /share/CORERT/corert/src/System.Private.CoreLib/src/System/EETypePtr.cs:112\r\n#13 0x00194d58 in DivConst_DivConst__I4_Div_0 () at /share/CORERT/corert/src/System.Private.CoreLib/src/System/EETypePtr.cs:112\r\n#14 0x00194d58 in DivConst_DivConst__I4_Div_0 () at /share/CORERT/corert/src/System.Private.CoreLib/src/System/EETypePtr.cs:112\r\n#15 0x00194d58 in DivConst_DivConst__I4_Div_0 () at /share/CORERT/corert/src/System.Private.CoreLib/src/System/EETypePtr.cs:112\r\n#16 0x00194d58 in DivConst_DivConst__I4_Div_0 () at /share/CORERT/corert/src/System.Private.CoreLib/src/System/EETypePtr.cs:112\r\n#17 0x00194d58 in DivConst_DivConst__I4_Div_0 () at /share/CORERT/corert/src/System.Private.CoreLib/src/System/EETypePtr.cs:112\r\n#18 0x00194d58 in DivConst_DivConst__I4_Div_0 () at /share/CORERT/corert/src/System.Private.CoreLib/src/System/EETypePtr.cs:112\r\n#19 0x00194d58 in DivConst_DivConst__I4_Div_0 () at /share/CORERT/corert/src/System.Private.CoreLib/src/System/EETypePtr.cs:112\r\n#20 0x00194d58 in DivConst_DivConst__I4_Div_0 () at /share/CORERT/corert/src/System.Private.CoreLib/src/System/EETypePtr.cs:112\r\n#21 0x00194d58 in DivConst_DivConst__I4_Div_0 () at /share/CORERT/corert/src/System.Private.CoreLib/src/System/EETypePtr.cs:112\r\n#22 0x00194d58 in DivConst_DivConst__I4_Div_0 () at /share/CORERT/corert/src/System.Private.CoreLib/src/System/EETypePtr.cs:112\r\n#23 0x00194d58 in DivConst_DivConst__I4_Div_0 () at /share/CORERT/corert/src/System.Private.CoreLib/src/System/EETypePtr.cs:112\r\n#24 0x00194d58 in DivConst_DivConst__I4_Div_0 () at /share/CORERT/corert/src/System.Private.CoreLib/src/System/EETypePtr.cs:112\r\n#25 0x00194d58 in DivConst_DivConst__I4_Div_0 () at /share/CORERT/corert/src/System.Private.CoreLib/src/System/EETypePtr.cs:112\r\n#26 0x00194d58 in DivConst_DivConst__I4_Div_0 () at /share/CORERT/corert/src/System.Private.CoreLib/src/System/EETypePtr.cs:112\r\n#27 0x00194d58 in DivConst_DivConst__I4_Div_0 () at /share/CORERT/corert/src/System.Private.CoreLib/src/System/EETypePtr.cs:112\r\n#28 0x00194d58 in DivConst_DivConst__I4_Div_0 () at /share/CORERT/corert/src/System.Private.CoreLib/src/System/EETypePtr.cs:112\r\n#29 0x00194d58 in DivConst_DivConst__I4_Div_0 () at /share/CORERT/corert/src/System.Private.CoreLib/src/System/EETypePtr.cs:112\r\n#30 0x00194d58 in DivConst_DivConst__I4_Div_0 () at /share/CORERT/corert/src/System.Private.CoreLib/src/System/EETypePtr.cs:112\r\n#31 0x00194d58 in DivConst_DivConst__I4_Div_0 () at /share/CORERT/corert/src/System.Private.CoreLib/src/System/EETypePtr.cs:112\r\n#32 0x00194d58 in DivConst_DivConst__I4_Div_0 () at /share/CORERT/corert/src/System.Private.CoreLib/src/System/EETypePtr.cs:112\r\n#33 0x00194d58 in DivConst_DivConst__I4_Div_0 () at /share/CORERT/corert/src/System.Private.CoreLib/src/System/EETypePtr.cs:112\r\n#34 0x00194d58 in DivConst_DivConst__I4_Div_0 () at /share/CORERT/corert/src/System.Private.CoreLib/src/System/EETypePtr.cs:112\r\n#35 0x00194d58 in DivConst_DivConst__I4_Div_0 () at /share/CORERT/corert/src/System.Private.CoreLib/src/System/EETypePtr.cs:112\r\n#36 0x00194d58 in DivConst_DivConst__I4_Div_0 () at /share/CORERT/corert/src/System.Private.CoreLib/src/System/EETypePtr.cs:112\r\n#37 0x00194d58 in DivConst_DivConst__I4_Div_0 () at /share/CORERT/corert/src/System.Private.CoreLib/src/System/EETypePtr.cs:112\r\n#38 0x00194d58 in DivConst_DivConst__I4_Div_0 () at /share/CORERT/corert/src/System.Private.CoreLib/src/System/EETypePtr.cs:112\r\n...\r\n#2694 0x00194d58 in DivConst_DivConst__I4_Div_0 () at /share/CORERT/corert/src/System.Private.CoreLib/src/System/EETypePtr.cs:112\r\n#2695 0x00194d58 in DivConst_DivConst__I4_Div_0 () at /share/CORERT/corert/src/System.Private.CoreLib/src/System/EETypePtr.cs:112\r\n#2696 0x00194d58 in DivConst_DivConst__I4_Div_0 () at /share/CORERT/corert/src/System.Private.CoreLib/src/System/EETypePtr.cs:112\r\n#2697 0x00194d58 in DivConst_DivConst__I4_Div_0 () at /share/CORERT/corert/src/System.Private.CoreLib/src/System/EETypePtr.cs:112\r\n#2698 0x00194d58 in DivConst_DivConst__I4_Div_0 () at /share/CORERT/corert/src/System.Private.CoreLib/src/System/EETypePtr.cs:112\r\n#2699 0x00194d58 in DivConst_DivConst__I4_Div_0 () at /share/CORERT/corert/src/System.Private.CoreLib/src/System/EETypePtr.cs:112\r\n#2700 0x00194d58 in DivConst_DivConst__I4_Div_0 () at /share/CORERT/corert/src/System.Private.CoreLib/src/System/EETypePtr.cs:112\r\n#2701 0x00194d58 in DivConst_DivConst__I4_Div_0 () at /share/CORERT/corert/src/System.Private.CoreLib/src/System/EETypePtr.cs:112\r\n...\r\n```"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"922503653402882049","CreatedAt":"2017-10-23T16:43:04+00:00","UserScreenname":"dotnet","Text":".NET Core Performance Profiling with Intel® VTune™ Amplifier 2018  https://t.co/TPKfGvwNLH /cc @intel","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":67,"FavoriteCount":39,"RawContent":null},{"Id":"921143443912474624","CreatedAt":"2017-10-19T22:38:05+00:00","UserScreenname":"dotnet","Text":"New .NET Rocks podcast with @coolcsh on understanding #dotnet standard &amp; future of #dotnetcore… https://t.co/b8BCeZKEqz","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":41,"FavoriteCount":19,"RawContent":null},{"Id":"920400974321147904","CreatedAt":"2017-10-17T21:27:47+00:00","UserScreenname":"dotnet","Text":"Announcing the .NET Framework 4.7.1 https://t.co/Vu3bilF8bZ","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":379,"FavoriteCount":344,"RawContent":null},{"Id":"920393493557555205","CreatedAt":"2017-10-17T20:58:03+00:00","UserScreenname":"dotnet","Text":".NET Framework October 2017 Preview of Quality Rollup https://t.co/oVqxMXye74","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":16,"FavoriteCount":16,"RawContent":null},{"Id":"920179824576028673","CreatedAt":"2017-10-17T06:49:00+00:00","UserScreenname":"dotnet","Text":".NET Framework Docker Performance Issue Resolved https://t.co/FST3EfcLtS","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":55,"FavoriteCount":29,"RawContent":null},{"Id":"920157146309730305","CreatedAt":"2017-10-17T05:18:54+00:00","UserScreenname":"dotnet","Text":"RyuJIT Just-in-Time Compiler Optimization Enhancements https://t.co/dhO8rAqiSI","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":133,"FavoriteCount":78,"RawContent":null},{"Id":"918494723425406976","CreatedAt":"2017-10-12T15:13:01+00:00","UserScreenname":"dotnet","Text":"So many fantastic #dotnetconf sessions this year! Check them out on-demand on @ch9 https://t.co/aFDC9i36Lu https://t.co/diQ3nfOU5p","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":108,"FavoriteCount":70,"RawContent":null},{"Id":"917994173541777409","CreatedAt":"2017-10-11T06:04:01+00:00","UserScreenname":"dotnet","Text":".NET Framework October 2017 Security and Quality Rollup https://t.co/MRrH6YjXGy","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":29,"FavoriteCount":21,"RawContent":null}]}},"RunOn":"2017-10-24T05:30:20.702141Z","RunDurationInMilliseconds":7341}