{"Data":{"GitHubIssues":{"Issues":[{"Id":"319119965","IsPullRequest":true,"CreatedAt":"2018-05-01T05:27:03","Actor":"rynowak","Number":"718","RawContent":null,"Title":"WIP Partial for fix #546 - Add more events","State":"open","Body":"Work in progress adding more built-in event types. I figure I'll keep working on this for a bit and we can merge whatever's ready before we branch","Url":"https://github.com/aspnet/Blazor/pull/718","RelatedDescription":"Open PR \"WIP Partial for fix #546 - Add more events\" (#718)"},{"Id":"319114040","IsPullRequest":true,"CreatedAt":"2018-05-01T04:38:27","Actor":"danroth27","Number":"717","RawContent":null,"Title":"Update survey link","State":"open","Body":"Fixes #712","Url":"https://github.com/aspnet/Blazor/pull/717","RelatedDescription":"Open PR \"Update survey link\" (#717)"},{"Id":"319090104","IsPullRequest":false,"CreatedAt":"2018-05-01T04:31:56","Actor":"uopeydel","Number":"716","RawContent":null,"Title":"Unable to run your project. the \"RunCommand\" property is not defined.","State":"closed","Body":"I do follow this guid.\r\n=> https://blazor.net/docs/get-started.html\r\n\r\n![image](https://user-images.githubusercontent.com/12793024/39457191-43a96ce0-4d16-11e8-99c0-3f1383d0d822.png)\r\n\r\nAt step 4 > Press Ctrl-F5 to run the app without the debugger. Running with the debugger (F5) isn't supported at this time.\r\n\r\nWhen i do it , then dialog pop.\r\n\r\n-------\r\n\r\nWhen try \"dotnet run\"\r\nresult is \r\n\r\n![image](https://user-images.githubusercontent.com/12793024/39457699-ef24670c-4d19-11e8-984d-8f422f1ffbb5.png)\r\n\r\nHow can i do for run blazor?\r\n","Url":"https://github.com/aspnet/Blazor/issues/716","RelatedDescription":"Closed issue \"Unable to run your project. the \"RunCommand\" property is not defined.\" (#716)"},{"Id":"318242553","IsPullRequest":true,"CreatedAt":"2018-05-01T04:27:23","Actor":"danroth27","Number":"692","RawContent":null,"Title":"Fixup project templates to handle project names with dashes","State":"closed","Body":"This template update is a partial fix for when the project name has a dash in it. \r\n\r\nIt's  only a partial fix because it doesn't address sanitizing the namespace for the generated component classes. @rynowak Is this something you could help me out with?","Url":"https://github.com/aspnet/Blazor/pull/692","RelatedDescription":"Closed or merged PR \"Fixup project templates to handle project names with dashes\" (#692)"},{"Id":"319051358","IsPullRequest":false,"CreatedAt":"2018-04-30T22:02:50","Actor":"chanan","Number":"715","RawContent":null,"Title":"Is there a way to stop propagation of events?","State":"open","Body":"Is there a way in onclick (I guess using UIMouseEventArgs?) to stop the click from propagating?","Url":"https://github.com/aspnet/Blazor/issues/715","RelatedDescription":"Open issue \"Is there a way to stop propagation of events?\" (#715)"},{"Id":"318788049","IsPullRequest":true,"CreatedAt":"2018-04-30T20:35:09","Actor":"rynowak","Number":"709","RawContent":null,"Title":"Add [Parameter] for component parameters","State":"closed","Body":"This change introduces ParameterAttribute to specify a bindable\r\ncomponent parameter. As of the 0.3 release of Blazor we plan to make\r\n[Parameter] required to make a property bindable by callers.\r\n\r\nThis also applies to parameters when their value is set by the\r\ninfrastructure, such as `Body` for layouts, and route paramters.\r\n\r\nThe rationale behind this change is that we think there is a need to\r\nseparate the definition of properties from their suitability for a\r\ncaller to set them through markup. We plan to introduce more features in\r\nthis area in the future such as marking parameters as required. This is\r\nfirst step, and we think that this approach will scale nicely as we add\r\nmore functionaly.\r\n\r\nThe 0.3 release seems like the right time to change this behavior since\r\nwe're also introducing `ref` for captures in this release.","Url":"https://github.com/aspnet/Blazor/pull/709","RelatedDescription":"Closed or merged PR \"Add [Parameter] for component parameters\" (#709)"},{"Id":"319008642","IsPullRequest":false,"CreatedAt":"2018-04-30T20:29:24","Actor":"jraulhernandezi","Number":"714","RawContent":null,"Title":"New logo design.","State":"closed","Body":"Hi guys, would you like a new logo design you you project? \r\nI could send you some ideas, let me know.","Url":"https://github.com/aspnet/Blazor/issues/714","RelatedDescription":"Closed issue \"New logo design.\" (#714)"},{"Id":"318751372","IsPullRequest":false,"CreatedAt":"2018-04-30T18:33:55","Actor":"VladislavFurdak","Number":"706","RawContent":null,"Title":"After run Blazor project i see empty browser window","State":"closed","Body":"There are that i see:\r\n![issue1](https://user-images.githubusercontent.com/4522419/39411134-b07cae82-4c0c-11e8-9547-da1640d61787.png)\r\n![issue2](https://user-images.githubusercontent.com/4522419/39411135-b09efc3a-4c0c-11e8-8c9b-0c3533c5fa56.png)\r\n![issue3](https://user-images.githubusercontent.com/4522419/39411136-b0be0fd0-4c0c-11e8-86cf-ab6ee11093ff.png)\r\n\r\nBut as i understand empty project after \"Loading...\" label should show something\r\nAlso, when i tried to run any sample projects written in Blazor, i got the same thing\r\nAlso, i have installed VS 2017 of earlier edition on my PC.\r\n","Url":"https://github.com/aspnet/Blazor/issues/706","RelatedDescription":"Closed issue \"After run Blazor project i see empty browser window\" (#706)"},{"Id":"318984400","IsPullRequest":true,"CreatedAt":"2018-04-30T18:15:42","Actor":"SteveSandersonMS","Number":"713","RawContent":null,"Title":"Encourage encapsulation of component parameter properties","State":"open","Body":"* Implemented the caching-for-perf inside `ParameterCollection` that I've been meaning to get to for a while (i.e., cache fully reified delegates, not `PropertyInfo` or anything like that)\r\n* More test coverage for `ParameterCollection` now its behavior is a bit more sophisticated\r\n* Enable binding to nonpublic properties\r\n* Roslyn analyzer to warn about `[Parameter] public SomeProperty ...`, including codefix that removes the `public` (not that this currently works in `.cshtml` files, but hopefully will in the future - for now VS only shows the codefixes in `.cs` files)\r\n* Change the tag helper descriptor so it also accepts nonpublic `[Parameter]`\r\n\r\nStill to do:\r\n\r\n* Change templates/samples to encapsulate the parameters\r\n\r\nAsking for review now so hopefully I can merge tomorrow morning once the final bit is done.","Url":"https://github.com/aspnet/Blazor/pull/713","RelatedDescription":"Open PR \"Encourage encapsulation of component parameter properties\" (#713)"},{"Id":"318893487","IsPullRequest":false,"CreatedAt":"2018-04-30T13:40:03","Actor":"danroth27","Number":"712","RawContent":null,"Title":"Update survey link","State":"open","Body":"New survey link: https://go.microsoft.com/fwlink/?linkid=873042","Url":"https://github.com/aspnet/Blazor/issues/712","RelatedDescription":"Open issue \"Update survey link\" (#712)"},{"Id":"318812597","IsPullRequest":false,"CreatedAt":"2018-04-30T08:06:03","Actor":"jirisykora83","Number":"711","RawContent":null,"Title":"Page with component with same name as page.","State":"open","Body":"**Runtime Environment:**\r\nOS Name: Windows\r\nOS Version: 10.0.16299\r\nOS Platform: Windows\r\nRID: win10-x64\r\nBase Path: C:\\Program Files\\dotnet\\sdk\\2.1.300-preview2-008533\\\r\n\r\n**Repro**\r\n\r\nIn any Blazor template Create folder `Components`\r\nCreate Blazor component with same name as one `Pages`\r\nOpen this page.\r\n\r\nIt quickly consume lot of RAM and burn 1 CPU core.\r\n\r\n**Excepted behavior**\r\n\r\n**Worst:** exception during runtime (now i must kill tab in chrome task manager).\r\n**Better**: Prevent to build with some error.\r\n**Other option**: It is currently allowed having nested pages? If not then Blazor could always use component instant of recursively use pages with same name (what is currently issue i guess).","Url":"https://github.com/aspnet/Blazor/issues/711","RelatedDescription":"Open issue \"Page with component with same name as page.\" (#711)"},{"Id":"318793809","IsPullRequest":false,"CreatedAt":"2018-04-30T07:53:50","Actor":"tojak","Number":"710","RawContent":null,"Title":"Only white page after loading","State":"closed","Body":"I updated my visual studio (community) preview version to 15.7 preview 5.\r\nThe dotnet-sdk version is 2.1.300-preview1.\r\n\r\nBlazor version is 0.2.1.0.\r\n\r\nWhen running the template app (that comes with visual studio) I get the \"Loading ...\"-Screen and than a white page. Breakpoints are not reached. Whats wrong? Is it blazor? Is it my system-configuration?\r\n\r\nP.S.: Starting an old app with blazor version 0.1.0.0 still works.","Url":"https://github.com/aspnet/Blazor/issues/710","RelatedDescription":"Closed issue \"Only white page after loading\" (#710)"},{"Id":"318769178","IsPullRequest":true,"CreatedAt":"2018-04-30T01:41:54","Actor":"rynowak","Number":"708","RawContent":null,"Title":"Resolves #297","State":"open","Body":"Removes the workaround for #297 and sets the langauge version to\r\nexperimental.\r\n\r\nThis will require 2.1.0-rc of Razor.","Url":"https://github.com/aspnet/Blazor/pull/708","RelatedDescription":"Open PR \"Resolves #297\" (#708)"},{"Id":"318761037","IsPullRequest":true,"CreatedAt":"2018-04-29T23:50:20","Actor":"rynowak","Number":"707","RawContent":null,"Title":"Rewrite of HTML handling for Blazor","State":"open","Body":"This change replaces the parsing of HTML that we perform during the code\r\ngeneration phase, which parsing of HTML during the IR lowering phase.\r\nThe main benefit of this change is that the structure of the HTML is\r\nreflected in the IR tree, allowing us to do more more advance\r\ntransformations.\r\n\r\nAs an example, see how the the handling of `<script>` tags is now a\r\nseparate pass.\r\n\r\nAs an aside from this I also redesigned the structure of component IR\r\nnodes to match the new HTML element nodes. Passes are now more easily\r\naware of the nodes they are expected to handle and are more easily aware\r\nof the difference between a component and element. This still isn't as\r\nclean as I would like, but I think it's a reasonable improvement.\r\n\r\nAnother benefit of this is that the code generation is much simpler and\r\nrequires much less bookkeeping and statefulness.","Url":"https://github.com/aspnet/Blazor/pull/707","RelatedDescription":"Open PR \"Rewrite of HTML handling for Blazor\" (#707)"},{"Id":"318732051","IsPullRequest":false,"CreatedAt":"2018-04-29T16:55:54","Actor":"mrpmorris","Number":"705","RawContent":null,"Title":"Allow coder to specify BindingFlags in JsonUtil","State":"open","Body":"I want my state to be read-only, but I also need to be able to serialise/deserialise that state using JsonUtil. As they have private setters these properties are not being set.\r\n\r\nPlease could you add a BindingFlags parameter to the Deserialize() method which will allow me to tell it to set properties with private setters? ","Url":"https://github.com/aspnet/Blazor/issues/705","RelatedDescription":"Open issue \"Allow coder to specify BindingFlags in JsonUtil\" (#705)"},{"Id":"318660740","IsPullRequest":false,"CreatedAt":"2018-04-29T10:12:11","Actor":"stavroskasidis","Number":"701","RawContent":null,"Title":"Passing element reference from js to C# and back","State":"closed","Body":"I am trying to pass an element reference to C# from JS in my blazor library,\r\nI am trying with the following code:\r\n\r\n``` html\r\n<!-- Index.cshtml -->\r\n\r\n<h1 ref=\"element\">Hello, world!</h1>\r\n<button type=\"button\" onclick=\"@PassElement\">Pass element</button>\r\n@functions{\r\n    ElementRef element;\r\n    void PassElement()\r\n    {\r\n        RegisteredFunction.Invoke<object>(\"PassElementToJs\", element);\r\n    }\r\n}\r\n```\r\n\r\n``` javascript\r\n<script>\r\n   // javascript interop\r\n   Blazor.registerFunction('PassElementToJs', function (element) {\r\n       console.log(\"JS: PassElementToJs => element: \", element); //this is ok, element is populated\r\n       var method = Blazor.platform.findMethod(\"WebApplication1.Client\", \"WebApplication1.Client\", \"JsInterop\", \"PassElementToCSharp\");\r\n       Blazor.platform.callMethod(method, null, [element]);\r\n    });\r\n\r\n   Blazor.registerFunction('SecondPassElementToJs', function (element) {\r\n        //element is null\r\n        console.log(\"JS: SecondPassElementToJs => element: \", element);\r\n   });\r\n</script>\r\n```\r\n\r\n\r\n``` csharp\r\n//C# interop\r\n\r\npublic static class JsInterop\r\n{\r\n  public static void PassElementToCSharp(ElementRef element)\r\n  {\r\n      Console.WriteLine(\"C#: PassElementToCSharp => element: \" + element);\r\n      RegisteredFunction.Invoke<object>(\"SecondPassElementToJs\", element);\r\n  }\r\n}\r\n```\r\n\r\nWhat I am doing wrong ?","Url":"https://github.com/aspnet/Blazor/issues/701","RelatedDescription":"Closed issue \"Passing element reference from js to C# and back\" (#701)"},{"Id":"318701385","IsPullRequest":false,"CreatedAt":"2018-04-29T08:58:21","Actor":"mrpmorris","Number":"704","RawContent":null,"Title":"Request: A global method call to rerender all components","State":"open","Body":"My Redux/Flux library (Blazor.Fluxor) can have its state set via a Chrome plugin (Redux Dev Tools), so it is possible to change state without first having any user interaction on the page.\r\n\r\nAs my debugger tool uses an AddMiddleware approach this means there is no component, and having all components in an app descend from base class would be an incorrect approach (see below)\r\n\r\nWhat I need is to be able to either iterate all correct component instances and call StateHasChanged on them, or have some kind of global method to call that will instruct all components to re-bind.\r\n\r\nMy other option is to require users of my library to descend from a common component, but I don't think that's appropriate because 1) The feature in my library is an optional middleware 2) It is only intended to be used in debug mode 3) If library coders must force our users to use our own BlazorComponent descendant classes for their components then those users won't be able to use multiple libraries together.","Url":"https://github.com/aspnet/Blazor/issues/704","RelatedDescription":"Open issue \"Request: A global method call to rerender all components\" (#704)"},{"Id":"318677992","IsPullRequest":false,"CreatedAt":"2018-04-29T00:05:47","Actor":"rynowak","Number":"703","RawContent":null,"Title":"value handling for checkbox initial state is dependent on the attribute ordering","State":"open","Body":"It looks like this logic: https://github.com/aspnet/Blazor/blob/dev/src/Microsoft.AspNetCore.Blazor.Browser.JS/src/Rendering/BrowserRenderer.ts#L227\r\n\r\nDepends on the order in which attributes are applied to an element.\r\n\r\nOn the initial render pass if you end up with C# code like:\r\n```\r\n            builder.AddAttribute(60, \"id\", \"checkbox-initially-unchecked\");\r\n            builder.AddAttribute(61, \"value\", Microsoft.AspNetCore.Blazor.Components.BindMethods.GetValue(checkboxInitiallyUncheckedValue));\r\n            builder.AddAttribute(62, \"onchange\", Microsoft.AspNetCore.Blazor.Components.BindMethods.SetValueHandler(__value => checkboxInitiallyUncheckedValue = __value, checkboxInitiallyUncheckedValue));\r\n            builder.AddAttribute(63, \"type\", \"checkbox\");\r\n```\r\n\r\nThe `type` attribute will be set after the value attribute, which will prevent it from being remapped to 'checked'.\r\n\r\nSome changes I'm making in the HTML handling exposed this issue by making the actual attribute order in the generated code reflect what the user typed in more deterministically, which means that this code from our E2E tests breaks.\r\n```\r\n<p>\r\n    Initially checked:\r\n    <input id=\"checkbox-initially-checked\" bind=\"checkboxInitiallyCheckedValue\" type=\"checkbox\" />\r\n    <span id=\"checkbox-initially-checked-value\">@checkboxInitiallyCheckedValue</span>\r\n</p>\r\n```\r\n\r\nReordering the `bind` and `type` attributes in the test code also works around the issue.\r\n\r\nI'm planning to work around this issue for `bind` for now by forcibly adding the value attribute at the end.","Url":"https://github.com/aspnet/Blazor/issues/703","RelatedDescription":"Open issue \"value handling for checkbox initial state is dependent on the attribute ordering\" (#703)"},{"Id":"318638674","IsPullRequest":false,"CreatedAt":"2018-04-28T21:04:51","Actor":"drinkwater99","Number":"699","RawContent":null,"Title":"Binding / rendering issue","State":"closed","Body":"Basically showing a list of blog posts with a filter button. When applying with the filter button, the list does not refresh until I click a second time on the apply filter button.\r\n\r\nShould this work ?\r\n\r\n\r\n```\r\n@page \"/fetchdata\"\r\n@inject HttpClient Http\r\n\r\n@if (BlogPosts == null)\r\n{\r\n    <p><em>Loading...</em></p>\r\n}\r\nelse\r\n{\r\n    <div class=\"card\" style=\"width: 100%;\">\r\n        <div class=\"card-body\">\r\n            <h5 class=\"card-title\">Blog posts</h5>\r\n            \r\n            <form class=\"form-inline\">\r\n                <div class=\"form-group\">\r\n                    <label class=\"control-label\">Filter&nbsp;</label>\r\n                    <input class=\"form-control\" bind=\"@Filter\" />\r\n                    <button class=\"btn\" onclick=\"@ApplyFilter\">Apply filter</button>\r\n                </div>\r\n            </form>\r\n\r\n            <table class='table table-striped table-bordered table-hover table-condensed'>\r\n                <thead>\r\n                    <tr>\r\n                        <th>userId</th>\r\n                        <th>id</th>\r\n                        <th>title</th>\r\n                        <th>body</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    @foreach (var post in BlogPosts)\r\n                    {\r\n                        <tr>\r\n                            <td>@post.userId</td>\r\n                            <td>@post.id</td>\r\n                            <td>@post.title</td>\r\n                            <td>@post.body</td>\r\n                        </tr>\r\n                    }\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    </div>\r\n}\r\n\r\n@functions {\r\n    public BlogPost[] BlogPosts;\r\n\r\n    public string Filter { get; set; } = \"\";\r\n\r\n    protected override async Task OnInitAsync()\r\n    {\r\n        BlogPosts = await Http.GetJsonAsync<BlogPost[]>(\"https://jsonplaceholder.typicode.com/posts\");\r\n    }\r\n\r\n    public async void ApplyFilter()\r\n    {\r\n        var all = await Http.GetJsonAsync<BlogPost[]>(\"https://jsonplaceholder.typicode.com/posts\");\r\n\r\n        BlogPosts = all.Where(x => x.title.Contains(Filter)).ToArray<BlogPost>();\r\n\r\n        Console.WriteLine(BlogPosts.Length.ToString());\r\n    }\r\n\r\n    public class BlogPost\r\n    {\r\n        public int userId { get; set; }\r\n        public int id { get; set; }\r\n        public string title { get; set; }\r\n        public string body { get; set; }\r\n    }\r\n}\r\n```\r\n\r\n\r\n","Url":"https://github.com/aspnet/Blazor/issues/699","RelatedDescription":"Closed issue \"Binding / rendering issue\" (#699)"},{"Id":"318663911","IsPullRequest":false,"CreatedAt":"2018-04-28T19:50:10","Actor":"GoldenCrystal","Number":"702","RawContent":null,"Title":"Route segments are not decoded","State":"open","Body":"### Title\r\nRoute segments are not decoded\r\n\r\n### Functional impact\r\nSpaces, non-ASCII characters, or other unsafe characters will not work properly inside URLs out of the box.\r\nThis impacts routes such as ````@page \"/ブラゾル\" ````, or any route parameter that would contain unsafe characters.\r\n\r\n### Minimal repro steps\r\n1. Create a new Blazor application\r\n2. Create a page like this one:\r\n````\r\n@page \"/wiki/{topic}\"\r\n\r\n<p>@Topic</p>\r\n\r\n@functions {\r\n    public string Topic { get; set; }\r\n}\r\n````\r\n3. Start the application and navigate to \"/wiki/déjà vu\" in your Browser\r\n\r\n### Expected result\r\nI expect the page to display \"déjà vu\"\r\n\r\n### Actual result\r\nInstead, I see \"d%C3%A9j%C3%A0%20vu\"\r\n\r\n### Further technical details\r\nI tested this on Chrome 65 and Firefox 59.\r\n\r\nIt seems that the simplified parsing implementation in [RouteContext](https://github.com/aspnet/Blazor/blob/dev/src/Microsoft.AspNetCore.Blazor/Routing/RouteContext.cs) could easily be improved for handling this scenario.\r\n\r\nI'm ok with providing a PR for this, if needed.","Url":"https://github.com/aspnet/Blazor/issues/702","RelatedDescription":"Open issue \"Route segments are not decoded\" (#702)"},{"Id":"318640528","IsPullRequest":false,"CreatedAt":"2018-04-28T14:21:45","Actor":"DNF-SaS","Number":"700","RawContent":null,"Title":"Can Microsoft.Extensions.Logging be used in Blazor?","State":"open","Body":"Unfortunately, no luck using\r\n`services.AddLogging(loggingBuilder => loggingBuilder.AddConsole());`\r\nand\r\n`ILogger<xxx> logger`\r\nand the \"2.1.0-preview2-final\"-Packages of Microsoft.Extensions.Logging.\r\n\r\nIs there anything special to consider?","Url":"https://github.com/aspnet/Blazor/issues/700","RelatedDescription":"Open issue \"Can Microsoft.Extensions.Logging be used in Blazor?\" (#700)"},{"Id":"318625939","IsPullRequest":false,"CreatedAt":"2018-04-28T10:58:04","Actor":"conficient","Number":"698","RawContent":null,"Title":"Authentication & Identity","State":"open","Body":"I couldn't find an issue tracking authentication and identity and how this would be handled in Blazor? I assume we would try to follow asp.net core practices on the server, but how would this be handled on the client?\r\n\r\nI expect we'd need something in the routing engine, and possibly per-page attributes as well?","Url":"https://github.com/aspnet/Blazor/issues/698","RelatedDescription":"Open issue \"Authentication & Identity\" (#698)"},{"Id":"318548428","IsPullRequest":false,"CreatedAt":"2018-04-27T21:28:52","Actor":"shawnwildermuth","Number":"697","RawContent":null,"Title":"Looking for a use-case more like a replacement for large-scale JS","State":"closed","Body":"While the framework seems like an interesting replacement for client-side dev, I am more interested in a model where I build a wasm that I can talk to via JS. Imagine a Vue or Angular project where I can supply the data and data-access and business logic through a wasm and leave the binding and/or markup to JS.\r\n\r\nI'm interested in Blazor as a wasm generator, not as a bridge to JavaScript. It seems like the download of .NET Core assemblies and then using mono.js to execute them is complicating, not simplifying the process. I want to build simple wasm (even if large) that represent what is happening now with webpack/browserify on the JS side.","Url":"https://github.com/aspnet/Blazor/issues/697","RelatedDescription":"Closed issue \"Looking for a use-case more like a replacement for large-scale JS\" (#697)"},{"Id":"318283397","IsPullRequest":false,"CreatedAt":"2018-04-27T20:48:04","Actor":"babula38","Number":"693","RawContent":null,"Title":"Is there any plan for MVC like Html Helpers?","State":"closed","Body":"Is there any plan for MVC like Html Helpers? as those are really handy and a developer need not to worry about all the implementation of HTML. A developer like me who is more comfortable in c# can write code very much easily. \r\nIt is my view only.","Url":"https://github.com/aspnet/Blazor/issues/693","RelatedDescription":"Closed issue \"Is there any plan for MVC like Html Helpers?\" (#693)"},{"Id":"318212707","IsPullRequest":true,"CreatedAt":"2018-04-27T18:45:20","Actor":"SteveSandersonMS","Number":"691","RawContent":null,"Title":"OnAfterRender / OnAfterRenderAsync","State":"closed","Body":"Gives components notification when rendering has occurred. This makes it possible to perform additional initialization, such as activating third-party JS libraries that want to operate on the rendered DOM elements.\r\n\r\nI've chained this PR onto #685 because I wanted the E2E test to cover the combination of these two features, as it's the most interesting and important use case.","Url":"https://github.com/aspnet/Blazor/pull/691","RelatedDescription":"Closed or merged PR \"OnAfterRender / OnAfterRenderAsync\" (#691)"},{"Id":"318461915","IsPullRequest":false,"CreatedAt":"2018-04-27T16:35:06","Actor":"SergeySeleznyov","Number":"695","RawContent":null,"Title":"Decimal values are rounded to js-Number precision","State":"closed","Body":"Let's take the \"FetchData.cshtml\" example form the project template.\r\n\r\nModify the data type:\r\n\r\n```\r\npublic class WeatherForecast\r\n{\r\n    ... // origin properties (not changed)\r\n    public decimal DecimalProp { get; set; }\r\n    public string StringDecimalProp { get { return DecimalProp.ToString(); } }\r\n}\r\n\r\n```\r\n\r\nJSON that comes from the server to the client may look as follows:\r\n\r\n```\r\n[{\r\n\t...\r\n\t       DecimalProp:16808220559571622000\r\n\tStringDecimalProp:\"16808220559571621480.16240545\"\r\n},\r\n{\r\n\t...\r\n\t       DecimalProp:-54580.79494236794\r\n\tStringDecimalProp:\"-54580.794942367938243476284644\"\r\n}...]\r\n\r\n```\r\n\r\nThus, on the client side, WeatherForecast's \"DecimalProp\" property has a decimal type but the js-Number type's precision.\r\n\r\nThis behavior may be OK for the javascript processing, but in the case of Blazor, customers may expect passing server-side data and data-processing logic to the \"client side\" without JS-based side effects like losing precision. \r\n\r\nIs it going to be improved in the future?\r\nIs there any doc with Blazor's data-passing limitation?","Url":"https://github.com/aspnet/Blazor/issues/695","RelatedDescription":"Closed issue \"Decimal values are rounded to js-Number precision\" (#695)"},{"Id":"318467022","IsPullRequest":false,"CreatedAt":"2018-04-27T16:09:49","Actor":"danroth27","Number":"696","RawContent":null,"Title":"Change component parameter declaration programming model","State":"open","Body":"","Url":"https://github.com/aspnet/Blazor/issues/696","RelatedDescription":"Open issue \"Change component parameter declaration programming model\" (#696)"},{"Id":"318428840","IsPullRequest":true,"CreatedAt":"2018-04-27T14:44:00","Actor":"SteveSandersonMS","Number":"694","RawContent":null,"Title":"Fix ordering issue with nested logical element insertion","State":"closed","Body":"","Url":"https://github.com/aspnet/Blazor/pull/694","RelatedDescription":"Closed or merged PR \"Fix ordering issue with nested logical element insertion\" (#694)"},{"Id":"318173475","IsPullRequest":false,"CreatedAt":"2018-04-26T21:00:58","Actor":"grahamehorner","Number":"689","RawContent":null,"Title":"[Feature Request] Generate JavaScriptInterop using Roslyn","State":"closed","Body":"IMHO It would be a great if Blazor used Roslyn to dynamically create in memory implementation of JavaScriptInterop based of c# abstract classes, eg.\r\n\r\n`\r\nnamespace someJavascriptNamespace {\r\npublic abstract class someJavaScriptInterop { \r\npublic abstract bool someJavaScriptMethod(string stringParameter, bool boolParameter);\r\n...\r\n}\r\n}\r\n\r\n/// use roslyn to generate and compile the code that calls/invokes the javascript  \r\nTJavaScriptInteropDefinition GenerateImplementation<TJavaScriptInteropDefinition>( );\r\n`\r\n/// calling the generated implementation \r\nvar result = GenerateImplementation<TJavaScriptInteropDefinition>( )\r\n.someJavaScriptMethod(\"\",true);\r\n\r\n\r\n\r\n","Url":"https://github.com/aspnet/Blazor/issues/689","RelatedDescription":"Closed issue \"[Feature Request] Generate JavaScriptInterop using Roslyn\" (#689)"},{"Id":"318194771","IsPullRequest":false,"CreatedAt":"2018-04-26T21:00:00","Actor":"danroth27","Number":"690","RawContent":null,"Title":"Bootstrap 4 component library","State":"open","Body":"","Url":"https://github.com/aspnet/Blazor/issues/690","RelatedDescription":"Open issue \"Bootstrap 4 component library\" (#690)"}],"ResultType":"GitHubIssue"}},"RunOn":"2018-05-01T05:30:02.5129455Z","RunDurationInMilliseconds":1165}