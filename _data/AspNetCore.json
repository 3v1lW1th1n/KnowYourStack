{"Data":{"Blog":{"FeedItems":[{"Title":"ASP.NET Core 2.1.0-rc1 now available","PublishedOn":"2018-05-07T18:00:55+00:00","CommentsCount":9,"FacebookCount":0,"Summary":"Today we’re happy to announce the first release candidate of ASP.NET Core 2.1! This release should be very close to the final stable release of ASP.NET Core 2.1 and includes primarily bug fixes and...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/05/07/asp-net-core-2-1-0-rc1-now-available/","RawContent":null},{"Title":"Exploring Azure App Service – Introduction","PublishedOn":"2018-05-02T23:01:28+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Have you ever needed to quickly stand up a web site, or web API app that was publicly available? Is your team or organization thinking about moving to the cloud but aren’t sure the best place to...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/05/02/exploring-azure-app-service-introduction/","RawContent":null},{"Title":"Blazor 0.3.0 experimental release now available","PublishedOn":"2018-05-02T19:50:50+00:00","CommentsCount":4,"FacebookCount":0,"Summary":"Blazor 0.3.0 is now available! This release includes important bug fixes and many new feature enhancements. New features in this release (details below): Project templates updated to use Bootstrap 4...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/05/02/blazor-0-3-0-experimental-release-now-available/","RawContent":null},{"Title":"Announcing ASP.NET MVC 5.2.5, Web API 5.2.5, and Web Pages 3.2.5","PublishedOn":"2018-05-02T19:35:23+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today we released ASP.NET MVC 5.2.5, Web API 5.2.5, and Web Pages 3.2.5 on NuGet. This is a patch release that contains only bug fixes. You can find the full list of bug fixes for this release in the...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/05/02/announcing-asp-net-mvc-5-2-5-web-api-5-2-5-and-web-pages-3-2-5/","RawContent":null},{"Title":"Cosmos DB Solves Common Data Challenges in App Development","PublishedOn":"2018-04-27T17:35:54+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"When considering how to implement your application with a relational database, it can change how you build it dramatically. Some of these challenges include adding an abstract implementation of the...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/04/27/cosmos-db-solves-common-data-challenges/","RawContent":null},{"Title":"Publish Improvements in Visual Studio 2017 version 15.7","PublishedOn":"2018-04-18T19:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today we released Visual Studio 2017 version 15.7. Our 15.7 update brings some exciting updates for publishing applications from Visual Studio that we’re excited to tell you about, including: Ability...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/04/18/visual-studio-2017-15-7-p4-publish/","RawContent":null},{"Title":"What Happened to Bower?","PublishedOn":"2018-04-18T18:04:55+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Bower is a popular package management system for managing static content used by client-side web applications. Visual Studio provides rich support for Bower, including templates and package management...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/04/18/what-happened-to-bower/","RawContent":null},{"Title":"Library Manager: Client-side content manager for web apps","PublishedOn":"2018-04-17T21:48:24+00:00","CommentsCount":11,"FacebookCount":0,"Summary":"If you’re developing a modern web app, chances are your app will reference client-side JavaScript and CSS files like jQuery or bootstrap. Maybe you copy these from a previous project, download them,...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/04/17/library-manager-client-side-content-manager-for-web-apps/","RawContent":null},{"Title":"Blazor 0.2.0 release now available","PublishedOn":"2018-04-17T17:59:55+00:00","CommentsCount":8,"FacebookCount":0,"Summary":"Just a few weeks ago we announced the first preview release of an experimental web UI framework called Blazor. Blazor enables full-stack web development using C# and WebAssembly. So far thousands of...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/04/17/blazor-0-2-0-release-now-available/","RawContent":null},{"Title":"ASP.NET Core 2.1.0-preview2: Improvements to the Kestrel HTTP server","PublishedOn":"2018-04-13T00:42:44+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Change default transport to Sockets Building off the improvements to the managed sockets implementation in .NET Core we have changed the default transport in Kestrel from libuv to sockets. As a...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/04/12/asp-net-core-2-1-0-preview2-improvements-to-the-kestrel-http-server/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"7665439068","Type":"IssuesEvent","CreatedAt":"2018-05-12T19:05:49","Actor":"chrarnoldus","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Home/issues/3137","RelatedDescription":"Opened issue \"Posting empty file input behaves differently in 2.0 and 2.1\" (#3137) at aspnet/Home","RelatedBody":"When a form is posted that has an empty file input in it, ASP.NET Core 2.0 represents the value as an `IFormFile` of 0 bytes, while 2.1 represents it as a single empty string value.\r\n\r\nWhen the file input has an actual empty file, behaviour is the same (0-byte `IFormFile`).\r\n\r\nI noticed this when trying to update an existing app. Is this an intentional change in behaviour?\r\n\r\n# Steps to reproduce\r\n\r\nCode: https://github.com/chrarnoldus/FileInput\r\n\r\n* Run `dotnet run`\r\n* Go to [localhost:5000](http://localhost:5000) in a browser (I tried Firefox 60.0 and Chrome 66.0)\r\n* Click submit (do NOT select a file)\r\n\r\nWhen the package version in the project file is set to `2.0.8`, the output is:\r\n\r\n```\r\nfile: 0 bytes\r\n```\r\n\r\nwhich means that there are no entries in `Form`, while there is a single 0-byte entry in `Form.Files`. When the version is `2.1.0-rc1-final`, the output is:\r\n\r\n```\r\nfile (1): ''\r\n```\r\n\r\nwhich means that there is a single entry in `Form`, with a single (empty) value."},{"Id":"7663844020","Type":"IssuesEvent","CreatedAt":"2018-05-11T23:41:18","Actor":"natemcmaster","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Home/issues/3136","RelatedDescription":"Opened issue \"ProcessExtensions.KillTree doesn't actually kill the process tree on macOS\" (#3136) at aspnet/Home","RelatedBody":"Root cause of https://github.com/aspnet/DotNetTools/issues/410.\r\n\r\nProcessExtensions.KillTree times out while trying to run `pgrep -P $PID`. There appears to produce some kind of threadpool deadlock when calling `Process.WaitForExit` from within a Dispose call. We should look into other ways of discovering and killing the process tree. On Linux, we can use `/proc`. On macOS, I'm not sure."},{"Id":"7663483127","Type":"IssuesEvent","CreatedAt":"2018-05-11T21:31:49","Actor":"mkArtakMSFT","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Home/issues/3135","RelatedDescription":"Opened issue \"Allow for eventual-consistency for `IFileProvider.Watch`\" (#3135) at aspnet/Home","RelatedBody":"See further discussion here https://github.com/aspnet/Mvc/issues/7028\r\n\r\n\r\n> More generally, only relying on FileSystemWatcher to work out changes is kinda problematic since it is limited by things like buffer sizes - https://msdn.microsoft.com/en-us/library/system.io.filesystemwatcher(v=vs.110).aspx#Anchor_6. We should consider baking in polling alongside events from FSW. It's the only way to guarantee eventual consistency\r\n"},{"Id":"7660037007","Type":"IssuesEvent","CreatedAt":"2018-05-11T09:04:13","Actor":"MoeHamdan","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Home/issues/3134","RelatedDescription":"Opened issue \"Diagnostics Exception Handler override\" (#3134) at aspnet/Home","RelatedBody":"Hello \r\n\r\nI want to override ExceptionHandlerMiddleware and DeveloperExceptionPageMiddleware to enable them to support \"application/json\" content type, so they could return proper json error when the content is json. However your invoke method is not marked as virtual, may you mark it as virtual so we could extend this?"}],"ResultType":"GitHubEvent"},"SignalR":{"Events":[{"Id":"7665341380","Type":"IssuesEvent","CreatedAt":"2018-05-12T18:03:10","Actor":"israellot","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/SignalR/issues/2263","RelatedDescription":"Opened issue \"Consider building a gossip protocol based backplane\" (#2263) at aspnet/SignalR","RelatedBody":"Please consider building a gossip protocol based backplane. \r\n\r\nIt's very uncomfortable to have single point of failure with Redis. Although it scales nicely up to a certain point, we are limited to Redis throughput, and Redis itself can't cluster pubsub, so we are bound to flow everything thought a single instance.\r\nI would be looking forward to a gossip protocol connecting SignalR instances, maybe DNS discoverable. I would trade latency for scalability with eventual consistency. "},{"Id":"7663581978","Type":"IssuesEvent","CreatedAt":"2018-05-11T22:00:36","Actor":"Tratcher","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/SignalR/issues/2262","RelatedDescription":"Opened issue \"AckHandler uses the wrong TCS constructor\" (#2262) at aspnet/SignalR","RelatedBody":"It's passing in TaskContinuationOptions when it should be TaskCreationOptions. Otherwise it goes into the state field and has no effect. https://github.com/aspnet/SignalR/blob/5ff5c38325db23392accd17892a064252f34d44e/src/Microsoft.AspNetCore.SignalR.Redis/Internal/AckHandler.cs#L94\r\n\r\nhttps://msdn.microsoft.com/en-us/library/dd449174(v=vs.110).aspx\r\n\r\nCompare to: https://github.com/aspnet/KestrelHttpServer/pull/2567\r\n"},{"Id":"7663485008","Type":"PullRequestEvent","CreatedAt":"2018-05-11T21:32:21","Actor":"halter73","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/SignalR/pull/2261","RelatedDescription":"Opened pull request \"Use correct TaskCompletionSource ctor\" (#2261) at aspnet/SignalR","RelatedBody":"https://github.com/dotnet/corefx/issues/29664"},{"Id":"7663349086","Type":"IssuesEvent","CreatedAt":"2018-05-11T20:57:29","Actor":"anurse","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/SignalR/issues/2130","RelatedDescription":"Closed issue \" Embed version in the JavaScript client \" (#2130) at aspnet/SignalR","RelatedBody":"We should log the version of the client (.NET/JS/whatever) and the version of the server to help diagnose issues when devs create issues with attached logs."},{"Id":"7663089917","Type":"PullRequestEvent","CreatedAt":"2018-05-11T19:56:04","Actor":"anurse","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/SignalR/pull/2260","RelatedDescription":"Merged pull request \"Embed version in the JavaScript client (#2229)\" (#2260) at aspnet/SignalR","RelatedBody":""},{"Id":"7663089169","Type":"PullRequestEvent","CreatedAt":"2018-05-11T19:55:53","Actor":"anurse","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/SignalR/pull/2260","RelatedDescription":"Opened pull request \"Embed version in the JavaScript client (#2229)\" (#2260) at aspnet/SignalR","RelatedBody":""},{"Id":"7663085572","Type":"IssuesEvent","CreatedAt":"2018-05-11T19:55:04","Actor":"abubakar-khaliq-avalara","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/SignalR/issues/2259","RelatedDescription":"Opened issue \"Client certificate not available to Authentication Handler.\" (#2259) at aspnet/SignalR","RelatedBody":"### Please include as much of the following as you can in your bug report\r\nPackages:\r\nmicrosoft.aspnetcore\\2.1.0-rc1-final\r\nmicrosoft.aspnetcore.authentication\\2.1.0-rc1-final\r\nmicrosoft.aspnetcore.signalr\\1.0.0-rc1-final\r\nmicrosoft.aspnetcore.signalr.client\\1.0.0-rc1-final\r\n\r\n*Using the C# client\r\n*Using IIS Express\r\n* Windows 10 for both server and client with Chrome browser\r\n\r\nI am able to pass in ClientCertificates when creating connection. I have verified that certificate is valid. This is what the code looks like.\r\n`\r\nX509Store store = new X509Store(StoreLocation.LocalMachine);\r\nstore.Open(OpenFlags.ReadOnly);\r\nvar cert = store.Certificates.Find(X509FindType.FindBySubjectName, \"test.mycert\", true);\r\nstore.Close();\r\nnew HubConnectionBuilder().WithUrl(uri, options => { options.ClientCertificates = cert; }).Build();\r\n`\r\n\r\nI have an AuthenticationHandler on server side. My Auth handler gets invoked correctly but ClientCertificate is always null in `Request.HttpContext.Connection`\r\n`\r\n\tpublic class CustomAuthenticationHandler : AuthenticationHandler<AuthenticationSchemeOptions>\r\n\t{\r\n\t\tpublic CustomAuthenticationHandler(\r\n\t\t\tIOptionsMonitor<AuthenticationSchemeOptions> options,\r\n\t\t\tILoggerFactory logger,\r\n\t\t\tUrlEncoder encoder,\r\n\t\t\tISystemClock clock)\r\n\t\t\t: base(options, logger, encoder, clock)\r\n\t\t{\r\n\t\t}\r\n\r\n\t\tprotected override async Task<AuthenticateResult> HandleAuthenticateAsync()\r\n\t\t{\r\n\t\t\t// validate cert here. Cert never reaches here.\r\n\t\t\t// For now, dummy success.\r\n\t\t\tvar claims = new[] { new Claim(ClaimTypes.Name, \"valid\") };\r\n\t\t\tvar identity = new ClaimsIdentity(claims, Scheme.Name);\r\n\t\t\tvar principal = new ClaimsPrincipal(identity);\r\n\t\t\tvar ticket = new AuthenticationTicket(principal, Scheme.Name);\r\n\t\t\treturn AuthenticateResult.Success(ticket);\r\n\t\t}\r\n\t}\r\n`\r\n\r\nThis is what I have in my ConfigureServices. \r\n\r\n`\r\n\t\t\tservices.AddAuthentication(\"Custom\")\r\n\t\t\t\t.AddScheme<AuthenticationSchemeOptions, CustomAuthenticationHandler>(\"Custom\", null);\r\n\t\t\tservices.AddSignalR();\r\n\t\t\tservices.AddMvcCore();\r\n`"},{"Id":"7663083238","Type":"PullRequestEvent","CreatedAt":"2018-05-11T19:54:32","Actor":"anurse","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/SignalR/pull/2229","RelatedDescription":"Merged pull request \"Embed version in the JavaScript client\" (#2229) at aspnet/SignalR","RelatedBody":"Related to https://github.com/aspnet/SignalR/issues/2130\r\n\r\nThe way this works for now is that it takes advantage of the fact that we update the `package.json` version from MSBuild during the packaging step. This happens **after** the build phase, so I added a script to the `prepack` phase in NPM that scans all files under `dist` (build outputs) and replaces a token with the actual version in `package.json`"}],"ResultType":"GitHubEvent"},"Mvc":{"Events":[{"Id":"7665935943","Type":"IssuesEvent","CreatedAt":"2018-05-13T02:09:31","Actor":"whizkidwwe1217","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Mvc/issues/7772","RelatedDescription":"Closed issue \"Services.CreateScope() in IWebhost not working anymore\" (#7772) at aspnet/Mvc","RelatedBody":"#### Is this a Bug or Feature request?:\r\nBug\r\n\r\n#### Steps to reproduce or link to a repro project:\r\n\r\n\r\n#### Description of the problem:\r\nBefore I upgraded to 2.1 preview2, creating a database in startup (Program.cs) works perfectly by instantiating a new service by calling host.Services.CreateScope()\r\n\r\n```csharp\r\npublic static void Main(string[] args)\r\n{\r\n      var host = BuildWebHost(args);\r\n \r\n      using (var scope = host.Services.CreateScope())\r\n      {\r\n             var services = scope.ServiceProvider;\r\n             var ds = services.GetService<CatalogDataSource>();\r\n             /// do some stuff here like migrations etc.\r\n      }\r\n\r\n      host.Run()\r\n}\r\n\r\n public static IWebHost BuildWebHost(string[] args) =>\r\n            WebHost.CreateDefaultBuilder()\r\n   ///...... truncated for brevity\r\n```\r\nIn 2.1 preview 2, the return type has been changed from IWebHost to IWebHostBuilder. I tried\r\n\r\n```csharp\r\npublic static void Main(string[] args)\r\n{\r\n      var host = CreateWebHostBuilder(args).Build();\r\n \r\n      using (var scope = host.Services.CreateScope())\r\n      {\r\n             var services = scope.ServiceProvider;\r\n             var ds = services.GetService<CatalogDataSource>();\r\n             /// do some stuff here like migrations etc.\r\n      }\r\n\r\n      host.Run()\r\n}\r\n\r\n public static IWebHostBuilder CreateWebHostBuilder(string[] args) =>\r\n            WebHost.CreateDefaultBuilder(args)\r\n   ///...... truncated for brevity\r\n```\r\nThe latter don't work. How can I migrate the database during startup like in the previous version?\r\n\r\n#### Version of `Microsoft.AspNetCore.Mvc` or `Microsoft.AspNetCore.App` or `Microsoft.AspNetCore.All`:\r\n\r\n\r\n<!--\r\n                                    --- NOTE ---\r\n1.  Try enabling logging (in the most verbose level) and see if the details help you in fixing\r\n    the issue you are seeing. Share the logs too if it helps in diagnosing the issue faster.\r\n    More info: https://docs.microsoft.com/en-us/aspnet/core/fundamentals/logging\r\n\r\n2.  If you are seeing an exception, include the full exceptions details (message and stack trace).\r\n    More info: https://docs.microsoft.com/en-us/aspnet/core/fundamentals/error-handling\r\n\r\n3.  If you believe you have an issue that affects the security of the platform please do\r\n    not create an issue, instead email your issue to 'secure@microsoft.com'. Your report may\r\n    be eligible for our bug bounty. More info: https://technet.microsoft.com/en-us/mt764065.aspx\r\n-->"},{"Id":"7665649886","Type":"IssuesEvent","CreatedAt":"2018-05-12T21:33:12","Actor":"bitcoinbrisbane","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Mvc/issues/7774","RelatedDescription":"Opened issue \"System.IO.FileNotFoundException Could not load file or assembly 'Newtonsoft.Json' or one of its dependencies\" (#7774) at aspnet/Mvc","RelatedBody":"#### Is this a Bug or Feature request?:\r\nBug\r\n\r\n#### Steps to reproduce or link to a repro project:\r\nCreate a new MVC project with Visual Studio Community 7.5 build1254 on MacOS\r\nUpdate NuGet packages\r\nRun the web app\r\n\r\n#### Description of the problem:\r\nError is thrown\r\n```\r\nat System.AppDomain.Load (System.String assemblyString, System.Security.Policy.Evidence assemblySecurity, System.Boolean refonly) [0x00033] in /Users/builder/jenkins/workspace/build-package-osx-mono/2017-12/external/bockbuild/builds/mono-x64/mcs/class/corlib/System/AppDomain.cs:801 \r\n  at System.AppDomain.Load (System.String assemblyString) [0x00000] in /Users/builder/jenkins/workspace/build-package-osx-mono/2017-12/external/bockbuild/builds/mono-x64/mcs/class/corlib/System/AppDomain.cs:782 \r\n  at (wrapper remoting-invoke-with-check) System.AppDomain.Load(string)\r\n  at System.Reflection.Assembly.Load (System.String assemblyString) [0x00000] in /Users/builder/jenkins/workspace/build-package-osx-mono/2017-12/external/bockbuild/builds/mono-x64/mcs/class/corlib/System.Reflection/Assembly.cs:589 \r\n  at System.Web.Compilation.BuildManager.LoadAssembly (System.Web.Configuration.AssemblyInfo info, System.Collections.Generic.List`1[T] al) [0x00000] in /Users/builder/jenkins/workspace/build-package-osx-mono/2017-12/external/bockbuild/builds/mono-x64/mcs/class/System.Web/System.Web.Compilation/BuildManager.cs:1254 \r\n  at System.Web.Compilation.BuildManager.GetReferencedAssemblies () [0x00093] in /Users/builder/jenkins/workspace/build-package-osx-mono/2017-12/external/bockbuild/builds/mono-x64/mcs/class/System.Web/System.Web.Compilation/BuildManager.cs:1085 \r\n  at System.Web.Compilation.BuildManager.CallPreStartMethods () [0x00010] in /Users/builder/jenkins/workspace/build-package-osx-mono/2017-12/external/bockbuild/builds/mono-x64/mcs/class/System.Web/System.Web.Compilation/BuildManager.cs:536\r\n```\r\n\r\n#### Version of `Microsoft.AspNetCore.Mvc`\r\n5.6.2\r\n\r\n"},{"Id":"7665265326","Type":"IssuesEvent","CreatedAt":"2018-05-12T17:13:14","Actor":"hez2010","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Mvc/issues/7773","RelatedDescription":"Opened issue \"ViewBag can not pass anonymous object\" (#7773) at aspnet/Mvc","RelatedBody":"#### Is this a Bug or Feature request?:\r\nBug\r\n\r\n#### Steps to reproduce or link to a repro project:\r\nIn Controller:\r\npublic IActionResult Test() {\r\n    ViewBag.Test = new { A = 1, B = 2};\r\n    return View();\r\n}\r\n\r\nIn View:\r\n<p>A = @ViewBag.Test.A</p>\r\n<p>B = @ViewBag.Test.B</p>\r\n\r\n#### Description of the problem:\r\nthe result should be:\r\nA = 1\r\nB = 2\r\nbut actually it threw an exception: RuntimeBinderException: 'object' does not contain a definition for 'A'\r\n\r\n#### Version of `Microsoft.AspNetCore.Mvc` or `Microsoft.AspNetCore.App` or `Microsoft.AspNetCore.All`: 2.1.0-rc1-final\r\n"},{"Id":"7665176426","Type":"IssuesEvent","CreatedAt":"2018-05-12T16:18:37","Actor":"whizkidwwe1217","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Mvc/issues/7772","RelatedDescription":"Opened issue \"Services.CreateScope() in IWebhost not working anymore\" (#7772) at aspnet/Mvc","RelatedBody":"#### Is this a Bug or Feature request?:\r\nBug\r\n\r\n#### Steps to reproduce or link to a repro project:\r\n\r\n\r\n#### Description of the problem:\r\nBefore I upgraded to 2.1 preview2, creating a database in startup (Program.cs) works perfectly by instantiating a new service by calling host.Services.CreateScope()\r\n\r\n```csharp\r\npublic static void Main(string[] args)\r\n{\r\n      var host = BuildWebHost(args);\r\n \r\n      using (var scope = host.Services.CreateScope())\r\n      {\r\n             var services = scope.ServiceProvider;\r\n             var ds = services.GetService<CatalogDataSource>();\r\n             /// do some stuff here like migrations etc.\r\n      }\r\n\r\n      host.Run()\r\n}\r\n\r\n public static IWebHost BuildWebHost(string[] args) =>\r\n            WebHost.CreateDefaultBuilder()\r\n   ///...... truncated for brevity\r\n```\r\nIn 2.1 preview 2, the return type has been changed from IWebHost to IWebHostBuilder. I tried\r\n\r\n```csharp\r\npublic static void Main(string[] args)\r\n{\r\n      var host = CreateWebHostBuilder(args).Build();\r\n \r\n      using (var scope = host.Services.CreateScope())\r\n      {\r\n             var services = scope.ServiceProvider;\r\n             var ds = services.GetService<CatalogDataSource>();\r\n             /// do some stuff here like migrations etc.\r\n      }\r\n\r\n      host.Run()\r\n}\r\n\r\n public static IWebHostBuilder CreateWebHostBuilder(string[] args) =>\r\n            WebHost.CreateDefaultBuilder(args)\r\n   ///...... truncated for brevity\r\n```\r\nThe latter don't work. How can I migrate the database during startup like in the previous version?\r\n\r\n#### Version of `Microsoft.AspNetCore.Mvc` or `Microsoft.AspNetCore.App` or `Microsoft.AspNetCore.All`:\r\n\r\n\r\n<!--\r\n                                    --- NOTE ---\r\n1.  Try enabling logging (in the most verbose level) and see if the details help you in fixing\r\n    the issue you are seeing. Share the logs too if it helps in diagnosing the issue faster.\r\n    More info: https://docs.microsoft.com/en-us/aspnet/core/fundamentals/logging\r\n\r\n2.  If you are seeing an exception, include the full exceptions details (message and stack trace).\r\n    More info: https://docs.microsoft.com/en-us/aspnet/core/fundamentals/error-handling\r\n\r\n3.  If you believe you have an issue that affects the security of the platform please do\r\n    not create an issue, instead email your issue to 'secure@microsoft.com'. Your report may\r\n    be eligible for our bug bounty. More info: https://technet.microsoft.com/en-us/mt764065.aspx\r\n-->"},{"Id":"7664221512","Type":"IssuesEvent","CreatedAt":"2018-05-12T04:17:14","Actor":"pranavkm","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Mvc/issues/928","RelatedDescription":"Closed issue \"<inheritdoc /> support is missing\" (#928) at aspnet/Mvc","RelatedBody":"Turns out our XML comment syntax isn't perfect.  The result is a few missing words and sometimes undocumented methods (though comments exist for them).\n\nOne aspect of this, not fixed in the PR I'm about to send out, is `<inheritdoc />` is presently non-operational.  This is a Sandcastle custom tag (see [here](http://www.ewoodruff.us/shfbdocs/html/79897974-ffc9-4b84-91a5-e50c66a0221d.htm)) and our current infrastructure doesn't seem to support it.  So for example `HtmlHelper` does not inherit any documentation from `IHtmlHelper` and the class has limited IntelliSense available.\n"},{"Id":"7664103700","Type":"IssuesEvent","CreatedAt":"2018-05-12T02:35:24","Actor":"pranavkm","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Mvc/issues/6796","RelatedDescription":"Closed issue \"Performance Issues with Html.DisplayFor()\" (#6796) at aspnet/Mvc","RelatedBody":"Default project scaffolding for \"List\" views will result in a scaffolded display that will use your model with Html.DisplayFor() being used to output each of the individual values on the view.  An example of one of these is below.\r\n\r\n```\r\n<tbody>\r\n    @foreach (var item in Model)\r\n{\r\n        <tr>\r\n            <td>\r\n                @Html.DisplayFor(modelItem => item.RegionName)\r\n            </td>\r\n            <td>\r\n                @Html.DisplayFor(modelItem => item.RegionDescription)\r\n            </td>\r\n            <td>\r\n                @Html.DisplayFor(modelItem => item.BranchCount)\r\n            </td>\r\n            <td>\r\n                <a asp-controller=\"Region\" asp-action=\"Edit\" asp-route-id=\"@item.RegionId\" class=\"btn btn-primary\">Edit</a>\r\n            </td>\r\n        </tr>\r\n}\r\n</tbody>\r\n```\r\nThis example was pulled from a simple ViewModel that contained 4 properties, an int RegionId and BranchCount, as well as two string fields, max length of 250 chars.\r\n\r\nRemoving all other factors, including EF queries, if this view was rendered using the scaffolded code with 150-200 records the UI render was taking between 2.3 and 4.5 seconds to complete.  Changing the view display process to simply have the following layout, resulted in near instant rendering of the UI.\r\n\r\n```\r\n<tbody>\r\n    @foreach (var item in Model)\r\n{\r\n        <tr>\r\n            <td>\r\n                @item.RegionName\r\n            </td>\r\n            <td>\r\n                @item.RegionDescription\r\n            </td>\r\n            <td>\r\n                @item.BranchCount\r\n            </td>\r\n            <td>\r\n                <a asp-controller=\"Region\" asp-action=\"Edit\" asp-route-id=\"@item.RegionId\" class=\"btn btn-primary\">Edit</a>\r\n            </td>\r\n        </tr>\r\n}\r\n</tbody>\r\n```\r\nInitial diagnostic validation appear to show that the lookup of the display template when using DisplayFor might not be cached.  \r\n\r\n## Environment Information\r\nInitially confirmed using a .NET Core 1.1 application, validated as still an issue with a test project using .NET Core 2.0.  VS 2017 15.3 was used for all development.\r\n\r\nIssue was still apparent when published in release mode and deployed to a server as well."},{"Id":"7664101977","Type":"IssuesEvent","CreatedAt":"2018-05-12T02:33:52","Actor":"pranavkm","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Mvc/issues/6421","RelatedDescription":"Closed issue \"Move IActionContextAccessor to Microsoft.AspNetCore.Mvc.Abstractions\" (#6421) at aspnet/Mvc","RelatedBody":"I have problems referencing `IActionContextAccessor` from a .NET Standard 1.4 library.\r\nI depend on Standard 1.4, because the host app is targeting Framework 4.6.1.\r\n\r\nUnfortunately, [`IActionContextAccessor`](https://github.com/aspnet/Mvc/blob/dev/src/Microsoft.AspNetCore.Mvc.Core/Infrastructure/IActionContextAccessor.cs) is defined in package [Microsoft.AspNetCore.Mvc.Core 1.1.3](https://www.nuget.org/packages/Microsoft.AspNetCore.Mvc.Core/) which depends on .NET Standard 1.6.\r\n\r\nHowever, package [Microsoft.AspNetCore.Mvc.Abstractions 1.1.3](https://www.nuget.org/packages/Microsoft.AspNetCore.Mvc.Abstractions/) can target .NET Standard 1.3.\r\n\r\nSince the interface is clearly an abstraction and a fundamental part for dependency injection in libraries, Microsoft.AspNetCore.Mvc.Abstractions would be the more logical package to hold this interface and make references to.\r\n\r\nCurrently I've worked around this problem by changing the library in question to target Framework 4.6.1, since Microsoft.AspNetCore.Mvc.Core can (oddly?) target also Framework 4.5.1. However, I would like to deploy this app cross-platform therefore want to switch to Standard 1.4 instead."},{"Id":"7664098746","Type":"IssuesEvent","CreatedAt":"2018-05-12T02:31:03","Actor":"pranavkm","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Mvc/issues/6601","RelatedDescription":"Closed issue \"Support TempData attribute properties on all activated types\" (#6601) at aspnet/Mvc","RelatedBody":"The `[TempData]` backed properties are currently only supported on pages and controllers. We should extend it to work on all activated types, including:\r\n- View Components\r\n- Partials \r\n- Tag Helpers"},{"Id":"7664095335","Type":"IssuesEvent","CreatedAt":"2018-05-12T02:28:20","Actor":"pranavkm","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Mvc/issues/5417","RelatedDescription":"Closed issue \"Can't handle comments in media type strings though some infrastructure supports them\" (#5417) at aspnet/Mvc","RelatedBody":"Should either add support for comments in `MediaType` (perhaps in `HttpTokenParsingRules.GetWhitespaceLength()`) or remove comment support from `HttpTokenParsingRules`.\n\n[RFC 2045](https://tools.ietf.org/html/rfc2045#page-13) specifically mentions\n\n> In addition, comments are allowed in accordance with [RFC 822](https://tools.ietf.org/html/rfc822) rules for structured header fields.  Thus the following two forms\n> - Content-type: text/plain; charset=us-ascii (Plain text)\n> - Content-type: text/plain; charset=\"us-ascii\"\n> \n> are completely equivalent.\n\nHowever `MediaType` does not ignore [comments](https://tools.ietf.org/html/rfc822#section-3.4.3). Comments should basically be treated like whitespace but are not.\n\nIf we decide we do not need comment support, the extra complexity in `HttpTokenParsingRules.GetExpressionLength()` (for exactly this feature) should be removed. Don't need nesting support for quoted strings for example.\n"},{"Id":"7664089482","Type":"IssuesEvent","CreatedAt":"2018-05-12T02:23:00","Actor":"pranavkm","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Mvc/issues/4308","RelatedDescription":"Closed issue \"ValidationHelpers for prefixed entries does not use display order\" (#4308) at aspnet/Mvc","RelatedBody":"Follow up to https://github.com/aspnet/Mvc/pull/4108#discussion_r56355870\n\nFor entries in the ModelStateDictionary with prefixes, we fail to preserve the display order specified in `ModelMetadata`. \n"},{"Id":"7664058309","Type":"IssuesEvent","CreatedAt":"2018-05-12T01:57:43","Actor":"pranavkm","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Mvc/issues/2885","RelatedDescription":"Closed issue \"Set cultures with without user override\" (#2885) at aspnet/Mvc","RelatedBody":"(I don't know if this is the write place or if this has already been discussed)\n\nmatching culture setting between the server and client is extremely hard, even with all the frameworks out there.\n\nOn top of that, .NET respects user modifications to cultures which can create havoc.\n\nFor example, I have the date time information on my user profile set to **pt-PT** but, instead of using the standard date format (**dd/MM/yyyy**), I prefer **yyyy-MM-dd**. And now all handling of dates between client and server are mangled.\n\nOne doesn't expect a server to have this kind of problems, but the applications are (still) developed by people and the development system might have these issues.\n\nThe solution is very simple. Instead of using the [CultureInfo](http://referencesource.microsoft.com/#mscorlib/system/globalization/cultureinfo.cs) [constructor with just the culture name](http://referencesource.microsoft.com/mscorlib/R/cb4dd1c3262abd32.html), use [the constructor that allows to specify not to use user overrides](http://referencesource.microsoft.com/mscorlib/R/65ff497f51fce595.html).\n\nFor now, I'm using this:\n\n```\nprotected void Application_BeginRequest(object source, EventArgs e)\n{\n    var currentCulture = Thread.CurrentThread.CurrentCulture;\n    if (currentCulture.UseUserOverride)\n    {\n        Thread.CurrentThread.CurrentCulture = new CultureInfo(currentCulture.Name, false);\n    }\n}\n```\n"}],"ResultType":"GitHubEvent"},"Identity":{"Events":[{"Id":"7665895433","Type":"IssuesEvent","CreatedAt":"2018-05-13T01:26:40","Actor":"natelaff","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Identity/issues/1789","RelatedDescription":"Opened issue \"Guidance on new 2.1 stuff\" (#1789) at aspnet/Identity","RelatedBody":"Can we get guidance on adding user properties, renaming Identity tables and changing key types with all of these changes for 2.1 (i.e. #1690, #1679)\r\n\r\nIt seems like this was made easier, right? Can we see how it all comes together now?\r\n\r\nThanks!\r\n"},{"Id":"7663541955","Type":"IssuesEvent","CreatedAt":"2018-05-11T21:48:23","Actor":"kspearrin","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Identity/issues/1788","RelatedDescription":"Opened issue \"Consider using URL safe base64 tokens instead of URL encoding for email verification\" (#1788) at aspnet/Identity","RelatedBody":"As shown in this email verification example, it is required to URL encode the base64 email confirmation token before sending them in an email:\r\n\r\nhttps://github.com/aspnet/Identity/blob/47060f5e529ee4b872d9fcf66774935dafb051fc/samples/IdentitySample.DefaultUI/Areas/Identity/Pages/Account/Register.cshtml.cs#L100\r\n\r\nThis works the majority of the time. However, at no fault of our own, there are email providers out there that will still re-encode `%` characters that appear in anchor tags with `%25`, resulting in invalid tokens.\r\n\r\nFor example, `==` (original b64 characters) → `%3D%3D` (correct) → `%253D%253D` (incorrect).\r\n\r\nThis is obviously a bug with the email client itself, but we have come across the case several times with multiple different email clients (for example, mailbox.org will do this).\r\n\r\nSince this really effects everyone (though most may not have noticed), I would propose that the team here should consider using URL safe base64 strings by default within the framework. This would eliminate the need for us to manually create our own TokenProvider, which we've had to resort to today. URL safe base64 strings are used, for example, in JWT tokens as a standard. Here is some sample code that we use to achieve it:\r\n\r\n        public static string Base64UrlEncode(byte[] input)\r\n        {\r\n            var output = Convert.ToBase64String(input)\r\n                .Replace('+', '-')\r\n                .Replace('/', '_')\r\n                .Replace(\"=\", string.Empty);\r\n            return output;\r\n        }\r\n\r\n        public static byte[] Base64UrlDecode(string input)\r\n        {\r\n            var output = input;\r\n            // 62nd char of encoding\r\n            output = output.Replace('-', '+');\r\n            // 63rd char of encoding\r\n            output = output.Replace('_', '/');\r\n            // Pad with trailing '='s\r\n            switch(output.Length % 4)\r\n            {\r\n                case 0:\r\n                    // No pad chars in this case\r\n                    break;\r\n                case 2:\r\n                    // Two pad chars\r\n                    output += \"==\"; break;\r\n                case 3:\r\n                    // One pad char\r\n                    output += \"=\"; break;\r\n                default:\r\n                    throw new InvalidOperationException(\"Illegal base64url string!\");\r\n            }\r\n\r\n            // Standard base64 decoder\r\n            return Convert.FromBase64String(output);\r\n        }"},{"Id":"7662609604","Type":"IssuesEvent","CreatedAt":"2018-05-11T18:07:18","Actor":"AdamAnandUS","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Identity/issues/1787","RelatedDescription":"Opened issue \"Invalid Token Error when hosted on thrid-party Server\" (#1787) at aspnet/Identity","RelatedBody":"var result = await _userManager.ConfirmEmailAsync(user, code);\r\n\r\nThis code will never work and always ends up with \"Invalid Token\" when hosted from a third-party hosting provider where there is no RDP and where I cannot change any IIS Server Settings. Even if you submit the token manually using a POST instead of get it will fail. I have used encode/decode and examined the token thoroughly.\r\n\r\nIt works perfectly on the local development machine and always fails on the hosted server."},{"Id":"7651782116","Type":"IssuesEvent","CreatedAt":"2018-05-09T19:40:24","Actor":"Yeeler","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Identity/issues/1786","RelatedDescription":"Opened issue \"Microsoft.AspNetCore.Identity.UI.csproj failed to load\" (#1786) at aspnet/Identity","RelatedBody":"git clone code, then load it in VS 2017 ver 15.7.1 \r\nMicrosoft.AspNetCore.Identity.UI.csproj load failed.\r\n\r\n![image](https://user-images.githubusercontent.com/5031611/39835715-a0f6e776-5403-11e8-857d-17086584219f.png)\r\n"}],"ResultType":"GitHubEvent"},"Kestrel":{"Events":[{"Id":"7665435326","Type":"PullRequestEvent","CreatedAt":"2018-05-12T19:03:20","Actor":"benaadams","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/pull/2569","RelatedDescription":"Opened pull request \"[WiP][Platform] Speedups\" (#2569) at aspnet/KestrelHttpServer","RelatedBody":""},{"Id":"7665430149","Type":"PullRequestEvent","CreatedAt":"2018-05-12T19:00:06","Actor":"benaadams","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/pull/2568","RelatedDescription":"Closed pull request \"[Platform] Devirtualize parsing\" (#2568) at aspnet/KestrelHttpServer","RelatedBody":"Bit heavy on the generics...\r\n\r\nTesting to see if it does what I think"},{"Id":"7665283871","Type":"PullRequestEvent","CreatedAt":"2018-05-12T17:25:29","Actor":"benaadams","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/pull/2568","RelatedDescription":"Opened pull request \"[Platform] Devirtualize parsing\" (#2568) at aspnet/KestrelHttpServer","RelatedBody":"Bit heavy on the generics...\r\n\r\nTesting to see if it does what I think"},{"Id":"7664045869","Type":"PullRequestEvent","CreatedAt":"2018-05-12T01:47:34","Actor":"sebastienros","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/pull/2561","RelatedDescription":"Merged pull request \"Add support for netcoreapp2.2 in benchmarks\" (#2561) at aspnet/KestrelHttpServer","RelatedBody":""},{"Id":"7663850625","Type":"IssuesEvent","CreatedAt":"2018-05-11T23:44:25","Actor":"BrennanConroy","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/issues/2556","RelatedDescription":"Closed issue \"Move Kestrel to netcoreapp2.2\" (#2556) at aspnet/KestrelHttpServer","RelatedBody":"We tried to do this before, but had to [revert](https://github.com/aspnet/KestrelHttpServer/pull/2555) because there were package problems with System.Memory."},{"Id":"7663571166","Type":"PullRequestEvent","CreatedAt":"2018-05-11T21:57:21","Actor":"halter73","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/pull/2567","RelatedDescription":"Merged pull request \"Use correct TaskCompletionSource ctor\" (#2567) at aspnet/KestrelHttpServer","RelatedBody":""}],"ResultType":"GitHubEvent"},"Razor":{"Events":[{"Id":"7663689689","Type":"PullRequestEvent","CreatedAt":"2018-05-11T22:37:02","Actor":"ajaybhargavb","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Razor/pull/2346","RelatedDescription":"Opened pull request \"Added a taghelpers overload to Process and ProcessDesignTime\" (#2346) at aspnet/Razor","RelatedBody":"Fixes https://github.com/aspnet/Razor/issues/2345\r\n\r\nWe want to have a way to specify the taghelper descriptors to use while processing a specific document.\r\n- Added an overload to Process and ProcessDesignTime to take in a list `TagHelperDescriptor`s\r\n- Added the corresponding `CreateCodeDocumentCore` overload\r\n- Added `GetTagHelpers` and `SetTagHelpers` extension methods for CodeDocument\r\n- Added the necessary plumbing to use the taghelpers from the CodeDocument when available and fallback logic.\r\n- Added/updated tests"},{"Id":"7663688174","Type":"IssuesEvent","CreatedAt":"2018-05-11T22:36:28","Actor":"ajaybhargavb","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Razor/issues/2345","RelatedDescription":"Opened issue \"Add a way to specify the tag helpers when processing a document\" (#2345) at aspnet/Razor","RelatedBody":"Currently when we call Engine.Process(RazorProjectItem) the tag helpers are computed everytime from the `ITagHelperFeature`. We want to be able to just specify the tag helpers to use when processing a document and the Engine should prefer that over the feature. This is useful in design time scenarios when we have already computed the tag helpers in the background.\r\n\r\nWe also want to do this for imports but I'll file that separately."},{"Id":"7663623685","Type":"IssuesEvent","CreatedAt":"2018-05-11T22:13:52","Actor":"Andrzej-W","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Razor/issues/2344","RelatedDescription":"Opened issue \"Inserting text from intellisense for @using doesn't work correctly\" (#2344) at aspnet/Razor","RelatedBody":"I have noticed this in Blazor application but then I have checked in ASP.NET Core 2.0 and it looks that the problem exists here too in any cshtml file.\r\n\r\n**Software**\r\nVS 2017 15.7.1\r\nBlazor 0.3.0\r\n\r\n**Steps**\r\n- Create a new Blazor project (I have selected hosted, but it is not important, project name BugReport)\r\n- Open `BugReport.Client\\_ViewImports.cshtml` file. It looks like this:\r\n```\r\n@using System.Net.Http\r\n@using Microsoft.AspNetCore.Blazor\r\n@using Microsoft.AspNetCore.Blazor.Components\r\n@using Microsoft.AspNetCore.Blazor.Layouts\r\n@using Microsoft.AspNetCore.Blazor.Routing\r\n@using BugReport.Client\r\n@using BugReport.Client.Shared\r\n```\r\n- In the new line at the end of the file (line 8) type `@using BugReport.Client.` You will see two options in intellisense. Select any of them.\r\n\r\n\r\n**Expected behaviour**\r\nSelected text is inserted after dot in the current line.\r\n\r\n**Current behaviour**\r\nText is appended to end of line 6. This is the first line which contains the text `@using BugReport.Client` without dot at the end. You can try to write `@using Microsoft.AspNetCore.Blazor.` and you will see that selected text will be appended to the end of line 2 where we have `@using Microsoft.AspNetCore.Blazor`"},{"Id":"7663505659","Type":"IssuesEvent","CreatedAt":"2018-05-11T21:37:52","Actor":"mkArtakMSFT","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Razor/issues/1747","RelatedDescription":"Closed issue \"Design-Time Directive [Language Feature Proposal]\" (#1747) at aspnet/Razor","RelatedBody":"This is to open some discussion about an idea for a new language construct in Razor.\r\n## Background\r\nWhile most of what we do is focused on compile and run time resolution, some \"dynamic\" things are better handled at design time. This proposal is to create a design-time directive in the Razor language.  The design time directive indicates that the file contents following the directive will be modified by some process. The design-time directive provides hooks and extension points into a cshtml file to enable actions to take place at design time. These can be trigged manually, by Visual Studio, or other processing.\r\n## Design-Time Directive\r\nThe design-time directive is used to communicate with parsers, file processors, and the Razor Engine.\r\n\r\n- It takes the general form: `@[...]`\r\n- It can take parameters: `@[parser, action, parameters]`\r\n- It can have scope: `@[...]{  ...  }`\r\n\r\nThe design-time directive indicates to a process (external or internal) that an area of the file will/can be modified by the process. The directive has no impact on it's own.\r\n\r\nIt is removed at compile time by the Razor Engine from the resulting html.\r\n## Examples\r\n\r\n### Substitution\r\nThe most trivial use of the directive is to insert a group of characters into the file.\r\nGiven - `@[myText] = \"This is some text to repeat.\"`\r\nUsing - `@[myText]`\r\nProduces => `This is some text to repeat.`\r\nThe directive isn't actually replaced. The text is inserted after the directive.\r\nAny characters can be used - text, tags, code.\r\nIn initial cshtml:\r\n```\r\n  @[myText] \r\n```\r\nAfter the substitution process runs, in cshtml:\r\n```\r\n  @[myText]\r\n  This is some text to repeat.\r\n```\r\nIn html:\r\n```\r\n  This is some text to repeat.\r\n```\r\nChanging the text in the assignment changes the results in all files using the directive when the process runs again. Though the directive doesn't technically have impact on it's own, some features like substitution would be built into the environment.\r\n\r\n### Merging\r\nRazor is especially interesting because it can be a mix of many languages - cs, css, js, html. Setting aside the \"correctness\" of putting css or js in an cshtml file, they provide fair examples. In an html/cshtml file, we can include `<script></script>` and `<style></style>` blocks. For the sake of argument, let's say we have a compelling reason to include content inside them in the file. Writing the code in the page is messy, and can be problematic. Worse, many of us prefer Less and Typescript, which we can't write in-page. The `@[]` directive helps.\r\n\r\nWe can write our css in a Less file - `styles.less`, that compiles into `styles.css`, and our js in `scripts.ts`, that compiles into `scripts.js`. We get full editor and intellisense support. In our `Page.cshml` we can include the results.\r\n```\r\n  @[style, \"~/styles.css\"]\r\n     ... The contents of styles.css are copied into the page here, in a <style> block.\r\n  @[script, \"~/scripts.js]\r\n     ... The contents of scripts.js are copied into the page here in a <script> block.\r\n```\r\nThis happens during design - the file content is modified, triggered manually, by the IDE, or an extension. For example, after Web Essentials compiles a Less file into css, it could also update the pages that reference the css file through design-time directives. Though the end result is much like `@render`, we get a local copy that provides access to the internals, and allows modification if we turn \"auto-update\" off.\r\n\r\nSelectors help keep files small. If we just need a couple of styles or functions, we can only copy them.\r\n```\r\n  @[style, \"~/styles.css\", { .form-controls-block, .nav-link } ]\r\n  @[script, \"~/scripts.js\", { datepicker } ]\r\n```\r\nThis would pull the two styles and single function out of the files, and insert them into the page inside`<style>` and `<script>` blocks. This can be helpful in building small, self-contained, and lightweight components.\r\n\r\n### Templates\r\nHtml Templating is another other possibility. This can be used in regular files or in template/scaffolding engines. An overly simple example is the common label-input-validation set - \r\n  `<label asp-for=\"ModelProperty\"><input asp-for=\"ModelProperty\"></input><...validationstuff...`\r\nThere are many ways to approach this, but one could be (in a cshtml) \r\n```\r\n@[]{\r\n  form-line = \"<label asp-for=\"@[param]\" ... \" \r\n}\r\n\r\n@[form-line, param=\"ModelProperty\"]\r\n   ... Fragment is expanded here, with replacement.\r\n```\r\nTemplates are like advanced, dynamic Snippets, and can be defined in the page or in shared files. They can auto update, or be manually triggered.\r\n\r\n### Targeting\r\nWhen we know we are running a file processor over the file, we can define targets. This can make the processor more efficient, and the file easier to parse. The processor can look for tagged areas to process, or even exclude.\r\n```\r\n  @[fileProcessorName, processingAction, exclude] {\r\n       ... This section is skipped by fileProcessorName when executing processingAction \r\n         - if it is aware of design-time directives.\r\n  }\r\n```\r\n## Discussion Scope\r\nThis proposal isn't about any of the specific examples, but about the concept of being able to provide information to processes that manipulate code files. And if so, is `@[]` a good construct to use? More and more, we run processes against these files - from built-in formatting processes, to refactoring, to analysis processes. A standard way to communicate with these processors might be valuable. \r\n\r\n## Outside the Proposal\r\nThe concept can also extend into other languages.\r\nThough advanced, this could allow things like name refactoring for related items in different technologies. For example, a C# class and Typescript class could have a design-time association. Changing one triggers changes to the other. This is a design-time change - the files are modified directly. The association doesn't exist at compile or run time. This would be a long time coming, but shows possible potential of the overall concept. \r\n"},{"Id":"7663458056","Type":"IssuesEvent","CreatedAt":"2018-05-11T21:25:00","Actor":"mkArtakMSFT","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Razor/issues/2342","RelatedDescription":"Closed issue \"View Components cannot be included, mystery exception references irrelevant model.\" (#2342) at aspnet/Razor","RelatedBody":"This is a follow up to https://github.com/aspnet/Docs/issues/6278 A quest trying to figure out what is the default search path for ViewComponents\r\n\r\nProbably I am doing something wrong, but I cannot get ViewComponent to be included in a page. \r\n\r\n\r\nI have a folder structure:\r\n```\r\n- Pages\r\n  - Components\r\n    - ExternalSystems\r\n      - Default.cshtml\r\n- Views\r\n  - Shared\r\n    - Components\r\n      - ExternalSystems\r\n        - Default.cshtml\r\n```\r\n\r\nwithin `Pages/Index.cshtml` i'v tried to include this component by trial & error (i'm learning this stuff after all):\r\n```\r\n@await Component.InvokeAsync(\"ExternalSystems\");\r\n@await Component.InvokeAsync(\"/Pages/Components/ExternalSystems\");\r\n@await Component.InvokeAsync(\"/Pages/Components/ExternalSystems/Default\");\r\n@await Component.InvokeAsync(\"/Pages/Components/ExternalSystems/Default.cshtml\");\r\n@await Component.InvokeAsync(\"/Views/Shared/ExternalSystems\");\r\n```\r\n\r\nI expected that exception will show places searched like it does for `@Html.Partial`:\r\n> InvalidOperationException: The partial view 'none' was not found. The following locations were searched: /Pages/none.cshtml /Views/Shared/none.cshtml\r\n\r\nHowever for every single call to `@await Component.InvokeAsync` it spits this exception: `InvalidOperationException: Could not find an 'Invoke' or 'InvokeAsync' method for the view component '<Stripped.Out>.Pages.Identities.IndexModel'.`\r\nFirst of all, it doesn't show me paths searched. Second, wait what? Why are you telling me something about Pages.Identities. Yes, I have that model, but it is nowhere referenced in neither `Pages/Index.cshtml` or View Component i'm trying to include.\r\n\r\nCould someone please provide me with a guidance to determine: How view component paths are searched? For Razor Pages it is not documented, only in [3rd party site](https://www.learnrazorpages.com/razor-pages/view-components). \r\nAnyway it doesn't work that way for me - what would be the debugging steps? Console debug doesn't show anything useful.\r\n\r\ndotnet 2.0.7"},{"Id":"7661793774","Type":"PullRequestEvent","CreatedAt":"2018-05-11T15:18:09","Actor":"rynowak","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/Razor/pull/2341","RelatedDescription":"Merged pull request \"Track the open/closed state of documents\" (#2341) at aspnet/Razor","RelatedBody":"This change intoduces content changes to our project snapshots. We now\r\nknow the open/closed state of documents that are initialized by the\r\nRazor project system and listen to the correct data source based on\r\nwhether the file is open in the editor.\r\n\r\nThere are a few other random improvements in here as well like a\r\nworkaround for the upcoming name change to our OOP client type."},{"Id":"7652400057","Type":"IssuesEvent","CreatedAt":"2018-05-09T21:54:28","Actor":"NTaylorMullen","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Razor/issues/1760","RelatedDescription":"Closed issue \"Make TagHelperDescriptorFactory errors provide more information\" (#1760) at aspnet/Razor","RelatedBody":"For instance, when a `TagHelper`s tag name or attribute name is null or whitespace we don't provide the TagHelper type that we're looking at. If we put that information in the error it would be much easier to diagnose issues.\r\n\r\nFor instance: https://github.com/aspnet/Mvc/issues/7029"}],"ResultType":"GitHubEvent"},"Templates":{"Events":[],"ResultType":"GitHubEvent"},"Tooling":{"Events":[{"Id":"7582805417","Type":"IssuesEvent","CreatedAt":"2018-04-25T06:34:01","Actor":"TheAlphamerc","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Tooling/issues/1071","RelatedDescription":"Opened issue \" Unable to start debugging\" (#1071) at aspnet/Tooling","RelatedBody":"The project is success fully build but unable to start debugger. See [here][2018-04-25_11-20-19.7244.Ide.log](https://github.com/aspnet/Tooling/files/1945717/2018-04-25_11-20-19.7244.Ide.log) for more details. \r\n\r\n\r\n\r\n\r\n"},{"Id":"7576035394","Type":"IssuesEvent","CreatedAt":"2018-04-24T05:17:55","Actor":"barrytang","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Tooling/issues/1070","RelatedDescription":"Closed issue \"Visual studio freezes when I run add-migration \" (#1070) at aspnet/Tooling","RelatedBody":"I have enabled migrations and added migrations within my project previously. However now when I run add-migration visual studio freezes and I need to close visual studio via the task manger."},{"Id":"7567897452","Type":"IssuesEvent","CreatedAt":"2018-04-22T14:52:17","Actor":"rberger247","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Tooling/issues/1070","RelatedDescription":"Opened issue \"Visual studio freezes when I run add-migration \" (#1070) at aspnet/Tooling","RelatedBody":"I have enabled migrations and added migrations within my project previously. However now when I run add-migration visual studio freezes and I need to close visual studio via the task manger."}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"7644982634","Type":"IssuesEvent","CreatedAt":"2018-05-08T17:07:05","Actor":"blowdart","Repository":"aspnet/Announcements","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Announcements/issues/300","RelatedDescription":"Opened issue \"Microsoft Security Advisory ASPNETCore-Mar18: ASP.NET Core Denial Of Service Vulnerability\" (#300) at aspnet/Announcements","RelatedBody":"# Microsoft Security Advisory ASPNETCore-Mar18: ASP.NET Core Denial Of Service Vulnerability\r\n\r\n## Executive Summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in ASP.NET Core 2.0.\r\nThis advisory also provides guidance on what developers can do to update their applications correctly.\r\n\r\nMicrosoft made an internal discovery of a security vulnerability in version 2.x of ASP.NET Core where\r\na specially crafted request can cause excess resource consumption in Kestrel.\r\n\r\n## Dicussion\r\n\r\nDiscussion for this issue can be found at https://github.com/aspnet/Kestrel/issues/ **TBD**\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nThere are no mitigations for this issue.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nThe vulnerability also affects any ASP.NET Core 2.0 project if it uses the following package versions, which must also be [updated](#app-update), in addition to addressing your proxy configuration :\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ---------------- | -------------------------\r\nMicrosoft.AspNetCore.Server.Kestrel.Core | 2.0.0, 2.0.1, 2.0.2<br />2.1.0-preview1, 2.1.0-preview2 | 2.0.3<br />2.1.0-rc1-final\r\nMicrosoft.AspNetCore.Server.Kestrel.Transport.Abstractions | 2.0.0, 2.0.1, 2.0.2<br />2.1.0-preview1, 2.1.0-preview2 | 2.0.3<br />2.1.0-rc1-final\r\nMicrosoft.AspNetCore.Server.Kestrel.Transport.Libuv | 2.0.0, 2.0.1, 2.0.2<br />2.1.0-preview1, 2.1.0-preview2 | 2.0.3<br />2.1.0-rc1-final\r\nMicrosoft.AspNetCore.All | 2.0.0, 2.0,3, 2.0.4, 2.0.5, 2.0.6, 2.0.7<br />2.1.0-preview1, 2.1.0-preview2 | 2.0.8<br />2.1.0-rc1-final\r\n\r\n## Advisory FAQ\r\n\r\n### How do I know if I am affected?\r\n\r\n.NET Core has two types of dependencies: direct and transitive. Direct dependencies are dependencies where you specifically add a package to your project, transitive dependencies occur when you add a package to your project that in turn relies on another package.\r\n\r\nFor example, the `Microsoft.AspNetCore.Mvc` package depends on the `Microsoft.AspNetCore.Mvc.Core` package. When you add a dependency on `Microsoft.AspNetCore.Mvc` in your project, you're taking a transitive dependency on `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\nAny application that has a direct or transitive dependency on the [affected packages](#affected-software) can be exposed to the vulnerability.\r\n\r\n### How do I fix the issue?\r\n\r\n---\r\n\r\nIf you're targeting .NET Core 2.x and the `Microsoft.AspNetCore.All` \"metapackage\":\r\n\r\n* Update its version number to 2.0.8 if you have targetted 2.0.x *OR*\r\n* Update its version number to 2.1.0-rc1-final if you have targetted previews of 2.1\r\n\r\nUpdating the metapackage will update the [affected packages](#affected-software)\r\n\r\n---\r\n\r\n.NET Core projects have two types of dependencies: direct and transitive. You must update your projects using the following instructions to address both types of dependency.\r\n\r\n#### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your *csproj* file. They can be fixed by [editing the csproj file](#direct-dependencies) or using NuGet to update the dependency.\r\n\r\n#### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the *project.assets.json* file contained in the obj directory of your project.\r\n\r\nThe *project.assets.json* files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\n#### <a name=\"direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Server.Kestrel.Core\" Version=\"2.0.1\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to a [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `Microsoft.AspNetCore.Server.Kestrel.Core` version 2.0.1.\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `Microsoft.AspNetCore.Server.Kestrel.Core` to a [fixed package number](#affected-software). Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Server.Kestrel.Core\" Version=\"2.0.3 />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\nAfter you've addressed all of your direct dependencies, you must review your transitive dependencies.\r\n\r\n#### Discovering and fixing transitive dependencies\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can [review the *project.assets.json* file](#project-assets-json).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio 2017, and then press Ctrl+; to activate the search in Solution Explorer. Search for each of the [vulnerable packages](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a>Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `System.Security.Cryptography.Xml/4.4.0` is a reference to version 4.4.0 of `System.Security.Cryptography.Xml`.\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\n##### Fixing transitive dependencies\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `Microsoft.AspNetCore.Server.Kestrel.Core` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Server.Kestrel.Core\" Version=\"2.0.3\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n#### Rebuilding your application\r\n\r\nFinally you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including Terms and Conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue where you can ask questions.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Revisions\r\n\r\nV1.0 (May 8, 2018): Advisory published.\r\n\r\n_Version 1.0_"},{"Id":"7630948535","Type":"IssuesEvent","CreatedAt":"2018-05-04T21:52:58","Actor":"danroth27","Repository":"aspnet/Announcements","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Announcements/issues/299","RelatedDescription":"Opened issue \"ASP.NET Core WebHooks moved out of ASP.NET Core 2.1\" (#299) at aspnet/Announcements","RelatedBody":"We are moving ASP.NET Core WebHooks out of the ASP.NET Core 2.1 to give more time to validate the design and implementation. We will continue to ship previews ASP.NET Core WebHooks packages, but they not ship as stable packages as part of the ASP.NET Core 2.1 release.\r\n\r\n### Why?\r\n\r\n[ASP.NET Core WebHooks](https://github.com/aspnet/webhooks) is only a partial port of [ASP.NET WebHooks](https://github.com/aspnet/aspnetwebhooks) and hasn't received sufficient attention during the ASP.NET Core 2.1 release for us to feel comfortable shipping it at this time. \r\n"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"993841130545426433","CreatedAt":"2018-05-08T13:12:44+00:00","UserScreenname":"aspnet","Text":"Jeff will be pair-programming using @VisualStudio Live Share on an @aspnet Core project with YOU at the Live Share… https://t.co/i0sm9cCOGz","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":13,"FavoriteCount":2,"RawContent":null},{"Id":"991768334419902464","CreatedAt":"2018-05-02T19:56:11+00:00","UserScreenname":"aspnet","Text":"Blazor 0.3.0 experimental release now available\n\nhttps://t.co/2ixEeVbBbN https://t.co/3VB4sDxvwR","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":480,"FavoriteCount":270,"RawContent":null},{"Id":"991361559426314241","CreatedAt":"2018-05-01T16:59:49+00:00","UserScreenname":"aspnet","Text":"We're live! Join us at https://t.co/4Ioo9jNSN2 https://t.co/uGAnWHOWD5","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":7,"FavoriteCount":4,"RawContent":null},{"Id":"991092623849865217","CreatedAt":"2018-04-30T23:11:09+00:00","UserScreenname":"aspnet","Text":"Tuesday at 10 Pacific / 18 GMT - #ASPNET Community Standup\n\nSignalR and Project Bedrock updates with @davidfowl… https://t.co/B8XmP5YkCW","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":76,"FavoriteCount":35,"RawContent":null},{"Id":"989160632908791808","CreatedAt":"2018-04-25T15:14:07+00:00","UserScreenname":"aspnet","Text":"Do you have questions about how to work with ASPNet Core Identity?  Check out the video from yesterday's session wi… https://t.co/hjaoJRCR7l","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":48,"FavoriteCount":14,"RawContent":null},{"Id":"988913487190544384","CreatedAt":"2018-04-24T22:52:03+00:00","UserScreenname":"aspnet","Text":"We're live on the #ASPNET Community Standup! Join us! https://t.co/4Ioo9jNSN2","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":10,"FavoriteCount":4,"RawContent":null},{"Id":"988873497614024704","CreatedAt":"2018-04-24T20:13:08+00:00","UserScreenname":"aspnet","Text":"Join us for the weekly #ASPNET Community Standup today at 3:45 PM Pacific / 23:45 GMT at https://t.co/4Ioo9jNSN2 https://t.co/dCyzj19KZU","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":10,"FavoriteCount":4,"RawContent":null},{"Id":"988762250331676673","CreatedAt":"2018-04-24T12:51:05+00:00","UserScreenname":"aspnet","Text":"Our @csharpfritz and @coolcsh will be broadcasting LIVE from @ch9 studios and answering your questions today about… https://t.co/d37Sob12rv","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":24,"FavoriteCount":10,"RawContent":null},{"Id":"986683993180590080","CreatedAt":"2018-04-18T19:12:50+00:00","UserScreenname":"aspnet","Text":"Tune in to the @PhillyDotNet user group today at 6pm ET / 3pm PT to learn more about Blazor from our MVP Chris Gome… https://t.co/D6svQPb95X","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":7,"FavoriteCount":2,"RawContent":null},{"Id":"986310111256858624","CreatedAt":"2018-04-17T18:27:09+00:00","UserScreenname":"aspnet","Text":"Blazor 0.2.0 release now available https://t.co/rFE8xvlvM3","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":249,"FavoriteCount":148,"RawContent":null},{"Id":"983838325457829890","CreatedAt":"2018-04-10T22:45:10+00:00","UserScreenname":"aspnet","Text":"We're live on the #ASPNET Community Standup! Join us! https://t.co/4Ioo9jNSN2","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":20,"FavoriteCount":6,"RawContent":null},{"Id":"983802600398049285","CreatedAt":"2018-04-10T20:23:12+00:00","UserScreenname":"aspnet","Text":"Join us for the weekly #ASPNET Community Standup today at 3:45 PM Pacific / 23:45 GMT at https://t.co/4Ioo9jNSN2 https://t.co/441EI8rRQL","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":11,"FavoriteCount":10,"RawContent":null},{"Id":"981890668095332353","CreatedAt":"2018-04-05T13:45:52+00:00","UserScreenname":"aspnet","Text":"Tune in to @csharpfritz live stream today to learn more about getting started with #ASP.NET Core. https://t.co/mkwxUOObrd","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":14,"FavoriteCount":7,"RawContent":null}]}},"RunOn":"2018-05-13T05:30:12.9045143Z","RunDurationInMilliseconds":7863}