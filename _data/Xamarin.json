{"Data":{"Blog":{"FeedItems":[{"Title":"Lose the Cables: Make Deploying to an iOS or tvOS Device Easier","PublishedOn":"2018-02-02T19:59:02+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"One thing most developers consistently do during app development is deploy to a testing device. One main drawback during this process is the struggle to find a cable, connect it to a computer, plug it...","Href":"https://blog.xamarin.com/lose-cables-make-deploying-ios-tvos-device-easier/","RawContent":null},{"Title":"Just Push Play: Using Google Play on an Android Emulator","PublishedOn":"2018-02-01T20:22:55+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"The needs of an Android developer using the Android emulator continuously expand. The latest emulator development from Google provides a system image for the Google Play Store, which includes a fully...","Href":"https://blog.xamarin.com/just-push-play-using-google-play-android-emulator/","RawContent":null},{"Title":"Xamarin Developer Events in February","PublishedOn":"2018-01-31T19:26:04+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"If you haven&#8217;t started working on your new year&#8217;s resolutions yet, we have the perfect solution: get out there and start building on your mobile app development education by networking...","Href":"https://blog.xamarin.com/xamarin-developer-events-february/","RawContent":null},{"Title":"Webinar Recording | Xamarin University Presents: Ship Better Apps with Visual Studio App Center","PublishedOn":"2018-01-30T19:53:57+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"In this pre-recorded webinar, Mark Smith, Director of Xamarin University, shows you how to automate your app development pipeline with Visual Studio App Center, walking through how to connect your app...","Href":"https://blog.xamarin.com/webinar-recording-xamarin-university-presents-ship-better-apps-visual-studio-app-center/","RawContent":null},{"Title":"Android Emulator Quick Boot","PublishedOn":"2018-01-29T19:41:31+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Android Emulator version 27.0.2 now includes a feature called Quick Boot, which launches the emulator in just a few seconds. For Quick Boot to work, your AVD must perform a cold boot on its first time...","Href":"https://blog.xamarin.com/android-emulator-quick-boot/","RawContent":null},{"Title":"First Look: Xamarin Android Device Manager Preview","PublishedOn":"2018-01-25T19:45:47+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"With the release of SDK Tools 26, Google replaced the standalone UI for the SDK and Device Manager with a command line interface. In an effort to make Android component management accessible and easy...","Href":"https://blog.xamarin.com/first-look-xamarin-android-device-manager-preview/","RawContent":null},{"Title":"Better Resource Organization in Xamarin.Forms","PublishedOn":"2018-01-23T19:28:44+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Resource Dictionary is a foundational building block to all Xamarin.Forms mobile development. It&#8217;s the primary vehicle for declaring XAML resources youâ€™ll use throughout your mobile application,...","Href":"https://blog.xamarin.com/better-resource-organization-xamarin-forms/","RawContent":null},{"Title":"The What, Why, and How of Mobile DevOps with Visual Studio App Center","PublishedOn":"2018-01-22T18:52:27+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"With constant operating system releases, ever-shifting user expectations, and new form factors launching every year, making sure your apps are high-quality, take advantage of the latest technology,...","Href":"https://blog.xamarin.com/mobile-devops-visual-studio-app-center/","RawContent":null},{"Title":"Running Xamarin.iOS Unit Tests in Visual Studio Team Services","PublishedOn":"2018-01-19T18:32:24+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"In previous posts, we&#8217;ve discussed how to set up continuous integration for your Xamarin.iOS applications inside Visual Studio Team Services(VSTS) using the new Hosted macOS Agent. Building the...","Href":"https://blog.xamarin.com/running-xamarin-ios-unit-tests-visual-studio-team-services/","RawContent":null},{"Title":"The Xamarin Show: Getting Started with iOS Development in C#","PublishedOn":"2018-01-18T18:54:21+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"If you&#8217;re looking to get started with iOS development, there&#8217;s no better place to look than our amazing Xamarin.iOS documentation guides. They cover each and every topic that you can...","Href":"https://blog.xamarin.com/the-xamarin-show-getting-started-with-ios-development-in-c-sharp/","RawContent":null}],"ResultType":"Feed"},"Android":{"Events":[{"Id":"7195042495","Type":"IssuesEvent","CreatedAt":"2018-02-04T13:05:37","Actor":"gamesguru","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/1272","RelatedDescription":"Opened issue \"Ubuntu\" (#1272) at xamarin/xamarin-android","RelatedBody":"### The Problem\r\n\r\nWith some work I got everything to build on Ubuntu, had to put the android tools/dnk inside the repo.\r\n\r\nNot exactly sure how to use this, but with msbuild I get the same Mono.Android not found error, with 29000 other errors about missing assemblies.\r\nUsing the xabuild in the scripts folder produces a different error.  This is sort of a \"big\" project, but what's going on?  Seems like a simple fix to someone who knows what they're doing... v7.1 is not supported??\r\n\r\n> Build FAILED.\r\n> \r\n> Warnings:\r\n> \r\n> /media/shane/RaptorWS/etc/git_clones/onecontrol/OneControl.Android/OneControl.Android.csproj (SignAndroidPackage) ->\r\n> \r\n> \t/media/shane/RaptorWS/etc/git_clones/onecontrol/OneControl.Android/OneControl.Android.csproj:  warning : Target '_GetRestoreTargetFrameworksOutput', not found in the project\r\n> \t/media/shane/RaptorWS/etc/git_clones/onecontrol/OneControl.Android/OneControl.Android.csproj:  warning : Target 'IncrementalClean', not found in the project\r\n> \r\n> Errors:\r\n> \r\n> /media/shane/RaptorWS/etc/git_clones/onecontrol/OneControl.Android/OneControl.Android.csproj (SignAndroidPackage) ->\r\n> /media/shane/RaptorWS/etc/git_clones/xamarin-android/bin/Debug/lib/xamarin.android/xbuild/Xamarin/Android/Xamarin.Android.Common.targets (_SetLatestTargetFrameworkVersion target) ->\r\n> \r\n> \t/media/shane/RaptorWS/etc/git_clones/onecontrol/OneControl.Android/OneControl.Android.csproj: error XA0001: Unsupported or invalid $(TargetFrameworkVersion) value of 'v7.1'. Please update your Project Options.\r\n> \r\n> \t 2 Warning(s)\r\n> \t 1 Error(s)"},{"Id":"7192307442","Type":"PullRequestEvent","CreatedAt":"2018-02-03T02:02:57","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1271","RelatedDescription":"Opened pull request \"[build] Use .csproj files, not .mdproj files\" (#1271) at xamarin/xamarin-android","RelatedBody":"(The extension is a lie!)\r\n\r\nCommit 6fd330df lists the ideal build scenario:\r\n\r\n> Load Xamarin.Android.sln into your IDE and Build the project.\r\n\r\nWe're not there yet.\r\n\r\nWhat *prevents* that? In part, the *existence* of `.mdproj` files.\r\nWhile `msbuild`-at-the-command-line doesn't care about project\r\nextensions, *Visual Studio* **does***. Thus, the presence of `.mdproj`\r\nfiles results in Visual Studio showing an \"(incompatible)\" message\r\nnext to the project, and it refuses to load the project.\r\n\r\nImprove things by renaming all `.mdproj` files to `.csproj` files, and\r\nthen adding a `$(TargetFrameworkVersion)` value to each of them (as\r\nVisual Studio requires `$(TargetFrameworkVersion)` in order to load\r\nthe project file).\r\n\r\nWith these two changes -- change extension, set\r\n`$(TargetFrameworkVersion)` -- Visual Studo 2017 will load all of the\r\nprojects in the solution without showing the \"(incompatible)\" message.\r\n\r\nNote: Visual Studio caches project state within the `.vs` directory\r\n(stored in the toplevel checkout directory). If `Xamarin.Android.sln`\r\nhas been previously loaded into Visual Studio, you will need to do one\r\nof the following to allow Visual Studio to load the projects:\r\n\r\n 1. Right-click the project within the Solution Explorer, then click\r\n    Reload. Repeat for all such projects. Or,\r\n 2. Exit Visual Studio, and delete the `.vs` folder. When Visual\r\n    Studio next loads the project, the projects will load."},{"Id":"7192083520","Type":"PullRequestEvent","CreatedAt":"2018-02-03T00:10:09","Actor":"grendello","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1270","RelatedDescription":"Opened pull request \"Fix build with msbuild on Linux\" (#1270) at xamarin/xamarin-android","RelatedBody":"XA's Makefile exports the OS environment variable set to output of the `uname -s` \r\ncommand which returns the operating system's name. On macOS it will return\r\n`Darwin`, on Linux `Linux` etc. MSBuild (the build system, not the command)\r\ndefines a standard property `$(OS)` which names the operating system kind -\r\n`Windows_NT` on Windows and `Unix` on *nix systems.\r\n\r\nOur project and target files (also a large set of them from e.g. Mono) use the\r\nproperty to check whether they are running on Unix or Windows and they rely on\r\nthe property's value to be set correctly to make the right decisions.\r\nMSBuild (the system) supports setting of properties from the command line but it\r\nalso takes their values from the process environment. However, it appears\r\nthere's a major difference between Mono's xbuild (which is used by default by\r\nXA) and msbuild in that xbuild \"protects\" the `OS` property by NOT using the\r\nOS environment property to set its value, while msbuild sets the property from\r\nthe environment variable. This results in the property to have the value of\r\n`Darwin` on macOS and `Linux` on Linux and it happens to work (more or less)\r\ncorrectly on macOS because we do check for `'$(OS)' == 'Darwin' or '$(OS)' == 'Unix')` \r\nin a few places while we do NOT check for `'$(OS)' == 'Linux')`\r\nanywhere. All this together breaks XA build on Linux in a few places.\r\n\r\nThis patch makes the msbuild build (`make MSBUILD=msbuild`) to work on Linux by\r\nrenaming the Make `$(OS)` variable to `$(CURRENT_OS)` and thus \"protecting\" the\r\nstandard value of the `$(OS)` property during the build."},{"Id":"7191607002","Type":"IssuesEvent","CreatedAt":"2018-02-02T21:43:37","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/1269","RelatedDescription":"Opened issue \"Add GetAndroidDependencies Target\" (#1269) at xamarin/xamarin-android","RelatedBody":"We need to add a `GetAndroidDependencies` target which will output an `@(AndroidDependency)` with `%(AndroidDependency.Version)` metadata.\r\n\r\nValid component names are:\r\n\r\n* platform\r\n* build-tool\r\n* platform-tool\r\n* tool\r\n\r\n"},{"Id":"7190182297","Type":"PullRequestEvent","CreatedAt":"2018-02-02T16:24:49","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1239","RelatedDescription":"Merged pull request \"[Xamarin.Android.Build.Tasks] missing EmbeddedResource.LogicalName for __AndroidLibraryProjects__\" (#1239) at xamarin/xamarin-android","RelatedBody":"Fixes #1235\r\n\r\nThere seems to be a bug in msbuild [1] where if you create\r\nan item inside a task and the task is skipped, the metadata\r\nis not created for the item.\r\n\r\nSo we get into a situation where our `__AndroidLibraryProjects__.zip`\r\ndoes not contain the correct LogicalName. As a result our\r\nextraction process cannot find the resource, and builds fail.\r\n\r\nThis commit spits out the code that created the zip file into\r\nits own target `_CreateManagedLibraryResourceArchive`. This means\r\nwe can skip this new target it needed. However the target\r\nwhich creates the item `_AddLibraryProjectsEmbeddedResourceToProject`\r\ncan now run for every build. This will ensure that the metadata is\r\nalways created.\r\n\r\nAlso added a unit test.\r\n\r\n[1] https://social.msdn.microsoft.com/Forums/netframework/en-US/259271d8-a3fc-4a9b-9e3a-fecad8f6f63f/potential-bug-with-createitem-task-and-additionalmetadata?forum=msbuild"},{"Id":"7190182281","Type":"IssuesEvent","CreatedAt":"2018-02-02T16:24:48","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/1235","RelatedDescription":"Closed issue \"Issues with incremental build of resources (missing EmbeddedResource.LogicalName for __AndroidLibraryProjects__)\" (#1235) at xamarin/xamarin-android","RelatedBody":"Sorry, no clear steps to reproduce. Problem happens after various incremental builds.\r\n\r\n`_AddLibraryProjectsEmbeddedResourceToProject` creates an `EmbeddedResource`:\r\n\r\n```\r\nTask \"CreateItem\" (TaskId:5014)\r\n  Task Parameter:Include=obj\\Android-OpenGLES\\__AndroidLibraryProjects__.zip (TaskId:5014)\r\n  Task Parameter:AdditionalMetadata=LogicalName=__AndroidLibraryProjects__.zip (TaskId:5014)\r\n  Output Item(s): \r\n      EmbeddedResource=\r\n          obj\\Android-OpenGLES\\__AndroidLibraryProjects__.zip\r\n                  LogicalName=__AndroidLibraryProjects__.zip (TaskId:5014)\r\n```\r\n\r\nHowever, if `_AddLibraryProjectsEmbeddedResourceToProject` inputs/outputs are already up to date, it will add it without the `LogicalName`:\r\n```\r\n5>Skipping target \"_AddLibraryProjectsEmbeddedResourceToProject\" because all output files are up-to-date with respect to the input files.\r\n5>Input files: C:\\DEV\\xenko2\\sources\\engine\\SiliconStudio.Xenko.Engine\\obj\\Android-OpenGLES\\res\\layout\\game.xml\r\n5>Output files: obj\\Android-OpenGLES\\__AndroidLibraryProjects__.zip\r\n```\r\nresult:\r\n```\r\nEmbeddedResource=\r\n    obj\\Android-OpenGLES\\__AndroidLibraryProjects__.zip\r\n            OriginalItemSpec=obj\\Android-OpenGLES\\__AndroidLibraryProjects__.zip\r\n            TargetPath=obj\\Android-OpenGLES\\__AndroidLibraryProjects__.zip\r\n```\r\n\r\nThen, `CreateCSharpManifestResourceName` ends up creating a `LogicalName` which contains the root namespace:\r\n```\r\nobj\\Android-OpenGLES\\__AndroidLibraryProjects__.zip\r\n    LogicalName=SiliconStudio.Xenko.obj.Android_OpenGLES.__AndroidLibraryProjects__.zip\r\n```\r\n\r\nAs a result, `ResolveLibraryProjectImports` from Xamarin can't find the expected `__AndroidLibraryProjects__.zip` file since it has another name.\r\nResources collides and it results in a runtime crash when loading resource.\r\n"},{"Id":"7190142259","Type":"PullRequestEvent","CreatedAt":"2018-02-02T16:17:17","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1245","RelatedDescription":"Closed pull request \"set MONO_ANDROID_PATH environment variable with msbuild path of the Vâ€¦\" (#1245) at xamarin/xamarin-android","RelatedBody":"â€¦S instance `$(VsInstallRoot)\\MSBuild\\Xamarin\\Android`"},{"Id":"7190120830","Type":"PullRequestEvent","CreatedAt":"2018-02-02T16:13:12","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1253","RelatedDescription":"Merged pull request \"[Tasks] Add aot to the list of valid profilers\" (#1253) at xamarin/xamarin-android","RelatedBody":"With this change it is possible to build an apk containing `aot`\r\nprofiler module (libmono-profiler-aot.so shared library) and profile\r\nthe app with it. It can enabled by setting `mono.debug.profile`\r\nproperty to `aot` on the device or emulator.\r\n\r\nNote that the `aot` profiler saves the data during the mono\r\nruntime shutdown. So one way (only way?) to get the data is to call\r\n`System.Environment.Exit` to end the XA app. Currently  there is\r\nan issue with Java.Interop, where during the shutdown we get\r\nan unhandled exception and thus the shutdown process doesn't\r\nfinish, which means the profile output is not written to the file.\r\nHopefully I can fix that soon."}],"ResultType":"GitHubEvent"},"Forms":{"Events":[{"Id":"7196724513","Type":"IssuesEvent","CreatedAt":"2018-02-05T05:12:33","Actor":"Nijamudeen-Mohamed","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/1796","RelatedDescription":"Opened issue \"TabbedPage issue while tapping multiple times\" (#1796) at xamarin/Xamarin.Forms","RelatedBody":"Bug report best practices: https://github.com/xamarin/Xamarin.Forms/wiki/Submitting-Issues\r\n\r\n### Description\r\nPlacing a Customs control in a tabbed page and keep on tapping (different points around 100+ taps) on Custom view (child)  exception thrown and applications crashes.\r\n\r\nWe suspect that it was an Android framework issue and the stack trace implies the same.\r\n\r\nhttps://issuetracker.google.com/issues/36931456\r\n\r\nhttps://github.com/chrisbanes/PhotoView/issues/31\r\n\r\n### Steps to Reproduce\r\nCreate a tab page with 3 tabs\r\nPlace any user interactive control (Eg: SfSchedule).\r\nTap the control  (different points around 100+ taps).\r\n\r\nStack Trace while tapping the application\r\nJava.Lang.IllegalArgumentException: pointerIndex out of range\r\n\r\n01-26 11:05:20.736 D/Mono    (32399): DllImport attempting to load: '/system/lib/liblog.so'.\r\n01-26 11:05:20.736 D/Mono    (32399): DllImport loaded library '/system/lib/liblog.so'.\r\n01-26 11:05:20.736 D/Mono    (32399): DllImport searching in: '/system/lib/liblog.so' ('/system/lib/liblog.so').\r\n01-26 11:05:20.736 D/Mono    (32399): Searching for '__android_log_print'.\r\n01-26 11:05:20.736 D/Mono    (32399): Probing '__android_log_print'.\r\n01-26 11:05:20.736 D/Mono    (32399): Found as '__android_log_print'.\r\n01-26 11:05:20.743 I/MonoDroid(32399): UNHANDLED EXCEPTION:\r\n01-26 11:05:20.777 I/MonoDroid(32399): Java.Lang.IllegalArgumentException: pointerIndex out of range\r\n01-26 11:05:20.777 I/MonoDroid(32399):   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw () [0x0000c] in <657aa8fea4454dc898a9e5f379c58734>:0 \r\n01-26 11:05:20.777 I/MonoDroid(32399):   at Java.Interop.JniEnvironment+InstanceMethods.CallNonvirtualBooleanMethod (Java.Interop.JniObjectReference instance, Java.Interop.JniObjectReference type, Java.Interop.JniMethodInfo method, Java.Interop.JniArgumentValue* args) [0x00089] in <54816278eed9488eb28d3597fecd78f8>:0 \r\n01-26 11:05:20.777 I/MonoDroid(32399):   at Java.Interop.JniPeerMembers+JniInstanceMethods.InvokeVirtualBooleanMethod (System.String encodedMember, Java.Interop.IJavaPeerable self, Java.Interop.JniArgumentValue* parameters) [0x0005d] in <54816278eed9488eb28d3597fecd78f8>:0 \r\n01-26 11:05:20.777 I/MonoDroid(32399):   at Android.Views.ViewGroup.OnInterceptTouchEvent (Android.Views.MotionEvent ev) [0x00031] in <28e323a707a2414f8b493f6d4bb27c8d>:0 \r\n01-26 11:05:20.777 I/MonoDroid(32399):   at Xamarin.Forms.Platform.Android.AppCompat.FormsViewPager.OnInterceptTouchEvent (Android.Views.MotionEvent ev) [0x00000] in D:\\agent\\_work\\1\\s\\Xamarin.Forms.Platform.Android\\AppCompat\\FormsViewPager.cs:26 \r\n01-26 11:05:20.777 I/MonoDroid(32399):   at Android.Views.ViewGroup.n_OnInterceptTouchEvent_Landroid_view_MotionEvent_ (System.IntPtr jnienv, System.IntPtr native__this, System.IntPtr native_ev) [0x0000f] in <28e323a707a2414f8b493f6d4bb27c8d>:0 \r\n01-26 11:05:20.777 I/MonoDroid(32399):   at (wrapper dynamic-method) System.Object:86d9ec6a-643b-4c86-8767-b306c0996837 (intptr,intptr,intptr)\r\n01-26 11:05:20.777 I/MonoDroid(32399):   --- End of managed Java.Lang.IllegalArgumentException stack trace ---\r\n01-26 11:05:20.777 I/MonoDroid(32399): java.lang.IllegalArgumentException: pointerIndex out of range\r\n01-26 11:05:20.777 I/MonoDroid(32399):  at android.view.MotionEvent.nativeGetAxisValue(Native Method)\r\n01-26 11:05:20.777 I/MonoDroid(32399):  at android.view.MotionEvent.getX(MotionEvent.java:2136)\r\n01-26 11:05:20.777 I/MonoDroid(32399):  at android.support.v4.view.ViewPager.onInterceptTouchEvent(ViewPager.java:2064)\r\n01-26 11:05:20.777 I/MonoDroid(32399):  at md5270abb39e60627f0f200893b490a1ade.FormsViewPager.n_onInterceptTouchEvent(Native Method)\r\n01-26 11:05:20.777 I/MonoDroid(32399):  at md5270abb39e60627f0f200893b490a1ade.FormsViewPager.onInterceptTouchEvent(FormsViewPager.java8)\r\n01-26 11:05:20.777 I/MonoDroid(32399):  at android.view.ViewGroup.dispatchTouchEvent(ViewGroup.java:2212)\r\n01-26 11:05:20.777 I/MonoDroid(32399):  at android.view.ViewGroup.dispatchTransformedTouchEvent(ViewGroup.java:2669)\r\n01-26 11:05:20.777 I/MonoDroid(32399):  at android.view.ViewGroup.dispatchTouchEvent(ViewGroup.java:2358)\r\n01-26 11:05:20.777 I/MonoDroid(32399):  at md5b60ffeb829f638581ab2bb9b1a7f4f3f.VisualElementRenderer_1.n_dispatchTouchEvent(Native Method)\r\n01-26 11:05:20.777 I/MonoDroid(32399):  at md5b60ffeb829f638581ab2bb9b1a7f4f3f.VisualElementRenderer_1.dispatchTouchEvent(VisualElementRenderer_1.java:64)\r\n\r\n### Expected Behavior\r\nTap must be handled between child and parent.\r\n\r\n### Actual Behavior\r\nApp crashing.\r\n\r\n### Basic Information\r\n- Version with issue: Xamarin 2.4.0\r\n- Last known good version: Android 4.1+\r\n- Platform Target Frameworks: VS 2015\r\n- Android: 4.1 above \r\n\r\n### Reproduction Link\r\nhttps://issuetracker.google.com/issues/36931456 \r\n"},{"Id":"7196058318","Type":"IssuesEvent","CreatedAt":"2018-02-04T23:18:07","Actor":"timrisi","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/1795","RelatedDescription":"Opened issue \"Crashing in Xamarin.Forms.Platform.iOS.LabelRenderer.UpdateText ()\" (#1795) at xamarin/Xamarin.Forms","RelatedBody":"### Description\r\n\r\nI posted on the XF forums about the issue (https://forums.xamarin.com/discussion/120074/crashing-in-xamarin-forms-platform-ios-labelrenderer-updatetext) but haven't had any responses yet, and it looks like a bug in Forms itself, not my code, so moving over to here.\r\n\r\nI've been using XF 2.3.4.270 for quite a while now. With the last update, I finally updated ot a newer version (2.5.0.121934) so I could use the UseSafeAreas calls to support the iPhone X screen.. Everything seemed to be working fine in beta, and I released the update to the wild on iOS. Since releasing the update, I've started having reports trickle in from various users about the app crashing frequently. I never had 2 users reporting the exact same instance causing the crash, so it took quite a while to track down what was happening.\r\n\r\nI finally figured out the sequence in app to make it crash (and why the reports differed so much), and started trying to find the cause. Debugging the app from VSfM gave me a rather unhelpful System.NullReferenceException on: UIApplication.Main (args, null, \"AppDelegate\");\r\n\r\nAfter turning on \"Show external symbols\" for debugging I was finally able to get a more useful stack trace of:\r\n\r\nXamarin.Forms.Platform.iOS.LabelRenderer.UpdateText() in \r\nXamarin.Forms.Platform.iOS.LabelRenderer.OnElementPropertyChanged(Xamarin.Forms.Label sender, System.ComponentModel.PropertyChangedEventArgs e) in \r\nXamarin.Forms.BindableObject.OnPropertyChanged(string propertyName) in D:\\agent\\_work\\1\\s\\Xamarin.Forms.Core\\BindableObject.cs:138\r\nXamarin.Forms.Element.OnPropertyChanged(string propertyName) in D:\\agent\\_work\\1\\s\\Xamarin.Forms.Core\\Element.cs:401\r\nXamarin.Forms.BindableObject.SetValueActual(Xamarin.Forms.BindableProperty property, Xamarin.Forms.BindableObject.BindablePropertyContext context, string value, bool currentlyApplying, Xamarin.Forms.Internals.SetValueFlags attributes, bool silent) in D:\\agent\\_work\\1\\s\\Xamarin.Forms.Core\\BindableObject.cs:594\r\nXamarin.Forms.BindableObject.SetValueCore(Xamarin.Forms.BindableProperty property, string value, Xamarin.Forms.Internals.SetValueFlags attributes, Xamarin.Forms.BindableObject.SetValuePrivateFlags privateAttributes) in D:\\agent\\_work\\1\\s\\Xamarin.Forms.Core\\BindableObject.cs:391\r\nXamarin.Forms.BindingExpression.ApplyCore(SquadBuilder.Pilot sourceObject, Xamarin.Forms.Label target, Xamarin.Forms.BindableProperty property, bool fromTarget) in D:\\agent\\_work\\1\\s\\Xamarin.Forms.Core\\BindingExpression.cs:174\r\nXamarin.Forms.BindingExpression.Apply(bool fromTarget) in D:\\agent\\_work\\1\\s\\Xamarin.Forms.Core\\BindingExpression.cs:56\r\nXamarin.Forms.BindingExpression.BindingExpressionPart.<PropertyChanged>b__47_0() in D:\\agent\\_work\\1\\s\\Xamarin.Forms.Core\\BindingExpression.cs:547\r\nFoundation.NSAsyncActionDispatcher.Apply() in /Users/builder/data/lanes/5665/db807ec9/source/xamarin-macios/src/Foundation/NSAction.cs:163\r\nUIKit.UIApplication.UIApplicationMain() in \r\nUIKit.UIApplication.Main(string[] args, System.IntPtr principal, System.IntPtr delegate) in /Users/builder/data/lanes/5665/db807ec9/source/xamarin-macios/src/UIKit/UIApplication.cs:79\r\nUIKit.UIApplication.Main(string[] args, string principalClassName, string delegateClassName) in /Users/builder/data/lanes/5665/db807ec9/source/xamarin-macios/src/UIKit/UIApplication.cs:63\r\nSquadBuilder.iOS.Application.Main(string[] args) in /Users/tim/Projects/AuroraSquadBuilder/iOS/Main.cs:16\r\nThe app itself is open sourced now, so I can share the code leading up to the crash, as well as the sequence of events to cause it. I created an imgur album (http://imgur.com/a/tUNCz) outlining the steps to get the app to crash, since it's a lot easier to explain with images showing what to do.\r\n\r\nOn the main squadron page where you can see the ListView of all the pilots in that squadron, it shows a string with all of the upgrades equipped on each pilot in the list view cell for that pilot. My best guess is it's something to do with that being updated from having no upgrades to adding the first one, but I really can't say for sure. It's also notable that if you take an existing squadron with multiple pilots (for instance, adding multiple pilots, then backing all the way out to the list of all squadrons, then going back into the same squadron and equipping upgrades on the first pilot in the list), it works fine. It's only crashing when you add multiple pilots, then go back to the first and try to add upgrades all while viewing the one squadron.\r\n\r\nWhen the upgrade from the upgrades list is selected, it sends a message to the MessagingCenter, which is subscribed to at line 67 of PilotViewModel.cs (http://github.com/timrisi/AuroraSquadBuilder/blob/v1.3.2/SquadBuilder/ViewModel/Squadron/PilotViewModel.cs#L64). It makes it htrough the whole lambda, unsubscribes, then crashes somewhere after that.\r\n\r\nCurrently on VSfM 7.3.3 (build 7), Mono 5.4.1.7, XI 11.6.1.4. It crashes like this on any version of XF from 2.4.0.280 onwards (I updated originally to the latest version of 2.5.0). If I revert back to 2.3.4.270 (and remove the UseSafeAreas calls) it works just fine. Updating to a newer version again, even if I load back up the last version of my app and simply update the XF version to 2.5.0.x with no other changes, it starts crashing the same way.\r\n\r\nI downloaded the source code for XF and built it locally, then ran my project tareting that instead of the nuget packages. App crashes at github.com/xamarin/Xamarin.Forms/blob/master/Xamarin.Forms.Platform.iOS/Renderers/LabelRenderer.cs#L287\r\n\r\nControl.Text = (string)values[1];\r\n\r\nControl in this case is null. Anyone have any idea what's going on? (Just got it all built and ran, so haven't had the chance to dig beyond that, and it's late so I'm off to bed. Will try to dig more tomorrow).\r\n\r\nI thought it might be related to my use of Xlabs.Forms for some pieceS (mostly MVVM stuff) so I removed the nuget packages and replaced them with my own lightweight classes, but the issue still persists.\r\n\r\n### Steps to Reproduce\r\n\r\nSteps are outlined in an imgur album to include screenshots: http://imgur.com/a/tUNCz. \r\n\r\nIf you perform the same steps in an existing list (skip creating a new list and simply select an existing one with multiple pilots from the first page, then select the first pilot in the list and try to change upgrades) it works fine with no crash.  It only crashes with a new list.\r\n\r\nIt also works fine if you add pilots one at a time and equip them with upgrades before adding the next pilot.  It only crashes when adding multiple pilots in a new list, then going back to modify upgrades on the first one.\r\n\r\n### Expected Behavior\r\n\r\nApp does not crash\r\n\r\n### Actual Behavior\r\n\r\nApp crashes\r\n\r\n### Basic Information\r\n\r\n- Version with issue:  Anything later than 2.3.4.270 (So 2.4.x and on.  Currently using 2.5.0.121934)\r\n- Last known good version: 2.3.4.270\r\n- IDE:  Visual Studio/Visual Studio for Mac\r\n- Platform Target Frameworks: <!-- All that apply -->\r\n  - iOS:  Deployment target 8.0.  Testing mainly on iOS 11 (but also happens on earlier iOS).\r\n  - Android: <!-- The version of the Android SDK you are compiling against, e.g. 7.1 --> \r\n  - UWP:  <!-- The version of the UWP SDK you are compiling against, e.g. 16299 --> \r\n- Android Support Library Version: <!-- if applicable -->\r\n- Nuget Packages:\r\n- Affected Devices:\r\n\r\n### Screenshots\r\n\r\nhttp://imgur.com/a/tUNCz\r\n\r\n### Reproduction Link\r\n\r\nhttp://github.com/timrisi/AuroraSquadBuilder\r\n"},{"Id":"7196012123","Type":"IssuesEvent","CreatedAt":"2018-02-04T22:49:28","Actor":"EmilAlipiev","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/1587","RelatedDescription":"Closed issue \"UWP: Xamarin.Forms targets have been imported multiple times\" (#1587) at xamarin/Xamarin.Forms","RelatedBody":"### Description\r\n\r\n### Steps to Reproduce\r\n\r\n1. Install Xamarin forms version 2.5.0.122203 \r\n2. \r\n3. \r\n\r\n### Expected Behavior\r\nIt budilds without error\r\n### Actual Behavior\r\nWhen I build my UWP project I am getting error\r\n### Basic Information\r\n\r\n- Version with issue:\r\n- Last known good version:\r\n- IDE:VS 2017 pro 15.5.3\r\n- Platform Target Frameworks: <!-- All that apply --> \r\n  - UWP:  The version of the UWP SDK you are compiling against, 16299 min and target\r\n \r\n- Affected Devices: Local Machine\r\n \r\nI cant build UWP project after upgrading to latest xamarin forms packages. I am getting error as \r\n\r\n`C:\\Users\\User\\.nuget\\packages\\xamarin.forms\\2.5.0.122203\\build\\netstandard1.0\\Xamarin.Forms.targets(50,3): error XF001: Xamarin.Forms targets have been imported multiple times. Please check your project file and remove the duplicate import(s).`\r\n\r\nAccording to the path it has something to do with Xamarin forms. I am not using netstandard but using PCL111 profile.\r\n"},{"Id":"7195646236","Type":"PullRequestEvent","CreatedAt":"2018-02-04T19:13:52","Actor":"jfversluis","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/1794","RelatedDescription":"Closed pull request \"Feature/1663 entry maxlength\" (#1794) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\n\r\nImplementation of MaxLength on both the Entry as well as the Editor (by implementing it on the InputView) for all platforms supported today.\r\n\r\n### Bugs Fixed ###\r\n\r\n- N/A\r\n\r\n### API Changes ###\r\nAdded:\r\n - int InputView.MaxLength { get; set; } //Bindable Property, default value int.MaxValue\r\n\r\n### Behavioral Changes ###\r\n\r\nThere shouldn't be any behavioral changes by just upgrading. But they now have the ability to limit the input length of the Editor and Entry controls.\r\n\r\n### PR Checklist ###\r\n\r\n- [ ] Has tests (if omitted, state reason in description)\r\n- [ ] Rebased on top of master at time of PR\r\n- [x] Changes adhere to coding standard\r\n- [ ] Consolidate commits as makes sense\r\n"},{"Id":"7195637657","Type":"PullRequestEvent","CreatedAt":"2018-02-04T19:08:54","Actor":"jfversluis","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/1794","RelatedDescription":"Opened pull request \"Feature/1663 entry maxlength\" (#1794) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\n\r\nImplementation of MaxLength on both the Entry as well as the Editor (by implementing it on the InputView) for all platforms supported today.\r\n\r\n### Bugs Fixed ###\r\n\r\n- N/A\r\n\r\n### API Changes ###\r\nAdded:\r\n - int InputView.MaxLength { get; set; } //Bindable Property, default value int.MaxValue\r\n\r\n### Behavioral Changes ###\r\n\r\nThere shouldn't be any behavioral changes by just upgrading. But they now have the ability to limit the input length of the Editor and Entry controls.\r\n\r\n### PR Checklist ###\r\n\r\n- [ ] Has tests (if omitted, state reason in description)\r\n- [ ] Rebased on top of master at time of PR\r\n- [ ] Changes adhere to coding standard\r\n- [ ] Consolidate commits as makes sense\r\n"},{"Id":"7195628366","Type":"IssuesEvent","CreatedAt":"2018-02-04T19:03:33","Actor":"johnfredrick","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/1793","RelatedDescription":"Opened issue \"MSBuild task fails to copy Fody on VSTS Agent build\" (#1793) at xamarin/Xamarin.Forms","RelatedBody":"Bug report best practices: https://github.com/xamarin/Xamarin.Forms/wiki/Submitting-Issues\r\n\r\n### Description\r\nI'm traying to build the app every time I make a Check In to source control.\r\nThe build breaks when Realm Task tries to copy the Fody dll to Tools directory.\r\n###Goals\r\nMake continous integration of a Xamarin App.\r\n### Steps to Reproduce\r\n\r\n1. Create build definition within Visual Studio Team Services and try to build\r\n\r\n### Expected Behavior\r\nBuild completes sucessfully\r\n### Actual Behavior\r\nCopyRealmWeaver:\r\n  CopyRealmWeaver\r\n  Creating directory \"*Undefined*Tools\".\r\n1-Development\\packages\\Realm.Database.1.4.0\\build\\Realm.Database.targets(28,5): Error MSB3021: Unable to copy file \"d:\\a\\3\\s\\1-Development\\packages\\Realm.Database.1.4.0\\build\\..\\tools\\RealmWeaver.Fody.dll\" to \"*Undefined*Tools\\RealmWeaver.Fody.dll\". Illegal characters in path.\r\n\r\n\r\n"},{"Id":"7194808243","Type":"PullRequestEvent","CreatedAt":"2018-02-04T10:10:00","Actor":"MartinZikmund","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/1792","RelatedDescription":"Opened pull request \"Fixed the link to Xamarin.Forms nightly build on MyGet\" (#1792) at xamarin/Xamarin.Forms","RelatedBody":"Fixed the link to the Xamarin.Forms Nightly build on MyGet\r\n\r\n### Description of Change ###\r\n\r\nThe link for Nightly build of Xamarin.Forms pointed to `aspnetcore-dev` feed instead of `xamarinforms-ci` feed.\r\n\r\n### Bugs Fixed ###\r\n\r\n- The MyGet link for Nightly build of Xamarin.Forms was pointing to a non-existing location.\r\n\r\n### API Changes ###\r\n\r\nNone.\r\n\r\n### Behavioral Changes ###\r\n\r\nMyGet link now points to the `xamarinforms-ci` feed.\r\n\r\n### PR Checklist ###\r\n\r\n- [x] Has tests (if omitted, state reason in description)\r\n- [x ] Rebased on top of master at time of PR\r\n- [x] Changes adhere to coding standard\r\n- [x] Consolidate commits as makes sense\r\n"},{"Id":"7194671852","Type":"IssuesEvent","CreatedAt":"2018-02-04T08:22:14","Actor":"ravinderjangra","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/1507","RelatedDescription":"Closed issue \"Errors while building Xamarin.Forms From source code\" (#1507) at xamarin/Xamarin.Forms","RelatedBody":"### Description\r\nShowing Issue with Xamarin.Forms.Build.Tasks.XamlGTask\r\n\r\n### Steps to Reproduce\r\n1.  Get the latest code from official git and build\r\n\r\n### Expected Behavior\r\nIt should work \r\n\r\n### Actual Behavior\r\nBuild Log\r\n1>------ Build started: Project: Xamarin.Forms.Controls, Configuration: Debug Any CPU ------\r\n1>E:\\Project\\XF\\.nuspec\\Xamarin.Forms.targets(70,3): error MSB4062: The \"Xamarin.Forms.Build.Tasks.XamlGTask\" task could not be loaded from the assembly E:\\Project\\XF\\.nuspec\\Xamarin.Forms.Build.Tasks.dll. Could not load file or assembly 'file:///E:\\Project\\XF\\.nuspec\\Xamarin.Forms.Build.Tasks.dll' or one of its dependencies. The system cannot find the file specified. Confirm that the <UsingTask> declaration is correct, that the assembly and all its dependencies are available, and that the task contains a public class that implements Microsoft.Build.Framework.ITask.\r\n1>Done building project \"Xamarin.Forms.Controls.csproj\" -- FAILED.\r\n========== Build: 0 succeeded, 1 failed, 6 up-to-date, 0 skipped ==========\r\n  "}],"ResultType":"GitHubEvent"},"Macios":{"Events":[{"Id":"7196437757","Type":"IssuesEvent","CreatedAt":"2018-02-05T02:56:45","Actor":"GouriKumari","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/issues/3389","RelatedDescription":"Opened issue \"[XI]MetalPerformance Shaders test failures on an iPadAir \" (#3389) at xamarin/xamarin-macios","RelatedBody":"### Steps to Reproduce\r\n\r\n1. Build and Execute monotouch-test on an iPad Air 8.4 device\r\n\r\n### Expected Behavior\r\nAll tests pass\r\n\r\n### Actual Behavior\r\n[FAIL] KernelTest.MPSKernelCopyTest : System.Exception : Could not initialize an instance of the type 'MetalPerformanceShaders.MPSKernel': the native 'initWithDevice:' method returned nil.\r\n\t[FAIL] KernelTest.MPSRnnImageInferenceLayerCopyTest : System.Exception : Could not initialize an instance of the type 'MetalPerformanceShaders.MPSRnnImageInferenceLayer': the native 'initWithDevice:rnnDescriptor:' method returned nil.\r\n\t[FAIL] KernelTest.MPSRnnMatrixInferenceLayerTest : System.Exception : Could not initialize an instance of the type 'MetalPerformanceShaders.MPSRnnMatrixInferenceLayer': the native 'initWithDevice:rnnDescriptor:' method returned nil.\r\n\t[FAIL] MPSImageHistogramEqualizationTest.Constructors : System.Exception : Could not initialize an instance of the type 'MetalPerformanceShaders.MPSImageHistogramEqualization': the native 'initWithDevice:histogramInfo:' method returned nil.\r\n\t[FAIL] MPSImageHistogramSpecificationTest.Constructors : System.Exception : Could not initialize an instance of the type 'MetalPerformanceShaders.MPSImageHistogramSpecification': the native 'initWithDevice:histogramInfo:' method returned nil.\r\n\t[FAIL] MPSImageHistogramTest.Constructors : System.Exception : Could not initialize an instance of the type 'MetalPerformanceShaders.MPSImageHistogram': the native 'initWithDevice:histogramInfo:' method returned nil.\r\n\r\n### Environment\r\n\r\nObserved on both d15-6 and master build\r\nd15-6: Build Revision: 5b1f71685029d90d5e626fdbf6e38e429e15cff0\r\n\r\nmaster: bec116c273ab119c648522a28c3f650881ed4d9e \r\n\r\n### Build Logs\r\n\r\nhttp://xqa.blob.core.windows.net/gist/report-81276d9069974b2ca22fd8ead58b2e60.txt"},{"Id":"7192176548","Type":"IssuesEvent","CreatedAt":"2018-02-03T00:51:57","Actor":"dalexsoto","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/xamarin-macios/issues/3383","RelatedDescription":"Closed issue \"`SceneKit.SCNPhysicsWorld.ConvexSweepTest` method doesn't work properly\" (#3383) at xamarin/xamarin-macios","RelatedBody":"### Steps to Reproduce\r\n\r\n1. Download a project\r\n2. Open a `Fox2.Shared/Character.cs` file and look at the line 787. Put a breakpoint to the line 789.\r\n3. Run the project\r\n4. Run forward using control on the bottom left corner. \r\n\r\n### Expected Behavior\r\nThe `ConvexSweepTest` method return collision contacts.\r\n\r\n### Actual Behavior\r\nThe `ConvexSweepTest` method doesn't return anything. Output is empty.\r\n\r\n### Environment\r\n\r\n- https://gist.github.com/mykyta-bondarenko-gl/eb7a5511ea20a0de790cb582da3b0768\r\n\r\n### Build Logs\r\n\r\n- Device log (when method should returns collisions)\r\n https://gist.github.com/mykyta-bondarenko-gl/3d8d97263787d6503ea008bb6272f286\r\n\r\n### Frequency of Reproduction\r\n\r\nHappens every time\r\n\r\n### Example Project \r\n\r\n[Link to the project](https://github.com/mykyta-bondarenko-gl/private-samples/tree/fox-2-scenekit/ios11/Fox2)\r\n"},{"Id":"7191996383","Type":"PullRequestEvent","CreatedAt":"2018-02-02T23:36:09","Actor":"dalexsoto","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/3388","RelatedDescription":"Opened pull request \"[generator] Teach generator about WrapAttribute on Getters and Setters\" (#3388) at xamarin/xamarin-macios","RelatedBody":"https://bugzilla.xamarin.com/show_bug.cgi?id=57870\r\n\r\n`WrapAttribute` can now be used in property getters and setters,\r\nthis allows to Wrap virtually anything the way you need, for example\r\nsmart enums, consider the following API definition:\r\n\r\n```csharp\r\n// Smart enum.\r\nenum PersonRelationship {\r\n\t[Field (null)]\r\n\tNone,\r\n\r\n\t[Field (\"FMFather\", \"__Internal\")]\r\n\tFather,\r\n\r\n\t[Field (\"FMMother\", \"__Internal\")]\r\n\tMother\r\n}\r\n```\r\n\r\n```csharp\r\n// Property definition.\r\n\r\n[Export (\"presenceType\")]\r\nNSString _PresenceType { get; set; }\r\n\r\nPersonRelationship PresenceType {\r\n\t[Wrap (\"PersonRelationshipExtensions.GetValue (_PresenceType)\")]\r\n\tget;\r\n\t[Wrap (\"_PresenceType = value.GetConstant ()\")]\r\n\tset;\r\n}\r\n```"},{"Id":"7191228780","Type":"IssuesEvent","CreatedAt":"2018-02-02T20:10:56","Actor":"dalexsoto","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/xamarin-macios/issues/3371","RelatedDescription":"Closed issue \"[XI] ImageInverterExtn app displays a blank app on simulator \" (#3371) at xamarin/xamarin-macios","RelatedBody":"### Steps to Reproduce\r\n\r\n 1. Download and open https://developer.xamarin.com/samples/monotouch/ios8/ImageInverter/ImageInverter.zip\r\n2. Set iOS Deployment target to 11.0 or higher in both main and extension app\r\n3. Set Extension App as startup project and rebuild the project\r\n4. Deploy it in iOS simulator \r\n5. Open ImageInverter app in iOS simulator \r\n6. Enable ImageInverterExtn App in it\r\n\r\n\r\n### Expected Behavior\r\nImageInverterExtn App should launch in iOS Simulator and Image should\r\nbe Inverted\r\n \r\n### Actual Behavior\r\nBlank screen is displayed when ImageInverterExtn loaded \r\nScreencast: https://www.screencast.com/t/BweketBj\r\n\r\n### Environment\r\n\r\nVSFM:  https://gist.github.com/parasAmbhore/a5207b50c330667ed6acd6393e3c5def\r\nVS for windows: https://gist.github.com/parasAmbhore/e51d16f2541d49850a0a5277806cce00\r\n\r\n### Build Logs\r\n\r\n[VSFM_logs.zip](https://github.com/xamarin/xamarin-macios/files/1683392/VSFM_logs.zip)\r\n\r\n\r\n### Regression: from d15-4\r\nThis issue was reported in VSTS  against VS for windows for d15-5, BUGID https://devdiv.visualstudio.com/DevDiv/_workitems/edit/510257. Since it is reproducible in both VSFMac and VS for Windows filing it against XI. \r\n"},{"Id":"7191142098","Type":"PullRequestEvent","CreatedAt":"2018-02-02T19:50:52","Actor":"spouliot","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/3384","RelatedDescription":"Merged pull request \"Bump mono to 2010-10 head\" (#3384) at xamarin/xamarin-macios","RelatedBody":"This fix https://github.com/xamarin/xamarin-macios/issues/3241 on master (already bumped on 15.6)\n\nCommit list for mono/mono:\n\n* mono/mono@38502063cac Revert \"[mini] Align stack when resuming to catch handler\" (#6744)\n* mono/mono@3c3e692887a Bump linker\n\nDiff: https://github.com/mono/mono/compare/ab882c0c3decfaa2e2d71b85404ce35328a2a99d...38502063cac0b9c258af2c59dce9cd2d0a12b4d1"},{"Id":"7191142093","Type":"IssuesEvent","CreatedAt":"2018-02-02T19:50:52","Actor":"spouliot","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/xamarin-macios/issues/3241","RelatedDescription":"Closed issue \"link sdk test crashes on release/device in RuntimeWrappedException\" (#3241) at xamarin/xamarin-macios","RelatedBody":"### Steps to Reproduce\r\n\r\n```shell\r\nmake run-ios-dev32-linksdk -C tests CONFIG=Release\r\n```\r\n\r\n### Expected Behavior\r\n\r\nNo crash\r\n\r\n### Actual Behavior\r\n\r\nCrash report: https://gist.github.com/rolfbjarne/02653b55d353fa27a43b9aa5a5dc83e8\r\n\r\nTerminal doesn't show anything interesting: https://gist.github.com/rolfbjarne/0850220eca6bc18632882eca27c23eee\r\n### Environment\r\n\r\nThis happens both with master and d15-6, but only in release mode on device."},{"Id":"7191101733","Type":"PullRequestEvent","CreatedAt":"2018-02-02T19:41:47","Actor":"chamons","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/3387","RelatedDescription":"Opened pull request \"[mmp] Add stripping of 32-bit dylibs to work with new App Store restrictions\" (#3387) at xamarin/xamarin-macios","RelatedBody":"- https://github.com/xamarin/xamarin-macios/issues/3367\r\n- Required some test work that might be more obvious by themselves. We can squash when landing."}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"960308752409923584","CreatedAt":"2018-02-05T00:27:02+00:00","UserScreenname":"xamarinhq","Text":"#Xamarin's @lobrien explores the solar system with #ARKit and F#: https://t.co/0UXY2Lk1XB https://t.co/ChPi6XDAGH","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":13,"FavoriteCount":11,"RawContent":null},{"Id":"959520671754850304","CreatedAt":"2018-02-02T20:15:29+00:00","UserScreenname":"xamarinhq","Text":"Make deploying to an iOS or tvOS device easier with Wireless Deployment and our new Unlock Device Alert: https://t.co/DKgtjGzPfo","Source":"<a href=\"http://twitter.com\" rel=\"nofollow\">Twitter Web Client</a>","RetweetCount":46,"FavoriteCount":17,"RawContent":null},{"Id":"959469971301691392","CreatedAt":"2018-02-02T16:54:01+00:00","UserScreenname":"xamarinhq","Text":"Add beautiful charts to ANY app with #MicroCharts from guest blogger @aloisdeniel: https://t.co/VeqfS1vfIL https://t.co/qc6cGwoxhK","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":89,"FavoriteCount":26,"RawContent":null},{"Id":"959164072196526085","CreatedAt":"2018-02-01T20:38:29+00:00","UserScreenname":"xamarinhq","Text":"Just push playâ€”using Google Play on an Android Emulator: https://t.co/wl37sjNIjv https://t.co/kmW8uIDW80","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":39,"FavoriteCount":16,"RawContent":null},{"Id":"959109618067738624","CreatedAt":"2018-02-01T17:02:06+00:00","UserScreenname":"xamarinhq","Text":"Bring 3D Models to life in augmented reality with #UrhoSharp: https://t.co/0c8YDgfF2Z https://t.co/xYx6fUVhML","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":39,"FavoriteCount":9,"RawContent":null},{"Id":"958788443647152136","CreatedAt":"2018-01-31T19:45:53+00:00","UserScreenname":"xamarinhq","Text":"Help ensure a productive 2018 with #Xamarin developer events near you this February: https://t.co/9aPslPGW2O https://t.co/zRGM0lEoZe","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":21,"FavoriteCount":7,"RawContent":null},{"Id":"958747709963415552","CreatedAt":"2018-01-31T17:04:01+00:00","UserScreenname":"xamarinhq","Text":"Supercharge your Xamarin.Mac app startup time: https://t.co/JzwELyF3Tm https://t.co/xLDqS3Z9sI","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":50,"FavoriteCount":19,"RawContent":null},{"Id":"958386328797884416","CreatedAt":"2018-01-30T17:08:01+00:00","UserScreenname":"xamarinhq","Text":"Explore Augmented Reality for #XamarinAndroid with #ARCore, featuring motion tracking, plane detection, and more:â€¦ https://t.co/JOLj1szAol","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":34,"FavoriteCount":14,"RawContent":null},{"Id":"958065243565051904","CreatedAt":"2018-01-29T19:52:08+00:00","UserScreenname":"xamarinhq","Text":"Check out Android Emulator version 27.0.2, now featuring \"Quick Boot\" to launch the emulator in just a few seconds:â€¦ https://t.co/75XbYDGg8m","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":223,"FavoriteCount":119,"RawContent":null},{"Id":"958020024941334528","CreatedAt":"2018-01-29T16:52:27+00:00","UserScreenname":"xamarinhq","Text":"Build a meeting scheduling mobile app using #XamarinForms and the Microsoft Graph API: https://t.co/LsMgiFD20d https://t.co/QvuhUZfhAd","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":82,"FavoriteCount":27,"RawContent":null},{"Id":"957782606992543745","CreatedAt":"2018-01-29T01:09:02+00:00","UserScreenname":"xamarinhq","Text":"Making iOS 11 even easier with #XamarinForms: https://t.co/nIDGNXGuF1 https://t.co/6qXhuCMSDp","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":48,"FavoriteCount":17,"RawContent":null},{"Id":"957415179091873792","CreatedAt":"2018-01-28T00:49:01+00:00","UserScreenname":"xamarinhq","Text":"Learn how to publish to #Azure from #VS4Mac: https://t.co/wnNmElsQrM https://t.co/DdxYLvB9ap","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":34,"FavoriteCount":16,"RawContent":null},{"Id":"956935518746546177","CreatedAt":"2018-01-26T17:03:01+00:00","UserScreenname":"xamarinhq","Text":"Add large titles to your iOS 11 apps in this post from @conceptdev: https://t.co/RDyk6GDVUU https://t.co/WlylY4fcZS","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":19,"FavoriteCount":5,"RawContent":null},{"Id":"956616920408772610","CreatedAt":"2018-01-25T19:57:01+00:00","UserScreenname":"xamarinhq","Text":"Get your first look at the #Xamarin Android Device Manager Preview: https://t.co/4cTyPaFfMb https://t.co/uKkOHzbp3U","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":61,"FavoriteCount":35,"RawContent":null},{"Id":"956570118569496576","CreatedAt":"2018-01-25T16:51:03+00:00","UserScreenname":"xamarinhq","Text":"Our @XamarinU webinar on automating the lifecycle of your iOS, Android, Windows, and macOS apps with #VSAppCenter iâ€¦ https://t.co/XuCIwVEtIh","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":20,"FavoriteCount":12,"RawContent":null},{"Id":"956210745984856064","CreatedAt":"2018-01-24T17:03:02+00:00","UserScreenname":"xamarinhq","Text":"Don't miss our @XamarinU webinar tomorrow (1/25) on automating the lifecycle of your iOS, Android, Windows, and macâ€¦ https://t.co/eKFBikD0kM","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":34,"FavoriteCount":12,"RawContent":null},{"Id":"955887729816035328","CreatedAt":"2018-01-23T19:39:28+00:00","UserScreenname":"xamarinhq","Text":"Learn how to merge multiple resource dictionaries in the most recent stable release of #XamarinForms for even greatâ€¦ https://t.co/lYtHCJ9q5V","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":80,"FavoriteCount":33,"RawContent":null},{"Id":"955846589817479170","CreatedAt":"2018-01-23T16:56:00+00:00","UserScreenname":"xamarinhq","Text":"Native Android Facebook Authentication with Azure App Service https://t.co/DAcKpYLHe5","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":40,"FavoriteCount":11,"RawContent":null}]}},"RunOn":"2018-02-05T05:30:36.6041039Z","RunDurationInMilliseconds":3837}