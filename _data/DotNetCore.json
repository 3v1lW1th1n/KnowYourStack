{"Data":{"Blog":{"FeedItems":[{"Title":"Migrating your existing .NET application to the cloud? Tell us about it!","PublishedOn":"2017-12-05T18:14:46+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Hi everyone! The .NET team is conducting a survey to learn more about your approach for moving existing .NET applications to the cloud.  The survey should take less than 5 minutes to complete. Take...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/12/05/migrating-your-existing-net-application-to-the-cloud-tell-us-about-it/","RawContent":null},{"Title":"Announcing the Windows Compatibility Pack for .NET Core","PublishedOn":"2017-11-17T04:59:32+00:00","CommentsCount":73,"FacebookCount":0,"Summary":"Porting existing code to .NET Core used to be quite hard because the available API set was very small. In .NET Core 2.0, we already made this much easier, thanks to .NET Standard 2.0. Today,...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/16/announcing-the-windows-compatibility-pack-for-net-core/","RawContent":null},{"Title":"UPDATE – Microservices and Docker containers: Architecture, Patterns and Development guidance (Updated for .NET Core 2.0)","PublishedOn":"2017-11-16T22:00:06+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Nov. 15th 2017 update Earlier this year, we published this eBook/guide and sample application offering guidance for architecting microservices and Docker containers based applications. We have...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/16/update-microservices-and-docker-containers-architecture-patterns-and-development-guidance-updated-for-net-core-2-0/","RawContent":null},{"Title":"UPDATE – Web Applications with ASP.NET Core Architecture and Patterns guidance (Updated for ASP.NET Core 2)","PublishedOn":"2017-11-16T21:00:05+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"Nov. 15th 2017 update Earlier this year, we published an eBook/Guide and sample application offering guidance named Architecting Modern Web Applications with ASP.NET Core and Microsoft Azure. We have...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/16/update-web-applications-with-asp-net-core-architecture-and-patterns-guidance-updated-for-asp-net-core-2/","RawContent":null},{"Title":"Introducing Tensor for multi-dimensional Machine Learning and AI data","PublishedOn":"2017-11-15T22:00:18+00:00","CommentsCount":10,"FacebookCount":0,"Summary":"Overview Tensor is an exchange type for homogenous multi-dimensional data for 1 to N dimensions. The motivation behind introducing Tensor&#60;T&#62; is to make it easy for Machine Learning library...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/15/introducing-tensor-for-multi-dimensional-machine-learning-and-ai-data/","RawContent":null},{"Title":"Introducing Nullable Reference Types in C#","PublishedOn":"2017-11-15T20:00:47+00:00","CommentsCount":234,"FacebookCount":0,"Summary":"Today we released a prototype of a C# feature called &#8220;nullable reference types&#8220;, which is intended to help you find and fix most of your null-related bugs before they blow up at runtime....","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/15/nullable-reference-types-in-csharp/","RawContent":null},{"Title":"Announcing F# support for .NET Core and .NET Standard projects in Visual Studio","PublishedOn":"2017-11-15T19:00:49+00:00","CommentsCount":11,"FacebookCount":0,"Summary":"We&#8217;re pleased to announce that Visual Studio 2017 15.5 Preview 4 now supports F# projects targeting .NET Core, .NET Standard, and .NET Framework through the .NET Core SDK. Some of you have...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/15/announcing-f-support-for-net-core-and-net-standard-projects-in-visual-studio/","RawContent":null},{"Title":"Welcome to C# 7.2 and Span","PublishedOn":"2017-11-15T19:00:26+00:00","CommentsCount":29,"FacebookCount":0,"Summary":"C# 7.2 is the latest point release of C#, and adds a number of small but useful features. All the features are described in wonderful detail in the docs. Start with the overview, What&#8217;s new in...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/15/welcome-to-c-7-2-and-span/","RawContent":null},{"Title":".NET Core November 2017 Update","PublishedOn":"2017-11-15T05:25:23+00:00","CommentsCount":12,"FacebookCount":0,"Summary":"Today, we are releasing the .NET Core November Update. This includes .NET Core 1.0.8, 1.1.5 and 2.0.1 and .NET Core SDK 1.1.5 and 2.0.3. Details regarding the security issues addressed by this release...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/14/net-core-november-2017-update/","RawContent":null},{"Title":".NET Framework November 2017 Security and Quality Rollup","PublishedOn":"2017-11-15T03:54:36+00:00","CommentsCount":8,"FacebookCount":0,"Summary":"Today, we are releasing the November 2017 Security and Quality Rollup. Security This release contains no new security updates. The most recent .NET security updates were shipped with the September...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/14/net-framework-november-2017-security-and-quality-rollup/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"7044237283","Type":"PullRequestEvent","CreatedAt":"2017-12-31T20:25:44","Actor":"onovotny","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/93","RelatedDescription":"Opened pull request \"Add Humanizer\" (#93) at dotnet/home","RelatedBody":"Onboarding Humanizer: https://github.com/Humanizr/Humanizer/issues/682"},{"Id":"6946829856","Type":"PullRequestEvent","CreatedAt":"2017-12-05T18:08:42","Actor":"heiligerdankgesang","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/92","RelatedDescription":"Opened pull request \"Remove contact email from system.drawing.md\" (#92) at dotnet/home","RelatedBody":"Contact email is outdated. Mono-project site's community section has better, more up-to-date information."},{"Id":"6934052963","Type":"PullRequestEvent","CreatedAt":"2017-12-02T15:19:09","Actor":"rprouse","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/91","RelatedDescription":"Opened pull request \"Add NUnit to the .NET Foundation Projects\" (#91) at dotnet/home","RelatedBody":""},{"Id":"6872255902","Type":"PullRequestEvent","CreatedAt":"2017-11-17T22:01:26","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/90","RelatedDescription":"Merged pull request \"Add BenchmarkDotNet to README.md and project.json\" (#90) at dotnet/home","RelatedBody":""},{"Id":"6872252909","Type":"PullRequestEvent","CreatedAt":"2017-11-17T22:00:44","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/89","RelatedDescription":"Merged pull request \"New logo and SSL certificate for Peachpie\" (#89) at dotnet/home","RelatedBody":""},{"Id":"6868854916","Type":"PullRequestEvent","CreatedAt":"2017-11-17T09:04:03","Actor":"AndreyAkinshin","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/90","RelatedDescription":"Opened pull request \"Add BenchmarkDotNet to README.md and project.json\" (#90) at dotnet/home","RelatedBody":""},{"Id":"6816687850","Type":"IssuesEvent","CreatedAt":"2017-11-06T20:30:07","Actor":"Petermarcu","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/home/issues/88","RelatedDescription":"Closed issue \"File system watcher crash\" (#88) at dotnet/home","RelatedBody":"Not sure where to open this issue.\r\nI'm experiencing crashes since I migrated to .net core 2.0 while running my site.\r\nThe following is the exception and stack trace:\r\n```\r\nAn unhandled exception of type 'System.ArgumentException' occurred in System.Private.CoreLib.dll\r\nThe path is not of a legal form.\r\n\r\nSystem.Private.CoreLib.dll!System.IO.Path.GetFullPath(string path)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileSystemGlobbing.dll!Microsoft.Extensions.FileSystemGlobbing.InMemoryDirectoryInfo.InMemoryDirectoryInfo(string rootDir, System.Collections.Generic.IEnumerable<string> files, bool normalized)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileSystemGlobbing.dll!Microsoft.Extensions.FileSystemGlobbing.MatcherExtensions.Match(Microsoft.Extensions.FileSystemGlobbing.Matcher matcher, string rootDir, System.Collections.Generic.IEnumerable<string> files)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileSystemGlobbing.dll!Microsoft.Extensions.FileSystemGlobbing.MatcherExtensions.Match(Microsoft.Extensions.FileSystemGlobbing.Matcher matcher, string file)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileProviders.Physical.dll!Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.ReportChangeForMatchedEntries(string path)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileProviders.Physical.dll!Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.OnFileSystemEntryChange(string fullPath)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileProviders.Physical.dll!Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.OnRenamed(object sender, System.IO.RenamedEventArgs e)\tUnknown\tNo symbols loaded.\r\n \tSystem.IO.FileSystem.Watcher.dll!System.IO.FileSystemWatcher.NotifyRenameEventArgs(System.IO.WatcherChangeTypes action, string name, string oldName)\tUnknown\tNo symbols loaded.\r\n \tSystem.IO.FileSystem.Watcher.dll!System.IO.FileSystemWatcher.ParseEventBufferAndNotifyForEach(byte[] buffer)\tUnknown\tNo symbols loaded.\r\n \tSystem.IO.FileSystem.Watcher.dll!System.IO.FileSystemWatcher.ReadDirectoryChangesCallback(uint errorCode, uint numBytes, System.Threading.NativeOverlapped* overlappedPointer)\tUnknown\tNo symbols loaded.\r\n \tSystem.Private.CoreLib.dll!System.Threading._IOCompletionCallback.PerformIOCompletionCallback(uint errorCode, uint numBytes, System.Threading.NativeOverlapped* pOVERLAP)\tUnknown\tNo symbols loaded.\r\n```\r\n\r\nI'm not sure how to fix this. I can reproduce it although it's not easy since I think it has to do with timing..."},{"Id":"6797468573","Type":"PullRequestEvent","CreatedAt":"2017-11-01T23:04:17","Actor":"bfistein","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/89","RelatedDescription":"Opened pull request \"New logo and SSL certificate for Peachpie\" (#89) at dotnet/home","RelatedBody":""}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"6948315401","Type":"IssuesEvent","CreatedAt":"2017-12-05T23:41:57","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/50","RelatedDescription":"Closed issue \".Net Core ARM32 SDK availability\" (#50) at dotnet/announcements","RelatedBody":"Referencing #29.\r\n\r\nWill it be possible to : \r\n\r\na) Provide ARM32 builds for the SDK at its current state\r\nor\r\nb) Provide links on how to build the .Net Core SDK for ARM32?\r\n\r\nThe thing is I am planning to use it in a virtual environnement, through proot + qemu-arm-static. This way I would be able to build and, more importantly, run unit tests on ARM32. Another thing I am planning to do is to setup a build environnement on i686 through virtualisation as qemu doesn't seem to be able to emulate x86_64 on i686 (but arm32 does seem to work well enough).\r\n\r\nThank you in advance.\r\n\r\nSergio\r\n\r\n"},{"Id":"6944555922","Type":"IssuesEvent","CreatedAt":"2017-12-05T10:46:06","Actor":"tioduke","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/50","RelatedDescription":"Opened issue \".Net Core ARM32 SDK availability\" (#50) at dotnet/announcements","RelatedBody":"Will it be possible to : \r\n\r\na) Provide ARM32 builds for the SDK at its current state\r\nor\r\nb) Provide links on how to build the .Net Core SDK for ARM32?\r\n\r\nThe thing is I am planning to use it in a virtual environnement, through proot + qemu-arm-static. This way I would be able to build and, more importantly, run unit tests on ARM32. Another thing I am planning to do is to setup a build environnement on i686 through virtualisation as qemu doesn't seem to be able to emulate x86_64 on i686 (but arm32 does seem to work well enough).\r\n\r\nThank you in advance.\r\n\r\nSergio\r\n\r\n"},{"Id":"6886438076","Type":"IssuesEvent","CreatedAt":"2017-11-21T19:28:57","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/49","RelatedDescription":"Opened issue \".NET Core Alpine Image Ready for Testing\" (#49) at dotnet/announcements","RelatedBody":"# .NET Core Alpine Image Ready for Testing\r\n\r\nAn [Alpine](https://hub.docker.com/_/alpine/)-based Docker image is now available for .NET Core. Alpine is much smaller than Debian, which we have used for the .NET Core base image to date. There have been many requests for an Alpine image. We are pleased to make it available. Please check out [.NET Core Docker Alpine Production Sample (Preview)](https://github.com/dotnet/dotnet-docker-samples/blob/master/dotnetapp-prod-alpine-preview/README.md) to see examples of using this image.\r\n\r\nWe have added two new images:\r\n\r\n- `2.1-runtime-alpine`\r\n- `2.1-runtime-deps-alpine`\r\n\r\nAlpine support is part of the .NET Core 2.1 release. .NET Core 2.1 images are currently provided at the [microsoft/dotnet-nightly](https://hub.docker.com/r/microsoft/dotnet-nightly/) repo, including the new Alpine images. .NET Core 2.1 images will be promoted to the [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/) repo when .NET Core 2.1 is shipped as a Preview, expected to be early 2018.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet/dotnet-docker-nightly #500](https://github.com/dotnet/dotnet-docker-nightly/issues/500)\r\n\r\n## Details\r\n\r\n* [dotnet/dotnet-docker-nightly #480](https://github.com/dotnet/dotnet-docker-nightly/pull/480)\r\n* [dotnet/announcements #20](https://github.com/dotnet/announcements/issues/20)\r\n* [dotnet/dotnet-docker-samples #94](https://github.com/dotnet/dotnet-docker-samples/pull/94)\r\n\r\nThe primary goal of Alpine is very small deployments. We have been considering various design decisions to make .NET Core Alpine base images as small as possible to align with that. In this first iteration, we enabled [.NET Core 2.0 Globalization Invariant Mode](https://github.com/dotnet/announcements/issues/20) in order to reduce the default size of the image. This change reduced the image by ~30MB. You can see the reduction in size for .NET Core images relative to Debian in the following table.\r\n\r\n|2.1 Image|Debian|Alpine|\r\n|-----    |------|------|\r\n|`-deps`   |153MB (68MB compressed) |13.8 MB (6MB compressed)|\r\n|`-runtime`|222MB (96MB compressed) |82.5 (34MB compressed)|\r\n\r\nNote: The compressed size is what you will see in a [registry](https://hub.docker.com/r/microsoft/dotnet-nightly/tags/) and is the wire-size cost.\r\n\r\nWe are also considering saving more space by native-compiling fewer assemblies. .NET Core runtime assemblies are native-compiled with the [crossgen tool](https://github.com/dotnet/coreclr/blob/master/Documentation/building/crossgen.md) in the [Ready2Run format](https://github.com/dotnet/coreclr/blob/master/Documentation/botr/readytorun-overview.md). Native-compiled code delivers superior startup performance but at the cost of 2-3x larger files. We have the opportunity to compile less, skipping compiling assemblies in part or in whole. We believe that we can save at least another 10MB through compiling less without a material drop in performance. For scenarios that value size over startup or where wire cost is significant, it may be valuable to aggressively reduce the number/% of compilation.\r\n\r\nAlpine images are only available for .NET Core 2.1. At the current time, only Runtime images are available. We intend to offer SDK images at a later date.\r\n\r\nUse cases that cannot tolerate Globalization invariant mode can reset the `DOTNET_SYSTEM_GLOBALIZATION_INVARIANT` environment variable and install the ICU package. Please check out [.NET Core Docker Alpine Production Sample (Preview)](https://github.com/dotnet/dotnet-docker-samples/blob/master/dotnetapp-prod-alpine-preview/README.md) to see examples of using this image with and without Globalization Invariant Mode enabled.\r\n\r\n## Call to Action\r\n\r\nPlease test your workloads with the new Alpine image. In particular, we want to know if enabling .NET Core Globalization Invariant Mode is acceptable/appreciated.\r\n"}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"7044535333","Type":"PullRequestEvent","CreatedAt":"2018-01-01T03:23:28","Actor":"bbowyersmyth","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/15677","RelatedDescription":"Opened pull request \"Return StringBuilder back to cache when not making any string replacements\" (#15677) at dotnet/coreclr","RelatedBody":""},{"Id":"7043662893","Type":"PullRequestEvent","CreatedAt":"2017-12-31T10:32:06","Actor":"mikedn","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/15676","RelatedDescription":"Opened pull request \"Remove unnecessary boxing from RuntimeType.CacheEquals\" (#15676) at dotnet/coreclr","RelatedBody":"This was boxing the handle when calling `IntPtr.Equals(object)`."}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"7042910541","Type":"IssuesEvent","CreatedAt":"2017-12-30T20:01:34","Actor":"tfsjohan","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/8307","RelatedDescription":"Opened issue \"dotnet build resx error\" (#8307) at dotnet/cli","RelatedBody":"When building a project from the command line on OSX using the dotnet build tools I get this error:\r\n\r\n`error MSB3103: Invalid Resx file. Length cannot be less than zero.`\r\n\r\nThe resx files are not empty and they do work when building on Visual Studio 2017 on Windows. I can also build on Mac using Mono version of MSBuild without errors, but then the resources doesn't get build.\r\n\r\n## Expected  behavior\r\nSuccessful build and compiled resources.\r\n\r\n## Actual behavior\r\nError MSB3103: Invalid Resx file.\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n.NET Command Line Tools (2.0.0)\r\n\r\nProduct Information:\r\n Version:            2.0.0\r\n Commit SHA-1 hash:  cdcd1928c9\r\n\r\nRuntime Environment:\r\n OS Name:     Mac OS X\r\n OS Version:  10.13\r\n OS Platform: Darwin\r\n RID:         osx.10.12-x64\r\n Base Path:   /usr/local/share/dotnet/sdk/2.0.0/\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.4\r\n  Build    : 7f262f453d8c8479b9af91d34c013b3aa05bc1ff\r\n\r\n\r\n\r\n\r\n"},{"Id":"7042706061","Type":"IssuesEvent","CreatedAt":"2017-12-30T17:00:26","Actor":"eduherminio","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/8304","RelatedDescription":"Closed issue \"Tasks named \"AfterBuild\" & \"AfterPublish\" are apparently ignored\" (#8304) at dotnet/cli","RelatedBody":"Same behaviour observed when compiling with either VS or cli.\r\n\r\n## Steps to reproduce\r\n1. Create directory with these two files:\r\n\r\n- Trial.csproj file\r\n\r\n```\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.All\" Version=\"2.0.3\" />\r\n  </ItemGroup>\r\n\r\n  <Target Name=\"AfterBuild\" AfterTargets=\"Build\">\r\n    <Message Text=\"Hi World 1\" Importance=\"high\"></Message>\r\n  </Target>\r\n\r\n  <Target Name=\"AfterBuilds\" AfterTargets=\"Build\">\r\n    <Message Text=\"Hi World 2\" Importance=\"high\"></Message>\r\n  </Target>\r\n\r\n  <Target Name=\"AfterPublish\" AfterTargets=\"Build\">\r\n    <Message Text=\"Hi World 3\" Importance=\"high\"></Message>\r\n  </Target>\r\n\r\n  <Target Name=\"AfterPublishs\" AfterTargets=\"Build\">\r\n    <Message Text=\"Hi World 4\" Importance=\"high\"></Message>\r\n  </Target>\r\n\r\n</Project>\r\n```\r\n\r\n- Program.cs file (any)\r\n\r\n```\r\nnamespace Bug\r\n{\r\n    public class Program\r\n    {\r\n        public static void Main(string[] args)\r\n        {\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n2. `dotnet build`\r\n\r\n\r\n## Expected  behavior\r\n\r\nHi World 1\r\nHi World 2\r\nHi World 3\r\nHi World 4\r\n\r\n## Actual behavior\r\n\r\nHi World 2\r\nHi World 4\r\n\r\n## Environment data\r\n```\r\nHerramientas de la línea de comandos .NET (2.1.2)\r\n\r\nProduct Information:\r\n Version:            2.1.2\r\n Commit SHA-1 hash:  5695315371\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.16299\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.2\\\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.3\r\n  Build    : a9190d4a75f4a982ae4b4fa8d1a24526566c69df\r\n```\r\n\r\n\r\n\r\n\r\n\r\n\r\n"},{"Id":"7041572145","Type":"IssuesEvent","CreatedAt":"2017-12-29T22:10:36","Actor":"kasper3","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/8306","RelatedDescription":"Opened issue \"dotnet-nuget doesn't support verbosity\" (#8306) at dotnet/cli","RelatedBody":"```\r\ndotnet nuget push --source {uri} path.nupkg -v q\r\n\r\n# error: Unrecognized option '-v'\r\n\r\ndotnet nuget push --source {uri} path.nupkg --verbosity quiet\r\n\r\n# error: Unrecognized option '--verbosity'\r\n```\r\n\r\nHowever, \r\n\r\n```\r\ndotnet nuget --verbosity quiet push --source {uri} path.nupkg\r\n```\r\n\r\ndoesn't throw but doesn't quiet the verbosity either.\r\n\r\nThis breaks what --help quotes:\r\n\r\n```\r\nCommon options:\r\n  -v|--verbosity        Set the verbosity level of the command. Allowed values are q[uiet], m[inimal], n[ormal], d[etailed], and diag[nostic].\r\n  -h|--help             Show help.\r\n```\r\n\r\n### `--verbosity` is NOT a common option, only `--help` is"},{"Id":"7041394604","Type":"IssuesEvent","CreatedAt":"2017-12-29T20:39:33","Actor":"grbd","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/8305","RelatedDescription":"Opened issue \"issue with running dotnet cli within gentoo sandbox\" (#8305) at dotnet/cli","RelatedBody":"Hi,\r\nI've recently been trying to setup some ebuild scripts for gentoo\r\nfor the purposes of installing dotnet core 2.0 onto gentoo\r\n\r\nNormally the ebuild system within gentoo uses a **sandbox** system while compiling / installing\r\nNormally during the install phase the build is set to install it's content into a directory under /var/tmp/portage/\r\nthen on a follow up stage is copied across to the live system.\r\nhttps://wiki.gentoo.org/wiki/Project:Sandbox\r\n\r\nHowever it looks as if the sandboxing system and dotnet restore (or even running dotnet --version inside it)\r\ncauses the dotnet exe to hang.\r\n\r\n## Steps to reproduce\r\n\r\nunder gentoo\r\n```\r\nwget https://github.com/dotnet/corefx/archive/v2.0.4.tar.gz\r\ntar -xvzf v2.0.4.tar.gz\r\ncd corefx-2.0.4\r\nsandbox\r\n./init-tools.sh\r\n```\r\n\r\n## Expected  behavior\r\n\r\ndotnet should restore the packages based on BuildToolsVersion.txt\r\n\r\n## Actual behavior\r\n\r\n```\r\nInstalling dotnet cli...\r\nRestoring BuildTools version 2.0.0-servicing-02217-01...\r\n```\r\nThe dotnet cli tool hangs and requires a kill -9 to stop inside the sandbox\r\nI also tried upping the DotnetCLIVersion.txt to 2.1.3 but this had the same result\r\nI also tried calling dotnet --version directly within the sandbox using -v detailed but there was no returned output just another hang\r\n\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n```\r\n.NET Command Line Tools (2.0.0)\r\n\r\nProduct Information:\r\n Version:            2.0.0\r\n Commit SHA-1 hash:  cdcd1928c9\r\n\r\nRuntime Environment:\r\n OS Name:     gentoo\r\n OS Version:\r\n OS Platform: Linux\r\n RID:         linux-x64\r\n Base Path:   /root/test1/dotnet-runtime-test/corefx-2.0.4/Tools/dotnetcli/sdk/2.0.0/\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.0\r\n  Build    : e8b8861ac7faf042c87a5c2f9f2d04c98b69f28d\r\n```\r\n\r\nkernel version 4.14.8\r\n\r\n\r\n## workaround\r\n\r\nThere's a way to disable sandbox features per package under portage which I'll have to explore next.\r\nBut considering this affects **dotnet restore** this also impacts any future app creatd via dotnet (not just the install of dotnet core) installed under gentoo\r\n\r\nhttps://wiki.gentoo.org/wiki/Knowledge_Base:Overriding_environment_variables_per_package\r\n\r\n"},{"Id":"7040273168","Type":"IssuesEvent","CreatedAt":"2017-12-29T12:54:26","Actor":"eduherminio","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/8304","RelatedDescription":"Opened issue \"Tasks named \"AfterBuild\" & \"AfterPublish\" are apparently ignored\" (#8304) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\n1. Create directory with these two files:\r\n\r\n- Trial.csproj file\r\n\r\n```\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.All\" Version=\"2.0.3\" />\r\n  </ItemGroup>\r\n\r\n  <Target Name=\"AfterBuild\" AfterTargets=\"Build\">\r\n    <Message Text=\"Hi World 1\" Importance=\"high\"></Message>\r\n  </Target>\r\n\r\n  <Target Name=\"AfterBuilds\" AfterTargets=\"Build\">\r\n    <Message Text=\"Hi World 2\" Importance=\"high\"></Message>\r\n  </Target>\r\n\r\n  <Target Name=\"AfterPublish\" AfterTargets=\"Build\">\r\n    <Message Text=\"Hi World 3\" Importance=\"high\"></Message>\r\n  </Target>\r\n\r\n  <Target Name=\"AfterPublishs\" AfterTargets=\"Build\">\r\n    <Message Text=\"Hi World 4\" Importance=\"high\"></Message>\r\n  </Target>\r\n\r\n</Project>\r\n```\r\n\r\n- Program.cs file (any)\r\n\r\n```\r\nnamespace Bug\r\n{\r\n    public class Program\r\n    {\r\n        public static void Main(string[] args)\r\n        {\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n2. `dotnet build`\r\n\r\n\r\n## Expected  behavior\r\n\r\nHi World 1\r\nHi World 2\r\nHi World 3\r\nHi World 4\r\n\r\n## Actual behavior\r\n\r\nHi World 2\r\nHi World 4\r\n\r\n## Environment data\r\n```\r\nHerramientas de la línea de comandos .NET (2.1.2)\r\n\r\nProduct Information:\r\n Version:            2.1.2\r\n Commit SHA-1 hash:  5695315371\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.16299\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.2\\\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.3\r\n  Build    : a9190d4a75f4a982ae4b4fa8d1a24526566c69df\r\n```\r\n\r\n\r\n\r\n\r\n\r\n\r\n"},{"Id":"7039913064","Type":"IssuesEvent","CreatedAt":"2017-12-29T10:16:48","Actor":"HaythemJ","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/8296","RelatedDescription":"Closed issue \"node_modules folder is not published\" (#8296) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\ndotnet core 2.0\r\nVisual Studio 2017 15.5.1\r\nPublish Web Application\r\n\r\n## Expected  behavior\r\nfolder with name node_modules should be published like any other folder\r\n\r\n## Actual behavior\r\nfolder with name node_modules is not published\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n.NET Command Line Tools (2.1.3)\r\n\r\nProduct Information:\r\n Version:            2.1.3\r\n Commit SHA-1 hash:  a0ca411ca5\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.16299\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.3\\\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.4\r\n  Build    : 7f262f453d8c8479b9af91d34c013b3aa05bc1ff\r\n\r\nI have a Web Application where I put Javascript files under wwwroot/lib/vendors/ like below:\r\n\r\n![image](https://user-images.githubusercontent.com/9905290/34366814-94801e48-eaa1-11e7-9466-b44317333e25.png)\r\n\r\nWhen publishing the folder wwwroot/lib/vendors/node_modules is not published in the output folder which leads to missing libraries.\r\n\r\nIs there a way to force the publish of that folder?\r\n\r\n\r\n\r\n\r\n\r\n"}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"7042271379","Type":"IssuesEvent","CreatedAt":"2017-12-30T09:54:33","Actor":"Sergio0694","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/615","RelatedDescription":"Opened issue \"Missing binary/namespace from NuGet package in .NET Standard 2.0 library\" (#615) at dotnet/standard","RelatedBody":"Hello, I'm writing a .NET Standard 2.0 library and I'm having issues with a NuGet package I'd like to use (https://www.nuget.org/packages/Alea/) which I think is only supported for PCL libraries right now, and was wondering if there was a workaround available.\r\n\r\nI can install the package just fine, but its assemblies aren't visible in the drop-down list of the dependencies, and I don't have any of the namespaces in the project:\r\n\r\n![image](https://user-images.githubusercontent.com/10199417/34453242-1c63ff6e-ed4f-11e7-9bc0-dd75319bff04.png)\r\n\r\nI tried to manually link the net45 binaries by modifying the .csproj file for the library, like this:\r\n\r\n```xml\r\n<ItemGroup>\r\n    <Reference Include=\"Alea\">\r\n        <HintPath>..\\..\\..\\..\\.nugget.packages\\alea\\3.0.4\\lib\\net45\\alea.dll</HintPath>\r\n    </Reference>\r\n    <!-- Same for Alea.Parallel -->\r\n</ItemGroup>```\r\n\r\nAnd this actually **works perfectly fine** - I can use the library both from a .NET Core 2.0 application, and if I use it from a .NET Framework application (where those GPU libraries are originally supposed to work), I can also use the code from that package just fine.\r\n\r\nThe problem is that this workaround is only looking for the net45 binaries, and I'm not even sure they'd get installed in that path automatically regardless of the PC building the solution.\r\n\r\nMy question is:\r\n\r\n> Since the library itself works just fine in a .NET Standard 2.0 library, is there a way to (manually) make it so that these missing binaries are correctly linked/referenced and added to the project, so that their namespaces are available when coding in the project?\r\n\r\nSee the original Stack Overflow question here: https://stackoverflow.com/questions/48030077/alea-gpu-on-net-standard-2-0-will-this-workaround-work\r\n\r\nThank you for your help!\r\n"},{"Id":"7036730892","Type":"IssuesEvent","CreatedAt":"2017-12-28T10:30:41","Actor":"Styxxy","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/614","RelatedDescription":"Closed issue \"DocumentationFile outputs both to project root as in output folder (when only specifying filename)\" (#614) at dotnet/standard","RelatedBody":"When specifying only a filename in the DocumentationFile in the csproj, the generated xml documentation file will be outputted to both the root of the project as well as in the output path.\r\n\r\nGiven following csproj:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <TargetFrameworks>net47;netstandard2.0</TargetFrameworks>\r\n    <DocumentationFile>my_library.xml</DocumentationFile>\r\n  </PropertyGroup>\r\n\r\n</Project>\r\n```\r\n\r\nAnd we have one class in our class libary:\r\n```cs\r\nnamespace my_library\r\n{\r\n    /// <summary>\r\n    /// Test\r\n    /// </summary>\r\n    public class Test\r\n    {\r\n    }\r\n}\r\n```\r\n\r\nThe documentation file is generated in following directories:\r\n\r\n- project-root\r\n- project-root/bin/$(Configuration)/net47\r\n- project-root/bin/$(Configuration)/netstandard2.0\r\n\r\nIn the _old_ csproj format, the documentation file would be only outputted to the output folder."},{"Id":"7036717658","Type":"IssuesEvent","CreatedAt":"2017-12-28T10:26:06","Actor":"Styxxy","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/614","RelatedDescription":"Opened issue \"DocumentationFile outputs both to project root as in output folder (when only specifying filename)\" (#614) at dotnet/standard","RelatedBody":"When specifying only a filename in the DocumentationFile in the csproj, the generated xml documentation file will be outputted to both the root of the project as well as in the output path.\r\n\r\nGiven following csproj:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <TargetFrameworks>net47;netstandard2.0</TargetFrameworks>\r\n    <DocumentationFile>my_library.xml</DocumentationFile>\r\n  </PropertyGroup>\r\n\r\n</Project>\r\n```\r\n\r\nAnd we have one class in our class libary:\r\n```cs\r\nnamespace my_library\r\n{\r\n    /// <summary>\r\n    /// Test\r\n    /// </summary>\r\n    public class Test\r\n    {\r\n    }\r\n}\r\n```\r\n\r\nThe documentation file is generated in following directories:\r\n\r\n- project-root\r\n- project-root/bin/$(Configuration)/net47\r\n- project-root/bin/$(Configuration)/netstandard2.0\r\n\r\nIn the _old_ csproj format, the documentation file would be only outputted to the output folder."},{"Id":"7036709386","Type":"IssuesEvent","CreatedAt":"2017-12-28T10:23:14","Actor":"0xF6","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/612","RelatedDescription":"Closed issue \"Merge Library?\" (#612) at dotnet/standard","RelatedBody":"Now to merge.NET Standard libraries into one library?"},{"Id":"7035640765","Type":"IssuesEvent","CreatedAt":"2017-12-28T01:54:35","Actor":"rexcfnghk","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/613","RelatedDescription":"Opened issue \"Issue with referencing a .NET Standard 2.0 project with an classic ASP.NET project targeting .NET Framework 4.6.1\" (#613) at dotnet/standard","RelatedBody":"I refer to my original issue submitted to Autofac [here](https://github.com/autofac/Autofac.WebApi/issues/32). I originally thought it was an Autofac issue but turns out it is not as I can reproduce it without Autofac.\r\n\r\n# Summary\r\n`MissingMethodException` is thrown when resolving for a component through a delegate that returns a type defined in a .NET Standard 2.0 library, under the context of an classic ASP.NET Web API project.\r\n\r\n# Steps to reproduce\r\n1. Create two projects as follows\r\n    - A .NET Standard 2.0 library\r\n    - A classic ASP.NET Web API project targeting .NET Framework 4.6.1\r\n2. Define an interface and an implementing class pair in the .NET standard library as follows:\r\n```c#\r\npublic interface IFoo { void DoSomething(); }\r\n\r\npublic class Foo : IFoo\r\n{\r\n    private readonly HttpClient _httpClient;\r\n\r\n    public Foo(HttpClient httpClient) => _httpClient = httpClient;\r\n\r\n    public void DoSomething() { /* No-op */ }\r\n}\r\n```\r\n3. Reference the .NET Standard library from the ASP.NET Web API project\r\n4. Implement a dummy controller that takes `IFoo` as a constructor parameter, like:\r\n```c#\r\npublic class DummyController : ApiController\r\n{\r\n    private readonly IFoo _foo;\r\n\r\n    public DummyController() => _foo = new Foo(new HttpClient);\r\n\r\n    [HttpGet]\r\n    public IHttpActionResult Test() => Ok(\"a\");\r\n}\r\n```\r\nNote that I have a parameterless contructor for `DummyController`.\r\n6. Run the ASP.NET Web API application and visit `/api/dummy/test`.\r\n\r\n# Expected behaviour\r\n`\"a\"` is returned.\r\n\r\n# Actual behaviour\r\n`Autofac.Core.DependencyResolutionException` is thrown.\r\n\r\nStack trace:\r\n<pre>\r\nAn error has occurred.An error occurred when trying to create a controller of type 'DummyController'. Make sure that the controller has a parameterless public constructor.System.InvalidOperationException   at System.Web.Http.Dispatcher.DefaultHttpControllerActivator.Create(HttpRequestMessage request, HttpControllerDescriptor controllerDescriptor, Type controllerType)\r\n   at System.Web.Http.Controllers.HttpControllerDescriptor.CreateController(HttpRequestMessage request)\r\n   at System.Web.Http.Dispatcher.HttpControllerDispatcher.<SendAsync>d__1.MoveNext()An error has occurred.Method not found: 'Void AutofacNetStandara.Library.Foo..ctor(System.Net.Http.HttpClient)'.System.MissingMethodException   at AutofacNetStandard.Web.Controllers.DummyController..ctor()\r\n   at lambda_method(Closure )\r\n   at System.Web.Http.Dispatcher.DefaultHttpControllerActivator.Create(HttpRequestMessage request, HttpControllerDescriptor controllerDescriptor, Type controllerType)\r\n</pre>\r\n---------\r\n# Additional things I have tried\r\n1. Reference the same .NET Standard project from a .NET Framework 4.6.1 **Console** project, with the `Main` method initailizing `Foo`:\r\n```c#\r\nclass Program\r\n{\r\n    static void Main(string[] args)\r\n    {\r\n        var foo = new Foo(new HttpClient());\r\n\r\n        Console.ReadLine();\r\n    }\r\n}\r\n```\r\nNo runtime exceptions are thrown and `foo` variable is initialised correctly.\r\n2. Moving the initialising of `Foo._httpClient` to the default constructor of `Foo` and call the empty constructor from the web project instead, like:\r\n```c#\r\n// In the .NET Standard 2.0 library\r\npublic class Foo : IFoo\r\n{\r\n    private readonly HttpClient _httpClient;\r\n\r\n    public Foo() => _httpClient = new HttpClient();\r\n\r\n    public void DoSomething() { }\r\n}\r\n\r\n// In the ASP.NET project, targeting .NET 4.6.1\r\npublic class ValuesController : ApiController\r\n{\r\n    private readonly IFoo _foo;\r\n\r\n    public ValuesController() => _foo = new Foo();\r\n\r\n    [HttpGet]\r\n    public IHttpActionResult Test() => Ok(\"a\");\r\n}\r\n```\r\n`\"a\"` is returned as expected when visiting the route `/api/values/test`.\r\n"},{"Id":"7035205864","Type":"IssuesEvent","CreatedAt":"2017-12-27T21:53:55","Actor":"danmosemsft","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/608","RelatedDescription":"Closed issue \"Proposal: add GetEnvironmentVariableAsBool to netstandard\" (#608) at dotnet/standard","RelatedBody":"Currently the dotnet cli has a function which is located at: [src/Microsoft.DotNet.Cli.Utils/EnvironmentProvider.cs Line 106](https://github.com/dotnet/cli/blob/fffe3142ad8043743d83885df2166fd2f80dceca/src/Microsoft.DotNet.Cli.Utils/EnvironmentProvider.cs#L106)\r\n\r\nI think it would be useful to consider this functionality for inclusion into the `System.Environment` namespace.\r\n\r\nThis issue is to raise the idea and garner discussion. I do not believe it would conflict with anything already present, though I've not performed a thorough examination to prove it."}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"7044446923","Type":"PullRequestEvent","CreatedAt":"2018-01-01T01:08:23","Actor":"dotnet-maestro-bot","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/26109","RelatedDescription":"Opened pull request \"Update CoreClr, CoreSetup to preview1-26101-01, preview1-26031-02, respectively (master)\" (#26109) at dotnet/corefx","RelatedBody":""},{"Id":"7044226364","Type":"PullRequestEvent","CreatedAt":"2017-12-31T20:12:27","Actor":"karelz","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/26108","RelatedDescription":"Merged pull request \"Update CoreClr, CoreFx to preview1-26031-02, preview1-26031-02, respectively (master)\" (#26108) at dotnet/corefx","RelatedBody":""},{"Id":"7044225615","Type":"IssuesEvent","CreatedAt":"2017-12-31T20:11:24","Actor":"karelz","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/26101","RelatedDescription":"Closed issue \"[Windows] PictureBox Control does not consider and honor Alpha Channels correctly.\" (#26101) at dotnet/corefx","RelatedBody":"Earlier today I filed an ticket with Microsoft for this exact issue on VS2017 for their .NET Framework's 4.5.x, 4.6.x, and 4.7.x\r\n\r\nBasically if you got an PNG image with an alpha channel, which has an partially transparent glow, or shadow on it.\r\n\r\nBasically the following steps can be taken to reproduce this (reporting this here as well for .NET Core can have this fixed as well if desired):\r\n\r\n1. make a new forms project\r\n2. make a new form, frame style set to None, Transparent Color set to Control\r\n3. add an PictureBox and make it the same size of the control and make the background color to transparent.\r\n4. set that PictureBox to that image.\r\n5. Compile and run, you will see the image's transparency on partially transparent pixels get tossed (unless it is an .NET Framework specific thing or me using the wrong control for the RGBA images of mine).\r\n"},{"Id":"7044102753","Type":"PullRequestEvent","CreatedAt":"2017-12-31T17:52:26","Actor":"jkotas","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/26097","RelatedDescription":"Merged pull request \"Add test for calling Type.GetType via reflection\" (#26097) at dotnet/corefx","RelatedBody":"Regression test for https://github.com/dotnet/coreclr/issues/15662"},{"Id":"7043810809","Type":"PullRequestEvent","CreatedAt":"2017-12-31T13:16:54","Actor":"dotnet-maestro-bot","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/26108","RelatedDescription":"Opened pull request \"Update CoreClr to preview1-26031-02 (master)\" (#26108) at dotnet/corefx","RelatedBody":""},{"Id":"7043684737","Type":"IssuesEvent","CreatedAt":"2017-12-31T10:57:40","Actor":"morganbr","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/26107","RelatedDescription":"Opened issue \"Add WebAssembly CoreFX build architecture\" (#26107) at dotnet/corefx","RelatedBody":"As the [CoreRT](https://github.com/dotnet/corert/issues/4659) and [Mono](http://www.mono-project.com/news/2017/08/09/hello-webassembly/) WebAssembly experiments progress, we'll want to start running CoreFX libraries (starting with System.Console). As a first step, we need to add a new build architecture in the CoreFX repo that can produce architecture-specific packages.\r\n\r\nThis should allow running ```build wasm``` similarly to ```build x86```. To match the CoreRT repo, the build flavor should set ```OSGroup``` to ```WebAssembly``` and ```Platform``` to ```wasm```. In general, settings should match Unix outputs as the WebAssembly platform is pretty similar (but it should be possible to run the build on Windows).\r\n\r\nFor examples, https://github.com/dotnet/corert/commit/da8c27da9644cd658b906cfbd0f6c9997d91c355 added the flavor in CoreRT, https://github.com/dotnet/corert/commit/15ce20d82918bb04009a30e3dbcebce85b1dd80e rounded out native compilation for it, and  https://github.com/dotnet/corert/commit/3d25db5b1c010346bbc480a20646c80ea413492f fixed issues in it."}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"7044123931","Type":"IssuesEvent","CreatedAt":"2017-12-31T18:14:20","Actor":"jcouv","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/23982","RelatedDescription":"Closed issue \"Refactoring VB Member Name can be simplified (IDE0037) refactoring causes error BC30985\" (#23982) at dotnet/roslyn","RelatedBody":"**Version Used**: \r\nVS 2017 15.5.2\r\n**Steps to Reproduce**:\r\nWith the code below the IDE shows an information message and offers a refactoring (Use Inferred Member Name)\r\n```\r\nDim body As BlockSyntax = SyntaxFactory.Block(node.Statements.SelectMany(Function(s As VBSyntax.StatementSyntax) s.Accept(New MethodBodyVisitor(mSemanticModel, Me, withBlockTempVariableNames) With {.isIterator = isIterator})))\r\n```\r\n2. Accept the refactoring, new code below gets error BC30985\tName of field or property being initialized in an object initializer must start with '.'.\r\n```\r\n Dim body As BlockSyntax = SyntaxFactory.Block(node.Statements.SelectMany(Function(s As VBSyntax.StatementSyntax) s.Accept(New MethodBodyVisitor(mSemanticModel, Me, withBlockTempVariableNames) With {isIterator})))\r\n\r\n```\r\n\r\n**Expected Behavior**:\r\nDon't offer refactoring or don't give the error after accepting it\r\n**Actual Behavior**:\r\nRefactoring offered and when accepted you get an error."},{"Id":"7043446413","Type":"PullRequestEvent","CreatedAt":"2017-12-31T06:15:05","Actor":"CyrusNajmabadi","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/23984","RelatedDescription":"Opened pull request \"Add in a regex parser so that the IDE can provide services around regex editing.\" (#23984) at dotnet/roslyn","RelatedBody":"I was bored flying to MN and DC.  So i decided to scratch an itch that came up when discussing things over here: https://github.com/dotnet/csharplang/issues/371\r\n\r\nThis PR introduces support in the Roslyn IDE for improved features for users working with .Net regexes.  Specifically, the intent of this PR is to support the following (entirely optional) features around regexes:\r\n\r\n1. Colorization.  Users should be able to write a regex and have it colorized automatically, with a set of colors they can customize if they want.\r\n2. Highlighting.  Users should be able to place their cursor on something like a brace and have the matching brace highlighted.  This should extend to complex regex concepts (like backreferences) as well.\r\n3. Syntax errors.  Users should see syntax errors directly in the editor and error list without having to compile or run their program.\r\n4. Fixes.  Errors in the regex should come with potential fixes to address the problem immediately.\r\n5. Suggestions.  The IDE should be able to suggest completely safe refactorings to a users regex to simplify it.  For example, suggesting that ```\"(a)(b)\"``` be simplified directly to ```ab```.\r\n\r\nHowever, supporting regexes is complicated by how regexes are supported in the language today.  Specifically because of the complexity present in how VB and C# escape values in strings on top of how complex .net regexes are as well.  To deal with that, two new components have been added to Roslyn.\r\n  \r\nThe first subsystem is called the VirtualCharService deals with the following issue.  To the final .net regex, the following snippets of code appear completely identical to it:\r\n\r\n```c#\r\n\"\\\\1\"\r\n@\"\\1\"\r\n\"\\\\u005c1\"\r\n\"\\\\\\u0031\"\r\n```\r\n\r\nAnd so on and so forth.  These are all ways of writing the ```\\1``` regex.\r\n\r\nIn other words, C# allows a wide variety of input strings to all compile down to the same final 'value' (or 'ValueText') that the regex engine will finally see.  This is a major issue as it means that any data reported by the regex engine must be accurate with respect to the text as the user wrote it.  For example, in all of the equivalent cases above, there is the same error \"Reference to undefined group number 1\".  However, for each form the user wrote, it's necessary to understand what the right value is to highlight as the problem. i.e.\r\n\r\n![image](https://user-images.githubusercontent.com/4564579/34459671-5bb785b2-edab-11e7-8413-79c331ef373f.png)\r\n\r\nand\r\n\r\n![image](https://user-images.githubusercontent.com/4564579/34459672-6deb88dc-edab-11e7-8236-7ba7cd331247.png)\r\n\r\nSo, the purpose of the VirtualCharService is to translate all of the above pieces of user code to the same final set of characters the regex engine will see (specifically ```\\``` and ```1```) while **also** maintaining the knowledge of where those characters came from (for example, that ```1``` came from ```\\u0031``` in the last example).  In essence, the VirtualCharService is able to produce the ValueText for any string literal, while having a mapping back from each character in the ValueText back to the original source span of the document that formed this.\r\n\r\nWith the VirtualCharService user code can be translated into a common format that then can be processed uniformly.  This means that the part of the system that actually tries to understand the regex does not need to know about the differences between ```@\"\"``` and ```\"\"``` strings, or the differences between C# and VB.  It also means that it can be used by any roslyn language (for example, F#) if that is so desired.\r\n\r\nThe second service is the actual regex parser that consumes the results of the VirtualCharService.  The regex parser is a fork of the real .net regex parser (from  https://github.com/dotnet/corefx/blob/master/src/System.Text.RegularExpressions/src/System/Text/RegularExpressions/RegexParser.cs) however, changed heavily. The reason for this is that the existing regex parser is ill suited for all the needs an IDE has.  Major problems the existing parser has are:\r\n\r\n1. It is not error tolerant.  With the first error it encounters it completely bails out.  This would mean that the roslyn services would only work if the regex was written completely properly.\r\n2. it does not produce a usable tree by IDE standards.  While it does produce a tree, it is an extremely abstract one that not only does not contain much of the information that would be needed, it is also heavily processed and changed as parsing happens.  i.e. the parser will actually merge, split, erase, and even reorder nodes within the tree.\r\n3. it works with data formats that are intended to work extremely fast and efficiently when actually performing matching of regexes, but which would be very baroque and unpleasant for editing scenarios.\r\n4. It will actually crash when passed in some strings (i was able to get index-out-of-bounds and even null-refs when using it).\r\n5. It can use excessive amounts of memory (even OOMing) just when parsing.  \r\n\r\nHowever, the existing parser does have certain things going for it.  Namely, it is the source of truth in the .net world.  It doesn't matter what the docs say on how .net regexes work and are parsed.  At the end of they day, this is the parser used, so it must always be deferred to when determining what is a syntactically legal regex and what isn't.\r\n\r\nThe regex parser this PR adds introduces a system far more in line with how other roslyn parsers work.  Namely, the tree it produces is immutable and fully represents all the characters in the original token.  The tree also follows roslyn invariants around nodes, tokens and trivia.  Ideally, the tree would literally be built on the syntax classes defined at the Microsoft.CodeAnalysis layer.  However, they contain internals that make them only implementable at the C# and Vb layers.  Because of that, the tree produces by the new regex parser follows the spirit of the Roslyn syntax model even if it can't fit into it perfectly.\r\n\r\nThis parser has been extensively tested and comes with 750 *seed* cases that validate it.  These are called 'test seeds' as the inputs to the engine are then mutated heavily to produce even more cases to validate the engine with (for example, testing all prefixes and suffixes of every test case to ensure no crashes or infinite loops occur).  Validation is very stringent.  All cases must parse without any problems, producing trees that abide by all roslyn invariants.  **Furthermore**, all cases valaidate that the new parser does not produce errors if the native parser does not.  Conversely, if the native parser produces an error, the new parser must produce **the same error** as it does.  That means that we do not even define *new* messages to show the user.  Instead, we use the same message (or message fragment) that the native regex parser gives the user.  For example:\r\n\r\n![image](https://user-images.githubusercontent.com/4564579/34459743-084b2d4a-edae-11e7-9941-2e5df87e7fb7.png)\r\n\r\n![image](https://user-images.githubusercontent.com/4564579/34459744-12d309cc-edae-11e7-8f3c-996bd684ba99.png)\r\n\r\nBecause of this validation, it's very easy to feed in new tests into the system and have it validate that the roslyn regex parser is working in line with the native parser.\r\n\r\n--\r\n\r\nHere's the current worklist for this feature:\r\n\r\n- [ ] Create VirtualCharService system \r\n- [ ] Implement VirtualCharService for C#\r\n- [ ] Test VirtualCharService for C#\r\n- [ ] Implement VirtualCharService for VB\r\n- [ ] Test VirtualCharService for VB\r\n- [ ] Create regular expression parser that will produce a Roslyn tree for a regex.\r\n- [ ] Test regular expression parser\r\n- [ ] Add stack overflow safeguards for regex parsing.\r\n- [ ] Add diagnostic analyzer that parses regexes and reports warnings for issues as Diagnostics.\r\n- [ ] Add colorizer and fonts/colors entries for regex components.\r\n- [ ] Add highlighter for regex components\r\n- [ ] Add fixer for regex errors\r\n- [ ] Add simplifier for complex regexes"},{"Id":"7043341765","Type":"IssuesEvent","CreatedAt":"2017-12-31T03:55:53","Actor":"CyrusNajmabadi","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/23983","RelatedDescription":"Opened issue \"Two IDE diagnostic ids use the same value.\" (#23983) at dotnet/roslyn","RelatedBody":"        public const string ValidateFormatStringDiagnosticID = \"IDE0035\";\r\n        public const string RemoveUnreachableCodeDiagnosticId = \"IDE0035\";\r\n"},{"Id":"7043239244","Type":"IssuesEvent","CreatedAt":"2017-12-31T01:48:39","Actor":"paul1956","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/23982","RelatedDescription":"Opened issue \"Refactoring VB Member Name can be simplified (IDE0037) refactoring causes error BC30985\" (#23982) at dotnet/roslyn","RelatedBody":"**Version Used**: \r\nVS 2017 15.5.2\r\n**Steps to Reproduce**:\r\nWith the code below the IDE shows an information message and offers a refactoring (Use Inferred Member Name)\r\n```\r\nDim body As BlockSyntax = SyntaxFactory.Block(node.Statements.SelectMany(Function(s As VBSyntax.StatementSyntax) s.Accept(New MethodBodyVisitor(mSemanticModel, Me, withBlockTempVariableNames) With {.isIterator = isIterator})))\r\n```\r\n2. Accept the refactoring, new code below gets error BC30985\tName of field or property being initialized in an object initializer must start with '.'.\r\n```\r\n Dim body As BlockSyntax = SyntaxFactory.Block(node.Statements.SelectMany(Function(s As VBSyntax.StatementSyntax) s.Accept(New MethodBodyVisitor(mSemanticModel, Me, withBlockTempVariableNames) With {isIterator})))\r\n\r\n```\r\n\r\n**Expected Behavior**:\r\nDon't offer refactoring or don't give the error after accepting it\r\n**Actual Behavior**:\r\nRefactoring offered and when accepted you get an error."},{"Id":"7043060231","Type":"PullRequestEvent","CreatedAt":"2017-12-30T22:22:48","Actor":"cston","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/23981","RelatedDescription":"Opened pull request \"Nullability variance in flow analysis\" (#23981) at dotnet/roslyn","RelatedBody":""}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"7044487248","Type":"IssuesEvent","CreatedAt":"2018-01-01T02:12:01","Actor":"morganbr","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/issues/5176","RelatedDescription":"Opened issue \"Align shadow stack\" (#5176) at dotnet/corert","RelatedBody":"The WebAssembly shadow stack currently is only 1-byte aligned. However, parts of the runtime may require alignment and memory operations would likely be more efficient if types were aligned (that is: 3+ byte types start at a multiple of 4, 2 byte types start at a multiple of 2).\r\n\r\nThe methods that would need to handle this would likely be ```ILImporter.GetTotalLocalOffset```, ```ILImporter.GetTotalRealLocalOffset``` ```ILImporter.GetTotalParameterOffset```, ```ILImporter.GetArgSizeAndOffsetAtIndex```, ```ILImporter.GetLocalSizeAndOffsetAtIndex```,  ```ILImporter.GetSpillSizeAndOffsetAtIndex```, and ```ILImporter.HandleCall``` (and any other usages of ```GetElementSize()``` with the shadow stack I missed)."},{"Id":"7043999804","Type":"PullRequestEvent","CreatedAt":"2017-12-31T16:12:47","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5166","RelatedDescription":"Merged pull request \"Set cleanOptions to 3 so that output directory is cleaned up\" (#5166) at dotnet/corert","RelatedBody":""},{"Id":"7043829704","Type":"PullRequestEvent","CreatedAt":"2017-12-31T13:36:05","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5175","RelatedDescription":"Merged pull request \"Merge changes from TFS\" (#5175) at dotnet/corert","RelatedBody":"When merging, this PR, please ensure a merge commit is created as automation requires the merge commit.  Do not 'Squash and merge' or 'Rebase and merge'!"},{"Id":"7043828793","Type":"PullRequestEvent","CreatedAt":"2017-12-31T13:35:09","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5175","RelatedDescription":"Opened pull request \"Merge changes from TFS\" (#5175) at dotnet/corert","RelatedBody":"When merging, this PR, please ensure a merge commit is created as automation requires the merge commit.  Do not 'Squash and merge' or 'Rebase and merge'!"},{"Id":"7043816745","Type":"PullRequestEvent","CreatedAt":"2017-12-31T13:23:08","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5174","RelatedDescription":"Merged pull request \"Merge master to nmirror\" (#5174) at dotnet/corert","RelatedBody":""},{"Id":"7043816435","Type":"PullRequestEvent","CreatedAt":"2017-12-31T13:22:48","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5174","RelatedDescription":"Opened pull request \"Merge master to nmirror\" (#5174) at dotnet/corert","RelatedBody":""},{"Id":"7043702241","Type":"IssuesEvent","CreatedAt":"2017-12-31T11:17:52","Actor":"morganbr","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/issues/5173","RelatedDescription":"Opened issue \"Implement Main return code on WebAssembly\" (#5173) at dotnet/corert","RelatedBody":"Currently, the generated WebAssembly method that calls into Main doesn't handle Main's return code and just returns a hard-coded value. The code that generates it is in ```WebAssemblyObjectWriter.EmitNativeMain```. If Main returns a value, the native caller should ```alloca``` a spot for it to write the return value and pass that as the second parameter to Main and then return the value from that spot."}],"ResultType":"GitHubEvent"},"SDK":{"Events":[{"Id":"7044197681","Type":"IssuesEvent","CreatedAt":"2017-12-31T19:37:39","Actor":"KirillOsenkov","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/issues/1833","RelatedDescription":"Closed issue \"Invalid TrimEnd function usage in Microsoft.NET.TargetFrameworkInference.targets#L51\" (#1833) at dotnet/sdk","RelatedBody":"https://github.com/dotnet/sdk/blob/7fc8f64b89f5a69bb8043bae814b314b6ce6841f/src/Tasks/Microsoft.NET.Build.Tasks/build/Microsoft.NET.TargetFrameworkInference.targets#L51\r\n\r\n`$(TargetFramework.TrimEnd('.0123456789'))`\r\n\r\nMSBuild Expander doesn't like this TrimEnd"},{"Id":"7043001406","Type":"IssuesEvent","CreatedAt":"2017-12-30T21:27:00","Actor":"darrensteadman","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/sdk/issues/1679","RelatedDescription":"Reopened issue \"Workflow designer fails to load when referencing netstandard 2.0\" (#1679) at dotnet/sdk","RelatedBody":"I previously reported issue #1522 when I was having problems getting workflows to compile when referencing netstandard 2.0. The work around documented solved that problem for me however I've now gone to modify some of the workflows in my project and when I try to load the designer I get the following.\r\n\r\nSystem.IO.FileNotFoundException: Could not load file or assembly 'netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51' or one of its dependencies. The system cannot find the file specified.\r\nFile name: 'netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51'\r\n   at System.Signature.GetSignature(Void* pCorSig, Int32 cCorSig, RuntimeFieldHandleInternal fieldHandle, IRuntimeMethodInfo methodHandle, RuntimeType declaringType)\r\n   at System.Reflection.RuntimeMethodInfo.FetchNonReturnParameters()\r\n   at System.Reflection.RuntimeMethodInfo.GetParametersNoCopy()\r\n   at System.Reflection.RuntimePropertyInfo.GetIndexParametersNoCopy()\r\n   at System.Reflection.RuntimePropertyInfo.GetIndexParameters()\r\n   at System.Xaml.Schema.TypeReflector.GetNonIndexerProperty(String name)\r\n   at System.Xaml.Schema.TypeReflector.LookupProperty(String name)\r\n   at System.Xaml.XamlType.LookupMember(String name, Boolean skipReadOnlyCheck)\r\n   at System.Xaml.XamlType.GetMember(String name)\r\n   at MS.Internal.Xaml.XamlContext.GetDottedProperty(XamlType tagType, String tagNamespace, XamlPropertyName propName, Boolean tagIsRoot)\r\n   at MS.Internal.Xaml.Parser.XamlScanner.ReadPropertyElement(XamlPropertyName name, XamlType tagType, String tagNamespace, Boolean isEmptyTag)\r\n   at MS.Internal.Xaml.Parser.XamlScanner.ReadElement()\r\n   at MS.Internal.Xaml.Parser.XamlScanner.ProcessCurrentXmlNode()\r\n   at MS.Internal.Xaml.Parser.XamlScanner.DoXmlRead()\r\n   at MS.Internal.Xaml.Parser.XamlPullParser.<P_NonemptyPropertyElement>d__11.MoveNext()\r\n   at MS.Internal.Xaml.Parser.XamlPullParser.<P_PropertyElement>d__9.MoveNext()\r\n   at MS.Internal.Xaml.Parser.XamlPullParser.<P_ElementBody>d__8.MoveNext()\r\n   at MS.Internal.Xaml.Parser.XamlPullParser.<P_Element>d__5.MoveNext()\r\n   at MS.Internal.Xaml.Parser.XamlPullParser.<P_ElementContent>d__12.MoveNext()\r\n   at MS.Internal.Xaml.Parser.XamlPullParser.<P_ElementBody>d__8.MoveNext()\r\n   at MS.Internal.Xaml.Parser.XamlPullParser.<P_Element>d__5.MoveNext()\r\n   at MS.Internal.Xaml.Parser.XamlPullParser.<P_PropertyContent>d__13.MoveNext()\r\n   at MS.Internal.Xaml.Parser.XamlPullParser.<P_NonemptyPropertyElement>d__11.MoveNext()\r\n   at MS.Internal.Xaml.Parser.XamlPullParser.<P_PropertyElement>d__9.MoveNext()\r\n   at MS.Internal.Xaml.Parser.XamlPullParser.<P_ElementBody>d__8.MoveNext()\r\n   at MS.Internal.Xaml.Parser.XamlPullParser.<P_Element>d__5.MoveNext()\r\n   at MS.Internal.Xaml.Parser.XamlPullParser.<P_ElementContent>d__12.MoveNext()\r\n   at MS.Internal.Xaml.Parser.XamlPullParser.<P_ElementBody>d__8.MoveNext()\r\n   at MS.Internal.Xaml.Parser.XamlPullParser.<P_Element>d__5.MoveNext()\r\n   at MS.Internal.Xaml.Parser.XamlPullParser.<P_PropertyContent>d__13.MoveNext()\r\n   at MS.Internal.Xaml.Parser.XamlPullParser.<P_NonemptyPropertyElement>d__11.MoveNext()\r\n   at MS.Internal.Xaml.Parser.XamlPullParser.<P_PropertyElement>d__9.MoveNext()\r\n   at MS.Internal.Xaml.Parser.XamlPullParser.<P_ElementBody>d__8.MoveNext()\r\n   at MS.Internal.Xaml.Parser.XamlPullParser.<P_Element>d__5.MoveNext()\r\n   at MS.Internal.Xaml.Parser.XamlPullParser.<P_ElementContent>d__12.MoveNext()\r\n   at MS.Internal.Xaml.Parser.XamlPullParser.<P_ElementBody>d__8.MoveNext()\r\n   at MS.Internal.Xaml.Parser.XamlPullParser.<P_Element>d__5.MoveNext()\r\n   at MS.Internal.Xaml.Parser.XamlPullParser.<P_PropertyContent>d__13.MoveNext()\r\n   at MS.Internal.Xaml.Parser.XamlPullParser.<P_NonemptyPropertyElement>d__11.MoveNext()\r\n   at MS.Internal.Xaml.Parser.XamlPullParser.<P_PropertyElement>d__9.MoveNext()\r\n   at MS.Internal.Xaml.Parser.XamlPullParser.<P_ElementBody>d__8.MoveNext()\r\n   at MS.Internal.Xaml.Parser.XamlPullParser.<P_Element>d__5.MoveNext()\r\n   at MS.Internal.Xaml.Parser.XamlPullParser.<P_ElementContent>d__12.MoveNext()\r\n   at MS.Internal.Xaml.Parser.XamlPullParser.<P_ElementBody>d__8.MoveNext()\r\n   at MS.Internal.Xaml.Parser.XamlPullParser.<P_Element>d__5.MoveNext()\r\n   at MS.Internal.Xaml.Parser.XamlPullParser.<P_PropertyContent>d__13.MoveNext()\r\n   at MS.Internal.Xaml.Parser.XamlPullParser.<P_NonemptyPropertyElement>d__11.MoveNext()\r\n   at MS.Internal.Xaml.Parser.XamlPullParser.<P_PropertyElement>d__9.MoveNext()\r\n   at MS.Internal.Xaml.Parser.XamlPullParser.<P_ElementBody>d__8.MoveNext()\r\n   at MS.Internal.Xaml.Parser.XamlPullParser.<P_Element>d__5.MoveNext()\r\n   at MS.Internal.Xaml.Parser.XamlPullParser.<P_ElementContent>d__12.MoveNext()\r\n   at MS.Internal.Xaml.Parser.XamlPullParser.<P_ElementBody>d__8.MoveNext()\r\n   at MS.Internal.Xaml.Parser.XamlPullParser.<P_Element>d__5.MoveNext()\r\n   at MS.Internal.Xaml.Parser.XamlPullParser.<P_ElementContent>d__12.MoveNext()\r\n   at MS.Internal.Xaml.Parser.XamlPullParser.<P_ElementBody>d__8.MoveNext()\r\n   at MS.Internal.Xaml.Parser.XamlPullParser.<P_Element>d__5.MoveNext()\r\n   at MS.Internal.Xaml.Parser.XamlPullParser.<Parse>d__4.MoveNext()\r\n   at MS.Internal.Xaml.NodeStreamSorter.MoveNext()\r\n   at System.Xaml.XamlXmlReader.Read()\r\n   at System.Activities.Debugger.XamlDebuggerXmlReader.Read()\r\n   at System.Activities.XamlIntegration.DynamicActivityXamlReader.Read()\r\n   at Microsoft.Activities.Presentation.Xaml.ActivityTemplateFactoryBuilderReader.Read()\r\n   at Microsoft.Activities.Presentation.Xaml.ViewStateXamlHelper.StripViewStateElement(XamlReader inputReader, Dictionary`2& viewStateInfo, Dictionary`2& viewStateSourceLocationMap)\r\n   at Microsoft.Activities.Presentation.Xaml.ViewStateXamlHelper.ConvertViewStateToAttachedProperties(XamlReader inputReader, ViewStateIdManager idManager, Dictionary`2& viewStateSourceLocationMap)\r\n   at Microsoft.Activities.Presentation.Xaml.WorkflowDesignerXamlHelper.DeserializeString(String text, DeserializationMode mode, IList`1& loadErrors, Dictionary`2& sourceLocations)\r\n   at Microsoft.Activities.Presentation.Xaml.WorkflowDesignerXamlHelper.DeserializeString(String text, IList`1& loadErrors, Dictionary`2& sourceLocations)\r\n   at System.Activities.Presentation.WorkflowDesigner.Load()\r\n\r\nWRN: Assembly binding logging is turned OFF.\r\nTo enable assembly bind failure logging, set the registry value [HKLM\\Software\\Microsoft\\Fusion!EnableLog] (DWORD) to 1.\r\nNote: There is some performance penalty associated with assembly bind failure logging.\r\nTo turn this feature off, remove the registry value [HKLM\\Software\\Microsoft\\Fusion!EnableLog].\r\n\r\nHas this been fixed with the PRs to fix my original bug? Does anyone have a work around I could use for the moment to get myself going again?"},{"Id":"7042650111","Type":"IssuesEvent","CreatedAt":"2017-12-30T16:11:11","Actor":"orloffm","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/issues/1834","RelatedDescription":"Opened issue \"Cannot publish core console app + core app library tests\" (#1834) at dotnet/sdk","RelatedBody":"The solution is here: https://github.com/orloffm/failingpublish\r\n\r\nThe first project is a `netcoreapp2.0` `exe`, the second is a test `netcoreapp2.0` project for it. The solution `dotnet build`s, but when I do\r\n\r\n    dotnet publish -c Release --self-contained -r win-x64\r\n\r\nI get the following:\r\n\r\n    Microsoft (R) Build Engine version 15.5.179.9764 for .NET Core\r\n    Copyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n      Restore completed in 43.37 ms for C:\\dev\\failing_build\\a\\a.csproj.\r\n      Restore completed in 75.49 ms for C:\\dev\\failing_build\\a.tests\\a.tests.csproj.\r\n    C:\\Program Files\\dotnet\\sdk\\2.1.3\\Sdks\\Microsoft.NET.Sdk\\build\\Microsoft.NET.RuntimeIdentifierInference.targets(116,5): error : It is not supported to build or publish a self-contained application without specifying a RuntimeIdentifier.  Please either specify a RuntimeIdentifier or set SelfContained to false. [C:\\dev\\failing_build\\a\\a.csproj]\r\n      a -> C:\\dev\\failing_build\\a\\bin\\Release\\netcoreapp2.0\\win-x64\\a.dll\r\n      a -> C:\\dev\\failing_build\\a\\bin\\Release\\netcoreapp2.0\\win-x64\\publish\\\r\n\r\nIf I remove the test project from the solution, it works fine:\r\n\r\n    Microsoft (R) Build Engine version 15.5.179.9764 for .NET Core\r\n    Copyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n      Restore completed in 43.62 ms for C:\\dev\\failing_build\\a\\a.csproj.\r\n      a -> C:\\dev\\failing_build\\a\\bin\\Release\\netcoreapp2.0\\win-x64\\a.dll\r\n      a -> C:\\dev\\failing_build\\a\\bin\\Release\\netcoreapp2.0\\win-x64\\publish\\\r\n\r\nI expect it to work, as this is almost a copy of a https://github.com/dotnet/docs/tree/master/samples/core/getting-started/unit-testing-using-dotnet-test, but with the main project switched to `netcoreapp2.0`."},{"Id":"7039445938","Type":"IssuesEvent","CreatedAt":"2017-12-29T06:42:10","Actor":"KirillOsenkov","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/issues/1833","RelatedDescription":"Opened issue \"Invalid TrimEnd function usage in Microsoft.NET.TargetFrameworkInference.targets#L51\" (#1833) at dotnet/sdk","RelatedBody":"https://github.com/dotnet/sdk/blob/7fc8f64b89f5a69bb8043bae814b314b6ce6841f/src/Tasks/Microsoft.NET.Build.Tasks/build/Microsoft.NET.TargetFrameworkInference.targets#L51\r\n\r\n`$(TargetFramework.TrimEnd('.0123456789'))`\r\n\r\nMSBuild Expander doesn't like this TrimEnd"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"944564608391577600","CreatedAt":"2017-12-23T13:45:26+00:00","UserScreenname":"dotnet","Text":"Join our Jeff Fritz - @csharpfritz and MVP @IrisClasson in about an hour for LIVE CODING and pair programming on… https://t.co/kicrnl8tNJ","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":24,"FavoriteCount":11,"RawContent":null},{"Id":"943234846079496192","CreatedAt":"2017-12-19T21:41:26+00:00","UserScreenname":"dotnet","Text":"Join our Jeff Fritz (@csharpfritz) in a little more than 2 hours for LIVE CODING. He's working on an @aspnet Core p… https://t.co/Xm2utapspg","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":35,"FavoriteCount":15,"RawContent":null},{"Id":"942039735144452097","CreatedAt":"2017-12-16T14:32:29+00:00","UserScreenname":"dotnet","Text":"Join our Jeff Fritz in 30 minutes for some LIVE CODING and answering your questions about .NET and Visual Studio.  https://t.co/UjBOoFqFp5","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":23,"FavoriteCount":18,"RawContent":null},{"Id":"941295101212549121","CreatedAt":"2017-12-14T13:13:35+00:00","UserScreenname":"dotnet","Text":"Join our Jeff Fritz at 10am ET for a LIVE CODING session.  He'll answer your questions about .NET, Visual Studio, a… https://t.co/qJHWFDaUGf","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":21,"FavoriteCount":14,"RawContent":null}]}},"RunOn":"2018-01-01T05:30:20.4386764Z","RunDurationInMilliseconds":7557}