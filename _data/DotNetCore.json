{"Data":{"Blog":{"FeedItems":[{"Title":"Introducing the new Microsoft.Data.SqlClient","PublishedOn":"2019-05-08T22:05:21+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"This post was written by Vicky Harp, Program Manager on SqlClient and SQL Server Tools.\nThose of you who have been following .NET development closely have very likely seen Scott Hunter&#8217;s latest...","Href":"https://devblogs.microsoft.com/dotnet/introducing-the-new-microsoftdatasqlclient/","RawContent":null},{"Title":"Announcing Entity Framework 6.3 Preview with .NET Core Support","PublishedOn":"2019-05-08T22:00:28+00:00","CommentsCount":10,"FacebookCount":0,"Summary":"The first preview of the EF 6.3 runtime is now available in NuGet.\nNote that the package is versioned as 6.3.0-preview5. We plan to continue releasing previews of EF 6.3 every month in alignment with...","Href":"https://devblogs.microsoft.com/dotnet/announcing-entity-framework-6-3-preview-with-net-core-support/","RawContent":null},{"Title":"Introducing diagnostics improvements in .NET Core 3.0","PublishedOn":"2019-05-08T16:00:57+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"In .NET Core 3.0, we are introducing a suite of tools that utilize new features in the .NET runtime that make it easier to diagnose and solve performance problems.\nThese runtime features help you...","Href":"https://devblogs.microsoft.com/dotnet/introducing-diagnostics-improvements-in-net-core-3-0/","RawContent":null},{"Title":".NET Core is the Future of .NET ","PublishedOn":"2019-05-06T22:22:54+00:00","CommentsCount":81,"FacebookCount":0,"Summary":"We introduced .NET Core 1.0 on November 2014. The goal with .NET Core was to take the learning from our experience building, shipping and servicing .NET Framework over the previous 12 years and build...","Href":"https://devblogs.microsoft.com/dotnet/net-core-is-the-future-of-net/","RawContent":null},{"Title":"Announcing ML.NET 1.0","PublishedOn":"2019-05-06T18:51:26+00:00","CommentsCount":5,"FacebookCount":0,"Summary":"We are excited to announce the release of ML.NET 1.0 today.  ML.NET is a free, cross-platform and open source machine learning framework designed to bring the power of machine learning (ML) into .NET...","Href":"https://devblogs.microsoft.com/dotnet/announcing-ml-net-1-0/","RawContent":null},{"Title":"Announcing .NET Core 3.0 Preview 5","PublishedOn":"2019-05-06T16:01:05+00:00","CommentsCount":10,"FacebookCount":0,"Summary":"Today, we are announcing .NET Core 3.0 Preview 5. It includes a new Json serializer, support for publishing single file executables, an update to runtime roll-forward, and changes in the BCL. If you...","Href":"https://devblogs.microsoft.com/dotnet/announcing-net-core-3-0-preview-5/","RawContent":null},{"Title":"Introducing .NET 5","PublishedOn":"2019-05-06T16:00:50+00:00","CommentsCount":156,"FacebookCount":0,"Summary":"Today, we&#8217;re announcing that the next release after .NET Core 3.0 will be .NET 5. This will be the next big release in the .NET family.\nThere will be just one .NET going forward, and you will be...","Href":"https://devblogs.microsoft.com/dotnet/introducing-net-5/","RawContent":null},{"Title":"Using .NET and Docker Together – DockerCon 2019 Update","PublishedOn":"2019-04-30T05:19:15+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"DockerCon 2019 is being held this week, in San Francisco. We posted a DockerCon 2018 update last year, and it is time to share how we&#8217;ve improved the experience of using .NET and Docker together...","Href":"https://devblogs.microsoft.com/dotnet/using-net-and-docker-together-dockercon-2019-update/","RawContent":null},{"Title":"Introducing .NET for Apache® Spark™ Preview","PublishedOn":"2019-04-24T16:55:23+00:00","CommentsCount":9,"FacebookCount":0,"Summary":"Today at Spark + AI summit we are excited to announce .NET for Apache Spark. Spark is a popular open source distributed processing engine for analytics over large data sets. Spark can be used for...","Href":"https://devblogs.microsoft.com/dotnet/introducing-net-for-apache-spark/","RawContent":null},{"Title":"Upcoming Updates for .NET Framework 4.8","PublishedOn":"2019-04-19T21:40:16+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Upcoming Updates for .NET Framework 4.8\nThe .NET Framework 4.8 product release is now available. The .NET Framework 4.8 product will receive updates on the same cadence and the usual channels (Windows...","Href":"https://devblogs.microsoft.com/dotnet/upcoming-updates-for-net-framework-4-8/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"9596433106","Type":"PullRequestEvent","CreatedAt":"2019-05-09T18:35:22","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/145","RelatedDescription":"Merged pull request \"Edits to DNN Platform Information\" (#145) at dotnet/foundation","RelatedBody":"Edits to reflect changes in repository structure with recent modifications to the overall project structure."},{"Id":"9583176004","Type":"PullRequestEvent","CreatedAt":"2019-05-08T04:08:41","Actor":"mitchelsellers","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/145","RelatedDescription":"Opened pull request \"Edits to DNN Platform Information\" (#145) at dotnet/foundation","RelatedBody":"Edits to reflect changes in repository structure with recent modifications to the overall project structure."},{"Id":"9560620210","Type":"PullRequestEvent","CreatedAt":"2019-05-03T20:10:38","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/143","RelatedDescription":"Merged pull request \"Add AngleSharp\" (#143) at dotnet/foundation","RelatedBody":"cc @jongalloway "},{"Id":"9560610143","Type":"PullRequestEvent","CreatedAt":"2019-05-03T20:08:41","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/141","RelatedDescription":"Merged pull request \"add links to ML.NET docs\" (#141) at dotnet/foundation","RelatedBody":"/cc @JRAlexander @shauheen \r\n\r\nTo match the info we have added for other projects"},{"Id":"9560608015","Type":"PullRequestEvent","CreatedAt":"2019-05-03T20:08:15","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/144","RelatedDescription":"Merged pull request \"Add DotVVM\" (#144) at dotnet/foundation","RelatedBody":"cc @jongalloway "},{"Id":"9557840000","Type":"PullRequestEvent","CreatedAt":"2019-05-03T12:47:26","Actor":"tomasherceg","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/144","RelatedDescription":"Opened pull request \"Add DotVVM\" (#144) at dotnet/foundation","RelatedBody":"cc @jongalloway "},{"Id":"9523802619","Type":"PullRequestEvent","CreatedAt":"2019-04-27T20:23:58","Actor":"FlorianRappl","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/143","RelatedDescription":"Opened pull request \"Add AngleSharp\" (#143) at dotnet/foundation","RelatedBody":"cc @jongalloway "},{"Id":"9341532248","Type":"PullRequestEvent","CreatedAt":"2019-03-29T14:44:24","Actor":"BillWagner","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/142","RelatedDescription":"Merged pull request \"add docs samples link\" (#142) at dotnet/foundation","RelatedBody":"@BillWagner should we add the samples project too?"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"9473320861","Type":"IssuesEvent","CreatedAt":"2019-04-19T01:16:11","Actor":"MichaelSimons","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/110","RelatedDescription":"Opened issue \"# New images for .NET Framework 4.8\" (#110) at dotnet/announcements","RelatedBody":"# New images for .NET Framework 4.8\r\n\r\nNew images have been released with support for [.NET Framework 4.8 runtime and SDK](https://devblogs.microsoft.com/dotnet/announcing-the-net-framework-4-8/).\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [Microsoft/dotnet-framework-docker#271](https://github.com/Microsoft/dotnet-framework-docker/issues/271)\r\n\r\n## Details\r\n* Pull request: #270\r\n\r\nYou can access these new images with the following tags:\r\n* `mcr.microsoft.com/dotnet/framework/runtime:4.8`\r\n* `mcr.microsoft.com/dotnet/framework/sdk:4.8`\r\n\r\nIn addition, the `latest` tag has been updated to refer to these new 4.8 images.\r\n\r\nCheck out the readme files for more information on the latest tags:\r\n* [Runtime](https://github.com/Microsoft/dotnet-framework-docker/blob/master/README.runtime.md)\r\n* [SDK](https://github.com/Microsoft/dotnet-framework-docker/blob/master/README.sdk.md)\r\n\r\nThe [3.5 SDK](https://github.com/Microsoft/dotnet-framework-docker/tree/master/3.5/sdk) images are intended to always contain the latest .NET Framework SDK and have also been updated to use the 4.8 SDK."},{"Id":"9445263990","Type":"IssuesEvent","CreatedAt":"2019-04-15T13:57:07","Actor":"MichaelSimons","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/109","RelatedDescription":"Opened issue \".NET Framework SDK container images now contain the Visual Studio 2019 toolset\" (#109) at dotnet/announcements","RelatedBody":"# .NET Framework SDK container images now contain the Visual Studio 2019 toolset\r\n.NET Framework SDK container images now include Visual Studio 2019 tools. For most scenarios, this change will not be observable, however, there may be some breaks that will be documented in this issue. We did not add additional tools to the SDK, but updated existing tools to match the same tools in Visual Studio 2019. Previously, the tools in SDK matched the same tools in Visual Studio 2017.\r\n\r\nWe will only produce .NET Framework SDK images that include Visual Studio 2019 tools. We will not produce another set of .NET Framework SDK images that includes Visual Studio 2017 tools. There is a strong goal that the tools remain compatible over releases.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [Microsoft/dotnet-framework-docker#269](https://github.com/Microsoft/dotnet-framework-docker/issues/269)\r\n\r\n## Details\r\nVisual Studio 2019 was released on April 2, 2019. We updated the .NET Framework SDK container images, on the same day, to include a new version of the .NET Framework SDK that contains tools that match the same tools in Visual Studio 2019.\r\n\r\nThese tools include:\r\n* MSBuild\r\n* NuGet\r\n* C# compiler\r\n* F# compiler\r\n* VB compiler\r\n* VS Test\r\n\r\nIf you encounter a breaking change or other issues and need to quickly unblock yourself, you can reference the previous version of the image by using its full version tag (e.g. mcr.microsoft.com/dotnet/framework/sdk:4.7.2-20190312-windowsservercore-ltsc2019).\r\n\r\nRelated pull request: #252"},{"Id":"9434908530","Type":"IssuesEvent","CreatedAt":"2019-04-12T20:35:55","Actor":"KathleenDollard","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/108","RelatedDescription":"Opened issue \".NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017\" (#108) at dotnet/announcements","RelatedBody":"# .NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017\r\n\r\n.NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017. For example, 2.2.203 and 2.1.603 cause failures in Visual Studio 2017. To work on projects in Visual Studio 2017, use .NET Core SDK 2.2.1nn and 2.1.5nn, such as 2.2.106 and 2.1.506. You can install any combination of these SDKs side by side.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n[dotnet/sdk #3124](https://github.com/dotnet/sdk/issues/3124)\r\n\r\n## Details\r\n\r\nYou can find the SDKs on you machine using the following at a command prompt:\r\n\r\n```bash\r\ndotnet --list-sdks\r\n```\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.2\r\n\r\nIf you receive the error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.2. Either target .NET Core 2.1 or lower, or use a version of the .NET SDK that supports .NET Core 2.2.`\r\n\r\nIf you downloaded the .NET Core SDK 2.2 between April 2 and April 12, 2019, the main [.NET downloads page](https://dotnet.microsoft.com/download/) included only 2.2.2nn. Starting April 12th, a new button marked \"Compatible with Visual Studio 2017\" is provided to target 2.2.1nn.\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.1\r\n\r\nIf you receive this error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.1. Either target .NET Core 2.0 or lower, or use a version of the .NET SDK that supports .NET Core 2.1.`\r\n\r\nThis problem most often occurs because you manually uninstall the 2.1.5nn version. Simply reinstall it from the [.NET Core 2.1 downloads page](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\n## More information\r\n\r\nHere is the draft of an article we are preparing for .NET Core documentation:\r\n\r\n---\r\n\r\n## Solving Problems with .NET Core SDK Selection in Visual Studio\r\n\r\nYou may have .NET Core SDKs on your machine and still have problems with Visual Studio finding an appropriate one. This article explains why this happens and how you can fix your installation.\r\n\r\nWhen Visual Studio can't find an appropriate version of the .NET Core SDK, you'll receive an error message. This may appear in the Error pane as NETSDK1045:\r\n\r\n\"The current .NET SDK does not support targeting .NET Core 2...\"\r\n\r\nYou can check what .NET Core SDKs you have on your machine with the following command:\r\n\r\n```bash\r\ndotnet --list-sdks\r\n```\r\n\r\nUnless you have a global.json file, when you use `dotnet` from the command line, the latest .NET Core SDK is used.\r\n\r\n> [TIP!] \r\n> Open a command prompt and try to build with `dotnet build`. If the command line build works, but Visual Studio doesn't suggestions in this article may help.\r\n\r\nThe last two digits of the .NET Core SDK version numbers are in the format are a patch number, which is represented by `nn` in this article because we will continue to service them to include the latest runtimes. To find out more, vist the [Overview of how .NET Core is versioned page](https://docs.microsoft.com/en-us/dotnet/core/versions/).\r\n\r\n## Fixes for Common Problems\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.2\r\n\r\nIf you receive the error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.2… Either target .NET Core 2.1 or lower, or use a version of the .NET SDK that supports .NET Core 2.2.`\r\n\r\nUse `dotnet --list-sdks` to ensure you have .NET Core SDK 2.2.1nn. As an example, 2.2.106 would be a valid entry.\r\n\r\nIf you downloaded the .NET Core SDK 2.2 after April 2, 2019, version 2.2.2nn (such as 2.2.203) is listed first and is the highest version available. However, Visual Studio 2017 requires 2.2.1nn (such as 2.2.106). .NET Core SDK 2.2.2nn works with Visual Studio 2019. Visual Studio 2017 and Visual Studio 2019 can be installed side by side, but this requires both .NET Core SDK 2.2.1nn and .NET Core SDK 2.2.2nn to develop .NET Core 2.2 applications.\r\n\r\nTo download .NET Core SDK 2.2.2nn, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.1\r\n\r\nIf you receive this error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.1. Either target .NET Core 2.0 or lower, or use a version of the .NET SDK that supports .NET Core 2.1.`\r\n\r\nUse `dotnet --list-sdks` to ensure you have .NET Core SDK 2.1.5nn. As an example, 2.1.505 would be a valid entry. \r\n\r\nThis problem occurs of you manually uninstall the 2.1.5nn version.\r\n\r\nThe Visual Studio 2019 installation will not remove this file and Visual Studio 2017 will continue to work side by side.\r\n\r\nTo reinstall .NET Core SDK 2.1.5nn, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\n### Visual Studio 2019 can't target .NET Core 3.0 Preview\r\n\r\nIf you receive this error message in Visual Studio 2019:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.1. Either target .NET Core 2.0 or lower, or use a version of the .NET SDK that supports .NET Core 2.1.`\r\n\r\nUse `dotnet --list-sdks` to ensure you have .NET Core SDK 3.0.100-preview... As an example, SDK 3.0.100-preview3-010431 would be a valid entry.\r\n\r\nTo install .NET Core SDK 3.0.1nn preview, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core/3.0).\r\n\r\nIn Visual Studio, go to `Tools\\Options\\Projects and Solutions\\.NET Core` and check the box `Use Previews of the .NET Core SDK`.\r\n\r\n> [NOTE!]\r\n> This option will be moving to `Tools\\Options\\Environment` and renamed `Preview Features` in Visual Studio 2019 version 16.1 Preview 2.\r\n\r\nIf you are targeting .NET Core 3.0 preview, the [C# language version will be C# 8.0 Preview by default](https://docs.microsoft.com/en-us/visualstudio/releases/2019/release-notes#csharp-defaults) allowing you to use new C# features.\r\n\r\n## Understand the relationship between .NET Core SDKs and Visual Studio build tools\r\n\r\nVisual Studio has its own copies of tools like MSBuild, NuGet and the compilers. If you install the .NET Core workload, it also installs the .NET Core SDK which has versions of these tools and provides tasks and targets. These two versions are built from the same repositories, but target .NET Framework and .NET Core respectively. \r\n\r\nWhen you build a .NET Core project in Visual Studio, it uses Visual Studio's copy of MSBuild, but the tasks and targets are supplied from the selected version of the .NET Core SDK. \r\n\r\nWhen you upgrade the .NET Core SDK, you get new tasks and targets. These new tasks and targets may contain features that are not supported by older versions of MSBuild. Like all of the .NET Core SDK, MSBuild is backwards compatible. It is not forwards compatible.\r\n\r\nThis generally works well, but requires a guarantee that the tasks and targets work with the MSBuild version. To ensure this, each .NET Core SDK indicates an MSBuild version range that is used by Visual Studio to determine compatibility. Versions of the .NET Core SDK that have a higher MSBuild identifier than expected are ignored by Visual Studio. In the normal case, this simply means you use the tasks and targets that were installed with your version of Visual Studio.\r\n\r\nBecause of this, you may have many versions of the .NET Core SDK on your machine and Visual Studio still fail to find one it considers appropriate. This is compounded by a poor error message, which we cannot fully correct because it is from the old version of the .NET Core SDK on your machine. Confusion is also compounded by a complex non-linear release matrix that makes it difficult to predict the right .NET Core SDK to select. We are working to improve all this. \r\n\r\n## The Visual Studio / .NET Core SDK support matrix\r\n\r\nThe last two digits of the .NET Core SDK version number are a patch number, which are represented by a `nn` in this table. You can learn more about .NET Core SDK and .NET Core Runtime versioning at the [Overview of how .NET Core is versioned page](https://docs.microsoft.com/en-us/dotnet/core/versions/).\r\n\r\nThe following table shows which Visual Studio versions and .NET Core SDKs are compatible and how they are acquired if you are working with Visual Studio. \r\n\r\n| .NET Core SDK | .NET Core Runtime | Compatible Visual Studio | MSBuild | Notes                                     |\r\n|---------------|-------------------|--------------------------|---------|-------------------------------------------|\r\n| 2.1.5nn       | 2.1               | 2017                     | 15      | Installed as part of VS 2017 version 15.9 |\r\n| 2.1.6nn       | 2.1               | 2019                     | 16      | Installed as part of VS 2019              |\r\n| 2.2.1nn       | 2.2               | 2017                     | 15      | Installed manually                        |\r\n| 2.2.2nn       | 2.2               | 2019                     | 16      | Installed as part of VS 2019              |\r\n| 3.0.1nn       | 3.0 (Preview)     | 2019                     | 16      | Installed manually                        |\r\n\r\nVisual Studio 2017 cannot work with .NET Core SDK 2.1.6nn or 2.2.2nn.\r\n\r\nTo find out more about removing older versions of the .NET Core Runtime and .NET Core SDK, visit the [How to remove the .NET Core Runtime and SDK page](https://docs.microsoft.com/en-us/dotnet/core/versions/remove-runtime-sdk-versions?tabs=macos).\r\n\r\nTo download the .NET Core SDK, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core)."}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"9619396778","Type":"PullRequestEvent","CreatedAt":"2019-05-14T05:00:03","Actor":"sandreenko","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/24551","RelatedDescription":"Merged pull request \"Exclude eventsourcetrace from jitstress runs.\" (#24551) at dotnet/coreclr","RelatedBody":"It blocks clean[ JitStress runs](https://dev.azure.com/dnceng/public/_build?definitionId=348).\r\n\r\nRevert this when #24423 is fixed."},{"Id":"9619332962","Type":"PullRequestEvent","CreatedAt":"2019-05-14T04:40:30","Actor":"davmason","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/24461","RelatedDescription":"Merged pull request \"Profiler API to request ReJIT with inliners\" (#24461) at dotnet/coreclr","RelatedBody":"This API is necessary for attaching profilers to be able to ReJIT methods and replace everything that uses the old IL.\r\n\r\nI still have to do perf testing to make sure when no profiler is attached we don't regress anything (besides the small impact to overall working set from the tracking), and there are a few more scenarios I want to test but overall it is ready for review/feedback."},{"Id":"9619201540","Type":"PullRequestEvent","CreatedAt":"2019-05-14T03:59:33","Actor":"AaronRobinsonMSFT","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/24562","RelatedDescription":"Merged pull request \"Miscellaneous build issues\" (#24562) at dotnet/coreclr","RelatedBody":""},{"Id":"9619188078","Type":"IssuesEvent","CreatedAt":"2019-05-14T03:55:29","Actor":"mhamri","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/24564","RelatedDescription":"Opened issue \"Debug.Assert is crashing the application in linux\" (#24564) at dotnet/coreclr","RelatedBody":"```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.203\r\n Commit:    e5bab63eca\r\n\r\nRuntime Environment:\r\n OS Name:     ubuntu\r\n OS Version:  16.04\r\n OS Platform: Linux\r\n RID:         ubuntu.16.04-x64\r\n Base Path:   /usr/share/dotnet/sdk/2.2.203/\r\n\r\nHost (useful for support):\r\n  Version: 2.2.4\r\n  Commit:  f95848e524\r\n\r\n.NET Core SDKs installed:\r\n  2.2.203 [/usr/share/dotnet/sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.2.4 [/usr/share/dotnet/shared/Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.4 [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.2.4 [/usr/share/dotnet/shared/Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n\r\n```\r\n\r\nI am running an appliaction that is published in release mode. still the Debug.Assert is getting hit and it cause the application exit right away, eventhough the Debug.Assert is in a try catch module but it cause the application to exit immediately. i saw the same error back to 2016-2018, but look like it's still not fixed "},{"Id":"9618988810","Type":"PullRequestEvent","CreatedAt":"2019-05-14T02:58:24","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/24511","RelatedDescription":"Merged pull request \"Delete InternalCasingHelper\" (#24511) at dotnet/coreclr","RelatedBody":"The unmanaged runtime has number of different paths for case-insensitive operations, each with unique issues. This is replacing InternalCasingHelper with SString to reduce number of different paths for case-insensitive operations that need to be maintained.\r\n\r\nContributes to #20616"},{"Id":"9618742601","Type":"PullRequestEvent","CreatedAt":"2019-05-14T01:50:17","Actor":"janvorli","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/24524","RelatedDescription":"Merged pull request \"Fix field signature generation\" (#24524) at dotnet/coreclr","RelatedBody":"The ZapSig::EncodeField was missing similar treatment that was made to\r\nthe encodeMethod in the past for enabling large version bubble. We\r\nshould encode all fields as field defs and the module override at the\r\nbeginning of the fixup signature is computed with that assumption.\r\nThe issue was that we were storing memberrefs in some cases and the\r\nmodule override made them invalid.\r\nIt fixes a corefx test that was failing due to this when crossgen-ed\r\nwith large version bubble enabled."},{"Id":"9618721567","Type":"PullRequestEvent","CreatedAt":"2019-05-14T01:44:09","Actor":"janvorli","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/24523","RelatedDescription":"Merged pull request \"Add module override for constraint type in method\" (#24523) at dotnet/coreclr","RelatedBody":"The constraint type for method signature encoding was missing module\r\nzapsig when it was needed. Some corefx tests were failing due to that \r\nwhen crossgen-ed with large version bubble enabled."},{"Id":"9618606292","Type":"PullRequestEvent","CreatedAt":"2019-05-14T01:10:51","Actor":"sdmaclea","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/24563","RelatedDescription":"Merged pull request \"RemoveThrowMessage\" (#24563) at dotnet/coreclr","RelatedBody":""}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"9618598032","Type":"IssuesEvent","CreatedAt":"2019-05-14T01:08:20","Actor":"dsplaisted","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/10666","RelatedDescription":"Closed issue \"Automatically reference shared frameworks from dependencies\" (#10666) at dotnet/cli","RelatedBody":"If a dependency of a project (either another project in the solution, or a NuGet package) depends on an optional shared framework, then the project with the dependency should also depend on that shared framework.\r\n\r\nThis depends on NuGet writing these dependencies to the assets file: https://github.com/NuGet/Home/issues/7342.  Once that is done we will raise them into framework references.\r\n\r\nWe will also need to download all targeting packs for the targeted framework in case we might need to depend on them via a transitive dependency (which we won't know about until after restore has happened).\r\n\r\nNOTE: We would also like to have a property to disable transitive framework references (which would then disable the automatic download of packages you might not need)."},{"Id":"9618518413","Type":"PullRequestEvent","CreatedAt":"2019-05-14T00:44:55","Actor":"JohnTortugo","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/11323","RelatedDescription":"Merged pull request \"Update .vsts-ci.yml\" (#11323) at dotnet/cli","RelatedBody":"Related to: https://github.com/dotnet/core-eng/issues/6291"},{"Id":"9618416886","Type":"IssuesEvent","CreatedAt":"2019-05-14T00:14:02","Actor":"wli3","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/11324","RelatedDescription":"Opened issue \"Flaky test: TestPersistenceChannelConstructorAndDisposeOnDeadlock\" (#11324) at dotnet/cli","RelatedBody":""},{"Id":"9618364641","Type":"PullRequestEvent","CreatedAt":"2019-05-13T23:59:25","Actor":"dotnet-maestro[bot]","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/11317","RelatedDescription":"Merged pull request \"[master] Update dependencies from dotnet/sdk\" (#11317) at dotnet/cli","RelatedBody":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/sdk\r\n- **Build**: 20190510.2\r\n- **Date Produced**: 5/10/2019 6:20 PM\r\n- **Commit**: 372e67d51167792db2fdaeebf48b6d8fb962e713\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk** -> 3.0.100-preview6.19260.2\r\n\r\n## From https://github.com/dotnet/sdk\r\n- **Build**: 20190511.1\r\n- **Date Produced**: 5/11/2019 3:03 PM\r\n- **Commit**: 8ca875262a8c6565d2fefeb6356aa02df2c4ac86\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk** -> 3.0.100-preview6.19261.1\r\n\r\n## From https://github.com/dotnet/sdk\r\n- **Build**: 20190512.1\r\n- **Date Produced**: 5/12/2019 3:12 PM\r\n- **Commit**: 3be65641f392ecd21f7245eb3463d034f8f39e5c\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk** -> 3.0.100-preview6.19262.1\r\n\r\n"}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"9618368510","Type":"PullRequestEvent","CreatedAt":"2019-05-14T00:00:26","Actor":"JohnTortugo","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/1189","RelatedDescription":"Merged pull request \"Update azure-pipelines.yml\" (#1189) at dotnet/standard","RelatedBody":"Related to: https://github.com/dotnet/core-eng/issues/6291"},{"Id":"9618065726","Type":"IssuesEvent","CreatedAt":"2019-05-13T22:41:57","Actor":"yangsong2828","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/1190","RelatedDescription":"Opened issue \"HttpModule with Microsoft.AspNetCore.Http\" (#1190) at dotnet/standard","RelatedBody":"We have multiple projects depend on one common IIS module, say Logging module.\r\nHowever, we can't move all projects to asp.net core at one shot. But we want to move one at a time.\r\nIf I port it to middleware, it can't be used by legacy IIS projects any more.\r\nSo what is your recommendation to move those common piece to asp .net core? Thanks."},{"Id":"9618011593","Type":"PullRequestEvent","CreatedAt":"2019-05-13T22:29:34","Actor":"JohnTortugo","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/1189","RelatedDescription":"Opened pull request \"Update azure-pipelines.yml\" (#1189) at dotnet/standard","RelatedBody":"Related to: https://github.com/dotnet/core-eng/issues/6291"},{"Id":"9613796357","Type":"PullRequestEvent","CreatedAt":"2019-05-13T12:19:21","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/1188","RelatedDescription":"Merged pull request \"[master] Update dependencies from dotnet/arcade\" (#1188) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190512.1\r\n- **Date Produced**: 5/12/2019 12:58 PM\r\n- **Commit**: 30682cda0dd7ca1765463749dd91ec3cfec75eb9\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19262.1\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19262.1\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19262.1\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19262.1\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19262.1\r\n\r\n"},{"Id":"9613698412","Type":"PullRequestEvent","CreatedAt":"2019-05-13T12:04:09","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/1188","RelatedDescription":"Opened pull request \"[master] Update dependencies from dotnet/arcade\" (#1188) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190512.1\r\n- **Date Produced**: 5/12/2019 12:58 PM\r\n- **Commit**: 30682cda0dd7ca1765463749dd91ec3cfec75eb9\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19262.1\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19262.1\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19262.1\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19262.1\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19262.1\r\n\r\n"}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"9619496873","Type":"PullRequestEvent","CreatedAt":"2019-05-14T05:29:01","Actor":"dotnet-maestro-bot","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/37638","RelatedDescription":"Opened pull request \"Update ProjectNTfs, ProjectNTfsTestILC to beta-27714-00, beta-27714-00, respectively (master)\" (#37638) at dotnet/corefx","RelatedBody":"/cc @dotnet/maestro-reviewers-core"},{"Id":"9619391163","Type":"PullRequestEvent","CreatedAt":"2019-05-14T04:58:21","Actor":"Anipik","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/37591","RelatedDescription":"Merged pull request \"Removing partial facades from netcoreapp\\uap reference assembly build\" (#37591) at dotnet/corefx","RelatedBody":"Working Towards https://github.com/dotnet/arcade/issues/2736\r\n\r\nCurrently the Old GenFacades assembly rewriter task is responsible for removing these types from the dll and adding typeforwards in its place.\r\nAs we are moving away from using Microsoft.cci , we need to add them manually. We can do this using Genfacades sourceCode writer because its not intutive to eliminate the source code. It will also break the sourceLink"},{"Id":"9619212279","Type":"IssuesEvent","CreatedAt":"2019-05-14T04:02:30","Actor":"ahsonkhan","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/37610","RelatedDescription":"Closed issue \"[System.Text.Json] Serializing class that has array of children of the same class throws StackOverflowException\" (#37610) at dotnet/corefx","RelatedBody":"As in title: Serializing class that has array of children of the same class throws StackOverflowException.\r\n\r\nSimplest repro steps:\r\n\r\n```\r\npublic class TestClass\r\n{\r\n    public TestClass[] Children { get; set; }\r\n}\r\n\r\nvar document = new TestClass();\r\nvar str = JsonSerializer.ToString(document);\r\n```\r\nI create repository that reproduces this issue: https://github.com/oskardudycz/System.Text.Json.Fail"},{"Id":"9619198734","Type":"PullRequestEvent","CreatedAt":"2019-05-14T03:58:44","Actor":"ahsonkhan","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/37549","RelatedDescription":"Merged pull request \"Allow trailing trivia in JsonSerializer.Parse and Read #37500\" (#37549) at dotnet/corefx","RelatedBody":"This fixes #37500 by consuming all leading and trailing trivia in `JsonSerializer.ReadCore`. Comments are only consumed if `JsonCommentHandling` is not Disallow."}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"9619137937","Type":"PullRequestEvent","CreatedAt":"2019-05-14T03:40:21","Actor":"jcouv","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/35557","RelatedDescription":null,"RelatedBody":"Fixes https://github.com/dotnet/roslyn/issues/35408"},{"Id":"9619137808","Type":"PullRequestEvent","CreatedAt":"2019-05-14T03:40:19","Actor":"jcouv","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/pull/35557","RelatedDescription":"Closed pull request \"Remove safeonly option\" (#35557) at dotnet/roslyn","RelatedBody":"Fixes https://github.com/dotnet/roslyn/issues/35408"},{"Id":"9618671939","Type":"PullRequestEvent","CreatedAt":"2019-05-14T01:30:07","Actor":"dotnet-automerge-bot","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/35693","RelatedDescription":"Merged pull request \"Merge master to master-vs-deps\" (#35693) at dotnet/roslyn","RelatedBody":"\nThis is an automatically generated pull request from master into master-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-master-vs-deps\ngit reset --hard upstream/master-vs-deps\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-master-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"9619045710","Type":"PullRequestEvent","CreatedAt":"2019-05-14T03:14:24","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/corert/pull/7412","RelatedDescription":null,"RelatedBody":"This PR contains mirrored changes from dotnet/corefx,coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub"},{"Id":"9619045610","Type":"PullRequestEvent","CreatedAt":"2019-05-14T03:14:22","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/pull/7412","RelatedDescription":"Closed pull request \"Mirror changes from dotnet/corefx,coreclr\" (#7412) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/corefx,coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub"},{"Id":"9619044939","Type":"PullRequestEvent","CreatedAt":"2019-05-14T03:14:11","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7418","RelatedDescription":"Merged pull request \"Opt-in more Windows PInvokes into direct calls\" (#7418) at dotnet/corert","RelatedBody":"Fixes intermittent infinited recursion inside lazy PInvoke resolver"},{"Id":"9619044165","Type":"PullRequestEvent","CreatedAt":"2019-05-14T03:13:57","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7419","RelatedDescription":"Merged pull request \"Update xplat-job.yml\" (#7419) at dotnet/corert","RelatedBody":"Relates to: https://github.com/dotnet/core-eng/issues/6291\r\n\r\n/cc @MattGal "},{"Id":"9619004815","Type":"PullRequestEvent","CreatedAt":"2019-05-14T03:02:47","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7420","RelatedDescription":"Merged pull request \"Fix ProjectN build breaks\" (#7420) at dotnet/corert","RelatedBody":""},{"Id":"9618557045","Type":"PullRequestEvent","CreatedAt":"2019-05-14T00:56:27","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7420","RelatedDescription":"Opened pull request \"Fix ProjectN build breaks\" (#7420) at dotnet/corert","RelatedBody":""},{"Id":"9618086347","Type":"PullRequestEvent","CreatedAt":"2019-05-13T22:46:49","Actor":"JohnTortugo","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7419","RelatedDescription":"Opened pull request \"Update xplat-job.yml\" (#7419) at dotnet/corert","RelatedBody":"Relates to: https://github.com/dotnet/core-eng/issues/6291\r\n\r\n/cc @MattGal "},{"Id":"9617775888","Type":"PullRequestEvent","CreatedAt":"2019-05-13T21:42:28","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/corert/pull/7418","RelatedDescription":null,"RelatedBody":"Fixes intermittent infinited recursion inside lazy PInvoke resolver"},{"Id":"9617775655","Type":"PullRequestEvent","CreatedAt":"2019-05-13T21:42:25","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/pull/7418","RelatedDescription":"Closed pull request \"Opt-in more Windows PInvokes into direct calls\" (#7418) at dotnet/corert","RelatedBody":"Fixes intermittent infinited recursion inside lazy PInvoke resolver"},{"Id":"9617045770","Type":"PullRequestEvent","CreatedAt":"2019-05-13T19:45:59","Actor":"nattress","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7411","RelatedDescription":"Merged pull request \"Add SuperIlc compile-nuget command\" (#7411) at dotnet/corert","RelatedBody":"Add support for compiling assemblies from Nuget packages with Crossgen / CPAOT to validate them on real-world code. The compile-nuget command takes a list of Nuget packages and for each package creates an empty console app, adds the package to the app, publishes, and then runs Crossgen / CPAOT. This initial command does not run the app and is meant for gathering data on noisiness of compile logs, ensuring compilation regressions don't happen, tracking ready-to-run binary sizes, etc.\r\n\r\nTop100Nuget.txt is provided as an example, and contains the 100 most popular Nuget packages on nuget.org as of this commit."},{"Id":"9617019331","Type":"PullRequestEvent","CreatedAt":"2019-05-13T19:41:36","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7418","RelatedDescription":"Opened pull request \"Opt-in more Windows PInvokes into direct calls\" (#7418) at dotnet/corert","RelatedBody":"Fixes intermittent infinited recursion inside lazy PInvoke resolver"},{"Id":"9616400976","Type":"PullRequestEvent","CreatedAt":"2019-05-13T18:04:12","Actor":"trylek","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/pull/7410","RelatedDescription":"Closed pull request \"SuperIlc support for the issues.targets file\" (#7410) at dotnet/corert","RelatedBody":"This change implements a new option --issues-path that can be used\r\nto specify the path to explicit CoreCLR test exclusion XML file.\r\nThis is useful when running CoreCLR test suites so that we filter\r\nout tests known to be failing or hanging and thus reduce noise in\r\nour CPAOT results.\r\n\r\nAs the issues.targets is technically an msbuild project file, I have\r\nleveraged MSBuild interface libraries to evaluate the conditional\r\nexpressions in the file much like we do in .NET Native when evaluating\r\nthe bugdata.ProjectN.xml file. For now I have set many of the project\r\nproperties to arbitrary values, that's up to further cleanup once\r\nwe start expanding our targeting matrix.\r\n\r\nThanks\r\n\r\nTomas"}],"ResultType":"GitHubEvent"},"SDK":{"Events":[{"Id":"9619341561","Type":"PullRequestEvent","CreatedAt":"2019-05-14T04:43:12","Actor":"JohnTortugo","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/3229","RelatedDescription":"Merged pull request \"Update .vsts-ci.yml\" (#3229) at dotnet/sdk","RelatedBody":"Relates to: https://github.com/dotnet/core-eng/issues/6291\r\n\r\n/cc @mattgal"},{"Id":"9618598057","Type":"PullRequestEvent","CreatedAt":"2019-05-14T01:08:20","Actor":"dsplaisted","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/3221","RelatedDescription":"Merged pull request \"Add support for transitive framework references\" (#3221) at dotnet/sdk","RelatedBody":"Fixes dotnet/cli#10666"}],"ResultType":"GitHubEvent"},"Home-Issues":{"Issues":[{"Id":"441542047","IsPullRequest":true,"CreatedAt":"2019-05-09T18:35:22","Actor":"mitchelsellers","Number":"145","RawContent":null,"Title":"Edits to DNN Platform Information","State":"closed","Body":"Edits to reflect changes in repository structure with recent modifications to the overall project structure.","Url":"https://github.com/dotnet/foundation/pull/145","RelatedDescription":"Closed or merged PR \"Edits to DNN Platform Information\" (#145)"},{"Id":"437980746","IsPullRequest":true,"CreatedAt":"2019-05-03T20:10:38","Actor":"FlorianRappl","Number":"143","RawContent":null,"Title":"Add AngleSharp","State":"closed","Body":"cc @jongalloway ","Url":"https://github.com/dotnet/foundation/pull/143","RelatedDescription":"Closed or merged PR \"Add AngleSharp\" (#143)"},{"Id":"426787230","IsPullRequest":true,"CreatedAt":"2019-05-03T20:08:40","Actor":"mairaw","Number":"141","RawContent":null,"Title":"add links to ML.NET docs","State":"closed","Body":"/cc @JRAlexander @shauheen \r\n\r\nTo match the info we have added for other projects","Url":"https://github.com/dotnet/foundation/pull/141","RelatedDescription":"Closed or merged PR \"add links to ML.NET docs\" (#141)"},{"Id":"440030132","IsPullRequest":true,"CreatedAt":"2019-05-03T20:08:15","Actor":"tomasherceg","Number":"144","RawContent":null,"Title":"Add DotVVM","State":"closed","Body":"cc @jongalloway ","Url":"https://github.com/dotnet/foundation/pull/144","RelatedDescription":"Closed or merged PR \"Add DotVVM\" (#144)"},{"Id":"426787542","IsPullRequest":true,"CreatedAt":"2019-03-29T14:44:24","Actor":"mairaw","Number":"142","RawContent":null,"Title":"add docs samples link","State":"closed","Body":"@BillWagner should we add the samples project too?","Url":"https://github.com/dotnet/foundation/pull/142","RelatedDescription":"Closed or merged PR \"add docs samples link\" (#142)"},{"Id":"426658581","IsPullRequest":true,"CreatedAt":"2019-03-29T02:16:07","Actor":"scottaddie","Number":"139","RawContent":null,"Title":"Add link to ASP.NET Core docs","State":"closed","Body":"Provide a link to the docs site for ASP.NET Core.","Url":"https://github.com/dotnet/foundation/pull/139","RelatedDescription":"Closed or merged PR \"Add link to ASP.NET Core docs\" (#139)"},{"Id":"426666928","IsPullRequest":true,"CreatedAt":"2019-03-29T02:15:48","Actor":"BillWagner","Number":"140","RawContent":null,"Title":"add links to .NET docs","State":"closed","Body":"/cc @mairaw @scottaddie\r\n\r\nMaira, did I miss any project repos to tag?","Url":"https://github.com/dotnet/foundation/pull/140","RelatedDescription":"Closed or merged PR \"add links to .NET docs\" (#140)"},{"Id":"419205679","IsPullRequest":true,"CreatedAt":"2019-03-18T21:04:01","Actor":"MikeWilliams-UK","Number":"137","RawContent":null,"Title":"Add V3.1 repo and change documentation link","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/137","RelatedDescription":"Closed or merged PR \"Add V3.1 repo and change documentation link\" (#137)"},{"Id":"419897914","IsPullRequest":true,"CreatedAt":"2019-03-18T21:03:34","Actor":"devlead","Number":"138","RawContent":null,"Title":"Add Dave to cake.md","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/138","RelatedDescription":"Closed or merged PR \"Add Dave to cake.md\" (#138)"},{"Id":"391459677","IsPullRequest":false,"CreatedAt":"2019-03-08T19:00:06","Actor":"manne","Number":"123","RawContent":null,"Title":"Missing logo for Steeltoe","State":"closed","Body":"`https://brandfolder.com/pivotal-assets/attachments/ohxttd-7yxa60-clvf50/pivotal-assets-pivotal-genericfile.png` redirects to a sign in page\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L128-L130","Url":"https://github.com/dotnet/foundation/issues/123","RelatedDescription":"Closed issue \"Missing logo for Steeltoe\" (#123)"},{"Id":"417018694","IsPullRequest":true,"CreatedAt":"2019-03-08T18:59:32","Actor":"jkonicki","Number":"136","RawContent":null,"Title":"Fix logo and update team contributors","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/136","RelatedDescription":"Closed or merged PR \"Fix logo and update team contributors\" (#136)"},{"Id":"416428925","IsPullRequest":true,"CreatedAt":"2019-03-08T18:59:00","Actor":"manne","Number":"135","RawContent":null,"Title":"adds Umbraco logo","State":"closed","Body":"fixes #124 ","Url":"https://github.com/dotnet/foundation/pull/135","RelatedDescription":"Closed or merged PR \"adds Umbraco logo\" (#135)"},{"Id":"391459812","IsPullRequest":false,"CreatedAt":"2019-03-08T18:59:00","Actor":"manne","Number":"124","RawContent":null,"Title":"Missing logo for Umbraco","State":"closed","Body":"`https://fbcdn-profile-a.akamaihd.net/hprofile-ak-xap1/v/t1.0-1/p160x160/971596_519168901464439_566592989_n.png?oh=ce61e5b4cbd60c0d99c4164cbb05a434&oe=54F091C9&__gda__=1424472439_c9f76213a915bc2af88246f464f29e8b` results in a 404.\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L149-L151","Url":"https://github.com/dotnet/foundation/issues/124","RelatedDescription":"Closed issue \"Missing logo for Umbraco\" (#124)"},{"Id":"416427614","IsPullRequest":true,"CreatedAt":"2019-03-08T18:58:45","Actor":"manne","Number":"134","RawContent":null,"Title":"adds the prism logo","State":"closed","Body":"fixes #126 ","Url":"https://github.com/dotnet/foundation/pull/134","RelatedDescription":"Closed or merged PR \"adds the prism logo\" (#134)"},{"Id":"391460225","IsPullRequest":false,"CreatedAt":"2019-03-08T18:58:44","Actor":"manne","Number":"126","RawContent":null,"Title":"No logo provided for Prism","State":"closed","Body":"Can/should this [image](http://prismlibrary.github.io/images/logo-prism-symbol@2x.png) be used?\r\n\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L155-L157","Url":"https://github.com/dotnet/foundation/issues/126","RelatedDescription":"Closed issue \"No logo provided for Prism\" (#126)"},{"Id":"416157860","IsPullRequest":true,"CreatedAt":"2019-03-08T18:58:26","Actor":"glennawatson","Number":"133","RawContent":null,"Title":"Add additional ReactiveUI organization projects.","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/133","RelatedDescription":"Closed or merged PR \"Add additional ReactiveUI organization projects.\" (#133)"},{"Id":"407251900","IsPullRequest":true,"CreatedAt":"2019-02-18T17:45:44","Actor":"Potapy4","Number":"132","RawContent":null,"Title":"Update MVVM project logo","State":"closed","Body":"Fixes dotnet/dotnetfoundation-website#72\r\nFixes #125","Url":"https://github.com/dotnet/foundation/pull/132","RelatedDescription":"Closed or merged PR \"Update MVVM project logo\" (#132)"},{"Id":"391459919","IsPullRequest":false,"CreatedAt":"2019-02-18T17:45:44","Actor":"manne","Number":"125","RawContent":null,"Title":"Missing logo for MVVM Light Toolkit","State":"closed","Body":"`https://raw.githubusercontent.com/paulcbetts/mvvmlight/master/Installer/InstallItems/html/MVVM_BlackText_190x147.png` results in a 404.\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L137-L139","Url":"https://github.com/dotnet/foundation/issues/125","RelatedDescription":"Closed issue \"Missing logo for MVVM Light Toolkit\" (#125)"},{"Id":"406210463","IsPullRequest":true,"CreatedAt":"2019-02-18T17:44:39","Actor":"NextTurn","Number":"131","RawContent":null,"Title":"Replace http links with https links","State":"closed","Body":"Replace http links with https where possible - both returned 200 OK.","Url":"https://github.com/dotnet/foundation/pull/131","RelatedDescription":"Closed or merged PR \"Replace http links with https links\" (#131)"},{"Id":"399191617","IsPullRequest":true,"CreatedAt":"2019-02-02T11:04:15","Actor":"NextTurn","Number":"130","RawContent":null,"Title":"Update Open XML links","State":"closed","Body":"OpenXmlDeveloper.org was shut down long ago.\r\n\r\nThe content has been moved to EricWhite.com.","Url":"https://github.com/dotnet/foundation/pull/130","RelatedDescription":"Closed or merged PR \"Update Open XML links\" (#130)"},{"Id":"395863354","IsPullRequest":true,"CreatedAt":"2019-01-09T22:28:14","Actor":"ErikEJ","Number":"128","RawContent":null,"Title":"Update of EF description","State":"closed","Body":"@divega !","Url":"https://github.com/dotnet/foundation/pull/128","RelatedDescription":"Closed or merged PR \"Update of EF description\" (#128)"},{"Id":"395901602","IsPullRequest":true,"CreatedAt":"2019-01-05T03:23:39","Actor":"MarcBruins","Number":"129","RawContent":null,"Title":"Update to absolute path","State":"closed","Body":"Update to absolute path so that when this list is copied the link will actually work","Url":"https://github.com/dotnet/foundation/pull/129","RelatedDescription":"Closed or merged PR \"Update to absolute path\" (#129)"},{"Id":"395705579","IsPullRequest":true,"CreatedAt":"2019-01-04T00:22:42","Actor":"carloscds","Number":"127","RawContent":null,"Title":"Update documentation information","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/127","RelatedDescription":"Closed or merged PR \"Update documentation information\" (#127)"},{"Id":"391459057","IsPullRequest":true,"CreatedAt":"2019-01-03T04:47:09","Actor":"manne","Number":"122","RawContent":null,"Title":"targets the existing document","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/122","RelatedDescription":"Closed or merged PR \"targets the existing document\" (#122)"},{"Id":"384569679","IsPullRequest":true,"CreatedAt":"2019-01-03T04:46:31","Actor":"JamesNK","Number":"121","RawContent":null,"Title":"Add Newtonsoft.Json","State":"closed","Body":"// @jongalloway ","Url":"https://github.com/dotnet/foundation/pull/121","RelatedDescription":"Closed or merged PR \"Add Newtonsoft.Json\" (#121)"},{"Id":"384212839","IsPullRequest":true,"CreatedAt":"2018-11-26T09:33:50","Actor":"stefanov-stefan","Number":"120","RawContent":null,"Title":"Added Telerik info","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/120","RelatedDescription":"Closed or merged PR \"Added Telerik info\" (#120)"},{"Id":"384212448","IsPullRequest":true,"CreatedAt":"2018-11-26T09:33:22","Actor":"stefanov-stefan","Number":"119","RawContent":null,"Title":"Added Telerik UWP proj","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/119","RelatedDescription":"Closed or merged PR \"Added Telerik UWP proj\" (#119)"},{"Id":"382378851","IsPullRequest":true,"CreatedAt":"2018-11-23T10:32:15","Actor":"pkgw","Number":"118","RawContent":null,"Title":"Update WorldWide Telescope","State":"closed","Body":"Some layout fixes, but the main change is that @pkgw is now the project director.","Url":"https://github.com/dotnet/foundation/pull/118","RelatedDescription":"Closed or merged PR \"Update WorldWide Telescope\" (#118)"},{"Id":"380070557","IsPullRequest":true,"CreatedAt":"2018-11-23T10:31:49","Actor":"leastprivilege","Number":"117","RawContent":null,"Title":"Update identityserver.md","State":"closed","Body":"significant whitespace","Url":"https://github.com/dotnet/foundation/pull/117","RelatedDescription":"Closed or merged PR \"Update identityserver.md\" (#117)"},{"Id":"379777451","IsPullRequest":true,"CreatedAt":"2018-11-13T04:21:35","Actor":"scottbrady91","Number":"116","RawContent":null,"Title":"Update to IdentityManager project","State":"closed","Body":"My employer and I have recently taken over the IdentityManager project from Dom & Brock. I've updated the IdentityManager page to reflect this and the newer version of the core repo.","Url":"https://github.com/dotnet/foundation/pull/116","RelatedDescription":"Closed or merged PR \"Update to IdentityManager project\" (#116)"}],"ResultType":"GitHubIssue"},"CoreCLR-Issues":{"Issues":[{"Id":"443527562","IsPullRequest":true,"CreatedAt":"2019-05-14T05:00:02","Actor":"sandreenko","Number":"24551","RawContent":null,"Title":"Exclude eventsourcetrace from jitstress runs.","State":"closed","Body":"It blocks clean[ JitStress runs](https://dev.azure.com/dnceng/public/_build?definitionId=348).\r\n\r\nRevert this when #24423 is fixed.","Url":"https://github.com/dotnet/coreclr/pull/24551","RelatedDescription":"Closed or merged PR \"Exclude eventsourcetrace from jitstress runs.\" (#24551)"},{"Id":"443663560","IsPullRequest":true,"CreatedAt":"2019-05-14T03:59:33","Actor":"AaronRobinsonMSFT","Number":"24562","RawContent":null,"Title":"Miscellaneous build issues","State":"closed","Body":"","Url":"https://github.com/dotnet/coreclr/pull/24562","RelatedDescription":"Closed or merged PR \"Miscellaneous build issues\" (#24562)"},{"Id":"443698336","IsPullRequest":false,"CreatedAt":"2019-05-14T03:55:29","Actor":"mhamri","Number":"24564","RawContent":null,"Title":"Debug.Fail is crashing the application in linux","State":"open","Body":"```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.203\r\n Commit:    e5bab63eca\r\n\r\nRuntime Environment:\r\n OS Name:     ubuntu\r\n OS Version:  16.04\r\n OS Platform: Linux\r\n RID:         ubuntu.16.04-x64\r\n Base Path:   /usr/share/dotnet/sdk/2.2.203/\r\n\r\nHost (useful for support):\r\n  Version: 2.2.4\r\n  Commit:  f95848e524\r\n\r\n.NET Core SDKs installed:\r\n  2.2.203 [/usr/share/dotnet/sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.2.4 [/usr/share/dotnet/shared/Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.4 [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.2.4 [/usr/share/dotnet/shared/Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n\r\n```\r\n\r\nI am running an application that is published in release mode. still the Debug.Fail() is getting hit and it causes the application exit right away, even though the Debug.Fail() is in a try-catch module but it causes the application to exit immediately. even though the application is published and environment set to production and configuration is released still the problem exists, I saw the same error back to 2016-2018, but look like it's still not fixed \r\n\r\n\r\n```\r\npublic static IWebHost SeedConfigData(this IWebHost host)\r\n        {\r\n            using (var scope = host.Services.CreateScope())\r\n            {\r\n                var serviceProvider = scope.ServiceProvider;\r\n\r\n                try\r\n                {\r\n                    Task.Run(async () =>\r\n                    {\r\n                        var dataseed = serviceProvider.GetService<DbSeederConfigData>();\r\n                        await dataseed.ApplySeeds();\r\n                    }).Wait();\r\n                }\r\n                catch (Exception e)\r\n                {\r\n                    Debug.Fail(e.Message, e.StackTrace);\r\n                    var logger = serviceProvider.GetRequiredService<ILogger<DbSeederConfigData>>();\r\n                    logger.LogError(e, \"An error occurred seeding the DB.\");\r\n                }\r\n            }\r\n            return host;\r\n        }\r\n```","Url":"https://github.com/dotnet/coreclr/issues/24564","RelatedDescription":"Open issue \"Debug.Fail is crashing the application in linux\" (#24564)"},{"Id":"443665591","IsPullRequest":true,"CreatedAt":"2019-05-14T01:10:51","Actor":"sdmaclea","Number":"24563","RawContent":null,"Title":"RemoveThrowMessage","State":"closed","Body":"","Url":"https://github.com/dotnet/coreclr/pull/24563","RelatedDescription":"Closed or merged PR \"RemoveThrowMessage\" (#24563)"},{"Id":"443661734","IsPullRequest":true,"CreatedAt":"2019-05-14T00:50:33","Actor":"sywhang","Number":"24561","RawContent":null,"Title":"Add more runtime GC counters","State":"open","Body":"Part of https://github.com/dotnet/coreclr/issues/20372. \r\n\r\nThis adds these new runtime counters:\r\n- % time in GC counter\r\n- Gen 0 / 1 / 2 / LOH size counter\r\n- Allocation rate counter\r\n\r\nChanges in the GC side:\r\n- Added 3 new interfaces in IGCHeap:\r\n    - `int GetPercentTimeInGC()`\r\n    - `uint64_t GetGenerationSize(int gen)`\r\n    - `uint64_t GetTotalAllocated()`\r\n- Add corresponding internal calls and internal only APIs in GC.cs that use these.\r\n- Added GCCounterData struct that keeps track of stats now that `GetPerfCounters()` is nonexistent. \r\n- I tried to leave `gcee.cpp` as it is as much as possible in case we want to add more counters (i.e. commited bytes, induced GCs, etc.) in the future due to customer needs.\r\n\r\n","Url":"https://github.com/dotnet/coreclr/pull/24561","RelatedDescription":"Open PR \"Add more runtime GC counters\" (#24561)"},{"Id":"443655244","IsPullRequest":true,"CreatedAt":"2019-05-14T00:16:31","Actor":"echesakovMSFT","Number":"24560","RawContent":null,"Title":"Enable JIT\\superpmi\\superpmicollect on Linux and macOS","State":"open","Body":"Fixes https://github.com/dotnet/coreclr/issues/22009.\r\n\r\nDepends on: https://github.com/dotnet/coreclr/pull/24537 https://github.com/dotnet/coreclr/pull/24508","Url":"https://github.com/dotnet/coreclr/pull/24560","RelatedDescription":"Open PR \"Enable JIT\\superpmi\\superpmicollect on Linux and macOS\" (#24560)"},{"Id":"443648091","IsPullRequest":true,"CreatedAt":"2019-05-13T23:48:26","Actor":"AaronRobinsonMSFT","Number":"24558","RawContent":null,"Title":"Was too aggressive with changes to PackageOutputPath property.","State":"closed","Body":"  - This represents this repo's generated packages rather than\r\n    packages it consumes.\r\n\r\ncc @RussKeldorph @sbomer ","Url":"https://github.com/dotnet/coreclr/pull/24558","RelatedDescription":"Closed or merged PR \"Was too aggressive with changes to PackageOutputPath property.\" (#24558)"},{"Id":"443649040","IsPullRequest":true,"CreatedAt":"2019-05-13T23:48:03","Actor":"fadimounir","Number":"24559","RawContent":null,"Title":"Fix bug where crossgen would throw OOM error","State":"open","Body":"Fix bug where crossgen would throw OOM when given an input with no dir-separator characters (arithmetic overflow bug).\r\nUsing crossgen from the SDK (dotnet publish) is not impacted by this issue.\r\n\r\nThe /CreatePerfMap codepath doesn't have this bug.\r\n\r\nFixes #24458 ","Url":"https://github.com/dotnet/coreclr/pull/24559","RelatedDescription":"Open PR \"Fix bug where crossgen would throw OOM error\" (#24559)"},{"Id":"443633562","IsPullRequest":true,"CreatedAt":"2019-05-13T22:44:38","Actor":"fadimounir","Number":"24557","RawContent":null,"Title":"Making crossgen throw when compiling with the PartialNgen flag and no IBC data","State":"open","Body":"Fixes #21495 ","Url":"https://github.com/dotnet/coreclr/pull/24557","RelatedDescription":"Open PR \"Making crossgen throw when compiling with the PartialNgen flag and no IBC data\" (#24557)"},{"Id":"443613211","IsPullRequest":true,"CreatedAt":"2019-05-13T22:34:32","Actor":"AaronRobinsonMSFT","Number":"24556","RawContent":null,"Title":"The PackagesDir property is used in places that expected a trailing s…","State":"closed","Body":"…lash.\r\n\r\ncc @RussKeldorph ","Url":"https://github.com/dotnet/coreclr/pull/24556","RelatedDescription":"Closed or merged PR \"The PackagesDir property is used in places that expected a trailing s…\" (#24556)"},{"Id":"443523186","IsPullRequest":true,"CreatedAt":"2019-05-13T22:00:17","Actor":"tannergooding","Number":"24550","RawContent":null,"Title":"Adding the .packagesreports and .packagesspecs folders to the gitignore","State":"closed","Body":"These now show up in the list of pending changes after building.","Url":"https://github.com/dotnet/coreclr/pull/24550","RelatedDescription":"Closed or merged PR \"Adding the .packagesreports and .packagesspecs folders to the gitignore\" (#24550)"},{"Id":"443575463","IsPullRequest":true,"CreatedAt":"2019-05-13T20:01:02","Actor":"tannergooding","Number":"24555","RawContent":null,"Title":"Ensure the code size estimate for emitIns_R_S is correct for 4 byte SSE instruction.","State":"open","Body":"This resolves #24545 by applying a targeted fix. The code size logic really needs to be updated to have this stuff centralized...","Url":"https://github.com/dotnet/coreclr/pull/24555","RelatedDescription":"Open PR \"Ensure the code size estimate for emitIns_R_S is correct for 4 byte SSE instruction.\" (#24555)"},{"Id":"443562490","IsPullRequest":true,"CreatedAt":"2019-05-13T19:26:15","Actor":"echesakovMSFT","Number":"24554","RawContent":null,"Title":"Unconditionally capture output of xUnit tests","State":"open","Body":"","Url":"https://github.com/dotnet/coreclr/pull/24554","RelatedDescription":"Open PR \"Unconditionally capture output of xUnit tests\" (#24554)"},{"Id":"443560312","IsPullRequest":true,"CreatedAt":"2019-05-13T19:20:26","Actor":"sandreenko","Number":"24553","RawContent":null,"Title":"Exclude tests that are failing under gc stress","State":"open","Body":"fb7abbca59: Disable tests that are failing with timeouts.\r\n\r\nSee examples in https://dev.azure.com/dnceng/public/_build/results?buildId=186855&view=ms.vss-test-web.build-test-results-tab\r\n\r\n9cea1cfb07: Disable versionbubbles under GCStress.\r\n\r\nThe issue is https://github.com/dotnet/coreclr/issues/22245\r\n\r\n449843d592: Disable _il_relu_fld under GCStress.\r\n\r\nThe issue is https://github.com/dotnet/coreclr/issues/24464\r\n\r\n\r\nThe PR doesn't disable all failing tests, only the known stable issues.","Url":"https://github.com/dotnet/coreclr/pull/24553","RelatedDescription":"Open PR \"Exclude tests that are failing under gc stress\" (#24553)"},{"Id":"443532393","IsPullRequest":true,"CreatedAt":"2019-05-13T18:09:55","Actor":"tarekgh","Number":"24552","RawContent":null,"Title":"Add a documentation link to the missing resources exception messages","State":"open","Body":"Add a documentation link to the missing resources exception messages\r\n\r\nThe link would include more information regarding what can cause this exception to help developers diagnose and fix it. Note, the link is pointing at the exception documentation and we have a tracking doc issue https://github.com/dotnet/docs/issues/10031 to capture the needed information there.","Url":"https://github.com/dotnet/coreclr/pull/24552","RelatedDescription":"Open PR \"Add a documentation link to the missing resources exception messages\" (#24552)"},{"Id":"443416565","IsPullRequest":true,"CreatedAt":"2019-05-13T17:14:29","Actor":"gbalykov","Number":"24547","RawContent":null,"Title":"Fix build error for mscoree coreclr.exports","State":"closed","Body":"Build error: `No rule to make target src/dlls/mscoree/coreclr/coreclr.exports`\r\n\r\nThis partially reverts #23853.\r\n\r\nError happened due to changes in `functions.cmake` in #23853. Function `generate_exports_file` may get multiple files as an input, so usage of a single file `inputFilename` is incorrect.\r\n\r\n@alpencolt @alexander-aksenov @jkotas \r\n\r\n","Url":"https://github.com/dotnet/coreclr/pull/24547","RelatedDescription":"Closed or merged PR \"Fix build error for mscoree coreclr.exports\" (#24547)"},{"Id":"443479444","IsPullRequest":false,"CreatedAt":"2019-05-13T16:00:37","Actor":"myarichuk","Number":"24549","RawContent":null,"Title":"AccessViolationException in .Net Core 2.2.203","State":"open","Body":"The exception happens intermittently when running specific RavenDB test in a 64-bit Windows process. \r\n\r\n``dotnet --info`` returns the following:\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.203\r\n Commit:    e5bab63eca\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.203\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.4\r\n  Commit:  f95848e524\r\n\r\n.NET Core SDKs installed:\r\n  2.2.203 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.2.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n```\r\nThe following code was used to reproduce this. On my machine reproduction takes between 30 minutes to several hours to happen\r\n(the code for the test itself can be found here: https://github.com/ravendb/ravendb/blob/v4.2/test/SlowTests/Server/Documents/PeriodicBackup/RavenDB-11139.cs)\r\n```\r\nfor (int i = 0; i < 500; i++)\r\n{\r\n    Parallel.For(0, 1000, new ParallelOptions\r\n    {\r\n        MaxDegreeOfParallelism = 2\r\n    }, _ =>\r\n    {\r\n        using (var test = new RavenDB_11139())\r\n        {\r\n        test.CreateFullAndIncrementalBackupWithCompareExchange().Wait();\r\n        }\r\n    });\r\n}\r\n```\r\n\r\nThe stack trace of the AccessViolationException typically looks like this:\r\n```\r\n # Child-SP          RetAddr           Call Site\r\n00 (Inline Function) --------`-------- coreclr!Volatile<enum AppDomain::Stage>::Load+0x5 [e:\\a\\_work\\572\\s\\src\\inc\\volatile.h @ 292] \r\n01 (Inline Function) --------`-------- coreclr!Volatile<enum AppDomain::Stage>::operator enum AppDomain::Stage+0x5 [e:\\a\\_work\\572\\s\\src\\inc\\volatile.h @ 346] \r\n02 (Inline Function) --------`-------- coreclr!AppDomain::NoAccessToHandleTable+0x5 [e:\\a\\_work\\572\\s\\src\\vm\\appdomain.hpp @ 3138] \r\n03 0000001a`f023a4c8 00007ffc`606af2f6 coreclr!MethodTable::GetLoaderAllocatorObjectForGC+0x11 [e:\\a\\_work\\572\\s\\src\\vm\\methodtable.cpp @ 10100] \r\n04 0000001a`f023a4d0 00007ffc`6056e292 coreclr!WKS::gc_heap::mark_object_simple1+0x140d76 [e:\\a\\_work\\572\\s\\src\\gc\\gc.cpp @ 17800] \r\n05 0000001a`f023a560 00007ffc`6056fd39 coreclr!WKS::gc_heap::mark_object_simple+0x1b2 [e:\\a\\_work\\572\\s\\src\\gc\\gc.cpp @ 18285] \r\n06 0000001a`f023a5b0 00007ffc`6056f39a coreclr!WKS::GCHeap::Promote+0x79 [e:\\a\\_work\\572\\s\\src\\gc\\gc.cpp @ 33830] \r\n07 (Inline Function) --------`-------- coreclr!GcInfoDecoder::ReportStackSlotToGC+0x49 [e:\\a\\_work\\572\\s\\src\\vm\\gcinfodecoder.cpp @ 1841] \r\n08 (Inline Function) --------`-------- coreclr!GcInfoDecoder::ReportSlotToGC+0x6a [e:\\a\\_work\\572\\s\\src\\inc\\gcinfodecoder.h @ 679] \r\n09 (Inline Function) --------`-------- coreclr!GcInfoDecoder::ReportUntrackedSlots+0x80 [e:\\a\\_work\\572\\s\\src\\vm\\gcinfodecoder.cpp @ 1027] \r\n0a 0000001a`f023a610 00007ffc`6056d4a1 coreclr!GcInfoDecoder::EnumerateLiveSlots+0x59a [e:\\a\\_work\\572\\s\\src\\vm\\gcinfodecoder.cpp @ 976] \r\n0b 0000001a`f023aa60 00007ffc`6056c4cc coreclr!EECodeManager::EnumGcRefs+0x141 [e:\\a\\_work\\572\\s\\src\\vm\\eetwain.cpp @ 5130] \r\n0c 0000001a`f023ac00 00007ffc`6056ab8e coreclr!GcStackCrawlCallBack+0x11c [e:\\a\\_work\\572\\s\\src\\vm\\gcenv.ee.common.cpp @ 304] \r\n0d (Inline Function) --------`-------- coreclr!Thread::MakeStackwalkerCallback+0x73 [e:\\a\\_work\\572\\s\\src\\vm\\stackwalk.cpp @ 877] \r\n0e 0000001a`f023adb0 00007ffc`60567c64 coreclr!Thread::StackWalkFramesEx+0x106 [e:\\a\\_work\\572\\s\\src\\vm\\stackwalk.cpp @ 958] \r\n0f 0000001a`f023b1a0 00007ffc`6055bed1 coreclr!Thread::StackWalkFrames+0xc0 [e:\\a\\_work\\572\\s\\src\\vm\\stackwalk.cpp @ 1042] \r\n10 (Inline Function) --------`-------- coreclr!ScanStackRoots+0x84 [e:\\a\\_work\\572\\s\\src\\vm\\gcenv.ee.cpp @ 149] \r\n11 (Inline Function) --------`-------- coreclr!GCToEEInterface::GcScanRoots+0x14a [e:\\a\\_work\\572\\s\\src\\vm\\gcenv.ee.cpp @ 178] \r\n12 (Inline Function) --------`-------- coreclr!GCScan::GcScanRoots+0x14a [e:\\a\\_work\\572\\s\\src\\gc\\gcscan.cpp @ 155] \r\n13 0000001a`f023c2b0 00007ffc`605eb3e1 coreclr!WKS::gc_heap::mark_phase+0x361 [e:\\a\\_work\\572\\s\\src\\gc\\gc.cpp @ 19624] \r\n14 0000001a`f023c530 00007ffc`605edf3f coreclr!WKS::gc_heap::gc1+0xb1 [e:\\a\\_work\\572\\s\\src\\gc\\gc.cpp @ 15390] \r\n15 (Inline Function) --------`-------- coreclr!GCToOSInterface::GetLowPrecisionTimeStamp+0x5 [e:\\a\\_work\\572\\s\\src\\vm\\gcenv.os.cpp @ 704] \r\n16 0000001a`f023c630 00007ffc`605aba5e coreclr!WKS::gc_heap::garbage_collect+0x29f [e:\\a\\_work\\572\\s\\src\\gc\\gc.cpp @ 16967] \r\n17 0000001a`f023c730 00007ffc`6057240e coreclr!WKS::GCHeap::GarbageCollectGeneration+0x19e [e:\\a\\_work\\572\\s\\src\\gc\\gc.cpp @ 35107] \r\n18 (Inline Function) --------`-------- coreclr!WKS::gc_heap::try_allocate_more_space+0x233 [e:\\a\\_work\\572\\s\\src\\gc\\gc.cpp @ 13197] \r\n19 (Inline Function) --------`-------- coreclr!WKS::gc_heap::allocate_more_space+0x233 [e:\\a\\_work\\572\\s\\src\\gc\\gc.cpp @ 13490] \r\n1a (Inline Function) --------`-------- coreclr!WKS::gc_heap::allocate+0x5a9 [e:\\a\\_work\\572\\s\\src\\gc\\gc.cpp @ 13521] \r\n1b (Inline Function) --------`-------- coreclr!WKS::GCHeap::Alloc+0x5d1 [e:\\a\\_work\\572\\s\\src\\gc\\gc.cpp @ 34419] \r\n1c (Inline Function) --------`-------- coreclr!Alloc+0x6ad [e:\\a\\_work\\572\\s\\src\\vm\\gchelpers.cpp @ 241] \r\n1d (Inline Function) --------`-------- coreclr!AllocateObject+0x701 [e:\\a\\_work\\572\\s\\src\\vm\\gchelpers.cpp @ 1156] \r\n1e 0000001a`f023c780 00007ffc`554e4bfb coreclr!JIT_New+0x7ee [e:\\a\\_work\\572\\s\\src\\vm\\jithelpers.cpp @ 2810] \r\n1f 0000001a`f023cb50 00007ffc`554e6e68 System_Private_CoreLib!System.Attribute.InternalGetCustomAttributes(System.Reflection.PropertyInfo, System.Type, Boolean)$##60004EF+0x5b\r\n20 0000001a`f023cbc0 00007ffc`00ba2f50 System_Private_CoreLib!System.Reflection.CustomAttributeExtensions.GetCustomAttributes[System.__Canon](System.Reflection.MemberInfo)$##600333B+0x38\r\n21 0000001a`f023cc10 00007ffc`703ac3ed 0x00007ffc`00ba2f50\r\n22 0000001a`f023cc70 00007ffc`703afb03 System_Linq!System.Linq.Enumerable+RangeIterator.TryGetLast(Boolean ByRef)$##6000151+0xd9d\r\n23 0000001a`f023ccc0 00007ffc`703b5ca6 System_Linq!System.Linq.Enumerable+RangeIterator.TryGetLast(Boolean ByRef)$##6000151+0x44b3\r\n24 0000001a`f023cd50 00007ffc`703b8e2d System_Linq!System.Linq.Enumerable+RangeIterator.TryGetLast(Boolean ByRef)$##6000151+0xa656\r\n25 0000001a`f023cda0 00007ffc`703ad6ff System_Linq!System.Linq.Error.NotSupported()$##60002B0+0x2c6d\r\n26 0000001a`f023ce00 00007ffc`00ba1aee System_Linq!System.Linq.Enumerable+RangeIterator.TryGetLast(Boolean ByRef)$##6000151+0x20af\r\n27 0000001a`f023ce50 00007ffc`00b9f6fa 0x00007ffc`00ba1aee\r\n28 0000001a`f023d740 00007ffc`00b9ed4a 0x00007ffc`00b9f6fa\r\n29 0000001a`f023d860 00007ffc`01d79f92 0x00007ffc`00b9ed4a\r\n2a 0000001a`f023dca0 00007ffc`01d7928f 0x00007ffc`01d79f92\r\n2b 0000001a`f023dda0 00007ffc`02311f9d 0x00007ffc`01d7928f\r\n2c 0000001a`f023dee0 00007ffc`01d8877a 0x00007ffc`02311f9d\r\n2d 0000001a`f023e070 00007ffc`01d87633 0x00007ffc`01d8877a\r\n2e 0000001a`f023e100 00007ffc`01d87210 0x00007ffc`01d87633\r\n2f 0000001a`f023e420 00007ffc`01b513ed 0x00007ffc`01d87210\r\n30 0000001a`f023e460 00007ffc`01d87086 0x00007ffc`01b513ed\r\n31 0000001a`f023e4d0 00007ffc`01d4d7ef 0x00007ffc`01d87086\r\n32 0000001a`f023e590 00007ffc`01cf36d1 0x00007ffc`01d4d7ef\r\n33 0000001a`f023e600 00007ffc`55422019 0x00007ffc`01cf36d1\r\n34 0000001a`f023e670 00007ffc`55510052 System_Private_CoreLib!System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object)$##600288E+0x89\r\n35 0000001a`f023e6f0 00007ffc`6064a673 System_Private_CoreLib!System.Threading.ThreadPoolWorkQueue.Dispatch()$##6002670+0x1a2\r\n36 0000001a`f023e790 00007ffc`60522c49 coreclr!CallDescrWorkerInternal+0x83 [E:\\A\\_work\\572\\s\\src\\vm\\amd64\\CallDescrWorkerAMD64.asm @ 101] \r\n37 (Inline Function) --------`-------- coreclr!CallDescrWorkerWithHandler+0x53 [e:\\a\\_work\\572\\s\\src\\vm\\callhelpers.cpp @ 78] \r\n38 0000001a`f023e7d0 00007ffc`605228a8 coreclr!MethodDescCallSite::CallTargetWorker+0x2b5 [e:\\a\\_work\\572\\s\\src\\vm\\callhelpers.cpp @ 628] \r\n39 (Inline Function) --------`-------- coreclr!MethodDescCallSite::Call_RetBool+0x15 [e:\\a\\_work\\572\\s\\src\\vm\\callhelpers.h @ 433] \r\n3a 0000001a`f023e920 00007ffc`6052273c coreclr!QueueUserWorkItemManagedCallback+0x98 [e:\\a\\_work\\572\\s\\src\\vm\\comthreadpool.cpp @ 451] \r\n3b (Inline Function) --------`-------- coreclr!ManagedThreadBase_DispatchInner+0x5b [e:\\a\\_work\\572\\s\\src\\vm\\threads.cpp @ 8850] \r\n3c 0000001a`f023ea10 00007ffc`605225c3 coreclr!ManagedThreadBase_DispatchMiddle+0xe4 [e:\\a\\_work\\572\\s\\src\\vm\\threads.cpp @ 8901] \r\n3d 0000001a`f023eb40 00007ffc`605224c0 coreclr!ManagedThreadBase_DispatchOuter+0xaf [e:\\a\\_work\\572\\s\\src\\vm\\threads.cpp @ 9140] \r\n3e (Inline Function) --------`-------- coreclr!ManagedThreadBase_FullTransitionWithAD+0x56 [e:\\a\\_work\\572\\s\\src\\vm\\threads.cpp @ 9199] \r\n3f (Inline Function) --------`-------- coreclr!ManagedThreadBase::ThreadPool+0x56 [e:\\a\\_work\\572\\s\\src\\vm\\threads.cpp @ 9241] \r\n40 0000001a`f023ebe0 00007ffc`60521d1f coreclr!ManagedPerAppDomainTPCount::DispatchWorkItem+0xe0 [e:\\a\\_work\\572\\s\\src\\vm\\threadpoolrequest.cpp @ 758] \r\n41 (Inline Function) --------`-------- coreclr!ThreadpoolMgr::ExecuteWorkRequest+0x139 [e:\\a\\_work\\572\\s\\src\\vm\\win32threadpool.cpp @ 1560] \r\n42 0000001a`f023ed40 00007ffc`605aa34a coreclr!ThreadpoolMgr::WorkerThreadStart+0x2df [e:\\a\\_work\\572\\s\\src\\vm\\win32threadpool.cpp @ 2025] \r\n43 0000001a`f023ef40 00007ffc`8e024034 coreclr!Thread::intermediateThreadProc+0x8a [e:\\a\\_work\\572\\s\\src\\vm\\threads.cpp @ 2255] \r\n44 0000001a`f023fa80 00007ffc`8fe63691 kernel32!BaseThreadInitThunk+0x14\r\n45 0000001a`f023fab0 00000000`00000000 ntdll!RtlUserThreadStart+0x21\r\n```\r\n\r\nI have captured several dumps from when the AVE happened. They are available to download from this link: https://drive.google.com/file/d/1bNY6GZw3BhpsK73i8naiEB-AY_-LdNjy/view?usp=sharing","Url":"https://github.com/dotnet/coreclr/issues/24549","RelatedDescription":"Open issue \"AccessViolationException in .Net Core 2.2.203\" (#24549)"},{"Id":"443422753","IsPullRequest":false,"CreatedAt":"2019-05-13T14:13:40","Actor":"quantrpeter","Number":"24548","RawContent":null,"Title":"ildasm has to run by full path","State":"open","Body":"Hi\r\n   I successfully built coreclr and added bin/Product/OSX.x64.Debug to $PATH in mac. But when i execute ildasm, i got segmentation fault. If i execute by full path, it works. Why?\r\n\r\nIf i get into the powershell in mac by command \"pwsh\", then execute ildasm, it works again, so wried.\r\n\r\n```\r\n/Users/peter/workspace/hostclr>which ildasm\r\n/Users/peter/workspace/coreclr/bin/Product/OSX.x64.Debug/ildasm\r\n/Users/peter/workspace/hostclr>ildasm\r\nSegmentation fault: 11\r\n/Users/peter/workspace/hostclr>/Users/peter/workspace/coreclr/bin/Product/OSX.x64.Debug/ildasm\r\nUsage: ildasm [options] <file_name> [options]\r\n\r\nOptions for output redirection:\r\n  /OUT=<file name>    Direct output to file rather than to console.\r\n[Undefined resource string ID:0xCC]  /HTML               Output in HTML format (valid with /OUT option only).\r\n  /RTF                Output in rich text format (valid with /OUT option only).\r\nOptions for file/console output:\r\n  /BYTES              Show actual bytes (in hex) as instruction comments.\r\n  /RAWEH              Show exception handling clauses in raw form.\r\n  /TOKENS             Show metadata tokens of classes and members.\r\n  /SOURCE             Show original source lines as comments.\r\n  /PRETTY             This option is obsolete and no longer supported.\r\n  /LINENUM            Include references to original source lines.\r\n  /VISIBILITY=<vis>[+<vis>...]    Only disassemble the items with specified\r\n          visibility. (<vis> = PUB | PRI | FAM | ASM | FAA | FOA | PSC)\r\n  /PUBONLY            Only disassemble the public items (same as /VIS=PUB).\r\n  /QUOTEALLNAMES      Include all names into single quotes.\r\n  /NOCA               Suppress output of custom attributes.\r\n  /CAVERBAL           Output CA blobs in verbal form (default - in binary form).\r\n[Undefined resource string ID:0xDC]The following options are valid for file/console output only:\r\nOptions for EXE and DLL files:\r\n  /UTF8               Use UTF-8 encoding for output (default - ANSI).\r\n  /UNICODE            Use UNICODE encoding for output.\r\n  /NOIL               Suppress IL assembler code output.\r\n  /FORWARD            Use forward class declaration.\r\n  /TYPELIST           Output full list of types (to preserve type ordering in round-trip).\r\n  /PROJECT            Display .NET projection view if input is a .winmd file.\r\n  /HEADERS            Include file headers information in the output.\r\n  /ITEM=<class>[::<method>[(<sig>)]  Disassemble the specified item only\r\n\r\n  /STATS              Include statistics on the image.\r\n  /CLASSLIST          Include list of classes defined in the module.\r\n  /ALL                Combination of /HEADER,/BYTES,/STATS,/CLASSLIST,/TOKENS\r\n\r\n  /METADATA[=<specifier>] Show MetaData, where <specifier> is:\r\n          MDHEADER    Show MetaData header information and sizes.\r\n          HEX         Show more things in hex as well as words.\r\n          CSV         Show the record counts and heap sizes.\r\n          UNREX       Show unresolved externals.\r\n          SCHEMA      Show the MetaData header and schema information.\r\n          RAW         Show the raw MetaData tables.\r\n          HEAPS       Show the raw heaps.\r\n          VALIDATE    Validate the consistency of the metadata.\r\n\r\nOption key is '-' or '/', options are recognized by first 3 characters\r\n\r\nExample:  ildasm /tok /byt myfile.exe /out=myfile.il\r\n```\r\n\r\nThanks","Url":"https://github.com/dotnet/coreclr/issues/24548","RelatedDescription":"Open issue \"ildasm has to run by full path\" (#24548)"},{"Id":"443395805","IsPullRequest":false,"CreatedAt":"2019-05-13T13:22:51","Actor":"ww898","Number":"24546","RawContent":null,"Title":"CLSID_CLRProfiling is absent in metahost.h","State":"open","Body":"There is only one reference in comment: https://github.com/dotnet/coreclr/blob/70300c711b9e507d251f9a31d5c4be9653dd4c8a/src/inc/metahost.idl#L491, but there is no any more declaration for `CLSID_CLRProfiling`","Url":"https://github.com/dotnet/coreclr/issues/24546","RelatedDescription":"Open issue \"CLSID_CLRProfiling is absent in metahost.h\" (#24546)"},{"Id":"443173766","IsPullRequest":false,"CreatedAt":"2019-05-13T01:45:03","Actor":"AriNuer","Number":"24545","RawContent":null,"Title":"[x64\\windows] Assertion failed 'emitInstCodeSz(id) >= csz'","State":"open","Body":"**Job:**\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/view/x64/job/jitstress/job/x64_checked_windows_nt_jitx86hwintrinsicnoavx/460/testReport/\r\n\r\n**Failed test:**\r\nJIT_HardwareIntrinsics._X86_Sse41_ConvertToVector128_r_ConvertToVector128_r_.JIT\\\\HardwareIntrinsics\\\\X86\\\\Sse41\\\\ConvertToVector128_r\\\\ConvertToVector128_r.cmd\r\n\r\n**Failed log:**\r\n```\r\nJIT_HardwareIntrinsics._X86_Sse41_ConvertToVector128_r_ConvertToVector128_r_._X86_Sse41_ConvertToVector128_r_ConvertToVector128_r_cmd()\r\n        Output:\r\n          \r\n          Assert failure(PID 10672 [0x000029b0], Thread: 3860 [0x0f14]): Assertion failed 'emitInstCodeSz(id) >= csz' in 'JIT.HardwareIntrinsics.X86.SimpleUnaryOpTest__ConvertToVector128Int16Byte:RunBasicScenario_UnsafeRead():this' (IL size 76)\r\n          \r\n              File: d:\\j\\workspace\\x64_checked_w---0b14f95b\\src\\jit\\emit.cpp Line: 3500\r\n              Image: D:\\j\\workspace\\x64_checked_w---0b14f95b\\bin\\tests\\Windows_NT.x64.Checked\\Tests\\Core_Root\\CoreRun.exe\r\n          \r\n          \r\n          Return code:      1\r\n          Raw output file:      D:\\j\\workspace\\x64_checked_w---0b14f95b\\bin\\tests\\Windows_NT.x64.Checked\\Reports\\JIT.HardwareIntrinsics\\X86\\Sse41\\ConvertToVector128_r\\ConvertToVector128_r.output.txt\r\n          Raw output:\r\n          BEGIN EXECUTION\r\n           \"D:\\j\\workspace\\x64_checked_w---0b14f95b\\bin\\tests\\Windows_NT.x64.Checked\\Tests\\Core_Root\\corerun.exe\" ConvertToVector128_r.exe \r\n          Supported ISAs:\r\n            AES:       True\r\n            AVX:       False\r\n            AVX2:      False\r\n            BMI1:      False\r\n            BMI2:      False\r\n            FMA:       False\r\n            LZCNT:     True\r\n            PCLMULQDQ: True\r\n            POPCNT:    True\r\n            SSE:       True\r\n            SSE2:      True\r\n            SSE3:      True\r\n            SSE4.1:    True\r\n            SSE4.2:    True\r\n            SSSE3:     True\r\n          \r\n          Beginning test case ConvertToVector128Int16.Byte at 5/12/2019 4:53:58 PM\r\n          Random seed: 20010415; set environment variable CORECLR_SEED to this value to repro\r\n          \r\n          Expected: 100\r\n          Actual: -1073740286\r\n          END EXECUTION - FAILED\r\n          FAILED\r\n          Test Harness Exitcode is : 1\r\n```","Url":"https://github.com/dotnet/coreclr/issues/24545","RelatedDescription":"Open issue \"[x64\\windows] Assertion failed 'emitInstCodeSz(id) >= csz'\" (#24545)"},{"Id":"443051094","IsPullRequest":true,"CreatedAt":"2019-05-13T00:23:52","Actor":"AaronRobinsonMSFT","Number":"24539","RawContent":null,"Title":"Cleanup some build files","State":"closed","Body":"","Url":"https://github.com/dotnet/coreclr/pull/24539","RelatedDescription":"Closed or merged PR \"Cleanup some build files\" (#24539)"},{"Id":"443102801","IsPullRequest":true,"CreatedAt":"2019-05-12T14:20:50","Actor":"YohDeadfall","Number":"24544","RawContent":null,"Title":"Fixed link to .NET Core SDK","State":"closed","Body":"Changed a link to .NET Core download page. Previously it led to a sample application.","Url":"https://github.com/dotnet/coreclr/pull/24544","RelatedDescription":"Closed or merged PR \"Fixed link to .NET Core SDK\" (#24544)"},{"Id":"443101264","IsPullRequest":false,"CreatedAt":"2019-05-12T12:54:03","Actor":"dhcgn","Number":"24543","RawContent":null,"Title":"PublishSingleFile for Linux-Exe is way better compressable than Windows-Exe","State":"open","Body":"When I used the flag `p:PublishSingleFile` I tried to reduce the file size with [UPX](https://upx.github.io). It came to my attention that the executable for linux is way better compressable than the executable for windows. The ratio is 28% vs. 99%\r\n\r\nBuild with 3.0.100-preview5-011568\r\n\r\nI small size of the single file is preferred so it would be obvious to enable a good compress ratio.\r\n\r\n### Code\r\n\r\n```\r\nstatic void Main(string[] args)\r\n{\r\n    Console.WriteLine(\"Hello World!\");\r\n}\r\n```\r\n\r\n### Windows Executable\r\n\r\nCreated with: `dotnet publish -r win-x64 /p:PublishSingleFile=true `\r\n\r\n```\r\n                      Ultimate Packer for eXecutables\r\n                          Copyright (C) 1996 - 2018\r\nUPX 3.95w       Markus Oberhumer, Laszlo Molnar & John Reiser   Aug 26th 2018\r\n\r\n        File size         Ratio      Format      Name\r\n   --------------------   ------   -----------   -----------\r\n  70272298 ->  70062378   99.70%    win64/pe     ConsoleApp1.exe             \r\n```\r\n\r\n### Linux Executable\r\n\r\nCreated with: `dotnet publish -r linux-x64 /p:PublishSingleFile=true `\r\n\r\n```\r\n                       Ultimate Packer for eXecutables\r\n                          Copyright (C) 1996 - 2018\r\nUPX 3.95w       Markus Oberhumer, Laszlo Molnar & John Reiser   Aug 26th 2018\r\n\r\n        File size         Ratio      Format      Name\r\n   --------------------   ------   -----------   -----------\r\n  66027848 ->  18527640   28.06%   linux/amd64   ConsoleApp1                    \r\n```\r\n\r\n### Compare\r\n\r\n![image](https://user-images.githubusercontent.com/6566207/57582398-b45e4600-74c4-11e9-8ea4-75f91726a79f.png)\r\n\r\n\r\n","Url":"https://github.com/dotnet/coreclr/issues/24543","RelatedDescription":"Open issue \"PublishSingleFile for Linux-Exe is way better compressable than Windows-Exe\" (#24543)"},{"Id":"443056256","IsPullRequest":true,"CreatedAt":"2019-05-12T02:23:57","Actor":"mjsabby","Number":"24542","RawContent":null,"Title":"Add EnumerateRefs API and remove GetObjectReferences","State":"open","Body":"The GetObjectReferences API is unnecessarily expensive because it has to buffer the number of references. For arrays and/or objects with large reference count this API is quite unusable.\r\n\r\nInstead this Enumerate Object References API allows for a pay-for-play experience.","Url":"https://github.com/dotnet/coreclr/pull/24542","RelatedDescription":"Open PR \"Add EnumerateRefs API and remove GetObjectReferences\" (#24542)"},{"Id":"443053815","IsPullRequest":true,"CreatedAt":"2019-05-12T01:40:11","Actor":"mjsabby","Number":"24541","RawContent":null,"Title":"GC Moved Objects Profiler API fix","State":"open","Body":"This should have been a part of https://github.com/dotnet/coreclr/pull/24156\r\n\r\nWhen I initially checked in the code for this I tested it using the old profiler test which had GC tracking turned on, so this got missed.\r\n\r\nFound while working on tests.","Url":"https://github.com/dotnet/coreclr/pull/24541","RelatedDescription":"Open PR \"GC Moved Objects Profiler API fix\" (#24541)"},{"Id":"443051672","IsPullRequest":true,"CreatedAt":"2019-05-12T01:03:45","Actor":"danmosemsft","Number":"24540","RawContent":null,"Title":"Enable Go To Definition for VSCode in VM","State":"open","Body":"This change enables VSCode to \"go to definition\" in the \\vm\\ folder. It contains no user-specific paths. \r\n\r\nAt this point it only includes the default, Windows configuration. This alone is helpful, and we can use it as the basis for improvement. This change does not affect anyone not using VS Code with the C++ extension.\r\n\r\nIt may be possible to improve this by using the [CMAKE compile commands feature](https://cmake.org/cmake/help/v3.5/variable/CMAKE_EXPORT_COMPILE_COMMANDS.html) to remove hard coded defines, as well as by adding more platforms and configurations and supporting the rest of the tree. ","Url":"https://github.com/dotnet/coreclr/pull/24540","RelatedDescription":"Open PR \"Enable Go To Definition for VSCode in VM\" (#24540)"},{"Id":"443017520","IsPullRequest":false,"CreatedAt":"2019-05-11T17:22:54","Actor":"bencz","Number":"24538","RawContent":null,"Title":"LLVM backend","State":"open","Body":"According to this issue I created ( https://github.com/dotnet/coreclr/issues/17294 ), creating a new backend for a new architecture is a complex job, so why not create a new backend that supports multiple architectures?\r\nMono have implemented a [LLVM backend](https://www.mono-project.com/docs/advanced/runtime/docs/llvm-backend/).\r\nI say this because the Power and s390x architecture is returning with relative intensity...","Url":"https://github.com/dotnet/coreclr/issues/24538","RelatedDescription":"Open issue \"LLVM backend\" (#24538)"},{"Id":"442959871","IsPullRequest":true,"CreatedAt":"2019-05-11T06:29:13","Actor":"echesakovMSFT","Number":"24537","RawContent":null,"Title":"Fix memory corruption in GetResultFileName in SuperPMI","State":"open","Body":"Fixes #24527:\r\n\r\nThe issue was due to heap memory corruption introduced in #21252 (https://github.com/dotnet/coreclr/pull/21252/files#diff-09cd8c002b00a272bb8b222c1c2717c6) that increased the expected size of the buffer (`executableNameLength += randStringLength;`) without increasing the actual size of the buffer","Url":"https://github.com/dotnet/coreclr/pull/24537","RelatedDescription":"Open PR \"Fix memory corruption in GetResultFileName in SuperPMI\" (#24537)"},{"Id":"442936289","IsPullRequest":true,"CreatedAt":"2019-05-11T00:42:23","Actor":"davidwrighton","Number":"24536","RawContent":null,"Title":"[WIP] Remove concept of AppDomains from the GC","State":"open","Body":"- Leave constructs allowing for multiple handle tables, as scenarios for that have been proposed","Url":"https://github.com/dotnet/coreclr/pull/24536","RelatedDescription":"Open PR \"[WIP] Remove concept of AppDomains from the GC\" (#24536)"},{"Id":"442930810","IsPullRequest":true,"CreatedAt":"2019-05-10T23:57:26","Actor":"kouvel","Number":"24535","RawContent":null,"Title":"Fix a contract violation in ThreadPool.get_CompletedWorkItemCount","State":"open","Body":"Fixes https://github.com/dotnet/coreclr/issues/24515\r\n- Looks like the path that acquires the thread store lock has code that is marked witH GC_TRIGGERS\r\n- Changed ThreadPool.get_CompletedWorkItemCount to use a QCall instead of an FCall","Url":"https://github.com/dotnet/coreclr/pull/24535","RelatedDescription":"Open PR \"Fix a contract violation in ThreadPool.get_CompletedWorkItemCount\" (#24535)"}],"ResultType":"GitHubIssue"},"CLI-Issues":{"Issues":[{"Id":"443629837","IsPullRequest":true,"CreatedAt":"2019-05-14T00:44:54","Actor":"JohnTortugo","Number":"11323","RawContent":null,"Title":"Update .vsts-ci.yml","State":"closed","Body":"Related to: https://github.com/dotnet/core-eng/issues/6291","Url":"https://github.com/dotnet/cli/pull/11323","RelatedDescription":"Closed or merged PR \"Update .vsts-ci.yml\" (#11323)"},{"Id":"443654716","IsPullRequest":false,"CreatedAt":"2019-05-14T00:14:01","Actor":"wli3","Number":"11324","RawContent":null,"Title":"Flaky test: TestPersistenceChannelConstructorAndDisposeOnDeadlock","State":"open","Body":"","Url":"https://github.com/dotnet/cli/issues/11324","RelatedDescription":"Open issue \"Flaky test: TestPersistenceChannelConstructorAndDisposeOnDeadlock\" (#11324)"},{"Id":"442986286","IsPullRequest":true,"CreatedAt":"2019-05-13T23:59:24","Actor":"dotnet-maestro[bot]","Number":"11317","RawContent":null,"Title":"[master] Update dependencies from dotnet/sdk","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/sdk\r\n- **Build**: 20190510.2\r\n- **Date Produced**: 5/10/2019 6:20 PM\r\n- **Commit**: 372e67d51167792db2fdaeebf48b6d8fb962e713\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk** -> 3.0.100-preview6.19260.2\r\n\r\n## From https://github.com/dotnet/sdk\r\n- **Build**: 20190511.1\r\n- **Date Produced**: 5/11/2019 3:03 PM\r\n- **Commit**: 8ca875262a8c6565d2fefeb6356aa02df2c4ac86\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk** -> 3.0.100-preview6.19261.1\r\n\r\n## From https://github.com/dotnet/sdk\r\n- **Build**: 20190512.1\r\n- **Date Produced**: 5/12/2019 3:12 PM\r\n- **Commit**: 3be65641f392ecd21f7245eb3463d034f8f39e5c\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk** -> 3.0.100-preview6.19262.1\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11317","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/sdk\" (#11317)"},{"Id":"442543097","IsPullRequest":true,"CreatedAt":"2019-05-13T23:23:04","Actor":"vagisha-nidhi","Number":"11312","RawContent":null,"Title":"TestPlatform insertion 16.1.0 ","State":"closed","Body":"Release : [https://github.com/microsoft/vstest/releases/tag/v16.1.0](https://github.com/microsoft/vstest/releases/tag/v16.1.0)\r\n","Url":"https://github.com/dotnet/cli/pull/11312","RelatedDescription":"Closed or merged PR \"TestPlatform insertion 16.1.0 \" (#11312)"},{"Id":"443548482","IsPullRequest":true,"CreatedAt":"2019-05-13T18:50:57","Actor":"KevinRansom","Number":"11322","RawContent":null,"Title":"Update nunit","State":"open","Body":"\r\n","Url":"https://github.com/dotnet/cli/pull/11322","RelatedDescription":"Open PR \"Update nunit\" (#11322)"},{"Id":"443548262","IsPullRequest":true,"CreatedAt":"2019-05-13T18:50:22","Actor":"KevinRansom","Number":"11321","RawContent":null,"Title":"Update nunit","State":"open","Body":"Update the templates for nunit.\r\n","Url":"https://github.com/dotnet/cli/pull/11321","RelatedDescription":"Open PR \"Update nunit\" (#11321)"},{"Id":"442986891","IsPullRequest":true,"CreatedAt":"2019-05-13T13:05:21","Actor":"dotnet-maestro[bot]","Number":"11318","RawContent":null,"Title":"[master] Update dependencies from dotnet/templating","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/templating\r\n- **Build**: 20190510.1\r\n- **Date Produced**: 5/10/2019 12:57 PM\r\n- **Commit**: 9e805b1333b385f3e499edce81a0f2aa3efcbced\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.TemplateEngine.Cli** -> 1.0.2-beta5.19260.1\r\n\r\n## From https://github.com/dotnet/templating\r\n- **Build**: 20190511.1\r\n- **Date Produced**: 5/11/2019 12:53 PM\r\n- **Commit**: 616a1409140bf49f90a791685d10df2764dba01f\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.TemplateEngine.Cli** -> 1.0.2-beta5.19261.1\r\n\r\n## From https://github.com/dotnet/templating\r\n- **Build**: 20190512.1\r\n- **Date Produced**: 5/12/2019 12:44 PM\r\n- **Commit**: 5649b1fe3b92032190fe5b24fc7bb3f16451ccdd\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.TemplateEngine.Cli** -> 1.0.2-beta5.19262.1\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11318","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/templating\" (#11318)"},{"Id":"443223304","IsPullRequest":false,"CreatedAt":"2019-05-13T06:20:16","Actor":"gulshan","Number":"11320","RawContent":null,"Title":"Show project templates and file templates separately","State":"open","Body":"Currently with `dotnet new` command, all available templates are listed. Some of them are project templates and some are file templates. Requesting to show them separately, for clarity.","Url":"https://github.com/dotnet/cli/issues/11320","RelatedDescription":"Open issue \"Show project templates and file templates separately\" (#11320)"},{"Id":"443161539","IsPullRequest":false,"CreatedAt":"2019-05-13T00:01:39","Actor":"orassr","Number":"11319","RawContent":null,"Title":"sdk mismatch","State":"open","Body":"Normally, when type `dotnet ef` the result is:\r\n\r\n                              _/\\__\r\n                  ---==/          \\\\\r\n         ___  ___        |.          \\|\\\r\n        | __|| __|        |         )   \\\\\\\r\n        | _| | _|          \\_/       |  //|\\\\\r\n        |___||_|                   /   \\\\\\/\\\\\r\n\r\n\r\nthis time all I'm getting is that error again and again no matter what command it is\r\nI tried to update database through Entity Framework when this error:\r\n\r\n```\r\nPM> dotnet ef database update\r\ndotnet : The application to execute does not exist: 'C:\\Users\\orass\\.dotnet\\tools\\.store\\dotnet-ef\\2.2.4-servicing-10062\\dotnet-ef\\2.2.4-servicing-10062\\tools\\netcoreapp2.2\\any\\dotnet-ef.dll'.\r\nAt line:1 char:1\r\n\r\n+ dotnet ef database update\r\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~\r\n    + CategoryInfo          : NotSpecified: (The application...dotnet-ef.dll'.:String) [], RemoteException\r\n    + FullyQualifiedErrorId : NativeCommandError`\r\n \r\n\r\n> PM> dotnet ef --version\r\ndotnet : The application to execute does not exist: 'C:\\Users\\orass\\.dotnet\\tools\\.store\\dotnet-ef\\2.2.4-servicing-10062\\dotnet-ef\\2.2.4-servicing-10062\\tools\\netcoreapp2.2\\any\\dotnet-ef.dll'.\r\nAt line:1 char:1\r\n+ dotnet ef --version\r\n+ ~~~~~~~~~~~~~~~~~~~\r\n    + CategoryInfo          : NotSpecified: (The application...dotnet-ef.dll'.:String) [], RemoteException\r\n    + FullyQualifiedErrorId : NativeCommandError\r\n \r\nPM> dotnet ef\r\ndotnet : The application to execute does not exist: 'C:\\Users\\orass\\.dotnet\\tools\\.store\\dotnet-ef\\2.2.4-servicing-10062\\dotnet-ef\\2.2.4-servicing-10062\\tools\\netcoreapp2.2\\any\\dotnet-ef.dll'.\r\nAt line:1 char:1\r\n+ dotnet ef\r\n+ ~~~~~~~~~\r\n    + CategoryInfo          : NotSpecified: (The application...dotnet-ef.dll'.:String) [], RemoteException\r\n    + FullyQualifiedErrorId : NativeCommandError\r\n```\r\n***\r\nAccording to the `dotnet --info`, the Base Path use sdk/3...compare to the error that says it looking for \\tools\\netcoreapp2.2\r\n\r\n****I believe this mismatch happens because I recently installed Visual Studio 2019 Preview****\r\n```\r\nPM> dotnet --info\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview5-011568\r\n Commit:    b487ff10aa\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview5-011568\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview5-27626-15\r\n  Commit:  61f30f5a23\r\n\r\n.NET Core SDKs installed:\r\n  2.0.2 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.2 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.4 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.100 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.104 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.200-preview-007474 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.200-preview-007517 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.200 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.201 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.202 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.300-preview2-008533 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.301 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.400 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.403 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.602 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.700-preview-009618 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.101 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.103 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview5-011568 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.0-preview2-final [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.0-preview2-final [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview5-19227-01 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.0.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.0-preview2-26406-04 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview5-27626-15 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview5-27626-15 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n```\r\n\r\nI use VS 2019 Preview with the new SDK especially for Xamarin. My server side is .Net Core 2.x \r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/11319","RelatedDescription":"Open issue \"sdk mismatch\" (#11319)"},{"Id":"442929031","IsPullRequest":false,"CreatedAt":"2019-05-10T23:44:27","Actor":"brettrowberry","Number":"11316","RawContent":null,"Title":"Add `dotnet -v` in addition to `dotnet --version`","State":"open","Body":"## Steps to reproduce\r\n`dotnet -v`\r\n\r\n## Expected  behavior\r\n`3.0.100-preview5-011568`\r\n\r\n## Actual behavior\r\n`Unknown option: -v`\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/11316","RelatedDescription":"Open issue \"Add `dotnet -v` in addition to `dotnet --version`\" (#11316)"},{"Id":"442875504","IsPullRequest":false,"CreatedAt":"2019-05-10T21:25:02","Actor":"aschlick","Number":"11315","RawContent":null,"Title":"preview 5: dotnet ef not found","State":"closed","Body":"## Steps to reproduce\r\nRun a project with entity framework core\r\n`dotnet ef -h` should work\r\nupdate from dotnet core 3 preview 3 (3.0.100-preview3-010431) to either preview 4 or 5. \r\n`dotnet ef -h` \r\n\r\n## Expected  behavior\r\nentity framework help text\r\n\r\n## Actual behavior\r\n`Cannot find command 'dotnet ef', please run the following command to install`\r\n\r\n## Environment data\r\n<details><summary>`dotnet --info` output:</summary>\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview5-011568\r\n Commit:    b487ff10aa\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.15063\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview5-011568\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview5-27626-15\r\n  Commit:  61f30f5a23\r\n\r\n\r\n.NET Core SDKs installed:\r\n  1.0.4 [C:\\Program Files\\dotnet\\sdk]\r\n  2.0.2 [C:\\Program Files\\dotnet\\sdk]\r\n  2.0.3 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.2 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.4 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.101 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.102 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.103 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.104 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.201 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.202 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.301 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.400 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.401 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.402 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.403 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.500 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.504 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.600-preview-009426 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.600-preview-009472 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.600-preview-009497 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.600 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.602 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.700-preview-009597 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.700-preview-009601 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.700-preview-009618 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.101 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview5-011568 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview5-19227-01 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.3-servicing-26724-03 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview5-27626-15 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview5-27626-15 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n</details>\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/11315","RelatedDescription":"Closed issue \"preview 5: dotnet ef not found\" (#11315)"},{"Id":"442685284","IsPullRequest":true,"CreatedAt":"2019-05-10T18:50:57","Actor":"dotnet-maestro[bot]","Number":"11313","RawContent":null,"Title":"[master] Update dependencies from dotnet/sdk","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/sdk\r\n- **Build**: 20190509.1\r\n- **Date Produced**: 5/9/2019 7:28 PM\r\n- **Commit**: 003a2dd822d317c493b587432f95353871e72bb1\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk** -> 3.0.100-preview6.19259.1\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11313","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/sdk\" (#11313)"},{"Id":"442354359","IsPullRequest":false,"CreatedAt":"2019-05-10T17:00:48","Actor":"VidyaKukke","Number":"11307","RawContent":null,"Title":"dotnet pack version","State":"closed","Body":"I have a .csproj\r\n\r\n```\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <OutputType>Exe</OutputType>\r\n    <RootNamespace>$(RootNamespacePrefix)CLI</RootNamespace>\r\n    <AssemblyName><myassemblyName></AssemblyName>\r\n    <TargetFrameworks>netstandard2.0</TargetFrameworks>\r\n    <RuntimeFrameworkVersion>$(RuntimeFxVer)</RuntimeFrameworkVersion>\r\n    <Version>0.2.0</Version>\r\n  </PropertyGroup>\r\n...\r\n</Project>\r\n```\r\n\r\nI'm trying to use dotnet pack Myproj.csproj. It is producing a random version. How do I specify the right version?\r\n\r\nI have tried adding \r\n<VersionPrefix>0.2.0</VersionPrefix>\r\n<VersionSuffix>$(VersionSuffix></VersionSuffix>\r\n\r\nand doing a \r\ndotnet pack myproj.csproj --version-suffix \"-somethinghere\"\r\n\r\nNothing seems to work. What am I missing here?\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.1.505\r\n Commit:    b220231234\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17763\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.505\\\r\n\r\nHost (useful for support):\r\n  Version: 2.1.9\r\n  Commit:  dcedc87d22\r\n\r\n.NET Core SDKs installed:\r\n  2.1.202 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.402 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.500 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.505 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/11307","RelatedDescription":"Closed issue \"dotnet pack version\" (#11307)"},{"Id":"442688459","IsPullRequest":true,"CreatedAt":"2019-05-10T12:54:36","Actor":"dotnet-maestro[bot]","Number":"11314","RawContent":null,"Title":"[master] Update dependencies from dotnet/templating","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/templating\r\n- **Build**: 20190509.1\r\n- **Date Produced**: 5/9/2019 12:48 PM\r\n- **Commit**: a939a9f8aad540b90dcdedd0df6bfeaf7bea8707\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.TemplateEngine.Cli** -> 1.0.2-beta5.19259.1\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11314","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/templating\" (#11314)"},{"Id":"442429078","IsPullRequest":true,"CreatedAt":"2019-05-10T06:04:59","Actor":"livarcocc","Number":"11309","RawContent":null,"Title":"Update SDK to 2.1.700-preview-64109-02","State":"closed","Body":"\r\n","Url":"https://github.com/dotnet/cli/pull/11309","RelatedDescription":"Closed or merged PR \"Update SDK to 2.1.700-preview-64109-02\" (#11309)"},{"Id":"442488660","IsPullRequest":false,"CreatedAt":"2019-05-10T00:30:34","Actor":"arekbal","Number":"11311","RawContent":null,"Title":"Telemetry message wording is \"inaccurate\"","State":"open","Body":"## Steps to reproduce\r\nJust write `dotnet` in console\r\nThere is a notification about using telemetry and how to disable it by using environment variable. Th message states that telemetry data is shared with community.\r\n## Actual  behavior\r\nThe wording of the message is inaccurate and misleading as only \"some\" of the data \"used to be\" shared with the community.\r\nLooking at https://docs.microsoft.com/en-us/dotnet/core/tools/telemetry\r\ntells us that only 5 out of 13? Data Points \"used to be\" shared. \r\nAlso, data blobs are not raw data, they are already preprocessed and are missing a lot of useful information that is gathered by telemetry but not exposed to the public such as time of invocation.\r\nWhat I mean by \"used to be\" is that last blob that is currently available comes from late 2017. Latest data is not publicly available (5 last quarters right now) even in this tiny aggregated form.\r\n\r\n## Suggested change\r\nI don't expect more than - for the very least - change to be applied to the wording. Get rid of the sentence about sharing data with community. Alternatively change wording to take into account that only some portion of the gathered data was shared with the community.\r\n\r\n## EU GDPR Sidenote\r\nAccording to this page\r\nhttps://ec.europa.eu/info/law/law-topic/data-protection/reform/what-personal-data_en\r\ngathered data, especially MAC addresses(even hashed obviously) makes it personal information which should be managed scrupulously.\r\n\r\n## ML.NET telemetry (Added day later)\r\nmlnet cli tool uses this messaging: \"The data is anonymous and doesn't include personal information or data from your datasets.\" which is also inaccurate and somewhat misleading. Calling this dataset as containing anonymous data and not containing personal information is false. Also I wasn't aware that mlnet cli is going to use telemetry. Therefore I disabled it only after I runned it for the first time with quickstart example. Basic `mlnet` command doesn't tell you about telemetry. That is a bit concerning.\r\n\r\n## Opinion\r\nIMHO some variant of the 99% anonymised(as in nearly impossible to cross-check, correlate) telemetry makes sense for usage metrics... This data used by dotnet, mlnet is not so much anonymous. Sharing publicly only portion of the data leads to different conclusions about the planned usage of the data.\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/11311","RelatedDescription":"Open issue \"Telemetry message wording is \"inaccurate\"\" (#11311)"},{"Id":"442422879","IsPullRequest":true,"CreatedAt":"2019-05-09T23:49:47","Actor":"livarcocc","Number":"11308","RawContent":null,"Title":"Updating SDK to 2.2.300-preview-64109-01","State":"closed","Body":"","Url":"https://github.com/dotnet/cli/pull/11308","RelatedDescription":"Closed or merged PR \"Updating SDK to 2.2.300-preview-64109-01\" (#11308)"},{"Id":"442453651","IsPullRequest":false,"CreatedAt":"2019-05-09T23:23:55","Actor":"VidyaKukke","Number":"11310","RawContent":null,"Title":"dotnet pack version not working","State":"closed","Body":"I have updated this thread - https://github.com/dotnet/cli/issues/11307 \r\n\r\nI'm confused with the Issue workflow. I looked 3 hrs later. A solution is proposed (which does not work) but the original thread is closed. Not sure why. Typically you wait for an ACK or at least for a day before closing.  Can we keep this thread opened for 24hrs at least or until you get a confirmation (whichever happens first) of whether the proposed solution actually worked and unblocked customer!\r\n","Url":"https://github.com/dotnet/cli/issues/11310","RelatedDescription":"Closed issue \"dotnet pack version not working\" (#11310)"},{"Id":"441198515","IsPullRequest":true,"CreatedAt":"2019-05-09T19:31:08","Actor":"vagisha-nidhi","Number":"11295","RawContent":null,"Title":"TestPlatform insertion 16.1.0","State":"closed","Body":"Release : [https://github.com/microsoft/vstest/releases/tag/v16.1.0](https://github.com/microsoft/vstest/releases/tag/v16.1.0)","Url":"https://github.com/dotnet/cli/pull/11295","RelatedDescription":"Closed or merged PR \"TestPlatform insertion 16.1.0\" (#11295)"},{"Id":"442202012","IsPullRequest":true,"CreatedAt":"2019-05-09T18:45:43","Actor":"dotnet-maestro[bot]","Number":"11305","RawContent":null,"Title":"[master] Update dependencies from dotnet/sdk","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/sdk\r\n- **Build**: 20190508.2\r\n- **Date Produced**: 5/9/2019 12:04 AM\r\n- **Commit**: bf673b43674f9f3a1bf9b02020fcfeb040150e20\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk** -> 3.0.100-preview6.19258.2\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11305","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/sdk\" (#11305)"},{"Id":"441924333","IsPullRequest":true,"CreatedAt":"2019-05-09T14:57:09","Actor":"nugetlurker","Number":"11304","RawContent":null,"Title":"Insert NuGet Build 5.1.0-rtm.6013 into cli","State":"closed","Body":"Insert NuGet Build 5.1.0-rtm.6013 into cli release/2.1.7xx branch","Url":"https://github.com/dotnet/cli/pull/11304","RelatedDescription":"Closed or merged PR \"Insert NuGet Build 5.1.0-rtm.6013 into cli\" (#11304)"},{"Id":"442229376","IsPullRequest":false,"CreatedAt":"2019-05-09T13:12:02","Actor":"PDostalek","Number":"11306","RawContent":null,"Title":"[loc][Query][Cli] Localizability of \"LocalOptionDescription\"","State":"open","Body":"Hi,\r\nplease help localization team to answer question from translator.\r\nIn case translator is not sure about context/meaning/localizability of string we raise a question.\r\n\r\nSource:\r\nUpdate the tool and update from the local tool manifest.\r\n\r\nFile Name:\r\ndotnet\\commands\\dotnet-tool\\update\\xlf\\LocalizableStrings.xlf\r\n\r\n==========================================\r\nQuery:\r\nDoes this simply mean \"Update the tool from the local tool manifest.\"?","Url":"https://github.com/dotnet/cli/issues/11306","RelatedDescription":"Open issue \"[loc][Query][Cli] Localizability of \"LocalOptionDescription\"\" (#11306)"},{"Id":"441701383","IsPullRequest":true,"CreatedAt":"2019-05-08T22:15:08","Actor":"dotnet-maestro[bot]","Number":"11302","RawContent":null,"Title":"[master] Update dependencies from dotnet/sdk","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/sdk\r\n- **Build**: 20190507.2\r\n- **Date Produced**: 5/7/2019 11:34 PM\r\n- **Commit**: 90e8a529be026d06fc8965d460927193aca5b005\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk** -> 3.0.100-preview6.19257.2\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11302","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/sdk\" (#11302)"},{"Id":"441924299","IsPullRequest":true,"CreatedAt":"2019-05-08T22:14:29","Actor":"nugetlurker","Number":"11303","RawContent":null,"Title":"Insert NuGet Build 5.1.0-rtm.6013 into cli","State":"closed","Body":"Insert NuGet Build 5.1.0-rtm.6013 into cli release/2.2.3xx branch","Url":"https://github.com/dotnet/cli/pull/11303","RelatedDescription":"Closed or merged PR \"Insert NuGet Build 5.1.0-rtm.6013 into cli\" (#11303)"},{"Id":"441400504","IsPullRequest":true,"CreatedAt":"2019-05-08T18:32:58","Actor":"johnbeisner","Number":"11298","RawContent":null,"Title":"Add support for Microsoft.WindowsDesktop.App","State":"closed","Body":"Addresses: https://github.com/dotnet/cli/issues/11115\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11298","RelatedDescription":"Closed or merged PR \"Add support for Microsoft.WindowsDesktop.App\" (#11298)"},{"Id":"441201235","IsPullRequest":true,"CreatedAt":"2019-05-08T12:53:52","Actor":"dotnet-maestro[bot]","Number":"11296","RawContent":null,"Title":"[master] Update dependencies from dotnet/templating","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/templating\r\n- **Build**: 20190506.1\r\n- **Date Produced**: 5/6/2019 12:51 PM\r\n- **Commit**: cd674b5a80db00833c02a8832ab1e41df45bc97c\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.TemplateEngine.Cli** -> 1.0.2-beta5.19256.1\r\n\r\n## From https://github.com/dotnet/templating\r\n- **Build**: 20190507.1\r\n- **Date Produced**: 5/7/2019 1:09 PM\r\n- **Commit**: d4ad9da23e6ad6eab3bb71d1080da1120cf7d2cf\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.TemplateEngine.Cli** -> 1.0.2-beta5.19257.1\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11296","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/templating\" (#11296)"},{"Id":"441661078","IsPullRequest":false,"CreatedAt":"2019-05-08T10:22:28","Actor":"HassanHashemi","Number":"11301","RawContent":null,"Title":"dotnet publish prefers files from dependency over local file","State":"open","Body":"I am not sure if this is a bug or by design, though it looks like a bug.\r\n\r\n## Steps to reproduce\r\n1. Create two **exe** projects **A** and **B**\r\n2. Reference A from B\r\n3. Add a file with same name (eg. Dockerfile) to root of both projects and set build action to **Content** and Copy if newer\r\n4. publish project B\r\n\r\n## Expected  behavior\r\noutput folder should contain **B**`s Dockerfile which is the project being published.\r\n\r\n## Actual behavior\r\noutput folder contains **A**`s Dockerfile which is **B**'s dependency\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\nVersion: 2.2.203\r\nOS: Ubuntu 18.04\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/11301","RelatedDescription":"Open issue \"dotnet publish prefers files from dependency over local file\" (#11301)"},{"Id":"441421129","IsPullRequest":false,"CreatedAt":"2019-05-07T20:02:04","Actor":"wli3","Number":"11300","RawContent":null,"Title":"Global tools shim does not have PE bits","State":"open","Body":"in 2 places\r\n\r\n- [ ] https://github.com/dotnet/cli/blob/master/src/dotnet/ShellShim/AppHostShimMaker.cs#L46\r\n- [ ] https://github.com/dotnet/sdk/blob/ab0f40a205d29725e02db2de2b330059d1fb7272/src/Tasks/Microsoft.NET.Build.Tasks/GenerateShims.cs#L105\r\n\r\n1. https://github.com/dotnet/core-setup/issues/6338 move apphost creating logic to a central place\r\n2. remove the code in SDK and CLI\r\n2. let these 2 places call with intermediateAssembly param","Url":"https://github.com/dotnet/cli/issues/11300","RelatedDescription":"Open issue \"Global tools shim does not have PE bits\" (#11300)"},{"Id":"441400735","IsPullRequest":false,"CreatedAt":"2019-05-07T19:07:33","Actor":"KathleenDollard","Number":"11299","RawContent":null,"Title":"DotNet tools fail to with `dotnet run` or VS F5","State":"open","Body":"@wli3 \r\n\r\n## Steps to reproduce\r\n* Create a console application targeting .NET Core 3.0\r\nF5 in Visual Studio or dotnet run at the command line\r\nIt works\r\n* Add  `<PackAsTool>true</PackAsTool>`\r\nF5 or dotnet run\r\nFailure (\"... debug profile does not exist\" in VS, ...File not found... at command line\r\n* Change to  target 2.1\r\nIt works\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview3-010431\r\n Commit:    d72abce213\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview3-010431\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview3-27503-5\r\n  Commit:  3844df9537\r\n\r\n.NET Core SDKs installed:\r\n  2.1.4 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.103 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.200 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.201 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.202 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.300-rc1-008673 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.400 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.403 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.500 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.600-preview-009426 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.600-preview-009472 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.600 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.602 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.700-preview-009601 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.700-preview-009618 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.200 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.300-preview-010050 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.300-preview-010067 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview-009768 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview3-010431 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.0-rc1-final [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 3.0.0-alpha1-10663 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.0-rc1-final [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-alpha1-10663 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview3-19153-02 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.0-rc1 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview-27117-01 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview3-27503-5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-alpha-27119-5 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview3-27504-2 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/11299","RelatedDescription":"Open issue \"DotNet tools fail to with `dotnet run` or VS F5\" (#11299)"},{"Id":"441224668","IsPullRequest":false,"CreatedAt":"2019-05-07T13:11:29","Actor":"tplourdelincoln","Number":"11297","RawContent":null,"Title":"dotnet publish returns Error MSB4062 \"Microsoft.Build.Tasks.SGen\" task could not be loaded from the assembly ","State":"open","Body":"We have an ASP.NET Core 2.1 application using the full framework (4.7) that references a .NET 4.6 class library that make SOAP calls (WebReference).  Since 2016 we've been able to run `dotnet publish` in our CI process with no issues with VS 2017.  Once we installed VS2019 on the same host this stopped working.  \r\n\r\nWe suspect it's a problem with the `dotnet` CLI deciding which version of MSBuild to run.\r\n\r\nWe understand that there are some work-arounds that seem to get past it such as setting `<GenerateSerializationAssemblies>Off</GenerateSerializationAssemblies>` (which we don't want to do) and it seems that running MSBuild directly instead of `dotnet publish` works but we wanted to report this issue here.\r\n\r\n## Steps to reproduce\r\n* Use a windows machine with VS 2017 Pro (v15.9.11) and VS 2019 Pro (16.0.2) installed, both with web workloads\r\n* Create a solution with two projects:\r\n    * ASP.NET Core 2.1 with .NET Framework 4.7 which references a...\r\n    * .NET 4.6 Class Library Project\r\n* Add a Web Reference to the class library project (i.e.http://www.dneonline.com/calculator.asmx)\r\n* Run `dotnet publish --configuration Release -out c:\\temp\\foo`\r\n\r\nHere is a [repo with an example](https://github.com/tplourdelincoln/DotnetPublish2019BugDemo).\r\n\r\n## Expected  behavior\r\nThe publish operation works\r\n\r\n## Actual behavior\r\nThis error is thrown:\r\n```\r\nc:\\code\\sandbox\\PublishBugExample\\PublishBugExample>dotnet publish --configuration Release -o c:\\temp\\bug-demo\r\nMicrosoft (R) Build Engine version 16.0.450+ga8dc7f1d34 for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  Restore completed in 65.03 ms for c:\\code\\sandbox\\PublishBugExample\\PublishBugExample\\PublishBugExample.csproj.\r\nC:\\Program Files\\dotnet\\sdk\\2.1.602\\Microsoft.Common.CurrentVersion.targets(3541,5): error MSB4062: The \"Microsoft.Build.Tasks.SGen\" task could not be loaded from the assembly Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a.  Confirm that the <UsingTask> declaration is correct, that the assembly and all its dependencies are available, and that the task contains a public class that implements Microsoft.Build.Framework.ITask. [c:\\code\\sandbox\\PublishBugExample\\ExampleWebServiceLib\\ExampleWebServiceLib.csproj]\r\n```\r\n\r\n## More info\r\n\r\nIt seems that running MSBuild works however and the publish output is almost identical compared to when `dotnet publish` was ran in the past:\r\n\r\n`\"C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Professional\\MSBuild\\15.0\\Bin\\msbuild\" /t:Publish /p:Configuration=Release;Out-Dir=C:\\temp\\foo`\r\n\r\nAccording to our build logs, the last successful time `dotnet publish` ran (before VS 2019 was installed), it reported using `Microsoft (R) Build Engine version 15.9.20+g88f5fadfbe for .NET Core` you'll notice in the output above it reports using `16.0.450+ga8dc7f1d34 for .NET Core`.\r\n\r\nIf `dotnet publish` is not the recommended way of publishing such configurations please provide guidance.\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.1.602\r\n Commit:    04475eb7cf\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.14393\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.602\\\r\n\r\nHost (useful for support):\r\n  Version: 2.1.9\r\n  Commit:  dcedc87d22\r\n\r\n.NET Core SDKs installed:\r\n  2.1.403 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.500 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.505 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.602 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```","Url":"https://github.com/dotnet/cli/issues/11297","RelatedDescription":"Open issue \"dotnet publish returns Error MSB4062 \"Microsoft.Build.Tasks.SGen\" task could not be loaded from the assembly \" (#11297)"}],"ResultType":"GitHubIssue"},"Standard-Issues":{"Issues":[{"Id":"443629557","IsPullRequest":true,"CreatedAt":"2019-05-14T00:00:25","Actor":"JohnTortugo","Number":"1189","RawContent":null,"Title":"Update azure-pipelines.yml","State":"closed","Body":"Related to: https://github.com/dotnet/core-eng/issues/6291","Url":"https://github.com/dotnet/standard/pull/1189","RelatedDescription":"Closed or merged PR \"Update azure-pipelines.yml\" (#1189)"},{"Id":"443632814","IsPullRequest":false,"CreatedAt":"2019-05-13T22:41:56","Actor":"yangsong2828","Number":"1190","RawContent":null,"Title":"HttpModule with Microsoft.AspNetCore.Http","State":"open","Body":"We have multiple projects depend on one common IIS module, say Logging module.\r\nHowever, we can't move all projects to asp.net core at one shot. But we want to move one at a time.\r\nIf I port it to middleware, it can't be used by legacy IIS projects any more.\r\nSo what is your recommendation to move those common piece to asp .net core? Thanks.","Url":"https://github.com/dotnet/standard/issues/1190","RelatedDescription":"Open issue \"HttpModule with Microsoft.AspNetCore.Http\" (#1190)"},{"Id":"443361033","IsPullRequest":true,"CreatedAt":"2019-05-13T12:19:21","Actor":"dotnet-maestro[bot]","Number":"1188","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190512.1\r\n- **Date Produced**: 5/12/2019 12:58 PM\r\n- **Commit**: 30682cda0dd7ca1765463749dd91ec3cfec75eb9\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19262.1\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19262.1\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19262.1\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19262.1\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19262.1\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1188","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1188)"},{"Id":"443096722","IsPullRequest":true,"CreatedAt":"2019-05-12T12:18:57","Actor":"dotnet-maestro[bot]","Number":"1187","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190511.1\r\n- **Date Produced**: 5/11/2019 1:13 PM\r\n- **Commit**: 136dfbfa8a6173dadc107bf7393bdeaceecb4d3a\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19261.1\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19261.1\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19261.1\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19261.1\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19261.1\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1187","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1187)"},{"Id":"442986105","IsPullRequest":true,"CreatedAt":"2019-05-11T12:28:56","Actor":"dotnet-maestro[bot]","Number":"1186","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190510.2\r\n- **Date Produced**: 5/10/2019 8:01 PM\r\n- **Commit**: 810920cf8a5fc183585304193f8b4e4e189497e9\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19260.2\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19260.2\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19260.2\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19260.2\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19260.2\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1186","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1186)"},{"Id":"439143422","IsPullRequest":true,"CreatedAt":"2019-05-10T20:25:17","Actor":"dotnet-maestro[bot]","Number":"1172","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190430.6\r\n- **Date Produced**: 4/30/2019 10:17 PM\r\n- **Commit**: ac8d88df02d246d3147338fcfb03b1b93dc84b53\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19230.6\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19230.6\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19230.6\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19230.6\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19230.6\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190501.6\r\n- **Date Produced**: 5/2/2019 7:15 AM\r\n- **Commit**: ea9b2530a1559dd6426730aba52fca1924db2b65\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19251.6\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19251.6\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19251.6\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19251.6\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19251.6\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190502.2\r\n- **Date Produced**: 5/2/2019 7:00 PM\r\n- **Commit**: ed63a7faf2d119829dd971be91bb46b6ebaa1dd2\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19252.2\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19252.2\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19252.2\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19252.2\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19252.2\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190503.8\r\n- **Date Produced**: 5/4/2019 2:00 AM\r\n- **Commit**: 4cacf7aa7b2cd8bdd042e721e6ad73d809dd5678\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19253.8\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19253.8\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19253.8\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19253.8\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19253.8\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190504.1\r\n- **Date Produced**: 5/4/2019 12:58 PM\r\n- **Commit**: 1b8589bbf53b9a5e819460798eff59830f39a3be\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19254.1\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19254.1\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19254.1\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19254.1\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19254.1\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190505.2\r\n- **Date Produced**: 5/5/2019 2:25 PM\r\n- **Commit**: 6a34948f7bdbc3ceb2fb16441b49f7748a462646\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19255.2\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19255.2\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19255.2\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19255.2\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19255.2\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190506.1\r\n- **Date Produced**: 5/6/2019 5:27 PM\r\n- **Commit**: 917ed3ac79350e4072c724deb48404ee7d76ebef\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19256.1\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19256.1\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19256.1\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19256.1\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19256.1\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190506.4\r\n- **Date Produced**: 5/6/2019 9:02 PM\r\n- **Commit**: fe003f91e82195c5657c79ffa8d2831c9f07c9dc\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19256.4\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19256.4\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19256.4\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19256.4\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19256.4\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190506.12\r\n- **Date Produced**: 5/7/2019 5:12 AM\r\n- **Commit**: c31fac9f6899094226cb5cd77c85b8f60ecafa3d\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19256.12\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19256.12\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19256.12\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19256.12\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19256.12\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190507.7\r\n- **Date Produced**: 5/8/2019 12:49 AM\r\n- **Commit**: bda52d7619f9420de46f2c39ffc972864bbcab63\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19257.7\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19257.7\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19257.7\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19257.7\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19257.7\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190508.5\r\n- **Date Produced**: 5/8/2019 10:17 PM\r\n- **Commit**: 9005cee9510d23535c09bd9b6be7c426e526c067\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19258.5\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19258.5\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19258.5\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19258.5\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19258.5\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190509.9\r\n- **Date Produced**: 5/10/2019 12:31 AM\r\n- **Commit**: 155080ecb738e189db75f8f2461ebad75d955aa7\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19259.9\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19259.9\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19259.9\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19259.9\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19259.9\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1172","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1172)"},{"Id":"442864446","IsPullRequest":true,"CreatedAt":"2019-05-10T19:31:23","Actor":"wtgodbe","Number":"1185","RawContent":null,"Title":"Fail CI build if APICompat baseline files would change","State":"open","Body":"Currently, if a change in Arcade would cause changes in the APICompat baseline files, the baseline files are rewritten without throwing an error. If somebody makes such a change without checking in the changes to the APICompat baselines, the CI should fail. This change achieves that. Resolves https://github.com/dotnet/standard/issues/1184.\r\n\r\n@ericstj @terrajobst PTAL","Url":"https://github.com/dotnet/standard/pull/1185","RelatedDescription":"Open PR \"Fail CI build if APICompat baseline files would change\" (#1185)"},{"Id":"442475952","IsPullRequest":false,"CreatedAt":"2019-05-09T23:26:27","Actor":"wtgodbe","Number":"1184","RawContent":null,"Title":"Fail CI when APICompat Baseline files change","State":"open","Body":"Right now, when a change to Standard causes a change to the APICompat baseline(s), the build succeeds, and the baseline files are re-written with the change. In CI, we should fail the build on changes to the APICompat baseline files (rather than silently rewriting them).\r\n\r\nCC @ericstj @terrajobst ","Url":"https://github.com/dotnet/standard/issues/1184","RelatedDescription":"Open issue \"Fail CI when APICompat Baseline files change\" (#1184)"},{"Id":"442461759","IsPullRequest":true,"CreatedAt":"2019-05-09T22:26:30","Actor":"terrajobst","Number":"1183","RawContent":null,"Title":"Seal types that cannot be inherited","State":"open","Body":"These changes are related to #1176 and address the same problem.\r\n\r\nFixes #1171.","Url":"https://github.com/dotnet/standard/pull/1183","RelatedDescription":"Open PR \"Seal types that cannot be inherited\" (#1183)"},{"Id":"439794677","IsPullRequest":true,"CreatedAt":"2019-05-09T21:46:08","Actor":"terrajobst","Number":"1175","RawContent":null,"Title":"Add bulk operations to Collection<T>","State":"closed","Body":"These APIs were [recently merged](https://github.com/dotnet/corefx/pull/35772) into CoreFx.\r\n\r\nThis fixes #1091.","Url":"https://github.com/dotnet/standard/pull/1175","RelatedDescription":"Closed or merged PR \"Add bulk operations to Collection<T>\" (#1175)"},{"Id":"442425601","IsPullRequest":true,"CreatedAt":"2019-05-09T21:41:45","Actor":"joperezr","Number":"1182","RawContent":null,"Title":"Fix official build which is failing when trying to publish the packages to BAR","State":"closed","Body":"cc: @wtgodbe \r\n\r\nOfficial builds are failing when trying to publish packages to BAR because the AssetsManifest file isn't being generated any longer. This was caused because of a breaking change in Arcade. These changes will fix this issue.","Url":"https://github.com/dotnet/standard/pull/1182","RelatedDescription":"Closed or merged PR \"Fix official build which is failing when trying to publish the packages to BAR\" (#1182)"},{"Id":"439815886","IsPullRequest":true,"CreatedAt":"2019-05-09T20:13:26","Actor":"terrajobst","Number":"1176","RawContent":null,"Title":"Prevent non-framework code from extending BaseNumberConverter","State":"closed","Body":"This fixes #1171.\r\n\r\nPlease note that this is technically an API breaking change (we shipped `BaseNumberConverter` in .NET Standard 2.0 with a protected constructor, which was mistake). But there is no way to derive and instantiate this class. An exception will get thrown if you try to instantiate the derived class. \r\n\r\nFor more details, see https://github.com/dotnet/corefx/pull/37278.\r\n\r\n/cc @ericstj ","Url":"https://github.com/dotnet/standard/pull/1176","RelatedDescription":"Closed or merged PR \"Prevent non-framework code from extending BaseNumberConverter\" (#1176)"},{"Id":"442368786","IsPullRequest":true,"CreatedAt":"2019-05-09T19:01:19","Actor":"joperezr","Number":"1181","RawContent":null,"Title":"Move WithCancellation/ConfigureAwait extension methods to TaskAsyncEnumerableExtensions","State":"closed","Body":"cc: @stephentoub @terrajobst \r\n\r\nResponding to changes made by https://github.com/dotnet/corefx/pull/37367 where the extnsion methods where moved to a new type. This is the first time I make a change like this so please do let me know if I missed anything.","Url":"https://github.com/dotnet/standard/pull/1181","RelatedDescription":"Closed or merged PR \"Move WithCancellation/ConfigureAwait extension methods to TaskAsyncEnumerableExtensions\" (#1181)"},{"Id":"441943870","IsPullRequest":true,"CreatedAt":"2019-05-08T21:39:57","Actor":"wtgodbe","Number":"1180","RawContent":null,"Title":"Add shims to netstandard2.1 for types that used to have OOB packages","State":"open","Body":"Resolves https://github.com/dotnet/corefx/issues/36719 & https://github.com/dotnet/standard/issues/1063. These TypeForward files were generated with `GenApi`, using the `netstandard2.0` assets from the packages I added to `netstandard.depproj`. \r\n\r\nStill to do:\r\n- Add a DARC subscription from CoreFx -> Standard\r\n- Add a placeholder file for `netstandard2.1` to the `System.Reflection.Emit*` packages in CoreFx - will be done by https://github.com/dotnet/corefx/pull/37532\r\n\r\n@ericstj @terrajobst PTAL\r\n\r\nCC @bartonjs ","Url":"https://github.com/dotnet/standard/pull/1180","RelatedDescription":"Open PR \"Add shims to netstandard2.1 for types that used to have OOB packages\" (#1180)"},{"Id":"439351218","IsPullRequest":true,"CreatedAt":"2019-05-08T17:55:44","Actor":"wtgodbe","Number":"1173","RawContent":null,"Title":"Update to the 3.0 SDK","State":"closed","Body":"CC @ViktorHofer @ericstj. This also contains a maestro update of Arcade dependencies.","Url":"https://github.com/dotnet/standard/pull/1173","RelatedDescription":"Closed or merged PR \"Update to the 3.0 SDK\" (#1173)"},{"Id":"441500740","IsPullRequest":false,"CreatedAt":"2019-05-08T00:36:05","Actor":"PHuhn","Number":"1179","RawContent":null,"Title":"System.ComponentModel.Annotations V4.5.0 attributes in .Net Standard library not working in .Net framework","State":"open","Body":"Thanks for creating .Net Standard...\r\n\r\nI am attempting to migrate my .Net Framework libraries to .Net Standard, so my libraries will be available in .Net Framework and .Net Core. One of the libraries is using DataAnnotations as follows:\r\n```\r\npublic partial class LogData\r\n{\r\n    [Key, Column(Order = 1)]\r\n    [Required(ErrorMessage = \"Id is required.\")]\r\n    public long Id { get; set; }\r\n\r\n    [Required(ErrorMessage = \"Date is required.\")]\r\n    public DateTime Date { get; set; }\r\n\r\n    [Required(ErrorMessage = \"Application is required.\"), MaxLength(30, ErrorMessage = \"'Application' must be 30 or less characters.\")]\r\n    public string Application { get; set; }\r\n\r\n    [Required(ErrorMessage = \"Method is required.\"), MaxLength(255, ErrorMessage = \"'Method' must be 255 or less characters.\")]\r\n    public string Method { get; set; }\r\n\r\n    [Required(ErrorMessage = \"LogLevel is required.\")]\r\n    [Range(typeof(byte), \"0\", \"4\", ErrorMessage = \"'LogLevel' must be between 0 and 4\")]\r\n    public byte LogLevel { get; set; }\r\n\r\n    [Required(ErrorMessage = \"Level is required.\"), MaxLength(8, ErrorMessage = \"'Level' must be 8 or less characters.\")]\r\n    public string Level { get; set; }\r\n\r\n    [Required(ErrorMessage = \"UserAccount is required.\"), MaxLength(255, ErrorMessage = \"'UserAccount' must be 255 or less characters.\")]\r\n    public string UserAccount { get; set; }\r\n\r\n    [Required(ErrorMessage = \"Message is required.\"), MaxLength(4000, ErrorMessage = \"'Message' must be 4000 or less characters.\")]\r\n    public string Message { get; set; }\r\n\r\n    [MaxLength(4000, ErrorMessage = \"'Exception' must be 4000 or less characters.\")]\r\n    public string Exception { get; set; }\r\n}\r\n```\r\nThe migration **up** method in the .Net Core console applications is as follows:\r\n```\r\nmigrationBuilder.CreateTable(\r\n    name: \"Logs\",\r\n    columns: table => new\r\n    {\r\n        Id = table.Column<long>(nullable: false)\r\n            .Annotation(\"SqlServer:ValueGenerationStrategy\", SqlServerValueGenerationStrategy.IdentityColumn),\r\n        Date = table.Column<DateTime>(nullable: false),\r\n        Application = table.Column<string>(maxLength: 30, nullable: false),\r\n        Method = table.Column<string>(maxLength: 255, nullable: false),\r\n        LogLevel = table.Column<byte>(nullable: false),\r\n        Level = table.Column<string>(maxLength: 8, nullable: false),\r\n        UserAccount = table.Column<string>(maxLength: 255, nullable: false),\r\n        Message = table.Column<string>(maxLength: 4000, nullable: false),\r\n        Exception = table.Column<string>(maxLength: 4000, nullable: true)\r\n    },\r\n    constraints: table =>\r\n    {\r\n        table.PrimaryKey(\"PK_Logs\", x => x.Id);\r\n    });\r\n```\r\nThis as I would expect it to be.\r\n\r\nThe migration **up** method in the .Net Framework console applications is as follows:\r\n```\r\nCreateTable(\r\n    \"dbo.Logs\",\r\n    c => new\r\n        {\r\n            Id = c.Long(nullable: false, identity: true),\r\n            Date = c.DateTime(nullable: false),\r\n            Application = c.String(),\r\n            Method = c.String(),\r\n            LogLevel = c.Byte(nullable: false),\r\n            Level = c.String(),\r\n            UserAccount = c.String(),\r\n            Message = c.String(),\r\n            Exception = c.String(),\r\n        })\r\n    .PrimaryKey(t => t.Id);\r\n```\r\nThis is lacking the various length constraints.  Is this the intended output?\r\n\r\nI have attached a test solution. It has three projects as follows:\r\n*\tNSG.LogData (.NetStandard library containing annotated-data class),\r\n*\tNSG.ConsoleCore (.Net Core console project, that includes NSG.LogData library, and creates a code-first database),\r\n*\tNSG.ConsoleNet (.Net Framework console project, that includes NSG.LogData library, and creates a code-first database).\r\n\r\nPackage installation for NSG.ConsoleCore:\r\n\r\n\tInstall-Package Microsoft.EntityFrameworkCore.SqlServer\r\n\tInstall-Package Microsoft.EntityFrameworkCore.Tools\r\n\r\nMigration command for NSG.ConsoleCore:\r\n\r\n\tEntityFrameworkCore\\Add-Migration -name InitialCreate -Project NSG.ConsoleCore -StartupProject NSG.ConsoleCore\r\n\r\nMigration command for NSG.ConsoleNet:\r\n\r\n\tEntityFramework\\Add-Migration -name InitialCreate -Project NSG.ConsoleNet -StartupProject NSG.ConsoleNet\r\n\r\n\r\n\r\n\r\n[NSG.DataAnnotations.zip](https://github.com/dotnet/standard/files/3154973/NSG.DataAnnotations.zip)\r\n\r\n","Url":"https://github.com/dotnet/standard/issues/1179","RelatedDescription":"Open issue \"System.ComponentModel.Annotations V4.5.0 attributes in .Net Standard library not working in .Net framework\" (#1179)"},{"Id":"440265255","IsPullRequest":false,"CreatedAt":"2019-05-04T00:25:58","Actor":"bartonjs","Number":"1178","RawContent":null,"Title":"Consider asymmetric key import/export API for NS2.1","State":"open","Body":"https://github.com/dotnet/corefx/issues/20414 significantly helps .NET applications work with asymmetric keys \"the Linux way\", as well as other generally useful in hybrid environments scenarios.\r\n\r\nTypes to diff against corefx/3.0:\r\n* System.Security.Cryptography.AsymmetricAlgorithm\r\n* System.Security.Cryptography.RSA\r\n* System.Security.Cryptography.ECDsa\r\n* System.Security.Cryptography.ECDiffieHellman\r\n\r\n(and potentially the deriving types, for their `override`s)","Url":"https://github.com/dotnet/standard/issues/1178","RelatedDescription":"Open issue \"Consider asymmetric key import/export API for NS2.1\" (#1178)"},{"Id":"439822079","IsPullRequest":true,"CreatedAt":"2019-05-03T16:58:36","Actor":"mmitche","Number":"1177","RawContent":null,"Title":"Move to Azure DevOps for public CI","State":"closed","Body":"","Url":"https://github.com/dotnet/standard/pull/1177","RelatedDescription":"Closed or merged PR \"Move to Azure DevOps for public CI\" (#1177)"},{"Id":"439780558","IsPullRequest":false,"CreatedAt":"2019-05-02T23:09:49","Actor":"yangsong2828","Number":"1174","RawContent":null,"Title":"Support on System.Web.HttpRequest APIs","State":"closed","Body":"System.Web.HttpRequest APIs are not supported in .net standard. So I take the alternative is to use what's in Microsoft.AspNetCore.Http.Abstractions. But inside it, it doesn't have APIs such as \"Brower\", \"UserAgent\" etc. So what's the reason they are not supported?","Url":"https://github.com/dotnet/standard/issues/1174","RelatedDescription":"Closed issue \"Support on System.Web.HttpRequest APIs\" (#1174)"},{"Id":"438892784","IsPullRequest":false,"CreatedAt":"2019-04-30T17:32:25","Actor":"ericstj","Number":"1171","RawContent":null,"Title":"BaseNumberConverter should be effectively sealed","State":"open","Body":"See https://github.com/dotnet/corefx/pull/37278\r\n\r\nBaseNumberConverter shouldn't be derivable.  On desktop it's a compile error.  Since netstandard.dll doesn't include internal members it permits compile, but fails at runtime for most frameworks since internal abstract members are not overridden.\r\n\r\n/cc @Anipik ","Url":"https://github.com/dotnet/standard/issues/1171","RelatedDescription":"Open issue \"BaseNumberConverter should be effectively sealed\" (#1171)"},{"Id":"438281734","IsPullRequest":true,"CreatedAt":"2019-04-30T12:14:14","Actor":"dotnet-maestro[bot]","Number":"1170","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190426.3\r\n- **Date Produced**: 4/26/2019 5:53 PM\r\n- **Commit**: 7bec23ce3da545d97f53f99abce457a2e252aa58\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19226.3\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19226.3\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19226.3\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19226.3\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19226.3\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190429.8\r\n- **Date Produced**: 4/30/2019 5:30 AM\r\n- **Commit**: a7a250e9c13147134543c35fef2fb81f19592edf\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19229.8\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19229.8\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19229.8\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19229.8\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19229.8\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1170","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1170)"},{"Id":"437640571","IsPullRequest":true,"CreatedAt":"2019-04-26T12:09:00","Actor":"dotnet-maestro[bot]","Number":"1169","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190425.5\r\n- **Date Produced**: 4/25/2019 6:25 PM\r\n- **Commit**: d37270268a65592cae630f1b979b70f74d4614dd\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19225.5\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19225.5\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19225.5\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19225.5\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19225.5\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1169","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1169)"},{"Id":"437162539","IsPullRequest":true,"CreatedAt":"2019-04-25T12:14:10","Actor":"dotnet-maestro[bot]","Number":"1168","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190424.9\r\n- **Date Produced**: 4/25/2019 12:59 AM\r\n- **Commit**: e02c88fca482f1141a9bb310c97be20b0ebd0465\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19224.9\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19224.9\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19224.9\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19224.9\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19224.9\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1168","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1168)"},{"Id":"436223894","IsPullRequest":false,"CreatedAt":"2019-04-25T05:53:17","Actor":"ststeiger","Number":"1166","RawContent":null,"Title":"Referenced NetStandard-project does not get local-copied in .NET Core application ","State":"closed","Body":"I've created a project called \r\n`System.ServiceProcess`\r\nas netstandard 2.0 library. \r\n\r\nI've referenced project `System.ServiceProcess` in project `LdapService`. \r\nThe two projects are in the same solution. \r\n\r\nLdapService references project `System.ServiceProcess`. \r\nLdapService also references project `IniParser`. \r\nIniParser is a netstandard 2.0 library. \r\n\r\nIniParser gets localcopied to LdapService. \r\nSystem.ServiceProcess does not. \r\n\r\nI added <RestoreProjectStyle>PackageReference</RestoreProjectStyle> which once helped in a .NET Framework 4.6.1 project. \r\nBut that doesn't work .\r\nI tried setting localCopy to true, also no effect. \r\n\r\nIt looks like it's wrongly identifying System.ServiceProcess as a SharedFramework-DLL, and thus ignores local-copying. \r\n\r\nBUG.\r\n\r\nVersion Information:\r\n```\r\nMicrosoft Visual Studio Community 2017 \r\nVersion 15.9.5\r\nVisualStudio.15.Release/15.9.5+28307.280\r\nNetCore 2.1\r\n```\r\n\r\nIf I rename the project to System.ServiceProcess**1**, then it works as expected.","Url":"https://github.com/dotnet/standard/issues/1166","RelatedDescription":"Closed issue \"Referenced NetStandard-project does not get local-copied in .NET Core application \" (#1166)"},{"Id":"436657831","IsPullRequest":true,"CreatedAt":"2019-04-24T12:24:23","Actor":"dotnet-maestro[bot]","Number":"1167","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190423.2\r\n- **Date Produced**: 4/24/2019 12:38 AM\r\n- **Commit**: e3919d0c158716ef4685c8e057cc58640af1af83\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19223.2\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19223.2\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19223.2\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19223.2\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19223.2\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1167","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1167)"},{"Id":"436150323","IsPullRequest":true,"CreatedAt":"2019-04-23T12:23:39","Actor":"dotnet-maestro[bot]","Number":"1165","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190422.2\r\n- **Date Produced**: 4/22/2019 10:01 PM\r\n- **Commit**: 851e36df83d3361e4bd8a70a2a8a89f762469f9a\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19222.2\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19222.2\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19222.2\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19222.2\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19222.2\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1165","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1165)"},{"Id":"435956019","IsPullRequest":true,"CreatedAt":"2019-04-23T01:29:21","Actor":"mmitche","Number":"1164","RawContent":null,"Title":"Update branding on master","State":"closed","Body":"","Url":"https://github.com/dotnet/standard/pull/1164","RelatedDescription":"Closed or merged PR \"Update branding on master\" (#1164)"},{"Id":"435955846","IsPullRequest":true,"CreatedAt":"2019-04-23T01:29:14","Actor":"mmitche","Number":"1163","RawContent":null,"Title":"Merge from master","State":"closed","Body":"","Url":"https://github.com/dotnet/standard/pull/1163","RelatedDescription":"Closed or merged PR \"Merge from master\" (#1163)"},{"Id":"435913700","IsPullRequest":false,"CreatedAt":"2019-04-22T22:26:07","Actor":"CalvinFengDatacom","Number":"1162","RawContent":null,"Title":"Multiple assemblies with equivalent identity have been imported","State":"closed","Body":"Hi Guys,\r\n\r\nI have a wired issue with my .Net project after I push my changes to remote repository in DevOps.\r\n\r\nThe situation is, we have a .Net project was in .Net framework in version 4.6, then because of other dependencies, we need to upgrade the .Net framework to 4.6.2. It built successfully locally, but it built failed in the build pipeline of DevOps.\r\n\r\nThe error message is: \r\n\r\n- CSC(0,0): Error CS1703: Multiple assemblies with equivalent identity have been imported: 'D:\\a\\1\\s\\DNZ.Mocabots.AIA\\packages\\System.Runtime.Serialization.Primitives.4.1.1\\lib\\net46\\System.Runtime.Serialization.Primitives.dll' and 'C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.6.2\\Facades\\System.Runtime.Serialization.Primitives.dll'. Remove one of the duplicate references.\r\n- CSC(0,0): Error CS1703: Multiple assemblies with equivalent identity have been imported: 'D:\\a\\1\\s\\DNZ.Mocabots.AIA\\packages\\System.Runtime.InteropServices.4.1.0\\lib\\net462\\System.Runtime.InteropServices.dll' and 'C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.6.2\\Facades\\System.Runtime.InteropServices.dll'. Remove one of the duplicate references.\r\n- CSC(0,0): Error CS1703: Multiple assemblies with equivalent identity have been imported: 'D:\\a\\1\\s\\DNZ.Mocabots.AIA\\packages\\System.Runtime.Extensions.4.1.0\\lib\\net462\\System.Runtime.Extensions.dll' and 'C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.6.2\\Facades\\System.Runtime.Extensions.dll'. Remove one of the duplicate references.\r\n- CSC(0,0): Error CS1703: Multiple assemblies with equivalent identity have been imported: 'D:\\a\\1\\s\\DNZ.Mocabots.AIA\\packages\\System.Runtime.4.1.0\\lib\\net462\\System.Runtime.dll' and 'C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.6.2\\Facades\\System.Runtime.dll'. Remove one of the duplicate references.\r\n- CSC(0,0): Error CS1703: Multiple assemblies with equivalent identity have been imported: 'D:\\a\\1\\s\\DNZ.Mocabots.AIA\\packages\\System.IO.4.1.0\\lib\\net462\\System.IO.dll' and 'C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.6.2\\Facades\\System.IO.dll'. Remove one of the duplicate references.\r\n- Process 'msbuild.exe' exited with code '1'.\r\n\r\nI can see there are lots of suggestions of removing one of the conflict file manually, however it doesn't work for me. \r\n\r\n_**Note again, we are using .Net Standard F/W, not .Net Core.**\r\nIt was in 4.6 and now it's in 4.6.2._\r\n\r\nLooking forward from your ideas, thanks","Url":"https://github.com/dotnet/standard/issues/1162","RelatedDescription":"Closed issue \"Multiple assemblies with equivalent identity have been imported\" (#1162)"},{"Id":"435454723","IsPullRequest":true,"CreatedAt":"2019-04-20T23:47:10","Actor":"terrajobst","Number":"1161","RawContent":null,"Title":"Add tool to automate generation of .NET Core baseline","State":"closed","Body":"This adds a batch file that generates the API surface of .NET Core that matters to .NET Standard. This script updates the contents of `src\\platforms\\netcoreapp`, stripped down to just the contents that matter for .NET Standard. It's meant to be manually diff'ed against the .NET Standard reference assemblies to propose API changes.\r\n\r\nWe should move the `GenNetStandard` tool to our engineering tools (Arcade) so that they are available to people that don't have access to the internal share. However, since the process is currently manual and only done by me, that seems acceptable. At least this this makes it reproducable by other people, which is better to what we have today.\r\n\r\nThe script assume that the caller has an enlistment for dotnet/corefx in a folder that is parallel to dotnet/standard and that is named corefx. In practice, this should hold for most people that work on this.\r\n\r\n/cc @stephentoub @wtgodbe ","Url":"https://github.com/dotnet/standard/pull/1161","RelatedDescription":"Closed or merged PR \"Add tool to automate generation of .NET Core baseline\" (#1161)"}],"ResultType":"GitHubIssue"},"CoreFx-Issues":{"Issues":[{"Id":"443716946","IsPullRequest":true,"CreatedAt":"2019-05-14T05:29:00","Actor":"dotnet-maestro-bot","Number":"37638","RawContent":null,"Title":"Update ProjectNTfs, ProjectNTfsTestILC to beta-27714-00, beta-27714-00, respectively (master)","State":"open","Body":"/cc @dotnet/maestro-reviewers-core","Url":"https://github.com/dotnet/corefx/pull/37638","RelatedDescription":"Open PR \"Update ProjectNTfs, ProjectNTfsTestILC to beta-27714-00, beta-27714-00, respectively (master)\" (#37638)"},{"Id":"443101798","IsPullRequest":false,"CreatedAt":"2019-05-14T04:02:29","Actor":"oskardudycz","Number":"37610","RawContent":null,"Title":"[System.Text.Json] Serializing class that has array of children of the same class throws StackOverflowException","State":"closed","Body":"As in title: Serializing class that has array of children of the same class throws StackOverflowException.\r\n\r\nSimplest repro steps:\r\n\r\n```\r\npublic class TestClass\r\n{\r\n    public TestClass[] Children { get; set; }\r\n}\r\n\r\nvar document = new TestClass();\r\nvar str = JsonSerializer.ToString(document);\r\n```\r\nI create repository that reproduces this issue: https://github.com/oskardudycz/System.Text.Json.Fail","Url":"https://github.com/dotnet/corefx/issues/37610","RelatedDescription":"Closed issue \"[System.Text.Json] Serializing class that has array of children of the same class throws StackOverflowException\" (#37610)"},{"Id":"443665464","IsPullRequest":true,"CreatedAt":"2019-05-14T01:10:06","Actor":"gregkalapos","Number":"37637","RawContent":null,"Title":"Fix System.Diagnostics.Process.[x]ProcessorTime on macOS","State":"open","Body":"Fixes #37614\r\n\r\nAffects \r\n- `Process.UserProcessorTime`\r\n- `Process.PrivilegedProcessorTime`\r\n- `Process.TotalProcessorTime`\r\n\r\nDiscussed with @stephentoub  in #37614, this PR implements the proposed fix.\r\n\r\nShort summary (more in #37614):\r\nThe `rusage_info_v3` mac API uses nanoseconds unit, which was passed without any conversion to `TimeSpan`’s Int64-based constructor, which expects a value with a 100-nanosecond unit. Therfore values reported on macOS were 100x of the correct value.\r\n\r\nFix: we simply convert the `rusage_info_v3` nanosec values to 100-nanosec unit.\r\n\r\nAlso added a test, which fails on my machine with the original code and passes with the code in this PR. Since the `TestProcessorTime` test is disabled (https://github.com/dotnet/corefx/issues/31908) I suspect we will have similar problems with the new test. Let's see... ","Url":"https://github.com/dotnet/corefx/pull/37637","RelatedDescription":"Open PR \"Fix System.Diagnostics.Process.[x]ProcessorTime on macOS\" (#37637)"},{"Id":"443658451","IsPullRequest":true,"CreatedAt":"2019-05-14T00:33:00","Actor":"dotnet-maestro[bot]","Number":"37636","RawContent":null,"Title":"[master] Update dependencies from dotnet/standard","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/standard\r\n- **Build**: 20190513.2\r\n- **Date Produced**: 5/14/2019 12:22 AM\r\n- **Commit**: 557c5ecb9d6b77c3163edc2cda4108347dfe6ba2\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **NETStandard.Library** -> 2.1.0-prerelease.19263.2\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/37636","RelatedDescription":"Open PR \"[master] Update dependencies from dotnet/standard\" (#37636)"},{"Id":"443653227","IsPullRequest":true,"CreatedAt":"2019-05-14T00:06:18","Actor":"VSadov","Number":"37635","RawContent":null,"Title":"Added System.GC.GetTotalAllocatedBytes to the ref assembly","State":"open","Body":"CoreFx part for https://github.com/dotnet/coreclr/pull/23852\r\n","Url":"https://github.com/dotnet/corefx/pull/37635","RelatedDescription":"Open PR \"Added System.GC.GetTotalAllocatedBytes to the ref assembly\" (#37635)"},{"Id":"443651525","IsPullRequest":false,"CreatedAt":"2019-05-13T23:59:20","Actor":"ahsonkhan","Number":"37634","RawContent":null,"Title":"JsonSerializerOptions doesn't work well with JsonCommentHandling.Allow and JsonDocument","State":"open","Body":"See https://github.com/dotnet/corefx/pull/37549#discussion_r282884005 for context.\r\n\r\n> If you nest complex documents, JsonSerializer uses JsonDocument which throws:\r\n```\r\nSystem.Text.Json.Serialization.Tests.ObjectTests.ReadClassIgnoresLeadingOrTrailingTrivia(leadingTrivia: \"/* Multi\\nLine\\nComment */ \", trailingTrivia: \"\\t// trailing comment\\n \") [FAIL]\r\n      System.ArgumentException : Comments cannot be stored in a JsonDocument, only the Skip and Disallow comment handling modes are supported.\r\n      Parameter name: reader\r\n```\r\n\r\nJsonSerializerOptions should either support `JsonCommentHandling.Allow` in all cases (by transforming it to `JsonCommentHandling.Skip` before passing it to the `JsonDocument`), or just like `JsonDocument`, throw if the options is set to `Allow`. This comes up whenever a user has a `System.Object` property (which is where `JsonDocument` gets used).\r\n\r\nI don't really see much benefit of `Allow` outside of `JsonReader`.\r\n\r\ncc @steveharter, @bartonjs, @JamesNK, @rynowak, @JeremyKuhne, @watfordgnf","Url":"https://github.com/dotnet/corefx/issues/37634","RelatedDescription":"Open issue \"JsonSerializerOptions doesn't work well with JsonCommentHandling.Allow and JsonDocument\" (#37634)"},{"Id":"443596370","IsPullRequest":false,"CreatedAt":"2019-05-13T21:18:01","Actor":"StephenBonikowsky","Number":"37633","RawContent":null,"Title":"NullRef thrown by Internal.Cryptography.Pal.OpenSslX509ChainProcessor","State":"closed","Body":"In WCF we have [a test case](https://github.com/dotnet/wcf/blob/master/src/System.Private.ServiceModel/tests/Scenarios/Client/ExpectedExceptions/ExpectedExceptionTests.4.1.0.cs#L424) that deliberately tries to use a service cert that is only valid for client authentication. We expect to get a 'SecurityNegotiationException'.\r\n\r\nStarting recently we've been getting a NullRefException instead. This is only occurring on Linux (Centos.7) and I see that there has been some churn in 'System.Security.Cryptography.X509Certificates' under Pal.Unix and wondering if it could be related.\r\n\r\nHere is the invalid certificate we used.\r\n[InvalidEKUCert.zip](https://github.com/dotnet/corefx/files/3174762/InvalidEKUCert.zip)\r\n\r\n\r\n```\r\nSystem.NullReferenceException : Object reference not set to an instance of an object.\r\n   at Internal.Cryptography.Pal.OpenSslX509ChainProcessor.AddUniqueStatus(IList`1 list, X509ChainStatus& status)\r\n   at Internal.Cryptography.Pal.OpenSslX509ChainProcessor.ProcessPolicy(X509ChainElement[] elements, List`1 overallStatus, OidCollection applicationPolicy, OidCollection certificatePolicy)\r\n   at Internal.Cryptography.Pal.OpenSslX509ChainProcessor.Finish(OidCollection applicationPolicy, OidCollection certificatePolicy)\r\n   at Internal.Cryptography.Pal.ChainPal.BuildChain(Boolean useMachineContext, ICertificatePal cert, X509Certificate2Collection extraStore, OidCollection applicationPolicy, OidCollection certificatePolicy, X509RevocationMode revocationMode, X509RevocationFlag revocationFlag, DateTime verificationTime, TimeSpan timeout)\r\n   at System.Security.Cryptography.X509Certificates.X509Chain.Build(X509Certificate2 certificate, Boolean throwOnException)\r\n   at System.Security.Cryptography.X509Certificates.X509Chain.Build(X509Certificate2 certificate)\r\n   at System.Net.Security.CertificateValidation.BuildChainAndVerifyProperties(X509Chain chain, X509Certificate2 remoteCertificate, Boolean checkCertName, String hostName)\r\n   at System.Net.Security.SecureChannel.VerifyRemoteCertificate(RemoteCertValidationCallback remoteCertValidationCallback, ProtocolToken& alertToken)\r\n   at System.Net.Security.SslStream.CompleteHandshake(ProtocolToken& alertToken)\r\n```\r\n\r\nCurrently the \"get repro environment\" system via MissionControl is broken so I haven't been able to get a repro machine for this.\r\nThe test result in MC is [here](https://mc.dot.net/#/user/dotnet-mc-bot-2/official~2Fdotnet~2Fwcf~2Frefs~2Fheads~2Fmaster/build~2Ftest~2F/20190510.1/workItem/Client.ExpectedExceptions.IntegrationTests.dll/analysis/xunit/ExpectedExceptionTests~2FTCP_ServiceCertInvalidEKU_Throw_SecurityNegotiationException).\r\n","Url":"https://github.com/dotnet/corefx/issues/37633","RelatedDescription":"Closed issue \"NullRef thrown by Internal.Cryptography.Pal.OpenSslX509ChainProcessor\" (#37633)"},{"Id":"443211675","IsPullRequest":true,"CreatedAt":"2019-05-13T19:24:46","Actor":"dotnet-maestro-bot","Number":"37619","RawContent":null,"Title":"Update ProjectNTfs, ProjectNTfsTestILC to beta-27713-00, beta-27713-00, respectively (master)","State":"closed","Body":"/cc @dotnet/maestro-reviewers-core","Url":"https://github.com/dotnet/corefx/pull/37619","RelatedDescription":"Closed or merged PR \"Update ProjectNTfs, ProjectNTfsTestILC to beta-27713-00, beta-27713-00, respectively (master)\" (#37619)"},{"Id":"443546461","IsPullRequest":true,"CreatedAt":"2019-05-13T18:45:38","Actor":"MattGal","Number":"37632","RawContent":null,"Title":"Use Docker feature for nano runs","State":"open","Body":"@wfurt FYI","Url":"https://github.com/dotnet/corefx/pull/37632","RelatedDescription":"Open PR \"Use Docker feature for nano runs\" (#37632)"},{"Id":"443214939","IsPullRequest":false,"CreatedAt":"2019-05-13T18:04:01","Actor":"AriNuer","Number":"37620","RawContent":null,"Title":"Test failure: System.Net.Http.Functional.Tests.PlatformHandlerTest_AutoRedirect/GetAsync_MaxAutomaticRedirectionsNServerHops_ThrowsIfTooMany(maxHops: 3, hops: 3)","State":"closed","Body":"The test `System.Net.Http.Functional.Tests.PlatformHandlerTest_AutoRedirect/GetAsync_MaxAutomaticRedirectionsNServerHops_ThrowsIfTooMany(maxHops: 3, hops: 3)` has failed.\r\n\r\nFailure Message:\r\n```\r\nSystem.Net.Http.HttpRequestException : An error occurred while sending the request.\r\n---- System.Net.Http.CurlException : Couldn't resolve host name\r\n```\r\n\r\nStack Trace:\r\n```\r\n   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts) in /__w/1/s/src/System.Net.Http/src/System/Net/Http/HttpClient.cs:line 496\r\n   at System.Net.Http.Functional.Tests.HttpClientHandlerTest_AutoRedirect.GetAsync_MaxAutomaticRedirectionsNServerHops_ThrowsIfTooMany(Int32 maxHops, Int32 hops) in /__w/1/s/src/System.Net.Http/tests/FunctionalTests/HttpClientHandlerTest.AutoRedirect.cs:line 384\r\n--- End of stack trace from previous location where exception was thrown ---\r\n----- Inner Stack Trace -----\r\n   at System.Net.Http.CurlHandler.ThrowIfCURLEError(CURLcode error) in /__w/1/s/src/System.Net.Http/src/System/Net/Http/CurlHandler/CurlHandler.cs:line 660\r\n   at System.Net.Http.CurlHandler.MultiAgent.FinishRequest(StrongToWeakReference`1 easyWrapper, CURLcode messageResult) in /__w/1/s/src/System.Net.Http/src/System/Net/Http/CurlHandler/CurlHandler.MultiAgent.cs:line 887\r\n```\r\n\r\nBuild : Master - 20190512.1 (Core Tests)\r\nFailing configurations:\r\n- Ubuntu.1804.Amd64-x64\r\n  - Release\r\n\r\nDetails:\r\nhttps://mc.dot.net/#/product/netcore/master/source/official~2Fdotnet~2Fcorefx~2Frefs~2Fheads~2Fmaster/type/test~2Ffunctional~2Fcli~2F/build/20190512.1/workItem/System.Net.Http.Functional.Tests/analysis/xunit/System.Net.Http.Functional.Tests.PlatformHandlerTest_AutoRedirect~2FGetAsync_MaxAutomaticRedirectionsNServerHops_ThrowsIfTooMany(maxHops:%203,%20hops:%203)","Url":"https://github.com/dotnet/corefx/issues/37620","RelatedDescription":"Closed issue \"Test failure: System.Net.Http.Functional.Tests.PlatformHandlerTest_AutoRedirect/GetAsync_MaxAutomaticRedirectionsNServerHops_ThrowsIfTooMany(maxHops: 3, hops: 3)\" (#37620)"},{"Id":"443207785","IsPullRequest":false,"CreatedAt":"2019-05-13T17:01:24","Actor":"dotChris90","Number":"37618","RawContent":null,"Title":"Question : Why there is no System. Memory constructor with void* parameter? ","State":"closed","Body":"Just for curiosity. is there any special reason that System.Memory does not have a constructor which accepts pointer? the System.Span does with 2nd parameter (length of memory).\n\nor is there a possibility to convert span to memory? not copy really reference. ","Url":"https://github.com/dotnet/corefx/issues/37618","RelatedDescription":"Closed issue \"Question : Why there is no System. Memory constructor with void* parameter? \" (#37618)"},{"Id":"443501398","IsPullRequest":true,"CreatedAt":"2019-05-13T16:50:50","Actor":"Dotnet-GitSync-Bot","Number":"37631","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"open","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub @cshung @sywhang @tannergooding","Url":"https://github.com/dotnet/corefx/pull/37631","RelatedDescription":"Open PR \"Mirror changes from dotnet/coreclr\" (#37631)"},{"Id":"443473505","IsPullRequest":false,"CreatedAt":"2019-05-13T15:48:43","Actor":"Eilon","Number":"37630","RawContent":null,"Title":"DateTime.Today.ToShortDateString() .Net Core causes a null reference exception","State":"open","Body":"_From @ShadyNawara on Friday, 10 May 2019 20:05:56_\r\n\r\nusing DateTime to do a TryParse, toString, toShortString or anything that is string related would throw a null reference exception on Ubuntu 18.04 dotnet core 2.1. Same code works as expected when run on windows.\r\n\r\n    string today = DateTime.Today.ToShortDateString();\r\n\r\nor \r\n\r\n    DateTime.TryParse(\"5/10/2019\", out DateTime Date)\r\n\r\n   \r\nexact error code\r\n```\r\nSystem.NullReferenceException: Object reference not set to an instance of an object.\r\n       at System.Globalization.CalendarData.NormalizeDatePattern(String input)\r\n       at System.Globalization.CalendarData.LoadCalendarDataFromSystem(String localeName, CalendarId calendarId\r\n\r\n    )\r\n       at System.Globalization.CalendarData..ctor(String localeName, CalendarId calendarId, Boolean bUseUserOverrides)\r\n       at System.Globalization.CultureData.GetCalendar(CalendarId calendarId)\r\n       at System.Globalization.CultureData.DateSeparator(CalendarId calendarId)\r\n       at System.Globalization.DateTimeFormatInfo.InitializeOverridableProperties(CultureData cultureData, CalendarId calendarId)\r\n       at System.Globalization.CultureInfo.get_DateTimeFormat()\r\n       at System.Globalization.DateTimeFormatInfo.get_CurrentInfo()\r\n       at System.DateTime.TryParse(String s, DateTime& result)\r\n       at lambda_method(Closure , Object , Object[] )\r\n       at Microsoft.Extensions.Internal.ObjectMethodExecutor.Execute(Object target, Object[] parameters)\r\n       at Microsoft.AspNetCore.Mvc.Internal.ActionMethodExecutor.SyncObjectResultExecutor.Execute(IActionResultTypeMapper mapper, ObjectMethodExecutor executor, Object controller, Object[] arguments)\r\n       at Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvoker.InvokeActionMethodAsync()\r\n       at Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvoker.InvokeNextActionFilterAsync()\r\n       at Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvoker.Rethrow(ActionExecutedContext context)\r\n       at Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvoker.Next(State& next, Scope& scope, Object& state, Boolean& isCompleted)\r\n       at Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvoker.InvokeInnerFilterAsync()\r\n       at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.InvokeNextResourceFilter()\r\n       at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.Rethrow(ResourceExecutedContext context)\r\n       at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.Next(State& next, Scope& scope, Object& state, Boolean& isCompleted)\r\n       at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.InvokeFilterPipelineAsync()\r\n       at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.InvokeAsync()\r\n       at Microsoft.AspNetCore.Routing.EndpointMiddleware.Invoke(HttpContext httpContext)\r\n       at Microsoft.AspNetCore.Routing.EndpointRoutingMiddleware.Invoke(HttpContext httpContext)\r\n       at Microsoft.AspNetCore.ResponseCompression.ResponseCompressionMiddleware.Invoke(HttpContext context)\r\n       at Microsoft.AspNetCore.Cors.Infrastructure.CorsMiddleware.InvokeCore(HttpContext context)\r\n       at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.HttpProtocol.ProcessRequests[TContext](IHttpApplication`1 application)\r\n```\r\n\r\n_Copied from original issue: aspnet/AspNetCore#10160_","Url":"https://github.com/dotnet/corefx/issues/37630","RelatedDescription":"Open issue \"DateTime.Today.ToShortDateString() .Net Core causes a null reference exception\" (#37630)"},{"Id":"443439576","IsPullRequest":false,"CreatedAt":"2019-05-13T14:44:19","Actor":"Therzok","Number":"37629","RawContent":null,"Title":"Improved performance with Task.WhenAll (ImmutableArray<Task> tasks)","State":"open","Body":"Should Task.WhenAll have an extension method for ImmutableArray which avoids copies which are done for the array variant?","Url":"https://github.com/dotnet/corefx/issues/37629","RelatedDescription":"Open issue \"Improved performance with Task.WhenAll (ImmutableArray<Task> tasks)\" (#37629)"},{"Id":"443423736","IsPullRequest":false,"CreatedAt":"2019-05-13T14:15:24","Actor":"MikelThief","Number":"37628","RawContent":null,"Title":"System.Net.Http.HttpClientHandler.CookieContainer is empty in a UWP app despite proper header being set","State":"open","Body":"When I make a request to the server to obtain cookies, my client's cookiecontainer stays empty.\r\nProper header is included with a response.\r\nPostman doesn't have this problem. Cookies are not HttpOnly and they are not \"secure\".\r\n\r\nUWP version: 6.2.8\r\nTarget OS: Win10 1809\r\n\r\n\r\nI have attached a simple repro to show the issue.\r\nPlease step line by line the `OnLaunched `method in `App.xaml.cs`.\r\n\r\n[Reproduction link](https://wutwaw-my.sharepoint.com/:u:/g/personal/01112838_pw_edu_pl/ERakKDyetStKpSl47YHowbwBYYY-0xdN1mtFFAHC6nDcxQ?e=Mzurpx)","Url":"https://github.com/dotnet/corefx/issues/37628","RelatedDescription":"Open issue \"System.Net.Http.HttpClientHandler.CookieContainer is empty in a UWP app despite proper header being set\" (#37628)"},{"Id":"443330661","IsPullRequest":false,"CreatedAt":"2019-05-13T10:48:11","Actor":"gongdo","Number":"37627","RawContent":null,"Title":"Will JsonSerializer support parsing to existing object?","State":"open","Body":"When I need to call deserializer for the same type inside a long running loop, I prefer to overwrite to existing instance rather than create a new instance every time.\r\n\r\n`Json.NET` has a feature for it: `JsonConvert.PopulateObject(string, object)`\r\n(I think the target should be the first argument of it, but it doesn't matter.)\r\n\r\nFor `System.Text.Json`, its usage might look like this:\r\n```CSharp\r\nusing System.Text.Json\r\nvar tmp = new MyClass();\r\nJsonSerializer.ParseTo(ref tmp, \"{\\\"some\\\":\\\"json\\\"}\");\r\n```\r\n\r\nI found an option `ClassMaterializerStrategy` that might do similar thing, but it was an internal option. Even if it was not an internal, I believe a direct method like `ParseTo` would be better.","Url":"https://github.com/dotnet/corefx/issues/37627","RelatedDescription":"Open issue \"Will JsonSerializer support parsing to existing object?\" (#37627)"},{"Id":"443322883","IsPullRequest":false,"CreatedAt":"2019-05-13T10:29:38","Actor":"deokershesh","Number":"37626","RawContent":null,"Title":"System.Data.Odbc namespace : \"error CS0246: The type or namespace name...\"","State":"open","Body":"I need to change System.Data.Odbc namespace to MyDB.Net.Core and make appropriate MyDB related code changes. I have made changes to src/odbc folder files, Iterop.Odbc.cs, System.Data.Odbc.csproj and MatchingRefApiCompatBaseline.txt file, to change the name from System.Data.Odbc to  MyDB.Net.Core and building the entire corefx project reports 194 errors!! All of them similar to below across files.\r\n\r\nSystem\\Data\\Odbc\\Odbc32.cs(14,25): error CS0246: The type or namespace name 'Exception' could not be found (are you missing a using directive or an assembly reference?) [D:\\shesh\\corefx\\src\\System.Data.Odbc\\src\\System.Data.Odbc.csproj]\r\n\r\nAny help in this regard to change the namespace would be greatly appreciated.\r\n","Url":"https://github.com/dotnet/corefx/issues/37626","RelatedDescription":"Open issue \"System.Data.Odbc namespace : \"error CS0246: The type or namespace name...\"\" (#37626)"},{"Id":"443314460","IsPullRequest":false,"CreatedAt":"2019-05-13T10:10:05","Actor":"ASalihov","Number":"37625","RawContent":null,"Title":"Extension methods Realizations","State":"open","Body":"Can somebody explain why most of methods in this file https://github.com/dotnet/corefx/blob/master/src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs don't have realisations?","Url":"https://github.com/dotnet/corefx/issues/37625","RelatedDescription":"Open issue \"Extension methods Realizations\" (#37625)"},{"Id":"443294299","IsPullRequest":false,"CreatedAt":"2019-05-13T09:26:21","Actor":"John-Qiao","Number":"37624","RawContent":null,"Title":"[.Net Core] Cannot declare a variable of SystemSounds type(System.Media.SystemSounds class)","State":"open","Body":"**OS:** RS4 X64\r\n**VS:** Dev16 16.2.0 Preview 1.0 [28907.174.d16.2]\r\n**.NET Core:** 3.0.100-preview6-011854 from Master branch\r\n\r\n**More Info:**\r\nThere’s no this issue when the separate System.Media.SoundPlayer.dll exist in .NET Core SDK(located under C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App\\3.0.0-previewX-XXXXX-XX folder), after this separate System.Media.SoundPlayer.dll be removed from .NET Core SDK, this issue occurs.   \r\n\r\n**Steps to reproduce:**\r\n1.\tInstall the .NET Core 3.0 SDK from https://github.com/dotnet/core-sdk for Master branch.\r\n2.\tCreate a new template .NET Core app.\r\n3.\tOpen Form1.cs file and declare a variable of SystemSounds type.\r\n\r\n**Actual:** \r\nCannot declare the variable with an error.  \r\n![NetCore-result](https://user-images.githubusercontent.com/45864985/57610591-b21ee900-75a3-11e9-8153-9e70107bcfd6.png)\r\n![NetCore-result2](https://user-images.githubusercontent.com/45864985/57610607-b945f700-75a3-11e9-91c5-05b4b4181b26.png)\r\n\r\n\r\n**Expected:** \r\nCan declare the variable without error, like it works in .NET Framework. \r\n![NetFramework-result](https://user-images.githubusercontent.com/45864985/57610648-cfec4e00-75a3-11e9-9e47-93b01fa83482.png)\r\n![NetFramework-result2](https://user-images.githubusercontent.com/45864985/57610666-da0e4c80-75a3-11e9-915e-c50f00f662fa.png)\r\n\r\n","Url":"https://github.com/dotnet/corefx/issues/37624","RelatedDescription":"Open issue \"[.Net Core] Cannot declare a variable of SystemSounds type(System.Media.SystemSounds class)\" (#37624)"},{"Id":"443284791","IsPullRequest":false,"CreatedAt":"2019-05-13T09:05:35","Actor":"John-Qiao","Number":"37623","RawContent":null,"Title":"[.Net Core] The IsLoadCompleted property’s CanWrite value is incorrect in System.Media.SoundPlayer class   ","State":"open","Body":"**OS:** RS4 X64\r\n**VS:** Dev16 16.2.0 Preview 1.0 [28907.174.d16.2]\r\n**.NET Core:** 3.0.100-preview6-011854 from Master branch\r\n\r\n**More Info:**\r\nThere’s no this issue when the separate System.Media.SoundPlayer.dll exist in .NET Core SDK(located under C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App\\3.0.0-previewX-XXXXX-XX folder), after this separate System.Media.SoundPlayer.dll be removed from .NET Core SDK, this issue occurs.   \r\n\r\n**Steps to reproduce:**\r\n1.\tInstall the .NET Core 3.0 SDK from https://github.com/dotnet/core-sdk for Master branch.\r\n2.\tOpen the attached ‘Testcase’ .NET Core app in VS.\r\n3.\tStart it and observe the **CanWrite** property value in debugging result.\r\n[Testcase.zip](https://github.com/dotnet/corefx/files/3172013/Testcase.zip)\r\n\r\n**Actual:** \r\nThe **IsLoadCompleted** property’s **CanWrite** value is true.  \r\n![NetCore-result](https://user-images.githubusercontent.com/45864985/57609243-12f8f200-75a1-11e9-8159-b246c2703bb6.png)\r\n\r\n\r\n**Expected:** \r\nAs the **IsLoadCompleted** property is read-only, so its **CanWrite** value should be **false**, like it works in .NET Framework. \r\n![NetFramework-result](https://user-images.githubusercontent.com/45864985/57609276-20ae7780-75a1-11e9-9b5d-93b46a1fe9dd.png)\r\n\r\n","Url":"https://github.com/dotnet/corefx/issues/37623","RelatedDescription":"Open issue \"[.Net Core] The IsLoadCompleted property’s CanWrite value is incorrect in System.Media.SoundPlayer class   \" (#37623)"},{"Id":"443239288","IsPullRequest":false,"CreatedAt":"2019-05-13T07:12:51","Actor":"sgf","Number":"37622","RawContent":null,"Title":"SCTP support requests ?","State":"open","Body":"SCTP（Stream Control Transmission Protocol) is an old and important Protocol on Transport Layer.\r\nThe SCTP protocol is second only to the TCP and UDP protocols.\r\nits supported by many OS and Devices.\r\nits Almost 20 years Age.\r\n.net core As a cross platform. any plan to support that in feature?","Url":"https://github.com/dotnet/corefx/issues/37622","RelatedDescription":"Open issue \"SCTP support requests ?\" (#37622)"},{"Id":"443217423","IsPullRequest":false,"CreatedAt":"2019-05-13T05:55:55","Actor":"iSazonov","Number":"37621","RawContent":null,"Title":"Add \"InvariantCulture\" name","State":"open","Body":"Currently we have empty name for Invariant culture and LCID 127.\r\nLCID is not recommended for use and looks unfriendly in interactive scenarios like _IntelliSense_.\r\nThe empty name for Invariant culture looks unfriendly too.\r\n\r\nIntelliSense scenario is important but does't work in PowerShell:\r\n```powershell\r\nGet-Culture <tab>    # it is impossible to get Invariant culture because it is empty string\r\n```\r\n\r\n### Suggestion\r\n\r\nAdd \"InvariantCulture\" name so that we can use it wherever we currently use the empty string name.\r\nEx.: GetCulture(), GetCultures()","Url":"https://github.com/dotnet/corefx/issues/37621","RelatedDescription":"Open issue \"Add \"InvariantCulture\" name\" (#37621)"},{"Id":"443185083","IsPullRequest":false,"CreatedAt":"2019-05-13T02:57:35","Actor":"AriNuer","Number":"37617","RawContent":null,"Title":"Test failure: System.Diagnostics.TextWriterTraceListenerTests.XmlWriterTraceListenerTests/ListenerWithFilter","State":"open","Body":"Test **System.Diagnostics.TextWriterTraceListenerTests.XmlWriterTraceListenerTests/ListenerWithFilter** has failed.\r\n\r\nMessage :\r\n```\r\nAssert.DoesNotContain() Failure\r\nFound:    \\\"20\\\"\r\nIn value: <E2ETraceEvent xmlns=\\\"http://schemas.microsoft.com/2004/06/E2ETraceEvent\\\"><System xmlns=\\\"http://schemas.microsoft.com/2004/06/windows/eventlog/system\\\"><EventID>0</EventID><Type>3</Type><SubType Name=\\\"Error\\\">0</SubType><Level>2</Level><TimeCreated SystemTime=\\\"2019-05-12T10:46:56.2379125+00:00\\\" /><Source Name=\\\"Trace\\\" /><Correlation ActivityID=\\\"{00000000-0000-0000-0000-000000000000}\\\" /><Execution ProcessName=\\\"dotnet\\\" ProcessID=\\\"19\\\" ThreadID=\\\"20\\\" /><Channel/><Computer>e0c8fce80941</Computer></System><ApplicationData>Goodbye</ApplicationData></E2ETraceEvent><E2ETraceEvent xmlns=\\\"http://schemas.microsoft.com/2004/06/E2ETraceEvent\\\"><System xmlns=\\\"http://schemas.microsoft.com/2004/06/windows/eventlog/system\\\"><EventID>1</EventID><Type>3</Type><SubType Name=\\\"Critical\\\">0</SubType><Level>1</Level><TimeCreated SystemTime=\\\"2019-05-12T10:46:56.2392906+00:00\\\" /><Source Name=\\\"Trace\\\" /><Correlation ActivityID=\\\"{00000000-0000-0000-0000-000000000000}\\\" /><Execution ProcessName=\\\"dotnet\\\" ProcessID=\\\"19\\\" ThreadID=\\\"20\\\" /><Channel/><Computer>e0c8fce80941</Computer></System><ApplicationData><TraceData><DataItem>shouldbehere</DataItem></TraceData></ApplicationData></E2ETraceEvent><E2ETraceEvent xmlns=\\\"http://schemas.microsoft.com/2004/06/E2ETraceEvent\\\"><System xmlns=\\\"http://schemas.microsoft.com/2004/06/windows/eventlog/system\\\"><EventID>1</EventID><Type>3</Type><SubType Name=\\\"Critical\\\">0</SubType><Level>1</Level><TimeCreated SystemTime=\\\"2019-05-12T10:46:56.2393080+00:00\\\" /><Source Name=\\\"Trace\\\" /><Correlation ActivityID=\\\"{00000000-0000-0000-0000-000000000000}\\\" /><Execution ProcessName=\\\"dotnet\\\" ProcessID=\\\"19\\\" ThreadID=\\\"20\\\" /><Channel/><Computer>e0c8fce80941</Computer></System><ApplicationData><TraceData><DataItem>existent</DataItem><DataItem>.net</DataItem><DataItem>code</DataItem></TraceData></ApplicationData></E2ETraceEvent>\r\n```\r\n\r\nStack Trace :\r\n```\r\n   at System.Diagnostics.TextWriterTraceListenerTests.XmlWriterTraceListenerTests.ListenerWithFilter() in /__w/1/s/src/System.Diagnostics.TextWriterTraceListener/tests/XmlWriterTraceListenerTests.cs:line 107\r\n```\r\n\r\nDetails:\r\nhttps://mc.dot.net/#/product/netcore/master/source/official~2Fdotnet~2Fcorefx~2Frefs~2Fheads~2Fmaster/type/test~2Ffunctional~2Fcli~2F/build/20190512.1/workItem/System.Diagnostics.TextWriterTraceListener.Tests/analysis/xunit/System.Diagnostics.TextWriterTraceListenerTests.XmlWriterTraceListenerTests~2FListenerWithFilter","Url":"https://github.com/dotnet/corefx/issues/37617","RelatedDescription":"Open issue \"Test failure: System.Diagnostics.TextWriterTraceListenerTests.XmlWriterTraceListenerTests/ListenerWithFilter\" (#37617)"},{"Id":"443155096","IsPullRequest":true,"CreatedAt":"2019-05-12T22:40:08","Actor":"gnovack","Number":"37616","RawContent":null,"Title":"Fixed deserialization of null arrays for issue #37606","State":"open","Body":"This fixes #37606 by checking for null before adding to `state.Current.ReturnValue`\r\nAlso added tests for deserializing null arrays. \r\n","Url":"https://github.com/dotnet/corefx/pull/37616","RelatedDescription":"Open PR \"Fixed deserialization of null arrays for issue #37606\" (#37616)"},{"Id":"443147210","IsPullRequest":false,"CreatedAt":"2019-05-12T21:09:09","Actor":"Gnbrkm41","Number":"37615","RawContent":null,"Title":"Consider Implementing IDisposable in GCHandle","State":"open","Body":"(Pretty much duplicate of #31146, re-opening due to reason that is to be explained)\r\n\r\nGCHandle is supposed to be freed once it goes out of scope: [otherwise, memory leaks may occur](https://docs.microsoft.com/en-gb/dotnet/api/system.runtime.interopservices.gchandle?view=netframework-4.8). Although it has a `Free()` method which does that, it does not implement `IDisposable` and `Dispose()` method which lets it to be used in `using` blocks. Having it would be helpful since major .NET Languages such as C#, VB.NET, and F# provides syntactic sugar for using disposable types, `using` / `use`. I believe it's a pretty common practice for disposing of types that hold unmanaged resources.\r\n\r\nThe original issue, #31146, discusses about the exact same suggestion; however, [the language feature proposal](https://github.com/dotnet/csharplang/issues/1623) appear to have changed not to include this change for non-ref struct types, due to backwards-compat concerns. \r\n\r\n>[jcouv update:] This feature was restricted to ref structs due to backwards compatibility reasons. Also, the part about considering extension methods was split out of this feature, and it was not implemented in dev16.0 milestone.\r\n\r\nThis leaves the original problem unsolved. For that reason, I suggest that we reconsider implementing the interface on the type.","Url":"https://github.com/dotnet/corefx/issues/37615","RelatedDescription":"Open issue \"Consider Implementing IDisposable in GCHandle\" (#37615)"},{"Id":"443139267","IsPullRequest":false,"CreatedAt":"2019-05-12T19:40:30","Actor":"gregkalapos","Number":"37614","RawContent":null,"Title":"Process.GetCurrentProcess().TotalProcessorTime returns strange values on macOS","State":"open","Body":"I'd like to gather CPU usage information and for this I use the `System.Diagnostics.Process` class. On macOS the `Process.TotalProcessorTime` property seems to return values that are higher than I'd expect. E.g. in a 5 sec timeframe with a 12 core CPU I see values higher than `12 * 5sec`.\r\n\r\nReproducer (This returns valid values both on Windows - compared to Task Manager - and Linux, but returns seemingly invalid values on macOS): \r\n\r\n```\r\nusing System;\r\nusing System.Timers;\r\n\r\nnamespace ProcessTimeRepro\r\n{\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            var t = new Timer(5000);\r\n\r\n            var process = System.Diagnostics.Process.GetCurrentProcess();\r\n\r\n            Console.WriteLine($\"Pid: {process.Id}\");\r\n            Console.WriteLine($\"ProcessorCount: {Environment.ProcessorCount}\");\r\n\r\n            var b = false;\r\n            var lastSample = DateTime.UtcNow;\r\n            var lastTotalProcessorTime = new TimeSpan();\r\n            \r\n            t.Elapsed += (sender, eventArgs) =>\r\n            {\r\n                var currentDateTime = DateTime.UtcNow;\r\n                var currentTotalProcessorTime = process.TotalProcessorTime;\r\n                if (b)\r\n                {\r\n                    var timeDiff = (currentDateTime - lastSample).TotalMilliseconds;\r\n                    var cpuUsage = (currentTotalProcessorTime - lastTotalProcessorTime).TotalMilliseconds;\r\n                    \r\n                    Console.WriteLine(\"=======timer elapsed=======\");\r\n                    Console.WriteLine($\"total: {currentTotalProcessorTime}\");\r\n                    Console.WriteLine($\"system: {process.UserProcessorTime}\");\r\n                    Console.WriteLine($\"user: {process.PrivilegedProcessorTime}\");\r\n                    Console.WriteLine();\r\n                    Console.WriteLine($\"timeDiff: {timeDiff} ms\");\r\n                    Console.WriteLine($\"cpuUsageDiff: {cpuUsage} ms\");\r\n                    Console.WriteLine($\"Cpu usage: {cpuUsage / (timeDiff * Environment.ProcessorCount) * 100}%\");\r\n                    Console.WriteLine(\"=======timer elapsed end=======\");\r\n                    Console.WriteLine();\r\n                }\r\n\r\n                lastTotalProcessorTime = currentTotalProcessorTime;\r\n                lastSample = currentDateTime;\r\n                b = true;\r\n\r\n\r\n            };\r\n\r\n            t.Start();\r\n\r\n            Console.WriteLine(\"Work starts\");\r\n            var rnd = new Random();\r\n            for (int i = 0; i < int.MaxValue; i++)\r\n            {\r\n                if (rnd.Next() < 0) //make sure real work is done, this is not optimized away\r\n                {\r\n                    Console.WriteLine(\"bla\");\r\n                }\r\n            }\r\n\r\n            Console.WriteLine(\"Work done\");\r\n\r\n            Console.ReadLine();\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nIn short: we have 1 thread doing some work (generate random numbers) for a while and a timer that captures CPU usage.\r\n\r\n\r\nOutput on macOS (macOS Mojave 10.14.4, MacBook Pro 2018, 2.9 Ghz Intel Core i9):\r\n\r\n```\r\ndotnet run -c Release\r\nPid: 2989\r\nProcessorCount: 12\r\nWork starts\r\n=======timer elapsed=======\r\ntotal: 00:16:45.0497401\r\nsystem: 00:16:34.7100833\r\nuser: 00:00:10.3697294\r\n\r\ntimeDiff: 4992.206 ms\r\ncpuUsageDiff: 497341.0443 ms\r\nCpu usage: 830.195849790654%\r\n=======timer elapsed end=======\r\n\r\n=======timer elapsed=======\r\ntotal: 00:25:04.1338311\r\nsystem: 00:24:49.7922366\r\nuser: 00:00:14.3803124\r\n\r\ntimeDiff: 5004.88 ms\r\ncpuUsageDiff: 499084.091 ms\r\nCpu usage: 830.995766465263%\r\n=======timer elapsed end=======\r\n\r\nWork done\r\n=======timer elapsed=======\r\ntotal: 00:26:53.6510655\r\nsystem: 00:26:38.4277113\r\nuser: 00:00:15.2315355\r\n\r\ntimeDiff: 4997.881 ms\r\ncpuUsageDiff: 109517.2344 ms\r\nCpu usage: 182.606112470465%\r\n=======timer elapsed end=======\r\n\r\n=======timer elapsed=======\r\ntotal: 00:26:53.7347993\r\nsystem: 00:26:38.4790252\r\nuser: 00:00:15.2648931\r\n\r\ntimeDiff: 4996.953 ms\r\ncpuUsageDiff: 83.7338 ms\r\nCpu usage: 0.139641430821276%\r\n=======timer elapsed end=======\r\n``` \r\n\r\nE.g. when the timer fires the 2. time we have this output:\r\n```\r\ntimeDiff: 5004.88 ms\r\ncpuUsageDiff: 499084.091 ms\r\n```\r\nThis means in a `5004.88ms` time-slot this app consumed `499084.091 ms` CPU, which is I think impossible. As you can see this is a 12 core machine, so in case all 12 cores do 100% work on this process the CPU time would be `12*5004.88ms`, if I'm not mistaken, there is no way to have a higher CPU time in this time range. Also in the reproducer, the work is done on a single thread, so I'd expect to have a 100% CPU usage on 1 core and some minimal other work done by the timer (probably negligible), so for a `timeDiff: 5004.88 ms` the `cpuUsageDiff` should be also close to 5sec - and this is exactly what I see on Linux and Windows. \r\n\r\nSo either I do something wrong, or the value returned from `Process.TotalProcessorTime` is very inaccurate.\r\n\r\nAlso when I compare the increasing `total` value (that's the plain value of `Process.TotalProcessorTime` to Activity Monitor (for Windows people: that's the Task manager of macOS) or `top` I see very different numbers. `top` and Activity monitor report significantly lower numbers.\r\n\r\nAre we sure that `rusage_info_v3` returns `info.ri_system_time` and `info.ri_user_time` reported in 100-nanosecond units [here](https://github.com/dotnet/corefx/blob/6ca16758a5d454c1f1b04975bf55f259dd71fc49/src/System.Diagnostics.Process/src/System/Diagnostics/Process.OSX.cs#L79)?","Url":"https://github.com/dotnet/corefx/issues/37614","RelatedDescription":"Open issue \"Process.GetCurrentProcess().TotalProcessorTime returns strange values on macOS\" (#37614)"},{"Id":"443137401","IsPullRequest":false,"CreatedAt":"2019-05-12T19:19:23","Actor":"rducom","Number":"37613","RawContent":null,"Title":"[System.Text.Json] Serialization type inference ","State":"open","Body":"Given 2 classes :\r\n``` csharp\r\npublic class SomeType { }\r\npublic class DerivedType : SomeType { }\r\n```\r\nand a list of `DerivedType` created with covariance\r\n``` csharp\r\nIEnumerable<SomeType> list = new List<DerivedType>();\r\nvar json = JsonSerializer.ToString(list);\r\n```\r\nWhen serializing, the only properties visible in the result json, are the properties visible on `SomeType`.\r\nActually, type is inferred from declared instance type, and not real instance type. \r\nIMO, this is not the expected behavior, and it differs from the behavior of handling `object` type. (and differs from Json.Net).\r\n\r\nActual workaround is to force the type explicitly with overloads. (but `JsonSerializer.ToString(list,list.GetType())` is annoying to write each time)\r\n\r\nFix seems obvious : replacing `typeof(TValue)` with `value.GetType()` on all the methods like [WriteAsync](https://github.com/dotnet/corefx/blob/master/src/System.Text.Json/src/System/Text/Json/Serialization/JsonSerializer.Write.Stream.cs#L24), [ToString](https://github.com/dotnet/corefx/blob/master/src/System.Text.Json/src/System/Text/Json/Serialization/JsonSerializer.Write.String.cs#L21) or [ToBytes](https://github.com/dotnet/corefx/blob/master/src/System.Text.Json/src/System/Text/Json/Serialization/JsonSerializer.Write.ByteArray.cs#L17)","Url":"https://github.com/dotnet/corefx/issues/37613","RelatedDescription":"Open issue \"[System.Text.Json] Serialization type inference \" (#37613)"},{"Id":"443115438","IsPullRequest":false,"CreatedAt":"2019-05-12T15:17:27","Actor":"damageboy","Number":"37612","RawContent":null,"Title":".NET Core 3.0 (WinForms / WPF) + MAT (Multilingual Application Toolkit)","State":"open","Body":"The [Multilingual App Toolkit v4.0](https://marketplace.visualstudio.com/items?itemName=MultilingualAppToolkit.MultilingualAppToolkit-18308) is currently, to the best of my knowledge, Microsoft's current go-to solution for developers aiming to localize their WinForms and WPF applications (amongst other application types support by MAT).\r\n\r\nThe VS 2017/2019 add-on seems to be made of build-time components, that have various responsibilities, such as generating resource files for localized languages and much more.\r\nOn top of that, the MAT Visual Studio UI/functionality is responsible for various tasks such as adding new languages and generating rough translations through Microsoft's machine translation services.\r\n\r\nFrom the little I see / understand, there is no current support for MAT inside .NET Core 3.0 projects: \r\nWhen installed in VS2019, MAT fails to even recognize existing projects with MAT items, or add MAT support for such projects.\r\n\r\nExcept for MAT, there seems to be various support throughout .NET Core for generating resource files from XLF files such as [xliff-tasks](https://github.com/dotnet/xliff-tasks) and deep inside of [arcade](https://github.com/dotnet/arcade/blob/e7470594a6856e3d74f27046e067d7f5369307dd/src/Microsoft.DotNet.Arcade.Sdk/tools/GenerateResxSource.targets).\r\n\r\nIs there any direct MAT support planned for 3.0 at some point?\r\n\r\nWill MAT support include ability to compile MAT enabled project without the plugin installed in VS2019 in Windows? (For example, updating an XLF file by hand on Linux / Mac and invoking `dotnet build`)...?\r\n\r\nSome clarity about XLF and MAT support in .NET Core 3.0 is probably important for developers considering porting their desktop applications to .NET Core 3.0 ","Url":"https://github.com/dotnet/corefx/issues/37612","RelatedDescription":"Open issue \".NET Core 3.0 (WinForms / WPF) + MAT (Multilingual Application Toolkit)\" (#37612)"},{"Id":"443103703","IsPullRequest":true,"CreatedAt":"2019-05-12T13:17:23","Actor":"oskardudycz","Number":"37611","RawContent":null,"Title":"Added failing test case for issue #37610 - [System.Text.Json] Serializing class that has array of children of the same class throws StackOverflowException","State":"open","Body":"Added failing test case for issue #37610 - Serializing class that has array of children of the same class throws StackOverflowException.\r\n\r\n`JsonSerializer.ToString`  should not fail when there is no real cycle reference, and just empty object is created, even if class has array of element of the same class.","Url":"https://github.com/dotnet/corefx/pull/37611","RelatedDescription":"Open PR \"Added failing test case for issue #37610 - [System.Text.Json] Serializing class that has array of children of the same class throws StackOverflowException\" (#37611)"},{"Id":"443088144","IsPullRequest":false,"CreatedAt":"2019-05-12T10:19:44","Actor":"1ma","Number":"37609","RawContent":null,"Title":"[System.Guid] Discrepancy when constructing same Guid from string or byte array","State":"open","Body":"I recently noticed that when you construct a Guid from a byte array you might not get the exact same Guid you described, as it happens when it is constructed from a string. In particular the 8 bytes in the higher groups seem to be flipped (`9dad` turns to `ad9d`, etc).\r\n\r\n```csharp\r\n        [Fact]\r\n        public void TestGuidDiscrepancy()\r\n        {\r\n            var asString = \"6ba7b810-9dad-11d1-80b4-00c04fd430c8\";\r\n            var asBytes = new byte[]\r\n            {\r\n                0x6b, 0xa7, 0xb8, 0x10, 0x9d, 0xad, 0x11, 0xd1,\r\n                0x80, 0xb4, 0x00, 0xc0, 0x4f, 0xd4, 0x30, 0xc8\r\n            };\r\n\r\n            var guid1 = new Guid(asString);\r\n            var guid2 = new Guid(asBytes);\r\n\r\n            Assert.Equal(guid1.ToString(), guid2.ToString());\r\n        }\r\n```\r\n```\r\nUma.Uuid.Tests.GeneratorTest.TestGuidDiscrepancy\r\n\r\nAssert.Equal() Failure\r\n          ↓ (pos 0)\r\nExpected: 6ba7b810-9dad-11d1-80b4-00c04fd430c8\r\nActual:   10b8a76b-ad9d-d111-80b4-00c04fd430c8\r\n          ↑ (pos 0)\r\n   at Uma.Uuid.Tests.GeneratorTest.TestGuidDiscrepancy() in GeneratorTest.cs:line 28\r\n```\r\n\r\nOn the other hand, the `00000000-0000-0000-0000-000000000000` Guid passes the above test.\r\n\r\nIf this behaviour is correct I think that the documentation for the [`Guid(byte[])` method](https://docs.microsoft.com/en-us/dotnet/api/system.guid.-ctor?view=netcore-2.2#System_Guid__ctor_System_Byte___) could be expanded a bit, explaining the relationship between Guid byte and string representation, and the algorithm to convert one form to the other.\r\n\r\n\r\nAdditional information:\r\n```\r\n$ dotnet --info\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.203\r\n Commit:    e5bab63eca\r\n\r\nRuntime Environment:\r\n OS Name:     ubuntu\r\n OS Version:  16.04\r\n OS Platform: Linux\r\n RID:         ubuntu.16.04-x64\r\n Base Path:   /usr/share/dotnet/sdk/2.2.203/\r\n\r\nHost (useful for support):\r\n  Version: 2.2.4\r\n  Commit:  f95848e524\r\n\r\n.NET Core SDKs installed:\r\n  2.2.203 [/usr/share/dotnet/sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.2.4 [/usr/share/dotnet/shared/Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.4 [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.2.4 [/usr/share/dotnet/shared/Microsoft.NETCore.App]\r\n```","Url":"https://github.com/dotnet/corefx/issues/37609","RelatedDescription":"Open issue \"[System.Guid] Discrepancy when constructing same Guid from string or byte array\" (#37609)"}],"ResultType":"GitHubIssue"},"Roslyn-Issues":{"Issues":[{"Id":"443645617","IsPullRequest":true,"CreatedAt":"2019-05-14T01:30:07","Actor":"dotnet-bot","Number":"35693","RawContent":null,"Title":"Merge master to master-vs-deps","State":"closed","Body":"\nThis is an automatically generated pull request from master into master-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-master-vs-deps\ngit reset --hard upstream/master-vs-deps\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-master-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/35693","RelatedDescription":"Closed or merged PR \"Merge master to master-vs-deps\" (#35693)"},{"Id":"443596958","IsPullRequest":true,"CreatedAt":"2019-05-13T23:00:06","Actor":"dotnet-bot","Number":"35689","RawContent":null,"Title":"Merge master to master-vs-deps","State":"closed","Body":"\nThis is an automatically generated pull request from master into master-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-master-vs-deps\ngit reset --hard upstream/master-vs-deps\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-master-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/35689","RelatedDescription":"Closed or merged PR \"Merge master to master-vs-deps\" (#35689)"},{"Id":"443637122","IsPullRequest":true,"CreatedAt":"2019-05-13T22:58:34","Actor":"sharwell","Number":"35692","RawContent":null,"Title":"Expose a CodeAction API for groups of nested code actions","State":"open","Body":"Closes #20049","Url":"https://github.com/dotnet/roslyn/pull/35692","RelatedDescription":"Open PR \"Expose a CodeAction API for groups of nested code actions\" (#35692)"},{"Id":"443620933","IsPullRequest":true,"CreatedAt":"2019-05-13T22:01:10","Actor":"mavasani","Number":"35691","RawContent":null,"Title":"Code action to configure severity with .editorconfig","State":"open","Body":"This PR revives the work done in https://github.com/dotnet/roslyn/pull/29332 to add a code action to configure severity of diagnostics. Unlike that PR, which relied on .editorconfig being marked as an additional file, this PR uses the newly added `AnalyzerConfigDocument` for .editorconfig files. Screenshots and a small working snippet is attached below:\r\n\r\n**Top level menu:** Now we nest all configure and suppress code actions into a sub-menu to avoid clutter in lightbulb\r\n![image](https://user-images.githubusercontent.com/10605811/57649500-3b6ef500-757d-11e9-848a-a44775458400.png)\r\n\r\n**Create new .editorconfig with configured severity:**\r\n![image](https://user-images.githubusercontent.com/10605811/57649651-a8828a80-757d-11e9-8e35-6b338489807c.png)\r\n\r\n**Update existing .editorconfig with new severity:**\r\n![image](https://user-images.githubusercontent.com/10605811/57649690-bb955a80-757d-11e9-8ff7-a73d5c0e9f25.png)\r\n\r\n**Supports different syntax for diagnostics that map to code style option:**\r\n![image](https://user-images.githubusercontent.com/10605811/57650312-64908500-757f-11e9-8b1b-7b4d98d63853.png)\r\n\r\n**Code action snippet:**\r\n![Configure_Severity_Screenshot](https://user-images.githubusercontent.com/10605811/57649539-5fcad180-757d-11e9-8076-8d9ba615153b.gif)\r\n\r\n**NOTE:** I also had to thread through AnalyzerConfigDocuments at bunch of places in the workspace layer to get the creating/updating of this new document kind via a code action to work as expected. I have added relevant tests.\r\n\r\n**Future enhancements:**\r\n1. Expose a code action to configure code style option values for corresponding diagnostics.\r\n2. Current code fix only adds/updates a single closest .editorconfig relative to the file with the diagnostic. In future, we might want to enable customization of this via options.","Url":"https://github.com/dotnet/roslyn/pull/35691","RelatedDescription":"Open PR \"Code action to configure severity with .editorconfig\" (#35691)"},{"Id":"443615687","IsPullRequest":false,"CreatedAt":"2019-05-13T21:44:55","Actor":"mavasani","Number":"35690","RawContent":null,"Title":"Different .editorconfig severity strings are used to specify IDE code style options and dotnet_diagnostic.severity","State":"open","Body":"**Version Used**: \r\nLatest master source\r\n\r\nI found out we use different editorconfig strings for severities specified through our code style options and the ones that the compiler looks for:\r\n\r\n| DiagnosticSeverity | IDE Code style term | Compiler dotnet_diagnostic.severity term |\r\n| ------- | ------- | ------- |\r\n| Error | \"error\" | \"error\" |\r\n| Warning | \"warning\" | \"warn\" |\r\n| Info | \"suggestion\" | \"info\" |\r\n| Hidden | \"silent\" or \"refactoring\" | \"hidden\" |\r\n| Suppress | \"none\" | \"suppress\" |\r\n\r\nSo, user needs to use different terms for specifying severies, which seems very confusing:\r\n```\r\n[*.cs]\r\n\r\n# CA1822: Mark members as static\r\ndotnet_diagnostic.CA1822.severity = warn\r\n\r\n# IDE0059: Unnecessary assignment of a value\r\ncsharp_style_unused_value_assignment_preference = discard_variable:warning\r\n```\r\n\r\nCompiler generates the following diagnostic if term `warning` is used for `dotnet_diagnostic.CA1822.severity`\r\n```\r\nCSC : warning InvalidSeverityInAnalyzerConfig: The diagnostic 'ca1822' was given an invalid severity 'warning' in the analyzer config file\r\n```\r\n\r\n**IDE code style:**\r\nDocumentation: https://docs.microsoft.com/en-us/visualstudio/ide/editorconfig-code-style-settings-reference?view=vs-2019#language-code-styles\r\nImplementation: http://source.roslyn.io/#Microsoft.CodeAnalysis.Workspaces/NamingStyles/EditorConfig/EditorConfigSeverityStrings.cs,5\r\n\r\n**Compiler:**\r\nhttps://github.com/dotnet/roslyn/blob/2f57d11ecc36d11c06fc862dcb0de37c96d305d2/src/Compilers/Core/Portable/CommandLine/AnalyzerConfigSet.cs#L158\r\n\r\nI believe the compiler terms should be switched to follow the [already shipped terminology](https://docs.microsoft.com/en-us/visualstudio/ide/editorconfig-code-style-settings-reference?view=vs-2019#language-code-styles) or at least the compiler should allow the terms from both columns in the table above\r\n\r\n","Url":"https://github.com/dotnet/roslyn/issues/35690","RelatedDescription":"Open issue \"Different .editorconfig severity strings are used to specify IDE code style options and dotnet_diagnostic.severity\" (#35690)"},{"Id":"443221884","IsPullRequest":true,"CreatedAt":"2019-05-13T20:30:20","Actor":"dotnet-bot","Number":"35679","RawContent":null,"Title":"Merge release/dev16.2-preview1 to master","State":"closed","Body":"\nThis is an automatically generated pull request from release/dev16.2-preview1 into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/dev16.2-preview1-to-master\ngit reset --hard upstream/master\ngit merge upstream/release/dev16.2-preview1\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/dev16.2-preview1-to-master --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/35679","RelatedDescription":"Closed or merged PR \"Merge release/dev16.2-preview1 to master\" (#35679)"},{"Id":"443221954","IsPullRequest":true,"CreatedAt":"2019-05-13T20:30:09","Actor":"dotnet-bot","Number":"35680","RawContent":null,"Title":"Merge release/dev16.2-preview1-vs-deps to master-vs-deps","State":"closed","Body":"\nThis is an automatically generated pull request from release/dev16.2-preview1-vs-deps into master-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/dev16.2-preview1-vs-deps-to-master-vs-deps\ngit reset --hard upstream/master-vs-deps\ngit merge upstream/release/dev16.2-preview1-vs-deps\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/dev16.2-preview1-vs-deps-to-master-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/35680","RelatedDescription":"Closed or merged PR \"Merge release/dev16.2-preview1-vs-deps to master-vs-deps\" (#35680)"},{"Id":"443547715","IsPullRequest":false,"CreatedAt":"2019-05-13T18:48:55","Actor":"jods4","Number":"35688","RawContent":null,"Title":"VS2019 intellisense completes with bad quality results","State":"open","Body":"**Version Used**: Visual Studio 2019\r\n\r\nMaybe my mind is playing tricks on me, but since I updated to VS 2019 I feel like I'm fighting a lot against Intellisense.\r\n\r\nSpecifically: I would very quickly type the beginning of what I'm intending to write, hit complete (tab, space, enter -- depends on the situation)... and not get the expected (best) result.\r\nSo I have to backspace, start again (slowly), get the \"right\" completion and move on.\r\n\r\nThis was not the case in VS2017, I could write code quickly, completing everything along the way.\r\n\r\nBecause writing code is the \"core loop\" of coder, having to stop and backspace because of bad Intellisense is *very irksome and a major frustration after my upgrade*.\r\n\r\nI may be completely off, but I have a suspicion / theory about what has changed:\r\n\r\nMy guess is that new Intellisense is completely async and I am getting its best suggestion at the time I hit \"complete\". So when typing `int<tab>` I think I might get the completion for `in` if Intellisense has not finished filtering and sorting the `int` prefix.\r\n\r\nI love the improved \"snapiness\" of VS 2019, but if I'm correct about Intellisense it should wait for the full suggestions to complete before completing text in editor.","Url":"https://github.com/dotnet/roslyn/issues/35688","RelatedDescription":"Open issue \"VS2019 intellisense completes with bad quality results\" (#35688)"},{"Id":"443473527","IsPullRequest":true,"CreatedAt":"2019-05-13T15:48:45","Actor":"cston","Number":"35687","RawContent":null,"Title":"Enable VB runtime tests on CoreClr","State":"open","Body":"","Url":"https://github.com/dotnet/roslyn/pull/35687","RelatedDescription":"Open PR \"Enable VB runtime tests on CoreClr\" (#35687)"},{"Id":"443444360","IsPullRequest":false,"CreatedAt":"2019-05-13T14:53:03","Actor":"canton7","Number":"35686","RawContent":null,"Title":"Optimization proposal: In \"o is (int x, int y)\", consider attempting to unbox as ValueTuple<int, int>","State":"open","Body":"**Version Used**: \r\n\r\nMaster (11 May 2019)\r\n\r\n**Steps to Reproduce**:\r\n\r\n```csharp\r\npublic void M(object o)\r\n{\r\n    if (o is (int x, int y))\r\n    {\r\n    }\r\n}\r\n```\r\n\r\n[SharpLab](https://sharplab.io/#v2:EYLgtghgzgLgpgJwDQBMQGoA+ABADAAmwEYBuAWAChsBmQgJnwGF8BvS/Dw27AFnwFkAFAHtgAKzgBjGPmEBKdpzYVOq/AEsAZvhEaoO9QDsZADyQbj+AJ5yFKtR2UOOAX0WvKLoA===).\r\n\r\n**Expected Behavior**:\r\n\r\nGenerated code attempts to unbox `o` as a `ValueTuple<int, int>`, and does not box `x` and `y`.\r\n\r\n**Actual Behavior**:\r\n\r\nGenerated code uses `ITuple`, and boxes both `x` and `y`.\r\n\r\n**Discussion**:\r\n\r\nI understand why the compiler has to emit code which uses `ITuple`. \r\n\r\nAs a developer, if I want to try and unbox a `ValueTuple`, I instinctually reach for the syntax shown above. Given that it works, I probably won't be aware that both `x` and `y` get boxed, and that I should instead have written something like `if (o is ValueTuple<int, int> (var x, var y))`. \r\n\r\nThe proposal is to optimize the specific case where the input is an `object`, and the pattern looks like something which could be used to create a `ValueTuple` (i.e. no sub-patterns, all types are known, etc). In this case, the compiler would try and unbox `o` to a `ValueTuple` of the relevant kind, before trying the `ITuple` route.\r\n\r\nThis would add some additional code size (although using `ITuple` is fairly wordy already), and some additional cost for the cases where `o` is not a `ValueTuple` (I'm not sure how often this would occur in practice). It would probably take a bit of effort to share common code between the `ValueTuple` path and the `ITuple` path for cases like `o is (int x, 3)`, if that's a worthwhile thing to do.\r\n\r\nThis *should* have no visible impact to the user (other than reduced allocations).\r\n\r\nI [asked this on gitter](https://gitter.im/dotnet/roslyn?at=5cd88c9756271260f94efda5), and opinion was mixed on whether this was worthwhile. The suggestion was that I open the issue here and tag you, @gafter.","Url":"https://github.com/dotnet/roslyn/issues/35686","RelatedDescription":"Open issue \"Optimization proposal: In \"o is (int x, int y)\", consider attempting to unbox as ValueTuple<int, int>\" (#35686)"},{"Id":"443359061","IsPullRequest":true,"CreatedAt":"2019-05-13T11:59:13","Actor":"sharwell","Number":"35685","RawContent":null,"Title":"Implement support for CodeRefactoringProvider in NuGet packages","State":"open","Body":"","Url":"https://github.com/dotnet/roslyn/pull/35685","RelatedDescription":"Open PR \"Implement support for CodeRefactoringProvider in NuGet packages\" (#35685)"},{"Id":"443312270","IsPullRequest":true,"CreatedAt":"2019-05-13T11:30:08","Actor":"dotnet-bot","Number":"35683","RawContent":null,"Title":"Merge master to master-vs-deps","State":"closed","Body":"\nThis is an automatically generated pull request from master into master-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-master-vs-deps\ngit reset --hard upstream/master-vs-deps\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-master-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/35683","RelatedDescription":"Closed or merged PR \"Merge master to master-vs-deps\" (#35683)"},{"Id":"443322666","IsPullRequest":false,"CreatedAt":"2019-05-13T10:29:07","Actor":"yyjdelete","Number":"35684","RawContent":null,"Title":"Should `static bool IsDefault<T>(T xx = default) => xx == default;` compile?","State":"open","Body":"**Version Used**: \r\nsharplab.io(master/2.9.0)\r\n\r\n**Steps to Reproduce**:\r\nhttps://sharplab.io/#v2:EYLgtghgzgLgpgJwDQBMQGoA+ABADAAmwEYBuAWAChsBmQgJnwGF8BvS/DwogNn2AHt+AG3wBJKABE4AMwgBXITCIAeACoA+ABSr8AD134AvPhQz5igJRH1eg4eMA7BUPIVOXXgOFjJZhTDo1LR19IxM/S2tbfABLKHwnIRd2TmJPQRFxKVl/aiDtaONTHMjDG1D7cJKYV3cAejq0vgyfbPMYABZ8kLsq9qsywqKImG0LVwBfIA=\r\n\r\n**Expected Behavior**:\r\nhttps://github.com/dotnet/csharplang/blob/98043cdc889303d956d540d7ab3bc4f5044a9d3b/proposals/csharp-7.1/target-typed-default.md\r\n`xx == default` should be the same as `xx == default(T)`, and can't compile.\r\n\r\n**Actual Behavior**:\r\n`xx == default` is compile as `xx == null` without warns, and so `default(T) == default` is always false for struct.","Url":"https://github.com/dotnet/roslyn/issues/35684","RelatedDescription":"Open issue \"Should `static bool IsDefault<T>(T xx = default) => xx == default;` compile?\" (#35684)"},{"Id":"443047763","IsPullRequest":true,"CreatedAt":"2019-05-13T10:04:06","Actor":"dotnet-bot","Number":"35666","RawContent":null,"Title":"Merge master to master-vs-deps","State":"closed","Body":"\nThis is an automatically generated pull request from master into master-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-master-vs-deps\ngit reset --hard upstream/master-vs-deps\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-master-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/35666","RelatedDescription":"Closed or merged PR \"Merge master to master-vs-deps\" (#35666)"},{"Id":"443222038","IsPullRequest":true,"CreatedAt":"2019-05-13T07:30:09","Actor":"dotnet-bot","Number":"35681","RawContent":null,"Title":"Merge release/dev16.2-preview1 to release/dev16.2-preview1-vs-deps","State":"closed","Body":"\nThis is an automatically generated pull request from release/dev16.2-preview1 into release/dev16.2-preview1-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/dev16.2-preview1-to-release/dev16.2-preview1-vs-deps\ngit reset --hard upstream/release/dev16.2-preview1-vs-deps\ngit merge upstream/release/dev16.2-preview1\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/dev16.2-preview1-to-release/dev16.2-preview1-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/35681","RelatedDescription":"Closed or merged PR \"Merge release/dev16.2-preview1 to release/dev16.2-preview1-vs-deps\" (#35681)"},{"Id":"443230380","IsPullRequest":false,"CreatedAt":"2019-05-13T06:45:09","Actor":"msedi","Number":"35682","RawContent":null,"Title":"Proposal: C# code rewrite/lowering at design/compile time","State":"open","Body":"I'm sure someone has asked for this before but I couldn't find any reference to it.\r\n\r\n**Background**\r\nIn our development team we are often in situations where the C# language support is not enough and some things can be expressed in a shorter form. An example is the newly introduced `Range`, where the syntax `m..n` is translated into a `Range` struct that can further be used in following methods. This is very handy, but is \"hardcoded\" in the roslyn process.\r\n\r\nAs explained, we sometimes need something similar, for example, years ago, we already created something similar to Range with a MATLAB-like syntax, since this is the origin where our team came from. We wanted to make it as simple as possible and recreated the MATLAB/matrix style access by creating our own Matrix class.\r\n\r\nThe problem was, MATLAB supported a very unique mini language to index the elements inside the matrix. Just as an example, 1:10, 1:1:10, 1:end, etc. The details don't matter, but the problem was that C# doesn't understand this mini language (of course). So we needed to find a way bring this into the language. Since there was no way, we decided to write it as a string and parse the string. So `1:10` was then `\"1:10\"` which of course works, but is not the nicest solution, since we only get runtime errors, but no compile time errors.\r\n\r\n**Proposal**\r\nSo finally, I suggest to have a roslyn code rewrite/lowering/transform possibility that is able to hook into the parsing process in front of the real roslyn process. Having this, I would be able to transform the code, for example 1:10 can be created in a similar way, `Range` is rewritten.\r\n\r\nThe transformation process should be pluggable and always run in the design time compilation and the real compilation. Sure, some problems might occur and the transfomation process should not take too long so that the real roslyn process is not disturbed. But currently tools like PostSharp or Fody, etc. have to attach to the process afterwards and disassemble the code, which might be even worse.","Url":"https://github.com/dotnet/roslyn/issues/35682","RelatedDescription":"Open issue \"Proposal: C# code rewrite/lowering at design/compile time\" (#35682)"},{"Id":"443199918","IsPullRequest":true,"CreatedAt":"2019-05-13T06:13:13","Actor":"dpoeschl","Number":"35678","RawContent":null,"Title":"Fix the master build","State":"closed","Body":"","Url":"https://github.com/dotnet/roslyn/pull/35678","RelatedDescription":"Closed or merged PR \"Fix the master build\" (#35678)"},{"Id":"443157654","IsPullRequest":true,"CreatedAt":"2019-05-13T06:00:08","Actor":"dotnet-bot","Number":"35674","RawContent":null,"Title":"Merge release/dev16.1-vs-deps to release/dev16.2-preview1-vs-deps","State":"closed","Body":"\nThis is an automatically generated pull request from release/dev16.1-vs-deps into release/dev16.2-preview1-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/dev16.1-vs-deps-to-release/dev16.2-preview1-vs-deps\ngit reset --hard upstream/release/dev16.2-preview1-vs-deps\ngit merge upstream/release/dev16.1-vs-deps\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/dev16.1-vs-deps-to-release/dev16.2-preview1-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/35674","RelatedDescription":"Closed or merged PR \"Merge release/dev16.1-vs-deps to release/dev16.2-preview1-vs-deps\" (#35674)"},{"Id":"443157629","IsPullRequest":true,"CreatedAt":"2019-05-13T04:41:17","Actor":"dotnet-bot","Number":"35672","RawContent":null,"Title":"Merge release/dev16.1 to release/dev16.2-preview1","State":"closed","Body":"\nThis is an automatically generated pull request from release/dev16.1 into release/dev16.2-preview1.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/dev16.1-to-release/dev16.2-preview1\ngit reset --hard upstream/release/dev16.2-preview1\ngit merge upstream/release/dev16.1\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/dev16.1-to-release/dev16.2-preview1 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/35672","RelatedDescription":"Closed or merged PR \"Merge release/dev16.1 to release/dev16.2-preview1\" (#35672)"},{"Id":"443157658","IsPullRequest":true,"CreatedAt":"2019-05-13T03:58:22","Actor":"dotnet-bot","Number":"35675","RawContent":null,"Title":"Merge release/dev16.2-preview1-vs-deps to master-vs-deps","State":"closed","Body":"\nThis is an automatically generated pull request from release/dev16.2-preview1-vs-deps into master-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/dev16.2-preview1-vs-deps-to-master-vs-deps\ngit reset --hard upstream/master-vs-deps\ngit merge upstream/release/dev16.2-preview1-vs-deps\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/dev16.2-preview1-vs-deps-to-master-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/35675","RelatedDescription":"Closed or merged PR \"Merge release/dev16.2-preview1-vs-deps to master-vs-deps\" (#35675)"},{"Id":"443189069","IsPullRequest":true,"CreatedAt":"2019-05-13T03:21:54","Actor":"sharwell","Number":"35677","RawContent":null,"Title":"Limit use of IBuiltInAnalyzer.OpenFileOnly","State":"open","Body":"* Explicitly default `OpenFileOnly` to false\r\n* Remove unnecessary implementations of `OpenFileOnly` that just return false\r\n* Separate the in-process analyzer restriction to a new marker interface `IInProcessAnalyzer`\r\n\r\nThis pull request does not contain functional/behavior changes. It is intended to separate concerns so we can strategically work toward the elimination of these interfaces.","Url":"https://github.com/dotnet/roslyn/pull/35677","RelatedDescription":"Open PR \"Limit use of IBuiltInAnalyzer.OpenFileOnly\" (#35677)"},{"Id":"443157636","IsPullRequest":true,"CreatedAt":"2019-05-13T01:00:10","Actor":"dotnet-bot","Number":"35673","RawContent":null,"Title":"Merge release/dev16.2-preview1 to master","State":"closed","Body":"\nThis is an automatically generated pull request from release/dev16.2-preview1 into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/dev16.2-preview1-to-master\ngit reset --hard upstream/master\ngit merge upstream/release/dev16.2-preview1\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/dev16.2-preview1-to-master --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/35673","RelatedDescription":"Closed or merged PR \"Merge release/dev16.2-preview1 to master\" (#35673)"},{"Id":"443157671","IsPullRequest":true,"CreatedAt":"2019-05-13T00:30:06","Actor":"dotnet-bot","Number":"35676","RawContent":null,"Title":"Merge release/dev16.2-preview1 to release/dev16.2-preview1-vs-deps","State":"closed","Body":"\nThis is an automatically generated pull request from release/dev16.2-preview1 into release/dev16.2-preview1-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/dev16.2-preview1-to-release/dev16.2-preview1-vs-deps\ngit reset --hard upstream/release/dev16.2-preview1-vs-deps\ngit merge upstream/release/dev16.2-preview1\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/dev16.2-preview1-to-release/dev16.2-preview1-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/35676","RelatedDescription":"Closed or merged PR \"Merge release/dev16.2-preview1 to release/dev16.2-preview1-vs-deps\" (#35676)"},{"Id":"443156695","IsPullRequest":true,"CreatedAt":"2019-05-12T23:11:29","Actor":"dotnet-bot","Number":"35671","RawContent":null,"Title":"Merge release/dev16.2-preview1 to release/dev16.2-preview1-vs-deps","State":"closed","Body":"\nThis is an automatically generated pull request from release/dev16.2-preview1 into release/dev16.2-preview1-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/dev16.2-preview1-to-release/dev16.2-preview1-vs-deps\ngit reset --hard upstream/release/dev16.2-preview1-vs-deps\ngit merge upstream/release/dev16.2-preview1\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/dev16.2-preview1-to-release/dev16.2-preview1-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/35671","RelatedDescription":"Closed or merged PR \"Merge release/dev16.2-preview1 to release/dev16.2-preview1-vs-deps\" (#35671)"},{"Id":"443127827","IsPullRequest":false,"CreatedAt":"2019-05-12T17:35:01","Actor":"CyrusNajmabadi","Number":"35670","RawContent":null,"Title":"PublicAPI checker crashing.","State":"closed","Body":"I'm running into this in the https://github.com/dotnet/roslyn/pull/32999 PR.\r\n\r\nWhen i make a public API change and attempt to add the item to the the unshipped.txt file i run into: \r\n\r\n```\r\nSystem.AggregateException : One or more errors occurred. ---> Object reference not set to an instance of an object.\r\n   at System.Threading.Tasks.Task.ThrowIfExceptional(Boolean includeTaskCanceledExceptions)\r\n   at System.Threading.Tasks.Task.Wait(Int32 millisecondsTimeout,CancellationToken cancellationToken)\r\n   at Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.SuggestedAction.InvokeWorker(Func`1 getFromDocument,IProgressTracker progressTracker,CancellationToken cancellationToken)\r\n   at Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.SuggestedAction.<>c__DisplayClass17_0.<InvokeCore>b__0()\r\n   at Microsoft.CodeAnalysis.Extensions.IExtensionManagerExtensions.PerformAction(IExtensionManager extensionManager,Object extension,Action action)\r\n---> (Inner Exception #0) System.NullReferenceException : Object reference not set to an instance of an object.\r\n   at Microsoft.CodeAnalysis.Editor.Implementation.CodeActions.CodeActionEditHandlerService.<>c__DisplayClass8_0.<TryGetSingleChangedText>b__1(DocumentId id)\r\n   at System.Linq.ImmutableArrayExtensions.Any[T](ImmutableArray`1 immutableArray,Func`2 predicate)\r\n   at Microsoft.CodeAnalysis.Editor.Implementation.CodeActions.CodeActionEditHandlerService.TryGetSingleChangedText(Solution oldSolution,ImmutableArray`1 operationsList)\r\n   at async Microsoft.CodeAnalysis.Editor.Implementation.CodeActions.CodeActionEditHandlerService.ApplyAsync(<Unknown Parameters>)\r\n   at Microsoft.VisualStudio.Telemetry.WindowsErrorReporting.WatsonReport.GetClrWatsonExceptionInfo(Exception exceptionObject)<---\r\n```\r\n\r\n","Url":"https://github.com/dotnet/roslyn/issues/35670","RelatedDescription":"Closed issue \"PublicAPI checker crashing.\" (#35670)"},{"Id":"443098666","IsPullRequest":true,"CreatedAt":"2019-05-12T12:26:23","Actor":"YairHalberstadt","Number":"35669","RawContent":null,"Title":"Don't read the same property twice in pattern matching ","State":"open","Body":"when accessed through the same underlying object, but references of different types.\r\n\r\nFix to https://github.com/dotnet/roslyn/issues/34933\r\n\r\nNamely:\r\n\r\n```csharp\r\nusing System;\r\n\r\npublic class Person {\r\n    public string Name { get; set; }\r\n}\r\n\r\npublic class Student : Person { }\r\n\r\n\r\npublic class C {\r\n    public void M(Person p) {\r\n        switch (p) {\r\n            case { Name: \"Bill\" }:\r\n                Console.WriteLine(\"Hey Bill!\");\r\n                break;\r\n            case Student { Name: var name }:\r\n                Console.WriteLine($\"Hello student {name}!\");\r\n                break;\r\n            case { Name: var name }:\r\n                Console.WriteLine($\"Hello non-student {name}!\");\r\n                break;\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nwill now only evaluate Person.Name once.\r\n\r\nThere are a number of limitations to this - the tests describe the details in comments.","Url":"https://github.com/dotnet/roslyn/pull/35669","RelatedDescription":"Open PR \"Don't read the same property twice in pattern matching \" (#35669)"},{"Id":"443097929","IsPullRequest":false,"CreatedAt":"2019-05-12T12:17:34","Actor":"YairHalberstadt","Number":"35668","RawContent":null,"Title":"Nullability analysis not flowing through switches","State":"open","Body":"**Version Used**: master\r\n\r\n**Steps to Reproduce**:\r\n\r\nCompile the following:\r\n\r\n```csharp\r\nusing System;\r\n\r\n#nullable enable\r\n\r\npublic class Person {\r\n    public string? Name { get;}\r\n}\r\npublic class C {\r\n    public void M(Person p) {\r\n        switch (p) {\r\n            case { Name: var name } when name is null:\r\n                Console.WriteLine(\"Hey anonymous\");\r\n            break;\r\n            case { Name: var name }:\r\n                Console.WriteLine($\"Person has name of length { name.Length }!\");\r\n            break;\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nhttps://sharplab.io/#v2:EYLgtghgzgLgpgJwDQxASwDYB8ACAGAAhwEYBuAWACgqBiAOwFcMMJgM4C47X2qqcAzEQBMBAAqIoAezoEA3lQJKiQkngD8BAHIQwHOQQDmcGKQC+VC5UEiCAYXmLlNnABYCAWQAUEhNNkADgCUjpTK4QRQAO5oMADGABYEXsGhEekEcdD62rpwIAQAbhAIBNx6BGYEUQlcZXkEaFBlTBggThkZJACcXgBEABJwAJ4EEHQyw2BSDFB9QRRhncrACHAQANaLy8pZUDk6egXFpeUcZu1LO+E9XgAkfb7+BAnQ9RVSAGYE7HSGMEkDGcAHQAGS4/ySZgAhPNttdVusth0IlZwlYzEA=\r\n\r\n**Expected Behavior**: no warning\r\n\r\n**Actual Behavior**: warning CS8602: Dereference of a possibly null reference. `Console.WriteLine($\"Person has name of length { name.Length }!\");`\r\n\r\nThis looks related to https://github.com/dotnet/roslyn/issues/34828, but that has been fixed, and this still occurs in master on sharplab.\r\n","Url":"https://github.com/dotnet/roslyn/issues/35668","RelatedDescription":"Open issue \"Nullability analysis not flowing through switches\" (#35668)"},{"Id":"443054354","IsPullRequest":true,"CreatedAt":"2019-05-12T01:50:59","Actor":"sharwell","Number":"35667","RawContent":null,"Title":"Implement Quick Info styles","State":"open","Body":":x: Blocked on #34860 (I will rebase this change after the prerequisite is merged).\r\n\r\n* Support emphasis in Quick Info (`<em>` and `<i>` elements in XML documentation comments)\r\n* Support strong in Quick Info (`<strong>` and `<b>` elements in XML documentation comments)\r\n* Support code font in Quick Info (`<c>`, `<code>`, `<tt>` elements in XML documentation comments)\r\n* Support bullet and numbered lists in Quick Info\r\n* Support definition lists in Quick Info\r\n* Support navigating to `cref` items by clicking in Quick Info\r\n* Support navigating to `href` hyperlinks in Quick Info (`<see href` and `<a href`)\r\n\r\n📝 All of the new behaviors need tests.\r\n\r\n### Images\r\n\r\n⚠️ This picture is *slightly* outdated relative to current behavior (both links to https://google.com now render correctly, and the spacing for list items has changed slightly.\r\n![image](https://user-images.githubusercontent.com/1408396/57576804-51ba6b00-742e-11e9-9646-3788f4e534e5.png)\r\n\r\n![image](https://user-images.githubusercontent.com/1408396/57576812-7878a180-742e-11e9-8721-8b948fcdd170.png)\r\n","Url":"https://github.com/dotnet/roslyn/pull/35667","RelatedDescription":"Open PR \"Implement Quick Info styles\" (#35667)"},{"Id":"443032716","IsPullRequest":false,"CreatedAt":"2019-05-11T20:20:17","Actor":"jnm2","Number":"35665","RawContent":null,"Title":"Create and initialize property/field for all unused constructor parameters","State":"open","Body":"This would save me some time regularly. Currently the best alternative I know of is to manually place the caret on each parameter and do Ctrl+., enter on each one. Sometimes there are three or four, other times there are more than ten.\r\n\r\nReSharper has the menu hierarchy 'Introduce get-only auto-property Foo' > 'For all unused parameters'.","Url":"https://github.com/dotnet/roslyn/issues/35665","RelatedDescription":"Open issue \"Create and initialize property/field for all unused constructor parameters\" (#35665)"},{"Id":"443028599","IsPullRequest":true,"CreatedAt":"2019-05-11T19:29:05","Actor":"gafter","Number":"35664","RawContent":null,"Title":"Fix bug where pattern-matching treats a type parameter as if it is a reference (which it might not be)","State":"open","Body":"Fixes #35584\r\n\r\n@agocke @cston @jcouv for review.  This is a serious bad-code-gen regression and should be fixed in 16.1.  I'm not certain that I am targeting the correct branch.\r\n\r\n**Customer and scenario info**\r\n\r\n**Who is impacted by this bug?**\r\nCustomers who use pattern-matching in C# 7 in VS2019.\r\n\r\n**What is the customer scenario and impact of the bug?**\r\nThe scenario is a pattern-matching operation where the input is a type parameter and it is being matched into a variable of type `object` or some reference base type of the type parameter.  The compiler produces unverifiable code, omitting a necessary `box` instruction on the input.  This causes a runtime crash when the type parameter is instantiated with a value type.\r\n\r\n**What is the workaround?**\r\nNone\r\n\r\n**How was the bug found?**\r\nCustomer-reported\r\n\r\n**If this fix is for a regression - what had regressed, when was the regression introduced, and why was the regression originally missed?**\r\n\r\nThis is a regression in VS2019 versus previous VS2017.  We rewrote the code generation for pattern-matching from scratch in VS2019 in order to add other (experimental for C# 8) pattern-matching features, and this particular interaction was missed in testing.  The test gap is fixed here.\r\n","Url":"https://github.com/dotnet/roslyn/pull/35664","RelatedDescription":"Open PR \"Fix bug where pattern-matching treats a type parameter as if it is a reference (which it might not be)\" (#35664)"}],"ResultType":"GitHubIssue"},"CoreRT-Issues":{"Issues":[{"Id":"443568119","IsPullRequest":true,"CreatedAt":"2019-05-14T03:14:10","Actor":"jkotas","Number":"7418","RawContent":null,"Title":"Opt-in more Windows PInvokes into direct calls","State":"closed","Body":"Fixes intermittent infinited recursion inside lazy PInvoke resolver","Url":"https://github.com/dotnet/corert/pull/7418","RelatedDescription":"Closed or merged PR \"Opt-in more Windows PInvokes into direct calls\" (#7418)"},{"Id":"443634094","IsPullRequest":true,"CreatedAt":"2019-05-14T03:13:57","Actor":"JohnTortugo","Number":"7419","RawContent":null,"Title":"Update xplat-job.yml","State":"closed","Body":"Relates to: https://github.com/dotnet/core-eng/issues/6291\r\n\r\n/cc @MattGal ","Url":"https://github.com/dotnet/corert/pull/7419","RelatedDescription":"Closed or merged PR \"Update xplat-job.yml\" (#7419)"},{"Id":"443662831","IsPullRequest":true,"CreatedAt":"2019-05-14T03:02:47","Actor":"MichalStrehovsky","Number":"7420","RawContent":null,"Title":"Fix ProjectN build breaks","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/7420","RelatedDescription":"Closed or merged PR \"Fix ProjectN build breaks\" (#7420)"},{"Id":"441964184","IsPullRequest":true,"CreatedAt":"2019-05-13T19:45:58","Actor":"nattress","Number":"7411","RawContent":null,"Title":"Add SuperIlc compile-nuget command","State":"closed","Body":"Add support for compiling assemblies from Nuget packages with Crossgen / CPAOT to validate them on real-world code. The compile-nuget command takes a list of Nuget packages and for each package creates an empty console app, adds the package to the app, publishes, and then runs Crossgen / CPAOT. This initial command does not run the app and is meant for gathering data on noisiness of compile logs, ensuring compilation regressions don't happen, tracking ready-to-run binary sizes, etc.\r\n\r\nTop100Nuget.txt is provided as an example, and contains the 100 most popular Nuget packages on nuget.org as of this commit.","Url":"https://github.com/dotnet/corert/pull/7411","RelatedDescription":"Closed or merged PR \"Add SuperIlc compile-nuget command\" (#7411)"},{"Id":"441935856","IsPullRequest":true,"CreatedAt":"2019-05-13T18:04:12","Actor":"trylek","Number":"7410","RawContent":null,"Title":"SuperIlc support for the issues.targets file","State":"closed","Body":"This change implements a new option --issues-path that can be used\r\nto specify the path to explicit CoreCLR test exclusion XML file.\r\nThis is useful when running CoreCLR test suites so that we filter\r\nout tests known to be failing or hanging and thus reduce noise in\r\nour CPAOT results.\r\n\r\nAs the issues.targets is technically an msbuild project file, I have\r\nleveraged MSBuild interface libraries to evaluate the conditional\r\nexpressions in the file much like we do in .NET Native when evaluating\r\nthe bugdata.ProjectN.xml file. For now I have set many of the project\r\nproperties to arbitrary values, that's up to further cleanup once\r\nwe start expanding our targeting matrix.\r\n\r\nThanks\r\n\r\nTomas","Url":"https://github.com/dotnet/corert/pull/7410","RelatedDescription":"Closed or merged PR \"SuperIlc support for the issues.targets file\" (#7410)"},{"Id":"443059474","IsPullRequest":true,"CreatedAt":"2019-05-13T17:38:45","Actor":"Suchiman","Number":"7416","RawContent":null,"Title":"Port GC changes from coreclr - 8","State":"closed","Body":"This port continues https://github.com/dotnet/corert/pull/7389\r\nPorting strategy: extracting patches via `format-patch` from coreclr, adjusting paths, then `am` them on corert.\r\n\r\n**Glossary:**\r\n- already merged: change already exists in corert\r\n- gc only port: change only affected the gc directory and patch applied with no conflicts\r\n- manual port: change applied with custom changes\r\n- omitted changes: contains changes to files that do not exists in corert and were discarded\r\n\r\n**Changes since [last commit](https://github.com/dotnet/coreclr/commit/1e11b32ca720f886adfa0cc2a6a46829feba78d0):**\r\n- https://github.com/dotnet/coreclr/commit/0ee3b5e64a98dc71aefed2304fe4bcf7f66ca9f5 (manual port, omitted changes)\r\n- https://github.com/dotnet/coreclr/commit/d23a2bc131eae32c473e39fcb3b640af1a95d244 (manual port, omitted changes)\r\n- https://github.com/dotnet/coreclr/commit/dda6b6136e21901842758970d831f31687913a35 (manual port, omitted changes)\r\n- https://github.com/dotnet/coreclr/commit/e7725a6ff986879f8ff2fd9e09ab636545ba7bca (gc only port, omitted changes)\r\n- https://github.com/dotnet/coreclr/commit/3a24095610ecaba62495740bf8319ad467af4997 (manual port, omitted changes)\r\n- https://github.com/dotnet/coreclr/commit/3bd82d1935806a87d668f4ea102de37077996005 (gc only port)\r\n- https://github.com/dotnet/coreclr/commit/8b8231291ded137c49632ef808bbbdc9a500507b (gc only port)\r\n- https://github.com/dotnet/coreclr/commit/0372174871c1e27f483c9877c2c5181720be8722 (gc only port, omitted changes)\r\n- https://github.com/dotnet/coreclr/commit/df214e67d3cbccb42d2733f4cbe8097a378a731a (skipped)\r\n- https://github.com/dotnet/coreclr/commit/8415a8933844c9d92c435f6ac268612a9563eb3a (gc only port)\r\n- https://github.com/dotnet/coreclr/commit/5e82b75a22e9f1ee379beab45c2ddc6146132aab (gc only port)\r\n\r\n**Points of interest**:\r\nhttps://github.com/dotnet/coreclr/commit/d23a2bc131eae32c473e39fcb3b640af1a95d244 made some changes to volatile on the runtime side that i've only partially applied\r\nI've skipped the patch for `Add CGroup CFS CPU limit support` because cgroups support is missing","Url":"https://github.com/dotnet/corert/pull/7416","RelatedDescription":"Closed or merged PR \"Port GC changes from coreclr - 8\" (#7416)"},{"Id":"443513642","IsPullRequest":false,"CreatedAt":"2019-05-13T17:21:02","Actor":"ctaggart","Number":"7417","RawContent":null,"Title":"Please provide a .vsconfig","State":"open","Body":"Please provide a .vsconfig with the minimal required Visual Studio 2019 dependencies needed to build. For an example, see:\r\n\r\nhttps://github.com/microsoft/visualfsharp/blob/master/.vsconfig\r\n\r\nRight now the experience is:\r\n```\r\nPS C:\\Users\\taggac\\github\\corert> .\\build.cmd\r\nChecking pre-requisites...\r\n\r\n**********************************************************************\r\n** Visual Studio 2019 Developer Command Prompt v16.1.0-pre.3.0\r\n** Copyright (c) 2019 Microsoft Corporation\r\n**********************************************************************\r\nCould not find Visual C++ under C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Preview\\Common7\\Tools\\. Visual C++ is a pre-requisite to build this repository.\r\nSee: https://github.com/dotnet/corert/blob/master/Documentation/prerequisites-for-building.md\r\n```\r\n\r\nI'd like to be able to open a solution and have Visual Studio prompt to install all the dependencies via Visual Studio Installer.","Url":"https://github.com/dotnet/corert/issues/7417","RelatedDescription":"Open issue \"Please provide a .vsconfig\" (#7417)"},{"Id":"442915094","IsPullRequest":true,"CreatedAt":"2019-05-11T21:57:05","Actor":"nattress","Number":"7414","RawContent":null,"Title":"Clean publish test output folders before run","State":"closed","Body":"Incremental build was hiding failures in our local enlistments that only CI would catch due to it always starting with a fresh enlistment.","Url":"https://github.com/dotnet/corert/pull/7414","RelatedDescription":"Closed or merged PR \"Clean publish test output folders before run\" (#7414)"},{"Id":"443016643","IsPullRequest":true,"CreatedAt":"2019-05-11T17:14:29","Actor":"trylek","Number":"7415","RawContent":null,"Title":"Move CanInline to CompilationModuleGroup","State":"open","Body":"As a preparatory change towards adding support for large version\r\nbubble to CPAOT I'm proposing to move CanInline from Compilation to\r\nCompilationModuleGroup in accordance with Simon's and Michal's\r\nfeedback - this refactoring will make it much easier to decouple\r\nthe set of assemblies being compiled from the set of assemblies\r\nwe can inline against (in large version bubble mode anything\r\ncan be inlined).\r\n\r\nThanks\r\n\r\nTomas","Url":"https://github.com/dotnet/corert/pull/7415","RelatedDescription":"Open PR \"Move CanInline to CompilationModuleGroup\" (#7415)"},{"Id":"442866699","IsPullRequest":true,"CreatedAt":"2019-05-10T21:13:18","Actor":"trylek","Number":"7413","RawContent":null,"Title":"Revert \"Initial CPAOT support for large version bubble\"","State":"closed","Body":"Reverts dotnet/corert#7403","Url":"https://github.com/dotnet/corert/pull/7413","RelatedDescription":"Closed or merged PR \"Revert \"Initial CPAOT support for large version bubble\"\" (#7413)"},{"Id":"440872069","IsPullRequest":true,"CreatedAt":"2019-05-09T21:14:25","Actor":"trylek","Number":"7403","RawContent":null,"Title":"Initial CPAOT support for large version bubble","State":"closed","Body":"This change modifies the existing --inputbubble CPAOT option\r\nto work the same as Crossgen /largeversionbubble i.e. the main module\r\nand all reference assemblies are considered to belong to the same\r\nversion bubble.\r\n\r\nThe gist of the change deals with encoding module overrides in\r\nsignatures. I have implemented a new R2R header table\r\nManifestMetadataTableNode and added logic for composing and emitting\r\nthe extra AssemblyRef list.\r\n\r\nOne challenging bit was that we need to emit all the signatures before\r\nemitting the ManifestMetadataTableNode because only the emission\r\nof the signatures shakes out all the required AssemblyRef's. I have\r\nadded a simple loop to ImportSectionsTableNode / ImportSectionNode\r\nthat traverses and emits all registered import cell signatures.\r\n\r\nAfter I managed to make the basic signature emission work with module\r\noverride, I continued hitting issues with the two entrypoint tables.\r\nFor the (non-generic) method entrypoint table we need to filter out\r\nmethods outside of the current input module because the larger\r\ncompilation group representing the larger version bubble ends up\r\nexpanding the dependency graph to framework methods.\r\n\r\nWhile these \"external\" methods are not compiled into the output\r\nexecutable (except when they are occasionally inlined into a local\r\nmethod), we were still trying to emit them into the entrypoint\r\ntable and we were crashing compilation because we couldn't find\r\nsome of the necessary tokens.\r\n\r\nFor instance entrypoints, I didn't find any manner of encoding\r\na module override for their signatures in the native hashtable so\r\nfor now I added filtering that we're only storing those instance\r\nentrypoints that have the current input module as the reference\r\nmodule. One can theoretically imagine that a module may contain\r\narbitrary generic instantiations spanning other modules when\r\nlarger bubbles are on.\r\n\r\nWhile working on the change I also realized that the current way\r\nof basing signature contexts on input modules in CorInfoImpl.ReadyToRun\r\nwas incorrect - when a method gets inlined, we still need the original\r\nsignature context because that's what defines the ambient module\r\nused in the CoreCLR signature parser.\r\n\r\nI have deleted the field and instead I added a new method\r\nGetSignatureContext which currently returns\r\nReadyToRunCoregenNodeFactory.InputModuleContext. Once we start\r\nimplementing \"single-file\" (i.e. compiling multiple MSIL modules\r\ninto a single PE), we'll change this to something more fine-grained,\r\nmost likely based on some lookup on MethodBeingCompiled.\r\n\r\nThanks\r\n\r\nTomas","Url":"https://github.com/dotnet/corert/pull/7403","RelatedDescription":"Closed or merged PR \"Initial CPAOT support for large version bubble\" (#7403)"},{"Id":"442385927","IsPullRequest":true,"CreatedAt":"2019-05-09T19:03:45","Actor":"Dotnet-GitSync-Bot","Number":"7412","RawContent":null,"Title":"Mirror changes from dotnet/corefx,coreclr","State":"open","Body":"This PR contains mirrored changes from dotnet/corefx,coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub","Url":"https://github.com/dotnet/corert/pull/7412","RelatedDescription":"Open PR \"Mirror changes from dotnet/corefx,coreclr\" (#7412)"},{"Id":"441809686","IsPullRequest":false,"CreatedAt":"2019-05-08T20:23:21","Actor":"danwalmsley","Number":"7408","RawContent":null,"Title":"UWP .net Native Internal Compiler Error.","State":"closed","Body":"Sorry if this is the wrong place for .net native and UWP compile errors.\r\n\r\nI have a UWP app, and we have been using debug mode during develop. We are trying to build in release mode with .net native toolchain (this is quite important for us to get the high performance.)\r\n\r\nHowever we get an internal compiler error:\r\n```\r\n8>C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\MSBuild\\Microsoft\\VisualStudio\\v16.0\\AppxPackage\\Microsoft.AppXPackage.Targets(3164,5): warning : APPX4001: Build property AppxBundlePlatforms is not explicitly set and is calculated based on currently building architecture. Use 'Create App Package' wizard or edit project file to set it.\r\n8>  Processing application code\r\n8>  Computing application closure and generating interop code\r\n8>    Loading 121 modules...\r\n8>    Generating code...\r\n8>    Interop code generated.\r\n8>  Generating serialization code\r\n8>  Compiling interop code\r\n8>  Generating System.Reflection.DispatchProxy proxy code.\r\n8>  Cleaning up unreferenced code\r\n8>  Generating native code\r\n8>C:\\Program Files (x86)\\Microsoft SDKs\\UWPNuGetPackages\\microsoft.net.native.compiler\\2.2.3\\tools\\Microsoft.NetNative.targets(801,5): error : ILT0005: 'C:\\Program Files (x86)\\Microsoft SDKs\\UWPNuGetPackages\\runtime.win10-x64.microsoft.net.native.compiler\\2.2.3\\tools\\x64\\ilc\\Tools\\nutc_driver.exe @\"C:\\dev\\repos\\ILMD\\ILMD.App\\ILMD.App\\ILMD.App.UWP\\obj\\x64\\Release\\ilc\\intermediate\\MDIL\\ILMD.App.UWP.rsp\"' returned exit code 1\r\n========== Build: 7 succeeded, 1 failed, 0 up-to-date, 0 skipped ==========\r\n```\r\n\r\n\r\nI ran using msbuild and versbose and nutc_driver.exe gives internal compiler error but no more useful information.\r\n\r\n   I would be willing to send my source code for testing privately.\r\n\r\nThanks in advance\r\n\r\n","Url":"https://github.com/dotnet/corert/issues/7408","RelatedDescription":"Closed issue \"UWP .net Native Internal Compiler Error.\" (#7408)"},{"Id":"441867767","IsPullRequest":true,"CreatedAt":"2019-05-08T18:24:16","Actor":"MichalStrehovsky","Number":"7409","RawContent":null,"Title":"Merge master to nmirror","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/7409","RelatedDescription":"Closed or merged PR \"Merge master to nmirror\" (#7409)"},{"Id":"441270623","IsPullRequest":true,"CreatedAt":"2019-05-08T09:12:19","Actor":"MichalStrehovsky","Number":"7405","RawContent":null,"Title":"Fix ProjectN build breaks","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/7405","RelatedDescription":"Closed or merged PR \"Fix ProjectN build breaks\" (#7405)"},{"Id":"441376921","IsPullRequest":true,"CreatedAt":"2019-05-08T01:12:00","Actor":"jkotas","Number":"7406","RawContent":null,"Title":"Port https://github.com/dotnet/coreclr/pull/24387 to CoreRT","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/7406","RelatedDescription":"Closed or merged PR \"Port https://github.com/dotnet/coreclr/pull/24387 to CoreRT\" (#7406)"},{"Id":"441426037","IsPullRequest":false,"CreatedAt":"2019-05-07T20:14:25","Actor":"Fabi","Number":"7407","RawContent":null,"Title":"Tls callbacks","State":"open","Body":"Hey!\r\n\r\nI know that I can create native exports etc, but my question is if it's possible to use own tls callbacks in the current state?","Url":"https://github.com/dotnet/corert/issues/7407","RelatedDescription":"Open issue \"Tls callbacks\" (#7407)"},{"Id":"440221804","IsPullRequest":true,"CreatedAt":"2019-05-07T16:47:31","Actor":"nattress","Number":"7393","RawContent":null,"Title":"Fix inlined field access outside version bubble","State":"closed","Body":"When the JIT inlines methods outside the version bubble and those methods refer to fields, we cannot encode those field accesses. Abort the inline attempt in that case by guarding calls from `getFieldInfo` to get field import signatures.\r\n\r\nSkip emitting fixups for intrinsic field access (ie, IntPtr.Zero) that the JIT knows how to handle.","Url":"https://github.com/dotnet/corert/pull/7393","RelatedDescription":"Closed or merged PR \"Fix inlined field access outside version bubble\" (#7393)"},{"Id":"441010437","IsPullRequest":true,"CreatedAt":"2019-05-07T04:17:53","Actor":"Dotnet-GitSync-Bot","Number":"7404","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @Anipik","Url":"https://github.com/dotnet/corert/pull/7404","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7404)"},{"Id":"440801223","IsPullRequest":true,"CreatedAt":"2019-05-06T17:53:33","Actor":"Dotnet-GitSync-Bot","Number":"7402","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @AaronRobinsonMSFT","Url":"https://github.com/dotnet/corert/pull/7402","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7402)"},{"Id":"440711963","IsPullRequest":true,"CreatedAt":"2019-05-06T15:18:44","Actor":"Dotnet-GitSync-Bot","Number":"7400","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @krwq","Url":"https://github.com/dotnet/corert/pull/7400","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7400)"},{"Id":"439939415","IsPullRequest":true,"CreatedAt":"2019-05-06T15:16:28","Actor":"ifew","Number":"7391","RawContent":null,"Title":"Add link to sample project working with database","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/7391","RelatedDescription":"Closed or merged PR \"Add link to sample project working with database\" (#7391)"},{"Id":"440731576","IsPullRequest":false,"CreatedAt":"2019-05-06T15:15:36","Actor":"vadash","Number":"7401","RawContent":null,"Title":"Q: .managed section in PE file. Can someone extract source code from it ?","State":"closed","Body":"and what does it contain ? \r\n![die_SlSWWwH5nM](https://user-images.githubusercontent.com/1397582/57232467-52659280-7025-11e9-948e-ed7f4d55c1fe.png)\r\nThanks for amazing CoreRT\r\n","Url":"https://github.com/dotnet/corert/issues/7401","RelatedDescription":"Closed issue \"Q: .managed section in PE file. Can someone extract source code from it ?\" (#7401)"},{"Id":"440697846","IsPullRequest":true,"CreatedAt":"2019-05-06T13:24:01","Actor":"MichalStrehovsky","Number":"7399","RawContent":null,"Title":"Merge master to nmirror","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/7399","RelatedDescription":"Closed or merged PR \"Merge master to nmirror\" (#7399)"},{"Id":"440666948","IsPullRequest":true,"CreatedAt":"2019-05-06T12:05:21","Actor":"MichalStrehovsky","Number":"7398","RawContent":null,"Title":"Fix nullable analysis errors in ProjectN","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/7398","RelatedDescription":"Closed or merged PR \"Fix nullable analysis errors in ProjectN\" (#7398)"},{"Id":"440649625","IsPullRequest":true,"CreatedAt":"2019-05-06T11:16:11","Actor":"dotnet-bot","Number":"7397","RawContent":null,"Title":"Merge changes from TFS","State":"closed","Body":"When merging, this PR, please ensure a merge commit is created as automation requires the merge commit.  Do not 'Squash and merge' or 'Rebase and merge'!","Url":"https://github.com/dotnet/corert/pull/7397","RelatedDescription":"Closed or merged PR \"Merge changes from TFS\" (#7397)"},{"Id":"440644215","IsPullRequest":true,"CreatedAt":"2019-05-06T10:58:31","Actor":"MichalStrehovsky","Number":"7396","RawContent":null,"Title":"Merge master to nmirror","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/7396","RelatedDescription":"Closed or merged PR \"Merge master to nmirror\" (#7396)"},{"Id":"440483855","IsPullRequest":true,"CreatedAt":"2019-05-05T22:22:44","Actor":"Dotnet-GitSync-Bot","Number":"7395","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @benaadams","Url":"https://github.com/dotnet/corert/pull/7395","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7395)"},{"Id":"440209822","IsPullRequest":true,"CreatedAt":"2019-05-04T02:03:33","Actor":"MichalStrehovsky","Number":"7392","RawContent":null,"Title":"Fix ProjectN build breaks","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/7392","RelatedDescription":"Closed or merged PR \"Fix ProjectN build breaks\" (#7392)"},{"Id":"440231323","IsPullRequest":true,"CreatedAt":"2019-05-04T02:03:21","Actor":"Dotnet-GitSync-Bot","Number":"7394","RawContent":null,"Title":"Mirror changes from dotnet/corefx,coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/corefx,coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @sywhang @GrabYourPitchforks @filipnavara","Url":"https://github.com/dotnet/corert/pull/7394","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corefx,coreclr\" (#7394)"}],"ResultType":"GitHubIssue"},"SDK-Issues":{"Issues":[{"Id":"443634084","IsPullRequest":true,"CreatedAt":"2019-05-14T04:43:11","Actor":"JohnTortugo","Number":"3229","RawContent":null,"Title":"Update .vsts-ci.yml","State":"closed","Body":"Relates to: https://github.com/dotnet/core-eng/issues/6291\r\n\r\n/cc @mattgal","Url":"https://github.com/dotnet/sdk/pull/3229","RelatedDescription":"Closed or merged PR \"Update .vsts-ci.yml\" (#3229)"},{"Id":"442475750","IsPullRequest":true,"CreatedAt":"2019-05-14T01:08:18","Actor":"dsplaisted","Number":"3221","RawContent":null,"Title":"Add support for transitive framework references","State":"closed","Body":"Fixes dotnet/cli#10666","Url":"https://github.com/dotnet/sdk/pull/3221","RelatedDescription":"Closed or merged PR \"Add support for transitive framework references\" (#3221)"},{"Id":"443611004","IsPullRequest":true,"CreatedAt":"2019-05-13T21:30:54","Actor":"dsplaisted","Number":"3228","RawContent":null,"Title":"Add ability to use test config file to list tests to skip","State":"open","Body":"Add support for passing a `-testConfigFile` parameter when running tests.  This allows individual tests to be skipped without having to modify the test source code.  This will be helpful to allow tests to be run on other repos, such as with https://github.com/dotnet/core-sdk/pull/1454.\r\n\r\nThe test config file looks like this\r\n\r\n```xml\r\n<Tests>\r\n  <Method Name=\"Microsoft.NET.Clean.Tests.GivenThatWeWantToCleanAHelloWorldProject.It_can_clean_and_build_without_using_rebuild\"\r\n          Skip=\"true\"\r\n          Issue=\"https://github.com/dotnet/sdk/issues/1234\"\r\n          Reason=\"Reason for skip\"/>\r\n</Tests>\r\n```\r\n\r\nThe `Issue` and `Reason` attributes aren't currently used, they are merely informational to help us keep such a list up-to-date.","Url":"https://github.com/dotnet/sdk/pull/3228","RelatedDescription":"Open PR \"Add ability to use test config file to list tests to skip\" (#3228)"},{"Id":"443361175","IsPullRequest":true,"CreatedAt":"2019-05-13T13:35:29","Actor":"dotnet-maestro[bot]","Number":"3227","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190512.1\r\n- **Date Produced**: 5/12/2019 12:58 PM\r\n- **Commit**: 30682cda0dd7ca1765463749dd91ec3cfec75eb9\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19262.1\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19262.1\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3227","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#3227)"},{"Id":"443096756","IsPullRequest":true,"CreatedAt":"2019-05-12T13:49:50","Actor":"dotnet-maestro[bot]","Number":"3226","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190511.1\r\n- **Date Produced**: 5/11/2019 1:13 PM\r\n- **Commit**: 136dfbfa8a6173dadc107bf7393bdeaceecb4d3a\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19261.1\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19261.1\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3226","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#3226)"},{"Id":"442986145","IsPullRequest":true,"CreatedAt":"2019-05-11T13:34:45","Actor":"dotnet-maestro[bot]","Number":"3225","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190510.2\r\n- **Date Produced**: 5/10/2019 8:01 PM\r\n- **Commit**: 810920cf8a5fc183585304193f8b4e4e189497e9\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19260.2\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19260.2\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3225","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#3225)"},{"Id":"442909757","IsPullRequest":true,"CreatedAt":"2019-05-10T22:01:18","Actor":"wli3","Number":"3224","RawContent":null,"Title":"WIP test ci Add hello world winforms and wpf tests","State":"open","Body":"","Url":"https://github.com/dotnet/sdk/pull/3224","RelatedDescription":"Open PR \"WIP test ci Add hello world winforms and wpf tests\" (#3224)"},{"Id":"442888741","IsPullRequest":false,"CreatedAt":"2019-05-10T20:47:19","Actor":"wli3","Number":"3223","RawContent":null,"Title":"Add performance test for WPF and Winform","State":"open","Body":"- [ ] Add hello world test for WPF and Winform for netcore and full framework, make sure infrastructure supports that.\r\n- [ ] Add large realistic project","Url":"https://github.com/dotnet/sdk/issues/3223","RelatedDescription":"Open issue \"Add performance test for WPF and Winform\" (#3223)"},{"Id":"441556194","IsPullRequest":true,"CreatedAt":"2019-05-10T16:50:53","Actor":"wli3","Number":"3212","RawContent":null,"Title":"Fix packasktool cannot run","State":"closed","Body":"","Url":"https://github.com/dotnet/sdk/pull/3212","RelatedDescription":"Closed or merged PR \"Fix packasktool cannot run\" (#3212)"},{"Id":"442684448","IsPullRequest":true,"CreatedAt":"2019-05-10T13:50:37","Actor":"dotnet-maestro[bot]","Number":"3222","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190509.9\r\n- **Date Produced**: 5/10/2019 12:31 AM\r\n- **Commit**: 155080ecb738e189db75f8f2461ebad75d955aa7\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19259.9\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19259.9\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3222","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#3222)"},{"Id":"441924321","IsPullRequest":true,"CreatedAt":"2019-05-09T20:34:43","Actor":"nugetlurker","Number":"3218","RawContent":null,"Title":"Insert NuGet Build 5.1.0-rtm.6013 into sdk","State":"closed","Body":"Insert NuGet Build 5.1.0-rtm.6013 into sdk release/2.1.7xx branch","Url":"https://github.com/dotnet/sdk/pull/3218","RelatedDescription":"Closed or merged PR \"Insert NuGet Build 5.1.0-rtm.6013 into sdk\" (#3218)"},{"Id":"441924290","IsPullRequest":true,"CreatedAt":"2019-05-09T19:27:43","Actor":"nugetlurker","Number":"3217","RawContent":null,"Title":"Insert NuGet Build 5.1.0-rtm.6013 into sdk","State":"closed","Body":"Insert NuGet Build 5.1.0-rtm.6013 into sdk release/2.2.3xx branch","Url":"https://github.com/dotnet/sdk/pull/3217","RelatedDescription":"Closed or merged PR \"Insert NuGet Build 5.1.0-rtm.6013 into sdk\" (#3217)"},{"Id":"442353906","IsPullRequest":false,"CreatedAt":"2019-05-09T18:09:57","Actor":"jdavidbambrick","Number":"3220","RawContent":null,"Title":"Internal Error: new deps file generation logic did not produce the same result as the old logic.","State":"closed","Body":"Added an new publishing profile - a new folder, under the existing one ... and go this error asking me to post it back to git hub... so here ya go...\r\n\r\n[netcoreapp3.0.zip](https://github.com/dotnet/sdk/files/3163329/netcoreapp3.0.zip)\r\n","Url":"https://github.com/dotnet/sdk/issues/3220","RelatedDescription":"Closed issue \"Internal Error: new deps file generation logic did not produce the same result as the old logic.\" (#3220)"},{"Id":"441195943","IsPullRequest":true,"CreatedAt":"2019-05-09T18:07:17","Actor":"dotnet-maestro[bot]","Number":"3209","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190506.12\r\n- **Date Produced**: 5/7/2019 5:12 AM\r\n- **Commit**: c31fac9f6899094226cb5cd77c85b8f60ecafa3d\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19256.12\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19256.12\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190507.7\r\n- **Date Produced**: 5/8/2019 12:49 AM\r\n- **Commit**: bda52d7619f9420de46f2c39ffc972864bbcab63\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19257.7\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19257.7\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190508.5\r\n- **Date Produced**: 5/8/2019 10:17 PM\r\n- **Commit**: 9005cee9510d23535c09bd9b6be7c426e526c067\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19258.5\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19258.5\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3209","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#3209)"},{"Id":"442001391","IsPullRequest":true,"CreatedAt":"2019-05-09T00:44:36","Actor":"fadimounir","Number":"3219","RawContent":null,"Title":"Enable ARM/ARM64 crossgen compilation on arm/arm64 hosted machines","State":"open","Body":"Also fixing a path issue with native PDB creation on Linux: creating file under the R2R subdir","Url":"https://github.com/dotnet/sdk/pull/3219","RelatedDescription":"Open PR \"Enable ARM/ARM64 crossgen compilation on arm/arm64 hosted machines\" (#3219)"},{"Id":"441753051","IsPullRequest":true,"CreatedAt":"2019-05-08T22:34:12","Actor":"dsplaisted","Number":"3214","RawContent":null,"Title":"Don't require NuGetPackageId metadata for classic projects","State":"closed","Body":"- Don't require NuGetPackageId metadata for classic projects\r\n- Allow SDK-style projects to opt out of requirement for NuGetPackageId metadata by setting `RequirePackageIdMetadata` to false\r\n\r\nRelated: https://github.com/dotnet/core-sdk/issues/1904\r\n\r\nIn this PR, I've opted to keep the error by default for SDK-style projects, with a property to opt-out.  This is because I think it should be rare that SDK-style projects directly reference a DLL from a NuGet package, and the error could help catch issues where we should be setting the metadata but aren't, and hence would not handle conflict resolution correctly.\r\n\r\nOn the other hand, perhaps the error has served its purpose by now, and we should instead just remove it entirely.\r\n\r\nThoughts? @nguerrera @ericstj ","Url":"https://github.com/dotnet/sdk/pull/3214","RelatedDescription":"Closed or merged PR \"Don't require NuGetPackageId metadata for classic projects\" (#3214)"},{"Id":"441891063","IsPullRequest":false,"CreatedAt":"2019-05-08T20:51:54","Actor":"genifycom","Number":"3216","RawContent":null,"Title":"Razor Component onClick with arguments","State":"closed","Body":"In the sample FetchData.razor how does one call the onclick event with an object.\r\n\r\ne.g.\r\n\r\n  <tbody>\r\n        @foreach (var forecast in forecasts)\r\n        {\r\n            <tr>\r\n                <td onclick=\"@EditForecast(forecast)\">@forecast.Date.ToShortDateString()</td>\r\n                <td>@forecast.TemperatureC</td>\r\n                <td>@forecast.TemperatureF</td>\r\n                <td>@forecast.Summary</td>\r\n            </tr>\r\n        }\r\n    </tbody>\r\n...\r\n\r\n@functions {\r\n  private void EditForecast(WeatherForecast forecast)\r\n  {\r\n    //Do something with forecast\r\n  }\r\n}","Url":"https://github.com/dotnet/sdk/issues/3216","RelatedDescription":"Closed issue \"Razor Component onClick with arguments\" (#3216)"},{"Id":"441889479","IsPullRequest":false,"CreatedAt":"2019-05-08T20:51:45","Actor":"genifycom","Number":"3215","RawContent":null,"Title":"Razor Component write to console.log","State":"closed","Body":"Is there or will there be a way to write to the Browser console log from a Razor component running on the server?\r\n\r\nThanks","Url":"https://github.com/dotnet/sdk/issues/3215","RelatedDescription":"Closed issue \"Razor Component write to console.log\" (#3215)"},{"Id":"441418877","IsPullRequest":false,"CreatedAt":"2019-05-08T20:15:24","Actor":"MSLukeWest","Number":"3210","RawContent":null,"Title":"Self contained Publish of .Net Core 3 app for win-x86 is missing files","State":"closed","Body":"1. Create a .NET Core 3 WPF app\r\n2. Publish to folder, change \"Deployment Mode\" to \"Self-Contained\" and \"Target Runtime\" to \"win-x86\"\r\n3. Copy the created folder to a completely clean win10 machine (no VS or anything else installed)\r\n4. Attempt to run the app\r\n\r\nResult: It immediately crashes.  Here's the exception from the event log (full stack below):\r\n\r\nException Info: System.TypeInitializationException: The type initializer for '<Module>' threw an exception. ---> System.TypeLoadException: Could not load type 'System.Runtime.InteropServices.Marshal' from assembly 'System.Runtime, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.\r\n\r\nWhen I debug this app on a machine with VS installed (where it works) I see two loaded assemblies that aren't present on the clean machine:\r\n\r\nWindows\\SysWOW64\\msvcp140.dll\r\nWindows\\SysWOW64\\vcruntime140.dll\r\n\r\nI'm guessing the vc runtime is required, if so these assemblies should be copied to the package folder when doing self-contained publishing.\r\n\r\nFull exception stack:\r\n\r\nApplication: WpfApp23.exe\r\nCoreCLR Version: 4.6.27622.75\r\n.NET Core Version: 3.0.0-preview5-27626-15\r\nDescription: The process was terminated due to an unhandled exception.\r\nException Info: System.TypeInitializationException: The type initializer for '<Module>' threw an exception. ---> System.TypeLoadException: Could not load type 'System.Runtime.InteropServices.Marshal' from assembly 'System.Runtime, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.\r\n   at ___CxxCallUnwindDtor(IntPtr pDtor, Void* pThis)\r\n   at .cctor()\r\n   --- End of inner exception stack trace ---\r\n   at System.Windows.ContextLayoutManager.UpdateLayout()\r\n   at System.Windows.UIElement.UpdateLayout()\r\n   at System.Windows.Interop.HwndSource.SetLayoutSize()\r\n   at System.Windows.Interop.HwndSource.set_RootVisualInternal(Visual value)\r\n   at System.Windows.Interop.HwndSource.set_RootVisual(Visual value)\r\n   at System.Windows.Window.SetRootVisual()\r\n   at System.Windows.Window.SetRootVisualAndUpdateSTC()\r\n   at System.Windows.Window.SetupInitialState(Double requestedTop, Double requestedLeft, Double requestedWidth, Double requestedHeight)\r\n   at System.Windows.Window.CreateSourceWindow(Boolean duringShow)\r\n   at System.Windows.Window.CreateSourceWindowDuringShow()\r\n   at System.Windows.Window.SafeCreateWindowDuringShow()\r\n   at System.Windows.Window.ShowHelper(Object booleanBox)\r\n   at System.Windows.Threading.ExceptionWrapper.InternalRealCall(Delegate callback, Object args, Int32 numArgs)\r\n   at System.Windows.Threading.ExceptionWrapper.TryCatchWhen(Object source, Delegate callback, Object args, Int32 numArgs, Delegate catchHandler)\r\n   at System.Windows.Threading.DispatcherOperation.InvokeImpl()\r\n   at System.Windows.Threading.DispatcherOperation.InvokeInSecurityContext(Object state)\r\n   at MS.Internal.CulturePreservingExecutionContext.CallbackWrapper(Object obj)\r\n   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state)\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state)\r\n   at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state)\r\n   at MS.Internal.CulturePreservingExecutionContext.Run(CulturePreservingExecutionContext executionContext, ContextCallback callback, Object state)\r\n   at System.Windows.Threading.DispatcherOperation.Invoke()\r\n   at System.Windows.Threading.Dispatcher.ProcessQueue()\r\n   at System.Windows.Threading.Dispatcher.WndProcHook(IntPtr hwnd, Int32 msg, IntPtr wParam, IntPtr lParam, Boolean& handled)\r\n   at MS.Win32.HwndWrapper.WndProc(IntPtr hwnd, Int32 msg, IntPtr wParam, IntPtr lParam, Boolean& handled)\r\n   at MS.Win32.HwndSubclass.DispatcherCallbackOperation(Object o)\r\n   at System.Windows.Threading.ExceptionWrapper.InternalRealCall(Delegate callback, Object args, Int32 numArgs)\r\n   at System.Windows.Threading.ExceptionWrapper.TryCatchWhen(Object source, Delegate callback, Object args, Int32 numArgs, Delegate catchHandler)\r\n   at System.Windows.Threading.Dispatcher.LegacyInvokeImpl(DispatcherPriority priority, TimeSpan timeout, Delegate method, Object args, Int32 numArgs)\r\n   at MS.Win32.HwndSubclass.SubclassWndProc(IntPtr hwnd, Int32 msg, IntPtr wParam, IntPtr lParam)\r\n   at MS.Win32.UnsafeNativeMethods.DispatchMessage(MSG& msg)\r\n   at System.Windows.Threading.Dispatcher.PushFrameImpl(DispatcherFrame frame)\r\n   at System.Windows.Threading.Dispatcher.PushFrame(DispatcherFrame frame)\r\n   at System.Windows.Threading.Dispatcher.Run()\r\n   at System.Windows.Application.RunDispatcher(Object ignore)\r\n   at System.Windows.Application.RunInternal(Window window)\r\n   at System.Windows.Application.Run(Window window)\r\n   at WpfApp23.App.Main()\r\n\r\n","Url":"https://github.com/dotnet/sdk/issues/3210","RelatedDescription":"Closed issue \"Self contained Publish of .Net Core 3 app for win-x86 is missing files\" (#3210)"},{"Id":"440503432","IsPullRequest":false,"CreatedAt":"2019-05-08T17:27:01","Actor":"imsmart-tech","Number":"3204","RawContent":null,"Title":"Internal error: new deps file generation did not produce the same result as the old logic","State":"closed","Body":"Got this error which said to file issue here. So here it goes.\r\n\r\n[ImSmart.deps.json.txt](https://github.com/dotnet/sdk/files/3146159/ImSmart.deps.json.txt)\r\n\r\n[ImSmart.deps.new.json.txt](https://github.com/dotnet/sdk/files/3146160/ImSmart.deps.new.json.txt)\r\n\r\n","Url":"https://github.com/dotnet/sdk/issues/3204","RelatedDescription":"Closed issue \"Internal error: new deps file generation did not produce the same result as the old logic\" (#3204)"},{"Id":"441429577","IsPullRequest":false,"CreatedAt":"2019-05-08T17:24:48","Actor":"dannyvv","Number":"3211","RawContent":null,"Title":"Internal error: new deps file generation logic did not produce the same result as the old logic.","State":"closed","Body":"The error message told me to file this issue:\r\n\r\n```\r\nSeverity\tCode\tDescription\tProject\tFile\tLine\tSuppression State\r\nError\t\tInternal error: new deps file generation logic did not produce the same result as the old logic.\r\n    Please file an issue for this at https://github.com/dotnet/sdk and include the following two files: \r\n    Deps file from old logic: d:\\src\\b6\\public\\src\\Services\\Agent\\bin\\Debug\\netcoreapp3.0\\Agent.deps.json\r\n    Deps file from new logic: d:\\src\\b6\\public\\src\\Services\\Agent\\bin\\Debug\\netcoreapp3.0\\Agent.deps.new.json\r\n    You can work around this by setting the DepsFileGenerationMode MSBuild property to 'old'\tAgent\tC:\\Program Files\\dotnet\\sdk\\3.0.100-preview4-011223\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Sdk.targets\t145\t\r\n```\r\n\r\nRequested files:\r\n[depsfiles.zip](https://github.com/dotnet/sdk/files/3154414/depsfiles.zip)\r\n\r\nNote: This started happening after adding a few assembly references by file to the BuildXL netcoreapp2.2 output folder\r\n","Url":"https://github.com/dotnet/sdk/issues/3211","RelatedDescription":"Closed issue \"Internal error: new deps file generation logic did not produce the same result as the old logic.\" (#3211)"},{"Id":"441735831","IsPullRequest":false,"CreatedAt":"2019-05-08T13:29:16","Actor":"NinoFloris","Number":"3213","RawContent":null,"Title":"Restore doesn't warn when restoring older pre 3.0 aspnet dependencies on netcore 3.0 resulting in TypeLoadExceptions","State":"open","Body":"Running on dotnet core 3.0.100-preview5 sdk while firing off a first request to aspnetcore 3.0.\r\n\r\n`dotnet restore` issues zero warnings when you try to restore projects with dependencies that reference older AspNetCore (sdk backed PackageReference) versions. Ran across this while updating one of our solutions where we have a dependency on `FluentValidation.AspNetCore` which depends on `Microsoft.AspNetCore.Mvc 2.2.0`\r\n\r\nThis is what's referenced in the deps.json of a succesfully built preview5 project:\r\n```\r\n      \"FluentValidation.AspNetCore/8.3.0\": {\r\n        \"dependencies\": {\r\n          \"FluentValidation\": \"8.3.0\",\r\n          \"FluentValidation.DependencyInjectionExtensions\": \"8.3.0\",\r\n          \"Microsoft.AspNetCore.Mvc\": \"2.2.0\"\r\n        },\r\n```\r\n\r\nStacktrace snippet \r\n```\r\n      Connection id \"0HLMJBP255QDV\", Request id \"0HLMJBP255QDV:00000001\": An unhandled exception was thrown by the application.\r\nSystem.Reflection.ReflectionTypeLoadException: Unable to load one or more of the requested types.\r\nMethod 'GetValidationVisitor' in type 'FluentValidation.AspNetCore.FluentValidationObjectModelValidator' from assembly 'FluentValidation.AspNetCore, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7de548da2fbae0f0' does not have an implementation.\r\n   at System.Reflection.RuntimeModule.GetTypes(RuntimeModule module)\r\n   at System.Reflection.RuntimeAssembly.get_DefinedTypes()\r\n   at Microsoft.AspNetCore.Mvc.ApplicationParts.AssemblyPart.get_Types()\r\n   at Microsoft.AspNetCore.Mvc.Controllers.ControllerFeatureProvider.PopulateFeature(IEnumerable`1 parts, ControllerFeature feature)\r\n   at Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPartManager.PopulateFeature[TFeature](TFeature feature)\r\n   at Microsoft.AspNetCore.Mvc.ApplicationModels.ControllerActionDescriptorProvider.GetControllerTypes()\r\n   at Microsoft.AspNetCore.Mvc.ApplicationModels.ControllerActionDescriptorProvider.GetDescriptors()\r\n   at Microsoft.AspNetCore.Mvc.ApplicationModels.ControllerActionDescriptorProvider.OnProvidersExecuting(ActionDescriptorProviderContext context)\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.DefaultActionDescriptorCollectionProvider.UpdateCollection()\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.DefaultActionDescriptorCollectionProvider.Initialize()\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.DefaultActionDescriptorCollectionProvider.GetChangeToken()\r\n   at Microsoft.AspNetCore.Mvc.Routing.ActionEndpointDataSourceBase.<>c__DisplayClass11_0.<Subscribe>b__0()\r\n   at Microsoft.Extensions.Primitives.ChangeToken.ChangeTokenRegistration`1..ctor(Func`1 changeTokenProducer, Action`1 changeTokenConsumer, TState state)\r\n   at Microsoft.Extensions.Primitives.ChangeToken.OnChange(Func`1 changeTokenProducer, Action changeTokenConsumer)\r\n   at Microsoft.AspNetCore.Mvc.Routing.ActionEndpointDataSourceBase.Subscribe()\r\n   at Microsoft.AspNetCore.Mvc.Routing.ControllerActionEndpointDataSource..ctor(IActionDescriptorCollectionProvider actions, ActionEndpointFactory endpointFactory)\r\n   at System.RuntimeMethodHandle.InvokeMethod(Object target, Object[] arguments, Signature sig, Boolean constructor, Boolean wrapExceptions)\r\n   at System.Reflection.RuntimeConstructorInfo.Invoke(BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitCache(ServiceCallSite callSite, RuntimeResolverContext context, ServiceProviderEngineScope serviceProviderEngine, RuntimeResolverLock lockType)\r\n```\r\n\r\nI don't think this is what you want to RTM with right?","Url":"https://github.com/dotnet/sdk/issues/3213","RelatedDescription":"Open issue \"Restore doesn't warn when restoring older pre 3.0 aspnet dependencies on netcore 3.0 resulting in TypeLoadExceptions\" (#3213)"},{"Id":"440823220","IsPullRequest":true,"CreatedAt":"2019-05-07T22:57:45","Actor":"nugetlurker","Number":"3207","RawContent":null,"Title":"Insert NuGet Build 5.1.0-rtm.6003 into sdk","State":"closed","Body":"Insert NuGet Build 5.1.0-rtm.6003 into sdk release/2.1.7xx branch","Url":"https://github.com/dotnet/sdk/pull/3207","RelatedDescription":"Closed or merged PR \"Insert NuGet Build 5.1.0-rtm.6003 into sdk\" (#3207)"},{"Id":"440823183","IsPullRequest":true,"CreatedAt":"2019-05-07T22:57:32","Actor":"nugetlurker","Number":"3206","RawContent":null,"Title":"Insert NuGet Build 5.1.0-rtm.6003 into sdk","State":"closed","Body":"Insert NuGet Build 5.1.0-rtm.6003 into sdk release/2.2.3xx branch","Url":"https://github.com/dotnet/sdk/pull/3206","RelatedDescription":"Closed or merged PR \"Insert NuGet Build 5.1.0-rtm.6003 into sdk\" (#3206)"},{"Id":"440938051","IsPullRequest":true,"CreatedAt":"2019-05-07T21:41:47","Actor":"nguerrera","Number":"3208","RawContent":null,"Title":"Extend default AssetTargetFallback up to net48","State":"closed","Body":"Before:\r\n```\r\nAssetTargetFallback=net461\r\n```\r\n\r\nAfter:\r\n```\r\nAssetTargetFallback=net461;net462;net47;net471;net472;net48\r\n```\r\n\r\nThis ensures that existing projects do not get different assets, and that the \"oldest\" available assets beyond net461 (deemed most compatible) are used.\r\n\r\nFix #2425 ","Url":"https://github.com/dotnet/sdk/pull/3208","RelatedDescription":"Closed or merged PR \"Extend default AssetTargetFallback up to net48\" (#3208)"},{"Id":"440666847","IsPullRequest":true,"CreatedAt":"2019-05-07T12:05:50","Actor":"dotnet-maestro[bot]","Number":"3205","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190505.2\r\n- **Date Produced**: 5/5/2019 2:25 PM\r\n- **Commit**: 6a34948f7bdbc3ceb2fb16441b49f7748a462646\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19255.2\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19255.2\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3205","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#3205)"},{"Id":"440436970","IsPullRequest":true,"CreatedAt":"2019-05-05T13:39:55","Actor":"dotnet-maestro[bot]","Number":"3203","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190504.1\r\n- **Date Produced**: 5/4/2019 12:58 PM\r\n- **Commit**: 1b8589bbf53b9a5e819460798eff59830f39a3be\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19254.1\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19254.1\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3203","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#3203)"},{"Id":"440316133","IsPullRequest":true,"CreatedAt":"2019-05-04T13:50:03","Actor":"dotnet-maestro[bot]","Number":"3202","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190503.8\r\n- **Date Produced**: 5/4/2019 2:00 AM\r\n- **Commit**: 4cacf7aa7b2cd8bdd042e721e6ad73d809dd5678\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19253.8\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19253.8\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3202","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#3202)"},{"Id":"440251525","IsPullRequest":false,"CreatedAt":"2019-05-03T22:57:23","Actor":"tmat","Number":"3201","RawContent":null,"Title":"GenerateBuildDependencyFile reads incorrect AssemblyVersion","State":"open","Body":"[`GenerateBuildDependencyFile`](https://github.com/dotnet/sdk/blob/7209eb0e66bfba58714af68ddef81115552a4a0c/src/Tasks/Microsoft.NET.Build.Tasks/targets/Microsoft.NET.Sdk.targets#L151) target has parameter: `AssemblyVersion=\"$(Version)\"`, which is suspicious because `Version` is not necessarily the same as an `$(AssemblyVersion)`. The target should read `AssemblyVersion` property and add `GetAssemblyVersion` target to its DependsOnTargets.\r\n\r\n","Url":"https://github.com/dotnet/sdk/issues/3201","RelatedDescription":"Open issue \"GenerateBuildDependencyFile reads incorrect AssemblyVersion\" (#3201)"},{"Id":"440210201","IsPullRequest":true,"CreatedAt":"2019-05-03T22:17:04","Actor":"johnbeisner","Number":"3200","RawContent":null,"Title":"Use https://github.com/dotnet/sdk as the repository.","State":"closed","Body":"Moving the perf test to helix created a new branch for reporting because the repo is not in GitHub. If we put the GitHub repo on the command line to 'build.py' it should connect to the existing treadline.\r\n\r\n\r\n@jorive \r\n","Url":"https://github.com/dotnet/sdk/pull/3200","RelatedDescription":"Closed or merged PR \"Use https://github.com/dotnet/sdk as the repository.\" (#3200)"}],"ResultType":"GitHubIssue"},"Announcements-Issues":{"Issues":[{"Id":"435015242","IsPullRequest":false,"CreatedAt":"2019-04-19T01:16:10","Actor":"MichaelSimons","Number":"110","RawContent":null,"Title":"New images for .NET Framework 4.8","State":"open","Body":"# New images for .NET Framework 4.8\r\n\r\nNew images have been released with support for [.NET Framework 4.8 runtime and SDK](https://devblogs.microsoft.com/dotnet/announcing-the-net-framework-4-8/).\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [Microsoft/dotnet-framework-docker#271](https://github.com/Microsoft/dotnet-framework-docker/issues/271)\r\n\r\n## Details\r\n* Pull request: #270\r\n\r\nYou can access these new images with the following tags:\r\n* `mcr.microsoft.com/dotnet/framework/runtime:4.8`\r\n* `mcr.microsoft.com/dotnet/framework/sdk:4.8`\r\n\r\nIn addition, the `latest` tag has been updated to refer to these new 4.8 images.\r\n\r\nCheck out the readme files for more information on the latest tags:\r\n* [Runtime](https://github.com/Microsoft/dotnet-framework-docker/blob/master/README.runtime.md)\r\n* [SDK](https://github.com/Microsoft/dotnet-framework-docker/blob/master/README.sdk.md)\r\n\r\nThe [3.5 SDK](https://github.com/Microsoft/dotnet-framework-docker/tree/master/3.5/sdk) images are intended to always contain the latest .NET Framework SDK and have also been updated to use the 4.8 SDK.","Url":"https://github.com/dotnet/announcements/issues/110","RelatedDescription":"Open issue \"New images for .NET Framework 4.8\" (#110)"},{"Id":"433297298","IsPullRequest":false,"CreatedAt":"2019-04-15T13:57:07","Actor":"MichaelSimons","Number":"109","RawContent":null,"Title":".NET Framework SDK container images now contain the Visual Studio 2019 toolset","State":"open","Body":"# .NET Framework SDK container images now contain the Visual Studio 2019 toolset\r\n.NET Framework SDK container images now include Visual Studio 2019 tools. For most scenarios, this change will not be observable, however, there may be some breaks that will be documented in this issue. We did not add additional tools to the SDK, but updated existing tools to match the same tools in Visual Studio 2019. Previously, the tools in SDK matched the same tools in Visual Studio 2017.\r\n\r\nWe will only produce .NET Framework SDK images that include Visual Studio 2019 tools. We will not produce another set of .NET Framework SDK images that includes Visual Studio 2017 tools. There is a strong goal that the tools remain compatible over releases.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [Microsoft/dotnet-framework-docker#269](https://github.com/Microsoft/dotnet-framework-docker/issues/269)\r\n\r\n## Details\r\nVisual Studio 2019 was released on April 2, 2019. We updated the .NET Framework SDK container images, on the same day, to include a new version of the .NET Framework SDK that contains tools that match the same tools in Visual Studio 2019.\r\n\r\nThese tools include:\r\n* MSBuild\r\n* NuGet\r\n* C# compiler\r\n* F# compiler\r\n* VB compiler\r\n* VS Test\r\n\r\nIf you encounter a breaking change or other issues and need to quickly unblock yourself, you can reference the previous version of the image by using its full version tag (e.g. mcr.microsoft.com/dotnet/framework/sdk:4.7.2-20190312-windowsservercore-ltsc2019).\r\n\r\nRelated pull request: [#252](https://github.com/Microsoft/dotnet-framework-docker/pull/252)","Url":"https://github.com/dotnet/announcements/issues/109","RelatedDescription":"Open issue \".NET Framework SDK container images now contain the Visual Studio 2019 toolset\" (#109)"},{"Id":"432735158","IsPullRequest":false,"CreatedAt":"2019-04-12T20:35:55","Actor":"KathleenDollard","Number":"108","RawContent":null,"Title":".NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017","State":"open","Body":"# .NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017\r\n\r\n.NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017. For example, 2.2.203 and 2.1.603 cause failures in Visual Studio 2017. To work on projects in Visual Studio 2017, use .NET Core SDK 2.2.1nn and 2.1.5nn, such as 2.2.106 and 2.1.506. You can install any combination of these SDKs side by side.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n[dotnet/sdk #3124](https://github.com/dotnet/sdk/issues/3124)\r\n\r\n## Details\r\n\r\nYou can find the SDKs on you machine using the following at a command prompt:\r\n\r\n```bash\r\ndotnet --list-sdks\r\n```\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.2\r\n\r\nIf you receive the error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.2. Either target .NET Core 2.1 or lower, or use a version of the .NET SDK that supports .NET Core 2.2.`\r\n\r\nIf you downloaded the .NET Core SDK 2.2 between April 2 and April 12, 2019, the main [.NET downloads page](https://dotnet.microsoft.com/download/) included only 2.2.2nn. Starting April 12th, a new button marked \"Compatible with Visual Studio 2017\" is provided to target 2.2.1nn. If you downloaded 2.2 prior to this date, and you use Visual Studio 2017, install the compatible version.\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.1\r\n\r\nIf you receive this error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.1. Either target .NET Core 2.0 or lower, or use a version of the .NET SDK that supports .NET Core 2.1.`\r\n\r\nThis problem most often occurs because you manually uninstall the 2.1.5nn version. Simply reinstall it from the [.NET Core 2.1 downloads page](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\n## More information\r\n\r\nHere is the draft of an article we are preparing for .NET Core documentation:\r\n\r\n---\r\n\r\n## Solving Problems with .NET Core SDK Selection in Visual Studio\r\n\r\nYou may have .NET Core SDKs on your machine and still have problems with Visual Studio finding an appropriate one. This article explains why this happens and how you can fix your installation.\r\n\r\nWhen Visual Studio can't find an appropriate version of the .NET Core SDK, you'll receive an error message. This may appear in the Error pane as NETSDK1045:\r\n\r\n\"The current .NET SDK does not support targeting .NET Core 2...\"\r\n\r\nYou can check what .NET Core SDKs you have on your machine with the following command:\r\n\r\n```bash\r\ndotnet --list-sdks\r\n```\r\n\r\nUnless you have a global.json file, when you use `dotnet` from the command line, the latest .NET Core SDK is used.\r\n\r\n> [TIP!] \r\n> Open a command prompt and try to build with `dotnet build`. If the command line build works, but Visual Studio doesn't suggestions in this article may help.\r\n\r\nThe last two digits of the .NET Core SDK version numbers are in the format are a patch number, which is represented by `nn` in this article because we will continue to service them to include the latest runtimes. To find out more, vist the [Overview of how .NET Core is versioned page](https://docs.microsoft.com/en-us/dotnet/core/versions/).\r\n\r\n## Fixes for Common Problems\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.2\r\n\r\nIf you receive the error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.2… Either target .NET Core 2.1 or lower, or use a version of the .NET SDK that supports .NET Core 2.2.`\r\n\r\nUse `dotnet --list-sdks` to ensure you have .NET Core SDK 2.2.1nn. As an example, 2.2.106 would be a valid entry.\r\n\r\nIf you downloaded the .NET Core SDK 2.2 after April 2, 2019, version 2.2.2nn (such as 2.2.203) is listed first and is the highest version available. However, Visual Studio 2017 requires 2.2.1nn (such as 2.2.106). .NET Core SDK 2.2.2nn works with Visual Studio 2019. Visual Studio 2017 and Visual Studio 2019 can be installed side by side, but this requires both .NET Core SDK 2.2.1nn and .NET Core SDK 2.2.2nn to develop .NET Core 2.2 applications.\r\n\r\nTo download .NET Core SDK 2.2.2nn, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.1\r\n\r\nIf you receive this error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.1. Either target .NET Core 2.0 or lower, or use a version of the .NET SDK that supports .NET Core 2.1.`\r\n\r\nUse `dotnet --list-sdks` to ensure you have .NET Core SDK 2.1.5nn. As an example, 2.1.505 would be a valid entry. \r\n\r\nThis problem occurs of you manually uninstall the 2.1.5nn version.\r\n\r\nThe Visual Studio 2019 installation will not remove this file and Visual Studio 2017 will continue to work side by side.\r\n\r\nTo reinstall .NET Core SDK 2.1.5nn, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\n### Visual Studio 2019 can't target .NET Core 3.0 Preview\r\n\r\nIf you receive this error message in Visual Studio 2019:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.1. Either target .NET Core 2.0 or lower, or use a version of the .NET SDK that supports .NET Core 2.1.`\r\n\r\nUse `dotnet --list-sdks` to ensure you have .NET Core SDK 3.0.100-preview... As an example, SDK 3.0.100-preview3-010431 would be a valid entry.\r\n\r\nTo install .NET Core SDK 3.0.1nn preview, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core/3.0).\r\n\r\nIn Visual Studio, go to `Tools\\Options\\Projects and Solutions\\.NET Core` and check the box `Use Previews of the .NET Core SDK`.\r\n\r\n> [NOTE!]\r\n> This option will be moving to `Tools\\Options\\Environment` and renamed `Preview Features` in Visual Studio 2019 version 16.1 Preview 2.\r\n\r\nIf you are targeting .NET Core 3.0 preview, the [C# language version will be C# 8.0 Preview by default](https://docs.microsoft.com/en-us/visualstudio/releases/2019/release-notes#csharp-defaults) allowing you to use new C# features.\r\n\r\n## Understand the relationship between .NET Core SDKs and Visual Studio build tools\r\n\r\nVisual Studio has its own copies of tools like MSBuild, NuGet and the compilers. If you install the .NET Core workload, it also installs the .NET Core SDK which has versions of these tools and provides tasks and targets. These two versions are built from the same repositories, but target .NET Framework and .NET Core respectively. \r\n\r\nWhen you build a .NET Core project in Visual Studio, it uses Visual Studio's copy of MSBuild, but the tasks and targets are supplied from the selected version of the .NET Core SDK. \r\n\r\nWhen you upgrade the .NET Core SDK, you get new tasks and targets. These new tasks and targets may contain features that are not supported by older versions of MSBuild. Like all of the .NET Core SDK, MSBuild is backwards compatible. It is not forwards compatible.\r\n\r\nThis generally works well, but requires a guarantee that the tasks and targets work with the MSBuild version. To ensure this, each .NET Core SDK indicates an MSBuild version range that is used by Visual Studio to determine compatibility. Versions of the .NET Core SDK that have a higher MSBuild identifier than expected are ignored by Visual Studio. In the normal case, this simply means you use the tasks and targets that were installed with your version of Visual Studio.\r\n\r\nBecause of this, you may have many versions of the .NET Core SDK on your machine and Visual Studio still fail to find one it considers appropriate. This is compounded by a poor error message, which we cannot fully correct because it is from the old version of the .NET Core SDK on your machine. Confusion is also compounded by a complex non-linear release matrix that makes it difficult to predict the right .NET Core SDK to select. We are working to improve all this. \r\n\r\n## The Visual Studio / .NET Core SDK support matrix\r\n\r\nThe last two digits of the .NET Core SDK version number are a patch number, which are represented by a `nn` in this table. You can learn more about .NET Core SDK and .NET Core Runtime versioning at the [Overview of how .NET Core is versioned page](https://docs.microsoft.com/en-us/dotnet/core/versions/).\r\n\r\nThe following table shows which Visual Studio versions and .NET Core SDKs are compatible and how they are acquired if you are working with Visual Studio. \r\n\r\n| .NET Core SDK | .NET Core Runtime | Compatible Visual Studio | MSBuild | Notes                                     |\r\n|---------------|-------------------|--------------------------|---------|-------------------------------------------|\r\n| 2.1.5nn       | 2.1               | 2017                     | 15      | Installed as part of VS 2017 version 15.9 |\r\n| 2.1.6nn       | 2.1               | 2019                     | 16      | Installed as part of VS 2019              |\r\n| 2.2.1nn       | 2.2               | 2017                     | 15      | Installed manually                        |\r\n| 2.2.2nn       | 2.2               | 2019                     | 16      | Installed as part of VS 2019              |\r\n| 3.0.1nn       | 3.0 (Preview)     | 2019                     | 16      | Installed manually                        |\r\n\r\nVisual Studio 2017 cannot work with .NET Core SDK 2.1.6nn or 2.2.2nn.\r\n\r\nTo find out more about removing older versions of the .NET Core Runtime and .NET Core SDK, visit the [How to remove the .NET Core Runtime and SDK page](https://docs.microsoft.com/en-us/dotnet/core/versions/remove-runtime-sdk-versions?tabs=macos).\r\n\r\nTo download the .NET Core SDK, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core).","Url":"https://github.com/dotnet/announcements/issues/108","RelatedDescription":"Open issue \".NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017\" (#108)"},{"Id":"432081093","IsPullRequest":false,"CreatedAt":"2019-04-11T15:16:43","Actor":"KathleenDollard","Number":"107","RawContent":null,"Title":"Limit DotNetCliToolReference Tools to .NET Core 2.2 and Below","State":"open","Body":"# Limit DotNetCliToolReference Tools to .NET Core 2.2 and Below\r\n\r\n.NET Core 3 takes the next step in the .NET Core tool strategy with local tools. As part of this process, starting in Preview 4 DotNetCliToolReference tools will be restricted to targeting .NET Core 2.2 and below. DotNetCliToolReference tools can be used in projects targeting .NET Core 3.0, but the tools themselves should target .NET Core 2.2 or below.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n[dotnet/sdk #3115](https://github.com/dotnet/sdk/issues/3115)\r\n\r\n## Details\r\n\r\nThe suggested approach going forward is to to use [.NET Core Local Tools](https://aka.ms/local-tools) when you want a tool that is specific to a project or repository. At the same time we are removing the need to access local tools by the verbose `dotnet tool run <toolname>` that was present in earlier previews. You can now access local tools via `dotnet <toolname>`.\r\n\r\nDotNetCliToolReference tools have a flaw in how their dependencies are restored which can create [difficult to diagnose bugs when running these tools](https://github.com/NuGet/Home/issues/5067). This issue would occur much more frequently if targeting .NET Core 3.0 was allowed. Restricting tools to target only .NET Core 2.2 and below means existing scenarios to continue to work (as well as they previously did), regardless of the framework version targeted by the project or the current .NET Core SDK. \r\n\r\nThe new .NET Core tool strategy avoids this flaw in restore strategy and offers other benefits, like the ability to author one type of tool and install it in different ways depending on project and user needs.\r\n\r\nWe look forward to your feedback on .NET Core Local Tools, and on challenges you face moving away from DotNetCliToolReference tools. \r\n\r\n[dotnet/sdk #3057](https://github.com/dotnet/sdk/pull/3057)","Url":"https://github.com/dotnet/announcements/issues/107","RelatedDescription":"Open issue \"Limit DotNetCliToolReference Tools to .NET Core 2.2 and Below\" (#107)"},{"Id":"431012407","IsPullRequest":false,"CreatedAt":"2019-04-09T14:51:18","Actor":"MichaelSimons","Number":"106","RawContent":null,"Title":".NET Core SDK container images now contain the Visual Studio 2019 toolset","State":"open","Body":"# .NET Core SDK container images now contain the Visual Studio 2019 toolset\r\n\r\n.NET Core SDK container images now include Visual Studio 2019 tools. For most scenarios, this change will not be observable, however, there may be some breaks that will be documented in this issue. We did not add *additional* tools to the SDK, but updated existing tools to match the same tools in Visual Studio 2019. Previously, the tools in SDK matched the same tools in Visual Studio 2017.\r\n\r\nWe will only produce .NET Core SDK images that include Visual Studio 2019 tools. We will not produce another set of .NET Core SDK images that includes Visual Studio 2017 tools. There is a strong goal that the tools remain compatible over releases.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #1042](https://github.com/dotnet/dotnet-docker/issues/1042)\r\n\r\n## Details\r\n\r\n[Visual Studio 2019](https://devblogs.microsoft.com/visualstudio/visual-studio-2019-code-faster-work-smarter-create-the-future/) was released on April 2, 2019. We updated the .NET Core SDK container images, on the same day, to include a new version of the .NET Core SDK that contains tools that match the same tools in Visual Studio 2019.\r\n\r\nThese tools include:\r\n\r\n* MSBuild\r\n* NuGet\r\n* C# compiler\r\n* F# compiler\r\n* VB compiler\r\n* VS Test\r\n\r\nIf you encounter a breaking change or other issues and need to quickly unblock yourself, you can reference the previous version of the image by using its full version tag:\r\n\r\n* 2.1: `mcr.microsoft.com/dotnet/core/sdk:2.1.505`\r\n* 2.2: `mcr.microsoft.com/dotnet/core/sdk:2.2.105`\r\n\r\nDetails:\r\n\r\n* [dotnet/dotnet-docker #1029](https://github.com/dotnet/dotnet-docker/pull/1029)\r\n* [2.1 SDK release notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.602-SDK/2.1.602-SDK.md)\r\n* [2.2 SDK release notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.202-SDK/2.2.202-SDK.md)\r\n\r\n## Known Breaking Changes for SDK images (VS 2017 to VS 2019 upgrade)\r\n\r\nThe following issues and breaks have been discovered.\r\n \r\n### Test Log File Name Change\r\n\r\nA change was introduced to the `dotnet test` command when a user-defined log file name is specified.  In the previous version the resulting log file would be named exactly as specified.  In the current version, the log file is named with a timestamp suffix automatically added to the user-defined name.  \r\n\r\nDetails:\r\n* [Microsoft/vstest #1603](https://github.com/Microsoft/vstest/issues/1603) \r\n* [Microsoft/vstest#1876](https://github.com/Microsoft/vstest/issues/1876)","Url":"https://github.com/dotnet/announcements/issues/106","RelatedDescription":"Open issue \".NET Core SDK container images now contain the Visual Studio 2019 toolset\" (#106)"},{"Id":"431003701","IsPullRequest":false,"CreatedAt":"2019-04-09T14:35:39","Actor":"MichaelSimons","Number":"105","RawContent":null,"Title":"Windows Server, version 1709 no longer Supported by .NET Framework","State":"open","Body":"# Windows Server, version 1709 no longer Supported by .NET Framework\r\n\r\nWindows Server, version 1709 is no longer supported. As a result, this version of Windows is no longer supported by the .NET Team and we will no longer produce .NET Framework container images for those Windows versions.\r\n\r\nSupport statements:\r\n\r\n* [Currently supported .NET Framework Docker images](https://hub.docker.com/_/microsoft-dotnet-framework)\r\n* [.NET Framework Support Policy](https://dotnet.microsoft.com/platform/support/policy/dotnet-framework)\r\n* [Products Reaching End of Support for 2019](https://support.microsoft.com/en-us/help/4316957/products-reaching-end-of-support-for-2019)\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-framework-docker #259](https://github.com/Microsoft/dotnet-framework-docker/issues/259)\r\n\r\n## Details\r\n\r\nDocker tags that contain `windowsservercore-1709` are no longer be produced. We will not delete existing images or those tags, however, they contain unsupported builds of Windows Server and .NET Framework.\r\n\r\n## Pulling manifest tags\r\n\r\nThese changes also affect manifest tags (AKA “multi-arch tags“), such as `4.7.1`, and  `4.7.2`. These are tags that are supported on multiple operating systems and versions, and do  not contain the operating system in them. As a result of no longer producing new images for Windows Server, version 1709, manifest tags no longer include entries for Windows 10, version 1709, and Windows Server,version 1709. That means that .NET Core manifest tags are no longer usable on those Windows versions.\r\n\r\nIf you pull a manifest tag on one of the Windows versions described, you may get one of the following error messages:\r\n\r\n* `a Windows version 10.0.17134-based image is incompatible with a 10.0.16299 host`\r\n* `no matching manifest for windows/amd64 in the manifest list entries`\r\n* `no matching manifest for unknown in the manifest list entries`\r\n\r\nIf you need to still use Windows Server, version 1709 images (even though they are no longer supported), you will need to use tags that include the Windows Server version (these are non-manifest tags), for example `mcr.microsoft.com/dotnet/framework/runtime:4.7.2-windowsservercore-1709` or `mcr.microsoft.com/dotnet/framework/sdk:4.7.2-windowsservercore-1709`.","Url":"https://github.com/dotnet/announcements/issues/105","RelatedDescription":"Open issue \"Windows Server, version 1709 no longer Supported by .NET Framework\" (#105)"},{"Id":"430998341","IsPullRequest":false,"CreatedAt":"2019-04-09T14:25:57","Actor":"MichaelSimons","Number":"104","RawContent":null,"Title":"Nano Server 2016 and 1709 no longer Supported by .NET Core","State":"open","Body":"# Nano Server 2016 and 1709 no longer Supported by .NET Core\r\n\r\nNano Server 2016 and Nano Server, version 1709 are no longer supported. As a result, these versions of Windows are no longer supported by the .NET Team and we will no longer produce .NET Core container images for those Windows versions.\r\n\r\nSupport statements:\r\n\r\n* [Currently supported .NET Core Docker images](https://hub.docker.com/_/microsoft-dotnet-core)\r\n* [.NET Core Support Policy](https://dotnet.microsoft.com/platform/support/policy/dotnet-core)\r\n* [Products Reaching End of Support for 2018](https://support.microsoft.com/en-us/help/4043450/products-reaching-end-of-support-for-2018)\r\n* [Products Reaching End of Support for 2019](https://support.microsoft.com/en-us/help/4316957/products-reaching-end-of-support-for-2019)\r\n\r\nWe previously announced Nano Server 2016 going out of support in [.NET Core Container Images now Published to Microsoft Container Registry](https://devblogs.microsoft.com/dotnet/net-core-container-images-now-published-to-microsoft-container-registry/). That post is still accurate.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #1041](https://github.com/dotnet/dotnet-docker/issues/1041)\r\n\r\n## Details\r\n\r\nDocker tags that contain `nanoserver-sac2016` and `nanoserver-1709` are no longer be produced. We will not delete existing images or those tags, however, they contain unsupported builds of Nano Server and .NET Core.\r\n\r\n## Pulling manifest tags\r\n\r\nThese changes also affect manifest tags (AKA “multi-arch tags“), such as `2.1`, `2.1-sdk`, `2.2.1-runtime`. These are tags that are supported on multiple operating systems, and do not contain the operating system in them. As a result of no longer producing new images for Nano Server 2016 and Nano Server, version 1709, manifest tags no longer include entries for Nano Server 2016, Windows Server 2016, Windows 10, version 1607, Windows 10, version 1709, and Windows Server, version 1709. That means that .NET Core manifest tags are no longer usable on those Windows versions.\r\n\r\nIf you pull a manifest tag on one of the Windows versions described, you may get one of the following error messages:\r\n\r\n* `a Windows version 10.0.16299-based image is incompatible with a 10.0.14393 host`\r\n* `no matching manifest for windows/amd64 in the manifest list entries`\r\n* `no matching manifest for unknown in the manifest list entries`\r\n\r\nIf you need to still use Nano Server 2016 or Nano Server, version 1709 images (even though they are no longer supported), you will need to use tags that include the Nano Server version (these are non-manifest tags), for example `mcr.microsoft.com/dotnet/core/runtime:2.1-nanoserver-sac2016` or `mcr.microsoft.com/dotnet/core/runtime:2.1-nanoserver-1709`.\r\n\r\n### Nano Server Support\r\n\r\n.NET Core is supported on Nano Server, version 1803 and later. \r\n\r\n.NET Core 2.x and 3.0 images are available for all supported versions of Nano Server, version 1803 and later. This means that 2.x and 3.0 manifest tags can be used on Windows 10, version 1803+, and Windows Server, version 1803+. You can also use non-manifest tags for those versions, too, such as `2.2-nanoserver-1809`.\r\n\r\n.NET Core 1.x images are available for Nano Server, version 1809 and later. This means that 1.x manifest tags can be used on Windows 10, version 1809+, Windows Server, version 1809+ and Windows Server 2019. You can also use non-manifest tags for those versions, too, such as `1.1-nanoserver-1809` tag.","Url":"https://github.com/dotnet/announcements/issues/104","RelatedDescription":"Open issue \"Nano Server 2016 and 1709 no longer Supported by .NET Core\" (#104)"},{"Id":"420117627","IsPullRequest":false,"CreatedAt":"2019-03-12T17:35:16","Actor":"vivmishra","Number":"103","RawContent":null,"Title":"March 2019 .NET Updates","State":"open","Body":"# March 2019 .NET Updates\r\n\r\nThe following .NET updates were released in March 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n* [.NET Framework March 2019 Update - March 19, 2019](https://devblogs.microsoft.com/dotnet/net-framework-march-2019-update/)\r\n* [.NET Framework April 2, 2019 Cumulative Update for Windows 10 version 1809 and Windows Server 2019 - April 2, 2019](https://devblogs.microsoft.com/dotnet/net-framework-april-2-2019-cumulative-update-for-windows-10-version-1809-and-windows-server-2019/)\r\n\r\n\r\n## .NET Core\r\n\r\n* .NET Core 1.0.15 and .NET Core SDK 1.1.13 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.0/1.0.15/1.0.15.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/1.0) )\r\n\r\n* .NET Core 1.1.12 and .NET Core SDK 1.1.13 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.1/1.1.12/1.1.12.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/1.1) )\r\n\r\n* .NET Core 2.1.9 and .NET Core SDK 2.1.505 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.9/2.1.9.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.1) )\r\n\r\n* .NET Core 2.2.3 and .NET Core SDK 2.2.105 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.3/2.2.3.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.2) )\r\n\r\nA discussion issue is available at [core/2432](https://github.com/dotnet/core/issues/2432)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/103","RelatedDescription":"Open issue \"March 2019 .NET Updates\" (#103)"},{"Id":"415363751","IsPullRequest":false,"CreatedAt":"2019-02-27T22:49:51","Actor":"leecow","Number":"102","RawContent":null,"Title":"SDK Installers will remove previous patch versions","State":"open","Body":"The SDK Installers for Windows will upgrade patch versions in place within the same feature band. This will reduce the number of SDKs that are installed on programmer machines.\r\n\r\nFeature bands of the SDK are defined like 3.0.1nn. [Find out more about SDK version numbers](https://docs.microsoft.com/dotnet/core/versions/#versioning-details).\r\n\r\nThis means when .NET Core SDK 3.0.101 becomes available and is installed, .NET Core SDK 3.0.100 will be removed from the machine if it exists. When .NET Core SDK 3.0.200 becomes available and is installed on the same machine, .NET Core SDK versions like 3.0.101 will not be removed but stay side by side with 3.0.200.\r\n\r\nThis approach supports use of `global.json` which will roll forward across patch versions, but not feature bands of the SDK. Thus, upgrading via the SDK installer will not result in errors due to a missing SDK. Feature bands also align with side by side Visual Studio installations for those users that install SDKs for Visual Studio use. For example, Visual Studio 15.9 uses .NET Core SDK 2.2.500 but does not support .NET Core SDK 2.2.600.\r\n\r\nFind out how to [remove other .NET Core SDK versions here.](https://docs.microsoft.com/dotnet/core/versions/remove-runtime-sdk-versions).","Url":"https://github.com/dotnet/announcements/issues/102","RelatedDescription":"Open issue \"SDK Installers will remove previous patch versions\" (#102)"},{"Id":"410971363","IsPullRequest":false,"CreatedAt":"2019-02-15T22:24:40","Actor":"richlander","Number":"101","RawContent":null,"Title":"Publishing .NET Core images to Microsoft Container Registry (MCR)","State":"open","Body":"# Publishing .NET Core images to Microsoft Container Registry (MCR)\r\n\r\nMicrosoft teams are now publishing container images to the [Microsoft Container Registry](https://azure.microsoft.com/en-us/blog/microsoft-syndicates-container-catalog/). There are two primary reasons for this change:\r\n\r\n* Syndicate Microsoft-provided container images to multiple registries, like Docker Hub and Red Hat.\r\n* Use Microsoft Azure as a global CDN for delivering Microsoft-provided container images.\r\n\r\nYou will use and see MCR as a storage back-end for Microsoft images. The primary way you learn about Microsoft container images and tags will be through a registry, which for most users will continue to be Docker Hub. Most of the experience you've had browsing for .NET Core container images will continue unchanged with this new model. The Docker Hub URLs you've used for Microsoft repos will continue to work, and forward to updated locations on Docker Hub. Existing Docker Hub will images will be maintained as-is.\r\n\r\nSee [.NET Core Container Images now Published to Microsoft Container Registry](https://devblogs.microsoft.com/dotnet/net-core-container-images-now-published-to-microsoft-container-registry/) for the most updated information on our use of MCR.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #935](https://github.com/dotnet/dotnet-docker/issues/935)\r\n\r\n## Starting with .NET Core nightly repo\r\n\r\nOn the .NET team, we started our [transition to MCR](https://github.com/dotnet/dotnet-docker/issues/745) with the .NET Core \"nightly\" repo. [dotnet-nightly](dockerhub.com/r/microsoft/dotnet-nightly) is now hosted on MCR and syndicated to Docker Hub. We started with the nightly repo in order to discover and fix any challenges we found with this new model before we move our higher-traffic primary container repository.\r\n\r\nWe will start publishing [dotnet](dockerhub.com/r/microsoft/dotnet) to MCR a bit later, in either February or March. This issue will be updated when that happens.\r\n\r\n## Repo Split\r\n\r\nThe [.NET Core repo](https://hub.docker.com/r/microsoft/dotnet) currently includes 4 major categories of tags: \r\n\r\n* `sdk`\r\n* `aspnetcore-runtime`\r\n* `runtime` \r\n* `runtime-deps`\r\n\r\nProviding all of the tags in one place has helped with discoverability but made for a repo with an enormous README that can be challenging to navigate and consume. It is large enough that we exceeded Docker Hub README limits and had to artificially make it smaller.\r\n\r\nGoing forward, we will provide a repo for each of the tag categories listed above. We'll also provide a \"product repo\" that will hierarchicaly group all of our repos together. This will satisfy discoverability needs so that it will be easy to find the tags you want.\r\n\r\nYou can already see this experience with [microsoft-dotnet-core-nightly](https://hub.docker.com/_/microsoft-dotnet-core-nightly). There are now multiple repos for our nightly builds:\r\n\r\n* [.NET Core Nightly product repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly)\r\n* [.NET Core SDK Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-sdk/)\r\n* [.NET Core ASP.NET Core Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-aspnet/)\r\n* [.NET Core Runtime Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-runtime/)\r\n* [.NET Core Runtime-deps Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-runtime-deps/)\r\n\r\nThe same split will exist for the non-nightly stable repo (currently hosted at  [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet)) when we start publishing it to MCR and syndicating it back to DockerHub.\r\n\r\n## Changes to registry URL\r\n\r\nThe biggest change is that your Dockerfiles need to be updated to point to the MCR registry in order get access to new .NET Core container tags. The same change is required for scripts or human operations that pull images via `docker pull`.\r\n\r\nThe following example shows the registry path, repo and tag for the .NET Core 2.2 \"Nightly\" SDK on MCR:\r\n\r\n```console\r\nmcr.microsoft.com/dotnet/core-nightly/sdk:2.2\r\n```\r\n\r\nAs comparison, the following repo and tag have been used to date for the .NET Core 2.2 \"Nightly\" SDK on Docker Hub:\r\n\r\n```console\r\nmicrosoft/dotnet-nightly:2.2-sdk\r\n```\r\n\r\nThe new repo URL is provided at each of the news repos. For example, the new .NET Core SDK \"nightly\" repo provides a box on the right where you can copy and paste the correct MCR-based repo syntax that you can use for `docker pull` or in `FROM` statements in your Dockerfiles.\r\n\r\n![image](https://user-images.githubusercontent.com/2608468/52811702-95c5eb80-304a-11e9-8de8-e6ea1f4b4d75.png)\r\n\r\n## Servicing existing Docker Hub tags\r\n\r\nWe will continue to service existing non-version-specific or floating tags on Docker Hub while the associated .NET Core version is supported. For example the `microsoft/dotnet:2.1-sdk` tag is a floating tag that will continue to be serviced for the lifetime of .NET Core 2.1. You can continue using floating tags without issue.\r\n\r\nIf you use non-floating tags, like `microsoft/dotnet:2.1.504-sdk-alpine`, then you will need to update your Dockerfile to use a new non-floating tag. No new non-floating tags will be published to `microsoft/dotnet` and `microsoft/dotnet-nightly` after we fully transition to MCR.\r\n\r\n.NET Core 3.0 Preview 3 and later will only be made available on MCR.\r\n\r\n## Microsoft is a Verified Publisher\r\n\r\nUntil now, Microsoft-provided container images were considered \"community images\". As part of this change, we are re-classifying Microsoft as a \"verified publisher\" on Docker Hub. This designation should make it clearer that .NET and other Microsoft-provided images are coming from a verified source. There clearly was that expectation previously, but Docker is now making that clearer in the Docker Hub pages they host for Microsoft.\r\n\r\nWe will provide official vulnerability scanning Microsoft-provided images as a second phase of this transition.","Url":"https://github.com/dotnet/announcements/issues/101","RelatedDescription":"Open issue \"Publishing .NET Core images to Microsoft Container Registry (MCR)\" (#101)"},{"Id":"410784442","IsPullRequest":false,"CreatedAt":"2019-02-15T14:06:29","Actor":"TaraOverfield","Number":"100","RawContent":null,"Title":"RESOLVED: Advisory on February 2019 Security update for Windows 10 update 1809","State":"open","Body":"<strong><em>Final Update 2/19/19 @1:30 PM (PST)</em></strong><em>: This </em><em>advisory is now resolved with no action needed from Microsoft Customers. The issue was not applicable to any valid or supported configuration. There is no consequence for .NET 4.8 Preview customers. </em>\r\n\r\n<em>We strive to share timely information to protect our customer’s productivity, in this case, our finding was thankfully of no consequence for customers on supported configurations.</em>\r\n\r\n<del><em><strong>Update 2/15/19 @3:35 PM (PST)</strong></em><em>: As we continue our investigation, we are finding the issue to be restricted to a limited and isolated set of test-only systems that are using non-official versions of the .NET 4.8 Preview. As of 2/15/19 around 12:00 pm (PST) we further tightened our delivery mechanisms to ensure that the February .NET security updates are only deployed to their expected target systems.</em></del>\r\n\r\n<del><span>The </span><a href=\"https://blogs.msdn.microsoft.com/dotnet/2019/02/13/net-framework-february-2019-security-and-quality-rollup/\" rel=\"nofollow\">February 2019 Security and Quality Rollup for Windows 10 update 1809</a><span> was released earlier this week. We have received multiple customer reports of issues when a customer has installed .NET Framework 4.8 Preview then installed the February security update, <a href=\"https://support.microsoft.com/kb/4483452\" rel=\"nofollow\">4483452</a>.</span> These reports are specific to only to the scenario when a customer has installed both .NET Framework 4.8 Preview and the February security update.</del>\r\n\r\n<del>We are actively working on investigating and addressing this issue. If you installed the February 2019 security update and have not seen any negative behavior, we recommend that you leave your system as-is but closely monitor it and ensure that you apply upcoming .NET Framework updates.</del>\r\n\r\n<del>We will continue to update this <a href=\"https://github.com/dotnet/announcements/issues/100\" rel=\"nofollow\">post</a> as we have new information.</del>\r\n<h2><del>Guidance</del></h2>\r\n<del>We are working on guidance and will update this post and as we have new information.</del>\r\n<h2><del>Workaround</del></h2>\r\n<del>There are no known workarounds at this time.</del>\r\n<h2><del>Symptoms</del></h2>\r\n<del>After installing .NET Framework 4.8 Preview then the February 2019 security update, <a href=\"https://support.microsoft.com/kb/4483452\" rel=\"nofollow\">4483452</a>, Visual Studios will crash with this error message:</del>\r\n<p class=\"xxxxxmsonormal\"><del><b><span style=\"font-size: 10.5pt;font-family: 'Segoe UI',sans-serif;color: black\">\"Exception has been thrown by the target of an invocation.\"</span></b></del></p>","Url":"https://github.com/dotnet/announcements/issues/100","RelatedDescription":"Open issue \"RESOLVED: Advisory on February 2019 Security update for Windows 10 update 1809\" (#100)"},{"Id":"410455095","IsPullRequest":false,"CreatedAt":"2019-02-14T19:28:25","Actor":"richlander","Number":"99","RawContent":null,"Title":"Supporting new Alpine versions (for containers)","State":"open","Body":"# Supporting new Alpine versions (for containers)\r\n\r\n[Alpine 3.9](https://twitter.com/alpinelinux/status/1090416212822110214) was recently announced. Congratulations, Alpine team! On the .NET team, we are committed to supporting new Alpine versions quickly, and also need to define a policy for older versions. This policy only applies for the container images that we publish.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #933](https://github.com/dotnet/dotnet-docker/issues/933)\r\n\r\n## Policy\r\n\r\nWe intend to establish the following policy for supporting Alpine with .NET Core container images:\r\n\r\n* Support new Alpine versions within 60 days of release (hopefully much less).\r\n* Support n-1 Alpine versions for 3 months after we support a new Alpine version.\r\n\r\nNote: The [.NET Core support policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md) may be broader. This policy is specific to the container images we produce.\r\n\r\n## Plans\r\n\r\nWe're in the process of [fixing issues required to support Alpine 3.9](https://github.com/dotnet/dotnet-docker/issues/921). We expect that these issues will be resolved in February and that we'll be able to provide support for Alpine 3.9 in March.\r\n\r\nWe will produce Alpine 3.9 images for .NET Core 2.1, 2.2 and 3.0. Assuming we publish 3.9 images in March, we'll stop producing and supporting Alpine 3.7 and 3.8 images after June (2019).\r\n\r\n## Using Alpine-based .NET Core images\r\n\r\nWe produce a variety of Alpine-based images. You can either depend on a specific Alpine version, like with `microsoft/dotnet:2.2-sdk-alpine3.8` or opt to use the latest Alpine image we have to offer, like with `microsoft/dotnet:2.2-sdk-alpine`. Either are good choices. It is just a question of whether you want to make a conscious decision to move to later Alpine releases.\r\n\r\n## Support for ARM32?\r\n\r\nWe produce Alpine images for x64 (and ARM64, shortly). The [Alpine 3.9 announcement](https://twitter.com/alpinelinux/status/1090416212822110214) made mention of support for ARM32v7. We would like to enable .NET Core [Alpine-based images on ARM32](https://github.com/gliderlabs/docker-alpine/issues/463#issuecomment-460530395). We are patiently waiting for that to happen. If that's important to you, you should comment on that thread.","Url":"https://github.com/dotnet/announcements/issues/99","RelatedDescription":"Open issue \"Supporting new Alpine versions (for containers)\" (#99)"},{"Id":"409840927","IsPullRequest":false,"CreatedAt":"2019-02-13T14:48:21","Actor":"TaraOverfield","Number":"98","RawContent":null,"Title":"February 2019 .NET Updates","State":"open","Body":"# February 2019 .NET Updates\r\nThe following .NET updates were released in February 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n* [.NET Framework February 2019 Security and Quality Rollup - February 12, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/02/13/net-framework-february-2019-security-and-quality-rollup/)\r\n* [.NET Framework February 2019 Preview of Quality Rollup - February 19, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/02/19/net-framework-february-2019-preview-of-quality-rollup/)\r\n\r\n## .NET Support Policies\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/98","RelatedDescription":"Open issue \"February 2019 .NET Updates\" (#98)"},{"Id":"409436643","IsPullRequest":false,"CreatedAt":"2019-02-12T18:21:22","Actor":"leecow","Number":"97","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0657: .NET Core Domain Spoofing Vulnerability","State":"open","Body":"## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 1.0, 1.1, 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a domain spoofing vulnerability in .NET Framework and .NET Core which causes the meaning of a URI to change when International Domain Name encoding is applied. An attacker who successfully exploited the vulnerability could redirect a URI.\r\n\r\nThe security update addresses the vulnerability by disallowing certain Unicode characters from the URI.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/35265\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nMicrosoft has not identified any mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core 1.0 or 1.1 based application that uses the [System.Private.Uri](https://www.nuget.org/packages/System.Private.Uri/) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.Private.Uri | 4.3.0 | 4.3.1\r\n\r\nAny .NET Core 2.1 or 2.2 based application that uses the [Microsoft.NETCore.App](https://www.nuget.org/packages/Microsoft.NETCore.App) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nMicrosoft.NETCore.App | 2.1.0, 2.1.1, 2.1.2, 2.1.3, 2.1.4, 2.1.5, 2.1.6, 2.1.7, 2.2.0, 2.2.1 | 2.1.8, 2.2.2\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n#### Applications that use Microsoft.NetCore.App\r\n\r\n`System.Private.Uri` is distributed as part of the .NET Core 2.1 runtime. To check the currently installed runtimes, open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed, you'll see output like the following;\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your host version is 2.1.x and the highest `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\nIf your host version is 2.2.x and the highest 2.1.x `Microsoft.NETCore.App` runtime version is less than 2.2.1, you're vulnerable to this issue.\r\n\r\nYou will not see SDK versions if you have only installed the runtime.\r\n\r\n#### Applications not using Microsoft.NetCore.App\r\n\r\nThe affected assembly is also available separately as a NuGet package. If you are not using Microsoft.NetCore.App, you may still be affected if you are referencing the packages listed above.\r\n\r\n##### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file. They can be fixed by [editing the project file](#fixing-direct-dependencies) or using NuGet to update the dependency.\r\n\r\n##### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects\r\n\r\nThe `project.assets.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json)).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `System.Private.Uri/4.3.0` is a reference to version 4.3.0 of `System.Private.Uri`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\n#### Updating the version of Microsoft.NETCore.App\r\n\r\nIf your host version is a 2.1.x host you must install version 2.1.8 or later of the [.NET Core 2.1 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.1), or corresponding [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\nIf your host version is a 2.2.x you must install version 2.2.2 or later of the [.NET Core 2.2 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.2), or corresponding  [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\n#### <a name=\"fixing-direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Private.Uri\" Version=\"4.3.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.Private.Uri` version 4.3.0\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.Private.Uri` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Private.Uri\" Version=\"4.3.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"transitive-dependencies\"></a>Fixing transitive dependencies\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Private.Uri\" Version=\"4.3.0\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n##### Rebuilding your application\r\n\r\nFinally, you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2019-0657](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0657)\r\n\r\n### Revisions\r\n\r\nV1.0 (February 12, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-02-08_\r\n","Url":"https://github.com/dotnet/announcements/issues/97","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0657: .NET Core Domain Spoofing Vulnerability\" (#97)"},{"Id":"397026248","IsPullRequest":false,"CreatedAt":"2019-01-08T18:17:45","Actor":"leecow","Number":"96","RawContent":null,"Title":"January 2019 .NET Updates","State":"open","Body":"# January 2019 .NET Updates\r\n\r\nThe following .NET updates were released in January 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n\r\n* [.NET Framework January 2019 Preview of Quality Rollup - January 15, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/01/15/net-framework-january-2019-preview-of-quality-rollup/)\r\n* [.NET Framework January 2019 Security and Quality Rollup - January 8, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/01/08/net-framework-january-2019-security-and-quality-rollup/)\r\n* [.NET Framework January 22, 2018 Preview of Cumulative Update for Windows 10 version 1809 and Windows Server 2019 - January 22, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/01/22/net-framework-january-22-2018-preview-of-cumulative-update-for-windows-10-version-1809-and-windows-server-2019/)\r\n\r\n## .NET Core\r\n\r\n* .NET Core 2.1.7 and .NET Core SDK 2.1.503 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.7/2.1.7.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.1) )\r\n\r\n* .NET Core 2.2.1 and .NET Core SDK 2.2.102 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.1/2.2.1.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.2) )\r\n\r\nA discussion issue is available at [core/2210](https://github.com/dotnet/core/issues/2210)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/96","RelatedDescription":"Open issue \"January 2019 .NET Updates\" (#96)"},{"Id":"397020176","IsPullRequest":false,"CreatedAt":"2019-01-08T18:00:27","Actor":"blowdart","Number":"95","RawContent":null,"Title":" Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a tampering vulnerability exists when .NET Core improperly handles specially crafted files. An attacker who successfully exploited this vulnerability could write arbitrary files and directories to certain locations on a vulnerable system. However, an attacker would have limited control over the destination of the files and directories.\r\n\r\nTo exploit the vulnerability, an attacker must send a specially crafted file to a vulnerable system\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core handles these files.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/34427\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nIf your application does not extract ZIP compressed files it is unaffected.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the [System.IO.Compression.ZipFile](https://www.nuget.org/packages/System.IO.Compression.ZipFile/) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nMicrosoft.NETCore.App (System.IO.Compression.ZipFile) | 2.1.0, 2.1.1, 2.1.2, 2.1.3, 2.1.4, 2.1.5, 2.1.6 | 2.1.7\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n`System.IO.Compression.ZipFile` is distributed as part of the .NET Core 2.1 runtime. To check the currently installed runtimes, open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed, you'll see output like the following;\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your host version is 2.1.x and the highest `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\nIf your host version is 2.2.x and the highest 2.1.x `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\n\r\nYou will not see SDK versions if you have only installed the runtime.\r\n\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nIf your host version is a 2.1.x host you must install version 2.1.7 or later of the [.NET Core 2.1 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.1), or corresponding [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\nIf your host version is a 2.2.x you must install version 2.2.1 or later of the [.NET Core 2.2 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.2), or corresponding  [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\nFinally, you must restart your applications once an updated runtime or SDK is installed.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgments\r\n\r\n[Danny Grander](https://twitter.com/grander) of [Snyk](https://snyk.io/)\r\n\r\n### External Links\r\n\r\n[CVE-2018-8416](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-8416)\r\n\r\n### Revisions\r\n\r\nV1.1 (January 9, 2019): Correct affected pacakge table.\r\nV1.0 (January 8, 2019): Advisory published.\r\n\r\n_Version 1.1_\r\n\r\n_Last Updated 2019-01-09_\r\n\r\n","Url":"https://github.com/dotnet/announcements/issues/95","RelatedDescription":"Open issue \" Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability\" (#95)"},{"Id":"397020142","IsPullRequest":false,"CreatedAt":"2019-01-08T18:00:23","Actor":"blowdart","Number":"94","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of an information disclosure vulnerability exists in .NET Framework and .NET Core which allows bypassing Cross-origin Resource Sharing (CORS) configurations. An attacker who successfully exploited the vulnerability could retrieve content, that is normally restricted, from a web application.\r\n\r\nThe security update addresses the vulnerability by enforcing CORS configuration to prevent its bypass.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/34428\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nMicrosoft has not identified any mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the [System.Net.Http](https://www.nuget.org/packages/System.Net.Http/) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nMicrosoft.NETCore.App (System.Net.Http) | 2.1.0, 2.1.1, 2.1.2, 2.1.3, 2.1.4, 2.1.5, 2.1.6 | 2.1.7\r\nMicrosoft.NETCore.App (System.Net.Http) | 2.2.0 | 2.2.1\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n#### Applications that use Microsoft.NetCore.App\r\n\r\n`System.Net.Http` is distributed as part of the .NET Core 2.1 runtime. To check the currently installed runtimes, open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed, you'll see output like the following;\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your host version is 2.1.x and the highest `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\nIf your host version is 2.2.x and the highest 2.1.x `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\n\r\nYou will not see SDK versions if you have only installed the runtime.\r\n\r\n#### Applications not using Microsoft.NetCore.App\r\n\r\nThe affected assembly is also available separately as a NuGet package. If you are not using Microsoft.NetCore.App, you may still be affected if you are referencing the packages listed above.\r\n\r\n##### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file. They can be fixed by [editing the project file](#fixing-direct-dependencies) or using NuGet to update the dependency.\r\n\r\n##### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects\r\n\r\nThe `project.assets.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json)).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `SSystem.Net.Http/4.3.0` is a reference to version 4.3.0 of `System.Net.Http`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\n#### Updating the version of Microsoft.NETCore.App\r\n\r\nIf your host version is a 2.1.x host you must install version 2.1.7 or later of the [.NET Core 2.1 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.1), or corresponding [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\nIf your host version is a 2.2.x you must install version 2.2.1 or later of the [.NET Core 2.2 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.2), or corresponding  [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\n#### <a name=\"fixing-direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.Net.Http` version 4.3.0\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.IO.Pipelines` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.5\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"transitive-dependencies\"></a>Fixing transitive dependencies\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.5\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n##### Rebuilding your application\r\n\r\nFinally, you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2019-0545](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0545)\r\n\r\n### Revisions\r\n\r\nV1.1 (January 9, 2019): Correct affected package table. \r\nV1.0 (January 8, 2019): Advisory published.\r\n\r\n_Version 1.1_\r\n\r\n_Last Updated 2019-01-09_\r\n","Url":"https://github.com/dotnet/announcements/issues/94","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability\" (#94)"},{"Id":"390948658","IsPullRequest":false,"CreatedAt":"2018-12-14T03:22:58","Actor":"wu-yafeng","Number":"93","RawContent":null,"Title":"Docker image with tag '2.2-aspnetcore-runtime' is not compatible","State":"closed","Body":"1. Install  .NET Core 2.2.100 sdk\r\n2. Create a new 'AspNetCore Web Api' by using Visual Studio 2017,and enbale docker support.\r\n3. F5 ,the Output Windows shows:\r\n>It was not possible to find any compatible framework version\r\n>The specified framework 'Microsoft.AspNetCore.App', version '2.2.0' was not found.\r\n>  - Check application dependencies and target a framework version installed at:\r\n>      /usr/share/dotnet/\r\n>  - Installing .NET Core prerequisites might help resolve this problem:\r\n>     http://go.microsoft.com/fwlink/?LinkID=798306&clcid=0x409\r\n>  - The .NET Core framework and SDK can be installed from:\r\n>      https://aka.ms/dotnet-download\r\n>  - The following versions are installed:\r\n>      2.2.0-preview3-35497 at [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]","Url":"https://github.com/dotnet/announcements/issues/93","RelatedDescription":"Closed issue \"Docker image with tag '2.2-aspnetcore-runtime' is not compatible\" (#93)"},{"Id":"390193072","IsPullRequest":false,"CreatedAt":"2018-12-12T12:56:53","Actor":"bilalmalik777","Number":"92","RawContent":null,"Title":".net core Console","State":"closed","Body":"I am running dot net core console app as web jobs and it is working perfectly in docker with docker compose. Now the issue is I want to pass a value to the application via Console.ReadLine() over this value i make some decision but i am unable to pass value via Console.ReadLine(). How i can do it please help me. For more understanding, i have added my docker compose file below\r\n`version: '3.4'\r\n\r\nservices:\r\n  \r\n  tt.core.web:\r\n    image: ${DOCKER_REGISTRY-}ttcoreweb\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.Web/Dockerfile\r\n    depends_on:\r\n     - db\r\n    networks:\r\n     - app-network\r\n\r\n  tt.core.downtime.webjob:\r\n    image: ${DOCKER_REGISTRY-}ttcoredowntimewebjob\r\n    environment:\r\n      CORE_ENVIRONMENT: devdocker\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.Downtime.Webjob/Dockerfile\r\n    depends_on:\r\n     - db\r\n     - tt.core.web\r\n    networks:\r\n     - app-network\r\n\r\n  db:\r\n    image: microsoft/mssql-server-linux\r\n    container_name: db\r\n    environment:\r\n      SA_PASSWORD: \"Thingtrax%1\"\r\n      ACCEPT_EULA: \"Y\"\r\n      MSSQL_PID: Express\r\n    ports:\r\n      - \"7002:1433\"\r\n    networks:\r\n      app-network:\r\n        ipv4_address: 172.24.0.2\r\n\r\nnetworks:\r\n  app-network:\r\n    ipam:\r\n      driver: default\r\n      config:\r\n        - subnet: 172.24.0.0/16\r\n\r\n`\r\nIf the detail is not enough or you do not get my point, you can share your confusion in comment","Url":"https://github.com/dotnet/announcements/issues/92","RelatedDescription":"Closed issue \".net core Console\" (#92)"},{"Id":"380346599","IsPullRequest":false,"CreatedAt":"2018-11-13T17:44:44","Actor":"leecow","Number":"91","RawContent":null,"Title":"November 2018 .NET Updates","State":"open","Body":"# November 2018 .NET Updates\r\n\r\nThe following .NET updates were released in November 2018. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Core\r\n\r\n* [.NET Core November 2018 (2.1.6 and SDK 2.1.500) Update release notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.6/2.1.6.md)\r\n\r\nA [discussion issue](https://github.com/dotnet/core/issues/2053) is available for questions or feedback about this release.\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n* [October 2018](https://github.com/dotnet/announcements/issues/89)\r\n* [September 2018](https://github.com/dotnet/announcements/issues/84)\r\n* [August 2018](https://github.com/dotnet/announcements/issues/79)\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)","Url":"https://github.com/dotnet/announcements/issues/91","RelatedDescription":"Open issue \"November 2018 .NET Updates\" (#91)"},{"Id":"375230004","IsPullRequest":false,"CreatedAt":"2018-10-29T21:45:27","Actor":"terrajobst","Number":"90","RawContent":null,"Title":"The future of JSON in .NET Core 3.0","State":"open","Body":"JSON has become an essential part of virtually all modern .NET applications and in many cases even surpassed the usage of XML. However, .NET hasn't had a (great) built-in way to deal with JSON. Instead we've relied on [Json.NET] which continues to serve the .NET ecosystem well.\r\n\r\n[Json.NET]: https://www.newtonsoft.com/json\r\n\r\nMoving forward, we plan on making some changes to our JSON support:\r\n\r\n* **We need high-performance JSON APIs**. We need a new set of JSON APIs that are highly tuned for performance by using `Span<T>` and allows for processing UTF-8 directly without having to transcode to UTF-16 `string` instances. Both aspects are critical for our web server Kestrel, where throughput is a key requirement.\r\n\r\n* **Remove dependency from ASP.NET Core to Json.NET**. Today, ASP.NET Core has a dependency on Json.NET. While this provides a tight integration between ASP.NET Core and Json.NET, it also means that application developers cannot freely choose which JSON library they are using. This is also problematic for customers of Json.NET as the version is dictated by the underlying platform. However, Json.NET is frequently updated and application developers often want to -- or even have to -- use a specific version. Thus, we want to remove the dependency from ASP.NET Core 3.0 to Json.NET so that customers can choose which version to use, without fearing they might accidentally break the underlying platform. In addition, this makes it also possible to plug-in an entirely different JSON library.\r\n\r\n* **Provide an ASP.NET Core integration package for Json.NET**. Json.NET has basically become the Swiss Army knife of JSON processing in .NET. It provides many options and facilities that allow customers to handle their JSON needs with ease. We don't want to compromise on the Json.NET support customers are getting today, for example, the ability to configure the JSON serialization via the `AddJsonOptions` extension method. Thus, we want to provide the Json.NET integration as a NuGet package that developers can optionally install so they get all the bells and whistles they get from Json.NET today. The other part of this work item is to ensure we have the right extension points so that other parties can provide similar integration packages for their JSON library of choice.\r\n\r\nBelow are more details around this plan.\r\n\r\n## The need for high-performance JSON APIs\r\n\r\nThe requirements for the .NET stack have changed a bit since the arrival of .NET Core. Historically, .NET has valued usability and convenience. With .NET Core, we've added a focus on performance, and we've made significant investments to serve high performance needs. And the [improvements we made][techempower] in the popular TechEmpower benchmark are a testament to that.\r\n\r\n[techempower]: https://www.techempower.com/blog/2016/11/16/framework-benchmarks-round-13/\r\n\r\nWith .NET Core 2.1, we've added a brand new primitive called [Span\\<T>][span-msdn] that allows us to represent native memory and arrays in a uniform way. With this type, we've also added a set of parsing and encoding APIs that are much more memory efficient without having to resort to unsafe code.\r\n\r\n[span-msdn]: https://msdn.microsoft.com/en-us/magazine/mt814808.aspx\r\n\r\nPart of the work of minimizing allocations is to avoid having to transcode UTF-8 payloads into UTF-16 strings, purely for parsing reasons. Currently, Json.NET is implemented by reading UTF-16. We need the ability to read (and write) JSON documents directly in UTF-8 because most network protocols (including HTTP) use UTF-8.\r\n\r\nDuring .NET Core 2.1 we've learned that updating our existing APIs to leverage `Span<T>` has limits. While we did add a bunch of overloads that accept spans, we also had to produce brand new APIs that are designed around minimizing allocations and dealing with buffers, which we exposed in `System.Buffers` namespaces. And with `System.IO.Pipelines` we've also added a programming model that enables developers to share buffers without having to deal with lifetime issues.\r\n\r\nBased on these experiences we believe in order to support JSON parsing, we'll need to expose a new set of JSON APIs that are specifically geared for high-performance scenarios.\r\n\r\nYou might wonder why we can't just update Json.NET to include support for parsing JSON using `Span<T>`? Well, James Newton-King -- the author of Json.NET -- has the following to say about that:\r\n\r\n> Json.NET was created over 10 years ago, and since then it has added a wide range of features aimed to help developers work with JSON in .NET. In that time Json.NET has also become far and away NuGet's most depended on and downloaded package, and is the go-to library for JSON support in .NET. Unfortunately, Json.NET's wealth of features and popularity works against making major changes to it. Supporting new technologies like `Span<T>` would require fundamental breaking changes to the library and would disrupt existing applications and libraries that depend on it.\r\n>\r\n> Going forward Json.NET will continue to be worked on and invested in, both addressing known issues today and supporting new platforms in the future. Json.NET has always existed alongside other JSON libraries for .NET, and there will be nothing to prevent you using one or more together, depending on whether you need the performance of the new JSON APIs or the large feature set of Json.NET.\r\n\r\n## Move Json.NET integration into a separate NuGet package\r\n\r\nToday, you cannot use ASP.NET Core without Json.NET because it is a dependency of ASP.NET Core itself. Over the years, we've received feedback that the dependency can conflict with other libraries that have their own dependency on a different version of Json.NET. In the past, we've considered addressing this issue by using a private copy of Json.NET in ASP.NET. However, this would create problems when developers want to configure Json.NET (for instance, in order to control how the serializer behaves when formatting JSON objects).\r\n\r\nMoving forward we'd like to:\r\n\r\n1. Replace the internal usage of Json.NET in ASP.NET Core by the new platform-provided JSON APIs.\r\n\r\n2. Factor the public facing usage of Json.NET into an optional integration package that can be acquired from NuGet.\r\n\r\nSo the existing integration between ASP.NET Core and Json.NET will continue to be supported, but will be moving out of the platform and into a separate package. However, since the integration is then designed to sit on top of the platform, it will also allow customers to update Json.NET to later versions.\r\n\r\nFurthermore, customers who need more performance can also choose to use the new JSON APIs, at the expense of the rich feature set that Json.NET offers.\r\n\r\n## Discussion\r\n\r\nFor a discussion, please go to https://github.com/dotnet/corefx/issues/33115.","Url":"https://github.com/dotnet/announcements/issues/90","RelatedDescription":"Open issue \"The future of JSON in .NET Core 3.0\" (#90)"},{"Id":"368440353","IsPullRequest":false,"CreatedAt":"2018-10-09T23:44:06","Actor":"vivmishra","Number":"89","RawContent":null,"Title":"October 2018 .NET Updates","State":"open","Body":"# October 2018 .NET Updates\r\n\r\nThe following .NET updates were released in October 2018. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Core\r\n\r\n* [.NET Core October 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/10/09/net-core-october-2018-update-net-core-1-0-and-1-1/)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n* [September 2018](https://github.com/dotnet/announcements/issues/84)\r\n* [August 2018](https://github.com/dotnet/announcements/issues/79)\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)","Url":"https://github.com/dotnet/announcements/issues/89","RelatedDescription":"Open issue \"October 2018 .NET Updates\" (#89)"},{"Id":"368429033","IsPullRequest":false,"CreatedAt":"2018-10-09T22:51:18","Actor":"leecow","Number":"88","RawContent":null,"Title":"Microsoft Security Advisory CVE-2018-8292: .NET Core Information Disclosure Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-8292: .NET Core Information Disclosure Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a security feature bypass vulnerability that exists when .NET Core when HTTP authentication information is inadvertently exposed in an outbound request that encounters an HTTP redirect. An attacker who successfully exploited this vulnerability could use the information to further compromise the web application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core applications handles HTTP redirects.\r\n\r\nSystem administrators running .NET Core 1.0 or .NET Core 1.1 applications must update their .NET Core runtimes to versions 1.0.13 and 1.1.10 then restart their applications. If installed applications target .NET Core 2.0, the applications must be migrated to 2.1 or newer and redeployed.\r\n\r\nDevelopers must update their .NET Core SDK to versions 1.1.11 and migrate any [.NET Core 2.0](https://docs.microsoft.com/dotnet/core/migration/20-21) or [ASP.NET Core 2.0](https://docs.microsoft.com/aspnet/core/migration/20_21?view=aspnetcore-2.1) applications to 2.1 then redeploy.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at <https://github.com/dotnet/corefx/issues/32730>\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nNone\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core application that runs on a .NET Core 1.0.x runtime with a version number of 1.0.12 or lower, or a .NET Core application that runs on a .NET Core 1.1.x runtime with a version number of 1.1.9 or lower, or a .NET Core application that runs on a .NET Core 2.0.x runtime.\r\n\r\nAdditionally package authors should check their dependencies to ensure they aren't depending on a vulnerable version of the following package:\r\n\r\n<a name=\"package-list\"></a>Package name | Vulnerable versions | Secure versions\r\n------------ | ---------------- | -------------------------\r\nSystem.Net.Http| 2.0.20126.16343, 2.0.20505, 2.0.20710, 4.0.0, 4.1.0, 4.1.1, 4.1.2, 4.3.0, 4.3.1, 4.3.2, 4.3.3 |  4.3.4 or later\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nAny .NET Core application that runs on a .NET Core 1.0.x runtime with a version number of 1.0.12 or lower, or a .NET Core application that runs on a .NET Core 1.1.x runtime with a version number of 1.1.9 or lower, or a .NET Core application that runs on a .NET Core 2.0.x runtime.\r\n\r\nTo check the currently installed runtimes and SDKs with version 2.1 or later of .NET Core, open a command prompt and run the `dotnet --info` command. You should see an output similar to the following:\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.1.403\r\n Commit:    04e15494b6\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17763\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.403\\\r\n\r\nHost (useful for support):\r\n  Version: 2.1.5\r\n  Commit:  290303f510\r\n\r\n.NET Core SDKs installed:\r\n  1.0.4 [C:\\Program Files\\dotnet\\sdk]\r\n  1.1.10 [C:\\Program Files\\dotnet\\sdk]\r\n  2.0.3 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.4 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf you don't see a runtime entry for 1.0.13 or 1.1.10, any .NET Core 1.x applications run on that computer are vulnerable.\r\n\r\nIf you don't have a 2.1 version of the runtime or SDK installed, you can produce the complete list of runtimes by performing a directory listing in the install root directories. The default root directories are listed in the following table:\r\n\r\n| Operating System | Location |\r\n|------------------|----------|\r\n| Windows | `C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\` |\r\n| macOS | `/usr/local/share/dotnet/shared/Microsoft.NETCore.App/` |\r\n| Supported Linux platforms | `/usr/share/dotnet/shared/Microsoft.NETCore.App/` |\r\n\r\nEach runtime version is installed in its own directory, where the directory name is the version number. If you don't have a directory for 1.0.13, 1.1.10 then any application targeting versions 1.0 or 1.1 are vulnerable.\r\n\r\nAdditionally, if you've deployed [self-contained applications](https://docs.microsoft.com/dotnet/core/deploying/#self-contained-deployments-scd) targeting any of the impacted versions, these applications are also vulnerable and must be recompiled and redeployed.\r\n\r\n### <a name=\"fix-runtime\">How do I fix the vulnerability?\r\n\r\nSystem administrators are advised to update their .NET Core runtimes to versions 1.0.13, 1.1.10 and install the latest 2.1 runtime, ensuring that any 2.0 applications are migrated to 2.1 as soon as possible.\r\n\r\n Developers are advised to update their .NET Core SDK to versions 1.1.11 and migrate any [.NET Core](https://docs.microsoft.com/dotnet/core/migration/20-21) or [ASP.NET Core 2.0](https://docs.microsoft.com/aspnet/core/migration/20_21?view=aspnetcore-2.1) applications to 2.1 and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at <https://github.com/dotnet/> and <https://github.com/aspnet/>, respectively. The Announcements repo for each product (<https://github.com/dotnet/Announcements> and <https://github.com/aspnet/Announcements>) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2018-8292](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-CVE-2018-8292)\r\n\r\n### Revisions\r\n\r\nV1.0 (October 10, 2018): Advisory published.\r\n_Version 1.0_\r\n_Last Updated 2018-10-10_\r\n","Url":"https://github.com/dotnet/announcements/issues/88","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2018-8292: .NET Core Information Disclosure Vulnerability\" (#88)"},{"Id":"367393517","IsPullRequest":false,"CreatedAt":"2018-10-05T22:58:51","Actor":"leecow","Number":"87","RawContent":null,"Title":".NET Core Release Data (releases.json) Redesign and v1 Deprecation Plan","State":"open","Body":"# .NET Core Release Data (releases.json) Redesign and Deprecation\r\n\r\nThe releases.json and releases.csv files began life as helper tools for some of our internal release work, some experimentation and to possibly be useful to the community. It has been great to learn the files are indeed in use and many folks depend on them as a trigger for a number of activities.\r\n\r\n* [release-notes/releases.json](https://github.com/dotnet/core/blob/master/release-notes/releases.json)\r\n* [release-notes/releases.csv](https://github.com/dotnet/core/blob/master/release-notes/releases.csv)\r\n\r\nA discussion topic is available to share thoughts and see what others are thinking at https://github.com/dotnet/core/issues/1986\r\n\r\nBetween the usages which we have become aware and in considering further activities that could be enabled to reason about things such as checking .NET Core version availability and support status, it became clear the current format is inadequate.\r\n\r\nAn updated format has been designed and tested which will replace the current files. The timeline below describes the path to obsoleting the current files.\r\n\r\n## The Plan\r\n\r\n| Date | Action |\r\n| :--- | :----- |\r\n| Oct 2018 | Notify the community of the coming change |\r\n| Oct 2018 | Release the new json format into dotnet/core |\r\n| Oct 2018 - Feb 2019 | Maintain the old json and csv files |\r\n| Feb 2019 | Reminder announcement that old format file is coming soon |\r\n| Mar 2019 | Old json and csv files are obsoleted and removed from dotnet/core |\r\n\r\n## Breaking change\r\n\r\nIf you are currently utilizing the old version json or csv, you will need to update the relevant code to work with the new format. If you are just getting started with consuming this data, use the new version.\r\n\r\n## The Format\r\n\r\nBelow are fragments of the files from our most recent .NET Core release.\r\n\r\n### release-index.json\r\n\r\nThis file consists of a top level array with data on the latest release versions and a property for locating the more detailed channel-specific releases.json. This file is found in [dotnet/core/release-notes](https://github.com/dotnet/core/tree/new-json/release-notes/)\r\n\r\n[releases-index.json](https://github.com/dotnet/core/blob/new-json/release-notes/releases-index.json)\r\n\r\n```\r\n{\r\n    \"releases-index\": [\r\n        {\r\n            \"channel-version\": \"2.1\",\r\n            \"latest-release\": \"2.1.5\",\r\n            \"latest-release-date\":\"2018-10-02\",\r\n            \"product\": \".NET Core\",\r\n            \"support-phase\": \"lts\",\r\n            \"eol-date\": \"\",\r\n            \"releases.json\": \"https://github.com/dotnet/core/blob/master/release-notes/2.1/releases.json\",\r\n        },\r\n        ...\r\n}\r\n```\r\n\r\n### releases.json\r\n\r\nThis file provides detailed data for each release. A copy of this file will be found in each versioned directories under [dotnet/core/release-notes](https://github.com/dotnet/core/release-notes). For example [dotnet/core/release-notes/2.1](https://github.com/dotnet/core/tree/new-json/release-notes/2.1)\r\n\r\n\r\n[releases.json](https://github.com/dotnet/core/tree/new-json/release-notes/2.1/releases.json)\r\n\r\n```\r\n{\r\n    \"channel-version\": \"2.1\",\r\n    \"latest-release\": \"2.1.5\",\r\n    \"latest-release-date\":\"2018-10-12\",\r\n    \"support-phase\": \"lts\",\r\n    \"eol-date\": \"\",\r\n    \"lifecycle-policy\": \"https://www.microsoft.com/net/support/policy\",\r\n    \"releases\":\r\n    [\r\n        {\r\n            \"release-date\":  \"2018-10-02\",\r\n            \"release-version\":  \"2.1.5\",\r\n            \"security\":  false,\r\n            \"release-notes\":  \"https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.5/2.1.5.md\",\r\n            \"runtime\":  \r\n            {\r\n                \"version\":  \"2.1.5\",\r\n                \"version-display\":  \"2.1.5\",\r\n                \"vs-version\":  \"15.8.6\",\r\n                \"files\":  \r\n                [\r\n                    {\r\n                        \"name\": \"dotnet-runtime-linux-arm.tar.gz\",\r\n                        \"url\": \"https://download.visualstudio.microsoft.com/download/pr/4d555219-1f04-47c6-90e5-8b3ff8989b9c/0798763e6e4b98a62846116f997d046e/dotnet-runtime-2.1.5-linux-arm.tar.gz\",\r\n                        \"hash\": \"89a77a07065ea24e7198c77a233b9ce5c6cf51b1deb2ef55c88f0adbb2ecd9db1ba4e7d55eec2ef7139c47f91346fed360161a5bb6e3a7ccfc4559bcde286364\"\r\n                    },\r\n                    ...\r\n                ]\r\n            }\r\n            \"sdk\":  \r\n            {\r\n                \"version\":  \"2.1.403\",\r\n                \"version-display\":  \"2.1.403\",\r\n                \"vs-version\":  \"15.8.6\",\r\n                \"csharp-language\":  \"7.3\",\r\n                \"fsharp-language\":  \"4.5\",\r\n                \"files\":  \r\n                [...]\r\n            }\r\n        }\r\n    ]\r\n}\r\n```","Url":"https://github.com/dotnet/announcements/issues/87","RelatedDescription":"Open issue \".NET Core Release Data (releases.json) Redesign and v1 Deprecation Plan\" (#87)"},{"Id":"366416503","IsPullRequest":false,"CreatedAt":"2018-10-03T16:11:18","Actor":"leecow","Number":"86","RawContent":null,"Title":".NET Core 2.0 has reached end of life","State":"open","Body":"[.NET Core 2.0 reached end of life](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/) on October 1, 2018. This means [.NET Core 2.0](https://blogs.msdn.microsoft.com/dotnet/2017/08/14/announcing-net-core-2-0/) is no longer supported and updates will no longer be provided. We recommend moving to [.NET Core 2.1](https://blogs.msdn.microsoft.com/dotnet/2018/05/30/announcing-net-core-2-1/), our long term support (LTS) release.\r\n\r\n- [Download .NET Core 2.1](https://www.microsoft.com/net/download/dotnet-core/2.1)\r\n- [.NET Core 2.1 LTS statement](https://blogs.msdn.microsoft.com/dotnet/2018/08/21/net-core-august-2018-update/)\r\n- [.NET Core 2.0 end-of-life statement](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/)\r\n\r\n## Discussion\r\n\r\nPlease share you thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet/core#1983](https://github.com/dotnet/core/issues/1983)\r\n\r\n## Lifecycle Context\r\n\r\n.NET Core releases belong to one of two [support lifecycles](https://www.microsoft.com/net/platform/support-policy): long term support (LTS) and Current. LTS releases are stable release which receive critical updates and are supported for at least three years. Current releases can include new features that may undergo future change based on feedback. Current releases are supported for three months after the subsequent .NET Core major or minor release. Both LTS and Current releases receive critical fixes throughout their lifecycle, for security, reliability, or to add support for new operating system versions. You must stay up-to-date with the latest patches to qualify for support. \r\n\r\n## .NET Core 2.0 Lifecycle\r\n\r\n[.NET Core 2.0](https://blogs.msdn.microsoft.com/dotnet/2017/08/14/announcing-net-core-2-0/) was released in August 2017 as a Current release. Per the lifecycle policy, Current releases reach end of life 3 months after a subsequent release (Current or LTS). .NET Core 2.1 released May 2018 and began the end of life countdown for .NET Core 2.0. The 3 month maintenance period for .NET Core 2.0 was scheduled to end August 2018 but was [extended to October](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/) to allow time to address an issue some customers were experiencing while migrating to .NET Core 2.1.\r\n\r\n## .NET Core 2.0 Downloads\r\n\r\n.NET Core 2.0 installers, zips and tar.gzs will remain available, but unsupported. This includes existing releases available on Linux package feeds. Previous versions, including 2.0, will be accessible through the [Download Archives](https://www.microsoft.com/net/download/archives). \r\n\r\n## .NET Core 2.0 Docker Images\r\n\r\n.NET Core 2.0 will be removed from the .NET and ASP.NET Docker repo READMEs, however the existing images remain available in those repos.\r\n\r\n* [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/)\r\n* [microsoft/dotnet-nightly](https://hub.docker.com/r/microsoft/dotnet-nightly/)\r\n* [microsoft/aspnetcore](https://hub.docker.com/r/microsoft/aspnetcore/)\r\n* [microsoft/aspnetcore-build](https://hub.docker.com/r/microsoft/aspnetcore-build/)\r\n\r\n## Policy Information\r\n\r\nAdditional lifecycle and support details  and background can be seen in the following:\r\n\r\n* [.NET Core Support Lifecycle](https://www.microsoft.com/net/platform/support-policy)\r\n* [Support and Versioning](https://blogs.msdn.microsoft.com/dotnet/2016/07/26/net-support-and-versioning/)\r\n* [2.0 end of life early announcement](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n","Url":"https://github.com/dotnet/announcements/issues/86","RelatedDescription":"Open issue \".NET Core 2.0 has reached end of life\" (#86)"},{"Id":"361098704","IsPullRequest":false,"CreatedAt":"2018-09-18T01:10:23","Actor":"spshant","Number":"85","RawContent":null,"Title":"NET Framework 4.8 Early Access build 3646 is available!","State":"open","Body":"Today, we are happy to share an Early Access build for the .NET Framework 4.8. This includes an updated .NET 4.8 runtime as well as the .NET 4.8 Developer Pack (a a single package that bundles the .NET Framework 4.8 runtime, the .NET 4.8 Targeting Pack, and the .NET Framework 4.8 SDK). \r\n\r\nPlease help us ensure this is a high quality and compatible release by trying out this build and exploring the new features. \r\n\r\n**Next steps:**\r\nTo explore the new features, download the [.NET 4.8 Developer Pack build 3646](https://go.microsoft.com/fwlink/?LinkId=2018486).  Instead, if you want to try just the .NET 4.8 runtime, you can download either of these:\r\n•\t[.NET 4.8 Web Installer](https://go.microsoft.com/fwlink/?LinkId=2018525) - requires an internet connection during installation \r\n•\t[.NET 4.8 Offline installer](https://go.microsoft.com/fwlink/?LinkId=2018531) - can be downloaded and installed later in a disconnected state\r\n\r\nPlease provide your feedback by [reporting an issue at the .NET Framework Early Access GitHub repository](https://github.com/Microsoft/dotnet-framework-early-access/issues/new).\r\n\r\n**Note**: this release is still under development, you can expect to see more features and fixes in future preview builds. Also, a reminder that this build is not supported for production use.\r\n\r\nThis preview build 3646 includes improvements/fixes in the following areas:\r\n•\t**[Runtime]** JIT and NGEN improvements\r\n•\t**[Windows Forms]** Accessibility enhancements\r\n•\t**[WPF]** SelectionTextBrush Property\r\n•\t**[BCL]** Updated ZLib\r\n\r\nYou can see the complete list of improvements in this build [here](https://github.com/Microsoft/dotnet-framework-early-access/blob/master/release-notes/NET48/build-3646/changes.md).\r\n\r\n.NET Framework build 3646 is also included in the next update for Windows 10. You can sign up for [Windows Insiders](https://insider.windows.com/en-us/) to validate that your applications work great on the latest .NET Framework included in the latest Windows 10 releases.\r\n","Url":"https://github.com/dotnet/announcements/issues/85","RelatedDescription":"Open issue \"NET Framework 4.8 Early Access build 3646 is available!\" (#85)"},{"Id":"359151445","IsPullRequest":false,"CreatedAt":"2018-09-11T17:44:50","Actor":"leecow","Number":"84","RawContent":null,"Title":"September 2018 .NET Updates","State":"open","Body":"# September 2018 .NET Updates\r\n\r\nThe following .NET updates were released in September 2018. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Framework\r\n* [.NET Framework September 2018 Security and Quality Rollup - September 11, 2018](https://blogs.msdn.microsoft.com/dotnet/2018/09/11/net-framework-september-2018-security-and-quality-rollup/)\r\n\r\n## .NET Core\r\n\r\n* [.NET Core September 2018 Update - September 11, 2018](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.4/2.1.4.md)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n\r\n* [August 2018](https://github.com/dotnet/announcements/issues/79)\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)","Url":"https://github.com/dotnet/announcements/issues/84","RelatedDescription":"Open issue \"September 2018 .NET Updates\" (#84)"},{"Id":"359136325","IsPullRequest":false,"CreatedAt":"2018-09-11T17:00:55","Actor":"blowdart","Number":"83","RawContent":null,"Title":"Microsoft Security Advisory CVE-2018-8409: .NET Core Denial Of Service Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-8409: .NET Core Denial Of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a denial of service vulnerability in .NET Core when System.IO.Pipelines improperly handles requests. An attacker who successfully exploited this vulnerability could cause a denial of service against an application that is leveraging System.IO.Pipelines. The vulnerability can be exploited remotely, without authentication. A remote unauthenticated attacker could exploit this vulnerability by providing specially crafted requests to the application.\r\n\r\nThe update addresses the vulnerability by correcting how System.IO.Pipelines handles requests.\r\n\r\nIf you are using ASP.NET Core 2.1 you will also need to update your ASP.NET version this by following the instructions in the [ASP.NET Core bulletin](https://github.com/aspnet/Announcements/issues/316).\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/32228\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nThere are no mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the System.IO.Pipelines package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.IO.Pipelines | 4.5.0 | 4.5.1\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n#### Applications which use System.IO.Pipelines\r\n\r\nSystem.IO.Pipelines is distributed both in ASP.NET Core 2.1 and separately as a NuGet package. If you are not using Microsoft.AspNetCore.App or .All, you may still be affected if you are referencing the System.IO.Pipelines package.\r\n\r\n##### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file. They can be fixed by [editing the project file](#fixing-direct-dependencies) or using NuGet to update the dependency.\r\n\r\n##### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects\r\n\r\nThe `project.assets.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json)).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `System.IO.Pipelines/4.5.0` is a reference to version 4.5.0 of `System.IO.Pipelines`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\n#### <a name=\"fixing-direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.IO.Pipelines\" Version=\"4.5.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.IO.Pipelines` version 4.5.0\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.IO.Pipelines` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.IO.Pipelines\" Version=\"4.5.1\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"transitive-dependencies\"></a>Fixing transitive dependencies\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.IO.Pipelines\" Version=\"4.5.1\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n#### Rebuilding your application\r\n\r\nFinally you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2018-8409](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-CVE-2018-8409)\r\n\r\n### Revisions\r\n\r\nV1.0 (September 11, 2018): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2018-09-11_\r\n","Url":"https://github.com/dotnet/announcements/issues/83","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2018-8409: .NET Core Denial Of Service Vulnerability\" (#83)"},{"Id":"357399856","IsPullRequest":false,"CreatedAt":"2018-09-05T20:56:25","Actor":"richlander","Number":"82","RawContent":null,"Title":".NET Core Runtime ARM64 Status","State":"open","Body":"# .NET Core Runtime ARM64 Status\r\n\r\nThe .NET Core team is in the process of adding support for ARM64, as part of the .NET Core 3.0 project. This issue will be updated as ARM64 support progresses.\r\n\r\n[.NET Core 3.0 Preview 1](https://github.com/dotnet/core/issues/2099) includes support for Linux ARM64. Please try this build and provide support.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet/coreclr #19843](https://github.com/dotnet/coreclr/issues/19843)\r\n\r\n## Current Status\r\n\r\nARM64 builds are functional, for console and ASP.NET Core apps.\r\n\r\n## Details\r\n\r\nInitial support for ARM64 was added in the .NET Core 2.1 release. The team is not maintaining .NET Core 2.x branches with respect to ARM64. All ARM64 improvements will be made in the .NET Core 3.0 branch (currently [master](https://github.com/dotnet/coreclr)).\r\n\r\nSee [Installing .NET Core 3.0 on Linux ARM64](https://gist.github.com/richlander/467813274cea8abc624553ee72b28213) to install .NET Core on your ARM64 machine. Builds are available from the [daily builds page](https://github.com/dotnet/core/blob/master/daily-builds.md).\r\n\r\n## Bug Queries\r\n\r\nthe following bugs queries are available for ARM64:\r\n\r\n* [dotnet/coreclr](https://github.com/dotnet/coreclr/issues?q=is%3Aopen+is%3Aissue+label%3Aarch-arm64)\r\n* [dotnet/corefx](https://github.com/dotnet/corefx/issues?q=is%3Aopen+is%3Aissue+label%3Aarch-arm64)\r\n\r\n## Operating Systems\r\n\r\n.NET Core 3.0 ARM64 builds are tested on the following operating systems:\r\n\r\n* Ubuntu 16.04 and 18.04\r\n* Debian 9\r\n\r\n## Test Hardware\r\n\r\n.NET Core 3.0 ARM64 builds have been tested on the following hardware:\r\n\r\n* [NVIDIA Jetson TX2 Module](https://developer.nvidia.com/embedded/buy/jetson-tx2)\r\n* [Pine A64](https://www.pine64.org/?page_id=46823)\r\n* [Qualcomm Centriq 2400](https://www.qualcomm.com/products/qualcomm-centriq-2400-processor)\r\n* [Qualcomm Snapdragon](https://www.qualcomm.com/snapdragon/always-connected-pc)\r\n* [Raspberry Pi3](https://www.raspberrypi.org/products/raspberry-pi-3-model-b-plus/)","Url":"https://github.com/dotnet/announcements/issues/82","RelatedDescription":"Open issue \".NET Core Runtime ARM64 Status\" (#82)"},{"Id":"350233220","IsPullRequest":false,"CreatedAt":"2018-08-13T23:50:57","Actor":"richlander","Number":"81","RawContent":null,"Title":"Advisory serializing/deserializing a CultureAwareComparer with .NET Framework 4.6+","State":"open","Body":"# Advisory serializing/deserializing a CultureAwareComparer with .NET Framework 4.6+\r\n\r\nAn [issue with serializing/deserializing a CultureAwareComparer](https://github.com/Microsoft/dotnet/blob/master/releases/net471/KnownIssues/521954%20-%20BCL%20CultureAwareComparer%20with%20ignore%20casing%20on%20serialized%20on%20previous%20versions%20of%20.NET%20do%20not%20correctly%20deserialize%20on%20.NET%204.7.1.md) was discovered with [.NET Framework 4.7.1](https://blogs.msdn.microsoft.com/dotnet/2017/10/17/announcing-the-net-framework-4-7-1/). This issue was resolved earlier this year, with the [May 2018 Preview of Quality Rollup](https://blogs.msdn.microsoft.com/dotnet/2018/05/15/net-framework-may-2018-preview-of-quality-rollup/). We recently learned that some applications, including Johnson Controls’ C-CURE 9000 Software, were negatively impacted by this change as this update requires all client and server workstations to be updated simultaneously with the appropriate Microsoft updates. The changes made to .NET Framework 4.7.1 were also integrated into .NET Framework 4.6 and later servicing releases. As a result, this advisory applies to .NET Framework 4.6 and later versions.\r\n\r\nThis advisory is provided so that developers can correctly diagnose this issue and be aware of our guidance. We will continue to update this issue as we have new information to share.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [microsoft/dotnet #832](https://github.com/Microsoft/dotnet/issues/832)\r\n\r\n## Guidance\r\n\r\nThis guidance only applies to customers that have experienced this issue.\r\n\r\nWe have released [an update for .NET Framework 4.6](https://blogs.msdn.microsoft.com/dotnet/2018/08/30/net-framework-august-2018-preview-of-quality-rollup/) and later that resolves the issue. **You must deploy the .NET Framework update for this issue to all .NET Framework 4.6+ machines that communicate via serialized objects**. After doing that, cross-machine serialization will work as expected. \r\n \r\nPlease consult your software vendor to understand if this impacts the software you are using.\r\n\r\n## Technical Context\r\n\r\nIn the [May 2018 Preview of Quality Rollup](https://blogs.msdn.microsoft.com/dotnet/2018/05/15/net-framework-may-2018-preview-of-quality-rollup/), we made a change to the internal type CultureAwareComparer to implement ISerializable. We made the change in order to address [issue with serializing/deserializing a CultureAwareComparer](https://github.com/Microsoft/dotnet/blob/master/releases/net471/KnownIssues/521954%20-%20BCL%20CultureAwareComparer%20with%20ignore%20casing%20on%20serialized%20on%20previous%20versions%20of%20.NET%20do%20not%20correctly%20deserialize%20on%20.NET%204.7.1.md).\r\n\r\nThe issue reported was that a type that contains an instance of CultureAwareComparer was not able to correctly serialize and deserialize across different versions of the .NET Framework. There are a few types in .NET Framework that do this, the most commonly impacted one being the Dictionary<TKey, TValue> type.\r\n \r\nThe change to implement the ISerializable interface had unintended side effects when exchanging this type across different machines. We have had a small number of reports from customers who have been affected.\r\n\r\nA common, but not unique way, of exchanging objects across machines is to use WCF in conjunction with a serializer. One of the common serializers being DataContractSerializer. The side-effect of the change prevented data serialized on systems where the type implements ISerializable to correctly deserialize of systems where the type does NOT implement ISerializable. The same is true of the opposite case, that systems where the type does not implement ISerializable will not correctly deserialize data from systems where the type does implement ISerializable.\r\n\r\nWe have an updated fix that we intend to release within the next month that will remove the implementation of the ISerializable interface on the type and use a different internal mechanism for ensuring the cross-version serialization continues to work as expected. This change addresses the break experienced with WCF.\r\n\r\nThe upcoming fix will remove the implementation of the ISerializable interface on the type and use a different mechanism for ensuring the cross-version serialization of that type continues to work. This change addresses the break experienced with WCF.\r\n\r\n## Symptoms\r\n\r\nAn application that is affected by this issue will most likely crash when trying to deserialize an object. It may print or log an error message similar to the following one:\r\n\r\n```\r\nThe formatter threw an exception while trying to deserialize the message: \r\nThere was an error while trying to deserialize parameter . The InnerException message was ''EndElement' 'Comparer' from namespace '' is not expected. Expecting element '_compareInfo'.'.  Please see InnerException for more details.\r\n```\r\n","Url":"https://github.com/dotnet/announcements/issues/81","RelatedDescription":"Open issue \"Advisory serializing/deserializing a CultureAwareComparer with .NET Framework 4.6+\" (#81)"}],"ResultType":"GitHubIssue"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1126254867708727296","CreatedAt":"2019-05-08T22:37:39+00:00","UserScreenname":"dotnet","Text":"Introducing the new https://t.co/YEWOJxOW2B.SqlClient #DOTNET #dotnetcore #build2019\nhttps://t.co/JhNYQ1GDni https://t.co/44c9wGLwsC","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":138,"FavoriteCount":69,"RawContent":null},{"Id":"1126254256850231296","CreatedAt":"2019-05-08T22:35:14+00:00","UserScreenname":"dotnet","Text":"Announcing Entity Framework 6.3 Preview with .NET Core Support #dotnetcore #entityframework #DOTNET… https://t.co/9jFIJBJRB4","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":99,"FavoriteCount":43,"RawContent":null},{"Id":"1125533180725907458","CreatedAt":"2019-05-06T22:49:56+00:00","UserScreenname":"dotnet","Text":".NET Core is the Future of .NET #dotnetcore #build2019\nhttps://t.co/43Zpcfa4Px https://t.co/496vlRtRSJ","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":220,"FavoriteCount":108,"RawContent":null},{"Id":"1125481613435949057","CreatedAt":"2019-05-06T19:25:01+00:00","UserScreenname":"dotnet","Text":"Announcing ML .NET 1.0 #machinelearning #dotnet https://t.co/bZa9t3UnNq #build2019 https://t.co/noiQ59ZcnO","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":211,"FavoriteCount":131,"RawContent":null},{"Id":"1125434436114194432","CreatedAt":"2019-05-06T16:17:33+00:00","UserScreenname":"dotnet","Text":"Introducing .NET 5, the next step in our journey that unifies the #dotnet platform https://t.co/OT6A0KkL0i… https://t.co/2ldeFp5lHB","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":863,"FavoriteCount":578,"RawContent":null},{"Id":"1125433519579119616","CreatedAt":"2019-05-06T16:13:55+00:00","UserScreenname":"dotnet","Text":"https://t.co/iOiV9qNspl Core updates in .NET Core 3.0 Preview 5! https://t.co/9DB6M3rxNn #build2019 https://t.co/zLbcHvIN5P","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":72,"FavoriteCount":52,"RawContent":null},{"Id":"1125433224316899328","CreatedAt":"2019-05-06T16:12:44+00:00","UserScreenname":"dotnet","Text":"Announcing .NET Core 3.0 Preview 5 https://t.co/1lswthCaj1","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":199,"FavoriteCount":101,"RawContent":null},{"Id":"1125433206289756160","CreatedAt":"2019-05-06T16:12:40+00:00","UserScreenname":"dotnet","Text":".NET Core 3.0 Preview 5 now available! This #dotnetcore preview release includes new features, stability and improv… https://t.co/EbXcvuDPYI","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":133,"FavoriteCount":73,"RawContent":null},{"Id":"1125433039163539456","CreatedAt":"2019-05-06T16:12:00+00:00","UserScreenname":"dotnet","Text":"Introducing .NET 5 https://t.co/OT6A0KkL0i","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":1596,"FavoriteCount":1038,"RawContent":null}]}},"RunOn":"2019-05-14T05:30:31.4844457Z","RunDurationInMilliseconds":9837}