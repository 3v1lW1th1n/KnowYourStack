{"Data":{"GitHub":{"Issues":[{"Id":"406626311","IsPullRequest":true,"CreatedAt":"2019-02-05T04:35:08","Actor":"zeahmed","Number":"2416","RawContent":null,"Title":"ValueMapper: added more tests with 'TestEstimatorCore' and fixed a bug in ValueType.","State":"open","Body":"This PR fixes #2412 and #2410.\r\n\r\n1. Added tests to check schema propagation in `ValueMapperEstimator` and `ValueMapperTransformer` with `TestEstimatorCore`.\r\n2. Fixed a bug that was causing an exception when `ValueMapperEstimator.GetOutputSchema` is called; given that ValueType is a vector.\r\n3. Properly returning output schema based on whether the ValueType  is fixed length or variable length vector.\r\n","Url":"https://github.com/dotnet/machinelearning/pull/2416","RelatedDescription":"Open PR \"ValueMapper: added more tests with 'TestEstimatorCore' and fixed a bug in ValueType.\" (#2416)"},{"Id":"406610414","IsPullRequest":false,"CreatedAt":"2019-02-05T02:56:09","Actor":"TomFinley","Number":"2415","RawContent":null,"Title":"BestFriend on public members ought to complain","State":"open","Body":"We have the best friend attribute introduced in #1520, which is great, but sometimes I or someone makes a mistake and puts it on a public class. This is harmless, has no visible effects, but is just a bit odd and definitely not intended usage.\r\n\r\nAt least for me, the procedure is this: I make something `public` become `[BestFriend] internal`, but then I realize something is a bit more complicated than I thought, and I decide to delay that *specific* internalization work until some other conditions are met. (E.g., in #2404, I internalized `IPredictorProducing`, but then realized that the problems with calibrators represented a hard barrier, so I wrote #2378 to capture those difficulties, and changed it back to public, until that is resolved.) The trouble is sometimes I leave the `[BestFriend]` behind. This has happened multiple times.\r\n\r\nIt might be nice, though hardly essential, to have `[BestFriend]` itself be analyzed to see that any usage of it is not applied to any publicly accessible thing. This is not actually essential per se, it's just a code cleanliness type of thing.\r\n\r\nThis hypothetical work would go in `Microsoft.ML.InternalCodeAnalyzer`.","Url":"https://github.com/dotnet/machinelearning/issues/2415","RelatedDescription":"Open issue \"BestFriend on public members ought to complain\" (#2415)"},{"Id":"406608841","IsPullRequest":true,"CreatedAt":"2019-02-05T02:46:36","Actor":"shauheen","Number":"2414","RawContent":null,"Title":"Add release notes for ML.NET 0.10","State":"open","Body":"Adding release notes for 0.10","Url":"https://github.com/dotnet/machinelearning/pull/2414","RelatedDescription":"Open PR \"Add release notes for ML.NET 0.10\" (#2414)"},{"Id":"406608701","IsPullRequest":false,"CreatedAt":"2019-02-05T02:45:52","Actor":"zeahmed","Number":"2413","RawContent":null,"Title":"TensorFlowTransformer: Passing constant value to the model","State":"open","Body":"There should be a way to pass constant values to the TensorFlow model because there are cases when model requires an input which is constant regardless of the input feature vector.\r\n\r\nFor example, the [Batch Normalization](https://www.tensorflow.org/api_docs/python/tf/layers/batch_normalization) in TensorFlow requires a paramter called `training` which is set to `True` during training and `False` during inference. This variable is often set through as a `Placeholder` variable which is taken as input at runtime. \r\n\r\nWhen using such a model for inference in `TensorFlowTransformer`, we need to always pass `False` for this variable or always set it to `True` when training.","Url":"https://github.com/dotnet/machinelearning/issues/2413","RelatedDescription":"Open issue \"TensorFlowTransformer: Passing constant value to the model\" (#2413)"},{"Id":"406162918","IsPullRequest":false,"CreatedAt":"2019-02-05T02:25:53","Actor":"El-Potato-Slayer","Number":"2396","RawContent":null,"Title":"ReadFromEnumerable and CreateEnumerable not working","State":"closed","Body":"### System information\r\n\r\n- **Windows 10**:\r\n- **.NET Core 2.2 and ML.NET v0.9.0**: \r\n\r\n### Issue\r\n\r\n- I tried to recreate the spike detector sample, but encountered issues for the 2 methods.\r\n- `DataOperations does not contain a definition for ReadFromEnumerable` and `MLContext does not contain a definition for CreateEnumerable` were the errors I got.\r\n- I didn't expect any errors to pop up. I did a copy and paste of the namespaces and code, in case I missed something.\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/master/docs/samples/Microsoft.ML.Samples/Dynamic/SsaSpikeDetectorTransform.cs\r\n","Url":"https://github.com/dotnet/machinelearning/issues/2396","RelatedDescription":"Closed issue \"ReadFromEnumerable and CreateEnumerable not working\" (#2396)"},{"Id":"406590476","IsPullRequest":false,"CreatedAt":"2019-02-05T01:14:41","Actor":"zeahmed","Number":"2412","RawContent":null,"Title":"ValueMapper: Output Schema is not vector when Value type is vector.","State":"open","Body":"This is the bug similar to #2385. \r\n\r\nWhen value type of the dictionary/map is a vector the output is vector. However, the ValueMappingEstimator GetOutputSchema fails at the following line\r\nhttps://github.com/dotnet/machinelearning/blob/1706b3cfbf838ddd9c5e5a8eba80c4f1d2fd1aec/src/Microsoft.ML.Core/Data/IEstimator.cs#L67\r\n\r\nCC: @singlis ","Url":"https://github.com/dotnet/machinelearning/issues/2412","RelatedDescription":"Open issue \"ValueMapper: Output Schema is not vector when Value type is vector.\" (#2412)"},{"Id":"406481989","IsPullRequest":true,"CreatedAt":"2019-02-05T00:47:55","Actor":"rogancarr","Number":"2405","RawContent":null,"Title":"Add samples and update docs for RangeFilter APIs","State":"closed","Body":"This PR adds a sample for `FilterByColumn` and `FilterByKeyColumnFraction` and updates their docs.\r\n\r\nFixes #2398\r\n","Url":"https://github.com/dotnet/machinelearning/pull/2405","RelatedDescription":"Closed or merged PR \"Add samples and update docs for RangeFilter APIs\" (#2405)"},{"Id":"406433722","IsPullRequest":false,"CreatedAt":"2019-02-05T00:47:55","Actor":"rogancarr","Number":"2398","RawContent":null,"Title":"RangeFilter has no samples","State":"closed","Body":"The RangeFilter has no sample to show how to use it. I would like to see a sample and links to the sample from the catalog entries.","Url":"https://github.com/dotnet/machinelearning/issues/2398","RelatedDescription":"Closed issue \"RangeFilter has no samples\" (#2398)"},{"Id":"406583570","IsPullRequest":true,"CreatedAt":"2019-02-05T00:43:35","Actor":"Anipik","Number":"2411","RawContent":null,"Title":"ResNet Tests corrected for netfx","State":"open","Body":"Fixes https://github.com/dotnet/machinelearning/issues/2373\r\n\r\nThe behavior of GetExecutingAssembly is different on netFramework. It return a temp path on .netFramework\r\n\r\nThis problem also occurred while enabling tests for netfx.\r\n","Url":"https://github.com/dotnet/machinelearning/pull/2411","RelatedDescription":"Open PR \"ResNet Tests corrected for netfx\" (#2411)"},{"Id":"406566572","IsPullRequest":false,"CreatedAt":"2019-02-04T23:29:39","Actor":"zeahmed","Number":"2410","RawContent":null,"Title":"ValueMapping: Write test for schema propagation for all types of inputs.","State":"open","Body":"There is a ValueMapping test that test for the schema propagation for `ValueMapperEstimator` and `ValueMapperTransformer`\r\nhttps://github.com/dotnet/machinelearning/blob/2dfc51aa7172199c1b2145e48ecb9eb855bb87f1/test/Microsoft.ML.Tests/Transformers/ValueMappingTests.cs#L506\r\n\r\nThis test is not complete in a sense that it does not test all the possible inputs that can be provided to `ValueMapperEstimator`. It should test the ValueMapperEstimator on all possible data type the estimator can take as input and on all possible maps types.  \r\n\r\nCC: @artidoro, @singlis ","Url":"https://github.com/dotnet/machinelearning/issues/2410","RelatedDescription":"Open issue \"ValueMapping: Write test for schema propagation for all types of inputs.\" (#2410)"},{"Id":"406565003","IsPullRequest":true,"CreatedAt":"2019-02-04T23:23:39","Actor":"Anipik","Number":"2409","RawContent":null,"Title":"Fix loading type problem for netfx","State":"open","Body":"Fixes https://github.com/dotnet/machinelearning/issues/2104\r\n\r\nA couple of types doesn't get loaded properly by Maml commands on netfx. So we have to register them manually.\r\nWe are doing a similar things for maml commands in our benchmarks.\r\nThese tests fail on netfx and are being enabled in https://github.com/dotnet/machinelearning/pull/2402\r\n","Url":"https://github.com/dotnet/machinelearning/pull/2409","RelatedDescription":"Open PR \"Fix loading type problem for netfx\" (#2409)"},{"Id":"406109831","IsPullRequest":true,"CreatedAt":"2019-02-04T22:10:50","Actor":"abgoswam","Number":"2392","RawContent":null,"Title":"Fix naming of Options argument in  TensorFlowTransform API","State":"closed","Body":"Fixes #2391 \r\n\r\n- Renamed `Options` argument of the TensorFlowTransform API to `options`\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/2392","RelatedDescription":"Closed or merged PR \"Fix naming of Options argument in  TensorFlowTransform API\" (#2392)"},{"Id":"406109060","IsPullRequest":false,"CreatedAt":"2019-02-04T22:10:50","Actor":"abgoswam","Number":"2391","RawContent":null,"Title":"Incorrect naming of Options argument in TensorFlowTransform public api","State":"closed","Body":"In PR : #2312  we modified the public surface of the TensorFlowTransform  as per issue #1798 #2280 \r\n\r\nThere is a bug - we did not rename the 'args' parameter. It should be 'options'  (else it breaks consistency with rest of public surface)\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/5b98e0cd4cdd150029fddf3c33c6c6bd71abb119/src/Microsoft.ML.TensorFlow/TensorflowCatalog.cs#L53-L54\r\n\r\n@ganik \r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/2391","RelatedDescription":"Closed issue \"Incorrect naming of Options argument in TensorFlowTransform public api\" (#2391)"},{"Id":"406527317","IsPullRequest":true,"CreatedAt":"2019-02-04T21:41:06","Actor":"CESARDELATORRE","Number":"2408","RawContent":null,"Title":"Add release notes for ML.NET 0.10","State":"closed","Body":"This adds release notes for 0.10.\r\nPlease, review and provide additional topics to be highlighted for 0.10, changes in the current topics or even suggest to remove any topic if it is not relevant enough.\r\n\r\nThanks,","Url":"https://github.com/dotnet/machinelearning/pull/2408","RelatedDescription":"Closed or merged PR \"Add release notes for ML.NET 0.10\" (#2408)"},{"Id":"406514472","IsPullRequest":false,"CreatedAt":"2019-02-04T20:53:02","Actor":"PeterPann23","Number":"2407","RawContent":null,"Title":"OnlineGradientDescent throws exception","State":"open","Body":"### System information\r\n- Microsoft Windows Pro version 10.0.17763, 64GB RAM, I7-7700K 4 physical cores 4.2 GHz, 2x 250 GB M2 Drives, AMD FirePro W5100 with 4096 MB/930 MHz\r\n- .Net Version 4.72, Microsoft.ML 0.9.0 Wednesday, January 9, 2019 (1/9/2019) \r\n- Dataset 3,378,393 rows\r\n\r\n### Issue\r\nWhat did I do\r\n- Comparing the prediction accuracy using\r\n1. same data source \r\n2. same normalisation \r\n3. with different trainers\r\n\r\nI configured the estimator chain like so:\r\n```\r\nvar dataProcessPipeline = mlContext.Transforms.CopyColumns(\"predictField\", \"Label\")\r\n.Append(mlContext.Transforms.Normalize(inputName: \"SH1\", mode: NormalizingEstimator.NormalizerMode.MeanVariance))\r\n.Append(mlContext.Transforms.Normalize(inputName: \"SL1\", mode: NormalizingEstimator.NormalizerMode.MeanVariance))\r\n… 665 more\r\n.Append(mlContext.Transforms.Normalize(inputName: \"SH9\", mode: NormalizingEstimator.NormalizerMode.MeanVariance))\r\n.Append(mlContext.Transforms.Concatenate(\"Features\",\"SH1\",...\"SH9\"));\r\ndataProcessPipeline.AppendCacheCheckpoint(mlContext);\r\n```\r\nPreviously I had 119 data points in the model and had no error.\r\n\r\nI test the models based on the parameter telling it what network to learn, the item causing the error is this\r\n\r\n```\r\nelse if (Definition.MachineLearningMethod == AI.ML.Factory.MachineLearningMethods.OnlineGradientDescent)\r\n                    {\r\n                        var trainer = mlContext.Regression.Trainers.OnlineGradientDescent(labelColumn: \"Label\"\r\n                                                                                        , featureColumn: \"Features\"\r\n                                                                                        , advancedSettings: a =>\r\n                                                                                        {                                                                                            \r\n                                                                                            a.DecreaseLearningRate = true;\r\n                                                                                            a.DoLazyUpdates = true;\r\n                                                                                            a.NormalizeFeatures = NormalizeOption.Yes;                                                                                           \r\n                                                                                            a.DecreaseLearningRate = true;\r\n                                                                                            a.Caching = Microsoft.ML.EntryPoints.CachingOptions.Memory;                                                                                            \r\n                                                                                        }\r\n                                                                                        );\r\n                       var trainingPipeline = dataProcessPipeline.Append(trainer);\r\n                       return trainingPipeline.Fit(trainingDataView);\r\n```\r\n\r\n\r\n\r\n\r\n- **What happened?**\r\nAfter I call Fit on my Training Data view I see following errors\r\nException thrown: 'System.InvalidOperationException' in Microsoft.ML.StandardLearners.dll\r\nthen\r\nException OnlineGradientDescent:The weights/bias contain invalid values (NaN or Infinite). Potential causes: high learning rates, no normalization, high initial weights, etc\r\n\r\nafter, I think, the .net framework throws an error in my running  test (no debugger attached)\r\n> Managed Debugging Assistant 'ContextSwitchDeadlock' \r\n> The CLR has been unable to transition from COM context 0x248b5058 to COM context 0x248b5180 for 60 seconds. The thread that owns the destination context/apartment is most likely either doing a non pumping wait or processing a very long running operation without pumping Windows messages. This situation generally has a negative performance impact and may even lead to the application becoming non responsive or memory usage accumulating continually over time. To avoid this problem, all single threaded apartment (STA) threads should use pumping wait primitives (such as CoWaitForMultipleHandles) and routinely pump messages during long running operations.\r\n\r\n\r\n\r\n\r\n\r\n- **What did you expect?**\r\nHaving been able to run the network without any of the advanced using a smaller dataset and receiving the error I added the Advanced settings hoping to be able to solve the issue. this however is not the case. \r\n\r\n### Source code / logs\r\n:\r\n\r\n_[Source=NormalizingEstimator; RowToRowMapperTransform; Cursor, Kind=Trace] Channel finished. Elapsed 00:04:53.5139276.\r\n[Source=NormalizingEstimator; RowToRowMapperTransform; Cursor, Kind=Trace] Channel disposed\r\n[Source=ColumnConcatenatingEstimator ; RowToRowMapperTransform; Cursor, Kind=Trace] Channel finished. Elapsed 00:04:53.4765765.\r\n[Source=ColumnConcatenatingEstimator ; RowToRowMapperTransform; Cursor, Kind=Trace] Channel disposed\r\n[Source=ColumnConcatenatingEstimator ; RowToRowMapperTransform; Cursor, Kind=Trace] Channel finished. Elapsed 00:04:53.4197884.\r\n[Source=ColumnConcatenatingEstimator ; RowToRowMapperTransform; Cursor, Kind=Trace] Channel disposed\r\n[Source=Stochastic Gradient Descent (Regression); Training, Kind=Trace] 2/4/2019 2:59:47 PM Finished training iteration 1; iterated over 3412517 examples.\r\n[Source=Stochastic Gradient Descent (Regression); Training, Kind=Trace] Channel finished. Elapsed 00:04:56.6368673.\r\n[Source=Stochastic Gradient Descent (Regression); Training, Kind=Trace] Channel disposed\r\n\r\nException OnlineGradientDescent:The weights/bias contain invalid values (NaN or Infinite). Potential causes: high learning rates, no normalization, high initial weights, etc.\r\nException:The weights/bias contain invalid values (NaN or Infinite). Potential causes: high learning rates, no normalization, high initial weights, etc.\r\ntesthost.exe Error: 0 : The weights/bias contain invalid values (NaN or Infinite). Potential causes: high learning rates, no normalization, high initial weights, etc._\r\n\r\n\r\nfull log is attached\r\n[Learning exception.zip](https://github.com/dotnet/machinelearning/files/2829739/Learning.exception.zip)\r\n","Url":"https://github.com/dotnet/machinelearning/issues/2407","RelatedDescription":"Open issue \"OnlineGradientDescent throws exception\" (#2407)"},{"Id":"406497634","IsPullRequest":true,"CreatedAt":"2019-02-04T20:07:55","Actor":"rogancarr","Number":"2406","RawContent":null,"Title":"Add a sample for the Cache command","State":"open","Body":"This PR adds a sample for the Cache command and updates the xml docs for the Cache catalog entry.\r\n\r\nFixes #2399 ","Url":"https://github.com/dotnet/machinelearning/pull/2406","RelatedDescription":"Open PR \"Add a sample for the Cache command\" (#2406)"},{"Id":"406469835","IsPullRequest":true,"CreatedAt":"2019-02-04T18:55:48","Actor":"TomFinley","Number":"2404","RawContent":null,"Title":"Begin hiding the IPredictorProducing","State":"open","Body":"Towards but not quite finishing #2251. Why not finish? At issue is that we must resolve #2378 in some fashion (TBD) before we continue, but as it is I think this is a move in the right direction. The public surface using this interface has now been reduced considerably, but of course not quite completely eliminated. So this is *not* a work in progress, but I didn't want to leave such a big change lying around.\r\n\r\nFirst commit internalizes the (less used) `IDistPredictorProducing`, while the second does some but not all of the work of internalizing `IPredictorProducing`.","Url":"https://github.com/dotnet/machinelearning/pull/2404","RelatedDescription":"Open PR \"Begin hiding the IPredictorProducing\" (#2404)"},{"Id":"406468153","IsPullRequest":false,"CreatedAt":"2019-02-04T18:51:18","Actor":"CESARDELATORRE","Number":"2403","RawContent":null,"Title":"Segregate \"scoring\" ML.NET components/NuGet packages so the scoring components evolve autonomously from the rest of ML.NET","State":"open","Body":"Segregate \"scoring\" ML.NET components/NuGet packages so the scoring components evolve autonomously from the rest of ML.NET.\r\n\r\nThis will be a breaking change, although easy to fix in the apps when having the breaking changes.\r\n\r\nIf we segregate the scoring area of ML,NET, that would help when providing support to:\r\n- UWP\r\n- Unity\r\n- ARM\r\n\r\nSo initially, only the \"scoring\" area of ML.NET could be supported in those environments. It would be less expensive than providing support to UWP, Unity and ARM to the whole ML.NET.\r\nAnd in most scenarios, for those environments, the customer just want to score a model, not to train a model in an UWP app, Unity app or ARM app (Xamarin mobile app or IoT).\r\n\r\nRelated issues:\r\nhttps://github.com/dotnet/machinelearning/issues/1886\r\nhttps://github.com/dotnet/machinelearning/issues/1736\r\nhttps://github.com/dotnet/machinelearning/issues/22\r\nhttps://github.com/dotnet/machinelearning/issues/2252\r\nhttps://xamlbrewer.wordpress.com/2019/01/25/machine-learning-with-ml-net-in-uwp-clustering/\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/2403","RelatedDescription":"Open issue \"Segregate \"scoring\" ML.NET components/NuGet packages so the scoring components evolve autonomously from the rest of ML.NET\" (#2403)"},{"Id":"406441353","IsPullRequest":true,"CreatedAt":"2019-02-04T17:39:12","Actor":"mareklinka","Number":"2402","RawContent":null,"Title":"Replace ConditionalFact usages with custom facts","State":"open","Body":"As proposed in #1220, this PR replaces all usages of `ConditionalFact` in tests with custom-tailored, environment-specific facts.\r\n\r\nThese specific facts all inherit from a single base `EnvironmentSpecificFactAttribute`. Several of the facts check the same condition (e.g. TensorFlow, Onnx, and X64 - they all simply check for X64 process) but I decided not to merge them - they might check the same thing now but I expect they might branch out later on. I consider the small duplication of code not worth the mental overhead of inheritance or composition here.\r\n\r\nTogether with this I also removed some now-obsolete checking of platform in Onnx-related tests (they were all Windows-only anyway) and removed the old `OnnxFact`.","Url":"https://github.com/dotnet/machinelearning/pull/2402","RelatedDescription":"Open PR \"Replace ConditionalFact usages with custom facts\" (#2402)"},{"Id":"406437068","IsPullRequest":false,"CreatedAt":"2019-02-04T17:28:14","Actor":"rogancarr","Number":"2401","RawContent":null,"Title":"Take / Skip / TakeAndSkip Filters don't have catalog entries","State":"open","Body":"The `Take`, `Skip`, and `TakeAndSkip` commands are not in the the catalog. For 1.0, we need to have them in the catalog, with samples linked from the catalog xml docs. We can add these just like the `BootstrapSample` and `RangeFilter`.","Url":"https://github.com/dotnet/machinelearning/issues/2401","RelatedDescription":"Open issue \"Take / Skip / TakeAndSkip Filters don't have catalog entries\" (#2401)"},{"Id":"406436370","IsPullRequest":false,"CreatedAt":"2019-02-04T17:26:32","Actor":"rogancarr","Number":"2400","RawContent":null,"Title":"NA Filter doesn't have a sample","State":"open","Body":"The `NAFilter` command doesn't have a sample and isn't in the catalog. For 1.0, we need to have it in the catalog, with a sample linked from the catalog xml docs.","Url":"https://github.com/dotnet/machinelearning/issues/2400","RelatedDescription":"Open issue \"NA Filter doesn't have a sample\" (#2400)"},{"Id":"406435554","IsPullRequest":false,"CreatedAt":"2019-02-04T17:24:33","Actor":"rogancarr","Number":"2399","RawContent":null,"Title":"Cache command doesn't have a sample","State":"open","Body":"The `Cache` command doesn't have a sample. For 1.0, we need to have a sample, with links from the catalog xml docs.","Url":"https://github.com/dotnet/machinelearning/issues/2399","RelatedDescription":"Open issue \"Cache command doesn't have a sample\" (#2399)"},{"Id":"406265489","IsPullRequest":false,"CreatedAt":"2019-02-04T10:31:47","Actor":"Dylan-Osborne","Number":"2397","RawContent":null,"Title":"Prediction function always returns the same value for regression models.","State":"open","Body":"### System information\r\n\r\n- **OS version/distro**: Windows 10 64-bit\r\n- **.NET Version (eg., dotnet --info)**: .NET Core 2.1\r\n\r\n### Issue\r\n\r\n- **What did you do?**\r\nI created a program that is meant to predict the likelihood of a device being on at a given time.\r\n- **What happened?**\r\nThe prediction function always returns the same value e.g. 0 or 1.\r\nIf the regression trainer is changed, the value that is returned by the prediction function changes to a different value. The value is always the same for each different trainer (e.g. Regression.Trainers.FastTree may always return 0 and another trainer will always return 1).\r\n- **What did you expect?**\r\nI expected the prediction function for to return different values representing the probability of the device being on.","Url":"https://github.com/dotnet/machinelearning/issues/2397","RelatedDescription":"Open issue \"Prediction function always returns the same value for regression models.\" (#2397)"},{"Id":"406135079","IsPullRequest":true,"CreatedAt":"2019-02-03T22:18:47","Actor":"Ivanidzo4ka","Number":"2395","RawContent":null,"Title":"Fix build","State":"closed","Body":"fix current build after merges","Url":"https://github.com/dotnet/machinelearning/pull/2395","RelatedDescription":"Closed or merged PR \"Fix build\" (#2395)"},{"Id":"406127430","IsPullRequest":true,"CreatedAt":"2019-02-03T20:31:30","Actor":"abgoswam","Number":"2394","RawContent":null,"Title":"Creation of components through MLContext and cleanup (text transform)","State":"open","Body":"Towards #1798 , #1758\r\n\r\nThe following transform estimators are being addressed:\r\n- TextFeaturizingEstimator\r\n\r\nNOTE:  \r\n- for fixing the **text transform** API we have to incorporate the  API patterns we followed for fixing the _learner estimators_  +  the patterns we are following for fixing the _transform estimators_ \r\n- This is because the text transform was using a Action<Settings> delegate  (like some of the _learner estimators_).  \r\n\r\nThe changes are as follows :\r\n\r\n1. Two `public` extension methods, one for simple arguments and the other for advanced options\r\n2. Internalize constructors of estimators and transformers \r\n3. Pass `Options` objects as arguments instead of `Action` delegate \r\n4. Rename `Settings` to `Options` \r\n5. Rename `Options` objects as options (instead of args or advancedSettings used so far)\r\n6. Internalize `Arguments` since the public constructor uses `Options`. Also a few other fields have been made `internal`\r\n \r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/2394","RelatedDescription":"Open PR \"Creation of components through MLContext and cleanup (text transform)\" (#2394)"},{"Id":"406115655","IsPullRequest":true,"CreatedAt":"2019-02-03T18:27:04","Actor":"abgoswam","Number":"2393","RawContent":null,"Title":"Creation of components through MLContext and cleanup (text related transforms)","State":"open","Body":"Towards #1798 , #1758, #1760\r\n\r\nThe following transform estimators are being addressed:\r\n- LatentDirichletAllocationEstimator\r\n- WordEmbeddingsExtractingEstimator\r\n- TokenizingByCharactersEstimator\r\n- WordTokenizingEstimator\r\n- WordBagEstimator\r\n- WordHashBagEstimator\r\n- NgramExtractingEstimator\r\n- NgramHashingEstimator\r\n- StopWordsRemovingEstimator\r\n- CustomStopWordsRemovingEstimator\r\n- TextNormalizingEstimator\r\n\r\nThe changes are as follows :\r\n1. Internalize constructors of estimators and transformers #1798\r\n2. Rename `Arguments` -> `Options` #1798\r\n3. Internalize `Options` when they are not used by public constructor. #1758 \r\n4. Rename `Options` objects as `options` (instead of `args` or `advancedSettings` used so far) #1798\r\n5. Move ColumnInfo to the estimators #1760\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/2393","RelatedDescription":"Open PR \"Creation of components through MLContext and cleanup (text related transforms)\" (#2393)"},{"Id":"406108470","IsPullRequest":true,"CreatedAt":"2019-02-03T17:06:36","Actor":"abgoswam","Number":"2390","RawContent":null,"Title":"Modify API for advanced settings (RandomizedPcaTrainer)","State":"open","Body":"Towards #1798 .\r\n\r\nThis PR addresses the following algos\r\n\r\n- RandomizedPcaTrainer\r\n\r\nThe following changes have been made:\r\n\r\n- Make constructors internal .\r\n- Rename Arguments to Options\r\n- Rename Options objects as options (instead of args or advancedSettings used so far)","Url":"https://github.com/dotnet/machinelearning/pull/2390","RelatedDescription":"Open PR \"Modify API for advanced settings (RandomizedPcaTrainer)\" (#2390)"},{"Id":"405993615","IsPullRequest":false,"CreatedAt":"2019-02-02T15:41:01","Actor":"kant2002","Number":"2389","RawContent":null,"Title":"Incorrect throwing during data loading","State":"open","Body":"### System information\r\n\r\n- Win10\r\n- .NET Core 2.1/3.0 Preview 2\r\n\r\n### Issue\r\n\r\nLet's say we do loading of data from CSV file using simple POCO class and forget to add `LoadColumn` attribute on the properties. Then call to `CreateTextLoader<T>/CreateTextReader<T>` fails with NullReferenceException\r\n\r\n```\r\nUnhandled Exception: System.NullReferenceException: Object reference not set to an instance of an object.\r\n   at Microsoft.ML.Data.TextLoader.CreateTextReader[TInput](IHostEnvironment host, Boolean hasHeader, Char separator, Boolean allowQuotedStrings, Boolean supportSparse, Boolean trimWhitespace)\r\n   at MLConsoleApp1.Program.Main(String[] args) in MLConsoleApp1\\Program.cs:line 54\r\n```\r\n\r\nwhich definitely not user friendly. I track down that to line https://github.com/dotnet/machinelearning/blob/master/src/Microsoft.ML.Data/DataLoadSave/Text/TextLoader.cs#L1344\r\n\r\nwhere you delegate assertion to IHostEnvironment since I running LocalEnvironment, I believe that by default when running in Local environment proper default behavior would be just throw. Right now I could not even imaging that such big usability mistake was made by MS, so I have to manually clone project and compile it locally to track down this error. \r\n\r\n\r\n### Source code / logs\r\n\r\n```\r\npublic class SentimentRow\r\n{\r\n    public bool Sentiment { get; set; }\r\n\r\n    public string SentimentText { get; set; }\r\n}\r\n...\r\nvar mlContext = new MLContext();\r\nvar reader = mlContext.Data.CreateTextLoader<SentimentRow>(hasHeader: true);\r\n```\r\n","Url":"https://github.com/dotnet/machinelearning/issues/2389","RelatedDescription":"Open issue \"Incorrect throwing during data loading\" (#2389)"},{"Id":"405989462","IsPullRequest":true,"CreatedAt":"2019-02-02T14:50:47","Actor":"kant2002","Number":"2388","RawContent":null,"Title":"Support buld using VS2019","State":"open","Body":"CMake shipped with VS does not support VS2019 yet, so run generator for VS 2017. It will still build using VS 2019\r\n\r\nCloses: #1967","Url":"https://github.com/dotnet/machinelearning/pull/2388","RelatedDescription":"Open PR \"Support buld using VS2019\" (#2388)"},{"Id":"405953114","IsPullRequest":true,"CreatedAt":"2019-02-02T06:13:34","Actor":"rogancarr","Number":"2387","RawContent":null,"Title":"Adding a catalog entry for the bootstrap sample","State":"open","Body":"This PR adds a catalog entry for the bootstrap sample and creates a sample demonstrating its use.\r\n\r\nFixes #2384 ","Url":"https://github.com/dotnet/machinelearning/pull/2387","RelatedDescription":"Open PR \"Adding a catalog entry for the bootstrap sample\" (#2387)"}],"ResultType":"GitHubIssue"}},"RunOn":"2019-02-05T05:30:51.3123612Z","RunDurationInMilliseconds":896}