{"Data":{"Blog":{"FeedItems":[{"Title":".NET Framework May 2018 Preview of Quality Rollup for Windows 10 April 2018 Update (version 1803)","PublishedOn":"2018-05-24T01:49:57+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, we are releasing the May 2018 Preview of Quality Rollup for Windows 10 April 2018 Update (version 1803). Quality and Reliability This release contains the following quality and reliability...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/05/23/net-framework-may-2018-preview-of-quality-rollup-for-windows-10-april-2018-update-version-1803/","RawContent":null},{"Title":".NET Framework May 2018 Preview of Quality Rollup for Windows 10 1709 (Fall Creators Update)","PublishedOn":"2018-05-21T22:44:05+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, we are releasing the May 2018 Preview of Quality Rollup for Windows 10 1709 (Fall Creators Update). Quality and Reliability This release contains the following quality and reliability...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/05/21/net-framework-may-2018-preview-of-quality-rollup-for-windows-10-1709-fall-creators-update/","RawContent":null},{"Title":".NET Framework May 2018 Preview of Quality Rollup for Windows 10","PublishedOn":"2018-05-17T17:20:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, we are releasing the May 2018 Preview of Quality Rollup for Windows 10 1703 (Creators Update) and Windows 10 1607 (Anniversary Update). Quality and Reliability This release contains the...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/05/17/net-framework-may-2018-preview-of-quality-rollup-for-windows-10/","RawContent":null},{"Title":".NET Framework May 2018 Preview of Quality Rollup","PublishedOn":"2018-05-15T18:10:24+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, we are releasing the May 2018 Preview of Quality Rollup. Quality and Reliability This release contains the following quality and reliability improvements. CLR Resolves an issue in...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/05/15/net-framework-may-2018-preview-of-quality-rollup/","RawContent":null},{"Title":".NET Core May 2018 Update","PublishedOn":"2018-05-08T22:31:30+00:00","CommentsCount":14,"FacebookCount":0,"Summary":"Today, we are releasing the .NET Core May 2018 Update. This update includes .NET Core 2.1.200 SDK and ASP.NET Core 2.0.8. Security Microsoft is releasing this security advisory to provide information...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/05/08/net-core-may-2018-update/","RawContent":null},{"Title":".NET Framework May 2018 Security and Quality Rollup","PublishedOn":"2018-05-08T21:18:17+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, we are releasing the May 2018 Security and Quality Rollup. Security CVE-2018-1039 – Windows Security Feature Bypass Vulnerability A security feature bypass vulnerability exists in Windows which...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/05/08/net-framework-may-2018-security-and-quality-rollup/","RawContent":null},{"Title":"F# language and tools update for Visual Studio 2017 version 15.7","PublishedOn":"2018-05-08T18:22:06+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"We’re excited to share updates about changes to F# and F# tools which shipped with the Visual Studio 2017 version 15.7 release. Let’s dive in! Type Providers now support .NET Standard For those who...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/05/08/f-language-and-tools-update-for-visual-studio-2017-version-15-7/","RawContent":null},{"Title":"Introducing ML.NET: Cross-platform, Proven and Open Source Machine Learning Framework","PublishedOn":"2018-05-08T00:41:28+00:00","CommentsCount":24,"FacebookCount":0,"Summary":"Today at //Build 2018, we are excited to announce the preview of ML.NET, a cross-platform, open source machine learning framework. ML.NET will allow .NET developers to develop their own models and...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/05/07/introducing-ml-net-cross-platform-proven-and-open-source-machine-learning-framework/","RawContent":null},{"Title":"Announcing Entity Framework Core 2.1 RC 1","PublishedOn":"2018-05-07T18:00:05+00:00","CommentsCount":15,"FacebookCount":0,"Summary":"Today, we are excited to announce that the first release candidate of EF Core 2.1 is available, alongside .NET Core 2.1 RC 1 and ASP.NET Core 2.1 RC 1, for broad testing, and now also for production...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/05/07/announcing-entity-framework-core-2-1-rc-1/","RawContent":null},{"Title":".NET Core 3 and Support for Windows Desktop Applications","PublishedOn":"2018-05-07T15:40:04+00:00","CommentsCount":289,"FacebookCount":0,"Summary":"At Microsoft Build Live today, we are sharing a first look at our plans for .NET Core 3. The highlight of .NET Core 3 is support for Windows desktop applications, specifically Windows Forms, Windows...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/05/07/net-core-3-and-support-for-windows-desktop-applications/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"7724991049","Type":"PullRequestEvent","CreatedAt":"2018-05-24T16:33:10","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/103","RelatedDescription":"Merged pull request \"Add ML.NET to readme\" (#103) at dotnet/home","RelatedBody":"cc @shauheen @jongalloway "},{"Id":"7724874671","Type":"PullRequestEvent","CreatedAt":"2018-05-24T16:12:32","Actor":"danmosemsft","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/103","RelatedDescription":"Opened pull request \"Add ML.NET to readme\" (#103) at dotnet/home","RelatedBody":"cc @shauheen @jongalloway "},{"Id":"7697543163","Type":"PullRequestEvent","CreatedAt":"2018-05-18T19:10:28","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/91","RelatedDescription":"Merged pull request \"Add NUnit to the .NET Foundation Projects\" (#91) at dotnet/home","RelatedBody":""},{"Id":"7697541521","Type":"PullRequestEvent","CreatedAt":"2018-05-18T19:10:06","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/92","RelatedDescription":"Merged pull request \"Remove contact email from system.drawing.md\" (#92) at dotnet/home","RelatedBody":"Contact email is outdated. Mono-project site's community section has better, more up-to-date information."},{"Id":"7697539314","Type":"PullRequestEvent","CreatedAt":"2018-05-18T19:09:35","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/93","RelatedDescription":"Merged pull request \"Add Humanizer\" (#93) at dotnet/home","RelatedBody":"Onboarding Humanizer: https://github.com/Humanizr/Humanizer/issues/682"},{"Id":"7697528376","Type":"PullRequestEvent","CreatedAt":"2018-05-18T19:07:09","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/94","RelatedDescription":"Merged pull request \"add SourceLink\" (#94) at dotnet/home","RelatedBody":"Adding SourceLink to the project list as per the checklist https://github.com/ctaggart/SourceLink/issues/138"},{"Id":"7697526900","Type":"PullRequestEvent","CreatedAt":"2018-05-18T19:06:48","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/95","RelatedDescription":"Merged pull request \"Fix broken logo URL\" (#95) at dotnet/home","RelatedBody":""},{"Id":"7697525283","Type":"PullRequestEvent","CreatedAt":"2018-05-18T19:06:25","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/96","RelatedDescription":"Merged pull request \"Adding DNN Platform.\" (#96) at dotnet/home","RelatedBody":""},{"Id":"7697523628","Type":"PullRequestEvent","CreatedAt":"2018-05-18T19:06:02","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/98","RelatedDescription":"Merged pull request \"Updates to reflect the latest information\" (#98) at dotnet/home","RelatedBody":""},{"Id":"7697521624","Type":"PullRequestEvent","CreatedAt":"2018-05-18T19:05:34","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/100","RelatedDescription":"Merged pull request \"Create mvvmcross.md\" (#100) at dotnet/home","RelatedBody":"Added MvvmCross as project as part of on-boarding.\r\n\r\nhttps://github.com/MvvmCross/MvvmCross/issues/2415"},{"Id":"7697519505","Type":"PullRequestEvent","CreatedAt":"2018-05-18T19:05:08","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/102","RelatedDescription":"Merged pull request \"Update projects.json adding MLNET\" (#102) at dotnet/home","RelatedBody":""},{"Id":"7697516495","Type":"PullRequestEvent","CreatedAt":"2018-05-18T19:04:23","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/101","RelatedDescription":"Merged pull request \"Create mlnet.md\" (#101) at dotnet/home","RelatedBody":""}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"7719029569","Type":"IssuesEvent","CreatedAt":"2018-05-23T18:04:46","Actor":"mlacouture","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/70","RelatedDescription":"Opened issue \"Introducing dotnet-svcutil\" (#70) at dotnet/announcements","RelatedBody":"# Introducing dotnet-svcutil\r\n\r\nThe Microsoft Windows Communication Foundation (WCF) **dotnet-svcutil** tool is a .NET Core CLI tool that retrieves metadata from a web service on a network location or from a WSDL file, and generates a WCF class containing client proxy methods that you can use to access the web service operations.\r\n\r\nSimilarly to the [Service Model Metadata - svcutil](https://docs.microsoft.com/en-us/dotnet/framework/wcf/servicemodel-metadata-utility-tool-svcutil-exe) tool for .NET Framework projects, the **dotnet-svcutil** is a command line tool for generating a web service reference compatible with .NET Core and .NET Standard projects. \r\n\r\nThe **dotnet-svcutil** tool is an alternative option to the [WCF Web Service Reference ](https://docs.microsoft.com/en-us/dotnet/core/additional-tools/wcf-web-service-reference-guide)Visual Studio connected service provider which first shipped with Visual Studio 2017 v15.5.  The **dotnet-svcutil** tool as a .NET Core CLI tool, however, can be run on multiple platforms like Linux and MacOS in addition to Windows.\r\n\r\n# Discussion\r\nPlease share your thoughts with us by commenting on GitHub issue dotnet/wcf#2894\r\n"},{"Id":"7660843516","Type":"IssuesEvent","CreatedAt":"2018-05-11T12:12:46","Actor":"Longvimol","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/69","RelatedDescription":"Opened issue \"Dotnet / announcement \" (#69) at dotnet/announcements","RelatedBody":"This repo doesn't accept issues. Please see README.md in the root for more details.\r\n"},{"Id":"7644965785","Type":"IssuesEvent","CreatedAt":"2018-05-08T17:03:40","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/67","RelatedDescription":"Opened issue \"Microsoft Security Advisory CVE-2018-0765: .NET Core Denial Of Service Vulnerability\" (#67) at dotnet/announcements","RelatedBody":"# Microsoft Security Advisory CVE-2018-0765: .NET Core Denial Of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core and .NET native version 2.0. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a denial of service vulnerability that exists when .NET Framework and .NET Core improperly process XML documents. An attacker who successfully exploited this vulnerability could cause a denial of service against a .NET Framework, .NET Core, or .NET native application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Framework, .NET Core, and .NET native applications handle XML document processing.\r\n\r\nIf your application is an ASP.NET Core application, developers are also advised to update to ASP.NET Core 2.0.8.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/Home/ **TBD**\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\n* If an application does not process signed XML, it is not affected by this vulnerability.\r\n* If your application targets .NET Core 1.x or .NET native 1.x, it is not affected as the vulnerable package is not available for these platforms.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core, .NET native, or ASP.NET Core based application that uses System.Security.Cryptography.Xml with a version of 4.4.1 or earlier.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ---------------- | -------------------------\r\nSystem.Security.Cryptography.Xml | ≤4.4.1 |  4.4.2 or later\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n.NET Core has two types of dependencies: direct and transitive. Direct dependencies are dependencies where you specifically add a package to your project, transitive dependencies occur when you add a package to your project that in turn relies on another package.\r\n\r\nFor example, the `Microsoft.AspNetCore.Mvc` package depends on the `Microsoft.AspNetCore.Mvc.Core` package. When you add a dependency on `Microsoft.AspNetCore.Mvc` in your project, you're taking a transitive dependency on `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\nAny application that has a direct or transitive dependency on the [affected package](#affected-software) can be exposed to the vulnerability if it does not meet any of the [mitigation factors](#mitigation-factors).\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n---\r\n\r\nIf you're targeting ASP.NET Core 2.0 and using the `Microsoft.AspNetCore.All` metapackage:\r\n\r\n* Update its version number to 2.0.8 to pull in updated packages that update their transitive dependencies to the fixed version of `System.Security.Cryptography.Xml`.\r\n\r\n---\r\n\r\n.NET Core projects have two types of dependencies: direct and transitive. You must update your projects using the following instructions to address both types of dependency.\r\n\r\n#### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your *csproj* file. They can be fixed by [editing the csproj file](#direct-dependencies) or using NuGet to update the dependency.\r\n\r\n#### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the *project.assets.json* file contained in the obj directory of your project.\r\n\r\nThe *project.assets.json* files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\n#### <a name=\"direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Security.Cryptography.Xml\" Version=\"4.4.1\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.Security.Cryptography.Xml` version 4.4.1.\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.Security.Cryptography.Xml` to a [fixed package number](#affected-software). Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Security.Cryptography.Xml\" Version=\"4.4.2\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\nAfter you've addressed all of your direct dependencies, you must review your transitive dependencies.\r\n\r\n#### Discovering and fixing transitive dependencies\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can [review the *project.assets.json* file](#project-assets-json).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio 2017, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a>Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `System.Security.Cryptography.Xml/4.4.0` is a reference to version 4.4.0 of `System.Security.Cryptography.Xml`.\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\n##### Fixing transitive dependencies\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.Security.Cryptography.Xml` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Security.Cryptography.Xml\" Version=\"4.4.2\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n#### Rebuilding your application\r\n\r\nFinally you must rebuild your application, test, and redeploy.\r\n\r\n---\r\n\r\nIf you're targeting .NET native for a Universal Windows Platform (UWP) application, you should update your dependencies and republish your application.\r\n\r\nIf you submit an application to the Windows Store with an outdated reference, the store will update the reference automatically, which has the potential for compatibility issues. Thus, we recommend updating your application directly and testing its functionality before resubmitting.\r\n\r\n---\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2018-0787](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-CVE-2018-0765)\r\n\r\n### Revisions\r\n\r\nV1.0 (May 8, 2018): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2018-05-08_"},{"Id":"7619224203","Type":"IssuesEvent","CreatedAt":"2018-05-02T20:28:55","Actor":"MichaelSimons","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/65","RelatedDescription":"Opened issue \".NET Framework Runtime and Builder Docker repos have merged \" (#65) at dotnet/announcements","RelatedBody":"# .NET Framework Runtime and Builder Docker repos have merged\r\n\r\nThe [microsoft/dotnet-framework-build](https://hub.docker.com/r/microsoft/dotnet-framework-build/) Docker Hub repo has been merged into the [microsoft/dotnet-framework](https://hub.docker.com/r/microsoft/dotnet-framework/) Docker Hub repo.  All new tags going forward will only be pushed to [microsoft/dotnet-framework](https://hub.docker.com/r/microsoft/dotnet-framework/).  The images in the [microsoft/dotnet-framework-build](https://hub.docker.com/r/microsoft/dotnet-framework-build/) Docker Hub repo will be retained and serviced accordingly as to not affect existing usage.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [Microsoft/dotnet-framework-docker #125](https://github.com/Microsoft/dotnet-framework-docker/issues/125)\r\n\r\n## Details\r\n\r\nThe [microsoft/dotnet-framework-build](https://hub.docker.com/r/microsoft/dotnet-framework-build/) Docker Hub repo has been merged into the [microsoft/dotnet-framework](https://hub.docker.com/r/microsoft/dotnet-framework/) Docker Hub repo.\r\n\r\n* https://github.com/Microsoft/dotnet-framework-docker/pull/123\r\n* https://github.com/Microsoft/dotnet-framework-docker/issues/78\r\n\r\nIn order to differentiate the runtime and build images, `runtime` and `sdk` distinguishing identifiers have been added to the tags.  For example, `4.7.2-runtime` and `4.7.2-sdk`.\r\n\r\nAll new tags going forward will only be pushed to [microsoft/dotnet-framework](https://hub.docker.com/r/microsoft/dotnet-framework/).   For example, the build images for 4.7.2 which was released today, only exist in [microsoft/dotnet-framework](https://hub.docker.com/r/microsoft/dotnet-framework/) repo.\r\n\r\nThe existing tags in [microsoft/dotnet-framework-build](https://hub.docker.com/r/microsoft/dotnet-framework-build/) will remain and be serviced accordingly.  For example, the stable tags such as `4.7.1-windowsservercore-1709` will continue to be patched on a monthly basis.\r\n\r\nWe recommend that as you create and maintain your code, you move to use the new `runtime` and `sdk` images from the [microsoft/dotnet-framework](https://hub.docker.com/r/microsoft/dotnet-framework/) repo.\r\n"},{"Id":"7545995438","Type":"IssuesEvent","CreatedAt":"2018-04-18T00:20:14","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/64","RelatedDescription":"Opened issue \"April 2018 .NET Updates\" (#64) at dotnet/announcements","RelatedBody":"# April 2018 .NET Updates\r\n\r\nThe following .NET updates were released this month. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Framework\r\n\r\n* No new releases. See: [.NET Framework February 2018 Security and Quality Rollup](https://blogs.msdn.microsoft.com/dotnet/2018/02/13/net-framework-february-2018-security-and-quality-rollup/).\r\n* [microsoft/dotnet-framework](https://hub.docker.com/r/microsoft/dotnet-framework/) and related Docker images were updated for [KB4093112](https://support.microsoft.com/help/4093112) and associated updates.\r\n\r\n## .NET Core\r\n\r\n* [.NET Core April 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/04/17/net-core-april-2018-update/)\r\n   * [2.0.7 Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.0/2.0.7.md)\r\n   * [1.1.8 Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.1/1.1.8.md)\r\n   * [1.0.11 Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.0/1.0.11.md)\r\n* [.NET Core 2.1 Preview 2](https://blogs.msdn.microsoft.com/dotnet/2018/04/11/announcing-net-core-2-1-preview-2/)\r\n* [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/) and related Docker images were updated for [KB4093112](https://support.microsoft.com/help/4093112) and associated updates.\r\n* Latest .NET Core security release: [.NET Core March 2018 Update](https://github.com/dotnet/core/issues/1341)\r\n\r\n## .NET for UWP\r\n\r\n* No new releases. See: [.NET for UWP January 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-for-uwp-january-2018-update/).\r\n\r\n## Previous Updates\r\n\r\n* [February 2018 Security and Quality Updates](https://github.com/dotnet/announcements/issues/59)"}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"7747371846","Type":"PullRequestEvent","CreatedAt":"2018-05-30T02:53:57","Actor":"stephentoub","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/18160","RelatedDescription":"Merged pull request \"Add sos DumpAsync command\" (#18160) at dotnet/coreclr","RelatedBody":"Debugging async methods with sos can be time consuming and relies on knowing how to use dumpheap, dumpvc, gcroot, and other commands to get the desired information, while often digging through a myriad of objects on the heap to find the desired info.\r\n\r\nThis commit adds a new DumpAsync command, which finds the async state machine objects on the GC heap and outputs relevant information about each, including the fields of its state machine, any registered continuation, and GC roots for the state machine object (as they often serve as a valid substitute for call stacks).\r\n\r\nExample program used as a test:\r\n```C#\r\nusing System.Threading.Tasks;\r\n\r\nclass Program\r\n{\r\n    static async Task Main() => await MethodA();\r\n    static async Task MethodA() => await MethodB();\r\n    static async Task MethodB() => await MethodC();\r\n    static async Task MethodC() => await MethodD();\r\n    static async Task MethodD() => await Task.Delay(int.MaxValue);\r\n}\r\n```\r\nand example command output:\r\n```\r\n0:011> !DumpAsync -type MethodD\r\n         Address               MT     Size Name\r\n#0\r\n000001989f413de0 00007ff88c506ba8      112  System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1+AsyncStateMachineBox`1[[System.Threading.Tasks.VoidTaskResult, System.Private.CoreLib],[Program+<MethodD>d__4, test]]\r\nStateMachine: Program+<MethodD>d__4 (struct)\r\n              MT    Field   Offset                 Type VT     Attr            Value Name\r\n00007ff8d3df4b80  400000d        0         System.Int32  1 instance                0 <>1__state\r\n00007ff8d3e082c0  400000e        8 ...TaskMethodBuilder  1 instance 000001989f413e38 <>t__builder\r\n00007ff8d3dfea90  400000f       10 ...vices.TaskAwaiter  1 instance 000001989f413e40 <>u__1\r\nContinuation: 000001989f413e50 (System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1+AsyncStateMachineBox`1[[System.Threading.Tasks.VoidTaskResult, System.Private.CoreLib],[Program+<MethodC>d__3, test]])\r\nGC roots:\r\n    Thread 2936c:\r\n        000000071a37e050 00007ff8d3ac1657 System.Threading.Tasks.Task.SpinThenBlockingWait(Int32, System.Threading.CancellationToken) [d:\\repos\\coreclr\\src\\System.Private.CoreLib\\src\\System\\Threading\\Tasks\\Task.cs @ 2977]\r\n            rbp+10: 000000071a37e0c0\r\n                ->  000001989f413fa0 System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1+AsyncStateMachineBox`1[[System.Threading.Tasks.VoidTaskResult, System.Private.CoreLib],[Program+<Main>d__0, test]]\r\n                ->  000001989f413f30 System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1+AsyncStateMachineBox`1[[System.Threading.Tasks.VoidTaskResult, System.Private.CoreLib],[Program+<MethodA>d__1, test]]\r\n                ->  000001989f413ec0 System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1+AsyncStateMachineBox`1[[System.Threading.Tasks.VoidTaskResult, System.Private.CoreLib],[Program+<MethodB>d__2, test]]\r\n                ->  000001989f413e50 System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1+AsyncStateMachineBox`1[[System.Threading.Tasks.VoidTaskResult, System.Private.CoreLib],[Program+<MethodC>d__3, test]]\r\n                ->  000001989f413de0 System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1+AsyncStateMachineBox`1[[System.Threading.Tasks.VoidTaskResult, System.Private.CoreLib],[Program+<MethodD>d__4, test]]\r\n\r\n    HandleTable:\r\n        000001989d8415f8 (pinned handle)\r\n        -> 00000198af3e1038 System.Object[]\r\n        -> 000001989f413410 System.Threading.TimerQueue[]\r\n        -> 000001989f413468 System.Threading.TimerQueue\r\n        -> 000001989f413330 System.Threading.TimerQueueTimer\r\n        -> 000001989f412e40 System.Threading.Tasks.Task+DelayPromise\r\n        -> 000001989f413de0 System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1+AsyncStateMachineBox`1[[System.Threading.Tasks.VoidTaskResult, System.Private.CoreLib],[Program+<MethodD>d__4, test]]\r\n\r\nFound 1 state machines.\r\n```\r\n\r\ncc: @jkotas, @janvorli, @mikem8361, @noahfalk, @danmosemsft "},{"Id":"7747071515","Type":"PullRequestEvent","CreatedAt":"2018-05-30T01:03:36","Actor":"vancem","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/18193","RelatedDescription":"Opened pull request \"Improve the labeling of .NET Threads.\" (#18193) at dotnet/coreclr","RelatedBody":"There was already some support for labeling threads using the Window SetThreadDescription API, however it was missing some important cases (like labeling the ThreadPool and GC server and Background threads).   Fix this.   Also make the naming consistant (they all start with .NET).\r\n\r\nThese names show up in PerfView traces and can be used by debuggers or other profilers as well.\r\n\r\n@Maoni0  @brianrob "},{"Id":"7746991423","Type":"IssuesEvent","CreatedAt":"2018-05-30T00:32:22","Actor":"CarolEidt","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/18192","RelatedDescription":"Opened issue \"Set GTF_RELOP_QMARK in gtNewQmarkNode\" (#18192) at dotnet/coreclr","RelatedBody":"Each caller of `gtNewQmarkNode()` sets `GTF_RELOP_QMARK` on the condition node.\r\nIt would be cleaner and more reliable to do that in `gtNewQmarkNode()` rather than at each call site."},{"Id":"7746991419","Type":"PullRequestEvent","CreatedAt":"2018-05-30T00:32:22","Actor":"BruceForstall","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/18191","RelatedDescription":"Opened pull request \"Remove unused defines\" (#18191) at dotnet/coreclr","RelatedBody":"More fallout from removing `LEGACY_BACKEND`."},{"Id":"7746943065","Type":"IssuesEvent","CreatedAt":"2018-05-30T00:13:37","Actor":"BruceForstall","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/18190","RelatedDescription":"Opened issue \"[arm64] Implement compRsvdRegCheck\" (#18190) at dotnet/coreclr","RelatedBody":"`Compiler::compRsvdRegCheck` always returns `true` for arm64, with this code:\r\n```\r\n#if defined(_TARGET_ARM64_)\r\n\r\n    // TODO-ARM64-CQ: update this!\r\n    JITDUMP(\" Returning true (ARM64)\\n\\n\");\r\n    return true; // just always assume we'll need it, for now\r\n\r\n#else  // _TARGET_ARM_\r\n```\r\n\r\nSo, the `REG_OPT_SRVD` register is always reserved.\r\n\r\nEither implement this function, and recover a register sometimes, or choose not to and remove the `TODO-ARM64-CQ`.\r\n"},{"Id":"7746942394","Type":"PullRequestEvent","CreatedAt":"2018-05-30T00:13:21","Actor":"dotnet-maestro-bot","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/18189","RelatedDescription":"Opened pull request \"Update BuildTools to preview1-02830-01 (master)\" (#18189) at dotnet/coreclr","RelatedBody":"/cc @dotnet/coreclr-auto-update-notify"},{"Id":"7746937163","Type":"PullRequestEvent","CreatedAt":"2018-05-30T00:11:18","Actor":"CarolEidt","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/18118","RelatedDescription":"Merged pull request \"[Arm64] Set compFloatingPointUsed for SIMD HWIntrincsics\" (#18118) at dotnet/coreclr","RelatedBody":""},{"Id":"7746934532","Type":"PullRequestEvent","CreatedAt":"2018-05-30T00:10:19","Actor":"noahfalk","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/18188","RelatedDescription":"Opened pull request \"Add instructions for making idl file changes\" (#18188) at dotnet/coreclr","RelatedBody":"@davmason - do these instructions look accurate? I think you were the last person to do this operation in the profiler space\r\n\r\ncc @bobuva @dotnet/dotnet-diag "},{"Id":"7746886016","Type":"IssuesEvent","CreatedAt":"2018-05-29T23:53:17","Actor":"BruceForstall","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/18187","RelatedDescription":"Opened issue \"[arm32,arm64] Stop setting EMIT_TRACK_STACK_DEPTH to 1\" (#18187) at dotnet/coreclr","RelatedBody":"In target.h:\r\n```\r\n#define EMIT_TRACK_STACK_DEPTH   1       // This is something of a workaround.  For both ARM and AMD64, the frame size is fixed, so we don't really\r\n                                           // need to track stack depth, but this is currently necessary to get GC information reported at call sites.\r\n```\r\n(the comment is wrong; it should say \"ARM64\" not \"AMD64\").\r\n\r\nIs this a \"workaround\" that can be fixed?"}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"7747105505","Type":"PullRequestEvent","CreatedAt":"2018-05-30T01:16:42","Actor":"mairaw","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/9364","RelatedDescription":"Opened pull request \"fix typo\" (#9364) at dotnet/cli","RelatedBody":""}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"7747333620","Type":"IssuesEvent","CreatedAt":"2018-05-30T02:40:10","Actor":"danmosemsft","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/759","RelatedDescription":"Closed issue \"Method not found: 'System.String Microsoft.VisualBasic.Strings.Left(System.String)'.'\" (#759) at dotnet/standard","RelatedBody":"Hello .NET Standard Team,\r\nI'm not sure the right way/place to ask this question but I'm hoping you can help me out or point me in the right direction.\r\n\r\nWe have a .Net core 2.0 webapi project and want to call a old vb.net method(no option or approval to rewrite). The method have some string functions like Left,right,space and trim . We added the DLL as a reference . But in runtime we are getting method not found exception.\r\n\r\n```\r\nMethod not found: 'System.String Microsoft.VisualBasic.Strings.Left(System.String)'.'\r\nMethod not found: 'System.String Microsoft.VisualBasic.Strings.Space(System.String)'.'\r\nMethod not found: 'System.String Microsoft.VisualBasic.Strings.Right(System.String)'.'\r\n```\r\n\r\n Even tried writting wrapper built on standard on top of VB.net DLL . Core2.0 webapi to wrapper built on standard from there to vb.net dll built on framework 4.6.2 no luck.\r\n\r\nPlease suggest need to goback from core to .netframework or is there any possibility to consume the vb.net dll without or minimal modification.\r\n\r\n\r\nhttps://github.com/csreehari/FxReferenceConsoleAppCore"},{"Id":"7747330278","Type":"PullRequestEvent","CreatedAt":"2018-05-30T02:38:53","Actor":"danmosemsft","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/761","RelatedDescription":"Merged pull request \"Update BuildTools to preview1-02830-02 (master)\" (#761) at dotnet/standard","RelatedBody":""},{"Id":"7745916164","Type":"PullRequestEvent","CreatedAt":"2018-05-29T19:55:25","Actor":"dotnet-maestro-bot","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/761","RelatedDescription":"Opened pull request \"Update BuildTools to preview1-02829-01 (master)\" (#761) at dotnet/standard","RelatedBody":""},{"Id":"7744028663","Type":"IssuesEvent","CreatedAt":"2018-05-29T14:23:56","Actor":"Barsonax","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/760","RelatedDescription":"Opened issue \"Unable to properly debug a netstandard project when starting a external executable\" (#760) at dotnet/standard","RelatedBody":"### Summary\r\n\r\nDebugging doesnt seem to work properly when you start a net framework exe from a netstandard project through the Debug Launch setting. Everything else seems to be working fine.\r\n\r\nWhen testing inside a game engine called duality I noticed this behavior. Latter on I found out that I can reproduce this in a separate project as well.\r\n\r\nSome background info: In duality you add functionality through plugins which currently are portable projects. We want to eventually change this to netstandard projects. Plugins themselves are not runnable but instead we run duality itself which will load all the plugins.\r\n\r\n### How to reproduce\r\n\r\n- Download and open the attached test project.\r\n- RebuildBuild the solution and start `ClassLibrary1`. This will actually start the exe generated by `NetStandardDebugTest`. Note that it will run properly.\r\n- Now set a breakpoint and run it again. Note that the break point will not work.\r\n- Now try to pause the execution. You will get a Unknown error 0x80004005\r\n\r\n### Attachments\r\n\r\n- [NetStandardDebugTest.zip](https://github.com/AdamsLair/duality/files/2048379/NetStandardDebugTest.zip)\r\n"},{"Id":"7741269132","Type":"IssuesEvent","CreatedAt":"2018-05-29T04:34:46","Actor":"amshekar","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/759","RelatedDescription":"Opened issue \"Method not found: 'System.String Microsoft.VisualBasic.Strings.Left(System.String)'.'\" (#759) at dotnet/standard","RelatedBody":"Hello .NET Standard Team,\r\nI'm not sure the right way/place to ask this question but I'm hoping you can help me out or point me in the right direction.\r\n\r\nWe have a .Net core 2.0 webapi project and want to call a old vb.net method(no option or approval to rewrite). The method have some string functions like Left,right,space and trim . We added the DLL as a reference . But in runtime we are getting method not found exception.\r\n\r\n```\r\nMethod not found: 'System.String Microsoft.VisualBasic.Strings.Left(System.String)'.'\r\nMethod not found: 'System.String Microsoft.VisualBasic.Strings.Space(System.String)'.'\r\nMethod not found: 'System.String Microsoft.VisualBasic.Strings.Right(System.String)'.'\r\n```\r\n\r\n Even tried writting wrapper built on standard on top of VB.net DLL . Core2.0 webapi to wrapper built on standard from there to vb.net dll built on framework 4.6.2 no luck.\r\n\r\nPlease suggest need to goback from core to .netframework or is there any possibility to consume the vb.net dll without or minimal modification.\r\n\r\n\r\nhttps://github.com/csreehari/FxReferenceConsoleAppCore"},{"Id":"7738175004","Type":"IssuesEvent","CreatedAt":"2018-05-28T10:58:04","Actor":"AmeetShinde","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/758","RelatedDescription":"Opened issue \"Not able to trim packages on RHEL 6 platform\" (#758) at dotnet/standard","RelatedBody":"We are using following version of Microsoft.Packaging.Tools.Trimming package with the 2.1.3_RC1 build of dotnet SDK on RHEL 6.7 platform\r\n\r\n<PackageReference Include=\"Microsoft.Packaging.Tools.Trimming\" Version=\"1.1.0-preview1-25818-01\" />\r\n\r\nWe get the following error on dotnet build command\r\n\r\n/home/SymantecDLP/.nuget/packages/microsoft.packaging.tools.trimming/1.1.0-preview1-25818-01/build/Microsoft.Packaging.Tools.Trimming.targets(55,5): error MSB4018: The \"TrimFiles\" task failed unexpectedly. [/home/SymantecDLP/Perforce/amit_shinde_RHEL67RHDT61DEV_8991/depot/main/dev/managed/src/OfficeOpenXMLContentExtractor/OfficeOpenXMLContentExtractor/OfficeOpenXMLContentExtractor.csproj]\r\n/home/SymantecDLP/.nuget/packages/microsoft.packaging.tools.trimming/1.1.0-preview1-25818-01/build/Microsoft.Packaging.Tools.Trimming.targets(55,5): error MSB4018: System.Exception: Root package Microsoft.NETCore.App was specified but was not found in PackageDependencies [/home/SymantecDLP/Perforce/amit_shinde_RHEL67RHDT61DEV_8991/depot/main/dev/managed/src/OfficeOpenXMLContentExtractor/OfficeOpenXMLContentExtractor/OfficeOpenXMLContentExtractor.csproj]\r\n/home/SymantecDLP/.nuget/packages/microsoft.packaging.tools.trimming/1.1.0-preview1-25818-01/build/Microsoft.Packaging.Tools.Trimming.targets(55,5): error MSB4018:    at Microsoft.DotNet.Build.Tasks.TrimFiles.GetPackageRoots(IDictionary`2 packages, Trimmable trimmable) [/home/SymantecDLP/Perforce/amit_shinde_RHEL67RHDT61DEV_8991/depot/main/dev/managed/src/OfficeOpenXMLContentExtractor/OfficeOpenXMLContentExtractor/OfficeOpenXMLContentExtractor.csproj]\r\n/home/SymantecDLP/.nuget/packages/microsoft.packaging.tools.trimming/1.1.0-preview1-25818-01/build/Microsoft.Packaging.Tools.Trimming.targets(55,5): error MSB4018:    at Microsoft.DotNet.Build.Tasks.TrimFiles.Execute() [/home/SymantecDLP/Perforce/amit_shinde_RHEL67RHDT61DEV_8991/depot/main/dev/managed/src/OfficeOpenXMLContentExtractor/OfficeOpenXMLContentExtractor/OfficeOpenXMLContentExtractor.csproj]\r\n/home/SymantecDLP/.nuget/packages/microsoft.packaging.tools.trimming/1.1.0-preview1-25818-01/build/Microsoft.Packaging.Tools.Trimming.targets(55,5): error MSB4018:    at Microsoft.Build.BackEnd.TaskExecutionHost.Microsoft.Build.BackEnd.ITaskExecutionHost.Execute() [/home/SymantecDLP/Perforce/amit_shinde_RHEL67RHDT61DEV_8991/depot/main/dev/managed/src/OfficeOpenXMLContentExtractor/OfficeOpenXMLContentExtractor/OfficeOpenXMLContentExtractor.csproj]\r\n/home/SymantecDLP/.nuget/packages/microsoft.packaging.tools.trimming/1.1.0-preview1-25818-01/build/Microsoft.Packaging.Tools.Trimming.targets(55,5): error MSB4018:    at Microsoft.Build.BackEnd.TaskBuilder.ExecuteInstantiatedTask(ITaskExecutionHost taskExecutionHost, TaskLoggingContext taskLoggingContext, TaskHost taskHost, ItemBucket bucket, TaskExecutionMode howToExecuteTask) [/home/SymantecDLP/Perforce/amit_shinde_RHEL67RHDT61DEV_8991/depot/main/dev/managed/src/OfficeOpenXMLContentExtractor/OfficeOpenXMLContentExtractor/OfficeOpenXMLContentExtractor.csproj]\r\n"},{"Id":"7736415324","Type":"IssuesEvent","CreatedAt":"2018-05-28T02:03:11","Actor":"briangmay85","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/757","RelatedDescription":"Closed issue \"s\" (#757) at dotnet/standard","RelatedBody":""},{"Id":"7736414563","Type":"IssuesEvent","CreatedAt":"2018-05-28T02:02:53","Actor":"briangmay85","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/757","RelatedDescription":"Opened issue \"s\" (#757) at dotnet/standard","RelatedBody":""}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"7747612633","Type":"PullRequestEvent","CreatedAt":"2018-05-30T04:28:43","Actor":"davidsh","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/29971","RelatedDescription":"Opened pull request \"Add HttpClient test for sending rewindable content stream\" (#29971) at dotnet/corefx","RelatedBody":"Issue #23782 was opened describing a behavior difference in Linux versus\r\nWindows regarding the final position of a stream after being sent. This\r\nturned out to be a behavior in CurlHandler that we decided to not fix.\r\n\r\nThis PR adds a test to document the behavior of resending a request body\r\ncontent object (now possible now since we no longer dispose request content\r\nafter send). This test is only validating the default HttpClientHandler\r\nwhich is SocketsHttpHandler now. It also matches .NET Framework behavior.\r\n\r\nCloses #23782"},{"Id":"7747274291","Type":"PullRequestEvent","CreatedAt":"2018-05-30T02:18:53","Actor":"danmosemsft","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/27251","RelatedDescription":"Merged pull request \"Null value in string array in DataRow causes DataRowComparer to throw NRE, but only if it is the first parameter\" (#27251) at dotnet/corefx","RelatedBody":"Use object.Equals() to compare array elements and avoid NRE"},{"Id":"7747186973","Type":"IssuesEvent","CreatedAt":"2018-05-30T01:47:18","Actor":"danmosemsft","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/29782","RelatedDescription":"Closed issue \"Can no longer get file attributes from exclusively locked files\" (#29782) at dotnet/corefx","RelatedBody":"### Problem ###\r\nIO.File.GetAttributes() doesn't return attributes for exclusively locked file like c:\\pagefile.sys\r\nIO.File.Exist() doesn't found such file (return false).\r\n\r\n### Repo on PowerShell ###\r\n```PowerShell\r\n#########\r\n[IO.File]::GetAttributes(\"c:\\pagefile.sys\")\r\n\r\nException calling \"GetAttributes\" with \"1\" argument(s): \"The process cannot access the file 'c:\\pagefile.sys' because it is being used by another process.\"\r\nAt line:1 char:1\r\n+ [IO.File]::GetAttributes(\"c:\\pagefile.sys\")\r\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n+ CategoryInfo          : NotSpecified: (:) [], MethodInvocationException\r\n+ FullyQualifiedErrorId : IOException\r\n\r\n\r\n$error[0].exception.InnerException | fl -Force\r\n\r\nMessage        : The process cannot access the file 'c:\\pagefile.sys' because it is being used by another process.\r\nData           : {}\r\nInnerException :\r\nTargetSite     : System.IO.FileAttributes GetAttributes(System.String)\r\nStackTrace     :    at System.IO.FileSystem.GetAttributes(String fullPath)\r\n                    at CallSite.Target(Closure , CallSite , Type , String )\r\nHelpLink       :\r\nSource         : System.IO.FileSystem\r\nHResult        : -2147024864\r\n\r\n\r\n#########\r\n[IO.File]::Exists(\"c:\\pagefile.sys\")\r\n\r\nfalse\r\n```\r\n\r\nIn PowerShell repo we have a workaround:\r\n1. https://github.com/PowerShell/PowerShell/blob/5cbf1b43de52fe9025bf756990b1cc6eb4e694e9/src/System.Management.Automation/namespaces/FileSystemProvider.cs#L6994-L7013\r\n2. https://github.com/PowerShell/PowerShell/blob/5cbf1b43de52fe9025bf756990b1cc6eb4e694e9/src/System.Management.Automation/engine/Utils.cs#L989-L1029\r\n\r\nWithout the workaround PowerShell doesn't show the file:\r\n```powershell\r\ndir c:\\pagefile.sys -Hidden\r\n```\r\nbut cmd.exe show the file:\r\n```\r\nC:\\Users\\sie>dir c:\\pagefile.sys /AH\r\n Volume in drive C has no label.\r\n Volume Serial Number is 824F-BBDF\r\n\r\n Directory of c:\\\r\n\r\n04/18/2018  10:48 AM    11,811,160,064 pagefile.sys\r\n               1 File(s) 11,811,160,064 bytes\r\n               0 Dir(s)  236,808,941,568 bytes free\r\n```\r\n### Suggestion ###\r\nI believe the issue should be fixed in CoreFX here\r\nhttps://github.com/dotnet/corefx/blob/f25eb288a449010574a6e95fe298f3ad880ada1e/src/System.IO.FileSystem/src/System/IO/FileSystem.Windows.cs#L203-L223\r\n\r\nERROR_SHARING_VIOLATION should be added.\r\n"},{"Id":"7747186267","Type":"PullRequestEvent","CreatedAt":"2018-05-30T01:47:03","Actor":"danmosemsft","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/29832","RelatedDescription":"Merged pull request \"[release/2.1] Port fix getting attributes for sharing violation files (#29790)\" (#29832) at dotnet/corefx","RelatedBody":"Ports #29790 to 2.1 for servicing (once open).\r\n\r\n* Fix getting attributes for sharing violation files\r\n\r\nSome files, such as the pagefile, refuse to allow you to get attributes directly.\r\nYou need to enumerate to get the attributes.\r\n\r\nEnumerating is expensive, so we had changed from an opt-out to an opt-in. As\r\nit took nearly a year to find this case, switching back to an opt-out with a\r\nlarger set of known cases where we get no value from trying again.\r\n\r\nAlso add an assert to flush out other error codes and scenarios.\r\n\r\n* Skip lock test on MacOS (not supported)\r\n\r\n* Nano was getting ERROR_NETWORK_UNREACHABLE"},{"Id":"7747117241","Type":"PullRequestEvent","CreatedAt":"2018-05-30T01:21:11","Actor":"joperezr","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/29970","RelatedDescription":"Opened pull request \"Removing uapVNext assets from individual packages\" (#29970) at dotnet/corefx","RelatedBody":"cc: @weshaggard @ericstj \r\n\r\nRemoving UAPvNext assets from packages."}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"7747745405","Type":"PullRequestEvent","CreatedAt":"2018-05-30T05:22:56","Actor":"jcouv","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/27054","RelatedDescription":"Merged pull request \"Add LanguageVersion.CSharp8\" (#27054) at dotnet/roslyn","RelatedBody":"I've brought `features/compiler` in sync with `master` (15.8 codebase) this morning.\r\nThis PR adds a LangVersion, so that other features can just re-use it.\r\n\r\nThis PR includes some updates to UpgradeProject tests. @sharwell @dotnet/roslyn-ide for review. Thanks"}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"7747340850","Type":"PullRequestEvent","CreatedAt":"2018-05-30T02:42:47","Actor":"A-And","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5865","RelatedDescription":"Opened pull request \"Correct Unix CI Command generation\" (#5865) at dotnet/corert","RelatedBody":"The logic in netci.groovy would not correctly generate the test running commands."},{"Id":"7746976178","Type":"PullRequestEvent","CreatedAt":"2018-05-30T00:26:34","Actor":"A-And","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5864","RelatedDescription":"Opened pull request \"Enable OSX and Linux CoreFX CI tests\" (#5864) at dotnet/corert","RelatedBody":"This only enables System.Collections, System.Threading and System.Threading.Tasks, which should be stable and not suffer from spurious failures. "},{"Id":"7746777791","Type":"PullRequestEvent","CreatedAt":"2018-05-29T23:17:31","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/pull/5859","RelatedDescription":"Closed pull request \"[JustForView] visualizing diff needed in corert for StackFrame to go to shared\" (#5859) at dotnet/corert","RelatedBody":"Related to PR dotnet/coreclr#18134 which moves common StackFrame logic to shared"},{"Id":"7746769850","Type":"PullRequestEvent","CreatedAt":"2018-05-29T23:14:57","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5863","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#5863) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7746315185","Type":"PullRequestEvent","CreatedAt":"2018-05-29T21:15:28","Actor":"Anipik","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5862","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#5862) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7746283635","Type":"PullRequestEvent","CreatedAt":"2018-05-29T21:08:43","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5862","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#5862) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7745019975","Type":"PullRequestEvent","CreatedAt":"2018-05-29T16:58:51","Actor":"A-And","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5860","RelatedDescription":"Merged pull request \"Staging Commit - Enable OSX and Linux CoreFX CI tests\" (#5860) at dotnet/corert","RelatedBody":"This is a staging commit for a limited set of CoreFX tests to be run on MacOS and Linux on every PR."},{"Id":"7740948764","Type":"PullRequestEvent","CreatedAt":"2018-05-29T02:13:11","Actor":"morganbr","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5861","RelatedDescription":"Opened pull request \"Switch back to SC_NPROCESSORS_ONLN for WebAssembly\" (#5861) at dotnet/corert","RelatedBody":"Switch back to SC_NPROCESSORS_ONLN for WebAssembly because SC_NPROCESSORS_CONF isn't implemented in Emscripten. Fixes an assert on startup."}],"ResultType":"GitHubEvent"},"SDK":{"Events":[],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"999498830528696320","CreatedAt":"2018-05-24T03:54:25+00:00","UserScreenname":"dotnet","Text":".NET Framework May 2018 Preview of Quality Rollup for Windows 10 April 2018 Update (version 1803) https://t.co/U6TCTrPkfb","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":24,"FavoriteCount":9,"RawContent":null},{"Id":"998698514065510400","CreatedAt":"2018-05-21T22:54:15+00:00","UserScreenname":"dotnet","Text":".NET Framework May 2018 Preview of Quality Rollup for Windows 10 1709 (Fall Creators Update) https://t.co/a0E1oZkvk2","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":31,"FavoriteCount":11,"RawContent":null}]}},"RunOn":"2018-05-30T05:30:22.5825662Z","RunDurationInMilliseconds":7484}