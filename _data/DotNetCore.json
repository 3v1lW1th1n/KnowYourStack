{"Data":{"Blog":{"FeedItems":[{"Title":"IL Linker — Help us build the best experience!","PublishedOn":"2018-07-11T16:44:27+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We are currently working on the IL Linker and would love to get your feedback. Please fill out the brief survey below and help shape the future of the IL Linker by telling us about your current...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/07/11/il-linker-help-us-build-the-best-experience/","RawContent":null},{"Title":".NET Framework 4.7.2 is available on Windows Update, WSUS and MU Catalog","PublishedOn":"2018-07-10T19:03:38+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"Today, we are happy to announce the Microsoft .NET Framework 4.7.2 is available on Windows Update, Windows Server Update Services (WSUS) and Microsoft Update (MU) Catalog. This release includes...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/07/10/net-framework-4-7-2-is-available-on-windows-update-wsus-and-mu-catalog/","RawContent":null},{"Title":".NET Core July 2018 Update","PublishedOn":"2018-07-10T17:50:29+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"Today, we are releasing the .NET Core July 2018 Update. This update includes .NET Core 1.0.12, .NET Core 1.1.9, .NET Core 2.0.9 and .NET Core 2.1.2. Security .NET Core Security Feature Bypass...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/07/10/net-core-july-2018-update/","RawContent":null},{"Title":"Announcing ML.NET 0.3","PublishedOn":"2018-07-09T18:30:19+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"Two months ago, at //Build 2018, we released ML.NET 0.1, a cross-platform, open source machine learning framework for .NET developers. We’ve gotten great feedback so far and would like to thank the...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/07/09/announcing-ml-net-0-3/","RawContent":null},{"Title":"System.IO.Pipelines: High performance IO in .NET","PublishedOn":"2018-07-09T16:02:10+00:00","CommentsCount":17,"FacebookCount":0,"Summary":"System.IO.Pipelines is a new library that is designed to make it easier to do high performance IO in .NET. It&#8217;s a library targeting .NET Standard that works on all .NET implementations....","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/07/09/system-io-pipelines-high-performance-io-in-net/","RawContent":null},{"Title":".NET Core 2.1 June Update","PublishedOn":"2018-06-22T21:08:25+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"We released .NET Core 2.1.1. This update includes .NET Core SDK 2.1.301, ASP.NET Core 2.1.1 and .NET Core 2.1.1. See .NET Core 2.1.1 release notes for complete details on the release. Quality Updates...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/06/22/net-core-2-1-june-update/","RawContent":null},{"Title":".NET Core 2.0 will reach End of Life on October 1, 2018","PublishedOn":"2018-06-20T19:12:38+00:00","CommentsCount":12,"FacebookCount":0,"Summary":"Last Updated: 6/22/2018 .NET Core 2.0 was released on August 14, 2017. As a non-LTS release, it is supported for 3 months after the next release. .NET Core 2.1 was released on May 30th, 2018. As a...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/","RawContent":null},{"Title":"The RyuJIT transition is complete!","PublishedOn":"2018-06-19T22:53:27+00:00","CommentsCount":34,"FacebookCount":0,"Summary":"RyuJIT is the code name for the .NET just-in-time compiler, one of the foundational components of the .NET runtime. In contrast, the Roslyn C# compiler compiles C# code to IL byte code. The RyuJIT...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/06/19/the-ryujit-transition-is-complete/","RawContent":null},{"Title":"Staying up-to-date with .NET Container Images","PublishedOn":"2018-06-18T18:59:03+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"This post describes the container images that we produce and update for you, that you can use with Docker, Kubernetes and other systems. When you are using .NET and Docker together, you are probably...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/06/18/staying-up-to-date-with-net-container-images/","RawContent":null},{"Title":"Using .NET and Docker Together – DockerCon 2018 Update","PublishedOn":"2018-06-14T00:15:31+00:00","CommentsCount":10,"FacebookCount":0,"Summary":"I posted about Using .NET and Docker Together last year. With DockerCon 2018 being this week, it seemed like a great time to give you an update.  Since my last post, we&#8217;ve enabled a set of...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/06/13/using-net-and-docker-together-dockercon-2018-update/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"7951838452","Type":"IssuesEvent","CreatedAt":"2018-07-11T18:28:16","Actor":"Eilon","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/issues/107","RelatedDescription":"Opened issue \"Links to .NET Foundation web site use HTTP instead of HTTPS\" (#107) at dotnet/home","RelatedBody":"It appears that HTTPS works just fine: https://www.dotnetfoundation.org/\r\n\r\nBut the links at these places use HTTP:\r\n1. The link in the header of https://github.com/dotnet/home\r\n2. The link in the header of https://github.com/dotnet\r\n3. Some links in https://github.com/dotnet/home/blob/master/README.md (both to .NET Foundation, and a GitHub link to another project)\r\n\r\nThese links should all change to HTTPS."},{"Id":"7948314683","Type":"IssuesEvent","CreatedAt":"2018-07-11T07:41:25","Actor":"glatzert","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/issues/106","RelatedDescription":"Opened issue \"Updates are not requested from local WSUS\" (#106) at dotnet/home","RelatedBody":"The Team somewhen Mention, that fixes should be installed automatically, if .NET Core is on a Windows Server.\r\nThis seems not to work. What are the prerequisits for this to be working?"},{"Id":"7939112505","Type":"PullRequestEvent","CreatedAt":"2018-07-09T17:43:55","Actor":"slide","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/105","RelatedDescription":"Opened pull request \"Add DLR/IronPython2/IronPython3\" (#105) at dotnet/home","RelatedBody":"Add DLR/IronPython2/IronPython3 to project list."},{"Id":"7896820874","Type":"IssuesEvent","CreatedAt":"2018-06-29T09:52:53","Actor":"tomkerkhove","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/issues/104","RelatedDescription":"Opened issue \"About still mentions CodePlex\" (#104) at dotnet/home","RelatedBody":"About still mentions CodePlex which is now in archive mode.\r\n\r\n![image](https://user-images.githubusercontent.com/4345663/42086259-e0b7d008-7b92-11e8-96c9-02ee61ddc457.png)\r\n\r\nIs this something that I can PR?"},{"Id":"7724991049","Type":"PullRequestEvent","CreatedAt":"2018-05-24T16:33:10","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/103","RelatedDescription":"Merged pull request \"Add ML.NET to readme\" (#103) at dotnet/home","RelatedBody":"cc @shauheen @jongalloway "},{"Id":"7724874671","Type":"PullRequestEvent","CreatedAt":"2018-05-24T16:12:32","Actor":"danmosemsft","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/103","RelatedDescription":"Opened pull request \"Add ML.NET to readme\" (#103) at dotnet/home","RelatedBody":"cc @shauheen @jongalloway "},{"Id":"7697543163","Type":"PullRequestEvent","CreatedAt":"2018-05-18T19:10:28","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/91","RelatedDescription":"Merged pull request \"Add NUnit to the .NET Foundation Projects\" (#91) at dotnet/home","RelatedBody":""},{"Id":"7697541521","Type":"PullRequestEvent","CreatedAt":"2018-05-18T19:10:06","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/92","RelatedDescription":"Merged pull request \"Remove contact email from system.drawing.md\" (#92) at dotnet/home","RelatedBody":"Contact email is outdated. Mono-project site's community section has better, more up-to-date information."},{"Id":"7697539314","Type":"PullRequestEvent","CreatedAt":"2018-05-18T19:09:35","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/93","RelatedDescription":"Merged pull request \"Add Humanizer\" (#93) at dotnet/home","RelatedBody":"Onboarding Humanizer: https://github.com/Humanizr/Humanizer/issues/682"},{"Id":"7697528376","Type":"PullRequestEvent","CreatedAt":"2018-05-18T19:07:09","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/94","RelatedDescription":"Merged pull request \"add SourceLink\" (#94) at dotnet/home","RelatedBody":"Adding SourceLink to the project list as per the checklist https://github.com/ctaggart/SourceLink/issues/138"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"7945147887","Type":"IssuesEvent","CreatedAt":"2018-07-10T17:00:38","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/73","RelatedDescription":"Opened issue \"Microsoft Security Advisory CVE-2018-8356: .NET Core Security Feature Bypass Vulnerability\" (#73) at dotnet/announcements","RelatedBody":"# Microsoft Security Advisory CVE-2018-8356: .NET Core Security Feature Bypass Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a security feature bypass vulnerability that exists when .NET Core does not correctly validate certificates. An attacker who successfully exploited this vulnerability could present an expired certificate when challenged.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core applications handle certificate validation.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/wcf/ **TBD**\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\n* If an application does use Windows Communication Foundation you are not affected.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core, or ASP.NET Core based application that uses System.Private.ServiceModel with a version of 4.5.1 or earlier.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ---------------- | -------------------------\r\nSystem.Private.ServiceModel | 4.0.0, 4.1.0, 4.1.1 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 |  4.1.2 or later <br /> 4.3.2 or later <br /> 4.4.3 or later <br /> 4.5.2 or later\r\nSystem.ServiceModel.Duplex | 4.0.0, 4.0.1, 4.0.2 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 | 4.0.3 or later <br /> 4.3.2 or later <br /> 4.4.3 or later <br /> 4.5.2 or later\r\nSystem.ServiceModel.Http | 4.0.0, 4.0.10, 4.1.0, 4.1.1 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 | 4.1.2 or later <br /> 4.3.2 or later <br /> 4.4.3 or later <br /> 4.5.2 or later\r\nSystem.ServiceModel.NetTcp | 4.0.0, 4.1.0, 4.1.1 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 | 4.1.2 or later <br /> 4.3.2 or later <br /> 4.4.3 or later <br /> 4.5.2 or later\r\nSystem.ServiceModel.Primitives | 4.0.0, 4.1.0, 4.1.1 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 | 4.1.2 or later <br /> 4.3.2 or later <br /> 4.4.3 or later <br /> 4.5.2 or later\r\nSystem.ServiceModel.Security | 4.0.0, 4.0.1, 4.0.2 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 | 4.0.3 or later <br /> 4.3.2 or later <br /> 4.4.3 or later <br /> 4.5.2 or later\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n.NET Core projects have two types of dependencies: direct and transitive. You must update your projects using the following instructions to address both types of dependency.\r\n\r\n### <a name=\"project-format\"></a>.NET Core Project formats\r\n\r\n.NET Core has two different project file formats, depending on what software created the project.\r\n\r\n1. `project.json` is the format used in .NET Core 1.0 and Microsoft Visual Studio 2015.\r\n2. `csproj` is the format used in .NET Core 1.1, .NET Core 2.0 and Microsoft Visual Studio 2017.\r\n\r\n#### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file or your `project.json` file. They can be fixed by [editing the project file](#direct-dependencies) or using NuGet to update the dependency.\r\n\r\n The `System.Private.ServiceModel` package is not meant to be directly depended on and will not appear in your direct dependency list.\r\n\r\n#### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in three ways, depending on your [project format](#project-format):\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects *OR*.\r\n* By examining the `project.lock.json` file contained in the root directory of your project for `project.json` based projects.\r\n\r\nThe `project.assets.json` and `project.lock.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\n#### <a name=\"direct-dependencies-vs2017\"></a>Fixing direct dependencies in a csproj based project / Visual Studio 2017\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.ServiceModel.Http\" Version=\"4.4.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.ServiceModel.Http` version 4.4.0.\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.ServiceModel.Http` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.ServiceModel.Http\" Version=\"4.4.3\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"direct-dependencies-vs2015\"></a> Fixing Direct Dependencies in project.json based project / Visual Studio 2015\r\n\r\nOpen your `project.json` file in your editor. Look for the dependencies section. Below is an example dependencies section:\r\n\r\n``` json\r\n    \"dependencies\": {\r\n      \"Microsoft.NETCore.App\": {\r\n        \"version\": \"1.0.1\",\r\n        \"type\": \"platform\"\r\n      },\r\n     \"Microsoft.AspNetCore.Mvc.Core\": \"1.0.6\",\r\n     \"System.ServiceModel.Http\" : \"4.0.0\"\r\n    }\r\n```\r\n\r\nThis example has three direct dependencies: `Microsoft.NETCore.App`, `Microsoft.AspNetCore.Mvc.Core` and `System.ServiceModel.Http`.\r\n\r\n`Microsoft.NetCore.App` is the platform the application targets, you should ignore this. The other packages expose their version to the right of the package name. In our example, our non-platform packages are version 1.0.1.\r\n\r\nReview your direct dependencies for any instance of the packages and versions listed above. In the example above, there is a direct dependency on a vulnerable package, `System.ServiceModel.Http` version 4.4.0.\r\n\r\nTo update to the fixed package, change the version number to be the appropriate package for your release. In the example, this would be updating `System.ServiceModel.Http` to 4.4.3.\r\n\r\nAfter updating the vulnerable package versions, save your `project.json` file.\r\n\r\nThe dependencies section in our example `project.json` would now look as follows:\r\n\r\n```json\r\n  \"dependencies\": {\r\n    \"Microsoft.NETCore.App\": {\r\n      \"version\": \"1.0.1\",\r\n      \"type\": \"platform\"\r\n    },\r\n    \"Microsoft.AspNetCore.Mvc.Core\": \"1.0.6\",\r\n    \"System.ServiceModel.Http \": \"4.4.3\"\r\n  }\r\n```\r\n\r\nIf you are using Visual Studio and save your updated `project.json` file, Visual Studio will restore the new package version. You can see the restore results by opening the Output Window (Ctrl+Alt+O) and changing the Show output from drop-down list to Package Manager.\r\n\r\nIf you are not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore your new dependency.\r\n\r\nAfter you have addressed all of your direct dependencies, you must also review your transitive dependencies.\r\n\r\nAfter you've addressed all of your direct dependencies, you must review your transitive dependencies.\r\n\r\n#### Discovering and fixing transitive dependencies\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json) or the [the `project.lock.json` file](#project-lock-json).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json (csproj/VS2017)\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `System.ServiceModel.Http/4.3.0` is a reference to version 4.3.0 of `System.ServiceModel.Http`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.ServiceModel.Http\" Version=\"4.3.2\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n##### <a name=\"project-lock-json\"></a> Manually reviewing project.lock.json (project.json/VS2015)\r\n\r\nOpen the `project.lock.json` file in your editor. We suggest you use an editor that understands json and allows you to collapse and expand nodes to review this file; both Visual Studio and Visual Studio Code provide this functionality.\r\n\r\nIf you are using Visual Studio the `project.lock.json` file is “under” the `project.json` file. Click the right pointing triangle, ▷, to the left of the `project.json` file to expand the solution tree to expose the `project.lock.json` file. The following image shows a project with the `project.json` file expanded to show the `project.lock.json` file.\r\n\r\n![project lock json](https://cloud.githubusercontent.com/assets/796298/25858179/f6e01200-348f-11e7-8a77-7176d8dd3f03.png)\r\n\r\nSearch the `project.lock.json` file for the vulnerable packages, using the format `packagename/`, using each of the package names from the table above. If you find any vulnerable assembly name in your search examine the line on which they are found, the version number is after the `/` and compare to the vulnerable versions table above. For example a search result that shows `System.ServiceModel.Http/4.0.1` is a reference to v4.0.1 of `System.ServiceModel.Http`.   If your `project.lock.json` file includes references to any of the package versions shown above then you will need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to a vulnerable version of `System.ServiceModel.Http` this means none of your direct dependencies depend on any vulnerable packages or you have already fixed the problem by updating the direct dependencies.\r\n\r\nIf your transitive dependency review found references to any of the vulnerable packages you must add a direct dependency to the updated package to your `project.json` file to override the transitive dependency. Open your `project.json` and find the dependencies section. For example:\r\n\r\n``` json\r\n  \"dependencies\": {\r\n    \"Microsoft.NETCore.App\": {\r\n      \"version\": \"1.0.1\",\r\n      \"type\": \"platform\"\r\n    },\r\n    \"Microsoft.AspNetCore.Mvc\": \"1.0.0\"\r\n  }\r\n```\r\n\r\nFor each of the vulnerable packages your search returned you must add a direct dependency to the updated version by adding it to the `project.json` file. You do this by adding a new line to the dependencies section, referring the fixed version. For example, if your search showed a transitive reference to the vulnerable `System.ServiceModel.Http` version 1.0.0 you would add a reference to the appropriate fixed version, 1.0.6. Edit the `project.json` file as follows:\r\n\r\n``` json\r\n  \"dependencies\": {\r\n    \"Microsoft.NETCore.App\": {\r\n      \"version\": \"1.0.1\",\r\n      \"type\": \"platform\"\r\n    },\r\n    \"System.ServiceModel.Http\": \"4.1.2\",\r\n    \"Microsoft.AspNetCore.Mvc\": \"1.0.0\"\r\n  }\r\n```\r\n\r\nAfter you have added direct dependencies to the fixed packages, save your `project.json` file.\r\n\r\nIf you are using Visual Studio save your updated `project.json` file and Visual Studio will restore the new package versions. You can see the restore results by opening the Output Window (Ctrl+Alt+O) and changing the Show output from drop-down list to Package Manager.\r\n\r\nIf you are not using Visual Studio open a command line and change to your project directory. Execute the `dotnet restore` command to restore your new dependencies.\r\n\r\n#### Rebuilding your application\r\n\r\nFinally you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2018-8356](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-CVE-2018-8356)\r\n\r\n### Revisions\r\n\r\nV1.0 (July 10, 2018): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2018-07-10_\r\n"},{"Id":"7780591341","Type":"IssuesEvent","CreatedAt":"2018-06-05T20:33:11","Actor":"huanwu","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/72","RelatedDescription":"Opened issue \"Introducing dotnet-svcutil.xmlserializer for .NET Core\" (#72) at dotnet/announcements","RelatedBody":"# Introducing dotnet-svcutil.xmlserializer for .NET Core\r\nOn the full .NET Framework you are able to pre-generate a serialization assembly using the tool svcutil. We are providing similar functionality on .NET Core by releasing the dotnet-svcutil.xmlserializer NuGet package. It pre-generates c# serialization code for the types used by WCF Service Contract in the client applications that can be serialized using the XmlSerializer to improve the startup performance of Xml Serialization when serializing or de-serializing objects of those types using XmlSerializer. \r\nYou can start using the tool today by following the instructions. \r\n## Discussion \r\nPlease share with us any thoughts of questions that you may have at: \r\n\r\n- dotnet/wcf [#2927](https://github.com/dotnet/wcf/issues/2927)\r\n## Details \r\nWhen to use XmlSerializer with WCF in an app to serialize contract data types, it will generate an XmlSerializer during runtime to do the serialization. You can improve the startup performance of Xml serialization by simply adding the reference of dotnet-svcutil.xmlserializer NuGet package to your project. This tool will generate the serialization code and compile it into an assembly next to your output assembly at build time in advance. This assembly can then be deployed and ran with your application. \r\n\r\nPlease create an issue with your feedback at [dotnet/wcf](https://github.com/dotnet/wcf/issues). We are actively looking to improve the tool and your input is a valuable part of the process. "}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"7960070158","Type":"PullRequestEvent","CreatedAt":"2018-07-13T05:11:23","Actor":"stephentoub","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/18897","RelatedDescription":"Opened pull request \"Improve Int32/Int64 {Try}Parse performance for NumberStyles.Integer\" (#18897) at dotnet/coreclr","RelatedBody":"Special-case the default NumberStyles.Integer format to improve the throughput of Int32/Int64.{Try}Parse.  Ports the implementation from Utf8Parser, modifying it to accomodate the additional cases needed for NumberStyles.Integer, e.g. culture impact on positive and negative signs, trailing nulls, leading and trailing whitespace, prohibiting additional characters at the end, etc.\r\n\r\nBenchmarks:\r\n```C#\r\nusing System;\r\nusing BenchmarkDotNet.Attributes;\r\nusing BenchmarkDotNet.Attributes.Jobs;\r\nusing BenchmarkDotNet.Running;\r\n\r\n[MemoryDiagnoser]\r\n[InProcess]\r\npublic class Benchmark\r\n{\r\n    private static void Main() => BenchmarkRunner.Run<Benchmark>();\r\n    [Benchmark] public int Int32Parse1() => int.Parse(\"1\");\r\n    [Benchmark] public int Int32Parse12345() => int.Parse(\"12345\");\r\n    [Benchmark] public int Int32Parse1234567890() => int.Parse(\"1234567890\");\r\n    [Benchmark] public int Int32ParseN1() => int.Parse(\"-1\");\r\n    [Benchmark] public int Int32ParseW0W() => int.Parse(\" 0 \");\r\n    [Benchmark] public bool Int32TryParseInvalid() => int.TryParse(\"123a\", out _);\r\n    [Benchmark] public long Int64Parse1() => long.Parse(\"1\");\r\n    [Benchmark] public long Int64Parse123456789() => long.Parse(\"123456789\");\r\n    [Benchmark] public long Int64Parse1234567890123456789() => long.Parse(\"1234567890123456789\");\r\n    [Benchmark] public long Int64ParseN1() => long.Parse(\"-1\");\r\n    [Benchmark] public long Int64ParseW0W() => long.Parse(\" 0 \");\r\n    [Benchmark] public bool Int64TryParseInvalid() => long.TryParse(\"123a\", out _);\r\n}\r\n```\r\n\r\nBefore/After:\r\n\r\n| Benchmark                     | Before (ns) | After (ns) | Improvement | \r\n|-------------------------------|-------------|------------|-------------| \r\n|                   Int32Parse1 | 52.35       | 25.76      | 2.03x       | \r\n|               Int32Parse12345 | 64.41       | 28.43      | 2.27x       | \r\n|          Int32Parse1234567890 | 84.09       | 31.63      | 2.66x       | \r\n|                  Int32ParseN1 | 53.89       | 24.45      | 2.20x       | \r\n|                 Int32ParseW0W | 53.32       | 25.72      | 2.07x       | \r\n|          Int32TryParseInvalid | 61.60       | 34.84      | 1.77x       | \r\n|                   Int64Parse1 | 50.57       | 25.59      | 1.98x       | \r\n|           Int64Parse123456789 | 75.43       | 30.21      | 2.50x       | \r\n| Int64Parse1234567890123456789 | 110.70      | 37.86      | 2.92x       | \r\n|                  Int64ParseN1 | 51.81       | 24.47      | 2.12x       | \r\n|                 Int64ParseW0W | 51.77       | 25.65      | 2.02x       | \r\n|          Int64TryParseInvalid | 59.30       | 35.60      | 1.67x       | \r\n\r\nContributes to https://github.com/dotnet/corefx/issues/30612\r\ncc: @jkotas, @ahsonkhan, @danmosemsft "},{"Id":"7959824969","Type":"PullRequestEvent","CreatedAt":"2018-07-13T03:24:08","Actor":"krwq","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/18874","RelatedDescription":"Merged pull request \"[rel/2.1] Skip old time zones adjustments with offsets higher than 14h\" (#18874) at dotnet/coreclr","RelatedBody":"This is a port of https://github.com/dotnet/coreclr/pull/18305\r\n\r\nMotivation: We started getting more issues related to this.\r\n\r\nShiproom request pending"}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"7959155520","Type":"PullRequestEvent","CreatedAt":"2018-07-12T23:00:45","Actor":"johnbeisner","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/9634","RelatedDescription":"Merged pull request \"Merge release/2.1.2xx to release/2.1.3xx\" (#9634) at dotnet/cli","RelatedBody":"\nThis is an automatically generated pull request from release/2.1.2xx into release/2.1.3xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1.2xx-to-release/2.1.3xx\ngit reset --hard upstream/release/2.1.3xx\ngit merge upstream/release/2.1.2xx\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.1.2xx-to-release/2.1.3xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"7959011008","Type":"PullRequestEvent","CreatedAt":"2018-07-12T22:18:31","Actor":"johnbeisner","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/cli/pull/9599","RelatedDescription":null,"RelatedBody":"/cc @dotnet/dotnet-cli"},{"Id":"7959008525","Type":"PullRequestEvent","CreatedAt":"2018-07-12T22:17:49","Actor":"johnbeisner","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/pull/9599","RelatedDescription":"Closed pull request \"Update coresetup, coresetup, coresetup, roslyn to preview1-26710-03, preview1-26710-03, preview1-26710-03, beta6-63029-08, respectively (dev/repo-refactoring)\" (#9599) at dotnet/cli","RelatedBody":"/cc @dotnet/dotnet-cli"},{"Id":"7958954754","Type":"IssuesEvent","CreatedAt":"2018-07-12T22:03:05","Actor":"Petermarcu","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/9657","RelatedDescription":"Opened issue \"After `dotnet run` I get \"The system cannot open the device or file specified\"\" (#9657) at dotnet/cli","RelatedBody":"@sshaginyan commented on [Sat May 05 2018](https://github.com/dotnet/core/issues/1499)\n\nHello,\r\n\r\nI'm running Ubuntu 16.04.4. `dotnet new console` runs fine but, when running dotnet run I get his following error messages.\r\n\r\nNo LSB modules are available.\r\nDistributor ID:\tUbuntu\r\nDescription:\tUbuntu 16.04.4 LTS\r\nRelease:\t16.04\r\nCodename:\txenial\r\n\r\n/app/sdk/2.1.105/Roslyn/Microsoft.CSharp.Core.targets(84,5): error MSB3883: Unexpected exception:  [/app/myapp/myapp.csproj]\r\n/app/sdk/2.1.105/Roslyn/Microsoft.CSharp.Core.targets(84,5): error : System.AggregateException: One or more errors occurred. (The system cannot open the device or file specified. [/app/myapp/myapp.csproj]\r\n/app/sdk/2.1.105/Roslyn/Microsoft.CSharp.Core.targets(84,5): error : ) ---> System.IO.IOException: The system cannot open the device or file specified. [/app/myapp/myapp.csproj]\r\n/app/sdk/2.1.105/Roslyn/Microsoft.CSharp.Core.targets(84,5): error : at System.IO.__Error.WinIOError(Int32 errorCode, String maybeFullPath) [/app/myapp/myapp.csproj]\r\n/app/sdk/2.1.105/Roslyn/Microsoft.CSharp.Core.targets(84,5): error : at System.Threading.Mutex.MutexTryCodeHelper.MutexTryCode(Object userData) [/app/myapp/myapp.csproj]\r\n/app/sdk/2.1.105/Roslyn/Microsoft.CSharp.Core.targets(84,5): error : at System.Runtime.CompilerServices.RuntimeHelpers.ExecuteCodeWithGuaranteedCleanup(TryCode code, CleanupCode backoutCode, Object userData) [/app/myapp/myapp.csproj]\r\n/app/sdk/2.1.105/Roslyn/Microsoft.CSharp.Core.targets(84,5): error : at System.Threading.Mutex.CreateMutexWithGuaranteedCleanup(Boolean initiallyOwned, String name, Boolean& createdNew, SECURITY_ATTRIBUTES secAttrs) [/app/myapp/myapp.csproj]\r\n/app/sdk/2.1.105/Roslyn/Microsoft.CSharp.Core.targets(84,5): error : at Microsoft.CodeAnalysis.CommandLine.BuildServerConnection.<RunServerCompilationCore>d__7.MoveNext() [/app/myapp/myapp.csproj]\r\n/app/sdk/2.1.105/Roslyn/Microsoft.CSharp.Core.targets(84,5): error : --- End of inner exception stack trace --- [/app/myapp/myapp.csproj]\r\n/app/sdk/2.1.105/Roslyn/Microsoft.CSharp.Core.targets(84,5): error : at System.Threading.Tasks.Task.ThrowIfExceptional(Boolean includeTaskCanceledExceptions) [/app/myapp/myapp.csproj]\r\n/app/sdk/2.1.105/Roslyn/Microsoft.CSharp.Core.targets(84,5): error : at System.Threading.Tasks.Task.Wait(Int32 millisecondsTimeout, CancellationToken cancellationToken) [/app/myapp/myapp.csproj]\r\n/app/sdk/2.1.105/Roslyn/Microsoft.CSharp.Core.targets(84,5): error : at System.Threading.Tasks.Task.Wait(CancellationToken cancellationToken) [/app/myapp/myapp.csproj]\r\n/app/sdk/2.1.105/Roslyn/Microsoft.CSharp.Core.targets(84,5): error : at Microsoft.CodeAnalysis.BuildTasks.ManagedCompiler.ExecuteTool(String pathToTool, String responseFileCommands, String commandLineCommands) [/app/myapp/myapp.csproj]\r\n/app/sdk/2.1.105/Roslyn/Microsoft.CSharp.Core.targets(84,5): error : ---> (Inner Exception #0) System.IO.IOException: The system cannot open the device or file specified. [/app/myapp/myapp.csproj]\r\n/app/sdk/2.1.105/Roslyn/Microsoft.CSharp.Core.targets(84,5): error : at System.IO.__Error.WinIOError(Int32 errorCode, String maybeFullPath) [/app/myapp/myapp.csproj]\r\n/app/sdk/2.1.105/Roslyn/Microsoft.CSharp.Core.targets(84,5): error : at System.Threading.Mutex.MutexTryCodeHelper.MutexTryCode(Object userData) [/app/myapp/myapp.csproj]\r\n/app/sdk/2.1.105/Roslyn/Microsoft.CSharp.Core.targets(84,5): error : at System.Runtime.CompilerServices.RuntimeHelpers.ExecuteCodeWithGuaranteedCleanup(TryCode code, CleanupCode backoutCode, Object userData) [/app/myapp/myapp.csproj]\r\n/app/sdk/2.1.105/Roslyn/Microsoft.CSharp.Core.targets(84,5): error : at System.Threading.Mutex.CreateMutexWithGuaranteedCleanup(Boolean initiallyOwned, String name, Boolean& createdNew, SECURITY_ATTRIBUTES secAttrs) [/app/myapp/myapp.csproj]\r\n/app/sdk/2.1.105/Roslyn/Microsoft.CSharp.Core.targets(84,5): error : at Microsoft.CodeAnalysis.CommandLine.BuildServerConnection.<RunServerCompilationCore>d__7.MoveNext()<--- [/app/myapp/myapp.csproj]\r\n\r\nThe build failed. Please fix the build errors and run again.\r\n\r\n\r\n\r\n\n\n"},{"Id":"7958889740","Type":"IssuesEvent","CreatedAt":"2018-07-12T21:47:27","Actor":"nguerrera","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/9379","RelatedDescription":"Closed issue \"First-run message is incorrect in non-English languages\" (#9379) at dotnet/cli","RelatedBody":"_From @Advanium on May 31, 2018 10:14_\n\nThe .NET Command Line tools in v2.1.300 display invalid commands in the ASP.NET Core section of the information that appears when new'ing up a solution.\r\n\r\n```ps\r\ndotnet new sln -n \"Extensions\"\r\n```\r\n\r\nThis applies at least to the German localized version of the tooling:\r\n\r\n![image](https://user-images.githubusercontent.com/515866/40776528-4a2085a0-64cb-11e8-9d2f-5d16b4effbbb.png)\r\n\r\nExecuting the command\r\n\r\n```ps\r\ndotnet tool install dotnet-dev-certs -g --version 2.1.0-preview1-final\r\n```\r\n\r\nresults in a \"format version missing\" message, but eventually install the tool and display which version of it was installed. It also prints a usage message for how to use the dev-certs commandlet, which is also wrong:\r\n\r\n![image](https://user-images.githubusercontent.com/515866/40776733-f3cf3ace-64cb-11e8-8922-906b839f5f15.png)\r\n\r\n```ps\r\ndotnet-dev-certs\r\n```\r\n\r\nThis won't execute, because there's no tool `dotnet-dev-certs`. The first dash isn't supposed to be there, and the correct command would be:\r\n\r\n```ps\r\ndotnet dev-certs\r\n```\r\n\r\nI don't know if other output and/or localized content also contains invalid commands.\r\nCan you verify this and patch it?\n\n_Copied from original issue: aspnet/DotNetTools#445_"}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"7959482474","Type":"IssuesEvent","CreatedAt":"2018-07-13T01:06:33","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/798","RelatedDescription":"Opened issue \"Remove [EditorBrowsable(Never)] for APIs that weren't part .NET Framework 4.6.1\" (#798) at dotnet/standard","RelatedBody":"See 622e5b391bff432242b0f6e94a840b2d8d7ae298 for details.\r\n\r\nBasically, since vNext doesn't have to work 4.6.1, we should remove these marker attributes."},{"Id":"7954474275","Type":"IssuesEvent","CreatedAt":"2018-07-12T07:39:10","Actor":"TobiasSekan","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/797","RelatedDescription":"Opened issue \"[Request] Show value operators on Value Type implementation view\" (#797) at dotnet/standard","RelatedBody":"Hello, It would be nice to see value operators on the implementation view of **value type**s \r\n(F12 in Visual Studio) \r\n\r\nActual view (for unit)\r\n```\r\nnamespace System\r\n{\r\n    public struct UInt32 : IComparable, IComparable<UInt32>, IConvertible, IEquatable<UInt32>, IFormattable\r\n    {\r\n        public const UInt32 MaxValue = 4294967295;\r\n        public const UInt32 MinValue = 0;\r\n\r\n        public static UInt32 Parse(string s, IFormatProvider provider);\r\n        public static UInt32 Parse(string s, NumberStyles style, IFormatProvider provider);\r\n        public static UInt32 Parse(string s, NumberStyles style);\r\n        public static UInt32 Parse(string s);\r\n        public static bool TryParse(string s, NumberStyles style, IFormatProvider provider, out UInt32 result);\r\n        public static bool TryParse(string s, out UInt32 result);\r\n        public int CompareTo(UInt32 value);\r\n        public int CompareTo(object value);\r\n        public override bool Equals(object obj);\r\n        public bool Equals(UInt32 obj);\r\n        public override int GetHashCode();\r\n        public TypeCode GetTypeCode();\r\n        public override string ToString();\r\n        public string ToString(IFormatProvider provider);\r\n        public string ToString(string format);\r\n        public string ToString(string format, IFormatProvider provider);\r\n    }\r\n}\r\n```\r\nExpected view (for unit)\r\n```\r\nusing System.Globalization;\r\n\r\nnamespace System\r\n{\r\n    public struct UInt32 : IComparable, IComparable<UInt32>, IConvertible, IEquatable<UInt32>, IFormattable\r\n    {\r\n        public const UInt32 MaxValue = 4294967295;\r\n        public const UInt32 MinValue = 0;\r\n...\r\n        public string ToString(string format, IFormatProvider provider);\r\n\r\n        public uint operator +(uint a, uint b)\r\n        public uint operator -(uint a, uint b)\r\n        public uint operator *(uint a, uint b)\r\n        public uint operator /(uint a, uint b)\r\n\r\n        public uint operator %(uint a, uint b)\r\n\r\n        public uint operator <(uint a, uint b)\r\n        public uint operator >(uint a, uint b)\r\n\r\n        public uint operator <=(uint a, uint b)\r\n        public uint operator >=(uint a, uint b)\r\n\r\n        public uint operator ==(uint a, uint b)\r\n        public uint operator !=(uint a, uint b)\r\n    }\r\n}\r\n```\r\n\r\n\r\n\r\n\r\n"},{"Id":"7947016430","Type":"PullRequestEvent","CreatedAt":"2018-07-11T00:05:09","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/796","RelatedDescription":"Merged pull request \"Breakdown APIs by namespace\" (#796) at dotnet/standard","RelatedBody":"We don't want to have all the .NET Standard APIs in a single C# file as GitHub really doesn't like huge files. That's why the API set is split into multiple files.\r\n\r\nPreviously, the contents of the .NET Standard reference assembly was split by the corresponding assembly in .NET Framework, i.e. it had filenames like \"mscorlib.cs\" and \"System.Core.cs\". This isn't very useful as the assembly factoring of .NET Framework is really completely irrelevant for the API surface of .NET Standard.\r\n\r\nThis splits the APIs by namespace (done with a [small Roslyn based rewrite](https://gist.github.com/terrajobst/b5403d74b0511149a70d6b98eec53216)).\r\n\r\nAlso, I diffed the resulting `netstandard.dll` with the current one to ensure this introduces no API differences."},{"Id":"7946924545","Type":"PullRequestEvent","CreatedAt":"2018-07-10T23:31:49","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/796","RelatedDescription":"Opened pull request \"Breakdown APIs by namespace\" (#796) at dotnet/standard","RelatedBody":"We don't want to have all the .NET Standard APIs in a single C# file as GitHub really doesn't like huge files. That's why the API set is split into multiple files.\r\n\r\nPreviously, the contents of the .NET Standard reference assembly was split by the corresponding assembly in .NET Framework, i.e. it had filenames like \"mscorlib.cs\" and \"System.Core.cs\". This isn't very useful as the assembly factoring of .NET Framework is really completely irrelevant for the API surface of .NET Standard.\r\n\r\nThis splits the APIs by namespace."}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"7960059231","Type":"PullRequestEvent","CreatedAt":"2018-07-13T05:06:35","Actor":"Anipik","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/31046","RelatedDescription":"Opened pull request \"Fix Granularity for copy operation on unix\" (#31046) at dotnet/corefx","RelatedBody":"Related Issue https://github.com/dotnet/corefx/issues/12403\r\nRelated PR https://github.com/dotnet/corefx/pull/30996\r\n\r\nWill contact the shiproom regarding this soon "},{"Id":"7960014261","Type":"PullRequestEvent","CreatedAt":"2018-07-13T04:46:15","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/31045","RelatedDescription":"Opened pull request \"Add more Int32/Int64 parsing tests\" (#31045) at dotnet/corefx","RelatedBody":"Add more cases to the Int32 tests, then reuse most of those for Int64 as well."},{"Id":"7959705694","Type":"PullRequestEvent","CreatedAt":"2018-07-13T02:36:17","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/31043","RelatedDescription":"Merged pull request \"Update symbol uploader to version 1.0.0-beta-63112-02\" (#31043) at dotnet/corefx","RelatedBody":""},{"Id":"7959689760","Type":"PullRequestEvent","CreatedAt":"2018-07-13T02:29:54","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/31035","RelatedDescription":"Merged pull request \"Remove ExactSpelling = true in DllImport\" (#31035) at dotnet/corefx","RelatedBody":"Fix https://github.com/dotnet/corefx/issues/31006 and https://github.com/dotnet/corefx/issues/30423\r\n\r\nFor UAPAOT scenario, if [DllImport]  is specified with ExactSpelling = true, mcg won't generate a throw only method for that PInvoke method. Thus during runtime, it will fail to launch.\r\n\r\nThere is another change to pass -usedefaultpinvoke false for ilc parameters."},{"Id":"7959689749","Type":"IssuesEvent","CreatedAt":"2018-07-13T02:29:54","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/31006","RelatedDescription":"Closed issue \"DllImports in PlatformDetection.NonNetFx.cs will not work in UWP ILC testing\" (#31006) at dotnet/corefx","RelatedBody":"In file src\\CoreFx.Private.TestUtilities\\src\\System\\PlatformDetection.NonNetFx.cs, these imports will not work when the test is compiled as a UWP ILC test:\r\n\r\n        [DllImport(\"libc\", ExactSpelling = true, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]\r\n        private static extern IntPtr gnu_get_libc_release();\r\n\r\n        [DllImport(\"libc\", ExactSpelling = true, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]\r\n        private static extern IntPtr gnu_get_libc_version();\r\n\r\nCompiling with ILC creates static links to the dll imports. When attempting to run the test on windows, this will cause xunit.console.netcore.exe to fail to load due to the missing libc.dll.\r\n\r\nWith ILC, there won't be any exception thrown. This code will need to be in some kind of #ifdef block to not compile for windows."}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"7960011603","Type":"IssuesEvent","CreatedAt":"2018-07-13T04:45:08","Actor":"MattWolf74","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/28506","RelatedDescription":"Opened issue \"System.IO.FileNotFoundException: 'Could not load file or assembly 'System.IO.FileSystem, Version=4.0.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a' or one of its dependencies. The system cannot find the file specified.'\" (#28506) at dotnet/roslyn","RelatedBody":"I use a Console app (.Net Target Framework 4.7.2) and imported (via Nuget) \r\nMicrosoft.CodeAnalysis.CSharp (version 2.8.2) and\r\nMicrosoft.CodeAnalysis.CSharp.Scripting (version 2.8.2)\r\n\r\nI then try to run the following simple code:\r\n\r\n`using System;\r\nusing System.IO;\r\nusing System.Reflection;\r\nusing Microsoft.CodeAnalysis.CSharp.Scripting;\r\nusing Microsoft.CodeAnalysis.Scripting;\r\n\r\nnamespace TestProject\r\n{\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            \r\n            var directory = @\"X:\\Algorithmic Trading Static Data\\Plugins\\ResearchStrategy2\";\r\n            var scriptCode = File.ReadAllText(directory + \"\\\\ResearchStrategy2.cs\");\r\n\r\n            TestRun(scriptCode);\r\n\r\n            Console.WriteLine(\"Press to end\");\r\n            Console.ReadLine();\r\n        }\r\n\r\n        public static void TestRun(string sourceCode)\r\n        {\r\n            var script = CSharpScript.Create(\r\n                @\"public class Test : ConsoleApp2.IRunnable {\r\n            public void Run() {\r\n                System.Console.WriteLine(\"\"test\"\");\r\n            }\r\n        }\r\n        return typeof(Test);\r\n        \", ScriptOptions.Default.WithReferences(Assembly.GetExecutingAssembly()));\r\n\r\n            script.Compile();\r\n\r\n            // run and you get Type object for your fresh type\r\n            var testType = (Type)script.RunAsync().Result.ReturnValue;\r\n\r\n            // create and cast to interface\r\n            var runnable = (IRunnable)Activator.CreateInstance(testType);\r\n\r\n            // use\r\n            runnable.Run();\r\n\r\n            Console.ReadKey();\r\n        }\r\n\r\n        public interface IRunnable\r\n        {\r\n            void Run();\r\n        }\r\n\r\n    }\r\n\r\n    \r\n}`\r\n \r\nThe following Run-Time error is thrown at \r\n\r\n`var script = CSharpScript.Create(\r\n                @\"public class Test : ConsoleApp2.IRunnable {\r\n            public void Run() {\r\n                System.Console.WriteLine(\"\"test\"\");\r\n            }\r\n        }\r\n        return typeof(Test);\r\n        \", ScriptOptions.Default.WithReferences(Assembly.GetExecutingAssembly()));`\r\n\r\nERROR:\r\nSystem.IO.FileNotFoundException: 'Could not load file or assembly 'System.IO.FileSystem, Version=4.0.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a' or one of its dependencies. The system cannot find the file specified.'\r\n\r\nInner Exception\r\nFileNotFoundException: Could not load file or assembly 'System.IO.FileSystem, Version=4.0.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a' or one of its dependencies. The system cannot find the file specified.\r\n\r\nWhat am I doing wrong and how can I fix this run-time error. Do I need some binding redirections? Which and how? \r\n\r\nThanks\r\n\r\n"},{"Id":"7959581899","Type":"PullRequestEvent","CreatedAt":"2018-07-13T01:47:23","Actor":"dpoeschl","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/28495","RelatedDescription":"Merged pull request \"Merge dev15.8.x to dev15.8.x-vs-deps\" (#28495) at dotnet/roslyn","RelatedBody":"\nThis is an automatically generated pull request from dev15.8.x into dev15.8.x-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/dev15.8.x-to-dev15.8.x-vs-deps\ngit reset --hard upstream/dev15.8.x-vs-deps\ngit merge upstream/dev15.8.x\n# Fix merge conflicts\ngit commit\ngit push merges/dev15.8.x-to-dev15.8.x-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"7959367158","Type":"PullRequestEvent","CreatedAt":"2018-07-13T00:18:17","Actor":"pentp","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/6091","RelatedDescription":"Opened pull request \"Make Decimal a readonly struct\" (#6091) at dotnet/corert","RelatedBody":"This fixes #4994 and contributes to https://github.com/dotnet/coreclr/issues/18249"},{"Id":"7955449970","Type":"PullRequestEvent","CreatedAt":"2018-07-12T10:47:52","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/6090","RelatedDescription":"Merged pull request \"Enable ThreadStatic GC layout test\" (#6090) at dotnet/corert","RelatedBody":"This was not enabled because at the time the test was written, `IsThreadStatic` was a lie. It would have caught #6041 in a much cheaper way if we haven't forgotten to enable it when thread statics were brought up."},{"Id":"7954575673","Type":"PullRequestEvent","CreatedAt":"2018-07-12T08:01:05","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/6090","RelatedDescription":"Opened pull request \"Enable ThreadStatic GC layout test\" (#6090) at dotnet/corert","RelatedBody":"This was not enabled because at the time the test was written, `IsThreadStatic` was a lie. It would have caught #6041 in a much cheaper way if we haven't forgotten to enable it when thread statics were brought up."},{"Id":"7954536965","Type":"PullRequestEvent","CreatedAt":"2018-07-12T07:52:48","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/6089","RelatedDescription":"Merged pull request \"Fix size of thread-local statics blocks\" (#6089) at dotnet/corert","RelatedBody":"Fixes #6041"},{"Id":"7953927929","Type":"IssuesEvent","CreatedAt":"2018-07-12T04:51:03","Actor":"christianscheuer","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/issues/5922","RelatedDescription":"Closed issue \"NullReferenceException in CancellationTokenSource.InternalRegister\" (#5922) at dotnet/corert","RelatedBody":"I'm hitting a NRE in `CancellationTokenSource.InternalRegister` on macOS. Not sure how to debug it though.\r\n\r\n```cs\r\nSystem.NullReferenceException: Object reference not set to an instance of an object.\r\n   at System.Threading.CancellationTokenSource.InternalRegister(Action`1, Object, SynchronizationContext, ExecutionContext) + 0x205\r\n   at System.Threading.CancellationToken.Register(Action`1, Object, Boolean, Boolean) + 0xd7\r\n   at System.Threading.CancellationTokenSource.CreateLinkedTokenSource(CancellationToken) + 0x7f\r\n   at System.Threading.CancellationTokenSource.CreateLinkedTokenSource(CancellationToken, CancellationToken) + 0xe9\r\n   at System.Net.Http.HttpClient.SendAsync(HttpRequestMessage, HttpCompletionOption, CancellationToken) + 0xe9\r\n```\r\n"},{"Id":"7953921969","Type":"IssuesEvent","CreatedAt":"2018-07-12T04:48:21","Actor":"christianscheuer","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/issues/6041","RelatedDescription":"Closed issue \"Odd threading behavior - Thread.CurrentThread.ManagedThreadId != Environment.ManagedThreadId\" (#6041) at dotnet/corert","RelatedBody":"I'm getting a `The write lock is being released without being held` exception when exiting write mode on a `ReaderWriterLockSlim` on macOS.\r\n\r\nDebugging this issue has led me to conclude, that apparently my call to`ExitWriteLock` happens on a different thread than where I started, albeit in a weird way.\r\n\r\nWhen I debug it, `Thread.CurrentThread.ManagedThreadId` will indicate I'm still on thread 1 where I acquired the lock, but `Environment.ManagedThreadId` which is what `ReaderWriterLockSlim` uses, indicates I'm on thread 6.\r\nThis does not seem to happen on CoreCLR.\r\n\r\nThe code paths involved do not include any calls to Thread.Start or asynchronous Task code. It really all should be happening on the same thread (which `Thread.CurrentThread.ManagedThreadId` also seems to indicate is true).\r\nThe rest of the app does have asynchronous Task code though.\r\n\r\nUnfortunately, I haven't yet been able to make a repro case. It does seem to make a difference though if GC is invoked between the calls to EnterWriteLock and ExitWriteLock.\r\nAny ideas as how to better debug this?\r\n\r\n\r\nThis is basically what I'm doing, but I don't think this helps much.\r\n\r\n```\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.Threading;\r\n\r\nnamespace Test\r\n{\r\n\r\n    public struct WriteLock : IDisposable\r\n    {\r\n        private readonly LockManager lockManager;\r\n\r\n        internal WriteLock(LockManager lockManager)\r\n        {\r\n            this.lockManager = lockManager;\r\n        }\r\n\r\n        public void Dispose()\r\n        {\r\n            this.lockManager.ReleaseWriteLock();\r\n        }\r\n    }\r\n\r\n    public class LockManager : IDisposable\r\n    {\r\n        private ReaderWriterLockSlim readerWriterLock;\r\n\r\n        public LockManager()\r\n        {\r\n            this.readerWriterLock = new ReaderWriterLockSlim(LockRecursionPolicy.NoRecursion);\r\n        }\r\n\r\n        public IDisposable AcquireWriteLock()\r\n        {\r\n            // Enter the lock\r\n            if (!this.readerWriterLock.TryEnterWriteLock(-1))\r\n            {\r\n                throw new Exception(\"Could not enter write lock\");\r\n            }\r\n            Console.WriteLine(\"Entered write lock: \" + Thread.CurrentThread.ManagedThreadId);\r\n\r\n            // Return a new instance of a write lock\r\n            return new WriteLock(this);\r\n        }\r\n\r\n        public void Dispose()\r\n        {\r\n            this.Dispose(true);\r\n            GC.SuppressFinalize(this);\r\n        }\r\n\r\n        internal void ReleaseReadLock()\r\n        {\r\n            this.readerWriterLock.ExitReadLock();\r\n        }\r\n\r\n        internal void ReleaseWriteLock()\r\n        {\r\n            this.readerWriterLock.ExitWriteLock();\r\n        }\r\n\r\n        protected virtual void Dispose(bool disposing)\r\n        {\r\n            Console.WriteLine(\"Disposing lock manager... disposing: \" + disposing);\r\n            if (disposing)\r\n            {\r\n                if (this.readerWriterLock != null)\r\n                {\r\n                    this.readerWriterLock.Dispose();\r\n                    this.readerWriterLock = null;\r\n                }\r\n            }\r\n        }   \r\n  \r\n\r\n        public static void Main(string[] args)\r\n        {\r\n            using (var lockMan = new LockManager())\r\n            using (var locky = lockMan.AcquireWriteLock())\r\n            {\r\n                //Lots of stuff happening in here. No Task awaits though...\r\n            }\r\n        }\r\n    }\r\n\r\n}\r\n```\r\n"},{"Id":"7953850491","Type":"PullRequestEvent","CreatedAt":"2018-07-12T04:16:38","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/6089","RelatedDescription":"Opened pull request \"Fix size of thread-local statics blocks\" (#6089) at dotnet/corert","RelatedBody":"Fixes #6041"},{"Id":"7952758408","Type":"PullRequestEvent","CreatedAt":"2018-07-11T21:44:18","Actor":"nattress","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/6084","RelatedDescription":"Merged pull request \"Merge remote-tracking branch 'dotnet/master' into r2r\" (#6084) at dotnet/corert","RelatedBody":""}],"ResultType":"GitHubEvent"},"SDK":{"Events":[],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1017101058773053445","CreatedAt":"2018-07-11T17:39:23+00:00","UserScreenname":"dotnet","Text":"Learn more about writing games with C#, .NET, and Unity right NOW on Twitch... https://t.co/UHRZk39EWG","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":64,"FavoriteCount":19,"RawContent":null},{"Id":"1016825199109423104","CreatedAt":"2018-07-10T23:23:13+00:00","UserScreenname":"dotnet","Text":".NET Framework 4.7.2 is available on Windows Update, WSUS and MU Catalog https://t.co/oBwPB86Pxf","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":108,"FavoriteCount":95,"RawContent":null},{"Id":"1016742094671507456","CreatedAt":"2018-07-10T17:53:00+00:00","UserScreenname":"dotnet","Text":".NET Core July 2018 Update https://t.co/1zcc6ep8AC","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":87,"FavoriteCount":77,"RawContent":null},{"Id":"1016363772737273856","CreatedAt":"2018-07-09T16:49:41+00:00","UserScreenname":"dotnet","Text":"https://t.co/EpnUCQtOJb.Pipelines: High performance IO in .NET https://t.co/LLJUxPVWlC","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":350,"FavoriteCount":167,"RawContent":null},{"Id":"1016363637726797824","CreatedAt":"2018-07-09T16:49:09+00:00","UserScreenname":"dotnet","Text":"Announcing https://t.co/XkD7piEeFS 0.3 https://t.co/dLw78XRgcE","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":127,"FavoriteCount":92,"RawContent":null}]}},"RunOn":"2018-07-13T05:30:33.9476888Z","RunDurationInMilliseconds":8210}