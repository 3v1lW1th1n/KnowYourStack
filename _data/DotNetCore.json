{"Data":{"Blog":{"FeedItems":[{"Title":"Announcing ML.NET 0.9 – Machine Learning for .NET","PublishedOn":"2019-01-10T20:34:16+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Announcing ML.NET 0.9 &#8211; Machine Learning for .NET ML.NET is an open-source and cross-platform machine learning framework (Windows, Linux, macOS) for .NET developers. Using ML.NET, developers can...","Href":"https://blogs.msdn.microsoft.com/dotnet/2019/01/10/announcing-ml-net-0-9-machine-learning-for-net/","RawContent":null},{"Title":"Tell us your thoughts on ML.NET, an open source and cross-platform machine learning framework","PublishedOn":"2019-01-09T17:31:15+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"ML.NET is an open source and cross-platform machine learning framework made for .NET developers. .NET developers can use their C# or F# skills to easily integrate custom machine learning into their...","Href":"https://blogs.msdn.microsoft.com/dotnet/2019/01/09/tell-us-your-thoughts-on-ml-net/","RawContent":null},{"Title":".NET Core January 2019 Updates – 2.1.7 and 2.2.1","PublishedOn":"2019-01-09T02:07:05+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"Today, we are releasing the .NET Core January 2019 Update. These updates contain security and reliability fixes. .NET Core 2.1.7 and .NET Core SDK 2.1.503 ( Download &#124; Release Notes ) .NET Core...","Href":"https://blogs.msdn.microsoft.com/dotnet/2019/01/08/net-core-january-2019-update/","RawContent":null},{"Title":".NET Framework January 2019 Security and Quality Rollup","PublishedOn":"2019-01-08T18:59:07+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Today, we are releasing the January 2019 Security and Quality Rollup. Security CVE-2019-0545 – Windows Security Feature Bypass Vulnerability This security update resolves a vulnerability in Microsoft...","Href":"https://blogs.msdn.microsoft.com/dotnet/2019/01/08/net-framework-january-2019-security-and-quality-rollup/","RawContent":null},{"Title":"Announcing .NET Framework 4.8 Early Access Build 3707","PublishedOn":"2018-12-15T02:11:55+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"We have another early access build to share today! This release includes several accessibility, performance, reliability and stability fixes across the major framework libraries. We will continue to...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/12/14/announcing-net-framework-4-8-early-access-build-3707/","RawContent":null},{"Title":"Visual Studio 2019 Preview .NET Productivity","PublishedOn":"2018-12-14T00:13:41+00:00","CommentsCount":18,"FacebookCount":0,"Summary":"As you hopefully heard, the first preview of Visual Studio 2019 is now available. In this post I’ll cover some of the productivity improvements for .NET developers we’re most excited about. For a...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/12/13/visual-studio-2019-net-productivity/","RawContent":null},{"Title":".NET Framework December 2018 Security and Quality Rollup","PublishedOn":"2018-12-11T18:23:48+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"Today, we are releasing the December 2018 Security and Quality Rollup. Security CVE-2018-8540 – Windows Remote Code Execution Vulnerability This security update resolves a vulnerability in Microsoft...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/12/11/net-framework-december-2018-security-and-quality-rollup/","RawContent":null},{"Title":"Open Sourcing XAML Behaviors for WPF","PublishedOn":"2018-12-10T19:27:32+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"Today, we are excited to announce that we are open sourcing XAML Behaviors for WPF. In the past, we open sourced XAML Behaviors for UWP which has been a great success and the Behaviors NuGet package...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/12/10/open-sourcing-xaml-behaviors-for-wpf/","RawContent":null},{"Title":"Take C# 8.0 for a spin","PublishedOn":"2018-12-05T23:51:33+00:00","CommentsCount":99,"FacebookCount":0,"Summary":"Take C# 8.0 for a spin Yesterday we announced the first preview of both Visual Studio 2019 (Making every developer more productive with Visual Studio 2019) and .NET Core 3.0 (Announcing .NET Core 3...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/12/05/take-c-8-0-for-a-spin/","RawContent":null},{"Title":".NET Framework December 5, 2018 Preview of Cumulative Update for Windows 10 version 1809 and Windows Server 2019","PublishedOn":"2018-12-05T22:00:42+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"Today, we are releasing the December 5, 2018 Preview of .NET Framework Cumulative Update for Windows 10 version 1809 and Windows Server 2019. For more information about the new Cumulative Updates for...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/12/05/net-framework-december-4-2018-preview-of-cumulative-update-for-windows-10-version-1809-and-windows-server-2019/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"8860916656","Type":"PullRequestEvent","CreatedAt":"2019-01-09T22:28:14","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/128","RelatedDescription":"Merged pull request \"Update of EF description\" (#128) at dotnet/foundation","RelatedBody":"@divega !"},{"Id":"8837337598","Type":"PullRequestEvent","CreatedAt":"2019-01-05T03:23:40","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/129","RelatedDescription":"Merged pull request \"Update to absolute path\" (#129) at dotnet/foundation","RelatedBody":"Update to absolute path so that when this list is copied the link will actually work"},{"Id":"8833785661","Type":"PullRequestEvent","CreatedAt":"2019-01-04T11:57:11","Actor":"MarcBruins","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/129","RelatedDescription":"Opened pull request \"Update to absolute path\" (#129) at dotnet/foundation","RelatedBody":"Update to absolute path so that when this list is copied the link will actually work"},{"Id":"8833210040","Type":"PullRequestEvent","CreatedAt":"2019-01-04T09:40:51","Actor":"ErikEJ","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/128","RelatedDescription":"Opened pull request \"Update of EF description\" (#128) at dotnet/foundation","RelatedBody":"@divega !"},{"Id":"8831721539","Type":"PullRequestEvent","CreatedAt":"2019-01-04T00:22:43","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/127","RelatedDescription":"Merged pull request \"Update documentation information\" (#127) at dotnet/foundation","RelatedBody":""},{"Id":"8830688181","Type":"PullRequestEvent","CreatedAt":"2019-01-03T20:00:04","Actor":"carloscds","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/127","RelatedDescription":"Opened pull request \"Update documentation information\" (#127) at dotnet/foundation","RelatedBody":""},{"Id":"8826767123","Type":"PullRequestEvent","CreatedAt":"2019-01-03T04:47:09","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/122","RelatedDescription":"Merged pull request \"targets the existing document\" (#122) at dotnet/foundation","RelatedBody":""},{"Id":"8826765854","Type":"PullRequestEvent","CreatedAt":"2019-01-03T04:46:31","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/121","RelatedDescription":"Merged pull request \"Add Newtonsoft.Json\" (#121) at dotnet/foundation","RelatedBody":"// @jongalloway "}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"8852414845","Type":"IssuesEvent","CreatedAt":"2019-01-08T18:17:46","Actor":"leecow","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/96","RelatedDescription":"Opened issue \"January 2019 .NET Updates\" (#96) at dotnet/announcements","RelatedBody":"# January 2019 .NET Updates\r\n\r\nThe following .NET updates were released in January 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Core\r\n\r\n* .NET Core 2.1.7 and .NET Core SDK 2.1.503 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.7.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.1) )\r\n\r\n* .NET Core 2.2.1 and .NET Core SDK 2.2.102 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.1.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.2) )\r\n\r\nA discussion issue is available at [core/2210](https://github.com/dotnet/core/issues/2210)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)"},{"Id":"8852318390","Type":"IssuesEvent","CreatedAt":"2019-01-08T18:00:28","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/95","RelatedDescription":"Opened issue \" Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability\" (#95) at dotnet/announcements","RelatedBody":"# Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a tampering vulnerability exists when .NET Core improperly handles specially crafted files. An attacker who successfully exploited this vulnerability could write arbitrary files and directories to certain locations on a vulnerable system. However, an attacker would have limited control over the destination of the files and directories.\r\n\r\nTo exploit the vulnerability, an attacker must send a specially crafted file to a vulnerable system\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core handles these files.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/ **TBD**\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nIf your application does not extract ZIP compressed files it is unaffected.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the [System.IO.Compression.ZipFile](https://www.nuget.org/packages/System.IO.Compression.ZipFile/) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.IO.Compression.ZipFile | 4.0.0, 4.0.1, 4.3.0 | 4.3.1\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n`System.IO.Compression.ZipFile` is distributed as part of the .NET Core 2.1 runtime. To check the currently installed runtimes, open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed, you'll see output like the following;\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your host version is 2.1.x and the highest `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\nIf your host version is 2.2.x and the highest 2.1.x `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\n\r\nYou will not see SDK versions if you have only installed the runtime.\r\n\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nIf your host version is a 2.1.x host you must install version 2.1.7 or later of the [.NET Core 2.1 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.1), or corresponding [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\nIf your host version is a 2.2.x you must install version 2.2.1 or later of the [.NET Core 2.2 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.2), or corresponding  [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\nFinally, you must restart your applications once an updated runtime or SDK is installed.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgments\r\n\r\n[Danny Grander](https://twitter.com/grander) of [Snyk](https://snyk.io/)\r\n\r\n### External Links\r\n\r\n[CVE-2018-8416](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-8416)\r\n\r\n### Revisions\r\n\r\nV1.0 (January 8, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-01-08_\r\n\r\n"},{"Id":"8852317992","Type":"IssuesEvent","CreatedAt":"2019-01-08T18:00:24","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/94","RelatedDescription":"Opened issue \"Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability\" (#94) at dotnet/announcements","RelatedBody":"# Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of an information disclosure vulnerability exists in .NET Framework and .NET Core which allows bypassing Cross-origin Resource Sharing (CORS) configurations. An attacker who successfully exploited the vulnerability could retrieve content, that is normally restricted, from a web application.\r\n\r\nThe security update addresses the vulnerability by enforcing CORS configuration to prevent its bypass.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/ **TBD**\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nMicrosoft has not identified any mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the [System.Net.Http](https://www.nuget.org/packages/System.Net.Http/) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.Net.Http | 4.3.0, 4.3.1, 4.3.2, 4.3.3, 4.3.4 | 4.3.5\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n#### Applications that use Microsoft.NetCore.App\r\n\r\n`System.Net.Http` is distributed as part of the .NET Core 2.1 runtime. To check the currently installed runtimes, open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed, you'll see output like the following;\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your host version is 2.1.x and the highest `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\nIf your host version is 2.2.x and the highest 2.1.x `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\n\r\nYou will not see SDK versions if you have only installed the runtime.\r\n\r\n#### Applications not using Microsoft.NetCore.App\r\n\r\nThe affected assembly is also available separately as a NuGet package. If you are not using Microsoft.NetCore.App, you may still be affected if you are referencing the packages listed above.\r\n\r\n##### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file. They can be fixed by [editing the project file](#fixing-direct-dependencies) or using NuGet to update the dependency.\r\n\r\n##### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects\r\n\r\nThe `project.assets.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json)).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `SSystem.Net.Http/4.3.0` is a reference to version 4.3.0 of `System.Net.Http`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\n#### Updating the version of Microsoft.NETCore.App\r\n\r\nIf your host version is a 2.1.x host you must install version 2.1.7 or later of the [.NET Core 2.1 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.1), or corresponding [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\nIf your host version is a 2.2.x you must install version 2.2.1 or later of the [.NET Core 2.2 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.2), or corresponding  [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\n#### <a name=\"fixing-direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.Net.Http` version 4.3.0\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.IO.Pipelines` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.5\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"transitive-dependencies\"></a>Fixing transitive dependencies\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.5\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n##### Rebuilding your application\r\n\r\nFinally, you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2019-0545](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0545)\r\n\r\n### Revisions\r\n\r\nV1.0 (January 8, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-01-08_\r\n"},{"Id":"8752496804","Type":"IssuesEvent","CreatedAt":"2018-12-14T03:22:59","Actor":"1015450578","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/93","RelatedDescription":"Closed issue \"Docker image with tag '2.2-aspnetcore-runtime' is not compatible\" (#93) at dotnet/announcements","RelatedBody":"1. Install  .NET Core 2.2.100 sdk\r\n2. Create a new 'AspNetCore Web Api' by using Visual Studio 2017,and enbale docker support.\r\n3. F5 ,the Output Windows shows:\r\n>It was not possible to find any compatible framework version\r\n>The specified framework 'Microsoft.AspNetCore.App', version '2.2.0' was not found.\r\n>  - Check application dependencies and target a framework version installed at:\r\n>      /usr/share/dotnet/\r\n>  - Installing .NET Core prerequisites might help resolve this problem:\r\n>     http://go.microsoft.com/fwlink/?LinkID=798306&clcid=0x409\r\n>  - The .NET Core framework and SDK can be installed from:\r\n>      https://aka.ms/dotnet-download\r\n>  - The following versions are installed:\r\n>      2.2.0-preview3-35497 at [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]"},{"Id":"8752467326","Type":"IssuesEvent","CreatedAt":"2018-12-14T03:12:36","Actor":"1015450578","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/93","RelatedDescription":"Opened issue \"Docker image with tag '2.2-aspnetcore-runtime' is not compatible\" (#93) at dotnet/announcements","RelatedBody":"1. Install  .NET Core 2.2.100 sdk\r\n2. Create a new 'AspNetCore Web Api' by using Visual Studio 2017,and enbale docker support.\r\n3. F5 ,the Output Windows shows:\r\n>It was not possible to find any compatible framework version\r\n>The specified framework 'Microsoft.AspNetCore.App', version '2.2.0' was not found.\r\n>  - Check application dependencies and target a framework version installed at:\r\n>      /usr/share/dotnet/\r\n>  - Installing .NET Core prerequisites might help resolve this problem:\r\n>     http://go.microsoft.com/fwlink/?LinkID=798306&clcid=0x409\r\n>  - The .NET Core framework and SDK can be installed from:\r\n>      https://aka.ms/dotnet-download\r\n>  - The following versions are installed:\r\n>      2.2.0-preview3-35497 at [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]"},{"Id":"8741036679","Type":"IssuesEvent","CreatedAt":"2018-12-12T12:56:54","Actor":"bilalMlaik","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/92","RelatedDescription":"Closed issue \".net core Console\" (#92) at dotnet/announcements","RelatedBody":"I am running dot net core console app as web jobs and it is working perfectly in docker with docker compose. Now the issue is I want to pass a value to the application via Console.ReadLine() over this value i make some decision but i am unable to pass value via Console.ReadLine(). How i can do it please help me. For more understanding, i have added my docker compose file below\r\n`version: '3.4'\r\n\r\nservices:\r\n  \r\n  tt.core.web:\r\n    image: ${DOCKER_REGISTRY-}ttcoreweb\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.Web/Dockerfile\r\n    depends_on:\r\n     - db\r\n    networks:\r\n     - app-network\r\n\r\n  tt.core.downtime.webjob:\r\n    image: ${DOCKER_REGISTRY-}ttcoredowntimewebjob\r\n    environment:\r\n      CORE_ENVIRONMENT: devdocker\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.Downtime.Webjob/Dockerfile\r\n    depends_on:\r\n     - db\r\n     - tt.core.web\r\n    networks:\r\n     - app-network\r\n\r\n  db:\r\n    image: microsoft/mssql-server-linux\r\n    container_name: db\r\n    environment:\r\n      SA_PASSWORD: \"Thingtrax%1\"\r\n      ACCEPT_EULA: \"Y\"\r\n      MSSQL_PID: Express\r\n    ports:\r\n      - \"7002:1433\"\r\n    networks:\r\n      app-network:\r\n        ipv4_address: 172.24.0.2\r\n\r\nnetworks:\r\n  app-network:\r\n    ipam:\r\n      driver: default\r\n      config:\r\n        - subnet: 172.24.0.0/16\r\n\r\n`\r\nIf the detail is not enough or you do not get my point, you can share your confusion in comment"},{"Id":"8740711774","Type":"IssuesEvent","CreatedAt":"2018-12-12T11:57:02","Actor":"bilalMlaik","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/92","RelatedDescription":"Opened issue \".net core Console\" (#92) at dotnet/announcements","RelatedBody":"This repo doesn't accept issues. Please see README.md in the root for more details.\r\nI am running dot net core console app as web jobs and it is working perfectly in docker with docker compose. Now the issue is I want to pass a value to the application via Console.ReadLine() over this value i make some decision but i am unable to pass value via Console.ReadLine(). How i can do it please help me. For more understanding, i have added my docker compose file below\r\n`version: '3.4'\r\n\r\nservices:\r\n  \r\n  tt.core.web:\r\n    image: ${DOCKER_REGISTRY-}ttcoreweb\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.Web/Dockerfile\r\n    depends_on:\r\n     - db\r\n     - redis\r\n    networks:\r\n     - app-network\r\n\r\n  tt.core.downtime.webjob:\r\n    image: ${DOCKER_REGISTRY-}ttcoredowntimewebjob\r\n    environment:\r\n      CORE_ENVIRONMENT: devdocker\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.Downtime.Webjob/Dockerfile\r\n    depends_on:\r\n     - db\r\n     - tt.core.web\r\n     - redis\r\n    networks:\r\n     - app-network\r\n\r\n  tt.core.iothub.simulator:\r\n    image: ${DOCKER_REGISTRY-}ttcoreiothubsimulator\r\n    environment:\r\n      CORE_ENVIRONMENT: devdocker\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.IotHub.Simulator/Dockerfile\r\n    depends_on:\r\n     - db\r\n     - tt.core.web\r\n     - mqtt\r\n    networks:\r\n     - app-network\r\n\r\n  tt.core.labourtelemetry.webjob:\r\n    image: ${DOCKER_REGISTRY-}ttcorelabourtelemetrywebjob\r\n    environment:\r\n      CORE_ENVIRONMENT: devdocker\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.LabourTelemetry.WebJob/Dockerfile\r\n    depends_on:\r\n     - db\r\n     - tt.core.web\r\n     - redis\r\n    networks:\r\n     - app-network\r\n\r\n  tt.core.telemetry.webjob:\r\n    image: ${DOCKER_REGISTRY-}ttcoretelemetrywebjob\r\n    environment:\r\n      CORE_ENVIRONMENT: devdocker\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.Telemetry.WebJob/Dockerfile\r\n    depends_on:\r\n     - db\r\n     - tt.core.web\r\n     - mqtt\r\n     - redis\r\n    networks:\r\n     - app-network\r\n\r\n  redis:\r\n    image: redis\r\n    command: redis-server --appendonly yes\r\n    ports:\r\n      - '6379:6379'\r\n    volumes:\r\n      - ${APPDATA}/redis:/bitnami/redis/data\r\n    networks:\r\n      app-network:\r\n        ipv4_address: 172.24.0.16\r\n\r\n  mqtt:\r\n    image: eclipse-mosquitto\r\n    hostname: mqtt\r\n    container_name: mqtt\r\n    expose:\r\n      - \"1883\"\r\n      - \"9001\"\r\n    ports:\r\n      - \"1883:1883\"\r\n      - \"9001:9001\"\r\n    volumes:\r\n      - ${APPDATA}/mosquitto/mosquitto.conf:/mosquitto/config/mosquitto.conf\r\n    networks:\r\n      app-network:\r\n        ipv4_address: 172.24.0.8\r\n\r\n  db:\r\n    image: microsoft/mssql-server-linux\r\n    container_name: db\r\n    environment:\r\n      SA_PASSWORD: \"Thingtrax%1\"\r\n      ACCEPT_EULA: \"Y\"\r\n      MSSQL_PID: Express\r\n    ports:\r\n      - \"7002:1433\"\r\n    networks:\r\n      app-network:\r\n        ipv4_address: 172.24.0.2\r\n\r\nnetworks:\r\n  app-network:\r\n    ipam:\r\n      driver: default\r\n      config:\r\n        - subnet: 172.24.0.0/16\r\n\r\n`\r\n"}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"8869215483","Type":"IssuesEvent","CreatedAt":"2019-01-11T03:57:47","Actor":"benaadams","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/21951","RelatedDescription":"Opened issue \"RyuJIT bounds checks not eliminated for readonly arrays\" (#21951) at dotnet/coreclr","RelatedBody":"Range analysis doesn't take into account readonly arrays and you need to make a function local reference to eliminate the range check.\r\n\r\nhttps://github.com/dotnet/coreclr/issues/5371 regressed due to https://github.com/dotnet/coreclr/pull/15756\r\n\r\nIt shouldn't need to be conservative for a readonly array?\r\n\r\n/cc @briansull @AndyAyersMS @mikedn "},{"Id":"8869011637","Type":"PullRequestEvent","CreatedAt":"2019-01-11T02:50:36","Actor":"briansull","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/21804","RelatedDescription":"Merged pull request \"Fix issue with devirtualization and tailcalls\" (#21804) at dotnet/coreclr","RelatedBody":"When performing devirtualization we can not do both an unboxing optimization and a tail call optimization\r\n-  Explicit tail calls are now checked for and blocked from performing an unboxing operation in impDevirtualizeCall.\r\n-  If late devirtualization calls impDevirtualizeCall with an IMPLICIT_TAILCALL we will clear this flag if we decide to perform the unboxing operation.\r\n"},{"Id":"8869005847","Type":"PullRequestEvent","CreatedAt":"2019-01-11T02:48:45","Actor":"stephentoub","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/21927","RelatedDescription":"Merged pull request \"Update CoreFx, PgoData to preview.19060.1, master-20190110.3, respectively (master)\" (#21927) at dotnet/coreclr","RelatedBody":"/cc @dotnet/maestro-reviewers-core"},{"Id":"8869003810","Type":"PullRequestEvent","CreatedAt":"2019-01-11T02:48:05","Actor":"stephentoub","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/21939","RelatedDescription":"Merged pull request \"Add WithCancellation for async enumerables\" (#21939) at dotnet/coreclr","RelatedBody":"Contributes to https://github.com/dotnet/corefx/issues/33909\r\ncc: @jcouv, @kouvel, @tarekgh \r\n\r\nRelates to async-streams umbrella: https://github.com/dotnet/roslyn/issues/24037"},{"Id":"8868966003","Type":"PullRequestEvent","CreatedAt":"2019-01-11T02:35:58","Actor":"CarolEidt","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/21928","RelatedDescription":"Merged pull request \"Don't optimize MultiplyNoFlags away\" (#21928) at dotnet/coreclr","RelatedBody":"Contribute to https://github.com/dotnet/coreclr/issues/21899\r\n"},{"Id":"8868925961","Type":"PullRequestEvent","CreatedAt":"2019-01-11T02:23:09","Actor":"erozenfeld","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/21950","RelatedDescription":"Opened pull request \"Improvements for object stack allocation.\" (#21950) at dotnet/coreclr","RelatedBody":"This change enables object stack allocation for more cases:\r\n\r\n1. Objects with gc fields can now be stack-allocated.\r\n2. Object stack allocation is enabled for x86.\r\n\r\nObjectAllocator updates the types of trees containing references\r\nto possibly-stack-allocated objects to TYP_BYREF or TYP_I_IMPL as appropriate.\r\nThat allows us to remove the hacks in gcencode.cpp and refine reporting of pointers:\r\nthe pointer is not reported when we can prove that it always points to a stack-allocated object or is null (typed as TYP_I_IMPL);\r\nthe pointer is reported as an interior pointer when it may point to either a stack-allocated object or a heap-allocated object (typed as TYP_BYREF);\r\nthe pointer is reported as a normal pointer when it points to a heap-allocated object (typed as TYP_REF).\r\n\r\nObjectAllocator also adds flags to indirections:\r\nGTF_IND_TGTANYWHERE when the indirection may be the heap or the stack\r\n(that results in checked write barriers used for writes)\r\nor the new GTF_IND_TGT_NOT_HEAP when the indirection is null or stack memory\r\n(that results in no barrier used for writes)."},{"Id":"8868880304","Type":"IssuesEvent","CreatedAt":"2019-01-11T02:08:54","Actor":"AndyAyersMS","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/17548","RelatedDescription":"Closed issue \"[Perf] ByteMark/BenchEmFloatClass improvement of ~3% on x86\" (#17548) at dotnet/coreclr","RelatedBody":"**[Perf] ByteMark/BenchEmFloatClass improvement of ~3% on x86**\r\n\r\nImprovement can be seen in Benchview - CoreCLR/Master branch between [commits](https://github.com/dotnet/coreclr/compare/89e85cfff719bc743ad53fdc702b0379c5286087...dotnet:e45a895df6b4cc50347daafed05cefa59af511a2). Orange dotted line is the Release v2.0 baseline.\r\n\r\n![image](https://user-images.githubusercontent.com/19602715/38750595-4892d6a2-3f0a-11e8-9bcb-33e8ccc8cb88.png)\r\n"},{"Id":"8868835046","Type":"PullRequestEvent","CreatedAt":"2019-01-11T01:55:10","Actor":"AndyAyersMS","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/21915","RelatedDescription":"Merged pull request \"JIT: fix byte range used by RangeCheck\" (#21915) at dotnet/coreclr","RelatedBody":"Fix wrong byte range introduced in #21857.\r\n\r\nThanks to @jakobbotsch for spotting this."}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"8868493802","Type":"PullRequestEvent","CreatedAt":"2019-01-11T00:13:45","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/10590","RelatedDescription":"Merged pull request \"Merge release/2.2.1xx to release/2.2.2xx\" (#10590) at dotnet/cli","RelatedBody":"\nThis is an automatically generated pull request from release/2.2.1xx into release/2.2.2xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.2.1xx-to-release/2.2.2xx\ngit reset --hard upstream/release/2.2.2xx\ngit merge upstream/release/2.2.1xx\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.2.1xx-to-release/2.2.2xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"8868492347","Type":"PullRequestEvent","CreatedAt":"2019-01-11T00:13:20","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/10591","RelatedDescription":"Opened pull request \"Updating the SDK LKG version to 3.0.100-preview-010046\" (#10591) at dotnet/cli","RelatedBody":""}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"8868718402","Type":"IssuesEvent","CreatedAt":"2019-01-11T01:19:54","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/1050","RelatedDescription":"Closed issue \"Proposal to rename Standard 2.1 to 2.2, make 2.1 a Framework compatible subset\" (#1050) at dotnet/standard","RelatedBody":"I'm looking to provide input on .NET Standard and this appears to be the best place.\r\n\r\nSee https://blogs.msdn.microsoft.com/dotnet/2018/11/05/announcing-net-standard-2-1/ for reference.\r\n\r\nI propose that what is currently planned for .NET Standard 2.1 be pushed back to .NET Standard 2.2, and that .NET Standard 2.1 instead just have the subset of those changes that are implementable on .NET Framework.\r\n\r\nWhile going forward, .NET Standard after 2.0 is mainly adding new features that are not practical to implement in .NET Framework, some of the proposals for 2.1 contained bringing out some things that already existed but missed the 2.0 window.\r\n\r\nIf we do what I propose, then we have a last chance to increase the API surface that can run everywhere, before it is permanently shut out due to releasing a .NET Standard version that Framework can't run, given that each increasing Standard version is a superset of what came before."},{"Id":"8868531634","Type":"IssuesEvent","CreatedAt":"2019-01-11T00:24:30","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/1024","RelatedDescription":"Closed issue \"[Proposal] .Net Standard 3.0.0 with breaking changes, semantic versioning and migration toolset\" (#1024) at dotnet/standard","RelatedBody":"Please open new .NetStandard branch with deep refresh of .Net API surface.\r\nCurrently .NetStandard 2.0 and it's successor .NetStandard 2.1 contains everything that were added in .net since version 1.0. Some API is already outdated and another will become outdated soon.\r\n\r\n.Net Standard 2.1 have some positive movements. It's drops some components to out of standard into additional components.\r\n\r\nBut it's not enough. It's time to stay in .Net Standard only good and modern parts.\r\nFor example:\r\n```CSharp\r\npublic class List<T>\r\n{\r\n     // ...\r\n     void CopyTo(T[] array);\r\n     // ...\r\n}\r\n```\r\ncan be replaced with:\r\n\r\n```CSharp\r\npublic class List<T>\r\n{\r\n     // ...\r\n     void CopyTo(Span<T> output);\r\n     // ...\r\n}\r\n```\r\nAssemblies targeting .NetStandard 2.0, .NetStandard 2.1 and proposed .NetStandard 3.0.0 should be capable to work side-by-side inside the same AppDomain.\r\n\r\nTODO: Add diagram.\r\n"},{"Id":"8868527732","Type":"IssuesEvent","CreatedAt":"2019-01-11T00:23:25","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/1041","RelatedDescription":"Closed issue \"System.MathF missing in .NET Standard 2.1 README\" (#1041) at dotnet/standard","RelatedBody":"Minor, but `System.MathF` is missing from the [README](https://github.com/dotnet/standard/blob/master/docs/planning/netstandard-2.1/README.md). I figured it would be in the Miscellaneous list at a minimum. (As I understand it, this is still on schedule for .NET Standard 2.1 per  https://github.com/dotnet/corefx/issues/15830, correct?)\r\n\r\n"},{"Id":"8868523017","Type":"IssuesEvent","CreatedAt":"2019-01-11T00:22:06","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/1049","RelatedDescription":"Closed issue \"String Enhancements\" (#1049) at dotnet/standard","RelatedBody":"In .NET Core >=2.1 there exists a `.Join()` method that takes strings and chars, and a `.Split()` method that takes strings and chars. However in .NET Standard, `.Join()` only accepts strings, and `.Split()` only accepts chars. This is an odd seeming, and inconvenient, limitation. Can this be added to a future version?"}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"8869219275","Type":"IssuesEvent","CreatedAt":"2019-01-11T03:59:12","Actor":"karelz","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/34540","RelatedDescription":"Closed issue \"Socket SendFile or BeginSendFile Is there a size limit\" (#34540) at dotnet/corefx","RelatedBody":"Win7  3G size file  get Exception"},{"Id":"8869021082","Type":"IssuesEvent","CreatedAt":"2019-01-11T02:53:36","Actor":"SuYiQianYei","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/34540","RelatedDescription":"Opened issue \"Socket SendFile or BeginSendFile Is there a size limit\" (#34540) at dotnet/corefx","RelatedBody":"Win7  3G size file  get Exception"},{"Id":"8869017943","Type":"PullRequestEvent","CreatedAt":"2019-01-11T02:52:41","Actor":"Dotnet-GitSync-Bot","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/34539","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#34539) at dotnet/corefx","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"8869383909","Type":"PullRequestEvent","CreatedAt":"2019-01-11T05:00:13","Actor":"dotnet-automerge-bot","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/32382","RelatedDescription":"Merged pull request \"Merge master to master-vs-deps\" (#32382) at dotnet/roslyn","RelatedBody":"\nThis is an automatically generated pull request from master into master-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-master-vs-deps\ngit reset --hard upstream/master-vs-deps\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push merges/master-to-master-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"8869383609","Type":"PullRequestEvent","CreatedAt":"2019-01-11T05:00:07","Actor":"dotnet-automerge-bot","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/32383","RelatedDescription":"Merged pull request \"Merge dev16.1-preview1 to dev16.1-preview1-vs-deps\" (#32383) at dotnet/roslyn","RelatedBody":"\nThis is an automatically generated pull request from dev16.1-preview1 into dev16.1-preview1-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/dev16.1-preview1-to-dev16.1-preview1-vs-deps\ngit reset --hard upstream/dev16.1-preview1-vs-deps\ngit merge upstream/dev16.1-preview1\n# Fix merge conflicts\ngit commit\ngit push merges/dev16.1-preview1-to-dev16.1-preview1-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"8869303543","Type":"PullRequestEvent","CreatedAt":"2019-01-11T04:30:23","Actor":"dotnet-automerge-bot","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/32377","RelatedDescription":"Merged pull request \"Merge dev16.0-preview2 to master\" (#32377) at dotnet/roslyn","RelatedBody":"\nThis is an automatically generated pull request from dev16.0-preview2 into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/dev16.0-preview2-to-master\ngit reset --hard upstream/master\ngit merge upstream/dev16.0-preview2\n# Fix merge conflicts\ngit commit\ngit push merges/dev16.0-preview2-to-master --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"8869303284","Type":"PullRequestEvent","CreatedAt":"2019-01-11T04:30:18","Actor":"dotnet-automerge-bot","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/32379","RelatedDescription":"Merged pull request \"Merge dev16.0-preview2-vs-deps to master-vs-deps\" (#32379) at dotnet/roslyn","RelatedBody":"\nThis is an automatically generated pull request from dev16.0-preview2-vs-deps into master-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/dev16.0-preview2-vs-deps-to-master-vs-deps\ngit reset --hard upstream/master-vs-deps\ngit merge upstream/dev16.0-preview2-vs-deps\n# Fix merge conflicts\ngit commit\ngit push merges/dev16.0-preview2-vs-deps-to-master-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"8869303069","Type":"PullRequestEvent","CreatedAt":"2019-01-11T04:30:14","Actor":"dotnet-automerge-bot","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/32381","RelatedDescription":"Merged pull request \"Merge dev16.0-preview2 to dev16.0-preview2-vs-deps\" (#32381) at dotnet/roslyn","RelatedBody":"\nThis is an automatically generated pull request from dev16.0-preview2 into dev16.0-preview2-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/dev16.0-preview2-to-dev16.0-preview2-vs-deps\ngit reset --hard upstream/dev16.0-preview2-vs-deps\ngit merge upstream/dev16.0-preview2\n# Fix merge conflicts\ngit commit\ngit push merges/dev16.0-preview2-to-dev16.0-preview2-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"8869302828","Type":"PullRequestEvent","CreatedAt":"2019-01-11T04:30:08","Actor":"dotnet-automerge-bot","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/32384","RelatedDescription":"Merged pull request \"Merge dev16.0-preview2 to features/enhanced-using\" (#32384) at dotnet/roslyn","RelatedBody":"\nThis is an automatically generated pull request from dev16.0-preview2 into features/enhanced-using.\n\n``` bash\ngit fetch --all\ngit checkout merges/dev16.0-preview2-to-features/enhanced-using\ngit reset --hard upstream/features/enhanced-using\ngit merge upstream/dev16.0-preview2\n# Fix merge conflicts\ngit commit\ngit push merges/dev16.0-preview2-to-features/enhanced-using --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"8869140118","Type":"IssuesEvent","CreatedAt":"2019-01-11T03:31:46","Actor":"jcouv","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/32111","RelatedDescription":"Closed issue \"Adjust pattern-based lookup for `await foreach`\" (#32111) at dotnet/roslyn","RelatedBody":"Pattern-based 'await foreach' should find 'GetAsyncEnumerator' and 'MoveNextAsync' by binding them with no arguments.\r\n\r\nSo `GetAsyncEnumerator(params int[] x)` or `GetAsyncEnumerator(int optional = 0)` would be recognized, in addition to `GetAsyncEnumerator()` and `GetAsyncEnumerator(CancellationToken token = default)`.\r\n\r\n"}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"8868156465","Type":"PullRequestEvent","CreatedAt":"2019-01-10T22:48:18","Actor":"Dotnet-GitSync-Bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/6806","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#6806) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"8867847736","Type":"PullRequestEvent","CreatedAt":"2019-01-10T21:46:42","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/6700","RelatedDescription":"Merged pull request \"[CppCodeGen] Enable reflection support\" (#6700) at dotnet/corert","RelatedBody":"With this change and https://github.com/dotnet/corert/pull/6695 reflection tests are passed with following constraints:\r\n- Some tests are skipped due to missing exceptions support\r\n- `TestByRefLikeTypeMethod` is skipped (it's necessary to implement `RhGetCodeTarget` for CppCodeGen)\r\n- `TestByRefReturnInvoke` is skipped (it's necessary to implement Nullable box/unbox)\r\n\r\nAlso https://github.com/dotnet/corert/issues/6405 and https://github.com/dotnet/corert/issues/6423 should be fixed."},{"Id":"8867843399","Type":"PullRequestEvent","CreatedAt":"2019-01-10T21:45:49","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/6735","RelatedDescription":"Merged pull request \"[CppCodeGen] Enable Delegates tests\" (#6735) at dotnet/corert","RelatedBody":""},{"Id":"8867435229","Type":"PullRequestEvent","CreatedAt":"2019-01-10T20:29:42","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/6805","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr,corefx\" (#6805) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr,corefx\n\n\n**Please REBASE this PR when merging**\n\n cc @GrabYourPitchforks @benaadams @marek-safar"}],"ResultType":"GitHubEvent"},"SDK":{"Events":[],"ResultType":"GitHubEvent"},"Home-Issues":{"Issues":[{"Id":"395863354","IsPullRequest":true,"CreatedAt":"2019-01-09T22:28:14","Actor":"ErikEJ","Number":"128","RawContent":null,"Title":"Update of EF description","State":"closed","Body":"@divega !","Url":"https://github.com/dotnet/foundation/pull/128","RelatedDescription":"Closed or merged PR \"Update of EF description\" (#128)"},{"Id":"395901602","IsPullRequest":true,"CreatedAt":"2019-01-05T03:23:39","Actor":"MarcBruins","Number":"129","RawContent":null,"Title":"Update to absolute path","State":"closed","Body":"Update to absolute path so that when this list is copied the link will actually work","Url":"https://github.com/dotnet/foundation/pull/129","RelatedDescription":"Closed or merged PR \"Update to absolute path\" (#129)"},{"Id":"395705579","IsPullRequest":true,"CreatedAt":"2019-01-04T00:22:42","Actor":"carloscds","Number":"127","RawContent":null,"Title":"Update documentation information","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/127","RelatedDescription":"Closed or merged PR \"Update documentation information\" (#127)"},{"Id":"391459057","IsPullRequest":true,"CreatedAt":"2019-01-03T04:47:09","Actor":"manne","Number":"122","RawContent":null,"Title":"targets the existing document","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/122","RelatedDescription":"Closed or merged PR \"targets the existing document\" (#122)"},{"Id":"384569679","IsPullRequest":true,"CreatedAt":"2019-01-03T04:46:31","Actor":"JamesNK","Number":"121","RawContent":null,"Title":"Add Newtonsoft.Json","State":"closed","Body":"// @jongalloway ","Url":"https://github.com/dotnet/foundation/pull/121","RelatedDescription":"Closed or merged PR \"Add Newtonsoft.Json\" (#121)"},{"Id":"391460225","IsPullRequest":false,"CreatedAt":"2018-12-16T11:57:53","Actor":"manne","Number":"126","RawContent":null,"Title":"No logo provided for Prism","State":"open","Body":"Can/should this [image](http://prismlibrary.github.io/images/logo-prism-symbol@2x.png) be used?\r\n\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L155-L157","Url":"https://github.com/dotnet/foundation/issues/126","RelatedDescription":"Open issue \"No logo provided for Prism\" (#126)"},{"Id":"391459919","IsPullRequest":false,"CreatedAt":"2018-12-16T11:53:31","Actor":"manne","Number":"125","RawContent":null,"Title":"Missing logo for MVVM Light Toolkit","State":"open","Body":"`https://raw.githubusercontent.com/paulcbetts/mvvmlight/master/Installer/InstallItems/html/MVVM_BlackText_190x147.png` results in a 404.\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L137-L139","Url":"https://github.com/dotnet/foundation/issues/125","RelatedDescription":"Open issue \"Missing logo for MVVM Light Toolkit\" (#125)"},{"Id":"391459812","IsPullRequest":false,"CreatedAt":"2018-12-16T11:52:07","Actor":"manne","Number":"124","RawContent":null,"Title":"Missing logo for Umbraco","State":"open","Body":"`https://fbcdn-profile-a.akamaihd.net/hprofile-ak-xap1/v/t1.0-1/p160x160/971596_519168901464439_566592989_n.png?oh=ce61e5b4cbd60c0d99c4164cbb05a434&oe=54F091C9&__gda__=1424472439_c9f76213a915bc2af88246f464f29e8b` results in a 404.\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L149-L151","Url":"https://github.com/dotnet/foundation/issues/124","RelatedDescription":"Open issue \"Missing logo for Umbraco\" (#124)"},{"Id":"391459677","IsPullRequest":false,"CreatedAt":"2018-12-16T11:50:29","Actor":"manne","Number":"123","RawContent":null,"Title":"Missing logo for Steeltoe","State":"open","Body":"`https://brandfolder.com/pivotal-assets/attachments/ohxttd-7yxa60-clvf50/pivotal-assets-pivotal-genericfile.png` redirects to a sign in page\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L128-L130","Url":"https://github.com/dotnet/foundation/issues/123","RelatedDescription":"Open issue \"Missing logo for Steeltoe\" (#123)"},{"Id":"384212839","IsPullRequest":true,"CreatedAt":"2018-11-26T09:33:50","Actor":"stefanov-stefan","Number":"120","RawContent":null,"Title":"Added Telerik info","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/120","RelatedDescription":"Closed or merged PR \"Added Telerik info\" (#120)"},{"Id":"384212448","IsPullRequest":true,"CreatedAt":"2018-11-26T09:33:22","Actor":"stefanov-stefan","Number":"119","RawContent":null,"Title":"Added Telerik UWP proj","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/119","RelatedDescription":"Closed or merged PR \"Added Telerik UWP proj\" (#119)"},{"Id":"382378851","IsPullRequest":true,"CreatedAt":"2018-11-23T10:32:15","Actor":"pkgw","Number":"118","RawContent":null,"Title":"Update WorldWide Telescope","State":"closed","Body":"Some layout fixes, but the main change is that @pkgw is now the project director.","Url":"https://github.com/dotnet/foundation/pull/118","RelatedDescription":"Closed or merged PR \"Update WorldWide Telescope\" (#118)"},{"Id":"380070557","IsPullRequest":true,"CreatedAt":"2018-11-23T10:31:49","Actor":"leastprivilege","Number":"117","RawContent":null,"Title":"Update identityserver.md","State":"closed","Body":"significant whitespace","Url":"https://github.com/dotnet/foundation/pull/117","RelatedDescription":"Closed or merged PR \"Update identityserver.md\" (#117)"},{"Id":"379731798","IsPullRequest":true,"CreatedAt":"2018-11-13T04:22:32","Actor":"leastprivilege","Number":"114","RawContent":null,"Title":"Update identityserver.md","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/114","RelatedDescription":"Closed or merged PR \"Update identityserver.md\" (#114)"},{"Id":"379777451","IsPullRequest":true,"CreatedAt":"2018-11-13T04:21:35","Actor":"scottbrady91","Number":"116","RawContent":null,"Title":"Update to IdentityManager project","State":"closed","Body":"My employer and I have recently taken over the IdentityManager project from Dom & Brock. I've updated the IdentityManager page to reflect this and the newer version of the core repo.","Url":"https://github.com/dotnet/foundation/pull/116","RelatedDescription":"Closed or merged PR \"Update to IdentityManager project\" (#116)"},{"Id":"379733880","IsPullRequest":true,"CreatedAt":"2018-11-13T04:20:23","Actor":"leastprivilege","Number":"115","RawContent":null,"Title":"Create identitymodel.md","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/115","RelatedDescription":"Closed or merged PR \"Create identitymodel.md\" (#115)"},{"Id":"371941750","IsPullRequest":true,"CreatedAt":"2018-11-01T16:20:07","Actor":"SeanKilleen","Number":"113","RawContent":null,"Title":"Update logo for couchbase-lite in projects.json","State":"closed","Body":"Uses a working link to the logo.\r\n\r\nResolves https://github.com/dotnet/dotnetfoundation-website/issues/65\r\n\r\nFix can be verified by copying/pasting the URL into a browser.","Url":"https://github.com/dotnet/foundation/pull/113","RelatedDescription":"Closed or merged PR \"Update logo for couchbase-lite in projects.json\" (#113)"},{"Id":"365089074","IsPullRequest":false,"CreatedAt":"2018-09-29T02:45:47","Actor":"athinboy","Number":"112","RawContent":null,"Title":"Suggest: key  F12  go to source code of dotnetcore  rather then metadata","State":"open","Body":"Apology for my poor english!\r\n\r\nI have change to Java due to the boss's decision .   I think dotnet  need a big change. In China, more and more dotnet project go to die,  but new java project continuously increase!\r\n\r\nI suggest:key  F12  go to source code of dotnetcore  rather then metadata(e.g.    ***.dll.source.zip \\****.exe.source.zip),   maybe there is already done,but i don't know. \r\n\r\nthanks!\r\n","Url":"https://github.com/dotnet/foundation/issues/112","RelatedDescription":"Open issue \"Suggest: key  F12  go to source code of dotnetcore  rather then metadata\" (#112)"},{"Id":"356296763","IsPullRequest":false,"CreatedAt":"2018-09-02T16:49:34","Actor":"adamralph","Number":"111","RawContent":null,"Title":"Sourcelink location is confusing","State":"open","Body":"The README has link under the \"Cameron Taggart\" section pointing to https://github.com/ctaggart/SourceLink but the project now seems to live under the \"dotnet\" org in https://github.com/dotnet/sourcelink/ which suggests the link should be changed to that, and moved under the \"Microsoft\" section.","Url":"https://github.com/dotnet/foundation/issues/111","RelatedDescription":"Open issue \"Sourcelink location is confusing\" (#111)"},{"Id":"353832272","IsPullRequest":true,"CreatedAt":"2018-08-27T16:21:55","Actor":"jkonicki","Number":"110","RawContent":null,"Title":"Fix - add missing comma","State":"closed","Body":"@jongalloway - Looks like I missed a comma in my previous PR. Here is the fix.","Url":"https://github.com/dotnet/foundation/pull/110","RelatedDescription":"Closed or merged PR \"Fix - add missing comma\" (#110)"},{"Id":"352736883","IsPullRequest":true,"CreatedAt":"2018-08-23T23:10:07","Actor":"anthonychu","Number":"108","RawContent":null,"Title":"Fix errors in projects.json","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/108","RelatedDescription":"Closed or merged PR \"Fix errors in projects.json\" (#108)"},{"Id":"353536205","IsPullRequest":true,"CreatedAt":"2018-08-23T23:09:07","Actor":"jkonicki","Number":"109","RawContent":null,"Title":"Add Steeltoe to the project listing","State":"closed","Body":"Hi @jongalloway, Here is the PR for adding Steeltoe to the projects listing.  Let me know if you need any changes. \r\nThanks.","Url":"https://github.com/dotnet/foundation/pull/109","RelatedDescription":"Closed or merged PR \"Add Steeltoe to the project listing\" (#109)"},{"Id":"339545098","IsPullRequest":true,"CreatedAt":"2018-08-17T23:19:54","Actor":"slide","Number":"105","RawContent":null,"Title":"Add DLR/IronPython2/IronPython3","State":"closed","Body":"Add DLR/IronPython2/IronPython3 to project list.","Url":"https://github.com/dotnet/foundation/pull/105","RelatedDescription":"Closed or merged PR \"Add DLR/IronPython2/IronPython3\" (#105)"},{"Id":"336936558","IsPullRequest":false,"CreatedAt":"2018-08-07T07:06:40","Actor":"tomkerkhove","Number":"104","RawContent":null,"Title":"About still mentions CodePlex","State":"closed","Body":"About still mentions CodePlex which is now in archive mode.\r\n\r\n![image](https://user-images.githubusercontent.com/4345663/42086259-e0b7d008-7b92-11e8-96c9-02ee61ddc457.png)\r\n\r\nIs this something that I can PR?","Url":"https://github.com/dotnet/foundation/issues/104","RelatedDescription":"Closed issue \"About still mentions CodePlex\" (#104)"},{"Id":"340355507","IsPullRequest":false,"CreatedAt":"2018-07-11T18:28:16","Actor":"Eilon","Number":"107","RawContent":null,"Title":"Links to .NET Foundation web site use HTTP instead of HTTPS","State":"open","Body":"It appears that HTTPS works just fine: https://www.dotnetfoundation.org/\r\n\r\nBut the links at these places use HTTP:\r\n1. The link in the header of https://github.com/dotnet/home\r\n2. The link in the header of https://github.com/dotnet\r\n3. Some links in https://github.com/dotnet/home/blob/master/README.md (both to .NET Foundation, and a GitHub link to another project)\r\n\r\nThese links should all change to HTTPS.","Url":"https://github.com/dotnet/foundation/issues/107","RelatedDescription":"Open issue \"Links to .NET Foundation web site use HTTP instead of HTTPS\" (#107)"},{"Id":"340126921","IsPullRequest":false,"CreatedAt":"2018-07-11T07:41:25","Actor":"glatzert","Number":"106","RawContent":null,"Title":"Updates are not requested from local WSUS","State":"open","Body":"The Team somewhen Mention, that fixes should be installed automatically, if .NET Core is on a Windows Server.\r\nThis seems not to work. What are the prerequisits for this to be working?","Url":"https://github.com/dotnet/foundation/issues/106","RelatedDescription":"Open issue \"Updates are not requested from local WSUS\" (#106)"},{"Id":"326192782","IsPullRequest":true,"CreatedAt":"2018-05-24T16:33:09","Actor":"danmosemsft","Number":"103","RawContent":null,"Title":"Add ML.NET to readme","State":"closed","Body":"cc @shauheen @jongalloway ","Url":"https://github.com/dotnet/foundation/pull/103","RelatedDescription":"Closed or merged PR \"Add ML.NET to readme\" (#103)"},{"Id":"316146229","IsPullRequest":true,"CreatedAt":"2018-05-18T19:05:34","Actor":"Cheesebaron","Number":"100","RawContent":null,"Title":"Create mvvmcross.md","State":"closed","Body":"Added MvvmCross as project as part of on-boarding.\r\n\r\nhttps://github.com/MvvmCross/MvvmCross/issues/2415","Url":"https://github.com/dotnet/foundation/pull/100","RelatedDescription":"Closed or merged PR \"Create mvvmcross.md\" (#100)"},{"Id":"321003666","IsPullRequest":true,"CreatedAt":"2018-05-18T19:05:07","Actor":"shauheen","Number":"102","RawContent":null,"Title":"Update projects.json adding MLNET","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/102","RelatedDescription":"Closed or merged PR \"Update projects.json adding MLNET\" (#102)"},{"Id":"321003407","IsPullRequest":true,"CreatedAt":"2018-05-18T19:04:23","Actor":"shauheen","Number":"101","RawContent":null,"Title":"Create mlnet.md","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/101","RelatedDescription":"Closed or merged PR \"Create mlnet.md\" (#101)"}],"ResultType":"GitHubIssue"},"CoreCLR-Issues":{"Issues":[{"Id":"398122553","IsPullRequest":false,"CreatedAt":"2019-01-11T03:57:47","Actor":"benaadams","Number":"21951","RawContent":null,"Title":"RyuJIT bounds checks not eliminated for readonly arrays","State":"open","Body":"Range analysis doesn't take into account readonly arrays and you need to make a function local reference to eliminate the range check.\r\n\r\nhttps://github.com/dotnet/coreclr/issues/5371 regressed due to https://github.com/dotnet/coreclr/pull/15756\r\n\r\nIt shouldn't need to be conservative for a readonly array?\r\n\r\n/cc @briansull @AndyAyersMS @mikedn ","Url":"https://github.com/dotnet/coreclr/issues/21951","RelatedDescription":"Open issue \"RyuJIT bounds checks not eliminated for readonly arrays\" (#21951)"},{"Id":"397729632","IsPullRequest":true,"CreatedAt":"2019-01-11T02:48:45","Actor":"dotnet-maestro-bot","Number":"21927","RawContent":null,"Title":"Update CoreFx, PgoData to preview.19060.1, master-20190110.3, respectively (master)","State":"closed","Body":"/cc @dotnet/maestro-reviewers-core","Url":"https://github.com/dotnet/coreclr/pull/21927","RelatedDescription":"Closed or merged PR \"Update CoreFx, PgoData to preview.19060.1, master-20190110.3, respectively (master)\" (#21927)"},{"Id":"398010317","IsPullRequest":true,"CreatedAt":"2019-01-11T02:48:04","Actor":"stephentoub","Number":"21939","RawContent":null,"Title":"Add WithCancellation for async enumerables","State":"closed","Body":"Contributes to https://github.com/dotnet/corefx/issues/33909\r\ncc: @jcouv, @kouvel, @tarekgh \r\n\r\nRelates to async-streams umbrella: https://github.com/dotnet/roslyn/issues/24037","Url":"https://github.com/dotnet/coreclr/pull/21939","RelatedDescription":"Closed or merged PR \"Add WithCancellation for async enumerables\" (#21939)"},{"Id":"397731107","IsPullRequest":true,"CreatedAt":"2019-01-11T02:35:57","Actor":"fiigii","Number":"21928","RawContent":null,"Title":"Don't optimize MultiplyNoFlags away","State":"closed","Body":"Contribute to https://github.com/dotnet/coreclr/issues/21899\r\n","Url":"https://github.com/dotnet/coreclr/pull/21928","RelatedDescription":"Closed or merged PR \"Don't optimize MultiplyNoFlags away\" (#21928)"},{"Id":"398102989","IsPullRequest":true,"CreatedAt":"2019-01-11T02:23:09","Actor":"erozenfeld","Number":"21950","RawContent":null,"Title":"Improvements for object stack allocation.","State":"open","Body":"This change enables object stack allocation for more cases:\r\n\r\n1. Objects with gc fields can now be stack-allocated.\r\n2. Object stack allocation is enabled for x86.\r\n\r\nObjectAllocator updates the types of trees containing references\r\nto possibly-stack-allocated objects to TYP_BYREF or TYP_I_IMPL as appropriate.\r\nThat allows us to remove the hacks in gcencode.cpp and refine reporting of pointers:\r\nthe pointer is not reported when we can prove that it always points to a stack-allocated object or is null (typed as TYP_I_IMPL);\r\nthe pointer is reported as an interior pointer when it may point to either a stack-allocated object or a heap-allocated object (typed as TYP_BYREF);\r\nthe pointer is reported as a normal pointer when it points to a heap-allocated object (typed as TYP_REF).\r\n\r\nObjectAllocator also adds flags to indirections:\r\nGTF_IND_TGTANYWHERE when the indirection may be the heap or the stack\r\n(that results in checked write barriers used for writes)\r\nor the new GTF_IND_TGT_NOT_HEAP when the indirection is null or stack memory\r\n(that results in no barrier used for writes).","Url":"https://github.com/dotnet/coreclr/pull/21950","RelatedDescription":"Open PR \"Improvements for object stack allocation.\" (#21950)"},{"Id":"397978279","IsPullRequest":true,"CreatedAt":"2019-01-11T01:35:09","Actor":"briansull","Number":"21936","RawContent":null,"Title":"New test","State":"closed","Body":"A new test for #21804","Url":"https://github.com/dotnet/coreclr/pull/21936","RelatedDescription":"Closed or merged PR \"New test\" (#21936)"},{"Id":"398084332","IsPullRequest":false,"CreatedAt":"2019-01-11T00:59:26","Actor":"sunkin351","Number":"21949","RawContent":null,"Title":"System.ExecutionEngineException on call to GC.Collect()","State":"open","Body":"In an attempt to see if a garbage collection would invalidate a Function Pointer returned from a call to `Marshal.GetFunctionPointerForDelegate<T>()`, I call `GC.Collect()` directly after and it throws an `ExecutionEngineException`. Is this a bug with .NET Core or am I doing something wrong?\r\n\r\n.NET Runtime version: `.NET Core 2.1`","Url":"https://github.com/dotnet/coreclr/issues/21949","RelatedDescription":"Open issue \"System.ExecutionEngineException on call to GC.Collect()\" (#21949)"},{"Id":"398078907","IsPullRequest":true,"CreatedAt":"2019-01-11T00:35:57","Actor":"GrabYourPitchforks","Number":"21948","RawContent":null,"Title":"[WIP] UTF-8 validation apis","State":"open","Body":"__-- Work in progress--__\r\n\r\nThis is the first batch of the improved UTF-8 validation and transcoding APIs. There's a single workhorse method used for validation and for counting the number of code units that would result from transcoding.\r\n\r\nPhilosophically, these methods differ from existing methods on `System.Text.Encoding`. The existing `Encoding` methods really push consumers to transcode all data to UTF-16 so that they can take advantage of existing UTF-16 data manipulation and inspection APIs. Instead, these new APIs expose information about the underlying structure of the UTF-8 data itself. The intent is that error handling (\"I found an invalid subsequence in the stream; what do I do now?\") is pushed to a higher layer. That higher layer can be built on top of this API and other inspection APIs in order to provide the desired error handling semantics. This will be clearer when the `OperationStatus`-based APIs come online in a future PR.\r\n\r\n__Not finished yet:__\r\n\r\n* The transcoding APIs, because I'm reacting to some late-breaking changes before moving them over from corefxlab to this repo.\r\n* Vectorized code paths, because they didn't have good unit test coverage. They'll come in a future PR.\r\n\r\nThe eventual goal is that this API will be the foundation of methods like `Encoding.UTF8.GetCharCount` / `GetByteCount`. It is designed to be a drop-in replacement for those methods for the most part.\r\n\r\nI don't have benchmark information available at the moment because I removed the vectorized code paths, invalidating the existing benchmark data. Will rerun it and provide updated data when I get a chance.\r\n\r\nUnit tests at https://github.com/dotnet/corefx/pull/34538.","Url":"https://github.com/dotnet/coreclr/pull/21948","RelatedDescription":"Open PR \"[WIP] UTF-8 validation apis\" (#21948)"},{"Id":"397978317","IsPullRequest":true,"CreatedAt":"2019-01-11T00:29:26","Actor":"BruceForstall","Number":"21937","RawContent":null,"Title":"Remove altjit jobs in CI","State":"closed","Body":"We have full native jobs for arm32 and arm64 for all scenarios, which\r\nis a superset of everything we've run using altjit. So the altjit\r\njobs are no longer necessary. In addition, the altjit jobs,\r\nespecially the corefx jobs, have never run cleanly, for reasons\r\nthat have never been investigated or understood. Since we have\r\nfull native corefx runs, there is no reason to look into the altjit\r\nfailures.","Url":"https://github.com/dotnet/coreclr/pull/21937","RelatedDescription":"Closed or merged PR \"Remove altjit jobs in CI\" (#21937)"},{"Id":"398072938","IsPullRequest":true,"CreatedAt":"2019-01-11T00:10:58","Actor":"sbomer","Number":"21947","RawContent":null,"Title":"Use a blob feed specifically for coreclr","State":"open","Body":"This will reduce lock contention with other repos due to\r\nhttps://github.com/dotnet/arcade/issues/1175.\r\n\r\nAddresses https://github.com/dotnet/coreclr/issues/21942.","Url":"https://github.com/dotnet/coreclr/pull/21947","RelatedDescription":"Open PR \"Use a blob feed specifically for coreclr\" (#21947)"},{"Id":"398028022","IsPullRequest":true,"CreatedAt":"2019-01-10T23:24:56","Actor":"sywhang","Number":"21940","RawContent":null,"Title":"disable dynamo test on arm32/64","State":"closed","Body":"Disabling this test on ARM32/64 on Linux to get the ARM legs to pass while the failure is being investigated. https://github.com/dotnet/coreclr/issues/17129","Url":"https://github.com/dotnet/coreclr/pull/21940","RelatedDescription":"Closed or merged PR \"disable dynamo test on arm32/64\" (#21940)"},{"Id":"398053673","IsPullRequest":false,"CreatedAt":"2019-01-10T23:00:48","Actor":"morganbr","Number":"21946","RawContent":null,"Title":"Re-enable signing for System.Private.CoreLib","State":"open","Body":"System.Private.CoreLib isn't currently being signed due to https://github.com/dotnet/arcade/issues/1582 . Once that's resolved, the block below should be removed https://github.com/dotnet/coreclr/blob/234bbb509e9ea8b08787fcd509edd6141e37d751/eng/Signing.props#L50-L53","Url":"https://github.com/dotnet/coreclr/issues/21946","RelatedDescription":"Open issue \"Re-enable signing for System.Private.CoreLib\" (#21946)"},{"Id":"398052350","IsPullRequest":true,"CreatedAt":"2019-01-10T22:56:42","Actor":"maryamariyan","Number":"21945","RawContent":null,"Title":"Add System.Reflection.Emit.DynamicILInfo","State":"open","Body":"Related to https://github.com/dotnet/corefx/issues/12055\r\n\r\ncc: @Anipik @danmosemsft \r\n\r\nrelated corefx PR: https://github.com/dotnet/corefx/pull/34532","Url":"https://github.com/dotnet/coreclr/pull/21945","RelatedDescription":"Open PR \"Add System.Reflection.Emit.DynamicILInfo\" (#21945)"},{"Id":"398051688","IsPullRequest":true,"CreatedAt":"2019-01-10T22:54:31","Actor":"erozenfeld","Number":"21944","RawContent":null,"Title":"Generate non-null assertion for byrefs if we can't find corresponding refs","State":"open","Body":"When we have a non-null fact about a byref, we try to find the corresponding\r\nref and generate an assertion about the ref. Then it can be used on byrefs if the offset is not too big.\r\nWe use both trees and value numbers to find the ref. When the ref wasn't found we bailed on generating\r\nthe assertion.\r\n\r\nI found that we get a number of good diffs if we generate assertions for byrefs when refs can't be found\r\nso this change enables that.","Url":"https://github.com/dotnet/coreclr/pull/21944","RelatedDescription":"Open PR \"Generate non-null assertion for byrefs if we can't find corresponding refs\" (#21944)"},{"Id":"397806391","IsPullRequest":true,"CreatedAt":"2019-01-10T22:47:35","Actor":"marek-safar","Number":"21931","RawContent":null,"Title":"Moves public interface ISymDocumentWriter to shared partition","State":"closed","Body":"","Url":"https://github.com/dotnet/coreclr/pull/21931","RelatedDescription":"Closed or merged PR \"Moves public interface ISymDocumentWriter to shared partition\" (#21931)"},{"Id":"398042488","IsPullRequest":true,"CreatedAt":"2019-01-10T22:25:38","Actor":"janvorli","Number":"21943","RawContent":null,"Title":"Add cleanup of the TypeIDMap at unload time","State":"open","Body":"The TypeIDMap is stored in the AppDomain and contains two hash maps -\r\nid to MethodTable and MethodTable to id. We were missing removing\r\nentries for MethodTables that belong to a LoaderAllocator that's being\r\ndestroyed. Thus we were leaking some memory, but also causing potential\r\nissue. When at some point after the LoaderAllocator destruction a\r\nMethodTable gets the same address as one of the MethodTables that was\r\ndestroyed in the past and was also recorded in the TypeIDMap, we would\r\nincorrectly reuse the id. That is problematic in case the old\r\nMethodTable didn't require fat id and the new does or vice versa.\r\nI've hit assert due to that while running System.Numerics.Vectors.Tests\r\ninside an unloadable AssemblyLoadContext.\r\n\r\nThe implementation of the fix is very primitive. It is expected that we\r\nwill be able to get rid of the TypeIDMap in a near future and so it is\r\nnot worth optimizing.","Url":"https://github.com/dotnet/coreclr/pull/21943","RelatedDescription":"Open PR \"Add cleanup of the TypeIDMap at unload time\" (#21943)"},{"Id":"398038660","IsPullRequest":false,"CreatedAt":"2019-01-10T22:14:06","Actor":"sbomer","Number":"21942","RawContent":null,"Title":"Use a coreclr-specific blob feed for build assets","State":"open","Body":"We should change our build output blob feed to https://dotnetfeed.blob.core.windows.net/dotnet-coreclr/index.json to avoid lock contention (due to https://github.com/dotnet/arcade/issues/1175) with other repos. This should reduce the frequency with which we see builds fail due to a timeout while waiting on an exclusive lock.\r\n\r\ncorefx and core-setup will need to be updated to pull our packages from this feed @safern @rakeshsinghranchi.","Url":"https://github.com/dotnet/coreclr/issues/21942","RelatedDescription":"Open issue \"Use a coreclr-specific blob feed for build assets\" (#21942)"},{"Id":"398034731","IsPullRequest":false,"CreatedAt":"2019-01-10T22:02:34","Actor":"sbomer","Number":"21941","RawContent":null,"Title":"Upload symbols to symbol server","State":"open","Body":"With https://github.com/dotnet/coreclr/pull/21769, we publish symbol packages to a blob feed, but they don't yet get uploaded to a symbol server.\r\n\r\n- The arcade migration docs mention that `IsShipping` packages have symbols published to the symbol server by default.\r\n- The onboarding samples do pass access tokens for the symbol server in the publish command: `/p:DotNetSymbolServerTokenMsdl=$(microsoft-symbol-server-pat)` `/p:DotNetSymbolServerTokenSymWeb=$(symweb-symbol-server-pat)`.\r\n- Yet the default arcade publish logic appears not to upload to symweb using the SymbolUploader package unless UsingToolSymbolUploader is true, which isn't the case in any of the samples.\r\n\r\nCorefx has additional symbol publishing logic using the SymbolUploader package.","Url":"https://github.com/dotnet/coreclr/issues/21941","RelatedDescription":"Open issue \"Upload symbols to symbol server\" (#21941)"},{"Id":"397971226","IsPullRequest":true,"CreatedAt":"2019-01-10T21:44:58","Actor":"Dotnet-GitSync-Bot","Number":"21934","RawContent":null,"Title":"Mirror changes from dotnet/corert","State":"closed","Body":"This PR contains mirrored changes from dotnet/corert\n\n\n**Please REBASE this PR when merging**\n\n cc @marek-safar","Url":"https://github.com/dotnet/coreclr/pull/21934","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corert\" (#21934)"},{"Id":"397997422","IsPullRequest":false,"CreatedAt":"2019-01-10T20:17:09","Actor":"lizetpena","Number":"21938","RawContent":null,"Title":"Question on WinDgb and the SOS extension for debugging dotnet/coreclr on Windows OS.","State":"open","Body":"I used to teach and advanced C# debugging class long ago that would teach how to create memory dumps and analyze the heaps using WinDbg and SOS. This was for the 3.5 to 4.0 CLRs. For production crashes where the IDE is not available and the IntelliTrace collector is not a possibility because the developers don't have the Ultimate VS editions, what is the recommendation to do production debugging in the case of .NET Core solutions? Does WinDbg or SOS exist for this? If so, where could I find the downloads and any documentation on these tools?\r\nThanks in advance,\r\n-Lizet","Url":"https://github.com/dotnet/coreclr/issues/21938","RelatedDescription":"Open issue \"Question on WinDgb and the SOS extension for debugging dotnet/coreclr on Windows OS.\" (#21938)"},{"Id":"397973872","IsPullRequest":false,"CreatedAt":"2019-01-10T19:12:35","Actor":"BruceForstall","Number":"21935","RawContent":null,"Title":"Failure in Vector3Interop_ro_cmd","State":"open","Body":"For x64, JitStress=1/2.\r\n\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/view/x64/job/jitstress/job/x64_checked_windows_nt_jitstress1/738/\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/view/x64/job/jitstress/job/x64_checked_windows_nt_jitstress2/728/\r\n\r\nLooks like a GC hole.\r\n\r\n```\r\n19:01:32 \r\n      JIT_SIMD._Vector3Interop_ro_Vector3Interop_ro_._Vector3Interop_ro_Vector3Interop_ro_cmd [FAIL]\r\n19:01:32         \r\n19:01:32 \r\n        Assert failure(PID 7652 [0x00001de4], Thread: 11872 [0x2e60]): !CREATE_CHECK_STRING(!\"Detected use of a corrupted OBJECTREF. Possible GC hole.\")\r\n19:01:32         \r\n19:01:32         CORECLR! `Object::ValidateInner'::`1'::catch$12 + 0x13E (0x00007ffc`9599dc54)\r\n19:01:32         CORECLR! CallSettingFrame + 0x20 (0x00007ffc`9588cc50)\r\n19:01:32         CORECLR! _FrameHandler3::CxxCallCatchBlock + 0x15A (0x00007ffc`9588b3fa)\r\n19:01:32         NTDLL! RtlCaptureContext + 0x3C3 (0x00007ffc`b2122a63)\r\n19:01:32         CORECLR! Object::ValidateInner + 0x73 (0x00007ffc`94fbd433)\r\n19:01:32         CORECLR! Object::Validate + 0x13A (0x00007ffc`94fbd29a)\r\n19:01:32         CORECLR! OBJECTREF::operator= + 0x28 (0x00007ffc`94fb54b8)\r\n19:01:32         CORECLR! LayoutUpdateNative + 0x37A (0x00007ffc`95650ace)\r\n19:01:32         CORECLR! FmtValueTypeUpdateNative + 0x39D (0x00007ffc`9564db39)\r\n19:01:32         CORECLR! StubHelpers::ValueClassMarshaler__ConvertToNative + 0x1C9 (0x00007ffc`952cf929)\r\n19:01:32             File: d:\\j\\workspace\\x64_checked_w---02832afb\\src\\vm\\object.cpp Line: 775\r\n19:01:32             Image: D:\\j\\workspace\\x64_checked_w---02832afb\\bin\\tests\\Windows_NT.x64.Checked\\Tests\\Core_Root\\CoreRun.exe\r\n19:01:32         \r\n19:01:32         \r\n19:01:32   \r\n19:01:32   Return code:      1\r\n19:01:32   Raw output file:      D:\\j\\workspace\\x64_checked_w---02832afb\\bin\\tests\\Windows_NT.x64.Checked\\Reports\\JIT.SIMD\\Vector3Interop_ro\\Vector3Interop_ro.output.txt\r\n19:01:32   Raw output:\r\n19:01:32   BEGIN EXECUTION\r\n19:01:32          \"D:\\j\\workspace\\x64_checked_w---02832afb\\bin\\tests\\Windows_NT.x64.Checked\\Tests\\Core_Root\\corerun.exe\" Vector3Interop_ro.exe \r\n19:01:32         nativeCall_PInvoke_CheckVector3Size: sizeof(Vector3) == 12\r\n19:01:32         nativeCall_PInvoke_Vector3Arg:\r\n19:01:32             iVal 123\r\n19:01:32             sumOfEles(1.000000, 2.000000, 3.000000) = 6.000000\r\n19:01:32             str  abcdefg\r\n19:01:32             sumOfEles(10.000000, 11.000000, 12.000000) = 33.000000\r\n19:01:32         nativeCall_PInvoke_Vector3Arg_Unix:\r\n19:01:32             v3f32_xmm0: 1.000000 2.000000 3.000000\r\n19:01:32             f32_xmm2 - f32_xmm7: 100.000000 101.000000 102.000000 103.000000 104.000000 105.000000\r\n19:01:32             f32_mem0: 106.000000\r\n19:01:32             v3f32_mem1: 10.000000 20.000000 30.000000\r\n19:01:32             f32_mem2-3: 107.000000 108.000000\r\n19:01:32             sum = 1002.000000\r\n19:01:32         nativeCall_PInvoke_Vector3Arg_Unix2:\r\n19:01:32             v3f32_xmm0: 1.000000 2.000000 3.000000\r\n19:01:32             f32_xmm2 - f32_xmm7: 100.000000 101.000000 102.000000 103.000000 104.000000 105.000000\r\n19:01:32             f32_mem0: 106.000000\r\n19:01:32             v3f32_mem1: 4.000000 5.000000 6.000000\r\n19:01:32             f32_mem2-3: 107.000000 108.000000\r\n19:01:32             v3f32_mem4: 7.000000 8.000000 9.000000\r\n19:01:32             f32_mem5: 109.000000\r\n19:01:32             sum = 1090.000000\r\n19:01:32         nativeCall_PInvoke_Vector3Ret:\r\n19:01:32             Return value: (1.000000, 2.000000, 3.000000)\r\n19:01:32             Sum of return scalar values = 6.000000\r\n19:01:32         nativeCall_PInvoke_Vector3Array\r\n19:01:32             arrEle[0]: 1.000000 2.000000 3.000000\r\n19:01:32             arrEle[1]: 5.000000 6.000000 7.000000\r\n19:01:32             Sum = 24.000000\r\n19:01:32         nativeCall_PInvoke_Vector3InStruct\r\n19:01:32             First struct memeber: (1.000000 2.000000 3.000000) -> (2.000000 3.000000 4.000000)\r\n19:01:32             Second struct member: (5.000000 6.000000 7.000000) -> (6.000000 7.000000 8.000000)\r\n19:01:32             Sum of all return scalar values = 30.000000\r\n19:01:32         Expected: 100\r\n19:01:32         Actual: -1073740286\r\n19:01:32         END EXECUTION - FAILED\r\n19:01:32         FAILED\r\n19:01:32         Test Harness Exitcode is : 1\r\n19:01:32         \r\n19:01:32   To run the test:\r\n19:01:32   > set CORE_ROOT=D:\\j\\workspace\\x64_checked_w---02832afb\\bin\\tests\\Windows_NT.x64.Checked\\Tests\\Core_Root\r\n19:01:32   > D:\\j\\workspace\\x64_checked_w---02832afb\\bin\\tests\\Windows_NT.x64.Checked\\JIT\\SIMD\\Vector3Interop_ro\\Vector3Interop_ro.cmd\r\n19:01:32   \r\n19:01:32         Expected: True\r\n19:01:32         Actual:   False\r\n19:01:32         Stack Trace:\r\n19:01:32           D:\\j\\workspace\\x64_checked_w---02832afb\\bin\\tests\\Windows_NT.x64.Checked\\TestWrappers\\JIT.SIMD\\JIT.SIMD.XUnitWrapper.cs(3469,0): at JIT_SIMD._Vector3Interop_ro_Vector3Interop_ro_._Vector3Interop_ro_Vector3Interop_ro_cmd()\r\n```\r\n","Url":"https://github.com/dotnet/coreclr/issues/21935","RelatedDescription":"Open issue \"Failure in Vector3Interop_ro_cmd\" (#21935)"},{"Id":"397685900","IsPullRequest":true,"CreatedAt":"2019-01-10T18:03:04","Actor":"echesakovMSFT","Number":"21926","RawContent":null,"Title":"Disable what fails and blocks transitioning to Azure DevOps","State":"closed","Body":"1. Use CentOS 7 image for building Linux x64 coreclr (the same way it's done in buildpipeline). As a consequence, we don't need Linux_rhel7 build and test jobs.\r\n2. Use Debian.9.Amd64 queue instead of Debian.8.Amd64\r\n3. Don't run on Windows.10.Nano.Amd64.Open and Windows.7.Amd64.Open due to these blocking issues: #21693 #21796 \r\n4. Conditionalize submission to Helix step and skip the step if there are no queues (Alpine.*.Amd64.Open)\r\n5. Temporary disable JIT/superpmi/superpmicollect due to #21698 \r\n6. Increase timeout for Release test jobs - currently failing in official build","Url":"https://github.com/dotnet/coreclr/pull/21926","RelatedDescription":"Closed or merged PR \"Disable what fails and blocks transitioning to Azure DevOps\" (#21926)"},{"Id":"397774789","IsPullRequest":true,"CreatedAt":"2019-01-10T17:31:19","Actor":"marek-safar","Number":"21930","RawContent":null,"Title":"Moves EnvironmentVariableTarget enum to shared partition","State":"closed","Body":"","Url":"https://github.com/dotnet/coreclr/pull/21930","RelatedDescription":"Closed or merged PR \"Moves EnvironmentVariableTarget enum to shared partition\" (#21930)"},{"Id":"397918977","IsPullRequest":true,"CreatedAt":"2019-01-10T16:51:37","Actor":"dotnet-maestro-bot","Number":"21933","RawContent":null,"Title":"[automated] Merge branch 'release/2.1' => 'release/2.2'","State":"closed","Body":"I detected changes in the release/2.1 branch which have not been merged yet to release/2.2. I'm a robot and am configured to help you automatically keep release/2.2 up to date, so I've opened this PR.\r\n\r\nThis PR merges commits made on release/2.1 by the following committers:\n\n* @RussKeldorph\r\n\r\n## Instructions for merging\r\n\r\nThis repo does not appear to allow merge commits from the GitHub UI, so you will need to update this PR with a merge commit before closing this PR.\r\n\r\n``` sh\r\ngit fetch\r\ngit checkout release/2.1\r\ngit pull --ff-only\r\ngit checkout release/2.2\r\ngit pull --ff-only\r\ngit merge --no-ff release/2.1\r\n# If there are merge conflicts, resolve them and then run git merge --continue to complete the merge\r\ngit push https://github.com/dotnet-maestro-bot/coreclr HEAD:merge/release/2.1-to-release/2.2\r\n```\r\n\r\n<details>\r\n<summary>or if you are using SSH</summary>\r\n\r\n```\r\ngit push git@github.com:dotnet-maestro-bot/coreclr HEAD:merge/release/2.1-to-release/2.2\r\n```\r\n\r\n</details>\r\n\r\n\r\nAfter PR checks are complete push the branch\r\n```\r\ngit push\r\n```\r\n\r\nPlease contact .NET Core Engineering if you have questions or issues.\r\nAlso, if this PR was generated incorrectly, help us fix it. See https://github.com/dotnet/arcade/blob/master/scripts/GitHubMergeBranches.ps1.\r\n","Url":"https://github.com/dotnet/coreclr/pull/21933","RelatedDescription":"Closed or merged PR \"[automated] Merge branch 'release/2.1' => 'release/2.2'\" (#21933)"},{"Id":"397625402","IsPullRequest":true,"CreatedAt":"2019-01-10T16:29:40","Actor":"sbomer","Number":"21922","RawContent":null,"Title":"Re-enable publishing of transport packages","State":"closed","Body":"Core-setup currently uses nuget restore to download transport packages containing coreclr symbols to redistribute. This re-enables publishing of transport packages in our new official builds. Fixes https://github.com/dotnet/coreclr/issues/21897.\r\n\r\n@rakeshsinghranchi @echesakov @jashook ","Url":"https://github.com/dotnet/coreclr/pull/21922","RelatedDescription":"Closed or merged PR \"Re-enable publishing of transport packages\" (#21922)"},{"Id":"397837494","IsPullRequest":false,"CreatedAt":"2019-01-10T13:46:26","Actor":"marek-safar","Number":"21932","RawContent":null,"Title":"Moving more code to shared partition","State":"open","Body":"It'd be very useful to clean up and move more of the following types to shared partition for easier sharing with other runtimes.\r\n\r\nIn no particular order\r\n- [ ] [AsyncVoidMethodBuilder](https://github.com/dotnet/coreclr/blob/master/src/System.Private.CoreLib/src/System/Runtime/CompilerServices/AsyncMethodBuilder.cs)\r\n- [ ] [AsyncTaskMethodBuilder](https://github.com/dotnet/coreclr/blob/master/src/System.Private.CoreLib/src/System/Runtime/CompilerServices/AsyncMethodBuilder.cs)\r\n- [ ] [AsyncTaskMethodBuilder<TResult>](https://github.com/dotnet/coreclr/blob/master/src/System.Private.CoreLib/src/System/Runtime/CompilerServices/AsyncMethodBuilder.cs)\r\n- [ ] [Contract](https://github.com/dotnet/coreclr/blob/master/src/System.Private.CoreLib/src/System/Diagnostics/Contracts/ContractsBCL.cs)\r\n- [ ] [ContractFailedEventArgs](https://github.com/dotnet/coreclr/blob/master/src/System.Private.CoreLib/src/System/Diagnostics/Contracts/ContractsBCL.cs)\r\n- [ ] [ContractException](https://github.com/dotnet/coreclr/blob/master/src/System.Private.CoreLib/src/System/Diagnostics/Contracts/ContractsBCL.cs)\r\n- [ ] [ContractHelper](https://github.com/dotnet/coreclr/blob/master/src/System.Private.CoreLib/src/System/Diagnostics/Contracts/ContractsBCL.cs)\r\n- [ ] [TaskFactory<TResult>](https://github.com/dotnet/coreclr/blob/master/src/System.Private.CoreLib/src/System/Threading/Tasks/FutureFactory.cs)\r\n- [ ] [TaskStatus](https://github.com/dotnet/coreclr/blob/master/src/System.Private.CoreLib/src/System/Threading/Tasks/Task.cs)\r\n- [ ] [Task](https://github.com/dotnet/coreclr/blob/master/src/System.Private.CoreLib/src/System/Threading/Tasks/Task.cs)\r\n- [ ] [TaskFactory](https://github.com/dotnet/coreclr/blob/master/src/System.Private.CoreLib/src/System/Threading/Tasks/TaskFactory.cs)\r\n- [ ] [TplEtwProvider](https://github.com/dotnet/coreclr/blob/master/src/System.Private.CoreLib/src/System/Threading/Tasks/TPLETWProvider.cs)\r\n- [ ] [GCSettings](https://github.com/dotnet/coreclr/blob/master/src/System.Private.CoreLib/src/System/Runtime/GcSettings.cs)\r\n- [ ] [Timer](https://github.com/dotnet/coreclr/blob/master/src/System.Private.CoreLib/src/System/Threading/Timer.cs)\r\n- [ ] [TimerCallback](https://github.com/dotnet/coreclr/blob/master/src/System.Private.CoreLib/src/System/Threading/Timer.cs)\r\n- [ ] [TimerHolder](https://github.com/dotnet/coreclr/blob/master/src/System.Private.CoreLib/src/System/Threading/Timer.cs)\r\n- [ ] [TimerQueueTimer](https://github.com/dotnet/coreclr/blob/master/src/System.Private.CoreLib/src/System/Threading/Timer.cs)\r\n- [ ] [CustomAttributeData](https://github.com/dotnet/coreclr/blob/master/src/System.Private.CoreLib/src/System/Reflection/CustomAttribute.cs)\r\n- [ ] [AssemblyName](https://github.com/dotnet/coreclr/blob/master/src/System.Private.CoreLib/src/System/Reflection/AssemblyName.cs)\r\n- [ ] [CustomAttributeExtensions](https://github.com/dotnet/coreclr/blob/master/src/System.Private.CoreLib/src/System/Reflection/CustomAttributeExtensions.cs)\r\n- [ ] [ResourceManager](https://github.com/dotnet/coreclr/blob/master/src/System.Private.CoreLib/src/System/Resources/ResourceManager.cs)\r\n- [ ] [Marshal](https://github.com/dotnet/coreclr/blob/master/src/System.Private.CoreLib/src/System/Runtime/InteropServices/Marshal.cs)\r\n- [ ] [SynchronizationContext](https://github.com/dotnet/coreclr/blob/master/src/System.Private.CoreLib/src/System/Threading/SynchronizationContext.cs)\r\n- [ ] [Activator](https://github.com/dotnet/coreclr/blob/master/src/System.Private.CoreLib/src/System/Activator.cs)\r\n- [x] [EnvironmentVariableTarget](https://github.com/dotnet/coreclr/blob/master/src/System.Private.CoreLib/src/System/Environment.cs)\r\n- [ ] [Environment](https://github.com/dotnet/coreclr/blob/master/src/System.Private.CoreLib/src/System/Environment.cs) (stephentoub working on it) \r\n- [ ] [Exception](https://github.com/dotnet/coreclr/blob/master/src/System.Private.CoreLib/src/System/Exception.cs)\r\n- [ ] [GCHandleType](https://github.com/dotnet/coreclr/blob/master/src/System.Private.CoreLib/src/System/Runtime/InteropServices/GcHandle.cs)\r\n- [ ] [GCHandle](https://github.com/dotnet/coreclr/blob/master/src/System.Private.CoreLib/src/System/Runtime/InteropServices/GcHandle.cs)\r\n- [ ] [CustomAttributeNamedArgument](https://github.com/dotnet/coreclr/blob/master/src/System.Private.CoreLib/src/System/Reflection/CustomAttribute.cs)\r\n- [ ] [CustomAttributeTypedArgument](https://github.com/dotnet/coreclr/blob/master/src/System.Private.CoreLib/src/System/Reflection/CustomAttribute.cs)\r\n- [ ] [TypeLoadException](https://github.com/dotnet/coreclr/blob/master/src/System.Private.CoreLib/src/System/TypeLoadException.cs)\r\n- [ ] [Enum](https://github.com/dotnet/coreclr/blob/master/src/System.Private.CoreLib/src/System/Enum.cs)\r\n\r\nNote: It's useful to check https://github.com/dotnet/corert for different implementation of the types before doing the work in this repo as some of the types have been improved or cleaned up there already.","Url":"https://github.com/dotnet/coreclr/issues/21932","RelatedDescription":"Open issue \"Moving more code to shared partition\" (#21932)"},{"Id":"397757794","IsPullRequest":true,"CreatedAt":"2019-01-10T10:10:45","Actor":"swaroop-sridhar","Number":"21929","RawContent":null,"Title":"Add NativeLibrary Resolve Event","State":"open","Body":"This change adds the Native library resolving event, to be raised as the last attempt to resolve a native DLL in an AssemblyLoadContext.\r\n\r\nWith this change, the DllImport resolution sequence is as follows (stopping at any step with successful resolution):\r\n\r\n* If the invoking-assembly is not in the default load context, call AssemblyLoadContext.LoadUnmanagedDll()\r\n* Run the default load logic, try loading from:\r\n    * AppDomain cache\r\n    * NATIVE_DLL_SEARCH_DIRECTORIES\r\n    * Invoking-assembly directory, System32, etc. based on DllImportSearchPaths\r\n* Raise the ResolvingUnmanagedDll event\r\n\r\nAPI Review: https://github.com/dotnet/corefx/issues/32850","Url":"https://github.com/dotnet/coreclr/pull/21929","RelatedDescription":"Open PR \"Add NativeLibrary Resolve Event\" (#21929)"},{"Id":"397676790","IsPullRequest":true,"CreatedAt":"2019-01-10T05:21:45","Actor":"cshung","Number":"21925","RawContent":null,"Title":"Flowing the nativeCodeVersion to DebuggerJitInfo","State":"open","Body":"","Url":"https://github.com/dotnet/coreclr/pull/21925","RelatedDescription":"Open PR \"Flowing the nativeCodeVersion to DebuggerJitInfo\" (#21925)"},{"Id":"397651144","IsPullRequest":true,"CreatedAt":"2019-01-10T02:55:01","Actor":"am11","Number":"21924","RawContent":null,"Title":"Set visibility option to hidden","State":"open","Body":"Defined and used `DllExport` macro instead of `PUB` (aligned with the name used in CoreFX).\r\n\r\nWhile testing in different operating systems, I found that it is possible to have just `py` executable available in PATH via default installation without `python`, so I have added it in probing paths inside cmake and sh files as well.\r\n\r\nCloses #2484","Url":"https://github.com/dotnet/coreclr/pull/21924","RelatedDescription":"Open PR \"Set visibility option to hidden\" (#21924)"},{"Id":"397636525","IsPullRequest":false,"CreatedAt":"2019-01-10T01:36:54","Actor":"stephentoub","Number":"21923","RawContent":null,"Title":"Unnecessary mov generated in MemoryMarshal.Cast","State":"open","Body":"This:\r\n```C#\r\n[MethodImpl(MethodImplOptions.NoInlining)]\r\npublic static ReadOnlySpan<byte> GetBytes(ReadOnlySpan<int> s) => MemoryMarshal.Cast<int, byte>(s);\r\n```\r\nresults in this asm:\r\n```\r\nG_M23838_IG01:\r\n       4883EC28             sub      rsp, 40\r\n       90                   nop\r\n\r\nG_M23838_IG02:\r\n       488B02               mov      rax, bword ptr [rdx]\r\n       8B5208               mov      edx, dword ptr [rdx+8]\r\n       8BD2                 mov      edx, edx\r\n       48C1E202             shl      rdx, 2\r\n       4881FAFFFFFF7F       cmp      rdx, 0x7FFFFFFF\r\n       770E                 ja       SHORT G_M23838_IG04\r\n       488901               mov      bword ptr [rcx], rax\r\n       895108               mov      dword ptr [rcx+8], edx\r\n       488BC1               mov      rax, rcx\r\n\r\nG_M23838_IG03:\r\n       4883C428             add      rsp, 40\r\n       C3                   ret\r\n\r\nG_M23838_IG04:\r\n       E83384C95F           call     CORINFO_HELP_OVERFLOW\r\n       CC                   int3\r\n```\r\nbut that `mov edx, edx` is superfluous.\r\n\r\n@AndyAyersMS is investigating a fix.\r\n","Url":"https://github.com/dotnet/coreclr/issues/21923","RelatedDescription":"Open issue \"Unnecessary mov generated in MemoryMarshal.Cast\" (#21923)"}],"ResultType":"GitHubIssue"},"CLI-Issues":{"Issues":[{"Id":"398016065","IsPullRequest":true,"CreatedAt":"2019-01-11T00:13:44","Actor":"dotnet-bot","Number":"10590","RawContent":null,"Title":"Merge release/2.2.1xx to release/2.2.2xx","State":"closed","Body":"\nThis is an automatically generated pull request from release/2.2.1xx into release/2.2.2xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.2.1xx-to-release/2.2.2xx\ngit reset --hard upstream/release/2.2.2xx\ngit merge upstream/release/2.2.1xx\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.2.1xx-to-release/2.2.2xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/cli/pull/10590","RelatedDescription":"Closed or merged PR \"Merge release/2.2.1xx to release/2.2.2xx\" (#10590)"},{"Id":"398073530","IsPullRequest":true,"CreatedAt":"2019-01-11T00:13:20","Actor":"livarcocc","Number":"10591","RawContent":null,"Title":"Updating the SDK LKG version to 3.0.100-preview-010046","State":"open","Body":"","Url":"https://github.com/dotnet/cli/pull/10591","RelatedDescription":"Open PR \"Updating the SDK LKG version to 3.0.100-preview-010046\" (#10591)"},{"Id":"397967829","IsPullRequest":true,"CreatedAt":"2019-01-10T20:28:45","Actor":"livarcocc","Number":"10588","RawContent":null,"Title":"Updating SDK to 2.1.600-preview-63710-04","State":"closed","Body":"This contains a matching NuGet.\r\n","Url":"https://github.com/dotnet/cli/pull/10588","RelatedDescription":"Closed or merged PR \"Updating SDK to 2.1.600-preview-63710-04\" (#10588)"},{"Id":"397968796","IsPullRequest":true,"CreatedAt":"2019-01-10T20:28:32","Actor":"livarcocc","Number":"10589","RawContent":null,"Title":"Updating SDK to 2.2.200-preview-63710-03","State":"closed","Body":"This contains a matching NuGet.","Url":"https://github.com/dotnet/cli/pull/10589","RelatedDescription":"Closed or merged PR \"Updating SDK to 2.2.200-preview-63710-03\" (#10589)"},{"Id":"397952416","IsPullRequest":true,"CreatedAt":"2019-01-10T19:11:45","Actor":"rainersigwald","Number":"10587","RawContent":null,"Title":"MSBuild 16.0.360-preview+g9781d96883","State":"closed","Body":"This is the version of MSBuild that's on the VS 16.0-preview2 train currently.\r\n\r\n@livarcocc I didn't see any darc-driven updates for this; are they coming or is that something that'll only apply to newer release vehicles?","Url":"https://github.com/dotnet/cli/pull/10587","RelatedDescription":"Closed or merged PR \"MSBuild 16.0.360-preview+g9781d96883\" (#10587)"},{"Id":"397586057","IsPullRequest":true,"CreatedAt":"2019-01-10T18:36:22","Actor":"dotnet-bot","Number":"10580","RawContent":null,"Title":"Merge release/2.2.1xx to release/2.2.2xx","State":"closed","Body":"\nThis is an automatically generated pull request from release/2.2.1xx into release/2.2.2xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.2.1xx-to-release/2.2.2xx\ngit reset --hard upstream/release/2.2.2xx\ngit merge upstream/release/2.2.1xx\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.2.1xx-to-release/2.2.2xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/cli/pull/10580","RelatedDescription":"Closed or merged PR \"Merge release/2.2.1xx to release/2.2.2xx\" (#10580)"},{"Id":"397821652","IsPullRequest":true,"CreatedAt":"2019-01-10T18:35:52","Actor":"dotnet-maestro[bot]","Number":"10585","RawContent":null,"Title":"Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19058.5\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/10585","RelatedDescription":"Closed or merged PR \"Update dependencies from dotnet/arcade\" (#10585)"},{"Id":"397821786","IsPullRequest":true,"CreatedAt":"2019-01-10T18:17:33","Actor":"dotnet-maestro[bot]","Number":"10586","RawContent":null,"Title":"Update dependencies from dotnet/sdk","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/sdk\r\n\r\n- Microsoft.NET.Sdk - 3.0.100-preview.19059.1\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/10586","RelatedDescription":"Closed or merged PR \"Update dependencies from dotnet/sdk\" (#10586)"},{"Id":"397814342","IsPullRequest":false,"CreatedAt":"2019-01-10T17:47:10","Actor":"desmondgc","Number":"10584","RawContent":null,"Title":"Absolute reference to project.assets.json prevents separating build and publish stages","State":"closed","Body":"The .csproj.nuget.g.props file contains an absolute reference to project.assets.json which prevents us from separating build and publish stages in our CI pipeline. The idea is to have a pipeline that first builds the project, then test and publish jobs can be run in parallel using the output from the build stage. (I want to use `dotnet test --no-build` and `dotnet publish --no-build` to ensure the same output is used for all future stages.)\r\n\r\nThe problematic behavior can be reproduced by building a project, renaming the root folder or moving it elsewhere, and then attempting to publish with `--no-build`. The real-world case is that our CI jobs may be run on different runners so the build job runs under `/builds/765eb435/...` and the publish job runs under `/builds/5951fa48/...` for example.\r\n\r\n## Steps to reproduce\r\n\r\n```\r\ndotnet new console -o foo\r\ndotnet build foo\r\nmv foo bar\r\ndotnet publish --no-build bar\r\n```\r\n\r\n## Expected  behavior\r\n\r\nProject is published successfully.\r\n\r\n## Actual behavior\r\n\r\n```\r\n/usr/share/dotnet/sdk/2.2.101/Sdks/Microsoft.NET.Sdk/targets/Microsoft.PackageDependencyResolution.targets(208,5): error NETSDK1004: Assets file '/tmp/foo/obj/project.assets.json' not found. Run a NuGet package restore to generate this file. [/tmp/bar/foo.csproj]\r\n```\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.101\r\n Commit:    236713b0b7\r\n\r\nRuntime Environment:\r\n OS Name:     ubuntu\r\n OS Version:  18.04\r\n OS Platform: Linux\r\n RID:         ubuntu.18.04-x64\r\n Base Path:   /usr/share/dotnet/sdk/2.2.101/\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.2.101 [/usr/share/dotnet/sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.2.0 [/usr/share/dotnet/shared/Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [/usr/share/dotnet/shared/Microsoft.NETCore.App]\r\n```","Url":"https://github.com/dotnet/cli/issues/10584","RelatedDescription":"Closed issue \"Absolute reference to project.assets.json prevents separating build and publish stages\" (#10584)"},{"Id":"397742060","IsPullRequest":true,"CreatedAt":"2019-01-10T13:04:19","Actor":"v-zbsail","Number":"10583","RawContent":null,"Title":"LOC CHECKIN | dotnet/cli master | 20190110","State":"closed","Body":"- If this PR should not run tests please add text \"skip[REMOVE_THIS]ci[REMOVE_THIS]please\" (remove the marked text, no quotes).\r\n- Please add description for changes you are making.\r\n- If there is an issue related to this PR, please add the reference.\r\n","Url":"https://github.com/dotnet/cli/pull/10583","RelatedDescription":"Closed or merged PR \"LOC CHECKIN | dotnet/cli master | 20190110\" (#10583)"},{"Id":"397686280","IsPullRequest":false,"CreatedAt":"2019-01-10T06:59:56","Actor":"veer66","Number":"10582","RawContent":null,"Title":"dotnet new couldn't obtain some templates using Thai locale","State":"closed","Body":"## Steps to reproduce\r\n1. Remove existing template and configuration \r\n\r\n```\r\nrm -rf ~/.dotnet ~/.templateengine \r\n```\r\n\r\n2. Remove existing project by \r\n\r\n```\r\nrm -rf ConsoleApp \r\n```\r\n\r\n3. Create project using Thai locale by \r\n\r\n```\r\nLC_ALL=th_TH.UTF-8 LANG=th_TH.UTF-8 dotnet new console --output ConsoleApp\r\n```\r\n\r\n## Expected  behavior\r\n\r\n```\r\nWelcome to .NET Core!\r\n---------------------\r\nLearn more about .NET Core: https://aka.ms/dotnet-docs\r\nUse 'dotnet --help' to see available commands or visit: https://aka.ms/dotnet-cli-docs\r\n\r\nTelemetry\r\n---------\r\nThe .NET Core tools collect usage data in order to help us improve your experience. The data is anonymous and doesn't include command-line arguments. The data is collected by Microsoft and shared with the community. You can opt-out of telemetry by setting the DOTNET_CLI_TELEMETRY_OPTOUT environment variable to '1' or 'true' using your favorite shell.\r\n\r\nRead more about .NET Core CLI Tools telemetry: https://aka.ms/dotnet-cli-telemetry\r\n\r\nASP.NET Core\r\n------------\r\nSuccessfully installed the ASP.NET Core HTTPS Development Certificate.\r\nTo trust the certificate run 'dotnet dev-certs https --trust' (Windows and macOS only). For establishing trust on other platforms refer to the platform specific documentation.\r\nFor more information on configuring HTTPS see https://go.microsoft.com/fwlink/?linkid=848054.\r\nGetting ready...\r\nThe template \"Console Application\" was created successfully.\r\n\r\nProcessing post-creation actions...\r\nRunning 'dotnet restore' on ConsoleApp/ConsoleApp.csproj...\r\n  Restoring packages for /home/vee/Develop/exper/dotnet/ConsoleApp/ConsoleApp.csproj...\r\n  Generating MSBuild file /home/vee/Develop/exper/dotnet/ConsoleApp/obj/ConsoleApp.csproj.nuget.g.props.\r\n  Generating MSBuild file /home/vee/Develop/exper/dotnet/ConsoleApp/obj/ConsoleApp.csproj.nuget.g.targets.\r\n  Restore completed in 174.66 ms for /home/vee/Develop/exper/dotnet/ConsoleApp/ConsoleApp.csproj.\r\n\r\nRestore succeeded.\r\n```\r\n\r\n## Actual behavior\r\n\r\n```\r\nWelcome to .NET Core!\r\n---------------------\r\nLearn more about .NET Core: https://aka.ms/dotnet-docs\r\nUse 'dotnet --help' to see available commands or visit: https://aka.ms/dotnet-cli-docs\r\n\r\nTelemetry\r\n---------\r\nThe .NET Core tools collect usage data in order to help us improve your experience. The data is anonymous and doesn't include command-line arguments. The data is collected by Microsoft and shared with the community. You can opt-out of telemetry by setting the DOTNET_CLI_TELEMETRY_OPTOUT environment variable to '1' or 'true' using your favorite shell.\r\n\r\nRead more about .NET Core CLI Tools telemetry: https://aka.ms/dotnet-cli-telemetry\r\n\r\nASP.NET Core\r\n------------\r\nSuccessfully installed the ASP.NET Core HTTPS Development Certificate.\r\nTo trust the certificate run 'dotnet dev-certs https --trust' (Windows and macOS only). For establishing trust on other platforms refer to the platform specific documentation.\r\nFor more information on configuring HTTPS see https://go.microsoft.com/fwlink/?linkid=848054.\r\nGetting ready...\r\nUsage: new [options]\r\n\r\nOptions:\r\n  -h, --help          Displays help for this command.\r\n  -l, --list          Lists templates containing the specified name. If no name is specified, lists all templates.\r\n  -n, --name          The name for the output being created. If no name is specified, the name of the current directory is used.\r\n  -o, --output        Location to place the generated output.\r\n  -i, --install       Installs a source or a template pack.\r\n  -u, --uninstall     Uninstalls a source or a template pack.\r\n  --nuget-source      Specifies a NuGet source to use during install.\r\n  --type              Filters templates based on available types. Predefined values are \"project\", \"item\" or \"other\".\r\n  --dry-run           Displays a summary of what would happen if the given command line were run if it would result in a template creation.\r\n  --force             Forces content to be generated even if it would change existing files.\r\n  -lang, --language   Filters templates based on language and specifies the language of the template to create.\r\n\r\n\r\nNo templates matched the input template name: console.\r\n\r\nTemplates                                 Short Name      Language      Tags       \r\n-----------------------------------------------------------------------------------\r\nASP.NET Core with Angular                 angular         [C#]          Web/MVC/SPA\r\nASP.NET Core with React.js                react           [C#]          Web/MVC/SPA\r\nASP.NET Core with React.js and Redux      reactredux      [C#]          Web/MVC/SPA\r\n\r\nExamples:\r\n    dotnet new angular\r\n    dotnet new react\r\n    dotnet new --help\r\n\r\n```\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.102\r\n Commit:    96ff75a873\r\n\r\nRuntime Environment:\r\n OS Name:     ubuntu\r\n OS Version:  18.10\r\n OS Platform: Linux\r\n RID:         ubuntu.18.10-x64\r\n Base Path:   /usr/share/dotnet/sdk/2.2.102/\r\n\r\nHost (useful for support):\r\n  Version: 2.2.1\r\n  Commit:  878dd11e62\r\n\r\n.NET Core SDKs installed:\r\n  2.2.102 [/usr/share/dotnet/sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.2.1 [/usr/share/dotnet/shared/Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.1 [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.2.1 [/usr/share/dotnet/shared/Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/10582","RelatedDescription":"Closed issue \"dotnet new couldn't obtain some templates using Thai locale\" (#10582)"},{"Id":"397649585","IsPullRequest":false,"CreatedAt":"2019-01-10T02:46:46","Actor":"dsplaisted","Number":"10581","RawContent":null,"Title":"Update targeting pack asset resolution to handle assets from \"real\" targeting packs","State":"open","Body":"With https://github.com/dotnet/sdk/pull/2774, we are resolving assets from \"targeting packs\", but we are using the existing packages (such as Microsoft.NETCore.App) as the targeting packs.  We plan to use different packages with different layouts as the real targeting packs.  Along with that, we will need to update the asset resolution logic to account for this.\r\n\r\nSee [dotnet/designs#50](https://github.com/dotnet/designs/pull/50/files?short_path=ebf265d#diff-ebf265d0476041dd8cab82fa24ab5b0e) for the current design for the targeting pack layout.\r\n\r\nItems that should be resolved from targeting packs:\r\n\r\n- Assembly references\r\n- Platform manifests for conflict resolution\r\n- `PackageConflictPreferredPackages`\r\n- Possibly, `PackageConflictOverrides` items","Url":"https://github.com/dotnet/cli/issues/10581","RelatedDescription":"Open issue \"Update targeting pack asset resolution to handle assets from \"real\" targeting packs\" (#10581)"},{"Id":"397586042","IsPullRequest":true,"CreatedAt":"2019-01-10T00:26:12","Actor":"dotnet-bot","Number":"10579","RawContent":null,"Title":"Merge release/2.1.5xx to release/2.2.1xx","State":"closed","Body":"\nThis is an automatically generated pull request from release/2.1.5xx into release/2.2.1xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1.5xx-to-release/2.2.1xx\ngit reset --hard upstream/release/2.2.1xx\ngit merge upstream/release/2.1.5xx\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.1.5xx-to-release/2.2.1xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/cli/pull/10579","RelatedDescription":"Closed or merged PR \"Merge release/2.1.5xx to release/2.2.1xx\" (#10579)"},{"Id":"397570591","IsPullRequest":true,"CreatedAt":"2019-01-09T22:29:35","Actor":"livarcocc","Number":"10578","RawContent":null,"Title":"Merge release/2.1.6xx into release/2.2.2xx","State":"closed","Body":"","Url":"https://github.com/dotnet/cli/pull/10578","RelatedDescription":"Closed or merged PR \"Merge release/2.1.6xx into release/2.2.2xx\" (#10578)"},{"Id":"397524367","IsPullRequest":true,"CreatedAt":"2019-01-09T21:59:49","Actor":"mmitche","Number":"10577","RawContent":null,"Title":"Add a darc dependency for Microsoft.TemplateEngine.Cli","State":"closed","Body":"- If this PR should not run tests please add text \"skip[REMOVE_THIS]ci[REMOVE_THIS]please\" (remove the marked text, no quotes).\r\n- Please add description for changes you are making.\r\n- If there is an issue related to this PR, please add the reference.\r\n","Url":"https://github.com/dotnet/cli/pull/10577","RelatedDescription":"Closed or merged PR \"Add a darc dependency for Microsoft.TemplateEngine.Cli\" (#10577)"},{"Id":"397362465","IsPullRequest":true,"CreatedAt":"2019-01-09T18:03:50","Actor":"dotnet-maestro[bot]","Number":"10575","RawContent":null,"Title":"Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19058.2\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/10575","RelatedDescription":"Closed or merged PR \"Update dependencies from dotnet/arcade\" (#10575)"},{"Id":"397199669","IsPullRequest":true,"CreatedAt":"2019-01-09T17:50:20","Actor":"livarcocc","Number":"10570","RawContent":null,"Title":"Merge release/2.2.1xx to release/2.2.2xx","State":"closed","Body":"","Url":"https://github.com/dotnet/cli/pull/10570","RelatedDescription":"Closed or merged PR \"Merge release/2.2.1xx to release/2.2.2xx\" (#10570)"},{"Id":"397362609","IsPullRequest":true,"CreatedAt":"2019-01-09T17:32:44","Actor":"dotnet-maestro[bot]","Number":"10576","RawContent":null,"Title":"Update dependencies from dotnet/sdk","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/sdk\r\n\r\n- Microsoft.NET.Sdk - 3.0.100-preview.19058.3\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/10576","RelatedDescription":"Closed or merged PR \"Update dependencies from dotnet/sdk\" (#10576)"},{"Id":"397200126","IsPullRequest":true,"CreatedAt":"2019-01-09T17:32:16","Actor":"livarcocc","Number":"10572","RawContent":null,"Title":"Updating branding to 2.2.103","State":"closed","Body":"","Url":"https://github.com/dotnet/cli/pull/10572","RelatedDescription":"Closed or merged PR \"Updating branding to 2.2.103\" (#10572)"},{"Id":"397199931","IsPullRequest":true,"CreatedAt":"2019-01-09T17:32:03","Actor":"livarcocc","Number":"10571","RawContent":null,"Title":"Updating branding to 2.1.504","State":"closed","Body":"","Url":"https://github.com/dotnet/cli/pull/10571","RelatedDescription":"Closed or merged PR \"Updating branding to 2.1.504\" (#10571)"},{"Id":"397340135","IsPullRequest":true,"CreatedAt":"2019-01-09T17:31:29","Actor":"dotnet-bot","Number":"10574","RawContent":null,"Title":"Merge release/2.2.1xx to release/2.2.2xx","State":"closed","Body":"\nThis is an automatically generated pull request from release/2.2.1xx into release/2.2.2xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.2.1xx-to-release/2.2.2xx\ngit reset --hard upstream/release/2.2.2xx\ngit merge upstream/release/2.2.1xx\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.2.1xx-to-release/2.2.2xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/cli/pull/10574","RelatedDescription":"Closed or merged PR \"Merge release/2.2.1xx to release/2.2.2xx\" (#10574)"},{"Id":"397099180","IsPullRequest":false,"CreatedAt":"2019-01-09T15:26:38","Actor":"tremblaysimon","Number":"10563","RawContent":null,"Title":"dotnet pack doesn't care of VersionPrefix and VersionSuffix properties with version 2.1.502","State":"closed","Body":"## Steps to reproduce\r\n\r\n1. Get dotnet CLI version 2.1.502\r\n\r\n2. Create a new project PROJECT_NAME and add in csproj VersionPrefix and/or VersionSuffix properties.\r\n\r\nExample:\r\n\r\n```\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <TargetFramework>netstandard2.0</TargetFramework>\r\n    <VersionPrefix>1.2.3</VersionPrefix>\r\n  </PropertyGroup>\r\n\r\n</Project>\r\n```\r\n3. Run dotnet pack PROJECT_NAME\r\n\r\n\r\n## Expected  behavior\r\n\r\nCreate a new nuget package PROJECT_NAME.**1.2.3**.nupkg\r\n\r\n## Actual behavior\r\n\r\nIt creates a new nuget package PROJECT_NAME.**1.0.0**.nupkg\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.1.502\r\n Commit:    c74ce8f29f\r\n\r\nRuntime Environment:\r\n OS Name:     ubuntu\r\n OS Version:  18.04\r\n OS Platform: Linux\r\n RID:         ubuntu.18.04-x64\r\n Base Path:   /usr/share/dotnet/sdk/2.1.502/\r\n\r\nHost (useful for support):\r\n  Version: 2.1.6\r\n  Commit:  3f4f8eebd8\r\n\r\n.NET Core SDKs installed:\r\n  2.1.502 [/usr/share/dotnet/sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [/usr/share/dotnet/shared/Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [/usr/share/dotnet/shared/Microsoft.NETCore.App]\r\n\r\n```\r\n\r\nI try to get the official documentation about these properties (VersionPrefix, VersionSuffix, Version, PackageVersion) but I didn't find anything except that unofficial link to understand how dotnet pack is working with these properties: https://andrewlock.net/version-vs-versionsuffix-vs-packageversion-what-do-they-all-mean/#version \r\n\r\nIt works with version 2.1.402 or version 2.1.403.\r\n\r\nI don't have nuget CLI installed on my desktop.\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/10563","RelatedDescription":"Closed issue \"dotnet pack doesn't care of VersionPrefix and VersionSuffix properties with version 2.1.502\" (#10563)"},{"Id":"397205481","IsPullRequest":true,"CreatedAt":"2019-01-09T04:17:12","Actor":"JadynWong","Number":"10573","RawContent":null,"Title":"Change the wrong word LocalizableStrings.zh-Hans.xlf","State":"open","Body":"Change the wrong word\r\n`推出遥测` => '退出遥测'","Url":"https://github.com/dotnet/cli/pull/10573","RelatedDescription":"Open PR \"Change the wrong word LocalizableStrings.zh-Hans.xlf\" (#10573)"},{"Id":"397174423","IsPullRequest":true,"CreatedAt":"2019-01-09T03:36:42","Actor":"dotnet-bot","Number":"10569","RawContent":null,"Title":"Merge release/2.1.5xx to release/2.2.1xx","State":"closed","Body":"\nThis is an automatically generated pull request from release/2.1.5xx into release/2.2.1xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1.5xx-to-release/2.2.1xx\ngit reset --hard upstream/release/2.2.1xx\ngit merge upstream/release/2.1.5xx\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.1.5xx-to-release/2.2.1xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/cli/pull/10569","RelatedDescription":"Closed or merged PR \"Merge release/2.1.5xx to release/2.2.1xx\" (#10569)"},{"Id":"397153661","IsPullRequest":true,"CreatedAt":"2019-01-09T02:30:16","Actor":"livarcocc","Number":"10567","RawContent":null,"Title":"Merge release/2.1.5xx into release/2.1.6xx","State":"closed","Body":"","Url":"https://github.com/dotnet/cli/pull/10567","RelatedDescription":"Closed or merged PR \"Merge release/2.1.5xx into release/2.1.6xx\" (#10567)"},{"Id":"397080921","IsPullRequest":true,"CreatedAt":"2019-01-09T02:29:35","Actor":"dotnet-maestro-bot","Number":"10562","RawContent":null,"Title":"Update aspnet, aspnet, coresetup to rtm-35537, rtm-35537, 2.1.0, respectively (release/2.2.1xx)","State":"closed","Body":"/cc @dotnet/dotnet-cli","Url":"https://github.com/dotnet/cli/pull/10562","RelatedDescription":"Closed or merged PR \"Update aspnet, aspnet, coresetup to rtm-35537, rtm-35537, 2.1.0, respectively (release/2.2.1xx)\" (#10562)"},{"Id":"397158501","IsPullRequest":false,"CreatedAt":"2019-01-09T01:13:54","Actor":"ArgoZhang","Number":"10568","RawContent":null,"Title":"duplicate  targetframework attribute in multiple target enabled live unit testing","State":"closed","Body":"## Steps to reproduce\r\n1. create new project modify proj file\r\n    <TargetFrameworks>netstandard2.0;net40</TargetFrameworks>\r\ncoding some class ......\r\n \r\n2. create UnitTestProject use xunit\r\ncoding some test method ......\r\n\r\n3. Configure live unit test option\r\nTools -> Options... Choose Live Unit Testing item -> General\r\nset logging level -> Verbose\r\n\r\n4. Start live unit testing\r\n Test-> Live Unit Testing -> Start\r\n\r\n## Expected  behavior\r\nlive unit testing running successfully.\r\n\r\n## Actual behavior\r\nlive unit testing build fail.\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n[08:52:17.377 Verbose] - BuildManager - D:\\src\\Longbow\\Longbow.Utility2010\\Longbow.Security.Cryptography\\Longbow.Security.Cryptography.csproj(0,0): error MSB4057: The target \"GetTargetPath\" does not exist in the project.\r\n[08:52:19.963 Verbose] - BuildManager - obj\\Debug\\netstandard2.0\\Longbow.Security.Cryptography.AssemblyInfo.cs(14,12): error CS0579: Duplicate 'System.Reflection.AssemblyCompanyAttribute' attribute\r\n[08:52:19.963 Verbose] - BuildManager - obj\\Debug\\netstandard2.0\\Longbow.Security.Cryptography.AssemblyInfo.cs(15,12): error CS0579: Duplicate 'System.Reflection.AssemblyConfigurationAttribute' attribute\r\n[08:52:19.963 Verbose] - BuildManager - obj\\Debug\\netstandard2.0\\Longbow.Security.Cryptography.AssemblyInfo.cs(16,12): error CS0579: Duplicate 'System.Reflection.AssemblyDescriptionAttribute' attribute\r\n[08:52:19.963 Verbose] - BuildManager - obj\\Debug\\netstandard2.0\\Longbow.Security.Cryptography.AssemblyInfo.cs(17,12): error CS0579: Duplicate 'System.Reflection.AssemblyFileVersionAttribute' attribute\r\n[08:52:19.963 Verbose] - BuildManager - obj\\Debug\\netstandard2.0\\Longbow.Security.Cryptography.AssemblyInfo.cs(18,12): error CS0579: Duplicate 'System.Reflection.AssemblyInformationalVersionAttribute' attribute\r\n[08:52:19.963 Verbose] - BuildManager - obj\\Debug\\netstandard2.0\\Longbow.Security.Cryptography.AssemblyInfo.cs(19,12): error CS0579: Duplicate 'System.Reflection.AssemblyProductAttribute' attribute\r\n[08:52:19.963 Verbose] - BuildManager - obj\\Debug\\netstandard2.0\\Longbow.Security.Cryptography.AssemblyInfo.cs(20,12): error CS0579: Duplicate 'System.Reflection.AssemblyTitleAttribute' attribute\r\n[08:52:19.963 Verbose] - BuildManager - obj\\Debug\\netstandard2.0\\Longbow.Security.Cryptography.AssemblyInfo.cs(21,12): error CS0579: Duplicate 'System.Reflection.AssemblyVersionAttribute' attribute\r\n[08:52:19.964 Verbose] - BuildManager - D:\\src\\Longbow\\Longbow.Utility2010\\.vs\\Longbow.Utility2010\\lut\\0\\i\\Longbow.Security.Cryptography\\Debug\\netstandard2.0\\Longbow.Security.Cryptography.AssemblyInfo.cs(14,12): error CS0579: Duplicate 'System.Reflection.AssemblyCompanyAttribute' attribute\r\n[08:52:19.964 Verbose] - BuildManager - D:\\src\\Longbow\\Longbow.Utility2010\\.vs\\Longbow.Utility2010\\lut\\0\\i\\Longbow.Security.Cryptography\\Debug\\netstandard2.0\\Longbow.Security.Cryptography.AssemblyInfo.cs(15,12): error CS0579: Duplicate 'System.Reflection.AssemblyConfigurationAttribute' attribute\r\n[08:52:19.964 Verbose] - BuildManager - D:\\src\\Longbow\\Longbow.Utility2010\\.vs\\Longbow.Utility2010\\lut\\0\\i\\Longbow.Security.Cryptography\\Debug\\netstandard2.0\\Longbow.Security.Cryptography.AssemblyInfo.cs(16,12): error CS0579: Duplicate 'System.Reflection.AssemblyDescriptionAttribute' attribute\r\n[08:52:19.964 Verbose] - BuildManager - D:\\src\\Longbow\\Longbow.Utility2010\\.vs\\Longbow.Utility2010\\lut\\0\\i\\Longbow.Security.Cryptography\\Debug\\netstandard2.0\\Longbow.Security.Cryptography.AssemblyInfo.cs(17,12): error CS0579: Duplicate 'System.Reflection.AssemblyFileVersionAttribute' attribute\r\n[08:52:19.964 Verbose] - BuildManager - D:\\src\\Longbow\\Longbow.Utility2010\\.vs\\Longbow.Utility2010\\lut\\0\\i\\Longbow.Security.Cryptography\\Debug\\netstandard2.0\\Longbow.Security.Cryptography.AssemblyInfo.cs(18,12): error CS0579: Duplicate 'System.Reflection.AssemblyInformationalVersionAttribute' attribute\r\n[08:52:19.964 Verbose] - BuildManager - D:\\src\\Longbow\\Longbow.Utility2010\\.vs\\Longbow.Utility2010\\lut\\0\\i\\Longbow.Security.Cryptography\\Debug\\netstandard2.0\\Longbow.Security.Cryptography.AssemblyInfo.cs(19,12): error CS0579: Duplicate 'System.Reflection.AssemblyProductAttribute' attribute\r\n[08:52:19.964 Verbose] - BuildManager - D:\\src\\Longbow\\Longbow.Utility2010\\.vs\\Longbow.Utility2010\\lut\\0\\i\\Longbow.Security.Cryptography\\Debug\\netstandard2.0\\Longbow.Security.Cryptography.AssemblyInfo.cs(20,12): error CS0579: Duplicate 'System.Reflection.AssemblyTitleAttribute' attribute\r\n[08:52:19.964 Verbose] - BuildManager - D:\\src\\Longbow\\Longbow.Utility2010\\.vs\\Longbow.Utility2010\\lut\\0\\i\\Longbow.Security.Cryptography\\Debug\\netstandard2.0\\Longbow.Security.Cryptography.AssemblyInfo.cs(21,12): error CS0579: Duplicate 'System.Reflection.AssemblyVersionAttribute' attribute\r\n[08:52:21.641 Info] - BuildManager - Build completed (failed).\r\n\r\nBTW:\r\nif set  <TargetFrameworks>netstandard2.0;net40</TargetFrameworks> as  <TargetFramework>netstandard2.0</TargetFramework> everythings will be ok.\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/10568","RelatedDescription":"Closed issue \"duplicate  targetframework attribute in multiple target enabled live unit testing\" (#10568)"},{"Id":"397128331","IsPullRequest":true,"CreatedAt":"2019-01-09T00:32:47","Actor":"livarcocc","Number":"10565","RawContent":null,"Title":"Updating Rolsyn to 3.0.0-beta2-19055-10","State":"closed","Body":"This matches the version inserted into VS.\r\n","Url":"https://github.com/dotnet/cli/pull/10565","RelatedDescription":"Closed or merged PR \"Updating Rolsyn to 3.0.0-beta2-19055-10\" (#10565)"},{"Id":"397112317","IsPullRequest":true,"CreatedAt":"2019-01-09T00:02:45","Actor":"dotnet-maestro-bot","Number":"10564","RawContent":null,"Title":"Update aspnet, coresetup to servicing-31150, preview1-26216-03, respectively (release/2.1.5xx)","State":"closed","Body":"/cc @dotnet/dotnet-cli","Url":"https://github.com/dotnet/cli/pull/10564","RelatedDescription":"Closed or merged PR \"Update aspnet, coresetup to servicing-31150, preview1-26216-03, respectively (release/2.1.5xx)\" (#10564)"},{"Id":"397132842","IsPullRequest":false,"CreatedAt":"2019-01-08T23:03:46","Actor":"peterhuene","Number":"10566","RawContent":null,"Title":"Limit default apphost feature to netcoreapp3.0","State":"open","Body":"## Steps to reproduce\r\n\r\nUsing a 3.0 SDK:\r\n\r\n1. `dotnet new console`.\r\n2. Change the `TargetFramework` property to `netcoreapp2.1`.\r\n3. Build.\r\n\r\n## Expected  behavior\r\n\r\nThere should be no default apphost present.\r\n\r\n## Actual behavior\r\n\r\nA default apphost (.exe) is created.\r\n\r\nThere are two reasons why this is undesirable:\r\n\r\n1. The default apphost feature was implemented in such a way that impacts restore; namely that a restore for the current SDK's platform occurs so the apphost package appears in the assets graph.  This has a performance impact on dotnet commands that do a restore and unnecessarily pollutes the assets graph.  The hope was that we would support \"download only\" packages that don't affect the restore operation and assets graph.  This feature is coming online to support framework and targeting packs, but is limited to `netcoreapp3.0+`.\r\n\r\n2. Users that upgrade their SDK, even for major SDK releases, should reasonably expect no new build outputs when their target framework has not changed.  This is the reason we limit the \"copy local dependencies on build\" feature to `netcoreapp3.0+`.\r\n\r\n## Environment data\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview-009812\r\n Commit:    e3abf6e935\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17763\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview-009812\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview-27122-01\r\n  Commit:  00c5c8bc40\r\n\r\n.NET Core SDKs installed:\r\n  2.1.402 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.403 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.500 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview-009793 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview-009812 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview-18577-0031 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview-18579-0056 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview-27122-01 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-alpha-27122-4 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-alpha-27128-4 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/10566","RelatedDescription":"Open issue \"Limit default apphost feature to netcoreapp3.0\" (#10566)"}],"ResultType":"GitHubIssue"},"Standard-Issues":{"Issues":[{"Id":"396798571","IsPullRequest":false,"CreatedAt":"2019-01-11T01:19:54","Actor":"duncand","Number":"1050","RawContent":null,"Title":"Proposal to rename Standard 2.1 to 2.2, make 2.1 a Framework compatible subset","State":"closed","Body":"I'm looking to provide input on .NET Standard and this appears to be the best place.\r\n\r\nSee https://blogs.msdn.microsoft.com/dotnet/2018/11/05/announcing-net-standard-2-1/ for reference.\r\n\r\nI propose that what is currently planned for .NET Standard 2.1 be pushed back to .NET Standard 2.2, and that .NET Standard 2.1 instead just have the subset of those changes that are implementable on .NET Framework.\r\n\r\nWhile going forward, .NET Standard after 2.0 is mainly adding new features that are not practical to implement in .NET Framework, some of the proposals for 2.1 contained bringing out some things that already existed but missed the 2.0 window.\r\n\r\nIf we do what I propose, then we have a last chance to increase the API surface that can run everywhere, before it is permanently shut out due to releasing a .NET Standard version that Framework can't run, given that each increasing Standard version is a superset of what came before.","Url":"https://github.com/dotnet/standard/issues/1050","RelatedDescription":"Closed issue \"Proposal to rename Standard 2.1 to 2.2, make 2.1 a Framework compatible subset\" (#1050)"},{"Id":"391463924","IsPullRequest":false,"CreatedAt":"2019-01-11T00:24:30","Actor":"dmitriyse","Number":"1024","RawContent":null,"Title":"[Proposal] .Net Standard 3.0.0 with breaking changes, semantic versioning and migration toolset","State":"closed","Body":"Please open new .NetStandard branch with deep refresh of .Net API surface.\r\nCurrently .NetStandard 2.0 and it's successor .NetStandard 2.1 contains everything that were added in .net since version 1.0. Some API is already outdated and another will become outdated soon.\r\n\r\n.Net Standard 2.1 have some positive movements. It's drops some components to out of standard into additional components.\r\n\r\nBut it's not enough. It's time to stay in .Net Standard only good and modern parts.\r\nFor example:\r\n```CSharp\r\npublic class List<T>\r\n{\r\n     // ...\r\n     void CopyTo(T[] array);\r\n     // ...\r\n}\r\n```\r\ncan be replaced with:\r\n\r\n```CSharp\r\npublic class List<T>\r\n{\r\n     // ...\r\n     void CopyTo(Span<T> output);\r\n     // ...\r\n}\r\n```\r\nAssemblies targeting .NetStandard 2.0, .NetStandard 2.1 and proposed .NetStandard 3.0.0 should be capable to work side-by-side inside the same AppDomain.\r\n\r\nTODO: Add diagram.\r\n","Url":"https://github.com/dotnet/standard/issues/1024","RelatedDescription":"Closed issue \"[Proposal] .Net Standard 3.0.0 with breaking changes, semantic versioning and migration toolset\" (#1024)"},{"Id":"394796330","IsPullRequest":false,"CreatedAt":"2019-01-11T00:23:25","Actor":"MV10","Number":"1041","RawContent":null,"Title":"System.MathF missing in .NET Standard 2.1 README","State":"closed","Body":"Minor, but `System.MathF` is missing from the [README](https://github.com/dotnet/standard/blob/master/docs/planning/netstandard-2.1/README.md). I figured it would be in the Miscellaneous list at a minimum. (As I understand it, this is still on schedule for .NET Standard 2.1 per  https://github.com/dotnet/corefx/issues/15830, correct?)\r\n\r\n","Url":"https://github.com/dotnet/standard/issues/1041","RelatedDescription":"Closed issue \"System.MathF missing in .NET Standard 2.1 README\" (#1041)"},{"Id":"396675175","IsPullRequest":false,"CreatedAt":"2019-01-11T00:22:05","Actor":"Entomy","Number":"1049","RawContent":null,"Title":"String Enhancements","State":"closed","Body":"In .NET Core >=2.1 there exists a `.Join()` method that takes strings and chars, and a `.Split()` method that takes strings and chars. However in .NET Standard, `.Join()` only accepts strings, and `.Split()` only accepts chars. This is an odd seeming, and inconvenient, limitation. Can this be added to a future version?","Url":"https://github.com/dotnet/standard/issues/1049","RelatedDescription":"Closed issue \"String Enhancements\" (#1049)"},{"Id":"397146216","IsPullRequest":false,"CreatedAt":"2019-01-08T23:57:44","Actor":"dsplaisted","Number":"1051","RawContent":null,"Title":"Create targeting pack for .NET Standard","State":"open","Body":"For .NET Core 3.0, we expect to separate targeting packs, which contain the assets needed at build time when targeting .NET Core 3.0 (for example, reference assemblies and intellisense documentation) from \"runtime packs\", which will include the platform-specific runtime components for .NET Core 3.  See dotnet/cli#10006, and [dotnet/designs#50](https://github.com/dotnet/designs/pull/50/files?short_path=ebf265d#diff-ebf265d0476041dd8cab82fa24ab5b0e)\r\n\r\nWe will have targeting pack for each shared framework (.NET Core, ASP.NET Core, and WindowsDesktop), as well as for .NET Standard.  This issue tracks the work required a .NET Standard targeting pack.  Ideally, we should create targeting packs for both .NET Standard 2.1 and 2.0.\r\n\r\nThe work required includes:\r\n\r\n- A new NuGet package including the targeting pack assets.  This should include the reference assemblies, intellisense documentation, and platform manifest file.  The current straw man proposal for the package ID is `Microsoft.NETCore.App.Ref`\r\n- Installers for each supported installer format (msi, deb, pkg, and rpm), which lay out the targeting pack files under `<DOTNET_ROOT>/packs/<PackageId>/version`.  These installers will be bundled or depended on by the corresponding .NET Core SDK installers.\r\n\r\nSome of the details (such as package layout, names, etc) are still [under design](https://github.com/dotnet/designs/pull/50/files?short_path=ebf265d#diff-ebf265d0476041dd8cab82fa24ab5b0e) and may change slightly.","Url":"https://github.com/dotnet/standard/issues/1051","RelatedDescription":"Open issue \"Create targeting pack for .NET Standard\" (#1051)"},{"Id":"396646204","IsPullRequest":true,"CreatedAt":"2019-01-07T22:02:02","Actor":"wtgodbe","Number":"1048","RawContent":null,"Title":" Move source items into src folder","State":"closed","Body":"With this, we group all source items into an `src` folder to match the convention of other repos. I've done a diff of the `artifacts` dir before & after this change to confirm that everything still looks like the same. @ViktorHofer @danmosemsft @terrajobst PTAL\r\n\r\nFixes https://github.com/dotnet/standard/issues/1037","Url":"https://github.com/dotnet/standard/pull/1048","RelatedDescription":"Closed or merged PR \" Move source items into src folder\" (#1048)"},{"Id":"393015237","IsPullRequest":false,"CreatedAt":"2019-01-07T22:02:02","Actor":"ViktorHofer","Number":"1037","RawContent":null,"Title":"Group source items in a src folder","State":"closed","Body":"We should move\r\n- netstandard\r\n- platforms\r\n- apicompat\r\n- dir.traversal.targets\r\n- package.builds\r\n- src.builds\r\n\r\ninto a `src` folder to align with other dotnet repos.\r\n\r\ncc @wtgodbe @danmosemsft @terrajobst","Url":"https://github.com/dotnet/standard/issues/1037","RelatedDescription":"Closed issue \"Group source items in a src folder\" (#1037)"},{"Id":"396610837","IsPullRequest":true,"CreatedAt":"2019-01-07T19:06:28","Actor":"wtgodbe","Number":"1047","RawContent":null,"Title":"Bump AssemblyVersion for nestandard.dll to 2.1.0.0","State":"open","Body":"Fixes https://github.com/dotnet/standard/issues/929\r\n\r\nCC @ericstj @terrajobst ","Url":"https://github.com/dotnet/standard/pull/1047","RelatedDescription":"Open PR \"Bump AssemblyVersion for nestandard.dll to 2.1.0.0\" (#1047)"},{"Id":"396598897","IsPullRequest":true,"CreatedAt":"2019-01-07T18:47:02","Actor":"wtgodbe","Number":"1046","RawContent":null,"Title":"Update APICompat baseline","State":"closed","Body":"I see these updates to the APICompat baselines after building from clean - I've confirmed that they weren't present before https://github.com/dotnet/standard/commit/dbb3e847a6dd09a8c9ec0206463ed1b848a5c90b. I figured I'd open a PR to use first as an easy way to view the diff & discuss, then to take into master if we decide it's the right thing. @ViktorHofer did you notice these locally when fixing up APICompat/GenAPI?","Url":"https://github.com/dotnet/standard/pull/1046","RelatedDescription":"Closed or merged PR \"Update APICompat baseline\" (#1046)"},{"Id":"396591596","IsPullRequest":false,"CreatedAt":"2019-01-07T18:06:51","Actor":"wtgodbe","Number":"1045","RawContent":null,"Title":"Convert seed.sh/.cmd files to proj files & update GenAPI invocations","State":"open","Body":"We should convert files like https://github.com/dotnet/standard/blob/8ca3d4c0c9599186d50196781484312176a9b2ad/platforms/xamarin.android/seed.sh to `.proj` files that can be built on-demand (either by direct invocation of `dotnet msbuild`, or a wrapper .ps1/.sh script that builds the project). This way we'll have access to the up-to-date version of `GenAPI`. We should also update the invocation of GenAPI to match the new standard introduced by https://github.com/dotnet/arcade/pull/1676\r\n\r\nCC @ViktorHofer ","Url":"https://github.com/dotnet/standard/issues/1045","RelatedDescription":"Open issue \"Convert seed.sh/.cmd files to proj files & update GenAPI invocations\" (#1045)"},{"Id":"396287501","IsPullRequest":false,"CreatedAt":"2019-01-06T19:38:08","Actor":"gpcaretti","Number":"1044","RawContent":null,"Title":"FAQ: how to understand a package is compatible with NETStandard","State":"open","Body":"I am developing a library bases on .NETstandard 2.0.\r\n\r\nMy question is: if in my library I need to refer a class defined outside the .NETstandard library (e.g. the `System.ComponentModel.DataAnnotations.DataTypeAttribute` class), how do I understand if I do not break the multiplatfom compatibility of my library by referring the external library `System.ComponentModel.DataAnnotations`?","Url":"https://github.com/dotnet/standard/issues/1044","RelatedDescription":"Open issue \"FAQ: how to understand a package is compatible with NETStandard\" (#1044)"},{"Id":"396025237","IsPullRequest":true,"CreatedAt":"2019-01-04T19:25:54","Actor":"ViktorHofer","Number":"1043","RawContent":null,"Title":"Fix GenAPI invocation with new args","State":"closed","Body":"Also need to use DARC to get a GenApi fix in.","Url":"https://github.com/dotnet/standard/pull/1043","RelatedDescription":"Closed or merged PR \"Fix GenAPI invocation with new args\" (#1043)"},{"Id":"395644781","IsPullRequest":true,"CreatedAt":"2019-01-04T16:29:48","Actor":"ViktorHofer","Number":"1042","RawContent":null,"Title":"Respect ApiCompat cmd changes","State":"closed","Body":"Depends on https://github.com/dotnet/arcade/pull/1676","Url":"https://github.com/dotnet/standard/pull/1042","RelatedDescription":"Closed or merged PR \"Respect ApiCompat cmd changes\" (#1042)"},{"Id":"393264404","IsPullRequest":true,"CreatedAt":"2018-12-26T21:14:18","Actor":"terrajobst","Number":"1039","RawContent":null,"Title":"Fix representation of enum values","State":"closed","Body":"We finally fixed the missing feature in our source emitter so that it now includes a human readable bitmask rather than the underlying value.\r\n\r\n***This doesn't change any API surface but makes diffs more human readable.***","Url":"https://github.com/dotnet/standard/pull/1039","RelatedDescription":"Closed or merged PR \"Fix representation of enum values\" (#1039)"},{"Id":"393009607","IsPullRequest":false,"CreatedAt":"2018-12-21T01:08:29","Actor":"ViktorHofer","Number":"1036","RawContent":null,"Title":"Disable Jenkins","State":"closed","Body":"We need to disable Jenkins so I doesn't get queued in a PR anymore and if not already done point mc.dot.net to the new Azure DevOps run. I also noticed that the last official build happened 12/3, maybe the cron job is not configured right?","Url":"https://github.com/dotnet/standard/issues/1036","RelatedDescription":"Closed issue \"Disable Jenkins\" (#1036)"},{"Id":"393267915","IsPullRequest":true,"CreatedAt":"2018-12-21T00:51:26","Actor":"ViktorHofer","Number":"1040","RawContent":null,"Title":"Remove the manual config system","State":"open","Body":"Fixes https://github.com/dotnet/standard/issues/1032","Url":"https://github.com/dotnet/standard/pull/1040","RelatedDescription":"Open PR \"Remove the manual config system\" (#1040)"},{"Id":"393171059","IsPullRequest":true,"CreatedAt":"2018-12-20T19:19:30","Actor":"wtgodbe","Number":"1038","RawContent":null,"Title":"Add APICompat run for NetStandard2.0","State":"closed","Body":"Adds ApiCompat coverage for .netstandard2.0\r\n\r\n@ViktorHofer @terrajobst PTAL\r\n\r\nresolves https://github.com/dotnet/standard/issues/1029","Url":"https://github.com/dotnet/standard/pull/1038","RelatedDescription":"Closed or merged PR \"Add APICompat run for NetStandard2.0\" (#1038)"},{"Id":"392786865","IsPullRequest":false,"CreatedAt":"2018-12-20T19:19:30","Actor":"wtgodbe","Number":"1029","RawContent":null,"Title":"Add ApiCompat run for netstandard2.0","State":"closed","Body":"We should add an APICompat run that checks against 2.0, similar the ones we already have for 1.0-1.6: https://github.com/dotnet/standard/blob/master/apicompat/baselines/ApiCompatBaseline.netstandard1.6.txt","Url":"https://github.com/dotnet/standard/issues/1029","RelatedDescription":"Closed issue \"Add ApiCompat run for netstandard2.0\" (#1029)"},{"Id":"393005614","IsPullRequest":true,"CreatedAt":"2018-12-20T18:07:43","Actor":"ViktorHofer","Number":"1035","RawContent":null,"Title":"Cleanup files after arcade switch & update baseline","State":"closed","Body":"Cleaning up some leftovers and running the build once to regenerate the baseline files.\r\n\r\nOpened https://github.com/dotnet/standard/issues/1031 and https://github.com/dotnet/standard/issues/1032 which should also be done.\r\n\r\nFailing CI jobs are leftovers: https://github.com/dotnet/standard/issues/1036\r\n\r\ncc @danmosemsft ","Url":"https://github.com/dotnet/standard/pull/1035","RelatedDescription":"Closed or merged PR \"Cleanup files after arcade switch & update baseline\" (#1035)"},{"Id":"393001679","IsPullRequest":true,"CreatedAt":"2018-12-20T11:31:22","Actor":"ViktorHofer","Number":"1034","RawContent":null,"Title":"Cleanup files after arcade switch & update baseline","State":"closed","Body":"Cleaning up some leftovers and running the build once to regenerate the baseline files.\r\n\r\nOpened https://github.com/dotnet/standard/issues/1031 and https://github.com/dotnet/standard/issues/1032 which should also be done.\r\n\r\ncc @danmosemsft ","Url":"https://github.com/dotnet/standard/pull/1034","RelatedDescription":"Closed or merged PR \"Cleanup files after arcade switch & update baseline\" (#1034)"},{"Id":"392986163","IsPullRequest":false,"CreatedAt":"2018-12-20T10:40:01","Actor":"ViktorHofer","Number":"1032","RawContent":null,"Title":"Remove slim configuration system and stop overloading Configuration","State":"open","Body":"We should stop overloading the `Configuration` property in favor of the right msbuild properties and remove the `ConfigurationGroup` property to enable native VS support and remove a lot of obsolete stuff.\r\n\r\n```\r\n  <PropertyGroup Condition=\"'$(Configuration)'==''\">\r\n    <ConfigurationGroup Condition=\"'$(ConfigurationGroup)'==''\">Debug</ConfigurationGroup>\r\n    <Configuration>$(ConfigurationGroup)</Configuration>\r\n    <Configuration Condition=\"'$(TargetGroup)'!=''\">$(TargetGroup)_$(Configuration)</Configuration>\r\n    <Configuration Condition=\"'$(OSGroup)'!='' and '$(OSGroup)'!='AnyOS'\">$(OSGroup)_$(Configuration)</Configuration>\r\n  </PropertyGroup>\r\n```\r\n\r\ncc @ericstj @wtgodbe ","Url":"https://github.com/dotnet/standard/issues/1032","RelatedDescription":"Open issue \"Remove slim configuration system and stop overloading Configuration\" (#1032)"},{"Id":"392982975","IsPullRequest":false,"CreatedAt":"2018-12-20T10:31:53","Actor":"ViktorHofer","Number":"1031","RawContent":null,"Title":"Remove depproj approach and enable project restore","State":"open","Body":"As discussed in another PR I think it makes sense to remove the depproj approach here in the standard repo and follow the usual way of referencing packages directly in the respective project, in this case netstandard.csproj. Also the netstandard.builds file which restores for different frameworks can be incorporated in the csproj by adding a `TargetFrameworks` property and right PackageReference conditions. \r\n\r\ncc @wtgodbe @ericstj ","Url":"https://github.com/dotnet/standard/issues/1031","RelatedDescription":"Open issue \"Remove depproj approach and enable project restore\" (#1031)"},{"Id":"392822069","IsPullRequest":true,"CreatedAt":"2018-12-20T10:07:40","Actor":"wtgodbe","Number":"1030","RawContent":null,"Title":"Delete CI & redundant publish file","State":"closed","Body":"This deletes the old `netci.groovy` file, since we're using Azure DevOps for CI now. It also deletes `publish.msbuild`, which isn't used anywhere.\r\n\r\n@ViktorHofer PTAL","Url":"https://github.com/dotnet/standard/pull/1030","RelatedDescription":"Closed or merged PR \"Delete CI & redundant publish file\" (#1030)"},{"Id":"391885087","IsPullRequest":true,"CreatedAt":"2018-12-19T23:33:25","Actor":"wtgodbe","Number":"1027","RawContent":null,"Title":"Build Standard entirely against Arcade, without Buildtools","State":"closed","Body":"This cuts out buildtools entirely from the Standard repo, so that we fully rely on the Arcade SDK to build against instead. It replaces the functionality for code analyzers, `ValidateApiCompatForSrc`, and the build tasks.\r\n\r\n@ericstj @safern @danmosemsft @ViktorHofer @chcosta PTAL\r\n\r\nCC @karelz ","Url":"https://github.com/dotnet/standard/pull/1027","RelatedDescription":"Closed or merged PR \"Build Standard entirely against Arcade, without Buildtools\" (#1027)"},{"Id":"390839367","IsPullRequest":true,"CreatedAt":"2018-12-19T01:29:43","Actor":"terrajobst","Number":"1020","RawContent":null,"Title":"Reduce noise in reference assemblies","State":"closed","Body":"This doesn't change any APIs. It's just reducing noise from in the textual diff of the reference assemblies.\r\n\r\n* Fix trailing whitespace (69cb85e)\r\n* Mark types as partial (c9725f7)\r\n* Replace handwritten base calls with generated ones (78649f6)\r\n","Url":"https://github.com/dotnet/standard/pull/1020","RelatedDescription":"Closed or merged PR \"Reduce noise in reference assemblies\" (#1020)"},{"Id":"392146465","IsPullRequest":true,"CreatedAt":"2018-12-18T13:01:40","Actor":"dotnet-maestro[bot]","Number":"1028","RawContent":null,"Title":"Update dependency files","State":"open","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.ApiCompat - 1.0.0-beta.18617.7\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18617.7\r\n- Microsoft.DotNet.Build.Tasks.Packaging - 1.0.0-beta.18617.7\r\n- Microsoft.DotNet.GenAPI - 1.0.0-beta.18617.7\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.ApiCompat - 1.0.0-beta.18618.7\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18618.7\r\n- Microsoft.DotNet.Build.Tasks.Packaging - 1.0.0-beta.18618.7\r\n- Microsoft.DotNet.GenAPI - 1.0.0-beta.18618.7\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1028","RelatedDescription":"Open PR \"Update dependency files\" (#1028)"},{"Id":"391702003","IsPullRequest":true,"CreatedAt":"2018-12-17T15:07:31","Actor":"dotnet-maestro[bot]","Number":"1026","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.ApiCompat - 1.0.0-beta.18616.5\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18616.5\r\n- Microsoft.DotNet.Build.Tasks.Packaging - 1.0.0-beta.18616.5\r\n- Microsoft.DotNet.GenAPI - 1.0.0-beta.18616.5\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1026","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#1026)"},{"Id":"391465145","IsPullRequest":true,"CreatedAt":"2018-12-16T19:53:13","Actor":"dotnet-maestro[bot]","Number":"1025","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.ApiCompat - 1.0.0-beta.18615.1\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18615.1\r\n- Microsoft.DotNet.Build.Tasks.Packaging - 1.0.0-beta.18615.1\r\n- Microsoft.DotNet.GenAPI - 1.0.0-beta.18615.1\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1025","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#1025)"},{"Id":"391376312","IsPullRequest":true,"CreatedAt":"2018-12-15T13:41:30","Actor":"dotnet-maestro[bot]","Number":"1023","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.ApiCompat - 1.0.0-beta.18614.3\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18614.3\r\n- Microsoft.DotNet.Build.Tasks.Packaging - 1.0.0-beta.18614.3\r\n- Microsoft.DotNet.GenAPI - 1.0.0-beta.18614.3\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1023","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#1023)"},{"Id":"391102384","IsPullRequest":true,"CreatedAt":"2018-12-14T13:21:43","Actor":"dotnet-maestro[bot]","Number":"1021","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.ApiCompat - 1.0.0-beta.18613.20\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18613.20\r\n- Microsoft.DotNet.Build.Tasks.Packaging - 1.0.0-beta.18613.20\r\n- Microsoft.DotNet.GenAPI - 1.0.0-beta.18613.20\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1021","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#1021)"}],"ResultType":"GitHubIssue"},"CoreFx-Issues":{"Issues":[{"Id":"398109452","IsPullRequest":false,"CreatedAt":"2019-01-11T03:59:11","Actor":"SuYiQianYei","Number":"34540","RawContent":null,"Title":"Socket SendFile or BeginSendFile Is there a size limit","State":"closed","Body":"Win7  3G size file  get Exception","Url":"https://github.com/dotnet/corefx/issues/34540","RelatedDescription":"Closed issue \"Socket SendFile or BeginSendFile Is there a size limit\" (#34540)"},{"Id":"398109230","IsPullRequest":true,"CreatedAt":"2019-01-11T02:52:41","Actor":"Dotnet-GitSync-Bot","Number":"34539","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"open","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub","Url":"https://github.com/dotnet/corefx/pull/34539","RelatedDescription":"Open PR \"Mirror changes from dotnet/coreclr\" (#34539)"},{"Id":"398049702","IsPullRequest":true,"CreatedAt":"2019-01-11T01:10:22","Actor":"Dotnet-GitSync-Bot","Number":"34531","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @marek-safar","Url":"https://github.com/dotnet/corefx/pull/34531","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#34531)"},{"Id":"398081756","IsPullRequest":true,"CreatedAt":"2019-01-11T00:48:18","Actor":"GrabYourPitchforks","Number":"34538","RawContent":null,"Title":"Unit tests for UTF-8 validation APIs","State":"open","Body":"These are the unit tests and `System.Runtime` refasm changes for https://github.com/dotnet/coreclr/pull/21948.\r\n\r\nThe `BoundedMemory` type (for internal unit test use) is a slightly improved and simplified version of the AppVerifier-like code introduced into corefxlab at https://github.com/dotnet/corefxlab/pull/1881. It provides a framework for testing unsafe C# code to make sure the code under test doesn't read outside the bounds of the allowed buffers.","Url":"https://github.com/dotnet/corefx/pull/34538","RelatedDescription":"Open PR \"Unit tests for UTF-8 validation APIs\" (#34538)"},{"Id":"398053776","IsPullRequest":true,"CreatedAt":"2019-01-11T00:47:20","Actor":"safern","Number":"34533","RawContent":null,"Title":"Disable Tizen leg from PRs while move to the new system","State":"closed","Body":"While we move to the new system, this is currently blocking our move. Related discussion: https://github.com/dotnet/coreclr/issues/21422","Url":"https://github.com/dotnet/corefx/pull/34533","RelatedDescription":"Closed or merged PR \"Disable Tizen leg from PRs while move to the new system\" (#34533)"},{"Id":"398079742","IsPullRequest":false,"CreatedAt":"2019-01-11T00:39:32","Actor":"sdmaclea","Number":"34536","RawContent":null,"Title":"AssemblyLoadContext add ContextInfo","State":"open","Body":"There is a desire to provide more context information during loading to enable more advanced scenarios.\r\n\r\nAn initial proposal would be to add\r\n```C#\r\npublic struct ContextInfo\r\n{\r\n    public System.Reflection.Assembly Requestor { get; }\r\n}\r\n```\r\n\r\nAnd then add additional extended virtual methods, events and delegates\r\n```C#\r\n[System.Runtime.InteropServices.ComVisible(true)]\r\n[System.Serializable]\r\npublic delegate \r\nvoid AssemblyLoadExtendedEventHandler(object sender, \r\n                                      System.Reflection.AssemblyName assemblyName,\r\n                                      ContextInfo info);\r\n\r\n[System.Runtime.InteropServices.ComVisible(true)]\r\n[System.Serializable]\r\npublic delegate \r\nvoid UnmanagedLoadExtendedEventHandler(object sender, \r\n                                       string unmanagedDllName,\r\n                                       ContextInfo info);}\r\n\r\npublic class AssemblyLoadContext\r\n{\r\n    protected virtual System.Reflection.Assembly Load (System.Reflection.AssemblyName assemblyName, ContextInfo info)\r\n    {\r\n       return Load(assemblyName);\r\n    }\r\n\r\n    protected virtual IntPtr LoadUnmanagedDll (string unmanagedDllName, assemblyName, ContextInfo info)\r\n    {\r\n        return LoadUnmanagedDll(unmanagedDllName);\r\n    }\r\n\r\n    public event AssemblyLoadExtendedEventHandler ResolvingExtended;\r\n    public event UnmanagedLoadExtendedEventHandler ResolvingUnmanagedDllExtended;\r\n}\r\n\r\n```\r\n","Url":"https://github.com/dotnet/corefx/issues/34536","RelatedDescription":"Open issue \"AssemblyLoadContext add ContextInfo\" (#34536)"},{"Id":"398067343","IsPullRequest":false,"CreatedAt":"2019-01-10T23:49:05","Actor":"sdmaclea","Number":"34535","RawContent":null,"Title":"Make AssemblyLoadContext a concrete type","State":"open","Body":"There is a desire to simplify `System.Runtime.Loader.AssemblyLoadContext` usage by making it a concrete type.\r\n\r\nThe existing class is abstract because the `Load()` method is not implemented.\r\n\r\nThe simplest solution is to simply implement `Load()` as a method returning `null` and make the appropriate constructors public.\r\n","Url":"https://github.com/dotnet/corefx/issues/34535","RelatedDescription":"Open issue \"Make AssemblyLoadContext a concrete type\" (#34535)"},{"Id":"398063256","IsPullRequest":false,"CreatedAt":"2019-01-10T23:33:49","Actor":"cclauson","Number":"34534","RawContent":null,"Title":"Using HttpClient.PatchAsync() from .NET Standard 2.0 library","State":"open","Body":"HttpClient.PatchAsync() is documented:\r\nhttps://docs.microsoft.com/en-us/dotnet/api/system.net.http.httpclient.patchasync?view=netcore-2.2\r\n\r\nIs this only available in .NET Core, and not .NET Standard?\r\n\r\nThanks!","Url":"https://github.com/dotnet/corefx/issues/34534","RelatedDescription":"Open issue \"Using HttpClient.PatchAsync() from .NET Standard 2.0 library\" (#34534)"},{"Id":"398052438","IsPullRequest":true,"CreatedAt":"2019-01-10T22:56:58","Actor":"maryamariyan","Number":"34532","RawContent":null,"Title":"Add System.Reflection.Emit.DynamicILInfo","State":"open","Body":"Related to https://github.com/dotnet/corefx/issues/12055\r\n\r\nAdds basic tests for DynamicMethod.GetDynamicILInfo()\r\nRelated to coreclr PR: https://github.com/dotnet/coreclr/pull/21945\r\n\r\ncc: @Anipik @danmosemsft ","Url":"https://github.com/dotnet/corefx/pull/34532","RelatedDescription":"Open PR \"Add System.Reflection.Emit.DynamicILInfo\" (#34532)"},{"Id":"398033492","IsPullRequest":false,"CreatedAt":"2019-01-10T21:59:09","Actor":"sdmaclea","Number":"34530","RawContent":null,"Title":"Extend AssemblyLoadContext API for diagnostics","State":"open","Body":"To simplify diagnostics for `System.Runtime.Loader.AssemblyLoadContext`, add the following APIs.\r\n\r\n```C#\r\n  // Allow additional MetaData during construction\r\n  protected AssemblyLoadContext (String diagnosticInfo);\r\n  \r\n  // Set of ALCs\r\n  public static IEnumerator<AssemblyLoadContext> Contexts { get; } \r\n\r\n  // Set of Assemblies in the ALC\r\n  public IEnumerator<System.Reflection.Assembly> Assemblies { get; } \r\n\r\n  // Override the ToString to provide Type, Instance, and diagnosticInfo\r\n  public override string ToString ();\r\n```\r\n\r\nThe Default ALC would be constructed with diagnosticInfo = \"Default\".\r\nThe automatically generated ALC would provide some context.  Assembly.Load* might provide some parent and/or call stack info.","Url":"https://github.com/dotnet/corefx/issues/34530","RelatedDescription":"Open issue \"Extend AssemblyLoadContext API for diagnostics\" (#34530)"},{"Id":"398007311","IsPullRequest":false,"CreatedAt":"2019-01-10T21:16:20","Actor":"tannergooding","Number":"34516","RawContent":null,"Title":"Tensor should be in System.Numerics.Tensors namespace","State":"closed","Body":"_From @ericstj on October 4, 2017 21:41_\n\nThis was feedback from the API review.  Folks don't want us to put this in the root Numerics namespace.\n\n_Copied from original issue: dotnet/corefxlab#1816_","Url":"https://github.com/dotnet/corefx/issues/34516","RelatedDescription":"Closed issue \"Tensor should be in System.Numerics.Tensors namespace\" (#34516)"},{"Id":"398016512","IsPullRequest":true,"CreatedAt":"2019-01-10T21:11:41","Actor":"gfoidl","Number":"34529","RawContent":null,"Title":"Base64 encoding with simd-support","State":"open","Body":"## Description\r\n\r\nFixes https://github.com/dotnet/corefx/issues/32365\r\n\r\nThe code is based and inspired on the C-code from https://github.com/aklomp/base64 wich is licensed under [BSD 2-Clause \"Simplified\" License](https://github.com/aklomp/base64/blob/master/LICENSE).\r\n[Base64 encoding with SIMD instructions](http://0x80.pl/notesen/2016-01-12-sse-base64-encoding.html) and [Base64 decoding with SIMD instructions](http://0x80.pl/notesen/2016-01-17-sse-base64-decoding.html) give an outline of the algorithm, as it is not very intuitive.\r\n\r\nI kept the variables, namens, etc. as close as possible to the original code.\r\n\r\nA version for `Convert.ToBase64String` is done in https://github.com/dotnet/coreclr/pull/21833\r\n\r\n## Benchmarks\r\n\r\nAs mentioned in https://github.com/dotnet/corefx/issues/32365#issuecomment-443420296 I've created a separate package for base64 encoding / decoding (main motivation was base64url support, and playing with the intrinsics). The code here is more or less an adaption from that code for corefx, but in essence it is the same (at least after JITing the \"work\"-code is the same).\r\nTherefore I'll show the perf-numbers based on that code.\r\n\r\nThe benchmarks were done with sizes 5 (mini -- testing overhead), 16 (eg. a Guid), 1000.\r\n[HardwareIntrinsicsCustomConfig ](https://github.com/gfoidl/Base64/blob/bf4e58162547746266881bd15297ffb52c81867b/perf/gfoidl.Base64.Benchmarks/HardwareIntrinsicsCustomConfig.cs#L6) is used to run the benchmarks with AVX2, SSSE3 and pure scalar.\r\n\r\n### Summary of results\r\n\r\nI'll give a brief summary of the results, as the table is quite large.\r\n\r\nFor encoding speedups from 10% to 1000% and more (the longer the input, the greater the speedup) are reported. In the scalar case mainly due the elimination of `movsxd` from the loop.\r\n\r\nDecoding doesn't have as huge speedups as encoding has, because the input has to be checked to be valid base64 characters, but still speedups of 500% are shown. \r\nThe scalar case shows a regression of 10-20%. For me this is OK, as input-sizes of 5 seem pretty uncommon.\r\n\r\n### Encode\r\n\r\n[Benchmark](https://github.com/gfoidl/Base64/blob/bf4e58162547746266881bd15297ffb52c81867b/perf/gfoidl.Base64.Benchmarks/EncodeUtf8Benchmark.cs#L8)\r\n\r\n``` ini\r\n\r\nBenchmarkDotNet=v0.11.3, OS=Windows 10.0.14393.2485 (1607/AnniversaryUpdate/Redstone1), VM=Hyper-V\r\nIntel Xeon CPU E5-2673 v3 2.40GHz, 1 CPU, 2 logical and 2 physical cores\r\n.NET Core SDK=3.0.100-preview-009844\r\n  [Host] : .NET Core 3.0.0-preview-27218-01 (CoreCLR 4.6.27217.02, CoreFX 4.7.18.61304), 64bit RyuJIT\r\n  AVX2   : .NET Core 3.0.0-preview-27218-01 (CoreCLR 4.6.27217.02, CoreFX 4.7.18.61304), 64bit RyuJIT\r\n  SSSE3  : .NET Core 3.0.0-preview-27218-01 (CoreCLR 4.6.27217.02, CoreFX 4.7.18.61304), 64bit RyuJIT\r\n  Scalar : .NET Core 3.0.0-preview-27218-01 (CoreCLR 4.6.27217.02, CoreFX 4.7.18.61304), 64bit RyuJIT\r\n\r\nRuntime=Core  \r\n\r\n```\r\n|        Method |    Job |                       EnvironmentVariables | DataLen |        Mean |      Error |     StdDev | Ratio | RatioSD |\r\n|-------------- |------- |------------------------------------------- |-------- |------------:|-----------:|-----------:|------:|--------:|\r\n| **BuffersBase64** |   **AVX2** |                                      **Empty** |       **5** |    **25.91 ns** |  **0.5388 ns** |  **0.6617 ns** |  **1.00** |    **0.00** |\r\n|  gfoidlBase64 |   AVX2 |                                      Empty |       5 |    22.87 ns |  0.3431 ns |  0.3210 ns |  0.89 |    0.02 |\r\n|               |        |                                            |         |             |            |            |       |         |\r\n| BuffersBase64 |  SSSE3 |                       COMPlus_EnableAVX2=0 |       5 |    25.50 ns |  0.3564 ns |  0.3334 ns |  1.00 |    0.00 |\r\n|  gfoidlBase64 |  SSSE3 |                       COMPlus_EnableAVX2=0 |       5 |    23.70 ns |  0.5091 ns |  0.5000 ns |  0.93 |    0.03 |\r\n|               |        |                                            |         |             |            |            |       |         |\r\n| BuffersBase64 | Scalar | COMPlus_EnableAVX2=0,COMPlus_EnableSSSE3=0 |       5 |    25.66 ns |  0.1901 ns |  0.1587 ns |  1.00 |    0.00 |\r\n|  gfoidlBase64 | Scalar | COMPlus_EnableAVX2=0,COMPlus_EnableSSSE3=0 |       5 |    21.54 ns |  0.4772 ns |  0.4901 ns |  0.84 |    0.02 |\r\n|               |        |                                            |         |             |            |            |       |         |\r\n| **BuffersBase64** |   **AVX2** |                                      **Empty** |      **16** |    **41.95 ns** |  **0.3670 ns** |  **0.3433 ns** |  **1.00** |    **0.00** |\r\n|  gfoidlBase64 |   AVX2 |                                      Empty |      16 |    25.33 ns |  0.5545 ns |  0.7773 ns |  0.61 |    0.02 |\r\n|               |        |                                            |         |             |            |            |       |         |\r\n| BuffersBase64 |  SSSE3 |                       COMPlus_EnableAVX2=0 |      16 |    42.30 ns |  0.8697 ns |  1.0016 ns |  1.00 |    0.00 |\r\n|  gfoidlBase64 |  SSSE3 |                       COMPlus_EnableAVX2=0 |      16 |    25.91 ns |  0.4458 ns |  0.4170 ns |  0.61 |    0.02 |\r\n|               |        |                                            |         |             |            |            |       |         |\r\n| BuffersBase64 | Scalar | COMPlus_EnableAVX2=0,COMPlus_EnableSSSE3=0 |      16 |    40.91 ns |  0.7998 ns |  0.7482 ns |  1.00 |    0.00 |\r\n|  gfoidlBase64 | Scalar | COMPlus_EnableAVX2=0,COMPlus_EnableSSSE3=0 |      16 |    32.20 ns |  0.7008 ns |  1.7451 ns |  0.84 |    0.07 |\r\n|               |        |                                            |         |             |            |            |       |         |\r\n| **BuffersBase64** |   **AVX2** |                                      **Empty** |    **1000** | **1,444.22 ns** | **23.2487 ns** | **21.7468 ns** |  **1.00** |    **0.00** |\r\n|  gfoidlBase64 |   AVX2 |                                      Empty |    1000 |   132.03 ns |  0.6599 ns |  0.6173 ns |  0.09 |    0.00 |\r\n|               |        |                                            |         |             |            |            |       |         |\r\n| BuffersBase64 |  SSSE3 |                       COMPlus_EnableAVX2=0 |    1000 | 1,454.78 ns | 16.5361 ns | 15.4679 ns |  1.00 |    0.00 |\r\n|  gfoidlBase64 |  SSSE3 |                       COMPlus_EnableAVX2=0 |    1000 |   211.23 ns |  3.3349 ns |  3.1194 ns |  0.15 |    0.00 |\r\n|               |        |                                            |         |             |            |            |       |         |\r\n| BuffersBase64 | Scalar | COMPlus_EnableAVX2=0,COMPlus_EnableSSSE3=0 |    1000 | 1,432.28 ns | 26.4097 ns | 24.7036 ns |  1.00 |    0.00 |\r\n|  gfoidlBase64 | Scalar | COMPlus_EnableAVX2=0,COMPlus_EnableSSSE3=0 |    1000 | 1,323.54 ns | 21.6584 ns | 20.2593 ns |  0.92 |    0.02 |\r\n\r\n\r\n### Decode\r\n\r\n[Benchmark](https://github.com/gfoidl/Base64/blob/bf4e58162547746266881bd15297ffb52c81867b/perf/gfoidl.Base64.Benchmarks/DecodeUtf8Benchmark.cs#L8)\r\n\r\n``` ini\r\n\r\nBenchmarkDotNet=v0.11.3, OS=Windows 10.0.14393.2485 (1607/AnniversaryUpdate/Redstone1), VM=Hyper-V\r\nIntel Xeon CPU E5-2673 v3 2.40GHz, 1 CPU, 2 logical and 2 physical cores\r\n.NET Core SDK=3.0.100-preview-009844\r\n  [Host] : .NET Core 3.0.0-preview-27218-01 (CoreCLR 4.6.27217.02, CoreFX 4.7.18.61304), 64bit RyuJIT\r\n  AVX2   : .NET Core 3.0.0-preview-27218-01 (CoreCLR 4.6.27217.02, CoreFX 4.7.18.61304), 64bit RyuJIT\r\n  SSSE3  : .NET Core 3.0.0-preview-27218-01 (CoreCLR 4.6.27217.02, CoreFX 4.7.18.61304), 64bit RyuJIT\r\n  Scalar : .NET Core 3.0.0-preview-27218-01 (CoreCLR 4.6.27217.02, CoreFX 4.7.18.61304), 64bit RyuJIT\r\n\r\nRuntime=Core  \r\n\r\n```\r\n|        Method |    Job |                       EnvironmentVariables | DataLen |        Mean |      Error |     StdDev | Ratio | RatioSD |\r\n|-------------- |------- |------------------------------------------- |-------- |------------:|-----------:|-----------:|------:|--------:|\r\n| **BuffersBase64** |   **AVX2** |                                      **Empty** |       **5** |    **27.17 ns** |  **0.5911 ns** |  **0.5805 ns** |  **1.00** |    **0.00** |\r\n|  gfoidlBase64 |   AVX2 |                                      Empty |       5 |    30.47 ns |  0.4374 ns |  0.3652 ns |  1.12 |    0.03 |\r\n|               |        |                                            |         |             |            |            |       |         |\r\n| BuffersBase64 |  SSSE3 |                       COMPlus_EnableAVX2=0 |       5 |    26.61 ns |  0.4777 ns |  0.3989 ns |  1.00 |    0.00 |\r\n|  gfoidlBase64 |  SSSE3 |                       COMPlus_EnableAVX2=0 |       5 |    31.74 ns |  0.6826 ns |  1.0425 ns |  1.20 |    0.04 |\r\n|               |        |                                            |         |             |            |            |       |         |\r\n| BuffersBase64 | Scalar | COMPlus_EnableAVX2=0,COMPlus_EnableSSSE3=0 |       5 |    26.37 ns |  0.4735 ns |  0.4429 ns |  1.00 |    0.00 |\r\n|  gfoidlBase64 | Scalar | COMPlus_EnableAVX2=0,COMPlus_EnableSSSE3=0 |       5 |    30.55 ns |  0.6446 ns |  0.7674 ns |  1.15 |    0.04 |\r\n|               |        |                                            |         |             |            |            |       |         |\r\n| **BuffersBase64** |   **AVX2** |                                      **Empty** |      **16** |    **41.76 ns** |  **0.4361 ns** |  **0.4079 ns** |  **1.00** |    **0.00** |\r\n|  gfoidlBase64 |   AVX2 |                                      Empty |      16 |    38.24 ns |  0.2959 ns |  0.2768 ns |  0.92 |    0.01 |\r\n|               |        |                                            |         |             |            |            |       |         |\r\n| BuffersBase64 |  SSSE3 |                       COMPlus_EnableAVX2=0 |      16 |    41.56 ns |  0.8188 ns |  0.7659 ns |  1.00 |    0.00 |\r\n|  gfoidlBase64 |  SSSE3 |                       COMPlus_EnableAVX2=0 |      16 |    37.43 ns |  0.7654 ns |  0.7517 ns |  0.90 |    0.03 |\r\n|               |        |                                            |         |             |            |            |       |         |\r\n| BuffersBase64 | Scalar | COMPlus_EnableAVX2=0,COMPlus_EnableSSSE3=0 |      16 |    40.10 ns |  0.4917 ns |  0.4600 ns |  1.00 |    0.00 |\r\n|  gfoidlBase64 | Scalar | COMPlus_EnableAVX2=0,COMPlus_EnableSSSE3=0 |      16 |    44.10 ns |  0.7569 ns |  0.6709 ns |  1.10 |    0.02 |\r\n|               |        |                                            |         |             |            |            |       |         |\r\n| **BuffersBase64** |   **AVX2** |                                      **Empty** |    **1000** | **1,252.14 ns** | **19.1331 ns** | **17.8971 ns** |  **1.00** |    **0.00** |\r\n|  gfoidlBase64 |   AVX2 |                                      Empty |    1000 |   196.22 ns |  1.0869 ns |  1.0167 ns |  0.16 |    0.00 |\r\n|               |        |                                            |         |             |            |            |       |         |\r\n| BuffersBase64 |  SSSE3 |                       COMPlus_EnableAVX2=0 |    1000 | 1,255.62 ns | 24.2244 ns | 24.8766 ns |  1.00 |    0.00 |\r\n|  gfoidlBase64 |  SSSE3 |                       COMPlus_EnableAVX2=0 |    1000 |   269.54 ns |  4.0633 ns |  3.8008 ns |  0.21 |    0.01 |\r\n|               |        |                                            |         |             |            |            |       |         |\r\n| BuffersBase64 | Scalar | COMPlus_EnableAVX2=0,COMPlus_EnableSSSE3=0 |    1000 | 1,260.94 ns | 17.9500 ns | 16.7905 ns |  1.00 |    0.00 |\r\n|  gfoidlBase64 | Scalar | COMPlus_EnableAVX2=0,COMPlus_EnableSSSE3=0 |    1000 | 1,309.93 ns | 25.9879 ns | 29.9277 ns |  1.04 |    0.03 |\r\n\r\n## Notes\r\n\r\nAlignment isn't considered in this code (and I'm not aware of a base64 implementation that considers alignment).\r\n\r\nFor encoding the writes could be cache-aligned, as there are always written four bytes or multiples of four bytes (and 64 % 4 = 0). But \r\n* it complicates the code quite a lot\r\n* on hardware that supports SSSE3 / AVX2 the difference should be minimal, if any\r\n* the scalar code-path may get quite long, so the benefit of vectorization is less \r\n\r\nFor decoding it is similar, except that there are always read four bytes, so reading could be aligned. ","Url":"https://github.com/dotnet/corefx/pull/34529","RelatedDescription":"Open PR \"Base64 encoding with simd-support\" (#34529)"},{"Id":"398010563","IsPullRequest":true,"CreatedAt":"2019-01-10T20:54:57","Actor":"stephentoub","Number":"34528","RawContent":null,"Title":"Expose/test WithCancellation for async enumerables","State":"open","Body":"Depends on https://github.com/dotnet/coreclr/pull/21939\r\nFixes https://github.com/dotnet/corefx/issues/33909\r\ncc: @jcouv, @kouvel, @tarekgh \r\n\r\nRelates to async-streams umbrella: https://github.com/dotnet/roslyn/issues/24037","Url":"https://github.com/dotnet/corefx/pull/34528","RelatedDescription":"Open PR \"Expose/test WithCancellation for async enumerables\" (#34528)"},{"Id":"398008168","IsPullRequest":false,"CreatedAt":"2019-01-10T20:48:06","Actor":"tannergooding","Number":"34527","RawContent":null,"Title":"Plans and roadmap for Tensor class?","State":"open","Body":"_From @dotChris90 on January 9, 2019 21:32_\n\nHello experts! :)\r\n\r\na friend of me and I just found out today that your lab is doing something impressive for our taste. \r\nI am talking about the Tensor class in System.Numerics. \r\n\r\nThe reason why we impressed and interested is that we are (just for fun) working on a numpy port with nearly identical APIs - https://github.com/SciSharp/NumSharp. Unfortunately it is not too mature like we wish but we still proud of it. ;D \r\n\r\nSince numpy offering a specific NDArray we also developed a (**TENSORLIKE**) NDArray in C#. \r\nIn opposite to System.Numerics.Tensor - it is non generic and stores data in an internal Storage class. Storage class has a System.Array property which stores all data independent of shape in 1D array (Fortran or C style layout).  There exist a generic version which inheritage (aka is a child of) from the non generic version - and it rewrite the indexing method (so output is not object but specific data type).\r\n\r\nWe are little bit curious if there exist already concrete plans to ship this Tensor class to standard corefx or at moment it is more \"playground\" :)\r\nJust want to know how we can adapt our NumSharp Project + maybe other projects so we can use more internal classes like Tensor. \r\n\r\nThanks for your time and - thanks for working so hard on the corefx libs - you guys really make .NET ready for the future. \r\n\n\n_Copied from original issue: dotnet/corefxlab#2630_","Url":"https://github.com/dotnet/corefx/issues/34527","RelatedDescription":"Open issue \"Plans and roadmap for Tensor class?\" (#34527)"},{"Id":"398008065","IsPullRequest":false,"CreatedAt":"2019-01-10T20:47:48","Actor":"tannergooding","Number":"34526","RawContent":null,"Title":"Add new overloads to Clone() methods on subtypes of Tensor<T>","State":"open","Body":"_From @eerhardt on December 12, 2017 23:29_\n\n`Tensor<T>` has a Clone method that returns `Tensor<T>`.  However, if I have a variable casted to say a `DenseTensor<double>`, I shouldn't have to cast the return of `Clone()` down to a `DenseTensor<double>`.\r\n\r\n\r\nFor example:\r\n\r\n```c#\r\n        public static DenseTensor<double> Solve(DenseTensor<double> a, DenseTensor<double> b)\r\n        {\r\n            if (a.Rank != 2) throw new ArgumentException(\"a must be a square matrix\", nameof(a));\r\n            if (a.Dimensions[0] != a.Dimensions[1]) throw new ArgumentException(\"a must be a square matrix\", nameof(a));\r\n            if (b.Rank != 2) throw new ArgumentException(\"b must be a matrix\", nameof(b));\r\n            if (a.Dimensions[0] != b.Dimensions[0]) throw new ArgumentException(\"The number of rows in b must match the number of rows in a\", nameof(b));\r\n\r\n            // need to clone the inputs because LAPack will mutate the values\r\n            var aClone = (DenseTensor<double>)a.Clone();\r\n            var bClone = (DenseTensor<double>)b.Clone();\r\n```\r\n\r\n`a` and `b` are already `DenseTensor<double>`, when cloning I am guaranteed I should get back a `DenseTensor<double>`. We should require consumers to cast in this situation.\n\n_Copied from original issue: dotnet/corefxlab#1976_","Url":"https://github.com/dotnet/corefx/issues/34526","RelatedDescription":"Open issue \"Add new overloads to Clone() methods on subtypes of Tensor<T>\" (#34526)"},{"Id":"398007960","IsPullRequest":false,"CreatedAt":"2019-01-10T20:47:30","Actor":"tannergooding","Number":"34525","RawContent":null,"Title":"Add TensorView<T> `ref struct` like Span<T>, avoid coupling to `Tensor<T>` in algorithms-","State":"open","Body":"_From @nietras on November 16, 2017 12:16_\n\nTensors current design appears very \"heap\"y requiring heap allocation(s) upon construction etc. Not allowing for high performance scenarios. The design of this should be split to allow for a (or in fact several) value type `TensorView<T>` or similar that can be used as input parameter to methods but that does not require doing a heap allocation.\r\n\r\nIf necessary `TensorView<T>` could be a `ref struct` just like `Span<T>`.\r\n\r\nTensors are currently bound to repeat all the mistakes that we are trying to fix with `Span<T>`. Yes, you can use `Tensor` with existing memory, but not without doing heap allocations.\r\n\r\nThe point is though that memory **containment/ownership** should be separated from **memory view** so algorithms are **not** tied to a type that requires heap allocations.\r\n\r\nThis really needs to be part of a v1 design.\r\n\r\nI understand that this requires careful design to be able to support the different types of tensors, but it is not impossible without heap allocations by using generics. This has tradeoffs of course, but the current design makes the type problematic in performance scenarios.\r\n\r\nLooking aside at the perf issues there are around how the \"interface\" is defined currently, which is a different problem that could be helped with value type tensor views.\r\n\r\nI think the design needs to take performance into account from day one. Currently, I do not think that is the case.\n\n_Copied from original issue: dotnet/corefxlab#1938_","Url":"https://github.com/dotnet/corefx/issues/34525","RelatedDescription":"Open issue \"Add TensorView<T> `ref struct` like Span<T>, avoid coupling to `Tensor<T>` in algorithms-\" (#34525)"},{"Id":"398007884","IsPullRequest":false,"CreatedAt":"2019-01-10T20:47:18","Actor":"tannergooding","Number":"34524","RawContent":null,"Title":"Consider implementing struct Enumerator on Tensor<T>","State":"open","Body":"_From @eerhardt on October 30, 2017 15:31_\n\nSee https://github.com/dotnet/corefxlab/pull/1884#issuecomment-340010018.\r\n\r\nImplementing a struct Enumerator has better performance characteristics when directly enumerating the type - no allocations; no virtual calls, inlining.\r\n\r\nWe should determine if this makes sense for Tensor, and implement it, if so.\n\n_Copied from original issue: dotnet/corefxlab#1893_","Url":"https://github.com/dotnet/corefx/issues/34524","RelatedDescription":"Open issue \"Consider implementing struct Enumerator on Tensor<T>\" (#34524)"},{"Id":"398007809","IsPullRequest":false,"CreatedAt":"2019-01-10T20:47:06","Actor":"tannergooding","Number":"34523","RawContent":null,"Title":"Add parameter validation to Tensors","State":"open","Body":"_From @ericstj on October 20, 2017 19:56_\n\nWe should add parameter validation to most of the public and protected API.  We should think about which APIs explicitly need to avoid parameter checking (eg: GetValue/SetValue) for performance and document them as such and potentially change the names.\n\n_Copied from original issue: dotnet/corefxlab#1869_","Url":"https://github.com/dotnet/corefx/issues/34523","RelatedDescription":"Open issue \"Add parameter validation to Tensors\" (#34523)"},{"Id":"398007767","IsPullRequest":false,"CreatedAt":"2019-01-10T20:46:58","Actor":"tannergooding","Number":"34522","RawContent":null,"Title":"Make indicies stepping more effecient","State":"open","Body":"_From @ericstj on October 20, 2017 16:19_\n\nIn many cases we do operations using only the linearized index.   There are cases where we instead need to use an indices array/span.  In these cases we should step the indices array rather than continuous composing/decomposing indices from a linearized index.\n\n_Copied from original issue: dotnet/corefxlab#1867_","Url":"https://github.com/dotnet/corefx/issues/34522","RelatedDescription":"Open issue \"Make indicies stepping more effecient\" (#34522)"},{"Id":"398007718","IsPullRequest":false,"CreatedAt":"2019-01-10T20:46:49","Actor":"tannergooding","Number":"34521","RawContent":null,"Title":"Add documentation markdown in the Tensor folder","State":"open","Body":"_From @ericstj on October 16, 2017 20:54_\n\nWe need to summarize the purpose and use cases of Tensor in the System.Numerics.Tensor folder along with some basic usage samples.\r\n\r\n\n\n_Copied from original issue: dotnet/corefxlab#1849_","Url":"https://github.com/dotnet/corefx/issues/34521","RelatedDescription":"Open issue \"Add documentation markdown in the Tensor folder\" (#34521)"},{"Id":"398007663","IsPullRequest":false,"CreatedAt":"2019-01-10T20:46:41","Actor":"tannergooding","Number":"34520","RawContent":null,"Title":"Consider specification of lower bounds as an option for Tensors","State":"open","Body":"_From @ericstj on October 16, 2017 18:19_\n\nSome folks may want 1-based indexing, or even negative-based indexing (eg: for scratch space or representing a discrete function that can have negative values).  We could make this an option on construction.\r\n\r\nIf we did, we may want to roll dimensions/strides(/isReversedStride)/lower-bounds into a class that represents the tensor layout.\n\n_Copied from original issue: dotnet/corefxlab#1847_","Url":"https://github.com/dotnet/corefx/issues/34520","RelatedDescription":"Open issue \"Consider specification of lower bounds as an option for Tensors\" (#34520)"},{"Id":"398007573","IsPullRequest":false,"CreatedAt":"2019-01-10T20:46:25","Actor":"tannergooding","Number":"34519","RawContent":null,"Title":"Consider tensor construction from vector subscripts (eg: indices sequences)","State":"open","Body":"_From @ericstj on October 16, 2017 18:11_\n\nFortran has a concept of creating a new array from a subset of indices in another array.  See https://software.intel.com/en-us/node/678553.  We could expose similar functionality on tensor.\r\n\r\nRelated #1819 \n\n_Copied from original issue: dotnet/corefxlab#1846_","Url":"https://github.com/dotnet/corefx/issues/34519","RelatedDescription":"Open issue \"Consider tensor construction from vector subscripts (eg: indices sequences)\" (#34519)"},{"Id":"398007516","IsPullRequest":false,"CreatedAt":"2019-01-10T20:46:13","Actor":"tannergooding","Number":"34518","RawContent":null,"Title":"Add slow reflection-based generic tensor arithmetic ","State":"open","Body":"_From @ericstj on October 5, 2017 18:39_\n\nCurrently we have no fallback for a T that we don't understand in the Tensor arithmetic methods, we'll just throw.\r\n\r\nWe could instead construct a ITensorArithmetic that uses reflection to locate operators on that type.  This is slow for a couple reasons:\r\n1. Built in types have operators that the JIT understands and replaces with instructions rather than method calls.\r\n2. We have to use reflection to locate the operators.\r\n\r\nSometimes \"really slow\" can be better than not at all.  If that turns out to be the case then we can do this.\r\n\r\nThis may not even be in scope given what we decide for https://github.com/dotnet/corefxlab/issues/1798.\r\n\r\nI could imagine this coming in scope if we decide computation is important, we're OK with slow computation, and we care about new primitive types (like System.Half) that the framework/JIT doesn't know about.\r\n\n\n_Copied from original issue: dotnet/corefxlab#1820_","Url":"https://github.com/dotnet/corefx/issues/34518","RelatedDescription":"Open issue \"Add slow reflection-based generic tensor arithmetic \" (#34518)"},{"Id":"398007431","IsPullRequest":false,"CreatedAt":"2019-01-10T20:45:57","Actor":"tannergooding","Number":"34517","RawContent":null,"Title":"Consider supporting TensorFlow's sparse tensor shape","State":"open","Body":"_From @ericstj on October 4, 2017 21:49_\n\nhttps://www.tensorflow.org/api_docs/python/tf/SparseTensor\r\n\r\nThey just use two parallel arrays to represent the elements. 1-D for values: n length where n is number of non-zero values.  2-D for indices: n * Rank where n is number of values and Rank is the rank of the tensor (and individual indices are stored).\r\n\r\nUnlike our sparse representations they don't combine the indices into a single value via strides.\r\n\r\nThis should be relatively easy to represent with a lot of similar code as CompressedSparseTensor.\r\n\r\nWe'd just need to decide if its worth doing. (EG: if it'd help TensorFlowSharp, for instance)\n\n_Copied from original issue: dotnet/corefxlab#1817_","Url":"https://github.com/dotnet/corefx/issues/34517","RelatedDescription":"Open issue \"Consider supporting TensorFlow's sparse tensor shape\" (#34517)"},{"Id":"398007232","IsPullRequest":false,"CreatedAt":"2019-01-10T20:45:20","Actor":"tannergooding","Number":"34515","RawContent":null,"Title":"Is Tensor arithmetic really needed for V1 (or future?)","State":"open","Body":"_From @ericstj on September 29, 2017 16:31_\n\nThe scenarios we're aiming at in V1 have tensor as primarily an interop type: a way to safely pass dense and sparse multi-dimension data without copy, yet still access from the managed side.  We're not planning for heavy computation on tensors in managed code.\r\n\r\nAs such, we may want to scope out the math operators for v1.\n\n_Copied from original issue: dotnet/corefxlab#1798_","Url":"https://github.com/dotnet/corefx/issues/34515","RelatedDescription":"Open issue \"Is Tensor arithmetic really needed for V1 (or future?)\" (#34515)"},{"Id":"398007163","IsPullRequest":false,"CreatedAt":"2019-01-10T20:45:09","Actor":"tannergooding","Number":"34514","RawContent":null,"Title":"Consider dynamic growth of tensors along the outermost dimension","State":"open","Body":"_From @ericstj on September 27, 2017 15:40_\n\nThis is interesting when you start thinking about tensors as a holder for record data.  The act of adding a record is growing the tensor by one in the record dimension.\r\n\r\nWe already have Resize that permits an inplace resize, but this requires that the backing storage be identical.  \r\n\r\nWe should consider a new method (or potentially a creation mode) that can allow for the addition of many new rows/columns (depending on direction of stride).\r\n\r\nFor DenseTensors it makes the most sense to be a method, since it will need to reallocate the entire backing storage.  Alternatively we could allow for a capacity for a DenseTensor that differs from length along some set of multiples of the outer-most dimension.\r\n\r\nFor SparseTensors it may not need to be a method since they can grow with only reallocating the compressedCounts arrary (CompressedSparseTensor) or without any reallocation (SparseTensor)\n\n_Copied from original issue: dotnet/corefxlab#1793_","Url":"https://github.com/dotnet/corefx/issues/34514","RelatedDescription":"Open issue \"Consider dynamic growth of tensors along the outermost dimension\" (#34514)"},{"Id":"398007065","IsPullRequest":false,"CreatedAt":"2019-01-10T20:44:51","Actor":"tannergooding","Number":"34513","RawContent":null,"Title":"Sparse tensors should have a sparse-ness abstraction","State":"open","Body":"_From @ericstj on September 18, 2017 15:48_\n\nI've created SparseTensor (backed by dictionary) and CompressedSparseTensor (backed by arrays).  Both have a concept of non-zero-value-count but don't provide a way to access only non-zero values.\r\n\r\nHere are some of the options for API shape:\r\n1. Methods that take an index [0,  ValueCount - 1] and return both the indices and Value at that index.  This is challenging for SparseTensor since Dictionary currently doesn't have constant-cost getter for keys/values at an index.  Also index will not be stable across changes to the tensor, nor particularly meaningful.\r\n2. Properties that expose NonZeroIndices and NonZeroValues, and potentially NonZero-Indices-Value-pairs as ICollection<T>'s (similar to what is done in Dictionary<TKey,TValue>.\r\n\r\nWe'll need to come up with a good pattern for accessing the indices as well such that it doesn't generate a ton of garbage arrays.\r\n\r\n\r\n\n\n_Copied from original issue: dotnet/corefxlab#1763_","Url":"https://github.com/dotnet/corefx/issues/34513","RelatedDescription":"Open issue \"Sparse tensors should have a sparse-ness abstraction\" (#34513)"},{"Id":"398006959","IsPullRequest":false,"CreatedAt":"2019-01-10T20:44:31","Actor":"tannergooding","Number":"34512","RawContent":null,"Title":"Investigate performance of TensorArithmetic abstraction","State":"open","Body":"_From @ericstj on August 2, 2017 19:32_\n\nToday I use an interface as an abstraction for tensor arithmetic operations specific types.\r\n\r\nThe interface bridges the gap between the generic (which can't call numeric operators) and the specific primitive types (which use IL instructions for operators, or in the future may call Vector methods for the operators).  There is concern that the interface call is slower than if we just had the if/else tree inside the operator method body, [like vectors does it](https://github.com/dotnet/corefx/blob/79766d2288edbf5bc8b566a2c62b3e60c44f723c/src/System.Numerics.Vectors/src/System/Numerics/Vector.cs#L1552).  Initially I had thought doing a single if/else lookup for the type and caching in the static would be better than doing that lookup for every call, and calling through the interface was a noop but @mellinoe says (correctly) we should measure that first.  Either way is easily doable through the generated code we just need to make sure we aren't adding an unnecessary abstraction with runtime costs.\r\n\r\nIf we do change the way we do this we should see if we can do something to better block non-supported operations types (eg addition on bools).\n\n_Copied from original issue: dotnet/corefxlab#1685_","Url":"https://github.com/dotnet/corefx/issues/34512","RelatedDescription":"Open issue \"Investigate performance of TensorArithmetic abstraction\" (#34512)"},{"Id":"398006882","IsPullRequest":false,"CreatedAt":"2019-01-10T20:44:16","Actor":"tannergooding","Number":"34511","RawContent":null,"Title":"Add vectorization to Tensor operations","State":"open","Body":"_From @ericstj on August 1, 2017 19:27_\n\nWe should be able to easily vectorize the method bodies of https://github.com/ericstj/corefxlab/blob/563f023fe14a11a9ccb78f935475203ff3ba2b9c/src/System.Numerics.Tensors/System/Numerics/TensorArithmetic.cs.\r\n\r\nMy thought to do this is add a Vector<T> method to https://github.com/ericstj/corefxlab/blob/563f023fe14a11a9ccb78f935475203ff3ba2b9c/src/System.Numerics.Tensors/System/Numerics/TensorTemplate.ttinclude#L59 and use this if `Vector.IsHardwareAccelerated`, otherwise just use the normal IL.\r\n\n\n_Copied from original issue: dotnet/corefxlab#1683_","Url":"https://github.com/dotnet/corefx/issues/34511","RelatedDescription":"Open issue \"Add vectorization to Tensor operations\" (#34511)"},{"Id":"398006796","IsPullRequest":false,"CreatedAt":"2019-01-10T20:44:01","Actor":"tannergooding","Number":"34510","RawContent":null,"Title":"Implement Tensor Broadcasting","State":"open","Body":"_From @ericstj on August 1, 2017 19:18_\n\nBoth [matlab](https://www.mathworks.com/help/matlab/matlab_prog/compatible-array-sizes-for-basic-operations.html) and [python](https://docs.scipy.org/doc/numpy/user/basics.broadcasting.html) do multi-dimensional array broadcasting to allow you to perform element-wise operations on arrays with similar dimensions.\r\n\r\nWe should decide if we want to support something similar on Tensor.\r\n\r\nWe should also decide if we want it to happen automatically or require an explicit transformation.  If it happens automatically we could potentially do it without introducing any allocation at the cost of complexity to our index math in the element wise operations.\r\n\r\nIf we do add an explicit API it might look something like:\r\nTensor<T> BroadcastTo(params int[] newDimensions)\r\nTensor<T> BroadcastCompatibleWith(Tensor<T> other)\r\nstatic int[] GetBroadcastDimensions(Tensor<T> left, Tensor<T> right)\r\n\n\n_Copied from original issue: dotnet/corefxlab#1682_","Url":"https://github.com/dotnet/corefx/issues/34510","RelatedDescription":"Open issue \"Implement Tensor Broadcasting\" (#34510)"}],"ResultType":"GitHubIssue"},"Roslyn-Issues":{"Issues":[{"Id":"398117397","IsPullRequest":true,"CreatedAt":"2019-01-11T05:00:12","Actor":"dotnet-bot","Number":"32382","RawContent":null,"Title":"Merge master to master-vs-deps","State":"closed","Body":"\nThis is an automatically generated pull request from master into master-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-master-vs-deps\ngit reset --hard upstream/master-vs-deps\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push merges/master-to-master-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/32382","RelatedDescription":"Closed or merged PR \"Merge master to master-vs-deps\" (#32382)"},{"Id":"398117412","IsPullRequest":true,"CreatedAt":"2019-01-11T05:00:06","Actor":"dotnet-bot","Number":"32383","RawContent":null,"Title":"Merge dev16.1-preview1 to dev16.1-preview1-vs-deps","State":"closed","Body":"\nThis is an automatically generated pull request from dev16.1-preview1 into dev16.1-preview1-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/dev16.1-preview1-to-dev16.1-preview1-vs-deps\ngit reset --hard upstream/dev16.1-preview1-vs-deps\ngit merge upstream/dev16.1-preview1\n# Fix merge conflicts\ngit commit\ngit push merges/dev16.1-preview1-to-dev16.1-preview1-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/32383","RelatedDescription":"Closed or merged PR \"Merge dev16.1-preview1 to dev16.1-preview1-vs-deps\" (#32383)"},{"Id":"398117292","IsPullRequest":true,"CreatedAt":"2019-01-11T04:30:23","Actor":"dotnet-bot","Number":"32377","RawContent":null,"Title":"Merge dev16.0-preview2 to master","State":"closed","Body":"\nThis is an automatically generated pull request from dev16.0-preview2 into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/dev16.0-preview2-to-master\ngit reset --hard upstream/master\ngit merge upstream/dev16.0-preview2\n# Fix merge conflicts\ngit commit\ngit push merges/dev16.0-preview2-to-master --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/32377","RelatedDescription":"Closed or merged PR \"Merge dev16.0-preview2 to master\" (#32377)"},{"Id":"398117323","IsPullRequest":true,"CreatedAt":"2019-01-11T04:30:18","Actor":"dotnet-bot","Number":"32379","RawContent":null,"Title":"Merge dev16.0-preview2-vs-deps to master-vs-deps","State":"closed","Body":"\nThis is an automatically generated pull request from dev16.0-preview2-vs-deps into master-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/dev16.0-preview2-vs-deps-to-master-vs-deps\ngit reset --hard upstream/master-vs-deps\ngit merge upstream/dev16.0-preview2-vs-deps\n# Fix merge conflicts\ngit commit\ngit push merges/dev16.0-preview2-vs-deps-to-master-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/32379","RelatedDescription":"Closed or merged PR \"Merge dev16.0-preview2-vs-deps to master-vs-deps\" (#32379)"},{"Id":"398117387","IsPullRequest":true,"CreatedAt":"2019-01-11T04:30:13","Actor":"dotnet-bot","Number":"32381","RawContent":null,"Title":"Merge dev16.0-preview2 to dev16.0-preview2-vs-deps","State":"closed","Body":"\nThis is an automatically generated pull request from dev16.0-preview2 into dev16.0-preview2-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/dev16.0-preview2-to-dev16.0-preview2-vs-deps\ngit reset --hard upstream/dev16.0-preview2-vs-deps\ngit merge upstream/dev16.0-preview2\n# Fix merge conflicts\ngit commit\ngit push merges/dev16.0-preview2-to-dev16.0-preview2-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/32381","RelatedDescription":"Closed or merged PR \"Merge dev16.0-preview2 to dev16.0-preview2-vs-deps\" (#32381)"},{"Id":"398117423","IsPullRequest":true,"CreatedAt":"2019-01-11T04:30:07","Actor":"dotnet-bot","Number":"32384","RawContent":null,"Title":"Merge dev16.0-preview2 to features/enhanced-using","State":"closed","Body":"\nThis is an automatically generated pull request from dev16.0-preview2 into features/enhanced-using.\n\n``` bash\ngit fetch --all\ngit checkout merges/dev16.0-preview2-to-features/enhanced-using\ngit reset --hard upstream/features/enhanced-using\ngit merge upstream/dev16.0-preview2\n# Fix merge conflicts\ngit commit\ngit push merges/dev16.0-preview2-to-features/enhanced-using --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/32384","RelatedDescription":"Closed or merged PR \"Merge dev16.0-preview2 to features/enhanced-using\" (#32384)"},{"Id":"398117436","IsPullRequest":true,"CreatedAt":"2019-01-11T03:30:25","Actor":"dotnet-bot","Number":"32385","RawContent":null,"Title":"Merge master to features/editorconfig-in-compiler","State":"open","Body":"\nThis is an automatically generated pull request from master into features/editorconfig-in-compiler.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-features/editorconfig-in-compiler\ngit reset --hard upstream/features/editorconfig-in-compiler\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push merges/master-to-features/editorconfig-in-compiler --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/32385","RelatedDescription":"Open PR \"Merge master to features/editorconfig-in-compiler\" (#32385)"},{"Id":"398117339","IsPullRequest":true,"CreatedAt":"2019-01-11T03:30:02","Actor":"dotnet-bot","Number":"32380","RawContent":null,"Title":"Merge master-vs-deps to dev16.1-preview1-vs-deps","State":"open","Body":"\nThis is an automatically generated pull request from master-vs-deps into dev16.1-preview1-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-vs-deps-to-dev16.1-preview1-vs-deps\ngit reset --hard upstream/dev16.1-preview1-vs-deps\ngit merge upstream/master-vs-deps\n# Fix merge conflicts\ngit commit\ngit push merges/master-vs-deps-to-dev16.1-preview1-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/32380","RelatedDescription":"Open PR \"Merge master-vs-deps to dev16.1-preview1-vs-deps\" (#32380)"},{"Id":"398117304","IsPullRequest":true,"CreatedAt":"2019-01-11T03:29:51","Actor":"dotnet-bot","Number":"32378","RawContent":null,"Title":"Merge master to dev16.1-preview1","State":"open","Body":"\nThis is an automatically generated pull request from master into dev16.1-preview1.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-dev16.1-preview1\ngit reset --hard upstream/dev16.1-preview1\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push merges/master-to-dev16.1-preview1 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/32378","RelatedDescription":"Open PR \"Merge master to dev16.1-preview1\" (#32378)"},{"Id":"398108731","IsPullRequest":true,"CreatedAt":"2019-01-11T02:50:22","Actor":"sharwell","Number":"32376","RawContent":null,"Title":"Remove workaround for persistent errors","State":"open","Body":"Closes #32121","Url":"https://github.com/dotnet/roslyn/pull/32376","RelatedDescription":"Open PR \"Remove workaround for persistent errors\" (#32376)"},{"Id":"398108673","IsPullRequest":true,"CreatedAt":"2019-01-11T02:50:04","Actor":"sharwell","Number":"32375","RawContent":null,"Title":"Avoid navigating to message severity items unless requested","State":"open","Body":"Fixes an occasional failure in the ErrorList test.","Url":"https://github.com/dotnet/roslyn/pull/32375","RelatedDescription":"Open PR \"Avoid navigating to message severity items unless requested\" (#32375)"},{"Id":"398108562","IsPullRequest":true,"CreatedAt":"2019-01-11T02:49:30","Actor":"sharwell","Number":"32374","RawContent":null,"Title":"Add IterationDataAttribute for easy test looping","State":"open","Body":"","Url":"https://github.com/dotnet/roslyn/pull/32374","RelatedDescription":"Open PR \"Add IterationDataAttribute for easy test looping\" (#32374)"},{"Id":"398070202","IsPullRequest":true,"CreatedAt":"2019-01-11T02:00:05","Actor":"dotnet-bot","Number":"32367","RawContent":null,"Title":"Merge master-vs-deps to dev16.1-preview1-vs-deps","State":"closed","Body":"\nThis is an automatically generated pull request from master-vs-deps into dev16.1-preview1-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-vs-deps-to-dev16.1-preview1-vs-deps\ngit reset --hard upstream/dev16.1-preview1-vs-deps\ngit merge upstream/master-vs-deps\n# Fix merge conflicts\ngit commit\ngit push merges/master-vs-deps-to-dev16.1-preview1-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/32367","RelatedDescription":"Closed or merged PR \"Merge master-vs-deps to dev16.1-preview1-vs-deps\" (#32367)"},{"Id":"398090530","IsPullRequest":false,"CreatedAt":"2019-01-11T01:26:06","Actor":"jcouv","Number":"32373","RawContent":null,"Title":"Typing closing brace of switch expression results in duplicate brace","State":"open","Body":"The deduplication of the closing brace works if the switch expression is typed on a single line.\r\nBut it doesn't work for a multi-line switch expression.\r\nI expect the same behavior as typing a multi-line `if` statement with braces.\r\n\r\n![switch-closing](https://user-images.githubusercontent.com/12466233/51007429-5280d600-14fc-11e9-830c-da9c2d65b501.gif)\r\n\r\nCC @gafter \r\n\r\nUmbrella for recursive-patterns: https://github.com/dotnet/roslyn/issues/25935","Url":"https://github.com/dotnet/roslyn/issues/32373","RelatedDescription":"Open issue \"Typing closing brace of switch expression results in duplicate brace\" (#32373)"},{"Id":"398089156","IsPullRequest":true,"CreatedAt":"2019-01-11T01:20:13","Actor":"RikkiGibson","Number":"32372","RawContent":null,"Title":"Fix NullReferenceException in LocalRewriter.MakeConversionNode","State":"open","Body":"Resolves #31587 essentially by dropping in @jaredpar's reproducer and adding a null-conditional operator.","Url":"https://github.com/dotnet/roslyn/pull/32372","RelatedDescription":"Open PR \"Fix NullReferenceException in LocalRewriter.MakeConversionNode\" (#32372)"},{"Id":"398087610","IsPullRequest":true,"CreatedAt":"2019-01-11T01:14:29","Actor":"AlekseyTs","Number":"32371","RawContent":null,"Title":"Add tests for nullable reference types.","State":"open","Body":"Closes #31862.","Url":"https://github.com/dotnet/roslyn/pull/32371","RelatedDescription":"Open PR \"Add tests for nullable reference types.\" (#32371)"},{"Id":"398085462","IsPullRequest":false,"CreatedAt":"2019-01-11T01:04:32","Actor":"jcouv","Number":"32370","RawContent":null,"Title":"Stepping through switch expression is wrong","State":"open","Body":"The whole statement with the switch expression never gets highlighted as I step forward.\r\n\r\n![switch-stepping](https://user-images.githubusercontent.com/12466233/51006761-8c041200-14f9-11e9-8738-029e04f8ec81.gif)\r\n","Url":"https://github.com/dotnet/roslyn/issues/32370","RelatedDescription":"Open issue \"Stepping through switch expression is wrong\" (#32370)"},{"Id":"398070150","IsPullRequest":true,"CreatedAt":"2019-01-11T01:00:11","Actor":"dotnet-bot","Number":"32366","RawContent":null,"Title":"Merge dev16.0-preview2 to master","State":"closed","Body":"\nThis is an automatically generated pull request from dev16.0-preview2 into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/dev16.0-preview2-to-master\ngit reset --hard upstream/master\ngit merge upstream/dev16.0-preview2\n# Fix merge conflicts\ngit commit\ngit push merges/dev16.0-preview2-to-master --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/32366","RelatedDescription":"Closed or merged PR \"Merge dev16.0-preview2 to master\" (#32366)"},{"Id":"398070242","IsPullRequest":true,"CreatedAt":"2019-01-11T01:00:06","Actor":"dotnet-bot","Number":"32368","RawContent":null,"Title":"Merge dev16.0-preview2 to features/enhanced-using","State":"closed","Body":"\nThis is an automatically generated pull request from dev16.0-preview2 into features/enhanced-using.\n\n``` bash\ngit fetch --all\ngit checkout merges/dev16.0-preview2-to-features/enhanced-using\ngit reset --hard upstream/features/enhanced-using\ngit merge upstream/dev16.0-preview2\n# Fix merge conflicts\ngit commit\ngit push merges/dev16.0-preview2-to-features/enhanced-using --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/32368","RelatedDescription":"Closed or merged PR \"Merge dev16.0-preview2 to features/enhanced-using\" (#32368)"},{"Id":"398073749","IsPullRequest":false,"CreatedAt":"2019-01-11T00:14:16","Actor":"dibarbet","Number":"32369","RawContent":null,"Title":"Exception on casted object member access suggestions in VB","State":"open","Body":"**Version Used**: \r\nDebug build of roslyn on commit 16b21be788981784851d9aa946ec7e8406c76ea8\r\n\r\n**Steps to Reproduce**:\r\n\r\n1.  Checkout roslyn at above commit.\r\n2.  Run the debug build via F5\r\n3.  Create a new (or use existing VB project)\r\n4.  Start with the following code.\r\n```vb\r\nDim a = 1\r\nDim b = CStr(a)\r\n```\r\n5.  Then continue typing on the b expression and try and autosuggest a member of CStr(a) like Length\r\nE.g.\r\n```vb\r\nDim a = 1\r\nDim b = CStr(a).L\r\n```\r\nWhen you hit the .L, an exception should appear.\r\n\r\n**Expected Behavior**:\r\nCStr(a).L suggests .Length as a member to access.\r\n\r\n**Actual Behavior**:\r\nException is thrown.\r\nStacktrace - \r\n```\r\n---------------------------\r\nAssertion Failed: Abort=Quit, Retry=Debug, Ignore=Continue\r\n---------------------------\r\nUnexpected value 'ExtensionMethod' of type 'System.String'\r\n\r\n\r\n\r\n   at Roslyn.Utilities.ExceptionUtilities.UnexpectedValue(Object o)\r\n\r\n   at Microsoft.CodeAnalysis.Classification.ClassificationTags.GetClassificationTypeName(String textTag)\r\n\r\n   at Microsoft.CodeAnalysis.Editor.Implementation.IntelliSense.Completion.Presentation.ToolTipProvider.CancellableContentControl.GetVisibleDisplayString(TaggedText part, Boolean includeLeftToRightMarker)\r\n\r\n   at Microsoft.CodeAnalysis.Editor.Implementation.IntelliSense.Completion.Presentation.ToolTipProvider.CancellableContentControl.GetRun(TaggedText part, IClassificationFormatMap formatMap, ClassificationTypeMap typeMap)\r\n\r\n   at Microsoft.CodeAnalysis.Editor.Implementation.IntelliSense.Completion.Presentation.ToolTipProvider.CancellableContentControl.GetTextBlock(ImmutableArray`1 parts)\r\n\r\n   at Microsoft.CodeAnalysis.Editor.Implementation.IntelliSense.Completion.Presentation.ToolTipProvider.CancellableContentControl.ProcessDescription(Task`1 obj)\r\n\r\n   at System.Threading.Tasks.ContinuationTaskFromResultTask`1.InnerInvoke()\r\n\r\n   at System.Threading.Tasks.Task.Execute()\r\n\r\n   at System.Threading.Tasks.Task.ExecutionContextCallback(Object obj)\r\n\r\n   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx)\r\n\r\n   at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx)\r\n\r\n   at System.Threading.Tasks.Task.ExecuteWithThreadLocal(Task& currentTaskSlot)\r\n\r\n   at System.Threading.Tasks.Task.ExecuteEntry(Boolean bPreventDoubleExecution)\r\n\r\n   at System.Threading.Tasks.SynchronizationContextTaskScheduler.PostCallback(Object obj)\r\n\r\n   at System.Windows.Threading.ExceptionWrapper.InternalRealCall(Delegate callback, Object args, Int32 numArgs)\r\n\r\n   at System.Windows.Threading.ExceptionWrapper.TryCatchWhen(Object source, Delegate callback, Object args, Int32 numArgs, Delegate catchHandler)\r\n\r\n   at System.Windows.Threading.DispatcherOperation.InvokeImpl()\r\n\r\n   at System.Windows.Threading.DispatcherOperation.InvokeInSecurityContext(Object state)\r\n\r\n   at MS.Internal.CulturePreservingExecutionContext.CallbackWrapper(Object obj)\r\n\r\n   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx)\r\n\r\n   at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx)\r\n\r\n   at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state)\r\n\r\n   at MS.Internal.CulturePreservingExecutionContext.Run(CulturePreservingExecutionContext executionContext, ContextCallback callback, Object state)\r\n\r\n   at System.Windows.Threading.DispatcherOperation.Invoke()\r\n\r\n   at System.Windows.Threading.Dispatcher.ProcessQueue()\r\n\r\n   at System.Windows.Threading.Dispatcher.WndProcHook(IntPtr hwnd, Int32 msg, IntPtr wParam, IntPtr lParam, Boolean& handled)\r\n\r\n   at MS.Win32.HwndWrapper.WndProc(IntPtr hwnd, Int32 msg, IntPtr wParam, IntPtr lParam, Boolean& handled)\r\n\r\n   at MS.Win32.HwndSubclass.DispatcherCallbackOperation(Object o)\r\n\r\n   at System.Windows.Threading.ExceptionWrapper.InternalRealCall(Delegate callback, Object args, Int32 numArgs)\r\n\r\n   at System.Windows.Threading.ExceptionWrapper.TryCatchWhen(Object source, Delegate callback, Object args, Int32 numArgs, Delegate catchHandler)\r\n\r\n   at System.Windows.Threading.Dispatcher.LegacyInvokeImpl(DispatcherPriority priority, TimeSpan timeout, Delegate method, Object args, Int32 numArgs)\r\n\r\n   at MS.Win32.HwndSubclass.SubclassWndProc(IntPtr hwnd, Int32 msg, IntPtr wParam, IntPtr lParam)\r\n\r\n\r\n---------------------------\r\nAbort   Retry   Ignore   \r\n---------------------------\r\n\r\n```\r\n\r\n","Url":"https://github.com/dotnet/roslyn/issues/32369","RelatedDescription":"Open issue \"Exception on casted object member access suggestions in VB\" (#32369)"},{"Id":"398064514","IsPullRequest":false,"CreatedAt":"2019-01-10T23:38:26","Actor":"vsfeedback","Number":"32365","RawContent":null,"Title":"RuntimeBinderException when trying to subscribe from C# to dynamic object event defined in C++/CLR module","State":"open","Body":"When I'm trying to subscribe in C# to event defined in C++/CLR module using dynamic object I get RuntimeBinderException {&quot;The event 'Event' can only appear on the left hand side of += or -=&quot;}\n\nIt works when dynamic object comes from C# module or when I use C++/CLR object directly (without dynamic). \n\nThis problem doesn't occur in latest VS2017.\n\n_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/399539/runtimebinderexception-when-trying-to-subscribe-fr.html\nVSTS ticketId: 740220_\n_These are the original issue comments:_\n(no comments)\n_These are the original issue solutions:_\n(no solutions)","Url":"https://github.com/dotnet/roslyn/issues/32365","RelatedDescription":"Open issue \"RuntimeBinderException when trying to subscribe from C# to dynamic object event defined in C++/CLR module\" (#32365)"},{"Id":"398062791","IsPullRequest":false,"CreatedAt":"2019-01-10T23:32:12","Actor":"vsfeedback","Number":"32364","RawContent":null,"Title":"Nullable + dynamic","State":"open","Body":"If there is defined class A which overloads + operator such that it returns always null then it is possible to write program throwing ArgumentNullException but has no warnings by dynamics.\n\n_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/401974/nullable-dynamic.html\nVSTS ticketId: 743594_\n_These are the original issue comments:_\n\nlibor.drozdek on 12/7/2018, 01:58 AM (34 days ago): <p>I have problems with formatting when I use \"insert Code\" so I will post the code here:<br><br>#nullable enable <br>class Program<br>\\{<br>    private static void Main()\n<br>    \\{\n<br>        A obj = new A();<br>        var x = f(obj); </p><p>        // Null reference exception but no warning\n<br>        x.ToString();<br>    }\n<br>    <br>    public static object f(dynamic a)\n<br>    \\{\n<br>        if (a == null)\n<br>            throw new System.Exception();<br>\n<br>        return a + a;<br>    }\n<br>    <br>    public class A\n<br>    \\{\n<br>        public static A? operator +(A fst, A snd) =&gt; null;\n<br>    }\n<br>} </p>\n\n_These are the original issue solutions:_\n(no solutions)","Url":"https://github.com/dotnet/roslyn/issues/32364","RelatedDescription":"Open issue \"Nullable + dynamic\" (#32364)"},{"Id":"398062113","IsPullRequest":false,"CreatedAt":"2019-01-10T23:29:36","Actor":"vsfeedback","Number":"32363","RawContent":null,"Title":"Using ternary operator with a type check","State":"open","Body":"The following code does not compile in VS2019, but works in VS2017:\n\n            var test = new byte[5];\n\n            var res = test is byte[] ? &quot;yes&quot;: &quot;no&quot;;\n\nThere error seems to be the parser thinking the '?' is trying to set byte[] to a nullable reference type and I see the error message:\n\n'Feature nullable reference type is not available in C# 7.0.'\n\nThe parser should recognize the difference between a nullable type, and the ternary operator syntax.\n\nThe issue is resolved by converting the 'res' line to:\n\n            var res = (test is byte[]) ? &quot;yes&quot;: &quot;no&quot;;\n\n_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/408856/using-ternary-operator-with-a-type-check.html\nVSTS ticketId: 752025_\n_These are the original issue comments:_\n(no comments)\n_These are the original issue solutions:_\n(no solutions)","Url":"https://github.com/dotnet/roslyn/issues/32363","RelatedDescription":"Open issue \"Using ternary operator with a type check\" (#32363)"},{"Id":"398062053","IsPullRequest":false,"CreatedAt":"2019-01-10T23:29:20","Actor":"vsfeedback","Number":"32362","RawContent":null,"Title":"C#8.0 feature block the past code","State":"open","Body":"public static string PrintArray(object[] array) =&gt; string.Join(&quot;,&quot;,array.Aggregate(new object[0].AsEnumerable(),(a, b) =&gt; a.Concat(b is object[] ? (object[]) b : new[] {b})));\n\nin VS2019 perview, C# Console Project and target C# 7.3,this code can not compile.but it can compile in VS 2017 15.9.3.\n\n_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/407690/c80-feature-block-the-past-code.html\nVSTS ticketId: 750482_\n_These are the original issue comments:_\n(no comments)\n_These are the original issue solutions:_\n(no solutions)","Url":"https://github.com/dotnet/roslyn/issues/32362","RelatedDescription":"Open issue \"C#8.0 feature block the past code\" (#32362)"},{"Id":"398060477","IsPullRequest":false,"CreatedAt":"2019-01-10T23:23:33","Actor":"vsfeedback","Number":"32361","RawContent":null,"Title":"CS4009 should not be suppressed in the Error List window when set to \"Build + Intellisense\" VS2019","State":"open","Body":"<p>Create a new console application containing this code. I reproduced this in both a .NET Core 3.0 and .NET Framework 4.7.2 project.<br><br>class Program<br>{<br>    static async void Main(string[] args) { }<br>}<br><br>Open the Error List window, and set it to &quot;Entire Solution&quot;, no filter, and &quot;Build Only&quot;. Build the solution.<br><br>Observed and expected behavior: Error CS5001, error CS4009, and warning CS1998 appear in the Error List window.<br><br>Set the Error List window to &quot;Build + Intellisense&quot; instead of &quot;Build Only&quot;<br><br>Observed behavior: Error CS4009 is removed from the Error List window.<br><br>Expected behavior: Error CS4009 should not be removed from the Error List window, unless the user changes the code in a way that resolves the error.</p>\n\n_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/414443/cs4009-should-not-be-suppressed-in-the-error-list.html\nVSTS ticketId: 756143_\n_These are the original issue comments:_\n\nDale McCoy on 1/3/2019, 00:08 PM (7 days ago): <p>This looks to me like this is the Visual Studio 2019 version of https://github.com/dotnet/roslyn/issues/17259 and https://github.com/dotnet/roslyn/issues/29698</p>\n\n_These are the original issue solutions:_\n(no solutions)","Url":"https://github.com/dotnet/roslyn/issues/32361","RelatedDescription":"Open issue \"CS4009 should not be suppressed in the Error List window when set to \"Build + Intellisense\" VS2019\" (#32361)"},{"Id":"398060133","IsPullRequest":false,"CreatedAt":"2019-01-10T23:22:16","Actor":"vsfeedback","Number":"32360","RawContent":null,"Title":"Peek Definition in C# ignores Language Version","State":"open","Body":"With right-click, peek definition (Alt+F12), the nullable reference types feature is reported as not being supported?\n\n_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/411186/peek-definition-in-c-ignores-language-version.html\nVSTS ticketId: 753476_\n_These are the original issue comments:_\n\njohnm on 12/18/2018, 02:10 AM (23 days ago): <p>Not sure what happened to my attachments - peeking at code in the same solution, targeting C# 8, displays an error in the peek definition window, stating that nullable reference types are not supported in C# 7.3 (none of the projects in the solution targets this version).</p>\n\n_These are the original issue solutions:_\n(no solutions)","Url":"https://github.com/dotnet/roslyn/issues/32360","RelatedDescription":"Open issue \"Peek Definition in C# ignores Language Version\" (#32360)"},{"Id":"398059870","IsPullRequest":false,"CreatedAt":"2019-01-10T23:21:22","Actor":"vsfeedback","Number":"32359","RawContent":null,"Title":"nullable checking doesn't go far enough to check non-nullable variables being set to null","State":"open","Body":"The following code snippet shows a situation where a non-nullable string gets inadvertently assigned null.\nLimitations like this mean that we can't trust the nullable warnings - which makes the feature less useful as people will then not trust it and will abandon trying to fix their code.\n\nTo reproduce, paste the following code into a C# console project, and set the project to use the C#8 compiler with #nullable enable set.\n\nNote that there's no warning produced, but the string gets set to null.\n\n\t\t\tstring str;\n\t\t\t{\n\t\t\t\tusing ( RegistryKey rk = Registry.CurrentUser.OpenSubKey( &quot;Software&quot; ) )\n\t\t\t\t{\n\t\t\t\t\t// No warning, but the cast from a null object will result in null\n\t\t\t\t\tstr = (string) rk.GetValue( &quot;WontExist&quot; );\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ( str == null )\n\t\t\t{\n\t\t\t\tConsole.WriteLine( &quot;It is null&quot; );\n\t\t\t}\n\n_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/412355/nullable-checking-doesnt-go-far-enough-to-check-no.html\nVSTS ticketId: 754373_\n_These are the original issue comments:_\n(no comments)\n_These are the original issue solutions:_\n(no solutions)","Url":"https://github.com/dotnet/roslyn/issues/32359","RelatedDescription":"Open issue \"nullable checking doesn't go far enough to check non-nullable variables being set to null\" (#32359)"},{"Id":"398059649","IsPullRequest":false,"CreatedAt":"2019-01-10T23:20:37","Actor":"vsfeedback","Number":"32358","RawContent":null,"Title":"C#8 with nullable compiler only checks code in constructors before producing CS8618 warning","State":"open","Body":"The following code snippet initializes both member variables, but, when compiled with C# 8 with nullable enabled, produces the warning:\n\nwarning CS8618: Non-nullable field 'm_str1' is uninitialized.\n\n\t\t// Demonstrates CS8618 doesn't check methods called from the constructor for initialisation\n\t\tclass MyClass\n\t\t{\n\t\t\tprivate string m_str1;\n\t\t\tprivate string m_str2;\n\n\t\t\tpublic MyClass()    // warning CS8618: Non-nullable field 'm_str1' is uninitialized.\n\t\t\t{\n\t\t\t\tInit();\n\t\t\t\tm_str2 = string.Empty;\t// No warning for m_str2\n\t\t\t}\n\n\t\t\tprivate void Init()\n\t\t\t{\n\t\t\t\tm_str1 = string.Empty;\n\t\t\t}\n\t\t}\n\nTo repro, just paste the snippet into a C# console project and set it to build with the V8 compiler with #nullable enable set.\n\n_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/412341/c8-with-nullable-compiler-only-checks-code-in-cons.html\nVSTS ticketId: 754367_\n_These are the original issue comments:_\n(no comments)\n_These are the original issue solutions:_\n(no solutions)","Url":"https://github.com/dotnet/roslyn/issues/32358","RelatedDescription":"Open issue \"C#8 with nullable compiler only checks code in constructors before producing CS8618 warning\" (#32358)"},{"Id":"398059054","IsPullRequest":false,"CreatedAt":"2019-01-10T23:18:35","Actor":"AlekseyTs","Number":"32357","RawContent":null,"Title":"Suspicious logic in ```LocalDataFlowPass<TLocalState>.GetOrCreateSlot``` method","State":"open","Body":"```\r\n        protected int GetOrCreateSlot(Symbol symbol, int containingSlot = 0)\r\n        {\r\n            if (symbol.Kind == SymbolKind.RangeVariable) return -1;\r\n\r\n            containingSlot = DescendThroughTupleRestFields(ref symbol, containingSlot, forceContainingSlotsToExist: true);\r\n\r\n            VariableIdentifier identifier = new VariableIdentifier(symbol, containingSlot);\r\n            int slot;\r\n\r\n            // Since analysis may proceed in multiple passes, it is possible the slot is already assigned.\r\n            if (!_variableSlot.TryGetValue(identifier, out slot))\r\n...\r\n```\r\nIt looks like DescendThroughTupleRestFields can return -1. Does it make sense to continue in this case? It looks like we will go ahead and allocate a new slot for the member even in this case. It also looks like that slot is going to be shared across distinct original containers, effectively treating members of different containers as the same storage location. \r\n","Url":"https://github.com/dotnet/roslyn/issues/32357","RelatedDescription":"Open issue \"Suspicious logic in ```LocalDataFlowPass<TLocalState>.GetOrCreateSlot``` method\" (#32357)"},{"Id":"398058788","IsPullRequest":false,"CreatedAt":"2019-01-10T23:17:43","Actor":"vsfeedback","Number":"32356","RawContent":null,"Title":"c# 8 null checking in lambdas","State":"open","Body":"It seems null-elimination of class members is not working in lambdas\n\nIn the attached code you will see that when the member &quot;Parameters&quot; is used outside the lambda, the compiler understands it cannot be null. When it's captured in the lambda it doesn't. \n\nEither there's something about ref values in closures I'm not getting, or there's no good reason this happens.\n\n_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/414633/c-8-null-checking-in-lambdas.html\nVSTS ticketId: 756306_\n_These are the original issue comments:_\n(no comments)\n_These are the original issue solutions:_\n(no solutions)","Url":"https://github.com/dotnet/roslyn/issues/32356","RelatedDescription":"Open issue \"c# 8 null checking in lambdas\" (#32356)"}],"ResultType":"GitHubIssue"},"CoreRT-Issues":{"Issues":[{"Id":"398049742","IsPullRequest":true,"CreatedAt":"2019-01-10T22:48:18","Actor":"Dotnet-GitSync-Bot","Number":"6806","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"open","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @marek-safar","Url":"https://github.com/dotnet/corert/pull/6806","RelatedDescription":"Open PR \"Mirror changes from dotnet/coreclr\" (#6806)"},{"Id":"397967260","IsPullRequest":true,"CreatedAt":"2019-01-10T20:29:41","Actor":"Dotnet-GitSync-Bot","Number":"6805","RawContent":null,"Title":"Mirror changes from dotnet/coreclr,corefx","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr,corefx\n\n\n**Please REBASE this PR when merging**\n\n cc @GrabYourPitchforks @benaadams @marek-safar","Url":"https://github.com/dotnet/corert/pull/6805","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr,corefx\" (#6805)"},{"Id":"397752899","IsPullRequest":true,"CreatedAt":"2019-01-10T19:01:44","Actor":"marek-safar","Number":"6803","RawContent":null,"Title":"Move COMException to shared partition","State":"closed","Body":"and updated the implementation logic to match CoreCLR","Url":"https://github.com/dotnet/corert/pull/6803","RelatedDescription":"Closed or merged PR \"Move COMException to shared partition\" (#6803)"},{"Id":"397475559","IsPullRequest":true,"CreatedAt":"2019-01-10T18:50:56","Actor":"Dotnet-GitSync-Bot","Number":"6796","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @jkotas @marek-safar @jkotas","Url":"https://github.com/dotnet/corert/pull/6796","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#6796)"},{"Id":"397694107","IsPullRequest":true,"CreatedAt":"2019-01-10T12:23:16","Actor":"jkotas","Number":"6801","RawContent":null,"Title":"Merge nmirror to master","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/6801","RelatedDescription":"Closed or merged PR \"Merge nmirror to master\" (#6801)"},{"Id":"397729848","IsPullRequest":true,"CreatedAt":"2019-01-10T12:22:35","Actor":"MichalStrehovsky","Number":"6802","RawContent":null,"Title":"Fix ProjectN build break","State":"closed","Body":"Using statement got deleted, but it's used in the WinRT code paths.","Url":"https://github.com/dotnet/corert/pull/6802","RelatedDescription":"Closed or merged PR \"Fix ProjectN build break\" (#6802)"},{"Id":"397780728","IsPullRequest":false,"CreatedAt":"2019-01-10T11:09:35","Actor":"tonerdo","Number":"6804","RawContent":null,"Title":"String.StartsWith causes StackOverflow exception when using Experimental TypeLoader","State":"open","Body":"This can be reproduced with a simple console app\r\n\r\n```csharp\r\nusing System;\r\n\r\nclass Program\r\n{\r\n    public static void Main(string[] args)\r\n    {\r\n        bool startsWith = \"\".StartsWith(\"a\");\r\n    }\r\n}\r\n```\r\n\r\nThis only happens for Experimental builds\r\n\r\n@jkotas @MichalStrehovsky mentioning you because `Assembly.Load` uses it and it's preventing me from testing out the interpreter","Url":"https://github.com/dotnet/corert/issues/6804","RelatedDescription":"Open issue \"String.StartsWith causes StackOverflow exception when using Experimental TypeLoader\" (#6804)"},{"Id":"397602731","IsPullRequest":true,"CreatedAt":"2019-01-10T06:47:51","Actor":"dotnet-bot","Number":"6799","RawContent":null,"Title":"Merge changes from TFS","State":"closed","Body":"When merging, this PR, please ensure a merge commit is created as automation requires the merge commit.  Do not 'Squash and merge' or 'Rebase and merge'!","Url":"https://github.com/dotnet/corert/pull/6799","RelatedDescription":"Closed or merged PR \"Merge changes from TFS\" (#6799)"},{"Id":"397661972","IsPullRequest":true,"CreatedAt":"2019-01-10T03:54:04","Actor":"yowl","Number":"6800","RawContent":null,"Title":"WIP: WASM: Enable reflection for types","State":"open","Body":"Fixes #5842 \r\nThanks for all the help on this.\r\nI'm leaving this WIP as it contains 2 changes from @morganbr in `ILToWebAssemblyImporter.cs`: the funclets for try/catch/finally which is needed here; and some alignment fixes which is not strictly necessary for the WASM=1 output, but it was earlier in the branch and was useful for debugging.  Ideally these changes would be merged separately but this work is getting old and I wanted to push it along as the merge to `master` was hard enough now.  And with respect to the merge, the work here might be useful for Morgan as due to the overlapping time of the `ThrowIfNull` changes and these the merge is not straightforward.   Also maybe the other parts of this could be reviewed?","Url":"https://github.com/dotnet/corert/pull/6800","RelatedDescription":"Open PR \"WIP: WASM: Enable reflection for types\" (#6800)"},{"Id":"397600408","IsPullRequest":true,"CreatedAt":"2019-01-09T23:06:55","Actor":"trylek","Number":"6798","RawContent":null,"Title":"Generic lookup fixes","State":"open","Body":"1) Add new form of generic lookup for generic non-GC static base.\r\n\r\n2) Stop back-translating canonical fields to their runtime\r\ndetermined counterparts for the purpose of emitting R2R signatures.\r\n\r\nThese changes fix three Pri# 0 CoreCLR tests.\r\n\r\nThanks\r\n\r\nTomas","Url":"https://github.com/dotnet/corert/pull/6798","RelatedDescription":"Open PR \"Generic lookup fixes\" (#6798)"},{"Id":"397152681","IsPullRequest":true,"CreatedAt":"2019-01-09T22:25:51","Actor":"trylek","Number":"6791","RawContent":null,"Title":"Fix generic lookup cells to be per method context","State":"closed","Body":"1) Clean up generic lookup tests so that the TH->RTTH helper is\r\nonly called from a single method (GetTypeName). This is no longer\r\nstrictly necessary as Crossgen started to support the helper\r\nbut I believe it to be good for general hygiene.\r\n\r\n2) Minor improvements in the R2R test harness to display ordered\r\nsets of whitelisted vs. non-whitelisted jitted methods.\r\n\r\n3) It seems to me that GenericLookupSignature should always pass\r\naround the instantiating stub flag as the exact purpose of the\r\nsignature is to cater for shared methods with the extra\r\ninstantiation argument.\r\n\r\n4) Based on JanK's clarification I have fixed the CPAOT compiler\r\nto emit separate generic lookup cells for each context method.\r\n\r\nThanks\r\n\r\nTomas","Url":"https://github.com/dotnet/corert/pull/6791","RelatedDescription":"Closed or merged PR \"Fix generic lookup cells to be per method context\" (#6791)"},{"Id":"397575422","IsPullRequest":true,"CreatedAt":"2019-01-09T21:45:59","Actor":"nattress","Number":"6797","RawContent":null,"Title":"Update RyuJIT","State":"open","Body":"Breaking JIT interface change requires updating CoreRT's RyuJit version so we can create local debug JITs to debug CPAOT.","Url":"https://github.com/dotnet/corert/pull/6797","RelatedDescription":"Open PR \"Update RyuJIT\" (#6797)"},{"Id":"397245960","IsPullRequest":false,"CreatedAt":"2019-01-09T16:37:51","Actor":"xoofx","Number":"6794","RawContent":null,"Title":"Failure with ReadyToRun without asking for ReadyToRun","State":"closed","Body":"Hey,\r\n\r\nI'm trying to use the latest clrjit(ilc) by compiling from CoreCLR master but I'm getting a weird behavior where the `CorInfoImpl.GetHelperFtnUncached` is being called with arguments that are not handled (like `CORINFO_HELP_THROW_TYPE_NOT_SUPPORTED`, `CORINFO_HELP_POLL_GC`...etc.) and If I add fake handling here, it will fail later on `getReadyToRunHelper` not handling `CORINFO_HELP_TYPEHANDLE_TO_RUNTIMETYPEHANDLE_MAYBENULL` while I'm not using ilc with the readytorun option.\r\n\r\nThe code that I'm trying to compile is quite simple though:\r\n\r\n```c#\r\n    class Program\r\n    {\r\n        static int Main()\r\n        {\r\n            var array = new int[] {1, 2, 3, 4};\r\n\r\n            var result = 0;\r\n            for (int i = 0; i < array.Length; i++)\r\n            {\r\n                result = array[i];\r\n            }\r\n\r\n            return result;\r\n        }\r\n    }\r\n```\r\n\r\nAm I doing something wrong? Or something changed in CoreCLR that should be passed to RyuJit or?","Url":"https://github.com/dotnet/corert/issues/6794","RelatedDescription":"Closed issue \"Failure with ReadyToRun without asking for ReadyToRun\" (#6794)"},{"Id":"397315768","IsPullRequest":true,"CreatedAt":"2019-01-09T12:19:04","Actor":"Dotnet-GitSync-Bot","Number":"6795","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @wfurt","Url":"https://github.com/dotnet/corert/pull/6795","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#6795)"},{"Id":"397219613","IsPullRequest":false,"CreatedAt":"2019-01-09T07:18:01","Actor":"rocket0634","Number":"6793","RawContent":null,"Title":"RuntimeIdentifier Platform 'win-x64' and the PlatformTarget 'x86' must be compatible","State":"closed","Body":"I was attempting to build a console application in DotNet Native, to try and minimize the amount of files I would need to distribute when publishing my .NET Core app. Before trying to migrate my entire app, I tried to just compile a simple Hello World app, and found instructions in this github for generating one. Unfortunately, any time I try to run this command:\r\ndotnet publish -r win-x64 -c release\r\nI get the error shown in the title. [error NETSDK1032: The RuntimeIdentifier Platform 'win-x64' and the PlatformTarget 'x86' must be compatible]\r\nI've followed every step in the Hello World tutorial exactly, which doesn't really say more than to grab a couple of nuget files and publish. If someone could direct me to additional things I need to do to make it work, please let me know. [In the long run, I want to publish the app for Windows, Mac, and Linux, in either 32/64 bit, and if corert can't manage one of them, then I can use normal Net Core to publish them. For now, I'm just trying to get win64 to work.]\r\n\r\nAlso, in previous attempts, I ran into this issue: \"The PrivateSdkAssemblies ItemGroup is required for _ComputeAssembliesToCompileToNative\".","Url":"https://github.com/dotnet/corert/issues/6793","RelatedDescription":"Closed issue \"RuntimeIdentifier Platform 'win-x64' and the PlatformTarget 'x86' must be compatible\" (#6793)"},{"Id":"397162184","IsPullRequest":true,"CreatedAt":"2019-01-09T02:00:56","Actor":"Dotnet-GitSync-Bot","Number":"6792","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub","Url":"https://github.com/dotnet/corert/pull/6792","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#6792)"},{"Id":"397144944","IsPullRequest":true,"CreatedAt":"2019-01-09T01:28:07","Actor":"trylek","Number":"6790","RawContent":null,"Title":"Fix getFuntionEntryPoint and canTailCall according to Crossgen","State":"closed","Body":"This change fixes the two JIT interface methods according to their\r\nCrossgen implementation.\r\n\r\nThanks\r\n\r\nTomas","Url":"https://github.com/dotnet/corert/pull/6790","RelatedDescription":"Closed or merged PR \"Fix getFuntionEntryPoint and canTailCall according to Crossgen\" (#6790)"},{"Id":"396689793","IsPullRequest":true,"CreatedAt":"2019-01-09T01:27:27","Actor":"marek-safar","Number":"6782","RawContent":null,"Title":"Moves common COM type to shared corelib partition","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/6782","RelatedDescription":"Closed or merged PR \"Moves common COM type to shared corelib partition\" (#6782)"},{"Id":"397140992","IsPullRequest":true,"CreatedAt":"2019-01-09T00:41:31","Actor":"trylek","Number":"6789","RawContent":null,"Title":"Mark monitor helpers as requiring runtime JIT","State":"closed","Body":"In accordance with Crossgen behavior I am blocking out the\r\nMonitor-related R2R helpers as requiring runtime JIT.\r\n\r\nThanks\r\n\r\nTomas","Url":"https://github.com/dotnet/corert/pull/6789","RelatedDescription":"Closed or merged PR \"Mark monitor helpers as requiring runtime JIT\" (#6789)"},{"Id":"397121586","IsPullRequest":true,"CreatedAt":"2019-01-08T22:23:33","Actor":"trylek","Number":"6788","RawContent":null,"Title":"CPAOT support for RVA-backed static fields","State":"open","Body":"This change adds support for the helper\r\nCORINFO_HELP_TYPEHANDLE_TO_RUNTIMETYPEHANDLE and fixes RVA field\r\nmanagement. In contrast to Crossgen which selectively copies over\r\nparts of the MSIL file (including the RVA field data), we simply\r\npoint the RVA field address to the pre-existing data block in the\r\nMSIL file embedded in the R2R image.\r\n\r\nTo achieve this goal I had to slightly generalize the section\r\nbuilder by adding new support for \"section start nodes\" - symbol\r\nnodes representing the beginning of each PE section. In case of\r\nsections copied from the original MSIL executable, the section\r\nstart nodes point at the \"original\" MSIL section content.\r\n\r\nUsing this construct I was able to introduce a new node RVAFieldNode\r\nwhich represents a given RVA field as an offset relative to one\r\nof the section start symbols. Upon codegen, the RVAFieldNode\r\nemits a relocatable pointer-sized record in the R/W data section\r\nwhich points at the beginning of the RVA field data in the MSIL.\r\n\r\nI have also ported JanK's RVA unit test to our base CPAOT test suite.\r\n\r\nThanks\r\n\r\nTomas","Url":"https://github.com/dotnet/corert/pull/6788","RelatedDescription":"Open PR \"CPAOT support for RVA-backed static fields\" (#6788)"},{"Id":"396900376","IsPullRequest":true,"CreatedAt":"2019-01-08T16:36:49","Actor":"trylek","Number":"6786","RawContent":null,"Title":"Fix data blob offset for dynamic statics","State":"closed","Body":"In my initial implementation of dynamic statics, I misread the code\r\nin DomainLocalModule::NormalDynamicEntry as I incorrectly thought\r\nthat FEATURE_64BIT_ALIGNMENT would be set for AMD64. This is wrong,\r\nthe flag is only used on ARM32 where it makes sure that the data\r\nblob starts at an 8-byte boundary. This also implies that the constants\r\nmust be per architecture, not per pointer size. This change seems to be\r\nfixing almost a hundred CoreCLR Pri#0 test failures.\r\n\r\nThanks\r\n\r\nTomas","Url":"https://github.com/dotnet/corert/pull/6786","RelatedDescription":"Closed or merged PR \"Fix data blob offset for dynamic statics\" (#6786)"},{"Id":"396905432","IsPullRequest":false,"CreatedAt":"2019-01-08T13:24:43","Actor":"RustyCZ","Number":"6787","RawContent":null,"Title":"Access violation in GC thread","State":"open","Body":"I have tried Microsoft.DotNet.ILCompiler in version 1.0.0-alpha-27221-02 and I have encountered an error Access violation reading location 0x0000000000000000 in garbage collector thread. I am using Span of structures which have explicit layout and size if it may be of any help. It was compiled for win-x64 netcoreapp2.1.\r\n\r\nException thrown at 0x00007FF7325F5870 in Test.exe: 0xC0000005: Access violation reading location 0x0000000000000000.\r\n\r\n[Inline Frame] Test.exe!WKS::my_get_size\r\n[Inline Frame] Test.exe!WKS::my_get_size(Object *) Line 8905\r\nTest.exe!WKS::gc_heap::mark_object_simple1(unsigned char * oo, unsigned char * start) Line 17649\r\nTest.exe!WKS::gc_heap::mark_object_simple(unsigned char * * po) Line 18182\r\nTest.exe!WKS::GCHeap::Promote(Object * * ppObject, ScanContext * sc, unsigned int flags) Line 33839\r\nTest.exe!ScanConsecutiveHandlesWithoutUserData(Object * * pValue, Object * * pLast, ScanCallbackInfo * pInfo, unsigned __int64 * __formal) Line 452\r\n[Inline Frame] Test.exe!BlockScanBlocksEphemeralWorker(unsigned int * dwClumpMask, unsigned int) Line 685\r\nTest.exe!BlockScanBlocksEphemeral(TableSegment * pSegment, unsigned int uBlock, unsigned int uCount, ScanCallbackInfo * pInfo) Line 742\r\n[Inline Frame] Test.exe!SegmentScanByTypeMap(TableSegment *) Line 1698\r\nTest.exe!TableScanHandles(HandleTable * pTable, const unsigned int * puType, unsigned int uTypeCount, TableSegment *(*)(HandleTable *, TableSegment *, CrstHolderWithState *) pfnSegmentIterator, void(*)(TableSegment *, unsigned int, unsigned int, ScanCallbackInfo *) pfnBlockHandler, ScanCallbackInfo * pInfo, CrstHolderWithState * pCrstHolder) Line 1756\r\nTest.exe!HndScanHandlesForGC(HandleTable * hTable, void(*)(Object * *, unsigned __int64 *, unsigned __int64, unsigned __int64) scanProc, unsigned __int64 param1, unsigned __int64 param2, const unsigned int * types, unsigned int typeCount, unsigned int condemned, unsigned int maxgen, unsigned int flags) Line 1044\r\nTest.exe!Ref_TraceNormalRoots(unsigned int condemned, unsigned int maxgen, ScanContext * sc, void(*)(Object * *, ScanContext *, unsigned int) fn) Line 1144\r\nTest.exe!GCScan::GcScanHandles(void(*)(Object * *, ScanContext *, unsigned int) fn, int condemned, int max_gen, ScanContext * sc) Line 187\r\nTest.exe!WKS::gc_heap::mark_phase(int condemned_gen_number, unsigned int mark_only_p) Line 19638\r\nTest.exe!WKS::gc_heap::gc1() Line 15272\r\nTest.exe!WKS::gc_heap::garbage_collect(int n) Line 16864\r\nTest.exe!WKS::GCHeap::GarbageCollectGeneration(unsigned int gen, gc_reason reason) Line 35231\r\nTest.exe!WKS::gc_heap::try_allocate_more_space(alloc_context * acontext, unsigned __int64 size, int gen_number) Line 13083\r\n[Inline Frame] Test.exe!WKS::gc_heap::allocate_more_space(alloc_context *) Line 13370\r\n[Inline Frame] Test.exe!WKS::gc_heap::allocate(unsigned __int64) Line 13401\r\nTest.exe!WKS::GCHeap::Alloc(gc_alloc_context * context, unsigned __int64 size, unsigned int flags) Line 34542\r\nTest.exe!RhpNewObject() Line 76\r\n[External Code]\r\n","Url":"https://github.com/dotnet/corert/issues/6787","RelatedDescription":"Open issue \"Access violation in GC thread\" (#6787)"},{"Id":"396767508","IsPullRequest":true,"CreatedAt":"2019-01-08T12:30:49","Actor":"Dotnet-GitSync-Bot","Number":"6785","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @danmosemsft","Url":"https://github.com/dotnet/corert/pull/6785","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#6785)"},{"Id":"396739613","IsPullRequest":false,"CreatedAt":"2019-01-08T03:46:39","Actor":"frankzye","Number":"6784","RawContent":null,"Title":"using npgsql but throw Object reference not set to an instance of an object exception","State":"open","Body":"System.NullReferenceException: Object reference not set to an instance of an object . \r\nat Npgsql.Logging.NpgsqlLogManager.GetClassFullName() + 0x64 .    \r\nat Npgsql.NpgsqlConnection..cctor() + 0x53 . \r\n\r\nand I found the following source code:  \r\n`\r\nMethodBase method = frame.GetMethod();  \r\n                declaringType = method.DeclaringType;  \r\n                if (declaringType == null) { . \r\n                    className = method.Name;  \r\n                    break;  \r\n}\r\n`\r\nhow to handle this exception , and when the third class lib using reflection, are there any work around ways?\r\n","Url":"https://github.com/dotnet/corert/issues/6784","RelatedDescription":"Open issue \"using npgsql but throw Object reference not set to an instance of an object exception\" (#6784)"},{"Id":"396710200","IsPullRequest":true,"CreatedAt":"2019-01-08T03:10:45","Actor":"Dotnet-GitSync-Bot","Number":"6783","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @marek-safar","Url":"https://github.com/dotnet/corert/pull/6783","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#6783)"},{"Id":"396548672","IsPullRequest":true,"CreatedAt":"2019-01-07T20:09:27","Actor":"Dotnet-GitSync-Bot","Number":"6781","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @marek-safar","Url":"https://github.com/dotnet/corert/pull/6781","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#6781)"},{"Id":"396456488","IsPullRequest":false,"CreatedAt":"2019-01-07T11:47:26","Actor":"adamsitnik","Number":"6780","RawContent":null,"Title":"Potential deadlock?","State":"open","Body":"@jkotas I tried to run all the benchmarks from `dotnet/performance` repository for CoreRT (https://github.com/dotnet/performance/pull/218)\r\n\r\nI started all the benchmarks before going to sleep and expected that in the morning I am going to have all the results ready waiting for me. However, the run got deadlocked after 1h and I don't have full results yet.\r\n\r\nBenchmark which got deadlocked comes from [CoreFX](https://github.com/dotnet/corefx/blob/4378851bc5fd0e3c5043a6d0a3ac835e838fcf7d/src/System.Collections.Concurrent/tests/Performance/Perf.ConcurrentStack.cs#L146) and I ported in the following [way](https://github.com/dotnet/performance/blob/3941f11e000edd7a404599fc2e401129c25bc4ad/src/benchmarks/micro/corefx/System.Collections/Concurrent/AddRemoveFromDifferentThreads.cs#L71-L107) to the performance repo.\r\n\r\n@stephentoub could you please take a look at my port? I double checked it and it looks good to me.\r\n\r\nI was able to create a small repro without BenchmarkDotNet dependency and reproduce the deadlock on my Ubuntu machine:\r\n\r\n```cs\r\nusing System;\r\nusing System.Diagnostics;\r\nusing System.Linq;\r\nusing System.Threading;\r\nusing System.Threading.Tasks;\r\nusing System.Runtime.CompilerServices;\r\nusing System.Collections.Concurrent;\r\n\r\nnamespace BenchmarkDotNet.Autogenerated\r\n{\r\n    public class UniqueProgramName\r\n    {\r\n        public static void Main(string[] args)\r\n        {\r\n            var sut = new AddRemoveFromDifferentThreads<int>();\r\n\r\n            for(int i = 0; i < 100; i++)\r\n            {\r\n                Console.WriteLine($\"ConcurrentStack {i}\");\r\n\r\n                sut.SetupConcurrentStackIteration();\r\n                sut.ConcurrentStack();\r\n                sut.IterationCleanup();\r\n            }\r\n\r\n            Console.WriteLine(\"OK\");\r\n        }\r\n    }\r\n\r\n    public class AddRemoveFromDifferentThreads<T>\r\n    {\r\n        const int NumThreads = 2;\r\n\r\n        public int Size = 2_000_000;\r\n\r\n        private Barrier _barrier;\r\n        private Task _producer, _consumer;\r\n\r\n        public void SetupConcurrentStackIteration()\r\n        {\r\n            var stack = new ConcurrentStack<T>();\r\n\r\n            _barrier = new Barrier(NumThreads + 1);\r\n            \r\n            _producer = Task.Factory.StartNew(() =>\r\n            {\r\n                _barrier.SignalAndWait();\r\n                _barrier.SignalAndWait();\r\n\r\n                for (int i = 0; i < Size; i++)\r\n                {\r\n                    stack.Push(default);\r\n                }\r\n            }, CancellationToken.None, TaskCreationOptions.LongRunning, TaskScheduler.Default);\r\n\r\n            _consumer = Task.Factory.StartNew(() =>\r\n            {\r\n                _barrier.SignalAndWait();\r\n                _barrier.SignalAndWait();\r\n\r\n                int count = 0;\r\n                while (count < Size)\r\n                {\r\n                    if (stack.TryPop(out T _))\r\n                    {\r\n                        count++;\r\n                    }\r\n                }\r\n            }, CancellationToken.None, TaskCreationOptions.LongRunning, TaskScheduler.Default);\r\n            \r\n            _barrier.SignalAndWait();\r\n        }\r\n\r\n        public void ConcurrentStack() => SignalAndWaitForAllTasks();\r\n\r\n        private void SignalAndWaitForAllTasks()\r\n        {\r\n            _barrier.SignalAndWait();\r\n\r\n            Task.WaitAll(_producer, _consumer);\r\n        }\r\n\r\n\tpublic void IterationCleanup() => _barrier.Dispose();\r\n    }\r\n}\r\n```\r\n\r\nThe code does not always get deadlocked, sometimes I need to re-run the app 3 times.\r\n\r\nProject file:\r\n\r\n```xml\r\n<Project ToolsVersion=\"15.0\">\r\n  <PropertyGroup>\r\n    <ImportDirectoryBuildProps>false</ImportDirectoryBuildProps>\r\n    <ImportDirectoryBuildTargets>false</ImportDirectoryBuildTargets>\r\n  </PropertyGroup>\r\n\r\n  <Import Project=\"Sdk.props\" Sdk=\"Microsoft.NET.Sdk\" />\r\n\r\n  <PropertyGroup>\r\n    <OutputType>Exe</OutputType>\r\n    <TargetFramework>netcoreapp3.0</TargetFramework>\r\n    <LangVersion>7.2</LangVersion>\r\n    <RuntimeIdentifier>linux-x64</RuntimeIdentifier>\r\n    <AllowUnsafeBlocks>true</AllowUnsafeBlocks>\r\n    <TreatWarningsAsErrors>False</TreatWarningsAsErrors>\r\n    <DebugType>pdbonly</DebugType>\r\n    <DebugSymbols>true</DebugSymbols>\r\n    <UseSharedCompilation>false</UseSharedCompilation>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.DotNet.ILCompiler\" Version=\"1.0.0-alpha-*\" />\r\n  </ItemGroup>\r\n  <Import Project=\"Sdk.targets\" Sdk=\"Microsoft.NET.Sdk\" />\r\n</Project>\r\n```\r\nNuGet.config\r\n\r\n```xml\r\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<configuration>\r\n  <packageSources>\r\n    \r\n    <add key=\"coreRtNuGetFeed\" value=\"https://dotnet.myget.org/F/dotnet-core/api/v3/index.json\" />\r\n  </packageSources>\r\n</configuration>\r\n```\r\n\r\nbuild.sh\r\n\r\n```sh\r\n/home/adam/projects/performace_corert/tools/dotnet/x64/dotnet restore --packages \"/home/adam/projects/performace_corert/artifacts/packages\"  /p:UseSharedCompilation=false -r linux-x64\r\n/home/adam/projects/performace_corert/tools/dotnet/x64/dotnet build -c Release  /p:UseSharedCompilation=false -r linux-x64\r\n/home/adam/projects/performace_corert/tools/dotnet/x64/dotnet publish -c Release  /p:UseSharedCompilation=false -r linux-x64\r\n```\r\n\r\nI can't reproduce it for .NET Core 3.0 or any previous .NET Core.\r\n\r\n```log\r\nadam@adsitnik-ubuntu:~/projects/performace_corert$ hostnamectl\r\n   Static hostname: adsitnik-ubuntu\r\n         Icon name: computer-desktop\r\n           Chassis: desktop\r\n        Machine ID: 21e2aa4fa8ba420ca524966404ceec9d\r\n           Boot ID: 518e9cf7cbe34d948a2f9710b1d0f1b9\r\n  Operating System: Ubuntu 18.04.1 LTS\r\n            Kernel: Linux 4.15.0-42-generic\r\n      Architecture: x86-64\r\nadam@adsitnik-ubuntu:~/projects/performace_corert$ /home/adam/projects/performace_corert/tools/dotnet/x64/dotnet --info\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview-010006\r\n Commit:    166534d9bf\r\n\r\nRuntime Environment:\r\n OS Name:     ubuntu\r\n OS Version:  18.04\r\n OS Platform: Linux\r\n RID:         ubuntu.18.04-x64\r\n Base Path:   /home/adam/projects/performace_corert/tools/dotnet/x64/sdk/3.0.100-preview-010006/\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview-27218-01\r\n  Commit:  d40b87f29d\r\n\r\n.NET Core SDKs installed:\r\n  3.0.100-preview-010006 [/home/adam/projects/performace_corert/tools/dotnet/x64/sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.App 3.0.0-preview-18630-0234 [/home/adam/projects/performace_corert/tools/dotnet/x64/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview-27218-01 [/home/adam/projects/performace_corert/tools/dotnet/x64/shared/Microsoft.NETCore.App]\r\n```\r\n\r\nmicrosoft.dotnet.ilcompiler got resolved to 1.0.0-alpha-27305-01\r\n\r\n@jkotas should I disable this benchmark and try to get the results for other benchmarks?","Url":"https://github.com/dotnet/corert/issues/6780","RelatedDescription":"Open issue \"Potential deadlock?\" (#6780)"},{"Id":"396274433","IsPullRequest":true,"CreatedAt":"2019-01-07T03:16:09","Actor":"Dotnet-GitSync-Bot","Number":"6778","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @jkotas","Url":"https://github.com/dotnet/corert/pull/6778","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#6778)"},{"Id":"396301624","IsPullRequest":true,"CreatedAt":"2019-01-07T03:14:43","Actor":"trylek","Number":"6779","RawContent":null,"Title":"Fix enumeration value of R2R helpers [Dbl|Flt][Rem|Round]","State":"closed","Body":"In accordance with my CoreCLR change \r\n\r\nhttps://github.com/dotnet/coreclr/pull/21836\r\n\r\nI'm fixing the incorrect enumeration values we inherited\r\nfrom an old typo in CoreCLR. This change seems to fix\r\nabout a dozen CoreCLR Pri#0 tests.\r\n\r\nThanks\r\n\r\nTomas","Url":"https://github.com/dotnet/corert/pull/6779","RelatedDescription":"Closed or merged PR \"Fix enumeration value of R2R helpers [Dbl|Flt][Rem|Round]\" (#6779)"},{"Id":"396230243","IsPullRequest":true,"CreatedAt":"2019-01-06T06:38:14","Actor":"Dotnet-GitSync-Bot","Number":"6777","RawContent":null,"Title":"Mirror changes from dotnet/corefx,coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/corefx,coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @benaadams","Url":"https://github.com/dotnet/corert/pull/6777","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corefx,coreclr\" (#6777)"}],"ResultType":"GitHubIssue"},"SDK-Issues":{"Issues":[{"Id":"398016176","IsPullRequest":true,"CreatedAt":"2019-01-10T21:10:39","Actor":"dotnet-bot","Number":"2810","RawContent":null,"Title":"Merge release/2.2.2xx to master","State":"open","Body":"\nThis is an automatically generated pull request from release/2.2.2xx into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.2.2xx-to-master\ngit reset --hard upstream/master\ngit merge upstream/release/2.2.2xx\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.2.2xx-to-master --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/2810","RelatedDescription":"Open PR \"Merge release/2.2.2xx to master\" (#2810)"},{"Id":"397961784","IsPullRequest":false,"CreatedAt":"2019-01-10T18:38:50","Actor":"greyb","Number":"2809","RawContent":null,"Title":"Add ReferencePath to Microsoft.NET.Sdk.props AssemblySearchPaths","State":"open","Body":"AssemblySearchPaths has no ReferencePath, why?","Url":"https://github.com/dotnet/sdk/issues/2809","RelatedDescription":"Open issue \"Add ReferencePath to Microsoft.NET.Sdk.props AssemblySearchPaths\" (#2809)"},{"Id":"397403353","IsPullRequest":false,"CreatedAt":"2019-01-10T18:37:36","Actor":"Xarkam","Number":"2804","RawContent":null,"Title":"Remove old sdk can't remove all old runtime","State":"closed","Body":"Hello,\r\n\r\nToday, I removed old sdk from my machine.\r\nBut, I have two old runtime not removed:\r\n![image](https://user-images.githubusercontent.com/331816/50906063-93a5b700-1424-11e9-88e6-5e40f2bf028e.png)\r\n![image](https://user-images.githubusercontent.com/331816/50906249-fa2ad500-1424-11e9-976f-a190e4af12a4.png)\r\n![image](https://user-images.githubusercontent.com/331816/50906311-1c245780-1425-11e9-964d-7b4c466a66e7.png)\r\nIs there a reason for these two versions to still be present?\r\nWhy folders 2.1.0 and 2.1.2 in `C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App` are not empty and is not listed as installed ?\r\n\r\nHow to delete them?\r\n\r\nMy sdk :\r\n![image](https://user-images.githubusercontent.com/331816/50906146-c485ec00-1424-11e9-9e06-87cf022b91cf.png)\r\n\r\nI do not have a runtime installed outside of those installed by the sdk.\r\n\r\nThanks","Url":"https://github.com/dotnet/sdk/issues/2804","RelatedDescription":"Closed issue \"Remove old sdk can't remove all old runtime\" (#2804)"},{"Id":"397821299","IsPullRequest":true,"CreatedAt":"2019-01-10T18:25:05","Actor":"dotnet-maestro[bot]","Number":"2807","RawContent":null,"Title":"Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19058.5\r\n- Microsoft.DotNet.SignTool - 1.0.0-beta.19058.5\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/2807","RelatedDescription":"Closed or merged PR \"Update dependencies from dotnet/arcade\" (#2807)"},{"Id":"397029560","IsPullRequest":true,"CreatedAt":"2019-01-10T18:24:32","Actor":"nugetlurker","Number":"2798","RawContent":null,"Title":"Insert NuGet Build 5.0.0-preview1.5754 into sdk","State":"closed","Body":"Insert NuGet Build 5.0.0-preview1.5754 into sdk release/2.2.2xx branch","Url":"https://github.com/dotnet/sdk/pull/2798","RelatedDescription":"Closed or merged PR \"Insert NuGet Build 5.0.0-preview1.5754 into sdk\" (#2798)"},{"Id":"397949083","IsPullRequest":false,"CreatedAt":"2019-01-10T18:02:39","Actor":"jeffhube","Number":"2808","RawContent":null,"Title":"Intermittent build failures with no error messages","State":"open","Body":"I'm encountering intermittent build failures when using `dotnet run` where there is no output describing what failed. The failure can occur immediately after a previous `dotnet run` succeeded for the same project, with no changes made to the project files.\r\n\r\nAny suggestions on how I can troubleshoot this?\r\n\r\n```\r\n$ dotnet run --project foo -- fooargs\r\n\r\nThe build failed. Please fix the build errors and run again.\r\n```\r\n\r\n```\r\n$ dotnet --info\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.102\r\n Commit:    96ff75a873\r\n\r\nRuntime Environment:\r\n OS Name:     ubuntu\r\n OS Version:  16.04\r\n OS Platform: Linux\r\n RID:         ubuntu.16.04-x64\r\n Base Path:   /usr/share/dotnet/sdk/2.2.102/\r\n\r\nHost (useful for support):\r\n  Version: 2.2.1\r\n  Commit:  878dd11e62\r\n\r\n.NET Core SDKs installed:\r\n  2.1.503 [/usr/share/dotnet/sdk]\r\n  2.2.102 [/usr/share/dotnet/sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.7 [/usr/share/dotnet/shared/Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.1 [/usr/share/dotnet/shared/Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.7 [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.1 [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.7 [/usr/share/dotnet/shared/Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.1 [/usr/share/dotnet/shared/Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\n**Additional background**\r\n\r\nI have a Jenkins job that clones a git repository containing a .NET Core project and executes a script that calls `dotnet run` 5 times for that project with different arguments\r\n\r\n```\r\ndotnet run --project foo -- fooargs1\r\ndotnet run --project foo -- fooargs2\r\ndotnet run --project foo -- fooargs3\r\ndotnet run --project foo -- fooargs4\r\ndotnet run --project foo -- fooargs5\r\n```\r\n\r\nWhen I ran this job ~60 times, it failed 3 times with the error mentioned above. None of those failures were on the first invocation of `dotnet run`..","Url":"https://github.com/dotnet/sdk/issues/2808","RelatedDescription":"Open issue \"Intermittent build failures with no error messages\" (#2808)"},{"Id":"397745003","IsPullRequest":true,"CreatedAt":"2019-01-10T13:05:04","Actor":"v-zbsail","Number":"2806","RawContent":null,"Title":"LOC CHECKIN | dotnet/sdk master | 20190110","State":"closed","Body":"","Url":"https://github.com/dotnet/sdk/pull/2806","RelatedDescription":"Closed or merged PR \"LOC CHECKIN | dotnet/sdk master | 20190110\" (#2806)"},{"Id":"397640906","IsPullRequest":true,"CreatedAt":"2019-01-10T02:00:40","Actor":"peterhuene","Number":"2805","RawContent":null,"Title":"[WIP] Respect PlatformTarget when setting DefaultAppHostRuntimeIdentifier.","State":"open","Body":"This commit uses `PlatformTarget` to determine the value for\r\n`DefaultAppHostRuntimeIdentifier` on Windows.\r\n\r\nIf `PlatformTarget` is set to `x86`, then a PE32 apphost is used.\r\n\r\nIf `PlatformTarget` is set to `x64`, then a PE32+ apphost is used.\r\n\r\nOtherwise, the apphost for the SDK RID is used.\r\n\r\nFixes #2632.","Url":"https://github.com/dotnet/sdk/pull/2805","RelatedDescription":"Open PR \"[WIP] Respect PlatformTarget when setting DefaultAppHostRuntimeIdentifier.\" (#2805)"},{"Id":"397029578","IsPullRequest":true,"CreatedAt":"2019-01-10T01:48:39","Actor":"nugetlurker","Number":"2799","RawContent":null,"Title":"Insert NuGet Build 5.0.0-preview1.5754 into sdk","State":"closed","Body":"Insert NuGet Build 5.0.0-preview1.5754 into sdk release/2.1.6xx branch","Url":"https://github.com/dotnet/sdk/pull/2799","RelatedDescription":"Closed or merged PR \"Insert NuGet Build 5.0.0-preview1.5754 into sdk\" (#2799)"},{"Id":"397362127","IsPullRequest":true,"CreatedAt":"2019-01-09T17:44:41","Actor":"dotnet-maestro[bot]","Number":"2803","RawContent":null,"Title":"Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19058.2\r\n- Microsoft.DotNet.SignTool - 1.0.0-beta.19058.2\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/2803","RelatedDescription":"Closed or merged PR \"Update dependencies from dotnet/arcade\" (#2803)"},{"Id":"397217147","IsPullRequest":false,"CreatedAt":"2019-01-09T05:26:51","Actor":"dsplaisted","Number":"2802","RawContent":null,"Title":"Set metadata on references coming from shared framework targeting pack to show them in solution explorer tree view","State":"open","Body":"See https://github.com/dotnet/project-system/issues/4444","Url":"https://github.com/dotnet/sdk/issues/2802","RelatedDescription":"Open issue \"Set metadata on references coming from shared framework targeting pack to show them in solution explorer tree view\" (#2802)"},{"Id":"397167762","IsPullRequest":true,"CreatedAt":"2019-01-09T04:22:42","Actor":"nguerrera","Number":"2801","RawContent":null,"Title":"Fix dogfood.sh","State":"closed","Body":"Various infrastructure changes or changes only to dogfood.ps1 have left `source eng\\dogfood.sh` broken...","Url":"https://github.com/dotnet/sdk/pull/2801","RelatedDescription":"Closed or merged PR \"Fix dogfood.sh\" (#2801)"},{"Id":"397081406","IsPullRequest":true,"CreatedAt":"2019-01-09T04:01:06","Actor":"nguerrera","Number":"2800","RawContent":null,"Title":"Separate copying of refs from preservation of compilation info","State":"closed","Body":"PreserveCompilationContext does two things today:\r\n\r\n1. Write compilation info to .deps\r\n2. Copy reference-only assemblies to build/publish refs/ folder\r\n\r\nAdd PreserveCompilationReferences to control (2) independently and default it to PreserveCompilationContext for backwards compatibility.\r\n\r\nFix #2122 \r\n\r\ncc @pranavkm @rynowak @eerhardt ","Url":"https://github.com/dotnet/sdk/pull/2800","RelatedDescription":"Closed or merged PR \"Separate copying of refs from preservation of compilation info\" (#2800)"},{"Id":"396896917","IsPullRequest":true,"CreatedAt":"2019-01-08T17:39:14","Actor":"dotnet-maestro[bot]","Number":"2797","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19057.6\r\n- Microsoft.DotNet.SignTool - 1.0.0-beta.19057.6\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/2797","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#2797)"},{"Id":"396751430","IsPullRequest":true,"CreatedAt":"2019-01-08T05:01:05","Actor":"livarcocc","Number":"2796","RawContent":null,"Title":"Add netstandard2.1 to the list of supported target frameworks.","State":"open","Body":"Fixes internal bug https://devdiv.visualstudio.com/DevDiv/_workitems/edit/761489","Url":"https://github.com/dotnet/sdk/pull/2796","RelatedDescription":"Open PR \"Add netstandard2.1 to the list of supported target frameworks.\" (#2796)"},{"Id":"396741517","IsPullRequest":false,"CreatedAt":"2019-01-08T03:57:42","Actor":"yaakov-h","Number":"2795","RawContent":null,"Title":"Incorrect assembly binding redirects generated in 3.0 preview","State":"open","Body":"See: https://github.com/KirillOsenkov/SourceBrowser/issues/108\r\n\r\nWhen building SourceBrowser with SDK v2.1.502, binding redirects for `Newtonsoft.Json` and `System.Collections.Immutable` are generated for versions `11.0.0.0` and `1.2.3.0` respectively.\r\n\r\nWhen building SourceBrowser with SDK v3.0.100-preview-009812 (as shipped with VS2019 Preview 1), binding redirects for `Newtonsoft.Json` and `System.Collections.Immutable` are generated for versions `9.0.0.0` and `1.2.1.0` respectively.\r\n\r\nThis appears to be a regression in the SDK.","Url":"https://github.com/dotnet/sdk/issues/2795","RelatedDescription":"Open issue \"Incorrect assembly binding redirects generated in 3.0 preview\" (#2795)"},{"Id":"396709121","IsPullRequest":false,"CreatedAt":"2019-01-08T00:57:39","Actor":"xen2","Number":"2794","RawContent":null,"Title":"runtime.json only works if PackageReference is directly referenced by project","State":"open","Body":"I have a a `netcoreapp2.1` app with a `PackageReference` (let's call it MyPackageA) that contains a `runtime.json`.\r\n\r\nIt seems that if I don't include this MyPackageA `PackageReference` explicitly in the final executable project, its `runtime.json` is not properly used to compute the deps.json file (and it can't find/load some of the .dll).\r\n\r\nWhat works:\r\n- Main executable project: `PackageReference` to MyPackageA in main executable project\r\n\r\nWhat doesn't work:\r\n- Main executable project: `PackageReference` that references MyPackageA transitively\r\n- Library1: `PackageReference` to MyPackageA + Main executable: ProjectReference to Library1\r\n\r\nThis problem doesn't happen with net461 (libraries are properly copied by Visual Studio in all situations).","Url":"https://github.com/dotnet/sdk/issues/2794","RelatedDescription":"Open issue \"runtime.json only works if PackageReference is directly referenced by project\" (#2794)"},{"Id":"396634759","IsPullRequest":false,"CreatedAt":"2019-01-07T20:19:51","Actor":"natemcmaster","Number":"2792","RawContent":null,"Title":"RuntimeFrameworkVersion for 3.0 apps","State":"open","Body":"Filing on behalf of @DamianEdwards @davidfowl \r\n\r\nIt appears the RuntimeFrameworkVersion property is no longer honored in netcoreapp3.0 projects. If our recollection is correct, the plan was to use this property so customers could define the versions used by FrameworkReference. \r\n\r\nOpen question: how to handle the difference between shared framework versions. After RTM, we should (in theory) always patch all in-box shared frameworks. But during per-release, however, these versions will rarely align. \r\n","Url":"https://github.com/dotnet/sdk/issues/2792","RelatedDescription":"Open issue \"RuntimeFrameworkVersion for 3.0 apps\" (#2792)"},{"Id":"396163554","IsPullRequest":true,"CreatedAt":"2019-01-07T18:08:25","Actor":"dotnet-maestro[bot]","Number":"2791","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19054.13\r\n- Microsoft.DotNet.SignTool - 1.0.0-beta.19054.13\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19055.1\r\n- Microsoft.DotNet.SignTool - 1.0.0-beta.19055.1\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19055.1\r\n- Microsoft.DotNet.SignTool - 1.0.0-beta.19055.1\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/2791","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#2791)"},{"Id":"395802481","IsPullRequest":true,"CreatedAt":"2019-01-04T23:37:56","Actor":"johnbeisner","Number":"2788","RawContent":null,"Title":"Adding a performance test: Build Web Large 3.0","State":"closed","Body":"Adding a performance test: \"Build Web Large 3.0\" that targets netcoreapp3.0","Url":"https://github.com/dotnet/sdk/pull/2788","RelatedDescription":"Closed or merged PR \"Adding a performance test: Build Web Large 3.0\" (#2788)"},{"Id":"396675588","IsPullRequest":false,"CreatedAt":"2019-01-04T21:36:37","Actor":"Lohnegrim","Number":"2793","RawContent":null,"Title":"Result of chr() cannot be used as initial value of a Const in .Net Core 3 Preview 1","State":"open","Body":"Version: 3.0.100-preview-009812\r\nCommit: e3abf6e935\r\n\r\nRuntime Environment:\r\nOS Name: Windows\r\nOS Version: 10.0.17763\r\nOS Platform: Windows\r\nRID: win10-x64\r\nBase Path: C:\\Program Files\\dotnet\\sdk\\3.0.100-preview-009812\\\r\n\r\nHost (useful for support):\r\nVersion: 3.0.0-preview-27122-01\r\nCommit: 00c5c8bc40\r\n\r\nHave you experienced this same bug with .NET Framework?: No\r\n\r\nIn the .Net Framework using VB.Net you can compile this Line:\r\n\r\n``` vb\r\nPrivate Const TabChar As Char = Chr(9)\r\n``` \r\n\r\nIn .Net Core 3 Preview 1 it failes with:\r\nerror BC30059: Constant expression is required.","Url":"https://github.com/dotnet/sdk/issues/2793","RelatedDescription":"Open issue \"Result of chr() cannot be used as initial value of a Const in .Net Core 3 Preview 1\" (#2793)"},{"Id":"396017030","IsPullRequest":false,"CreatedAt":"2019-01-04T18:08:35","Actor":"ryantrem","Number":"2790","RawContent":null,"Title":"Generalize multi-pass build support","State":"open","Body":"There are already several standard build \"dimensions,\" including Configuration, Platform, and TargetFramework. These dimensions and their potential values create a matrix of overall build configurations. I can specify which element of the matrix to use to configure the build by specifying values for each dimension (e.g. Debug|x86|net46). If I want to perform multiple build passes (multiple elements of the matrix), then I have a few options depending on the dimension(s) I want vary.\r\n\r\nFor TargetFramework, I can specify a set of TargetFramework**s** and the dotnet sdk targets will perform multiple build passes, one for each TargetFramework specified.\r\n\r\nFor Configuration and Platform, I can use Visual Studio's Batch Build feature to select multiple Configurations and/or Platforms.\r\n\r\nFor my own custom \"dimension,\" my only real option is multiple MSBuild invocations from the command line, passing in values for my properties (and this might be a lot of invocations depending on the number of dimensions and number of potential values per dimension).\r\n\r\nIt would be great if the multi-pass build support for TargetFrameworks was generalized into a mechanism that supported multi-pass builds across arbitrary build dimensions. I could imagine this perhaps being expressed as follows:\r\n\r\n```xml\r\n<!-- Define each build dimension. -->\r\n<ItemGroup>\r\n  <BuildDimension Condition=\"'$(Configuration)' == ''\" Include=\"Configuration\">\r\n    <Values>Debug;Release</Values>\r\n  </BuildDimension>\r\n  <BuildDimension Condition=\"'$(Platform)' == ''\" Include=\"Platform\">\r\n    <Values>x86;x64;arm;AnyCPU</Values>\r\n  </BuildDimension>\r\n  <BuildDimension Condition=\"'$(TargetFramework)' == ''\" Include=\"TargetFramework\">\r\n    <Values>net46;netstandard2.0;uap10.0.14393</Values>\r\n  </BuildDefinition>\r\n</ItemGroup>\r\n```\r\n\r\nThe idea would be that a specific value for a build dimension (e.g. Configuration=Debug) could be specified, otherwise multiple passes would be performed for that dimension. I could imagine this showing up in Visual Studio as dropdowns for each build dimension, similar to what we have today for Configuration and Platform. I would also imagine the default output path would be generated by simply combining the values of each dimension (e.g. Debug\\x86\\net46).\r\n\r\nUsually, a build configuration matrix is sparse, so I'd also want to be able to ignore certain elements of the matrix (don't build them). I could imagine this perhaps being expressed as follows:\r\n\r\n```xml\r\n<PropertyGroup>\r\n  <!-- Allow an early out of the inner build loop, which is effectively allowing for a sparse build dimension matrix. -->\r\n  <BuildPassEnabled Condition=\"'$(Platform)' == 'arm' AND '$(TargetFramework)' != 'uap10.0.14393'\">false</BuildPassEnabled>\r\n</PropertyGroup>\r\n```\r\n\r\nGeneralized build dimensions and multi-pass builds are particularly useful when you need to define your own custom build dimensions. For example, when writing code to be consumed by Unity 3D, I have the concept of Unity Players (runtimes) (e.g. Windows Store, Android, iOS, etc.). Depending on the target Player, I might want to include different source files, define different conditional compilation symbols, etc. Further, I might want to define a \"compatibility graph\" in the same way TargetFramework does (e.g. netstandard2.0 is \"compatible with\" net471, so a net471 project can consume a netstandard2.0 project). Taking my Unity 3D example further, different Unity Players support different .NET runtimes. For example, iOS and Android are based on .NET Framework, while Windows Store is based on UWP .NET Core). So ideally I'd want to be able to have UnityIOS and UnityAndroid be \"compatible with\" UnityNetFramework (for example). I could imagine this perhaps being expressed as follows:\r\n\r\n### My common props that *define* the build dimension\r\n\r\n```xml\r\n<ItemGroup>\r\n  <BuildDimensionCompatibility Include=\"UnityEditor;UnityIOS;UnityAndroid\">\r\n    <CompatibleWith>UnityNetFramework</CompatibleWith>\r\n  </BuildDimensionCompatibility>\r\n</ItemGroup>\r\n```\r\n\r\n### Project 1\r\n\r\n```xml\r\n<ItemGroup>\r\n  <BuildDimension Condition=\"'$(UnityPlayer)' == ''\" Include=\"UnityPlayer\">\r\n    <Values>UnityUAP;UnityNetFramework</Values>\r\n  </BuildDimension>\r\n</ItemGroup>\r\n```\r\n\r\n### Project 2\r\n\r\n```xml\r\n<ItemGroup>\r\n  <BuildDimension Condition=\"'$(UnityPlayer)' == ''\" Include=\"UnityPlayer\">\r\n    <Values>UnityUAP;UnityEditor;UnityIOS;UnityAndroid</Values>\r\n  </BuildDimension>\r\n  <!-- This ProjectReference works because UnityEditor/UnityIOS/UnityAndroid are compatible with UnityNetFramework in the same way that net471 and netcore5 are compatible with netstandard2.0 -->\r\n  <ProjectReference Include=\"Project1.csproj\" />\r\n</ItemGroup>\r\n```\r\n\r\nFinally, for all this to be effective, I'd want the same custom build dimension support and compatibility graph support to be part of NuGet (in terms of having build results from multiple build passes in the package and having the right assemblies/content being consumed by the consuming project).\r\n\r\nI feel like a solution like this would drastically simplify scenarios where custom \"build dimensions\" are needed, which in my experience is fairly common, and almost always results in some hacky solution that only one or two people on the team understand.","Url":"https://github.com/dotnet/sdk/issues/2790","RelatedDescription":"Open issue \"Generalize multi-pass build support\" (#2790)"},{"Id":"395918022","IsPullRequest":true,"CreatedAt":"2019-01-04T16:40:57","Actor":"dotnet-maestro[bot]","Number":"2789","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19053.2\r\n- Microsoft.DotNet.SignTool - 1.0.0-beta.19053.2\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/2789","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#2789)"},{"Id":"395727980","IsPullRequest":false,"CreatedAt":"2019-01-03T21:19:05","Actor":"kouvel","Number":"2787","RawContent":null,"Title":"Changes to runtime config options in .csproj are not reflected in .runtimeconfig.json on partial build","State":"open","Body":"Repro:\r\n\r\n```\r\ndotnet new console\r\ndotnet build -c Release\r\n```\r\n\r\nThe `.runtimeconfig.json` file in `bin` has the following contents:\r\n```json\r\n{\r\n  \"runtimeOptions\": {\r\n    \"tfm\": \"netcoreapp3.0\",\r\n    \"framework\": {\r\n      \"name\": \"Microsoft.NETCore.App\",\r\n      \"version\": \"3.0.0-preview-27218-01\"\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nEdit the `.csproj` file and add the following into the `PropertyGroup` element:\r\n```xml\r\n<TieredCompilation>false</TieredCompilation>\r\n```\r\n\r\n```\r\ndotnet build -c Release\r\n```\r\n\r\nThe `.runtimeconfig.json` file in `bin` has the same contents as above.\r\n\r\nExpected contents:\r\n```json\r\n{\r\n  \"runtimeOptions\": {\r\n    \"tfm\": \"netcoreapp3.0\",\r\n    \"framework\": {\r\n      \"name\": \"Microsoft.NETCore.App\",\r\n      \"version\": \"3.0.0-preview-27218-01\"\r\n    },\r\n    \"configProperties\": {\r\n      \"System.Runtime.TieredCompilation\": false\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nWorkaround is to delete `bin` and `obj` folders after updating the `.csproj` and before building. The same issue exists the other way around, if the runtime config option is removed from the `.csproj`, the `.runtimeconfig.json` is not updated until a clean build.\r\n\r\nMy versions:\r\n```\r\n.NET Core SDKs installed:\r\n  3.0.100-preview-009825\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.NETCore.App 3.0.0-preview-27206-02\r\n```","Url":"https://github.com/dotnet/sdk/issues/2787","RelatedDescription":"Open issue \"Changes to runtime config options in .csproj are not reflected in .runtimeconfig.json on partial build\" (#2787)"},{"Id":"395660681","IsPullRequest":true,"CreatedAt":"2019-01-03T18:35:31","Actor":"nguerrera","Number":"2786","RawContent":null,"Title":"Use correct property name for additional test runner arguments","State":"closed","Body":"React to https://github.com/dotnet/arcade/pull/1438\r\n\r\nFix #2712 \r\n\r\nWe were running with too many levels of paralellism, spawning too many processes, and slowing down test runs while wasting resources.","Url":"https://github.com/dotnet/sdk/pull/2786","RelatedDescription":"Closed or merged PR \"Use correct property name for additional test runner arguments\" (#2786)"},{"Id":"395658198","IsPullRequest":true,"CreatedAt":"2019-01-03T18:27:59","Actor":"nguerrera","Number":"2785","RawContent":null,"Title":"Remove NETStandard.Library version override","State":"closed","Body":"This caused downgrade errors while trying to manually build projects in the .perftestsource repo.\r\n\r\nWe should make sure to prevent the perf test projects from picking up the outer repository customization, and I believe @johnbeisner is looking at that.\r\n\r\nNevertheless, I see no reason for this override remaining, so taking the opportunity to clean it up. We don't even have any non-test assets in this repo targeting netstandard.","Url":"https://github.com/dotnet/sdk/pull/2785","RelatedDescription":"Closed or merged PR \"Remove NETStandard.Library version override\" (#2785)"},{"Id":"395652187","IsPullRequest":false,"CreatedAt":"2019-01-03T17:15:24","Actor":"DouglasDRF","Number":"2784","RawContent":null,"Title":"Why IList does not have the method signature RemoveAll?","State":"closed","Body":"```\r\npublic class List : ICollection, IEnumerable, IEnumerable, IList, IReadOnlyCollection, IReadOnlyList, ICollection, IList\r\n\r\npublic interface IList : ICollection, IEnumerable, IEnumerable\r\n```\r\n\r\nIList only have Remove() and RemoveAt()... Wouldn't be more interesting put the RemoveAll() method signature in IList for access it?? Neither ICollection or IEnumerable has these methods signatures. Because if I want to remove all items under a specific condition through IList interface I have to transform to a List first\r\n\r\n```\r\n// Enderecos is IList type\r\n       var listEnderecos = clienteModel.Enderecos.ToList();\r\n            listEnderecos.RemoveAll(p => p == null);\r\n            clienteModel.Enderecos = listEnderecos;\r\n```\r\n\r\nWith RemoveAll() method in IList\r\n\r\n```\r\n// Enderecos is IList type\r\n       clienteModel.Enderecos.RemoveAll(p => p == null);\r\n```","Url":"https://github.com/dotnet/sdk/issues/2784","RelatedDescription":"Closed issue \"Why IList does not have the method signature RemoveAll?\" (#2784)"},{"Id":"395565090","IsPullRequest":true,"CreatedAt":"2019-01-03T16:25:31","Actor":"dotnet-maestro[bot]","Number":"2783","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19052.1\r\n- Microsoft.DotNet.SignTool - 1.0.0-beta.19052.1\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/2783","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#2783)"},{"Id":"395081205","IsPullRequest":true,"CreatedAt":"2019-01-02T15:59:00","Actor":"dotnet-maestro[bot]","Number":"2782","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18631.2\r\n- Microsoft.DotNet.SignTool - 1.0.0-beta.18631.2\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19051.1\r\n- Microsoft.DotNet.SignTool - 1.0.0-beta.19051.1\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/2782","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#2782)"},{"Id":"394977369","IsPullRequest":true,"CreatedAt":"2018-12-31T18:30:23","Actor":"dotnet-maestro[bot]","Number":"2781","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18630.2\r\n- Microsoft.DotNet.SignTool - 1.0.0-beta.18630.2\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/2781","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#2781)"}],"ResultType":"GitHubIssue"},"Announcements-Issues":{"Issues":[{"Id":"397026248","IsPullRequest":false,"CreatedAt":"2019-01-08T18:17:45","Actor":"leecow","Number":"96","RawContent":null,"Title":"January 2019 .NET Updates","State":"open","Body":"# January 2019 .NET Updates\r\n\r\nThe following .NET updates were released in January 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n\r\n* [.NET Framework January 2019 Security and Quality Rollup - January 8, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/01/08/net-framework-january-2019-security-and-quality-rollup/)\r\n\r\n## .NET Core\r\n\r\n* .NET Core 2.1.7 and .NET Core SDK 2.1.503 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.7/2.1.7.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.1) )\r\n\r\n* .NET Core 2.2.1 and .NET Core SDK 2.2.102 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.1/2.2.1.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.2) )\r\n\r\nA discussion issue is available at [core/2210](https://github.com/dotnet/core/issues/2210)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/96","RelatedDescription":"Open issue \"January 2019 .NET Updates\" (#96)"},{"Id":"397020176","IsPullRequest":false,"CreatedAt":"2019-01-08T18:00:27","Actor":"blowdart","Number":"95","RawContent":null,"Title":" Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a tampering vulnerability exists when .NET Core improperly handles specially crafted files. An attacker who successfully exploited this vulnerability could write arbitrary files and directories to certain locations on a vulnerable system. However, an attacker would have limited control over the destination of the files and directories.\r\n\r\nTo exploit the vulnerability, an attacker must send a specially crafted file to a vulnerable system\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core handles these files.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/34427\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nIf your application does not extract ZIP compressed files it is unaffected.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the [System.IO.Compression.ZipFile](https://www.nuget.org/packages/System.IO.Compression.ZipFile/) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nMicrosoft.NETCore.App (System.IO.Compression.ZipFile) | 2.1.0, 2.1.1, 2.1.2, 2.1.3, 2.1.4, 2.1.5, 2.1.6 | 2.1.7\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n`System.IO.Compression.ZipFile` is distributed as part of the .NET Core 2.1 runtime. To check the currently installed runtimes, open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed, you'll see output like the following;\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your host version is 2.1.x and the highest `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\nIf your host version is 2.2.x and the highest 2.1.x `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\n\r\nYou will not see SDK versions if you have only installed the runtime.\r\n\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nIf your host version is a 2.1.x host you must install version 2.1.7 or later of the [.NET Core 2.1 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.1), or corresponding [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\nIf your host version is a 2.2.x you must install version 2.2.1 or later of the [.NET Core 2.2 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.2), or corresponding  [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\nFinally, you must restart your applications once an updated runtime or SDK is installed.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgments\r\n\r\n[Danny Grander](https://twitter.com/grander) of [Snyk](https://snyk.io/)\r\n\r\n### External Links\r\n\r\n[CVE-2018-8416](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-8416)\r\n\r\n### Revisions\r\n\r\nV1.1 (January 9, 2019): Correct affected pacakge table.\r\nV1.0 (January 8, 2019): Advisory published.\r\n\r\n_Version 1.1_\r\n\r\n_Last Updated 2019-01-09_\r\n\r\n","Url":"https://github.com/dotnet/announcements/issues/95","RelatedDescription":"Open issue \" Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability\" (#95)"},{"Id":"397020142","IsPullRequest":false,"CreatedAt":"2019-01-08T18:00:23","Actor":"blowdart","Number":"94","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of an information disclosure vulnerability exists in .NET Framework and .NET Core which allows bypassing Cross-origin Resource Sharing (CORS) configurations. An attacker who successfully exploited the vulnerability could retrieve content, that is normally restricted, from a web application.\r\n\r\nThe security update addresses the vulnerability by enforcing CORS configuration to prevent its bypass.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/34428\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nMicrosoft has not identified any mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the [System.Net.Http](https://www.nuget.org/packages/System.Net.Http/) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nMicrosoft.NETCore.App (System.Net.Http) | 2.1.0, 2.1.1, 2.1.2, 2.1.3, 2.1.4, 2.1.5, 2.1.6 | 2.1.7\r\nMicrosoft.NETCore.App (System.Net.Http) | 2.2.0 | 2.2.1\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n#### Applications that use Microsoft.NetCore.App\r\n\r\n`System.Net.Http` is distributed as part of the .NET Core 2.1 runtime. To check the currently installed runtimes, open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed, you'll see output like the following;\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your host version is 2.1.x and the highest `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\nIf your host version is 2.2.x and the highest 2.1.x `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\n\r\nYou will not see SDK versions if you have only installed the runtime.\r\n\r\n#### Applications not using Microsoft.NetCore.App\r\n\r\nThe affected assembly is also available separately as a NuGet package. If you are not using Microsoft.NetCore.App, you may still be affected if you are referencing the packages listed above.\r\n\r\n##### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file. They can be fixed by [editing the project file](#fixing-direct-dependencies) or using NuGet to update the dependency.\r\n\r\n##### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects\r\n\r\nThe `project.assets.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json)).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `SSystem.Net.Http/4.3.0` is a reference to version 4.3.0 of `System.Net.Http`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\n#### Updating the version of Microsoft.NETCore.App\r\n\r\nIf your host version is a 2.1.x host you must install version 2.1.7 or later of the [.NET Core 2.1 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.1), or corresponding [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\nIf your host version is a 2.2.x you must install version 2.2.1 or later of the [.NET Core 2.2 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.2), or corresponding  [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\n#### <a name=\"fixing-direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.Net.Http` version 4.3.0\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.IO.Pipelines` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.5\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"transitive-dependencies\"></a>Fixing transitive dependencies\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.5\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n##### Rebuilding your application\r\n\r\nFinally, you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2019-0545](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0545)\r\n\r\n### Revisions\r\n\r\nV1.1 (January 9, 2019): Correct affected package table. \r\nV1.0 (January 8, 2019): Advisory published.\r\n\r\n_Version 1.1_\r\n\r\n_Last Updated 2019-01-09_\r\n","Url":"https://github.com/dotnet/announcements/issues/94","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability\" (#94)"},{"Id":"390948658","IsPullRequest":false,"CreatedAt":"2018-12-14T03:22:58","Actor":"1015450578","Number":"93","RawContent":null,"Title":"Docker image with tag '2.2-aspnetcore-runtime' is not compatible","State":"closed","Body":"1. Install  .NET Core 2.2.100 sdk\r\n2. Create a new 'AspNetCore Web Api' by using Visual Studio 2017,and enbale docker support.\r\n3. F5 ,the Output Windows shows:\r\n>It was not possible to find any compatible framework version\r\n>The specified framework 'Microsoft.AspNetCore.App', version '2.2.0' was not found.\r\n>  - Check application dependencies and target a framework version installed at:\r\n>      /usr/share/dotnet/\r\n>  - Installing .NET Core prerequisites might help resolve this problem:\r\n>     http://go.microsoft.com/fwlink/?LinkID=798306&clcid=0x409\r\n>  - The .NET Core framework and SDK can be installed from:\r\n>      https://aka.ms/dotnet-download\r\n>  - The following versions are installed:\r\n>      2.2.0-preview3-35497 at [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]","Url":"https://github.com/dotnet/announcements/issues/93","RelatedDescription":"Closed issue \"Docker image with tag '2.2-aspnetcore-runtime' is not compatible\" (#93)"},{"Id":"390193072","IsPullRequest":false,"CreatedAt":"2018-12-12T12:56:53","Actor":"bilalMlaik","Number":"92","RawContent":null,"Title":".net core Console","State":"closed","Body":"I am running dot net core console app as web jobs and it is working perfectly in docker with docker compose. Now the issue is I want to pass a value to the application via Console.ReadLine() over this value i make some decision but i am unable to pass value via Console.ReadLine(). How i can do it please help me. For more understanding, i have added my docker compose file below\r\n`version: '3.4'\r\n\r\nservices:\r\n  \r\n  tt.core.web:\r\n    image: ${DOCKER_REGISTRY-}ttcoreweb\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.Web/Dockerfile\r\n    depends_on:\r\n     - db\r\n    networks:\r\n     - app-network\r\n\r\n  tt.core.downtime.webjob:\r\n    image: ${DOCKER_REGISTRY-}ttcoredowntimewebjob\r\n    environment:\r\n      CORE_ENVIRONMENT: devdocker\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.Downtime.Webjob/Dockerfile\r\n    depends_on:\r\n     - db\r\n     - tt.core.web\r\n    networks:\r\n     - app-network\r\n\r\n  db:\r\n    image: microsoft/mssql-server-linux\r\n    container_name: db\r\n    environment:\r\n      SA_PASSWORD: \"Thingtrax%1\"\r\n      ACCEPT_EULA: \"Y\"\r\n      MSSQL_PID: Express\r\n    ports:\r\n      - \"7002:1433\"\r\n    networks:\r\n      app-network:\r\n        ipv4_address: 172.24.0.2\r\n\r\nnetworks:\r\n  app-network:\r\n    ipam:\r\n      driver: default\r\n      config:\r\n        - subnet: 172.24.0.0/16\r\n\r\n`\r\nIf the detail is not enough or you do not get my point, you can share your confusion in comment","Url":"https://github.com/dotnet/announcements/issues/92","RelatedDescription":"Closed issue \".net core Console\" (#92)"},{"Id":"380346599","IsPullRequest":false,"CreatedAt":"2018-11-13T17:44:44","Actor":"leecow","Number":"91","RawContent":null,"Title":"November 2018 .NET Updates","State":"open","Body":"# November 2018 .NET Updates\r\n\r\nThe following .NET updates were released in November 2018. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Core\r\n\r\n* [.NET Core November 2018 (2.1.6 and SDK 2.1.500) Update release notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.6/2.1.6.md)\r\n\r\nA [discussion issue](https://github.com/dotnet/core/issues/2053) is available for questions or feedback about this release.\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n* [October 2018](https://github.com/dotnet/announcements/issues/89)\r\n* [September 2018](https://github.com/dotnet/announcements/issues/84)\r\n* [August 2018](https://github.com/dotnet/announcements/issues/79)\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)","Url":"https://github.com/dotnet/announcements/issues/91","RelatedDescription":"Open issue \"November 2018 .NET Updates\" (#91)"},{"Id":"375230004","IsPullRequest":false,"CreatedAt":"2018-10-29T21:45:27","Actor":"terrajobst","Number":"90","RawContent":null,"Title":"The future of JSON in .NET Core 3.0","State":"open","Body":"JSON has become an essential part of virtually all modern .NET applications and in many cases even surpassed the usage of XML. However, .NET hasn't had a (great) built-in way to deal with JSON. Instead we've relied on [Json.NET] which continues to serve the .NET ecosystem well.\r\n\r\n[Json.NET]: https://www.newtonsoft.com/json\r\n\r\nMoving forward, we plan on making some changes to our JSON support:\r\n\r\n* **We need high-performance JSON APIs**. We need a new set of JSON APIs that are highly tuned for performance by using `Span<T>` and allows for processing UTF-8 directly without having to transcode to UTF-16 `string` instances. Both aspects are critical for our web server Kestrel, where throughput is a key requirement.\r\n\r\n* **Remove dependency from ASP.NET Core to Json.NET**. Today, ASP.NET Core has a dependency on Json.NET. While this provides a tight integration between ASP.NET Core and Json.NET, it also means that application developers cannot freely choose which JSON library they are using. This is also problematic for customers of Json.NET as the version is dictated by the underlying platform. However, Json.NET is frequently updated and application developers often want to -- or even have to -- use a specific version. Thus, we want to remove the dependency from ASP.NET Core 3.0 to Json.NET so that customers can choose which version to use, without fearing they might accidentally break the underlying platform. In addition, this makes it also possible to plug-in an entirely different JSON library.\r\n\r\n* **Provide an ASP.NET Core integration package for Json.NET**. Json.NET has basically become the Swiss Army knife of JSON processing in .NET. It provides many options and facilities that allow customers to handle their JSON needs with ease. We don't want to compromise on the Json.NET support customers are getting today, for example, the ability to configure the JSON serialization via the `AddJsonOptions` extension method. Thus, we want to provide the Json.NET integration as a NuGet package that developers can optionally install so they get all the bells and whistles they get from Json.NET today. The other part of this work item is to ensure we have the right extension points so that other parties can provide similar integration packages for their JSON library of choice.\r\n\r\nBelow are more details around this plan.\r\n\r\n## The need for high-performance JSON APIs\r\n\r\nThe requirements for the .NET stack have changed a bit since the arrival of .NET Core. Historically, .NET has valued usability and convenience. With .NET Core, we've added a focus on performance, and we've made significant investments to serve high performance needs. And the [improvements we made][techempower] in the popular TechEmpower benchmark are a testament to that.\r\n\r\n[techempower]: https://www.techempower.com/blog/2016/11/16/framework-benchmarks-round-13/\r\n\r\nWith .NET Core 2.1, we've added a brand new primitive called [Span\\<T>][span-msdn] that allows us to represent native memory and arrays in a uniform way. With this type, we've also added a set of parsing and encoding APIs that are much more memory efficient without having to resort to unsafe code.\r\n\r\n[span-msdn]: https://msdn.microsoft.com/en-us/magazine/mt814808.aspx\r\n\r\nPart of the work of minimizing allocations is to avoid having to transcode UTF-8 payloads into UTF-16 strings, purely for parsing reasons. Currently, Json.NET is implemented by reading UTF-16. We need the ability to read (and write) JSON documents directly in UTF-8 because most network protocols (including HTTP) use UTF-8.\r\n\r\nDuring .NET Core 2.1 we've learned that updating our existing APIs to leverage `Span<T>` has limits. While we did add a bunch of overloads that accept spans, we also had to produce brand new APIs that are designed around minimizing allocations and dealing with buffers, which we exposed in `System.Buffers` namespaces. And with `System.IO.Pipelines` we've also added a programming model that enables developers to share buffers without having to deal with lifetime issues.\r\n\r\nBased on these experiences we believe in order to support JSON parsing, we'll need to expose a new set of JSON APIs that are specifically geared for high-performance scenarios.\r\n\r\nYou might wonder why we can't just update Json.NET to include support for parsing JSON using `Span<T>`? Well, James Newton-King -- the author of Json.NET -- has the following to say about that:\r\n\r\n> Json.NET was created over 10 years ago, and since then it has added a wide range of features aimed to help developers work with JSON in .NET. In that time Json.NET has also become far and away NuGet's most depended on and downloaded package, and is the go-to library for JSON support in .NET. Unfortunately, Json.NET's wealth of features and popularity works against making major changes to it. Supporting new technologies like `Span<T>` would require fundamental breaking changes to the library and would disrupt existing applications and libraries that depend on it.\r\n>\r\n> Going forward Json.NET will continue to be worked on and invested in, both addressing known issues today and supporting new platforms in the future. Json.NET has always existed alongside other JSON libraries for .NET, and there will be nothing to prevent you using one or more together, depending on whether you need the performance of the new JSON APIs or the large feature set of Json.NET.\r\n\r\n## Move Json.NET integration into a separate NuGet package\r\n\r\nToday, you cannot use ASP.NET Core without Json.NET because it is a dependency of ASP.NET Core itself. Over the years, we've received feedback that the dependency can conflict with other libraries that have their own dependency on a different version of Json.NET. In the past, we've considered addressing this issue by using a private copy of Json.NET in ASP.NET. However, this would create problems when developers want to configure Json.NET (for instance, in order to control how the serializer behaves when formatting JSON objects).\r\n\r\nMoving forward we'd like to:\r\n\r\n1. Replace the internal usage of Json.NET in ASP.NET Core by the new platform-provided JSON APIs.\r\n\r\n2. Factor the public facing usage of Json.NET into an optional integration package that can be acquired from NuGet.\r\n\r\nSo the existing integration between ASP.NET Core and Json.NET will continue to be supported, but will be moving out of the platform and into a separate package. However, since the integration is then designed to sit on top of the platform, it will also allow customers to update Json.NET to later versions.\r\n\r\nFurthermore, customers who need more performance can also choose to use the new JSON APIs, at the expense of the rich feature set that Json.NET offers.\r\n\r\n## Discussion\r\n\r\nFor a discussion, please go to https://github.com/dotnet/corefx/issues/33115.","Url":"https://github.com/dotnet/announcements/issues/90","RelatedDescription":"Open issue \"The future of JSON in .NET Core 3.0\" (#90)"},{"Id":"368440353","IsPullRequest":false,"CreatedAt":"2018-10-09T23:44:06","Actor":"vivmishra","Number":"89","RawContent":null,"Title":"October 2018 .NET Updates","State":"open","Body":"# October 2018 .NET Updates\r\n\r\nThe following .NET updates were released in October 2018. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Core\r\n\r\n* [.NET Core October 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/10/09/net-core-october-2018-update-net-core-1-0-and-1-1/)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n* [September 2018](https://github.com/dotnet/announcements/issues/84)\r\n* [August 2018](https://github.com/dotnet/announcements/issues/79)\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)","Url":"https://github.com/dotnet/announcements/issues/89","RelatedDescription":"Open issue \"October 2018 .NET Updates\" (#89)"},{"Id":"368429033","IsPullRequest":false,"CreatedAt":"2018-10-09T22:51:18","Actor":"leecow","Number":"88","RawContent":null,"Title":"Microsoft Security Advisory CVE-2018-8292: .NET Core Information Disclosure Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-8292: .NET Core Information Disclosure Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a security feature bypass vulnerability that exists when .NET Core when HTTP authentication information is inadvertently exposed in an outbound request that encounters an HTTP redirect. An attacker who successfully exploited this vulnerability could use the information to further compromise the web application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core applications handles HTTP redirects.\r\n\r\nSystem administrators running .NET Core 1.0 or .NET Core 1.1 applications must update their .NET Core runtimes to versions 1.0.13 and 1.1.10 then restart their applications. If installed applications target .NET Core 2.0, the applications must be migrated to 2.1 or newer and redeployed.\r\n\r\nDevelopers must update their .NET Core SDK to versions 1.1.11 and migrate any [.NET Core 2.0](https://docs.microsoft.com/dotnet/core/migration/20-21) or [ASP.NET Core 2.0](https://docs.microsoft.com/aspnet/core/migration/20_21?view=aspnetcore-2.1) applications to 2.1 then redeploy.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at <https://github.com/dotnet/corefx/issues/32730>\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nNone\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core application that runs on a .NET Core 1.0.x runtime with a version number of 1.0.12 or lower, or a .NET Core application that runs on a .NET Core 1.1.x runtime with a version number of 1.1.9 or lower, or a .NET Core application that runs on a .NET Core 2.0.x runtime.\r\n\r\nAdditionally package authors should check their dependencies to ensure they aren't depending on a vulnerable version of the following package:\r\n\r\n<a name=\"package-list\"></a>Package name | Vulnerable versions | Secure versions\r\n------------ | ---------------- | -------------------------\r\nSystem.Net.Http| 2.0.20126.16343, 2.0.20505, 2.0.20710, 4.0.0, 4.1.0, 4.1.1, 4.1.2, 4.3.0, 4.3.1, 4.3.2, 4.3.3 |  4.3.4 or later\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nAny .NET Core application that runs on a .NET Core 1.0.x runtime with a version number of 1.0.12 or lower, or a .NET Core application that runs on a .NET Core 1.1.x runtime with a version number of 1.1.9 or lower, or a .NET Core application that runs on a .NET Core 2.0.x runtime.\r\n\r\nTo check the currently installed runtimes and SDKs with version 2.1 or later of .NET Core, open a command prompt and run the `dotnet --info` command. You should see an output similar to the following:\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.1.403\r\n Commit:    04e15494b6\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17763\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.403\\\r\n\r\nHost (useful for support):\r\n  Version: 2.1.5\r\n  Commit:  290303f510\r\n\r\n.NET Core SDKs installed:\r\n  1.0.4 [C:\\Program Files\\dotnet\\sdk]\r\n  1.1.10 [C:\\Program Files\\dotnet\\sdk]\r\n  2.0.3 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.4 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf you don't see a runtime entry for 1.0.13 or 1.1.10, any .NET Core 1.x applications run on that computer are vulnerable.\r\n\r\nIf you don't have a 2.1 version of the runtime or SDK installed, you can produce the complete list of runtimes by performing a directory listing in the install root directories. The default root directories are listed in the following table:\r\n\r\n| Operating System | Location |\r\n|------------------|----------|\r\n| Windows | `C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\` |\r\n| macOS | `/usr/local/share/dotnet/shared/Microsoft.NETCore.App/` |\r\n| Supported Linux platforms | `/usr/share/dotnet/shared/Microsoft.NETCore.App/` |\r\n\r\nEach runtime version is installed in its own directory, where the directory name is the version number. If you don't have a directory for 1.0.13, 1.1.10 then any application targeting versions 1.0 or 1.1 are vulnerable.\r\n\r\nAdditionally, if you've deployed [self-contained applications](https://docs.microsoft.com/dotnet/core/deploying/#self-contained-deployments-scd) targeting any of the impacted versions, these applications are also vulnerable and must be recompiled and redeployed.\r\n\r\n### <a name=\"fix-runtime\">How do I fix the vulnerability?\r\n\r\nSystem administrators are advised to update their .NET Core runtimes to versions 1.0.13, 1.1.10 and install the latest 2.1 runtime, ensuring that any 2.0 applications are migrated to 2.1 as soon as possible.\r\n\r\n Developers are advised to update their .NET Core SDK to versions 1.1.11 and migrate any [.NET Core](https://docs.microsoft.com/dotnet/core/migration/20-21) or [ASP.NET Core 2.0](https://docs.microsoft.com/aspnet/core/migration/20_21?view=aspnetcore-2.1) applications to 2.1 and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at <https://github.com/dotnet/> and <https://github.com/aspnet/>, respectively. The Announcements repo for each product (<https://github.com/dotnet/Announcements> and <https://github.com/aspnet/Announcements>) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2018-8292](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-CVE-2018-8292)\r\n\r\n### Revisions\r\n\r\nV1.0 (October 10, 2018): Advisory published.\r\n_Version 1.0_\r\n_Last Updated 2018-10-10_\r\n","Url":"https://github.com/dotnet/announcements/issues/88","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2018-8292: .NET Core Information Disclosure Vulnerability\" (#88)"},{"Id":"367393517","IsPullRequest":false,"CreatedAt":"2018-10-05T22:58:51","Actor":"leecow","Number":"87","RawContent":null,"Title":".NET Core Release Data (releases.json) Redesign and v1 Deprecation Plan","State":"open","Body":"# .NET Core Release Data (releases.json) Redesign and Deprecation\r\n\r\nThe releases.json and releases.csv files began life as helper tools for some of our internal release work, some experimentation and to possibly be useful to the community. It has been great to learn the files are indeed in use and many folks depend on them as a trigger for a number of activities.\r\n\r\n* [release-notes/releases.json](https://github.com/dotnet/core/blob/master/release-notes/releases.json)\r\n* [release-notes/releases.csv](https://github.com/dotnet/core/blob/master/release-notes/releases.csv)\r\n\r\nA discussion topic is available to share thoughts and see what others are thinking at https://github.com/dotnet/core/issues/1986\r\n\r\nBetween the usages which we have become aware and in considering further activities that could be enabled to reason about things such as checking .NET Core version availability and support status, it became clear the current format is inadequate.\r\n\r\nAn updated format has been designed and tested which will replace the current files. The timeline below describes the path to obsoleting the current files.\r\n\r\n## The Plan\r\n\r\n| Date | Action |\r\n| :--- | :----- |\r\n| Oct 2018 | Notify the community of the coming change |\r\n| Oct 2018 | Release the new json format into dotnet/core |\r\n| Oct 2018 - Feb 2019 | Maintain the old json and csv files |\r\n| Feb 2019 | Reminder announcement that old format file is coming soon |\r\n| Mar 2019 | Old json and csv files are obsoleted and removed from dotnet/core |\r\n\r\n## Breaking change\r\n\r\nIf you are currently utilizing the old version json or csv, you will need to update the relevant code to work with the new format. If you are just getting started with consuming this data, use the new version.\r\n\r\n## The Format\r\n\r\nBelow are fragments of the files from our most recent .NET Core release.\r\n\r\n### release-index.json\r\n\r\nThis file consists of a top level array with data on the latest release versions and a property for locating the more detailed channel-specific releases.json. This file is found in [dotnet/core/release-notes](https://github.com/dotnet/core/tree/new-json/release-notes/)\r\n\r\n[releases-index.json](https://github.com/dotnet/core/blob/new-json/release-notes/releases-index.json)\r\n\r\n```\r\n{\r\n    \"releases-index\": [\r\n        {\r\n            \"channel-version\": \"2.1\",\r\n            \"latest-release\": \"2.1.5\",\r\n            \"latest-release-date\":\"2018-10-02\",\r\n            \"product\": \".NET Core\",\r\n            \"support-phase\": \"lts\",\r\n            \"eol-date\": \"\",\r\n            \"releases.json\": \"https://github.com/dotnet/core/blob/master/release-notes/2.1/releases.json\",\r\n        },\r\n        ...\r\n}\r\n```\r\n\r\n### releases.json\r\n\r\nThis file provides detailed data for each release. A copy of this file will be found in each versioned directories under [dotnet/core/release-notes](https://github.com/dotnet/core/release-notes). For example [dotnet/core/release-notes/2.1](https://github.com/dotnet/core/tree/new-json/release-notes/2.1)\r\n\r\n\r\n[releases.json](https://github.com/dotnet/core/tree/new-json/release-notes/2.1/releases.json)\r\n\r\n```\r\n{\r\n    \"channel-version\": \"2.1\",\r\n    \"latest-release\": \"2.1.5\",\r\n    \"latest-release-date\":\"2018-10-12\",\r\n    \"support-phase\": \"lts\",\r\n    \"eol-date\": \"\",\r\n    \"lifecycle-policy\": \"https://www.microsoft.com/net/support/policy\",\r\n    \"releases\":\r\n    [\r\n        {\r\n            \"release-date\":  \"2018-10-02\",\r\n            \"release-version\":  \"2.1.5\",\r\n            \"security\":  false,\r\n            \"release-notes\":  \"https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.5/2.1.5.md\",\r\n            \"runtime\":  \r\n            {\r\n                \"version\":  \"2.1.5\",\r\n                \"version-display\":  \"2.1.5\",\r\n                \"vs-version\":  \"15.8.6\",\r\n                \"files\":  \r\n                [\r\n                    {\r\n                        \"name\": \"dotnet-runtime-linux-arm.tar.gz\",\r\n                        \"url\": \"https://download.visualstudio.microsoft.com/download/pr/4d555219-1f04-47c6-90e5-8b3ff8989b9c/0798763e6e4b98a62846116f997d046e/dotnet-runtime-2.1.5-linux-arm.tar.gz\",\r\n                        \"hash\": \"89a77a07065ea24e7198c77a233b9ce5c6cf51b1deb2ef55c88f0adbb2ecd9db1ba4e7d55eec2ef7139c47f91346fed360161a5bb6e3a7ccfc4559bcde286364\"\r\n                    },\r\n                    ...\r\n                ]\r\n            }\r\n            \"sdk\":  \r\n            {\r\n                \"version\":  \"2.1.403\",\r\n                \"version-display\":  \"2.1.403\",\r\n                \"vs-version\":  \"15.8.6\",\r\n                \"csharp-language\":  \"7.3\",\r\n                \"fsharp-language\":  \"4.5\",\r\n                \"files\":  \r\n                [...]\r\n            }\r\n        }\r\n    ]\r\n}\r\n```","Url":"https://github.com/dotnet/announcements/issues/87","RelatedDescription":"Open issue \".NET Core Release Data (releases.json) Redesign and v1 Deprecation Plan\" (#87)"},{"Id":"366416503","IsPullRequest":false,"CreatedAt":"2018-10-03T16:11:18","Actor":"leecow","Number":"86","RawContent":null,"Title":".NET Core 2.0 has reached end of life","State":"open","Body":"[.NET Core 2.0 reached end of life](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/) on October 1, 2018. This means [.NET Core 2.0](https://blogs.msdn.microsoft.com/dotnet/2017/08/14/announcing-net-core-2-0/) is no longer supported and updates will no longer be provided. We recommend moving to [.NET Core 2.1](https://blogs.msdn.microsoft.com/dotnet/2018/05/30/announcing-net-core-2-1/), our long term support (LTS) release.\r\n\r\n- [Download .NET Core 2.1](https://www.microsoft.com/net/download/dotnet-core/2.1)\r\n- [.NET Core 2.1 LTS statement](https://blogs.msdn.microsoft.com/dotnet/2018/08/21/net-core-august-2018-update/)\r\n- [.NET Core 2.0 end-of-life statement](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/)\r\n\r\n## Discussion\r\n\r\nPlease share you thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet/core#1983](https://github.com/dotnet/core/issues/1983)\r\n\r\n## Lifecycle Context\r\n\r\n.NET Core releases belong to one of two [support lifecycles](https://www.microsoft.com/net/platform/support-policy): long term support (LTS) and Current. LTS releases are stable release which receive critical updates and are supported for at least three years. Current releases can include new features that may undergo future change based on feedback. Current releases are supported for three months after the subsequent .NET Core major or minor release. Both LTS and Current releases receive critical fixes throughout their lifecycle, for security, reliability, or to add support for new operating system versions. You must stay up-to-date with the latest patches to qualify for support. \r\n\r\n## .NET Core 2.0 Lifecycle\r\n\r\n[.NET Core 2.0](https://blogs.msdn.microsoft.com/dotnet/2017/08/14/announcing-net-core-2-0/) was released in August 2017 as a Current release. Per the lifecycle policy, Current releases reach end of life 3 months after a subsequent release (Current or LTS). .NET Core 2.1 released May 2018 and began the end of life countdown for .NET Core 2.0. The 3 month maintenance period for .NET Core 2.0 was scheduled to end August 2018 but was [extended to October](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/) to allow time to address an issue some customers were experiencing while migrating to .NET Core 2.1.\r\n\r\n## .NET Core 2.0 Downloads\r\n\r\n.NET Core 2.0 installers, zips and tar.gzs will remain available, but unsupported. This includes existing releases available on Linux package feeds. Previous versions, including 2.0, will be accessible through the [Download Archives](https://www.microsoft.com/net/download/archives). \r\n\r\n## .NET Core 2.0 Docker Images\r\n\r\n.NET Core 2.0 will be removed from the .NET and ASP.NET Docker repo READMEs, however the existing images remain available in those repos.\r\n\r\n* [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/)\r\n* [microsoft/dotnet-nightly](https://hub.docker.com/r/microsoft/dotnet-nightly/)\r\n* [microsoft/aspnetcore](https://hub.docker.com/r/microsoft/aspnetcore/)\r\n* [microsoft/aspnetcore-build](https://hub.docker.com/r/microsoft/aspnetcore-build/)\r\n\r\n## Policy Information\r\n\r\nAdditional lifecycle and support details  and background can be seen in the following:\r\n\r\n* [.NET Core Support Lifecycle](https://www.microsoft.com/net/platform/support-policy)\r\n* [Support and Versioning](https://blogs.msdn.microsoft.com/dotnet/2016/07/26/net-support-and-versioning/)\r\n* [2.0 end of life early announcement](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n","Url":"https://github.com/dotnet/announcements/issues/86","RelatedDescription":"Open issue \".NET Core 2.0 has reached end of life\" (#86)"},{"Id":"361098704","IsPullRequest":false,"CreatedAt":"2018-09-18T01:10:23","Actor":"spshant","Number":"85","RawContent":null,"Title":"NET Framework 4.8 Early Access build 3646 is available!","State":"open","Body":"Today, we are happy to share an Early Access build for the .NET Framework 4.8. This includes an updated .NET 4.8 runtime as well as the .NET 4.8 Developer Pack (a a single package that bundles the .NET Framework 4.8 runtime, the .NET 4.8 Targeting Pack, and the .NET Framework 4.8 SDK). \r\n\r\nPlease help us ensure this is a high quality and compatible release by trying out this build and exploring the new features. \r\n\r\n**Next steps:**\r\nTo explore the new features, download the [.NET 4.8 Developer Pack build 3646](https://go.microsoft.com/fwlink/?LinkId=2018486).  Instead, if you want to try just the .NET 4.8 runtime, you can download either of these:\r\n•\t[.NET 4.8 Web Installer](https://go.microsoft.com/fwlink/?LinkId=2018525) - requires an internet connection during installation \r\n•\t[.NET 4.8 Offline installer](https://go.microsoft.com/fwlink/?LinkId=2018531) - can be downloaded and installed later in a disconnected state\r\n\r\nPlease provide your feedback by [reporting an issue at the .NET Framework Early Access GitHub repository](https://github.com/Microsoft/dotnet-framework-early-access/issues/new).\r\n\r\n**Note**: this release is still under development, you can expect to see more features and fixes in future preview builds. Also, a reminder that this build is not supported for production use.\r\n\r\nThis preview build 3646 includes improvements/fixes in the following areas:\r\n•\t**[Runtime]** JIT and NGEN improvements\r\n•\t**[Windows Forms]** Accessibility enhancements\r\n•\t**[WPF]** SelectionTextBrush Property\r\n•\t**[BCL]** Updated ZLib\r\n\r\nYou can see the complete list of improvements in this build [here](https://github.com/Microsoft/dotnet-framework-early-access/blob/master/release-notes/NET48/build-3646/changes.md).\r\n\r\n.NET Framework build 3646 is also included in the next update for Windows 10. You can sign up for [Windows Insiders](https://insider.windows.com/en-us/) to validate that your applications work great on the latest .NET Framework included in the latest Windows 10 releases.\r\n","Url":"https://github.com/dotnet/announcements/issues/85","RelatedDescription":"Open issue \"NET Framework 4.8 Early Access build 3646 is available!\" (#85)"},{"Id":"359151445","IsPullRequest":false,"CreatedAt":"2018-09-11T17:44:50","Actor":"leecow","Number":"84","RawContent":null,"Title":"September 2018 .NET Updates","State":"open","Body":"# September 2018 .NET Updates\r\n\r\nThe following .NET updates were released in September 2018. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Framework\r\n* [.NET Framework September 2018 Security and Quality Rollup - September 11, 2018](https://blogs.msdn.microsoft.com/dotnet/2018/09/11/net-framework-september-2018-security-and-quality-rollup/)\r\n\r\n## .NET Core\r\n\r\n* [.NET Core September 2018 Update - September 11, 2018](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.4/2.1.4.md)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n\r\n* [August 2018](https://github.com/dotnet/announcements/issues/79)\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)","Url":"https://github.com/dotnet/announcements/issues/84","RelatedDescription":"Open issue \"September 2018 .NET Updates\" (#84)"},{"Id":"359136325","IsPullRequest":false,"CreatedAt":"2018-09-11T17:00:55","Actor":"blowdart","Number":"83","RawContent":null,"Title":"Microsoft Security Advisory CVE-2018-8409: .NET Core Denial Of Service Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-8409: .NET Core Denial Of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a denial of service vulnerability in .NET Core when System.IO.Pipelines improperly handles requests. An attacker who successfully exploited this vulnerability could cause a denial of service against an application that is leveraging System.IO.Pipelines. The vulnerability can be exploited remotely, without authentication. A remote unauthenticated attacker could exploit this vulnerability by providing specially crafted requests to the application.\r\n\r\nThe update addresses the vulnerability by correcting how System.IO.Pipelines handles requests.\r\n\r\nIf you are using ASP.NET Core 2.1 you will also need to update your ASP.NET version this by following the instructions in the [ASP.NET Core bulletin](https://github.com/aspnet/Announcements/issues/316).\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/32228\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nThere are no mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the System.IO.Pipelines package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.IO.Pipelines | 4.5.0 | 4.5.1\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n#### Applications which use System.IO.Pipelines\r\n\r\nSystem.IO.Pipelines is distributed both in ASP.NET Core 2.1 and separately as a NuGet package. If you are not using Microsoft.AspNetCore.App or .All, you may still be affected if you are referencing the System.IO.Pipelines package.\r\n\r\n##### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file. They can be fixed by [editing the project file](#fixing-direct-dependencies) or using NuGet to update the dependency.\r\n\r\n##### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects\r\n\r\nThe `project.assets.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json)).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `System.IO.Pipelines/4.5.0` is a reference to version 4.5.0 of `System.IO.Pipelines`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\n#### <a name=\"fixing-direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.IO.Pipelines\" Version=\"4.5.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.IO.Pipelines` version 4.5.0\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.IO.Pipelines` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.IO.Pipelines\" Version=\"4.5.1\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"transitive-dependencies\"></a>Fixing transitive dependencies\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.IO.Pipelines\" Version=\"4.5.1\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n#### Rebuilding your application\r\n\r\nFinally you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2018-8409](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-CVE-2018-8409)\r\n\r\n### Revisions\r\n\r\nV1.0 (September 11, 2018): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2018-09-11_\r\n","Url":"https://github.com/dotnet/announcements/issues/83","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2018-8409: .NET Core Denial Of Service Vulnerability\" (#83)"},{"Id":"357399856","IsPullRequest":false,"CreatedAt":"2018-09-05T20:56:25","Actor":"richlander","Number":"82","RawContent":null,"Title":".NET Core Runtime ARM64 Status","State":"open","Body":"# .NET Core Runtime ARM64 Status\r\n\r\nThe .NET Core team is in the process of adding support for ARM64, as part of the .NET Core 3.0 project. This issue will be updated as ARM64 support progresses.\r\n\r\n[.NET Core 3.0 Preview 1](https://github.com/dotnet/core/issues/2099) includes support for Linux ARM64. Please try this build and provide support.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet/coreclr #19843](https://github.com/dotnet/coreclr/issues/19843)\r\n\r\n## Current Status\r\n\r\nARM64 builds are functional, for console and ASP.NET Core apps.\r\n\r\n## Details\r\n\r\nInitial support for ARM64 was added in the .NET Core 2.1 release. The team is not maintaining .NET Core 2.x branches with respect to ARM64. All ARM64 improvements will be made in the .NET Core 3.0 branch (currently [master](https://github.com/dotnet/coreclr)).\r\n\r\nSee [Installing .NET Core 3.0 on Linux ARM64](https://gist.github.com/richlander/467813274cea8abc624553ee72b28213) to install .NET Core on your ARM64 machine. Builds are available from the [daily builds page](https://github.com/dotnet/core/blob/master/daily-builds.md).\r\n\r\n## Bug Queries\r\n\r\nthe following bugs queries are available for ARM64:\r\n\r\n* [dotnet/coreclr](https://github.com/dotnet/coreclr/issues?q=is%3Aopen+is%3Aissue+label%3Aarch-arm64)\r\n* [dotnet/corefx](https://github.com/dotnet/corefx/issues?q=is%3Aopen+is%3Aissue+label%3Aarch-arm64)\r\n\r\n## Operating Systems\r\n\r\n.NET Core 3.0 ARM64 builds are tested on the following operating systems:\r\n\r\n* Ubuntu 16.04 and 18.04\r\n* Debian 9\r\n\r\n## Test Hardware\r\n\r\n.NET Core 3.0 ARM64 builds have been tested on the following hardware:\r\n\r\n* [NVIDIA Jetson TX2 Module](https://developer.nvidia.com/embedded/buy/jetson-tx2)\r\n* [Pine A64](https://www.pine64.org/?page_id=46823)\r\n* [Qualcomm Centriq 2400](https://www.qualcomm.com/products/qualcomm-centriq-2400-processor)\r\n* [Qualcomm Snapdragon](https://www.qualcomm.com/snapdragon/always-connected-pc)\r\n* [Raspberry Pi3](https://www.raspberrypi.org/products/raspberry-pi-3-model-b-plus/)","Url":"https://github.com/dotnet/announcements/issues/82","RelatedDescription":"Open issue \".NET Core Runtime ARM64 Status\" (#82)"},{"Id":"349693735","IsPullRequest":false,"CreatedAt":"2018-08-22T18:23:01","Actor":"richlander","Number":"80","RawContent":null,"Title":"Improving Performance of ARM32 Docker Images with .NET Core Package Cache","State":"closed","Body":"# Improving Performance of ARM32 Docker Images with .NET Core Package Cache\r\n\r\n.NET Core SDK distributions include a compressed copy of NuGet packages for .NET Core, ASP.NET Core and EF Core. These packages are decompressed upon installation of the .NET Core SDK. The packages are not currently included in ARM32 distributions due to the time and space cost to decompress the packages. Instead, they will be added to [.NET Core ARM32 Docker images](https://hub.docker.com/r/microsoft/dotnet/), where these costs can be paid as part of image creation.\r\n\r\nThese NuGet packages include content for two purposes:\r\n\r\n- Reference assemblies for .NET Core, for code compilation.\r\n- Pre-compiled assemblies (compiled with [crossgen](https://github.com/dotnet/coreclr/blob/master/Documentation/building/crossgen.md)) for .NET Core, for use in self-contained applications.\r\n\r\nIn both cases, the presence of these packages avoid the need to access remote NuGet feeds for .NET Core assemblies as part of package restore.\r\n\r\nThis change only affects [.NET Core 2.1 SDK ARM32 Docker images](https://hub.docker.com/r/microsoft/dotnet/). This change will be made in August 2018.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet/dotnet-docker #653](https://github.com/dotnet/dotnet-docker/issues/653)\r\n\r\n## .NET Core SDK NugetFallbackFolder\r\n\r\nThe .NET Core SDK includes a compressed copy of all NuGet package, in LZMA format. It exists at the following version-specific location:\r\n\r\n```\r\nroot@3778032bc43d:/# ls -l /usr/share/dotnet/sdk/2.1.302/*.lzma\r\n-rw-r--r-- 1 1004 sudo 35995936 Jul  2 22:51 /usr/share/dotnet/sdk/2.1.302/nuGetPackagesArchive.lzma\r\n```\r\n\r\nThis file is decompressed to the following location: `/usr/share/dotnet/sdk/NuGetFallbackFolder/`\r\n\r\nA package restore for a .NET Core assembly will restore the assembly from the NuGetFallbackFolder location and copy it to the user NuGet cache. At that point, regular NuGet behavior is used.\r\n\r\n## Impact of this change\r\n\r\nThere should be no functional difference in behavior after this change. .NET SDK commands should complete faster and require fewer package restore network requests.\r\n\r\nThe following examples demonstrates the benefit of this change. The improvement can be observed with package restore. Build times (assuming no restore) are not affected.\r\n\r\n### .NET Core 2.1 SDK image after this change\r\n\r\n> The change has already been made in the `microsoft/dotnet-nightly` repo, as you can see in the example below. In August, this same change will be made available in the `microsoft/dotnet` repo.\r\n\r\n```console\r\npi@raspberrypi:~ $ docker run -it --rm microsoft/dotnet-nightly:2.1-sdk\r\nroot@416731f24915:/# time dotnet new mvc -o mvcapp\r\nGetting ready...\r\nThe template \"ASP.NET Core Web App (Model-View-Controller)\" was created successfully.\r\nThis template contains technologies from parties other than Microsoft, see https://aka.ms/aspnetcore-template-3pn-210 for details.\r\n\r\nProcessing post-creation actions...\r\nRunning 'dotnet restore' on mvcapp/mvcapp.csproj...\r\n  Restoring packages for /mvcapp/mvcapp.csproj...\r\n  Generating MSBuild file /mvcapp/obj/mvcapp.csproj.nuget.g.props.\r\n  Generating MSBuild file /mvcapp/obj/mvcapp.csproj.nuget.g.targets.\r\n  Restore completed in 6.68 sec for /mvcapp/mvcapp.csproj.\r\n\r\nRestore succeeded.\r\n\r\n\r\nreal    0m32.496s\r\nuser    0m35.820s\r\nsys     0m4.280s\r\nroot@416731f24915:/# cd mvcapp/\r\nroot@416731f24915:/mvcapp# time dotnet build\r\nMicrosoft (R) Build Engine version 15.8.138-preview+ge0cd4f1c1f for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  Restore completed in 524.78 ms for /mvcapp/mvcapp.csproj.\r\n/usr/share/dotnet/sdk/2.1.401-preview-009081/Sdks/Microsoft.NET.Sdk/targets/Microsoft.NET.RuntimeIdentifierInference.targets(143,5): message NETSDK1057: You are working with a preview version of the .NET Core SDK. You can define the SDK version via a global.json file in the current project. More at https://go.microsoft.com/fwlink/?linkid=869452 [/mvcapp/mvcapp.csproj]\r\n  mvcapp -> /mvcapp/bin/Debug/netcoreapp2.1/mvcapp.dll\r\n  mvcapp -> /mvcapp/bin/Debug/netcoreapp2.1/mvcapp.Views.dll\r\n\r\nBuild succeeded.\r\n    0 Warning(s)\r\n    0 Error(s)\r\n\r\nTime Elapsed 00:02:09.15\r\n\r\nreal    2m13.377s\r\nuser    1m25.260s\r\nsys     0m9.420s\r\nroot@416731f24915:/mvcapp#\r\n```\r\n\r\n### .NET Core 2.1 SDK image before this change\r\n\r\n```console\r\npi@raspberrypi:~ $ docker run -it --rm microsoft/dotnet:2.1-sdk\r\nroot@9d1d5e45df6a:/# time dotnet new mvc -o mvcapp\r\nGetting ready...\r\nThe template \"ASP.NET Core Web App (Model-View-Controller)\" was created successfully.\r\nThis template contains technologies from parties other than Microsoft, see https://aka.ms/aspnetcore-template-3pn-210 for details.\r\n\r\nProcessing post-creation actions...\r\nRunning 'dotnet restore' on mvcapp/mvcapp.csproj...\r\n  Restoring packages for /mvcapp/mvcapp.csproj...\r\n  Installing System.Xml.XmlSerializer 4.3.0.\r\n  Installing System.Threading.Tasks.Extensions 4.0.0.\r\n  Installing System.Globalization.Extensions 4.0.1.\r\n  Installing runtime.native.System.Security.Cryptography 4.0.0.\r\n  Installing System.Security.Cryptography.OpenSsl 4.0.0.\r\n  Installing System.Security.Cryptography.Cng 4.2.0.\r\n  Installing System.Security.Cryptography.Csp 4.0.0.\r\n  Installing runtime.native.System.Net.Http 4.0.1.\r\n  Installing runtime.native.System 4.0.0.\r\n  Installing runtime.native.System.IO.Compression 4.1.0.\r\n  Installing System.Buffers 4.0.0.\r\n  Installing System.Private.DataContractSerialization 4.3.0.\r\n  Installing System.Security.Principal 4.3.0.\r\n  Installing runtime.osx.10.10-x64.runtime.native.System.Security.Cryptography.Apple 4.3.0.\r\n  Installing runtime.rhel.7-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing runtime.ubuntu.14.04-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing runtime.opensuse.42.1-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.NETCore.App 2.1.0.\r\n  Installing runtime.ubuntu.16.10-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.AspNetCore.App 2.1.1.\r\n  Installing runtime.ubuntu.16.04-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.NETCore.Platforms 2.1.0.\r\n  Installing Microsoft.NETCore.Targets 2.1.0.\r\n  Installing NETStandard.Library 2.0.3.\r\n  Installing Microsoft.NETCore.DotNetHostPolicy 2.1.0.\r\n  Installing Microsoft.AspNetCore 2.1.1.\r\n  Installing Microsoft.AspNetCore.Antiforgery 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Localization 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Session 2.1.1.\r\n  Installing Microsoft.AspNetCore.SpaServices 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.KeyPerFile 2.1.1.\r\n  Installing Microsoft.Extensions.FileProviders.Abstractions 2.1.1.\r\n  Installing Microsoft.Extensions.Hosting 2.1.1.\r\n  Installing Microsoft.Extensions.FileProviders.Embedded 2.1.1.\r\n  Installing Microsoft.Extensions.FileProviders.Physical 2.1.1.\r\n  Installing Microsoft.Extensions.Localization 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.Cookies 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.Core 2.1.1.\r\n  Installing runtime.osx.10.10-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.AspNetCore.Authentication.Google 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.Facebook 2.1.1.\r\n  Installing Microsoft.Extensions.Hosting.Abstractions 2.1.1.\r\n  Installing runtime.opensuse.13.2-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.AspNetCore.HttpsPolicy 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.MicrosoftAccount 2.1.1.\r\n  Installing Microsoft.Extensions.Http 2.1.1.\r\n  Installing Microsoft.AspNetCore.MiddlewareAnalysis 2.1.1.\r\n  Installing Microsoft.Extensions.FileSystemGlobbing 2.1.1.\r\n  Installing Microsoft.Extensions.DiagnosticAdapter 2.1.0.\r\n  Installing Microsoft.Extensions.Identity.Core 2.1.1.\r\n  Installing Microsoft.Extensions.Identity.Stores 2.1.1.\r\n  Installing Microsoft.Extensions.Options.ConfigurationExtensions 2.1.1.\r\n  Installing Microsoft.Extensions.Localization.Abstractions 2.1.1.\r\n  Installing Microsoft.Extensions.Logging.Abstractions 2.1.1.\r\n  Installing runtime.fedora.24-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.Extensions.Options 2.1.1.\r\n  Installing Microsoft.Extensions.FileProviders.Composite 2.1.1.\r\n  Installing Microsoft.Extensions.Logging 2.1.1.\r\n  Installing Microsoft.Extensions.Logging.Configuration 2.1.1.\r\n  Installing Microsoft.Extensions.Logging.TraceSource 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.UserSecrets 2.1.1.\r\n  Installing Microsoft.Extensions.Logging.Debug 2.1.1.\r\n  Installing Microsoft.Extensions.Logging.Console 2.1.1.\r\n  Installing Microsoft.Extensions.DependencyInjection 2.1.1.\r\n  Installing Microsoft.Extensions.ObjectPool 2.1.1.\r\n  Installing runtime.debian.8-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.Extensions.DependencyInjection.Abstractions 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.Binder 2.1.1.\r\n  Installing runtime.fedora.23-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.Extensions.Configuration.EnvironmentVariables 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.FileExtensions 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.Abstractions 2.1.1.\r\n  Installing Microsoft.Extensions.Caching.Memory 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.CommandLine 2.1.1.\r\n  Installing Microsoft.Extensions.Caching.Abstractions 2.1.1.\r\n  Installing Microsoft.Net.Http.Headers 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.InMemory 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.Abstractions 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.Ini 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.Analyzers 2.1.1.\r\n  Installing Microsoft.AspNetCore.StaticFiles 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.Relational 2.1.1.\r\n  Installing Microsoft.AspNetCore.Server.Kestrel.Https 2.1.1.\r\n  Installing Microsoft.Extensions.Primitives 2.1.1.\r\n  Installing Microsoft.AspNetCore.SpaServices.Extensions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Server.Kestrel 2.1.1.\r\n  Installing Microsoft.Extensions.WebEncoders 2.1.1.\r\n  Installing Microsoft.AspNetCore.WebUtilities 2.1.1.\r\n  Installing Microsoft.AspNetCore.SignalR 1.0.1.\r\n  Installing Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets 2.1.1.\r\n  Installing Microsoft.AspNetCore.Routing 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.Tools 2.1.1.\r\n  Installing Microsoft.AspNetCore.Routing.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Rewrite 2.1.1.\r\n  Installing Microsoft.AspNetCore.ResponseCaching.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Server.Kestrel.Transport.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.ResponseCaching 2.1.1.\r\n  Installing Microsoft.AspNetCore.ResponseCompression 2.1.1.\r\n  Installing System.Globalization.Extensions 4.3.0.\r\n  Installing Microsoft.AspNetCore.Razor.Language 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.TagHelpers 2.1.1.\r\n  Installing Microsoft.AspNetCore.Razor.Runtime 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.RazorPages 2.1.1.\r\n  Installing Microsoft.AspNetCore.Owin 2.1.1.\r\n  Installing Microsoft.AspNetCore.Razor 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Razor.Extensions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Razor.ViewCompilation 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Analyzers 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Localization 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Formatters.Json 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.Design 2.1.1.\r\n  Installing Microsoft.AspNetCore.WebSockets 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Cors 2.1.1.\r\n  Installing System.Diagnostics.DiagnosticSource 4.3.0.\r\n  Installing Microsoft.AspNetCore.Mvc.DataAnnotations 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.ApiExplorer 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Formatters.Xml 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc 2.1.1.\r\n  Installing Microsoft.Extensions.Logging.EventSource 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.OAuth 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.Json 2.1.1.\r\n  Installing Microsoft.AspNetCore.SignalR.Protocols.Json 1.0.1.\r\n  Installing Microsoft.AspNetCore.NodeServices 2.1.1.\r\n  Installing Microsoft.AspNetCore.SignalR.Common 1.0.1.\r\n  Installing Microsoft.AspNetCore.JsonPatch 2.1.1.\r\n  Installing Microsoft.AspNetCore.Localization.Routing 2.1.1.\r\n  Installing Microsoft.AspNetCore.Server.IISIntegration 2.1.1.\r\n  Installing Microsoft.AspNetCore.Identity.UI 2.1.1.\r\n  Installing Microsoft.AspNetCore.Razor.Design 2.1.1.\r\n  Installing Microsoft.AspNetCore.Identity.EntityFrameworkCore 2.1.1.\r\n  Installing Microsoft.AspNetCore.Http.Extensions 2.1.1.\r\n  Installing Microsoft.AspNetCore.HttpOverrides 2.1.1.\r\n  Installing Microsoft.AspNetCore.Identity 2.1.1.\r\n  Installing Microsoft.AspNetCore.Http.Features 2.1.1.\r\n  Installing Microsoft.AspNetCore.Http.Connections 1.0.1.\r\n  Installing Microsoft.AspNetCore.Http.Connections.Common 1.0.1.\r\n  Installing Microsoft.AspNetCore.Http 2.1.1.\r\n  Installing Microsoft.AspNetCore.Diagnostics.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Cors 2.1.1.\r\n  Installing Microsoft.AspNetCore.Hosting.Server.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Http.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.DataProtection.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Hosting.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Diagnostics.EntityFrameworkCore 2.1.1.\r\n  Installing Microsoft.AspNetCore.Cryptography.Internal 2.1.1.\r\n  Installing Microsoft.AspNetCore.Cryptography.KeyDerivation 2.1.1.\r\n  Installing Microsoft.AspNetCore.DataProtection.Extensions 2.1.1.\r\n  Installing Microsoft.AspNetCore.HostFiltering 2.1.1.\r\n  Installing Microsoft.CSharp 4.0.1.\r\n  Installing Microsoft.AspNetCore.CookiePolicy 2.1.1.\r\n  Installing Microsoft.AspNetCore.Server.Kestrel.Core 2.1.1.\r\n  Installing Microsoft.AspNetCore.Html.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.Twitter 2.1.1.\r\n  Installing Microsoft.AspNetCore.Connections.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authorization.Policy 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authorization 2.1.1.\r\n  Installing Microsoft.AspNetCore.Diagnostics 2.1.1.\r\n  Installing Microsoft.AspNetCore.Server.HttpSys 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.Xml 2.1.1.\r\n  Installing Microsoft.AspNetCore.Hosting 2.1.1.\r\n  Installing Microsoft.AspNetCore.DataProtection 2.1.1.\r\n  Installing Microsoft.Extensions.Caching.SqlServer 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.SqlServer 2.1.1.\r\n  Installing Microsoft.AspNet.WebApi.Client 5.2.6.\r\n  Installing Microsoft.AspNetCore.SignalR.Core 1.0.1.\r\n  Installing Microsoft.AspNetCore.Mvc.ViewFeatures 2.1.1.\r\n  Installing Microsoft.CodeAnalysis.Razor 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.JwtBearer 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.OpenIdConnect 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Razor 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.WsFederation 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore 2.1.1.\r\n  Installing System.Runtime.Serialization.Primitives 4.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Core 2.1.1.\r\n  Installing System.Xml.ReaderWriter 4.0.11.\r\n  Installing Microsoft.NETCore.DotNetHostResolver 2.1.0.\r\n  Installing System.Diagnostics.DiagnosticSource 4.5.0.\r\n  Installing System.ComponentModel.Annotations 4.5.0.\r\n  Installing System.Buffers 4.5.0.\r\n  Installing System.Memory 4.5.1.\r\n  Installing System.Runtime.CompilerServices.Unsafe 4.5.1.\r\n  Installing System.Text.Encodings.Web 4.5.0.\r\n  Installing Microsoft.CSharp 4.5.0.\r\n  Installing System.Net.WebSockets.WebSocketProtocol 4.5.1.\r\n  Installing Newtonsoft.Json 11.0.2.\r\n  Installing System.IO.Pipelines 4.5.0.\r\n  Installing System.Numerics.Vectors 4.5.0.\r\n  Installing System.Security.Principal.Windows 4.5.0.\r\n  Installing System.Threading.Tasks.Extensions 4.5.1.\r\n  Installing System.Security.Cryptography.Cng 4.5.0.\r\n  Installing System.Net.Http 4.1.0.\r\n  Installing System.Security.Cryptography.Xml 4.5.0.\r\n  Installing Microsoft.Win32.Registry 4.5.0.\r\n  Installing System.Reflection.Metadata 1.6.0.\r\n  Installing System.Data.SqlClient 4.5.1.\r\n  Installing Newtonsoft.Json.Bson 1.0.1.\r\n  Installing Newtonsoft.Json 10.0.1.\r\n  Installing System.Threading.Channels 4.5.0.\r\n  Installing System.Reflection.Emit 4.3.0.\r\n  Installing Microsoft.CodeAnalysis.CSharp 2.8.0.\r\n  Installing Microsoft.CodeAnalysis.Common 2.8.0.\r\n  Installing System.Security.Cryptography.Algorithms 4.2.0.\r\n  Installing Microsoft.IdentityModel.Protocols.OpenIdConnect 5.2.0.\r\n  Installing System.IdentityModel.Tokens.Jwt 5.2.0.\r\n  Installing Microsoft.IdentityModel.Protocols.WsFederation 5.2.0.\r\n  Installing System.Collections.Immutable 1.5.0.\r\n  Installing Remotion.Linq 2.2.0.\r\n  Installing System.Interactive.Async 3.1.1.\r\n  Installing Microsoft.Extensions.DependencyModel 2.1.0.\r\n  Installing Microsoft.NETCore.DotNetAppHost 2.1.0.\r\n  Installing Microsoft.NETCore.Platforms 2.0.0.\r\n  Installing System.Security.Cryptography.Pkcs 4.5.0.\r\n  Installing System.Security.Permissions 4.5.0.\r\n  Installing System.Security.AccessControl 4.5.0.\r\n  Installing NETStandard.Library 1.6.1.\r\n  Installing System.Text.Encoding.CodePages 4.5.0.\r\n  Installing System.Linq 4.3.0.\r\n  Installing runtime.native.System.Data.SqlClient.sni 4.4.0.\r\n  Installing System.Diagnostics.Debug 4.3.0.\r\n  Installing System.Globalization 4.3.0.\r\n  Installing System.IO 4.3.0.\r\n  Installing System.Collections 4.3.0.\r\n  Installing System.Runtime.Serialization.Primitives 4.3.0.\r\n  Installing System.Runtime.Serialization.Formatters 4.3.0.\r\n  Installing System.Xml.XmlDocument 4.3.0.\r\n  Installing System.Threading 4.3.0.\r\n  Installing System.Resources.ResourceManager 4.3.0.\r\n  Installing System.Text.Encoding.Extensions 4.3.0.\r\n  Installing System.Xml.XDocument 4.3.0.\r\n  Installing System.Threading.Tasks 4.3.0.\r\n  Installing System.Linq.Expressions 4.3.0.\r\n  Installing System.Runtime.Numerics 4.3.0.\r\n  Installing System.Text.Encoding 4.3.0.\r\n  Installing System.Reflection.Extensions 4.3.0.\r\n  Installing System.Text.RegularExpressions 4.3.0.\r\n  Installing System.Runtime.Extensions 4.3.0.\r\n  Installing System.Reflection 4.3.0.\r\n  Installing System.ObjectModel 4.3.0.\r\n  Installing System.Dynamic.Runtime 4.3.0.\r\n  Installing System.Xml.ReaderWriter 4.3.0.\r\n  Installing Microsoft.CSharp 4.3.0.\r\n  Installing System.ComponentModel.TypeConverter 4.3.0.\r\n  Installing System.Runtime 4.3.0.\r\n  Installing System.Reflection.Emit.ILGeneration 4.3.0.\r\n  Installing System.Reflection.Primitives 4.3.0.\r\n  Installing System.AppContext 4.3.0.\r\n  Installing System.Console 4.3.0.\r\n  Installing System.Collections.Concurrent 4.3.0.\r\n  Installing System.Diagnostics.Tools 4.3.0.\r\n  Installing System.Security.Cryptography.Encoding 4.0.0.\r\n  Installing System.IO.Compression 4.3.0.\r\n  Installing System.IO.FileSystem 4.3.0.\r\n  Installing System.IO.FileSystem.Primitives 4.3.0.\r\n  Installing System.Security.Cryptography.Encoding 4.3.0.\r\n  Installing System.Collections.Immutable 1.3.1.\r\n  Installing System.Runtime.InteropServices 4.3.0.\r\n  Installing System.Security.Cryptography.X509Certificates 4.1.0.\r\n  Installing System.Diagnostics.StackTrace 4.3.0.\r\n  Installing System.Reflection.Metadata 1.4.2.\r\n  Installing System.Threading.Thread 4.3.0.\r\n  Installing Microsoft.CodeAnalysis.Analyzers 1.1.0.\r\n  Installing System.Security.Cryptography.X509Certificates 4.3.0.\r\n  Installing System.ValueTuple 4.3.0.\r\n  Installing System.Diagnostics.FileVersionInfo 4.3.0.\r\n  Installing System.Threading.Tasks.Parallel 4.3.0.\r\n  Installing System.Security.Cryptography.Algorithms 4.3.0.\r\n  Installing System.Xml.XPath.XDocument 4.3.0.\r\n  Installing System.Text.Encoding.CodePages 4.3.0.\r\n  Installing System.Runtime.InteropServices 4.1.0.\r\n  Installing Microsoft.IdentityModel.Protocols 5.2.0.\r\n  Installing Microsoft.IdentityModel.Tokens 5.2.0.\r\n  Installing Microsoft.IdentityModel.Xml 5.2.0.\r\n  Installing System.Diagnostics.Debug 4.0.11.\r\n  Installing System.Reflection.Extensions 4.0.1.\r\n  Installing Microsoft.IdentityModel.Tokens.Saml 5.2.0.\r\n  Installing System.Runtime.Extensions 4.1.0.\r\n  Installing System.Threading 4.0.11.\r\n  Installing System.Collections 4.0.11.\r\n  Installing System.Reflection 4.1.0.\r\n  Installing System.ObjectModel 4.0.12.\r\n  Installing System.Linq 4.1.0.\r\n  Installing System.Linq.Queryable 4.0.1.\r\n  Installing System.Linq.Expressions 4.1.0.\r\n  Installing System.Runtime 4.1.0.\r\n  Installing NETStandard.Library 1.6.0.\r\n  Installing System.Dynamic.Runtime 4.0.11.\r\n  Installing Newtonsoft.Json 9.0.1.\r\n  Installing Microsoft.DotNet.PlatformAbstractions 2.1.0.\r\n  Installing System.Runtime.CompilerServices.Unsafe 4.5.0.\r\n  Installing runtime.win-x64.runtime.native.System.Data.SqlClient.sni 4.4.0.\r\n  Installing runtime.win-x86.runtime.native.System.Data.SqlClient.sni 4.4.0.\r\n  Installing runtime.win-arm64.runtime.native.System.Data.SqlClient.sni 4.4.0.\r\n  Installing Microsoft.NETCore.Platforms 1.1.0.\r\n  Installing Microsoft.Win32.Primitives 4.3.0.\r\n  Installing System.Net.Sockets 4.3.0.\r\n  Installing System.Diagnostics.Tracing 4.3.0.\r\n  Installing System.IO.Compression.ZipFile 4.3.0.\r\n  Installing System.Globalization.Calendars 4.3.0.\r\n  Installing System.Threading.Timer 4.3.0.\r\n  Installing System.Security.Cryptography.Primitives 4.3.0.\r\n  Installing System.Runtime.InteropServices.RuntimeInformation 4.0.0.\r\n  Installing System.Runtime.Handles 4.3.0.\r\n  Installing System.Runtime.InteropServices.RuntimeInformation 4.3.0.\r\n  Installing System.Net.Http 4.3.0.\r\n  Installing Microsoft.NETCore.Targets 1.1.0.\r\n  Installing System.Net.Primitives 4.3.0.\r\n  Installing System.Reflection.Emit.Lightweight 4.3.0.\r\n  Installing System.Reflection.TypeExtensions 4.3.0.\r\n  Installing System.Threading.Tasks.Extensions 4.3.0.\r\n  Installing System.ComponentModel 4.3.0.\r\n  Installing System.ComponentModel.Primitives 4.3.0.\r\n  Installing System.Collections.NonGeneric 4.3.0.\r\n  Installing System.Collections.Specialized 4.3.0.\r\n  Installing runtime.native.System 4.3.0.\r\n  Installing runtime.native.System.IO.Compression 4.3.0.\r\n  Installing System.Buffers 4.3.0.\r\n  Installing runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing runtime.native.System.Net.Http 4.3.0.\r\n  Installing System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing System.Security.Cryptography.Cng 4.3.0.\r\n  Installing System.Security.Cryptography.Csp 4.3.0.\r\n  Installing runtime.native.System.Security.Cryptography.Apple 4.3.0.\r\n  Installing System.Xml.XPath 4.3.0.\r\n  Installing Microsoft.IdentityModel.Logging 5.2.0.\r\n  Installing System.Diagnostics.Contracts 4.3.0.\r\n  Installing System.Runtime.Serialization.Xml 4.3.0.\r\n  Installing Microsoft.NETCore.Platforms 1.0.1.\r\n  Installing Microsoft.NETCore.Targets 1.0.1.\r\n  Installing System.Security.Claims 4.3.0.\r\n  Installing System.Reflection.Primitives 4.0.1.\r\n  Installing System.IO 4.1.0.\r\n  Installing System.Globalization 4.0.11.\r\n  Installing System.Threading.Tasks 4.0.11.\r\n  Installing System.Resources.ResourceManager 4.0.1.\r\n  Installing System.Reflection.Emit 4.0.1.\r\n  Installing System.Reflection.TypeExtensions 4.1.0.\r\n  Installing System.Reflection.Emit.ILGeneration 4.0.1.\r\n  Installing System.Reflection.Emit.Lightweight 4.0.1.\r\n  Installing System.AppContext 4.1.0.\r\n  Installing System.Collections.Concurrent 4.0.12.\r\n  Installing System.IO.FileSystem.Primitives 4.0.1.\r\n  Installing System.Runtime.Numerics 4.0.1.\r\n  Installing System.Security.Cryptography.Primitives 4.0.0.\r\n  Installing System.Xml.XDocument 4.0.11.\r\n  Installing System.Text.RegularExpressions 4.1.0.\r\n  Installing Microsoft.Win32.Primitives 4.0.1.\r\n  Installing System.Console 4.0.0.\r\n  Installing System.Diagnostics.Tools 4.0.1.\r\n  Installing System.Diagnostics.Tracing 4.1.0.\r\n  Installing System.Globalization.Calendars 4.0.1.\r\n  Installing System.IO.FileSystem 4.0.1.\r\n  Installing System.Net.Sockets 4.1.0.\r\n  Installing System.Text.Encoding 4.0.11.\r\n  Installing System.Threading.Timer 4.0.1.\r\n  Installing System.Net.Primitives 4.0.11.\r\n  Installing System.Runtime.Handles 4.0.1.\r\n  Installing System.Text.Encoding.Extensions 4.0.11.\r\n  Installing System.IO.Compression.ZipFile 4.0.1.\r\n  Installing System.IO.Compression 4.1.0.\r\n  Generating MSBuild file /mvcapp/obj/mvcapp.csproj.nuget.g.props.\r\n  Generating MSBuild file /mvcapp/obj/mvcapp.csproj.nuget.g.targets.\r\n  Restore completed in 44.04 sec for /mvcapp/mvcapp.csproj.\r\n\r\nRestore succeeded.\r\n\r\n\r\nreal    1m8.386s\r\nuser    1m8.010s\r\nsys     0m18.190s\r\nroot@9d1d5e45df6a:/# cd mvcapp/\r\nroot@9d1d5e45df6a:/mvcapp# time dotnet build\r\nMicrosoft (R) Build Engine version 15.7.179.6572 for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  Restore completed in 557.76 ms for /mvcapp/mvcapp.csproj.\r\n  mvcapp -> /mvcapp/bin/Debug/netcoreapp2.1/mvcapp.dll\r\n  mvcapp -> /mvcapp/bin/Debug/netcoreapp2.1/mvcapp.Views.dll\r\n\r\nBuild succeeded.\r\n    0 Warning(s)\r\n    0 Error(s)\r\n\r\nTime Elapsed 00:02:07.34\r\n\r\nreal    2m11.716s\r\nuser    1m22.990s\r\nsys     0m8.880s\r\nroot@9d1d5e45df6a:/mvcapp#\r\n```\r\n","Url":"https://github.com/dotnet/announcements/issues/80","RelatedDescription":"Closed issue \"Improving Performance of ARM32 Docker Images with .NET Core Package Cache\" (#80)"},{"Id":"350233220","IsPullRequest":false,"CreatedAt":"2018-08-13T23:50:57","Actor":"richlander","Number":"81","RawContent":null,"Title":"Advisory serializing/deserializing a CultureAwareComparer with .NET Framework 4.6+","State":"open","Body":"# Advisory serializing/deserializing a CultureAwareComparer with .NET Framework 4.6+\r\n\r\nAn [issue with serializing/deserializing a CultureAwareComparer](https://github.com/Microsoft/dotnet/blob/master/releases/net471/KnownIssues/521954%20-%20BCL%20CultureAwareComparer%20with%20ignore%20casing%20on%20serialized%20on%20previous%20versions%20of%20.NET%20do%20not%20correctly%20deserialize%20on%20.NET%204.7.1.md) was discovered with [.NET Framework 4.7.1](https://blogs.msdn.microsoft.com/dotnet/2017/10/17/announcing-the-net-framework-4-7-1/). This issue was resolved earlier this year, with the [May 2018 Preview of Quality Rollup](https://blogs.msdn.microsoft.com/dotnet/2018/05/15/net-framework-may-2018-preview-of-quality-rollup/). We recently learned that some applications, including Johnson Controls’ C-CURE 9000 Software, were negatively impacted by this change as this update requires all client and server workstations to be updated simultaneously with the appropriate Microsoft updates. The changes made to .NET Framework 4.7.1 were also integrated into .NET Framework 4.6 and later servicing releases. As a result, this advisory applies to .NET Framework 4.6 and later versions.\r\n\r\nThis advisory is provided so that developers can correctly diagnose this issue and be aware of our guidance. We will continue to update this issue as we have new information to share.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [microsoft/dotnet #832](https://github.com/Microsoft/dotnet/issues/832)\r\n\r\n## Guidance\r\n\r\nThis guidance only applies to customers that have experienced this issue.\r\n\r\nWe have released [an update for .NET Framework 4.6](https://blogs.msdn.microsoft.com/dotnet/2018/08/30/net-framework-august-2018-preview-of-quality-rollup/) and later that resolves the issue. **You must deploy the .NET Framework update for this issue to all .NET Framework 4.6+ machines that communicate via serialized objects**. After doing that, cross-machine serialization will work as expected. \r\n \r\nPlease consult your software vendor to understand if this impacts the software you are using.\r\n\r\n## Technical Context\r\n\r\nIn the [May 2018 Preview of Quality Rollup](https://blogs.msdn.microsoft.com/dotnet/2018/05/15/net-framework-may-2018-preview-of-quality-rollup/), we made a change to the internal type CultureAwareComparer to implement ISerializable. We made the change in order to address [issue with serializing/deserializing a CultureAwareComparer](https://github.com/Microsoft/dotnet/blob/master/releases/net471/KnownIssues/521954%20-%20BCL%20CultureAwareComparer%20with%20ignore%20casing%20on%20serialized%20on%20previous%20versions%20of%20.NET%20do%20not%20correctly%20deserialize%20on%20.NET%204.7.1.md).\r\n\r\nThe issue reported was that a type that contains an instance of CultureAwareComparer was not able to correctly serialize and deserialize across different versions of the .NET Framework. There are a few types in .NET Framework that do this, the most commonly impacted one being the Dictionary<TKey, TValue> type.\r\n \r\nThe change to implement the ISerializable interface had unintended side effects when exchanging this type across different machines. We have had a small number of reports from customers who have been affected.\r\n\r\nA common, but not unique way, of exchanging objects across machines is to use WCF in conjunction with a serializer. One of the common serializers being DataContractSerializer. The side-effect of the change prevented data serialized on systems where the type implements ISerializable to correctly deserialize of systems where the type does NOT implement ISerializable. The same is true of the opposite case, that systems where the type does not implement ISerializable will not correctly deserialize data from systems where the type does implement ISerializable.\r\n\r\nWe have an updated fix that we intend to release within the next month that will remove the implementation of the ISerializable interface on the type and use a different internal mechanism for ensuring the cross-version serialization continues to work as expected. This change addresses the break experienced with WCF.\r\n\r\nThe upcoming fix will remove the implementation of the ISerializable interface on the type and use a different mechanism for ensuring the cross-version serialization of that type continues to work. This change addresses the break experienced with WCF.\r\n\r\n## Symptoms\r\n\r\nAn application that is affected by this issue will most likely crash when trying to deserialize an object. It may print or log an error message similar to the following one:\r\n\r\n```\r\nThe formatter threw an exception while trying to deserialize the message: \r\nThere was an error while trying to deserialize parameter . The InnerException message was ''EndElement' 'Comparer' from namespace '' is not expected. Expecting element '_compareInfo'.'.  Please see InnerException for more details.\r\n```\r\n","Url":"https://github.com/dotnet/announcements/issues/81","RelatedDescription":"Open issue \"Advisory serializing/deserializing a CultureAwareComparer with .NET Framework 4.6+\" (#81)"},{"Id":"348162872","IsPullRequest":false,"CreatedAt":"2018-08-07T04:26:40","Actor":"richlander","Number":"79","RawContent":null,"Title":"August 2018 .NET Updates","State":"open","Body":"# August 2018 .NET Updates\r\n\r\nThe following .NET updates were released in August 2018. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Framework \r\n\r\n* [August 2018 .NET Framework Security and Quality Rollup - August 14, 2018](https://blogs.msdn.microsoft.com/dotnet/2018/08/14/august-2018-security-and-quality-rollup/)\r\n* [Advisory serializing/deserializing a CultureAwareComparer with .NET Framework 4.6+](https://github.com/dotnet/announcements/issues/81)\r\n* [Advisory on July 2018 .NET Framework Updates](https://blogs.msdn.microsoft.com/dotnet/2018/07/20/advisory-on-july-2018-net-framework-updates/)\r\n* [August 2018 Preview of Quality Rollup - August 30, 2018](https://blogs.msdn.microsoft.com/dotnet/2018/08/30/net-framework-august-2018-preview-of-quality-rollup/)\r\n\r\n## .NET Core\r\n\r\n* [.NET Core August 2018 Update - August 21, 2018](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.3/2.1.3.md)\r\n* [.NET Core 2.1.400 SDK Update - August 14, 2018](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.400-SDK/2.1.400-sdk.md)\r\n\r\n## End of Support for Operating System Versions\r\n\r\n.NET Core does not support systems that are out of support. The following operating systems are now out of support. To stay supported, move to a [later version of the given operating system](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md).\r\n\r\n* [Debian 8 -- Jessie](https://lists.debian.org/debian-security-announce/2018/msg00132.html)\r\n* [Ubuntu 17.10 -- Artful Aardvark](https://lists.ubuntu.com/archives/ubuntu-announce/2018-July/000232.html)\r\n\r\nSee [Debian Jessie End of Life -- Impact on .NET Core Docker Images](https://github.com/dotnet/announcements/issues/78)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)","Url":"https://github.com/dotnet/announcements/issues/79","RelatedDescription":"Open issue \"August 2018 .NET Updates\" (#79)"},{"Id":"348161534","IsPullRequest":false,"CreatedAt":"2018-08-07T04:18:01","Actor":"richlander","Number":"78","RawContent":null,"Title":"Debian Jessie End of Life -- Impact on .NET Core Docker Images","State":"open","Body":"# Debian Jessie End of Life -- Impact on .NET Core Docker Images\r\n\r\nDebian Jessie (AKA Debian 8) is now [out of support](https://lists.debian.org/debian-security-announce/2018/msg00132.html). Debian Jessie is no longer a supported operating system for .NET Core. Docker users need to switch to Debian Stretch-based (AKA Debian 9) images to stay in support.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet/dotnet-docker #647](https://github.com/dotnet/dotnet-docker/issues/647)\r\n\r\n## Context\r\n\r\nJessie-based images are currently provided for .NET Core 1.0, 1.1 and 2.0. .NET Core 1.0 and 1.1 expose multi-arch tags, such as `1.0-runtime` and `1.1-sdk`, that support Debian Jessie. When pulled for a Linux Docker daemon (on Linux or Windows), these tags pull Jessie-based images. .NET Core 2.0 supports Jessie, but it is not the default. .NET Core 2.0 multi-arch tags, such as `2.0-runtime` and `2.0-sdk`, pull Debian Stretch-based images, when pulled for a Linux Docker daemon. We made a conscious decision with .NET Core 2.0 to move off of Jessie as the default to avoid this problem, based the Jessie 2018 EOL date. .NET Core 2.1 does not support Jessie, only Stretch.\r\n\r\nWe recently posted about our policy for underlying operating system dependencies with Docker:\r\n\r\n> For each major and minor .NET version, we may take a new major operating system version dependency. As I mentioned earlier, we adopted Debian 9 as the base image for .NET Core 2.0. We stayed with Debian 9 for .NET Core 2.1, since Debian 10 (AKA “Buster”) has not been released. Debian 9 will remain the default base image for .NET Core 2.1 for the life of .NET Core 2.1. **Once we adopt an underlying operating system major version, we will not change it for the life of that given .NET release.**\r\n\r\nSource: https://blogs.msdn.microsoft.com/dotnet/2018/06/18/staying-up-to-date-with-net-container-images/\r\n\r\n## Plan\r\n\r\nWe will continue to re-build .NET Core 1.0 and 1.1 multi-arch tags on top of Jessie for the remaining [supported lifetime of .NET Core 1.0 and 1.1](https://github.com/dotnet/core/blob/master/microsoft-support.md). We will also provide a Stretch-based image for .NET Core 1.1. This tag will look like the following: `1.1-runtime-stretch` or `1.1.9-sdk-stretch`. This is same format that Jessie has used.\r\n\r\nWe will produce Jessie-based images for NET Core 2.0 until October 2018, which is when [.NET Core 2.0 support ends](https://github.com/dotnet/core/blob/master/microsoft-support.md). .NET Core 2.0 multi-arch tags support Debian Stretch, not Jessie, as described above.\r\n\r\nIn summary, .NET Core is no longer supported on Debian Jessie, with Docker or otherwise. We will produce Docker images for Jessie until .NET Core 1.0, 1.1 and 2.0 support ends, respectively, to avoid breaking applications. This aligns with the policy defined above, per [Staying up-to-date with .NET Container Images](https://blogs.msdn.microsoft.com/dotnet/2018/06/18/staying-up-to-date-with-net-container-images/).\r\n\r\n## Affected Repos\r\n\r\n* [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/)\r\n* [microsoft/dotnet-nightly](https://hub.docker.com/r/microsoft/dotnet-nightly/)\r\n* [microsoft/aspnetcore](https://hub.docker.com/r/microsoft/aspnetcore/)\r\n* [microsoft/aspnetcore-build](https://hub.docker.com/r/microsoft/aspnetcore-build/)","Url":"https://github.com/dotnet/announcements/issues/78","RelatedDescription":"Open issue \"Debian Jessie End of Life -- Impact on .NET Core Docker Images\" (#78)"},{"Id":"345028102","IsPullRequest":false,"CreatedAt":"2018-07-26T22:31:32","Actor":"leecow","Number":"77","RawContent":null,"Title":"https://dot.net now using TLS 1.2-only","State":"open","Body":"Earlier today, https://dot.net switched to using TLS 1.2-only. Most Windows Powershell instances default to TLS 1.1 and will thus fail with `wget : The underlying connection was closed: An unexpected error occurred on a send. trying to run the previous command.`\r\n\r\nAn example of a PowerShell script fix can be seen in https://github.com/dotnet/docs/pull/6689","Url":"https://github.com/dotnet/announcements/issues/77","RelatedDescription":"Open issue \"https://dot.net now using TLS 1.2-only\" (#77)"},{"Id":"343360319","IsPullRequest":false,"CreatedAt":"2018-07-21T22:29:05","Actor":"richlander","Number":"76","RawContent":null,"Title":"July 2018 .NET Updates","State":"open","Body":"# July 2018 .NET Updates\r\n\r\nThe following .NET updates were released in June 2018. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Framework \r\n\r\n* [.NET Framework 4.7.2 is available on Windows Update, WSUS and MU Catalog](https://blogs.msdn.microsoft.com/dotnet/2018/07/10/net-framework-4-7-2-is-available-on-windows-update-wsus-and-mu-catalog/)\r\n* [Announcing .NET Framework 4.8 Early Access build 3632](https://blogs.msdn.microsoft.com/dotnet/2018/07/18/announcing-net-framework-4-8-early-access-build-3632/)\r\n* [Advisory on July 2018 .NET Framework Updates](https://blogs.msdn.microsoft.com/dotnet/2018/07/20/advisory-on-july-2018-net-framework-updates/)\r\n* [.NET Framework July 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/07/30/net-framework-july-2018-update/)\r\n\r\n## .NET Core\r\n\r\n* [.NET Core July 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/07/10/net-core-july-2018-update/)\r\n\r\n## .NET Core Support Policies\r\n\r\n* [Microsoft Support for .NET Core](https://github.com/dotnet/core/blob/master/microsoft-support.md)\r\n* [.NET Core Supported OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)\r\n* [April 2018](https://github.com/dotnet/announcements/issues/64)\r\n","Url":"https://github.com/dotnet/announcements/issues/76","RelatedDescription":"Open issue \"July 2018 .NET Updates\" (#76)"},{"Id":"343360017","IsPullRequest":false,"CreatedAt":"2018-07-21T22:22:25","Actor":"richlander","Number":"75","RawContent":null,"Title":"June 2018 .NET Updates","State":"open","Body":"# June 2018 .NET Updates\r\n\r\nThe following .NET updates were released in June 2018.\r\n\r\n## .NET Framework \r\n\r\n* [.NET Framework June 2018 Security and Quality Rollup](https://blogs.msdn.microsoft.com/dotnet/2018/06/13/net-framework-june-2018-security-and-quality-rollup/)\r\n* [Announcing .NET Framework 4.8 Early Access build 3621!](https://blogs.msdn.microsoft.com/dotnet/2018/06/06/announcing-net-framework-4-8-early-access-build-3621/)\r\n\r\n## .NET Core\r\n\r\n* [.NET Core 2.1 June Update](https://blogs.msdn.microsoft.com/dotnet/2018/06/22/net-core-2-1-june-update/)\r\n* [.NET Core 2.0 will reach End of Life on October 1, 2018](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/)\r\n* [.NET Core 1.0 and 1.1 EOL Dates Documented](https://github.com/dotnet/core/blob/master/microsoft-support.md)\r\n\r\n## Previous Updates\r\n\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)\r\n* [April 2018](https://github.com/dotnet/announcements/issues/64)\r\n* [February 2018](https://github.com/dotnet/announcements/issues/59)","Url":"https://github.com/dotnet/announcements/issues/75","RelatedDescription":"Open issue \"June 2018 .NET Updates\" (#75)"},{"Id":"343283437","IsPullRequest":false,"CreatedAt":"2018-07-21T00:56:48","Actor":"richlander","Number":"74","RawContent":null,"Title":"Advisory on July 2018 .NET Framework Updates","State":"open","Body":"# Advisory on July 2018 .NET Framework Updates\r\n\r\nUpdated: 08/14/2018\r\n\r\n> A new [.NET Framework August 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/08/14/august-2018-security-and-quality-rollup/) has been released that **resolves this advisory for all supported Windows versions**.\r\n\r\n~~A new [.NET Framework July 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/07/30/net-framework-july-2018-update/) has been released that resolves this advisory. See Guidance section.~~\r\n\r\n~~Guidance has changed for Windows 7, Windows Server 2008 and Windows Server 2008 R2. See Guidance section.~~\r\n\r\nThe [July 2018 Security and Quality Rollup updates for .NET Framework](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2018-8356) was released earlier this month. We have received multiple customer reports of [applications that fail to start or don't run correctly](https://support.microsoft.com/en-us/help/4345913) after installing the July 2018 update. These reports are specific to applications that initialize a COM component and run with restricted permissions.\r\n\r\nWe have stopped distributing the .NET Framework July 2018 updates on Windows Update and are actively working on fixing and re-shipping this month's updates. If you installed the July 2018 update and have not yet seen any negative behavior, we recommend that you leave your systems as-is but closely monitor them and ensure that you apply upcoming .NET Framework updates.\r\n\r\nAs a team, we regret that this release was shipped with this flaw. This release was tested using our regular and extensive testing process. We discovered while investigating this issue that we have a test hole for the specific combination of COM activation and restricted permissions, including impersonation. We will be mitigating that gap going forward. Again, we are sorry for any inconvenience that this product flaw has caused.\r\n\r\nWe will continue to update this issue and [post](https://blogs.msdn.microsoft.com/dotnet/2018/07/20/advisory-on-july-2018-net-framework-updates/) as we have new information.\r\n\r\n## Discussion\r\nPlease share your thoughts/experience on this advisory and see what others are saying at:\r\n\r\n* [microsoft/dotnet #811](https://github.com/Microsoft/dotnet/issues/811)\r\n\r\n## Guidance\r\n\r\nWe strongly recommend that you install [.NET Framework August 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/08/14/august-2018-security-and-quality-rollup/).\r\n\r\n~~We recommend that you install [.NET Framework July 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/07/30/net-framework-july-2018-update/) on your systems if you experienced the symptoms described in this advisory. If you did not experience these symptoms, we recommend you wait to update your machines until the next regular update, in August.~~\r\n\r\n~~On Windows 7, Windows Server 2008, and Windows Server 2008 R2, we have found that the combination of [July 2018 Security and Quality Rollup updates for .NET Framework](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2018-8356) and  [.NET Framework July 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/07/30/net-framework-july-2018-update/) do not resolve all symptoms. On these Windows versions, if you are experiencing these symptoms after installing this combination of patches, we recommend that you uninstall (only) the Monthly Rollup patch and then install the appropriate Security Only patch listed at [July 2018 Security and Quality Rollup updates for .NET Framework](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2018-8356).~~\r\n\r\n## Technical Context\r\n\r\nThe .NET Framework runtime uses the process token to determine whether the process is being run within an elevated context. These system calls can fail if the required process inspection permissions are not present. This causes an “access denied\" error.\r\n\r\n## Symptoms\r\n\r\nA COM component fails to load because of “access denied,” “class not registered,” or “internal failure occurred for unknown reasons” errors. \r\n\r\nThe most commonly reported failure results in the following error message:\r\n\r\n```console\r\nException type: System.UnauthorizedAccessException\r\nMessage: Access is denied. (Exception from HRESULT: 0x80070005 (E_ACCESSDENIED))\r\n```\r\n\r\n### Sharepoint\r\n\r\nWhen users browse to a SharePoint site they may see the following HTTP 403 message:\r\n\r\n```console\r\n\"The Web Site declined to show this webpage\"\r\n```\r\n\r\nThe SharePoint ULS Logs will contain a message like the following:  \r\n\r\n```console\r\nw3wp.exe (0x1894)         0x0B94  SharePoint Foundation  General 0000       High                UnauthorizedAccessException for the request. 403 Forbidden will be returned. Error=An error occurred creating the configuration section handler for system.serviceModel/extensions: Could not load file or assembly <AssemblySignature>  or one of its dependencies. Access is denied. (C:\\Windows\\Microsoft.NET\\Framework64\\v2.0.50727\\Config\\machine.config line 180)    \r\n\r\nw3wp.exe (0x1894)         0x0B94  SharePoint Foundation  General b6p2      VerboseEx                Sending HTTP response 403:403 FORBIDDEN.      \r\n\r\nw3wp.exe (0x1894)         0x0B94  SharePoint Foundation  General 8nca       Verbose                Application error when access /, Error=Access is denied. (Exception from HRESULT: 0x80070005 (E_ACCESSDENIED))\r\n```\r\n\r\nWhen crawling a people content source, the request may fail with the following entry logged to the SharePoint ULS Log: \r\n\r\n```console\r\nmssearch.exe (0x118C) 0x203C SharePoint Server Search Crawler:Gatherer Plugin cd11 Warning The start address sps3s://<URLtoSite> cannot be crawled.  Context: Application 'Search_Service_Application', Catalog 'Portal_Content'  Details:  Class not registered   (0x80040154)  \r\n\r\nIIS Hosted Classic ASP calling CreateObject for .NET COM objects may receive error \"ActiveX component can't create object\" \r\n\r\n.NET Application creates instance of .NET COM application within an Impersonation Context may receive error \"0x80040154 (REGDB_E_CLASSNOTREG)\"\r\n```\r\n\r\n### BizTalk Server Administration Console\r\n\r\nBizTalk Server Administration Console fails to launch properly with the following errors: \r\n\r\n```console\r\nAn internal failure occurred for unknown reasons. (WinMgmt) \r\n\r\nProgram Location:  \r\n\r\n   at System.Runtime.InteropServices.Marshal.ThrowExceptionForHRInternal(Int32 errorCode, IntPtr errorInfo) \r\n\r\n   at System.Management.ManagementObject.Get() \r\n\r\n   at Microsoft.BizTalk.SnapIn.Framework.WmiProvider.SelectInstance\r\n```\r\n\r\n> Warning: The following workarounds may make a computer or a network more vulnerable to attack by malicious users or by malicious software such as viruses. We do not recommend these workarounds but are providing this information so that you can implement the workarounds at your own discretion. Use these workarounds at your own risk.\r\n\r\nUse the following guidance as a workaround:\r\n\r\n* Add “NETWORK SERVICE” to the local Administrators group. \r\n\r\n### IIS with Classic ASP\r\n\r\nIIS Hosted Classic ASP calling CreateObject for .NET COM objects may receive the following error: \"ActiveX component can't create object\". Use the following guidance as a workaround.\r\n\r\n* If your web site uses Anonymous Authentication, change the Web Site Anonymous Authentication credentials to use the \"Application pool identity\"\r\n* If your site uses Basic Authentication, log into the application once as the application pool identity and then create an instance of the .NET COM component. All subsequent activations for that .NET COM component should succeed, for any user.\r\n\r\n### .NET applications using COM and impersonation\r\n\r\n.NET Applications that creates instances of .NET COM application within an Impersonation Context may receive the following error: \"0x80040154 (REGDB_E_CLASSNOTREG)\". Use the following guidance as a workaround.\r\n\r\n* Create an instance of the .NET COM component prior to the impersonation context call. Later impersonated create instance calls should work as expected.\r\n* Run the .NET Application in the context of the impersonated user\r\n* Avoid using Impersonation when creating the .NET COM object","Url":"https://github.com/dotnet/announcements/issues/74","RelatedDescription":"Open issue \"Advisory on July 2018 .NET Framework Updates\" (#74)"},{"Id":"339929129","IsPullRequest":false,"CreatedAt":"2018-07-10T17:00:37","Actor":"blowdart","Number":"73","RawContent":null,"Title":"Microsoft Security Advisory CVE-2018-8356: .NET Core Security Feature Bypass Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-8356: .NET Core Security Feature Bypass Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a security feature bypass vulnerability that exists when .NET Core does not correctly validate certificates. An attacker who successfully exploited this vulnerability could present an expired certificate when challenged.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core applications handle certificate validation.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/wcf/issues/3009\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\n* If an application does not use Windows Communication Foundation you are not affected.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core, or ASP.NET Core based application that uses System.Private.ServiceModel with a version of 4.5.1 or earlier.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ---------------- | -------------------------\r\nSystem.Private.ServiceModel | 4.0.0, 4.1.0, 4.1.1 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 |  4.1.3 or later <br /> 4.3.3 or later <br /> 4.4.4 or later <br /> 4.5.3 or later\r\nSystem.ServiceModel.Duplex | 4.0.0, 4.0.1, 4.0.2 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 | 4.0.4 or later <br /> 4.3.3 or later <br /> 4.443 or later <br /> 4.5.3 or later\r\nSystem.ServiceModel.Http | 4.0.0, 4.0.10, 4.1.0, 4.1.1 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 | 4.1.3 or later <br /> 4.3.3 or later <br /> 4.4.4 or later <br /> 4.5.3 or later\r\nSystem.ServiceModel.NetTcp | 4.0.0, 4.1.0, 4.1.1 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 | 4.1.3 or later <br /> 4.3.3 or later <br /> 4.4.4 or later <br /> 4.5.3 or later\r\nSystem.ServiceModel.Primitives | 4.0.0, 4.1.0, 4.1.1 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 | 4.1.2 or later <br /> 4.3.3 or later <br /> 4.4.4 or later <br /> 4.5.3 or later\r\nSystem.ServiceModel.Security | 4.0.0, 4.0.1, 4.0.2 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 | 4.0.4 or later <br /> 4.3.3 or later <br /> 4.4.4 or later <br /> 4.5.3 or later\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n.NET Core projects have two types of dependencies: direct and transitive. You must update your projects using the following instructions to address both types of dependency.\r\n\r\n### <a name=\"project-format\"></a>.NET Core Project formats\r\n\r\n.NET Core has two different project file formats, depending on what software created the project.\r\n\r\n1. `project.json` is the format used in .NET Core 1.0 and Microsoft Visual Studio 2015.\r\n2. `csproj` is the format used in .NET Core 1.1, .NET Core 2.0 and Microsoft Visual Studio 2017.\r\n\r\n#### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file or your `project.json` file. They can be fixed by [editing the project file](#direct-dependencies) or using NuGet to update the dependency.\r\n\r\n The `System.Private.ServiceModel` package is not meant to be directly depended on and will not appear in your direct dependency list.\r\n\r\n#### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in three ways, depending on your [project format](#project-format):\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects *OR*.\r\n* By examining the `project.lock.json` file contained in the root directory of your project for `project.json` based projects.\r\n\r\nThe `project.assets.json` and `project.lock.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\n#### <a name=\"direct-dependencies-vs2017\"></a>Fixing direct dependencies in a csproj based project / Visual Studio 2017\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.ServiceModel.Http\" Version=\"4.4.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.ServiceModel.Http` version 4.4.0.\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.ServiceModel.Http` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.ServiceModel.Http\" Version=\"4.4.3\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"direct-dependencies-vs2015\"></a> Fixing Direct Dependencies in project.json based project / Visual Studio 2015\r\n\r\nOpen your `project.json` file in your editor. Look for the dependencies section. Below is an example dependencies section:\r\n\r\n``` json\r\n    \"dependencies\": {\r\n      \"Microsoft.NETCore.App\": {\r\n        \"version\": \"1.0.1\",\r\n        \"type\": \"platform\"\r\n      },\r\n     \"Microsoft.AspNetCore.Mvc.Core\": \"1.0.6\",\r\n     \"System.ServiceModel.Http\" : \"4.0.0\"\r\n    }\r\n```\r\n\r\nThis example has three direct dependencies: `Microsoft.NETCore.App`, `Microsoft.AspNetCore.Mvc.Core` and `System.ServiceModel.Http`.\r\n\r\n`Microsoft.NetCore.App` is the platform the application targets, you should ignore this. The other packages expose their version to the right of the package name. In our example, our non-platform packages are version 1.0.1.\r\n\r\nReview your direct dependencies for any instance of the packages and versions listed above. In the example above, there is a direct dependency on a vulnerable package, `System.ServiceModel.Http` version 4.4.0.\r\n\r\nTo update to the fixed package, change the version number to be the appropriate package for your release. In the example, this would be updating `System.ServiceModel.Http` to 4.4.3.\r\n\r\nAfter updating the vulnerable package versions, save your `project.json` file.\r\n\r\nThe dependencies section in our example `project.json` would now look as follows:\r\n\r\n```json\r\n  \"dependencies\": {\r\n    \"Microsoft.NETCore.App\": {\r\n      \"version\": \"1.0.1\",\r\n      \"type\": \"platform\"\r\n    },\r\n    \"Microsoft.AspNetCore.Mvc.Core\": \"1.0.6\",\r\n    \"System.ServiceModel.Http \": \"4.4.3\"\r\n  }\r\n```\r\n\r\nIf you are using Visual Studio and save your updated `project.json` file, Visual Studio will restore the new package version. You can see the restore results by opening the Output Window (Ctrl+Alt+O) and changing the Show output from drop-down list to Package Manager.\r\n\r\nIf you are not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore your new dependency.\r\n\r\nAfter you have addressed all of your direct dependencies, you must also review your transitive dependencies.\r\n\r\nAfter you've addressed all of your direct dependencies, you must review your transitive dependencies.\r\n\r\n#### Discovering and fixing transitive dependencies\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json) or the [the `project.lock.json` file](#project-lock-json).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json (csproj/VS2017)\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `System.ServiceModel.Http/4.3.0` is a reference to version 4.3.0 of `System.ServiceModel.Http`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.ServiceModel.Http\" Version=\"4.3.2\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n##### <a name=\"project-lock-json\"></a> Manually reviewing project.lock.json (project.json/VS2015)\r\n\r\nOpen the `project.lock.json` file in your editor. We suggest you use an editor that understands json and allows you to collapse and expand nodes to review this file; both Visual Studio and Visual Studio Code provide this functionality.\r\n\r\nIf you are using Visual Studio the `project.lock.json` file is “under” the `project.json` file. Click the right pointing triangle, ▷, to the left of the `project.json` file to expand the solution tree to expose the `project.lock.json` file. The following image shows a project with the `project.json` file expanded to show the `project.lock.json` file.\r\n\r\n![project lock json](https://cloud.githubusercontent.com/assets/796298/25858179/f6e01200-348f-11e7-8a77-7176d8dd3f03.png)\r\n\r\nSearch the `project.lock.json` file for the vulnerable packages, using the format `packagename/`, using each of the package names from the table above. If you find any vulnerable assembly name in your search examine the line on which they are found, the version number is after the `/` and compare to the vulnerable versions table above. For example a search result that shows `System.ServiceModel.Http/4.0.1` is a reference to v4.0.1 of `System.ServiceModel.Http`.   If your `project.lock.json` file includes references to any of the package versions shown above then you will need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to a vulnerable version of `System.ServiceModel.Http` this means none of your direct dependencies depend on any vulnerable packages or you have already fixed the problem by updating the direct dependencies.\r\n\r\nIf your transitive dependency review found references to any of the vulnerable packages you must add a direct dependency to the updated package to your `project.json` file to override the transitive dependency. Open your `project.json` and find the dependencies section. For example:\r\n\r\n``` json\r\n  \"dependencies\": {\r\n    \"Microsoft.NETCore.App\": {\r\n      \"version\": \"1.0.1\",\r\n      \"type\": \"platform\"\r\n    },\r\n    \"Microsoft.AspNetCore.Mvc\": \"1.0.0\"\r\n  }\r\n```\r\n\r\nFor each of the vulnerable packages your search returned you must add a direct dependency to the updated version by adding it to the `project.json` file. You do this by adding a new line to the dependencies section, referring the fixed version. For example, if your search showed a transitive reference to the vulnerable `System.ServiceModel.Http` version 1.0.0 you would add a reference to the appropriate fixed version, 1.0.6. Edit the `project.json` file as follows:\r\n\r\n``` json\r\n  \"dependencies\": {\r\n    \"Microsoft.NETCore.App\": {\r\n      \"version\": \"1.0.1\",\r\n      \"type\": \"platform\"\r\n    },\r\n    \"System.ServiceModel.Http\": \"4.1.2\",\r\n    \"Microsoft.AspNetCore.Mvc\": \"1.0.0\"\r\n  }\r\n```\r\n\r\nAfter you have added direct dependencies to the fixed packages, save your `project.json` file.\r\n\r\nIf you are using Visual Studio save your updated `project.json` file and Visual Studio will restore the new package versions. You can see the restore results by opening the Output Window (Ctrl+Alt+O) and changing the Show output from drop-down list to Package Manager.\r\n\r\nIf you are not using Visual Studio open a command line and change to your project directory. Execute the `dotnet restore` command to restore your new dependencies.\r\n\r\n#### Rebuilding your application\r\n\r\nFinally you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2018-8356](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-CVE-2018-8356)\r\n\r\n### Revisions\r\n\r\nV1.1 (July 23, 2018): Updated package versions, as some assemblies were released unsigned.\r\nV1.0 (July 10, 2018): Advisory published.\r\n\r\n_Version 1.1_\r\n\r\n_Last Updated 2018-07-23_\r\n","Url":"https://github.com/dotnet/announcements/issues/73","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2018-8356: .NET Core Security Feature Bypass Vulnerability\" (#73)"},{"Id":"329614193","IsPullRequest":false,"CreatedAt":"2018-06-05T20:33:10","Actor":"huanwu","Number":"72","RawContent":null,"Title":"Introducing dotnet-svcutil.xmlserializer for .NET Core","State":"open","Body":"# Introducing dotnet-svcutil.xmlserializer for .NET Core\r\nOn the full .NET Framework you are able to pre-generate a serialization assembly using the tool svcutil. We are providing similar functionality on .NET Core by releasing the dotnet-svcutil.xmlserializer NuGet package. It pre-generates c# serialization code for the types used by WCF Service Contract in the client applications that can be serialized using the XmlSerializer to improve the startup performance of Xml Serialization when serializing or de-serializing objects of those types using XmlSerializer. \r\nYou can start using the tool today by following the [instructions](https://github.com/dotnet/core/blob/master/samples/dotnet-svcutil.xmlserializer-instructions.md). \r\n\r\n## Discussion \r\nPlease share with us any thoughts of questions that you may have at: \r\n\r\n- dotnet/wcf [#2927](https://github.com/dotnet/wcf/issues/2927)\r\n## Details \r\nWhen to use XmlSerializer with WCF in an app to serialize contract data types, it will generate an XmlSerializer during runtime to do the serialization. You can improve the startup performance of Xml serialization by simply adding the reference of dotnet-svcutil.xmlserializer NuGet package to your project. This tool will generate the serialization code and compile it into an assembly next to your output assembly at build time in advance. This assembly can then be deployed and ran with your application. \r\n\r\nPlease create an issue with your feedback at [dotnet/wcf](https://github.com/dotnet/wcf/issues). We are actively looking to improve the tool and your input is a valuable part of the process. ","Url":"https://github.com/dotnet/announcements/issues/72","RelatedDescription":"Open issue \"Introducing dotnet-svcutil.xmlserializer for .NET Core\" (#72)"},{"Id":"327817883","IsPullRequest":false,"CreatedAt":"2018-05-30T17:02:38","Actor":"MichaelSimons","Number":"71","RawContent":null,"Title":".NET Core 2.1 Docker Image Updates","State":"open","Body":"# .NET Core 2.1 Docker Image Updates\r\n\r\nWe have consolidating the set of Docker Hub repositories that we use for .NET Core and ASP.NET Core. We will use [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/) as the only repository that we publish to for .NET Core 2.1 and later releases.\r\n\r\nWe added a set of environment variables to .NET Core images to make it easier to host ASP.NET Core sites at any .NET Core image layer and to enable `dotnet watch` in SDK container images without additional configuration.\r\n\r\nAlpine and ARM32 image variants have been added and are supported.\r\n\r\n[.NET Core Docker Samples](https://github.com/dotnet/dotnet-docker/blob/master/samples/README.md) have been moved to the [dotnet/dotnet-docker](https://github.com/dotnet/dotnet-docker) repo. The samples have been updated for .NET Core 2.1. New samples have been added, including [Hosting ASP.NET Core Images with Docker over HTTPS](https://github.com/dotnet/dotnet-docker/blob/master/samples/aspnetapp/aspnetcore-docker-https.md).\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet/dotnet-docker #560](https://github.com/dotnet/dotnet-docker/issues/560)\r\n\r\n## Details\r\n\r\nThe following changes have been made as part of the .NET Core 2.1 release.\r\n\r\n### Repo consolidation\r\n\r\n.NET Core and ASP.NET Core images will be published to the [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/) Docker Hub repo for .NET Core 2.1 and later releases. Co-location of images improves image discovery. The .NET Core runtime and SDK images are already co-located. We are adding the ASP.NET Core runtime images to the [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/) repo as a third image type. We are [no longer producing the microsoft/aspnetcore-build image](https://github.com/aspnet/Announcements/issues/298) with .NET Core 2.1.\r\n\r\nThe following three tags are now available at the [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/) repo:\r\n\r\n* `2.1-sdk`\r\n* `2.1-aspnetcore-runtime`\r\n* `2.1-runtime`\r\n\r\n### Environment variables enable new scenarios\r\n\r\nWe added a set of environment variables to .NET Core docker images, for .NET Core 2.1 and later. These environment variables enable more scenarios to work without additional configuration, such as [developing ASP.NET Core applications in a container](https://github.com/dotnet/dotnet-docker/blob/master/samples/aspnetapp/aspnet-docker-dev-in-container.md).\r\n\r\nNew sdk image environment variables ([example](https://github.com/dotnet/dotnet-docker/blob/master/2.1/sdk/bionic/amd64/Dockerfile#L28-L32))\r\n* `ASPNETCORE_URLS=http://+:80`\r\n* `DOTNET_RUNNING_IN_CONTAINER=true`\r\n* `DOTNET_USE_POLLING_FILE_WATCHER=true`\r\n\r\nNew Linux runtime-deps image environment variables ([example](https://github.com/dotnet/dotnet-docker/blob/master/2.1/runtime-deps/alpine3.7/amd64/Dockerfile#L19-L21))\r\n* `ASPNETCORE_URLS=http://+:80`\r\n* `DOTNET_RUNNING_IN_CONTAINER=true`\r\n\r\nNew Windows runtime image environment variables ([example](https://github.com/dotnet/dotnet-docker/blob/master/2.1/runtime/nanoserver-1709/amd64/Dockerfile#L33-L35))\r\n* `ASPNETCORE_URLS=http://+:80`\r\n* `DOTNET_RUNNING_IN_CONTAINER=true`\r\n\r\n### New image variants\r\n\r\nAlpine and ARM32 image variants have been added and are supported as part of the .NET Core 2.1 release. \r\n\r\nFor Alpine, you must [use specific tags to create Alpine-based images](https://github.com/dotnet/dotnet-docker/blob/master/samples/dotnetapp/README.md#build-and-run-the-sample-for-alpine-with-docker), such as `2.1-runtime-alpine`. \r\n\r\nFor ARM32, you can use the regular multi-arch tags, like `2.1-runtime` and `2.1-sdk` if you are building on an ARM32 device. If you are building on another type of machine, you need to use ARM32-specific tags for the runtime images you create, such as `2.1-runtime-bionic-arm32v7` (for Ubuntu 18.04).\r\n\r\n### Related repos\r\n\r\nThe following repos are related to this announcement:\r\n\r\n* [microsoft/aspnetcore](https://hub.docker.com/r/microsoft/aspnetcore/)\r\n* [microsoft/aspnetcore-build](https://hub.docker.com/r/microsoft/aspnetcore-build/)\r\n* [microsoft/dotnet/](https://hub.docker.com/r/microsoft/dotnet/)\r\n","Url":"https://github.com/dotnet/announcements/issues/71","RelatedDescription":"Open issue \".NET Core 2.1 Docker Image Updates\" (#71)"},{"Id":"325815293","IsPullRequest":false,"CreatedAt":"2018-05-23T18:04:46","Actor":"mlacouture","Number":"70","RawContent":null,"Title":"Introducing dotnet-svcutil","State":"open","Body":"# Introducing dotnet-svcutil\r\n\r\nThe Microsoft Windows Communication Foundation (WCF) **dotnet-svcutil** tool is a .NET Core CLI tool that retrieves metadata from a web service on a network location or from a WSDL file, and generates a WCF class containing client proxy methods that you can use to access the web service operations.\r\n\r\nSimilarly to the [Service Model Metadata - svcutil](https://docs.microsoft.com/en-us/dotnet/framework/wcf/servicemodel-metadata-utility-tool-svcutil-exe) tool for .NET Framework projects, the **dotnet-svcutil** is a command line tool for generating a web service reference compatible with .NET Core and .NET Standard projects. \r\n\r\nThe **dotnet-svcutil** tool is an alternative option to the [WCF Web Service Reference ](https://docs.microsoft.com/en-us/dotnet/core/additional-tools/wcf-web-service-reference-guide)Visual Studio connected service provider which first shipped with Visual Studio 2017 v15.5.  The **dotnet-svcutil** tool as a .NET Core CLI tool, however, can be run on multiple platforms like Linux and MacOS in addition to Windows.\r\n\r\n# Discussion\r\nPlease share your thoughts with us by commenting on GitHub issue dotnet/wcf#2894\r\n","Url":"https://github.com/dotnet/announcements/issues/70","RelatedDescription":"Open issue \"Introducing dotnet-svcutil\" (#70)"},{"Id":"321374728","IsPullRequest":false,"CreatedAt":"2018-05-08T22:56:33","Actor":"richlander","Number":"68","RawContent":null,"Title":"May 2018 .NET Updates","State":"open","Body":"# May 2018 .NET Updates\r\n\r\nThe following .NET updates were released this month. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Framework\r\n\r\n* [.NET Framework May 2018 Preview of Quality Rollup for Windows 10 April 2018 Update (version 1803)](https://blogs.msdn.microsoft.com/dotnet/2018/05/23/net-framework-may-2018-preview-of-quality-rollup-for-windows-10-april-2018-update-version-1803/)\r\n* [.NET Framework May 2018 Preview of Quality Rollup for Windows 10 1709 (Fall Creators Update)](https://blogs.msdn.microsoft.com/dotnet/2018/05/21/net-framework-may-2018-preview-of-quality-rollup-for-windows-10-1709-fall-creators-update/)\r\n* [.NET Framework May 2018 Security and Quality Rollup for Windows 10](https://blogs.msdn.microsoft.com/dotnet/2018/05/17/net-framework-may-2018-preview-of-quality-rollup-for-windows-10/)\r\n* [.NET Framework May 2018 Security and Quality Rollup](https://blogs.msdn.microsoft.com/dotnet/2018/05/08/net-framework-may-2018-security-and-quality-rollup/)\r\n* [microsoft/dotnet-framework](https://hub.docker.com/r/microsoft/dotnet-framework/) and related Docker images were updated for [Windows Server, version 1803](https://docs.microsoft.com/en-us/windows-server/get-started/get-started-with-1803).\r\n\r\n## .NET Core\r\n\r\n* [Announcing .NET Core 2.1](https://blogs.msdn.microsoft.com/dotnet/2018/05/30/announcing-net-core-2-1/)\r\n* [.NET Core May 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/05/08/net-core-may-2018-update/)\r\n* [.NET Core 2.1 RC1](https://blogs.msdn.microsoft.com/dotnet/2018/05/07/announcing-net-core-2-1-rc-1/)\r\n* [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/) and related Docker images were updated for [Windows Server, version 1803](https://docs.microsoft.com/en-us/windows-server/get-started/get-started-with-1803).\r\n\r\n## Previous Updates\r\n\r\n* [April 2018 .NET Updates](https://github.com/dotnet/announcements/issues/64)\r\n* [February 2018 Security and Quality Updates](https://github.com/dotnet/announcements/issues/59)","Url":"https://github.com/dotnet/announcements/issues/68","RelatedDescription":"Open issue \"May 2018 .NET Updates\" (#68)"},{"Id":"321269154","IsPullRequest":false,"CreatedAt":"2018-05-08T17:03:39","Actor":"blowdart","Number":"67","RawContent":null,"Title":"Microsoft Security Advisory CVE-2018-0765: .NET Core Denial Of Service Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-0765: .NET Core Denial Of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core and .NET native version 2.0. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a denial of service vulnerability that exists when .NET Framework and .NET Core improperly process XML documents. An attacker who successfully exploited this vulnerability could cause a denial of service against a .NET Framework, .NET Core, or .NET native application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Framework, .NET Core, and .NET native applications handle XML document processing.\r\n\r\nIf your application is an ASP.NET Core application, developers are also advised to update to [ASP.NET Core 2.0.8](https://www.nuget.org/packages/Microsoft.AspNetCore.All/2.0.8).\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/29578\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\n* If an application does not process signed XML, it is not affected by this vulnerability.\r\n* If your application targets .NET Core 1.x or .NET native 1.x, it is not affected as the vulnerable package is not available for these platforms.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core, .NET native, or ASP.NET Core based application that uses System.Security.Cryptography.Xml with a version of 4.4.1 or earlier.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ---------------- | -------------------------\r\nSystem.Security.Cryptography.Xml | ≤4.4.1 |  4.4.2 or later\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n.NET Core has two types of dependencies: direct and transitive. Direct dependencies are dependencies where you specifically add a package to your project, transitive dependencies occur when you add a package to your project that in turn relies on another package.\r\n\r\nFor example, the `Microsoft.AspNetCore.Mvc` package depends on the `Microsoft.AspNetCore.Mvc.Core` package. When you add a dependency on `Microsoft.AspNetCore.Mvc` in your project, you're taking a transitive dependency on `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\nAny application that has a direct or transitive dependency on the [affected package](#affected-software) can be exposed to the vulnerability if it does not meet any of the [mitigation factors](#mitigation-factors).\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n---\r\n\r\nIf you're targeting ASP.NET Core 2.0 and using the `Microsoft.AspNetCore.All` metapackage:\r\n\r\n* Update its version number to [2.0.8](https://www.nuget.org/packages/Microsoft.AspNetCore.All/2.0.8) to pull in updated packages that update their transitive dependencies to the fixed version of `System.Security.Cryptography.Xml`.\r\n\r\n---\r\n\r\n.NET Core projects have two types of dependencies: direct and transitive. You must update your projects using the following instructions to address both types of dependency.\r\n\r\n#### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your *csproj* file. They can be fixed by [editing the csproj file](#direct-dependencies) or using NuGet to update the dependency.\r\n\r\n#### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the *project.assets.json* file contained in the obj directory of your project.\r\n\r\nThe *project.assets.json* files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\n#### <a name=\"direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Security.Cryptography.Xml\" Version=\"4.4.1\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.Security.Cryptography.Xml` version 4.4.1.\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.Security.Cryptography.Xml` to a [fixed package number](#affected-software). Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Security.Cryptography.Xml\" Version=\"4.4.2\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\nAfter you've addressed all of your direct dependencies, you must review your transitive dependencies.\r\n\r\n#### Discovering and fixing transitive dependencies\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can [review the *project.assets.json* file](#project-assets-json).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio 2017, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a>Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `System.Security.Cryptography.Xml/4.4.0` is a reference to version 4.4.0 of `System.Security.Cryptography.Xml`.\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\n##### Fixing transitive dependencies\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.Security.Cryptography.Xml` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Security.Cryptography.Xml\" Version=\"4.4.2\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n#### Rebuilding your application\r\n\r\nFinally you must rebuild your application, test, and redeploy.\r\n\r\n---\r\n\r\nIf you're targeting .NET native for a Universal Windows Platform (UWP) application, you should update your dependencies and republish your application.\r\n\r\nIf you submit an application to the Windows Store with an outdated reference, the store will update the reference automatically, which has the potential for compatibility issues. Thus, we recommend updating your application directly and testing its functionality before resubmitting.\r\n\r\n---\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2018-0787](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-CVE-2018-0765)\r\n\r\n### Revisions\r\n\r\nV1.0 (May 8, 2018): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2018-05-08_","Url":"https://github.com/dotnet/announcements/issues/67","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2018-0765: .NET Core Denial Of Service Vulnerability\" (#67)"},{"Id":"319701474","IsPullRequest":false,"CreatedAt":"2018-05-02T20:31:57","Actor":"MichaelSimons","Number":"66","RawContent":null,"Title":".NET Framework Docker Samples have moved","State":"open","Body":"# .NET Framework Docker Samples have moved\r\nThe .NET Framework Docker samples have moved to the [samples folder of Microsoft/dotnet-framework-docker](https://github.com/Microsoft/dotnet-framework-docker/tree/master/samples).\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [Microsoft/dotnet-framework-docker #128](https://github.com/Microsoft/dotnet-framework-docker/issues/128)\r\n\r\n## Details\r\nThe .NET Framework Docker samples have been enhanced and moved to the [samples folder of Microsoft/dotnet-framework-docker](https://github.com/Microsoft/dotnet-framework-docker/tree/master/samples).\r\n\r\n- https://github.com/Microsoft/dotnet-framework-docker/pull/126\r\n- https://github.com/Microsoft/dotnet-framework-docker-samples/issues/22\r\n\r\nThe samples show various ways to use the .NET Framework and Docker together. You can use the samples as the basis of your own Docker images or just to play.\r\n\r\nThe samples exercise various levels of functionality. The [.NET Framework Docker sample](https://github.com/Microsoft/dotnet-framework-docker/blob/master/samples/dotnetapp/README.md) includes the most functionality, including build, unit testing, and pushing images to a container registry. The [ASP.NET Docker sample](https://github.com/Microsoft/dotnet-framework-docker/blob/master/samples/aspnetapp/README.md) includes instructions for testing images with [Azure Container Instances](https://azure.microsoft.com/services/container-instances/). The samples include detailed instructions for use with and without Docker.\r\n","Url":"https://github.com/dotnet/announcements/issues/66","RelatedDescription":"Open issue \".NET Framework Docker Samples have moved\" (#66)"}],"ResultType":"GitHubIssue"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1083419958153887750","CreatedAt":"2019-01-10T17:47:01+00:00","UserScreenname":"dotnet","Text":"Starting the .NET Open Source Revolution https://t.co/7Y7FfWTaY4","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":107,"FavoriteCount":45,"RawContent":null},{"Id":"1082818321353912320","CreatedAt":"2019-01-09T01:56:20+00:00","UserScreenname":"dotnet","Text":"Oopsie. Looks like @WhildyBeast executed\n\n$ dotnet clean https://t.co/gCte14spFY","Source":"<a href=\"http://twitter.com/download/iphone\" rel=\"nofollow\">Twitter for iPhone</a>","RetweetCount":29,"FavoriteCount":5,"RawContent":null},{"Id":"1082768839874535424","CreatedAt":"2019-01-08T22:39:42+00:00","UserScreenname":"dotnet","Text":"We just blogged about the .NET Framework January 2019 Security and Quality Rollup. https://t.co/XW8wiS0AIV","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":34,"FavoriteCount":17,"RawContent":null},{"Id":"1082649436851982337","CreatedAt":"2019-01-08T14:45:15+00:00","UserScreenname":"dotnet","Text":"In 15 minutes, join our @csharpfritz as he explores the @elgatogaming StreamDeck's new SDK and how to interact with… https://t.co/H2oVdzFOgr","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":42,"FavoriteCount":9,"RawContent":null},{"Id":"1081303837263069184","CreatedAt":"2019-01-04T21:38:19+00:00","UserScreenname":"dotnet","Text":"“Code is, in our not-so-humble opinion, the most inexhaustible source of magic.” https://t.co/HtYQeRiB8t","Source":"<a href=\"http://twitter.com/download/iphone\" rel=\"nofollow\">Twitter for iPhone</a>","RetweetCount":141,"FavoriteCount":31,"RawContent":null},{"Id":"1081214419672096768","CreatedAt":"2019-01-04T15:43:00+00:00","UserScreenname":"dotnet","Text":"In this On .NET episode we learn about XAML Islands and how to integrate UI components from the Universal Windows P… https://t.co/JMXJ3aoBsM","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":36,"FavoriteCount":18,"RawContent":null}]}},"RunOn":"2019-01-11T05:30:42.1273597Z","RunDurationInMilliseconds":17036}