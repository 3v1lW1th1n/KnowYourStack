{"Data":{"GitHub":{"Issues":[{"Id":"371076498","IsPullRequest":false,"CreatedAt":"2018-10-18T05:09:46","Actor":"rauhs","Number":"1279","RawContent":null,"Title":"Doc: PredictionEngine.Predict claims it creates a new object for each call.","State":"closed","Body":"In:\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/8e77d0f0ce74cdb8b10fa545830972a4525d5dab/src/Microsoft.ML.Api/PredictionEngine.cs#L201-L205\r\n\r\n> \"<returns>The result of prediction. A new object is created for every call.</returns>\"\r\n\r\nShouldn't this be the exact opposite? It's very confusing. IMO the docs & classes could need some more explanations.\r\n\r\n\r\nAlso, regarding: https://github.com/dotnet/machinelearning/blob/8cfa2ed503c1cca78972d79b393fbffe13bde173/docs/code/SchemaComprehension.md#predictionengine-and-predictormodel\r\n\r\nThis could probably use some guidlines. When to use PredictionEngine? When PredictionFunction? How to actually use BatchPredictionEngine? At first one thinks it's the same as PredictionEngine except that you can pass an IEnumerable. But not so. Very different API.\r\n\r\nIs there anything in the pipeline to clarify all this? Also how this all plays together with saving/loading a model would be nice.","Url":"https://github.com/dotnet/machinelearning/issues/1279","RelatedDescription":"Closed issue \"Doc: PredictionEngine.Predict claims it creates a new object for each call.\" (#1279)"},{"Id":"371333640","IsPullRequest":false,"CreatedAt":"2018-10-18T02:12:29","Actor":"artidoro","Number":"1295","RawContent":null,"Title":"Add x86 CI builds","State":"open","Body":"Currently, there is no CI build for x86. We should add Debug and Release builds for x86, and make sure that all tests succeed. This should involve changing the phase-template.yml.","Url":"https://github.com/dotnet/machinelearning/issues/1295","RelatedDescription":"Open issue \"Add x86 CI builds\" (#1295)"},{"Id":"371328436","IsPullRequest":true,"CreatedAt":"2018-10-18T01:41:56","Actor":"Ivanidzo4ka","Number":"1294","RawContent":null,"Title":"Convert CharTokenize to estimator","State":"open","Body":"Convert CharTokenize to estimator","Url":"https://github.com/dotnet/machinelearning/pull/1294","RelatedDescription":"Open PR \"Convert CharTokenize to estimator\" (#1294)"},{"Id":"371317165","IsPullRequest":true,"CreatedAt":"2018-10-18T00:35:18","Actor":"Zruty0","Number":"1293","RawContent":null,"Title":"PredictionFunction doesn't reuse output","State":"open","Body":"Fixes #1279 \r\nFixes #1138 \r\n\r\nPredict call no longer reuses the output object.\r\nTo retain the capability for efficient prediction, I added another overload to Predict which takes the output object as a parameter.","Url":"https://github.com/dotnet/machinelearning/pull/1293","RelatedDescription":"Open PR \"PredictionFunction doesn't reuse output\" (#1293)"},{"Id":"371316183","IsPullRequest":true,"CreatedAt":"2018-10-18T00:29:32","Actor":"helloguo","Number":"1292","RawContent":null,"Title":"Use FMA instruction in CpuMath for .NET Core 3","State":"open","Body":"Fix https://github.com/dotnet/machinelearning/issues/832\r\n\r\nTest with `..\\..\\Tools\\dotnetcli\\dotnet.exe run -c Release-Intrinsics --allCategories=Fma`\r\n\r\nBefore:\r\n\r\n```\r\n// * Summary *\r\n\r\nBenchmarkDotNet=v0.11.1, OS=Windows 10.0.17758\r\nIntel Core i9-7980XE CPU 2.60GHz (Max: 2.59GHz), 1 CPU, 36 logical and 18 physical cores\r\n.NET Core SDK=3.0.100-alpha1-009642\r\n  [Host] : .NET Core 3.0.0-preview1-27004-04 (CoreCLR 4.6.27003.04, CoreFX 4.6.27003.02), 64bit RyuJIT\r\n\r\nToolchain=InProcessToolchain  \r\n\r\n         Method |       Mean |      Error |     StdDev |     Median |\r\n--------------- |-----------:|-----------:|-----------:|-----------:|\r\n      AddScaleU |   271.8 us |  0.3131 us |  0.2614 us |   271.9 us |\r\n     AddScaleSU | 2,890.7 us | 35.0849 us | 32.8185 us | 2,896.3 us |\r\n  AddScaleCopyU |   396.8 us |  2.2882 us |  2.1404 us |   395.7 us |\r\n         SumSqU |   195.7 us |  0.3503 us |  0.3277 us |   195.6 us |\r\n     SumSqDiffU |   194.3 us |  0.3320 us |  0.2592 us |   194.2 us |\r\n           DotU |   268.2 us |  7.1498 us | 20.7429 us |   274.9 us |\r\n          DotSU | 2,355.5 us | 47.0184 us | 46.1783 us | 2,357.3 us |\r\n          Dist2 |   276.2 us |  0.5637 us |  0.5272 us |   276.3 us |\r\n  SdcaL1UpdateU |   481.4 us |  4.9104 us |  4.5932 us |   480.9 us |\r\n SdcaL1UpdateSU | 8,043.5 us | 44.7203 us | 39.6434 us | 8,030.6 us |\r\n        MatMulX |   137.2 us |  2.9038 us |  8.1903 us |   139.6 us |\r\n```\r\nAfter:\r\n\r\n```\r\n// * Summary *\r\n\r\nBenchmarkDotNet=v0.11.1, OS=Windows 10.0.17758\r\nIntel Core i9-7980XE CPU 2.60GHz (Max: 2.59GHz), 1 CPU, 36 logical and 18 physical cores\r\n.NET Core SDK=3.0.100-alpha1-009642\r\n  [Host] : .NET Core 3.0.0-preview1-27004-04 (CoreCLR 4.6.27003.04, CoreFX 4.6.27003.02), 64bit RyuJIT\r\n\r\nToolchain=InProcessToolchain  \r\n\r\n         Method |        Mean |      Error |     StdDev |      Median |\r\n--------------- |------------:|-----------:|-----------:|------------:|\r\n      AddScaleU |   273.38 us |  0.4326 us |  0.4046 us |   273.47 us |\r\n     AddScaleSU | 2,917.50 us | 33.6275 us | 31.4552 us | 2,911.38 us |\r\n  AddScaleCopyU |   393.58 us |  1.0500 us |  0.9822 us |   393.61 us |\r\n         SumSqU |   195.53 us |  1.6073 us |  1.5035 us |   194.86 us |\r\n     SumSqDiffU |   196.62 us |  0.1949 us |  0.1824 us |   196.59 us |\r\n           DotU |   198.04 us |  0.3970 us |  0.3713 us |   198.12 us |\r\n          DotSU | 2,337.79 us | 12.5178 us | 11.7092 us | 2,337.42 us |\r\n          Dist2 |   264.65 us |  7.0762 us | 19.7257 us |   271.17 us |\r\n  SdcaL1UpdateU |   481.08 us |  1.3783 us |  1.2218 us |   480.94 us |\r\n SdcaL1UpdateSU | 8,001.56 us | 28.4807 us | 26.6409 us | 7,990.17 us |\r\n        MatMulX |    96.01 us |  0.4207 us |  0.3729 us |    95.99 us |\r\n\r\n```\r\n\r\n@eerhardt @tannergooding PTAL","Url":"https://github.com/dotnet/machinelearning/pull/1292","RelatedDescription":"Open PR \"Use FMA instruction in CpuMath for .NET Core 3\" (#1292)"},{"Id":"371315938","IsPullRequest":true,"CreatedAt":"2018-10-18T00:28:01","Actor":"CESARDELATORRE","Number":"1291","RawContent":null,"Title":"ML.NET supports x64 bits, not any 64 bits","State":"open","Body":"I believe our native assemblies are only compiled for x64\r\ne.g. we don't support ARM64\r\nSo, we should say x64, not just 64 bits, right?\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/1291","RelatedDescription":"Open PR \"ML.NET supports x64 bits, not any 64 bits\" (#1291)"},{"Id":"371294227","IsPullRequest":true,"CreatedAt":"2018-10-17T22:40:33","Actor":"eerhardt","Number":"1290","RawContent":null,"Title":"Loading old model files is broken.","State":"open","Body":"Older model files are failing to load due to FpTail checks in the model validation code. These checks weren't happening in the old model loading code, and they now fail on some older models.\r\n\r\nFix this by returning early when it is an older model, and there are no strings. This preserves the old behavior.\r\n\r\nFix #1289\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/1290","RelatedDescription":"Open PR \"Loading old model files is broken.\" (#1290)"},{"Id":"371293099","IsPullRequest":false,"CreatedAt":"2018-10-17T22:35:38","Actor":"eerhardt","Number":"1289","RawContent":null,"Title":"Exception loading an older model file with no strings ","State":"open","Body":"When I changed our model format for the ComponentCatalog changes (#970), I refactored some model loading code incorrectly. There are some existing models that are breaking our validation checks:\r\n\r\nThe old code was doing:\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/655c2e29421f5c44133ed6515374e48cf42868a2/src/Microsoft.ML.Data/Model/ModelHeader.cs#L419-L424\r\n\r\nThe new code now does:\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/a44e131b8010024d024197db4cc22a546c554fdf/src/Microsoft.ML.Data/Model/ModelHeader.cs#L482-L486\r\n\r\nNotice that it doesn't return early in the new code. Lower in the method there are checks here:\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/a44e131b8010024d024197db4cc22a546c554fdf/src/Microsoft.ML.Data/Model/ModelHeader.cs#L538-L541\r\n\r\nThese checks are now failing with older model files. They were never run in the old code when there were no strings, so we shouldn't be running them anymore when reading older model files.\r\n\r\n/cc @yaeldekel ","Url":"https://github.com/dotnet/machinelearning/issues/1289","RelatedDescription":"Open issue \"Exception loading an older model file with no strings \" (#1289)"},{"Id":"371282969","IsPullRequest":false,"CreatedAt":"2018-10-17T21:56:57","Actor":"Zruty0","Number":"1288","RawContent":null,"Title":"Improve constructor for TextLoader","State":"open","Body":"We currently have \r\n```csharp\r\npublic TextLoader(IHostEnvironment env, Column[] columns, Action<Arguments> advancedSettings, IMultiStreamSource dataSample = null)\r\npublic TextLoader(IHostEnvironment env, Arguments args, IMultiStreamSource dataSample = null)\r\n```\r\nWe need to:\r\n1) Make the second constructor internal or private (it's used only by cmdline/dependency injection.\r\n2) Add 'separator chars' and 'has header' as non-advanced parameters\r\n\r\nThe first change will naturally trigger a lot of changes in the code that creates the `TextLoader`, this is by design.","Url":"https://github.com/dotnet/machinelearning/issues/1288","RelatedDescription":"Open issue \"Improve constructor for TextLoader\" (#1288)"},{"Id":"371282185","IsPullRequest":false,"CreatedAt":"2018-10-17T21:54:09","Actor":"Zruty0","Number":"1287","RawContent":null,"Title":"LocalEnvironment to stop being IDisposable","State":"open","Body":"The only reason we have `IHostEnvironment` as an `IDisposable` is because we clean up the temp files created using `CreateTempFile`. This functionality is not really very useful. We should remove the functionality, remove the `IDisposable` and fix all the `using` calls in the codebase (preferably to just `new MLContext`, if possible)","Url":"https://github.com/dotnet/machinelearning/issues/1287","RelatedDescription":"Open issue \"LocalEnvironment to stop being IDisposable\" (#1287)"},{"Id":"371280045","IsPullRequest":false,"CreatedAt":"2018-10-17T21:46:51","Actor":"Zruty0","Number":"1286","RawContent":null,"Title":"`MLContext.Model.Save` should accept statically typed models too","State":"open","Body":"Add an extension method in `Microsoft.ML.StaticPipe` for that","Url":"https://github.com/dotnet/machinelearning/issues/1286","RelatedDescription":"Open issue \"`MLContext.Model.Save` should accept statically typed models too\" (#1286)"},{"Id":"371265784","IsPullRequest":true,"CreatedAt":"2018-10-17T21:02:54","Actor":"Ivanidzo4ka","Number":"1285","RawContent":null,"Title":"Convert WordTokenize to estimator","State":"open","Body":"Convert WordTokenize to estimator","Url":"https://github.com/dotnet/machinelearning/pull/1285","RelatedDescription":"Open PR \"Convert WordTokenize to estimator\" (#1285)"},{"Id":"371019572","IsPullRequest":true,"CreatedAt":"2018-10-17T20:26:38","Actor":"ewanboyd","Number":"1278","RawContent":null,"Title":"Release/preview","State":"closed","Body":"We are excited to review your PR.\r\n\r\nSo we can do the best job, please check:\r\n\r\n- [ ] There's a descriptive title that will make sense to other developers some time from now. \r\n- [ ] There's associated issues. All PR's should have issue(s) associated - unless a trivial self-evident change such as fixing a typo. You can use the format `Fixes #nnnn` in your description to cause GitHub to automatically close the issue(s) when your PR is merged.\r\n- [ ] Your change description explains what the change does, why you chose your approach, and anything else that reviewers should know.\r\n- [ ] You have included any necessary tests in the same PR.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/1278","RelatedDescription":"Closed or merged PR \"Release/preview\" (#1278)"},{"Id":"371217003","IsPullRequest":false,"CreatedAt":"2018-10-17T18:46:34","Actor":"eerhardt","Number":"1284","RawContent":null,"Title":"Make ConsoleEnvironment internal","State":"open","Body":"We don't expect external users to use the `ConsoleEnvironment` class. It should only be used for the command line tool.\r\n\r\nWe should make this class internal so it isn't part of our public API. That way we don't need to support it as a public API forever.\r\n\r\nSee https://github.com/dotnet/machinelearning/pull/1252#discussion_r225986842\r\n\r\n/cc @Zruty0 @TomFinley ","Url":"https://github.com/dotnet/machinelearning/issues/1284","RelatedDescription":"Open issue \"Make ConsoleEnvironment internal\" (#1284)"},{"Id":"371205197","IsPullRequest":false,"CreatedAt":"2018-10-17T18:16:19","Actor":"wschin","Number":"1283","RawContent":null,"Title":"Support Key Types in Input Data Structures of Prediction Function","State":"open","Body":"Key types currently are not supported in input data structure of a prediction function ([an example](https://github.com/dotnet/machinelearning/blob/23659b013eb2d0233cd92072f32a6daddfe613e3/test/Microsoft.ML.Benchmarks/PredictionEngineBench.cs#L19) of prediction function). However, for recommender systems like matrix factorization, we have user and item IDs which are input keys. Do you have any plan to support key-typed input data structures?","Url":"https://github.com/dotnet/machinelearning/issues/1283","RelatedDescription":"Open issue \"Support Key Types in Input Data Structures of Prediction Function\" (#1283)"},{"Id":"371199117","IsPullRequest":false,"CreatedAt":"2018-10-17T17:59:37","Actor":"justinormont","Number":"1282","RawContent":null,"Title":"Update build script and/or instructions to check for libomp on OS X","State":"open","Body":"### System information\r\n\r\n- **OS version/distro**: OS X 10.12.6\r\n\r\n### Issue\r\nLightGBM fails to run on OS X unless `libomp` is installed. \r\n\r\nA change 6 days ago added the requirement for `libomp` and we haven't updated the build instructions or build script.\r\n\r\nError:\r\n```\r\nUnexpected exception: Unable to load shared library 'lib_lightgbm' or one of its dependencies. In order to help diagnose loading problems, consider setting the DYLD_PRINT_LIBRARIES environment variable: dlopen(liblib_lightgbm, 1): image not found, 'System.DllNotFoundException'\r\n   at Microsoft.ML.Runtime.LightGBM.WrappedLightGbmInterface.DatasetCreateFromSampledColumn(IntPtr sampleValuePerColumn, IntPtr sampleIndicesPerColumn, Int32 numCol, Int32[] sampleNonZeroCntPerColumn, Int32 numSampleRow, Int32 numTotalRow, String parameters, IntPtr& ret)\r\n   at Microsoft.ML.Runtime.LightGBM.Dataset..ctor(Double[][] sampleValuePerColumn, Int32[][] sampleIndicesPerColumn, Int32 numCol, Int32[] sampleNonZeroCntPerColumn, Int32 numSampleRow, Int32 numTotalRow, String param, Single[] labels, Single[] weights, Int32[] groups) in /Users/justinormont/Documents/Microsoft/src/machinelearning/src/Microsoft.ML.LightGBM/WrappedLightGbmDataset.cs:line 45\r\n   at Microsoft.ML.Runtime.LightGBM.LightGbmTrainerBase`3.CreateDatasetFromSamplingData(IChannel ch, Factory factory, Int32 numRow, String param, Single[] labels, Single[] weights, Int32[] groups, CategoricalMetaData catMetaData, Dataset& dataset) in /Users/justinormont/Documents/Microsoft/src/machinelearning/src/Microsoft.ML.LightGBM/LightGbmTrainerBase.cs:line 660\r\n   at Microsoft.ML.Runtime.LightGBM.LightGbmTrainerBase`3.LoadTrainingData(IChannel ch, RoleMappedData trainData, CategoricalMetaData& catMetaData) in /Users/justinormont/Documents/Microsoft/src/machinelearning/src/Microsoft.ML.LightGBM/LightGbmTrainerBase.cs:line 343\r\n   at Microsoft.ML.Runtime.LightGBM.LightGbmTrainerBase`3.TrainModelCore(TrainContext context) in /Users/justinormont/Documents/Microsoft/src/machinelearning/src/Microsoft.ML.LightGBM/LightGbmTrainerBase.cs:line 103\r\n   at Microsoft.ML.Runtime.Training.TrainerEstimatorBase`2.Microsoft.ML.Runtime.ITrainer.Train(TrainContext context) in /Users/justinormont/Documents/Microsoft/src/machinelearning/src/Microsoft.ML.Data/Training/TrainerEstimatorBase.cs:line 155\r\n   at Microsoft.ML.Runtime.Data.TrainUtils.TrainCore(IHostEnvironment env, IChannel ch, RoleMappedData data, ITrainer trainer, RoleMappedData validData, ICalibratorTrainer calibrator, Int32 maxCalibrationExamples, Nullable`1 cacheData, IPredictor inputPredictor) in /Users/justinormont/Documents/Microsoft/src/machinelearning/src/Microsoft.ML.Data/Commands/TrainCommand.cs:line 259\r\n   at Microsoft.ML.Runtime.Data.CrossValidationCommand.FoldHelper.RunFold(Int32 fold) in /Users/justinormont/Documents/Microsoft/src/machinelearning/src/Microsoft.ML.Data/Commands/CrossValidationCommand.cs:line 551\r\n   at System.Threading.Tasks.Task`1.InnerInvoke()\r\n   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state)\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Threading.Tasks.Task.ExecuteWithThreadLocal(Task& currentTaskSlot)\r\n```\r\n\r\n#### Temporary solution _(fix it once for the current user)_\r\nOn OS X, we can install libomp:\r\n```bash\r\n$ brew install libomp \r\n```\r\n\r\n#### Longer term solutions _(fix it again for all future users)_\r\n* Update our build instructions to tell the user to run `brew install libomp`\r\n* Update our build script to check for `libomp` and fail the build if missing\r\n* (maybe) Automatically install `libomp` if missing--installing global system software during a build is bad though; is there a way to do a local install? \r\n* Add runtime check for `libomp` and produce a helpful error--this issue affects **nuget users** ; perhaps a change to the upstream LightGBM (@guolinke, thoughts?)\r\n\r\nWe should check if the `libomp` requirement increases the difficultly to **distribute apps** which call into ML.NET. Do the end-users (or the apps install script) have to install `libomp`?\r\n\r\nThanks to @eerhardt for finding the `brew install libomp` solution and providing much of the above background information.","Url":"https://github.com/dotnet/machinelearning/issues/1282","RelatedDescription":"Open issue \"Update build script and/or instructions to check for libomp on OS X\" (#1282)"},{"Id":"370724007","IsPullRequest":false,"CreatedAt":"2018-10-17T17:15:29","Actor":"artidoro","Number":"1273","RawContent":null,"Title":"Exception messages with TLC references in ModelHeader.cs","State":"closed","Body":"The exception messages in ModelHeader.cs have TLC references. We have to remove references to TLC and replace them with corresponding ML.NET references.\r\n\r\nIn this, I think it should be sufficient to replace 'TLC' with 'ML.NET' in the string. \r\n\r\nhttps://github.com/dotnet/machinelearning/blob/a02807c7a805b72ef12970a37279c8cec4ea667d/src/Microsoft.ML.Data/Model/ModelHeader.cs#L352-L365\r\n","Url":"https://github.com/dotnet/machinelearning/issues/1273","RelatedDescription":"Closed issue \"Exception messages with TLC references in ModelHeader.cs\" (#1273)"},{"Id":"370936914","IsPullRequest":true,"CreatedAt":"2018-10-17T17:14:23","Actor":"nihitb06","Number":"1277","RawContent":null,"Title":"Updated ModelHeader.cs to remove TLC references","State":"closed","Body":"Reference to Issue #1273 \r\n\r\nChanged The exception messages to remove TLC references in them. Added ML.NET reference in place of TLC.\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/1277","RelatedDescription":"Closed or merged PR \"Updated ModelHeader.cs to remove TLC references\" (#1277)"},{"Id":"371167122","IsPullRequest":true,"CreatedAt":"2018-10-17T16:38:18","Actor":"sfilipi","Number":"1281","RawContent":null,"Title":"Extension on IDataReader<IMultiStreamSource> to read from a string","State":"open","Body":"Addresses part of  #1090  in this first iteration, by adding a Read extension method taking a string as param, on the IDataReader<IMultiStreamSource>. \r\n\r\nStill looking at how to make so all the derived classes of DataReader<IMultiStreamSource, TShape> can have a Read that takes a string as param. \r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/1281","RelatedDescription":"Open PR \"Extension on IDataReader<IMultiStreamSource> to read from a string\" (#1281)"},{"Id":"371136561","IsPullRequest":false,"CreatedAt":"2018-10-17T15:29:01","Actor":"eerhardt","Number":"1280","RawContent":null,"Title":"Evaluation result classes shouldn't be nested under the Evaluator classes","State":"open","Body":"When using our evaluation API:\r\n\r\n```C#\r\nBinaryClassificationContext binClassificationCtx = new BinaryClassificationContext(env);\r\nBinaryClassifierEvaluator.CalibratedResult metrics = binClassificationCtx.Evaluate(predictions, \"Label\");\r\n```\r\n\r\nIt is quite odd for the `metrics` object to be a nested class in the `BinaryClassifierEvaluator`. I didn't even use the `BinaryClassifierEvaluator` class at all, why am I dealing with a nested class inside of it?\r\n\r\nI think these result classes should be moved to no longer be nested classes. Instead we should just have a `BinaryClassifierEvaluationResult` class.\r\n\r\n/cc @Zruty0 @TomFinley @KrzysztofCwalina @terrajobst ","Url":"https://github.com/dotnet/machinelearning/issues/1280","RelatedDescription":"Open issue \"Evaluation result classes shouldn't be nested under the Evaluator classes\" (#1280)"},{"Id":"370910768","IsPullRequest":true,"CreatedAt":"2018-10-17T06:00:55","Actor":"Ivanidzo4ka","Number":"1276","RawContent":null,"Title":"Convert TextNormalizer to estimator","State":"open","Body":"Convert TextNormalizer to estimator\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/1276","RelatedDescription":"Open PR \"Convert TextNormalizer to estimator\" (#1276)"},{"Id":"370882795","IsPullRequest":true,"CreatedAt":"2018-10-17T03:24:04","Actor":"jignparm","Number":"1275","RawContent":null,"Title":" OnnxTransform freezing - replace  tensor.CopyTo(List<float>) with tensor.CopyTo(float[]).","State":"open","Body":"Fixes #1228.\r\n\r\nReduce the number of data copies of a tensor. Use the Tensor.Copy() method to move contents directly into destination, rather than into a list[T] first, and then destination. \r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/1275","RelatedDescription":"Open PR \" OnnxTransform freezing - replace  tensor.CopyTo(List<float>) with tensor.CopyTo(float[]).\" (#1275)"},{"Id":"370768267","IsPullRequest":true,"CreatedAt":"2018-10-16T19:40:28","Actor":"Anipik","Number":"1274","RawContent":null,"Title":"Same implementation for Sparse Multiplication for aligned and unaligned arrays","State":"open","Body":"Working towards https://github.com/dotnet/machinelearning/issues/1018\r\n","Url":"https://github.com/dotnet/machinelearning/pull/1274","RelatedDescription":"Open PR \"Same implementation for Sparse Multiplication for aligned and unaligned arrays\" (#1274)"},{"Id":"370676181","IsPullRequest":false,"CreatedAt":"2018-10-16T17:22:13","Actor":"wschin","Number":"1271","RawContent":null,"Title":"Fit of IEstimator Needs One Extra Argument","State":"closed","Body":"The signature of Fit is `TTransformer Fit(IDataView input);` which doesn't allow the use of validation set. It prevents learning algorithms (e.g., FFM and GBDT) from using early stopping. Is it ok to change it to `Fit (IEnumerable<IDataView> inputs)`?","Url":"https://github.com/dotnet/machinelearning/issues/1271","RelatedDescription":"Closed issue \"Fit of IEstimator Needs One Extra Argument\" (#1271)"},{"Id":"370703001","IsPullRequest":false,"CreatedAt":"2018-10-16T16:47:53","Actor":"jignparm","Number":"1272","RawContent":null,"Title":"Upgrade to OnnxRuntime Library","State":"open","Body":"Upgrade Sonoma to OnnxRuntime Library","Url":"https://github.com/dotnet/machinelearning/issues/1272","RelatedDescription":"Open issue \"Upgrade to OnnxRuntime Library\" (#1272)"},{"Id":"370375288","IsPullRequest":true,"CreatedAt":"2018-10-15T22:57:59","Actor":"eerhardt","Number":"1270","RawContent":null,"Title":"WIP: Introduce ReadOnlyVBuffer and use it all over.","State":"open","Body":"This is a prototype of one direction we could take VBuffer - introduce a ReadOnlyVBuffer for methods that are guaranteed not to modify the buffer. That way a caller can safely be assured that the buffer will not be mutated during the method.\r\n\r\nWorking towards #608.","Url":"https://github.com/dotnet/machinelearning/pull/1270","RelatedDescription":"Open PR \"WIP: Introduce ReadOnlyVBuffer and use it all over.\" (#1270)"},{"Id":"370374613","IsPullRequest":true,"CreatedAt":"2018-10-15T22:54:44","Actor":"singlis","Number":"1269","RawContent":null,"Title":"Replace DropColumns,KeepColumns and ChooseColumns with SelectColumns","State":"open","Body":"This adds the SelectColumns Transform and Estimator that is replacing\r\nthe DropColumns and ChooseColumns Transforms. With this check-in, Drop\r\nand Choose are still in the code base but will be removed. In order to\r\nsupport loading older models, SelectColumns supports loading in Drop and\r\nChoose transforms. The changes include:\r\n- Implementation of the SelectColumnsTransform,\r\nSelectColumnsDataTransform and SelectColumnsEstimator\r\n- Backward compatibility with Drop and Choose columns by providing\r\nfunctions on SelectColumns that will be called when loading the model.\r\n- Entry point apis for calling select from the command line.\r\n- Additional tests.\r\n\r\nThese changes are related to #754.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/1269","RelatedDescription":"Open PR \"Replace DropColumns,KeepColumns and ChooseColumns with SelectColumns\" (#1269)"},{"Id":"370343842","IsPullRequest":false,"CreatedAt":"2018-10-15T21:06:14","Actor":"justinormont","Number":"1268","RawContent":null,"Title":"Micro-accuracy for Multiclass Classification tests","State":"open","Body":"Micro-accuracy is _generally_ better aligned with the business needs of ML predictions. If we are only choosing one metric to report for a multiclass classification task, it should be micro-accuracy. \r\n\r\nExample, for a support ticket classification task: _(maps incoming tickets to teams)_\r\n* Micro-accuracy -- how often does an incoming ticket get classified to the right team?\r\n* Macro-accuracy -- for an average team, how often is an incoming ticket correct for their team?\r\n\r\nMacro-accuracy overweights small teams in this example; a small team which gets only 10 tickets per year counts as much as a large team with 10k tickets per year. Micro-accuracy in this case correlates better with the business need of, \"how much time/money can the company save by automating my ticket routing process\". \r\n\r\nBelow we are reporting only macro-accuracy:\r\nhttps://github.com/dotnet/machinelearning/blob/23659b013eb2d0233cd92072f32a6daddfe613e3/test/Microsoft.ML.Benchmarks/StochasticDualCoordinateAscentClassifierBench.cs#L42-L43\r\n\r\nBenchmark output: ([src](https://github.com/dotnet/machinelearning/pull/1229#issuecomment-429892852))\r\n```\r\n              Method |         Mean |      Error |     StdDev |        Extra Metric |\r\n-------------------- |-------------:|-----------:|-----------:|--------------------:|\r\n         PredictIris |     1.650 ms |  0.0151 ms |  0.0141 ms | AccuracyMacro: 0.98 |\r\n PredictIrisBatchOf1 |     1.599 ms |  0.0362 ms |  0.0339 ms | AccuracyMacro: 0.98 |\r\n PredictIrisBatchOf2 |     1.646 ms |  0.0179 ms |  0.0167 ms | AccuracyMacro: 0.98 |\r\n PredictIrisBatchOf5 |     1.635 ms |  0.0192 ms |  0.0179 ms | AccuracyMacro: 0.98 |\r\n```\r\n\r\nFor this Iris dataset benchmark, the difference between macro/micro-accuracy are non-important, though it sets a bad precedent which will be replicated in further benchmarks.\r\n\r\nWork: \r\n* The [above test](https://github.com/dotnet/machinelearning/blob/23659b013eb2d0233cd92072f32a6daddfe613e3/test/Microsoft.ML.Benchmarks/StochasticDualCoordinateAscentClassifierBench.cs#L42-L43) should be changed to report micro-accuracy\r\n* See if other benchmarks are reporting macro-accuracy\r\n* (future) Report additional metrics instead of just one","Url":"https://github.com/dotnet/machinelearning/issues/1268","RelatedDescription":"Open issue \"Micro-accuracy for Multiclass Classification tests\" (#1268)"},{"Id":"370316590","IsPullRequest":false,"CreatedAt":"2018-10-15T19:48:31","Actor":"PraveenVerma17","Number":"1267","RawContent":null,"Title":"Schema mismatch for input column 'Structure': expected I4, got Key<U4, 0-1>","State":"open","Body":"### System information\r\n\r\n### Issue\r\nSchema mismatch for input column 'Structure': expected I4, got Key<U4, 0-1>\r\nParameter name: inputSchema\r\n\r\n### Source code / logs\r\n static void Main(string[] args)\r\n        {\r\n            Console.WriteLine(\"Machine Learning Code Started...\");\r\n\r\n            //Create a learning pipeline\r\n            var pipeline = new LearningPipeline();\r\n\r\n\r\n            //Load the data into the pipeline\r\n            string filepath = \"fruit_data.txt\";\r\n            pipeline.Add(new TextLoader(filepath).CreateFrom<FruitData>(useHeader: false, separator: ','));\r\n\r\n\r\n            //Transform the data\r\n            pipeline.Add(new Dictionarizer(\"Structure\"));\r\n            pipeline.Add(new Dictionarizer(\"Fruit\"));\r\n            Console.WriteLine(\"Transformation of data has been completed...\");\r\n\r\n\r\n            //Put all the data into vector\r\n            pipeline.Add(new ColumnConcatenator(\"Features\", \"Weight\", \"Structure\"));\r\n\r\n            //add the classifier \r\n            pipeline.Add(new FastTreeBinaryClassifier());\r\n\r\n            //Convert the label back to text\r\n\r\n\r\n            //Train the model\r\n            var model = pipeline.Train<FruitData, PredictedFruit>();\r\n\r\n            Console.WriteLine(\"Training of the model has been completed\");\r\n\r\n        }\r\n\r\nHere is the data i have:-\r\n\r\n140,pulpi, orange\r\n120,pulpi, orange\r\n130,hard, apple\r\n156,hard, apple\r\n131,pulpi, orange\r\n142,hard, apple\r\n95,hard, apple","Url":"https://github.com/dotnet/machinelearning/issues/1267","RelatedDescription":"Open issue \"Schema mismatch for input column 'Structure': expected I4, got Key<U4, 0-1>\" (#1267)"},{"Id":"370312760","IsPullRequest":true,"CreatedAt":"2018-10-15T19:37:07","Actor":"timitoc","Number":"1266","RawContent":null,"Title":"Added Documentation snippets for regressor trainers","State":"open","Body":"Added FastTreeRegression and LightGBM documentation samples to resolve #1256 \r\n\r\n- [x] There's a descriptive title that will make sense to other developers some time from now. \r\n- [x] There's associated issues. All PR's should have issue(s) associated - unless a trivial self-evident change such as fixing a typo. You can use the format `Fixes #nnnn` in your description to cause GitHub to automatically close the issue(s) when your PR is merged.\r\n- [x] Your change description explains what the change does, why you chose your approach, and anything else that reviewers should know.\r\n- [x] You have included any necessary tests in the same PR.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/1266","RelatedDescription":"Open PR \"Added Documentation snippets for regressor trainers\" (#1266)"}],"ResultType":"GitHubIssue"}},"RunOn":"2018-10-18T05:30:36.2076273Z","RunDurationInMilliseconds":1028}