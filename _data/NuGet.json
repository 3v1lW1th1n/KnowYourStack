{"Data":{"Blog":{"FeedItems":[{"Title":"Deprecating TLS 1.0 and 1.1 on NuGet.org – Stage 1","PublishedOn":"2020-02-19T00:44:02+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Last November, we shared our two-stage plan for deprecating TLS 1.0/1.1 on NuGet.org and actions you can take today to ensure your systems use TLS 1.2. In this post, we will go into more details and a...","Href":"https://devblogs.microsoft.com/nuget/deprecating-tls-1-0-and-1-1-on-nuget-org-stage-1/","RawContent":null},{"Title":"Deprecating TLS 1.0 and 1.1 on NuGet.org","PublishedOn":"2019-11-15T18:58:33+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"co-authored by Scott Bommarito\nAt Microsoft, using the latest and secure encryption techniques is very important to us to ensure the security and privacy of our customers. TLS 1.0 and TLS 1.1,...","Href":"https://devblogs.microsoft.com/nuget/deprecating-tls-1-0-and-1-1-on-nuget-org/","RawContent":null},{"Title":"Deprecating packages on nuget.org","PublishedOn":"2019-09-30T18:29:23+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We are excited to announce that nuget.org now supports package deprecation. This has been a long standing ask that will help the ecosystem use supported packages. As a package publisher on nuget.org,...","Href":"https://devblogs.microsoft.com/nuget/deprecating-packages-on-nuget-org/","RawContent":null},{"Title":"New and improved NuGet Search is here!","PublishedOn":"2019-08-23T03:31:26+00:00","CommentsCount":11,"FacebookCount":0,"Summary":"It’s been a long time coming, and today we are excited to announce the new and improved search on NuGet.org leveraging Azure Search. We want to start this post with a huge thanks to you, the NuGet...","Href":"https://devblogs.microsoft.com/nuget/new-and-improved-nuget-search/","RawContent":null},{"Title":"Surfacing GitHub Usage for packages on NuGet.org","PublishedOn":"2019-07-17T20:00:23+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"There are several criteria you can use today to evaluate NuGet packages. We received feedback that you would like even more information to help choose the right packages. We&#8217;re excited to...","Href":"https://devblogs.microsoft.com/nuget/surfacing-github-usage-for-packages-on-nuget-org/","RawContent":null},{"Title":"NuGet Spring 2019 Roadmap","PublishedOn":"2019-04-10T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We published our last NuGet roadmap in June last year. Many of the features announced were major additions to NuGet and we have been hard at work to implement those over the last few months. In this...","Href":"https://devblogs.microsoft.com/nuget/nuget-spring-2019-roadmap/","RawContent":null},{"Title":"Enable repeatable package restores using a lock file","PublishedOn":"2018-12-17T08:00:00+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"With PackageReference, NuGet always tries to produce the same closure of package dependencies if the input package reference list has not changed. However, there are a few scenarios where it may not...","Href":"https://devblogs.microsoft.com/nuget/enable-repeatable-package-restores-using-a-lock-file/","RawContent":null},{"Title":"Lock down your dependencies using configurable trust policies","PublishedOn":"2018-12-05T08:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"For the past several months we have focused on various features to improve package security and trust. Around a year back, we had announced our plans on various signing functionalities that we have...","Href":"https://devblogs.microsoft.com/nuget/lock-down-your-dependencies-using-configurable-trust-policies/","RawContent":null},{"Title":"Improved package debugging experience with the NuGet.org symbol server","PublishedOn":"2018-11-16T08:00:00+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Starting today, you can publish symbol packages to the NuGet.org symbol server. With NuGet.org as a single service provider for libraries and symbols, package authors and consumers will have a...","Href":"https://devblogs.microsoft.com/nuget/improved-package-debugging-experience-with-the-nuget-org-symbol-server/","RawContent":null},{"Title":"Introducing Source Code Link for NuGet packages","PublishedOn":"2018-08-27T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"NuGet.org now supports surfacing source code repository link for NuGet packages. This will enable package authors to surface both the project&#8217;s website and the source repository using the...","Href":"https://devblogs.microsoft.com/nuget/introducing-source-code-link-for-nuget-packages/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"11730478930","Type":"PullRequestEvent","CreatedAt":"2020-03-10T21:27:57","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/7865","RelatedDescription":"Opened pull request \"Support KeyVault secrets in functional test configuration\" (#7865) at NuGet/NuGetGallery","RelatedBody":"Move to PackageReference and .NET 4.7.2\r\nProgress on https://github.com/NuGet/Engineering/issues/3060"},{"Id":"11723291213","Type":"IssuesEvent","CreatedAt":"2020-03-10T08:50:01","Actor":"bbossola","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7863","RelatedDescription":"Closed issue \"On nuget.org the versions of Microsoft.ChakraCore are incorrect when read from the APIs\" (#7863) at NuGet/NuGetGallery","RelatedBody":"On nuget.org, the versions reported by the API differs from the versions reported by the web interface for Microsoft.ChakraCore\r\n\r\n### To Reproduce\r\nUsing a browser, visit https://www.nuget.org/packages/Microsoft.ChakraCore/\r\nYou can see the latest version is 1.11.16 (confirmed)\r\n\r\nUsing curl, access the information about the library:\r\nhttps://api.nuget.org/v3/registration3/microsoft.chakracore/index.json\r\nYou can see the latest version is 1.11.15\r\n\r\n### Expected behavior\r\nThe versions reported from the web interface and the versions reported from the API are consistent.\r\n\r\n### Screenshots\r\n**WEB:**  \r\n![image](https://user-images.githubusercontent.com/186370/76203510-ac5b5980-61ee-11ea-8f31-46a98e23c270.png)\r\n\r\n**API:**  \r\n![image](https://user-images.githubusercontent.com/186370/76203565-c72dce00-61ee-11ea-966a-571b9fc6272e.png)\r\n\r\n"},{"Id":"11717984949","Type":"PullRequestEvent","CreatedAt":"2020-03-09T18:14:42","Actor":"ryuyu","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/7864","RelatedDescription":"Merged pull request \"Merge branch 'dev' into master\" (#7864) at NuGet/NuGetGallery","RelatedBody":"Deployment item: https://github.com/NuGet/Engineering/issues/3051"},{"Id":"11717694444","Type":"PullRequestEvent","CreatedAt":"2020-03-09T17:42:37","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/7864","RelatedDescription":"Opened pull request \"Merge branch 'dev' into master\" (#7864) at NuGet/NuGetGallery","RelatedBody":""},{"Id":"11713417011","Type":"IssuesEvent","CreatedAt":"2020-03-09T10:17:10","Actor":"bbossola","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7863","RelatedDescription":"Opened issue \"On nuget.org the versions of Microsoft.ChakraCore are incorrect when read from the APIs\" (#7863) at NuGet/NuGetGallery","RelatedBody":"On nuget.org, the versions reported by the API differs from the versions reported by the web interface for Microsoft.ChakraCore\r\n\r\n### To Reproduce\r\nUsing a browser, visit https://www.nuget.org/packages/Microsoft.ChakraCore/\r\nYou can see the latest version is 1.11.16 (confirmed)\r\n\r\nUsing curl, access the information about the library:\r\nhttps://api.nuget.org/v3/registration3/microsoft.chakracore/index.json\r\nYou can see the latest version is 1.11.15\r\n\r\n### Expected behavior\r\nThe versions reported from the web interface and the versions reported from the API are consistent.\r\n\r\n### Screenshots\r\n**WEB:**  \r\n![image](https://user-images.githubusercontent.com/186370/76203510-ac5b5980-61ee-11ea-8f31-46a98e23c270.png)\r\n\r\n**API:**  \r\n![image](https://user-images.githubusercontent.com/186370/76203565-c72dce00-61ee-11ea-966a-571b9fc6272e.png)\r\n\r\n"},{"Id":"11700931136","Type":"PullRequestEvent","CreatedAt":"2020-03-06T18:33:59","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/7862","RelatedDescription":"Merged pull request \"Expose domain and diagnostics source in MEF container\" (#7862) at NuGet/NuGetGallery","RelatedBody":"This enables synchronous initialization (via the constructor) of the cookie compliance shim.\r\nAlso, move the refresh to the background so that initial start-up is not slowed down.\r\n\r\nFully lights up with https://nuget.visualstudio.com/NuGetMicrosoft/_git/NuGet.Shims/pullrequest/1342.\r\nRelated to https://github.com/NuGet/Engineering/issues/2980."},{"Id":"11692220922","Type":"PullRequestEvent","CreatedAt":"2020-03-05T21:20:00","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/7859","RelatedDescription":"Merged pull request \"Reject broken ZIPs on API push with better message\" (#7859) at NuGet/NuGetGallery","RelatedBody":"Address https://github.com/NuGet/Engineering/issues/3046\r\n\r\nThis was a little tricky to repro locally, when reading a ZIP of disk because the behavior of `FileStream` and `HttpInputStream` (the stream from an ASP.NET file upload) is different. `FileStream` does not throw when you seek out of bounds. It only throws when you read. `HttpInputStream` throws when you seek out of bounds, thus the `ArgumentOutOfRangeException` we see on server side."},{"Id":"11691774471","Type":"PullRequestEvent","CreatedAt":"2020-03-05T20:24:30","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/7862","RelatedDescription":"Opened pull request \"Expose domain and diagnostics source in MEF container\" (#7862) at NuGet/NuGetGallery","RelatedBody":"This enables synchronous initialization (via the constructor) of the cookie compliance shim.\r\nAlso, move the refresh to the background so that initial start-up is not slowed down.\r\n\r\nFully lights up with https://nuget.visualstudio.com/NuGetMicrosoft/_git/NuGet.Shims/pullrequest/1342.\r\nRelated to https://github.com/NuGet/Engineering/issues/2980."},{"Id":"11690319737","Type":"IssuesEvent","CreatedAt":"2020-03-05T17:32:05","Actor":"jslootweg","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7861","RelatedDescription":"Closed issue \"Download count isn't updated when self-hosting in IIS\" (#7861) at NuGet/NuGetGallery","RelatedBody":"I have configured a instance of NuGet Gallery running under IIS using SQL Server as the database.  The download count doesn't appear to updating regardless of whether the download is via NuGet Install-Package or through the package download link on the website."}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"11731659042","Type":"IssuesEvent","CreatedAt":"2020-03-11T00:53:41","Actor":"zkat","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/9285","RelatedDescription":"Opened issue \"XPlat Signing: Rebase onto dev again\" (#9285) at NuGet/Home","RelatedBody":"There were some fairly large changes in dev, including a major revert that definitely caused a lot of conflicts for us."},{"Id":"11731273528","Type":"IssuesEvent","CreatedAt":"2020-03-10T23:34:58","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/9268","RelatedDescription":"Closed issue \"Make IOutputConsole async\" (#9268) at NuGet/Home","RelatedBody":"IOutputConsole is currently sync. The reason for that is that it was original designed when PMC was the primary Visual Studio scenario & async code was not as common.\r\n\r\nMany of our codepaths currently invoking the output console are async and with https://github.com/nuget/home/issues/8673 that's becoming even more important. \r\n\r\nRefactor IOutputConsole to contain only async methods. "},{"Id":"11730865520","Type":"IssuesEvent","CreatedAt":"2020-03-10T22:24:04","Actor":"donnie-msft","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/9278","RelatedDescription":"Closed issue \"Sort packages by ID in the Updates tab of the Package Manager UI\" (#9278) at NuGet/Home","RelatedBody":"## Details about Problem\r\n\r\nNuGet product used: VS UI\r\n\r\nNuGet version: 5.4.0\r\n\r\nVS version: 16.4.5\r\n\r\nOS version: Windows 10 v1903 (18362.693): \r\n\r\nWorked before? If so, with which NuGet version: No\r\n\r\n## Detailed repro steps so we can see the same problem\r\n\r\n1. Open a project with packages that can be updated.\r\n\r\n2. Open the Package Manager UI for the solution or the project.\r\n\r\n3. Choose the Updates tab.\r\n\r\nThe packages are listed in a seemingly random order, making it harder to find specific packages. It would be useful if the packages were sorted by their ID, as is already the case in the Installed tab.\r\n![image](https://user-images.githubusercontent.com/1618054/76198300-1fb09b80-61ee-11ea-97bb-1beb0bae434c.png)\r\n![image](https://user-images.githubusercontent.com/1618054/76201867-3e199580-61f4-11ea-846b-7dcc4a2a7523.png)\r\n\r\nRelated: #2585 tracks a broader issue regarding sorting, including [a Developer Community report](https://developercommunity.visualstudio.com/content/problem/56659/nuget-management-window-nuget-updates-can-not-be-s.html) about default sorting of the Updates tab."},{"Id":"11729994371","Type":"IssuesEvent","CreatedAt":"2020-03-10T20:28:22","Actor":"heng-liu","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/9013","RelatedDescription":"Closed issue \"Re-enable OSX failing signing tests\" (#9013) at NuGet/Home","RelatedBody":"These 4 tests seem to behave differently on Mojave vs Sierra. On Sierra chain building fails in signing, while in Mojave signing succeeds but then verification fails with the OCSP server issues.\r\nThe chain building issues in Sierra seem similar to the issues in the 18 other tests that don't repro in Mojave, so they might be related.\r\n\r\nThe tests have been disabled on CI and need to be fixed and re-enabled."},{"Id":"11729989880","Type":"IssuesEvent","CreatedAt":"2020-03-10T20:27:50","Actor":"heng-liu","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/9008","RelatedDescription":"Closed issue \"Test ExtractPackageAsync_RequireMode_UnsignedPackage_InCoreCLR_SkipsSigningVerificationAsync is out of date when xplat verification is implemented\" (#9008) at NuGet/Home","RelatedBody":"Test ExtractPackageAsync_RequireMode_UnsignedPackage_InCoreCLR_SkipsSigningVerificationAsync is checking if unsigned package will skip verification in CoreCLR in RequireMode during extraction(restore).\r\nThis test should be disabled for netcore5.0 when xplat verification is implemented, as the signed package should be verified.\r\n\r\nWe need to make sure the verification xplat is tested when we disable this test."},{"Id":"11729944332","Type":"IssuesEvent","CreatedAt":"2020-03-10T20:22:31","Actor":"zkat","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/9028","RelatedDescription":"Closed issue \"Analyze existing ecosystem for signature validity\" (#9028) at NuGet/Home","RelatedBody":"We need to run some azure functions to go over the entire NuGet registry and make sure all packages have valid signatures, and that our xplat verification actually works on them, on all platforms. Fix bugs accordingly."},{"Id":"11728665791","Type":"IssuesEvent","CreatedAt":"2020-03-10T17:57:09","Actor":"zkat","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8937","RelatedDescription":"Closed issue \"Broken test in  SignatureUtilityTests(functional test)\" (#8937) at NuGet/Home","RelatedBody":"In  SignatureUtilityTests(functional test), GetTimestampCertificateChain_WithNoSigningCertificateUsage_Throws failed on Windows(netcore), Linux and Mac"},{"Id":"11725645753","Type":"IssuesEvent","CreatedAt":"2020-03-10T13:19:29","Actor":"tgradu","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/9284","RelatedDescription":"Opened issue \"Azure Devops Build Fail when using GeneratePathProperty true for PackageReference\" (#9284) at NuGet/Home","RelatedBody":"## Details about Problem\r\nNuGet product used NuGet.exe \r\nNuGet version : 4.3.0\r\nVS version (if appropriate): Visual Studio 2019\r\nOS version: Widows 2019 Azure Hosted Agent\r\nWorked before? No\r\n\r\n## Detailed repro steps so we can see the same problem\r\n\r\nWe have set up a Project in Visual Studio where we are using NuGet Packages references. For one of the NuGet Packages we are setting the GeneratePathProperty to true, so that we can copy the files from the NuGet package location to the Output bin folder of our Project\r\n\r\nHe have configured the .csproj file as below:\r\n\r\n<PackageReference Include=\"ilmerge\" GeneratePathProperty=\"true\">\r\n  <Version>3.0.29</Version>\r\n</PackageReference>\r\n<None Include=\"$(Pkgilmerge)\\tools\\net452\\ILMerge.exe\">\r\n  <Link>ILMerge.exe</Link>\r\n  <CopyToOutputDirectory>Always</CopyToOutputDirectory>\r\n</None>\r\n<None Include=\"$(Pkgilmerge)\\tools\\net452\\System.Compiler.dll\">\r\n  <Link>System.Compiler.dll</Link>\r\n  <CopyToOutputDirectory>Always</CopyToOutputDirectory>\r\n</None>\r\nThis works perfectly fine locally (using Visual Studio 2019) - project compiles and files are copied to the bin folder, however in our Build Pipeline using the windows-2019 hosted agent (that should also have VS 2019 as per the documentation https://github.com/actions/virtual-environments/blob/master/images/win/Windows2019-Readme.md) this fails during the Build Task:\r\n\r\n[error]C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Enterprise\\MSBuild\\Current\\Bin\\Microsoft.Common.CurrentVersion.targets(4601,5): Error MSB3030: Could not copy the file 'd:\\tools\\net452\\ILMerge.exe' because it was not found.\r\n\r\n[error]C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Enterprise\\MSBuild\\Current\\Bin\\Microsoft.Common.CurrentVersion.targets(4601,5): Error MSB3030: Could not copy the file 'd:\\tools\\net452\\System.Compiler.dll' because it was not found.\r\n\r\nThe Build Definition has following tasks\r\n\r\nsteps:\r\n- task: NuGetToolInstaller@0\r\n- task: NuGetCommand@2\r\n  displayName: 'Restore Nugets'\r\n  inputs:\r\n    restoreSolution: '$(solutions)'\r\n    vstsFeed: 'Project-Packages'\r\n\r\n- task: VSBuild@1\r\n  inputs:\r\n    solution: '$(solutions)'\r\n    platform: 'Any CPU'\r\n    configuration: 'Release'\r\n    logProjectEvents: false\r\n\r\n- task: PublishBuildArtifacts@1\r\n  inputs:\r\n    pathtoPublish: '$(Build.StagingDirectory)'\r\n    artifactName: $(pluginName)\r\n  condition: always()\r\n\r\nAny ideas what could be the issue or what we need to change in order for the build in Azure DevOps to work?\r\n\r\nThank you\r\n"},{"Id":"11725352244","Type":"IssuesEvent","CreatedAt":"2020-03-10T12:47:43","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/9277","RelatedDescription":"Closed issue \"Default package source name has format placeholder residue\" (#9277) at NuGet/Home","RelatedBody":"Noticed while experimenting during #9251 with the preview of 3.1.200 SDK:\r\n```\r\n$ dotnet nuget add source https://ci.appveyor.com/nuget/gitversion-8nigugxjftrw --configfile NuGet.config\r\nPackage source with Name: Package source {0}1 added successfully.\r\n\r\n$ dotnet nuget list source --configfile NuGet.config\r\nRegistered Sources:\r\n  1.  nuget.org [Enabled]\r\n      https://api.nuget.org/v3/index.json\r\n  2.  Package source {0}1 [Enabled]\r\n      https://ci.appveyor.com/nuget/gitversion-8nigugxjftrw\r\n\r\n$ cat NuGet.config\r\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<configuration>\r\n  <disabledPackageSources>\r\n    <clear />\r\n  </disabledPackageSources>\r\n  <packageSources>\r\n    <clear />\r\n    <add key=\"nuget.org\" value=\"https://api.nuget.org/v3/index.json\" />\r\n    <add key=\"Package source {0}1\" value=\"https://ci.appveyor.com/nuget/gitversion-8nigugxjftrw\" />\r\n  </packageSources>\r\n</configuration>\r\n\r\n$ dotnet nuget remove source \"Package source {0}1\" --configfile NuGet.config\r\nPackage source with Name: Package source {0}1 removed successfully.\r\n```\r\nThe default package source name has format placeholder residue; i.e. `{0}` in the name.\r\n\r\nThis comes from [Source_DefaultNamePrefix](https://github.com/NuGet/NuGet.Client/blob/a746cd6a01dfd22187375ee9c5a0d9b98676020a/src/NuGet.Core/NuGet.Commands/Strings.resx#L962-L965) and is used in [AddSourceRunner.Run](https://github.com/NuGet/NuGet.Client/blob/a746cd6a01dfd22187375ee9c5a0d9b98676020a/src/NuGet.Core/NuGet.Commands/SourcesCommands/SourceRunners.cs#L20-L36) without `string.Format`, so the format placeholder residue is left in place. Looks like a bug to me! 😉 "},{"Id":"11720774347","Type":"IssuesEvent","CreatedAt":"2020-03-10T00:51:24","Actor":"dominoFire","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/9225","RelatedDescription":"Closed issue \"[Test Failure] Embedded icon of the package creating by nuget.exe can’t be shown in PM UI with local package feed\" (#9225) at NuGet/Home","RelatedBody":"## Details about Problem\r\nNuGet version: NuGet Client Dev\\5.6.0.6472\r\nVS Version: Master\\29825.171\r\nOS: Windows-10-Enterprise-RS5\r\n## Detailed repro steps\r\n1.\tCreate a Class Library (.NET Framework 4.8) in VS and build the solution.\r\n2.\tIn the Developer Command Prompt for VS, create a nuspec file by executing command “nuget spec”\r\n3.  Make an image file (size limited to 1 MB with JPEG/PNG format and 128x128 resolution) and locate in the package.\r\n4.  Add following to nuspec file.\r\n```\r\n<package>\r\n  <metadata>\r\n    ...\r\n    <icon>images\\icon.png</icon>\r\n    ...\r\n  </metadata>\r\n  <files>\r\n    ...\r\n    <file src=\"..\\icon.png\" target=\"images\\\" />\r\n    ...\r\n  </files>\r\n</package>\r\n```\r\n5.  Pack the package to local path by executing command “nuget pack”.\r\n6.  Create a C# Console App (.NET Framework 4.8) in VS and open the PM UI of the project.\r\n7.  Add the package source as a local feed in Settings->NuGet Package Manager->Package Sources.\r\n8.  Select the new added local feed in the Package source dropdown box in the PM UI and install the package.\r\n\r\n## Expected\r\nThe embedded icon show correctly in all the tabs of PM UI.\r\n## Actual\r\nThe embedded icon can’t be shown in all the tabs of PM UI. as below screenshot.\r\n![image](https://user-images.githubusercontent.com/20632625/75345053-e8c9b400-58d6-11ea-8a4b-0c9f2a076604.png)\r\n## Note\r\n1.\tIt doesn’t repro for the package creating by “dotnet pack” with local package feed.\r\n2.\tIt doesn’t repro for the package “Text2Xml.Lib” (version 1.1.1 and 1.1.2) in remote feed.\r\n3.\tIt also repro with icon.jpg."},{"Id":"11720646386","Type":"IssuesEvent","CreatedAt":"2020-03-10T00:23:52","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/9267","RelatedDescription":"Closed issue \"Ensure Static Graph restore is available in dotnet.exe\" (#9267) at NuGet/Home","RelatedBody":"This basically means ingesting https://github.com/NuGet/NuGet.Client/blob/dev/src/NuGet.Core/NuGet.Build.Tasks.Console/NuGet.Build.Tasks.Console.csproj into the SDK. \r\n\r\nWe should discuss with the .NET Core team what branches they want the changes in. \r\n\r\nfyi @jeffkl \r\n"},{"Id":"11720306016","Type":"IssuesEvent","CreatedAt":"2020-03-09T23:18:05","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8388","RelatedDescription":"Closed issue \"Clarify TargetFramework vs TargetFrameworks vs TargetFrameworkMoniker across the NuGet codebase.\" (#8388) at NuGet/Home","RelatedBody":"Discussion in https://github.com/NuGet/Home/issues/7717#issuecomment-515638800. \r\n\r\nNuGet should align to whatever the rest of the build expects. \r\n//cc @davkean @zivkan @rrelyea "},{"Id":"11720104713","Type":"IssuesEvent","CreatedAt":"2020-03-09T22:42:48","Actor":"heng-liu","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8364","RelatedDescription":"Closed issue \"Remove temporary WorkaroundNetStandard target from common.targets\" (#8364) at NuGet/Home","RelatedBody":"Related issue: https://github.com/dotnet/cli/issues/11378\r\nThe above issue is already fixed in VS 2019 16.2 preview2. \r\nBut we don't have the latest version of VS on VSEng-MicroBuildVS2019 agent pool (the current version is 16.1.6). So we have to add a temporary WorkaroundNetStandard target to common.targets to make the build pass.\r\n\r\nWe need to remove this WorkaroundNetStandard target from common.targets when the VS on agent pool VSEng-MicroBuildVS2019 has that fix."}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"11608975127","Type":"IssuesEvent","CreatedAt":"2020-02-25T23:07:38","Actor":"karann-msft","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/42","RelatedDescription":"Opened issue \"Deprecating TLS 1.0 and 1.1 on NuGet.org – Stage 1\" (#42) at NuGet/Announcements","RelatedBody":"## NuGet.org will temporarily remove support for TLS 1.0/1.1 on February 26, 2020\r\n\r\nWe plan to temporarily remove support for TLS 1.0/1.1 across 3 time slots in a 24 hour period, for 4 hours each, to ensure overlap with normal working hours across the globe. If you discover that you are impacted and cannot identify a workaround, please open an issue on the NuGet Gallery GitHub repo.\r\n\r\nRead this blog post to learn more and to identify the test slot time in your time zone - https://devblogs.microsoft.com/nuget/deprecating-tls-1-0-and-1-1-on-nuget-org-stage-1/\r\n\r\n"},{"Id":"11502675218","Type":"IssuesEvent","CreatedAt":"2020-02-12T19:33:43","Actor":"karann-msft","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/41","RelatedDescription":"Opened issue \"Support pre-release packages with floating versions\" (#41) at NuGet/Announcements","RelatedBody":"|Spec wiki|Discussion issue|\r\n|----------|------------------|\r\n|[Support pre-release packages with floating versions](https://github.com/NuGet/Home/wiki/Support-pre-release-packages-with-floating-versions) | https://github.com/NuGet/Home/issues/912|"},{"Id":"11467027718","Type":"IssuesEvent","CreatedAt":"2020-02-08T01:39:00","Actor":"karann-msft","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/40","RelatedDescription":"Opened issue \"Add nuget sources command to the dotnet CLI\" (#40) at NuGet/Announcements","RelatedBody":"|Spec wiki|Discussion issue|\r\n|----------|------------------|\r\n|[Add nuget sources command to the dotnet CLI](https://github.com/NuGet/Home/wiki/Add-nuget-sources-command-to-the-dotnet-CLI) | https://github.com/NuGet/Home/issues/4126|"},{"Id":"10740159942","Type":"IssuesEvent","CreatedAt":"2019-10-29T17:39:29","Actor":"anangaur","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/39","RelatedDescription":"Opened issue \"Flag vulnerable packages\" (#39) at NuGet/Announcements","RelatedBody":"The spec for 'Flagging vulnerable packages' is ready for **review**:\r\n\r\n|Spec wiki|Discussion issue|\r\n|----------|------------------|\r\n|[Flag vulnerable packages](https://github.com/NuGet/Home/wiki/Flag-vulnerable-packages) | https://github.com/nuget/home/issues/8087|"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1219766107269025792","CreatedAt":"2020-01-21T23:37:56+00:00","UserScreenname":"nuget","Text":"https://t.co/F9kiKfdOWi package publishing is currently facing technical difficulty and new packages pushed to… https://t.co/4E67LHHnbI","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":2,"FavoriteCount":2,"RawContent":null},{"Id":"1204812404573392897","CreatedAt":"2019-12-11T17:17:16+00:00","UserScreenname":"nuget","Text":"We are currently experiencing CDN issues in a few geographies.  https://t.co/F9kiKfdOWi services like package resto… https://t.co/0ZVMeF11CW","Source":"<a href=\"http://twitter.com/download/iphone\" rel=\"nofollow\">Twitter for iPhone</a>","RetweetCount":10,"FavoriteCount":8,"RawContent":null},{"Id":"1190360390980395008","CreatedAt":"2019-11-01T20:10:07+00:00","UserScreenname":"nuget","Text":"The issue with the publishing pipeline has been resolved and packages are now being published normally. https://t.co/NdK8mVk7UF","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":3,"FavoriteCount":0,"RawContent":null},{"Id":"1190331936293572608","CreatedAt":"2019-11-01T18:17:03+00:00","UserScreenname":"nuget","Text":"We are experiencing an issue with our publishing pipeline causing a delay in the publishing of new packages. We are… https://t.co/gM91QcE1Zc","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":5,"FavoriteCount":3,"RawContent":null}]}},"RunOn":"2020-03-11T05:30:45.157487Z","RunDurationInMilliseconds":2329}