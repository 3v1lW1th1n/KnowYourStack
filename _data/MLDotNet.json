{"Data":{"GitHub":{"Issues":[{"Id":"480415398","IsPullRequest":true,"CreatedAt":"2019-08-20T23:22:47","Actor":"najeeb-kazmi","Number":"4110","RawContent":null,"Title":"Load TransformerChain model file in ModelFileUtils","State":"closed","Body":"Fixes #4109 \r\n\r\nRelated to microsoft/NimbusML#201\r\n\r\nEnables loading TransformerChain models from entrypoints. This is needed so that models trained in ML.NET can be scored in NimbusML.\r\n\r\nNimbusML models could be loaded and scored in ML.NET, but we never tested it the other way around.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/4110","RelatedDescription":"Closed or merged PR \"Load TransformerChain model file in ModelFileUtils\" (#4110)"},{"Id":"480413666","IsPullRequest":false,"CreatedAt":"2019-08-20T23:22:47","Actor":"najeeb-kazmi","Number":"4109","RawContent":null,"Title":"Enable loading TransformerChain models in EntryPoint graphs","State":"closed","Body":"Related to microsoft/NimbusML#201\r\n\r\nThe new `TransformerChain` model format cannot be used to score a dataset in NimbusML. This is because this model format cannot be loaded by `TransformModelImpl`, which is a field of `PredictorModelImpl`, which in turn is used in constructing the inputs for the entry point  graph passed by NimbusML.\r\n\r\n cc: @eerhardt @ganik ","Url":"https://github.com/dotnet/machinelearning/issues/4109","RelatedDescription":"Closed issue \"Enable loading TransformerChain models in EntryPoint graphs\" (#4109)"},{"Id":"482998559","IsPullRequest":false,"CreatedAt":"2019-08-20T17:52:22","Actor":"cookt","Number":"4135","RawContent":null,"Title":"FastTree induced GC.Collect causing long pauses, high CPU","State":"open","Body":"### System information\r\n\r\n- **OS version/distro**:  Windows 10\r\n- **.NET Version (eg., dotnet --info)**: \r\n.NET Framework 4.7.2\r\n\r\n### Issue\r\n- **What did you do?**\r\nTraining using any trainers derived from Fast Trees\r\n- **What happened?**\r\nObserved fully blocking pauses of ~200ms and spikes in CPU usage caused by induced GC collection in Gen2\r\n- **What did you expect?**\r\nAn option to disable this behavior. According to the comment in the linked source, this is a workaround for .net 4.6.  \r\n\r\n### Source code / logs\r\nhttps://github.com/dotnet/machinelearning/blob/master/src/Microsoft.ML.FastTree/FastTree.cs#L152\r\nhttps://github.com/dotnet/machinelearning/blob/master/src/Microsoft.ML.FastTree/FastTree.cs#L352\r\n\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/4135","RelatedDescription":"Open issue \"FastTree induced GC.Collect causing long pauses, high CPU\" (#4135)"},{"Id":"482883874","IsPullRequest":false,"CreatedAt":"2019-08-20T14:07:43","Actor":"SnakyBeaky","Number":"4134","RawContent":null,"Title":"Memory leak in the latest ML.NET 1.3.1","State":"open","Body":"### System information\r\n\r\n- **OS version/distro**: Windows 10 Pro 10.0.17763\r\n- **.NET Version (eg., dotnet --info)**:  .NET Core 2.2.203 e5bab63eca\r\n\r\n### Issue\r\n\r\n- **What did you do?** Update the NuGet references to Microsoft.ML.* from `1.2.0` to `1.3.1`.\r\n- **What happened?** Memory leaking\r\n- **What did you expect?** Same behaviour as before\r\n\r\n### Source code / logs\r\n\r\nThe pipeline consists of a ValueToKey mapping, loading image, resizing and extracting pixels, input them into an tensorflow inception model and finally a LbfgsMaximumEntropy trainer.\r\n\r\nThis is a run training several models in `1.2.0`:\r\n![image](https://user-images.githubusercontent.com/8410877/63354071-0e906200-c364-11e9-8f98-e2a386efe7f9.png)\r\n\r\nThe same exact code, running in `1.3.1`:\r\n![image](https://user-images.githubusercontent.com/8410877/63354132-2a940380-c364-11e9-86be-1193457a6caa.png)\r\n\r\nObject count and heap size are more or less stable, my guess is something related to the tensorflow model not being cleared up.\r\n![image](https://user-images.githubusercontent.com/8410877/63354150-3253a800-c364-11e9-98eb-9fe0428c8528.png)\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/4134","RelatedDescription":"Open issue \"Memory leak in the latest ML.NET 1.3.1\" (#4134)"},{"Id":"482365047","IsPullRequest":false,"CreatedAt":"2019-08-20T02:14:39","Actor":"huanbd","Number":"4128","RawContent":null,"Title":"How to analyze sentiment comment of other language not english?","State":"closed","Body":"### Issue\r\n\r\n- **What did you do?**\r\nLearned an [example analyze comment](https://docs.microsoft.com/en-us/dotnet/machine-learning/tutorials/sentiment-analysis), data for train is English comment.\r\n- **What happened?**\r\nI want to know how to use ML.NET to analyze comment but data for train is other language not English (in my case is vietnamese).\r\nWith my knowledge, I think have to step to preprocess data before use ML.NET to train, but I don't know how to code use ML.NET.\r\n- **What did you expect?**\r\nWant to know step to resolve my problem or any plan to support to do that.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/4128","RelatedDescription":"Closed issue \"How to analyze sentiment comment of other language not english?\" (#4128)"},{"Id":"482590748","IsPullRequest":false,"CreatedAt":"2019-08-20T00:44:09","Actor":"justinormont","Number":"4133","RawContent":null,"Title":"CodeCov stopped","State":"open","Body":"We link to the CodeCov report in the repo's main README.md. The CodeCov report seems to have stopped ~3mo ago.\r\n\r\nhttps://codecov.io/gh/dotnet/machinelearning/commits:\r\n> ![image](https://user-images.githubusercontent.com/4080826/63308479-ba27ac80-c2a7-11e9-9052-b4c69abe59f0.png)\r\n\r\nDid we disable the CodeCov bot?","Url":"https://github.com/dotnet/machinelearning/issues/4133","RelatedDescription":"Open issue \"CodeCov stopped\" (#4133)"},{"Id":"481750529","IsPullRequest":true,"CreatedAt":"2019-08-19T23:26:44","Actor":"CESARDELATORRE","Number":"4123","RawContent":null,"Title":"ML.NET home page readme updated with getting started resources","State":"closed","Body":"ML.NET home page readme updated with additional getting started resources such as, Sample apps, community sample apps, ML.NET videos playlist at YouTube, Documentation, etc. plus some refactoring of the page so the info is clearer.\r\n\r\nThis is important info to be seen upfront for new .NET users coming to the ML.NET repo.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/4123","RelatedDescription":"Closed or merged PR \"ML.NET home page readme updated with getting started resources\" (#4123)"},{"Id":"482565233","IsPullRequest":false,"CreatedAt":"2019-08-19T22:55:01","Actor":"Dmitry-A","Number":"4132","RawContent":null,"Title":"Conversion.TryParse parses floats and doubles with empty/whitespace values as 0 instead of NaN","State":"open","Body":"This is done for historical reasons since there are clients that depend on this behavior, so it's not a bug.  Nevertheless, if we don't control the input dataset format this would produce signal loss since empty/whitespace values are now indistinguishable from value \"0\".  We can fix that in AutoML by inserting a transform that addresses the issue but a much better fix would be to change the loader behavior.","Url":"https://github.com/dotnet/machinelearning/issues/4132","RelatedDescription":"Open issue \"Conversion.TryParse parses floats and doubles with empty/whitespace values as 0 instead of NaN\" (#4132)"},{"Id":"482455921","IsPullRequest":false,"CreatedAt":"2019-08-19T18:16:03","Actor":"Dmitry-A","Number":"4131","RawContent":null,"Title":"[AutoML] In CodeGenerator, remove .cs files that are generated from .tt's that are currently checked in","State":"open","Body":"We should avoid checking in auto-generated content.  Looks like it is officially supported by msbuild: https://docs.microsoft.com/en-us/visualstudio/modeling/code-generation-in-a-build-process?view=vs-2019\r\n","Url":"https://github.com/dotnet/machinelearning/issues/4131","RelatedDescription":"Open issue \"[AutoML] In CodeGenerator, remove .cs files that are generated from .tt's that are currently checked in\" (#4131)"},{"Id":"482450432","IsPullRequest":false,"CreatedAt":"2019-08-19T18:03:01","Actor":"inchiosa","Number":"4130","RawContent":null,"Title":"[AutoML] Provide a Predict CLI command, similar to the mlnet-autotrain command","State":"open","Body":"Provide a Predict CLI command, similar to the mlnet-autotrain command","Url":"https://github.com/dotnet/machinelearning/issues/4130","RelatedDescription":"Open issue \"[AutoML] Provide a Predict CLI command, similar to the mlnet-autotrain command\" (#4130)"},{"Id":"482423959","IsPullRequest":false,"CreatedAt":"2019-08-19T17:01:46","Actor":"Dmitry-A","Number":"4129","RawContent":null,"Title":"[AutoML] make CodeGenerator component independent of AutoML internals","State":"open","Body":"Currently we have to use InternalsVisible in AutoML so CodeGenerator can use Pipeline object.  Need to refactor interfaces so that this is no longer the case, ideally such that CodeGenerator doesn't have a dependency on AutoML at all.","Url":"https://github.com/dotnet/machinelearning/issues/4129","RelatedDescription":"Open issue \"[AutoML] make CodeGenerator component independent of AutoML internals\" (#4129)"},{"Id":"482051324","IsPullRequest":true,"CreatedAt":"2019-08-18T23:30:38","Actor":"sierralee51","Number":"4127","RawContent":null,"Title":"Full Model Retrain Sample ","State":"open","Body":"A sample using the full model retrain API with the MNIST model and data.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/4127","RelatedDescription":"Open PR \"Full Model Retrain Sample \" (#4127)"},{"Id":"482023169","IsPullRequest":false,"CreatedAt":"2019-08-18T18:29:39","Actor":"ssaporito","Number":"4126","RawContent":null,"Title":"MultiClassClassification.CrossValidate seems to break with Bitmaps in memory","State":"open","Body":"### System information\r\n\r\n- **OS version/distro**: Windows 10\r\n- **.NET Version (eg., dotnet --info)**: .NET Core 2.2 \r\n\r\n### Issue\r\n\r\n- **What did you do?**\r\nI had a working pipeline for training image classification with cross-validation on the previous ML.NET version, using file paths as input. Now, being able to load Bitmaps, I am trying to setup a similar pipeline, but allowing training and predictions from in-memory bitmaps.\r\n- **What happened?**\r\nThe training works if I just Fit the data,\r\n`ITransformer mlModel = pipeline.Fit(trainData);`\r\n but it fails if I try to use CrossValidate\r\n`var cvResults = _mlContext.MulticlassClassification.CrossValidate(trainData, pipeline, numberOfFolds);`\r\n- **What did you expect?**\r\nI expected a pipeline that worked with Fit to work with CrossValidate, but it seems the internal multiple passes do something to the Bitmaps (they lose data).\r\n### Source code / logs\r\nMy current pipeline, based on [this sample](https://github.com/dotnet/machinelearning-samples/tree/master/samples/csharp/end-to-end-apps/DeepLearning_ImageClassification_TensorFlow) is this:\r\n`var pipeline = _mlContext.Transforms.Conversion.MapValueToKey(\"Label\")               \r\n                .Append(_mlContext.Transforms.ResizeImages(outputColumnName: TensorFlowModelSettings.inputTensorName, imageWidth: ImageSettings.imageWidth, imageHeight: ImageSettings.imageHeight, inputColumnName: nameof(ImageInputData.Image)))                \r\n                .Append(_mlContext.Transforms.ExtractPixels(outputColumnName: TensorFlowModelSettings.inputTensorName, interleavePixelColors: ImageSettings.channelsLast, offsetImage: ImageSettings.mean/*, inputColumnName: nameof(ImageInputData.Image)*/))                \r\n                .Append(_mlContext.Model.LoadTensorFlowModel(tensorFlowModelFilePath).\r\n                ScoreTensorFlowModel(outputColumnNames: new[] { TensorFlowModelSettings.outputTensorName },\r\n                                    inputColumnNames: new[] { TensorFlowModelSettings.inputTensorName }, addBatchDimensionInput: false))                \r\n                .Append(_mlContext.MulticlassClassification.Trainers.LbfgsMaximumEntropy(labelColumnName: \"Label\", featureColumnName: TensorFlowModelSettings.outputTensorName))\r\n                .Append(_mlContext.Transforms.Conversion.MapKeyToValue(\"PredictedLabel\"))\r\n                .AppendCacheCheckpoint(_mlContext);`\r\n\r\nThe error log includes the following exceptions:\r\n\r\n```\r\nSystem.ArgumentException: Parameter is not valid.\r\n   at System.Drawing.Image.get_Height()\r\n   at Microsoft.ML.Transforms.Image.ImageResizingTransformer.Mapper.<>c__DisplayClass3_0.<MakeGetter>b__1(Bitmap& dst)\r\n   at Microsoft.ML.Transforms.Image.ImagePixelExtractingTransformer.Mapper.<>c__DisplayClass5_0`1.<GetGetterCore>b__1(VBuffer`1& dst)\r\n   at Microsoft.ML.Data.DataViewUtils.Splitter.InPipe.Impl`1.Fill()\r\n   at Microsoft.ML.Data.DataViewUtils.Splitter.<>c__DisplayClass9_0.<SplitCore>b__1()\r\n```\r\n\r\n```\r\nSystem.InvalidOperationException: Splitter/consolidator worker encountered exception while consuming source data ---> System.ArgumentException: Parameter is not valid.\r\n   at System.Drawing.Image.get_Height()\r\n   at Microsoft.ML.Transforms.Image.ImageResizingTransformer.Mapper.<>c__DisplayClass3_0.<MakeGetter>b__1(Bitmap& dst)\r\n   at Microsoft.ML.Transforms.Image.ImagePixelExtractingTransformer.Mapper.<>c__DisplayClass5_0`1.<GetGetterCore>b__1(VBuffer`1& dst)\r\n   at Microsoft.ML.Data.DataViewUtils.Splitter.InPipe.Impl`1.Fill()\r\n   at Microsoft.ML.Data.DataViewUtils.Splitter.<>c__DisplayClass9_0.<SplitCore>b__1()\r\n   --- End of inner exception stack trace ---\r\n   at Microsoft.ML.Data.DataViewUtils.Splitter.Batch.SetAll(OutPipe[] pipes)\r\n   at Microsoft.ML.Data.DataViewUtils.Splitter.Cursor.MoveNextCore()\r\n   at Microsoft.ML.Data.RootCursorBase.MoveNext()\r\n   at Microsoft.ML.Data.DataViewUtils.Splitter.<>c__DisplayClass5_1.<ConsolidateCore>b__2()\r\n```\r\n\r\nThis is my first issue here, and I apologize if I overlooked something. I found no posts about this error anywhere.","Url":"https://github.com/dotnet/machinelearning/issues/4126","RelatedDescription":"Open issue \"MultiClassClassification.CrossValidate seems to break with Bitmaps in memory\" (#4126)"},{"Id":"481934642","IsPullRequest":false,"CreatedAt":"2019-08-17T23:08:43","Actor":"kennethchoe","Number":"4125","RawContent":null,"Title":"DetectIidSpike Fit() does not train the engine. Predict() does.","State":"open","Body":"### System information\r\n\r\n- **OS version/distro**: Windows 10\r\n- **.NET Version (eg., dotnet --info)**: .NET Core 2.1\r\n- Microsoft.ML 1.3.1, Microsoft.ML.TimeSeries 1.3.1\r\n\r\n### Issue\r\n\r\n- **What did you do?**\r\nI'm trying to build amount anomaly detection. I want to be able to provide historical data as \"good value range\", and provide new record for prediction.\r\n\r\n- **What happened?**\r\nThe engine does not get trained when I call Fit(). It is trained only via Predict() call. I need to call Predict() for each training data. The result of Predict() is not used other than the new record's.\r\n\r\n- **What did you expect?**\r\nI expect Fit() will make the engine ready, and subsequent Predict() call will test the new record's anomaly.\r\n\r\n### Source code / logs\r\nHere is the snippet of my code.\r\n\r\n            var trainingData = data.Where(x => x.BusinessDate < businessDate).ToList();\r\n            var targetData = data.Where(x => x.BusinessDate == businessDate).ToList();\r\n\r\n            var mlContext = new MLContext();\r\n            var iidSpikeEstimator = mlContext.Transforms.DetectIidSpike(nameof(AnomalyPrediction.Prediction), nameof(CheckRecord.Amount), 98, trainingData.Count, AnomalySide.Positive);\r\n\r\n            IDataView trainingDataView = mlContext.Data.LoadFromEnumerable(trainingData);\r\n            ITransformer iidSpikeTransform = iidSpikeEstimator.Fit(trainingDataView);\r\n\r\n            var engine = iidSpikeTransform.CreateTimeSeriesEngine<CheckRecord,\r\n                AnomalyPrediction>(mlContext);\r\n\r\n            // without below, prediction will always be 0, with p-value 0.5. it behaves as if targetData is the very first sample.\r\n            trainingData.ForEach(x => engine.Predict(x));\r\n\r\n            var prediction = engine.Predict(targetData.Single());\r\n\r\n            return prediction.Prediction[0] == 1;\r\n\r\n### Referenced Source Code\r\nhttps://github.com/dotnet/machinelearning/blob/master/docs/samples/Microsoft.ML.Samples/Dynamic/Transforms/TimeSeries/DetectIidSpike.cs\r\nThis one uses the data in Fit() call but example relies on calling engine.Predict().\r\n\r\nhttps://docs.microsoft.com/en-us/dotnet/api/microsoft.ml.timeseriescatalog.detectiidspike?view=ml-dotnet\r\nThis one passes training data to both Fit() and Transform() calls. It does not provide a way to instruct past data as norm.","Url":"https://github.com/dotnet/machinelearning/issues/4125","RelatedDescription":"Open issue \"DetectIidSpike Fit() does not train the engine. Predict() does.\" (#4125)"},{"Id":"481173854","IsPullRequest":true,"CreatedAt":"2019-08-17T04:36:24","Actor":"ganik","Number":"4117","RawContent":null,"Title":"Rename LabelColumn to LabelColumnName for MutualInformationSelector","State":"closed","Body":"To follow existing practice and match all other transforms need to rename LabelColumn to LabelColumnName. Currently in NimbusML parsing logic needs to handle LabelColumn for MI, while for rest of transformers form manifest its LabelColumnName","Url":"https://github.com/dotnet/machinelearning/pull/4117","RelatedDescription":"Closed or merged PR \"Rename LabelColumn to LabelColumnName for MutualInformationSelector\" (#4117)"},{"Id":"481818296","IsPullRequest":true,"CreatedAt":"2019-08-16T23:24:10","Actor":"pieths","Number":"4124","RawContent":null,"Title":"[WIP] Convert variable length columns in tree summaries to constant length. (Do not review)","State":"open","Body":"","Url":"https://github.com/dotnet/machinelearning/pull/4124","RelatedDescription":"Open PR \"[WIP] Convert variable length columns in tree summaries to constant length. (Do not review)\" (#4124)"},{"Id":"481422665","IsPullRequest":false,"CreatedAt":"2019-08-16T03:13:16","Actor":"eerhardt","Number":"4122","RawContent":null,"Title":"Using the wrong type with OnnxSequenceType throws an non-helpful message","State":"open","Body":"We should give the user a better exception message when they use the wrong type in their class vs. the type in an ONNX model. The current exception doesn't help point them in the right direction and only confuses them.\r\n\r\nIf you pull the following code:\r\n\r\nhttps://github.com/sethjuarez/SeeSharp/tree/c864892252880d4ef87006008823dee3b29adf9c\r\n\r\nAnd change the code to be:\r\n\r\n```C#\r\n    public class ImagePrediction\r\n    {\r\n        [ColumnName(\"classLabel\")]\r\n        [VectorType]\r\n        public string[] Prediction;\r\n\r\n        [OnnxSequenceType(typeof(IEnumerable<float>))]\r\n        public IEnumerable<float> loss;\r\n    }\r\n\r\n    public class ImageInput\r\n    {\r\n        [ImageType(224, 224)]\r\n        public Bitmap Image { get; set; }\r\n    }\r\n\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            var modelFile = Directory.EnumerateFiles(\".\", \"*.onnx\").FirstOrDefault();\r\n            Console.WriteLine($\"Attempting to load {modelFile}...\");\r\n            var predictor = LoadModel(modelFile);\r\n\r\n\r\n            Console.WriteLine(\"\\n\\nReading Folder...\");\r\n            foreach (var file in Directory.EnumerateFiles(\"images\", \"*.jpg\"))\r\n            {\r\n                Console.WriteLine(file);\r\n                var output = predictor.Predict(new ImageInput { Image = (Bitmap)Image.FromFile(file) });\r\n                Console.WriteLine($\"Label: {output.Prediction[0]}\");\r\n                var loss = output.loss.FirstOrDefault();\r\n                Console.WriteLine($\"\\t{loss}\");\r\n                Console.WriteLine(\"------------------------------------\\n\\n\");\r\n            }\r\n            \r\n            Console.ReadKey();\r\n        }\r\n```\r\n\r\nYou get the following exception:\r\n\r\n```\r\nUnhandled Exception: System.ArgumentOutOfRangeException: Could not determine an IDataView type for member loss\r\nParameter name: rawType\r\n   at Microsoft.ML.Data.InternalSchemaDefinition.GetVectorAndItemType(String name, Type rawType, IEnumerable`1 attributes, Boolean& isVector, Type& itemType)\r\n   at Microsoft.ML.Data.SchemaDefinition.Create(Type userType, Direction direction)\r\n   at Microsoft.ML.Data.TypedCursorable`1.Create(IHostEnvironment env, IDataView data, Boolean ignoreMissingColumns, SchemaDefinition schemaDefinition)\r\n   at Microsoft.ML.PredictionEngineBase`2.PredictionEngineCore(IHostEnvironment env, InputRow`1 inputRow, IRowToRowMapper mapper, Boolean ignoreMissingColumns, SchemaDefinition outputSchemaDefinition, Action& disposer, IRowReadableAs`1& outputRow)\r\n   at Microsoft.ML.PredictionEngineBase`2..ctor(IHostEnvironment env, ITransformer transformer, Boolean ignoreMissingColumns, SchemaDefinition inputSchemaDefinition, SchemaDefinition outputSchemaDefinition)\r\n   at Microsoft.ML.PredictionEngineExtensions.CreatePredictionEngine[TSrc,TDst](ITransformer transformer, IHostEnvironment env, Boolean ignoreMissingColumns, SchemaDefinition inputSchemaDefinition, SchemaDefinition outputSchemaDefinition)\r\n   at SeeSharp.Program.LoadModel(String onnxModelFilePath) in /Users/eerhardt/git/SeeSharp/SeeSharp/Program.cs:line 72\r\n   at SeeSharp.Program.Main(String[] args) in /Users/eerhardt/git/SeeSharp/SeeSharp/Program.cs:line 38\r\n```\r\n\r\nWhen the error here is that the Onnx model expects the `loss` property to be \r\n```C#\r\n        [OnnxSequenceType(typeof(IDictionary<string, float>))]\r\n        public IEnumerable<IDictionary<string, float>> loss;\r\n```\r\n\r\nBut when you use the wrong type (like I did above), you get this unhelpful exception.\r\n\r\nInstead the message should tell you that \"The expected type `IEnumerable<IDictionary<string, float>>` does not match the type of the `loss` property: `IEnumerable<float>`. Please change the loss property to `IEnumerable<IDictionary<string, float>>`\"\r\n\r\n/cc @wschin ","Url":"https://github.com/dotnet/machinelearning/issues/4122","RelatedDescription":"Open issue \"Using the wrong type with OnnxSequenceType throws an non-helpful message\" (#4122)"},{"Id":"481420620","IsPullRequest":false,"CreatedAt":"2019-08-16T03:02:04","Actor":"eerhardt","Number":"4121","RawContent":null,"Title":"Using OnnxSequenceType and ColumnName attributes together doesn't work","State":"open","Body":"If you have both `OnnxSequenceType` and `ColumnName` attributes on a property, ML.NET gets confused and throws an exception.\r\n\r\nFor example, if you pull the following code: \r\n\r\nhttps://github.com/sethjuarez/SeeSharp/tree/c864892252880d4ef87006008823dee3b29adf9c\r\n\r\nAnd change the ImagePrediction class to be:\r\n\r\n```\r\n    public class ImagePrediction\r\n    {\r\n        [ColumnName(\"classLabel\")]\r\n        [VectorType]\r\n        public string[] Prediction;\r\n\r\n        [ColumnName(\"loss\")]\r\n        [OnnxSequenceType(typeof(IDictionary<string, float>))]\r\n        public IEnumerable<IDictionary<string, float>> Loss;\r\n    }\r\n```\r\n\r\n(You will also need to change 1 place in the `Main` method to change from `output.loss.FirstOrDefault();` to `output.Loss.FirstOrDefault();` from the rename.)\r\n\r\nYou get an error:\r\n\r\n```\r\nUnhandled Exception: System.ArgumentOutOfRangeException: Could not determine an IDataView type for member Loss\r\nParameter name: rawType\r\n   at Microsoft.ML.Data.InternalSchemaDefinition.GetVectorAndItemType(String name, Type rawType, IEnumerable`1 attributes, Boolean& isVector, Type& itemType)\r\n   at Microsoft.ML.Data.SchemaDefinition.Create(Type userType, Direction direction)\r\n   at Microsoft.ML.Data.TypedCursorable`1.Create(IHostEnvironment env, IDataView data, Boolean ignoreMissingColumns, SchemaDefinition schemaDefinition)\r\n   at Microsoft.ML.PredictionEngineBase`2.PredictionEngineCore(IHostEnvironment env, InputRow`1 inputRow, IRowToRowMapper mapper, Boolean ignoreMissingColumns, SchemaDefinition outputSchemaDefinition, Action& disposer, IRowReadableAs`1& outputRow)\r\n   at Microsoft.ML.PredictionEngineBase`2..ctor(IHostEnvironment env, ITransformer transformer, Boolean ignoreMissingColumns, SchemaDefinition inputSchemaDefinition, SchemaDefinition outputSchemaDefinition)\r\n   at Microsoft.ML.PredictionEngineExtensions.CreatePredictionEngine[TSrc,TDst](ITransformer transformer, IHostEnvironment env, Boolean ignoreMissingColumns, SchemaDefinition inputSchemaDefinition, SchemaDefinition outputSchemaDefinition)\r\n   at SeeSharp.Program.LoadModel(String onnxModelFilePath) in /Users/eerhardt/git/SeeSharp/SeeSharp/Program.cs:line 76\r\n   at SeeSharp.Program.Main(String[] args) in /Users/eerhardt/git/SeeSharp/SeeSharp/Program.cs:line 39\r\n```\r\n\r\nThis should work. The program works if you remove the `ColumnName` attribute.  And fails with the above as soon as you add the `ColumnName` attribute.\r\n\r\n/cc @wschin ","Url":"https://github.com/dotnet/machinelearning/issues/4121","RelatedDescription":"Open issue \"Using OnnxSequenceType and ColumnName attributes together doesn't work\" (#4121)"},{"Id":"481418348","IsPullRequest":false,"CreatedAt":"2019-08-16T02:49:40","Actor":"eerhardt","Number":"4120","RawContent":null,"Title":"Using default OnnxSequenceType attribute throws meaningless exception","State":"open","Body":"Pull the code at this commit and run the application - https://github.com/sethjuarez/SeeSharp/tree/b6a7e8a0094b99af05bc72528a2c6e306abbf7cd\r\n\r\nThe code of interest is:\r\n\r\n```C# \r\n    public class ImagePrediction\r\n    {\r\n        [ColumnName(\"classLabel\")]\r\n        [VectorType]\r\n        public string[] Prediction;\r\n\r\n\r\n        [ColumnName(\"loss\")]\r\n        [OnnxSequenceType]\r\n        public List<float> Loss;\r\n    }\r\n```\r\n\r\nYou get the following error:\r\n\r\n```\r\nUnhandled Exception: System.ArgumentNullException: Value cannot be null.\r\n   at System.RuntimeType.MakeGenericType(Type[] instantiation)\r\n   at Microsoft.ML.Transforms.Onnx.OnnxSequenceTypeAttribute.Register()\r\n   at Microsoft.ML.Data.SchemaDefinition.Create(Type userType, Direction direction)\r\n   at Microsoft.ML.Data.TypedCursorable`1.Create(IHostEnvironment env, IDataView data, Boolean ignoreMissingColumns, SchemaDefinition schemaDefinition)\r\n   at Microsoft.ML.PredictionEngineBase`2.PredictionEngineCore(IHostEnvironment env, InputRow`1 inputRow, IRowToRowMapper mapper, Boolean ignoreMissingColumns, SchemaDefinition outputSchemaDefinition, Action& disposer, IRowReadableAs`1& outputRow)\r\n   at Microsoft.ML.PredictionEngineBase`2..ctor(IHostEnvironment env, ITransformer transformer, Boolean ignoreMissingColumns, SchemaDefinition inputSchemaDefinition, SchemaDefinition outputSchemaDefinition)\r\n   at Microsoft.ML.PredictionEngineExtensions.CreatePredictionEngine[TSrc,TDst](ITransformer transformer, IHostEnvironment env, Boolean ignoreMissingColumns, SchemaDefinition inputSchemaDefinition, SchemaDefinition outputSchemaDefinition)\r\n   at SeeSharp.Program.LoadModel(String onnxModelFilePath) in /Users/eerhardt/git/SeeSharp/SeeSharp/Program.cs:line 70\r\n   at SeeSharp.Program.Main(String[] args) in /Users/eerhardt/git/SeeSharp/SeeSharp/Program.cs:line 39\r\n```\r\n\r\nIt looks like the code here:\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/0c0789f8eba1e47f6fa759de01f99588e560935c/src/Microsoft.ML.OnnxTransformer/OnnxSequenceType.cs#L95-L100\r\n\r\nIs expecting `_elemType` to never be null.  However, that is exactly what happens when you use the default attribute:\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/0c0789f8eba1e47f6fa759de01f99588e560935c/src/Microsoft.ML.OnnxTransformer/OnnxSequenceType.cs#L57-L64\r\n\r\nI don't think having a default constructor is right with this attribute - you can't use this sequence attribute without specifying an element type.\r\n\r\n/cc @wschin ","Url":"https://github.com/dotnet/machinelearning/issues/4120","RelatedDescription":"Open issue \"Using default OnnxSequenceType attribute throws meaningless exception\" (#4120)"},{"Id":"481268942","IsPullRequest":false,"CreatedAt":"2019-08-15T18:06:57","Actor":"cookt","Number":"4119","RawContent":null,"Title":"Does this only apply to numeric columns?","State":"open","Body":"It would be good to call out which column types this applies to and for each column type what could be considered a 'missing' value (empty string, 0, null, etc.)\n\n---\n#### Document Details\n\n⚠ *Do not edit this section. It is required for docs.microsoft.com ➟ GitHub issue linking.*\n\n* ID: 3725a2c2-9121-a125-a2c1-ffa5bb799e17\n* Version Independent ID: d5e97e37-927e-5f3a-f219-78f972d6e371\n* Content: [DataOperationsCatalog.FilterRowsByMissingValues(IDataView, String\\[\\]) Method (Microsoft.ML)](https://docs.microsoft.com/en-us/dotnet/api/microsoft.ml.dataoperationscatalog.filterrowsbymissingvalues?view=ml-dotnet)\n* Content Source: [dotnet/xml/Microsoft.ML/DataOperationsCatalog.xml](https://github.com/dotnet/ml-api-docs/blob/live/dotnet/xml/Microsoft.ML/DataOperationsCatalog.xml)\n* Product: **dotnet-ml-api**\n* GitHub Login: @sfilipi\n* Microsoft Alias: **johalex**","Url":"https://github.com/dotnet/machinelearning/issues/4119","RelatedDescription":"Open issue \"Does this only apply to numeric columns?\" (#4119)"},{"Id":"481258796","IsPullRequest":true,"CreatedAt":"2019-08-15T17:40:43","Actor":"PranovD","Number":"4118","RawContent":null,"Title":"Added caching for Training Transfer Learning","State":"open","Body":"\r\n1. Added caching for featurized data when Training\r\n2. Added callback parameter for metrics when Training\r\n3. Added ability to buffer custom batch size tensors\r\n4. Added parameter for validation set\r\n","Url":"https://github.com/dotnet/machinelearning/pull/4118","RelatedDescription":"Open PR \"Added caching for Training Transfer Learning\" (#4118)"},{"Id":"481150441","IsPullRequest":true,"CreatedAt":"2019-08-15T13:27:41","Actor":"ganik","Number":"4116","RawContent":null,"Title":"draft","State":"closed","Body":"online learning","Url":"https://github.com/dotnet/machinelearning/pull/4116","RelatedDescription":"Closed or merged PR \"draft\" (#4116)"},{"Id":"480927197","IsPullRequest":true,"CreatedAt":"2019-08-14T23:10:01","Actor":"eerhardt","Number":"4115","RawContent":null,"Title":"Update to .NET Core 3.0 preview8","State":"open","Body":".NET Core preview 8 shipped yesterday. We should use it in our CI to ensure ML.NET runs correctly on the latest bits.\r\n","Url":"https://github.com/dotnet/machinelearning/pull/4115","RelatedDescription":"Open PR \"Update to .NET Core 3.0 preview8\" (#4115)"},{"Id":"480917982","IsPullRequest":false,"CreatedAt":"2019-08-14T22:33:23","Actor":"Dmitry-A","Number":"4114","RawContent":null,"Title":"[AutoML] refactor internal benchmarking so it doesn't need internalsvisible AutoML","State":"open","Body":"The reason we use internalsvisible currently is to be able to see what pipleline did an iteration run, including all the details like hyperparam values.  It is present in an internal AutoML structure.\r\n\r\nIdeal solution to this is if ML.NET starts supporting an interface that allows exploring an istantiated pipeline.\r\n\r\nSecond best, we can come up with some logging or ToString() solutions that will expose what we need.","Url":"https://github.com/dotnet/machinelearning/issues/4114","RelatedDescription":"Open issue \"[AutoML] refactor internal benchmarking so it doesn't need internalsvisible AutoML\" (#4114)"},{"Id":"480847294","IsPullRequest":false,"CreatedAt":"2019-08-14T19:23:44","Actor":"CESARDELATORRE","Number":"4113","RawContent":null,"Title":"ML.NET API for Explainability and Interpretability targeting Deep Learning models","State":"open","Body":"Our current model explainability APIs targets ML classic algorithms in ML.NET.\r\n\r\nWe'll need something comparable for deep learning models where explainability and interpretability is a lot harder since deep learning models are much more \"black boxes\" than classic ML models. (Note that [explainability and interpretability are related but are not the same concepts](https://www.kdnuggets.com/2018/12/machine-learning-explainability-interpretability-ai.html))\r\n\r\nDeep Learning models can achieve high accuracy but at the expense of high abstraction (i.e. accuracy vs interpretability problem), however, modern research is enabling interpretability for deep learning models, see related article:\r\n\r\nhttps://towardsdatascience.com/interpretability-of-deep-learning-models-9f52e54d72ab \r\n\r\nAfter our deep learning training approaches are in place through transfer-learning, this is an area to explore and implement for the users.","Url":"https://github.com/dotnet/machinelearning/issues/4113","RelatedDescription":"Open issue \"ML.NET API for Explainability and Interpretability targeting Deep Learning models\" (#4113)"},{"Id":"480400988","IsPullRequest":true,"CreatedAt":"2019-08-14T15:41:33","Actor":"eerhardt","Number":"4108","RawContent":null,"Title":"Update official build and CI to run on macOS 10.13.","State":"closed","Body":"The official build is currently broken because it uses macOS 10.12, which is not supported with .NET Core 3.0. I also updated the CI to run on macOS 10.13, since that is supported and our tests are currently running on 10.14.\r\n\r\nAlso update the building instructions to reflect the new requirement to build for .NET Core 3.0.\r\n\r\nSince we are building for .NET Core 3.0, we now require VS 2019 Update 3, which is in preview right now. It can be downloaded from https://visualstudio.microsoft.com/vs/preview/.","Url":"https://github.com/dotnet/machinelearning/pull/4108","RelatedDescription":"Closed or merged PR \"Update official build and CI to run on macOS 10.13.\" (#4108)"},{"Id":"480659002","IsPullRequest":false,"CreatedAt":"2019-08-14T12:46:32","Actor":"RussellKirkwood","Number":"4112","RawContent":null,"Title":"Get Error when Loading Model. System.Reflection.TargetInvocationException: Exception has been thrown by the target of an invocation. ---> System.DllNotFoundException: Unable to load DLL 'tensorflow' or one of its dependencies","State":"open","Body":"- Azure Function App: runtime version 2.0.12625.0\r\n- .NET Core 2.1: \r\n\r\nITransformer trainedModel = mlContext.Model.Load(stream, out modelInputSchema);\r\nWhen loading Model into ITransformer I get the following error:\r\n\r\n\r\nSystem.Reflection.TargetInvocationException: Exception has been thrown by the target of an invocation. ---> System.DllNotFoundException: Unable to load DLL 'tensorflow' or one of its dependencies: The specified module could not be found. (Exception from HRESULT: 0x8007007E)\r\n   at Tensorflow.c_api.TF_NewGraph()\r\n   at Tensorflow.Graph..ctor()\r\n   at Microsoft.ML.Transforms.Dnn.DnnUtils.LoadTFSession(IExceptionContext ectx, Byte[] modelBytes, String modelFile)\r\n   at Microsoft.ML.Transforms.TensorFlowTransformer.Create(IHostEnvironment env, ModelLoadContext ctx)\r\n   --- End of inner exception stack trace ---\r\n   at System.RuntimeMethodHandle.InvokeMethod(Object target, Object[] arguments, Signature sig, Boolean constructor, Boolean wrapExceptions)\r\n   at System.Reflection.RuntimeMethodInfo.Invoke(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)\r\n   at Microsoft.ML.Runtime.ComponentCatalog.LoadableClassInfo.CreateInstanceCore(Object[] ctorArgs)\r\n   at Microsoft.ML.Runtime.ComponentCatalog.LoadableClassInfo.CreateInstance(IHostEnvironment env, Object args, Object[] extra)\r\n   at Microsoft.ML.Runtime.ComponentCatalog.TryCreateInstance[TRes](IHostEnvironment env, Type signatureType, TRes& result, String name, String options, Object[] extra)\r\n   at Microsoft.ML.Runtime.ComponentCatalog.TryCreateInstance[TRes,TSig](IHostEnvironment env, TRes& result, String name, String options, Object[] extra)\r\n   at Microsoft.ML.ModelLoadContext.TryLoadModelCore[TRes,TSig](IHostEnvironment env, TRes& result, Object[] extra)\r\n   at Microsoft.ML.ModelLoadContext.TryLoadModel[TRes,TSig](IHostEnvironment env, TRes& result, RepositoryReader rep, Entry ent, String dir, Object[] extra)\r\n   at Microsoft.ML.ModelLoadContext.LoadModel[TRes,TSig](IHostEnvironment env, TRes& result, RepositoryReader rep, Entry ent, String dir, Object[] extra)\r\n   at Microsoft.ML.ModelLoadContext.LoadModelOrNull[TRes,TSig](IHostEnvironment env, TRes& result, RepositoryReader rep, String dir, Object[] extra)\r\n   at Microsoft.ML.ModelLoadContext.LoadModelOrNull[TRes,TSig](IHostEnvironment env, TRes& result, String name, Object[] extra)\r\n   at Microsoft.ML.ModelLoadContext.LoadModel[TRes,TSig](IHostEnvironment env, TRes& result, String name, Object[] extra)\r\n   at Microsoft.ML.Data.TransformerChain`1..ctor(IHostEnvironment env, ModelLoadContext ctx)\r\n   at Microsoft.ML.Data.TransformerChain.Create(IHostEnvironment env, ModelLoadContext ctx)\r\n\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/4112","RelatedDescription":"Open issue \"Get Error when Loading Model. System.Reflection.TargetInvocationException: Exception has been thrown by the target of an invocation. ---> System.DllNotFoundException: Unable to load DLL 'tensorflow' or one of its dependencies\" (#4112)"},{"Id":"480553841","IsPullRequest":false,"CreatedAt":"2019-08-14T08:41:31","Actor":"nfnpmc","Number":"4111","RawContent":null,"Title":"ImageDataViewType produces different outputs","State":"open","Body":"In one program I have\nvar builder = new DataViewSchema.Builder();\n                builder.AddColumn(\"Label\", TextDataViewType.Instance);\n                ImageDataViewType imDT = new ImageDataViewType();\n                builder.AddColumn(\"Image\", imDT);\n                lSchema = builder.ToSchema();\nand the imDT.Rawtype is {System.Drawing.Bitmap}. This works perfectly when the lSchema is used in  CreatePredictionEngine.\nIn another program I have\n                DataViewSchema.Builder builder = new DataViewSchema.Builder();\n                builder.AddColumn(\"Label\", TextDataViewType.Instance);\n                ImageDataViewType imDT = new ImageDataViewType();\n                builder.AddColumn(\"Image\", imDT);\n                lSchema = builder.ToSchema();\nwhere inDT RawType is {Name = \"Bitmap\" FullName = \"System.Drawing.Bitmap\"}\nwhich preduces the error {\"Could not determine an IDataView type for member Image\\r\\nParameter name: rawType\"}.\nI am trying to eliminate the original exception of {\"Could not determine an IDataView type for member Image\\r\\nParameter name: rawType\"}\n\n\n\n\n---\n#### Document Details\n\n⚠ *Do not edit this section. It is required for docs.microsoft.com ➟ GitHub issue linking.*\n\n* ID: 78deb193-fc79-6814-c8e8-30ab50febfa9\n* Version Independent ID: 9c3da030-2aef-37b3-40da-c63ff9c85780\n* Content: [ImageDataViewType Class (Microsoft.ML.Transforms.Image)](https://docs.microsoft.com/en-us/dotnet/api/microsoft.ml.transforms.image.imagedataviewtype?view=ml-dotnet-1.0.0)\n* Content Source: [dotnet/xml/Microsoft.ML.Transforms.Image/ImageDataViewType.xml](https://github.com/dotnet/ml-api-docs/blob/live/dotnet/xml/Microsoft.ML.Transforms.Image/ImageDataViewType.xml)\n* Product: **dotnet-ml-api**\n* GitHub Login: @sfilipi\n* Microsoft Alias: **johalex**","Url":"https://github.com/dotnet/machinelearning/issues/4111","RelatedDescription":"Open issue \"ImageDataViewType produces different outputs\" (#4111)"},{"Id":"480307575","IsPullRequest":true,"CreatedAt":"2019-08-13T18:40:54","Actor":"harishsk","Number":"4107","RawContent":null,"Title":"Updated docs to include PredictedLabel member","State":"open","Body":"Fixes #4024 \r\n","Url":"https://github.com/dotnet/machinelearning/pull/4107","RelatedDescription":"Open PR \"Updated docs to include PredictedLabel member\" (#4107)"},{"Id":"480019528","IsPullRequest":false,"CreatedAt":"2019-08-13T08:13:45","Actor":"MaxAkbar","Number":"4106","RawContent":null,"Title":"Cluster Documents","State":"open","Body":"Is there a way to cluster documents\\text. Looking at the documentation [KMeansTrainer Class](https://docs.microsoft.com/en-us/dotnet/api/microsoft.ml.trainers.kmeanstrainer?view=ml-dotnet) is using single as the input type. Is there a way to extend or perhaps something in a future version?\r\n\r\nI know that I can use classification but that requires a lot of work as I have many documents.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/4106","RelatedDescription":"Open issue \"Cluster Documents\" (#4106)"}],"ResultType":"GitHubIssue"}},"RunOn":"2019-08-21T05:30:41.1346194Z","RunDurationInMilliseconds":1037}