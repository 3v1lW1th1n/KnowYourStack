{"Data":{"Blog":{"FeedItems":[{"Title":"Attend A .NET Conf Event Near You!","PublishedOn":"2018-08-15T20:29:28+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"If you have not yet heard of the .NET Conf, it is a FREE, 3-day virtual developer event co-organized by the .NET community and Microsoft. There is a wide selection of live sessions with feature...","Href":"https://blog.xamarin.com/attend-a-net-conf-event-near-you/","RawContent":null},{"Title":"Preview: iOS 12 development with Xamarin","PublishedOn":"2018-08-10T16:30:10+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"The latest Xamarin preview release supports Xcode 10 beta 5, which includes beta SDKs for iOS 12, macOS Mojave (10.14), watchOS 5, and tvOS 12. Get Started With New iOS 12 APIs Today: iOS 12 includes...","Href":"https://blog.xamarin.com/preview-ios-12-development-with-xamarin/","RawContent":null},{"Title":"Securing network traffic with TLS 1.2","PublishedOn":"2018-08-07T15:58:03+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Secure and encrypted network communications are a crucial part of mobile application development. Without some kind of security around the communication layer, it is trivial for a third party to...","Href":"https://blog.xamarin.com/securing-network-traffic-with-tls-1-2/","RawContent":null},{"Title":"Adaptive Mobile Designs with FlexLayout","PublishedOn":"2018-08-03T17:33:49+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Xamarin.Forms is fantastic for quickly shipping a single code base to multiple platforms and devices. As soon as you are present on all those different screens, you need to make sure your UI looks as...","Href":"https://blog.xamarin.com/adaptive-mobile-designs-with-flexlayout/","RawContent":null},{"Title":"Xamarin and .NET Developer Events in August!","PublishedOn":"2018-08-01T19:46:13+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"This year&#8217;s .NET Conf is coming to you September 12 &#8211; 14, 2018! Over the course of the three days, you have a wide selection of live sessions that feature speakers from the community and...","Href":"https://blog.xamarin.com/xamarin-dotnet-developer-events-august/","RawContent":null},{"Title":"Guest Post: Visual UI tests on iOS simulator using Xamarin and Appium","PublishedOn":"2018-07-30T19:07:52+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"This is a guest post from Sophie Tagar, a customer support engineer at Applitools. Previously, Sophie was a software developer at Matrix Israel where, among other things, she did full stack...","Href":"https://blog.xamarin.com/visual-ui-tests-ios-simulator-using-xamarin-appium/","RawContent":null},{"Title":"Announcing Xamarin.Android 9.0 (P) Preview","PublishedOn":"2018-07-27T16:11:10+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Android 9.0 (P) introduces many features such as Wi-Fi RTT(Round-Trip-Time), Display cutout support, Notification enhancements, Multi-camera support, and much more. We&#8217;re excited to announce...","Href":"https://blog.xamarin.com/xamarin-android-9-0-p-preview/","RawContent":null},{"Title":"Previewing Files Inside Your Xamarin.iOS App","PublishedOn":"2018-07-25T18:21:06+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"If your app interacts with files, such as email attachments or photos, allowing users to preview those files without leaving your app is a great way to enhance the user&#8217;s experience....","Href":"https://blog.xamarin.com/previewing-files-with-xamarin-ios/","RawContent":null},{"Title":"Xamarin.Forms 3.1: Improving the Little Things","PublishedOn":"2018-07-18T19:27:37+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Earlier this year, we surveyed Xamarin.Forms developers about the kinds of custom controls and extra platform code being written repeatedly that should be considered for support “in the box”. From...","Href":"https://blog.xamarin.com/xamarin-forms-3-1-improvments/","RawContent":null},{"Title":"Export To Application Insights With AppCenter Continuous Export","PublishedOn":"2018-07-10T03:35:38+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Five-star mobile apps have one special feature: they don’t let go of their users. This can be achieved by understanding your app, the app’s users, and how these users interact with your app. The deep...","Href":"https://blog.xamarin.com/appcenter-continuous-export-application-insights/","RawContent":null}],"ResultType":"Feed"},"Android":{"Events":[{"Id":"8119996653","Type":"IssuesEvent","CreatedAt":"2018-08-15T23:57:19","Actor":"guygodin","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/2073","RelatedDescription":"Opened issue \"SslStream has horrible performance, high number of allocations\" (#2073) at xamarin/xamarin-android","RelatedBody":"### Steps to Reproduce\r\n\r\n1. Run the Windows project on its own\r\n2. Run the Android project with the Xamarin profiler\r\n3. Observe the insane number of allocations performed by the SslStream on the Android side to read 100MB of data from the network\r\n\r\n[SslStreamPerformance.zip](https://github.com/xamarin/xamarin-android/files/2292030/SslStreamPerformance.zip)\r\n\r\n<!--\r\nIf you have a repro project, you may drag & drop the .zip/etc. onto the issue editor to attach it.\r\n-->\r\n\r\n### Expected Behavior\r\nThere should be a minimal number of allocations compared to reading from the unencrypted stream\r\n\r\n### Actual Behavior\r\nOver 590MB of objects are allocated to transfer 100MB of data which ends up tanking performance on Android.\r\n\r\n### Version Information\r\n\r\n<!--\r\n1. On macOS and within Visual Studio, select Visual Studio > About Visual Studio, then click the Show Details button, then click the Copy Information button.\r\n\r\n2. Paste below this comment block.\r\n-->\r\n\r\nMicrosoft Visual Studio Enterprise 2017  (2)\r\nVersion 15.8.0\r\nVisualStudio.15.Release/15.8.0+28010.0\r\nMicrosoft .NET Framework\r\nVersion 4.7.03062\r\n\r\nInstalled Version: Enterprise\r\n\r\nC# Tools   2.9.0-beta8-63208-01\r\nC# components used in the IDE. Depending on your project type and settings, a different version of the compiler may be used.\r\n\r\nCommon Azure Tools   1.10\r\nProvides common services for use by Azure Mobile Services and Microsoft Azure Tools.\r\n\r\nMerq   1.1.38 (5b3c069)\r\nCommand Bus, Event Stream and Async Manager for Visual Studio extensions.\r\n\r\nMicrosoft JVM Debugger   1.0\r\nProvides support for connecting the Visual Studio debugger to JDWP compatible Java Virtual Machines\r\n\r\nMicrosoft MI-Based Debugger   1.0\r\nProvides support for connecting Visual Studio to MI compatible debuggers\r\n\r\nMono Debugging for Visual Studio   4.11.7-pre (8955b2a)\r\nSupport for debugging Mono processes with Visual Studio.\r\n\r\nNuGet Package Manager   4.6.0\r\nNuGet Package Manager in Visual Studio. For more information about NuGet, visit http://docs.nuget.org/.\r\n\r\nProjectServicesPackage Extension   1.0\r\nProjectServicesPackage Visual Studio Extension Detailed Info\r\n\r\nResourcePackage Extension   1.0\r\nResourcePackage Visual Studio Extension Detailed Info\r\n\r\nResourcePackage Extension   1.0\r\nResourcePackage Visual Studio Extension Detailed Info\r\n\r\nVisual Basic Tools   2.9.0-beta8-63208-01\r\nVisual Basic components used in the IDE. Depending on your project type and settings, a different version of the compiler may be used.\r\n\r\nVisual F# Tools 10.2 for F# 4.5   15.8.0.0.  Commit Hash: c55dd2c3d618eb93a8d16e503947342b1fa93556.\r\nMicrosoft Visual F# Tools 10.2 for F# 4.5\r\n\r\nVisual Studio Code Debug Adapter Host Package   1.0\r\nInterop layer for hosting Visual Studio Code debug adapters in Visual Studio\r\n\r\nVisualStudio.Mac   1.0\r\nMac Extension for Visual Studio\r\n\r\nXamarin   4.11.0.732 (d15-8@33e83e124)\r\nVisual Studio extension to enable development for Xamarin.iOS and Xamarin.Android.\r\n\r\nXamarin Designer   4.14.218 (79f535bdd)\r\nVisual Studio extension to enable Xamarin Designer tools in Visual Studio.\r\n\r\nXamarin Templates   1.1.113 (e1d02a7)\r\nTemplates for building iOS, Android, and Windows apps with Xamarin and Xamarin.Forms.\r\n\r\nXamarin.Android SDK   9.0.0.18 (HEAD/3d8a28f1a)\r\nXamarin.Android Reference Assemblies and MSBuild support.\r\n\r\nXamarin.iOS and Xamarin.Mac SDK   11.14.0.13 (373c313)\r\nXamarin.iOS and Xamarin.Mac Reference Assemblies and MSBuild support.\r\n\r\n### Log File\r\n\r\n<!--\r\n1. On macOS and within Visual Studio:\r\n    a. Click **Tools** > **SDK Command Prompt**.\r\n    b. Within the launched `Terminal.app` window, run:\r\n\r\n            adb logcat -d | pbcopy\r\n\r\n2. Paste below this comment block\r\n-->\r\n\r\n\r\n\r\n<!--\r\nSwitch to the \"Preview\" tab to ensure your issue renders correctly.\r\n\r\nPlease add an appropriate \"Area:\" label in the Labels section.\r\n-->"},{"Id":"8119414162","Type":"IssuesEvent","CreatedAt":"2018-08-15T21:16:08","Actor":"georgi8706","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/2072","RelatedDescription":"Opened issue \"Members of a singleTop activity in background are finalized\" (#2072) at xamarin/xamarin-android","RelatedBody":"### Steps to Reproduce\r\n\r\n1. Create an activity with a singleTop launch mode and add a class member of type ObservableCollection or LruCache.\r\n  \r\n2. Create a second activity with a parent the first activity.\r\n \r\n3. Run the app and from the first activity (which is the main activity) start the second activity.\r\n\r\n4. Now do some resource consumption operation as loading a bitmap.\r\n\r\nThe result is JavaFinalize() is called on the member of the first activity. This is not acceptable! The instance of the first activity is still alive, but some members are disposed (Java.Lang.Object Handle becomes null). When I return back to the first activity that member is already disposed  (OnCreate is not called because of the singleTop mode).\r\n\r\n### Expected Behavior\r\nAll members of the first activity should be alive. \r\n\r\n### Actual Behavior\r\nSome of the members of the first activity are disposed.\r\n\r\n### Version Information\r\nXamarin Android SDK 8.3.3.2. \r\n\r\nReproduced on a real device (LG G4C) running Android API 23.\r\n\r\nVisual Studio Community version 15.7.5. "},{"Id":"8119142772","Type":"PullRequestEvent","CreatedAt":"2018-08-15T20:20:34","Actor":"rubo","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2071","RelatedDescription":"Opened pull request \"Fixed the issue #1931\" (#2071) at xamarin/xamarin-android","RelatedBody":"HTTP headers `Server` and `User-Agent` must use space symbol as a separator instead of comma as defined in [RFC 7231](https://tools.ietf.org/html/rfc7231). Implemented this requirement similar to what have been done for NSUrlSessionHandler.cs in Xamarin.iOS.\r\n\r\nSee the issue #1931\r\n"},{"Id":"8118852858","Type":"PullRequestEvent","CreatedAt":"2018-08-15T19:20:10","Actor":"jonathanpeppers","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2064","RelatedDescription":"Closed pull request \"Ensured AndroidApkSigner is run on all APKs\" (#2064) at xamarin/xamarin-android","RelatedBody":"See https://github.com/xamarin/xamarin-android/issues/2060"},{"Id":"8118845854","Type":"PullRequestEvent","CreatedAt":"2018-08-15T19:18:38","Actor":"jonathanpeppers","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2070","RelatedDescription":"Opened pull request \"[Xamarin.Android.Build.Tasks] AndroidCreatePackagePerAbi APKs should be signed\" (#2070) at xamarin/xamarin-android","RelatedBody":"Fixes: https://github.com/xamarin/xamarin-android/issues/2060\r\nContext: https://github.com/xamarin/xamarin-android/pull/2064\r\nContext: https://github.com/xamarin/xamarin-android/commit/41bc8ffa0b8f21c4b41cc33fb629b433cfc5b3fd\r\n\r\nSince 41bc8ff, I believe we have had the following problem:\r\n- `$(AndroidUseApkSigner)` is `True`, this is the default now\r\n- `$(AndroidCreatePackagePerAbi)` is `True`\r\n- The per-abi APKs are not signed!\r\n\r\nI think this bug surfaced in the 15.7 timeframe.\r\n\r\nLooking at the existing code, an `ApkAbiFilesSigned` item group is\r\ncomputed at a time at which the files may not exist yet: making the\r\n`ApkAbiFilesSigned` item group empty on a first build. We used this\r\nitem group to delete existing APK files if they exist, but we also\r\nneed it sign them!\r\n\r\nWe also need to call `<AndroidApkSigner />` against *all* APKs instead\r\nof just the singal `$(ApkFileSigned)`.\r\n\r\nBuilding upon @benventive's initial PR, I added a couple changes so we\r\ncan merge this:\r\n- Added checks in an existing test to make sure `META-INF/MANIFEST.MF`\r\n  exists in the APK. This was an easy way to determine if the APKs are\r\n  signed.\r\n- A new `ApkAbiFilesSigned` item group was added after deleting the\r\n  existing files. I think it makes a little more sense (reads better)\r\n  to name them `ApkAbiFilesAligned`."},{"Id":"8118796659","Type":"PullRequestEvent","CreatedAt":"2018-08-15T19:08:19","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2067","RelatedDescription":"Merged pull request \"[Xamarin.Android.Build.Tasks] Add CancelableTask.\" (#2067) at xamarin/xamarin-android","RelatedBody":"The `ICancelableTask` is implemented by the AsyncTask\r\nso that long background processes can respond to a `Cancel`\r\nrequrest from MSBuild.\r\n\r\nThe problem here is that many of our tasks which we might\r\nwant to cancel, do not derive from `AsyncTask`. Given that\r\nallot of the time a task wont be using the features of\r\n`AsyncTask`, it makes sense to introduce a new bass class.\r\n\r\nThis new class implements `ICancelableTask` and will allow\r\nnormal `Tasks` to use those features. This can be done by\r\noverriding the `Cancel` method. Or alternatively using the\r\n`CancellationToken` property `Token` to `Register` callbacks\r\nor simply check `Token.IsCancellationRequested`.\r\n\r\n`AsyncTask` has been updated to use the new base class."},{"Id":"8118552588","Type":"IssuesEvent","CreatedAt":"2018-08-15T18:20:11","Actor":"garuma","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/2069","RelatedDescription":"Opened issue \"[Regression] Master and 15.9 break the Android designer and Forms previewer\" (#2069) at xamarin/xamarin-android","RelatedBody":"Going from:\r\n\r\n15.9: monodroid a81dd627 -> 9b8cd4e\r\nmaster: monodroid 499dd03 -> 5363cc2\r\n\r\nBreaks the our tests for the designer and previewer. The following exception now pops-up when inflating custom controls:\r\n\r\n```\r\n[Info] MonoDroid: UNHANDLED EXCEPTION:\r\n[Info] MonoDroid: System.ArgumentException: Handle must be valid.\r\n[Info] MonoDroid: Parameter name: instance\r\n[Info] MonoDroid:   at Java.Interop.JniEnvironment+InstanceMethods.CallObjectMethod (Java.Interop.JniObjectReference instance, Java.Interop.JniMethodInfo method) [0x00009] in <fc8972c36bf44e5faaab45457e87d302>:0 \r\n[Info] MonoDroid:   at Android.Runtime.JNIEnv.CallObjectMethod (System.IntPtr jobject, System.IntPtr jmethod) [0x0000e] in <d87fb528296241ff935553e737e841b0>:0 \r\n[Info] MonoDroid:   at Java.Interop.TypeManager.GetClassName (System.IntPtr class_ptr) [0x00000] in <d87fb528296241ff935553e737e841b0>:0 \r\n[Info] MonoDroid:   at Java.Interop.TypeManager.CreateInstance (System.IntPtr handle, Android.Runtime.JniHandleOwnership transfer, System.Type targetType) [0x00054] in <d87fb528296241ff935553e737e841b0>:0 \r\n[Info] MonoDroid:   at Java.Lang.Object.GetObject (System.IntPtr handle, Android.Runtime.JniHandleOwnership transfer, System.Type type) [0x000c1] in <d87fb528296241ff935553e737e841b0>:0 \r\n[Info] MonoDroid:   at Android.Runtime.JNIEnv+<>c.<CreateNativeArrayElementToManaged>b__93_9 (System.Type type, System.IntPtr source, System.Int32 index) [0x0000e] in <d87fb528296241ff935553e737e841b0>:0 \r\n[Info] MonoDroid:   at Android.Runtime.JNIEnv.GetObjectArray (System.IntPtr array_ptr, System.Type[] element_types) [0x00051] in <d87fb528296241ff935553e737e841b0>:0 \r\n[Info] MonoDroid:   at Java.Interop.TypeManager.n_Activate (System.IntPtr jnienv, System.IntPtr jclass, System.IntPtr typename_ptr, System.IntPtr signature_ptr, System.IntPtr jobject, System.IntPtr parameters_ptr) [0x000a1] in <d87fb528296241ff935553e737e841b0>:0 \r\n[Info] MonoDroid:   at (wrapper dynamic-method) System.Object.2(intptr,intptr,intptr,intptr,intptr,intptr)\r\nERROR: An exception occured while loading control md5bed1eba2499d8c032005c73fd288d4f3.InfoPane\r\nERROR: java.lang.reflect.InvocationTargetException\r\n\tat sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)\r\n\tat sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)\r\n\tat sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\r\n\tat java.lang.reflect.Constructor.newInstance(Constructor.java:423)\r\n<snip>\r\nCaused by: android.runtime.JavaProxyThrowable: System.ArgumentException: Handle must be valid.\r\nParameter name: instance\r\n  at Java.Interop.JniEnvironment+InstanceMethods.CallObjectMethod (Java.Interop.JniObjectReference instance, Java.Interop.JniMethodInfo method) [0x00009] in <fc8972c36bf44e5faaab45457e87d302>:0 \r\n  at Android.Runtime.JNIEnv.CallObjectMethod (System.IntPtr jobject, System.IntPtr jmethod) [0x0000e] in <d87fb528296241ff935553e737e841b0>:0 \r\n  at Java.Interop.TypeManager.GetClassName (System.IntPtr class_ptr) [0x00000] in <d87fb528296241ff935553e737e841b0>:0 \r\n  at Java.Interop.TypeManager.CreateInstance (System.IntPtr handle, Android.Runtime.JniHandleOwnership transfer, System.Type targetType) [0x00054] in <d87fb528296241ff935553e737e841b0>:0 \r\n  at Java.Lang.Object.GetObject (System.IntPtr handle, Android.Runtime.JniHandleOwnership transfer, System.Type type) [0x000c1] in <d87fb528296241ff935553e737e841b0>:0 \r\n  at Android.Runtime.JNIEnv+<>c.<CreateNativeArrayElementToManaged>b__93_9 (System.Type type, System.IntPtr source, System.Int32 index) [0x0000e] in <d87fb528296241ff935553e737e841b0>:0 \r\n  at Android.Runtime.JNIEnv.GetObjectArray (System.IntPtr array_ptr, System.Type[] element_types) [0x00051] in <d87fb528296241ff935553e737e841b0>:0 \r\n  at Java.Interop.TypeManager.n_Activate (System.IntPtr jnienv, System.IntPtr jclass, System.IntPtr typename_ptr, System.IntPtr signature_ptr, System.IntPtr jobject, System.IntPtr parameters_ptr) [0x000a1] in <d87fb528296241ff935553e737e841b0>:0 \r\n  at (wrapper dynamic-method) System.Object.2(intptr,intptr,intptr,intptr,intptr,intptr)\r\n  at mono.android.TypeManager.n_activate(Native Method)\r\n  at mono.android.TypeManager.Activate(TypeManager.java:10)\r\n  at md5bed1eba2499d8c032005c73fd288d4f3.InfoPane.<init>(InfoPane.java:32)\r\n  ... 20 more\r\n```"},{"Id":"8117845607","Type":"IssuesEvent","CreatedAt":"2018-08-15T15:59:54","Actor":"JonDouglas","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/1990","RelatedDescription":"Closed issue \"Application using EF Core 2.1.1 with SdkOnly linking crashes due to duplicate values returned by GetMethod\" (#1990) at xamarin/xamarin-android","RelatedBody":"This was previously mentioned in https://github.com/xamarin/xamarin-android/issues/1813#issuecomment-400888600 and reported by multiple customers in the EF Core repo at https://github.com/aspnet/EntityFrameworkCore/issues/12460. I am copying some details in this issue but feel free to find more details and reach out to customers hitting it in those links.\r\n\r\nI am forwarding the issue to Xamarin because the only plausible root cause seems to be that reflection is returning the same MethodInfo for different overloads of a method (which doesn't seem to make much sense) and given we don't have the Xamarin expertise we need someone to investigate if this is a bug or otherwise give us advice if we are doing something wrong. \r\n\r\nIn summary, the code that causes the exception is doing something like this:\r\n\r\n``` c#\r\n    var supportedMethods = new Dictionary<MethodInfo, string>\r\n        {\r\n            { typeof(Math).GetMethod(nameof(Math.Abs), new[] { typeof(double) }), \"abs\" },\r\n            { typeof(Math).GetMethod(nameof(Math.Abs), new[] { typeof(float) }), \"abs\" },\r\n            { typeof(Math).GetMethod(nameof(Math.Abs), new[] { typeof(int) }), \"abs\" },\r\n            { typeof(Math).GetMethod(nameof(Math.Abs), new[] { typeof(long) }), \"abs\" },\r\n            { typeof(Math).GetMethod(nameof(Math.Abs), new[] { typeof(sbyte) }), \"abs\" },\r\n            { typeof(Math).GetMethod(nameof(Math.Abs), new[] { typeof(short) }), \"abs\" },...\r\n```\r\n\r\nThat causes `System.ArgumentException: An item with the same key has already been added. Key: Int32 Abs(Int32)`, which seems to indicate that the MethodInfo returned for Math.Abs(int32) is the same as either Math.Abs(double) or Math.Abs(float), which doesn't make much sense.\r\n\r\nWe already suggested adding Math.Abs to LinkDescription.xml (in case GetMethod is just returning null because the actual code was removed by the linker) but customers report that this workaround does not help.\r\n\r\n### Steps to Reproduce\r\n\r\n1. Create a project that uses Microsoft.EntityFrameworkCore.SqlLite. A repro project was provided at https://github.com/aspnet/EntityFrameworkCore/issues/12460#issuecomment-403451697. \r\n2. Build the project and link it with <AndroidLinkMode>SdkOnly</AndroidLinkMode>\r\n3. Run the application\r\n\r\n### Expected Behavior\r\nApplication runs.\r\n\r\n### Actual Behavior\r\nApplication crashes with:\r\n\r\n```\r\nException message:\r\nStack trace:\r\n06-25 16:48:31.244  9279  9279 I MonoDroid: UNHANDLED EXCEPTION:\r\n06-25 16:48:31.257  9279  9279 I MonoDroid: System.TypeInitializationException: The type initializer for 'Microsoft.EntityFrameworkCore.Sqlite.Query.ExpressionTranslators.Internal.SqliteMathTranslator' threw an exception. ---> System.ArgumentException: An item with the same key has already been added. Key: Int32 Abs(Int32)\r\n06-25 16:48:31.257  9279  9279 I MonoDroid:   at System.Collections.Generic.Dictionary`2[TKey,TValue].TryInsert (TKey key, TValue value, System.Collections.Generic.InsertionBehavior behavior) <0xceeb8b14 + 0x0045c> in <c099d544051e40b89a67a87a43581f01>:0\r\n06-25 16:48:31.257  9279  9279 I MonoDroid:   at System.Collections.Generic.Dictionary`2[TKey,TValue].Add (TKey key, TValue value) <0xceeb7fd0 + 0x00013> in <c099d544051e40b89a67a87a43581f01>:0\r\n06-25 16:48:31.257  9279  9279 I MonoDroid:   at Microsoft.EntityFrameworkCore.Sqlite.Query.ExpressionTranslators.Internal.SqliteMathTranslator..cctor () <0xcd753afc + 0x00207> in <135a24207446461281bfc2c90f71e590>:0\r\n06-25 16:48:31.257  9279  9279 I MonoDroid:    --- End of inner exception stack trace ---\r\n06-25 16:48:31.257  9279  9279 I MonoDroid:   at Microsoft.EntityFrameworkCore.Query.ExpressionTranslators.RelationalCompositeMethodCallTranslator+<>c__DisplayClass5_0.<Translate>b__0 (Microsoft.EntityFrameworkCore.Query.ExpressionTranslators.IMethodCallTranslator translator) <0xcd61f2dc + 0x00044> in <b4c4c93ef655443999d2211e0c2e61cd>:0\r\n06-25 16:48:31.257  9279  9279 I MonoDroid:   at System.Linq.Enumerable+SelectListIterator`2[TSource,TResult].MoveNext () <0xce42d194 + 0x000ff> in <dd44b4af145c4bd6a0a60da9e4b5131f>:0\r\n06-25 16:48:31.257  9279  9279 I MonoDroid:   at System.Linq.Enumerable.TryGetFirst[TSource] (System.Collections.Generic.IEnumerable`1[T] source, System.Func`2[T,TResult] predicate, System.Boolean& found) <0xce415f5c + 0x000f3> in <dd44b4af145c4bd6a0a60da9e4b5131f>:0\r\n06-25 16:48:31.257  9279  9279 I MonoDroid:   at System.Linq.Enumerable.FirstOrDefault[TSource] (System.Collections.Generic.IEnumerable`1[T] source, System.Func`2[T,TResult] predicate) <0xce415c6c + 0x0003f> in <dd44b4af145c4bd6a0a60da9e4b5131f>:0\r\n06-25 16:48:31.257  9279  9279 I MonoDroid:   at Microsoft.EntityFrameworkCore.Query.ExpressionTranslators.RelationalCompositeMethodCallTranslator.Translate (System.Linq.Expressions.MethodCallExpression methodCallExpression, Microsoft.EntityFrameworkCore.Metadata.IModel model) <0xcd61ef6c + 0x002bf> in <b4c4c93ef655443999d2211e0c2e61cd>:0\r\n06-25 16:48:31.257  9279  9279 I MonoDroid:   at Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.SqlTranslatingExpressionVisitor.VisitMethodCall (System.Linq.Expressions.MethodCallExpression methodCallExpression) <0xcd614aac + 0x00393> in <b4c4c93ef655443999d2211e0c2e61cd>:0\r\n06-25 16:48:31.257  9279  9279 I MonoDroid:   at System.Linq.Expressions.MethodCallExpression.Accept (System.Linq.Expressions.ExpressionVisitor visitor) <0xce4a5000 + 0x0001b> in <dd44b4af145c4bd6a0a60da9e4b5131f>:0\r\n06-25 16:48:31.257  9279  9279 I MonoDroid:   at System.Linq.Expressions.ExpressionVisitor.Visit (System.Linq.Expressions.Expression node) <0xce49f890 + 0x00027> in <dd44b4af145c4bd6a0a60da9e4b5131f>:0\r\n06-25 16:48:31.257  9279  9279 I MonoDroid:   at Remotion.Linq.Parsing.ThrowingExpressionVisitor.Visit (System.Linq.Expressions.Expression expression) <0xce62b070 + 0x0006b> in <1081ac98085b4c0b96c42f3872e13655>:0\r\n06-25 16:48:31.257  9279  9279 I MonoDroid:   at Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.SqlTranslatingExpressionVisitor.Visit (System.Linq.Expressions.Expression expression) <0xcd613b00 + 0x0010f> in <b4c4c93ef655443999d2211e0c2e61cd>:0\r\n06-25 16:48:31.257  9279  9279 I MonoDroid:   at Microsoft.EntityFrameworkCore.Query.RelationalQueryModelVisitor.VisitWhereClause (Remotion.Linq.Clauses.WhereClause whereClause, Remotion.Linq.QueryModel queryModel, System.Int32 index) <0xcd5f7064 + 0x000ef> in <b4c4c93ef655443999d2211e0c2e61cd>:0\r\n06-25 16:48:31.257  9279  9279 I MonoDroid:   at Remotion.Linq.Clauses.WhereClause.Accept (Remotion.Linq.IQueryModelVisitor visitor, Remotion.Linq.QueryModel queryModel, System.Int32 index) <0xce63c7cc + 0x00093> in <1081ac98085b4c0b96c42f3872e13655>:0\r\n06-25 16:48:31.257  9279  9279 I MonoDroid:   at Remotion.Linq.QueryModelVisitorBase.VisitBodyClauses (System.Collections.ObjectModel.ObservableCollection`1[T] bodyClauses, Remotion.Linq.QueryModel queryModel) <0xce62e964 + 0x00167> in <1081ac98085b4c0b96c42f3872e13655>:0\r\n06-25 16:48:31.257  9279  9279 I MonoDroid:   at Remotion.Linq.QueryModelVisitorBase.VisitQueryModel (Remotion.Linq.QueryModel queryModel) <0xce62e468 + 0x0006b> in <1081ac98085b4c0b96c42f3872e13655>:0\r\n06-25 16:48:31.257  9279  9279 I MonoDroid:   at Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.VisitQueryModel (Remotion.Linq.QueryModel queryModel) <0xce6e2e08 + 0x00047> in <1a963d6bdb8d435e8dcdc28935e050ad>:0\r\n06-25 16:48:31.257  9279  9279 I MonoDroid:   at Microsoft.EntityFrameworkCore.Query.RelationalQueryModelVisitor.VisitQueryModel (Remotion.Linq.QueryModel queryModel) <0xcd5f5da0 + 0x0005f> in <b4c4c93ef655443999d2211e0c2e61cd>:0\r\n06-25 16:48:31.257  9279  9279 I MonoDroid:   at Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.CreateQueryExecutor[TResult] (Remotion.Linq.QueryModel queryModel) <0xce6e0fcc + 0x00177> in <1a963d6bdb8d435e8dcdc28935e050ad>:0\r\n06-25 16:48:31.257  9279  9279 I MonoDroid:   at Microsoft.EntityFrameworkCore.Storage.Database.CompileQuery[TResult] (Remotion.Linq.QueryModel queryModel) <0xce6c8964 + 0x000bb> in <1a963d6bdb8d435e8dcdc28935e050ad>:0\r\n06-25 16:48:31.257  9279  9279 I MonoDroid:   at Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.CompileQueryCore[TResult] (System.Linq.Expressions.Expression query, Microsoft.EntityFrameworkCore.Query.Internal.IQueryModelGenerator queryModelGenerator, Microsoft.EntityFrameworkCore.Storage.IDatabase database, Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1[TLoggerCategory] logger, System.Type contextType) <0xce70f75c + 0x0028f> in <1a963d6bdb8d435e8dcdc28935e050ad>:0\r\n06-25 16:48:31.257  9279  9279 I MonoDroid:   at Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler+<>c__DisplayClass13_0`1[TResult].<Execute>b__0 () <0xce71037c + 0x0005b> in <1a963d6bdb8d435e8dcdc28935e050ad>:0\r\n06-25 16:48:31.257  9279  9279 I MonoDroid:   at Microsoft.EntityFrameworkCore.Query.Internal.CompiledQueryCache.GetOrAddQueryCore[TFunc] (System.Object cacheKey, System.Func`1[TResult] compiler) <0xce6f70ac + 0x000c3> in <1a963d6bdb8d435e8dcdc28935e050ad>:0\r\n06-25 16:48:31.257  9279  9279 I MonoDroid:   at Microsoft.EntityFrameworkCore.Query.Internal.CompiledQueryCache.GetOrAddQuery[TResult] (System.Object cacheKey, System.Func`1[TResult] compiler) <0xce6f7024 + 0x0003b> in <1a963d6bdb8d435e8dcdc28935e050ad>:0\r\n06-25 16:48:31.257  9279  9279 I MonoDroid:   at Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.Execute[TResult] (System.Linq.Expressions.Expression query) <0xce70f47c + 0x001a7> in <1a963d6bdb8d435e8dcdc28935e050ad>:0\r\n06-25 16:48:31.257  9279  9279 I MonoDroid:   at Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryProvider.Execute[TResult] (System.Linq.Expressions.Expression expression) <0xce6f7b58 + 0x00047> in <1a963d6bdb8d435e8dcdc28935e050ad>:0\r\n06-25 16:48:31.257  9279  9279 I MonoDroid:   at System.Linq.Queryable.FirstOrDefault[TSource] (System.Linq.IQueryable`1[T] source) <0xce4096f4 + 0x000cb> in <dd44b4af145c4bd6a0a60da9e4b5131f>:0\r\n```\r\n\r\n### Version Information\r\nEF Core version: 2.1.1\r\nXamarin Andriod version not specified in original report\r\n"},{"Id":"8117415291","Type":"IssuesEvent","CreatedAt":"2018-08-15T14:45:51","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/2068","RelatedDescription":"Opened issue \"Need to review our mechanism for ensuring API compatibility\" (#2068) at xamarin/xamarin-android","RelatedBody":"I'm starting to doubt the reliability of our API compatibility infrastructure which uses `mono-api-info.exe`, `mono-api-html.exe`, and the xamarin-android-api-compatibility repo.\r\n\r\nWhat do the mono and corefx repo's do to ensure API compatibility?\r\n\r\nShould we do what they do?"}],"ResultType":"GitHubEvent"},"Forms":{"Events":[{"Id":"8120475655","Type":"IssuesEvent","CreatedAt":"2018-08-16T02:59:31","Actor":"LeeCenY","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/3580","RelatedDescription":"Opened issue \"iOS PopToRootAsync capture exception Xamarin_Forms_Platform_iOS_NavigationRenderer_ParentingViewController\" (#3580) at xamarin/Xamarin.Forms","RelatedBody":"<!-- Bug report best practices: https://github.com/xamarin/Xamarin.Forms/wiki/Submitting-Issues -->\r\n\r\n### Description\r\n\r\n### Steps to Reproduce\r\n\r\n1. \r\n```\r\ntry {\r\n    await NavigationPage.Navigation.PopToRootAsync();\r\n} catch (Exception e){\r\n    System.Diagnostics.Debug.WriteLine(e.Message); \r\n}\r\n```\r\n2. \r\nUnbalanced calls to begin/end appearance transitions for <Xamarin_Forms_Platform_iOS_NavigationRenderer_ParentingViewController: 0x7fb64b436780>.\r\n\r\n3.  \r\nWhen you don't use try catch, it doesn't crash, just enter await NavigationPage.Navigation.PopToRootAsync(); no changes on the UI\r\n\r\n### Expected Behavior\r\nJump page\r\n### Actual Behavior\r\nno changes on the UI\r\niOS has such a problem, Android is no problem\r\n### Basic Information\r\n\r\n- Version with issue: 2.5.1.444934\r\n- Last known good version:\r\n- IDE: Visual Studio Community 2017 for Mac Version 7.5.4 (build 3)\r\n- Platform Target Frameworks: <!-- All that apply -->\r\n  - iOS:  <!-- The version of the iOS SDK you are compiling against, e.g. 11.1 --> iOS 11\r\n  - Android: <!-- The version of the Android SDK you are compiling against, e.g. 7.1 --> \r\n  - UWP:  <!-- The version of the UWP SDK you are compiling against, e.g. 16299 --> \r\n- Android Support Library Version: <!-- if applicable -->\r\n- Nuget Packages:  4.3.1.4445\r\n- Affected Devices: iOS\r\n\r\n### Screenshots\r\n\r\n<!-- If the issue is a visual issue, please include screenshots showing the problem if possible -->\r\n\r\n### Reproduction Link\r\n\r\n<!-- Please upload or provide a link to a reproduction case -->\r\n"},{"Id":"8120145016","Type":"IssuesEvent","CreatedAt":"2018-08-16T00:53:08","Actor":"zekeinferno","Repository":"xamarin/","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/3579","RelatedDescription":"Opened issue \"[iOS] NullReferenceException on Binding to Span's Text\" (#3579) at xamarin/","RelatedBody":"<!-- Bug report best practices: https://github.com/xamarin/Xamarin.Forms/wiki/Submitting-Issues -->\r\n\r\n### Description\r\nIn the 3.2.0 pre-release 2 package of Xamarin Forms, binding to Spans on iOS hit a null reference exception somewhere in Xamarin.Forms.Platform.iOS.LabelExtensions.RecalculateSpanPositions().\r\n\r\n### Steps to Reproduce\r\n\r\n1. Create a Label with 2 Spans in FormattedString\r\n2. Set the 1st Span's text with anything you'd like\r\n3. Bind the 2nd Span's text to a property in the BindingContext that has not been set to anything\r\n4. Run on an iOS device or simulator\r\n\r\n### Expected Behavior\r\nThe application shows the Label with just the 1st Span's text.\r\n\r\n### Actual Behavior\r\nThe application crashes.\r\n\r\n### Basic Information\r\n\r\n- Version with issue: 3.2.0.729530-pre2\r\n- IDE: Visual Studio for Mac 7.5.2 (Build 40)\r\n- Platform Target Frameworks: <!-- All that apply -->\r\n  - iOS:  11.4\r\n- Nuget Packages: Xamarin.Forms\r\n\r\n### Screenshots\r\n\r\n<!-- If the issue is a visual issue, please include screenshots showing the problem if possible -->\r\n<img width=\"1142\" alt=\"screen shot 2018-08-15 at 3 28 20 pm\" src=\"https://user-images.githubusercontent.com/7019380/44180875-9689bf00-a0b3-11e8-9fb4-9f86e208a54b.png\">\r\n\r\n\r\n### Reproduction Link\r\n\r\n[TestingSpan.zip](https://github.com/xamarin/Xamarin.Forms/files/2292087/TestingSpan.zip)"},{"Id":"8120145016","Type":"IssuesEvent","CreatedAt":"2018-08-16T00:53:08","Actor":"zekeinferno","Repository":"xamarin/","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/3579","RelatedDescription":"Opened issue \"[iOS] NullReferenceException on Binding to Span's Text\" (#3579) at xamarin/","RelatedBody":"<!-- Bug report best practices: https://github.com/xamarin/Xamarin.Forms/wiki/Submitting-Issues -->\r\n\r\n### Description\r\nIn the 3.2.0 pre-release 2 package of Xamarin Forms, binding to Spans on iOS hit a null reference exception somewhere in Xamarin.Forms.Platform.iOS.LabelExtensions.RecalculateSpanPositions().\r\n\r\n### Steps to Reproduce\r\n\r\n1. Create a Label with 2 Spans in FormattedString\r\n2. Set the 1st Span's text with anything you'd like\r\n3. Bind the 2nd Span's text to a property in the BindingContext that has not been set to anything\r\n4. Run on an iOS device or simulator\r\n\r\n### Expected Behavior\r\nThe application shows the Label with just the 1st Span's text.\r\n\r\n### Actual Behavior\r\nThe application crashes.\r\n\r\n### Basic Information\r\n\r\n- Version with issue: 3.2.0.729530-pre2\r\n- IDE: Visual Studio for Mac 7.5.2 (Build 40)\r\n- Platform Target Frameworks: <!-- All that apply -->\r\n  - iOS:  11.4\r\n- Nuget Packages: Xamarin.Forms\r\n\r\n### Screenshots\r\n\r\n<!-- If the issue is a visual issue, please include screenshots showing the problem if possible -->\r\n<img width=\"1142\" alt=\"screen shot 2018-08-15 at 3 28 20 pm\" src=\"https://user-images.githubusercontent.com/7019380/44180875-9689bf00-a0b3-11e8-9fb4-9f86e208a54b.png\">\r\n\r\n\r\n### Reproduction Link\r\n\r\n[TestingSpan.zip](https://github.com/xamarin/Xamarin.Forms/files/2292087/TestingSpan.zip)"},{"Id":"8119388241","Type":"IssuesEvent","CreatedAt":"2018-08-15T21:10:27","Actor":"kingces95","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/3554","RelatedDescription":"Closed issue \"Xamarin forms Latest updates issue # Boolean converter issue\" (#3554) at xamarin/Xamarin.Forms","RelatedBody":"Updated Xamarin forms to 3.1  then I am facing the new issue with the forms loading from xaml in both Android and IOS.\r\n\r\nHere is the stack trace\r\n\r\nVisualElement+VisibilityConverter.ConvertFromInvariantString (System.String value)\r\nD:\\a\\1\\s\\Xamarin.Forms.Core\\VisualElement.cs - line 936\r\n\r\nSystem.InvalidOperationException: Cannot convert \" false\" into System.Boolean\r\n\r\n1\r\nVisualElement+VisibilityConverter.ConvertFromInvariantString (System.String value) D:\\a\\1\\s\\Xamarin.Forms.Core\\VisualElement.cs:936\r\n2\r\nTypeConversionExtensions.ConvertTo (System.Object value, System.Type toType, System.Func`1[TResult] getConverter, System.IServiceProvider serviceProvider) D:\\a\\1\\s\\Xamarin.Forms.Core\\Xaml\\TypeConversionExtensions.cs:118\r\n3\r\nTypeConversionExtensions.ConvertTo (System.Object value, System.Type toType, System.Func`1[TResult] minfoRetriever, System.IServiceProvider serviceProvider) D:\\a\\1\\s\\Xamarin.Forms.Core\\Xaml\\TypeConversionExtensions.cs:76\r\n4\r\nApplyPropertiesVisitor.TrySetValue (System.Object element, Xamarin.Forms.BindableProperty property, System.Boolean attached, System.Object value, System.Xml.IXmlLineInfo lineInfo, Xamarin.Forms.Xaml.Internals.XamlServiceProvider serviceProvider, System.Exception& exception) D:\\a\\1\\s\\Xamarin.Forms.Xaml\\ApplyPropertiesVisitor.cs:476\r\n5\r\nApplyPropertiesVisitor.SetPropertyValue (System.Object xamlelement, Xamarin.Forms.Xaml.XmlName propertyName, System.Object value, System.Object rootElement, Xamarin.Forms.Xaml.INode node, Xamarin.Forms.Xaml.HydrationContext context, System.Xml.IXmlLineInfo lineInfo) D:\\a\\1\\s\\Xamarin.Forms.Xaml\\ApplyPropertiesVisitor.cs:332\r\n6\r\nApplyPropertiesVisitor.Visit (Xamarin.Forms.Xaml.ValueNode node, Xamarin.Forms.Xaml.INode parentNode) D:\\a\\1\\s\\Xamarin.Forms.Xaml\\ApplyPropertiesVisitor.cs:57\r\n7\r\nValueNode.Accept (Xamarin.Forms.Xaml.IXamlNodeVisitor visitor, Xamarin.Forms.Xaml.INode parentNode) D:\\a\\1\\s\\Xamarin.Forms.Xaml\\XamlNode.cs:86\r\n8\r\nElementNode.Accept (Xamarin.Forms.Xaml.IXamlNodeVisitor visitor, Xamarin.Forms.Xaml.INode parentNode) D:\\a\\1\\s\\Xamarin.Forms.Xaml\\XamlNode.cs:143\r\n9\r\nElementNode.Accept (Xamarin.Forms.Xaml.IXamlNodeVisitor visitor, Xamarin.Forms.Xaml.INode parentNode) D:\\a\\1\\s\\Xamarin.Forms.Xaml\\XamlNode.cs:145\r\n10\r\nElementNode.Accept (Xamarin.Forms.Xaml.IXamlNodeVisitor visitor, Xamarin.Forms.Xaml.INode parentNode) D:\\a\\1\\s\\Xamarin.Forms.Xaml\\XamlNode.cs:145\r\n11\r\nElementNode.Accept (Xamarin.Forms.Xaml.IXamlNodeVisitor visitor, Xamarin.Forms.Xaml.INode parentNode) D:\\a\\1\\s\\Xamarin.Forms.Xaml\\XamlNode.cs:145\r\n12\r\nElementNode.Accept (Xamarin.Forms.Xaml.IXamlNodeVisitor visitor, Xamarin.Forms.Xaml.INode parentNode) D:\\a\\1\\s\\Xamarin.Forms.Xaml\\XamlNode.cs:145\r\n13\r\nRootNode.Accept (Xamarin.Forms.Xaml.IXamlNodeVisitor visitor, Xamarin.Forms.Xaml.INode parentNode) D:\\a\\1\\s\\Xamarin.Forms.Xaml\\XamlNode.cs:200\r\n14\r\nXamlLoader.Visit (Xamarin.Forms.Xaml.RootNode rootnode, Xamarin.Forms.Xaml.HydrationContext visitorContext) D:\\a\\1\\s\\Xamarin.Forms.Xaml\\XamlLoader.cs:143\r\n15\r\nXamlLoader.Load (System.Object view, System.String xaml) D:\\a\\1\\s\\Xamarin.Forms.Xaml\\XamlLoader.cs:89\r\n16\r\nXamlLoader.Load (System.Object view, System.Type callingType) D:\\a\\1\\s\\Xamarin.Forms.Xaml\\XamlLoader.cs:67\r\n17\r\nExtensions.LoadFromXaml[TXaml] (TXaml view, System.Type callingType)"},{"Id":"8119362912","Type":"PullRequestEvent","CreatedAt":"2018-08-15T21:05:02","Actor":"kingces95","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/3578","RelatedDescription":"Opened pull request \"Fix 3564 Null Reference Exception\" (#3578) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\n\r\nAdd null check.\r\n\r\n### Issues Resolved ###\r\n\r\n- fixes #3564 \r\n\r\n### API Changes ###\r\n\r\nNone\r\n\r\n### Platforms Affected ###\r\n\r\nAndroid\r\n\r\n### Behavioral/Visual Changes ###\r\n\r\nNone\r\n\r\n### PR Checklist ###\r\n\r\n- [ ] Has automated tests <!-- (if tests are omitted or manual, state reason in description) -->\r\n- [X] Rebased on top of the target branch at time of PR\r\n- [X] Changes adhere to coding standard\r\n"},{"Id":"8119332735","Type":"IssuesEvent","CreatedAt":"2018-08-15T20:58:53","Actor":"PureWeen","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/3577","RelatedDescription":"Opened issue \"[Enhancement] Convert all default image handling in Android over to using Glide\" (#3577) at xamarin/Xamarin.Forms","RelatedBody":"### Description\r\nHandling images in Android has always been problematic. We've made a number of improvements for a few use cases but overall it still isn't great.\r\n\r\nNatively on Android google recommends using Glide for everything image related and we should do the same thing\r\n\r\n@jonathanpeppers  has already started the work over here\r\nhttps://github.com/jonathanpeppers/glidex\r\n\r\nIdeally we can take that work and pull it into the Android Platform core. \r\nGlide can also handle things like animating gifs and efficiently caching"},{"Id":"8119236094","Type":"PullRequestEvent","CreatedAt":"2018-08-15T20:39:50","Actor":"kingces95","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/3576","RelatedDescription":"Opened pull request \"Fix 3562 Null Reference Exception\" (#3576) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\n\r\nAdd a null check.\r\n\r\n### Issues Resolved ###\r\n\r\n- fixes #3562 \r\n\r\n### API Changes ###\r\n\r\nNone\r\n\r\n### Platforms Affected ###\r\n\r\n- Android\r\n\r\n### Behavioral/Visual Changes ###\r\n\r\nNone\r\n\r\n### PR Checklist ###\r\n\r\n- [ ] Has automated tests <!-- (if tests are omitted or manual, state reason in description) -->\r\n- [x] Rebased on top of the target branch at time of PR\r\n- [x] Changes adhere to coding standard\r\n"},{"Id":"8119101996","Type":"PullRequestEvent","CreatedAt":"2018-08-15T20:12:03","Actor":"kingces95","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/3575","RelatedDescription":"Opened pull request \"Add Null Check to GetRenderer\" (#3575) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\n\r\nAnd null check in `GetRenderer`.\r\n\r\n### Issues Resolved ###\r\n\r\n- fixes #3563\r\n\r\n### API Changes ###\r\n\r\nNone\r\n\r\n### Platforms Affected ###\r\n\r\nAndroid\r\n\r\n### Behavioral/Visual Changes ###\r\n\r\nNone other than won't throw NRE.\r\n\r\n### PR Checklist ###\r\n\r\n- [ ] Has automated tests <!-- (if tests are omitted or manual, state reason in description) -->\r\n- [x] Rebased on top of the target branch at time of PR\r\n- [x] Changes adhere to coding standard\r\n"},{"Id":"8118969167","Type":"PullRequestEvent","CreatedAt":"2018-08-15T19:44:37","Actor":"hartez","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/3574","RelatedDescription":"Opened pull request \"Change identifier for search bar in tests to avoid confusing UITests\" (#3574) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\n\r\nThe InputTransparentTests and GestureBubblingTests fail occasionally on Android because they find and tap the wrong 'SearchBar' control; this change uses a different identifier for the 'SearchBar' button to avoid this problem.\r\n\r\n### Issues Resolved ###\r\n\r\n - Random test failures, hopefully\r\n\r\n### API Changes ###\r\n\r\nNone\r\n\r\n### Platforms Affected ###\r\n\r\n- Android\r\n\r\n### Behavioral/Visual Changes ###\r\n\r\nNone\r\n\r\n### PR Checklist ###\r\n\r\n- [x] Has automated tests <!-- (if tests are omitted or manual, state reason in description) -->\r\n- [x] Rebased on top of the target branch at time of PR\r\n- [x] Changes adhere to coding standard\r\n"}],"ResultType":"GitHubEvent"},"Macios":{"Events":[{"Id":"8120276250","Type":"PullRequestEvent","CreatedAt":"2018-08-16T01:44:14","Actor":"spouliot","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/4624","RelatedDescription":"Merged pull request \"[networkextension] Obsolete NWPath and NWHostEndpoint default constructors\" (#4624) at xamarin/xamarin-macios","RelatedBody":"There's nothing that indicates the types are user creatable. In addition\nrecent tests shows this (and similar) traces that suggest the instances\nare not fully initialized.\n\n2018-08-14 16:41:37.677780-0400 introspection[65154:688446] [] nw_path_get_mtu called with null path\n2018-08-14 16:41:37.677917-0400 introspection[65154:688446] [] __nwlog_err_simulate_crash simulate crash failed \"nw_path_get_mtu called with null path\"\n2018-08-14 16:41:37.680216-0400 introspection[65154:688446] [] nw_path_get_mtu called with null path, dumping backtrace:\n        [x86_64] libnetcore-1229.202.1\n    0   libnetwork.dylib                    0x00000001131b1c18 __nw_create_backtrace_string + 120\n    1   libnetwork.dylib                    0x000000011315b962 nw_path_get_mtu + 274\n    2   Network                             0x0000000111737a67 -[NWPath mtu] + 39\n    3   Network                             0x000000011173610e -[NWPath descriptionWithIndent:showFullContent:] + 446\n    4   Network                             0x0000000111736825 -[NWPath description] + 21\n    5   introspection                       0x000000010484db69 xamarin_dyn_objc_msgSend + 217\n    6   ???                                 0x0000000131be3755 0x0 + 5129516885\n    7   ???                                 0x0000000131be73d9 0x0 + 5129532377\n    8   introspection                       0x0000000104653963 mono_jit_runtime_invoke + 1443\n    9   introspection                       0x0000000104732a9f mono_runtime_invoke_checked + 127\n    10  introspection                       0x0000000104739de8 mono_runtime_try_invoke_array + 1160\n    11  introspection                       0x00000001046da4b7 ves_icall_InternalInvoke + 647\n    12  ???                                 0x0000000137b84ae1 0x0 + 5229791969\n    13  ???                                 0x0000000137b8484b 0x0 + 5229791307\n    14  ???                                 0x0000000137b845fb 0x0 + 5229790715\n    15  ???                                 0x0000000137b83d59 0x0 + 5229788505\n    16  ???                                 0x0000000137b7c2f4 0x0 + 5229757172\n    17  ???                                 0x0000000136d6066b 0x0 + 5214963307\n    18  ???                                 0x0000000137b7c2f4 0x0 + 5229757172\n    19  ???                                 0x0000000136d6066b 0x0 + 5214963307\n    20  ???                                 0x0000000137b7c2f4 0x0 + 5229757172\n    21  ???                                 0x0000000136d6066b 0x0 + 5214963307\n    22  ???                                 0x0000000137b7c2f4 0x0 + 5229757172\n    23  ???                                 0x0000000136d6066b 0x0 + 5214963307\n    24  ???                                 0x0000000137b0d76b 0x0 + 5229303659\n    25  ???                                 0x0000000131bac8a1 0x0 + 5129291937\n    26  introspection                       0x0000000104653963 mono_jit_runtime_invoke + 1443\n    27  introspection                       0x0000000104734424 mono_runtime_try_invoke + 148\n    28  introspection                       0x000000010473636f mono_runtime_invoke + 31\n    29  introspection                       0x00000001044e4188 _ZL31native_to_managed_trampoline_20P11objc_objectP13objc_selectorPP11_MonoMethodj + 248\n    30  introspection                       0x00000001044e8754 -[__MonoMac_NSAsyncActionDispatcher xamarinApplySelector] + 52\n    31  Foundation                          0x0000000105c7bf6b __NSThreadPerformPerform + 330\n    32  CoreFoundation                      0x0000000104f1bb31 __CFRUNLOOP_IS_CALLING_OUT_TO_A_SOURCE0_PERFORM_FUNCTION__ + 17\n    33  CoreFoundation                      0x0000000104f1b464 __CFRunLoopDoSources0 + 436\n    34  CoreFoundation                      0x0000000104f15a4f __CFRunLoopRun + 1263\n    35  CoreFoundation                      0x0000000104f15221 CFRunLoopRunSpecific + 625\n    36  GraphicsServices                    0x00000001157d01dd GSEventRunModal + 62\n    37  UIKitCore                           0x000000011a6e62f1 UIApplicationMain + 140\n    38  ???                                 0x0000000131be4d18 0x0 + 5129522456\n    39  ???                                 0x0000000131be4b93 0x0 + 5129522067\n    40  introspection                       0x0000000104653963 mono_jit_runtime_invoke + 1443\n    41  introspection                       0x0000000104732a9f mono_runtime_invoke_checked + 127\n    42  introspection                       0x000000010473890e mono_runtime_exec_main_checked + 110\n    43  introspection                       0x00000001045a132f mono_jit_exec + 287\n    44  introspection                       0x000000010484b5ee xamarin_main + 2830\n    45  introspection                       0x000000010484df6d main + 45\n    46  libdyld.dylib                       0x00000001122915cd start + 1\n    47  ???                                 0x0000000000000009 0x0 + 9\n\n2018-08-14 17:09:22.864147-0400 introspection[78577:733530] [] nw_endpoint_get_parent_endpoint_domain called with null endpoint\n2018-08-14 17:09:22.864273-0400 introspection[78577:733530] [] __nwlog_err_simulate_crash simulate crash failed \"nw_endpoint_get_parent_endpoint_domain called with null endpoint\"\n2018-08-14 17:09:22.866190-0400 introspection[78577:733530] [] nw_endpoint_get_parent_endpoint_domain called with null endpoint, dumping backtrace:\n        [x86_64] libnetcore-1229.202.1\n    0   libnetwork.dylib                    0x0000000119d0bc18 __nw_create_backtrace_string + 120\n    1   libnetwork.dylib                    0x0000000119c8b232 nw_endpoint_get_parent_endpoint_domain + 178\n    2   Network                             0x0000000118261177 -[NWEndpoint parentEndpointDomain] + 39\n    3   Network                             0x000000011824a941 -[NWHostEndpoint descriptionWithIndent:showFullContent:] + 97\n    4   Network                             0x0000000118260eb5 -[NWEndpoint description] + 21\n    5   introspection                       0x000000010b3a4b69 xamarin_dyn_objc_msgSend + 217\n    6   ???                                 0x000000013ce75755 0x0 + 5316761429\n    7   ???                                 0x000000013ce793d9 0x0 + 5316776921\n    8   introspection                       0x000000010b1aa963 mono_jit_runtime_invoke + 1443\n    9   introspection                       0x000000010b289a9f mono_runtime_invoke_checked + 127\n    10  introspection                       0x000000010b290de8 mono_runtime_try_invoke_array + 1160\n    11  introspection                       0x000000010b2314b7 ves_icall_InternalInvoke + 647\n    12  ???                                 0x000000013e428bc1 0x0 + 5339515841\n    13  ???                                 0x000000013e42892b 0x0 + 5339515179\n    14  ???                                 0x000000013e4286db 0x0 + 5339514587\n    15  ???                                 0x000000013e427e39 0x0 + 5339512377\n    16  ???                                 0x000000013e4203d4 0x0 + 5339481044\n    17  ???                                 0x000000013d8b875b 0x0 + 5327521627\n    18  ???                                 0x000000013e4203d4 0x0 + 5339481044\n    19  ???                                 0x000000013d8b875b 0x0 + 5327521627\n    20  ???                                 0x000000013e4203d4 0x0 + 5339481044\n    21  ???                                 0x000000013d8b875b 0x0 + 5327521627\n    22  ???                                 0x000000013e4203d4 0x0 + 5339481044\n    23  ???                                 0x000000013d8b875b 0x0 + 5327521627\n    24  ???                                 0x000000013e3c37db 0x0 + 5339101147\n    25  ???                                 0x00000001387848a1 0x0 + 5242374305\n    26  introspection                       0x000000010b1aa963 mono_jit_runtime_invoke + 1443\n    27  introspection                       0x000000010b28b424 mono_runtime_try_invoke + 148\n    28  introspection                       0x000000010b28d36f mono_runtime_invoke + 31\n    29  introspection                       0x000000010b03b188 _ZL31native_to_managed_trampoline_20P11objc_objectP13objc_selectorPP11_MonoMethodj + 248\n    30  introspection                       0x000000010b03f754 -[__MonoMac_NSAsyncActionDispatcher xamarinApplySelector] + 52\n    31  Foundation                          0x000000010c7d2f6b __NSThreadPerformPerform + 330\n    32  CoreFoundation                      0x000000010ba72b31 __CFRUNLOOP_IS_CALLING_OUT_TO_A_SOURCE0_PERFORM_FUNCTION__ + 17\n    33  CoreFoundation                      0x000000010ba72464 __CFRunLoopDoSources0 + 436\n    34  CoreFoundation                      0x000000010ba6ca4f __CFRunLoopRun + 1263\n    35  CoreFoundation                      0x000000010ba6c221 CFRunLoopRunSpecific + 625\n    36  GraphicsServices                    0x000000011c32a1dd GSEventRunModal + 62\n    37  UIKitCore                           0x00000001212402f1 UIApplicationMain + 140\n    38  ???                                 0x000000013ce76d18 0x0 + 5316767000\n    39  ???                                 0x000000013ce76b93 0x0 + 5316766611\n    40  introspection                       0x000000010b1aa963 mono_jit_runtime_invoke + 1443\n    41  introspection                       0x000000010b289a9f mono_runtime_invoke_checked + 127\n    42  introspection                       0x000000010b28f90e mono_runtime_exec_main_checked + 110\n    43  introspection                       0x000000010b0f832f mono_jit_exec + 287\n    44  introspection                       0x000000010b3a25ee xamarin_main + 2830\n    45  introspection                       0x000000010b3a4f6d main + 45\n    46  libdyld.dylib                       0x0000000118de65cd start + 1\n    47  ???                                 0x0000000000000009 0x0 + 9"},{"Id":"8120268174","Type":"PullRequestEvent","CreatedAt":"2018-08-16T01:41:04","Actor":"spouliot","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/4625","RelatedDescription":"Merged pull request \"[foundation] Update for beta 6\" (#4625) at xamarin/xamarin-macios","RelatedBody":""},{"Id":"8119531355","Type":"PullRequestEvent","CreatedAt":"2018-08-15T21:42:11","Actor":"spouliot","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/4625","RelatedDescription":"Opened pull request \"[foundation] Update for beta 6\" (#4625) at xamarin/xamarin-macios","RelatedBody":""},{"Id":"8119329581","Type":"PullRequestEvent","CreatedAt":"2018-08-15T20:58:15","Actor":"spouliot","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/4624","RelatedDescription":"Opened pull request \"[networkextension] Obsolete NWPath and NWHostEndpoint default constructors\" (#4624) at xamarin/xamarin-macios","RelatedBody":"There's nothing that indicates the types are user creatable. In addition\nrecent tests shows this (and similar) traces that suggest the instances\nare not fully initialized.\n\n2018-08-14 16:41:37.677780-0400 introspection[65154:688446] [] nw_path_get_mtu called with null path\n2018-08-14 16:41:37.677917-0400 introspection[65154:688446] [] __nwlog_err_simulate_crash simulate crash failed \"nw_path_get_mtu called with null path\"\n2018-08-14 16:41:37.680216-0400 introspection[65154:688446] [] nw_path_get_mtu called with null path, dumping backtrace:\n        [x86_64] libnetcore-1229.202.1\n    0   libnetwork.dylib                    0x00000001131b1c18 __nw_create_backtrace_string + 120\n    1   libnetwork.dylib                    0x000000011315b962 nw_path_get_mtu + 274\n    2   Network                             0x0000000111737a67 -[NWPath mtu] + 39\n    3   Network                             0x000000011173610e -[NWPath descriptionWithIndent:showFullContent:] + 446\n    4   Network                             0x0000000111736825 -[NWPath description] + 21\n    5   introspection                       0x000000010484db69 xamarin_dyn_objc_msgSend + 217\n    6   ???                                 0x0000000131be3755 0x0 + 5129516885\n    7   ???                                 0x0000000131be73d9 0x0 + 5129532377\n    8   introspection                       0x0000000104653963 mono_jit_runtime_invoke + 1443\n    9   introspection                       0x0000000104732a9f mono_runtime_invoke_checked + 127\n    10  introspection                       0x0000000104739de8 mono_runtime_try_invoke_array + 1160\n    11  introspection                       0x00000001046da4b7 ves_icall_InternalInvoke + 647\n    12  ???                                 0x0000000137b84ae1 0x0 + 5229791969\n    13  ???                                 0x0000000137b8484b 0x0 + 5229791307\n    14  ???                                 0x0000000137b845fb 0x0 + 5229790715\n    15  ???                                 0x0000000137b83d59 0x0 + 5229788505\n    16  ???                                 0x0000000137b7c2f4 0x0 + 5229757172\n    17  ???                                 0x0000000136d6066b 0x0 + 5214963307\n    18  ???                                 0x0000000137b7c2f4 0x0 + 5229757172\n    19  ???                                 0x0000000136d6066b 0x0 + 5214963307\n    20  ???                                 0x0000000137b7c2f4 0x0 + 5229757172\n    21  ???                                 0x0000000136d6066b 0x0 + 5214963307\n    22  ???                                 0x0000000137b7c2f4 0x0 + 5229757172\n    23  ???                                 0x0000000136d6066b 0x0 + 5214963307\n    24  ???                                 0x0000000137b0d76b 0x0 + 5229303659\n    25  ???                                 0x0000000131bac8a1 0x0 + 5129291937\n    26  introspection                       0x0000000104653963 mono_jit_runtime_invoke + 1443\n    27  introspection                       0x0000000104734424 mono_runtime_try_invoke + 148\n    28  introspection                       0x000000010473636f mono_runtime_invoke + 31\n    29  introspection                       0x00000001044e4188 _ZL31native_to_managed_trampoline_20P11objc_objectP13objc_selectorPP11_MonoMethodj + 248\n    30  introspection                       0x00000001044e8754 -[__MonoMac_NSAsyncActionDispatcher xamarinApplySelector] + 52\n    31  Foundation                          0x0000000105c7bf6b __NSThreadPerformPerform + 330\n    32  CoreFoundation                      0x0000000104f1bb31 __CFRUNLOOP_IS_CALLING_OUT_TO_A_SOURCE0_PERFORM_FUNCTION__ + 17\n    33  CoreFoundation                      0x0000000104f1b464 __CFRunLoopDoSources0 + 436\n    34  CoreFoundation                      0x0000000104f15a4f __CFRunLoopRun + 1263\n    35  CoreFoundation                      0x0000000104f15221 CFRunLoopRunSpecific + 625\n    36  GraphicsServices                    0x00000001157d01dd GSEventRunModal + 62\n    37  UIKitCore                           0x000000011a6e62f1 UIApplicationMain + 140\n    38  ???                                 0x0000000131be4d18 0x0 + 5129522456\n    39  ???                                 0x0000000131be4b93 0x0 + 5129522067\n    40  introspection                       0x0000000104653963 mono_jit_runtime_invoke + 1443\n    41  introspection                       0x0000000104732a9f mono_runtime_invoke_checked + 127\n    42  introspection                       0x000000010473890e mono_runtime_exec_main_checked + 110\n    43  introspection                       0x00000001045a132f mono_jit_exec + 287\n    44  introspection                       0x000000010484b5ee xamarin_main + 2830\n    45  introspection                       0x000000010484df6d main + 45\n    46  libdyld.dylib                       0x00000001122915cd start + 1\n    47  ???                                 0x0000000000000009 0x0 + 9\n\n2018-08-14 17:09:22.864147-0400 introspection[78577:733530] [] nw_endpoint_get_parent_endpoint_domain called with null endpoint\n2018-08-14 17:09:22.864273-0400 introspection[78577:733530] [] __nwlog_err_simulate_crash simulate crash failed \"nw_endpoint_get_parent_endpoint_domain called with null endpoint\"\n2018-08-14 17:09:22.866190-0400 introspection[78577:733530] [] nw_endpoint_get_parent_endpoint_domain called with null endpoint, dumping backtrace:\n        [x86_64] libnetcore-1229.202.1\n    0   libnetwork.dylib                    0x0000000119d0bc18 __nw_create_backtrace_string + 120\n    1   libnetwork.dylib                    0x0000000119c8b232 nw_endpoint_get_parent_endpoint_domain + 178\n    2   Network                             0x0000000118261177 -[NWEndpoint parentEndpointDomain] + 39\n    3   Network                             0x000000011824a941 -[NWHostEndpoint descriptionWithIndent:showFullContent:] + 97\n    4   Network                             0x0000000118260eb5 -[NWEndpoint description] + 21\n    5   introspection                       0x000000010b3a4b69 xamarin_dyn_objc_msgSend + 217\n    6   ???                                 0x000000013ce75755 0x0 + 5316761429\n    7   ???                                 0x000000013ce793d9 0x0 + 5316776921\n    8   introspection                       0x000000010b1aa963 mono_jit_runtime_invoke + 1443\n    9   introspection                       0x000000010b289a9f mono_runtime_invoke_checked + 127\n    10  introspection                       0x000000010b290de8 mono_runtime_try_invoke_array + 1160\n    11  introspection                       0x000000010b2314b7 ves_icall_InternalInvoke + 647\n    12  ???                                 0x000000013e428bc1 0x0 + 5339515841\n    13  ???                                 0x000000013e42892b 0x0 + 5339515179\n    14  ???                                 0x000000013e4286db 0x0 + 5339514587\n    15  ???                                 0x000000013e427e39 0x0 + 5339512377\n    16  ???                                 0x000000013e4203d4 0x0 + 5339481044\n    17  ???                                 0x000000013d8b875b 0x0 + 5327521627\n    18  ???                                 0x000000013e4203d4 0x0 + 5339481044\n    19  ???                                 0x000000013d8b875b 0x0 + 5327521627\n    20  ???                                 0x000000013e4203d4 0x0 + 5339481044\n    21  ???                                 0x000000013d8b875b 0x0 + 5327521627\n    22  ???                                 0x000000013e4203d4 0x0 + 5339481044\n    23  ???                                 0x000000013d8b875b 0x0 + 5327521627\n    24  ???                                 0x000000013e3c37db 0x0 + 5339101147\n    25  ???                                 0x00000001387848a1 0x0 + 5242374305\n    26  introspection                       0x000000010b1aa963 mono_jit_runtime_invoke + 1443\n    27  introspection                       0x000000010b28b424 mono_runtime_try_invoke + 148\n    28  introspection                       0x000000010b28d36f mono_runtime_invoke + 31\n    29  introspection                       0x000000010b03b188 _ZL31native_to_managed_trampoline_20P11objc_objectP13objc_selectorPP11_MonoMethodj + 248\n    30  introspection                       0x000000010b03f754 -[__MonoMac_NSAsyncActionDispatcher xamarinApplySelector] + 52\n    31  Foundation                          0x000000010c7d2f6b __NSThreadPerformPerform + 330\n    32  CoreFoundation                      0x000000010ba72b31 __CFRUNLOOP_IS_CALLING_OUT_TO_A_SOURCE0_PERFORM_FUNCTION__ + 17\n    33  CoreFoundation                      0x000000010ba72464 __CFRunLoopDoSources0 + 436\n    34  CoreFoundation                      0x000000010ba6ca4f __CFRunLoopRun + 1263\n    35  CoreFoundation                      0x000000010ba6c221 CFRunLoopRunSpecific + 625\n    36  GraphicsServices                    0x000000011c32a1dd GSEventRunModal + 62\n    37  UIKitCore                           0x00000001212402f1 UIApplicationMain + 140\n    38  ???                                 0x000000013ce76d18 0x0 + 5316767000\n    39  ???                                 0x000000013ce76b93 0x0 + 5316766611\n    40  introspection                       0x000000010b1aa963 mono_jit_runtime_invoke + 1443\n    41  introspection                       0x000000010b289a9f mono_runtime_invoke_checked + 127\n    42  introspection                       0x000000010b28f90e mono_runtime_exec_main_checked + 110\n    43  introspection                       0x000000010b0f832f mono_jit_exec + 287\n    44  introspection                       0x000000010b3a25ee xamarin_main + 2830\n    45  introspection                       0x000000010b3a4f6d main + 45\n    46  libdyld.dylib                       0x0000000118de65cd start + 1\n    47  ???                                 0x0000000000000009 0x0 + 9"},{"Id":"8118268777","Type":"PullRequestEvent","CreatedAt":"2018-08-15T17:23:32","Actor":"spouliot","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/4613","RelatedDescription":"Merged pull request \"Bump for beta 6\" (#4613) at xamarin/xamarin-macios","RelatedBody":""}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1029840138099220487","CreatedAt":"2018-08-15T21:19:57+00:00","UserScreenname":"xamarinhq","Text":"Attend A #dotNETConf Event Near You - https://t.co/VrHYwnCS69\n\nIt's a FREE, 3-day virtual dev event co-organized by… https://t.co/tqMWcB8mJz","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":34,"FavoriteCount":18,"RawContent":null},{"Id":"1026898128509825024","CreatedAt":"2018-08-07T18:29:27+00:00","UserScreenname":"xamarinhq","Text":"- Authentication   - Encryption   - Integrity\n3 important requirements to securing network communications &amp; absolut… https://t.co/hDPkHLZsLA","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":92,"FavoriteCount":46,"RawContent":null},{"Id":"1025442837813518336","CreatedAt":"2018-08-03T18:06:38+00:00","UserScreenname":"xamarinhq","Text":"Want to use a single code base for multiple platforms and devices? Of course you do. ...just posted to our Xamarin… https://t.co/qJBV4vvEir","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":170,"FavoriteCount":84,"RawContent":null},{"Id":"1024752638599028736","CreatedAt":"2018-08-01T20:24:02+00:00","UserScreenname":"xamarinhq","Text":"This year’s #dotNETConf is coming 9/12-14. Live sessions w/ speakers from the community &amp; it's your chance to learn… https://t.co/Nujb04dGd4","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":71,"FavoriteCount":44,"RawContent":null},{"Id":"1024013376295452672","CreatedAt":"2018-07-30T19:26:28+00:00","UserScreenname":"xamarinhq","Text":"Here's everything you need to know to integrate automated visual UI tests into a dev toolchain that includes an… https://t.co/12Ihjj4bSN","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":122,"FavoriteCount":56,"RawContent":null},{"Id":"1022882059763830784","CreatedAt":"2018-07-27T16:31:01+00:00","UserScreenname":"xamarinhq","Text":"https://t.co/RGpgfHMoPZ -- Announcing Xamarin .Android support for Android 9.0 (P) now available for both #VS2017 &amp;… https://t.co/9clAy4LHZp","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":83,"FavoriteCount":53,"RawContent":null},{"Id":"1022866229143461888","CreatedAt":"2018-07-27T15:28:07+00:00","UserScreenname":"xamarinhq","Text":"Previewing files from inside your Xamarin .iOS app is a great way to enhance user experience. ...and adding this fe… https://t.co/tF7v5at9xo","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":61,"FavoriteCount":30,"RawContent":null},{"Id":"1019670557011243008","CreatedAt":"2018-07-18T19:49:40+00:00","UserScreenname":"xamarinhq","Text":"Xamarin.Forms 3.1 delivers the latest in quality improvements. We're excited to introduce Xamarin.Forms 3.1, now wi… https://t.co/qW6S2P7Hi0","Source":"<a href=\"http://twitter.com\" rel=\"nofollow\">Twitter Web Client</a>","RetweetCount":260,"FavoriteCount":163,"RawContent":null},{"Id":"1016758939877117952","CreatedAt":"2018-07-10T18:59:56+00:00","UserScreenname":"xamarinhq","Text":"Understanding your app, it's users, &amp; their interactions helps you build a 5-star app. Application Insights w/ AppC… https://t.co/Smw5tVHZ1X","Source":"<a href=\"http://twitter.com\" rel=\"nofollow\">Twitter Web Client</a>","RetweetCount":43,"FavoriteCount":26,"RawContent":null},{"Id":"1014949294737186816","CreatedAt":"2018-07-05T19:09:03+00:00","UserScreenname":"xamarinhq","Text":"Cool intros to new goodies in &lt;10 minutes! Explore some of the “Snack Pack” episodes that @JamesMontemagno bundled… https://t.co/80gmo35fb6","Source":"<a href=\"http://twitter.com\" rel=\"nofollow\">Twitter Web Client</a>","RetweetCount":89,"FavoriteCount":43,"RawContent":null},{"Id":"1014903254034141190","CreatedAt":"2018-07-05T16:06:06+00:00","UserScreenname":"xamarinhq","Text":"Using #TensorFlow and #Azure to add image classification to your Android apps: https://t.co/45lGqihW7e https://t.co/3RaJk3O0xb","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":44,"FavoriteCount":34,"RawContent":null},{"Id":"1014521211970379776","CreatedAt":"2018-07-04T14:48:00+00:00","UserScreenname":"xamarinhq","Text":"Check out this handy curated list of awesome #Xamarin books written by other developers in the #Xamarin community: https://t.co/Yu7V3tVSRq","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":63,"FavoriteCount":34,"RawContent":null},{"Id":"1014159326645313537","CreatedAt":"2018-07-03T14:50:00+00:00","UserScreenname":"xamarinhq","Text":"A brief history of #dotNET Standard (and where it's going): https://t.co/AfiPETlRiv","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":40,"FavoriteCount":25,"RawContent":null},{"Id":"1013873320834445313","CreatedAt":"2018-07-02T19:53:31+00:00","UserScreenname":"xamarinhq","Text":"In today's Xamarin Podcast, @PierceBoggan &amp; @JamesMontemagno talk up latest &amp; greatest in mobile #dotNET dev; Xamar… https://t.co/chy5AhHt86","Source":"<a href=\"http://twitter.com\" rel=\"nofollow\">Twitter Web Client</a>","RetweetCount":63,"FavoriteCount":43,"RawContent":null},{"Id":"1013805063209455616","CreatedAt":"2018-07-02T15:22:17+00:00","UserScreenname":"xamarinhq","Text":"Learn how to use the iOS 11 drag and drop APIs in your #Xamarin iOS apps: https://t.co/bWru3lL6he https://t.co/kdzv9U4084","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":34,"FavoriteCount":23,"RawContent":null},{"Id":"1013547297437835264","CreatedAt":"2018-07-01T22:18:01+00:00","UserScreenname":"xamarinhq","Text":"Localize your #XamarinForms apps for right-to-left languages with the help of the new FlowDirection property:… https://t.co/JL1SW3MFro","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":54,"FavoriteCount":29,"RawContent":null},{"Id":"1012399525338595328","CreatedAt":"2018-06-28T18:17:10+00:00","UserScreenname":"xamarinhq","Text":"https://t.co/3QxhuBcUiC v7.2 introduces two new MSBuild properties to make maintaining Android VersionCode for Andr… https://t.co/j469e1DU24","Source":"<a href=\"http://twitter.com\" rel=\"nofollow\">Twitter Web Client</a>","RetweetCount":84,"FavoriteCount":58,"RawContent":null}]}},"RunOn":"2018-08-16T05:30:50.877537Z","RunDurationInMilliseconds":4238}