{"Data":{"Blog":{"FeedItems":[{"Title":"Announcing .NET Framework 4.8 Early Access Build 3707","PublishedOn":"2018-12-15T02:11:55+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We have another early access build to share today! This release includes several accessibility, performance, reliability and stability fixes across the major framework libraries. We will continue to...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/12/14/announcing-net-framework-4-8-early-access-build-3707/","RawContent":null},{"Title":"Visual Studio 2019 Preview .NET Productivity","PublishedOn":"2018-12-14T00:13:41+00:00","CommentsCount":15,"FacebookCount":0,"Summary":"As you hopefully heard, the first preview of Visual Studio 2019 is now available. In this post I’ll cover some of the productivity improvements for .NET developers we’re most excited about. For a...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/12/13/visual-studio-2019-net-productivity/","RawContent":null},{"Title":".NET Framework December 2018 Security and Quality Rollup","PublishedOn":"2018-12-11T18:23:48+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Today, we are releasing the December 2018 Security and Quality Rollup. Security CVE-2018-8540 – Windows Remote Code Execution Vulnerability This security update resolves a vulnerability in Microsoft...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/12/11/net-framework-december-2018-security-and-quality-rollup/","RawContent":null},{"Title":"Open Sourcing XAML Behaviors for WPF","PublishedOn":"2018-12-10T19:27:32+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"Today, we are excited to announce that we are open sourcing XAML Behaviors for WPF. In the past, we open sourced XAML Behaviors for UWP which has been a great success and the Behaviors NuGet package...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/12/10/open-sourcing-xaml-behaviors-for-wpf/","RawContent":null},{"Title":"Take C# 8.0 for a spin","PublishedOn":"2018-12-05T23:51:33+00:00","CommentsCount":76,"FacebookCount":0,"Summary":"Take C# 8.0 for a spin Yesterday we announced the first preview of both Visual Studio 2019 (Making every developer more productive with Visual Studio 2019) and .NET Core 3.0 (Announcing .NET Core 3...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/12/05/take-c-8-0-for-a-spin/","RawContent":null},{"Title":".NET Framework December 5, 2018 Preview of Cumulative Update for Windows 10 version 1809 and Windows Server 2019","PublishedOn":"2018-12-05T22:00:42+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"Today, we are releasing the December 5, 2018 Preview of .NET Framework Cumulative Update for Windows 10 version 1809 and Windows Server 2019. For more information about the new Cumulative Updates for...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/12/05/net-framework-december-4-2018-preview-of-cumulative-update-for-windows-10-version-1809-and-windows-server-2019/","RawContent":null},{"Title":"Announcing .NET Core 3 Preview 1 and Open Sourcing Windows Desktop Frameworks","PublishedOn":"2018-12-04T16:41:34+00:00","CommentsCount":79,"FacebookCount":0,"Summary":"Today, we are announcing .NET Core 3 Preview 1. It is the first public release of .NET Core 3. We have some exciting new features to share and would love your feedback. You can develop .NET Core 3...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/12/04/announcing-net-core-3-preview-1-and-open-sourcing-windows-desktop-frameworks/","RawContent":null},{"Title":"Announcing .NET Core 2.2","PublishedOn":"2018-12-04T16:36:50+00:00","CommentsCount":30,"FacebookCount":0,"Summary":"We’re excited to announce the release of .NET Core 2.2. It includes diagnostic improvements to the runtime, support for ARM32 for Windows and Azure Active Directory for SQL Client. The biggest...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/12/04/announcing-net-core-2-2/","RawContent":null},{"Title":"Announcing Entity Framework Core 2.2","PublishedOn":"2018-12-04T16:30:21+00:00","CommentsCount":17,"FacebookCount":0,"Summary":"Today we&#8217;re making the final version of EF Core 2.2 available, alongside ASP.NET Core 2.2 and .NET Core 2.2. This is the latest release of our open-source and cross-platform object-database...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/12/04/announcing-entity-framework-core-2-2/","RawContent":null},{"Title":"Announcing ML.NET 0.8 – Machine Learning for .NET","PublishedOn":"2018-12-04T16:00:11+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"ML.NET is an open-source and cross-platform framework (Windows, Linux, macOS) which makes machine learning accessible for .NET developers. ML.NET allows you to create and use machine learning models...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/12/04/announcing-ml-net-0-8-machine-learning-for-net/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"8650911785","Type":"PullRequestEvent","CreatedAt":"2018-11-27T00:35:00","Actor":"JamesNK","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/121","RelatedDescription":"Opened pull request \"Add Newtonsoft.Json\" (#121) at dotnet/foundation","RelatedBody":"// @jongalloway "},{"Id":"8645831625","Type":"PullRequestEvent","CreatedAt":"2018-11-26T09:33:50","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/120","RelatedDescription":"Merged pull request \"Added Telerik info\" (#120) at dotnet/foundation","RelatedBody":""},{"Id":"8645829054","Type":"PullRequestEvent","CreatedAt":"2018-11-26T09:33:23","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/119","RelatedDescription":"Merged pull request \"Added Telerik UWP proj\" (#119) at dotnet/foundation","RelatedBody":""},{"Id":"8645355358","Type":"PullRequestEvent","CreatedAt":"2018-11-26T07:59:20","Actor":"stefanov-stefan","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/120","RelatedDescription":"Opened pull request \"Added Telerik info\" (#120) at dotnet/foundation","RelatedBody":""},{"Id":"8645349176","Type":"PullRequestEvent","CreatedAt":"2018-11-26T07:57:50","Actor":"stefanov-stefan","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/119","RelatedDescription":"Opened pull request \"Added Telerik UWP proj\" (#119) at dotnet/foundation","RelatedBody":""},{"Id":"8637227393","Type":"PullRequestEvent","CreatedAt":"2018-11-23T10:32:15","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/118","RelatedDescription":"Merged pull request \"Update WorldWide Telescope\" (#118) at dotnet/foundation","RelatedBody":"Some layout fixes, but the main change is that @pkgw is now the project director."},{"Id":"8637225303","Type":"PullRequestEvent","CreatedAt":"2018-11-23T10:31:49","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/117","RelatedDescription":"Merged pull request \"Update identityserver.md\" (#117) at dotnet/foundation","RelatedBody":"significant whitespace"},{"Id":"8615388364","Type":"PullRequestEvent","CreatedAt":"2018-11-19T20:23:18","Actor":"pkgw","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/118","RelatedDescription":"Opened pull request \"Update WorldWide Telescope\" (#118) at dotnet/foundation","RelatedBody":"Some layout fixes, but the main change is that @pkgw is now the project director."},{"Id":"8578587104","Type":"PullRequestEvent","CreatedAt":"2018-11-13T05:53:19","Actor":"leastprivilege","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/117","RelatedDescription":"Opened pull request \"Update identityserver.md\" (#117) at dotnet/foundation","RelatedBody":"significant whitespace"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"8752496804","Type":"IssuesEvent","CreatedAt":"2018-12-14T03:22:59","Actor":"1015450578","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/93","RelatedDescription":"Closed issue \"Docker image with tag '2.2-aspnetcore-runtime' is not compatible\" (#93) at dotnet/announcements","RelatedBody":"1. Install  .NET Core 2.2.100 sdk\r\n2. Create a new 'AspNetCore Web Api' by using Visual Studio 2017,and enbale docker support.\r\n3. F5 ,the Output Windows shows:\r\n>It was not possible to find any compatible framework version\r\n>The specified framework 'Microsoft.AspNetCore.App', version '2.2.0' was not found.\r\n>  - Check application dependencies and target a framework version installed at:\r\n>      /usr/share/dotnet/\r\n>  - Installing .NET Core prerequisites might help resolve this problem:\r\n>     http://go.microsoft.com/fwlink/?LinkID=798306&clcid=0x409\r\n>  - The .NET Core framework and SDK can be installed from:\r\n>      https://aka.ms/dotnet-download\r\n>  - The following versions are installed:\r\n>      2.2.0-preview3-35497 at [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]"},{"Id":"8752467326","Type":"IssuesEvent","CreatedAt":"2018-12-14T03:12:36","Actor":"1015450578","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/93","RelatedDescription":"Opened issue \"Docker image with tag '2.2-aspnetcore-runtime' is not compatible\" (#93) at dotnet/announcements","RelatedBody":"1. Install  .NET Core 2.2.100 sdk\r\n2. Create a new 'AspNetCore Web Api' by using Visual Studio 2017,and enbale docker support.\r\n3. F5 ,the Output Windows shows:\r\n>It was not possible to find any compatible framework version\r\n>The specified framework 'Microsoft.AspNetCore.App', version '2.2.0' was not found.\r\n>  - Check application dependencies and target a framework version installed at:\r\n>      /usr/share/dotnet/\r\n>  - Installing .NET Core prerequisites might help resolve this problem:\r\n>     http://go.microsoft.com/fwlink/?LinkID=798306&clcid=0x409\r\n>  - The .NET Core framework and SDK can be installed from:\r\n>      https://aka.ms/dotnet-download\r\n>  - The following versions are installed:\r\n>      2.2.0-preview3-35497 at [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]"},{"Id":"8741036679","Type":"IssuesEvent","CreatedAt":"2018-12-12T12:56:54","Actor":"bilalMlaik","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/92","RelatedDescription":"Closed issue \".net core Console\" (#92) at dotnet/announcements","RelatedBody":"I am running dot net core console app as web jobs and it is working perfectly in docker with docker compose. Now the issue is I want to pass a value to the application via Console.ReadLine() over this value i make some decision but i am unable to pass value via Console.ReadLine(). How i can do it please help me. For more understanding, i have added my docker compose file below\r\n`version: '3.4'\r\n\r\nservices:\r\n  \r\n  tt.core.web:\r\n    image: ${DOCKER_REGISTRY-}ttcoreweb\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.Web/Dockerfile\r\n    depends_on:\r\n     - db\r\n    networks:\r\n     - app-network\r\n\r\n  tt.core.downtime.webjob:\r\n    image: ${DOCKER_REGISTRY-}ttcoredowntimewebjob\r\n    environment:\r\n      CORE_ENVIRONMENT: devdocker\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.Downtime.Webjob/Dockerfile\r\n    depends_on:\r\n     - db\r\n     - tt.core.web\r\n    networks:\r\n     - app-network\r\n\r\n  db:\r\n    image: microsoft/mssql-server-linux\r\n    container_name: db\r\n    environment:\r\n      SA_PASSWORD: \"Thingtrax%1\"\r\n      ACCEPT_EULA: \"Y\"\r\n      MSSQL_PID: Express\r\n    ports:\r\n      - \"7002:1433\"\r\n    networks:\r\n      app-network:\r\n        ipv4_address: 172.24.0.2\r\n\r\nnetworks:\r\n  app-network:\r\n    ipam:\r\n      driver: default\r\n      config:\r\n        - subnet: 172.24.0.0/16\r\n\r\n`\r\nIf the detail is not enough or you do not get my point, you can share your confusion in comment"},{"Id":"8740711774","Type":"IssuesEvent","CreatedAt":"2018-12-12T11:57:02","Actor":"bilalMlaik","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/92","RelatedDescription":"Opened issue \".net core Console\" (#92) at dotnet/announcements","RelatedBody":"This repo doesn't accept issues. Please see README.md in the root for more details.\r\nI am running dot net core console app as web jobs and it is working perfectly in docker with docker compose. Now the issue is I want to pass a value to the application via Console.ReadLine() over this value i make some decision but i am unable to pass value via Console.ReadLine(). How i can do it please help me. For more understanding, i have added my docker compose file below\r\n`version: '3.4'\r\n\r\nservices:\r\n  \r\n  tt.core.web:\r\n    image: ${DOCKER_REGISTRY-}ttcoreweb\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.Web/Dockerfile\r\n    depends_on:\r\n     - db\r\n     - redis\r\n    networks:\r\n     - app-network\r\n\r\n  tt.core.downtime.webjob:\r\n    image: ${DOCKER_REGISTRY-}ttcoredowntimewebjob\r\n    environment:\r\n      CORE_ENVIRONMENT: devdocker\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.Downtime.Webjob/Dockerfile\r\n    depends_on:\r\n     - db\r\n     - tt.core.web\r\n     - redis\r\n    networks:\r\n     - app-network\r\n\r\n  tt.core.iothub.simulator:\r\n    image: ${DOCKER_REGISTRY-}ttcoreiothubsimulator\r\n    environment:\r\n      CORE_ENVIRONMENT: devdocker\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.IotHub.Simulator/Dockerfile\r\n    depends_on:\r\n     - db\r\n     - tt.core.web\r\n     - mqtt\r\n    networks:\r\n     - app-network\r\n\r\n  tt.core.labourtelemetry.webjob:\r\n    image: ${DOCKER_REGISTRY-}ttcorelabourtelemetrywebjob\r\n    environment:\r\n      CORE_ENVIRONMENT: devdocker\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.LabourTelemetry.WebJob/Dockerfile\r\n    depends_on:\r\n     - db\r\n     - tt.core.web\r\n     - redis\r\n    networks:\r\n     - app-network\r\n\r\n  tt.core.telemetry.webjob:\r\n    image: ${DOCKER_REGISTRY-}ttcoretelemetrywebjob\r\n    environment:\r\n      CORE_ENVIRONMENT: devdocker\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.Telemetry.WebJob/Dockerfile\r\n    depends_on:\r\n     - db\r\n     - tt.core.web\r\n     - mqtt\r\n     - redis\r\n    networks:\r\n     - app-network\r\n\r\n  redis:\r\n    image: redis\r\n    command: redis-server --appendonly yes\r\n    ports:\r\n      - '6379:6379'\r\n    volumes:\r\n      - ${APPDATA}/redis:/bitnami/redis/data\r\n    networks:\r\n      app-network:\r\n        ipv4_address: 172.24.0.16\r\n\r\n  mqtt:\r\n    image: eclipse-mosquitto\r\n    hostname: mqtt\r\n    container_name: mqtt\r\n    expose:\r\n      - \"1883\"\r\n      - \"9001\"\r\n    ports:\r\n      - \"1883:1883\"\r\n      - \"9001:9001\"\r\n    volumes:\r\n      - ${APPDATA}/mosquitto/mosquitto.conf:/mosquitto/config/mosquitto.conf\r\n    networks:\r\n      app-network:\r\n        ipv4_address: 172.24.0.8\r\n\r\n  db:\r\n    image: microsoft/mssql-server-linux\r\n    container_name: db\r\n    environment:\r\n      SA_PASSWORD: \"Thingtrax%1\"\r\n      ACCEPT_EULA: \"Y\"\r\n      MSSQL_PID: Express\r\n    ports:\r\n      - \"7002:1433\"\r\n    networks:\r\n      app-network:\r\n        ipv4_address: 172.24.0.2\r\n\r\nnetworks:\r\n  app-network:\r\n    ipam:\r\n      driver: default\r\n      config:\r\n        - subnet: 172.24.0.0/16\r\n\r\n`\r\n"},{"Id":"8582735181","Type":"IssuesEvent","CreatedAt":"2018-11-13T17:44:44","Actor":"leecow","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/91","RelatedDescription":"Opened issue \".NET Core November Update - 2.1.6 and SDK 2.1.500\" (#91) at dotnet/announcements","RelatedBody":"# November 2018 .NET Updates\r\n\r\nThe following .NET updates were released in November 2018. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Core\r\n\r\n* [.NET Core November 2018 (2.1.6 and SDK 2.1.500) Update release notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.6/2.1.6.md)\r\n\r\nA [discussion issue](https://github.com/dotnet/core/issues/2053) is available for questions or feedback about this release.\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n* [October 2018[(https://github.com/dotnet/announcements/issues/89)\r\n* [September 2018](https://github.com/dotnet/announcements/issues/84)\r\n* [August 2018](https://github.com/dotnet/announcements/issues/79)\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)"}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"8758393556","Type":"PullRequestEvent","CreatedAt":"2018-12-15T03:20:03","Actor":"benaadams","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/21557","RelatedDescription":"Opened pull request \"Fix warning causing error in warning as error\" (#21557) at dotnet/coreclr","RelatedBody":"Causing local build errors as `IsExceptionOfType` returns `BOOL` not `bool`\r\n```\r\n[C:\\GitHub\\coreclr\\bin\\obj\\Windows_NT.x64.Release\\src\\vm\\wks\\cee_wks.vcxproj]\r\nc:\\github\\coreclr\\src\\vm\\excep.cpp(4489):\r\nwarning C4800: 'BOOL': forcing value to bool 'true' or 'false'\r\n(performance warning)\r\n[C:\\GitHub\\coreclr\\bin\\obj\\Windows_NT.x64.Release\\src\\vm\\wks\\cee_wks.vcxproj]\r\n\r\nc:\\github\\coreclr\\src\\vm\\excep.cpp(4489):\r\nerror C2220: warning treated as error - no 'object' file generated\r\n```"},{"Id":"8758355918","Type":"PullRequestEvent","CreatedAt":"2018-12-15T02:51:40","Actor":"CarolEidt","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/21556","RelatedDescription":"Opened pull request \"Fix more HWIntrinsic ifdefs\" (#21556) at dotnet/coreclr","RelatedBody":""},{"Id":"8758348487","Type":"PullRequestEvent","CreatedAt":"2018-12-15T02:45:56","Actor":"morganbr","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/21545","RelatedDescription":"Merged pull request \"Add Azure DevOps signing support\" (#21545) at dotnet/coreclr","RelatedBody":"Add signing support for Azure DevOps pipelines. This uses the arcade signing step, but with custom logic to find files to sign while we're not using arcade for the rest of the build."},{"Id":"8758309806","Type":"PullRequestEvent","CreatedAt":"2018-12-15T02:18:39","Actor":"swaroop-sridhar","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/21555","RelatedDescription":"Opened pull request \"Add Per-assembly Load Native Library callbacks\" (#21555) at dotnet/coreclr","RelatedBody":"This Change implements the Native Library resolution\r\nCall-backs proposed in https://github.com/dotnet/corefx/issues/32015\r\n\r\npublic static bool RegisterDllImportResolver(\r\n    Assembly assembly,\r\n    Func<string, Assembly, DllImportSearchPath, IntPtr> callback\r\n);\r\n\r\nThis API is not yet approved, and the API contracts in CoreFX\r\nwill not be added until the API approval is complete.\r\nIn the meantime, we want to have the code reviewed, tested, and\r\navaiable in CoreCLR."},{"Id":"8758179815","Type":"PullRequestEvent","CreatedAt":"2018-12-15T01:03:41","Actor":"sbomer","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/21536","RelatedDescription":"Merged pull request \"Publish packages in Azure DevOps official build\" (#21536) at dotnet/coreclr","RelatedBody":"This enables coreclr participation in dependency flow."},{"Id":"8758131894","Type":"PullRequestEvent","CreatedAt":"2018-12-15T00:40:34","Actor":"trylek","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/21509","RelatedDescription":"Merged pull request \"Implement GC ref map parsing and display in R2RDump\" (#21509) at dotnet/coreclr","RelatedBody":"As part of my work on CPAOT implementation of GC ref map info\r\nI have implemented decoder of the info so that it can be displayed\r\nnext to the import cell signatures.\r\n\r\nThis also uncovered one possible cause of R2RDump GcInfo-related\r\ncrashes that were observed by Andon and myself. It looks like Amy\r\nin her initial implementation confused the various GC encodings\r\nand used GC info to parse the import section auxiliary data which\r\nactually contains the GC ref map info.\r\n\r\nAs part of this work I have experimentally tried out runtime\r\narchitecture virtualization in the trimmed-down version of\r\nTransitionBlock used by the GC ref map decoder and I'm relatively\r\nhappy with the result so I'm going to investigate whether we might\r\nbe able to do something similar in the compiler and avoid merging\r\nin the four preprocessed versions of the relevant files.\r\n\r\nThanks\r\n\r\nTomas"},{"Id":"8758035039","Type":"PullRequestEvent","CreatedAt":"2018-12-15T00:00:38","Actor":"CarolEidt","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/21535","RelatedDescription":"Merged pull request \"Update var life for multireg local\" (#21535) at dotnet/coreclr","RelatedBody":"When a multi-reg var is defined by a call, but doesn't currently reside in a register,\r\nwe must still update liveness.\r\n\r\nFix #21500"},{"Id":"8758035020","Type":"IssuesEvent","CreatedAt":"2018-12-15T00:00:38","Actor":"CarolEidt","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/21500","RelatedDescription":"Closed issue \"[Regression][JitStressRegs=0x2] Assertion failed '!varDsc->lvIsRegCandidate()'\" (#21500) at dotnet/coreclr","RelatedBody":"The test started to fail 4 days ago : [ci example](https://ci.dot.net/job/dotnet_coreclr/job/master/job/jitstress/job/arm64_cross_checked_ubuntu16.04_jitstressregs2_tst/61/).\r\n\r\ncc @dotnet/jit-contrib \r\n\r\n\"Don't struct-promote opaque vectors\"  #21314 looks like the most relevant change, @CarolEidt could you please take a look?"}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"8757712795","Type":"IssuesEvent","CreatedAt":"2018-12-14T22:19:57","Actor":"dsplaisted","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/10475","RelatedDescription":"Opened issue \"Acquire and use AppHost for framework dependent apps targeting .NET Core 3 and up\" (#10475) at dotnet/cli","RelatedBody":"Currently, the AppHost is in the package dependency graph of Microsoft.NETCore.App, and the `ResolvePackageAssets` task finds it in the assets file so that it can be copied to the output directory and renamed for framework-dependent apps.\r\n\r\nWith .NET Core 3.0, we will be using [targeting packs](https://github.com/dotnet/cli/issues/10006) instead of package references, so we will need another way to acquire and locate the apphost.\r\n\r\nLikely, we will implement this by generating \"download only package references\" for a package which contains the app host.  This will depend on the RID, so we will need to use the RID graph (see #10104) to resolve the best apphost RID to use.\r\n\r\n"},{"Id":"8757579362","Type":"IssuesEvent","CreatedAt":"2018-12-14T21:47:15","Actor":"vitek-karas","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/10474","RelatedDescription":"Opened issue \"Project with multiple RuntimeIdentifiers is missing exe in Self Contained deployment\" (#10474) at dotnet/cli","RelatedBody":"_From @Suchiman on December 13, 2018 17:20_\n\nWith a csproj looking like\r\n```csproj\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.2</TargetFramework>\r\n    <RuntimeIdentifiers>win10-x64;win7-x86</RuntimeIdentifiers>\r\n    <LangVersion>latest</LangVersion>\r\n    <AspNetCoreModuleName>AspNetCoreModule</AspNetCoreModuleName>\r\n    <AspNetCoreHostingModel>OutOfProcess</AspNetCoreHostingModel>\r\n  </PropertyGroup>\r\n```\r\nand a publish definition looking like\r\n```XML\r\n<Project ToolsVersion=\"4.0\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">\r\n  <PropertyGroup>\r\n    <WebPublishMethod>Package</WebPublishMethod>\r\n    <LastUsedBuildConfiguration>Release</LastUsedBuildConfiguration>\r\n    <LastUsedPlatform>Any CPU</LastUsedPlatform>\r\n    <SiteUrlToLaunchAfterPublish />\r\n    <LaunchSiteAfterPublish>True</LaunchSiteAfterPublish>\r\n    <ExcludeApp_Data>False</ExcludeApp_Data>\r\n    <TargetFramework>netcoreapp2.2</TargetFramework>\r\n    <ProjectGuid>33bc8379-5f2a-45eb-ae65-aa8cd2c62a72</ProjectGuid>\r\n    <DesktopBuildPackageLocation>$(BUILD_ARTIFACTSTAGINGDIRECTORY)\\Project.zip</DesktopBuildPackageLocation>\r\n    <PackageAsSingleFile>true</PackageAsSingleFile>\r\n    <DeployIisAppPath />\r\n    <PublishDatabaseSettings>\r\n      <Objects xmlns=\"\" />\r\n    </PublishDatabaseSettings>\r\n    <SelfContained>true</SelfContained>\r\n    <UseAppHost>true</UseAppHost>\r\n    <_IsPortable>false</_IsPortable>\r\n    <RuntimeIdentifier>win7-x86</RuntimeIdentifier>\r\n  </PropertyGroup>\r\n</Project>\r\n```\r\n\r\nPerforming a publish will generate an self contained looking output except that the `Project.exe` is missing and there's only a `Project.dll`\r\n\r\nChanging \r\n```csproj\r\n    <RuntimeIdentifiers>win10-x64;win7-x86</RuntimeIdentifiers>\r\n```\r\nto\r\n```csproj\r\n    <RuntimeIdentifier>win7-x86</RuntimeIdentifier>\r\n```\r\nfixes this but has https://github.com/dotnet/core-setup/issues/4865 as a side effect\n\n_Copied from original issue: dotnet/core#2147_"}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"8755279954","Type":"IssuesEvent","CreatedAt":"2018-12-14T14:26:02","Actor":"HelgeKeck","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/1022","RelatedDescription":"Opened issue \"NetworkInterfaceType.Wireless80211\" (#1022) at dotnet/standard","RelatedBody":"On OS X Mojave with .Net Standard 2.0\r\n\r\nfor the WiFi Adapter, System.Net.NetworkInformation.NetworkInterface.NetworkInterfaceType()\r\n\r\nreturns\r\nNetworkInterfaceType.Ethernet\r\ninstead of\r\nNetworkInterfaceType.Wireless80211"},{"Id":"8754927306","Type":"PullRequestEvent","CreatedAt":"2018-12-14T13:21:43","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/1021","RelatedDescription":"Merged pull request \"Update dependency files\" (#1021) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.ApiCompat - 1.0.0-beta.18613.20\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18613.20\r\n- Microsoft.DotNet.Build.Tasks.Packaging - 1.0.0-beta.18613.20\r\n- Microsoft.DotNet.GenAPI - 1.0.0-beta.18613.20\r\n\r\n"},{"Id":"8754823375","Type":"PullRequestEvent","CreatedAt":"2018-12-14T13:01:35","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/1021","RelatedDescription":"Opened pull request \"Update dependency files\" (#1021) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.ApiCompat - 1.0.0-beta.18613.20\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18613.20\r\n- Microsoft.DotNet.Build.Tasks.Packaging - 1.0.0-beta.18613.20\r\n- Microsoft.DotNet.GenAPI - 1.0.0-beta.18613.20\r\n\r\n"},{"Id":"8750744665","Type":"PullRequestEvent","CreatedAt":"2018-12-13T20:07:30","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/1020","RelatedDescription":"Opened pull request \"Reduce noise in reference assemblies\" (#1020) at dotnet/standard","RelatedBody":"This doesn't change any APIs. It's just reducing noise from in the textual diff of the reference assemblies.\r\n\r\n* Fix trailing whitespace (69cb85e)\r\n* Mark types as partial (c9725f7)\r\n* Replace handwritten base calls with generated ones (78649f6)\r\n"},{"Id":"8750661813","Type":"PullRequestEvent","CreatedAt":"2018-12-13T19:52:44","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/1019","RelatedDescription":"Opened pull request \"Require support for default implementations of interfaces\" (#1019) at dotnet/standard","RelatedBody":"This marker will require all implementations of .NET Standard 2.1 to support default implementations of interfaces. Needless to say that this has runtime impact. The benefit of doing this in the standard is that it allows library authors to use this feature for their interfaces. The downside is that that this is potentially a lot of runtime work. I'm curious to how the board feels about absorbing that change for .NET Standard 2.1, especially @dotnet/nsboard-xamarin and @dotnet/nsboard-unity."},{"Id":"8750605391","Type":"PullRequestEvent","CreatedAt":"2018-12-13T19:42:56","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/1018","RelatedDescription":"Opened pull request \"WIP: Add support for Index and Range\" (#1018) at dotnet/standard","RelatedBody":"The adds the basic APIs for `Index` and `Range`. However, it misses most of the [companion APIs](https://github.com/dotnet/designs/blob/master/accepted/system-range/system-range.md#companion-apis) because they don't even exist in CoreFx yet. The work is tracked in https://github.com/dotnet/corefx/issues/34076. Once done, I'll update the PR to reflect the final API shape.\r\n\r\nFor now, this PR is just a tracking item to remind us to get it done for 2.1."},{"Id":"8750481131","Type":"PullRequestEvent","CreatedAt":"2018-12-13T19:20:57","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/1017","RelatedDescription":"Opened pull request \"Add IAsyncEnumerable<T>\" (#1017) at dotnet/standard","RelatedBody":"***Before merging, change base to master**. Can only happen after #1014 is merged*."},{"Id":"8750347510","Type":"PullRequestEvent","CreatedAt":"2018-12-13T18:57:05","Actor":"wtgodbe","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/1015","RelatedDescription":"Merged pull request \"Enable publishing to build-assets registry\" (#1015) at dotnet/standard","RelatedBody":"Now that Standard is placing build output in `artifacts`, we can opt-in to publishing build assets to the BAR.\r\n\r\n@chcosta @mmitche PTAL"}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"8758549406","Type":"IssuesEvent","CreatedAt":"2018-12-15T05:30:06","Actor":"luohuazhiyu","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/34108","RelatedDescription":"Closed issue \"System.Threading.Channels-The result of the operation was already consumed and may not be used again\" (#34108) at dotnet/corefx","RelatedBody":"runtime:.net core 2.2\r\n code: \r\nvar count = 100;\r\n var channel = Channel.CreateUnbounded<int>(new UnboundedChannelOptions { SingleReader = true, SingleWriter = false });\r\n var consumerTask=  Task.Run(async () =>\r\n              {\r\n                  long sum = 0;\r\n                  var dataCount = 0;\r\n                        while (true)\r\n                        {\r\n                            var waitTask = channel.Reader.ReadAsync();\r\n                            if (!waitTask.IsCompleted)\r\n                                await waitTask;\r\n                            sum += waitTask.Result;\r\n                          dataCount++;\r\n                          if (dataCount == count * 5)\r\n                              break;\r\n                      }\r\n                   Console.WriteLine(sum);\r\n                });\r\n              var producterTask=  Task.WhenAll(Task.Run(async () =>\r\n               {\r\n                   for (int i = 0; i < count; i++)\r\n                   {\r\n                       var task = channel.Writer.WriteAsync(i);\r\n                       if (!task.IsCompleted)\r\n                           await task;\r\n                   }\r\n               }), Task.Run(async () =>\r\n               {\r\n                   for (int i = 0; i < count; i++)\r\n                   {\r\n                       var task = channel.Writer.WriteAsync(i);\r\n                       if (!task.IsCompleted)\r\n                           await task;\r\n                   }\r\n               }), Task.Run(async () =>\r\n               {\r\n                   for (int i = 0; i < count; i++)\r\n                   {\r\n                       var task = channel.Writer.WriteAsync(i);\r\n                       if (!task.IsCompleted)\r\n                           await task;\r\n                   }\r\n               }), Task.Run(async () =>\r\n               {\r\n                   for (int i = 0; i < count; i++)\r\n                   {\r\n                       var task = channel.Writer.WriteAsync(i);\r\n                       if (!task.IsCompleted)\r\n                           await task;\r\n                   }\r\n               }), Task.Run(async () =>\r\n               {\r\n                   for (int i = 0; i < count; i++)\r\n                   {\r\n                       var task = channel.Writer.WriteAsync(i);\r\n                       if (!task.IsCompleted)\r\n                           await task;\r\n                   }\r\n               }));\r\n                Task.WhenAll(consumerTask, producterTask).Wait();"},{"Id":"8758542171","Type":"IssuesEvent","CreatedAt":"2018-12-15T05:23:47","Actor":"luohuazhiyu","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/34108","RelatedDescription":"Opened issue \"System.Threading.Channels-The result of the operation was already consumed and may not be used again\" (#34108) at dotnet/corefx","RelatedBody":"runtime:.net core 2.2\r\n code: \r\nvar count = 100;\r\n var channel = Channel.CreateUnbounded<int>(new UnboundedChannelOptions { SingleReader = true, SingleWriter = false });\r\n var consumerTask=  Task.Run(async () =>\r\n              {\r\n                  long sum = 0;\r\n                  var dataCount = 0;\r\n                        while (true)\r\n                        {\r\n                            var waitTask = channel.Reader.ReadAsync();\r\n                            if (!waitTask.IsCompleted)\r\n                                await waitTask;\r\n                            sum += waitTask.Result;\r\n                          dataCount++;\r\n                          if (dataCount == count * 5)\r\n                              break;\r\n                      }\r\n                   Console.WriteLine(sum);\r\n                });\r\n              var producterTask=  Task.WhenAll(Task.Run(async () =>\r\n               {\r\n                   for (int i = 0; i < count; i++)\r\n                   {\r\n                       var task = channel.Writer.WriteAsync(i);\r\n                       if (!task.IsCompleted)\r\n                           await task;\r\n                   }\r\n               }), Task.Run(async () =>\r\n               {\r\n                   for (int i = 0; i < count; i++)\r\n                   {\r\n                       var task = channel.Writer.WriteAsync(i);\r\n                       if (!task.IsCompleted)\r\n                           await task;\r\n                   }\r\n               }), Task.Run(async () =>\r\n               {\r\n                   for (int i = 0; i < count; i++)\r\n                   {\r\n                       var task = channel.Writer.WriteAsync(i);\r\n                       if (!task.IsCompleted)\r\n                           await task;\r\n                   }\r\n               }), Task.Run(async () =>\r\n               {\r\n                   for (int i = 0; i < count; i++)\r\n                   {\r\n                       var task = channel.Writer.WriteAsync(i);\r\n                       if (!task.IsCompleted)\r\n                           await task;\r\n                   }\r\n               }), Task.Run(async () =>\r\n               {\r\n                   for (int i = 0; i < count; i++)\r\n                   {\r\n                       var task = channel.Writer.WriteAsync(i);\r\n                       if (!task.IsCompleted)\r\n                           await task;\r\n                   }\r\n               }));\r\n                Task.WhenAll(consumerTask, producterTask).Wait();"},{"Id":"8758521122","Type":"PullRequestEvent","CreatedAt":"2018-12-15T05:05:05","Actor":"ahsonkhan","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/34107","RelatedDescription":"Opened pull request \"Add span-based TextEncoder APIs and remove use of unsafe code in implementations by using Span.\" (#34107) at dotnet/corefx","RelatedBody":"- Added span-based APIs to `TextEncoder` (this has not gone through API review yet which is why I have marked as no merge).\r\n  - **Motivation:** If I am to use the default `JavaScriptEncoder` encode API to escape strings within the `Utf8JsonWriter`, I will need the `ReadOnlySpan<char>` equivalents as well (probably along with `ReadOnlySpan<byte>` for UTF-8 in the future **IF** we plan to add them here rather than try a different approach all together). What are the initial thoughts on adding public APIs to TextEncoder? Are we allowed to or is the type effectively frozen? That is the primary reason for this PR/change.\r\n- Replace use of unsafe and pointers with spans (for internal/private at least).\r\n- Fixed formatting and coding style since I was touching the code anyway.\r\n- I couldn't find a ref file here to update. Do we need one?"},{"Id":"8758480560","Type":"IssuesEvent","CreatedAt":"2018-12-15T04:29:32","Actor":"benaadams","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/34106","RelatedDescription":"Opened issue \"[CI Failure] TimeZoneInfo_DisplayNameStartsWithOffset\" (#34106) at dotnet/corefx","RelatedBody":"TimeZoneInfo_DisplayNameStartsWithOffset\r\n\r\nWindows.7.Amd64.Open-x64-Debug\r\n\r\n```\r\nUnhandled Exception of Type Xunit.Sdk.TrueException\r\nMessage :\r\n01:00 != 00:00:00, dn:(UTC+01:00) Casablanca, sn:(UTC+01:00) Casablanca\r\nExpected: True\r\nActual:   False\r\nStack Trace :\r\n   at System.Tests.TimeZoneInfoTests.TimeZoneInfo_DisplayNameStartsWithOffset() in D:\\j\\workspace\\windows-TGrou---74aa877a\\src\\System.Runtime\\tests\\System\\TimeZoneInfoTests.cs:line 2227\r\n```\r\nhttps://mc.dot.net/#/user/benaadams/pr~2Fjenkins~2Fdotnet~2Fcorefx~2Fmaster~2F/test~2Ffunctional~2Fcli~2F/75205984fff23de8f87095739ebac2e3b791e01e/workItem/System.Runtime.Tests/analysis/xunit/System.Tests.TimeZoneInfoTests~2FTimeZoneInfo_DisplayNameStartsWithOffset"},{"Id":"8758349632","Type":"PullRequestEvent","CreatedAt":"2018-12-15T02:46:45","Actor":"saurabh500","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/34040","RelatedDescription":"Merged pull request \"Update SqlClient manual test feature detection\" (#34040) at dotnet/corefx","RelatedBody":"This changes to the ManualTests to add conditional facts on Udt and ServiceBroker reliant test cases so they won't run if the resources required aren't present or enabled. Without these changes local test runs have many errors and it can be difficult to see real problems for the noise.\r\n\r\nCan a script or bak file for the `UdtTestDb` database be provided by someone who has it? It isn't possible to run a full set of manual tests without it.\r\n\r\nThis PR was split from https://github.com/dotnet/corefx/pull/33155 and into multiple commits for easier review.\r\n\r\n/cc @keeratsingh @AfsanehR @saurabh500 @David-Engel"},{"Id":"8758326904","Type":"PullRequestEvent","CreatedAt":"2018-12-15T02:30:37","Actor":"dotnet-maestro-bot","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/34105","RelatedDescription":"Opened pull request \"Update CoreClr, CoreSetup to preview-27215-01, preview-27214-02, respectively (master)\" (#34105) at dotnet/corefx","RelatedBody":"/cc @dotnet/maestro-reviewers-core"},{"Id":"8758105451","Type":"PullRequestEvent","CreatedAt":"2018-12-15T00:28:37","Actor":"safern","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/33821","RelatedDescription":"Merged pull request \"Add Azure Dev Ops CI and Official build yml definitions\" (#33821) at dotnet/corefx","RelatedBody":"Initial work and structure to move CoreFX CI and official builds to use YAML in Azure DevOps.\r\n\r\nPending work:\r\n\r\n- [x] Linux ARM\r\n- [x] MacOS 10.12 support\r\n- [x] Use officially built alpine6 with Node docker container\r\n- [x] Use Hosted Ubuntu pool for alpine 6 once bring your own node is available\r\n- [x] Use job templates from arcade\r\n\r\ncc: @danmosemsft @ericstj @ViktorHofer @wtgodbe @chcosta "}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"8758495411","Type":"PullRequestEvent","CreatedAt":"2018-12-15T04:42:30","Actor":"jcouv","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/31813","RelatedDescription":"Opened pull request \"Use speakable annotations in method type re-inference\" (#31813) at dotnet/roslyn","RelatedBody":"Fixes https://github.com/dotnet/roslyn/issues/31557"}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"8757706289","Type":"PullRequestEvent","CreatedAt":"2018-12-14T22:18:14","Actor":"MarcoRossignoli","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/6687","RelatedDescription":"Opened pull request \"[ILVerify]Added more tests\" (#6687) at dotnet/corert","RelatedBody":"Added some new tests to new type check.\r\n\r\n/cc @jkotas "},{"Id":"8752185482","Type":"PullRequestEvent","CreatedAt":"2018-12-14T01:41:29","Actor":"Dotnet-GitSync-Bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/6686","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/corefx\" (#6686) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/corefx\n\n\n**Please REBASE this PR when merging**"},{"Id":"8751115297","Type":"IssuesEvent","CreatedAt":"2018-12-13T21:17:04","Actor":"tannergooding","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/issues/6685","RelatedDescription":"Opened issue \"Ensure that the `Vector64<T>`, `Vector128<T>`, and `Vector256<T>` types are properly handled with regards to struct packing/layout\" (#6685) at dotnet/corert","RelatedBody":"The `Vector64<T>`, `Vector128<T>`, and `Vector256<T>` types are special and are directly mapped as the primitive ABI types (typically referred to as `__m64`, `__m128`, and `__m256`). ProjectN should ensure that these types are appropriately handled before they ship so that types are laid out appropriately in memory and so that it does not become a breaking change to fix them in the future.\r\n\r\nCoreCLR is already correctly handling these types in the VM layer: https://github.com/dotnet/coreclr/blob/master/src/vm/methodtablebuilder.cpp#L9521"},{"Id":"8750883749","Type":"PullRequestEvent","CreatedAt":"2018-12-13T20:33:53","Actor":"trylek","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/6683","RelatedDescription":"Merged pull request \"Clean up CPAOT statics management per Michal's advice\" (#6683) at dotnet/corert","RelatedBody":"Based on PR discussion towards my previous change I have prepared\r\nanother PR to clean up static management. I have modified the\r\nimplementation of ComputeHasGCStaticBase in ReadyToRunCompilerContext\r\nand I reverted some of my changes to CorInfoImpl.\r\n\r\nI still don't see how to completely eliminate R2R-specific code\r\nin getFieldInfo as I believe we need the special flag\r\nCORINFO_FIELD_FLAGS.CORINFO_FLG_FIELD_STATIC_IN_HEAP so that JIT takes\r\ncare of the automatic unboxing and we need special treatment\r\nfor fields with types outside of the version bubble.\r\n\r\nThanks\r\n\r\nTomas"},{"Id":"8750069820","Type":"PullRequestEvent","CreatedAt":"2018-12-13T18:06:22","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/6684","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#6684) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @fiigii"},{"Id":"8749692901","Type":"PullRequestEvent","CreatedAt":"2018-12-13T17:01:26","Actor":"Dotnet-GitSync-Bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/6684","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#6684) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"8749309365","Type":"PullRequestEvent","CreatedAt":"2018-12-13T16:05:49","Actor":"trylek","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/6683","RelatedDescription":"Opened pull request \"Clean up CPAOT statics management per Michal's advice\" (#6683) at dotnet/corert","RelatedBody":"Based on PR discussion towards my previous change I have prepared\r\nanother PR to clean up static management. I have modified the\r\nimplementation of ComputeHasGCStaticBase in ReadyToRunCompilerContext\r\nand I reverted some of my changes to CorInfoImpl.\r\n\r\nI still don't see how to completely eliminate R2R-specific code\r\nin getFieldInfo as I believe we need the special flag\r\nCORINFO_FIELD_FLAGS.CORINFO_FLG_FIELD_STATIC_IN_HEAP so that JIT takes\r\ncare of the automatic unboxing and we need special treatment\r\nfor fields with types outside of the version bubble.\r\n\r\nThanks\r\n\r\nTomas"},{"Id":"8748486678","Type":"IssuesEvent","CreatedAt":"2018-12-13T14:05:37","Actor":"kbaladurin","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/issues/6682","RelatedDescription":"Opened issue \"[CppCodeGen] Inheritance is missing in some cases\" (#6682) at dotnet/corert","RelatedBody":"Following sample compiles incorrectly:\r\n```cs\r\nusing System;\r\n\r\nnamespace Hello\r\n{\r\n    internal class Program\r\n    {\r\n        class A<T, U>\r\n        {\r\n\r\n        }\r\n\r\n        class C<T>\r\n        {\r\n\r\n        }\r\n\r\n        class B<T> : A<string, C<T>>\r\n        {\r\n\r\n        }\r\n\r\n        private static void Main(string[] args)\r\n        {\r\n            var b = new B<string>();\r\n            Console.WriteLine(\"b = \" + b);\r\n        }\r\n    }\r\n}\r\n```\r\n`B<System.__Canon>` doesn't inherit `A`:\r\n```\r\nnamespace Hello { namespace Hello { class Program_B_1_A__System___Canon_V_ {\r\n                public:\r\n                        static MethodTable * __getMethodTable();\r\n                        static void _ctor(::Hello::Hello::Program_B_1_A__System___Canon_V_*);\r\n                        static void unbox__ctor(::Hello::Hello::Program_B_1_A__System___Canon_V_*);\r\n};\r\n};};\r\n```\r\n\r\nOne of the problems is that `B<System.__Canon>` is emitted before `A<System.__Canon, System.__Canon>`. So the check `_emittedTypes.Contains(nodeType.BaseType)` in `CppWriter.OutputTypeNode` returns false. Are there any guarantees that base type is emitted before type itself?\r\n\r\nThank you!"}],"ResultType":"GitHubEvent"},"SDK":{"Events":[{"Id":"8758432923","Type":"PullRequestEvent","CreatedAt":"2018-12-15T03:50:20","Actor":"nguerrera","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/pull/2542","RelatedDescription":"Closed pull request \"Fix dogfood in build.sh\" (#2542) at dotnet/sdk","RelatedBody":"Looks like it was broken by https://github.com/dotnet/sdk/pull/2178"}],"ResultType":"GitHubEvent"},"Home-Issues":{"Issues":[{"Id":"384569679","IsPullRequest":true,"CreatedAt":"2018-11-27T00:35:00","Actor":"JamesNK","Number":"121","RawContent":null,"Title":"Add Newtonsoft.Json","State":"open","Body":"// @jongalloway ","Url":"https://github.com/dotnet/foundation/pull/121","RelatedDescription":"Open PR \"Add Newtonsoft.Json\" (#121)"},{"Id":"384212839","IsPullRequest":true,"CreatedAt":"2018-11-26T09:33:50","Actor":"stefanov-stefan","Number":"120","RawContent":null,"Title":"Added Telerik info","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/120","RelatedDescription":"Closed or merged PR \"Added Telerik info\" (#120)"},{"Id":"384212448","IsPullRequest":true,"CreatedAt":"2018-11-26T09:33:22","Actor":"stefanov-stefan","Number":"119","RawContent":null,"Title":"Added Telerik UWP proj","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/119","RelatedDescription":"Closed or merged PR \"Added Telerik UWP proj\" (#119)"},{"Id":"382378851","IsPullRequest":true,"CreatedAt":"2018-11-23T10:32:15","Actor":"pkgw","Number":"118","RawContent":null,"Title":"Update WorldWide Telescope","State":"closed","Body":"Some layout fixes, but the main change is that @pkgw is now the project director.","Url":"https://github.com/dotnet/foundation/pull/118","RelatedDescription":"Closed or merged PR \"Update WorldWide Telescope\" (#118)"},{"Id":"380070557","IsPullRequest":true,"CreatedAt":"2018-11-23T10:31:49","Actor":"leastprivilege","Number":"117","RawContent":null,"Title":"Update identityserver.md","State":"closed","Body":"significant whitespace","Url":"https://github.com/dotnet/foundation/pull/117","RelatedDescription":"Closed or merged PR \"Update identityserver.md\" (#117)"},{"Id":"379731798","IsPullRequest":true,"CreatedAt":"2018-11-13T04:22:32","Actor":"leastprivilege","Number":"114","RawContent":null,"Title":"Update identityserver.md","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/114","RelatedDescription":"Closed or merged PR \"Update identityserver.md\" (#114)"},{"Id":"379777451","IsPullRequest":true,"CreatedAt":"2018-11-13T04:21:35","Actor":"scottbrady91","Number":"116","RawContent":null,"Title":"Update to IdentityManager project","State":"closed","Body":"My employer and I have recently taken over the IdentityManager project from Dom & Brock. I've updated the IdentityManager page to reflect this and the newer version of the core repo.","Url":"https://github.com/dotnet/foundation/pull/116","RelatedDescription":"Closed or merged PR \"Update to IdentityManager project\" (#116)"},{"Id":"379733880","IsPullRequest":true,"CreatedAt":"2018-11-13T04:20:23","Actor":"leastprivilege","Number":"115","RawContent":null,"Title":"Create identitymodel.md","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/115","RelatedDescription":"Closed or merged PR \"Create identitymodel.md\" (#115)"},{"Id":"371941750","IsPullRequest":true,"CreatedAt":"2018-11-01T16:20:07","Actor":"SeanKilleen","Number":"113","RawContent":null,"Title":"Update logo for couchbase-lite in projects.json","State":"closed","Body":"Uses a working link to the logo.\r\n\r\nResolves https://github.com/dotnet/dotnetfoundation-website/issues/65\r\n\r\nFix can be verified by copying/pasting the URL into a browser.","Url":"https://github.com/dotnet/foundation/pull/113","RelatedDescription":"Closed or merged PR \"Update logo for couchbase-lite in projects.json\" (#113)"},{"Id":"365089074","IsPullRequest":false,"CreatedAt":"2018-09-29T02:45:47","Actor":"athinboy","Number":"112","RawContent":null,"Title":"Suggest: key  F12  go to source code of dotnetcore  rather then metadata","State":"open","Body":"Apology for my poor english!\r\n\r\nI have change to Java due to the boss's decision .   I think dotnet  need a big change. In China, more and more dotnet project go to die,  but new java project continuously increase!\r\n\r\nI suggest:key  F12  go to source code of dotnetcore  rather then metadata(e.g.    ***.dll.source.zip \\****.exe.source.zip),   maybe there is already done,but i don't know. \r\n\r\nthanks!\r\n","Url":"https://github.com/dotnet/foundation/issues/112","RelatedDescription":"Open issue \"Suggest: key  F12  go to source code of dotnetcore  rather then metadata\" (#112)"},{"Id":"356296763","IsPullRequest":false,"CreatedAt":"2018-09-02T16:49:34","Actor":"adamralph","Number":"111","RawContent":null,"Title":"Sourcelink location is confusing","State":"open","Body":"The README has link under the \"Cameron Taggart\" section pointing to https://github.com/ctaggart/SourceLink but the project now seems to live under the \"dotnet\" org in https://github.com/dotnet/sourcelink/ which suggests the link should be changed to that, and moved under the \"Microsoft\" section.","Url":"https://github.com/dotnet/foundation/issues/111","RelatedDescription":"Open issue \"Sourcelink location is confusing\" (#111)"},{"Id":"353832272","IsPullRequest":true,"CreatedAt":"2018-08-27T16:21:55","Actor":"jkonicki","Number":"110","RawContent":null,"Title":"Fix - add missing comma","State":"closed","Body":"@jongalloway - Looks like I missed a comma in my previous PR. Here is the fix.","Url":"https://github.com/dotnet/foundation/pull/110","RelatedDescription":"Closed or merged PR \"Fix - add missing comma\" (#110)"},{"Id":"352736883","IsPullRequest":true,"CreatedAt":"2018-08-23T23:10:07","Actor":"anthonychu","Number":"108","RawContent":null,"Title":"Fix errors in projects.json","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/108","RelatedDescription":"Closed or merged PR \"Fix errors in projects.json\" (#108)"},{"Id":"353536205","IsPullRequest":true,"CreatedAt":"2018-08-23T23:09:07","Actor":"jkonicki","Number":"109","RawContent":null,"Title":"Add Steeltoe to the project listing","State":"closed","Body":"Hi @jongalloway, Here is the PR for adding Steeltoe to the projects listing.  Let me know if you need any changes. \r\nThanks.","Url":"https://github.com/dotnet/foundation/pull/109","RelatedDescription":"Closed or merged PR \"Add Steeltoe to the project listing\" (#109)"},{"Id":"339545098","IsPullRequest":true,"CreatedAt":"2018-08-17T23:19:54","Actor":"slide","Number":"105","RawContent":null,"Title":"Add DLR/IronPython2/IronPython3","State":"closed","Body":"Add DLR/IronPython2/IronPython3 to project list.","Url":"https://github.com/dotnet/foundation/pull/105","RelatedDescription":"Closed or merged PR \"Add DLR/IronPython2/IronPython3\" (#105)"},{"Id":"336936558","IsPullRequest":false,"CreatedAt":"2018-08-07T07:06:40","Actor":"tomkerkhove","Number":"104","RawContent":null,"Title":"About still mentions CodePlex","State":"closed","Body":"About still mentions CodePlex which is now in archive mode.\r\n\r\n![image](https://user-images.githubusercontent.com/4345663/42086259-e0b7d008-7b92-11e8-96c9-02ee61ddc457.png)\r\n\r\nIs this something that I can PR?","Url":"https://github.com/dotnet/foundation/issues/104","RelatedDescription":"Closed issue \"About still mentions CodePlex\" (#104)"},{"Id":"340355507","IsPullRequest":false,"CreatedAt":"2018-07-11T18:28:16","Actor":"Eilon","Number":"107","RawContent":null,"Title":"Links to .NET Foundation web site use HTTP instead of HTTPS","State":"open","Body":"It appears that HTTPS works just fine: https://www.dotnetfoundation.org/\r\n\r\nBut the links at these places use HTTP:\r\n1. The link in the header of https://github.com/dotnet/home\r\n2. The link in the header of https://github.com/dotnet\r\n3. Some links in https://github.com/dotnet/home/blob/master/README.md (both to .NET Foundation, and a GitHub link to another project)\r\n\r\nThese links should all change to HTTPS.","Url":"https://github.com/dotnet/foundation/issues/107","RelatedDescription":"Open issue \"Links to .NET Foundation web site use HTTP instead of HTTPS\" (#107)"},{"Id":"340126921","IsPullRequest":false,"CreatedAt":"2018-07-11T07:41:25","Actor":"glatzert","Number":"106","RawContent":null,"Title":"Updates are not requested from local WSUS","State":"open","Body":"The Team somewhen Mention, that fixes should be installed automatically, if .NET Core is on a Windows Server.\r\nThis seems not to work. What are the prerequisits for this to be working?","Url":"https://github.com/dotnet/foundation/issues/106","RelatedDescription":"Open issue \"Updates are not requested from local WSUS\" (#106)"},{"Id":"326192782","IsPullRequest":true,"CreatedAt":"2018-05-24T16:33:09","Actor":"danmosemsft","Number":"103","RawContent":null,"Title":"Add ML.NET to readme","State":"closed","Body":"cc @shauheen @jongalloway ","Url":"https://github.com/dotnet/foundation/pull/103","RelatedDescription":"Closed or merged PR \"Add ML.NET to readme\" (#103)"},{"Id":"279475345","IsPullRequest":true,"CreatedAt":"2018-05-18T19:10:06","Actor":"heiligerdankgesang","Number":"92","RawContent":null,"Title":"Remove contact email from system.drawing.md","State":"closed","Body":"Contact email is outdated. Mono-project site's community section has better, more up-to-date information.","Url":"https://github.com/dotnet/foundation/pull/92","RelatedDescription":"Closed or merged PR \"Remove contact email from system.drawing.md\" (#92)"},{"Id":"285274998","IsPullRequest":true,"CreatedAt":"2018-05-18T19:09:35","Actor":"onovotny","Number":"93","RawContent":null,"Title":"Add Humanizer","State":"closed","Body":"Onboarding Humanizer: https://github.com/Humanizr/Humanizer/issues/682","Url":"https://github.com/dotnet/foundation/pull/93","RelatedDescription":"Closed or merged PR \"Add Humanizer\" (#93)"},{"Id":"286511421","IsPullRequest":true,"CreatedAt":"2018-05-18T19:07:08","Actor":"ctaggart","Number":"94","RawContent":null,"Title":"add SourceLink","State":"closed","Body":"Adding SourceLink to the project list as per the checklist https://github.com/ctaggart/SourceLink/issues/138","Url":"https://github.com/dotnet/foundation/pull/94","RelatedDescription":"Closed or merged PR \"add SourceLink\" (#94)"},{"Id":"288415599","IsPullRequest":true,"CreatedAt":"2018-05-18T19:06:48","Actor":"bfistein","Number":"95","RawContent":null,"Title":"Fix broken logo URL","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/95","RelatedDescription":"Closed or merged PR \"Fix broken logo URL\" (#95)"},{"Id":"288749196","IsPullRequest":true,"CreatedAt":"2018-05-18T19:06:24","Actor":"galatrash","Number":"96","RawContent":null,"Title":"Adding DNN Platform.","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/96","RelatedDescription":"Closed or merged PR \"Adding DNN Platform.\" (#96)"},{"Id":"294070713","IsPullRequest":true,"CreatedAt":"2018-05-18T19:06:02","Actor":"karann-msft","Number":"98","RawContent":null,"Title":"Updates to reflect the latest information","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/98","RelatedDescription":"Closed or merged PR \"Updates to reflect the latest information\" (#98)"},{"Id":"316146229","IsPullRequest":true,"CreatedAt":"2018-05-18T19:05:34","Actor":"Cheesebaron","Number":"100","RawContent":null,"Title":"Create mvvmcross.md","State":"closed","Body":"Added MvvmCross as project as part of on-boarding.\r\n\r\nhttps://github.com/MvvmCross/MvvmCross/issues/2415","Url":"https://github.com/dotnet/foundation/pull/100","RelatedDescription":"Closed or merged PR \"Create mvvmcross.md\" (#100)"},{"Id":"321003666","IsPullRequest":true,"CreatedAt":"2018-05-18T19:05:07","Actor":"shauheen","Number":"102","RawContent":null,"Title":"Update projects.json adding MLNET","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/102","RelatedDescription":"Closed or merged PR \"Update projects.json adding MLNET\" (#102)"},{"Id":"321003407","IsPullRequest":true,"CreatedAt":"2018-05-18T19:04:23","Actor":"shauheen","Number":"101","RawContent":null,"Title":"Create mlnet.md","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/101","RelatedDescription":"Closed or merged PR \"Create mlnet.md\" (#101)"},{"Id":"293777118","IsPullRequest":true,"CreatedAt":"2018-03-29T07:03:03","Actor":"mairaw","Number":"97","RawContent":null,"Title":"update CLA PDF link","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/97","RelatedDescription":"Closed or merged PR \"update CLA PDF link\" (#97)"},{"Id":"307656482","IsPullRequest":false,"CreatedAt":"2018-03-22T14:02:36","Actor":"vvavrychuk","Number":"99","RawContent":null,"Title":"not working \"Linux Distribution\" dropdown on http://www.microsoft.com/net/learn/get-started/linux ","State":"open","Body":"On the page http://www.microsoft.com/net/learn/get-started/linux dropdown \"Linux Distribution\" has no effect on the installation instruction next to him (they are always displayed for RedHat).\r\n\r\n![screenshot from 2018-03-22 16-02-19](https://user-images.githubusercontent.com/152563/37775020-6ec5778e-2dea-11e8-9ea3-b33e26c1c4e1.png)\r\n","Url":"https://github.com/dotnet/foundation/issues/99","RelatedDescription":"Open issue \"not working \"Linux Distribution\" dropdown on http://www.microsoft.com/net/learn/get-started/linux \" (#99)"}],"ResultType":"GitHubIssue"},"CoreCLR-Issues":{"Issues":[{"Id":"391339138","IsPullRequest":true,"CreatedAt":"2018-12-15T03:20:03","Actor":"benaadams","Number":"21557","RawContent":null,"Title":"Fix warning causing error in warning as error (Windows)","State":"open","Body":"Causing local build errors as `IsExceptionOfType` returns `BOOL` not `bool`\r\n```\r\n[C:\\GitHub\\coreclr\\bin\\obj\\Windows_NT.x64.Release\\src\\vm\\wks\\cee_wks.vcxproj]\r\nc:\\github\\coreclr\\src\\vm\\excep.cpp(4489):\r\nwarning C4800: 'BOOL': forcing value to bool 'true' or 'false'\r\n(performance warning)\r\n[C:\\GitHub\\coreclr\\bin\\obj\\Windows_NT.x64.Release\\src\\vm\\wks\\cee_wks.vcxproj]\r\n\r\nc:\\github\\coreclr\\src\\vm\\excep.cpp(4489):\r\nerror C2220: warning treated as error - no 'object' file generated\r\n```","Url":"https://github.com/dotnet/coreclr/pull/21557","RelatedDescription":"Open PR \"Fix warning causing error in warning as error (Windows)\" (#21557)"},{"Id":"391337352","IsPullRequest":true,"CreatedAt":"2018-12-15T02:51:40","Actor":"CarolEidt","Number":"21556","RawContent":null,"Title":"Fix more HWIntrinsic ifdefs","State":"open","Body":"","Url":"https://github.com/dotnet/coreclr/pull/21556","RelatedDescription":"Open PR \"Fix more HWIntrinsic ifdefs\" (#21556)"},{"Id":"390963737","IsPullRequest":true,"CreatedAt":"2018-12-15T02:45:56","Actor":"morganbr","Number":"21545","RawContent":null,"Title":"Add Azure DevOps signing support","State":"closed","Body":"Add signing support for Azure DevOps pipelines. This uses the arcade signing step, but with custom logic to find files to sign while we're not using arcade for the rest of the build.","Url":"https://github.com/dotnet/coreclr/pull/21545","RelatedDescription":"Closed or merged PR \"Add Azure DevOps signing support\" (#21545)"},{"Id":"391334918","IsPullRequest":true,"CreatedAt":"2018-12-15T02:18:38","Actor":"swaroop-sridhar","Number":"21555","RawContent":null,"Title":"Add Per-assembly Load Native Library callbacks","State":"open","Body":"This Change implements the Native Library resolution\r\nCall-backs proposed in https://github.com/dotnet/corefx/issues/32015\r\n\r\npublic static bool RegisterDllImportResolver(\r\n    Assembly assembly,\r\n    Func<string, Assembly, DllImportSearchPath, IntPtr> callback\r\n);\r\n\r\nThis API is not yet approved, and the API contracts in CoreFX\r\nwill not be added until the API approval is complete.\r\nIn the meantime, we want to have the code reviewed, tested, and\r\navaiable in CoreCLR.","Url":"https://github.com/dotnet/coreclr/pull/21555","RelatedDescription":"Open PR \"Add Per-assembly Load Native Library callbacks\" (#21555)"},{"Id":"390914074","IsPullRequest":true,"CreatedAt":"2018-12-15T01:03:41","Actor":"sbomer","Number":"21536","RawContent":null,"Title":"Publish packages in Azure DevOps official build","State":"closed","Body":"This enables coreclr participation in dependency flow.","Url":"https://github.com/dotnet/coreclr/pull/21536","RelatedDescription":"Closed or merged PR \"Publish packages in Azure DevOps official build\" (#21536)"},{"Id":"390909948","IsPullRequest":true,"CreatedAt":"2018-12-15T00:00:37","Actor":"CarolEidt","Number":"21535","RawContent":null,"Title":"Update var life for multireg local","State":"closed","Body":"When a multi-reg var is defined by a call, but doesn't currently reside in a register,\r\nwe must still update liveness.\r\n\r\nFix #21500","Url":"https://github.com/dotnet/coreclr/pull/21535","RelatedDescription":"Closed or merged PR \"Update var life for multireg local\" (#21535)"},{"Id":"391317453","IsPullRequest":true,"CreatedAt":"2018-12-14T23:55:54","Actor":"echesakovMSFT","Number":"21554","RawContent":null,"Title":"Switch to using resources in BenchmarksGames tests","State":"open","Body":"There are several tests in BenchmarksGames test suite that use input files with test data and hardcode their paths in harness-helpers.cs files. These tests are going to fail on Azure DevOps since we have a different layout for Core_Root and folders containing test assemblies. \r\n\r\nInstead of introducing one more layout scheme for the tests (which is gonna easily break if something changes in the way Helix places the correlation payload and work payload folders) I embedded the input files as the assembly resources. This already works in Azure DevOps (https://dnceng.visualstudio.com/public/_build/results?buildId=58868) and should work in our current test infrastructure.\r\n\r\nShould get us one step closer to green innerloop tests in Azure DevOps.","Url":"https://github.com/dotnet/coreclr/pull/21554","RelatedDescription":"Open PR \"Switch to using resources in BenchmarksGames tests\" (#21554)"},{"Id":"390808446","IsPullRequest":true,"CreatedAt":"2018-12-14T21:41:08","Actor":"tannergooding","Number":"21528","RawContent":null,"Title":"Simplifying the emitter handling of 4-byte encoded SSE instructions","State":"closed","Body":"This is an incremental cleanup on the emitter around the 4-byte encoded SSE instruction handling.\r\n\r\nCurrently, we set `UseSSE4=true` whenever the compiler supports any ISA that requires such encoding. In the emitter, we then check this value along with some other metadata/values to determine if we need to increase the estimated bytes emitted or if we have an extra byte to actually emit.\r\n\r\nWe can simplify this logic greatly by just getting rid of `UseSSE4` and relying only on `EncodedBySSE38OrSSE3A` and `UseVexEncoding`.","Url":"https://github.com/dotnet/coreclr/pull/21528","RelatedDescription":"Closed or merged PR \"Simplifying the emitter handling of 4-byte encoded SSE instructions\" (#21528)"},{"Id":"391285040","IsPullRequest":true,"CreatedAt":"2018-12-14T21:26:13","Actor":"pentp","Number":"21553","RawContent":null,"Title":"[WIP] Eliminate array/Span index sign-extension","State":"open","Body":"Array bounds check guarantees that the index is non-negative, so there is no need for sign extension.\r\n\r\nI tried to get the correct casting, but for the array/string case, I'm only getting half of the gains (`movsxd` replaced with `mov`) and while the `Span` case looks more promising (`movsxd` is eliminated entirely), it's also a bit too eager and does this for non-normalized registers (parameters/function return values), so it's not entirely correct.\r\n\r\n@dotnet/jit-contrib What would be the correct solution here?\r\n\r\nCode size reduction is up to 15% in some methods and `int.Parse` for example is about 2-4% faster.\r\n\r\nTypical diffs look like this:\r\n```diff\r\n        cmp      r10d, 103\r\n        jae      G_M36150_IG23\r\n-       movsxd   rax, r10d\r\n-       mov      r11, 0xD1FFAB1E\r\n-       cmp      byte  ptr [rax+r11], 255\r\n+       mov      rax, 0xD1FFAB1E\r\n+       cmp      byte  ptr [r10+rax], 255\r\n\r\n        cmp      eax, dword ptr [rsi+8]\r\n        jae      SHORT G_M26958_IG04\r\n-       movsxd   rax, eax\r\n+       mov      eax, eax\r\n        mov      eax, dword ptr [rsi+4*rax+16]\r\n```","Url":"https://github.com/dotnet/coreclr/pull/21553","RelatedDescription":"Open PR \"[WIP] Eliminate array/Span index sign-extension\" (#21553)"},{"Id":"391238310","IsPullRequest":true,"CreatedAt":"2018-12-14T20:16:40","Actor":"adiaaida","Number":"21551","RawContent":null,"Title":"[WIP] change ubuntu label to Ubuntu.1604.Amd64.Perf","State":"closed","Body":"","Url":"https://github.com/dotnet/coreclr/pull/21551","RelatedDescription":"Closed or merged PR \"[WIP] change ubuntu label to Ubuntu.1604.Amd64.Perf\" (#21551)"},{"Id":"391244611","IsPullRequest":false,"CreatedAt":"2018-12-14T19:54:58","Actor":"gregg-miskelly","Number":"21552","RawContent":null,"Title":"AppDomain name failure breaks debugging on macOS","State":"open","Body":"1. Create a new .NET Core 3.0 preview 1 program on macOS\r\n2. Attempt to launch the program under a debugging using the VS Code C# extension\r\n\r\nResult:\r\nDebugging fails because when the app domain create call back is fired, ICorDebugAppDomain.GetName fails with E_FAIL, which all managed debuggers in the VS family do not handle.","Url":"https://github.com/dotnet/coreclr/issues/21552","RelatedDescription":"Open issue \"AppDomain name failure breaks debugging on macOS\" (#21552)"},{"Id":"391223348","IsPullRequest":false,"CreatedAt":"2018-12-14T18:44:44","Actor":"tannergooding","Number":"21550","RawContent":null,"Title":"Fixup `impPopList` to eliminate the need to normalize SIMD and HWIntrinsic type handles","State":"open","Body":"Currently `impPopList` is validating that the struct handle for a given `TYP_SIMD` matches the struct type we have from the stack's type information: https://github.com/dotnet/coreclr/blob/master/src/jit/importer.cpp#L857\r\n\r\nHowever, in `gtGetStructHandleIfPresent` we do not currently differentiate between SIMD types and HWIntrinsic types for the `GT_IND` and `GT_LCL_FLD` cases:\r\n* https://github.com/dotnet/coreclr/blob/master/src/jit/gentree.cpp#L16446\r\n* https://github.com/dotnet/coreclr/blob/master/src/jit/gentree.cpp#L16460\r\n\r\nThis means that we have to force normalization for these cases on 9/10 `Vector<T>` types and all of the HWIntrinsic types. It also means that we needed to update `gtGetStructHandleForSIMD` (https://github.com/dotnet/coreclr/pull/21549) to handle the case where we are trying to get a `HWIntrinsic` struct handle for a `TYP_SIMD` that is larger than the size of `Vector<T>` .\r\n\r\nIt may be beneficial to update this logic so that we are able to get the correct handle and avoid normalization when the types already line up.","Url":"https://github.com/dotnet/coreclr/issues/21550","RelatedDescription":"Open issue \"Fixup `impPopList` to eliminate the need to normalize SIMD and HWIntrinsic type handles\" (#21550)"},{"Id":"391222786","IsPullRequest":true,"CreatedAt":"2018-12-14T18:42:52","Actor":"tannergooding","Number":"21549","RawContent":null,"Title":"Fixing an assert in `gtGetStructHandleForSIMD` to validate the size of the simdType is less than or equal to the largest support TYP_SIMD","State":"open","Body":"This resolves https://github.com/dotnet/coreclr/issues/21542\r\n\r\nCC. @CarolEidt, @fiigii ","Url":"https://github.com/dotnet/coreclr/pull/21549","RelatedDescription":"Open PR \"Fixing an assert in `gtGetStructHandleForSIMD` to validate the size of the simdType is less than or equal to the largest support TYP_SIMD\" (#21549)"},{"Id":"391213016","IsPullRequest":false,"CreatedAt":"2018-12-14T18:11:08","Actor":"dotnet-mc-bot","Number":"21548","RawContent":null,"Title":"Build failure: NuGet package creation issue","State":"open","Body":"Opened on behalf of @robertborr\n\nWarnings: 2\nStatus Message: failed\n\nBuild : 3.0 - 20181214.01 (Product Build)\nFailing configurations:\n- Windows\n  - PortableBuild-Debug-arm\n[Mission Control Build Info](https://mc.dot.net/#/product/netcore/30/source/official~2Fcoreclr~2Fmaster~2F/type/build~2Fproduct~2F/build/20181214.01/workItem/Orchestration/analysis/external/Link)\n\n2018-12-14T00:13:03.2185519Z E:\\A\\_work\\202\\s\\Tools\\Packaging.targets(1249,5): error : Error when creating nuget lib package from E:\\A\\_work\\202\\s\\bin\\Product\\Windows_NT.arm.Debug\\.nuget\\pkg\\specs\\runtime.win-arm.Microsoft.NETCore.Runtime.CoreCLR.nuspec. System.IO.DirectoryNotFoundException: Could not find a part of the path 'E:\\A\\_work\\202\\s\\bin\\Product\\Windows_NT.arm.Debug\\IL'. [E:\\A\\_work\\202\\s\\src\\.nuget\\Microsoft.NETCore.Runtime.CoreCLR\\Microsoft.NETCore.Runtime.CoreCLR.pkgproj]\n2018-12-14T00:13:03.2185864Z E:\\A\\_work\\202\\s\\Tools\\Packaging.targets(1249,5): error :    at System.IO.__Error.WinIOError(Int32 errorCode, String maybeFullPath) [E:\\A\\_work\\202\\s\\src\\.nuget\\Microsoft.NETCore.Runtime.CoreCLR\\Microsoft.NETCore.Runtime.CoreCLR.pkgproj]\n2018-12-14T00:13:03.2186311Z E:\\A\\_work\\202\\s\\Tools\\Packaging.targets(1249,5): error :    at System.IO.FileSystemEnumerableIterator`1.CommonInit() [E:\\A\\_work\\202\\s\\src\\.nuget\\Microsoft.NETCore.Runtime.CoreCLR\\Microsoft.NETCore.Runtime.CoreCLR.pkgproj]\n2018-12-14T00:13:03.2186700Z E:\\A\\_work\\202\\s\\Tools\\Packaging.targets(1249,5): error :    at System.IO.FileSystemEnumerableIterator`1..ctor(String path, String originalUserPath, String searchPattern, SearchOption searchOption, SearchResultHandler`1 resultHandler, Boolean checkHost) [E:\\A\\_work\\202\\s\\src\\.nuget\\Microsoft.NETCore.Runtime.CoreCLR\\Microsoft.NETCore.Runtime.CoreCLR.pkgproj]\n2018-12-14T00:13:03.2186983Z E:\\A\\_work\\202\\s\\Tools\\Packaging.targets(1249,5): error :    at System.IO.Directory.GetFiles(String path, String searchPattern, SearchOption searchOption) [E:\\A\\_work\\202\\s\\src\\.nuget\\Microsoft.NETCore.Runtime.CoreCLR\\Microsoft.NETCore.Runtime.CoreCLR.pkgproj]\n2018-12-14T00:13:03.2187360Z E:\\A\\_work\\202\\s\\Tools\\Packaging.targets(1249,5): error :    at NuGet.Common.PathResolver.PerformWildcardSearch(String basePath, String searchPath, Boolean includeEmptyDirectories, String& normalizedBasePath) [E:\\A\\_work\\202\\s\\src\\.nuget\\Microsoft.NETCore.Runtime.CoreCLR\\Microsoft.NETCore.Runtime.CoreCLR.pkgproj]\n2018-12-14T00:13:03.2187688Z E:\\A\\_work\\202\\s\\Tools\\Packaging.targets(1249,5): error :    at NuGet.Packaging.PackageBuilder.ResolveSearchPattern(String basePath, String searchPath, String targetPath, Boolean includeEmptyDirectories) [E:\\A\\_work\\202\\s\\src\\.nuget\\Microsoft.NETCore.Runtime.CoreCLR\\Microsoft.NETCore.Runtime.CoreCLR.pkgproj]\n2018-12-14T00:13:03.2188339Z E:\\A\\_work\\202\\s\\Tools\\Packaging.targets(1249,5): error :    at NuGet.Packaging.PackageBuilder.AddFiles(String basePath, String source, String destination, String exclude) [E:\\A\\_work\\202\\s\\src\\.nuget\\Microsoft.NETCore.Runtime.CoreCLR\\Microsoft.NETCore.Runtime.CoreCLR.pkgproj]\n2018-12-14T00:13:03.2188618Z E:\\A\\_work\\202\\s\\Tools\\Packaging.targets(1249,5): error :    at NuGet.Packaging.PackageBuilder.PopulateFiles(String basePath, IEnumerable`1 files) [E:\\A\\_work\\202\\s\\src\\.nuget\\Microsoft.NETCore.Runtime.CoreCLR\\Microsoft.NETCore.Runtime.CoreCLR.pkgproj]\n2018-12-14T00:13:03.2188883Z E:\\A\\_work\\202\\s\\Tools\\Packaging.targets(1249,5): error :    at Microsoft.DotNet.Build.Tasks.Packaging.NuGetPack.Pack(String nuspecPath, String nupkgPath, Manifest manifest, Boolean packSymbols) [E:\\A\\_work\\202\\s\\src\\.nuget\\Microsoft.NETCore.Runtime.CoreCLR\\Microsoft.NETCore.Runtime.CoreCLR.pkgproj]\n2018-12-14T00:13:03.2189210Z E:\\A\\_work\\202\\s\\Tools\\Packaging.targets(1249,5): error : Error when creating nuget packed package from E:\\A\\_work\\202\\s\\bin\\Product\\Windows_NT.arm.Debug\\.nuget\\pkg\\specs\\runtime.win-arm.Microsoft.NETCore.Runtime.CoreCLR.nuspec. System.IO.DirectoryNotFoundException: Could not find a part of the path 'E:\\A\\_work\\202\\s\\bin\\Product\\Windows_NT.arm.Debug\\IL'. [E:\\A\\_work\\202\\s\\src\\.nuget\\Microsoft.NETCore.Runtime.CoreCLR\\Microsoft.NETCore.Runtime.CoreCLR.pkgproj]\n2018-12-14T00:13:03.2189697Z E:\\A\\_work\\202\\s\\Tools\\Packaging.targets(1249,5): error :    at System.IO.__Error.WinIOError(Int32 errorCode, String maybeFullPath) [E:\\A\\_work\\202\\s\\src\\.nuget\\Microsoft.NETCore.Runtime.CoreCLR\\Microsoft.NETCore.Runtime.CoreCLR.pkgproj]\n2018-12-14T00:13:03.2189924Z E:\\A\\_work\\202\\s\\Tools\\Packaging.targets(1249,5): error :    at System.IO.FileSystemEnumerableIterator`1.CommonInit() [E:\\A\\_work\\202\\s\\src\\.nuget\\Microsoft.NETCore.Runtime.CoreCLR\\Microsoft.NETCore.Runtime.CoreCLR.pkgproj]\n2018-12-14T00:13:03.2190171Z E:\\A\\_work\\202\\s\\Tools\\Packaging.targets(1249,5): error :    at System.IO.FileSystemEnumerableIterator`1..ctor(String path, String originalUserPath, String searchPattern, SearchOption searchOption, SearchResultHandler`1 resultHandler, Boolean checkHost) [E:\\A\\_work\\202\\s\\src\\.nuget\\Microsoft.NETCore.Runtime.CoreCLR\\Microsoft.NETCore.Runtime.CoreCLR.pkgproj]\n2018-12-14T00:13:03.2190778Z E:\\A\\_work\\202\\s\\Tools\\Packaging.targets(1249,5): error :    at System.IO.Directory.GetFiles(String path, String searchPattern, SearchOption searchOption) [E:\\A\\_work\\202\\s\\src\\.nuget\\Microsoft.NETCore.Runtime.CoreCLR\\Microsoft.NETCore.Runtime.CoreCLR.pkgproj]\n2018-12-14T00:13:03.2191890Z E:\\A\\_work\\202\\s\\Tools\\Packaging.targets(1249,5): error :    at NuGet.Common.PathResolver.PerformWildcardSearch(String basePath, String searchPath, Boolean includeEmptyDirectories, String& normalizedBasePath) [E:\\A\\_work\\202\\s\\src\\.nuget\\Microsoft.NETCore.Runtime.CoreCLR\\Microsoft.NETCore.Runtime.CoreCLR.pkgproj]\n2018-12-14T00:13:03.2192314Z E:\\A\\_work\\202\\s\\Tools\\Packaging.targets(1249,5): error :    at NuGet.Packaging.PackageBuilder.ResolveSearchPattern(String basePath, String searchPath, String targetPath, Boolean includeEmptyDirectories) [E:\\A\\_work\\202\\s\\src\\.nuget\\Microsoft.NETCore.Runtime.CoreCLR\\Microsoft.NETCore.Runtime.CoreCLR.pkgproj]\n2018-12-14T00:13:03.2192927Z E:\\A\\_work\\202\\s\\Tools\\Packaging.targets(1249,5): error :    at NuGet.Packaging.PackageBuilder.AddFiles(String basePath, String source, String destination, String exclude) [E:\\A\\_work\\202\\s\\src\\.nuget\\Microsoft.NETCore.Runtime.CoreCLR\\Microsoft.NETCore.Runtime.CoreCLR.pkgproj]\n2018-12-14T00:13:03.2193205Z E:\\A\\_work\\202\\s\\Tools\\Packaging.targets(1249,5): error :    at NuGet.Packaging.PackageBuilder.PopulateFiles(String basePath, IEnumerable`1 files) [E:\\A\\_work\\202\\s\\src\\.nuget\\Microsoft.NETCore.Runtime.CoreCLR\\Microsoft.NETCore.Runtime.CoreCLR.pkgproj]\n2018-12-14T00:13:03.2193459Z E:\\A\\_work\\202\\s\\Tools\\Packaging.targets(1249,5): error :    at Microsoft.DotNet.Build.Tasks.Packaging.NuGetPack.Pack(String nuspecPath, String nupkgPath, Manifest manifest, Boolean packSymbols) [E:\\A\\_work\\202\\s\\src\\.nuget\\Microsoft.NETCore.Runtime.CoreCLR\\Microsoft.NETCore.Runtime.CoreCLR.pkgproj]\n2018-12-14T00:13:03.2193756Z E:\\A\\_work\\202\\s\\Tools\\Packaging.targets(1249,5): error : Error when creating nuget packed package from E:\\A\\_work\\202\\s\\bin\\Product\\Windows_NT.arm.Debug\\.nuget\\pkg\\specs\\runtime.win-arm.Microsoft.NETCore.Runtime.CoreCLR.nuspec. System.IO.DirectoryNotFoundException: Could not find a part of the path 'E:\\A\\_work\\202\\s\\bin\\Product\\Windows_NT.arm.Debug\\IL'. [E:\\A\\_work\\202\\s\\src\\.nuget\\Microsoft.NETCore.Runtime.CoreCLR\\Microsoft.NETCore.Runtime.CoreCLR.pkgproj]\n2018-12-14T00:13:03.2194044Z E:\\A\\_work\\202\\s\\Tools\\Packaging.targets(1249,5): error :    at System.IO.__Error.WinIOError(Int32 errorCode, String maybeFullPath) [E:\\A\\_work\\202\\s\\src\\.nuget\\Microsoft.NETCore.Runtime.CoreCLR\\Microsoft.NETCore.Runtime.CoreCLR.pkgproj]\n2018-12-14T00:13:03.2194260Z E:\\A\\_work\\202\\s\\Tools\\Packaging.targets(1249,5): error :    at System.IO.FileSystemEnumerableIterator`1.CommonInit() [E:\\A\\_work\\202\\s\\src\\.nuget\\Microsoft.NETCore.Runtime.CoreCLR\\Microsoft.NETCore.Runtime.CoreCLR.pkgproj]\n2018-12-14T00:13:03.2194520Z E:\\A\\_work\\202\\s\\Tools\\Packaging.targets(1249,5): error :    at System.IO.FileSystemEnumerableIterator`1..ctor(String path, String originalUserPath, String searchPattern, SearchOption searchOption, SearchResultHandler`1 resultHandler, Boolean checkHost) [E:\\A\\_work\\202\\s\\src\\.nuget\\Microsoft.NETCore.Runtime.CoreCLR\\Microsoft.NETCore.Runtime.CoreCLR.pkgproj]\n2018-12-14T00:13:03.2194791Z E:\\A\\_work\\202\\s\\Tools\\Packaging.targets(1249,5): error :    at System.IO.Directory.GetFiles(String path, String searchPattern, SearchOption searchOption) [E:\\A\\_work\\202\\s\\src\\.nuget\\Microsoft.NETCore.Runtime.CoreCLR\\Microsoft.NETCore.Runtime.CoreCLR.pkgproj]\n2018-12-14T00:13:03.2195058Z E:\\A\\_work\\202\\s\\Tools\\Packaging.targets(1249,5): error :    at NuGet.Common.PathResolver.PerformWildcardSearch(String basePath, String searchPath, Boolean includeEmptyDirectories, String& normalizedBasePath) [E:\\A\\_work\\202\\s\\src\\.nuget\\Microsoft.NETCore.Runtime.CoreCLR\\Microsoft.NETCore.Runtime.CoreCLR.pkgproj]\n2018-12-14T00:13:03.2195335Z E:\\A\\_work\\202\\s\\Tools\\Packaging.targets(1249,5): error :    at NuGet.Packaging.PackageBuilder.ResolveSearchPattern(String basePath, String searchPath, String targetPath, Boolean includeEmptyDirectories) [E:\\A\\_work\\202\\s\\src\\.nuget\\Microsoft.NETCore.Runtime.CoreCLR\\Microsoft.NETCore.Runtime.CoreCLR.pkgproj]\n2018-12-14T00:13:03.2195764Z E:\\A\\_work\\202\\s\\Tools\\Packaging.targets(1249,5): error :    at NuGet.Packaging.PackageBuilder.AddFiles(String basePath, String source, String destination, String exclude) [E:\\A\\_work\\202\\s\\src\\.nuget\\Microsoft.NETCore.Runtime.CoreCLR\\Microsoft.NETCore.Runtime.CoreCLR.pkgproj]\n2018-12-14T00:13:03.2196066Z E:\\A\\_work\\202\\s\\Tools\\Packaging.targets(1249,5): error :    at NuGet.Packaging.PackageBuilder.PopulateFiles(String basePath, IEnumerable`1 files) [E:\\A\\_work\\202\\s\\src\\.nuget\\Microsoft.NETCore.Runtime.CoreCLR\\Microsoft.NETCore.Runtime.CoreCLR.pkgproj]\n2018-12-14T00:13:03.2196291Z E:\\A\\_work\\202\\s\\Tools\\Packaging.targets(1249,5): error :    at Microsoft.DotNet.Build.Tasks.Packaging.NuGetPack.Pack(String nuspecPath, String nupkgPath, Manifest manifest, Boolean packSymbols) [E:\\A\\_work\\202\\s\\src\\.nuget\\Microsoft.NETCore.Runtime.CoreCLR\\Microsoft.NETCore.Runtime.CoreCLR.pkgproj]\n2018-12-14T00:13:03.2196665Z E:\\A\\_work\\202\\s\\Tools\\Packaging.targets(1249,5): error : Error when creating nuget lib package from E:\\A\\_work\\202\\s\\bin\\Product\\Windows_NT.arm.Debug\\.nuget\\pkg\\specs\\Microsoft.TargetingPack.Private.CoreCLR.nuspec. System.IO.FileNotFoundException: File not found: 'E:\\A\\_work\\202\\s\\bin\\Product\\Windows_NT.arm.Debug\\System.Private.CoreLib.dll'. [E:\\A\\_work\\202\\s\\src\\.nuget\\Microsoft.TargetingPack.Private.CoreCLR\\Microsoft.TargetingPack.Private.CoreCLR.pkgproj]\n2018-12-14T00:13:03.2196980Z E:\\A\\_work\\202\\s\\Tools\\Packaging.targets(1249,5): error :    at NuGet.Packaging.PackageBuilder.AddFiles(String basePath, String source, String destination, String exclude) [E:\\A\\_work\\202\\s\\src\\.nuget\\Microsoft.TargetingPack.Private.CoreCLR\\Microsoft.TargetingPack.Private.CoreCLR.pkgproj]\n2018-12-14T00:13:03.2197275Z E:\\A\\_work\\202\\s\\Tools\\Packaging.targets(1249,5): error :    at NuGet.Packaging.PackageBuilder.PopulateFiles(String basePath, IEnumerable`1 files) [E:\\A\\_work\\202\\s\\src\\.nuget\\Microsoft.TargetingPack.Private.CoreCLR\\Microsoft.TargetingPack.Private.CoreCLR.pkgproj]\n2018-12-14T00:13:03.2197540Z E:\\A\\_work\\202\\s\\Tools\\Packaging.targets(1249,5): error :    at Microsoft.DotNet.Build.Tasks.Packaging.NuGetPack.Pack(String nuspecPath, String nupkgPath, Manifest manifest, Boolean packSymbols) [E:\\A\\_work\\202\\s\\src\\.nuget\\Microsoft.TargetingPack.Private.CoreCLR\\Microsoft.TargetingPack.Private.CoreCLR.pkgproj]\n2018-12-14T00:13:03.2197867Z E:\\A\\_work\\202\\s\\Tools\\Packaging.targets(1249,5): error : Error when creating nuget packed package from E:\\A\\_work\\202\\s\\bin\\Product\\Windows_NT.arm.Debug\\.nuget\\pkg\\specs\\Microsoft.TargetingPack.Private.CoreCLR.nuspec. System.IO.FileNotFoundException: File not found: 'E:\\A\\_work\\202\\s\\bin\\Product\\Windows_NT.arm.Debug\\System.Private.CoreLib.dll'. [E:\\A\\_work\\202\\s\\src\\.nuget\\Microsoft.TargetingPack.Private.CoreCLR\\Microsoft.TargetingPack.Private.CoreCLR.pkgproj]\n2018-12-14T00:13:03.2198164Z E:\\A\\_work\\202\\s\\Tools\\Packaging.targets(1249,5): error :    at NuGet.Packaging.PackageBuilder.AddFiles(String basePath, String source, String destination, String exclude) [E:\\A\\_work\\202\\s\\src\\.nuget\\Microsoft.TargetingPack.Private.CoreCLR\\Microsoft.TargetingPack.Private.CoreCLR.pkgproj]\n2018-12-14T00:13:03.2198406Z E:\\A\\_work\\202\\s\\Tools\\Packaging.targets(1249,5): error :    at NuGet.Packaging.PackageBuilder.PopulateFiles(String basePath, IEnumerable`1 files) [E:\\A\\_work\\202\\s\\src\\.nuget\\Microsoft.TargetingPack.Private.CoreCLR\\Microsoft.TargetingPack.Private.CoreCLR.pkgproj]\n2018-12-14T00:13:03.2198661Z E:\\A\\_work\\202\\s\\Tools\\Packaging.targets(1249,5): error :    at Microsoft.DotNet.Build.Tasks.Packaging.NuGetPack.Pack(String nuspecPath, String nupkgPath, Manifest manifest, Boolean packSymbols) [E:\\A\\_work\\202\\s\\src\\.nuget\\Microsoft.TargetingPack.Private.CoreCLR\\Microsoft.TargetingPack.Private.CoreCLR.pkgproj]\n2018-12-14T00:13:03.2198961Z E:\\A\\_work\\202\\s\\Tools\\Packaging.targets(1249,5): error : Error when creating nuget packed package from E:\\A\\_work\\202\\s\\bin\\Product\\Windows_NT.arm.Debug\\.nuget\\pkg\\specs\\Microsoft.TargetingPack.Private.CoreCLR.nuspec. System.IO.FileNotFoundException: File not found: 'E:\\A\\_work\\202\\s\\bin\\Product\\Windows_NT.arm.Debug\\System.Private.CoreLib.dll'. [E:\\A\\_work\\202\\s\\src\\.nuget\\Microsoft.TargetingPack.Private.CoreCLR\\Microsoft.TargetingPack.Private.CoreCLR.pkgproj]\n2018-12-14T00:13:03.2199393Z E:\\A\\_work\\202\\s\\Tools\\Packaging.targets(1249,5): error :    at NuGet.Packaging.PackageBuilder.AddFiles(String basePath, String source, String destination, String exclude) [E:\\A\\_work\\202\\s\\src\\.nuget\\Microsoft.TargetingPack.Private.CoreCLR\\Microsoft.TargetingPack.Private.CoreCLR.pkgproj]\n2018-12-14T00:13:03.2199628Z E:\\A\\_work\\202\\s\\Tools\\Packaging.targets(1249,5): error :    at NuGet.Packaging.PackageBuilder.PopulateFiles(String basePath, IEnumerable`1 files) [E:\\A\\_work\\202\\s\\src\\.nuget\\Microsoft.TargetingPack.Private.CoreCLR\\Microsoft.TargetingPack.Private.CoreCLR.pkgproj]\n2018-12-14T00:13:03.2199879Z E:\\A\\_work\\202\\s\\Tools\\Packaging.targets(1249,5): error :    at Microsoft.DotNet.Build.Tasks.Packaging.NuGetPack.Pack(String nuspecPath, String nupkgPath, Manifest manifest, Boolean packSymbols) [E:\\A\\_work\\202\\s\\src\\.nuget\\Microsoft.TargetingPack.Private.CoreCLR\\Microsoft.TargetingPack.Private.CoreCLR.pkgproj]\n2018-12-14T00:13:03.2200181Z E:\\A\\_work\\202\\s\\Tools\\Packaging.targets(1249,5): error : Error when creating nuget lib package from E:\\A\\_work\\202\\s\\bin\\Product\\Windows_NT.arm.Debug\\.nuget\\pkg\\specs\\runtime.win-arm.Microsoft.NETCore.Jit.nuspec. System.IO.FileNotFoundException: File not found: 'E:\\A\\_work\\202\\s\\bin\\Product\\Windows_NT.arm.Debug\\clrjit.dll'. [E:\\A\\_work\\202\\s\\src\\.nuget\\Microsoft.NETCore.Jit\\Microsoft.NETCore.Jit.pkgproj]\n2018-12-14T00:13:03.2200455Z E:\\A\\_work\\202\\s\\Tools\\Packaging.targets(1249,5): error :    at NuGet.Packaging.PackageBuilder.AddFiles(String basePath, String source, String destination, String exclude) [E:\\A\\_work\\202\\s\\src\\.nuget\\Microsoft.NETCore.Jit\\Microsoft.NETCore.Jit.pkgproj]\n2018-12-14T00:13:03.2200664Z E:\\A\\_work\\202\\s\\Tools\\Packaging.targets(1249,5): error :    at NuGet.Packaging.PackageBuilder.PopulateFiles(String basePath, IEnumerable`1 files) [E:\\A\\_work\\202\\s\\src\\.nuget\\Microsoft.NETCore.Jit\\Microsoft.NETCore.Jit.pkgproj]\n2018-12-14T00:13:03.2200894Z E:\\A\\_work\\202\\s\\Tools\\Packaging.targets(1249,5): error :    at Microsoft.DotNet.Build.Tasks.Packaging.NuGetPack.Pack(String nuspecPath, String nupkgPath, Manifest manifest, Boolean packSymbols) [E:\\A\\_work\\202\\s\\src\\.nuget\\Microsoft.NETCore.Jit\\Microsoft.NETCore.Jit.pkgproj]\n2018-12-14T00:13:03.2201183Z E:\\A\\_work\\202\\s\\Tools\\Packaging.targets(1249,5): error : Error when creating nuget packed package from E:\\A\\_work\\202\\s\\bin\\Product\\Windows_NT.arm.Debug\\.nuget\\pkg\\specs\\runtime.win-arm.Microsoft.NETCore.Jit.nuspec. System.IO.FileNotFoundException: File not found: 'E:\\A\\_work\\202\\s\\bin\\Product\\Windows_NT.arm.Debug\\clrjit.dll'. [E:\\A\\_work\\202\\s\\src\\.nuget\\Microsoft.NETCore.Jit\\Microsoft.NETCore.Jit.pkgproj]\n2018-12-14T00:13:03.2201449Z E:\\A\\_work\\202\\s\\Tools\\Packaging.targets(1249,5): error :    at NuGet.Packaging.PackageBuilder.AddFiles(String basePath, String source, String destination, String exclude) [E:\\A\\_work\\202\\s\\src\\.nuget\\Microsoft.NETCore.Jit\\Microsoft.NETCore.Jit.pkgproj]\n2018-12-14T00:13:03.2201651Z E:\\A\\_work\\202\\s\\Tools\\Packaging.targets(1249,5): error :    at NuGet.Packaging.PackageBuilder.PopulateFiles(String basePath, IEnumerable`1 files) [E:\\A\\_work\\202\\s\\src\\.nuget\\Microsoft.NETCore.Jit\\Microsoft.NETCore.Jit.pkgproj]\n2018-12-14T00:13:03.2201883Z E:\\A\\_work\\202\\s\\Tools\\Packaging.targets(1249,5): error :    at Microsoft.DotNet.Build.Tasks.Packaging.NuGetPack.Pack(String nuspecPath, String nupkgPath, Manifest manifest, Boolean packSymbols) [E:\\A\\_work\\202\\s\\src\\.nuget\\Microsoft.NETCore.Jit\\Microsoft.NETCore.Jit.pkgproj]\n2018-12-14T00:13:03.2202167Z E:\\A\\_work\\202\\s\\Tools\\Packaging.targets(1249,5): error : Error when creating nuget packed package from E:\\A\\_work\\202\\s\\bin\\Product\\Windows_NT.arm.Debug\\.nuget\\pkg\\specs\\runtime.win-arm.Microsoft.NETCore.Jit.nuspec. System.IO.FileNotFoundException: File not found: 'E:\\A\\_work\\202\\s\\bin\\Product\\Windows_NT.arm.Debug\\clrjit.dll'. [E:\\A\\_work\\202\\s\\src\\.nuget\\Microsoft.NETCore.Jit\\Microsoft.NETCore.Jit.pkgproj]\n2018-12-14T00:13:03.2202492Z E:\\A\\_work\\202\\s\\Tools\\Packaging.targets(1249,5): error :    at NuGet.Packaging.PackageBuilder.AddFiles(String basePath, String source, String destination, String exclude) [E:\\A\\_work\\202\\s\\src\\.nuget\\Microsoft.NETCore.Jit\\Microsoft.NETCore.Jit.pkgproj]\n2018-12-14T00:13:03.2202755Z E:\\A\\_work\\202\\s\\Tools\\Packaging.targets(1249,5): error :    at NuGet.Packaging.PackageBuilder.PopulateFiles(String basePath, IEnumerable`1 files) [E:\\A\\_work\\202\\s\\src\\.nuget\\Microsoft.NETCore.Jit\\Microsoft.NETCore.Jit.pkgproj]\n2018-12-14T00:13:03.2202979Z E:\\A\\_work\\202\\s\\Tools\\Packaging.targets(1249,5): error :    at Microsoft.DotNet.Build.Tasks.Packaging.NuGetPack.Pack(String nuspecPath, String nupkgPath, Manifest manifest, Boolean packSymbols) [E:\\A\\_work\\202\\s\\src\\.nuget\\Microsoft.NETCore.Jit\\Microsoft.NETCore.Jit.pkgproj]\n2018-12-14T00:13:03.2203272Z E:\\A\\_work\\202\\s\\Tools\\Packaging.targets(1249,5): error : Error when creating nuget lib package from E:\\A\\_work\\202\\s\\bin\\Product\\Windows_NT.arm.Debug\\.nuget\\pkg\\specs\\runtime.win-arm.Microsoft.NETCore.TestHost.nuspec. System.IO.FileNotFoundException: File not found: 'E:\\A\\_work\\202\\s\\bin\\Product\\Windows_NT.arm.Debug\\CoreRun.exe'. [E:\\A\\_work\\202\\s\\src\\.nuget\\Microsoft.NETCore.TestHost\\Microsoft.NETCore.TestHost.pkgproj]\n2018-12-14T00:13:03.2203555Z E:\\A\\_work\\202\\s\\Tools\\Packaging.targets(1249,5): error :    at NuGet.Packaging.PackageBuilder.AddFiles(String basePath, String source, String destination, String exclude) [E:\\A\\_work\\202\\s\\src\\.nuget\\Microsoft.NETCore.TestHost\\Microsoft.NETCore.TestHost.pkgproj]\n2018-12-14T00:13:03.2203755Z E:\\A\\_work\\202\\s\\Tools\\Packaging.targets(1249,5): error :    at NuGet.Packaging.PackageBuilder.PopulateFiles(String basePath, IEnumerable`1 files) [E:\\A\\_work\\202\\s\\src\\.nuget\\Microsoft.NETCore.TestHost\\Microsoft.NETCore.TestHost.pkgproj]\n2018-12-14T00:13:03.2203991Z E:\\A\\_work\\202\\s\\Tools\\Packaging.targets(1249,5): error :    at Microsoft.DotNet.Build.Tasks.Packaging.NuGetPack.Pack(String nuspecPath, String nupkgPath, Manifest manifest, Boolean packSymbols) [E:\\A\\_work\\202\\s\\src\\.nuget\\Microsoft.NETCore.TestHost\\Microsoft.NETCore.TestHost.pkgproj]\n2018-12-14T00:13:03.2204297Z E:\\A\\_work\\202\\s\\Tools\\Packaging.targets(1249,5): error : Error when creating nuget packed package from E:\\A\\_work\\202\\s\\bin\\Product\\Windows_NT.arm.Debug\\.nuget\\pkg\\specs\\runtime.win-arm.Microsoft.NETCore.TestHost.nuspec. System.IO.FileNotFoundException: File not found: 'E:\\A\\_work\\202\\s\\bin\\Product\\Windows_NT.arm.Debug\\CoreRun.exe'. [E:\\A\\_work\\202\\s\\src\\.nuget\\Microsoft.NETCore.TestHost\\Microsoft.NETCore.TestHost.pkgproj]\n2018-12-14T00:13:03.2204659Z E:\\A\\_work\\202\\s\\Tools\\Packaging.targets(1249,5): error :    at NuGet.Packaging.PackageBuilder.AddFiles(String basePath, String source, String destination, String exclude) [E:\\A\\_work\\202\\s\\src\\.nuget\\Microsoft.NETCore.TestHost\\Microsoft.NETCore.TestHost.pkgproj]\n2018-12-14T00:13:03.2204915Z E:\\A\\_work\\202\\s\\Tools\\Packaging.targets(1249,5): error :    at NuGet.Packaging.PackageBuilder.PopulateFiles(String basePath, IEnumerable`1 files) [E:\\A\\_work\\202\\s\\src\\.nuget\\Microsoft.NETCore.TestHost\\Microsoft.NETCore.TestHost.pkgproj]\n2018-12-14T00:13:03.2205245Z E:\\A\\_work\\202\\s\\Tools\\Packaging.targets(1249,5): error :    at Microsoft.DotNet.Build.Tasks.Packaging.NuGetPack.Pack(String nuspecPath, String nupkgPath, Manifest manifest, Boolean packSymbols) [E:\\A\\_work\\202\\s\\src\\.nuget\\Microsoft.NETCore.TestHost\\Microsoft.NETCore.TestHost.pkgproj]\n2018-12-14T00:13:03.2205562Z E:\\A\\_work\\202\\s\\Tools\\Packaging.targets(1249,5): error : Error when creating nuget packed package from E:\\A\\_work\\202\\s\\bin\\Product\\Windows_NT.arm.Debug\\.nuget\\pkg\\specs\\runtime.win-arm.Microsoft.NETCore.TestHost.nuspec. System.IO.FileNotFoundException: File not found: 'E:\\A\\_work\\202\\s\\bin\\Product\\Windows_NT.arm.Debug\\CoreRun.exe'. [E:\\A\\_work\\202\\s\\src\\.nuget\\Microsoft.NETCore.TestHost\\Microsoft.NETCore.TestHost.pkgproj]\n2018-12-14T00:13:03.2205928Z E:\\A\\_work\\202\\s\\Tools\\Packaging.targets(1249,5): error :    at NuGet.Packaging.PackageBuilder.AddFiles(String basePath, String source, String destination, String exclude) [E:\\A\\_work\\202\\s\\src\\.nuget\\Microsoft.NETCore.TestHost\\Microsoft.NETCore.TestHost.pkgproj]\n2018-12-14T00:13:03.2206190Z E:\\A\\_work\\202\\s\\Tools\\Packaging.targets(1249,5): error :    at NuGet.Packaging.PackageBuilder.PopulateFiles(String basePath, IEnumerable`1 files) [E:\\A\\_work\\202\\s\\src\\.nuget\\Microsoft.NETCore.TestHost\\Microsoft.NETCore.TestHost.pkgproj]\n2018-12-14T00:13:03.2206422Z E:\\A\\_work\\202\\s\\Tools\\Packaging.targets(1249,5): error :    at Microsoft.DotNet.Build.Tasks.Packaging.NuGetPack.Pack(String nuspecPath, String nupkgPath, Manifest manifest, Boolean packSymbols) [E:\\A\\_work\\202\\s\\src\\.nuget\\Microsoft.NETCore.TestHost\\Microsoft.NETCore.TestHost.pkgproj]\n2018-12-14T00:13:03.2206709Z E:\\A\\_work\\202\\s\\Tools\\Packaging.targets(1249,5): error : Error when creating nuget lib package from E:\\A\\_work\\202\\s\\bin\\Product\\Windows_NT.arm.Debug\\.nuget\\pkg\\specs\\runtime.win-arm.Microsoft.NETCore.ILAsm.nuspec. System.IO.FileNotFoundException: File not found: 'E:\\A\\_work\\202\\s\\bin\\Product\\Windows_NT.arm.Debug\\ilasm.exe'. [E:\\A\\_work\\202\\s\\src\\.nuget\\Microsoft.NETCore.ILAsm\\Microsoft.NETCore.ILAsm.pkgproj]\n2018-12-14T00:13:03.2206990Z E:\\A\\_work\\202\\s\\Tools\\Packaging.targets(1249,5): error :    at NuGet.Packaging.PackageBuilder.AddFiles(String basePath, String source, String destination, String exclude) [E:\\A\\_work\\202\\s\\src\\.nuget\\Microsoft.NETCore.ILAsm\\Microsoft.NETCore.ILAsm.pkgproj]\n2018-12-14T00:13:03.2207249Z E:\\A\\_work\\202\\s\\Tools\\Packaging.targets(1249,5): error :    at NuGet.Packaging.PackageBuilder.PopulateFiles(String basePath, IEnumerable`1 files) [E:\\A\\_work\\202\\s\\src\\.nuget\\Microsoft.NETCore.ILAsm\\Microsoft.NETCore.ILAsm.pkgproj]\n2018-12-14T00:13:03.2207477Z E:\\A\\_work\\202\\s\\Tools\\Packaging.targets(1249,5): error :    at Microsoft.DotNet.Build.Tasks.Packaging.NuGetPack.Pack(String nuspecPath, String nupkgPath, Manifest manifest, Boolean packSymbols) [E:\\A\\_work\\202\\s\\src\\.nuget\\Microsoft.NETCore.ILAsm\\Microsoft.NETCore.ILAsm.pkgproj]\n2018-12-14T00:13:03.2207772Z E:\\A\\_work\\202\\s\\Tools\\Packaging.targets(1249,5): error : Error when creating nuget packed package from E:\\A\\_work\\202\\s\\bin\\Product\\Windows_NT.arm.Debug\\.nuget\\pkg\\specs\\runtime.win-arm.Microsoft.NETCore.ILAsm.nuspec. System.IO.FileNotFoundException: File not found: 'E:\\A\\_work\\202\\s\\bin\\Product\\Windows_NT.arm.Debug\\ilasm.exe'. [E:\\A\\_work\\202\\s\\src\\.nuget\\Microsoft.NETCore.ILAsm\\Microsoft.NETCore.ILAsm.pkgproj]\n2018-12-14T00:13:03.2208031Z E:\\A\\_work\\202\\s\\Tools\\Packaging.targets(1249,5): error :    at NuGet.Packaging.PackageBuilder.AddFiles(String basePath, String source, String destination, String exclude) [E:\\A\\_work\\202\\s\\src\\.nuget\\Microsoft.NETCore.ILAsm\\Microsoft.NETCore.ILAsm.pkgproj]\n2018-12-14T00:13:03.2208243Z E:\\A\\_work\\202\\s\\Tools\\Packaging.targets(1249,5): error :    at NuGet.Packaging.PackageBuilder.PopulateFiles(String basePath, IEnumerable`1 files) [E:\\A\\_work\\202\\s\\src\\.nuget\\Microsoft.NETCore.ILAsm\\Microsoft.NETCore.ILAsm.pkgproj]\n2018-12-14T00:13:03.2208484Z E:\\A\\_work\\202\\s\\Tools\\Packaging.targets(1249,5): error :    at Microsoft.DotNet.Build.Tasks.Packaging.NuGetPack.Pack(String nuspecPath, String nupkgPath, Manifest manifest, Boolean packSymbols) [E:\\A\\_work\\202\\s\\src\\.nuget\\Microsoft.NETCore.ILAsm\\Microsoft.NETCore.ILAsm.pkgproj]\n2018-12-14T00:13:03.2208776Z E:\\A\\_work\\202\\s\\Tools\\Packaging.targets(1249,5): error : Error when creating nuget packed package from E:\\A\\_work\\202\\s\\bin\\Product\\Windows_NT.arm.Debug\\.nuget\\pkg\\specs\\runtime.win-arm.Microsoft.NETCore.ILAsm.nuspec. System.IO.FileNotFoundException: File not found: 'E:\\A\\_work\\202\\s\\bin\\Product\\Windows_NT.arm.Debug\\ilasm.exe'. [E:\\A\\_work\\202\\s\\src\\.nuget\\Microsoft.NETCore.ILAsm\\Microsoft.NETCore.ILAsm.pkgproj]\n2018-12-14T00:13:03.2209042Z E:\\A\\_work\\202\\s\\Tools\\Packaging.targets(1249,5): error :    at NuGet.Packaging.PackageBuilder.AddFiles(String basePath, String source, String destination, String exclude) [E:\\A\\_work\\202\\s\\src\\.nuget\\Microsoft.NETCore.ILAsm\\Microsoft.NETCore.ILAsm.pkgproj]\n2018-12-14T00:13:03.2209325Z E:\\A\\_work\\202\\s\\Tools\\Packaging.targets(1249,5): error :    at NuGet.Packaging.PackageBuilder.PopulateFiles(String basePath, IEnumerable`1 files) [E:\\A\\_work\\202\\s\\src\\.nuget\\Microsoft.NETCore.ILAsm\\Microsoft.NETCore.ILAsm.pkgproj]\n2018-12-14T00:13:03.2209600Z E:\\A\\_work\\202\\s\\Tools\\Packaging.targets(1249,5): error :    at Microsoft.DotNet.Build.Tasks.Packaging.NuGetPack.Pack(String nuspecPath, String nupkgPath, Manifest manifest, Boolean packSymbols) [E:\\A\\_work\\202\\s\\src\\.nuget\\Microsoft.NETCore.ILAsm\\Microsoft.NETCore.ILAsm.pkgproj]\n2018-12-14T00:13:03.2209871Z E:\\A\\_work\\202\\s\\Tools\\Packaging.targets(1249,5): error : Error when creating nuget lib package from E:\\A\\_work\\202\\s\\bin\\Product\\Windows_NT.arm.Debug\\.nuget\\pkg\\specs\\runtime.win-arm.Microsoft.NETCore.ILDAsm.nuspec. System.IO.FileNotFoundException: File not found: 'E:\\A\\_work\\202\\s\\bin\\Product\\Windows_NT.arm.Debug\\ildasm.exe'. [E:\\A\\_work\\202\\s\\src\\.nuget\\Microsoft.NETCore.ILDAsm\\Microsoft.NETCore.ILDAsm.pkgproj]\n2018-12-14T00:13:03.2210145Z E:\\A\\_work\\202\\s\\Tools\\Packaging.targets(1249,5): error :    at NuGet.Packaging.PackageBuilder.AddFiles(String basePath, String source, String destination, String exclude) [E:\\A\\_work\\202\\s\\src\\.nuget\\Microsoft.NETCore.ILDAsm\\Microsoft.NETCore.ILDAsm.pkgproj]\n2018-12-14T00:13:03.2210366Z E:\\A\\_work\\202\\s\\Tools\\Packaging.targets(1249,5): error :    at NuGet.Packaging.PackageBuilder.PopulateFiles(String basePath, IEnumerable`1 files) [E:\\A\\_work\\202\\s\\src\\.nuget\\Microsoft.NETCore.ILDAsm\\Microsoft.NETCore.ILDAsm.pkgproj]\n2018-12-14T00:13:03.2210596Z E:\\A\\_work\\202\\s\\Tools\\Packaging.targets(1249,5): error :    at Microsoft.DotNet.Build.Tasks.Packaging.NuGetPack.Pack(String nuspecPath, String nupkgPath, Manifest manifest, Boolean packSymbols) [E:\\A\\_work\\202\\s\\src\\.nuget\\Microsoft.NETCore.ILDAsm\\Microsoft.NETCore.ILDAsm.pkgproj]\n2018-12-14T00:13:03.2210891Z E:\\A\\_work\\202\\s\\Tools\\Packaging.targets(1249,5): error : Error when creating nuget packed package from E:\\A\\_work\\202\\s\\bin\\Product\\Windows_NT.arm.Debug\\.nuget\\pkg\\specs\\runtime.win-arm.Microsoft.NETCore.ILDAsm.nuspec. System.IO.FileNotFoundException: File not found: 'E:\\A\\_work\\202\\s\\bin\\Product\\Windows_NT.arm.Debug\\ildasm.exe'. [E:\\A\\_work\\202\\s\\src\\.nuget\\Microsoft.NETCore.ILDAsm\\Microsoft.NETCore.ILDAsm.pkgproj]\n2018-12-14T00:13:03.2211202Z E:\\A\\_work\\202\\s\\Tools\\Packaging.targets(1249,5): error :    at NuGet.Packaging.PackageBuilder.AddFiles(String basePath, String source, String destination, String exclude) [E:\\A\\_work\\202\\s\\src\\.nuget\\Microsoft.NETCore.ILDAsm\\Microsoft.NETCore.ILDAsm.pkgproj]\n2018-12-14T00:13:03.2211418Z E:\\A\\_work\\202\\s\\Tools\\Packaging.targets(1249,5): error :    at NuGet.Packaging.PackageBuilder.PopulateFiles(String basePath, IEnumerable`1 files) [E:\\A\\_work\\202\\s\\src\\.nuget\\Microsoft.NETCore.ILDAsm\\Microsoft.NETCore.ILDAsm.pkgproj]\n2018-12-14T00:13:03.2211655Z E:\\A\\_work\\202\\s\\Tools\\Packaging.targets(1249,5): error :    at Microsoft.DotNet.Build.Tasks.Packaging.NuGetPack.Pack(String nuspecPath, String nupkgPath, Manifest manifest, Boolean packSymbols) [E:\\A\\_work\\202\\s\\src\\.nuget\\Microsoft.NETCore.ILDAsm\\Microsoft.NETCore.ILDAsm.pkgproj]\n2018-12-14T00:13:03.2212079Z E:\\A\\_work\\202\\s\\Tools\\Packaging.targets(1249,5): error : Error when creating nuget packed package from E:\\A\\_work\\202\\s\\bin\\Product\\Windows_NT.arm.Debug\\.nuget\\pkg\\specs\\runtime.win-arm.Microsoft.NETCore.ILDAsm.nuspec. System.IO.FileNotFoundException: File not found: 'E:\\A\\_work\\202\\s\\bin\\Product\\Windows_NT.arm.Debug\\ildasm.exe'. [E:\\A\\_work\\202\\s\\src\\.nuget\\Microsoft.NETCore.ILDAsm\\Microsoft.NETCore.ILDAsm.pkgproj]\n2018-12-14T00:13:03.2212378Z E:\\A\\_work\\202\\s\\Tools\\Packaging.targets(1249,5): error :    at NuGet.Packaging.PackageBuilder.AddFiles(String basePath, String source, String destination, String exclude) [E:\\A\\_work\\202\\s\\src\\.nuget\\Microsoft.NETCore.ILDAsm\\Microsoft.NETCore.ILDAsm.pkgproj]\n2018-12-14T00:13:03.2212687Z E:\\A\\_work\\202\\s\\Tools\\Packaging.targets(1249,5): error :    at NuGet.Packaging.PackageBuilder.PopulateFiles(String basePath, IEnumerable`1 files) [E:\\A\\_work\\202\\s\\src\\.nuget\\Microsoft.NETCore.ILDAsm\\Microsoft.NETCore.ILDAsm.pkgproj]\n2018-12-14T00:13:03.2212975Z E:\\A\\_work\\202\\s\\Tools\\Packaging.targets(1249,5): error :    at Microsoft.DotNet.Build.Tasks.Packaging.NuGetPack.Pack(String nuspecPath, String nupkgPath, Manifest manifest, Boolean packSymbols) [E:\\A\\_work\\202\\s\\src\\.nuget\\Microsoft.NETCore.ILDAsm\\Microsoft.NETCore.ILDAsm.pkgproj]","Url":"https://github.com/dotnet/coreclr/issues/21548","RelatedDescription":"Open issue \"Build failure: NuGet package creation issue\" (#21548)"},{"Id":"391127306","IsPullRequest":true,"CreatedAt":"2018-12-14T14:14:17","Actor":"dotnet-maestro-bot","Number":"21547","RawContent":null,"Title":"Update CoreClr, CoreSetup to preview-27215-01, preview-27214-02, respectively (master)","State":"open","Body":"/cc @dotnet/maestro-reviewers-core","Url":"https://github.com/dotnet/coreclr/pull/21547","RelatedDescription":"Open PR \"Update CoreClr, CoreSetup to preview-27215-01, preview-27214-02, respectively (master)\" (#21547)"},{"Id":"390977700","IsPullRequest":false,"CreatedAt":"2018-12-14T06:03:30","Actor":"AriNuer","Number":"21546","RawContent":null,"Title":"Test failure: JIT_SIMD._CircleInConvex_ro_CircleInConvex_ro_._CircleInConvex_ro_CircleInConvex_ro_cmd","State":"open","Body":"**Job:**\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/view/x86_arm_altjit/job/jitstress/job/x86_arm_altjit_checked_windows_nt_jitstress1/373/\r\n**Failed test:**\r\nJIT_SIMD._CircleInConvex_ro_CircleInConvex_ro_._CircleInConvex_ro_CircleInConvex_ro_cmd\r\n\r\n**Log:**\r\n```\r\nJIT_SIMD._CircleInConvex_ro_CircleInConvex_ro_._CircleInConvex_ro_CircleInConvex_ro_cmd [FAIL]\r\n        \r\n  \r\n  Return code:      1\r\n  Raw output file:      D:\\j\\workspace\\x86_arm_altji---c75e0863\\bin\\tests\\Windows_NT.x86.Checked\\Reports\\JIT.SIMD\\CircleInConvex_ro\\CircleInConvex_ro.output.txt\r\n  Raw output:\r\n  BEGIN EXECUTION\r\n         \"D:\\j\\workspace\\x86_arm_altji---c75e0863\\bin\\tests\\Windows_NT.x86.Checked\\Tests\\Core_Root\\corerun.exe\" CircleInConvex_ro.exe \r\n        Expected: 100\r\n        Actual: 0\r\n        END EXECUTION - FAILED\r\n        FAILED\r\n        Test Harness Exitcode is : 1\r\n        \r\n  To run the test:\r\n  > set CORE_ROOT=D:\\j\\workspace\\x86_arm_altji---c75e0863\\bin\\tests\\Windows_NT.x86.Checked\\Tests\\Core_Root\r\n  > D:\\j\\workspace\\x86_arm_altji---c75e0863\\bin\\tests\\Windows_NT.x86.Checked\\JIT\\SIMD\\CircleInConvex_ro\\CircleInConvex_ro.cmd\r\n  \r\n        Expected: True\r\n        Actual:   False\r\n        Stack Trace:\r\n          D:\\j\\workspace\\x86_arm_altji---c75e0863\\bin\\tests\\Windows_NT.x86.Checked\\TestWrappers\\JIT.SIMD\\JIT.SIMD.XUnitWrapper.cs(949,0): at JIT_SIMD._CircleInConvex_ro_CircleInConvex_ro_._CircleInConvex_ro_CircleInConvex_ro_cmd()\r\n```","Url":"https://github.com/dotnet/coreclr/issues/21546","RelatedDescription":"Open issue \"Test failure: JIT_SIMD._CircleInConvex_ro_CircleInConvex_ro_._CircleInConvex_ro_CircleInConvex_ro_cmd\" (#21546)"},{"Id":"390931602","IsPullRequest":true,"CreatedAt":"2018-12-14T04:20:48","Actor":"Dotnet-GitSync-Bot","Number":"21540","RawContent":null,"Title":"Mirror changes from dotnet/corefx","State":"closed","Body":"This PR contains mirrored changes from dotnet/corefx\n\n\n**Please REBASE this PR when merging**\n\n cc @mattwarren","Url":"https://github.com/dotnet/coreclr/pull/21540","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corefx\" (#21540)"},{"Id":"390940246","IsPullRequest":false,"CreatedAt":"2018-12-14T02:27:35","Actor":"hoyosjs","Number":"21544","RawContent":null,"Title":"Debug mode code gen optimizes unused parameters away","State":"open","Body":"@dotnet/jit-contrib \r\n\r\nThis issue repros on Windows x64 with runtimes 2.1.6, 2.2.0, and 3.0.0 preview. (SDK 2.1.502, 2.2.101, 3.0.0\r\n\r\nWith the repro below, the value of `a` gets updated under the debugger once `x` gets defined, possibly as `a` has no future references and it's a value type parameter. However, this doesn't seem to happen with other parameter types. From what I can see got variables have the same address, although in debug mode I expect the JIT not to optimize unused variables (as they can potentially be inspected or used for funceval.\r\n\r\n```c#\r\nnamespace ConsoleApp\r\n{\r\n    class Program\r\n    {\r\n        public static void Main(string[] args)\r\n        {\r\n            Test(0); \r\n        }\r\n\r\n        private static void Test(decimal a)\r\n        {\r\n            var x = a - 10;\r\n            return; // break here\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n```xml\r\n<Project Sdk = \"Microsoft.NET.Sdk\" >\r\n  <PropertyGroup>\r\n    <OutputType>Exe</OutputType>\r\n    <TargetFramework>netcoreapp2.2</TargetFramework>\r\n  </PropertyGroup>\r\n</Project>\r\n```\r\n\r\n","Url":"https://github.com/dotnet/coreclr/issues/21544","RelatedDescription":"Open issue \"Debug mode code gen optimizes unused parameters away\" (#21544)"},{"Id":"390933849","IsPullRequest":true,"CreatedAt":"2018-12-14T02:22:32","Actor":"morganbr","Number":"21541","RawContent":null,"Title":"Signing fixes","State":"closed","Body":"More signing testing changes going into a branch.","Url":"https://github.com/dotnet/coreclr/pull/21541","RelatedDescription":"Closed or merged PR \"Signing fixes\" (#21541)"},{"Id":"390936183","IsPullRequest":true,"CreatedAt":"2018-12-14T02:06:23","Actor":"sywhang","Number":"21543","RawContent":null,"Title":"Enable PinPlugAtGCTime event for standalone GC","State":"open","Body":"PinPlugAtGCTime event was never ported to use the new interface we have for emitting GC events. This is a fix to address that. ","Url":"https://github.com/dotnet/coreclr/pull/21543","RelatedDescription":"Open PR \"Enable PinPlugAtGCTime event for standalone GC\" (#21543)"},{"Id":"390933956","IsPullRequest":false,"CreatedAt":"2018-12-14T01:54:30","Actor":"VincentBu","Number":"21542","RawContent":null,"Title":"[x64_arm64_altjit] Test failure: JIT_HardwareIntrinsics._General_Vector256_1_Vector256_1_r_Vector256_1_r_._General_Vector256_1_Vector256_1_r_Vector256_1_r_cmd","State":"open","Body":"**Job:**\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/view/x64_arm64_altjit/job/jitstress/job/x64_arm64_altjit_checked_windows_nt_jitstress1/372/\r\n\r\n**Failed tests:**\r\nJIT_HardwareIntrinsics._General_Vector256_1_Vector256_1_r_Vector256_1_r_._General_Vector256_1_Vector256_1_r_Vector256_1_r_cmd\r\nJIT_HardwareIntrinsics._General_Vector256_1_Vector256_1_ro_Vector256_1_ro_._General_Vector256_1_Vector256_1_ro_Vector256_1_ro_cmd\r\n\r\n**Failed log:**\r\n```\r\nJIT_HardwareIntrinsics._General_Vector256_1_Vector256_1_r_Vector256_1_r_._General_Vector256_1_Vector256_1_r_Vector256_1_r_cmd [FAIL]\r\n        \r\n        Assert failure(PID 12176 [0x00002f90], Thread: 5632 [0x1600]): Assertion failed 'simdType == getSIMDVectorType()' in 'System.Runtime.Intrinsics.Vector256`1[Double][System.Double]:WithUpper(struct):struct:this' (IL size 142)\r\n        \r\n            File: d:\\j\\workspace\\x64_arm64_alt---733f8d21\\src\\jit\\compiler.h Line: 7653\r\n            Image: D:\\j\\workspace\\x64_arm64_alt---733f8d21\\bin\\tests\\Windows_NT.x64.Checked\\Tests\\Core_Root\\CoreRun.exe\r\n        \r\n  Return code:      1\r\n```\r\n```\r\nJIT_HardwareIntrinsics._General_Vector256_1_Vector256_1_ro_Vector256_1_ro_._General_Vector256_1_Vector256_1_ro_Vector256_1_ro_cmd [FAIL]\r\n        \r\n        Assert failure(PID 1404 [0x0000057c], Thread: 10504 [0x2908]): Assertion failed 'simdType == getSIMDVectorType()' in 'System.Runtime.Intrinsics.Vector256`1[Double][System.Double]:WithUpper(struct):struct:this' (IL size 142)\r\n        \r\n            File: d:\\j\\workspace\\x64_arm64_alt---733f8d21\\src\\jit\\compiler.h Line: 7653\r\n            Image: D:\\j\\workspace\\x64_arm64_alt---733f8d21\\bin\\tests\\Windows_NT.x64.Checked\\Tests\\Core_Root\\CoreRun.exe\r\n        \r\n  Return code:      1\r\n```","Url":"https://github.com/dotnet/coreclr/issues/21542","RelatedDescription":"Open issue \"[x64_arm64_altjit] Test failure: JIT_HardwareIntrinsics._General_Vector256_1_Vector256_1_r_Vector256_1_r_._General_Vector256_1_Vector256_1_r_Vector256_1_r_cmd\" (#21542)"},{"Id":"390923223","IsPullRequest":true,"CreatedAt":"2018-12-14T00:58:44","Actor":"erozenfeld","Number":"21539","RawContent":null,"Title":"WIP: Re-enable ObjectStackAllocationTests for arm32","State":"open","Body":"Using this to do some CI testing.\r\n","Url":"https://github.com/dotnet/coreclr/pull/21539","RelatedDescription":"Open PR \"WIP: Re-enable ObjectStackAllocationTests for arm32\" (#21539)"},{"Id":"390915102","IsPullRequest":true,"CreatedAt":"2018-12-14T00:17:45","Actor":"morganbr","Number":"21537","RawContent":null,"Title":"Real signing test","State":"closed","Body":"Put real signing changes in a branch so we can test them","Url":"https://github.com/dotnet/coreclr/pull/21537","RelatedDescription":"Closed or merged PR \"Real signing test\" (#21537)"},{"Id":"390908753","IsPullRequest":true,"CreatedAt":"2018-12-13T23:47:34","Actor":"mikem8361","Number":"21534","RawContent":null,"Title":"Fixes issue #21484 createdump segfaults","State":"open","Body":"Issue #21484: createdump segfaults with ASP.NET app\r\n\r\nThe problem is the ClrDataModule Request faulted on a dynamic module\r\ngetting the file layout flag.\r\n\r\nFixed the Request code not get the file layout and in the crash dump\r\ncode skip any dynamic modules.\r\n\r\nIssue #21485: fix EnumProcessModules hPseudoCurrentProcess bug.","Url":"https://github.com/dotnet/coreclr/pull/21534","RelatedDescription":"Open PR \"Fixes issue #21484 createdump segfaults\" (#21534)"},{"Id":"390907343","IsPullRequest":true,"CreatedAt":"2018-12-13T23:41:23","Actor":"erozenfeld","Number":"21533","RawContent":null,"Title":"Enable object stack allocation in R2R mode.","State":"open","Body":"This change modified the importer to create GenTreeAllocObj node for\r\nbox and newobj instead of a helper call in R2R mode. ObjectAllocator phase\r\ndecides whether the object can be allocated on the stack or has to be created\r\non the heap via a helper call.\r\n\r\nTo trigger object stack allocation COMPlus_JitObjectStackAllocation has\r\nto be set (it's not set by default).","Url":"https://github.com/dotnet/coreclr/pull/21533","RelatedDescription":"Open PR \"Enable object stack allocation in R2R mode.\" (#21533)"},{"Id":"390896042","IsPullRequest":true,"CreatedAt":"2018-12-13T22:55:03","Actor":"BruceForstall","Number":"21532","RawContent":null,"Title":"Fix Python 3 issues","State":"open","Body":"Fixes #21433","Url":"https://github.com/dotnet/coreclr/pull/21532","RelatedDescription":"Open PR \"Fix Python 3 issues\" (#21532)"},{"Id":"390824502","IsPullRequest":true,"CreatedAt":"2018-12-13T22:36:25","Actor":"AaronRobinsonMSFT","Number":"21529","RawContent":null,"Title":"Suppress warning of obsolete API","State":"closed","Body":"see #21517","Url":"https://github.com/dotnet/coreclr/pull/21529","RelatedDescription":"Closed or merged PR \"Suppress warning of obsolete API\" (#21529)"},{"Id":"390865927","IsPullRequest":false,"CreatedAt":"2018-12-13T21:24:14","Actor":"tannergooding","Number":"21531","RawContent":null,"Title":"Determine if we can ensure `Vector64<T>`, `Vector128<T>`, and `Vector256<T>` are appropriately aligned for RVA statics and the stack.","State":"open","Body":"The `Vector64<T>`, `Vector128<T>`, and `Vector256<T>` types are special and are directly mapped as the primitive ABI types (typically referred to as `__m64`, `__m128`, and `__m256`). If possible (i.e. it can be done in a \"pay for play\" manner), we should look at ensuring these types meet the alignment requirements for stack locals and RVA statics.","Url":"https://github.com/dotnet/coreclr/issues/21531","RelatedDescription":"Open issue \"Determine if we can ensure `Vector64<T>`, `Vector128<T>`, and `Vector256<T>` are appropriately aligned for RVA statics and the stack.\" (#21531)"},{"Id":"390798987","IsPullRequest":true,"CreatedAt":"2018-12-13T21:18:30","Actor":"CarolEidt","Number":"21527","RawContent":null,"Title":"Fix HWIntrinsics ifdef","State":"closed","Body":"Fix the ifdef for creating a zero HWIntrinsics node.","Url":"https://github.com/dotnet/coreclr/pull/21527","RelatedDescription":"Closed or merged PR \"Fix HWIntrinsics ifdef\" (#21527)"},{"Id":"390853288","IsPullRequest":false,"CreatedAt":"2018-12-13T20:47:18","Actor":"erozenfeld","Number":"21530","RawContent":null,"Title":"Dead calls to R2R allocators are not deleted","State":"open","Body":"```\r\nusing System;\r\n\r\npublic class Test\r\n{\r\n    public static void Main()\r\n    {\r\n        Test test = new Test();\r\n        test.Foo();        \r\n    }\r\n\r\n    public void Foo()\r\n    {\r\n        Console.WriteLine(\"In foo\");\r\n    }\r\n}\r\n```\r\n\r\nJit codegen:\r\n\r\n```\r\n; Assembly listing for method Test:Main()\r\n; Emitting BLENDED_CODE for X64 CPU with AVX - Windows\r\n; optimized code\r\n; rsp based frame\r\n; partially interruptible\r\n; Final local variable assignments\r\n;\r\n;  V00 OutArgs      [V00    ] (  1,  1   )  lclBlk (32) [rsp+0x00]   \"OutgoingArgSpace\"\r\n;* V01 tmp1         [V01,T00] (  0,  0   )     ref  ->  zero-ref    class-hnd exact \"NewObj constructor temp\"\r\n;\r\n; Lcl frame size = 40\r\n\r\nG_M30453_IG01:\r\n       4883EC28             sub      rsp, 40\r\n       90                   nop\r\n\r\nG_M30453_IG02:\r\n       48B968300010FA010000 mov      rcx, 0x1FA10003068\r\n       488B09               mov      rcx, gword ptr [rcx]\r\n       E829FBFFFF           call     System.Console:WriteLine(ref)\r\n       90                   nop\r\n\r\nG_M30453_IG03:\r\n       4883C428             add      rsp, 40\r\n       C3                   ret\r\n\r\n; Total bytes of code 29, prolog size 5 for method Test:Main()\r\n```\r\n\r\nFragile crossgen codegen:\r\n\r\n```\r\n; Assembly listing for method Test:Main()\r\n; Emitting BLENDED_CODE for X64 CPU with SSE2 - Windows\r\n; optimized code\r\n; rsp based frame\r\n; partially interruptible\r\n; Final local variable assignments\r\n;\r\n;  V00 OutArgs      [V00    ] (  1,  1   )  lclBlk (32) [rsp+0x00]   \"OutgoingArgSpace\"\r\n;* V01 tmp1         [V01,T00] (  0,  0   )     ref  ->  zero-ref    class-hnd exact \"NewObj constructor temp\"\r\n;\r\n; Lcl frame size = 40\r\n\r\nG_M30453_IG01:\r\n       4883EC28             sub      rsp, 40\r\n       90                   nop\r\n\r\nG_M30453_IG02:\r\n       488B0D00000000       mov      rcx, qword ptr [(reloc)]\r\n       488B09               mov      rcx, gword ptr [rcx]\r\n       E800000000           call     System.Console:WriteLine(ref)\r\n       90                   nop\r\n\r\nG_M30453_IG03:\r\n       4883C428             add      rsp, 40\r\n       C3                   ret\r\n\r\n; Total bytes of code 26, prolog size 5 for method Test:Main()\r\n```\r\n\r\nR2R codegen:\r\n\r\n```\r\n; Assembly listing for method Test:Main()\r\n; Emitting BLENDED_CODE for X64 CPU with SSE2 - Windows\r\n; optimized code\r\n; rsp based frame\r\n; partially interruptible\r\n; Final local variable assignments\r\n;\r\n;  V00 OutArgs      [V00    ] (  1,  1   )  lclBlk (32) [rsp+0x00]   \"OutgoingArgSpace\"\r\n;* V01 tmp1         [V01,T00] (  0,  0   )     ref  ->  zero-ref    class-hnd exact \"NewObj constructor temp\"\r\n;\r\n; Lcl frame size = 40\r\n\r\nG_M30453_IG01:\r\n       4883EC28             sub      rsp, 40\r\n       90                   nop\r\n\r\nG_M30453_IG02:\r\n       FF1500000000         call     [CORINFO_HELP_READYTORUN_NEW]\r\n       488B0D00000000       mov      rcx, qword ptr [(reloc)]\r\n       488B09               mov      rcx, gword ptr [rcx]\r\n       FF1500000000         call     [System.Console:WriteLine(ref)]\r\n       90                   nop\r\n\r\nG_M30453_IG03:\r\n       4883C428             add      rsp, 40\r\n       C3                   ret\r\n\r\n; Total bytes of code 33, prolog size 5 for method Test:Main()\r\n```","Url":"https://github.com/dotnet/coreclr/issues/21530","RelatedDescription":"Open issue \"Dead calls to R2R allocators are not deleted\" (#21530)"}],"ResultType":"GitHubIssue"},"CLI-Issues":{"Issues":[{"Id":"391298695","IsPullRequest":false,"CreatedAt":"2018-12-14T22:19:57","Actor":"dsplaisted","Number":"10475","RawContent":null,"Title":"Acquire and use AppHost for framework dependent apps targeting .NET Core 3 and up","State":"open","Body":"Currently, the AppHost is in the package dependency graph of Microsoft.NETCore.App, and the `ResolvePackageAssets` task finds it in the assets file so that it can be copied to the output directory and renamed for framework-dependent apps.\r\n\r\nWith .NET Core 3.0, we will be using [targeting packs](https://github.com/dotnet/cli/issues/10006) instead of package references, so we will need another way to acquire and locate the apphost.\r\n\r\nLikely, we will implement this by generating \"download only package references\" for a package which contains the app host.  This will depend on the RID, so we will need to use the RID graph (see #10104) to resolve the best apphost RID to use.\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/10475","RelatedDescription":"Open issue \"Acquire and use AppHost for framework dependent apps targeting .NET Core 3 and up\" (#10475)"},{"Id":"391290462","IsPullRequest":false,"CreatedAt":"2018-12-14T21:47:14","Actor":"vitek-karas","Number":"10474","RawContent":null,"Title":"Project with multiple RuntimeIdentifiers is missing exe in Self Contained deployment","State":"open","Body":"_From @Suchiman on December 13, 2018 17:20_\n\nWith a csproj looking like\r\n```csproj\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.2</TargetFramework>\r\n    <RuntimeIdentifiers>win10-x64;win7-x86</RuntimeIdentifiers>\r\n    <LangVersion>latest</LangVersion>\r\n    <AspNetCoreModuleName>AspNetCoreModule</AspNetCoreModuleName>\r\n    <AspNetCoreHostingModel>OutOfProcess</AspNetCoreHostingModel>\r\n  </PropertyGroup>\r\n```\r\nand a publish definition looking like\r\n```XML\r\n<Project ToolsVersion=\"4.0\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">\r\n  <PropertyGroup>\r\n    <WebPublishMethod>Package</WebPublishMethod>\r\n    <LastUsedBuildConfiguration>Release</LastUsedBuildConfiguration>\r\n    <LastUsedPlatform>Any CPU</LastUsedPlatform>\r\n    <SiteUrlToLaunchAfterPublish />\r\n    <LaunchSiteAfterPublish>True</LaunchSiteAfterPublish>\r\n    <ExcludeApp_Data>False</ExcludeApp_Data>\r\n    <TargetFramework>netcoreapp2.2</TargetFramework>\r\n    <ProjectGuid>33bc8379-5f2a-45eb-ae65-aa8cd2c62a72</ProjectGuid>\r\n    <DesktopBuildPackageLocation>$(BUILD_ARTIFACTSTAGINGDIRECTORY)\\Project.zip</DesktopBuildPackageLocation>\r\n    <PackageAsSingleFile>true</PackageAsSingleFile>\r\n    <DeployIisAppPath />\r\n    <PublishDatabaseSettings>\r\n      <Objects xmlns=\"\" />\r\n    </PublishDatabaseSettings>\r\n    <SelfContained>true</SelfContained>\r\n    <UseAppHost>true</UseAppHost>\r\n    <_IsPortable>false</_IsPortable>\r\n    <RuntimeIdentifier>win7-x86</RuntimeIdentifier>\r\n  </PropertyGroup>\r\n</Project>\r\n```\r\n\r\nPerforming a publish will generate an self contained looking output except that the `Project.exe` is missing and there's only a `Project.dll`\r\n\r\nChanging \r\n```csproj\r\n    <RuntimeIdentifiers>win10-x64;win7-x86</RuntimeIdentifiers>\r\n```\r\nto\r\n```csproj\r\n    <RuntimeIdentifier>win7-x86</RuntimeIdentifier>\r\n```\r\nfixes this but has https://github.com/dotnet/core-setup/issues/4865 as a side effect\n\n_Copied from original issue: dotnet/core#2147_","Url":"https://github.com/dotnet/cli/issues/10474","RelatedDescription":"Open issue \"Project with multiple RuntimeIdentifiers is missing exe in Self Contained deployment\" (#10474)"},{"Id":"391045743","IsPullRequest":false,"CreatedAt":"2018-12-14T17:35:04","Actor":"yevchenko-oleksandr","Number":"10471","RawContent":null,"Title":"deleted","State":"closed","Body":"\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/10471","RelatedDescription":"Closed issue \"deleted\" (#10471)"},{"Id":"391198702","IsPullRequest":true,"CreatedAt":"2018-12-14T17:24:36","Actor":"livarcocc","Number":"10473","RawContent":null,"Title":"Updating MSBuild to 16.0.0-preview.284","State":"open","Body":"","Url":"https://github.com/dotnet/cli/pull/10473","RelatedDescription":"Open PR \"Updating MSBuild to 16.0.0-preview.284\" (#10473)"},{"Id":"391102977","IsPullRequest":true,"CreatedAt":"2018-12-14T13:03:28","Actor":"dotnet-maestro[bot]","Number":"10472","RawContent":null,"Title":"Update dependency files","State":"open","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18613.20\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/10472","RelatedDescription":"Open PR \"Update dependency files\" (#10472)"},{"Id":"390981849","IsPullRequest":true,"CreatedAt":"2018-12-14T06:23:08","Actor":"livarcocc","Number":"10470","RawContent":null,"Title":"Update MSBuild to 16.0.0-preview.284","State":"open","Body":"This should contain the binding redirect fix that we need to unblock the SDk builds.\r\n\r\nThis msbuild version will also need to be inserted into the dotnet/toolset repo.\r\n","Url":"https://github.com/dotnet/cli/pull/10470","RelatedDescription":"Open PR \"Update MSBuild to 16.0.0-preview.284\" (#10470)"},{"Id":"389996026","IsPullRequest":true,"CreatedAt":"2018-12-14T06:16:23","Actor":"jainaashish","Number":"10463","RawContent":null,"Title":"Insert NuGet Build 5.0.0-preview1.5707 into cli","State":"closed","Body":"Insert NuGet Build 5.0.0-preview1.5707 into cli","Url":"https://github.com/dotnet/cli/pull/10463","RelatedDescription":"Closed or merged PR \"Insert NuGet Build 5.0.0-preview1.5707 into cli\" (#10463)"},{"Id":"389754456","IsPullRequest":true,"CreatedAt":"2018-12-14T06:15:30","Actor":"dotnet-maestro[bot]","Number":"10460","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18610.4\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18611.14\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18612.12\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/10460","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#10460)"},{"Id":"390923155","IsPullRequest":false,"CreatedAt":"2018-12-14T00:58:22","Actor":"wli3","Number":"10469","RawContent":null,"Title":"Extra new line when tool restore is successful","State":"open","Body":"```\r\nλ dotnet tool restore\r\nTool 't-rex' (version '1.0.109') was restored. Available commands: t-rex\r\nTool 'dotnetsay' (version '2.1.4') was restored. Available commands: dotnetsay\r\n\r\n\r\nRestore was successful.\r\n```","Url":"https://github.com/dotnet/cli/issues/10469","RelatedDescription":"Open issue \"Extra new line when tool restore is successful\" (#10469)"},{"Id":"389061467","IsPullRequest":false,"CreatedAt":"2018-12-13T20:47:16","Actor":"ConnorChristie","Number":"10458","RawContent":null,"Title":"Adding dotnet tool from custom source doesn't work on Ubuntu","State":"closed","Body":"## Steps to reproduce\r\nTry installing the following tool from myget pre-release source:\r\n```\r\ndotnet tool install -g Nethereum.Generator.Console --version 1.0.2-CI-20181129-133640 --add-source https://www.myget.org/F/nethereum/api/v3/index.json\r\n```\r\n\r\n## Expected  behavior\r\n```\r\nYou can invoke the tool using the following command: Nethereum.Generator.Console\r\nTool 'nethereum.generator.console' (version '1.0.2-ci-20181129-133640') was successfully installed.\r\n```\r\n\r\n## Actual behavior\r\n```\r\nThe settings file in the tool's NuGet package is invalid: Failed to retrieve tool configuration: Could not find a part of the path '/home/vsts/.dotnet/tools/.store/nethereum.generator.console/1.0.2-ci-20181129-133640/nethereum.generator.console/1.0.2-CI-20181129-133640/tools/netcoreapp2.1/any/DotnetToolSettings.xml'.\r\nTool 'nethereum.generator.console' failed to install. Please contact the tool author for assistance.\r\n```\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n```\r\n2018-12-09T20:35:08.3469399Z .NET Core SDK (reflecting any global.json):\r\n2018-12-09T20:35:08.3470064Z  Version:   2.1.500\r\n2018-12-09T20:35:08.3476095Z  Commit:    b68b931422\r\n2018-12-09T20:35:08.3476541Z \r\n2018-12-09T20:35:08.3476837Z Runtime Environment:\r\n2018-12-09T20:35:08.3477067Z  OS Name:     ubuntu\r\n2018-12-09T20:35:08.3477314Z  OS Version:  16.04\r\n2018-12-09T20:35:08.3477560Z  OS Platform: Linux\r\n2018-12-09T20:35:08.6814327Z  RID:         ubuntu.16.04-x64\r\n2018-12-09T20:35:08.7161135Z  Base Path:   /usr/share/dotnet/sdk/2.1.500/\r\n2018-12-09T20:35:08.7208165Z \r\n2018-12-09T20:35:08.7208445Z Host (useful for support):\r\n2018-12-09T20:35:08.7208576Z   Version: 2.1.6\r\n2018-12-09T20:35:08.7208682Z   Commit:  3f4f8eebd8\r\n2018-12-09T20:35:08.7208828Z \r\n2018-12-09T20:35:08.7208939Z .NET Core SDKs installed:\r\n2018-12-09T20:35:08.7209048Z   1.0.4 [/usr/share/dotnet/sdk]\r\n2018-12-09T20:35:08.7209249Z   1.1.4 [/usr/share/dotnet/sdk]\r\n2018-12-09T20:35:08.7209363Z   1.1.5 [/usr/share/dotnet/sdk]\r\n2018-12-09T20:35:08.7209467Z   1.1.7 [/usr/share/dotnet/sdk]\r\n2018-12-09T20:35:08.7209605Z   1.1.8 [/usr/share/dotnet/sdk]\r\n2018-12-09T20:35:08.7209717Z   1.1.9 [/usr/share/dotnet/sdk]\r\n2018-12-09T20:35:08.7209819Z   1.1.10 [/usr/share/dotnet/sdk]\r\n2018-12-09T20:35:08.7209979Z   1.1.11 [/usr/share/dotnet/sdk]\r\n2018-12-09T20:35:08.7210092Z   2.0.0 [/usr/share/dotnet/sdk]\r\n2018-12-09T20:35:08.7210194Z   2.0.3 [/usr/share/dotnet/sdk]\r\n2018-12-09T20:35:08.7210295Z   2.1.2 [/usr/share/dotnet/sdk]\r\n2018-12-09T20:35:08.7210573Z   2.1.4 [/usr/share/dotnet/sdk]\r\n2018-12-09T20:35:08.7210733Z   2.1.100 [/usr/share/dotnet/sdk]\r\n2018-12-09T20:35:08.7210769Z   2.1.101 [/usr/share/dotnet/sdk]\r\n2018-12-09T20:35:08.7210859Z   2.1.102 [/usr/share/dotnet/sdk]\r\n2018-12-09T20:35:08.7210934Z   2.1.103 [/usr/share/dotnet/sdk]\r\n2018-12-09T20:35:08.7210966Z   2.1.104 [/usr/share/dotnet/sdk]\r\n2018-12-09T20:35:08.7211014Z   2.1.105 [/usr/share/dotnet/sdk]\r\n2018-12-09T20:35:08.7211045Z   2.1.200 [/usr/share/dotnet/sdk]\r\n2018-12-09T20:35:08.7211123Z   2.1.201 [/usr/share/dotnet/sdk]\r\n2018-12-09T20:35:08.7211156Z   2.1.202 [/usr/share/dotnet/sdk]\r\n2018-12-09T20:35:08.7211185Z   2.1.300 [/usr/share/dotnet/sdk]\r\n2018-12-09T20:35:08.7211214Z   2.1.301 [/usr/share/dotnet/sdk]\r\n2018-12-09T20:35:08.7211296Z   2.1.302 [/usr/share/dotnet/sdk]\r\n2018-12-09T20:35:08.7211326Z   2.1.400 [/usr/share/dotnet/sdk]\r\n2018-12-09T20:35:08.7211355Z   2.1.401 [/usr/share/dotnet/sdk]\r\n2018-12-09T20:35:08.7211603Z   2.1.402 [/usr/share/dotnet/sdk]\r\n2018-12-09T20:35:08.7211640Z   2.1.403 [/usr/share/dotnet/sdk]\r\n2018-12-09T20:35:08.7211676Z   2.1.500 [/usr/share/dotnet/sdk]\r\n2018-12-09T20:35:08.7211700Z \r\n2018-12-09T20:35:08.7211738Z .NET Core runtimes installed:\r\n2018-12-09T20:35:08.7211824Z   Microsoft.AspNetCore.All 2.1.0 [/usr/share/dotnet/shared/Microsoft.AspNetCore.All]\r\n2018-12-09T20:35:08.7211867Z   Microsoft.AspNetCore.All 2.1.1 [/usr/share/dotnet/shared/Microsoft.AspNetCore.All]\r\n2018-12-09T20:35:08.7212087Z   Microsoft.AspNetCore.All 2.1.2 [/usr/share/dotnet/shared/Microsoft.AspNetCore.All]\r\n2018-12-09T20:35:08.7212174Z   Microsoft.AspNetCore.All 2.1.3 [/usr/share/dotnet/shared/Microsoft.AspNetCore.All]\r\n2018-12-09T20:35:08.7212215Z   Microsoft.AspNetCore.All 2.1.4 [/usr/share/dotnet/shared/Microsoft.AspNetCore.All]\r\n2018-12-09T20:35:08.7212365Z   Microsoft.AspNetCore.All 2.1.5 [/usr/share/dotnet/shared/Microsoft.AspNetCore.All]\r\n2018-12-09T20:35:08.7212451Z   Microsoft.AspNetCore.All 2.1.6 [/usr/share/dotnet/shared/Microsoft.AspNetCore.All]\r\n2018-12-09T20:35:08.7212491Z   Microsoft.AspNetCore.App 2.1.0 [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n2018-12-09T20:35:08.7212529Z   Microsoft.AspNetCore.App 2.1.1 [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n2018-12-09T20:35:08.7212609Z   Microsoft.AspNetCore.App 2.1.2 [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n2018-12-09T20:35:08.7212650Z   Microsoft.AspNetCore.App 2.1.3 [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n2018-12-09T20:35:08.7212697Z   Microsoft.AspNetCore.App 2.1.4 [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n2018-12-09T20:35:08.7212736Z   Microsoft.AspNetCore.App 2.1.5 [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n2018-12-09T20:35:08.7212819Z   Microsoft.AspNetCore.App 2.1.6 [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n2018-12-09T20:35:08.7212864Z   Microsoft.NETCore.App 1.0.5 [/usr/share/dotnet/shared/Microsoft.NETCore.App]\r\n2018-12-09T20:35:08.7212904Z   Microsoft.NETCore.App 1.0.7 [/usr/share/dotnet/shared/Microsoft.NETCore.App]\r\n2018-12-09T20:35:08.7212990Z   Microsoft.NETCore.App 1.0.8 [/usr/share/dotnet/shared/Microsoft.NETCore.App]\r\n2018-12-09T20:35:08.7213029Z   Microsoft.NETCore.App 1.0.9 [/usr/share/dotnet/shared/Microsoft.NETCore.App]\r\n2018-12-09T20:35:08.7213067Z   Microsoft.NETCore.App 1.0.10 [/usr/share/dotnet/shared/Microsoft.NETCore.App]\r\n2018-12-09T20:35:08.7213147Z   Microsoft.NETCore.App 1.0.11 [/usr/share/dotnet/shared/Microsoft.NETCore.App]\r\n2018-12-09T20:35:08.7213196Z   Microsoft.NETCore.App 1.0.12 [/usr/share/dotnet/shared/Microsoft.NETCore.App]\r\n2018-12-09T20:35:08.7213234Z   Microsoft.NETCore.App 1.0.13 [/usr/share/dotnet/shared/Microsoft.NETCore.App]\r\n2018-12-09T20:35:08.7213311Z   Microsoft.NETCore.App 1.1.2 [/usr/share/dotnet/shared/Microsoft.NETCore.App]\r\n2018-12-09T20:35:08.7213351Z   Microsoft.NETCore.App 1.1.4 [/usr/share/dotnet/shared/Microsoft.NETCore.App]\r\n2018-12-09T20:35:08.7213397Z   Microsoft.NETCore.App 1.1.5 [/usr/share/dotnet/shared/Microsoft.NETCore.App]\r\n2018-12-09T20:35:08.7213507Z   Microsoft.NETCore.App 1.1.6 [/usr/share/dotnet/shared/Microsoft.NETCore.App]\r\n2018-12-09T20:35:08.7213547Z   Microsoft.NETCore.App 1.1.7 [/usr/share/dotnet/shared/Microsoft.NETCore.App]\r\n2018-12-09T20:35:08.7213585Z   Microsoft.NETCore.App 1.1.8 [/usr/share/dotnet/shared/Microsoft.NETCore.App]\r\n2018-12-09T20:35:08.7213624Z   Microsoft.NETCore.App 1.1.9 [/usr/share/dotnet/shared/Microsoft.NETCore.App]\r\n2018-12-09T20:35:08.7213706Z   Microsoft.NETCore.App 1.1.10 [/usr/share/dotnet/shared/Microsoft.NETCore.App]\r\n2018-12-09T20:35:08.7213753Z   Microsoft.NETCore.App 2.0.0 [/usr/share/dotnet/shared/Microsoft.NETCore.App]\r\n2018-12-09T20:35:08.7213791Z   Microsoft.NETCore.App 2.0.3 [/usr/share/dotnet/shared/Microsoft.NETCore.App]\r\n2018-12-09T20:35:08.7213873Z   Microsoft.NETCore.App 2.0.5 [/usr/share/dotnet/shared/Microsoft.NETCore.App]\r\n2018-12-09T20:35:08.7213920Z   Microsoft.NETCore.App 2.0.6 [/usr/share/dotnet/shared/Microsoft.NETCore.App]\r\n2018-12-09T20:35:08.7213957Z   Microsoft.NETCore.App 2.0.7 [/usr/share/dotnet/shared/Microsoft.NETCore.App]\r\n2018-12-09T20:35:08.7214043Z   Microsoft.NETCore.App 2.0.9 [/usr/share/dotnet/shared/Microsoft.NETCore.App]\r\n2018-12-09T20:35:08.7214083Z   Microsoft.NETCore.App 2.1.0 [/usr/share/dotnet/shared/Microsoft.NETCore.App]\r\n2018-12-09T20:35:08.7214122Z   Microsoft.NETCore.App 2.1.1 [/usr/share/dotnet/shared/Microsoft.NETCore.App]\r\n2018-12-09T20:35:08.7214203Z   Microsoft.NETCore.App 2.1.2 [/usr/share/dotnet/shared/Microsoft.NETCore.App]\r\n2018-12-09T20:35:08.7214365Z   Microsoft.NETCore.App 2.1.3 [/usr/share/dotnet/shared/Microsoft.NETCore.App]\r\n2018-12-09T20:35:08.7214404Z   Microsoft.NETCore.App 2.1.4 [/usr/share/dotnet/shared/Microsoft.NETCore.App]\r\n2018-12-09T20:35:08.7214443Z   Microsoft.NETCore.App 2.1.5 [/usr/share/dotnet/shared/Microsoft.NETCore.App]\r\n2018-12-09T20:35:08.7214527Z   Microsoft.NETCore.App 2.1.6 [/usr/share/dotnet/shared/Microsoft.NETCore.App]\r\n```\r\nThis is an Azure hosted Ubuntu-16.04 environment.\r\n\r\nI am only having this problem on Ubuntu 16.04, otherwise it works on macOS Mojave and Windows 10 as expected.","Url":"https://github.com/dotnet/cli/issues/10458","RelatedDescription":"Closed issue \"Adding dotnet tool from custom source doesn't work on Ubuntu\" (#10458)"},{"Id":"390254603","IsPullRequest":false,"CreatedAt":"2018-12-13T15:05:55","Actor":"nguerrera","Number":"10466","RawContent":null,"Title":"Issues compiling after installing SDK 2.2","State":"closed","Body":"_From @SkinnySackboy on December 11, 2018 15:45_\n\nHi,\r\n\r\nHaving already been using .NET Core 2.0 and 2.1 in production already, earlier this week we decided to start upgrading to .NET Core 2.2. On our machines (i.e. in Visual Studio), so far so good - we installed the SDK without having modified any projects and everything still works as it always used to.\r\n\r\nOn our TeamCity agents, we decided to do the same as we have in the past, i.e. to install the .NET Core 2.2 SDK. This is where the interesting problems start. Suddenly, our existing solutions which contain a .NET Core 2.1 project (event unit tests) started failing with the following error:\r\n\r\n**error NU1202: Package Microsoft.NETCore.App 2.2.0 is not compatible with netcoreapp2.1 (.NETCoreApp,Version=v2.1). Package Microsoft.NETCore.App 2.2.0 supports: netcoreapp2.2 (.NETCoreApp,Version=v2.2)**\r\n\r\nThis does not happen from Visual Studio - it only seems to happen when using the dotnet CLI. It gets even more interesting as if we first compile from Visual Studio and subsequently run dotnet build from the command line, it all works. If however you delete the bin/obj folders, dotnet build from the command line fails with the previous error.\r\n\r\nHas anyone else come across this issue, as I was not expecting the mere presence of the 2.2 SDK to suddenly cause all previous builds still targeting .NET Core 2.1 to start failing?\r\n\r\nThanks in advance\n\n_Copied from original issue: dotnet/core#2130_","Url":"https://github.com/dotnet/cli/issues/10466","RelatedDescription":"Closed issue \"Issues compiling after installing SDK 2.2\" (#10466)"},{"Id":"390362977","IsPullRequest":false,"CreatedAt":"2018-12-12T22:51:13","Actor":"ap0llo","Number":"10467","RawContent":null,"Title":"dotnet pack: Cannot change PackageId based on TFM","State":"closed","Body":"## Scenario\r\n\r\nI'm tyring to package up a console application / tool targeting both `netcoreapp2.1` and `net461`. For .NET Core I want to provide the tool as global tool, for .NET framework, the tool should be packaged as a \"tools\" package (a plain `.exe` inside the `tools` directory). I'd like to create two packages, one for each target platform.\r\n\r\n## Steps to reproduce\r\n\r\n1. Create a new console application: `dotnet new console`\r\n2. Add `net461` as additional target framework\r\n3. Set `PackageId` using a conditional `PropertyGroup`\r\n4. Run `dotnet build` and `dotnet pack`\r\n\r\nProject file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <OutputType>Exe</OutputType>\r\n    <TargetFrameworks>net461;netcoreapp2.1</TargetFrameworks>\r\n  </PropertyGroup>\r\n\r\n  <PropertyGroup Condition=\" '$(TargetFramework)' == 'net461' \">\r\n    <IsTool>true</IsTool>    \r\n    <PackageId>Package_MultiTargeted_NetFramework</PackageId>\r\n  </PropertyGroup>\r\n\r\n  <PropertyGroup Condition=\" '$(TargetFramework)' == 'netcoreapp2.1' \">\r\n    <PackAsTool>true</PackAsTool>\r\n    <PackageId>Package_MultiTargeted_NetCore</PackageId>\r\n  </PropertyGroup>\r\n\r\n</Project>\r\n```\r\n(Full repo, including a Framework-only and core-only tool can be found [here](https://github.com/ap0llo/repro-dotnet-pack-targetframework-dependent-packageid))\r\n\r\n\r\n## Expected  behavior\r\n`dotnet pack` creates two NuGet packages:\r\n\r\n- one package named `Package_MultiTargeted_NetFramework` containing only the .NET Framework exe inside the `tools` folder\r\n- a second package named `Package_MultiTargeted_NetCore` containing the .NET Core global tool (inside the `tools\\netcoreapp2.1\\any` folder)\r\n\r\n## Actual behavior\r\n\r\nA single package named `MultiTargetedTool` is created, containing \r\n\r\n- the .NET Core global tool\r\n- A `net461` build of the project inside the `lib` folder\r\n- A `netcoreapp2.1` build of the proejct inside the `lib` folder\r\n\r\n![image](https://user-images.githubusercontent.com/2821818/49891736-8c9c8080-fe47-11e8-847e-e775f3d6231e.png)\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.101\r\n Commit:    236713b0b7\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.101\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.201 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.202 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.300 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.400 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.402 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.403 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.500 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.101 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.0.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/10467","RelatedDescription":"Closed issue \"dotnet pack: Cannot change PackageId based on TFM\" (#10467)"},{"Id":"390396402","IsPullRequest":false,"CreatedAt":"2018-12-12T20:29:57","Actor":"dagood","Number":"10468","RawContent":null,"Title":"Add 'dotnet tool install' failure potential reason: 'tool requires a runtime that is not installed'","State":"open","Body":"From https://github.com/dotnet/source-build/issues/926#issuecomment-446345298:\r\n\r\n> [@tmds] 'requires a runtime that is not installed' should be added to 'This failure may have been caused by'.\r\n\r\nhttps://github.com/dotnet/cli/blob/22cbfcb49bd9a38292ac6f66a14158b426daefdb/src/dotnet/commands/dotnet-tool/install/LocalizableStrings.resx#L182-L189\r\n\r\nFailure context:\r\n\r\n```\r\n$ dotnet tool install -g dotnet-dev-certs\r\nerror NU1202: Package dotnet-dev-certs 2.2.0 is not compatible with netcoreapp2.1 (.NETCoreApp,Version=v2.1) / any. Package dotnet-dev-certs 2.2.0 supports: netcoreapp2.2 (.NETCoreApp,Version=v2.2) / any\r\nThe tool package could not be restored.\r\nTool 'dotnet-dev-certs' failed to install. This failure may have been caused by:\r\n\r\n* You are attempting to install a preview release and did not use the --version option to specify the version.\r\n* A package by this name was found, but it was not a .NET Core tool.\r\n* The required NuGet feed cannot be accessed, perhaps because of an Internet connection problem.\r\n* You mistyped the name of the tool.\r\n```\r\n\r\n/cc @wli3 ","Url":"https://github.com/dotnet/cli/issues/10468","RelatedDescription":"Open issue \"Add 'dotnet tool install' failure potential reason: 'tool requires a runtime that is not installed'\" (#10468)"},{"Id":"390037621","IsPullRequest":false,"CreatedAt":"2018-12-12T18:13:44","Actor":"xavierjohn","Number":"10465","RawContent":null,"Title":"dotnet 2.1.6 publish with --self-contained false produces apphost.exe that does not work","State":"closed","Body":"Trying to publish a .net core exe without the runtime using the following command\r\n\r\n## Steps to reproduce\r\ndotnet publish --configuration Release --runtime win7-x64 --self-contained false --output c:\\outputfolder\r\n\r\n## Expected  behavior\r\nProduces a {application}.exe\r\n\r\n## Actual behavior\r\nProduces apphost.exe that does not work.\r\n\r\nI can run the program using\r\ndotnet.exe application.dll\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\nRuntime Environment:\r\nOS Name: Windows\r\nOS Version: 10.0.17134\r\nOS Platform: Windows\r\nRID: win10-x64\r\nBase Path: C:\\Program Files\\dotnet\\sdk\\2.1.500\\\r\n\r\nHost (useful for support):\r\nVersion: 2.1.6\r\nCommit: 3f4f8eebd8\r\n\r\n.NET Core SDKs installed:\r\n2.1.202 [C:\\Program Files\\dotnet\\sdk]\r\n2.1.403 [C:\\Program Files\\dotnet\\sdk]\r\n2.1.500 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/10465","RelatedDescription":"Closed issue \"dotnet 2.1.6 publish with --self-contained false produces apphost.exe that does not work\" (#10465)"},{"Id":"390022633","IsPullRequest":false,"CreatedAt":"2018-12-12T05:52:07","Actor":"donhuvy","Number":"10464","RawContent":null,"Title":"No webpage was found for the web address: https://localhost:5001/","State":"closed","Body":"## Steps to reproduce\r\nUse Windows 10 Pro, Visual studio 2019 Preview\r\n```\r\ndotnet new webapi\r\ndotnet restore\r\ndotnet run\r\n```\r\n\r\n## Expected  behavior\r\nhttps://localhost:5001/ Show webpage\r\n\r\n## Actual behavior\r\nhttps://localhost:5001/ Error\r\n\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n```\r\nC:\\Users\\donhuvy>dotnet --info\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.1.600-preview-009426\r\n Commit:    48b4f2105d\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.16299\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.600-preview-009426\\\r\n\r\nHost (useful for support):\r\n  Version: 2.1.6\r\n  Commit:  3f4f8eebd8\r\n\r\n.NET Core SDKs installed:\r\n  2.1.600-preview-009426 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n<img width=\"960\" alt=\"dotnet1\" src=\"https://user-images.githubusercontent.com/1328316/49840337-8d9cc600-fde5-11e8-9969-957e01a3e58a.png\">\r\n<img width=\"800\" alt=\"dotnet2\" src=\"https://user-images.githubusercontent.com/1328316/49840338-8e355c80-fde5-11e8-8c46-d314285e44c2.png\">\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/10464","RelatedDescription":"Closed issue \"No webpage was found for the web address: https://localhost:5001/\" (#10464)"},{"Id":"389836381","IsPullRequest":true,"CreatedAt":"2018-12-11T17:38:13","Actor":"nugetlurker","Number":"10462","RawContent":null,"Title":"Insert NuGet Build 5.0.0-preview1.5707 into cli","State":"closed","Body":"Insert NuGet Build 5.0.0-preview1.5707 into cli release/2.2.2xx branch","Url":"https://github.com/dotnet/cli/pull/10462","RelatedDescription":"Closed or merged PR \"Insert NuGet Build 5.0.0-preview1.5707 into cli\" (#10462)"},{"Id":"388965434","IsPullRequest":false,"CreatedAt":"2018-12-11T17:35:59","Actor":"taori","Number":"10454","RawContent":null,"Title":"CS0118 if folder name ends with \"Application\"","State":"closed","Body":"## Steps to reproduce\r\n- create folder like Company.Desktop.Application\r\n- enter folder\r\n- dotnet new wpf\r\n- dotnet run\r\n\r\n## Expected  behavior\r\nApplication runs\r\n\r\n## Actual behavior\r\nApplication can't compile because of CS0118\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\ndotnet --info\r\n\r\nMicrosoft Windows [Version 6.3.9600]\r\n(c) 2013 Microsoft Corporation. Alle Rechte vorbehalten.\r\n\r\n.NET Core SDK (gemäß \"global.json\"):\r\n Version:   3.0.100-preview-009812\r\n Commit:    e3abf6e935\r\n\r\nLaufzeitumgebung:\r\n OS Name:     Windows\r\n OS Version:  6.3.9600\r\n OS Platform: Windows\r\n RID:         win81-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview-009812\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview-27122-01\r\n  Commit:  00c5c8bc40\r\n\r\n.NET Core SDKs installed:\r\n  2.1.500 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.600-preview-009426 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview-009812 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview-18579-0056 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview-27122-01 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-alpha-27128-4 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/10454","RelatedDescription":"Closed issue \"CS0118 if folder name ends with \"Application\"\" (#10454)"},{"Id":"389836363","IsPullRequest":true,"CreatedAt":"2018-12-11T16:05:45","Actor":"nugetlurker","Number":"10461","RawContent":null,"Title":"Insert NuGet Build 5.0.0-preview1.5707 into cli","State":"open","Body":"Insert NuGet Build 5.0.0-preview1.5707 into cli release/2.1.6xx branch","Url":"https://github.com/dotnet/cli/pull/10461","RelatedDescription":"Open PR \"Insert NuGet Build 5.0.0-preview1.5707 into cli\" (#10461)"},{"Id":"389447196","IsPullRequest":false,"CreatedAt":"2018-12-10T19:17:18","Actor":"seancpeters","Number":"10459","RawContent":null,"Title":"dotnet tool aspnet-codegenerator looks for executable at wrong path","State":"open","Body":"_From @tbureck on December 8, 2018 23:16_\n\nI'm currently following [this guide](https://docs.microsoft.com/en-us/aspnet/core/security/authentication/scaffold-identity?view=aspnetcore-2.1&tabs=netcore-cli#scaffold-identity-into-an-empty-project) in order to scaffold Identity in my existing ASP.NET Core project. When trying to run the scaffolder command with the help option, though, I'm getting this error message:\r\n\r\n```\r\n> dotnet aspnet-codegenerator --help\r\nThe application to execute does not exist: 'C:\\Users\\Tim\\.dotnet\\tools\\.store\\dotnet-aspnet-codegenerator\\2.2.0-rtm-35687\\dotnet-aspnet-codegener\r\nator\\2.2.0-rtm-35687\\tools\\netcoreapp2.1\\any\\dotnet-aspnet-codegenerator.dll'.\r\n```\r\n\r\nI've checked the .dotnet\\tools\\.store directory and the tool seems to be installed correctly. BUT, it is installed in a `2.2.0` directory instead of the `2.2.0-rtm-35687` directory, which dotnet tool is looking in.\r\n\r\nI've opened [a thread on Stackoverflow](https://stackoverflow.com/questions/53676499/dotnet-tool-aspnet-codegenerator-looks-for-executable-at-wrong-path) as well and someone else seems to have the same issue, which is why I'm creating this issue.\r\n\r\nWhy is it that `dotnet tool` is looking in the `2.2.0-rtm-35687` sub directory instead of the `2.2.0` where it is actually installed?\r\n\r\nEdit: my dotnet version is `2.2.100`\n\n_Copied from original issue: aspnet/Scaffolding#932_","Url":"https://github.com/dotnet/cli/issues/10459","RelatedDescription":"Open issue \"dotnet tool aspnet-codegenerator looks for executable at wrong path\" (#10459)"},{"Id":"389058322","IsPullRequest":false,"CreatedAt":"2018-12-10T17:28:27","Actor":"taori","Number":"10457","RawContent":null,"Title":"Feature request: dotnet new wpfcontrollib 3.0.0 Preview 1","State":"closed","Body":"I was able to create a control lib using dotnet new classlib, however this project lacks some attributes for wpf to bind to it properly. + at this stage it seems the targetframework has to be locked to .net461+ in order to reference PresentationCore and other relevant assemblies.\r\n\r\nIdeally that option should exist before netcore 3 is RTM","Url":"https://github.com/dotnet/cli/issues/10457","RelatedDescription":"Closed issue \"Feature request: dotnet new wpfcontrollib 3.0.0 Preview 1\" (#10457)"},{"Id":"388920339","IsPullRequest":true,"CreatedAt":"2018-12-09T18:56:21","Actor":"dotnet-maestro[bot]","Number":"10453","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18607.6\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18608.1\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/10453","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#10453)"},{"Id":"389041633","IsPullRequest":false,"CreatedAt":"2018-12-09T18:47:38","Actor":"rrnewton","Number":"10456","RawContent":null,"Title":"Add Warning? dotnet publish --output of multiple projects corrupts dependencies (DLL hell)","State":"closed","Body":"## Steps to reproduce\r\n\r\nBuild two projects with the same output:\r\n\r\n```\r\ndotnet publish --output <absolutepath> A.csproj\r\ndotnet publish --output <absolutepath> B.csproj\r\n```\r\n\r\n## Expected  behavior\r\n\r\nErrors when the A and B projects attempt to copy conflicting versions of some dependency (`Foo.dll`).\r\n\r\nOR \r\n\r\nTells us that we're being very naughty and not to ever publish two projects to the same directory.\r\n\r\n## Actual behavior\r\n\r\nB's version of `Foo.dll` clobbers the second.  Executables installed by A can run with undefined behavior because they pick up the wrong version of this library (reviving DLL hell).\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\nWe're releasing a project that is testing on Mac, Windows, Linux and inside Docker containers.  This is consistent across all the versions of the .NET core SDK we're using (oldest 2.1.202 under Docker, newest is 2.1.500 on Azure DevOps Pipelines hosts).  Here's one example from an ADO run:\r\n\r\n```\r\n .NET Core SDK (reflecting any global.json):\r\nVersion:   2.1.500\r\nCommit:    b68b931422\r\nRuntime Environment:\r\nOS Name:     ubuntu\r\nOS Version:  16.04\r\nOS Platform: Linux\r\nRID:         ubuntu.16.04-x64\r\nBase Path:   /usr/share/dotnet/sdk/2.1.500/\r\n\r\nHost (useful for support):\r\nVersion: 2.1.6\r\nCommit:  3f4f8eebd8\r\n```\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/10456","RelatedDescription":"Closed issue \"Add Warning? dotnet publish --output of multiple projects corrupts dependencies (DLL hell)\" (#10456)"},{"Id":"389037832","IsPullRequest":false,"CreatedAt":"2018-12-09T18:38:21","Actor":"balbarak","Number":"10455","RawContent":null,"Title":"Add command line to upgrade dotnet runtime and SDK","State":"closed","Body":"### Ex:\r\n\r\ndotnet upgrade {version-no}\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/10455","RelatedDescription":"Closed issue \"Add command line to upgrade dotnet runtime and SDK\" (#10455)"},{"Id":"388823399","IsPullRequest":false,"CreatedAt":"2018-12-08T17:16:05","Actor":"dsplaisted","Number":"10450","RawContent":null,"Title":"Error when trying to`dotnet run` and using the latest build of .NET Core 3.0 preview","State":"closed","Body":"@pgolebiowski commented on [Mon Nov 26 2018](https://github.com/dotnet/core/issues/2075)\n\n## Steps to reproduce\r\n\r\n1. Go to the page with [daily builds of .NET Core 3.0](https://github.com/dotnet/core-sdk/blob/master/README.md#installers-and-binaries).\r\n2. Download the macOS installer for *Master (3.0.x Runtime)*.\r\n3. Install.\r\n4. Check `dotnet` version and info:\r\n\r\n```bash\r\n↪ dotnet --info\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview-009784\r\n Commit:    d86a1816c4\r\n\r\nRuntime Environment:\r\n OS Name:     Mac OS X\r\n OS Version:  10.13\r\n OS Platform: Darwin\r\n RID:         osx.10.13-x64\r\n Base Path:   /usr/local/share/dotnet/sdk/3.0.100-preview-009784/\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview-27122-01\r\n  Commit:  00c5c8bc40\r\n\r\n.NET Core SDKs installed:\r\n  2.1.401 [/usr/local/share/dotnet/sdk]\r\n  2.1.402 [/usr/local/share/dotnet/sdk]\r\n  3.0.100-preview-009784 [/usr/local/share/dotnet/sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.3 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.4 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.3 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.4 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview-18572-0018 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.3 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.4 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview-27122-01 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n```\r\n\r\n5. Create a new console application:\r\n\r\n```bash\r\ndotnet new console -o Test\r\n```\r\n\r\nwhich by default contains:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <OutputType>Exe</OutputType>\r\n    <TargetFramework>netcoreapp3.0</TargetFramework>\r\n  </PropertyGroup>\r\n\r\n</Project>\r\n```\r\n\r\n6. Hit `dotnet run`.\r\n\r\n## Error\r\n\r\n```\r\n↪ dotnet run\r\n/usr/local/share/dotnet/sdk/2.1.402/Sdks/Microsoft.NET.Sdk/targets/Microsoft.NET.TargetFrameworkInference.targets(137,5): error NETSDK1045: The current .NET SDK does not support targeting .NET Core 3.0.  Either target .NET Core 2.1 or lower, or use a version of the .NET SDK that supports .NET Core 3.0. [/Users/pgolebio/patryk/home/apps/hyperflow/src/Test/Test.csproj]\r\n\r\nThe build failed. Please fix the build errors and run again.\r\n```\r\n\r\n## Question\r\n\r\nHow to successfully run this console application? Why does it use 2.1.402 even though when asked for `dotnet --version`, it says `3.0.100-preview-009784`?\n\n---\n\n@karelz commented on [Tue Nov 27 2018](https://github.com/dotnet/core/issues/2075#issuecomment-442176157)\n\n@nguerrera @dsplaisted can you please help route this issue?\n\n---\n\n@pgolebiowski commented on [Fri Dec 07 2018](https://github.com/dotnet/core/issues/2075#issuecomment-445191533)\n\nHey guys, do you have an idea for how to proceed? @karelz @nguerrera @dsplaisted \n\n","Url":"https://github.com/dotnet/cli/issues/10450","RelatedDescription":"Closed issue \"Error when trying to`dotnet run` and using the latest build of .NET Core 3.0 preview\" (#10450)"},{"Id":"388884055","IsPullRequest":false,"CreatedAt":"2018-12-08T04:26:44","Actor":"igormcoelho","Number":"10452","RawContent":null,"Title":"error MSB4018: System.InvalidOperationException: PE image does not have metadata.","State":"open","Body":"## Steps to reproduce\r\nFailure is happening when I try to `dotnet restore` a `.csproj` with the following packages (inside a docker container):\r\n```xml\r\n  <ItemGroup>\r\n    <PackageReference Include=\"FluentAssertions\" Version=\"4.19.4\" />\r\n    <PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"15.3.0\" />\r\n    <PackageReference Include=\"MSTest.TestAdapter\" Version=\"1.2.0\" />\r\n    <PackageReference Include=\"MSTest.TestFramework\" Version=\"1.2.0\" />\r\n    <PackageReference Include=\"Moq\" Version=\"4.7.63\" />\r\n    <PackageReference Include=\"Akka.MultiNodeTestRunner\" Version=\"1.3.10\" />\r\n    <PackageReference Include=\"Akka.TestKit\" Version=\"1.3.10\" />\r\n    <PackageReference Include=\"Akka.TestKit.Xunit2\" Version=\"1.3.10\" />\r\n  </ItemGroup>\r\n```\r\nIf I remove package `<PackageReference Include=\"Akka.MultiNodeTestRunner\" Version=\"1.3.10\" />` the process goes correctly, so it must be something related to it.\r\n\r\n## Expected  behavior\r\n\r\nSome packages download normally, and it finishes with this error:\r\n`error MSB4018: System.InvalidOperationException: PE image does not have metadata.` (followed by many other errors.\r\nAnother error happens just before this one: `/usr/share/dotnet/sdk/2.1.200/Microsoft.Common.CurrentVersion.targets(2106,5): error MSB4018: The \"ResolveAssemblyReference\" task failed unexpectedly.`\r\n\r\n## Actual behavior\r\n\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n\r\n.NET Command Line Tools (2.1.200)\r\n\r\nProduct Information:\r\n Version:            2.1.200\r\n Commit SHA-1 hash:  2edba8d7f1\r\n\r\nRuntime Environment:\r\n OS Name:     ubuntu\r\n OS Version:  18.04\r\n OS Platform: Linux\r\n RID:         ubuntu.18.04-x64\r\n Base Path:   /usr/share/dotnet/sdk/2.1.200/\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.7\r\n  Build    : 2d61d0b043915bc948ebf98836fefe9ba942be11\r\n\r\n\r\n\r\n(I tried with dotnet core 2.2, but the same happens)\r\n","Url":"https://github.com/dotnet/cli/issues/10452","RelatedDescription":"Open issue \"error MSB4018: System.InvalidOperationException: PE image does not have metadata.\" (#10452)"},{"Id":"388865869","IsPullRequest":false,"CreatedAt":"2018-12-08T00:55:20","Actor":"KirillOsenkov","Number":"10451","RawContent":null,"Title":"Try to avoid first-chance COMException in VSSettings.cs when running outside MSBuild folder","State":"open","Body":"When running outside MSBuild folder there's a first-chance COMException in VSSettings.cs: Element not found (HRESULT 0x80070490).\r\n\r\nIt was introduced here:\r\nhttps://github.com/dotnet/cli/pull/9547\r\n\r\nwith the comment:\r\n```\r\nNeed try/catch around the interop here. Getting COMException when running an msbuild.exe outside of VS folder.\r\n```\r\n\r\nThis is certainly very low pri, but I'd still be curious if there's any way to work around this. Is this because Windows is looking to find the native .dll in the current directory or PATH, and doesn't find it? Wasn't there a trick to add the directory with the .dll to the PATH environment variable to solve this kind of issues?\r\n\r\nWould be nice to fix, but not very blocking or urgent.\r\n\r\nThanks.\r\n\r\nStack:\r\n```\r\n \tMicrosoft.DotNet.MSBuildSdkResolver.dll!Microsoft.DotNet.MSBuildSdkResolver.VSSettings.VSSettings Line 41\tC#\r\n>\tMicrosoft.DotNet.MSBuildSdkResolver.dll!Microsoft.DotNet.MSBuildSdkResolver.VSSettings.VSSettings Line 25\tC#\r\n \t[Native to Managed Transition]\t\r\n \t[Managed to Native Transition]\t\r\n \tMicrosoft.DotNet.MSBuildSdkResolver.dll!Microsoft.DotNet.MSBuildSdkResolver.DotNetMSBuildSdkResolver.DotNetMSBuildSdkResolver Line 38\tC#\r\n \t[Native to Managed Transition]\t\r\n \t[Managed to Native Transition]\t\r\n \tmscorlib.dll!System.RuntimeType.CreateInstanceSlow Line 5430\tC#\r\n \tmscorlib.dll!System.Activator.CreateInstance Line 193\tC#\r\n \tmscorlib.dll!System.Activator.CreateInstance Line 134\tC#\r\n \tMicrosoft.Build.dll!Microsoft.Build.BackEnd.SdkResolution.SdkResolverLoader.LoadResolvers Line 164\tC#\r\n```","Url":"https://github.com/dotnet/cli/issues/10451","RelatedDescription":"Open issue \"Try to avoid first-chance COMException in VSSettings.cs when running outside MSBuild folder\" (#10451)"},{"Id":"388801696","IsPullRequest":true,"CreatedAt":"2018-12-07T21:25:41","Actor":"nguerrera","Number":"10449","RawContent":null,"Title":"Update roslyn","State":"closed","Body":"Matching dotnet/toolset#53 for 2.1.6xx\r\n","Url":"https://github.com/dotnet/cli/pull/10449","RelatedDescription":"Closed or merged PR \"Update roslyn\" (#10449)"},{"Id":"388646327","IsPullRequest":true,"CreatedAt":"2018-12-07T18:14:36","Actor":"dotnet-maestro[bot]","Number":"10447","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18606.9\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/10447","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#10447)"},{"Id":"388716372","IsPullRequest":false,"CreatedAt":"2018-12-07T17:30:45","Actor":"DoCode","Number":"10448","RawContent":null,"Title":"dotnet restore failed on private (authenticated) feeds on .NET SDK > v2.2.100","State":"closed","Body":"## Steps to reproduce\r\n`dotnet restore project.proj`\r\n\r\n## Expected  behavior\r\nNuGet restore is successful.\r\n\r\n## Actual behavior\r\n```\r\nRetrying 'FindPackagesByIdAsyncCore' for source 'https://xxx.xxx.xxx/f/core-dev/api/v2/FindPackagesById()?id='xxx'&semVerLevel=2.0.0'.\r\nResponse status code does not indicate success: 401 (Unauthorized).\r\n```\r\n\r\nIt works with all version before 2.2.100!  \r\nAll other versions, also 3.x failed.","Url":"https://github.com/dotnet/cli/issues/10448","RelatedDescription":"Closed issue \"dotnet restore failed on private (authenticated) feeds on .NET SDK > v2.2.100\" (#10448)"},{"Id":"388418998","IsPullRequest":false,"CreatedAt":"2018-12-06T22:07:58","Actor":"wli3","Number":"10446","RawContent":null,"Title":"`dotnet new tool-manifest` will put dotnet-tools.json under .config folder","State":"open","Body":"Open this issue for feedback. We hope to use the convention of `.config` folder to avoid the clutter of config file under the repo root. Start from local tools manifest","Url":"https://github.com/dotnet/cli/issues/10446","RelatedDescription":"Open issue \"`dotnet new tool-manifest` will put dotnet-tools.json under .config folder\" (#10446)"}],"ResultType":"GitHubIssue"},"Standard-Issues":{"Issues":[{"Id":"391131649","IsPullRequest":false,"CreatedAt":"2018-12-14T14:26:01","Actor":"HelgeKeck","Number":"1022","RawContent":null,"Title":"Wrong NetworkInterfaceType on OS X Mojave with .Net Standard 2.0 for WiFi Adapter","State":"open","Body":"On OS X Mojave with .Net Standard 2.0\r\n\r\nfor the WiFi Adapter, System.Net.NetworkInformation.NetworkInterface.NetworkInterfaceType()\r\n\r\nreturns\r\nNetworkInterfaceType.Ethernet\r\ninstead of\r\nNetworkInterfaceType.Wireless80211","Url":"https://github.com/dotnet/standard/issues/1022","RelatedDescription":"Open issue \"Wrong NetworkInterfaceType on OS X Mojave with .Net Standard 2.0 for WiFi Adapter\" (#1022)"},{"Id":"391102384","IsPullRequest":true,"CreatedAt":"2018-12-14T13:21:43","Actor":"dotnet-maestro[bot]","Number":"1021","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.ApiCompat - 1.0.0-beta.18613.20\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18613.20\r\n- Microsoft.DotNet.Build.Tasks.Packaging - 1.0.0-beta.18613.20\r\n- Microsoft.DotNet.GenAPI - 1.0.0-beta.18613.20\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1021","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#1021)"},{"Id":"390839367","IsPullRequest":true,"CreatedAt":"2018-12-13T20:07:29","Actor":"terrajobst","Number":"1020","RawContent":null,"Title":"Reduce noise in reference assemblies","State":"open","Body":"This doesn't change any APIs. It's just reducing noise from in the textual diff of the reference assemblies.\r\n\r\n* Fix trailing whitespace (69cb85e)\r\n* Mark types as partial (c9725f7)\r\n* Replace handwritten base calls with generated ones (78649f6)\r\n","Url":"https://github.com/dotnet/standard/pull/1020","RelatedDescription":"Open PR \"Reduce noise in reference assemblies\" (#1020)"},{"Id":"390833738","IsPullRequest":true,"CreatedAt":"2018-12-13T19:52:44","Actor":"terrajobst","Number":"1019","RawContent":null,"Title":"Require support for default implementations of interfaces","State":"open","Body":"This marker will require all implementations of .NET Standard 2.1 to support default implementations of interfaces. Needless to say that this has runtime impact. The benefit of doing this in the standard is that it allows library authors to use this feature for their interfaces. The downside is that that this is potentially a lot of runtime work. I'm curious to how the board feels about absorbing that change for .NET Standard 2.1, especially @dotnet/nsboard-xamarin and @dotnet/nsboard-unity.","Url":"https://github.com/dotnet/standard/pull/1019","RelatedDescription":"Open PR \"Require support for default implementations of interfaces\" (#1019)"},{"Id":"390830254","IsPullRequest":true,"CreatedAt":"2018-12-13T19:42:55","Actor":"terrajobst","Number":"1018","RawContent":null,"Title":"WIP: Add support for Index and Range","State":"open","Body":"This adds the basic APIs for `Index` and `Range`. However, it misses most of the [companion APIs](https://github.com/dotnet/designs/blob/master/accepted/system-range/system-range.md#companion-apis) because they don't even exist in CoreFx yet. The work is tracked in https://github.com/dotnet/corefx/issues/34076. Once done, I'll update the PR to reflect the final API shape.\r\n\r\nFor now, this PR is just a tracking item to remind us to get it done for 2.1.","Url":"https://github.com/dotnet/standard/pull/1018","RelatedDescription":"Open PR \"WIP: Add support for Index and Range\" (#1018)"},{"Id":"390822437","IsPullRequest":true,"CreatedAt":"2018-12-13T19:20:57","Actor":"terrajobst","Number":"1017","RawContent":null,"Title":"WIP: Add IAsyncEnumerable<T>","State":"open","Body":"This API is depending on the CoreFX work: dotnet/corefx#33909. Once we closed on the design I'll update this PR.\r\n\r\n***Before merging, change base to master**. Can only happen after #1014 is merged*.","Url":"https://github.com/dotnet/standard/pull/1017","RelatedDescription":"Open PR \"WIP: Add IAsyncEnumerable<T>\" (#1017)"},{"Id":"390444044","IsPullRequest":true,"CreatedAt":"2018-12-13T18:57:05","Actor":"wtgodbe","Number":"1015","RawContent":null,"Title":"Enable publishing to build-assets registry","State":"closed","Body":"Now that Standard is placing build output in `artifacts`, we can opt-in to publishing build assets to the BAR.\r\n\r\n@chcosta @mmitche PTAL","Url":"https://github.com/dotnet/standard/pull/1015","RelatedDescription":"Closed or merged PR \"Enable publishing to build-assets registry\" (#1015)"},{"Id":"390668875","IsPullRequest":true,"CreatedAt":"2018-12-13T13:31:43","Actor":"dotnet-maestro[bot]","Number":"1016","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.ApiCompat - 1.0.0-beta.18612.12\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18612.12\r\n- Microsoft.DotNet.Build.Tasks.Packaging - 1.0.0-beta.18612.12\r\n- Microsoft.DotNet.GenAPI - 1.0.0-beta.18612.12\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1016","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#1016)"},{"Id":"390354570","IsPullRequest":true,"CreatedAt":"2018-12-12T23:16:02","Actor":"terrajobst","Number":"1012","RawContent":null,"Title":"Add private fields for structs","State":"closed","Body":"No public API changes, but this fixes #678. \r\n\r\nIn a nutshell, the compiler needs to know whether a struct has any fields in order to apply definitive assignment rules. While stripping all private fields from types is generally OK, we can't do this for structs. Fortunately, for private fields the compiler doesn't really care what they are, but what their characteristics are. For example:\r\n\r\n1. Does the struct have any fields?\r\n\r\n2. Does the struct contain any reference types (to validate generic instantiations that have the unmanaged constraint)?\r\n\r\n3. Does the struct use the generic parameter in a field declaration (to validate cyclic layout problems)?\r\n\r\nThis adds dummy fields to structs to conform to these rules. These aren't computed separately but are instead taken from .NET Core.\r\n\r\nFor more details, see this issue in CoreFX:\r\n\r\nhttps://github.com/dotnet/corefx/issues/6185","Url":"https://github.com/dotnet/standard/pull/1012","RelatedDescription":"Closed or merged PR \"Add private fields for structs\" (#1012)"},{"Id":"390383237","IsPullRequest":true,"CreatedAt":"2018-12-12T19:52:20","Actor":"terrajobst","Number":"1014","RawContent":null,"Title":"Add IAsyncDisposable","State":"open","Body":"This adds API support for the new C# 8 feature to call dispose asynchronously:\r\n\r\n```C#\r\nawait using(var stream = File.OpenWrite(path))\r\n{\r\n    await data.WriteAsync(stream);\r\n}\r\n```\r\n\r\nFor more details, see:\r\n\r\nhttps://github.com/dotnet/csharplang/blob/master/proposals/async-streams.md","Url":"https://github.com/dotnet/standard/pull/1014","RelatedDescription":"Open PR \"Add IAsyncDisposable\" (#1014)"},{"Id":"390377097","IsPullRequest":true,"CreatedAt":"2018-12-12T19:35:16","Actor":"terrajobst","Number":"1013","RawContent":null,"Title":"Add missing readonly modifiers","State":"open","Body":"This fixes #842.","Url":"https://github.com/dotnet/standard/pull/1013","RelatedDescription":"Open PR \"Add missing readonly modifiers\" (#1013)"},{"Id":"390224712","IsPullRequest":false,"CreatedAt":"2018-12-12T19:00:27","Actor":"YairHalberstadt","Number":"1011","RawContent":null,"Title":"Add HashSet.TryGetValue to .Net Standard","State":"closed","Body":"This method is already implemented by .Net Core 2.0 and .Net Framework 4.7.2, so I imagine this would be relatively easy to include in .Net Standard 2.1.","Url":"https://github.com/dotnet/standard/issues/1011","RelatedDescription":"Closed issue \"Add HashSet.TryGetValue to .Net Standard\" (#1011)"},{"Id":"388028724","IsPullRequest":true,"CreatedAt":"2018-12-12T18:55:14","Actor":"terrajobst","Number":"999","RawContent":null,"Title":"Sync .NET Standard's RefEmit with .NET Framework","State":"closed","Body":"Fixes #987\r\n\r\nThe point of the sync is to get increase parity with .NET Framework and thus making it easier to port more existing code to .NET Standard 2.1 (or any platform implementing it).","Url":"https://github.com/dotnet/standard/pull/999","RelatedDescription":"Closed or merged PR \"Sync .NET Standard's RefEmit with .NET Framework\" (#999)"},{"Id":"390052989","IsPullRequest":true,"CreatedAt":"2018-12-12T16:50:02","Actor":"terrajobst","Number":"1009","RawContent":null,"Title":"Clean-up reference assembly","State":"closed","Body":"This aligns the physical representation of the reference assembly with how it look like in .NET Core. No changes to the API surface; it's just to remove noise in future diffs.","Url":"https://github.com/dotnet/standard/pull/1009","RelatedDescription":"Closed or merged PR \"Clean-up reference assembly\" (#1009)"},{"Id":"390215935","IsPullRequest":true,"CreatedAt":"2018-12-12T13:46:59","Actor":"dotnet-maestro[bot]","Number":"1010","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.ApiCompat - 1.0.0-beta.18611.14\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18611.14\r\n- Microsoft.DotNet.Build.Tasks.Packaging - 1.0.0-beta.18611.14\r\n- Microsoft.DotNet.GenAPI - 1.0.0-beta.18611.14\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1010","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#1010)"},{"Id":"389518834","IsPullRequest":true,"CreatedAt":"2018-12-12T03:42:31","Actor":"terrajobst","Number":"1007","RawContent":null,"Title":"Update FWLinks to use https instead of http","State":"closed","Body":"This change only affects the string for `[Obsolete]` message.\r\n\r\nJustification: It's generally bad to use `http` these day. Plus, it causes noise in the diffs.","Url":"https://github.com/dotnet/standard/pull/1007","RelatedDescription":"Closed or merged PR \"Update FWLinks to use https instead of http\" (#1007)"},{"Id":"389753658","IsPullRequest":true,"CreatedAt":"2018-12-11T13:11:39","Actor":"dotnet-maestro[bot]","Number":"1008","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.ApiCompat - 1.0.0-beta.18610.4\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18610.4\r\n- Microsoft.DotNet.Build.Tasks.Packaging - 1.0.0-beta.18610.4\r\n- Microsoft.DotNet.GenAPI - 1.0.0-beta.18610.4\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1008","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#1008)"},{"Id":"389020595","IsPullRequest":true,"CreatedAt":"2018-12-09T13:10:59","Actor":"dotnet-maestro[bot]","Number":"1006","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.ApiCompat - 1.0.0-beta.18608.1\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18608.1\r\n- Microsoft.DotNet.Build.Tasks.Packaging - 1.0.0-beta.18608.1\r\n- Microsoft.DotNet.GenAPI - 1.0.0-beta.18608.1\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1006","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#1006)"},{"Id":"388920215","IsPullRequest":true,"CreatedAt":"2018-12-08T13:10:58","Actor":"dotnet-maestro[bot]","Number":"1005","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.ApiCompat - 1.0.0-beta.18607.6\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18607.6\r\n- Microsoft.DotNet.Build.Tasks.Packaging - 1.0.0-beta.18607.6\r\n- Microsoft.DotNet.GenAPI - 1.0.0-beta.18607.6\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1005","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#1005)"},{"Id":"388645771","IsPullRequest":true,"CreatedAt":"2018-12-07T13:16:15","Actor":"dotnet-maestro[bot]","Number":"1004","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.ApiCompat - 1.0.0-beta.18606.9\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18606.9\r\n- Microsoft.DotNet.Build.Tasks.Packaging - 1.0.0-beta.18606.9\r\n- Microsoft.DotNet.GenAPI - 1.0.0-beta.18606.9\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1004","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#1004)"},{"Id":"388551526","IsPullRequest":false,"CreatedAt":"2018-12-07T08:26:51","Actor":"he-dev","Number":"1003","RawContent":null,"Title":"Documentation still not up-to-date","State":"open","Body":"I'd be great if you could keep the documentation up-to-date. Currently the only place where you can find anything about these two _super-secret_ elements:\r\n\r\n- `AppendTargetFrameworkToOutputPath`\r\n- `AppendRuntimeIdentifierToOutputPath `\r\n\r\nis this [comment](https://github.com/dotnet/standard/issues/512#issuecomment-332291043). Are there any more _hidden_ settings? \r\n\r\nDo you think you could improve this and maybe also add other _unofficial_ yet fully supported settings (if there are any)?","Url":"https://github.com/dotnet/standard/issues/1003","RelatedDescription":"Open issue \"Documentation still not up-to-date\" (#1003)"},{"Id":"388402668","IsPullRequest":true,"CreatedAt":"2018-12-06T22:17:23","Actor":"wtgodbe","Number":"1002","RawContent":null,"Title":"Move build output from `bin` to `artifacts`","State":"closed","Body":"This allows Arcade to take over in deciding where we output our build artifacts, so we no longer have everything going into the `bin` dir. I don't believe there's anywhere else that explicitly depends on Standard's `bin` dir, but please let me know if you think I'm missing anything.\r\n\r\n@ericstj @ViktorHofer @weshaggard PTAL\r\n\r\n@danmosemsft CC","Url":"https://github.com/dotnet/standard/pull/1002","RelatedDescription":"Closed or merged PR \"Move build output from `bin` to `artifacts`\" (#1002)"},{"Id":"388373169","IsPullRequest":true,"CreatedAt":"2018-12-06T20:04:55","Actor":"ericstj","Number":"1001","RawContent":null,"Title":"Remove Trimming package from dotnet/standard","State":"closed","Body":"Fixes: https://github.com/dotnet/standard/issues/788\r\n\r\nThose looking for an officially supported trimming tool should try:\r\nhttps://github.com/dotnet/core/blob/master/samples/linker-instructions.md\r\n\r\nThe assembly level linker has moved to:\r\nhttps://github.com/ericstj/Microsoft.Packaging.Tools.Trimming","Url":"https://github.com/dotnet/standard/pull/1001","RelatedDescription":"Closed or merged PR \"Remove Trimming package from dotnet/standard\" (#1001)"},{"Id":"388204009","IsPullRequest":true,"CreatedAt":"2018-12-06T13:11:37","Actor":"dotnet-maestro[bot]","Number":"1000","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.ApiCompat - 1.0.0-beta.18605.14\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18605.14\r\n- Microsoft.DotNet.Build.Tasks.Packaging - 1.0.0-beta.18605.14\r\n- Microsoft.DotNet.GenAPI - 1.0.0-beta.18605.14\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1000","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#1000)"},{"Id":"387555933","IsPullRequest":true,"CreatedAt":"2018-12-06T02:14:39","Actor":"terrajobst","Number":"996","RawContent":null,"Title":"List excluded reflection emit APIs","State":"closed","Body":"I did a diff between `System.Reflection.Emit` in .NET Framework and .NET Standard to make sure the APIs we explicitly didn't bring to .NET Standard are listed here. This adds no APIs to .NET Standard, just comments to the source code of the reference assembly.\r\n\r\nI assume the @dotnet/nsboard has no problems with that as it's just book keeping for folks like me. Unless there is push back, I'm going to merge this tomorrow.\r\n\r\n**Update:** I forgot to mention that I plan to add another PR with the APIs we plan to add .NET Standard.","Url":"https://github.com/dotnet/standard/pull/996","RelatedDescription":"Closed or merged PR \"List excluded reflection emit APIs\" (#996)"},{"Id":"387902379","IsPullRequest":true,"CreatedAt":"2018-12-05T20:00:00","Actor":"wtgodbe","Number":"998","RawContent":null,"Title":"Change yml name to azure-pipelines.yml","State":"closed","Body":"In response to https://github.com/dotnet/arcade/issues/690#issuecomment-444562580\r\n\r\nChanges name of our pipeline file to the standard `azure-pipelines.yml`. I'll also update the build defs to reflect this change.\r\n\r\nCC @chcosta ","Url":"https://github.com/dotnet/standard/pull/998","RelatedDescription":"Closed or merged PR \"Change yml name to azure-pipelines.yml\" (#998)"},{"Id":"387746721","IsPullRequest":true,"CreatedAt":"2018-12-05T18:59:29","Actor":"dotnet-maestro[bot]","Number":"997","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.ApiCompat - 1.0.0-beta.18604.15\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18604.15\r\n- Microsoft.DotNet.Build.Tasks.Packaging - 1.0.0-beta.18604.15\r\n- Microsoft.DotNet.GenAPI - 1.0.0-beta.18604.15\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/997","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#997)"},{"Id":"387484691","IsPullRequest":true,"CreatedAt":"2018-12-04T23:49:23","Actor":"wtgodbe","Number":"995","RawContent":null,"Title":"Output packages into Artifacts dir","State":"closed","Body":"This outputs packages into `ArtifactsPackagesDir`, so that Arcade can easily find them for signing & publishing (with this, we no longer need a custom `Signing.props` to specify where our packages live).\r\n\r\n@chcosta @ericstj PTAL\r\n\r\nShould fix the build error in https://dnceng.visualstudio.com/internal/_build/results?buildId=52052","Url":"https://github.com/dotnet/standard/pull/995","RelatedDescription":"Closed or merged PR \"Output packages into Artifacts dir\" (#995)"},{"Id":"387041262","IsPullRequest":true,"CreatedAt":"2018-12-04T18:10:15","Actor":"wtgodbe","Number":"993","RawContent":null,"Title":"Don't reference FeedTasksPackage","State":"closed","Body":"Arcade already restores this package when trying to publish: https://github.com/dotnet/arcade/blob/master/src/Microsoft.DotNet.Arcade.Sdk/tools/Tools.proj#L49\r\n\r\nSince the default version in arcade is currently `2.2-xxx` (https://github.com/dotnet/arcade/blob/069237d9a7e83bed62c9f664228125b95ddf91f6/src/Microsoft.DotNet.Arcade.Sdk/tools/DefaultVersions.props#L71), the build would fail when trying to import files from that package, since only the 3.0.0 version was getting restored: https://github.com/dotnet/arcade/blob/master/src/Microsoft.DotNet.Arcade.Sdk/tools/Publish.proj#L30\r\n\r\nCC @safern you'll want to make a similar change in CoreFx if you plan on doing Arcade publishing\r\n\r\n@chcosta PTAL","Url":"https://github.com/dotnet/standard/pull/993","RelatedDescription":"Closed or merged PR \"Don't reference FeedTasksPackage\" (#993)"},{"Id":"387274996","IsPullRequest":true,"CreatedAt":"2018-12-04T13:16:29","Actor":"dotnet-maestro[bot]","Number":"994","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.ApiCompat - 1.0.0-beta.18603.7\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18603.7\r\n- Microsoft.DotNet.Build.Tasks.Packaging - 1.0.0-beta.18603.7\r\n- Microsoft.DotNet.GenAPI - 1.0.0-beta.18603.7\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/994","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#994)"}],"ResultType":"GitHubIssue"},"CoreFx-Issues":{"Issues":[{"Id":"391346114","IsPullRequest":false,"CreatedAt":"2018-12-15T05:30:06","Actor":"luohuazhiyu","Number":"34108","RawContent":null,"Title":"System.Threading.Channels-The result of the operation was already consumed and may not be used again","State":"closed","Body":"runtime:.net core 2.2\r\n code: \r\nvar count = 100;\r\n var channel = Channel.CreateUnbounded<int>(new UnboundedChannelOptions { SingleReader = true, SingleWriter = false });\r\n var consumerTask=  Task.Run(async () =>\r\n              {\r\n                  long sum = 0;\r\n                  var dataCount = 0;\r\n                        while (true)\r\n                        {\r\n                            var waitTask = channel.Reader.ReadAsync();\r\n                            if (!waitTask.IsCompleted)\r\n                                await waitTask;\r\n                            sum += waitTask.Result;\r\n                          dataCount++;\r\n                          if (dataCount == count * 5)\r\n                              break;\r\n                      }\r\n                   Console.WriteLine(sum);\r\n                });\r\n              var producterTask=  Task.WhenAll(Task.Run(async () =>\r\n               {\r\n                   for (int i = 0; i < count; i++)\r\n                   {\r\n                       var task = channel.Writer.WriteAsync(i);\r\n                       if (!task.IsCompleted)\r\n                           await task;\r\n                   }\r\n               }), Task.Run(async () =>\r\n               {\r\n                   for (int i = 0; i < count; i++)\r\n                   {\r\n                       var task = channel.Writer.WriteAsync(i);\r\n                       if (!task.IsCompleted)\r\n                           await task;\r\n                   }\r\n               }), Task.Run(async () =>\r\n               {\r\n                   for (int i = 0; i < count; i++)\r\n                   {\r\n                       var task = channel.Writer.WriteAsync(i);\r\n                       if (!task.IsCompleted)\r\n                           await task;\r\n                   }\r\n               }), Task.Run(async () =>\r\n               {\r\n                   for (int i = 0; i < count; i++)\r\n                   {\r\n                       var task = channel.Writer.WriteAsync(i);\r\n                       if (!task.IsCompleted)\r\n                           await task;\r\n                   }\r\n               }), Task.Run(async () =>\r\n               {\r\n                   for (int i = 0; i < count; i++)\r\n                   {\r\n                       var task = channel.Writer.WriteAsync(i);\r\n                       if (!task.IsCompleted)\r\n                           await task;\r\n                   }\r\n               }));\r\n                Task.WhenAll(consumerTask, producterTask).Wait();","Url":"https://github.com/dotnet/corefx/issues/34108","RelatedDescription":"Closed issue \"System.Threading.Channels-The result of the operation was already consumed and may not be used again\" (#34108)"},{"Id":"391345132","IsPullRequest":true,"CreatedAt":"2018-12-15T05:05:05","Actor":"ahsonkhan","Number":"34107","RawContent":null,"Title":"Add span-based TextEncoder APIs and remove use of unsafe code in implementations by using Span.","State":"open","Body":"- Added span-based APIs to `TextEncoder` (this has not gone through API review yet which is why I have marked as no merge since it may not be the right approach).\r\n  - **Motivation:** If I am to use the default `JavaScriptEncoder` encode API to escape strings within the `Utf8JsonWriter`, I will need the `ReadOnlySpan<char>` equivalents as well (probably along with `ReadOnlySpan<byte>` for UTF-8 in the future **IF** we plan to add them here rather than try a different approach all together). What are the initial thoughts on adding public APIs to TextEncoder? Are we allowed to or is the type effectively frozen? That is the primary reason for this PR/change.\r\n  - If we are fine with adding such overloads, should we obsolete the unsafe ones (for netstandard1.1+)?\r\n- Replace use of unsafe and pointers with spans (for internal/private at least).\r\n- Fixed formatting and coding style since I was touching the code anyway.\r\n- I couldn't find a ref file here to update. Do we need one?\r\n\r\nThis change only works for netstandard (and won't work on netstandard1.0), so we will likely need to ifdef the code/API surface for that configuration if we were to accept this change.","Url":"https://github.com/dotnet/corefx/pull/34107","RelatedDescription":"Open PR \"Add span-based TextEncoder APIs and remove use of unsafe code in implementations by using Span.\" (#34107)"},{"Id":"391343336","IsPullRequest":false,"CreatedAt":"2018-12-15T04:29:32","Actor":"benaadams","Number":"34106","RawContent":null,"Title":"[CI Failure] TimeZoneInfo_DisplayNameStartsWithOffset","State":"open","Body":"TimeZoneInfo_DisplayNameStartsWithOffset\r\n\r\nWindows.7.Amd64.Open-x64-Debug\r\n\r\n```\r\nUnhandled Exception of Type Xunit.Sdk.TrueException\r\nMessage :\r\n01:00 != 00:00:00, dn:(UTC+01:00) Casablanca, sn:(UTC+01:00) Casablanca\r\nExpected: True\r\nActual:   False\r\nStack Trace :\r\n   at System.Tests.TimeZoneInfoTests.TimeZoneInfo_DisplayNameStartsWithOffset() in D:\\j\\workspace\\windows-TGrou---74aa877a\\src\\System.Runtime\\tests\\System\\TimeZoneInfoTests.cs:line 2227\r\n```\r\nhttps://mc.dot.net/#/user/benaadams/pr~2Fjenkins~2Fdotnet~2Fcorefx~2Fmaster~2F/test~2Ffunctional~2Fcli~2F/75205984fff23de8f87095739ebac2e3b791e01e/workItem/System.Runtime.Tests/analysis/xunit/System.Tests.TimeZoneInfoTests~2FTimeZoneInfo_DisplayNameStartsWithOffset","Url":"https://github.com/dotnet/corefx/issues/34106","RelatedDescription":"Open issue \"[CI Failure] TimeZoneInfo_DisplayNameStartsWithOffset\" (#34106)"},{"Id":"391335770","IsPullRequest":true,"CreatedAt":"2018-12-15T02:30:37","Actor":"dotnet-maestro-bot","Number":"34105","RawContent":null,"Title":"Update CoreClr, CoreSetup to preview-27215-01, preview-27214-02, respectively (master)","State":"open","Body":"/cc @dotnet/maestro-reviewers-core","Url":"https://github.com/dotnet/corefx/pull/34105","RelatedDescription":"Open PR \"Update CoreClr, CoreSetup to preview-27215-01, preview-27214-02, respectively (master)\" (#34105)"},{"Id":"391214299","IsPullRequest":false,"CreatedAt":"2018-12-14T23:36:32","Actor":"curtnichols","Number":"34098","RawContent":null,"Title":"DataflowBlock.LinkTo(source, target, predicate) clogs","State":"closed","Body":"## Problem statement\r\nI found that [DataflowBlock.LInkTo(source,target,predicate)](https://github.com/dotnet/corefx/blob/269670f3368c7282f8dc5f5530c8b972f4ef68a6/src/System.Threading.Tasks.Dataflow/src/Base/DataflowBlock.cs#L61) extension method fails to propagate any messages after the predicate returns false.\r\n\r\nThe documentation for the predicate argument indicates\r\n\r\n> The filter a message must pass in order for it to propagate from the source to the target.\r\n\r\nAm I misreading the docs? Refusing to accept any more messages is unexpected behavior.\r\n\r\n### Expected\r\nIf the predicate returns `true, false, true` on the first three messages, the first and third should be propagated to the target.\r\n\r\n### Actual\r\nIf the predicate returns `true, false` on the first two messages, the predicate is never called again. The source for the link--say, if it's a `BufferBlock`--accumulates messages that don't get propagated to the target.\r\n\r\n### Repro\r\nMy test code illustrating the behavior is in a gist [**here**](https://gist.github.com/curtnichols/c16ae6d14817b69ca326c412ffe46e26). I've repro'd this in a .NET Console App (.NET Core), VS 15.9.3, .NET Core 2.2.\r\n\r\n```\r\nC:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise>dotnet --list-sdks\r\n2.1.403 [C:\\Program Files (x86)\\dotnet\\sdk]\r\n2.2.100 [C:\\Program Files (x86)\\dotnet\\sdk]\r\n```\r\n","Url":"https://github.com/dotnet/corefx/issues/34098","RelatedDescription":"Closed issue \"DataflowBlock.LinkTo(source, target, predicate) clogs\" (#34098)"},{"Id":"391298281","IsPullRequest":true,"CreatedAt":"2018-12-14T22:18:02","Actor":"benaadams","Number":"34104","RawContent":null,"Title":"Fast-path inline Pipe TrySchedule","State":"open","Body":"Call count can be a multiple of x246 higher than doing further work:\r\n\r\n![image](https://user-images.githubusercontent.com/1142958/50032832-ec349080-ffed-11e8-85cb-91bb1a12a194.png)\r\n\r\n/cc @pakrym @davidfowl @ahsonkhan ","Url":"https://github.com/dotnet/corefx/pull/34104","RelatedDescription":"Open PR \"Fast-path inline Pipe TrySchedule\" (#34104)"},{"Id":"391231805","IsPullRequest":false,"CreatedAt":"2018-12-14T19:12:35","Actor":"robertborr","Number":"34103","RawContent":null,"Title":"Build failure: CoreFx 20181213.03","State":"open","Body":"@dotnet-mc-bot commented on [Thu Dec 13 2018](https://github.com/dotnet/core-eng/issues/4804)\n\nOpened on behalf of @v-asdhin\n\nWarnings: 1\nStatus Message: failed\n\nBuild : 3.0 - 20181213.03 (Product Build)\nFailing configurations:\n- Windows\n  - netcoreapp-x86\n[Mission Control Build Info](https://mc.dot.net/#/product/netcore/30/source/official~2Fcorefx~2Fmaster~2F/type/build~2Fproduct~2F/build/20181213.03/workItem/Orchestration/analysis/external/Link)\n\nLogs:\n------\nCreate Helix Test Jobs\n2018-12-13T08:18:41.1446512Z E:\\A\\_work\\303\\s\\corefx\\Tools\\CloudTest.Helix.targets(238,5): error :    at Microsoft.DotNet.Build.CloudTestTasks.AzureHelper.RequestWithRetry(TaskLoggingHelper loggingHelper, HttpClient client, Func`1 createRequest, Func`2 validationCallback, Int32 retryCount, Int32 retryDelaySeconds) [E:\\A\\_work\\303\\s\\corefx\\src\\upload-tests.proj]\n2018-12-13T08:18:56.0423537Z          Upload to Azure is complete, a total of 228 items were uploaded.\n2018-12-13T08:18:56.0433393Z          Begin uploading blobs to Azure account dotnetbuilddrops in container corefx-tests.\n2018-12-13T08:18:57.1097126Z          Uploading E:\\A\\_work\\303\\s\\corefx\\artifacts\\helix/runtime/test-runtime-netcoreapp-Windows_NT-Release-x86.zip to corefx-tests.\n2018-12-13T08:19:05.9216991Z          Upload to Azure is complete, a total of 1 items were uploaded.\n2018-12-13T08:19:05.9223415Z          Begin uploading blobs to Azure account dotnetbuilddrops in container corefx-tests.\n2018-12-13T08:19:10.1074044Z          Uploading E:\\A\\_work\\303\\s\\corefx\\artifacts\\helix/SupplementalPayload.zip to corefx-tests.\n2018-12-13T08:19:10.3743380Z          Upload to Azure is complete, a total of 1 items were uploaded.\n2018-12-13T08:19:10.4244308Z        CreateTestListJson:\n2018-12-13T08:19:10.4245192Z          Writing E:\\A\\_work\\303\\s\\corefx\\artifacts\\helix/TestList.json.\n2018-12-13T08:19:10.4250384Z          Begin uploading blobs to Azure account dotnetbuilddrops in container corefx-tests.\n2018-12-13T08:19:15.6456775Z          Uploading E:\\A\\_work\\303\\s\\corefx\\artifacts\\helix/TestList.json to corefx-tests.\n2018-12-13T08:19:16.0278866Z          Upload to Azure is complete, a total of 1 items were uploaded.\n2018-12-13T08:19:16.0346693Z        WriteCompletionEvent:\n2018-12-13T08:19:16.0347174Z          Writing E:\\A\\_work\\303\\s\\corefx\\artifacts\\helix/BuildComplete.json.\n2018-12-13T08:19:16.0347332Z          Wrote job-start (build complete) JSON for 4 Queues.\n2018-12-13T08:19:16.0355248Z          Begin uploading blobs to Azure account dotnetbuilddrops in container corefx-tests.\n2018-12-13T08:19:19.1820630Z          Uploading E:\\A\\_work\\303\\s\\corefx\\artifacts\\helix/BuildComplete.json to corefx-tests.\n2018-12-13T08:19:19.6816624Z          Upload to Azure is complete, a total of 1 items were uploaded.\n2018-12-13T08:19:19.6818573Z          Uploaded job-start JSON files to corefx-tests.   These can be used for resending the same job for debugging purposes.\n2018-12-13T08:19:19.7009127Z        SendCompletionEvent:\n2018-12-13T08:19:19.7009952Z          Posting job to https://helix.dot.net/api/2016-06-28/jobs\n2018-12-13T08:19:20.2620281Z          Started Helix job: CorrelationId = aa0df74a-3c3e-4131-8236-c9216b400d0c\n2018-12-13T08:19:20.5626594Z          Started Helix job: CorrelationId = 3795adbd-20d4-49da-96f7-1c4f07abfa96\n2018-12-13T08:19:20.8065886Z          Started Helix job: CorrelationId = 587a5c57-2b8f-484c-a6eb-1aba488b4d90\n2018-12-13T08:19:21.0241455Z          Started Helix job: CorrelationId = 248aad8d-18f4-482c-8e5b-1a840a51416d\n2018-12-13T08:19:21.0256046Z          Writing correlation info to: E:\\A\\_work\\303\\s\\corefx\\artifacts\\helix/Helix-correlation-infos.json \n2018-12-13T08:19:21.0390654Z          Writing E:\\A\\_work\\303\\s\\corefx\\artifacts\\helix/Helix-correlation-infos.json.\n2018-12-13T08:19:21.0395759Z          Begin uploading blobs to Azure account dotnetbuilddrops in container corefx-tests.\n2018-12-13T08:19:25.5241986Z          Uploading E:\\A\\_work\\303\\s\\corefx\\artifacts\\helix/Helix-correlation-infos.json to corefx-tests.\n2018-12-13T08:19:25.7775575Z          Upload to Azure is complete, a total of 1 items were uploaded.\n2018-12-13T08:19:25.7835052Z      1>Done Building Project \"E:\\A\\_work\\303\\s\\corefx\\src\\upload-tests.proj\" (default targets).\n2018-12-13T08:19:25.7942399Z \n2018-12-13T08:19:25.7943127Z Build FAILED.\n2018-12-13T08:19:25.7948599Z \n2018-12-13T08:19:25.7949803Z        \"E:\\A\\_work\\303\\s\\corefx\\src\\upload-tests.proj\" (default target) (1) ->\n2018-12-13T08:19:25.7950002Z        (UploadContent target) -> \n2018-12-13T08:19:25.7950193Z          E:\\A\\_work\\303\\s\\corefx\\Tools\\CloudTest.Helix.targets(238,5): error : Error while copying content to a stream. [E:\\A\\_work\\303\\s\\corefx\\src\\upload-tests.proj]\n2018-12-13T08:19:25.7950486Z        E:\\A\\_work\\303\\s\\corefx\\Tools\\CloudTest.Helix.targets(238,5): error :    at System.Net.Http.HttpContent.CopyToAsyncCore(ValueTask copyTask) [E:\\A\\_work\\303\\s\\corefx\\src\\upload-tests.proj]\n2018-12-13T08:19:25.7951804Z        E:\\A\\_work\\303\\s\\corefx\\Tools\\CloudTest.Helix.targets(238,5): error :    at System.Net.Http.HttpConnection.SendRequestContentAsync(HttpRequestMessage request, HttpContentWriteStream stream, CancellationToken cancellationToken) [E:\\A\\_work\\303\\s\\corefx\\src\\upload-tests.proj]\n2018-12-13T08:19:25.7952305Z        E:\\A\\_work\\303\\s\\corefx\\Tools\\CloudTest.Helix.targets(238,5): error :    at System.Net.Http.HttpConnection.SendAsyncCore(HttpRequestMessage request, CancellationToken cancellationToken) [E:\\A\\_work\\303\\s\\corefx\\src\\upload-tests.proj]\n2018-12-13T08:19:25.7952868Z        E:\\A\\_work\\303\\s\\corefx\\Tools\\CloudTest.Helix.targets(238,5): error :    at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken) [E:\\A\\_work\\303\\s\\corefx\\src\\upload-tests.proj]\n2018-12-13T08:19:25.7953219Z        E:\\A\\_work\\303\\s\\corefx\\Tools\\CloudTest.Helix.targets(238,5): error :    at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken) [E:\\A\\_work\\303\\s\\corefx\\src\\upload-tests.proj]\n2018-12-13T08:19:25.7953556Z        E:\\A\\_work\\303\\s\\corefx\\Tools\\CloudTest.Helix.targets(238,5): error :    at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts) [E:\\A\\_work\\303\\s\\corefx\\src\\upload-tests.proj]\n2018-12-13T08:19:25.7954309Z        E:\\A\\_work\\303\\s\\corefx\\Tools\\CloudTest.Helix.targets(238,5): error :    at Microsoft.DotNet.Build.CloudTestTasks.AzureHelper.RequestWithRetry(TaskLoggingHelper loggingHelper, HttpClient client, Func`1 createRequest, Func`2 validationCallback, Int32 retryCount, Int32 retryDelaySeconds) [E:\\A\\_work\\303\\s\\corefx\\src\\upload-tests.proj]\n2018-12-13T08:19:25.7954598Z \n2018-12-13T08:19:25.7954731Z     0 Warning(s)\n2018-12-13T08:19:25.7954832Z     1 Error(s)\n2018-12-13T08:19:25.7954925Z \n2018-12-13T08:19:25.7955027Z Time Elapsed 00:01:41.73\n2018-12-13T08:19:25.8616582Z Build failed.\n2018-12-13T08:19:26.2439591Z ##[error]Process completed with exit code 1.\n2018-12-13T08:19:26.2459609Z ##[section]Finishing: Create Helix Test Jobs\n\n---\n\n@robertborr commented on [Thu Dec 13 2018](https://github.com/dotnet/core-eng/issues/4804#issuecomment-447144403)\n\nrandom networking error, since the next build succeeded, this was probably a sourcecode issue. Closing\n\n---\n\n@robertborr commented on [Fri Dec 14 2018](https://github.com/dotnet/core-eng/issues/4804#issuecomment-447425162)\n\nmoving this to corefx\n\n","Url":"https://github.com/dotnet/corefx/issues/34103","RelatedDescription":"Open issue \"Build failure: CoreFx 20181213.03\" (#34103)"},{"Id":"391227287","IsPullRequest":false,"CreatedAt":"2018-12-14T18:57:26","Actor":"jeffhube","Number":"34102","RawContent":null,"Title":"XDocument.Load badly resolves path containing %2E and some other URL encoded characters","State":"open","Body":"XDocument.Load is failing to properly resolve paths that contain %2E. Given a filename like \"foo%2E.txt\", it attempts to open \"foo..txt\". This seems kind of similar to #25820.\r\n\r\nVersion: 2.2.101\r\n\r\n```csharp\r\nclass Program\r\n{\r\n    static void Main(string[] args)\r\n    {\r\n        string filename = \"foo%2E.txt\";\r\n        File.WriteAllText(filename, \"<?xml version='1.0' encoding='UTF-8'?><Foo/>\");\r\n        XDocument.Load(filename);\r\n    }\r\n}\r\n```\r\n\r\n```\r\nUnhandled Exception: System.IO.FileNotFoundException: Could not find file '****\\foo..txt'.\r\n   at System.IO.FileStream.ValidateFileHandle(SafeFileHandle fileHandle)\r\n   at System.IO.FileStream.CreateFileOpenHandle(FileMode mode, FileShare share, FileOptions options)\r\n   at System.IO.FileStream..ctor(String path, FileMode mode, FileAccess access, FileShare share, Int32 bufferSize, FileOptions options)\r\n   at System.IO.FileStream..ctor(String path, FileMode mode, FileAccess access, FileShare share, Int32 bufferSize)\r\n   at System.Xml.XmlDownloadManager.GetStream(Uri uri, ICredentials credentials, IWebProxy proxy, RequestCachePolicy cachePolicy)\r\n   at System.Xml.XmlUrlResolver.GetEntity(Uri absoluteUri, String role, Type ofObjectToReturn)\r\n   at System.Xml.XmlTextReaderImpl.FinishInitUriString()\r\n   at System.Xml.XmlTextReaderImpl..ctor(String uriStr, XmlReaderSettings settings, XmlParserContext context, XmlResolver uriResolver)\r\n   at System.Xml.XmlReaderSettings.CreateReader(String inputUri, XmlParserContext inputContext)\r\n   at System.Xml.XmlReader.Create(String inputUri, XmlReaderSettings settings)\r\n   at System.Xml.Linq.XDocument.Load(String uri, LoadOptions options)\r\n   at System.Xml.Linq.XDocument.Load(String uri)\r\n   at ****.Program.Main(String[] args) in ****\\Program.cs:line 13\r\n```","Url":"https://github.com/dotnet/corefx/issues/34102","RelatedDescription":"Open issue \"XDocument.Load badly resolves path containing %2E and some other URL encoded characters\" (#34102)"},{"Id":"391225642","IsPullRequest":false,"CreatedAt":"2018-12-14T18:52:18","Actor":"robertborr","Number":"34101","RawContent":null,"Title":"Misc build failures in 'official/corefx/master/' - '20181213.01'","State":"open","Body":"@dotnet-mc-bot commented on [Wed Dec 12 2018](https://github.com/dotnet/core-eng/issues/4800)\n\nThere were a set of failures during this build. Here is a summary of these:\r\n* https://devdiv.visualstudio.com/DefaultCollection/DevDiv/_build?_a=summary&buildId=2273951\r\n  - **Agent:** DDVSOLINUXAGE003\r\n  - **Error log:** ##[error]/usr/bin/docker failed with return code: 1...\r\n\r\n* https://devdiv.visualstudio.com/DefaultCollection/DevDiv/_build?_a=summary&buildId=2273952\r\n  - **Agent:** DDVSOLINUXAGE004\r\n  - **Error log:** ##[error]/usr/bin/docker failed with return code: 1...\r\n\r\n* https://devdiv.visualstudio.com/DefaultCollection/DevDiv/_build?_a=summary&buildId=2273953\r\n  - **Agent:** DDVSOLINUXAGE005\r\n  - **Error log:** ##[error]/usr/bin/docker failed with return code: 1...\r\n\r\n* https://devdiv.visualstudio.com/DefaultCollection/DevDiv/_build?_a=summary&buildId=2273957\r\n  - **Agent:** DDVSOLINUXAGE006\r\n  - **Error log:** ##[error]/usr/bin/docker failed with return code: 1...\r\n\r\n* https://devdiv.visualstudio.com/DefaultCollection/DevDiv/_build?_a=summary&buildId=2273961\r\n  - **Agent:** DDVSOLINUXAGE007\r\n  - **Error log:** ##[error]/usr/bin/docker failed with return code: 1...\r\n\r\n@jcagme, @markwilkie\r\n\n\n---\n\n@robertborr commented on [Thu Dec 13 2018](https://github.com/dotnet/core-eng/issues/4800#issuecomment-447061602)\n\nReclassifying as SourceCode.\r\nThis error is present in each build log: \"Node reuse must be disabled in CI build.\"\n\n---\n\n@robertborr commented on [Thu Dec 13 2018](https://github.com/dotnet/core-eng/issues/4800#issuecomment-447070521)\n\nUse msbuild with /nr:false\n\n---\n\n@robertborr commented on [Fri Dec 14 2018](https://github.com/dotnet/core-eng/issues/4800#issuecomment-447419226)\n\nmoving to corefx\n\n","Url":"https://github.com/dotnet/corefx/issues/34101","RelatedDescription":"Open issue \"Misc build failures in 'official/corefx/master/' - '20181213.01'\" (#34101)"},{"Id":"391224031","IsPullRequest":false,"CreatedAt":"2018-12-14T18:46:54","Actor":"robertborr","Number":"34100","RawContent":null,"Title":"Network build failures in 'official/corefx/master/' - '20181211.02'","State":"open","Body":"@dotnet-mc-bot commented on [Tue Dec 11 2018](https://github.com/dotnet/core-eng/issues/4788)\n\nThere were a set of failures during this build. Here is a summary of these:\r\n* https://devdiv.visualstudio.com/DefaultCollection/DevDiv/_build?_a=summary&buildId=2268475\r\n  - **Agent:** DDVSOWINAGE082\r\n  - **Error log:** E:\\A\\_work\\0\\s\\corefx\\.dotnet\\sdk\\2.1.401\\NuGet.targets(0,0): error : Failed to retrieve information about 'Microsoft.TargetingPack.NETFramework.v4.6' from remote source 'https://dotnetfeed.blob.core.windows.net/dotnet-core/flatco...\r\n\r\n* https://devdiv.visualstudio.com/DefaultCollection/DevDiv/_build?_a=summary&buildId=2268465\r\n  - **Agent:** DDVSOWINAGE056\r\n  - **Error log:** E:\\A\\_work\\0\\s\\corefx\\src\\System.Runtime.CompilerServices.Unsafe\\src\\System.Runtime.CompilerServices.Unsafe.ilproj : error : Unable to find package Microsoft.NET.Sdk.IL. No packages exist with this id in source(s): dotnet-core...\r\n\r\n@jcagme, @markwilkie\r\n\n\n---\n\n@robertborr commented on [Tue Dec 11 2018](https://github.com/dotnet/core-eng/issues/4788#issuecomment-446268304)\n\nfailure due to external dependency and insufficient retry logic. Reclassifying as sourcecode and closing.\n\n---\n\n@robertborr commented on [Tue Dec 11 2018](https://github.com/dotnet/core-eng/issues/4788#issuecomment-446271239)\n\nside note: this warning exists in earlier build steps: ##[warning]The 'Restore NuGet Packages' option is deprecated. To restore NuGet packages in your build, add a NuGet Tool Installer task to your build definition.\n\n---\n\n@robertborr commented on [Tue Dec 11 2018](https://github.com/dotnet/core-eng/issues/4788#issuecomment-446306183)\n\n@danmosemsft \n\n","Url":"https://github.com/dotnet/corefx/issues/34100","RelatedDescription":"Open issue \"Network build failures in 'official/corefx/master/' - '20181211.02'\" (#34100)"},{"Id":"391221669","IsPullRequest":false,"CreatedAt":"2018-12-14T18:38:55","Actor":"robertborr","Number":"34099","RawContent":null,"Title":"ToolsError build failures in 'official/corefx/master/' - '20181208.01'","State":"open","Body":"@dotnet-mc-bot commented on [Fri Dec 07 2018](https://github.com/dotnet/core-eng/issues/4766)\n\nThere were a set of failures during this build. Here is a summary of these:\r\n* https://devdiv.visualstudio.com/DefaultCollection/DevDiv/_build?_a=summary&buildId=2263050\r\n  - **Agent:** DDVSOWINAGE082\r\n  - **Error log:** E:\\A\\_work\\0\\s\\corefx\\Tools\\codeOptimization.targets(0,0): error MSB3073: The command \"E:\\A\\_work\\0\\s\\corefx\\.packages\\Microsoft.DotNet.IBCMerge\\4.6.0-alpha-00001\\lib\\net45\\ibcmerge.exe -q -f -delete -mo E:\\A\\_work\\0\\s\\corefx\\Tool...\r\n\r\n@jcagme, @markwilkie\r\n\n\n---\n\n@robertborr commented on [Mon Dec 10 2018](https://github.com/dotnet/core-eng/issues/4766#issuecomment-445960464)\n\nrelated: dotnet/coreclr#20225 \r\n\n\n","Url":"https://github.com/dotnet/corefx/issues/34099","RelatedDescription":"Open issue \"ToolsError build failures in 'official/corefx/master/' - '20181208.01'\" (#34099)"},{"Id":"391199826","IsPullRequest":false,"CreatedAt":"2018-12-14T17:28:11","Actor":"dotnet-mc-bot","Number":"34097","RawContent":null,"Title":"Build failure: Buildtools issue, needs to be converted to use arcade","State":"open","Body":"Opened on behalf of @robertborr\n\nWarnings: 1\nStatus Message: failed\n\nBuild : 3.0 - 20181214.01 (Product Build)\nFailing configurations:\n- Windows\n  - netcoreapp-x64\n[Mission Control Build Info](https://mc.dot.net/#/product/netcore/30/source/official~2Fcorefx~2Fmaster~2F/type/build~2Fproduct~2F/build/20181214.01/workItem/Orchestration/analysis/external/Link)\n\n1>E:\\A\\_work\\5\\s\\corefx\\Tools\\CloudTest.Helix.targets(238,5): error : The SSL connection could not be established, see inner exception. [E:\\A\\_work\\5\\s\\corefx\\src\\upload-tests.proj]\n2018-12-14T01:23:52.8658485Z E:\\A\\_work\\5\\s\\corefx\\Tools\\CloudTest.Helix.targets(238,5): error :    at System.Net.Http.ConnectHelper.EstablishSslConnectionAsyncCore(Stream stream, SslClientAuthenticationOptions sslOptions, CancellationToken cancellationToken) [E:\\A\\_work\\5\\s\\corefx\\src\\upload-tests.proj]\n2018-12-14T01:23:52.8658754Z E:\\A\\_work\\5\\s\\corefx\\Tools\\CloudTest.Helix.targets(238,5): error :    at System.Threading.Tasks.ValueTask`1.get_Result() [E:\\A\\_work\\5\\s\\corefx\\src\\upload-tests.proj]\n2018-12-14T01:23:52.8659135Z E:\\A\\_work\\5\\s\\corefx\\Tools\\CloudTest.Helix.targets(238,5): error :    at System.Net.Http.HttpConnectionPool.CreateConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken) [E:\\A\\_work\\5\\s\\corefx\\src\\upload-tests.proj]\n2018-12-14T01:23:52.8659639Z E:\\A\\_work\\5\\s\\corefx\\Tools\\CloudTest.Helix.targets(238,5): error :    at System.Threading.Tasks.ValueTask`1.get_Result() [E:\\A\\_work\\5\\s\\corefx\\src\\upload-tests.proj]\n2018-12-14T01:23:52.8659824Z E:\\A\\_work\\5\\s\\corefx\\Tools\\CloudTest.Helix.targets(238,5): error :    at System.Net.Http.HttpConnectionPool.WaitForCreatedConnectionAsync(ValueTask`1 creationTask) [E:\\A\\_work\\5\\s\\corefx\\src\\upload-tests.proj]\n2018-12-14T01:23:52.8660164Z E:\\A\\_work\\5\\s\\corefx\\Tools\\CloudTest.Helix.targets(238,5): error :    at System.Threading.Tasks.ValueTask`1.get_Result() [E:\\A\\_work\\5\\s\\corefx\\src\\upload-tests.proj]\n2018-12-14T01:23:52.8660383Z E:\\A\\_work\\5\\s\\corefx\\Tools\\CloudTest.Helix.targets(238,5): error :    at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken) [E:\\A\\_work\\5\\s\\corefx\\src\\upload-tests.proj]\n2018-12-14T01:23:52.8660628Z E:\\A\\_work\\5\\s\\corefx\\Tools\\CloudTest.Helix.targets(238,5): error :    at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken) [E:\\A\\_work\\5\\s\\corefx\\src\\upload-tests.proj]\n2018-12-14T01:23:52.8660865Z E:\\A\\_work\\5\\s\\corefx\\Tools\\CloudTest.Helix.targets(238,5): error :    at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts) [E:\\A\\_work\\5\\s\\corefx\\src\\upload-tests.proj]\n2018-12-14T01:23:52.8661146Z E:\\A\\_work\\5\\s\\corefx\\Tools\\CloudTest.Helix.targets(238,5): error :    at Microsoft.DotNet.Build.CloudTestTasks.AzureHelper.RequestWithRetry(TaskLoggingHelper loggingHelper, HttpClient client, Func`1 createRequest, Func`2 validationCallback, Int32 retryCount, Int32 retryDelaySeconds) [E:\\A\\_work\\5\\s\\corefx\\src\\upload-tests.proj]\n\n\nBuildtools should not have work done, the code should be converted to use arcade.\n\ncorefx if an issue already exists tracking this work, please resolve to that.\n\nAll future issues that are not specific to actual build machines can be resolved to this issue.","Url":"https://github.com/dotnet/corefx/issues/34097","RelatedDescription":"Open issue \"Build failure: Buildtools issue, needs to be converted to use arcade\" (#34097)"},{"Id":"390939795","IsPullRequest":true,"CreatedAt":"2018-12-14T16:23:30","Actor":"dotnet-maestro-bot","Number":"34092","RawContent":null,"Title":"Update CoreClr, CoreSetup to preview-27214-02, preview-27214-01, respectively (master)","State":"closed","Body":"/cc @dotnet/maestro-reviewers-core","Url":"https://github.com/dotnet/corefx/pull/34092","RelatedDescription":"Closed or merged PR \"Update CoreClr, CoreSetup to preview-27214-02, preview-27214-01, respectively (master)\" (#34092)"},{"Id":"391094958","IsPullRequest":false,"CreatedAt":"2018-12-14T12:37:53","Actor":"emilssonn","Number":"34095","RawContent":null,"Title":"HttpClient throwing System.Net.Sockets.SocketException after 21 seconds","State":"open","Body":"We are getting random 21 second timeouts when making http calls using HttpClient. As far as I know this is an low-level TCP timeout. The exception message is the same as in issue #31951. What causes these errors? \r\n\r\nThe real world use case is that we have an Azure Webapp running the latest version of .Net Core 2.1. When this webapp receives a request it will do a request (using httpclient) to another API that is accessed through Azure API Management. When our webapp gets maybe 30+ requests at the same time (causing 30+ requests being made to APIM) we might get this timeout on some of the request made to APIM, after an retry it works.\r\n\r\nI am trying to figure out why this timeout is happening. Can this exception indicate any errors in my code, setup or webapp performance? Or is the issue in API Management?","Url":"https://github.com/dotnet/corefx/issues/34095","RelatedDescription":"Open issue \"HttpClient throwing System.Net.Sockets.SocketException after 21 seconds\" (#34095)"},{"Id":"390998840","IsPullRequest":false,"CreatedAt":"2018-12-14T07:38:14","Actor":"GrabYourPitchforks","Number":"34094","RawContent":null,"Title":"System.Text.Utf8Char data type to represent UTF-8 text data","State":"open","Body":"(Related: https://github.com/dotnet/corefx/issues/30503)\r\n\r\n## Motivations and driving principles behind the `Utf8Char` proposal\r\n\r\n`Utf8Char` is synonymous with `Char`: they represent a single UTF-8 code unit and a single UTF-16 code unit, respectively. They are distinct from the integral types `Byte` and `UInt16` in that sequences of the UTF-\\* code unit types are meant to represent textual data, while sequences of the integral types are meant to represent binary data.\r\n\r\nDrawing this distinction is important. With UTF-16 data (`String`, `Char[]`), this distinction historically hasn't been a source of confusion. Developers are generally cognizant of the fact that aside from RPC, most i/o involves some kind of transcoding mechanism. Binary data doesn't come in from disk or the network in a format that can be trivially projected as a textual string; it must go through validation, recombining, and substitution. Similarly, when writing a string to disk or the network, a trivial projection is again impossible. The transcoding step must run in reverse to get the text data into the correct binary format expected by i/o.\r\n\r\n### A brief interlude on conformance and security\r\n\r\nThere is a key aspect here that is often lost in nuance. The purpose of the transcoding step isn't simply to \"shrink\" a string of UTF-16 code units into a string of UTF-8 code units (conveniently the same size as octets!) so that it can be blasted across the wire, or vice versa. It is to do so in such a manner that the receiver can reconstruct the original string __with full fidelity__.\r\n\r\nWith UTF-8, it is tempting to perform a trivial projection between the binary i/o layer (_bytes_) and the textual layer (_UTF-8 code units_). The elemental data types are the same shape, after all, so a reinterpret cast _seems_ legal at first glance. The problem with this design is that at a certain point, one or more components will need to operate on this text. If the text is ill-formed, the components may produce undefined behavior, or they may attempt to fix up the text on-the-fly but may disagree on the final shape of the fixed-up text. This violates the \"with full fidelity\" aspect mentioned in the previous paragraph.\r\n\r\nAs a concrete example, consider a web application that blindly treats all incoming form data as `ReadOnlySpan<byte>` and attempts to interpret it as UTF-8. Within the context of this single web application, there may not be a problem with this design. If the buffer contains ill-formed UTF-8, all of the APIs in the web application process might have undefined behavior as they're working with it, but they likely have _consistent_ undefined behavior.\r\n\r\nWeb applications almost never exist as a single isolated process, however. There is undoubtedly a persistent data store - a database or other backend service. If the web application forwards the `ReadOnlySpan<byte>` (containing ill-formed UTF-8) through to these layers, the backend layers could look at the same sequence of bytes and process them differently. Perhaps Component A is using `varchar(UTF8)` for its backend storage but Component B is using `nvarchar` for its backend storage. There is now a mismatch - a __loss of fidelity__ - between these two systems.\r\n\r\nThis places us into a somewhat peculiar position with respect to security. We generally think of CVEs as affecting individual frameworks or individual applications, but this underrepresents a class of issues best described as \"the API surface leads developers to writing applications which appear secure _in isolation_ but which are in fact dangerous _when used in conjunction with other applications_.\"\r\n\r\nSome examples of where vulnerabilities arise due to the interplay of components which handle ill-formed sequences UTF-8 differently:\r\n\r\n* [CVE-2017-7653](http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-7653), where Eclipse Mosquitto is not itself exploitable but where it can be leveraged by a malicious user to forward an ill-formed payload to a victim user, resulting in DoS against that user (not against the service).\r\n* [CVE-2015-3438](http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2015-3438), where WordPress sites are vulnerable to XSS if a commenter submits a comment containing ill-formed UTF-8 and WordPress sends that ill-formed sequence to MySQL, which before persistence will modify the text in a manner unanticipated by WordPress.\r\n\r\nThese issues tend to go underreported in the public sphere because the attack often must be tailored to a specific deployment or configuration of an application.\r\n\r\n### Back to `Utf8Char`\r\n\r\nThe proposal ultimately is to have `ReadOnlySpan<Utf8Char>` represent well-formed UTF-8 text data as much as possible. This mirrors `ReadOnlySpan<Char>`, which generally represents well-formed UTF-16 text data. In both cases it's possible for a developer to intentionally create ill-formed payloads by creating and populating a `Utf8Char[]` or `Char[]` with garbage and then producing a span over that buffer. But since developers tend not to take such actions _intentionally_ this shouldn't be a problem in practice. The standard way of getting a `ReadOnlySpan<Utf8Char>` from a `ReadOnlySpan<byte>` would be to use a factory that validates (and massages if necessary) the input data. This matches the behavior developers already expect when going from a `byte` sequence to a UTF-16 `char` sequence.\r\n\r\nGenerally speaking, Framework APIs which operate on `ReadOnlySpan<byte>` as UTF-8 input __must not__ assume the input is well-formed and __must__ have a well-defined behavior if ill-formed UTF-8 is encountered. The API may choose to take any number of actions - throw, return a failure code, perform replacement - as long as the behavior is part of the API contract and the caller understands this contract.\r\n\r\nFramework APIs which operate on `ReadOnlySpan<Utf8Char>` __should__ validate the input for well-formedness if such checks do not impose a hardship on the method implementation. There may be certain performance-sensitive routines which cannot incur that cost; such routines __may__ assume the input is well-formed and __may__ have undefined behavior if this invariant is violated, short of that behavior causing an access violation or other runtime corruption. For example, if a routine is given the single-element input `[ C2 ]`, it mustn't attempt to read off the end of the source buffer. Routines which require well-formed input __must__ be contracted as such. Chunking APIs (discussed later) __must__ at the very least continue to check for boundary conditions, even if they don't check for other ill-formedness in the sequence.\r\n\r\nFor more information on conformance, validation, and the distinction between binary data and textual data, see:\r\n* [The Unicode Specification, Chapter 3](https://www.unicode.org/versions/Unicode11.0.0/ch03.pdf), Clause C10 and Sec. 3.9\r\n* [The Unicode Specification, Chapter 5](https://www.unicode.org/versions/Unicode11.0.0/ch05.pdf), Sec. 5.22\r\n* [Unicode Technical Report #36 - Unicode Security Considerations](https://www.unicode.org/reports/tr36/), Sec. 3.1\r\n\r\n### Projections between `Utf8Char` and `Byte`\r\n\r\nThe UTF-8 code unit type `Utf8Char` does not attempt to validate its input.\r\n\r\n```cs\r\nUtf8Char c = (Utf8Char)(byte)0xC0; // creates a Utf8Char with the value C0\r\nRune r = new Rune(0xD800); // throws at runtime\r\n```\r\n\r\nIn the above example, this creates a `Utf8Char` instance with the value `C0`, even though the Unicode Specification expressly states that `C0` is _never_ a valid value for a UTF-8 code unit. Contrast this with the `Rune` type, whose constructor prohibits creating instances from values outside the valid Unicode scalar range.\r\n\r\nIt is possible to project (reinterpret cast) a `{ReadOnly}Span<Utf8Char>` to a `ReadOnlySpan<byte>`. This is useful for operations like writing UTF-8 text directly to an i/o pipe.\r\n\r\n```cs\r\nReadOnlySpan<Utf8Char> utf8 = ...;\r\nReadOnlySpan<byte> bytes = utf8.AsBytes();\r\nstream.Write(bytes);\r\n```\r\n\r\nThe projections `Span<Utf8Char> -> Span<byte>` and `{ReadOnly}Span<byte> -> {ReadOnly}Span<Utf8Char>` should also be possible. We do not want to prevent developers from removing any safety rails we provide within the Framework, but we also don't want developers to remove those rails _inadvertently_. Projections which blur the lines between textual representation and binary representation in a \"dangerous\" manner should require an affirmative action from the developer. One possible way to get this affirmation is to require use of the existing reinterpret_cast-like API.\r\n\r\n```cs\r\nReadOnlySpan<Utf8Char> a = MemoryMarshal.Cast<byte, Utf8Char>(ReadOnlySpan<byte>);\r\nSpan<Utf8Char> b = MemoryMarshal.Cast<byte, Utf8Char>(Span<byte>);\r\nSpan<byte> c = MemoryMarshal.Cast<Utf8Char, byte>(Span<Utf8Char>);\r\n```\r\n\r\nThe methods `Span<T>.ToString` and `Memory<T>.ToString` (and their read-only equivalents) will be enlightened for `T = Utf8Char`, just as they're enlightened for `T = char` today. The behavior of the method will be to transcode the data to UTF-16 (with invalid sequence replacement if necessary) and to return the expected `String` instance. This enlightenment will not extend to the case where `T = byte`.\r\n\r\nUnlike `Span<T>`, `Memory<T>` instances cannot be projected to a different type `Memory<U>`. This means that there is no way to cast between `Memory<Utf8Char>` and `Memory<byte>` (or their read-only equivalents) on-the-fly.\r\n\r\n```cs\r\nUtf8String utf8 = new Utf8String(\"hello\"); // initialized from literal\r\nReadOnlySpan<Utf8Char> asUtf8Chars = utf8; // implicit operator\r\n\r\n// the below line could also be ROS<byte> asBytes = utf8.AsBytes();\r\nReadOnlySpan<byte> asBytes = asUtf8Chars.AsBytes();\r\n\r\nfixed (byte* pA = asBytes)\r\nfixed (Utf8Char* pB = asUtf8Chars)\r\n{\r\n   Debug.Assert((void*)pA == (void*)pB); // same reference\r\n}\r\n\r\nDebug.Assert(asBytes.ToString() == \"ReadOnlySpan<byte>[5]\");\r\nDebug.Assert(asUtf8Chars.ToString() == \"hello\");\r\n```\r\n\r\n## Comparing to other languages\r\n\r\nIn __Go__ 1.x, `string` and `[]byte` are distinct sliceable types. Developers _generally_ use strings to store textual data and byte slices to store binary data. This distinction is sometimes a bit blurry and developers may require external information (documentation, context, method names) to determine exactly what kind of information is represented by the slice, akin to using traditional `char*` pointers in C.\r\n\r\nThe biggest difference between the two types is that `string` represents truly immutable data (not just an immutable view into mutable data), where `[]byte` represents mutable data. Thus there's no trivial projection possible between the two, and any conversion must necessarily be implemented as a copy. There are proposals for readonly slices in a future version of Go, though to the best of my knowledge these proposals have not been approved. If such a feature comes to fruition it seems like a non-copying projection `string -> <readonly> []byte` would be allowed implicitly, but the reverse projection `<readonly> []byte -> string` would still require a copy. (See https://github.com/golang/go/issues/20443 and https://groups.google.com/forum/#!topic/golang-dev/Y7j4B2r_eDw/discussion for further information.)\r\n\r\nIn __Swift__, it is possible to create a UTF-\\* view over any `String` instance. The corresponding types are `String.UTF8View`, `String.UTF16View`, and `String.UTF32View`. These types are specialized text sequence types distinct from normal binary data sequence types; though their elemental types of enumeration are `UInt8`, `UInt16`, and `UInt32`, respectively. This means that it is not possible to project `String.UTF8View` and `[UInt8]` between each other trivially; a copy must take place. (See https://developer.apple.com/documentation/swift/string/utf8view for further information.)\r\n\r\n## Alternative proposals\r\n\r\n### `Utf8Slice`\r\n\r\nInstead of introducing a `Utf8Char` type and allowing `ReadOnlySpan<Utf8Char>` to represent a slice of UTF-8 textual data, one could imagine introducing a `Utf8Slice` type which is a thin wrapper around `ReadOnlySpan<Byte>`. Inspection or manipulation methods would operate on this type rather than exist as specialized extensions on `MemoryExtensions`. `Utf8Slice` would be indexable (with `Byte` as the elemental type).\r\n\r\nThere is some prior art here in that it's similar to how the Go language operates. But this leads to a problem in that `Utf8Slice` instances would be limited in functionality. They'd be immutable, requiring manipulation APIs to bounce through a separate byte sequence and wrap a new `Utf8Slice` around it. We'd have to determine if we'd want a heapable (`ReadOnlyMemory<Byte>`-based) sibling type. There would be confusion as to why there's asymmetry between this and the UTF-16 types. After these and other considerations we're basically reinventing the `Utf8String` proposal, so there's minimal benefit to `Utf8Slice` as proposed here.\r\n\r\n### Use `ReadOnlySpan<byte>` for everything\r\n\r\nThis is tempting from the perspective of a system that wants to treat everything as pass-through as much as possible, but I don't believe it's appropriate from the perspective of a _framework_. There are two main issues I have with this approach.\r\n\r\nThe first is that it interferes with the general concept of a type system and makes it more difficult to reason about code. If a developer has a `Byte[]` in their code, they shouldn't need the additional bookkeeping overhead of asking themselves \"does this represent binary data like a JPG, or does this represent UTF-8 text?\" Text-based extension methods (`Contains`, `ToUpper`, etc.) also shouldn't begin appearing for arbitrary binary data sequences.\r\n\r\nThe second is that this blurs the line between binary data and textual data, leading to the validation and conformance problems mentioned earlier. I don't want the framework to encourage developers to play fast and loose with this, potentially leading to undefined behavior in their applications. This is still subject to the earlier caveats: power developers should absolutely be able to project the data with minimal fuss, but this should be an affirmative action.\r\n\r\n```cs\r\nnamespace System.Text\r\n{\r\n    // Represents the fundamental elemental type of UTF-8 textual data and is distinct\r\n    // from System.Byte, similar to how System.Char is the fundamental elemental type\r\n    // of UTF-16 textual data and is distinct from System.UInt16.\r\n    //\r\n    // Ideally the compiler would support various syntaxes for this, like:\r\n    // Utf8Char theChar = 63; // Implicit assignment of const to local of type Utf8Char\r\n    public readonly struct Utf8Char : IComparable<Utf8Char>, IEquatable<Utf8Char>\r\n    {\r\n        private readonly int _dummy;\r\n\r\n        // Construction is performed via a cast. All casts are checked for overflow\r\n        // but not for correctness. For example, casting -1 to Utf8Char will fail\r\n        // with an OverflowException, but casting 0xFF to Utf8Char will succeed even\r\n        // though 0xFF is never a valid UTF-8 code unit. Additionally, even though\r\n        // the cast from Byte to Utf8Char can never overflow, it's still an explicit\r\n        // cast because we don't want devs to fall into the habit of treating arbitrary\r\n        // integral types as equivalent to textual data types. As an existing example of\r\n        // this in the current compiler, there's no implicit cast from Byte to Char even\r\n        // though it's a widening operation, but there is an explicit cast.\r\n\r\n        public static explicit operator Utf8Char(byte value) => throw null;\r\n        public static explicit operator Utf8Char(sbyte value) => throw null;\r\n        public static explicit operator Utf8Char(char value) => throw null;\r\n        public static explicit operator Utf8Char(short value) => throw null;\r\n        public static explicit operator Utf8Char(ushort value) => throw null;\r\n        public static explicit operator Utf8Char(int value) => throw null;\r\n        public static explicit operator Utf8Char(uint value) => throw null;\r\n        public static explicit operator Utf8Char(long value) => throw null;\r\n        public static explicit operator Utf8Char(ulong value) => throw null;\r\n\r\n        // Casts to the various primitive integral types. All casts are implicit\r\n        // with two exceptions, which are explicit:\r\n        // - Cast to SByte, because it could result in an OverflowException.\r\n        // - Cast to Char, for the same reason as the Byte-to-Utf8Char cast.\r\n\r\n        public static implicit operator byte(Utf8Char value) => throw null;\r\n        public static explicit operator sbyte(Utf8Char value) => throw null;\r\n        public static explicit operator char(Utf8Char value) => throw null;\r\n        public static implicit operator short(Utf8Char value) => throw null;\r\n        public static implicit operator ushort(Utf8Char value) => throw null;\r\n        public static implicit operator int(Utf8Char value) => throw null;\r\n        public static implicit operator uint(Utf8Char value) => throw null;\r\n        public static implicit operator long(Utf8Char value) => throw null;\r\n        public static implicit operator ulong(Utf8Char value) => throw null;\r\n\r\n        public static bool operator ==(Utf8Char a, Utf8Char b) => throw null;\r\n        public static bool operator !=(Utf8Char a, Utf8Char b) => throw null;\r\n        public static bool operator <(Utf8Char a, Utf8Char b) => throw null;\r\n        public static bool operator <=(Utf8Char a, Utf8Char b) => throw null;\r\n        public static bool operator >(Utf8Char a, Utf8Char b) => throw null;\r\n        public static bool operator >=(Utf8Char a, Utf8Char b) => throw null;\r\n        public int CompareTo(Utf8Char other) => throw null;\r\n        public override bool Equals(object obj) => throw null;\r\n        public bool Equals(Utf8Char other) => throw null;\r\n        public override int GetHashCode() => throw null;\r\n        public override string ToString() => throw null;\r\n    }\r\n```\r\n\r\nDue to the way this type is defined and the presence of implicit conversion operators, mathematical and comparison operators behave as expected. Some examples are given below.\r\n\r\n```cs\r\nUtf8Char a = (Utf8Char)42;\r\nvar b = a + 10; // = int 52\r\nbool c = (a == b); // int to int comparison, returns false\r\nbool d = (a == (b - 10)); // int to int comparison, returns true\r\nlong e = a; // = long 42\r\nbyte f = (byte)a; // = byte 42\r\nUtf8Char g = (Utf8Char)(-b); // = OverflowException\r\nUtf8Char h = (Utf8Char)(byte)(-b); // = 0xCC\r\n```\r\n\r\nSample APIs for operating with `Utf8Char` sequences follow.\r\n\r\n```cs\r\nnamespace System.IO\r\n{\r\n   // EXISTING class - NEW methods\r\n   public abstract class TextWriter\r\n   {\r\n      /*\r\n       * Since TextWriter uses UTF-8 as its default encoding, calling Write on these\r\n       * instances with input which is already UTF-8 is a simple projection\r\n       * without the overhead of transcoding.\r\n       */\r\n\r\n      public virtual void Write(ReadOnlySpan<Utf8Char> buffer);\r\n      public virtual Task WriteAsync(ReadOnlyMemory<Utf8Char> buffer, CancellationToken cancellationToken = default);\r\n      public virtual void WriteLine(ReadOnlySpan<Utf8Char> buffer);\r\n      public virtual Task WriteLineAsync(ReadOnlyMemory<Utf8Char> buffer, CancellationToken cancellationToken = default);\r\n   }\r\n\r\n   // EXISTING class - NEW methods\r\n   public class BinaryWriter\r\n   {\r\n      public virtual void Write(ReadOnlySpan<Utf8Char> utf8Chars);\r\n   }\r\n}\r\n\r\nnamespace System.Text\r\n{\r\n   // EXISTING class - NEW methods\r\n   public struct Rune\r\n   {\r\n      public bool TryEncodeUtf8(Span<Utf8Char> destination, out int utf8CharsWritten);\r\n   }\r\n}\r\n\r\nnamespace System\r\n{\r\n   public static class MemoryExtensions\r\n   {\r\n      // project UTF-8 text buffer as binary\r\n      public static ReadOnlySpan<byte> AsBytes(this ReadOnlySpan<Utf8Char> utf8Chars);\r\n\r\n      public static int CompareTo(this ReadOnlySpan<Utf8Char> span, ReadOnlySpan<Utf8Char> other, StringComparison comparisonType);\r\n\r\n      public static bool Contains(this ReadOnlySpan<Utf8Char> span, ReadOnlySpan<Utf8Char> value, StringComparison comparisonType);\r\n\r\n      // convenience overloads that are equivalent to 'Ordinal'\r\n      public static bool Contains(this ReadOnlySpan<Utf8Char> span, char value);\r\n      public static bool Contains(this ReadOnlySpan<Utf8Char> span, Rune value);\r\n\r\n      public static bool EndsWith(this ReadOnlySpan<Utf8Char> span, ReadOnlySpan<Utf8Char> value, StringComparison comparisonType);\r\n\r\n      public static Utf8SpanRuneEnumerator EnumerateRunes(this ReadOnlySpan<Utf8Char> span);\r\n      public static Utf8SpanRuneEnumerator EnumerateRunes(this Span<Utf8Char> span);\r\n\r\n      public static bool Equals(this ReadOnlySpan<Utf8Char> span, ReadOnlySpan<Utf8Char> other, StringComparison comparisonType);\r\n\r\n      public static int IndexOf(this ReadOnlySpan<Utf8Char> span, ReadOnlySpan<Utf8Char> value, StringComparison comparisonType);\r\n\r\n      public static bool IsWhiteSpace(this ReadOnlySpan<Utf8Char> span);\r\n\r\n      public static int LastIndexOf(this ReadOnlySpan<Utf8Char> span, ReadOnlySpan<Utf8Char> value, StringComparison comparisonType);\r\n\r\n      public static bool StartsWith(this ReadOnlySpan<Utf8Char> span, ReadOnlySpan<Utf8Char> value, StringComparison comparisonType);\r\n\r\n      public static ReadOnlySpan<Utf8Char> Trim(this ReadOnlySpan<Utf8Char> span);\r\n      public static ReadOnlySpan<Utf8Char> TrimEnd(this ReadOnlySpan<Utf8Char> span);\r\n      public static ReadOnlySpan<Utf8Char> TrimStart(this ReadOnlySpan<Utf8Char> span);\r\n\r\n      /*\r\n       * Differences in behavior from UTF-16 ToLower/ToUpper  methods:\r\n       *\r\n       * - These methods may begin writing to the destination  buffer before they realize that the destination\r\n       *   buffer is too small, so a return value of -1 means  that the output buffer may contain nonsense.\r\n       *\r\n       * - If the source and destination buffers overlap at  all, the result is undefined. (The UTF-16 behavior\r\n       *   is that if source and destination are identical,  it's an in-place transformation; but if source and\r\n       *   destination have a partial overlap, the result is  undefined.)\r\n       *\r\n       * These differences are due to the fact that UTF-16  text does not change length (code unit count) when\r\n       * undergoing simple case conversion, but UTF-8 text  may change length (code unit count) when undergoing\r\n       * simple case conversion.\r\n       *\r\n       * Like the UTF-16 equivalents, the UTF-8 methods  result in undefined output given ill-formed source  data.\r\n       */\r\n      public static int ToLower(this ReadOnlySpan<Utf8Char> source, Span<Utf8Char> destination, CultureInfo culture);\r\n      public static int ToLowerInvariant(this ReadOnlySpan<Utf8Char> source, Span<Utf8Char> destination);\r\n      public static int ToUpper(this ReadOnlySpan<Utf8Char> source, Span<Utf8Char> destination, CultureInfo culture);\r\n      public static int ToUpperInvariant(this ReadOnlySpan<Utf8Char> source, Span<Utf8Char> destination);\r\n   }\r\n}\r\n\r\nnamespace System.Text.Unicode\r\n{\r\n   /*\r\n    * NEW class to contain static utility & validation methods. Under System.Text.Unicode namespace so as not to\r\n    * interfere with 'Utf8' type names that might already exist in application code. If we instead want to put\r\n    * this under the default namespace System.Text, suggest Utf8Utility (existing naming convention).\r\n    *\r\n    * And yes, \"Utf8\" is the proper capitalization per our design guidelines since the acronym is greater than 2 letters\r\n    * and doesn't represent a trademarked term, prior art be damned. :)\r\n    */\r\n   public static class Utf8\r\n   {\r\n      public static bool IsWellFormedSequence(ReadOnlySpan<byte> sequence);\r\n      public static bool IsWellFormedSequence(ReadOnlySpan<Utf8Char> sequence);\r\n   }\r\n\r\n   public static class Utf16\r\n   {\r\n      public static bool IsWellFormedSequence(ReadOnlySpan<char> sequence);\r\n   }\r\n}\r\n```\r\n\r\nNot shown in the above APIs are UTF-8 overloads for common networking APIs like `IPAddress.Parse(ReadOnlySpan<Utf8Char>)`, etc. It will require additional effort to enumerate the entire list of APIs which should be UTF-8 enlightened as part of this effort. For now this issue focuses mainly on text processing and manipulation APIs.\r\n\r\n## Chunking APIs\r\n\r\nWhile `ReadOnlySpan<char>` and `ReadOnlySpan<Utf8Char>` __should__ represent standalone well-formed UTF-\\* sequences as much as possible, we must recognize that applications which work on discontiguous buffers cannot always guarantee this property. Often an application will be required to chunk a large piece of text into several smaller buffers due to performance considerations. This behavior is seen in existing Framework types like `StringBuilder` and `ReadOnlySequence<T>`.\r\n\r\nThis chunking could occur such that slice boundaries occur in the middle of a multi-code unit sequence. In these cases the individual chunks may be ill-formed, but the logical concatenation of these chunks represent a well-formed supersequence. A UTF-16 example is the well-formed sequence `[ D808 DF45 ]` chunked into the ill-formed subsequences `[ D808 ]` and `[ DF45 ]`. A UTF-8 example is the well-formed sequence `[ F0 92 8D 85 ]` chunked into the ill-formed sequences `[ F0 ]` and `[ 92 8D 85 ]`. The Framework should provide `OperationStatus`-based APIs as much as possible to enable this scenario.\r\n\r\nOf special note is that some text operations cannot be performed in a chunked fashion. APIs like case conversion (`ToUpper`, `ToLower`) and transcoding can be created to allow for chunking, but comparison APIs (`CompareTo`, `StartsWith`) do not allow for chunking. A concrete example of this follows. In this example, chunking will cause `StartsWith` to return a false positive result.\r\n\r\n```cs\r\n// Assumes current culture is en-US\r\nstatic void Main(string[] args)\r\n{\r\n   string theString = \"e\\u0301\"; // [ 'e', '\\u0301' ]\r\n   Console.WriteLine(theString.StartsWith(\"e\")); // prints \"False\"\r\n\r\n   theString = theString.Substring(0, 1); // chunk to [ 'e' ]\r\n   Console.WriteLine(theString.StartsWith(\"e\")); // prints \"True\"\r\n}\r\n```\r\n\r\nSince chunking is not unique to UTF-8, the Framework should provide chunking APIs for both UTF-8 and UTF-16 data. The Framework should also provide chunking APIs for transcoding routines. The existing `OperationStatus` type can be utilized for this purpose.\r\n\r\n```cs\r\nnamespace System.Text.Unicode\r\n{\r\n   public static class Utf8\r\n   {\r\n      /*\r\n       * OperationStatus-based APIs for case conversion of chunked UTF-8 data.\r\n       * This method *may* return OperationStatus.InvalidData when given ill-formed\r\n       * input, though the underlying localization library may opt to handle this\r\n       * scenario itself during case conversion. The behavior may differ when the\r\n       * invariant globalization mode is active. (One possible behavior is that the\r\n       * library may choose to propagate ill-formed subsequences from the source\r\n       * buffer to the destination buffer unmodified.)\r\n       *\r\n       * If the source and destination buffers overlap at all, the destination buffer\r\n       * contents will be undefined.\r\n       *\r\n       * 'numCharsRead' may or may not equal 'numCharsWritten' on method return.\r\n       */\r\n\r\n      public static OperationStatus ToUpper(ReadOnlySpan<Utf8Char> source, Span<Utf8Char> destination, CultureInfo culture, bool isFinalChunk, out int numCharsRead, out int numCharsWritten);\r\n      public static OperationStatus ToUpperInvariant(ReadOnlySpan<Utf8Char> source, Span<Utf8Char> destination, bool isFinalChunk, out int numCharsRead, out int numCharsWritten);\r\n      public static OperationStatus ToLower(ReadOnlySpan<Utf8Char> source, Span<Utf8Char> destination, CultureInfo culture, bool isFinalChunk, out int numCharsRead, out int numCharsWritten);\r\n      public static OperationStatus ToLowerInvariant(ReadOnlySpan<Utf8Char> source, Span<Utf8Char> destination, bool isFinalChunk, out int numCharsRead, out int numCharsWritten);\r\n\r\n      /*\r\n       * OperationStatus-based APIs for transcoding of chunked data.\r\n       * This method is similar to Encoding.UTF8.GetBytes / GetChars but has a\r\n       * different calling convention, different error handling mechanisms, and\r\n       * different performance characteristics.\r\n       *\r\n       * If 'replaceInvalidSequences' is true, the method will replace any ill-formed\r\n       * subsequence in the source with U+FFFD when transcoding to the destination,\r\n       * then it will continue processing the remainder of the buffers. Otherwise\r\n       * the method will return OperationStatus.InvalidData.\r\n       *\r\n       * If the method does return an error code, the out parameters will represent\r\n       * how much of the data was successfully transcoded, and the location of the\r\n       * ill-formed subsequence can be deduced from these values.\r\n       *\r\n       * If 'replaceInvalidSequences' is true, the method is guaranteed never to return\r\n       * OperationStatus.InvalidData. If 'isFinalChunk' is true, the method is\r\n       * guaranteed never to return OperationStatus.NeedMoreData.\r\n       *\r\n       * Byte-based overloads are provided alongside Utf8Char-based overloads so that\r\n       * transcoding can be performed directly from or directly to binary network buffers.\r\n       */\r\n\r\n      public static OperationStatus FromChars(ReadOnlySpan<char> source, Span<Utf8Char> destination, bool replaceInvalidSequences, bool isFinalChunk, out int numCharsRead, out int numCharsWritten);\r\n      public static OperationStatus FromChars(ReadOnlySpan<char> source, Span<byte> utf8Destination, bool replaceInvalidSequences, bool isFinalChunk, out int numCharsRead, out int numBytesWritten);\r\n\r\n      public static OperationStatus ToChars(ReadOnlySpan<byte> utf8Source, Span<char> destination, bool replaceInvalidSequences, bool isFinalChunk, out int numBytesRead, out int numCharsWritten);\r\n      public static OperationStatus ToChars(ReadOnlySpan<Utf8Char> source, Span<char> destination, bool replaceInvalidSequences, bool isFinalChunk, out int numCharsRead, out int numCharsWritten);\r\n\r\n      /*\r\n       * OperationStatus-based API that copies data from a binary data buffer into a\r\n       * text buffer, validating well-formedness during the copy and optionally\r\n       * patching ill-formed subsequences in the destination.\r\n       *\r\n       * If 'replaceInvalidSequences' is true, the method will replace any ill-formed\r\n       * subsequence in the source with U+FFFD when transcoding to the destination,\r\n       * then it will continue processing the remainder of the buffers. Otherwise\r\n       * the method will return OperationStatus.InvalidData.\r\n       *\r\n       * If 'replaceInvalidSequences' is true, the method is guaranteed never to return\r\n       * OperationStatus.InvalidData. If 'isFinalChunk' is true, the method is\r\n       * guaranteed never to return OperationStatus.NeedMoreData.\r\n       */\r\n\r\n      public static OperationStatus ToValidUtf8Chars(ReadOnlySpan<byte> utf8Source, Span<Utf8Char> destination, bool replaceInvalidSequences, bool isFinalChunk, out int numBytesRead, out int numCharsWritten);\r\n   }\r\n\r\n   public static class Utf16\r\n   {\r\n      /*\r\n       * OperationStatus-based APIs for case conversion of chunked UTF-16 data.\r\n       * This method *may* return OperationStatus.InvalidData when given ill-formed\r\n       * input, though the underlying localization library may opt to handle this\r\n       * scenario itself during case conversion. The behavior may differ when the\r\n       * invariant globalization mode is active. (One possible behavior is that the\r\n       * library may choose to propagate ill-formed subsequences from the source\r\n       * buffer to the destination buffer unmodified.)\r\n       *\r\n       * The same buffer can be provided as both source and destination to perform\r\n       * an in-place case conversion. If the buffers overlap only partially, the\r\n       * buffer contents will be undefined.\r\n       *\r\n       * 'numCharsRead' will always equal 'numCharsWritten'.\r\n       */\r\n\r\n      public static OperationStatus ToUpper(ReadOnlySpan<char> source, Span<char> destination, CultureInfo culture, bool isFinalChunk, out int numCharsRead, out int numCharsWritten);\r\n      public static OperationStatus ToUpperInvariant(ReadOnlySpan<char> source, Span<char> destination, bool isFinalChunk, out int numCharsRead, out int numCharsWritten);\r\n      public static OperationStatus ToLower(ReadOnlySpan<char> source, Span<char> destination, CultureInfo culture, bool isFinalChunk, out int numCharsRead, out int numCharsWritten);\r\n      public static OperationStatus ToLowerInvariant(ReadOnlySpan<char> source, Span<char> destination, bool isFinalChunk, out int numCharsRead, out int numCharsWritten);\r\n   }\r\n}\r\n```","Url":"https://github.com/dotnet/corefx/issues/34094","RelatedDescription":"Open issue \"System.Text.Utf8Char data type to represent UTF-8 text data\" (#34094)"},{"Id":"390994785","IsPullRequest":false,"CreatedAt":"2018-12-14T07:21:54","Actor":"rayncc","Number":"34093","RawContent":null,"Title":"How to use Microsoft.Bcl.Async with Managed C++ projects","State":"open","Body":"We are working on a solution with .Net 4.0 (for some reason), and we have two projects here:\r\n1. Project A is a C# project, which imports Microsoft.Bcl.Asyc\r\n2. Project B is a VC++ Project (CLR dll), which adds Project A as a reference.\r\n\r\nNow project B can not work, because Microsoft.Bcl requires project B to install nuget package Microsoft.Bcl, But we cannot install it on a VC++ project. Also, we got warnings like \r\n\r\n> Warning\tMSB3268\tThe primary reference \"Microsoft.Threading.Tasks\" could not be resolved because it has an indirect dependency on the framework assembly \"System.Runtime, Version=1.5.11.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\" which could not be resolved in the currently targeted framework. \".NETFramework,Version=v4.0\". \r\n\r\nAnd meanwhile, the types in Project A cannot be recognized in Project B.\r\nWe have tried manifest file or configuration  file to redirect the upper assemblies to the lasted version, but they didn't work.\r\n\r\nAny solutions for this?\r\n\r\nI have put a sample project for this situation\r\n\r\n[BCLWithManagedCpp.zip](https://github.com/dotnet/corefx/files/2678994/BCLWithManagedCpp.zip)\r\n","Url":"https://github.com/dotnet/corefx/issues/34093","RelatedDescription":"Open issue \"How to use Microsoft.Bcl.Async with Managed C++ projects\" (#34093)"},{"Id":"390932319","IsPullRequest":true,"CreatedAt":"2018-12-14T01:45:16","Actor":"jkoritzinsky","Number":"34091","RawContent":null,"Title":"Remove [Out] by-value string parameter usage from System.Management.","State":"open","Body":"Fixes #34083.","Url":"https://github.com/dotnet/corefx/pull/34091","RelatedDescription":"Open PR \"Remove [Out] by-value string parameter usage from System.Management.\" (#34091)"},{"Id":"390894896","IsPullRequest":true,"CreatedAt":"2018-12-14T01:38:09","Actor":"mattwarren","Number":"34085","RawContent":null,"Title":"The 'mscorlib' link returns a 404","State":"closed","Body":"mscorlib -> System.Private.CoreLib renaming happened a while back","Url":"https://github.com/dotnet/corefx/pull/34085","RelatedDescription":"Closed or merged PR \"The 'mscorlib' link returns a 404\" (#34085)"},{"Id":"390896751","IsPullRequest":true,"CreatedAt":"2018-12-14T01:37:46","Actor":"mattwarren","Number":"34086","RawContent":null,"Title":"'mscorlib' link returns 404 -> 'System.Private.CoreLib'","State":"closed","Body":"","Url":"https://github.com/dotnet/corefx/pull/34086","RelatedDescription":"Closed or merged PR \"'mscorlib' link returns 404 -> 'System.Private.CoreLib'\" (#34086)"},{"Id":"390864412","IsPullRequest":true,"CreatedAt":"2018-12-14T01:01:19","Actor":"ViktorHofer","Number":"34082","RawContent":null,"Title":"[Darc-Update] Update dependencies from build 20181213.4 of https://github.com/dotnet/arcade","State":"closed","Body":"","Url":"https://github.com/dotnet/corefx/pull/34082","RelatedDescription":"Closed or merged PR \"[Darc-Update] Update dependencies from build 20181213.4 of https://github.com/dotnet/arcade\" (#34082)"},{"Id":"390919980","IsPullRequest":true,"CreatedAt":"2018-12-14T00:42:01","Actor":"geoffkizer","Number":"34090","RawContent":null,"Title":"HTTP2: Improve SETTINGS handling and other small changes","State":"open","Body":"(1) Send appropriate settings in our initial client settings frame\r\n(2) Add code to parse/validate received settings that we care about\r\n(3) Send initial connection-level window update\r\n(4) Improve exception handling so that failed requests properly get HttpRequestException\r\n(5) Test additions/improvements\r\n\r\nFixes #31295\r\nFixes #31704\r\nFixes #31394\r\nFixes #31520\r\n\r\n@dotnet/ncl","Url":"https://github.com/dotnet/corefx/pull/34090","RelatedDescription":"Open PR \"HTTP2: Improve SETTINGS handling and other small changes\" (#34090)"},{"Id":"391096822","IsPullRequest":false,"CreatedAt":"2018-12-14T00:31:10","Actor":"KevinRansom","Number":"34096","RawContent":null,"Title":"RefEmit does not have the desktop api MarkSequencePoint","State":"open","Body":"In FSI we use **ILGenerator.MarkSequencePoint** to enable debugging of generated code from the in-memory generated assembly.\r\n\r\nWill this be added back, and will debugging coreclr code enable it to work correctly once it has been?\r\n\r\n// @jkotas, @dsyme, @joshfree, @steveharter \r\n","Url":"https://github.com/dotnet/corefx/issues/34096","RelatedDescription":"Open issue \"RefEmit does not have the desktop api MarkSequencePoint\" (#34096)"},{"Id":"390915518","IsPullRequest":true,"CreatedAt":"2018-12-14T00:18:33","Actor":"wfurt","Number":"34089","RawContent":null,"Title":"catch exception in ssl handshake so it can be propagated to async caller","State":"open","Body":"this is related to #33857 and was recommended by @stephentoub.\r\nThis allows to catch IO exception in SSL handshake. \r\n\r\nThere is still issue connecting the site but at least it can be handled now. ","Url":"https://github.com/dotnet/corefx/pull/34089","RelatedDescription":"Open PR \"catch exception in ssl handshake so it can be propagated to async caller\" (#34089)"},{"Id":"390912850","IsPullRequest":true,"CreatedAt":"2018-12-14T00:05:26","Actor":"NattyNarwhal","Number":"34088","RawContent":null,"Title":"Fix ConvertDirent for AIX by always returning PAL_DT_UNKNOWN","State":"open","Body":"I commited the sin of untested code, as this function wasn't wired\r\nup to Mono's BCL until a few days ago, and I had triggered the\r\nsituation where I needed this working by purging stale build\r\nartifacts.\r\n\r\nWhat happened here was me being too clever; I tried stat, but\r\nwe only have the file name, and from the unmanaged call stack this\r\nwould run in, we'd have no way to get the directory it's in\r\n(without butchering the function signature) to properly use stat\r\nfor non-cwd directories. This meant that the check would get random\r\ngarbage on the stack; sometimes the data for \"..\", sometimes\r\nanother function would clobber it, and it'd read that. This caused\r\nthe Mono gensources tool to act erratically, preventing the BCL\r\nfrom building.\r\n\r\nFix this by always returning DT_UNKNOWN. This isn't ideal, but the\r\nBCL seems to handle this with grace and does a stat afterwards\r\nto properly fill in data. It's enough to get the Mono build from\r\nscratch working again. (The stat bit was verified by me running the\r\nsyscall tracing tool, `truss` over it, plus Mono's JIT trace.)","Url":"https://github.com/dotnet/corefx/pull/34088","RelatedDescription":"Open PR \"Fix ConvertDirent for AIX by always returning PAL_DT_UNKNOWN\" (#34088)"},{"Id":"390899631","IsPullRequest":true,"CreatedAt":"2018-12-13T23:08:31","Actor":"333fred","Number":"34087","RawContent":null,"Title":"Renamed Microsoft.VisualBasic to Microsoft.VisualBasic.Core","State":"open","Body":"Part of porting Microsoft.VisualBasic to core. A facade for\r\nMicrosoft.VisualBasic is now generated in place of the original dll so\r\nexisting applications will be able to continue with the same set of\r\nreferences.\r\n\r\n@ericstj and @danmosemsft for review. FYI @jaredpar.","Url":"https://github.com/dotnet/corefx/pull/34087","RelatedDescription":"Open PR \"Renamed Microsoft.VisualBasic to Microsoft.VisualBasic.Core\" (#34087)"},{"Id":"390893532","IsPullRequest":true,"CreatedAt":"2018-12-13T22:46:12","Actor":"wfurt","Number":"34084","RawContent":null,"Title":"avoid processing incorrect ICMP message on Unix","State":"open","Body":"fixes #33699 Ping.Unix falsely returns successful pings\r\n\r\nWhen we use RAW socket implementation we simply create socket to get all ICMP.\r\nWhen there are multiple pings going (even from different process)  the raw socket would receive all ICMP responses and than it can incorrectly report success even for non existing host. \r\n\r\nThis change effectively implements address filtering. Instead of doing it explicitly as discussed in issue, it uses Connect() to ping socket to only that address for Unicast. (similar behavior to UDP)\r\n\r\nI don't know if there is better way to determine multicast (leading 1110) IP for IPv4.\r\n\r\nAside from running tests, I did verify that ping to multicast (224.0.0.1 all nodes) still works as it used to. There is currently not good API to know what nodes responded to the query. So successful response means that there is at least one responding node.\r\n\r\nI also did tests with broadcast and directed broadcast (xx.xx.xx.255) \r\nIt fails with even for root:\r\n\r\n> Unhandled Exception: System.Net.Sockets.SocketException: Permission denied\r\n>    at System.Net.Sockets.Socket.DoBeginSendTo(Byte[] buffer, Int32 offset, Int32 size, SocketFlags socketFlags, EndPoint endPointSnapshot, SocketAddress socketAddress, OverlappedAsyncResult asyncResult)\r\n> \r\n\r\nthis is because we would need to do ioctl to enable broadcast functions on socket. \r\nThis behavior remains same with this change. \r\n\r\n\r\n\r\n\r\n \r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/34084","RelatedDescription":"Open PR \"avoid processing incorrect ICMP message on Unix\" (#34084)"},{"Id":"390878444","IsPullRequest":false,"CreatedAt":"2018-12-13T22:02:47","Actor":"jkoritzinsky","Number":"34083","RawContent":null,"Title":"System.Management uses in-place string modification in interop","State":"open","Body":"While working to block users from intentionally using interop to modify the internal buffer of a `string` to avoid corrupting interned strings and crashing during ALC unloading, I discovered that the `IWbemPath` interface in `System.Management`'s `GetPath_` method has a `[In][Out][MarshalAs(UnmanagedType.LPWStr)] string path` parameter that modifies the string value in-place. We should change this to use an `[In][Out][MarshalAs(UnmanagedType.LPWStr)] StringBuilder path` parameter so we aren't modifying a `string`s internal buffer from native code.\r\n\r\nSee dotnet/coreclr#21513\r\ncc: @AaronRobinsonMSFT, @janvorli ","Url":"https://github.com/dotnet/corefx/issues/34083","RelatedDescription":"Open issue \"System.Management uses in-place string modification in interop\" (#34083)"},{"Id":"390858333","IsPullRequest":false,"CreatedAt":"2018-12-13T21:01:27","Actor":"bartonjs","Number":"34081","RawContent":null,"Title":"Utf8JsonReader should throw when isFinal is true and the first call to Read returns false","State":"open","Body":"json.org's version of the JSON grammar says that a JSON payload has precisely one value.\r\n\r\nCurrently the reader will return false with no exception if no semantic value was present, which I found to be surprising.\r\n\r\n* `ReadOnlySpan<byte>.Empty`\r\n* `new byte[] { 0x20 }`\r\n* Comments: Skip, `Encoding.UTF8.GetBytes(\"// just a comment\")`\r\n* Comments: Skip, `Encoding.UTF8.GetBytes(\"   /* comment and whitespace */     \")`\r\n\r\nAll of these are equivalently \"there was no JSON here\".\r\n\r\nWhile it's possible for the caller to check that Read returned successfully at least once, or that in the final state reader.TokenType is not None; it seems like an easy pit of failure that the reader should report via an exception.\r\n\r\nNaive interpretation is that right before a `return false` in Read() it should add `if (isFinal && TokenType == JsonTokenType.None) throw new JsonReaderException(...);`","Url":"https://github.com/dotnet/corefx/issues/34081","RelatedDescription":"Open issue \"Utf8JsonReader should throw when isFinal is true and the first call to Read returns false\" (#34081)"},{"Id":"390858188","IsPullRequest":false,"CreatedAt":"2018-12-13T21:01:05","Actor":"TylerBrinkley","Number":"34080","RawContent":null,"Title":"Add a PrimaryAttribute type","State":"open","Body":"Split from #15453 \r\n\r\nFor the `Enum` method `GetName` when there are multiple enum members with the same value the name it returns is undefined. I propose adding a `PrimaryAttribute` to be applied to enum members where there is ambiguity which will ensure its name is returned.\r\n\r\n## Proposed API\r\n```c#\r\nnamespace System.ComponentModel {\r\n    public sealed class PrimaryAttribute : Attribute {\r\n        public PrimaryAttribute();\r\n    }\r\n}\r\n```\r\n\r\n## API Details\r\n* The `PrimaryAttribute` is used to specify what enum member to retrieve when there are multiple enum members with the same value. It could be used for more than just enum members for cases in code where there is ambiguity.","Url":"https://github.com/dotnet/corefx/issues/34080","RelatedDescription":"Open issue \"Add a PrimaryAttribute type\" (#34080)"},{"Id":"390854923","IsPullRequest":false,"CreatedAt":"2018-12-13T20:52:08","Actor":"TylerBrinkley","Number":"34079","RawContent":null,"Title":"Add flag Enum methods","State":"open","Body":"Moved from #15453 \r\n\r\nEnums are essential commonly used types but have several areas in need of improvement. There should be better support for flag enums, bit-masked enums with the `FlagsAttribute` applied. Support for enum validation should be improved to support flag enums.\r\n\r\n## Rationale and Usage\r\n1. Support for flag enums is limited to just the `HasFlag` method which isn't type-safe, is inefficient, and is ambiguous as to whether it indicates if the value has all or any of the specified flags. It's also visible to all enum values whether it's a flag enum or not.\r\n2. Built-in support for enum validation is currently limited to the `IsDefined` method which doesn't support flag enum combinations and is inefficient due to a lack of caching of reflection results.\r\n\r\nWhat used to be this to validate a flag enum value\r\n\r\n```c#\r\nMyFlagEnum value = ???;\r\nbool isValid = (value & Enum.GetValues(typeof(MyFlagEnum))\r\n    .Cast<MyFlagEnum>()\r\n    .Aggregate((working, next) => working | next)) == value;\r\n```\r\n\r\nnow becomes just this\r\n\r\n```c#\r\nMyFlagEnum value = ???;\r\nbool isValid = value.IsValidFlagCombination();\r\n```\r\n\r\nWith this implemented it will address #693 and #10908.\r\n\r\n## Proposed API\r\n```diff\r\n namespace System {\r\n     public abstract class Enum : ValueType, IComparable, IConvertible, IFormattable {\r\n-        public bool HasFlag(Enum flag);\r\n+        [Obsolete(\"Use FlagEnum.HasAllFlags or FlagEnum.HasAnyFlags instead\"), EditorBrowsable(EditorBrowsableState.Never)] public bool HasFlag(Enum flag);\r\n+        public static bool IsFlagEnum<TEnum>() where TEnum : struct, Enum;\r\n+        public static bool IsFlagEnum(Type enumType);\r\n     }\r\n }\r\n // Separate namespace and class to make flag enum extension methods' visibility optional\r\n+namespace System.Flags {\r\n+    public static class FlagEnum {\r\n         // Generic API\r\n+        public static TEnum AllFlags<TEnum>() where TEnum : struct, Enum;\r\n+        public static TEnum CombineFlags<TEnum>(this TEnum value, TEnum flags) where TEnum : struct, Enum;\r\n+        public static TEnum CombineFlags<TEnum>(TEnum flag0, TEnum flag1, TEnum flag2) where TEnum : struct, Enum;\r\n+        public static TEnum CombineFlags<TEnum>(TEnum flag0, TEnum flag1, TEnum flag2, TEnum flag3) where TEnum : struct, Enum;\r\n+        public static TEnum CombineFlags<TEnum>(TEnum flag0, TEnum flag1, TEnum flag2, TEnum flag3, TEnum flag4) where TEnum : struct, Enum;\r\n+        public static TEnum CombineFlags<TEnum>(params TEnum[] flags) where TEnum : struct, Enum;\r\n+        public static TEnum CombineFlags<TEnum>(IEnumerable<TEnum> flags) where TEnum : struct, Enum;\r\n+        public static TEnum CommonFlags<TEnum>(this TEnum value, TEnum flags) where TEnum : struct, Enum;\r\n+        public static IEnumerable<TEnum> GetFlags<TEnum>(this TEnum value) where TEnum : struct, Enum;\r\n+        public static bool HasAllFlags<TEnum>(this TEnum value) where TEnum : struct, Enum;\r\n+        public static bool HasAllFlags<TEnum>(this TEnum value, TEnum flags) where TEnum : struct, Enum;\r\n+        public static bool HasAnyFlags<TEnum>(this TEnum value) where TEnum : struct, Enum;\r\n+        public static bool HasAnyFlags<TEnum>(this TEnum value, TEnum flags) where TEnum : struct, Enum;\r\n+        public static bool IsValidFlagCombination<TEnum>(this TEnum value) where TEnum : struct, Enum;\r\n+        public static TEnum RemoveFlags<TEnum>(this TEnum value, TEnum flags) where TEnum : struct, Enum;\r\n\r\n         // Non-Generic API\r\n+        public static object AllFlags(Type enumType);\r\n+        public static object CombineFlags(Type enumType, object value, object flags);\r\n+        public static object CombineFlags(Type enumType, params object[] flags);\r\n+        public static object CombineFlags(Type enumType, IEnumerable<object> flags);\r\n+        public static object CommonFlags(Type enumType, object value, object flags);\r\n+        public static IEnumerable<object> GetFlags(Type enumType, object value);\r\n+        public static bool HasAllFlags(Type enumType, object value);\r\n+        public static bool HasAllFlags(Type enumType, object value, object flags);\r\n+        public static bool HasAnyFlags(Type enumType, object value);\r\n+        public static bool HasAnyFlags(Type enumType, object value, object flags);\r\n+        public static bool IsValidFlagCombination(Type enumType, object value);\r\n+        public static object RemoveFlags(Type enumType, object value, object flags);\r\n+    }\r\n+}\r\n```\r\n\r\n## API Details\r\n### `Enum` API Details\r\n* `HasFlag` is being deprecated as it's ambiguous and clutters up the intellisense as it's always accessible to all enum values. Using `System.Flags.FlagEnum.HasAllFlags` removes the naming ambiguity and since it's in a separate namespace it'll only be visible within a source file when the file explicitly includes `System.Flags`.\r\n* `IsFlagEnum` indicates if the enum has the `FlagsAttribute` applied.\r\n\r\n### `FlagEnum` API Details\r\nThe flag enum operations are defined in the separate `FlagEnum` class in the `System.Flags` namespace to make flag enum extension methods' visibility optional.\r\n\r\n* `CombineFlags` returns the bitwise OR of the values. The name was chosen as it mirrors the naming of `Delegate.Combine`.\r\n* `CommonFlags` returns the bitwise AND of the values.\r\n* `AllFlags` returns all enum members' values that are powers of two bitwise ORed together.\r\n* `GetFlags` retrieves each valid flag included in the value in increasing significance bit order.\r\n* `HasAllFlags` indicates if the value contains all of the specified flags, equivalent to the current `HasFlag`.\r\n* `HasAnyFlags` indicates if the value contains any of the specified flags.\r\n* `IsValidFlagCombination` is defined as `(value & AllFlags) == value`.\r\n* `RemoveFlags` returns value with all of the specified flags removed and is defined as `(value & (~flags))`. The name was chosen as it mirrors the naming of `Delegate.Remove`.\r\n\r\n## Implementation Details\r\nUtilizes performance improved implementation from #15453.\r\n\r\n## Open Questions\r\n* Should the `FlagEnum` class members be instead moved into `System.Enum` and their extension methods would then be visible on all enum values?","Url":"https://github.com/dotnet/corefx/issues/34079","RelatedDescription":"Open issue \"Add flag Enum methods\" (#34079)"}],"ResultType":"GitHubIssue"},"Roslyn-Issues":{"Issues":[{"Id":"391344004","IsPullRequest":true,"CreatedAt":"2018-12-15T04:42:29","Actor":"jcouv","Number":"31813","RawContent":null,"Title":"Use speakable annotations in method type re-inference","State":"open","Body":"Fixes https://github.com/dotnet/roslyn/issues/31557","Url":"https://github.com/dotnet/roslyn/pull/31813","RelatedDescription":"Open PR \"Use speakable annotations in method type re-inference\" (#31813)"},{"Id":"391340224","IsPullRequest":true,"CreatedAt":"2018-12-15T03:37:17","Actor":"alrz","Number":"31812","RawContent":null,"Title":"Add feature to convert switch statement to switch expression","State":"open","Body":"This is still a work in progress. opened the PR early to get feedback. thanks.\r\n\r\n","Url":"https://github.com/dotnet/roslyn/pull/31812","RelatedDescription":"Open PR \"Add feature to convert switch statement to switch expression\" (#31812)"},{"Id":"391282998","IsPullRequest":true,"CreatedAt":"2018-12-15T02:00:04","Actor":"dotnet-bot","Number":"31800","RawContent":null,"Title":"Merge master to master-vs-deps","State":"closed","Body":"\nThis is an automatically generated pull request from master into master-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-master-vs-deps\ngit reset --hard upstream/master-vs-deps\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push merges/master-to-master-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/31800","RelatedDescription":"Closed or merged PR \"Merge master to master-vs-deps\" (#31800)"},{"Id":"391318195","IsPullRequest":true,"CreatedAt":"2018-12-15T01:00:04","Actor":"dotnet-bot","Number":"31808","RawContent":null,"Title":"Merge master to features/editorconfig-in-compiler","State":"closed","Body":"\nThis is an automatically generated pull request from master into features/editorconfig-in-compiler.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-features/editorconfig-in-compiler\ngit reset --hard upstream/features/editorconfig-in-compiler\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push merges/master-to-features/editorconfig-in-compiler --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/31808","RelatedDescription":"Closed or merged PR \"Merge master to features/editorconfig-in-compiler\" (#31808)"},{"Id":"391324856","IsPullRequest":true,"CreatedAt":"2018-12-15T00:46:02","Actor":"ivanbasov","Number":"31811","RawContent":null,"Title":"consume NoSideEffects flag in EE","State":"open","Body":"This is a draft to confirm the idea of the change. Once confirmed, tests should be added:\r\n* https://github.com/dotnet/roslyn/blob/master/src/ExpressionEvaluator/CSharp/Test/ResultProvider/ExpansionTests.cs\r\n* https://github.com/dotnet/roslyn/blob/master/src/ExpressionEvaluator/VisualBasic/Test/ResultProvider/ExpansionTests.vb","Url":"https://github.com/dotnet/roslyn/pull/31811","RelatedDescription":"Open PR \"consume NoSideEffects flag in EE\" (#31811)"},{"Id":"391323092","IsPullRequest":false,"CreatedAt":"2018-12-15T00:31:27","Actor":"JoeRobich","Number":"31810","RawContent":null,"Title":"[Flaky] PreviewChangesTests.TestLinkedFileChangesMergedAndDeduplicated failed","State":"open","Body":"[Build Logs](https://dnceng.visualstudio.com/public/_build/results?buildId=58877&view=logs) Attempt 1\r\n\r\nTest Log:\r\n```\r\nSystem.AggregateException : One or more errors occurred.\\r\\n---- System.NullReferenceException : Object reference not set to an instance of an object.\r\n   at System.Threading.Tasks.Task.ThrowIfExceptional(Boolean includeTaskCanceledExceptions)\r\n   at System.Threading.Tasks.Task`1.GetResultCore(Boolean waitCompletionNotification)\r\n   at System.Threading.Tasks.Task`1.get_Result()\r\n   at Microsoft.VisualStudio.LanguageServices.Implementation.Preview.PreviewEngine..ctor(IThreadingContext threadingContext, String title, String helpString, String description, String topLevelItemName, Glyph topLevelGlyph, Solution newSolution, Solution oldSolution, IComponentModel componentModel, IVsImageService2 imageService, Boolean showCheckBoxes) in /_/src/VisualStudio/Core/Def/Implementation/Preview/PreviewEngine.cs:line 67\r\n   at Microsoft.VisualStudio.LanguageServices.Implementation.Preview.PreviewEngine..ctor(IThreadingContext threadingContext, String title, String helpString, String description, String topLevelItemName, Glyph topLevelGlyph, Solution newSolution, Solution oldSolution, IComponentModel componentModel, Boolean showCheckBoxes) in /_/src/VisualStudio/Core/Def/Implementation/Preview/PreviewEngine.cs:line 44\r\n   at Microsoft.VisualStudio.LanguageServices.UnitTests.Preview.PreviewChangesTests.TestLinkedFileChangesMergedAndDeduplicated() in /_/src/VisualStudio/Core/Test/Preview/PreviewChangesTests.vb:line 292\r\n----- Inner Stack Trace -----\r\n   at Microsoft.CodeAnalysis.LinkedFileDiffMergingSession.<MergeLinkedDocumentGroupAsync>d__6.MoveNext() in /_/src/Workspaces/Core/Portable/LinkedFileDiffMerging/LinkedFileDiffMergingSession.cs:line 116\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1.ConfiguredTaskAwaiter.GetResult()\r\n   at Microsoft.CodeAnalysis.LinkedFileDiffMergingSession.<MergeDiffsAsync>d__5.MoveNext() in /_/src/Workspaces/Core/Portable/LinkedFileDiffMerging/LinkedFileDiffMergingSession.cs:line 58\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1.ConfiguredTaskAwaiter.GetResult()\r\n   at Microsoft.CodeAnalysis.Solution.<WithMergedLinkedFileChangesAsync>d__91.MoveNext() in /_/src/Workspaces/Core/Portable/Workspace/Solution/Solution.cs:line 1002\r\n```","Url":"https://github.com/dotnet/roslyn/issues/31810","RelatedDescription":"Open issue \"[Flaky] PreviewChangesTests.TestLinkedFileChangesMergedAndDeduplicated failed\" (#31810)"},{"Id":"391284202","IsPullRequest":true,"CreatedAt":"2018-12-15T00:24:13","Actor":"sharwell","Number":"31801","RawContent":null,"Title":"Format documents in solution","State":"closed","Body":"This is a mop-up PR to address formatting violations introduced between #31652 and #31142.","Url":"https://github.com/dotnet/roslyn/pull/31801","RelatedDescription":"Closed or merged PR \"Format documents in solution\" (#31801)"},{"Id":"391319819","IsPullRequest":true,"CreatedAt":"2018-12-15T00:10:34","Actor":"mavasani","Number":"31809","RawContent":null,"Title":"Fix an assert in unused members analyzer for newly added IReDimClause…","State":"open","Body":"…Operation\r\n\r\nFound while dogfooding latest bits","Url":"https://github.com/dotnet/roslyn/pull/31809","RelatedDescription":"Open PR \"Fix an assert in unused members analyzer for newly added IReDimClause…\" (#31809)"},{"Id":"391318112","IsPullRequest":false,"CreatedAt":"2018-12-15T00:02:26","Actor":"gafter","Number":"31807","RawContent":null,"Title":"Need SemanticModel tests for target-typed new","State":"closed","Body":"From https://github.com/dotnet/roslyn/pull/25196#discussion_r207653156","Url":"https://github.com/dotnet/roslyn/issues/31807","RelatedDescription":"Closed issue \"Need SemanticModel tests for target-typed new\" (#31807)"},{"Id":"391083514","IsPullRequest":true,"CreatedAt":"2018-12-15T00:00:05","Actor":"dotnet-bot","Number":"31793","RawContent":null,"Title":"Merge master to features/editorconfig-in-compiler","State":"closed","Body":"\nThis is an automatically generated pull request from master into features/editorconfig-in-compiler.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-features/editorconfig-in-compiler\ngit reset --hard upstream/features/editorconfig-in-compiler\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push merges/master-to-features/editorconfig-in-compiler --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/31793","RelatedDescription":"Closed or merged PR \"Merge master to features/editorconfig-in-compiler\" (#31793)"},{"Id":"390990613","IsPullRequest":false,"CreatedAt":"2018-12-14T23:35:22","Actor":"IanKemp","Number":"31790","RawContent":null,"Title":"Proposal: Replace string.Format with concatenation when the string uses only nameof","State":"closed","Body":"#11259 and #22344 proposed additional rules under which `string.Format` (and implictly string interpolation) can be optimised away. Due to the [not superficially obvious issues with calling `ToString()`](https://github.com/dotnet/roslyn/pull/6738#issuecomment-156257037), these proposals have effectively languished.\r\n\r\nThis proposal (identical to the closed #17356) covers only the most simple of the cases discussed above: when a string being formatted **contains only constant strings and `nameof` expressions**. In that case, **and only that case**, it is completely safe to strip out the format call and replace it with with simple concatenation.\r\n\r\nExample:\r\n\r\n```csharp\r\nclass Foo\r\n{\r\n    const string Bar = $\"My method is named { nameof(Main) }\";\r\n\r\n    void Main()\r\n    {\r\n    }\r\n}\r\n```\r\n\r\nHere, `Bar` can be rewritten to:\r\n\r\n```csharp\r\nconst string Bar = \"My method is named \" + nameof(Main);\r\n```\r\n\r\nwhich is compiled to:\r\n\r\n```csharp\r\nconst string Bar = \"My method is named Main\";\r\n```\r\n\r\nThis is currently prohibited by the compiler since this optimisation is not performed.","Url":"https://github.com/dotnet/roslyn/issues/31790","RelatedDescription":"Closed issue \"Proposal: Replace string.Format with concatenation when the string uses only nameof\" (#31790)"},{"Id":"391313442","IsPullRequest":true,"CreatedAt":"2018-12-14T23:31:32","Actor":"AlekseyTs","Number":"31806","RawContent":null,"Title":"Add support for restore and safeonly for #nullable directive.","State":"open","Body":"Related to #31130.","Url":"https://github.com/dotnet/roslyn/pull/31806","RelatedDescription":"Open PR \"Add support for restore and safeonly for #nullable directive.\" (#31806)"},{"Id":"391312638","IsPullRequest":false,"CreatedAt":"2018-12-14T23:27:00","Actor":"gafter","Number":"31805","RawContent":null,"Title":"Fix spec comment in IsValidObjectEquality","State":"open","Body":"There is a spec quote in a comment at the beginning of `IsValidObjectEquality`, which then describes deviances from the spec.  However, if the quote is changed to quote the ECMA spec, there are no deviances from the spec.  The comment should be changed to quote ECMA.","Url":"https://github.com/dotnet/roslyn/issues/31805","RelatedDescription":"Open issue \"Fix spec comment in IsValidObjectEquality\" (#31805)"},{"Id":"391133011","IsPullRequest":true,"CreatedAt":"2018-12-14T23:14:37","Actor":"mavasani","Number":"31794","RawContent":null,"Title":"Fix the action registration for unused parameters analyzer to ensure …","State":"closed","Body":"…no duplicate diagnostics are reported\r\n\r\nFixes #31381 \r\nFixes #31743\r\n\r\nThis repros intermittently based on the ordering of symbol end action callbacks, so it is not possible to add a reliable regression test.","Url":"https://github.com/dotnet/roslyn/pull/31794","RelatedDescription":"Closed or merged PR \"Fix the action registration for unused parameters analyzer to ensure …\" (#31794)"},{"Id":"391306592","IsPullRequest":false,"CreatedAt":"2018-12-14T22:56:11","Actor":"gafter","Number":"31804","RawContent":null,"Title":"Typeless expressions in GetEnumeratorInfo","State":"open","Body":"The method `ForEachLoopBinder.GetEnumeratorInfo` has the following in it:\r\n\r\n``` c#\r\n                    // The null and default literals were caught above, so anything else with a null type is a method group or anonymous function\r\n                    diagnostics.Add(ErrorCode.ERR_AnonMethGrpInForEach, _syntax.Expression.Location, collectionExpr.Display);\r\n```\r\n\r\nBut this is just wrong (e.g. `(1, null)` has no type), and in any case is incredibly fragile to future compiler changes.  It should be made robust to new expression kinds that can be null.\r\n","Url":"https://github.com/dotnet/roslyn/issues/31804","RelatedDescription":"Open issue \"Typeless expressions in GetEnumeratorInfo\" (#31804)"},{"Id":"391300420","IsPullRequest":false,"CreatedAt":"2018-12-14T22:27:27","Actor":"praeclarum","Number":"31803","RawContent":null,"Title":"Nullability: Failed pattern match makes compiler think variable is nullable","State":"open","Body":"In the following code:\r\n\r\n```csharp\r\nclass Shape { public void Draw() {} }\r\nclass Circle : Shape {}\r\n\r\nShape shape = CreateShape ();\r\nif (shape is Circle c) { }\r\nelse {\r\n  shape.Draw(); // CS8602\r\n}\r\n```\r\n\r\nThe warning is raised even though the variable `shape` was declared non-nullable.\r\n\r\n**Version Used**: .NET Core 3.0.100-preview-009812\r\n\r\n**Expected Behavior**: Compiles OK.\r\n\r\n**Actual Behavior**: Error CS8602","Url":"https://github.com/dotnet/roslyn/issues/31803","RelatedDescription":"Open issue \"Nullability: Failed pattern match makes compiler think variable is nullable\" (#31803)"},{"Id":"391299548","IsPullRequest":false,"CreatedAt":"2018-12-14T22:23:32","Actor":"praeclarum","Number":"31802","RawContent":null,"Title":"Nullability doesn't recognize assignment to new objects after null check","State":"open","Body":"In the following code:\r\n\r\n```csharp\r\nPolygonTreeNodeList? backnodes = ...;\r\nif (backnodes == null) backnodes = new PolygonTreeNodeList();\r\nbacknodes.Add(this); // CS8602\r\n```\r\n\r\nThe error is raised even though the data flow seems pretty straightforward. It would be nice if no warning was emitted here.\r\n\r\n**Version Used**: .NET Core 3.0.100-preview-009812\r\n\r\n**Expected Behavior**: Compiles OK.\r\n\r\n**Actual Behavior**: Error CS8602","Url":"https://github.com/dotnet/roslyn/issues/31802","RelatedDescription":"Open issue \"Nullability doesn't recognize assignment to new objects after null check\" (#31802)"},{"Id":"391273514","IsPullRequest":true,"CreatedAt":"2018-12-14T20:47:25","Actor":"sharwell","Number":"31799","RawContent":null,"Title":"Clean the per-project assembly attributes files","State":"open","Body":"@tmat This was an oversight on my part that caused the warnings. Your Arcade PR did not introduce the build warnings.\r\n\r\nThis should probably be migrated to Arcade (https://github.com/dotnet/arcade/issues/1588).","Url":"https://github.com/dotnet/roslyn/pull/31799","RelatedDescription":"Open PR \"Clean the per-project assembly attributes files\" (#31799)"},{"Id":"391229553","IsPullRequest":false,"CreatedAt":"2018-12-14T19:05:07","Actor":"cston","Number":"31798","RawContent":null,"Title":"Improve nullability mismatch warning for conversion involving user-defined operator","State":"open","Body":"Consider improving the warning to reference the user-defined operator:\r\n```c#\r\nclass A<T> { }\r\n\r\nclass B\r\n{\r\n    public static implicit operator B(A<object> a) => throw null;\r\n}\r\n\r\nclass Program\r\n{\r\n    static void F(B b) { }\r\n\r\n    static void Main()\r\n    {\r\n        var a = new A<object?>();\r\n        F(a); // warning\r\n    }\r\n}\r\n```\r\n```\r\n(15,11): warning CS8620: Nullability of reference types in argument of type 'A<object?>'\r\n    doesn't match target type 'A<object>' for parameter 'b' in 'void Program.F(B b)'.\r\n```\r\nSee https://github.com/dotnet/roslyn/pull/31771#discussion_r241617155.","Url":"https://github.com/dotnet/roslyn/issues/31798","RelatedDescription":"Open issue \"Improve nullability mismatch warning for conversion involving user-defined operator\" (#31798)"},{"Id":"391148642","IsPullRequest":true,"CreatedAt":"2018-12-14T16:35:07","Actor":"sharwell","Number":"31796","RawContent":null,"Title":"Use SetUpEditor instead of SetText","State":"closed","Body":"This change updates the initialization of `BasicNavigationBar` to match the behavior of `CSharpNavigationBar`. The latter is historically more reliable so this may improve the reliability of `VerifyNavBar`.","Url":"https://github.com/dotnet/roslyn/pull/31796","RelatedDescription":"Closed or merged PR \"Use SetUpEditor instead of SetText\" (#31796)"},{"Id":"391169686","IsPullRequest":false,"CreatedAt":"2018-12-14T16:04:20","Actor":"shaggygi","Number":"31797","RawContent":null,"Title":"Cannot load Analyzers programatically from MSBuildWorkspace","State":"open","Body":"**Version Used**: \r\nVS 2017 (15.9.4)\r\n\r\nScenario:\r\n\r\nCreate a new .NET command-line project.\r\nAdd latest Microsoft.Build.Locator Nuget to project.\r\nAdd latest Microsoft.CodeAnalysis and StyleCop.Analyzers Nuget to project.\r\nProject now has 4 Analyzer references:\r\n\r\n```\r\nMicrosoft.CodeAnalysis.Analyzers\r\nMicrosoft.CodeAnalysis.CSharp.Analyzers\r\nStyleCop.Analyzers\r\nStyleCop.Analyzers.CodeFixes\r\n\r\n// Add the following code to the project and run it:\r\nMSBuildLocator.RegisterDefaults();\r\nvar workspace = MSBuildWorkspace.Create();\r\nvar project = await workspace.OpenProjectAsync(projectPath);\r\n\r\nvar allLanguageAnalyzers = project.AnalyzerReferences.SelectMany(r => r.GetAnalyzersForAllLanguages());\r\nvar languageSpecificAnalyzers = project.AnalyzerReferences.SelectMany(r => r.GetAnalyzers(project.Language));\r\n```\r\n\r\nWhere projectPath is the path to this project.\r\n\r\nExpectations:\r\n\r\nallLanguageAnalyzers is not empty\r\nlanguageSpecificAnalyzers is not empty\r\nActual Results:\r\n\r\nallLanguageAnalyzers is empty\r\nlanguageSpecificAnalyzers is empty\r\n\r\nThis might be similar to [this older issue](https://github.com/dotnet/roslyn/issues/7654), but not sure, so I'm pinging the following for help.\r\n\r\n@yaakov-h\r\n@jmarolf\r\n@davkean \r\n@sharwell \r\n\r\n","Url":"https://github.com/dotnet/roslyn/issues/31797","RelatedDescription":"Open issue \"Cannot load Analyzers programatically from MSBuildWorkspace\" (#31797)"},{"Id":"391144929","IsPullRequest":false,"CreatedAt":"2018-12-14T15:01:46","Actor":"jnm2","Number":"31795","RawContent":null,"Title":"'Introduce local' in anonymous type adds redundant generic parameters qualified from global::","State":"open","Body":"Visual Studio 2019 Preview 1.1\r\n\r\nIf you select `d.Values` and choose \"Introduce local for 'd.Values'\":\r\n\r\n```c#\r\nvar d = new Dictionary<int, List<Guid>>();\r\n\r\n_ = new\r\n{\r\n    a = d.Values.Where(l => l.Count == 1).ToList(),\r\n    b = d.Values.Where(l => l.Count > 1).ToList()\r\n};\r\n```\r\nIt inserts four unnecessary occurrences of `<global::System.Collections.Generic.List<global::System.Guid>>`:\r\n\r\n```cs\r\nvar d = new Dictionary<int, List<Guid>>();\r\n\r\nvar values = d.Values;\r\n_ = new\r\n{\r\n    a = values.Where<global::System.Collections.Generic.List<global::System.Guid>>(l => l.Count == 1).ToList<global::System.Collections.Generic.List<global::System.Guid>>(),\r\n    b = d.Values.Where<global::System.Collections.Generic.List<global::System.Guid>>(l => l.Count > 1).ToList<global::System.Collections.Generic.List<global::System.Guid>>()\r\n};\r\n```","Url":"https://github.com/dotnet/roslyn/issues/31795","RelatedDescription":"Open issue \"'Introduce local' in anonymous type adds redundant generic parameters qualified from global::\" (#31795)"},{"Id":"390973908","IsPullRequest":true,"CreatedAt":"2018-12-14T13:32:29","Actor":"sharwell","Number":"31789","RawContent":null,"Title":"Minimize all before starting integration tests on CI","State":"closed","Body":"","Url":"https://github.com/dotnet/roslyn/pull/31789","RelatedDescription":"Closed or merged PR \"Minimize all before starting integration tests on CI\" (#31789)"},{"Id":"391083484","IsPullRequest":true,"CreatedAt":"2018-12-14T13:00:06","Actor":"dotnet-bot","Number":"31792","RawContent":null,"Title":"Merge master to master-vs-deps","State":"closed","Body":"\nThis is an automatically generated pull request from master into master-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-master-vs-deps\ngit reset --hard upstream/master-vs-deps\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push merges/master-to-master-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/31792","RelatedDescription":"Closed or merged PR \"Merge master to master-vs-deps\" (#31792)"},{"Id":"391043791","IsPullRequest":false,"CreatedAt":"2018-12-14T10:03:45","Actor":"Otiel","Number":"31791","RawContent":null,"Title":"Support regex syntax highlighting in static Regex methods like Regex.Match()","State":"open","Body":"It has been announced on 2018-12-13 on the [_Visual Studio 2019 Preview .NET Productivity_ blog post](https://blogs.msdn.microsoft.com/dotnet/2018/12/13/visual-studio-2019-net-productivity/):\r\n>Any regular expressions in your C# or Visual Basic files now have syntax highlighting, compiler diagnostics, and code fixes! This parsing support can recognize strings passed to the regex constructor and strings immediately preceded with a comment containing the string `language=regex`. The language features currently included in this release are classification, brace matching, highlight references, and compiler diagnostics.\r\n\r\nFollowing up a comment by _MgSm88_ on this blog post:\r\n>Does the Regex syntax support include the static Regex methods, like `Regex.Match()`? `new Regex()` is a borderline anti-pattern given that regexes will not be cached using them that way.\r\n\r\nThis issue is to track the implementation of regex syntax highlighting, compiler diagnostics and code fixes on static Regex methods like `Regex.Match()`.","Url":"https://github.com/dotnet/roslyn/issues/31791","RelatedDescription":"Open issue \"Support regex syntax highlighting in static Regex methods like Regex.Match()\" (#31791)"},{"Id":"390972238","IsPullRequest":false,"CreatedAt":"2018-12-14T05:28:32","Actor":"davkean","Number":"31788","RawContent":null,"Title":"CSharpAddImportCodeFixProvider crashed when you have two variables with same name","State":"open","Body":"``` C#\r\n        [Fact]\r\n        public async Task QueryDebugTargetsAsync_ConsoleAppLaunchWithNoDebuggerIntegratedConsole_DoesNotWrapInCmd()\r\n        {\r\n            var debugger = IVsDebugger10Factory.ImplementIsIntegratedConsoleEnabled(enabled: true);\r\n            var properties = new Dictionary<string, string>() {\r\n                {\"TargetPath\", @\"C:\\ConsoleApp.exe\"},\r\n                {\"TargetFrameworkIdentifier\", @\".NETFramework\" }\r\n                };\r\n\r\n            var debugger = GetDebugTargetsProvider(\"exe\", properties, debugger);\r\n\r\n            var activeProfile = new LaunchProfile() { Name = \"Name\", CommandName = \"Project\" };\r\n\r\n            var result = await debugger.QueryDebugTargetsAsync(DebugLaunchOptions.NoDebug, activeProfile);\r\n\r\n            Assert.Single(result);\r\n            Assert.Contains(\"cmd.exe\", result[0].Executable);\r\n        }\r\n```\r\n\r\n\r\n```\r\nSystem.InvalidCastException : Unable to cast object of type 'Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax' to type 'Microsoft.CodeAnalysis.CSharp.Syntax.AwaitExpressionSyntax'.\r\n   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxFactsService.GetExpressionOfAwaitExpression(SyntaxNode node)\r\n   at Microsoft.CodeAnalysis.AddImport.AbstractAddImportFeatureService`1.GetAwaitInfo(SemanticModel semanticModel,ISyntaxFactsService syntaxFactsService,SyntaxNode node,CancellationToken cancellationToken)\r\n   at async Microsoft.CodeAnalysis.AddImport.AbstractAddImportFeatureService`1.SymbolReferenceFinder.GetReferencesForGetAwaiterAsync[TSimpleNameSyntax](<Unknown Parameters>)\r\n   at async Microsoft.CodeAnalysis.AddImport.AbstractAddImportFeatureService`1.SymbolReferenceFinder.DoAsync[TSimpleNameSyntax](<Unknown Parameters>)\r\n   at async Microsoft.CodeAnalysis.AddImport.AbstractAddImportFeatureService`1.FindResultsInAllSymbolsInStartingProjectAsync[TSimpleNameSyntax](<Unknown Parameters>)\r\n   at async Microsoft.CodeAnalysis.AddImport.AbstractAddImportFeatureService`1.FindResultsAsync[TSimpleNameSyntax](<Unknown Parameters>)\r\n   at async Microsoft.CodeAnalysis.AddImport.AbstractAddImportFeatureService`1.FindResultsAsync[TSimpleNameSyntax](<Unknown Parameters>)\r\n   at async Microsoft.CodeAnalysis.AddImport.AbstractAddImportFeatureService`1.GetFixesInCurrentProcessAsync[TSimpleNameSyntax](<Unknown Parameters>)\r\n   at async Microsoft.CodeAnalysis.AddImport.AbstractAddImportFeatureService`1.GetFixesAsync[TSimpleNameSyntax](<Unknown Parameters>)\r\n   at async Microsoft.CodeAnalysis.AddImport.AbstractAddImportFeatureService`1.GetFixesForDiagnosticsAsync[TSimpleNameSyntax](<Unknown Parameters>)\r\n   at async Microsoft.CodeAnalysis.AddImport.AbstractAddImportCodeFixProvider.RegisterCodeFixesAsync(<Unknown Parameters>)\r\n   at async Microsoft.CodeAnalysis.Extensions.IExtensionManagerExtensions.PerformActionAsync(<Unknown Parameters>)\r\n   at Microsoft.VisualStudio.Telemetry.WindowsErrorReporting.WatsonReport.GetClrWatsonExceptionInfo(Exception exceptionObject)\r\n```","Url":"https://github.com/dotnet/roslyn/issues/31788","RelatedDescription":"Open issue \"CSharpAddImportCodeFixProvider crashed when you have two variables with same name\" (#31788)"},{"Id":"390970783","IsPullRequest":true,"CreatedAt":"2018-12-14T05:27:31","Actor":"sharwell","Number":"31787","RawContent":null,"Title":"Force cancellation if switching to UI thread completed after cancellation request","State":"open","Body":"This issue was discovered by @jasonmalinowski while investigating #30661.\r\n\r\nTo ensure the issue does not affect other code, the changes in 2c85db1c were audited and updated to ensure code does not continue executing after a cancellation request.\r\n\r\nFixes #30661","Url":"https://github.com/dotnet/roslyn/pull/31787","RelatedDescription":"Open PR \"Force cancellation if switching to UI thread completed after cancellation request\" (#31787)"},{"Id":"390967483","IsPullRequest":true,"CreatedAt":"2018-12-14T05:08:04","Actor":"sharwell","Number":"31786","RawContent":null,"Title":"Hide the start page to improve test performance","State":"open","Body":"","Url":"https://github.com/dotnet/roslyn/pull/31786","RelatedDescription":"Open PR \"Hide the start page to improve test performance\" (#31786)"},{"Id":"390966450","IsPullRequest":true,"CreatedAt":"2018-12-14T05:01:26","Actor":"agocke","Number":"31785","RawContent":null,"Title":"Add Span and Memory conversion methods for ImmutableArray","State":"open","Body":"","Url":"https://github.com/dotnet/roslyn/pull/31785","RelatedDescription":"Open PR \"Add Span and Memory conversion methods for ImmutableArray\" (#31785)"},{"Id":"390932272","IsPullRequest":false,"CreatedAt":"2018-12-14T01:45:00","Actor":"NickCraver","Number":"31784","RawContent":null,"Title":"Convert to LINQ (call form) generates extra .Select() overhead","State":"open","Body":"**Version Used**: VS 2019 Preview 1\r\n\r\nRelated to #31780. An example of this in action:\r\n![image](https://user-images.githubusercontent.com/454813/49978116-ffc0f800-ff16-11e8-935e-21542ab1b8c0.png)\r\n\r\n**Steps to Reproduce**:\r\n```#\r\n// Boilerplate\r\nprivate static readonly List<string> _items = Enumerable.Range(0, 50000).Select(i => \"Num\" + i).ToList();\r\n```\r\n\r\n1. Enter the following code:\r\n```c#\r\nforeach (var item in _items)\r\n{\r\n    if (item.Length < 3)\r\n    {\r\n        yield return item;\r\n    }\r\n}\r\n```\r\n2. Check suggestions and select \"Convert to LINQ (call form)\r\n\r\n**Expected Behavior**:\r\nGenerated code would be:\r\n```c#\r\n_items.Where(item => item.Length < 3).Consume(consumer);\r\n```\r\n\r\n**Actual Behavior**:\r\nGenerated code is:\r\n```c#\r\n_items.Where(item => item.Length < 3).Select(item => item).Consume(consumer);\r\n```\r\n\r\nIt would seen the `.Select(...)` is part of an always-generated formula, but it could be better here. There's overhead involved in the call - so can we avoid that overhead in the generated code?\r\n\r\nSample benchmarks:\r\n```c#\r\nprivate static readonly List<string> _items = Enumerable.Range(0, 50000).Select(i => \"Num\" + i).ToList();\r\nprivate readonly Consumer consumer = new Consumer();\r\n\r\n[Benchmark(Description = \"foreach\")]\r\npublic void ForEach()\r\n{\r\n    IEnumerable<string> Inner()\r\n    {\r\n        foreach (var item in _items)\r\n        {\r\n            if (item.Length < 3)\r\n            {\r\n                yield return item;\r\n            }\r\n        }\r\n    }\r\n    Inner().Consume(consumer);\r\n}\r\n\r\n[Benchmark(Description = \"LINQ (call form)\")]\r\npublic void LINQCallForm()\r\n{\r\n    _items.Where(item => item.Length < 3).Select(item => item).Consume(consumer);\r\n}\r\n\r\n[Benchmark(Description = \"LINQ (call form optimal)\")]\r\npublic void LINQCallFormOptimal()\r\n{\r\n    _items.Where(item => item.Length < 3).Consume(consumer);\r\n}\r\n```\r\n\r\n|                     Method |  Job | Runtime |     Mean |    Error |   StdDev | Allocated Memory/Op |\r\n|--------------------------- |----- |-------- |---------:|---------:|---------:|--------------------:|\r\n|                    foreach |  Clr |     Clr | 262.0 us | 3.138 us | 2.782 us |                60 B |\r\n|         'LINQ (call form)' |  Clr |     Clr | 401.6 us | 1.783 us | 1.580 us |               156 B |\r\n| 'LINQ (call form optimal)' |  Clr |     Clr | 363.8 us | 3.123 us | 2.769 us |                76 B |\r\n|                    foreach | Core |    Core | 233.4 us | 1.989 us | 1.861 us |                56 B |\r\n|         'LINQ (call form)' | Core |    Core | 543.7 us | 4.368 us | 4.086 us |               152 B |\r\n| 'LINQ (call form optimal)' | Core |    Core | 549.4 us | 8.623 us | 7.644 us |                72 B |\r\n\r\nNote: the performance on Core is within the margin of error and note the minimal jitter- it's always equal or faster. The allocations are always higher. [Benchmarks are in a repo here](https://github.com/NickCraver/PerfBenchmarks/blob/0b98537fd20d807ab1766a67f1417ffea47d6e4a/Benchmarks/LINQLoops.cs)\r\n\r\nTo run:\r\n```ps\r\ncd Benchmarks\r\ndotnet run -c Release -f netcoreapp2.2 -- LINQLoop\r\n```","Url":"https://github.com/dotnet/roslyn/issues/31784","RelatedDescription":"Open issue \"Convert to LINQ (call form) generates extra .Select() overhead\" (#31784)"}],"ResultType":"GitHubIssue"},"CoreRT-Issues":{"Issues":[{"Id":"391298312","IsPullRequest":true,"CreatedAt":"2018-12-14T22:18:14","Actor":"MarcoRossignoli","Number":"6687","RawContent":null,"Title":"[ILVerify]Added more tests","State":"open","Body":"Added some new tests to new type check.\r\n\r\n/cc @jkotas ","Url":"https://github.com/dotnet/corert/pull/6687","RelatedDescription":"Open PR \"[ILVerify]Added more tests\" (#6687)"},{"Id":"390931623","IsPullRequest":true,"CreatedAt":"2018-12-14T01:41:28","Actor":"Dotnet-GitSync-Bot","Number":"6686","RawContent":null,"Title":"Mirror changes from dotnet/corefx","State":"open","Body":"This PR contains mirrored changes from dotnet/corefx\n\n\n**Please REBASE this PR when merging**\n\n cc @mattwarren","Url":"https://github.com/dotnet/corert/pull/6686","RelatedDescription":"Open PR \"Mirror changes from dotnet/corefx\" (#6686)"},{"Id":"390863483","IsPullRequest":false,"CreatedAt":"2018-12-13T21:17:03","Actor":"tannergooding","Number":"6685","RawContent":null,"Title":"Ensure that the `Vector64<T>`, `Vector128<T>`, and `Vector256<T>` types are properly handled with regards to struct packing/layout","State":"open","Body":"The `Vector64<T>`, `Vector128<T>`, and `Vector256<T>` types are special and are directly mapped as the primitive ABI types (typically referred to as `__m64`, `__m128`, and `__m256`). ProjectN should ensure that these types are appropriately handled before they ship so that types are laid out appropriately in memory and so that it does not become a breaking change to fix them in the future.\r\n\r\nCoreCLR is already correctly handling these types in the VM layer: https://github.com/dotnet/coreclr/blob/master/src/vm/methodtablebuilder.cpp#L9521","Url":"https://github.com/dotnet/corert/issues/6685","RelatedDescription":"Open issue \"Ensure that the `Vector64<T>`, `Vector128<T>`, and `Vector256<T>` types are properly handled with regards to struct packing/layout\" (#6685)"},{"Id":"390747404","IsPullRequest":true,"CreatedAt":"2018-12-13T20:33:53","Actor":"trylek","Number":"6683","RawContent":null,"Title":"Clean up CPAOT statics management per Michal's advice","State":"closed","Body":"Based on PR discussion towards my previous change I have prepared\r\nanother PR to clean up static management. I have modified the\r\nimplementation of ComputeHasGCStaticBase in ReadyToRunCompilerContext\r\nand I reverted some of my changes to CorInfoImpl.\r\n\r\nI still don't see how to completely eliminate R2R-specific code\r\nin getFieldInfo as I believe we need the special flag\r\nCORINFO_FIELD_FLAGS.CORINFO_FLG_FIELD_STATIC_IN_HEAP so that JIT takes\r\ncare of the automatic unboxing and we need special treatment\r\nfor fields with types outside of the version bubble.\r\n\r\nThanks\r\n\r\nTomas","Url":"https://github.com/dotnet/corert/pull/6683","RelatedDescription":"Closed or merged PR \"Clean up CPAOT statics management per Michal's advice\" (#6683)"},{"Id":"390771984","IsPullRequest":true,"CreatedAt":"2018-12-13T18:06:21","Actor":"Dotnet-GitSync-Bot","Number":"6684","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @fiigii","Url":"https://github.com/dotnet/corert/pull/6684","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#6684)"},{"Id":"390693664","IsPullRequest":false,"CreatedAt":"2018-12-13T14:05:37","Actor":"kbaladurin","Number":"6682","RawContent":null,"Title":"[CppCodeGen] Inheritance is missing in some cases","State":"open","Body":"Following sample compiles incorrectly:\r\n```cs\r\nusing System;\r\n\r\nnamespace Hello\r\n{\r\n    internal class Program\r\n    {\r\n        class A<T, U>\r\n        {\r\n\r\n        }\r\n\r\n        class C<T>\r\n        {\r\n\r\n        }\r\n\r\n        class B<T> : A<string, C<T>>\r\n        {\r\n\r\n        }\r\n\r\n        private static void Main(string[] args)\r\n        {\r\n            var b = new B<string>();\r\n            Console.WriteLine(\"b = \" + b);\r\n        }\r\n    }\r\n}\r\n```\r\n`B<System.__Canon>` doesn't inherit `A`:\r\n```\r\nnamespace Hello { namespace Hello { class Program_B_1_A__System___Canon_V_ {\r\n                public:\r\n                        static MethodTable * __getMethodTable();\r\n                        static void _ctor(::Hello::Hello::Program_B_1_A__System___Canon_V_*);\r\n                        static void unbox__ctor(::Hello::Hello::Program_B_1_A__System___Canon_V_*);\r\n};\r\n};};\r\n```\r\n\r\nOne of the problems is that `B<System.__Canon>` is emitted before `A<System.__Canon, System.__Canon>`. So the check `_emittedTypes.Contains(nodeType.BaseType)` in `CppWriter.OutputTypeNode` returns false. Are there any guarantees that base type is emitted before type itself?\r\n\r\nThank you!","Url":"https://github.com/dotnet/corert/issues/6682","RelatedDescription":"Open issue \"[CppCodeGen] Inheritance is missing in some cases\" (#6682)"},{"Id":"390340707","IsPullRequest":true,"CreatedAt":"2018-12-12T17:55:04","Actor":"trylek","Number":"6681","RawContent":null,"Title":"Initial support for GC ref map emission in the CPAOT compiler","State":"open","Body":"I have basically forked away ArgIterator and TransitionBlock from\r\nthe calling convention converter and I adapted it to use by the\r\nCPAOT compiler. I have not yet added multi-architecture support,\r\nfor now it only works for the compiler build architecture. There are\r\nalso a few NotImplemented cases I'll fix once I hit them in testing.\r\n\r\nMy initial thinking is that, after finalizing this code and after\r\nwe start working on other architectures, I'll further refactor this\r\ncode based on JanK's suggestion by merging in preprocessed versions\r\nof the ArgIterator source file for the four architectures.\r\n\r\nI also plan to further experiment with runtime architecture\r\nvirtualization that I tried to prototype in a trimmed-down\r\nclone of TransitionBlock I coded up for the purpose of R2RDump\r\nGC ref map decoder and I'm quite pleased with the result which\r\nlooks quite elegant and compact to me.\r\n\r\nThanks\r\n\r\nTomas","Url":"https://github.com/dotnet/corert/pull/6681","RelatedDescription":"Open PR \"Initial support for GC ref map emission in the CPAOT compiler\" (#6681)"},{"Id":"388854973","IsPullRequest":true,"CreatedAt":"2018-12-12T17:20:52","Actor":"trylek","Number":"6664","RawContent":null,"Title":"Additional fixes for field placement in CPAOT","State":"closed","Body":"After making improvements to R2RDump to let me smoothly diff CPAOT\r\nand Crossgen code I managed to identify tests crashing to obvious\r\ninconsistencies in access to class / struct fields. There were\r\nmultiple reasons for these inconsistencies and, while I cannot claim\r\nthis change fixes all of them, it fixes quite a few.\r\n\r\nWhile our longer-term plan is to start embedding field placement\r\ninformation in the R2R executables, I believe this change is useful\r\nto both provide immediate fixes for some of the previously failing\r\nCoreCLR tests and to seed the CPAOT field placement algorithm with\r\na closer match to what CoreCLR uses - even if we decide to deviate\r\nfrom that at some point, it's still probably a reasonable starting\r\npoint.\r\n\r\n1) My original implementation of the static field layout placement\r\nwas based on the method Module::BuildStaticsOffsets but that's\r\nincorrect - this method is only used to calculate the required space\r\nfor statics of each type in the module and use this information to\r\ncalculate offsets within a big array that subsequently gets allocated\r\nas part of the DomainLocalModule / ThreadLocalModule structures.\r\nFor the actual field placement, MethodTableBuilder uses the same\r\nalgorithm as the dynamic layout placement so I unified these two\r\nand I refactored the code to cater for the two-level field resolution.\r\n\r\n2) Reverse token lookup for fields was incomplete so I fixed that.\r\n\r\n3) For static struct fields, we must set a special flag in CPAOT,\r\nCORINFO_FIELD_FLAGS.CORINFO_FLG_FIELD_STATIC_IN_HEAP, this triggers\r\nthe proper double indirection code in JIT that caters for implicitly\r\nboxed struct statics in CoreCLR.\r\n\r\n4) For extra-bubble statics, we instead use a special helper\r\nREADYTORUN_HELPER_FieldAddress in accordance with the postprocessing\r\nin ZapInfo::getFieldInfo around lines 2940-2990.\r\n\r\n5) For instance fields, it turns out there's a slight difference in\r\nhow CoreRT vs. CoreCLR decides field layout for structs. In CoreRT,\r\nstructs use sequential layout by default. In CoreCLR, structs use\r\nsequential layout only when they are blittable, otherwise they use\r\nauto layout.\r\n\r\n6) As part of this change I have forked out the method\r\n\"MarshalHelpers.IsBlittableType\" into a separate static class\r\nIsBlittable because the MarshalHelpers carry around a ton of\r\ndependencies that wreak havoc when propagating to all places where\r\nthe blittable check is newly used as part of the field placement\r\nlogic. With this surgical separation I managed to make this change\r\nrequire very few changes to other projects.\r\n\r\nThanks\r\n\r\nTomas","Url":"https://github.com/dotnet/corert/pull/6664","RelatedDescription":"Closed or merged PR \"Additional fixes for field placement in CPAOT\" (#6664)"},{"Id":"390260931","IsPullRequest":true,"CreatedAt":"2018-12-12T15:59:02","Actor":"Dotnet-GitSync-Bot","Number":"6680","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @pentp","Url":"https://github.com/dotnet/corert/pull/6680","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#6680)"},{"Id":"389384132","IsPullRequest":true,"CreatedAt":"2018-12-12T15:15:55","Actor":"MarcoRossignoli","Number":"6669","RawContent":null,"Title":"[ILVerify]Check interface method implementation","State":"closed","Body":"closes https://github.com/dotnet/corert/issues/6203\r\nOutput message:\r\n```\r\n[MD]: Error: Class implements interface but not method, Class: '[InterfaceImplementation]MissingMethod_InvalidType_InterfaceMethodNotImplemented' Interface: '[InterfaceDefinition]Interface' Method: [InterfaceDefinition]Interface.M1()(class:02000004 interface:09000004 method:06000001).\r\n```\r\n\r\n/cc @jkotas @MichalStrehovsky","Url":"https://github.com/dotnet/corert/pull/6669","RelatedDescription":"Closed or merged PR \"[ILVerify]Check interface method implementation\" (#6669)"},{"Id":"390184149","IsPullRequest":false,"CreatedAt":"2018-12-12T14:01:12","Actor":"jojify","Number":"6679","RawContent":null,"Title":"Failed to build Chromely (https://github.com/mattkol/Chromely)","State":"closed","Body":"Chromely is built using .Net standard 2.0.\r\nI used latest pre- release version (Install-Package Chromely.CefGlue.Winapi -Version 68.0.0-pre01).\r\nPlease find the attached screenshot.\r\n![sh1](https://user-images.githubusercontent.com/3658295/49859167-dc198700-fe1c-11e8-8782-9f575d75dabe.png)\r\n\r\nI followed steps from the link exactly. (https://github.com/mattkol/Chromely/wiki/Getting-Started-CefGlue-Winapi-(.NET-Core)). \r\nWhen I build the program using visual studio, it runs perfectly. \r\n\r\nBut again when I tried to build using CoreRT, I got the native executable in the native folder. It shows an error:-Value can't be null. parameter name :path1. Attached screen shot.\r\n![sc2](https://user-images.githubusercontent.com/3658295/49860871-a8d8f700-fe20-11e8-83d5-01f549154887.png)\r\n\r\n[chromely Sample.zip](https://github.com/mattkol/Chromely/files/2671351/chromely.Sample.zip)\r\n\r\nI am trying to build a native application using chromely. It will be great if you can take a look into this.\r\n\r\n","Url":"https://github.com/dotnet/corert/issues/6679","RelatedDescription":"Closed issue \"Failed to build Chromely (https://github.com/mattkol/Chromely)\" (#6679)"},{"Id":"390121697","IsPullRequest":true,"CreatedAt":"2018-12-12T12:10:26","Actor":"MichalStrehovsky","Number":"6677","RawContent":null,"Title":"Add comment to WinRT SystemSupportsLeapSeconds","State":"closed","Body":"Per https://github.com/dotnet/corert/pull/6672#issuecomment-446430564.","Url":"https://github.com/dotnet/corert/pull/6677","RelatedDescription":"Closed or merged PR \"Add comment to WinRT SystemSupportsLeapSeconds\" (#6677)"},{"Id":"390122572","IsPullRequest":true,"CreatedAt":"2018-12-12T08:52:12","Actor":"kvochko","Number":"6678","RawContent":null,"Title":"Generate ARM CFIs in the correct order","State":"open","Body":"This is a CoreRT counterpart to https://github.com/dotnet/coreclr/pull/21505 . Since CFI codes are now generated in prolog, they are already in reverse order, so we don't need to reverse them in CoreRT.\r\nFixes #6626 \r\nCC @jkotas @alpencolt ","Url":"https://github.com/dotnet/corert/pull/6678","RelatedDescription":"Open PR \"Generate ARM CFIs in the correct order\" (#6678)"},{"Id":"389955581","IsPullRequest":true,"CreatedAt":"2018-12-12T04:40:26","Actor":"Dotnet-GitSync-Bot","Number":"6676","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @tannergooding","Url":"https://github.com/dotnet/corert/pull/6676","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#6676)"},{"Id":"389835095","IsPullRequest":true,"CreatedAt":"2018-12-11T16:02:59","Actor":"MichalStrehovsky","Number":"6675","RawContent":null,"Title":"Make it possible to align at 32 byte boundaries","State":"open","Body":"This will be necessary to support computing layout for types that embed `Vector256`.\r\n\r\nFollow up on https://github.com/dotnet/corert/pull/6663#issuecomment-445574774.\r\n\r\nThis is foundational work needed to support the new HW intrinsics. We may or may not end up implementing function multiversioning for ready to run for .NET Core 3.0 CPAOT, but being able to compute the layout will let us at least pregenerate method bodies that pass through vector types without actually calling the intrinsics.\r\n\r\nSee individual commits. I'm flexible on whether we should include 47bacbd.","Url":"https://github.com/dotnet/corert/pull/6675","RelatedDescription":"Open PR \"Make it possible to align at 32 byte boundaries\" (#6675)"},{"Id":"389776056","IsPullRequest":true,"CreatedAt":"2018-12-11T13:55:45","Actor":"MichalStrehovsky","Number":"6674","RawContent":null,"Title":"Merge master to nmirror","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/6674","RelatedDescription":"Closed or merged PR \"Merge master to nmirror\" (#6674)"},{"Id":"389496528","IsPullRequest":true,"CreatedAt":"2018-12-11T12:18:32","Actor":"Dotnet-GitSync-Bot","Number":"6671","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @jkotas","Url":"https://github.com/dotnet/corert/pull/6671","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#6671)"},{"Id":"389609642","IsPullRequest":true,"CreatedAt":"2018-12-11T10:03:32","Actor":"jkotas","Number":"6673","RawContent":null,"Title":"Delete unnecessary struct initialization","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/6673","RelatedDescription":"Closed or merged PR \"Delete unnecessary struct initialization\" (#6673)"},{"Id":"389401689","IsPullRequest":true,"CreatedAt":"2018-12-11T06:06:22","Actor":"MichalStrehovsky","Number":"6670","RawContent":null,"Title":"Rename IlogB -> ILogB","State":"closed","Body":"This was updated in dotnet/coreclr#20912. Fortunately, ApiCompat found it in dotnet/corefx#33956.","Url":"https://github.com/dotnet/corert/pull/6670","RelatedDescription":"Closed or merged PR \"Rename IlogB -> ILogB\" (#6670)"},{"Id":"389560609","IsPullRequest":true,"CreatedAt":"2018-12-11T06:01:27","Actor":"tarekgh","Number":"6672","RawContent":null,"Title":"Fix leap seconds mirrored code","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/6672","RelatedDescription":"Closed or merged PR \"Fix leap seconds mirrored code\" (#6672)"},{"Id":"389240063","IsPullRequest":true,"CreatedAt":"2018-12-10T15:53:16","Actor":"Dotnet-GitSync-Bot","Number":"6668","RawContent":null,"Title":"Mirror changes from dotnet/coreclr,corefx","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr,corefx\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub @stephentoub @tarekgh","Url":"https://github.com/dotnet/corert/pull/6668","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr,corefx\" (#6668)"},{"Id":"388845374","IsPullRequest":true,"CreatedAt":"2018-12-10T10:38:08","Actor":"Dotnet-GitSync-Bot","Number":"6663","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @tannergooding","Url":"https://github.com/dotnet/corert/pull/6663","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#6663)"},{"Id":"389194828","IsPullRequest":true,"CreatedAt":"2018-12-10T09:32:45","Actor":"MichalStrehovsky","Number":"6667","RawContent":null,"Title":"Update RyuJIT","State":"closed","Body":"Probably needed to unblock #6663.","Url":"https://github.com/dotnet/corert/pull/6667","RelatedDescription":"Closed or merged PR \"Update RyuJIT\" (#6667)"},{"Id":"389067443","IsPullRequest":true,"CreatedAt":"2018-12-10T03:28:03","Actor":"MichalStrehovsky","Number":"6666","RawContent":null,"Title":"Fix handling of intrinsic types in RyuJIT","State":"closed","Body":"This should unblock integrations from CoreCLR.","Url":"https://github.com/dotnet/corert/pull/6666","RelatedDescription":"Closed or merged PR \"Fix handling of intrinsic types in RyuJIT\" (#6666)"},{"Id":"389067160","IsPullRequest":false,"CreatedAt":"2018-12-09T21:40:30","Actor":"MichalStrehovsky","Number":"6665","RawContent":null,"Title":"Auto layout algorithm doesn't compute the right size","State":"open","Body":"Found when I was running the tests Tanner added in dotnet/coreclr#15961 (while half of the tests focuses on Vector64/128/256, the second half is a general purpose test and we're failing computing the right sizes).\r\n\r\nI have a fix that is halfway there in https://github.com/MichalStrehovsky/corert/commit/7f94460a4a0e2ea550dfdf26c4c5603bfc22faf3.\r\n\r\nWhat it lacks is handling of Align8 and unit tests.\r\n\r\nFor the record, here's the relevant part of the output of Tanner's test:\r\n\r\n```\r\nUnexpected Size for AutoLayoutMinPacking`1[System.Char].\r\n     Expected: 4; Actual: 3\r\n\r\nUnexpected Size for AutoLayoutMinPacking`1[System.Double].\r\n     Expected: 16; Actual: 9\r\n\r\nUnexpected Size for AutoLayoutMinPacking`1[System.Int16].\r\n     Expected: 4; Actual: 3\r\n\r\nUnexpected Size for AutoLayoutMinPacking`1[System.Int32].\r\n     Expected: 8; Actual: 5\r\n\r\nUnexpected Size for AutoLayoutMinPacking`1[System.Int64].\r\n     Expected: 16; Actual: 9\r\n\r\nUnexpected Size for AutoLayoutMinPacking`1[System.IntPtr].\r\n     Expected: 16; Actual: 9\r\n\r\nUnexpected Size for AutoLayoutMinPacking`1[System.Single].\r\n     Expected: 8; Actual: 5\r\n\r\nUnexpected Size for AutoLayoutMinPacking`1[System.UInt16].\r\n     Expected: 4; Actual: 3\r\n\r\nUnexpected Size for AutoLayoutMinPacking`1[System.UInt32].\r\n     Expected: 8; Actual: 5\r\n\r\nUnexpected Size for AutoLayoutMinPacking`1[System.UInt64].\r\n     Expected: 16; Actual: 9\r\n\r\nUnexpected Size for AutoLayoutMinPacking`1[System.UIntPtr].\r\n     Expected: 16; Actual: 9\r\n```","Url":"https://github.com/dotnet/corert/issues/6665","RelatedDescription":"Open issue \"Auto layout algorithm doesn't compute the right size\" (#6665)"},{"Id":"388775575","IsPullRequest":true,"CreatedAt":"2018-12-07T20:23:02","Actor":"Dotnet-GitSync-Bot","Number":"6662","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub","Url":"https://github.com/dotnet/corert/pull/6662","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#6662)"},{"Id":"388653472","IsPullRequest":true,"CreatedAt":"2018-12-07T14:18:54","Actor":"Dotnet-GitSync-Bot","Number":"6661","RawContent":null,"Title":"Mirror changes from dotnet/corefx,coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/corefx,coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub","Url":"https://github.com/dotnet/corert/pull/6661","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corefx,coreclr\" (#6661)"},{"Id":"388602491","IsPullRequest":true,"CreatedAt":"2018-12-07T13:20:15","Actor":"Dotnet-GitSync-Bot","Number":"6660","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @tannergooding","Url":"https://github.com/dotnet/corert/pull/6660","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#6660)"},{"Id":"388601063","IsPullRequest":true,"CreatedAt":"2018-12-07T10:47:02","Actor":"MichalStrehovsky","Number":"6659","RawContent":null,"Title":"Merge master to nmirror","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/6659","RelatedDescription":"Closed or merged PR \"Merge master to nmirror\" (#6659)"},{"Id":"388588514","IsPullRequest":true,"CreatedAt":"2018-12-07T10:46:28","Actor":"MichalStrehovsky","Number":"6658","RawContent":null,"Title":"Work around an MCG bug","State":"closed","Body":"This is blocking TFS integrations.","Url":"https://github.com/dotnet/corert/pull/6658","RelatedDescription":"Closed or merged PR \"Work around an MCG bug\" (#6658)"}],"ResultType":"GitHubIssue"},"SDK-Issues":{"Issues":[{"Id":"390007564","IsPullRequest":true,"CreatedAt":"2018-12-14T00:15:33","Actor":"dotnet-bot","Number":"2746","RawContent":null,"Title":"Merge release/2.2.2xx to master","State":"closed","Body":"\nThis is an automatically generated pull request from release/2.2.2xx into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.2.2xx-to-master\ngit reset --hard upstream/master\ngit merge upstream/release/2.2.2xx\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.2.2xx-to-master --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/2746","RelatedDescription":"Closed or merged PR \"Merge release/2.2.2xx to master\" (#2746)"},{"Id":"390902820","IsPullRequest":false,"CreatedAt":"2018-12-13T23:21:33","Actor":"wli3","Number":"2749","RawContent":null,"Title":"Pack as tool should not generate exe in nupkg","State":"open","Body":"We generate an executable by default as a new 3.0.xxx feature. However, we should not generate such file during PackAsTool. It should not be harmful however it would be flagged or signed by infrastructure","Url":"https://github.com/dotnet/sdk/issues/2749","RelatedDescription":"Open issue \"Pack as tool should not generate exe in nupkg\" (#2749)"},{"Id":"388344039","IsPullRequest":false,"CreatedAt":"2018-12-13T19:16:52","Actor":"zawor","Number":"2725","RawContent":null,"Title":"Uninstalling may be not enough","State":"closed","Body":"@KathleenDollard asked me to post dotnet/docs#9412 here so here we go:\r\n\r\nHad a lot of runtimes and sdks accumulated over time on my dev machine. At some point i decided to do the cleanup and uninstalled quite a few from under appwiz.cpl (or add/remove programs). Unfortunately after running `dotnet --list-sdks` or `dotnet --list-runtimes` i still saw those which were uninstalled... Interestingly enough i discovered that installers have left a lot of empty dirs under `C:\\Program Files\\dotnet\\sdk`, `C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All` and `C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App`. Removing those made `--list-sdks` and `--list-runtimes` to no longer list uninstalled runtimes/sdks.","Url":"https://github.com/dotnet/sdk/issues/2725","RelatedDescription":"Closed issue \"Uninstalling may be not enough\" (#2725)"},{"Id":"390775310","IsPullRequest":false,"CreatedAt":"2018-12-13T17:53:16","Actor":"nphmuller","Number":"2748","RawContent":null,"Title":"Option to treat NETSDK warnings as errors","State":"closed","Body":"While updating to 2.2.100 I noticed a couple of warnings were added. Like `NETSDK1071`.\r\nIn my CI I build using the `TreatWarningsAsErrors` flag (`dotnet build /p:TreatWarningsAsErrors=\"true\"`)`.\r\n\r\nThe build still completed succesfully, while `NETSDK1071` was thrown.\r\n\r\nWhat is the recommended way to force a build to fail if any of these warnings are thrown from the SDK?\r\nThe most user friendly way would be to use the same flag as msbuild. But that doesn't seem to be supported atm.","Url":"https://github.com/dotnet/sdk/issues/2748","RelatedDescription":"Closed issue \"Option to treat NETSDK warnings as errors\" (#2748)"},{"Id":"390333769","IsPullRequest":false,"CreatedAt":"2018-12-12T17:36:19","Actor":"abpiskunov","Number":"2747","RawContent":null,"Title":"Add publish capabilities for SDK based ClassLibraries and ConsoleApps","State":"open","Body":"Per our discussion with @nguerrera and @davkean we need to switch to new capabilities schema for publish (see below). To accomplish that one of the workitems is to add\r\n\r\n- FolderPublish to SDK-based class libraries and console apps , along with WPF and WinForms (if it is not present yet)\r\n- AppServicePublish to SDK-based class libraries and console apps \r\n\r\nThis needs to happen in P2 and earlier rather than later since Publish would need to commit and test changes after all capabilities are added.\r\n\r\nCapabilities \r\n \r\n•         \"Publish\": all projects that support any kind of publish should contain this capability\r\no    All .NET project types\r\n•         \"FolderPublish\": if project supports publishing to folder\r\no    Class libraries  (classic and core). Note: we don't own Publish for classic class libraries and classic ConsoleApps, ClickOnce does. There should be separate work item tracking ClickOnce support for our publish framework. However we can add capability now and it would light up when ClickOnce adds apublish provider.\r\no    Console app (classic, core). \r\no    WebSites, WAP, Web core\r\no    WPF (core and classic)\r\no    WinForms (classic and core)\r\n•         \"AppServicePublish\": if project is publishable to any web related publish target: Web, AppService, etc \r\no    Console apps (classic and core)\r\no    WebSites, WAP, Web core\r\n \r\nPotential pending capabilities:\r\n•         \"ClickOnce\"\r\no    Classic console apps\r\no    WPF (classic)\r\no    WinForms (classic)\r\n•         \"MSIX\"\r\no    Console apps (classic and core)\r\no    WPF (classic and core)\r\no    WinForms (classic and core)\r\n \r\n \r\n \r\nProviders \r\n \r\n•         FolderProvider: AppliesTo(\"Publish&FolderPublish\")\r\n•         AppServiceProvider: AppliesTo(\"Publish&AppServicePublish\")\r\n•         IISProvider: AppliesTo(\"Publish&Web\")\r\n•         AzureVMProvider: AppliesTo(\"Publish&Web\")\r\n•         AppServiceLinuxProvider: AppliesTo(\"Publish&DotNetCoreWeb\")\r\n•         ContainerRegistryProvider:AppliesTo(Publish&AppServicePublish&(Web|DotnetCoreWeb))\r\n•         ClickOnceProvider:AppliesTo(Publish&ClickOnce)\r\n•         MSIXProvider:AppliesTo(Publish&MSIX)\r\n \r\n \r\nWorkitems:\r\n \r\n•\tAdd FolderPublish to WPF and WinForms (classic and core), Class Libraries and Console Apps (classic and core). Some of them already have it , just make sure all of them have. <- CSharp & SDK\r\n•\tAdd AppServicePublish to Console apps (classic and core) <- CSharp and SDK\r\n•\tAdd AppServicePublish to WebSites, WAP, and Core Web <- WAP and WebSdk\r\n \r\nClickOnce and MSIX I would leave to their owner to request/add when they are ready.\r\n","Url":"https://github.com/dotnet/sdk/issues/2747","RelatedDescription":"Open issue \"Add publish capabilities for SDK based ClassLibraries and ConsoleApps\" (#2747)"},{"Id":"389994622","IsPullRequest":true,"CreatedAt":"2018-12-11T23:11:35","Actor":"jainaashish","Number":"2745","RawContent":null,"Title":"Insert NuGet Build 5.0.0-preview1.5707 into sdk","State":"open","Body":"Keeping it consistent with 2.2.2xx train","Url":"https://github.com/dotnet/sdk/pull/2745","RelatedDescription":"Open PR \"Insert NuGet Build 5.0.0-preview1.5707 into sdk\" (#2745)"},{"Id":"388856924","IsPullRequest":true,"CreatedAt":"2018-12-11T20:00:15","Actor":"dotnet-bot","Number":"2734","RawContent":null,"Title":"Merge release/2.2.2xx to master","State":"closed","Body":"\nThis is an automatically generated pull request from release/2.2.2xx into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.2.2xx-to-master\ngit reset --hard upstream/master\ngit merge upstream/release/2.2.2xx\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.2.2xx-to-master --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/2734","RelatedDescription":"Closed or merged PR \"Merge release/2.2.2xx to master\" (#2734)"},{"Id":"389616201","IsPullRequest":true,"CreatedAt":"2018-12-11T18:52:09","Actor":"wli3","Number":"2741","RawContent":null,"Title":"Merge/2.1.6xx to 2.2.2xx","State":"closed","Body":"","Url":"https://github.com/dotnet/sdk/pull/2741","RelatedDescription":"Closed or merged PR \"Merge/2.1.6xx to 2.2.2xx\" (#2741)"},{"Id":"389836302","IsPullRequest":true,"CreatedAt":"2018-12-11T17:33:37","Actor":"nugetlurker","Number":"2743","RawContent":null,"Title":"Insert NuGet Build 5.0.0-preview1.5707 into sdk","State":"closed","Body":"Insert NuGet Build 5.0.0-preview1.5707 into sdk release/2.2.2xx branch","Url":"https://github.com/dotnet/sdk/pull/2743","RelatedDescription":"Closed or merged PR \"Insert NuGet Build 5.0.0-preview1.5707 into sdk\" (#2743)"},{"Id":"389836305","IsPullRequest":true,"CreatedAt":"2018-12-11T17:33:03","Actor":"nugetlurker","Number":"2744","RawContent":null,"Title":"Insert NuGet Build 5.0.0-preview1.5707 into sdk","State":"closed","Body":"Insert NuGet Build 5.0.0-preview1.5707 into sdk release/2.1.6xx branch","Url":"https://github.com/dotnet/sdk/pull/2744","RelatedDescription":"Closed or merged PR \"Insert NuGet Build 5.0.0-preview1.5707 into sdk\" (#2744)"},{"Id":"389753827","IsPullRequest":true,"CreatedAt":"2018-12-11T13:02:02","Actor":"dotnet-maestro[bot]","Number":"2742","RawContent":null,"Title":"Update dependency files","State":"open","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18610.4\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18611.14\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18612.12\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/2742","RelatedDescription":"Open PR \"Update dependency files\" (#2742)"},{"Id":"389095908","IsPullRequest":true,"CreatedAt":"2018-12-11T05:51:42","Actor":"dsplaisted","Number":"2738","RawContent":null,"Title":"Support ASP.NET Core PackageReference when targeting .NET Core 3.0 or higher","State":"closed","Body":"Fixes dotnet/cli#10124\r\n\r\nAlso fixes #2527","Url":"https://github.com/dotnet/sdk/pull/2738","RelatedDescription":"Closed or merged PR \"Support ASP.NET Core PackageReference when targeting .NET Core 3.0 or higher\" (#2738)"},{"Id":"389564061","IsPullRequest":true,"CreatedAt":"2018-12-11T01:58:29","Actor":"nguerrera","Number":"2740","RawContent":null,"Title":"Fix the build","State":"open","Body":"Two severe issues:\r\n\r\n1. Official build is failing, and it's apparently at a line where we are attempting to use undefined $env:VSSDKInstall. It is unclear what this line was accomplishing so I've removed it. I suspect it may have been working around past arcade version issues. Does that ring a bell?\r\n\r\n2. In the port to arcade, the act of running tests against full msbuild was coupled to building with full msbuild whereas before it was a custom build argument. Now the latest arcade is always building with VS when available, which means are tests are not running on core on Windows on any leg. I've tied it to an env var instead of the build engine. This also removes the requirement to have VS installed to build. It is now used only when testing full msbuild as it was originally.\r\n\r\nFixes #2589\r\n\r\nAlso fixed some annoyances encountered while debugging this:\r\n\r\n* dogfood script now puts stage0 dotnet on PATH\r\n\r\n* Locate stage0 bundled versions irrespective of SDK version used to build. This could cause tests to fail in VS if using an ambient SDK from Program Files. \r\n","Url":"https://github.com/dotnet/sdk/pull/2740","RelatedDescription":"Open PR \"Fix the build\" (#2740)"},{"Id":"389501017","IsPullRequest":true,"CreatedAt":"2018-12-11T01:22:12","Actor":"wli3","Number":"2739","RawContent":null,"Title":"Use PackageVersion for shim gen","State":"closed","Body":"fix #2698\r\nPackageVersion should be the source of truth for nuget layout.\r\n\r\nhttps://github.com/NuGet/NuGet.Client/blob/3c9b61826814dc800a2a295f0985ce4f295483d6/src/NuGet.Core/NuGet.Build.Tasks.Pack/NuGet.Build.Tasks.Pack.targets#L28","Url":"https://github.com/dotnet/sdk/pull/2739","RelatedDescription":"Closed or merged PR \"Use PackageVersion for shim gen\" (#2739)"},{"Id":"388920248","IsPullRequest":true,"CreatedAt":"2018-12-09T18:55:11","Actor":"dotnet-maestro[bot]","Number":"2736","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18607.6\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18608.1\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/2736","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#2736)"},{"Id":"389031990","IsPullRequest":false,"CreatedAt":"2018-12-09T15:09:06","Actor":"nguerrera","Number":"2737","RawContent":null,"Title":"NetCore2.1->2.2 Upgrade Issue; TargetFramework dropped/not recognized","State":"open","Body":"_From @pinkfloydx33 on December 5, 2018 13:40_\n\nI'm trying to upgrade my web application from netCore 2.1 to 2.2. I have updated the TargetFramework to netcoreapp2.2 and I receive the following errors upon restore/build/clean:\r\n\r\n```\r\nMyProduct.Web.csproj : error NU1202: Package Microsoft.AspNetCore.App 2.2.0 is not compatible with netcoreapp2.1 (.NETCoreApp,Version=v2.1). Package Microsoft.AspNetCore.App 2.2.0 supports: netcoreapp2.2 (.NETCoreApp,Version=v2.2)\r\nMyProduct.Web.csproj : error NU1202: Package Microsoft.NETCore.App 2.2.0 is not compatible with netcoreapp2.1 (.NETCoreApp,Version=v2.1). Package Microsoft.NETCore.App 2.2.0 supports: netcoreapp2.2 (.NETCoreApp,Version=v2.2)\r\nMyProduct.Web.csproj : error NU1202: Package Microsoft.AspNetCore.App 2.2.0 is not compatible with netcoreapp2.1 (.NETCoreApp,Version=v2.1) / win-x64. Package Microsoft.AspNetCore.App 2.2.0 supports: netcoreapp2.2 (.NETCoreApp,Version=v2.2)\r\nMyProduct.Web.csproj : error NU1202: Package Microsoft.NETCore.App 2.2.0 is not compatible with netcoreapp2.1 (.NETCoreApp,Version=v2.1) / win-x64. Package Microsoft.NETCore.App 2.2.0 supports: netcoreapp2.2 (.NETCoreApp,Version=v2.2)\r\n```\r\n\r\nI have also done a manual clean (deleting obj/bin directories). \r\n\r\nI **can** build if I change from using `<TargetFramework>` to `<TargetFrameworks>`, however I'd rather not do this and attempt to locate the underlying issue. I have two test projects in the same solution that reference the main project. I was able to migrate _them_ to netcoreapp2.2 without switching to TargetFramework**s**, I would like to do the same thing for the main web app.\r\n\r\nWhen I use TargetFramework (singular), Visual Studio updates the dependencies graph and removes the SDK node:\r\n![image](https://user-images.githubusercontent.com/395615/49516771-63d52380-f868-11e8-9f5c-49ac2676585f.png)\r\n\r\nI've tried adding a global.json specifying the SDK version directly as 2.2.100 but that doesn't make any difference.\r\n\r\nHere is my .csproj file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n\r\n\t<PropertyGroup>\r\n\t\t<AssemblyName>MyProduct.Web</AssemblyName>\r\n\t\t<OutputType>Exe</OutputType>\r\n\t\t<TargetFramework>netcoreapp2.2</TargetFramework>\r\n\t\t<PreserveCompilationContext>true</PreserveCompilationContext>\r\n\t\t<LangVersion>latest</LangVersion>\r\n\t</PropertyGroup>\r\n\r\n\t<PropertyGroup>\r\n\t\t<GenerateAssemblyInfo>false</GenerateAssemblyInfo>\r\n\t\t<PackageId>$(AssemblyName)</PackageId>\r\n\t\t<Authors>MyCompany</Authors>\r\n\t</PropertyGroup>\r\n\r\n\t<PropertyGroup Condition=\"'$(Configuration)' == 'Debug'\">\r\n\t\t<RazorCompileOnBuild>false</RazorCompileOnBuild>\r\n\t\t<RazorCompileOnPublish>false</RazorCompileOnPublish>\r\n\t</PropertyGroup>\r\n\r\n\t<PropertyGroup Condition=\"'$(Configuration)'=='Debug'\">\r\n\t  <DefineConstants>DEBUG;TRACE</DefineConstants>\r\n\t</PropertyGroup>\r\n\r\n\t<ItemGroup>\r\n\t\t<None Update=\"wwwroot\\**\\*\">\r\n\t\t\t<CopyToPublishDirectory>PreserveNewest</CopyToPublishDirectory>\r\n\t\t</None>\r\n\t</ItemGroup>\r\n\r\n\t<ItemGroup>\r\n\t\t<ProjectReference Include=\"..\\MyProduct.Web.Core\\MyProduct.Web.Core.csproj\" />\r\n\t\t<ProjectReference Include=\"..\\MyProduct.Web.Api.Contracts\\MyProduct.Web.Api.Contracts.csproj\" />\r\n\t\t<ProjectReference Include=\"..\\MyProduct.Web.ViewModels\\MyProduct.Web.ViewModels.csproj\" />\r\n\t</ItemGroup>\r\n\r\n\t<ItemGroup>\r\n\t\t<PackageReference Include=\"Microsoft.AspNetCore.App\" />\r\n\t\t<PackageReference Include=\"BeginCollectionItemCore\" Version=\"1.0.4\" />\r\n\t\t<PackageReference Include=\"Novell.Directory.Ldap.NETStandard\" Version=\"2.3.5\" />\r\n\t\t<PackageReference Include=\"Microsoft.AspNetCore.Authentication.Cookies\" Version=\"2.2.0\" />\r\n\t\t<PackageReference Include=\"Microsoft.AspNetCore.Authentication.JwtBearer\" Version=\"2.2.0\" />\r\n\t</ItemGroup>\r\n\r\n\t<ItemGroup>\r\n\t\t<PackageReference Include=\"Microsoft.AspNetCore.Razor.Design\" Version=\"2.2.0\" PrivateAssets=\"All\" />\r\n\t\t<PackageReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Design\" Version=\"2.2.0\" PrivateAssets=\"All\" />\r\n\t\t<DotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"2.0.4\" />\r\n\t</ItemGroup>\r\n\r\n\t<ItemGroup>\r\n\t\t<Content Update=\"Views\\_ViewImports.cshtml\">\r\n\t\t\t<Pack>$(IncludeRazorContentInPack)</Pack>\r\n\t\t</Content>\r\n\t</ItemGroup>\r\n\r\n</Project>\r\n```\n\n_Copied from original issue: dotnet/corefx#33834_","Url":"https://github.com/dotnet/sdk/issues/2737","RelatedDescription":"Open issue \"NetCore2.1->2.2 Upgrade Issue; TargetFramework dropped/not recognized\" (#2737)"},{"Id":"388893591","IsPullRequest":false,"CreatedAt":"2018-12-08T06:49:25","Actor":"yyjdelete","Number":"2735","RawContent":null,"Title":"`Invalid runtimeconfig.json` is produced when duplicate FrameworkReference exists in 3.0preview","State":"open","Body":"Move from aspnet/AspNetCore#4490\r\n\r\n### Step\r\ndotnet sdk 3.0.0-preview-27122-01 is needed.\r\n1. `dotnet new webapi`\r\n2. change the csproj to add an FrameworkReference   `<FrameworkReference Include=\"Microsoft.AspNetCore.App\" />`\r\n3. `dotnet run`\r\n\r\nIt can also be reproduce with `dotnet new console` by add more than one same FrameworkReference\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <OutputType>Exe</OutputType>\r\n    <TargetFramework>netcoreapp3.0</TargetFramework>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <FrameworkReference Include=\"Microsoft.AspNetCore.App\" />\r\n    <FrameworkReference Include=\"Microsoft.AspNetCore.App\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\n***NOTE:***\r\nWhen the number of duplicated FrameworkReference is changed, the `xxx.runtimeconfig.json` only change after an `dotnet clean` and build, seems the cache and build have different rule in this special case? Not sure if it's another issue, or just an part of this.\r\n\r\n### Expected\r\nBuild error, or run successful.\r\n```json\r\n{\r\n  \"runtimeOptions\": {\r\n    \"tfm\": \"netcoreapp3.0\",\r\n    \"framework\": {\r\n      \"name\": \"Microsoft.AspNetCore.App\",\r\n      \"version\": \"3.0.0-preview-18579-0056\"\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n### Actual\r\nBuild successful, but run failed with `Invalid runtimeconfig.json`. See the duplicate `Microsoft.AspNetCore.App` in `frameworks` here.\r\n```json\r\n{\r\n  \"runtimeOptions\": {\r\n    \"tfm\": \"netcoreapp3.0\",\r\n    \"frameworks\": [\r\n      {\r\n        \"name\": \"Microsoft.AspNetCore.App\",\r\n        \"version\": \"3.0.0-preview-18579-0056\"\r\n      },\r\n      {\r\n        \"name\": \"Microsoft.AspNetCore.App\",\r\n        \"version\": \"3.0.0-preview-18579-0056\"\r\n      }\r\n    ]\r\n  }\r\n}\r\n```\r\n\r\n### Details\r\ndotnet --info\r\n.NET Core SDK（反映任何 global.json）:\r\n Version:   3.0.100-preview-009812\r\n Commit:    e3abf6e935\r\n<details>\r\n\r\n运行时环境:\r\n OS Name:     Windows\r\n OS Version:  10.0.18290\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview-009812\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview-27122-01\r\n  Commit:  00c5c8bc40\r\n\r\n.NET Core SDKs installed:\r\n  2.1.401 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.500-preview-009404 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.500 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.600-preview-009426 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100-preview3-009430 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview-009812 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.0-preview3-35497 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.0-preview3-35497 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview-18579-0056 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0-preview3-27014-02 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview-27122-01 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-alpha-27128-4 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n</details>","Url":"https://github.com/dotnet/sdk/issues/2735","RelatedDescription":"Open issue \"`Invalid runtimeconfig.json` is produced when duplicate FrameworkReference exists in 3.0preview\" (#2735)"},{"Id":"388822770","IsPullRequest":false,"CreatedAt":"2018-12-08T00:32:25","Actor":"dagood","Number":"2733","RawContent":null,"Title":"Incorrect \"repository\" element in Microsoft.NET.Sdk's nuspec","State":"closed","Body":"In this nupkg from a recent build:\r\nhttps://dotnetfeed.blob.core.windows.net/dotnet-core/flatcontainer/microsoft.net.sdk/3.0.100-preview.18603.1/microsoft.net.sdk.3.0.100-preview.18603.1.nupkg\r\n\r\nThe nuspec contains this line:\r\n\r\n```\r\n<repository type=\"git\" url=\"https://github.com//\" commit=\"7bb277dbfdfe52a71b9decc88897510cc8d6be42\" />\r\n```\r\n\r\n`https://github.com//` should be `https://github.com/dotnet/sdk`\r\n\r\nThis might be an Arcade issue, failure to detect the source? I'm not familiar enough with how packaging works now to quickly find where this is happening.\r\n\r\n(I was only looking for the commit, but figured I should file this issue for the wrong url anyway.)","Url":"https://github.com/dotnet/sdk/issues/2733","RelatedDescription":"Closed issue \"Incorrect \"repository\" element in Microsoft.NET.Sdk's nuspec\" (#2733)"},{"Id":"388114295","IsPullRequest":false,"CreatedAt":"2018-12-07T18:53:58","Actor":"Szer","Number":"2724","RawContent":null,"Title":"FSharp.Core explicit dependency downgraded to implicit one","State":"closed","Body":"**Problem:**\r\n\r\nIf I put explicit dependency on FSharp.Core higher than implicit one (which for 2.1.500 is 4.5.2) it will downgrade it to implicit one no matter what.\r\n\r\n**Steps to reproduce**\r\n* Net SDK 2.1.500\r\n* FSproj:\r\n```fsproj\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <TargetFramework>netstandard2.0</TargetFramework>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <Compile Include=\"Program.fs\" />\r\n  </ItemGroup> \r\n  \r\n  <ItemGroup>\r\n    <PackageReference Include=\"FSharp.Core\" Version=\"4.5.4\" />\r\n  </ItemGroup>\r\n\r\n</Project>\r\n```\r\n* useless Program.fs\r\n```fsharp\r\nmodule A\r\nlet a = 1\r\n```\r\n* `dotnet restore` or `dotnet build`\r\n* check `FSharp.Core` version in `obj\\project.assets.json`\r\n\r\n**Expected**\r\n\r\n`FSharp.Core` should restore to explicit version, to `4.5.4`\r\n\r\n**Actual**\r\n\r\n`FSharp.Core` is being restored to implicit version, to `4.5.2`\r\n\r\n**Known workarounds**\r\n\r\n* Add `<DisableImplicitFSharpCoreReference>true</DisableImplicitFSharpCoreReference>` to fsproj\r\n* Use VisualStudio 15.9.3 `ctrl-shift-B` (strangely it restores OK)\r\n* Use `Paket`\r\n\r\n**Notes**\r\n\r\nThis behavior is the reason for package degradation warnings in case any other packages require something like `>=4.5.4` or `=4.5.4`","Url":"https://github.com/dotnet/sdk/issues/2724","RelatedDescription":"Closed issue \"FSharp.Core explicit dependency downgraded to implicit one\" (#2724)"},{"Id":"388771076","IsPullRequest":false,"CreatedAt":"2018-12-07T18:47:17","Actor":"jainaashish","Number":"2732","RawContent":null,"Title":"Consume NuGet /embed assets group for interop type assemblies from NuGet package","State":"open","Body":"This is the tracking issue to update dotnet build tasks to consume new `/embed` assets group from NuGet packages for interop type assemblies so that Project System passes it as `link` instead of `ref` to compiler.\r\n\r\nCorresponding NuGet issue# https://github.com/NuGet/Home/issues/2365\r\n\r\n@livarcocc @nguerrera @dsplaisted @rrelyea ","Url":"https://github.com/dotnet/sdk/issues/2732","RelatedDescription":"Open issue \"Consume NuGet /embed assets group for interop type assemblies from NuGet package\" (#2732)"},{"Id":"388449684","IsPullRequest":true,"CreatedAt":"2018-12-07T17:24:32","Actor":"dotnet-bot","Number":"2727","RawContent":null,"Title":"Merge release/2.2.1xx to release/2.2.2xx","State":"closed","Body":"\nThis is an automatically generated pull request from release/2.2.1xx into release/2.2.2xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.2.1xx-to-release/2.2.2xx\ngit reset --hard upstream/release/2.2.2xx\ngit merge upstream/release/2.2.1xx\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.2.1xx-to-release/2.2.2xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/2727","RelatedDescription":"Closed or merged PR \"Merge release/2.2.1xx to release/2.2.2xx\" (#2727)"},{"Id":"388645904","IsPullRequest":true,"CreatedAt":"2018-12-07T17:24:10","Actor":"dotnet-maestro[bot]","Number":"2730","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18606.9\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/2730","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#2730)"},{"Id":"388718371","IsPullRequest":false,"CreatedAt":"2018-12-07T16:17:33","Actor":"AArnott","Number":"2731","RawContent":null,"Title":"Building VB console app fails, unable to find \"%TEMP%\\.NETFramework,Version=v4.6.AssemblyAttributes.vb\" file","State":"closed","Body":"Building [a trivially simple VB console app](https://github.com/AArnott/SPSS.NET/blob/5ac57c55aa10611f0f4290fbd3187375ab95c468/src/SimpleDemo/SimpleDemo.vbproj#L1-L10) fails with:\r\n\r\n>vbc : error BC2001: file 'C:\\Users\\andarno\\AppData\\Local\\Temp\\.NETFramework' could not be found [D:\\git\\SPSS.NET\\src\\SimpleDemo\\SimpleDemo.vbproj]\r\nvbc : error BC2001: file 'D:\\git\\SPSS.NET\\src\\SimpleDemo\\Version=v4.6.AssemblyAttributes.vb' could not be found [D:\\git\\SPSS.NET\\src\\SimpleDemo\\SimpleDemo.vbproj]\r\n\r\nThe VB compiler can't find *two* files, neither of which exist. Looking at the msbuild.binlog file, I can see that *one* file is added with assembly attributes by the SDK, but that file has a comma in it, which isn't properly escaped (somewhere) evidently, since by the time it is fed into the vbc.exe tool, it interprets it as two separate files, as shown here:\r\n\r\n![image](https://user-images.githubusercontent.com/3548/49659001-1e476080-f9f8-11e8-9237-834827fd6794.png)\r\n\r\nThis repros on 15.8, 15.9, and 16.0 Preview 1.","Url":"https://github.com/dotnet/sdk/issues/2731","RelatedDescription":"Closed issue \"Building VB console app fails, unable to find \"%TEMP%\\.NETFramework,Version=v4.6.AssemblyAttributes.vb\" file\" (#2731)"},{"Id":"388449696","IsPullRequest":true,"CreatedAt":"2018-12-07T01:30:08","Actor":"dotnet-bot","Number":"2728","RawContent":null,"Title":"Merge release/2.2.2xx to master","State":"closed","Body":"\nThis is an automatically generated pull request from release/2.2.2xx into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.2.2xx-to-master\ngit reset --hard upstream/master\ngit merge upstream/release/2.2.2xx\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.2.2xx-to-master --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/2728","RelatedDescription":"Closed or merged PR \"Merge release/2.2.2xx to master\" (#2728)"},{"Id":"388461573","IsPullRequest":false,"CreatedAt":"2018-12-07T00:57:37","Actor":"NTaylorMullen","Number":"2729","RawContent":null,"Title":"Represent FrameworkReference of transitive projects and packages in the deps.json file.","State":"open","Body":"Today transitive project/package references aren't properly represented in a deps.json. For instance given this project (Bug4332 is a web app, Bug4332RCL is a Razor class library, both targeting netcoreapp3.0):\r\n![image](https://user-images.githubusercontent.com/2008729/49620733-0f6c9980-f977-11e8-8da3-e2d28605a2e1.png)\r\n\r\nToday you get the following `Bug4332.deps.json` entry for `Bug4332RCL`:\r\n```JSON\r\n      \"Bug4332RCL/1.0.0\": {\r\n        \"runtime\": {\r\n          \"Bug4332RCL.dll\": {}\r\n        },\r\n        \"compile\": {\r\n          \"Bug4332RCL.dll\": {}\r\n        }\r\n      },\r\n```\r\n\r\nThe min-bar expectation would be for the deps.json to look something like:\r\n```JSON\r\n      \"Bug4332RCL/1.0.0\": {\r\n        \"dependencies\": {\r\n          \"Microsoft.AspNetCore.App\": \"3.0.0-preview-18579-0056\"\r\n        },\r\n        \"runtime\": {\r\n          \"Bug4332RCL.dll\": {}\r\n        },\r\n        \"compile\": {\r\n          \"Bug4332RCL.dll\": {}\r\n        }\r\n      },\r\n```\r\n\r\nThis is blocking [a core scenario](https://github.com/aspnet/AspNetCore/issues/4332) in ASP.NET Core MVC 3.0 of having Razor views in a class library.\r\n\r\nLastly, I imagine this issue depends on the completion of the following (please correct me if i'm wrong):\r\n- **Referencing a shared framework does not flow across ProjectReference** https://github.com/dotnet/sdk/issues/2420 \r\n- **Represent FrameworkReferences in NuGet packages and assets files** https://github.com/NuGet/Home/issues/7342 \r\n\r\n\r\n@livarcocc @dsplaisted @natemcmaster @mkArtakMSFT @rynowak","Url":"https://github.com/dotnet/sdk/issues/2729","RelatedDescription":"Open issue \"Represent FrameworkReference of transitive projects and packages in the deps.json file.\" (#2729)"},{"Id":"388363069","IsPullRequest":false,"CreatedAt":"2018-12-06T19:38:29","Actor":"sarbjithanjra","Number":"2726","RawContent":null,"Title":"Which one is latest version of .NET Core 2.2.100 or 2.2.200-preview-009648","State":"closed","Body":"Hi on 5 Dec 2018, I downloaded the .NET Core SDK with version 2.2.100 and after install on my sytem, i checked that there is an existing 2.2.200-preview-009648 version is installed. Please let me know which one latest? it seem 2.2.100 is latest as per download page but from version number it seem 2.2.200 is latest.","Url":"https://github.com/dotnet/sdk/issues/2726","RelatedDescription":"Closed issue \"Which one is latest version of .NET Core 2.2.100 or 2.2.200-preview-009648\" (#2726)"},{"Id":"387757437","IsPullRequest":false,"CreatedAt":"2018-12-05T19:45:55","Actor":"AArnott","Number":"2720","RawContent":null,"Title":" error NETSDK1005: Assets file 'D:\\a\\1\\s\\...\\project.assets.json' doesn't have a target for '.NETStandard,Version=v1.5'","State":"closed","Body":"Very similar to #1321, except that it works fine on my own machine, but [consistently fails when run in Azure Pipelines](https://dev.azure.com/azure-public/vside/_build/results?buildId=816). \r\n\r\n> C:\\hostedtoolcache\\windows\\dncs\\2.1.500\\x64\\sdk\\2.1.500\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.PackageDependencyResolution.targets(198,5): error NETSDK1005: Assets file 'D:\\a\\1\\s\\obj\\Microsoft.VisualStudio.Composition.LocalizationShell\\project.assets.json' doesn't have a target for '.NETStandard,Version=v1.5'. Ensure that restore has run and that you have included 'netstandard1.5' in the TargetFrameworks for your project. [D:\\a\\1\\s\\src\\Microsoft.VisualStudio.Composition.LocalizationShell\\Microsoft.VisualStudio.Composition.LocalizationShell.csproj]\r\n\r\nThe [LocalizationShell project targets netstandard1.0](https://github.com/Microsoft/vs-mef/blob/7059adf14349b456c8c9e633dc496b0ee1945b4b/src/Microsoft.VisualStudio.Composition.LocalizationShell/Microsoft.VisualStudio.Composition.LocalizationShell.csproj#L7), and is referenced by [a multitargeting project that targets several frameworks including netstandard1.5](https://github.com/Microsoft/vs-mef/blob/7059adf14349b456c8c9e633dc496b0ee1945b4b/src/Microsoft.VisualStudio.Composition/Microsoft.VisualStudio.Composition.csproj#L3).\r\n\r\nThe odd thing is this works on my machine, on AppVeyor, and even on Azure Pipelines in the past. But now it's consistently failing.\r\n\r\nThis *may* be a dupe of #2563","Url":"https://github.com/dotnet/sdk/issues/2720","RelatedDescription":"Closed issue \" error NETSDK1005: Assets file 'D:\\a\\1\\s\\...\\project.assets.json' doesn't have a target for '.NETStandard,Version=v1.5'\" (#2720)"},{"Id":"387825674","IsPullRequest":false,"CreatedAt":"2018-12-05T16:44:33","Actor":"xoofx","Number":"2723","RawContent":null,"Title":"How to debug msbuild?","State":"closed","Body":"Hey,\r\n\r\nSo I would like to investigate a problem related to [slow RAR in msbuild](https://github.com/Microsoft/msbuild/issues/2015) and while I have been able to initially hack something to debug msbuild, that was very convoluted, copying files around from regular Sdk...etc.\r\n\r\nSo I would like to do this more cleanly and follow a more deterministic procedure to debug directly MsBuild project from MsBuild.sln solution  (so it is issuing a dotnet msbuild.dll or msbuild.exe)  for \r\n1.  new csproj with .NET Sdk\r\n2.  regular old csproj \r\n\r\nWhich repository should I build, variable that I should set...etc.? (Or I could avoid building by reusing maybe an installed dotnet folder?)\r\n\r\n## For new csproj\r\n\r\nLet's try just on the new csproj format for now, starting with a plain `dotnet new --name Helloworld`\r\n\r\nAssuming that I built this repository, and I'm setting the MSBuildSDKsPath to point to the `artifacts\\Debug\\bin\\Sdks`\r\n\r\nI'm getting the following error:\r\n\r\n![image](https://user-images.githubusercontent.com/715038/49525579-5a6eaa00-f8ae-11e8-9220-1c9166120934.png)\r\n\r\n```\r\nProject \"C:\\Work\\tmp\\HelloWorld\\Helloworld.csproj\" on node 1 (default targets).\r\nC:\\Code\\dotnet\\sdk\\artifacts\\Debug\\bin\\Sdks\\Microsoft.NET.Sdk\\Sdk\\Sdk.props(33,11): error MSB4226: The imported project\r\n \"C:\\Code\\msbuild\\artifacts\\Debug\\bin\\MSBuild\\net472\\Current\\Microsoft.Common.props\" was not found. Also, tried to find\r\n \"Current\\Microsoft.Common.props\" in the fallback search path(s) for $(MSBuildExtensionsPath) - \"C:\\Program Files (x86)\r\n\\MSBuild\" . These search paths are defined in \"C:\\Code\\msbuild\\artifacts\\Debug\\bin\\MSBuild\\net472\\MSBuild.exe.Config\".\r\nConfirm that the path in the <Import> declaration is correct, and that the file exists on disk in one of the search pat\r\nhs. [C:\\Work\\tmp\\HelloWorld\\Helloworld.csproj]\r\nDone Building Project \"C:\\Work\\tmp\\HelloWorld\\Helloworld.csproj\" (default targets) -- FAILED.\r\n```\r\n\r\nIt is trying to resolve `artifacts\\Debug\\bin\\MSBuild\\net472\\Current\\Microsoft.Common.props` which is not in this folder.\r\nNot sure why it is trying `Current` by default, while the solution seems to build in this file in `artifacts\\Debug\\bin\\15.0\\Microsoft.Common.props` , so assume that the tooling version should be 15.0... but still, can I setup a MsBuild special variable path for pointing to this folder?\r\n\r\nSo likely after that, it will complain about missing NuGet resolver or similar. How do I pass them through?\r\n\r\ncc: @davkean @nguerrera ","Url":"https://github.com/dotnet/sdk/issues/2723","RelatedDescription":"Closed issue \"How to debug msbuild?\" (#2723)"},{"Id":"387824002","IsPullRequest":false,"CreatedAt":"2018-12-05T15:57:16","Actor":"vitek-karas","Number":"2722","RawContent":null,"Title":"RID publish as framework dependent app produces broken app on Linux","State":"open","Body":"The simplest repro:\r\n\r\nOn Linux (I used Ubuntu 18)\r\ninstall .NET Core SDK 2.2.100\r\nrun:\r\n`mkdir webapp`\r\n`cd webapp`\r\n`dotnet new web`\r\n`dotnet publish -c release -r linux-x64 --self-contained false`\r\n`./bin/release/netcoreapp2.2/linux-x64/publish/webapp`\r\n\r\nThis will fail to find a usable framework to run on.\r\n\r\nThe root cause is that when we publish a RID specific (so with apphost) app as framework dependent, for some reason the SDK includes `hostfxr` and `hostpolicy` libraries in the published folder. The `apphost` searches for `hostfxr` first in the local folder, then in global locations. Since it finds it in the local folder it uses that. Then it tries to resolve a framework, but on Linux where there is no global location for frameworks, it looks only in the local folder... and fails.\r\n\r\nOn Windows to works \"by luck\", we still load the `hostfxr` from the app, but then since we do have global location for frameworks, we end up loading the framework from the global location.\r\n\r\nDeleting the `hostfxr` and `hostpolicy` from the publish folder doesn't help, because for some reason they are listed as native runtime assets in the `.deps.json`. In fact there are native assets for `hostpolicy`, `hostfxr` and `apphost` which won't resolve at runtime either.\r\n\r\nThe SDK should not include `hostfxr`, `hostpolixy` in the publish folder and it should not include dependencies to the `Microsoft.NETCore.DotNetHostPolicy`, `Microsoft.NETCore.DotNetHostResolver` and `Microsoft.NETCore.DotNetAppHost` in the `.deps.json` since those bring wrong native assets.","Url":"https://github.com/dotnet/sdk/issues/2722","RelatedDescription":"Open issue \"RID publish as framework dependent app produces broken app on Linux\" (#2722)"},{"Id":"387804807","IsPullRequest":false,"CreatedAt":"2018-12-05T15:18:16","Actor":"NinoFloris","Number":"2721","RawContent":null,"Title":"Could not upgrade projects to new 2.2.100 sdk getting conflict warnings","State":"open","Body":"Could not upgrade all projects to new 2.2.100 sdk, as we got conflict warnings for among others \r\n\r\n```\r\n1:7>/usr/local/share/dotnet/sdk/2.2.100/Microsoft.Common.CurrentVersion.targets(2110,5): warning MSB3277: Found conflicts between different versions of \"Microsoft.AspNetCore.Authentication.Abstractions\" that couldnot be resolved.  These reference conflicts are listed in the build log when log verbosity is set to detailed. [/projpath]\r\n```\r\n\r\n- Microsoft.Extensions.Options\r\n- Microsoft.Extensions.DependencyInjection.Abstractions\r\n- Microsoft.AspNetCore.Http.Abstractions\r\n- Microsoft.Extensions.Configuration.Abstractions\r\n- Microsoft.AspNetCore.Hosting\r\n- Microsoft.AspNetCore.Hosting.Abstractions\r\n- Microsoft.EntityFrameworkCore\r\n- Microsoft.AspNetCore.WebUtilities\r\n- Microsoft.AspNetCore.Authentication.Abstractions\r\n\r\nWhat all of these packages have in common is that they list a 2.2.0 release on nuget.org\r\nhttps://www.nuget.org/packages/Microsoft.Extensions.Options/2.2.0 and if you look carefully they are all at Downloads: 0. \r\n\r\nWhich is why msbuild detailed logs gives errors like these \r\n\r\n```\r\n         Dependency \"Microsoft.Extensions.Options, Version=2.2.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60\".\r\n             Could not resolve this reference. Could not locate the assembly \"Microsoft.Extensions.Options, Version=2.2.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60\". Check to make sure the assembly exists on disk. If this reference is required by your code, you may get compilation errors.\r\n[...]\r\nThere was a conflict between \"Microsoft.Extensions.Options, Version=2.1.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60\" and \"Microsoft.Extensions.Options, Version=2.2.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60\".\r\n             \"Microsoft.Extensions.Options, Version=2.1.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60\" was chosen because it was primary and \"Microsoft.Extensions.Options, Version=2.2.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60\" was not.\r\n             References which depend on \"Microsoft.Extensions.Options, Version=2.1.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60\" [/Users/nfloris/.nuget/packages/microsoft.extensions.options/2.1.0/lib/netstandard2.0/Microsoft.Extensions.Options.dll].\r\n                 /Users/nfloris/.nuget/packages/microsoft.extensions.options/2.1.0/lib/netstandard2.0/Microsoft.Extensions.Options.dll\r\n                   Project file item includes which caused reference \"/Users/nfloris/.nuget/packages/microsoft.extensions.options/2.1.0/lib/netstandard2.0/Microsoft.Extensions.Options.dll\".\r\n                     /Users/nfloris/.nuget/packages/microsoft.extensions.options/2.1.0/lib/netstandard2.0/Microsoft.Extensions.Options.dll\r\n             References which depend on \"Microsoft.Extensions.Options, Version=2.2.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60\" [].\r\n                 myproj/bin/Debug/netcoreapp2.2/myproj.dll\r\n                   Project file item includes which caused reference \"myproj/bin/Debug/netcoreapp2.2/myproj.dll\".\r\n                     myproj/bin/Debug/netcoreapp2.2/myproj.dll\r\n```\r\n\r\n**Could not resolve this reference. Could not locate the assembly \"Microsoft.Extensions.Options, Version=2.2.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60\".**\r\n\r\nNow that seems like a problem","Url":"https://github.com/dotnet/sdk/issues/2721","RelatedDescription":"Open issue \"Could not upgrade projects to new 2.2.100 sdk getting conflict warnings\" (#2721)"}],"ResultType":"GitHubIssue"},"Announcements-Issues":{"Issues":[{"Id":"390948658","IsPullRequest":false,"CreatedAt":"2018-12-14T03:22:58","Actor":"1015450578","Number":"93","RawContent":null,"Title":"Docker image with tag '2.2-aspnetcore-runtime' is not compatible","State":"closed","Body":"1. Install  .NET Core 2.2.100 sdk\r\n2. Create a new 'AspNetCore Web Api' by using Visual Studio 2017,and enbale docker support.\r\n3. F5 ,the Output Windows shows:\r\n>It was not possible to find any compatible framework version\r\n>The specified framework 'Microsoft.AspNetCore.App', version '2.2.0' was not found.\r\n>  - Check application dependencies and target a framework version installed at:\r\n>      /usr/share/dotnet/\r\n>  - Installing .NET Core prerequisites might help resolve this problem:\r\n>     http://go.microsoft.com/fwlink/?LinkID=798306&clcid=0x409\r\n>  - The .NET Core framework and SDK can be installed from:\r\n>      https://aka.ms/dotnet-download\r\n>  - The following versions are installed:\r\n>      2.2.0-preview3-35497 at [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]","Url":"https://github.com/dotnet/announcements/issues/93","RelatedDescription":"Closed issue \"Docker image with tag '2.2-aspnetcore-runtime' is not compatible\" (#93)"},{"Id":"390193072","IsPullRequest":false,"CreatedAt":"2018-12-12T12:56:53","Actor":"bilalMlaik","Number":"92","RawContent":null,"Title":".net core Console","State":"closed","Body":"I am running dot net core console app as web jobs and it is working perfectly in docker with docker compose. Now the issue is I want to pass a value to the application via Console.ReadLine() over this value i make some decision but i am unable to pass value via Console.ReadLine(). How i can do it please help me. For more understanding, i have added my docker compose file below\r\n`version: '3.4'\r\n\r\nservices:\r\n  \r\n  tt.core.web:\r\n    image: ${DOCKER_REGISTRY-}ttcoreweb\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.Web/Dockerfile\r\n    depends_on:\r\n     - db\r\n    networks:\r\n     - app-network\r\n\r\n  tt.core.downtime.webjob:\r\n    image: ${DOCKER_REGISTRY-}ttcoredowntimewebjob\r\n    environment:\r\n      CORE_ENVIRONMENT: devdocker\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.Downtime.Webjob/Dockerfile\r\n    depends_on:\r\n     - db\r\n     - tt.core.web\r\n    networks:\r\n     - app-network\r\n\r\n  db:\r\n    image: microsoft/mssql-server-linux\r\n    container_name: db\r\n    environment:\r\n      SA_PASSWORD: \"Thingtrax%1\"\r\n      ACCEPT_EULA: \"Y\"\r\n      MSSQL_PID: Express\r\n    ports:\r\n      - \"7002:1433\"\r\n    networks:\r\n      app-network:\r\n        ipv4_address: 172.24.0.2\r\n\r\nnetworks:\r\n  app-network:\r\n    ipam:\r\n      driver: default\r\n      config:\r\n        - subnet: 172.24.0.0/16\r\n\r\n`\r\nIf the detail is not enough or you do not get my point, you can share your confusion in comment","Url":"https://github.com/dotnet/announcements/issues/92","RelatedDescription":"Closed issue \".net core Console\" (#92)"},{"Id":"380346599","IsPullRequest":false,"CreatedAt":"2018-11-13T17:44:44","Actor":"leecow","Number":"91","RawContent":null,"Title":"November 2018 .NET Updates","State":"open","Body":"# November 2018 .NET Updates\r\n\r\nThe following .NET updates were released in November 2018. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Core\r\n\r\n* [.NET Core November 2018 (2.1.6 and SDK 2.1.500) Update release notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.6/2.1.6.md)\r\n\r\nA [discussion issue](https://github.com/dotnet/core/issues/2053) is available for questions or feedback about this release.\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n* [October 2018](https://github.com/dotnet/announcements/issues/89)\r\n* [September 2018](https://github.com/dotnet/announcements/issues/84)\r\n* [August 2018](https://github.com/dotnet/announcements/issues/79)\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)","Url":"https://github.com/dotnet/announcements/issues/91","RelatedDescription":"Open issue \"November 2018 .NET Updates\" (#91)"},{"Id":"375230004","IsPullRequest":false,"CreatedAt":"2018-10-29T21:45:27","Actor":"terrajobst","Number":"90","RawContent":null,"Title":"The future of JSON in .NET Core 3.0","State":"open","Body":"JSON has become an essential part of virtually all modern .NET applications and in many cases even surpassed the usage of XML. However, .NET hasn't had a (great) built-in way to deal with JSON. Instead we've relied on [Json.NET] which continues to serve the .NET ecosystem well.\r\n\r\n[Json.NET]: https://www.newtonsoft.com/json\r\n\r\nMoving forward, we plan on making some changes to our JSON support:\r\n\r\n* **We need high-performance JSON APIs**. We need a new set of JSON APIs that are highly tuned for performance by using `Span<T>` and allows for processing UTF-8 directly without having to transcode to UTF-16 `string` instances. Both aspects are critical for our web server Kestrel, where throughput is a key requirement.\r\n\r\n* **Remove dependency from ASP.NET Core to Json.NET**. Today, ASP.NET Core has a dependency on Json.NET. While this provides a tight integration between ASP.NET Core and Json.NET, it also means that application developers cannot freely choose which JSON library they are using. This is also problematic for customers of Json.NET as the version is dictated by the underlying platform. However, Json.NET is frequently updated and application developers often want to -- or even have to -- use a specific version. Thus, we want to remove the dependency from ASP.NET Core 3.0 to Json.NET so that customers can choose which version to use, without fearing they might accidentally break the underlying platform. In addition, this makes it also possible to plug-in an entirely different JSON library.\r\n\r\n* **Provide an ASP.NET Core integration package for Json.NET**. Json.NET has basically become the Swiss Army knife of JSON processing in .NET. It provides many options and facilities that allow customers to handle their JSON needs with ease. We don't want to compromise on the Json.NET support customers are getting today, for example, the ability to configure the JSON serialization via the `AddJsonOptions` extension method. Thus, we want to provide the Json.NET integration as a NuGet package that developers can optionally install so they get all the bells and whistles they get from Json.NET today. The other part of this work item is to ensure we have the right extension points so that other parties can provide similar integration packages for their JSON library of choice.\r\n\r\nBelow are more details around this plan.\r\n\r\n## The need for high-performance JSON APIs\r\n\r\nThe requirements for the .NET stack have changed a bit since the arrival of .NET Core. Historically, .NET has valued usability and convenience. With .NET Core, we've added a focus on performance, and we've made significant investments to serve high performance needs. And the [improvements we made][techempower] in the popular TechEmpower benchmark are a testament to that.\r\n\r\n[techempower]: https://www.techempower.com/blog/2016/11/16/framework-benchmarks-round-13/\r\n\r\nWith .NET Core 2.1, we've added a brand new primitive called [Span\\<T>][span-msdn] that allows us to represent native memory and arrays in a uniform way. With this type, we've also added a set of parsing and encoding APIs that are much more memory efficient without having to resort to unsafe code.\r\n\r\n[span-msdn]: https://msdn.microsoft.com/en-us/magazine/mt814808.aspx\r\n\r\nPart of the work of minimizing allocations is to avoid having to transcode UTF-8 payloads into UTF-16 strings, purely for parsing reasons. Currently, Json.NET is implemented by reading UTF-16. We need the ability to read (and write) JSON documents directly in UTF-8 because most network protocols (including HTTP) use UTF-8.\r\n\r\nDuring .NET Core 2.1 we've learned that updating our existing APIs to leverage `Span<T>` has limits. While we did add a bunch of overloads that accept spans, we also had to produce brand new APIs that are designed around minimizing allocations and dealing with buffers, which we exposed in `System.Buffers` namespaces. And with `System.IO.Pipelines` we've also added a programming model that enables developers to share buffers without having to deal with lifetime issues.\r\n\r\nBased on these experiences we believe in order to support JSON parsing, we'll need to expose a new set of JSON APIs that are specifically geared for high-performance scenarios.\r\n\r\nYou might wonder why we can't just update Json.NET to include support for parsing JSON using `Span<T>`? Well, James Newton-King -- the author of Json.NET -- has the following to say about that:\r\n\r\n> Json.NET was created over 10 years ago, and since then it has added a wide range of features aimed to help developers work with JSON in .NET. In that time Json.NET has also become far and away NuGet's most depended on and downloaded package, and is the go-to library for JSON support in .NET. Unfortunately, Json.NET's wealth of features and popularity works against making major changes to it. Supporting new technologies like `Span<T>` would require fundamental breaking changes to the library and would disrupt existing applications and libraries that depend on it.\r\n>\r\n> Going forward Json.NET will continue to be worked on and invested in, both addressing known issues today and supporting new platforms in the future. Json.NET has always existed alongside other JSON libraries for .NET, and there will be nothing to prevent you using one or more together, depending on whether you need the performance of the new JSON APIs or the large feature set of Json.NET.\r\n\r\n## Move Json.NET integration into a separate NuGet package\r\n\r\nToday, you cannot use ASP.NET Core without Json.NET because it is a dependency of ASP.NET Core itself. Over the years, we've received feedback that the dependency can conflict with other libraries that have their own dependency on a different version of Json.NET. In the past, we've considered addressing this issue by using a private copy of Json.NET in ASP.NET. However, this would create problems when developers want to configure Json.NET (for instance, in order to control how the serializer behaves when formatting JSON objects).\r\n\r\nMoving forward we'd like to:\r\n\r\n1. Replace the internal usage of Json.NET in ASP.NET Core by the new platform-provided JSON APIs.\r\n\r\n2. Factor the public facing usage of Json.NET into an optional integration package that can be acquired from NuGet.\r\n\r\nSo the existing integration between ASP.NET Core and Json.NET will continue to be supported, but will be moving out of the platform and into a separate package. However, since the integration is then designed to sit on top of the platform, it will also allow customers to update Json.NET to later versions.\r\n\r\nFurthermore, customers who need more performance can also choose to use the new JSON APIs, at the expense of the rich feature set that Json.NET offers.\r\n\r\n## Discussion\r\n\r\nFor a discussion, please go to https://github.com/dotnet/corefx/issues/33115.","Url":"https://github.com/dotnet/announcements/issues/90","RelatedDescription":"Open issue \"The future of JSON in .NET Core 3.0\" (#90)"},{"Id":"368440353","IsPullRequest":false,"CreatedAt":"2018-10-09T23:44:06","Actor":"vivmishra","Number":"89","RawContent":null,"Title":"October 2018 .NET Updates","State":"open","Body":"# October 2018 .NET Updates\r\n\r\nThe following .NET updates were released in October 2018. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Core\r\n\r\n* [.NET Core October 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/10/09/net-core-october-2018-update-net-core-1-0-and-1-1/)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n* [September 2018](https://github.com/dotnet/announcements/issues/84)\r\n* [August 2018](https://github.com/dotnet/announcements/issues/79)\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)","Url":"https://github.com/dotnet/announcements/issues/89","RelatedDescription":"Open issue \"October 2018 .NET Updates\" (#89)"},{"Id":"368429033","IsPullRequest":false,"CreatedAt":"2018-10-09T22:51:18","Actor":"leecow","Number":"88","RawContent":null,"Title":"Microsoft Security Advisory CVE-2018-8292: .NET Core Information Disclosure Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-8292: .NET Core Information Disclosure Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a security feature bypass vulnerability that exists when .NET Core when HTTP authentication information is inadvertently exposed in an outbound request that encounters an HTTP redirect. An attacker who successfully exploited this vulnerability could use the information to further compromise the web application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core applications handles HTTP redirects.\r\n\r\nSystem administrators running .NET Core 1.0 or .NET Core 1.1 applications must update their .NET Core runtimes to versions 1.0.13 and 1.1.10 then restart their applications. If installed applications target .NET Core 2.0, the applications must be migrated to 2.1 or newer and redeployed.\r\n\r\nDevelopers must update their .NET Core SDK to versions 1.1.11 and migrate any [.NET Core 2.0](https://docs.microsoft.com/dotnet/core/migration/20-21) or [ASP.NET Core 2.0](https://docs.microsoft.com/aspnet/core/migration/20_21?view=aspnetcore-2.1) applications to 2.1 then redeploy.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at <https://github.com/dotnet/corefx/issues/32730>\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nNone\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core application that runs on a .NET Core 1.0.x runtime with a version number of 1.0.12 or lower, or a .NET Core application that runs on a .NET Core 1.1.x runtime with a version number of 1.1.9 or lower, or a .NET Core application that runs on a .NET Core 2.0.x runtime.\r\n\r\nAdditionally package authors should check their dependencies to ensure they aren't depending on a vulnerable version of the following package:\r\n\r\n<a name=\"package-list\"></a>Package name | Vulnerable versions | Secure versions\r\n------------ | ---------------- | -------------------------\r\nSystem.Net.Http| 2.0.20126.16343, 2.0.20505, 2.0.20710, 4.0.0, 4.1.0, 4.1.1, 4.1.2, 4.3.0, 4.3.1, 4.3.2, 4.3.3 |  4.3.4 or later\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nAny .NET Core application that runs on a .NET Core 1.0.x runtime with a version number of 1.0.12 or lower, or a .NET Core application that runs on a .NET Core 1.1.x runtime with a version number of 1.1.9 or lower, or a .NET Core application that runs on a .NET Core 2.0.x runtime.\r\n\r\nTo check the currently installed runtimes and SDKs with version 2.1 or later of .NET Core, open a command prompt and run the `dotnet --info` command. You should see an output similar to the following:\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.1.403\r\n Commit:    04e15494b6\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17763\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.403\\\r\n\r\nHost (useful for support):\r\n  Version: 2.1.5\r\n  Commit:  290303f510\r\n\r\n.NET Core SDKs installed:\r\n  1.0.4 [C:\\Program Files\\dotnet\\sdk]\r\n  1.1.10 [C:\\Program Files\\dotnet\\sdk]\r\n  2.0.3 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.4 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf you don't see a runtime entry for 1.0.13 or 1.1.10, any .NET Core 1.x applications run on that computer are vulnerable.\r\n\r\nIf you don't have a 2.1 version of the runtime or SDK installed, you can produce the complete list of runtimes by performing a directory listing in the install root directories. The default root directories are listed in the following table:\r\n\r\n| Operating System | Location |\r\n|------------------|----------|\r\n| Windows | `C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\` |\r\n| macOS | `/usr/local/share/dotnet/shared/Microsoft.NETCore.App/` |\r\n| Supported Linux platforms | `/usr/share/dotnet/shared/Microsoft.NETCore.App/` |\r\n\r\nEach runtime version is installed in its own directory, where the directory name is the version number. If you don't have a directory for 1.0.13, 1.1.10 then any application targeting versions 1.0 or 1.1 are vulnerable.\r\n\r\nAdditionally, if you've deployed [self-contained applications](https://docs.microsoft.com/dotnet/core/deploying/#self-contained-deployments-scd) targeting any of the impacted versions, these applications are also vulnerable and must be recompiled and redeployed.\r\n\r\n### <a name=\"fix-runtime\">How do I fix the vulnerability?\r\n\r\nSystem administrators are advised to update their .NET Core runtimes to versions 1.0.13, 1.1.10 and install the latest 2.1 runtime, ensuring that any 2.0 applications are migrated to 2.1 as soon as possible.\r\n\r\n Developers are advised to update their .NET Core SDK to versions 1.1.11 and migrate any [.NET Core](https://docs.microsoft.com/dotnet/core/migration/20-21) or [ASP.NET Core 2.0](https://docs.microsoft.com/aspnet/core/migration/20_21?view=aspnetcore-2.1) applications to 2.1 and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at <https://github.com/dotnet/> and <https://github.com/aspnet/>, respectively. The Announcements repo for each product (<https://github.com/dotnet/Announcements> and <https://github.com/aspnet/Announcements>) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2018-8292](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-CVE-2018-8292)\r\n\r\n### Revisions\r\n\r\nV1.0 (October 10, 2018): Advisory published.\r\n_Version 1.0_\r\n_Last Updated 2018-10-10_\r\n","Url":"https://github.com/dotnet/announcements/issues/88","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2018-8292: .NET Core Information Disclosure Vulnerability\" (#88)"},{"Id":"367393517","IsPullRequest":false,"CreatedAt":"2018-10-05T22:58:51","Actor":"leecow","Number":"87","RawContent":null,"Title":".NET Core Release Data (releases.json) Redesign and v1 Deprecation Plan","State":"open","Body":"# .NET Core Release Data (releases.json) Redesign and Deprecation\r\n\r\nThe releases.json and releases.csv files began life as helper tools for some of our internal release work, some experimentation and to possibly be useful to the community. It has been great to learn the files are indeed in use and many folks depend on them as a trigger for a number of activities.\r\n\r\n* [release-notes/releases.json](https://github.com/dotnet/core/blob/master/release-notes/releases.json)\r\n* [release-notes/releases.csv](https://github.com/dotnet/core/blob/master/release-notes/releases.csv)\r\n\r\nA discussion topic is available to share thoughts and see what others are thinking at https://github.com/dotnet/core/issues/1986\r\n\r\nBetween the usages which we have become aware and in considering further activities that could be enabled to reason about things such as checking .NET Core version availability and support status, it became clear the current format is inadequate.\r\n\r\nAn updated format has been designed and tested which will replace the current files. The timeline below describes the path to obsoleting the current files.\r\n\r\n## The Plan\r\n\r\n| Date | Action |\r\n| :--- | :----- |\r\n| Oct 2018 | Notify the community of the coming change |\r\n| Oct 2018 | Release the new json format into dotnet/core |\r\n| Oct 2018 - Feb 2019 | Maintain the old json and csv files |\r\n| Feb 2019 | Reminder announcement that old format file is coming soon |\r\n| Mar 2019 | Old json and csv files are obsoleted and removed from dotnet/core |\r\n\r\n## Breaking change\r\n\r\nIf you are currently utilizing the old version json or csv, you will need to update the relevant code to work with the new format. If you are just getting started with consuming this data, use the new version.\r\n\r\n## The Format\r\n\r\nBelow are fragments of the files from our most recent .NET Core release.\r\n\r\n### release-index.json\r\n\r\nThis file consists of a top level array with data on the latest release versions and a property for locating the more detailed channel-specific releases.json. This file is found in [dotnet/core/release-notes](https://github.com/dotnet/core/tree/new-json/release-notes/)\r\n\r\n[releases-index.json](https://github.com/dotnet/core/blob/new-json/release-notes/releases-index.json)\r\n\r\n```\r\n{\r\n    \"releases-index\": [\r\n        {\r\n            \"channel-version\": \"2.1\",\r\n            \"latest-release\": \"2.1.5\",\r\n            \"latest-release-date\":\"2018-10-02\",\r\n            \"product\": \".NET Core\",\r\n            \"support-phase\": \"lts\",\r\n            \"eol-date\": \"\",\r\n            \"releases.json\": \"https://github.com/dotnet/core/blob/master/release-notes/2.1/releases.json\",\r\n        },\r\n        ...\r\n}\r\n```\r\n\r\n### releases.json\r\n\r\nThis file provides detailed data for each release. A copy of this file will be found in each versioned directories under [dotnet/core/release-notes](https://github.com/dotnet/core/release-notes). For example [dotnet/core/release-notes/2.1](https://github.com/dotnet/core/tree/new-json/release-notes/2.1)\r\n\r\n\r\n[releases.json](https://github.com/dotnet/core/tree/new-json/release-notes/2.1/releases.json)\r\n\r\n```\r\n{\r\n    \"channel-version\": \"2.1\",\r\n    \"latest-release\": \"2.1.5\",\r\n    \"latest-release-date\":\"2018-10-12\",\r\n    \"support-phase\": \"lts\",\r\n    \"eol-date\": \"\",\r\n    \"lifecycle-policy\": \"https://www.microsoft.com/net/support/policy\",\r\n    \"releases\":\r\n    [\r\n        {\r\n            \"release-date\":  \"2018-10-02\",\r\n            \"release-version\":  \"2.1.5\",\r\n            \"security\":  false,\r\n            \"release-notes\":  \"https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.5/2.1.5.md\",\r\n            \"runtime\":  \r\n            {\r\n                \"version\":  \"2.1.5\",\r\n                \"version-display\":  \"2.1.5\",\r\n                \"vs-version\":  \"15.8.6\",\r\n                \"files\":  \r\n                [\r\n                    {\r\n                        \"name\": \"dotnet-runtime-linux-arm.tar.gz\",\r\n                        \"url\": \"https://download.visualstudio.microsoft.com/download/pr/4d555219-1f04-47c6-90e5-8b3ff8989b9c/0798763e6e4b98a62846116f997d046e/dotnet-runtime-2.1.5-linux-arm.tar.gz\",\r\n                        \"hash\": \"89a77a07065ea24e7198c77a233b9ce5c6cf51b1deb2ef55c88f0adbb2ecd9db1ba4e7d55eec2ef7139c47f91346fed360161a5bb6e3a7ccfc4559bcde286364\"\r\n                    },\r\n                    ...\r\n                ]\r\n            }\r\n            \"sdk\":  \r\n            {\r\n                \"version\":  \"2.1.403\",\r\n                \"version-display\":  \"2.1.403\",\r\n                \"vs-version\":  \"15.8.6\",\r\n                \"csharp-language\":  \"7.3\",\r\n                \"fsharp-language\":  \"4.5\",\r\n                \"files\":  \r\n                [...]\r\n            }\r\n        }\r\n    ]\r\n}\r\n```","Url":"https://github.com/dotnet/announcements/issues/87","RelatedDescription":"Open issue \".NET Core Release Data (releases.json) Redesign and v1 Deprecation Plan\" (#87)"},{"Id":"366416503","IsPullRequest":false,"CreatedAt":"2018-10-03T16:11:18","Actor":"leecow","Number":"86","RawContent":null,"Title":".NET Core 2.0 has reached end of life","State":"open","Body":"[.NET Core 2.0 reached end of life](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/) on October 1, 2018. This means [.NET Core 2.0](https://blogs.msdn.microsoft.com/dotnet/2017/08/14/announcing-net-core-2-0/) is no longer supported and updates will no longer be provided. We recommend moving to [.NET Core 2.1](https://blogs.msdn.microsoft.com/dotnet/2018/05/30/announcing-net-core-2-1/), our long term support (LTS) release.\r\n\r\n- [Download .NET Core 2.1](https://www.microsoft.com/net/download/dotnet-core/2.1)\r\n- [.NET Core 2.1 LTS statement](https://blogs.msdn.microsoft.com/dotnet/2018/08/21/net-core-august-2018-update/)\r\n- [.NET Core 2.0 end-of-life statement](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/)\r\n\r\n## Discussion\r\n\r\nPlease share you thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet/core#1983](https://github.com/dotnet/core/issues/1983)\r\n\r\n## Lifecycle Context\r\n\r\n.NET Core releases belong to one of two [support lifecycles](https://www.microsoft.com/net/platform/support-policy): long term support (LTS) and Current. LTS releases are stable release which receive critical updates and are supported for at least three years. Current releases can include new features that may undergo future change based on feedback. Current releases are supported for three months after the subsequent .NET Core major or minor release. Both LTS and Current releases receive critical fixes throughout their lifecycle, for security, reliability, or to add support for new operating system versions. You must stay up-to-date with the latest patches to qualify for support. \r\n\r\n## .NET Core 2.0 Lifecycle\r\n\r\n[.NET Core 2.0](https://blogs.msdn.microsoft.com/dotnet/2017/08/14/announcing-net-core-2-0/) was released in August 2017 as a Current release. Per the lifecycle policy, Current releases reach end of life 3 months after a subsequent release (Current or LTS). .NET Core 2.1 released May 2018 and began the end of life countdown for .NET Core 2.0. The 3 month maintenance period for .NET Core 2.0 was scheduled to end August 2018 but was [extended to October](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/) to allow time to address an issue some customers were experiencing while migrating to .NET Core 2.1.\r\n\r\n## .NET Core 2.0 Downloads\r\n\r\n.NET Core 2.0 installers, zips and tar.gzs will remain available, but unsupported. This includes existing releases available on Linux package feeds. Previous versions, including 2.0, will be accessible through the [Download Archives](https://www.microsoft.com/net/download/archives). \r\n\r\n## .NET Core 2.0 Docker Images\r\n\r\n.NET Core 2.0 will be removed from the .NET and ASP.NET Docker repo READMEs, however the existing images remain available in those repos.\r\n\r\n* [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/)\r\n* [microsoft/dotnet-nightly](https://hub.docker.com/r/microsoft/dotnet-nightly/)\r\n* [microsoft/aspnetcore](https://hub.docker.com/r/microsoft/aspnetcore/)\r\n* [microsoft/aspnetcore-build](https://hub.docker.com/r/microsoft/aspnetcore-build/)\r\n\r\n## Policy Information\r\n\r\nAdditional lifecycle and support details  and background can be seen in the following:\r\n\r\n* [.NET Core Support Lifecycle](https://www.microsoft.com/net/platform/support-policy)\r\n* [Support and Versioning](https://blogs.msdn.microsoft.com/dotnet/2016/07/26/net-support-and-versioning/)\r\n* [2.0 end of life early announcement](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n","Url":"https://github.com/dotnet/announcements/issues/86","RelatedDescription":"Open issue \".NET Core 2.0 has reached end of life\" (#86)"},{"Id":"361098704","IsPullRequest":false,"CreatedAt":"2018-09-18T01:10:23","Actor":"spshant","Number":"85","RawContent":null,"Title":"NET Framework 4.8 Early Access build 3646 is available!","State":"open","Body":"Today, we are happy to share an Early Access build for the .NET Framework 4.8. This includes an updated .NET 4.8 runtime as well as the .NET 4.8 Developer Pack (a a single package that bundles the .NET Framework 4.8 runtime, the .NET 4.8 Targeting Pack, and the .NET Framework 4.8 SDK). \r\n\r\nPlease help us ensure this is a high quality and compatible release by trying out this build and exploring the new features. \r\n\r\n**Next steps:**\r\nTo explore the new features, download the [.NET 4.8 Developer Pack build 3646](https://go.microsoft.com/fwlink/?LinkId=2018486).  Instead, if you want to try just the .NET 4.8 runtime, you can download either of these:\r\n•\t[.NET 4.8 Web Installer](https://go.microsoft.com/fwlink/?LinkId=2018525) - requires an internet connection during installation \r\n•\t[.NET 4.8 Offline installer](https://go.microsoft.com/fwlink/?LinkId=2018531) - can be downloaded and installed later in a disconnected state\r\n\r\nPlease provide your feedback by [reporting an issue at the .NET Framework Early Access GitHub repository](https://github.com/Microsoft/dotnet-framework-early-access/issues/new).\r\n\r\n**Note**: this release is still under development, you can expect to see more features and fixes in future preview builds. Also, a reminder that this build is not supported for production use.\r\n\r\nThis preview build 3646 includes improvements/fixes in the following areas:\r\n•\t**[Runtime]** JIT and NGEN improvements\r\n•\t**[Windows Forms]** Accessibility enhancements\r\n•\t**[WPF]** SelectionTextBrush Property\r\n•\t**[BCL]** Updated ZLib\r\n\r\nYou can see the complete list of improvements in this build [here](https://github.com/Microsoft/dotnet-framework-early-access/blob/master/release-notes/NET48/build-3646/changes.md).\r\n\r\n.NET Framework build 3646 is also included in the next update for Windows 10. You can sign up for [Windows Insiders](https://insider.windows.com/en-us/) to validate that your applications work great on the latest .NET Framework included in the latest Windows 10 releases.\r\n","Url":"https://github.com/dotnet/announcements/issues/85","RelatedDescription":"Open issue \"NET Framework 4.8 Early Access build 3646 is available!\" (#85)"},{"Id":"359151445","IsPullRequest":false,"CreatedAt":"2018-09-11T17:44:50","Actor":"leecow","Number":"84","RawContent":null,"Title":"September 2018 .NET Updates","State":"open","Body":"# September 2018 .NET Updates\r\n\r\nThe following .NET updates were released in September 2018. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Framework\r\n* [.NET Framework September 2018 Security and Quality Rollup - September 11, 2018](https://blogs.msdn.microsoft.com/dotnet/2018/09/11/net-framework-september-2018-security-and-quality-rollup/)\r\n\r\n## .NET Core\r\n\r\n* [.NET Core September 2018 Update - September 11, 2018](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.4/2.1.4.md)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n\r\n* [August 2018](https://github.com/dotnet/announcements/issues/79)\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)","Url":"https://github.com/dotnet/announcements/issues/84","RelatedDescription":"Open issue \"September 2018 .NET Updates\" (#84)"},{"Id":"359136325","IsPullRequest":false,"CreatedAt":"2018-09-11T17:00:55","Actor":"blowdart","Number":"83","RawContent":null,"Title":"Microsoft Security Advisory CVE-2018-8409: .NET Core Denial Of Service Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-8409: .NET Core Denial Of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a denial of service vulnerability in .NET Core when System.IO.Pipelines improperly handles requests. An attacker who successfully exploited this vulnerability could cause a denial of service against an application that is leveraging System.IO.Pipelines. The vulnerability can be exploited remotely, without authentication. A remote unauthenticated attacker could exploit this vulnerability by providing specially crafted requests to the application.\r\n\r\nThe update addresses the vulnerability by correcting how System.IO.Pipelines handles requests.\r\n\r\nIf you are using ASP.NET Core 2.1 you will also need to update your ASP.NET version this by following the instructions in the [ASP.NET Core bulletin](https://github.com/aspnet/Announcements/issues/316).\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/32228\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nThere are no mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the System.IO.Pipelines package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.IO.Pipelines | 4.5.0 | 4.5.1\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n#### Applications which use System.IO.Pipelines\r\n\r\nSystem.IO.Pipelines is distributed both in ASP.NET Core 2.1 and separately as a NuGet package. If you are not using Microsoft.AspNetCore.App or .All, you may still be affected if you are referencing the System.IO.Pipelines package.\r\n\r\n##### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file. They can be fixed by [editing the project file](#fixing-direct-dependencies) or using NuGet to update the dependency.\r\n\r\n##### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects\r\n\r\nThe `project.assets.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json)).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `System.IO.Pipelines/4.5.0` is a reference to version 4.5.0 of `System.IO.Pipelines`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\n#### <a name=\"fixing-direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.IO.Pipelines\" Version=\"4.5.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.IO.Pipelines` version 4.5.0\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.IO.Pipelines` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.IO.Pipelines\" Version=\"4.5.1\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"transitive-dependencies\"></a>Fixing transitive dependencies\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.IO.Pipelines\" Version=\"4.5.1\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n#### Rebuilding your application\r\n\r\nFinally you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2018-8409](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-CVE-2018-8409)\r\n\r\n### Revisions\r\n\r\nV1.0 (September 11, 2018): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2018-09-11_\r\n","Url":"https://github.com/dotnet/announcements/issues/83","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2018-8409: .NET Core Denial Of Service Vulnerability\" (#83)"},{"Id":"357399856","IsPullRequest":false,"CreatedAt":"2018-09-05T20:56:25","Actor":"richlander","Number":"82","RawContent":null,"Title":".NET Core Runtime ARM64 Status","State":"open","Body":"# .NET Core Runtime ARM64 Status\r\n\r\nThe .NET Core team is in the process of adding support for ARM64, as part of the .NET Core 3.0 project. This issue will be updated as ARM64 support progresses.\r\n\r\nInitial support for ARM64 was added in the .NET Core 2.1 release. The team is not maintaining .NET Core 2.x branches with respect to ARM64. All ARM64 improvements will be made in the .NET Core 3.0 branch (currently [master](https://github.com/dotnet/coreclr)).\r\n\r\nSee [Installing .NET Core 3.0 on Linux ARM64](https://gist.github.com/richlander/467813274cea8abc624553ee72b28213) to install .NET Core on your ARM64 machine. Builds are available from the [daily builds page](https://github.com/dotnet/core/blob/master/daily-builds.md).\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet/coreclr #19843](https://github.com/dotnet/coreclr/issues/19843)\r\n\r\n## Current Status\r\n\r\nARM64 builds are functional, for console apps. ASP.NET Core is not yet functional.\r\n\r\nSee following known issues:\r\n\r\n* [dotnet/core-sdk #75](https://github.com/dotnet/core-sdk/issues/75)\r\n* [dotnet/core-sdk #76](https://github.com/dotnet/core-sdk/issues/76)\r\n\r\n## Bug Queries\r\n\r\nthe following bugs queries are available for ARM64:\r\n\r\n* [dotnet/coreclr](https://github.com/dotnet/coreclr/issues?q=is%3Aopen+is%3Aissue+label%3Aarch-arm64)\r\n* [dotnet/corefx](https://github.com/dotnet/corefx/issues?q=is%3Aopen+is%3Aissue+label%3Aarch-arm64)\r\n\r\n## Operating Systems\r\n\r\n.NET Core 3.0 ARM64 builds have been tested on the following operating systems:\r\n\r\n* Ubuntu 16.04\r\n* Windows 10\r\n\r\n## Test Hardware\r\n\r\n.NET Core 3.0 ARM64 builds have been tested on the following hardware:\r\n\r\n* [NVIDIA Jetson TX2 Module](https://developer.nvidia.com/embedded/buy/jetson-tx2)\r\n* [Pine A64](https://www.pine64.org/?page_id=46823)\r\n* [Qualcomm Centriq 2400](https://www.qualcomm.com/products/qualcomm-centriq-2400-processor)\r\n* [Qualcomm Snapdragon](https://www.qualcomm.com/snapdragon/always-connected-pc)\r\n* [Raspberry Pi3](https://www.raspberrypi.org/products/raspberry-pi-3-model-b-plus/)","Url":"https://github.com/dotnet/announcements/issues/82","RelatedDescription":"Open issue \".NET Core Runtime ARM64 Status\" (#82)"},{"Id":"349693735","IsPullRequest":false,"CreatedAt":"2018-08-22T18:23:01","Actor":"richlander","Number":"80","RawContent":null,"Title":"Improving Performance of ARM32 Docker Images with .NET Core Package Cache","State":"closed","Body":"# Improving Performance of ARM32 Docker Images with .NET Core Package Cache\r\n\r\n.NET Core SDK distributions include a compressed copy of NuGet packages for .NET Core, ASP.NET Core and EF Core. These packages are decompressed upon installation of the .NET Core SDK. The packages are not currently included in ARM32 distributions due to the time and space cost to decompress the packages. Instead, they will be added to [.NET Core ARM32 Docker images](https://hub.docker.com/r/microsoft/dotnet/), where these costs can be paid as part of image creation.\r\n\r\nThese NuGet packages include content for two purposes:\r\n\r\n- Reference assemblies for .NET Core, for code compilation.\r\n- Pre-compiled assemblies (compiled with [crossgen](https://github.com/dotnet/coreclr/blob/master/Documentation/building/crossgen.md)) for .NET Core, for use in self-contained applications.\r\n\r\nIn both cases, the presence of these packages avoid the need to access remote NuGet feeds for .NET Core assemblies as part of package restore.\r\n\r\nThis change only affects [.NET Core 2.1 SDK ARM32 Docker images](https://hub.docker.com/r/microsoft/dotnet/). This change will be made in August 2018.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet/dotnet-docker #653](https://github.com/dotnet/dotnet-docker/issues/653)\r\n\r\n## .NET Core SDK NugetFallbackFolder\r\n\r\nThe .NET Core SDK includes a compressed copy of all NuGet package, in LZMA format. It exists at the following version-specific location:\r\n\r\n```\r\nroot@3778032bc43d:/# ls -l /usr/share/dotnet/sdk/2.1.302/*.lzma\r\n-rw-r--r-- 1 1004 sudo 35995936 Jul  2 22:51 /usr/share/dotnet/sdk/2.1.302/nuGetPackagesArchive.lzma\r\n```\r\n\r\nThis file is decompressed to the following location: `/usr/share/dotnet/sdk/NuGetFallbackFolder/`\r\n\r\nA package restore for a .NET Core assembly will restore the assembly from the NuGetFallbackFolder location and copy it to the user NuGet cache. At that point, regular NuGet behavior is used.\r\n\r\n## Impact of this change\r\n\r\nThere should be no functional difference in behavior after this change. .NET SDK commands should complete faster and require fewer package restore network requests.\r\n\r\nThe following examples demonstrates the benefit of this change. The improvement can be observed with package restore. Build times (assuming no restore) are not affected.\r\n\r\n### .NET Core 2.1 SDK image after this change\r\n\r\n> The change has already been made in the `microsoft/dotnet-nightly` repo, as you can see in the example below. In August, this same change will be made available in the `microsoft/dotnet` repo.\r\n\r\n```console\r\npi@raspberrypi:~ $ docker run -it --rm microsoft/dotnet-nightly:2.1-sdk\r\nroot@416731f24915:/# time dotnet new mvc -o mvcapp\r\nGetting ready...\r\nThe template \"ASP.NET Core Web App (Model-View-Controller)\" was created successfully.\r\nThis template contains technologies from parties other than Microsoft, see https://aka.ms/aspnetcore-template-3pn-210 for details.\r\n\r\nProcessing post-creation actions...\r\nRunning 'dotnet restore' on mvcapp/mvcapp.csproj...\r\n  Restoring packages for /mvcapp/mvcapp.csproj...\r\n  Generating MSBuild file /mvcapp/obj/mvcapp.csproj.nuget.g.props.\r\n  Generating MSBuild file /mvcapp/obj/mvcapp.csproj.nuget.g.targets.\r\n  Restore completed in 6.68 sec for /mvcapp/mvcapp.csproj.\r\n\r\nRestore succeeded.\r\n\r\n\r\nreal    0m32.496s\r\nuser    0m35.820s\r\nsys     0m4.280s\r\nroot@416731f24915:/# cd mvcapp/\r\nroot@416731f24915:/mvcapp# time dotnet build\r\nMicrosoft (R) Build Engine version 15.8.138-preview+ge0cd4f1c1f for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  Restore completed in 524.78 ms for /mvcapp/mvcapp.csproj.\r\n/usr/share/dotnet/sdk/2.1.401-preview-009081/Sdks/Microsoft.NET.Sdk/targets/Microsoft.NET.RuntimeIdentifierInference.targets(143,5): message NETSDK1057: You are working with a preview version of the .NET Core SDK. You can define the SDK version via a global.json file in the current project. More at https://go.microsoft.com/fwlink/?linkid=869452 [/mvcapp/mvcapp.csproj]\r\n  mvcapp -> /mvcapp/bin/Debug/netcoreapp2.1/mvcapp.dll\r\n  mvcapp -> /mvcapp/bin/Debug/netcoreapp2.1/mvcapp.Views.dll\r\n\r\nBuild succeeded.\r\n    0 Warning(s)\r\n    0 Error(s)\r\n\r\nTime Elapsed 00:02:09.15\r\n\r\nreal    2m13.377s\r\nuser    1m25.260s\r\nsys     0m9.420s\r\nroot@416731f24915:/mvcapp#\r\n```\r\n\r\n### .NET Core 2.1 SDK image before this change\r\n\r\n```console\r\npi@raspberrypi:~ $ docker run -it --rm microsoft/dotnet:2.1-sdk\r\nroot@9d1d5e45df6a:/# time dotnet new mvc -o mvcapp\r\nGetting ready...\r\nThe template \"ASP.NET Core Web App (Model-View-Controller)\" was created successfully.\r\nThis template contains technologies from parties other than Microsoft, see https://aka.ms/aspnetcore-template-3pn-210 for details.\r\n\r\nProcessing post-creation actions...\r\nRunning 'dotnet restore' on mvcapp/mvcapp.csproj...\r\n  Restoring packages for /mvcapp/mvcapp.csproj...\r\n  Installing System.Xml.XmlSerializer 4.3.0.\r\n  Installing System.Threading.Tasks.Extensions 4.0.0.\r\n  Installing System.Globalization.Extensions 4.0.1.\r\n  Installing runtime.native.System.Security.Cryptography 4.0.0.\r\n  Installing System.Security.Cryptography.OpenSsl 4.0.0.\r\n  Installing System.Security.Cryptography.Cng 4.2.0.\r\n  Installing System.Security.Cryptography.Csp 4.0.0.\r\n  Installing runtime.native.System.Net.Http 4.0.1.\r\n  Installing runtime.native.System 4.0.0.\r\n  Installing runtime.native.System.IO.Compression 4.1.0.\r\n  Installing System.Buffers 4.0.0.\r\n  Installing System.Private.DataContractSerialization 4.3.0.\r\n  Installing System.Security.Principal 4.3.0.\r\n  Installing runtime.osx.10.10-x64.runtime.native.System.Security.Cryptography.Apple 4.3.0.\r\n  Installing runtime.rhel.7-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing runtime.ubuntu.14.04-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing runtime.opensuse.42.1-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.NETCore.App 2.1.0.\r\n  Installing runtime.ubuntu.16.10-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.AspNetCore.App 2.1.1.\r\n  Installing runtime.ubuntu.16.04-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.NETCore.Platforms 2.1.0.\r\n  Installing Microsoft.NETCore.Targets 2.1.0.\r\n  Installing NETStandard.Library 2.0.3.\r\n  Installing Microsoft.NETCore.DotNetHostPolicy 2.1.0.\r\n  Installing Microsoft.AspNetCore 2.1.1.\r\n  Installing Microsoft.AspNetCore.Antiforgery 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Localization 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Session 2.1.1.\r\n  Installing Microsoft.AspNetCore.SpaServices 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.KeyPerFile 2.1.1.\r\n  Installing Microsoft.Extensions.FileProviders.Abstractions 2.1.1.\r\n  Installing Microsoft.Extensions.Hosting 2.1.1.\r\n  Installing Microsoft.Extensions.FileProviders.Embedded 2.1.1.\r\n  Installing Microsoft.Extensions.FileProviders.Physical 2.1.1.\r\n  Installing Microsoft.Extensions.Localization 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.Cookies 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.Core 2.1.1.\r\n  Installing runtime.osx.10.10-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.AspNetCore.Authentication.Google 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.Facebook 2.1.1.\r\n  Installing Microsoft.Extensions.Hosting.Abstractions 2.1.1.\r\n  Installing runtime.opensuse.13.2-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.AspNetCore.HttpsPolicy 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.MicrosoftAccount 2.1.1.\r\n  Installing Microsoft.Extensions.Http 2.1.1.\r\n  Installing Microsoft.AspNetCore.MiddlewareAnalysis 2.1.1.\r\n  Installing Microsoft.Extensions.FileSystemGlobbing 2.1.1.\r\n  Installing Microsoft.Extensions.DiagnosticAdapter 2.1.0.\r\n  Installing Microsoft.Extensions.Identity.Core 2.1.1.\r\n  Installing Microsoft.Extensions.Identity.Stores 2.1.1.\r\n  Installing Microsoft.Extensions.Options.ConfigurationExtensions 2.1.1.\r\n  Installing Microsoft.Extensions.Localization.Abstractions 2.1.1.\r\n  Installing Microsoft.Extensions.Logging.Abstractions 2.1.1.\r\n  Installing runtime.fedora.24-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.Extensions.Options 2.1.1.\r\n  Installing Microsoft.Extensions.FileProviders.Composite 2.1.1.\r\n  Installing Microsoft.Extensions.Logging 2.1.1.\r\n  Installing Microsoft.Extensions.Logging.Configuration 2.1.1.\r\n  Installing Microsoft.Extensions.Logging.TraceSource 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.UserSecrets 2.1.1.\r\n  Installing Microsoft.Extensions.Logging.Debug 2.1.1.\r\n  Installing Microsoft.Extensions.Logging.Console 2.1.1.\r\n  Installing Microsoft.Extensions.DependencyInjection 2.1.1.\r\n  Installing Microsoft.Extensions.ObjectPool 2.1.1.\r\n  Installing runtime.debian.8-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.Extensions.DependencyInjection.Abstractions 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.Binder 2.1.1.\r\n  Installing runtime.fedora.23-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.Extensions.Configuration.EnvironmentVariables 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.FileExtensions 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.Abstractions 2.1.1.\r\n  Installing Microsoft.Extensions.Caching.Memory 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.CommandLine 2.1.1.\r\n  Installing Microsoft.Extensions.Caching.Abstractions 2.1.1.\r\n  Installing Microsoft.Net.Http.Headers 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.InMemory 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.Abstractions 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.Ini 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.Analyzers 2.1.1.\r\n  Installing Microsoft.AspNetCore.StaticFiles 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.Relational 2.1.1.\r\n  Installing Microsoft.AspNetCore.Server.Kestrel.Https 2.1.1.\r\n  Installing Microsoft.Extensions.Primitives 2.1.1.\r\n  Installing Microsoft.AspNetCore.SpaServices.Extensions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Server.Kestrel 2.1.1.\r\n  Installing Microsoft.Extensions.WebEncoders 2.1.1.\r\n  Installing Microsoft.AspNetCore.WebUtilities 2.1.1.\r\n  Installing Microsoft.AspNetCore.SignalR 1.0.1.\r\n  Installing Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets 2.1.1.\r\n  Installing Microsoft.AspNetCore.Routing 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.Tools 2.1.1.\r\n  Installing Microsoft.AspNetCore.Routing.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Rewrite 2.1.1.\r\n  Installing Microsoft.AspNetCore.ResponseCaching.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Server.Kestrel.Transport.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.ResponseCaching 2.1.1.\r\n  Installing Microsoft.AspNetCore.ResponseCompression 2.1.1.\r\n  Installing System.Globalization.Extensions 4.3.0.\r\n  Installing Microsoft.AspNetCore.Razor.Language 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.TagHelpers 2.1.1.\r\n  Installing Microsoft.AspNetCore.Razor.Runtime 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.RazorPages 2.1.1.\r\n  Installing Microsoft.AspNetCore.Owin 2.1.1.\r\n  Installing Microsoft.AspNetCore.Razor 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Razor.Extensions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Razor.ViewCompilation 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Analyzers 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Localization 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Formatters.Json 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.Design 2.1.1.\r\n  Installing Microsoft.AspNetCore.WebSockets 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Cors 2.1.1.\r\n  Installing System.Diagnostics.DiagnosticSource 4.3.0.\r\n  Installing Microsoft.AspNetCore.Mvc.DataAnnotations 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.ApiExplorer 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Formatters.Xml 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc 2.1.1.\r\n  Installing Microsoft.Extensions.Logging.EventSource 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.OAuth 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.Json 2.1.1.\r\n  Installing Microsoft.AspNetCore.SignalR.Protocols.Json 1.0.1.\r\n  Installing Microsoft.AspNetCore.NodeServices 2.1.1.\r\n  Installing Microsoft.AspNetCore.SignalR.Common 1.0.1.\r\n  Installing Microsoft.AspNetCore.JsonPatch 2.1.1.\r\n  Installing Microsoft.AspNetCore.Localization.Routing 2.1.1.\r\n  Installing Microsoft.AspNetCore.Server.IISIntegration 2.1.1.\r\n  Installing Microsoft.AspNetCore.Identity.UI 2.1.1.\r\n  Installing Microsoft.AspNetCore.Razor.Design 2.1.1.\r\n  Installing Microsoft.AspNetCore.Identity.EntityFrameworkCore 2.1.1.\r\n  Installing Microsoft.AspNetCore.Http.Extensions 2.1.1.\r\n  Installing Microsoft.AspNetCore.HttpOverrides 2.1.1.\r\n  Installing Microsoft.AspNetCore.Identity 2.1.1.\r\n  Installing Microsoft.AspNetCore.Http.Features 2.1.1.\r\n  Installing Microsoft.AspNetCore.Http.Connections 1.0.1.\r\n  Installing Microsoft.AspNetCore.Http.Connections.Common 1.0.1.\r\n  Installing Microsoft.AspNetCore.Http 2.1.1.\r\n  Installing Microsoft.AspNetCore.Diagnostics.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Cors 2.1.1.\r\n  Installing Microsoft.AspNetCore.Hosting.Server.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Http.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.DataProtection.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Hosting.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Diagnostics.EntityFrameworkCore 2.1.1.\r\n  Installing Microsoft.AspNetCore.Cryptography.Internal 2.1.1.\r\n  Installing Microsoft.AspNetCore.Cryptography.KeyDerivation 2.1.1.\r\n  Installing Microsoft.AspNetCore.DataProtection.Extensions 2.1.1.\r\n  Installing Microsoft.AspNetCore.HostFiltering 2.1.1.\r\n  Installing Microsoft.CSharp 4.0.1.\r\n  Installing Microsoft.AspNetCore.CookiePolicy 2.1.1.\r\n  Installing Microsoft.AspNetCore.Server.Kestrel.Core 2.1.1.\r\n  Installing Microsoft.AspNetCore.Html.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.Twitter 2.1.1.\r\n  Installing Microsoft.AspNetCore.Connections.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authorization.Policy 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authorization 2.1.1.\r\n  Installing Microsoft.AspNetCore.Diagnostics 2.1.1.\r\n  Installing Microsoft.AspNetCore.Server.HttpSys 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.Xml 2.1.1.\r\n  Installing Microsoft.AspNetCore.Hosting 2.1.1.\r\n  Installing Microsoft.AspNetCore.DataProtection 2.1.1.\r\n  Installing Microsoft.Extensions.Caching.SqlServer 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.SqlServer 2.1.1.\r\n  Installing Microsoft.AspNet.WebApi.Client 5.2.6.\r\n  Installing Microsoft.AspNetCore.SignalR.Core 1.0.1.\r\n  Installing Microsoft.AspNetCore.Mvc.ViewFeatures 2.1.1.\r\n  Installing Microsoft.CodeAnalysis.Razor 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.JwtBearer 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.OpenIdConnect 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Razor 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.WsFederation 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore 2.1.1.\r\n  Installing System.Runtime.Serialization.Primitives 4.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Core 2.1.1.\r\n  Installing System.Xml.ReaderWriter 4.0.11.\r\n  Installing Microsoft.NETCore.DotNetHostResolver 2.1.0.\r\n  Installing System.Diagnostics.DiagnosticSource 4.5.0.\r\n  Installing System.ComponentModel.Annotations 4.5.0.\r\n  Installing System.Buffers 4.5.0.\r\n  Installing System.Memory 4.5.1.\r\n  Installing System.Runtime.CompilerServices.Unsafe 4.5.1.\r\n  Installing System.Text.Encodings.Web 4.5.0.\r\n  Installing Microsoft.CSharp 4.5.0.\r\n  Installing System.Net.WebSockets.WebSocketProtocol 4.5.1.\r\n  Installing Newtonsoft.Json 11.0.2.\r\n  Installing System.IO.Pipelines 4.5.0.\r\n  Installing System.Numerics.Vectors 4.5.0.\r\n  Installing System.Security.Principal.Windows 4.5.0.\r\n  Installing System.Threading.Tasks.Extensions 4.5.1.\r\n  Installing System.Security.Cryptography.Cng 4.5.0.\r\n  Installing System.Net.Http 4.1.0.\r\n  Installing System.Security.Cryptography.Xml 4.5.0.\r\n  Installing Microsoft.Win32.Registry 4.5.0.\r\n  Installing System.Reflection.Metadata 1.6.0.\r\n  Installing System.Data.SqlClient 4.5.1.\r\n  Installing Newtonsoft.Json.Bson 1.0.1.\r\n  Installing Newtonsoft.Json 10.0.1.\r\n  Installing System.Threading.Channels 4.5.0.\r\n  Installing System.Reflection.Emit 4.3.0.\r\n  Installing Microsoft.CodeAnalysis.CSharp 2.8.0.\r\n  Installing Microsoft.CodeAnalysis.Common 2.8.0.\r\n  Installing System.Security.Cryptography.Algorithms 4.2.0.\r\n  Installing Microsoft.IdentityModel.Protocols.OpenIdConnect 5.2.0.\r\n  Installing System.IdentityModel.Tokens.Jwt 5.2.0.\r\n  Installing Microsoft.IdentityModel.Protocols.WsFederation 5.2.0.\r\n  Installing System.Collections.Immutable 1.5.0.\r\n  Installing Remotion.Linq 2.2.0.\r\n  Installing System.Interactive.Async 3.1.1.\r\n  Installing Microsoft.Extensions.DependencyModel 2.1.0.\r\n  Installing Microsoft.NETCore.DotNetAppHost 2.1.0.\r\n  Installing Microsoft.NETCore.Platforms 2.0.0.\r\n  Installing System.Security.Cryptography.Pkcs 4.5.0.\r\n  Installing System.Security.Permissions 4.5.0.\r\n  Installing System.Security.AccessControl 4.5.0.\r\n  Installing NETStandard.Library 1.6.1.\r\n  Installing System.Text.Encoding.CodePages 4.5.0.\r\n  Installing System.Linq 4.3.0.\r\n  Installing runtime.native.System.Data.SqlClient.sni 4.4.0.\r\n  Installing System.Diagnostics.Debug 4.3.0.\r\n  Installing System.Globalization 4.3.0.\r\n  Installing System.IO 4.3.0.\r\n  Installing System.Collections 4.3.0.\r\n  Installing System.Runtime.Serialization.Primitives 4.3.0.\r\n  Installing System.Runtime.Serialization.Formatters 4.3.0.\r\n  Installing System.Xml.XmlDocument 4.3.0.\r\n  Installing System.Threading 4.3.0.\r\n  Installing System.Resources.ResourceManager 4.3.0.\r\n  Installing System.Text.Encoding.Extensions 4.3.0.\r\n  Installing System.Xml.XDocument 4.3.0.\r\n  Installing System.Threading.Tasks 4.3.0.\r\n  Installing System.Linq.Expressions 4.3.0.\r\n  Installing System.Runtime.Numerics 4.3.0.\r\n  Installing System.Text.Encoding 4.3.0.\r\n  Installing System.Reflection.Extensions 4.3.0.\r\n  Installing System.Text.RegularExpressions 4.3.0.\r\n  Installing System.Runtime.Extensions 4.3.0.\r\n  Installing System.Reflection 4.3.0.\r\n  Installing System.ObjectModel 4.3.0.\r\n  Installing System.Dynamic.Runtime 4.3.0.\r\n  Installing System.Xml.ReaderWriter 4.3.0.\r\n  Installing Microsoft.CSharp 4.3.0.\r\n  Installing System.ComponentModel.TypeConverter 4.3.0.\r\n  Installing System.Runtime 4.3.0.\r\n  Installing System.Reflection.Emit.ILGeneration 4.3.0.\r\n  Installing System.Reflection.Primitives 4.3.0.\r\n  Installing System.AppContext 4.3.0.\r\n  Installing System.Console 4.3.0.\r\n  Installing System.Collections.Concurrent 4.3.0.\r\n  Installing System.Diagnostics.Tools 4.3.0.\r\n  Installing System.Security.Cryptography.Encoding 4.0.0.\r\n  Installing System.IO.Compression 4.3.0.\r\n  Installing System.IO.FileSystem 4.3.0.\r\n  Installing System.IO.FileSystem.Primitives 4.3.0.\r\n  Installing System.Security.Cryptography.Encoding 4.3.0.\r\n  Installing System.Collections.Immutable 1.3.1.\r\n  Installing System.Runtime.InteropServices 4.3.0.\r\n  Installing System.Security.Cryptography.X509Certificates 4.1.0.\r\n  Installing System.Diagnostics.StackTrace 4.3.0.\r\n  Installing System.Reflection.Metadata 1.4.2.\r\n  Installing System.Threading.Thread 4.3.0.\r\n  Installing Microsoft.CodeAnalysis.Analyzers 1.1.0.\r\n  Installing System.Security.Cryptography.X509Certificates 4.3.0.\r\n  Installing System.ValueTuple 4.3.0.\r\n  Installing System.Diagnostics.FileVersionInfo 4.3.0.\r\n  Installing System.Threading.Tasks.Parallel 4.3.0.\r\n  Installing System.Security.Cryptography.Algorithms 4.3.0.\r\n  Installing System.Xml.XPath.XDocument 4.3.0.\r\n  Installing System.Text.Encoding.CodePages 4.3.0.\r\n  Installing System.Runtime.InteropServices 4.1.0.\r\n  Installing Microsoft.IdentityModel.Protocols 5.2.0.\r\n  Installing Microsoft.IdentityModel.Tokens 5.2.0.\r\n  Installing Microsoft.IdentityModel.Xml 5.2.0.\r\n  Installing System.Diagnostics.Debug 4.0.11.\r\n  Installing System.Reflection.Extensions 4.0.1.\r\n  Installing Microsoft.IdentityModel.Tokens.Saml 5.2.0.\r\n  Installing System.Runtime.Extensions 4.1.0.\r\n  Installing System.Threading 4.0.11.\r\n  Installing System.Collections 4.0.11.\r\n  Installing System.Reflection 4.1.0.\r\n  Installing System.ObjectModel 4.0.12.\r\n  Installing System.Linq 4.1.0.\r\n  Installing System.Linq.Queryable 4.0.1.\r\n  Installing System.Linq.Expressions 4.1.0.\r\n  Installing System.Runtime 4.1.0.\r\n  Installing NETStandard.Library 1.6.0.\r\n  Installing System.Dynamic.Runtime 4.0.11.\r\n  Installing Newtonsoft.Json 9.0.1.\r\n  Installing Microsoft.DotNet.PlatformAbstractions 2.1.0.\r\n  Installing System.Runtime.CompilerServices.Unsafe 4.5.0.\r\n  Installing runtime.win-x64.runtime.native.System.Data.SqlClient.sni 4.4.0.\r\n  Installing runtime.win-x86.runtime.native.System.Data.SqlClient.sni 4.4.0.\r\n  Installing runtime.win-arm64.runtime.native.System.Data.SqlClient.sni 4.4.0.\r\n  Installing Microsoft.NETCore.Platforms 1.1.0.\r\n  Installing Microsoft.Win32.Primitives 4.3.0.\r\n  Installing System.Net.Sockets 4.3.0.\r\n  Installing System.Diagnostics.Tracing 4.3.0.\r\n  Installing System.IO.Compression.ZipFile 4.3.0.\r\n  Installing System.Globalization.Calendars 4.3.0.\r\n  Installing System.Threading.Timer 4.3.0.\r\n  Installing System.Security.Cryptography.Primitives 4.3.0.\r\n  Installing System.Runtime.InteropServices.RuntimeInformation 4.0.0.\r\n  Installing System.Runtime.Handles 4.3.0.\r\n  Installing System.Runtime.InteropServices.RuntimeInformation 4.3.0.\r\n  Installing System.Net.Http 4.3.0.\r\n  Installing Microsoft.NETCore.Targets 1.1.0.\r\n  Installing System.Net.Primitives 4.3.0.\r\n  Installing System.Reflection.Emit.Lightweight 4.3.0.\r\n  Installing System.Reflection.TypeExtensions 4.3.0.\r\n  Installing System.Threading.Tasks.Extensions 4.3.0.\r\n  Installing System.ComponentModel 4.3.0.\r\n  Installing System.ComponentModel.Primitives 4.3.0.\r\n  Installing System.Collections.NonGeneric 4.3.0.\r\n  Installing System.Collections.Specialized 4.3.0.\r\n  Installing runtime.native.System 4.3.0.\r\n  Installing runtime.native.System.IO.Compression 4.3.0.\r\n  Installing System.Buffers 4.3.0.\r\n  Installing runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing runtime.native.System.Net.Http 4.3.0.\r\n  Installing System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing System.Security.Cryptography.Cng 4.3.0.\r\n  Installing System.Security.Cryptography.Csp 4.3.0.\r\n  Installing runtime.native.System.Security.Cryptography.Apple 4.3.0.\r\n  Installing System.Xml.XPath 4.3.0.\r\n  Installing Microsoft.IdentityModel.Logging 5.2.0.\r\n  Installing System.Diagnostics.Contracts 4.3.0.\r\n  Installing System.Runtime.Serialization.Xml 4.3.0.\r\n  Installing Microsoft.NETCore.Platforms 1.0.1.\r\n  Installing Microsoft.NETCore.Targets 1.0.1.\r\n  Installing System.Security.Claims 4.3.0.\r\n  Installing System.Reflection.Primitives 4.0.1.\r\n  Installing System.IO 4.1.0.\r\n  Installing System.Globalization 4.0.11.\r\n  Installing System.Threading.Tasks 4.0.11.\r\n  Installing System.Resources.ResourceManager 4.0.1.\r\n  Installing System.Reflection.Emit 4.0.1.\r\n  Installing System.Reflection.TypeExtensions 4.1.0.\r\n  Installing System.Reflection.Emit.ILGeneration 4.0.1.\r\n  Installing System.Reflection.Emit.Lightweight 4.0.1.\r\n  Installing System.AppContext 4.1.0.\r\n  Installing System.Collections.Concurrent 4.0.12.\r\n  Installing System.IO.FileSystem.Primitives 4.0.1.\r\n  Installing System.Runtime.Numerics 4.0.1.\r\n  Installing System.Security.Cryptography.Primitives 4.0.0.\r\n  Installing System.Xml.XDocument 4.0.11.\r\n  Installing System.Text.RegularExpressions 4.1.0.\r\n  Installing Microsoft.Win32.Primitives 4.0.1.\r\n  Installing System.Console 4.0.0.\r\n  Installing System.Diagnostics.Tools 4.0.1.\r\n  Installing System.Diagnostics.Tracing 4.1.0.\r\n  Installing System.Globalization.Calendars 4.0.1.\r\n  Installing System.IO.FileSystem 4.0.1.\r\n  Installing System.Net.Sockets 4.1.0.\r\n  Installing System.Text.Encoding 4.0.11.\r\n  Installing System.Threading.Timer 4.0.1.\r\n  Installing System.Net.Primitives 4.0.11.\r\n  Installing System.Runtime.Handles 4.0.1.\r\n  Installing System.Text.Encoding.Extensions 4.0.11.\r\n  Installing System.IO.Compression.ZipFile 4.0.1.\r\n  Installing System.IO.Compression 4.1.0.\r\n  Generating MSBuild file /mvcapp/obj/mvcapp.csproj.nuget.g.props.\r\n  Generating MSBuild file /mvcapp/obj/mvcapp.csproj.nuget.g.targets.\r\n  Restore completed in 44.04 sec for /mvcapp/mvcapp.csproj.\r\n\r\nRestore succeeded.\r\n\r\n\r\nreal    1m8.386s\r\nuser    1m8.010s\r\nsys     0m18.190s\r\nroot@9d1d5e45df6a:/# cd mvcapp/\r\nroot@9d1d5e45df6a:/mvcapp# time dotnet build\r\nMicrosoft (R) Build Engine version 15.7.179.6572 for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  Restore completed in 557.76 ms for /mvcapp/mvcapp.csproj.\r\n  mvcapp -> /mvcapp/bin/Debug/netcoreapp2.1/mvcapp.dll\r\n  mvcapp -> /mvcapp/bin/Debug/netcoreapp2.1/mvcapp.Views.dll\r\n\r\nBuild succeeded.\r\n    0 Warning(s)\r\n    0 Error(s)\r\n\r\nTime Elapsed 00:02:07.34\r\n\r\nreal    2m11.716s\r\nuser    1m22.990s\r\nsys     0m8.880s\r\nroot@9d1d5e45df6a:/mvcapp#\r\n```\r\n","Url":"https://github.com/dotnet/announcements/issues/80","RelatedDescription":"Closed issue \"Improving Performance of ARM32 Docker Images with .NET Core Package Cache\" (#80)"},{"Id":"350233220","IsPullRequest":false,"CreatedAt":"2018-08-13T23:50:57","Actor":"richlander","Number":"81","RawContent":null,"Title":"Advisory serializing/deserializing a CultureAwareComparer with .NET Framework 4.6+","State":"open","Body":"# Advisory serializing/deserializing a CultureAwareComparer with .NET Framework 4.6+\r\n\r\nAn [issue with serializing/deserializing a CultureAwareComparer](https://github.com/Microsoft/dotnet/blob/master/releases/net471/KnownIssues/521954%20-%20BCL%20CultureAwareComparer%20with%20ignore%20casing%20on%20serialized%20on%20previous%20versions%20of%20.NET%20do%20not%20correctly%20deserialize%20on%20.NET%204.7.1.md) was discovered with [.NET Framework 4.7.1](https://blogs.msdn.microsoft.com/dotnet/2017/10/17/announcing-the-net-framework-4-7-1/). This issue was resolved earlier this year, with the [May 2018 Preview of Quality Rollup](https://blogs.msdn.microsoft.com/dotnet/2018/05/15/net-framework-may-2018-preview-of-quality-rollup/). We recently learned that some applications, including Johnson Controls’ C-CURE 9000 Software, were negatively impacted by this change as this update requires all client and server workstations to be updated simultaneously with the appropriate Microsoft updates. The changes made to .NET Framework 4.7.1 were also integrated into .NET Framework 4.6 and later servicing releases. As a result, this advisory applies to .NET Framework 4.6 and later versions.\r\n\r\nThis advisory is provided so that developers can correctly diagnose this issue and be aware of our guidance. We will continue to update this issue as we have new information to share.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [microsoft/dotnet #832](https://github.com/Microsoft/dotnet/issues/832)\r\n\r\n## Guidance\r\n\r\nThis guidance only applies to customers that have experienced this issue.\r\n\r\nWe have released [an update for .NET Framework 4.6](https://blogs.msdn.microsoft.com/dotnet/2018/08/30/net-framework-august-2018-preview-of-quality-rollup/) and later that resolves the issue. **You must deploy the .NET Framework update for this issue to all .NET Framework 4.6+ machines that communicate via serialized objects**. After doing that, cross-machine serialization will work as expected. \r\n \r\nPlease consult your software vendor to understand if this impacts the software you are using.\r\n\r\n## Technical Context\r\n\r\nIn the [May 2018 Preview of Quality Rollup](https://blogs.msdn.microsoft.com/dotnet/2018/05/15/net-framework-may-2018-preview-of-quality-rollup/), we made a change to the internal type CultureAwareComparer to implement ISerializable. We made the change in order to address [issue with serializing/deserializing a CultureAwareComparer](https://github.com/Microsoft/dotnet/blob/master/releases/net471/KnownIssues/521954%20-%20BCL%20CultureAwareComparer%20with%20ignore%20casing%20on%20serialized%20on%20previous%20versions%20of%20.NET%20do%20not%20correctly%20deserialize%20on%20.NET%204.7.1.md).\r\n\r\nThe issue reported was that a type that contains an instance of CultureAwareComparer was not able to correctly serialize and deserialize across different versions of the .NET Framework. There are a few types in .NET Framework that do this, the most commonly impacted one being the Dictionary<TKey, TValue> type.\r\n \r\nThe change to implement the ISerializable interface had unintended side effects when exchanging this type across different machines. We have had a small number of reports from customers who have been affected.\r\n\r\nA common, but not unique way, of exchanging objects across machines is to use WCF in conjunction with a serializer. One of the common serializers being DataContractSerializer. The side-effect of the change prevented data serialized on systems where the type implements ISerializable to correctly deserialize of systems where the type does NOT implement ISerializable. The same is true of the opposite case, that systems where the type does not implement ISerializable will not correctly deserialize data from systems where the type does implement ISerializable.\r\n\r\nWe have an updated fix that we intend to release within the next month that will remove the implementation of the ISerializable interface on the type and use a different internal mechanism for ensuring the cross-version serialization continues to work as expected. This change addresses the break experienced with WCF.\r\n\r\nThe upcoming fix will remove the implementation of the ISerializable interface on the type and use a different mechanism for ensuring the cross-version serialization of that type continues to work. This change addresses the break experienced with WCF.\r\n\r\n## Symptoms\r\n\r\nAn application that is affected by this issue will most likely crash when trying to deserialize an object. It may print or log an error message similar to the following one:\r\n\r\n```\r\nThe formatter threw an exception while trying to deserialize the message: \r\nThere was an error while trying to deserialize parameter . The InnerException message was ''EndElement' 'Comparer' from namespace '' is not expected. Expecting element '_compareInfo'.'.  Please see InnerException for more details.\r\n```\r\n","Url":"https://github.com/dotnet/announcements/issues/81","RelatedDescription":"Open issue \"Advisory serializing/deserializing a CultureAwareComparer with .NET Framework 4.6+\" (#81)"},{"Id":"348162872","IsPullRequest":false,"CreatedAt":"2018-08-07T04:26:40","Actor":"richlander","Number":"79","RawContent":null,"Title":"August 2018 .NET Updates","State":"open","Body":"# August 2018 .NET Updates\r\n\r\nThe following .NET updates were released in August 2018. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Framework \r\n\r\n* [August 2018 .NET Framework Security and Quality Rollup - August 14, 2018](https://blogs.msdn.microsoft.com/dotnet/2018/08/14/august-2018-security-and-quality-rollup/)\r\n* [Advisory serializing/deserializing a CultureAwareComparer with .NET Framework 4.6+](https://github.com/dotnet/announcements/issues/81)\r\n* [Advisory on July 2018 .NET Framework Updates](https://blogs.msdn.microsoft.com/dotnet/2018/07/20/advisory-on-july-2018-net-framework-updates/)\r\n* [August 2018 Preview of Quality Rollup - August 30, 2018](https://blogs.msdn.microsoft.com/dotnet/2018/08/30/net-framework-august-2018-preview-of-quality-rollup/)\r\n\r\n## .NET Core\r\n\r\n* [.NET Core August 2018 Update - August 21, 2018](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.3/2.1.3.md)\r\n* [.NET Core 2.1.400 SDK Update - August 14, 2018](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.400-SDK/2.1.400-sdk.md)\r\n\r\n## End of Support for Operating System Versions\r\n\r\n.NET Core does not support systems that are out of support. The following operating systems are now out of support. To stay supported, move to a [later version of the given operating system](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md).\r\n\r\n* [Debian 8 -- Jessie](https://lists.debian.org/debian-security-announce/2018/msg00132.html)\r\n* [Ubuntu 17.10 -- Artful Aardvark](https://lists.ubuntu.com/archives/ubuntu-announce/2018-July/000232.html)\r\n\r\nSee [Debian Jessie End of Life -- Impact on .NET Core Docker Images](https://github.com/dotnet/announcements/issues/78)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)","Url":"https://github.com/dotnet/announcements/issues/79","RelatedDescription":"Open issue \"August 2018 .NET Updates\" (#79)"},{"Id":"348161534","IsPullRequest":false,"CreatedAt":"2018-08-07T04:18:01","Actor":"richlander","Number":"78","RawContent":null,"Title":"Debian Jessie End of Life -- Impact on .NET Core Docker Images","State":"open","Body":"# Debian Jessie End of Life -- Impact on .NET Core Docker Images\r\n\r\nDebian Jessie (AKA Debian 8) is now [out of support](https://lists.debian.org/debian-security-announce/2018/msg00132.html). Debian Jessie is no longer a supported operating system for .NET Core. Docker users need to switch to Debian Stretch-based (AKA Debian 9) images to stay in support.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet/dotnet-docker #647](https://github.com/dotnet/dotnet-docker/issues/647)\r\n\r\n## Context\r\n\r\nJessie-based images are currently provided for .NET Core 1.0, 1.1 and 2.0. .NET Core 1.0 and 1.1 expose multi-arch tags, such as `1.0-runtime` and `1.1-sdk`, that support Debian Jessie. When pulled for a Linux Docker daemon (on Linux or Windows), these tags pull Jessie-based images. .NET Core 2.0 supports Jessie, but it is not the default. .NET Core 2.0 multi-arch tags, such as `2.0-runtime` and `2.0-sdk`, pull Debian Stretch-based images, when pulled for a Linux Docker daemon. We made a conscious decision with .NET Core 2.0 to move off of Jessie as the default to avoid this problem, based the Jessie 2018 EOL date. .NET Core 2.1 does not support Jessie, only Stretch.\r\n\r\nWe recently posted about our policy for underlying operating system dependencies with Docker:\r\n\r\n> For each major and minor .NET version, we may take a new major operating system version dependency. As I mentioned earlier, we adopted Debian 9 as the base image for .NET Core 2.0. We stayed with Debian 9 for .NET Core 2.1, since Debian 10 (AKA “Buster”) has not been released. Debian 9 will remain the default base image for .NET Core 2.1 for the life of .NET Core 2.1. **Once we adopt an underlying operating system major version, we will not change it for the life of that given .NET release.**\r\n\r\nSource: https://blogs.msdn.microsoft.com/dotnet/2018/06/18/staying-up-to-date-with-net-container-images/\r\n\r\n## Plan\r\n\r\nWe will continue to re-build .NET Core 1.0 and 1.1 multi-arch tags on top of Jessie for the remaining [supported lifetime of .NET Core 1.0 and 1.1](https://github.com/dotnet/core/blob/master/microsoft-support.md). We will also provide a Stretch-based image for .NET Core 1.1. This tag will look like the following: `1.1-runtime-stretch` or `1.1.9-sdk-stretch`. This is same format that Jessie has used.\r\n\r\nWe will produce Jessie-based images for NET Core 2.0 until October 2018, which is when [.NET Core 2.0 support ends](https://github.com/dotnet/core/blob/master/microsoft-support.md). .NET Core 2.0 multi-arch tags support Debian Stretch, not Jessie, as described above.\r\n\r\nIn summary, .NET Core is no longer supported on Debian Jessie, with Docker or otherwise. We will produce Docker images for Jessie until .NET Core 1.0, 1.1 and 2.0 support ends, respectively, to avoid breaking applications. This aligns with the policy defined above, per [Staying up-to-date with .NET Container Images](https://blogs.msdn.microsoft.com/dotnet/2018/06/18/staying-up-to-date-with-net-container-images/).\r\n\r\n## Affected Repos\r\n\r\n* [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/)\r\n* [microsoft/dotnet-nightly](https://hub.docker.com/r/microsoft/dotnet-nightly/)\r\n* [microsoft/aspnetcore](https://hub.docker.com/r/microsoft/aspnetcore/)\r\n* [microsoft/aspnetcore-build](https://hub.docker.com/r/microsoft/aspnetcore-build/)","Url":"https://github.com/dotnet/announcements/issues/78","RelatedDescription":"Open issue \"Debian Jessie End of Life -- Impact on .NET Core Docker Images\" (#78)"},{"Id":"345028102","IsPullRequest":false,"CreatedAt":"2018-07-26T22:31:32","Actor":"leecow","Number":"77","RawContent":null,"Title":"https://dot.net now using TLS 1.2-only","State":"open","Body":"Earlier today, https://dot.net switched to using TLS 1.2-only. Most Windows Powershell instances default to TLS 1.1 and will thus fail with `wget : The underlying connection was closed: An unexpected error occurred on a send. trying to run the previous command.`\r\n\r\nAn example of a PowerShell script fix can be seen in https://github.com/dotnet/docs/pull/6689","Url":"https://github.com/dotnet/announcements/issues/77","RelatedDescription":"Open issue \"https://dot.net now using TLS 1.2-only\" (#77)"},{"Id":"343360319","IsPullRequest":false,"CreatedAt":"2018-07-21T22:29:05","Actor":"richlander","Number":"76","RawContent":null,"Title":"July 2018 .NET Updates","State":"open","Body":"# July 2018 .NET Updates\r\n\r\nThe following .NET updates were released in June 2018. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Framework \r\n\r\n* [.NET Framework 4.7.2 is available on Windows Update, WSUS and MU Catalog](https://blogs.msdn.microsoft.com/dotnet/2018/07/10/net-framework-4-7-2-is-available-on-windows-update-wsus-and-mu-catalog/)\r\n* [Announcing .NET Framework 4.8 Early Access build 3632](https://blogs.msdn.microsoft.com/dotnet/2018/07/18/announcing-net-framework-4-8-early-access-build-3632/)\r\n* [Advisory on July 2018 .NET Framework Updates](https://blogs.msdn.microsoft.com/dotnet/2018/07/20/advisory-on-july-2018-net-framework-updates/)\r\n* [.NET Framework July 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/07/30/net-framework-july-2018-update/)\r\n\r\n## .NET Core\r\n\r\n* [.NET Core July 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/07/10/net-core-july-2018-update/)\r\n\r\n## .NET Core Support Policies\r\n\r\n* [Microsoft Support for .NET Core](https://github.com/dotnet/core/blob/master/microsoft-support.md)\r\n* [.NET Core Supported OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)\r\n* [April 2018](https://github.com/dotnet/announcements/issues/64)\r\n","Url":"https://github.com/dotnet/announcements/issues/76","RelatedDescription":"Open issue \"July 2018 .NET Updates\" (#76)"},{"Id":"343360017","IsPullRequest":false,"CreatedAt":"2018-07-21T22:22:25","Actor":"richlander","Number":"75","RawContent":null,"Title":"June 2018 .NET Updates","State":"open","Body":"# June 2018 .NET Updates\r\n\r\nThe following .NET updates were released in June 2018.\r\n\r\n## .NET Framework \r\n\r\n* [.NET Framework June 2018 Security and Quality Rollup](https://blogs.msdn.microsoft.com/dotnet/2018/06/13/net-framework-june-2018-security-and-quality-rollup/)\r\n* [Announcing .NET Framework 4.8 Early Access build 3621!](https://blogs.msdn.microsoft.com/dotnet/2018/06/06/announcing-net-framework-4-8-early-access-build-3621/)\r\n\r\n## .NET Core\r\n\r\n* [.NET Core 2.1 June Update](https://blogs.msdn.microsoft.com/dotnet/2018/06/22/net-core-2-1-june-update/)\r\n* [.NET Core 2.0 will reach End of Life on October 1, 2018](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/)\r\n* [.NET Core 1.0 and 1.1 EOL Dates Documented](https://github.com/dotnet/core/blob/master/microsoft-support.md)\r\n\r\n## Previous Updates\r\n\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)\r\n* [April 2018](https://github.com/dotnet/announcements/issues/64)\r\n* [February 2018](https://github.com/dotnet/announcements/issues/59)","Url":"https://github.com/dotnet/announcements/issues/75","RelatedDescription":"Open issue \"June 2018 .NET Updates\" (#75)"},{"Id":"343283437","IsPullRequest":false,"CreatedAt":"2018-07-21T00:56:48","Actor":"richlander","Number":"74","RawContent":null,"Title":"Advisory on July 2018 .NET Framework Updates","State":"open","Body":"# Advisory on July 2018 .NET Framework Updates\r\n\r\nUpdated: 08/14/2018\r\n\r\n> A new [.NET Framework August 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/08/14/august-2018-security-and-quality-rollup/) has been released that **resolves this advisory for all supported Windows versions**.\r\n\r\n~~A new [.NET Framework July 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/07/30/net-framework-july-2018-update/) has been released that resolves this advisory. See Guidance section.~~\r\n\r\n~~Guidance has changed for Windows 7, Windows Server 2008 and Windows Server 2008 R2. See Guidance section.~~\r\n\r\nThe [July 2018 Security and Quality Rollup updates for .NET Framework](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2018-8356) was released earlier this month. We have received multiple customer reports of [applications that fail to start or don't run correctly](https://support.microsoft.com/en-us/help/4345913) after installing the July 2018 update. These reports are specific to applications that initialize a COM component and run with restricted permissions.\r\n\r\nWe have stopped distributing the .NET Framework July 2018 updates on Windows Update and are actively working on fixing and re-shipping this month's updates. If you installed the July 2018 update and have not yet seen any negative behavior, we recommend that you leave your systems as-is but closely monitor them and ensure that you apply upcoming .NET Framework updates.\r\n\r\nAs a team, we regret that this release was shipped with this flaw. This release was tested using our regular and extensive testing process. We discovered while investigating this issue that we have a test hole for the specific combination of COM activation and restricted permissions, including impersonation. We will be mitigating that gap going forward. Again, we are sorry for any inconvenience that this product flaw has caused.\r\n\r\nWe will continue to update this issue and [post](https://blogs.msdn.microsoft.com/dotnet/2018/07/20/advisory-on-july-2018-net-framework-updates/) as we have new information.\r\n\r\n## Discussion\r\nPlease share your thoughts/experience on this advisory and see what others are saying at:\r\n\r\n* [microsoft/dotnet #811](https://github.com/Microsoft/dotnet/issues/811)\r\n\r\n## Guidance\r\n\r\nWe strongly recommend that you install [.NET Framework August 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/08/14/august-2018-security-and-quality-rollup/).\r\n\r\n~~We recommend that you install [.NET Framework July 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/07/30/net-framework-july-2018-update/) on your systems if you experienced the symptoms described in this advisory. If you did not experience these symptoms, we recommend you wait to update your machines until the next regular update, in August.~~\r\n\r\n~~On Windows 7, Windows Server 2008, and Windows Server 2008 R2, we have found that the combination of [July 2018 Security and Quality Rollup updates for .NET Framework](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2018-8356) and  [.NET Framework July 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/07/30/net-framework-july-2018-update/) do not resolve all symptoms. On these Windows versions, if you are experiencing these symptoms after installing this combination of patches, we recommend that you uninstall (only) the Monthly Rollup patch and then install the appropriate Security Only patch listed at [July 2018 Security and Quality Rollup updates for .NET Framework](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2018-8356).~~\r\n\r\n## Technical Context\r\n\r\nThe .NET Framework runtime uses the process token to determine whether the process is being run within an elevated context. These system calls can fail if the required process inspection permissions are not present. This causes an “access denied\" error.\r\n\r\n## Symptoms\r\n\r\nA COM component fails to load because of “access denied,” “class not registered,” or “internal failure occurred for unknown reasons” errors. \r\n\r\nThe most commonly reported failure results in the following error message:\r\n\r\n```console\r\nException type: System.UnauthorizedAccessException\r\nMessage: Access is denied. (Exception from HRESULT: 0x80070005 (E_ACCESSDENIED))\r\n```\r\n\r\n### Sharepoint\r\n\r\nWhen users browse to a SharePoint site they may see the following HTTP 403 message:\r\n\r\n```console\r\n\"The Web Site declined to show this webpage\"\r\n```\r\n\r\nThe SharePoint ULS Logs will contain a message like the following:  \r\n\r\n```console\r\nw3wp.exe (0x1894)         0x0B94  SharePoint Foundation  General 0000       High                UnauthorizedAccessException for the request. 403 Forbidden will be returned. Error=An error occurred creating the configuration section handler for system.serviceModel/extensions: Could not load file or assembly <AssemblySignature>  or one of its dependencies. Access is denied. (C:\\Windows\\Microsoft.NET\\Framework64\\v2.0.50727\\Config\\machine.config line 180)    \r\n\r\nw3wp.exe (0x1894)         0x0B94  SharePoint Foundation  General b6p2      VerboseEx                Sending HTTP response 403:403 FORBIDDEN.      \r\n\r\nw3wp.exe (0x1894)         0x0B94  SharePoint Foundation  General 8nca       Verbose                Application error when access /, Error=Access is denied. (Exception from HRESULT: 0x80070005 (E_ACCESSDENIED))\r\n```\r\n\r\nWhen crawling a people content source, the request may fail with the following entry logged to the SharePoint ULS Log: \r\n\r\n```console\r\nmssearch.exe (0x118C) 0x203C SharePoint Server Search Crawler:Gatherer Plugin cd11 Warning The start address sps3s://<URLtoSite> cannot be crawled.  Context: Application 'Search_Service_Application', Catalog 'Portal_Content'  Details:  Class not registered   (0x80040154)  \r\n\r\nIIS Hosted Classic ASP calling CreateObject for .NET COM objects may receive error \"ActiveX component can't create object\" \r\n\r\n.NET Application creates instance of .NET COM application within an Impersonation Context may receive error \"0x80040154 (REGDB_E_CLASSNOTREG)\"\r\n```\r\n\r\n### BizTalk Server Administration Console\r\n\r\nBizTalk Server Administration Console fails to launch properly with the following errors: \r\n\r\n```console\r\nAn internal failure occurred for unknown reasons. (WinMgmt) \r\n\r\nProgram Location:  \r\n\r\n   at System.Runtime.InteropServices.Marshal.ThrowExceptionForHRInternal(Int32 errorCode, IntPtr errorInfo) \r\n\r\n   at System.Management.ManagementObject.Get() \r\n\r\n   at Microsoft.BizTalk.SnapIn.Framework.WmiProvider.SelectInstance\r\n```\r\n\r\n> Warning: The following workarounds may make a computer or a network more vulnerable to attack by malicious users or by malicious software such as viruses. We do not recommend these workarounds but are providing this information so that you can implement the workarounds at your own discretion. Use these workarounds at your own risk.\r\n\r\nUse the following guidance as a workaround:\r\n\r\n* Add “NETWORK SERVICE” to the local Administrators group. \r\n\r\n### IIS with Classic ASP\r\n\r\nIIS Hosted Classic ASP calling CreateObject for .NET COM objects may receive the following error: \"ActiveX component can't create object\". Use the following guidance as a workaround.\r\n\r\n* If your web site uses Anonymous Authentication, change the Web Site Anonymous Authentication credentials to use the \"Application pool identity\"\r\n* If your site uses Basic Authentication, log into the application once as the application pool identity and then create an instance of the .NET COM component. All subsequent activations for that .NET COM component should succeed, for any user.\r\n\r\n### .NET applications using COM and impersonation\r\n\r\n.NET Applications that creates instances of .NET COM application within an Impersonation Context may receive the following error: \"0x80040154 (REGDB_E_CLASSNOTREG)\". Use the following guidance as a workaround.\r\n\r\n* Create an instance of the .NET COM component prior to the impersonation context call. Later impersonated create instance calls should work as expected.\r\n* Run the .NET Application in the context of the impersonated user\r\n* Avoid using Impersonation when creating the .NET COM object","Url":"https://github.com/dotnet/announcements/issues/74","RelatedDescription":"Open issue \"Advisory on July 2018 .NET Framework Updates\" (#74)"},{"Id":"339929129","IsPullRequest":false,"CreatedAt":"2018-07-10T17:00:37","Actor":"blowdart","Number":"73","RawContent":null,"Title":"Microsoft Security Advisory CVE-2018-8356: .NET Core Security Feature Bypass Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-8356: .NET Core Security Feature Bypass Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a security feature bypass vulnerability that exists when .NET Core does not correctly validate certificates. An attacker who successfully exploited this vulnerability could present an expired certificate when challenged.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core applications handle certificate validation.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/wcf/issues/3009\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\n* If an application does not use Windows Communication Foundation you are not affected.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core, or ASP.NET Core based application that uses System.Private.ServiceModel with a version of 4.5.1 or earlier.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ---------------- | -------------------------\r\nSystem.Private.ServiceModel | 4.0.0, 4.1.0, 4.1.1 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 |  4.1.3 or later <br /> 4.3.3 or later <br /> 4.4.4 or later <br /> 4.5.3 or later\r\nSystem.ServiceModel.Duplex | 4.0.0, 4.0.1, 4.0.2 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 | 4.0.4 or later <br /> 4.3.3 or later <br /> 4.443 or later <br /> 4.5.3 or later\r\nSystem.ServiceModel.Http | 4.0.0, 4.0.10, 4.1.0, 4.1.1 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 | 4.1.3 or later <br /> 4.3.3 or later <br /> 4.4.4 or later <br /> 4.5.3 or later\r\nSystem.ServiceModel.NetTcp | 4.0.0, 4.1.0, 4.1.1 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 | 4.1.3 or later <br /> 4.3.3 or later <br /> 4.4.4 or later <br /> 4.5.3 or later\r\nSystem.ServiceModel.Primitives | 4.0.0, 4.1.0, 4.1.1 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 | 4.1.2 or later <br /> 4.3.3 or later <br /> 4.4.4 or later <br /> 4.5.3 or later\r\nSystem.ServiceModel.Security | 4.0.0, 4.0.1, 4.0.2 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 | 4.0.4 or later <br /> 4.3.3 or later <br /> 4.4.4 or later <br /> 4.5.3 or later\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n.NET Core projects have two types of dependencies: direct and transitive. You must update your projects using the following instructions to address both types of dependency.\r\n\r\n### <a name=\"project-format\"></a>.NET Core Project formats\r\n\r\n.NET Core has two different project file formats, depending on what software created the project.\r\n\r\n1. `project.json` is the format used in .NET Core 1.0 and Microsoft Visual Studio 2015.\r\n2. `csproj` is the format used in .NET Core 1.1, .NET Core 2.0 and Microsoft Visual Studio 2017.\r\n\r\n#### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file or your `project.json` file. They can be fixed by [editing the project file](#direct-dependencies) or using NuGet to update the dependency.\r\n\r\n The `System.Private.ServiceModel` package is not meant to be directly depended on and will not appear in your direct dependency list.\r\n\r\n#### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in three ways, depending on your [project format](#project-format):\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects *OR*.\r\n* By examining the `project.lock.json` file contained in the root directory of your project for `project.json` based projects.\r\n\r\nThe `project.assets.json` and `project.lock.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\n#### <a name=\"direct-dependencies-vs2017\"></a>Fixing direct dependencies in a csproj based project / Visual Studio 2017\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.ServiceModel.Http\" Version=\"4.4.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.ServiceModel.Http` version 4.4.0.\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.ServiceModel.Http` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.ServiceModel.Http\" Version=\"4.4.3\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"direct-dependencies-vs2015\"></a> Fixing Direct Dependencies in project.json based project / Visual Studio 2015\r\n\r\nOpen your `project.json` file in your editor. Look for the dependencies section. Below is an example dependencies section:\r\n\r\n``` json\r\n    \"dependencies\": {\r\n      \"Microsoft.NETCore.App\": {\r\n        \"version\": \"1.0.1\",\r\n        \"type\": \"platform\"\r\n      },\r\n     \"Microsoft.AspNetCore.Mvc.Core\": \"1.0.6\",\r\n     \"System.ServiceModel.Http\" : \"4.0.0\"\r\n    }\r\n```\r\n\r\nThis example has three direct dependencies: `Microsoft.NETCore.App`, `Microsoft.AspNetCore.Mvc.Core` and `System.ServiceModel.Http`.\r\n\r\n`Microsoft.NetCore.App` is the platform the application targets, you should ignore this. The other packages expose their version to the right of the package name. In our example, our non-platform packages are version 1.0.1.\r\n\r\nReview your direct dependencies for any instance of the packages and versions listed above. In the example above, there is a direct dependency on a vulnerable package, `System.ServiceModel.Http` version 4.4.0.\r\n\r\nTo update to the fixed package, change the version number to be the appropriate package for your release. In the example, this would be updating `System.ServiceModel.Http` to 4.4.3.\r\n\r\nAfter updating the vulnerable package versions, save your `project.json` file.\r\n\r\nThe dependencies section in our example `project.json` would now look as follows:\r\n\r\n```json\r\n  \"dependencies\": {\r\n    \"Microsoft.NETCore.App\": {\r\n      \"version\": \"1.0.1\",\r\n      \"type\": \"platform\"\r\n    },\r\n    \"Microsoft.AspNetCore.Mvc.Core\": \"1.0.6\",\r\n    \"System.ServiceModel.Http \": \"4.4.3\"\r\n  }\r\n```\r\n\r\nIf you are using Visual Studio and save your updated `project.json` file, Visual Studio will restore the new package version. You can see the restore results by opening the Output Window (Ctrl+Alt+O) and changing the Show output from drop-down list to Package Manager.\r\n\r\nIf you are not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore your new dependency.\r\n\r\nAfter you have addressed all of your direct dependencies, you must also review your transitive dependencies.\r\n\r\nAfter you've addressed all of your direct dependencies, you must review your transitive dependencies.\r\n\r\n#### Discovering and fixing transitive dependencies\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json) or the [the `project.lock.json` file](#project-lock-json).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json (csproj/VS2017)\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `System.ServiceModel.Http/4.3.0` is a reference to version 4.3.0 of `System.ServiceModel.Http`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.ServiceModel.Http\" Version=\"4.3.2\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n##### <a name=\"project-lock-json\"></a> Manually reviewing project.lock.json (project.json/VS2015)\r\n\r\nOpen the `project.lock.json` file in your editor. We suggest you use an editor that understands json and allows you to collapse and expand nodes to review this file; both Visual Studio and Visual Studio Code provide this functionality.\r\n\r\nIf you are using Visual Studio the `project.lock.json` file is “under” the `project.json` file. Click the right pointing triangle, ▷, to the left of the `project.json` file to expand the solution tree to expose the `project.lock.json` file. The following image shows a project with the `project.json` file expanded to show the `project.lock.json` file.\r\n\r\n![project lock json](https://cloud.githubusercontent.com/assets/796298/25858179/f6e01200-348f-11e7-8a77-7176d8dd3f03.png)\r\n\r\nSearch the `project.lock.json` file for the vulnerable packages, using the format `packagename/`, using each of the package names from the table above. If you find any vulnerable assembly name in your search examine the line on which they are found, the version number is after the `/` and compare to the vulnerable versions table above. For example a search result that shows `System.ServiceModel.Http/4.0.1` is a reference to v4.0.1 of `System.ServiceModel.Http`.   If your `project.lock.json` file includes references to any of the package versions shown above then you will need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to a vulnerable version of `System.ServiceModel.Http` this means none of your direct dependencies depend on any vulnerable packages or you have already fixed the problem by updating the direct dependencies.\r\n\r\nIf your transitive dependency review found references to any of the vulnerable packages you must add a direct dependency to the updated package to your `project.json` file to override the transitive dependency. Open your `project.json` and find the dependencies section. For example:\r\n\r\n``` json\r\n  \"dependencies\": {\r\n    \"Microsoft.NETCore.App\": {\r\n      \"version\": \"1.0.1\",\r\n      \"type\": \"platform\"\r\n    },\r\n    \"Microsoft.AspNetCore.Mvc\": \"1.0.0\"\r\n  }\r\n```\r\n\r\nFor each of the vulnerable packages your search returned you must add a direct dependency to the updated version by adding it to the `project.json` file. You do this by adding a new line to the dependencies section, referring the fixed version. For example, if your search showed a transitive reference to the vulnerable `System.ServiceModel.Http` version 1.0.0 you would add a reference to the appropriate fixed version, 1.0.6. Edit the `project.json` file as follows:\r\n\r\n``` json\r\n  \"dependencies\": {\r\n    \"Microsoft.NETCore.App\": {\r\n      \"version\": \"1.0.1\",\r\n      \"type\": \"platform\"\r\n    },\r\n    \"System.ServiceModel.Http\": \"4.1.2\",\r\n    \"Microsoft.AspNetCore.Mvc\": \"1.0.0\"\r\n  }\r\n```\r\n\r\nAfter you have added direct dependencies to the fixed packages, save your `project.json` file.\r\n\r\nIf you are using Visual Studio save your updated `project.json` file and Visual Studio will restore the new package versions. You can see the restore results by opening the Output Window (Ctrl+Alt+O) and changing the Show output from drop-down list to Package Manager.\r\n\r\nIf you are not using Visual Studio open a command line and change to your project directory. Execute the `dotnet restore` command to restore your new dependencies.\r\n\r\n#### Rebuilding your application\r\n\r\nFinally you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2018-8356](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-CVE-2018-8356)\r\n\r\n### Revisions\r\n\r\nV1.1 (July 23, 2018): Updated package versions, as some assemblies were released unsigned.\r\nV1.0 (July 10, 2018): Advisory published.\r\n\r\n_Version 1.1_\r\n\r\n_Last Updated 2018-07-23_\r\n","Url":"https://github.com/dotnet/announcements/issues/73","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2018-8356: .NET Core Security Feature Bypass Vulnerability\" (#73)"},{"Id":"329614193","IsPullRequest":false,"CreatedAt":"2018-06-05T20:33:10","Actor":"huanwu","Number":"72","RawContent":null,"Title":"Introducing dotnet-svcutil.xmlserializer for .NET Core","State":"open","Body":"# Introducing dotnet-svcutil.xmlserializer for .NET Core\r\nOn the full .NET Framework you are able to pre-generate a serialization assembly using the tool svcutil. We are providing similar functionality on .NET Core by releasing the dotnet-svcutil.xmlserializer NuGet package. It pre-generates c# serialization code for the types used by WCF Service Contract in the client applications that can be serialized using the XmlSerializer to improve the startup performance of Xml Serialization when serializing or de-serializing objects of those types using XmlSerializer. \r\nYou can start using the tool today by following the [instructions](https://github.com/dotnet/core/blob/master/samples/dotnet-svcutil.xmlserializer-instructions.md). \r\n\r\n## Discussion \r\nPlease share with us any thoughts of questions that you may have at: \r\n\r\n- dotnet/wcf [#2927](https://github.com/dotnet/wcf/issues/2927)\r\n## Details \r\nWhen to use XmlSerializer with WCF in an app to serialize contract data types, it will generate an XmlSerializer during runtime to do the serialization. You can improve the startup performance of Xml serialization by simply adding the reference of dotnet-svcutil.xmlserializer NuGet package to your project. This tool will generate the serialization code and compile it into an assembly next to your output assembly at build time in advance. This assembly can then be deployed and ran with your application. \r\n\r\nPlease create an issue with your feedback at [dotnet/wcf](https://github.com/dotnet/wcf/issues). We are actively looking to improve the tool and your input is a valuable part of the process. ","Url":"https://github.com/dotnet/announcements/issues/72","RelatedDescription":"Open issue \"Introducing dotnet-svcutil.xmlserializer for .NET Core\" (#72)"},{"Id":"327817883","IsPullRequest":false,"CreatedAt":"2018-05-30T17:02:38","Actor":"MichaelSimons","Number":"71","RawContent":null,"Title":".NET Core 2.1 Docker Image Updates","State":"open","Body":"# .NET Core 2.1 Docker Image Updates\r\n\r\nWe have consolidating the set of Docker Hub repositories that we use for .NET Core and ASP.NET Core. We will use [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/) as the only repository that we publish to for .NET Core 2.1 and later releases.\r\n\r\nWe added a set of environment variables to .NET Core images to make it easier to host ASP.NET Core sites at any .NET Core image layer and to enable `dotnet watch` in SDK container images without additional configuration.\r\n\r\nAlpine and ARM32 image variants have been added and are supported.\r\n\r\n[.NET Core Docker Samples](https://github.com/dotnet/dotnet-docker/blob/master/samples/README.md) have been moved to the [dotnet/dotnet-docker](https://github.com/dotnet/dotnet-docker) repo. The samples have been updated for .NET Core 2.1. New samples have been added, including [Hosting ASP.NET Core Images with Docker over HTTPS](https://github.com/dotnet/dotnet-docker/blob/master/samples/aspnetapp/aspnetcore-docker-https.md).\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet/dotnet-docker #560](https://github.com/dotnet/dotnet-docker/issues/560)\r\n\r\n## Details\r\n\r\nThe following changes have been made as part of the .NET Core 2.1 release.\r\n\r\n### Repo consolidation\r\n\r\n.NET Core and ASP.NET Core images will be published to the [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/) Docker Hub repo for .NET Core 2.1 and later releases. Co-location of images improves image discovery. The .NET Core runtime and SDK images are already co-located. We are adding the ASP.NET Core runtime images to the [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/) repo as a third image type. We are [no longer producing the microsoft/aspnetcore-build image](https://github.com/aspnet/Announcements/issues/298) with .NET Core 2.1.\r\n\r\nThe following three tags are now available at the [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/) repo:\r\n\r\n* `2.1-sdk`\r\n* `2.1-aspnetcore-runtime`\r\n* `2.1-runtime`\r\n\r\n### Environment variables enable new scenarios\r\n\r\nWe added a set of environment variables to .NET Core docker images, for .NET Core 2.1 and later. These environment variables enable more scenarios to work without additional configuration, such as [developing ASP.NET Core applications in a container](https://github.com/dotnet/dotnet-docker/blob/master/samples/aspnetapp/aspnet-docker-dev-in-container.md).\r\n\r\nNew sdk image environment variables ([example](https://github.com/dotnet/dotnet-docker/blob/master/2.1/sdk/bionic/amd64/Dockerfile#L28-L32))\r\n* `ASPNETCORE_URLS=http://+:80`\r\n* `DOTNET_RUNNING_IN_CONTAINER=true`\r\n* `DOTNET_USE_POLLING_FILE_WATCHER=true`\r\n\r\nNew Linux runtime-deps image environment variables ([example](https://github.com/dotnet/dotnet-docker/blob/master/2.1/runtime-deps/alpine3.7/amd64/Dockerfile#L19-L21))\r\n* `ASPNETCORE_URLS=http://+:80`\r\n* `DOTNET_RUNNING_IN_CONTAINER=true`\r\n\r\nNew Windows runtime image environment variables ([example](https://github.com/dotnet/dotnet-docker/blob/master/2.1/runtime/nanoserver-1709/amd64/Dockerfile#L33-L35))\r\n* `ASPNETCORE_URLS=http://+:80`\r\n* `DOTNET_RUNNING_IN_CONTAINER=true`\r\n\r\n### New image variants\r\n\r\nAlpine and ARM32 image variants have been added and are supported as part of the .NET Core 2.1 release. \r\n\r\nFor Alpine, you must [use specific tags to create Alpine-based images](https://github.com/dotnet/dotnet-docker/blob/master/samples/dotnetapp/README.md#build-and-run-the-sample-for-alpine-with-docker), such as `2.1-runtime-alpine`. \r\n\r\nFor ARM32, you can use the regular multi-arch tags, like `2.1-runtime` and `2.1-sdk` if you are building on an ARM32 device. If you are building on another type of machine, you need to use ARM32-specific tags for the runtime images you create, such as `2.1-runtime-bionic-arm32v7` (for Ubuntu 18.04).\r\n\r\n### Related repos\r\n\r\nThe following repos are related to this announcement:\r\n\r\n* [microsoft/aspnetcore](https://hub.docker.com/r/microsoft/aspnetcore/)\r\n* [microsoft/aspnetcore-build](https://hub.docker.com/r/microsoft/aspnetcore-build/)\r\n* [microsoft/dotnet/](https://hub.docker.com/r/microsoft/dotnet/)\r\n","Url":"https://github.com/dotnet/announcements/issues/71","RelatedDescription":"Open issue \".NET Core 2.1 Docker Image Updates\" (#71)"},{"Id":"325815293","IsPullRequest":false,"CreatedAt":"2018-05-23T18:04:46","Actor":"mlacouture","Number":"70","RawContent":null,"Title":"Introducing dotnet-svcutil","State":"open","Body":"# Introducing dotnet-svcutil\r\n\r\nThe Microsoft Windows Communication Foundation (WCF) **dotnet-svcutil** tool is a .NET Core CLI tool that retrieves metadata from a web service on a network location or from a WSDL file, and generates a WCF class containing client proxy methods that you can use to access the web service operations.\r\n\r\nSimilarly to the [Service Model Metadata - svcutil](https://docs.microsoft.com/en-us/dotnet/framework/wcf/servicemodel-metadata-utility-tool-svcutil-exe) tool for .NET Framework projects, the **dotnet-svcutil** is a command line tool for generating a web service reference compatible with .NET Core and .NET Standard projects. \r\n\r\nThe **dotnet-svcutil** tool is an alternative option to the [WCF Web Service Reference ](https://docs.microsoft.com/en-us/dotnet/core/additional-tools/wcf-web-service-reference-guide)Visual Studio connected service provider which first shipped with Visual Studio 2017 v15.5.  The **dotnet-svcutil** tool as a .NET Core CLI tool, however, can be run on multiple platforms like Linux and MacOS in addition to Windows.\r\n\r\n# Discussion\r\nPlease share your thoughts with us by commenting on GitHub issue dotnet/wcf#2894\r\n","Url":"https://github.com/dotnet/announcements/issues/70","RelatedDescription":"Open issue \"Introducing dotnet-svcutil\" (#70)"},{"Id":"321374728","IsPullRequest":false,"CreatedAt":"2018-05-08T22:56:33","Actor":"richlander","Number":"68","RawContent":null,"Title":"May 2018 .NET Updates","State":"open","Body":"# May 2018 .NET Updates\r\n\r\nThe following .NET updates were released this month. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Framework\r\n\r\n* [.NET Framework May 2018 Preview of Quality Rollup for Windows 10 April 2018 Update (version 1803)](https://blogs.msdn.microsoft.com/dotnet/2018/05/23/net-framework-may-2018-preview-of-quality-rollup-for-windows-10-april-2018-update-version-1803/)\r\n* [.NET Framework May 2018 Preview of Quality Rollup for Windows 10 1709 (Fall Creators Update)](https://blogs.msdn.microsoft.com/dotnet/2018/05/21/net-framework-may-2018-preview-of-quality-rollup-for-windows-10-1709-fall-creators-update/)\r\n* [.NET Framework May 2018 Security and Quality Rollup for Windows 10](https://blogs.msdn.microsoft.com/dotnet/2018/05/17/net-framework-may-2018-preview-of-quality-rollup-for-windows-10/)\r\n* [.NET Framework May 2018 Security and Quality Rollup](https://blogs.msdn.microsoft.com/dotnet/2018/05/08/net-framework-may-2018-security-and-quality-rollup/)\r\n* [microsoft/dotnet-framework](https://hub.docker.com/r/microsoft/dotnet-framework/) and related Docker images were updated for [Windows Server, version 1803](https://docs.microsoft.com/en-us/windows-server/get-started/get-started-with-1803).\r\n\r\n## .NET Core\r\n\r\n* [Announcing .NET Core 2.1](https://blogs.msdn.microsoft.com/dotnet/2018/05/30/announcing-net-core-2-1/)\r\n* [.NET Core May 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/05/08/net-core-may-2018-update/)\r\n* [.NET Core 2.1 RC1](https://blogs.msdn.microsoft.com/dotnet/2018/05/07/announcing-net-core-2-1-rc-1/)\r\n* [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/) and related Docker images were updated for [Windows Server, version 1803](https://docs.microsoft.com/en-us/windows-server/get-started/get-started-with-1803).\r\n\r\n## Previous Updates\r\n\r\n* [April 2018 .NET Updates](https://github.com/dotnet/announcements/issues/64)\r\n* [February 2018 Security and Quality Updates](https://github.com/dotnet/announcements/issues/59)","Url":"https://github.com/dotnet/announcements/issues/68","RelatedDescription":"Open issue \"May 2018 .NET Updates\" (#68)"},{"Id":"321269154","IsPullRequest":false,"CreatedAt":"2018-05-08T17:03:39","Actor":"blowdart","Number":"67","RawContent":null,"Title":"Microsoft Security Advisory CVE-2018-0765: .NET Core Denial Of Service Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-0765: .NET Core Denial Of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core and .NET native version 2.0. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a denial of service vulnerability that exists when .NET Framework and .NET Core improperly process XML documents. An attacker who successfully exploited this vulnerability could cause a denial of service against a .NET Framework, .NET Core, or .NET native application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Framework, .NET Core, and .NET native applications handle XML document processing.\r\n\r\nIf your application is an ASP.NET Core application, developers are also advised to update to [ASP.NET Core 2.0.8](https://www.nuget.org/packages/Microsoft.AspNetCore.All/2.0.8).\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/29578\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\n* If an application does not process signed XML, it is not affected by this vulnerability.\r\n* If your application targets .NET Core 1.x or .NET native 1.x, it is not affected as the vulnerable package is not available for these platforms.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core, .NET native, or ASP.NET Core based application that uses System.Security.Cryptography.Xml with a version of 4.4.1 or earlier.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ---------------- | -------------------------\r\nSystem.Security.Cryptography.Xml | ≤4.4.1 |  4.4.2 or later\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n.NET Core has two types of dependencies: direct and transitive. Direct dependencies are dependencies where you specifically add a package to your project, transitive dependencies occur when you add a package to your project that in turn relies on another package.\r\n\r\nFor example, the `Microsoft.AspNetCore.Mvc` package depends on the `Microsoft.AspNetCore.Mvc.Core` package. When you add a dependency on `Microsoft.AspNetCore.Mvc` in your project, you're taking a transitive dependency on `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\nAny application that has a direct or transitive dependency on the [affected package](#affected-software) can be exposed to the vulnerability if it does not meet any of the [mitigation factors](#mitigation-factors).\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n---\r\n\r\nIf you're targeting ASP.NET Core 2.0 and using the `Microsoft.AspNetCore.All` metapackage:\r\n\r\n* Update its version number to [2.0.8](https://www.nuget.org/packages/Microsoft.AspNetCore.All/2.0.8) to pull in updated packages that update their transitive dependencies to the fixed version of `System.Security.Cryptography.Xml`.\r\n\r\n---\r\n\r\n.NET Core projects have two types of dependencies: direct and transitive. You must update your projects using the following instructions to address both types of dependency.\r\n\r\n#### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your *csproj* file. They can be fixed by [editing the csproj file](#direct-dependencies) or using NuGet to update the dependency.\r\n\r\n#### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the *project.assets.json* file contained in the obj directory of your project.\r\n\r\nThe *project.assets.json* files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\n#### <a name=\"direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Security.Cryptography.Xml\" Version=\"4.4.1\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.Security.Cryptography.Xml` version 4.4.1.\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.Security.Cryptography.Xml` to a [fixed package number](#affected-software). Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Security.Cryptography.Xml\" Version=\"4.4.2\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\nAfter you've addressed all of your direct dependencies, you must review your transitive dependencies.\r\n\r\n#### Discovering and fixing transitive dependencies\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can [review the *project.assets.json* file](#project-assets-json).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio 2017, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a>Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `System.Security.Cryptography.Xml/4.4.0` is a reference to version 4.4.0 of `System.Security.Cryptography.Xml`.\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\n##### Fixing transitive dependencies\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.Security.Cryptography.Xml` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Security.Cryptography.Xml\" Version=\"4.4.2\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n#### Rebuilding your application\r\n\r\nFinally you must rebuild your application, test, and redeploy.\r\n\r\n---\r\n\r\nIf you're targeting .NET native for a Universal Windows Platform (UWP) application, you should update your dependencies and republish your application.\r\n\r\nIf you submit an application to the Windows Store with an outdated reference, the store will update the reference automatically, which has the potential for compatibility issues. Thus, we recommend updating your application directly and testing its functionality before resubmitting.\r\n\r\n---\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2018-0787](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-CVE-2018-0765)\r\n\r\n### Revisions\r\n\r\nV1.0 (May 8, 2018): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2018-05-08_","Url":"https://github.com/dotnet/announcements/issues/67","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2018-0765: .NET Core Denial Of Service Vulnerability\" (#67)"},{"Id":"319701474","IsPullRequest":false,"CreatedAt":"2018-05-02T20:31:57","Actor":"MichaelSimons","Number":"66","RawContent":null,"Title":".NET Framework Docker Samples have moved","State":"open","Body":"# .NET Framework Docker Samples have moved\r\nThe .NET Framework Docker samples have moved to the [samples folder of Microsoft/dotnet-framework-docker](https://github.com/Microsoft/dotnet-framework-docker/tree/master/samples).\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [Microsoft/dotnet-framework-docker #128](https://github.com/Microsoft/dotnet-framework-docker/issues/128)\r\n\r\n## Details\r\nThe .NET Framework Docker samples have been enhanced and moved to the [samples folder of Microsoft/dotnet-framework-docker](https://github.com/Microsoft/dotnet-framework-docker/tree/master/samples).\r\n\r\n- https://github.com/Microsoft/dotnet-framework-docker/pull/126\r\n- https://github.com/Microsoft/dotnet-framework-docker-samples/issues/22\r\n\r\nThe samples show various ways to use the .NET Framework and Docker together. You can use the samples as the basis of your own Docker images or just to play.\r\n\r\nThe samples exercise various levels of functionality. The [.NET Framework Docker sample](https://github.com/Microsoft/dotnet-framework-docker/blob/master/samples/dotnetapp/README.md) includes the most functionality, including build, unit testing, and pushing images to a container registry. The [ASP.NET Docker sample](https://github.com/Microsoft/dotnet-framework-docker/blob/master/samples/aspnetapp/README.md) includes instructions for testing images with [Azure Container Instances](https://azure.microsoft.com/services/container-instances/). The samples include detailed instructions for use with and without Docker.\r\n","Url":"https://github.com/dotnet/announcements/issues/66","RelatedDescription":"Open issue \".NET Framework Docker Samples have moved\" (#66)"},{"Id":"319700544","IsPullRequest":false,"CreatedAt":"2018-05-02T20:28:55","Actor":"MichaelSimons","Number":"65","RawContent":null,"Title":".NET Framework Runtime and Builder Docker repos have merged ","State":"open","Body":"# .NET Framework Runtime and Builder Docker repos have merged\r\n\r\nThe [microsoft/dotnet-framework-build](https://hub.docker.com/r/microsoft/dotnet-framework-build/) Docker Hub repo has been merged into the [microsoft/dotnet-framework](https://hub.docker.com/r/microsoft/dotnet-framework/) Docker Hub repo.  All new tags going forward will only be pushed to [microsoft/dotnet-framework](https://hub.docker.com/r/microsoft/dotnet-framework/).  The images in the [microsoft/dotnet-framework-build](https://hub.docker.com/r/microsoft/dotnet-framework-build/) Docker Hub repo will be retained and serviced accordingly as to not affect existing usage.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [Microsoft/dotnet-framework-docker #125](https://github.com/Microsoft/dotnet-framework-docker/issues/125)\r\n\r\n## Details\r\n\r\nThe [microsoft/dotnet-framework-build](https://hub.docker.com/r/microsoft/dotnet-framework-build/) Docker Hub repo has been merged into the [microsoft/dotnet-framework](https://hub.docker.com/r/microsoft/dotnet-framework/) Docker Hub repo.\r\n\r\n* https://github.com/Microsoft/dotnet-framework-docker/pull/123\r\n* https://github.com/Microsoft/dotnet-framework-docker/issues/78\r\n\r\nIn order to differentiate the runtime and build images, `runtime` and `sdk` distinguishing identifiers have been added to the tags.  For example, `4.7.2-runtime` and `4.7.2-sdk`.\r\n\r\nAll new tags going forward will only be pushed to [microsoft/dotnet-framework](https://hub.docker.com/r/microsoft/dotnet-framework/).   For example, the build images for 4.7.2 which was released today, only exist in [microsoft/dotnet-framework](https://hub.docker.com/r/microsoft/dotnet-framework/) repo.\r\n\r\nThe existing tags in [microsoft/dotnet-framework-build](https://hub.docker.com/r/microsoft/dotnet-framework-build/) will remain and be serviced accordingly.  For example, the stable tags such as `4.7.1-windowsservercore-1709` will continue to be patched on a monthly basis.\r\n\r\nWe recommend that as you create and maintain your code, you move to use the new `runtime` and `sdk` images from the [microsoft/dotnet-framework](https://hub.docker.com/r/microsoft/dotnet-framework/) repo.\r\n","Url":"https://github.com/dotnet/announcements/issues/65","RelatedDescription":"Open issue \".NET Framework Runtime and Builder Docker repos have merged \" (#65)"},{"Id":"315285808","IsPullRequest":false,"CreatedAt":"2018-04-18T00:20:13","Actor":"richlander","Number":"64","RawContent":null,"Title":"April 2018 .NET Updates","State":"open","Body":"# April 2018 .NET Updates\r\n\r\nThe following .NET updates were released this month. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Framework\r\n\r\n* [Announcing the .NET Framework 4.7.2](https://blogs.msdn.microsoft.com/dotnet/2018/04/30/announcing-the-net-framework-4-7-2/)\r\n* No new patch releases. See: [.NET Framework February 2018 Security and Quality Rollup](https://blogs.msdn.microsoft.com/dotnet/2018/02/13/net-framework-february-2018-security-and-quality-rollup/).\r\n* [microsoft/dotnet-framework](https://hub.docker.com/r/microsoft/dotnet-framework/) and related Docker images were updated for [KB4093112](https://support.microsoft.com/help/4093112) and associated updates.\r\n\r\n## .NET Core\r\n\r\n* [.NET Core April 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/04/17/net-core-april-2018-update/)\r\n   * [2.0.7 Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.0/2.0.7.md)\r\n   * [1.1.8 Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.1/1.1.8.md)\r\n   * [1.0.11 Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.0/1.0.11.md)\r\n* [.NET Core 2.1 Preview 2](https://blogs.msdn.microsoft.com/dotnet/2018/04/11/announcing-net-core-2-1-preview-2/)\r\n* [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/) and related Docker images were updated for [KB4093112](https://support.microsoft.com/help/4093112) and associated updates.\r\n* Latest .NET Core security release: [.NET Core March 2018 Update](https://github.com/dotnet/core/issues/1341)\r\n\r\n## .NET for UWP\r\n\r\n* No new releases. See: [.NET for UWP January 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-for-uwp-january-2018-update/).\r\n\r\n## Previous Updates\r\n\r\n* [February 2018 Security and Quality Updates](https://github.com/dotnet/announcements/issues/59)","Url":"https://github.com/dotnet/announcements/issues/64","RelatedDescription":"Open issue \"April 2018 .NET Updates\" (#64)"},{"Id":"305721744","IsPullRequest":false,"CreatedAt":"2018-03-15T21:13:36","Actor":"mairaw","Number":"63","RawContent":null,"Title":"Transport Layer Security (TLS) best practices with the .NET Framework article published","State":"open","Body":"# Transport Layer Security (TLS) best practices with the .NET Framework article published\r\n\r\nA new article was published that discusses the Transport Layer Security (TLS) best practices for .NET Framework applications at https://docs.microsoft.com/dotnet/framework/network-programming/tls.\r\n\r\nTo ensure .NET Framework applications remain secure, the TLS version should **not** be hardcoded. .NET Framework applications should use the TLS version the operating system (OS) supports.\r\n\r\nThe (TLS) best practices article targets developers who are:\r\n* Directly using the System.Net APIs (for example, `System.Net.Http.HttpClient` and `System.Net.Security.SslStream`).\r\n* Directly using WCF clients and services using the `System.ServiceModel` namespace.\r\n* Using [Azure Cloud Services](https://azure.microsoft.com/services/cloud-services/) Web and Worker roles to host and run your application. See the [Azure Cloud Services](https://docs.microsoft.com/dotnet/framework/network-programming/tls#azure-cloud-services) section.\r\n\r\nThe article explains how to enable the strongest security available for the version of the .NET Framework that your app targets and runs on.\r\n\r\nThe section [Audit your code and make code changes](https://docs.microsoft.com/dotnet/framework/network-programming/tls#audit-your-code-and-make-code-changes) covers auditing and updating your code.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts and have any discussions with us at:\r\n\r\ndotnet/docs#4675","Url":"https://github.com/dotnet/announcements/issues/63","RelatedDescription":"Open issue \"Transport Layer Security (TLS) best practices with the .NET Framework article published\" (#63)"}],"ResultType":"GitHubIssue"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1073371092515840000","CreatedAt":"2018-12-14T00:16:25+00:00","UserScreenname":"dotnet","Text":"C# and Visual Basic files get Regex language support in @VisualStudio 2019 Preview\nhttps://t.co/NL5QgAl9hq https://t.co/WWTK6BT5RG","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":320,"FavoriteCount":121,"RawContent":null},{"Id":"1072638045227270144","CreatedAt":"2018-12-11T23:43:33+00:00","UserScreenname":"dotnet","Text":"Blogged: .NET Framework December 2018 Security and Quality Rollup https://t.co/5PllosL5i2","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":9,"FavoriteCount":8,"RawContent":null},{"Id":"1072146418868064256","CreatedAt":"2018-12-10T15:10:00+00:00","UserScreenname":"dotnet","Text":"Learn about writing tests for @AzureFunctions with Senior Program Manager Jeff Hollan (@jeffhollan) in this episode… https://t.co/18tWdVma7r","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":31,"FavoriteCount":11,"RawContent":null},{"Id":"1070731847620050944","CreatedAt":"2018-12-06T17:29:00+00:00","UserScreenname":"dotnet","Text":"Learn about the latest F# Tooling Updates for Visual Studio 2017 from @_cartermp in this episode of the #OnDotNet s… https://t.co/wSjVH0qlRz","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":28,"FavoriteCount":15,"RawContent":null}]}},"RunOn":"2018-12-15T05:30:49.9024164Z","RunDurationInMilliseconds":25267}