{"Data":{"Blog":{"FeedItems":[{"Title":".NET Framework 4.7.2 Developer Pack Early Access build 3056 is available!","PublishedOn":"2018-03-08T23:22:13+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, we are happy to share an Early Access build with the .NET Framework 4.7.2 Developer Pack. The .NET Framework 4.7.2 Developer Pack lets developers build applications that target the .NET...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/03/08/net-framework-4-7-2-developer-pack-early-access-build-3056-is-available/","RawContent":null},{"Title":"F# language and tools update for Visual Studio 2017 version 15.6","PublishedOn":"2018-03-06T18:28:06+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"With the release of Visual Studio 2017 version 15.6, we’re excited to share updates to the F# language and core library, F# tooling in Visual Studio, and infrastructure updates that concern OSS...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/03/06/f-language-and-tools-update-for-visual-studio-2017-version-15-6/","RawContent":null},{"Title":"Announcing Entity Framework Core 2.1 Preview 1","PublishedOn":"2018-02-27T18:11:29+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"Today we are releasing the first preview of EF Core 2.1, alongside .NET Core 2.1 Preview 1 and ASP.NET Core 2.1 Preview 1. The new bits are available in NuGet as part of the individual packages, and...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/27/announcing-entity-framework-core-2-1-preview-1/","RawContent":null},{"Title":"Announcing .NET Core 2.1 Preview 1","PublishedOn":"2018-02-27T18:08:23+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Today, we are announcing .NET Core 2.1 Preview 1. It is the first public release of .NET Core 2.1. We have great improvements that we want to share and that we would love to get your feedback on,...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/27/announcing-net-core-2-1-preview-1/","RawContent":null},{"Title":"Calling All Desktop Developers: How do you interact with data?","PublishedOn":"2018-02-27T17:00:36+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Connecting to databases and services is an important part of desktop application development for many of our customers. Visual Studio provides a variety of tools and technologies that can help you...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/27/calling-all-desktop-developers-how-do-you-interact-with-data/","RawContent":null},{"Title":"Azure Blob Storage as a Network Drive","PublishedOn":"2018-02-26T16:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Many applications make use of a network drive to backup and store files. When I was in university I found myself constantly coding for fun, and one example took the form of a network share for my...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/26/azure-blob-storage-as-a-network-drive/","RawContent":null},{"Title":".NET Framework February 2018 Security and Quality Rollup","PublishedOn":"2018-02-14T04:27:17+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, we are releasing the February 2018 Security and Quality Rollup. Security No new security fixes. See .NET Framework January 2018 Security and Quality Rollup for the latest security updates....","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/13/net-framework-february-2018-security-and-quality-rollup/","RawContent":null},{"Title":"Machine Learning in .NET – Help us build the right experience!","PublishedOn":"2018-02-13T17:17:58+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"In the past few years, Machine Learning (ML) and Artificial Intelligence (AI) have paved the road for building smarter applications through advancements in speech recognition, computer vision,...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/13/machine-learning-in-net-help-us-build-the-right-experience/","RawContent":null},{"Title":"Announcing .NET Framework 4.7.2 Early Access build 3052!","PublishedOn":"2018-02-05T21:55:13+00:00","CommentsCount":11,"FacebookCount":0,"Summary":"Today, we are happy to share the .NET Framework 4.7.2 Early Access build 3052 for your feedback. .NET Framework 4.7.2 is the next version of the .NET Framework. It is currently feature-complete and in...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/05/announcing-net-framework-4-7-2-early-access-build-3052/","RawContent":null},{"Title":"Entity Framework Core 2.1 Roadmap","PublishedOn":"2018-02-02T18:39:25+00:00","CommentsCount":8,"FacebookCount":0,"Summary":"As mentioned in the announcement of the .NET Core 2.1 roadmap earlier today, at this point we know the overall shape of our next release and we have decided on a general schedule for it. As we...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/02/entity-framework-core-2-1-roadmap/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"7192252734","Type":"PullRequestEvent","CreatedAt":"2018-02-03T01:30:47","Actor":"karann-msft","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/98","RelatedDescription":"Opened pull request \"Updates to reflect the latest information\" (#98) at dotnet/home","RelatedBody":""},{"Id":"7187459205","Type":"PullRequestEvent","CreatedAt":"2018-02-02T05:26:03","Actor":"mairaw","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/97","RelatedDescription":"Opened pull request \"update CLA PDF link\" (#97) at dotnet/home","RelatedBody":""},{"Id":"7102763357","Type":"PullRequestEvent","CreatedAt":"2018-01-16T00:17:04","Actor":"galatrash-at-dnn","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/96","RelatedDescription":"Opened pull request \"Adding DNN Platform.\" (#96) at dotnet/home","RelatedBody":""},{"Id":"7097053889","Type":"PullRequestEvent","CreatedAt":"2018-01-14T15:15:00","Actor":"bfistein","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/95","RelatedDescription":"Opened pull request \"Fix broken logo URL\" (#95) at dotnet/home","RelatedBody":""},{"Id":"7065382954","Type":"PullRequestEvent","CreatedAt":"2018-01-06T19:21:47","Actor":"ctaggart","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/94","RelatedDescription":"Opened pull request \"add SourceLink\" (#94) at dotnet/home","RelatedBody":"Adding SourceLink to the project list as per the checklist https://github.com/ctaggart/SourceLink/issues/138"},{"Id":"7044237283","Type":"PullRequestEvent","CreatedAt":"2017-12-31T20:25:44","Actor":"onovotny","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/93","RelatedDescription":"Opened pull request \"Add Humanizer\" (#93) at dotnet/home","RelatedBody":"Onboarding Humanizer: https://github.com/Humanizr/Humanizer/issues/682"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"7301596554","Type":"IssuesEvent","CreatedAt":"2018-02-27T06:10:33","Actor":"mairaw","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/61","RelatedDescription":"Opened issue \"New offline books released for Visual Studio 2017\" (#61) at dotnet/announcements","RelatedBody":"# New offline books released for Visual Studio 2017\r\n\r\nEarlier this month, we released an update to Offline Books for the Visual Studio 2017 Help Viewer.\r\n\r\nThis release includes new .NET books, including .NET Core Guide, .NET Guide, .NET Framework Guide and the .NET API Reference. It also includes the latest content for Visual Studio 2017 version 15.5, the latest updates to Visual Basic, C# (7.1 and 7.2), F#, ASP.NET Core, NuGet, SQL Server, and the Universal Windows Platform.\r\n\r\nThe .NET Guide, .NET Framework Guide and .NET API Reference books together are a replacement for the .NET Framework 4.6 and 4.5 book, which can be removed. Just be aware that the new .NET API Reference book currently displays the API syntax block for C# only, but examples are shown in other languages, just like the experience you currently have on docs.microsoft.com.If you need to see the API syntax for Visual Basic, C++/CLI or F#, then you should keep the old book until the new reference book is updated again in a few weeks. Once you remove the .NET Framework 4.6 and 4.5 book, you cannot reinstall it.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts and have any discussions with us at:\r\n\r\n- https://github.com/dotnet/docs/issues/4502\r\n\r\n## Add new content\r\n\r\nYou will see these new books when you have Help Viewer installed and choose **Help** > **Add and Remove Content** from the Visual Studio 2017 main menu. If you don't see this menu item, then [open the Visual Studio Installer](https://docs.microsoft.com/visualstudio/install/modify-visual-studio), click the **More** dropdown and choose **Modify**. When the component list appears, choose **Individual Components** at the top, then check **Help Viewer**.\r\n\r\n![help_viewer_component](https://user-images.githubusercontent.com/12971179/36713111-c9d49a7c-1b40-11e8-918a-e7e3619669a2.png)\r\n\r\n## Help Viewer Installation\r\n\r\nTo start the installation, select the **Modify** button in the lower right corner of the Installer window.\r\n\r\nTo update individual books whose status is \"Updates available\", remove the book and then click **Add** to get the new version. To update all your books at once, select the link in the lower right corner of the **Add and Remove Content** window:\r\n\r\n![offline-books](https://user-images.githubusercontent.com/12971179/36713028-75b944f6-1b40-11e8-91c4-4830355f815e.png)"},{"Id":"7300537622","Type":"IssuesEvent","CreatedAt":"2018-02-27T00:12:10","Actor":"eerhardt","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/60","RelatedDescription":"Opened issue \"System.Runtime.Intrinsics in .NET Core 2.1\" (#60) at dotnet/announcements","RelatedBody":"# System.Runtime.Intrinsics in .NET Core 2.1\r\n\r\n.NET Core 2.1 has been adding platform intrinsic APIs to support directly calling processor specific instructions, such as Intel’s x86 SIMD instructions.  See the [initial platform intrinsics design](https://github.com/dotnet/designs/blob/master/accepted/platform-intrinsics.md) for more information.\r\n\r\nWe have decided that it makes the most sense for this intrinsics feature to ship in a “preview” status in the .NET Core 2.1 RTM timeframe.  This means that the runtime support we are implementing will be included, but the assembly exposing the intrinsics will only be available to projects via explicit reference to a “preview-only” package.  These APIs won’t be included in the official .NET Core 2.1 packages.\r\n\r\nGiven our limited time and resources, recent changes in the approach we take to expose the intrinsics, and API changes prompted by design feedback from the community, we don’t believe there is enough time to settle these APIs for 2.1. We plan to follow the pattern of other recent features like Span<T> and Memory<T> that first shipped in preview before formally joining the supported API surface.  Not only would we expect the next version of .NET Core to support more intrinsics than could be supported in 2.1, but we expect to have real usage examples in CoreFX and higher level components as well.  These real world examples, as well as feedback from customers who opt in to the preview, should give us the confidence we need to officially support the APIs going forward.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\nhttps://github.com/dotnet/corefx/issues/27486\r\n\r\n## Details\r\n\r\nIn the coming days, we plan on removing System.Runtime.Intrinsics.dll from the Microsoft.NETCore.App package.  This means any libraries/applications that are using these APIs will no longer compile by default, and will not run on new builds of .NET Core 2.1.\r\n\r\nAt the same time, we will start producing a new System.Runtime.Intrinsics.Experimental NuGet package.  In order to continue using these APIs on .NET Core 2.1, a project will need to add a reference to this new package.\r\n\r\nAs its name implies, this package is experimental and should only be used for preview purposes.  It isn’t expected to be used in production scenarios.  Future version of .NET Core (after 2.1) will be allowed to break this package. This enables us respond to future feedback that requires the APIs to be modified.\r\n\r\nIn the future, when we are confident we have the intrinsic APIs right, we will stop producing the System.Runtime.Intrinsics.Experimental package. The platform intrinsics APIs will then be added back to Microsoft.NETCore.App and will be officially supported."},{"Id":"7273056222","Type":"IssuesEvent","CreatedAt":"2018-02-21T02:28:03","Actor":"KathleenDollard","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/57","RelatedDescription":"Opened issue \"Manually Uninstall .NET Core SDK 2.2.0-Preview Nightly Builds\" (#57) at dotnet/announcements","RelatedBody":"# Manually Uninstall .NET Core SDK 2.2.0-Preview Nightly Builds\r\n\r\n[A change in the version number strategy for .NET Core SDK](https://github.com/dotnet/designs/pull/29) resulted in some nightly builds having a higher version number. This higher version number will block the installation of the correct .NET Core SDK.\r\n\r\nIf you have installed nightly builds of the .NET Core SDK that start with version number that begin with `2.2.0-preview1`, you must manually uninstall these preview builds before later versions of the SDK with version numbers like 2.1.xxx will be available. This may have occurred by installing nightly builds of the .NET Core SDK or nightly builds of Visual Studio 15.5 Preview. \r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n[dotnet/cli #8652](https://github.com/dotnet/cli/issues/8652)\r\n\r\n## Details\r\n\r\n[We changed the version number strategy for .NET Core SDK](https://github.com/dotnet/designs/pull/29) as development was ongoing. Because of this, version numbers on the old scheme appeared in nightly builds. Unfortunately, these numbers are higher than the version numbers in the new scheme. All of the newer SDKs for .NET Core 2.1 will be ignored due to this higher version number; this includes newer nightly builds, public previews and eventual releases.\r\n\r\nThese older version numbers are similar to the following, with the last several different values in the last six digits:\r\n\r\n```\r\n2.2.0-preview1-008000\r\n```\r\n\r\nSince the newer versions are in the form:\r\n\r\n```\r\n2.1.300-preview1-008000\r\n```\r\n\r\n## Call to Action\r\n\r\nIf you have installed nightly builds. Please uninstall any .NET SDK versions that start with 2.2.0-preview1."},{"Id":"7253280422","Type":"IssuesEvent","CreatedAt":"2018-02-16T04:14:06","Actor":"terrajobst","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/56","RelatedDescription":"Closed issue \"Can you help with this issue?\" (#56) at dotnet/announcements","RelatedBody":"https://stackoverflow.com/questions/48819198/weird-behavior-of-httpclienthandler-sslprotocol-property-in-net-framework-4-7-1\r\n"},{"Id":"7253090788","Type":"IssuesEvent","CreatedAt":"2018-02-16T02:41:24","Actor":"rudeGit","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/56","RelatedDescription":"Opened issue \"Can you help with this issue?\" (#56) at dotnet/announcements","RelatedBody":"https://stackoverflow.com/questions/48819198/weird-behavior-of-httpclienthandler-sslprotocol-property-in-net-framework-4-7-1\r\n"},{"Id":"7227221771","Type":"IssuesEvent","CreatedAt":"2018-02-10T18:30:42","Actor":"kasper3","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/55","RelatedDescription":"Closed issue \"Needs clarity on open / close source nature of product being announced\" (#55) at dotnet/announcements","RelatedBody":"On first page of this repository, it reads:\r\n\r\n> Subscribe to this repo to be notified of Announcements and changes in .NET Core.\r\n\r\nDoes that mean all announcements are related to .NET Core and all products being announced are are open sourced?\r\n\r\nIf there are announcements about the propitiatory or closed-source products, the products whose sources <b>in full*</b> are not accessible by public, should be marked as such either using a label (https://github.com/dotnet/announcements/labels), or clearly stated in text.\r\n\r\n#### * Source code including the build script that generates the package end user downloads from nuget or myget feeds\r\n\r\nOne example is https://github.com/dotnet/announcements/issues/30, where it is presented to user as if the product ILLink is in open, but the package https://dotnet.myget.org/feed/dotnet-core/package/nuget/Illink.Tasks is produced by script which are nowhere to b found in open. Read more at https://github.com/dotnet/core/issues/915#issuecomment-364645429"},{"Id":"7226630380","Type":"IssuesEvent","CreatedAt":"2018-02-10T11:59:43","Actor":"kasper3","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/55","RelatedDescription":"Opened issue \"Needs clarity on open / close source nature of product being announced\" (#55) at dotnet/announcements","RelatedBody":"On first page of this repository, it reads:\r\n\r\n> Subscribe to this repo to be notified of Announcements and changes in .NET Core.\r\n\r\nDoes that mean all announcements are related to .NET Core and all products being announced are are open sourced?\r\n\r\nIf there are announcements about the propitiatory or closed-source products, the products whose sources <b>in full*</b> are not accessible by public, should be marked as such either using a label (https://github.com/dotnet/announcements/labels), or clearly stated in text.\r\n\r\n#### * Source code including the build script that generates the package end user downloads from nuget or myget feeds\r\n\r\nOne example is https://github.com/dotnet/announcements/issues/30, where it is presented to user as if the product ILLink is in open, but the package https://dotnet.myget.org/feed/dotnet-core/package/nuget/Illink.Tasks is produced by script which are nowhere to b found in open. Read more at https://github.com/dotnet/core/issues/915#issuecomment-364645429"}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"7359279687","Type":"IssuesEvent","CreatedAt":"2018-03-10T04:19:01","Actor":"tannergooding","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/16848","RelatedDescription":"Closed issue \"SSE42 Crc32 has benn broken by PR #16808\" (#16848) at dotnet/coreclr","RelatedBody":"Just started to hit the following test error after rebasing my work:\r\n\r\n```\r\n1>e:\\src\\ms\\dotnet\\coreclr-sse2\\bin\\tests\\Windows_NT.x64.Checked\\TestWrappers\\JIT.HardwareIntrinsics\\JIT.HardwareIntrinsics.XUnitWrapper.cs(18727): error : JIT_HardwareIntrinsics._X86_Sse42_Crc32_ro_Crc32_ro_._X86_Sse42_Crc32_ro_Crc32_ro_cmd [FAIL] [e:\\src\\ms\\dotnet\\coreclr-sse2\\tests\\runtest.proj]\r\n               \r\n         \r\n         Return code:      1\r\n         Raw output file:      e:\\src\\ms\\dotnet\\coreclr-sse2\\bin\\tests\\Windows_NT.x64.Checked\\Reports\\JIT.HardwareIntrinsics\\X86\\Sse42\\Crc32_ro\\Crc32_ro.output.txt\r\n         Raw output:\r\n         BEGIN EXECUTION\r\n                \"e:\\src\\ms\\dotnet\\coreclr-sse2\\tests\\..\\bin\\tests\\Windows_NT.x64.Checked\\Tests\\Core_Root\\corerun.exe\" Crc32_ro.exe \r\n               1: Inputs: 0x       0, 0x       1 Expected: 0x13a29877 actual: 0x       0 - Reflection\r\n               2: Inputs: 0x       1, 0x       0 Expected: 0x13a29877 actual: 0x       0 - Reflection\r\n               4: Inputs: 0x       0, 0x    ffff Expected: 0x e9e77d2 actual: 0x       0 - Reflection\r\n               5: Inputs: 0xffffffff, 0x       0 Expected: 0x e9e882d actual: 0x    ffff - Reflection\r\n               7: Inputs: 0x       1, 0x    ffff Expected: 0x1d3cefa5 actual: 0x       0 - Reflection\r\n               8: Inputs: 0xffffffff, 0x       1 Expected: 0x1d3c105a actual: 0x    ffff - Reflection\r\n               9: Inputs: 0xfffe1f0d, 0x    ddb3 Expected: 0x6de0d33d actual: 0x    fffe - Reflection\r\n               10: Inputs: 0x       5, 0x    3cff Expected: 0x836b5b49 actual: 0x       0 - Reflection\r\n               11: Inputs: 0x     463, 0x     d0d Expected: 0x cf56c40 actual: 0x       0 - Reflection\r\n               12: Inputs: 0x   f423f, 0x    e0f3 Expected: 0x943a5bc7 actual: 0x       f - Reflection\r\n               1: Inputs: 0x       0, 0x       1 Expected: 0xf26b8303 actual: 0x       0\r\n               2: Inputs: 0x       1, 0x       0 Expected: 0xf26b8303 actual: 0x       0\r\n               4: Inputs: 0x       0, 0x      ff Expected: 0xad7d5351 actual: 0x       0\r\n               5: Inputs: 0xffffffff, 0x       0 Expected: 0xad82acae actual: 0x  ffffff\r\n               7: Inputs: 0x       1, 0x      ff Expected: 0x5f16d052 actual: 0x       0\r\n               8: Inputs: 0xffffffff, 0x       1 Expected: 0x5fe92fad actual: 0x  ffffff\r\n               9: Inputs: 0xfffe1f0d, 0x      b3 Expected: 0x1e9233f1 actual: 0x  fffe1f\r\n               10: Inputs: 0x       5, 0x      ff Expected: 0x988c474d actual: 0x       0\r\n               11: Inputs: 0x     463, 0x       d Expected: 0xcdbe2c41 actual: 0x       4\r\n               12: Inputs: 0x   f423f, 0x      f3 Expected: 0x8ecee656 actual: 0x     f42\r\n               Expected: 100\r\n               Actual: 0\r\n               END EXECUTION - FAILED\r\n               FAILED\r\n               Test Harness Exitcode is : 1\r\n               \r\n         To run the test:\r\n         > set CORE_ROOT=e:\\src\\ms\\dotnet\\coreclr-sse2\\bin\\tests\\Windows_NT.x64.Checked\\Tests\\Core_Root\r\n         > e:\\src\\ms\\dotnet\\coreclr-sse2\\bin\\tests\\Windows_NT.x64.Checked\\JIT\\HardwareIntrinsics\\X86\\Sse42\\Crc32_ro\\Crc32_ro.cmd\r\n         \r\n               Expected: True\r\n               Actual:   False\r\n               Stack Trace:\r\n                 e:\\src\\ms\\dotnet\\coreclr-sse2\\bin\\tests\\Windows_NT.x64.Checked\\TestWrappers\\JIT.HardwareIntrinsics\\JIT.HardwareIntrinsics.XUnitWrapper.cs(18727,0): at JIT_HardwareIntrinsics._X86_Sse42_Crc32_ro_Crc32_ro_._X86_Sse42_Crc32_ro_Crc32_ro_cmd()\r\n\r\n```\r\n\r\nAfter running local git bisect I have found that \r\nlast good is: commit  5e03df42d9fb2fe05a4246695128ddfb6e9ca7fd\r\nfirst bad is:   commit 530949b14c795988dd81bae603ca33a87d6ee5fd\r\n\r\nFYI @tannergooding @fiigii \r\n\r\n"},{"Id":"7359120882","Type":"PullRequestEvent","CreatedAt":"2018-03-10T02:18:24","Actor":"janvorli","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/16707","RelatedDescription":"Merged pull request \"Add linux-arm64 to official builds\" (#16707) at dotnet/coreclr","RelatedBody":"Fixes #13212\r\n\r\n@jashook @janvorli Needs new docker tag... "},{"Id":"7359120876","Type":"IssuesEvent","CreatedAt":"2018-03-10T02:18:24","Actor":"janvorli","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/13212","RelatedDescription":"Closed issue \"Add linux-arm64 to official builds\" (#13212) at dotnet/coreclr","RelatedBody":"This is needed for validation now that we support the linux-arm64 RID."},{"Id":"7359079214","Type":"PullRequestEvent","CreatedAt":"2018-03-10T01:51:58","Actor":"CarolEidt","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/16877","RelatedDescription":"Opened pull request \"Fix LSRA enregisterLocalVars\" (#16877) at dotnet/coreclr","RelatedBody":"We don't bother with the parts of LSRA that deal with lclVars if we have no tracked lclVars. However, we need to check that *after* liveness has run post-Lowering - otherwise we miss any lclVars created by optimizations or during Lowering.\r\n\r\nFix #16578"}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"7358792398","Type":"PullRequestEvent","CreatedAt":"2018-03-09T23:41:45","Actor":"mlorbetske","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/8763","RelatedDescription":"Opened pull request \"Update template engine to 1.0.1-beta3-20180309-1459566\" (#8763) at dotnet/cli","RelatedBody":"Catch up template engine to one more recent than the 2.1.0-preview1 build"},{"Id":"7358543527","Type":"IssuesEvent","CreatedAt":"2018-03-09T22:23:34","Actor":"wli3","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/8762","RelatedDescription":"Opened issue \"Better error message to guide user when there is only preview version in the feed\" (#8762) at dotnet/cli","RelatedBody":"It is hard for user to take the right action -- \r\n`dotnet install tool -g t-rex --version 1.0.0-preview1-002`\r\n\r\nCurrent experience:\r\n![image](https://user-images.githubusercontent.com/6993335/37232747-265a2520-23a5-11e8-9f24-d4217bbc9a49.png)\r\n\r\n"},{"Id":"7358417739","Type":"PullRequestEvent","CreatedAt":"2018-03-09T21:51:51","Actor":"johnbeisner","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/8756","RelatedDescription":"Merged pull request \"Merge release/2.1.3xx to master\" (#8756) at dotnet/cli","RelatedBody":"\nThis is an automatically generated pull request from release/2.1.3xx into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1.3xx-to-master\ngit reset --hard upstream/master\ngit merge upstream/release/2.1.3xx\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.1.3xx-to-master --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"7358148385","Type":"PullRequestEvent","CreatedAt":"2018-03-09T20:47:29","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/8759","RelatedDescription":"Merged pull request \"Update to aspnetcore 2.1.0-preview2-30281\" (#8759) at dotnet/cli","RelatedBody":"Update to the latest daily build of aspnetcore"},{"Id":"7358146357","Type":"IssuesEvent","CreatedAt":"2018-03-09T20:46:59","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/3676","RelatedDescription":"Closed issue \"dotnet restore fails on Fedora 23 with nss-3.24.0-1.3.fc23.x86_64\" (#3676) at dotnet/cli","RelatedBody":"## Steps to reproduce\n1. Ensure (via `rpm -q nss`) that you have `nss-3.24.0-1.3.fc23.x86_64` installed.  If not, `dnf update nss`.\n2. Install CLI\n3. git clone https://www.github.com/dotnet/jitutils\n4. cd jituitls\n5. dotnet restore\n## Expected  behavior\n\nRestore completes.\n## Actual behavior\n\nRestore does not complete, and detailed output shows connection and SSL errors.\n## Environment data\n\n`dotnet --info` output:\n\n```\n[matell@localhost jitutils]$ dotnet --info\n.NET Command Line Tools (1.0.0-preview2-003121)\n\nProduct Information:\n Version:            1.0.0-preview2-003121\n Commit SHA-1 hash:  1e9d529bc5\n\nRuntime Environment:\n OS Name:     fedora\n OS Version:  23\n OS Platform: Linux\n RID:         fedora.23-x64\n```\n"},{"Id":"7357877633","Type":"PullRequestEvent","CreatedAt":"2018-03-09T19:43:54","Actor":"dotnet-bot","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/8761","RelatedDescription":"Opened pull request \"Update CoreSetup, CoreSetup, CoreSetup to preview2-26309-02, preview2-26309-02, preview2-26309-02, respectively (master)\" (#8761) at dotnet/cli","RelatedBody":"/cc @dotnet/dotnet-cli"}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"7359014110","Type":"PullRequestEvent","CreatedAt":"2018-03-10T01:15:12","Actor":"akoeplinger","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/672","RelatedDescription":"Opened pull request \"Update Xamarin platform APIs to latest Dev 15.7\" (#672) at dotnet/standard","RelatedBody":"Fixes https://github.com/mono/mono/issues/7496"},{"Id":"7358857084","Type":"PullRequestEvent","CreatedAt":"2018-03-10T00:06:28","Actor":"ericstj","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/671","RelatedDescription":"Opened pull request \"Trimming fixes\" (#671) at dotnet/standard","RelatedBody":"Fixes #670, #667, #626 \r\n\r\nThis honors MSBuild's related files (eg: .pdb) that are added to ReferenceCopyLocalPaths.  I added a switch to turn off this behavior if it is undesired.\r\n\r\nI've also fixed the package-graph issues by bringing back the assets file reading that I previously removed in a723e6ca6c49d6947803d2952517e46f1465c0ce, but as a fallback.\r\n\r\n/cc @jnm2 @weshaggard "},{"Id":"7356295921","Type":"IssuesEvent","CreatedAt":"2018-03-09T14:26:39","Actor":"jnm2","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/670","RelatedDescription":"Opened issue \"Trimming is not preserving non-assembly ReferenceCopyLocalPaths\" (#670) at dotnet/standard","RelatedBody":"Our trimmer only removed ReferenceCopyLocalPaths that had OriginalItemSpecs of removed assemblies, but your trimmer removes all non-assembly `ReferenceCopyLocalPaths`. Namely, 50 PDBs from NuGet packages. We want those PDBs in build output for two reasons: stepping into embedded or linked source while debugging, and snapshotting them easily with each CI build for use in future debugging.\r\n\r\nIs there a workaround I could apply? It [looks](https://github.com/dotnet/standard/blob/master/Microsoft.Packaging.Tools.Trimming/tasks/TrimFiles.cs#L99) like the MSBuild task is missing the facility to keep related reference items together.\r\n\r\n/cc @ericstj "},{"Id":"7350255559","Type":"IssuesEvent","CreatedAt":"2018-03-08T13:46:54","Actor":"nyctef","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/669","RelatedDescription":"Opened issue \"FileNotFoundException for Microsoft.SqlServer.Types 10.0.0.0 when trying to use SQL Server geography data\" (#669) at dotnet/standard","RelatedBody":"Hopefully this is the right place to post this-\r\n\r\nWe've been hitting an issue using [System.Data.SqlClient](https://www.nuget.org/packages/System.Data.SqlClient/) through a netstandard2.0 project where Microsoft.SqlServer.Types 10.0.0.0 will fail to load when trying to fetch geography data from SQL Server. I think we can work around this problem by [getting the dll from nuget](https://www.nuget.org/packages/Microsoft.SqlServer.Types/), but since the nuget package only has a `net40` version, this means the project we're installing the nuget package into can't be `netstandard2.0` any more.\r\n\r\nI've created an example repo here: https://github.com/nyctef/geography-repro to try and demonstrate the problem - it should crash on machines were Microsoft.SqlServer.Types 10.0.0.0 isn't in the GAC already."}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"7359359309","Type":"IssuesEvent","CreatedAt":"2018-03-10T05:25:46","Actor":"danmosemsft","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/27909","RelatedDescription":"Closed issue \"Add gdb and lldb to test machine dockerfiles and enable dump collection\" (#27909) at dotnet/corefx","RelatedBody":"We want to run gdb and lldb on dumps created by tests. The experiments in https://github.com/dotnet/corefx/pull/27899#issuecomment-371901222 show that on some machiens (eg Fedora, OpenSuse) apparently dumps are not enabled. On others (eg some Ubuntu and Debian) dumps are enabled but gdb is not present. We also want lldb so we can do more operations on the dumps.\r\n\r\nSo we need to add install of gdb and lldb to all dockerfiles, and enable dumps with ulimit on all of them."},{"Id":"7359330713","Type":"PullRequestEvent","CreatedAt":"2018-03-10T05:01:57","Actor":"jswolf19","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/27930","RelatedDescription":"Opened pull request \"ParallelEnumerable.GroupJoin/Join output ordering (fixes #1155)\" (#27930) at dotnet/corefx","RelatedBody":"The current implementations of ParallelEnumerable.GroupJoin and Join do not preserve the order of right(inner) elements.\r\n\r\nThe common implementation, `HashJoinQueryOperatorEnumerator` currently implements a `QueryOperatorEnumerator` with an order key of the same type as the left(outer) query, thus Join operations are unable to take into account the order of the right elements in their output. It also completely ignores the right order key when building a `HashLookup` of the right elements, so order is not preserved for GroupJoins.\r\n\r\nThe proposed changes attempt to leave the cases where the right query is unordered with a relatively similar performance profile while adding ordering (when appropriate) in the cases where the right query is ordered.\r\n\r\nJoin with an unordered left and ordered right results in unordered output and right ordering is completely ignored.\r\nJoin with an ordered left and ordered right results in ordered output ordered first by left order key then by right order key. If collisions exist in the ordering of left elements, then the output will likely not be intuitive, as results with the same left element are not guaranteed (and in fact will probably not be) grouped together. (tests **not** added to confirm the ordering of elements with left collisions...)\r\n\r\nGroupJoin with an unordered left and ordered right also still produce unordered output. However, the enumerables of right elements are ordered.\r\nGroupJoin with an ordered left and ordered right will produce results ordered first by the left element order key, then by the least right element order key. An empty grouping of right elements is treated as less than any non-empty grouping. (tests added to confirm the ordering of elements with left collisions)\r\n"},{"Id":"7359260216","Type":"PullRequestEvent","CreatedAt":"2018-03-10T04:01:57","Actor":"JeremyKuhne","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/27923","RelatedDescription":"Merged pull request \"Test changes for System.IO.FileSystem\" (#27923) at dotnet/corefx","RelatedBody":"- Add new tests for more coverage on enumeration\r\n- Re-enable tests\r\n\r\ncc: @Anipik, @danmosemsft, @pjanotti "},{"Id":"7359239956","Type":"PullRequestEvent","CreatedAt":"2018-03-10T03:45:09","Actor":"jkotas","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/27928","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#27928) at dotnet/corefx","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7359146352","Type":"PullRequestEvent","CreatedAt":"2018-03-10T02:35:56","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/27918","RelatedDescription":"Merged pull request \"Avoid delegate invocation in AwaitableSocketAsyncEventArgs\" (#27918) at dotnet/corefx","RelatedBody":"SocketAsyncEventArgs's OnCompleted is virtual (who knew).  While it'd be nice to avoid that virtual dispatch, in AwaitableSocketAsyncEventArgs as long as we're incurring it we can easily invoke the delegate dispatch we're also currently incurring due to hooking up a callback to the Completed event: since we're deriving from SocketAsyncEventArgs, we can just override OnCompleted and put our logic there, rather than having the base implementation invoke a delegate.\r\n\r\ncc: @geoffkizer, @davidsh\r\n\r\n(This will conflict with my change in https://github.com/dotnet/corefx/pull/27916; I'll let that one go through and then fix up the merge conflicts, which will mainly be around the AwaitableSocketAsyncEventArgs ctor.)"},{"Id":"7359105251","Type":"IssuesEvent","CreatedAt":"2018-03-10T02:08:09","Actor":"sywhang","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/27929","RelatedDescription":"Opened issue \"Add test for Environment.FailFast()\" (#27929) at dotnet/corefx","RelatedBody":"https://github.com/dotnet/coreclr/pull/16622 added logging for exception passed to ```Environment.FailFast```. This should be test-protected, as per comments in https://github.com/dotnet/coreclr/issues/15203."},{"Id":"7359089914","Type":"PullRequestEvent","CreatedAt":"2018-03-10T01:58:35","Actor":"dotnet-bot","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/27928","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#27928) at dotnet/corefx","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7359085738","Type":"IssuesEvent","CreatedAt":"2018-03-10T01:56:02","Actor":"ygc369","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/22813","RelatedDescription":"Closed issue \"Please provide a weak reference version of ArrayPool\" (#22813) at dotnet/corefx","RelatedBody":"This kind of WeakArrayPool should only hold the weak reference of every array, so the arrays in the pool could be collected by GC, and could be reused before GC. It would be a self-balanced array cache mechanism."},{"Id":"7359079924","Type":"PullRequestEvent","CreatedAt":"2018-03-10T01:52:27","Actor":"dotnet-maestro-bot","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/27927","RelatedDescription":"Opened pull request \"Update CoreClr to preview2-26310-01 (master)\" (#27927) at dotnet/corefx","RelatedBody":""}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"7359200325","Type":"PullRequestEvent","CreatedAt":"2018-03-10T03:14:50","Actor":"VSadov","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/25397","RelatedDescription":"Opened pull request \"[WIP] constraints fixups\" (#25397) at dotnet/roslyn","RelatedBody":"<details><summary>Ask Mode template not completed</summary>\r\n\r\n<!-- This template is not always required. If you aren't sure about whether it's needed or want help filling out the sections,\r\nsubmit the pull request and then ask us for help. :) -->\r\n\r\n### Customer scenario\r\n\r\nWhat does the customer do to get into this situation, and why do we think this\r\nis common enough to address for this release.  (Granted, sometimes this will be\r\nobvious \"Open project, VS crashes\" but in general, I need to understand how\r\ncommon a scenario is)\r\n\r\n### Bugs this fixes\r\n\r\n(either VSO or GitHub links)\r\n\r\n### Workarounds, if any\r\n\r\nAlso, why we think they are insufficient for RC vs. RC2, RC3, or RTW\r\n\r\n### Risk\r\n\r\nThis is generally a measure our how central the affected code is to adjacent\r\nscenarios and thus how likely your fix is to destabilize a broader area of code\r\n\r\n### Performance impact\r\n\r\n(with a brief justification for that assessment (e.g. \"Low perf impact because no extra allocations/no complexity changes\" vs. \"Low\")\r\n\r\n### Is this a regression from a previous update?\r\n\r\n### Root cause analysis\r\n\r\nHow did we miss it?  What tests are we adding to guard against it in the future?\r\n\r\n### How was the bug found?\r\n\r\n(E.g. customer reported it vs. ad hoc testing)\r\n\r\n### Test documentation updated?\r\n\r\nIf this is a new non-compiler feature or a significant improvement to an existing feature, update https://github.com/dotnet/roslyn/wiki/Manual-Testing once you know which release it is targeting.\r\n\r\n</details>\r\n"},{"Id":"7359121402","Type":"PullRequestEvent","CreatedAt":"2018-03-10T02:18:45","Actor":"jcouv","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/25396","RelatedDescription":"Opened pull request \"Track and check names in tuple equality\" (#25396) at dotnet/roslyn","RelatedBody":"The two commits can be reviewed in order and separately. \r\nThe first one starts propagating tuple element names into the converted types. So the converted type on the right of `(1L, 2L) == (a: 1, b: 2)` is `(long a, long b)`.\r\nThe second one compares the names and reports if some names in tuple literals mismatch (ie. one side has an explicit element name, but the other side has no name or a different name). "},{"Id":"7358935756","Type":"PullRequestEvent","CreatedAt":"2018-03-10T00:38:48","Actor":"Neme12","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/25394","RelatedDescription":"Opened pull request \"Fixing NullReferenceException inside GenerateTypeCodeFixProvider when System.Action is missing\" (#25394) at dotnet/roslyn","RelatedBody":"fixes #22293"}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"7359237870","Type":"PullRequestEvent","CreatedAt":"2018-03-10T03:43:29","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5527","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#5527) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7359083309","Type":"PullRequestEvent","CreatedAt":"2018-03-10T01:54:33","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5527","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#5527) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7358862091","Type":"PullRequestEvent","CreatedAt":"2018-03-10T00:08:40","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5526","RelatedDescription":"Merged pull request \"Merge changes from TFS\" (#5526) at dotnet/corert","RelatedBody":"When merging, this PR, please ensure a merge commit is created as automation requires the merge commit.  Do not 'Squash and merge' or 'Rebase and merge'!"},{"Id":"7358838837","Type":"PullRequestEvent","CreatedAt":"2018-03-09T23:59:24","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5526","RelatedDescription":"Opened pull request \"Merge changes from TFS\" (#5526) at dotnet/corert","RelatedBody":"When merging, this PR, please ensure a merge commit is created as automation requires the merge commit.  Do not 'Squash and merge' or 'Rebase and merge'!"},{"Id":"7358332918","Type":"PullRequestEvent","CreatedAt":"2018-03-09T21:31:21","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5525","RelatedDescription":"Merged pull request \"Merge changes from TFS\" (#5525) at dotnet/corert","RelatedBody":"When merging, this PR, please ensure a merge commit is created as automation requires the merge commit.  Do not 'Squash and merge' or 'Rebase and merge'!"},{"Id":"7358228740","Type":"PullRequestEvent","CreatedAt":"2018-03-09T21:06:41","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5525","RelatedDescription":"Opened pull request \"Merge changes from TFS\" (#5525) at dotnet/corert","RelatedBody":"When merging, this PR, please ensure a merge commit is created as automation requires the merge commit.  Do not 'Squash and merge' or 'Rebase and merge'!"},{"Id":"7356755491","Type":"IssuesEvent","CreatedAt":"2018-03-09T15:51:59","Actor":"bderuijsscher","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/issues/5524","RelatedDescription":"Opened issue \"[UWP] .net native compiled project won't run (Entry Point Not Found error)\" (#5524) at dotnet/corert","RelatedBody":"When targetting .net standard 2.0 for a windows uwp application (Windows IoT core, ARM targetting Windows 10 build 16299). The project compiles normally however when run on a target devices generates the error \"Entry Point Not Found\".\r\n\r\nPlease refer to the discussion on the MSDN forum [here](https://social.msdn.microsoft.com/Forums/en-US/e202edb0-dcb5-405e-bee7-5ddf4faca77b/uwp-cannot-build-app-with-net-native-enabled-in-release-mode?forum=wpdevelop)\r\n\r\nWhen the same project is compiled in debug modus (and thus without .net native toolchain), the application runs normally on the target device.\r\n\r\nIt is difficult to determine in more detail what the exact cause is of this error."},{"Id":"7356468866","Type":"IssuesEvent","CreatedAt":"2018-03-09T14:59:10","Actor":"skyne98","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/issues/5523","RelatedDescription":"Opened issue \"[Question] Platform dependencies\" (#5523) at dotnet/corert","RelatedBody":"Hey there, fellows!\nFirst of all, I will describe the scenario. Let's take Rust into consideration. It's a systems programming language, so it has a standard library, that doesn't depend on platform it's running on, which allows it to be used as an OS building language, running without infrastructure.\n\nWith projects such as CoreRT and CosmOS being developed in parallel, I started to wonder: maybe there is another way to solve this problem? Maybe we can use CoreRT to write platform independent code, so it will be able to run on any foundation, will it be RedoxOS, Fuchsia, or straight up bootstrapped and run by assembly.\n\nSo, is it possible to do now? What are the dependencies of CoreRT and can I write such code by just avoiding some parts of standard libraries, such as threads and networking? Also, as C# has a possibility to work straight up with memory, it may be very capable.\n\nThanks!"}],"ResultType":"GitHubEvent"},"SDK":{"Events":[{"Id":"7358848460","Type":"IssuesEvent","CreatedAt":"2018-03-10T00:02:59","Actor":"jaredpar","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/issues/2035","RelatedDescription":"Opened issue \"S.R.TypeExtensions not deployed for net461 application\" (#2035) at dotnet/sdk","RelatedBody":"Have a situation where System.Reflection.TypeExtensions is not being deployed. Here is the project setup that we have:\r\n\r\n- CSharpCompilerTestUtilites: targets netstandard1.3 and uses System.Reflection.TypeExtensions\r\n- CSharpCompilerEmitTests: targets net461 + netcoreapp2.0, references CSharpCompilerTestUtilities\r\n\r\nThe net461 output of CSharpCompilerEmitTests does not contain System.Reflection.TypeExtensions. That is necessary to run and hence some of our unit tests fail. \r\n\r\nTo repro:\r\n\r\n- Clone https://github.com/jaredpar/roslyn\r\n- Switch to branch repro/deploy-type-extensions\r\n- `powershell build/scripts/build.ps1 -build -restore` \r\n- Check the contents of `Binaries\\Debug\\UnitTests\\CSharpCompilerEmitTests\\net461` \r\n\r\nNote: In our build `DisableImplicitFrameworkReferences` is `false` by default and we have a tendancy to use explicit package references (hold over from the project.json days). It's possible this is contributing here but I'm unable to track this down. \r\n\r\n"},{"Id":"7358645501","Type":"IssuesEvent","CreatedAt":"2018-03-09T22:52:10","Actor":"nguerrera","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/issues/2034","RelatedDescription":"Opened issue \"Move import of bundled versions earlier\" (#2034) at dotnet/sdk","RelatedBody":"Currently they're imported here: \r\nhttps://github.com/dotnet/sdk/blob/6945e3694c918eea4c8c4fb6217e1485b179994b/src/Tasks/Microsoft.NET.Build.Tasks/targets/Microsoft.NET.Sdk.DefaultItems.props#L18\r\n\r\nBut that would be after common props, and importantly after package reference props and Directory.Build.props. \r\n\r\nWe should move it here for the same reason as noted for UsingMicrosoftNETSdk:\r\nhttps://github.com/dotnet/sdk/blob/6945e3694c918eea4c8c4fb6217e1485b179994b/src/Tasks/Microsoft.NET.Build.Tasks/sdk/Sdk.props#L17-L26\r\n\r\nThe reason is that we now have the NETCoreSdkVersion set in these props and we want that to be consumable everywhere like UsingMicrosoftNETSdk.\r\n"},{"Id":"7358441976","Type":"PullRequestEvent","CreatedAt":"2018-03-09T21:57:43","Actor":"johnbeisner","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/pull/2031","RelatedDescription":"Closed pull request \"Merge release/2.1.2xx to release/2.1.3xx\" (#2031) at dotnet/sdk","RelatedBody":"\nThis is an automatically generated pull request from release/2.1.2xx into release/2.1.3xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1.2xx-to-release/2.1.3xx\ngit reset --hard upstream/release/2.1.3xx\ngit merge upstream/release/2.1.2xx\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.1.2xx-to-release/2.1.3xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"7358437808","Type":"PullRequestEvent","CreatedAt":"2018-03-09T21:56:42","Actor":"johnbeisner","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/2030","RelatedDescription":"Merged pull request \"Merge release/2.1.1xx to release/2.1.2xx\" (#2030) at dotnet/sdk","RelatedBody":"\nThis is an automatically generated pull request from release/2.1.1xx into release/2.1.2xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1.1xx-to-release/2.1.2xx\ngit reset --hard upstream/release/2.1.2xx\ngit merge upstream/release/2.1.1xx\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.1.1xx-to-release/2.1.2xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"7358142047","Type":"IssuesEvent","CreatedAt":"2018-03-09T20:45:55","Actor":"natemcmaster","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/issues/2033","RelatedDescription":"Opened issue \"How to disable \"preview version\" warning message?\" (#2033) at dotnet/sdk","RelatedBody":"Currently, the SDK issues this high importance message when I build\r\n\r\n> You are working with a preview version of the .NET Core SDK. You can define the SDK version via a global.json file in the current project. \r\n\r\nI already have a global.json version and I explicitly set it a preview version, so the warning seems unnecessary. How can I disable this message altogether?"},{"Id":"7358131756","Type":"IssuesEvent","CreatedAt":"2018-03-09T20:43:21","Actor":"natemcmaster","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/issues/2032","RelatedDescription":"Closed issue \"Build issues hundreds of spam messages about \"You are working with a preview version of the .NET Core SDK.\"\" (#2032) at dotnet/sdk","RelatedBody":"**Repro**\r\n\r\nclone https://github.com/aspnet/Mvc\r\nInstall latest CLI (2.1.300-preview2-008322)\r\ndotnet build Mvc.sln\r\n\r\n**Result**\r\n\r\n🤢 \r\n\r\n![image](https://user-images.githubusercontent.com/2696087/37227919-a72d42a2-2393-11e8-8bf0-e83799995ab9.png)\r\n\r\n\r\n@livarcocc @nguerrera "},{"Id":"7358024282","Type":"IssuesEvent","CreatedAt":"2018-03-09T20:17:27","Actor":"natemcmaster","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/issues/2032","RelatedDescription":"Opened issue \"Build issues hundreds of spam messages about \"You are working with a preview version of the .NET Core SDK.\"\" (#2032) at dotnet/sdk","RelatedBody":"**Repro**\r\n\r\nclone https://github.com/aspnet/Mvc\r\nInstall latest CLI (2.1.300-preview2-008322)\r\n\r\n**Result**\r\n\r\n🤢 \r\n\r\n![image](https://user-images.githubusercontent.com/2696087/37227919-a72d42a2-2393-11e8-8bf0-e83799995ab9.png)\r\n\r\n\r\n@livarcocc @nguerrera "}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"971915245378715648","CreatedAt":"2018-03-09T01:07:06+00:00","UserScreenname":"dotnet","Text":".NET Framework 4.7.2 Developer Pack Early Access build 3056 is available! https://t.co/OjVLK9nv9f","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":34,"FavoriteCount":24,"RawContent":null}]}},"RunOn":"2018-03-10T05:30:19.100518Z","RunDurationInMilliseconds":7647}