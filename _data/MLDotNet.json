{"Data":{"GitHub":{"Issues":[{"Id":"337701078","IsPullRequest":true,"CreatedAt":"2018-07-02T23:59:57","Actor":"shauheen","Number":"479","RawContent":null,"Title":"Cherrypick to update release for V0.3","State":"open","Body":"Cherrypick into release for v0.3","Url":"https://github.com/dotnet/machinelearning/pull/479","RelatedDescription":"Open PR \"Cherrypick to update release for V0.3\" (#479)"},{"Id":"337684413","IsPullRequest":true,"CreatedAt":"2018-07-02T23:50:34","Actor":"GalOshri","Number":"476","RawContent":null,"Title":"Add release notes for ML.NET 0.3","State":"closed","Body":"This adds release notes for ML.NET 0.3","Url":"https://github.com/dotnet/machinelearning/pull/476","RelatedDescription":"Closed or merged PR \"Add release notes for ML.NET 0.3\" (#476)"},{"Id":"337698392","IsPullRequest":true,"CreatedAt":"2018-07-02T23:43:16","Actor":"Ivanidzo4ka","Number":"478","RawContent":null,"Title":"Remove all spaces in the end of lines","State":"open","Body":"It's nice to not have spaces in the end of lines","Url":"https://github.com/dotnet/machinelearning/pull/478","RelatedDescription":"Open PR \"Remove all spaces in the end of lines\" (#478)"},{"Id":"337606890","IsPullRequest":true,"CreatedAt":"2018-07-02T23:38:18","Actor":"zeahmed","Number":"468","RawContent":null,"Title":"Added tests for new API where components(Loaders/Transforms/Learners) are directly instantiated.","State":"closed","Body":"This PR addressed #424. \r\n\r\nTwo scenario tests were added to show how to directly instantiate ML.NET components instead of using Pipeline API. The test may not look elegant at first instance but they will help us shape the new API.\r\n\r\nThis work is inline with new API proposal #371.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/468","RelatedDescription":"Closed or merged PR \"Added tests for new API where components(Loaders/Transforms/Learners) are directly instantiated.\" (#468)"},{"Id":"337143012","IsPullRequest":true,"CreatedAt":"2018-07-02T23:14:59","Actor":"sfilipi","Number":"455","RawContent":null,"Title":"Xml docs for trainers and a minor infrastructure changes","State":"closed","Body":"Addresses: #388 \r\n\r\nThis PR adds an EntryPointInfo attribute that will contain the XML documentation to append to the summary: \"Description\", \"References\", \"See also\" sections. \r\nIt also modifies the C# generation code to append the content of this new attribute to the summary. ","Url":"https://github.com/dotnet/machinelearning/pull/455","RelatedDescription":"Closed or merged PR \"Xml docs for trainers and a minor infrastructure changes\" (#455)"},{"Id":"337693132","IsPullRequest":false,"CreatedAt":"2018-07-02T23:12:21","Actor":"sfilipi","Number":"477","RawContent":null,"Title":"Additional documentation for the ML.Net types and components should live in xml docs","State":"open","Body":"Through PR #455 we introduced XML strings in the codebase, that flow to the generated CSharpApi, to better document the trainers of the Microsoft.ML.Trainers namespace. \r\n\r\nThe final destination for those XML strings should be xml files, in the 'docs' folder, parallel to the src folder. Those documents should be referenced in the CSharp api, and through the code by xml <includes> tags. ","Url":"https://github.com/dotnet/machinelearning/issues/477","RelatedDescription":"Open issue \"Additional documentation for the ML.Net types and components should live in xml docs\" (#477)"},{"Id":"337069244","IsPullRequest":false,"CreatedAt":"2018-07-02T22:59:30","Actor":"Ivanidzo4ka","Number":"453","RawContent":null,"Title":"OneVersusAll documentation should be more specific.","State":"closed","Body":"Currently it doesn't explain how trainer works and don't provide example how to use it.","Url":"https://github.com/dotnet/machinelearning/issues/453","RelatedDescription":"Closed issue \"OneVersusAll documentation should be more specific.\" (#453)"},{"Id":"337128266","IsPullRequest":true,"CreatedAt":"2018-07-02T22:16:38","Actor":"codemzs","Number":"454","RawContent":null,"Title":"Set culture to culture invariant in LightGBM","State":"closed","Body":"fixes #440 \r\n","Url":"https://github.com/dotnet/machinelearning/pull/454","RelatedDescription":"Closed or merged PR \"Set culture to culture invariant in LightGBM\" (#454)"},{"Id":"337164295","IsPullRequest":false,"CreatedAt":"2018-07-02T21:23:00","Actor":"ganik","Number":"458","RawContent":null,"Title":"LightLda documentation should be more specific.","State":"closed","Body":"Currently it doesn't explain how trainer works and don't provide example how to use it","Url":"https://github.com/dotnet/machinelearning/issues/458","RelatedDescription":"Closed issue \"LightLda documentation should be more specific.\" (#458)"},{"Id":"337358659","IsPullRequest":true,"CreatedAt":"2018-07-02T21:21:07","Actor":"ganik","Number":"464","RawContent":null,"Title":"Light LDA doc ","State":"closed","Body":"issue #458","Url":"https://github.com/dotnet/machinelearning/pull/464","RelatedDescription":"Closed or merged PR \"Light LDA doc \" (#464)"},{"Id":"337662742","IsPullRequest":false,"CreatedAt":"2018-07-02T21:04:46","Actor":"JoshuaLight","Number":"475","RawContent":null,"Title":"`sentiment_data.tsv` and `sentiment_test.tsv` are missing in the solution.","State":"open","Body":"### Issue\r\n\r\n- **What did you do?**\r\nOpened the solution.\r\n\r\n- **What happened?**\r\nI've found that `test\\data` solution folder contains missing files: `sentiment_data.tsv` and `sentiment_test.tsv`.\r\nAs it looks in [Microsoft.ML.sln](https://github.com/dotnet/machinelearning/blob/master/Microsoft.ML.sln) it has:\r\n```\r\n// Starts at 37.\r\nProject(\"{2150E333-8FDC-42A3-9474-1A3956D46DE8}\") = \"data\", \"data\", \"{FDA2FD2C-A708-43AC-A941-4D941B0853BF}\"\r\n\tProjectSection(SolutionItems) = preProject\r\n\t>>\ttest\\data\\sentiment_data.tsv = test\\data\\sentiment_data.tsv\r\n\t>>\ttest\\data\\sentiment_test.tsv = test\\data\\sentiment_test.tsv\r\n\tEndProjectSection\r\nEndProject\r\n```\r\nWhile such data actually doesn't present in repository, as it looks [here](https://github.com/dotnet/machinelearning/tree/master/test/data).\r\n- **What did you expect?**\r\nI'd expect that there should be no missing files in solution.\r\n","Url":"https://github.com/dotnet/machinelearning/issues/475","RelatedDescription":"Open issue \"`sentiment_data.tsv` and `sentiment_test.tsv` are missing in the solution.\" (#475)"},{"Id":"337659926","IsPullRequest":false,"CreatedAt":"2018-07-02T20:55:59","Actor":"Andy-Wilkinson","Number":"474","RawContent":null,"Title":"Proposal for Fluent API","State":"open","Body":"In this issue I describe a proposal for a fluent API for the building of ML.NET learning pipelines. This API would be consistent with existing .NET patterns such as LINQ, allowing people new to ML.NET to pick it up easily. It would allow clear concise code for simple scenarios, whilst allowing easy extension for more complex situations.\r\n\r\n# Background\r\n\r\nThe `LearningPipeline` API used by the current preview releases of ML.NET has a number of limitations. Theprogramming model does not fit in with other .NET code (we do not write other code as a series of steps added to a list), and follows a linear pipeline without merging/branching (e.g. with data from multiple sources, or train/test splitting of data).\r\n\r\nThe recent proposal for a major API change by @TomFinley in issue #371 is a bit step forward towards a more natural programming model, with each step of the pipeline new-ed up in turn. I would argue however that this no longer reflects the true flow through a learning pipeline, with previous steps being relegated to a parameter of the constructor. This proposal builds on top of #371 with a fluent API.\r\n\r\n# Proposed API\r\n\r\nBy using extension functions (in a similar manner to LINQ) we can pass the previous step of a pipeline as the 'this' parameter into subsequent steps, preserving the natural flow. For example,\r\n\r\n```\r\nvar loader = new TextLoader(new MultiFileSource(dataPath),\r\n        useHeader: true, separator: ',',\r\n        cols: new[] { ... });\r\nvar transform = transform.AddConcatTransform(env, trans, \"CategoryFeatures\",\r\n        \"Bedrooms\", \"Bathrooms\", \"Floors\", \"Waterfront\", \"View\", \"Condition\", \"Grade\",\r\n        \"YearBuilt\", \"YearRenovated\", \"Zipcode\");\r\nvar transform = transform.AddCategoricalTransform(\"CategoryFeatures\");\r\n```\r\n\r\nThis could be further cleaned up to,\r\n\r\n```\r\nvar pipeline = new TextLoader(new MultiFileSource(dataPath),\r\n        useHeader: true, separator: ',',\r\n        cols: new[] { ... })\r\n    .AddConcatTransform(env, trans, \"CategoryFeatures\",\r\n        \"Bedrooms\", \"Bathrooms\", \"Floors\", \"Waterfront\", \"View\", \"Condition\", \"Grade\",\r\n        \"YearBuilt\", \"YearRenovated\", \"Zipcode\")\r\n    .AddCategoricalTransform(\"CategoryFeatures\");\r\n```\r\n\r\n## More complex examples,\r\n\r\nYou could easily write extension functions that combine multiple steps, but could be consumed in the same way. Something like the following (I've created a hypothetical `IDataPipeline` to represent any pipeline step that produces data),\r\n\r\n```\r\npublic IDataPipeline CreateCategories(this IDataPipeline input)\r\n{\r\n    return input.AddConcatTransform(env, trans, \"CategoryFeatures\",\r\n            \"Bedrooms\", \"Bathrooms\", \"Floors\", \"Waterfront\", \"View\", \"Condition\", \"Grade\",\r\n            \"YearBuilt\", \"YearRenovated\", \"Zipcode\")\r\n        .AddCategoricalTransform(\"CategoryFeatures\");\r\n}\r\n```\r\n\r\nYou could easily merge data from two pipelines,\r\n\r\n```\r\nvar input1 = new.TextLoader(...)\r\n        .DoSomeTransforms();\r\nvar input2 = new.TextLoader(...)\r\n        .DoSomeMoreTransforms();\r\n\r\nvar input = input1.ConcatenateRows(input2);\r\n```\r\n\r\nYou could take advantage of tuples to split the data pipeline, such that different steps could be applied before later merging,\r\n\r\n```\r\nvar (train, test) = input.AddTrainTestSplit(...);\r\n\r\ntrain.DoSomeTransforms();\r\ntest.DoSomeMoreTransforms();\r\n```\r\n\r\n# Summary\r\n\r\nThis is an outline proposal for an alternative API that could be used alongside, or instead of that proposed in issue #371. There are still some rough edges here and there, but I hope that this will start a discussion of the posibilites provided by a fluent API.","Url":"https://github.com/dotnet/machinelearning/issues/474","RelatedDescription":"Open issue \"Proposal for Fluent API\" (#474)"},{"Id":"336826321","IsPullRequest":true,"CreatedAt":"2018-07-02T20:51:33","Actor":"codemzs","Number":"452","RawContent":null,"Title":"Update documentation for LightGBM and add missing binary references to console app.","State":"closed","Body":"fixes #450 \r\nfixes #451 ","Url":"https://github.com/dotnet/machinelearning/pull/452","RelatedDescription":"Closed or merged PR \"Update documentation for LightGBM and add missing binary references to console app.\" (#452)"},{"Id":"336826111","IsPullRequest":false,"CreatedAt":"2018-07-02T20:51:33","Actor":"codemzs","Number":"451","RawContent":null,"Title":"Console dll is missing references to binaries of learners/transforms and native code.","State":"closed","Body":"Console dll allows ML.NET pipelines to be created and executed via command line. It is currently missing references to dlls of some learners, transforms and native code. ","Url":"https://github.com/dotnet/machinelearning/issues/451","RelatedDescription":"Closed issue \"Console dll is missing references to binaries of learners/transforms and native code.\" (#451)"},{"Id":"336825851","IsPullRequest":false,"CreatedAt":"2018-07-02T20:51:33","Actor":"codemzs","Number":"450","RawContent":null,"Title":"Update LightGBM API documentation.","State":"closed","Body":"LightGBM APIs require Micorosoft.ML.LightGBM nuget and this information needs to include in the documentation.","Url":"https://github.com/dotnet/machinelearning/issues/450","RelatedDescription":"Closed issue \"Update LightGBM API documentation.\" (#450)"},{"Id":"337648300","IsPullRequest":false,"CreatedAt":"2018-07-02T20:14:39","Actor":"adamshakhabov","Number":"473","RawContent":null,"Title":"Get cluster items","State":"open","Body":"_Sorry for my English :)_\r\n\r\nI am using sample [Clustering Iris Data](https://github.com/dotnet/machinelearning-samples/tree/master/samples/getting-started/Clustering_Iris). Is there anyway except cluster Id also get items which were put in the same cluster?\r\n\r\nThat is, I got prediction:\r\n\r\n`var prediction1 = model.Predict(TestIrisData.Setosa1);`\r\n\r\nand I can get cluster Id by `prediction1.SelectedClusterId`. But I also need to know data about another items with their features SepalLength, SepalWidth, PetalLength, PetalWidth.","Url":"https://github.com/dotnet/machinelearning/issues/473","RelatedDescription":"Open issue \"Get cluster items\" (#473)"},{"Id":"337647069","IsPullRequest":true,"CreatedAt":"2018-07-02T20:10:20","Actor":"tyclintw","Number":"472","RawContent":null,"Title":"ParquetLoader - Save Schema to context to support loading the model without files.","State":"open","Body":"This changes address issue #471 \r\n\r\nThe Schema is added to the model context when saving. The context model can then be properly loaded without the need of additional files in order to inspect the schema. A file is still required on initial construction and an error will be thrown if a RowCursor is created without a file.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/472","RelatedDescription":"Open PR \"ParquetLoader - Save Schema to context to support loading the model without files.\" (#472)"},{"Id":"337645678","IsPullRequest":false,"CreatedAt":"2018-07-02T20:05:41","Actor":"tyclintw","Number":"471","RawContent":null,"Title":"Cannot load a ParquetLoader without a file.","State":"open","Body":"### Issue\r\n1. Save a ParquetLoader model context.\r\n2. Load the model context with an empty IMultiStreamSource.\r\n\r\nExpected result:\r\nThe model can be loaded to inspect the schema.\r\n\r\nActual result:\r\nThe model will throw the error \"Parquet loader must be created with one file\".","Url":"https://github.com/dotnet/machinelearning/issues/471","RelatedDescription":"Open issue \"Cannot load a ParquetLoader without a file.\" (#471)"},{"Id":"337634294","IsPullRequest":false,"CreatedAt":"2018-07-02T19:24:33","Actor":"ErcinDedeoglu","Number":"470","RawContent":null,"Title":"How to add new data to existing trained data model?","State":"open","Body":"Hi,\r\nI am very new to this subject. Maybe there might be a problem with my point of view. Thank you for all the reviews.\r\n\r\nI have 10 million rows * 60 columns of data.\r\nAnd every 1 minute new/fresh data coming. And it is really unstable. So I need to train all data every 1 minute.\r\nI would like to learn if it is possible: I want to change trained data model with new data;\r\nload it, change it and write it again.\r\n\r\nLike:\r\n```\r\n            PredictionModel.ReadAsync(_modelpath).Wait();\r\n            PredictionModel<IrisData, IrisPrediction> model = pipeline.Train<IrisData, IrisPrediction>();\r\n            model.WriteAsync(_modelpath).Wait();\r\n```\r\n\r\nI'm not sure if it is working?\r\n\r\nThans advance!","Url":"https://github.com/dotnet/machinelearning/issues/470","RelatedDescription":"Open issue \"How to add new data to existing trained data model?\" (#470)"},{"Id":"337618807","IsPullRequest":false,"CreatedAt":"2018-07-02T19:17:29","Actor":"ErcinDedeoglu","Number":"469","RawContent":null,"Title":"How to load data from variable?","State":"closed","Body":"Hi,\r\nI want to load data from memory, so I can connect it with sql server, webservice etc.\r\n\r\n`pipeline.Add(new TextLoader(dataPath).CreateFrom<IrisData>(separator: ','));`\r\nbut this is only method that I can find! It only works with file on the disk!\r\n\r\nI want to add data from variable like:\r\n`string x = \"116.76000,0.00000,116.76000,0.00000,116.76000,UP\"`\r\n\r\nI hope it is possible right now?\r\n\r\nThanks advance!","Url":"https://github.com/dotnet/machinelearning/issues/469","RelatedDescription":"Closed issue \"How to load data from variable?\" (#469)"},{"Id":"337591952","IsPullRequest":true,"CreatedAt":"2018-07-02T16:51:05","Actor":"yaeldekel","Number":"467","RawContent":null,"Title":"Fix a bug with group Id column in CV macro and add NameColumn argument to CV and TrainTest macros","State":"open","Body":"This PR fixes bug #456, and also introduces a NameColumn argument to the TrainTest and CV macros, to enable the evaluator to use it in the per-instance results.\r\nFixes #456 \r\nFixes #466 \r\n","Url":"https://github.com/dotnet/machinelearning/pull/467","RelatedDescription":"Open PR \"Fix a bug with group Id column in CV macro and add NameColumn argument to CV and TrainTest macros\" (#467)"},{"Id":"337582568","IsPullRequest":false,"CreatedAt":"2018-07-02T16:19:42","Actor":"yaeldekel","Number":"466","RawContent":null,"Title":"CV macro should be able to pass a name column to the evaluator","State":"open","Body":"When running in CV mode, the per-instance results data view contains the results from all folds. Having a name column enables identifying the examples, since they are not in the same order as the input data. Currently, there is no way to pass a name column to the evaluator in the CV macro.","Url":"https://github.com/dotnet/machinelearning/issues/466","RelatedDescription":"Open issue \"CV macro should be able to pass a name column to the evaluator\" (#466)"},{"Id":"337580150","IsPullRequest":false,"CreatedAt":"2018-07-02T16:11:45","Actor":"sfilipi","Number":"465","RawContent":null,"Title":"Create EntryPoint for LightGBM","State":"open","Body":"Currently LightGBM is part of ML.Net Trainers, but there is no [entry point](https://github.com/dotnet/machinelearning/blob/master/docs/code/EntryPoints.md) it. \r\n\r\nOther languages, that interface with ML.Net through Entry Points won't have access to it, until there is an entry point for it. \r\n","Url":"https://github.com/dotnet/machinelearning/issues/465","RelatedDescription":"Open issue \"Create EntryPoint for LightGBM\" (#465)"},{"Id":"337246711","IsPullRequest":true,"CreatedAt":"2018-06-30T22:19:29","Actor":"JoshuaLight","Number":"463","RawContent":null,"Title":"Fixed all typos in word `Transform`.","State":"open","Body":"Hey guys!\r\n\r\nWanna trying to contribute and do some helpful work! What is my first small trophy — typo in `ILearningPipelineStep` comment, which, as I found, is presented in other places in code.\r\n","Url":"https://github.com/dotnet/machinelearning/pull/463","RelatedDescription":"Open PR \"Fixed all typos in word `Transform`.\" (#463)"},{"Id":"337193292","IsPullRequest":true,"CreatedAt":"2018-06-30T07:02:01","Actor":"TomFinley","Number":"462","RawContent":null,"Title":"Isolate ONNX implementations in separate DLL","State":"open","Body":"Partial fix to #162. The full fix would be pushing the DLL into its own nuget so we could remove the protobuf dependency. However I am not sure how to do that. Maybe @eerhardt can help me here.\r\n\r\nPreviously, the ONNX infrastructure and implementations (including refs to protobuf) were in a central DLL. This gave us a dependency on a separate somewhat large project (protobuf), that was only of interest to people saving ONNX models.\r\n\r\nBy having the components save themselves through interfaces rather than actual instantiable classes (`OnnxContext` became `IOnnxContext`, `NodeProto` and `OnnxUtils` became `IOnnxNode`), there is no need for any \"direct\" dependency on protobuf.\r\n\r\nAll implementation classes become internal classes of the `Microsoft.ML.Onnx` project. (This was previously called `Microsoft.ML.UniversalFormat` due to historical reasons that no longer make sense.) The only public classes in that project are the entry-points and commands inside `SaveOnnxCommand.cs`, which instantiate actual implementors of those interfaces, then pass to ONNX savable components.\r\n\r\nAlso, I opportunistically improved documentation on those public interfaces (though even with docs the interfaces would scarcely make sense to someone unfamiliar with ONNX), and improved the code.","Url":"https://github.com/dotnet/machinelearning/pull/462","RelatedDescription":"Open PR \"Isolate ONNX implementations in separate DLL\" (#462)"},{"Id":"337177740","IsPullRequest":true,"CreatedAt":"2018-06-30T02:03:42","Actor":"agoswamiazureml","Number":"461","RawContent":null,"Title":"Fix column purpose for PipelineSweeperMacro","State":"open","Body":"Fixes #460 \r\n\r\n- Adding arguments to the PipelineSweeperMacro.  Users will be able to specify the columns for a particular purpose.  \r\n- Updating the methods in the PurposeInference and TransformInference classes to pass the user provided column purposes as optional arguments.\r\n- Added unit tests for the sweeping engines we have currently (Defaults, Rocket, UniformRandom)\r\n\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/461","RelatedDescription":"Open PR \"Fix column purpose for PipelineSweeperMacro\" (#461)"},{"Id":"337177138","IsPullRequest":false,"CreatedAt":"2018-06-30T01:52:20","Actor":"agoswamiazureml","Number":"460","RawContent":null,"Title":"PipelineSweeperMacro incorrect column purpose inference","State":"open","Body":"PipelineSweeperMacro tries to infer the Purpose of the columns in the data-set, and then generates the parameter space to sweep over.  \r\n\r\nFor several datasets, it infers the purpose incorrectly e.g.  for some datasets, the PipelineSweeperMacro ended up using the label column as a feature.  There is currently no way for the user to override this behavior.  \r\n\r\nThe proposal is to add arguments to the PipelineSweeperMacro, corresponding to the intended purpose for a particular column.  Purpose inference will be done only on columns which were not specified by the user. \r\n","Url":"https://github.com/dotnet/machinelearning/issues/460","RelatedDescription":"Open issue \"PipelineSweeperMacro incorrect column purpose inference\" (#460)"},{"Id":"337164537","IsPullRequest":false,"CreatedAt":"2018-06-29T23:31:51","Actor":"dan-drews","Number":"459","RawContent":null,"Title":"Resources for getting started with ML","State":"open","Body":"I am just beginning to try utilizing this framework, and by following the [Github Labeler Sample](https://github.com/dotnet/machinelearning-samples/tree/master/samples/end-to-end-apps/github-labeler) I have been able to build some proof of concept applications within my organization (with surprisingly high accuracy).\r\n\r\nHowever, we are starting to look at taking this a step further. One example is to utilize a StochasticDualCoordinateAscentClassifier along with a PredictedLabelColumnOriginalValueConverter to suggest the top 3 predicted labels, rather than just 1. For example, to not automatically label a github issue, but recommend labels that can be applied.\r\n\r\nThe description of this project says:\r\n\r\n> ML.NET allows .NET developers to develop their own models and infuse custom ML into their applications without prior expertise in developing or tuning machine learning models, all in .NET.\r\n\r\nBut when I am trying to dig into the documentation, all of the information is very technical, using math and science terms that are way above my understanding. **Are there good resources for people who have high development experience, but no ML experience that I can reference to learn more without feeling like I need a degree in mathematics?** From the little amount of time that I have spent using ML.NET, I am thrilled with the results. Many of our models have had 75% accuracy without much tweaking at all to be necessary, but I am hoping we will be able to use this to take our understanding to the next level.","Url":"https://github.com/dotnet/machinelearning/issues/459","RelatedDescription":"Open issue \"Resources for getting started with ML\" (#459)"},{"Id":"337158185","IsPullRequest":false,"CreatedAt":"2018-06-29T22:48:13","Actor":"hybridware","Number":"457","RawContent":null,"Title":"Enable ML.NET to support open access healthcare models","State":"open","Body":"Please update ML.NET so it will support existing open access healthcare datasets and add tools that would easily enable comparison of genomic data and overlapping data (which could be used to detect cancer patterns) pythons bedtools is a good example of this \r\nhttp://bedtools.readthedocs.io/en/latest/\r\n\r\nAllow us to train our models using open datasets e.g. this example with azure ml.\r\nhttps://blogs.msdn.microsoft.com/cdndevs/2016/05/31/getting-started-with-machine-learningwisconsin-breast-cancer-dataset/","Url":"https://github.com/dotnet/machinelearning/issues/457","RelatedDescription":"Open issue \"Enable ML.NET to support open access healthcare models\" (#457)"},{"Id":"337155849","IsPullRequest":false,"CreatedAt":"2018-06-29T22:33:45","Actor":"yaeldekel","Number":"456","RawContent":null,"Title":"Cross validation macro doesn't work with non-default group column name","State":"open","Body":"Related to #292. When the fix for this bug was checked in (#291) there was a bug related to the GroupId and Weight columns, which causes the specified column names not to be passed to the evaluation entry point. \r\n","Url":"https://github.com/dotnet/machinelearning/issues/456","RelatedDescription":"Open issue \"Cross validation macro doesn't work with non-default group column name\" (#456)"}],"ResultType":"GitHubIssue"}},"RunOn":"2018-07-03T05:30:36.2250788Z","RunDurationInMilliseconds":980}