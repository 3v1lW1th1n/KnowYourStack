{"Data":{"Blog":{"FeedItems":[{"Title":"RyuJIT Just-in-Time Compiler Optimization Enhancements","PublishedOn":"2017-10-17T05:16:50+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"I&#8217;d like to tell you about some of the recent changes we&#8217;ve made as part of our ongoing work to extend the optimization capabilities of RyuJIT, the MSIL-to-native code generator used by .NET Core and .NET Framework. I hope it will make for an interesting read, and offer some insight into the sorts of optimization opportunities we have... <a aria-label=\"read more about RyuJIT Just-in-Time Compiler Optimization Enhancements\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/10/16/ryujit-just-in-time-compiler-optimization-enhancements/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/10/16/ryujit-just-in-time-compiler-optimization-enhancements/","RawContent":null},{"Title":".NET Framework October 2017 Security and Quality Rollup","PublishedOn":"2017-10-11T06:02:21+00:00","CommentsCount":14,"FacebookCount":0,"Summary":"Today, we are releasing the October 2017 Security and Quality Rollup. The update applies to all supported Windows versions. It includes a known issue for Windows 10 1507 (see below). Security This release contains no new security updates. Quality and Reliability This release contains the following quality and reliability improvements. WPF WPF fails to load... <a aria-label=\"read more about .NET Framework October 2017 Security and Quality Rollup\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/10/10/net-framework-october-2017-security-and-quality-rollup/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/10/10/net-framework-october-2017-security-and-quality-rollup/","RawContent":null},{"Title":"Announcing UWP Support for .NET Standard 2.0","PublishedOn":"2017-10-10T22:57:46+00:00","CommentsCount":87,"FacebookCount":0,"Summary":"This post was mostly written by Rich Lander with contributions from Immo Landwerth. Today, we are releasing huge updates to UWP for .NET developers. The really big improvement is adding support for .NET Standard 2.0. UWP developers now have access to ~ 20k more APIs. This release brings UWP to partity with the other .NET implementations... <a aria-label=\"read more about Announcing UWP Support for .NET Standard 2.0\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/10/10/announcing-uwp-support-for-net-standard-2-0/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/10/10/announcing-uwp-support-for-net-standard-2-0/","RawContent":null},{"Title":".NET Framework 4.7.1 Runtime and Compiler Features","PublishedOn":"2017-09-28T23:56:59+00:00","CommentsCount":10,"FacebookCount":0,"Summary":"This post describes the new Runtime, Compiler and Base Class Library (BCL) improvements in the .NET Framework 4.7.1. You can try out these features by downloading the Developer Pack, described in the Welcome to the .NET Framework 4.7.1 Early Access blog post.  BCL &#8211; .NET Standard 2.0 Support .NET Framework 4.7.1 has built-in support for .NET Standard 2.0. .NET Framework 4.7.1... <a aria-label=\"read more about .NET Framework 4.7.1 Runtime and Compiler Features\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/09/28/net-framework-4-7-1-runtime-and-compiler-features/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/09/28/net-framework-4-7-1-runtime-and-compiler-features/","RawContent":null},{"Title":"Build a web service with F# and .NET Core 2.0","PublishedOn":"2017-09-26T16:39:23+00:00","CommentsCount":9,"FacebookCount":0,"Summary":"Earlier this year, I wrote about an update to the roadmap for F# and .NET Core. I had mentioned that there were a number of things you could build with F# and .NET Core today, such as web services. In this post, I&#8217;ll walk through building a web service with F# and .NET Core 2.0... <a aria-label=\"read more about Build a web service with F# and .NET Core 2.0\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/09/26/build-a-web-service-with-f-and-net-core-2-0/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/09/26/build-a-web-service-with-f-and-net-core-2-0/","RawContent":null},{"Title":".NET Framework September 2017 Preview of Quality Rollup","PublishedOn":"2017-09-25T19:57:18+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Today, we are releasing the September 2017 Preview of Quality Rollup. This type of rollup is intended for businesses that want to the preview or use quality improvements as soon as they are available. This update applies to Windows 10 Update 1607 (Anniversary Update) and to Windows Server 2016. FYI: The KBs for Windows Server 2016... <a aria-label=\"read more about .NET Framework September 2017 Preview of Quality Rollup\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/09/25/net-framework-september-2017-preview-of-quality-rollup/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/09/25/net-framework-september-2017-preview-of-quality-rollup/","RawContent":null},{"Title":".NET Core September 2017 Update — macOS High Sierra Support","PublishedOn":"2017-09-22T22:29:09+00:00","CommentsCount":4,"FacebookCount":0,"Summary":"We released .NET Core updates for macOS High Sierra Support and additional quality fixes. You can download and install the update for Windows, macOS and Linux. This update is for .NET Core 1.0 and 1.1. The initial .NET Core 2.0 release includes similar improvements, so is not being updated with this release. Downloads .NET Core 1.0.7 .NET... <a aria-label=\"read more about .NET Core September 2017 Update &#8212; macOS High Sierra Support\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/09/22/net-core-september-2017-update-macos-high-sierra-support/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/09/22/net-core-september-2017-update-macos-high-sierra-support/","RawContent":null},{"Title":".NET Framework 4.7.1 Accessibility and WPF Improvements","PublishedOn":"2017-09-21T22:00:20+00:00","CommentsCount":19,"FacebookCount":0,"Summary":"This post describes the new WPF and accessibility features and improvements in .NET Framework 4.7.1. You can try out these features by downloading the Developer Pack, described in the Welcome to the .NET Framework 4.7.1 Early Access blog post. Accessibility improvements .NET Framework 4.7.1 brings in a lot of accessibility improvements across different libraries to align with the... <a aria-label=\"read more about .NET Framework 4.7.1 Accessibility and WPF Improvements\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/09/21/net-framework-4-7-1-accessibility-and-wpf-improvements/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/09/21/net-framework-4-7-1-accessibility-and-wpf-improvements/","RawContent":null},{"Title":"Watch .NET Conf 2017!","PublishedOn":"2017-09-19T14:35:54+00:00","CommentsCount":12,"FacebookCount":0,"Summary":".NET Conf starts today. It&#8217;s a three-day, free, virtual and global .NET conference. All you need to do is point your web browser to channel9.msdn.com, starting at 8AM Pacific Time. We have a packed agenda with a great set of expert .NET developers. What will you learn? Many things. You will learn to build for... <a aria-label=\"read more about Watch .NET Conf 2017!\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/09/19/watch-net-conf-2017/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/09/19/watch-net-conf-2017/","RawContent":null},{"Title":".NET Framework 4.7.1 ASP.NET and Configuration features","PublishedOn":"2017-09-14T00:23:49+00:00","CommentsCount":25,"FacebookCount":0,"Summary":"This post describes the new ASP.NET, Configuration and System.Messaging features and improvements in the .NET Framework 4.7.1. More information on the build these features are available in and how to get the Developer Pack is covered in the Welcome to the .NET Framework 4.7.1 Early Access blog post. Configuration builders Configuration builders allow developers to inject and build... <a aria-label=\"read more about .NET Framework 4.7.1 ASP.NET and Configuration features\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/09/13/net-framework-4-7-1-asp-net-and-configuration-features/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/09/13/net-framework-4-7-1-asp-net-and-configuration-features/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"6650451504","Type":"IssuesEvent","CreatedAt":"2017-09-28T16:22:10","Actor":"hughbe","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/issues/87","RelatedDescription":"Opened issue \"PRs to repos outside of dotnet/* pattern should not always thank for signing the CLA\" (#87) at dotnet/home","RelatedBody":"For example: https://github.com/mono/libgdiplus/pull/109\r\n\r\nI have already signed the CLI. On the dotnet/corefx etc. projects, I don't get the extra message:\r\n\r\n```\r\n@hughbe,\r\nThanks for having already signed the Contribution License Agreement. Your agreement was validated by .NET Foundation. We will now review your pull request.\r\nThanks,\r\n.NET Foundation Pull Request Bot\r\n```\r\n\r\nJust a small gripe, as I get an email each time I do this. I've seen this in Mono and Xunit.\r\n\r\n/cc @karelz I know this is unrelated to corefx but maybe you know the right person/repo to route this to :D\r\n"},{"Id":"6515896963","Type":"PullRequestEvent","CreatedAt":"2017-08-26T22:20:18","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/85","RelatedDescription":"Merged pull request \"Create telerik-ui-for-uwp.md\" (#85) at dotnet/home","RelatedBody":"Submission of Telerik UI for UWP"},{"Id":"6515896506","Type":"PullRequestEvent","CreatedAt":"2017-08-26T22:19:49","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/86","RelatedDescription":"Merged pull request \"Corrected list of maintainers\" (#86) at dotnet/home","RelatedBody":""}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"6645912196","Type":"IssuesEvent","CreatedAt":"2017-09-27T19:47:08","Actor":"terrajobst","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/32","RelatedDescription":"Opened issue \".NET Framework 4.7.1 provides built-in support for .NET Standard 2.0\" (#32) at dotnet/announcements","RelatedBody":"## Summary\r\n\r\n.NET Framework 4.7.1 will have built-in support for .NET Standard 2.0. This means that you don't have to deploy any additional files or use binding redirects to use .NET Standard 2.0 libraries.\r\n\r\nFor a demo, check out [this video][video].\r\n\r\n## Details\r\n\r\nWhile libraries targeting [.NET Standard 2.0][ns20post] are can be consumed by applications and libraries [targeting .NET Framework 4.6.1][nstable] and higher, not all files that are required for .NET Standard libraries were part of .NET Framework 4.6.1. In fact, .NET Framework 4.6.1 was shipped before .NET Standard 2.0 was even designed. That's why building an application targeting .NET Framework 4.6.1 (as well as 4.6.2 and 4.7) will have to deploy additional files.\r\n\r\n* If you use **Visual Studio 2017 15.3** or higher, these files are automatically copied to the application's output folder.\r\n\r\n* If you use **Visual Studio 2015 and [use NuGet 3.6][nuget36]**, we'll prompt you to install a [support package][vs2015support] which will handle copying the files to the output directory.\r\n\r\nStarting with .NET Framework 4.7.1 these files no longer have to be deployed with the application -- they are built right into the .NET Framework itself.\r\n\r\n.NET Framework 4.7.1 also adds[about 200 missing APIs][missingapis] that were part of .NET Standard 2.0 but not actually implemented by .NET Framework 4.6.1, 4.6.2 or 4.7.\r\n\r\nThis also removes the need for [binding redirects][netfx-issues] when using .NET Standard libraries on .NET Framework because the CLR automatically unifies version numbers of assemblies that are part of the platform.\r\n\r\nLearn more [by reading the .NET Standard FAQ](http://aka.ms/netstandardfaq).\r\n\r\n## Discussion\r\n\r\nDiscussion\r\n\r\nFor a discussion, please go to dotnet/standard#514.\r\n\r\n[ns20post]: https://blogs.msdn.microsoft.com/dotnet/2017/08/14/announcing-net-standard-2-0/\r\n[nstable]: https://docs.microsoft.com/en-us/dotnet/standard/net-standard\r\n[nuget36]: https://dist.nuget.org/visualstudio-2015-vsix/v3.6.0/NuGet.Tools.vsix\r\n[vs2015support]: https://aka.ms/netstandard-build-support-netfx\r\n[missingapis]: https://github.com/dotnet/standard/blob/master/netstandard/src/ApiCompatBaseline.net461.txt\r\n[netfx-issues]: https://github.com/dotnet/standard/issues/481\r\n[video]: https://www.youtube.com/watch?v=u67Eu_IgEMs\r\n\r\nhttps://github.com/dotnet/standard/issues/514"}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"6725389055","Type":"PullRequestEvent","CreatedAt":"2017-10-17T05:07:17","Actor":"CarolEidt","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/14350","RelatedDescription":"Merged pull request \"Cleanup of Lowering & LsraInfo\" (#14350) at dotnet/coreclr","RelatedBody":"These are preparatory changes for eliminating gtLsraInfo.\r\n\r\nRegister requirements should never be set on contained nodes. This includes setting isDelayFree and restricting to byte registers for x86.\r\n- This results in net positive diffs for the framework (eliminating incorrect setting of hasDelayFreeSrc), though a net regression for the tests on x86 (including many instances of effectively the same code).\r\n- The regressions are largely related to issue #11274.\r\n\r\nImprove consistency of IsValue():\r\n- Any node that can be contained should produce a value, and have a type (e.g. GT_FIELD_LIST).\r\n- Some value nodes (GTK_NOVALUE isn't set) are allowed to have TYP_VOID, in which case IsValue() should return false.\r\n  - This simplifies IsValue().\r\n- Any node that can be assigned a register should return true for IsValue() (e.g. GT_LOCKADD).\r\n- PUTARG_STK doesn't produce a value; get type from its operand.\r\n  - This requires some fixing up of SIMD12 operands.\r\n- Unused GT_LONG nodes shouldn't define any registers\r\n\r\nEliminate isNoRegCompare, by setting type of JTRUE operand to TYP_VOID\r\n  - Set GTF_SET_FLAGS on the operand to ensure it is not eliminated as dead code."},{"Id":"6725307494","Type":"PullRequestEvent","CreatedAt":"2017-10-17T04:27:39","Actor":"kouvel","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/14535","RelatedDescription":"Opened pull request \"CLRLifoSemaphore cleanup\" (#14535) at dotnet/coreclr","RelatedBody":"- Removed volatile loads. They don't actually help with anything. Should help a bit on arm, haven't tested.\r\n- No need to decrement the count of waiters woken upon timeout. I had initially copied that part of the code from SemaphoreSlim, which needs it because it uses a Monitor that doesn't provide the same guarantees as the wait objects used here. It's not needed here.\r\n- No change to perf on x64, I plan on testing arm as part of issue https://github.com/dotnet/coreclr/issues/14067 once I have some time and get a machine."},{"Id":"6725125167","Type":"IssuesEvent","CreatedAt":"2017-10-17T03:06:24","Actor":"Jiayili1","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/13740","RelatedDescription":"Reopened issue \"Test failure: JIT_Methodical._divrem_div_decimaldiv_cs_d_decimaldiv_cs_d_/_divrem_div_decimaldiv_cs_d_decimaldiv_cs_d_cmd\" (#13740) at dotnet/coreclr","RelatedBody":"Opened on behalf of @Jiayili1\n\nThe test `JIT_Methodical._divrem_div_decimaldiv_cs_d_decimaldiv_cs_d_/_divrem_div_decimaldiv_cs_d_decimaldiv_cs_d_cmd` has failed.\n\n/home/helixbot/dotnetbuild/work/f40dae91-31bf-43b1-9dcc-29b0c344de9e/Work/ee8fc36e-d05d-4367-a525-3db8376e96c1/Unzip/divrem/div/decimaldiv_cs_d/decimaldiv_cs_d.sh: line 243: 10033 Aborted                 (core dumped) $_DebuggerFullPath \"$CORE_ROOT/corerun\" $ExePath $CLRTestExecutionArguments\n    \n    \n    Return code:      1\n    Raw output file:      /home/helixbot/dotnetbuild/work/f40dae91-31bf-43b1-9dcc-29b0c344de9e/Work/ee8fc36e-d05d-4367-a525-3db8376e96c1/Unzip/Reports\\JIT.Methodical\\divrem\\div\\decimaldiv_cs_d\\decimaldiv_cs_d.output.txt\n    Raw output:\n    BEGIN EXECUTION\n    /home/helixbot/dotnetbuild/work/f40dae91-31bf-43b1-9dcc-29b0c344de9e/Payload/corerun decimaldiv_cs_d.exe\n    Expected: 100\n    Actual: 134\n    END EXECUTION - FAILED\n    Test Harness Exitcode is : 1\n    \n    To run the test:\n    > set CORE_ROOT=/home/helixbot/dotnetbuild/work/f40dae91-31bf-43b1-9dcc-29b0c344de9e/Payload\n    > /home/helixbot/dotnetbuild/work/f40dae91-31bf-43b1-9dcc-29b0c344de9e/Work/ee8fc36e-d05d-4367-a525-3db8376e96c1/Unzip/divrem/div/decimaldiv_cs_d/decimaldiv_cs_d.sh\n    \n    Expected: True\n    Actual:   False\n\n        Stack Trace:\n\n        \nBuild : Master - 20170901.01 (Core Tests)\nFailing configurations:\n- redhat.69.amd64\n  - x64\n\nDetail: https://mc.dot.net/#/product/netcore/master/source/official~2Fcoreclr~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20170901.01/workItem/JIT.Methodical.XUnitWrapper/analysis/xunit/JIT_Methodical._divrem_div_decimaldiv_cs_d_decimaldiv_cs_d_~2F_divrem_div_decimaldiv_cs_d_decimaldiv_cs_d_cmd"},{"Id":"6725014106","Type":"IssuesEvent","CreatedAt":"2017-10-17T02:22:37","Actor":"stephentoub","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/14462","RelatedDescription":"Closed issue \"Fix the Scalability problem in System.Threading.TimerQueueTimer\" (#14462) at dotnet/coreclr","RelatedBody":"There is a hot lock in System.Threading.TimerQueueTimer that shows up when people use alot of timeouts or Task.Delays.      Below is a simple program  that causes 10000 Tasks to be each delaying 5 seconds in 100 msec.  The program keeps 8 cores at 60% CPU and over half of that is in contention on the one lock in System.Threading.TimerQueueTimer (in the Change, Close and Fire methods)\r\n\r\nName\r\n--\r\nmodule coreclr <<coreclr!JIT_MonEnterWorker_InlineGetThread_GetThread_PatchLabel>>\r\n+ system.private.corelib!TimerQueueTimer.Change\r\n+ system.private.corelib!System.Threading.TimerQueueTimer.Close()\r\n+ system.private.corelib!System.Threading.TimerQueueTimer.Fire()\r\n\r\nThus this lock can get hot (We have seen this in a variety of scenarios, mostly in cases where we have many CPUs (e.g 32 or 64), and thus have many outstanding delays.  \r\n\r\nNote that we don't actually have  problem with the data structure (It is O(n) where every time a timer fires (but not when it is canceled)).  The problem is simply the scalability (the fact that we have one lock).  \r\n\r\n```\r\nusing System;\r\nusing System.Threading.Tasks;\r\n\r\nnamespace TimerScalability\r\n{\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            Console.WriteLine(\"Starting, running 10000 tasks that each delay 5 second 100 msec at a time.\");\r\n            Task[] tasks = new Task[10000];\r\n            for(int i = 0; i < tasks.Length; i++)\r\n                tasks[i] = Task.Factory.StartNew(TaskBody);\r\n\r\n            Console.WriteLine(\"Waiting\");\r\n            Task.WhenAll(tasks).Wait();\r\n            Console.WriteLine(\"Done\");\r\n        }\r\n\r\n\r\n        static async Task TaskBody()\r\n        {\r\n            // Console.WriteLine(\"Task {0} Starting\", Task.CurrentId);\r\n            for (int i = 0; i < 50; i++)\r\n                await Task.Delay(100);\r\n            // Console.WriteLine(\"Task {0} Done\", Task.CurrentId);\r\n        }\r\n    }\r\n}\r\n```"},{"Id":"6725014100","Type":"PullRequestEvent","CreatedAt":"2017-10-17T02:22:37","Actor":"stephentoub","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/14527","RelatedDescription":"Merged pull request \"Reduce Timer lock contention\" (#14527) at dotnet/coreclr","RelatedBody":"Timer currently uses a global lock to protect a single \"queue\" of Timers, and any operation to create/change/fire/delete a Timer takes that same lock.  This leads to a scalability problem for code that operates on lots of timers.\r\n\r\nThis change partitions this single queue into N queues, which all operate independently.  In the .NET Framework implementation, there's already logically such a split with one queue/lock per AppDomain, and this change utilizes the same underlying support in the runtime.  As such, contention is distributed across the N locks, helping scalability.\r\n\r\nNote that this change does not help the case where a Timer fires; it could even add a small amount of additional overhead to such a case, as there are more likely to be multiple VM callbacks to fire timers (one per queue), whereas previously there'd be just one for all timers.  However, it potentially makes a significant impact to the throughput of creating and deleting timers, which we expect to be the common case for high-throughput timers (e.g. creating a timer to help timeout an operation that will likely complete before the timeout).  Simple repro:\r\n```C#\r\nusing System;\r\nusing System.Diagnostics;\r\nusing System.Threading.Tasks;\r\nusing System.Threading;\r\n\r\nclass Program\r\n{\r\n    static void Main()\r\n    {\r\n        var tasks = new Task[Environment.ProcessorCount];\r\n        while (true)\r\n        {\r\n            for (int i = 0; i < tasks.Length; i++)\r\n            {\r\n                tasks[i] = Task.Run(async () =>\r\n                {\r\n                    for (int j = 0; j < 1_000_000; j++)\r\n                    {\r\n                        using (var t = new Timer(delegate { }, null, 100_000, -1))\r\n                        {\r\n                            //await Task.Yield();\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n\r\n            var sw = Stopwatch.StartNew();\r\n            Task.WaitAll(tasks);\r\n            Console.WriteLine(sw.Elapsed.TotalSeconds);\r\n        }\r\n    }\r\n}\r\n```\r\nOn my quad core, with the yield commented out (so that creation and disposal will definitely happen from the same thread), before this produces results like:\r\n```\r\n2.13162\r\n2.1474115\r\n2.0992453\r\n2.0924658\r\n2.1353377\r\n```\r\nwhereas after it produces results like:\r\n```\r\n0.6014539\r\n0.5870677\r\n0.5938833\r\n0.5823756\r\n0.6019473\r\n```\r\nUncommenting the await in order to put the disposal back into the thread pool, before:\r\n```\r\n3.8250889\r\n3.8807055\r\n3.7832106\r\n3.9216054\r\n3.744262\r\n```\r\nand after:\r\n```\r\n1.3021118\r\n1.3428281\r\n1.3408342\r\n1.3113431\r\n1.3529329\r\n```\r\nNote that all of this was done with the server GC.  With the workstation GC, everything takes a lot longer, as allocation/GC becomes more expensive.  With the await, before:\r\n```\r\n6.0565934\r\n6.1419216\r\n6.0375295\r\n6.3585111\r\n6.2168001\r\n```\r\nand after:\r\n```\r\n3.9577551\r\n3.8124262\r\n3.9511121\r\n3.7542718\r\n3.7818402\r\n```\r\n\r\nI also included two additional commits:\r\n- When a Timer does fire, we're currently queueing a work item that then fires the timer.  We can instead just queue the timer object directly.\r\n- Task.Delay currently allocates four objects (Task, Timer, TimerHolder, TimerQueueTimer), two of which are wrappers and unnecessary with our internals access; this drops it from four to two (Task, TimerQueueTimer).\r\n\r\nFixes https://github.com/dotnet/coreclr/issues/14462\r\ncc: @kouvel, @tarekgh, @vancem, @jkotas\r\n\r\nps I purposefully stuck with a change that I thought could be ported to the .NET Framework.  However, given that AppDomains aren't an issue in .NET Core, I think a better longer-term solution would be rewriting Timer to be entirely managed (potentially with P/Invokes if needed) rather than having any code in the VM."},{"Id":"6724976432","Type":"PullRequestEvent","CreatedAt":"2017-10-17T02:07:44","Actor":"CarolEidt","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/14534","RelatedDescription":"Opened pull request \"Refactor register selection heuristics\" (#14534) at dotnet/coreclr","RelatedBody":"This is in preparation for tuning these for both throughput and code quality."},{"Id":"6724948145","Type":"PullRequestEvent","CreatedAt":"2017-10-17T01:56:17","Actor":"sandreenko","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/14533","RelatedDescription":"Opened pull request \"spmi collection: protect strlen from nullptr\" (#14533) at dotnet/coreclr","RelatedBody":"It is why local cqPerf runs fails. \r\n`strlen` doesn't expect `nullptr`."},{"Id":"6724931189","Type":"IssuesEvent","CreatedAt":"2017-10-17T01:49:07","Actor":"Jiayili1","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/14532","RelatedDescription":"Closed issue \"CancelKeyPressTests.CanAddAndRemoveHandler_Remote failed with \"Exit code was 131 but it should have been 42\"\" (#14532) at dotnet/coreclr","RelatedBody":"failed test: CancelKeyPressTests.CanAddAndRemoveHandler_Remote \r\nConfiguration: oxs10.12_release\r\n\r\nDetail: https://ci.dot.net/job/dotnet_corefx/job/master/job/osx10.12_release/3358/testReport/(root)/CancelKeyPressTests/CanAddAndRemoveHandler_Remote/\r\n\r\nMESSAGE:\r\n~~~\r\nExit code was 131 but it should have been 42\\nExpected: True\\nActual: False\r\n~~~\r\nSTACK TRACE:\r\n~~~\r\nat System.Diagnostics.RemoteExecutorTestBase.RemoteInvokeHandle.Dispose() \r\nin /Users/dotnet-bot/j/workspace/dotnet_corefx/master/osx10.12_release/src/CoreFx.Private.TestUtilities/src/System/Diagnostics/RemoteExecutorTestBase.cs:line 189\r\n~~~\r\n"},{"Id":"6724929969","Type":"IssuesEvent","CreatedAt":"2017-10-17T01:48:36","Actor":"Jiayili1","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/14532","RelatedDescription":"Opened issue \"CancelKeyPressTests.CanAddAndRemoveHandler_Remote failed with \"Exit code was 131 but it should have been 42\"\" (#14532) at dotnet/coreclr","RelatedBody":"failed test: CancelKeyPressTests.CanAddAndRemoveHandler_Remote \r\nConfiguration: oxs10.12_release\r\n\r\nDetail: https://ci.dot.net/job/dotnet_corefx/job/master/job/osx10.12_release/3358/testReport/(root)/CancelKeyPressTests/CanAddAndRemoveHandler_Remote/\r\n\r\nMESSAGE:\r\n~~~\r\nExit code was 131 but it should have been 42\\nExpected: True\\nActual: False\r\n~~~\r\nSTACK TRACE:\r\n~~~\r\nat System.Diagnostics.RemoteExecutorTestBase.RemoteInvokeHandle.Dispose() \r\nin /Users/dotnet-bot/j/workspace/dotnet_corefx/master/osx10.12_release/src/CoreFx.Private.TestUtilities/src/System/Diagnostics/RemoteExecutorTestBase.cs:line 189\r\n~~~\r\n"}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"6725287304","Type":"PullRequestEvent","CreatedAt":"2017-10-17T04:18:00","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/7850","RelatedDescription":"Opened pull request \"Adding a note about needing additional feeds\" (#7850) at dotnet/cli","RelatedBody":"Additional feeds may be necessary when consuming pre-release bits. Added this additional information to the README page of the CLI.\r\n\r\nFixes https://github.com/dotnet/cli/issues/7841\r\n\r\n@danmosemsft \r\n"},{"Id":"6725083014","Type":"IssuesEvent","CreatedAt":"2017-10-17T02:49:44","Actor":"danmosemsft","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/cli/issues/7841","RelatedDescription":"Reopened issue \"dotnet run does not work out of the box due to targeting 2.0\" (#7841) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\nDownload and unzip `https://dotnetcli.blob.core.windows.net/dotnet/Sdk/master/dotnet-sdk-latest-win-x86.zip` (link from the main page https://github.com/dotnet/cli)\r\n`dotnet new console`\r\n`dotnet run`\r\n\r\n## Expected  behavior\r\nIt works.\r\n\r\n## Actual behavior\r\n```\r\nC:\\dotnet.x86.latest\\1>..\\dotnet run\r\nIt was not possible to find any compatible framework version\r\nThe specified framework 'Microsoft.NETCore.App', version '2.0.0' was not found.\r\n  - Check application dependencies and target a framework version installed at:\r\n      C:\\dotnet.x86.latest\\\r\n  - The .NET framework can be installed from:\r\n      https://aka.ms/dotnet-download-runtime\r\n  - The .NET framework and SDK can be installed from:\r\n      http://go.microsoft.com/fwlink/?LinkID=798306&clcid=0x409\r\n  - The following versions are installed:\r\n      2.1.0-preview1-25806-02 at [C:\\dotnet.x86.latest\\shared]\r\n```\r\nI tried editing the csproj to target `netcoreapp2.1` then I get\r\n```\r\nC:\\dotnet.x86.latest\\1>..\\dotnet run\r\nC:\\dotnet.x86.latest\\1\\1.csproj : warning NU1603: 1 depends on Microsoft.NETCore.App (>= 2.1.0-preview1-25806-02) but Microsoft.NETCore.App 2.1.0-preview1-25806-02 was not found. An approximate best match of Microsoft.NETCore.App 2.1.0-preview2-25616-02 was resolved.\r\nC:\\dotnet.x86.latest\\1\\1.csproj : warning NU1603: 1 depends on Microsoft.NETCore.App (>= 2.1.0-preview1-25806-02) but Microsoft.NETCore.App 2.1.0-preview1-25806-02 was not found. An approximate best match of Microsoft.NETCore.App 2.1.0-preview2-25616-02 was resolved.\r\nIt was not possible to find any compatible framework version\r\nThe specified framework 'Microsoft.NETCore.App', version '2.1.0-preview2-25616-02' was not found.\r\n  - Check application dependencies and target a framework version installed at:\r\n      C:\\dotnet.x86.latest\\\r\n  - The .NET framework can be installed from:\r\n      https://aka.ms/dotnet-download-runtime\r\n  - The .NET framework and SDK can be installed from:\r\n      http://go.microsoft.com/fwlink/?LinkID=798306&clcid=0x409\r\n  - The following versions are installed:\r\n      2.1.0-preview1-25806-02 at [C:\\dotnet.x86.latest\\shared]\r\n```\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\nC:\\dotnet.x86.latest\\1>dotnet --info\r\n.NET Command Line Tools (2.0.0)\r\n\r\nProduct Information:\r\n Version:            2.0.0\r\n Commit SHA-1 hash:  cdcd1928c9\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.16299\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.0.0\\\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.0\r\n  Build    : e8b8861ac7faf042c87a5c2f9f2d04c98b69f28d\r\n\r\n\r\n\r\n\r\n\r\n\r\n"},{"Id":"6724837824","Type":"PullRequestEvent","CreatedAt":"2017-10-17T01:09:38","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/7849","RelatedDescription":"Merged pull request \"Insert SDK 15.5.0-preview-20171017-1\" (#7849) at dotnet/cli","RelatedBody":"Insert SDK 15.5.0-preview-20171017-1"},{"Id":"6724729913","Type":"PullRequestEvent","CreatedAt":"2017-10-17T00:24:09","Actor":"dsplaisted","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/7849","RelatedDescription":"Opened pull request \"Insert SDK 15.5.0-preview-20171017-1\" (#7849) at dotnet/cli","RelatedBody":"Insert SDK 15.5.0-preview-20171017-1"},{"Id":"6724486440","Type":"PullRequestEvent","CreatedAt":"2017-10-16T22:52:51","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/7834","RelatedDescription":"Merged pull request \"Updated version of TestPlatform to 15.5.0-preview-20171012-09\" (#7834) at dotnet/cli","RelatedBody":"Updated version of TestPlatform to 15.5.0-preview-20171012-09"},{"Id":"6724273450","Type":"PullRequestEvent","CreatedAt":"2017-10-16T21:49:11","Actor":"johnbeisner","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/7848","RelatedDescription":"Opened pull request \"Enabling the publish of CLI NuPkg to the unified Transport feed.\" (#7848) at dotnet/cli","RelatedBody":"Step 2 for: https://github.com/dotnet/cli/issues/7793\r\n\r\nNotes:\r\nbuild_projects/dotnet-cli-build/dotnet-cli-build.csproj:\r\nFor now, we will download the 'Microsoft.DotNet.Build.Tasks.Feed' package by placing a reference in 'dotnet-cli-build.csproj'; this is to be replaced by the \"toolset\" faux project per TaGoo.\r\n\r\nbuild/publish/PublishNupkgToTransportFeed.targets:\r\nFor now, the 'PublishNupkgToTransportFeed' target is a 'VSO' style step similar to: \"Publish Windows Installer Nupkg to VS Feed\" and \"Publish MSBuild Extensions NuPkg to VS Feed\" - controlled by \"PUBLISH_NUPKG_TO_TRANSPORT_FEED\" Boolean.\r\n\r\nbuild/AzureInfo.props:\r\nThe value for 'TRANSPORTFEED_STORAGE_KEY' will be passed into the build via a secret parameter from VSO. The key will be stored in our Azure KeyVault.\r\n"},{"Id":"6724249081","Type":"PullRequestEvent","CreatedAt":"2017-10-16T21:42:45","Actor":"AndyGerlicher","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/7847","RelatedDescription":"Opened pull request \"MSBuild 15.5.160\" (#7847) at dotnet/cli","RelatedBody":"Approved in shiproom. PR pending val build results:\r\nhttps://devdiv.visualstudio.com/DevDiv/MSBuild/_git/VS/pullrequest/89802?_a=overview\r\n\r\nContains fix for regression: https://github.com/Microsoft/msbuild/pull/2644 "},{"Id":"6724231530","Type":"PullRequestEvent","CreatedAt":"2017-10-16T21:38:10","Actor":"dotnet-bot","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/7846","RelatedDescription":"Opened pull request \"Update CoreSetup to preview1-25816-02 (master)\" (#7846) at dotnet/cli","RelatedBody":"/cc @dotnet/dotnet-cli"},{"Id":"6724087347","Type":"PullRequestEvent","CreatedAt":"2017-10-16T21:02:12","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/7843","RelatedDescription":"Merged pull request \"Merge release/2.0.0 to release/15.5\" (#7843) at dotnet/cli","RelatedBody":"\nThis is an automatically generated pull request from release/2.0.0 into release/15.5.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.0.0-to-release/15.5-20171016-070028\ngit reset --hard upstream/release/15.5\ngit merge upstream/release/2.0.0\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.0.0-to-release/15.5-20171016-070028 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"6724084116","Type":"PullRequestEvent","CreatedAt":"2017-10-16T21:01:25","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/pull/7833","RelatedDescription":"Closed pull request \"WIP Merge release/15.5 to master\" (#7833) at dotnet/cli","RelatedBody":"\nThis is an automatically generated pull request from release/15.5 into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/15.5-to-master-20171013-070032\ngit reset --hard upstream/master\ngit merge upstream/release/15.5\n# Fix merge conflicts\ngit commit\ngit push merges/release/15.5-to-master-20171013-070032 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"6724060789","Type":"PullRequestEvent","CreatedAt":"2017-10-16T20:56:02","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/cli/pull/7833","RelatedDescription":null,"RelatedBody":"\nThis is an automatically generated pull request from release/15.5 into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/15.5-to-master-20171013-070032\ngit reset --hard upstream/master\ngit merge upstream/release/15.5\n# Fix merge conflicts\ngit commit\ngit push merges/release/15.5-to-master-20171013-070032 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"6723583231","Type":"IssuesEvent","CreatedAt":"2017-10-16T19:07:35","Actor":"Petermarcu","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/537","RelatedDescription":"Closed issue \"[Question] Clean up milestones\" (#537) at dotnet/standard","RelatedBody":"Is it possible to close out [.NET Standard 2.0 milestone](https://github.com/dotnet/standard/milestone/2) now it is released?  I'm assuming a new milestone for v2.1 will be created once roadmap is announced.  Thx"},{"Id":"6722723626","Type":"IssuesEvent","CreatedAt":"2017-10-16T16:00:49","Actor":"ericstj","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/538","RelatedDescription":"Closed issue \"No netstandard.dll reference when targeting netstandard2.0\" (#538) at dotnet/standard","RelatedBody":"@alexeyzimarev reported this here: https://github.com/dotnet/core/issues/831#issuecomment-336706155\r\n\r\nThis is even worse. I converted RestSharp to be on netstandard2.0. It builds fine on my machine. But on my other machine and on anyone else's it is throwing errors on everything - `CultureInfo`, `List`, etc.\r\n\r\nSo I looked how it shows and compared it with a completely new .NET Standard class library. Here is how they look:\r\n\r\n![image](https://user-images.githubusercontent.com/2821205/31584452-365ae620-b1af-11e7-8340-a92e0a5fc552.png)\r\n\r\nThe csproj files are completely identical:\r\n\r\n```\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <TargetFramework>netstandard2.0</TargetFramework>\r\n  </PropertyGroup>\r\n\r\n</Project>\r\n```\r\n\r\nI tried using `<NetStandardImplicitPackageVersion>2.0.0</NetStandardImplicitPackageVersion>` and it has no effect. But hence that the RestSharp project does not even have a reference to `netstandard.dll`. How this is even possible???"},{"Id":"6721886115","Type":"IssuesEvent","CreatedAt":"2017-10-16T13:26:17","Actor":"YohanSciubukgian","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/539","RelatedDescription":"Opened issue \"Missing System.String.Replace definitions in .NetStandard 2.0\" (#539) at dotnet/standard","RelatedBody":"From what I have understand, .Net Core 2.0 is the implementation of .Net Standard 2.0 .\r\nHowever I'm facing an issue when I'm trying to move my code from a .Net Core 2.0 project to .Net Standard 2.0 with the following message :\r\n> No overload for method 'Replace' takes 3 arguments\r\n\r\n.Net Standard 2.0 references the following methods : \r\n - System.String.Replace(String, String);\r\n - System.String.Replace(char, char);\r\nhttps://docs.microsoft.com/fr-fr/dotnet/api/?view=netstandard-2.0&term=string.replace\r\n\r\nIn another side, .Net Core 2.0 references the following methods :\r\n - System.String.Replace(String, String, bool, CultureInfo);\r\n - System.String.Replace(String, String, StringComparison);\r\n - System.String.Replace(String, String);\r\n - System.String.Replace(char, char);\r\nhttps://docs.microsoft.com/fr-fr/dotnet/api/?view=netcore-2.0&term=string.replace\r\n\r\nIs it possible to add these missing definitions to the next version of .NetStandard ?"},{"Id":"6718785694","Type":"IssuesEvent","CreatedAt":"2017-10-15T16:49:15","Actor":"Petermarcu","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/538","RelatedDescription":"Opened issue \"No netstandard.dll reference when targeting netstandard2.0\" (#538) at dotnet/standard","RelatedBody":"@alexeyzimarev reported this here: https://github.com/dotnet/core/issues/831#issuecomment-336706155\r\n\r\nThis is even worse. I converted RestSharp to be on netstandard2.0. It builds fine on my machine. But on my other machine and on anyone else's it is throwing errors on everything - `CultureInfo`, `List`, etc.\r\n\r\nSo I looked how it shows and compared it with a completely new .NET Standard class library. Here is how they look:\r\n\r\n![image](https://user-images.githubusercontent.com/2821205/31584452-365ae620-b1af-11e7-8340-a92e0a5fc552.png)\r\n\r\nThe csproj files are completely identical:\r\n\r\n```\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <TargetFramework>netstandard2.0</TargetFramework>\r\n  </PropertyGroup>\r\n\r\n</Project>\r\n```\r\n\r\nI tried using `<NetStandardImplicitPackageVersion>2.0.0</NetStandardImplicitPackageVersion>` and it has no effect. But hence that the RestSharp project does not even have a reference to `netstandard.dll`. How this is even possible???"},{"Id":"6716718422","Type":"IssuesEvent","CreatedAt":"2017-10-14T12:20:47","Actor":"shaggygi","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/537","RelatedDescription":"Opened issue \"[Question] Clean up milestones\" (#537) at dotnet/standard","RelatedBody":"Is it possible to close out [.NET Standard 2.0 milestone](https://github.com/dotnet/standard/milestone/2) now it is released?  I'm assuming a new milestone for v2.1 will be created once roadmap is announced.  Thx"},{"Id":"6714225269","Type":"IssuesEvent","CreatedAt":"2017-10-13T16:04:12","Actor":"ajcvickers","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/460","RelatedDescription":"Closed issue \"EntityFrameworkCore2.0 a bug about mysql\" (#460) at dotnet/standard","RelatedBody":"I have a project join some nuget packages , mysql.data,microsoft.entityframeworkcore 2.0 then it have some issues.\r\nimportment:efcore1.3 have no issue ,but efcore2.0 have a not implement method .\r\nSystem.TypeLoadException:“Method 'Clone' in type 'MySQL.Data.EntityFrameworkCore.Infraestructure.Internal.MySQLOptionsExtension' from assembly 'MySql.Data.EntityFrameworkCore, Version=8.0.8.0, Culture=neutral, PublicKeyToken=c5687fc88969c44d' does not have an implementation.”\r\n\r\n"}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"6725230691","Type":"IssuesEvent","CreatedAt":"2017-10-17T03:51:42","Actor":"LYP951018","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/24681","RelatedDescription":"Opened issue \"Then, what's the status of Code Contracts usage in .NET Core?\" (#24681) at dotnet/corefx","RelatedBody":"Related: https://github.com/Microsoft/CodeContracts/issues/231\r\nIf the contracts feature is not usable, why included in corefx?"},{"Id":"6725108665","Type":"IssuesEvent","CreatedAt":"2017-10-17T02:59:54","Actor":"sandorfr","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/24680","RelatedDescription":"Opened issue \"Proposal : Full RFC 4122  for Guids\" (#24680) at dotnet/corefx","RelatedBody":"Similar to  what [uuid node package](https://www.npmjs.com/package/uuid) provides for .net it would be great to have a full implementation of RFC 4122  as part of the framework. "},{"Id":"6725088617","Type":"IssuesEvent","CreatedAt":"2017-10-17T02:51:54","Actor":"dotnet-mc-bot","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/24679","RelatedDescription":"Opened issue \"Test: System.ComponentModel.EventBasedAsync.Tests.BackgroundWorkerTests/RunWorkerAsync_NoOnWorkHandler_SetsResultToNull failed with \"System.Exception : The background worker never completed\"\" (#24679) at dotnet/corefx","RelatedBody":"Opened on behalf of @Jiayili1\n\nThe test `System.ComponentModel.EventBasedAsync.Tests.BackgroundWorkerTests/RunWorkerAsync_NoOnWorkHandler_SetsResultToNull` has failed.\n\nSystem.Exception : The background worker never completed.\n\n        Stack Trace:\n\n           at System.ComponentModel.EventBasedAsync.Tests.BackgroundWorkerTests.RunWorkerAsync_NoOnWorkHandler_SetsResultToNull() in E:\\A\\_work\\598\\s\\corefx\\src\\System.ComponentModel.EventBasedAsync\\tests\\BackgroundWorkerTests.cs:line 93\n       at _$ILCT$.$ILT$ReflectionDynamicInvoke$.InvokeRetV(Object thisPtr, IntPtr methodToCall, ArgSetupState argSetupState, Boolean targetIsThisCall)\n       at System.InvokeUtils.CalliIntrinsics.Call(IntPtr dynamicInvokeHelperMethod, Object thisPtr, IntPtr methodToCall, ArgSetupState argSetupState, Boolean isTargetThisCall)\n       at System.InvokeUtils.CallDynamicInvokeMethod(Object thisPtr, IntPtr methodToCall, Object thisPtrDynamicInvokeMethod, IntPtr dynamicInvokeHelperMethod, IntPtr dynamicInvokeHelperGenericDictionary, Object targetMethodOrDelegate, Object[] parameters, BinderBundle binderBundle, Boolean wrapInTargetInvocationException, Boolean invokeMethodHelperIsThisCall, Boolean methodToCallIsThisCall) in CallDynamicInvokeMethod:line 16707566\n    \nBuild : Master - 20171017.01 (UWP ILC Tests)\nFailing configurations:\n- Windows.10.Amd64.ClientRS3-x86\n  - Debug\n\nDetail: https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Filc~2F/build/20171017.01/workItem/System.ComponentModel.EventBasedAsync.Tests/analysis/xunit/System.ComponentModel.EventBasedAsync.Tests.BackgroundWorkerTests~2FRunWorkerAsync_NoOnWorkHandler_SetsResultToNull"},{"Id":"6725074890","Type":"PullRequestEvent","CreatedAt":"2017-10-17T02:46:31","Actor":"danmosemsft","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/24674","RelatedDescription":"Merged pull request \"Remove dead code from System.IO.Compression\" (#24674) at dotnet/corefx","RelatedBody":"PR addresses issue #17905 , project **System.IO.Compression**.\r\n\r\nI did not remove these things:\r\n- Members of `PathInternal` class. This class is in `src\\Common` and not directly in `System.IO.Compression`.\r\n- `SR.Argument_InvalidPathChars` - used in `PathInternal`.\r\n- `zlib.internal unsafe static extern uint crc32(uint crc, byte* buffer, int len)` - used in `Crc32Helper`.\r\n- `DeflateManagedStream.SetFileFormatWriter(IFileFormatWriter writer)` - not used. But when removed, the project will not compile with _error CS0649: Field 'DeflateManagedStream.\\_formatWriter' is never assigned to..._ So there is probably some bigger refactoring needed.\r\n"}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"6724949019","Type":"IssuesEvent","CreatedAt":"2017-10-17T01:56:33","Actor":"sharwell","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/22723","RelatedDescription":"Opened issue \"ContainedDocument can leak if exceptions are thrown\" (#22723) at dotnet/roslyn","RelatedBody":"Underlying issue:\r\n\r\nDuring the call to `CreateContainedLanguage`, a call is made to `AbstractProject.AddDocument`. This call adds the `ContainedDocument` to two sets. If the key already exists in the second set, an exception is thrown and the caller will lose the ability to dispose of the `IVsContainedLanguage` instance, leaving a strong reference to the `ContainedDocument` permanently in the first set.\r\n\r\nHeap dumps where this bug manifests show large numbers of `ContainedDocument` instances leaking. One case has 343,931 instances.\r\n\r\nThe offending code block is the following:\r\n\r\nhttps://github.com/dotnet/roslyn/blob/a4239cbcadcf8a1f1e8485e430a7ac190b78fc85/src/VisualStudio/Core/Def/Implementation/ProjectSystem/AbstractProject.cs#L1028-L1032\r\n\r\n💭 It should be possible to fix this by simply reversing the two calls to `Add`. Since `ContainedDocument` always uses a new GUID for each instance, the addition using that GUID should never fail. However, a safer fix would ensure that the pair of additions is atomic, regardless of input."}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"6725274518","Type":"PullRequestEvent","CreatedAt":"2017-10-17T04:11:44","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/4738","RelatedDescription":"Merged pull request \"Fix too verbose logging in CppCodeGen\" (#4738) at dotnet/corert","RelatedBody":""},{"Id":"6725274058","Type":"PullRequestEvent","CreatedAt":"2017-10-17T04:11:31","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/4739","RelatedDescription":"Merged pull request \"Merge changes from TFS\" (#4739) at dotnet/corert","RelatedBody":"When merging, this PR, please ensure a merge commit is created as automation requires the merge commit.  Do not 'Squash and merge' or 'Rebase and merge'!"},{"Id":"6725268176","Type":"PullRequestEvent","CreatedAt":"2017-10-17T04:08:38","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/4739","RelatedDescription":"Opened pull request \"Merge changes from TFS\" (#4739) at dotnet/corert","RelatedBody":"When merging, this PR, please ensure a merge commit is created as automation requires the merge commit.  Do not 'Squash and merge' or 'Rebase and merge'!"},{"Id":"6724988796","Type":"PullRequestEvent","CreatedAt":"2017-10-17T02:12:40","Actor":"morganbr","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/4736","RelatedDescription":"Merged pull request \"Throw opcode with trap.\" (#4736) at dotnet/corert","RelatedBody":"I was unable to add a test for this. Without try ... catch I don't know how to really check.\r\nAnyway, I tried with \"throw null;\" and the trap gets generated.\r\n"},{"Id":"6724411221","Type":"PullRequestEvent","CreatedAt":"2017-10-16T22:28:50","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/4738","RelatedDescription":"Opened pull request \"Fix too verbose logging in CppCodeGen\" (#4738) at dotnet/corert","RelatedBody":""},{"Id":"6724339587","Type":"IssuesEvent","CreatedAt":"2017-10-16T22:07:25","Actor":"sandreenko","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/issues/4251","RelatedDescription":"Closed issue \"Assertion failed 'expensiveArg != UINT_MAX' in 'System.Linq.Queryable:Count(ref):int' (IL size 62)\" (#4251) at dotnet/corert","RelatedBody":"Compile with `-O` to enable optimizations.\r\n\r\n```csharp\r\nusing System.Linq;\r\n\r\ninternal class Program\r\n{\r\n    private static void Main(string[] args)\r\n    {\r\n        Queryable.Count<int>(null);\r\n        Queryable.Count<string>(null);\r\n    }\r\n}\r\n```\r\n\r\nStack:\r\n\r\n```\r\n>\tclrjitilc.dll!assertAbort(const char * why, const char * file, unsigned int line) Line 318\tC++\tSymbols loaded.\r\n \tclrjitilc.dll!noWayAssertAbortHelper(const char * cond, const char * file, unsigned int line) Line 507\tC++\tSymbols loaded.\r\n \tclrjitilc.dll!noWayAssertBody(const char * cond, const char * file, unsigned int line) Line 533\tC++\tSymbols loaded.\r\n \tclrjitilc.dll!noWayAssertBodyConditional(const char * cond, const char * file, unsigned int line) Line 520\tC++\tSymbols loaded.\r\n \tclrjitilc.dll!fgArgInfo::SortArgs() Line 1991\tC++\tSymbols loaded.\r\n \tclrjitilc.dll!Compiler::fgMorphArgs(GenTreeCall * call) Line 4429\tC++\tSymbols loaded.\r\n \tclrjitilc.dll!Compiler::fgMorphCall(GenTreeCall * call) Line 8466\tC++\tSymbols loaded.\r\n \tclrjitilc.dll!Compiler::fgMorphTree(GenTree * tree, Compiler::MorphAddrContext * mac) Line 15132\tC++\tSymbols loaded.\r\n \tclrjitilc.dll!Compiler::fgMorphArgs(GenTreeCall * call) Line 3173\tC++\tSymbols loaded.\r\n \tclrjitilc.dll!Compiler::fgMorphCall(GenTreeCall * call) Line 8466\tC++\tSymbols loaded.\r\n \tclrjitilc.dll!Compiler::fgMorphCall(GenTreeCall * call) Line 8272\tC++\tSymbols loaded.\r\n \tclrjitilc.dll!Compiler::fgMorphTree(GenTree * tree, Compiler::MorphAddrContext * mac) Line 15132\tC++\tSymbols loaded.\r\n \tclrjitilc.dll!Compiler::fgMorphSmpOp(GenTree * tree, Compiler::MorphAddrContext * mac) Line 11870\tC++\tSymbols loaded.\r\n \tclrjitilc.dll!Compiler::fgMorphTree(GenTree * tree, Compiler::MorphAddrContext * mac) Line 15119\tC++\tSymbols loaded.\r\n \tclrjitilc.dll!Compiler::fgMorphStmts(BasicBlock * block, bool * mult, bool * lnot, bool * loadw) Line 15931\tC++\tSymbols loaded.\r\n \tclrjitilc.dll!Compiler::fgMorphBlocks() Line 16220\tC++\tSymbols loaded.\r\n \tclrjitilc.dll!Compiler::fgMorph() Line 17421\tC++\tSymbols loaded.\r\n \tclrjitilc.dll!Compiler::compCompile(void * * methodCodePtr, unsigned long * methodCodeSize, JitFlags * compileFlags) Line 4480\tC++\tSymbols loaded.\r\n \tclrjitilc.dll!Compiler::compCompileHelper(CORINFO_MODULE_STRUCT_ * classPtr, ICorJitInfo * compHnd, CORINFO_METHOD_INFO * methodInfo, void * * methodCodePtr, unsigned long * methodCodeSize, JitFlags * compileFlags, CorInfoInstantiationVerification instVerInfo) Line 5985\tC++\tSymbols loaded.\r\n \tclrjitilc.dll!`Compiler::compCompile'::`43'::__Body::Run(Compiler::compCompile::__l2::__JITParam * __JITpParam) Line 5334\tC++\tSymbols loaded.\r\n \tclrjitilc.dll!Compiler::compCompile(CORINFO_METHOD_STRUCT_ * methodHnd, CORINFO_MODULE_STRUCT_ * classPtr, ICorJitInfo * compHnd, CORINFO_METHOD_INFO * methodInfo, void * * methodCodePtr, unsigned long * methodCodeSize, JitFlags * compileFlags) Line 5338\tC++\tSymbols loaded.\r\n \tclrjitilc.dll!``jitNativeCode'::`11'::__Body::Run'::`6'::__Body::Run(jitNativeCode::__l11::__Body::Run::__l5::__JITParam * __JITpParam) Line 6632\tC++\tSymbols loaded.\r\n \tclrjitilc.dll!`jitNativeCode'::`11'::__Body::Run(jitNativeCode::__l2::__JITParam * __JITpParam) Line 6659\tC++\tSymbols loaded.\r\n \tclrjitilc.dll!jitNativeCode(CORINFO_METHOD_STRUCT_ * methodHnd, CORINFO_MODULE_STRUCT_ * classPtr, ICorJitInfo * compHnd, CORINFO_METHOD_INFO * methodInfo, void * * methodCodePtr, unsigned long * methodCodeSize, JitFlags * compileFlags, void * inlineInfoPtr) Line 6659\tC++\tSymbols loaded.\r\n \tclrjitilc.dll!CILJit::compileMethod(ICorJitInfo * compHnd, CORINFO_METHOD_INFO * methodInfo, unsigned int flags, unsigned char * * entryAddress, unsigned long * nativeSizeOfCode) Line 298\tC++\tSymbols loaded.\r\n \tjitinterface.dll!JitCompileMethod(CorInfoException * * ppException, Jit * pJit, void * thisHandle, void * * callbacks, void * methodInfo, unsigned int flags, void * entryAddress, void * nativeSizeOfCode) Line 88\tC++\tSymbols loaded.\r\n```\r\n\r\nNgendump: \r\n[ngendump.txt](https://github.com/dotnet/corert/files/1188374/ngendump.txt)\r\n"},{"Id":"6723898655","Type":"PullRequestEvent","CreatedAt":"2017-10-16T20:19:56","Actor":"shrah","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/4737","RelatedDescription":"Opened pull request \"Add support for marshalling struct with delegates \" (#4737) at dotnet/corert","RelatedBody":"Fixes https://github.com/dotnet/corert/issues/4732#issuecomment-336929242"},{"Id":"6722959930","Type":"PullRequestEvent","CreatedAt":"2017-10-16T16:50:12","Actor":"jacano","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/4736","RelatedDescription":"Opened pull request \"Throw opcode with trap.\" (#4736) at dotnet/corert","RelatedBody":"I was unable to add a test for this. Without try ... catch I don't know how to really check.\r\nAnyway, I tried with \"throw null;\" and the trap gets generated.\r\n"},{"Id":"6722675044","Type":"PullRequestEvent","CreatedAt":"2017-10-16T15:51:40","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/4735","RelatedDescription":"Merged pull request \"Fix extra space in filename\" (#4735) at dotnet/corert","RelatedBody":""}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"920157146309730305","CreatedAt":"2017-10-17T05:18:54+00:00","UserScreenname":"dotnet","Text":"RyuJIT Just-in-Time Compiler Optimization Enhancements https://t.co/dhO8rAqiSI","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":4,"FavoriteCount":6,"RawContent":null},{"Id":"918494723425406976","CreatedAt":"2017-10-12T15:13:01+00:00","UserScreenname":"dotnet","Text":"So many fantastic #dotnetconf sessions this year! Check them out on-demand on @ch9 https://t.co/aFDC9i36Lu https://t.co/diQ3nfOU5p","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":108,"FavoriteCount":70,"RawContent":null},{"Id":"917994173541777409","CreatedAt":"2017-10-11T06:04:01+00:00","UserScreenname":"dotnet","Text":".NET Framework October 2017 Security and Quality Rollup https://t.co/MRrH6YjXGy","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":28,"FavoriteCount":21,"RawContent":null},{"Id":"916703209548214272","CreatedAt":"2017-10-07T16:34:11+00:00","UserScreenname":"dotnet","Text":"Join @terrajobst at his fire place for a story about .NET Standard versioning. https://t.co/8JAOGpk0Pm","Source":"<a href=\"http://twitter.com/#!/download/ipad\" rel=\"nofollow\">Twitter for iPad</a>","RetweetCount":49,"FavoriteCount":27,"RawContent":null}]}},"RunOn":"2017-10-17T05:30:18.6350701Z","RunDurationInMilliseconds":6604}