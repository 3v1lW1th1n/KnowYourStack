{"Data":{"Blog":{"FeedItems":[{"Title":".NET Framework January 2018 Security and Quality Rollup","PublishedOn":"2018-01-10T06:39:31+00:00","CommentsCount":28,"FacebookCount":0,"Summary":"Updated: January 21, 2018 Today, we are releasing the January 2018 Security and Quality Rollup. An issue with the January 2018 Monthly Rollup was found on Windows 7 and Windows Server 2008 R2 if .NET...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-framework-january-2018-security-and-quality-rollup/","RawContent":null},{"Title":".NET for UWP January 2018 Update","PublishedOn":"2018-01-10T04:17:28+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, we are releasing the .NET for UWP January 2018 Update. This post includes the fix included and instructions on how to update your applications. Security CVE-2018-0786 – Security Feature Bypass...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-for-uwp-january-2018-update/","RawContent":null},{"Title":".NET Framework 4.7.1 is available on Windows Update, WSUS and MU Catalog!","PublishedOn":"2018-01-09T21:39:54+00:00","CommentsCount":9,"FacebookCount":0,"Summary":"Today, we are happy to announce the Microsoft .NET Framework 4.7.1 is available on Windows Update, Windows Server Update Services (WSUS) and Microsoft Update (MU) Catalog. This includes reliability...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-framework-4-7-1-is-available-on-windows-update-wsus-and-mu-catalog/","RawContent":null},{"Title":".NET Core January 2018 Update","PublishedOn":"2018-01-09T21:08:03+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"Today, we are releasing the .NET Core January 2018 Update. This includes .NET Core  1.0.9, 1.1.6 and 2.0.5. Please leave feedback on the release in the comments below or at dotnet/core #1199. Security...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-core-january-2018-update/","RawContent":null},{"Title":"Migrating your existing .NET application to the cloud? Tell us about it!","PublishedOn":"2017-12-05T18:14:46+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Hi everyone! The .NET team is conducting a survey to learn more about your approach for moving existing .NET applications to the cloud.  The survey should take less than 5 minutes to complete. Take...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/12/05/migrating-your-existing-net-application-to-the-cloud-tell-us-about-it/","RawContent":null},{"Title":"Announcing the Windows Compatibility Pack for .NET Core","PublishedOn":"2017-11-17T04:59:32+00:00","CommentsCount":76,"FacebookCount":0,"Summary":"Porting existing code to .NET Core used to be quite hard because the available API set was very small. In .NET Core 2.0, we already made this much easier, thanks to .NET Standard 2.0. Today,...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/16/announcing-the-windows-compatibility-pack-for-net-core/","RawContent":null},{"Title":"UPDATE – Microservices and Docker containers: Architecture, Patterns and Development guidance (Updated for .NET Core 2.0)","PublishedOn":"2017-11-16T22:00:06+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"Nov. 15th 2017 update Earlier this year, we published this eBook/guide and sample application offering guidance for architecting microservices and Docker containers based applications. We have...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/16/update-microservices-and-docker-containers-architecture-patterns-and-development-guidance-updated-for-net-core-2-0/","RawContent":null},{"Title":"UPDATE – Web Applications with ASP.NET Core Architecture and Patterns guidance (Updated for ASP.NET Core 2)","PublishedOn":"2017-11-16T21:00:05+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"Nov. 15th 2017 update Earlier this year, we published an eBook/Guide and sample application offering guidance named Architecting Modern Web Applications with ASP.NET Core and Microsoft Azure. We have...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/16/update-web-applications-with-asp-net-core-architecture-and-patterns-guidance-updated-for-asp-net-core-2/","RawContent":null},{"Title":"Introducing Tensor for multi-dimensional Machine Learning and AI data","PublishedOn":"2017-11-15T22:00:18+00:00","CommentsCount":10,"FacebookCount":0,"Summary":"Overview Tensor is an exchange type for homogenous multi-dimensional data for 1 to N dimensions. The motivation behind introducing Tensor&#60;T&#62; is to make it easy for Machine Learning library...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/15/introducing-tensor-for-multi-dimensional-machine-learning-and-ai-data/","RawContent":null},{"Title":"Introducing Nullable Reference Types in C#","PublishedOn":"2017-11-15T20:00:47+00:00","CommentsCount":240,"FacebookCount":0,"Summary":"Today we released a prototype of a C# feature called &#8220;nullable reference types&#8220;, which is intended to help you find and fix most of your null-related bugs before they blow up at runtime....","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/15/nullable-reference-types-in-csharp/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"7102763357","Type":"PullRequestEvent","CreatedAt":"2018-01-16T00:17:04","Actor":"galatrash-at-dnn","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/96","RelatedDescription":"Opened pull request \"Adding DNN Platform.\" (#96) at dotnet/home","RelatedBody":""},{"Id":"7097053889","Type":"PullRequestEvent","CreatedAt":"2018-01-14T15:15:00","Actor":"bfistein","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/95","RelatedDescription":"Opened pull request \"Fix broken logo URL\" (#95) at dotnet/home","RelatedBody":""},{"Id":"7065382954","Type":"PullRequestEvent","CreatedAt":"2018-01-06T19:21:47","Actor":"ctaggart","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/94","RelatedDescription":"Opened pull request \"add SourceLink\" (#94) at dotnet/home","RelatedBody":"Adding SourceLink to the project list as per the checklist https://github.com/ctaggart/SourceLink/issues/138"},{"Id":"7044237283","Type":"PullRequestEvent","CreatedAt":"2017-12-31T20:25:44","Actor":"onovotny","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/93","RelatedDescription":"Opened pull request \"Add Humanizer\" (#93) at dotnet/home","RelatedBody":"Onboarding Humanizer: https://github.com/Humanizr/Humanizer/issues/682"},{"Id":"6946829856","Type":"PullRequestEvent","CreatedAt":"2017-12-05T18:08:42","Actor":"heiligerdankgesang","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/92","RelatedDescription":"Opened pull request \"Remove contact email from system.drawing.md\" (#92) at dotnet/home","RelatedBody":"Contact email is outdated. Mono-project site's community section has better, more up-to-date information."},{"Id":"6934052963","Type":"PullRequestEvent","CreatedAt":"2017-12-02T15:19:09","Actor":"rprouse","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/91","RelatedDescription":"Opened pull request \"Add NUnit to the .NET Foundation Projects\" (#91) at dotnet/home","RelatedBody":""}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"7089727012","Type":"IssuesEvent","CreatedAt":"2018-01-12T04:51:18","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/53","RelatedDescription":"Opened issue \".NET Framework January 2018 Rollup Known Issue KB4074906 - \"TypeInitializationException\" or \"FileFormatException\" error in WPF applications\" (#53) at dotnet/announcements","RelatedBody":"# .NET Framework January 2018 Rollup Known Issue KB4074906 - \"TypeInitializationException\" or \"FileFormatException\" error in WPF applications\r\n\r\nAn issue has been found in the [.NET Framework January 2018 Security and Quality Rollup](https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-framework-january-2018-security-and-quality-rollup/). The .NET team is in the process of fixing the issue. This document describes the symptom and workarounds to resolve the issue while you are waiting for a fix.\r\n\r\nThis document will be updated when a fix is made available.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [microsoft/dotnet #599](https://github.com/Microsoft/dotnet/issues/599)\r\n\r\n## Symptoms\r\n\r\nWindows Presentation Foundation (WPF) applications that request a fallback font or a character that is not included in the currently selected font return the following error messages: \r\n\r\n```\r\nSystem.TypeInitializationException\r\n \r\n“FileFormatException: No FontFamily element found in FontFamilyCollection \r\nthat matches current OS or greater: Win7SP1”.\r\n\r\nInner exception originates from: CompositeFontParser\r\n```\r\n\r\n## Workarounds\r\n\r\nTo work around this problem, use one of the following methods.\r\n\r\n### Workaround 1 - Uninstall the January 2018 Update\r\n\r\nTo keep .NET 4.7.1 installed and maintain protection against vulnerabilities that are addressed by the January security updates, uninstall the January .NET Framework Security and Quality Rollup ([KB4055002](https://support.microsoft.com/en-us/help/4055002)), and then install the January .NET Framework Security-Only Update ([KB4054183](https://support.microsoft.com/en-us/help/4054183)). To do this, follow these steps:\r\n\r\n1. In Control Panel, open the Windows Update item, and then select View update history.\r\n1. In the Review your update history list, locate and select Security Update for Microsoft .NET Framework 4.6, 4.6.1, 4.6.2, 4.7, 4.7.1 ([KB4055002](https://support.microsoft.com/en-us/help/4055002)). Then, select Uninstall.\r\n1. When you are prompted for confirmation to uninstall, select Yes.\r\n1. Restart your computer if you are prompted to do this.\r\n1. Download and install the Security Only update for .NET Framework 4.6, 4.6.1, 4.6.2, 4.7, and 4.7.1 for Windows 7 SP1 and Windows Server 2008 R2 SP1 and .NET Framework 4.6 for Windows Server 2008 SP2 ([KB4054183](https://support.microsoft.com/en-us/help/4054183)) for your operating system configuration from the following links:\r\n   * [Security Only update for .NET Framework 4.6, 4.6.1, 4.6.2, 4.7, and 4.7.1 for Windows 7 SP1 and Windows Server 2008 R2 SP1 for x86 systems (KB4054183)](http://download.windowsupdate.com/d/msdownload/update/software/secu/2018/01/ndp47-kb4054183-x86_301cb3d6591b572786c8349c12a28e5ec5d2d334.exe)\r\n   * [Security Only update for .NET Framework 4.6, 4.6.1, 4.6.2, 4.7, and 4.7.1 on Windows 7 SP1 and Windows Server 2008 R2 SP1 for x64 systems (KB4055269)](http://download.windowsupdate.com/d/msdownload/update/software/secu/2018/01/ndp47-kb4054183-x64_a022ad5109b1208dff502d1be4477668b4fa258d.exe)\r\n1. Follow the installation prompts, and then restart your computer if your are prompted to do this.\r\n\r\n### Workaround 2 - Uninstall the .NET Framework 4.7.1, Install .NET Framework 4.7\r\n\r\nRoll back to the previous version of .NET Framework. To do this, follow these steps:\r\n\r\n1. In Control Panel, open the Programs and Features item.\r\n1. In the Uninstall or change a program list, locate and then select Microsoft .NET Framework 4.7.1, and then select Uninstall/Change.\r\n![image](https://user-images.githubusercontent.com/2608468/34859496-5a3f11e6-f70b-11e7-82cb-5a12a4f9a633.png)\r\n1. Select Remove .NET Framework 4.7.1 from this computer, and then select Next.\r\n![image](https://user-images.githubusercontent.com/2608468/34859585-f5d50f3e-f70b-11e7-8fb9-a75e35c08767.png)\r\n1. Select Continue to confirm uninstallation.\r\n1. Select Finish after the uninstallation is finished.\r\n![image](https://user-images.githubusercontent.com/2608468/34859595-07877226-f70c-11e7-9d66-908a37ef0ded.png)\r\n1. Restart your computer if you are prompted to do this.\r\n1. Install [.NET Framework 4.7](https://www.microsoft.com/en-us/download/details.aspx?id=55170).\r\n\r\n## Issue Reports\r\n\r\n* [KB4074906 (Microsoft)](https://support.microsoft.com/en-us/help/4074906)\r\n* [0xd4d/dnSpy #692](https://github.com/0xd4d/dnSpy/issues/692)\r\n* [Wox-launcher/Wox #1823](https://github.com/Wox-launcher/Wox/issues/1823)\r\n"},{"Id":"7076404590","Type":"IssuesEvent","CreatedAt":"2018-01-09T18:02:02","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/52","RelatedDescription":"Opened issue \"Microsoft Security Advisory CVE-2018-0764: Denial of Service when parsing XML documents\" (#52) at dotnet/announcements","RelatedBody":"# Microsoft Security Advisory CVE-2018-0764\r\n## Denial of Service when parsing XML documents\r\n### Executive Summary \r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in the public versions of .NET Core 1.0 and 1.1, and 2.0. This advisory also provides guidance on what developers can do to update their applications correctly.\r\n\r\nMicrosoft is aware of a Denial of Service vulnerability in all public versions of .NET core due to improper processing of XML documents. An attacker who successfully exploited this vulnerability could cause a denial of service against a .NET application. A remote unauthenticated attacker could exploit this vulnerability by issuing specially crafted requests to a .NET Core application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET core handles XML document processing.\r\n\r\nSystem administrators are advised to update their .NET Core runtimes to versions 1.0.9, 1.1.6 and 2.0.5. Developers are advised to update their .NET Core SDK to version 2.1.4 or 1.1.7. These runtime and SDK versions will also address CVE-2018-0786,  https://github.com/dotnet/announcements/issues/51\r\n\r\n### Discussion\r\n\r\nPlease use **** TODO: FILL IN ISSUE LINK *** for discussion of this advisory.\r\n\r\n## Affected Software\r\nThe vulnerability affects any Microsoft .NET Core project if it uses any of affected runtime versions listed below\r\n\r\n Runtime Version | Fixed runtime version\r\n----------------| -------------------------\r\n1.0.0, 1.0.1, 1.0.2, 1.0.3, 1.0.4, 1.0.5, 1.0.7, 1.0.8 | 1.0.9\r\n1.1.0, 1.1.1, 1.1.2, 1.1.4, 1.1.5 | 1.1.6\r\n2.0.0, 2.0.3, 2.0.4 |  2.0.5\r\n\r\n### Advisory FAQ\r\n#### How do I know if I am affected?\r\n\r\nTo check the runtimes installed on a computer you must view the contents of the runtime folder. By default these are\r\n\r\n| Operating System          | Location          |\r\n|---------------------------|-------------------|\r\n| Windows | C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\ |\r\n| macOS | /usr/local/share/dotnet/shared/Microsoft.NETCore.App/    |\r\n| Supported Linux platforms | /usr/share/dotnet/shared/Microsoft.NETCore.App/   |\r\n\r\nEach runtime version is installed in its own directory, where the directory name is the version number. If you do not have a directory for 1.0.9, 1.1.6 or 2.0.2 then any applications targeting .NET Core will be vulnerable. Downloads for all supported platforms can be acquired from https://www.microsoft.com/net/download/\r\n\r\n#### How do I fix my affected application?\r\nApplications can be fixed by installing the latest runtimes or SDKs. Typically application servers only install a runtime package, developer machines install SDKs. Installers can be downloaded from the [Runtime and SDK download archive](https://github.com/dotnet/core/blob/master/release-notes/download-archive.md). Runtime version 1.1.6 will also install runtime version 1.0.9.\r\n\r\nIf you have built a [self-contained application](https://docs.microsoft.com/en-us/dotnet/core/deploying/#self-contained-deployments-scd) you must install the new runtime and SDK, recompile your application and redeploy.\r\n\r\n## Other Information\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including Terms and Conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue where you can ask questions.\r\n\r\n### What if the update breaks my application?\r\nAn application can be pinned to a previous version of the runtime by editing the [application.runtime.config](https://github.com/dotnet/cli/blob/ede74b6be1406ba0c086b6d5fc1a5d4eacff1f01/Documentation/specs/runtime-configuration-file.md#appnameruntimeconfigjson) file for that application and editing the framework version and setting `rollForward` to `false`. This should be treated as a temporary measure and the application updated to work with the patched versions of the framework.\r\n\r\nNote that this file is optional, you may need to create it for each application alongside the executable.\r\n\r\n### External Links\r\n\r\n[CVE-2018-0764](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-0764)\r\n\r\n### Revisions\r\n\r\nV1.0 (Jan 9, 2018): Advisory published.\r\n\r\n_Version 1.0_\r\n_Last Updated 2018-01-09_\r\n  \r\n  \r\n  \r\n  \r\n  \r\n  "},{"Id":"7076401836","Type":"IssuesEvent","CreatedAt":"2018-01-09T18:01:26","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/51","RelatedDescription":"Opened issue \"Microsoft Security Advisory CVE-2018-0786: Security Feature Bypass in X509 Certificate Validation\" (#51) at dotnet/announcements","RelatedBody":"# Microsoft Security Advisory CVE-2018-0786\r\n## Security Feature Bypass in X509 Certificate Validation\r\n### Executive Summary \r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in the public versions of .NET Core 1.0 and 1.1, and 2.0. This advisory also provides guidance on what developers can do to update their applications correctly. \r\n\r\nMicrosoft is aware of a security vulnerability in the public versions of .NET Core where an attacker could present a certificate that is marked invalid for a specific use, but a component uses it for that purpose. This action disregards the Enhanced Key Usage tagging.\r\n\r\nThe security update addresses the vulnerability by ensuring that .NET Core components completely validate certificates.\r\n\r\nSystem administrators are advised to update their .NET Core runtimes to versions 1.0.9, 1.1.6 and 2.0.5. Developers are advised to update their .NET Core SDK to version 2.1.4 or 1.1.7. These runtime and SDK versions will also address CVE-2018-0764 ***** TODO: ADD LINK TO OTHER ISSUE *****\r\n\r\n### Discussion\r\n\r\nPlease use **** TODO: FILL IN ISSUE LINK *** for discussion of this advisory.\r\n\r\n## Affected Software\r\nThe vulnerability affects any Microsoft .NET Core project if it uses any of affected runtime versions listed below\r\n\r\n Runtime Version | Fixed runtime version\r\n----------------| -------------------------\r\n1.0.0, 1.0.1, 1.0.2, 1.0.3, 1.0.4, 1.0.5, 1.0.7, 1.0.8 | 1.0.9\r\n1.1.0, 1.1.1, 1.1.2, 1.1.4, 1.1.5 | 1.1.6\r\n2.0.0, 2.0.3, 2.0.4 |  2.0.5\r\n\r\nThis vulnerability also affects any .NET native applications using the following NuGet packages.\r\n\r\nNuGet Packages | Fixed NuGet Packages\r\n-- | --\r\nMicrosoft.NETCore.UniversalWindowsPlatform 5.2.* (contains   .NET native 1.4.*) | Microsoft.NETCore.UniversalWindowsPlatform 5.2.4\r\nMicrosoft.NETCore.UniversalWindowsPlatform 5.3.* (contains   .NET native 1.6.*) | Microsoft.NETCore.UniversalWindowsPlatform 5.3.5\r\nMicrosoft.NETCore.UniversalWindowsPlatform 5.4.* (contains   .NET native 1.7.*) | Microsoft.NETCore.UniversalWindowsPlatform 5.4.2\r\nMicrosoft.NETCore.UniversalWindowsPlatform 6.0.* (contains   .NET native 2.0.*) | Microsoft.NETCore.UniversalWindowsPlatform 6.0.6\r\n\r\n### Advisory FAQ\r\n#### How do I know if I am affected?\r\n\r\nTo check the runtimes installed on a computer you must view the contents of the runtime folder. By default these are\r\n\r\n| Operating System          | Location          |\r\n|---------------------------|-------------------|\r\n| Windows | C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\ |\r\n| macOS | /usr/local/share/dotnet/shared/Microsoft.NETCore.App/    |\r\n| Supported Linux platforms | /usr/share/dotnet/shared/Microsoft.NETCore.App/   |\r\n\r\nEach runtime version is installed in its own directory, where the directory name is the version number. If you do not have a directory for 1.0.9, 1.1.6 or 2.0.2 then any applications targeting .NET Core will be vulnerable. Downloads for all supported platforms can be acquired from https://www.microsoft.com/net/download/\r\n\r\n#### How do I fix my affected application?\r\nApplications can be fixed by installing the latest runtimes or SDKs. Typically application servers only install a runtime package, developer machines install SDKs. Installers can be downloaded from the [Runtime and SDK download archive](https://github.com/dotnet/core/blob/master/release-notes/download-archive.md). Runtime version 1.1.6 will also install runtime version 1.0.9.\r\n\r\nIf you have built a [self-contained application](https://docs.microsoft.com/en-us/dotnet/core/deploying/#self-contained-deployments-scd) you must install the new runtime and SDK, recompile your application and redeploy.\r\n\r\n#### How do I fix my .NET native application? \r\n\r\n.NET native requires that applications be re-processed by the .NET native compiler to incorporate the fixes and the re-processed version needs to be distributed via the Windows Store.\r\n\r\nWe recommend that you update your .NET UWP apps to use the latest minor version of the `Microsoft.NETCore.UniversalWindowsPlatform` NuGet package so that you can build and verify that your app works as expected when updated. If you are using version 6.0.x, you should update to 6.0.6 and if you’re using 5.2.x, you can update to 5.2.4. Of course, you can update to a higher major version too, but we are distributing security updates for all impacted major versions (currently 5.2.x, 5.3.x, 5.4.x and 6.0.x). Additionally, whether or not you update your NuGet packages, all applications submitted to the store after today will be automatically fixed during submission processing.\r\n\r\nIf you do not update your app in the Store, it will automatically be reprocessed and distributed via an application update in the next few weeks. Users who have automatic app updates enabled will get the fix with no intervention on your or their parts. Because updated apps are distributed through the Windows Store, sideloaded apps will not be automatically updated. We recommend that developers who distribute sideloaded apps update the affected NuGet packages, rebuild their applications and distribute them to their users.\r\n\r\nMicrosoft is committed to keeping UWP applications secure and to supporting developers. If you have feedback on the fix distribution process, please let us know at dotnetnative@microsoft.com. \r\n\r\n## Other Information\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including Terms and Conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue where you can ask questions.\r\n\r\n### What if the update breaks my application?\r\nAn application can be pinned to a previous version of the runtime by editing the [application.runtime.config](https://github.com/dotnet/cli/blob/ede74b6be1406ba0c086b6d5fc1a5d4eacff1f01/Documentation/specs/runtime-configuration-file.md#appnameruntimeconfigjson) file for that application and editing the framework version and setting `rollForward` to `false`. This should be treated as a temporary measure and the application updated to work with the patched versions of the framework.\r\n\r\nNote that this file is optional, you may need to create it for each application alongside the executable.\r\n\r\n### External Links\r\n\r\n[CVE-2018-0786](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-0786)\r\n\r\n### Revisions\r\n\r\nV1.0 (Jan 9, 2018): Advisory published.\r\n\r\n_Version 1.0_\r\n_Last Updated 2018-01-09_"},{"Id":"6948315401","Type":"IssuesEvent","CreatedAt":"2017-12-05T23:41:57","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/50","RelatedDescription":"Closed issue \".Net Core ARM32 SDK availability\" (#50) at dotnet/announcements","RelatedBody":"Referencing #29.\r\n\r\nWill it be possible to : \r\n\r\na) Provide ARM32 builds for the SDK at its current state\r\nor\r\nb) Provide links on how to build the .Net Core SDK for ARM32?\r\n\r\nThe thing is I am planning to use it in a virtual environnement, through proot + qemu-arm-static. This way I would be able to build and, more importantly, run unit tests on ARM32. Another thing I am planning to do is to setup a build environnement on i686 through virtualisation as qemu doesn't seem to be able to emulate x86_64 on i686 (but arm32 does seem to work well enough).\r\n\r\nThank you in advance.\r\n\r\nSergio\r\n\r\n"},{"Id":"6944555922","Type":"IssuesEvent","CreatedAt":"2017-12-05T10:46:06","Actor":"tioduke","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/50","RelatedDescription":"Opened issue \".Net Core ARM32 SDK availability\" (#50) at dotnet/announcements","RelatedBody":"Will it be possible to : \r\n\r\na) Provide ARM32 builds for the SDK at its current state\r\nor\r\nb) Provide links on how to build the .Net Core SDK for ARM32?\r\n\r\nThe thing is I am planning to use it in a virtual environnement, through proot + qemu-arm-static. This way I would be able to build and, more importantly, run unit tests on ARM32. Another thing I am planning to do is to setup a build environnement on i686 through virtualisation as qemu doesn't seem to be able to emulate x86_64 on i686 (but arm32 does seem to work well enough).\r\n\r\nThank you in advance.\r\n\r\nSergio\r\n\r\n"}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"7130062263","Type":"PullRequestEvent","CreatedAt":"2018-01-22T03:46:29","Actor":"swgillespie","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/pull/15905","RelatedDescription":"Closed pull request \"[Local GC] [WIP] FEATURE_EVENT_TRACE 2/n: Scaffolding for emitting known events\" (#15905) at dotnet/coreclr","RelatedBody":"This PR is marked WIP because it depends on https://github.com/dotnet/coreclr/pull/15873. This branch is branched off of `swgillespie/event-spec-foundation` so you can ignore the first two commits of this PR (they are from https://github.com/dotnet/coreclr/pull/15873).\r\n\r\nThis PR implements the [Firing Events section of the standalone GC eventing spec](https://github.com/dotnet/coreclr/blob/master/Documentation/design-docs/standalone-gc-eventing.md#firing-events) and verifies that it works by porting the `GCAllocationTick_V3` event to travel across the GC/EE interface.\r\n\r\nThis PR elaborates on a couple of ideas from the spec:\r\n\r\n1. Events known to the GC are listed in the new `src\\gc\\gcevents.def` file, where the `KNOWN_EVENT` xmacro is used to describe the event, its provider, its level, and its keyword set, like here: https://github.com/swgillespie/coreclr/blob/557fcb67cd64ba845732c22ea0c39201ea236781/src/gc/gcevents.def#L8\r\n2. From the information supplied in the `KNOWN_EVENT` xmacro, an \"event descriptor\" is generated that describes the known event - it's name, provider, level, and keywords. The `EVENT_ENABLED` macro can be used to query whether or not an event is enabled, like this usage in gc.cpp:\r\n\r\n```c++\r\n            // Unfortunately some of the ETW macros do not check whether the ETW feature is enabled.\r\n            // The ones that do are much less efficient.\r\n            if (EVENT_ENABLED(GCAllocationTick_V3))\r\n            {\r\n                AllocationKind allocation_kind = gen_number == 0 ? AllocationKind_Small : AllocationKind_Large;\r\n                FIRE_EVENT(GCAllocationTick_V3,\r\n                    etw_allocation_running_amount[etw_allocation_index],\r\n                    allocation_kind,\r\n                    heap_number,\r\n                    acontext->alloc_ptr);\r\n            }\r\n```\r\n\r\n3. The `FIRE_EVENT` macro accepts the name of the event and any parameters that the event accepts. `FIRE_EVENT` ultimately fires the event by invoking the GC/EE interface to send the event across the interface boundary.\r\n\r\nI chose not to re-use the existing `FireEtw*Event` and `ETW_EVENT_ENABLED` macros because I am hoping for the upcoming series of changes (porting events to use this new system) to be done incrementally. It would be difficult to be in a \"half and half\" situation where one macro delegates to ETW or `GCEventState` depending on the event. I think that it is very reasonable to convert all usages of `EVENT_ENABLED` and `FIRE_EVENT` to `FireEtw*Event` and `ETW_EVENT_ENABLED` in the future once everything has moved over to the new system."},{"Id":"7130060302","Type":"PullRequestEvent","CreatedAt":"2018-01-22T03:45:37","Actor":"swgillespie","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/15957","RelatedDescription":"Opened pull request \"[Local GC] FEATURE_EVENT_TRACE 2/n: Scaffolding for emitting known events \" (#15957) at dotnet/coreclr","RelatedBody":"Non-WIP version of https://github.com/dotnet/coreclr/pull/15905, with the code porting `GCAllocationTick_V3` removed and the branch renamed. This PR still depends on https://github.com/dotnet/coreclr/pull/15873 and currently branches off that branch."},{"Id":"7129826433","Type":"PullRequestEvent","CreatedAt":"2018-01-22T02:03:52","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/15956","RelatedDescription":"Merged pull request \"Remove AppDomainLeaks configuration option\" (#15956) at dotnet/coreclr","RelatedBody":"Removed all usages of AppDomainLeaks configuration option and\r\nCHECK_APP_DOMAIN_LEAKS feature\r\n\r\nFix #12094"},{"Id":"7129826426","Type":"IssuesEvent","CreatedAt":"2018-01-22T02:03:52","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/12094","RelatedDescription":"Closed issue \"Remove AppDomainLeaks configuration option\" (#12094) at dotnet/coreclr","RelatedBody":"CoreCLR has a configuration option, `AppDomainLeaks`, which enables some additional assertions throughout the codebase about app domains. These checks tend to be expensive and have not added much value over the years - they have been disabled in the full .NET Framework for over 10 years. It would be great if we could just remove it from the codebase altogether.\r\n\r\nI think this could be a good community issue, if anyone's interested in getting their hands a little dirty throughout the VM. You can see the places that are using the `AppDomainLeaks` configuration check (https://github.com/dotnet/coreclr/blob/master/src/vm/eeconfig.h#L536) and start from there. Once all uses are removed, it should be possible to remove the `CHECK_APP_DOMAIN_LEAKS` feature define as well.\r\n\r\nSee also: https://github.com/dotnet/coreclr/issues/12075#issuecomment-306274175 https://github.com/dotnet/coreclr/pull/11379#issuecomment-299080463"},{"Id":"7129297707","Type":"PullRequestEvent","CreatedAt":"2018-01-21T20:53:07","Actor":"antofik","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/15956","RelatedDescription":"Opened pull request \"Remove AppDomainLeaks configuration option\" (#15956) at dotnet/coreclr","RelatedBody":"Removed all usages of AppDomainLeaks configuration option and\r\nCHECK_APP_DOMAIN_LEAKS feature\r\n\r\nFix #12094"}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"7129917230","Type":"IssuesEvent","CreatedAt":"2018-01-22T02:43:48","Actor":"wli3","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/8367","RelatedDescription":"Closed issue \"The dotnet install command help text is missing descriptions of options\" (#8367) at dotnet/cli","RelatedBody":"The `dotnet install` command help text is missing descriptions of its various options (although they do show up when you use `dotnet install` incorrectly):\r\n\r\n```\r\nC:\\Users\\daroth\\Desktop\\test>dotnet install --help\r\nUsage: dotnet install [options] [command]\r\n\r\nOptions:\r\n  -h, --help   Show help information.\r\n\r\nCommands:\r\n  tool <packageId>   Install tool\r\n\r\nC:\\Users\\daroth\\Desktop\\test>dotnet install tool dotnet-dev-certs -v 2.1.0-preview1-28042\r\nUnrecognized command or argument '-v'\r\nUnrecognized command or argument '2.1.0-preview1-28042'\r\nUsage: dotnet install tool [options] <packageId>\r\n\r\nArguments:\r\n  <packageId>   Package Id in NuGet\r\n\r\nOptions:\r\n  --version         Version of the package in NuGet\r\n  --configfile      NuGet configuration file\r\n  -f, --framework   Target framework to publish for. The target framework has to be specified in the project file.\r\n  -h, --help        Show help information.\r\n\r\nC:\\Users\\daroth\\Desktop\\test>dotnet --info\r\n.NET Command Line Tools (2.2.0-preview1-007925)\r\n\r\nProduct Information:\r\n Version:            2.2.0-preview1-007925\r\n Commit SHA-1 hash:  ff4299241c\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.16299\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.0-preview1-007925\\\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.1.0-preview1-26110-02\r\n  Build    : 77152705cd56e7d89f52585959ec3559d91084c4\r\n```\r\n\r\n"},{"Id":"7129912062","Type":"IssuesEvent","CreatedAt":"2018-01-22T02:41:35","Actor":"wli3","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/8370","RelatedDescription":"Closed issue \"[tools] Add to bundledversions.props\" (#8370) at dotnet/cli","RelatedBody":"<NETCorePlatformsImplicitPackageVersion>2.0.1</NETCorePlatformsImplicitPackageVersion>\r\n\r\nhttps://github.com/dotnet/sdk/pull/1843/files#r160794715\r\nhttps://github.com/dotnet/sdk/pull/1843/files#r160809994\r\n\r\n"},{"Id":"7129910198","Type":"IssuesEvent","CreatedAt":"2018-01-22T02:40:45","Actor":"wli3","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/8395","RelatedDescription":"Closed issue \"[tools] Require -g to install global tools\" (#8395) at dotnet/cli","RelatedBody":"-g, --global : Install user wide"},{"Id":"7129570082","Type":"IssuesEvent","CreatedAt":"2018-01-21T23:36:49","Actor":"wli3","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/8438","RelatedDescription":"Closed issue \"dotnet test with --diag option throws ArgumentOutOfRangeException\" (#8438) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\n\r\nClone https://github.com/AvaloniaUI/Avalonia and run:\r\n\r\n```\r\ndotnet test \"./tests/Avalonia.Skia.RenderTests/Avalonia.Skia.RenderTests.csproj\" --framework netcoreapp2.0 --configuration -d diag.txt\r\n```\r\n\r\n\r\n## Expected  behavior\r\n\r\nA diagnostic log created, or at least an error explaining what I'm doing wrong.\r\n\r\n## Actual behavior\r\n\r\n```\r\nSystem.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\r\nParameter name: index\r\n   at System.ThrowHelper.ThrowArgumentOutOfRange_IndexException()\r\n   at System.SZArrayHelper.get_Item[T](Int32 index)\r\n   at System.Linq.Enumerable.ElementAt[TSource](IEnumerable`1 source, Int32 index)\r\n   at Microsoft.DotNet.Cli.Telemetry.TopLevelCommandNameAndOptionToLog.AllowList(ParseResult parseResult)\r\n   at Microsoft.DotNet.Cli.Telemetry.TelemetryFilter.Filter(Object objectToFilter)\r\n   at Microsoft.DotNet.Cli.Utils.TelemetryEventEntry.SendFiltered(Object o)\r\n   at Microsoft.DotNet.Cli.Program.ProcessArgs(String[] args, ITelemetry telemetryClient)\r\n   at Microsoft.DotNet.Cli.Program.Main(String[] args)\r\n```\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n```\r\n> dotnet --info\r\n.NET Command Line Tools (2.1.4)\r\n\r\nProduct Information:\r\n Version:            2.1.4\r\n Commit SHA-1 hash:  5e8add2190\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.16299\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.4\\\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.5\r\n  Build    : 17373eb129b3b05aa18ece963f8795d65ef8ea54\r\n```"},{"Id":"7129497859","Type":"IssuesEvent","CreatedAt":"2018-01-21T22:52:03","Actor":"grokys","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/8438","RelatedDescription":"Opened issue \"dotnet test with --diag option throws ArgumentOutOfRangeException\" (#8438) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\n\r\nClone https://github.com/AvaloniaUI/Avalonia and run:\r\n\r\n```\r\ndotnet test \"./tests/Avalonia.Skia.RenderTests/Avalonia.Skia.RenderTests.csproj\" --framework netcoreapp2.0 --configuration -d diag.txt\r\n```\r\n\r\n\r\n## Expected  behavior\r\n\r\nA diagnostic log created, or at least an error explaining what I'm doing wrong.\r\n\r\n## Actual behavior\r\n\r\n```\r\nSystem.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\r\nParameter name: index\r\n   at System.ThrowHelper.ThrowArgumentOutOfRange_IndexException()\r\n   at System.SZArrayHelper.get_Item[T](Int32 index)\r\n   at System.Linq.Enumerable.ElementAt[TSource](IEnumerable`1 source, Int32 index)\r\n   at Microsoft.DotNet.Cli.Telemetry.TopLevelCommandNameAndOptionToLog.AllowList(ParseResult parseResult)\r\n   at Microsoft.DotNet.Cli.Telemetry.TelemetryFilter.Filter(Object objectToFilter)\r\n   at Microsoft.DotNet.Cli.Utils.TelemetryEventEntry.SendFiltered(Object o)\r\n   at Microsoft.DotNet.Cli.Program.ProcessArgs(String[] args, ITelemetry telemetryClient)\r\n   at Microsoft.DotNet.Cli.Program.Main(String[] args)\r\n```\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n```\r\n> dotnet --info\r\n.NET Command Line Tools (2.1.4)\r\n\r\nProduct Information:\r\n Version:            2.1.4\r\n Commit SHA-1 hash:  5e8add2190\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.16299\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.4\\\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.5\r\n  Build    : 17373eb129b3b05aa18ece963f8795d65ef8ea54\r\n```"},{"Id":"7127834865","Type":"PullRequestEvent","CreatedAt":"2018-01-21T03:08:44","Actor":"wli3","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/8437","RelatedDescription":"Opened pull request \"WIP [tools]MacOs HighSierra Fallback\" (#8437) at dotnet/cli","RelatedBody":"https://github.com/dotnet/cli/issues/8436"},{"Id":"7127376175","Type":"IssuesEvent","CreatedAt":"2018-01-20T20:58:41","Actor":"dasMulli","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/8436","RelatedDescription":"Opened issue \"[tool] Cannot install tool cerated using PackAsTool=true\" (#8436) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\n\r\n* Using `2.2.0-preview1-008000` on high sierra\r\n* Create a console app targeting `netcoreapp2.1` and set `PackAsTool` property to `true`. (`sayhi.csproj`)\r\n* Create a nuget.config file to add `dotnet-core` feed and a local folder for the produced nupkg file.\r\n* Use `dotnet pack` to create a nupkg file from the tool app.\r\n* Use `dotnet install tool -g --configfile $(pwd)/nuget.config sayhi`\r\n\r\n## Expected  behavior\r\n\r\nInstalls the tool\r\n\r\n## Actual behavior\r\n\r\nError that the package is not compatible with `netcoreapp2.1 (.NETCoreApp,Version=v2.1) / osx.10.13-x64` but only supports `netcoreapp2.1 (.NETCoreApp,Version=v2.1) / any`:\r\n\r\n```\r\n$ dotnet install tool -g --configfile $(pwd)/nuget.config sayhi\r\nInstall failed. Failed to download package:\r\nNuGet returned:\r\n\r\nFailed to restore package. \r\nWorkingDirectory: \r\nArguments: restore /var/folders/b1/p_sdf_v932sfdvr0ccxt2gd80000gn/T/4zstq4rl.ya5/jaj1vnsm.wf1.csproj --configfile /Users/martin/tmp/toolstest/sayhi/nuget.config --runtime osx.10.13-x64 /p:BaseIntermediateOutputPath=\\\"/Users/martin/.dotnet/tools/sayhi/tn02uk3w.ykb\\\"\r\nOutput:   Restoring packages for /var/folders/b1/p_sdf_v932sfdvr0ccxt2gd80000gn/T/4zstq4rl.ya5/jaj1vnsm.wf1.csproj...\r\n  Installing Microsoft.NETCore.Platforms 2.1.0-preview1-26116-01.\r\n  Installing sayhi 1.0.0.\r\n/var/folders/b1/p_sdf_v932sfdvr0ccxt2gd80000gn/T/4zstq4rl.ya5/jaj1vnsm.wf1.csproj : error NU1202: Package sayhi 1.0.0 is not compatible with netcoreapp2.1 (.NETCoreApp,Version=v2.1) / osx.10.13-x64. Package sayhi 1.0.0 supports: netcoreapp2.1 (.NETCoreApp,Version=v2.1) / any\r\n  Restore failed in 1.26 sec for /var/folders/b1/p_sdf_v932sfdvr0ccxt2gd80000gn/T/4zstq4rl.ya5/jaj1vnsm.wf1.csproj.\r\n```\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n```\r\n.NET Command Line Tools (2.2.0-preview1-008000)\r\n\r\nProduct Information:\r\n Version:            2.2.0-preview1-008000\r\n Commit SHA-1 hash:  02a98d4e63\r\n\r\nRuntime Environment:\r\n OS Name:     Mac OS X\r\n OS Version:  10.13\r\n OS Platform: Darwin\r\n RID:         osx.10.12-x64\r\n Base Path:   /usr/local/share/dotnet/sdk/2.2.0-preview1-008000/\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.1.0-preview1-26116-04\r\n  Build    : eeb3a84e2142aba791fe003564b8afd048c45ff9\r\n```\r\n\r\ncc @wli3 "},{"Id":"7126086196","Type":"PullRequestEvent","CreatedAt":"2018-01-20T05:25:40","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/8166","RelatedDescription":"Merged pull request \"Skipping GenerateResxSource task when building in design time build.\" (#8166) at dotnet/cli","RelatedBody":"Skipping GenerateResxSource task when building in design time build. This unblocks requiring a full build of the CLI before using VS.\r\n"},{"Id":"7126085689","Type":"PullRequestEvent","CreatedAt":"2018-01-20T05:25:13","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/8429","RelatedDescription":"Merged pull request \"Insert NuGet Build 4.6.0-rtm-4825 into cli\" (#8429) at dotnet/cli","RelatedBody":"Insert NuGet Build 4.6.0-rtm-4825 into cli release/2.1.1xx branch"}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"7120169085","Type":"IssuesEvent","CreatedAt":"2018-01-18T23:43:26","Actor":"ericstj","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/626","RelatedDescription":"Opened issue \"Trimming will break when SDK stops running RunResolvePackageDependencies\" (#626) at dotnet/standard","RelatedBody":"I chatted with @nguerrera and he mentioned that SDK will no longer run RunResolvePackageDependencies as part of the build for perf reasons.\r\n\r\nWe depend on the PackageDependencies item in trimming in order to construct the package graph and will no longer get them.\r\n\r\nWe should update the target sequencing so that we run RunResolvePackageDependencies ourselves in order to get these items.  We should be careful when doing this to not regress the non-SDK case which may not have the RunResolvePackageDependencies target."}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"7130280255","Type":"IssuesEvent","CreatedAt":"2018-01-22T05:30:11","Actor":"Thaina","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/26504","RelatedDescription":"Opened issue \"Could we have extension method AsAsyncEnumerable for IEnumerable<Task<T>> ?\" (#26504) at dotnet/corefx","RelatedBody":"It might be a shorthand for\r\n\r\n```C#\r\nvar tasks = new[] { task0,task1,task2 }\r\nvar results = await tasks.Select((task) => task.ToAsyncEnumerable()).SelectMany((task) => task).ToArray();\r\n```\r\n\r\nInto\r\n\r\n```C#\r\nvar tasks = new[] { task0,task1,task2 }\r\nvar results = await tasks.AsAsyncEnumerable().ToArray();\r\n```"},{"Id":"7130047992","Type":"IssuesEvent","CreatedAt":"2018-01-22T03:40:27","Actor":"davidsh","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/26503","RelatedDescription":"Closed issue \"Feature to work-around HttpClient violating IDisposable Pattern\" (#26503) at dotnet/corefx","RelatedBody":"Could some type of a HttpClient Pool be implemented? That way when we have several requests to a root path, we get one reusable HttpClient Context. And we aren't tempted to change the initialized Url. Which causes issues that are difficult to track down.\r\n\r\n\r\n```\r\n// Notice that IDisposable is not implemented here!\r\npublic interface HttpClientHandle\r\n{\r\n    HttpRequestHeaders DefaultRequestHeaders { get; }\r\n    Uri BaseAddress { get; set; }\r\n    // ...\r\n    // All the other public property and method prototypes from peeking at HttpClient\r\n}\r\n\r\npublic static class HttpClientPool\r\n{\r\n    public static ConditionalWeakTable<Uri, HttpClientHander> _httpClientsPool;\r\n\r\n    static HttpClientPool()\r\n    {\r\n        _httpClientsPool = new ConditionalWeakTable<Uri, HttpClientHander>();\r\n        SetupGlobalPoolFinalizer();\r\n    }\r\n\t\r\n    public static HttpClientHandle GetHttpClientHandle(Uri baseUrl)\r\n    {\r\n        HttpClientHander httpClient = _httpClientsPool.GetOrCreateValue(baseUrl);\r\n        httpClient.ResetDisposelTimeout();\r\n        httpClient.BaseAddress = baseUrl;\r\n\r\n        return httpClient;\r\n    }\r\n\t\r\n    private static void SetupGlobalPoolFinalizer()\r\n    {\r\n        AppDomain.CurrentDomain.ProcessExit +=\r\n            (sender, eventArgs) => { FinalizeGlobalPool(); };\r\n    }\r\n\r\n    private static void FinalizeGlobalPool()\r\n    {\r\n        foreach (var client in _httpClientsPool)\r\n            client.Value.PerformDispose();\r\n\r\n        _httpClientsPool.Clear();\r\n    }\r\n}\r\n\r\ninternal class HttpClientHander : HttpClient, HttpClientHandle, IDisposable\r\n{\r\n    private DateTime _delayFinalization = DateTime.MinValue;\r\n    private bool _isDisposed = false;\r\n\r\n    void IDisposable.Dispose()\r\n    {\r\n    }\r\n\r\n    protected override void Dispose(bool disposing)\r\n    {\r\n        if (_isDisposed)\r\n            base.Dispose(disposing);\r\n    }\r\n\r\n    internal void PerformDispose()\r\n    {\r\n        _isDisposed = true;\r\n        GC.SuppressFinalize(this);\r\n\r\n        base.Dispose();\r\n    }\r\n\t\r\n    internal void ResetDisposelTimeout()\r\n    {\r\n        _delayFinalization = DateTime.MinValue;\r\n    }\r\n\r\n    protected bool ShouldDelayDisposal()\r\n    {\r\n        if (_delayFinalization == DateTime.MinValue)\r\n            _delayFinalization = DateTime.UtcNow;\r\n        return DateTime.UtcNow.Subtract(_delayFinalization) < base.Timeout;\r\n    }\r\n\r\n    ~HttpClientHander()\r\n    {\r\n        if (ShouldDelayDisposal())\r\n            GC.ReRegisterForFinalize(this);\r\n    }\r\n}\r\n```\r\n\r\nDeclaring that the code example shown here is under the dotnet/corefx license - MIT. And it is desired that this code, or any changed versions thereof, be contributed to dotnet/corefx if it is found useful."},{"Id":"7129895735","Type":"IssuesEvent","CreatedAt":"2018-01-22T02:34:45","Actor":"tamusjroyce","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/26503","RelatedDescription":"Opened issue \"Feature to work-around HttpClient violating IDisposable Pattern\" (#26503) at dotnet/corefx","RelatedBody":"Could some type of a HttpClient Pool be implemented? That way when we have several requests to a root path, we get one reusable HttpClient Context. And we aren't tempted to change the initialized Url. Which causes issues that are difficult to track down.\r\n\r\n\r\n```\r\n// Notice that IDisposable is not implemented here!\r\npublic interface HttpClientHandle\r\n{\r\n    HttpRequestHeaders DefaultRequestHeaders { get; }\r\n    Uri BaseAddress { get; set; }\r\n    // ...\r\n    // All the other method prototypes from peeking at HttpClient\r\n}\r\n\r\npublic static class HttpClientPool\r\n{\r\n    public static ConditionalWeakTable<Uri, HttpClientHandler> _httpClientsPool;\r\n\r\n    static HttpClientPool()\r\n    {\r\n        _httpClientsPool = new ConditionalWeakTable<Uri, HttpClientHandler>();\r\n        SetupGlobalPoolFinalizer();\r\n    }\r\n\t\r\n    public static HttpClientHandle GetHttpClientHandle(Uri baseUrl)\r\n    {\r\n        HttpClientHander httpClient = _httpClientsPool.GetOrCreateValue(baseUrl);\r\n        httpClient.ResetDisposelTimeout();\r\n        httpClient.BaseAddress = baseUrl;\r\n\r\n        return httpClient;\r\n    }\r\n\t\r\n    private static void SetupGlobalPoolFinalizer()\r\n    {\r\n        AppDomain.CurrentDomain.ProcessExit +=\r\n            (sender, eventArgs) => { FinalizeGlobalPool(); };\r\n    }\r\n\r\n    private static void FinalizeGlobalPool()\r\n    {\r\n        foreach (var client in _httpClientsPool)\r\n            client.Value.PerformDispose();\r\n\r\n        _httpClientsPool.Clear();\r\n    }\r\n}\r\n\r\ninternal class HttpClientHander : HttpClient, HttpClientHandle, IDisposable\r\n{\r\n    private DateTime _delayFinalization = DateTime.MinValue;\r\n    private bool _isDisposed = false;\r\n\r\n    void IDisposable.Dispose()\r\n    {\r\n    }\r\n\r\n    protected override void Dispose(bool disposing)\r\n    {\r\n        if (_isDisposed)\r\n            base.Dispose(disposing);\r\n    }\r\n\r\n    internal void PerformDispose()\r\n    {\r\n        _isDisposed = true;\r\n        GC.SuppressFinalize(this);\r\n\r\n        base.Dispose();\r\n    }\r\n\t\r\n    internal void ResetDisposelTimeout()\r\n    {\r\n        _delayFinalization = DateTime.MinValue;\r\n    }\r\n\r\n    protected bool ShouldDelayDisposal()\r\n    {\r\n        if (_delayFinalization == DateTime.MinValue)\r\n            _delayFinalization = DateTime.UtcNow;\r\n        return DateTime.UtcNow.Subtract(_delayFinalization) < base.Timeout;\r\n    }\r\n\r\n    ~HttpClientHander()\r\n    {\r\n        if (ShouldDelayDisposal())\r\n            GC.ReRegisterForFinalize(this);\r\n    }\r\n}\r\n```"}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"7129025526","Type":"IssuesEvent","CreatedAt":"2018-01-21T18:08:37","Actor":"jcouv","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/24366","RelatedDescription":"Closed issue \"New features proposal for generics and other\" (#24366) at dotnet/roslyn","RelatedBody":"1. Casting to a generic class/interface/struct without specifying generic types + ability to call its non-generic methods without using interfaces:\r\n```\r\nclass Foo<T, U>\r\n{\r\n    public bool Test() => true;\r\n    public T GenericFoo() => default(T);\r\n    public void GenericFoo(T value) { }\r\n}\r\n\r\nobject obj = new Foo<int>();\r\n((Foo<,>)obj).Test(); //GenericFoo methods of class Foo<,> should not be available in this case.\r\nFoo<,> foo = (Foo<,>)obj;\r\n((Foo<int,byte>)foo).GenericFoo()\r\n```\r\n\r\n\r\n\r\n2. Support of Delegate and Enum generic constraints:\r\n\r\n`class Foo<T> where T: Delegate`\r\n\r\n\r\n3. Support of generics with generic parameter, at least one level:\r\n\r\n`class Foo<T<U>>`\r\nBut I very much suspect that it's not possible or too hard to implement.\r\n\r\n4. Support of 'var' for field declarations:\r\n\r\n`public static var Foo = 0;\r\n`\r\n\r\n5. Try/Catch/Finally without explicit block declaration:\r\n\r\n```\r\ntry\r\n{\r\n    Foo();\r\n    return true;\r\n}\r\ncatch return false;\r\n\r\n```\r\n\r\n6. Rethrow operator for saving the original stacktrace:\r\n\r\n```\r\ntry\r\n{\r\n\r\n}\r\ncatch(Exception ex)\r\n{\r\n    rethrow ex; // bad example, but it's the same as just \"throw;\" in this case.\r\n}\r\n\r\n```\r\n\r\n7. memberof operator for accessing Type members metadata without using reflection:\r\n\r\n```\r\nclass Foo\r\n{\r\n    public int Bar => this.bar;\r\n    private int bar;\r\n    public int this[string key] => 0;\r\n\r\n    public MemberInfo[] GetMembers<T>(bool someValue)\r\n    {\r\n        MethodInfo mi = memberof(this.ToString); // no need to cast\r\n        return new []\r\n        { \r\n             memberof(this.Bar), \r\n             memberof(this.bar),\r\n             memberof(this.GetMembers<T>(bool)), // specifying parameter types in case of overloading.\r\n             memberof(string.GetEnumerator), // It works like nameof operator\r\n             memberof(this[string]) // even indexers..\r\n        };\r\n    }\r\n}\r\n```\r\nAlso implementation must not use the search by function name using strings or something like, because it won't work after code obfuscation.\r\n\r\n"},{"Id":"7128905453","Type":"IssuesEvent","CreatedAt":"2018-01-21T16:55:47","Actor":"DenisKudelin","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/24366","RelatedDescription":"Opened issue \"New features proposal for generics and other\" (#24366) at dotnet/roslyn","RelatedBody":"1. Casting to a generic class/interface/struct without specifying generic types + ability to call its non-generic methods without using interfaces:\r\n`\r\nclass Foo<T, U>\r\n{\r\n    public bool Test() => true;\r\n    public T GenericTest() => default(T);\r\n    public void GenericTest(T value) { }\r\n}\r\n\r\nobject obj = new Foo<int>();\r\nFoo<,> foo = ((Foo<,>)obj).Test();\r\n`\r\nGenericTest methods of class Foo<> should not be available in this case.\r\n\r\n2. Support of Delegate and Enum generic constraints:\r\n`\r\nclass Foo<T> where T: Delegate\r\n`\r\n\r\n3. Support of generics with generic parameter, at least one level:\r\n`\r\nclass Foo<T<U>>\r\n`\r\n\r\n4. Support of 'var' for field declarations:\r\n`\r\npublic static var Foo = 0;\r\n`\r\n\r\n5. Try/Catch/Finally without explicit block declaration:\r\n`\r\ntry\r\n{\r\n    Foo();\r\n    return true;\r\n}\r\ncatch return false;\r\n`\r\n\r\n6. Rethrow operator to save the original stacktrace:\r\n`\r\ntry\r\n{\r\n\r\n}\r\ncatch(Exception ex)\r\n{\r\n    rethrow ex; // bad example, but it's the same as just \"throw;\" in this case.\r\n}\r\n`\r\n\r\n7. memberof operator for accessing Type members metadata without using reflection:\r\n`\r\nclass Foo\r\n{\r\n    public int Bar => this.bar;\r\n    private int bar;\r\n\r\n    public MemberInfo[] GetMembers(bool someValue)\r\n    {\r\n        return new []\r\n        { \r\n             memberof(this.Bar), \r\n             memberof(this.bar),\r\n             memberof(this.GetMembers(bool)),\r\n             memberof(string.GetEnumerator)\r\n        };\r\n    }\r\n}\r\n`\r\n"},{"Id":"7128238443","Type":"IssuesEvent","CreatedAt":"2018-01-21T09:25:37","Actor":"vsfeedback","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/24365","RelatedDescription":"Opened issue \"Code formatting not working using open directory\" (#24365) at dotnet/roslyn","RelatedBody":"I cloned a git repo containing a .NET Core project.  I used Open Directory in VS 2017 15.5.3 and 15.6.0 Preview 2.0, and both had the same issue.\nWhen editing code, automatic formatting, such as indentation and brace positioning did not function correctly, either indenting too deeply or not indenting at all.  At least some of the code used framework names (Int64) and some used built-in names (long).\nWhen I added an empty VS solution and then added the project to it, the auto-formatting started working.\n\n_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/181937/code-formatting-not-working-using-open-directory.html\nVSTS ticketId: 551475_\n_These are the original issue comments:_\n(no comments)\n_These are the original issue solutions:_\n(no solutions)"},{"Id":"7128233760","Type":"IssuesEvent","CreatedAt":"2018-01-21T09:21:48","Actor":"jcouv","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/21518","RelatedDescription":"Closed issue \"\"CS8306: Tuple element name inferred\" reported for conversion\" (#21518) at dotnet/roslyn","RelatedBody":"Compile with language version 7.0 with 7.1 compiler:\r\n```\r\nclass C\r\n{\r\n    static void F((object, object) t)\r\n    {\r\n    }\r\n    static void G(object o)\r\n    {\r\n        var t = (1, o);\r\n        F(t);\r\n    }\r\n}\r\n```\r\n`(9,11): error CS8306: Tuple element name 'o' is inferred. Please use language version 7.1 or greater to access an element by its inferred name.`"},{"Id":"7128167332","Type":"PullRequestEvent","CreatedAt":"2018-01-21T08:24:26","Actor":"eatdrinksleepcode","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/24364","RelatedDescription":"Opened pull request \"Update docs and add logging for x-plat contributors\" (#24364) at dotnet/roslyn","RelatedBody":"The `build.sh` script was added in November and is a much easier starting point for new contributors than the various commands previously recommended by the docs.\r\n\r\nA bit of additional logging was also added to `obtain_dotnet.sh`, to help new contributors understand how the build is interacting with any existing dotnet installations (and particularly to help allay fears about the error message generated by `dotnet version` as part of that script, when the system installation does not include the required version)."},{"Id":"7128132894","Type":"PullRequestEvent","CreatedAt":"2018-01-21T07:54:00","Actor":"CyrusNajmabadi","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/24362","RelatedDescription":"Opened pull request \"Move checking of structure-options to a common location (so it will be picked up by all roslyn languages).\" (#24362) at dotnet/roslyn","RelatedBody":"Discovered during https://github.com/Microsoft/visualfsharp/pull/4227\r\n\r\nCurrently, Roslyn has options to control outlining and structure-guide behavior for C# and VB.  However, these options can be moved to a core location so that they can be used in F# and TS/JS as well."}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"7127828785","Type":"IssuesEvent","CreatedAt":"2018-01-21T03:02:57","Actor":"morganbr","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/issues/5272","RelatedDescription":"Opened issue \"Implement localloc opcode for WebAssembly\" (#5272) at dotnet/corert","RelatedBody":"Implement the [localloc opcode](https://msdn.microsoft.com/en-us/library/system.reflection.emit.opcodes.localloc(v=vs.110).aspx) for WebAssembly, which allocates the specified amount of memory on the local stack and frees it on return. It also zeroes that memory if initlocals is true (which it usually is). This could potentially be implemented either by:\r\n1. Doing bookkeeping with the managed shadow stack (including incorporating that into HandleCall so callees end up properly on top of the localloced memory).\r\n2. Using LLVM's alloca to allocate it on the native stack. This only works if there won't be GC references from the allocated memory, but I don't think it's possible to.\r\n\r\nThe method to fill in is:\r\nhttps://github.com/dotnet/corert/blob/4ae63bb273535562b5138ab7dc65af1f2b6cb0f5/src/ILCompiler.WebAssembly/src/CodeGen/ILToWebAssemblyImporter.cs#L1868\r\n"},{"Id":"7127654435","Type":"PullRequestEvent","CreatedAt":"2018-01-21T00:23:16","Actor":"morganbr","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5207","RelatedDescription":"Merged pull request \"force alignment for all stack allocations in WebAssembly\" (#5207) at dotnet/corert","RelatedBody":"@morganbr \r\n\r\nFix #5176 \r\nI think I've got all of the spots I'm supposed to align, I purposefully didn't do alignment for sizeof type operations because that didn't look right."},{"Id":"7127654432","Type":"IssuesEvent","CreatedAt":"2018-01-21T00:23:16","Actor":"morganbr","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/issues/5176","RelatedDescription":"Closed issue \"Align shadow stack\" (#5176) at dotnet/corert","RelatedBody":"The WebAssembly shadow stack currently is only 1-byte aligned. However, parts of the runtime may require alignment and memory operations would likely be more efficient if types were aligned (that is: 3+ byte types start at a multiple of 4, 2 byte types start at a multiple of 2).\r\n\r\nThe methods that would need to handle this would likely be ```ILImporter.GetTotalLocalOffset```, ```ILImporter.GetTotalRealLocalOffset``` ```ILImporter.GetTotalParameterOffset```, ```ILImporter.GetArgSizeAndOffsetAtIndex```, ```ILImporter.GetLocalSizeAndOffsetAtIndex```,  ```ILImporter.GetSpillSizeAndOffsetAtIndex```, and ```ILImporter.HandleCall``` (and any other usages of ```GetElementSize()``` with the shadow stack I missed)."},{"Id":"7127073327","Type":"PullRequestEvent","CreatedAt":"2018-01-20T17:38:35","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5271","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#5271) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7126942115","Type":"PullRequestEvent","CreatedAt":"2018-01-20T16:16:18","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5270","RelatedDescription":"Merged pull request \"Merge master to nmirror\" (#5270) at dotnet/corert","RelatedBody":""},{"Id":"7126941854","Type":"PullRequestEvent","CreatedAt":"2018-01-20T16:16:09","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5270","RelatedDescription":"Opened pull request \"Merge master to nmirror\" (#5270) at dotnet/corert","RelatedBody":""},{"Id":"7126941389","Type":"PullRequestEvent","CreatedAt":"2018-01-20T16:15:51","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5269","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#5269) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7126286278","Type":"PullRequestEvent","CreatedAt":"2018-01-20T08:14:26","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5268","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#5268) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7126209526","Type":"PullRequestEvent","CreatedAt":"2018-01-20T07:14:16","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5268","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#5268) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7126208365","Type":"PullRequestEvent","CreatedAt":"2018-01-20T07:13:16","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5267","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#5267) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"}],"ResultType":"GitHubEvent"},"SDK":{"Events":[{"Id":"7130101805","Type":"IssuesEvent","CreatedAt":"2018-01-22T04:04:25","Actor":"wli3","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/issues/1531","RelatedDescription":"Closed issue \"NUGET Documentation Xml file no more restored\" (#1531) at dotnet/sdk","RelatedBody":"I'm not sure I'm posting the issue in the right repo, please help me.\r\n\r\nMy issue is quite simple, if I create a new project using VS2017 using the \"old\" csproj when I add a package reference to any nuget package (take the \"microsoft.aspnetcore.mvc.core\" package as example, but it's not relevant, the issue is always present with any packages) after building the project I can find into my output folder both **Microsoft.AspNetCore.Mvc.Core.dll** and **Microsoft.AspNetCore.Mvc.Core.xml** (together with my dll)\r\n\r\nIf I migrate the csproj to the \"Microsoft.dotnet.sdk\", this behaviour changes and I'm no more able to get the XML into my output folder.\r\n\r\nIt doesn't matter the framework of the project, it's all about the \"old\" or \"new\" csproj format, I think it's correlated to the tool used to restore.\r\n\r\nI read a lot in deep the nuget spec documentation and making some tricks now i'm able to produce my own nuget packages including the Documentation XML as Content (ye, I dislike it too but it's the only way I found out) and doing this way, when I reference that package the xml file is added into the project as link, unfotunately it is not copied into the output folder and it is not possible to mark as \"Copy Always\" because doing this way it adds into the csproj its full path which contains the version :-(\r\nAnd, even if this technique could work, it could be applied to my own packages, not for all the existing ones.\r\n\r\nPlease, point me in the right direction to address this problem, I really need to have the XML contained into the nuget package in the output folder of my main project.\r\n"},{"Id":"7129910803","Type":"IssuesEvent","CreatedAt":"2018-01-22T02:41:01","Actor":"wli3","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/sdk/issues/1853","RelatedDescription":"Reopened issue \"[tools] Pack should glob result of publish or not\" (#1853) at dotnet/sdk","RelatedBody":"https://github.com/dotnet/sdk/pull/1843#discussion_r161075634\r\n\r\nNeed further discussion \r\n\r\n>dasMulli\r\nI think I suggested ResolvedFileToPublish previously but having doubts now. It could by PreserveNewest with some modification already done in the publish output or users could have targets with <Copy> stuff in there. (or even post-built steps using xcopy execute).\r\nThe most \"correct\" but also slowest would be to do the same as the web sdk does for publishing - clean an intermediate directory and publish to it, then use a glob to harvest this clean publish. e.g. like #1846 (comment)"},{"Id":"7129910540","Type":"IssuesEvent","CreatedAt":"2018-01-22T02:40:54","Actor":"wli3","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/issues/1853","RelatedDescription":"Closed issue \"[tools] Pack should glob result of publish or not\" (#1853) at dotnet/sdk","RelatedBody":"https://github.com/dotnet/sdk/pull/1843#discussion_r161075634\r\n\r\nNeed further discussion \r\n\r\n>dasMulli\r\nI think I suggested ResolvedFileToPublish previously but having doubts now. It could by PreserveNewest with some modification already done in the publish output or users could have targets with <Copy> stuff in there. (or even post-built steps using xcopy execute).\r\nThe most \"correct\" but also slowest would be to do the same as the web sdk does for publishing - clean an intermediate directory and publish to it, then use a glob to harvest this clean publish. e.g. like #1846 (comment)"},{"Id":"7125844722","Type":"PullRequestEvent","CreatedAt":"2018-01-20T02:09:35","Actor":"tannergooding","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/1876","RelatedDescription":"Merged pull request \"Merge release/2.1 into master\" (#1876) at dotnet/sdk","RelatedBody":""},{"Id":"7125754877","Type":"PullRequestEvent","CreatedAt":"2018-01-20T01:14:40","Actor":"wli3","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/1879","RelatedDescription":"Merged pull request \"Insert NuGet Build 4.7.0-preview1-4846 into sdk\" (#1879) at dotnet/sdk","RelatedBody":"Insert NuGet Build 4.7.0-preview1-4846 into sdk master branch"},{"Id":"7125733087","Type":"PullRequestEvent","CreatedAt":"2018-01-20T01:03:20","Actor":"wli3","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/pull/1878","RelatedDescription":"Closed pull request \"Insert NuGet Build 4.7.0-preview1-4846 into sdk\" (#1878) at dotnet/sdk","RelatedBody":"@livarcocc \r\ncc @rrelyea "},{"Id":"7125732685","Type":"PullRequestEvent","CreatedAt":"2018-01-20T01:03:08","Actor":"wli3","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/pull/1881","RelatedDescription":"Closed pull request \"WIP Testinsertion\" (#1881) at dotnet/sdk","RelatedBody":""},{"Id":"7125635540","Type":"PullRequestEvent","CreatedAt":"2018-01-20T00:17:43","Actor":"tannergooding","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/1877","RelatedDescription":"Merged pull request \"Merge release/2.0.0 into release/2.1\" (#1877) at dotnet/sdk","RelatedBody":""},{"Id":"7125635452","Type":"PullRequestEvent","CreatedAt":"2018-01-20T00:17:41","Actor":"tannergooding","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/1875","RelatedDescription":"Merged pull request \"Updating repo-toolset to 1.0.0-beta-62519-01\" (#1875) at dotnet/sdk","RelatedBody":"Had to update to a new .NET Build Feed task version and update the publish proj to start importing a new props file that the feed task is providing."},{"Id":"7125587857","Type":"PullRequestEvent","CreatedAt":"2018-01-19T23:58:42","Actor":"wli3","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/1881","RelatedDescription":"Opened pull request \"WIP Testinsertion\" (#1881) at dotnet/sdk","RelatedBody":""},{"Id":"7125536002","Type":"PullRequestEvent","CreatedAt":"2018-01-19T23:38:11","Actor":"wli3","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/pull/1880","RelatedDescription":"Closed pull request \"WIP test ci\" (#1880) at dotnet/sdk","RelatedBody":""}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"954763538328883201","CreatedAt":"2018-01-20T17:12:20+00:00","UserScreenname":"dotnet","Text":"Jeff is close to his first follower goal!  Follow him on Mixer or Twitch and he will host a FREE workshop live on s… https://t.co/EefnkSEqfe","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":17,"FavoriteCount":5,"RawContent":null},{"Id":"954724179533758465","CreatedAt":"2018-01-20T14:35:56+00:00","UserScreenname":"dotnet","Text":"Join Jeff at 10am ET (-5:00 UTC) for a live coding stream about .NET, .NET Core, C#, and Visual Studio.  He'll also… https://t.co/dWA8n7Ttph","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":21,"FavoriteCount":7,"RawContent":null},{"Id":"953279226869960704","CreatedAt":"2018-01-16T14:54:13+00:00","UserScreenname":"dotnet","Text":"Join our Jeff Fritz today to learn more about .NET and ask questions about .NET, .NET Core, Visual Studio or ASPNet. https://t.co/ZtyD9ubcE6","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":12,"FavoriteCount":5,"RawContent":null},{"Id":"952185961085067266","CreatedAt":"2018-01-13T14:29:58+00:00","UserScreenname":"dotnet","Text":"Our Jeff Fritz (@csharpfritz) will be LIVE CODING again today.  Today's topic is unit testing @AspNet Core projects… https://t.co/kXZpzdtOqA","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":26,"FavoriteCount":10,"RawContent":null},{"Id":"950980824685412352","CreatedAt":"2018-01-10T06:41:11+00:00","UserScreenname":"dotnet","Text":".NET Framework January 2018 Security and Quality Rollup https://t.co/vyjtKwKpkb","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":18,"FavoriteCount":14,"RawContent":null},{"Id":"950944972588462080","CreatedAt":"2018-01-10T04:18:43+00:00","UserScreenname":"dotnet","Text":".NET for UWP January 2018 Update https://t.co/zckziEWmv7","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":42,"FavoriteCount":28,"RawContent":null},{"Id":"950850103652139008","CreatedAt":"2018-01-09T22:01:45+00:00","UserScreenname":"dotnet","Text":".NET Framework 4.7.1 is available on Windows Update, WSUS and MU Catalog! https://t.co/Hr3fLteMDg","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":63,"FavoriteCount":57,"RawContent":null}]}},"RunOn":"2018-01-22T05:30:21.774001Z","RunDurationInMilliseconds":8216}