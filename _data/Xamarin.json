{"Data":{"Blog":{"FeedItems":[{"Title":"November 2018 Xamarin and Azure Office Hours Recap","PublishedOn":"2018-12-14T21:08:29+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"I ❤️ every single developer. And I want to hear your stories. I want to hear about your successes, your &#8220;not-so-much&#8221; successes, and any questions or concerns you may have about our...","Href":"https://blog.xamarin.com/office-hours-november-2018-xamarin-azure/","RawContent":null},{"Title":"Xamarin.Forms 4.0 Feature Preview: An Entirely New Point of (Collection)View","PublishedOn":"2018-12-07T19:00:30+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"As part of the upcoming Xamarin.Forms 4.0 release, we are implementing the all new CollectionView control. The CollectionView is intended to be a successor to the ListView, improving upon its design...","Href":"https://blog.xamarin.com/xamarin-forms-4-0-feature-preview-an-entirely-new-point-of-collectionview/","RawContent":null},{"Title":"The Future of Mobile Development: Xamarin.Forms 4.0 Preview","PublishedOn":"2018-12-05T19:59:03+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Yesterday at Microsoft Connect(); 2018 we announced our plans for Xamarin.Forms 4.0 and shared a public preview. Let&#8217;s now take a deeper look at the big changes, starting with Xamarin.Forms...","Href":"https://blog.xamarin.com/xamarin-forms-4-0-preview/","RawContent":null},{"Title":"Connect(); 2018 Xamarin Announcements","PublishedOn":"2018-12-04T16:21:03+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, at Microsoft Connect(); 2018, we have several exciting announcements about brand new capabilities and foundational improvements in the Xamarin platform driven by your generous feedback....","Href":"https://blog.xamarin.com/connect-2018-xamarin-announcements/","RawContent":null},{"Title":"Xamarin and .NET Developer Events in December","PublishedOn":"2018-12-02T20:46:46+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Here are just a few of the awesome community-run events scheduled this month. Get the full list of mobile developer engagements happening all over the world through our Community page. There you will...","Href":"https://blog.xamarin.com/xamarin-and-net-developer-events-in-december/","RawContent":null},{"Title":"Multi-targeting with Android Support Library v28","PublishedOn":"2018-11-28T18:09:29+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Starting with Xamarin’s Android Support Library version 28, we are introducing multi-targeting. This includes assemblies for older support library versions when your application&#8217;s...","Href":"https://blog.xamarin.com/multi-targeting-with-android-support-library-v28/","RawContent":null},{"Title":"Android Build Performance and Reliability","PublishedOn":"2018-11-21T16:45:55+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"As a Xamarin developer working on Android apps, you may be well-aware of two issues that slow down your everyday development; build times and the correctness of the build. If you aren&#8217;t sure...","Href":"https://blog.xamarin.com/android-build-performance-reliability/","RawContent":null},{"Title":"Xamarin.Forms 3.4.0: Say Hello to ImageButton","PublishedOn":"2018-11-15T19:17:28+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"As part of our long-term goal to have more frequent releases, we’re pleased to announce the release of Xamarin.Forms 3.4.0. As always, this release contains even more bug fixes and most notably,...","Href":"https://blog.xamarin.com/xamarin-forms-3-4-0-say-hello-to-imagebutton/","RawContent":null},{"Title":"Twitch Workshop: Build Your First Mobile App with C#, Xamarin, and the Cloud","PublishedOn":"2018-11-14T18:45:19+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Have you been clamoring to get started with mobile development using C# and Xamarin? What if you could attend a full day workshop from the comfort of your house or in a conference room with some...","Href":"https://blog.xamarin.com/twitch-workshop-build-your-first-mobile-app/","RawContent":null},{"Title":"Gorilla Player: A Tool to Craft Beautiful XAML UIs for Xamarin.Forms","PublishedOn":"2018-11-08T21:00:06+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"This is a guest post contributed by Leonardo Rodríguez Viacava. Leo is co-founder and CTO of UXDivers, creators of Grial UIKit and Gorilla Player. UXDivers specializes in designing and coding engaging...","Href":"https://blog.xamarin.com/gorilla-player-a-tool-to-craft-beautiful-xaml-uis-for-xamarin-forms/","RawContent":null}],"ResultType":"Feed"},"Android":{"Events":[{"Id":"8758270579","Type":"IssuesEvent","CreatedAt":"2018-12-15T01:54:14","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/1924","RelatedDescription":"Closed issue \"AndroidClientHandler doesn't clear Authorization header on redirect\" (#1924) at xamarin/xamarin-android","RelatedBody":"We have discovered that the AndroidClientHandler transmits all headers when following redirects with AllowAutoRedirect=true. I could not find any authoritative info how this should be handled, however the HttpClientHandler seems to clear the Authorization header when redirecting (see https://github.com/dotnet/corefx/blob/master/src/System.Net.Http/src/System/Net/Http/SocketsHttpHandler/RedirectHandler.cs).\r\nFrom my testing, it appears the NSUrlSessionHandler does so too.\r\n\r\nShould we change the AndroidClientHandler to be more consistent with the other platforms on this issue?\n\n> VS bug [#737231](https://devdiv.visualstudio.com/DevDiv/_workitems/edit/737231)"},{"Id":"8758266748","Type":"IssuesEvent","CreatedAt":"2018-12-15T01:51:51","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/2466","RelatedDescription":"Closed issue \"[mono-runtimes] System.Threading.Tasks.Extensions.dll facade assembly is not yet present on the `d15-9` branch\" (#2466) at xamarin/xamarin-android","RelatedBody":"### Steps to Reproduce\r\n\r\n1. Download one of the latest candidate builds for the `d15-9` branch from https://jenkins.xamarin.com/view/Xamarin.Android/job/xamarin-android-builds-d15-9/33/PublishUrls/. Either the .vsix or the .pkg will work.\r\n2. Examine the package contents.\r\n\r\n### Expected Behavior\r\n\r\nNow that https://github.com/xamarin/xamarin-android/commit/0ea0725c2e9ca86b665ed49dfef0e0146251f7f9 has been committed to the `d15-9` branch to complete the implementation of the types forwarded by the *System.Threading.Tasks.Extensions.dll* facade assembly, it would be best to have the *System.Threading.Tasks.Extensions.dll* facade assembly itself also included in the installer package.\r\n\r\n### Actual Behavior\r\n\r\nThe installer packages (*Xamarin.Android.Sdk.9.1.3.0.vsix* and *xamarin.android-9.1.3-0.pkg*) do not yet contain the *System.Threading.Tasks.Extensions.dll* facade assembly.\r\n\r\nI believe that the particular part of https://github.com/xamarin/xamarin-android/pull/2450 that adds the *System.Threading.Tasks.Extensions.dll* facade assembly should be backported to the `d15-9` branch at this time to complete https://github.com/xamarin/xamarin-android/commit/0ea0725c2e9ca86b665ed49dfef0e0146251f7f9."},{"Id":"8758255498","Type":"IssuesEvent","CreatedAt":"2018-12-15T01:44:53","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/1163","RelatedDescription":"Closed issue \"Setting Target Version to \"Use Compile\" Does not set targetSdkVersion in Manifest\" (#1163) at xamarin/xamarin-android","RelatedBody":"### Steps to Reproduce\r\n\r\n1. In VS or VS for Mac set Target SDK Version to \"Use Compile\" this is the default\r\n2. Look at current manifest (does not contain: targetSdkVersion)\r\n3. Compile application\r\n4. Look at output of AndroidManifest.xml that is generated in obj/android, still does not contain targetSdkVersion\r\n\r\n### Expected Behavior\r\n\r\nThe Value should be set correct for the targetSdkVersion in the AndroidManifest.xml. So if I compile against 25, it should show android:targetSdkVersion=\"25\".\r\n\r\nFailure to do this has some not so great side effects. Material design doesn't display correct, permissions don't work correctly, and a lot more.\r\n\r\n### Actual Behavior\r\n\r\nNothing is set in the AndroidManifest.xml\r\n"},{"Id":"8758062171","Type":"PullRequestEvent","CreatedAt":"2018-12-15T00:10:34","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2541","RelatedDescription":"Opened pull request \"[tests] Run tests in parallel\" (#2541) at xamarin/xamarin-android","RelatedBody":"Context: TODO!\r\n\r\nCommit 91a39725 updated `make run-all-tests` so that certain MSBuild\r\nunit test targets would be run in parallel, but had two flaws:\r\n\r\n 1. It only worked on non-Windows platforms.\r\n 2. It ignored many errors.\r\n\r\nCommit 91a39725 only worked on non-Windows platforms because it worked\r\nby generating a **bash**(1)-compatible shell script which\r\n*backgrounded* the target invocations.  Errors were ignored because\r\nthe generated script always exited with an error code of 0:\r\n\r\n\tmsbuild RunTests.targets /t:RunNUnitTests &\r\n\tmsbuild RunTests.targets /t:RunApkTests &\r\n\t# ...\r\n\texit 0\r\n\r\nSuch a script won't easily run on Windows, and the `msbuild` exit\r\ncodes were ignored because I couldn't think of a good and \"reasonable\"\r\nway to capture them.  (To be fair, Google/StackOverflow/etc. did show\r\nvarious ways to capture the exit codes for backgrounded pipelines.\r\nI considered them all to be largely *unreadable*.)\r\n\r\nAdditionally, I didn't think that this would necessarily be a problem:\r\nif a unit test failed, it should report the failure in one of the\r\nNUnit `.xml` files -- largely so that we wouldn't need to read the\r\nJenkins Console Output to see what the *actual* error was! -- and thus\r\nignoring the exit status shouldn't be a problem.\r\n\r\nTurns Out...that's wrong.  We have observed builds which are \"green\"\r\n-- no errors! -- but in which there *were* failures, and the failures\r\nweren't reported *because* the `parallel-targets.sh` script didn't\r\nreport that anything was wrong!\r\n\r\nTODO: Insert description of the crash/failure/whatever which was\r\nactually ignored.  Requires finding a suitable build log. Film at 11.\r\n\r\nDoh!\r\n\r\nFix both issues: since sanely capturing background process exit codes\r\nis not \"reasonably easy\" to do in **bash**(1), *Don't Use Bash*.\r\nInstead, introduce a new `<RunParallelTargets/>` task which uses\r\n`System.Diagnostics.Process` to run the targets in the background,\r\nthen (sanely) wait for them to complete and perform any necessary\r\nerror checking.\r\n\r\nThis has the added benefit that it *also* now works on Windows."},{"Id":"8757935686","Type":"PullRequestEvent","CreatedAt":"2018-12-14T23:25:19","Actor":"jonathanpeppers","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2540","RelatedDescription":"Opened pull request \"[Xamarin.Android.Build.Tasks] ResolveLibraryProjectImports temp files\" (#2540) at xamarin/xamarin-android","RelatedBody":"When reviewing `ResolveLibraryProjectImports`, I noticed a few things\r\nwe could improve:\r\n\r\n1. We are using `GetResourceData` to get the entire contents of a file\r\n  as a `byte[]` and then writing to disk.\r\n2. We are writing temporary zip files to disk, reading them to extract,\r\n  then deleting them.\r\n\r\nThe first thing I did was take advantage of the `GetResourceStream`\r\nmethod, so we could just do `stream.CopyTo(file)`. This prevents us\r\nfrom allocating big `byte[]` the size of each file.\r\n\r\nNext, I took advantage of `ZipArchive.Open (stream)` and\r\n`GetResourceStream` to avoid the need for creating temporary zip\r\nfiles. We can unzip directly from the `Stream` in memory.\r\n\r\n## Results ##\r\n\r\nWhen timing these changes, I used the Xamarin.Forms integration\r\nproject in this repo:\r\n\r\n    Before\r\n    1. 1793 ms  ResolveLibraryProjectImports               1 calls\r\n    2. 1780 ms  ResolveLibraryProjectImports               1 calls\r\n    3. 1770 ms  ResolveLibraryProjectImports               1 calls\r\n    After\r\n    1. 1750 ms  ResolveLibraryProjectImports               1 calls\r\n    2. 1740 ms  ResolveLibraryProjectImports               1 calls\r\n    3. 1702 ms  ResolveLibraryProjectImports               1 calls\r\n\r\nI would say the improvements here are around 50ms."},{"Id":"8755882183","Type":"PullRequestEvent","CreatedAt":"2018-12-14T16:03:57","Actor":"jonathanpeppers","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2539","RelatedDescription":"Opened pull request \"[build] fix r8 license build failure\" (#2539) at xamarin/xamarin-android","RelatedBody":"We are seeing this on non-Windows platforms:\r\n\r\n    make: *** No rule to make target 'external//r8/LICENSE', needed by 'ThirdPartyNotices.txt'.  Stop.\r\n\r\nIt turns out that if you put a `LICENSE` file in `src`, things don't\r\nquite work right.\r\n\r\nThis license should just be specified with `<LicenseText>` item\r\nmetadata instead of using a file."},{"Id":"8755078875","Type":"IssuesEvent","CreatedAt":"2018-12-14T13:49:58","Actor":"arvindrajachourasiya","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/2538","RelatedDescription":"Opened issue \"Visual studio hangs when changing Target Framework\" (#2538) at xamarin/xamarin-android","RelatedBody":"I have Xamarin.Android project in visual studio 2017. When even I change in Target framework (_Go to Properties-- Application-- Compile using Android version: (Target Framework)_)\r\n\r\n### Steps to Reproduce\r\n\r\n1. Create Xamarin.Android project \r\n2. Go to Properties-- Application-- Compile using Android version: (Target Framework) change it to 8.1 to 9.0 \r\n3. \r\n\r\n<!--\r\nIf you have a repro project, you may drag & drop the .zip/etc. onto the issue editor to attach it.\r\n-->\r\n\r\n### Expected Behavior\r\nTarget Framework should change without hanging visual studio\r\n\r\n### Actual Behavior\r\nVisual studio getting hanged\r\n\r\n### Version Information\r\n\r\nMicrosoft Visual Studio Enterprise 2017\r\nVersion 15.8.9\r\nVisualStudio.15.Release/15.8.9+28010.2050\r\nMicrosoft .NET Framework\r\nVersion 4.7.03056\r\n\r\nInstalled Version: Enterprise\r\n\r\nC# Tools 2.9.0-beta8-63208-01\r\nC# components used in the IDE. Depending on your project type and settings, a different version of the compiler may be used.\r\n\r\nNuGet Package Manager 4.6.0\r\nNuGet Package Manager in Visual Studio. For more information about NuGet, visit http://docs.nuget.org/.\r\n\r\nProjectServicesPackage Extension 1.0\r\nProjectServicesPackage Visual Studio Extension Detailed Info\r\n\r\nResourcePackage Extension 1.0\r\nResourcePackage Visual Studio Extension Detailed Info\r\n\r\nResourcePackage Extension 1.0\r\nResourcePackage Visual Studio Extension Detailed Info\r\nVisualStudio.Mac 1.0\r\nMac Extension for Visual Studio\r\n\r\nXamarin 4.11.0.779 (d15-8@ff915e800)\r\nVisual Studio extension to enable development for Xamarin.iOS and Xamarin.Android.\r\n\r\nXamarin Designer 4.15.12 (d7ff6f39c)\r\nVisual Studio extension to enable Xamarin Designer tools in Visual Studio.\r\n\r\nXamarin Templates 1.1.118 (4217ee9)\r\nTemplates for building iOS, Android, and Windows apps with Xamarin and Xamarin.Forms.\r\n\r\nXamarin.Android SDK 9.0.0.19 (HEAD/a8a3b0ec7)\r\nXamarin.Android Reference Assemblies and MSBuild support.\r\n\r\nXamarin.iOS and Xamarin.Mac SDK 12.1.0.15 (cbfb047)\r\nXamarin.iOS and Xamarin.Mac Reference Assemblies and MSBuild support.\r\n\r\n### Log File\r\n\r\n<!--\r\n1. On macOS and within Visual Studio:\r\n    a. Click **Tools** > **SDK Command Prompt**.\r\n    b. Within the launched `Terminal.app` window, run:\r\n\r\n            adb logcat -d | pbcopy\r\n\r\n2. Paste below this comment block\r\n-->\r\n\r\n\r\n\r\n<!--\r\nSwitch to the \"Preview\" tab to ensure your issue renders correctly.\r\n\r\nPlease add an appropriate \"Area:\" label in the Labels section.\r\n-->"},{"Id":"8754966316","Type":"PullRequestEvent","CreatedAt":"2018-12-14T13:29:05","Actor":"radekdoulik","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2537","RelatedDescription":"Opened pull request \"[build-status] Archive the tests logcat output\" (#2537) at xamarin/xamarin-android","RelatedBody":"It is useful to have the logcat output in case one wants to analyze\r\ntests run, even when the test didn't fail"},{"Id":"8753983796","Type":"PullRequestEvent","CreatedAt":"2018-12-14T10:12:30","Actor":"dellis1972","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2536","RelatedDescription":"Opened pull request \"Lets PreCompile the \"Runtime\" rather than do it on the users machine [WIP]\" (#2536) at xamarin/xamarin-android","RelatedBody":"This is a work in progress. The idea is we build a `runtime.jar` file which we just include in the app. This is so we don't need to compile all the code on the users machine. It also means we can provide a custom `runtime_fastdev.jar` which is specific for fast deployment. \r\n\r\nA couple of things to note. We use a internal private class `MonoPackageManager_Resources` to provide data to the runtime. Now the interesting thing is we can hot swap the class file. So we build `MonoPackageManager.java` with a template version of `MonoPackageManager_Resources`. Then we build on the user machine a custom one and just use that `.class` file. Java seems to be fine with this.\r\n\r\n"},{"Id":"8753132825","Type":"PullRequestEvent","CreatedAt":"2018-12-14T07:07:13","Actor":"jonathanpeppers","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2535","RelatedDescription":"Opened pull request \"[Xamarin.Android.Build.Tasks] no temp files in GenerateJavaStubs\" (#2535) at xamarin/xamarin-android","RelatedBody":"Context: https://github.com/xamarin/xamarin-android/pull/2505\r\n\r\nThis is based on #2505, but I incorporated the java.interop changes so\r\n`GenerateJavaStubs` uses no temp files at all.\r\n\r\nIn many places throughout the Xamarin.Android build, we have a pattern\r\nof:\r\n\r\n- Generate a temp file.\r\n- Use `MonoAndroidHelper.CopyIfChanged` to put the file in the\r\n  destination. This reads both files, doing a hash comparison before\r\n  deciding to write or not.\r\n- Delete the temp file.\r\n\r\nSometimes the temp file is actually in `%TEMP%`, but other times we\r\nappend `.new` to the destination file. The case of `.new` can collide\r\nif two builds are running at once (example caused by a known VS for\r\nMac issue).\r\n\r\nThinking about this, in cases with small files, we can make a simple\r\noptimization:\r\n\r\n- Generate the file in-memory.\r\n- Use a new `MonoAndroidHelper.CopyStreamIfChanged` method`.\r\n\r\nThis has several benefits:\r\n\r\n- We never write a file to disk when there are no changes.\r\n- We don't have to *remember* to delete the file.\r\n- The code, in general, is slightly simpler.\r\n\r\nThe only place we likely shouldn't use this new pattern, would be if\r\nthe file was huge.\r\n\r\n## Changes ##\r\n\r\nI added new APIs for:\r\n\r\n- `Files.HasStreamChanged` - to compare a `Stream` in memory\r\n- `Files.HasBytesChanged` - to compare a `byte[]` in memory\r\n- `Files.CopyIfStreamChanged`\r\n- `Files.CopyIfStringChanged` - some cases we have a `string`\r\n- `Files.CopyIfBytesChanged` - this supports `string`\r\n- `MonoAndroidHelper.CopyIfStreamChanged`\r\n- `MonoAndroidHelper.CopyIfStringChanged`\r\n- `MonoAndroidHelper.CopyIfBytesChanged`\r\n\r\nI changed the following MSBuild tasks, mostly to test out the new\r\nbehavior:\r\n\r\n- `GenerateResourceDesigner` was using a `.new` file.\r\n- `GenerateJavaStubs` was using temp files in many places. I was able\r\n  to fix up all of these.\r\n- `ManifestDocument` now has an overload for `Save` that takes a\r\n  `Stream`\r\n- `Generator` now uses `CopyIfStreamChanged` a new\r\n  `GetDestinationPath` method from java.interop. It reuses a single\r\n  `MemoryStream`, and I moved the `GenerateJavaSource` method into\r\n  `CreateJavaSources` for simplicity.\r\n\r\nI made other general refactoring in `GenerateJavaStubs`:\r\n\r\n- Since we don't have to worry about deleting a `temp_map_file`, we\r\n  can return earlier if `Generator.CreateJavaSources` fails.\r\n- A `GetResource<T>` method, cleans up the places reading from\r\n  `EmbeddedResource` files. I also changed it up to properly `Dispose`\r\n  things.\r\n- A `save` anonymous method/delegate should just be a `SaveResource`\r\n  *regular* method.\r\n- A few places were calling `Path.GetFullPath` unecessarily. Since\r\n  this method accesses the file system, we should skip it unless the\r\n  full path is actually needed.\r\n\r\nI also added some tests for the new APIs in `MonoAndroidHelper`.\r\n\r\n## Results ##\r\n\r\nI did three test runs, because I was getting varying times for\r\n`GenerateJavaStubs`. This is the Xamarin.Forms integration project in\r\nthis repo:\r\n\r\n    Before (Clean Build):\r\n    1. 1433 ms  GenerateJavaStubs                          1 calls\r\n    2. 1594 ms  GenerateJavaStubs                          1 calls\r\n    3. 1353 ms  GenerateJavaStubs                          1 calls\r\n\r\n    After (Clean Build):\r\n    1. 1201 ms  GenerateJavaStubs                          1 calls\r\n    2. 1137 ms  GenerateJavaStubs                          1 calls\r\n    3. 1136 ms  GenerateJavaStubs                          1 calls\r\n\r\n    Before (Incremental):\r\n    1. 1184 ms  GenerateJavaStubs                          1 calls\r\n    2. 1181 ms  GenerateJavaStubs                          1 calls\r\n    3. 1172 ms  GenerateJavaStubs                          1 calls\r\n\r\n    After (Incremental):\r\n    1. 1035 ms  GenerateJavaStubs                          1 calls\r\n    2. 1049 ms  GenerateJavaStubs                          1 calls\r\n    3. 1036 ms  GenerateJavaStubs                          1 calls\r\n\r\n`GenerateJavaStubs` is now about 250ms faster on initial build and\r\n150ms faster on incremental builds.\r\n\r\nI could not see a difference in `GenerateResourceDesigner`, likely\r\nsince it wrote only a single temp file.\r\n\r\nNext steps would be to make changes in other MSBuild tasks as well."}],"ResultType":"GitHubEvent"},"Forms":{"Events":[{"Id":"8758371537","Type":"PullRequestEvent","CreatedAt":"2018-12-15T03:02:55","Actor":"kingces95","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/4747","RelatedDescription":"Opened pull request \"Min viable FontImageSource\" (#4747) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\n\r\n`FontImageSource` derives from `ImageSource` and accepts a glyph (character) from a font plus a size and color which it'll use to create a .png which can then be displayed as an image. Unfortunately, many places where you'd like to use this currently accept a `FileImageSource` but that'll be a separate work item. Works on Android and iOS. UAP has first class support for glyphs but not as images so no one bothered to ask the internet how to draw them as .png files. Maybe someone in the community knows the secret. \r\n\r\n### Issues Resolved ### \r\n\r\n- fixes #3189 tho that spec has aspirations of unifying the metadata needed to identify the font such that the XAML is simplified to a single word. That's a great idea but is beyond what's necessary for a minimum viable feature. And anyway, abstracting resources across platforms is a larger issue.\r\n\r\n### API Changes ###\r\n\r\nAdded:\r\n`FontImageSource`\r\n\r\n### Before/After Screenshots ### \r\n<!-- If possible, take a screenshot of your test case before these changes were made and another screenshot after the changes were made to show possible visual changes. -->\r\n\r\nNot applicable\r\n\r\n### Testing Procedure ###\r\n<!-- Please list the steps that should be taken to properly test these changes on each relevant platform. If you were unable to test these changes yourself on any or all platforms, please let us know. Also, if you are able to attach a video of your test run, you will be our personal hero. -->\r\n\r\n### PR Checklist ###\r\n\r\n- [ ] Has automated tests <!-- (if tests are omitted or manual, state reason in description) -->\r\n- [ ] Rebased on top of the target branch at time of PR\r\n- [ ] Changes adhere to coding standard\r\n"},{"Id":"8758143678","Type":"IssuesEvent","CreatedAt":"2018-12-15T00:46:09","Actor":"samhouts","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/1574","RelatedDescription":"Closed issue \"Edit and Continue doesn't work with .NET Standard\" (#1574) at xamarin/Xamarin.Forms","RelatedBody":"When a Xamarin.Forms cross-platform library uses .NET Standard, Edit and Continue doesn't work on UWP. (I didn't try other ways of incorporating the cross-platform code, so I don't know whether this is specific to .NET Standard.)\r\n\r\nRepro:\r\n1. Create a new UWP project.\r\n2. Add a .NET Standard class library.\r\n3. Verify that Edit and Continue works. (Start the app. Debug > Break All. Edit some code in the class library. Continue.)\r\n4. Add Xamarin.Forms to the class library and UWP project. Add a page to the class library. Add the standard startup code to the UWP project. This [repro project](https://github.com/breyed/repro-xamarin.forms-edit-and-continue) is in this state.\r\n5. Test whether Edit and Continue works. Notice that it doesn't (although Edit and Continue does work if you edit the UWP project).\r\n\r\nIn the repro project, the Error List window doesn't show any errors. However, for my production project, this error appears:\r\n> Error CS7038: Failed to emit module '_name_'.\r\n"},{"Id":"8758055653","Type":"PullRequestEvent","CreatedAt":"2018-12-15T00:08:12","Actor":"PureWeen","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/4746","RelatedDescription":"Opened pull request \"Condition default items on the UsingMicrosoftNETSdk property for SDK projects \" (#4746) at xamarin/Xamarin.Forms","RelatedBody":""},{"Id":"8757996756","Type":"PullRequestEvent","CreatedAt":"2018-12-14T23:46:36","Actor":"rmarinho","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/4745","RelatedDescription":"Opened pull request \"[UItests] Fix UITest 41424\" (#4745) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\n\r\nFix UITest 41424\r\n\r\n### Issues Resolved ### \r\n<!-- Please use the format \"fixes #xxxx\" for each issue this PR addresses -->\r\n\r\n- fixes #\r\n\r\n### API Changes ###\r\n<!-- List all API changes here (or just put None), example:\r\n\r\nAdded:\r\n - string ListView.GroupName { get; set; } //Bindable Property\r\n - int ListView.GroupId { get; set; } // Bindable Property\r\n - void ListView.Clear ();\r\n\r\nChanged:\r\n - object ListView.SelectedItem => Cell ListView.SelectedItem\r\n \r\n Removed:\r\n - object ListView.SelectedItem => Cell ListView.SelectedItem\r\n \r\n -->\r\n \r\n None\r\n\r\n### Platforms Affected ### \r\n<!-- Please list all platforms affected by these changes -->\r\n\r\n- Core/XAML (all platforms)\r\n- iOS\r\n- Android\r\n- UWP\r\n\r\n### Behavioral/Visual Changes ###\r\n<!-- Describe any changes that may change how a user's app behaves or appears when upgrading to this version of the codebase. -->\r\n\r\nNone\r\n\r\n### Before/After Screenshots ### \r\n<!-- If possible, take a screenshot of your test case before these changes were made and another screenshot after the changes were made to show possible visual changes. -->\r\n\r\nNot applicable\r\n\r\n### Testing Procedure ###\r\n<!-- Please list the steps that should be taken to properly test these changes on each relevant platform. If you were unable to test these changes yourself on any or all platforms, please let us know. Also, if you are able to attach a video of your test run, you will be our personal hero. -->\r\n\r\n### PR Checklist ###\r\n\r\n- [ ] Has automated tests <!-- (if tests are omitted or manual, state reason in description) -->\r\n- [ ] Rebased on top of the target branch at time of PR\r\n- [ ] Changes adhere to coding standard\r\n"},{"Id":"8757984314","Type":"IssuesEvent","CreatedAt":"2018-12-14T23:42:05","Actor":"hartez","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/4721","RelatedDescription":"Closed issue \"ListView default behaviour does not work\" (#4721) at xamarin/Xamarin.Forms","RelatedBody":"### Description\r\nThe ListView that binds an IEnumerable<T> is to create a label set with the result of T.ToString(). This does not work anymore in the recent versions of Xamarin.Forms \r\n\r\n### Steps to Reproduce\r\n\r\n1. Create a project\r\n2. Create a Model and override ToString\r\n3. Create a page with a ListView and set the ListView ItemsSource an IEnumerable<Model>. \r\n\r\n### Expected Behavior\r\nShould see the populated label with the result of the ToString method\r\n\r\n### Actual Behavior\r\nThe labels are empty\r\n\r\n### Basic Information\r\n\r\n- Version with issue:\r\n- Last known good version:\r\n- IDE: Visual Studio Mac & Visual Studio Windows 15.9.4\r\n- Platform Target Frameworks: <!-- All that apply -->\r\n  - iOS:  3.4\r\n  - Android: 3.4\r\n  - UWP:  Not Tested\r\n- Android Support Library Version: <!-- if applicable -->\r\n- Nuget Packages:\r\n- Affected Devices:\r\n\r\n\r\n### Reproduction Link\r\nhttps://1drv.ms/u/s!AuJWJQUKZPJor6dQ7NzeyUH7XngFog\r\n"},{"Id":"8757298177","Type":"IssuesEvent","CreatedAt":"2018-12-14T20:44:26","Actor":"Ali-YousefiTelori","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/4744","RelatedDescription":"Opened issue \"forms in UWP show empty button for DisplayActionSheet\" (#4744) at xamarin/Xamarin.Forms","RelatedBody":"DisplayActionSheet is showing empty button in UWP when value is \"\" (empty string) but hide in android, when value is null instade of \"\" (empty) that will hide in both (android and uwp)."},{"Id":"8757103435","Type":"PullRequestEvent","CreatedAt":"2018-12-14T20:00:11","Actor":"StephaneDelcroix","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/4743","RelatedDescription":"Opened pull request \"[wip] designtime props\" (#4743) at xamarin/Xamarin.Forms","RelatedBody":"wip.\r\n\r\ntodo:\r\n -modify generated code to invade RP2"}],"ResultType":"GitHubEvent"},"Macios":{"Events":[{"Id":"8757144780","Type":"IssuesEvent","CreatedAt":"2018-12-14T20:09:16","Actor":"jstedfast","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/xamarin-macios/issues/4620","RelatedDescription":"Closed issue \"Interface Builder - Switching back to VS4M causes the project to be unloaded in Xcode\" (#4620) at xamarin/xamarin-macios","RelatedBody":"### Steps to Reproduce\r\n\r\n1. Create new Xamarin iOS Application\r\n2. Right Click Storyboard\r\n3. Open in Interface Builder\r\n4. Edit the ViewController\r\n5. Switch focus back to VS4M\r\n6. Switch focus to Xcode\r\n\r\n### Expected Behavior\r\n\r\nState of Interface Builder should be intact and editing of the Storyboard should be possible.\r\n\r\n### Actual Behavior\r\n\r\nXcode project is unloaded and no longer able to edit\r\n\r\n### Environment\r\n\r\n=== Visual Studio Enterprise 2017 for Mac ===\r\n\r\nVersion 7.5.4 (build 3)\r\nInstallation UUID: 59e8a0c2-a674-42a6-b852-843de896e0eb\r\nRuntime:\r\n\tMono 5.10.1.57 (2017-12/ea8a24b1bbf) (64-bit)\r\n\tGTK+ 2.24.23 (Raleigh theme)\r\n\tXamarin.Mac 4.4.1.178 (master / eeaeb7e6)\r\n\r\n\tPackage version: 510010057\r\n\r\n=== NuGet ===\r\n\r\nVersion: 4.3.1.4445\r\n\r\n=== .NET Core ===\r\n\r\nRuntime: /usr/local/share/dotnet/dotnet\r\nRuntime Version: 2.1.1\r\nSDK: /usr/local/share/dotnet/sdk/2.1.301/Sdks\r\nSDK Version: 2.1.301\r\nMSBuild SDKs: /Library/Frameworks/Mono.framework/Versions/5.10.1/lib/mono/msbuild/15.0/bin/Sdks\r\n\r\n=== Xamarin.Profiler ===\r\n\r\nVersion: 1.6.2\r\nLocation: /Applications/Xamarin Profiler.app/Contents/MacOS/Xamarin Profiler\r\n\r\n=== Xamarin.Android ===\r\n\r\nVersion: 8.3.3.2 (Visual Studio Enterprise)\r\nAndroid SDK: /Users/blounty/Library/Developer/Xamarin/android-sdk-macosx\r\n\tSupported Android versions:\r\n\t\t7.1 (API level 25)\r\n\t\t8.1 (API level 27)\r\n\r\nSDK Tools Version: 26.1.1\r\nSDK Platform Tools Version: 28.0.0\r\nSDK Build Tools Version: 28.0.2\r\n\r\nJava SDK: /usr\r\njava version \"1.8.0_131\"\r\nJava(TM) SE Runtime Environment (build 1.8.0_131-b11)\r\nJava HotSpot(TM) 64-Bit Server VM (build 25.131-b11, mixed mode)\r\n\r\nAndroid Designer EPL code available here:\r\nhttps://github.com/xamarin/AndroidDesigner.EPL\r\n\r\n=== Apple Developer Tools ===\r\n\r\nXcode 9.4.1 (14161)\r\nBuild 9F2000\r\n\r\n=== Xamarin.Mac ===\r\n\r\nVersion: 4.4.1.193 (Visual Studio Enterprise)\r\n\r\n=== Xamarin.iOS ===\r\n\r\nVersion: 11.12.0.4 (Visual Studio Enterprise)\r\nHash: 64fece5f\r\nBranch: d15-7\r\nBuild date: 2018-05-29 20:00:44-0400\r\n\r\n=== Xamarin Inspector ===\r\n\r\nVersion: 1.4.0\r\nHash: b3f92f9\r\nBranch: master\r\nBuild date: Fri, 19 Jan 2018 22:00:34 GMT\r\nClient compatibility: 1\r\n\r\n=== Build Information ===\r\n\r\nRelease ID: 705040003\r\nGit revision: 6ae731889c896d6733efb8ff5117f5bf5b17b509\r\nBuild date: 2018-07-19 13:07:45-04\r\nXamarin addins: 417fed09624e1e1f76ab0a11e8b97ffd8bbf91e1\r\nBuild lane: monodevelop-lion-d15-7\r\n\r\n=== Operating System ===\r\n\r\nMac OS X 10.13.6\r\nDarwin 17.7.0 Darwin Kernel Version 17.7.0\r\n    Thu Jun 21 22:53:14 PDT 2018\r\n    root:xnu-4570.71.2~1/RELEASE_X86_64 x86_64\r\n\r\n<img width=\"1667\" alt=\"screen shot 2018-08-14 at 11 06 52 am\" src=\"https://user-images.githubusercontent.com/30159621/44109555-30399fb0-9fb2-11e8-958d-c32891a826f4.png\">\n\n> VS bug [#665000](https://devdiv.visualstudio.com/DevDiv/_workitems/edit/665000), VS bug [#752186](https://devdiv.visualstudio.com/DevDiv/_workitems/edit/752186)"},{"Id":"8755927233","Type":"IssuesEvent","CreatedAt":"2018-12-14T16:11:14","Actor":"VincentDondain","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/xamarin-macios/issues/5276","RelatedDescription":"Closed issue \"NSProxy can not found \" (#5276) at xamarin/xamarin-macios","RelatedBody":" I am working on an FLAnimatedImage binding for iOS and I have come across a binding issue I have not seen before, from [FLAnimatedImage.h](https://github.com/Flipboard/FLAnimatedImage/blob/master/FLAnimatedImage/FLAnimatedImage.h):\r\n```\r\n@interface FLWeakProxy : NSProxy\r\n\r\n+ (instancetype)weakProxyForObject:(id)targetObject;\r\n\r\n@end\r\n```\r\nApparently Xamarin.iOS does not have NSProxy.\r\n\r\nCan anyone out there help me to figure out the best way to implement NSProxy, or maybe someone have experience to do that?"},{"Id":"8755347278","Type":"PullRequestEvent","CreatedAt":"2018-12-14T14:37:59","Actor":"chamons","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/5274","RelatedDescription":"Merged pull request \"[tests] Remove NoBindingEmbedding rebuild tests\" (#5274) at xamarin/xamarin-macios","RelatedBody":"- These tests failed randomly, especially on older macOS without APFS\r\n- They also were rather slow\r\n- https://github.com/xamarin/maccore/issues/1263"},{"Id":"8754277116","Type":"IssuesEvent","CreatedAt":"2018-12-14T11:07:13","Actor":"Wenfengcheng","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/issues/5276","RelatedDescription":"Opened issue \"NSProxy can not found \" (#5276) at xamarin/xamarin-macios","RelatedBody":" I am working on an FLAnimatedImage binding for iOS and I have come across a binding issue I have not seen before, from [FLAnimatedImage.h](https://github.com/Flipboard/FLAnimatedImage/blob/master/FLAnimatedImage/FLAnimatedImage.h):\r\n```\r\n@interface FLWeakProxy : NSProxy\r\n\r\n+ (instancetype)weakProxyForObject:(id)targetObject;\r\n\r\n@end\r\n```\r\nApparently Xamarin.iOS does not have NSProxy.\r\n\r\nCan anyone out there help me to figure out the best way to implement NSProxy, or maybe someone have experience to do that?"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1072256672498966533","CreatedAt":"2018-12-10T22:28:06+00:00","UserScreenname":"xamarinhq","Text":"CarouselView is Here! Xamarin.Forms 4.0 now includes an entirely new point of view. ...as part of the upcoming rele… https://t.co/Vh8UMRM4ez","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":146,"FavoriteCount":66,"RawContent":null},{"Id":"1070425707770195968","CreatedAt":"2018-12-05T21:12:30+00:00","UserScreenname":"xamarinhq","Text":"Yesterday at Microsoft Connect(); 2018 we announced our plans &amp; preview for Xamarin.Forms 4.0. This post will give… https://t.co/oNXLJGsrQ8","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":139,"FavoriteCount":72,"RawContent":null},{"Id":"1070075277101944833","CreatedAt":"2018-12-04T22:00:01+00:00","UserScreenname":"xamarinhq","Text":"Today, at #MSFTConnect 2018, we have several exciting announcements about brand new capabilities and foundational i… https://t.co/olEK9QjR1j","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":53,"FavoriteCount":38,"RawContent":null},{"Id":"1069721699225088008","CreatedAt":"2018-12-03T22:35:02+00:00","UserScreenname":"xamarinhq","Text":"Here's what we have coming up this month for #Xamarin and #dotNET Developer Events in December:… https://t.co/oAMbLqXh9f","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":45,"FavoriteCount":18,"RawContent":null},{"Id":"1068601941339582469","CreatedAt":"2018-11-30T20:25:31+00:00","UserScreenname":"xamarinhq","Text":"Now announcing multi-targeting with Android Support Library v28. \n\n...but what is multi-targeting you ask? Well, no… https://t.co/oBJ1j9vP6P","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":95,"FavoriteCount":53,"RawContent":null},{"Id":"1067915081495846913","CreatedAt":"2018-11-28T22:56:10+00:00","UserScreenname":"xamarinhq","Text":"The Xamarin #Android team has been working hard on improving Build Performance &amp; Reliability in both #VS2017 v15.9… https://t.co/c4iSbZJDy9","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":84,"FavoriteCount":45,"RawContent":null},{"Id":"1063457672048058371","CreatedAt":"2018-11-16T15:44:01+00:00","UserScreenname":"xamarinhq","Text":"Announcing the release of Xamarin.Forms 3.4.0 w/ even more bug fixes and another new highly requested feature, an I… https://t.co/EJadLHYi73","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":180,"FavoriteCount":105,"RawContent":null},{"Id":"1063145593562902528","CreatedAt":"2018-11-15T19:03:56+00:00","UserScreenname":"xamarinhq","Text":"Build and deploy #ethereum smart contracts using the new @trufflesuite extension for #VSCode from @MSFTBlockchain… https://t.co/nEbiFUYaM2","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":37,"FavoriteCount":18,"RawContent":null},{"Id":"1062819180100100099","CreatedAt":"2018-11-14T21:26:53+00:00","UserScreenname":"xamarinhq","Text":"Want to get started w/ mobile dev using C# &amp; #Xamarin? We've got a Twitch Workshop for that.\n\nComing Friday, Nov 16… https://t.co/ce2vH9dC4t","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":115,"FavoriteCount":61,"RawContent":null},{"Id":"1058039721652297729","CreatedAt":"2018-11-01T16:55:01+00:00","UserScreenname":"xamarinhq","Text":"Get all the links you need for the world-wide, community-run mobile dev engagements happening for the Xamarin &amp;… https://t.co/eiJXYtWfvG","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":43,"FavoriteCount":26,"RawContent":null},{"Id":"1053027600086552576","CreatedAt":"2018-10-18T20:58:38+00:00","UserScreenname":"xamarinhq","Text":"TY2 you &amp; the Xamarin.Forms team we've filled in some of the features you’ve told us are important to building your… https://t.co/lwqRjrIFEi","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":62,"FavoriteCount":31,"RawContent":null},{"Id":"1052217100041945088","CreatedAt":"2018-10-16T15:18:00+00:00","UserScreenname":"xamarinhq","Text":"A full day of community-driven sessions on cross-platform mobile application development with Xamarin, DevOps with… https://t.co/07SVz6rgLT","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":53,"FavoriteCount":22,"RawContent":null},{"Id":"1050824055014744064","CreatedAt":"2018-10-12T19:02:32+00:00","UserScreenname":"xamarinhq","Text":"Now, in #VisualStudio 15.8, Dotfuscator Community can help protect your https://t.co/FGIvdxOrYa Apps at Runtime by… https://t.co/iPm1GjIrpS","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":54,"FavoriteCount":30,"RawContent":null},{"Id":"1050447051228631040","CreatedAt":"2018-10-11T18:04:28+00:00","UserScreenname":"xamarinhq","Text":"With Xamarin.Forms, the UI and app logic for your app resides in a single codebase and you get to use a single IDE… https://t.co/SMq0XwjtKL","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":62,"FavoriteCount":39,"RawContent":null},{"Id":"1047580523881799680","CreatedAt":"2018-10-03T20:13:54+00:00","UserScreenname":"xamarinhq","Text":"Do both types of testing with your Visual Studio App Center CI/CD pipeline - cover the Data Access Layer with unit… https://t.co/6y14u8p3lQ","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":65,"FavoriteCount":34,"RawContent":null},{"Id":"1046875654631886850","CreatedAt":"2018-10-01T21:33:00+00:00","UserScreenname":"xamarinhq","Text":"Microsoft named a leader in 2018 analyst reports on mobile app development. Get complimentary access to reports fro… https://t.co/EWg450kHpI","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":69,"FavoriteCount":33,"RawContent":null},{"Id":"1041764665536196609","CreatedAt":"2018-09-17T19:03:45+00:00","UserScreenname":"xamarinhq","Text":"...released to NuGet today, Xamarin.Forms 3.2.0. We've kicked off another round of updates, and this time we tackle… https://t.co/zyFILHsEUu","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":200,"FavoriteCount":112,"RawContent":null},{"Id":"1039264258511527936","CreatedAt":"2018-09-10T21:28:02+00:00","UserScreenname":"xamarinhq","Text":"Watch #dotNETConf Live! The 3-day virtual developer conference co-organized by the .NET community and Microsoft is… https://t.co/bM5JCj7M0h","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":95,"FavoriteCount":56,"RawContent":null}]}},"RunOn":"2018-12-15T05:31:17.0488957Z","RunDurationInMilliseconds":4027}