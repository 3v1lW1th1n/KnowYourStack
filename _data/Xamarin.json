{"Data":{"Blog":{"FeedItems":[{"Title":"Faster Xamarin.Android Builds & Smaller Dex Files","PublishedOn":"2019-06-24T18:02:55+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"One of our current focus areas in Xamarin.Android is build performance. The &#8220;inner dev loop&#8221; directly impacts developer productivity&#8211;the time it takes to make a small code change and...","Href":"https://devblogs.microsoft.com/xamarin/dex-counting-xamarin-android-improved/","RawContent":null},{"Title":"Get Started with Free Xamarin Training on Microsoft Learn","PublishedOn":"2019-06-21T19:10:22+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Learn how to build cross-platform mobile applications with the new Xamarin.Forms content on Microsoft Learn. The new and completely free platform where you can earn points and badges, level up, and...","Href":"https://devblogs.microsoft.com/xamarin/microsoft-learn-free-xamarin-training/","RawContent":null},{"Title":"New Xamarin.Forms XAML IntelliSense in Visual Studio for Mac","PublishedOn":"2019-06-19T18:21:04+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Visual Studio 2019 for Mac version 8.2 is officially available as a preview. Now featuring significant improvements to the XAML editing experience for Xamarin developers. The Xamarin.Forms XAML...","Href":"https://devblogs.microsoft.com/xamarin/xaml-intellisense-vs4m-xamarin-forms/","RawContent":null},{"Title":"Automatic Android SDK Management","PublishedOn":"2019-06-17T20:24:08+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"As a mobile developer building apps for Android, there are many tools used under the hood to build, deploy, and debug your Android applications. We know this can be an intimidating process. So to...","Href":"https://devblogs.microsoft.com/xamarin/automatic-android-sdk-management/","RawContent":null},{"Title":"Xamarin Podcast: Xamarin.Forms 4 And So Much More!","PublishedOn":"2019-06-14T16:08:02+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Keeping up with the latest in .NET, C#, Xamarin, and Azure is easier than ever. Co-hosts Matt Soucoup and James Montemagno cover a range of topics relevant to Xamarin developers from designing mobile...","Href":"https://devblogs.microsoft.com/xamarin/xamarin-podcast-xamarin-forms-4/","RawContent":null},{"Title":"Grial UI Kit: Building Beautiful Xamarin.Forms Apps, Faster","PublishedOn":"2019-06-12T17:07:51+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"This post was guest authored and contributed by Leonardo Viacava. Leo is co-founder and CTO of UXDivers, creators of Grial UI Kit and Gorilla Player. UXDivers specializes in designing and coding...","Href":"https://devblogs.microsoft.com/xamarin/grial-ui-kit-xamarin-forms/","RawContent":null},{"Title":"Join the Microsoft Team at Xamarin Developer Summit","PublishedOn":"2019-06-10T16:54:04+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"On July 11-12th, the community-run Xamarin Developer Summit is set to launch in Houston, Texas. The two-day conference is packed full of amazing Xamarin content, covering a wide range of mobile...","Href":"https://devblogs.microsoft.com/xamarin/xamarin-developer-summit/","RawContent":null},{"Title":"Use Maps to Display and Navigate Users with Xamarin.Essentials","PublishedOn":"2019-06-07T16:26:32+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"A common scenario for mobile apps is to help their users get to a specific location. This may be a restaurant, office, or the trailhead for the most amazing hike in the pacific northwest. We can...","Href":"https://devblogs.microsoft.com/xamarin/maps-navagation-xamarin-essentials/","RawContent":null},{"Title":"CheckBox with Xamarin.Forms 4.1.0 Pre-Release","PublishedOn":"2019-06-05T19:34:55+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Just a few weeks ago we shipped Xamarin.Forms 4.0, which introduced the new Shell navigation for quickly bootstrapping your applications. As well as image source unification to make it convenient to...","Href":"https://devblogs.microsoft.com/xamarin/checkbox-xamarin-forms-4-1-0-pre-release/","RawContent":null},{"Title":"Xamarin and .NET Developer Events in June","PublishedOn":"2019-06-03T18:50:58+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Jumpstart your next mobile development projects by networking with your local community and getting the latest updates about Xamarin and .NET related technologies. Discover upcoming developer events...","Href":"https://devblogs.microsoft.com/xamarin/june-developer-events-xamarin-dotnet/","RawContent":null}],"ResultType":"Feed"},"Android":{"Events":[{"Id":"9884953002","Type":"PullRequestEvent","CreatedAt":"2019-06-25T00:15:30","Actor":"pjcollins","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/3279","RelatedDescription":"Opened pull request \"[build] Simplify CI make and xaprepare invocations\" (#3279) at xamarin/xamarin-android","RelatedBody":"Context: https://github.com/xamarin/xamarin-android/commit/9302d514a1437e5d1977da06dfbbe4e7054f33d5\r\nContext: https://github.com/xamarin/xamarin-android/commit/f9f5b6cd120484b13df74e94638e07411d8693fa\r\n\r\nWe built a lot of hacks into our make file when initially working on the\r\nxaprepare tool, as the windows and mac azure pipeline builds could not\r\nbe modified at the time. We now have these builds defined in yaml, and\r\nas such we should be able to simplify the underlying make rules used by\r\nall of our builds.\r\n\r\n  * Removes `prepare-build-ci` which no longer appears to be relevant,\r\n    as the extra args it specifies don't appear to be set before the\r\n    tool is built.\r\n\r\n  * Removes `prepare-jenkins` and `prepare-commercial`, as we can now\r\n    rely on the `prepare` rule again. The behavior of `prepare` will\r\n    change depending on the `_PREPARE_ARGS` varible, which is controlled\r\n    by different flags passed by our CI systems, `azure-pipelines.yaml`,\r\n    and `build.groovy`\r\n\r\n  * Introduces a new `prepareFlags` variable to build.groovy which is\r\n    used to control whether or not the \"prepare all\" (-a arg) should\r\n    be passed to xaprepare. This should not be specified when building\r\n    Jenkins PR builds, as they only build a subset of all supported ABIs\r\n    and frameworks. This should address the EmbeddedDSO test failures we\r\n    are encountering in Jenkins PR builds.\r\n\r\n  * Removes the MSBuild Auto Provision and ABI related args from make\r\n    invocations in azure-pipelines.yaml. Make variables will instead be\r\n    used to control these options.\r\n\r\n  * Removes the `prepare-update-mono` dependency from\r\n    `prepare-external-git-dependencies` as we should be able to call\r\n    this without needing to update mono.\r\n\r\n  * Adds a `prepare` dependency back to `jenkins`, now that the\r\n    `prepare-jenkins` step is no longer required."},{"Id":"9883418376","Type":"PullRequestEvent","CreatedAt":"2019-06-24T19:21:11","Actor":"pjcollins","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/3277","RelatedDescription":"Closed pull request \"[build] Add installer signing to azure-pipelines.yaml\" (#3277) at xamarin/xamarin-android","RelatedBody":"Context: https://github.com/xamarin/yaml-templates/pull/11\r\nContext: https://github.com/xamarin/xamarin-android/blob/afb351205999c3c7ea9754c57f9c6467688e881b/build-tools/automation/build.groovy#L209\r\nContext: https://github.com/xamarin/xamarin-android/blob/afb351205999c3c7ea9754c57f9c6467688e881b/build-tools/automation/build.groovy#L287\r\n\r\nImports existing signing logic from build.groovy so that we can\r\nconditionally sign .pkg and .vsix installers for public release."},{"Id":"9883415029","Type":"PullRequestEvent","CreatedAt":"2019-06-24T19:20:38","Actor":"pjcollins","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/3278","RelatedDescription":"Opened pull request \"[build] Add signing to azure-pipelines.yaml\" (#3278) at xamarin/xamarin-android","RelatedBody":"Context: https://github.com/xamarin/xamarin-android/blob/afb351205999c3c7ea9754c57f9c6467688e881b/build-tools/automation/build.groovy#L209\r\nContext: https://github.com/xamarin/xamarin-android/blob/afb351205999c3c7ea9754c57f9c6467688e881b/build-tools/automation/build.groovy#L287\r\n\r\nImports existing installer signing logic from build.groovy so that we\r\ncan conditionally sign .pkg and .vsix installers for public releases."},{"Id":"9882485345","Type":"PullRequestEvent","CreatedAt":"2019-06-24T16:58:28","Actor":"pjcollins","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/3277","RelatedDescription":"Opened pull request \"[build] Add installer signing to azure-pipelines.yaml\" (#3277) at xamarin/xamarin-android","RelatedBody":"Context: https://github.com/xamarin/yaml-templates/pull/11\r\nContext: https://github.com/xamarin/xamarin-android/blob/afb351205999c3c7ea9754c57f9c6467688e881b/build-tools/automation/build.groovy#L209\r\nContext: https://github.com/xamarin/xamarin-android/blob/afb351205999c3c7ea9754c57f9c6467688e881b/build-tools/automation/build.groovy#L287\r\n\r\nImports existing signing logic from build.groovy so that we can\r\nconditionally sign .pkg and .vsix installers for public release."},{"Id":"9882390614","Type":"IssuesEvent","CreatedAt":"2019-06-24T16:43:52","Actor":"jonathanpeppers","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/2979","RelatedDescription":"Closed issue \"ResolveSdks should also look for ANDROID_SDK_ROOT\" (#2979) at xamarin/xamarin-android","RelatedBody":"### Steps to Reproduce\r\nConsider a build server configuration on a Windows 10 machine:\r\n1. Have only Visual Studio 2017 Build Tools installed, including Mobile build tools\r\n2. Install AndroidSDK from zip file \r\n3. Set ANDROID_SDK_ROOT as described [here](https://developer.android.com/studio/command-line/variables#android_sdk_root)\r\n4. Build an android xamarin project using MsBuild\r\n\r\n### Expected Behavior\r\nThe project should be succesfully build\r\n\r\n### Actual Behavior\r\nBuild fails with C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\MSBuild\\Xamarin\\Android\\Xamarin.Android.Common.targets(703,2): error XA5300: The Android SDK Directory could not be found. Please set via /p:AndroidSdkDirectory. \r\n\r\nThe workaround is to set the Android SDK Tools registry key\r\n```\r\n[HKEY_LOCAL_MACHINE\\SOFTWARE\\WOW6432Node\\Android SDK Tools]\r\n\"Path\"=\"C:\\\\Program Files (x86)\\\\Android\\\\android-sdk\"\r\n\"StartMenuGroup\"=\"Android SDK Tools\"\r\n```\r\n\r\nBy looking into the AndroidSdkWindows class I saw that it only checks the registry for specific keys and then checks for some hardcoded paths. Why not checking the ANDROID_SDK_ROOT?\r\n\r\nThanks,\r\nSimo"},{"Id":"9882331068","Type":"IssuesEvent","CreatedAt":"2019-06-24T16:35:25","Actor":"jonathanpeppers","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/2982","RelatedDescription":"Closed issue \"Blank Xamarin.Forms App Template in 2019 builds slower\" (#2982) at xamarin/xamarin-android","RelatedBody":"### Steps to Reproduce\r\n\r\n1. Create a blank Xamarin.Forms app in 2019, build\r\n2. Do the same in 2017\r\n\r\nIn comparison, the notable difference I see (when using d8): `_CompileDex` goes from ~15.2s to ~18.2 seconds. The bulk of the build time here is `javac` + dexing.\r\n\r\nIf I compare the d8 calls:\r\n\r\n![image](https://user-images.githubusercontent.com/840039/56164367-29a62c00-5f96-11e9-800d-2394c9cc4ddb.png)\r\n\r\nThere are 20 _more_ jar files!!!\r\n\r\nAnd if you look at a diff, I think it is merely the set of `<PackageReference/>` causing it:\r\n```diff\r\n<ItemGroup>\r\n-    <PackageReference Include=\"Xamarin.Forms\" Version=\"3.1.0.697729\" />\r\n-    <PackageReference Include=\"Xamarin.Android.Support.Design\" Version=\"27.0.2.1\" />\r\n-    <PackageReference Include=\"Xamarin.Android.Support.v7.AppCompat\" Version=\"27.0.2.1\" />\r\n-    <PackageReference Include=\"Xamarin.Android.Support.v4\" Version=\"27.0.2.1\" />\r\n-    <PackageReference Include=\"Xamarin.Android.Support.v7.CardView\" Version=\"27.0.2.1\" />\r\n-    <PackageReference Include=\"Xamarin.Android.Support.v7.MediaRouter\" Version=\"27.0.2.1\" />\r\n+    <PackageReference Include=\"Xamarin.Forms\" Version=\"3.6.0.264807\" />\r\n+    <PackageReference Include=\"Xamarin.Android.Support.Design\" Version=\"28.0.0.1\" />\r\n+    <PackageReference Include=\"Xamarin.Android.Support.v7.AppCompat\" Version=\"28.0.0.1\" />\r\n+    <PackageReference Include=\"Xamarin.Android.Support.v4\" Version=\"28.0.0.1\" />\r\n+    <PackageReference Include=\"Xamarin.Android.Support.v7.CardView\" Version=\"28.0.0.1\" />\r\n+    <PackageReference Include=\"Xamarin.Android.Support.v7.MediaRouter\" Version=\"28.0.0.1\" />\r\n+    <PackageReference Include=\"Xamarin.Android.Support.Core.Utils\" Version=\"28.0.0.1\" />\r\n+    <PackageReference Include=\"Xamarin.Android.Support.CustomTabs\" Version=\"28.0.0.1\" />\r\n+    <PackageReference Include=\"Xamarin.Essentials\" Version=\"1.0.1\" />\r\n   </ItemGroup>\r\n```\r\n\r\nSee this project [here](https://github.com/jonathanpeppers/HelloWorld/compare/support-28).\r\n\r\n### Expected Behavior\r\n\r\nNew project templates in 2019 have comparable build times to 2017. It's OK to be a _little_ slower when adding a few libraries.\r\n\r\n### Actual Behavior\r\n\r\nFor some reason the default template has 20 _more_ jar files? I feel like there is something to investigate here."},{"Id":"9881504014","Type":"PullRequestEvent","CreatedAt":"2019-06-24T14:49:29","Actor":"jonathanpeppers","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/3273","RelatedDescription":"Merged pull request \"[Xamarin.Android.Build.Tasks] Restore ConvertResourcesCases skipping\" (#3273) at xamarin/xamarin-android","RelatedBody":"[02c07ed6][0] introduced a refinement on `<ConvertResourcesCases/>` to\r\nallow it to skip certain \"well-known\" assemblies that don't need\r\nprocessing.  It used an MSBuild item group to define the list of\r\nwell-known assemblies.  Each item in the group was a name of a\r\nwell-known assembly, without any file extension.\r\n\r\n02c07ed6 also included an automated test that checked the build output\r\nfor each of the well-known assemblies that should be skipped when\r\nbuilding a test project.  But one of the variable names in the test code\r\nwas unintentionally switched around, so the test was actually skipping\r\nover that check for the expected assemblies.\r\n\r\nLater, [b255da27][1] adapted the assembly skipping mechanism slightly to\r\nuse custom metadata to define the list of well-known assemblies.  This\r\nwas a step toward toward using custom metadata as a more general\r\ntechnique for various other scenarios too.\r\n\r\nJust by chance, there was a tiny missing change in b255da27, which meant\r\nthat the assembly skipping behavior got unintentionally disabled.  The\r\ntrouble was that the original item group in 02c07ed6 had been using just\r\nthe name of the assembly with no file extension, while the new commit\r\nused the full path to the assembly, including the file extension, and\r\nthere were a couple lines in `ResolveLibraryProjectImports.Extract()`\r\nthat were still searching through the list of \"well-known\" assemblies\r\nusing just the name rather than the full path.\r\n\r\nSeparately, starting in version 28.0.0, the Xamarin.Android.Support.v4\r\nNuGet package started to include a `monoandroid90/` target framework\r\ndirectory.  The `__AndroidLibraryProjects__.zip` embedded resource in\r\nthe `monoandroid90/Xamarin.Android.Support.v4.dll` assembly does *not*\r\ninclude a `res/` directory, so when the `$(TargetFrameworkVersion)` is\r\n`v9.0`, the Xamarin.Android.Support.v4 assembly is no longer passed to\r\n`<ConvertResourcesCases/>` at all.  Accordingly, that assembly name can\r\nnow be removed from the list of expected skipped assemblies in the\r\n`SkipConvertResourcesCases` test.\r\n\r\nI ran the updated `SkipConvertResourcesCases` test locally, first\r\n*without* the change in `<ResolveLibraryProjectImports/>` to confirm\r\nthat it failed, and then also *with* the change to verify that it\r\nsucceeded.\r\n\r\nI also checked that these changes successfully restored the performance\r\ngains from b255da27.\r\n\r\nResults with `$(AndroidUseAapt2)` enabled:\r\n\r\n\tBefore:\r\n\t3359 ms  ConvertResourcesCases                      2 calls\r\n\t2562 ms  ResolveLibraryProjectImports               1 calls\r\n\r\n\tAfter:\r\n\t  62 ms  ConvertResourcesCases                      2 calls\r\n\t2500 ms  ResolveLibraryProjectImports               1 calls\r\n\r\nResults with `$(AndroidUseAapt2)` disabled:\r\n\r\n\tBefore:\r\n\t3237 ms  ConvertResourcesCases                      1 calls\r\n\t3234 ms  ResolveLibraryProjectImports               1 calls\r\n\r\n\tAfter:\r\n\t  94 ms  ConvertResourcesCases                      1 calls\r\n\t2641 ms  ResolveLibraryProjectImports               1 calls\r\n\r\nThis was the Xamarin.Forms.Performance.Integration.Droid project in this\r\nrepo, using an initial clean build.\r\n\r\n[0]: https://github.com/xamarin/xamarin-android/commit/02c07ed6d9e0a2559d9948750ea798ff56db28e4\r\n[1]: https://github.com/xamarin/xamarin-android/commit/5f27d0cac299cf771cf4e815c4901c7ce768ad7c"},{"Id":"9879937718","Type":"IssuesEvent","CreatedAt":"2019-06-24T11:19:45","Actor":"tranb3r","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/3276","RelatedDescription":"Opened issue \"Build exception (The \"GenerateJavaStubs\" task failed unexpectedly) when using NetworkSecurityConfig ApplicationAttribute\" (#3276) at xamarin/xamarin-android","RelatedBody":"### Steps to Reproduce\r\n\r\n1. Create new xamarin android application\r\n2. Add [Application] attribute and set NetworkSecurityConfig value (@xml/network_security_config)\r\n3. Build project\r\n\r\n### Expected Behavior\r\n\r\nShould allow user to specify path to the networkSecurityConfig\r\n\r\n### Actual Behavior\r\n\r\nBuild fails (The \"GenerateJavaStubs\" task failed unexpectedly)\r\n\r\n### Version Information\r\n\r\nVisual studio 2019 16.1.3 (stable)\r\n\r\n### Log File\r\n\r\nXamarin.Android.Common.targets(2342,3): error MSB4018: The \"GenerateJavaStubs\" task failed unexpectedly.\r\nXamarin.Android.Common.targets(2342,3): error MSB4018: System.ArgumentNullException: Value cannot be null.\r\nXamarin.Android.Common.targets(2342,3): error MSB4018: Parameter name: fullName\r\nXamarin.Android.Common.targets(2342,3): error MSB4018:    at Mono.Cecil.AssemblyNameReference.Parse(String fullName)\r\nXamarin.Android.Common.targets(2342,3): error MSB4018:    at Xamarin.Android.Manifest.ManifestDocumentElement.ResolveType(String type, ICustomAttributeProvider provider, IAssemblyResolver resolver)\r\nXamarin.Android.Common.targets(2342,3): error MSB4018:    at Xamarin.Android.Manifest.ManifestDocumentElement1.<>c.<.cctor>b__25_12(Object value, ICustomAttributeProvider p, IAssemblyResolver r, Int32 v)\r\nXamarin.Android.Common.targets(2342,3): error MSB4018:    at Xamarin.Android.Manifest.ManifestDocumentElement1.ToAttributeValue(String name, T value, ICustomAttributeProvider provider, IAssemblyResolver resolver, Int32 targetSdkVersion)\r\nXamarin.Android.Common.targets(2342,3): error MSB4018:    at Xamarin.Android.Manifest.ManifestDocumentElement1.ToAttribute(String name, T value, String packageName, ICustomAttributeProvider provider, IAssemblyResolver resolver, Int32 targetSdkVersion)\r\nXamarin.Android.Common.targets(2342,3): error MSB4018:    at Xamarin.Android.Manifest.ManifestDocumentElement1.<>c__DisplayClass8_0.<ToElement>b__1(String e)\r\nXamarin.Android.Common.targets(2342,3): error MSB4018:    at System.Linq.Enumerable.WhereSelectEnumerableIterator`2.MoveNext()\r\nXamarin.Android.Common.targets(2342,3): error MSB4018:    at System.Linq.Enumerable.WhereEnumerableIterator1.MoveNext()\r\nXamarin.Android.Common.targets(2342,3): error MSB4018:    at System.Xml.Linq.XContainer.AddContentSkipNotify(Object content)\r\nXamarin.Android.Common.targets(2342,3): error MSB4018:    at Xamarin.Android.Manifest.ManifestDocumentElement1.ToElement(T value, ICollection1 specified, String packageName, ICustomAttributeProvider provider, IAssemblyResolver resolver, Int32 targetSdkVersion)\r\nXamarin.Android.Common.targets(2342,3): error MSB4018:    at Android.App.ApplicationAttribute.ToElement(IAssemblyResolver resolver, String packageName)\r\nXamarin.Android.Common.targets(2342,3): error MSB4018:    at Xamarin.Android.Tasks.ManifestDocument.CreateApplicationElement(XElement manifest, String applicationClass, List1 subclasses, List1 selectedWhitelistAssemblies)\r\nXamarin.Android.Common.targets(2342,3): error MSB4018:    at Xamarin.Android.Tasks.ManifestDocument.Merge(List1 subclasses, List1 selectedWhitelistAssemblies, String applicationClass, Boolean embed, String bundledWearApplicationName, IEnumerable1 mergedManifestDocuments)\r\nXamarin.Android.Common.targets(2342,3): error MSB4018:    at Xamarin.Android.Tasks.GenerateJavaStubs.Run(DirectoryAssemblyResolver res)\r\nXamarin.Android.Common.targets(2342,3): error MSB4018:    at Xamarin.Android.Tasks.GenerateJavaStubs.Execute()\r\nXamarin.Android.Common.targets(2342,3): error MSB4018:    at Microsoft.Build.BackEnd.TaskExecutionHost.Microsoft.Build.BackEnd.ITaskExecutionHost.Execute()\r\nXamarin.Android.Common.targets(2342,3): error MSB4018:    at Microsoft.Build.BackEnd.TaskBuilder.<ExecuteInstantiatedTask>d__26.MoveNext()\r\n"}],"ResultType":"GitHubEvent"},"Forms":{"Events":[{"Id":"9885923166","Type":"IssuesEvent","CreatedAt":"2019-06-25T04:45:16","Actor":"lekia","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/6648","RelatedDescription":"Opened issue \"[Bug] x:DataType do NOT accept markup extensions\" (#6648) at xamarin/Xamarin.Forms","RelatedBody":"<!-- Bug report best practices: https://github.com/xamarin/Xamarin.Forms/wiki/Submitting-Issues -->\r\n\r\n### Description\r\nAfter updating to latest preview 4.1.0.496342-pre2 from 4.0.0.425677, x:DataType do not allow anything but string, which means {x:Null} is not allowed either. I have to disable compile binding here since the target type is a generic one.\r\n\r\n### Steps to Reproduce\r\n\r\n1. Simply set an x:DataType to anything with markup.\r\n\r\n### Expected Behavior\r\nBuilding without errors.\r\n\r\n### Actual Behavior\r\nComplaining \"x:DataType expects a string literal\".\r\n\r\n### Basic Information\r\n\r\n- Version with issue: 4.1.0.496342-pre2\r\n- Last known good version: 4.0.0.425677\r\n- IDE: Visual Studio 2019\r\n- Platform Target Frameworks:\r\n  - UWP:  17763\r\n  - WPF .Net Framework 4.7.2\r\n- Nuget Packages: Xamarin.Forms\r\n\r\n### Screenshots\r\n![Annotation 2019-06-25 121951](https://user-images.githubusercontent.com/11898314/60069448-6be1ab80-9745-11e9-8315-db44f10e7bd8.jpg)\r\n\r\n<!-- If the issue is a visual issue, please include screenshots showing the problem if possible -->\r\n\r\n### Reproduction Link\r\n\r\n<!-- Please upload or provide a link to a reproduction case -->\r\n"},{"Id":"9885514522","Type":"IssuesEvent","CreatedAt":"2019-06-25T02:50:24","Actor":"hbraasch","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/6647","RelatedDescription":"Opened issue \"[Bug] \" (#6647) at xamarin/Xamarin.Forms","RelatedBody":"The Forms Editor placeholder using Visual Material renders incorrectly if used in more than on sub tab page\r\n\t\r\n### Description\r\nThe Xamarin Forms Editor placeholder string renders incorrect (the Placeholder text size stays the same size as Text-field text size, the Placeholder text is left tabbed and off-region) when: \r\n\t1. Using the Xamarin Forms Editor component on multiple tab pages\r\n\t2. When rendering on IOS, it renders fine on Android\r\n\t3. The text field is pre-filled with data (single or multi-line, does not matter)\r\n\t\r\n\t(An animated image showing the problem is attached)\r\n\t\r\n### Steps to Reproduce\r\n\r\n1. Create a Xamarin Forms Mobile app for Android and IOS. Add the Visual.Material nuget. Update the Forms and Visual.Material Nugets to latest.\r\n2. Create a startup tabbed page containing at least two sub-pages\r\n3. Place a single Editor component into a StackLayout on each tab page, set their Visual property to VisualMarker.Material\r\n4. Hardcode the Editor components Placeholder and Text properties with some data\r\n5. Add FormsMaterial.Init() to AppDelegate.cs\r\n6. Build for IOS and run on the simulator (e.g. iPhone XR -12.1)\r\n6. Notice the Editor component renders correctly in the first tab, then notice it renders incorrectly when navigating to any other tab.\r\n\r\n(A simple sample project demonstrating the problem is attached)\r\n\r\n### Expected Behavior\r\nThe Editor component shall display the Placeholder text left-aligned and smaller as the main Text on the first line\r\n### Actual Behavior\r\nThe Editor component displays the Placeholder text clipped and the same size as the main Text on the first line\r\n### Basic Information\r\n\r\n- Version with issue:\r\n- Last known good version: Do not know\r\n- IDE: Visual Studio Community 2019 Version 16.1.3\r\n- Platform Target Frameworks: \r\n  - iOS:  Xamarin.iOS and Xamarin.Mac SDK 12.10.0.153 (750a879)\r\n  - Android: N.A\r\n  - UWP:  N.A\r\n- Android Support Library Version: N/A\r\n- Nuget Packages: Xamarin.Forms 4.1.0.496342, Xamarin.Forms.Visual.Material 4.1.0.496342\r\n- Affected Devices: Only tried this on simulator with iPhone Xs iOS 12.2\r\n\r\n### Screenshots\r\n\r\n![AnimatedTabs](https://user-images.githubusercontent.com/7484186/60065400-22925b80-9747-11e9-91ff-38e86bf63d20.gif)\r\n\r\n\r\n### Reproduction Link\r\n\r\n[EditorVisualTester.zip](https://github.com/xamarin/Xamarin.Forms/files/3323337/EditorVisualTester.zip)\r\n\r\n\r\n\t\r\n\r\n\t"},{"Id":"9884818501","Type":"IssuesEvent","CreatedAt":"2019-06-24T23:39:02","Actor":"samhouts","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/4671","RelatedDescription":"Closed issue \"Xamarin Forms Native embedding Memory issue\" (#4671) at xamarin/Xamarin.Forms","RelatedBody":"<!-- Bug report best practices: https://github.com/xamarin/Xamarin.Forms/wiki/Submitting-Issues -->\r\n\r\n### Description\r\nI am trying to use Xamarin Forms pages in a Xamarin IOS Native app. To do that I am using the CreateViewController. The issue I am facing is that every time I push a new view controller, memory are allocated that are not released when I click on the back button. This results in that the app will crash. \r\n### Steps to Reproduce\r\n\r\n\r\nExplanation about attached image\r\n\r\n1. I am navigating back and fort to a Xamarin forms page (contains image and is created with xaml). I am doing this multiple times, and that is displayed with the stepping increase in memory consumption\r\n2. I am waiting to se if the memory is released, but that do not happen. I am then adding native uiviewcontrollers (contains one image) to the same navigation controller the same way as Xamarin forms.\r\n3. The memory are released for the native view controllers.\r\n\r\n![](https://us.v-cdn.net/5019960/uploads/editor/is/eau2f82g4q60.png)\r\n\r\nLink to testcode\r\n github.com/toupilsner/XamarinFormsEmbedded/blob/master/README.md\r\n\r\nXamairn Forms: 3.4.0\r\n"},{"Id":"9884683329","Type":"IssuesEvent","CreatedAt":"2019-06-24T23:04:30","Actor":"hartez","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/6461","RelatedDescription":"Closed issue \"[Bug] [Android] ContentView in CollectionView does not display anything on Android\" (#6461) at xamarin/Xamarin.Forms","RelatedBody":"<!-- Bug report best practices: https://github.com/xamarin/Xamarin.Forms/wiki/Submitting-Issues -->\r\n\r\n### Description\r\nUsing a CollectionView where the ItemTemplate has a ContentView with a Label does not display anything in the CollectionView. This seems to work on iOS.\r\n\r\n### Steps to Reproduce\r\n\r\n1.  Create a CollectionView\r\n2.  Set ItemTemplate:\r\n```csharp\r\n<CollectionView x:Name=\"colv\">\r\n    <CollectionView.ItemTemplate>\r\n         <DataTemplate>\r\n              <ContentView>\r\n                   <Label Text=\"{Binding Text}\"></Label>\r\n              </ContentView>\r\n         </DataTemplate>\r\n    </CollectionView.ItemTemplate>\r\n</CollectionView>\r\n```\r\n3.  Create a class:\r\n```csharp\r\npublic class T\r\n{\r\n    public string Text { get; set; }\r\n}\r\n```\r\n4. Create List and set ItemSource of CollectionView\r\n```csharp\r\nList<T> cc = new List<T>();\r\npublic MainPage()\r\n{\r\n    InitializeComponent();\r\n\r\n    for(int i = 0; i < 10; i++)\r\n    {\r\n        cc.Add(new T { Text = \"p\" + i });\r\n    }\r\n    colv.ItemsSource = cc;\r\n}\r\n```\r\n\r\n### Expected Behavior\r\nShow the items in the collectionview\r\n\r\n### Actual Behavior\r\nNothing is shown in the collectionview\r\n\r\n### Basic Information\r\n\r\n- Version with issue: 4.0.0.425677 \r\n- Last known good version: -\r\n- IDE: VS Mac, VS\r\n- Platform Target Frameworks: <!-- All that apply -->\r\n  - Android: 9.0 <!-- The version of the Android SDK you are compiling against, e.g. 7.1 --> \r\n- Android Support Library Version: <!-- if applicable -->\r\n- Affected Devices: tested with Motorola G6 Plus but seems to not work on any android device.\r\n\r\n### Reproduction Link\r\n[https://github.com/SergejDK/XFCollectionViewContentView](https://github.com/SergejDK/XFCollectionViewContentView)\r\n"}],"ResultType":"GitHubEvent"},"Macios":{"Events":[{"Id":"9884017034","Type":"PullRequestEvent","CreatedAt":"2019-06-24T20:55:03","Actor":"joconte","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/6416","RelatedDescription":"Opened pull request \"fix issue 4114\" (#6416) at xamarin/xamarin-macios","RelatedBody":"Fix this issue https://github.com/xamarin/xamarin-macios/issues/4114"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1143283413757190148","CreatedAt":"2019-06-24T22:23:01+00:00","UserScreenname":"xamarinhq","Text":"We've reevaluated our Xamarin .Android codebase and made changes that sped up builds and made smaller Dex Files. Se… https://t.co/H3JE59pryL","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":52,"FavoriteCount":28,"RawContent":null},{"Id":"1143177825882726403","CreatedAt":"2019-06-24T15:23:27+00:00","UserScreenname":"xamarinhq","Text":"Get better at building cross-platform mobile apps with the new Xamarin.Forms. Microsoft Learn is all new and a comp… https://t.co/Kb8hT5LkIZ","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":62,"FavoriteCount":28,"RawContent":null},{"Id":"1142066359947407362","CreatedAt":"2019-06-21T13:46:53+00:00","UserScreenname":"xamarinhq","Text":"Join the Xamarin team at this years largest #Xamarin conference, the Xamarin Developer Summit! July 11-12 in Housto… https://t.co/zcg70tbgE9","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":37,"FavoriteCount":17,"RawContent":null},{"Id":"1141695710716469249","CreatedAt":"2019-06-20T13:14:03+00:00","UserScreenname":"xamarinhq","Text":"Thanks to your feedback, #VS4Mac 8.2 has some really great improvements to the XAML editing experience; including i… https://t.co/vv0DVw9957","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":35,"FavoriteCount":8,"RawContent":null},{"Id":"1141064668477345794","CreatedAt":"2019-06-18T19:26:31+00:00","UserScreenname":"xamarinhq","Text":"On this episode of the #XamarinShow, @JamesMontemagno and #MSMVP @DanJSiegel show us a super-cool feature of Prism… https://t.co/GLEhnDlQjp","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":39,"FavoriteCount":15,"RawContent":null},{"Id":"1140735760875872256","CreatedAt":"2019-06-17T21:39:33+00:00","UserScreenname":"xamarinhq","Text":"We want to make sure you’re using the latest tooling. The new and improved Automatic Android SDK Management tool is… https://t.co/H0CSaxzj9o","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":62,"FavoriteCount":29,"RawContent":null},{"Id":"1140660631273652224","CreatedAt":"2019-06-17T16:41:01+00:00","UserScreenname":"xamarinhq","Text":"On the latest Xamarin.Essential API of the week show, we take a look at the File System Helpers API which contains… https://t.co/GOGKCwXu6S","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":33,"FavoriteCount":11,"RawContent":null},{"Id":"1139589442732285953","CreatedAt":"2019-06-14T17:44:30+00:00","UserScreenname":"xamarinhq","Text":"Keeping up w/the latest in #dotNET, C#, &amp; #Xamarin is easier than ever. \nThis week’s #XamarinPodcast includes:\n- hi… https://t.co/FDDO27QHDh","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":32,"FavoriteCount":11,"RawContent":null},{"Id":"1138875870553300995","CreatedAt":"2019-06-12T18:29:01+00:00","UserScreenname":"xamarinhq","Text":"We make it simple for .NET developers to build beautiful cross-platform apps, fast.\nTake a look at how Grial UI Kit… https://t.co/vceU8u475R","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":107,"FavoriteCount":48,"RawContent":null},{"Id":"1138511096380309504","CreatedAt":"2019-06-11T18:19:32+00:00","UserScreenname":"xamarinhq","Text":"This week on the #XamarinShow, @chewamanda, App Center Program Manager, shows us the latest features in App Center… https://t.co/VHxAknaumJ","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":28,"FavoriteCount":17,"RawContent":null},{"Id":"1138151096067792898","CreatedAt":"2019-06-10T18:29:01+00:00","UserScreenname":"xamarinhq","Text":"Join us at Xamarin Developer Summit - July 11-12. With 35+ sessions, there is something for everyone:\n- Mobile DevO… https://t.co/Ez5mDpM1Az","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":84,"FavoriteCount":35,"RawContent":null},{"Id":"1137049335273840640","CreatedAt":"2019-06-07T17:31:01+00:00","UserScreenname":"xamarinhq","Text":"Our cross-platform API library enables any mobile app that uses the Maps API to launch a map w/ a specific location… https://t.co/BWS4qeqtyU","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":87,"FavoriteCount":34,"RawContent":null},{"Id":"1136679096954449921","CreatedAt":"2019-06-06T16:59:49+00:00","UserScreenname":"xamarinhq","Text":"Join us live right now for another @dotnet #CommunityStandup with live demoes and QA from the #Xamarin team https://t.co/Umwxz8RtPj","Source":"<a href=\"https://www.elgato.com/gaming\" rel=\"nofollow\">Elgato Stream Deck</a>","RetweetCount":9,"FavoriteCount":5,"RawContent":null},{"Id":"1136666060189573120","CreatedAt":"2019-06-06T16:08:01+00:00","UserScreenname":"xamarinhq","Text":"On this week's Xamarin.Essential API of the week, we take a look at the Compass API; enabling you to monitor the de… https://t.co/6Iq1tNqo0B","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":46,"FavoriteCount":13,"RawContent":null},{"Id":"1136362715805552641","CreatedAt":"2019-06-05T20:02:38+00:00","UserScreenname":"xamarinhq","Text":"Now available... the pre-release version of Xamarin.Forms 4.1. And we're happy to say that CheckBox &amp; improved text… https://t.co/BGmdIAVxAO","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":155,"FavoriteCount":68,"RawContent":null},{"Id":"1135657873072148482","CreatedAt":"2019-06-03T21:21:51+00:00","UserScreenname":"xamarinhq","Text":"Jumpstart your next mobile dev projects by networking w/ your local community &amp; getting the latest updates about… https://t.co/39JBottYZu","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":44,"FavoriteCount":18,"RawContent":null},{"Id":"1134529085961621504","CreatedAt":"2019-05-31T18:36:27+00:00","UserScreenname":"xamarinhq","Text":"We're starting a new case study series. Today, we look at Valora View, a mobile app created by BBVA to help custome… https://t.co/Q0HeoB3chG","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":69,"FavoriteCount":22,"RawContent":null},{"Id":"1134188986229035010","CreatedAt":"2019-05-30T20:05:01+00:00","UserScreenname":"xamarinhq","Text":"What's better than sharing 80% of code across #iOS &amp; #Android apps w/ #Xamarin? ...building a backend powered by… https://t.co/EZc7s5adqh","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":130,"FavoriteCount":36,"RawContent":null}]}},"RunOn":"2019-06-25T05:31:01.0520358Z","RunDurationInMilliseconds":4559}