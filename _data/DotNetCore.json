{"Data":{"Blog":{"FeedItems":[{"Title":"Porting desktop apps to .NET Core","PublishedOn":"2019-05-28T16:00:55+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"Since I&#8217;ve been working with the community on porting desktop applications from .NET Framework to .NET Core, I&#8217;ve noticed that there are two camps of folks: some want a very simple and...","Href":"https://devblogs.microsoft.com/dotnet/porting-desktop-apps-to-net-core/","RawContent":null},{"Title":"The F# development home on GitHub is now dotnet/fsharp","PublishedOn":"2019-05-20T18:16:50+00:00","CommentsCount":4,"FacebookCount":0,"Summary":"TL;DR We&#8217;ve moved the F# GitHub repository from microsoft/visualfsharp to dotnet/fsharp, as specified in the corresponding RFC.\nF# has a somewhat strange history in its name and brand. If we...","Href":"https://devblogs.microsoft.com/dotnet/the-f-development-home-on-github-is-now-dotnet-fsharp/","RawContent":null},{"Title":"Create Interactive .NET Documentation with Try .NET","PublishedOn":"2019-05-16T20:01:47+00:00","CommentsCount":10,"FacebookCount":0,"Summary":"When it comes to developers&#8217; documentation, it is essential that we capture their interest and lead them down the path of success as soon as possible. Across multiple languages, developer...","Href":"https://devblogs.microsoft.com/dotnet/creating-interactive-net-documentation/","RawContent":null},{"Title":"Performance Improvements in .NET Core 3.0","PublishedOn":"2019-05-15T19:17:00+00:00","CommentsCount":41,"FacebookCount":0,"Summary":"Back when we were getting ready to ship .NET Core 2.0, I wrote a blog post exploring some of the many performance improvements that had gone into it. I enjoyed putting it together so much and received...","Href":"https://devblogs.microsoft.com/dotnet/performance-improvements-in-net-core-3-0/","RawContent":null},{"Title":"Default implementations in interfaces","PublishedOn":"2019-05-14T23:47:18+00:00","CommentsCount":43,"FacebookCount":0,"Summary":"Default implementations in interfaces\nWith last week&#8217;s posts Announcing .NET Core 3.0 Preview 5 and Visual Studio 2019 version 16.1 Preview 3, the last major feature of C# 8.0 is now available...","Href":"https://devblogs.microsoft.com/dotnet/default-implementations-in-interfaces/","RawContent":null},{"Title":".NET Core May 2019 Updates – 1.0.16, 1.1.14, 2.1.11 and 2.2.5","PublishedOn":"2019-05-14T19:06:45+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Today, we are releasing the .NET Core May 2019 Update. These updates contain security and reliability fixes. See the individual release notes for details on updated packages.\nNOTE: If you are a Visual...","Href":"https://devblogs.microsoft.com/dotnet/net-core-may-2019/","RawContent":null},{"Title":".NET Framework May 2019 Security and Quality Rollup","PublishedOn":"2019-05-14T18:29:22+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"Today, we are releasing the May 2019 Cumulative Update, Security and Quality Rollup, and Security Only Update.\nSecurity\nCVE-2019-0820 – Denial of Service Vulnerability\nA denial of service...","Href":"https://devblogs.microsoft.com/dotnet/net-framework-may-2019-security-and-quality-rollup/","RawContent":null},{"Title":"Introducing the new Microsoft.Data.SqlClient","PublishedOn":"2019-05-08T22:05:21+00:00","CommentsCount":10,"FacebookCount":0,"Summary":"This post was written by Vicky Harp, Program Manager on SqlClient and SQL Server Tools.\nThose of you who have been following .NET development closely have very likely seen Scott Hunter&#8217;s latest...","Href":"https://devblogs.microsoft.com/dotnet/introducing-the-new-microsoftdatasqlclient/","RawContent":null},{"Title":"Announcing Entity Framework 6.3 Preview with .NET Core Support","PublishedOn":"2019-05-08T22:00:28+00:00","CommentsCount":37,"FacebookCount":0,"Summary":"The first preview of the EF 6.3 runtime is now available in NuGet.\nNote that the package is versioned as 6.3.0-preview5. We plan to continue releasing previews of EF 6.3 every month in alignment with...","Href":"https://devblogs.microsoft.com/dotnet/announcing-entity-framework-6-3-preview-with-net-core-support/","RawContent":null},{"Title":"Introducing diagnostics improvements in .NET Core 3.0","PublishedOn":"2019-05-08T16:00:57+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"In .NET Core 3.0, we are introducing a suite of tools that utilize new features in the .NET runtime that make it easier to diagnose and solve performance problems.\nThese runtime features help you...","Href":"https://devblogs.microsoft.com/dotnet/introducing-diagnostics-improvements-in-net-core-3-0/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"9596433106","Type":"PullRequestEvent","CreatedAt":"2019-05-09T18:35:22","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/145","RelatedDescription":"Merged pull request \"Edits to DNN Platform Information\" (#145) at dotnet/foundation","RelatedBody":"Edits to reflect changes in repository structure with recent modifications to the overall project structure."},{"Id":"9583176004","Type":"PullRequestEvent","CreatedAt":"2019-05-08T04:08:41","Actor":"mitchelsellers","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/145","RelatedDescription":"Opened pull request \"Edits to DNN Platform Information\" (#145) at dotnet/foundation","RelatedBody":"Edits to reflect changes in repository structure with recent modifications to the overall project structure."},{"Id":"9560620210","Type":"PullRequestEvent","CreatedAt":"2019-05-03T20:10:38","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/143","RelatedDescription":"Merged pull request \"Add AngleSharp\" (#143) at dotnet/foundation","RelatedBody":"cc @jongalloway "},{"Id":"9560610143","Type":"PullRequestEvent","CreatedAt":"2019-05-03T20:08:41","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/141","RelatedDescription":"Merged pull request \"add links to ML.NET docs\" (#141) at dotnet/foundation","RelatedBody":"/cc @JRAlexander @shauheen \r\n\r\nTo match the info we have added for other projects"},{"Id":"9560608015","Type":"PullRequestEvent","CreatedAt":"2019-05-03T20:08:15","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/144","RelatedDescription":"Merged pull request \"Add DotVVM\" (#144) at dotnet/foundation","RelatedBody":"cc @jongalloway "},{"Id":"9557840000","Type":"PullRequestEvent","CreatedAt":"2019-05-03T12:47:26","Actor":"tomasherceg","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/144","RelatedDescription":"Opened pull request \"Add DotVVM\" (#144) at dotnet/foundation","RelatedBody":"cc @jongalloway "},{"Id":"9523802619","Type":"PullRequestEvent","CreatedAt":"2019-04-27T20:23:58","Actor":"FlorianRappl","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/143","RelatedDescription":"Opened pull request \"Add AngleSharp\" (#143) at dotnet/foundation","RelatedBody":"cc @jongalloway "}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"9625371249","Type":"IssuesEvent","CreatedAt":"2019-05-14T19:27:47","Actor":"leecow","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/115","RelatedDescription":"Opened issue \"May 2019 .NET Updates\" (#115) at dotnet/announcements","RelatedBody":"The following .NET updates were released in May 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Core\r\n\r\n* .NET Core 1.0.16 and .NET Core SDK 1.1.13( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.0/1.0.16/1.0.16.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/1.0) )\r\n\r\n* .NET Core 1.1.12 and .NET Core SDK 1.1.13 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.1/1.1.13/1.1.13.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/1.1) )\r\n\r\n* .NET Core 2.1.11 and .NET Core SDK ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.11/2.1.11.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.1) )\r\n\r\n* .NET Core 2.2.5 and .NET Core SDK ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.5/2.2.5.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.2) )\r\n\r\nA discussion issue is available at [core/2727](https://github.com/dotnet/core/issues/2727)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)"},{"Id":"9625048568","Type":"IssuesEvent","CreatedAt":"2019-05-14T18:38:24","Actor":"TaraOverfield","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/114","RelatedDescription":"Opened issue \"May 2019 .NET Updates\" (#114) at dotnet/announcements","RelatedBody":"# May 2019 .NET Updates\r\n\r\nThe following .NET updates were released in May 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n* [.NET Framework May 2019 Security and Quality Rollup - May 14, 2019](https://devblogs.microsoft.com/dotnet/net-framework-may-2019-security-and-quality-rollup/)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)"},{"Id":"9624436763","Type":"IssuesEvent","CreatedAt":"2019-05-14T17:06:25","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/113","RelatedDescription":"Opened issue \"Microsoft Security Advisory CVE-2019-0981: .NET Core Denial of Service Vulnerability\" (#113) at dotnet/announcements","RelatedBody":"# Microsoft Security Advisory CVE-2019-0981: .NET Core Denial of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core and ASP.NET Core 1.0, 1.1, 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nA denial of service vulnerability exists when .NET Core and ASP.NET Core improperly handle web requests. An attacker who successfully exploited this vulnerability could cause a denial of service against a .NET Core and ASP.NET Core application. The vulnerability can be exploited remotely, without authentication.\r\n\r\nA remote unauthenticated attacker could exploit this vulnerability by issuing specially crafted requests to a .NET Core application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core and ASP.NET Core web applications handle web requests.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/Home/ **TBD**\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nThere are no mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the System.Private.Uri package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.Private.Uri | 4.3.0, 4.3.1 | 4.3.2\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nThe affected assemblies are part of .NET Core. If you are running a vulnerable version of .NET Core you may be affected.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nTo fix the issue please install the latest version of .NET Core. If you have multiple versions of .NET Core installed you will need to install multiple runtimes, or SDKs depending on what you have installed.\r\n\r\nIf you have .NET Core 2.0 or greater installed you can list the versions you have installed by running the `dotnet --info` command. You will see output like the following;\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview3-010431\r\n Commit:    d72abce213\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18362\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview3-010431\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview3-27503-5\r\n  Commit:  3844df9537\r\n\r\n.NET Core SDKs installed:\r\n  1.1.13 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.602 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.202 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview3-010431 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\\\r\n  Microsoft.AspNetCore.All 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview3-19153-02 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.15 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview3-27503-5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview3-27504-2 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your version of .NET Core does not support the `dotnet --info` command then you have either .NET Core 1.0 or .NET Core 1.1 installed.\r\n\r\n* For machines running .NET Core 1.0 you should download Runtime 1.0.16 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.0.\r\n* For machines running .NET Core 1.1 you should download Runtime 1.1.13 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.1.\r\n* For machines running .NET 2.1 you should download Runtime 2.1.11 or SDK 2.1.507 for Visual Studio 2017 or SDK 2.1.604 for Visual Studio 2019 from https://* dotnet.microsoft.com/download/dotnet-core/2.1\r\n* For machines running .NET 2.2 you should download Runtime 2.2.5 or SDK 2.2.107 for Visual Studio 2017 or SDK 2.2.204 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.2.\r\n\r\nOnce you have installed the updated runtime or SDK you should restart your apps for the update to take effect.\r\n\r\nIf you have [pinned your application](https://docs.microsoft.com/en-us/dotnet/core/versions/selection) to a specific version of the runtime you must update your app, recompile and redeploy it for the update to take effect.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgments\r\n\r\n[Nemanja Mijailovic](https://mijailovic.net/)\r\n\r\n### External Links\r\n\r\n[CVE-2019-0981](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0981)\r\n\r\n### Revisions\r\n\r\nV1.0 (May 14, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-05-14_"},{"Id":"9624425934","Type":"IssuesEvent","CreatedAt":"2019-05-14T17:04:45","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/112","RelatedDescription":"Opened issue \"Microsoft Security Advisory CVE-2019-0980: .NET Core Denial of Service Vulnerability\" (#112) at dotnet/announcements","RelatedBody":"# Microsoft Security Advisory CVE-2019-0980: .NET Core Denial of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core and ASP.NET Core 1.0, 1.1, 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nA denial of service vulnerability exists when .NET Core and ASP.NET Core improperly handle web requests. An attacker who successfully exploited this vulnerability could cause a denial of service against a .NET Core and ASP.NET Core application. The vulnerability can be exploited remotely, without authentication.\r\n\r\nA remote unauthenticated attacker could exploit this vulnerability by issuing specially crafted requests to a .NET Core application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core and ASP.NET Core web applications handle web requests.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/Home/ **TBD**\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nThere are no mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the System.Private.Uri package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.Private.Uri | 4.3.0, 4.3.1 | 4.3.2\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nThe affected assemblies are part of .NET Core. If you are running a vulnerable version of .NET Core you may be affected.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nTo fix the issue please install the latest version of .NET Core. If you have multiple versions of .NET Core installed you will need to install multiple runtimes, or SDKs depending on what you have installed.\r\n\r\nIf you have .NET Core 2.0 or greater installed you can list the versions you have installed by running the `dotnet --info` command. You will see output like the following;\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview3-010431\r\n Commit:    d72abce213\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18362\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview3-010431\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview3-27503-5\r\n  Commit:  3844df9537\r\n\r\n.NET Core SDKs installed:\r\n  1.1.13 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.602 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.202 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview3-010431 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\\\r\n  Microsoft.AspNetCore.All 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview3-19153-02 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.15 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview3-27503-5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview3-27504-2 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your version of .NET Core does not support the `dotnet --info` command then you have either .NET Core 1.0 or .NET Core 1.1 installed.\r\n\r\n* For machines running .NET Core 1.0 you should download Runtime 1.0.16 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.0.\r\n* For machines running .NET Core 1.1 you should download Runtime 1.1.13 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.1.\r\n* For machines running .NET 2.1 you should download Runtime 2.1.11 or SDK 2.1.507 for Visual Studio 2017 or SDK 2.1.604 for Visual Studio 2019 from https://* dotnet.microsoft.com/download/dotnet-core/2.1\r\n* For machines running .NET 2.2 you should download Runtime 2.2.5 or SDK 2.2.107 for Visual Studio 2017 or SDK 2.2.204 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.2.\r\n\r\nOnce you have installed the updated runtime or SDK you should restart your apps for the update to take effect.\r\n\r\nIf you have [pinned your application](https://docs.microsoft.com/en-us/dotnet/core/versions/selection) to a specific version of the runtime you must update your app, recompile and redeploy it for the update to take effect.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgments\r\n\r\n[Nemanja Mijailovic](https://mijailovic.net/)\r\n\r\n### External Links\r\n\r\n[CVE-2019-0980](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0980)\r\n\r\n### Revisions\r\n\r\nV1.0 (May 14, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-05-14_"},{"Id":"9624413462","Type":"IssuesEvent","CreatedAt":"2019-05-14T17:02:57","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/111","RelatedDescription":"Opened issue \"Microsoft Security Advisory CVE-2019-0820: .NET Core Denial of Service Vulnerability\" (#111) at dotnet/announcements","RelatedBody":"# Microsoft Security Advisory CVE-2019-0820: .NET Core Denial of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 1.0, 1.1, 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nA denial of service vulnerability exists when .NET Core improperly process RegEx strings. An attacker who successfully exploited this vulnerability could cause a denial of service against a .NET application.\r\n\r\nA remote unauthenticated attacker could exploit this vulnerability by issuing specially crafted requests to a .NET Core application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core applications handle RegEx string processing.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/Home/ **TBD**\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nThere are no mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the System.Private.Uri package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.Text.RegularExpressions.dll | 4.3.0 | 4.3.1\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nThe affected assemblies are part of .NET Core. If you are running a vulnerable version of .NET Core you may be affected.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nTo fix the issue please install the latest version of .NET Core. If you have multiple versions of .NET Core installed you will need to install multiple runtimes, or SDKs depending on what you have installed.\r\n\r\nIf you have .NET Core 2.0 or greater installed you can list the versions you have installed by running the `dotnet --info` command. You will see output like the following;\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview3-010431\r\n Commit:    d72abce213\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18362\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview3-010431\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview3-27503-5\r\n  Commit:  3844df9537\r\n\r\n.NET Core SDKs installed:\r\n  1.1.13 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.602 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.202 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview3-010431 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\\\r\n  Microsoft.AspNetCore.All 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview3-19153-02 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.15 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview3-27503-5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview3-27504-2 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your version of .NET Core does not support the `dotnet --info` command then you have either .NET Core 1.0 or .NET Core 1.1 installed.\r\n\r\n* For machines running .NET Core 1.0 you should download Runtime 1.0.16 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.0.\r\n* For machines running .NET Core 1.1 you should download Runtime 1.1.13 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.1.\r\n* For machines running .NET 2.1 you should download Runtime 2.1.11 or SDK 2.1.507 for Visual Studio 2017 or SDK 2.1.604 for Visual Studio 2019 from https://* dotnet.microsoft.com/download/dotnet-core/2.1\r\n* For machines running .NET 2.2 you should download Runtime 2.2.5 or SDK 2.2.107 for Visual Studio 2017 or SDK 2.2.204 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.2.\r\n\r\nOnce you have installed the updated runtime or SDK you should restart your apps for the update to take effect.\r\n\r\nIf you have [pinned your application](https://docs.microsoft.com/en-us/dotnet/core/versions/selection) to a specific version of the runtime you must update your app, recompile and redeploy it for the update to take effect.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2019-0820](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0820)\r\n\r\n### Revisions\r\n\r\nV1.0 (May 14, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-05-14_"},{"Id":"9473320861","Type":"IssuesEvent","CreatedAt":"2019-04-19T01:16:11","Actor":"MichaelSimons","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/110","RelatedDescription":"Opened issue \"# New images for .NET Framework 4.8\" (#110) at dotnet/announcements","RelatedBody":"# New images for .NET Framework 4.8\r\n\r\nNew images have been released with support for [.NET Framework 4.8 runtime and SDK](https://devblogs.microsoft.com/dotnet/announcing-the-net-framework-4-8/).\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [Microsoft/dotnet-framework-docker#271](https://github.com/Microsoft/dotnet-framework-docker/issues/271)\r\n\r\n## Details\r\n* Pull request: #270\r\n\r\nYou can access these new images with the following tags:\r\n* `mcr.microsoft.com/dotnet/framework/runtime:4.8`\r\n* `mcr.microsoft.com/dotnet/framework/sdk:4.8`\r\n\r\nIn addition, the `latest` tag has been updated to refer to these new 4.8 images.\r\n\r\nCheck out the readme files for more information on the latest tags:\r\n* [Runtime](https://github.com/Microsoft/dotnet-framework-docker/blob/master/README.runtime.md)\r\n* [SDK](https://github.com/Microsoft/dotnet-framework-docker/blob/master/README.sdk.md)\r\n\r\nThe [3.5 SDK](https://github.com/Microsoft/dotnet-framework-docker/tree/master/3.5/sdk) images are intended to always contain the latest .NET Framework SDK and have also been updated to use the 4.8 SDK."}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"9731894631","Type":"PullRequestEvent","CreatedAt":"2019-05-31T04:22:55","Actor":"franksinankaya","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/24878","RelatedDescription":"Opened pull request \"signedness issue in comparison\" (#24878) at dotnet/coreclr","RelatedBody":"@am11 @janvorli @jkotas "},{"Id":"9731821237","Type":"PullRequestEvent","CreatedAt":"2019-05-31T03:59:11","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/24876","RelatedDescription":null,"RelatedBody":""},{"Id":"9731821104","Type":"PullRequestEvent","CreatedAt":"2019-05-31T03:59:09","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/pull/24876","RelatedDescription":"Closed pull request \"Delete dead code\" (#24876) at dotnet/coreclr","RelatedBody":""},{"Id":"9731787900","Type":"IssuesEvent","CreatedAt":"2019-05-31T03:48:41","Actor":"benaadams","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/24877","RelatedDescription":"Opened issue \"CrossGen: Arithmetic, casting or conversion operation overflowed or underflowed.\" (#24877) at dotnet/coreclr","RelatedBody":"\r\nFor coreclr:\r\n\r\n`> crossgen.exe System.Private.CoreLib.dll`\r\n```\r\nArithmetic, casting or conversion operation overflowed or underflowed. (0x80131516)\r\n while compiling method CLRIKeyValuePairImpl`2.ToString\r\nArithmetic, casting or conversion operation overflowed or underflowed. (0x80131516)\r\n while compiling method EventRegistrationTokenTable`1.RemoveEventHandler\r\nArithmetic, casting or conversion operation overflowed or underflowed. (0x80131516)\r\n while compiling method NullableEqualityComparer`1.GetHashCode\r\nArithmetic, casting or conversion operation overflowed or underflowed. (0x80131516)\r\n while compiling method NullableEqualityComparer`1.GetHashCode\r\nArithmetic, casting or conversion operation overflowed or underflowed. (0x80131516)\r\n while compiling method EventRegistrationTokenTable`1.RemoveEventHandler\r\nArithmetic, casting or conversion operation overflowed or underflowed. (0x80131516)\r\n while compiling method CLRIKeyValuePairImpl`2.ToString\r\n```"},{"Id":"9731762607","Type":"PullRequestEvent","CreatedAt":"2019-05-31T03:40:52","Actor":"jkoritzinsky","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/24872","RelatedDescription":"Merged pull request \"Check that we are using a valid IDispatch invocation flag earlier\" (#24872) at dotnet/coreclr","RelatedBody":"Limit the amount of work we do when we're going to return early anyway due to an invalid IDispatch invocation type.\r\n"},{"Id":"9731453280","Type":"PullRequestEvent","CreatedAt":"2019-05-31T02:11:40","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/24876","RelatedDescription":"Opened pull request \"Delete dead code\" (#24876) at dotnet/coreclr","RelatedBody":""},{"Id":"9731440910","Type":"PullRequestEvent","CreatedAt":"2019-05-31T02:07:52","Actor":"jashook","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/24870","RelatedDescription":"Merged pull request \"Fix #24867\" (#24870) at dotnet/coreclr","RelatedBody":"Pre SDK 3.0, a project type that is not .csproj would not include Directory.Build.targets. Change empty.proj to empty.csproj to allow source build, which uses a 2.1 sdk to build, correctly import Directory.Build.targets.\r\n\r\nFixes #24867 "},{"Id":"9731440896","Type":"IssuesEvent","CreatedAt":"2019-05-31T02:07:52","Actor":"jashook","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/24867","RelatedDescription":"Closed issue \"Coreclr fails to build with a 2.1 .Net sdk\" (#24867) at dotnet/coreclr","RelatedBody":"This currently only affects source-build as we are using the 3.0 sdk for coreclr currently. This does mean however, that coreclr will fail to build through source-build currently."},{"Id":"9731343314","Type":"PullRequestEvent","CreatedAt":"2019-05-31T01:38:35","Actor":"AaronRobinsonMSFT","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/24863","RelatedDescription":"Merged pull request \"Remove unused code in vm/util.*\" (#24863) at dotnet/coreclr","RelatedBody":""}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"9730837300","Type":"PullRequestEvent","CreatedAt":"2019-05-30T23:09:35","Actor":"johnbeisner","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/11452","RelatedDescription":"Opened pull request \"Run install-script tests only when merging into master.\" (#11452) at dotnet/cli","RelatedBody":"Run install-script tests only when merging into master.\r\n"},{"Id":"9729452250","Type":"IssuesEvent","CreatedAt":"2019-05-30T18:59:52","Actor":"KathleenDollard","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/11376","RelatedDescription":"Closed issue \"Global tools should be allowed to update themselves\" (#11376) at dotnet/cli","RelatedBody":"I previously opened https://github.com/dotnet/cli/issues/11375 but on the wrong account, so reopening here.\r\n\r\nThis is handy for making sure that someone using your tool doesn't need to understand the dotnet cli to update their tools (we can simply provide useful contextual information from our global tool that guides them through the process). Typically, something like a `<toolName> update` is less verbose and easier to remember than `dotnet tool install -g <toolName>`). \r\n\r\n## Steps to reproduce\r\n* Create a global tool which allows for an update command (`dotnet tool install -g <toolName>`)\r\n* Publish version 0.0.0 of the tool\r\n* Implement the update command in such a way that it invokes `dotnet tool update -g <toolName>` to update to the latest version of the tool\r\n* Install version 0.0.0 of the tool\r\n* Publish version 0.0.1 of the tool \r\n* Run the update command (`<toolName> update`)\r\n\r\n## Expected  behavior\r\n* The tool can update itself successfully\r\n* Any future invocations of the tool use the updated version \r\n\r\n## Actual behavior\r\n```\r\nFailed to uninstall tool package '<toolName>': Access to the path '<userPath>\\.dotnet\\tools\\.store\\<toolName>\\0.0.0' is denied\r\n```\r\n\r\n## Environment data\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.104\r\n Commit:    73f036d4ac\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.104\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.2\r\n  Commit:  a4fd7b2c84\r\n\r\n.NET Core SDKs installed:\r\n  2.1.201 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.202 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.302 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.400 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.401 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.402 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.403 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.500 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.503 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.504 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.505 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.602 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.104 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.0.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.3-servicing-26724-03 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\n\r\n\r\n\r\n\r\n\r\n"},{"Id":"9728829522","Type":"IssuesEvent","CreatedAt":"2019-05-30T17:26:16","Actor":"peterhuene","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/11425","RelatedDescription":"Closed issue \"Windows Forms and WPF project templates should not show up if current OS isn't Windows\" (#11425) at dotnet/cli","RelatedBody":"We are not planning to support building Windows Forms and WPF projects on non-Windows operating systems (at least for now): #10842 \r\n\r\nGiven that, we should not include the `winforms` and `wpf` project templates for non-Windows builds of the .NET Core SDK.\r\n\r\n"},{"Id":"9726945255","Type":"PullRequestEvent","CreatedAt":"2019-05-30T13:00:46","Actor":"dotnet-maestro[bot]","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/11451","RelatedDescription":"Merged pull request \"[master] Update dependencies from dotnet/templating\" (#11451) at dotnet/cli","RelatedBody":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/templating\r\n- **Build**: 20190529.2\r\n- **Date Produced**: 5/29/2019 10:17 PM\r\n- **Commit**: cbe9ed1639f193a075beeca6e6e6aff121a08382\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.TemplateEngine.Cli** -> 1.0.2-beta5.19279.2\r\n\r\n"}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"9731294853","Type":"IssuesEvent","CreatedAt":"2019-05-31T01:23:47","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/131","RelatedDescription":"Closed issue \"What is the definition of supporting a specific .NET Standard version?\" (#131) at dotnet/standard","RelatedBody":"The [introducing .NET Standard](https://blogs.msdn.microsoft.com/dotnet/2016/09/26/introducing-net-standard/) blog entry states:\r\n\r\n> NET Standard is a set of APIs that all .NET platforms have to implement in order to gain access to the .NET library ecosystem... Optional APIs aren’t part of .NET Standard.\r\n\r\nThis implies, but does not state, that the implementation has to fulfill the contract of the original API.\r\n\r\nThe [Review board documentation](https://github.com/dotnet/standard/blob/master/docs/review-board/README.md) states:\r\n\r\n> If a library is written in pure IL (for example C#, VB.NET, F# etc.), and targets .NET Standard, then it can run across all current and future .NET platforms with no code changes.\r\n\r\nThis goal would require that implementations do fulfill the contract of the original API.\r\n\r\nHowever the [README](https://github.com/dotnet/standard/blob/master/docs/netstandard-20/README.md#net-framework-461-supporting-net-standard-20) states:\r\n\r\n> .NET Framework 4.6.1 will allow referencing binaries that are compiled against .NET Standard 2.0\r\n\r\nAnd [this comment on a closed issue](https://github.com/dotnet/standard/issues/64#issuecomment-253933499) states:\r\n\r\n> \"What will happen when a .NET Standard 2.0-targeted program runs on .NET Framework 4.6.1 which doesn't have all the capabilities? Will it crash?\" Yes, the program will throw a MissingMemberException, if you call one of the ~40 members that aren't available there. If that's unhandled, the program will crash.\r\n\r\nLet's ignore whether or not that's a Good Thing or not, or whether .NET 4.6.1 will claim to support the standard; I don't have issue with what a particular platform is doing or claiming.\r\n\r\nMy question is, what is the standard's own definition of support? Say a platform claims support of .NET Standard x.y; how do we evaluate whether it genuinely does? What does support mean, in the standard's view? Can all other platforms supporting x.y take the same approach? What in the standard for x.y prevents a new platform from claiming support for a particular standard version by stubbing out 15,000 methods with NotSupportedExceptions?\r\n\r\nCould the .NET Standard, as a document, body or otherwise, take a view as to what qualifies as supporting a specific standard version, and commit that to the standard? It would make sense for that definition of support to be part of the specific standard version."},{"Id":"9731287557","Type":"IssuesEvent","CreatedAt":"2019-05-31T01:21:33","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/101","RelatedDescription":"Closed issue \"Missing ObsoleteAttribute for some members/types\" (#101) at dotnet/standard","RelatedBody":"Some types/members have Obsolete attributes in corefx but they don't have them in standard, so they should be added. Here is a list of the ones I found:\r\n```c#\r\npublic sealed class BStrWrapper\r\npublic enum ClassInterfaceType.AutoDispatch\r\npublic enum ClassInterfaceType.AutoDual\r\npublic class ComAwareEventInfo\r\npublic sealed class ComEventInterfaceAttribute\r\npublic static class ComEventsHelper\r\npublic enum ComInterfaceType.InterfaceIsDual\r\npublic enum ComInterfaceType.InterfaceIsIDispatch\r\npublic sealed class ComSourceInterfacesAttribute\r\npublic sealed class CurrencyWrapper\r\npublic enum CustomQueryInterfaceMode\r\npublic enum CustomQueryInterfaceResult\r\npublic sealed class DispatchWrapper\r\npublic sealed class ErrorWrapper\r\npublic interface ICustomAdapter\r\npublic interface ICustomQueryInterface\r\npublic static class Marshal.* (A lot of methods in this class)\r\npublic sealed class UnknownWrapper\r\npublic enum UnmanagedType.* (All of the fields here)\r\npublic enum VarEnum\r\npublic sealed class VariantWrapper\r\npublic enum SslProtocols.Ssl2\r\npublic enum SslProtocols.Ssl3\r\n```\r\n\r\ncc: @weshaggard @danmosemsft "},{"Id":"9731247102","Type":"PullRequestEvent","CreatedAt":"2019-05-31T01:08:57","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/1219","RelatedDescription":"Opened pull request \"Add HttpResponseMessage.TrailingHeaders\" (#1219) at dotnet/standard","RelatedBody":"Fixes #1144\r\n\r\n/cc @JamesNK @davidfowl @davidsh @karelz "},{"Id":"9730933448","Type":"IssuesEvent","CreatedAt":"2019-05-30T23:34:50","Actor":"wtgodbe","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/300","RelatedDescription":"Closed issue \"Binary serialization is broken when building against netstandard and running on netfx.\" (#300) at dotnet/standard","RelatedBody":"If an assembly is built against netstandard and run it against netfx (desktop) and it has a type marked as Serialized and this types have any of the event methods that use either `OnDeserializedAttribute`, `OnSerializingAttribute`, `OnSerializedAttribute`, and `OnDeserializingAttribute` it would throw an exception like this one: \r\n\r\n```\r\nType <type name> in assembly <assembly name> has method <method name> with an incorrect signature for the serialization attribute that it is decorated with\r\n```\r\n\r\nThis would happen even if the method follows the guidelines stated in the msdn documentation:\r\n> To use the OnSerializingAttribute, the method must contain a StreamingContext parameter. \r\n\r\nWe are currently hitting this issue on the `System.Runtime.Serialization.Formatters.Tests` that have a type with this characteristics ([source code](https://github.com/dotnet/corefx/blob/a9bcc7965f6da027cd23d5d74c14b4ef6c61b313/src/System.Runtime.Serialization.Formatters/tests/SerializationTypes.cs#L321-L342)) when the test is built against netstandard and we run it against netfx.\r\n\r\nAfter investigating with @weshaggard he found out that there a bug in the `methodtablebuilder.cpp` when verifying the signature for this method (requiring a `StreamingContext` parameter) it doesn't follow the typeforwards correctly on the case it was defined on a shim like in the case of netstandard that is a typeforward to mscorlib so it throws an exception that the method signature is bad. \r\n\r\nThis bug is in Full Framework VM but we should decide if we want to document that we don't support applications/libraries using binary serialization built against netstandard and running on netfx.\r\n\r\nSee: https://github.com/dotnet/corefx/issues/17575#issuecomment-293657902\r\n  "},{"Id":"9730899925","Type":"IssuesEvent","CreatedAt":"2019-05-30T23:25:47","Actor":"wtgodbe","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/418","RelatedDescription":"Closed issue \"Build error when using \"Generate serialization assembly\" option in a .NET Standard class library project \" (#418) at dotnet/standard","RelatedBody":"Hello,\r\n\r\nI'm using Visual Studio 2017 Preview (15.3.0 Preview 3.0) and Microsoft .NET Core SDK 2.0.0 Preview 2.\r\n\r\nWhen I try to build a class library project targeting .NET Standard 2.0 and having **GenerateSerializationAssemblies** option set to _On_, I get the following build error:\r\n\r\n> SGEN : error : An attempt was made to load an assembly with an incorrect format: C:\\Users\\max62689\\.nuget\\packages\\netstandard.library\\2.0.0-preview2-25401-01\\build\\netstandard2.0\\ref\\netstandard.dll.\r\n\r\nThe same happens if I'm using this option in a class library targeting .NET Framework 4.6.1 but referencing a .NET Standard 2.0 library.\r\n\r\nIs this an expected behaviour?"},{"Id":"9730897688","Type":"IssuesEvent","CreatedAt":"2019-05-30T23:25:12","Actor":"wtgodbe","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/437","RelatedDescription":"Closed issue \"Could not load file or assembly 'System.Net.Http, Version=4.1.1.1\" (#437) at dotnet/standard","RelatedBody":"I am building a .Net standard library, which builds fine but on testing I get this error\r\n\r\n`\r\n  HResult=-2147024894\r\n  Message=Could not load file or assembly 'System.Net.Http, Version=4.1.1.1, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a' or one of its dependencies. The system cannot find the file specified.\r\n  Source=Library Trial`\r\nI have installed [System.Net.Http Nuget Package](https://www.nuget.org/packages/System.Net.Http/) still no success. Its a fresh project so what must I be doing wrong"},{"Id":"9730896277","Type":"IssuesEvent","CreatedAt":"2019-05-30T23:24:48","Actor":"wtgodbe","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/450","RelatedDescription":"Closed issue \"Add System.ComponentModel.DataAnnotations to .NET Standard\" (#450) at dotnet/standard","RelatedBody":"I have started to upgrade our Domain / Logic libraries from PCL and full .NET to .NET Standard 2.0 libraries. Unfortunately, just one dependency is missing: `System.ComponentModel.DataAnnotations`.\r\n\r\nPlease add `System.ComponentModel.DataAnnotations` to the next version of .NET Standard so that I can upgrade my libraries."},{"Id":"9730890169","Type":"IssuesEvent","CreatedAt":"2019-05-30T23:23:09","Actor":"wtgodbe","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/474","RelatedDescription":"Closed issue \"The type 'Attribute' is defined in an assembly that is not referenced.\" (#474) at dotnet/standard","RelatedBody":"I'm encountering this error when using MSTest and the Microsoft.AspNetCore.TestHost. It all works fine until I call the TestServer to render a view.\r\n\r\nI'm using VS2017 15.3 with the .NET Core 2.0 Sdk with my net.core app targeting .NET Framework 4.6.1.\r\nAny advise on how I might fix this?\r\n\r\n```\r\n\"Microsoft.AspNetCore.Mvc.Razor.Compilation.CompilationFailedException: One or more compilation failures occurred:\\r\\ne3s05cht.itf(4,62): error CS0012: The type 'Attribute' is defined in an assembly that is not referenced. You must add a reference to assembly 'netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51'.\\r\\ne3s05cht.itf(4,81): error CS0518: Predefined type 'System.String' is not defined or imported\\r\\ne3s05cht.itf(4,109): error CS0518: Predefined type 'System.Type' is not defined or imported\\r\\ne3s05cht.itf(4,11): error CS0518: Predefined type 'System.Void' is not defined or imported\\r\\ne3s05cht.itf(8,11): error CS0246: The type or namespace name 'System' could not be found (are you missing a using directive or an assembly reference?)\\r\\ne3s05cht.itf(9,11): error CS0246: The type or namespace name 'System' could not be found (are you missing a using directive or an assembly reference?)\\r\\ne3s05cht.itf(10,11): error CS0246: The type or namespace name 'System' could not be fou\r\nnd (are you missing a using directive or an assembly reference?)\\r\\ne3s05cht.itf(11,11): error CS0246: The type or namespace name 'System' could not be found (are you missing a using directive or an assembly reference?)\\r\\ne3s05cht.itf(14,36): error CS0234: The type or namespace name 'ViewFeatures' does not exist in the namespace 'Microsoft.AspNetCore.Mvc' (are you missing an assembly reference?)\\r\\ne3s05cht.itf(15,93): error CS1980: Cannot define a class or member that utilizes 'dynamic' because the compiler required type 'System.Runtime.CompilerServices.DynamicAttribute' cannot be found. Are you missing a reference?\\r\\ne3s05cht.itf(15,93): error CS0518: Predefined type 'System.Boolean' is not defined or imported\\r\\ne3s05cht.itf(15,44): error CS0012: The type 'Object' is defined in an assembly that is not referenced. You must add a reference to assembly 'netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51'.\\r\\ne3s05cht.itf(18,67): error CS1983: The return type of an async method mus\r\nt be void, Task or Task<T>\\r\\ne3s05cht.itf(18,39): error CS0400: The type or namespace name 'System' could not be found in the global namespace (are you missing an assembly reference?)\\r\\ne3s05cht.itf(70,49): error CS0234: The type or namespace name 'ViewFeatures' does not exist in the namespace 'Microsoft.AspNetCore.Mvc' (are you missing an assembly reference?)\\r\\ne3s05cht.itf(70,118): error CS0518: Predefined type 'System.Void' is not defined or imported\\r\\ne3s05cht.itf(72,49): error CS0234: The type or namespace name 'IUrlHelper' does not exist in the namespace 'Microsoft.AspNetCore.Mvc' (are you missing an assembly reference?)\\r\\ne3s05cht.itf(72,71): error CS0518: Predefined type 'System.Void' is not defined or imported\\r\\ne3s05cht.itf(74,49): error CS0234: The type or namespace name 'IViewComponentHelper' does not exist in the namespace 'Microsoft.AspNetCore.Mvc' (are you missing an assembly reference?)\\r\\ne3s05cht.itf(74,87): error CS0518: Predefined type 'System.Void' is not defined or imported\\r\\ne3s05\r\ncht.itf(76,59): error CS0234: The type or namespace name 'IJsonHelper' does not exist in the namespace 'Microsoft.AspNetCore.Mvc.Rendering' (are you missing an assembly reference?)\\r\\ne3s05cht.itf(76,83): error CS0518: Predefined type 'System.Void' is not defined or imported\\r\\ne3s05cht.itf(78,59): error CS0234: The type or namespace name 'IHtmlHelper<>' does not exist in the namespace 'Microsoft.AspNetCore.Mvc.Rendering' (are you missing an assembly reference?)\\r\\ne3s05cht.itf(78,71): error CS0012: The type 'Object' is defined in an assembly that is not referenced. You must add a reference to assembly 'netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51'.\\r\\ne3s05cht.itf(78,71): error CS0518: Predefined type 'System.Object' is not defined or imported\\r\\ne3s05cht.itf(78,71): error CS1980: Cannot define a class or member that utilizes 'dynamic' because the compiler required type 'System.Runtime.CompilerServices.DynamicAttribute' cannot be found. Are you missing a reference?\\r\\ne3s05ch\r\nt.itf(78,71): error CS0518: Predefined type 'System.Boolean' is not defined or imported\\r\\ne3s05cht.itf(78,92): error CS0518: Predefined type 'System.Void' is not defined or imported\\r\\ne3s05cht.itf(18,67): error CS0508: '_Views_PublicApp_cshtml.ExecuteAsync()': return type must be 'Task' to match overridden member 'RazorPageBase.ExecuteAsync()'\\r\\ne3s05cht.itf(18,67): error CS0012: The type 'Task' is defined in an assembly that is not referenced. You must add a reference to assembly 'netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51'.\\r\\ne3s05cht.itf(69,58): error CS0012: The type 'Attribute' is defined in an assembly that is not referenced. You must add a reference to assembly 'netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51'.\\r\\ne3s05cht.itf(69,10): error CS0518: Predefined type 'System.Void' is not defined or imported\\r\\ne3s05cht.itf(71,58): error CS0012: The type 'Attribute' is defined in an assembly that is not referenced. You must add a referen\r\nce to assembly 'netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51'.\\r\\ne3s05cht.itf(71,10): error CS0518: Predefined type 'System.Void' is not defined or imported\\r\\ne3s05cht.itf(73,58): error CS0012: The type 'Attribute' is defined in an assembly that is not referenced. You must add a reference to assembly 'netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51'.\\r\\ne3s05cht.itf(73,10): error CS0518: Predefined type 'System.Void' is not defined or imported\\r\\ne3s05cht.itf(75,58): error CS0012: The type 'Attribute' is defined in an assembly that is not referenced. You must add a reference to assembly 'netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51'.\\r\\ne3s05cht.itf(75,10): error CS0518: Predefined type 'System.Void' is not defined or imported\\r\\ne3s05cht.itf(77,58): error CS0012: The type 'Attribute' is defined in an assembly that is not referenced. You must add a reference to assembly 'netstandard, Version=2.0.0.0, Culture=ne\r\nutral, PublicKeyToken=cc7b13ffcd2ddd51'.\\r\\ne3s05cht.itf(77,10): error CS0518: Predefined type 'System.Void' is not defined or imported\\r\\ne3s05cht.itf(20,13): error CS0012: The type 'Object' is defined in an assembly that is not referenced. You must add a reference to assembly 'netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51'.\\r\\ne3s05cht.itf(20,13): error CS0518: Predefined type 'System.Object' is not defined or imported\\r\\ne3s05cht.itf(20,26): error CS0518: Predefined type 'System.Int32' is not defined or imported\\r\\ne3s05cht.itf(20,29): error CS0518: Predefined type 'System.Int32' is not defined or imported\\r\\ne3s05cht.itf(20,34): error CS0518: Predefined type 'System.Boolean' is not defined or imported\\r\\ne3s05cht.itf(20,13): error CS0518: Predefined type 'System.Void' is not defined or imported\\r\\ne3s05cht.itf(21,13): error CS0012: The type 'Object' is defined in an assembly that is not referenced. You must add a reference to assembly 'netstandard, Version=2.0.0.0, Culture=\r\nneutral, PublicKeyToken=cc7b13ffcd2ddd51'.\\r\\ne3s05cht.itf(21,13): error CS0518: Predefined type 'System.Object' is not defined or imported\\r\\ne3s05cht.itf(21,26): error CS0518: Predefined type 'System.String' is not defined or imported\\r\\ne3s05cht.itf(21,13): error CS0518: Predefined type 'System.Void' is not defined or imported\\r\\ne3s05cht.itf(36,13): error CS0012: The type 'Object' is defined in an assembly that is not referenced. You must add a reference to assembly 'netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51'.\\r\\ne3s05cht.itf(36,13): error CS0518: Predefined type 'System.Object' is not defined or imported\\r\\ne3s05cht.itf(36,13): error CS0518: Predefined type 'System.Void' is not defined or imported\\r\\ne3s05cht.itf(43,13): error CS0012: The type 'Object' is defined in an assembly that is not referenced. You must add a reference to assembly 'netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51'.\\r\\ne3s05cht.itf(43,13): error CS0518: Predefined ty\r\npe 'System.Object' is not defined or imported\\r\\ne3s05cht.itf(43,26): error CS0518: Predefined type 'System.Int32' is not defined or imported\\r\\ne3s05cht.itf(43,31): error CS0518: Predefined type 'System.Int32' is not defined or imported\\r\\ne3s05cht.itf(43,36): error CS0518: Predefined type 'System.Boolean' is not defined or imported\\r\\ne3s05cht.itf(43,13): error CS0518: Predefined type 'System.Void' is not defined or imported\\r\\ne3s05cht.itf(44,13): error CS0012: The type 'Object' is defined in an assembly that is not referenced. You must add a reference to assembly 'netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51'.\\r\\ne3s05cht.itf(44,13): error CS0518: Predefined type 'System.Object' is not defined or imported\\r\\ne3s05cht.itf(44,26): error CS0518: Predefined type 'System.String' is not defined or imported\\r\\ne3s05cht.itf(44,13): error CS0518: Predefined type 'System.Void' is not defined or imported\\r\\ne3s05cht.itf(48,13): error CS0012: The type 'Object' is defined in an assembl\r\ny that is not referenced. You must add a reference to assembly 'netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51'.\\r\\ne3s05cht.itf(48,13): error CS0518: Predefined type 'System.Object' is not defined or imported\\r\\ne3s05cht.itf(48,13): error CS0518: Predefined type 'System.Void' is not defined or imported\\r\\ne3s05cht.itf(56,13): error CS0012: The type 'Object' is defined in an assembly that is not referenced. You must add a reference to assembly 'netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51'.\\r\\ne3s05cht.itf(56,13): error CS0518: Predefined type 'System.Object' is not defined or imported\\r\\ne3s05cht.itf(56,26): error CS0518: Predefined type 'System.Int32' is not defined or imported\\r\\ne3s05cht.itf(56,31): error CS0518: Predefined type 'System.Int32' is not defined or imported\\r\\ne3s05cht.itf(56,36): error CS0518: Predefined type 'System.Boolean' is not defined or imported\\r\\ne3s05cht.itf(56,13): error CS0518: Predefined type 'System.Void' is not d\r\nefined or imported\\r\\ne3s05cht.itf(57,13): error CS0012: The type 'Object' is defined in an assembly that is not referenced. You must add a reference to assembly 'netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51'.\\r\\ne3s05cht.itf(57,13): error CS0518: Predefined type 'System.Object' is not defined or imported\\r\\ne3s05cht.itf(57,26): error CS0518: Predefined type 'System.String' is not defined or imported\\r\\ne3s05cht.itf(57,13): error CS0518: Predefined type 'System.Void' is not defined or imported\\r\\ne3s05cht.itf(58,13): error CS0012: The type 'Object' is defined in an assembly that is not referenced. You must add a reference to assembly 'netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51'.\\r\\ne3s05cht.itf(58,13): error CS0518: Predefined type 'System.Object' is not defined or imported\\r\\ne3s05cht.itf(58,13): error CS0518: Predefined type 'System.Void' is not defined or imported\\r\\ne3s05cht.itf(64,13): error CS0012: The type 'Object' is defined in an as\r\nsembly that is not referenced. You must add a reference to assembly 'netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51'.\\r\\ne3s05cht.itf(64,13): error CS0518: Predefined type 'System.Object' is not defined or imported\\r\\ne3s05cht.itf(64,26): error CS0518: Predefined type 'System.Int32' is not defined or imported\\r\\ne3s05cht.itf(64,32): error CS0518: Predefined type 'System.Int32' is not defined or imported\\r\\ne3s05cht.itf(64,37): error CS0518: Predefined type 'System.Boolean' is not defined or imported\\r\\ne3s05cht.itf(64,13): error CS0518: Predefined type 'System.Void' is not defined or imported\\r\\ne3s05cht.itf(65,13): error CS0012: The type 'Object' is defined in an assembly that is not referenced. You must add a reference to assembly 'netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51'.\\r\\ne3s05cht.itf(65,13): error CS0518: Predefined type 'System.Object' is not defined or imported\\r\\ne3s05cht.itf(65,26): error CS0518: Predefined type 'System.String' i\r\ns not defined or imported\\r\\ne3s05cht.itf(65,13): error CS0518: Predefined type 'System.Void' is not defined or imported\\r\\ne3s05cht.itf(66,13): error CS0012: The type 'Object' is defined in an assembly that is not referenced. You must add a reference to assembly 'netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51'.\\r\\ne3s05cht.itf(66,13): error CS0518: Predefined type 'System.Object' is not defined or imported\\r\\ne3s05cht.itf(66,13): error CS0518: Predefined type 'System.Void' is not defined or imported\\r\\ne3s05cht.itf(18,67): error CS0161: '_Views_PublicApp_cshtml.ExecuteAsync()': not all code paths return a value\\r\\ne3s05cht.itf(15,18): error CS0518: Predefined type 'System.Void' is not defined or imported\\r\\nC:\\\\Source\\\\TFS\\\\ReferenceApp\\\\RefApp.Web\\\\Views\\\\PublicApp.cshtml(15,10): error CS0518: Predefined type 'System.Boolean' is not defined or imported\\r\\n   at Microsoft.AspNetCore.Mvc.Razor.Internal.RazorViewCompiler.CompileAndEmit(RazorCodeDocument codeDocument, String gener\r\natedCode)\\r\\n   at Microsoft.AspNetCore.Mvc.Razor.Internal.RazorViewCompiler.CompileAndEmit(String relativePath)\\r\\n   at Microsoft.AspNetCore.Mvc.Razor.Internal.RazorViewCompiler.CreateCacheEntry(String normalizedPath)\\r\\n--- End of stack trace from previous location where exception was thrown ---\\r\\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\\r\\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\\r\\n   at Microsoft.AspNetCore.Mvc.Razor.Internal.DefaultRazorPageFactoryProvider.CreateFactory(String relativePath)\\r\\n   at Microsoft.AspNetCore.Mvc.Razor.RazorViewEngine.CreateCacheResult(HashSet`1 expirationTokens, String relativePath, Boolean isMainPage)\\r\\n   at Microsoft.AspNetCore.Mvc.Razor.RazorViewEngine.LocatePageFromPath(String executingFilePath, String pagePath, Boolean isMainPage)\\r\\n   at Microsoft.AspNetCore.Mvc.Razor.RazorViewEngine.GetView(String executingFilePath, String viewPath, Boolean isMainPage)\\r\\n   at Micro\r\nsoft.AspNetCore.Mvc.ViewEngines.CompositeViewEngine.GetView(String executingFilePath, String viewPath, Boolean isMainPage)\\r\\n   at Microsoft.AspNetCore.Mvc.ViewFeatures.Internal.ViewResultExecutor.FindView(ActionContext actionContext, ViewResult viewResult)\\r\\n   at Microsoft.AspNetCore.Mvc.ViewResult.<ExecuteResultAsync>d__26.MoveNext()\\r\\n--- End of stack trace from previous location where exception was thrown ---\\r\\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\\r\\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\\r\\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.<InvokeResultAsync>d__19.MoveNext()\\r\\n--- End of stack trace from previous location where exception was thrown ---\\r\\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\\r\\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\\r\\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvo\r\nker.<InvokeNextResultFilterAsync>d__24.MoveNext()\\r\\n--- End of stack trace from previous location where exception was thrown ---\\r\\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.Rethrow(ResultExecutedContext context)\\r\\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.Next(State& next, Scope& scope, Object& state, Boolean& isCompleted)\\r\\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.<InvokeNextResourceFilter>d__22.MoveNext()\\r\\n--- End of stack trace from previous location where exception was thrown ---\\r\\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.Rethrow(ResourceExecutedContext context)\\r\\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.Next(State& next, Scope& scope, Object& state, Boolean& isCompleted)\\r\\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.<InvokeFilterPipelineAsync>d__17.MoveNext()\\r\\n--- End of stack trace from previous location where exception was thrown ---\\r\\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task\r\n task)\\r\\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\\r\\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.<InvokeAsync>d__15.MoveNext()\\r\\n--- End of stack trace from previous location where exception was thrown ---\\r\\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\\r\\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\\r\\n   at Microsoft.AspNetCore.Builder.RouterMiddleware.<Invoke>d__4.MoveNext()\\r\\n--- End of stack trace from previous location where exception was thrown ---\\r\\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\\r\\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\\r\\n   at System.Runtime.CompilerServices.TaskAwaiter.ValidateEnd(Task task)\\r\\n   at Microsoft.AspNetCore.Authentication.AuthenticationMiddleware.<Invoke>d__6.MoveNext()\\r\\n--- End of stack trace from previous lo\r\ncation where exception was thrown ---\\r\\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\\r\\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\\r\\n   at Microsoft.AspNetCore.Diagnostics.ExceptionHandlerMiddleware.<Invoke>d__6.MoveNext()\"\r\n\r\n```\r\n"},{"Id":"9730889074","Type":"IssuesEvent","CreatedAt":"2019-05-30T23:22:51","Actor":"wtgodbe","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/484","RelatedDescription":"Closed issue \".net framework 4.6.1/4.6.2/4.7 + .net standard 2.0 - system.net.http issue\" (#484) at dotnet/standard","RelatedBody":"using VS 2017 update 15.3.3\r\n\r\ni created a new WEB MVC/API project 4.6.1 -> 4.7 (tried all 3)\r\ni then created a .net standard 2.0 project \r\n\r\ni add the .net standard 2.0 project into the WEB MVC/API project\r\n\r\nthe WEB MVC/API project starts complaining about system.net.http see below\r\n\r\n![image](https://user-images.githubusercontent.com/570083/30042958-dab8ecde-9248-11e7-861f-e1fa70448152.png)\r\n\r\ni thought .net standard 2.0 was available to work with the .net framework 4.6.1+"},{"Id":"9730887418","Type":"IssuesEvent","CreatedAt":"2019-05-30T23:22:25","Actor":"wtgodbe","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/504","RelatedDescription":"Closed issue \"ASP.NET 4.7.1 - The type 'Enum' is defined in an assembly that is not referenced\" (#504) at dotnet/standard","RelatedBody":"This is likely a very similar issue to #391 & #489.\r\n\r\nThere is a big chance here that I am being an absolute idiot!! But, we are looking at migrating all of our code across to using .NET Standard 2.0 instead of PCL's - this is part of our work with UWP (#489).\r\n\r\nThe issue here is now when looking at one of our websites, I get the follow issue (see image)\r\n![capture](https://user-images.githubusercontent.com/18173195/30712771-0c9b5cfa-9f05-11e7-9bba-2220e9a506db.PNG)\r\n> CS0012: The type 'Enum' is defined in an assembly that is not referenced. You must add a reference to assembly 'netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51'.\r\n\r\nThere is an Enum that is in a .NET Standard 2.0 project that is being referenced `this.Links[i].Type` in the `aspx` file.\r\n\r\nThere is no problem with referencing this enum in the .cs file (or other items in the .NET Standard Projects).\r\n\r\nWhat do I need to do to make this work on an ASPX file.\r\n\r\nI have tried all the bits mentioned in the related issues, but none seem to help.\r\n\r\n@weshaggard - I assume this might be one for you again?\r\n"},{"Id":"9730883536","Type":"IssuesEvent","CreatedAt":"2019-05-30T23:21:28","Actor":"wtgodbe","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/506","RelatedDescription":"Closed issue \"Can't use System.Configuration.Configuration manager in a .NET Standard2.0 library on .NET FX4.6\" (#506) at dotnet/standard","RelatedBody":"I have an assembly created in **NetStandard2.0**. It reads AppSettings using **System.Configuration.ConfigurationManager**. I have installed nuget package of **System.Configuration.ConfigurationManager** with version 4.4.X which is suitable for NetStandard2.0.\r\n\r\nWhen I refer this assembly in console app (.Net Core) it is reading AppSettings properly, but when I refer this assembly in old .NetFramework(4.6.X) console app it is not working and throwing an exception.\r\n\r\nPlease see the code below.\r\n\r\n**Assembly 1: NetStandard 2.0**\r\n\r\n**Nuget: System.Configuration.ConfigurationManager 4.4.0**\r\n\r\n     using System.Configuration;\r\n\r\n     namespace Bootstrapper.Lib\r\n     {\r\n         public class Bootstrapper\r\n         {           \r\n             public void LoadAppSettings()\r\n             {\r\n                   string serachPattern = ConfigurationManager.AppSettings[\"AssemblySearchPattern\"];\r\n             }\r\n        }\r\n    }\r\n**Console App: NetFx 4.6.X**\r\n\r\n\tusing System;\r\n\tusing Bootstrapper.Lib;\r\n\tnamespace Bootstrapper.Console\r\n\t{\r\n\t  class Program\r\n\t  {\r\n\t\tstatic void Main(string[] args)\r\n\t\t{\r\n\t\t\tnew Bootstrapper().LoadAppSettings();\r\n\t\t}\r\n\t  }\r\n\t}\r\n\r\n**Exception After Run:**\r\n\r\n\t'Could not load file or assembly 'System.Configuration.ConfigurationManager, \r\n\t Version=4.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51' or one \r\n\t of its dependencies. The system cannot find the file specified.'\r\n\r\n**It will work with Console App developed using .NetCore.**\r\n\r\nHere is the other link I followed. #425 \r\n\r\nPlease help!!!\r\n\r\n"}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"9732098169","Type":"PullRequestEvent","CreatedAt":"2019-05-31T05:27:28","Actor":"safern","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/corefx/pull/38061","RelatedDescription":null,"RelatedBody":"Contrib to https://github.com/dotnet/corefx/issues/37545\r\n\r\nfixes https://github.com/dotnet/corefx/issues/37885 polymorphic interface\r\nfixes https://github.com/dotnet/corefx/issues/37537 parameterless ctor\r\n\r\nException samples \r\n`System.InvalidOperationException : Deserialization of reference type without parameterless constructor is not supported. Type System.Text.Json.Serialization.Tests.ObjectTests+PublicParameterizedConstructorTestClass`  \r\n\r\n`System.InvalidOperationException : Deserialization of interface types is not supported. Type System.Text.Json.Serialization.Tests.PolymorphicTests+IThing`\r\n\r\ncc: @ahsonkhan @steveharter "},{"Id":"9732097984","Type":"PullRequestEvent","CreatedAt":"2019-05-31T05:27:24","Actor":"safern","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/pull/38061","RelatedDescription":"Closed pull request \"[System.Text.Json]Improve error output for unsupported scenarios in System.Text.Json.Serialization\" (#38061) at dotnet/corefx","RelatedBody":"Contrib to https://github.com/dotnet/corefx/issues/37545\r\n\r\nfixes https://github.com/dotnet/corefx/issues/37885 polymorphic interface\r\nfixes https://github.com/dotnet/corefx/issues/37537 parameterless ctor\r\n\r\nException samples \r\n`System.InvalidOperationException : Deserialization of reference type without parameterless constructor is not supported. Type System.Text.Json.Serialization.Tests.ObjectTests+PublicParameterizedConstructorTestClass`  \r\n\r\n`System.InvalidOperationException : Deserialization of interface types is not supported. Type System.Text.Json.Serialization.Tests.PolymorphicTests+IThing`\r\n\r\ncc: @ahsonkhan @steveharter "},{"Id":"9732061720","Type":"IssuesEvent","CreatedAt":"2019-05-31T05:16:14","Actor":"ahsonkhan","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/corefx/issues/36974","RelatedDescription":"Reopened issue \"We should base64 encode byte[] when writing Json\" (#36974) at dotnet/corefx","RelatedBody":"When writing/serializing a `byte[]` to Json we were expecting to see a base64 encoded string.\r\n\r\nSimilarly when reading/deserializing, a base64 encoded string should be readable into a `byte[]`."},{"Id":"9732053367","Type":"PullRequestEvent","CreatedAt":"2019-05-31T05:13:34","Actor":"ahsonkhan","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/38048","RelatedDescription":"Merged pull request \"Add Base64 APIs to Utf8JsonReader, Utf8JsonWriter, and JsonElement\" (#38048) at dotnet/corefx","RelatedBody":"Fixes https://github.com/dotnet/corefx/issues/36974\r\n\r\nTODO:\r\n- [x] API Review\r\n- [x] Add tests"},{"Id":"9732053355","Type":"IssuesEvent","CreatedAt":"2019-05-31T05:13:34","Actor":"ahsonkhan","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/36974","RelatedDescription":"Closed issue \"We should base64 encode byte[] when writing Json\" (#36974) at dotnet/corefx","RelatedBody":"When writing/serializing a `byte[]` to Json we were expecting to see a base64 encoded string.\r\n\r\nSimilarly when reading/deserializing, a base64 encoded string should be readable into a `byte[]`."},{"Id":"9732011647","Type":"PullRequestEvent","CreatedAt":"2019-05-31T05:00:38","Actor":"JeremyKuhne","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/38039","RelatedDescription":"Merged pull request \"Add read ahead logic for streams.\" (#38039) at dotnet/corefx","RelatedBody":"When reading a json object or array from a stream into an object we need to TrySkip to ensure that we have all the needed data for the JsonDocument to create a JsonElement. This is only necessary  if we haven't already drained the stream."},{"Id":"9731945823","Type":"PullRequestEvent","CreatedAt":"2019-05-31T04:39:27","Actor":"ahsonkhan","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/38088","RelatedDescription":"Opened pull request \"Add JsonSerializer overload that takes Utf8JsonReader.\" (#38088) at dotnet/corefx","RelatedBody":"Fixes https://github.com/dotnet/corefx/issues/36717\r\n\r\nTODO:\r\n- [ ] Writer side: https://github.com/dotnet/corefx/issues/36714\r\n\r\ncc @layomia, @BrennanConroy, @rynowak, @JamesNK "},{"Id":"9731739869","Type":"IssuesEvent","CreatedAt":"2019-05-31T03:33:56","Actor":"terrajobst","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/38086","RelatedDescription":"Closed issue \"Create visual designer for TPL dataflow\" (#38086) at dotnet/corefx","RelatedBody":"The system.threading.tasks.dataflow namespace allow defining tasks as a network of linked blocks. I think using it will be easier if we can use a visual designer to define the blocks, link them and configure there properties, then the designer produces the code, so we can only focus on the code we write inside each block (double-clicking the block entity in the designer should open the related method in code editor."},{"Id":"9731648092","Type":"IssuesEvent","CreatedAt":"2019-05-31T03:07:01","Actor":"terrajobst","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/38087","RelatedDescription":"Opened issue \"Expose top-level nullability information from reflection\" (#38087) at dotnet/corefx","RelatedBody":"With C# 8, developers will be able to express whether a given reference type can be null:\r\n\r\n```C#\r\npublic void M(string? nullable, string notNull, IEnumerable<string?> nonNullCollectionOfPotentiallyNullEntries);\r\n```\r\n\r\n(Please note that existing code that wasn't compiled using C# 8 and nullable turned on is considered to be unknown.)\r\n\r\nThis information isn't only useful for the compiler but also attractive for reflection-based tools to provide a better experience. For example:\r\n\r\n* **MVC**\r\n    - Provides a way to automatically deserialize inputs to controller methods (\"model binding\")\r\n    - Would like to provide model validation so that the existing pattern would allow code to bail early\r\n    - Without it, customers would have to apply a custom attribute, such as `[Required]`, or resort to additional null-checks\r\n    - Only needs top-level annotations, i.e. `string?` but not nested, such as `IEnumerable<string?>`\r\n\r\n* **EF**\r\n    - Provides a way to generate database schemas from user classes (\"code first\")\r\n    - Would like use nullable information to infer whether columns should be null or non-null (they already do that for nullable valuable types).\r\n    - Without it, customers would have to apply a custom attribute to repeat that information.\r\n    - Also only needs top-level annotations\r\n\r\nThe nullable information is persisted in metadata using custom attributes. In principle, any interested party can already read the custom attributes without additional work from the BCL. However, this is not ideal because the encoding is somewhat non-trivial:\r\n\r\n* **Custom attribute might be generated**. The custom attribute might have been generated (meaning is embedded in the user's assembly) or might use the [to-be-provided attribute](https://github.com/dotnet/corefx/issues/36222).\r\n* **Encoded as a byte array**. The tri-state is encoded as a linearized version of the constructed generic type.\r\n* **Compressed**. Right now, each member will have the attribute when nullability is turned on but this causes metadata bloat. We're working on a proposal that allows the containing member, type, or assembly to state a default to reduce the number of attribute applications.\r\n\r\nExposing nullability in reflection for nested generics isn't straight forward. We can't just expose an additional property on `Type` because at runtime there is no difference between `string` (unknown), `string?` (nullable), and `string` (non-null). So we'd have to expose some sort of API that allows consumers to walk the type structure and getting information. Given that we have other cases with similar issues, such as `dynamic` and tuple names, we might want to generalize this. For .NET Core 3.0 we're likely running out of time to design a complex API like this.\r\n\r\nHowever, the 80% scenario is just answering the question whether the given return value or parameter can be null *as a whole*. This simplifies the design tremendously as it only requires exposing APIs on the `MethodInfo`, `ParameterInfo`, `FieldInfo`, `PropertyInfo`, and `EventInfo`. Even if we were to provide the more complete API, these simple APIs would still be useful as they would be much easier to use.\r\n\r\n### API Proposal\r\n\r\n\r\n```C#\r\nnamespace System.Reflection\r\n{\r\n    public enum NullableState\r\n    {\r\n        Unknown,\r\n        NotNull,\r\n        MaybeNull\r\n    }\r\n\r\n    public partial class FieldInfo\r\n    {\r\n        public static NullableState GetNullableState()        \r\n    }\r\n\r\n    public partial class PropertyInfo\r\n    {\r\n        public static NullableState GetNullableState()        \r\n    }\r\n\r\n    public partial class EventInfo\r\n    {\r\n        public static NullableState GetNullableState()        \r\n    }\r\n\r\n    public partial class MethodInfo\r\n    {\r\n        public static NullableState GetReturnTypeNullableState()        \r\n    }\r\n\r\n    public partial class ParameterInfo\r\n    {\r\n        public static NullableState GetNullableState()        \r\n    }\r\n}\r\n```\r\n\r\n@dotnet/nullablefc @dotnet/ldm @dotnet/fxdc @rynowak @divega @ajcvickers @roji @steveharter "}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"9732036067","Type":"PullRequestEvent","CreatedAt":"2019-05-31T05:08:05","Actor":"jcouv","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/36081","RelatedDescription":"Opened pull request \"Fix null reference in BindBase\" (#36081) at dotnet/roslyn","RelatedBody":"Fixes https://github.com/dotnet/roslyn/issues/29933"},{"Id":"9731815117","Type":"IssuesEvent","CreatedAt":"2019-05-31T03:57:15","Actor":"DavidKarlas","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/36080","RelatedDescription":"Opened issue \"\"Sequence contains no elements\" in AbstractSymbolCompletionProvider for shared files\" (#36080) at dotnet/roslyn","RelatedBody":"**Version Used**: \r\n3.1.0-beta4-19261-04+33cfe1a0905264d80633c5154de57de6c0bb94a0\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Create Shared Project and 2 Console projects\r\n2. Reference Shared Project from other 2 projects and add SomeClass.cs\r\n3. Type something in SomeClass.cs that would invoke code completion\r\n\r\n**Expected Behavior**:\r\nNo exception is thrown/logged\r\n**Actual Behavior**:\r\nOur log is being spammed by:\r\n```\r\nERROR [2019-05-30 12:11:17Z]: Roslyn non-fatal exception\r\nSystem.InvalidOperationException: Sequence contains no elements\r\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T] source) [0x00011] in /Users/builder/jenkins/workspace/build-package-osx-mono/2018-08/external/bockbuild/builds/mono-x64/external/corefx/src/System.Linq/src/System/Linq/First.cs:19 \r\n  at Microsoft.CodeAnalysis.Completion.Providers.AbstractSymbolCompletionProvider.CreateItems (System.Collections.Generic.Dictionary`2[TKey,TValue] originatingContextMap, System.Collections.Generic.Dictionary`2[TKey,TValue] invalidProjectMap, System.Collections.Generic.List`1[T] totalProjects, System.Boolean preselect, System.Collections.Immutable.ImmutableArray`1[T] inferredTypes) [0x0002a] in /_/src/Features/Core/Portable/Completion/Providers/AbstractSymbolCompletionProvider.cs:162 \r\n  at Microsoft.CodeAnalysis.Completion.Providers.AbstractSymbolCompletionProvider.GetItemsWorkerAsync (Microsoft.CodeAnalysis.Document document, System.Int32 position, Microsoft.CodeAnalysis.Options.OptionSet options, System.Boolean preselect, System.Threading.CancellationToken cancellationToken) [0x002b8] in /_/src/Features/Core/Portable/Completion/Providers/AbstractSymbolCompletionProvider.cs:352 \r\n  at Microsoft.CodeAnalysis.Completion.Providers.AbstractSymbolCompletionProvider.ProvideCompletionsAsync (Microsoft.CodeAnalysis.Completion.CompletionContext context) [0x001f2] in /_/src/Features/Core/Portable/Completion/Providers/AbstractSymbolCompletionProvider.cs:320 \r\n```\r\nI was able to reproduce this also on Windows(debugging VS) but apparently it's sent to Watson instead of logging into a file..."},{"Id":"9731399978","Type":"IssuesEvent","CreatedAt":"2019-05-31T01:55:47","Actor":"Trojaner","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/36079","RelatedDescription":"Opened issue \"??= operator in C# 8 marks parameter as unused\" (#36079) at dotnet/roslyn","RelatedBody":"Expected Behaviour: \r\nParameters reassigned with ??= should be marked as used and referenced.\r\n\r\nActual Behaviour:\r\nParameters reassigned with ??= are marked as unused.\r\n\r\nScreenshot 1: Parameter \"user\" is marked as \"used\" when not using ??= but the conventional way instead\r\n![grafik](https://user-images.githubusercontent.com/1809172/58676206-0970d780-8360-11e9-8c94-cef72a5cc1c3.png)\r\n\r\nScreenshot 2: Parameter \"user\" is marked as \"unused\" when using ??=\r\n![grafik](https://user-images.githubusercontent.com/1809172/58676217-168dc680-8360-11e9-811a-c50fd5b1d5a1.png)\r\n\r\n"},{"Id":"9731266259","Type":"PullRequestEvent","CreatedAt":"2019-05-31T01:14:56","Actor":"chsienki","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/36078","RelatedDescription":"Opened pull request \"Update implicity declared type expression nullability:\" (#36078) at dotnet/roslyn","RelatedBody":"Small fix for semantic model bug I found working on other correctness bits\r\n\r\n- When updating the implicit type in a declaration also update the bound type declaration nullability\r\n- Add tests"},{"Id":"9731025926","Type":"PullRequestEvent","CreatedAt":"2019-05-31T00:01:18","Actor":"dotnet-bot","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/36077","RelatedDescription":"Opened pull request \"Merge master to features/param-nullchecking\" (#36077) at dotnet/roslyn","RelatedBody":"\nThis is an automatically generated pull request from master into features/param-nullchecking.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-features/param-nullchecking\ngit reset --hard upstream/features/param-nullchecking\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-features/param-nullchecking --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"9731025248","Type":"PullRequestEvent","CreatedAt":"2019-05-31T00:01:09","Actor":"dotnet-bot","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/36076","RelatedDescription":"Opened pull request \"Merge master to features/lspSupport\" (#36076) at dotnet/roslyn","RelatedBody":"\nThis is an automatically generated pull request from master into features/lspSupport.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-features/lspSupport\ngit reset --hard upstream/features/lspSupport\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-features/lspSupport --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"9731890936","Type":"PullRequestEvent","CreatedAt":"2019-05-31T04:21:42","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7471","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/corefx\" (#7471) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/corefx\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub"},{"Id":"9731564981","Type":"PullRequestEvent","CreatedAt":"2019-05-31T02:43:15","Actor":"Suchiman","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/corert/pull/7473","RelatedDescription":null,"RelatedBody":"This port continues https://github.com/dotnet/corert/pull/7434\r\nPorting strategy: extracting patches via `format-patch` from coreclr, adjusting paths, then `am` them on corert.\r\n\r\n**Glossary:**\r\n- already merged: change already exists in corert\r\n- gc only port: change only affected the gc directory and patch applied with no conflicts\r\n- manual port: change applied with custom changes\r\n- omitted changes: contains changes to files that do not exists in corert and were discarded\r\n\r\n**Changes since [last commit](https://github.com/dotnet/coreclr/commit/9f38303221294f45740feefc1b6ddf72347ff882):**\r\n- https://github.com/dotnet/coreclr/commit/6a1c28f05642ac0420b78f35ad32a00b6aef0488 (gc only port)\r\n- https://github.com/dotnet/coreclr/commit/73ef3c13c9b710cb04b67a904b098fb196c224c7 (gc only port, omitted changes)\r\n- https://github.com/dotnet/coreclr/commit/00e7aa00a42debda47a7dbe2b54e924670eaefdd ([already merged](https://github.com/dotnet/corert/pull/4627))\r\n- https://github.com/dotnet/coreclr/commit/5b10f0eb85d8e8ccdcf9b5e38e5dd372e241e24e (gc only port, omitted changes)\r\n- https://github.com/dotnet/coreclr/commit/a7d801aa30e40c6e01536dd0355199842ee5e4c8 (gc only port)\r\n- https://github.com/dotnet/coreclr/commit/165ffa6a0bb2d8b57e83aa95a395a798ad5f5f4f (manual port)\r\n- https://github.com/dotnet/coreclr/commit/bd3424913138d10f9c4fdb6176fb471e8d1ba1d7 (manual port)\r\n- https://github.com/dotnet/coreclr/commit/5b02b0104f3ceba491b7b25fcb4d997e477d2840 (gc only port)\r\n- https://github.com/dotnet/coreclr/commit/558f8e99680ab5b6ea9d4796236e12439363657f (gc only port)\r\n- https://github.com/dotnet/coreclr/commit/0b86feb1d2830cc1de5db16ee86c0998c01ca30a (gc only port)\r\n- https://github.com/dotnet/coreclr/commit/e64cbb5c722ab9b7d93ca32445e17df1115be70c (manual port)"},{"Id":"9731564611","Type":"PullRequestEvent","CreatedAt":"2019-05-31T02:43:09","Actor":"Suchiman","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/pull/7473","RelatedDescription":"Closed pull request \"Port GC changes from coreclr - 10\" (#7473) at dotnet/corert","RelatedBody":"This port continues https://github.com/dotnet/corert/pull/7434\r\nPorting strategy: extracting patches via `format-patch` from coreclr, adjusting paths, then `am` them on corert.\r\n\r\n**Glossary:**\r\n- already merged: change already exists in corert\r\n- gc only port: change only affected the gc directory and patch applied with no conflicts\r\n- manual port: change applied with custom changes\r\n- omitted changes: contains changes to files that do not exists in corert and were discarded\r\n\r\n**Changes since [last commit](https://github.com/dotnet/coreclr/commit/9f38303221294f45740feefc1b6ddf72347ff882):**\r\n- https://github.com/dotnet/coreclr/commit/6a1c28f05642ac0420b78f35ad32a00b6aef0488 (gc only port)\r\n- https://github.com/dotnet/coreclr/commit/73ef3c13c9b710cb04b67a904b098fb196c224c7 (gc only port, omitted changes)\r\n- https://github.com/dotnet/coreclr/commit/00e7aa00a42debda47a7dbe2b54e924670eaefdd ([already merged](https://github.com/dotnet/corert/pull/4627))\r\n- https://github.com/dotnet/coreclr/commit/5b10f0eb85d8e8ccdcf9b5e38e5dd372e241e24e (gc only port, omitted changes)\r\n- https://github.com/dotnet/coreclr/commit/a7d801aa30e40c6e01536dd0355199842ee5e4c8 (gc only port)\r\n- https://github.com/dotnet/coreclr/commit/165ffa6a0bb2d8b57e83aa95a395a798ad5f5f4f (manual port)\r\n- https://github.com/dotnet/coreclr/commit/bd3424913138d10f9c4fdb6176fb471e8d1ba1d7 (manual port)\r\n- https://github.com/dotnet/coreclr/commit/5b02b0104f3ceba491b7b25fcb4d997e477d2840 (gc only port)\r\n- https://github.com/dotnet/coreclr/commit/558f8e99680ab5b6ea9d4796236e12439363657f (gc only port)\r\n- https://github.com/dotnet/coreclr/commit/0b86feb1d2830cc1de5db16ee86c0998c01ca30a (gc only port)\r\n- https://github.com/dotnet/coreclr/commit/e64cbb5c722ab9b7d93ca32445e17df1115be70c (manual port)"},{"Id":"9731550444","Type":"PullRequestEvent","CreatedAt":"2019-05-31T02:39:10","Actor":"Suchiman","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/corert/pull/7473","RelatedDescription":null,"RelatedBody":"This port continues https://github.com/dotnet/corert/pull/7434\r\nPorting strategy: extracting patches via `format-patch` from coreclr, adjusting paths, then `am` them on corert.\r\n\r\n**Glossary:**\r\n- already merged: change already exists in corert\r\n- gc only port: change only affected the gc directory and patch applied with no conflicts\r\n- manual port: change applied with custom changes\r\n- omitted changes: contains changes to files that do not exists in corert and were discarded\r\n\r\n**Changes since [last commit](https://github.com/dotnet/coreclr/commit/9f38303221294f45740feefc1b6ddf72347ff882):**\r\n- https://github.com/dotnet/coreclr/commit/6a1c28f05642ac0420b78f35ad32a00b6aef0488 (gc only port)\r\n- https://github.com/dotnet/coreclr/commit/73ef3c13c9b710cb04b67a904b098fb196c224c7 (gc only port, omitted changes)\r\n- https://github.com/dotnet/coreclr/commit/00e7aa00a42debda47a7dbe2b54e924670eaefdd ([already merged](https://github.com/dotnet/corert/pull/4627))\r\n- https://github.com/dotnet/coreclr/commit/5b10f0eb85d8e8ccdcf9b5e38e5dd372e241e24e (gc only port, omitted changes)\r\n- https://github.com/dotnet/coreclr/commit/a7d801aa30e40c6e01536dd0355199842ee5e4c8 (gc only port)\r\n- https://github.com/dotnet/coreclr/commit/165ffa6a0bb2d8b57e83aa95a395a798ad5f5f4f (manual port)\r\n- https://github.com/dotnet/coreclr/commit/bd3424913138d10f9c4fdb6176fb471e8d1ba1d7 (manual port)\r\n- https://github.com/dotnet/coreclr/commit/5b02b0104f3ceba491b7b25fcb4d997e477d2840 (gc only port)\r\n- https://github.com/dotnet/coreclr/commit/558f8e99680ab5b6ea9d4796236e12439363657f (gc only port)\r\n- https://github.com/dotnet/coreclr/commit/0b86feb1d2830cc1de5db16ee86c0998c01ca30a (gc only port)\r\n- https://github.com/dotnet/coreclr/commit/e64cbb5c722ab9b7d93ca32445e17df1115be70c (manual port)"},{"Id":"9731550005","Type":"PullRequestEvent","CreatedAt":"2019-05-31T02:39:02","Actor":"Suchiman","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/pull/7473","RelatedDescription":"Closed pull request \"Port GC changes from coreclr - 10\" (#7473) at dotnet/corert","RelatedBody":"This port continues https://github.com/dotnet/corert/pull/7434\r\nPorting strategy: extracting patches via `format-patch` from coreclr, adjusting paths, then `am` them on corert.\r\n\r\n**Glossary:**\r\n- already merged: change already exists in corert\r\n- gc only port: change only affected the gc directory and patch applied with no conflicts\r\n- manual port: change applied with custom changes\r\n- omitted changes: contains changes to files that do not exists in corert and were discarded\r\n\r\n**Changes since [last commit](https://github.com/dotnet/coreclr/commit/9f38303221294f45740feefc1b6ddf72347ff882):**\r\n- https://github.com/dotnet/coreclr/commit/6a1c28f05642ac0420b78f35ad32a00b6aef0488 (gc only port)\r\n- https://github.com/dotnet/coreclr/commit/73ef3c13c9b710cb04b67a904b098fb196c224c7 (gc only port, omitted changes)\r\n- https://github.com/dotnet/coreclr/commit/00e7aa00a42debda47a7dbe2b54e924670eaefdd ([already merged](https://github.com/dotnet/corert/pull/4627))\r\n- https://github.com/dotnet/coreclr/commit/5b10f0eb85d8e8ccdcf9b5e38e5dd372e241e24e (gc only port, omitted changes)\r\n- https://github.com/dotnet/coreclr/commit/a7d801aa30e40c6e01536dd0355199842ee5e4c8 (gc only port)\r\n- https://github.com/dotnet/coreclr/commit/165ffa6a0bb2d8b57e83aa95a395a798ad5f5f4f (manual port)\r\n- https://github.com/dotnet/coreclr/commit/bd3424913138d10f9c4fdb6176fb471e8d1ba1d7 (manual port)\r\n- https://github.com/dotnet/coreclr/commit/5b02b0104f3ceba491b7b25fcb4d997e477d2840 (gc only port)\r\n- https://github.com/dotnet/coreclr/commit/558f8e99680ab5b6ea9d4796236e12439363657f (gc only port)\r\n- https://github.com/dotnet/coreclr/commit/0b86feb1d2830cc1de5db16ee86c0998c01ca30a (gc only port)\r\n- https://github.com/dotnet/coreclr/commit/e64cbb5c722ab9b7d93ca32445e17df1115be70c (manual port)"},{"Id":"9731459091","Type":"PullRequestEvent","CreatedAt":"2019-05-31T02:13:23","Actor":"Suchiman","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/corert/pull/7473","RelatedDescription":null,"RelatedBody":"This port continues https://github.com/dotnet/corert/pull/7434\r\nPorting strategy: extracting patches via `format-patch` from coreclr, adjusting paths, then `am` them on corert.\r\n\r\n**Glossary:**\r\n- already merged: change already exists in corert\r\n- gc only port: change only affected the gc directory and patch applied with no conflicts\r\n- manual port: change applied with custom changes\r\n- omitted changes: contains changes to files that do not exists in corert and were discarded\r\n\r\n**Changes since [last commit](https://github.com/dotnet/coreclr/commit/9f38303221294f45740feefc1b6ddf72347ff882):**\r\n- https://github.com/dotnet/coreclr/commit/6a1c28f05642ac0420b78f35ad32a00b6aef0488 (gc only port)\r\n- https://github.com/dotnet/coreclr/commit/73ef3c13c9b710cb04b67a904b098fb196c224c7 (gc only port, omitted changes)\r\n- https://github.com/dotnet/coreclr/commit/00e7aa00a42debda47a7dbe2b54e924670eaefdd ([already merged](https://github.com/dotnet/corert/pull/4627))\r\n- https://github.com/dotnet/coreclr/commit/5b10f0eb85d8e8ccdcf9b5e38e5dd372e241e24e (gc only port, omitted changes)\r\n- https://github.com/dotnet/coreclr/commit/a7d801aa30e40c6e01536dd0355199842ee5e4c8 (gc only port)\r\n- https://github.com/dotnet/coreclr/commit/165ffa6a0bb2d8b57e83aa95a395a798ad5f5f4f (manual port)\r\n- https://github.com/dotnet/coreclr/commit/bd3424913138d10f9c4fdb6176fb471e8d1ba1d7 (manual port)\r\n- https://github.com/dotnet/coreclr/commit/5b02b0104f3ceba491b7b25fcb4d997e477d2840 (gc only port)\r\n- https://github.com/dotnet/coreclr/commit/558f8e99680ab5b6ea9d4796236e12439363657f (gc only port)\r\n- https://github.com/dotnet/coreclr/commit/0b86feb1d2830cc1de5db16ee86c0998c01ca30a (gc only port)\r\n- https://github.com/dotnet/coreclr/commit/e64cbb5c722ab9b7d93ca32445e17df1115be70c (manual port)"},{"Id":"9731458257","Type":"PullRequestEvent","CreatedAt":"2019-05-31T02:13:10","Actor":"Suchiman","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/pull/7473","RelatedDescription":"Closed pull request \"Port GC changes from coreclr - 10\" (#7473) at dotnet/corert","RelatedBody":"This port continues https://github.com/dotnet/corert/pull/7434\r\nPorting strategy: extracting patches via `format-patch` from coreclr, adjusting paths, then `am` them on corert.\r\n\r\n**Glossary:**\r\n- already merged: change already exists in corert\r\n- gc only port: change only affected the gc directory and patch applied with no conflicts\r\n- manual port: change applied with custom changes\r\n- omitted changes: contains changes to files that do not exists in corert and were discarded\r\n\r\n**Changes since [last commit](https://github.com/dotnet/coreclr/commit/9f38303221294f45740feefc1b6ddf72347ff882):**\r\n- https://github.com/dotnet/coreclr/commit/6a1c28f05642ac0420b78f35ad32a00b6aef0488 (gc only port)\r\n- https://github.com/dotnet/coreclr/commit/73ef3c13c9b710cb04b67a904b098fb196c224c7 (gc only port, omitted changes)\r\n- https://github.com/dotnet/coreclr/commit/00e7aa00a42debda47a7dbe2b54e924670eaefdd ([already merged](https://github.com/dotnet/corert/pull/4627))\r\n- https://github.com/dotnet/coreclr/commit/5b10f0eb85d8e8ccdcf9b5e38e5dd372e241e24e (gc only port, omitted changes)\r\n- https://github.com/dotnet/coreclr/commit/a7d801aa30e40c6e01536dd0355199842ee5e4c8 (gc only port)\r\n- https://github.com/dotnet/coreclr/commit/165ffa6a0bb2d8b57e83aa95a395a798ad5f5f4f (manual port)\r\n- https://github.com/dotnet/coreclr/commit/bd3424913138d10f9c4fdb6176fb471e8d1ba1d7 (manual port)\r\n- https://github.com/dotnet/coreclr/commit/5b02b0104f3ceba491b7b25fcb4d997e477d2840 (gc only port)\r\n- https://github.com/dotnet/coreclr/commit/558f8e99680ab5b6ea9d4796236e12439363657f (gc only port)\r\n- https://github.com/dotnet/coreclr/commit/0b86feb1d2830cc1de5db16ee86c0998c01ca30a (gc only port)\r\n- https://github.com/dotnet/coreclr/commit/e64cbb5c722ab9b7d93ca32445e17df1115be70c (manual port)"},{"Id":"9730881967","Type":"PullRequestEvent","CreatedAt":"2019-05-30T23:21:05","Actor":"Suchiman","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7473","RelatedDescription":"Opened pull request \"Port GC changes from coreclr - 10\" (#7473) at dotnet/corert","RelatedBody":"This port continues https://github.com/dotnet/corert/pull/7434\r\nPorting strategy: extracting patches via `format-patch` from coreclr, adjusting paths, then `am` them on corert.\r\n\r\n**Glossary:**\r\n- already merged: change already exists in corert\r\n- gc only port: change only affected the gc directory and patch applied with no conflicts\r\n- manual port: change applied with custom changes\r\n- omitted changes: contains changes to files that do not exists in corert and were discarded\r\n\r\n**Changes since [last commit](https://github.com/dotnet/coreclr/commit/9f38303221294f45740feefc1b6ddf72347ff882):**\r\n- https://github.com/dotnet/coreclr/commit/6a1c28f05642ac0420b78f35ad32a00b6aef0488 (gc only port)\r\n- https://github.com/dotnet/coreclr/commit/73ef3c13c9b710cb04b67a904b098fb196c224c7 (gc only port, omitted changes)\r\n- https://github.com/dotnet/coreclr/commit/00e7aa00a42debda47a7dbe2b54e924670eaefdd ([already merged](https://github.com/dotnet/corert/pull/4627))\r\n- https://github.com/dotnet/coreclr/commit/5b10f0eb85d8e8ccdcf9b5e38e5dd372e241e24e (gc only port, omitted changes)\r\n- https://github.com/dotnet/coreclr/commit/a7d801aa30e40c6e01536dd0355199842ee5e4c8 (gc only port)\r\n- https://github.com/dotnet/coreclr/commit/165ffa6a0bb2d8b57e83aa95a395a798ad5f5f4f (manual port)\r\n- https://github.com/dotnet/coreclr/commit/bd3424913138d10f9c4fdb6176fb471e8d1ba1d7 (manual port)\r\n- https://github.com/dotnet/coreclr/commit/5b02b0104f3ceba491b7b25fcb4d997e477d2840 (gc only port)\r\n- https://github.com/dotnet/coreclr/commit/558f8e99680ab5b6ea9d4796236e12439363657f (gc only port)\r\n- https://github.com/dotnet/coreclr/commit/0b86feb1d2830cc1de5db16ee86c0998c01ca30a (gc only port)\r\n- https://github.com/dotnet/coreclr/commit/e64cbb5c722ab9b7d93ca32445e17df1115be70c (manual port)"},{"Id":"9730127776","Type":"PullRequestEvent","CreatedAt":"2019-05-30T20:47:37","Actor":"trylek","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7465","RelatedDescription":"Merged pull request \"CPAOT fixes for Linux\" (#7465) at dotnet/corert","RelatedBody":"I found out that the R2R I was producing with CPAOT\r\nwas crashing in CoreCLR PAL during memory mapping and\r\nit silently switched over to runtime JIT without any\r\nindications of doing so.\r\n\r\nThe problem is that the relative offset of all section\r\nstart RVA's within a page must match the corresponding\r\nfile offsets. As PEBuilder doesn't support this logic,\r\nI ended up copying a bunch of enumerations from the\r\nrelated CoreFX code and I added logic to patch the\r\nsection headers manually. At some point we might want\r\nto flow some of these changes back to the CoreFX repo.\r\n\r\nI have also moved the machine OS override logic to\r\nR2RPEBuilder for better encapsulation. As a side effect\r\nof the TargetBuilder propagatioin I have fixed code\r\npadding to select the proper instruction on all\r\narchitectures.\r\n\r\nThanks\r\n\r\nTomas"}],"ResultType":"GitHubEvent"},"SDK":{"Events":[{"Id":"9731938580","Type":"PullRequestEvent","CreatedAt":"2019-05-31T04:37:01","Actor":"dsplaisted","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/3282","RelatedDescription":"Merged pull request \"Better test logging\" (#3282) at dotnet/sdk","RelatedBody":"This PR removes all direct uses of the CLI Utils `Command` class, and instead routes them through the SDK's `TestCommand`.  This will log the start info, STDOUT, and STDERR.\r\n\r\nThis will, for example, make it a lot easier to see what the problem is from the test logs when a test fails because the right shared framework isn't installed.  The error information in that case goes to STDERR, which a lot of the tests which used `Command.Create` weren't capturing.\r\n\r\nFYI @dotnet/dotnet-cli, we should continue to follow the new pattern of using `DotnetCommand` and `RunExeCommand` instead of `Command.Create` in future tests."},{"Id":"9731269595","Type":"PullRequestEvent","CreatedAt":"2019-05-31T01:15:57","Actor":"peterhuene","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/3283","RelatedDescription":"Opened pull request \"Fix filtering of satellite assemblies when publishing for netcoreapp3.0.\" (#3283) at dotnet/sdk","RelatedBody":"This PR fixes filtering of satellite assemblies when publishing an\r\napplication targeting netcoreapp3.0.\r\n\r\nAn incorrect property name in the `_FilterSatelliteResourcesForPublish` target\r\nwas causing the satellite filtering done for publish to have no effect.\r\n\r\nThis was only a problem when not reusing the build output for publish;\r\nunfortunately this is currently the case for netcoreapp3.0 targeted\r\napplications due to references that are marked as `PrivateAssets=\"all\"`.\r\n\r\nThis PR fixes the property name and adds test coverage for publishing\r\nwhen targeting netcoreapp3.0 with filtered satellite assemblies.\r\n\r\nFixes #3277."}],"ResultType":"GitHubEvent"},"Home-Issues":{"Issues":[{"Id":"441542047","IsPullRequest":true,"CreatedAt":"2019-05-09T18:35:22","Actor":"mitchelsellers","Number":"145","RawContent":null,"Title":"Edits to DNN Platform Information","State":"closed","Body":"Edits to reflect changes in repository structure with recent modifications to the overall project structure.","Url":"https://github.com/dotnet/foundation/pull/145","RelatedDescription":"Closed or merged PR \"Edits to DNN Platform Information\" (#145)"},{"Id":"437980746","IsPullRequest":true,"CreatedAt":"2019-05-03T20:10:38","Actor":"FlorianRappl","Number":"143","RawContent":null,"Title":"Add AngleSharp","State":"closed","Body":"cc @jongalloway ","Url":"https://github.com/dotnet/foundation/pull/143","RelatedDescription":"Closed or merged PR \"Add AngleSharp\" (#143)"},{"Id":"426787230","IsPullRequest":true,"CreatedAt":"2019-05-03T20:08:40","Actor":"mairaw","Number":"141","RawContent":null,"Title":"add links to ML.NET docs","State":"closed","Body":"/cc @JRAlexander @shauheen \r\n\r\nTo match the info we have added for other projects","Url":"https://github.com/dotnet/foundation/pull/141","RelatedDescription":"Closed or merged PR \"add links to ML.NET docs\" (#141)"},{"Id":"440030132","IsPullRequest":true,"CreatedAt":"2019-05-03T20:08:15","Actor":"tomasherceg","Number":"144","RawContent":null,"Title":"Add DotVVM","State":"closed","Body":"cc @jongalloway ","Url":"https://github.com/dotnet/foundation/pull/144","RelatedDescription":"Closed or merged PR \"Add DotVVM\" (#144)"},{"Id":"426787542","IsPullRequest":true,"CreatedAt":"2019-03-29T14:44:24","Actor":"mairaw","Number":"142","RawContent":null,"Title":"add docs samples link","State":"closed","Body":"@BillWagner should we add the samples project too?","Url":"https://github.com/dotnet/foundation/pull/142","RelatedDescription":"Closed or merged PR \"add docs samples link\" (#142)"},{"Id":"426658581","IsPullRequest":true,"CreatedAt":"2019-03-29T02:16:07","Actor":"scottaddie","Number":"139","RawContent":null,"Title":"Add link to ASP.NET Core docs","State":"closed","Body":"Provide a link to the docs site for ASP.NET Core.","Url":"https://github.com/dotnet/foundation/pull/139","RelatedDescription":"Closed or merged PR \"Add link to ASP.NET Core docs\" (#139)"},{"Id":"426666928","IsPullRequest":true,"CreatedAt":"2019-03-29T02:15:48","Actor":"BillWagner","Number":"140","RawContent":null,"Title":"add links to .NET docs","State":"closed","Body":"/cc @mairaw @scottaddie\r\n\r\nMaira, did I miss any project repos to tag?","Url":"https://github.com/dotnet/foundation/pull/140","RelatedDescription":"Closed or merged PR \"add links to .NET docs\" (#140)"},{"Id":"419205679","IsPullRequest":true,"CreatedAt":"2019-03-18T21:04:01","Actor":"MikeWilliams-UK","Number":"137","RawContent":null,"Title":"Add V3.1 repo and change documentation link","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/137","RelatedDescription":"Closed or merged PR \"Add V3.1 repo and change documentation link\" (#137)"},{"Id":"419897914","IsPullRequest":true,"CreatedAt":"2019-03-18T21:03:34","Actor":"devlead","Number":"138","RawContent":null,"Title":"Add Dave to cake.md","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/138","RelatedDescription":"Closed or merged PR \"Add Dave to cake.md\" (#138)"},{"Id":"391459677","IsPullRequest":false,"CreatedAt":"2019-03-08T19:00:06","Actor":"manne","Number":"123","RawContent":null,"Title":"Missing logo for Steeltoe","State":"closed","Body":"`https://brandfolder.com/pivotal-assets/attachments/ohxttd-7yxa60-clvf50/pivotal-assets-pivotal-genericfile.png` redirects to a sign in page\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L128-L130","Url":"https://github.com/dotnet/foundation/issues/123","RelatedDescription":"Closed issue \"Missing logo for Steeltoe\" (#123)"},{"Id":"417018694","IsPullRequest":true,"CreatedAt":"2019-03-08T18:59:32","Actor":"jkonicki","Number":"136","RawContent":null,"Title":"Fix logo and update team contributors","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/136","RelatedDescription":"Closed or merged PR \"Fix logo and update team contributors\" (#136)"},{"Id":"416428925","IsPullRequest":true,"CreatedAt":"2019-03-08T18:59:00","Actor":"manne","Number":"135","RawContent":null,"Title":"adds Umbraco logo","State":"closed","Body":"fixes #124 ","Url":"https://github.com/dotnet/foundation/pull/135","RelatedDescription":"Closed or merged PR \"adds Umbraco logo\" (#135)"},{"Id":"391459812","IsPullRequest":false,"CreatedAt":"2019-03-08T18:59:00","Actor":"manne","Number":"124","RawContent":null,"Title":"Missing logo for Umbraco","State":"closed","Body":"`https://fbcdn-profile-a.akamaihd.net/hprofile-ak-xap1/v/t1.0-1/p160x160/971596_519168901464439_566592989_n.png?oh=ce61e5b4cbd60c0d99c4164cbb05a434&oe=54F091C9&__gda__=1424472439_c9f76213a915bc2af88246f464f29e8b` results in a 404.\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L149-L151","Url":"https://github.com/dotnet/foundation/issues/124","RelatedDescription":"Closed issue \"Missing logo for Umbraco\" (#124)"},{"Id":"416427614","IsPullRequest":true,"CreatedAt":"2019-03-08T18:58:45","Actor":"manne","Number":"134","RawContent":null,"Title":"adds the prism logo","State":"closed","Body":"fixes #126 ","Url":"https://github.com/dotnet/foundation/pull/134","RelatedDescription":"Closed or merged PR \"adds the prism logo\" (#134)"},{"Id":"391460225","IsPullRequest":false,"CreatedAt":"2019-03-08T18:58:44","Actor":"manne","Number":"126","RawContent":null,"Title":"No logo provided for Prism","State":"closed","Body":"Can/should this [image](http://prismlibrary.github.io/images/logo-prism-symbol@2x.png) be used?\r\n\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L155-L157","Url":"https://github.com/dotnet/foundation/issues/126","RelatedDescription":"Closed issue \"No logo provided for Prism\" (#126)"},{"Id":"416157860","IsPullRequest":true,"CreatedAt":"2019-03-08T18:58:26","Actor":"glennawatson","Number":"133","RawContent":null,"Title":"Add additional ReactiveUI organization projects.","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/133","RelatedDescription":"Closed or merged PR \"Add additional ReactiveUI organization projects.\" (#133)"},{"Id":"407251900","IsPullRequest":true,"CreatedAt":"2019-02-18T17:45:44","Actor":"Potapy4","Number":"132","RawContent":null,"Title":"Update MVVM project logo","State":"closed","Body":"Fixes dotnet/dotnetfoundation-website#72\r\nFixes #125","Url":"https://github.com/dotnet/foundation/pull/132","RelatedDescription":"Closed or merged PR \"Update MVVM project logo\" (#132)"},{"Id":"391459919","IsPullRequest":false,"CreatedAt":"2019-02-18T17:45:44","Actor":"manne","Number":"125","RawContent":null,"Title":"Missing logo for MVVM Light Toolkit","State":"closed","Body":"`https://raw.githubusercontent.com/paulcbetts/mvvmlight/master/Installer/InstallItems/html/MVVM_BlackText_190x147.png` results in a 404.\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L137-L139","Url":"https://github.com/dotnet/foundation/issues/125","RelatedDescription":"Closed issue \"Missing logo for MVVM Light Toolkit\" (#125)"},{"Id":"406210463","IsPullRequest":true,"CreatedAt":"2019-02-18T17:44:39","Actor":"NextTurn","Number":"131","RawContent":null,"Title":"Replace http links with https links","State":"closed","Body":"Replace http links with https where possible - both returned 200 OK.","Url":"https://github.com/dotnet/foundation/pull/131","RelatedDescription":"Closed or merged PR \"Replace http links with https links\" (#131)"},{"Id":"399191617","IsPullRequest":true,"CreatedAt":"2019-02-02T11:04:15","Actor":"NextTurn","Number":"130","RawContent":null,"Title":"Update Open XML links","State":"closed","Body":"OpenXmlDeveloper.org was shut down long ago.\r\n\r\nThe content has been moved to EricWhite.com.","Url":"https://github.com/dotnet/foundation/pull/130","RelatedDescription":"Closed or merged PR \"Update Open XML links\" (#130)"},{"Id":"395863354","IsPullRequest":true,"CreatedAt":"2019-01-09T22:28:14","Actor":"ErikEJ","Number":"128","RawContent":null,"Title":"Update of EF description","State":"closed","Body":"@divega !","Url":"https://github.com/dotnet/foundation/pull/128","RelatedDescription":"Closed or merged PR \"Update of EF description\" (#128)"},{"Id":"395901602","IsPullRequest":true,"CreatedAt":"2019-01-05T03:23:39","Actor":"MarcBruins","Number":"129","RawContent":null,"Title":"Update to absolute path","State":"closed","Body":"Update to absolute path so that when this list is copied the link will actually work","Url":"https://github.com/dotnet/foundation/pull/129","RelatedDescription":"Closed or merged PR \"Update to absolute path\" (#129)"},{"Id":"395705579","IsPullRequest":true,"CreatedAt":"2019-01-04T00:22:42","Actor":"carloscds","Number":"127","RawContent":null,"Title":"Update documentation information","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/127","RelatedDescription":"Closed or merged PR \"Update documentation information\" (#127)"},{"Id":"391459057","IsPullRequest":true,"CreatedAt":"2019-01-03T04:47:09","Actor":"manne","Number":"122","RawContent":null,"Title":"targets the existing document","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/122","RelatedDescription":"Closed or merged PR \"targets the existing document\" (#122)"},{"Id":"384569679","IsPullRequest":true,"CreatedAt":"2019-01-03T04:46:31","Actor":"JamesNK","Number":"121","RawContent":null,"Title":"Add Newtonsoft.Json","State":"closed","Body":"// @jongalloway ","Url":"https://github.com/dotnet/foundation/pull/121","RelatedDescription":"Closed or merged PR \"Add Newtonsoft.Json\" (#121)"},{"Id":"384212839","IsPullRequest":true,"CreatedAt":"2018-11-26T09:33:50","Actor":"stefanov-stefan","Number":"120","RawContent":null,"Title":"Added Telerik info","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/120","RelatedDescription":"Closed or merged PR \"Added Telerik info\" (#120)"},{"Id":"384212448","IsPullRequest":true,"CreatedAt":"2018-11-26T09:33:22","Actor":"stefanov-stefan","Number":"119","RawContent":null,"Title":"Added Telerik UWP proj","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/119","RelatedDescription":"Closed or merged PR \"Added Telerik UWP proj\" (#119)"},{"Id":"382378851","IsPullRequest":true,"CreatedAt":"2018-11-23T10:32:15","Actor":"pkgw","Number":"118","RawContent":null,"Title":"Update WorldWide Telescope","State":"closed","Body":"Some layout fixes, but the main change is that @pkgw is now the project director.","Url":"https://github.com/dotnet/foundation/pull/118","RelatedDescription":"Closed or merged PR \"Update WorldWide Telescope\" (#118)"},{"Id":"380070557","IsPullRequest":true,"CreatedAt":"2018-11-23T10:31:49","Actor":"leastprivilege","Number":"117","RawContent":null,"Title":"Update identityserver.md","State":"closed","Body":"significant whitespace","Url":"https://github.com/dotnet/foundation/pull/117","RelatedDescription":"Closed or merged PR \"Update identityserver.md\" (#117)"},{"Id":"379777451","IsPullRequest":true,"CreatedAt":"2018-11-13T04:21:35","Actor":"scottbrady91","Number":"116","RawContent":null,"Title":"Update to IdentityManager project","State":"closed","Body":"My employer and I have recently taken over the IdentityManager project from Dom & Brock. I've updated the IdentityManager page to reflect this and the newer version of the core repo.","Url":"https://github.com/dotnet/foundation/pull/116","RelatedDescription":"Closed or merged PR \"Update to IdentityManager project\" (#116)"}],"ResultType":"GitHubIssue"},"CoreCLR-Issues":{"Issues":[{"Id":"450608525","IsPullRequest":true,"CreatedAt":"2019-05-31T04:22:55","Actor":"franksinankaya","Number":"24878","RawContent":null,"Title":"signedness issue in comparison","State":"open","Body":"@am11 @janvorli @jkotas ","Url":"https://github.com/dotnet/coreclr/pull/24878","RelatedDescription":"Open PR \"signedness issue in comparison\" (#24878)"},{"Id":"450602216","IsPullRequest":false,"CreatedAt":"2019-05-31T03:48:41","Actor":"benaadams","Number":"24877","RawContent":null,"Title":"CrossGen: Arithmetic, casting or conversion operation overflowed or underflowed.","State":"open","Body":"\r\nFor coreclr:\r\n\r\n`> crossgen.exe System.Private.CoreLib.dll`\r\n```\r\nArithmetic, casting or conversion operation overflowed or underflowed. (0x80131516)\r\n while compiling method CLRIKeyValuePairImpl`2.ToString\r\nArithmetic, casting or conversion operation overflowed or underflowed. (0x80131516)\r\n while compiling method EventRegistrationTokenTable`1.RemoveEventHandler\r\nArithmetic, casting or conversion operation overflowed or underflowed. (0x80131516)\r\n while compiling method NullableEqualityComparer`1.GetHashCode\r\nArithmetic, casting or conversion operation overflowed or underflowed. (0x80131516)\r\n while compiling method NullableEqualityComparer`1.GetHashCode\r\nArithmetic, casting or conversion operation overflowed or underflowed. (0x80131516)\r\n while compiling method EventRegistrationTokenTable`1.RemoveEventHandler\r\nArithmetic, casting or conversion operation overflowed or underflowed. (0x80131516)\r\n while compiling method CLRIKeyValuePairImpl`2.ToString\r\n```","Url":"https://github.com/dotnet/coreclr/issues/24877","RelatedDescription":"Open issue \"CrossGen: Arithmetic, casting or conversion operation overflowed or underflowed.\" (#24877)"},{"Id":"450542245","IsPullRequest":true,"CreatedAt":"2019-05-31T03:40:51","Actor":"jkoritzinsky","Number":"24872","RawContent":null,"Title":"Check that we are using a valid IDispatch invocation flag earlier","State":"closed","Body":"Limit the amount of work we do when we're going to return early anyway due to an invalid IDispatch invocation type.\r\n","Url":"https://github.com/dotnet/coreclr/pull/24872","RelatedDescription":"Closed or merged PR \"Check that we are using a valid IDispatch invocation flag earlier\" (#24872)"},{"Id":"450582490","IsPullRequest":true,"CreatedAt":"2019-05-31T02:11:39","Actor":"jkotas","Number":"24876","RawContent":null,"Title":"Delete dead code","State":"open","Body":"","Url":"https://github.com/dotnet/coreclr/pull/24876","RelatedDescription":"Open PR \"Delete dead code\" (#24876)"},{"Id":"450527387","IsPullRequest":true,"CreatedAt":"2019-05-31T02:07:51","Actor":"jashook","Number":"24870","RawContent":null,"Title":"Fix #24867","State":"closed","Body":"Pre SDK 3.0, a project type that is not .csproj would not include Directory.Build.targets. Change empty.proj to empty.csproj to allow source build, which uses a 2.1 sdk to build, correctly import Directory.Build.targets.\r\n\r\nFixes #24867 ","Url":"https://github.com/dotnet/coreclr/pull/24870","RelatedDescription":"Closed or merged PR \"Fix #24867\" (#24870)"},{"Id":"450484280","IsPullRequest":false,"CreatedAt":"2019-05-31T02:07:51","Actor":"jashook","Number":"24867","RawContent":null,"Title":"Coreclr fails to build with a 2.1 .Net sdk","State":"closed","Body":"This currently only affects source-build as we are using the 3.0 sdk for coreclr currently. This does mean however, that coreclr will fail to build through source-build currently.","Url":"https://github.com/dotnet/coreclr/issues/24867","RelatedDescription":"Closed issue \"Coreclr fails to build with a 2.1 .Net sdk\" (#24867)"},{"Id":"450441338","IsPullRequest":true,"CreatedAt":"2019-05-31T01:38:34","Actor":"AaronRobinsonMSFT","Number":"24863","RawContent":null,"Title":"Remove unused code in vm/util.*","State":"closed","Body":"","Url":"https://github.com/dotnet/coreclr/pull/24863","RelatedDescription":"Closed or merged PR \"Remove unused code in vm/util.*\" (#24863)"},{"Id":"450564438","IsPullRequest":true,"CreatedAt":"2019-05-31T00:37:50","Actor":"VSadov","Number":"24875","RawContent":null,"Title":"Makes GetTotalAllocatedBytes monotonic in nonprecise case.","State":"open","Body":"Fixes:#24615","Url":"https://github.com/dotnet/coreclr/pull/24875","RelatedDescription":"Open PR \"Makes GetTotalAllocatedBytes monotonic in nonprecise case.\" (#24875)"},{"Id":"450481319","IsPullRequest":true,"CreatedAt":"2019-05-31T00:33:22","Actor":"jkoritzinsky","Number":"24865","RawContent":null,"Title":"Add information in docs for required Windows SDK version for test build.","State":"closed","Body":"After adding the WinRT tests in #23529, the minimum version of the Windows 10 SDK needed for our test build became 10.0.17763. This PR updates our documentation to clarify that this version is the minimum required for the test build on Windows.\r\n\r\nFixes #24660.\r\n","Url":"https://github.com/dotnet/coreclr/pull/24865","RelatedDescription":"Closed or merged PR \"Add information in docs for required Windows SDK version for test build.\" (#24865)"},{"Id":"450563150","IsPullRequest":true,"CreatedAt":"2019-05-31T00:30:52","Actor":"MattGal","Number":"24874","RawContent":null,"Title":"Test VSTS CI triggers","State":"open","Body":"Fixes spelling of a commonly misspelled word, 20+ times in the same file.","Url":"https://github.com/dotnet/coreclr/pull/24874","RelatedDescription":"Open PR \"Test VSTS CI triggers\" (#24874)"},{"Id":"450561635","IsPullRequest":false,"CreatedAt":"2019-05-31T00:23:05","Actor":"noahfalk","Number":"24873","RawContent":null,"Title":"Create an example for using DiagnosticsSourceEventSource","State":"open","Body":"We don't have any good examples that show how to use DiagnosticsSourceEventSource end-to-end via ETW. We should create one. See issue #37966 for details.\r\n","Url":"https://github.com/dotnet/coreclr/issues/24873","RelatedDescription":"Open issue \"Create an example for using DiagnosticsSourceEventSource\" (#24873)"},{"Id":"450518588","IsPullRequest":true,"CreatedAt":"2019-05-30T23:49:41","Actor":"briansull","Number":"24869","RawContent":null,"Title":"Fixes for building the Desktop JIT in CodegenMirror","State":"closed","Body":"This PR contains fixes to enable building of the JIT in CodegenMirror","Url":"https://github.com/dotnet/coreclr/pull/24869","RelatedDescription":"Closed or merged PR \"Fixes for building the Desktop JIT in CodegenMirror\" (#24869)"},{"Id":"450432763","IsPullRequest":true,"CreatedAt":"2019-05-30T23:40:52","Actor":"echesakovMSFT","Number":"24860","RawContent":null,"Title":"Create NearDiffer based on specified targetArchitecture","State":"closed","Body":"To support SuperPMI NearDiffer with altjits","Url":"https://github.com/dotnet/coreclr/pull/24860","RelatedDescription":"Closed or merged PR \"Create NearDiffer based on specified targetArchitecture\" (#24860)"},{"Id":"450531829","IsPullRequest":true,"CreatedAt":"2019-05-30T22:19:50","Actor":"CarolEidt","Number":"24871","RawContent":null,"Title":"Handle a zero byte cpblk","State":"open","Body":"Fix #24846","Url":"https://github.com/dotnet/coreclr/pull/24871","RelatedDescription":"Open PR \"Handle a zero byte cpblk\" (#24871)"},{"Id":"450508557","IsPullRequest":true,"CreatedAt":"2019-05-30T21:11:57","Actor":"davmason","Number":"24868","RawContent":null,"Title":"Add docs for rejit on attach and the new profiler attach mechanism","State":"open","Body":"","Url":"https://github.com/dotnet/coreclr/pull/24868","RelatedDescription":"Open PR \"Add docs for rejit on attach and the new profiler attach mechanism\" (#24868)"},{"Id":"450478134","IsPullRequest":true,"CreatedAt":"2019-05-30T20:59:24","Actor":"dotnet-maestro-bot","Number":"24864","RawContent":null,"Title":"[automated] Merge branch 'release/2.1' => 'release/2.2'","State":"closed","Body":"I detected changes in the release/2.1 branch which have not been merged yet to release/2.2. I'm a robot and am configured to help you automatically keep release/2.2 up to date, so I've opened this PR.\r\n\r\nThis PR merges commits made on release/2.1 by the following committers:\n\n* @RussKeldorph\n* @wtgodbe\n* @dotnet-maestro-bot\r\n\r\n## Instructions for merging from UI\r\n\r\nThis PR will not be auto-merged. When pull request checks pass, complete this PR by creating a merge commit, *not* a squash or rebase commit.\r\n\r\n<img alt=\"merge button instructions\" src=\"https://i.imgur.com/GepcNJV.png\" width=\"300\" />\r\n\r\nIf this repo does not allow creating merge commits from the GitHub UI, use command line instructions.\r\n\r\n## Instructions for merging via command line\r\n\r\nRun these commands to merge this pull request from the command line.\r\n\r\n``` sh\r\ngit fetch\r\ngit checkout release/2.1\r\ngit pull --ff-only\r\ngit checkout release/2.2\r\ngit pull --ff-only\r\ngit merge --no-ff release/2.1\r\n\r\n# If there are merge conflicts, resolve them and then run git merge --continue to complete the merge\r\n# Pushing the changes to the PR branch will re-trigger PR validation.\r\ngit push https://github.com/dotnet-maestro-bot/coreclr HEAD:merge/release/2.1-to-release/2.2\r\n```\r\n\r\n<details>\r\n<summary>or if you are using SSH</summary>\r\n\r\n```\r\ngit push git@github.com:dotnet-maestro-bot/coreclr HEAD:merge/release/2.1-to-release/2.2\r\n```\r\n\r\n</details>\r\n\r\n\r\nAfter PR checks are complete push the branch\r\n```\r\ngit push\r\n```\r\n\r\n## Instructions for resolving conflicts\r\n\r\n:warning: If there are merge conflicts, you will need to resolve them manually before merging. You can do this [using GitHub][resolve-github] or using the [command line][resolve-cli].\r\n\r\n[resolve-github]: https://help.github.com/articles/resolving-a-merge-conflict-on-github/\r\n[resolve-cli]: https://help.github.com/articles/resolving-a-merge-conflict-using-the-command-line/\r\n\r\n## Instructions for updating this pull request\r\n\r\nContributors to this repo have permission update this pull request by pushing to the branch 'merge/release/2.1-to-release/2.2'. This can be done to resolve conflicts or make other changes to this pull request before it is merged.\r\n\r\n```\r\ngit checkout -b merge/release/2.1-to-release/2.2 release/2.2\r\ngit pull https://github.com/dotnet-maestro-bot/coreclr merge/release/2.1-to-release/2.2\r\n(make changes)\r\ngit commit -m \"Updated PR with my changes\"\r\ngit push https://github.com/dotnet-maestro-bot/coreclr merge/release/2.1-to-release/2.2\r\n```\r\n\r\n<details>\r\n    <summary>or if you are using SSH</summary>\r\n\r\n```\r\ngit checkout -b merge/release/2.1-to-release/2.2 release/2.2\r\ngit pull git@github.com:dotnet-maestro-bot/coreclr merge/release/2.1-to-release/2.2\r\n(make changes)\r\ngit commit -m \"Updated PR with my changes\"\r\ngit push git@github.com:dotnet-maestro-bot/coreclr merge/release/2.1-to-release/2.2\r\n```\r\n\r\n</details>\r\n\r\nContact .NET Core Engineering if you have questions or issues.\r\nAlso, if this PR was generated incorrectly, help us fix it. See https://github.com/dotnet/arcade/blob/master/scripts/GitHubMergeBranches.ps1.\r\n","Url":"https://github.com/dotnet/coreclr/pull/24864","RelatedDescription":"Closed or merged PR \"[automated] Merge branch 'release/2.1' => 'release/2.2'\" (#24864)"},{"Id":"450483823","IsPullRequest":false,"CreatedAt":"2019-05-30T20:09:05","Actor":"mjsabby","Number":"24866","RawContent":null,"Title":"Use new API for Large Pages in Windows 19H1 to request 1GB/2MB","State":"open","Body":"`NtAllocateVirtualMemoryEx` has a new setting that allows picking large page size in Windows 19H1. We should use this API when we detect we're running on 19H1+.\r\n\r\nThe benefit is that we can request which size of large pages do we want. For example, we could try 1GB first, and fall back to 2MB if it fails, etc.","Url":"https://github.com/dotnet/coreclr/issues/24866","RelatedDescription":"Open issue \"Use new API for Large Pages in Windows 19H1 to request 1GB/2MB\" (#24866)"},{"Id":"450282873","IsPullRequest":true,"CreatedAt":"2019-05-30T19:04:15","Actor":"dotnet-maestro[bot]","Number":"24854","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190529.5\r\n- **Date Produced**: 5/30/2019 3:41 AM\r\n- **Commit**: fb62c6377a6bd163af2a7516260f064498942585\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19279.5\r\n  - **Microsoft.DotNet.Build.Tasks.Feed** -> 2.2.0-beta.19279.5\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19279.5\r\n  - **Microsoft.DotNet.Helix.Sdk** -> 2.0.0-beta.19279.5\r\n\r\n","Url":"https://github.com/dotnet/coreclr/pull/24854","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#24854)"},{"Id":"450440661","IsPullRequest":true,"CreatedAt":"2019-05-30T18:19:55","Actor":"hoyosjs","Number":"24862","RawContent":null,"Title":"Fix event pipe session provider list clear","State":"open","Body":"During disable, we clear the provider list. There was a use on a freed pointer, so just reorder the deletion order.\r\n\r\nFixes #24772\r\n\r\nFixes for parts of:\r\nFixes #24851\r\nFixes #24839\r\n","Url":"https://github.com/dotnet/coreclr/pull/24862","RelatedDescription":"Open PR \"Fix event pipe session provider list clear\" (#24862)"},{"Id":"450438911","IsPullRequest":true,"CreatedAt":"2019-05-30T18:15:47","Actor":"jkoritzinsky","Number":"24861","RawContent":null,"Title":"Use Modern CMake features instead of CMAKE_CXX_FLAGS","State":"open","Body":"Now that our minimum CMake version is 3.5.1, use the `CMAKE_<LANG>_STANDARD` properties for setting the language standard and use generator expressions with `add_compile_options` to remove the need for most of our uses of `CMAKE_CXX_FLAGS`.\r\n\r\nUpdate our usage of `CMAKE_CXX_COMPILER_ID` to correctly understand that `AppleClang` is now distinct from `Clang`.","Url":"https://github.com/dotnet/coreclr/pull/24861","RelatedDescription":"Open PR \"Use Modern CMake features instead of CMAKE_CXX_FLAGS\" (#24861)"},{"Id":"450416171","IsPullRequest":false,"CreatedAt":"2019-05-30T17:21:16","Actor":"josalem","Number":"24859","RawContent":null,"Title":"Align diagnostic server transport name with spec","State":"open","Body":"Modify the OS Transport name for the Diagnostics Server to align with spec (see: dotnet/diagnostics#279):\r\n\r\n`dotnetcore-diagnostics...` ➡️  `dotnet-diagnostics...`","Url":"https://github.com/dotnet/coreclr/issues/24859","RelatedDescription":"Open issue \"Align diagnostic server transport name with spec\" (#24859)"},{"Id":"450358270","IsPullRequest":true,"CreatedAt":"2019-05-30T16:54:56","Actor":"stephentoub","Number":"24857","RawContent":null,"Title":"Add Environment.TickCount64","State":"closed","Body":"Contributes to https://github.com/dotnet/corefx/issues/35499","Url":"https://github.com/dotnet/coreclr/pull/24857","RelatedDescription":"Closed or merged PR \"Add Environment.TickCount64\" (#24857)"},{"Id":"450287543","IsPullRequest":true,"CreatedAt":"2019-05-30T15:24:29","Actor":"dotnet-maestro[bot]","Number":"24855","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190529.8\r\n- **Date Produced**: 5/30/2019 8:05 AM\r\n- **Commit**: e23119d577e644d2c2a25419c88c1181681358e0\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.Bcl.AsyncInterfaces** -> 1.0.0-preview6.19279.8\r\n  - **Microsoft.NETCore.Platforms** -> 3.0.0-preview6.19279.8\r\n  - **Microsoft.Private.CoreFx.NETCoreApp** -> 4.6.0-preview6.19279.8\r\n\r\n","Url":"https://github.com/dotnet/coreclr/pull/24855","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#24855)"},{"Id":"450289314","IsPullRequest":true,"CreatedAt":"2019-05-30T15:23:36","Actor":"dotnet-maestro[bot]","Number":"24856","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190529.07\r\n- **Date Produced**: 5/30/2019 4:13 AM\r\n- **Commit**: 798280671320c7613d34fadc88ec1b0e853d3d37\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.0.0-preview6-27729-07\r\n\r\n","Url":"https://github.com/dotnet/coreclr/pull/24856","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#24856)"},{"Id":"450359510","IsPullRequest":true,"CreatedAt":"2019-05-30T15:16:51","Actor":"jashook","Number":"24858","RawContent":null,"Title":"Port #22775 into release/2.1","State":"open","Body":"Port #22775 into release/2.1\r\n\r\nFixes #24676\r\n\r\n### Set flag in comp info to signal that a caller has >8 byte struct args\r\n\r\nThis will be used by fgCanFastTailCall to correctly determine whether an arm64\r\nor x64 linux caller/callee can fastTailCall. It is also a workaround to #12468 to catch early any slot shuffling that would happen in LowerFastTailCall. Which currently assumes all parameters are one slot size.\r\n","Url":"https://github.com/dotnet/coreclr/pull/24858","RelatedDescription":"Open PR \"Port #22775 into release/2.1\" (#24858)"},{"Id":"450171364","IsPullRequest":true,"CreatedAt":"2019-05-30T07:31:31","Actor":"noahfalk","Number":"24853","RawContent":null,"Title":"Netperf format change pr","State":"open","Body":"I am still working to finish the file format changes and merge with Jose's session changes, but I wanted to start the pipeline of PR feedback. Depending on amount of feedback and CI overhead I could either add more work into this PR or check it in and do additional work in a new PR. Although the work might get large in total each commit should represent a modest change with a specific goal that is reviewable in isolation. Hopefully that aids in review.\r\n\r\nThese first few commits do some preparatory work and address issue #19688. Once the full stream of work is complete I also aim to address issues #23414, #24188, #20751, #20555, #21827, and #24852.\r\n\r\n\r\n@janvorli - Could you take a look at the 64 bit thread support in step 3?\r\n@dotnet/dotnet-diag\r\n\r\n","Url":"https://github.com/dotnet/coreclr/pull/24853","RelatedDescription":"Open PR \"Netperf format change pr\" (#24853)"},{"Id":"450170294","IsPullRequest":false,"CreatedAt":"2019-05-30T07:28:24","Actor":"noahfalk","Number":"24852","RawContent":null,"Title":"Misc EventPipe format improvements","State":"open","Body":"While doing work on the updated EventPipe file format I came across a few other things that would be nice to improve:\r\n\r\n- [ ] - Change the file format suffix to .nettrace. We are making other breaking changes already and I don't think there is a strong community knowledge about \".netperf\" yet so this appears to be the best oportunity we'll get to rename. 'Trace' is a more accurate description that shows the file can be used in a range of diagnostic purposes, not solely for performance investigations.\r\n\r\n- [ ] - The magic at the beginning of the file is !FastSerialization1, a generic header used by the FastSerialization library for all binary formatted object graphs it produces. It doesn't convey that the file is or is not a nettrace file. I want to put the magic value 'nettrace' in front of it so it is trivial to distinguish the format from some other blob of FastSerialization binary data.\r\n\r\n- [ ] - @Maoni0 requested that we add ProcessorNumber to the event data\r\n\r\n- [ ] - Separate event metadata into different blocks than the rest of the events so that they can be easily identified without walking every event in the trace. @mjsabby was interested in having a parser that could quickly subset huge traces into more manageable trace chunks that contain a specific time range of events and the supporting metadata necessary to parse them.\r\n\r\n- [ ] - Header compression - Right now the EventPipe headers are ~56 bytes per event which for many workloads represents a non-trivial portion of the total trace file size on disk. Some of the other work items raise that header size further. There are probably some fast and relatively simple encoding changes that could reduce that size substantially.","Url":"https://github.com/dotnet/coreclr/issues/24852","RelatedDescription":"Open issue \"Misc EventPipe format improvements\" (#24852)"},{"Id":"450160448","IsPullRequest":false,"CreatedAt":"2019-05-30T06:56:42","Actor":"AriNuer","Number":"24851","RawContent":null,"Title":"Test failure: tracing_eventsource._eventsourcetrace_eventsourcetrace_eventsourcetrace_/_eventsourcetrace_eventsourcetrace_eventsourcetrace_cmd","State":"open","Body":"The test `tracing_eventsource._eventsourcetrace_eventsourcetrace_eventsourcetrace_/_eventsourcetrace_eventsourcetrace_eventsourcetrace_cmd` has failed.\r\n\r\nFailure Message:\r\n```\r\nInternal CLR error. (0x80131506)\\r\r\n   at System.Diagnostics.Tracing.EventPipe.Disable()\\r\r\n   at System.RuntimeMethodHandle.InvokeMethod(System.Object, System.Object[], System.Signature, Boolean, Boolean)\\r\r\n   at System.Reflection.RuntimeMethodInfo.Invoke(System.Object, System.Reflection.BindingFlags, System.Reflection.Binder, System.Object[], System.Globalization.CultureInfo)\\r\r\n   at Tracing.Tests.Common.TraceControl.Disable()\\r\r\n   at Tracing.Tests.EventSourceTrace.Main(System.String[])\\r\r\n\\r\r\nReturn code:      1\\r\r\nRaw output file:      C:\\\\dotnetbuild\\\\work\\\\2ce71b63-3ca8-41a6-879c-d253aeed7a53\\\\Work\\\\ed226a49-4ace-4bc5-a8cb-c7f068fc5d65\\\\Exec\\\\tracing\\\\eventsource\\\\Reports\\\\tracing.eventsource\\\\eventsourcetrace\\\\eventsourcetrace\\\\eventsourcetrace.output.txt\\r\r\nRaw output:\\r\r\nBEGIN EXECUTION\\r\r\n        1 file(s) copied.\\r\r\n\\\" C:\\\\dotnetbuild\\\\work\\\\2ce71b63-3ca8-41a6-879c-d253aeed7a53\\\\Payload\\\\crossgen.exe\\\"  /Platform_Assemblies_Paths C:\\\\dotnetbuild\\\\work\\\\2ce71b63-3ca8-41a6-879c-d253aeed7a53\\\\Payload;C:\\\\dotnetbuild\\\\work\\\\2ce71b63-3ca8-41a6-879c-d253aeed7a53\\\\Work\\\\ed226a49-4ace-4bc5-a8cb-c7f068fc5d65\\\\Exec\\\\tracing\\\\eventsource\\\\eventsourcetrace\\\\eventsourcetrace\\\\IL;C:\\\\dotnetbuild\\\\work\\\\2ce71b63-3ca8-41a6-879c-d253aeed7a53\\\\Work\\\\ed226a49-4ace-4bc5-a8cb-c7f068fc5d65\\\\Exec\\\\tracing\\\\eventsource\\\\eventsourcetrace\\\\eventsourcetrace /in eventsourcetrace.org /out eventsourcetrace.exe\\r\r\nMicrosoft (R) CoreCLR Native Image Generator - Version 4.5.30319.0\\r\r\nCopyright (c) Microsoft Corporation.  All rights reserved.\\r\r\n\\r\r\nNative image eventsourcetrace.exe generated successfully.\\r\r\n \\\"C:\\\\dotnetbuild\\\\work\\\\2ce71b63-3ca8-41a6-879c-d253aeed7a53\\\\Payload\\\\corerun.exe\\\" eventsourcetrace.exe \\r\r\n\\tStart: Enable tracing.\\r\r\n\\tEnd: Enable tracing.\\r\r\n\\r\r\n\\tStart: Messaging.\\r\r\n\\tEnd: Messaging.\\r\r\n\\r\r\n\\tStart: Disable tracing.\\r\r\nExpected: 100\\r\r\nActual: -1073741819\\r\r\nEND EXECUTION - FAILED\\r\r\nFAILED\\r\r\nTest Harness Exitcode is : 1\\r\r\nTo run the test:\\r\r\n> set CORE_ROOT=C:\\\\dotnetbuild\\\\work\\\\2ce71b63-3ca8-41a6-879c-d253aeed7a53\\\\Payload\\r\r\n> C:\\\\dotnetbuild\\\\work\\\\2ce71b63-3ca8-41a6-879c-d253aeed7a53\\\\Work\\\\ed226a49-4ace-4bc5-a8cb-c7f068fc5d65\\\\Exec\\\\tracing\\\\eventsource\\\\eventsourcetrace\\\\eventsourcetrace\\\\eventsourcetrace.cmd\\r\r\nExpected: True\\r\r\nActual:   False\r\n```\r\n\r\nStack Trace:\r\n```\r\n   at tracing_eventsource._eventsourcetrace_eventsourcetrace_eventsourcetrace_._eventsourcetrace_eventsourcetrace_eventsourcetrace_cmd() in F:\\workspace\\_work\\1\\s\\bin\\tests\\Windows_NT.x86.Release\\TestWrappers\\tracing.eventsource\\tracing.eventsource.XUnitWrapper.cs:line 126\r\n```\r\n\r\nBuild : Master - 20190529.4 (Ready-To-Run Tests)\r\nFailing configurations:\r\n- Windows.7.Amd64\r\n  - x86\r\n  - x64\r\n\r\nDetails:\r\nhttps://mc.dot.net/#/product/netcore/master/source/official~2Fdotnet~2Fcoreclr~2Frefs~2Fheads~2Fmaster/type/test~2Ffunctional~2Fr2r~2Fcli~2F/build/20190529.4/workItem/PayloadGroup0/analysis/xunit/tracing_eventsource._eventsourcetrace_eventsourcetrace_eventsourcetrace_~2F_eventsourcetrace_eventsourcetrace_eventsourcetrace_cmd\r\n","Url":"https://github.com/dotnet/coreclr/issues/24851","RelatedDescription":"Open issue \"Test failure: tracing_eventsource._eventsourcetrace_eventsourcetrace_eventsourcetrace_/_eventsourcetrace_eventsourcetrace_eventsourcetrace_cmd\" (#24851)"},{"Id":"450144740","IsPullRequest":false,"CreatedAt":"2019-05-30T06:01:24","Actor":"jkotas","Number":"24850","RawContent":null,"Title":"EventPipe shutdown race conditions","State":"open","Body":"EventPipe shutdown release resources while other threads can be still accessing them. There are no locks protecting this: https://github.com/dotnet/coreclr/blob/5b283a18625f7a8009c18221592ec81c3cd32375/src/vm/eventpipe.cpp#L228\r\n\r\nThis will lead to intermittent shutdown crashes.\r\n\r\nAlso, please delete the call to `FlushProcessWriteBuffers` while fixing this. This call is pretty expensive and it should not be required for the synchronization.","Url":"https://github.com/dotnet/coreclr/issues/24850","RelatedDescription":"Open issue \"EventPipe shutdown race conditions\" (#24850)"},{"Id":"450143438","IsPullRequest":false,"CreatedAt":"2019-05-30T05:56:00","Actor":"jkotas","Number":"24849","RawContent":null,"Title":"EventPipe shutdown too early","State":"open","Body":"`EventPipe::Shutdown` + `DiagnosticServer::Shutdown` is called as the first thing in `EEShutDownHelper`: https://github.com/dotnet/coreclr/blob/5b283a18625f7a8009c18221592ec81c3cd32375/src/vm/ceemain.cpp#L1409\r\n\r\nThis is too early. There is still quite a bit of user managed code running during `EEShutDownHelper` (all AppDomain.ProcessExit events) that should be able to use tracing facilities.","Url":"https://github.com/dotnet/coreclr/issues/24849","RelatedDescription":"Open issue \"EventPipe shutdown too early\" (#24849)"}],"ResultType":"GitHubIssue"},"CLI-Issues":{"Issues":[{"Id":"450544629","IsPullRequest":true,"CreatedAt":"2019-05-30T23:09:35","Actor":"johnbeisner","Number":"11452","RawContent":null,"Title":"[WIP] Run install-script tests only when merging into master.","State":"open","Body":"Run install-script tests only when merging into master.\r\n","Url":"https://github.com/dotnet/cli/pull/11452","RelatedDescription":"Open PR \"[WIP] Run install-script tests only when merging into master.\" (#11452)"},{"Id":"448356958","IsPullRequest":false,"CreatedAt":"2019-05-30T17:26:15","Actor":"dsplaisted","Number":"11425","RawContent":null,"Title":"Windows Forms and WPF project templates should not show up if current OS isn't Windows","State":"closed","Body":"We are not planning to support building Windows Forms and WPF projects on non-Windows operating systems (at least for now): #10842 \r\n\r\nGiven that, we should not include the `winforms` and `wpf` project templates for non-Windows builds of the .NET Core SDK.\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/11425","RelatedDescription":"Closed issue \"Windows Forms and WPF project templates should not show up if current OS isn't Windows\" (#11425)"},{"Id":"450277063","IsPullRequest":true,"CreatedAt":"2019-05-30T13:00:45","Actor":"dotnet-maestro[bot]","Number":"11451","RawContent":null,"Title":"[master] Update dependencies from dotnet/templating","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/templating\r\n- **Build**: 20190529.2\r\n- **Date Produced**: 5/29/2019 10:17 PM\r\n- **Commit**: cbe9ed1639f193a075beeca6e6e6aff121a08382\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.TemplateEngine.Cli** -> 1.0.2-beta5.19279.2\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11451","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/templating\" (#11451)"},{"Id":"450274527","IsPullRequest":true,"CreatedAt":"2019-05-30T12:58:39","Actor":"dotnet-maestro[bot]","Number":"11450","RawContent":null,"Title":"[master] Update dependencies from dotnet/sdk","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/sdk\r\n- **Build**: 20190529.4\r\n- **Date Produced**: 5/30/2019 1:40 AM\r\n- **Commit**: d6749cfae26412c188e26c247b15919afccef127\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk** -> 3.0.100-preview6.19279.4\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11450","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/sdk\" (#11450)"},{"Id":"450274384","IsPullRequest":true,"CreatedAt":"2019-05-30T12:53:16","Actor":"dotnet-maestro[bot]","Number":"11449","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190529.5\r\n- **Date Produced**: 5/30/2019 3:41 AM\r\n- **Commit**: fb62c6377a6bd163af2a7516260f064498942585\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19279.5\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11449","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#11449)"},{"Id":"450153480","IsPullRequest":true,"CreatedAt":"2019-05-30T06:33:05","Actor":"jayaranigarg","Number":"11448","RawContent":null,"Title":"TestPLatform insertion 16.1.1","State":"open","Body":"Release : https://github.com/Microsoft/vstest/releases/tag/v16.1.1","Url":"https://github.com/dotnet/cli/pull/11448","RelatedDescription":"Open PR \"TestPLatform insertion 16.1.1\" (#11448)"},{"Id":"450150914","IsPullRequest":true,"CreatedAt":"2019-05-30T06:23:32","Actor":"jayaranigarg","Number":"11447","RawContent":null,"Title":"TestPlatform insertion 16.1.1","State":"open","Body":"Release : https://github.com/Microsoft/vstest/releases/tag/v16.1.1\r\n","Url":"https://github.com/dotnet/cli/pull/11447","RelatedDescription":"Open PR \"TestPlatform insertion 16.1.1\" (#11447)"},{"Id":"450144791","IsPullRequest":false,"CreatedAt":"2019-05-30T06:01:34","Actor":"yyjdelete","Number":"11446","RawContent":null,"Title":"`dotnet tool install --global {1}` in `CannotFindCommandAvailableAsTool` should not be translated","State":"open","Body":"It's an raw command and should not be translated.\r\nSeems the file are updated automatically from another place?\r\n\r\nSee it's translated in\r\nhttps://github.com/dotnet/cli/blob/ae5ff2c666e5288ef6dbbba15f36782210b6412d/src/Microsoft.DotNet.Cli.Utils/xlf/LocalizableStrings.zh-Hans.xlf#L104\r\nhttps://github.com/dotnet/cli/blob/ae5ff2c666e5288ef6dbbba15f36782210b6412d/src/Microsoft.DotNet.Cli.Utils/xlf/LocalizableStrings.ko.xlf#L104","Url":"https://github.com/dotnet/cli/issues/11446","RelatedDescription":"Open issue \"`dotnet tool install --global {1}` in `CannotFindCommandAvailableAsTool` should not be translated\" (#11446)"},{"Id":"450070204","IsPullRequest":true,"CreatedAt":"2019-05-30T00:01:43","Actor":"dotnet-bot","Number":"11445","RawContent":null,"Title":"Merge release/2.1.6xx to release/2.2.2xx","State":"open","Body":"\nThis is an automatically generated pull request from release/2.1.6xx into release/2.2.2xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1.6xx-to-release/2.2.2xx\ngit reset --hard upstream/release/2.2.2xx\ngit merge upstream/release/2.1.6xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.1.6xx-to-release/2.2.2xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/cli/pull/11445","RelatedDescription":"Open PR \"Merge release/2.1.6xx to release/2.2.2xx\" (#11445)"},{"Id":"450063096","IsPullRequest":false,"CreatedAt":"2019-05-29T23:28:50","Actor":"ericstj","Number":"11444","RawContent":null,"Title":"Deps file for MSBuild shouldn't downgrade common task dependencies.","State":"open","Body":"## Steps to reproduce\r\nProduce a task with a dependency on a new version of roslyn.\r\n\r\n## Expected  behavior\r\nTask works on latest SDK\r\n\r\n## Actual behavior\r\nTask fails to load with ref-def mismatch for roslyn DLLs since old version (2.1.0) is listed in MSBuild's deps file and carried in the MSBuild bin folder.\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview6-011681\r\n Commit:    2f5626d019\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17763\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   D:\\dotnet\\corefx\\.dotnet\\sdk\\3.0.100-preview6-011681\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview6-27629-07\r\n  Commit:  a3967b6096\r\n\r\n.NET Core SDKs installed:\r\n  2.2.103 [D:\\dotnet\\corefx\\.dotnet\\sdk]\r\n  3.0.100-preview6-011681 [D:\\dotnet\\corefx\\.dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.2.1 [D:\\dotnet\\corefx\\.dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.1 [D:\\dotnet\\corefx\\.dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview6-19230-05 [D:\\dotnet\\corefx\\.dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.2.1 [D:\\dotnet\\corefx\\.dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview6-27629-07 [D:\\dotnet\\corefx\\.dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview6-27629-07 [D:\\dotnet\\corefx\\.dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n```\r\n\r\n@nguerrera suggested a tactical fix https://github.com/dotnet/arcade/issues/2748#issuecomment-497140703\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/11444","RelatedDescription":"Open issue \"Deps file for MSBuild shouldn't downgrade common task dependencies.\" (#11444)"},{"Id":"450049675","IsPullRequest":false,"CreatedAt":"2019-05-29T22:43:58","Actor":"xavierjohn","Number":"11442","RawContent":null,"Title":"Published exe is missing version information.","State":"closed","Body":"## Steps to reproduce\r\nCreate the default Hello World console application.\r\npublish it\r\n`dotnet publish -o c:\\temp\\hello -r win10-x64`\r\n\r\n## Expected  behavior\r\nThe generated HelloWorld.exe has Product name & Version filled in just like HelloWorld.dll.\r\n\r\n## Actual behavior\r\nFile version, Product Name, Product version are all empty.\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.203\r\n Commit:    e5bab63eca\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18362\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.203\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.4\r\n  Commit:  f95848e524\r\n\r\n.NET Core SDKs installed:\r\n  2.1.602 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.604 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.700 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.203 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/11442","RelatedDescription":"Closed issue \"Published exe is missing version information.\" (#11442)"},{"Id":"450060702","IsPullRequest":false,"CreatedAt":"2019-05-29T20:53:52","Actor":"BartoGabriel","Number":"11443","RawContent":null,"Title":"Input of keys in another language","State":"open","Body":"\r\nWhen creating a new project from a template, in case there are possible actions to be executed, it does not take well the keys pressed in another language.\r\n\r\nFor example, in my machine in Spanish I am being asked to press S or N, and when I press S it says that it is incorrect and expects me to press Y (English).\r\n\r\nSpanish:\r\n![imagen](https://user-images.githubusercontent.com/5618170/58590488-928dee80-823a-11e9-91c7-0374cb7e562d.png)\r\n\r\nEnglish:\r\n![imagen](https://user-images.githubusercontent.com/5618170/58590504-9c175680-823a-11e9-9aea-d9751d121d15.png)\r\n","Url":"https://github.com/dotnet/cli/issues/11443","RelatedDescription":"Open issue \"Input of keys in another language\" (#11443)"},{"Id":"449486880","IsPullRequest":true,"CreatedAt":"2019-05-29T20:28:48","Actor":"livarcocc","Number":"11431","RawContent":null,"Title":"Update SDK to 2.1.600-preview-64128-02","State":"closed","Body":"","Url":"https://github.com/dotnet/cli/pull/11431","RelatedDescription":"Closed or merged PR \"Update SDK to 2.1.600-preview-64128-02\" (#11431)"},{"Id":"449772553","IsPullRequest":true,"CreatedAt":"2019-05-29T20:28:33","Actor":"dotnet-maestro[bot]","Number":"11436","RawContent":null,"Title":"[master] Update dependencies from dotnet/templating","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/templating\r\n- **Build**: 20190528.1\r\n- **Date Produced**: 5/28/2019 5:52 PM\r\n- **Commit**: ce2b543a436b5f604189fbe962c647d022112dbf\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.TemplateEngine.Cli** -> 1.0.2-beta5.19278.1\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11436","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/templating\" (#11436)"},{"Id":"449987952","IsPullRequest":false,"CreatedAt":"2019-05-29T19:44:32","Actor":"nguerrera","Number":"11441","RawContent":null,"Title":"Source-Build: Eliminate remaining pre-builts in CLI/SDK repos","State":"open","Body":"cc @dseefeld \r\n\r\nCLI Prebuilts |   |   |\r\n-- | -- | --\r\n**Package** | **Version** | **Status**  \r\nMicrosoft.DotNet.Cli.CommandLine | 0.1.1 | Use Source Built Version \r\n\r\n\r\ncli-migrate   Prebuilts: |   |   |\r\n-- | -- | --\r\n**Package** | **Version** | **Status**\r\nMicrosoft.DotNet.Cli.Utils | 1.0.1 | Use Source Built Version \r\n\r\n\r\nCore-sdk   Prebuilts: |   |   |\r\n-- | -- | --\r\n**Package** | **Version** | **Status** |   |  \r\nruntime.win-x64.Microsoft.NETCore.DotNetHostResolver | 3.0.0-preview4-27615-11 | Exclude from Source-build  \r\nruntime.win-x86.Microsoft.NETCore.DotNetHostResolver | 3.0.0-preview4-27615-11 | Exclude from Source-build  \r\n\r\nToolset   Prebuilts: |   |   |\r\n-- | -- | --\r\n**Package** | **Version** | **Status**   \r\nSystem.Data.SqlClient | 4.3.0 | Unknown  \r\n\r\n","Url":"https://github.com/dotnet/cli/issues/11441","RelatedDescription":"Open issue \"Source-Build: Eliminate remaining pre-builts in CLI/SDK repos\" (#11441)"},{"Id":"449976780","IsPullRequest":false,"CreatedAt":"2019-05-29T19:23:13","Actor":"cmeeren","Number":"11440","RawContent":null,"Title":"Unable to install any tools using dotnet tool install","State":"closed","Body":"I am trying to install a global tool. However, I always get the same error message regardless of the tool I try to install (e.g. also for `dotnetsay`):\r\n\r\n```\r\nC:\\Users\\Christer\\Source\\Repos\\faketest>dotnet tool install fake-cli -g\r\nFailed to install tool package 'fake-cli': Could not find a part of the path 'C:\\Users\\Christer\\.dotnet\\tools\\.store\\.stage\\0qd2mqpa.m45\\fake-cli'.\r\nTool 'fake-cli' failed to install. This failure may have been caused by:\r\n\r\n* You are attempting to install a preview release and did not use the --version option to specify the version.\r\n* A package by this name was found, but it was not a .NET Core tool.\r\n* The required NuGet feed cannot be accessed, perhaps because of an Internet connection problem.\r\n* You mistyped the name of the tool.\r\n```\r\n\r\nI have tried for several hours to clean up my environment, PATH, reinstall VS, etc., but I can't figure out why this doesn't work.\r\n\r\nI get the same problem when specifying a tool path.\r\n\r\nI'm sorry for what is evidently a support request, but I haven't found anything on google, SO, etc. I'm one step short of reinstalling my whole system and have nowhere else to turn.\r\n\r\nWhat could be wrong? Why doesn't this work? What could I do to troubleshoot further?\r\n\r\ndotnet info:\r\n\r\n```\r\nC:\\Users\\Christer\\Source\\Repos\\faketest>dotnet --info\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.1.700\r\n Commit:    c2ef055a0f\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17763\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.700\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.5\r\n  Commit:  0a3c9209c0\r\n\r\n.NET Core SDKs installed:\r\n  2.1.700 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.300 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```","Url":"https://github.com/dotnet/cli/issues/11440","RelatedDescription":"Closed issue \"Unable to install any tools using dotnet tool install\" (#11440)"},{"Id":"449940246","IsPullRequest":false,"CreatedAt":"2019-05-29T19:06:55","Actor":"clarotech","Number":"11439","RawContent":null,"Title":"Framework-dependent executable does not create *.exe file","State":"closed","Body":"## Steps to reproduce\r\nOn a dot net core console app, which uses a number of nuget packages I set out to create a publication package that had a *.exe for the program plus relevant *.dll for the nuget packages - but not the dot net core *.dlls\r\n\r\nI used the CLI as per:\r\n\r\ndotnet publish -c Release --self-contained false -r win-x64\r\n\r\n## Expected  behavior\r\nExpected to have a publish folder with *.exe and relevant *.dll files\r\n\r\n## Actual behavior\r\nThe publish folder did not contain any *.exe files, the program was preent as a <program>.dll file\r\nAll *.dll files for for the nuget packages were present\r\n\r\n`dotnet --info` output:\r\n\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.1.604\r\n Commit:    c174d0ea92\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.604\\\r\n\r\nHost (useful for support):\r\n  Version: 2.1.11\r\n  Commit:  d6a5616240\r\n\r\n.NET Core SDKs installed:\r\n  1.0.0 [C:\\Program Files\\dotnet\\sdk]\r\n  1.1.0 [C:\\Program Files\\dotnet\\sdk]\r\n  1.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  1.1.6 [C:\\Program Files\\dotnet\\sdk]\r\n  1.1.7 [C:\\Program Files\\dotnet\\sdk]\r\n  1.1.9 [C:\\Program Files\\dotnet\\sdk]\r\n  1.1.10 [C:\\Program Files\\dotnet\\sdk]\r\n  1.1.11 [C:\\Program Files\\dotnet\\sdk]\r\n  1.1.13 [C:\\Program Files\\dotnet\\sdk]\r\n  2.0.2 [C:\\Program Files\\dotnet\\sdk]\r\n  2.0.3 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.2 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.4 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.201 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.202 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.402 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.500 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.505 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.602 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.604 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.0.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.0.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.0.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.0.13 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.0.15 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.10 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/11439","RelatedDescription":"Closed issue \"Framework-dependent executable does not create *.exe file\" (#11439)"},{"Id":"449917398","IsPullRequest":true,"CreatedAt":"2019-05-29T18:56:53","Actor":"johnbeisner","Number":"11438","RawContent":null,"Title":"Re-enable GivenNewCommandItDisplaysCompletions test","State":"closed","Body":"Re-enable GivenNewCommandItDisplaysCompletions test\r\n\r\nAddresses: https://github.com/dotnet/cli/issues/9737\r\n","Url":"https://github.com/dotnet/cli/pull/11438","RelatedDescription":"Closed or merged PR \"Re-enable GivenNewCommandItDisplaysCompletions test\" (#11438)"},{"Id":"449562075","IsPullRequest":false,"CreatedAt":"2019-05-29T17:13:47","Actor":"ccic","Number":"11433","RawContent":null,"Title":"dotnet core 3.0 (master nightly build) restore fails on Ubuntu for invalid certificate","State":"closed","Body":"## Steps to reproduce\r\nInstall dotnet core nightly build 3.0.100-preview6-012026 on Ubuntu 16.04.4 LTS.\r\n\"OpenSSL 1.0.2g  1 Mar 2016\" or \"OpenSSL 1.1.1  11 Sep 2018\"\r\n\r\nCreate a new webapp project through dotnet cli:\r\n\r\ndotnet new webapp -n WebApp1 -o WebApp1\r\n\r\nThe template \"ASP.NET Core Web App\" was created successfully.\r\nThis template contains technologies from parties other than Microsoft, see https://aka.ms/aspnetcore-template-3pn-210 for details.\r\n\r\nProcessing post-creation actions...\r\nRunning 'dotnet restore' on WebApp1/WebApp1.csproj...\r\n/home/hongjiang/.dotnet-nightly/sdk/3.0.100-preview6-012026/NuGet.targets(123,5): error : Unable to load the service index for source https://api.nuget.org/v3/index.json. [/home/hongjiang/CodeTest/C#/WebApp1/WebApp1.csproj]\r\n/home/hongjiang/.dotnet-nightly/sdk/3.0.100-preview6-012026/NuGet.targets(123,5): error :   The SSL connection could not be established, see inner exception. [/home/hongjiang/CodeTest/C#/WebApp1/WebApp1.csproj]\r\n/home/hongjiang/.dotnet-nightly/sdk/3.0.100-preview6-012026/NuGet.targets(123,5): error :   The remote certificate is invalid according to the validation procedure. [/home/hongjiang/CodeTest/C#/WebApp1/WebApp1.csproj]\r\n\r\nRestore failed.\r\nPost action failed.\r\nDescription: Restore NuGet packages required by this project.\r\nManual instructions: Run 'dotnet restore'\r\n\r\nGo to WebApp1 and run \"dotnet restore -v diag\" and get the following errors:\r\n\r\nNuGet.Protocol.Core.Types.FatalProtocolException: Unable to load the service index for source https://api.nuget.org/v3/index.json. ---> System.Net.Http.HttpRequestException: The SSL connection could not be established, see inner exception. ---> System.Security.Authentication.AuthenticationException: The remote certificate is invalid according to the validation procedure.\r\n                        at System.Net.Security.SslStream.StartSendAuthResetSignal(ProtocolToken message, AsyncProtocolRequest asyncRequest, ExceptionDispatchInfo exception)\r\n                        at System.Net.Security.SslStream.CheckCompletionBeforeNextReceive(ProtocolToken message, AsyncProtocolRequest asyncRequest)\r\n                        at System.Net.Security.SslStream.StartSendBlob(Byte[] incoming, Int32 count, AsyncProtocolRequest asyncRequest)\r\n                        at System.Net.Security.SslStream.ProcessReceivedBlob(Byte[] buffer, Int32 count, AsyncProtocolRequest asyncRequest)\r\n                        at System.Net.Security.SslStream.StartReadFrame(Byte[] buffer, Int32 readBytes, AsyncProtocolRequest asyncRequest)\r\n                        at System.Net.Security.SslStream.StartReceiveBlob(Byte[] buffer, AsyncProtocolRequest asyncRequest)\r\n                        at System.Net.Security.SslStream.CheckCompletionBeforeNextReceive(ProtocolToken message, AsyncProtocolRequest asyncRequest)\r\n                        at System.Net.Security.SslStream.StartSendBlob(Byte[] incoming, Int32 count, AsyncProtocolRequest asyncRequest)\r\n                        at System.Net.Security.SslStream.ProcessReceivedBlob(Byte[] buffer, Int32 count, AsyncProtocolRequest asyncRequest)\r\n                        at System.Net.Security.SslStream.StartReadFrame(Byte[] buffer, Int32 readBytes, AsyncProtocolRequest asyncRequest)\r\n                        at System.Net.Security.SslStream.StartReceiveBlob(Byte[] buffer, AsyncProtocolRequest asyncRequest)\r\n                        at System.Net.Security.SslStream.CheckCompletionBeforeNextReceive(ProtocolToken message, AsyncProtocolRequest asyncRequest)\r\n                        at System.Net.Security.SslStream.StartSendBlob(Byte[] incoming, Int32 count, AsyncProtocolRequest asyncRequest)\r\n                        at System.Net.Security.SslStream.ProcessReceivedBlob(Byte[] buffer, Int32 count, AsyncProtocolRequest asyncRequest)\r\n                        at System.Net.Security.SslStream.StartReadFrame(Byte[] buffer, Int32 readBytes, AsyncProtocolRequest asyncRequest)\r\n                        at System.Net.Security.SslStream.StartReceiveBlob(Byte[] buffer, AsyncProtocolRequest asyncRequest)\r\n                        at System.Net.Security.SslStream.CheckCompletionBeforeNextReceive(ProtocolToken message, AsyncProtocolRequest asyncRequest)\r\n                        at System.Net.Security.SslStream.StartSendBlob(Byte[] incoming, Int32 count, AsyncProtocolRequest asyncRequest)\r\n                        at System.Net.Security.SslStream.ProcessReceivedBlob(Byte[] buffer, Int32 count, AsyncProtocolRequest asyncRequest)\r\n                        at System.Net.Security.SslStream.StartReadFrame(Byte[] buffer, Int32 readBytes, AsyncProtocolRequest asyncRequest)\r\n                        at System.Net.Security.SslStream.StartReceiveBlob(Byte[] buffer, AsyncProtocolRequest asyncRequest)\r\n                        at System.Net.Security.SslStream.CheckCompletionBeforeNextReceive(ProtocolToken message, AsyncProtocolRequest asyncRequest)\r\n                        at System.Net.Security.SslStream.StartSendBlob(Byte[] incoming, Int32 count, AsyncProtocolRequest asyncRequest)\r\n                        at System.Net.Security.SslStream.ProcessReceivedBlob(Byte[] buffer, Int32 count, AsyncProtocolRequest asyncRequest)\r\n                        at System.Net.Security.SslStream.StartReadFrame(Byte[] buffer, Int32 readBytes, AsyncProtocolRequest asyncRequest)\r\n                        at System.Net.Security.SslStream.PartialFrameCallback(AsyncProtocolRequest asyncRequest)\r\n                     --- End of stack trace from previous location where exception was thrown ---\r\n                        at System.Net.Security.SslStream.ThrowIfExceptional()\r\n                        at System.Net.Security.SslStream.InternalEndProcessAuthentication(LazyAsyncResult lazyResult)\r\n                        at System.Net.Security.SslStream.EndProcessAuthentication(IAsyncResult result)\r\n                        at System.Net.Security.SslStream.EndAuthenticateAsClient(IAsyncResult asyncResult)\r\n                        at System.Net.Security.SslStream.<>c.<AuthenticateAsClientAsync>b__65_1(IAsyncResult iar)\r\n                        at System.Threading.Tasks.TaskFactory`1.FromAsyncCoreLogic(IAsyncResult iar, Func`2 endFunction, Action`1 endAction, Task`1 promise, Boolean requiresSynchronization)\r\n\r\n## Expected  behavior\r\n\r\n\r\n## Actual behavior\r\n\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview6-012026\r\n Commit:    8f2806e85e\r\n\r\nRuntime Environment:\r\n OS Name:     ubuntu\r\n OS Version:  16.04\r\n OS Platform: Linux\r\n RID:         ubuntu.16.04-x64\r\n Base Path:   /home/hongjiang/.dotnet-nightly/sdk/3.0.100-preview6-012026/\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview6-27720-04\r\n  Commit:  cdfc67fd8e\r\n\r\n.NET Core SDKs installed:\r\n  3.0.100-preview6-012026 [/home/hongjiang/.dotnet-nightly/sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.App 3.0.0-preview6-19270-04 [/home/hongjiang/.dotnet-nightly/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [/home/hongjiang/.dotnet-nightly/shared/Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview6-27720-04 [/home/hongjiang/.dotnet-nightly/shared/Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/11433","RelatedDescription":"Closed issue \"dotnet core 3.0 (master nightly build) restore fails on Ubuntu for invalid certificate\" (#11433)"},{"Id":"449487340","IsPullRequest":true,"CreatedAt":"2019-05-29T17:10:26","Actor":"livarcocc","Number":"11432","RawContent":null,"Title":"Update SDK to 2.2.200-preview-64128-03","State":"closed","Body":"","Url":"https://github.com/dotnet/cli/pull/11432","RelatedDescription":"Closed or merged PR \"Update SDK to 2.2.200-preview-64128-03\" (#11432)"},{"Id":"449908911","IsPullRequest":false,"CreatedAt":"2019-05-29T16:34:35","Actor":"directhex","Number":"11437","RawContent":null,"Title":"dotnet-install.sh architecture detection installs wrong architecture on ARM64 host, ARM32 OS","State":"open","Body":"## Issue Description\r\n\r\nget_machine_architecture contains the following:\r\n\r\nhttps://github.com/microsoft/azure-pipelines-tasks/blob/08914a70defbdbe73b2bb87e8d0663bdbeb248e0/Tasks/UseDotNetV2/externals/get-os-distro.sh#L159-L178\r\n\r\nThis is... fundamentally not how `uname` should be used.\r\n\r\n1. `uname` refers to the profile of the running kernel, not the executing environment. It can be a 100% mismatch, and that's valid and fine. The .NET Core environment which gets installed needs to match the executing environment, not the kernel.\r\n\r\nSome examples:\r\n\r\n```\r\n(xenial-armhf)root@xam-softiron-16:/# uname -a\r\nLinux xam-softiron-16 4.15.0-50-generic #54~16.04.1-Ubuntu SMP Wed May 8 15:55:41 UTC 2019 aarch64 aarch64 aarch64 GNU/Linux\r\n(xenial-armhf)root@xam-softiron-16:/# file /bin/bash\r\n/bin/bash: ELF 32-bit LSB executable, ARM, EABI5 version 1 (SYSV), dynamically linked, interpreter /lib, for GNU/Linux 3.2.0, BuildID[sha1]=9a214a5bbfe98a862fd835fdcbfa1d9f8dabff0e, stripped\r\n```\r\n\r\n```\r\nroot@breakfast:/# uname -a\r\nLinux breakfast 4.15.0-50-generic #54-Ubuntu SMP Mon May 6 18:46:08 UTC 2019 x86_64 x86_64 x86_64 GNU/Linux\r\nroot@breakfast:/# file /bin/bash \r\n/bin/bash: ELF 32-bit LSB shared object, Intel 80386, version 1 (SYSV), dynamically linked, interpreter /lib, for GNU/Linux 3.2.0, BuildID[sha1]=d3d60e9d8193746d270cd74bcb2f5742ffc65d48, stripped\r\n```\r\n\r\nIn both these cases, these are 64-bit kernels with 32-bit executing environments. There is no guarantee that 64-bit libraries are available to execute 64-bit code, and it is a 32-bit .NET Core which should be installed.\r\n\r\n2. `armv7l` is not the only valid `uname` which requires a 32-bit .NET Core. 32-bit compatibility kernel profile on 64-bit ARM kernels will show `armv8l`:\r\n\r\n```\r\n$ uname -a\r\nLinux xam-softiron-15 4.15.0-50-generic #54~16.04.1-Ubuntu SMP Wed May 8 15:55:41 UTC 2019 armv8l armv8l armv8l GNU/Linux\r\n```\r\n\r\nref: https://github.com/microsoft/azure-pipelines-tasks/issues/10439","Url":"https://github.com/dotnet/cli/issues/11437","RelatedDescription":"Open issue \"dotnet-install.sh architecture detection installs wrong architecture on ARM64 host, ARM32 OS\" (#11437)"},{"Id":"449769333","IsPullRequest":true,"CreatedAt":"2019-05-29T12:43:47","Actor":"dotnet-maestro[bot]","Number":"11435","RawContent":null,"Title":"[master] Update dependencies from dotnet/sdk","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/sdk\r\n- **Build**: 20190528.5\r\n- **Date Produced**: 5/29/2019 3:01 AM\r\n- **Commit**: 7e1734d018b3a1e438bf0bd408f16438dbca303a\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk** -> 3.0.100-preview6.19278.5\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11435","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/sdk\" (#11435)"},{"Id":"449769135","IsPullRequest":true,"CreatedAt":"2019-05-29T12:43:22","Actor":"dotnet-maestro[bot]","Number":"11434","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190528.1\r\n- **Date Produced**: 5/28/2019 6:41 PM\r\n- **Commit**: 11f90a2a260422201895de58e57170131ab4efe7\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19278.1\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11434","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#11434)"},{"Id":"449483403","IsPullRequest":false,"CreatedAt":"2019-05-28T21:21:37","Actor":"spboyer","Number":"11430","RawContent":null,"Title":"add deploy as a first class command","State":"open","Body":"Consider adding `deploy` as a first-class command.  Adding this command as an option to deploy to azure, or even other cloud platforms within the CLI helps push .NET Core without having to install additional CLI tooling.\r\n\r\nSee: https://github.com/spboyer/dotnet-azure for an example.\r\n\r\nAngular has also added this an option using `ng deploy azure` within their CLI.\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/11430","RelatedDescription":"Open issue \"add deploy as a first class command\" (#11430)"},{"Id":"448458604","IsPullRequest":true,"CreatedAt":"2019-05-28T17:27:41","Actor":"dotnet-maestro[bot]","Number":"11427","RawContent":null,"Title":"[master] Update dependencies from dotnet/sdk","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/sdk\r\n- **Build**: 20190524.2\r\n- **Date Produced**: 5/25/2019 5:39 AM\r\n- **Commit**: 8f80c53ce0521cebc2b9aaf0cb62dc15884e6093\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk** -> 3.0.100-preview6.19274.2\r\n\r\n## From https://github.com/dotnet/sdk\r\n- **Build**: 20190524.2\r\n- **Date Produced**: 5/25/2019 5:39 AM\r\n- **Commit**: 8f80c53ce0521cebc2b9aaf0cb62dc15884e6093\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk** -> 3.0.100-preview6.19274.2\r\n\r\n## From https://github.com/dotnet/sdk\r\n- **Build**: 20190524.2\r\n- **Date Produced**: 5/25/2019 5:39 AM\r\n- **Commit**: 8f80c53ce0521cebc2b9aaf0cb62dc15884e6093\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk** -> 3.0.100-preview6.19274.2\r\n\r\n## From https://github.com/dotnet/sdk\r\n- **Build**: 20190524.2\r\n- **Date Produced**: 5/25/2019 5:39 AM\r\n- **Commit**: 8f80c53ce0521cebc2b9aaf0cb62dc15884e6093\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk** -> 3.0.100-preview6.19274.2\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11427","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/sdk\" (#11427)"},{"Id":"448993836","IsPullRequest":false,"CreatedAt":"2019-05-27T21:22:44","Actor":"masaeedu","Number":"11429","RawContent":null,"Title":"Add command to list files that are part of the solution","State":"open","Body":"Hello. I think it would be useful if the `dotnet` CLI exposed some command to list all of the files that are considered part of the build (project files, source code, resource files, hardcoded DLLs, etc.). This would facilitate use of .NET code with build and deployment tools like Docker and Nix, which rely on being able to discover an exhaustive list of build inputs ahead of time.\r\n\r\nI'm not sure whether this issue is more suited here or in msbuild or somwhere, please feel free to redirect me.\r\n\r\nThanks.","Url":"https://github.com/dotnet/cli/issues/11429","RelatedDescription":"Open issue \"Add command to list files that are part of the solution\" (#11429)"},{"Id":"448459092","IsPullRequest":true,"CreatedAt":"2019-05-25T12:53:50","Actor":"dotnet-maestro[bot]","Number":"11428","RawContent":null,"Title":"[master] Update dependencies from dotnet/templating","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/templating\r\n- **Build**: 20190524.1\r\n- **Date Produced**: 5/24/2019 2:08 PM\r\n- **Commit**: 6d694be84d6e88ffa4d611cc4e22058cf9359255\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.TemplateEngine.Cli** -> 1.0.2-beta5.19274.1\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11428","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/templating\" (#11428)"},{"Id":"448458576","IsPullRequest":true,"CreatedAt":"2019-05-25T12:37:35","Actor":"dotnet-maestro[bot]","Number":"11426","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190524.6\r\n- **Date Produced**: 5/24/2019 11:03 PM\r\n- **Commit**: b5016f5688dc8ca9f3e4811ee7e2e86ad8907a40\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19274.6\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11426","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#11426)"},{"Id":"448138844","IsPullRequest":true,"CreatedAt":"2019-05-25T12:13:05","Actor":"dotnet-maestro[bot]","Number":"11423","RawContent":null,"Title":"[master] Update dependencies from dotnet/templating","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/templating\r\n- **Build**: 20190523.1\r\n- **Date Produced**: 5/23/2019 1:43 PM\r\n- **Commit**: 85e3fa5110534271f70a16d52689f8cb8b517ba4\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.TemplateEngine.Cli** -> 1.0.2-beta5.19273.1\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11423","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/templating\" (#11423)"},{"Id":"448316236","IsPullRequest":false,"CreatedAt":"2019-05-24T19:10:10","Actor":"peterhuene","Number":"11424","RawContent":null,"Title":"Implement an option for restore/build/publish commands that disable build servers.","State":"open","Body":"## Steps to reproduce\r\n\r\nSee discussion on https://github.com/dotnet/cli/issues/9481.\r\n\r\n1) `dotnet new console`\r\n2) `dotnet build`\r\n\r\n## Expected  behavior\r\n\r\nThere should be an option to `dotnet build` (and other building commands) to disable the use of the various build servers (Roslyn, MSBuild node reuse, Razor).\r\n\r\n## Actual behavior\r\n\r\nUsers have to pass a plethora of undiscoverable properties and options to fully disable the use of the build servers, which might be helpful for CI scenarios.\r\n\r\n## Environment data\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview5-011568\r\n Commit:    b487ff10aa\r\n\r\nRuntime Environment:\r\n OS Name:     Mac OS X\r\n OS Version:  10.14\r\n OS Platform: Darwin\r\n RID:         osx.10.14-x64\r\n Base Path:   /usr/local/share/dotnet/sdk/3.0.100-preview5-011568/\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview5-27626-15\r\n  Commit:  61f30f5a23\r\n\r\n.NET Core SDKs installed:\r\n  3.0.100-preview5-011568 [/usr/local/share/dotnet/sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.App 3.0.0-preview5-19227-01 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview5-27626-15 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/11424","RelatedDescription":"Open issue \"Implement an option for restore/build/publish commands that disable build servers.\" (#11424)"}],"ResultType":"GitHubIssue"},"Standard-Issues":{"Issues":[{"Id":"450570292","IsPullRequest":true,"CreatedAt":"2019-05-31T01:08:56","Actor":"terrajobst","Number":"1219","RawContent":null,"Title":"Add HttpResponseMessage.TrailingHeaders","State":"open","Body":"Fixes #1144\r\n\r\n/cc @JamesNK @davidfowl @davidsh @karelz ","Url":"https://github.com/dotnet/standard/pull/1219","RelatedDescription":"Open PR \"Add HttpResponseMessage.TrailingHeaders\" (#1219)"},{"Id":"450273832","IsPullRequest":true,"CreatedAt":"2019-05-30T12:36:19","Actor":"dotnet-maestro[bot]","Number":"1218","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190529.5\r\n- **Date Produced**: 5/30/2019 3:41 AM\r\n- **Commit**: fb62c6377a6bd163af2a7516260f064498942585\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19279.5\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19279.5\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19279.5\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19279.5\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19279.5\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19279.5\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1218","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1218)"},{"Id":"450026795","IsPullRequest":true,"CreatedAt":"2019-05-29T22:45:51","Actor":"ericstj","Number":"1217","RawContent":null,"Title":"Source build fixes","State":"closed","Body":"Use GenFacades instead of GenAPI and remove GenAPI and APICompat from source build.","Url":"https://github.com/dotnet/standard/pull/1217","RelatedDescription":"Closed or merged PR \"Source build fixes\" (#1217)"},{"Id":"449798213","IsPullRequest":true,"CreatedAt":"2019-05-29T13:08:26","Actor":"dotnet-maestro[bot]","Number":"1216","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190528.7\r\n- **Date Produced**: 5/29/2019 4:03 AM\r\n- **Commit**: c7d48ca7732b7717e84d8375588d83866104ef58\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 4.6.0-preview6.19278.7\r\n  - **System.Reflection.Emit** -> 4.6.0-preview6.19278.7\r\n  - **System.Reflection.Emit.ILGeneration** -> 4.6.0-preview6.19278.7\r\n\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190529.8\r\n- **Date Produced**: 5/30/2019 8:05 AM\r\n- **Commit**: e23119d577e644d2c2a25419c88c1181681358e0\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 4.6.0-preview6.19279.8\r\n  - **System.Reflection.Emit** -> 4.6.0-preview6.19279.8\r\n  - **System.Reflection.Emit.ILGeneration** -> 4.6.0-preview6.19279.8\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1216","RelatedDescription":"Open PR \"[master] Update dependencies from dotnet/corefx\" (#1216)"},{"Id":"449768348","IsPullRequest":true,"CreatedAt":"2019-05-29T12:16:21","Actor":"dotnet-maestro[bot]","Number":"1215","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190528.1\r\n- **Date Produced**: 5/28/2019 6:41 PM\r\n- **Commit**: 11f90a2a260422201895de58e57170131ab4efe7\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19278.1\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19278.1\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19278.1\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19278.1\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19278.1\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1215","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1215)"},{"Id":"449369049","IsPullRequest":false,"CreatedAt":"2019-05-28T16:35:35","Actor":"llolic","Number":"1214","RawContent":null,"Title":"System.IO.FileNotFoundException: 'Could not load file or assembly 'netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51'. The system cannot find the file specified.","State":"open","Body":"I am getting \"System.IO.FileNotFoundException: 'Could not load file or assembly 'netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51'. The system cannot find the file specified.'\"\r\nI have made an application in vs 2019 that currently just has a textbox, a textblock, and a button. When I run it, the error is shown for the following line: \"rootFrame.Navigate(typeof(MainPage), e.Arguments);\"\r\n\r\nDoes anyone know how to fix this error?","Url":"https://github.com/dotnet/standard/issues/1214","RelatedDescription":"Open issue \"System.IO.FileNotFoundException: 'Could not load file or assembly 'netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51'. The system cannot find the file specified.\" (#1214)"},{"Id":"449247865","IsPullRequest":true,"CreatedAt":"2019-05-28T12:54:12","Actor":"dotnet-maestro[bot]","Number":"1213","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190527.2\r\n- **Date Produced**: 5/27/2019 11:45 PM\r\n- **Commit**: d58a8ade31b4731759c92df00d0f6398c52f3d83\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 4.6.0-preview6.19277.2\r\n  - **System.Reflection.Emit** -> 4.6.0-preview6.19277.2\r\n  - **System.Reflection.Emit.ILGeneration** -> 4.6.0-preview6.19277.2\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1213","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1213)"},{"Id":"448751215","IsPullRequest":false,"CreatedAt":"2019-05-27T09:16:48","Actor":"KexyBiscuit","Number":"1212","RawContent":null,"Title":"NETSDK1073 occurs on netcoreapp3.0 projects","State":"open","Body":"```\r\n>C:\\Program Files\\dotnet\\sdk\\3.0.100-preview6-012085\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Sdk.TargetingPackResolution.targets(194,5): error NETSDK1073: The FrameworkReference 'NETStandard.Library' was not recognized\r\n```\r\n\r\n```\r\n<TargetFramework>netcoreapp3.0</TargetFramework>\r\n\r\n<ItemGroup>\r\n  <PackageReference Include=\"System.Text.Encoding.CodePages\" Version=\"4.6.0-preview5.19224.8\" /> <!--It doesn't matter what's referenced-->\r\n</ItemGroup>\r\n```","Url":"https://github.com/dotnet/standard/issues/1212","RelatedDescription":"Open issue \"NETSDK1073 occurs on netcoreapp3.0 projects\" (#1212)"},{"Id":"444869749","IsPullRequest":false,"CreatedAt":"2019-05-27T09:14:11","Actor":"KexyBiscuit","Number":"1194","RawContent":null,"Title":"Is ValueTask<> missing in latest NetStandard?","State":"closed","Body":"```\r\nerror CS0012: The type 'ValueTask<>' is defined in an assembly that is not referenced. You must add a reference to assembly 'System.Threading.Tasks.Extensions, Version=4.2.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51'.\r\n```\r\n\r\nMight be related to #1180?\r\n\r\n```\r\n> dotnet --version\r\n3.0.100-preview6-011910\r\n```\r\n\r\n```\r\n<TargetFramework>netstandard2.1</TargetFramework>\r\n<NetStandardImplicitPackageVersion>2.1.0-prerelease.19265.2</NetStandardImplicitPackageVersion>\r\n```","Url":"https://github.com/dotnet/standard/issues/1194","RelatedDescription":"Closed issue \"Is ValueTask<> missing in latest NetStandard?\" (#1194)"},{"Id":"443632814","IsPullRequest":false,"CreatedAt":"2019-05-26T20:42:19","Actor":"yangsong2828","Number":"1190","RawContent":null,"Title":"HttpModule with Microsoft.AspNetCore.Http","State":"closed","Body":"We have multiple projects depend on one common IIS module, say Logging module.\r\nHowever, we can't move all projects to asp.net core at one shot. But we want to move one at a time.\r\nIf I port it to middleware, it can't be used by legacy IIS projects any more.\r\nSo what is your recommendation to move those common piece to asp .net core? Thanks.","Url":"https://github.com/dotnet/standard/issues/1190","RelatedDescription":"Closed issue \"HttpModule with Microsoft.AspNetCore.Http\" (#1190)"},{"Id":"448462812","IsPullRequest":true,"CreatedAt":"2019-05-25T13:11:36","Actor":"dotnet-maestro[bot]","Number":"1211","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190524.8\r\n- **Date Produced**: 5/25/2019 8:10 AM\r\n- **Commit**: ca535178383c526a0eb7a00f7ff6df36e0af1ea1\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 4.6.0-preview6.19274.8\r\n  - **System.Reflection.Emit** -> 4.6.0-preview6.19274.8\r\n  - **System.Reflection.Emit.ILGeneration** -> 4.6.0-preview6.19274.8\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1211","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1211)"},{"Id":"448458458","IsPullRequest":true,"CreatedAt":"2019-05-25T12:20:56","Actor":"dotnet-maestro[bot]","Number":"1210","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190524.6\r\n- **Date Produced**: 5/24/2019 11:03 PM\r\n- **Commit**: b5016f5688dc8ca9f3e4811ee7e2e86ad8907a40\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19274.6\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19274.6\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19274.6\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19274.6\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19274.6\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1210","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1210)"},{"Id":"448225868","IsPullRequest":false,"CreatedAt":"2019-05-24T15:20:02","Actor":"dagood","Number":"1209","RawContent":null,"Title":"Build netstandard targeting pack assets in dotnet/standard, not dotnet/core-setup","State":"open","Body":"(See https://github.com/dotnet/standard/issues/1106)\r\n\r\nThe netstandard targeting pack may not version completely in sync with .NET Core Runtime, so producing it in Core-Setup via a transport package is not ideal. These artifacts should be produced in dotnet/standard itself.\r\n\r\nI don't think it makes sense to work on this until targeting pack infra is shared. (https://github.com/dotnet/core-setup/issues/4773)","Url":"https://github.com/dotnet/standard/issues/1209","RelatedDescription":"Open issue \"Build netstandard targeting pack assets in dotnet/standard, not dotnet/core-setup\" (#1209)"},{"Id":"448158285","IsPullRequest":true,"CreatedAt":"2019-05-24T13:09:47","Actor":"dotnet-maestro[bot]","Number":"1208","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190523.8\r\n- **Date Produced**: 5/24/2019 7:26 AM\r\n- **Commit**: c539d6c627b169d45f0b4cf1826b560cd0862abe\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 4.6.0-preview6.19273.8\r\n  - **System.Reflection.Emit** -> 4.6.0-preview6.19273.8\r\n  - **System.Reflection.Emit.ILGeneration** -> 4.6.0-preview6.19273.8\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1208","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1208)"},{"Id":"448135323","IsPullRequest":true,"CreatedAt":"2019-05-24T12:21:08","Actor":"dotnet-maestro[bot]","Number":"1207","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190523.11\r\n- **Date Produced**: 5/24/2019 5:52 AM\r\n- **Commit**: 02a90cc69d2d32bbde9e6e0e41186711c591de27\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19273.11\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19273.11\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19273.11\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19273.11\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19273.11\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1207","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1207)"},{"Id":"447649294","IsPullRequest":true,"CreatedAt":"2019-05-23T13:11:12","Actor":"dotnet-maestro[bot]","Number":"1206","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190522.8\r\n- **Date Produced**: 5/23/2019 6:40 AM\r\n- **Commit**: daa005b23d4954d4a41b1663171d6ada2d960bd2\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 4.6.0-preview6.19272.8\r\n  - **System.Reflection.Emit** -> 4.6.0-preview6.19272.8\r\n  - **System.Reflection.Emit.ILGeneration** -> 4.6.0-preview6.19272.8\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1206","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1206)"},{"Id":"447620634","IsPullRequest":true,"CreatedAt":"2019-05-23T12:15:47","Actor":"dotnet-maestro[bot]","Number":"1205","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190522.13\r\n- **Date Produced**: 5/23/2019 1:51 AM\r\n- **Commit**: 86e674361bdcefecbd8199ab62d0b1a6cb25703d\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19272.13\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19272.13\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19272.13\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19272.13\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19272.13\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1205","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1205)"},{"Id":"444399962","IsPullRequest":true,"CreatedAt":"2019-05-22T19:20:47","Actor":"dotnet-maestro[bot]","Number":"1192","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190514.13\r\n- **Date Produced**: 5/15/2019 2:37 AM\r\n- **Commit**: 670f6ee1a619a2a7c84cfdfe2a1c84fbe94e1c6b\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19264.13\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19264.13\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19264.13\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19264.13\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19264.13\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190516.2\r\n- **Date Produced**: 5/16/2019 8:24 AM\r\n- **Commit**: 37c11672ee11dc2b3365b95a29e0c012f44032be\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19266.2\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19266.2\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19266.2\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19266.2\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19266.2\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190516.4\r\n- **Date Produced**: 5/16/2019 7:11 PM\r\n- **Commit**: 61cc7d4d347300835925ce5245bfc3ecb6b621d7\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19266.4\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19266.4\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19266.4\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19266.4\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19266.4\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190517.7\r\n- **Date Produced**: 5/18/2019 4:34 AM\r\n- **Commit**: 55ce2900743cb609e51e2c6487e87e42eb627880\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19267.7\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19267.7\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19267.7\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19267.7\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19267.7\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190518.2\r\n- **Date Produced**: 5/18/2019 3:22 PM\r\n- **Commit**: 6d0514d3da59137630b9add5b5e619bce2631f02\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19268.2\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19268.2\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19268.2\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19268.2\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19268.2\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190520.1\r\n- **Date Produced**: 5/20/2019 8:30 AM\r\n- **Commit**: e913fb3b02d4089a91ff91c041c5f6e7c29038b0\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19270.1\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19270.1\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19270.1\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19270.1\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19270.1\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190520.2\r\n- **Date Produced**: 5/20/2019 1:26 PM\r\n- **Commit**: 3b0760f8789d5d4bd146b36bd9051696d7a56bfa\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19270.2\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19270.2\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19270.2\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19270.2\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19270.2\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190521.7\r\n- **Date Produced**: 5/22/2019 1:45 AM\r\n- **Commit**: 7a6fb6528b2060cd9e3a3d92535f5b6fdc6b2e82\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19271.7\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19271.7\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19271.7\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19271.7\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19271.7\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1192","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1192)"},{"Id":"447122667","IsPullRequest":true,"CreatedAt":"2019-05-22T13:15:56","Actor":"dotnet-maestro[bot]","Number":"1204","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190521.9\r\n- **Date Produced**: 5/22/2019 6:10 AM\r\n- **Commit**: b9b357f9a5a6ccf6a70c2e13b5a7d84a3ed1a684\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 4.6.0-preview6.19271.9\r\n  - **System.Reflection.Emit** -> 4.6.0-preview6.19271.9\r\n  - **System.Reflection.Emit.ILGeneration** -> 4.6.0-preview6.19271.9\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1204","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1204)"},{"Id":"445645996","IsPullRequest":true,"CreatedAt":"2019-05-21T22:04:59","Actor":"terrajobst","Number":"1198","RawContent":null,"Title":"Add missing members to MemoryMarshal","State":"closed","Body":"This fixes #1193.","Url":"https://github.com/dotnet/standard/pull/1198","RelatedDescription":"Closed or merged PR \"Add missing members to MemoryMarshal\" (#1198)"},{"Id":"444621714","IsPullRequest":false,"CreatedAt":"2019-05-21T22:04:59","Actor":"wtgodbe","Number":"1193","RawContent":null,"Title":"Fix APICompat issues with netstandard2.0 System.Memory","State":"closed","Body":"After adding a shim for `System.Memory` to netstandard2.1, we uncovered an incompatibility with netstandard2.0:\r\n\r\nhttps://github.com/dotnet/standard/blob/d3413ee9ec761bdf067114a498b9da3ebf0149df/src/apicompat/baselines/ApiCompatBaseline.netstandard2.0.txt#L72-L74\r\n\r\nIndeed, these members exist in CoreFx's ref, but are missing in Standard:  https://github.com/dotnet/corefx/blob/1f9b84a0804e868c7e0f37a3c10fbaf7c735ae14/src/System.Memory/ref/System.Memory.cs#L471\r\n\r\n@terrajobst we should add these missing members to the surface area for `netstandard2.1`","Url":"https://github.com/dotnet/standard/issues/1193","RelatedDescription":"Closed issue \"Fix APICompat issues with netstandard2.0 System.Memory\" (#1193)"},{"Id":"446749048","IsPullRequest":true,"CreatedAt":"2019-05-21T19:26:08","Actor":"ericstj","Number":"1203","RawContent":null,"Title":"Fix public key of ns2.0 shims","State":"closed","Body":"System.Buffers, System.Memory, and System.Threading.Tasks.Extensions all use\r\nthe open key.  Ensure we use the same key here.","Url":"https://github.com/dotnet/standard/pull/1203","RelatedDescription":"Closed or merged PR \"Fix public key of ns2.0 shims\" (#1203)"},{"Id":"446608759","IsPullRequest":true,"CreatedAt":"2019-05-21T14:48:22","Actor":"dotnet-maestro[bot]","Number":"1202","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190521.1\r\n- **Date Produced**: 5/21/2019 9:31 AM\r\n- **Commit**: 51a1f16ee2aaded4ce1fca6847471b58f7ffa160\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 4.6.0-preview6.19271.1\r\n  - **System.Reflection.Emit** -> 4.6.0-preview6.19271.1\r\n  - **System.Reflection.Emit.ILGeneration** -> 4.6.0-preview6.19271.1\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1202","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1202)"},{"Id":"445640404","IsPullRequest":true,"CreatedAt":"2019-05-20T20:27:35","Actor":"terrajobst","Number":"1197","RawContent":null,"Title":"Add asymmetric key import/export APIs","State":"closed","Body":"This fixes #1178.","Url":"https://github.com/dotnet/standard/pull/1197","RelatedDescription":"Closed or merged PR \"Add asymmetric key import/export APIs\" (#1197)"},{"Id":"445635400","IsPullRequest":true,"CreatedAt":"2019-05-20T20:22:04","Actor":"terrajobst","Number":"1196","RawContent":null,"Title":"Enable C# mode command line diff","State":"closed","Body":"When diffing on the command line, enabling this ensures that hunk headers will use the containing construct (i.e. method, type, or namespace).\r\n\r\nFor example, instead of this (pay attention to the `@@` line):\r\n\r\n```diff\r\ndiff --git a/src/netstandard/ref/System.Security.Cryptography.cs b/src/netstandard/ref/System.Security.Cryptography.cs\r\nindex 9f68653..19d239a 100644\r\n--- a/src/netstandard/ref/System.Security.Cryptography.cs\r\n+++ b/src/netstandard/ref/System.Security.Cryptography.cs\r\n@@ -101,8 +101,20 @@ namespace System.Security.Cryptography\r\n         public virtual byte[] ExportEncryptedPkcs8PrivateKey(System.ReadOnlySpan<char> password, System.Security.Cryptography.PbeParameters pbeParameters) { throw null; }\r\n         public virtual byte[] ExportPkcs8PrivateKey() { throw null; }\r\n+        public virtual byte[] ExportSubjectPublicKeyInfo() { throw null; }\r\n         public virtual void FromXmlString(string xmlString) { }\r\n     }\r\n     public abstract partial class AsymmetricKeyExchangeDeformatter\r\n     {\r\n```\r\n\r\nYou'll see this:\r\n\r\n```diff\r\ndiff --git a/src/netstandard/ref/System.Security.Cryptography.cs b/src/netstandard/ref/System.Security.Cryptography.cs\r\nindex 9f68653..19d239a 100644\r\n--- a/src/netstandard/ref/System.Security.Cryptography.cs\r\n+++ b/src/netstandard/ref/System.Security.Cryptography.cs\r\n@@ -101,8 +101,20 @@ public abstract partial class AsymmetricAlgorithm : System.IDisposable\r\n         public virtual byte[] ExportEncryptedPkcs8PrivateKey(System.ReadOnlySpan<char> password, System.Security.Cryptography.PbeParameters pbeParameters) { throw null; }\r\n         public virtual byte[] ExportPkcs8PrivateKey() { throw null; }\r\n+        public virtual byte[] ExportSubjectPublicKeyInfo() { throw null; }\r\n         public virtual void FromXmlString(string xmlString) { }\r\n     }\r\n     public abstract partial class AsymmetricKeyExchangeDeformatter\r\n     {\r\n```","Url":"https://github.com/dotnet/standard/pull/1196","RelatedDescription":"Closed or merged PR \"Enable C# mode command line diff\" (#1196)"},{"Id":"446103850","IsPullRequest":true,"CreatedAt":"2019-05-20T13:38:53","Actor":"dotnet-maestro[bot]","Number":"1201","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190520.1\r\n- **Date Produced**: 5/20/2019 11:22 AM\r\n- **Commit**: e58b35cd0f8fe6caa194ca7e48388d8d59854fe0\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 4.6.0-preview6.19270.1\r\n  - **System.Reflection.Emit** -> 4.6.0-preview6.19270.1\r\n  - **System.Reflection.Emit.ILGeneration** -> 4.6.0-preview6.19270.1\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1201","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1201)"},{"Id":"445816606","IsPullRequest":true,"CreatedAt":"2019-05-19T13:14:40","Actor":"dotnet-maestro[bot]","Number":"1200","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190518.5\r\n- **Date Produced**: 5/18/2019 11:19 PM\r\n- **Commit**: 36ad1c62d4bb753a489d4c055b909af2cb6d407f\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 4.6.0-preview6.19268.5\r\n  - **System.Reflection.Emit** -> 4.6.0-preview6.19268.5\r\n  - **System.Reflection.Emit.ILGeneration** -> 4.6.0-preview6.19268.5\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1200","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1200)"},{"Id":"445713531","IsPullRequest":true,"CreatedAt":"2019-05-18T13:13:40","Actor":"dotnet-maestro[bot]","Number":"1199","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190517.12\r\n- **Date Produced**: 5/18/2019 4:32 AM\r\n- **Commit**: c671ce2be16ae3c6086a061d9d94b81005217735\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 4.6.0-preview6.19267.12\r\n  - **System.Reflection.Emit** -> 4.6.0-preview6.19267.12\r\n  - **System.Reflection.Emit.ILGeneration** -> 4.6.0-preview6.19267.12\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1199","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1199)"},{"Id":"445427447","IsPullRequest":true,"CreatedAt":"2019-05-17T14:02:55","Actor":"dotnet-maestro[bot]","Number":"1195","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190516.12\r\n- **Date Produced**: 5/17/2019 8:31 AM\r\n- **Commit**: 6f9570e012054bf407778c0b07632e7733ecbb13\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 4.6.0-preview6.19266.12\r\n  - **System.Reflection.Emit** -> 4.6.0-preview6.19266.12\r\n  - **System.Reflection.Emit.ILGeneration** -> 4.6.0-preview6.19266.12\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1195","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1195)"},{"Id":"443876288","IsPullRequest":true,"CreatedAt":"2019-05-14T12:39:27","Actor":"dotnet-maestro[bot]","Number":"1191","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190513.3\r\n- **Date Produced**: 5/13/2019 6:32 PM\r\n- **Commit**: e6712584bba6e2f0e35a3704793c459ff97c09af\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19263.3\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19263.3\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19263.3\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19263.3\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19263.3\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1191","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1191)"}],"ResultType":"GitHubIssue"},"CoreFx-Issues":{"Issues":[{"Id":"450611658","IsPullRequest":true,"CreatedAt":"2019-05-31T04:39:26","Actor":"ahsonkhan","Number":"38088","RawContent":null,"Title":"Add JsonSerializer overload that takes Utf8JsonReader.","State":"open","Body":"Fixes https://github.com/dotnet/corefx/issues/36717\r\n\r\nTODO:\r\n- [ ] Writer side: https://github.com/dotnet/corefx/issues/36714\r\n\r\ncc @layomia, @BrennanConroy, @rynowak, @JamesNK ","Url":"https://github.com/dotnet/corefx/pull/38088","RelatedDescription":"Open PR \"Add JsonSerializer overload that takes Utf8JsonReader.\" (#38088)"},{"Id":"450589568","IsPullRequest":false,"CreatedAt":"2019-05-31T03:33:56","Actor":"VBAndCs","Number":"38086","RawContent":null,"Title":"Create visual designer for TPL dataflow","State":"closed","Body":"The system.threading.tasks.dataflow namespace allow defining tasks as a network of linked blocks. I think using it will be easier if we can use a visual designer to define the blocks, link them and configure there properties, then the designer produces the code, so we can only focus on the code we write inside each block (double-clicking the block entity in the designer should open the related method in code editor.","Url":"https://github.com/dotnet/corefx/issues/38086","RelatedDescription":"Closed issue \"Create visual designer for TPL dataflow\" (#38086)"},{"Id":"450593926","IsPullRequest":false,"CreatedAt":"2019-05-31T03:07:00","Actor":"terrajobst","Number":"38087","RawContent":null,"Title":"Expose top-level nullability information from reflection","State":"open","Body":"With C# 8, developers will be able to express whether a given reference type can be null:\r\n\r\n```C#\r\npublic void M(string? nullable, string notNull, IEnumerable<string?> nonNullCollectionOfPotentiallyNullEntries);\r\n```\r\n\r\n(Please note that existing code that wasn't compiled using C# 8 and nullable turned on is considered to be unknown.)\r\n\r\nThis information isn't only useful for the compiler but also attractive for reflection-based tools to provide a better experience. For example:\r\n\r\n* **MVC**\r\n    - Provides a way to automatically deserialize inputs to controller methods (\"model binding\")\r\n    - Would like to provide model validation so that the existing pattern would allow code to bail early\r\n    - Without it, customers would have to apply a custom attribute, such as `[Required]`, or resort to additional null-checks\r\n    - Only needs top-level annotations, i.e. `string?` but not nested, such as `IEnumerable<string?>`\r\n\r\n* **EF**\r\n    - Provides a way to generate database schemas from user classes (\"code first\")\r\n    - Would like use nullable information to infer whether columns should be null or non-null (they already do that for nullable valuable types).\r\n    - Without it, customers would have to apply a custom attribute to repeat that information.\r\n    - Also only needs top-level annotations\r\n\r\nThe nullable information is persisted in metadata using custom attributes. In principle, any interested party can already read the custom attributes without additional work from the BCL. However, this is not ideal because the encoding is somewhat non-trivial:\r\n\r\n* **Custom attribute might be generated**. The custom attribute might have been generated (meaning is embedded in the user's assembly) or might use the [to-be-provided attribute](https://github.com/dotnet/corefx/issues/36222).\r\n* **Encoded as a byte array**. The tri-state is encoded as a linearized version of the constructed generic type.\r\n* **Compressed**. Right now, each member will have the attribute when nullability is turned on but this causes metadata bloat. We're working on a proposal that allows the containing member, type, or assembly to state a default to reduce the number of attribute applications.\r\n\r\nExposing nullability in reflection for nested generics isn't straight forward. We can't just expose an additional property on `Type` because at runtime there is no difference between `string` (unknown), `string?` (nullable), and `string` (non-null). So we'd have to expose some sort of API that allows consumers to walk the type structure and getting information. Given that we have other cases with similar issues, such as `dynamic` and tuple names, we might want to generalize this. For .NET Core 3.0 we're likely running out of time to design a complex API like this.\r\n\r\nHowever, the 80% scenario is just answering the question whether the given return value or parameter can be null *as a whole*. This simplifies the design tremendously as it only requires exposing APIs on the `MethodInfo`, `ParameterInfo`, `FieldInfo`, `PropertyInfo`, and `EventInfo`. Even if we were to provide the more complete API, these simple APIs would still be useful as they would be much easier to use.\r\n\r\n### API Proposal\r\n\r\n\r\n```C#\r\nnamespace System.Reflection\r\n{\r\n    public enum NullableState\r\n    {\r\n        Unknown,\r\n        NotNull,\r\n        MaybeNull\r\n    }\r\n\r\n    public partial class FieldInfo\r\n    {\r\n        public static NullableState GetNullableState()        \r\n    }\r\n\r\n    public partial class PropertyInfo\r\n    {\r\n        public static NullableState GetNullableState()        \r\n    }\r\n\r\n    public partial class EventInfo\r\n    {\r\n        public static NullableState GetNullableState()        \r\n    }\r\n\r\n    public partial class MethodInfo\r\n    {\r\n        public static NullableState GetReturnTypeNullableState()        \r\n    }\r\n\r\n    public partial class ParameterInfo\r\n    {\r\n        public static NullableState GetNullableState()        \r\n    }\r\n}\r\n```\r\n\r\n@dotnet/nullablefc @dotnet/ldm @dotnet/fxdc @rynowak @divega @ajcvickers @roji @steveharter ","Url":"https://github.com/dotnet/corefx/issues/38087","RelatedDescription":"Open issue \"Expose top-level nullability information from reflection\" (#38087)"},{"Id":"450432054","IsPullRequest":true,"CreatedAt":"2019-05-31T02:43:34","Actor":"bgrainger","Number":"38070","RawContent":null,"Title":"Simplify DbProviderFactory feature detection code","State":"closed","Body":"See comment: https://github.com/dotnet/corefx/commit/60d65afa0160a0b27e8df6b8f450ead8ab7f4214#r33736759","Url":"https://github.com/dotnet/corefx/pull/38070","RelatedDescription":"Closed or merged PR \"Simplify DbProviderFactory feature detection code\" (#38070)"},{"Id":"450572057","IsPullRequest":false,"CreatedAt":"2019-05-31T01:17:26","Actor":"onovotny","Number":"38085","RawContent":null,"Title":"Preview 6 regression with AddRange on ICollection/Collection","State":"open","Body":"When updating the SDK from Preview 5 to the latest Preview 6 nightly (3.0.100-preview6-012131) and recompiling my app, I started getting runtime exceptions in `ListCollectionView` due to changes in `AddRange`.\r\n\r\nI have an extension method keyed on `ICollection<T>` called `AddRange` that accepts an `IEnumerable<T>`. It loops over the items and calls `Add(T item)` on the collection. I believe this is a common extension method people have added for convenience.\r\n\r\nThe trouble is that the new implementation of AddRange on `Collection<T>` does the add as a [bulk insert at the end](https://github.com/dotnet/coreclr/blob/master/src/System.Private.CoreLib/shared/System/Collections/ObjectModel/Collection.cs#L242). This changes the behavior for consumers like the WPF `ListCollectionView`. That type listens for property changes on `ObservableCollection<T>`, but it does not support bulk operations, and throws.\r\nhttps://github.com/dotnet/wpf/blob/master/src/Microsoft.DotNet.Wpf/src/PresentationFramework/System/Windows/Data/ListCollectionView.cs#L2521\r\n\r\nThe net effect here is that a common helper method that is used in many WPF apps (AddRange to an `ObservableCollection<T>` no longer binds and the replacement method's behavior has a negative and observable side effect.\r\n\r\nThe workaround is to create an `AddRangeScalar` method with the same signature as the original `AddRange` extension method and ensure that's always called. However, that has a wide impact on existing code and it's really easy for people to miss it and trigger a runtime exception on that code path.\r\n","Url":"https://github.com/dotnet/corefx/issues/38085","RelatedDescription":"Open issue \"Preview 6 regression with AddRange on ICollection/Collection\" (#38085)"},{"Id":"450546025","IsPullRequest":true,"CreatedAt":"2019-05-31T00:50:28","Actor":"wtgodbe","Number":"38077","RawContent":null,"Title":"System.Text.Json is not inbox on netfx","State":"closed","Body":"Fixes test build break introduced by https://github.com/dotnet/corefx/commit/1743e47216aa698ffe91148f4db2078accf6030a\r\n\r\n> Serialization\\Value.ReadTests.cs(225,58): error CS0117: 'BitConverter' does not contain a definition for 'SingleToInt32Bits' [D:\\a\\1\\s\\src\\System.Text.Json\\tests\\System.Text.Json.Tests.csproj]\r\n\r\nhttps://github.com/dotnet/corefx/blob/30ca4113ed07fc78060a0c9d3f95eee4fe8f8ee3/src/System.Text.Json/tests/Serialization/Value.ReadTests.cs#L224-L227\r\n\r\nThese tests were failing on netfx, since System.Text.Json isn't inbox on that platform, but the ifdef wasn't catching that after we added `netfx` to the test configurations: https://github.com/dotnet/corefx/blame/master/src/System.Text.Json/tests/Configurations.props\r\n\r\nCC @safern @ViktorHofer @ahsonkhan ","Url":"https://github.com/dotnet/corefx/pull/38077","RelatedDescription":"Closed or merged PR \"System.Text.Json is not inbox on netfx\" (#38077)"},{"Id":"450558064","IsPullRequest":false,"CreatedAt":"2019-05-31T00:06:32","Actor":"JeremyKuhne","Number":"38084","RawContent":null,"Title":"NegotiatedCipherSuiteTest timeout test failures","State":"open","Body":"System.Net.Security.Tests.NegotiatedCipherSuiteTest had a number of timeout exceptions (Alpine run):\r\n\r\nhttps://mc.dot.net/#/user/dotnet-bot/pr~2Fdotnet~2Fcorefx~2Frefs~2Fpull~2F38039~2Fmerge/test~2Ffunctional~2Fcli~2Finnerloop~2F/20190530.55/workItem/System.Net.Security.Tests\r\n\r\nNegotiatedCipherSuite_SslProtocolIsLowerThanTls13_ShouldMatchTheProtocol(protocol: Tls)\r\nNegotiatedCipherSuite_SslProtocolIsLowerThanTls13_ShouldMatchTheProtocol(protocol: Tls11)\r\nNegotiatedCipherSuite_SslProtocolIsLowerThanTls13_ShouldMatchTheProtocol(protocol: Tls12)\r\nTls13IsSupported_GetValue_ReturnsTrue\r\n\r\nAll failed similarly:\r\n\r\n```\r\nSystem.TypeInitializationException : The type initializer for 'System.Net.Security.Tests.NegotiatedCipherSuiteTest' threw an exception.\r\n---- System.AggregateException : One or more errors occurred. (VirtualNetwork: Timeout reading the next frame.)\r\n-------- System.TimeoutException : VirtualNetwork: Timeout reading the next frame.\r\n```\r\n","Url":"https://github.com/dotnet/corefx/issues/38084","RelatedDescription":"Open issue \"NegotiatedCipherSuiteTest timeout test failures\" (#38084)"},{"Id":"450555982","IsPullRequest":true,"CreatedAt":"2019-05-30T23:56:49","Actor":"safern","Number":"38083","RawContent":null,"Title":"Update package index and harvest props to reflect WinHttpHandler update","State":"open","Body":"cc: @davidsh @tarekgh @karelz @danmosemsft ","Url":"https://github.com/dotnet/corefx/pull/38083","RelatedDescription":"Open PR \"Update package index and harvest props to reflect WinHttpHandler update\" (#38083)"},{"Id":"450555195","IsPullRequest":false,"CreatedAt":"2019-05-30T23:53:13","Actor":"Anipik","Number":"38082","RawContent":null,"Title":"Enabling the incremental build for Native projects as well","State":"open","Body":"Currently if we make a change in the native proj, we have to  build from the root in order to get the changes.\r\nWe should enable incremental build for the native projects as well.\r\n\r\ncc @ericstj ","Url":"https://github.com/dotnet/corefx/issues/38082","RelatedDescription":"Open issue \"Enabling the incremental build for Native projects as well\" (#38082)"},{"Id":"450554585","IsPullRequest":true,"CreatedAt":"2019-05-30T23:50:24","Actor":"safern","Number":"38081","RawContent":null,"Title":"[release/2.1] Bump System.Net.Http.WinHttpHandler package version","State":"open","Body":"cc: @davidsh @tarekgh @karelz @leecow @danmosemsft ","Url":"https://github.com/dotnet/corefx/pull/38081","RelatedDescription":"Open PR \"[release/2.1] Bump System.Net.Http.WinHttpHandler package version\" (#38081)"},{"Id":"450553136","IsPullRequest":false,"CreatedAt":"2019-05-30T23:44:16","Actor":"safern","Number":"38080","RawContent":null,"Title":"System.Drawing.ImageConverter cannot convert from System.Drawing.Icon","State":"open","Body":"Transfered from: https://github.com/dotnet/winforms/issues/985\r\n\r\nMinimal repro:\r\n\r\nCreate a Winforms .NET Core app.\r\n\r\nAdd following code into Form.cs file.\r\n```cs\r\npublic Form1()\r\n{\r\n    InitializeComponent();\r\n\r\n     Icon test_Icon = Icon;\r\n     myObj = new ImageConverter();\r\n     Object result_obj = myObj.ConvertFrom(test_Icon);\r\n\r\n}\r\n\r\nprotected System.Drawing.ImageConverter myObj = null;\r\n```\r\n\r\nMake a breakpoint at this code line: Object result_obj = myObj.ConvertFrom(test_Icon);\r\n\r\nRun the app.\r\n\r\n@Anipik maybe you could help with this one? \r\n\r\nIt seems like we missed this when porting: https://referencesource.microsoft.com/#System.Drawing/commonui/System/Drawing/ImageConverter.cs,40\r\n\r\ncc: @danmosemsft ","Url":"https://github.com/dotnet/corefx/issues/38080","RelatedDescription":"Open issue \"System.Drawing.ImageConverter cannot convert from System.Drawing.Icon\" (#38080)"},{"Id":"450552212","IsPullRequest":true,"CreatedAt":"2019-05-30T23:40:22","Actor":"Anipik","Number":"38079","RawContent":null,"Title":"Using double to avoid overflow ","State":"open","Body":"Fixes https://github.com/dotnet/corefx/issues/38001\r\nBefore\r\n```\r\ntimestamp  762054685492600\r\ncurrentTime  1241063584\r\n```\r\nAfter\r\n```\r\ntimestamp 773175066373300.000000\r\ncurrenttime 773175066373300.000000\r\n```\r\n","Url":"https://github.com/dotnet/corefx/pull/38079","RelatedDescription":"Open PR \"Using double to avoid overflow \" (#38079)"},{"Id":"450551621","IsPullRequest":false,"CreatedAt":"2019-05-30T23:37:31","Actor":"bricelam","Number":"38078","RawContent":null,"Title":"TypeDescriptor.GetAttributes() doesn't return multiples","State":"open","Body":"TypeDescriptor doesn't properly handle attributes with `AllowMultiple = true`.\r\n\r\nGiven a class like this...\r\n``` csharp\r\n[CustomValidation(typeof(Class1), nameof(Class1.Method1))]\r\n[CustomValidation(typeof(Class1), nameof(Class1.Method2))]\r\nclass Class1\r\n{\r\n    public static ValidationResult Method1(object value) => null;\r\n    public static ValidationResult Method2(object value) => null;\r\n}\r\n```\r\n...only the first instance of `CustomValidationAttribute` is returned:\r\n``` csharp\r\nvar attributes = TypeDescriptor.GetAttributes(typeof(Class1));\r\n\r\n// Fails on .NET Core (count is 1); succeeds on .NET Framework\r\nDebug.Assert(attributes.Count == 2);\r\n```\r\n\r\nThis is blocking some validation scenarios in EF6.\r\n\r\ncc @Pilchie @ajcvickers ","Url":"https://github.com/dotnet/corefx/issues/38078","RelatedDescription":"Open issue \"TypeDescriptor.GetAttributes() doesn't return multiples\" (#38078)"},{"Id":"450531402","IsPullRequest":true,"CreatedAt":"2019-05-30T22:18:16","Actor":"wtgodbe","Number":"38076","RawContent":null,"Title":" Fix Loop in System.Private.Uri","State":"open","Body":"Ports https://github.com/dotnet/corefx/commit/6da61ff4d24c7875087cb6afe93140ba0e3a6532 to master\r\n\r\nCC @karelz @davidsh ","Url":"https://github.com/dotnet/corefx/pull/38076","RelatedDescription":"Open PR \" Fix Loop in System.Private.Uri\" (#38076)"},{"Id":"450530898","IsPullRequest":false,"CreatedAt":"2019-05-30T22:16:35","Actor":"carlossanlop","Number":"38075","RawContent":null,"Title":"build-native.cmd expects \"Program Files (x86)\" to exist when running it in a 32-bit OS","State":"open","Body":"I have two identical Windows 7 VMs where I configured and installed everything so I could run corefx unit tests.\r\n\r\nI followed the instructions on both VMs at the same time. I am able to successfully build x64, but x86 fails to build.\r\n\r\nWith the help of @wtgodbe , we found that build-native.cmd expects the \"Program Files (x86)\" folder to exist so it can find the VS installation. But since it's not found, build fails.\r\n\r\nShould we be checking for the architecture and based on that, decide if we want to look for \"Program Files\" (the only folder that exists in x86) or \"Program Files (x86)\" (which only exists in x64)?\r\n\r\nThis is the line:\r\n\r\nhttps://github.com/dotnet/corefx/blob/02f649e60f3a8ea0b947ea0eaf64f2fa3c287816/src/Native/build-native.cmd#L52\r\n\r\nI made sure to run:\r\n\r\n`build.cmd -arch x86`\r\n\r\nThis is the error I get:\r\n\r\n```\r\nEXEC: error : Visual Studio 2017 or 2019 required [C:\\repos\\corefx\\src\\Native\\build-native.proj]\r\n       Please see https://github.com/dotnet/corefx/tree/master/Documentation for build instructions.\r\nC:\\repos\\corefx\\src\\Native\\build-native.proj(50,5): error MSB3073: The command \"\"C:\\repos\\corefx\\src\\Native\\build-native.cmd\" x86 Debug Windows_NT outconfig netcore-app-Windows_NT-Debug-x86\" existed with code 1.\r\nBuild FAILED.\r\n```\r\n\r\nAfter modifying that line in build-native.cmd, I was able to go past the check for the VS installation and build (although it was an unsuccessful build, but for different reasons unrelated to this).","Url":"https://github.com/dotnet/corefx/issues/38075","RelatedDescription":"Open issue \"build-native.cmd expects \"Program Files (x86)\" to exist when running it in a 32-bit OS\" (#38075)"},{"Id":"450519875","IsPullRequest":false,"CreatedAt":"2019-05-30T21:43:47","Actor":"steveharter","Number":"38074","RawContent":null,"Title":"Support JSONPath on JsonDocument","State":"open","Body":"As an extension to https://github.com/dotnet/corefx/issues/37768, the JsonDocument class should support setting the `Path` property on `JsonReaderException`.\r\n\r\nIn addition, once this is complete, the serializer should re-throw `JsonReaderException` (as it does today) but now with the `Path` property pre-pended with the results from `JsonReaderException` to include the full Path of the serializer + JsonDocument.\r\n\r\nSee also PR https://github.com/dotnet/corefx/pull/37938","Url":"https://github.com/dotnet/corefx/issues/38074","RelatedDescription":"Open issue \"Support JSONPath on JsonDocument\" (#38074)"},{"Id":"450483454","IsPullRequest":false,"CreatedAt":"2019-05-30T20:08:14","Actor":"fdbva","Number":"38073","RawContent":null,"Title":"String Dictionary with StringComparer.Ordinal slower than default EqualityComparer","State":"open","Body":"Hello.\r\n\r\nAs I understand it, a `Dictionary` with it's key as `string` and using `StringComparer.Ordinal` should be faster than with a default `EqualityComparer`. \r\nI did some tests with `BenchmarkDotNet` and it seemed true for `.NET Framework` but not for `.NET CORE`.\r\n\r\nMaybe I'm doing something wrong?\r\nBellow are the results, the code for the tests and the `csproj` file.\r\n\r\n```\r\nBenchmarkDotNet=v0.11.5, OS=Windows 10.0.17134.799 (1803/April2018Update/Redstone4)\r\nIntel Core i7-8550U CPU 1.80GHz (Kaby Lake R), 1 CPU, 8 logical and 4 physical cores\r\nFrequency=1945316 Hz, Resolution=514.0553 ns, Timer=TSC\r\n.NET Core SDK=3.0.100-preview5-011568\r\n  [Host]     : .NET Core 2.2.2 (CoreCLR 4.6.27317.07, CoreFX 4.6.27318.02), 64bit RyuJIT\r\n  Job-FLLDVS : .NET Framework 4.7.2 (CLR 4.0.30319.42000), 64bit RyuJIT-v4.8.3801.0\r\n  Job-YILBVB : .NET Framework 4.7.2 (CLR 4.0.30319.42000), 64bit RyuJIT-v4.8.3801.0\r\n  Job-PNTBHM : .NET Framework 4.7.2 (CLR 4.0.30319.42000), 32bit LegacyJIT-v4.8.3801.0\r\n  Job-CZKISL : .NET Framework 4.7.2 (CLR 4.0.30319.42000), 32bit LegacyJIT-v4.8.3801.0\r\n  Job-LUFVLI : .NET Core 2.2.2 (CoreCLR 4.6.27317.07, CoreFX 4.6.27318.02), 64bit RyuJIT\r\n  Job-HEHRAX : .NET Core 3.0.0-preview5-27626-15 (CoreCLR 4.6.27622.75, CoreFX 4.700.19.22408), 64bit RyuJIT\r\n  Job-GDGOTQ : .NET Framework 4.7.2 (CLR 4.0.30319.42000), 64bit RyuJIT-v4.8.3801.0\r\n  Job-DDPHUA : .NET Framework 4.7.2 (CLR 4.0.30319.42000), 64bit RyuJIT-v4.8.3801.0\r\n\r\nMethod | Jit | Platform | Toolchain | Mean | Error | StdDev\r\n-- | -- | -- | -- | -- | -- | --\r\nDefaultEqualityComparer | LegacyJit | X64 | net461 | 21.75 ns | 0.4868 ns | 0.5606 ns\r\nOrdinalEqualityComparer | LegacyJit | X64 | net461 | 19.08 ns | 0.4659 ns | 0.4985 ns\r\nDefaultEqualityComparer | LegacyJit | X64 | net472 | 21.50 ns | 0.4958 ns | 0.6089 ns\r\nOrdinalEqualityComparer | LegacyJit | X64 | net472 | 19.34 ns | 0.4518 ns | 0.6031 ns\r\nDefaultEqualityComparer | LegacyJit | X86 | net461 | 26.03 ns | 0.5878 ns | 0.8240 ns\r\nOrdinalEqualityComparer | LegacyJit | X86 | net461 | 23.79 ns | 0.5274 ns | 0.5416 ns\r\nDefaultEqualityComparer | LegacyJit | X86 | net472 | 25.89 ns | 0.3940 ns | 0.3492 ns\r\nOrdinalEqualityComparer | LegacyJit | X86 | net472 | 23.22 ns | 0.5124 ns | 0.4278 ns\r\nDefaultEqualityComparer | RyuJit | X64 | .NET Core 2.2 | 16.27 ns | 0.4007 ns | 0.3552 ns\r\nOrdinalEqualityComparer | RyuJit | X64 | .NET Core 2.2 | 21.80 ns | 0.4991 ns | 0.5126 ns\r\nDefaultEqualityComparer | RyuJit | X64 | .NET Core 3.0 | 13.67 ns | 0.3466 ns | 0.4256 ns\r\nOrdinalEqualityComparer | RyuJit | X64 | .NET Core 3.0 | 18.12 ns | 0.4199 ns | 0.3928 ns\r\nDefaultEqualityComparer | RyuJit | X64 | net461 | 21.44 ns | 0.5019 ns | 0.5370 ns\r\nOrdinalEqualityComparer | RyuJit | X64 | net461 | 19.32 ns | 0.4559 ns | 0.7863 ns\r\nDefaultEqualityComparer | RyuJit | X64 | net472 | 21.61 ns | 0.4884 ns | 0.5226 ns\r\nOrdinalEqualityComparer | RyuJit | X64 | net472 | 19.11 ns | 0.4370 ns | 0.5834 ns\r\nDefaultEqualityComparer | RyuJit | X86 | .NET Core 2.2 | NA | NA | NA\r\nOrdinalEqualityComparer | RyuJit | X86 | .NET Core 2.2 | NA | NA | NA\r\nDefaultEqualityComparer | RyuJit | X86 | .NET Core 3.0 | NA | NA | NA\r\nOrdinalEqualityComparer | RyuJit | X86 | .NET Core 3.0 | NA | NA | NA\r\n```\r\n\r\n```\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing BenchmarkDotNet.Attributes;\r\nusing BenchmarkDotNet.Configs;\r\nusing BenchmarkDotNet.Environments;\r\nusing BenchmarkDotNet.Jobs;\r\nusing BenchmarkDotNet.Running;\r\nusing BenchmarkDotNet.Toolchains.CsProj;\r\n\r\nnamespace DictionaryOrdinalVsDefaultComparer\r\n{\r\n    public class Program\r\n    {\r\n        [Config(typeof(MultipleRuntimes))]\r\n        public class OrdinalVsDefaultComparer\r\n        {\r\n            private readonly Dictionary<string, string> _defaultDictionary =\r\n                new Dictionary<string, string> { { \"should be\", \"slower\" } };\r\n            private readonly Dictionary<string, string> _ordinalDictionary =\r\n                new Dictionary<string, string>(StringComparer.Ordinal) { { \"should be\", \"faster\" } };\r\n\r\n            [Benchmark]\r\n            public string DefaultEqualityComparer()\r\n            {\r\n                _defaultDictionary.TryGetValue(\"should be\", out var defaultComparerValue);\r\n                return defaultComparerValue;\r\n            }\r\n\r\n            [Benchmark]\r\n            public string OrdinalEqualityComparer()\r\n            {\r\n                _ordinalDictionary.TryGetValue(\"should be\", out var ordinalComparerValue);\r\n                return ordinalComparerValue;\r\n            }\r\n        }\r\n        public static void Main(string[] args)\r\n        {\r\n            var summary = BenchmarkRunner.Run<OrdinalVsDefaultComparer>();\r\n        }\r\n        public class MultipleRuntimes : ManualConfig\r\n        {\r\n            public MultipleRuntimes()\r\n            {\r\n                Add(Job.Default\r\n                    .With(CsProjCoreToolchain.NetCoreApp22)\r\n                    .With(Jit.RyuJit)\r\n                    .With(Platform.X64));\r\n                Add(Job.Default\r\n                    .With(CsProjCoreToolchain.NetCoreApp22)\r\n                    .With(Jit.RyuJit)\r\n                    .With(Platform.X86));\r\n                Add(Job.Default\r\n                    .With(CsProjCoreToolchain.NetCoreApp30)\r\n                    .With(Jit.RyuJit)\r\n                    .With(Platform.X64));\r\n                Add(Job.Default\r\n                    .With(CsProjCoreToolchain.NetCoreApp30)\r\n                    .With(Jit.RyuJit)\r\n                    .With(Platform.X86));\r\n\r\n                Add(Job.Default\r\n                    .With(CsProjCoreToolchain.NetCoreApp22)\r\n                    .With(Jit.LegacyJit)\r\n                    .With(Platform.X64));\r\n                Add(Job.Default\r\n                    .With(CsProjCoreToolchain.NetCoreApp22)\r\n                    .With(Jit.LegacyJit)\r\n                    .With(Platform.X86));\r\n                Add(Job.Default\r\n                    .With(CsProjCoreToolchain.NetCoreApp30)\r\n                    .With(Jit.LegacyJit)\r\n                    .With(Platform.X64));\r\n                Add(Job.Default\r\n                    .With(CsProjCoreToolchain.NetCoreApp30)\r\n                    .With(Jit.LegacyJit)\r\n                    .With(Platform.X86));\r\n\r\n                Add(Job.Default\r\n                    .With(CsProjClassicNetToolchain.Net461)\r\n                    .With(Jit.LegacyJit)\r\n                    .With(Platform.X64));\r\n                Add(Job.Default\r\n                    .With(CsProjClassicNetToolchain.Net461)\r\n                    .With(Jit.RyuJit)\r\n                    .With(Platform.X64));\r\n                Add(Job.Default\r\n                    .With(CsProjClassicNetToolchain.Net461)\r\n                    .With(Jit.LegacyJit)\r\n                    .With(Platform.X86));\r\n                Add(Job.Default\r\n                    .With(CsProjClassicNetToolchain.Net472)\r\n                    .With(Jit.LegacyJit)\r\n                    .With(Platform.X64));\r\n                Add(Job.Default\r\n                    .With(CsProjClassicNetToolchain.Net472)\r\n                    .With(Jit.RyuJit)\r\n                    .With(Platform.X64));\r\n                Add(Job.Default\r\n                    .With(CsProjClassicNetToolchain.Net472)\r\n                    .With(Jit.LegacyJit)\r\n                    .With(Platform.X86));\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n```\r\n```\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <OutputType>Exe</OutputType>\r\n    <TargetFrameworks>netcoreapp2.2;netcoreapp3.0;net461;net472;</TargetFrameworks>\r\n    <PlatformTarget>AnyCPU</PlatformTarget>\r\n    <RuntimeIdentifiers>win10-x64;win10-x86</RuntimeIdentifiers>\r\n    <LangVersion>latest</LangVersion>\r\n  </PropertyGroup>\r\n\r\n  <PropertyGroup Condition=\"'$(Configuration)|$(TargetFramework)|$(Platform)'=='Release|netcoreapp2.2|AnyCPU'\">\r\n    <DefineConstants />\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <PackageReference Include=\"BenchmarkDotNet\" Version=\"0.11.5\" />\r\n  </ItemGroup>\r\n\r\n</Project>\r\n\r\n```","Url":"https://github.com/dotnet/corefx/issues/38073","RelatedDescription":"Open issue \"String Dictionary with StringComparer.Ordinal slower than default EqualityComparer\" (#38073)"},{"Id":"450473120","IsPullRequest":false,"CreatedAt":"2019-05-30T19:40:42","Actor":"DualBrain","Number":"38072","RawContent":null,"Title":"VB.NET \"My\" not working as expected?","State":"open","Body":"@cston and @KathleenDollard,\r\n\r\nHere is an isolated example running on the most recent bits as far as I can tell (at least with regards to the Microsoft.VisualBasic side of things).\r\n\r\nModule Program\r\n  Sub Main(args As String())\r\n    Console.WriteLine(My.Computer.Name)\r\n    Console.WriteLine((New Microsoft.VisualBasic.Devices.ServerComputer).Name)\r\n    Console.WriteLine(System.Environment.MachineName)\r\n  End Sub\r\nEnd Module\r\n\r\nThe first line doesn’t work in .NET Core 3.0; however, the second and third lines do.  Playing with the same code in the full .NET Framework, all three lines work and when you jump to the reference for My.Computer.Name, it goes to Microsoft.VisualBasic.Devices.ServerComputer.Name.  I then jumped back over to the .NET Core source tree and that property simply returns System.Environment.MachineName.  One thing I find interesting about this is it’s not a 1:1 map… how does My.Computer.Name map to a property inside of an instantiated instance of Microsoft.VisualBasic.Devices.ServerComputer?  Some “magic” black-box stuff there?\r\n\r\nSo am I just missing something as far as how to \"light up\" the My side of things when working with a .NET Core 3.0 console project?  Or is there some additional work that still has to be done beyond the work that has taken place within the Microsoft.VisualBasic namespace?\r\n\r\n(BTW, @cston great work thus far!)\r\n\r\nThanks.\r\n\r\nCory Smith","Url":"https://github.com/dotnet/corefx/issues/38072","RelatedDescription":"Open issue \"VB.NET \"My\" not working as expected?\" (#38072)"},{"Id":"450464066","IsPullRequest":false,"CreatedAt":"2019-05-30T19:17:37","Actor":"MarcoRossignoli","Number":"38071","RawContent":null,"Title":"[QUESTION]VS Debugging issue","State":"open","Body":"I cannot see variables on watch debug windows with VS2019 Preview only for corefx solutions\r\n![image](https://user-images.githubusercontent.com/7894084/58658057-ede5dc80-831f-11e9-882e-68f93fba65db.png)\r\n\r\n```\r\nMicrosoft Visual Studio Enterprise 2019 Preview\r\nVersion 16.2.0 Preview 1.0\r\nVisualStudio.16.Preview/16.2.0-pre.1.0+28917.182\r\nMicrosoft .NET Framework\r\nVersion 4.8.03761\r\n\r\nInstalled Version: Enterprise\r\n```\r\nDoes anyone know the reason?Is it only my issue?","Url":"https://github.com/dotnet/corefx/issues/38071","RelatedDescription":"Open issue \"[QUESTION]VS Debugging issue\" (#38071)"},{"Id":"450424006","IsPullRequest":true,"CreatedAt":"2019-05-30T17:45:31","Actor":"stephentoub","Number":"38069","RawContent":null,"Title":"Delete FromMilliseconds_Desktop test","State":"closed","Body":"This test is validating netfx behavior prior to fixes in .NET Core, and it's failed in CI 120 times in the last week.  Since we decided we don't care about such netfx-specific tests in corefx, I'm deleting it.\r\n\r\ncc: @tannergooding, @bartonjs, @joperezr","Url":"https://github.com/dotnet/corefx/pull/38069","RelatedDescription":"Closed or merged PR \"Delete FromMilliseconds_Desktop test\" (#38069)"},{"Id":"450421849","IsPullRequest":true,"CreatedAt":"2019-05-30T17:44:35","Actor":"stephentoub","Number":"38068","RawContent":null,"Title":"Delete TestNullComparer_netfx test","State":"closed","Body":"It's testing pre-bug fix behavior in .NET Framework, and for some reason it's been failing sporadically.  Since we decided we don't care about such tests in corefx, I'm deleting it.\r\n\r\ncc: @ViktorHofer, @safern","Url":"https://github.com/dotnet/corefx/pull/38068","RelatedDescription":"Closed or merged PR \"Delete TestNullComparer_netfx test\" (#38068)"},{"Id":"450408279","IsPullRequest":true,"CreatedAt":"2019-05-30T17:00:50","Actor":"Dotnet-GitSync-Bot","Number":"38067","RawContent":null,"Title":"Mirror changes from dotnet/corert,coreclr","State":"open","Body":"This PR contains mirrored changes from dotnet/corert,coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @EgorBo @jkotas @MarcoRossignoli @marek-safar @VSadov @stephentoub","Url":"https://github.com/dotnet/corefx/pull/38067","RelatedDescription":"Open PR \"Mirror changes from dotnet/corert,coreclr\" (#38067)"},{"Id":"450392124","IsPullRequest":false,"CreatedAt":"2019-05-30T16:25:51","Actor":"stephentoub","Number":"38066","RawContent":null,"Title":"Path directory separator tests failing on Unix","State":"open","Body":"","Url":"https://github.com/dotnet/corefx/issues/38066","RelatedDescription":"Open issue \"Path directory separator tests failing on Unix\" (#38066)"},{"Id":"450391827","IsPullRequest":false,"CreatedAt":"2019-05-30T16:25:11","Actor":"AArnott","Number":"38065","RawContent":null,"Title":"System.Threading.Tasks.Extensions shipped multiple times with same assembly version, different assembly references","State":"open","Body":"The System.Threading.Tasks.Extensions.dll assembly shipped multiple times on nuget.org with the *same assembly version* but with *different assembly references*. \r\n\r\nSpecifically:\r\n\r\n| NuGet package version | Assembly version | Assembly version of reference to System.Runtime.CompilerServices.Unsafe |\r\n|--|--|--|\r\n| 4.5.0 | 4.2.0.0 | 4.0.4.0 |\r\n| 4.5.1 | 4.2.0.0 | 4.0.4.0 |\r\n| 4.5.2 | 4.2.0.0 | 4.0.4.**1** |\r\n\r\nNotice how the 4.5.2 package release of the System.Threading.Tasks.Extensions assembly changed the version of System.Runtime.CompilerServices.Unsafe that is referenced, but kept its own assembly version the same.\r\n\r\nThis led to a regression when shipping Visual Studio 2019 Update 1 that led to some customers being unable to use VS at all because it would keep crashing. After several days of investigation we found the root cause:\r\n \r\nWe had several processes that shipped the 4.5.2 package version of System.Threading.Tasks.Extensions together with the Unsafe 4.0.4.1 assembly. But some customer machines have the System.Threading.Tasks.Extensions.dll that came from the 4.5.0-4.5.1 package range in their GAC, and did _not_ have the Unsafe 4.0.4.0 in their GAC. As a result, when our processes load, instead of loading the 4.5.2 package version, the CLR loaded the 4.5.0 version from the GAC, and then failed to find the Unsafe 4.0.4.0 assembly since the one we shipped is 4.0.4.1. \r\n\r\nNow granted, whoever or whatever installed the System.Threading.Tasks.Extensions.dll into the GAC without also GAC'ing all its dependencies is obviously to blame here, I thought the corefx policy was that the assembly version would change every single time a corefx assembly changed and shipped on nuget.org. That policy was obviously not followed here and had it been, we would have been protected from a faulty installer in another application.\r\n\r\nWe're going to add an artificial binding redirect to our processes' app.config files to redirect Unsafe 4.0.4.0 to 4.0.4.1 as a workaround.\r\n\r\nCan/should a new System.Threading.Tasks.Extensions package version be pushed to nuget with a new assembly version so we and others can consume that and be implicitly protected from such a situation?","Url":"https://github.com/dotnet/corefx/issues/38065","RelatedDescription":"Open issue \"System.Threading.Tasks.Extensions shipped multiple times with same assembly version, different assembly references\" (#38065)"},{"Id":"450385444","IsPullRequest":false,"CreatedAt":"2019-05-30T16:12:18","Actor":"Yucked","Number":"38064","RawContent":null,"Title":"JsonSerializer throws MissingMethodException","State":"open","Body":"StackTrace:\r\n\r\n```\r\nSystem.MissingMethodException\r\n  HResult=0x80131513\r\n  Message=Method not found: 'Byte[] System.Text.Json.Serialization.JsonSerializer.ToBytes(!!0, System.Text.Json.Serialization.JsonSerializerOptions)'.\r\n  Source=Frostbyte\r\n  StackTrace:\r\n   at Frostbyte.Handlers.ConfigHandler.ValidateConfiguration() in D:\\Projects\\Frostbyte\\Handlers\\ConfigHandler.cs:line 43\r\n   at Frostbyte.Handlers.StartupHandler.<InitializeAsync>d__3.MoveNext() in D:\\Projects\\Frostbyte\\Handlers\\StartupHandler.cs:line 36\r\n```\r\n\r\nThrow right here: https://github.com/Yucked/Frostbyte/blob/master/Handlers/StartupHandler.cs#L36\r\n\r\nSDK and RunTime\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview5-011568\r\n Commit:    b487ff10aa\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview6-27729-07\r\n  Commit:  7982806713```\r\n","Url":"https://github.com/dotnet/corefx/issues/38064","RelatedDescription":"Open issue \"JsonSerializer throws MissingMethodException\" (#38064)"},{"Id":"450314070","IsPullRequest":false,"CreatedAt":"2019-05-30T15:24:25","Actor":"Symbai","Number":"38059","RawContent":null,"Title":"System.InvalidOperationException on calling Process.GetCurrentProcess().StartInfo","State":"closed","Body":"I was porting one of my applications and the following line of code fails in .NET Core 3 while it works perfectly fine in .NET Framework (WPF application):\r\n\r\n`var startInfo = Process.GetCurrentProcess().StartInfo;`\r\n\r\nException:\r\n```\r\nAn unhandled exception of type 'System.InvalidOperationException' occurred in System.Private.CoreLib.dll\r\nProcess was not started by this object, so requested information cannot be determined.\r\n```\r\nHappens when running within VS and outside. If this exception is expected to happen, how can I port this line of code to .NET Core 3 ? Is there an alternative to retrieve the start info object of the current process?\r\n","Url":"https://github.com/dotnet/corefx/issues/38059","RelatedDescription":"Closed issue \"System.InvalidOperationException on calling Process.GetCurrentProcess().StartInfo\" (#38059)"},{"Id":"450358790","IsPullRequest":true,"CreatedAt":"2019-05-30T15:15:21","Actor":"stephentoub","Number":"38063","RawContent":null,"Title":"Expose, test, and use Environment.TickCount64","State":"open","Body":"Fixes https://github.com/dotnet/corefx/issues/35499\r\nDepends on https://github.com/dotnet/coreclr/pull/24857\r\nDepends on https://github.com/dotnet/corert/pull/7470","Url":"https://github.com/dotnet/corefx/pull/38063","RelatedDescription":"Open PR \"Expose, test, and use Environment.TickCount64\" (#38063)"},{"Id":"450356563","IsPullRequest":true,"CreatedAt":"2019-05-30T15:10:55","Actor":"gfoidl","Number":"38062","RawContent":null,"Title":"Spanify Cryptography.Base64Transform","State":"open","Body":"## Description\r\n\r\n`Convert.{To|From}Base64CharArray` was used, so this involved temporary buffer allocations and copying between them. With https://github.com/dotnet/corefx/blob/adc16f3d53b18467d5ed92fd1b988b0c21901ab9/src/System.Memory/ref/System.Memory.cs#L397 we have a nice API that does the same, but based on spans. So the code got rewritten to use the span-based conversion, thus saving allocation and unnecessary copying.\r\n\r\n## Benchmarks\r\n\r\n[Source](https://github.com/gfoidl/Benchmarks/tree/f0ed5a11f9a14b04f90f0a643d34ef8f39bc63c6/corefx/System/Security/Cryptography/Base64TransformsBenchmarks/Base64TransformsBenchmarks/Benchmarks)\r\n\r\n### ToBase64Transform\r\n\r\n#### TransformBlock\r\n\r\n```\r\n|   Method |     Mean |     Error |    StdDev | Ratio |  Gen 0 | Gen 1 | Gen 2 | Allocated |\r\n|--------- |---------:|----------:|----------:|------:|-------:|------:|------:|----------:|\r\n| Original | 85.65 ns | 0.4726 ns | 0.4189 ns |  1.00 | 0.0101 |     - |     - |      64 B |\r\n|       PR | 30.24 ns | 0.3475 ns | 0.3080 ns |  0.35 |      - |     - |     - |         - |\r\n```\r\n\r\n#### TransformFinalBlock\r\n\r\n```\r\n|   Method |     Mean |     Error |    StdDev | Ratio |  Gen 0 | Gen 1 | Gen 2 | Allocated |\r\n|--------- |---------:|----------:|----------:|------:|-------:|------:|------:|----------:|\r\n| Original | 74.00 ns | 0.7205 ns | 0.6387 ns |  1.00 | 0.0101 |     - |     - |      64 B |\r\n|       PR | 43.51 ns | 0.4889 ns | 0.4334 ns |  0.59 | 0.0051 |     - |     - |      32 B |\r\n```\r\n\r\n### FromBase64Transform\r\n\r\n#### TransformBlock\r\n\r\n```\r\n|   Method |      Mean |     Error |    StdDev | Ratio |  Gen 0 | Gen 1 | Gen 2 | Allocated |\r\n|--------- |----------:|----------:|----------:|------:|-------:|------:|------:|----------:|\r\n| Original | 199.08 ns | 1.0918 ns | 1.0212 ns |  1.00 | 0.0203 |     - |     - |     128 B |\r\n|       PR |  83.15 ns | 0.7017 ns | 0.6564 ns |  0.42 |      - |     - |     - |         - |\r\n\r\n```\r\n\r\n#### TransformFinalBlock\r\n\r\n```\r\n|   Method |      Mean |     Error |    StdDev | Ratio |  Gen 0 | Gen 1 | Gen 2 | Allocated |\r\n|--------- |----------:|----------:|----------:|------:|-------:|------:|------:|----------:|\r\n| Original | 207.60 ns | 2.1021 ns | 1.8635 ns |  1.00 | 0.0203 |     - |     - |     128 B |\r\n|       PR |  97.46 ns | 0.6792 ns | 0.6353 ns |  0.47 | 0.0050 |     - |     - |      32 B |\r\n\r\n```","Url":"https://github.com/dotnet/corefx/pull/38062","RelatedDescription":"Open PR \"Spanify Cryptography.Base64Transform\" (#38062)"},{"Id":"450350560","IsPullRequest":true,"CreatedAt":"2019-05-30T14:58:28","Actor":"MarcoRossignoli","Number":"38061","RawContent":null,"Title":"[System.Text.Json]Improve error output for unsupported scenarios in System.Text.Json.Serialization","State":"open","Body":"Contrib to https://github.com/dotnet/corefx/issues/37545\r\n\r\nfixes https://github.com/dotnet/corefx/issues/37885 polymorphic interface\r\nfixes https://github.com/dotnet/corefx/issues/37537 parameterless ctor\r\n\r\nException samples \r\n`System.InvalidOperationException : Deserialization of reference type without parameterless constructor is not supported. Type System.Text.Json.Serialization.Tests.ObjectTests+PublicParameterizedConstructorTestClass`  \r\n\r\n`System.InvalidOperationException : Deserialization of interface types is not supported. Type System.Text.Json.Serialization.Tests.PolymorphicTests+IThing`\r\n\r\ncc: @ahsonkhan @steveharter ","Url":"https://github.com/dotnet/corefx/pull/38061","RelatedDescription":"Open PR \"[System.Text.Json]Improve error output for unsupported scenarios in System.Text.Json.Serialization\" (#38061)"},{"Id":"450320879","IsPullRequest":true,"CreatedAt":"2019-05-30T14:19:02","Actor":"MarcoRossignoli","Number":"38060","RawContent":null,"Title":"[WIP][System.Text.Json]Improve error output for unsupported scenarios in System.Text.Json.Serialization: parameterless constructor","State":"closed","Body":"Contrib to https://github.com/dotnet/corefx/issues/37545\r\n\r\nException sample `System.InvalidOperationException : Deserialization of reference type without parameterless constructor is not supported. Type System.Text.Json.Serialization.Tests.ObjectTests+PublicParameterizedConstructorTestClass`\r\n\r\nSame behaviour of `ReflectionMaterializer`(Activator.CreateInstance) struct pass ref no.\r\n\r\ncc: @ahsonkhan @steveharter ","Url":"https://github.com/dotnet/corefx/pull/38060","RelatedDescription":"Closed or merged PR \"[WIP][System.Text.Json]Improve error output for unsupported scenarios in System.Text.Json.Serialization: parameterless constructor\" (#38060)"}],"ResultType":"GitHubIssue"},"Roslyn-Issues":{"Issues":[{"Id":"450617370","IsPullRequest":true,"CreatedAt":"2019-05-31T05:08:04","Actor":"jcouv","Number":"36081","RawContent":null,"Title":"Fix null reference in BindBase","State":"open","Body":"Fixes https://github.com/dotnet/roslyn/issues/29933","Url":"https://github.com/dotnet/roslyn/pull/36081","RelatedDescription":"Open PR \"Fix null reference in BindBase\" (#36081)"},{"Id":"450603754","IsPullRequest":false,"CreatedAt":"2019-05-31T03:57:15","Actor":"DavidKarlas","Number":"36080","RawContent":null,"Title":"\"Sequence contains no elements\" in AbstractSymbolCompletionProvider for shared files","State":"open","Body":"**Version Used**: \r\n3.1.0-beta4-19261-04+33cfe1a0905264d80633c5154de57de6c0bb94a0\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Create Shared Project and 2 Console projects\r\n2. Reference Shared Project from other 2 projects and add SomeClass.cs\r\n3. Type something in SomeClass.cs that would invoke code completion\r\n\r\n**Expected Behavior**:\r\nNo exception is thrown/logged\r\n**Actual Behavior**:\r\nOur log is being spammed by:\r\n```\r\nERROR [2019-05-30 12:11:17Z]: Roslyn non-fatal exception\r\nSystem.InvalidOperationException: Sequence contains no elements\r\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T] source) [0x00011] in /Users/builder/jenkins/workspace/build-package-osx-mono/2018-08/external/bockbuild/builds/mono-x64/external/corefx/src/System.Linq/src/System/Linq/First.cs:19 \r\n  at Microsoft.CodeAnalysis.Completion.Providers.AbstractSymbolCompletionProvider.CreateItems (System.Collections.Generic.Dictionary`2[TKey,TValue] originatingContextMap, System.Collections.Generic.Dictionary`2[TKey,TValue] invalidProjectMap, System.Collections.Generic.List`1[T] totalProjects, System.Boolean preselect, System.Collections.Immutable.ImmutableArray`1[T] inferredTypes) [0x0002a] in /_/src/Features/Core/Portable/Completion/Providers/AbstractSymbolCompletionProvider.cs:162 \r\n  at Microsoft.CodeAnalysis.Completion.Providers.AbstractSymbolCompletionProvider.GetItemsWorkerAsync (Microsoft.CodeAnalysis.Document document, System.Int32 position, Microsoft.CodeAnalysis.Options.OptionSet options, System.Boolean preselect, System.Threading.CancellationToken cancellationToken) [0x002b8] in /_/src/Features/Core/Portable/Completion/Providers/AbstractSymbolCompletionProvider.cs:352 \r\n  at Microsoft.CodeAnalysis.Completion.Providers.AbstractSymbolCompletionProvider.ProvideCompletionsAsync (Microsoft.CodeAnalysis.Completion.CompletionContext context) [0x001f2] in /_/src/Features/Core/Portable/Completion/Providers/AbstractSymbolCompletionProvider.cs:320 \r\n```\r\nI was able to reproduce this also on Windows(debugging VS) but apparently it's sent to Watson instead of logging into a file...","Url":"https://github.com/dotnet/roslyn/issues/36080","RelatedDescription":"Open issue \"\"Sequence contains no elements\" in AbstractSymbolCompletionProvider for shared files\" (#36080)"},{"Id":"450579351","IsPullRequest":false,"CreatedAt":"2019-05-31T01:55:47","Actor":"Trojaner","Number":"36079","RawContent":null,"Title":"??= operator in C# 8 marks parameter as unused","State":"open","Body":"Expected Behaviour: \r\nParameters reassigned with ??= should be marked as used and referenced.\r\n\r\nActual Behaviour:\r\nParameters reassigned with ??= are marked as unused.\r\n\r\nScreenshot 1: Parameter \"user\" is marked as \"used\" when not using ??= but the conventional way instead\r\n![grafik](https://user-images.githubusercontent.com/1809172/58676206-0970d780-8360-11e9-8c94-cef72a5cc1c3.png)\r\n\r\nScreenshot 2: Parameter \"user\" is marked as \"unused\" when using ??=\r\n![grafik](https://user-images.githubusercontent.com/1809172/58676217-168dc680-8360-11e9-811a-c50fd5b1d5a1.png)\r\n\r\n(Note: the \"user\" variable is referenced in code after the screenshots)","Url":"https://github.com/dotnet/roslyn/issues/36079","RelatedDescription":"Open issue \"??= operator in C# 8 marks parameter as unused\" (#36079)"},{"Id":"450571500","IsPullRequest":true,"CreatedAt":"2019-05-31T01:14:56","Actor":"chsienki","Number":"36078","RawContent":null,"Title":"Update implicity declared type expression nullability:","State":"open","Body":"Small fix for semantic model bug I found working on other correctness bits\r\n\r\n- When updating the implicit type in a declaration also update the bound type declaration nullability\r\n- Add tests","Url":"https://github.com/dotnet/roslyn/pull/36078","RelatedDescription":"Open PR \"Update implicity declared type expression nullability:\" (#36078)"},{"Id":"450556907","IsPullRequest":true,"CreatedAt":"2019-05-31T00:01:13","Actor":"dotnet-bot","Number":"36077","RawContent":null,"Title":"Merge master to features/param-nullchecking","State":"open","Body":"\nThis is an automatically generated pull request from master into features/param-nullchecking.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-features/param-nullchecking\ngit reset --hard upstream/features/param-nullchecking\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-features/param-nullchecking --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/36077","RelatedDescription":"Open PR \"Merge master to features/param-nullchecking\" (#36077)"},{"Id":"450556858","IsPullRequest":true,"CreatedAt":"2019-05-31T00:01:02","Actor":"dotnet-bot","Number":"36076","RawContent":null,"Title":"Merge master to features/lspSupport","State":"open","Body":"\nThis is an automatically generated pull request from master into features/lspSupport.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-features/lspSupport\ngit reset --hard upstream/features/lspSupport\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-features/lspSupport --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/36076","RelatedDescription":"Open PR \"Merge master to features/lspSupport\" (#36076)"},{"Id":"450543248","IsPullRequest":false,"CreatedAt":"2019-05-30T23:03:30","Actor":"ryzngard","Number":"36075","RawContent":null,"Title":"InlineRename with file rename doesn't work for linked documents","State":"open","Body":"#36041 introduces this new feature, but linked documents are not working. \r\n\r\nWe have a test for this, `RenameInLinkedFilesDoesNotCrash`, that currently has a comment references this issue to update the test when fixed. ","Url":"https://github.com/dotnet/roslyn/issues/36075","RelatedDescription":"Open issue \"InlineRename with file rename doesn't work for linked documents\" (#36075)"},{"Id":"450540259","IsPullRequest":false,"CreatedAt":"2019-05-30T22:51:22","Actor":"jasonmalinowski","Number":"36074","RawContent":null,"Title":"Deconstruct tuple drops await modifier on foreach","State":"open","Body":"Paste the following code into a C# 8 file:\r\n\r\n```\r\n            IAsyncEnumerable<(int foo, int bar)> enumerable = null;\r\n\r\n            await foreach (var tuple in enumerable)\r\n            {\r\n\r\n            }\r\n```\r\n\r\nIf you invoke the Deconstruct quick fix, we do something bad:\r\n\r\n![image](https://user-images.githubusercontent.com/201340/58670072-b9a7f700-82f2-11e9-881d-2a86db7446f2.png)\r\n\r\n(This bug courtesy of @DustinCampbell.)","Url":"https://github.com/dotnet/roslyn/issues/36074","RelatedDescription":"Open issue \"Deconstruct tuple drops await modifier on foreach\" (#36074)"},{"Id":"450522110","IsPullRequest":false,"CreatedAt":"2019-05-30T21:50:23","Actor":"jcouv","Number":"36073","RawContent":null,"Title":"Warn on misused of nullability attributes","State":"open","Body":"In `void M([DisallowNull]string x)` the attribute is redundant.\r\nSame in `void M<T>([DisallowNull]T t) where T : class` or `void M<T>([DisallowNull]T t) where T : struct`.\r\n\r\n`[MaybeNull]int` or `[MaybeNull]int?`.\r\n\r\nNote that some of those may be useful on `ref` parameters: `void M([DisallowNull]ref string? s)` or `void M([MaybeNull]ref string s)`.\r\n\r\nRelates to https://github.com/dotnet/roslyn/issues/36009 (Should [DisallowNull] apply to value types or nullable value types?)\r\n\r\nRelates to PR https://github.com/dotnet/roslyn/pull/35955","Url":"https://github.com/dotnet/roslyn/issues/36073","RelatedDescription":"Open issue \"Warn on misused of nullability attributes\" (#36073)"},{"Id":"450522001","IsPullRequest":false,"CreatedAt":"2019-05-30T21:50:04","Actor":"rowland-banks-abide","Number":"36072","RawContent":null,"Title":"MSBuildWorkspace: Loading a solution with a ProjectReference prevents compilation","State":"open","Body":"**Version Used**: \r\nMicrosoft.Build.Locator v1.2.2\r\nMicrosoft.CodeAnalysis v3.1.0\r\nMicrosoft.CodeAnalysis.Workspaces.MSBuild v3.1.0\r\n\r\n\r\n**Steps to Reproduce**:\r\n\r\n_**See attached \"RoslynTest.zip\" for Zip file demonstrating problem. Unzip to C:\\Source (or modify the code to point to correct location) and run RoslynTest.sln**_\r\n\r\n[RoslynTest.zip](https://github.com/dotnet/roslyn/files/3238867/RoslynTest.zip)\r\n\r\n1. Create a solution containing two netstandard2.0 libraries (A and B). Each solution should have a simple class in it.\r\n2. Execute the code below, and note that both projects compile.\r\n3. Add a ProjectReference so that B depends on A.\r\n4. Execute the code below and note that only project A compiles.\r\n\r\n```\r\nstatic async Task Main(string[] args)\r\n{\r\n    MSBuildLocator.RegisterDefaults();\r\n    using (var workspace = MSBuildWorkspace.Create())\r\n    {\r\n        workspace.WorkspaceFailed += (sender, workspaceFailedArgs) => WriteLine(workspaceFailedArgs.Diagnostic.Message);\r\n        var solution = await workspace.OpenSolutionAsync(@\"c:\\source\\ForRoslynTest\\ForRoslynTest.sln\");\r\n        WriteLine($\"Loaded solution {solution.FilePath}\");\r\n\r\n        var projectTree = workspace.CurrentSolution.GetProjectDependencyGraph();\r\n        foreach (var projectId in projectTree.GetTopologicallySortedProjects())\r\n        {\r\n            await CompileProject(workspace.CurrentSolution.GetProject(projectId));\r\n        }\r\n    }\r\n}\r\n\r\nprivate static async Task CompileProject(Project project)\r\n{\r\n    WriteLine($\"Compiling {project.Name}. It has {project.MetadataReferences.Count} metadata references.\");\r\n    var compilation = await project.GetCompilationAsync();\r\n    var errors = compilation.GetDiagnostics().Where(diagnostic => diagnostic.Severity == DiagnosticSeverity.Error);\r\n    if (errors.Any())\r\n    {\r\n        WriteLine($\"COMPILATION ERROR: {compilation.AssemblyName}: {errors.Count()} compilation errors: \\n\\t{string.Join(\"\\n\\t\", errors.Where(e => false).Select(e => e.ToString()))}\");\r\n    }\r\n    else\r\n    {\r\n        WriteLine($\"Project {project.Name} compiled with no errors\");\r\n    }\r\n}\r\n```\r\n\r\n**Expected Behavior**:\r\nBoth projects compile with 0 errors.\r\n\r\n**Actual Behavior**:\r\nProject B fails to compile. In addition, project B reports that it has 0 Metadata references (whereas it has 113 without the PackageReference)\r\n\r\nIn particular, I note the following output reported:\r\n```\r\nMsbuild failed when processing the file 'c:\\source\\ForRoslynTest\\DownstreamLibrary\\DownstreamLibrary.csproj' with message: C:\\Program Files\\dotnet\\sdk\\2.1.602\\Microsoft.Common.CurrentVersion.targets: (1548, 5): The \"Microsoft.Build.Tasks.ResolveNonMSBuildProjectOutput\" task could not be loaded from the assembly Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a.  Confirm that the <UsingTask> declaration is correct, that the assembly and all its dependencies are available, and that the task contains a public class that implements Microsoft.Build.Framework.ITask.\r\n\r\nFound project reference without a matching metadata reference: c:\\source\\ForRoslynTest\\CoreLibrary\\CoreLibrary.csproj\r\n\r\nLoaded solution c:\\source\\ForRoslynTest\\ForRoslynTest.sln\r\n\r\nCompiling CoreLibrary. It has 113 metadata references.\r\nProject CoreLibrary compiled with no errors\r\n\r\nCompiling DownstreamLibrary. It has 0 metadata references.\r\nCOMPILATION ERROR: DownstreamLibrary: 3 compilation errors:\r\n        c:\\source\\ForRoslynTest\\DownstreamLibrary\\Class1.cs(1,7): error CS0246: The type or namespace name 'System' could not be found (are you missing a using directive or an assembly reference?)\r\n        c:\\source\\ForRoslynTest\\DownstreamLibrary\\Class1.cs(5,18): error CS0518: Predefined type 'System.Object' is not defined or imported\r\n        c:\\source\\ForRoslynTest\\DownstreamLibrary\\Class1.cs(5,18): error CS1729: 'object' does not contain a constructor that takes 0 arguments\r\n```\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/roslyn/issues/36072","RelatedDescription":"Open issue \"MSBuildWorkspace: Loading a solution with a ProjectReference prevents compilation\" (#36072)"},{"Id":"450504213","IsPullRequest":false,"CreatedAt":"2019-05-30T21:00:15","Actor":"TonyValenti","Number":"36071","RawContent":null,"Title":"Object initializer syntax suggests assignment to Getter-Only Properties","State":"open","Body":"**Version Used**: \r\nVisual Studio 2019\r\n\r\n**Steps to Reproduce**:\r\n\r\nIf you have this class:\r\n````\r\npublic class Foo {\r\n  public string Name {get; set;}\r\n  public int Age {get; private set;}\r\n}\r\n````\r\n\r\nWhen you type:\r\n````\r\nvar F = new Foo() {\r\n  //Popup appears here\r\n````\r\nThe autocomplete popup lists Age as a member.  It shouldn't.  It can't be set.\r\n\r\n\r\n**Expected Behavior**:\r\nDon't suggest that I can assign to a getter only property.\r\n\r\n**Actual Behavior**:\r\nIt suggests that I assign to a getter only property.","Url":"https://github.com/dotnet/roslyn/issues/36071","RelatedDescription":"Open issue \"Object initializer syntax suggests assignment to Getter-Only Properties\" (#36071)"},{"Id":"450501839","IsPullRequest":true,"CreatedAt":"2019-05-30T20:54:08","Actor":"fayrose","Number":"36070","RawContent":null,"Title":"Merge master with param-nullchecking","State":"open","Body":"","Url":"https://github.com/dotnet/roslyn/pull/36070","RelatedDescription":"Open PR \"Merge master with param-nullchecking\" (#36070)"},{"Id":"450493882","IsPullRequest":false,"CreatedAt":"2019-05-30T20:33:28","Actor":"mikadumont","Number":"36069","RawContent":null,"Title":"Formatting of comments with Dotnet Format","State":"open","Body":"","Url":"https://github.com/dotnet/roslyn/issues/36069","RelatedDescription":"Open issue \"Formatting of comments with Dotnet Format\" (#36069)"},{"Id":"450492634","IsPullRequest":false,"CreatedAt":"2019-05-30T20:30:19","Actor":"mikadumont","Number":"36068","RawContent":null,"Title":"Remove unused references/nuget packages ","State":"open","Body":"**Version Used**: \r\nVisual Studio 2019\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. In the Solution Explorer, select one or more projects, solution folders or the root node of the solution, or alternatively, select the References node of a project.\r\n\r\n2. Do one of the following:\r\nA. Right-click the selection and choose an option to Remove Unused References in the context menu.\r\nB. Or a keyboard shortcut to Remove Unused References.\r\n\r\n3. When selecting Remove Unused References have a dialogue that displays all references that have no actual usages in source code in a tree view grouped by projects. By default, all references are selected for deletion. If necessary, deselect references that you want to keep.\r\n\r\n4. Then select update to remove the unused references/nuget packages. \r\n","Url":"https://github.com/dotnet/roslyn/issues/36068","RelatedDescription":"Open issue \"Remove unused references/nuget packages \" (#36068)"},{"Id":"450475657","IsPullRequest":true,"CreatedAt":"2019-05-30T19:47:29","Actor":"mavasani","Number":"36067","RawContent":null,"Title":"Add new analyzer API (DiagnosticSuppressor) to allow programmatic sup…","State":"open","Body":"…pression of analyzer and/or compiler non-error diagnostics\r\n\r\nFixes #20242 and #30172\r\n\r\nDetailed design proposal [here](https://gist.github.com/mavasani/fcac17a9581b5c54cef8a689eeec954a)","Url":"https://github.com/dotnet/roslyn/pull/36067","RelatedDescription":"Open PR \"Add new analyzer API (DiagnosticSuppressor) to allow programmatic sup…\" (#36067)"},{"Id":"450472602","IsPullRequest":false,"CreatedAt":"2019-05-30T19:39:17","Actor":"333fred","Number":"36066","RawContent":null,"Title":"Enable speculative snapshots in attributes","State":"open","Body":"Our current speculative strategy captures snapshots at positions in code, but it uses the containing symbol as an index for finding global states. Attributes do not have containing symbols, so it doesn't work for this scenario. We need to either support a null symbol as a key, or find a different method of storing the indexes.","Url":"https://github.com/dotnet/roslyn/issues/36066","RelatedDescription":"Open issue \"Enable speculative snapshots in attributes\" (#36066)"},{"Id":"450438148","IsPullRequest":false,"CreatedAt":"2019-05-30T18:14:01","Actor":"tmat","Number":"36065","RawContent":null,"Title":"ProjectExternalErrorReporter constructor throws NRE when running in tests","State":"open","Body":"The constructor of ExternalErrorDiagnosticUpdateSource throws when running in tests since `UIContextImpl` calls `(IVsMonitorSelection)ServiceProvider.GlobalProvider.GetService(typeof(IVsMonitorSelection)))`,\r\nwhich returns null.","Url":"https://github.com/dotnet/roslyn/issues/36065","RelatedDescription":"Open issue \"ProjectExternalErrorReporter constructor throws NRE when running in tests\" (#36065)"},{"Id":"450434875","IsPullRequest":false,"CreatedAt":"2019-05-30T18:06:03","Actor":"Logerfo","Number":"36064","RawContent":null,"Title":"Analyzer diagnostics not showing up in error view","State":"open","Body":"I have a solution with multiple projects, one of them is an analyzer, which is built first and used in all of the other projects. Since I updated from Visual Studio 2017 to 2019, build errors (or warnings) from my analyzer are not showing up in the error view, even though they are shown in the build output.\r\nI have updated from .NET standard 2.1 to 3.0 and from CodeAnalysis 2.10 to 3.1, but none of these updates seems to help. Am I missing something here? Thanks.","Url":"https://github.com/dotnet/roslyn/issues/36064","RelatedDescription":"Open issue \"Analyzer diagnostics not showing up in error view\" (#36064)"},{"Id":"450434767","IsPullRequest":false,"CreatedAt":"2019-05-30T18:05:49","Actor":"billwert","Number":"36063","RawContent":null,"Title":"Rename should be a no-op if the name is unchanged","State":"open","Body":"**Version Used**: \r\nMicrosoft Visual Studio Enterprise 2019 Int Preview\r\nVersion 16.2.0 Preview 2.0 [28928.284.d16.2stg]\r\nVisualStudio.16.IntPreview/16.2.0-pre.2.0+28928.284.d16.2stg\r\nMicrosoft .NET Framework\r\nVersion 4.8.03752\r\n**Steps to Reproduce**:\r\n\r\n1. Invoke a rename\r\n2. Hit enter \r\n\r\n**Expected Behavior**:\r\nNothing happens\r\n\r\n**Actual Behavior**:\r\nRename seems to happen. If I choose an item with many references, the wait for this to happen dialog will pop up.\r\n","Url":"https://github.com/dotnet/roslyn/issues/36063","RelatedDescription":"Open issue \"Rename should be a no-op if the name is unchanged\" (#36063)"},{"Id":"450433155","IsPullRequest":false,"CreatedAt":"2019-05-30T18:01:47","Actor":"tmat","Number":"36062","RawContent":null,"Title":"Tag compiler diagnostics with the phase they originated from","State":"open","Body":"Add a category (_syntactic_, _semantic_/_binding_, _emit_) to the diagnostics reported by the compiler.\r\n\r\nThis feature is needed to address the following issues:\r\nhttps://github.com/dotnet/roslyn/issues/36061\r\nhttps://github.com/dotnet/roslyn/issues/1400\r\nhttps://github.com/dotnet/roslyn/issues/3675\r\n","Url":"https://github.com/dotnet/roslyn/issues/36062","RelatedDescription":"Open issue \"Tag compiler diagnostics with the phase they originated from\" (#36062)"},{"Id":"450431774","IsPullRequest":false,"CreatedAt":"2019-05-30T17:58:31","Actor":"tmat","Number":"36061","RawContent":null,"Title":"EnC analyzer reports duplicate semantic diagnostics","State":"open","Body":"1) Debug the following console app \r\n```C#\r\n\t\tstatic void Main(string[] args)\r\n\t\t{\r\n\t\t    int a = 10; // breakpoint here\r\n\t\t}\r\n```\r\n\r\n2) Change the code to:\r\n```C#\r\n\t\tstatic void Main(string[] args)\r\n\t\t{\r\n\t\t    int a = 132408290348290;\r\n\t\t}\r\n```\r\n\t\t\r\n3) Press F10.\r\n\r\nThe error list contains duplicate semantic errors:\r\n\r\n![image](https://user-images.githubusercontent.com/41759/58601318-19dc6180-823d-11e9-87b4-a03a1291d2d9.png)\r\n\r\nThis is because the EnC analyzer reports all diagnostics returned by EmitDifference and some of them (syntactic and binding) have also been reported by the diagnostic analyzer. The solution would be to only report emit diagnostics from EnC. But the compiler currently does not tag diagnostics with the phase they originated from.\r\n\r\nSee also https://github.com/dotnet/roslyn/issues/1400#issuecomment-83884093 and https://github.com/dotnet/roslyn/issues/3675#issuecomment-163436367\r\n\r\nAn alternative solution would be to call `compilation.GetDiagnostics()` and if there are any, do not attempt to emit and do not report any diagnostics (they were already reported by the diagnostic analyzer). However, this would significantly affect performance of applying the change. This operation is blocking - the customer can't continue debugging without changes applied, so doing as little work as possible is critical. The only diagnostics that need to block change application are those that prevent emitting the symbols affected by the change. Diagnostics on any other symbols can be ignored.","Url":"https://github.com/dotnet/roslyn/issues/36061","RelatedDescription":"Open issue \"EnC analyzer reports duplicate semantic diagnostics\" (#36061)"},{"Id":"450426005","IsPullRequest":false,"CreatedAt":"2019-05-30T17:44:43","Actor":"avodovnik","Number":"36060","RawContent":null,"Title":"OverrideCompletionProvider should allow items to be added ","State":"open","Body":"**Version Used**: 3.1.0-beta4-19261-04\r\n\r\nVisual Studio for Mac has a _special_ behaviour that is specific to the way Xamarin/AppKit works. We offer the user \"overrides\" where they actually aren't overrides but _protocol member implementations_ (note: this is also _not_ an interface implementation but an Objective-C specific):\r\n\r\n![image](https://user-images.githubusercontent.com/1932563/58651162-d4896400-8310-11e9-8d9b-b209e69f3eb6.png)\r\n\r\nPicking `AddObserver` in the list above, would result in the following code being added:\r\n\r\n```csharp\r\n[Export(\"addObserver:forKeyPath:options:context:\")]\r\npublic void AddObserver(NSObject observer, NSString keyPath, NSKeyValueObservingOptions options, IntPtr context)\r\n{\r\n    throw new System.NotImplementedException();\r\n}\r\n```\r\n\r\nRecently, when moving away from [our old implementation of how we surface completion](http://source.monodevelop.com/#MonoDevelop.CSharpBinding/MonoDevelop.CSharp.Completion/CSharpCompletionTextEditorExtension.cs,466) items, we discovered that we can no longer add items to the `override` list. The assumption is that [this](http://source.roslyn.io/#Microsoft.CodeAnalysis.Features/Completion/CompletionServiceWithProviders.cs,263) and [this](http://source.roslyn.io/#Microsoft.CodeAnalysis.Features/Completion/Providers/AbstractOverrideCompletionProvider.cs,35) are the culprits. \r\n\r\nWe're happy to contribute the required change, but feel like it should be discussed first, to make sure we take the right approach. Here are some of the possible ones:\r\n\r\n1) Add a way to register completion providers in a way where we un-register the existing one. That way we could derive from `OverrideCompletionProvider` and extend it with our required logic.\r\n2) Enable `OverrideCompletionProvider` to also call down to _another_ set of MEF-provided providers, to retrieve additional items. \r\n3) Change [this](http://source.roslyn.io/#Microsoft.CodeAnalysis.Features/Completion/CompletionServiceWithProviders.cs,263) to take *all* contexts that had `IsExclusive` set to `true`. Potentially, there could be more metadata on the provider itself (i.e. a `Tag`) and we'd group exclusivity by the same tag as well).\r\n\r\nAre we missing something obvious? Is any of the above options something that would be acceptable to PR?","Url":"https://github.com/dotnet/roslyn/issues/36060","RelatedDescription":"Open issue \"OverrideCompletionProvider should allow items to be added \" (#36060)"},{"Id":"450399040","IsPullRequest":false,"CreatedAt":"2019-05-30T16:39:56","Actor":"333fred","Number":"36059","RawContent":null,"Title":"Assert that nullable snapshots are taken in advancing source position","State":"open","Body":"For the speculative semantic model, we are currently taking snapshots based on position in source. We should add asserts to these snapshots that we are always taking a snapshot of advancing positions (ie, we never take a snapshot of a previous position in source). This will influence correctness, as the state could change after we move forward.","Url":"https://github.com/dotnet/roslyn/issues/36059","RelatedDescription":"Open issue \"Assert that nullable snapshots are taken in advancing source position\" (#36059)"},{"Id":"450394567","IsPullRequest":false,"CreatedAt":"2019-05-30T16:30:44","Actor":"sharwell","Number":"36058","RawContent":null,"Title":"Auto-retry failed integration tests","State":"open","Body":"Some flakiness in individual integration tests is outside the current control of this repository. We should implement an auto-retry strategy consisting of the following:\r\n\r\n1. Run integration tests\r\n1. If the previous step fails, run integration tests again but exclude all tests that passed in the previous step\r\n1. Report failures from the second step to the build job\r\n\r\nThis change means the build will only fail if one or more tests fails twice in consecutive launches of the IDE for testing.","Url":"https://github.com/dotnet/roslyn/issues/36058","RelatedDescription":"Open issue \"Auto-retry failed integration tests\" (#36058)"},{"Id":"450366903","IsPullRequest":false,"CreatedAt":"2019-05-30T15:31:44","Actor":"CreateAndInject","Number":"36057","RawContent":null,"Title":"Scrollbar is nebulous in the diff window of vs2019","State":"open","Body":"It's the same project.\r\nvs2017:\r\n![vs2017](https://user-images.githubusercontent.com/2529999/58643969-ed0a7600-8332-11e9-8f0e-fb16dfbe9831.png)\r\n\r\nvs2019:\r\n![VS2019](https://user-images.githubusercontent.com/2529999/58644007-fa276500-8332-11e9-8df2-95eef0d12e71.png)\r\n\r\nvs2017 is clear, but vs2019 is nebulous.\r\n","Url":"https://github.com/dotnet/roslyn/issues/36057","RelatedDescription":"Open issue \"Scrollbar is nebulous in the diff window of vs2019\" (#36057)"},{"Id":"450248486","IsPullRequest":false,"CreatedAt":"2019-05-30T10:54:44","Actor":"markrendle","Number":"36056","RawContent":null,"Title":"Microsoft.VisualStudio.LanguageServices 3.1.0 on NuGet.org has dependencies that are not on NuGet.org","State":"open","Body":"The latest stable [Microsoft.VisualStudio.LanguageServices NuGet package](https://www.nuget.org/packages/Microsoft.VisualStudio.LanguageServices/3.1.0) has a dependency on one package that is not on NuGet.org at all, and another on one which is a whole major version behind.\r\n\r\n- [M.CA.EditorFeatures.Common 3.1.0](https://www.nuget.org/packages/Microsoft.CodeAnalysis.EditorFeatures.Common/) -> 404\r\n- [M.CA.EditorFeatures.Wpf 3.1.0](https://www.nuget.org/packages/Microsoft.CodeAnalysis.EditorFeatures.Wpf/) -> Latest version 2.8.2\r\n\r\n","Url":"https://github.com/dotnet/roslyn/issues/36056","RelatedDescription":"Open issue \"Microsoft.VisualStudio.LanguageServices 3.1.0 on NuGet.org has dependencies that are not on NuGet.org\" (#36056)"},{"Id":"450157002","IsPullRequest":true,"CreatedAt":"2019-05-30T06:45:20","Actor":"YairHalberstadt","Number":"36055","RawContent":null,"Title":"Don't capture BoundNode when creating a LazyNoneOperation","State":"open","Body":"Fixes #34918","Url":"https://github.com/dotnet/roslyn/pull/36055","RelatedDescription":"Open PR \"Don't capture BoundNode when creating a LazyNoneOperation\" (#36055)"},{"Id":"450102879","IsPullRequest":true,"CreatedAt":"2019-05-30T02:39:47","Actor":"sharwell","Number":"36054","RawContent":null,"Title":"Avoid renaming methods that don't change return type","State":"open","Body":"Fixes #33082","Url":"https://github.com/dotnet/roslyn/pull/36054","RelatedDescription":"Open PR \"Avoid renaming methods that don't change return type\" (#36054)"},{"Id":"450087033","IsPullRequest":false,"CreatedAt":"2019-05-30T01:27:11","Actor":"dftbaustin","Number":"36053","RawContent":null,"Title":"Error in code example in Wiki page (VB null condition example)","State":"open","Body":"On [this page on this repo's Wiki](https://github.com/dotnet/roslyn/wiki/New-Language-Features-in-VB-14#null-conditional-operators), the before-and-after examples don't match up. I created a [fork of the wiki on my account](https://github.com/dftbaustin/dotnet-roslyn-wiki.git) with the change. I can't submit a pull request on Wikis, so submitting this issue is the next best thing.\r\n\r\n**Code example before**:\r\n``` VB.NET\r\nDim x = customer.Address?.Country\r\n\r\n' is shorthand for\r\nDim _temp = customer.Address\r\nDim x = If(_temp IsNot Nothing, _temp.Address.Country, Nothing)\r\n```\r\n(`Address` is not a property of `customer.Address`)\r\n\r\n**Code example after**:\r\n``` VB.NET\r\nDim x = customer.Address?.Country\r\n\r\n' is shorthand for\r\nDim _temp = customer.Address\r\nDim x = If(_temp IsNot Nothing, _temp.Country, Nothing)\r\n```\r\n\r\n(`_temp.Address.Country` becomes `_temp.Country`)","Url":"https://github.com/dotnet/roslyn/issues/36053","RelatedDescription":"Open issue \"Error in code example in Wiki page (VB null condition example)\" (#36053)"},{"Id":"450081655","IsPullRequest":false,"CreatedAt":"2019-05-30T00:59:26","Actor":"jasonmalinowski","Number":"36052","RawContent":null,"Title":"GetTypeInfo returns NotNull for places where the variable isn't yet assigned","State":"open","Body":"Imagine this case:\r\n\r\n```\r\nstring? s;\r\nFoo(s);\r\n```\r\n\r\nWhen we call GetTypeInfo passing in the argument `s`, we get the flow state being NotNull. Although the question is somewhat meaningless in the case of an unassigned variable, it means GenerateMember invoked on Foo will generate the parameter with `string`. I'd propose that GetTypeInfo just returned the annotation in the case the variable is known to not be assigned.\r\n\r\nChatting with @333fred he observed the nullable analysis doesn't have access to definite analysis so that's why it's doing that. However we also observed that there's no way for the IDE to know _\teither_ what is going on here short of us calling GetDiagnostics() and manually looking for diagnostics about use of uninitialized variables.","Url":"https://github.com/dotnet/roslyn/issues/36052","RelatedDescription":"Open issue \"GetTypeInfo returns NotNull for places where the variable isn't yet assigned\" (#36052)"}],"ResultType":"GitHubIssue"},"CoreRT-Issues":{"Issues":[{"Id":"450408735","IsPullRequest":true,"CreatedAt":"2019-05-31T04:21:41","Actor":"Dotnet-GitSync-Bot","Number":"7471","RawContent":null,"Title":"Mirror changes from dotnet/corefx","State":"closed","Body":"This PR contains mirrored changes from dotnet/corefx\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub","Url":"https://github.com/dotnet/corert/pull/7471","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corefx\" (#7471)"},{"Id":"450547580","IsPullRequest":true,"CreatedAt":"2019-05-30T23:21:04","Actor":"Suchiman","Number":"7473","RawContent":null,"Title":"Port GC changes from coreclr - 10","State":"open","Body":"This port continues https://github.com/dotnet/corert/pull/7434\r\nPorting strategy: extracting patches via `format-patch` from coreclr, adjusting paths, then `am` them on corert.\r\n\r\n**Glossary:**\r\n- already merged: change already exists in corert\r\n- gc only port: change only affected the gc directory and patch applied with no conflicts\r\n- manual port: change applied with custom changes\r\n- omitted changes: contains changes to files that do not exists in corert and were discarded\r\n\r\n**Changes since [last commit](https://github.com/dotnet/coreclr/commit/9f38303221294f45740feefc1b6ddf72347ff882):**\r\n- https://github.com/dotnet/coreclr/commit/6a1c28f05642ac0420b78f35ad32a00b6aef0488 (gc only port)\r\n- https://github.com/dotnet/coreclr/commit/73ef3c13c9b710cb04b67a904b098fb196c224c7 (gc only port, omitted changes)\r\n- https://github.com/dotnet/coreclr/commit/00e7aa00a42debda47a7dbe2b54e924670eaefdd ([already merged](https://github.com/dotnet/corert/pull/4627))\r\n- https://github.com/dotnet/coreclr/commit/5b10f0eb85d8e8ccdcf9b5e38e5dd372e241e24e (gc only port, omitted changes)\r\n- https://github.com/dotnet/coreclr/commit/a7d801aa30e40c6e01536dd0355199842ee5e4c8 (gc only port)\r\n- https://github.com/dotnet/coreclr/commit/165ffa6a0bb2d8b57e83aa95a395a798ad5f5f4f (manual port)\r\n- https://github.com/dotnet/coreclr/commit/bd3424913138d10f9c4fdb6176fb471e8d1ba1d7 (manual port)\r\n- https://github.com/dotnet/coreclr/commit/5b02b0104f3ceba491b7b25fcb4d997e477d2840 (gc only port)\r\n- https://github.com/dotnet/coreclr/commit/558f8e99680ab5b6ea9d4796236e12439363657f (gc only port)\r\n- https://github.com/dotnet/coreclr/commit/0b86feb1d2830cc1de5db16ee86c0998c01ca30a (gc only port)\r\n- https://github.com/dotnet/coreclr/commit/e64cbb5c722ab9b7d93ca32445e17df1115be70c (manual port)","Url":"https://github.com/dotnet/corert/pull/7473","RelatedDescription":"Open PR \"Port GC changes from coreclr - 10\" (#7473)"},{"Id":"449790158","IsPullRequest":true,"CreatedAt":"2019-05-30T20:47:37","Actor":"trylek","Number":"7465","RawContent":null,"Title":"CPAOT fixes for Linux","State":"closed","Body":"I found out that the R2R I was producing with CPAOT\r\nwas crashing in CoreCLR PAL during memory mapping and\r\nit silently switched over to runtime JIT without any\r\nindications of doing so.\r\n\r\nThe problem is that the relative offset of all section\r\nstart RVA's within a page must match the corresponding\r\nfile offsets. As PEBuilder doesn't support this logic,\r\nI ended up copying a bunch of enumerations from the\r\nrelated CoreFX code and I added logic to patch the\r\nsection headers manually. At some point we might want\r\nto flow some of these changes back to the CoreFX repo.\r\n\r\nI have also moved the machine OS override logic to\r\nR2RPEBuilder for better encapsulation. As a side effect\r\nof the TargetBuilder propagatioin I have fixed code\r\npadding to select the proper instruction on all\r\narchitectures.\r\n\r\nThanks\r\n\r\nTomas","Url":"https://github.com/dotnet/corert/pull/7465","RelatedDescription":"Closed or merged PR \"CPAOT fixes for Linux\" (#7465)"},{"Id":"450411333","IsPullRequest":true,"CreatedAt":"2019-05-30T17:09:07","Actor":"MichalStrehovsky","Number":"7472","RawContent":null,"Title":"Selective integration to nmirror","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/7472","RelatedDescription":"Closed or merged PR \"Selective integration to nmirror\" (#7472)"},{"Id":"450353364","IsPullRequest":true,"CreatedAt":"2019-05-30T16:55:27","Actor":"MichalStrehovsky","Number":"7469","RawContent":null,"Title":"Enable devirtualization/stackalloc optimization with RyuJIT","State":"closed","Body":"(Implementation for both CPAOT and full AOT, since the non-shared parts are just a couple lines)\r\n\r\nWe've had a TODO for a while that disabled devirtualization on valuetype methods because we didn't have a representation of unboxing thunks in the type system (the result of a devirtualization that lands on a valuetype method is an unboxing thunk).\r\n\r\nWith this, I'm adding an unboxing thunk `MethodDesc` _within the JitInterface only_. Unboxing thunks are weird enough that we don't want them to roam around the whole system, but if they're just something we hand to RyuJIT when needed and convert them back to the real thing when we're done, it's less of a trouble. I'm fully expecting that we're going to see these escaping into the dependency system from time to time, causing bugs. But that's life.\r\n\r\n* Most of the commit is a general purpose `MethodDelegator` class that delegates calls to a different `MethodDesc`.\r\n* We use the `MethodDelegator` within the JitInterface to create a wrapper for non-unboxing methods to represent an unboxing thunk.\r\n* We make it so that the unboxing wrapper is returned from `resolveVirtualMethod` when the result of resolution is a valuetype method.\r\n* We then make it possible for RyuJIT to unwrap it with `getUnboxedEntry`\r\n* We also unwrap it in `getCallInfo` so that it doesn't get into the dependency system.\r\n\r\nFixes #7463.","Url":"https://github.com/dotnet/corert/pull/7469","RelatedDescription":"Closed or merged PR \"Enable devirtualization/stackalloc optimization with RyuJIT\" (#7469)"},{"Id":"449590916","IsPullRequest":false,"CreatedAt":"2019-05-30T16:55:26","Actor":"jkotas","Number":"7463","RawContent":null,"Title":"Missing devirtualization + conversion to stackallocation optimization","State":"closed","Body":"```\r\nusing System;\r\n\r\ninterface IMyInterface\r\n{\r\n    void foo();\r\n}\r\n\r\nstruct MyStruct : IMyInterface\r\n{\r\n    public void foo() { }\r\n}\r\n\r\nclass Program\r\n{\r\n    static void Work<T>(T s)\r\n    {\r\n        if (s is IMyInterface) ((IMyInterface)s).foo();\r\n    }\r\n\r\n    static void Main(string[] args)\r\n    {\r\n        for (int i = 0; i < 10000000; i++)\r\n            Work<MyStruct>(default);\r\n        Console.WriteLine(GC.CollectionCount(0));\r\n    }\r\n}\r\n```\r\n\r\n`dotnet publish -c Release -r win-x64`\r\nActual result: 57\r\nExpected result: 0","Url":"https://github.com/dotnet/corert/issues/7463","RelatedDescription":"Closed issue \"Missing devirtualization + conversion to stackallocation optimization\" (#7463)"},{"Id":"450358407","IsPullRequest":true,"CreatedAt":"2019-05-30T16:55:17","Actor":"stephentoub","Number":"7470","RawContent":null,"Title":"Expose Environment.TickCount64","State":"closed","Body":"Contributes to https://github.com/dotnet/corefx/issues/35499","Url":"https://github.com/dotnet/corert/pull/7470","RelatedDescription":"Closed or merged PR \"Expose Environment.TickCount64\" (#7470)"},{"Id":"449918770","IsPullRequest":true,"CreatedAt":"2019-05-30T12:32:49","Actor":"Dotnet-GitSync-Bot","Number":"7467","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @jkotas","Url":"https://github.com/dotnet/corert/pull/7467","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7467)"},{"Id":"450157595","IsPullRequest":false,"CreatedAt":"2019-05-30T06:47:15","Actor":"lukaszorg","Number":"7468","RawContent":null,"Title":"Cannot build app package due to nutc_driver.exe 1.7.6 out of memory error ","State":"open","Body":"Creating an App Package for publication in the store results in the following errors:\r\n\r\nError: NUTC300F:Internal Compiler Error: Native compilation failed due to out of memory error <our>.App\r\nError ILT0005: 'C:\\Program Files (x86)\\Microsoft SDKs\\UWPNuGetPackages\\microsoft.net.native.compiler\\1.7.6\\tools\\x64\\ilc\\Tools\\nutc_driver.exe @\"C:\\Users\\myself\\<path>\\<to>\\<our>.App\\obj\\x64\\Release\\ilc\\intermediate\\MDIL\\<our>.App.rsp\"' returned exit code 1 <our>.App\r\n\r\nWe are targeting Surface Hub (Creators Update 1703) so we cannot use newer version of microsoft.net.native.compiler.  \r\nWe have found not documented parameter for nutc_driver (/d2threads1) that helps building the solution on local machines. \r\nIs there any way to pass this flag on build agents? \r\nAre there any other workarounds?\r\n","Url":"https://github.com/dotnet/corert/issues/7468","RelatedDescription":"Open issue \"Cannot build app package due to nutc_driver.exe 1.7.6 out of memory error \" (#7468)"},{"Id":"449916034","IsPullRequest":true,"CreatedAt":"2019-05-29T20:01:50","Actor":"MichalStrehovsky","Number":"7466","RawContent":null,"Title":"Delete netci.groovy","State":"closed","Body":"Bye Jenkins.","Url":"https://github.com/dotnet/corert/pull/7466","RelatedDescription":"Closed or merged PR \"Delete netci.groovy\" (#7466)"},{"Id":"449601675","IsPullRequest":true,"CreatedAt":"2019-05-29T11:55:19","Actor":"jkotas","Number":"7464","RawContent":null,"Title":"Print descriptive error for GeneratePackageOnBuild","State":"closed","Body":"Fixes #7460","Url":"https://github.com/dotnet/corert/pull/7464","RelatedDescription":"Closed or merged PR \"Print descriptive error for GeneratePackageOnBuild\" (#7464)"},{"Id":"449495977","IsPullRequest":false,"CreatedAt":"2019-05-29T11:55:19","Actor":"timmydo","Number":"7460","RawContent":null,"Title":"Publish native shared library fails because project.deps.json not found","State":"closed","Body":"csproj:\r\n```\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <OutputType>Library</OutputType>\r\n    <GeneratePackageOnBuild>true</GeneratePackageOnBuild>\r\n    <TargetFramework>netstandard2.0</TargetFramework>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.DotNet.ILCompiler\" Version=\"1.0.0-alpha-*\" />\r\n  </ItemGroup>\r\n</Project>\r\n\r\n```\r\n\r\nprogram.cs:\r\n```\r\nusing System;\r\n\r\nnamespace System.Runtime.InteropServices\r\n{\r\n    [AttributeUsage(AttributeTargets.Method)]\r\n    public sealed class NativeCallableAttribute : Attribute\r\n    {\r\n        public string EntryPoint;\r\n        public CallingConvention CallingConvention;\r\n        public NativeCallableAttribute() { }\r\n    }\r\n}\r\n\r\nnamespace BlahBlah\r\n{\r\n    using System;\r\n    using System.Runtime.InteropServices;\r\n\r\n    public static class NativeMethods\r\n    {\r\n        [NativeCallable(EntryPoint = \"Blah\", CallingConvention = CallingConvention.StdCall)]\r\n        public static void Blah(IntPtr blah)\r\n        {\r\n        }\r\n    }\r\n}\r\n\r\n\r\n```\r\n\r\n\r\n```\r\nC:\\Users\\timmydo\\source\\repos\\corert1\\corert1\r\nλ  dotnet publish /p:NativeLib=Shared -r win-x64 -c Debug\r\nMicrosoft (R) Build Engine version 16.2.0-preview-19274-01+7708b265e for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  Restore completed in 758.81 ms for C:\\Users\\timmydo\\source\\repos\\corert1\\corert1\\corert1.csproj.\r\n  Generating compatible native code. To optimize for size or speed, visit https://aka.ms/OptimizeCoreRT\r\n     Creating library bin\\Debug\\netstandard2.0\\win-x64\\native\\corert1.lib and object bin\\Debug\\netstandard2.0\\win-x64\\native\\corert1.exp\r\nC:\\Program Files\\dotnet\\sdk\\3.0.100-preview6-012078\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Publish.targets(152,5): error MSB3030: Could not copy the file \"C:\\Users\\timmydo\\source\\repos\\corert1\\corert1\\bin\\Debug\\netstandard2.0\\win-x64\\corert1.deps.json\" because it was not found. [C:\\Users\\timmydo\\source\\repos\\corert1\\corert1\\corert1.csproj]\r\n```\r\n\r\nIt seems the culprit is GeneratePackagesOnBuild. If you remove that, it works.","Url":"https://github.com/dotnet/corert/issues/7460","RelatedDescription":"Closed issue \"Publish native shared library fails because project.deps.json not found\" (#7460)"},{"Id":"449548102","IsPullRequest":true,"CreatedAt":"2019-05-29T04:33:43","Actor":"Dotnet-GitSync-Bot","Number":"7461","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @VSadov @stephentoub","Url":"https://github.com/dotnet/corert/pull/7461","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7461)"},{"Id":"449473749","IsPullRequest":true,"CreatedAt":"2019-05-29T00:44:47","Actor":"Dotnet-GitSync-Bot","Number":"7459","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @jkotas @marek-safar","Url":"https://github.com/dotnet/corert/pull/7459","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7459)"},{"Id":"449408805","IsPullRequest":true,"CreatedAt":"2019-05-28T20:55:22","Actor":"Dotnet-GitSync-Bot","Number":"7458","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @EgorBo @MarcoRossignoli","Url":"https://github.com/dotnet/corert/pull/7458","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7458)"},{"Id":"448964820","IsPullRequest":true,"CreatedAt":"2019-05-28T20:55:07","Actor":"jkotas","Number":"7454","RawContent":null,"Title":"Fix superfluous delegate allocations in Unix WaitSubsystem","State":"closed","Body":"Fixes #7452","Url":"https://github.com/dotnet/corert/pull/7454","RelatedDescription":"Closed or merged PR \"Fix superfluous delegate allocations in Unix WaitSubsystem\" (#7454)"},{"Id":"448595379","IsPullRequest":false,"CreatedAt":"2019-05-28T20:55:07","Actor":"jkotas","Number":"7452","RawContent":null,"Title":"Waiting on WaitHandle allocates on Unix","State":"closed","Body":"Repro:\r\n\r\n```\r\nusing System;\r\nusing System.Threading;\r\n\r\nclass Program\r\n{\r\n    static EventWaitHandle e = new EventWaitHandle(false, EventResetMode.AutoReset);\r\n\r\n    static void Work()\r\n    {\r\n        for (; ; ) e.Set();\r\n    }\r\n\r\n    static void Main(string[] args)\r\n    {\r\n        new Thread(Work).Start();\r\n\r\n        int start = Environment.TickCount;\r\n        for (int i = 0; i < 1000000; i++)\r\n        {\r\n            e.WaitOne();\r\n        }\r\n        int end = Environment.TickCount;\r\n        Console.WriteLine($\"Time: {end-start}\");\r\n        Console.WriteLine($\"GCs: {GC.CollectionCount(0)}\");\r\n    }\r\n}\r\n```\r\n\r\nExpected result: GCs: 0\r\nActual result: GCs: 30+","Url":"https://github.com/dotnet/corert/issues/7452","RelatedDescription":"Closed issue \"Waiting on WaitHandle allocates on Unix\" (#7452)"},{"Id":"449179795","IsPullRequest":true,"CreatedAt":"2019-05-28T15:30:22","Actor":"Dotnet-GitSync-Bot","Number":"7457","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub","Url":"https://github.com/dotnet/corert/pull/7457","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7457)"},{"Id":"449038942","IsPullRequest":true,"CreatedAt":"2019-05-28T06:28:24","Actor":"Dotnet-GitSync-Bot","Number":"7456","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @danmosemsft","Url":"https://github.com/dotnet/corert/pull/7456","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7456)"},{"Id":"449012492","IsPullRequest":true,"CreatedAt":"2019-05-27T23:41:22","Actor":"tonerdo","Number":"7455","RawContent":null,"Title":"[Intepreter] Method Call","State":"open","Body":"This WIP PR calling static or non-virtual instance methods. It adds support for the following opcode:\r\n\r\n* `call`\r\n\r\nwhich should allow methods like the following to be interpreted:\r\n\r\n```csharp\r\npublic static void CallMethod()\r\n{\r\n    Console.WriteLine(\"Hello World Intepreted\");\r\n}\r\n```\r\n\r\nAt this time it doesn't actually work, it doesn't throw an error either nor does the program return a non-zero exit code. I need help figuring out what is wrong.\r\n\r\ncc @jkotas @MichalStrehovsky ","Url":"https://github.com/dotnet/corert/pull/7455","RelatedDescription":"Open PR \"[Intepreter] Method Call\" (#7455)"},{"Id":"448546712","IsPullRequest":false,"CreatedAt":"2019-05-27T13:39:53","Actor":"zhangchaoza","Number":"7451","RawContent":null,"Title":"libucrt.lib error","State":"closed","Body":"When I compile a application on Windows  ,I get this error:\r\n\r\n`LINK : fatal error LNK1104: 无法打开文件“libucrt.lib”`\r\n\r\nDetails:\r\n\r\n```\r\nD:\\Source\\GitHub\\zhangchao\\corert-samples\\MakeGenericMethodDemo\\MakeGenericMethodDemo.csproj 的还原在 74.63 ms 内完成。\r\nC:\\Program Files\\dotnet\\sdk\\3.0.100-preview5-011568\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.RuntimeIdentifierInference.targets(157,5): message NETSDK1057: 你正在使用 .NET Core 的预览版。请查看 https://aka.ms/dotnet-core-preview [D:\\Source\\GitHub\\zhangchao\\corert-samples\\MakeGenericMethodDemo\\MakeGenericMethodDemo.csproj]\r\n  MakeGenericMethodDemo -> D:\\Source\\GitHub\\zhangchao\\corert-samples\\MakeGenericMethodDemo\\bin\\Release\\netcoreapp3.0\\win-x64\\MakeGenericMethodDemo.dll\r\nLINK : fatal error LNK1104: 无法打开文件“libucrt.lib” [D:\\Source\\GitHub\\zhangchao\\corert-samples\\MakeGenericMethodDemo\\MakeGenericMethodDemo.csproj]\r\nC:\\Users\\zacka\\.nuget\\packages\\microsoft.dotnet.ilcompiler\\1.0.0-alpha-27527-01\\build\\Microsoft.NETCore.Native.targets(333,5): error MSB3073: 命令“\"C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\bin\\Hostx64\\x64\\link.exe\"  @\"obj\\Release\\netcoreapp3.0\\win-x64\\native\\link.rsp\"”已退出，代码为 1104。 [D:\\Source\\GitHub\\zhangchao\\corert-samples\\MakeGenericMethodDemo\\MakeGenericMethodDemo.csproj]\r\n```\r\n\r\nOS:win10 18898.1000\r\ndotnet core:3.0.100-preview5-011568\r\ncorert:1.0.0-alpha-27527-01\r\nvs:vs2017 \r\n\r\nIs there any ways to resolve this error?","Url":"https://github.com/dotnet/corert/issues/7451","RelatedDescription":"Closed issue \"libucrt.lib error\" (#7451)"},{"Id":"448624826","IsPullRequest":false,"CreatedAt":"2019-05-27T00:41:54","Actor":"KodrAus","Number":"7453","RawContent":null,"Title":"ASP.NET Core 3.0 hits GetRuntimeInterfaceMap() is not supported on this runtime","State":"open","Body":"Using the preview .NET SDK `3.0.100-preview5-011568` with target framework: `netcoreapp3.0`.\r\n\r\nIt looks like the latest preview versions of ASP.NET Core MVC use `GetRuntimeInterfaceMap`, which isn't supported by CoreRT:\r\n\r\n```\r\nSystem.PlatformNotSupportedException: GetRuntimeInterfaceMap() is not supported on this runtime.\r\n   at System.Reflection.Runtime.TypeInfos.RuntimeTypeInfo.GetInterfaceMap(Type) + 0x4f\r\n   at System.Reflection.RuntimeReflectionExtensions.GetRuntimeInterfaceMap(TypeInfo, Type) + 0x8b\r\n   at Microsoft.Extensions.Internal.AwaitableInfo.IsTypeAwaitable(Type, AwaitableInfo&) + 0x3b1\r\n   at Microsoft.Extensions.Internal.CoercedAwaitableInfo.IsTypeAwaitable(Type, CoercedAwaitableInfo&) + 0x3d\r\n   at Microsoft.Extensions.Internal.ObjectMethodExecutor..ctor(MethodInfo, TypeInfo, Object[]) + 0x163\r\n   at Microsoft.Extensions.Internal.ObjectMethodExecutor.Create(MethodInfo, TypeInfo, Object[]) + 0x75\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvokerCache.GetCachedResult(ControllerContext) + 0x156\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvokerProvider.OnProvidersExecuting(ActionInvokerProviderContext) + 0x148\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ActionInvokerFactory.CreateInvoker(ActionContext) + 0x8f\r\n```\r\n\r\nRight now, I'm only hitting this on _async_ action results. So:\r\n\r\n```csharp\r\npublic async Task<ActionResult> Set(string id)\r\n{\r\n    await SomeCall(id);\r\n    return Ok();\r\n}\r\n```\r\n\r\nwill hit this, but something like:\r\n\r\n```csharp\r\npublic ActionResult Set(string id)\r\n{\r\n    // Where `Defer` captures a `Action<Task>` that is executed\r\n    // in the `OnActionExecuted` call\r\n    return Defer(async () => await SomeCall(id));\r\n}\r\n```\r\n\r\nwill execute successfully.","Url":"https://github.com/dotnet/corert/issues/7453","RelatedDescription":"Open issue \"ASP.NET Core 3.0 hits GetRuntimeInterfaceMap() is not supported on this runtime\" (#7453)"},{"Id":"448520212","IsPullRequest":true,"CreatedAt":"2019-05-26T05:45:17","Actor":"Dotnet-GitSync-Bot","Number":"7450","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub","Url":"https://github.com/dotnet/corert/pull/7450","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7450)"},{"Id":"448356067","IsPullRequest":true,"CreatedAt":"2019-05-25T18:34:42","Actor":"Dotnet-GitSync-Bot","Number":"7449","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @safern","Url":"https://github.com/dotnet/corert/pull/7449","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7449)"},{"Id":"448322147","IsPullRequest":true,"CreatedAt":"2019-05-25T00:10:07","Actor":"nattress","Number":"7448","RawContent":null,"Title":"Restore CoreCLRRuntime on Linux","State":"closed","Body":"When running tests, invoke the test build to restore the runtime / corefx / corerun to a well known folder needed to run Ready-to-run tests against.\r\n\r\nThe actual running of R2R tests is not enabled yet since we need to fix an issue with PE section virtual address offsets","Url":"https://github.com/dotnet/corert/pull/7448","RelatedDescription":"Closed or merged PR \"Restore CoreCLRRuntime on Linux\" (#7448)"},{"Id":"448192547","IsPullRequest":true,"CreatedAt":"2019-05-24T17:01:11","Actor":"Dotnet-GitSync-Bot","Number":"7447","RawContent":null,"Title":"Mirror changes from dotnet/coreclr,corefx","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr,corefx\n\n\n**Please REBASE this PR when merging**\n\n cc @dotnet-maestro-bot","Url":"https://github.com/dotnet/corert/pull/7447","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr,corefx\" (#7447)"},{"Id":"447805291","IsPullRequest":true,"CreatedAt":"2019-05-24T16:07:28","Actor":"trylek","Number":"7443","RawContent":null,"Title":"CPAOT large version bubble bugfixes","State":"closed","Body":"I have finally identified the reason for various recent inconsistencies\r\nwe were recently hitting in large version bubble testing. As the\r\nR2R major version number was recently bumped to 3 in CoreCLR, it\r\ngot out of sync with the value 2 we have in CoreClrRuntime used\r\nfor CPAOT testing in the CoreRT repo. For this reason all recent\r\ntesting performed against the CoreCLR version of Core_Root was\r\nsilently switching over to JIT; this included my recent local\r\nlarge version bubble testing - while R2RDump was dumping the R2R\r\nfile content correctly and let me fix most issues, some problems\r\nnaturally remained and only popped up at runtime:\r\n\r\n1) NewArrayFixupSignature wasn't properly switching over to the\r\ninner signature context when emitting the array type signature.\r\n\r\n2) SignatureBuilder was emitting incorrect signature for fields\r\non instantiated types (this only popped up after inlining parts\r\nof CoreLib into the unit test).\r\n\r\n3) In SignatureContext, we should call the token resolution logic\r\nwhen determining field tokens as for fields encoded using refs\r\nthe reference module is the module containing the ref, not\r\nnecessarily the reference module for its owning type.\r\n\r\n4) In CorInfoImpl.ReadyToRun, the logic for encoding string literals\r\nwas incorrect in large version bubble mode in the presence of\r\ninlining - we need to use the context module passed along with the\r\nstring token, not the input module.\r\n\r\n5) ManifestMetadataTableNode was incorrectly encoding public key\r\ntokens for the AssemblyRefs.\r\n\r\n6) I previously overlooked the fact that the BadImageFormatException\r\nthrown for native assemblies is a variation of the type local\r\nto TypeSystemException.\r\n\r\nThanks\r\n\r\nTomas\r\n\r\nP.S. With this change the CoreCLR JIT test suite has about 93% pass\r\nrate. I suspect I understand some of the remaining failures but\r\nI wanted to send this our early as I'm going to be mostly OOF\r\nfor the rest of this week.\r\n","Url":"https://github.com/dotnet/corert/pull/7443","RelatedDescription":"Closed or merged PR \"CPAOT large version bubble bugfixes\" (#7443)"},{"Id":"447966173","IsPullRequest":true,"CreatedAt":"2019-05-24T14:08:31","Actor":"Dotnet-GitSync-Bot","Number":"7446","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @jkotas @safern","Url":"https://github.com/dotnet/corert/pull/7446","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7446)"},{"Id":"447913967","IsPullRequest":true,"CreatedAt":"2019-05-24T03:44:16","Actor":"Dotnet-GitSync-Bot","Number":"7445","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @davidwrighton","Url":"https://github.com/dotnet/corert/pull/7445","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7445)"},{"Id":"447842862","IsPullRequest":true,"CreatedAt":"2019-05-24T01:40:30","Actor":"nattress","Number":"7444","RawContent":null,"Title":"Update CoreCLR and framework for R2R tests","State":"closed","Body":"In Preview5, the R2R format version was bumped to 3.0. Roll forward to 3.0 and test against a more recent runtime that supports 3.0 ready-to-run image format.","Url":"https://github.com/dotnet/corert/pull/7444","RelatedDescription":"Closed or merged PR \"Update CoreCLR and framework for R2R tests\" (#7444)"}],"ResultType":"GitHubIssue"},"SDK-Issues":{"Issues":[{"Id":"450525123","IsPullRequest":true,"CreatedAt":"2019-05-31T04:37:01","Actor":"dsplaisted","Number":"3282","RawContent":null,"Title":"Better test logging","State":"closed","Body":"This PR removes all direct uses of the CLI Utils `Command` class, and instead routes them through the SDK's `TestCommand`.  This will log the start info, STDOUT, and STDERR.\r\n\r\nThis will, for example, make it a lot easier to see what the problem is from the test logs when a test fails because the right shared framework isn't installed.  The error information in that case goes to STDERR, which a lot of the tests which used `Command.Create` weren't capturing.\r\n\r\nFYI @dotnet/dotnet-cli, we should continue to follow the new pattern of using `DotnetCommand` and `RunExeCommand` instead of `Command.Create` in future tests.","Url":"https://github.com/dotnet/sdk/pull/3282","RelatedDescription":"Closed or merged PR \"Better test logging\" (#3282)"},{"Id":"450571724","IsPullRequest":true,"CreatedAt":"2019-05-31T01:15:56","Actor":"peterhuene","Number":"3283","RawContent":null,"Title":"Fix filtering of satellite assemblies when publishing for netcoreapp3.0.","State":"open","Body":"This PR fixes filtering of satellite assemblies when publishing an\r\napplication targeting netcoreapp3.0.\r\n\r\nAn incorrect property name in the `_FilterSatelliteResourcesForPublish` target\r\nwas causing the satellite filtering done for publish to have no effect.\r\n\r\nThis was only a problem when not reusing the build output for publish;\r\nunfortunately this is currently the case for netcoreapp3.0 targeted\r\napplications due to references that are marked as `PrivateAssets=\"all\"`.\r\n\r\nThis PR fixes the property name and adds test coverage for publishing\r\nwhen targeting netcoreapp3.0 with filtered satellite assemblies.\r\n\r\nFixes #3277.","Url":"https://github.com/dotnet/sdk/pull/3283","RelatedDescription":"Open PR \"Fix filtering of satellite assemblies when publishing for netcoreapp3.0.\" (#3283)"},{"Id":"450457056","IsPullRequest":true,"CreatedAt":"2019-05-30T21:22:34","Actor":"fadimounir","Number":"3280","RawContent":null,"Title":"Fix property name in error messages","State":"closed","Body":"Change `ReadyToRun` to `PublishReadyToRun` in error messages","Url":"https://github.com/dotnet/sdk/pull/3280","RelatedDescription":"Closed or merged PR \"Fix property name in error messages\" (#3280)"},{"Id":"450472482","IsPullRequest":true,"CreatedAt":"2019-05-30T19:38:55","Actor":"fadimounir","Number":"3281","RawContent":null,"Title":"Refactor ComputeFilesToPublish to enable ILLinker and R2R for packaging projects","State":"open","Body":"Packaging projects depend on ComputeFilesToPublish only instead of ComputeAndCopyFilesToPublishDirectory, so this refactoring will enable R2R and ILLinker to execute.","Url":"https://github.com/dotnet/sdk/pull/3281","RelatedDescription":"Open PR \"Refactor ComputeFilesToPublish to enable ILLinker and R2R for packaging projects\" (#3281)"},{"Id":"450071695","IsPullRequest":true,"CreatedAt":"2019-05-30T17:40:01","Actor":"livarcocc","Number":"3274","RawContent":null,"Title":"Merge release/2.2.2xx into release/2.2.3xx","State":"closed","Body":"","Url":"https://github.com/dotnet/sdk/pull/3274","RelatedDescription":"Closed or merged PR \"Merge release/2.2.2xx into release/2.2.3xx\" (#3274)"},{"Id":"450070741","IsPullRequest":true,"CreatedAt":"2019-05-30T17:39:42","Actor":"livarcocc","Number":"3273","RawContent":null,"Title":"Merge release/2.1.6xx into release/2.1.7xx","State":"closed","Body":"","Url":"https://github.com/dotnet/sdk/pull/3273","RelatedDescription":"Closed or merged PR \"Merge release/2.1.6xx into release/2.1.7xx\" (#3273)"},{"Id":"450415518","IsPullRequest":true,"CreatedAt":"2019-05-30T17:19:33","Actor":"sbomer","Number":"3279","RawContent":null,"Title":"Set ILLink defaults","State":"open","Body":"These defaults root the non-framework assemblies.\r\n@nguerrera @fadimounir @swaroop-sridhar PTAL","Url":"https://github.com/dotnet/sdk/pull/3279","RelatedDescription":"Open PR \"Set ILLink defaults\" (#3279)"},{"Id":"450273987","IsPullRequest":true,"CreatedAt":"2019-05-30T12:06:30","Actor":"dotnet-maestro[bot]","Number":"3278","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190529.5\r\n- **Date Produced**: 5/30/2019 3:41 AM\r\n- **Commit**: fb62c6377a6bd163af2a7516260f064498942585\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19279.5\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19279.5\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3278","RelatedDescription":"Open PR \"[master] Update dependencies from dotnet/arcade\" (#3278)"},{"Id":"450115097","IsPullRequest":false,"CreatedAt":"2019-05-30T03:37:46","Actor":"dsplaisted","Number":"3277","RawContent":null,"Title":"SatelliteResourceLanguages doesn't filter resources from Publish output when targeting .NET Core 3.0","State":"open","Body":"Publish the following project:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <OutputType>Exe</OutputType>\r\n    <TargetFramework>netcoreapp3.0</TargetFramework>\r\n    <SatelliteResourceLanguages>en;de;pt</SatelliteResourceLanguages>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Humanizer\" Version=\"2.6.2\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\n## Expected\r\n\r\nPublish folder should only have resource subfolders for `de` and `pt`.\r\n\r\n## Actual\r\n\r\nThe publish folder will include the Humanizer resources for all languages the package supports:\r\n\r\n![image](https://user-images.githubusercontent.com/145043/58606671-4f8b4580-8251-11e9-9e22-593e29ceab4d.png)\r\n\r\n## Notes\r\n\r\nWhen targeting .NET Core 2.2, the publish output is correctly filtered.  Also, when targeting .NET Core 3.0, the build output is correctly filtered, but the publish output is not.\r\n\r\nFYI @peterhuene @livarcocc, we should fix this for 3.0","Url":"https://github.com/dotnet/sdk/issues/3277","RelatedDescription":"Open issue \"SatelliteResourceLanguages doesn't filter resources from Publish output when targeting .NET Core 3.0\" (#3277)"},{"Id":"450081027","IsPullRequest":true,"CreatedAt":"2019-05-30T00:56:27","Actor":"cdmihai","Number":"3276","RawContent":null,"Title":"Add build and clean tests for static graph","State":"open","Body":"","Url":"https://github.com/dotnet/sdk/pull/3276","RelatedDescription":"Open PR \"Add build and clean tests for static graph\" (#3276)"},{"Id":"450077235","IsPullRequest":true,"CreatedAt":"2019-05-30T00:35:49","Actor":"peterhuene","Number":"3275","RawContent":null,"Title":"Log error when building for Windows Desktop on non-Windows.","State":"open","Body":"This PR causes the SDK to log an error (NETSDK1100) if the user attempts to\r\nbuild a Windows Desktop targeted application on a non-Windows platform.\r\n\r\nThis works via any explicit or implicit (i.e. from the SDK) framework reference\r\nto `Microsoft.WindowsDesktop.App*`; if the current platform is not Windows and\r\nthe framework reference exists, the error is logged.\r\n\r\nFixes dotnet/cli#11410 and dotnet/cli#10842.","Url":"https://github.com/dotnet/sdk/pull/3275","RelatedDescription":"Open PR \"Log error when building for Windows Desktop on non-Windows.\" (#3275)"},{"Id":"448585673","IsPullRequest":true,"CreatedAt":"2019-05-29T23:46:24","Actor":"dsplaisted","Number":"3268","RawContent":null,"Title":"Use PackageDownload in VS, fix design time build failures","State":"closed","Body":"- Use PackageDownload when supported on full MSBuild.  Fixes https://github.com/dotnet/cli/issues/10440\r\n- Don't fail design-time builds when the target framework or RuntimeIdentifier doesn't match what's in the (now outdated) assets file.  Fixes #2322\r\n  - I'd like to add tests to cover this, but haven't yet","Url":"https://github.com/dotnet/sdk/pull/3268","RelatedDescription":"Closed or merged PR \"Use PackageDownload in VS, fix design time build failures\" (#3268)"},{"Id":"447330125","IsPullRequest":true,"CreatedAt":"2019-05-29T20:13:23","Actor":"wli3","Number":"3258","RawContent":null,"Title":"Perf wpf winform hello world","State":"closed","Body":"I will clean up the commit after the review","Url":"https://github.com/dotnet/sdk/pull/3258","RelatedDescription":"Closed or merged PR \"Perf wpf winform hello world\" (#3258)"},{"Id":"449768564","IsPullRequest":true,"CreatedAt":"2019-05-29T14:03:17","Actor":"dotnet-maestro[bot]","Number":"3271","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190528.1\r\n- **Date Produced**: 5/28/2019 6:41 PM\r\n- **Commit**: 11f90a2a260422201895de58e57170131ab4efe7\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19278.1\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19278.1\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3271","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#3271)"},{"Id":"449528087","IsPullRequest":true,"CreatedAt":"2019-05-29T00:02:08","Actor":"dotnet-bot","Number":"3270","RawContent":null,"Title":"Merge release/2.2.2xx to release/3.0.1xx","State":"open","Body":"\nThis is an automatically generated pull request from release/2.2.2xx into release/3.0.1xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.2.2xx-to-release/3.0.1xx\ngit reset --hard upstream/release/3.0.1xx\ngit merge upstream/release/2.2.2xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.2.2xx-to-release/3.0.1xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/3270","RelatedDescription":"Open PR \"Merge release/2.2.2xx to release/3.0.1xx\" (#3270)"},{"Id":"449528063","IsPullRequest":true,"CreatedAt":"2019-05-29T00:02:03","Actor":"dotnet-bot","Number":"3269","RawContent":null,"Title":"Merge release/2.1.6xx to release/2.2.2xx","State":"open","Body":"\nThis is an automatically generated pull request from release/2.1.6xx into release/2.2.2xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1.6xx-to-release/2.2.2xx\ngit reset --hard upstream/release/2.2.2xx\ngit merge upstream/release/2.1.6xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.1.6xx-to-release/2.2.2xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/3269","RelatedDescription":"Open PR \"Merge release/2.1.6xx to release/2.2.2xx\" (#3269)"},{"Id":"447922530","IsPullRequest":true,"CreatedAt":"2019-05-28T21:32:50","Actor":"dotnet-bot","Number":"3264","RawContent":null,"Title":"Merge release/2.1.6xx to release/2.2.2xx","State":"closed","Body":"\nThis is an automatically generated pull request from release/2.1.6xx into release/2.2.2xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1.6xx-to-release/2.2.2xx\ngit reset --hard upstream/release/2.2.2xx\ngit merge upstream/release/2.1.6xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.1.6xx-to-release/2.2.2xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/3264","RelatedDescription":"Closed or merged PR \"Merge release/2.1.6xx to release/2.2.2xx\" (#3264)"},{"Id":"447922517","IsPullRequest":true,"CreatedAt":"2019-05-28T17:13:22","Actor":"dotnet-bot","Number":"3263","RawContent":null,"Title":"Merge release/2.2.1xx to release/2.2.2xx","State":"closed","Body":"\nThis is an automatically generated pull request from release/2.2.1xx into release/2.2.2xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.2.1xx-to-release/2.2.2xx\ngit reset --hard upstream/release/2.2.2xx\ngit merge upstream/release/2.2.1xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.2.1xx-to-release/2.2.2xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/3263","RelatedDescription":"Closed or merged PR \"Merge release/2.2.1xx to release/2.2.2xx\" (#3263)"},{"Id":"448511917","IsPullRequest":false,"CreatedAt":"2019-05-25T23:33:24","Actor":"run1206","Number":"3267","RawContent":null,"Title":"Verbiage of success message on 32bit .NET Core 2.2 SDK has wrong folder location","State":"open","Body":"After the 32-bit .NET Core 2.2 SDK finishes installing, the success message reads:\r\n\"The following were installed at C:\\Program Files\\dotnet...\"\r\nThe SDK files are correctly saved in the 32-bit location, but the folder location in the message is for the 64-bit SDK location.\r\n\r\nPlease see attached image for reference.\r\n![20190525_192301](https://user-images.githubusercontent.com/16143658/58375537-50576b00-7f23-11e9-8ea4-762ea46fa727.jpg)\r\n\r\nSuccess message should point to \"C:\\Program Files (x86)\\dotnet\\\" for the 32bit installer.","Url":"https://github.com/dotnet/sdk/issues/3267","RelatedDescription":"Open issue \"Verbiage of success message on 32bit .NET Core 2.2 SDK has wrong folder location\" (#3267)"},{"Id":"448467678","IsPullRequest":false,"CreatedAt":"2019-05-25T14:01:14","Actor":"DoCode","Number":"3266","RawContent":null,"Title":"dotnet msbuild -t:restore or -t:publish : NU1201: Not compatible with netcoreapp2.2","State":"open","Body":"### Steps to reproduce\r\n\r\nI try to restore and publish a cross-targeting and cross-platform project with netcoreapp/netstandard/net472 and linux-x64/win-x64 mix-match with:\r\n```ps1\r\n# Restoring:\r\ndotnet msbuild -t:restore -p:targetframework=net472 -p:runtimeidentifier=win-x64 Api.csproj\r\n# OR\r\ndotnet msbuild -t:restore -p:targetframework=netcoreapp2.2 -p:runtimeidentifier=linux-x64 Api.csproj\r\n\r\n# AND publishing:\r\ndotnet msbuild -t:publish -p:targetframework=net472 -p:runtimeidentifier=win-x64 Api.csproj\r\n# OR\r\ndotnet msbuild -t:publish -p:targetframework=netcoreapp2.2 -p:runtimeidentifier=linux-x64 Api.csproj\r\n```\r\n\r\n#### The projects\r\n**Api.csproj**\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n\r\n  <PropertyGroup>\r\n    <TargetFrameworks>netcoreapp2.2;net472</TargetFrameworks>\r\n    <RuntimeIdentifiers>linux-x64;win-x64</RuntimeIdentifiers>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <ProjectReference Include=\"Core.csproj\" />\r\n    <ProjectReference Include=\"Store.csproj\" />\r\n  </ItemGroup>\r\n\r\n</Project>\r\n```\r\n**Core.csproj**\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <TargetFramework>netstandard2.0</TargetFramework>\r\n  </PropertyGroup>\r\n\r\n</Project>\r\n```\r\n**Store.csproj**\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <TargetFramework>netstandard2.0</TargetFramework>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <ProjectReference Include=\"Core.csproj\" />\r\n  </ItemGroup>\r\n\r\n</Project>\r\n```\r\n**Sdk.csproj**\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <TargetFrameworks>netstandard2.0;net472</TargetFrameworks>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <ProjectReference Include=\"Core.csproj\" />\r\n  </ItemGroup>\r\n\r\n</Project>\r\n```\r\n**Cli.csproj**\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <OutputType>Exe</OutputType>\r\n    <TargetFramework>netcoreapp2.2</TargetFramework>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <ProjectReference Include=\"Sdk.csproj\" />\r\n  </ItemGroup>\r\n\r\n</Project>\r\n```\r\n\r\n### Expected behavior\r\n\r\nThe projects should be restored for all TFM's and RID's.\r\n\r\n### Actual behavior\r\n\r\nThe following error is thrown:\r\n```\r\nD:\\projects\\_lab\\dotnet-sdk-issues\\msbuild-restore\\Api.csproj : error NU1201: Project Core is not compatible with netcoreapp2.2 (.NETCoreApp,Version=v2.2). Project Core supports: net472 (.NETFramework,Version=v4.7.2)\r\nD:\\projects\\_lab\\dotnet-sdk-issues\\msbuild-restore\\Api.csproj : error NU1201: Project Store is not compatible with netcoreapp2.2 (.NETCoreApp,Version=v2.2). Project Store supports: net472 (.NETFramework,Version=v4.7.2)\r\nD:\\projects\\_lab\\dotnet-sdk-issues\\msbuild-restore\\Api.csproj : error NU1201: Project Core is not compatible with netcoreapp2.2 (.NETCoreApp,Version=v2.2) / linux-x64. Project Core supports: net472 (.NETFramework,Version=v4.7.2)\r\nD:\\projects\\_lab\\dotnet-sdk-issues\\msbuild-restore\\Api.csproj : error NU1201: Project Store is not compatible with netcoreapp2.2 (.NETCoreApp,Version=v2.2) / linux-x64. Project Store supports: net472 (.NETFramework,Version=v4.7.2)\r\nD:\\projects\\_lab\\dotnet-sdk-issues\\msbuild-restore\\Api.csproj : error NU1201: Project Core is not compatible with netcoreapp2.2 (.NETCoreApp,Version=v2.2) / win-x64. Project Core supports: net472 (.NETFramework,Version=v4.7.2)\r\nD:\\projects\\_lab\\dotnet-sdk-issues\\msbuild-restore\\Api.csproj : error NU1201: Project Store is not compatible with netcoreapp2.2 (.NETCoreApp,Version=v2.2) / win-x64. Project Store supports: net472 (.NETFramework,Version=v4.7.2)\r\n```","Url":"https://github.com/dotnet/sdk/issues/3266","RelatedDescription":"Open issue \"dotnet msbuild -t:restore or -t:publish : NU1201: Not compatible with netcoreapp2.2\" (#3266)"},{"Id":"447336615","IsPullRequest":true,"CreatedAt":"2019-05-25T03:43:49","Actor":"dsplaisted","Number":"3259","RawContent":null,"Title":"Support WPF and WindowsForms-specific FrameworkReferences via profiles","State":"closed","Body":"This PR supports referencing only Windows Forms or only WPF assets from the WindowsDesktop targeting pack.  See https://github.com/dotnet/cli/issues/10536.\r\n\r\nThis is done by supporting the following additional FrameworkReferences:\r\n\r\n- Microsoft.WindowsDesktop.App.WindowsForms\r\n- Microsoft.WindowsDesktop.App.WPF\r\n\r\nIn the implementation, a KnownFrameworkReference can specify a Profile of the targeting pack via metadata.  https://github.com/dotnet/core-setup/issues/6210 tracks adding this information to the WindowsDesktop FrameworkList.xml.  Until then, this PR hard-codes the assemblies which are in each profile.\r\n\r\nAfter this is merged, the WindowsDesktop SDK should be updated to use the .WindowsForms or .WPF FrameworkReference depending on if the `UseWPF` or `UseWindowsForms` properties are set.  If both of them are set, it should use the base Microsoft.WindomwsDesktop.App FrameworkReference, which will include the integration DLL.\r\n\r\n@nguerrera @vatsan-madhavan","Url":"https://github.com/dotnet/sdk/pull/3259","RelatedDescription":"Closed or merged PR \"Support WPF and WindowsForms-specific FrameworkReferences via profiles\" (#3259)"},{"Id":"450060047","IsPullRequest":false,"CreatedAt":"2019-05-25T01:04:11","Actor":"kakiyama1018","Number":"3272","RawContent":null,"Title":"Build issue when targeting .NET core 2.1 on machine with only .NET Core SDK 2.2","State":"open","Body":"I'm trying to ship some code samples to users that will work regardless of whether they have .NET SDK 2.1 or 2.2.\r\n\r\nAccording to...\r\nhttps://docs.microsoft.com/en-us/dotnet/core/versions/selection\r\n... it states that:\r\n\r\n\"A given SDK supports a fixed set of frameworks, capped to the target framework of the runtime it ships with. For example, the .NET Core 2.0 SDK includes the .NET Core 2.0 runtime, which is an implementation of the netcoreapp2.0 target framework. The .NET Core 2.0 SDK supports netcoreapp1.0, netcoreapp1.1, and netcoreapp2.0 but not netcoreapp2.1 (or higher). You install the .NET Core 2.1 SDK to build for netcoreapp2.1.\"\r\n\r\nAs such, I've chosen to have...\r\n  <TargetFramework>netcoreapp2.1</TargetFramework>.\r\n... in the .csproj in hopes that the sample can be built on machines that have either .NET Core SDK 2.1 or 2.2.\r\n\r\nHowever, we are running into the following build-time error on machines that simply have .NET Core SDK 2.2 installed:\r\n\r\nerror NU1202: Package Microsoft.NETCore.App 2.2.0 is not compatible with netcoreapp2.1 (.NETCoreApp,Version=v2.1). Package Microsoft.NETCore.App 2.2.0 supports: netcoreapp2.2 (.NETCoreApp,Version=v2.2)\r\n\r\nWhy can't we build an application that targets 2.1 on a machine that has .NET Core SDK 2.2, as the documentation implies to be allowed (since the target of 2.1 is lower than the SDK version that is installed on the machine)?","Url":"https://github.com/dotnet/sdk/issues/3272","RelatedDescription":"Open issue \"Build issue when targeting .NET core 2.1 on machine with only .NET Core SDK 2.2\" (#3272)"},{"Id":"448393743","IsPullRequest":false,"CreatedAt":"2019-05-25T00:37:41","Actor":"vatsan-madhavan","Number":"3265","RawContent":null,"Title":"WPF Theme Assemblies are not usable under the current FrameworkReference design","State":"open","Body":"See discussion in https://github.com/dotnet/sdk/pull/3259 for context. \r\n\r\nBackground: \r\n\r\nWPF's theme assemblies (`PresentationFramework.Aero`, `PresentationFramework.Aero2`, `PresentationFramework.AeroLite`, `PresentationFramework.Classic`, `PresentationFramework.Luna` and `PresentationFramework.Royale`) expose the same types. \r\n\r\nFor e.g., [DataGridHeaderBorder](https://docs.microsoft.com/en-us/dotnet/api/microsoft.windows.themes.datagridheaderborder?view=netframework-4.8). \r\n\r\nThese assemblies can be used in two ways. \r\n\r\nTypically, they are used as resource assemblies. i.e., they are not referenced from the project, and instead, XAML resources within them are consumed  as resources using `<ResourceDictionary ..>`. When used this way, all of these assemblies can (and often are) used in to supply themes contextually (i.e., depending on the system theme, for e.g., or some other user preference). \r\n\r\nLess commonly, they are directly referenced and their types are either consumed in XAML or directly in code. When used this way, only one assembly can be referenced directly. If more than one assembly needs to be referenced, namespace aliasing has to be used. \r\n\r\nProblem: \r\n\r\nThe current SDK/FrameworkReference design in .NET Core _always_ enables references to each of these assemblies. This makes them virtually unusable. We need a better scheme/solution. \r\n\r\n/cc @nguerrera, @rladuca, @dsplaisted \r\ncc @dotnet/wpf-developers \r\n\r\n","Url":"https://github.com/dotnet/sdk/issues/3265","RelatedDescription":"Open issue \"WPF Theme Assemblies are not usable under the current FrameworkReference design\" (#3265)"},{"Id":"447804307","IsPullRequest":true,"CreatedAt":"2019-05-25T00:06:31","Actor":"nguerrera","Number":"3262","RawContent":null,"Title":"Fix StrBegin comments in resx and enforce them in test","State":"closed","Body":"Reported by @janbaltus","Url":"https://github.com/dotnet/sdk/pull/3262","RelatedDescription":"Closed or merged PR \"Fix StrBegin comments in resx and enforce them in test\" (#3262)"},{"Id":"446933661","IsPullRequest":false,"CreatedAt":"2019-05-23T20:49:39","Actor":"RayKoopa","Number":"3256","RawContent":null,"Title":"NullableContextOptions has no effect anymore (after upgrading to VS 16.2 Preview 1?)","State":"closed","Body":"I'm using 3.0.100-preview5-011568 in VS 16.2.0 Preview 1.0 and the following sample C# console application:\r\n\r\n**project.csproj**\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <OutputType>Exe</OutputType>\r\n    <LangVersion>8.0</LangVersion>\r\n    <NullableContextOptions>enable</NullableContextOptions>\r\n    <TargetFramework>netcoreapp3.0</TargetFramework>\r\n  </PropertyGroup>\r\n</Project>\r\n```\r\n\r\n**Program.cs**\r\n```cs\r\nusing System;\r\n\r\nnamespace ConsoleApp1\r\n{\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            String? x = \"Test\";\r\n            Console.WriteLine(x);\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nDespite having set `NullableContextOptions` to `enable` in the project file, I receive the warning **CS8632: The annotation for nullable reference types should only be used in code within a '#nullable' context.** on the `String?` question mark character.\r\n\r\nSimilarly, another project cannot be compiled anymore due to **CS8627: A nullable type parameter must be known to be a value type or non-nullable reference type. Consider adding a 'class', 'struct', or type constraint.** when using `T?` for a generic class type method parameter:\r\n```cs\r\npublic void WriteOptional<T>(in T? value) where T : class, IWritable\r\n```\r\n\r\nWhen adding `#nullabe enable` to the top of the file(s) causing the warning, it is gone. It's like the project element lost its functionality after upgrading to VS 16.2.0? I did not change the SDK preview version and could compile the same sources correctly in 16.1.0.\r\n\r\nI'm not sure if https://github.com/dotnet/sdk/issues/3245 is relevant here.","Url":"https://github.com/dotnet/sdk/issues/3256","RelatedDescription":"Closed issue \"NullableContextOptions has no effect anymore (after upgrading to VS 16.2 Preview 1?)\" (#3256)"},{"Id":"447399445","IsPullRequest":true,"CreatedAt":"2019-05-23T17:22:55","Actor":"dsplaisted","Number":"3260","RawContent":null,"Title":"Switch to hosted Mac pool for CI","State":"closed","Body":"DotNetCore-Mac pool is being retired.","Url":"https://github.com/dotnet/sdk/pull/3260","RelatedDescription":"Closed or merged PR \"Switch to hosted Mac pool for CI\" (#3260)"},{"Id":"447721754","IsPullRequest":false,"CreatedAt":"2019-05-23T15:12:36","Actor":"rainersigwald","Number":"3261","RawContent":null,"Title":"Consider making runtime target assets available as an item","State":"open","Body":"In part of the MSBuild build that attempts to assemble a set of build tools to make a usable MSBuild distribution (sort of a mini-`core-sdk` for our own bootstrap purposes), we extracted some specific items to copy from the `@(RuntimeCopyLocalItems)` and `@(ResolvedRuntimeTargets)` items output by `ResolvePackageAssets`:\r\n\r\nhttps://github.com/microsoft/msbuild/blob/0411d07a7853af88f2555dd84258c005bdce709c/eng/BootStrapMSBuild.targets#L31-L41\r\n\r\nIn 3.0-preview5, `@(ResolvedRuntimeTargets)` was renamed to `@(RuntimeTargetsCopyLocalItems)`, and it is not populated in full framework builds, unless the explicit opt-out `$(DisableRuntimeTargets)` is set to `false`.\r\n\r\nIt might be worth creating the items for explicit use by custom targets, and just not adding them to the default copy local/publish items in the full framework build.","Url":"https://github.com/dotnet/sdk/issues/3261","RelatedDescription":"Open issue \"Consider making runtime target assets available as an item\" (#3261)"},{"Id":"446888312","IsPullRequest":true,"CreatedAt":"2019-05-22T20:40:34","Actor":"wli3","Number":"3255","RawContent":null,"Title":"Fix generate package on build pack as tool","State":"closed","Body":"NuGet/Home#7801\r\n\r\n(the easiest way to understand that is)since nuget no longer sets NoBuild on GeneratePackageOnBuild, we need to do similar logic to get the previous state.\r\n\r\nfix https://github.com/dotnet/sdk/issues/3253","Url":"https://github.com/dotnet/sdk/pull/3255","RelatedDescription":"Closed or merged PR \"Fix generate package on build pack as tool\" (#3255)"},{"Id":"447233563","IsPullRequest":false,"CreatedAt":"2019-05-22T16:28:58","Actor":"sbomer","Number":"3257","RawContent":null,"Title":"Double write during publish","State":"open","Body":"Publishing a self-contained WPF template app writes some files twice because `ResolvedFileToPublish` has the same dll from different runtime packs (for example, Microsoft.Win32.Registry.dll comes from both netcoreapp and the windowsdesktop pack).\r\nThis causes crossgen failures when used together with `PublishReadyToRun=true`.\r\n\r\nLooks very similar to https://github.com/dotnet/sdk/issues/3035 which was addressed in https://github.com/dotnet/sdk/pull/3021, but I'm still seeing this with version `3.0.100-preview6-012031`.\r\n\r\n/cc @fadimounir @nguerrera @peterhuene \r\n\r\nedit: it fails during `PublishReadyToRun=true` only when used together with the linker. Without linking, the duplicates are already crossgen'd, and so they don't hit the failure. In any case, `ResolvedFileToPublish` has duplicates that shouldn't be there, and we end up with `DoubleWrites` of some files.\r\n\r\n<img width=\"565\" alt=\"image\" src=\"https://user-images.githubusercontent.com/787361/58192612-00a04780-7c76-11e9-8ffc-102d4b993fb2.png\">\r\n","Url":"https://github.com/dotnet/sdk/issues/3257","RelatedDescription":"Open issue \"Double write during publish\" (#3257)"},{"Id":"446885292","IsPullRequest":false,"CreatedAt":"2019-05-22T00:56:10","Actor":"vatsan-madhavan","Number":"3254","RawContent":null,"Title":"deps.json for ProjectReferences is not emitted correctly","State":"open","Body":"When I create a project with a project reference like this...\r\n\r\n```XML\r\n<ProjectReference Include=\"..\\WindowsBase.csproj\" />\r\n```\r\n\r\n... the `deps.json` file that's generated has an entry like this:\r\n\r\n```json\r\n      \"WindowsBase/1.0.0\": {\r\n        \"runtime\": {\r\n          \"WindowsBase.dll\": {}\r\n        }\r\n      }\r\n```\r\nThe application loads `WindowsBase` from `Microsoft.NetCore.App` instead of loading the one supplied by the referenced project. \r\n\r\n[Repro: XUnitTestProject1.zip](https://github.com/dotnet/sdk/files/3205090/XUnitTestProject1.zip)\r\n\r\n/cc @ericstj \r\n","Url":"https://github.com/dotnet/sdk/issues/3254","RelatedDescription":"Open issue \"deps.json for ProjectReferences is not emitted correctly\" (#3254)"}],"ResultType":"GitHubIssue"},"Announcements-Issues":{"Issues":[{"Id":"444065225","IsPullRequest":false,"CreatedAt":"2019-05-14T18:38:23","Actor":"TaraOverfield","Number":"114","RawContent":null,"Title":"May 2019 .NET Updates","State":"open","Body":"# May 2019 .NET Updates\r\n\r\nThe following .NET updates were released in May 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Core\r\n\r\n* .NET Core 1.0.16 and .NET Core SDK 1.1.13( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.0/1.0.16/1.0.16.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/1.0) )\r\n\r\n* .NET Core 1.1.12 and .NET Core SDK 1.1.13 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.1/1.1.13/1.1.13.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/1.1) )\r\n\r\n* .NET Core 2.1.11 and .NET Core SDK ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.11/2.1.11.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.1) )\r\n\r\n* .NET Core 2.2.5 and .NET Core SDK ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.5/2.2.5.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.2) )\r\n\r\nA discussion issue is available at [core/2727](https://github.com/dotnet/core/issues/2727)\r\n\r\n## .NET Framework\r\n* [.NET Framework May 2019 Security and Quality Rollup - May 14, 2019](https://devblogs.microsoft.com/dotnet/net-framework-may-2019-security-and-quality-rollup/)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/114","RelatedDescription":"Open issue \"May 2019 .NET Updates\" (#114)"},{"Id":"444027703","IsPullRequest":false,"CreatedAt":"2019-05-14T17:06:24","Actor":"blowdart","Number":"113","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0981: .NET Core Denial of Service Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2019-0981: .NET Core Denial of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core and ASP.NET Core 1.0, 1.1, 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nA denial of service vulnerability exists when .NET Core and ASP.NET Core improperly handle web requests. An attacker who successfully exploited this vulnerability could cause a denial of service against a .NET Core and ASP.NET Core application. The vulnerability can be exploited remotely, without authentication.\r\n\r\nA remote unauthenticated attacker could exploit this vulnerability by issuing specially crafted requests to a .NET Core application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core and ASP.NET Core web applications handle web requests.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/37651\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nThere are no mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the System.Private.Uri package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.Private.Uri | 4.3.0, 4.3.1 | 4.3.2\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nThe affected assemblies are part of .NET Core. If you are running a vulnerable version of .NET Core you may be affected.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nTo fix the issue please install the latest version of .NET Core. If you have multiple versions of .NET Core installed you will need to install multiple runtimes, or SDKs depending on what you have installed.\r\n\r\nIf you have .NET Core 2.0 or greater installed you can list the versions you have installed by running the `dotnet --info` command. You will see output like the following;\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview3-010431\r\n Commit:    d72abce213\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18362\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview3-010431\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview3-27503-5\r\n  Commit:  3844df9537\r\n\r\n.NET Core SDKs installed:\r\n  1.1.13 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.602 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.202 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview3-010431 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\\\r\n  Microsoft.AspNetCore.All 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview3-19153-02 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.15 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview3-27503-5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview3-27504-2 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your version of .NET Core does not support the `dotnet --info` command then you have either .NET Core 1.0 or .NET Core 1.1 installed.\r\n\r\n* For machines running .NET Core 1.0 you should download Runtime 1.0.16 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.0.\r\n* For machines running .NET Core 1.1 you should download Runtime 1.1.13 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.1.\r\n* For machines running .NET 2.1 you should download Runtime 2.1.11 or SDK 2.1.507 for Visual Studio 2017 or SDK 2.1.604 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.1\r\n* For machines running .NET 2.2 you should download Runtime 2.2.5 or SDK 2.2.107 for Visual Studio 2017 or SDK 2.2.204 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.2.\r\n\r\nOnce you have installed the updated runtime or SDK you should restart your apps for the update to take effect.\r\n\r\nIf you have [pinned your application](https://docs.microsoft.com/en-us/dotnet/core/versions/selection) to a specific version of the runtime you must update your app, recompile and redeploy it for the update to take effect.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgments\r\n\r\n[Nemanja Mijailovic](https://mijailovic.net/)\r\n\r\n### External Links\r\n\r\n[CVE-2019-0981](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0981)\r\n\r\n### Revisions\r\n\r\nV1.0 (May 14, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-05-14_","Url":"https://github.com/dotnet/announcements/issues/113","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0981: .NET Core Denial of Service Vulnerability\" (#113)"},{"Id":"444027025","IsPullRequest":false,"CreatedAt":"2019-05-14T17:04:45","Actor":"blowdart","Number":"112","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0980: .NET Core Denial of Service Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2019-0980: .NET Core Denial of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core and ASP.NET Core 1.0, 1.1, 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nA denial of service vulnerability exists when .NET Core and ASP.NET Core improperly handle web requests. An attacker who successfully exploited this vulnerability could cause a denial of service against a .NET Core and ASP.NET Core application. The vulnerability can be exploited remotely, without authentication.\r\n\r\nA remote unauthenticated attacker could exploit this vulnerability by issuing specially crafted requests to a .NET Core application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core and ASP.NET Core web applications handle web requests.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/37650\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nThere are no mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the System.Private.Uri package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.Private.Uri | 4.3.0, 4.3.1 | 4.3.2\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nThe affected assemblies are part of .NET Core. If you are running a vulnerable version of .NET Core you may be affected.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nTo fix the issue please install the latest version of .NET Core. If you have multiple versions of .NET Core installed you will need to install multiple runtimes, or SDKs depending on what you have installed.\r\n\r\nIf you have .NET Core 2.0 or greater installed you can list the versions you have installed by running the `dotnet --info` command. You will see output like the following;\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview3-010431\r\n Commit:    d72abce213\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18362\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview3-010431\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview3-27503-5\r\n  Commit:  3844df9537\r\n\r\n.NET Core SDKs installed:\r\n  1.1.13 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.602 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.202 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview3-010431 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\\\r\n  Microsoft.AspNetCore.All 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview3-19153-02 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.15 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview3-27503-5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview3-27504-2 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your version of .NET Core does not support the `dotnet --info` command then you have either .NET Core 1.0 or .NET Core 1.1 installed.\r\n\r\n* For machines running .NET Core 1.0 you should download Runtime 1.0.16 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.0.\r\n* For machines running .NET Core 1.1 you should download Runtime 1.1.13 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.1.\r\n* For machines running .NET 2.1 you should download Runtime 2.1.11 or SDK 2.1.507 for Visual Studio 2017 or SDK 2.1.604 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.1\r\n* For machines running .NET 2.2 you should download Runtime 2.2.5 or SDK 2.2.107 for Visual Studio 2017 or SDK 2.2.204 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.2.\r\n\r\nOnce you have installed the updated runtime or SDK you should restart your apps for the update to take effect.\r\n\r\nIf you have [pinned your application](https://docs.microsoft.com/en-us/dotnet/core/versions/selection) to a specific version of the runtime you must update your app, recompile and redeploy it for the update to take effect.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgments\r\n\r\n[Nemanja Mijailovic](https://mijailovic.net/)\r\n\r\n### External Links\r\n\r\n[CVE-2019-0980](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0980)\r\n\r\n### Revisions\r\n\r\nV1.0 (May 14, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-05-14_","Url":"https://github.com/dotnet/announcements/issues/112","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0980: .NET Core Denial of Service Vulnerability\" (#112)"},{"Id":"444026277","IsPullRequest":false,"CreatedAt":"2019-05-14T17:02:57","Actor":"blowdart","Number":"111","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0820: .NET Core Denial of Service Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2019-0820: .NET Core Denial of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 1.0, 1.1, 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nA denial of service vulnerability exists when .NET Core improperly process RegEx strings. An attacker who successfully exploited this vulnerability could cause a denial of service against a .NET application.\r\n\r\nA remote unauthenticated attacker could exploit this vulnerability by issuing specially crafted requests to a .NET Core application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core applications handle RegEx string processing.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/37649\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nThere are no mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the System.Text.RegularExpressions package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.Text.RegularExpressions.dll | 4.3.0 | 4.3.1\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nThe affected assemblies are part of .NET Core. If you are running a vulnerable version of .NET Core you may be affected.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nTo fix the issue please install the latest version of .NET Core. If you have multiple versions of .NET Core installed you will need to install multiple runtimes, or SDKs depending on what you have installed.\r\n\r\nIf you have .NET Core 2.0 or greater installed you can list the versions you have installed by running the `dotnet --info` command. You will see output like the following;\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview3-010431\r\n Commit:    d72abce213\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18362\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview3-010431\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview3-27503-5\r\n  Commit:  3844df9537\r\n\r\n.NET Core SDKs installed:\r\n  1.1.13 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.602 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.202 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview3-010431 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\\\r\n  Microsoft.AspNetCore.All 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview3-19153-02 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.15 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview3-27503-5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview3-27504-2 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your version of .NET Core does not support the `dotnet --info` command then you have either .NET Core 1.0 or .NET Core 1.1 installed.\r\n\r\n* For machines running .NET Core 1.0 you should download Runtime 1.0.16 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.0.\r\n* For machines running .NET Core 1.1 you should download Runtime 1.1.13 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.1.\r\n* For machines running .NET 2.1 you should download Runtime 2.1.11 or SDK 2.1.507 for Visual Studio 2017 or SDK 2.1.604 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.1\r\n* For machines running .NET 2.2 you should download Runtime 2.2.5 or SDK 2.2.107 for Visual Studio 2017 or SDK 2.2.204 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.2.\r\n\r\nOnce you have installed the updated runtime or SDK you should restart your apps for the update to take effect.\r\n\r\nIf you have [pinned your application](https://docs.microsoft.com/en-us/dotnet/core/versions/selection) to a specific version of the runtime you must update your app, recompile and redeploy it for the update to take effect.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2019-0820](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0820)\r\n\r\n### Revisions\r\n\r\nV1.0 (May 14, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-05-14_","Url":"https://github.com/dotnet/announcements/issues/111","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0820: .NET Core Denial of Service Vulnerability\" (#111)"},{"Id":"435015242","IsPullRequest":false,"CreatedAt":"2019-04-19T01:16:10","Actor":"MichaelSimons","Number":"110","RawContent":null,"Title":"New images for .NET Framework 4.8","State":"open","Body":"# New images for .NET Framework 4.8\r\n\r\nNew images have been released with support for [.NET Framework 4.8 runtime and SDK](https://devblogs.microsoft.com/dotnet/announcing-the-net-framework-4-8/).\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [Microsoft/dotnet-framework-docker#271](https://github.com/Microsoft/dotnet-framework-docker/issues/271)\r\n\r\n## Details\r\n* Pull request: #270\r\n\r\nYou can access these new images with the following tags:\r\n* `mcr.microsoft.com/dotnet/framework/runtime:4.8`\r\n* `mcr.microsoft.com/dotnet/framework/sdk:4.8`\r\n\r\nIn addition, the `latest` tag has been updated to refer to these new 4.8 images.\r\n\r\nCheck out the readme files for more information on the latest tags:\r\n* [Runtime](https://github.com/Microsoft/dotnet-framework-docker/blob/master/README.runtime.md)\r\n* [SDK](https://github.com/Microsoft/dotnet-framework-docker/blob/master/README.sdk.md)\r\n\r\nThe [3.5 SDK](https://github.com/Microsoft/dotnet-framework-docker/tree/master/3.5/sdk) images are intended to always contain the latest .NET Framework SDK and have also been updated to use the 4.8 SDK.","Url":"https://github.com/dotnet/announcements/issues/110","RelatedDescription":"Open issue \"New images for .NET Framework 4.8\" (#110)"},{"Id":"433297298","IsPullRequest":false,"CreatedAt":"2019-04-15T13:57:07","Actor":"MichaelSimons","Number":"109","RawContent":null,"Title":".NET Framework SDK container images now contain the Visual Studio 2019 toolset","State":"open","Body":"# .NET Framework SDK container images now contain the Visual Studio 2019 toolset\r\n.NET Framework SDK container images now include Visual Studio 2019 tools. For most scenarios, this change will not be observable, however, there may be some breaks that will be documented in this issue. We did not add additional tools to the SDK, but updated existing tools to match the same tools in Visual Studio 2019. Previously, the tools in SDK matched the same tools in Visual Studio 2017.\r\n\r\nWe will only produce .NET Framework SDK images that include Visual Studio 2019 tools. We will not produce another set of .NET Framework SDK images that includes Visual Studio 2017 tools. There is a strong goal that the tools remain compatible over releases.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [Microsoft/dotnet-framework-docker#269](https://github.com/Microsoft/dotnet-framework-docker/issues/269)\r\n\r\n## Details\r\nVisual Studio 2019 was released on April 2, 2019. We updated the .NET Framework SDK container images, on the same day, to include a new version of the .NET Framework SDK that contains tools that match the same tools in Visual Studio 2019.\r\n\r\nThese tools include:\r\n* MSBuild\r\n* NuGet\r\n* C# compiler\r\n* F# compiler\r\n* VB compiler\r\n* VS Test\r\n\r\nIf you encounter a breaking change or other issues and need to quickly unblock yourself, you can reference the previous version of the image by using its full version tag (e.g. mcr.microsoft.com/dotnet/framework/sdk:4.7.2-20190312-windowsservercore-ltsc2019).\r\n\r\nRelated pull request: [#252](https://github.com/Microsoft/dotnet-framework-docker/pull/252)","Url":"https://github.com/dotnet/announcements/issues/109","RelatedDescription":"Open issue \".NET Framework SDK container images now contain the Visual Studio 2019 toolset\" (#109)"},{"Id":"432735158","IsPullRequest":false,"CreatedAt":"2019-04-12T20:35:55","Actor":"KathleenDollard","Number":"108","RawContent":null,"Title":".NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017","State":"open","Body":"# .NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017\r\n\r\n.NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017. For example, 2.2.203 and 2.1.603 cause failures in Visual Studio 2017. To work on projects in Visual Studio 2017, use .NET Core SDK 2.2.1nn and 2.1.5nn, such as 2.2.106 and 2.1.506. You can install any combination of these SDKs side by side.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n[dotnet/sdk #3124](https://github.com/dotnet/sdk/issues/3124)\r\n\r\n## Details\r\n\r\nYou can find the SDKs on you machine using the following at a command prompt:\r\n\r\n```bash\r\ndotnet --list-sdks\r\n```\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.2\r\n\r\nIf you receive the error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.2. Either target .NET Core 2.1 or lower, or use a version of the .NET SDK that supports .NET Core 2.2.`\r\n\r\nIf you downloaded the .NET Core SDK 2.2 between April 2 and April 12, 2019, the main [.NET downloads page](https://dotnet.microsoft.com/download/) included only 2.2.2nn. Starting April 12th, a new button marked \"Compatible with Visual Studio 2017\" is provided to target 2.2.1nn. If you downloaded 2.2 prior to this date, and you use Visual Studio 2017, install the compatible version.\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.1\r\n\r\nIf you receive this error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.1. Either target .NET Core 2.0 or lower, or use a version of the .NET SDK that supports .NET Core 2.1.`\r\n\r\nThis problem most often occurs because you manually uninstall the 2.1.5nn version. Simply reinstall it from the [.NET Core 2.1 downloads page](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\n## More information\r\n\r\nHere is the draft of an article we are preparing for .NET Core documentation:\r\n\r\n---\r\n\r\n## Solving Problems with .NET Core SDK Selection in Visual Studio\r\n\r\nYou may have .NET Core SDKs on your machine and still have problems with Visual Studio finding an appropriate one. This article explains why this happens and how you can fix your installation.\r\n\r\nWhen Visual Studio can't find an appropriate version of the .NET Core SDK, you'll receive an error message. This may appear in the Error pane as NETSDK1045:\r\n\r\n\"The current .NET SDK does not support targeting .NET Core 2...\"\r\n\r\nYou can check what .NET Core SDKs you have on your machine with the following command:\r\n\r\n```bash\r\ndotnet --list-sdks\r\n```\r\n\r\nUnless you have a global.json file, when you use `dotnet` from the command line, the latest .NET Core SDK is used.\r\n\r\n> [TIP!] \r\n> Open a command prompt and try to build with `dotnet build`. If the command line build works, but Visual Studio doesn't suggestions in this article may help.\r\n\r\nThe last two digits of the .NET Core SDK version numbers are in the format are a patch number, which is represented by `nn` in this article because we will continue to service them to include the latest runtimes. To find out more, vist the [Overview of how .NET Core is versioned page](https://docs.microsoft.com/en-us/dotnet/core/versions/).\r\n\r\n## Fixes for Common Problems\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.2\r\n\r\nIf you receive the error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.2… Either target .NET Core 2.1 or lower, or use a version of the .NET SDK that supports .NET Core 2.2.`\r\n\r\nUse `dotnet --list-sdks` to ensure you have .NET Core SDK 2.2.1nn. As an example, 2.2.106 would be a valid entry.\r\n\r\nIf you downloaded the .NET Core SDK 2.2 after April 2, 2019, version 2.2.2nn (such as 2.2.203) is listed first and is the highest version available. However, Visual Studio 2017 requires 2.2.1nn (such as 2.2.106). .NET Core SDK 2.2.2nn works with Visual Studio 2019. Visual Studio 2017 and Visual Studio 2019 can be installed side by side, but this requires both .NET Core SDK 2.2.1nn and .NET Core SDK 2.2.2nn to develop .NET Core 2.2 applications.\r\n\r\nTo download .NET Core SDK 2.2.2nn, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.1\r\n\r\nIf you receive this error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.1. Either target .NET Core 2.0 or lower, or use a version of the .NET SDK that supports .NET Core 2.1.`\r\n\r\nUse `dotnet --list-sdks` to ensure you have .NET Core SDK 2.1.5nn. As an example, 2.1.505 would be a valid entry. \r\n\r\nThis problem occurs of you manually uninstall the 2.1.5nn version.\r\n\r\nThe Visual Studio 2019 installation will not remove this file and Visual Studio 2017 will continue to work side by side.\r\n\r\nTo reinstall .NET Core SDK 2.1.5nn, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\n### Visual Studio 2019 can't target .NET Core 3.0 Preview\r\n\r\nIf you receive this error message in Visual Studio 2019:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.1. Either target .NET Core 2.0 or lower, or use a version of the .NET SDK that supports .NET Core 2.1.`\r\n\r\nUse `dotnet --list-sdks` to ensure you have .NET Core SDK 3.0.100-preview... As an example, SDK 3.0.100-preview3-010431 would be a valid entry.\r\n\r\nTo install .NET Core SDK 3.0.1nn preview, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core/3.0).\r\n\r\nIn Visual Studio, go to `Tools\\Options\\Projects and Solutions\\.NET Core` and check the box `Use Previews of the .NET Core SDK`.\r\n\r\n> [NOTE!]\r\n> This option will be moving to `Tools\\Options\\Environment` and renamed `Preview Features` in Visual Studio 2019 version 16.1 Preview 2.\r\n\r\nIf you are targeting .NET Core 3.0 preview, the [C# language version will be C# 8.0 Preview by default](https://docs.microsoft.com/en-us/visualstudio/releases/2019/release-notes#csharp-defaults) allowing you to use new C# features.\r\n\r\n## Understand the relationship between .NET Core SDKs and Visual Studio build tools\r\n\r\nVisual Studio has its own copies of tools like MSBuild, NuGet and the compilers. If you install the .NET Core workload, it also installs the .NET Core SDK which has versions of these tools and provides tasks and targets. These two versions are built from the same repositories, but target .NET Framework and .NET Core respectively. \r\n\r\nWhen you build a .NET Core project in Visual Studio, it uses Visual Studio's copy of MSBuild, but the tasks and targets are supplied from the selected version of the .NET Core SDK. \r\n\r\nWhen you upgrade the .NET Core SDK, you get new tasks and targets. These new tasks and targets may contain features that are not supported by older versions of MSBuild. Like all of the .NET Core SDK, MSBuild is backwards compatible. It is not forwards compatible.\r\n\r\nThis generally works well, but requires a guarantee that the tasks and targets work with the MSBuild version. To ensure this, each .NET Core SDK indicates an MSBuild version range that is used by Visual Studio to determine compatibility. Versions of the .NET Core SDK that have a higher MSBuild identifier than expected are ignored by Visual Studio. In the normal case, this simply means you use the tasks and targets that were installed with your version of Visual Studio.\r\n\r\nBecause of this, you may have many versions of the .NET Core SDK on your machine and Visual Studio still fail to find one it considers appropriate. This is compounded by a poor error message, which we cannot fully correct because it is from the old version of the .NET Core SDK on your machine. Confusion is also compounded by a complex non-linear release matrix that makes it difficult to predict the right .NET Core SDK to select. We are working to improve all this. \r\n\r\n## The Visual Studio / .NET Core SDK support matrix\r\n\r\nThe last two digits of the .NET Core SDK version number are a patch number, which are represented by a `nn` in this table. You can learn more about .NET Core SDK and .NET Core Runtime versioning at the [Overview of how .NET Core is versioned page](https://docs.microsoft.com/en-us/dotnet/core/versions/).\r\n\r\nThe following table shows which Visual Studio versions and .NET Core SDKs are compatible and how they are acquired if you are working with Visual Studio. \r\n\r\n| .NET Core SDK | .NET Core Runtime | Compatible Visual Studio | MSBuild | Notes                                     |\r\n|---------------|-------------------|--------------------------|---------|-------------------------------------------|\r\n| 2.1.5nn       | 2.1               | 2017                     | 15      | Installed as part of VS 2017 version 15.9 |\r\n| 2.1.6nn       | 2.1               | 2019                     | 16      | Installed as part of VS 2019              |\r\n| 2.2.1nn       | 2.2               | 2017                     | 15      | Installed manually                        |\r\n| 2.2.2nn       | 2.2               | 2019                     | 16      | Installed as part of VS 2019              |\r\n| 3.0.1nn       | 3.0 (Preview)     | 2019                     | 16      | Installed manually                        |\r\n\r\nVisual Studio 2017 cannot work with .NET Core SDK 2.1.6nn or 2.2.2nn.\r\n\r\nTo find out more about removing older versions of the .NET Core Runtime and .NET Core SDK, visit the [How to remove the .NET Core Runtime and SDK page](https://docs.microsoft.com/en-us/dotnet/core/versions/remove-runtime-sdk-versions?tabs=macos).\r\n\r\nTo download the .NET Core SDK, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core).","Url":"https://github.com/dotnet/announcements/issues/108","RelatedDescription":"Open issue \".NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017\" (#108)"},{"Id":"432081093","IsPullRequest":false,"CreatedAt":"2019-04-11T15:16:43","Actor":"KathleenDollard","Number":"107","RawContent":null,"Title":"Limit DotNetCliToolReference Tools to .NET Core 2.2 and Below","State":"open","Body":"# Limit DotNetCliToolReference Tools to .NET Core 2.2 and Below\r\n\r\n.NET Core 3 takes the next step in the .NET Core tool strategy with local tools. As part of this process, starting in Preview 4 DotNetCliToolReference tools will be restricted to targeting .NET Core 2.2 and below. DotNetCliToolReference tools can be used in projects targeting .NET Core 3.0, but the tools themselves should target .NET Core 2.2 or below.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n[dotnet/sdk #3115](https://github.com/dotnet/sdk/issues/3115)\r\n\r\n## Details\r\n\r\nThe suggested approach going forward is to to use [.NET Core Local Tools](https://aka.ms/local-tools) when you want a tool that is specific to a project or repository. At the same time we are removing the need to access local tools by the verbose `dotnet tool run <toolname>` that was present in earlier previews. You can now access local tools via `dotnet <toolname>`.\r\n\r\nDotNetCliToolReference tools have a flaw in how their dependencies are restored which can create [difficult to diagnose bugs when running these tools](https://github.com/NuGet/Home/issues/5067). This issue would occur much more frequently if targeting .NET Core 3.0 was allowed. Restricting tools to target only .NET Core 2.2 and below means existing scenarios to continue to work (as well as they previously did), regardless of the framework version targeted by the project or the current .NET Core SDK. \r\n\r\nThe new .NET Core tool strategy avoids this flaw in restore strategy and offers other benefits, like the ability to author one type of tool and install it in different ways depending on project and user needs.\r\n\r\nWe look forward to your feedback on .NET Core Local Tools, and on challenges you face moving away from DotNetCliToolReference tools. \r\n\r\n[dotnet/sdk #3057](https://github.com/dotnet/sdk/pull/3057)","Url":"https://github.com/dotnet/announcements/issues/107","RelatedDescription":"Open issue \"Limit DotNetCliToolReference Tools to .NET Core 2.2 and Below\" (#107)"},{"Id":"431012407","IsPullRequest":false,"CreatedAt":"2019-04-09T14:51:18","Actor":"MichaelSimons","Number":"106","RawContent":null,"Title":".NET Core SDK container images now contain the Visual Studio 2019 toolset","State":"open","Body":"# .NET Core SDK container images now contain the Visual Studio 2019 toolset\r\n\r\n.NET Core SDK container images now include Visual Studio 2019 tools. For most scenarios, this change will not be observable, however, there may be some breaks that will be documented in this issue. We did not add *additional* tools to the SDK, but updated existing tools to match the same tools in Visual Studio 2019. Previously, the tools in SDK matched the same tools in Visual Studio 2017.\r\n\r\nWe will only produce .NET Core SDK images that include Visual Studio 2019 tools. We will not produce another set of .NET Core SDK images that includes Visual Studio 2017 tools. There is a strong goal that the tools remain compatible over releases.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #1042](https://github.com/dotnet/dotnet-docker/issues/1042)\r\n\r\n## Details\r\n\r\n[Visual Studio 2019](https://devblogs.microsoft.com/visualstudio/visual-studio-2019-code-faster-work-smarter-create-the-future/) was released on April 2, 2019. We updated the .NET Core SDK container images, on the same day, to include a new version of the .NET Core SDK that contains tools that match the same tools in Visual Studio 2019.\r\n\r\nThese tools include:\r\n\r\n* MSBuild\r\n* NuGet\r\n* C# compiler\r\n* F# compiler\r\n* VB compiler\r\n* VS Test\r\n\r\nIf you encounter a breaking change or other issues and need to quickly unblock yourself, you can reference the previous version of the image by using its full version tag:\r\n\r\n* 2.1: `mcr.microsoft.com/dotnet/core/sdk:2.1.505`\r\n* 2.2: `mcr.microsoft.com/dotnet/core/sdk:2.2.105`\r\n\r\nDetails:\r\n\r\n* [dotnet/dotnet-docker #1029](https://github.com/dotnet/dotnet-docker/pull/1029)\r\n* [2.1 SDK release notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.602-SDK/2.1.602-SDK.md)\r\n* [2.2 SDK release notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.202-SDK/2.2.202-SDK.md)\r\n\r\n## Known Breaking Changes for SDK images (VS 2017 to VS 2019 upgrade)\r\n\r\nThe following issues and breaks have been discovered.\r\n \r\n### Test Log File Name Change\r\n\r\nA change was introduced to the `dotnet test` command when a user-defined log file name is specified.  In the previous version the resulting log file would be named exactly as specified.  In the current version, the log file is named with a timestamp suffix automatically added to the user-defined name.  \r\n\r\nDetails:\r\n* [Microsoft/vstest #1603](https://github.com/Microsoft/vstest/issues/1603) \r\n* [Microsoft/vstest#1876](https://github.com/Microsoft/vstest/issues/1876)","Url":"https://github.com/dotnet/announcements/issues/106","RelatedDescription":"Open issue \".NET Core SDK container images now contain the Visual Studio 2019 toolset\" (#106)"},{"Id":"431003701","IsPullRequest":false,"CreatedAt":"2019-04-09T14:35:39","Actor":"MichaelSimons","Number":"105","RawContent":null,"Title":"Windows Server, version 1709 no longer Supported by .NET Framework","State":"open","Body":"# Windows Server, version 1709 no longer Supported by .NET Framework\r\n\r\nWindows Server, version 1709 is no longer supported. As a result, this version of Windows is no longer supported by the .NET Team and we will no longer produce .NET Framework container images for those Windows versions.\r\n\r\nSupport statements:\r\n\r\n* [Currently supported .NET Framework Docker images](https://hub.docker.com/_/microsoft-dotnet-framework)\r\n* [.NET Framework Support Policy](https://dotnet.microsoft.com/platform/support/policy/dotnet-framework)\r\n* [Products Reaching End of Support for 2019](https://support.microsoft.com/en-us/help/4316957/products-reaching-end-of-support-for-2019)\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-framework-docker #259](https://github.com/Microsoft/dotnet-framework-docker/issues/259)\r\n\r\n## Details\r\n\r\nDocker tags that contain `windowsservercore-1709` are no longer be produced. We will not delete existing images or those tags, however, they contain unsupported builds of Windows Server and .NET Framework.\r\n\r\n## Pulling manifest tags\r\n\r\nThese changes also affect manifest tags (AKA “multi-arch tags“), such as `4.7.1`, and  `4.7.2`. These are tags that are supported on multiple operating systems and versions, and do  not contain the operating system in them. As a result of no longer producing new images for Windows Server, version 1709, manifest tags no longer include entries for Windows 10, version 1709, and Windows Server,version 1709. That means that .NET Core manifest tags are no longer usable on those Windows versions.\r\n\r\nIf you pull a manifest tag on one of the Windows versions described, you may get one of the following error messages:\r\n\r\n* `a Windows version 10.0.17134-based image is incompatible with a 10.0.16299 host`\r\n* `no matching manifest for windows/amd64 in the manifest list entries`\r\n* `no matching manifest for unknown in the manifest list entries`\r\n\r\nIf you need to still use Windows Server, version 1709 images (even though they are no longer supported), you will need to use tags that include the Windows Server version (these are non-manifest tags), for example `mcr.microsoft.com/dotnet/framework/runtime:4.7.2-windowsservercore-1709` or `mcr.microsoft.com/dotnet/framework/sdk:4.7.2-windowsservercore-1709`.","Url":"https://github.com/dotnet/announcements/issues/105","RelatedDescription":"Open issue \"Windows Server, version 1709 no longer Supported by .NET Framework\" (#105)"},{"Id":"430998341","IsPullRequest":false,"CreatedAt":"2019-04-09T14:25:57","Actor":"MichaelSimons","Number":"104","RawContent":null,"Title":"Nano Server 2016 and 1709 no longer Supported by .NET Core","State":"open","Body":"# Nano Server 2016 and 1709 no longer Supported by .NET Core\r\n\r\nNano Server 2016 and Nano Server, version 1709 are no longer supported. As a result, these versions of Windows are no longer supported by the .NET Team and we will no longer produce .NET Core container images for those Windows versions.\r\n\r\nSupport statements:\r\n\r\n* [Currently supported .NET Core Docker images](https://hub.docker.com/_/microsoft-dotnet-core)\r\n* [.NET Core Support Policy](https://dotnet.microsoft.com/platform/support/policy/dotnet-core)\r\n* [Products Reaching End of Support for 2018](https://support.microsoft.com/en-us/help/4043450/products-reaching-end-of-support-for-2018)\r\n* [Products Reaching End of Support for 2019](https://support.microsoft.com/en-us/help/4316957/products-reaching-end-of-support-for-2019)\r\n\r\nWe previously announced Nano Server 2016 going out of support in [.NET Core Container Images now Published to Microsoft Container Registry](https://devblogs.microsoft.com/dotnet/net-core-container-images-now-published-to-microsoft-container-registry/). That post is still accurate.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #1041](https://github.com/dotnet/dotnet-docker/issues/1041)\r\n\r\n## Details\r\n\r\nDocker tags that contain `nanoserver-sac2016` and `nanoserver-1709` are no longer be produced. We will not delete existing images or those tags, however, they contain unsupported builds of Nano Server and .NET Core.\r\n\r\n## Pulling manifest tags\r\n\r\nThese changes also affect manifest tags (AKA “multi-arch tags“), such as `2.1`, `2.1-sdk`, `2.2.1-runtime`. These are tags that are supported on multiple operating systems, and do not contain the operating system in them. As a result of no longer producing new images for Nano Server 2016 and Nano Server, version 1709, manifest tags no longer include entries for Nano Server 2016, Windows Server 2016, Windows 10, version 1607, Windows 10, version 1709, and Windows Server, version 1709. That means that .NET Core manifest tags are no longer usable on those Windows versions.\r\n\r\nIf you pull a manifest tag on one of the Windows versions described, you may get one of the following error messages:\r\n\r\n* `a Windows version 10.0.16299-based image is incompatible with a 10.0.14393 host`\r\n* `no matching manifest for windows/amd64 in the manifest list entries`\r\n* `no matching manifest for unknown in the manifest list entries`\r\n\r\nIf you need to still use Nano Server 2016 or Nano Server, version 1709 images (even though they are no longer supported), you will need to use tags that include the Nano Server version (these are non-manifest tags), for example `mcr.microsoft.com/dotnet/core/runtime:2.1-nanoserver-sac2016` or `mcr.microsoft.com/dotnet/core/runtime:2.1-nanoserver-1709`.\r\n\r\n### Nano Server Support\r\n\r\n.NET Core is supported on Nano Server, version 1803 and later. \r\n\r\n.NET Core 2.x and 3.0 images are available for all supported versions of Nano Server, version 1803 and later. This means that 2.x and 3.0 manifest tags can be used on Windows 10, version 1803+, and Windows Server, version 1803+. You can also use non-manifest tags for those versions, too, such as `2.2-nanoserver-1809`.\r\n\r\n.NET Core 1.x images are available for Nano Server, version 1809 and later. This means that 1.x manifest tags can be used on Windows 10, version 1809+, Windows Server, version 1809+ and Windows Server 2019. You can also use non-manifest tags for those versions, too, such as `1.1-nanoserver-1809` tag.","Url":"https://github.com/dotnet/announcements/issues/104","RelatedDescription":"Open issue \"Nano Server 2016 and 1709 no longer Supported by .NET Core\" (#104)"},{"Id":"420117627","IsPullRequest":false,"CreatedAt":"2019-03-12T17:35:16","Actor":"vivmishra","Number":"103","RawContent":null,"Title":"March 2019 .NET Updates","State":"open","Body":"# March 2019 .NET Updates\r\n\r\nThe following .NET updates were released in March 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n* [.NET Framework March 2019 Update - March 19, 2019](https://devblogs.microsoft.com/dotnet/net-framework-march-2019-update/)\r\n* [.NET Framework April 2, 2019 Cumulative Update for Windows 10 version 1809 and Windows Server 2019 - April 2, 2019](https://devblogs.microsoft.com/dotnet/net-framework-april-2-2019-cumulative-update-for-windows-10-version-1809-and-windows-server-2019/)\r\n\r\n\r\n## .NET Core\r\n\r\n* .NET Core 1.0.15 and .NET Core SDK 1.1.13 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.0/1.0.15/1.0.15.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/1.0) )\r\n\r\n* .NET Core 1.1.12 and .NET Core SDK 1.1.13 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.1/1.1.12/1.1.12.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/1.1) )\r\n\r\n* .NET Core 2.1.9 and .NET Core SDK 2.1.505 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.9/2.1.9.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.1) )\r\n\r\n* .NET Core 2.2.3 and .NET Core SDK 2.2.105 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.3/2.2.3.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.2) )\r\n\r\nA discussion issue is available at [core/2432](https://github.com/dotnet/core/issues/2432)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/103","RelatedDescription":"Open issue \"March 2019 .NET Updates\" (#103)"},{"Id":"415363751","IsPullRequest":false,"CreatedAt":"2019-02-27T22:49:51","Actor":"leecow","Number":"102","RawContent":null,"Title":"SDK Installers will remove previous patch versions","State":"open","Body":"The SDK Installers for Windows will upgrade patch versions in place within the same feature band. This will reduce the number of SDKs that are installed on programmer machines.\r\n\r\nFeature bands of the SDK are defined like 3.0.1nn. [Find out more about SDK version numbers](https://docs.microsoft.com/dotnet/core/versions/#versioning-details).\r\n\r\nThis means when .NET Core SDK 3.0.101 becomes available and is installed, .NET Core SDK 3.0.100 will be removed from the machine if it exists. When .NET Core SDK 3.0.200 becomes available and is installed on the same machine, .NET Core SDK versions like 3.0.101 will not be removed but stay side by side with 3.0.200.\r\n\r\nThis approach supports use of `global.json` which will roll forward across patch versions, but not feature bands of the SDK. Thus, upgrading via the SDK installer will not result in errors due to a missing SDK. Feature bands also align with side by side Visual Studio installations for those users that install SDKs for Visual Studio use. For example, Visual Studio 15.9 uses .NET Core SDK 2.2.500 but does not support .NET Core SDK 2.2.600.\r\n\r\nFind out how to [remove other .NET Core SDK versions here.](https://docs.microsoft.com/dotnet/core/versions/remove-runtime-sdk-versions).","Url":"https://github.com/dotnet/announcements/issues/102","RelatedDescription":"Open issue \"SDK Installers will remove previous patch versions\" (#102)"},{"Id":"410971363","IsPullRequest":false,"CreatedAt":"2019-02-15T22:24:40","Actor":"richlander","Number":"101","RawContent":null,"Title":"Publishing .NET Core images to Microsoft Container Registry (MCR)","State":"open","Body":"# Publishing .NET Core images to Microsoft Container Registry (MCR)\r\n\r\nMicrosoft teams are now publishing container images to the [Microsoft Container Registry](https://azure.microsoft.com/en-us/blog/microsoft-syndicates-container-catalog/). There are two primary reasons for this change:\r\n\r\n* Syndicate Microsoft-provided container images to multiple registries, like Docker Hub and Red Hat.\r\n* Use Microsoft Azure as a global CDN for delivering Microsoft-provided container images.\r\n\r\nYou will use and see MCR as a storage back-end for Microsoft images. The primary way you learn about Microsoft container images and tags will be through a registry, which for most users will continue to be Docker Hub. Most of the experience you've had browsing for .NET Core container images will continue unchanged with this new model. The Docker Hub URLs you've used for Microsoft repos will continue to work, and forward to updated locations on Docker Hub. Existing Docker Hub will images will be maintained as-is.\r\n\r\nSee [.NET Core Container Images now Published to Microsoft Container Registry](https://devblogs.microsoft.com/dotnet/net-core-container-images-now-published-to-microsoft-container-registry/) for the most updated information on our use of MCR.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #935](https://github.com/dotnet/dotnet-docker/issues/935)\r\n\r\n## Starting with .NET Core nightly repo\r\n\r\nOn the .NET team, we started our [transition to MCR](https://github.com/dotnet/dotnet-docker/issues/745) with the .NET Core \"nightly\" repo. [dotnet-nightly](dockerhub.com/r/microsoft/dotnet-nightly) is now hosted on MCR and syndicated to Docker Hub. We started with the nightly repo in order to discover and fix any challenges we found with this new model before we move our higher-traffic primary container repository.\r\n\r\nWe will start publishing [dotnet](dockerhub.com/r/microsoft/dotnet) to MCR a bit later, in either February or March. This issue will be updated when that happens.\r\n\r\n## Repo Split\r\n\r\nThe [.NET Core repo](https://hub.docker.com/r/microsoft/dotnet) currently includes 4 major categories of tags: \r\n\r\n* `sdk`\r\n* `aspnetcore-runtime`\r\n* `runtime` \r\n* `runtime-deps`\r\n\r\nProviding all of the tags in one place has helped with discoverability but made for a repo with an enormous README that can be challenging to navigate and consume. It is large enough that we exceeded Docker Hub README limits and had to artificially make it smaller.\r\n\r\nGoing forward, we will provide a repo for each of the tag categories listed above. We'll also provide a \"product repo\" that will hierarchicaly group all of our repos together. This will satisfy discoverability needs so that it will be easy to find the tags you want.\r\n\r\nYou can already see this experience with [microsoft-dotnet-core-nightly](https://hub.docker.com/_/microsoft-dotnet-core-nightly). There are now multiple repos for our nightly builds:\r\n\r\n* [.NET Core Nightly product repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly)\r\n* [.NET Core SDK Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-sdk/)\r\n* [.NET Core ASP.NET Core Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-aspnet/)\r\n* [.NET Core Runtime Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-runtime/)\r\n* [.NET Core Runtime-deps Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-runtime-deps/)\r\n\r\nThe same split will exist for the non-nightly stable repo (currently hosted at  [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet)) when we start publishing it to MCR and syndicating it back to DockerHub.\r\n\r\n## Changes to registry URL\r\n\r\nThe biggest change is that your Dockerfiles need to be updated to point to the MCR registry in order get access to new .NET Core container tags. The same change is required for scripts or human operations that pull images via `docker pull`.\r\n\r\nThe following example shows the registry path, repo and tag for the .NET Core 2.2 \"Nightly\" SDK on MCR:\r\n\r\n```console\r\nmcr.microsoft.com/dotnet/core-nightly/sdk:2.2\r\n```\r\n\r\nAs comparison, the following repo and tag have been used to date for the .NET Core 2.2 \"Nightly\" SDK on Docker Hub:\r\n\r\n```console\r\nmicrosoft/dotnet-nightly:2.2-sdk\r\n```\r\n\r\nThe new repo URL is provided at each of the news repos. For example, the new .NET Core SDK \"nightly\" repo provides a box on the right where you can copy and paste the correct MCR-based repo syntax that you can use for `docker pull` or in `FROM` statements in your Dockerfiles.\r\n\r\n![image](https://user-images.githubusercontent.com/2608468/52811702-95c5eb80-304a-11e9-8de8-e6ea1f4b4d75.png)\r\n\r\n## Servicing existing Docker Hub tags\r\n\r\nWe will continue to service existing non-version-specific or floating tags on Docker Hub while the associated .NET Core version is supported. For example the `microsoft/dotnet:2.1-sdk` tag is a floating tag that will continue to be serviced for the lifetime of .NET Core 2.1. You can continue using floating tags without issue.\r\n\r\nIf you use non-floating tags, like `microsoft/dotnet:2.1.504-sdk-alpine`, then you will need to update your Dockerfile to use a new non-floating tag. No new non-floating tags will be published to `microsoft/dotnet` and `microsoft/dotnet-nightly` after we fully transition to MCR.\r\n\r\n.NET Core 3.0 Preview 3 and later will only be made available on MCR.\r\n\r\n## Microsoft is a Verified Publisher\r\n\r\nUntil now, Microsoft-provided container images were considered \"community images\". As part of this change, we are re-classifying Microsoft as a \"verified publisher\" on Docker Hub. This designation should make it clearer that .NET and other Microsoft-provided images are coming from a verified source. There clearly was that expectation previously, but Docker is now making that clearer in the Docker Hub pages they host for Microsoft.\r\n\r\nWe will provide official vulnerability scanning Microsoft-provided images as a second phase of this transition.","Url":"https://github.com/dotnet/announcements/issues/101","RelatedDescription":"Open issue \"Publishing .NET Core images to Microsoft Container Registry (MCR)\" (#101)"},{"Id":"410784442","IsPullRequest":false,"CreatedAt":"2019-02-15T14:06:29","Actor":"TaraOverfield","Number":"100","RawContent":null,"Title":"RESOLVED: Advisory on February 2019 Security update for Windows 10 update 1809","State":"open","Body":"<strong><em>Final Update 2/19/19 @1:30 PM (PST)</em></strong><em>: This </em><em>advisory is now resolved with no action needed from Microsoft Customers. The issue was not applicable to any valid or supported configuration. There is no consequence for .NET 4.8 Preview customers. </em>\r\n\r\n<em>We strive to share timely information to protect our customer’s productivity, in this case, our finding was thankfully of no consequence for customers on supported configurations.</em>\r\n\r\n<del><em><strong>Update 2/15/19 @3:35 PM (PST)</strong></em><em>: As we continue our investigation, we are finding the issue to be restricted to a limited and isolated set of test-only systems that are using non-official versions of the .NET 4.8 Preview. As of 2/15/19 around 12:00 pm (PST) we further tightened our delivery mechanisms to ensure that the February .NET security updates are only deployed to their expected target systems.</em></del>\r\n\r\n<del><span>The </span><a href=\"https://blogs.msdn.microsoft.com/dotnet/2019/02/13/net-framework-february-2019-security-and-quality-rollup/\" rel=\"nofollow\">February 2019 Security and Quality Rollup for Windows 10 update 1809</a><span> was released earlier this week. We have received multiple customer reports of issues when a customer has installed .NET Framework 4.8 Preview then installed the February security update, <a href=\"https://support.microsoft.com/kb/4483452\" rel=\"nofollow\">4483452</a>.</span> These reports are specific to only to the scenario when a customer has installed both .NET Framework 4.8 Preview and the February security update.</del>\r\n\r\n<del>We are actively working on investigating and addressing this issue. If you installed the February 2019 security update and have not seen any negative behavior, we recommend that you leave your system as-is but closely monitor it and ensure that you apply upcoming .NET Framework updates.</del>\r\n\r\n<del>We will continue to update this <a href=\"https://github.com/dotnet/announcements/issues/100\" rel=\"nofollow\">post</a> as we have new information.</del>\r\n<h2><del>Guidance</del></h2>\r\n<del>We are working on guidance and will update this post and as we have new information.</del>\r\n<h2><del>Workaround</del></h2>\r\n<del>There are no known workarounds at this time.</del>\r\n<h2><del>Symptoms</del></h2>\r\n<del>After installing .NET Framework 4.8 Preview then the February 2019 security update, <a href=\"https://support.microsoft.com/kb/4483452\" rel=\"nofollow\">4483452</a>, Visual Studios will crash with this error message:</del>\r\n<p class=\"xxxxxmsonormal\"><del><b><span style=\"font-size: 10.5pt;font-family: 'Segoe UI',sans-serif;color: black\">\"Exception has been thrown by the target of an invocation.\"</span></b></del></p>","Url":"https://github.com/dotnet/announcements/issues/100","RelatedDescription":"Open issue \"RESOLVED: Advisory on February 2019 Security update for Windows 10 update 1809\" (#100)"},{"Id":"410455095","IsPullRequest":false,"CreatedAt":"2019-02-14T19:28:25","Actor":"richlander","Number":"99","RawContent":null,"Title":"Supporting new Alpine versions (for containers)","State":"open","Body":"# Supporting new Alpine versions (for containers)\r\n\r\n[Alpine 3.9](https://twitter.com/alpinelinux/status/1090416212822110214) was recently announced. Congratulations, Alpine team! On the .NET team, we are committed to supporting new Alpine versions quickly, and also need to define a policy for older versions. This policy only applies for the container images that we publish.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #933](https://github.com/dotnet/dotnet-docker/issues/933)\r\n\r\n## Policy\r\n\r\nWe intend to establish the following policy for supporting Alpine with .NET Core container images:\r\n\r\n* Support new Alpine versions within 60 days of release (hopefully much less).\r\n* Support n-1 Alpine versions for 3 months after we support a new Alpine version.\r\n\r\nNote: The [.NET Core support policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md) may be broader. This policy is specific to the container images we produce.\r\n\r\n## Plans\r\n\r\nWe're in the process of [fixing issues required to support Alpine 3.9](https://github.com/dotnet/dotnet-docker/issues/921). We expect that these issues will be resolved in February and that we'll be able to provide support for Alpine 3.9 in March.\r\n\r\nWe will produce Alpine 3.9 images for .NET Core 2.1, 2.2 and 3.0. Assuming we publish 3.9 images in March, we'll stop producing and supporting Alpine 3.7 and 3.8 images after June (2019).\r\n\r\n## Using Alpine-based .NET Core images\r\n\r\nWe produce a variety of Alpine-based images. You can either depend on a specific Alpine version, like with `microsoft/dotnet:2.2-sdk-alpine3.8` or opt to use the latest Alpine image we have to offer, like with `microsoft/dotnet:2.2-sdk-alpine`. Either are good choices. It is just a question of whether you want to make a conscious decision to move to later Alpine releases.\r\n\r\n## Support for ARM32?\r\n\r\nWe produce Alpine images for x64 (and ARM64, shortly). The [Alpine 3.9 announcement](https://twitter.com/alpinelinux/status/1090416212822110214) made mention of support for ARM32v7. We would like to enable .NET Core [Alpine-based images on ARM32](https://github.com/gliderlabs/docker-alpine/issues/463#issuecomment-460530395). We are patiently waiting for that to happen. If that's important to you, you should comment on that thread.","Url":"https://github.com/dotnet/announcements/issues/99","RelatedDescription":"Open issue \"Supporting new Alpine versions (for containers)\" (#99)"},{"Id":"409840927","IsPullRequest":false,"CreatedAt":"2019-02-13T14:48:21","Actor":"TaraOverfield","Number":"98","RawContent":null,"Title":"February 2019 .NET Updates","State":"open","Body":"# February 2019 .NET Updates\r\nThe following .NET updates were released in February 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n* [.NET Framework February 2019 Security and Quality Rollup - February 12, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/02/13/net-framework-february-2019-security-and-quality-rollup/)\r\n* [.NET Framework February 2019 Preview of Quality Rollup - February 19, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/02/19/net-framework-february-2019-preview-of-quality-rollup/)\r\n\r\n## .NET Support Policies\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/98","RelatedDescription":"Open issue \"February 2019 .NET Updates\" (#98)"},{"Id":"409436643","IsPullRequest":false,"CreatedAt":"2019-02-12T18:21:22","Actor":"leecow","Number":"97","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0657: .NET Core Domain Spoofing Vulnerability","State":"open","Body":"## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 1.0, 1.1, 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a domain spoofing vulnerability in .NET Framework and .NET Core which causes the meaning of a URI to change when International Domain Name encoding is applied. An attacker who successfully exploited the vulnerability could redirect a URI.\r\n\r\nThe security update addresses the vulnerability by disallowing certain Unicode characters from the URI.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/35265\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nMicrosoft has not identified any mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core 1.0 or 1.1 based application that uses the [System.Private.Uri](https://www.nuget.org/packages/System.Private.Uri/) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.Private.Uri | 4.3.0 | 4.3.1\r\n\r\nAny .NET Core 2.1 or 2.2 based application that uses the [Microsoft.NETCore.App](https://www.nuget.org/packages/Microsoft.NETCore.App) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nMicrosoft.NETCore.App | 2.1.0, 2.1.1, 2.1.2, 2.1.3, 2.1.4, 2.1.5, 2.1.6, 2.1.7, 2.2.0, 2.2.1 | 2.1.8, 2.2.2\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n#### Applications that use Microsoft.NetCore.App\r\n\r\n`System.Private.Uri` is distributed as part of the .NET Core 2.1 runtime. To check the currently installed runtimes, open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed, you'll see output like the following;\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your host version is 2.1.x and the highest `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\nIf your host version is 2.2.x and the highest 2.1.x `Microsoft.NETCore.App` runtime version is less than 2.2.1, you're vulnerable to this issue.\r\n\r\nYou will not see SDK versions if you have only installed the runtime.\r\n\r\n#### Applications not using Microsoft.NetCore.App\r\n\r\nThe affected assembly is also available separately as a NuGet package. If you are not using Microsoft.NetCore.App, you may still be affected if you are referencing the packages listed above.\r\n\r\n##### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file. They can be fixed by [editing the project file](#fixing-direct-dependencies) or using NuGet to update the dependency.\r\n\r\n##### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects\r\n\r\nThe `project.assets.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json)).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `System.Private.Uri/4.3.0` is a reference to version 4.3.0 of `System.Private.Uri`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\n#### Updating the version of Microsoft.NETCore.App\r\n\r\nIf your host version is a 2.1.x host you must install version 2.1.8 or later of the [.NET Core 2.1 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.1), or corresponding [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\nIf your host version is a 2.2.x you must install version 2.2.2 or later of the [.NET Core 2.2 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.2), or corresponding  [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\n#### <a name=\"fixing-direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Private.Uri\" Version=\"4.3.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.Private.Uri` version 4.3.0\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.Private.Uri` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Private.Uri\" Version=\"4.3.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"transitive-dependencies\"></a>Fixing transitive dependencies\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Private.Uri\" Version=\"4.3.0\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n##### Rebuilding your application\r\n\r\nFinally, you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2019-0657](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0657)\r\n\r\n### Revisions\r\n\r\nV1.0 (February 12, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-02-08_\r\n","Url":"https://github.com/dotnet/announcements/issues/97","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0657: .NET Core Domain Spoofing Vulnerability\" (#97)"},{"Id":"397026248","IsPullRequest":false,"CreatedAt":"2019-01-08T18:17:45","Actor":"leecow","Number":"96","RawContent":null,"Title":"January 2019 .NET Updates","State":"open","Body":"# January 2019 .NET Updates\r\n\r\nThe following .NET updates were released in January 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n\r\n* [.NET Framework January 2019 Preview of Quality Rollup - January 15, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/01/15/net-framework-january-2019-preview-of-quality-rollup/)\r\n* [.NET Framework January 2019 Security and Quality Rollup - January 8, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/01/08/net-framework-january-2019-security-and-quality-rollup/)\r\n* [.NET Framework January 22, 2018 Preview of Cumulative Update for Windows 10 version 1809 and Windows Server 2019 - January 22, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/01/22/net-framework-january-22-2018-preview-of-cumulative-update-for-windows-10-version-1809-and-windows-server-2019/)\r\n\r\n## .NET Core\r\n\r\n* .NET Core 2.1.7 and .NET Core SDK 2.1.503 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.7/2.1.7.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.1) )\r\n\r\n* .NET Core 2.2.1 and .NET Core SDK 2.2.102 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.1/2.2.1.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.2) )\r\n\r\nA discussion issue is available at [core/2210](https://github.com/dotnet/core/issues/2210)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/96","RelatedDescription":"Open issue \"January 2019 .NET Updates\" (#96)"},{"Id":"397020176","IsPullRequest":false,"CreatedAt":"2019-01-08T18:00:27","Actor":"blowdart","Number":"95","RawContent":null,"Title":" Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a tampering vulnerability exists when .NET Core improperly handles specially crafted files. An attacker who successfully exploited this vulnerability could write arbitrary files and directories to certain locations on a vulnerable system. However, an attacker would have limited control over the destination of the files and directories.\r\n\r\nTo exploit the vulnerability, an attacker must send a specially crafted file to a vulnerable system\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core handles these files.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/34427\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nIf your application does not extract ZIP compressed files it is unaffected.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the [System.IO.Compression.ZipFile](https://www.nuget.org/packages/System.IO.Compression.ZipFile/) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nMicrosoft.NETCore.App (System.IO.Compression.ZipFile) | 2.1.0, 2.1.1, 2.1.2, 2.1.3, 2.1.4, 2.1.5, 2.1.6 | 2.1.7\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n`System.IO.Compression.ZipFile` is distributed as part of the .NET Core 2.1 runtime. To check the currently installed runtimes, open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed, you'll see output like the following;\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your host version is 2.1.x and the highest `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\nIf your host version is 2.2.x and the highest 2.1.x `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\n\r\nYou will not see SDK versions if you have only installed the runtime.\r\n\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nIf your host version is a 2.1.x host you must install version 2.1.7 or later of the [.NET Core 2.1 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.1), or corresponding [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\nIf your host version is a 2.2.x you must install version 2.2.1 or later of the [.NET Core 2.2 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.2), or corresponding  [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\nFinally, you must restart your applications once an updated runtime or SDK is installed.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgments\r\n\r\n[Danny Grander](https://twitter.com/grander) of [Snyk](https://snyk.io/)\r\n\r\n### External Links\r\n\r\n[CVE-2018-8416](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-8416)\r\n\r\n### Revisions\r\n\r\nV1.1 (January 9, 2019): Correct affected pacakge table.\r\nV1.0 (January 8, 2019): Advisory published.\r\n\r\n_Version 1.1_\r\n\r\n_Last Updated 2019-01-09_\r\n\r\n","Url":"https://github.com/dotnet/announcements/issues/95","RelatedDescription":"Open issue \" Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability\" (#95)"},{"Id":"397020142","IsPullRequest":false,"CreatedAt":"2019-01-08T18:00:23","Actor":"blowdart","Number":"94","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of an information disclosure vulnerability exists in .NET Framework and .NET Core which allows bypassing Cross-origin Resource Sharing (CORS) configurations. An attacker who successfully exploited the vulnerability could retrieve content, that is normally restricted, from a web application.\r\n\r\nThe security update addresses the vulnerability by enforcing CORS configuration to prevent its bypass.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/34428\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nMicrosoft has not identified any mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the [System.Net.Http](https://www.nuget.org/packages/System.Net.Http/) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nMicrosoft.NETCore.App (System.Net.Http) | 2.1.0, 2.1.1, 2.1.2, 2.1.3, 2.1.4, 2.1.5, 2.1.6 | 2.1.7\r\nMicrosoft.NETCore.App (System.Net.Http) | 2.2.0 | 2.2.1\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n#### Applications that use Microsoft.NetCore.App\r\n\r\n`System.Net.Http` is distributed as part of the .NET Core 2.1 runtime. To check the currently installed runtimes, open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed, you'll see output like the following;\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your host version is 2.1.x and the highest `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\nIf your host version is 2.2.x and the highest 2.1.x `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\n\r\nYou will not see SDK versions if you have only installed the runtime.\r\n\r\n#### Applications not using Microsoft.NetCore.App\r\n\r\nThe affected assembly is also available separately as a NuGet package. If you are not using Microsoft.NetCore.App, you may still be affected if you are referencing the packages listed above.\r\n\r\n##### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file. They can be fixed by [editing the project file](#fixing-direct-dependencies) or using NuGet to update the dependency.\r\n\r\n##### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects\r\n\r\nThe `project.assets.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json)).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `SSystem.Net.Http/4.3.0` is a reference to version 4.3.0 of `System.Net.Http`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\n#### Updating the version of Microsoft.NETCore.App\r\n\r\nIf your host version is a 2.1.x host you must install version 2.1.7 or later of the [.NET Core 2.1 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.1), or corresponding [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\nIf your host version is a 2.2.x you must install version 2.2.1 or later of the [.NET Core 2.2 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.2), or corresponding  [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\n#### <a name=\"fixing-direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.Net.Http` version 4.3.0\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.IO.Pipelines` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.5\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"transitive-dependencies\"></a>Fixing transitive dependencies\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.5\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n##### Rebuilding your application\r\n\r\nFinally, you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2019-0545](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0545)\r\n\r\n### Revisions\r\n\r\nV1.1 (January 9, 2019): Correct affected package table. \r\nV1.0 (January 8, 2019): Advisory published.\r\n\r\n_Version 1.1_\r\n\r\n_Last Updated 2019-01-09_\r\n","Url":"https://github.com/dotnet/announcements/issues/94","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability\" (#94)"},{"Id":"390948658","IsPullRequest":false,"CreatedAt":"2018-12-14T03:22:58","Actor":"wu-yafeng","Number":"93","RawContent":null,"Title":"Docker image with tag '2.2-aspnetcore-runtime' is not compatible","State":"closed","Body":"1. Install  .NET Core 2.2.100 sdk\r\n2. Create a new 'AspNetCore Web Api' by using Visual Studio 2017,and enbale docker support.\r\n3. F5 ,the Output Windows shows:\r\n>It was not possible to find any compatible framework version\r\n>The specified framework 'Microsoft.AspNetCore.App', version '2.2.0' was not found.\r\n>  - Check application dependencies and target a framework version installed at:\r\n>      /usr/share/dotnet/\r\n>  - Installing .NET Core prerequisites might help resolve this problem:\r\n>     http://go.microsoft.com/fwlink/?LinkID=798306&clcid=0x409\r\n>  - The .NET Core framework and SDK can be installed from:\r\n>      https://aka.ms/dotnet-download\r\n>  - The following versions are installed:\r\n>      2.2.0-preview3-35497 at [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]","Url":"https://github.com/dotnet/announcements/issues/93","RelatedDescription":"Closed issue \"Docker image with tag '2.2-aspnetcore-runtime' is not compatible\" (#93)"},{"Id":"390193072","IsPullRequest":false,"CreatedAt":"2018-12-12T12:56:53","Actor":"bilalmalik777","Number":"92","RawContent":null,"Title":".net core Console","State":"closed","Body":"I am running dot net core console app as web jobs and it is working perfectly in docker with docker compose. Now the issue is I want to pass a value to the application via Console.ReadLine() over this value i make some decision but i am unable to pass value via Console.ReadLine(). How i can do it please help me. For more understanding, i have added my docker compose file below\r\n`version: '3.4'\r\n\r\nservices:\r\n  \r\n  tt.core.web:\r\n    image: ${DOCKER_REGISTRY-}ttcoreweb\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.Web/Dockerfile\r\n    depends_on:\r\n     - db\r\n    networks:\r\n     - app-network\r\n\r\n  tt.core.downtime.webjob:\r\n    image: ${DOCKER_REGISTRY-}ttcoredowntimewebjob\r\n    environment:\r\n      CORE_ENVIRONMENT: devdocker\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.Downtime.Webjob/Dockerfile\r\n    depends_on:\r\n     - db\r\n     - tt.core.web\r\n    networks:\r\n     - app-network\r\n\r\n  db:\r\n    image: microsoft/mssql-server-linux\r\n    container_name: db\r\n    environment:\r\n      SA_PASSWORD: \"Thingtrax%1\"\r\n      ACCEPT_EULA: \"Y\"\r\n      MSSQL_PID: Express\r\n    ports:\r\n      - \"7002:1433\"\r\n    networks:\r\n      app-network:\r\n        ipv4_address: 172.24.0.2\r\n\r\nnetworks:\r\n  app-network:\r\n    ipam:\r\n      driver: default\r\n      config:\r\n        - subnet: 172.24.0.0/16\r\n\r\n`\r\nIf the detail is not enough or you do not get my point, you can share your confusion in comment","Url":"https://github.com/dotnet/announcements/issues/92","RelatedDescription":"Closed issue \".net core Console\" (#92)"},{"Id":"380346599","IsPullRequest":false,"CreatedAt":"2018-11-13T17:44:44","Actor":"leecow","Number":"91","RawContent":null,"Title":"November 2018 .NET Updates","State":"open","Body":"# November 2018 .NET Updates\r\n\r\nThe following .NET updates were released in November 2018. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Core\r\n\r\n* [.NET Core November 2018 (2.1.6 and SDK 2.1.500) Update release notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.6/2.1.6.md)\r\n\r\nA [discussion issue](https://github.com/dotnet/core/issues/2053) is available for questions or feedback about this release.\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n* [October 2018](https://github.com/dotnet/announcements/issues/89)\r\n* [September 2018](https://github.com/dotnet/announcements/issues/84)\r\n* [August 2018](https://github.com/dotnet/announcements/issues/79)\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)","Url":"https://github.com/dotnet/announcements/issues/91","RelatedDescription":"Open issue \"November 2018 .NET Updates\" (#91)"},{"Id":"375230004","IsPullRequest":false,"CreatedAt":"2018-10-29T21:45:27","Actor":"terrajobst","Number":"90","RawContent":null,"Title":"The future of JSON in .NET Core 3.0","State":"open","Body":"JSON has become an essential part of virtually all modern .NET applications and in many cases even surpassed the usage of XML. However, .NET hasn't had a (great) built-in way to deal with JSON. Instead we've relied on [Json.NET] which continues to serve the .NET ecosystem well.\r\n\r\n[Json.NET]: https://www.newtonsoft.com/json\r\n\r\nMoving forward, we plan on making some changes to our JSON support:\r\n\r\n* **We need high-performance JSON APIs**. We need a new set of JSON APIs that are highly tuned for performance by using `Span<T>` and allows for processing UTF-8 directly without having to transcode to UTF-16 `string` instances. Both aspects are critical for our web server Kestrel, where throughput is a key requirement.\r\n\r\n* **Remove dependency from ASP.NET Core to Json.NET**. Today, ASP.NET Core has a dependency on Json.NET. While this provides a tight integration between ASP.NET Core and Json.NET, it also means that application developers cannot freely choose which JSON library they are using. This is also problematic for customers of Json.NET as the version is dictated by the underlying platform. However, Json.NET is frequently updated and application developers often want to -- or even have to -- use a specific version. Thus, we want to remove the dependency from ASP.NET Core 3.0 to Json.NET so that customers can choose which version to use, without fearing they might accidentally break the underlying platform. In addition, this makes it also possible to plug-in an entirely different JSON library.\r\n\r\n* **Provide an ASP.NET Core integration package for Json.NET**. Json.NET has basically become the Swiss Army knife of JSON processing in .NET. It provides many options and facilities that allow customers to handle their JSON needs with ease. We don't want to compromise on the Json.NET support customers are getting today, for example, the ability to configure the JSON serialization via the `AddJsonOptions` extension method. Thus, we want to provide the Json.NET integration as a NuGet package that developers can optionally install so they get all the bells and whistles they get from Json.NET today. The other part of this work item is to ensure we have the right extension points so that other parties can provide similar integration packages for their JSON library of choice.\r\n\r\nBelow are more details around this plan.\r\n\r\n## The need for high-performance JSON APIs\r\n\r\nThe requirements for the .NET stack have changed a bit since the arrival of .NET Core. Historically, .NET has valued usability and convenience. With .NET Core, we've added a focus on performance, and we've made significant investments to serve high performance needs. And the [improvements we made][techempower] in the popular TechEmpower benchmark are a testament to that.\r\n\r\n[techempower]: https://www.techempower.com/blog/2016/11/16/framework-benchmarks-round-13/\r\n\r\nWith .NET Core 2.1, we've added a brand new primitive called [Span\\<T>][span-msdn] that allows us to represent native memory and arrays in a uniform way. With this type, we've also added a set of parsing and encoding APIs that are much more memory efficient without having to resort to unsafe code.\r\n\r\n[span-msdn]: https://msdn.microsoft.com/en-us/magazine/mt814808.aspx\r\n\r\nPart of the work of minimizing allocations is to avoid having to transcode UTF-8 payloads into UTF-16 strings, purely for parsing reasons. Currently, Json.NET is implemented by reading UTF-16. We need the ability to read (and write) JSON documents directly in UTF-8 because most network protocols (including HTTP) use UTF-8.\r\n\r\nDuring .NET Core 2.1 we've learned that updating our existing APIs to leverage `Span<T>` has limits. While we did add a bunch of overloads that accept spans, we also had to produce brand new APIs that are designed around minimizing allocations and dealing with buffers, which we exposed in `System.Buffers` namespaces. And with `System.IO.Pipelines` we've also added a programming model that enables developers to share buffers without having to deal with lifetime issues.\r\n\r\nBased on these experiences we believe in order to support JSON parsing, we'll need to expose a new set of JSON APIs that are specifically geared for high-performance scenarios.\r\n\r\nYou might wonder why we can't just update Json.NET to include support for parsing JSON using `Span<T>`? Well, James Newton-King -- the author of Json.NET -- has the following to say about that:\r\n\r\n> Json.NET was created over 10 years ago, and since then it has added a wide range of features aimed to help developers work with JSON in .NET. In that time Json.NET has also become far and away NuGet's most depended on and downloaded package, and is the go-to library for JSON support in .NET. Unfortunately, Json.NET's wealth of features and popularity works against making major changes to it. Supporting new technologies like `Span<T>` would require fundamental breaking changes to the library and would disrupt existing applications and libraries that depend on it.\r\n>\r\n> Going forward Json.NET will continue to be worked on and invested in, both addressing known issues today and supporting new platforms in the future. Json.NET has always existed alongside other JSON libraries for .NET, and there will be nothing to prevent you using one or more together, depending on whether you need the performance of the new JSON APIs or the large feature set of Json.NET.\r\n\r\n## Move Json.NET integration into a separate NuGet package\r\n\r\nToday, you cannot use ASP.NET Core without Json.NET because it is a dependency of ASP.NET Core itself. Over the years, we've received feedback that the dependency can conflict with other libraries that have their own dependency on a different version of Json.NET. In the past, we've considered addressing this issue by using a private copy of Json.NET in ASP.NET. However, this would create problems when developers want to configure Json.NET (for instance, in order to control how the serializer behaves when formatting JSON objects).\r\n\r\nMoving forward we'd like to:\r\n\r\n1. Replace the internal usage of Json.NET in ASP.NET Core by the new platform-provided JSON APIs.\r\n\r\n2. Factor the public facing usage of Json.NET into an optional integration package that can be acquired from NuGet.\r\n\r\nSo the existing integration between ASP.NET Core and Json.NET will continue to be supported, but will be moving out of the platform and into a separate package. However, since the integration is then designed to sit on top of the platform, it will also allow customers to update Json.NET to later versions.\r\n\r\nFurthermore, customers who need more performance can also choose to use the new JSON APIs, at the expense of the rich feature set that Json.NET offers.\r\n\r\n## Discussion\r\n\r\nFor a discussion, please go to https://github.com/dotnet/corefx/issues/33115.","Url":"https://github.com/dotnet/announcements/issues/90","RelatedDescription":"Open issue \"The future of JSON in .NET Core 3.0\" (#90)"},{"Id":"368440353","IsPullRequest":false,"CreatedAt":"2018-10-09T23:44:06","Actor":"vivmishra","Number":"89","RawContent":null,"Title":"October 2018 .NET Updates","State":"open","Body":"# October 2018 .NET Updates\r\n\r\nThe following .NET updates were released in October 2018. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Core\r\n\r\n* [.NET Core October 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/10/09/net-core-october-2018-update-net-core-1-0-and-1-1/)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n* [September 2018](https://github.com/dotnet/announcements/issues/84)\r\n* [August 2018](https://github.com/dotnet/announcements/issues/79)\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)","Url":"https://github.com/dotnet/announcements/issues/89","RelatedDescription":"Open issue \"October 2018 .NET Updates\" (#89)"},{"Id":"368429033","IsPullRequest":false,"CreatedAt":"2018-10-09T22:51:18","Actor":"leecow","Number":"88","RawContent":null,"Title":"Microsoft Security Advisory CVE-2018-8292: .NET Core Information Disclosure Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-8292: .NET Core Information Disclosure Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a security feature bypass vulnerability that exists when .NET Core when HTTP authentication information is inadvertently exposed in an outbound request that encounters an HTTP redirect. An attacker who successfully exploited this vulnerability could use the information to further compromise the web application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core applications handles HTTP redirects.\r\n\r\nSystem administrators running .NET Core 1.0 or .NET Core 1.1 applications must update their .NET Core runtimes to versions 1.0.13 and 1.1.10 then restart their applications. If installed applications target .NET Core 2.0, the applications must be migrated to 2.1 or newer and redeployed.\r\n\r\nDevelopers must update their .NET Core SDK to versions 1.1.11 and migrate any [.NET Core 2.0](https://docs.microsoft.com/dotnet/core/migration/20-21) or [ASP.NET Core 2.0](https://docs.microsoft.com/aspnet/core/migration/20_21?view=aspnetcore-2.1) applications to 2.1 then redeploy.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at <https://github.com/dotnet/corefx/issues/32730>\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nNone\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core application that runs on a .NET Core 1.0.x runtime with a version number of 1.0.12 or lower, or a .NET Core application that runs on a .NET Core 1.1.x runtime with a version number of 1.1.9 or lower, or a .NET Core application that runs on a .NET Core 2.0.x runtime.\r\n\r\nAdditionally package authors should check their dependencies to ensure they aren't depending on a vulnerable version of the following package:\r\n\r\n<a name=\"package-list\"></a>Package name | Vulnerable versions | Secure versions\r\n------------ | ---------------- | -------------------------\r\nSystem.Net.Http| 2.0.20126.16343, 2.0.20505, 2.0.20710, 4.0.0, 4.1.0, 4.1.1, 4.1.2, 4.3.0, 4.3.1, 4.3.2, 4.3.3 |  4.3.4 or later\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nAny .NET Core application that runs on a .NET Core 1.0.x runtime with a version number of 1.0.12 or lower, or a .NET Core application that runs on a .NET Core 1.1.x runtime with a version number of 1.1.9 or lower, or a .NET Core application that runs on a .NET Core 2.0.x runtime.\r\n\r\nTo check the currently installed runtimes and SDKs with version 2.1 or later of .NET Core, open a command prompt and run the `dotnet --info` command. You should see an output similar to the following:\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.1.403\r\n Commit:    04e15494b6\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17763\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.403\\\r\n\r\nHost (useful for support):\r\n  Version: 2.1.5\r\n  Commit:  290303f510\r\n\r\n.NET Core SDKs installed:\r\n  1.0.4 [C:\\Program Files\\dotnet\\sdk]\r\n  1.1.10 [C:\\Program Files\\dotnet\\sdk]\r\n  2.0.3 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.4 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf you don't see a runtime entry for 1.0.13 or 1.1.10, any .NET Core 1.x applications run on that computer are vulnerable.\r\n\r\nIf you don't have a 2.1 version of the runtime or SDK installed, you can produce the complete list of runtimes by performing a directory listing in the install root directories. The default root directories are listed in the following table:\r\n\r\n| Operating System | Location |\r\n|------------------|----------|\r\n| Windows | `C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\` |\r\n| macOS | `/usr/local/share/dotnet/shared/Microsoft.NETCore.App/` |\r\n| Supported Linux platforms | `/usr/share/dotnet/shared/Microsoft.NETCore.App/` |\r\n\r\nEach runtime version is installed in its own directory, where the directory name is the version number. If you don't have a directory for 1.0.13, 1.1.10 then any application targeting versions 1.0 or 1.1 are vulnerable.\r\n\r\nAdditionally, if you've deployed [self-contained applications](https://docs.microsoft.com/dotnet/core/deploying/#self-contained-deployments-scd) targeting any of the impacted versions, these applications are also vulnerable and must be recompiled and redeployed.\r\n\r\n### <a name=\"fix-runtime\">How do I fix the vulnerability?\r\n\r\nSystem administrators are advised to update their .NET Core runtimes to versions 1.0.13, 1.1.10 and install the latest 2.1 runtime, ensuring that any 2.0 applications are migrated to 2.1 as soon as possible.\r\n\r\n Developers are advised to update their .NET Core SDK to versions 1.1.11 and migrate any [.NET Core](https://docs.microsoft.com/dotnet/core/migration/20-21) or [ASP.NET Core 2.0](https://docs.microsoft.com/aspnet/core/migration/20_21?view=aspnetcore-2.1) applications to 2.1 and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at <https://github.com/dotnet/> and <https://github.com/aspnet/>, respectively. The Announcements repo for each product (<https://github.com/dotnet/Announcements> and <https://github.com/aspnet/Announcements>) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2018-8292](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-CVE-2018-8292)\r\n\r\n### Revisions\r\n\r\nV1.0 (October 10, 2018): Advisory published.\r\n_Version 1.0_\r\n_Last Updated 2018-10-10_\r\n","Url":"https://github.com/dotnet/announcements/issues/88","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2018-8292: .NET Core Information Disclosure Vulnerability\" (#88)"},{"Id":"367393517","IsPullRequest":false,"CreatedAt":"2018-10-05T22:58:51","Actor":"leecow","Number":"87","RawContent":null,"Title":".NET Core Release Data (releases.json) Redesign and v1 Deprecation Plan","State":"open","Body":"# .NET Core Release Data (releases.json) Redesign and Deprecation\r\n\r\nThe releases.json and releases.csv files began life as helper tools for some of our internal release work, some experimentation and to possibly be useful to the community. It has been great to learn the files are indeed in use and many folks depend on them as a trigger for a number of activities.\r\n\r\n* [release-notes/releases.json](https://github.com/dotnet/core/blob/master/release-notes/releases.json)\r\n* [release-notes/releases.csv](https://github.com/dotnet/core/blob/master/release-notes/releases.csv)\r\n\r\nA discussion topic is available to share thoughts and see what others are thinking at https://github.com/dotnet/core/issues/1986\r\n\r\nBetween the usages which we have become aware and in considering further activities that could be enabled to reason about things such as checking .NET Core version availability and support status, it became clear the current format is inadequate.\r\n\r\nAn updated format has been designed and tested which will replace the current files. The timeline below describes the path to obsoleting the current files.\r\n\r\n## The Plan\r\n\r\n| Date | Action |\r\n| :--- | :----- |\r\n| Oct 2018 | Notify the community of the coming change |\r\n| Oct 2018 | Release the new json format into dotnet/core |\r\n| Oct 2018 - Feb 2019 | Maintain the old json and csv files |\r\n| Feb 2019 | Reminder announcement that old format file is coming soon |\r\n| Mar 2019 | Old json and csv files are obsoleted and removed from dotnet/core |\r\n\r\n## Breaking change\r\n\r\nIf you are currently utilizing the old version json or csv, you will need to update the relevant code to work with the new format. If you are just getting started with consuming this data, use the new version.\r\n\r\n## The Format\r\n\r\nBelow are fragments of the files from our most recent .NET Core release.\r\n\r\n### release-index.json\r\n\r\nThis file consists of a top level array with data on the latest release versions and a property for locating the more detailed channel-specific releases.json. This file is found in [dotnet/core/release-notes](https://github.com/dotnet/core/tree/new-json/release-notes/)\r\n\r\n[releases-index.json](https://github.com/dotnet/core/blob/new-json/release-notes/releases-index.json)\r\n\r\n```\r\n{\r\n    \"releases-index\": [\r\n        {\r\n            \"channel-version\": \"2.1\",\r\n            \"latest-release\": \"2.1.5\",\r\n            \"latest-release-date\":\"2018-10-02\",\r\n            \"product\": \".NET Core\",\r\n            \"support-phase\": \"lts\",\r\n            \"eol-date\": \"\",\r\n            \"releases.json\": \"https://github.com/dotnet/core/blob/master/release-notes/2.1/releases.json\",\r\n        },\r\n        ...\r\n}\r\n```\r\n\r\n### releases.json\r\n\r\nThis file provides detailed data for each release. A copy of this file will be found in each versioned directories under [dotnet/core/release-notes](https://github.com/dotnet/core/release-notes). For example [dotnet/core/release-notes/2.1](https://github.com/dotnet/core/tree/new-json/release-notes/2.1)\r\n\r\n\r\n[releases.json](https://github.com/dotnet/core/tree/new-json/release-notes/2.1/releases.json)\r\n\r\n```\r\n{\r\n    \"channel-version\": \"2.1\",\r\n    \"latest-release\": \"2.1.5\",\r\n    \"latest-release-date\":\"2018-10-12\",\r\n    \"support-phase\": \"lts\",\r\n    \"eol-date\": \"\",\r\n    \"lifecycle-policy\": \"https://www.microsoft.com/net/support/policy\",\r\n    \"releases\":\r\n    [\r\n        {\r\n            \"release-date\":  \"2018-10-02\",\r\n            \"release-version\":  \"2.1.5\",\r\n            \"security\":  false,\r\n            \"release-notes\":  \"https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.5/2.1.5.md\",\r\n            \"runtime\":  \r\n            {\r\n                \"version\":  \"2.1.5\",\r\n                \"version-display\":  \"2.1.5\",\r\n                \"vs-version\":  \"15.8.6\",\r\n                \"files\":  \r\n                [\r\n                    {\r\n                        \"name\": \"dotnet-runtime-linux-arm.tar.gz\",\r\n                        \"url\": \"https://download.visualstudio.microsoft.com/download/pr/4d555219-1f04-47c6-90e5-8b3ff8989b9c/0798763e6e4b98a62846116f997d046e/dotnet-runtime-2.1.5-linux-arm.tar.gz\",\r\n                        \"hash\": \"89a77a07065ea24e7198c77a233b9ce5c6cf51b1deb2ef55c88f0adbb2ecd9db1ba4e7d55eec2ef7139c47f91346fed360161a5bb6e3a7ccfc4559bcde286364\"\r\n                    },\r\n                    ...\r\n                ]\r\n            }\r\n            \"sdk\":  \r\n            {\r\n                \"version\":  \"2.1.403\",\r\n                \"version-display\":  \"2.1.403\",\r\n                \"vs-version\":  \"15.8.6\",\r\n                \"csharp-language\":  \"7.3\",\r\n                \"fsharp-language\":  \"4.5\",\r\n                \"files\":  \r\n                [...]\r\n            }\r\n        }\r\n    ]\r\n}\r\n```","Url":"https://github.com/dotnet/announcements/issues/87","RelatedDescription":"Open issue \".NET Core Release Data (releases.json) Redesign and v1 Deprecation Plan\" (#87)"},{"Id":"366416503","IsPullRequest":false,"CreatedAt":"2018-10-03T16:11:18","Actor":"leecow","Number":"86","RawContent":null,"Title":".NET Core 2.0 has reached end of life","State":"open","Body":"[.NET Core 2.0 reached end of life](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/) on October 1, 2018. This means [.NET Core 2.0](https://blogs.msdn.microsoft.com/dotnet/2017/08/14/announcing-net-core-2-0/) is no longer supported and updates will no longer be provided. We recommend moving to [.NET Core 2.1](https://blogs.msdn.microsoft.com/dotnet/2018/05/30/announcing-net-core-2-1/), our long term support (LTS) release.\r\n\r\n- [Download .NET Core 2.1](https://www.microsoft.com/net/download/dotnet-core/2.1)\r\n- [.NET Core 2.1 LTS statement](https://blogs.msdn.microsoft.com/dotnet/2018/08/21/net-core-august-2018-update/)\r\n- [.NET Core 2.0 end-of-life statement](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/)\r\n\r\n## Discussion\r\n\r\nPlease share you thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet/core#1983](https://github.com/dotnet/core/issues/1983)\r\n\r\n## Lifecycle Context\r\n\r\n.NET Core releases belong to one of two [support lifecycles](https://www.microsoft.com/net/platform/support-policy): long term support (LTS) and Current. LTS releases are stable release which receive critical updates and are supported for at least three years. Current releases can include new features that may undergo future change based on feedback. Current releases are supported for three months after the subsequent .NET Core major or minor release. Both LTS and Current releases receive critical fixes throughout their lifecycle, for security, reliability, or to add support for new operating system versions. You must stay up-to-date with the latest patches to qualify for support. \r\n\r\n## .NET Core 2.0 Lifecycle\r\n\r\n[.NET Core 2.0](https://blogs.msdn.microsoft.com/dotnet/2017/08/14/announcing-net-core-2-0/) was released in August 2017 as a Current release. Per the lifecycle policy, Current releases reach end of life 3 months after a subsequent release (Current or LTS). .NET Core 2.1 released May 2018 and began the end of life countdown for .NET Core 2.0. The 3 month maintenance period for .NET Core 2.0 was scheduled to end August 2018 but was [extended to October](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/) to allow time to address an issue some customers were experiencing while migrating to .NET Core 2.1.\r\n\r\n## .NET Core 2.0 Downloads\r\n\r\n.NET Core 2.0 installers, zips and tar.gzs will remain available, but unsupported. This includes existing releases available on Linux package feeds. Previous versions, including 2.0, will be accessible through the [Download Archives](https://www.microsoft.com/net/download/archives). \r\n\r\n## .NET Core 2.0 Docker Images\r\n\r\n.NET Core 2.0 will be removed from the .NET and ASP.NET Docker repo READMEs, however the existing images remain available in those repos.\r\n\r\n* [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/)\r\n* [microsoft/dotnet-nightly](https://hub.docker.com/r/microsoft/dotnet-nightly/)\r\n* [microsoft/aspnetcore](https://hub.docker.com/r/microsoft/aspnetcore/)\r\n* [microsoft/aspnetcore-build](https://hub.docker.com/r/microsoft/aspnetcore-build/)\r\n\r\n## Policy Information\r\n\r\nAdditional lifecycle and support details  and background can be seen in the following:\r\n\r\n* [.NET Core Support Lifecycle](https://www.microsoft.com/net/platform/support-policy)\r\n* [Support and Versioning](https://blogs.msdn.microsoft.com/dotnet/2016/07/26/net-support-and-versioning/)\r\n* [2.0 end of life early announcement](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n","Url":"https://github.com/dotnet/announcements/issues/86","RelatedDescription":"Open issue \".NET Core 2.0 has reached end of life\" (#86)"},{"Id":"361098704","IsPullRequest":false,"CreatedAt":"2018-09-18T01:10:23","Actor":"spshant","Number":"85","RawContent":null,"Title":"NET Framework 4.8 Early Access build 3646 is available!","State":"open","Body":"Today, we are happy to share an Early Access build for the .NET Framework 4.8. This includes an updated .NET 4.8 runtime as well as the .NET 4.8 Developer Pack (a a single package that bundles the .NET Framework 4.8 runtime, the .NET 4.8 Targeting Pack, and the .NET Framework 4.8 SDK). \r\n\r\nPlease help us ensure this is a high quality and compatible release by trying out this build and exploring the new features. \r\n\r\n**Next steps:**\r\nTo explore the new features, download the [.NET 4.8 Developer Pack build 3646](https://go.microsoft.com/fwlink/?LinkId=2018486).  Instead, if you want to try just the .NET 4.8 runtime, you can download either of these:\r\n•\t[.NET 4.8 Web Installer](https://go.microsoft.com/fwlink/?LinkId=2018525) - requires an internet connection during installation \r\n•\t[.NET 4.8 Offline installer](https://go.microsoft.com/fwlink/?LinkId=2018531) - can be downloaded and installed later in a disconnected state\r\n\r\nPlease provide your feedback by [reporting an issue at the .NET Framework Early Access GitHub repository](https://github.com/Microsoft/dotnet-framework-early-access/issues/new).\r\n\r\n**Note**: this release is still under development, you can expect to see more features and fixes in future preview builds. Also, a reminder that this build is not supported for production use.\r\n\r\nThis preview build 3646 includes improvements/fixes in the following areas:\r\n•\t**[Runtime]** JIT and NGEN improvements\r\n•\t**[Windows Forms]** Accessibility enhancements\r\n•\t**[WPF]** SelectionTextBrush Property\r\n•\t**[BCL]** Updated ZLib\r\n\r\nYou can see the complete list of improvements in this build [here](https://github.com/Microsoft/dotnet-framework-early-access/blob/master/release-notes/NET48/build-3646/changes.md).\r\n\r\n.NET Framework build 3646 is also included in the next update for Windows 10. You can sign up for [Windows Insiders](https://insider.windows.com/en-us/) to validate that your applications work great on the latest .NET Framework included in the latest Windows 10 releases.\r\n","Url":"https://github.com/dotnet/announcements/issues/85","RelatedDescription":"Open issue \"NET Framework 4.8 Early Access build 3646 is available!\" (#85)"}],"ResultType":"GitHubIssue"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1134142130094346245","CreatedAt":"2019-05-30T16:58:49+00:00","UserScreenname":"dotnet","Text":"Join us live right now for another @dotnet #CommunityStandup with live demos and QA https://t.co/ptNZnKrqoO","Source":"<a href=\"https://www.elgato.com/gaming\" rel=\"nofollow\">Elgato Stream Deck</a>","RetweetCount":4,"FavoriteCount":1,"RawContent":null},{"Id":"1133749843564740608","CreatedAt":"2019-05-29T15:00:01+00:00","UserScreenname":"dotnet","Text":"ML .NET Model Lifecycle with Azure DevOps CI/CD pipelines\nhttps://t.co/zlCqa4I8vn https://t.co/K17nKopaZn","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":34,"FavoriteCount":24,"RawContent":null},{"Id":"1133746063792205826","CreatedAt":"2019-05-29T14:45:00+00:00","UserScreenname":"dotnet","Text":"In 15 minutes, watch @terrajobst adding return statements and control flow analysis to his compiler project. https://t.co/guh6xtpdbd","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":15,"FavoriteCount":7,"RawContent":null},{"Id":"1133416391522918401","CreatedAt":"2019-05-28T16:55:00+00:00","UserScreenname":"dotnet","Text":"Porting desktop apps to .NET Core by @oliagavrysh. https://t.co/XV5Ed3Nku8","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":108,"FavoriteCount":43,"RawContent":null},{"Id":"1131606214717116418","CreatedAt":"2019-05-23T17:02:00+00:00","UserScreenname":"dotnet","Text":"We're now live! https://t.co/mHsIdILy7f","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":10,"FavoriteCount":3,"RawContent":null},{"Id":"1131209353829052418","CreatedAt":"2019-05-22T14:45:01+00:00","UserScreenname":"dotnet","Text":"Join @terrajobst in 15 minutes when he'll be adding break and continue statements to his compiler project. https://t.co/guh6xtpdbd","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":15,"FavoriteCount":1,"RawContent":null},{"Id":"1129054452357271553","CreatedAt":"2019-05-16T16:02:12+00:00","UserScreenname":"dotnet","Text":"Join us live right now for another @dotnet #CommunityStandup with live demoes and QA from the .NET, C#, and F# teams https://t.co/ptNZnKrqoO","Source":"<a href=\"https://www.elgato.com/gaming\" rel=\"nofollow\">Elgato Stream Deck</a>","RetweetCount":17,"FavoriteCount":3,"RawContent":null}]}},"RunOn":"2019-05-31T05:30:32.9646134Z","RunDurationInMilliseconds":10399}