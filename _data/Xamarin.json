{"Data":{"Blog":{"FeedItems":[{"Title":"Accessing Native Features the Cross-Platform Way with Xamarin.Essentials","PublishedOn":"2018-12-19T22:46:18+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Every mobile application requires access to native functionality. When developing native mobile apps with Xamarin, developers are able to integrate deeply into iOS and Android since Xamarin exposes...","Href":"https://blog.xamarin.com/accessing-native-features-xamarin-essentials/","RawContent":null},{"Title":"November 2018 Xamarin and Azure Office Hours Recap","PublishedOn":"2018-12-14T21:08:29+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"I ❤️ every single developer. And I want to hear your stories. I want to hear about your successes, your &#8220;not-so-much&#8221; successes, and any questions or concerns you may have about our...","Href":"https://blog.xamarin.com/office-hours-november-2018-xamarin-azure/","RawContent":null},{"Title":"Xamarin.Forms 4.0 Feature Preview: An Entirely New Point of (Collection)View","PublishedOn":"2018-12-07T19:00:30+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"As part of the upcoming Xamarin.Forms 4.0 release, we are implementing the all new CollectionView control. The CollectionView is intended to be a successor to the ListView, improving upon its design...","Href":"https://blog.xamarin.com/xamarin-forms-4-0-feature-preview-an-entirely-new-point-of-collectionview/","RawContent":null},{"Title":"The Future of Mobile Development: Xamarin.Forms 4.0 Preview","PublishedOn":"2018-12-05T19:59:03+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Yesterday at Microsoft Connect(); 2018 we announced our plans for Xamarin.Forms 4.0 and shared a public preview. Let&#8217;s now take a deeper look at the big changes, starting with Xamarin.Forms...","Href":"https://blog.xamarin.com/xamarin-forms-4-0-preview/","RawContent":null},{"Title":"Connect(); 2018 Xamarin Announcements","PublishedOn":"2018-12-04T16:21:03+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, at Microsoft Connect(); 2018, we have several exciting announcements about brand new capabilities and foundational improvements in the Xamarin platform driven by your generous feedback....","Href":"https://blog.xamarin.com/connect-2018-xamarin-announcements/","RawContent":null},{"Title":"Xamarin and .NET Developer Events in December","PublishedOn":"2018-12-02T20:46:46+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Here are just a few of the awesome community-run events scheduled this month. Get the full list of mobile developer engagements happening all over the world through our Community page. There you will...","Href":"https://blog.xamarin.com/xamarin-and-net-developer-events-in-december/","RawContent":null},{"Title":"Multi-targeting with Android Support Library v28","PublishedOn":"2018-11-28T18:09:29+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Starting with Xamarin’s Android Support Library version 28, we are introducing multi-targeting. This includes assemblies for older support library versions when your application&#8217;s...","Href":"https://blog.xamarin.com/multi-targeting-with-android-support-library-v28/","RawContent":null},{"Title":"Android Build Performance and Reliability","PublishedOn":"2018-11-21T16:45:55+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"As a Xamarin developer working on Android apps, you may be well-aware of two issues that slow down your everyday development; build times and the correctness of the build. If you aren&#8217;t sure...","Href":"https://blog.xamarin.com/android-build-performance-reliability/","RawContent":null},{"Title":"Xamarin.Forms 3.4.0: Say Hello to ImageButton","PublishedOn":"2018-11-15T19:17:28+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"As part of our long-term goal to have more frequent releases, we’re pleased to announce the release of Xamarin.Forms 3.4.0. As always, this release contains even more bug fixes and most notably,...","Href":"https://blog.xamarin.com/xamarin-forms-3-4-0-say-hello-to-imagebutton/","RawContent":null},{"Title":"Twitch Workshop: Build Your First Mobile App with C#, Xamarin, and the Cloud","PublishedOn":"2018-11-14T18:45:19+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Have you been clamoring to get started with mobile development using C# and Xamarin? What if you could attend a full day workshop from the comfort of your house or in a conference room with some...","Href":"https://blog.xamarin.com/twitch-workshop-build-your-first-mobile-app/","RawContent":null}],"ResultType":"Feed"},"Android":{"Events":[{"Id":"8813838117","Type":"IssuesEvent","CreatedAt":"2018-12-28T23:15:13","Actor":"xtmq","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/2574","RelatedDescription":"Opened issue \"Can not build latest master\" (#2574) at xamarin/xamarin-android","RelatedBody":"I can not build xamarin android sdk on my mac. Maybe someone has any clue whats going wrong... Thanks for any advice =) \r\n\r\n### First issue for 'make prepare'\r\n\r\n```\r\n\"/Users/xtmq/xamarin-android/build-tools/ThirdPartyNotices/ThirdPartyNotices.csproj\" (default target) (1) ->\r\n\"/Users/xtmq/xamarin-android/build-tools/xa-prep-tasks/xa-prep-tasks.csproj\" (default target) (2:2) ->\r\n(GetXAVersionInfo target) ->\r\n  /Users/xtmq/xamarin-android/build-tools/scripts/XAVersionInfo.targets(53,5): error MSB6006: \"git\" exited with code 128. [/Users/xtmq/xamarin-android/build-tools/xa-prep-tasks/xa-prep-tasks.csproj]\r\n\r\n\"/Users/xtmq/xamarin-android/build-tools/ThirdPartyNotices/ThirdPartyNotices.csproj\" (default target) (1) ->\r\n\"/Users/xtmq/xamarin-android/build-tools/xa-prep-tasks/xa-prep-tasks.csproj\" (default target) (2:2) ->\r\n  /Users/xtmq/xamarin-android/build-tools/scripts/XAVersionInfo.targets(61,5): error MSB4044: The \"GitCommitsInRange\" task was not given a value for the required parameter \"StartCommit\". [/Users/xtmq/xamarin-android/build-tools/xa-prep-tasks/xa-prep-tasks.csproj]\r\n```\r\n\r\nThis happens because command `git blame \"/Users/xtmq/xamarin-android/Configuration.props\"` does not work, it tells `«/Users/xtmq/xamarin-android/Configuration.props» is outside repository`. \r\n\r\nEverything works if I paths msbuild targets to pass relative (to repository root) path, in this case just `git blame \"Configuration.props\"`.\r\n### Second issue for 'make jenkins'\r\n```\r\n\"/Users/xtmq/xamarin-android/Xamarin.Android.sln\" (default target) (1) ->\r\n\"/Users/xtmq/xamarin-android/build-tools/android-toolchain/android-toolchain.csproj\" (default target) (2) ->\r\n(_CreateMxeToolchains target) ->\r\n  clang : error : linker command failed with exit code 1 (use -v to see invocation) [/Users/xtmq/xamarin-android/build-tools/android-toolchain/android-toolchain.csproj]\r\n  /Users/xtmq/xamarin-android/build-tools/android-toolchain/android-toolchain.targets(115,5): error MSB3073: The command \"make -j8 provision-mxe DISABLE_IOS=1 MXE_SRC=\"/Users/xtmq/xamarin-android/build-tools/android-toolchain//../../external/mxe\" MXE_PREFIX_DIR=\"/Users/xtmq/android-toolchain\"\" exited with code 2. [/Users/xtmq/xamarin-android/build-tools/android-toolchain/android-toolchain.csproj]\r\n```\r\n\r\nMake output: `make: *** No rule to make target `provision-mxe'.`\r\n### Version Information\r\n\r\nVisual Studio Community 2017 for Mac\r\nVersion 7.7.2 (build 21)\r\nInstallation UUID: b216fd0f-8565-4976-93dc-e21853486a27\r\n\tGTK+ 2.24.23 (Raleigh theme)\r\n\tXamarin.Mac 4.4.1.178 (master / eeaeb7e6)\r\n\r\nNuGet\r\nVersion: 4.8.0.5385\r\n\r\n.NET Core\r\nRuntime: /usr/local/share/dotnet/dotnet\r\nRuntime Version: 2.1.2\r\nSDK: /usr/local/share/dotnet/sdk/2.1.302/Sdks\r\nSDK Version: 2.1.302\r\nMSBuild SDKs: /Library/Frameworks/Mono.framework/Versions/5.16.0/lib/mono/msbuild/15.0/bin/Sdks\r\n\r\nApple Developer Tools\r\nXcode 10.1 (14460.46)\r\nBuild 10B61\r\n\r\nXamarin.Mac\r\nVersion: 5.2.1.12 (Visual Studio Community)\r\nHash: 65ec520f\r\nBranch: \r\nBuild date: 2018-12-05 12:06:09-0500\r\n\r\nXamarin.iOS\r\nVersion: 12.2.1.12 (Visual Studio Community)\r\nHash: 65ec520f\r\nBranch: d15-9\r\nBuild date: 2018-12-05 12:06:09-0500\r\n\r\nXamarin.Android\r\nVersion: 9.1.4.2 (Visual Studio Community)\r\nAndroid SDK: Not found\r\n\r\nAndroid Device Manager\r\nVersion: 7.7.1.0\r\nHash: 06ceaea1\r\n\r\nOperating System\r\nMac OS X 10.14.2\r\nDarwin 18.2.0 Darwin Kernel Version 18.2.0\r\n    Mon Nov 12 20:24:46 PST 2018\r\n    root:xnu-4903.231.4~2/RELEASE_X86_64 x86_64\r\n\r\nMono JIT compiler version 5.18.0.225 (2018-08/bac9fc1f889 Fri Dec 21 11:33:29 EST 2018)\r\nGit version 2.20.1"},{"Id":"8812689405","Type":"IssuesEvent","CreatedAt":"2018-12-28T16:00:48","Actor":"bentmar","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/2573","RelatedDescription":"Opened issue \"Question: Why is btls included when using Andriod native client and minimun target is apk 21?\" (#2573) at xamarin/xamarin-android","RelatedBody":"I get more and more confused reading docs about httpclient implementation and tls.\r\n\r\nIn the microsoft docs it says that using the androidClientHandler reduces the size of the apk (since it will not use btls for tls 1.2) => only works on api >=21 \r\n\r\nAnd on another doc AndroidClientHandler now defaults to use btls becuase of the support for httpwebrequest with tls 1.2...\r\n\r\nAnd what ever i do, I allways find that my apk ends up with the btls lib.. \r\n\r\n\r\n\r\n`Choosing a Handler\r\nThe choice between AndroidClientHandler and HttpClientHandler depends upon the needs of your application. AndroidClientHandler is recommended for the most up-to-date security support, eg.\r\n\r\nYou require TLS 1.2+ support.\r\nYour app is targeting Android 5.0 (API 21) or later.\r\nYou need TLS 1.2+ support for HttpClient.\r\nYou don't need TLS 1.2+ support for WebClient.\r\n\r\nHttpClientHandler is a good choice if you need TLS 1.2+ support but must support versions of Android earlier than Android 5.0. It is also a good choice if you need TLS 1.2+ support for WebClient.\r\n\r\nBeginning with Xamarin.Android 8.3, HttpClientHandler defaults to Boring SSL (btls) as the underlying TLS provider. The Boring SSL TLS provider offers the following advantages:\r\n\r\nIt supports TLS 1.2+.\r\nIt supports all Android versions.\r\nIt provides TLS 1.2+ support for both HttpClient and WebClient.\r\n\r\nThe disadvantage of using Boring SSL as the underling TLS provider is that it can increase the size of the resulting APK (it adds about 1MB of additional APK size per supported ABI).\r\n\r\nBeginning with Xamarin.Android 8.3, the default TLS provider is Boring SSL (btls). If you do not want to use Boring SSL, you can revert to the historical managed SSL implementation by setting the $(AndroidTlsProvider) property to legacy (for more information about setting build properties, see Build Process).`\r\n\r\n\r\n\r\n"},{"Id":"8811318112","Type":"IssuesEvent","CreatedAt":"2018-12-28T08:48:22","Actor":"knocte","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/2572","RelatedDescription":"Opened issue \"Assertion at mono/mono/mini/mini-arm64.c:879, condition `ji' not met\" (#2572) at xamarin/xamarin-android","RelatedBody":"I've had this native crash today with Android stable debugging from VSforMac on my phisical phone:\r\n\r\n```\r\n[RenderThread] type=1400 audit(0.0:374236): avc: denied { read } for name=\"perf_ioctl\" dev=\"proc\" ino=4026533695 scontext=u:r:untrusted_app:s0:c512,c768 tcontext=u:object_r:proc:s0 tclass=file permissive=0\r\n[zygote64] Explicit concurrent copying GC freed 1098(360KB) AllocSpace objects, 0(0B) LOS objects, 67% free, 727KB/2MB, paused 235us total 10.112ms\r\nLoaded assembly: System.Linq.dll [External]\r\n[] * Assertion at /Users/builder/jenkins/workspace/xamarin-android-d15-9/xamarin-android/external/mono/mono/mini/mini-arm64.c:879, condition `ji' not met\r\n[libc] Fatal signal 6 (SIGABRT), code -6 in tid 20579 (Thread Pool Wor)\r\n[libc] orig_dumpable: 1\r\n\r\n```\r\n\r\n### Steps to Reproduce\r\n\r\n(Can't reproduce reliably sorry.)\r\n\r\n### Version Information\r\n\r\n```\r\nVisual Studio Community 2017 for Mac\r\nVersion 7.7.2 (build 21)\r\nInstallation UUID: fd06ff65-69de-47ae-8b99-ddf257032b7c\r\n\tGTK+ 2.24.23 (Raleigh theme)\r\n\tXamarin.Mac 4.4.1.178 (master / eeaeb7e6)\r\n\r\n\tPackage version: 516000221\r\n\r\nMono Framework MDK\r\nRuntime:\r\n\tMono 5.16.0.221 (2018-06/b63e5378e38) (64-bit)\r\n\tPackage version: 516000221\r\n\r\nNuGet\r\nVersion: 4.8.0.5385\r\n\r\n.NET Core\r\nRuntime: /usr/local/share/dotnet/dotnet\r\nRuntime Versions:\r\n\t2.1.5\r\n\t2.1.2\r\n\t2.1.1\r\n\t2.0.5\r\n\t2.0.0\r\nSDK: /usr/local/share/dotnet/sdk/2.1.403/Sdks\r\nSDK Versions:\r\n\t2.1.403\r\n\t2.1.302\r\n\t2.1.301\r\n\t2.1.4\r\n\t2.0.0\r\nMSBuild SDKs: /Library/Frameworks/Mono.framework/Versions/5.16.0/lib/mono/msbuild/15.0/bin/Sdks\r\n\r\nXamarin.Profiler\r\nVersion: 1.6.4\r\nLocation: /Applications/Xamarin Profiler.app/Contents/MacOS/Xamarin Profiler\r\n\r\nApple Developer Tools\r\nXcode 10.1 (14460.46)\r\nBuild 10B61\r\n\r\nXamarin.Mac\r\nVersion: 5.2.1.12 (Visual Studio Community)\r\nHash: 65ec520f\r\nBranch: \r\nBuild date: 2018-12-05 12:06:09-0500\r\n\r\nXamarin.iOS\r\nVersion: 12.2.1.12 (Visual Studio Community)\r\nHash: 65ec520f\r\nBranch: d15-9\r\nBuild date: 2018-12-05 12:06:09-0500\r\n\r\nXamarin.Android\r\nVersion: 9.1.4.2 (Visual Studio Community)\r\nAndroid SDK: /Users/andres/Library/Developer/Xamarin/android-sdk-macosx\r\n\tSupported Android versions:\r\n\t\t4.0.3 (API level 15)\r\n\t\t4.4   (API level 19)\r\n\t\t7.1   (API level 25)\r\n\t\t8.1   (API level 27)\r\n\r\nSDK Tools Version: 26.1.1\r\nSDK Platform Tools Version: 26.0.2\r\nSDK Build Tools Version: 26.0.3\r\n\r\nJava SDK: /Users/andres/Library/Developer/Xamarin/jdk/microsoft_dist_openjdk_1.8.0.9\r\nopenjdk version \"1.8.0-9\"\r\nOpenJDK Runtime Environment (build 1.8.0-9-microsoft-b00)\r\nOpenJDK 64-Bit Server VM (build 25.71-b00, mixed mode)\r\n\r\nAndroid Designer EPL code available here:\r\nhttps://github.com/xamarin/AndroidDesigner.EPL\r\n\r\nAndroid Device Manager\r\nVersion: 7.7.1.0\r\nHash: 06ceaea1\r\n\r\nXamarin Inspector\r\nVersion: 1.4.3\r\nHash: db27525\r\nBranch: 1.4-release\r\nBuild date: Mon, 09 Jul 2018 21:20:18 GMT\r\nClient compatibility: 1\r\n\r\nBuild Information\r\nRelease ID: 707020021\r\nGit revision: f1fea53df9eb0bb5890a9563c0d7ea7b03922144\r\nBuild date: 2018-12-14 18:37:35+00\r\nBuild branch: release-7.7\r\nXamarin extensions: 9c5cea335e6a9ce4ccfde31c4aa06c25a3576085\r\n\r\nOperating System\r\nMac OS X 10.13.6\r\nDarwin 17.7.0 Darwin Kernel Version 17.7.0\r\n    Thu Jun 21 22:53:14 PDT 2018\r\n    root:xnu-4570.71.2~1/RELEASE_X86_64 x86_64\r\n\r\n```\r\n\r\n### Log File\r\n\r\nhttps://gist.github.com/knocte/85a811ce858cfcaa6d1eb405c92b1e82"},{"Id":"8807494277","Type":"IssuesEvent","CreatedAt":"2018-12-27T10:07:18","Actor":"aixiaozi","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/2571","RelatedDescription":"Opened issue \"AndroidManifest.xml : error APT0000: Unable to open file for read: No such file or directory\" (#2571) at xamarin/xamarin-android","RelatedBody":"### Steps to Reproduce\r\n\r\nThe issue only occurred on customer's computer, can't reproduce this issue on my side.\r\n \r\nCustomer could reproduce this issue by using the following steps:\r\n\r\n1. Create a blank `Xamarin.Forms` project, build this project, this error occurred. When copy this project to another computer, could build this project without any error.\r\n2. Tried repair Visual Studio, still the same error.\r\n\r\nCustomer's project here: https://github.com/karikarism/Android\r\n\r\n<!--\r\nIf you have a repro project, you may drag & drop the .zip/etc. onto the issue editor to attach it.\r\n-->\r\n\r\n### Expected Behavior\r\nBuild this `Xamarin.Forms` project without any error.\r\n\r\n### Actual Behavior\r\nProject build failed with errer:\r\n\r\n```\r\n2>\"C:\\Users\\sukima\\source\\repos\\App10\\App10\\App10.Android\\App10.Android.csproj\" (Rebuild;BuiltProjectOutputGroup;BuiltProjectOutputGroupDependencies;DebugSymbolsProjectOutputGroup;DebugSymbolsProjectOutputGroupDependencies;DocumentationProjectOutputGroup;DocumentationProjectOutputGroupDependencies;SatelliteDllsProjectOutputGroup;SatelliteDllsProjectOutputGroupDependencies;SGenFilesOutputGroup;SGenFilesOutputGroupDependencies target) (1) ->\r\n2>(_UpdateAndroidResgen target) -> \r\n2>  C:\\Windows\\TEMP\\1aanmcqc.ejs\\manifest\\AndroidManifest.xml : error APT0000: Unable to open file for read: No such file or directory\r\n```\r\n\r\n### Version Information\r\n[version.txt](https://github.com/xamarin/xamarin-android/files/2711896/version.txt)\r\n\r\n<!--\r\n1. On macOS and within Visual Studio, select Visual Studio > About Visual Studio, then click the Show Details button, then click the Copy Information button.\r\n\r\n2. Paste below this comment block.\r\n-->\r\n\r\n### Log File\r\n\r\nDiagnostic build output: [Error_Eng.txt](https://github.com/xamarin/xamarin-android/files/2712113/Error_Eng.txt)\r\n\r\nXamarin --> Zip logs(last 7 days):  [Log.zip](https://github.com/xamarin/xamarin-android/files/2712114/Log.zip)\r\n\r\n\r\n<!--\r\n1. On macOS and within Visual Studio:\r\n    a. Click **Tools** > **SDK Command Prompt**.\r\n    b. Within the launched `Terminal.app` window, run:\r\n\r\n            adb logcat -d | pbcopy\r\n\r\n2. Paste below this comment block\r\n-->\r\n\r\n\r\n\r\n<!--\r\nSwitch to the \"Preview\" tab to ensure your issue renders correctly.\r\n\r\nPlease add an appropriate \"Area:\" label in the Labels section.\r\n-->"},{"Id":"8800270657","Type":"IssuesEvent","CreatedAt":"2018-12-24T22:38:53","Actor":"mathieubourgeois","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/2160","RelatedDescription":"Closed issue \"Using AndroidAarLibrary will fail on aar containing impl_internal* jar\" (#2160) at xamarin/xamarin-android","RelatedBody":"### Steps to Reproduce\r\n\r\n1. In a Xamarin.Android project (not a bindings project) add an AndroidAarLibrary reference to any library containing an impl_internal* internal jar (I had the issue with support-v4-24.1.1.aar from the Android Support library)\r\n2. Try to build the project\r\n\r\n### Expected Behavior\r\n\r\nApplication compiles as usual, aar resources/java code/manifest info are used in the final application.\r\n\r\n### Actual Behavior\r\n\r\nCompilation fails with the following error :\r\n\r\n```\r\nError: <...>\\Xamarin\\Android\\Xamarin.Android.Common.targets(1196,2): error MSB4018: Échec inattendu de la tâche \"ResolveLibraryProjectImports\". [<...>]\r\nError: <...>\\Xamarin\\Android\\Xamarin.Android.Common.targets(1196,2): error MSB4018: System.IO.FileNotFoundException: Le fichier '<...>\\internal_impl-24.1.1.jar' est introuvable. [<...>]\r\nError: <...>\\Xamarin\\Android\\Xamarin.Android.Common.targets(1196,2): error MSB4018: Nom de fichier : '<...>\\internal_impl-24.1.1.jar' [<...>]\r\nError: <...>\\Xamarin\\Android\\Xamarin.Android.Common.targets(1196,2): error MSB4018:    à System.IO.__Error.WinIOError(Int32 errorCode, String maybeFullPath) [<...>]\r\nError: <...>\\Xamarin\\Android\\Xamarin.Android.Common.targets(1196,2): error MSB4018:    à System.IO.FileStream.Init(String path, FileMode mode, FileAccess access, Int32 rights, Boolean useRights, FileShare share, Int32 bufferSize, FileOptions options, SECURITY_ATTRIBUTES secAttrs, String msgPath, Boolean bFromProxy, Boolean useLongPath, Boolean checkHost) [<...>]\r\nError: <...>\\Xamarin\\Android\\Xamarin.Android.Common.targets(1196,2): error MSB4018:    à System.IO.FileStream..ctor(String path, FileMode mode, FileAccess access) [<...>]\r\nError: <...>\\Xamarin\\Android\\Xamarin.Android.Common.targets(1196,2): error MSB4018:    à Xamarin.Android.Tools.Files.HashFile(String filename, HashAlgorithm hashAlg) [<...>]\r\nError: <...>\\Xamarin\\Android\\Xamarin.Android.Common.targets(1196,2): error MSB4018:    à Xamarin.Android.Tools.Files.HashString(String s) [<...>]\r\nError: <...>\\Xamarin\\Android\\Xamarin.Android.Common.targets(1196,2): error MSB4018:    à Xamarin.Android.Tasks.ResolveLibraryProjectImports.<>c.<Extract>b__60_9(String entryFullName) [<...>]\r\nError: <...>\\Xamarin\\Android\\Xamarin.Android.Common.targets(1196,2): error MSB4018:    à Xamarin.Android.Tools.Files.ExtractAll(ZipArchive zip, String destination, Action`2 progressCallback, Func`2 modifyCallback, Func`2 deleteCallback, Boolean forceUpdate) [<...>]\r\nError: <...>\\Xamarin\\Android\\Xamarin.Android.Common.targets(1196,2): error MSB4018:    à Xamarin.Android.Tasks.ResolveLibraryProjectImports.Extract(DirectoryAssemblyResolver res, ICollection`1 jars, ICollection`1 resolvedResourceDirectories, ICollection`1 resolvedAssetDirectories, ICollection`1 resolvedEnvironments) [<...>]\r\nError: <...>\\Xamarin\\Android\\Xamarin.Android.Common.targets(1196,2): error MSB4018:    à Xamarin.Android.Tasks.ResolveLibraryProjectImports.Execute() [<...>]\r\nError: <...>\\Xamarin\\Android\\Xamarin.Android.Common.targets(1196,2): error MSB4018:    à Microsoft.Build.BackEnd.TaskExecutionHost.Microsoft.Build.BackEnd.ITaskExecutionHost.Execute() [<...>]\r\nError: <...>\\Xamarin\\Android\\Xamarin.Android.Common.targets(1196,2): error MSB4018:    à Microsoft.Build.BackEnd.TaskBuilder.<ExecuteInstantiatedTask>d__26.MoveNext() [<...>]\r\n```\r\n\r\n### Extra informations\r\n\r\n- The same project using `LibraryProjectZip` in a fake bindings project works fine (but we don't need the bindings, so an extra dll/so that can be avoided is a good thing)\r\n- I took a look at the code that seems to be causing the issue, it comes from the initial implementation of `AndroidAarLibrary` in `ResolveLibraryProjectImport.cs` :\r\n\r\n```\r\n\t\t\t\tusing (var zip = MonoAndroidHelper.ReadZipFile (aarFile.ItemSpec)) {\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tupdated |= Files.ExtractAll (zip, importsDir, modifyCallback: (entryFullName) => {\r\n\t\t\t\t\t\t\tvar entryFileName = Path.GetFileName (entryFullName);\r\n\t\t\t\t\t\t\tvar entryPath = Path.GetDirectoryName (entryFullName);\r\n\t\t\t\t\t\t\tif (entryFileName.StartsWith (\"internal_impl\", StringComparison.InvariantCulture)) {\r\n\t\t\t\t\t\t\t\tvar hash = Files.HashString (entryFileName);\r\n\t\t\t\t\t\t\t\treturn Path.Combine (entryPath, $\"internal_impl-{hash}.jar\");\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\treturn entryFullName;\r\n\t\t\t\t\t\t}, deleteCallback: (fileToDelete) => {\r\n\t\t\t\t\t\t\treturn !jars.Contains (fileToDelete);\r\n\t\t\t\t\t\t}, forceUpdate: false);\r\n\r\n\t\t\t\t\t\tif (Directory.Exists (importsDir) && (updated || !stamp.Exists)) {\r\n\t\t\t\t\t\t\tLog.LogDebugMessage (\"Touch {0}\", stamp.FullName);\r\n\t\t\t\t\t\t\tstamp.Create ().Close ();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} catch (PathTooLongException ex) {\r\n\t\t\t\t\t\tLog.LogErrorFromException (new PathTooLongException ($\"Error extracting resources from \\\"{aarFile.ItemSpec}\\\"\", ex));\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n``` \r\n\r\nFrom what I can see, it extracts the aar file and needs to check the hashes of the internal jar to see if something actually changed (my initial guess at least). However, the commit (6a8ea2bbdbad65f1f46ba60a343506c92d1e0a1e) doesn't mention anything about this so I'm not entirely sure if that's supposed to be the case.\r\n\r\nSo, when it finds internal_impl* in the aar, it tries to hash `\"internal_impl*\"` file without any path. However, this means it checks at the base of the project (or the cwd I would guess) for that file, but there's no reason for it to be there, I don't think it would be extracted there anyway) Therefore, we have the crash.\r\n\r\nI guess the fix is probably to check two things\r\na) consider the proper path to the unzipped file\r\nb) consider an empty hash if the unzipped file doesn't exist yet\r\n\r\n### Version Information\r\n\r\nMicrosoft Visual Studio Professional 2017 \r\nVersion 15.8.1\r\nVisualStudio.15.Release/15.8.1+28010.2003\r\nMicrosoft .NET Framework\r\nVersion 4.7.03062\r\n\r\nInstalled Version: Professional\r\n\r\nVisual C++ 2017   00370-20007-36350-AA982\r\nMicrosoft Visual C++ 2017\r\n\r\nApplication Insights Tools for Visual Studio Package   8.13.10627.1\r\nApplication Insights Tools for Visual Studio\r\n\r\nASP.NET and Web Tools 2017   15.8.05074.0\r\nASP.NET and Web Tools 2017\r\n\r\nASP.NET Core Razor Language Services   15.8.31590\r\nProvides languages services for ASP.NET Core Razor.\r\n\r\nASP.NET Web Frameworks and Tools 2017   5.2.60618.0\r\nFor additional information, visit https://www.asp.net/\r\n\r\nAzure App Service Tools v3.0.0   15.8.05023.0\r\nAzure App Service Tools v3.0.0\r\n\r\nC# Tools   2.9.0-beta8-63208-01\r\nC# components used in the IDE. Depending on your project type and settings, a different version of the compiler may be used.\r\n\r\nCommon Azure Tools   1.10\r\nProvides common services for use by Azure Mobile Services and Microsoft Azure Tools.\r\n\r\nCookiecutter   15.8.18201.1\r\nProvides tools for finding, instantiating and customizing templates in cookiecutter format.\r\n\r\nJavaScript Language Service   2.0\r\nJavaScript Language Service\r\n\r\nJavaScript Project System   2.0\r\nJavaScript Project System\r\n\r\nMerq   1.1.38 (5b3c069)\r\nCommand Bus, Event Stream and Async Manager for Visual Studio extensions.\r\n\r\nMicrosoft Azure Tools   2.9\r\nMicrosoft Azure Tools for Microsoft Visual Studio 2017 - v2.9.10730.2\r\n\r\nMicrosoft Continuous Delivery Tools for Visual Studio   0.4\r\nSimplifying the configuration of continuous build integration and continuous build delivery from within the Visual Studio IDE.\r\n\r\nMicrosoft JVM Debugger   1.0\r\nProvides support for connecting the Visual Studio debugger to JDWP compatible Java Virtual Machines\r\n\r\nMicrosoft Library Manager   1.0\r\nInstall client-side libraries easily to any web project\r\n\r\nMicrosoft MI-Based Debugger   1.0\r\nProvides support for connecting Visual Studio to MI compatible debuggers\r\n\r\nMicrosoft Visual C++ Wizards   1.0\r\nMicrosoft Visual C++ Wizards\r\n\r\nMicrosoft Visual Studio Tools for Containers   1.1\r\nDevelop, run, validate your ASP.NET Core applications in the target environment. F5 your application directly into a container with debugging, or CTRL + F5 to edit & refresh your app without having to rebuild the container.\r\n\r\nMicrosoft Visual Studio VC Package   1.0\r\nMicrosoft Visual Studio VC Package\r\n\r\nMLGen Package Extension   1.0\r\nMLGen Package Visual Studio Extension Detailed Info\r\n\r\nMono Debugging for Visual Studio   4.11.7-pre (8955b2a)\r\nSupport for debugging Mono processes with Visual Studio.\r\n\r\nNuGet Package Manager   4.6.0\r\nNuGet Package Manager in Visual Studio. For more information about NuGet, visit http://docs.nuget.org/.\r\n\r\nProjectServicesPackage Extension   1.0\r\nProjectServicesPackage Visual Studio Extension Detailed Info\r\n\r\nPython   15.8.18201.1\r\nProvides IntelliSense, projects, templates, debugging, interactive windows, and other support for Python developers.\r\n\r\nPython - Django support   15.8.18201.1\r\nProvides templates and integration for the Django web framework.\r\n\r\nPython - IronPython support   15.8.18201.1\r\nProvides templates and integration for IronPython-based projects.\r\n\r\nPython - Profiling support   15.8.18201.1\r\nProfiling support for Python projects.\r\n\r\nResourcePackage Extension   1.0\r\nResourcePackage Visual Studio Extension Detailed Info\r\n\r\nResourcePackage Extension   1.0\r\nResourcePackage Visual Studio Extension Detailed Info\r\n\r\nSQL Server Data Tools   15.1.61808.07020\r\nMicrosoft SQL Server Data Tools\r\n\r\nTest Adapter for Boost.Test   1.0\r\nEnables Visual Studio's testing tools with unit tests written for Boost.Test.  The use terms and Third Party Notices are available in the extension installation directory.\r\n\r\nTest Adapter for Google Test   1.0\r\nEnables Visual Studio's testing tools with unit tests written for Google Test.  The use terms and Third Party Notices are available in the extension installation directory.\r\n\r\nTypeScript Tools   15.8.20801.2001\r\nTypeScript Tools for Microsoft Visual Studio\r\n\r\nVisual Basic Tools   2.9.0-beta8-63208-01\r\nVisual Basic components used in the IDE. Depending on your project type and settings, a different version of the compiler may be used.\r\n\r\nVisual C++ for Cross Platform Mobile Development (Android)   15.0.27924.00\r\nVisual C++ for Cross Platform Mobile Development (Android)\r\n\r\nVisual C++ for Cross Platform Mobile Development (iOS)   15.0.27825.00\r\nVisual C++ for Cross Platform Mobile Development (iOS)\r\n\r\nVisual F# Tools 10.2 for F# 4.5   15.8.0.0.  Commit Hash: c55dd2c3d618eb93a8d16e503947342b1fa93556.\r\nMicrosoft Visual F# Tools 10.2 for F# 4.5\r\n\r\nVisual Studio Code Debug Adapter Host Package   1.0\r\nInterop layer for hosting Visual Studio Code debug adapters in Visual Studio\r\n\r\nVisual Studio Tools for CMake   1.0\r\nVisual Studio Tools for CMake\r\n\r\nVisual Studio Tools for Containers   1.0\r\nVisual Studio Tools for Containers\r\n\r\nVisual Studio Tools for Unity   3.8.0.3\r\nVisual Studio Tools for Unity\r\n\r\nVisual Studio Tools for Universal Windows Apps   15.0.28010.00\r\nThe Visual Studio Tools for Universal Windows apps allow you to build a single universal app experience that can reach every device running Windows 10: phone, tablet, PC, and more. It includes the Microsoft Windows 10 Software Development Kit.\r\n\r\nVisualStudio.Mac   1.0\r\nMac Extension for Visual Studio\r\n\r\nXamarin   4.11.0.732 (d15-8@33e83e124)\r\nVisual Studio extension to enable development for Xamarin.iOS and Xamarin.Android.\r\n\r\nXamarin Designer   4.14.218 (79f535bdd)\r\nVisual Studio extension to enable Xamarin Designer tools in Visual Studio.\r\n\r\nXamarin Templates   1.1.113 (e1d02a7)\r\nTemplates for building iOS, Android, and Windows apps with Xamarin and Xamarin.Forms.\r\n\r\nXamarin.Android SDK   9.0.0.18 (HEAD/3d8a28f1a)\r\nXamarin.Android Reference Assemblies and MSBuild support.\r\n\r\nXamarin.iOS and Xamarin.Mac SDK   11.14.0.13 (373c313)\r\nXamarin.iOS and Xamarin.Mac Reference Assemblies and MSBuild support."},{"Id":"8800203920","Type":"PullRequestEvent","CreatedAt":"2018-12-24T21:36:56","Actor":"mathieubourgeois","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2570","RelatedDescription":"Opened pull request \"Fix crash with big apks on assembly registration (fixes 1673)\" (#2570) at xamarin/xamarin-android","RelatedBody":"Xamarin.Android, on launch, needs to do a pass through the files in the apk to register \r\n- assemblies (.dll/.exe)\r\n- dll configuration files (.config)\r\n- symbols (.mdb/.pdb)\r\n- bindings typemaps (.jm/.mj)\r\n\r\nTo do this pass, the process was to mmap the apk in the process' adress space, then grab the memory offsets for each file and register them on each system as needed. However, mmap-ing the whole apk has the consequence of taking potentially a lot of adress space. \r\n\r\nConsidering it is legal to have a big apk (even though you can't submit an apk of more than 100 Mb to the Play Store, you can still submit it somewhere else, or embed your data in the apk during the development process for simplicity's sake), having an apk of about ~800 Mb in size automatically crashes on launch in armeabi-v7a because it can't find a contiguous 800 Mb block of adress space. The following log is usually found when that issue hits:\r\n\r\n`I/monodroid-assembly(14915): start: 0xffffffff end: 0x3da16747 len: 1033987912 apk: /data/app/<package_name>-1/base.apk`\r\n\r\nHowever, we don't need to mmap the whole apk, only the files that we are actually registering. Therefore, refactor the registration code to not mmap the whole apk. Instead, open the apk regularly, then when we actually need one of the entries, mmap the area of the file in the apk from a page-aligned offset and use those mmap sections for registration instead.\r\n\r\nFixes https://github.com/xamarin/xamarin-android/issues/1673"},{"Id":"8798619940","Type":"IssuesEvent","CreatedAt":"2018-12-24T08:55:41","Actor":"lander1337","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/2569","RelatedDescription":"Opened issue \"HttpClient bug on Android emulator\" (#2569) at xamarin/xamarin-android","RelatedBody":"### Description\r\nWhen I try to get SOAP message from service using HttpClient, xml that I read with HttpResponseMessage.Content.ReadAsStringAsync() sometimes(random) is broken, tags miss latters or '>' simbol. Was checking traffic with fiddler, service return valid xml, so the problem some where on HttpClient.    \r\n \r\n### Steps to Reproduce\r\n0. Use Android emulator\r\n1. Create/use service that return xml.\r\n2. Create app that using System.Net.Http.HttpClient for get info from service.\r\n3. Make request to service, read string from response, and sometimes for some reason this \"xml-string\" would be broken.\r\n\r\n### Expected Behavior\r\nFor example, service return:\r\n```\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<SOAP-ENV:Envelope xmlns:SOAP-ENV=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:ns1=\"http://free-web-services.com/soap\">\r\n<SOAP-ENV:Body>\r\n        <ns1:addResponse>\r\n            <sum>8</sum>\r\n            <time>0.0002</time>\r\n        </ns1:addResponse>\r\n    </SOAP-ENV:Body>\r\n</SOAP-ENV:Envelope>\r\n```\r\nSo i expect same xml, when read it from response.\r\n\r\n### Actual Behavior\r\nService return same xml as expected(check with fiddler), but when read it from response i get(sometimes):\r\n```\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<SOAP-ENV:Envelope xmlns:SOAP-ENV=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:ns1=\"http://free-web-services.com/soap\">\r\n    <SOAP-ENV:Body>\r\n        <ns1:addResponse>\r\n            <sum>8</sum>\r\n            <time>0.0002</time>\r\n        </ns1:addResponse>\r\n    </SOAP-ENV:Body>\r\n</SOAP-ENV:Envelope\r\n```\r\nThere is no '>' in the end.\r\n\r\n### Basic Information\r\nThis bug happends in ~30% of request, sometimes it get valid xml. In my example, missing letter is same every time - '>'. Xml's that i get from my service is large(length ~ 200k), it could be missed latter(should be <ComputerID></ComputerID>, i get <ComputerID></ComputeID>). Sorry for bad English. \r\n\r\n- Version with issue: 3.4.0.1008975\r\n- IDE: VS Community 2017 15.9.1\r\n- Platform Target Frameworks: \r\n  - Android(Emulator): \r\n    -Work as expected - Android 4.4\r\n    -Bug reporoduce - Android 6.0, Android 7.1, Android 8.1 \r\n- Affected Devices: Face this bug only on emulator(on my devicec works properly) "},{"Id":"8795862985","Type":"IssuesEvent","CreatedAt":"2018-12-22T21:13:14","Actor":"mfeingol","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/2568","RelatedDescription":"Opened issue \"Visual Studio 2017: \"Autos\" debug window doesn't work\" (#2568) at xamarin/xamarin-android","RelatedBody":"### Steps to Reproduce\r\n\r\n1. Debug an Android app\r\n2. Set a break point\r\n3. Observe the Locals window works fine, but the Autos window doesn't.\r\n\r\n![image](https://user-images.githubusercontent.com/218865/50378615-3b308600-05eb-11e9-9725-a7b3475d2b79.png)\r\n\r\n### Expected Behavior\r\n\r\nAutos should work the same as other debug environments in VS.\r\n\r\n### Actual Behavior\r\n\r\nAutos is always empty\r\n\r\n### Version Information\r\n\r\nVisual Studio 2017 15.9.4"},{"Id":"8795858574","Type":"IssuesEvent","CreatedAt":"2018-12-22T21:09:32","Actor":"mfeingol","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/2567","RelatedDescription":"Opened issue \"Visual Studio 2017: Exception Unhandled popup -> Exception Settings checkbox isn't wired up\" (#2567) at xamarin/xamarin-android","RelatedBody":"### Steps to Reproduce\r\n\r\n1. Debug an Android app\r\n2. Throw an exception in the Android app\r\n3. Observe the friendly exception popup's Exception Settings checkbox does nothing\r\n\r\n![image](https://user-images.githubusercontent.com/218865/50378592-87c79180-05ea-11e9-9cb5-5ededd82cd2e.png)\r\n\r\n### Expected Behavior\r\n\r\nIf an exception type is enabled in the real Exception Settings dialog, it should also be enabled in the Exception Unhandled popup's Exception Settings.\r\n\r\n### Actual Behavior\r\n\r\nThe Exception Unhandled popup's Exception Settings checkbox for \"Break when this exception type is thrown\" is unchecked. Checking and unchecking the box does nothing.\r\n\r\n### Version Information\r\n\r\nVisual Studio 2017 15.9.4"}],"ResultType":"GitHubEvent"},"Forms":{"Events":[{"Id":"8819467667","Type":"IssuesEvent","CreatedAt":"2018-12-31T20:30:40","Actor":"Liam2349","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/4876","RelatedDescription":"Opened issue \"[MacOS] Thread.Sleep and await Task.Delay take longer than expected when the app is tabbed out for ~50s\" (#4876) at xamarin/Xamarin.Forms","RelatedBody":"### Description\r\nI have an endless loop running in my app, which sleeps for 500ms between runs, and runs on a manually created background thread. On each iteration, I log the loop time to the console. If the app is in focus, everything is fine - each iteration takes 500ms. If the app is tabbed out for ~50s, the _await Task.Delay(500)_ gets about 10s added to it, taking 10,500ms. It's not 100% consistent - sometimes it's 20s, sometimes it's more like 200ms, but 10s is the most common wait added.\r\n\r\nIf I tab back into the app, the delay goes back to taking 500ms, as expected, and seems to remain that way until tabbed out again for a period of ~50s.\r\n### Steps to Reproduce\r\n\r\nRepro solution here: https://1drv.ms/u/s!Avxe5n2Gio0VyZEYjF4JrqHBIujuuA\r\n\r\nGitHub said it's too big to attach, so I'll host it there temporarily, but in the interest of preservation it would be good if one of the Xamarin team members could host it somewhere else. It's just a blank XF project with a Mac target and a tiny bit of code. The repro uses _await Task.Delay_ but the same thing happens with _Thread.Sleep_.\r\n\r\n1. Open the solution, run Mac app in Debug\r\n2. Watch the logging messages printed to the output. They show the current loop iteration and the previous loop time.\r\n3. See that the loop time is 500ms.\r\n4. Tab out (click into another window), wait around 50s.\r\n5. Look at the output, and see that the loop time is no longer consistently 500ms. You should see a lot of 10,500ms.\r\n\r\nYou can see the code in MainPage.xaml.cs inside the shared project. It's just about 30 lines to set up a new thread that runs an endless loop. The loop writes logging messages to the output and to a file on the desktop, for running without the debugger. I used this file to find out that the problem still occurs without the debugger attached.\r\n\r\nThe code measures the time taken by the delay, using a stopwatch. This time is logged for you to see. When you tab out and wait ~50s, the time is no longer consistently 500ms. I also tested a 50ms wait, and again after tabbing out and waiting ~50s, I was seeing a lot of 10,050ms delays, so there seems to be something special about the 10s being added to it.\r\n\r\nI don't know if this is a Mono issue, a XF issue, or a Xamarin.Mac issue. I'm leaning towards it being XF or Xamarin.Mac because this problem doesn't occur until the window is tabbed out.\r\n\r\n### Expected Behavior\r\nawait Task.Delay and Thread.Sleep should wait for as long as they are told to.\r\n\r\n### Actual Behavior\r\nThese wait methods will wait longer than told to when the app has been tabbed out for ~50s.\r\n\r\n### Basic Information\r\n\r\n- Version with issue: XF 3.4.0.1008975\r\n- Last known good version: Unknown\r\n- IDE: VS for Mac 7.7.2 build 21 (Community)\r\n- Platform Target Frameworks:\r\n  - macOS 10.14 (I don't know if it affects other OS versions)\r\n- Nuget Packages: Just Xamarin.Forms\r\n- Affected Devices: macOS 10.14\r\n\r\n### Reproduction Link\r\n\r\nRepro solution here: https://1drv.ms/u/s!Avxe5n2Gio0VyZEYjF4JrqHBIujuuA\r\n"},{"Id":"8819200145","Type":"IssuesEvent","CreatedAt":"2018-12-31T17:57:36","Actor":"pizzahead24","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/4875","RelatedDescription":"Opened issue \"Height calculations for content within a layout not calculation correctly for wrapping content like flex and text\" (#4875) at xamarin/Xamarin.Forms","RelatedBody":"<!-- Bug report best practices: https://github.com/xamarin/Xamarin.Forms/wiki/Submitting-Issues -->\r\n\r\n### Description\r\nHeight calculations for content within a layout not calculation correctly for wrapping content like flex and text\r\n\r\n### Steps to Reproduce\r\n\r\nhttps://forums.xamarin.com/discussion/145900/long-label-with-word-wrap-doesnt-seem-to-auto-calculate-height-correctly#latest\r\n\r\nTo product the full blown error:\r\n\r\n1.) Create a flex layout. \r\n2.) Inside the layout create several other stack layouts Horizontal with title and value labels inside.  Create 5 of them and make the Text of them very long (look at the forum link above).\r\n3.) Now divide these content within so that when you grow and shrink the content will wrap into one column or two. What I did was split it up 3 - 3 left and right and have a flex basis on the left of 300. This should make the parent flex layout wrap the right side under once the width reaches 300.\r\n4.) When you grow and expand on UWP you can see the text gets cut off. You can also see the layout straight up wont expand all the way because the wrapping text height for some reason wont notify the parent layout to expand that much more.\r\n\r\n### Expected Behavior\r\n\r\nThe height of wrapping text and layouts should notify its parent to update its overall height and not cut things off.\r\n\r\n### Actual Behavior\r\n\r\ntext and content are being cut off by the height because the wrapping features are not updating the parent layouts height.\r\n\r\n### Basic Information\r\n\r\n- Version with issue: Latest Xamarin Forms 3.3\r\n- Affected Devices: All, but much easier to visibly watch the flex layout with UWP.\r\n\r\n### Screenshots\r\n\r\nPlease check out the forum link above.\r\n"},{"Id":"8818990212","Type":"IssuesEvent","CreatedAt":"2018-12-31T16:14:51","Actor":"yang-er","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/4874","RelatedDescription":"Opened issue \"[UWP] XF.PageRenderer Resizes Wrong in UWP Parents\" (#4874) at xamarin/Xamarin.Forms","RelatedBody":"### Description\r\n\r\nThis is a test for adding Xamarin.Forms controls or pages into UWP \r\n\r\nI had tried using some built-in renderers in my iOS/Android/UWP project's platform-aware codes, most works fine.\r\n\r\n### Steps to Reproduce\r\n\r\n1. Just run the sample I uploaded.\r\n2. When App.xaml.cs Line 38 is typeof(MainPage), it is in **origin** UWP environment.\r\n3. When App.xaml.cs Line 38 is typeof(MainPage), it is in **Xamarin.Forms** UWP environment.\r\n\r\n### Expected Behavior\r\n\r\nThe page renders well in the Pivot.\r\n\r\n### Actual Behavior\r\n\r\nThe panel outside the real control's size becomes (0,0).\r\n\r\nBy the way, it seems that only one `ListViewItem` was added when in origin UWP environment.\r\n\r\n### Basic Information\r\n\r\n- Version with issue: 3.4.0\r\n- Last known good version: N/A\r\n- IDE: Visual Studio 2017.9.4\r\n- Platform Target Frameworks: <!-- All that apply -->\r\n  - UWP: 17134\r\n- Nuget Packages: 3.4.0\r\n\r\n### Screenshots\r\n\r\nFirst I'd like to say it is perfect with Xamarin.Forms UWP projects.\r\n\r\n![formswindowspageallright](https://user-images.githubusercontent.com/10959348/50563539-a7805780-0d58-11e9-98e9-f96e38751907.png)\r\n\r\nWhen the page seems blank, I found the `TextBlock`s for the datas in ViewTree Panel.\r\n\r\n![textblockaddedtoviewtree](https://user-images.githubusercontent.com/10959348/50563537-a6e7c100-0d58-11e9-9095-c3197302b75d.png)\r\n\r\nBut its parent `Panel` becomes invisible, which gets a size of (0,0).\r\n\r\n![textblockparentnotwellshown](https://user-images.githubusercontent.com/10959348/50563538-a6e7c100-0d58-11e9-8c67-c440034ece51.png)\r\n\r\n### Reproduction Link\r\n[App1.zip](https://github.com/xamarin/Xamarin.Forms/files/2718574/App1.zip)\r\n\r\nHappy new year!"}],"ResultType":"GitHubEvent"},"Macios":{"Events":[{"Id":"8818155961","Type":"IssuesEvent","CreatedAt":"2018-12-31T09:23:35","Actor":"mykyta-bondarenko-gl","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/issues/5335","RelatedDescription":"Opened issue \"[XI] doesn't support QuickLook extensions\" (#5335) at xamarin/xamarin-macios","RelatedBody":"I am porting [swift sample](https://developer.apple.com/documentation/uikit/view_controllers/building_an_app_based_on_the_document_browser_view_controller?preferredLanguage=occ) into the Xamarin and found that XI doesn't support QuickLook extensions. \r\n\r\n### Steps to Reproduce\r\n\r\n1. Download a [sample](https://github.com/xamarin/private-samples/tree/particles/ios11/Particles) \r\n2. Run it \r\n3. Create an internal document and save it ('Done' button)\r\n\r\n### Expected Behavior\r\n`QLThumbnailProvider` implementation is invoked and thumbnail is created \r\n\r\n![screen shot 2018-12-31 at 11 19 06](https://user-images.githubusercontent.com/32954580/50557474-1eccd180-0cee-11e9-92ca-f9551e65e8b4.png)\r\n\r\n### Actual Behavior\r\nThere is default icon and no additional call\r\n\r\n![screen shot 2018-12-31 at 11 15 56](https://user-images.githubusercontent.com/32954580/50557476-20969500-0cee-11e9-83c5-5f769b68798b.png)\r\n\r\n### Environment\r\n\r\n1. VSfM\r\nhttps://gist.github.com/mykyta-bondarenko-gl/56bb56c36608563c29d56040a0e55252\r\n\r\n### Build Logs\r\n\r\n1. Build Output\r\nhttps://gist.github.com/mykyta-bondarenko-gl/2ed4831f94368b3a00054b0c0c87ff52\r\n\r\n### Example Project \r\n\r\n[Particles](https://github.com/xamarin/private-samples/tree/particles/ios11/Particles) "},{"Id":"8812355731","Type":"PullRequestEvent","CreatedAt":"2018-12-28T14:20:24","Actor":"jonathanantoine","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/5334","RelatedDescription":"Opened pull request \"Update NSUrlSessionHandler to cancel request if provided cancellationToken is already canceled.\" (#5334) at xamarin/xamarin-macios","RelatedBody":"Update NSUrlSessionHandler to cancel request if provided cancellationToken is already canceled.\r\n\r\nAn already cancelled request is no more sent and the task nicely canceled.\r\n\r\nIt fix this issue xamarin#5333 on my tests."},{"Id":"8811782188","Type":"IssuesEvent","CreatedAt":"2018-12-28T11:08:14","Actor":"jonathanantoine","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/issues/5333","RelatedDescription":"Opened issue \"iOS HttpClient GetAsync hangs indefinitely\" (#5333) at xamarin/xamarin-macios","RelatedBody":"<!-- 🚨 STOP 🚨 𝗦𝗧𝗢𝗣 🚨 𝑺𝑻𝑶𝑷 🚨 -->\r\n\r\n<!--\r\nPlease fill in the *entire* template below.\r\nThe template is designed to avoid unnecessary delays to confirm and fix reported issues. Issues with missing information generally end up with a `need-info` label and take significantly more time to fix. Please help us help you!\r\nFor more information see https://github.com/xamarin/xamarin-macios/wiki/Submitting-Bugs-&-Suggestions\r\nFor support requests use https://www.xamarin.com/support\r\n-->\r\n### Steps to Reproduce\r\n\r\nIn certain case when the app is suspended, thread / http requests are no more created and hangs forever.\r\n\r\nSteps to reproduce the issue :\r\n1. Launch the app.\r\n2. Wait for this log to be displayed 'Batch X created'.\r\n3. Wait 1 second.\r\n4. Put the app in background ( press the home button for example).\r\n5. Wait 10 seconds and put the app in foreground.\r\n6. Notice that no more thread / requests are made.\r\n\r\n(I sometimes have to do it several times for the bug to happen).\r\n\r\n### Expected Behavior\r\nThreads and requests are created / send. \r\n### Actual Behavior\r\nNo more threads are created and no more http requests are send.\r\nExample of error log : [logs.zip](https://github.com/xamarin/Xamarin.Forms/files/2714686/logs.zip)\r\n\r\n### Environment\r\n\r\n```\r\n=== Visual Studio Enterprise 2017 for Mac ===\r\n\r\nVersion 7.7.2 (build 21)\r\nInstallation UUID: 37cc8c40-d076-4974-8bf8-344f707f4364\r\n\tGTK+ 2.24.23 (Raleigh theme)\r\n\tXamarin.Mac 4.4.1.178 (master / eeaeb7e6)\r\n\r\n\tPackage version: 516000221\r\n\r\n=== Mono Framework MDK ===\r\n\r\nRuntime:\r\n\tMono 5.16.0.221 (2018-06/b63e5378e38) (64-bit)\r\n\tPackage version: 516000221\r\n\r\n=== NuGet ===\r\n\r\nVersion: 4.8.0.5385\r\n\r\n=== .NET Core ===\r\n\r\nRuntime: /usr/local/share/dotnet/dotnet\r\nRuntime Versions:\r\n\t2.2.0\r\n\t2.1.2\r\n\t2.1.1\r\n\t2.0.5\r\nSDK: /usr/local/share/dotnet/sdk/2.2.101/Sdks\r\nSDK Versions:\r\n\t2.2.101\r\n\t2.1.302\r\n\t2.1.301\r\n\t2.1.4\r\nMSBuild SDKs: /Library/Frameworks/Mono.framework/Versions/5.16.0/lib/mono/msbuild/15.0/bin/Sdks\r\n\r\n=== Xamarin.Profiler ===\r\n\r\nVersion: 1.6.4\r\nLocation: /Applications/Xamarin Profiler.app/Contents/MacOS/Xamarin Profiler\r\n\r\n=== Apple Developer Tools ===\r\n\r\nXcode 10.1 (14460.46)\r\nBuild 10B61\r\n\r\n=== Xamarin.Mac ===\r\n\r\nXamarin.Mac not installed. Can't find /Library/Frameworks/Xamarin.Mac.framework/Versions/Current/Version.\r\n\r\n=== Xamarin.iOS ===\r\n\r\nVersion: 12.2.1.12 (Visual Studio Enterprise)\r\nHash: 65ec520f\r\nBranch: d15-9\r\nBuild date: 2018-12-05 12:06:09-0500\r\n\r\n=== Xamarin.Android ===\r\n\r\nVersion: 9.1.4.2 (Visual Studio Enterprise)\r\nAndroid SDK: /Users/jonathanantoine/Library/Developer/Xamarin/android-sdk-macosx\r\n\tSupported Android versions:\r\n\t\t4.4 (API level 19)\r\n\t\t7.1 (API level 25)\r\n\t\t8.1 (API level 27)\r\n\r\nSDK Tools Version: 26.1.1\r\nSDK Platform Tools Version: 28.0.1\r\nSDK Build Tools Version: 28.0.2\r\n\r\nJava SDK: /Users/jonathanantoine/Library/Developer/Xamarin/jdk/microsoft_dist_openjdk_1.8.0.9\r\nopenjdk version \"1.8.0-9\"\r\nOpenJDK Runtime Environment (build 1.8.0-9-microsoft-b00)\r\nOpenJDK 64-Bit Server VM (build 25.71-b00, mixed mode)\r\n\r\nAndroid Designer EPL code available here:\r\nhttps://github.com/xamarin/AndroidDesigner.EPL\r\n\r\n=== Android Device Manager ===\r\n\r\nVersion: 7.7.1.0\r\nHash: 06ceaea1\r\n\r\n=== Xamarin Inspector ===\r\n\r\nVersion: 1.4.3\r\nHash: db27525\r\nBranch: 1.4-release\r\nBuild date: Mon, 09 Jul 2018 21:20:18 GMT\r\nClient compatibility: 1\r\n\r\n=== Build Information ===\r\n\r\nRelease ID: 707020021\r\nGit revision: f1fea53df9eb0bb5890a9563c0d7ea7b03922144\r\nBuild date: 2018-12-14 18:37:35+00\r\nBuild branch: release-7.7\r\nXamarin extensions: 9c5cea335e6a9ce4ccfde31c4aa06c25a3576085\r\n\r\n=== Operating System ===\r\n\r\nMac OS X 10.14.1\r\nDarwin 18.2.0 Darwin Kernel Version 18.2.0\r\n    Fri Oct  5 19:41:49 PDT 2018\r\n    root:xnu-4903.221.2~2/RELEASE_X86_64 x86_64\r\n\r\n=== Enabled user installed extensions ===\r\n\r\nLiveXAML 1.3.31\r\nNuGet Package Management Extensions 0.13\r\n\r\n\r\n```\r\n\r\n### Build Logs\r\n\r\nI have none.\r\n\r\n\r\n### Example Project (If Possible)\r\n\r\n[ReproTaskPoolNotWorking.zip](https://github.com/xamarin/xamarin-macios/files/2714717/ReproTaskPoolNotWorking.zip)\r\n\r\n\r\nThe code is pretty simple :\r\n` public override void ViewDidLoad()\r\n        {\r\n            base.ViewDidLoad();\r\n            // Perform any additional setup after loading the view, typically from a nib.\r\n\r\n            ThreadPool.SetMinThreads(70, 70);\r\n            ThreadPool.SetMaxThreads(70, 70);\r\n\r\n            Task.Run(() => StartTheLoopAsync().ConfigureAwait(false));\r\n        }\r\n\r\n        private const int howMuchLoop = 60;\r\n        private long _taskCounter = 1;\r\n        private async Task StartTheLoopAsync()\r\n        {\r\n            while (true)\r\n            {\r\n                Debug.WriteLine($\"[{_taskCounter:D4}]Will be starting batch {_taskCounter}\");\r\n\r\n                var toWait = new List<Task<HttpResponseMessage>>(howMuchLoop);\r\n                for (int i = 0; i < howMuchLoop; i++)\r\n                {\r\n                    toWait.Add(Task.Factory.StartNew(\r\n                    () => { return new HttpResponseMessage() { StatusCode = HttpStatusCode.OK }; }\r\n                    , CancellationToken.None, TaskCreationOptions.DenyChildAttach, TaskScheduler.Default));\r\n\r\n                    var httpClient = new HttpClient\r\n                    {\r\n                        Timeout = TimeSpan.FromSeconds(10)\r\n                    };\r\n                    toWait.Add(httpClient.GetAsync(\r\n            \"https://url.com?q=dede\" + Guid.NewGuid().ToString(\"N\").Substring(0, 5)));\r\n\r\n                }\r\n\r\n                Debug.WriteLine($\"[{_taskCounter:D4}] Batch {_taskCounter} created\");\r\n\r\n                try\r\n                {\r\n                    await Task.WhenAll(toWait);\r\n                }\r\n                catch (Exception)\r\n                {\r\n                    // ignore\r\n                }\r\n                var howMuchErrors = toWait.Count(t =>\r\n                {\r\n                    try\r\n                    {\r\n                        return t.Exception != null || !t.Result.IsSuccessStatusCode;\r\n                    }\r\n                    catch (Exception)\r\n                    {\r\n                        return true;\r\n                    }\r\n                }) ;\r\n\r\n                toWait.Clear();\r\n                Debug.WriteLine($\"[{_taskCounter:D4}]batch {_taskCounter} has now been executed : {howMuchErrors} errors.\");\r\n\r\n                _taskCounter++;\r\n                await Task.Delay(1000).ConfigureAwait(false);\r\n            }\r\n        }`\r\n\r\n\r\n\r\n\r\n\r\n<!--\r\nSwitch to the \"Preview\" tab to ensure your issue renders correctly.\r\n-->\r\n"},{"Id":"8810958677","Type":"IssuesEvent","CreatedAt":"2018-12-28T06:43:55","Actor":"PowerOwner","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/issues/5332","RelatedDescription":"Opened issue \"How to use NSArray in corresponding IOS in xamarin?\" (#5332) at xamarin/xamarin-macios","RelatedBody":"How to use NSArray in corresponding IOS in xamarin?\r\ncannot convert from 'int[]' to 'Foundation.NSObject[]'\r\n\r\n```\r\n// -(ISOpenSDKStatus)recognizeCardWithImage:(UIImage *)cardImage recognizeLanguage:(NSArray *)recognizeLanguages needImageProcess:(BOOL)needProcess recognizeResultHandler:(ISRecognizeResultHandler)recognizeResultHandler imageProcessResultHandler:(ISProcessCardResultHandler)processResultHandler;\r\n        \r\n\r\n[Export(\"recognizeCardWithImage:recognizeLanguage:needImageProcess:recognizeResultHandler:imageProcessResultHandler:\")]\r\n\r\nISOpenSDKStatus RecognizeCardWithImage(UIImage cardImage, NSObject[] recognizeLanguages, bool needProcess, ISRecognizeResultHandler recognizeResultHandler, ISProcessCardResultHandler processResultHandler);\r\n```\r\n\r\n```\r\n> Object-C write:\r\n>         NSArray *languages = @[@(1),@(2),@(3)];\r\n```\r\n![image](https://user-images.githubusercontent.com/20768277/50505469-be038600-0aae-11e9-8905-c7b353fad97e.png)\r\n\r\n\r\n```\r\n Xamarin-iOS Write:\r\n int[] languages = new int[] {0,1,2,9,10,20};\r\n```\r\n![image](https://user-images.githubusercontent.com/20768277/50505456-9c0a0380-0aae-11e9-9dba-c035bddf8bb0.png)\r\n\r\n"},{"Id":"8809834201","Type":"IssuesEvent","CreatedAt":"2018-12-27T22:03:10","Actor":"Therzok","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/issues/5331","RelatedDescription":"Opened issue \"[Question] NSArray<T> and covariance\" (#5331) at xamarin/xamarin-macios","RelatedBody":"Should `NSArray<T>` support covariance? That is, given the code below, should it compile?\r\n\r\n```\r\nNSArray<NSScrollView> specific = ...;\r\nNSArray<NSView> generic = specific;\r\n```\r\n\r\nI guess that opens a whole can of worms with what type is registered and runtime when marshalled back and could probably hide issues at runtime.\r\n\r\nThe fix for it would be to add the `out` generic modifier to `NSArray<T>`:\r\n```\r\nclass NSArray<out T> : ...\r\n```"},{"Id":"8800823213","Type":"IssuesEvent","CreatedAt":"2018-12-25T05:45:41","Actor":"albilaga","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/issues/5330","RelatedDescription":"Opened issue \"[XM] Can't run app if application bundle is signed and installer package is signed\" (#5330) at xamarin/xamarin-macios","RelatedBody":"### Steps to Reproduce\r\n\r\n1.  Archive app\r\n2. Sign and distribute using App Store/Mac Installer Package\r\n3. Run the pkg file\r\n\r\n### Expected Behavior\r\nApps in /Applications running\r\n### Actual Behavior\r\nApps in /Applications always force close after run it\r\n\r\nNotes:\r\nApps without signed run well\r\n### Environment\r\n```\r\n=== Visual Studio Community 2017 for Mac ===\r\n\r\nVersion 7.7.2 (build 21)\r\nInstallation UUID: 604c8381-2bd0-4f31-8ed6-4fbf83a66fd0\r\n\tGTK+ 2.24.23 (Raleigh theme)\r\n\tXamarin.Mac 4.4.1.178 (master / eeaeb7e6)\r\n\r\n\tPackage version: 516000221\r\n\r\n=== Mono Framework MDK ===\r\n\r\nRuntime:\r\n\tMono 5.16.0.221 (2018-06/b63e5378e38) (64-bit)\r\n\tPackage version: 516000221\r\n\r\n=== NuGet ===\r\n\r\nVersion: 4.8.0.5385\r\n\r\n=== .NET Core ===\r\n\r\nRuntime: /usr/local/share/dotnet/dotnet\r\nRuntime Versions:\r\n\t2.2.0\r\n\t2.1.2\r\nSDK: /usr/local/share/dotnet/sdk/2.2.100/Sdks\r\nSDK Versions:\r\n\t2.2.100\r\n\t2.1.302\r\nMSBuild SDKs: /Library/Frameworks/Mono.framework/Versions/5.16.0/lib/mono/msbuild/15.0/bin/Sdks\r\n\r\n=== Xamarin.Profiler ===\r\n\r\nVersion: 1.6.4\r\nLocation: /Applications/Xamarin Profiler.app/Contents/MacOS/Xamarin Profiler\r\n\r\n=== Xamarin.Android ===\r\n\r\nVersion: 9.1.4.2 (Visual Studio Community)\r\nAndroid SDK: /Users/albilaga/Library/Android/sdk\r\n\tSupported Android versions:\r\n\t\t5.0 (API level 21)\r\n\t\t6.0 (API level 23)\r\n\t\t7.1 (API level 25)\r\n\t\t8.0 (API level 26)\r\n\t\t8.1 (API level 27)\r\n\r\nSDK Tools Version: 26.1.1\r\nSDK Platform Tools Version: 28.0.1\r\nSDK Build Tools Version: 28.0.3\r\n\r\nJava SDK: /Users/albilaga/Library/Developer/Xamarin/jdk/microsoft_dist_openjdk_1.8.0.9\r\nopenjdk version \"1.8.0-9\"\r\nOpenJDK Runtime Environment (build 1.8.0-9-microsoft-b00)\r\nOpenJDK 64-Bit Server VM (build 25.71-b00, mixed mode)\r\n\r\nAndroid Designer EPL code available here:\r\nhttps://github.com/xamarin/AndroidDesigner.EPL\r\n\r\n=== Android Device Manager ===\r\n\r\nVersion: 7.7.1.0\r\nHash: 06ceaea1\r\n\r\n=== Apple Developer Tools ===\r\n\r\nXcode 10.1 (14460.46)\r\nBuild 10B61\r\n\r\n=== Xamarin.Mac ===\r\n\r\nVersion: 5.2.1.12 (Visual Studio Community)\r\nHash: 65ec520f\r\nBranch: \r\nBuild date: 2018-12-05 12:06:09-0500\r\n\r\n=== Xamarin.iOS ===\r\n\r\nVersion: 12.2.1.12 (Visual Studio Community)\r\nHash: 65ec520f\r\nBranch: d15-9\r\nBuild date: 2018-12-05 12:06:09-0500\r\n\r\n=== Xamarin Inspector ===\r\n\r\nVersion: 1.4.3\r\nHash: db27525\r\nBranch: 1.4-release\r\nBuild date: Mon, 09 Jul 2018 21:20:18 GMT\r\nClient compatibility: 1\r\n\r\n=== Build Information ===\r\n\r\nRelease ID: 707020021\r\nGit revision: f1fea53df9eb0bb5890a9563c0d7ea7b03922144\r\nBuild date: 2018-12-14 18:37:35+00\r\nBuild branch: release-7.7\r\nXamarin extensions: 9c5cea335e6a9ce4ccfde31c4aa06c25a3576085\r\n\r\n=== Operating System ===\r\n\r\nMac OS X 10.14.2\r\nDarwin 18.2.0 Darwin Kernel Version 18.2.0\r\n    Mon Nov 12 20:24:46 PST 2018\r\n    root:xnu-4903.231.4~2/RELEASE_X86_64 x86_64\r\n\r\n=== Enabled user installed extensions ===\r\n\r\nAndroid Signature Tool 2.1.2\r\nMFractor 3.6.9\r\nMutatio 1.0.2\r\n\r\n```\r\n\r\n"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1075783769876033536","CreatedAt":"2018-12-20T16:03:32+00:00","UserScreenname":"xamarinhq","Text":"Introducing Xamarin.Essentials, a new library that abstracts native APIs into a set of cross-platform APIs giving y… https://t.co/EMM97iFY9o","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":268,"FavoriteCount":118,"RawContent":null},{"Id":"1072256672498966533","CreatedAt":"2018-12-10T22:28:06+00:00","UserScreenname":"xamarinhq","Text":"CarouselView is Here! Xamarin.Forms 4.0 now includes an entirely new point of view. ...as part of the upcoming rele… https://t.co/Vh8UMRM4ez","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":154,"FavoriteCount":68,"RawContent":null},{"Id":"1070425707770195968","CreatedAt":"2018-12-05T21:12:30+00:00","UserScreenname":"xamarinhq","Text":"Yesterday at Microsoft Connect(); 2018 we announced our plans &amp; preview for Xamarin.Forms 4.0. This post will give… https://t.co/oNXLJGsrQ8","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":144,"FavoriteCount":74,"RawContent":null},{"Id":"1070075277101944833","CreatedAt":"2018-12-04T22:00:01+00:00","UserScreenname":"xamarinhq","Text":"Today, at #MSFTConnect 2018, we have several exciting announcements about brand new capabilities and foundational i… https://t.co/olEK9QjR1j","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":54,"FavoriteCount":38,"RawContent":null},{"Id":"1069721699225088008","CreatedAt":"2018-12-03T22:35:02+00:00","UserScreenname":"xamarinhq","Text":"Here's what we have coming up this month for #Xamarin and #dotNET Developer Events in December:… https://t.co/oAMbLqXh9f","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":45,"FavoriteCount":18,"RawContent":null},{"Id":"1068601941339582469","CreatedAt":"2018-11-30T20:25:31+00:00","UserScreenname":"xamarinhq","Text":"Now announcing multi-targeting with Android Support Library v28. \n\n...but what is multi-targeting you ask? Well, no… https://t.co/oBJ1j9vP6P","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":95,"FavoriteCount":53,"RawContent":null},{"Id":"1067915081495846913","CreatedAt":"2018-11-28T22:56:10+00:00","UserScreenname":"xamarinhq","Text":"The Xamarin #Android team has been working hard on improving Build Performance &amp; Reliability in both #VS2017 v15.9… https://t.co/c4iSbZJDy9","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":84,"FavoriteCount":45,"RawContent":null},{"Id":"1063457672048058371","CreatedAt":"2018-11-16T15:44:01+00:00","UserScreenname":"xamarinhq","Text":"Announcing the release of Xamarin.Forms 3.4.0 w/ even more bug fixes and another new highly requested feature, an I… https://t.co/EJadLHYi73","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":179,"FavoriteCount":105,"RawContent":null},{"Id":"1063145593562902528","CreatedAt":"2018-11-15T19:03:56+00:00","UserScreenname":"xamarinhq","Text":"Build and deploy #ethereum smart contracts using the new @trufflesuite extension for #VSCode from @MSFTBlockchain… https://t.co/nEbiFUYaM2","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":37,"FavoriteCount":18,"RawContent":null},{"Id":"1062819180100100099","CreatedAt":"2018-11-14T21:26:53+00:00","UserScreenname":"xamarinhq","Text":"Want to get started w/ mobile dev using C# &amp; #Xamarin? We've got a Twitch Workshop for that.\n\nComing Friday, Nov 16… https://t.co/ce2vH9dC4t","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":114,"FavoriteCount":61,"RawContent":null},{"Id":"1058039721652297729","CreatedAt":"2018-11-01T16:55:01+00:00","UserScreenname":"xamarinhq","Text":"Get all the links you need for the world-wide, community-run mobile dev engagements happening for the Xamarin &amp;… https://t.co/eiJXYtWfvG","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":43,"FavoriteCount":26,"RawContent":null},{"Id":"1053027600086552576","CreatedAt":"2018-10-18T20:58:38+00:00","UserScreenname":"xamarinhq","Text":"TY2 you &amp; the Xamarin.Forms team we've filled in some of the features you’ve told us are important to building your… https://t.co/lwqRjrIFEi","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":62,"FavoriteCount":31,"RawContent":null},{"Id":"1052217100041945088","CreatedAt":"2018-10-16T15:18:00+00:00","UserScreenname":"xamarinhq","Text":"A full day of community-driven sessions on cross-platform mobile application development with Xamarin, DevOps with… https://t.co/07SVz6rgLT","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":53,"FavoriteCount":22,"RawContent":null},{"Id":"1050824055014744064","CreatedAt":"2018-10-12T19:02:32+00:00","UserScreenname":"xamarinhq","Text":"Now, in #VisualStudio 15.8, Dotfuscator Community can help protect your https://t.co/FGIvdxOrYa Apps at Runtime by… https://t.co/iPm1GjIrpS","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":54,"FavoriteCount":29,"RawContent":null},{"Id":"1050447051228631040","CreatedAt":"2018-10-11T18:04:28+00:00","UserScreenname":"xamarinhq","Text":"With Xamarin.Forms, the UI and app logic for your app resides in a single codebase and you get to use a single IDE… https://t.co/SMq0XwjtKL","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":62,"FavoriteCount":38,"RawContent":null},{"Id":"1047580523881799680","CreatedAt":"2018-10-03T20:13:54+00:00","UserScreenname":"xamarinhq","Text":"Do both types of testing with your Visual Studio App Center CI/CD pipeline - cover the Data Access Layer with unit… https://t.co/6y14u8p3lQ","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":65,"FavoriteCount":34,"RawContent":null},{"Id":"1046875654631886850","CreatedAt":"2018-10-01T21:33:00+00:00","UserScreenname":"xamarinhq","Text":"Microsoft named a leader in 2018 analyst reports on mobile app development. Get complimentary access to reports fro… https://t.co/EWg450kHpI","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":69,"FavoriteCount":33,"RawContent":null},{"Id":"1041764665536196609","CreatedAt":"2018-09-17T19:03:45+00:00","UserScreenname":"xamarinhq","Text":"...released to NuGet today, Xamarin.Forms 3.2.0. We've kicked off another round of updates, and this time we tackle… https://t.co/zyFILHsEUu","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":200,"FavoriteCount":112,"RawContent":null}]}},"RunOn":"2019-01-01T05:31:16.0302209Z","RunDurationInMilliseconds":4299}