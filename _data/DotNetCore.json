{"Data":{"Blog":{"FeedItems":[{"Title":".NET Core 2.0 will reach End of Life on September 1, 2018","PublishedOn":"2018-06-20T19:12:38+00:00","CommentsCount":0,"FacebookCount":0,"Summary":".NET Core 2.0 was released on August 14, 2017. As a non-LTS release, it is supported for 3 months after the next release. .NET Core 2.1 was released on May 30th, 2018. As a result, .NET Core 2.0 will...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/","RawContent":null},{"Title":"The RyuJIT transition is complete!","PublishedOn":"2018-06-19T22:53:27+00:00","CommentsCount":15,"FacebookCount":0,"Summary":"RyuJIT is the code name for the .NET just-in-time compiler, one of the foundational components of the .NET runtime. In contrast, the Roslyn C# compiler compiles C# code to IL byte code. The RyuJIT...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/06/19/the-ryujit-transition-is-complete/","RawContent":null},{"Title":"Staying up-to-date with .NET Container Images","PublishedOn":"2018-06-18T18:59:03+00:00","CommentsCount":4,"FacebookCount":0,"Summary":"This post describes the container images that we produce and update for you, that you can use with Docker, Kubernetes and other systems. When you are using .NET and Docker together, you are probably...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/06/18/staying-up-to-date-with-net-container-images/","RawContent":null},{"Title":"Using .NET and Docker Together – DockerCon 2018 Update","PublishedOn":"2018-06-14T00:15:31+00:00","CommentsCount":9,"FacebookCount":0,"Summary":"I posted about Using .NET and Docker Together last year. With DockerCon 2018 being this week, it seemed like a great time to give you an update.  Since my last post, we&#8217;ve enabled a set of...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/06/13/using-net-and-docker-together-dockercon-2018-update/","RawContent":null},{"Title":".NET Framework June 2018 Security and Quality Rollup","PublishedOn":"2018-06-13T19:29:27+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, we are releasing the June 2018 Security and Quality Rollup. Security No new security fixes. See .NET Framework May 2018 Security and Quality Rollup for the latest security updates. Quality and...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/06/13/net-framework-june-2018-security-and-quality-rollup/","RawContent":null},{"Title":"Announcing .NET Framework 4.8 Early Access build 3621!","PublishedOn":"2018-06-06T21:19:43+00:00","CommentsCount":38,"FacebookCount":0,"Summary":"Today, we are happy to share the .NET Framework 4.8 Early Access build 3621 for your feedback. This is one of the in-development builds of the next version of the .NET Framework. The changes in this...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/06/06/announcing-net-framework-4-8-early-access-build-3621/","RawContent":null},{"Title":"Announcing ML.NET 0.2","PublishedOn":"2018-06-06T04:36:25+00:00","CommentsCount":5,"FacebookCount":0,"Summary":"Last month at //Build 2018, we released ML.NET 0.1, a cross-platform, open source machine learning framework. We would like to thank the community for the engagement so far in helping us shape ML.NET....","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/06/05/announcing-ml-net-0-2/","RawContent":null},{"Title":"Announcing .NET Core 2.1","PublishedOn":"2018-05-30T17:22:16+00:00","CommentsCount":71,"FacebookCount":0,"Summary":"We&#8217;re excited to announce the release of .NET Core 2.1. It includes improvements to performance, to the runtime and tools. It also includes a new way to deploy tools as NuGet packages....","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/05/30/announcing-net-core-2-1/","RawContent":null},{"Title":"Announcing Entity Framework Core 2.1","PublishedOn":"2018-05-30T17:22:00+00:00","CommentsCount":11,"FacebookCount":0,"Summary":"Today we are excited to announce the release of Entity Framework (EF) Core 2.1. This is the latest production-ready release of our open-source and cross-platform data access technology. We are...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/05/30/announcing-entity-framework-core-2-1/","RawContent":null},{"Title":".NET Framework May 2018 Preview of Quality Rollup for Windows 10 April 2018 Update (version 1803)","PublishedOn":"2018-05-24T01:49:57+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"Today, we are releasing the May 2018 Preview of Quality Rollup for Windows 10 April 2018 Update (version 1803). Quality and Reliability This release contains the following quality and reliability...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/05/23/net-framework-may-2018-preview-of-quality-rollup-for-windows-10-april-2018-update-version-1803/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"7724991049","Type":"PullRequestEvent","CreatedAt":"2018-05-24T16:33:10","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/103","RelatedDescription":"Merged pull request \"Add ML.NET to readme\" (#103) at dotnet/home","RelatedBody":"cc @shauheen @jongalloway "},{"Id":"7724874671","Type":"PullRequestEvent","CreatedAt":"2018-05-24T16:12:32","Actor":"danmosemsft","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/103","RelatedDescription":"Opened pull request \"Add ML.NET to readme\" (#103) at dotnet/home","RelatedBody":"cc @shauheen @jongalloway "},{"Id":"7697543163","Type":"PullRequestEvent","CreatedAt":"2018-05-18T19:10:28","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/91","RelatedDescription":"Merged pull request \"Add NUnit to the .NET Foundation Projects\" (#91) at dotnet/home","RelatedBody":""},{"Id":"7697541521","Type":"PullRequestEvent","CreatedAt":"2018-05-18T19:10:06","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/92","RelatedDescription":"Merged pull request \"Remove contact email from system.drawing.md\" (#92) at dotnet/home","RelatedBody":"Contact email is outdated. Mono-project site's community section has better, more up-to-date information."},{"Id":"7697539314","Type":"PullRequestEvent","CreatedAt":"2018-05-18T19:09:35","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/93","RelatedDescription":"Merged pull request \"Add Humanizer\" (#93) at dotnet/home","RelatedBody":"Onboarding Humanizer: https://github.com/Humanizr/Humanizer/issues/682"},{"Id":"7697528376","Type":"PullRequestEvent","CreatedAt":"2018-05-18T19:07:09","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/94","RelatedDescription":"Merged pull request \"add SourceLink\" (#94) at dotnet/home","RelatedBody":"Adding SourceLink to the project list as per the checklist https://github.com/ctaggart/SourceLink/issues/138"},{"Id":"7697526900","Type":"PullRequestEvent","CreatedAt":"2018-05-18T19:06:48","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/95","RelatedDescription":"Merged pull request \"Fix broken logo URL\" (#95) at dotnet/home","RelatedBody":""},{"Id":"7697525283","Type":"PullRequestEvent","CreatedAt":"2018-05-18T19:06:25","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/96","RelatedDescription":"Merged pull request \"Adding DNN Platform.\" (#96) at dotnet/home","RelatedBody":""},{"Id":"7697523628","Type":"PullRequestEvent","CreatedAt":"2018-05-18T19:06:02","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/98","RelatedDescription":"Merged pull request \"Updates to reflect the latest information\" (#98) at dotnet/home","RelatedBody":""},{"Id":"7697521624","Type":"PullRequestEvent","CreatedAt":"2018-05-18T19:05:34","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/100","RelatedDescription":"Merged pull request \"Create mvvmcross.md\" (#100) at dotnet/home","RelatedBody":"Added MvvmCross as project as part of on-boarding.\r\n\r\nhttps://github.com/MvvmCross/MvvmCross/issues/2415"},{"Id":"7697519505","Type":"PullRequestEvent","CreatedAt":"2018-05-18T19:05:08","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/102","RelatedDescription":"Merged pull request \"Update projects.json adding MLNET\" (#102) at dotnet/home","RelatedBody":""}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"7780591341","Type":"IssuesEvent","CreatedAt":"2018-06-05T20:33:11","Actor":"huanwu","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/72","RelatedDescription":"Opened issue \"Introducing dotnet-svcutil.xmlserializer for .NET Core\" (#72) at dotnet/announcements","RelatedBody":"# Introducing dotnet-svcutil.xmlserializer for .NET Core\r\nOn the full .NET Framework you are able to pre-generate a serialization assembly using the tool svcutil. We are providing similar functionality on .NET Core by releasing the dotnet-svcutil.xmlserializer NuGet package. It pre-generates c# serialization code for the types used by WCF Service Contract in the client applications that can be serialized using the XmlSerializer to improve the startup performance of Xml Serialization when serializing or de-serializing objects of those types using XmlSerializer. \r\nYou can start using the tool today by following the instructions. \r\n## Discussion \r\nPlease share with us any thoughts of questions that you may have at: \r\n\r\n- dotnet/wcf [#2927](https://github.com/dotnet/wcf/issues/2927)\r\n## Details \r\nWhen to use XmlSerializer with WCF in an app to serialize contract data types, it will generate an XmlSerializer during runtime to do the serialization. You can improve the startup performance of Xml serialization by simply adding the reference of dotnet-svcutil.xmlserializer NuGet package to your project. This tool will generate the serialization code and compile it into an assembly next to your output assembly at build time in advance. This assembly can then be deployed and ran with your application. \r\n\r\nPlease create an issue with your feedback at [dotnet/wcf](https://github.com/dotnet/wcf/issues). We are actively looking to improve the tool and your input is a valuable part of the process. "},{"Id":"7719029569","Type":"IssuesEvent","CreatedAt":"2018-05-23T18:04:46","Actor":"mlacouture","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/70","RelatedDescription":"Opened issue \"Introducing dotnet-svcutil\" (#70) at dotnet/announcements","RelatedBody":"# Introducing dotnet-svcutil\r\n\r\nThe Microsoft Windows Communication Foundation (WCF) **dotnet-svcutil** tool is a .NET Core CLI tool that retrieves metadata from a web service on a network location or from a WSDL file, and generates a WCF class containing client proxy methods that you can use to access the web service operations.\r\n\r\nSimilarly to the [Service Model Metadata - svcutil](https://docs.microsoft.com/en-us/dotnet/framework/wcf/servicemodel-metadata-utility-tool-svcutil-exe) tool for .NET Framework projects, the **dotnet-svcutil** is a command line tool for generating a web service reference compatible with .NET Core and .NET Standard projects. \r\n\r\nThe **dotnet-svcutil** tool is an alternative option to the [WCF Web Service Reference ](https://docs.microsoft.com/en-us/dotnet/core/additional-tools/wcf-web-service-reference-guide)Visual Studio connected service provider which first shipped with Visual Studio 2017 v15.5.  The **dotnet-svcutil** tool as a .NET Core CLI tool, however, can be run on multiple platforms like Linux and MacOS in addition to Windows.\r\n\r\n# Discussion\r\nPlease share your thoughts with us by commenting on GitHub issue dotnet/wcf#2894\r\n"}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"7862162156","Type":"IssuesEvent","CreatedAt":"2018-06-22T05:29:49","Actor":"GrabYourPitchforks","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/18603","RelatedDescription":"Opened issue \"RyuJIT and SIMD - suboptimal codegen when performing bitmask comparisons\" (#18603) at dotnet/coreclr","RelatedBody":"```cs\r\n    private static bool TestMask(ref Vector<byte> a, ref Vector<byte> b)\r\n    {\r\n        return (a & b) == Vector<byte>.Zero;\r\n    }\r\n```\r\n\r\nThis generates the codegen (x64):\r\n\r\n```asm\r\n00007FF82F4D1524  vmovupd     ymm0,ymmword ptr [rsi]  \r\n00007FF82F4D1529  vmovupd     ymm1,ymmword ptr [rdi]  \r\n00007FF82F4D152E  vpand       ymm0,ymm0,ymm1  \r\n00007FF82F4D1533  vptest      ymm0,ymm0  \r\n00007FF82F4D1538  sete        al \r\n```\r\n\r\nThe `vpand` instruction is unnecessary, as the comparison line could read simply `vptest ymm0,ymm1`, which sets both _ZF_ and _CF_ (see http://www.felixcloutier.com/x86/PTEST.html)."},{"Id":"7861817052","Type":"IssuesEvent","CreatedAt":"2018-06-22T03:01:28","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/18602","RelatedDescription":"Opened issue \"\"Go to disassembly\" in VS aborts debugging session\" (#18602) at dotnet/coreclr","RelatedBody":"Repro:\r\n\r\n- Attach VS to CoreCLR process\r\n- Find frame in System.Private.Corelib\r\n- Select \"Go to disassembly\"\r\n\r\nResult: \r\n\r\nmsvsmon.exe crashes\r\n"},{"Id":"7861709484","Type":"PullRequestEvent","CreatedAt":"2018-06-22T02:19:46","Actor":"JongHeonChoi","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/pull/18523","RelatedDescription":"Closed pull request \"Update Tizen CI docker image (tizen-rootfs-5.0m1)\" (#18523) at dotnet/coreclr","RelatedBody":""},{"Id":"7861609123","Type":"PullRequestEvent","CreatedAt":"2018-06-22T01:39:24","Actor":"Anipik","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/18597","RelatedDescription":"Merged pull request \"Moved Semaphore.cs and Semaphore.Windows.cs to shared\" (#18597) at dotnet/coreclr","RelatedBody":"Related CorertPR :- https://github.com/dotnet/corert/pull/5986"},{"Id":"7861603360","Type":"PullRequestEvent","CreatedAt":"2018-06-22T01:37:00","Actor":"stephentoub","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/18578","RelatedDescription":"Merged pull request \"Update behaviors of new TextWriter StringBuilder overloads\" (#18578) at dotnet/coreclr","RelatedBody":"Two issues addressed:\r\n- The other overloads support inputs (string, char[], etc.) being null, and just treat that the same as an empty string.  We should do the same for StringBuilder rather than throwing.\r\n- CancellationToken was being ignored; the overloads should check whether cancellation was requested.  This applies to the existing Write{Line}Async overloads that were added in 2.1.\r\n\r\ncc: @vancem, @JeremyKuhne, @pjanotti "}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"7861413795","Type":"IssuesEvent","CreatedAt":"2018-06-22T00:17:25","Actor":"ctaggart","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/9538","RelatedDescription":"Opened issue \"can't compile F# projects on microsoft/dotnet:2.1-sdk-alpine (bash dependency)\" (#9538) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\n```\r\ndocker run --rm microsoft/dotnet:2.1-sdk-alpine /usr/share/dotnet/sdk/2.1.301/FSharp/RunFsc.sh\r\n```\r\n\r\n## Expected  behavior\r\nThe F# compiler runs on published SDK image. A couple of simple solutions are:\r\n- install `bash` on the Alpine SDK image\r\n- change the shell script to not be bash specific\r\n```\r\ndocker run --rm microsoft/dotnet:2.1-sdk-alpine sh /usr/share/dotnet/sdk/2.1.301/FSharp/RunFsc.sh\r\n/usr/share/dotnet/sdk/2.1.301/FSharp/RunFsc.sh: line 9: syntax error: bad substitution\r\n```\r\n\r\n## Actual behavior\r\n```\r\nenv: can't execute 'bash': No such file or directory\r\n```\r\nI can't build any F# projects without installing `bash` first. Workaround:\r\n```\r\ndocker run --rm microsoft/dotnet:2.1-sdk-alpine sh -c \"apk update; apk add bash; /usr/share/dotnet/sdk/2.1.301/FSharp/RunFsc.sh\"\r\n```\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\ncc @KevinRansom \r\n\r\n\r\n\r\n"},{"Id":"7861263046","Type":"IssuesEvent","CreatedAt":"2018-06-21T23:19:36","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/9537","RelatedDescription":"Closed issue \"No dotnet restore --configuration option\" (#9537) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\nCreate a csproj file with conditional package references\r\n\r\nExample:\r\n```xml\r\n<ItemGroup Condition=\"'$(Configuration)' == 'NUnitLite'\">\r\n    <PackageReference Include=\"NUnitLite\" Version=\"3.9.0\" />\r\n</ItemGroup>\r\n```\r\n\r\n## Expected  behavior\r\ndotnet restore should respect the --configuration parameter.\r\n```bash\r\ndotnet restore --configuration NUnitLite\r\n```\r\n\r\n## Actual behavior\r\ndotnet restore doesn't have a --configuration option\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n```\r\n.NET Command Line Tools (2.1.201)\r\n\r\nProduct Information:\r\n Version:            2.1.201\r\n Commit SHA-1 hash:  7932dc6179\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.201\\\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.7\r\n  Build    : 2d61d0b043915bc948ebf98836fefe9ba942be11\r\n```\r\n\r\n\r\n\r\n\r\n\r\n"},{"Id":"7861176478","Type":"IssuesEvent","CreatedAt":"2018-06-21T22:52:19","Actor":"bcuff","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/9537","RelatedDescription":"Opened issue \"No dotnet restore --configuration option\" (#9537) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\nCreate a csproj file with conditional package references\r\n\r\nExample:\r\n```xml\r\n<ItemGroup Condition=\"'$(Configuration)' == 'NUnitLite'\">\r\n    <PackageReference Include=\"NUnitLite\" Version=\"3.9.0\" />\r\n</ItemGroup>\r\n```\r\n\r\n## Expected  behavior\r\ndotnet restore should respect the --configuration parameter.\r\n```bash\r\ndotnet restore --configuration NUnitLite\r\n```\r\n\r\n## Actual behavior\r\ndotnet restore doesn't have a --configuration option\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n```\r\n.NET Command Line Tools (2.1.201)\r\n\r\nProduct Information:\r\n Version:            2.1.201\r\n Commit SHA-1 hash:  7932dc6179\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.201\\\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.7\r\n  Build    : 2d61d0b043915bc948ebf98836fefe9ba942be11\r\n```\r\n\r\n\r\n\r\n\r\n\r\n"},{"Id":"7860958109","Type":"PullRequestEvent","CreatedAt":"2018-06-21T21:51:21","Actor":"johnbeisner","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/pull/9532","RelatedDescription":"Closed pull request \"[WIP] Testing CI legs; CLI:release/2.1.3xx\" (#9532) at dotnet/cli","RelatedBody":"Testing CI legs; CLI:release/2.1.3xx"},{"Id":"7860937761","Type":"PullRequestEvent","CreatedAt":"2018-06-21T21:46:15","Actor":"johnbeisner","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/pull/9339","RelatedDescription":"Closed pull request \"Splitting the 'ItPublishesARunnableSelfContainedApp' test into 2 tests.\" (#9339) at dotnet/cli","RelatedBody":"Splitting the 'ItPublishesARunnableSelfContainedApp' test into: an 'implicit' and an 'explicit' version.\r\n\r\nAddresses: https://github.com/dotnet/sdk/issues/2263\r\n\r\n"},{"Id":"7860936027","Type":"PullRequestEvent","CreatedAt":"2018-06-21T21:45:50","Actor":"johnbeisner","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/9536","RelatedDescription":"Opened pull request \"Splitting the 'ItPublishesARunnableSelfContainedApp' test\" (#9536) at dotnet/cli","RelatedBody":"Splitting the 'ItPublishesARunnableSelfContainedApp' test into: an 'implicit' and 'explict' version; updating to supported runtime versions.\r\n\r\nAddresses: https://github.com/dotnet/sdk/issues/2263\r\nNote: Tests for the problem; does not solve the problem - with '1.1.9-servicing-001750-00' these tests pass.\r\n\r\nRelated: https://github.com/dotnet/cli/pull/9339\r\n"},{"Id":"7860843449","Type":"PullRequestEvent","CreatedAt":"2018-06-21T21:24:17","Actor":"johnbeisner","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/9535","RelatedDescription":"Opened pull request \"Fix the CI legs; CLI:release/2.1.3xx\" (#9535) at dotnet/cli","RelatedBody":"The Linux-musl command-line should be derived from \"baseShellBuildCommand\" not \"buildCommand\"\r\n\r\nFollow-up to PR: https://github.com/dotnet/cli/pull/9502\r\n"},{"Id":"7860589451","Type":"IssuesEvent","CreatedAt":"2018-06-21T20:30:19","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/9534","RelatedDescription":"Closed issue \"build error -v\" (#9534) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\ndotnet build -v\r\n\r\n## Expected  behavior\r\ninfo: Microsoft.AspNetCore.DataProtection.KeyManagement.XmlKeyManager[0]\r\n      User profile is available. Using '/home/galone/.aspnet/DataProtection-Keys' as key repository; keys will not be encrypted at rest.\r\nHosting environment: Development\r\nContent root path: /home/galone/Desktop/teste\r\nNow listening on: http://localhost:5000\r\nApplication started. Press Ctrl+C to shut down.\r\n\r\n\r\n## Actual behavior\r\nSystem.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\r\nParameter name: index\r\n   at System.ThrowHelper.ThrowArgumentOutOfRange_IndexException()\r\n   at System.SZArrayHelper.get_Item[T](Int32 index)\r\n   at System.Linq.Enumerable.ElementAt[TSource](IEnumerable`1 source, Int32 index)\r\n   at Microsoft.DotNet.Cli.Telemetry.TelemetryFilter.LogVerbosityForAllTopLevelCommand(ICollection`1 result, ParseResult parseResult, String topLevelCommandName)\r\n   at Microsoft.DotNet.Cli.Telemetry.TelemetryFilter.Filter(Object objectToFilter)\r\n   at Microsoft.DotNet.Cli.Utils.TelemetryEventEntry.SendFiltered(Object o)\r\n   at Microsoft.DotNet.Cli.Program.ProcessArgs(String[] args, ITelemetry telemetryClient)\r\n   at Microsoft.DotNet.Cli.Program.Main(String[] args)\r\n\r\n\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\nCommand Line Tools .NET (2.1.200)\r\n\r\nProduct Information:\r\n Version:            2.1.200\r\n Commit SHA-1 hash:  2edba8d7f1\r\n\r\nRuntime Environment:\r\n OS Name:     deepin\r\n OS Version:  15.5\r\n OS Platform: Linux\r\n RID:         linux-x64\r\n Base Path:   /usr/share/dotnet/sdk/2.1.200/\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.7\r\n  Build    : 2d61d0b043915bc948ebf98836fefe9ba942be11\r\n\r\n\r\n\r\n\r\n\r\n\r\n"},{"Id":"7860585738","Type":"IssuesEvent","CreatedAt":"2018-06-21T20:29:35","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/9533","RelatedDescription":"Closed issue \" build without errors\" (#9533) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\ndotnet build -v\r\n\r\n## Expected  behavior\r\ninfo: Microsoft.AspNetCore.DataProtection.KeyManagement.XmlKeyManager[0]\r\n      User profile is available. Using '/home/galone/.aspnet/DataProtection-Keys' as key repository; keys will not be encrypted at rest.\r\nHosting environment: Development\r\nContent root path: /home/galone/Desktop/teste\r\nNow listening on: http://localhost:5000\r\nApplication started. Press Ctrl+C to shut down.\r\n\r\n\r\n## Actual behavior\r\nSystem.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\r\nParameter name: index\r\n   at System.ThrowHelper.ThrowArgumentOutOfRange_IndexException()\r\n   at System.SZArrayHelper.get_Item[T](Int32 index)\r\n   at System.Linq.Enumerable.ElementAt[TSource](IEnumerable`1 source, Int32 index)\r\n   at Microsoft.DotNet.Cli.Telemetry.TelemetryFilter.LogVerbosityForAllTopLevelCommand(ICollection`1 result, ParseResult parseResult, String topLevelCommandName)\r\n   at Microsoft.DotNet.Cli.Telemetry.TelemetryFilter.Filter(Object objectToFilter)\r\n   at Microsoft.DotNet.Cli.Utils.TelemetryEventEntry.SendFiltered(Object o)\r\n   at Microsoft.DotNet.Cli.Program.ProcessArgs(String[] args, ITelemetry telemetryClient)\r\n   at Microsoft.DotNet.Cli.Program.Main(String[] args)\r\n\r\n\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\nCommand Line Tools .NET (2.1.200)\r\n\r\nProduct Information:\r\n Version:            2.1.200\r\n Commit SHA-1 hash:  2edba8d7f1\r\n\r\nRuntime Environment:\r\n OS Name:     deepin\r\n OS Version:  15.5\r\n OS Platform: Linux\r\n RID:         linux-x64\r\n Base Path:   /usr/share/dotnet/sdk/2.1.200/\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.7\r\n  Build    : 2d61d0b043915bc948ebf98836fefe9ba942be11\r\n\r\n\r\n\r\n\r\n\r\n\r\n"}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"7860997872","Type":"IssuesEvent","CreatedAt":"2018-06-21T22:01:18","Actor":"pomeara","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/780","RelatedDescription":"Closed issue \".net core and .net standard projects\" (#780) at dotnet/standard","RelatedBody":"I've been working on a .NET Core project which uses a .NET Standard back-end and from what I can tell this is mainly due to the OAuth only being implemented in .NET Standard.  I was wanting a pure .NET Core solution, however am now considering that it's probably less painful to just have all back end DLLs as .NET Standard libraries as I started to split the back end up into different layers (repos, domain, etc) and found that the OAuth restriction was causing a painful issue with what could reference what) - thoughts?"},{"Id":"7859387848","Type":"IssuesEvent","CreatedAt":"2018-06-21T16:26:40","Actor":"pmarangoni","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/777","RelatedDescription":"Closed issue \"Problem upgrading NETStandard.Library from 2.0.1 to 2.0.3\" (#777) at dotnet/standard","RelatedBody":"- ASP.NET MVC project\r\n- Using NuGet, I see there is a new version of NETStandardLibrary so I elect to upgrade it\r\n- After upgrading to 2.0.3, I can no longer build the solution. I get this error:\r\nThis project references NuGet package(s) that are missing on this computer. Use NuGet Package Restore to download them. For more information (blah, blah, blah)… The missing file is ..\\packages\\NETStandard.Library.2.0.1\\build\\NETStandard.Library.targets\r\n\r\nThe only way to proceed is to revert back to 2.0.1."},{"Id":"7856759706","Type":"IssuesEvent","CreatedAt":"2018-06-21T08:39:58","Actor":"pomeara","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/780","RelatedDescription":"Opened issue \".net core and .net standard projects\" (#780) at dotnet/standard","RelatedBody":"I've been working on a .NET Core project which uses a .NET Standard back-end and from what I can tell this is mainly due to the OAuth only being implemented in .NET Standard.  I was wanting a pure .NET Core solution, however am now considering that it's probably less painful to just have all back end DLLs as .NET Standard libraries as I started to split the back end up into different layers (repos, domain, etc) and found that the OAuth restriction was causing a painful issue with what could reference what) - thoughts?"}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"7861985182","Type":"PullRequestEvent","CreatedAt":"2018-06-22T04:11:54","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/30591","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#30591) at dotnet/corefx","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7861826211","Type":"IssuesEvent","CreatedAt":"2018-06-22T03:05:12","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/30592","RelatedDescription":"Opened issue \"Add MemoryExtensions.Trim methods for ReadOnlyMemory<char>\" (#30592) at dotnet/corefx","RelatedBody":"Most of the `ReadOnlySpan<char>`-based methods on `MemoryExtensions` work well for `ReadOnlyMemory<char>` as well, since it both exposes a `Span` property of type `ReadOnlySpan<char>` and is implicitly convertible to `ReadOnlySpan<char>`.  However, a few of the methods aren't fully usable, in particle the `Trim` overloads.  That's because unlike the other methods like `StartsWith`, `IndexOf`, etc., `Trim` returns a `ReadOnlySpan<char>`, which means you can't use it to trim a `ReadOnlyMemory<char>` back into a potentially shorter `ReadOnlyMemory<char>`.\r\n\r\nProposal:\r\nAdd `ReadOnlyMemory<char>`-based counterparts for the existing `ReadOnlySpan<char>`-based `Trim` methods:\r\n```C#\r\nnamespace System\r\n{\r\n    public static class MemoryExtensions\r\n    {\r\n        public static ReadOnlyMemory<char> Trim(this ReadOnlyMemory<char> text);\r\n        public static ReadOnlyMemory<char> Trim(this ReadOnlyMemory<char> text, char trimChar);\r\n        public static ReadOnlyMemory<char> Trim(this ReadOnlyMemory<char> text, ReadOnlySpan<char> trimChars);\r\n\r\n        public static ReadOnlyMemory<char> TrimStart(this ReadOnlyMemory<char> text);\r\n        public static ReadOnlyMemory<char> TrimStart(this ReadOnlyMemory<char> text, char trimChar);\r\n        public static ReadOnlyMemory<char> TrimStart(this ReadOnlyMemory<char> text, ReadOnlySpan<char> trimChars);\r\n\r\n        public static ReadOnlyMemory<char> TrimEnd(this ReadOnlyMemory<char> text);\r\n        public static ReadOnlyMemory<char> TrimEnd(this ReadOnlyMemory<char> text, char trimChar);\r\n        public static ReadOnlyMemory<char> TrimEnd(this ReadOnlyMemory<char> text, ReadOnlySpan<char> trimChars);\r\n    }\r\n}\r\n```\r\n\r\nA couple of notes:\r\n- The span-based overloads call the first argument `span`.  I've named it here `text`, but we could choose a different name.\r\n- Technically we could also benefit from variants of these for both `Span<char>` and `Memory<char>`, since we lack full-fidelity versions for those just as we do today for `ReadOnlyMemory<char>`.  However, there's significantly less need for those methods, as the primary use case here is for processing slices of strings, with which you'd have either a `ReadOnlyMemory<char>` or a `ReadOnlySpan<char>`.\r\n\r\ncc: @ahsonkhan, @GrabYourPitchforks "},{"Id":"7861798473","Type":"IssuesEvent","CreatedAt":"2018-06-22T02:54:01","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/30584","RelatedDescription":"Closed issue \"BrotliStream crashes trying to decompress ~2000000 int32 array\" (#30584) at dotnet/corefx","RelatedBody":"@fontmaniac commented on [Wed Jun 20 2018](https://github.com/dotnet/core/issues/1718)\n\n# Issue Title\r\n\r\nBrotliStream in Decompress Mode crashes when trying to decompress large-ish array. We originally encountered the problem when working with binary data (~40Mb when compressed), here is a minimal example with just 2000000 int32 array of random values. \r\nExceptions thrown in this example vary between \"Unable to read beyond the end of the stream.\" and \"Decoder ran into invalid data.\", depending on the CompressionLevel used. In real code (F#-based) we've also seen some other failure modes, including OutOfMemory exception (see stack trace at the bottom) and silently dying without logging an exception.\r\n\r\n# General\r\n\r\nNET Core 2.1, Windows 10, console application.\r\n\r\n## Project file\r\n\r\n    <Project Sdk=\"Microsoft.NET.Sdk\">\r\n      <PropertyGroup>\r\n        <OutputType>Exe</OutputType>\r\n        <TargetFramework>netcoreapp2.1</TargetFramework>\r\n      </PropertyGroup>\r\n    </Project>\r\n\r\n## Code example:\r\n    class Program\r\n    {\r\n        static Int32[] ReadFile(string fileName, Func<FileStream, Stream> createStream)\r\n        {\r\n            using (var file = new FileStream(fileName, FileMode.Open, FileAccess.Read))\r\n            using (var zip = createStream(file))\r\n            using (var br = new BinaryReader(zip))\r\n            {\r\n                var count = br.ReadInt32();\r\n                var result = (int[])Array.CreateInstance(typeof(Int32), count);\r\n                for (var i = 0; i < count; ++i)\r\n                    result[i] = br.ReadInt32();\r\n\r\n                return result;\r\n            }\r\n        }\r\n\r\n        static void WriteFile(string fileName, Func<FileStream, Stream> createStream, int[] data)\r\n        {\r\n            using (var file = new FileStream(fileName, FileMode.Create))\r\n            using (var zip = createStream(file))\r\n            using (var br = new BinaryWriter(zip))\r\n            {\r\n                br.Write(data.Length);\r\n                for (var i = 0; i < data.Length; ++i)\r\n                    br.Write(data[i]);\r\n\r\n            }\r\n        }\r\n\r\n        static int[] GetData(int length)\r\n        {\r\n            var rnd = new Random(42);\r\n            var result = (int[])Array.CreateInstance(typeof(Int32), length);\r\n            for (var i = 0; i < length; ++i)\r\n                result[i] = rnd.Next();\r\n\r\n            return result;\r\n\r\n        }\r\n\r\n        static Stream DecompressGZip(FileStream file)   { return new GZipStream(file, CompressionMode.Decompress); }\r\n        static Stream DecompressBrotli(FileStream file) { return new BrotliStream(file, CompressionMode.Decompress); }\r\n        static Stream CompressGZip(FileStream file)     { return new GZipStream(file, CompressionLevel.Optimal); }\r\n        static Stream CompressBrotli(FileStream file)   { return new BrotliStream(file, CompressionLevel.Fastest); }\r\n        static Stream CompressNone(FileStream file)     { return file; }\r\n\r\n        static bool CompareArrays(int[] a, int[] b)\r\n        {\r\n            if (a.Length != b.Length) return false;\r\n            for (var i = 0; i < a.Length; ++i)\r\n                if (a[i] != b[i]) return false;\r\n            return true;\r\n        }\r\n\r\n        static void Main(string[] args)\r\n        {\r\n            var rootLoc = @\".\\\";\r\n            var uncompressedRaw     = Path.Combine(rootLoc, \"uncompressedRaw.bin\");\r\n            var compressedGZip      = Path.Combine(rootLoc, \"compressedGZip.bin\");\r\n            var unCompressedGZip    = Path.Combine(rootLoc, \"unCompressedGZip.bin\");\r\n            var compressedBrotli    = Path.Combine(rootLoc, \"compressedBrotli.bin\");\r\n            var unCompressedBrotli  = Path.Combine(rootLoc, \"unCompressedBrotli.bin\");\r\n\r\n            for (var i = 1; i <= 7; ++i)\r\n            {\r\n                var length = 2 * (int)Math.Pow(10, i);\r\n                var data = GetData(length);\r\n                WriteFile(uncompressedRaw,  CompressNone,   data);\r\n                WriteFile(compressedGZip,   CompressGZip,   data);\r\n                WriteFile(compressedBrotli, CompressBrotli, data);\r\n\r\n                var dataGz = ReadFile(compressedGZip, DecompressGZip);\r\n                if (CompareArrays(data, dataGz))\r\n                    Console.WriteLine(\"{0} elements: GZip compression is correct\", length);\r\n                else\r\n                    Console.WriteLine(\"{0} elements: GZip compression FAILURE\", length);\r\n\r\n                var dataBr = ReadFile(compressedBrotli, DecompressBrotli);\r\n                if (CompareArrays(data, dataBr))\r\n                    Console.WriteLine(\"{0} elements: Brotli compression is correct\", length);\r\n                else\r\n                    Console.WriteLine(\"{0} elements: Brotli compression FAILURE\", length);\r\n            }\r\n        }\r\n    }\r\n\r\n## Infinite Recursion\r\nFailFast:\r\nInfinite recursion during resource lookup within System.Private.CoreLib.  This may be a bug in System.Private.CoreLib, or potentially in certain extensibility points such as assembly resolve events or CultureInfo names.  Resource name: Arg_AccessViolationException\r\n\r\n   at System.Environment.FailFast(System.String)\r\n   at System.SR.InternalGetResourceString(System.String)\r\n   at System.SR.GetResourceString(System.String, System.String)\r\n   at System.AccessViolationException..ctor()\r\n   at System.Reflection.AssemblyName.nInit(System.Reflection.RuntimeAssembly ByRef, Boolean)\r\n   at System.Reflection.AssemblyName..ctor(System.String)\r\n   at System.Resources.ManifestBasedResourceGroveler.CanUseDefaultResourceClasses(System.String, System.String)\r\n   at System.Resources.ManifestBasedResourceGroveler.CreateResourceSet(System.IO.Stream, System.Reflection.Assembly)\r\n   at System.Resources.ManifestBasedResourceGroveler.GrovelForResourceSet(System.Globalization.CultureInfo, System.Collections.Generic.Dictionary`2<System.String,System.Resources.ResourceSet>, Boolean, Boolean, System.Threading.StackCrawlMark ByRef)\r\n   at System.Resources.ResourceManager.InternalGetResourceSet(System.Globalization.CultureInfo, Boolean, Boolean, System.Threading.StackCrawlMark ByRef)\r\n   at System.Resources.ResourceManager.InternalGetResourceSet(System.Globalization.CultureInfo, Boolean, Boolean)\r\n   at System.Resources.ResourceManager.GetString(System.String, System.Globalization.CultureInfo)\r\n   at System.SR.InternalGetResourceString(System.String)\r\n   at System.SR.GetResourceString(System.String, System.String)\r\n   at System.AccessViolationException..ctor()\r\n   at System.SR..cctor()\r\n   at System.SR.get_ResourceManager()\r\n   at System.SR.GetResourceString(System.String, System.String)\r\n   at System.IO.Compression.BrotliStream.Read(System.Span`1<Byte>)\r\n   at System.IO.Compression.BrotliStream.Read(Byte[], Int32, Int32)\r\n   at System.IO.BinaryReader.FillBuffer(Int32)\r\n   at System.IO.BinaryReader.ReadInt32()\r\n   at Program.readFile[[System.__Canon, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]](Microsoft.FSharp.Core.FSharpFunc`2<System.IO.FileStream,System.__Canon>, System.String)\r\n   at Program.main(System.String[])\n\n"},{"Id":"7861770230","Type":"IssuesEvent","CreatedAt":"2018-06-22T02:43:01","Actor":"maryamariyan","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/30580","RelatedDescription":"Closed issue \"Cannot run System.Configuration.ConfigurationManager.Tests\" (#30580) at dotnet/corefx","RelatedBody":"I am unable to run the tests in the `System.Configuration.ConfigurationManager` solution. I asked for help on [gitter](https://gitter.im/dotnet/corefx-contrib-docs#utm_source=notification&utm_medium=email&utm_campaign=unread-notifications) and @karelz suggested I open an issue on here.\r\n\r\nWhen I run the tests in the `System.Configuration.ConfigurationManager` solution I get the following output:\r\n\r\n```\r\n[20/06/2018 07:45:30 Informational] ------ Run test started ------\r\n[20/06/2018 07:45:32 Warning] No test is available in C:\\Projects\\OSS\\Microsoft\\corefx\\bin\\AnyOS.AnyCPU.Debug\\System.Configuration.ConfigurationManager.Tests\\netstandard\\System.Configuration.ConfigurationManager.Tests.dll. Make sure that test discoverer & executors are registered and platform & framework version settings are appropriate and try again.\r\n[20/06/2018 07:45:32 Informational] ========== Run test finished: 0 run (0:00:02.5915839) ==========\r\n```\r\n\r\nI'm running Windows 10 and have:\r\n\r\n- run `build.cmd` and `build-tests.cmd`\r\n- set System.Configuration.ConfigurationManger.Tests project as startup project\r\n\r\nCan anyone help? Let me know if you need any more information..."},{"Id":"7861769687","Type":"PullRequestEvent","CreatedAt":"2018-06-22T02:42:48","Actor":"dotnet-bot","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/30591","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#30591) at dotnet/corefx","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"7861528686","Type":"PullRequestEvent","CreatedAt":"2018-06-22T01:05:55","Actor":"jasonmalinowski","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/27919","RelatedDescription":"Merged pull request \"Don't push an empty batch of projects\" (#27919) at dotnet/roslyn","RelatedBody":"Our batch load optimization in the project system interaction means we try to avoid pushing anything but a full project, and ideally the entire solution in one go. We were getting OnAfterLoadProjectBatch called before we were being told about projects, which meant we'd push an empty solution. Once we were told about projects we would then add each project as a batch, but we'd still do O(n) WorkspaceChanged events when one would have worked.\r\n\r\nI'm intentionally not putting this check in StartPushingToWorkspaceAndNotifyOfOpenDocuments because some calls (namely the call in VisualStudioProjectTracker.FinishLoad) still need to ensure the base solution state is pushed to the workspace even if the solution is empty.\r\n\r\n<details><summary>Ask Mode template</summary>\r\n\r\n### Customer scenario\r\n\r\nCustomer opens a solution that was previously opened before. We end up kicking off some repeated solution notifications when we don't need to.\r\n\r\n### Bugs this fixes\r\n\r\nNone filed, observed while fixing other issues.\r\n\r\n### Workarounds, if any\r\n\r\nNone.\r\n\r\n### Risk\r\n\r\nExtremely low; trivial change.\r\n\r\n### Performance impact\r\n\r\nShould improve.\r\n\r\n### Is this a regression from a previous update?\r\n\r\nPossibly? Enough has changed around project loads and how we do batching events in VS that this might have worked before. I don't have the necessary installs setup to test older VS versions to track down what might have changed it; the fix is the same either way.\r\n\r\n### Root cause analysis\r\n\r\nWe get an event from the solution load manager saying a batch of projects was loaded, but no actual projects (at least of ours) were told. This caused us to stop taking the most efficient path for later projects.\r\n\r\n### How was the bug found?\r\n\r\nDebugging to verify another perf proposal.\r\n\r\n</details>\r\n"},{"Id":"7861477815","Type":"PullRequestEvent","CreatedAt":"2018-06-22T00:44:50","Actor":"chuckries","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/28072","RelatedDescription":"Opened pull request \"Resolve function to native offset uint.MaxValue\" (#28072) at dotnet/roslyn","RelatedBody":"Previously the FunctionResolver used 0 for the native offset of all\r\ninstruction address of resolved function names. The debugger inteprets\r\nthis literally, which causes function BP's to be bound on the first\r\nnative instruciton of a JIT'd method. This is incorrect as the bp should\r\nbe bound to the native instruction that represents IL offset zero. The\r\nfunction resolver should use uint.MaxValue for native offset to\r\ncommunicate that the instruction address always represents IL offset 0,\r\neven for a JIT'd method.\r\n\r\nFixes #28071 \r\n"},{"Id":"7861473885","Type":"IssuesEvent","CreatedAt":"2018-06-22T00:43:11","Actor":"chuckries","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/28071","RelatedDescription":"Opened issue \"Function Resolver always uses native offset 0.\" (#28071) at dotnet/roslyn","RelatedBody":"The function resolver should use uint.MaxValue for the native offset of the instruction address of a resolved function name. By using 0, the debugger will bind the bp to the first native instruction of a JIT'd method, which is not where we want to stop. By using uint.MaxValue, the debugger will always find the native offset that matches the IL offset provided, which allows the correct behavior for both JIT'd and non JIT'd methods. \r\n\r\nThis is related to VSTS issue: https://devdiv.visualstudio.com/DevDiv/_queries/edit/549141/?triage=true "},{"Id":"7861467977","Type":"PullRequestEvent","CreatedAt":"2018-06-22T00:40:32","Actor":"ivanbasov","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/28070","RelatedDescription":"Opened pull request \"removing NWF at GetActiveStatements\" (#28070) at dotnet/roslyn","RelatedBody":"Targeting Dev16 because it should not have a customer impact.\r\n\r\n### Customer scenario\r\n\r\nOn edit-and-continue scenario, an error happen on the debugger side. The debugger handles the error and returns a error code. Roslyn throws a NFW in case of error and sometimes even with errorCode == 0.\r\nIt is totally unnecessary to do so because the error was handled above and the NFW does not help at all.\r\n\r\nDepending on the error code we should either skip the statement or cancel the EnC session.\r\n\r\n### Bugs this fixes\r\nVSO 619868\r\n\r\n### Workarounds, if any\r\nNone\r\n\r\n### Risk\r\nLow\r\n\r\n### Performance impact\r\nNone\r\n\r\n### Is this a regression from a previous update?\r\nNo\r\n\r\n### How was the bug found?\r\nWatson analysis\r\n\r\nTagging @r-ramesh for review"},{"Id":"7861465211","Type":"PullRequestEvent","CreatedAt":"2018-06-22T00:39:19","Actor":"jmarolf","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/28057","RelatedDescription":null,"RelatedBody":"\nThis is an automatically generated pull request from master into master-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-master-vs-deps\ngit reset --hard upstream/master-vs-deps\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push merges/master-to-master-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"7861383909","Type":"IssuesEvent","CreatedAt":"2018-06-22T00:05:09","Actor":"mavasani","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/20338","RelatedDescription":"Closed issue \"BoundAnonymousObjectCreationExpression has no way to map arguments and declarations for error cases\" (#20338) at dotnet/roslyn","RelatedBody":"Arguments and Declarations of an anonymous object creation are stored as separate arrays of bound declarations and expressions in BoundAnonymousObjectCreationExpression. There is a 1-1 mapping between them for valid cases. However, for invalid cases such as below, there is no way to map the declaration to corresponding argument, leading to invalid IOperation tree where argument in the 3rd initializer is stored as the second value in Declarations array. We should create a map from declaration to declaration index so we can get the correct mapping when creating an IOperation tree.\r\n\r\n**Source code:**\r\n```\r\nclass ClassA\r\n{\r\n    public static void Test1(int x)\r\n    {\r\n        object v1 = new\r\n        {\r\n            aa = 1,\r\n            aaa,\r\n            bb = 1.2\r\n        };\r\n    }\r\n\r\n    public static string aa = \"-field-aa-\";\r\n}\r\n```\r\n\r\n**IOperation tree:**\r\n```\r\nIOperation tree for \"new\r\n        {\r\n            aa = 1,\r\n            aaa,\r\n            bb = 1.2\r\n        }\"\r\n\r\nIAnonymousObjectCreationExpression (OperationKind.AnonymousObjectCreationExpression, Type: <anonymous type: System.Int32 aa, ? aaa, System.Double bb>, IsInvalid) (Syntax: 'new ... }')\r\n  Initializers(3): IAssignmentExpression (OperationKind.AssignmentExpression, Type: System.Int32, Constant: 1) (Syntax: 'aa = 1')\r\n      Left: IPropertyReferenceExpression: System.Int32 <anonymous type: System.Int32 aa, ? aaa, System.Double bb>.aa { get; } (Static) (OperationKind.PropertyReferenceExpression, Type: System.Int32) (Syntax: 'aa')\r\n      Right: ILiteralExpression (Text: 1) (OperationKind.LiteralExpression, Type: System.Int32, Constant: 1) (Syntax: '1')\r\n    IAssignmentExpression (OperationKind.AssignmentExpression, Type: System.Double, IsInvalid) (Syntax: 'aaa')\r\n      Left: IPropertyReferenceExpression: System.Double <anonymous type: System.Int32 aa, ? aaa, System.Double bb>.bb { get; } (Static) (OperationKind.PropertyReferenceExpression, Type: System.Double) (Syntax: 'bb')\r\n      Right: IInvalidExpression (OperationKind.InvalidExpression, Type: ?, IsInvalid) (Syntax: 'aaa')\r\n    ILiteralExpression (Text: 1.2) (OperationKind.LiteralExpression, Type: System.Double, Constant: 1.2) (Syntax: '1.2')\r\n```\r\n\r\n**Bound node:**\r\n```\r\ninternal sealed partial class BoundAnonymousObjectCreationExpression : BoundExpression\r\n    {\r\n        public BoundAnonymousObjectCreationExpression(SyntaxNode syntax, MethodSymbol constructor, ImmutableArray<BoundExpression> arguments, ImmutableArray<BoundAnonymousPropertyDeclaration> declarations, TypeSymbol type, bool hasErrors = false)\r\n            : base(BoundKind.AnonymousObjectCreationExpression, syntax, type, hasErrors || arguments.HasErrors() || declarations.HasErrors())\r\n        {\r\n\r\n            Debug.Assert(constructor != null, \"Field 'constructor' cannot be null (use Null=\\\"allow\\\" in BoundNodes.xml to remove this check)\");\r\n            Debug.Assert(!arguments.IsDefault, \"Field 'arguments' cannot be null (use Null=\\\"allow\\\" in BoundNodes.xml to remove this check)\");\r\n            Debug.Assert(!declarations.IsDefault, \"Field 'declarations' cannot be null (use Null=\\\"allow\\\" in BoundNodes.xml to remove this check)\");\r\n            Debug.Assert(type != null, \"Field 'type' cannot be null (use Null=\\\"allow\\\" in BoundNodes.xml to remove this check)\");\r\n\r\n            this.Constructor = constructor;\r\n            this.Arguments = arguments;\r\n            this.Declarations = declarations;\r\n        }\r\n\r\n\r\n        public MethodSymbol Constructor { get; }\r\n\r\n        public ImmutableArray<BoundExpression> Arguments { get; }\r\n\r\n        public ImmutableArray<BoundAnonymousPropertyDeclaration> Declarations { get; }\r\n\r\n        public override BoundNode Accept(BoundTreeVisitor visitor)\r\n        {\r\n            return visitor.VisitAnonymousObjectCreationExpression(this);\r\n        }\r\n\r\n        public BoundAnonymousObjectCreationExpression Update(MethodSymbol constructor, ImmutableArray<BoundExpression> arguments, ImmutableArray<BoundAnonymousPropertyDeclaration> declarations, TypeSymbol type)\r\n        {\r\n            if (constructor != this.Constructor || arguments != this.Arguments || declarations != this.Declarations || type != this.Type)\r\n            {\r\n                var result = new BoundAnonymousObjectCreationExpression(this.Syntax, constructor, arguments, declarations, type, this.HasErrors);\r\n                result.WasCompilerGenerated = this.WasCompilerGenerated;\r\n                return result;\r\n            }\r\n            return this;\r\n        }\r\n    }\r\n```\r\n"},{"Id":"7861383561","Type":"IssuesEvent","CreatedAt":"2018-06-22T00:05:00","Actor":"mavasani","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/22736","RelatedDescription":"Closed issue \"IPropertyReferenceExpressions in IAnonymousObjectCreationExpression are missing a receiver\" (#22736) at dotnet/roslyn","RelatedBody":"```\r\n        <Fact>\r\n        Public Sub AnonymousTypeFieldsReferences()\r\n            Dim source = <![CDATA[\r\nModule ModuleA\r\n    Sub Test1()\r\n        Dim v1 As Object = New With {.a = 1, .b = .a, .c = .b + .a}'BIND:\"New With {.a = 1, .b = .a, .c = .b + .a}\"\r\n    End Sub\r\nEnd Module]]>.Value\r\n\r\n            Dim expectedOperationTree = <![CDATA[\r\nIAnonymousObjectCreationExpression (OperationKind.AnonymousObjectCreationExpression, Type: <anonymous type: a As System.Int32, b As System.Int32, c As System.Int32>) (Syntax: 'New With {. ...  = .b + .a}')\r\n  Initializers(3):\r\n      ISimpleAssignmentExpression (OperationKind.SimpleAssignmentExpression, Type: System.Int32, Constant: 1) (Syntax: '.a = 1')\r\n        Left: \r\n          IPropertyReferenceExpression: Property <anonymous type: a As System.Int32, b As System.Int32, c As System.Int32>.a As System.Int32 (OperationKind.PropertyReferenceExpression, Type: System.Int32) (Syntax: 'a')\r\n            Instance Receiver: \r\n              null\r\n        Right: \r\n          ILiteralExpression (OperationKind.LiteralExpression, Type: System.Int32, Constant: 1) (Syntax: '1')\r\n      ISimpleAssignmentExpression (OperationKind.SimpleAssignmentExpression, Type: System.Int32) (Syntax: '.b = .a')\r\n        Left: \r\n          IPropertyReferenceExpression: Property <anonymous type: a As System.Int32, b As System.Int32, c As System.Int32>.b As System.Int32 (OperationKind.PropertyReferenceExpression, Type: System.Int32) (Syntax: 'b')\r\n            Instance Receiver: \r\n              null\r\n        Right: \r\n          IPropertyReferenceExpression: Property <anonymous type: a As System.Int32, b As System.Int32, c As System.Int32>.a As System.Int32 (OperationKind.PropertyReferenceExpression, Type: System.Int32) (Syntax: '.a')\r\n            Instance Receiver: \r\n              null\r\n      ISimpleAssignmentExpression (OperationKind.SimpleAssignmentExpression, Type: System.Int32) (Syntax: '.c = .b + .a')\r\n        Left: \r\n          IPropertyReferenceExpression: Property <anonymous type: a As System.Int32, b As System.Int32, c As System.Int32>.c As System.Int32 (OperationKind.PropertyReferenceExpression, Type: System.Int32) (Syntax: 'c')\r\n            Instance Receiver: \r\n              null\r\n        Right: \r\n          IBinaryOperatorExpression (BinaryOperatorKind.Add, Checked) (OperationKind.BinaryOperatorExpression, Type: System.Int32) (Syntax: '.b + .a')\r\n            Left: \r\n              IPropertyReferenceExpression: Property <anonymous type: a As System.Int32, b As System.Int32, c As System.Int32>.b As System.Int32 (OperationKind.PropertyReferenceExpression, Type: System.Int32) (Syntax: '.b')\r\n                Instance Receiver: \r\n                  null\r\n            Right: \r\n              IPropertyReferenceExpression: Property <anonymous type: a As System.Int32, b As System.Int32, c As System.Int32>.a As System.Int32 (OperationKind.PropertyReferenceExpression, Type: System.Int32) (Syntax: '.a')\r\n                Instance Receiver: \r\n                  null\r\n]]>.Value\r\n\r\n            Dim expectedDiagnostics = String.Empty\r\n\r\n            VerifyOperationTreeAndDiagnosticsForTest(Of AnonymousObjectCreationExpressionSyntax)(source, expectedOperationTree, expectedDiagnostics)\r\n        End Sub\r\n```\r\n\r\nWe probably should have a special node representing an anonymous type instance as the receiver. Perhaps it should share syntax with IAnonymousObjectCreationExpression."},{"Id":"7861383076","Type":"IssuesEvent","CreatedAt":"2018-06-22T00:04:49","Actor":"mavasani","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/23115","RelatedDescription":"Closed issue \"Incorrect order of initializer operation nodes in anonymous object creation in query clause\" (#23115) at dotnet/roslyn","RelatedBody":"See https://github.com/dotnet/roslyn/pull/23080/files#r150128874\r\n\r\nSource:\r\n```\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n \r\n class ClassA\r\n {\r\n     void m()\r\n     {\r\n         var o = from x in new List<int>() { 1, 2, 3 } select /*<bind>*/new { x, y = x }/*</bind>*/;\r\n     }\r\n }\r\n```\r\n\r\nOperation Tree:\r\n```\r\nIAnonymousObjectCreationOperation (OperationKind.AnonymousObjectCreation, Type: <anonymous type: System.Int32 x, System.Int32 y>) (Syntax: 'new { x, y = x }')\r\n  Initializers(2):\r\n      ISimpleAssignmentOperation (OperationKind.SimpleAssignment, Type: System.Int32) (Syntax: 'x')\r\n        Left: \r\n          IPropertyReferenceOperation: System.Int32 <anonymous type: System.Int32 x, System.Int32 y>.y { get; } (OperationKind.PropertyReference, Type: System.Int32) (Syntax: 'y')\r\n            Instance Receiver: \r\n              null\r\n        Right: \r\n          IParameterReferenceOperation: x (OperationKind.ParameterReference, Type: System.Int32) (Syntax: 'x')\r\n      IParameterReferenceOperation: x (OperationKind.ParameterReference, Type: System.Int32) (Syntax: 'x')\r\n```"}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"7862156694","Type":"PullRequestEvent","CreatedAt":"2018-06-22T05:27:29","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/pull/5986","RelatedDescription":"Closed pull request \"[JustForView]Moved Semaphore.cs and Semaphore.Windows.cs to shared\" (#5986) at dotnet/corert","RelatedBody":"RelatedCoreclrPr ;- https://github.com/dotnet/coreclr/pull/18597"},{"Id":"7862155824","Type":"PullRequestEvent","CreatedAt":"2018-06-22T05:27:08","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5989","RelatedDescription":"Merged pull request \"Merge master into r2r branch\" (#5989) at dotnet/corert","RelatedBody":""},{"Id":"7861614676","Type":"PullRequestEvent","CreatedAt":"2018-06-22T01:41:41","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5990","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#5990) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7861429628","Type":"PullRequestEvent","CreatedAt":"2018-06-22T00:24:04","Actor":"nattress","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5989","RelatedDescription":"Opened pull request \"Merge master into r2r branch\" (#5989) at dotnet/corert","RelatedBody":""},{"Id":"7861415223","Type":"PullRequestEvent","CreatedAt":"2018-06-22T00:18:03","Actor":"nattress","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5988","RelatedDescription":"Opened pull request \"Emit Ready-to-run header\" (#5988) at dotnet/corert","RelatedBody":"Write out the ready-to-run (managed native) header, which outputs directory entries for each of the various tables. Currently we write out the CompilerIdentifierNode, a simple example showing how we'll write out the other tables.\r\n\r\nThe header is very similar to the existing CoreRT ready-to-run header with a few differences. For example, the section count is Int16 on CoreRT but Int32 on CoreCLR. The section pointers are also encoded differently (pointer relocs on CoreRT, baseless RVAs on CoreCLR). Also, each section reference can have flags on CoreRT.\r\n\r\nThe image produced by ILCompiler currently is not loadable by CoreCLR, which needs further investigation."},{"Id":"7861259298","Type":"PullRequestEvent","CreatedAt":"2018-06-21T23:18:15","Actor":"yowl","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5987","RelatedDescription":"Opened pull request \"Add intrinsic implementation for ByReference<T> ctor and fix the Value getter\" (#5987) at dotnet/corert","RelatedBody":"Fixes #5819  by adding an implementation for the ctor of `ByReference<T>` and alters the Value getter so that the value is loaded off the stack immediately after pushing the address.  Previously the load operation was pushed to the evalualtion stack and could happen after another operation had modified the local where the address was stored.  This change fixes `double.ToString`  and also the implicit ToString when performing string operations such as `\"a\" + i` where `i` is an int.  This appears to be fine, but I admit that I don't know the effect of not using the evaluation stack anymore and I would think there's another option here where all the emitting of code is done through the evaluation stack rather than all immediately."},{"Id":"7861111699","Type":"PullRequestEvent","CreatedAt":"2018-06-21T22:33:09","Actor":"Anipik","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5986","RelatedDescription":"Opened pull request \"[JustForView]Moved Semaphore.cs and Semaphore.Windows.cs to shared\" (#5986) at dotnet/corert","RelatedBody":"RelatedCoreclrPr ;- "},{"Id":"7860803580","Type":"IssuesEvent","CreatedAt":"2018-06-21T21:15:26","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/issues/5961","RelatedDescription":"Closed issue \"[win-x64] Support for 'Process.GetCurrentProcess().Handle'\" (#5961) at dotnet/corert","RelatedBody":"Both\r\n\r\n`System.Diagnostics.Process.GetCurrentProcess().Handle`\r\nand\r\n\r\n`System.Diagnostics.Process.GetCurrentProcess().SafeHandle.DangerousGetHandle();` \r\n\r\nthrow\r\n\r\n```\r\nSystem.TypeInitializationException: A type initializer threw an exception. To determine which type, inspect the InnerException's StackTrace property. ---> System.Exception: Method '[System.Diagnostics.Process]Interop+Advapi32.AdjustTokenPrivileges(SafeTokenHandle,bool,TokenPrivileges,int32,native int,native int)' requires non-trivial marshalling that is not yet supported by this compiler.\r\n   at Interop.Advapi32.AdjustTokenPrivileges(SafeTokenHandle, Boolean, Interop.Advapi32.TokenPrivileges, Int32, IntPtr, IntPtr) + 0x23\r\n   at ht.win32!<BaseAddress>+0x45cfd\r\n   at ht.win32!<BaseAddress>+0x128b54\r\n\r\n   --- End of inner exception stack trace ---\r\n   at ht.win32!<BaseAddress>+0x128c08\r\n   at ht.win32!<BaseAddress>+0x128a4c\r\n   at System.Diagnostics.ProcessManager.OpenProcess(Int32, Int32, Boolean) + 0x28\r\n   at System.Diagnostics.Process.GetProcessHandle(Int32, Boolean) + 0x18c\r\n   at System.Diagnostics.Process.OpenProcessHandle() + 0x2a\r\n```\r\n\r\nIs there any alternative for getting a handle to the running process?"},{"Id":"7860798663","Type":"PullRequestEvent","CreatedAt":"2018-06-21T21:14:24","Actor":"nattress","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5985","RelatedDescription":"Opened pull request \"[WIP] Create ILCompiler.RyuJit\" (#5985) at dotnet/corert","RelatedBody":"Move main classes (RyuJitCompilation, RyuJitCompilationBuilder, RyuJitNodeFactory)\r\nMove classes that depend on types from JitInterface (ie,\r\nINodeWithDebugInfo uses JIT data structures for debug info).\r\nAttempt to split ObjectDumper so that a code generator can override and\r\nprovide its specific implementation.\r\nFactor out JIT specific pieces of ReadyToRunHelperNode - I didn't want\r\nto move the full ReadyToRunHelperNode over since it's useful generally -\r\nthe INodeWithDebugInfo portion was split out into ILCompiler.RyuJit.\r\n\r\nI have verified we build and pass simple tests. I have no verified this\r\nworks in the TFS tree yet."},{"Id":"7860790552","Type":"PullRequestEvent","CreatedAt":"2018-06-21T21:12:38","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5984","RelatedDescription":"Merged pull request \"Update dependencies\" (#5984) at dotnet/corert","RelatedBody":""},{"Id":"7860588167","Type":"PullRequestEvent","CreatedAt":"2018-06-21T20:30:04","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5984","RelatedDescription":"Opened pull request \"Update dependencies\" (#5984) at dotnet/corert","RelatedBody":""},{"Id":"7860494047","Type":"PullRequestEvent","CreatedAt":"2018-06-21T20:10:36","Actor":"trylek","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5954","RelatedDescription":"Merged pull request \"Initial implementation of R2R section layout builder\" (#5954) at dotnet/corert","RelatedBody":"This change introduces a new class SectionBuilder which is supposed\r\nto accumulate compilation products to be put to the final PE file.\r\nIn accordance with my recent write-up it's based on the concept\r\nof 'blocks' that are used to build up the PE executable sections.\r\n\r\nA user of SectionBuilder starts out by planning out the sections;\r\nto simplify things the section builder internally treats the sections\r\nas zero-based integers in the order they were added to the section builder.\r\nTheir indices don't necessarily need to correspond to PE section indices\r\nas the section indices might get shifted due to sections being merged\r\nwith the input MSIL PE file.\r\n\r\nOnce the user of the SectionBuilder class constructs the sections,\r\nthey can start adding blocks. Each block is an atomic piece of the\r\nfuture output PE with alignment constraints and possibly relocations.\r\nTo simplify future tuning of this prototype I have created an abstract\r\nBlockHandle struct to minimize churn when changing the underlying key type.\r\n\r\nBased on my recent discussion with Vitek, I based this change on a\r\ntwo-level hierarchy of \"sections\" and \"subsections\". Sections correspond\r\nto PE sections and are externally visible in the PE file; subsections\r\nare internal building blocks within the PE sections usable for stratifying\r\nsection content e.g. w.r.t. hot vs. cold code.\r\n\r\nSectionBuilder is also capable of defining and producing export symbols.\r\nAs we don't yet have the complete R2R table machinery working, I hoped\r\nto be able to demonstrate the builder by exporting a native symbol I would\r\nmanually generate as a bit of code like \"mov eax, offset of a string, ret\"\r\nwhere the string would be a helloworld-like thing I would display in a\r\nnative caller of the DLL.\r\n\r\nI have all of the machinery working but for some reason the Windows loader\r\nrefuses to apply the file-level relocations. I have verified that the same\r\nthing happens (the one file-level relocation doesn't get applied) when\r\nI LoadLibrary the primary MSIL PE file from the native host. I guess that\r\nperhaps some header flags are used to say whether the relocations should\r\nbe applied or not.\r\n\r\nI'm actually not clear on how the managed DLL's can work at\r\nall as they seem to get loaded at arbitrary addresses so I guess they\r\nneed relocating all the time. For now I'm putting this off as a likely\r\nconsequence of my misunderstanding of some of the underlying concepts\r\nas I believe the output PE file content is set up all right\r\naccording to dumpbin.\r\n\r\nI have also created a new source file \"Relocator.cs\" I mostly cloned\r\nfrom a bit of code I found in the CoreRT dependency analyzer; I suspect\r\nit was most likely incomplete but it let me implement an initial\r\nset of the most common relocators.\r\n\r\nThere's an apparent code duplication with the dependency analyzer currently,\r\nit might be nice to find a suitable location for some \"relocation utils\"\r\nafter agreeing on a final version of the code.\r\n\r\nIn the R2RPEBuilder, I addressed Michal's PR feedback from\r\nSimon's initial change - I came to the conclusion that in this particular\r\ncase it might be cleaner to add a completely new helper struct. I converted\r\nthe remaining Tuples to named tuples per Michal's suggestion and I updated\r\nthe project file accordingly.\r\n\r\nI have also had to introduce a new parameter to the R2RPEBuilder constructor\r\n- directoryUpdater used to potentially adjust the PE file directories.\r\nThis is used in the SectionBuilder to inject the export directory table\r\nand to adjust the relocation table (with a grain of salt - as I said above,\r\nthe file-level relocations still don't fully work).\r\n\r\nFor now I only have one small test case and it doesn't even pass due to\r\nthe missing relocation - in fact I can't even step through the code at the DLL\r\nlocation as the debugger ends up AV-ing; weirdly enough, the\r\nPE-level information like section headers seems to be perfectly in order.\r\nI still believe this might be a useful step towards an initial R2R demo.\r\n\r\nThanks\r\n\r\nTomas"}],"ResultType":"GitHubEvent"},"SDK":{"Events":[{"Id":"7862056568","Type":"PullRequestEvent","CreatedAt":"2018-06-22T04:44:45","Actor":"wli3","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/pull/2339","RelatedDescription":"Closed pull request \"WIP Packtool use nuget SuppressDependenciesOnPacking \" (#2339) at dotnet/sdk","RelatedBody":"fix https://github.com/dotnet/cli/issues/9109\r\n\r\nUse new nguet feature SuppressDependenciesOnPacking to avoid to set all as private asset"},{"Id":"7862055051","Type":"PullRequestEvent","CreatedAt":"2018-06-22T04:44:05","Actor":"wli3","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/2354","RelatedDescription":"Opened pull request \"Packtool use nuget SuppressDependenciesOnPacking\" (#2354) at dotnet/sdk","RelatedBody":"fix https://github.com/dotnet/cli/issues/9109\r\n\r\nUse new nguet feature SuppressDependenciesOnPacking to avoid to set all as private asset"},{"Id":"7862047334","Type":"PullRequestEvent","CreatedAt":"2018-06-22T04:40:37","Actor":"wli3","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/2352","RelatedDescription":"Merged pull request \"Update stage0 and change/disable tests according to it\" (#2352) at dotnet/sdk","RelatedBody":""},{"Id":"7861832275","Type":"IssuesEvent","CreatedAt":"2018-06-22T03:07:47","Actor":"davkean","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/sdk/issues/2347","RelatedDescription":"Reopened issue \"msbuild cannot build new style csproj when targetting net462\" (#2347) at dotnet/sdk","RelatedBody":"_From @SidShetye on June 19, 2018 23:48_\n\n### Steps to reproduce\r\n\r\nProblem demo'd at the repo at https://github.com/SidShetye/msbuild-newcsproj-issue\r\n\r\n### Expected  behavior\r\n\r\nbuild the project like VS2017 gui does on the same machine\r\n\r\n### Actual behavior\r\n\r\nbuild fails even though there are no nuget dependencies\r\n\r\n```\r\nBuild FAILED.\r\n\r\n    \"C:\\temp\\new-old-proj-mix-soln\\ClassLibraryFw462NewProj\\ClassLibraryFw462NewProj.csproj\" (build target) (1) ->\r\n    (ResolvePackageAssets target) ->\r\n        C:\\Program Files\\dotnet\\sdk\\2.1.300\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.PackageDependencyResolution.targets(198,5): error :\r\n    Assets file 'C:\\temp\\new-old-proj-mix-soln\\ClassLibraryFw462NewProj\\obj\\project.assets.json' not found. Run a NuGet package restore\r\n        to generate this file. [C:\\temp\\new-old-proj-mix-soln\\ClassLibraryFw462NewProj\\ClassLibraryFw462NewProj.csproj]\r\n\r\n    0 Warning(s)\r\n    1 Error(s)\r\n```\r\n\r\n### Environment data\r\n`msbuild /version` output:\r\n\r\n```\r\nMicrosoft (R) Build Engine version 15.7.179.6572 for .NET Framework\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n15.7.179.6572\r\n```\r\n\r\nOS info: Win 10 x64 v1803 (OS Build 17134.112)\r\nVS 2017 (15.7.4)\r\n\n\n_Copied from original issue: Microsoft/msbuild#3429_"},{"Id":"7861322282","Type":"PullRequestEvent","CreatedAt":"2018-06-21T23:41:03","Actor":"livarcocc","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/2353","RelatedDescription":"Merged pull request \"Updating SignTool to pass in the path to MSBuild\" (#2353) at dotnet/sdk","RelatedBody":""},{"Id":"7861194398","Type":"PullRequestEvent","CreatedAt":"2018-06-21T22:57:46","Actor":"tannergooding","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/2353","RelatedDescription":"Opened pull request \"Updating SignTool to pass in the path to MSBuild\" (#2353) at dotnet/sdk","RelatedBody":""},{"Id":"7861082118","Type":"PullRequestEvent","CreatedAt":"2018-06-21T22:24:28","Actor":"wli3","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/2352","RelatedDescription":"Opened pull request \"Update stage0 and change/disable tests according to it\" (#2352) at dotnet/sdk","RelatedBody":""},{"Id":"7860581684","Type":"PullRequestEvent","CreatedAt":"2018-06-21T20:28:45","Actor":"johnbeisner","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/pull/2351","RelatedDescription":"Closed pull request \"[WIP] Testing CI legs; SDK:master\" (#2351) at dotnet/sdk","RelatedBody":"Testing CI legs; SDK:master"},{"Id":"7860525725","Type":"PullRequestEvent","CreatedAt":"2018-06-21T20:17:19","Actor":"johnbeisner","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/2351","RelatedDescription":"Opened pull request \"[WIP] Testing CI legs; SDK:master\" (#2351) at dotnet/sdk","RelatedBody":"Testing CI legs; SDK:master"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1009783192751099904","CreatedAt":"2018-06-21T13:00:48+00:00","UserScreenname":"dotnet","Text":"These two are always great to learn from separately, and today they're working together.  You won't want to miss… https://t.co/DhpOULOjfn","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":11,"FavoriteCount":3,"RawContent":null},{"Id":"1009514602428710912","CreatedAt":"2018-06-20T19:13:31+00:00","UserScreenname":"dotnet","Text":".NET Core 2.0 will reach End of Life on September 1, 2018 https://t.co/5PoTWEAQgt","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":253,"FavoriteCount":287,"RawContent":null},{"Id":"1009477602791133186","CreatedAt":"2018-06-20T16:46:30+00:00","UserScreenname":"dotnet","Text":"Call for papers now open for #dotnetconf virtual event in September! Present to our worldwide community. No travel… https://t.co/KraqcAKxAo","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":257,"FavoriteCount":190,"RawContent":null},{"Id":"1009207915775811584","CreatedAt":"2018-06-19T22:54:51+00:00","UserScreenname":"dotnet","Text":"The RyuJIT transition is complete! https://t.co/JhkSV0Aybh","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":316,"FavoriteCount":169,"RawContent":null},{"Id":"1008787534451638272","CreatedAt":"2018-06-18T19:04:25+00:00","UserScreenname":"dotnet","Text":"Staying up-to-date with .NET Container Images https://t.co/09vnrG5uqh /cc @aspnet @Docker @DockerCon","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":218,"FavoriteCount":114,"RawContent":null},{"Id":"1008746685697150976","CreatedAt":"2018-06-18T16:22:06+00:00","UserScreenname":"dotnet","Text":"Building distributed applications with Orleans https://t.co/GgWRQHcdPP","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":65,"FavoriteCount":27,"RawContent":null},{"Id":"1007054749512814592","CreatedAt":"2018-06-14T00:18:57+00:00","UserScreenname":"dotnet","Text":"Using .NET and Docker Together – DockerCon 2018 Update https://t.co/ZYju7lEGqz","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":146,"FavoriteCount":77,"RawContent":null},{"Id":"1007012327353454594","CreatedAt":"2018-06-13T21:30:22+00:00","UserScreenname":"dotnet","Text":"Join @csharpfritz tomorrow to learn how to use @AppInsights with your #ASP.NET Core project. https://t.co/pSofjdde2Y","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":21,"FavoriteCount":9,"RawContent":null}]}},"RunOn":"2018-06-22T05:30:37.4443958Z","RunDurationInMilliseconds":8616}