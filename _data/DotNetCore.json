{"Data":{"Blog":{"FeedItems":[{"Title":"Using .NET and Docker Together – DockerCon 2018 Update","PublishedOn":"2018-06-14T00:15:31+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"I posted about Using .NET and Docker Together last year. With DockerCon 2018 being this week, it seemed like a great time to give you an update.  Since my last post, we&#8217;ve enabled a set of...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/06/13/using-net-and-docker-together-dockercon-2018-update/","RawContent":null},{"Title":".NET Framework June 2018 Security and Quality Rollup","PublishedOn":"2018-06-13T19:29:27+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, we are releasing the June 2018 Security and Quality Rollup. Security No new security fixes. See .NET Framework May 2018 Security and Quality Rollup for the latest security updates. Quality and...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/06/13/net-framework-june-2018-security-and-quality-rollup/","RawContent":null},{"Title":"Announcing .NET Framework 4.8 Early Access build 3621!","PublishedOn":"2018-06-06T21:19:43+00:00","CommentsCount":30,"FacebookCount":0,"Summary":"Today, we are happy to share the .NET Framework 4.8 Early Access build 3621 for your feedback. This is one of the in-development builds of the next version of the .NET Framework. The changes in this...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/06/06/announcing-net-framework-4-8-early-access-build-3621/","RawContent":null},{"Title":"Announcing ML.NET 0.2","PublishedOn":"2018-06-06T04:36:25+00:00","CommentsCount":4,"FacebookCount":0,"Summary":"Last month at //Build 2018, we released ML.NET 0.1, a cross-platform, open source machine learning framework. We would like to thank the community for the engagement so far in helping us shape ML.NET....","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/06/05/announcing-ml-net-0-2/","RawContent":null},{"Title":"Announcing .NET Core 2.1","PublishedOn":"2018-05-30T17:22:16+00:00","CommentsCount":71,"FacebookCount":0,"Summary":"We&#8217;re excited to announce the release of .NET Core 2.1. It includes improvements to performance, to the runtime and tools. It also includes a new way to deploy tools as NuGet packages....","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/05/30/announcing-net-core-2-1/","RawContent":null},{"Title":"Announcing Entity Framework Core 2.1","PublishedOn":"2018-05-30T17:22:00+00:00","CommentsCount":9,"FacebookCount":0,"Summary":"Today we are excited to announce the release of Entity Framework (EF) Core 2.1. This is the latest production-ready release of our open-source and cross-platform data access technology. We are...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/05/30/announcing-entity-framework-core-2-1/","RawContent":null},{"Title":".NET Framework May 2018 Preview of Quality Rollup for Windows 10 April 2018 Update (version 1803)","PublishedOn":"2018-05-24T01:49:57+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"Today, we are releasing the May 2018 Preview of Quality Rollup for Windows 10 April 2018 Update (version 1803). Quality and Reliability This release contains the following quality and reliability...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/05/23/net-framework-may-2018-preview-of-quality-rollup-for-windows-10-april-2018-update-version-1803/","RawContent":null},{"Title":".NET Framework May 2018 Preview of Quality Rollup for Windows 10 1709 (Fall Creators Update)","PublishedOn":"2018-05-21T22:44:05+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, we are releasing the May 2018 Preview of Quality Rollup for Windows 10 1709 (Fall Creators Update). Quality and Reliability This release contains the following quality and reliability...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/05/21/net-framework-may-2018-preview-of-quality-rollup-for-windows-10-1709-fall-creators-update/","RawContent":null},{"Title":".NET Framework May 2018 Preview of Quality Rollup for Windows 10","PublishedOn":"2018-05-17T17:20:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, we are releasing the May 2018 Preview of Quality Rollup for Windows 10 1703 (Creators Update) and Windows 10 1607 (Anniversary Update). Quality and Reliability This release contains the...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/05/17/net-framework-may-2018-preview-of-quality-rollup-for-windows-10/","RawContent":null},{"Title":".NET Framework May 2018 Preview of Quality Rollup","PublishedOn":"2018-05-15T18:10:24+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Today, we are releasing the May 2018 Preview of Quality Rollup. Quality and Reliability This release contains the following quality and reliability improvements. CLR Resolves an issue in...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/05/15/net-framework-may-2018-preview-of-quality-rollup/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"7724991049","Type":"PullRequestEvent","CreatedAt":"2018-05-24T16:33:10","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/103","RelatedDescription":"Merged pull request \"Add ML.NET to readme\" (#103) at dotnet/home","RelatedBody":"cc @shauheen @jongalloway "},{"Id":"7724874671","Type":"PullRequestEvent","CreatedAt":"2018-05-24T16:12:32","Actor":"danmosemsft","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/103","RelatedDescription":"Opened pull request \"Add ML.NET to readme\" (#103) at dotnet/home","RelatedBody":"cc @shauheen @jongalloway "},{"Id":"7697543163","Type":"PullRequestEvent","CreatedAt":"2018-05-18T19:10:28","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/91","RelatedDescription":"Merged pull request \"Add NUnit to the .NET Foundation Projects\" (#91) at dotnet/home","RelatedBody":""},{"Id":"7697541521","Type":"PullRequestEvent","CreatedAt":"2018-05-18T19:10:06","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/92","RelatedDescription":"Merged pull request \"Remove contact email from system.drawing.md\" (#92) at dotnet/home","RelatedBody":"Contact email is outdated. Mono-project site's community section has better, more up-to-date information."},{"Id":"7697539314","Type":"PullRequestEvent","CreatedAt":"2018-05-18T19:09:35","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/93","RelatedDescription":"Merged pull request \"Add Humanizer\" (#93) at dotnet/home","RelatedBody":"Onboarding Humanizer: https://github.com/Humanizr/Humanizer/issues/682"},{"Id":"7697528376","Type":"PullRequestEvent","CreatedAt":"2018-05-18T19:07:09","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/94","RelatedDescription":"Merged pull request \"add SourceLink\" (#94) at dotnet/home","RelatedBody":"Adding SourceLink to the project list as per the checklist https://github.com/ctaggart/SourceLink/issues/138"},{"Id":"7697526900","Type":"PullRequestEvent","CreatedAt":"2018-05-18T19:06:48","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/95","RelatedDescription":"Merged pull request \"Fix broken logo URL\" (#95) at dotnet/home","RelatedBody":""},{"Id":"7697525283","Type":"PullRequestEvent","CreatedAt":"2018-05-18T19:06:25","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/96","RelatedDescription":"Merged pull request \"Adding DNN Platform.\" (#96) at dotnet/home","RelatedBody":""},{"Id":"7697523628","Type":"PullRequestEvent","CreatedAt":"2018-05-18T19:06:02","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/98","RelatedDescription":"Merged pull request \"Updates to reflect the latest information\" (#98) at dotnet/home","RelatedBody":""},{"Id":"7697521624","Type":"PullRequestEvent","CreatedAt":"2018-05-18T19:05:34","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/100","RelatedDescription":"Merged pull request \"Create mvvmcross.md\" (#100) at dotnet/home","RelatedBody":"Added MvvmCross as project as part of on-boarding.\r\n\r\nhttps://github.com/MvvmCross/MvvmCross/issues/2415"},{"Id":"7697519505","Type":"PullRequestEvent","CreatedAt":"2018-05-18T19:05:08","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/102","RelatedDescription":"Merged pull request \"Update projects.json adding MLNET\" (#102) at dotnet/home","RelatedBody":""}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"7780591341","Type":"IssuesEvent","CreatedAt":"2018-06-05T20:33:11","Actor":"huanwu","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/72","RelatedDescription":"Opened issue \"Introducing dotnet-svcutil.xmlserializer for .NET Core\" (#72) at dotnet/announcements","RelatedBody":"# Introducing dotnet-svcutil.xmlserializer for .NET Core\r\nOn the full .NET Framework you are able to pre-generate a serialization assembly using the tool svcutil. We are providing similar functionality on .NET Core by releasing the dotnet-svcutil.xmlserializer NuGet package. It pre-generates c# serialization code for the types used by WCF Service Contract in the client applications that can be serialized using the XmlSerializer to improve the startup performance of Xml Serialization when serializing or de-serializing objects of those types using XmlSerializer. \r\nYou can start using the tool today by following the instructions. \r\n## Discussion \r\nPlease share with us any thoughts of questions that you may have at: \r\n\r\n- dotnet/wcf [#2927](https://github.com/dotnet/wcf/issues/2927)\r\n## Details \r\nWhen to use XmlSerializer with WCF in an app to serialize contract data types, it will generate an XmlSerializer during runtime to do the serialization. You can improve the startup performance of Xml serialization by simply adding the reference of dotnet-svcutil.xmlserializer NuGet package to your project. This tool will generate the serialization code and compile it into an assembly next to your output assembly at build time in advance. This assembly can then be deployed and ran with your application. \r\n\r\nPlease create an issue with your feedback at [dotnet/wcf](https://github.com/dotnet/wcf/issues). We are actively looking to improve the tool and your input is a valuable part of the process. "},{"Id":"7719029569","Type":"IssuesEvent","CreatedAt":"2018-05-23T18:04:46","Actor":"mlacouture","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/70","RelatedDescription":"Opened issue \"Introducing dotnet-svcutil\" (#70) at dotnet/announcements","RelatedBody":"# Introducing dotnet-svcutil\r\n\r\nThe Microsoft Windows Communication Foundation (WCF) **dotnet-svcutil** tool is a .NET Core CLI tool that retrieves metadata from a web service on a network location or from a WSDL file, and generates a WCF class containing client proxy methods that you can use to access the web service operations.\r\n\r\nSimilarly to the [Service Model Metadata - svcutil](https://docs.microsoft.com/en-us/dotnet/framework/wcf/servicemodel-metadata-utility-tool-svcutil-exe) tool for .NET Framework projects, the **dotnet-svcutil** is a command line tool for generating a web service reference compatible with .NET Core and .NET Standard projects. \r\n\r\nThe **dotnet-svcutil** tool is an alternative option to the [WCF Web Service Reference ](https://docs.microsoft.com/en-us/dotnet/core/additional-tools/wcf-web-service-reference-guide)Visual Studio connected service provider which first shipped with Visual Studio 2017 v15.5.  The **dotnet-svcutil** tool as a .NET Core CLI tool, however, can be run on multiple platforms like Linux and MacOS in addition to Windows.\r\n\r\n# Discussion\r\nPlease share your thoughts with us by commenting on GitHub issue dotnet/wcf#2894\r\n"}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"7836945977","Type":"PullRequestEvent","CreatedAt":"2018-06-18T01:58:14","Actor":"JongHeonChoi","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/18523","RelatedDescription":"Opened pull request \"Update Tizen CI docker image (tizen-rootfs-5.0m1)\" (#18523) at dotnet/coreclr","RelatedBody":""},{"Id":"7836485543","Type":"IssuesEvent","CreatedAt":"2018-06-17T20:05:38","Actor":"jakobbotsch","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/18522","RelatedDescription":"Opened issue \"Deterministic program outputs indeterministic results on Linux in release\" (#18522) at dotnet/coreclr","RelatedBody":"On Ubuntu 14.04 using current HEAD (71f4199), the following program outputs 0 in debug but seemingly random values in release. On Windows, both debug and release output 0.\r\n```csharp\r\nstruct S0\r\n{\r\n    public ushort F0;\r\n}\r\n\r\nstruct S1\r\n{\r\n    public S0 F0;\r\n    public ushort F1;\r\n    public S1(ushort f1) : this()\r\n    {\r\n        F1 = f1;\r\n    }\r\n}\r\n\r\npublic class Program\r\n{\r\n    static S1 s_36;\r\n    public static void Main()\r\n    {\r\n        s_36.F0 = M113();\r\n        System.Console.WriteLine(s_36.F1);\r\n    }\r\n\r\n    static S0 M113()\r\n    {\r\n        return new S0();\r\n    }\r\n}\r\n```"},{"Id":"7836315328","Type":"IssuesEvent","CreatedAt":"2018-06-17T17:56:52","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/18521","RelatedDescription":"Opened issue \"Marshal.StructureToPtr() only marshals first element of an fixed-size buffer when structure is contained within a managed/non-blittable structure\" (#18521) at dotnet/coreclr","RelatedBody":"_From @kpreisser on June 17, 2018 15:40_\n\nHi, sorry if this isn't the right place to report this, but I couldn't find other reports/explanations of this behavior.\r\n\r\nI found that when using `Marshal.StructureToPtr()` with a managed/non-blittable structure that contains a blittable structure with a fixed-size buffer, only the first byte of that fixed-size buffer is actually marshalled; the remaining bytes are `0`.\r\n\r\nI could reproduce this issue/behavior on .NET Core 2.1 (Windows), .NET Core 2.0 (Linux) and .NET Framework 4.7.2.\r\n\r\nPlease see the following code:\r\n```c#\r\nusing System;\r\nusing System.Runtime.InteropServices;\r\nusing System.Text;\r\n\r\nnamespace MarshalTest\r\n{\r\n    [StructLayout(LayoutKind.Sequential)]\r\n    unsafe struct MyBufferStruct\r\n    {\r\n        public short number;\r\n        public fixed byte number2[2];\r\n        //public byte number2_1;\r\n        //public byte number2_2;\r\n        public short number3;\r\n    }\r\n\r\n    [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Unicode)]\r\n    struct MyParentStruct\r\n    {\r\n        public MyBufferStruct myBufferStruct;\r\n        public string string1; // commenting this makes it work\r\n        public IntPtr intptr1;\r\n    }\r\n\r\n    class MarshalExample\r\n    {\r\n        static unsafe void Main()\r\n        {\r\n            var str = default(MyParentStruct);\r\n\r\n            // Assign values to the bytes.\r\n            byte* ptr = (byte*)&str.myBufferStruct;\r\n            for (int i = 0; i < sizeof(MyBufferStruct); i++)\r\n                ptr[i] = (byte)(0x11 * (i + 1));\r\n\r\n            var stringBuilder = new StringBuilder();\r\n            for (int i = 0; i < sizeof(MyBufferStruct); i++)\r\n                stringBuilder.Append(ptr[i].ToString(\"X2\"));\r\n\r\n            Console.WriteLine(stringBuilder.ToString());\r\n\r\n            // Marshal the buffer struct directly.\r\n            var bufferStructIntPtr = Marshal.AllocHGlobal(Marshal.SizeOf<MyBufferStruct>());\r\n            Marshal.StructureToPtr(str.myBufferStruct, bufferStructIntPtr, false);\r\n            try\r\n            {\r\n                byte* bufferStructPtr = (byte*)bufferStructIntPtr.ToPointer();\r\n                stringBuilder = new StringBuilder();\r\n                for (int i = 0; i < sizeof(MyBufferStruct); i++)\r\n                    stringBuilder.Append(bufferStructPtr[i].ToString(\"X2\"));\r\n\r\n                Console.WriteLine(stringBuilder.ToString());\r\n            }\r\n            finally\r\n            {\r\n                Marshal.DestroyStructure<MyBufferStruct>(bufferStructIntPtr);\r\n                Marshal.FreeHGlobal(bufferStructIntPtr);\r\n            }\r\n\r\n            // Marshal the parent struct.\r\n            var parentStructIntPtr = Marshal.AllocHGlobal(Marshal.SizeOf<MyParentStruct>());\r\n            Marshal.StructureToPtr(str, parentStructIntPtr, false);\r\n            try\r\n            {\r\n                byte* parentStructPtr = (byte*)parentStructIntPtr.ToPointer();\r\n                stringBuilder = new StringBuilder();\r\n                for (int i = 0; i < sizeof(MyBufferStruct); i++)\r\n                    stringBuilder.Append(parentStructPtr[i].ToString(\"X2\"));\r\n\r\n                Console.WriteLine(stringBuilder.ToString());\r\n            }\r\n            finally\r\n            {\r\n                Marshal.DestroyStructure<MyParentStruct>(parentStructIntPtr);\r\n                Marshal.FreeHGlobal(parentStructIntPtr);\r\n            }\r\n\r\n            Console.ReadKey();\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nThis example declares a struct `MyBufferStruct` that contains a fixed-size buffer. As it contains only primitive types, I can get a pointer to it and set its values (6 bytes),\r\nThen, I first marshal the struct `MyBufferStruct` directly, and after that, I marshal the structure `MyParentStruct` which contains `MyBufferStruct` and additionally a non-blittable type (`string`).\r\n\r\nExcepted output:\r\n```\r\n112233445566\r\n112233445566\r\n112233445566\r\n```\r\n\r\nActual output:\r\n```\r\n112233445566\r\n112233445566\r\n112233005566\r\n```\r\n\r\nThis means when marshalling only the struct itself, everything works, but when marshalling the parent structure, only the first byte of the fixed-size buffer (`number2`) is marshalled instead of all bytes.\r\n\r\nHowever, if you comment-out the `public string string1` field in `MyParentStruct`, everything is marshalled correctly. Also, if you comment-out the fixed-size buffer field `public fixed byte number2[2];` in `MyBufferStruct` and instead uncomment the two short fields (`number2_1` and `number2_2`), marshalling works correctly.\r\n\r\nThank you!\n\n_Copied from original issue: dotnet/corefx#30473_"},{"Id":"7836204198","Type":"PullRequestEvent","CreatedAt":"2018-06-17T16:35:37","Actor":"github-john-doe","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/18520","RelatedDescription":"Opened pull request \"Typo\" (#18520) at dotnet/coreclr","RelatedBody":""},{"Id":"7836156152","Type":"PullRequestEvent","CreatedAt":"2018-06-17T16:00:17","Actor":"tannergooding","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/18519","RelatedDescription":"Opened pull request \"Fold away Sse.StaticCast and Avx.StaticCast in the importer\" (#18519) at dotnet/coreclr","RelatedBody":"FYI. @CarolEidt, @eerhardt, @fiigii \r\n\r\nThis improves the codegen for code using `StaticCast` as the rest of the JIT no longer has to care that it exists at all."}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"7836436479","Type":"IssuesEvent","CreatedAt":"2018-06-17T19:28:26","Actor":"cocowalla","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/9508","RelatedDescription":"Opened issue \"Daily build links are broken\" (#9508) at dotnet/cli","RelatedBody":"The daily build links in this repo's main readme.md file are all broken.\r\n\r\nFor example, [Windows x64 installer](https://dotnetcli.blob.core.windows.net/dotnet/Sdk/master/dotnet-sdk-latest-win-x64.exe) gives `ResourceNotFound`."},{"Id":"7836388156","Type":"PullRequestEvent","CreatedAt":"2018-06-17T18:51:56","Actor":"wli3","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/9507","RelatedDescription":"Opened pull request \"WIP Unskip to see if it is supported now\" (#9507) at dotnet/cli","RelatedBody":"- If this PR should not run tests please add text \"skip[REMOVE_THIS]ci[REMOVE_THIS]please\" (remove the marked text, no quotes).\r\n- Please add description for changes you are making.\r\n- If there is an issue related to this PR, please add the reference.\r\n"},{"Id":"7835348765","Type":"IssuesEvent","CreatedAt":"2018-06-17T04:00:46","Actor":"gabrielweyer","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/9506","RelatedDescription":"Opened issue \"dotnet-install.ps1 cannot download  `.NET Core` runtime `1.0.9`\" (#9506) at dotnet/cli","RelatedBody":"I'm trying to install the `.NET Core` runtime `1.0.9` in `AppVeyor`.\r\n\r\n## Steps to reproduce\r\n\r\n```posh\r\n.\\build\\dotnet-install.ps1 -SharedRuntime -Version 1.0.9\r\n```\r\n\r\n## Expected  behavior\r\n\r\nThe script installs the .NET Core runtime `1.0.9`.\r\n\r\n## Actual behavior\r\n\r\n```posh\r\ndotnet-install: Downloading link: https://dotnetcli.azureedge.net/dotnet/Runtime/1.0.9/dotnet-runtime-1.0.9-win-x64.zip\r\ndotnet-install: Cannot download: https://dotnetcli.azureedge.net/dotnet/Runtime/1.0.9/dotnet-runtime-1.0.9-win-x64.zip\r\ndotnet-install: Downloading legacy link: https://dotnetcli.azureedge.net/dotnet/Runtime/1.0.9/dotnet-win-x64.1.0.9.zip\r\nException calling \"Invoke\" with \"0\" argument(s): \"Failed to download https://dotnetcli.azureedge.net/dotnet/Runtime/1.0.9/dotnet-win-x64.1.0.9.zip.  StatusCode: 404, ReasonPhrase: 'Not Found', Version: 1.1, Content:\r\nSystem.Net.Http.StreamContent, Headers:\r\n{\r\n  x-ms-request-id: b3087e61-b01e-00d4-69ed-05e1eb000000\r\n  Date: Sun, 17 Jun 2018 03:44:01 GMT\r\n  Server: Blob\r\n  Server: Service\r\n  Server: Version\r\n  Server: 1.0\r\n  Server: Microsoft-HTTPAPI/2.0\r\n  Content-Length: 223\r\n  Content-Type: application/xml\r\n}\"\r\nAt E:\\tmp\\dotnet-install.ps1:110 char:20\r\n+             return $ScriptBlock.Invoke()\r\n+                    ~~~~~~~~~~~~~~~~~~~~~\r\n    + CategoryInfo          : NotSpecified: (:) [], ParentContainsErrorRecordException\r\n    + FullyQualifiedErrorId : RuntimeException\r\n```\r\n\r\nThis used to work until a few days ago, now it's broken both in `AppVeyor` and my machine. As a workaround I can download it from `https://download.microsoft.com/download/A/1/D/A1D5F1B5-A7B0-432B-A354-FCDC4B059149/dotnet-win-x64.1.0.9.zip` but I've noticed the `GUID` is different for each runtime.\r\n\r\n## Environment data\r\n\r\n```posh\r\nλ  dotnet --info\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.1.300\r\n Commit:    adab45bf0c\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.300\\\r\n\r\nHost (useful for support):\r\n  Version: 2.1.0\r\n  Commit:  caa7b7e2ba\r\n\r\n.NET Core SDKs installed:\r\n  1.0.2 [C:\\Program Files\\dotnet\\sdk]\r\n  1.0.3 [C:\\Program Files\\dotnet\\sdk]\r\n  1.1.0 [C:\\Program Files\\dotnet\\sdk]\r\n  1.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.0.0 [C:\\Program Files\\dotnet\\sdk]\r\n  2.0.3 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.2 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.3 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.4 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.100 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.101 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.102 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.103 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.104 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.200 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.201 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.300 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.0.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\n\r\n\r\n\r\n\r\n\r\n"},{"Id":"7832895968","Type":"PullRequestEvent","CreatedAt":"2018-06-15T20:25:12","Actor":"dotnet-bot","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/9505","RelatedDescription":"Opened pull request \"Merge release/2.1.2xx to release/2.1.3xx\" (#9505) at dotnet/cli","RelatedBody":"\nThis is an automatically generated pull request from release/2.1.2xx into release/2.1.3xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1.2xx-to-release/2.1.3xx\ngit reset --hard upstream/release/2.1.3xx\ngit merge upstream/release/2.1.2xx\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.1.2xx-to-release/2.1.3xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"7832857565","Type":"PullRequestEvent","CreatedAt":"2018-06-15T20:15:30","Actor":"dsplaisted","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/9473","RelatedDescription":"Merged pull request \"Update VS insertion package name\" (#9473) at dotnet/cli","RelatedBody":"This will allow 2.1.2xx and 2.1.4xx to be separate components in the VS installer."}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"7830571777","Type":"IssuesEvent","CreatedAt":"2018-06-15T12:14:03","Actor":"panost","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/770","RelatedDescription":"Closed issue \"[Question] Nullable Ref Types\" (#770) at dotnet/standard","RelatedBody":"I don't ask if are they plans for it, but if it is possible (for technological POV) to support Nullable Ref Types (C# 8.0) annotations even if none of the supported frameworks has them?\r\n\r\nFor example String.Replace to be defined in .NET Standard as \r\n\r\n> public string String.Replace(string oldValue,string? newValue);\r\n\r\neven if none of the supported frameworks has this annotation ?\r\n"},{"Id":"7828631070","Type":"IssuesEvent","CreatedAt":"2018-06-15T02:45:19","Actor":"gongdo","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/476","RelatedDescription":"Closed issue \"Unit Test project(.NET 4.7) cannot load System.ValueTuple\" (#476) at dotnet/standard","RelatedBody":"> (The original issue was reported by Gyuwon Yi from here: https://developercommunity.visualstudio.com/content/problem/102236/unit-test-projectnet-47-cannot-load-systemvaluetup.html )\r\n\r\nUnit Test project(.NET 4.7) referencing .NET Core library using value tuple cannot load System.ValueTuple assembly.\r\nBut console client application works correctly.\r\nYou can repro with code from https://github.com/gyuwon/ValueTypeTestingProblem\r\n\r\nThe whole message:\r\n\r\n> Test Name: Bar_returns_value_tuple_correctly\r\n> Test FullName: ValueTupleTestsNet47.FooService_specs.Bar_returns_value_tuple_correctly\r\n> Test Source: c:\\users\\gyuwon\\Documents\\Projects\\ValueTupleTesting\\ValueTupleTestsNet47\\FooService_specs.cs : line 16\r\n> Test Outcome: Failed\r\n> Test Duration: 0:00:00.0261781 Result StackTrace: at ValueTupleTestsNet47.FooService_specs.Bar_returns_value_tuple_correctly()\r\n> Result Message: \r\n> Test method ValueTupleTestsNet47.FooService_specs.Bar_returns_value_tuple_correctly threw exception: \r\n> System.IO.FileLoadException: Could not load file or assembly 'System.ValueTuple, Version=0.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51' or one of its dependencies. The located assembly's manifest definition does not match the assembly reference. (Exception from HRESULT: 0x80131040)\r\n\r\nAs I replied on the original issue, it can be solved by making library project to target multiple frameworks.\r\nBut it's just a work-around, not a solution.\r\nI think it's not a single ValueTuple problem. There's some referencing issue on .NET Standard 2.0.\r\nFor example this issue on Azure Function(Web Job) project with .NET Standard 2.0 library, looks like similar: https://github.com/Azure/azure-webjobs-sdk-script/issues/1792"},{"Id":"7827023981","Type":"IssuesEvent","CreatedAt":"2018-06-14T19:02:04","Actor":"Rutix","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/775","RelatedDescription":"Opened issue \"[Question] Why does the releasenotes link to .NET Core?\" (#775) at dotnet/standard","RelatedBody":"In slack someone pointed out that the releasenotes link at https://www.nuget.org/packages/NETStandard.Library/2.0.3 points to https://github.com/dotnet/core/tree/master/release-notes (using an go.microsoft link). Why is this? I noticed that not all version of .NET Standard have seperate releasenotes, is this the reason?"}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"7837316835","Type":"PullRequestEvent","CreatedAt":"2018-06-18T05:16:40","Actor":"dotnet-maestro-bot","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/30481","RelatedDescription":"Opened pull request \"Update ProjectNTfs, ProjectNTfsTestILC to beta-26618-00, beta-26618-00, respectively (master)\" (#30481) at dotnet/corefx","RelatedBody":""},{"Id":"7836946094","Type":"PullRequestEvent","CreatedAt":"2018-06-18T01:58:18","Actor":"JongHeonChoi","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/30480","RelatedDescription":"Opened pull request \"Update Tizen CI docker image (tizen-rootfs-5.0m1)\" (#30480) at dotnet/corefx","RelatedBody":""},{"Id":"7836827121","Type":"IssuesEvent","CreatedAt":"2018-06-18T00:40:44","Actor":"Redouane64","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/30479","RelatedDescription":"Opened issue \"Building from source fails to download required dotnet cli tool with 404 not found error.\" (#30479) at dotnet/corefx","RelatedBody":"Trying to build CoreFX from source by running build scripts fails to download dotnet cli tool with 404 Not Found.\r\n\r\nHere is error on cmd:\r\n\r\n```\r\nInstalling dotnet cli...\r\nERROR: Could not install dotnet cli correctly.\r\nPlease check the detailed log that follows.\r\nRunning E:\\GitHub\\corefx\\init-tools.cmd\r\nInstalling 'https://dotnetcli.azureedge.net/dotnet/Sdk/2.1.300-rc1-008673/dotnet-sdk-2.1.300-rc1-008673-win-x64.zip' to 'E:\\GitHub\\corefx\\Tools\\dotnetcli\\dotnet-sdk-2.1.300-rc1-008673-win-x64.zip'\r\nException calling \"DownloadFile\" with \"2\" argument(s): \"The remote server returned an error: (404) Not Found.\"\r\nAt line:1 char:249\r\n+ ... dentials; } $wc.DownloadFile('https://dotnetcli.azureedge.net/dotnet/ ...\r\n+                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n    + CategoryInfo          : NotSpecified: (:) [], ParentContainsErrorRecordException\r\n    + FullyQualifiedErrorId : WebException\r\n```\r\n\r\n\r\nAlso. I tried to access download URL from browser and fails with 404 Not Found, Here is output from browser:\r\n\r\n````\r\n<Error>\r\n<Code>ResourceNotFound</Code>\r\n<Message>\r\nThe specified resource does not exist. RequestId:3aca3efb-b01e-003a-4e9b-06eb68000000 Time:2018-06-18T00:32:14.4887599Z\r\n</Message>\r\n</Error>\r\n````\r\n\r\nI have direct access to the internet (no proxy).\r\n\r\n**Location details:**\r\nregion: North Africa\r\ncountry: Algeria\r\n\r\ncc @karelz "},{"Id":"7836749320","Type":"PullRequestEvent","CreatedAt":"2018-06-17T23:36:42","Actor":"davidsh","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/30478","RelatedDescription":"Opened pull request \"Fix SocketsHttpHandler for Windows auth proxy CONNECT tunneling\" (#30478) at dotnet/corefx","RelatedBody":"SocketsHttpHandler wasn't even trying to send Negotiate/NTLM auth tokens to a proxy. This was due\r\nto some invalid logic regarding the \"usingProxy\" field in HttpConnection. Reworked this logic to\r\nbe clearer about the various kinds of proxy scenarios.\r\n\r\nI refactored the loopback proxy server and made it much more robust. It can now handle multiple\r\nrequests and multiple connections which helps test against the other handlers whose behavior is\r\ndifferent in this area. I plan to do further work in consolidating the LoopbackServer and\r\nLoopbackProxyServer classes in future PRs.\r\n\r\nI created a separate HttpClientHandlerTest.Proxy.cs file and moved many existing proxy tests and\r\nadded new tests. The current HttpClientHandlerTest.cs file is still over 3000 lines and needs more\r\nrefactoring to make it easier to maintain and track test scenario coverage.\r\n\r\nFixes #30330"},{"Id":"7836734977","Type":"IssuesEvent","CreatedAt":"2018-06-17T23:24:07","Actor":"SidShetye","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/30477","RelatedDescription":"Opened issue \".net standard 2.0 API doesn't find certificate in store in .net core 2.0 app\" (#30477) at dotnet/corefx","RelatedBody":"A .net standard 2.0 library that find a certificate in store has different incorrect behavior in a .net core 2.0 app (not found) versus a .net core 2.1 app (certificate found).\r\n\r\n@bartonjs , probably down your alley. A test project showing this is at https://github.com/SidShetye/netstandard-core-ecc \r\n\r\n----\r\n\r\n##  .net core 2.0 app\r\n\r\n```\r\nC:\\temp\\netstandard-core-ecc\\netcore20app\r\nλ  dotnet run\r\ncert=\r\nPress enter to exit ...\r\n```\r\n\r\n##  .net core 2.1 app\r\n\r\n```\r\nC:\\temp\\netstandard-core-ecc\\netcore21app   \r\nλ  dotnet run                               \r\ncert=[Subject]                              \r\n  CN=Test-EC-Cert, C=US                     \r\n                                            \r\n[Issuer]                                    \r\n  CN=Test-EC-Cert, C=US                     \r\n                                            \r\n[Serial Number]                             \r\n  00B92EC2EC8404DBE8                        \r\n                                            \r\n[Not Before]                                \r\n  6/17/2018 3:02:29 PM                      \r\n                                            \r\n[Not After]                                 \r\n  6/18/2118 3:02:29 PM                      \r\n                                            \r\n[Thumbprint]                                \r\n  2A6706FBB8D221CFB5D5F21AD1A808059D9E52AD  \r\n                                            \r\nPress enter to exit ...                     \r\n```"}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"7837183330","Type":"IssuesEvent","CreatedAt":"2018-06-18T04:04:38","Actor":"davkean","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/27949","RelatedDescription":"Opened issue \"IntroduceVariableCodeRefactoringProviderSystem.ArgumentOutOfRangeException : 'end' must not be less than 'start'\" (#27949) at dotnet/roslyn","RelatedBody":"Had the following invalid code while refactoring:\r\n\r\n``` C#\r\n\r\n        public static ImageMoniker ApplicationPrivate = return new ImageMoniker { Guid = s_manifestGuid, Id = 0 };\r\n        public static ImageMoniker ApplicationWarning = return new ImageMoniker { Guid = s_manifestGuid, Id = 1 };\r\n\r\n        public static ImageMoniker CodeInformationPrivate = return new ImageMoniker { Guid = s_manifestGuid, Id = 2 };\r\n\r\n        public static ImageMoniker CodeInformationWarning = return new ImageMoniker { Guid = s_manifestGuid, Id = 3 };\r\n\r\n        public static ImageMoniker Component = return new ImageMoniker { Guid = s_manifestGuid, Id = 4 };\r\n\r\n        public static ImageMoniker ComponentPrivate = return new ImageMoniker { Guid = s_manifestGuid, Id = 5 };\r\n\r\n        public static ImageMoniker ComponentWarning = return new ImageMoniker { Guid = s_manifestGuid, Id = 6 };\r\n        public static ImageMoniker ErrorSmall = return new ImageMoniker { Guid = s_manifestGuid, Id = 7 };\r\n```\r\n\r\n\r\n```\r\nSystem.ArgumentOutOfRangeException : 'end' must not be less than 'start'\r\nParameter name: end\r\n   at Microsoft.CodeAnalysis.Text.TextSpan.FromBounds(Int32 start,Int32 end)\r\n   at Microsoft.CodeAnalysis.IntroduceVariable.AbstractIntroduceVariableService`6.State.GetExpressionUnderSpan(SyntaxTree tree,TextSpan textSpan,CancellationToken cancellationToken)\r\n   at Microsoft.CodeAnalysis.IntroduceVariable.AbstractIntroduceVariableService`6.State.TryInitialize(TextSpan textSpan,CancellationToken cancellationToken)\r\n   at Microsoft.CodeAnalysis.IntroduceVariable.AbstractIntroduceVariableService`6.State.Generate(TService service,SemanticDocument document,TextSpan textSpan,CancellationToken cancellationToken)\r\n   at async Microsoft.CodeAnalysis.IntroduceVariable.AbstractIntroduceVariableService`6.IntroduceVariableAsync[TService,TExpressionSyntax,TTypeSyntax,TTypeDeclarationSyntax,TQueryExpressionSyntax,TNameSyntax](<Unknown Parameters>)\r\n   at async Microsoft.CodeAnalysis.CodeRefactorings.IntroduceVariable.IntroduceVariableCodeRefactoringProvider.ComputeRefactoringsAsync(<Unknown Parameters>)\r\n   at async Microsoft.CodeAnalysis.CodeRefactorings.CodeRefactoringService.GetRefactoringFromProviderAsync(<Unknown Parameters>)\r\n   at Microsoft.VisualStudio.Telemetry.WindowsErrorReporting.WatsonReport.GetClrWatsonExceptionInfo(Exception exceptionObject)\r\n```"},{"Id":"7837013078","Type":"IssuesEvent","CreatedAt":"2018-06-18T02:34:51","Actor":"davkean","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/27948","RelatedDescription":"Opened issue \"Add a code fix for going from \"expression-body member\" to \"auto-property initializer\" and vice versa\" (#27948) at dotnet/roslyn","RelatedBody":"I can never remember the syntax for going from \"expression-body member\" to \"auto-property initializer\":\r\n\r\n``` C#\r\npublic static ImageMoniker ApplicationPrivate => new ImageMoniker { Guid = s_manifestGuid, Id = ApplicationPrivateId };\r\n```\r\n\r\nto:\r\n\r\n``` C#\r\npublic static ImageMoniker ApplicationPrivate { get; } = new ImageMoniker { Guid = s_manifestGuid, Id = ApplicationPrivateId };\r\n```\r\n\r\nIt would be great if we had a code fix to automatically do this."},{"Id":"7836969273","Type":"IssuesEvent","CreatedAt":"2018-06-18T02:10:50","Actor":"davkean","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/27947","RelatedDescription":"Opened issue \"\"Use expression body for properties\" shows zero results when you attempt to run across document, project & solution\" (#27947) at dotnet/roslyn","RelatedBody":"**Version Used**: \r\nVersion 15.8.0 Preview 4.0 [27815.3001.d15.8stg]\r\n\r\n**Steps to Reproduce**:\r\n\r\n``` C#\r\n\r\n    public static class ManagedImageMonikers\r\n    {\r\n        private static readonly Guid s_manifestGuid = new Guid(\"{259567C1-AA6B-46BF-811C-C145DD9F3B48}\");\r\n        private const int CodeInformationPrivateId = 2;\r\n\r\n        public static ImageMoniker CodeInformationPrivate\r\n        {\r\n            get { return new ImageMoniker { Guid = s_manifestGuid, Id = CodeInformationPrivateId }; } // <-- Attempt to \"Use expression body for properties\" across document/solution/project\r\n        }\r\n    }\r\n\r\n    public class ImageMoniker\r\n    {\r\n        public Guid Guid { get; internal set; }\r\n        public int Id { get; internal set; }\r\n    }\r\n```\r\n\r\n**Expected Behavior**:\r\nTo be able to run across document, project & solution\r\n\r\n**Actual Behavior**:\r\n\r\n![image](https://user-images.githubusercontent.com/1103906/41515192-888df9ca-72f0-11e8-93e6-7a4d9e9902a6.png)\r\n"},{"Id":"7836818337","Type":"PullRequestEvent","CreatedAt":"2018-06-18T00:34:00","Actor":"sharwell","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/27946","RelatedDescription":"Opened pull request \"Only qualify the first symbol in Quick Info\" (#27946) at dotnet/roslyn","RelatedBody":"Fixes #547\r\n\r\n<details><summary>Ask Mode template not completed</summary>\r\n\r\n<!-- This template is not always required. If you aren't sure about whether it's needed or want help filling out the sections,\r\nsubmit the pull request and then ask us for help. :) -->\r\n\r\n### Customer scenario\r\n\r\nWhat does the customer do to get into this situation, and why do we think this\r\nis common enough to address for this release.  (Granted, sometimes this will be\r\nobvious \"Open project, VS crashes\" but in general, I need to understand how\r\ncommon a scenario is)\r\n\r\n### Bugs this fixes\r\n\r\n(either VSO or GitHub links)\r\n\r\n### Workarounds, if any\r\n\r\nAlso, why we think they are insufficient for RC vs. RC2, RC3, or RTW\r\n\r\n### Risk\r\n\r\nThis is generally a measure our how central the affected code is to adjacent\r\nscenarios and thus how likely your fix is to destabilize a broader area of code\r\n\r\n### Performance impact\r\n\r\n(with a brief justification for that assessment (e.g. \"Low perf impact because no extra allocations/no complexity changes\" vs. \"Low\")\r\n\r\n### Is this a regression from a previous update?\r\n\r\n### Root cause analysis\r\n\r\nHow did we miss it?  What tests are we adding to guard against it in the future?\r\n\r\n### How was the bug found?\r\n\r\n(E.g. customer reported it vs. ad hoc testing)\r\n\r\n### Test documentation updated?\r\n\r\nIf this is a new non-compiler feature or a significant improvement to an existing feature, update https://github.com/dotnet/roslyn/wiki/Manual-Testing once you know which release it is targeting.\r\n\r\n</details>\r\n"},{"Id":"7836704951","Type":"IssuesEvent","CreatedAt":"2018-06-17T22:57:45","Actor":"OmarTawfik","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/27945","RelatedDescription":"Opened issue \"Investigate PR 27424 Breaking change around unfixed expressions\" (#27945) at dotnet/roslyn","RelatedBody":"PR #27424 caused a build break for the following scenario:\r\n\r\n```csharp\r\nusing System;\r\npublic unsafe sealed class PinnedStreamReader\r\n{\r\n    public unsafe byte* GetPointer(int position)\r\n    {\r\n        return (&bufferStart[position]);\r\n    }\r\n \t\r\n    byte* bufferStart;\r\n}\r\n```\r\n\r\nIt now produced: `error CS0212: You can only take the address of an unfixed expression inside of a fixed statement initializer`\r\n\r\nPR #27944 reverted it in master. We should investigate this and bring back the fix, without breaking additional scenarios."},{"Id":"7836702281","Type":"PullRequestEvent","CreatedAt":"2018-06-17T22:55:15","Actor":"OmarTawfik","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/27944","RelatedDescription":"Opened pull request \"Revert \"Fixed error messages around fixed fields (#27424)\"\" (#27944) at dotnet/roslyn","RelatedBody":"This caused a build break for the following scenario:\r\n\r\n```csharp\r\nusing System;\r\npublic unsafe sealed class PinnedStreamReader\r\n{\r\n    public unsafe byte* GetPointer(int position)\r\n    {\r\n        return (&bufferStart[position]);\r\n    }\r\n \t\r\n    byte* bufferStart;\r\n}\r\n```\r\n\r\nIt now produced: `error CS0212: You can only take the address of an unfixed expression inside of a fixed statement initializer`\r\nWe should investigate this and bring back the fix, without breaking additional scenarios."},{"Id":"7836604364","Type":"PullRequestEvent","CreatedAt":"2018-06-17T21:34:47","Actor":"sharwell","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/27943","RelatedDescription":"Opened pull request \"[WIP] Update Format Document to account for preferred modifier order\" (#27943) at dotnet/roslyn","RelatedBody":"* [x] C# implementation\r\n* [ ] C# tests\r\n* [ ] VB implementation\r\n* [ ] VB tests\r\n\r\nFixes #27893\r\n\r\n<details><summary>Ask Mode template not completed</summary>\r\n\r\n<!-- This template is not always required. If you aren't sure about whether it's needed or want help filling out the sections,\r\nsubmit the pull request and then ask us for help. :) -->\r\n\r\n### Customer scenario\r\n\r\nWhat does the customer do to get into this situation, and why do we think this\r\nis common enough to address for this release.  (Granted, sometimes this will be\r\nobvious \"Open project, VS crashes\" but in general, I need to understand how\r\ncommon a scenario is)\r\n\r\n### Bugs this fixes\r\n\r\n(either VSO or GitHub links)\r\n\r\n### Workarounds, if any\r\n\r\nAlso, why we think they are insufficient for RC vs. RC2, RC3, or RTW\r\n\r\n### Risk\r\n\r\nThis is generally a measure our how central the affected code is to adjacent\r\nscenarios and thus how likely your fix is to destabilize a broader area of code\r\n\r\n### Performance impact\r\n\r\n(with a brief justification for that assessment (e.g. \"Low perf impact because no extra allocations/no complexity changes\" vs. \"Low\")\r\n\r\n### Is this a regression from a previous update?\r\n\r\n### Root cause analysis\r\n\r\nHow did we miss it?  What tests are we adding to guard against it in the future?\r\n\r\n### How was the bug found?\r\n\r\n(E.g. customer reported it vs. ad hoc testing)\r\n\r\n### Test documentation updated?\r\n\r\nIf this is a new non-compiler feature or a significant improvement to an existing feature, update https://github.com/dotnet/roslyn/wiki/Manual-Testing once you know which release it is targeting.\r\n\r\n</details>\r\n"},{"Id":"7836536518","Type":"PullRequestEvent","CreatedAt":"2018-06-17T20:43:13","Actor":"sharwell","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/27942","RelatedDescription":"Opened pull request \"Update naming styles to ensure .editorconfig is the code style \"source of truth\"\" (#27942) at dotnet/roslyn","RelatedBody":"Prior to this change, user settings could interact with .editorconfig in unknown ways to produce deviations in code style across a team which could not be controlled by simply updating .editorconfig. This change ensures that .editorconfig, when used, becomes the code style \"source of truth\" for affected documents.\r\n\r\n<details><summary>Ask Mode template not completed</summary>\r\n\r\n<!-- This template is not always required. If you aren't sure about whether it's needed or want help filling out the sections,\r\nsubmit the pull request and then ask us for help. :) -->\r\n\r\n### Customer scenario\r\n\r\nWhat does the customer do to get into this situation, and why do we think this\r\nis common enough to address for this release.  (Granted, sometimes this will be\r\nobvious \"Open project, VS crashes\" but in general, I need to understand how\r\ncommon a scenario is)\r\n\r\n### Bugs this fixes\r\n\r\n(either VSO or GitHub links)\r\n\r\n### Workarounds, if any\r\n\r\nAlso, why we think they are insufficient for RC vs. RC2, RC3, or RTW\r\n\r\n### Risk\r\n\r\nThis is generally a measure our how central the affected code is to adjacent\r\nscenarios and thus how likely your fix is to destabilize a broader area of code\r\n\r\n### Performance impact\r\n\r\n(with a brief justification for that assessment (e.g. \"Low perf impact because no extra allocations/no complexity changes\" vs. \"Low\")\r\n\r\n### Is this a regression from a previous update?\r\n\r\n### Root cause analysis\r\n\r\nHow did we miss it?  What tests are we adding to guard against it in the future?\r\n\r\n### How was the bug found?\r\n\r\n(E.g. customer reported it vs. ad hoc testing)\r\n\r\n### Test documentation updated?\r\n\r\nIf this is a new non-compiler feature or a significant improvement to an existing feature, update https://github.com/dotnet/roslyn/wiki/Manual-Testing once you know which release it is targeting.\r\n\r\n</details>\r\n"},{"Id":"7836508593","Type":"IssuesEvent","CreatedAt":"2018-06-17T20:22:37","Actor":"sharwell","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/27337","RelatedDescription":"Closed issue \"Don't offer use property refactoring on interface implementations\" (#27337) at dotnet/roslyn","RelatedBody":"Take the following code:\r\n```C#\r\nusing System.Collections;\r\nusing System.Collections.Generic;\r\n\r\nclass C1\r\n{\r\n    void M(C1 c1)\r\n    {\r\n        c1 = new C1() { [1] = { 1 } };\r\n    }\r\n    C2 this[int i] { get => null; }\r\n}\r\nclass C2 : IEnumerable<int>\r\n{\r\n    public IEnumerator<int> GetEnumerator() => throw new System.NotImplementedException();\r\n    IEnumerator IEnumerable.GetEnumerator() => throw new System.NotImplementedException();\r\n    public void Add(int i) { }\r\n}\r\n```\r\n\r\nThe \"Use Property Refactoring\" is offered on both overloads of GetEnumerator, and it has a lightbulb rather than a wrench. I could maybe understand the first one, since it's not an explicit interface implementation, but it definitely shouldn't be given lightbulb severity as that implies it's actually something we recommend, rather than just a tool. It makes absolutely no sense to offer it on the explicit interface implementation.\r\n\r\nVS 27729.1"},{"Id":"7836502580","Type":"IssuesEvent","CreatedAt":"2018-06-17T20:17:59","Actor":"sharwell","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/27823","RelatedDescription":"Closed issue \"Changing new Formatting Settings do not get applied until you modify an open file\" (#27823) at dotnet/roslyn","RelatedBody":"**Version Used**: \r\nVersion 15.8.0 Preview 3.0 [27812.3003.d15.8stg]\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. File -> New Console App (.NET Framework)\r\n2. Change Program.cs to:\r\n\r\n``` C#\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing System.Text;\r\nusing System.Threading.Tasks;\r\n\r\nclass Program\r\n{\r\n    static void Main(string[] args)\r\n    {\r\n        String foo = (String)args[0];\r\n        \r\n        Console.WriteLine(foo);\r\n    }\r\n}\r\n\r\n```\r\n3. Tools -> Options -> Uncheck all \"Format Document Settings (Experimental) and click OK\r\n4. Tools -> Options -> Check all \"Format Document Settings (Experimental) and click OK\r\n5. Choose Edit -> Advanced -> Format Document\r\n\r\n**Expected Behavior**:\r\n``` C#\r\nusing System;\r\n\r\ninternal class Program\r\n{\r\n    private static void Main(string[] args)\r\n    {\r\n        var foo = args[0];\r\n\r\n        Console.WriteLine(foo);\r\n    }\r\n}\r\n```\r\n\r\n**Actual Behavior**:\r\n\r\nIt remains the same and nothing happens. You have to edit the document before Format document will respect the settings"},{"Id":"7836471941","Type":"PullRequestEvent","CreatedAt":"2018-06-17T19:55:27","Actor":"sharwell","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/27941","RelatedDescription":"Opened pull request \"Update CSharpFullyQualifyCodeFixProvider to support unbound identifier diagnostics\" (#27941) at dotnet/roslyn","RelatedBody":"Fixes #26887\r\n\r\n<details><summary>Ask Mode template not completed</summary>\r\n\r\n<!-- This template is not always required. If you aren't sure about whether it's needed or want help filling out the sections,\r\nsubmit the pull request and then ask us for help. :) -->\r\n\r\n### Customer scenario\r\n\r\nWhat does the customer do to get into this situation, and why do we think this\r\nis common enough to address for this release.  (Granted, sometimes this will be\r\nobvious \"Open project, VS crashes\" but in general, I need to understand how\r\ncommon a scenario is)\r\n\r\n### Bugs this fixes\r\n\r\n(either VSO or GitHub links)\r\n\r\n### Workarounds, if any\r\n\r\nAlso, why we think they are insufficient for RC vs. RC2, RC3, or RTW\r\n\r\n### Risk\r\n\r\nThis is generally a measure our how central the affected code is to adjacent\r\nscenarios and thus how likely your fix is to destabilize a broader area of code\r\n\r\n### Performance impact\r\n\r\n(with a brief justification for that assessment (e.g. \"Low perf impact because no extra allocations/no complexity changes\" vs. \"Low\")\r\n\r\n### Is this a regression from a previous update?\r\n\r\n### Root cause analysis\r\n\r\nHow did we miss it?  What tests are we adding to guard against it in the future?\r\n\r\n### How was the bug found?\r\n\r\n(E.g. customer reported it vs. ad hoc testing)\r\n\r\n### Test documentation updated?\r\n\r\nIf this is a new non-compiler feature or a significant improvement to an existing feature, update https://github.com/dotnet/roslyn/wiki/Manual-Testing once you know which release it is targeting.\r\n\r\n</details>\r\n"},{"Id":"7836431122","Type":"PullRequestEvent","CreatedAt":"2018-06-17T19:24:18","Actor":"sharwell","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/27940","RelatedDescription":"Opened pull request \"Treat decompiled sources separately from metadata sources\" (#27940) at dotnet/roslyn","RelatedBody":"Fixes #25244\r\nFixes #25255\r\nFixes #25731\r\nFixes #26329\r\nFixes #27187\r\n\r\n<details><summary>Ask Mode template not completed</summary>\r\n\r\n<!-- This template is not always required. If you aren't sure about whether it's needed or want help filling out the sections,\r\nsubmit the pull request and then ask us for help. :) -->\r\n\r\n### Customer scenario\r\n\r\nWhat does the customer do to get into this situation, and why do we think this\r\nis common enough to address for this release.  (Granted, sometimes this will be\r\nobvious \"Open project, VS crashes\" but in general, I need to understand how\r\ncommon a scenario is)\r\n\r\n### Bugs this fixes\r\n\r\n(either VSO or GitHub links)\r\n\r\n### Workarounds, if any\r\n\r\nAlso, why we think they are insufficient for RC vs. RC2, RC3, or RTW\r\n\r\n### Risk\r\n\r\nThis is generally a measure our how central the affected code is to adjacent\r\nscenarios and thus how likely your fix is to destabilize a broader area of code\r\n\r\n### Performance impact\r\n\r\n(with a brief justification for that assessment (e.g. \"Low perf impact because no extra allocations/no complexity changes\" vs. \"Low\")\r\n\r\n### Is this a regression from a previous update?\r\n\r\n### Root cause analysis\r\n\r\nHow did we miss it?  What tests are we adding to guard against it in the future?\r\n\r\n### How was the bug found?\r\n\r\n(E.g. customer reported it vs. ad hoc testing)\r\n\r\n### Test documentation updated?\r\n\r\nIf this is a new non-compiler feature or a significant improvement to an existing feature, update https://github.com/dotnet/roslyn/wiki/Manual-Testing once you know which release it is targeting.\r\n\r\n</details>\r\n"},{"Id":"7836334403","Type":"PullRequestEvent","CreatedAt":"2018-06-17T18:10:56","Actor":"sharwell","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/27939","RelatedDescription":"Opened pull request \"Reduce the default severity of preferring conditional expressions\" (#27939) at dotnet/roslyn","RelatedBody":"Closes #27195\r\n\r\n<details><summary>Ask Mode template not completed</summary>\r\n\r\n<!-- This template is not always required. If you aren't sure about whether it's needed or want help filling out the sections,\r\nsubmit the pull request and then ask us for help. :) -->\r\n\r\n### Customer scenario\r\n\r\nWhat does the customer do to get into this situation, and why do we think this\r\nis common enough to address for this release.  (Granted, sometimes this will be\r\nobvious \"Open project, VS crashes\" but in general, I need to understand how\r\ncommon a scenario is)\r\n\r\n### Bugs this fixes\r\n\r\n(either VSO or GitHub links)\r\n\r\n### Workarounds, if any\r\n\r\nAlso, why we think they are insufficient for RC vs. RC2, RC3, or RTW\r\n\r\n### Risk\r\n\r\nThis is generally a measure our how central the affected code is to adjacent\r\nscenarios and thus how likely your fix is to destabilize a broader area of code\r\n\r\n### Performance impact\r\n\r\n(with a brief justification for that assessment (e.g. \"Low perf impact because no extra allocations/no complexity changes\" vs. \"Low\")\r\n\r\n### Is this a regression from a previous update?\r\n\r\n### Root cause analysis\r\n\r\nHow did we miss it?  What tests are we adding to guard against it in the future?\r\n\r\n### How was the bug found?\r\n\r\n(E.g. customer reported it vs. ad hoc testing)\r\n\r\n### Test documentation updated?\r\n\r\nIf this is a new non-compiler feature or a significant improvement to an existing feature, update https://github.com/dotnet/roslyn/wiki/Manual-Testing once you know which release it is targeting.\r\n\r\n</details>\r\n"}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"7836595653","Type":"PullRequestEvent","CreatedAt":"2018-06-17T21:27:59","Actor":"trylek","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5954","RelatedDescription":"Opened pull request \"WIP: Initial implementation of R2R section layout builder\" (#5954) at dotnet/corert","RelatedBody":"This change introduces a new class SectionBuilder which is supposed\r\nto accumulate compilation products to be put to the final PE file.\r\nIn accordance with my recent write-up it's based on the concept\r\nof 'blocks' that are used to build up the PE executable sections.\r\n\r\nA user of SectionBuilder starts out by planning out the sections;\r\nto simplify things the section builder internally treats the sections\r\nas zero-based integers in the order they were added to the section builder.\r\nTheir indices don't necessarily need to correspond to PE section indices\r\nas the section indices might get shifted due to sections being merged\r\nwith the input MSIL PE file.\r\n\r\nOnce the user of the SectionBuilder class constructs the sections,\r\nthey can start adding blocks. Each block is an atomic piece of the\r\nfuture output PE with alignment constraints and possibly relocations.\r\nTo simplify future tuning of this prototype I have created an abstract\r\nBlockHandle struct to minimize churn when changing the underlying key type.\r\n\r\nBased on my recent discussion with Vitek, I based this change on a\r\ntwo-level hierarchy of \"sections\" and \"subsections\". Sections correspond\r\nto PE sections and are externally visible in the PE file; subsections\r\nare internal building blocks within the PE sections usable for stratifying\r\nsection content e.g. w.r.t. hot vs. cold code.\r\n\r\nSectionBuilder is also capable of defining and producing export symbols.\r\nAs we don't yet have the complete R2R table machinery working, I hoped\r\nto be able to demonstrate the builder by exporting a native symbol I would\r\nmanually generate as a bit of code like \"mov eax, offset of a string, ret\"\r\nwhere the string would be a helloworld-like thing I would display in a\r\nnative caller of the DLL.\r\n\r\nI have all of the machinery working but for some reason the Windows loader\r\nrefuses to apply the file-level relocations. I have verified that the same\r\nthing happens (the one file-level relocation doesn't get applied) when\r\nI LoadLibrary the primary MSIL PE file from the native host. I guess that\r\nperhaps some header flags are used to say whether the relocations should\r\nbe applied or not.\r\n\r\nI'm actually not clear on how the managed DLL's can work at\r\nall as they seem to get loaded at arbitrary addresses so I guess they\r\nneed relocating all the time. For now I'm putting this off as a likely\r\nconsequence of my misunderstanding of some of the underlying concepts\r\nas I believe the output PE file content is set up all right\r\naccording to dumpbin.\r\n\r\nI have also created a new source file \"Relocator.cs\" I mostly cloned\r\nfrom a bit of code I found in the CoreRT dependency analyzer; I suspect\r\nit was most likely incomplete but it let me implement an initial\r\nset of the most common relocators.\r\n\r\nThere's an apparent code duplication with the dependency analyzer currently,\r\nit might be nice to find a suitable location for some \"relocation utils\"\r\nafter agreeing on a final version of the code.\r\n\r\nIn the R2RPEBuilder, I addressed Michal's PR feedback from\r\nSimon's initial change - I came to the conclusion that in this particular\r\ncase it might be cleaner to add a completely new helper struct. I converted\r\nthe remaining Tuples to named tuples per Michal's suggestion and I updated\r\nthe project file accordingly.\r\n\r\nI have also had to introduce a new parameter to the R2RPEBuilder constructor\r\n- directoryUpdater used to potentially adjust the PE file directories.\r\nThis is used in the SectionBuilder to inject the export directory table\r\nand to adjust the relocation table (with a grain of salt - as I said above,\r\nthe file-level relocations still don't fully work).\r\n\r\nFor now I only have one small test case and it doesn't even pass due to\r\nthe missing relocation - in fact I can't even step through the code at the DLL\r\nlocation as the debugger ends up AV-ing; weirdly enough, the\r\nPE-level information like section headers seems to be perfectly in order.\r\nI still believe this might be a useful step towards an initial R2R demo.\r\n\r\nThanks\r\n\r\nTomas"},{"Id":"7836000346","Type":"PullRequestEvent","CreatedAt":"2018-06-17T14:13:35","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5948","RelatedDescription":"Merged pull request \"Merge nmirror to master\" (#5948) at dotnet/corert","RelatedBody":""},{"Id":"7835999640","Type":"PullRequestEvent","CreatedAt":"2018-06-17T14:13:04","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5953","RelatedDescription":"Merged pull request \"Update CoreFX dependencies\" (#5953) at dotnet/corert","RelatedBody":""},{"Id":"7835578752","Type":"PullRequestEvent","CreatedAt":"2018-06-17T08:14:40","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5953","RelatedDescription":"Opened pull request \"Update CoreFX dependencies\" (#5953) at dotnet/corert","RelatedBody":""},{"Id":"7835270602","Type":"PullRequestEvent","CreatedAt":"2018-06-17T02:27:50","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5952","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#5952) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7835243837","Type":"PullRequestEvent","CreatedAt":"2018-06-17T01:54:40","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5952","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#5952) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7834127477","Type":"IssuesEvent","CreatedAt":"2018-06-16T09:09:49","Actor":"FoggyFinder","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/issues/5951","RelatedDescription":"Opened issue \"$BlockedFromReflection instead of name of type\" (#5951) at dotnet/corert","RelatedBody":"When I try to do the follow (name for type of some type):\r\n\r\n```csharp\r\nvar tp = typeof(Int32).GetType();\r\nConsole.WriteLine(\"Name = {0}\", tp.Name); \r\n```\r\n\r\nI get the next result:\r\n\r\n```\r\nName = $BlockedFromReflection_0_0dc86273\r\n```\r\n\r\nI guess it has to be `RuntimeType` (at least this result I get when run via `dotnet run`)"}],"ResultType":"GitHubEvent"},"SDK":{"Events":[{"Id":"7833403799","Type":"IssuesEvent","CreatedAt":"2018-06-15T22:59:09","Actor":"kygagner","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/issues/2340","RelatedDescription":"Opened issue \"Modification of project file properties / items in targets\" (#2340) at dotnet/sdk","RelatedBody":"Prior to the Microsoft.NET.Sdk props/targets I was not aware of any properties or items typically specified in a project file which were subject to change by build targets. Now that is not the case.\r\n\r\nExample:\r\nThe IncludeTransitiveProjectReferences target adds elements to the ProjectReference item.\r\n\r\nConsequences:\r\n\r\n- The '[Common MSBuild Project Properties](https://msdn.microsoft.com/en-us/library/bb629394.aspx)', various source file and reference items, as well as information in '[MSBuild Reserved and Well-Known Properties](https://msdn.microsoft.com/en-us/library/ms164309.aspx)' are a kind of API surface. They are a source of reliable information about the project being built. If these are changed during property evaluation or in a build target, then there is nothing secure left to base a build process off of.\r\n- Changing such properties and items during the execution of a build target is more impactful than doing so during property evaluation because the unknown effect of the target is conditional upon its execution and the order of its execution with respect to the target it impacts. This is the case I ran in to when I noticed a difference in my build script behavior during Rebuild vs. Build (IncludeTransitiveProjectReferences runs before my targets if the Clean target executes first).\r\n- Worse still, if the BeforeTargets and AfterTargets attributes are used, an issue with order dependency may be further exacerbated by nondeterminism.\r\n\r\nMSBuild is an extensible tool. Customers depend not just on Microsoft's scripts to drive their build, but also to provide extension points for their own build processes. A claim of backward compatibility for these extension points (e.g. the BuildDependsOn and CleanDependsOn properties) is not made, and this is tolerable. The point of pain here is that hidden implementation detail now causes uncertainty about information written in the project file."},{"Id":"7833271390","Type":"PullRequestEvent","CreatedAt":"2018-06-15T22:08:12","Actor":"wli3","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/2339","RelatedDescription":"Opened pull request \"Packtool supress all dependency via nuget\" (#2339) at dotnet/sdk","RelatedBody":"fix https://github.com/dotnet/cli/issues/9109\r\n\r\nUse new nguet feature SuppressDependenciesOnPacking to avoid set all as private asset"},{"Id":"7833261580","Type":"IssuesEvent","CreatedAt":"2018-06-15T22:04:55","Actor":"jceddy","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/issues/2338","RelatedDescription":"Opened issue \"Since installing SDK 2.1.3, getting GenerateDepsFile error\" (#2338) at dotnet/sdk","RelatedBody":"Since I installed the 2.1.3 SDK, I have started getting this error when building a solution that previously built correctly:\r\n\r\n> Severity\tCode\tDescription\tProject\tFile\tLine\tSuppression State\r\n> Error\tMSB4018\tThe \"GenerateDepsFile\" task failed unexpectedly.\r\n> System.ArgumentException: Can not add property Company.Product.Server.Core/3.1.2.0 to Newtonsoft.Json.Linq.JObject. Property with the same name already exists on object.\r\n>    at Newtonsoft.Json.Linq.JObject.ValidateToken(JToken o, JToken existing)\r\n>    at Newtonsoft.Json.Linq.JContainer.InsertItem(Int32 index, JToken item, Boolean skipParentCheck)\r\n>    at Newtonsoft.Json.Linq.JObject.InsertItem(Int32 index, JToken item, Boolean skipParentCheck)\r\n>    at Newtonsoft.Json.Linq.JContainer.AddInternal(Int32 index, Object content, Boolean skipParentCheck)\r\n>    at Newtonsoft.Json.Linq.JContainer.AddInternal(Int32 index, Object content, Boolean skipParentCheck)\r\n>    at Newtonsoft.Json.Linq.JContainer.Add(Object content)\r\n>    at Newtonsoft.Json.Linq.JObject..ctor(Object content)\r\n>    at Microsoft.Extensions.DependencyModel.DependencyContextWriter.WriteTarget(IReadOnlyList`1 libraries)\r\n>    at Microsoft.Extensions.DependencyModel.DependencyContextWriter.WriteTargets(DependencyContext context)\r\n>    at Microsoft.Extensions.DependencyModel.DependencyContextWriter.Write(DependencyContext context)\r\n>    at Microsoft.Extensions.DependencyModel.DependencyContextWriter.Write(DependencyContext context, Stream stream)\r\n>    at Microsoft.NET.Build.Tasks.GenerateDepsFile.ExecuteCore()\r\n>    at Microsoft.NET.Build.Tasks.TaskBase.Execute()\r\n>    at Microsoft.Build.BackEnd.TaskExecutionHost.Microsoft.Build.BackEnd.ITaskExecutionHost.Execute()\r\n>    at Microsoft.Build.BackEnd.TaskBuilder.<ExecuteInstantiatedTask>d__26.MoveNext()\tOATI.webVision.Server.Core\tC:\\Program Files\\dotnet\\sdk\\2.1.300\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Sdk.targets\t128\t\r\n\r\nI've looked around the web and haven't been able to find any kind of solution. Is this a known issue?"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1007054749512814592","CreatedAt":"2018-06-14T00:18:57+00:00","UserScreenname":"dotnet","Text":"Using .NET and Docker Together – DockerCon 2018 Update https://t.co/ZYju7lEGqz","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":145,"FavoriteCount":77,"RawContent":null},{"Id":"1007012327353454594","CreatedAt":"2018-06-13T21:30:22+00:00","UserScreenname":"dotnet","Text":"Join @csharpfritz tomorrow to learn how to use @AppInsights with your #ASP.NET Core project. https://t.co/pSofjdde2Y","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":21,"FavoriteCount":9,"RawContent":null},{"Id":"1005426264029753345","CreatedAt":"2018-06-09T12:27:55+00:00","UserScreenname":"dotnet","Text":"Tune in today at 10a ET / 7a PT / 14:00 UTC / 8p IST and learn about global tools along with Jeff. https://t.co/hqxNjfqPMq","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":12,"FavoriteCount":5,"RawContent":null},{"Id":"1005082168442449920","CreatedAt":"2018-06-08T13:40:37+00:00","UserScreenname":"dotnet","Text":"Tune in with Jeff as he works through the tutorials to learn F#.  Ask questions, and learn along with him https://t.co/rntL0szWYX","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":34,"FavoriteCount":16,"RawContent":null}]}},"RunOn":"2018-06-18T05:30:36.0810954Z","RunDurationInMilliseconds":9028}