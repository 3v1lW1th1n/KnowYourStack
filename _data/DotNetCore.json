{"Data":{"Blog":{"FeedItems":[{"Title":".NET Framework 4.7.2 Developer Pack Early Access build 3056 is available!","PublishedOn":"2018-03-08T23:22:13+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, we are happy to share an Early Access build with the .NET Framework 4.7.2 Developer Pack. The .NET Framework 4.7.2 Developer Pack lets developers build applications that target the .NET...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/03/08/net-framework-4-7-2-developer-pack-early-access-build-3056-is-available/","RawContent":null},{"Title":"F# language and tools update for Visual Studio 2017 version 15.6","PublishedOn":"2018-03-06T18:28:06+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"With the release of Visual Studio 2017 version 15.6, we’re excited to share updates to the F# language and core library, F# tooling in Visual Studio, and infrastructure updates that concern OSS...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/03/06/f-language-and-tools-update-for-visual-studio-2017-version-15-6/","RawContent":null},{"Title":"Announcing Entity Framework Core 2.1 Preview 1","PublishedOn":"2018-02-27T18:11:29+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"Today we are releasing the first preview of EF Core 2.1, alongside .NET Core 2.1 Preview 1 and ASP.NET Core 2.1 Preview 1. The new bits are available in NuGet as part of the individual packages, and...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/27/announcing-entity-framework-core-2-1-preview-1/","RawContent":null},{"Title":"Announcing .NET Core 2.1 Preview 1","PublishedOn":"2018-02-27T18:08:23+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Today, we are announcing .NET Core 2.1 Preview 1. It is the first public release of .NET Core 2.1. We have great improvements that we want to share and that we would love to get your feedback on,...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/27/announcing-net-core-2-1-preview-1/","RawContent":null},{"Title":"Calling All Desktop Developers: How do you interact with data?","PublishedOn":"2018-02-27T17:00:36+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Connecting to databases and services is an important part of desktop application development for many of our customers. Visual Studio provides a variety of tools and technologies that can help you...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/27/calling-all-desktop-developers-how-do-you-interact-with-data/","RawContent":null},{"Title":"Azure Blob Storage as a Network Drive","PublishedOn":"2018-02-26T16:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Many applications make use of a network drive to backup and store files. When I was in university I found myself constantly coding for fun, and one example took the form of a network share for my...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/26/azure-blob-storage-as-a-network-drive/","RawContent":null},{"Title":".NET Framework February 2018 Security and Quality Rollup","PublishedOn":"2018-02-14T04:27:17+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, we are releasing the February 2018 Security and Quality Rollup. Security No new security fixes. See .NET Framework January 2018 Security and Quality Rollup for the latest security updates....","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/13/net-framework-february-2018-security-and-quality-rollup/","RawContent":null},{"Title":"Machine Learning in .NET – Help us build the right experience!","PublishedOn":"2018-02-13T17:17:58+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"In the past few years, Machine Learning (ML) and Artificial Intelligence (AI) have paved the road for building smarter applications through advancements in speech recognition, computer vision,...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/13/machine-learning-in-net-help-us-build-the-right-experience/","RawContent":null},{"Title":"Announcing .NET Framework 4.7.2 Early Access build 3052!","PublishedOn":"2018-02-05T21:55:13+00:00","CommentsCount":11,"FacebookCount":0,"Summary":"Today, we are happy to share the .NET Framework 4.7.2 Early Access build 3052 for your feedback. .NET Framework 4.7.2 is the next version of the .NET Framework. It is currently feature-complete and in...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/05/announcing-net-framework-4-7-2-early-access-build-3052/","RawContent":null},{"Title":"Entity Framework Core 2.1 Roadmap","PublishedOn":"2018-02-02T18:39:25+00:00","CommentsCount":8,"FacebookCount":0,"Summary":"As mentioned in the announcement of the .NET Core 2.1 roadmap earlier today, at this point we know the overall shape of our next release and we have decided on a general schedule for it. As we...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/02/entity-framework-core-2-1-roadmap/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"7192252734","Type":"PullRequestEvent","CreatedAt":"2018-02-03T01:30:47","Actor":"karann-msft","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/98","RelatedDescription":"Opened pull request \"Updates to reflect the latest information\" (#98) at dotnet/home","RelatedBody":""},{"Id":"7187459205","Type":"PullRequestEvent","CreatedAt":"2018-02-02T05:26:03","Actor":"mairaw","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/97","RelatedDescription":"Opened pull request \"update CLA PDF link\" (#97) at dotnet/home","RelatedBody":""},{"Id":"7102763357","Type":"PullRequestEvent","CreatedAt":"2018-01-16T00:17:04","Actor":"galatrash-at-dnn","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/96","RelatedDescription":"Opened pull request \"Adding DNN Platform.\" (#96) at dotnet/home","RelatedBody":""},{"Id":"7097053889","Type":"PullRequestEvent","CreatedAt":"2018-01-14T15:15:00","Actor":"bfistein","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/95","RelatedDescription":"Opened pull request \"Fix broken logo URL\" (#95) at dotnet/home","RelatedBody":""},{"Id":"7065382954","Type":"PullRequestEvent","CreatedAt":"2018-01-06T19:21:47","Actor":"ctaggart","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/94","RelatedDescription":"Opened pull request \"add SourceLink\" (#94) at dotnet/home","RelatedBody":"Adding SourceLink to the project list as per the checklist https://github.com/ctaggart/SourceLink/issues/138"},{"Id":"7044237283","Type":"PullRequestEvent","CreatedAt":"2017-12-31T20:25:44","Actor":"onovotny","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/93","RelatedDescription":"Opened pull request \"Add Humanizer\" (#93) at dotnet/home","RelatedBody":"Onboarding Humanizer: https://github.com/Humanizr/Humanizer/issues/682"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"7373349220","Type":"IssuesEvent","CreatedAt":"2018-03-13T17:01:53","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/62","RelatedDescription":"Opened issue \"Microsoft Security Advisory CVE-2018-0875: Hash Collison can cause Denial of Service\" (#62) at dotnet/announcements","RelatedBody":"# Microsoft Security Advisory CVE-2018-0875: Hash Collison can cause Denial of Service\r\n## Executive Summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in the public versions of .NET Core 1.0 and 2.0 (including other minor and patch releases).\r\nThis advisory also provides guidance on what developers can do to update their applications correctly.\r\n\r\nMicrosoft is aware of a security vulnerability in the public versions of .NET Core where a malicious file or web request could cause a denial of service (DoS) attack.\r\n\r\nSystem administrators are advised to update their .NET Core runtimes to versions 1.0.10, 1.1.7 or 2.0.6. Developers are advised to update their .NET Core SDK to versions 1.1.8 or 2.1.101.\r\n\r\n## Discussion\r\n\r\nUse *TBD* for discussion of this advisory.\r\n\r\n### Mitigation Factors\r\nNone\r\n\r\n### Affected Software\r\n\r\nAny application running against .NET Core 1.0.9 or lower versions, 1.1.6 or lower minor versions or 2.0.5 or lower minor versions is affected. \r\n\r\n### Advisory FAQ\r\n#### How do I know if I am affected?\r\nAny application running against .NET Core 1.0.9 or lower versions, 1.1.6 or lower minor versions or 2.0.5 or lower minor versions is affected. \r\n\r\nA complete list of runtimes can be discovered by performing a directory listing in the install root directories. The default root directories are listed in the following table:\r\n\r\n| Operating System | Location |\r\n|------------------|----------|\r\n| Windows\t| `C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\` |\r\n| macOS\t| `/usr/local/share/dotnet/shared/Microsoft.NETCore.App/` |\r\n| Supported Linux platforms\t| `/usr/share/dotnet/shared/Microsoft.NETCore.App/` |\r\n\r\nEach runtime version is installed in its own directory, where the directory name is the version number. If you don't have a directory for 1.0.10, 1.1.7 and 2.0.6, then any applications targeting the respective major/minor versions, 1.0 or 1.1 or 2.0 of .NET Core are vulnerable.\r\n\r\nAdditionally, if you've deployed self-contained applications targeting any of the impacted versions, these applications are also vulnerable and must be recompiled and redeployed.\r\n\r\n#### How do I fix my affected application?\r\n\r\nApplications can be fixed by installing the latest .NET Core runtimes or SDKs. Typically, application servers only have runtime packages installed and developer machines have the SDKs installed. \r\nInstallers for the runtimes can be downloaded from the [Runtime and SDK download archive](https://github.com/dotnet/core/blob/master/release-notes/download-archive.md). \r\n.NET Core 1.1.8 SDK installs both versions 1.0.10 and 1.1.7 of the .NET Core runtime.\r\n\r\nIf you've built a self-contained application, you must install the new runtime and SDK, recompile your application and redeploy.\r\n\r\n#### What if the update breaks my application?\r\nAn application can be pinned to a previous version of the runtime by editing the `application.runtime.config` file for that application. Set the framework version to the desired version and the `rollForward` property to false. These settings should be treated as a temporary measure and the application updated to work with the patched versions of the framework.\r\n\r\nSince the `application.runtime.config` file is an optional file, you may need to create one for each application and add it alongside the executable.\r\n\r\n### Acknowledgments\r\n[Ben Adams](https://twitter.com/ben_a_adams) of [Illyriad Games](https://www.illyriad.co.uk/)\r\n\r\n### External Links\r\n[CVE-2018-0875](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-0875)\r\n\r\n### Revisions\r\n\r\nV1.0 (Mar 13, 2018): Advisory published.\r\n\r\n_Version 1.0_\r\n_Last Updated 2018-03-13_\r\n"},{"Id":"7301596554","Type":"IssuesEvent","CreatedAt":"2018-02-27T06:10:33","Actor":"mairaw","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/61","RelatedDescription":"Opened issue \"New offline books released for Visual Studio 2017\" (#61) at dotnet/announcements","RelatedBody":"# New offline books released for Visual Studio 2017\r\n\r\nEarlier this month, we released an update to Offline Books for the Visual Studio 2017 Help Viewer.\r\n\r\nThis release includes new .NET books, including .NET Core Guide, .NET Guide, .NET Framework Guide and the .NET API Reference. It also includes the latest content for Visual Studio 2017 version 15.5, the latest updates to Visual Basic, C# (7.1 and 7.2), F#, ASP.NET Core, NuGet, SQL Server, and the Universal Windows Platform.\r\n\r\nThe .NET Guide, .NET Framework Guide and .NET API Reference books together are a replacement for the .NET Framework 4.6 and 4.5 book, which can be removed. Just be aware that the new .NET API Reference book currently displays the API syntax block for C# only, but examples are shown in other languages, just like the experience you currently have on docs.microsoft.com.If you need to see the API syntax for Visual Basic, C++/CLI or F#, then you should keep the old book until the new reference book is updated again in a few weeks. Once you remove the .NET Framework 4.6 and 4.5 book, you cannot reinstall it.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts and have any discussions with us at:\r\n\r\n- https://github.com/dotnet/docs/issues/4502\r\n\r\n## Add new content\r\n\r\nYou will see these new books when you have Help Viewer installed and choose **Help** > **Add and Remove Content** from the Visual Studio 2017 main menu. If you don't see this menu item, then [open the Visual Studio Installer](https://docs.microsoft.com/visualstudio/install/modify-visual-studio), click the **More** dropdown and choose **Modify**. When the component list appears, choose **Individual Components** at the top, then check **Help Viewer**.\r\n\r\n![help_viewer_component](https://user-images.githubusercontent.com/12971179/36713111-c9d49a7c-1b40-11e8-918a-e7e3619669a2.png)\r\n\r\n## Help Viewer Installation\r\n\r\nTo start the installation, select the **Modify** button in the lower right corner of the Installer window.\r\n\r\nTo update individual books whose status is \"Updates available\", remove the book and then click **Add** to get the new version. To update all your books at once, select the link in the lower right corner of the **Add and Remove Content** window:\r\n\r\n![offline-books](https://user-images.githubusercontent.com/12971179/36713028-75b944f6-1b40-11e8-91c4-4830355f815e.png)"},{"Id":"7300537622","Type":"IssuesEvent","CreatedAt":"2018-02-27T00:12:10","Actor":"eerhardt","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/60","RelatedDescription":"Opened issue \"System.Runtime.Intrinsics in .NET Core 2.1\" (#60) at dotnet/announcements","RelatedBody":"# System.Runtime.Intrinsics in .NET Core 2.1\r\n\r\n.NET Core 2.1 has been adding platform intrinsic APIs to support directly calling processor specific instructions, such as Intel’s x86 SIMD instructions.  See the [initial platform intrinsics design](https://github.com/dotnet/designs/blob/master/accepted/platform-intrinsics.md) for more information.\r\n\r\nWe have decided that it makes the most sense for this intrinsics feature to ship in a “preview” status in the .NET Core 2.1 RTM timeframe.  This means that the runtime support we are implementing will be included, but the assembly exposing the intrinsics will only be available to projects via explicit reference to a “preview-only” package.  These APIs won’t be included in the official .NET Core 2.1 packages.\r\n\r\nGiven our limited time and resources, recent changes in the approach we take to expose the intrinsics, and API changes prompted by design feedback from the community, we don’t believe there is enough time to settle these APIs for 2.1. We plan to follow the pattern of other recent features like Span<T> and Memory<T> that first shipped in preview before formally joining the supported API surface.  Not only would we expect the next version of .NET Core to support more intrinsics than could be supported in 2.1, but we expect to have real usage examples in CoreFX and higher level components as well.  These real world examples, as well as feedback from customers who opt in to the preview, should give us the confidence we need to officially support the APIs going forward.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\nhttps://github.com/dotnet/corefx/issues/27486\r\n\r\n## Details\r\n\r\nIn the coming days, we plan on removing System.Runtime.Intrinsics.dll from the Microsoft.NETCore.App package.  This means any libraries/applications that are using these APIs will no longer compile by default, and will not run on new builds of .NET Core 2.1.\r\n\r\nAt the same time, we will start producing a new System.Runtime.Intrinsics.Experimental NuGet package.  In order to continue using these APIs on .NET Core 2.1, a project will need to add a reference to this new package.\r\n\r\nAs its name implies, this package is experimental and should only be used for preview purposes.  It isn’t expected to be used in production scenarios.  Future version of .NET Core (after 2.1) will be allowed to break this package. This enables us respond to future feedback that requires the APIs to be modified.\r\n\r\nIn the future, when we are confident we have the intrinsic APIs right, we will stop producing the System.Runtime.Intrinsics.Experimental package. The platform intrinsics APIs will then be added back to Microsoft.NETCore.App and will be officially supported."},{"Id":"7273056222","Type":"IssuesEvent","CreatedAt":"2018-02-21T02:28:03","Actor":"KathleenDollard","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/57","RelatedDescription":"Opened issue \"Manually Uninstall .NET Core SDK 2.2.0-Preview Nightly Builds\" (#57) at dotnet/announcements","RelatedBody":"# Manually Uninstall .NET Core SDK 2.2.0-Preview Nightly Builds\r\n\r\n[A change in the version number strategy for .NET Core SDK](https://github.com/dotnet/designs/pull/29) resulted in some nightly builds having a higher version number. This higher version number will block the installation of the correct .NET Core SDK.\r\n\r\nIf you have installed nightly builds of the .NET Core SDK that start with version number that begin with `2.2.0-preview1`, you must manually uninstall these preview builds before later versions of the SDK with version numbers like 2.1.xxx will be available. This may have occurred by installing nightly builds of the .NET Core SDK or nightly builds of Visual Studio 15.5 Preview. \r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n[dotnet/cli #8652](https://github.com/dotnet/cli/issues/8652)\r\n\r\n## Details\r\n\r\n[We changed the version number strategy for .NET Core SDK](https://github.com/dotnet/designs/pull/29) as development was ongoing. Because of this, version numbers on the old scheme appeared in nightly builds. Unfortunately, these numbers are higher than the version numbers in the new scheme. All of the newer SDKs for .NET Core 2.1 will be ignored due to this higher version number; this includes newer nightly builds, public previews and eventual releases.\r\n\r\nThese older version numbers are similar to the following, with the last several different values in the last six digits:\r\n\r\n```\r\n2.2.0-preview1-008000\r\n```\r\n\r\nSince the newer versions are in the form:\r\n\r\n```\r\n2.1.300-preview1-008000\r\n```\r\n\r\n## Call to Action\r\n\r\nIf you have installed nightly builds. Please uninstall any .NET SDK versions that start with 2.2.0-preview1."},{"Id":"7253280422","Type":"IssuesEvent","CreatedAt":"2018-02-16T04:14:06","Actor":"terrajobst","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/56","RelatedDescription":"Closed issue \"Can you help with this issue?\" (#56) at dotnet/announcements","RelatedBody":"https://stackoverflow.com/questions/48819198/weird-behavior-of-httpclienthandler-sslprotocol-property-in-net-framework-4-7-1\r\n"},{"Id":"7253090788","Type":"IssuesEvent","CreatedAt":"2018-02-16T02:41:24","Actor":"rudeGit","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/56","RelatedDescription":"Opened issue \"Can you help with this issue?\" (#56) at dotnet/announcements","RelatedBody":"https://stackoverflow.com/questions/48819198/weird-behavior-of-httpclienthandler-sslprotocol-property-in-net-framework-4-7-1\r\n"},{"Id":"7227221771","Type":"IssuesEvent","CreatedAt":"2018-02-10T18:30:42","Actor":"kasper3","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/55","RelatedDescription":"Closed issue \"Needs clarity on open / close source nature of product being announced\" (#55) at dotnet/announcements","RelatedBody":"On first page of this repository, it reads:\r\n\r\n> Subscribe to this repo to be notified of Announcements and changes in .NET Core.\r\n\r\nDoes that mean all announcements are related to .NET Core and all products being announced are are open sourced?\r\n\r\nIf there are announcements about the propitiatory or closed-source products, the products whose sources <b>in full*</b> are not accessible by public, should be marked as such either using a label (https://github.com/dotnet/announcements/labels), or clearly stated in text.\r\n\r\n#### * Source code including the build script that generates the package end user downloads from nuget or myget feeds\r\n\r\nOne example is https://github.com/dotnet/announcements/issues/30, where it is presented to user as if the product ILLink is in open, but the package https://dotnet.myget.org/feed/dotnet-core/package/nuget/Illink.Tasks is produced by script which are nowhere to b found in open. Read more at https://github.com/dotnet/core/issues/915#issuecomment-364645429"},{"Id":"7226630380","Type":"IssuesEvent","CreatedAt":"2018-02-10T11:59:43","Actor":"kasper3","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/55","RelatedDescription":"Opened issue \"Needs clarity on open / close source nature of product being announced\" (#55) at dotnet/announcements","RelatedBody":"On first page of this repository, it reads:\r\n\r\n> Subscribe to this repo to be notified of Announcements and changes in .NET Core.\r\n\r\nDoes that mean all announcements are related to .NET Core and all products being announced are are open sourced?\r\n\r\nIf there are announcements about the propitiatory or closed-source products, the products whose sources <b>in full*</b> are not accessible by public, should be marked as such either using a label (https://github.com/dotnet/announcements/labels), or clearly stated in text.\r\n\r\n#### * Source code including the build script that generates the package end user downloads from nuget or myget feeds\r\n\r\nOne example is https://github.com/dotnet/announcements/issues/30, where it is presented to user as if the product ILLink is in open, but the package https://dotnet.myget.org/feed/dotnet-core/package/nuget/Illink.Tasks is produced by script which are nowhere to b found in open. Read more at https://github.com/dotnet/core/issues/915#issuecomment-364645429"}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"7375672907","Type":"PullRequestEvent","CreatedAt":"2018-03-14T01:52:07","Actor":"tarekgh","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/16924","RelatedDescription":"Merged pull request \"Fix GetHashCode with invariant mode\" (#16924) at dotnet/coreclr","RelatedBody":""},{"Id":"7375624558","Type":"IssuesEvent","CreatedAt":"2018-03-14T01:35:02","Actor":"noahfalk","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/11580","RelatedDescription":"Closed issue \"'Inspecting the state of an object in the debuggee of type System.Type' error for non-reflection related type\" (#11580) at dotnet/coreclr","RelatedBody":"I was debugging a C# project of my own recently. I noticed that variables of type X were being stringified to the fully qualified name of X in the debugger, e.g. `{PolynomialReducer.CompactR.Polynomial}`, even though I had overriden `ToString()` for X. Forcing evaluation via putting `[DebuggerDisplay(\"{ToString()}\")]` on top of X gave this error:\r\n\r\n<img width=\"382\" alt=\"isoot_systemtype_nsitc\" src=\"https://cloud.githubusercontent.com/assets/9159214/26019608/98985eb6-3744-11e7-9c64-2e0b4daeb7d8.PNG\">\r\n\r\nThe full error message was `Inspecting the state of an object in the debuggee of type System.Type is not supported in this context.` I thought it was strange because the type is not remotely related to reflection, it is a custom type that lives in my library. Why does this happen?\r\n\r\n**Additional info:** Trying to call `ToString()` on the variables via the Immediate Window also gives this error message.\r\n\r\n**Related issue:** https://github.com/dotnet/coreclr/issues/4734"}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"7376029244","Type":"PullRequestEvent","CreatedAt":"2018-03-14T04:01:01","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/8786","RelatedDescription":"Merged pull request \"Merge release/2.1.1xx into release/2.1.2xx\" (#8786) at dotnet/cli","RelatedBody":""},{"Id":"7375935697","Type":"PullRequestEvent","CreatedAt":"2018-03-14T03:25:24","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/8786","RelatedDescription":"Opened pull request \"Merge release/2.1.1xx into release/2.1.2xx\" (#8786) at dotnet/cli","RelatedBody":""},{"Id":"7375910260","Type":"PullRequestEvent","CreatedAt":"2018-03-14T03:16:11","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/8785","RelatedDescription":"Merged pull request \"Updating the SDK version to 2.1.100-preview-62714-01\" (#8785) at dotnet/cli","RelatedBody":"\r\n"},{"Id":"7375909525","Type":"PullRequestEvent","CreatedAt":"2018-03-14T03:15:55","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/8784","RelatedDescription":"Merged pull request \"Updating the branding of the CLI to 2.1.102.\" (#8784) at dotnet/cli","RelatedBody":""},{"Id":"7375558440","Type":"PullRequestEvent","CreatedAt":"2018-03-14T01:11:24","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/8770","RelatedDescription":"Merged pull request \"Re-activate templating test.\" (#8770) at dotnet/cli","RelatedBody":"Fixes https://github.com/dotnet/cli/issues/7574"},{"Id":"7375558431","Type":"IssuesEvent","CreatedAt":"2018-03-14T01:11:24","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/7574","RelatedDescription":"Closed issue \"Netstandard2.0 restore bug\" (#7574) at dotnet/cli","RelatedBody":"The problem I'm seeing from local cli build test results (and from manual testing) is that I can create & restore the relevant templates, but the restore seems incorrect. The F# classlib template won't build, the error being:\r\n```c:\\temp\\Creation\\scratch\\F#_Classlib\\unknown(1,1): error FS0078: Unable to find the file 'netstandard.dll' in any of C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework� c:\\temp\\Creation\\scratch\\F#_Classlib� C:\\Program Files\\dotnet\\sdk\\2.1.0-preview1-007099\\FSharp\\ [c:\\temp\\Creation\\scratch\\F#_Classlib\\F#_Classlib.fsproj]```\r\n... which is strange, since it apparently restored correctly. This is related to the test: GivenThatIWantANewAppWithSpecifiedType.TemplateRestoresAndBuildsWithoutWarnings(language: \"F#\", projectType: \"classlib\", useNuGetConfigForAspNet: False, skipSpaWebpackSteps: False)\r\n\r\nBut the second test I left un-enabled uses the C# classlib template, which does build. The problem with that test is something different, but the underlying cause may be the same. For projects targeting netstandard2.0, when I run a command like:\r\n```dotnet restore --configfile c:\\GitHub\\cli\\NuGet.Config --packages packages```\r\nthe restore process reports success, but it doesn't create the requested packages directory. This is related to the test: \r\n```GivenThatIWantANewApp.NewProjectRestoresCorrectPackageVersion(type: \"classlib\", propertyName: \"NetStandardImplicitPackageVersion\", packageName: \"netstandard.library\")```\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n.NET Command Line Tools (2.1.0-preview1-007099)\r\n\r\nProduct Information:\r\n Version:            2.1.0-preview1-007099\r\n Commit SHA-1 hash:  735188e023\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.15063\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.0-preview1-007099\\\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.1.0-preview2-25616-02\r\n  Build    : 8aa34a95bad481e1b5e4c8286e5cb2d7cb6ed943\r\n\r\n\r\n\r\n\r\n\r\n\r\n"},{"Id":"7375555052","Type":"PullRequestEvent","CreatedAt":"2018-03-14T01:10:11","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/8783","RelatedDescription":"Merged pull request \"Update Roslyn to 2.7.0-beta3-62707-11\" (#8783) at dotnet/cli","RelatedBody":""},{"Id":"7375554430","Type":"PullRequestEvent","CreatedAt":"2018-03-14T01:09:57","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/8785","RelatedDescription":"Opened pull request \"Updating the SDK version to 2.1.100-preview-62714-01\" (#8785) at dotnet/cli","RelatedBody":"\r\n"},{"Id":"7375544891","Type":"PullRequestEvent","CreatedAt":"2018-03-14T01:06:24","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/8784","RelatedDescription":"Opened pull request \"Updating the branding of the CLI to 2.1.102.\" (#8784) at dotnet/cli","RelatedBody":""}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"7374035644","Type":"IssuesEvent","CreatedAt":"2018-03-13T19:01:23","Actor":"Erikole21","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/677","RelatedDescription":"Opened issue \"error when adding nuguet package in .net standard 2.0 library\" (#677) at dotnet/standard","RelatedBody":"Best regard,\r\n\r\nCreating a xamarin forms project and selecting .Net Standard as a shared code method everything was fine until I needed to add the Microsoft.Net.Http package and it generates the error of the image which could not solve or reestablishing visual studio ..\r\n\r\n![image](https://user-images.githubusercontent.com/19583567/37363847-faac480c-26c6-11e8-98d1-596db6ecc783.png)\r\n\r\n\r\nIf you know or have an idea that it can be, I would thank you enough"},{"Id":"7372367032","Type":"IssuesEvent","CreatedAt":"2018-03-13T14:35:38","Actor":"gacaq","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/676","RelatedDescription":"Opened issue \"System.Data.SqlClient error in Net Standard 2.0 \" (#676) at dotnet/standard","RelatedBody":"I have a project with a class library in Net Standard 2.0. using a System.Data.SqlClient nugget and it send me the next error:\r\n\r\n`System.IO.FileNotFoundException: 'No se puede cargar el archivo o ensamblado 'System.Data.SqlClient, Version=4.2.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a' ni una de sus dependencias. El sistema no puede encontrar el archivo especificado.'`\r\n\r\nThe issue throws in the next portion of code:\r\n\r\npublic class SqlServerDbManager : SqlServerUnitOfWork\r\n    {\r\n        public SqlServerDbManager(string connectionStringName)\r\n            : base(connectionStringName)\r\n        {\r\n        }\r\n    }\r\n\r\npublic class SqlServerUnitOfWork : ISqlServerUnitOfWork, IDisposable\r\n    {\r\n        #region Data Members\r\n\r\n        private bool disposed;\r\n        private DbProviderFactory factory;\r\n        protected IDbConnection connection;\r\n\r\n        #endregion\r\n\r\n        #region Construction\r\n\r\n        public SqlServerUnitOfWork(string connectionString)\r\n        {\r\n            this.factory = SqlClientFactory.Instance;\r\n            this.connection = factory.CreateConnection();\r\n            this.connection.ConnectionString = connectionString;\r\n        }\r\n\r\n        #end region\r\n   }\r\n\r\nDo you have any suggest or what is hiring the error?\r\n\r\nThanks a lot"},{"Id":"7367636518","Type":"IssuesEvent","CreatedAt":"2018-03-12T18:54:39","Actor":"ericstj","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/675","RelatedDescription":"Opened issue \"Trimming task footprint is too large\" (#675) at dotnet/standard","RelatedBody":"There's probably a perf issue here too.  We're using the NuGet ProjectModel OM for loading the project.assets.json when we only need to read out package ID relationships.  We could do this with much smaller JSON-based reader.  Ideally it wouldn't parse the entire file (which can be huge) when we only need the package relationships."},{"Id":"7367620302","Type":"IssuesEvent","CreatedAt":"2018-03-12T18:51:39","Actor":"ericstj","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/667","RelatedDescription":"Closed issue \"Trimming fails for .NET Framework projects that use PackageReference\" (#667) at dotnet/standard","RelatedBody":"The csproj has:\r\n\r\n```xml\r\n  <PropertyGroup>\r\n    <TrimUnusedDependencies>true</TrimUnusedDependencies>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <PackageReference Include=\"SourceLink.Embed.AllSourceFiles\" Version=\"2.7.4\" PrivateAssets=\"all\" />\r\n    <PackageReference Include=\"Microsoft.Packaging.Tools.Trimming\" Version=\"1.1.0-preview1-25818-01\" />\r\n  </ItemGroup>\r\n```\r\n\r\nIt fails to build, giving:\r\n\r\n> Microsoft.Packaging.Tools.Trimming.targets(55,5): error MSB4018: The \"TrimFiles\" task failed unexpectedly.\r\n> System.Exception: Root package SourceLink.Embed.AllSourceFiles was specified but was not found in PackageDependencies\r\n>    at Microsoft.DotNet.Build.Tasks.TrimFiles.GetPackageRoots(IDictionary`2 packages, Trimmable trimmable)\r\n>    at Microsoft.DotNet.Build.Tasks.TrimFiles.Execute()\r\n>    at Microsoft.Build.BackEnd.TaskExecutionHost.Microsoft.Build.BackEnd.ITaskExecutionHost.Execute()\r\n>    at Microsoft.Build.BackEnd.TaskBuilder.<ExecuteInstantiatedTask>d__26.MoveNext()\r\n\r\nIs this expected to work?"}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"7376109092","Type":"PullRequestEvent","CreatedAt":"2018-03-14T04:35:57","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/28022","RelatedDescription":"Merged pull request \"Update CoreClr to servicing-26313-02 (release/1.1.0)\" (#28022) at dotnet/corefx","RelatedBody":""},{"Id":"7376106841","Type":"PullRequestEvent","CreatedAt":"2018-03-14T04:34:57","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/27821","RelatedDescription":"Merged pull request \"Make SocketsHttpHandler default Handler\" (#27821) at dotnet/corefx","RelatedBody":"This PR makes SocketsHttpHandler the default Handler, and will address task 1 & 3 in #27783."},{"Id":"7376102491","Type":"IssuesEvent","CreatedAt":"2018-03-14T04:33:06","Actor":"AlexRadch","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/27646","RelatedDescription":"Closed issue \"System.Diagnostics.EventLog.Tests fails 2 tests in non-English Windows\" (#27646) at dotnet/corefx","RelatedBody":"`System.Diagnostics.EventLog.Tests` fails 2 tests in non-English Windows with next log:\r\n```\r\n     System.Diagnostics.Tests.EventLogTests.CheckLogName_Get [FAIL]\r\n        Assert.Equal() Failure\r\n                  \u0019 (pos 0)\r\n        Expected: Application\r\n        Actual:   Приложение\r\n                  \u0018 (pos 0)\r\n        Stack Trace:\r\n           C:\\Code\\corefx\\src\\System.Diagnostics.EventLog\\tests\\EventLogTests\\EventLogTests.cs(83,0): at System.Diagnostics.Tests.EventLogTests.CheckLogName_Get()\r\n\r\n     System.Diagnostics.Tests.EventLogTests.GetLogDisplayName_Set [FAIL]\r\n        Assert.Equal() Failure\r\n                  \u0019 (pos 0)\r\n        Expected: Application\r\n        Actual:   Приложение\r\n                  \u0018 (pos 0)\r\n        Stack Trace:\r\n           C:\\Code\\corefx\\src\\System.Diagnostics.EventLog\\tests\\EventLogTests\\EventLogTests.cs(112,0): at System.Diagnostics.Tests.EventLogTests.GetLogDisplayName_Set()\r\n```\r\n\r\nI do not know how to fix these tests, because `EventLog.LogDisplayName` differs in non-English Windows.\r\n\r\nMay be test `EventLog.Log` property ? Or test that `EventLog.LogDisplayName` is not empty string?"},{"Id":"7376101345","Type":"PullRequestEvent","CreatedAt":"2018-03-14T04:32:34","Actor":"wfurt","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/28048","RelatedDescription":"Opened pull request \"Improve HTTP proxy tests\" (#28048) at dotnet/corefx","RelatedBody":"This is essentially same as #27344 after doing rebase to current master. \r\nIt also adds test to demonstrate #27870"},{"Id":"7376087614","Type":"PullRequestEvent","CreatedAt":"2018-03-14T04:26:42","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/28047","RelatedDescription":"Opened pull request \"Fix SocketsHttpHandler.PreAuthenticate behavior\" (#28047) at dotnet/corefx","RelatedBody":"Previously PreAuthenticate was causing SocketsHttpHandler to always add a basic auth header on every request if a basic credential could be retrieved from the supplied credentials.  This is not how PreAuthenticate is supposed to work.  Rather, the handler is supposed to track credentials that have previously been used to successfully authenticate, and then on subsequent requests use credentials from that successfully-authenticated cache.\r\n\r\nCloses https://github.com/dotnet/corefx/issues/27597\r\ncc: @geoffkizer, @davidsh, @mconnew "}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"7375969372","Type":"PullRequestEvent","CreatedAt":"2018-03-14T03:37:45","Actor":"cston","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/25387","RelatedDescription":"Merged pull request \"Verify type and inferred nullability matches expected results based on comments in unit test source\" (#25387) at dotnet/roslyn","RelatedBody":"Verify type and inferred nullability matches expected results based on comments in unit test source.\r\n```\r\n(b ? x : y)/*T:C<object?>!*/\r\n```"},{"Id":"7375740724","Type":"PullRequestEvent","CreatedAt":"2018-03-14T02:16:12","Actor":"VSadov","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/25454","RelatedDescription":null,"RelatedBody":"As of https://github.com/dotnet/roslyn/pull/25397 , the feature branch meets requirements for the merge to the release branch.\r\n\r\nThe IDE manual pass has been completed (see below)."},{"Id":"7375740398","Type":"PullRequestEvent","CreatedAt":"2018-03-14T02:16:05","Actor":"VSadov","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/pull/25454","RelatedDescription":"Closed pull request \"Merge from Features/constraints to dev15.7.x\" (#25454) at dotnet/roslyn","RelatedBody":"As of https://github.com/dotnet/roslyn/pull/25397 , the feature branch meets requirements for the merge to the release branch.\r\n\r\nThe IDE manual pass has been completed (see below)."},{"Id":"7375652402","Type":"PullRequestEvent","CreatedAt":"2018-03-14T01:44:53","Actor":"jinujoseph","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/25034","RelatedDescription":"Merged pull request \"Minor bug fix: adding missing case for ConversionOperatorDeclaration in IsReturnableConstruct\" (#25034) at dotnet/roslyn","RelatedBody":"`SyntaxNodeExtensions.IsReturnableConstruct` is missing a case for `ConversionOperatorDeclaration`.\r\n\r\nThis causes the following bug: highlighting return statements does not work inside conversion operators.\r\nRepro:\r\n```c#\r\nclass C\r\n{\r\n    public static explicit operator string(C a)\r\n    {\r\n        return null;\r\n        return null;\r\n    }\r\n}\r\n```\r\nclick on any `return` - nothing is highlighted.\r\n\r\nThis PR fixes that and adds a lot more tests into ReturnStatementHighlighterTests to cover cases for all constructs (it currently only covers methods & simple lambda expressions). I also renamed existing tests to give them better names as opposed to Test1, Test2, etc..."}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"7375834911","Type":"PullRequestEvent","CreatedAt":"2018-03-14T02:49:31","Actor":"tarekgh","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5547","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#5547) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7375681026","Type":"PullRequestEvent","CreatedAt":"2018-03-14T01:55:11","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5547","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#5547) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7375104666","Type":"PullRequestEvent","CreatedAt":"2018-03-13T22:44:46","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5546","RelatedDescription":"Merged pull request \"Update MonoGame readme\" (#5546) at dotnet/corert","RelatedBody":"Went over the MonoGame instructions on my relatively fresh machine and hit MonoGame/MonoGame#5736.\r\n\r\n@dotnet-bot skip ci please"},{"Id":"7375093449","Type":"PullRequestEvent","CreatedAt":"2018-03-13T22:41:40","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5546","RelatedDescription":"Opened pull request \"Update MonoGame readme\" (#5546) at dotnet/corert","RelatedBody":"Went over the MonoGame instructions on my relatively fresh machine and hit MonoGame/MonoGame#5736.\r\n\r\n@dotnet-bot skip ci please"},{"Id":"7374997930","Type":"PullRequestEvent","CreatedAt":"2018-03-13T22:17:39","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5541","RelatedDescription":"Merged pull request \"Fix exception when verifying netmodules\" (#5541) at dotnet/corert","RelatedBody":"Call to metadataReader.GetAssemblyDefinition() does not work for netmodules and causes an exception.\r\nUse **GetModuleDefinition()** instead."},{"Id":"7374989439","Type":"PullRequestEvent","CreatedAt":"2018-03-13T22:15:45","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5545","RelatedDescription":"Opened pull request \"Add Hello World console app sample\" (#5545) at dotnet/corert","RelatedBody":"This sample minimizes the number of steps needed to try CoreRT.\r\n\r\nAlso adding a couple pointers to the repo's README.md."},{"Id":"7374967173","Type":"PullRequestEvent","CreatedAt":"2018-03-13T22:10:18","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5544","RelatedDescription":"Merged pull request \"Fix license headers\" (#5544) at dotnet/corert","RelatedBody":""},{"Id":"7374963616","Type":"PullRequestEvent","CreatedAt":"2018-03-13T22:09:30","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5533","RelatedDescription":"Merged pull request \"Fix interface dispatch with CppCodegen\" (#5533) at dotnet/corert","RelatedBody":"I had a quick look and this turned out to be simple enough.\r\n\r\nI remember we had trouble with the Intefaces test on Unix before, but I'm trying to enable it for CppCodegen again in the hopes that whatever the issue was, we fixed it (maybe it was unboxing stubs or something like that; I never actually looked)."},{"Id":"7373847036","Type":"PullRequestEvent","CreatedAt":"2018-03-13T18:26:49","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5544","RelatedDescription":"Opened pull request \"Fix license headers\" (#5544) at dotnet/corert","RelatedBody":""},{"Id":"7373421327","Type":"PullRequestEvent","CreatedAt":"2018-03-13T17:13:40","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5543","RelatedDescription":"Merged pull request \"Merge changes from TFS\" (#5543) at dotnet/corert","RelatedBody":"When merging, this PR, please ensure a merge commit is created as automation requires the merge commit.  Do not 'Squash and merge' or 'Rebase and merge'!"},{"Id":"7373380040","Type":"PullRequestEvent","CreatedAt":"2018-03-13T17:06:57","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5543","RelatedDescription":"Opened pull request \"Merge changes from TFS\" (#5543) at dotnet/corert","RelatedBody":"When merging, this PR, please ensure a merge commit is created as automation requires the merge commit.  Do not 'Squash and merge' or 'Rebase and merge'!"}],"ResultType":"GitHubEvent"},"SDK":{"Events":[{"Id":"7375429183","Type":"PullRequestEvent","CreatedAt":"2018-03-14T00:25:03","Actor":"livarcocc","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/1997","RelatedDescription":"Merged pull request \"Port fix to make satellite generation work for VB to release/2.1.1xx\" (#1997) at dotnet/sdk","RelatedBody":"**Customer scenario**\r\n\r\nVB project using SDK and having satellite assemblies. Build breaks trying to compile the Assembly info for the satellite that is written out in VB instead of C# even though satellite builds in SDK always invoke the C# compiler.\r\n\r\n2.1.1xx and 2.1.2xx SDKs cannot build themselves because Roslyn in these release branches depends on having this fix.\r\n\r\n**Bugs this fixes:** \r\n\r\nhttps://github.com/dotnet/sdk/issues/1748 (Already fixed, but only for 2.1.300+ and this is a request to have it included in the next 2.1.1xx servicing release as well as 2.1.200.)\r\n\r\n**Workarounds, if any**\r\n\r\nWait for 2.1.300 to be released (which already has the fix).\r\n\r\nCopy entire target with fix into Directory.Build.targets. This is very fragile because it would shut off any future fixes to the target and tie the customer project to internal implementation details of the SDK. I would be very hesitant to recommend this.\r\n\r\nSource build can apply a patch, but this keeps a discrepancy betweeen source and non-source-builds and adds debt. By putting this low risk fix into the next servicing release, we eliminate that debt sooner.\r\n\r\n**Risk**\r\n\r\nLow\r\n\r\n**Performance impact**\r\n\r\nNone\r\n\r\n**Is this a regression from a previous update?**\r\n\r\nNo. It was broken since the first release that supported VB (1.1 I believe), but Roslyn was the first customer to report it. It seems the intersection of VB sdk projects and satellite assemblies is small.\r\n\r\n**Root cause analysis:**\r\n\r\nInsufficient VB coverage.\r\n\r\nInsufficient understanding / communication that a Roslyn branch effectively cannot depend on a CLI newer than the CLI release train it is on. Otherwise, source build will break. Moving forward, any fix we take to unblock Roslyn will need to consider the correlation between Roslyn branches and CLI branches.\r\n\r\n**How was the bug found?**\r\n\r\nDogfooding\r\n"},{"Id":"7375289369","Type":"PullRequestEvent","CreatedAt":"2018-03-13T23:38:36","Actor":"livarcocc","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/2016","RelatedDescription":"Merged pull request \"Port fix for mismatched NuGet versions to release/2.1.1xx.\" (#2016) at dotnet/sdk","RelatedBody":"This commit ports the fix for the mismatched NuGet version numbers used by the\r\nSDK.\r\n\r\nSee https://github.com/dotnet/sdk/pull/1831 for the change into master."},{"Id":"7375278205","Type":"PullRequestEvent","CreatedAt":"2018-03-13T23:35:03","Actor":"livarcocc","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/2029","RelatedDescription":"Merged pull request \"Adding quotes to paths used in crossgen for the runtime store.\" (#2029) at dotnet/sdk","RelatedBody":"Fixes https://github.com/dotnet/cli/issues/8014"},{"Id":"7373869705","Type":"PullRequestEvent","CreatedAt":"2018-03-13T18:30:49","Actor":"dsplaisted","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/pull/2025","RelatedDescription":"Closed pull request \"Update stage 0 .NET Core SDK version\" (#2025) at dotnet/sdk","RelatedBody":"I'm having issues with CI failing but tests passing locally in #2008, so in this PR I'm trying to isolate some of the changes and test them separately."},{"Id":"7373498493","Type":"IssuesEvent","CreatedAt":"2018-03-13T17:26:13","Actor":"livarcocc","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/issues/2033","RelatedDescription":"Closed issue \"How to disable \"preview version\" warning message?\" (#2033) at dotnet/sdk","RelatedBody":"Currently, the SDK issues this high importance message when I build\r\n\r\n> You are working with a preview version of the .NET Core SDK. You can define the SDK version via a global.json file in the current project. \r\n\r\nI already have a global.json file and I explicitly set it a preview version, so the warning seems unnecessary. How can I disable this message altogether?"},{"Id":"7373497156","Type":"PullRequestEvent","CreatedAt":"2018-03-13T17:26:00","Actor":"livarcocc","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/2042","RelatedDescription":"Merged pull request \"Add SuppressNETCoreSdkPreviewMessage property to suppress the preview SDK version\" (#2042) at dotnet/sdk","RelatedBody":"Cref #2033 \r\n\r\ncc @nguerrera @livarcocc "}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"971915245378715648","CreatedAt":"2018-03-09T01:07:06+00:00","UserScreenname":"dotnet","Text":".NET Framework 4.7.2 Developer Pack Early Access build 3056 is available! https://t.co/OjVLK9nv9f","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":39,"FavoriteCount":28,"RawContent":null}]}},"RunOn":"2018-03-14T05:30:21.0103415Z","RunDurationInMilliseconds":8297}