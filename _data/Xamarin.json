{"Data":{"Blog":{"FeedItems":[{"Title":"Upgrade Your App with Sentiment Analysis","PublishedOn":"2018-10-04T05:00:22+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Understanding the sentiment of an email or text message can be difficult. Someone may send a message, intending for it to be encouraging, but it may be accidentally interpreted as mean or...","Href":"https://blog.xamarin.com/upgrade-your-app-with-sentiment-analysis/","RawContent":null},{"Title":"Mobile Developer Events in October","PublishedOn":"2018-10-01T19:00:33+00:00","CommentsCount":0,"FacebookCount":0,"Summary":".NET Conf Local Events Watch all the live sessions from .NET Conf right on Channel 9! With a wide selection of content by feature speakers from the community and .NET product teams, take this...","Href":"https://blog.xamarin.com/mobile-developer-events-in-october/","RawContent":null},{"Title":"Using the Android Designer Split View","PublishedOn":"2018-09-24T05:01:52+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"The ability to see the design view and layout XML at the same time, side by side, was one of our most requested features for the Android Designer. With Split View, new in the Visual Studio 2017...","Href":"https://blog.xamarin.com/split-view-android-designer/","RawContent":null},{"Title":"Get Ready for iOS 12 and Xcode 10","PublishedOn":"2018-09-19T19:49:52+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Support for iOS 12 and Xcode 10 to accompany Apple’s Xcode Gold Master (GM) release has just been announced! We have also published updated documentation and samples to help you quickly get started...","Href":"https://blog.xamarin.com/ios-12-and-xcode-10/","RawContent":null},{"Title":"Handling input from Apple Pencil","PublishedOn":"2018-09-19T17:52:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"After months of contemplation before finally buying an Apple Pencil to go along with the iPad Pro, it turns out it is as magical as they say! This blog post describes how to use Xamarin.iOS and Visual...","Href":"https://blog.xamarin.com/apple-pencil-handling-input/","RawContent":null},{"Title":"Xamarin.Forms 3.2.0 Released: Going Big with Little Things","PublishedOn":"2018-09-17T18:50:43+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Xamarin.Forms 3.2.0 continues the theme of previous releases to give you big wins by making little things much easier to do. The entire version 3 series has been about reducing the friction of doing...","Href":"https://blog.xamarin.com/xamarin-forms-3-2-0-released-going-big-with-little-things/","RawContent":null},{"Title":"Watch the .NET Conf Live!","PublishedOn":"2018-09-10T19:35:48+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"The 3-day virtual developer conference co-organized by the .NET community and Microsoft is finally here! Now the question is how and where to watch the .NET Conf which will be completely...","Href":"https://blog.xamarin.com/watch-the-net-conf-live/","RawContent":null},{"Title":"Using Object Detection from inside your Xamarin app","PublishedOn":"2018-09-06T18:24:44+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Microsoft Cognitive Services provide a great way to get started with AI without being a machine learning or data science expert. A common favorite of cognitive services is the Custom Vision Service....","Href":"https://blog.xamarin.com/using-object-detection-from-inside-your-xamarin-app/","RawContent":null},{"Title":"Xamarin and .NET Developer Events in September","PublishedOn":"2018-08-31T16:42:53+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Xamarin and .NET developer events this September: September 10: Los Angeles, CA. USA &#124; Los Angeles .NET Developers Group: LADOTNET &#8211; The Architectural Mindset by Jeremy Cameron September...","Href":"https://blog.xamarin.com/xamarin-and-net-developer-events-in-september/","RawContent":null},{"Title":"Using the New Xamarin.Forms Controls Toolbox","PublishedOn":"2018-08-24T14:03:29+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Xamarin.Forms empowers you to deliver the same experience to multiple platforms. Using a set of UI elements abstracted from common mobile app controls, like text inputs and buttons, you can quickly...","Href":"https://blog.xamarin.com/using-new-xamarin-forms-controls-toolbox/","RawContent":null}],"ResultType":"Feed"},"Android":{"Events":[{"Id":"8377472054","Type":"IssuesEvent","CreatedAt":"2018-10-06T01:36:17","Actor":"brendanzagaeski","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/2271","RelatedDescription":"Opened issue \"[sqlite] \"Invalid character escape\" CMake build error due to backslash path separators on Windows\" (#2271) at xamarin/xamarin-android","RelatedBody":"The current `xamarin-android/master` CI build on Windows is hitting an error due to a hiccup with Windows path separators in the new CMake build process for SQLite (from <https://github.com/xamarin/xamarin-android/pull/2252>). I'm filing a quick issue just to be thorough.\r\n\r\nAs a temporary local workaround in my environment, I did:\r\n\r\n```patch\r\ndiff --git a/src/sqlite-xamarin/sqlite-xamarin.props b/src/sqlite-xamarin/sqlite-xamarin.props\r\nindex 5c44fef9..546fe57d 100644\r\n--- a/src/sqlite-xamarin/sqlite-xamarin.props\r\n+++ b/src/sqlite-xamarin/sqlite-xamarin.props\r\n@@ -3,7 +3,7 @@\r\n   <Import Project=\"$(MSBuildThisFileDirectory)\\..\\..\\build-tools\\scripts\\cmake-common.props\" />\r\n\r\n   <PropertyGroup>\r\n-    <_CommonDefines>-DSQLITE_SOURCE_DIR=\"$(SqliteSourceFullPath)\"</_CommonDefines>\r\n+    <_CommonDefines>-DSQLITE_SOURCE_DIR=\"$(SqliteSourceFullPath.Replace ('\\', '/'))\"</_CommonDefines>\r\n     <_CmakeCommonHostFlags>$(_CmakeCommonFlags) $(_CommonDefines)</_CmakeCommonHostFlags>\r\n     <_CmakeAndroidFlags>$(_CmakeAndroidFlags) $(_CommonDefines)</_CmakeAndroidFlags>\r\n     <_CmakeMxeCommonFlags32>$(_CmakeMxeCommonFlags32) -DCMAKE_TOOLCHAIN_FILE=$(_CmakeMxeToolchainBasePath)-32.cmake -DMINGW_TARGET_32=1</_CmakeMxeCommonFlags32>\r\n```\r\n\r\nBut I think this might not properly account for cases where paths on macOS include literal `\\` characters.\r\n\r\n### Steps to Reproduce\r\n\r\nBuild `xamarin-android/master` on Windows.\r\n\r\n### Expected Behavior\r\n\r\nThe new CMake build process for SQLite succeeds.\r\n\r\n### Actual Behavior\r\n\r\nThe new CMake build process for SQLite hits an error because CMake treats the Windows backslash path separator as the start of an escape sequence when reading CMakeLists.txt:\r\n\r\n```\r\nCMake Error at CMakeLists.txt:146 (add_library):\r\n      Syntax error in cmake code when parsing string\r\n\r\n        E:\\A\\_work\\14\\s\\external\\sqlite/dist/sqlite3.c\r\n\r\n      Invalid character escape '\\A'.\r\n```\r\n\r\nExample CI build: <https://dev.azure.com/devdiv/DevDiv/_build/results?buildId=2092941>"},{"Id":"8376834289","Type":"IssuesEvent","CreatedAt":"2018-10-05T21:19:08","Actor":"Dersei","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/2270","RelatedDescription":"Opened issue \"Problem with using updated FSharp.Core \" (#2270) at xamarin/xamarin-android","RelatedBody":"### Steps to Reproduce\r\n\r\n1. Open new F# Blank App (Android) project\r\n2. Update FSharp.Core nuget to any version higher than 4.0.0.1\r\n\r\n<!--\r\nIf you have a repro project, you may drag & drop the .zip/etc. onto the issue editor to attach it.\r\n-->\r\n\r\n### Expected Behavior\r\n\r\nEverything should work like at the beginning.\r\n\r\n### Actual Behavior\r\n\r\nThe project cannot be built because of three errors: \r\n\r\n> Error\tFS1108\tThe type 'BigInteger' is required here and is unavailable. You must add a reference to assembly 'System.Numerics, Version=2.0.5.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.\r\n\r\n> Error\tFS0039\tThe type 'int' is not defined. Maybe you want one of the following:\r\n>    Int16\r\n>    Int32\r\n>    Int64\r\n>    IntPtr\r\n>    Intent\t\r\n\r\nand\r\n\r\n> Error\tFS0039\tThe field, constructor or member 'Add' is not defined.\t\r\n\r\nFirst one is connected with whole project and appears only after trying to build.\r\nThe second one appears with every `: int` like in `let mutable count:int = 1`. \r\nThe third one is connected with lines:\r\n```FSharp\r\n        button.Click.Add (fun args -> \r\n            button.Text <- sprintf \"%d clicks!\" count\r\n            count <- count + 1\r\n        )\r\n```\r\n\r\nThe second one appears also after defining other variables with aliases as types' names (e.g. float, string)\r\n```FSharp\r\nlet test : float = 1.0\r\nlet test : string = \"test\"\r\n```\r\n\r\nAll problems disappear after adding System.Numerics to project's dependencies.\r\n\r\n### Version Information\r\n\r\n> Visual Studio 15.8.6\r\n\r\n\r\n\r\n"},{"Id":"8376445068","Type":"PullRequestEvent","CreatedAt":"2018-10-05T19:51:29","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2258","RelatedDescription":"Merged pull request \"[Xamarin.Android.Build.Tasks] Add more warning codes\" (#2258) at xamarin/xamarin-android","RelatedBody":"Context: https://github.com/xamarin/xamarin-android/issues/1560\r\n\r\n* I investigated the code paths that led into the `LogWarning()` in\r\n  `GenerateResourceDesigner.AddRename()`.  I could not find any way to\r\n  hit that message with the current code.  Moreover, the only reports of\r\n  the message I could find on the web were from capitalization\r\n  mismatches, and those are now explicitly ignored by the use of the\r\n  `StringComparison.OrdinalIgnoreCase` argument in the call to\r\n  `string.Compare()`.  Since this message does not currently indicate an\r\n  actionable problem, I changed it from a warning to a debug message.\r\n\r\n* Neither of the warnings in\r\n  `GetAdditionalResourcesFromAssemblies.AddAttributeValue()` is\r\n  actionable for Xamarin.Android app developers.  The first warning can\r\n  only arise if a new attribute name has been added to the `switch`\r\n  statement in `DoExecute()`.  The second warning can only occur in a\r\n  library that uses one of those attributes.  Since the attributes are\r\n  not formally documented, they are currently only intended for use by\r\n  the Xamarin team.  Since these warnings aren't aimed at end-users,\r\n  they don't need to have their own codes.  So for now, I just updated\r\n  the warnings to reuse the `errorCode`.\r\n\r\n* The first warning in\r\n  `GetAdditionalResourcesFromAssemblies.MakeSureLibraryIsInPlace()` is\r\n  just an informational message.  The download step is *expected* to be\r\n  skipped during design-time builds.  I changed the warning to a debug\r\n  message accordingly.\r\n\r\n* I changed the warning in `ReadAdditionalResourcesFromAssemblyCache` to\r\n  a debug message because it is just informational.  For example, in the\r\n  normal process of building application projects, the\r\n  Xamarin.Android.Common.targets checks if `CacheFile` exists before it\r\n  invokes the task, so an absent `CacheFile` is often normal.  In cases\r\n  where the warning could be actionable for an end-user, the warning\r\n  would indicate that something went wrong earlier when creating the\r\n  `CacheFile` in `GetAdditionalResourcesFromAssemblies`, so even in that\r\n  case this warning would not be needed because more actionable messages\r\n  should come from the earlier task.  On top of that, this whole old\r\n  mechanism of downloading external files is rarely used now that the\r\n  large majority of the NuGet packages from the Xamarin team have been\r\n  updated to use the newer Xamarin.Build.Download mechanism.\r\n\r\n* I also changed the warnings in `ReadImportedLibrariesCache` and\r\n `ReadLibraryProjectImportsCache` to debug messages for similar reasons.\r\n A missing cache file in one of these tasks indicates that something\r\n went wrong during the corresponding earlier `GetImportedLibraries` or\r\n `ResolveLibraryProjectImports` task, so any actionable messages would\r\n need to get logged in the earlier task instead.\r\n\r\n* The warnings in\r\n  `ResolveAssemblies.ResolveRuntimeAssemblyForReferenceAssembly()`\r\n  should not occur during normal use.  They both depend on *generated*\r\n  content related to the NuGet target framework moniker.  Based on these\r\n  considerations, I assigned just one shared warning code to both\r\n  warnings for now."},{"Id":"8375514523","Type":"PullRequestEvent","CreatedAt":"2018-10-05T16:39:54","Actor":"dellis1972","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2269","RelatedDescription":"Opened pull request \"[Xamarin.Android.Build.Tasks] `ResourcePatcher` for API 19+.\" (#2269) at xamarin/xamarin-android","RelatedBody":""},{"Id":"8374387962","Type":"PullRequestEvent","CreatedAt":"2018-10-05T13:33:29","Actor":"dellis1972","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2222","RelatedDescription":"Merged pull request \"Don't ignore IntentFilter attribute on content provider classes\" (#2222) at xamarin/xamarin-android","RelatedBody":"Fixes: https://github.com/xamarin/xamarin-android/issues/2202\r\nContext: https://forums.xamarin.com/discussion/96028/android-documentsprovider-intent-filter\r\n\r\nWhen generating `AndroidManifest.xml` we currently fail to take into account any\r\ninstances of the `IntentFilterAttribute` custom attribute decorating all the\r\ncontent provider classes (that is ones with another custom attribute -\r\n`ContentProviderAttribute`). This forces the developer to manually edit the\r\nmanifest to add appropriate entry for the provider and its intent filters.\r\n\r\nThis commit removes the limitation by making sure our manifest generator looks\r\nfor and processes the `IntentFilter` custom attribute."},{"Id":"8374387940","Type":"IssuesEvent","CreatedAt":"2018-10-05T13:33:28","Actor":"dellis1972","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/2202","RelatedDescription":"Closed issue \"DocumentsProvider intent filter\" (#2202) at xamarin/xamarin-android","RelatedBody":"### Steps to Reproduce\r\n\r\nThis is the same issue as [here](https://forums.xamarin.com/discussion/96028/android-documentsprovider-intent-filter): `IntentFilterAttribute` is ignored on classes decorated with `ContentProviderAttribute`. The current workaround is to use `RegisterAttribute` on the `DocumentsProvider` subclass, which, as the documentation [clearly states](https://developer.xamarin.com/api/type/Android.Runtime.RegisterAttribute/), is an ugly hack.\r\n\r\n### Expected Behavior\r\n\r\nThe `intent-filter` element is generated in the `AndroidManifest.xml`.\r\n\r\n### Actual Behavior\r\n\r\nThe `intent-filter` element is _not_ generated in the `AndroidManifest.xml`.\r\n\r\n### Version Information\r\n\r\n```\r\nXamarin   4.11.0.756 (d15-8@b66ff7180)\r\nVisual Studio extension to enable development for Xamarin.iOS and Xamarin.Android.\r\n\r\nXamarin.Android SDK   9.0.0.19 (HEAD/a8a3b0ec7)\r\nXamarin.Android Reference Assemblies and MSBuild support.\r\n```"},{"Id":"8370633616","Type":"PullRequestEvent","CreatedAt":"2018-10-04T21:00:53","Actor":"grendello","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2267","RelatedDescription":"Opened pull request \"[monodroid] Refactor: AndroidSystem placed in separate files\" (#2267) at xamarin/xamarin-android","RelatedBody":"The `AndroidSystem` class now lives in separate source files. No functional\r\nchanges made."}],"ResultType":"GitHubEvent"},"Forms":{"Events":[{"Id":"8379097903","Type":"PullRequestEvent","CreatedAt":"2018-10-06T21:06:00","Actor":"noamyogev84","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/4023","RelatedDescription":"Opened pull request \"Add Editor.IsTextPredictionEnabled property\" (#4023) at xamarin/Xamarin.Forms","RelatedBody":"Fixes #3555\r\n### Description of Change ###\r\nAdded the `Editor.IsTextPredictionEnabledProperty` field and `Editor.IsTextPredictionEnabled` property. Modified `EditorRenderer.OnElementPropertyChanged()` for Android, iOS and UWP to react to changes to the new `IsTextPredictionEnabled` property.\r\n\r\nOn Android setting `IsTextPredictionEnabled to false sets the `InputTypes.TextFlagNoSuggestions` flag on the native control's `InputType`.\r\n\r\nOn UWP the native control's `IsTextPredictionEnabled` will be set to the value of the `Editor.IsTextPredictionEnabled` property.\r\n\r\nOn iOS the native control's `AutocorrectionType` property will be set to `No` when `Editor.IsTextPredictionEnabled` is `false`.\r\n\r\n### Issues Resolved ### \r\n\r\n- Fixes #3555 [Enhancement] Editor: Control over text-prediction\r\n\r\n### API Changes ###\r\n<!-- List all API changes here (or just put None), example:\r\n\r\nAdded:\r\n*`bool Editor.IsTextPredictionEnabled { get; set; }`\r\n### Platforms Affected ### \r\n<!-- Please list all platforms affected by these changes -->\r\n\r\n- Core/XAML (all platforms)\r\n- iOS\r\n- Android\r\n- UWP\r\n\r\n### Behavioral/Visual Changes ###\r\n<!-- Describe any changes that may change how a user's app behaves or appears when upgrading to this version of the codebase. -->\r\n\r\nPlease note #2038\r\n\r\n### Before/After Screenshots ### \r\n<!-- If possible, take a screenshot of your test case before these changes were made and another screenshot after the changes were made to show possible visual changes. -->\r\n\r\nNot applicable\r\n\r\n### Testing Procedure ###\r\n<!-- Please list the steps that should be taken to properly test these changes on each relevant platform. If you were unable to test these changes yourself on any or all platforms, please let us know. Also, if you are able to attach a video of your test run, you will be our personal hero. -->\r\n\r\n### PR Checklist ###\r\n\r\n- [x] Has automated tests <!-- (if tests are omitted or manual, state reason in description) -->\r\n- [x] Rebased on top of the target branch at time of PR\r\n- [x] Changes adhere to coding standard\r\n"},{"Id":"8378864289","Type":"PullRequestEvent","CreatedAt":"2018-10-06T18:34:18","Actor":"MartinZikmund","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/4022","RelatedDescription":"Opened pull request \"Toolbar dynamic overflow\" (#4022) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\n\r\nAdds a UWP specific configuration that gives access to toggle the `CommandBar.IsDynamicOverflowEnabled` property for toolbar.\r\n\r\n### Issues Resolved ### \r\n\r\n- fixes #2057 \r\n- fixes #3988 \r\n\r\n### API Changes ###\r\n\r\nAdded:\r\n - `(FormsElement).ToolbarDynamicOverflowEnabledProperty` //attached property\r\n - `bool GetToolbarDynamicOverflowEnabled(this IPlatformElementConfiguration<Windows, FormsElement> config)`\r\n- `IPlatformElementConfiguration<Windows, FormsElement> SetToolbarDynamicOverflowEnabled(\r\n        \tthis IPlatformElementConfiguration<Windows, FormsElement> config, bool value)`\r\n\r\n### Platforms Affected ### \r\n\r\n- UWP\r\n\r\n### Behavioral/Visual Changes ###\r\n\r\nDefault behavior (dynamic overflow enabled) does not change. User can disable dynamic overflow if he chooses so.\r\n\r\nNone\r\n\r\n### Before/After Screenshots ### \r\n\r\n**Dynamic overflow enabled**\r\n![image](https://user-images.githubusercontent.com/1075116/46574663-04ad7c80-c9a7-11e8-93db-4a8442acdabd.png)\r\n\r\n**Dynamic overflow disabled**\r\n![image](https://user-images.githubusercontent.com/1075116/46574666-1c850080-c9a7-11e8-87d8-cf502c4b5941.png)\r\n\r\n### PR Checklist ###\r\n\r\n- [ ] Has automated tests <!-- (if tests are omitted or manual, state reason in description) -->\r\n- [x] Rebased on top of the target branch at time of PR\r\n- [x] Changes adhere to coding standard\r\n"},{"Id":"8378760817","Type":"IssuesEvent","CreatedAt":"2018-10-06T17:32:47","Actor":"ajaysbsic","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/4021","RelatedDescription":"Opened issue \"List view Auto Scrolling while adding data from three different APIs\" (#4021) at xamarin/Xamarin.Forms","RelatedBody":"Hi , I have taken a list view and binding the data using Observable collection , I am adding data in that observable collection by A TASK whenever new data comes from the server in the form of list, there is no issue in Android but in IOS at the time of data binding the list is Auto Scrolling. I have tried many ScrollTo and many other suggestion but I am not able to catch the exact issue why this is happening , any suggestion will be really helpful."},{"Id":"8378759932","Type":"IssuesEvent","CreatedAt":"2018-10-06T17:32:14","Actor":"ajaysbsic","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/4020","RelatedDescription":"Opened issue \"List view Auto Scrolling while adding data from three different APIs\" (#4020) at xamarin/Xamarin.Forms","RelatedBody":"Hi , I have taken a list view and binding the data using Observable collection , I am adding data in that observable collection by A TASK whenever new data comes from the server in the form of list, there is no issue in Android but in IOS at the time of data binding the list is Auto Scrolling. I have tried many ScrollTo and many other suggestion but I am not able to catch the exact issue why this is happening , any suggestion will be really helpful."},{"Id":"8378426695","Type":"PullRequestEvent","CreatedAt":"2018-10-06T14:13:50","Actor":"AndreiMisiukevich","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/4019","RelatedDescription":"Opened pull request \"Fix typeface reset issue\" (#4019) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\n\r\nForce call UpdateFont after UpdateInputType\r\n\r\n### Issues Resolved ### \r\n\r\n- fixes https://github.com/xamarin/Xamarin.Forms/issues/4018\r\n\r\n### API Changes ###\r\n\r\nChanged: private UpdateInputType method (call UpdateFont at end of this method)\r\n \r\n### Platforms Affected ### \r\n- Android\r\n\r\n### Behavioral/Visual Changes ###\r\nFont isn't affected during changing properties which are described in issue.\r\n\r\n### Testing Procedure ###\r\nTry this changes with https://github.com/xamarin/Xamarin.Forms/issues/4018 sample\r\n\r\n"},{"Id":"8378420131","Type":"IssuesEvent","CreatedAt":"2018-10-06T14:09:35","Actor":"AndreiMisiukevich","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/4018","RelatedDescription":"Opened issue \"[Android] Entry resets FontFamily to default\" (#4018) at xamarin/Xamarin.Forms","RelatedBody":"### Description\r\nEntry resets FontFamily to default after changing one of next props\r\n1) IsPassword\r\n2) Keyboard\r\n3) IsSpellCheckEnabled\r\n4) IsTextPredictionEnabled\r\n\r\n### Steps to Reproduce\r\nSample for reproducing this issue\r\n\r\nDownload sample and press button twice (it changes IsPassword prop)\r\n\r\n### Expected Behavior\r\nFontFamily shouldn't be changed\r\n\r\n### Actual Behavior\r\nIt resets to default state\r\n\r\n### Basic Information\r\n\r\n- Version with issue: 3.2.0.871581\r\n- Last known good version: no info\r\n- IDE: VS for mac\r\n\r\n**Android**\r\n\r\n### Screenshots\r\n\r\n<!-- If the issue is a visual issue, please include screenshots showing the problem if possible -->\r\n\r\n### Reproduction Link\r\n\r\n[FontFamilyIssue.zip](https://github.com/xamarin/Xamarin.Forms/files/2453083/FontFamilyIssue.zip)\r\n"},{"Id":"8377955669","Type":"IssuesEvent","CreatedAt":"2018-10-06T08:20:33","Actor":"jingliancui","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/4017","RelatedDescription":"Opened issue \"native forms feature cannot use the application.current.resource for style \" (#4017) at xamarin/Xamarin.Forms","RelatedBody":"Hi,\r\nI want use the native forms feature re-use the mvvm and xaml files from project-forms:\r\nhttps://docs.microsoft.com/en-us/xamarin/xamarin-forms/platform/native-forms\r\n\r\n\r\nafter all done, I found that I can not use the app's xaml's resource second time.(first time will be loaded fine,but then reuse to navigate to the page again,it not loaded)\r\n\r\nI know that problem in the each native project's `new App` code,but I don't know how fix it."},{"Id":"8377941031","Type":"IssuesEvent","CreatedAt":"2018-10-06T08:08:37","Actor":"jingliancui","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/3940","RelatedDescription":"Reopened issue \"UWP's TitleView of the MasterDetailPage's Detail not shown\" (#3940) at xamarin/Xamarin.Forms","RelatedBody":"Hi，\r\n\r\nI Use a navigationpage.titleview in the Xamarin.form app now,\r\nMasterDetailPage is myapp's root page.\r\nAnd the Detail property of the MasterDetailPage is a navigationpage object:\r\n\r\n```\r\n<MasterDetailPage.Detail>\r\n        <NavigationPage Style=\"{DynamicResource navigationPageStyle}\">\r\n            <x:Arguments>\r\n                <local:IndexView></local:IndexView>\r\n            </x:Arguments>\r\n        </NavigationPage>\r\n    </MasterDetailPage.Detail>\r\n```\r\n\r\n\r\nIndexView is a TabbedPage object. And codes at IndexView.xaml use these titleview:\r\n\r\n```\r\n<NavigationPage.TitleView>\r\n        <Grid BackgroundColor=\"White\">\r\n            <Grid.ColumnDefinitions>\r\n                <ColumnDefinition Width=\"*\"></ColumnDefinition>\r\n                <ColumnDefinition Width=\"auto\"></ColumnDefinition>\r\n            </Grid.ColumnDefinitions>\r\n            <Entry VerticalOptions=\"Center\" Placeholder=\"Search\">\r\n                <Grid.Column>0</Grid.Column>\r\n            </Entry>\r\n            <Button VerticalOptions=\"Center\" Text=\"Go\">\r\n                <Grid.Column>1</Grid.Column>\r\n            </Button>\r\n        </Grid>\r\n    </NavigationPage.TitleView>\r\n```\r\n\r\n\r\nAndroid is fine.\r\nIOS not check .\r\nUWP not show.\r\n\r\nBut，after I use an NavigationPage as parent which wrap the MasterDetailPage,\r\nThe titleview show !\r\nBut that will found another issue that , the NavigationPage which wrap the MasterDetailPage, its' BarBackgroundColor or BackgroundColor can not be changed .\r\nThat I can't  go on my customer theme work."},{"Id":"8377831618","Type":"PullRequestEvent","CreatedAt":"2018-10-06T06:36:32","Actor":"duracellko","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/4016","RelatedDescription":"Opened pull request \"Issue 3715\" (#4016) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\n\r\nMakes behavior of **ListView** without **ItemTemplate** compatible with Xamarin.Forms version 2.x. Behavior of **ListView** with **ItemTemplate** specified is not changed.\r\n\r\nXamarin.Forms version 2.x used directly `ToString` method on each item, when `ItemTemplate` was not specified. Version 3.x changed from direct `ToString` call to data binding. This works fine, when item is string. However, binding results to empty cell (with null value), when item is not string type. Therefore it introduces incompatibility between Xamarin.Forms version 2 and 3.\r\n\r\nThis change introduces `ToStringValueConverter` that converts any object to string using `object.ToString` or `IFormattable.ToString`. This value converter is then used with data binding in `ListView` without `ItemTemplate`.\r\n\r\n### Issues Resolved ### \r\n\r\n- fixes #3715 \r\n\r\n### API Changes ###\r\n\r\nAdded:\r\n - class ToStringValueConverter : IValueConverter\r\n\r\n### Platforms Affected ### \r\n\r\n- Core/XAML (all platforms)\r\n\r\n### Behavioral/Visual Changes ###\r\n\r\nThis update makes `ListView` without `ItemTemplate` behavior compatible with Xamarin.Forms version 2.x. It means that string values are displayed, when `ItemsSource` contains other objects than strings.\r\n\r\n### Before/After Screenshots ### \r\n\r\nNot applicable\r\n\r\n### Testing Procedure ###\r\n\r\nAdded unit tests to cover the changes. Integration tests were not modified.\r\n\r\n### PR Checklist ###\r\n\r\n- [x] Has automated tests (unit-tests only)\r\n- [x] Rebased on top of the target branch at time of PR\r\n- [x] Changes adhere to coding standard\r\n"}],"ResultType":"GitHubEvent"},"Macios":{"Events":[{"Id":"8377135361","Type":"PullRequestEvent","CreatedAt":"2018-10-05T22:47:47","Actor":"radical","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/4945","RelatedDescription":"Opened pull request \"[msbuild] Enable nuget package conflict resolution\" (#4945) at xamarin/xamarin-macios","RelatedBody":"Fixes https://github.com/mono/mono/issues/10602 .\r\n\r\nFrom the issue:\r\n```\r\nWe need to enable this to support the system assemblies conflict\r\nresolution which we now rely on for any new packages to enhance\r\ndevelopers experience and get us out of dependency on specific package\r\nversions.\r\n```"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1047580523881799680","CreatedAt":"2018-10-03T20:13:54+00:00","UserScreenname":"xamarinhq","Text":"Do both types of testing with your Visual Studio App Center CI/CD pipeline - cover the Data Access Layer with unit… https://t.co/6y14u8p3lQ","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":64,"FavoriteCount":32,"RawContent":null},{"Id":"1046875654631886850","CreatedAt":"2018-10-01T21:33:00+00:00","UserScreenname":"xamarinhq","Text":"Microsoft named a leader in 2018 analyst reports on mobile app development. Get complimentary access to reports fro… https://t.co/EWg450kHpI","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":69,"FavoriteCount":30,"RawContent":null},{"Id":"1041764665536196609","CreatedAt":"2018-09-17T19:03:45+00:00","UserScreenname":"xamarinhq","Text":"...released to NuGet today, Xamarin.Forms 3.2.0. We've kicked off another round of updates, and this time we tackle… https://t.co/zyFILHsEUu","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":201,"FavoriteCount":109,"RawContent":null},{"Id":"1039264258511527936","CreatedAt":"2018-09-10T21:28:02+00:00","UserScreenname":"xamarinhq","Text":"Watch #dotNETConf Live! The 3-day virtual developer conference co-organized by the .NET community and Microsoft is… https://t.co/bM5JCj7M0h","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":95,"FavoriteCount":54,"RawContent":null},{"Id":"1037778121582419970","CreatedAt":"2018-09-06T19:02:39+00:00","UserScreenname":"xamarinhq","Text":"Get started with AI without being a machine learning or data science expert... New on the Xamarin Blog: Using Objec… https://t.co/uwpu4pUWFj","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":92,"FavoriteCount":45,"RawContent":null},{"Id":"1035572899996987397","CreatedAt":"2018-08-31T16:59:54+00:00","UserScreenname":"xamarinhq","Text":"Xamarin and .NET Developer Events in September\nHere are all the links you'll need to get involved.… https://t.co/YJAa83E61y","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":51,"FavoriteCount":36,"RawContent":null},{"Id":"1032375788375498753","CreatedAt":"2018-08-22T21:15:43+00:00","UserScreenname":"xamarinhq","Text":"Getting Started with Android Pie. Now you can download the support for #AndroidPie inside https://t.co/7TMjXUsU4u 9… https://t.co/sNrOIuI741","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":54,"FavoriteCount":42,"RawContent":null},{"Id":"1031653104394096640","CreatedAt":"2018-08-20T21:24:01+00:00","UserScreenname":"xamarinhq","Text":"Hey, Xamarin developers. It's time to explore and learn about the latest and greatest iOS 12 ARKit Capabilities w/… https://t.co/6x3vq5IuEb","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":123,"FavoriteCount":80,"RawContent":null},{"Id":"1029840138099220487","CreatedAt":"2018-08-15T21:19:57+00:00","UserScreenname":"xamarinhq","Text":"Attend A #dotNETConf Event Near You - https://t.co/VrHYwnCS69\n\nIt's a FREE, 3-day virtual dev event co-organized by… https://t.co/tqMWcB8mJz","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":53,"FavoriteCount":35,"RawContent":null},{"Id":"1026898128509825024","CreatedAt":"2018-08-07T18:29:27+00:00","UserScreenname":"xamarinhq","Text":"- Authentication   - Encryption   - Integrity\n3 important requirements to securing network communications &amp; absolut… https://t.co/hDPkHLZsLA","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":95,"FavoriteCount":50,"RawContent":null},{"Id":"1025442837813518336","CreatedAt":"2018-08-03T18:06:38+00:00","UserScreenname":"xamarinhq","Text":"Want to use a single code base for multiple platforms and devices? Of course you do. ...just posted to our Xamarin… https://t.co/qJBV4vvEir","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":181,"FavoriteCount":89,"RawContent":null},{"Id":"1024752638599028736","CreatedAt":"2018-08-01T20:24:02+00:00","UserScreenname":"xamarinhq","Text":"This year’s #dotNETConf is coming 9/12-14. Live sessions w/ speakers from the community &amp; it's your chance to learn… https://t.co/Nujb04dGd4","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":74,"FavoriteCount":47,"RawContent":null},{"Id":"1024013376295452672","CreatedAt":"2018-07-30T19:26:28+00:00","UserScreenname":"xamarinhq","Text":"Here's everything you need to know to integrate automated visual UI tests into a dev toolchain that includes an… https://t.co/12Ihjj4bSN","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":123,"FavoriteCount":60,"RawContent":null}]}},"RunOn":"2018-10-07T05:30:54.6804135Z","RunDurationInMilliseconds":3954}