{"Data":{"GitHubIssues":{"Issues":[{"Id":"349863851","IsPullRequest":false,"CreatedAt":"2018-08-13T01:44:47","Actor":"rpedretti","Number":"1302","RawContent":null,"Title":"[Quesion] JS Context is different when published","State":"open","Body":"At my machine, in Release build, the `window.AmbientLightSensor` does exists, but after publishing it to Azure the JS context is not the same as running it at localhost.\r\n\r\nIs it a bug or a special config is needed to work as expected?","Url":"https://github.com/aspnet/Blazor/issues/1302","RelatedDescription":"Open issue \"[Quesion] JS Context is different when published\" (#1302)"},{"Id":"349856711","IsPullRequest":false,"CreatedAt":"2018-08-13T01:15:31","Actor":"rpedretti","Number":"1301","RawContent":null,"Title":"Access to Web Apis is different from expected","State":"closed","Body":"Trying to access a Web Api (window.AmbientLightSensor) from a blaro app does not work while accessig it from a simple index.html works. I tested on Chrome with the requred flags on. When checking for it I noticed that on the blazor app the `window` object does not have `AmbientLightSensor`  while on the simple index.html the `AmbientLightSensor` do exists.","Url":"https://github.com/aspnet/Blazor/issues/1301","RelatedDescription":"Closed issue \"Access to Web Apis is different from expected\" (#1301)"},{"Id":"349776142","IsPullRequest":false,"CreatedAt":"2018-08-12T04:24:12","Actor":"kevinjpetersen","Number":"1299","RawContent":null,"Title":"Ready for Production Projects?","State":"closed","Body":"Hello I found this awesome framework from watching the Microsoft Build Conference and I really like it. It's amazing!\r\n\r\nSince this is still in experimental stage, I was wondering if there would be any negative impacts of making a production ready project built on Blazor? I have a website that I need to port from ColdFusion onto ASP.NET Core, and by using Blazor's framework it's gonna speed up porting time faster than ever!\r\n\r\nAm I ok to do this, or should I wait until an actual \"finished release\" of Blazor?\r\n\r\nThanks :)","Url":"https://github.com/aspnet/Blazor/issues/1299","RelatedDescription":"Closed issue \"Ready for Production Projects?\" (#1299)"},{"Id":"349778312","IsPullRequest":false,"CreatedAt":"2018-08-12T02:21:37","Actor":"enetstudio","Number":"1300","RawContent":null,"Title":"Please, Update Blazor FlightFinder to 0.5.0","State":"open","Body":"Thanks","Url":"https://github.com/aspnet/Blazor/issues/1300","RelatedDescription":"Open issue \"Please, Update Blazor FlightFinder to 0.5.0\" (#1300)"},{"Id":"349756974","IsPullRequest":false,"CreatedAt":"2018-08-11T19:11:49","Actor":"Mitch528","Number":"1298","RawContent":null,"Title":"Getting weird build error MSB4062","State":"open","Body":"All of a sudden I've been starting to get this build error:\r\n\r\nC:\\Users\\mitch\\.nuget\\packages\\microsoft.aspnetcore.blazor.build\\0.5.1\\targets\\RazorCompilation.targets(184,5): error MSB4062: The \"Microsoft.AspNetCore.Razor.Tasks.RazorGenerate\" task could not be loaded from the assembly C:\\Users\\mitch\\.nuget\\packages\\microsoft.aspnetcore.razor.design\\2.1.0\\build\\netstandard2.0\\..\\..\\\\tasks\\netstandard2.0\\Microsoft.AspNetCore.Razor.Tasks.dll. Assembly with same name is already loaded Confirm that the <UsingTask> declaration is correct, that the assembly and all its dependencies are available, and that the task contains a public class that implements Microsoft.Build.Framework.ITask.\r\n\r\nThe project was running before just fine too. It seems to have started happening once I ran another ASP.NET Core (non-blazor) project. I've tried cleaning/rebuilding the project and clearing nuget locals, but I can't seem to fix it.\r\n\r\nSeems to be related to #1107 ","Url":"https://github.com/aspnet/Blazor/issues/1298","RelatedDescription":"Open issue \"Getting weird build error MSB4062\" (#1298)"},{"Id":"349738291","IsPullRequest":false,"CreatedAt":"2018-08-11T15:58:26","Actor":"MarkStega","Number":"1297","RawContent":null,"Title":"[Documentation] Dependency Injection","State":"closed","Body":"If I follow the pattern shown in the Blazor DI documentation and have two services, RestBaseService & RestProcessService that have an injection of\r\n```\r\n            services.AddTransient<IRestBaseService, RestBaseService>();\r\n            services.AddTransient<IRestProcessService, RestProcessService>();\r\n```\r\nthen I can't have a constructor injection that refers to RestBaseService; it has to refer to IRestBaseService like this\r\n```\r\n        public RestProcessService(\r\n            IRestBaseService p_RestBaseService,\r\n            ILogger<LoggingFramework> p_Logger)\r\n        {\r\n            m_RestBaseService = (RestBaseService)p_RestBaseService;\r\n            m_Logger = p_Logger;\r\n            p_Logger.LogDebug(\"RestProcessService constructor\");\r\n        }\r\n```\r\nIf I try that same constructor with RestBaseService an error is thrown saying that that type can not be resolved.\r\n\r\nIf I change the service registration to just reference the class\r\n```\r\n            services.AddTransient<RestBaseService>();\r\n            services.AddTransient<RestProcessService>();\r\n```\r\nthen I can use the class name in constructors. Then in BrowserServiceProvider.cs I see yet another form of service registration that appears to add explicit instances to the services collection\r\n```\r\n        private void AddDefaultServices(ServiceCollection serviceCollection)\r\n        {\r\n            serviceCollection.AddSingleton<IUriHelper>(BrowserUriHelper.Instance);\r\n            serviceCollection.AddSingleton(new HttpClient(new BrowserHttpMessageHandler())\r\n            {\r\n                BaseAddress = new Uri(BrowserUriHelper.Instance.GetBaseUri())\r\n            });\r\n        }\r\n```\r\n\r\nAll said, I think that the DI documentation page needs a little beefing up to explain the different scenarios because if you follow its guidance now the outcome is poor.","Url":"https://github.com/aspnet/Blazor/issues/1297","RelatedDescription":"Closed issue \"[Documentation] Dependency Injection\" (#1297)"},{"Id":"349376838","IsPullRequest":true,"CreatedAt":"2018-08-11T03:35:28","Actor":"rynowak","Number":"1291","RawContent":null,"Title":"Install ASP.NET Core runtime","State":"closed","Body":"This will make sure the build script includes the ASP.NET Core runtime\r\nwhen running on local .NET. The effect of this is that our test projects\r\nand apps will 'roll forward' unto the newest runtime without us\r\nhardcoding it.","Url":"https://github.com/aspnet/Blazor/pull/1291","RelatedDescription":"Closed or merged PR \"Install ASP.NET Core runtime\" (#1291)"},{"Id":"349685630","IsPullRequest":true,"CreatedAt":"2018-08-10T23:40:47","Actor":"rynowak","Number":"1296","RawContent":null,"Title":"Merge sibling nodes during markup block rewrite","State":"open","Body":"This change adds the ability to merge sibling nodes when possible during\r\nmarkup block rewriting. We retain that invariant that each markup block\r\nis a valid chunk of markup containing properly nested tags.\r\n\r\nWe still haven't done any work to remove whitespace yet, so most of the\r\ncases where this comes into play right now will merge an element with\r\nits surrounding whitespace.","Url":"https://github.com/aspnet/Blazor/pull/1296","RelatedDescription":"Open PR \"Merge sibling nodes during markup block rewrite\" (#1296)"},{"Id":"348981667","IsPullRequest":true,"CreatedAt":"2018-08-10T23:29:40","Actor":"rynowak","Number":"1286","RawContent":null,"Title":"Reenable markup blocks","State":"closed","Body":"There were two problems here:\r\n- We weren't incrementing child count inside child content - fixed in #1290\r\n- We weren't dealing with HTML entities correctly (fixed in this PR)","Url":"https://github.com/aspnet/Blazor/pull/1286","RelatedDescription":"Closed or merged PR \"Reenable markup blocks\" (#1286)"},{"Id":"349669075","IsPullRequest":false,"CreatedAt":"2018-08-10T21:58:57","Actor":"rpedretti","Number":"1295","RawContent":null,"Title":"Getting erro calling registered JSInvokable function in component lib","State":"open","Body":"I have a Component lib created using the blazom component lib template (CLI) asn have registered a instance method to be invokable in th JS side\r\n\r\n```\r\n[JSInvokable]\r\npublic Task ClearSelection()\r\n{\r\n...\r\n}\r\n```\r\n\r\nBut when calling it i get the following error:\r\n\r\n```\r\nError: System.InvalidOperationException: The assembly 'RPedretti.Blazor.Components' contains more than one [JSInvokable] method with identifier 'ClearSelection'. All [JSInvokable] methods within the same assembly must have different identifiers. You can pass a custom identifier as a parameter to the [JSInvokable] attribute.\r\n```\r\n\r\nI tried to to register using a identifyer but the error remains. This doesn't happens in a instance method registered in the main assembly","Url":"https://github.com/aspnet/Blazor/issues/1295","RelatedDescription":"Open issue \"Getting erro calling registered JSInvokable function in component lib\" (#1295)"},{"Id":"349563030","IsPullRequest":false,"CreatedAt":"2018-08-10T15:37:02","Actor":"masonwheeler","Number":"1294","RawContent":null,"Title":"What can cause Navigation to completely stop working?","State":"open","Body":"I have a very strange situation in my Blazor app.  Everything was working fine until I updated to 0.5.  Now navigation is broken... mostly.\r\n\r\nI can load up the SPA, and whatever page the URL is pointing to comes up as expected.  But if I try to click any link, the URL in the browser's address bar changes, but no content takes place.  The `OnInit` for the target page never gets called (verified by putting a `Console.WriteLine` in the `OnInit`) and neither does the `IUriHelper.OnLocationChanged` event.\r\n\r\nHowever, I have a few pages that perform validation in their `OnInit`, and navigate you to `/` if you're not a valid user.  When I enter one of these pages in the address bar, I end up getting redirected to the SPA's homepage as expected, which means that as of `OnInit` time, navigation is working, but at some later point it's breaking.\r\n\r\nNo errors are getting logged to the console when I click a link.\r\n\r\nI've ruled out that it's any of my external JS scripts by disabling them. The problem still occurs.\r\n\r\nIt appears that the relevant code that performs the navigation is in [UriHelper.ts](https://github.com/aspnet/Blazor/blob/master/src/Microsoft.AspNetCore.Blazor.Browser.JS/src/Services/UriHelper.ts), but I can't find any of that code in `blazor.webassembly.js`, or anywhere in the `dist\\_framework` subtree for that matter, to attempt to debug it.  So at this point I'm completely at a loss for what to do next.\r\n\r\nSomething is disabling navigation, and doing so in such a way that no errors get displayed on the console.  I don't know what or why.  How do I track it down?","Url":"https://github.com/aspnet/Blazor/issues/1294","RelatedDescription":"Open issue \"What can cause Navigation to completely stop working?\" (#1294)"},{"Id":"349490865","IsPullRequest":false,"CreatedAt":"2018-08-10T12:07:18","Actor":"pavel-purma","Number":"1293","RawContent":null,"Title":"Nested div onclick event","State":"open","Body":"I have a overlay background element and dialog inside. The problem is that onclick event of overlay div is fired event if that div is under dialog. That cause me closing the dialog. Then I tried to solve that by addEventListener via JSInterop and use e.stopPropagation() but it fail another way. It stop all blazor onclick events inside of popup dialog. Blazor use document as the only point to attach event listeners. Should I use other way to stop propagation in blazor ?","Url":"https://github.com/aspnet/Blazor/issues/1293","RelatedDescription":"Open issue \"Nested div onclick event\" (#1293)"},{"Id":"349460575","IsPullRequest":false,"CreatedAt":"2018-08-10T10:38:25","Actor":"montyclt","Number":"1292","RawContent":null,"Title":"SessionStorage and LocalStorage","State":"closed","Body":"There are any API to save C# objects in SessionStorage or LocalStorage?\r\n\r\nExample:\r\n```\r\nvar person = new Person(\"Monty\");\r\n\r\nLocalStorage.Session.StoreObject(\"key\", person);\r\n\r\n// I thinked use generic to implicitly cast saved object to generic type.\r\nvar retrievedPerson = LocalStorage.Session.RetrieveObject<Person>(\"key\");\r\n\r\n// Allow explicit cast too...\r\nvar retrievedPerson = LocalStorage.Session.RetriveObject(\"key\") as Person;\r\nvar retrievedPerson = (Person)LocalStorage.Session.RetrieveObject(\"key\");\r\n```","Url":"https://github.com/aspnet/Blazor/issues/1292","RelatedDescription":"Closed issue \"SessionStorage and LocalStorage\" (#1292)"},{"Id":"348194192","IsPullRequest":false,"CreatedAt":"2018-08-10T10:10:08","Actor":"LunicLynx","Number":"1273","RawContent":null,"Title":"Version 0.5.0 and 0.5.1 tags are incorrect","State":"closed","Body":"0.5.0 should be at 201c2a4746664cfba4b2519befaea4e604acef0a\r\n0.5.1 should be at e93a47b83f98ee2c82167c2b0738c9e58f8487d0\r\n\r\nCurrently they both point at 0.6.0-preview1","Url":"https://github.com/aspnet/Blazor/issues/1273","RelatedDescription":"Closed issue \"Version 0.5.0 and 0.5.1 tags are incorrect\" (#1273)"},{"Id":"349106815","IsPullRequest":false,"CreatedAt":"2018-08-10T10:01:14","Actor":"masonwheeler","Number":"1287","RawContent":null,"Title":"New App/Startup model is a massively breaking change","State":"closed","Body":"In the old version, I had some crucial setup that came between setting up the `ServiceProvider` and launching the `BrowserRenderer`.  It had to happen in that order because it needed access to some of the things that are automagically added to the `ServiceProvider` by the Blazor framework, which the IServiceCollection inside of the setup routine does not give you access to.\r\n\r\nThis workflow, which used to be explicit, is now broken in 5.0 because it's been replaced with reflection magic.\r\n\r\nWhat is the new way to do things such as [retrieving data from the HttpClient](https://github.com/aspnet/Blazor/issues/567#issuecomment-381226776) or setting up a lambda that calls `IUriHelper.NavigateTo` (needed so I can assign this to a delegate on a static class, so that I'm able to navigate from JS interop)?  I need both of these things, and right now they're both broken because I don't have explicit access to the `BrowserServiceProvider` object anymore.","Url":"https://github.com/aspnet/Blazor/issues/1287","RelatedDescription":"Closed issue \"New App/Startup model is a massively breaking change\" (#1287)"},{"Id":"349137124","IsPullRequest":false,"CreatedAt":"2018-08-10T09:38:58","Actor":"kant2002","Number":"1288","RawContent":null,"Title":"AutoRest generation proxy does not work","State":"closed","Body":"Basically appears similar to #1122 and #634 , but not this one.\r\n\r\nI have Blazor application with server API on http://localhost:50140 address.\r\n\r\nIn Chrome\r\n```\r\nFailed to load http://localhost/api/Dictionary/search?content=123&parseStructure=false: No 'Access-Control-Allow-Origin' header is present on the requested resource. Origin 'http://localhost:50140' is therefore not allowed access. The response had HTTP status code 502. If an opaque response serves your needs, set the request's mode to 'no-cors' to fetch the resource with CORS disabled.\r\n16:42:00.172 \r\n\r\n\r\nWASM: [System.Net.Http.HttpRequestException] TypeError: Failed to fetch\r\n```\r\nI have following code\r\n```csharp\r\nvar api = new AutoRestAPI(Http, false);\r\nthis.result = await api.ApiDictionarySearchGetAsync(content, parseStructure);\r\n// this.result = await Http.GetJsonAsync<SearchResult[]>($\"api/Dictionary/search?content={content}&parseStructure=false\");\r\n```\r\n\r\nIf I uncomment line, and use standard injected client, then things start working.\r\n\r\nThe error appears because either AutoRest incorrectly get URL to which made calls, or BrowserHttpMessageHandler does not handle some corner case.\r\n","Url":"https://github.com/aspnet/Blazor/issues/1288","RelatedDescription":"Closed issue \"AutoRest generation proxy does not work\" (#1288)"},{"Id":"349244005","IsPullRequest":false,"CreatedAt":"2018-08-09T21:27:31","Actor":"stsrki","Number":"1289","RawContent":null,"Title":"DataContract and DataMember are ignored for Json serialize/deserialize","State":"closed","Body":"I'm trying to call REST API but I keep getting 400(Bar Request). It seems that the Blazor built-in SimpleJson is ignoring DataContract and DataMember attributes.\r\n\r\n```\r\ntoken = await Http.PostJsonAsync<TokenResponse>( \"http://_my_rest_url_/api/token\", new TokenRequest\r\n{\r\n    GrantType = \"password\",\r\n    Username = \"abc\",\r\n    Password = \"123\"\r\n} );\r\n```\r\n\r\nHere are my models\r\n\r\n```\r\n[DataContract]\r\npublic class TokenRequest\r\n{\r\n    [DataMember( Name = \"grant_type\" )]\r\n    public string GrantType { get; set; }\r\n\r\n    [DataMember( Name = \"username\" )]\r\n    public string Username { get; set; }\r\n\r\n    [DataMember( Name = \"password\" )]\r\n    public string Password { get; set; }\r\n}\r\n```\r\n\r\n```\r\n[DataContract]\r\npublic class TokenResponse\r\n{\r\n    [DataMember( Name = \"token_type\" )]\r\n    public string TokenType { get; set; }\r\n\r\n    [DataMember( Name = \"access_token\" )]\r\n    public string AccessToken { get; set; }\r\n\r\n    // other members\r\n}\r\n```\r\n\r\nand this is the request that I see in the Chrome developer tools\r\n\r\n`{\"grantType\":\"password\",\"username\":\"abc\",\"password\":\"123\"}`","Url":"https://github.com/aspnet/Blazor/issues/1289","RelatedDescription":"Closed issue \"DataContract and DataMember are ignored for Json serialize/deserialize\" (#1289)"},{"Id":"349262996","IsPullRequest":false,"CreatedAt":"2018-08-09T19:40:31","Actor":"Andrzej-W","Number":"1290","RawContent":null,"Title":"UIKeyboardEventArgs.Code in Edge browser is always empty + problems with UIKeyboardEventArgs.Key","State":"open","Body":"```html\r\n<div>\r\n    <input onkeydown=\"@OnKeyDown\" />\r\n    <div>key: '@key'</div>\r\n    <div>code: '@code'</div>\r\n</div>\r\n```\r\n```c#\r\n@functions{\r\n    string key;\r\n    string code;\r\n    void OnKeyDown(UIKeyboardEventArgs eventArgs)\r\n    {\r\n        key = eventArgs.Key;\r\n        code = eventArgs.Code;\r\n    }\r\n}\r\n```\r\nThis code works in Firefox and Chrome but not in Edge.\r\nOn Windows 10 I have the following browsers:\r\n* Firefox 61.0.1\r\n* Chrome 68.0.3440.84\r\n* Edge 16.16299\r\n\r\nI have standard US layout keyboard and Windows with Polish language.\r\nEdge does not return `Code` - we cannot distinguish between left and right shift/control/alt/menu start.\r\n\r\n***Edge returns Unidentified*** in `key` for all braces, punctuation characters, etc. ,./<>?;':\"[]\\{}|-=_+ For all characters above numbers !@#$%^&*() it returns numbers, which is correct, but without `Code` it is hard to guess what key was pressed.\r\n\r\n**Blazor 0.5.1**","Url":"https://github.com/aspnet/Blazor/issues/1290","RelatedDescription":"Open issue \"UIKeyboardEventArgs.Code in Edge browser is always empty + problems with UIKeyboardEventArgs.Key\" (#1290)"},{"Id":"348201401","IsPullRequest":false,"CreatedAt":"2018-08-09T10:13:29","Actor":"osintsevvladimir","Number":"1274","RawContent":null,"Title":"[Question] Close popup window when we click on outside popup window","State":"closed","Body":"How do I handle an event \"document.onclick\" inside a DropDownList component?\r\n\r\n**Angular example:**\r\n```\r\n@Component({\r\n  host: {\r\n    '(document:click)': 'onClick($event)',\r\n  },\r\n})\r\n```","Url":"https://github.com/aspnet/Blazor/issues/1274","RelatedDescription":"Closed issue \"[Question] Close popup window when we click on outside popup window\" (#1274)"},{"Id":"348352584","IsPullRequest":false,"CreatedAt":"2018-08-09T10:11:53","Actor":"Lupusa87","Number":"1277","RawContent":null,"Title":"Access sender object inside event","State":"closed","Body":"1. Is there way to get sender object inside event (for example onclick)?\r\nCan element reference help somehow?\r\n\r\n  For example I want to access sender Button and get it's content inside onclick.\r\n\r\n2. How is possible  to access captured element reference inside onclick method for example to call some javascript function?\r\n","Url":"https://github.com/aspnet/Blazor/issues/1277","RelatedDescription":"Closed issue \"Access sender object inside event\" (#1277)"},{"Id":"348667751","IsPullRequest":false,"CreatedAt":"2018-08-09T10:08:06","Actor":"stsrki","Number":"1282","RawContent":null,"Title":"[suggestion] User-defined components with Upper-case","State":"closed","Body":"Right now it is not possible to create custom components like Button, Form, Input, etc. because it is messing with the built-in html tags that are lower-case. This is not good because if anyone wants to create custom UI library for Blazor it cannot be done nicely unless the components are named with the prefix.\r\n\r\nThis should be handled like in [react](https://reactjs.org/docs/jsx-in-depth.html#user-defined-components-must-be-capitalized), where all user-components must be named with the capital letter.\r\n\r\nPossible duplicate of [#1155](https://github.com/aspnet/Blazor/issues/1155) and [#1173](https://github.com/aspnet/Blazor/issues/1173) !","Url":"https://github.com/aspnet/Blazor/issues/1282","RelatedDescription":"Closed issue \"[suggestion] User-defined components with Upper-case\" (#1282)"},{"Id":"348674818","IsPullRequest":false,"CreatedAt":"2018-08-09T10:06:06","Actor":"MarkStega","Number":"1284","RawContent":null,"Title":"[Question] [Server side rendering] Guidance on adding logging to Blazor app","State":"closed","Body":"I had tried SSR when 0.5 arrived and other than some dropping of the SignalR update path my application worked as it did on the client.\r\n\r\nI just decided to try SSR again and the app fails. I suspect it is because the client is now filled (some say littered) with calls to Blazor.Extensions.Logging methods.\r\n\r\nI thought (looking at the architecture diagram in the 0.5 announcement blog) that I could simply add the references to NLog as I do on the web server itself.\r\n\r\nI started by removing this fragment\r\n```\r\n            services.AddLogging(builder => builder\r\n                .AddBrowserConsole() // Add Blazor.Extensions.Logging.BrowserConsoleLogger\r\n                .SetMinimumLevel(LogLevel.Trace)\r\n            );\r\n```\r\nfrom ConfigureServices(IServiceCollection services)\r\n\r\nI was immediately stymied when trying to add this fragment\r\n\r\n                   .ConfigureLogging(logging =>\r\n                       {\r\n                           logging.ClearProviders();\r\n                           logging.SetMinimumLevel(LogLevel.Trace);\r\n                       })\r\n                   .UseNLog()  // NLog: setup NLog for Dependency injection\r\nto BlazorWebAssemblyHost.CreateDefaultBuilder just as I add it to WebHost.CreateDefaultBuilder in the web server program.cs\r\n\r\nIs this an issue that the CreateDefaultBuilder has to have 'UseNLog()' added meaning that the NLog team (or I) need to write an extension to BlazorWebAssemblyHost.CreateDefaultBuilder?","Url":"https://github.com/aspnet/Blazor/issues/1284","RelatedDescription":"Closed issue \"[Question] [Server side rendering] Guidance on adding logging to Blazor app\" (#1284)"},{"Id":"348829898","IsPullRequest":false,"CreatedAt":"2018-08-08T17:55:28","Actor":"natemcmaster","Number":"1285","RawContent":null,"Title":"Move x-plat testing into VSTS","State":"open","Body":"AppVeyor and Travis are still required to provide full test coverage. To make VSTS provide the same level of coverage, we need to\r\n\r\n* Enable selenium-standalone on VSTS\r\n* Add macOS and Linux build phases\r\n* Ensure tests run with `/p:BlazorAllTests=true` (or just make this default)\r\n","Url":"https://github.com/aspnet/Blazor/issues/1285","RelatedDescription":"Open issue \"Move x-plat testing into VSTS\" (#1285)"},{"Id":"348393980","IsPullRequest":true,"CreatedAt":"2018-08-08T15:54:37","Actor":"natemcmaster","Number":"1278","RawContent":null,"Title":"Automate authenticode code-signing using Roslyn sign tool","State":"closed","Body":"This automates authenticode code-signing using the Roslyn's SignTool (which is currently being ported to Arcade) and MicroBuild (the *real* MicroBuild, not the aspnet namesake).\r\n\r\nThe biggest change here is that obj and bin folders are relocated. This is part of the upcoming convergence of KoreBuild and Arcade. It was easier to do this now to make code-signing work better with the SignTool.\r\n\r\nChanges:\r\n* Change project layout to match the expectations of Arcade and sign-tool\r\n* Add signtool config file to configure OPC, NuGet, and Authenticode signing\r\n* Fix a bug when BaseIntermediateOutputPath is set to an absolute path\r\n* Split the build definition into ci-public and ci-official. ci-public does not code-sign.\r\n\r\n~~TODO: flip from 'test' to 'real' signing once ticket 79507967 is approved.~~\r\n\r\nResolves #1269 ","Url":"https://github.com/aspnet/Blazor/pull/1278","RelatedDescription":"Closed or merged PR \"Automate authenticode code-signing using Roslyn sign tool\" (#1278)"},{"Id":"348400851","IsPullRequest":true,"CreatedAt":"2018-08-08T12:02:22","Actor":"RyoukoKonpaku","Number":"1280","RawContent":null,"Title":"Fix for builds when the app assembly has spaces on it's name.","State":"closed","Body":"Fixes #1279","Url":"https://github.com/aspnet/Blazor/pull/1280","RelatedDescription":"Closed or merged PR \"Fix for builds when the app assembly has spaces on it's name.\" (#1280)"},{"Id":"348400718","IsPullRequest":false,"CreatedAt":"2018-08-08T12:02:22","Actor":"RyoukoKonpaku","Number":"1279","RawContent":null,"Title":"Project Build fails when startup assembly has spaces.","State":"closed","Body":"## Bug Description\r\nIt seems that the 0.5.1 templates fails to build when the solution name has spaces. The build task only gets a portion of the solution folder name as it's arguments for the CLI. The specific error is the ```_GenerateBlazorBootJson``` task on the ```write-boot-json``` part.\r\n## Repro steps\r\n - Create a project with a solution name that has spaces e.g. ```Some Spaced name```\r\n - Build the solution\r\n\r\nThe fix is to add quotes on the ```@(IntermediateAssembly)``` for the Exe task.","Url":"https://github.com/aspnet/Blazor/issues/1279","RelatedDescription":"Closed issue \"Project Build fails when startup assembly has spaces.\" (#1279)"},{"Id":"348668270","IsPullRequest":false,"CreatedAt":"2018-08-08T10:32:50","Actor":"springy76","Number":"1283","RawContent":null,"Title":"SimpleJson is not compiled with SIMPLE_JSON_READONLY_COLLECTIONS","State":"open","Body":"All my existing types for REST serialization use `IReadOnlyCollection<T>` for nested collections, and refactoring that to any other type (no matter if `ICollection<T>`, `T[]` or `List<T>`) introduces a huge amount of strong PITA problems.\r\n\r\nSo please define `SIMPLE_JSON_READONLY_COLLECTIONS` either directly in [code](https://github.com/aspnet/Blazor/blob/90cf6ce5a7b77616b2dae8f9e6d92967299de89d/src/Microsoft.JSInterop/Json/SimpleJson/SimpleJson.cs#L34) or in whatever project which includes and compiles that file.","Url":"https://github.com/aspnet/Blazor/issues/1283","RelatedDescription":"Open issue \"SimpleJson is not compiled with SIMPLE_JSON_READONLY_COLLECTIONS\" (#1283)"},{"Id":"348247730","IsPullRequest":false,"CreatedAt":"2018-08-08T04:49:45","Actor":"gsmental","Number":"1275","RawContent":null,"Title":"calling/downloading common Dlls  from CDN, like android downloadable fonts","State":"closed","Body":"Is it possible to downloading common Dlls  from  any CDN, , like android has facility to  downloadable fonts from url. \r\n\r\nIt can reduce band-width cost and Common AspNet.Core dlls will be available for all users. it is thinking.","Url":"https://github.com/aspnet/Blazor/issues/1275","RelatedDescription":"Closed issue \"calling/downloading common Dlls  from CDN, like android downloadable fonts\" (#1275)"},{"Id":"348507489","IsPullRequest":false,"CreatedAt":"2018-08-08T03:09:12","Actor":"kiegh","Number":"1281","RawContent":null,"Title":"JsonPatchDocument","State":"closed","Body":"I'm a bit confused as to how we should create a patch document in Blazor to pass to our API for partial updates?\r\n\r\nDoes anyone have any tips?\r\n","Url":"https://github.com/aspnet/Blazor/issues/1281","RelatedDescription":"Closed issue \"JsonPatchDocument\" (#1281)"},{"Id":"348293853","IsPullRequest":false,"CreatedAt":"2018-08-07T14:44:20","Actor":"Amine-Smahi","Number":"1276","RawContent":null,"Title":"How to deploy Blazor (Server-side in ASP.NET Core) project","State":"closed","Body":"A tutorial may help.","Url":"https://github.com/aspnet/Blazor/issues/1276","RelatedDescription":"Closed issue \"How to deploy Blazor (Server-side in ASP.NET Core) project\" (#1276)"}],"ResultType":"GitHubIssue"}},"RunOn":"2018-08-13T05:30:02.8853692Z","RunDurationInMilliseconds":1360}