{"Data":{"Blog":{"FeedItems":[{"Title":"Release Candidate builds of Entity Framework Core 3.0 and Entity Framework 6.3 are now available","PublishedOn":"2019-09-16T21:47:32+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We previously said that preview 9 would be your last chance to test EF Core 3.0 and EF 6.3 before general availability. But it turns out that we made enough improvements to our libraries and across...","Href":"https://devblogs.microsoft.com/dotnet/release-candidate-builds-of-entity-framework-core-3-0-and-entity-framework-6-3-are-now-available/","RawContent":null},{"Title":"Announcing .NET Core 3.0 Release Candidate 1","PublishedOn":"2019-09-16T18:45:09+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"Today, we&#8217;re announcing .NET Core 3.0 Release Candidate 1. Just like with Preview 9, we&#8217;ve focused on polishing .NET Core 3.0 for a final release. We are now getting very, very close. We...","Href":"https://devblogs.microsoft.com/dotnet/announcing-net-core-3-0-release-candidate-1/","RawContent":null},{"Title":"Finalization implementation details","PublishedOn":"2019-09-16T17:43:41+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Years ago I wrote a document on making finalization scanning concurrent. At the time there was an internal team that was using finalization as a way to resurrect objects and putting them back in their...","Href":"https://devblogs.microsoft.com/dotnet/finalization-implementation-details/","RawContent":null},{"Title":".NET Framework September 2019 Security and Quality Rollup","PublishedOn":"2019-09-10T18:54:39+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, we are releasing the September 2019 Cumulative Update, Security and Quality Rollup, and Security Only Update for .NET Framework.\nSecurity\nCVE-2019-1142– .NET Framework Elevation of Privilege...","Href":"https://devblogs.microsoft.com/dotnet/net-framework-september-2019-security-and-quality-rollup/","RawContent":null},{"Title":".NET Core September 2019 Updates – 2.1.13 and 2.2.7","PublishedOn":"2019-09-10T17:17:31+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Today, we are releasing the .NET Core September 2019 Update. These updates contain security and reliability fixes. See the individual release notes for details on updated packages.\nNOTE: If you are a...","Href":"https://devblogs.microsoft.com/dotnet/net-core-september-2019/","RawContent":null},{"Title":"GC Perf Infrastructure – Part 0","PublishedOn":"2019-09-10T05:43:17+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"In this blog entry and some future ones I will be showing off functionalities that our new GC perf infrastructure provides. Andy and I have been working on it (he did all the work; I merely played the...","Href":"https://devblogs.microsoft.com/dotnet/gc-perf-infrastructure-part-0/","RawContent":null},{"Title":"Announcing Entity Framework Core 3.0 Preview 9 and Entity Framework 6.3 Preview 9","PublishedOn":"2019-09-05T00:25:11+00:00","CommentsCount":22,"FacebookCount":0,"Summary":"The Preview 9 versions of the EF Core 3.0 package and the EF 6.3 package are now available for download from nuget.org.\nThese are the last planned previews before we release the final versions later...","Href":"https://devblogs.microsoft.com/dotnet/announcing-entity-framework-core-3-0-preview-9-and-entity-framework-6-3-preview-9/","RawContent":null},{"Title":"Announcing .NET Core 3.0 Preview 9","PublishedOn":"2019-09-04T19:00:55+00:00","CommentsCount":26,"FacebookCount":0,"Summary":"Today, we&#8217;re announcing .NET Core 3.0 Preview 9. Just like with Preview 8, we&#8217;ve focused on polishing .NET Core 3.0 for a final release and aren&#8217;t adding new features. If these final...","Href":"https://devblogs.microsoft.com/dotnet/announcing-net-core-3-0-preview-9/","RawContent":null},{"Title":"Hardware Intrinsics in .NET Core","PublishedOn":"2019-09-03T22:35:55+00:00","CommentsCount":16,"FacebookCount":0,"Summary":"Several years ago, we decided that it was time to support SIMD code in .NET. We introduced the System.Numerics namespace with Vector2, Vector3, Vector4, Vector&#60;T&#62;, and related types. These...","Href":"https://devblogs.microsoft.com/dotnet/hardware-intrinsics-in-net-core/","RawContent":null},{"Title":"Announcing ML.NET 1.4 Preview and Model Builder updates (Machine Learning for .NET)","PublishedOn":"2019-09-03T18:00:35+00:00","CommentsCount":13,"FacebookCount":0,"Summary":"We are excited to announce ML.NET 1.4 Preview and updates to Model Builder and CLI.\nML.NET is an open-source and cross-platform machine learning framework for .NET developers. ML.NET also includes...","Href":"https://devblogs.microsoft.com/dotnet/announcing-ml-net-1-4-preview-and-model-builder-updates-machine-learning-for-net/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"10123005051","Type":"IssuesEvent","CreatedAt":"2019-07-31T19:23:23","Actor":"MeikTranel","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/issues/148","RelatedDescription":"Opened issue \"Clarify guidelines in regards to Options and Requirements\" (#148) at dotnet/foundation","RelatedBody":"I'd be interested in which part of the project submission guidelines is optional and which are deal breaker requirements.\r\n\r\n- Is the Role Matrix laid out an absolute or (as can be read between the lines) just a preset, which may be subject to individual projects needs?\r\n- Is it a strong requirement that the project uses the contributor covenant CoC?"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"10427072993","Type":"IssuesEvent","CreatedAt":"2019-09-16T19:03:54","Actor":"leecow","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/123","RelatedDescription":"Opened issue \".NET Core 3.0 RC 1\" (#123) at dotnet/announcements","RelatedBody":".NET Core RC 1 released today. https://github.com/dotnet/core/issues/3380 has been opened for discussion. \r\n\r\n[Release Notes](https://github.com/dotnet/core/blob/master/release-notes/3.0/preview/3.0.0-rc1.md)\r\n[Download](https://github.com/dotnet/core/blob/master/release-notes/3.0/preview/3.0.0-rc1-download.md)\r\n\r\n**Blog posts**\r\n\r\n[.NET Core](https://devblogs.microsoft.com/dotnet/announcing-net-core-3-0-release-candidate-1/)\r\n[ASP.NET Core](https://devblogs.microsoft.com/aspnet/asp-net-core-and-blazor-updates-in-net-core-3-0-release-candidate-1/)\r\n\r\nPlease report any issues you find with 3.0.0 RC 1, either responding to this issue, creating a new issue or creating a new issue in one of the following repos:\r\n\r\n* [aspnet/AspNetCore](https://github.com/aspnet/AspNetCore) - for ASP.NET Core questions\r\n* [aspnet/EntityFrameworkCore](https://github.com/aspnet/EntityFrameworkCore) - for Entity Framework Core questions\r\n* [dotnet/cli](https://github.com/dotnet/cli/issues) - for CLI tools and questions\r\n* [dotnet/corefx](https://github.com/dotnet/corefx/issues) - for API issues and questions\r\n* [dotnet/coreclr](https://github.com/dotnet/coreclr/issues) - for runtime issues\r\n* [dotnet/core-setup](https://github.com/dotnet/core-setup/issues) - for installer issues\r\n* [dotnet/winforms](https://github.com/dotnet/winforms/issues) - for Winforms issues\r\n* [dotnet/wpf](https://github.com/dotnet/wpf/issues) - for WPF issues\r\n* [nuget/home](https://github.com/nuget/home/issues) - for NuGet questions and issues"},{"Id":"10387173702","Type":"IssuesEvent","CreatedAt":"2019-09-10T17:23:27","Actor":"leecow","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/122","RelatedDescription":"Opened issue \"September 2019 .NET Updates\" (#122) at dotnet/announcements","RelatedBody":"The following .NET updates were released on September 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Core\r\n\r\n* .NET Core 2.1.13 and .NET Core SDK ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.13/2.1.13.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.1) )\r\n\r\n* .NET Core 2.2.7 and .NET Core SDK ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.7/2.2.7.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.2) )\r\n\r\nA discussion issue is available at [core/3345](https://github.com/dotnet/core/issues/3345)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)"},{"Id":"10387041341","Type":"IssuesEvent","CreatedAt":"2019-09-10T17:04:51","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/121","RelatedDescription":"Opened issue \"Microsoft Security Advisory CVE-2019-1301: Denial of Service Vulnerability in .NET Core\" (#121) at dotnet/announcements","RelatedBody":"# Microsoft Security Advisory CVE-2019-1301: Denial of Service Vulnerability in .NET Core\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a denial of service vulnerability when .NET Core improperly handles web requests. An attacker who successfully exploited this vulnerability could cause a denial of service against a .NET Core web application. The vulnerability can be exploited remotely, without authentication.\r\n\r\nThe update addresses the vulnerability by correcting how the .NET Core web application handles web requests.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/32971\r\n\r\n## <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nNone\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application running on .NET Core 2.1.0-2.1.12, or .NET Core 2.2.0-2.2.7\r\n\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nYou can list the versions you have installed by running the `dotnet --info` command. You will see output like the following;\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview3-010431\r\n Commit:    d72abce213\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18362\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview3-010431\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview3-27503-5\r\n  Commit:  3844df9537\r\n\r\n.NET Core SDKs installed:\r\n  2.1.604 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.202 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview3-010431 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\\\r\n  Microsoft.AspNetCore.All 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview3-19153-02 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview3-27503-5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview3-27504-2 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf you have a version of .NET Core less than 2.1.13 or less than 2.2.8, you're vulnerable.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nTo fix the issue please install the latest version of .NET Core. If you have multiple versions of .NET Core installed you will need to install multiple runtimes, or SDKs depending on what you have installed.\r\n\r\n* For machines running .NET Core 2.1, you should download Runtime 2.1.13 or SDK 2.1.509 for Visual Studio 2017 or SDK 2.1.606 for Visual Studio 2019 (v16.0) or SDK 2.1.802 for Visual Studio 2019 (v16.2) from https://dotnet.microsoft.com/download/dotnet-core/2.1.\r\n* For machines running .NET Core 2.2, you should download Runtime 2.2.7 or SDK 2.2.109 for Visual Studio 2017 or SDK 2.2.206 for Visual Studio 2019 (v16.0) or SDK 2.2.402 for Visual Studio 2019 (v16.2) from https://dotnet.microsoft.com/download/dotnet-core/2.2.\r\n\r\nIf you have both 2.1 and 2.2, you need to install updates for both versions.\r\n\r\nOnce you have installed the updated runtime or SDK, restart your apps for the update to take effect.\r\n\r\nIf you have [pinned your application](https://docs.microsoft.com/dotnet/core/versions/selection) to a specific version of the runtime, you must update your app, recompile and redeploy it for the update to take effect.\r\n\r\n# Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/, respectively. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgments\r\n\r\nPaul Ryman of VMware Sydney Engineering Team\r\n\r\n### External Links\r\n\r\n[CVE-2019-1301](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-1301)\r\n\r\n### Revisions\r\n\r\nV1.0 (September 10, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-09-10_\r\n"},{"Id":"10348207363","Type":"IssuesEvent","CreatedAt":"2019-09-04T19:14:06","Actor":"leecow","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/120","RelatedDescription":"Opened issue \".NET Core 3.0 Preview 9\" (#120) at dotnet/announcements","RelatedBody":".NET Core Preview 9 released today. https://github.com/dotnet/core/issues/3304 has been opened for discussion. \r\n\r\n[Release Notes](https://github.com/dotnet/core/blob/master/release-notes/3.0/preview/3.0.0-preview9.md)\r\n[Download](https://github.com/dotnet/core/blob/master/release-notes/3.0/preview/3.0.0-preview9-download.md)\r\n\r\n**Blog posts**\r\n\r\n[.NET Core](https://devblogs.microsoft.com/dotnet/announcing-net-core-3-0-preview-9/)\r\n[ASP.NET Core](https://devblogs.microsoft.com/aspnet/asp-net-core-and-blazor-updates-in-net-core-3-0-preview-9/)\r\n[EF Core](https://devblogs.microsoft.com/dotnet/announcing-entity-framework-core-3-0-preview-9-and-entity-framework-6-3-preview-9/)\r\n\r\nPlease report any issues you find with 3.0.0 Preview 9, either responding to this issue, creating a new issue or creating a new issue in one of the following repos:\r\n\r\n* [aspnet/Home](https://github.com/aspnet/Home) - for ASP.NET Core questions\r\n* [aspnet/EntityFrameworkCore](https://github.com/aspnet/EntityFrameworkCore) - for Entity Framework Core questions\r\n* [dotnet/cli](https://github.com/dotnet/cli/issues) - for CLI tools and questions\r\n* [dotnet/corefx](https://github.com/dotnet/corefx/issues) - for API issues and questions\r\n* [dotnet/coreclr](https://github.com/dotnet/coreclr/issues) - for runtime issues\r\n* [dotnet/core-setup](https://github.com/dotnet/core-setup/issues) - for installer issues\r\n* [dotnet/winforms](https://github.com/dotnet/winforms/issues) - for Winforms issues\r\n* [dotnet/wpf](https://github.com/dotnet/wpf/issues) - for WPF issues\r\n* [nuget/home](https://github.com/nuget/home/issues) - for NuGet questions and issues"}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"10429921271","Type":"PullRequestEvent","CreatedAt":"2019-09-17T04:52:37","Actor":"swaroop-sridhar","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/26504","RelatedDescription":"Merged pull request \"[Single-Exe] Run from bundle\" (#26504) at dotnet/coreclr","RelatedBody":"## Changes\r\n\r\ncorebundle Host:\r\n - Remove code that deals with extraction to temporary dirs.\r\n - Process the bundle manifest and export a callback to look for files in the bundle.\r\n - The TPA doesn't contain bundled assemblies any more.\r\n\r\nCoreCLR Initialization:\r\n - Setup BundleInfo structure, and pass it to appropriate initializers\r\n - Expect to find System.Private.Corelib in the bundle\r\n\r\nBundle Info:\r\n  - Holds information about the bundle\r\n  - Exports a wrapper around the bundle runner's probe function for path adjustments\r\n  - Performs Unicode/UTF8 translations as necessary (because host uses UTF8 on Unix)\r\n\r\nAppDomain:\r\n  - Add methods obtain BundleInfo\r\n\r\nBinder:\r\n  - Look for assemblies in the Bundle before searching the TPA\r\n\r\nPEImage:\r\n  - FlatImageLayout and MappedImageLayout can take files embedded within the bundle.\r\n  - Memory mapping routines can take files embedded within the bundle.\r\n\r\nA few other fixes necessary to build/run.\r\n\r\n## Testing\r\n\r\nTested templates: console, webapi\r\n\r\n## Performance\r\n\r\n### Console Hello World\r\n\r\nNo noticable change in execution time.\r\n\r\nRun from (normal) publish directory: 104ms\r\nRun from single-file: 99ms\r\n\r\n### Startup of WebApiTemplate:\r\nMeasured using https://github.com/rynowak/link-a-thon on a local (real) machine.\r\n\r\nBoth cases had runs with similar timing; but the average startup was consistently slightly faster for single-exe runs.\r\n\r\nRun from (normal) publish directory:\r\n801.8271\r\n782.9489\r\n790.8015\r\n798.7449\r\n797.3141\r\n783.0968\r\n790.0275\r\n786.7621\r\n802.2383\r\n778.9866\r\nAverage startup time (ms): 791.27478\r\n\r\nRun from single-file:\r\n742.1464\r\n692.1949\r\n795.1612\r\n798.4845\r\n809.4075\r\n794.2644\r\n790.6254\r\n634.1305\r\n686.2718\r\n806.5665\r\nAverage startup time (ms): 754.92531\r\n\r\n## Steps to build single-exe `app`\r\n\r\nThe following steps will work for most apps, minor adjustments may be necessary.\r\n* `dotnet publish -r linux-x64 -c release -o pub`\r\n* `cp pub/*.dll source/`\r\n* `cp coreclr/bin/Product/Linux.x64.Release/corebundle source/<app>`\r\n* `cp coreclr/bin/Product/Linux.x64.Release/System.Private.Corelib.dll source/`\r\n* `dotnet coreclr/bin/Product/Linux.x64.Release/bundle.dll --source source --host <app>`\r\n* Run `app`\r\n"},{"Id":"10429372389","Type":"PullRequestEvent","CreatedAt":"2019-09-17T02:30:01","Actor":"sandreenko","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/26744","RelatedDescription":"Opened pull request \"Statements: return dumping methods.\" (#26744) at dotnet/coreclr","RelatedBody":"Part of #25899 \r\n\r\n5e4b1248d5: Return dumping for Statement.\r\n\r\nReturn statements ID and implement dumping methods.\r\n\r\na0bda39c05: Delete `block->bbStmtNum` and `compiler->compCurStmtNum`.\r\n\r\nThey were duplicating `stmt->gtTreeID` in the past and it was not clear why they were added in the first place.\r\n\r\nDelete them and use `stmt->GetID()`, with `STMT%05u` format."},{"Id":"10429226182","Type":"PullRequestEvent","CreatedAt":"2019-09-17T01:53:48","Actor":"davidwrighton","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/26738","RelatedDescription":"Merged pull request \"IBC fixes\" (#26738) at dotnet/coreclr","RelatedBody":"- Support IntPtr and UIntPtr element types in IBC data\r\n- More defensive coding against structurally incorrect IBC data\r\n- Skip compilation of open method definitions\r\n- Generate IBC data without crashing when the first logged item is an InstantiatedMethod and not a token\r\n- Safely shutdown and emit IBC data from a thread that hasn't been given a Thread object"},{"Id":"10429181784","Type":"PullRequestEvent","CreatedAt":"2019-09-17T01:42:26","Actor":"davidwrighton","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/pull/26644","RelatedDescription":"Closed pull request \"[WIP] test\" (#26644) at dotnet/coreclr","RelatedBody":"Don't checkin, pr creation wasn't working correctly"},{"Id":"10429005322","Type":"PullRequestEvent","CreatedAt":"2019-09-17T00:55:55","Actor":"janvorli","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/26743","RelatedDescription":"Opened pull request \"Fix R2RDump to correctly parse array lower bounds\" (#26743) at dotnet/coreclr","RelatedBody":"There is a an incorrect size (likely a typo) used to create lower bounds\r\narray when parsing signatures. This results in `Index was outside the\r\nbounds of the array.` being printed inside of the array signature\r\nstring."}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"10427180868","Type":"IssuesEvent","CreatedAt":"2019-09-16T19:19:27","Actor":"sebastienros","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/12663","RelatedDescription":"Opened issue \"Latest version of 3.0.xx/release branch cannot be found\" (#12663) at dotnet/cli","RelatedBody":"The latest stable version of the sdk can be found here:\r\nhttps://dotnetcli.blob.core.windows.net/dotnet/Sdk/release/3.0.1xx/latest.version\r\n\r\n```\r\n02df19ceac5d194d71b04c2823b9b02ced542c44\r\n3.0.100-rc2-014261\r\n```\r\n\r\nHowever when using this feature with `dotnet-install` it can't be found. I waited a few hours in case it would be a transient issue but it's still occuring.\r\n\r\n```\r\n[12:14:50.094] dotnet-install: Downloading link: https://dotnetcli.azureedge.net/dotnet/Sdk/3.0.100-rc2-014261/dotnet-sdk-3.0.100-rc2-014261-win-x64.zip\r\n[12:14:52.274] dotnet-install: Cannot download: https://dotnetcli.azureedge.net/dotnet/Sdk/3.0.100-rc2-014261/dotnet-sdk-3.0.100-rc2-014261-win-x64.zip\r\n[12:14:52.276] dotnet-install: Downloading legacy link: https://dotnetcli.azureedge.net/dotnet/Sdk/3.0.100-rc2-014261/dotnet-dev-win-x64.3.0.100-rc2-014261.zip\r\n[12:14:54.384] dotnet-install: Cannot download: https://dotnetcli.azureedge.net/dotnet/Sdk/3.0.100-rc2-014261/dotnet-dev-win-x64.3.0.100-rc2-014261.zip\r\n[12:14:54.434] Could not find/download: \".NET Core SDK\" with version = 3.0.100-rc2-014261\r\n[12:14:54.434] Refer to: https://aka.ms/dotnet-os-lifecycle for information on .NET Core support\r\n[12:14:54.434] At C:\\Users\\Administrator\\AppData\\Local\\Temp\\BenchmarksServer\\t1usq3ss.20k\\dotnet-install.ps1:633 char:5\r\n[12:14:54.434] +     throw \"Could not find/download: `\"$assetName`\" with version = $Sp ...\r\n[12:14:54.434] +     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n[12:14:54.434]     + CategoryInfo          : OperationStopped: (Could not find/...ET Core support:String) [], RuntimeException\r\n[12:14:54.434]     + FullyQualifiedErrorId : Could not find/download: \".NET Core SDK\" with version = 3.0.100-rc2-014261\r\n[12:14:54.434] Refer to: https://aka.ms/dotnet-os-lifecycle for information on .NET Core support\r\n```"},{"Id":"10426725344","Type":"PullRequestEvent","CreatedAt":"2019-09-16T18:15:41","Actor":"dotnet-maestro[bot]","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/12662","RelatedDescription":"Merged pull request \"[master] Update dependencies from dotnet/core-setup\" (#12662) at dotnet/cli","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190916.2\r\n- **Date Produced**: 9/16/2019 4:19 PM\r\n- **Commit**: 9042fe6c81aa3b47f58ccd94ff02e42f9f7a4e46\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19466.2\r\n  - **Microsoft.NET.HostModel** -> 5.0.0-alpha1.19466.2\r\n  - **Microsoft.Extensions.DependencyModel** -> 5.0.0-alpha1.19466.2\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 5.0.0-alpha1.19466.2\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 5.0.0-alpha1.19466.2\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n"},{"Id":"10426473582","Type":"PullRequestEvent","CreatedAt":"2019-09-16T17:40:18","Actor":"dotnet-maestro[bot]","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/12662","RelatedDescription":"Opened pull request \"[master] Update dependencies from dotnet/core-setup\" (#12662) at dotnet/cli","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190916.2\r\n- **Date Produced**: 9/16/2019 4:19 PM\r\n- **Commit**: 9042fe6c81aa3b47f58ccd94ff02e42f9f7a4e46\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19466.2\r\n  - **Microsoft.NET.HostModel** -> 5.0.0-alpha1.19466.2\r\n  - **Microsoft.Extensions.DependencyModel** -> 5.0.0-alpha1.19466.2\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 5.0.0-alpha1.19466.2\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 5.0.0-alpha1.19466.2\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n"}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"10423807541","Type":"PullRequestEvent","CreatedAt":"2019-09-16T12:21:03","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/1550","RelatedDescription":"Merged pull request \"[master] Update dependencies from dotnet/corefx\" (#1550) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190915.2\r\n- **Date Produced**: 9/15/2019 6:42 PM\r\n- **Commit**: e8efb815275c8323fedc950ca3596474fa5e23c3\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19465.2\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19465.2\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19465.2\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n"},{"Id":"10423736363","Type":"PullRequestEvent","CreatedAt":"2019-09-16T12:10:56","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/1550","RelatedDescription":"Opened pull request \"[master] Update dependencies from dotnet/corefx\" (#1550) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190915.2\r\n- **Date Produced**: 9/15/2019 6:42 PM\r\n- **Commit**: e8efb815275c8323fedc950ca3596474fa5e23c3\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19465.2\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19465.2\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19465.2\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n"},{"Id":"10422145833","Type":"IssuesEvent","CreatedAt":"2019-09-16T08:19:30","Actor":"HamidTheGeek","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/1549","RelatedDescription":"Opened issue \"SqlParameter.DbType is set to Datetime when I am setting it to Time\" (#1549) at dotnet/standard","RelatedBody":"It seems like an intentional behavior but I don't get the reason. \r\n\r\n```c#\r\nvar param = new SqlParameter();\r\nparam.DbType = DbType.Time;\r\nConsole.WriteLine(param.DbType.ToString());\r\n```\r\n`DateTime` will be printed in the console. Therefore, the following value would be `false`.\r\n```c#\r\nvar param = new SqlParameter();\r\nparam.DbType = DbType.Time;\r\nvar value = param.DbType == DbType.Time;\r\n```\r\n\r\nI have tested this in `netstandard2.0`."},{"Id":"10418867152","Type":"PullRequestEvent","CreatedAt":"2019-09-15T12:21:32","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/1548","RelatedDescription":"Merged pull request \"[master] Update dependencies from dotnet/corefx\" (#1548) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190914.4\r\n- **Date Produced**: 9/15/2019 5:48 AM\r\n- **Commit**: cbcc2a5e6f8be1e43b16874ed358c18c5d6bcd5b\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19464.4\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19464.4\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19464.4\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n"},{"Id":"10418845782","Type":"PullRequestEvent","CreatedAt":"2019-09-15T12:11:27","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/1548","RelatedDescription":"Opened pull request \"[master] Update dependencies from dotnet/corefx\" (#1548) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190914.4\r\n- **Date Produced**: 9/15/2019 5:48 AM\r\n- **Commit**: cbcc2a5e6f8be1e43b16874ed358c18c5d6bcd5b\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19464.4\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19464.4\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19464.4\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n"},{"Id":"10416318935","Type":"PullRequestEvent","CreatedAt":"2019-09-14T12:32:42","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/1547","RelatedDescription":"Merged pull request \"[master] Update dependencies from dotnet/corefx\" (#1547) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190913.7\r\n- **Date Produced**: 9/14/2019 3:54 AM\r\n- **Commit**: f07730eedb1f7e2cb5e178d988bc2255f7ce7021\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19463.7\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19463.7\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19463.7\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n"}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"10429989699","Type":"PullRequestEvent","CreatedAt":"2019-09-17T05:10:50","Actor":"safern","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/41147","RelatedDescription":"Merged pull request \"Add missing dummy fields to reference assemblies\" (#41147) at dotnet/corefx","RelatedBody":"Fixes: https://github.com/dotnet/corefx/issues/40909\r\n\r\nUpdated with a locally built version of: https://github.com/dotnet/arcade/pull/3912\r\n\r\ncc: @ahsonkhan @ericstj @jkotas @stephentoub @terrajobst "},{"Id":"10429989677","Type":"IssuesEvent","CreatedAt":"2019-09-17T05:10:50","Actor":"safern","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/40909","RelatedDescription":"Closed issue \"Do a sanity check of our ref assemblies to see if any struct is missing a dummy field\" (#40909) at dotnet/corefx","RelatedBody":"Based on the following discussion: https://github.com/dotnet/standard/pull/1500#discussion_r321741920\r\n\r\nWe should do a sanity check to find out if we're missing any dummy field from any significant structs in our ref assemblies.\r\n\r\ncc: @stephentoub @ahsonkhan @ericstj "},{"Id":"10429036194","Type":"PullRequestEvent","CreatedAt":"2019-09-17T01:04:04","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/41142","RelatedDescription":"Merged pull request \"Remove use of non-generic Queue/Stack in System.Private.Xml\" (#41142) at dotnet/corefx","RelatedBody":"This is the only reason these types are brought into a trimmed default MVC app.\r\n\r\ncc: @krwq, @jkotas"},{"Id":"10428941477","Type":"PullRequestEvent","CreatedAt":"2019-09-17T00:38:33","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/41143","RelatedDescription":"Merged pull request \"Remove use of RuntimeReflectionExtensions from Microsoft.CSharp\" (#41143) at dotnet/corefx","RelatedBody":"The wrappers aren't adding any benefit and are causing us to pull in the extensions type unnecessarily (and doing unnecessary null checks); just call the underlying methods directly.\r\n\r\ncc: @cston, @jkotas"},{"Id":"10428920702","Type":"PullRequestEvent","CreatedAt":"2019-09-17T00:32:56","Actor":"MattGal","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/41149","RelatedDescription":"Opened pull request \"Fix a typo\" (#41149) at dotnet/corefx","RelatedBody":"This is here for me to monitor a totally code-change-free PR to ensure Helix is doing OK."},{"Id":"10428898755","Type":"PullRequestEvent","CreatedAt":"2019-09-17T00:27:08","Actor":"dotnet-maestro[bot]","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/41136","RelatedDescription":"Merged pull request \"[master] Update dependencies from dotnet/core-setup dotnet/corefx dotnet/standard\" (#41136) at dotnet/corefx","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:08549e3e-8f8e-4201-dc38-08d6815d521b)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190915.2\r\n- **Date Produced**: 9/16/2019 4:10 AM\r\n- **Commit**: 9042fe6c81aa3b47f58ccd94ff02e42f9f7a4e46\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19465.2\r\n  - **Microsoft.NETCore.DotNetHost** -> 5.0.0-alpha1.19465.2\r\n  - **Microsoft.NETCore.DotNetHostPolicy** -> 5.0.0-alpha1.19465.2\r\n\r\n[marker]: <> (End:08549e3e-8f8e-4201-dc38-08d6815d521b)\r\n\r\n[marker]: <> (Begin:368e60b9-57f7-48bd-020d-08d6874ba0bd)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190915.2\r\n- **Date Produced**: 9/15/2019 6:42 PM\r\n- **Commit**: e8efb815275c8323fedc950ca3596474fa5e23c3\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **runtime.native.System.IO.Ports** -> 5.0.0-alpha1.19465.2\r\n  - **Microsoft.NETCore.Platforms** -> 5.0.0-alpha1.19465.2\r\n\r\n[marker]: <> (End:368e60b9-57f7-48bd-020d-08d6874ba0bd)\r\n\r\n[marker]: <> (Begin:a2867060-7cad-40ad-7917-08d6937ac7c4)\r\n## From https://github.com/dotnet/standard\r\n- **Build**: 20190915.1\r\n- **Date Produced**: 9/15/2019 12:36 PM\r\n- **Commit**: d9f55361e33f6f8fa5002f4ad6c9bafe12b5f6aa\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **NETStandard.Library** -> 2.2.0-prerelease.19465.1\r\n\r\n[marker]: <> (End:a2867060-7cad-40ad-7917-08d6937ac7c4)\r\n\r\n"}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"10429829274","Type":"IssuesEvent","CreatedAt":"2019-09-17T04:27:21","Actor":"davkean","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/38722","RelatedDescription":"Opened issue \"[Regression] CodeLens does not work for Visual Basic\" (#38722) at dotnet/roslyn","RelatedBody":"**Version Used**: \r\nVersion 16.4.0 Preview 2.0 [29316.148.master]\r\n\r\n**Steps to Reproduce**:\r\n![image](https://user-images.githubusercontent.com/1103906/65011523-26550900-d957-11e9-89fe-bb7106b94db1.png)\r\n\r\n**Expected Behavior**:\r\nCodeLens to show\r\n\r\n**Actual Behavior**:\r\nSpace is reserved for CodeLens but the lenses themselves don't show up."},{"Id":"10429345484","Type":"PullRequestEvent","CreatedAt":"2019-09-17T02:23:23","Actor":"tmat","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/38550","RelatedDescription":"Merged pull request \"Reuse previously resolved missing assembly metadata objects when identity doesn't match\" (#38550) at dotnet/roslyn","RelatedBody":"Fixes https://github.com/dotnet/try/issues/345.\r\n\r\n**Background**\r\nWhen the compiler is resolving compilation references and encounters a reference whose assembly identity does not match any of the explicitly given references it falls back to a Reference Resolver. In regular compilation an error is reported since there is no Reference Resolver. Interactive compiler supplies a resolver that attempts to find the missing reference. \r\n\r\nOnce the missing reference is found the compiler adds it to the list of implicitly resolved assemblies and if the same missing assembly identity is referenced later (by a subsequent submission) it reuses the assembly symbol from this list, so that we don't end up loading multiple instances of the same missing assembly. [1]\r\n\r\nThe resolver may find an assembly that matches the name of the missing reference but doesn't match the version exactly. This is expected as a newer version of the assembly may be available than was referenced and the compiler correctly binds to the newer version. \r\n\r\n**Issues** \r\nThe first submission added a reference to a netstandard20 library on .NET Core and the subsequent submission referenced a type from that library. The reference resolution in the compilation corresponding to the second submission ended up adding a new, distinct reference to the library, instead of reusing the one that was already resolved for the first submission compilation.\r\n\r\nThis was caused by mismatch in versions of some of the facades transitively referenced by the library thru `netstandard.dll` reference and resolved thru the missing reference resolution mechanism. The facades ware referenced with different versions than the actual versions available in the set of references the Reference Resolver resolved missing references from. The compiler ended up using two distinct instances of the same facade assembly metadata. An assembly symbol is only reused if all its transitively referenced assemblies match. In this case the library assembly symbol wasn't reused because some of the facade assembly symbols did not match.\r\n\r\nThe problem was that the mechanism [1] didn't reuse missing assembly metadata with a different version than what was requested. The fix is to reuse all successful resolutions based on referenced identity.\r\n\r\nAnother issue found during testing is handing resolution failures. We did not remember that a resolution of a given assembly identity failed and attempted to resolve the assembly again in the next submission. This may lead to inconsistencies and the same \"can't convert T to T\" errors since first submission might have a missing assembly symbol and next might create a real assembly symbol for the same assembly identity. The fix is to capture both successful and failed resolution results."},{"Id":"10429134928","Type":"PullRequestEvent","CreatedAt":"2019-09-17T01:30:07","Actor":"dotnet-automerge-bot","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/38719","RelatedDescription":"Merged pull request \"Merge master to master-vs-deps\" (#38719) at dotnet/roslyn","RelatedBody":"\nThis is an automatically generated pull request from master into master-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-master-vs-deps\ngit reset --hard upstream/master-vs-deps\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-master-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"10428602652","Type":"PullRequestEvent","CreatedAt":"2019-09-16T23:13:23","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7793","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#7793) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @tarekgh @stephentoub"},{"Id":"10427866816","Type":"PullRequestEvent","CreatedAt":"2019-09-16T20:57:14","Actor":"Dotnet-GitSync-Bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7793","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#7793) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"10425554912","Type":"IssuesEvent","CreatedAt":"2019-09-16T15:38:33","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/issues/7790","RelatedDescription":"Closed issue \"GC on ARM64 based \"kind of unix\" system\" (#7790) at dotnet/corert","RelatedBody":"I am sorry to bother again. After fixing some more minor issues and brush up my ARM64 assembler knowledge I was finally able to run a simple hello world on my ARM64 system without crashing. Doing things like writing to the log (the system doesn't have a text based console at all), Thread.Sleep, Environment.TickCount, printing the command line arguments etc works fine. But than I made the \"mistake\" to trigger the GC. \r\n\r\nTo make a long story short after some more debugging I noticed that the unwind of the stack does not work. The reason was pretty obvious. Libunwind doesn't have any information about the function were the stack walk should be started. I am aware that there are some parts missing for ARM64 targets that I need to fill but there is one question I was not able to answer so far. Does the GC only need unwind information for the managed code part? Or do I need to provide information for the C/C++ parts and even the dynamic libs of the OS? I am aware that libunwind can fetch these information by it's own. Unfortunately the function that it uses for this is not supported by the OS my system is using.  I may be able to get the unwind sections from the runtime C/C++ code.\r\n\r\n"},{"Id":"10418327564","Type":"PullRequestEvent","CreatedAt":"2019-09-15T07:35:12","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7792","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#7792) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub"},{"Id":"10417799868","Type":"PullRequestEvent","CreatedAt":"2019-09-15T01:44:43","Actor":"Dotnet-GitSync-Bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7792","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#7792) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"10416837945","Type":"PullRequestEvent","CreatedAt":"2019-09-14T16:44:06","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7716","RelatedDescription":"Merged pull request \"Add .vsconfig and script\" (#7716) at dotnet/corert","RelatedBody":"Added a .vsconfig file with dependencies for Visual Studio 2019 Preview (Windows 10 SDK, MSBuild with its dependencies, and `MSVC v142 - VS 2019 C++ x64/x86 build tools (v14.22)` aka `Microsoft.VisualStudio.Component.VC.Tools.x86.x64`), minimum requirement for building with `buildscripts/build.cmd`.\r\nAdded a script at `buildscripts/install-reqs-vs2019preview.cmd` that depends on Visual Studio 2019 Preview and vs_installer.exe being installed at `%ProgramFiles(x86)%\\Microsoft Visual Studio`.\r\nCloses #7417 "},{"Id":"10416837936","Type":"IssuesEvent","CreatedAt":"2019-09-14T16:44:05","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/issues/7417","RelatedDescription":"Closed issue \"Please provide a .vsconfig\" (#7417) at dotnet/corert","RelatedBody":"Please provide a .vsconfig with the minimal required Visual Studio 2019 dependencies needed to build. For an example, see:\r\n\r\nhttps://github.com/microsoft/visualfsharp/blob/master/.vsconfig\r\n\r\nRight now the experience is:\r\n```\r\nPS C:\\Users\\taggac\\github\\corert> .\\build.cmd\r\nChecking pre-requisites...\r\n\r\n**********************************************************************\r\n** Visual Studio 2019 Developer Command Prompt v16.1.0-pre.3.0\r\n** Copyright (c) 2019 Microsoft Corporation\r\n**********************************************************************\r\nCould not find Visual C++ under C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Preview\\Common7\\Tools\\. Visual C++ is a pre-requisite to build this repository.\r\nSee: https://github.com/dotnet/corert/blob/master/Documentation/prerequisites-for-building.md\r\n```\r\n\r\nI'd like to be able to open a solution and have Visual Studio prompt to install all the dependencies via Visual Studio Installer."},{"Id":"10416490494","Type":"PullRequestEvent","CreatedAt":"2019-09-14T14:02:26","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7791","RelatedDescription":"Merged pull request \"Fix casting to pointers\" (#7791) at dotnet/corert","RelatedBody":"Porting a fix made for .NET Native.\r\n\r\nA popular game engine has a `castclass void*` IL instruction in one of the generated files it ships with. This construct is weird enough that it crashes the .NET Native compiler. It doesn't crash the CoreRT compiler, but we still want the runtime side of the fix."},{"Id":"10414064855","Type":"PullRequestEvent","CreatedAt":"2019-09-13T20:18:35","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7791","RelatedDescription":"Opened pull request \"Fix casting to pointers\" (#7791) at dotnet/corert","RelatedBody":"Porting a fix made for .NET Native.\r\n\r\nA popular game engine has a `castclass void*` IL instruction in one of the generated files it ships with. This construct is weird enough that it crashes the .NET Native compiler. It doesn't crash the CoreRT compiler, but we still want the runtime side of the fix."},{"Id":"10412897856","Type":"IssuesEvent","CreatedAt":"2019-09-13T17:07:42","Actor":"RalfKornmannEnvision","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/issues/7790","RelatedDescription":"Opened issue \"GC on ARM64 based \"kind of unix\" system\" (#7790) at dotnet/corert","RelatedBody":"I am sorry to bother again. After fixing some more minor issues and brush up my ARM64 assembler knowledge I was finally able to run a simple hello world on my ARM64 system without crashing. Doing things like writing to the log (the system doesn't have a text based console at all), Thread.Sleep, Environment.TickCount, printing the command line arguments etc works fine. But than I made the \"mistake\" to trigger the GC. \r\n\r\nTo make a long story short after some more debugging I noticed that the unwind of the stack does not work. The reason was pretty obvious. Libunwind doesn't have any information about the function were the stack walk should be started. I am aware that there are some parts missing for ARM64 targets that I need to fill but there is one question I was not able to answer so far. Does the GC only need unwind information for the managed code part? Or do I need to provide information for the C/C++ parts and even the dynamic libs of the OS? I am aware that libunwind can fetch these information by it's own. Unfortunately the function that it uses for this is not supported by the OS my system is using.  I may be able to get the unwind sections from the runtime C/C++ code.\r\n\r\n"},{"Id":"10411438581","Type":"PullRequestEvent","CreatedAt":"2019-09-13T13:52:22","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7789","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#7789) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @NextTurn"}],"ResultType":"GitHubEvent"},"SDK":{"Events":[{"Id":"10428446146","Type":"IssuesEvent","CreatedAt":"2019-09-16T22:37:53","Actor":"wli3","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/issues/3620","RelatedDescription":"Closed issue \"Decide which property for VC targets to set architecture\" (#3620) at dotnet/sdk","RelatedBody":"should be RuntimeIdentifier with SelfContained to false need to verify. However, we have several places use Platform(win32 in C++) and platformtarget mismatch could cause trouble, still investigating\r\n\r\nwhen run \r\n`msbuild NETCoreCppCliTest.vcxproj /p:platformtarget=win32 /p:runtimeidentifier=win-x86`\r\n\r\nIt will fail with \r\n```\r\nC:\\work\\sdk\\artifacts\\bin\\Debug\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.RuntimeIdentifierInference.targets(149,5): error NETSDK1032: The RuntimeIdentifier pla tform 'win-x86' and the PlatformTarget 'win32' must be compatible. [C:\\work\\NETCoreCppCliTest\\NETCoreCppCliTest\\NETCoreCppCliTest.vcxproj]\r\n```"},{"Id":"10428442272","Type":"IssuesEvent","CreatedAt":"2019-09-16T22:37:01","Actor":"wli3","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/issues/3617","RelatedDescription":"Closed issue \"Disable nuget restore (no need workaround of the empty asset.json)\" (#3617) at dotnet/sdk","RelatedBody":"PR https://github.com/dotnet/sdk/pull/3601"},{"Id":"10428442136","Type":"IssuesEvent","CreatedAt":"2019-09-16T22:36:59","Actor":"wli3","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/issues/3619","RelatedDescription":"Closed issue \"Test or block publish options like linker and single exe\" (#3619) at dotnet/sdk","RelatedBody":"- /p:PublishTrimmed=true does not work\r\n- ⬇️UseComHost=true does not work(not critical scenario) Have better error message for EnableComHosting + C++/CLI project \r\n\r\nPR: https://github.com/dotnet/sdk/pull/3618"},{"Id":"10428441960","Type":"IssuesEvent","CreatedAt":"2019-09-16T22:36:57","Actor":"wli3","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/issues/3621","RelatedDescription":"Closed issue \"Disable deps.json generation for C++ library\" (#3621) at dotnet/sdk","RelatedBody":"PR: https://github.com/dotnet/sdk/pull/3601"},{"Id":"10428441906","Type":"IssuesEvent","CreatedAt":"2019-09-16T22:36:56","Actor":"wli3","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/issues/3622","RelatedDescription":"Closed issue \"Block single C++ library Publish and Pack\" (#3622) at dotnet/sdk","RelatedBody":"PR: https://github.com/dotnet/sdk/issues/3619"},{"Id":"10428317413","Type":"IssuesEvent","CreatedAt":"2019-09-16T22:11:30","Actor":"wli3","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/issues/3647","RelatedDescription":"Closed issue \"[Investigate] Setting Runtimeidentifier in C++ props and target might not be needed\" (#3647) at dotnet/sdk","RelatedBody":"It works today without setting it. Need to understand how we derive the RID. And ensure it is ok not setting it"},{"Id":"10428311631","Type":"IssuesEvent","CreatedAt":"2019-09-16T22:10:24","Actor":"wli3","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/issues/3649","RelatedDescription":"Opened issue \"Add DefaultAppHostRuntimeIdentifier support for ARM and ARM64\" (#3649) at dotnet/sdk","RelatedBody":"https://github.com/dotnet/sdk/blob/fe6b50c78426124e34e56ecb7df8b6b86e6e0b48/src/Tasks/Microsoft.NET.Build.Tasks/targets/Microsoft.NET.RuntimeIdentifierInference.targets#L118\r\n\r\ndoes not consider ARM and ARM64"}],"ResultType":"GitHubEvent"},"Home-Issues":{"Issues":[{"Id":"475315730","IsPullRequest":false,"CreatedAt":"2019-07-31T19:23:23","Actor":"MeikTranel","Number":"148","RawContent":null,"Title":"Clarify guidelines in regards to Options and Requirements","State":"open","Body":"I'd be interested in which part of the project submission guidelines is optional and which are deal breaker requirements.\r\n\r\n- Is the Role Matrix laid out an absolute or (as can be read between the lines) just a preset, which may be subject to individual projects needs?\r\n- Is it a strong requirement that the project uses the contributor covenant CoC?","Url":"https://github.com/dotnet/foundation/issues/148","RelatedDescription":"Open issue \"Clarify guidelines in regards to Options and Requirements\" (#148)"},{"Id":"455670422","IsPullRequest":true,"CreatedAt":"2019-06-13T10:49:30","Actor":"gep13","Number":"147","RawContent":null,"Title":"(GH-111) Update Source Link location","State":"open","Body":"","Url":"https://github.com/dotnet/foundation/pull/147","RelatedDescription":"Open PR \"(GH-111) Update Source Link location\" (#147)"},{"Id":"455555823","IsPullRequest":true,"CreatedAt":"2019-06-13T06:28:59","Actor":"gep13","Number":"146","RawContent":null,"Title":"Update Cake Project Contacts","State":"closed","Body":"@jongalloway just noticed that this wasn't up to date.","Url":"https://github.com/dotnet/foundation/pull/146","RelatedDescription":"Closed or merged PR \"Update Cake Project Contacts\" (#146)"},{"Id":"441542047","IsPullRequest":true,"CreatedAt":"2019-05-09T18:35:22","Actor":"mitchelsellers","Number":"145","RawContent":null,"Title":"Edits to DNN Platform Information","State":"closed","Body":"Edits to reflect changes in repository structure with recent modifications to the overall project structure.","Url":"https://github.com/dotnet/foundation/pull/145","RelatedDescription":"Closed or merged PR \"Edits to DNN Platform Information\" (#145)"},{"Id":"437980746","IsPullRequest":true,"CreatedAt":"2019-05-03T20:10:38","Actor":"FlorianRappl","Number":"143","RawContent":null,"Title":"Add AngleSharp","State":"closed","Body":"cc @jongalloway ","Url":"https://github.com/dotnet/foundation/pull/143","RelatedDescription":"Closed or merged PR \"Add AngleSharp\" (#143)"},{"Id":"426787230","IsPullRequest":true,"CreatedAt":"2019-05-03T20:08:40","Actor":"mairaw","Number":"141","RawContent":null,"Title":"add links to ML.NET docs","State":"closed","Body":"/cc @JRAlexander @shauheen \r\n\r\nTo match the info we have added for other projects","Url":"https://github.com/dotnet/foundation/pull/141","RelatedDescription":"Closed or merged PR \"add links to ML.NET docs\" (#141)"},{"Id":"440030132","IsPullRequest":true,"CreatedAt":"2019-05-03T20:08:15","Actor":"tomasherceg","Number":"144","RawContent":null,"Title":"Add DotVVM","State":"closed","Body":"cc @jongalloway ","Url":"https://github.com/dotnet/foundation/pull/144","RelatedDescription":"Closed or merged PR \"Add DotVVM\" (#144)"},{"Id":"426787542","IsPullRequest":true,"CreatedAt":"2019-03-29T14:44:24","Actor":"mairaw","Number":"142","RawContent":null,"Title":"add docs samples link","State":"closed","Body":"@BillWagner should we add the samples project too?","Url":"https://github.com/dotnet/foundation/pull/142","RelatedDescription":"Closed or merged PR \"add docs samples link\" (#142)"},{"Id":"426658581","IsPullRequest":true,"CreatedAt":"2019-03-29T02:16:07","Actor":"scottaddie","Number":"139","RawContent":null,"Title":"Add link to ASP.NET Core docs","State":"closed","Body":"Provide a link to the docs site for ASP.NET Core.","Url":"https://github.com/dotnet/foundation/pull/139","RelatedDescription":"Closed or merged PR \"Add link to ASP.NET Core docs\" (#139)"},{"Id":"426666928","IsPullRequest":true,"CreatedAt":"2019-03-29T02:15:48","Actor":"BillWagner","Number":"140","RawContent":null,"Title":"add links to .NET docs","State":"closed","Body":"/cc @mairaw @scottaddie\r\n\r\nMaira, did I miss any project repos to tag?","Url":"https://github.com/dotnet/foundation/pull/140","RelatedDescription":"Closed or merged PR \"add links to .NET docs\" (#140)"},{"Id":"419205679","IsPullRequest":true,"CreatedAt":"2019-03-18T21:04:01","Actor":"MikeWilliams-UK","Number":"137","RawContent":null,"Title":"Add V3.1 repo and change documentation link","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/137","RelatedDescription":"Closed or merged PR \"Add V3.1 repo and change documentation link\" (#137)"},{"Id":"419897914","IsPullRequest":true,"CreatedAt":"2019-03-18T21:03:34","Actor":"devlead","Number":"138","RawContent":null,"Title":"Add Dave to cake.md","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/138","RelatedDescription":"Closed or merged PR \"Add Dave to cake.md\" (#138)"},{"Id":"391459677","IsPullRequest":false,"CreatedAt":"2019-03-08T19:00:06","Actor":"manne","Number":"123","RawContent":null,"Title":"Missing logo for Steeltoe","State":"closed","Body":"`https://brandfolder.com/pivotal-assets/attachments/ohxttd-7yxa60-clvf50/pivotal-assets-pivotal-genericfile.png` redirects to a sign in page\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L128-L130","Url":"https://github.com/dotnet/foundation/issues/123","RelatedDescription":"Closed issue \"Missing logo for Steeltoe\" (#123)"},{"Id":"417018694","IsPullRequest":true,"CreatedAt":"2019-03-08T18:59:32","Actor":"jkonicki","Number":"136","RawContent":null,"Title":"Fix logo and update team contributors","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/136","RelatedDescription":"Closed or merged PR \"Fix logo and update team contributors\" (#136)"},{"Id":"416428925","IsPullRequest":true,"CreatedAt":"2019-03-08T18:59:00","Actor":"manne","Number":"135","RawContent":null,"Title":"adds Umbraco logo","State":"closed","Body":"fixes #124 ","Url":"https://github.com/dotnet/foundation/pull/135","RelatedDescription":"Closed or merged PR \"adds Umbraco logo\" (#135)"},{"Id":"391459812","IsPullRequest":false,"CreatedAt":"2019-03-08T18:59:00","Actor":"manne","Number":"124","RawContent":null,"Title":"Missing logo for Umbraco","State":"closed","Body":"`https://fbcdn-profile-a.akamaihd.net/hprofile-ak-xap1/v/t1.0-1/p160x160/971596_519168901464439_566592989_n.png?oh=ce61e5b4cbd60c0d99c4164cbb05a434&oe=54F091C9&__gda__=1424472439_c9f76213a915bc2af88246f464f29e8b` results in a 404.\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L149-L151","Url":"https://github.com/dotnet/foundation/issues/124","RelatedDescription":"Closed issue \"Missing logo for Umbraco\" (#124)"},{"Id":"416427614","IsPullRequest":true,"CreatedAt":"2019-03-08T18:58:45","Actor":"manne","Number":"134","RawContent":null,"Title":"adds the prism logo","State":"closed","Body":"fixes #126 ","Url":"https://github.com/dotnet/foundation/pull/134","RelatedDescription":"Closed or merged PR \"adds the prism logo\" (#134)"},{"Id":"391460225","IsPullRequest":false,"CreatedAt":"2019-03-08T18:58:44","Actor":"manne","Number":"126","RawContent":null,"Title":"No logo provided for Prism","State":"closed","Body":"Can/should this [image](http://prismlibrary.github.io/images/logo-prism-symbol@2x.png) be used?\r\n\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L155-L157","Url":"https://github.com/dotnet/foundation/issues/126","RelatedDescription":"Closed issue \"No logo provided for Prism\" (#126)"},{"Id":"416157860","IsPullRequest":true,"CreatedAt":"2019-03-08T18:58:26","Actor":"glennawatson","Number":"133","RawContent":null,"Title":"Add additional ReactiveUI organization projects.","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/133","RelatedDescription":"Closed or merged PR \"Add additional ReactiveUI organization projects.\" (#133)"},{"Id":"407251900","IsPullRequest":true,"CreatedAt":"2019-02-18T17:45:44","Actor":"Potapy4","Number":"132","RawContent":null,"Title":"Update MVVM project logo","State":"closed","Body":"Fixes dotnet/dotnetfoundation-website#72\r\nFixes #125","Url":"https://github.com/dotnet/foundation/pull/132","RelatedDescription":"Closed or merged PR \"Update MVVM project logo\" (#132)"},{"Id":"391459919","IsPullRequest":false,"CreatedAt":"2019-02-18T17:45:44","Actor":"manne","Number":"125","RawContent":null,"Title":"Missing logo for MVVM Light Toolkit","State":"closed","Body":"`https://raw.githubusercontent.com/paulcbetts/mvvmlight/master/Installer/InstallItems/html/MVVM_BlackText_190x147.png` results in a 404.\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L137-L139","Url":"https://github.com/dotnet/foundation/issues/125","RelatedDescription":"Closed issue \"Missing logo for MVVM Light Toolkit\" (#125)"},{"Id":"406210463","IsPullRequest":true,"CreatedAt":"2019-02-18T17:44:39","Actor":"NextTurn","Number":"131","RawContent":null,"Title":"Replace http links with https links","State":"closed","Body":"Replace http links with https where possible - both returned 200 OK.","Url":"https://github.com/dotnet/foundation/pull/131","RelatedDescription":"Closed or merged PR \"Replace http links with https links\" (#131)"},{"Id":"399191617","IsPullRequest":true,"CreatedAt":"2019-02-02T11:04:15","Actor":"NextTurn","Number":"130","RawContent":null,"Title":"Update Open XML links","State":"closed","Body":"OpenXmlDeveloper.org was shut down long ago.\r\n\r\nThe content has been moved to EricWhite.com.","Url":"https://github.com/dotnet/foundation/pull/130","RelatedDescription":"Closed or merged PR \"Update Open XML links\" (#130)"},{"Id":"395863354","IsPullRequest":true,"CreatedAt":"2019-01-09T22:28:14","Actor":"ErikEJ","Number":"128","RawContent":null,"Title":"Update of EF description","State":"closed","Body":"@divega !","Url":"https://github.com/dotnet/foundation/pull/128","RelatedDescription":"Closed or merged PR \"Update of EF description\" (#128)"},{"Id":"395901602","IsPullRequest":true,"CreatedAt":"2019-01-05T03:23:39","Actor":"MarcBruins","Number":"129","RawContent":null,"Title":"Update to absolute path","State":"closed","Body":"Update to absolute path so that when this list is copied the link will actually work","Url":"https://github.com/dotnet/foundation/pull/129","RelatedDescription":"Closed or merged PR \"Update to absolute path\" (#129)"},{"Id":"395705579","IsPullRequest":true,"CreatedAt":"2019-01-04T00:22:42","Actor":"carloscds","Number":"127","RawContent":null,"Title":"Update documentation information","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/127","RelatedDescription":"Closed or merged PR \"Update documentation information\" (#127)"},{"Id":"391459057","IsPullRequest":true,"CreatedAt":"2019-01-03T04:47:09","Actor":"manne","Number":"122","RawContent":null,"Title":"targets the existing document","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/122","RelatedDescription":"Closed or merged PR \"targets the existing document\" (#122)"},{"Id":"384569679","IsPullRequest":true,"CreatedAt":"2019-01-03T04:46:31","Actor":"JamesNK","Number":"121","RawContent":null,"Title":"Add Newtonsoft.Json","State":"closed","Body":"// @jongalloway ","Url":"https://github.com/dotnet/foundation/pull/121","RelatedDescription":"Closed or merged PR \"Add Newtonsoft.Json\" (#121)"},{"Id":"384212839","IsPullRequest":true,"CreatedAt":"2018-11-26T09:33:50","Actor":"stefanov-stefan","Number":"120","RawContent":null,"Title":"Added Telerik info","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/120","RelatedDescription":"Closed or merged PR \"Added Telerik info\" (#120)"},{"Id":"384212448","IsPullRequest":true,"CreatedAt":"2018-11-26T09:33:22","Actor":"stefanov-stefan","Number":"119","RawContent":null,"Title":"Added Telerik UWP proj","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/119","RelatedDescription":"Closed or merged PR \"Added Telerik UWP proj\" (#119)"}],"ResultType":"GitHubIssue"},"CoreCLR-Issues":{"Issues":[{"Id":"494366954","IsPullRequest":true,"CreatedAt":"2019-09-17T02:30:00","Actor":"sandreenko","Number":"26744","RawContent":null,"Title":"Statements: return dumping methods.","State":"open","Body":"Part of #25899 \r\n\r\n5e4b1248d5: Return dumping for Statement.\r\n\r\nReturn statements ID and implement dumping methods.\r\n\r\na0bda39c05: Delete `block->bbStmtNum` and `compiler->compCurStmtNum`.\r\n\r\nThey were duplicating `stmt->gtTreeID` in the past and it was not clear why they were added in the first place.\r\n\r\nDelete them and use `stmt->GetID()`, with `STMT%05u` format.","Url":"https://github.com/dotnet/coreclr/pull/26744","RelatedDescription":"Open PR \"Statements: return dumping methods.\" (#26744)"},{"Id":"494306337","IsPullRequest":true,"CreatedAt":"2019-09-17T01:53:47","Actor":"davidwrighton","Number":"26738","RawContent":null,"Title":"IBC fixes","State":"closed","Body":"- Support IntPtr and UIntPtr element types in IBC data\r\n- More defensive coding against structurally incorrect IBC data\r\n- Skip compilation of open method definitions\r\n- Generate IBC data without crashing when the first logged item is an InstantiatedMethod and not a token\r\n- Safely shutdown and emit IBC data from a thread that hasn't been given a Thread object","Url":"https://github.com/dotnet/coreclr/pull/26738","RelatedDescription":"Closed or merged PR \"IBC fixes\" (#26738)"},{"Id":"494346224","IsPullRequest":true,"CreatedAt":"2019-09-17T00:55:55","Actor":"janvorli","Number":"26743","RawContent":null,"Title":"Fix R2RDump to correctly parse array lower bounds","State":"open","Body":"There is a an incorrect size (likely a typo) used to create lower bounds\r\narray when parsing signatures. This results in `Index was outside the\r\nbounds of the array.` being printed inside of the array signature\r\nstring.","Url":"https://github.com/dotnet/coreclr/pull/26743","RelatedDescription":"Open PR \"Fix R2RDump to correctly parse array lower bounds\" (#26743)"},{"Id":"494327766","IsPullRequest":true,"CreatedAt":"2019-09-16T23:39:40","Actor":"SrivastavaAnubhav","Number":"26742","RawContent":null,"Title":"Add performance measurement to crossgen2/SuperILC","State":"open","Body":"Crossgen2 changes\r\n- Add PerfEventSource class to log performance-related events (average time taken to compile, loading time, graph processing time, emitting time, number of nodes added to graph, and number of methods JITed)\r\n\r\nSuperILC changes\r\n- Add MeasurePerf flag to measure performance (with 2 warmup runs and averaged over 5 real runs)\r\n- Add PerfEventSourceListener class to listen to PerfEventSource events from crossgen2 and record statistics.\r\n- Add InputFileSearchString flag to select an input file to compile (instead of requiring a folder)\r\n","Url":"https://github.com/dotnet/coreclr/pull/26742","RelatedDescription":"Open PR \"Add performance measurement to crossgen2/SuperILC\" (#26742)"},{"Id":"494318556","IsPullRequest":true,"CreatedAt":"2019-09-16T23:07:42","Actor":"josalem","Number":"26741","RawContent":null,"Title":"[test] Disable all EventPipe tests under GCStress","State":"open","Body":"resolves #26723\r\n\r\nTest failures such as #26723 have been happening unreported since as far back as at least July 20th.  It looks like the assert is being hit as a result of a GC stack walk happening inside an EventPipe triggered stack walk based on a local repro by @sywhang with the following stack trace:\r\n```\r\n    (lldb) bt\r\n* thread #11: tid = 28717, 0x00007ffff669e011 libcoreclr.so`DBG_DebugBreak + 1 at debugbreak.S:10, name = 'corerun', stop reason = signal SIGTRAP\r\n  * frame #0: 0x00007ffff669e011 libcoreclr.so`DBG_DebugBreak + 1 at debugbreak.S:10\r\n    frame #1: 0x00007ffff6626de7 libcoreclr.so`::DebugBreak() + 967 at debug.cpp:405\r\n    frame #2: 0x00007ffff60c8c46 libcoreclr.so`::DbgAssertDialog(szFile=\"/home/suwhang/repos/coreclr/src/vm/stackwalk.cpp\", iLine=943, szExpr=<unavailable>) + 134 at debug.cpp:710\r\n    frame #3: 0x00007ffff61a4ac8 libcoreclr.so`Thread::StackWalkFramesEx(this=0x00005555557fcf20, pRD=0x00007fff56ff6890, pCallback=(libcoreclr.so`GcStackCrawlCallBack(CrawlFrame*, void*) at gcenv.ee.common.cpp:201), pData=0x00007fff56ff79a8, flags=34048, pStartFrame=0x0000000000000000)(CrawlFrame*, void*), void*, unsigned int, Frame*) + 232 at stackwalk.cpp:943\r\n    frame #4: 0x00007ffff61a56c5 libcoreclr.so`Thread::StackWalkFrames(this=0x00005555557fcf20, pCallback=(libcoreclr.so`GcStackCrawlCallBack(CrawlFrame*, void*) at gcenv.ee.common.cpp:201), pData=0x00007fff56ff79a8, flags=34048, pStartFrame=0x0000000000000000)(CrawlFrame*, void*), void*, unsigned int, Frame*) + 405 at stackwalk.cpp:1052\r\n    frame #5: 0x00007ffff64e9cd6 libcoreclr.so`ScanStackRoots(pThread=<unavailable>, fn=(libcoreclr.so`WKS::GCHeap::Promote(Object**, ScanContext*, unsigned int) at gc.cpp:35172), sc=0x00007fff56ff7ab0)(Object**, ScanContext*, unsigned int), ScanContext*) + 582 at gcenv.ee.cpp:148\r\n    frame #6: 0x00007ffff64e99c4 libcoreclr.so`GCToEEInterface::GcScanRoots(fn=(libcoreclr.so`WKS::GCHeap::Promote(Object**, ScanContext*, unsigned int) at gc.cpp:35172), condemned=<unavailable>, max_gen=<unavailable>, sc=<unavailable>)(Object**, ScanContext*, unsigned int), int, int, ScanContext*) + 484 at gcenv.ee.cpp:177\r\n    frame #7: 0x00007ffff64c0646 libcoreclr.so`WKS::gc_heap::mark_phase(condemned_gen_number=<unavailable>, mark_only_p=NO) + 710 at gc.cpp:20698\r\n    frame #8: 0x00007ffff64bd66d libcoreclr.so`WKS::gc_heap::gc1() + 1229 at gc.cpp:16325\r\n    frame #9: 0x00007ffff64c809d libcoreclr.so`WKS::gc_heap::garbage_collect(n=<unavailable>) + 2109 at gc.cpp:17954\r\n    frame #10: 0x00007ffff64b869e libcoreclr.so`WKS::GCHeap::GarbageCollectGeneration(this=<unavailable>, gen=2, reason=reason_gcstress) + 1022 at gc.cpp:36576\r\n    frame #11: 0x00007ffff64e1e29 libcoreclr.so`WKS::GCHeap::GarbageCollect(int, bool, int) [inlined] WKS::GCHeap::GarbageCollectTry(generation=<unavailable>) + 537 at gc.cpp:36082\r\n    frame #12: 0x00007ffff64e1e1f libcoreclr.so`WKS::GCHeap::GarbageCollect(this=<unavailable>, generation=<unavailable>, low_memory_p=<unavailable>, mode=<unavailable>) + 527 at gc.cpp:36016\r\n    frame #13: 0x00007ffff64e1554 libcoreclr.so`WKS::GCHeap::StressHeap(this=<unavailable>, context=<unavailable>) + 1764 at gc.cpp:35522\r\n    frame #14: 0x00007ffff632ccf4 libcoreclr.so`Thread::PerformPreemptiveGC(this=0x0000555555f02e70) + 468 at threadsuspend.cpp:2858\r\n    frame #15: 0x00007ffff632cdc8 libcoreclr.so`Thread::RareEnablePreemptiveGC(this=0x0000555555f02e70) + 120 at threadsuspend.cpp:2900\r\n    frame #16: 0x00007ffff60e7ad1 libcoreclr.so`void GCHolderBase::PopInternal<0>(this=0x00007fff56ff7eb0) + 177 at threads.h:5672\r\n    frame #17: 0x00007ffff611a859 libcoreclr.so`GCCoopHackNoThread::~GCCoopHackNoThread(this=<unavailable>) + 9 at threads.h:5948\r\n    frame #18: 0x00007ffff6119495 libcoreclr.so`HashMap::LookupValue(this=<unavailable>, key=140735285318032, value=70367642659016) + 1013 at hash.cpp:609\r\n    frame #19: 0x00007ffff61ff75c libcoreclr.so`ReadyToRunInfo::GetMethodDescForEntryPoint(unsigned long) [inlined] PtrHashMap::LookupValue(key=<unavailable>) + 30 at hash.h:598\r\n    frame #20: 0x00007ffff61ff73e libcoreclr.so`ReadyToRunInfo::GetMethodDescForEntryPoint(this=<unavailable>, entryPoint=<unavailable>) + 14 at readytoruninfo.cpp:63\r\n    frame #21: 0x00007ffff60dde19 libcoreclr.so`ReadyToRunJitManager::JitCodeToMethodInfo(this=<unavailable>, pRangeSection=<unavailable>, currentPC=<unavailable>, ppMethodDesc=<unavailable>, pCodeInfo=<unavailable>) + 249 at codeman.cpp:6870\r\n    frame #22: 0x00007ffff614761c libcoreclr.so`EECodeInfo::Init(this=0x00007fff56ff8868, codeAddress=140735285318345, scanFlag=<unavailable>) + 60 at jitinterface.cpp:14214\r\n    frame #23: 0x00007ffff61a7d26 libcoreclr.so`StackFrameIterator::NextRaw() [inlined] StackFrameIterator::ProcessIp(this=0x00007fff56ff8630, Ip=140735285318345) + 24 at stackwalk.cpp:2807\r\n    frame #24: 0x00007ffff61a7d0e libcoreclr.so`StackFrameIterator::NextRaw(this=0x00007fff56ff8630) + 2206 at stackwalk.cpp:2655\r\n    frame #25: 0x00007ffff61a6e7f libcoreclr.so`StackFrameIterator::Filter(this=<unavailable>) + 4207 at stackwalk.cpp:2294\r\n    frame #26: 0x00007ffff61a501e libcoreclr.so`StackFrameIterator::Init(this=0x00007fff56ff8630, pThread=0x0000555555f02e70, pFrame=<unavailable>, pRegDisp=0x00007fff56ff89f0, flags=<unavailable>) + 830 at stackwalk.cpp:1280\r\n    frame #27: 0x00007ffff61a4bfd libcoreclr.so`Thread::StackWalkFramesEx(this=0x0000555555f02e70, pRD=<unavailable>, pCallback=(libcoreclr.so`EventPipe::StackWalkCallback(CrawlFrame*, StackContents*) at eventpipe.cpp:728), pData=0x00007fff56ff9b58, flags=1297, pStartFrame=0x0000000000000000)(CrawlFrame*, void*), void*, unsigned int, Frame*) + 541 at stackwalk.cpp:965\r\n    frame #28: 0x00007ffff61a56c5 libcoreclr.so`Thread::StackWalkFrames(this=0x0000555555f02e70, pCallback=(libcoreclr.so`EventPipe::StackWalkCallback(CrawlFrame*, StackContents*) at eventpipe.cpp:728), pData=0x00007fff56ff9b58, flags=1297, pStartFrame=0x0000000000000000)(CrawlFrame*, void*), void*, unsigned int, Frame*) + 405 at stackwalk.cpp:1052\r\n    frame #29: 0x00007ffff6249552 libcoreclr.so`EventPipe::WalkManagedStackForCurrentThread(StackContents&) [inlined] EventPipe::WalkManagedStackForThread(pThread=<unavailable>) + 33 at eventpipe.cpp:719\r\n    frame #30: 0x00007ffff6249531 libcoreclr.so`EventPipe::WalkManagedStackForCurrentThread(stackContents=0x00007fff56ff9b58) + 33 at eventpipe.cpp:699\r\n    frame #31: 0x00007ffff625224d libcoreclr.so`EventPipeBufferManager::WriteEvent(this=0x00007fff480012f0, pThread=<unavailable>, session=0x00007fff48000f40, event=0x00007fff44029e10, payload=0x00007fff56ffa320, pActivityId=0x0000555555f03ca4, pRelatedActivityId=<unavailable>, pEventThread=<unavailable>, pStack=<unavailable>) + 157 at eventpipebuffermanager.cpp:375\r\n    frame #32: 0x00007ffff6254e3c libcoreclr.so`EventPipeSession::WriteEventBuffered(this=0x00007fff48000f40, pThread=0x0000555555f02e70, event=0x00007fff44029e10, payload=0x00007fff56ffa320, pActivityId=0x0000555555f03ca4, pRelatedActivityId=0x0000000000000000, pEventThread=<unavailable>, pStack=<unavailable>) + 92 at eventpipesession.cpp:327\r\n    frame #33: 0x00007ffff62490f6 libcoreclr.so`EventPipe::WriteEventInternal(pThread=<unavailable>, event=0x00007fff44029e10, payload=<unavailable>, pActivityId=0x0000555555f03ca4, pRelatedActivityId=0x0000000000000000, pEventThread=0x0000000000000000, pStack=<unavailable>) + 358 at eventpipe.cpp:649\r\n    frame #34: 0x00007ffff6248f45 libcoreclr.so`EventPipe::WriteEvent(EventPipeEvent&, EventData*, unsigned int, _GUID const*, _GUID const*) [inlined] EventPipe::WriteEventInternal(payload=<unavailable>, pActivityId=<unavailable>) + 133 at eventpipe.cpp:565\r\n    frame #35: 0x00007ffff6248eec libcoreclr.so`EventPipe::WriteEvent(event=0x00007fff44029e10, pEventData=<unavailable>, eventDataCount=<unavailable>, pActivityId=0x0000000000000000, pRelatedActivityId=0x0000000000000000) + 44 at eventpipe.cpp:536\r\n    frame #36: 0x00007ffff6442405 libcoreclr.so`EventPipeInternal::WriteEventData(eventHandle=140734334410256, eventID=<unavailable>, pEventData=0x00007fff56ffa650, eventDataCount=1, pActivityId=0x0000000000000000, pRelatedActivityId=0x0000000000000000) + 213 at eventpipeinternal.cpp:250\r\n    frame #37: 0x00007fff7cb052e8\r\n    frame #38: 0x00007fff7cb0fd0c\r\n    frame #39: 0x00007fff7cb11d9c\r\n    frame #40: 0x00007fff7cb110db\r\n    frame #41: 0x00007fff7d562628\r\n    frame #42: 0x00007fff7c9c4492\r\n    frame #43: 0x00007fff7c9cb13c\r\n    frame #44: 0x00007fff7c9a9582\r\n    frame #45: 0x00007fff7c9c42c1\r\n    frame #46: 0x00007fff7c9c40d8\r\n    frame #47: 0x00007fff7c9c406b\r\n    frame #48: 0x00007fff7c99fdeb\r\n    frame #49: 0x00007ffff620aff9 libcoreclr.so`CallDescrWorkerWithHandler(pCallDescrData=0x0000000000000000, fCriticalCall=NO) + 377 at callhelpers.cpp:70\r\n    frame #50: 0x00007ffff620ba59 libcoreclr.so`MethodDescCallSite::CallTargetWorker(this=<unavailable>, pArguments=0x0000000000000000, pReturnValue=<unavailable>, cbReturnValue=<unavailable>) + 1913 at callhelpers.cpp:546\r\n    frame #51: 0x00007ffff643259c libcoreclr.so`QueueUserWorkItemManagedCallback(void*) [inlined] MethodDescCallSite::Call_RetBool(this=<unavailable>, pArguments=<unavailable>) + 173 at callhelpers.h:459\r\n    frame #52: 0x00007ffff64324ef libcoreclr.so`QueueUserWorkItemManagedCallback(pArg=0x00007fff56ffae66) + 239 at comthreadpool.cpp:477\r\n    frame #53: 0x00007ffff61c2e57 libcoreclr.so`ManagedThreadBase_DispatchOuter(ManagedThreadCallState*) [inlined] ManagedThreadBase_DispatchInner(pCallState=0x00007fff56ffadb0) + 535 at threads.cpp:7434\r\n    ...\r\n```\r\n\r\nIt also appears similar issues have been hit before (see: #16494).\r\n\r\nThe culprit seems to be this code allowing a GC to happen during the stack walk: https://github.com/dotnet/coreclr/blob/84d4ed44b5c7f1b3db6e9ae3c71e8e1bb585bbaf/src/vm/threads.h#L5917-L5920\r\nthat gets called inside `HashMap::LookupValue` in the above stack trace.  Since the comment says this is a broken code path, I'm just going to turn off the EventPipe tests entirely under GCStress for now.\r\n\r\nresolves #26592\r\n\r\nCC - @tommcdon ","Url":"https://github.com/dotnet/coreclr/pull/26741","RelatedDescription":"Open PR \"[test] Disable all EventPipe tests under GCStress\" (#26741)"},{"Id":"494316290","IsPullRequest":true,"CreatedAt":"2019-09-16T22:59:23","Actor":"davmason","Number":"26740","RawContent":null,"Title":"Disable nop padding in R2R images and remove jumpstamps from the runtime","State":"open","Body":"This is still a work in progress, there are some failing tests and I still need to run perf tests on it, but I want to get eyes on it as early as possible.\r\n\r\n\r\nThis change does three things:\r\n\r\n- Remove nop padding from R2R images\r\n- Remove jumpstamps from the runtime and switch rejit to use exclusively precodes\r\n- Merge my changes with Kount's recent changes in code versioning\r\n\r\nRemaining work before it's ready to merge:\r\n\r\n- [ ] Get all tests passing\r\n- [ ] Hopefully refactor ReJitManager::UpdateActiveILVersions so it no longer requires a runtime suspension\r\n- [ ] Run perf tests on it to prove there are no startup regressions","Url":"https://github.com/dotnet/coreclr/pull/26740","RelatedDescription":"Open PR \"Disable nop padding in R2R images and remove jumpstamps from the runtime\" (#26740)"},{"Id":"494310095","IsPullRequest":true,"CreatedAt":"2019-09-16T22:38:17","Actor":"lpereira","Number":"26739","RawContent":null,"Title":"Separate POSIX and Windows build/test into stages","State":"open","Body":"This allows builds that complete faster to start testing rather than waiting for all builds to finish before executing the testing jobs.\r\n\r\n(Leaving the PR as draft until this is tested; this is my first time using Azure Pipelines.)","Url":"https://github.com/dotnet/coreclr/pull/26739","RelatedDescription":"Open PR \"Separate POSIX and Windows build/test into stages\" (#26739)"},{"Id":"494215727","IsPullRequest":true,"CreatedAt":"2019-09-16T21:22:43","Actor":"jkoritzinsky","Number":"26734","RawContent":null,"Title":"Remove unused flags on ArrayMarshalInfo only used for type library exporting.","State":"closed","Body":"Since exporting a type library from a .NET assembly via a runtime-integrated TLBExp is not supported on .NET Core, this code is dead code.","Url":"https://github.com/dotnet/coreclr/pull/26734","RelatedDescription":"Closed or merged PR \"Remove unused flags on ArrayMarshalInfo only used for type library exporting.\" (#26734)"},{"Id":"494263707","IsPullRequest":true,"CreatedAt":"2019-09-16T20:36:03","Actor":"davmason","Number":"26737","RawContent":null,"Title":"Remove duplicate call to SetProfilerMayHaveActivatedNonDefaultCodeVersion","State":"open","Body":"The second call was causing SetProfilerMayHaveActivatedNonDefaultCodeVersion to assert since it was already set","Url":"https://github.com/dotnet/coreclr/pull/26737","RelatedDescription":"Open PR \"Remove duplicate call to SetProfilerMayHaveActivatedNonDefaultCodeVersion\" (#26737)"},{"Id":"493760864","IsPullRequest":true,"CreatedAt":"2019-09-16T19:18:18","Actor":"tarekgh","Number":"26721","RawContent":null,"Title":"Fix calendar instance inside the culture after cloning","State":"closed","Body":"Fixes https://github.com/dotnet/corefx/issues/40953\r\n\r\nWhen creating a new culture, we’ll have the equality CultureInfo.DateTimeInfo.Calendar == CultureInfo.calendar be true. After cloning such culture, this equality would not be true. The fix here is to ensure if the equality is true before cloning then should be true after cloning.","Url":"https://github.com/dotnet/coreclr/pull/26721","RelatedDescription":"Closed or merged PR \"Fix calendar instance inside the culture after cloning\" (#26721)"},{"Id":"494224369","IsPullRequest":false,"CreatedAt":"2019-09-16T19:12:53","Actor":"EgorBo","Number":"26736","RawContent":null,"Title":"stackalloc is slow","State":"closed","Body":"-","Url":"https://github.com/dotnet/coreclr/issues/26736","RelatedDescription":"Closed issue \"stackalloc is slow\" (#26736)"},{"Id":"494222176","IsPullRequest":false,"CreatedAt":"2019-09-16T19:01:59","Actor":"GrabYourPitchforks","Number":"26735","RawContent":null,"Title":"JIT should emit \"movbe\" instead of \"mov / bswap\" on compatible hardware","State":"open","Body":"In https://github.com/dotnet/coreclr/pull/18398, JIT got support for the `bswap` intrinsic. There's a comment in that issue that it would also be nice if the JIT could fold a \"read-then-bswap\" or a \"bswap-then-write\" instruction pair into a single `movbe` instruction on supported platforms. For certain application code which performs such reads and writes with high frequency, it can result in significant codegen savings. See in particular the codegen at https://github.com/dotnet/coreclr/issues/26729#issuecomment-531862356, where each \"mov / bswap\" pair could be a single \"movbe\".\r\n\r\nThere are a few ways to go about this. We could add a `movbe` intrinsic and have callers (like `BinaryPrimitives`) special-case that intrinsic if it is available. Though it'd probably be more convenient to leave all of the call sites unchanged and instead to have the JIT special-case these instruction pairs.\r\n\r\nThis could end up being particularly helpful for writes, as it could end up saving not just codegen size, but also the total number of allocated registers. Consider the following.\r\n\r\n```cs\r\nint i = GetInt();\r\nBinaryPrimitives.WriteBigEndian(theSpan, i);\r\n// keep using 'i' here\r\n```\r\n\r\nSince the `bswap` instruction mutates its register, the JIT currently needs to make a temporary copy of the value if _i_ is intended to be used elsewhere in the method.\r\n\r\n```asm\r\nmov eax, ebx  ; ebx = 'i', eax = copy of 'i'\r\nbswap eax  ; eax = swapped(i)\r\nmov dword ptr [rcx], eax  ; theSpan[0] = swapped(i)\r\n````\r\n\r\nAll three of those instructions could be folded into a single `movbe` with no temporary registers required.\r\n\r\nOne complication is that there's no 16-bit `bswap` (it's instead a 16-bit `rol`), but there _is_ a 16-bit `movbe`, so the JIT would likely need to special-case that particular pattern.","Url":"https://github.com/dotnet/coreclr/issues/26735","RelatedDescription":"Open issue \"JIT should emit \"movbe\" instead of \"mov / bswap\" on compatible hardware\" (#26735)"},{"Id":"494154230","IsPullRequest":false,"CreatedAt":"2019-09-16T16:29:22","Actor":"jashook","Number":"26733","RawContent":null,"Title":"[CI] Git checkout sometimes fails unable to find the PR merge commit","State":"open","Body":"Seems like somehow the checkout sometimes is shallow depth=1, which may not have the correct merge commit. @trylek \r\n\r\nhttps://dev.azure.com/dnceng/public/_build/results?buildId=355295","Url":"https://github.com/dotnet/coreclr/issues/26733","RelatedDescription":"Open issue \"[CI] Git checkout sometimes fails unable to find the PR merge commit\" (#26733)"},{"Id":"494149352","IsPullRequest":true,"CreatedAt":"2019-09-16T16:19:07","Actor":"filipnavara","Number":"26732","RawContent":null,"Title":"Remove silent catch","State":"open","Body":"Dry run of CI for #26730.","Url":"https://github.com/dotnet/coreclr/pull/26732","RelatedDescription":"Open PR \"Remove silent catch\" (#26732)"},{"Id":"493825121","IsPullRequest":false,"CreatedAt":"2019-09-16T16:05:39","Actor":"VincentBu","Number":"26725","RawContent":null,"Title":"Fatal error. System.Runtime.InteropServices.SEHException (0x80004005): External component has thrown an exception","State":"closed","Body":"**Job:**\r\n[coreclr-outerloop #20190915.1](https://dev.azure.com/dnceng/public/_build/results?buildId=355679&view=ms.vss-test-web.build-test-results-tab&runId=10766866&resultId=106937&paneView=attachments)\r\n\r\n**OS & Arch:**\r\nLinux arm64\r\n\r\n**Note:**\r\nIt seems to be a random failure tracked in #26013 , Is it necessary to open new issue if this fails again?\r\n\r\n**Log:**\r\n```\r\nFatal error. System.Runtime.InteropServices.SEHException (0x80004005): External component has thrown an exception.\r\n   at System.String.Equals(System.String, System.String)\r\n   at System.String.op_Inequality(System.String, System.String)\r\n   at ThreadSafe.ThreadWorkerB(System.Object)\r\n   at System.Threading.ThreadHelper.ThreadStart_Context(System.Object)\r\n   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object)\r\n   at System.Threading.ThreadHelper.ThreadStart(System.Object)\r\nFatal error. System.Runtime.InteropServices.SEHException (0x80004005): External component has thrown an exception.\r\n   at System.String.Equals(System.String, System.String)\r\n   at System.String.op_Inequality(System.String, System.String)\r\n   at ThreadSafe.ThreadWorkerB(System.Object)\r\n   at System.Threading.ThreadHelper.ThreadStart_Context(System.Object)\r\n   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object)\r\n   at System.Threading.ThreadHelper.ThreadStart(System.Object)\r\nFatal error. System.Runtime.InteropServices.SEHException (0x80004005): External component has thrown an exception.\r\n   at System.String.Equals(System.String, System.String)\r\n   at System.String.op_Inequality(System.String, System.String)\r\n   at ThreadSafe.ThreadWorkerB(System.Object)\r\n   at System.Threading.ThreadHelper.ThreadStart_Context(System.Object)\r\n   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object)\r\n   at System.Threading.ThreadHelper.ThreadStart(System.Object)\r\n../ExchangeTString/ExchangeTString.sh: line 259:   831 Aborted                 (core dumped) $LAUNCHER $ExePath \"${CLRTestExecutionArguments[@]}\"\r\n\r\nReturn code:      1\r\nRaw output file:      /root/helix/work/workitem/baseservices/threading/Reports/baseservices.threading/interlocked/exchange/ExchangeTString_2/ExchangeTString_2.output.txt\r\nRaw output:\r\nBEGIN EXECUTION\r\nexport CDPATH=/root/helix/work/workitem/baseservices/threading/interlocked/exchange/ExchangeTString_2\r\n/usr/bin/env bash ../ExchangeTString/ExchangeTString.sh 'null' 'This is a string'\r\nBEGIN EXECUTION\r\nin takeLock\r\n/root/helix/work/correlation/crossgen /Platform_Assemblies_Paths /root/helix/work/correlation:/root/helix/work/workitem/baseservices/threading/interlocked/exchange/ExchangeTString/IL:/root/helix/work/workitem/baseservices/threading/interlocked/exchange/ExchangeTString /in ExchangeTString.org /out ExchangeTString.dll\r\nMicrosoft (R) CoreCLR Native Image Generator - Version 4.5.30319.0\r\nCopyright (c) Microsoft Corporation.  All rights reserved.\r\n\r\nNative image ExchangeTString.dll generated successfully.\r\nin ReleaseLock\r\nin takeLock\r\n/root/helix/work/correlation/corerun ExchangeTString.dll 'null' 'This is a string'\r\nCreating threads\r\nStarting checker\r\nJoining threads\r\nin ReleaseLock\r\nExpected: 100\r\nActual: 134\r\nEND EXECUTION - FAILED\r\nExpected: 0\r\nActual: 1\r\nEND EXECUTION - FAILED\r\nTest Harness Exitcode is : 1\r\n```","Url":"https://github.com/dotnet/coreclr/issues/26725","RelatedDescription":"Closed issue \"Fatal error. System.Runtime.InteropServices.SEHException (0x80004005): External component has thrown an exception\" (#26725)"},{"Id":"494141834","IsPullRequest":false,"CreatedAt":"2019-09-16T16:03:52","Actor":"nxrighthere","Number":"26731","RawContent":null,"Title":"Performance anomalies in comparsion to Mono","State":"open","Body":"Recently I made a bunch of various benchmarks to test Unity's Burst compiler against native compilers. I also included Mono and CoreCLR out of curiosity, the code is available [here](https://github.com/nxrighthere/BurstBenchmarks) in .NET folder. I've noticed strange results in two tests (Sieve of Eratosthenes and Particle Kinematics) where CoreCLR performs way much slower than Mono for some reason, I think this requires in-depth analysis by appropriate developers of .NET Core.\r\n\r\nI'm happy to provide any additional info or assistance if required.","Url":"https://github.com/dotnet/coreclr/issues/26731","RelatedDescription":"Open issue \"Performance anomalies in comparsion to Mono\" (#26731)"},{"Id":"493820003","IsPullRequest":false,"CreatedAt":"2019-09-16T15:44:40","Actor":"VincentBu","Number":"26724","RawContent":null,"Title":"Assert failure: (curSP <= m_pFrame && m_pFrame < m_CacheStackBase) || m_pFrame == (Frame*) -1","State":"closed","Body":"**Job:**\r\n[coreclr-jitstressregs #20190915.1\r\n](https://dev.azure.com/dnceng/public/_build/results?buildId=355684&view=ms.vss-test-web.build-test-results-tab&runId=10767318&resultId=103311&paneView=attachments)\r\n\r\n**OS & Arch:**\r\nLinux arm32\r\n\r\n**Note:**\r\nThere is no complete console output， I'm not sure how to repro this failure.\r\n\r\n**Log:**\r\n```\r\nAssert failure(PID 3351 [0x00000d17], Thread: 3369 [0x0d29]): (curSP <= m_pFrame && m_pFrame < m_CacheStackBase) || m_pFrame == (Frame*) -1\r\n    File: /__w/3/s/src/vm/threads.h Line: 1901\r\n    Image: /root/helix/work/correlation/corerun\r\n\r\n/root/helix/work/workitem/JIT/Regression/CLR-x86-JIT/V1.1-M1-Beta1/b143840/b143840/b143840.sh: line 266:  3351 Aborted                 (core dumped) $LAUNCHER $ExePath \"${CLRTestExecutionArguments[@]}\"\r\n\r\nReturn code:      1\r\nRaw output file:      /root/helix/work/workitem/JIT/Regression/Reports/JIT.Regression/CLR-x86-JIT/V1.1-M1-Beta1/b143840/b143840/b143840.output.txt\r\nRaw output:\r\nBEGIN EXECUTION\r\n/root/helix/work/correlation/corerun b143840.dll ''\r\nExpected: 100\r\nActual: 134\r\nEND EXECUTION - FAILED\r\nTest Harness Exitcode is : 1\r\n```","Url":"https://github.com/dotnet/coreclr/issues/26724","RelatedDescription":"Closed issue \"Assert failure: (curSP <= m_pFrame && m_pFrame < m_CacheStackBase) || m_pFrame == (Frame*) -1\" (#26724)"},{"Id":"494129100","IsPullRequest":false,"CreatedAt":"2019-09-16T15:40:30","Actor":"jkotas","Number":"26730","RawContent":null,"Title":"CoreCLR silently ignores exceptions from DangerousRelease in marshalling","State":"open","Body":"From https://github.com/mono/mono/issues/16859#issue-494056862:\r\n\r\nCoreCLR silently ignores exceptions from DangerousRelease in marshalling https://github.com/dotnet/coreclr/blob/7adc7249f71679b6a1727e17cd15df4db5d621b3/src/System.Private.CoreLib/src/System/StubHelpers.cs#L1646-L1652\r\n\r\nIt seems it could hide legitimate bugs or race condition","Url":"https://github.com/dotnet/coreclr/issues/26730","RelatedDescription":"Open issue \"CoreCLR silently ignores exceptions from DangerousRelease in marshalling\" (#26730)"},{"Id":"494113731","IsPullRequest":false,"CreatedAt":"2019-09-16T15:13:38","Actor":"RobertSales","Number":"26729","RawContent":null,"Title":"Inefficient code generation using BinaryPrimitives methods","State":"open","Body":"See comments in following program.  The first 7 calls to the Add method are in-lined as expected.  However, adding one more call to the Add method causes an explosion in the size of the generated code, and much less efficient performance.\r\nWe would appreciate hints as to what limits are being broken to cause this loss of performance.\r\n\r\nCan be seen using [sharplab.io](https://sharplab.io/#v2:EYLgxg9gTgpgtADwGwBYA0AXEBDAzgWwB8ABAJgEYBYAKGIAYACY8gOgCEBXAMy5il3YBLAHbYoATwDcNek1YAlDsIyD8MFgGEI+AA6CANnwDKfAG6CwMXNOozScgOw0A3jQbu5SJigYBZbCIAFMx0ANoAugxiAOa4AJRuHq7UHqkMwOIYMBHp5AwAvAzCMADu6ZnZABzhNmkewOShAMyRheS1dbmhDq0MpB11pmIMuDp5hcVlRjrYwgA8GVkAfIENaAx06yhxA2lDUCM69hOlDNOzCxUrawzotzs0iXUAggAmr4Gj5OujpA8pnTeHy+PyO/06DCBnzGoL+u1SUJBhzhTzSiJhyPBgPe0O+mPhHnReN+/1RqQA9OSGAAVAAWMAYXAg+n0EBKImiDH0IgZYGwHFwVkZw3w0AZGFpsyKMEsuFwYnEDEgr3FEHSDOiMGKUGwWVeZI8lIYAHVBBKIBwsAwAH4ORjPXwAEVQDBEuAwUA4YBUEGEuAN7iNpolIBtpHDkKdLrdHq9Pr9AchOKRJN2AF9HgD3KFfDBza8AJK6fTPDAewTAS0wQK5/NFnT6ADyOnjAme0WisDlglMMALwm5wg5cXCqOYXmIPih53mbCuhzxM7mc+WmNRyQh+1d4wYbBECoAClBVGae1YWPIYNhC8omqQ99EAKLCV6CWa4rGDYaCY67/cSI8TxUXsBEva9+wwO8H2fV931TRMfwYABqQpBHaRM91EADj3wU8QJYY1jyyCCoMEJ8XzfYRoVIdYf0/BgM2oRigA=):\r\n\r\n```csharp\r\nusing System;\r\nusing System.Buffers.Binary;\r\nusing System.Runtime.CompilerServices;\r\n\r\nclass Program\r\n{\r\n    static void Main(string[] args)\r\n    {\r\n        byte[] b1 = new byte[8];\r\n        b1[3] = 1;\r\n        b1[7] = 2;\r\n        var sp1 = new Span<byte>(b1, 0, 4);\r\n        var sp2 = new Span<byte>(b1, 4, 4);\r\n\r\n        Add(sp1, sp2);\r\n        Add(sp1, sp2);\r\n        Add(sp1, sp2);\r\n        Add(sp1, sp2);\r\n        Add(sp1, sp2);\r\n        Add(sp1, sp2);\r\n        Add(sp1, sp2);\r\n\r\n        // The following line causes far more than necessary code to be generated\r\n        // Without: ~70 AMD64 instructions\r\n        // With: ~222 AMD64 instructions\r\n        Add(sp1, sp2);\r\n    }\r\n\r\n    [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]\r\n    static void Add(Span<Byte> sp1, Span<Byte> sp2)\r\n    {\r\n        var i1 = BinaryPrimitives.ReadInt32BigEndian(sp1);\r\n        var i2 = BinaryPrimitives.ReadInt32BigEndian(sp2);\r\n        i2 += i1;\r\n        BinaryPrimitives.WriteInt32BigEndian(sp2, i2);\r\n    }\r\n}\r\n```","Url":"https://github.com/dotnet/coreclr/issues/26729","RelatedDescription":"Open issue \"Inefficient code generation using BinaryPrimitives methods\" (#26729)"},{"Id":"494008393","IsPullRequest":true,"CreatedAt":"2019-09-16T13:52:26","Actor":"dotnet-maestro[bot]","Number":"26728","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d21e78e6-fa30-42ea-2807-08d690bc5860)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190915.2\r\n- **Date Produced**: 9/16/2019 4:10 AM\r\n- **Commit**: 9042fe6c81aa3b47f58ccd94ff02e42f9f7a4e46\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19465.2\r\n\r\n[marker]: <> (End:d21e78e6-fa30-42ea-2807-08d690bc5860)\r\n\r\n","Url":"https://github.com/dotnet/coreclr/pull/26728","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#26728)"},{"Id":"494008217","IsPullRequest":true,"CreatedAt":"2019-09-16T13:46:57","Actor":"dotnet-maestro[bot]","Number":"26727","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:16d3c6aa-851a-4668-94d4-08d690bc143a)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190915.2\r\n- **Date Produced**: 9/15/2019 6:42 PM\r\n- **Commit**: e8efb815275c8323fedc950ca3596474fa5e23c3\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.Platforms** -> 5.0.0-alpha1.19465.2\r\n  - **Microsoft.Private.CoreFx.NETCoreApp** -> 5.0.0-alpha1.19465.2\r\n\r\n[marker]: <> (End:16d3c6aa-851a-4668-94d4-08d690bc143a)\r\n\r\n","Url":"https://github.com/dotnet/coreclr/pull/26727","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#26727)"},{"Id":"493655092","IsPullRequest":true,"CreatedAt":"2019-09-16T12:07:06","Actor":"trylek","Number":"26719","RawContent":null,"Title":"More SuperIlc fixes and improvements","State":"closed","Body":"1) Set OutputFileName to the same value as InputFileName for\r\nexecution runs. This lets me use the output file name as a common\r\ntest key for both phases.\r\n\r\n2) Exclude Core_Root subtree in compile-subtree - this is needed\r\nto avoid compiling Crossgen2.\r\n\r\n3) As Anubhav pointed out, I messed up one of my previous\r\nrefactorings so that running the legacy Crossgen was no longer\r\noptional based on the --crossgen switch.\r\n\r\n4) I removed an unnecessary formatting string I randomly noticed.\r\n\r\nThanks\r\n\r\nTomas","Url":"https://github.com/dotnet/coreclr/pull/26719","RelatedDescription":"Closed or merged PR \"More SuperIlc fixes and improvements\" (#26719)"},{"Id":"493828654","IsPullRequest":false,"CreatedAt":"2019-09-16T03:17:18","Actor":"VincentBu","Number":"26726","RawContent":null,"Title":"Test failed: JIT/SIMD/VectorDot_ro/VectorDot_ro.sh","State":"open","Body":"**Job:**\r\n[coreclr-r2r-extra #20190914.1 Run Test Pri1 R2R Linux x64 checked](https://dev.azure.com/dnceng/public/_build/results?buildId=355534&view=logs)\r\n\r\n**Detail:**\r\nhttps://helix.dot.net/api/2019-06-17/jobs/aadc2653-9544-47df-b21f-fcfa9380c010/workitems/JIT/console\r\n\r\n**OS & Arch:**\r\nLinux x64\r\n\r\n**Mode:**\r\nCOMPlus_TieredCompilation=1\r\nCOMPlus_JitStress=1\r\n\r\n**Note:**\r\nThis failure **doesn't repro** on Linux x64.\r\n\r\n**Log:**\r\n```\r\nJIT/SIMD/VectorDot_ro/VectorDot_ro.sh [FAIL]\r\n      \r\n      Return code:      1\r\n      Raw output file:      /home/helixbot/work/aadc2653-9544-47df-b21f-fcfa9380c010/Work/e86d2e15-1fce-4c94-a227-39f31a8af676/Exec/JIT/SIMD/Reports/JIT.SIMD/VectorDot_ro/VectorDot_ro.output.txt\r\n      Raw output:\r\n      BEGIN EXECUTION\r\n      in takeLock\r\n      /home/helixbot/work/aadc2653-9544-47df-b21f-fcfa9380c010/Payload/crossgen /Platform_Assemblies_Paths /home/helixbot/work/aadc2653-9544-47df-b21f-fcfa9380c010/Payload:/home/helixbot/work/aadc2653-9544-47df-b21f-fcfa9380c010/Work/e86d2e15-1fce-4c94-a227-39f31a8af676/Exec/JIT/SIMD/VectorDot_ro/IL:/home/helixbot/work/aadc2653-9544-47df-b21f-fcfa9380c010/Work/e86d2e15-1fce-4c94-a227-39f31a8af676/Exec/JIT/SIMD/VectorDot_ro /in VectorDot_ro.org /out VectorDot_ro.dll\r\n      Microsoft (R) CoreCLR Native Image Generator - Version 4.5.30319.0\r\n      Copyright (c) Microsoft Corporation.  All rights reserved.\r\n      \r\n      Native image VectorDot_ro.dll generated successfully.\r\n      in ReleaseLock\r\n      in takeLock\r\n      /home/helixbot/work/aadc2653-9544-47df-b21f-fcfa9380c010/Payload/corerun VectorDot_ro.dll ''\r\n      Method System.Numerics.Vector4:Dot was compiled but should not have been\r\n      Method System.Numerics.Vector3:Dot was compiled but should not have been\r\n      Method System.Numerics.Vector2:Dot was compiled but should not have been\r\n      in ReleaseLock\r\n      Expected: 100\r\n      Actual: 255\r\n      END EXECUTION - FAILED\r\n      Test Harness Exitcode is : 1\r\n```","Url":"https://github.com/dotnet/coreclr/issues/26726","RelatedDescription":"Open issue \"Test failed: JIT/SIMD/VectorDot_ro/VectorDot_ro.sh\" (#26726)"},{"Id":"493814360","IsPullRequest":false,"CreatedAt":"2019-09-16T01:40:30","Actor":"VincentBu","Number":"26723","RawContent":null,"Title":"Test failed: tracing/eventpipe/providervalidation/providervalidation/providervalidation.sh","State":"open","Body":"**Job:**\r\n[coreclr-gcstress0x3-gcstress0xc #20190915.1](https://dev.azure.com/dnceng/public/_build/results?buildId=355716&view=ms.vss-test-web.build-test-results-tab&runId=10772044&resultId=107762&paneView=attachments)\r\n\r\n**Detail:**\r\nhttps://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-coreclr-refs-heads-master-1b129047376c49ab8c/PayloadGroup0/console.7d9ba2dd.log?sv=2018-03-28&sr=c&sig=%2BCuFvk4O32Eq6FJHNIOqSrFFwa5rJb75PhvPinMJuIc%3D&se=2019-09-25T13%3A36%3A53Z&sp=rl\r\n\r\n**OS & Arch:**\r\nLinux x64 arm64\r\n\r\n**Mode:**\r\nexport COMPlus_TieredCompilation=0\r\nexport COMPlus_GCStress=0x3\r\n\r\n**Log:**\r\n```\r\ntracing/eventpipe/providervalidation/providervalidation/providervalidation.sh [FAIL]\r\n      \r\n      Assert failure(PID 5999 [0x0000176f], Thread: 6043 [0x179b]): CORProfilerStackSnapshotEnabled() || !IsStackWalkerThread()\r\n          File: /__w/3/s/src/vm/stackwalk.cpp Line: 943\r\n          Image: /home/helixbot/work/1b129047-376c-49ab-8c93-09a09a464405/Payload/corerun\r\n      \r\n      /home/helixbot/work/1b129047-376c-49ab-8c93-09a09a464405/Work/78d9e16a-bffd-4280-ac7a-79e8e9aa3dab/Exec/tracing/eventpipe/providervalidation/providervalidation/providervalidation.sh: line 271:  5999 Aborted                 (core dumped) $LAUNCHER $ExePath \"${CLRTestExecutionArguments[@]}\"\r\n      \r\n      Return code:      1\r\n      Raw output file:      /home/helixbot/work/1b129047-376c-49ab-8c93-09a09a464405/Work/78d9e16a-bffd-4280-ac7a-79e8e9aa3dab/Exec/tracing/eventpipe/Reports/tracing.eventpipe/providervalidation/providervalidation/providervalidation.output.txt\r\n      Raw output:\r\n      BEGIN EXECUTION\r\n      /home/helixbot/work/1b129047-376c-49ab-8c93-09a09a464405/Payload/corerun providervalidation.dll ''\r\n        0.0s: ==TEST STARTING==\r\n        1.1s: Validating clean environment...\r\n        8.6s: Environment was clean.\r\n        8.6s: Connecting to EventPipe...\r\n       14.9s: Connected to EventPipe with sessionID '0x7f26ac000f40'\r\n       15.7s: Started sending sentinel events...\r\n       15.8s: Creating EventPipeEventSource...\r\n       18.3s: EventPipeEventSource created\r\n       19.5s: Dynamic.All callback registered\r\n       19.5s: Starting stream processing...\r\n      Expected: 100\r\n      Actual: 134\r\n      END EXECUTION - FAILED\r\n      Test Harness Exitcode is : 1\r\n```","Url":"https://github.com/dotnet/coreclr/issues/26723","RelatedDescription":"Open issue \"Test failed: tracing/eventpipe/providervalidation/providervalidation/providervalidation.sh\" (#26723)"},{"Id":"493797062","IsPullRequest":true,"CreatedAt":"2019-09-15T23:01:01","Actor":"trylek","Number":"26722","RawContent":null,"Title":"Fix ldvirtftn handling in ceeInfoGetCallInfo per Fadi's CoreCLR fix","State":"open","Body":"https://github.com/dotnet/coreclr/pull/24383/files\r\n\r\nAfter merging in Jan Vorlicek's fundamental PInvoke transition frame\r\nsize fix, I took a look at some of the remaining failures. During\r\ndebugging of the test\r\n\r\nbaseservices/threading/generics/syncdelegate/GCThread16\r\n\r\nI noticed a JIT codegen difference I tracked down to Fadi's PR\r\nnot present in the Crossgen2 source code. Thankfully the method\r\nis today a line-by-line rewrite of its legacy Crossgen counterpart\r\nso it was pretty trivial to spot this one new bit.\r\n\r\nThanks\r\n\r\nTomas\r\n\r\nP.S. FYI to Andrew who is working on porting various CoreCLR changes\r\nto Crossgen2 AFAIK.","Url":"https://github.com/dotnet/coreclr/pull/26722","RelatedDescription":"Open PR \"Fix ldvirtftn handling in ceeInfoGetCallInfo per Fadi's CoreCLR fix\" (#26722)"},{"Id":"493616946","IsPullRequest":true,"CreatedAt":"2019-09-15T15:43:33","Actor":"dotnet-maestro[bot]","Number":"26717","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:16d3c6aa-851a-4668-94d4-08d690bc143a)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190914.4\r\n- **Date Produced**: 9/15/2019 5:48 AM\r\n- **Commit**: cbcc2a5e6f8be1e43b16874ed358c18c5d6bcd5b\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.Platforms** -> 5.0.0-alpha1.19464.4\r\n  - **Microsoft.Private.CoreFx.NETCoreApp** -> 5.0.0-alpha1.19464.4\r\n\r\n[marker]: <> (End:16d3c6aa-851a-4668-94d4-08d690bc143a)\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/coreclr/pull/26717","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#26717)"},{"Id":"493729752","IsPullRequest":true,"CreatedAt":"2019-09-15T15:42:19","Actor":"dotnet-maestro[bot]","Number":"26720","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d21e78e6-fa30-42ea-2807-08d690bc5860)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190914.2\r\n- **Date Produced**: 9/15/2019 4:11 AM\r\n- **Commit**: 9042fe6c81aa3b47f58ccd94ff02e42f9f7a4e46\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19464.2\r\n\r\n[marker]: <> (End:d21e78e6-fa30-42ea-2807-08d690bc5860)\r\n\r\n","Url":"https://github.com/dotnet/coreclr/pull/26720","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#26720)"},{"Id":"493616968","IsPullRequest":true,"CreatedAt":"2019-09-14T13:59:49","Actor":"dotnet-maestro[bot]","Number":"26718","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d21e78e6-fa30-42ea-2807-08d690bc5860)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190913.6\r\n- **Date Produced**: 9/13/2019 4:20 PM\r\n- **Commit**: 9042fe6c81aa3b47f58ccd94ff02e42f9f7a4e46\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19463.6\r\n\r\n[marker]: <> (End:d21e78e6-fa30-42ea-2807-08d690bc5860)\r\n\r\n","Url":"https://github.com/dotnet/coreclr/pull/26718","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#26718)"},{"Id":"493616711","IsPullRequest":true,"CreatedAt":"2019-09-14T13:50:57","Actor":"dotnet-maestro[bot]","Number":"26716","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:1cc0f2b0-7abd-45f0-cee6-08d67668456c)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190913.3\r\n- **Date Produced**: 9/13/2019 11:47 PM\r\n- **Commit**: 7b731032220c21a3ed0021c72757b1f3122579b2\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19463.3\r\n  - **Microsoft.DotNet.Build.Tasks.Feed** -> 2.2.0-beta.19463.3\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19463.3\r\n  - **Microsoft.DotNet.Helix.Sdk** -> 2.0.0-beta.19463.3\r\n\r\n[marker]: <> (End:1cc0f2b0-7abd-45f0-cee6-08d67668456c)\r\n\r\n","Url":"https://github.com/dotnet/coreclr/pull/26716","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#26716)"},{"Id":"493596805","IsPullRequest":true,"CreatedAt":"2019-09-14T10:52:10","Actor":"MichalStrehovsky","Number":"26715","RawContent":null,"Title":"Add coverage of shared code in pointer casting test","State":"closed","Body":"","Url":"https://github.com/dotnet/coreclr/pull/26715","RelatedDescription":"Closed or merged PR \"Add coverage of shared code in pointer casting test\" (#26715)"}],"ResultType":"GitHubIssue"},"CLI-Issues":{"Issues":[{"Id":"494229618","IsPullRequest":false,"CreatedAt":"2019-09-16T19:19:27","Actor":"sebastienros","Number":"12663","RawContent":null,"Title":"Latest version of 3.0.xx/release branch cannot be found","State":"open","Body":"The latest stable version of the sdk can be found here:\r\nhttps://dotnetcli.blob.core.windows.net/dotnet/Sdk/release/3.0.1xx/latest.version\r\n\r\n```\r\n02df19ceac5d194d71b04c2823b9b02ced542c44\r\n3.0.100-rc2-014261\r\n```\r\n\r\nHowever when using this version with `dotnet-install` it can't be found. I waited a few hours in case it would be a transient issue but it's still occuring.\r\n\r\n```\r\n[12:14:50.094] dotnet-install: Downloading link: https://dotnetcli.azureedge.net/dotnet/Sdk/3.0.100-rc2-014261/dotnet-sdk-3.0.100-rc2-014261-win-x64.zip\r\n[12:14:52.274] dotnet-install: Cannot download: https://dotnetcli.azureedge.net/dotnet/Sdk/3.0.100-rc2-014261/dotnet-sdk-3.0.100-rc2-014261-win-x64.zip\r\n[12:14:52.276] dotnet-install: Downloading legacy link: https://dotnetcli.azureedge.net/dotnet/Sdk/3.0.100-rc2-014261/dotnet-dev-win-x64.3.0.100-rc2-014261.zip\r\n[12:14:54.384] dotnet-install: Cannot download: https://dotnetcli.azureedge.net/dotnet/Sdk/3.0.100-rc2-014261/dotnet-dev-win-x64.3.0.100-rc2-014261.zip\r\n[12:14:54.434] Could not find/download: \".NET Core SDK\" with version = 3.0.100-rc2-014261\r\n[12:14:54.434] Refer to: https://aka.ms/dotnet-os-lifecycle for information on .NET Core support\r\n[12:14:54.434] At C:\\Users\\Administrator\\AppData\\Local\\Temp\\BenchmarksServer\\t1usq3ss.20k\\dotnet-install.ps1:633 char:5\r\n[12:14:54.434] +     throw \"Could not find/download: `\"$assetName`\" with version = $Sp ...\r\n[12:14:54.434] +     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n[12:14:54.434]     + CategoryInfo          : OperationStopped: (Could not find/...ET Core support:String) [], RuntimeException\r\n[12:14:54.434]     + FullyQualifiedErrorId : Could not find/download: \".NET Core SDK\" with version = 3.0.100-rc2-014261\r\n[12:14:54.434] Refer to: https://aka.ms/dotnet-os-lifecycle for information on .NET Core support\r\n```","Url":"https://github.com/dotnet/cli/issues/12663","RelatedDescription":"Open issue \"Latest version of 3.0.xx/release branch cannot be found\" (#12663)"},{"Id":"494185556","IsPullRequest":true,"CreatedAt":"2019-09-16T18:15:40","Actor":"dotnet-maestro[bot]","Number":"12662","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190916.2\r\n- **Date Produced**: 9/16/2019 4:19 PM\r\n- **Commit**: 9042fe6c81aa3b47f58ccd94ff02e42f9f7a4e46\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19466.2\r\n  - **Microsoft.NET.HostModel** -> 5.0.0-alpha1.19466.2\r\n  - **Microsoft.Extensions.DependencyModel** -> 5.0.0-alpha1.19466.2\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 5.0.0-alpha1.19466.2\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 5.0.0-alpha1.19466.2\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12662","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#12662)"},{"Id":"494156338","IsPullRequest":true,"CreatedAt":"2019-09-16T17:09:28","Actor":"dotnet-maestro[bot]","Number":"12661","RawContent":null,"Title":"[release/3.1.1xx] Update dependencies from dotnet/sdk","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:3731cb06-cbf9-46bf-a883-08d7219800a1)\r\n## From https://github.com/dotnet/sdk\r\n- **Build**: 20190914.2\r\n- **Date Produced**: 9/14/2019 3:27 PM\r\n- **Commit**: b29bcb7f23534b84d7a82fd7e9b0237c3cbfd44d\r\n- **Branch**: refs/heads/release/3.1.1xx\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk** -> 3.1.100-preview1.19464.2\r\n\r\n[marker]: <> (End:3731cb06-cbf9-46bf-a883-08d7219800a1)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12661","RelatedDescription":"Closed or merged PR \"[release/3.1.1xx] Update dependencies from dotnet/sdk\" (#12661)"},{"Id":"494057252","IsPullRequest":false,"CreatedAt":"2019-09-16T13:48:41","Actor":"lauxjpn","Number":"12660","RawContent":null,"Title":"Improve current progress output of dotnet test","State":"closed","Body":"Calling `dotnet test` on a large test suit leaves you guessing, how many tests are left to be run.\r\n\r\nInstead of just outputting `Test run in progress.\", a small summary of the passed, failed, skipped and remaining test should be displayed.","Url":"https://github.com/dotnet/cli/issues/12660","RelatedDescription":"Closed issue \"Improve current progress output of dotnet test\" (#12660)"},{"Id":"493889132","IsPullRequest":true,"CreatedAt":"2019-09-16T07:30:18","Actor":"dotnet-maestro[bot]","Number":"12659","RawContent":null,"Title":"[release/3.1.1xx] Update dependencies from aspnet/AspNetCore","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:c7c33a9e-18af-4618-5026-08d727dabd66)\r\n## From https://github.com/aspnet/AspNetCore\r\n- **Build**: 20190916.6\r\n- **Date Produced**: 9/17/2019 1:40 AM\r\n- **Commit**: 438b17bd6568e25b34f431570529395e09b1d780\r\n- **Branch**: refs/heads/release/3.1\r\n- **Updates**:\r\n  - **Microsoft.AspNetCore.DeveloperCertificates.XPlat** -> 3.1.0-preview1.19466.6\r\n\r\n[marker]: <> (End:c7c33a9e-18af-4618-5026-08d727dabd66)\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12659","RelatedDescription":"Open PR \"[release/3.1.1xx] Update dependencies from aspnet/AspNetCore\" (#12659)"},{"Id":"493851515","IsPullRequest":true,"CreatedAt":"2019-09-16T05:55:39","Actor":"dotnet-maestro[bot]","Number":"12658","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190915.2\r\n- **Date Produced**: 9/16/2019 4:10 AM\r\n- **Commit**: 9042fe6c81aa3b47f58ccd94ff02e42f9f7a4e46\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19465.2\r\n  - **Microsoft.NET.HostModel** -> 5.0.0-alpha1.19465.2\r\n  - **Microsoft.Extensions.DependencyModel** -> 5.0.0-alpha1.19465.2\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 5.0.0-alpha1.19465.2\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 5.0.0-alpha1.19465.2\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12658","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#12658)"},{"Id":"493797810","IsPullRequest":true,"CreatedAt":"2019-09-15T23:45:39","Actor":"dotnet-maestro[bot]","Number":"12657","RawContent":null,"Title":"[release/3.0.1xx] Update dependencies from aspnet/AspNetCore","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d54a5172-b4ce-4f86-d36b-08d6f038a15f)\r\n## From https://github.com/aspnet/AspNetCore\r\n- **Build**: 20190915.2\r\n- **Date Produced**: 9/15/2019 10:49 PM\r\n- **Commit**: aee5e4080331553ea9dfb7fb388b6d72f715bf6a\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.AspNetCore.DeveloperCertificates.XPlat** -> 3.0.0-rc2.19465.2\r\n\r\n[marker]: <> (End:d54a5172-b4ce-4f86-d36b-08d6f038a15f)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12657","RelatedDescription":"Closed or merged PR \"[release/3.0.1xx] Update dependencies from aspnet/AspNetCore\" (#12657)"},{"Id":"493742224","IsPullRequest":false,"CreatedAt":"2019-09-15T21:51:50","Actor":"ovebastiansen","Number":"12654","RawContent":null,"Title":"dotnet build produces different output in bin folder with latest sdk","State":"closed","Body":"## Steps to reproduce\r\nPin sdk with global.json\r\ndotnet new webapi -f netcoreapp2.2\r\nBuild with sdk 2.2.401 and 3.0.100-preview9-014004\r\ndotnet build and look at bin\\debug\\netcoreapp2.2 with different value for sdk in global.json\r\n\r\n## Expected  behavior\r\n*.json is not copied out to output folder, unless CopyToOutputDirectory is preservenewest or copyalways\r\nonly copied to output when using dotnet publish\r\n\r\n## Actual behavior\r\nappsettings.json and properties\\launchsettings.json is copied to bin folder in 3.0.100-preview9-014004 and not in 2.2.401\r\ndotnet publish with 2.2.401 copies the appsettings.json to outputfolder, as expected\r\ndotnet publish with 3.0.100-preview9-014004 copied the appsettings.json but not the launchsettings to output\r\n![image](https://user-images.githubusercontent.com/17083905/64922654-f2041000-d7d1-11e9-9395-e71b24bebf72.png)\r\n![image](https://user-images.githubusercontent.com/17083905/64922668-16f88300-d7d2-11e9-8c69-cc7e16c26809.png)\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.401\r\n Commit:    729b316c13\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.15063\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.401\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview9-19423-09\r\n  Commit:  2be172345a\r\n\r\n.NET Core SDKs installed:\r\n  2.1.801 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.108 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.401 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview8-013656 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview9-014004 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview8.19405.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview9.19424.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview8-28405-07 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview9-19423-09 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview8-28405-07 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview9-19423-09 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/12654","RelatedDescription":"Closed issue \"dotnet build produces different output in bin folder with latest sdk\" (#12654)"},{"Id":"493781192","IsPullRequest":false,"CreatedAt":"2019-09-15T20:27:49","Actor":"fasetto","Number":"12656","RawContent":null,"Title":"Publishing doesn't generate executable file","State":"closed","Body":"## Steps to reproduce\r\nCreate a console app and publish it.\r\n\r\n## Expected  behavior\r\nIt should generate executable file for OS.\r\n\r\n## Actual behavior\r\nGenerates .dll file but not executable.\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.401\r\n Commit:    729b316c13\r\n\r\nRuntime Environment:\r\n OS Name:     ubuntu\r\n OS Version:  19.04\r\n OS Platform: Linux\r\n RID:         ubuntu.19.04-x64\r\n Base Path:   /usr/share/dotnet/sdk/2.2.401/\r\n\r\nHost (useful for support):\r\n  Version: 2.2.6\r\n  Commit:  7dac9b1b51\r\n\r\n.NET Core SDKs installed:\r\n  2.2.401 [/usr/share/dotnet/sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.2.6 [/usr/share/dotnet/shared/Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.6 [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.2.6 [/usr/share/dotnet/shared/Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/12656","RelatedDescription":"Closed issue \"Publishing doesn't generate executable file\" (#12656)"},{"Id":"493730976","IsPullRequest":false,"CreatedAt":"2019-09-15T18:42:36","Actor":"Trolldemorted","Number":"12653","RawContent":null,"Title":"IncludeSource and --include-source are ignored if SymbolPackageFormat is set to snupkg","State":"closed","Body":"## Steps to reproduce\r\nTake this .csproj:\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <TargetFramework>netstandard2.1</TargetFramework>\r\n    <Nullable>enable</Nullable>\r\n    <LangVersion>8.0</LangVersion>\r\n    <Authors>Benedikt Radtke</Authors>\r\n    <PackageProjectUrl>https://github.com/Trolldemorted/VncDotnet</PackageProjectUrl>\r\n    <RepositoryUrl>https://github.com/Trolldemorted/VncDotnet</RepositoryUrl>\r\n    <PackageTags>vnc rfb</PackageTags>\r\n    <PackageLicenseExpression>EUPL-1.2</PackageLicenseExpression>\r\n    <IncludeSymbols>true</IncludeSymbols>\r\n    <IncludeSource>true</IncludeSource>\r\n    <Version>1.0.3</Version>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.IO.Pipelines\" Version=\"4.5.3\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThis generates a symbols.nupkg archive with the source code as expected:\r\n![grafik](https://user-images.githubusercontent.com/10261186/64921403-3b992e80-d7c3-11e9-8492-5fa59304476e.png)\r\n\r\nBut if you add `<SymbolPackageFormat>snupkg</SymbolPackageFormat>` because you want to push your symbols to nuget.org, the source code is omitted:\r\n![grafik](https://user-images.githubusercontent.com/10261186/64921440-8155f700-d7c3-11e9-8eac-0ab30ab7bbf5.png)\r\n\r\n\r\n## Expected  behavior\r\nThe sourcecode is put into the resulting .snupkg archive.\r\n\r\n## Actual behavior\r\nThe sourcecode is missing in resulting .snupkg archive.\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n```\r\nPS C:\\Users\\Benni\\repositories\\VncDotnet> dotnet --info                                                                                                                                                                                                                         .NET Core SDK (gemäß \"global.json\"):                                                                                                                                                                                                                                             Version:   3.0.100-preview9-014004\r\n Commit:    8e7ef240a5\r\n\r\nLaufzeitumgebung:\r\n OS Name:     Windows\r\n OS Version:  10.0.18362\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview9-014004\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview9-19423-09\r\n  Commit:  2be172345a\r\n\r\n.NET Core SDKs installed:\r\n  1.0.0-preview4-004233 [C:\\Program Files\\dotnet\\sdk]\r\n  1.0.0-rc3-004530 [C:\\Program Files\\dotnet\\sdk]\r\n  1.0.0-rc4-004771 [C:\\Program Files\\dotnet\\sdk]\r\n  1.0.0 [C:\\Program Files\\dotnet\\sdk]\r\n  1.0.2 [C:\\Program Files\\dotnet\\sdk]\r\n  1.0.3 [C:\\Program Files\\dotnet\\sdk]\r\n  1.0.4 [C:\\Program Files\\dotnet\\sdk]\r\n  1.1.0 [C:\\Program Files\\dotnet\\sdk]\r\n  2.0.2 [C:\\Program Files\\dotnet\\sdk]\r\n  2.0.3 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.2 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.4 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.101 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.102 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.103 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.104 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.200 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.201 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.202 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.400 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.403 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.500 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.503 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.504 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.505 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.507 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.508 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.602 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.604 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.700 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.701 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.800 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.801 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.203 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview9-014004 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview9.19424.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.0.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.0.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview9-19423-09 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview9-19423-09 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/12653","RelatedDescription":"Closed issue \"IncludeSource and --include-source are ignored if SymbolPackageFormat is set to snupkg\" (#12653)"},{"Id":"493764458","IsPullRequest":true,"CreatedAt":"2019-09-15T18:05:40","Actor":"dotnet-maestro[bot]","Number":"12655","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190915.1\r\n- **Date Produced**: 9/15/2019 4:23 PM\r\n- **Commit**: 9042fe6c81aa3b47f58ccd94ff02e42f9f7a4e46\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19465.1\r\n  - **Microsoft.NET.HostModel** -> 5.0.0-alpha1.19465.1\r\n  - **Microsoft.Extensions.DependencyModel** -> 5.0.0-alpha1.19465.1\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 5.0.0-alpha1.19465.1\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 5.0.0-alpha1.19465.1\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12655","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#12655)"},{"Id":"493729138","IsPullRequest":true,"CreatedAt":"2019-09-15T12:40:42","Actor":"dotnet-maestro[bot]","Number":"12651","RawContent":null,"Title":"[master] Update dependencies from dotnet/sdk","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:145b81c3-fdcc-4cb6-70fa-08d645e3a44f)\r\n## From https://github.com/dotnet/sdk\r\n- **Build**: 20190914.1\r\n- **Date Produced**: 9/14/2019 3:04 PM\r\n- **Commit**: b07b215a9c1fe6eabe1eee148bf5efec2c2e613b\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk** -> 5.0.100-alpha1.19464.1\r\n\r\n[marker]: <> (End:145b81c3-fdcc-4cb6-70fa-08d645e3a44f)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12651","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/sdk\" (#12651)"},{"Id":"493729453","IsPullRequest":true,"CreatedAt":"2019-09-15T12:03:30","Actor":"dotnet-maestro[bot]","Number":"12652","RawContent":null,"Title":"[master] Update dependencies from dotnet/templating","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:0be14b38-c39d-4bd1-cee3-08d67668456c)\r\n## From https://github.com/dotnet/templating\r\n- **Build**: 20190914.1\r\n- **Date Produced**: 9/14/2019 12:34 PM\r\n- **Commit**: 1e229a8cb18641047a3ec19e1e78251045c56582\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.TemplateEngine.Cli** -> 5.0.0-alpha1.19464.1\r\n\r\n[marker]: <> (End:0be14b38-c39d-4bd1-cee3-08d67668456c)\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12652","RelatedDescription":"Open PR \"[master] Update dependencies from dotnet/templating\" (#12652)"},{"Id":"493646384","IsPullRequest":true,"CreatedAt":"2019-09-15T06:07:19","Actor":"dotnet-maestro[bot]","Number":"12646","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190914.2\r\n- **Date Produced**: 9/15/2019 4:11 AM\r\n- **Commit**: 9042fe6c81aa3b47f58ccd94ff02e42f9f7a4e46\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19464.2\r\n  - **Microsoft.NET.HostModel** -> 5.0.0-alpha1.19464.2\r\n  - **Microsoft.Extensions.DependencyModel** -> 5.0.0-alpha1.19464.2\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 5.0.0-alpha1.19464.2\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 5.0.0-alpha1.19464.2\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12646","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#12646)"},{"Id":"493690046","IsPullRequest":true,"CreatedAt":"2019-09-15T03:50:35","Actor":"dotnet-maestro[bot]","Number":"12650","RawContent":null,"Title":"[release/3.0.1xx] Update dependencies from aspnet/AspNetCore","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d54a5172-b4ce-4f86-d36b-08d6f038a15f)\r\n## From https://github.com/aspnet/AspNetCore\r\n- **Build**: 20190914.5\r\n- **Date Produced**: 9/15/2019 2:36 AM\r\n- **Commit**: adc28fdb422cd9306b65c9f67ced13aaecce8f76\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.AspNetCore.DeveloperCertificates.XPlat** -> 3.0.0-rc2.19464.5\r\n\r\n[marker]: <> (End:d54a5172-b4ce-4f86-d36b-08d6f038a15f)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12650","RelatedDescription":"Closed or merged PR \"[release/3.0.1xx] Update dependencies from aspnet/AspNetCore\" (#12650)"},{"Id":"493677052","IsPullRequest":true,"CreatedAt":"2019-09-15T00:05:37","Actor":"dotnet-maestro[bot]","Number":"12649","RawContent":null,"Title":"[release/3.0.1xx] Update dependencies from aspnet/AspNetCore","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d54a5172-b4ce-4f86-d36b-08d6f038a15f)\r\n## From https://github.com/aspnet/AspNetCore\r\n- **Build**: 20190914.3\r\n- **Date Produced**: 9/14/2019 10:52 PM\r\n- **Commit**: 7cd94410e82893dfbde7b4c7b2ba8d505bf59083\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.AspNetCore.DeveloperCertificates.XPlat** -> 3.0.0-rc2.19464.3\r\n\r\n[marker]: <> (End:d54a5172-b4ce-4f86-d36b-08d6f038a15f)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12649","RelatedDescription":"Closed or merged PR \"[release/3.0.1xx] Update dependencies from aspnet/AspNetCore\" (#12649)"},{"Id":"493653779","IsPullRequest":false,"CreatedAt":"2019-09-14T18:40:45","Actor":"rkeithhill","Number":"12648","RawContent":null,"Title":"Enh request: Update dotnet-install script to cache and use previously downloaded SDK","State":"open","Body":"This is an enhancement request for `install-script.ps1/.sh`.  \r\n\r\nCan we get a new parameter to request that this script only download the selected SDK **if** it can't find a find previously downloaded SDK in the temp directory (or wherever it places the SDK archive upon download)?  \r\n\r\nI know a lot build machines these days start with a fresh image but that isn't the case for our build machines. There really is no need to re-download a several hundred MB file just to overwrite the very same file.  Seems like this could also save bandwidth on Microsoft's Azure servers.","Url":"https://github.com/dotnet/cli/issues/12648","RelatedDescription":"Open issue \"Enh request: Update dotnet-install script to cache and use previously downloaded SDK\" (#12648)"},{"Id":"493650479","IsPullRequest":true,"CreatedAt":"2019-09-14T18:33:38","Actor":"dotnet-maestro[bot]","Number":"12647","RawContent":null,"Title":"[release/3.0.1xx] Update dependencies from dotnet/templating","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d4b89351-e138-4a22-94d9-08d690bc143a)\r\n## From https://github.com/dotnet/templating\r\n- **Build**: 20190914.2\r\n- **Date Produced**: 9/14/2019 5:53 PM\r\n- **Commit**: b2663fb07294f5d6cf3caa927d58f7cbebf7d626\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.TemplateEngine.Cli** -> 3.0.0-rc1.19464.2\r\n\r\n[marker]: <> (End:d4b89351-e138-4a22-94d9-08d690bc143a)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12647","RelatedDescription":"Closed or merged PR \"[release/3.0.1xx] Update dependencies from dotnet/templating\" (#12647)"},{"Id":"493616600","IsPullRequest":true,"CreatedAt":"2019-09-14T12:43:41","Actor":"dotnet-maestro[bot]","Number":"12645","RawContent":null,"Title":"[master] Update dependencies from dotnet/templating","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:0be14b38-c39d-4bd1-cee3-08d67668456c)\r\n## From https://github.com/dotnet/templating\r\n- **Build**: 20190913.4\r\n- **Date Produced**: 9/14/2019 2:24 AM\r\n- **Commit**: 778951d25fd4fd5e04a2d2c9220e20b7074d1cbc\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.TemplateEngine.Cli** -> 5.0.0-alpha1.19463.4\r\n\r\n[marker]: <> (End:0be14b38-c39d-4bd1-cee3-08d67668456c)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12645","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/templating\" (#12645)"},{"Id":"493616203","IsPullRequest":true,"CreatedAt":"2019-09-14T12:38:13","Actor":"dotnet-maestro[bot]","Number":"12643","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:433865d5-f754-408e-06ed-08d645e2db8e)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190913.3\r\n- **Date Produced**: 9/13/2019 11:47 PM\r\n- **Commit**: 7b731032220c21a3ed0021c72757b1f3122579b2\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19463.3\r\n\r\n[marker]: <> (End:433865d5-f754-408e-06ed-08d645e2db8e)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12643","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#12643)"},{"Id":"493616219","IsPullRequest":true,"CreatedAt":"2019-09-14T12:33:22","Actor":"dotnet-maestro[bot]","Number":"12644","RawContent":null,"Title":"[master] Update dependencies from dotnet/sdk","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:145b81c3-fdcc-4cb6-70fa-08d645e3a44f)\r\n## From https://github.com/dotnet/sdk\r\n- **Build**: 20190913.1\r\n- **Date Produced**: 9/13/2019 3:58 PM\r\n- **Commit**: 459284590f8f2b6d4e5c922d30c358290f3668cf\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk** -> 5.0.100-alpha1.19463.1\r\n\r\n[marker]: <> (End:145b81c3-fdcc-4cb6-70fa-08d645e3a44f)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12644","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/sdk\" (#12644)"},{"Id":"493599289","IsPullRequest":true,"CreatedAt":"2019-09-14T08:30:57","Actor":"am11","Number":"12642","RawContent":null,"Title":"Use scanelf over ldconfig on musl-libc distros","State":"open","Body":"`ldconfig` on muscle libc based distros yields no results. The alternative is to use `scanelf`. For example, Julia platform package in aports uses `scanelf` to capture their expected results equivalent to `ldconfig`: https://github.com/alpinelinux/aports/blob/0042419fcc/unmaintained/julia/find-syslibs.\r\n\r\nSince corefx produces portable linux-musl libc packages, this pr also relaxes the platform == alpine condition to instead introspect musl-libc, in order to support other distros like Void Linux (musl edition).\r\n","Url":"https://github.com/dotnet/cli/pull/12642","RelatedDescription":"Open PR \"Use scanelf over ldconfig on musl-libc distros\" (#12642)"},{"Id":"493576939","IsPullRequest":true,"CreatedAt":"2019-09-14T03:50:34","Actor":"dotnet-maestro[bot]","Number":"12641","RawContent":null,"Title":"[release/3.0.1xx] Update dependencies from dotnet/sdk","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:fa87930c-8514-45a1-0d47-08d6910cd73b)\r\n## From https://github.com/dotnet/sdk\r\n- **Build**: 20190913.5\r\n- **Date Produced**: 9/14/2019 3:04 AM\r\n- **Commit**: 1b90fa144c9c49d2f133a7a8e3fb19522ff72e83\r\n- **Branch**: refs/heads/release/3.0.1xx\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk** -> 3.0.100-rc2.19463.5\r\n\r\n[marker]: <> (End:fa87930c-8514-45a1-0d47-08d6910cd73b)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12641","RelatedDescription":"Closed or merged PR \"[release/3.0.1xx] Update dependencies from dotnet/sdk\" (#12641)"},{"Id":"493527983","IsPullRequest":true,"CreatedAt":"2019-09-14T03:35:49","Actor":"dotnet-maestro[bot]","Number":"12637","RawContent":null,"Title":"[release/3.0.1xx] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:1a2c0403-dbb9-4253-1c2d-08d6fb3704ce)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190913.05\r\n- **Date Produced**: 9/13/2019 4:13 PM\r\n- **Commit**: 7d57652f33493fa022125b7f63aad0d70c52d810\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.0.0-rc2-19463-05\r\n  - **Microsoft.NET.HostModel** -> 3.0.0\r\n  - **Microsoft.Extensions.DependencyModel** -> 3.0.0\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 3.0.0\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 3.0.0\r\n\r\n[marker]: <> (End:1a2c0403-dbb9-4253-1c2d-08d6fb3704ce)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12637","RelatedDescription":"Closed or merged PR \"[release/3.0.1xx] Update dependencies from dotnet/core-setup\" (#12637)"},{"Id":"493570980","IsPullRequest":true,"CreatedAt":"2019-09-14T02:40:39","Actor":"dotnet-maestro[bot]","Number":"12640","RawContent":null,"Title":"[release/3.0.1xx] Update dependencies from dotnet/sdk","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:fa87930c-8514-45a1-0d47-08d6910cd73b)\r\n## From https://github.com/dotnet/sdk\r\n- **Build**: 20190913.4\r\n- **Date Produced**: 9/14/2019 1:23 AM\r\n- **Commit**: 89de7ee4909059984dffcb365c439621e54b55a8\r\n- **Branch**: refs/heads/release/3.0.1xx\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk** -> 3.0.100-rc2.19463.4\r\n\r\n[marker]: <> (End:fa87930c-8514-45a1-0d47-08d6910cd73b)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12640","RelatedDescription":"Closed or merged PR \"[release/3.0.1xx] Update dependencies from dotnet/sdk\" (#12640)"},{"Id":"493567876","IsPullRequest":true,"CreatedAt":"2019-09-14T02:15:38","Actor":"dotnet-maestro[bot]","Number":"12639","RawContent":null,"Title":"[release/3.0.1xx] Update dependencies from dotnet/templating","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d4b89351-e138-4a22-94d9-08d690bc143a)\r\n## From https://github.com/dotnet/templating\r\n- **Build**: 20190913.2\r\n- **Date Produced**: 9/14/2019 1:28 AM\r\n- **Commit**: e50a0698b5211eb99e9eda7aae6db38559435114\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.TemplateEngine.Cli** -> 3.0.0-rc1.19463.2\r\n\r\n[marker]: <> (End:d4b89351-e138-4a22-94d9-08d690bc143a)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12639","RelatedDescription":"Closed or merged PR \"[release/3.0.1xx] Update dependencies from dotnet/templating\" (#12639)"},{"Id":"493527599","IsPullRequest":true,"CreatedAt":"2019-09-14T02:08:46","Actor":"mmitche","Number":"12636","RawContent":null,"Title":"[release/3.0] Stabilize package versions","State":"closed","Body":"- If this PR should not run tests add text \"skip[REMOVE_THIS]ci[REMOVE_THIS]please\" (remove the marked text, no quotes).\r\n- Add description for changes you are making.\r\n- If there is an issue related to this PR, add the reference.\r\n","Url":"https://github.com/dotnet/cli/pull/12636","RelatedDescription":"Closed or merged PR \"[release/3.0] Stabilize package versions\" (#12636)"},{"Id":"493528155","IsPullRequest":true,"CreatedAt":"2019-09-13T22:15:55","Actor":"dotnet-maestro[bot]","Number":"12638","RawContent":null,"Title":"[release/3.0.1xx] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:9b125d25-276f-4859-b4e2-08d6910bdae0)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190913.1\r\n- **Date Produced**: 9/13/2019 10:50 AM\r\n- **Commit**: 372f44450f51552a8cf725acf705dc477bd8391f\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19463.1\r\n\r\n[marker]: <> (End:9b125d25-276f-4859-b4e2-08d6910bdae0)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12638","RelatedDescription":"Closed or merged PR \"[release/3.0.1xx] Update dependencies from dotnet/arcade\" (#12638)"},{"Id":"493473430","IsPullRequest":false,"CreatedAt":"2019-09-13T19:02:36","Actor":"vatsan-madhavan","Number":"12635","RawContent":null,"Title":"https://dot.net/v1/dotnet-install.ps1  does not support `windowsdesktop` `Runtime` ","State":"open","Body":"Support for `windowsdesktop` `Runtime` was added by https://github.com/dotnet/cli/pull/12315 and the website download copy was (I think) updated by https://github.com/dotnet/dotnet-core-website/pull/1458. \r\n\r\nStill, it looks like the copy of dotnet-install.ps1 hosted at https://docs.microsoft.com/en-us/dotnet/core/tools/dotnet-install-script is the one that seems to be a version prior to when windowsdesktop support was added.\r\n\r\n/cc @johnbeisner, @dagood ","Url":"https://github.com/dotnet/cli/issues/12635","RelatedDescription":"Open issue \"https://dot.net/v1/dotnet-install.ps1  does not support `windowsdesktop` `Runtime` \" (#12635)"},{"Id":"493438541","IsPullRequest":true,"CreatedAt":"2019-09-13T18:05:41","Actor":"dotnet-maestro[bot]","Number":"12634","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190913.6\r\n- **Date Produced**: 9/13/2019 4:20 PM\r\n- **Commit**: 9042fe6c81aa3b47f58ccd94ff02e42f9f7a4e46\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19463.6\r\n  - **Microsoft.NET.HostModel** -> 5.0.0-alpha1.19463.6\r\n  - **Microsoft.Extensions.DependencyModel** -> 5.0.0-alpha1.19463.6\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 5.0.0-alpha1.19463.6\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 5.0.0-alpha1.19463.6\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12634","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#12634)"}],"ResultType":"GitHubIssue"},"Standard-Issues":{"Issues":[{"Id":"494010485","IsPullRequest":true,"CreatedAt":"2019-09-16T12:21:02","Actor":"dotnet-maestro[bot]","Number":"1550","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190915.2\r\n- **Date Produced**: 9/15/2019 6:42 PM\r\n- **Commit**: e8efb815275c8323fedc950ca3596474fa5e23c3\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19465.2\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19465.2\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19465.2\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1550","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1550)"},{"Id":"493907721","IsPullRequest":false,"CreatedAt":"2019-09-16T08:19:30","Actor":"HamidTheGeek","Number":"1549","RawContent":null,"Title":"SqlParameter.DbType is set to Datetime when I am setting it to Time","State":"open","Body":"It seems like an intentional behavior but I don't get the reason. \r\n\r\n```c#\r\nvar param = new SqlParameter();\r\nparam.DbType = DbType.Time;\r\nConsole.WriteLine(param.DbType.ToString());\r\n```\r\n`DateTime` will be printed in the console. Therefore, the following value would be `false`.\r\n```c#\r\nvar param = new SqlParameter();\r\nparam.DbType = DbType.Time;\r\nvar value = param.DbType == DbType.Time;\r\n```\r\n\r\nI have tested this in `netstandard2.0`.","Url":"https://github.com/dotnet/standard/issues/1549","RelatedDescription":"Open issue \"SqlParameter.DbType is set to Datetime when I am setting it to Time\" (#1549)"},{"Id":"493730129","IsPullRequest":true,"CreatedAt":"2019-09-15T12:21:32","Actor":"dotnet-maestro[bot]","Number":"1548","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190914.4\r\n- **Date Produced**: 9/15/2019 5:48 AM\r\n- **Commit**: cbcc2a5e6f8be1e43b16874ed358c18c5d6bcd5b\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19464.4\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19464.4\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19464.4\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1548","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1548)"},{"Id":"493617725","IsPullRequest":true,"CreatedAt":"2019-09-14T12:32:41","Actor":"dotnet-maestro[bot]","Number":"1547","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190913.7\r\n- **Date Produced**: 9/14/2019 3:54 AM\r\n- **Commit**: f07730eedb1f7e2cb5e178d988bc2255f7ce7021\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19463.7\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19463.7\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19463.7\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1547","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1547)"},{"Id":"493616084","IsPullRequest":true,"CreatedAt":"2019-09-14T12:11:29","Actor":"dotnet-maestro[bot]","Number":"1546","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190913.3\r\n- **Date Produced**: 9/13/2019 11:47 PM\r\n- **Commit**: 7b731032220c21a3ed0021c72757b1f3122579b2\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19463.3\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19463.3\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19463.3\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19463.3\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19463.3\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19463.3\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1546","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1546)"},{"Id":"493518578","IsPullRequest":false,"CreatedAt":"2019-09-13T21:11:22","Actor":"BobHein","Number":"1545","RawContent":null,"Title":"When writing .Net Standard projects, is it OK to include Nuget packages which are part of .Net Core as dependencies?","State":"open","Body":"There are many Microsoft Nuget packages which contain classes which are not part of .Net Standard, but these packages are available as standalone Nuget packages. Most of them seem to be components of .Net core. A few Examples of many are:\r\n\r\nSystem.Data.SqlClient\r\nSystem.Data.DataSetExtensions\r\nSystem.Drawing.Common\r\n\r\nThese all seems to indicate that they are supported under .Net Standard in the Nuget documentation.  My questions:\r\n\r\n1) Are they really safe to use under .Net Standard DLLs, which will run in both .Net Core and .Net Framework environments?\r\n2) If they are safe to use, why aren't they included as part of .Net Standard? Note that I also want them to run under Linux as well.\r\n3) If they are not safe to use, why not? And how do you know what is and isn't safe to use?","Url":"https://github.com/dotnet/standard/issues/1545","RelatedDescription":"Open issue \"When writing .Net Standard projects, is it OK to include Nuget packages which are part of .Net Core as dependencies?\" (#1545)"},{"Id":"493297430","IsPullRequest":true,"CreatedAt":"2019-09-13T12:35:42","Actor":"dotnet-maestro[bot]","Number":"1544","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190912.15\r\n- **Date Produced**: 9/13/2019 5:08 AM\r\n- **Commit**: 31a5bba0e79a5ae875f691d70ec3b9789691136d\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19462.15\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19462.15\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19462.15\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1544","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1544)"},{"Id":"493287649","IsPullRequest":true,"CreatedAt":"2019-09-13T12:11:40","Actor":"dotnet-maestro[bot]","Number":"1543","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190912.5\r\n- **Date Produced**: 9/13/2019 5:59 AM\r\n- **Commit**: 6003ee189f456c92a18b097f226d4927309def27\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19462.5\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19462.5\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19462.5\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19462.5\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19462.5\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19462.5\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1543","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1543)"},{"Id":"493039917","IsPullRequest":false,"CreatedAt":"2019-09-12T21:31:56","Actor":"Anipik","Number":"1542","RawContent":null,"Title":"Using Dotnet pack to produce the packages for Netstandard/Library packages.","State":"open","Body":"Currently we are using pkgproj and a lot of arcade & custom infrastructure to build packages.\r\n\r\nGoing forward we will be only publishing the ref assembly packages so it becomes more useful to move towards using dotnet pack.\r\n\r\nHaving the same architecture for preview and the final release will help us avoid problems in the release pipelines. \r\n\r\ncc @ericstj @ViktorHofer @danmosemsft ","Url":"https://github.com/dotnet/standard/issues/1542","RelatedDescription":"Open issue \"Using Dotnet pack to produce the packages for Netstandard/Library packages.\" (#1542)"},{"Id":"493029008","IsPullRequest":true,"CreatedAt":"2019-09-12T21:17:00","Actor":"mmitche","Number":"1541","RawContent":null,"Title":"Stabilize package verions","State":"closed","Body":"","Url":"https://github.com/dotnet/standard/pull/1541","RelatedDescription":"Closed or merged PR \"Stabilize package verions\" (#1541)"},{"Id":"492578579","IsPullRequest":true,"CreatedAt":"2019-09-12T17:46:41","Actor":"Anipik","Number":"1536","RawContent":null,"Title":"Setting version suffix as non empty for building release package versions","State":"closed","Body":"Currently we get this error while building the release version of this package\r\n```\r\nC:\\Users\\mmitche\\.nuget\\packages\\microsoft.dotnet.build.tasks.packaging\\1.0.0-beta.19460.3\\build\\Packaging.targets(736,5): error : No VersionSuffix was set. Ensure \r\nit is set before targets in packaging are ran. [C:\\enlistments\\standard\\src\\netstandard\\pkg\\NETStandard.Library.pkgproj]\r\n```\r\n\r\nsetting stableversion skips this task ApplyPreReleaseSuffix. we don't want to apply any suffix in release build.\r\n\r\nwe are applying this prefix to the dependencies of the package(GetNuGetPackageDependencies), but as its just a transport package, it should not matter. I was not able to find a good way to tackle this.\r\n\r\n@ericstj any suggestions will be welcomed.","Url":"https://github.com/dotnet/standard/pull/1536","RelatedDescription":"Closed or merged PR \"Setting version suffix as non empty for building release package versions\" (#1536)"},{"Id":"492776720","IsPullRequest":true,"CreatedAt":"2019-09-12T13:25:04","Actor":"dotnet-maestro[bot]","Number":"1540","RawContent":null,"Title":"[release/3.0] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:8358c059-232d-4dac-c08d-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190911.13\r\n- **Date Produced**: 9/12/2019 3:32 AM\r\n- **Commit**: 144ebb6ff997bf7a777206a233cdd8c03e13f60c\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 4.6.0-rc2.19461.13\r\n  - **System.Reflection.Emit** -> 4.6.0-rc2.19461.13\r\n  - **System.Reflection.Emit.ILGeneration** -> 4.6.0-rc2.19461.13\r\n\r\n[marker]: <> (End:8358c059-232d-4dac-c08d-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1540","RelatedDescription":"Closed or merged PR \"[release/3.0] Update dependencies from dotnet/corefx\" (#1540)"},{"Id":"492776601","IsPullRequest":true,"CreatedAt":"2019-09-12T12:44:23","Actor":"dotnet-maestro[bot]","Number":"1539","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190911.10\r\n- **Date Produced**: 9/11/2019 11:00 PM\r\n- **Commit**: e32d9a2664a59eccbcbe5a4044cffbdd96538b5b\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19461.10\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19461.10\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19461.10\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1539","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1539)"},{"Id":"492775521","IsPullRequest":true,"CreatedAt":"2019-09-12T12:42:08","Actor":"dotnet-maestro[bot]","Number":"1538","RawContent":null,"Title":"[release/3.0] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:29f70c24-3711-40be-9246-08d6c732a216)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190911.7\r\n- **Date Produced**: 9/12/2019 6:45 AM\r\n- **Commit**: 8eb29ba860a3cfcfe68f9a8256caa7efc1f1aaba\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19461.7\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19461.7\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19461.7\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19461.7\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19461.7\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19461.7\r\n\r\n[marker]: <> (End:29f70c24-3711-40be-9246-08d6c732a216)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1538","RelatedDescription":"Closed or merged PR \"[release/3.0] Update dependencies from dotnet/arcade\" (#1538)"},{"Id":"492761054","IsPullRequest":true,"CreatedAt":"2019-09-12T12:11:42","Actor":"dotnet-maestro[bot]","Number":"1537","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190911.7\r\n- **Date Produced**: 9/12/2019 6:45 AM\r\n- **Commit**: 8eb29ba860a3cfcfe68f9a8256caa7efc1f1aaba\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19461.7\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19461.7\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19461.7\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19461.7\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19461.7\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19461.7\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1537","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1537)"},{"Id":"492206044","IsPullRequest":true,"CreatedAt":"2019-09-11T12:37:02","Actor":"dotnet-maestro[bot]","Number":"1535","RawContent":null,"Title":"[release/3.0] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:8358c059-232d-4dac-c08d-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190910.22\r\n- **Date Produced**: 9/11/2019 5:14 AM\r\n- **Commit**: 67fd971d57f9779c7acffc6d87934e311d968fa8\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 4.6.0-rc2.19460.22\r\n  - **System.Reflection.Emit** -> 4.6.0-rc2.19460.22\r\n  - **System.Reflection.Emit.ILGeneration** -> 4.6.0-rc2.19460.22\r\n\r\n[marker]: <> (End:8358c059-232d-4dac-c08d-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1535","RelatedDescription":"Closed or merged PR \"[release/3.0] Update dependencies from dotnet/corefx\" (#1535)"},{"Id":"492205909","IsPullRequest":true,"CreatedAt":"2019-09-11T12:36:47","Actor":"dotnet-maestro[bot]","Number":"1534","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190910.21\r\n- **Date Produced**: 9/11/2019 4:14 AM\r\n- **Commit**: ee9995f31b684a0c6e5488eceb2500bf0057da89\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19460.21\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19460.21\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19460.21\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1534","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1534)"},{"Id":"492194129","IsPullRequest":true,"CreatedAt":"2019-09-11T12:11:46","Actor":"dotnet-maestro[bot]","Number":"1533","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190910.3\r\n- **Date Produced**: 9/10/2019 6:11 PM\r\n- **Commit**: 0f5cfb20a355c27bc84cedd049c946b44a7fc1da\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19460.3\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19460.3\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19460.3\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19460.3\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19460.3\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19460.3\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1533","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1533)"},{"Id":"491861134","IsPullRequest":true,"CreatedAt":"2019-09-10T21:24:12","Actor":"dotnet-maestro[bot]","Number":"1532","RawContent":null,"Title":"[release/3.0] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:29f70c24-3711-40be-9246-08d6c732a216)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190910.3\r\n- **Date Produced**: 9/10/2019 6:11 PM\r\n- **Commit**: 0f5cfb20a355c27bc84cedd049c946b44a7fc1da\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19460.3\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19460.3\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19460.3\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19460.3\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19460.3\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19460.3\r\n\r\n[marker]: <> (End:29f70c24-3711-40be-9246-08d6c732a216)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1532","RelatedDescription":"Closed or merged PR \"[release/3.0] Update dependencies from dotnet/arcade\" (#1532)"},{"Id":"491641888","IsPullRequest":true,"CreatedAt":"2019-09-10T19:39:48","Actor":"dotnet-maestro[bot]","Number":"1529","RawContent":null,"Title":"[release/3.0] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:29f70c24-3711-40be-9246-08d6c732a216)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190909.10\r\n- **Date Produced**: 9/10/2019 12:07 AM\r\n- **Commit**: f5ccfdcbd828383d39cf583086ef42d72ca5b320\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19459.10\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19459.10\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19459.10\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19459.10\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19459.10\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19459.10\r\n\r\n[marker]: <> (End:29f70c24-3711-40be-9246-08d6c732a216)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1529","RelatedDescription":"Closed or merged PR \"[release/3.0] Update dependencies from dotnet/arcade\" (#1529)"},{"Id":"491643342","IsPullRequest":true,"CreatedAt":"2019-09-10T12:42:44","Actor":"dotnet-maestro[bot]","Number":"1531","RawContent":null,"Title":"[release/3.0] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:8358c059-232d-4dac-c08d-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190910.1\r\n- **Date Produced**: 9/10/2019 9:41 AM\r\n- **Commit**: 1f43072465d4be9920ab04a3c3ad91f82144de4e\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 4.6.0-rc2.19460.1\r\n  - **System.Reflection.Emit** -> 4.6.0-rc2.19460.1\r\n  - **System.Reflection.Emit.ILGeneration** -> 4.6.0-rc2.19460.1\r\n\r\n[marker]: <> (End:8358c059-232d-4dac-c08d-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1531","RelatedDescription":"Closed or merged PR \"[release/3.0] Update dependencies from dotnet/corefx\" (#1531)"},{"Id":"491643232","IsPullRequest":true,"CreatedAt":"2019-09-10T12:42:30","Actor":"dotnet-maestro[bot]","Number":"1530","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190909.14\r\n- **Date Produced**: 9/10/2019 8:08 AM\r\n- **Commit**: ca890ed4eceb71c0a78d63e8e030497a1b613b80\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19459.14\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19459.14\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19459.14\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1530","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1530)"},{"Id":"491628840","IsPullRequest":true,"CreatedAt":"2019-09-10T12:12:03","Actor":"dotnet-maestro[bot]","Number":"1528","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190909.10\r\n- **Date Produced**: 9/10/2019 12:07 AM\r\n- **Commit**: f5ccfdcbd828383d39cf583086ef42d72ca5b320\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19459.10\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19459.10\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19459.10\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19459.10\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19459.10\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19459.10\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1528","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1528)"},{"Id":"491269859","IsPullRequest":false,"CreatedAt":"2019-09-09T19:01:31","Actor":"saucecontrol","Number":"1527","RawContent":null,"Title":"Latest NETStandard.Library 2.0 NuGet package contains malformed XML docs","State":"open","Body":"This was reported in https://github.com/dotnet/standard/issues/666 but the issue was closed since the underlying problem had been resolved for 2.1 dev builds.  However, the latest available 2.0 package on NuGet [(version 2.0.3)](https://www.nuget.org/packages/NETStandard.Library/2.0.3) still has a malformed netstandard.xml.  Is it possible to get an updated 2.0 package published with corrected docs?","Url":"https://github.com/dotnet/standard/issues/1527","RelatedDescription":"Open issue \"Latest NETStandard.Library 2.0 NuGet package contains malformed XML docs\" (#1527)"},{"Id":"491139057","IsPullRequest":true,"CreatedAt":"2019-09-09T14:40:22","Actor":"yousiftouma","Number":"1526","RawContent":null,"Title":"Add ImageConverter to System.Drawing","State":"open","Body":"Not sure exactly what is needed for this to work, but happy to help doing it. Drawing inspiration from https://github.com/dotnet/standard/pull/803\r\n\r\nDoes Image need to be added as well? It seems to be available https://apisof.net/catalog/System.Drawing.Image","Url":"https://github.com/dotnet/standard/pull/1526","RelatedDescription":"Open PR \"Add ImageConverter to System.Drawing\" (#1526)"},{"Id":"491067571","IsPullRequest":true,"CreatedAt":"2019-09-09T12:47:20","Actor":"dotnet-maestro[bot]","Number":"1525","RawContent":null,"Title":"[release/3.0] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:8358c059-232d-4dac-c08d-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190908.3\r\n- **Date Produced**: 9/8/2019 5:06 PM\r\n- **Commit**: 173d70b99a5dbb3ff9298a6e2e9c7f7e7b56dd7c\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 4.6.0-rc2.19458.3\r\n  - **System.Reflection.Emit** -> 4.6.0-rc2.19458.3\r\n  - **System.Reflection.Emit.ILGeneration** -> 4.6.0-rc2.19458.3\r\n\r\n[marker]: <> (End:8358c059-232d-4dac-c08d-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1525","RelatedDescription":"Closed or merged PR \"[release/3.0] Update dependencies from dotnet/corefx\" (#1525)"},{"Id":"491067426","IsPullRequest":true,"CreatedAt":"2019-09-09T12:47:06","Actor":"dotnet-maestro[bot]","Number":"1524","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190908.6\r\n- **Date Produced**: 9/9/2019 4:54 AM\r\n- **Commit**: cc51975a897cb803f1ad76b6b93b2ebd4581bca4\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19458.6\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19458.6\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19458.6\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1524","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1524)"},{"Id":"491053506","IsPullRequest":true,"CreatedAt":"2019-09-09T12:12:03","Actor":"dotnet-maestro[bot]","Number":"1523","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190908.2\r\n- **Date Produced**: 9/8/2019 11:40 PM\r\n- **Commit**: 29ee79a10c58dd6863a46157e374521cac610ad8\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19458.2\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19458.2\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19458.2\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19458.2\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19458.2\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19458.2\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1523","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1523)"},{"Id":"490758231","IsPullRequest":false,"CreatedAt":"2019-09-08T14:02:47","Actor":"virzak","Number":"1522","RawContent":null,"Title":"MemoryMarshal.AsRef is missing","State":"open","Body":"AsRef [exists](https://github.com/dotnet/corefx/blob/838832e2ecac9f81b5a5649bfac2fc835db76c1e/src/System.Memory/ref/System.Memory.cs#L618) in .NET Core, but not in .NET Standard.\r\n\r\nPreviously mentioned it [here](https://github.com/dotnet/standard/pull/1198#issuecomment-528371887)\r\n\r\nEdit: Could this be added to .NET Standard 2.1? Seems like a very small and safe fix.","Url":"https://github.com/dotnet/standard/issues/1522","RelatedDescription":"Open issue \"MemoryMarshal.AsRef is missing\" (#1522)"},{"Id":"490748507","IsPullRequest":true,"CreatedAt":"2019-09-08T12:40:24","Actor":"dotnet-maestro[bot]","Number":"1521","RawContent":null,"Title":"[release/3.0] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:8358c059-232d-4dac-c08d-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190907.8\r\n- **Date Produced**: 9/7/2019 8:22 PM\r\n- **Commit**: 43b591a90ffff5885a6509e4bb1508f49e174af6\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 4.6.0-rc2.19457.8\r\n  - **System.Reflection.Emit** -> 4.6.0-rc2.19457.8\r\n  - **System.Reflection.Emit.ILGeneration** -> 4.6.0-rc2.19457.8\r\n\r\n[marker]: <> (End:8358c059-232d-4dac-c08d-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1521","RelatedDescription":"Closed or merged PR \"[release/3.0] Update dependencies from dotnet/corefx\" (#1521)"}],"ResultType":"GitHubIssue"},"CoreFx-Issues":{"Issues":[{"Id":"494294044","IsPullRequest":true,"CreatedAt":"2019-09-17T05:10:50","Actor":"safern","Number":"41147","RawContent":null,"Title":"Add missing dummy fields to reference assemblies","State":"closed","Body":"Fixes: https://github.com/dotnet/corefx/issues/40909\r\n\r\nUpdated with a locally built version of: https://github.com/dotnet/arcade/pull/3912\r\n\r\ncc: @ahsonkhan @ericstj @jkotas @stephentoub @terrajobst ","Url":"https://github.com/dotnet/corefx/pull/41147","RelatedDescription":"Closed or merged PR \"Add missing dummy fields to reference assemblies\" (#41147)"},{"Id":"494187701","IsPullRequest":true,"CreatedAt":"2019-09-17T01:04:03","Actor":"stephentoub","Number":"41142","RawContent":null,"Title":"Remove use of non-generic Queue/Stack in System.Private.Xml","State":"closed","Body":"This is the only reason these types are brought into a trimmed default MVC app.\r\n\r\ncc: @krwq, @jkotas","Url":"https://github.com/dotnet/corefx/pull/41142","RelatedDescription":"Closed or merged PR \"Remove use of non-generic Queue/Stack in System.Private.Xml\" (#41142)"},{"Id":"494209568","IsPullRequest":true,"CreatedAt":"2019-09-17T00:38:33","Actor":"stephentoub","Number":"41143","RawContent":null,"Title":"Remove use of RuntimeReflectionExtensions from Microsoft.CSharp","State":"closed","Body":"The wrappers aren't adding any benefit and are causing us to pull in the extensions type unnecessarily (and doing unnecessary null checks); just call the underlying methods directly.\r\n\r\ncc: @cston, @jkotas","Url":"https://github.com/dotnet/corefx/pull/41143","RelatedDescription":"Closed or merged PR \"Remove use of RuntimeReflectionExtensions from Microsoft.CSharp\" (#41143)"},{"Id":"494341367","IsPullRequest":true,"CreatedAt":"2019-09-17T00:32:55","Actor":"MattGal","Number":"41149","RawContent":null,"Title":"Fix a typo","State":"open","Body":"This is here for me to monitor a totally code-change-free PR to ensure Helix is doing OK.","Url":"https://github.com/dotnet/corefx/pull/41149","RelatedDescription":"Open PR \"Fix a typo\" (#41149)"},{"Id":"494007600","IsPullRequest":true,"CreatedAt":"2019-09-17T00:27:08","Actor":"dotnet-maestro[bot]","Number":"41136","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup dotnet/corefx dotnet/standard","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:08549e3e-8f8e-4201-dc38-08d6815d521b)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190915.2\r\n- **Date Produced**: 9/16/2019 4:10 AM\r\n- **Commit**: 9042fe6c81aa3b47f58ccd94ff02e42f9f7a4e46\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19465.2\r\n  - **Microsoft.NETCore.DotNetHost** -> 5.0.0-alpha1.19465.2\r\n  - **Microsoft.NETCore.DotNetHostPolicy** -> 5.0.0-alpha1.19465.2\r\n\r\n[marker]: <> (End:08549e3e-8f8e-4201-dc38-08d6815d521b)\r\n\r\n[marker]: <> (Begin:368e60b9-57f7-48bd-020d-08d6874ba0bd)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190915.2\r\n- **Date Produced**: 9/15/2019 6:42 PM\r\n- **Commit**: e8efb815275c8323fedc950ca3596474fa5e23c3\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **runtime.native.System.IO.Ports** -> 5.0.0-alpha1.19465.2\r\n  - **Microsoft.NETCore.Platforms** -> 5.0.0-alpha1.19465.2\r\n\r\n[marker]: <> (End:368e60b9-57f7-48bd-020d-08d6874ba0bd)\r\n\r\n[marker]: <> (Begin:a2867060-7cad-40ad-7917-08d6937ac7c4)\r\n## From https://github.com/dotnet/standard\r\n- **Build**: 20190915.1\r\n- **Date Produced**: 9/15/2019 12:36 PM\r\n- **Commit**: d9f55361e33f6f8fa5002f4ad6c9bafe12b5f6aa\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **NETStandard.Library** -> 2.2.0-prerelease.19465.1\r\n\r\n[marker]: <> (End:a2867060-7cad-40ad-7917-08d6937ac7c4)\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/41136","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup dotnet/corefx dotnet/standard\" (#41136)"},{"Id":"494326553","IsPullRequest":false,"CreatedAt":"2019-09-16T23:35:52","Actor":"Anipik","Number":"41148","RawContent":null,"Title":"System.Net.Http.Functional.Tests.PlatformHandler_HttpClientHandler_MaxResponseHeadersLength_Test.SetAfterUse_Throws failed in the release 3.0 branch","State":"open","Body":"```\r\n      Condition(s) not met: \"IsUap\"\r\n    System.Net.Http.Functional.Tests.PlatformHandler_HttpClientHandler_MaxResponseHeadersLength_Test.SetAfterUse_Throws [FAIL]\r\n      System.Threading.Tasks.TaskCanceledException : A task was canceled.\r\n      Stack Trace:\r\n        /_/src/System.Net.Http/src/System/Net/Http/HttpClient.cs(553,0): at System.Net.Http.HttpClient.FinishSendAsyncUnbuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)\r\n        /_/src/System.Net.Http/src/System/Net/Http/HttpClient.cs(294,0): at System.Net.Http.HttpClient.FinishGetStreamAsync(Task`1 getTask)\r\n        /_/src/System.Net.Http/tests/FunctionalTests/HttpClientHandlerTest.MaxResponseHeadersLength.cs(54,0): at System.Net.Http.Functional.Tests.HttpClientHandler_MaxResponseHeadersLength_Test.SetAfterUse_Throws()\r\n        --- End of stack trace from previous location where exception was thrown ---\r\n  Finished:    System.Net.Http.Functional.Tests\r\n```\r\n\r\nhttps://dev.azure.com/dnceng/public/_build/results?buildId=353186&view=ms.vss-test-web.build-test-results-tab\r\n\r\n","Url":"https://github.com/dotnet/corefx/issues/41148","RelatedDescription":"Open issue \"System.Net.Http.Functional.Tests.PlatformHandler_HttpClientHandler_MaxResponseHeadersLength_Test.SetAfterUse_Throws failed in the release 3.0 branch\" (#41148)"},{"Id":"494249467","IsPullRequest":false,"CreatedAt":"2019-09-16T22:30:21","Actor":"worksofliam","Number":"41145","RawContent":null,"Title":"Encoding.Convert with IBM285 incorrect","State":"closed","Body":"Hello\r\n\r\nIt looks like `Encoding#Convert` is returning the incorrect ASCII when using `IBM285`.\r\n\r\n```csharp\r\nstring myvar = \"C88593939640A6969993845B\";\r\nbyte[] raw = new byte[myvar.Length / 2];\r\nfor (int x = 0; x < raw.Length; x++)\r\n  raw[x] = Convert.ToByte(myvar.Substring(x * 2, 2), 16);\r\n\r\nstring output = Encoding.ASCII.GetString(Encoding.Convert(Encoding.GetEncoding(\"IBM285\"), Encoding.ASCII, raw)));\r\n```\r\n\r\nif I decode EBCDIC `C88593939640A6969993845B`\r\n\r\n* Using `IBM037`: `Hello world$` - correct\r\n* Using `IBM285`: `Hello world?` - incorrect, result should be `Hello world£`\r\n\r\n@NattyNarwhal can confirm this issue and may have more to say on the issue.\r\n\r\nLiam","Url":"https://github.com/dotnet/corefx/issues/41145","RelatedDescription":"Closed issue \"Encoding.Convert with IBM285 incorrect\" (#41145)"},{"Id":"494273176","IsPullRequest":true,"CreatedAt":"2019-09-16T21:35:29","Actor":"Dotnet-GitSync-Bot","Number":"41146","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @tarekgh @stephentoub","Url":"https://github.com/dotnet/corefx/pull/41146","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#41146)"},{"Id":"494015312","IsPullRequest":false,"CreatedAt":"2019-09-16T16:32:05","Actor":"jonmikeli","Number":"41139","RawContent":null,"Title":".NET Core 3.0-preview9-014004 :: System.Text.Json.JsonException","State":"closed","Body":"# Issue Title\r\nSystem.Text.Json.JsonException: A possible object cycle was detected which is not supported.\r\n\r\n# Description\r\nThe exception is raised when trying to serialize an Exception in:\r\n - UseExceptionHandler()\r\n - MiddleWare loaded by UseMiddleware()\r\n\r\nI have not tried the serialization in other contexts.\r\nReplacing the serialization call by another serializer (ex: Newtonsoft.Json) works properly.\r\n\r\n# Versions\r\n.Net Core 3.0.100-preview9-014004\r\n\r\n# Code\r\n`var result = JsonSerializer.Serialize<Exception>(exception, new JsonSerializerOptions { WriteIndented = true });`\r\n\r\n# Exception detail\r\nException thrown: 'System.Text.Json.JsonException' in System.Text.Json.dll\r\nMicrosoft.AspNetCore.Diagnostics.ExceptionHandlerMiddleware: Error: An exception was thrown attempting to execute the error handler.\r\n\r\nSystem.Text.Json.JsonException: A possible object cycle was detected which is not supported. This can either be due to a cycle or if the object depth is larger than the maximum allowed depth of 0.\r\n   at System.Text.Json.ThrowHelper.ThrowInvalidOperationException_SerializerCycleDetected(Int32 maxDepth)\r\n   at System.Text.Json.JsonSerializer.Write(Utf8JsonWriter writer, Int32 originalWriterDepth, Int32 flushThreshold, JsonSerializerOptions options, WriteStack& state)\r\n   at System.Text.Json.JsonSerializer.WriteCore(Utf8JsonWriter writer, PooledByteBufferWriter output, Object value, Type type, JsonSerializerOptions options)\r\n   at System.Text.Json.JsonSerializer.WriteCore(PooledByteBufferWriter output, Object value, Type type, JsonSerializerOptions options)\r\n   at System.Text.Json.JsonSerializer.WriteCoreString(Object value, Type type, JsonSerializerOptions options)\r\n   at System.Text.Json.JsonSerializer.Serialize[TValue](TValue value, JsonSerializerOptions options)\r\n   at NETCore3APITemplate.API.Startup.<>c__DisplayClass12_0.<<Configure>b__3>d.MoveNext() in D:\\Sources\\JMI\\Git\\ALMTools-Templates-DotNetCore-Simple\\Sources\\WorkingSolution\\NETCore3APITemplate\\NETCore3APITemplate\\NETCore3APITemplate.API\\Startup.cs:line 147\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at Microsoft.AspNetCore.Diagnostics.ExceptionHandlerMiddleware.HandleException(HttpContext context, ExceptionDispatchInfo edi)\r\nMicrosoft.AspNetCore.Server.IIS.Core.IISHttpServer: Error: Connection ID \"18230571301796315147\", Request ID \"8000000f-0002-fd00-b63f-84710c7967bb\": An unhandled exception was thrown by the application.\r\n\r\n# Packages references\r\n    <PackageReference Include=\"AutoMapper\" Version=\"9.0.0\" />\r\n    <PackageReference Include=\"AutoMapper.Extensions.Microsoft.DependencyInjection\" Version=\"7.0.0\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Mvc.ApiExplorer\" Version=\"2.2.0\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Mvc.Versioning\" Version=\"4.0.0-preview8.19405.7\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Mvc.Versioning.ApiExplorer\" Version=\"4.0.0-preview8.19405.7\" />\r\n    <PackageReference Include=\"Microsoft.Extensions.PlatformAbstractions\" Version=\"1.1.0\" />\r\n    <PackageReference Include=\"Swashbuckle.AspNetCore\" Version=\"5.0.0-rc2\" />\r\n    <PackageReference Include=\"Swashbuckle.AspNetCore.Swagger\" Version=\"5.0.0-rc2\" />\r\n    <PackageReference Include=\"Swashbuckle.AspNetCore.SwaggerGen\" Version=\"5.0.0-rc2\" />\r\n    <PackageReference Include=\"Swashbuckle.AspNetCore.SwaggerUi\" Version=\"5.0.0-rc2\" />\r\n\r\nHope it helps.\r\n\r\nBests","Url":"https://github.com/dotnet/corefx/issues/41139","RelatedDescription":"Closed issue \".NET Core 3.0-preview9-014004 :: System.Text.Json.JsonException\" (#41139)"},{"Id":"493753251","IsPullRequest":true,"CreatedAt":"2019-09-16T16:15:28","Actor":"Gnbrkm41","Number":"41123","RawContent":null,"Title":"Update dogfooding.md to include other blob feeds required for dogfooding","State":"closed","Body":"Although the required feeds are written in the dotnet/core-sdk repo, I missed the note and went with the feeds written in the dogfooding documentation in corefx, which resulted in build failures due to failures restoring packages that are distributed from ASP.NET feeds.\r\n\r\nIt would be nice if we can have the feeds updated here as well.","Url":"https://github.com/dotnet/corefx/pull/41123","RelatedDescription":"Closed or merged PR \"Update dogfooding.md to include other blob feeds required for dogfooding\" (#41123)"},{"Id":"494011173","IsPullRequest":true,"CreatedAt":"2019-09-16T16:12:15","Actor":"ManickaP","Number":"41138","RawContent":null,"Title":"Updated VS code debugging instructions","State":"closed","Body":"Updated Unix instructions for VS Code debugging:\r\n- to reflect the actual directory structure of the repo. \r\n- to include required dotnet arguments to run the tests.\r\n\r\nFixes #41085","Url":"https://github.com/dotnet/corefx/pull/41138","RelatedDescription":"Closed or merged PR \"Updated VS code debugging instructions\" (#41138)"},{"Id":"494108016","IsPullRequest":false,"CreatedAt":"2019-09-16T15:03:52","Actor":"iconics-janb","Number":"41140","RawContent":null,"Title":"FileSystemWatcher with a filter set to a specific file does not work on Ubuntu","State":"open","Body":"This code is expect to raise Changed event when file text.txt is changed:\r\n\r\n                FileSystemWatcher watcher = new FileSystemWatcher(\"/usr/share\", \"text.txt\");\r\n                watcher.Changed += Watcher_Changed;\r\n                watcher.NotifyFilter = NotifyFilters.LastWrite;\r\n                watcher.EnableRaisingEvents = true;\r\n\r\nIt works OK in Windows, but in Ubuntu the event Changed is never raised. When the second parameter (filter) in FileSystemWatcher constructor is omitted and file \"text.txt\" is modified, then the Changed event is raised, but the FileSystemEventArgs.Name is different from \"text.txt\" (it was \".goutputstrem=ZJ8U7Z\" in my case).","Url":"https://github.com/dotnet/corefx/issues/41140","RelatedDescription":"Open issue \"FileSystemWatcher with a filter set to a specific file does not work on Ubuntu\" (#41140)"},{"Id":"494009523","IsPullRequest":true,"CreatedAt":"2019-09-16T13:34:34","Actor":"dotnet-maestro[bot]","Number":"41137","RawContent":null,"Title":"[master] Update dependencies from dotnet/coreclr","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:be1e858a-d56c-4174-7dc0-08d6ba16a224)\r\n## From https://github.com/dotnet/coreclr\r\n- **Build**: 20190915.2\r\n- **Date Produced**: 9/16/2019 12:41 AM\r\n- **Commit**: f0ba9d3435e260d89c44c73afd14dc12301d72ef\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk.IL** -> 5.0.0-alpha1.19465.2\r\n  - **Microsoft.NETCore.ILAsm** -> 5.0.0-alpha1.19465.2\r\n  - **Microsoft.NETCore.Runtime.CoreCLR** -> 5.0.0-alpha1.19465.2\r\n\r\n[marker]: <> (End:be1e858a-d56c-4174-7dc0-08d6ba16a224)\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/41137","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/coreclr\" (#41137)"},{"Id":"493999323","IsPullRequest":true,"CreatedAt":"2019-09-16T11:45:04","Actor":"ManickaP","Number":"41134","RawContent":null,"Title":"Throw better exception on WSL 1 where /proc/net file cannot be read","State":"open","Body":"On WSL 1, the files in `/proc/net/` directory are either empty or missing completely.\r\nIn such case, throw better exceptions (`PlatformNotSupportedException` when file is missing and `NetworkInformationException` when file is empty) instead of `FileNotFoundException` or `OverflowException`.\r\n\r\nNote that on WSL 2 the files are present and not empty.\r\n\r\nFixes  #30909","Url":"https://github.com/dotnet/corefx/pull/41134","RelatedDescription":"Open PR \"Throw better exception on WSL 1 where /proc/net file cannot be read\" (#41134)"},{"Id":"493938607","IsPullRequest":false,"CreatedAt":"2019-09-16T09:28:29","Actor":"intermension","Number":"41133","RawContent":null,"Title":"Where is the system.printing namespace and how do we access it in VS2019?","State":"open","Body":"This link would suggest System.Printing is available.\r\n\r\nhttps://docs.microsoft.com/en-us/dotnet/api/system.printing?view=netcore-3.0\r\n\r\nI have .NET Core 3.0 Preview 9 installed with VS 2019 but i cant seem to reference this Assembly / Namespace. I cant find anything in Nuget nor anything about printing assemblies in general. The api seems well documented on MS Docs where to find is a mystery.","Url":"https://github.com/dotnet/corefx/issues/41133","RelatedDescription":"Open issue \"Where is the system.printing namespace and how do we access it in VS2019?\" (#41133)"},{"Id":"493843903","IsPullRequest":false,"CreatedAt":"2019-09-16T04:44:11","Actor":"ahsonkhan","Number":"41132","RawContent":null,"Title":"Add tests for getting Base64 bytes from JsonElement that's backed by a JsonNode","State":"open","Body":"`+` Add tests\r\n\r\n```C#\r\nstring base64String = \"ABA=\";\r\nusing (JsonDocument doc = JsonDocument.Parse($\"{{\\\"data\\\":\\\"{base64String}\\\"}}\"))\r\n{\r\n    JsonElement root = doc.RootElement;\r\n    JsonElement data = root.GetProperty(\"data\");\r\n    byte[] base64Bytes = data.GetBytesFromBase64(); // {0, 16}\r\n    Console.WriteLine(base64Bytes.Length); // Returns 2\r\n    Console.WriteLine(base64String == Convert.ToBase64String(base64Bytes)); // Returns true\r\n\r\n    JsonElement roundtripViaNode = JsonNode.DeepCopy(root).AsJsonElement();\r\n    data = roundtripViaNode.GetProperty(\"data\");\r\n    // Throws System.NotSupportedException: 'Specified method is not supported.'\r\n    base64Bytes = data.GetBytesFromBase64();\r\n    Console.WriteLine(base64Bytes.Length);\r\n    Console.WriteLine(base64String == Convert.ToBase64String(base64Bytes));\r\n}\r\n```\r\n\r\nhttps://github.com/dotnet/corefx/blob/e8efb815275c8323fedc950ca3596474fa5e23c3/src/System.Text.Json/src/System/Text/Json/Document/JsonElement.cs#L487-L504\r\n\r\n![image](https://user-images.githubusercontent.com/6527137/64934371-35c13e80-d7ff-11e9-9acd-a32c027bc4a8.png)\r\n\r\ncc @kasiabulat ","Url":"https://github.com/dotnet/corefx/issues/41132","RelatedDescription":"Open issue \"Add tests for getting Base64 bytes from JsonElement that's backed by a JsonNode\" (#41132)"},{"Id":"493840667","IsPullRequest":false,"CreatedAt":"2019-09-16T04:27:40","Actor":"davidfowl","Number":"41131","RawContent":null,"Title":"API Proposal: ExecutionContext.Run<TContext> overloads","State":"open","Body":"Today to run code on a specific `ExecutionContext`, there's a non-generic Run method that takes a `ContextCallback` and object state. We should add a generic overload to boxing can be avoided (for e.g. when passing a ValueTuple):\r\n\r\n```C#\r\nnamespace System.Threading\r\n{\r\n    public sealed class ExecutionContext\r\n    {\r\n        // New\r\n        public static void Run<TState>(ExecutionContext context, ContextCallback<TState> callback, ref TState state);\r\n\r\n        // Existing\r\n        public static void Run(ExecutionContext executionContext, ContextCallback callback, object? state);\r\n        ...\r\n    }\r\n\r\n    // New (it exists but as internal)\r\n    public delegate void ContextCallback<TState>(ref TState state);\r\n\r\n    // Existing\r\n    public delegate void ContextCallback(object? state);\r\n}\r\n```","Url":"https://github.com/dotnet/corefx/issues/41131","RelatedDescription":"Open issue \"API Proposal: ExecutionContext.Run<TContext> overloads\" (#41131)"},{"Id":"493839741","IsPullRequest":false,"CreatedAt":"2019-09-16T04:22:51","Actor":"ahsonkhan","Number":"41130","RawContent":null,"Title":"Improve test coverage for JsonElement (when backed by JsonNode) for edge cases around enumeration","State":"open","Body":"We can improve test coverage of certain branches within `JsonElement` (when it's backed by `JsonNode`):\r\n\r\nMetric | Value\r\n-- | --\r\nCovered lines: | 629\r\nUncovered lines: | 13\r\nCoverable lines: | 642\r\nTotal lines: | 2096\r\nLine coverage: | 97.9% (629 of 642)\r\nCovered branches: | 213\r\nTotal branches: | 225\r\nBranch coverage: | 94.6% (213 of 225)\r\n\r\nEdge cases while enumerating JSON objects and JSON arrays. It's possible these branches are unreachable:\r\nhttps://github.com/dotnet/corefx/blob/e8efb815275c8323fedc950ca3596474fa5e23c3/src/System.Text.Json/src/System/Text/Json/Document/JsonElement.ArrayEnumerator.cs#L51-L59\r\n![image](https://user-images.githubusercontent.com/6527137/64934182-e2022580-d7fd-11e9-89ff-6dccf200171a.png)\r\n\r\nhttps://github.com/dotnet/corefx/blob/e8efb815275c8323fedc950ca3596474fa5e23c3/src/System.Text.Json/src/System/Text/Json/Document/JsonElement.ObjectEnumerator.cs#L47-L55\r\n![image](https://user-images.githubusercontent.com/6527137/64934206-0cec7980-d7fe-11e9-99fc-f948ce8e6674.png)\r\n\r\nThese tests won't fail on .NET Core (and they are likely already covered by tests that run on netfx, but it would be good to verify).\r\nhttps://github.com/dotnet/corefx/blob/e8efb815275c8323fedc950ca3596474fa5e23c3/src/System.Text.Json/src/System/Text/Json/Document/JsonElement.cs#L1097-L1105\r\n![image](https://user-images.githubusercontent.com/6527137/64934195-f6462280-d7fd-11e9-846c-4f8b1cf9dffa.png)\r\n\r\nhttps://github.com/dotnet/corefx/blob/e8efb815275c8323fedc950ca3596474fa5e23c3/src/System.Text.Json/src/System/Text/Json/Document/JsonElement.cs#L1176-L1184\r\n![image](https://user-images.githubusercontent.com/6527137/64934199-fc3c0380-d7fd-11e9-9a55-eec350582b92.png)\r\n\r\ncc @kasiabulat ","Url":"https://github.com/dotnet/corefx/issues/41130","RelatedDescription":"Open issue \"Improve test coverage for JsonElement (when backed by JsonNode) for edge cases around enumeration\" (#41130)"},{"Id":"493838015","IsPullRequest":false,"CreatedAt":"2019-09-16T04:14:02","Actor":"ahsonkhan","Number":"41129","RawContent":null,"Title":"Add performance tests for JsonNode and related types","State":"open","Body":"We should add performance tests to https://github.com/dotnet/performance and compare scenarios against Newtonsoft.Json.\r\n\r\nThis includes scenarios such as :\r\n- JsonNode.Parse (versus JsonDocument.Parse)\r\n- JsonNode.DeepCopy\r\n- And create JsonElement, modify some properties, and then convert back to JsonElement.\r\n- Enumerate all the nodes/tokens from a JsonNode (versus JsonDocument/JsonElement).\r\n\r\ncc @kasiabulat, @joperezr ","Url":"https://github.com/dotnet/corefx/issues/41129","RelatedDescription":"Open issue \"Add performance tests for JsonNode and related types\" (#41129)"},{"Id":"493837337","IsPullRequest":true,"CreatedAt":"2019-09-16T04:10:03","Actor":"ahsonkhan","Number":"41128","RawContent":null,"Title":"Rename JsonNode and related types to JNode, move them to S.T.Json.Linq namespace, and address partial usability feedback","State":"open","Body":"Forked from https://github.com/dotnet/corefx/pull/41030 (and hence depends on it).\r\n\r\n**Changes:**\r\n- Move JsonNode and related types to S.T.Json.Linq namespace.\r\n- Rename JsonNode and related types to JNode, JObject, etc.\r\n- Add JObject.Parse and JArray.Parse.\r\n- Override JNode.ToString to return the JSON string representation.\r\n- Modify some of the xml comments to improve JNode discoverability.\r\n- Rename GetNode to GetOriginatingNode to make it less inviting.\r\n- Add instance method JsonElement.ToJNode which does the deep copy.\r\n- Move the JArray and JObject enumerators as nested types.\r\n\r\nShould we wait for this PR to get merged until after https://github.com/dotnet/corefx/pull/41041?\r\n\r\nThis PR isn't ready to be merged until more tests are added but a review would help.\r\nVery few changes are made to the implementation details. It's probably easiest to review this one commit at a time.\r\n\r\ncc @kasiabulat, @terrajobst, @bartonjs, @joperezr \r\n","Url":"https://github.com/dotnet/corefx/pull/41128","RelatedDescription":"Open PR \"Rename JsonNode and related types to JNode, move them to S.T.Json.Linq namespace, and address partial usability feedback\" (#41128)"},{"Id":"493789908","IsPullRequest":false,"CreatedAt":"2019-09-15T22:22:04","Actor":"Symbai","Number":"41127","RawContent":null,"Title":"API proposal: Char.Empty","State":"closed","Body":"This probably gets denied like all my suggestions but however I would like to propose Char.Empty which does nothing else than String.Empty by returning a char instead of a string.\r\n\r\n```\r\nnamespace System\r\n{\r\n    public struct Char : IComparable, IConvertible, IComparable<Char>, IEquatable<Char>\r\n    {\r\n        public static readonly Char Empty;\r\n    }\r\n}\r\n```\r\n\r\nMost common scenario would be:\r\n```\r\nvoid DoStuff(string s) {\r\n\ts = s.Replace('a', char.Empty);\r\n}\r\n```\r\n\r\nThere will be reasons against this API and I could ask why the same reasons wouldn't apply to string.Empty which got approved but anyways. Another scenario most devs would have asked \"Why doesn't something like this exist?\" and here is my question to the official .NET team, can this be added?","Url":"https://github.com/dotnet/corefx/issues/41127","RelatedDescription":"Closed issue \"API proposal: Char.Empty\" (#41127)"},{"Id":"493771765","IsPullRequest":true,"CreatedAt":"2019-09-15T19:17:43","Actor":"shubhamranjan","Number":"41126","RawContent":null,"Title":"Add file move overrite test for linux","State":"closed","Body":"Fix #41009\r\n\r\n1. Add tests for checking if source file is deleted when overwrite is set to true while calling File.Move","Url":"https://github.com/dotnet/corefx/pull/41126","RelatedDescription":"Closed or merged PR \"Add file move overrite test for linux\" (#41126)"},{"Id":"493770270","IsPullRequest":false,"CreatedAt":"2019-09-15T18:27:47","Actor":"onionhammer","Number":"41125","RawContent":null,"Title":"TPL Dataflow TransformManyBlock support for IAsyncEnumerable","State":"open","Body":"Currently TransformManyBlock is expected to output an IEnumerable<K>, it would be useful to also have support for an IAsyncEnumerable<K> output\r\n\r\nAdditional question; why is TPL dataflow in this repository? Seems like an obvious candidate to split into its own repo","Url":"https://github.com/dotnet/corefx/issues/41125","RelatedDescription":"Open issue \"TPL Dataflow TransformManyBlock support for IAsyncEnumerable\" (#41125)"},{"Id":"493761432","IsPullRequest":true,"CreatedAt":"2019-09-15T17:01:52","Actor":"tarekgh","Number":"41124","RawContent":null,"Title":"Add Culture Cloning Test","State":"open","Body":"This test to validate the calendar instances inside the culture after colning.","Url":"https://github.com/dotnet/corefx/pull/41124","RelatedDescription":"Open PR \"Add Culture Cloning Test\" (#41124)"},{"Id":"493741946","IsPullRequest":true,"CreatedAt":"2019-09-15T14:11:03","Actor":"shubhamranjan","Number":"41122","RawContent":null,"Title":"Read values from /proc/[pid]/status","State":"open","Body":"Add support for:\r\n\r\n- Process.PeakWorkingSet64\r\n- Process.PrivateMemorySize64\r\n- Process.PagedMemorySize64\r\n- Process.PagedSystemMemorySize64\r\n- Process.PeakVirtualMemorySize64\r\n\r\nImprove:\r\n\r\n- Process.VirtualMemorySize64\r\n- Process.WorkingSet64\r\n\r\nAlso fixes #23449.\r\n\r\nUPDATE: Fixes/Additions/ Supports have only been added on Linux. OSX is still unsupported.","Url":"https://github.com/dotnet/corefx/pull/41122","RelatedDescription":"Open PR \"Read values from /proc/[pid]/status\" (#41122)"},{"Id":"493738363","IsPullRequest":true,"CreatedAt":"2019-09-15T13:50:39","Actor":"shubhamranjan","Number":"41121","RawContent":null,"Title":"Return values from /proc/[pid]/status","State":"closed","Body":"\r\n\r\nAdd support for:\r\n\r\n- Process.PeakWorkingSet64\r\n- Process.PrivateMemorySize64\r\n- Process.PagedMemorySize64\r\n- Process.PagedSystemMemorySize64\r\n- Process.PeakVirtualMemorySize64\r\n\r\nImprove:\r\n\r\n- Process.VirtualMemorySize64\r\n- Process.WorkingSet64","Url":"https://github.com/dotnet/corefx/pull/41121","RelatedDescription":"Closed or merged PR \"Return values from /proc/[pid]/status\" (#41121)"},{"Id":"493729967","IsPullRequest":true,"CreatedAt":"2019-09-15T13:45:25","Actor":"dotnet-maestro[bot]","Number":"41119","RawContent":null,"Title":"[master] Update dependencies from dotnet/coreclr","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:be1e858a-d56c-4174-7dc0-08d6ba16a224)\r\n## From https://github.com/dotnet/coreclr\r\n- **Build**: 20190914.2\r\n- **Date Produced**: 9/15/2019 1:39 AM\r\n- **Commit**: c7071577a4d95596cf84b313e87a8c5b47f2d493\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk.IL** -> 5.0.0-alpha1.19464.2\r\n  - **Microsoft.NETCore.ILAsm** -> 5.0.0-alpha1.19464.2\r\n  - **Microsoft.NETCore.Runtime.CoreCLR** -> 5.0.0-alpha1.19464.2\r\n\r\n[marker]: <> (End:be1e858a-d56c-4174-7dc0-08d6ba16a224)\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/41119","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/coreclr\" (#41119)"},{"Id":"493735211","IsPullRequest":true,"CreatedAt":"2019-09-15T13:16:48","Actor":"shubhamranjan","Number":"41120","RawContent":null,"Title":"Return values from /proc/[pid]/status","State":"closed","Body":"\r\n\r\nAdd support for:\r\n- Process.PeakWorkingSet64\r\n- Process.PrivateMemorySize64\r\n- Process.PagedMemorySize64\r\n- Process.PagedSystemMemorySize64\r\n- Process.PeakVirtualMemorySize64\r\n\r\nImprove:\r\n- Process.VirtualMemorySize64\r\n- Process.WorkingSet64","Url":"https://github.com/dotnet/corefx/pull/41120","RelatedDescription":"Closed or merged PR \"Return values from /proc/[pid]/status\" (#41120)"},{"Id":"494239801","IsPullRequest":false,"CreatedAt":"2019-09-13T23:31:33","Actor":"zezba9000","Number":"41144","RawContent":null,"Title":"BUG: Json.NET converter for IPAddress does not work in .NET Core 3.0 specifically","State":"open","Body":"Using Json.NET converters within the .NET Core 3.0 runtime fails. However in .NET Core 2.2 or .NET Framework 4.8 it works fine.\r\n\r\nIt seems like some \"Type\" is not coming through correctly.\r\n\r\n.NET Core versions are both using the same .NET Standard 2.0 Json.NET lib.\r\nThis makes me think its a .NET runtime issue of some kind or another but I can't be sure.\r\n\r\n**Download this example project that you can reproduce the issue with.**\r\nhttps://vrstudios-my.sharepoint.com/:u:/p/andrew_witte/ETIlqlXTlu1Moiz2Q2MYsAUBIje5Z96Zij7xGPL3wAO6wA?e=sz1oDH\r\n\r\nWin10 x64 1904\r\nOS Build: 18362.356\r\nVisual Studio 2019 16.3.0 Preview 3.0\r\n.NET Core 3.0.100-preview9-014004\r\n.NET Core 2.2.104\r\n\r\nHere are all my available .NET Core versions installed.\r\n```\r\n1.0.0-preview1-002702\r\n1.0.0-preview2-003121\r\n1.0.0-preview2-003131\r\n1.0.1\r\n1.0.2\r\n1.0.3\r\n1.0.4\r\n1.1.0\r\n2.0.2\r\n2.0.3\r\n2.1.100\r\n2.1.101\r\n2.1.102\r\n2.1.103\r\n2.1.104\r\n2.1.2\r\n2.1.200\r\n2.1.201\r\n2.1.202\r\n2.1.4\r\n2.1.400\r\n2.1.401\r\n2.1.402\r\n2.1.403\r\n2.1.500\r\n2.1.502\r\n2.1.503\r\n2.1.504\r\n2.1.505\r\n2.1.507\r\n2.1.508\r\n2.1.509\r\n2.1.602\r\n2.1.604\r\n2.1.700\r\n2.1.700-preview-009618\r\n2.1.701\r\n2.1.800\r\n2.1.800-preview-009677\r\n2.1.800-preview-009696\r\n2.1.801\r\n2.1.802\r\n2.2.101\r\n2.2.103\r\n2.2.104\r\n3.0.100-preview9-014004\r\n```\r\n\r\nVS info\r\n```\r\nMicrosoft Visual Studio Community 2019 Preview\r\nVersion 16.3.0 Preview 3.0\r\nVisualStudio.16.Preview/16.3.0-pre.3.0+29230.61\r\nMicrosoft .NET Framework\r\nVersion 4.8.03752\r\n\r\nInstalled Version: Community\r\n\r\nVisual C++ 2019   00435-60000-00000-AA947\r\nMicrosoft Visual C++ 2019\r\n\r\nApplication Insights Tools for Visual Studio Package   9.1.00815.1\r\nApplication Insights Tools for Visual Studio\r\n\r\nASP.NET and Web Tools 2019   16.3.277.18560\r\nASP.NET and Web Tools 2019\r\n\r\nASP.NET Core Blazor Language Services   16.0.19227.01\r\n\r\nASP.NET Web Frameworks and Tools 2019   16.3.277.18560\r\nFor additional information, visit https://www.asp.net/\r\n\r\nAzure App Service Tools v3.0.0   16.3.277.18560\r\nAzure App Service Tools v3.0.0\r\n\r\nAzure Functions and Web Jobs Tools   16.3.277.18560\r\nAzure Functions and Web Jobs Tools\r\n\r\nC# Tools   3.3.1-beta3-19430-03+fa8e2c9b566e4471a3509fc63d7baca0a2a6d30b\r\nC# components used in the IDE. Depending on your project type and settings, a different version of the compiler may be used.\r\n\r\nCommon Azure Tools   1.10\r\nProvides common services for use by Azure Mobile Services and Microsoft Azure Tools.\r\n\r\nConvertToDevExtremeCommand Extension   1.0\r\nConvertToDevExtremeCommand Visual Studio Extension Detailed Info\r\n\r\nIntelliCode Extension   1.0\r\nIntelliCode Visual Studio Extension Detailed Info\r\n\r\nMicrosoft Azure Tools   2.9\r\nMicrosoft Azure Tools for Microsoft Visual Studio 0x10 - v2.9.20816.1\r\n\r\nMicrosoft Continuous Delivery Tools for Visual Studio   0.4\r\nSimplifying the configuration of Azure DevOps pipelines from within the Visual Studio IDE.\r\n\r\nMicrosoft JVM Debugger   1.0\r\nProvides support for connecting the Visual Studio debugger to JDWP compatible Java Virtual Machines\r\n\r\nMicrosoft Library Manager   2.0.83+gbc8a4b23ec\r\nInstall client-side libraries easily to any web project\r\n\r\nMicrosoft MI-Based Debugger   1.0\r\nProvides support for connecting Visual Studio to MI compatible debuggers\r\n\r\nMicrosoft Visual C++ Wizards   1.0\r\nMicrosoft Visual C++ Wizards\r\n\r\nMicrosoft Visual Studio Tools for Containers   1.1\r\nDevelop, run, validate your ASP.NET Core applications in the target environment. F5 your application directly into a container with debugging, or CTRL + F5 to edit & refresh your app without having to rebuild the container.\r\n\r\nMicrosoft Visual Studio VC Package   1.0\r\nMicrosoft Visual Studio VC Package\r\n\r\nNuGet Package Manager   5.3.0\r\nNuGet Package Manager in Visual Studio. For more information about NuGet, visit https://docs.nuget.org/\r\n\r\nProjectServicesPackage Extension   1.0\r\nProjectServicesPackage Visual Studio Extension Detailed Info\r\n\r\nSQL Server Data Tools   16.0.61908.27190\r\nMicrosoft SQL Server Data Tools\r\n\r\nTest Adapter for Boost.Test   1.0\r\nEnables Visual Studio's testing tools with unit tests written for Boost.Test.  The use terms and Third Party Notices are available in the extension installation directory.\r\n\r\nTest Adapter for Google Test   1.0\r\nEnables Visual Studio's testing tools with unit tests written for Google Test.  The use terms and Third Party Notices are available in the extension installation directory.\r\n\r\nTypeScript Tools   16.0.10821.2002\r\nTypeScript Tools for Microsoft Visual Studio\r\n\r\nVisual Basic Tools   3.3.1-beta3-19430-03+fa8e2c9b566e4471a3509fc63d7baca0a2a6d30b\r\nVisual Basic components used in the IDE. Depending on your project type and settings, a different version of the compiler may be used.\r\n\r\nVisual F# Tools 10.4 for F# 4.6   16.3.0-beta.19421.2+9f51ac5290b1dfc5dc434841d61b2ac31997ea8c\r\nMicrosoft Visual F# Tools 10.4 for F# 4.6\r\n\r\nVisual Studio Code Debug Adapter Host Package   1.0\r\nInterop layer for hosting Visual Studio Code debug adapters in Visual Studio\r\n\r\nVisual Studio Tools for CMake   1.0\r\nVisual Studio Tools for CMake\r\n\r\nVisual Studio Tools for CMake   1.0\r\nVisual Studio Tools for CMake\r\n\r\nVisual Studio Tools for Containers   1.0\r\nVisual Studio Tools for Containers\r\n```","Url":"https://github.com/dotnet/corefx/issues/41144","RelatedDescription":"Open issue \"BUG: Json.NET converter for IPAddress does not work in .NET Core 3.0 specifically\" (#41144)"},{"Id":"494177810","IsPullRequest":false,"CreatedAt":"2019-09-02T13:58:33","Actor":"HSchwichtenberg","Number":"41141","RawContent":null,"Title":"NullReference Exception in SqlParameterCollection.Add() when using a Typed DataSet and EF 6.3 in the same .NET Core 3.0 Project (Preview 8) ","State":"open","Body":"**Repro steps**\r\n\r\n1. Create a dotnet core 3.0 project (Preview 8)\r\n2. Add PackageReferences \r\n    PackageReference Include=\"System.Data.DataSetExtensions\" Version=\"4.6.0-preview3.19128.7\" />\r\n    PackageReference Include=\"System.Data.SqlClient\" Version=\"4.7.0-preview8.19405.3\" />\r\n2. Add a typed dataset\r\n3. Run Code, e.g.\r\n     var d = new MyDataSet(); \r\n    var t = new MyTableTableAdapter();\r\n     t.Connection.ConnectionString = @\"...\";\r\n     t.Fill(d.MyTable);\r\n4. Now add another reference\r\n    PackageReference Include=\"EntityFramework\" Version=\"6.3.0-preview8-19405-04\" />\r\n5. The above code will fail now at  this._adapter.DeleteCommand.Parameters.Add():\r\nSystem.NullReferenceException: 'Object reference not set to an instance of an object.'\r\n\r\n[TypedDataSetDemo.zip](https://github.com/dotnet/SqlClient/files/3566592/TypedDataSetDemo.zip)\r\n\r\n**Expected result**\r\n\r\nI should be able to use Typed DataSet and EF 6.3 in the same project (for migrating old projects using Typed DataSets)\r\n\r\n**Actual result**\r\n\r\nSystem.NullReferenceException: 'Object reference not set to an instance of an object.' in the generated code.\r\n![2019-09-02_17-28-46](https://user-images.githubusercontent.com/3673169/64124424-49a08580-cda7-11e9-802d-bf42c5ac4165.png)\r\n\r\n**Note**\r\n\r\nThe same error happens if you have the Typed DataSet and the EF 6.3 in different projects that are referenced by the same start project.","Url":"https://github.com/dotnet/corefx/issues/41141","RelatedDescription":"Open issue \"NullReference Exception in SqlParameterCollection.Add() when using a Typed DataSet and EF 6.3 in the same .NET Core 3.0 Project (Preview 8) \" (#41141)"}],"ResultType":"GitHubIssue"},"Roslyn-Issues":{"Issues":[{"Id":"494393808","IsPullRequest":false,"CreatedAt":"2019-09-17T04:27:21","Actor":"davkean","Number":"38722","RawContent":null,"Title":"[Regression] CodeLens does not work for Visual Basic","State":"open","Body":"**Version Used**: \r\nVersion 16.4.0 Preview 2.0 [29316.148.master]\r\n\r\n**Steps to Reproduce**:\r\n![image](https://user-images.githubusercontent.com/1103906/65011523-26550900-d957-11e9-89fe-bb7106b94db1.png)\r\n\r\n**Expected Behavior**:\r\nCodeLens to show\r\n\r\n**Actual Behavior**:\r\nSpace is reserved for CodeLens but the lenses themselves don't show up.","Url":"https://github.com/dotnet/roslyn/issues/38722","RelatedDescription":"Open issue \"[Regression] CodeLens does not work for Visual Basic\" (#38722)"},{"Id":"494334191","IsPullRequest":true,"CreatedAt":"2019-09-17T01:30:07","Actor":"dotnet-bot","Number":"38719","RawContent":null,"Title":"Merge master to master-vs-deps","State":"closed","Body":"\nThis is an automatically generated pull request from master into master-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-master-vs-deps\ngit reset --hard upstream/master-vs-deps\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-master-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/38719","RelatedDescription":"Closed or merged PR \"Merge master to master-vs-deps\" (#38719)"},{"Id":"494344723","IsPullRequest":true,"CreatedAt":"2019-09-17T00:48:30","Actor":"nnpcYvIVl","Number":"38721","RawContent":null,"Title":"Spelling fixes","State":"open","Body":"","Url":"https://github.com/dotnet/roslyn/pull/38721","RelatedDescription":"Open PR \"Spelling fixes\" (#38721)"},{"Id":"494339095","IsPullRequest":false,"CreatedAt":"2019-09-17T00:22:24","Actor":"gafter","Number":"38720","RawContent":null,"Title":"Make constant folding of `<<` and `>>` host platform independent","State":"open","Body":"Constant folding of `<<` and `>>` in the C# compiler depends on the (undefined) behavior of the underlying platform when the shift amount is greater than the size of the shifted value.  We should mask the shift amount to get deterministic behavior matching the X86 behavior.\r\n\r\nHere is the offending source:\r\n``` c#\r\n                case BinaryOperatorKind.IntLeftShift:\r\n                    return valueLeft.Int32Value << valueRight.Int32Value;\r\n                case BinaryOperatorKind.LongLeftShift:\r\n                    return valueLeft.Int64Value << valueRight.Int32Value;\r\n                case BinaryOperatorKind.UIntLeftShift:\r\n                    return valueLeft.UInt32Value << valueRight.Int32Value;\r\n                case BinaryOperatorKind.ULongLeftShift:\r\n                    return valueLeft.UInt64Value << valueRight.Int32Value;\r\n                case BinaryOperatorKind.IntRightShift:\r\n                    return valueLeft.Int32Value >> valueRight.Int32Value;\r\n                case BinaryOperatorKind.LongRightShift:\r\n                    return valueLeft.Int64Value >> valueRight.Int32Value;\r\n                case BinaryOperatorKind.UIntRightShift:\r\n                    return valueLeft.UInt32Value >> valueRight.Int32Value;\r\n                case BinaryOperatorKind.ULongRightShift:\r\n                    return valueLeft.UInt64Value >> valueRight.Int32Value;\r\n```\r\n","Url":"https://github.com/dotnet/roslyn/issues/38720","RelatedDescription":"Open issue \"Make constant folding of `<<` and `>>` host platform independent\" (#38720)"},{"Id":"494331375","IsPullRequest":true,"CreatedAt":"2019-09-16T23:52:21","Actor":"CyrusNajmabadi","Number":"38718","RawContent":null,"Title":"Make certain parts of the nuget search update system non-cancellable.","State":"open","Body":"These codepaths only ever passed in CancellationToken.None in (outside of tests).  As such, it's just somewhat confusing to actually attempt to use the token for any sort of real rpc purpose.  The token just exists so that tests can effectively cause the system to bail out of its infinite looping.  \r\n\r\nIn the real OOP scenario, we just allow the normal process teardown mechanism to clean things up.  So we don't actually need to have anything control that loop.  Again, this is how things have always worked.  So we basically have several years worth of information showing this lifetime management approach works and doesn't need changing. \r\n\r\nThis PR just makes things clearer and reduces the chance for confusion here.\r\n\r\n--\r\n\r\nNote: to reiterate.  There should be no runtime change in behavior here.  This change just codifies what our existing implementation already does, and reduces confusion due to the existence of a cancellation token being used in non-test scenarios that had no effect.","Url":"https://github.com/dotnet/roslyn/pull/38718","RelatedDescription":"Open PR \"Make certain parts of the nuget search update system non-cancellable.\" (#38718)"},{"Id":"494329204","IsPullRequest":false,"CreatedAt":"2019-09-16T23:45:37","Actor":"vsfeedback","Number":"38717","RawContent":null,"Title":"正在下载用于nuget.org的intellisense index-Downloading intellisense index for nuget.org","State":"open","Body":"_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/problem/576978/正在下载用于nugetorg的intellisense-index.html)._\n\n---\n<p>VSF_TYPE_MARKDOWNDownloading the IntelliSense index for nuget.org is running all the time, unable to debug the program, prompt to install the Android SDK when debugging the program</p>\n\n---\n### Original Comments\n\n#### Visual Studio Feedback System on 5/22/2019, 00:45 AM: \n\n<p>We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.</p>\n\n#### 冰尘 on 5/23/2019, 07:54 AM: \n\nI has this problem too. This prolbem was found since VisualStudio2019 upgrade to v16.1.0\n#### Visual Studio Feedback System on 5/24/2019, 11:30 AM: \n\n<p>Thank you for sharing your feedback! Our teams prioritize action on product issues with broad customer impact. See details at:  https://docs.microsoft.com/en-us/visualstudio/ide/report-a-problem?view=vs-2017#faq . In case you need answers to common questions or need assisted support, be sure to use  https://visualstudio.microsoft.com/vs/support/ . We'll keep you posted on any updates to this feedback.</p>\n\n#### Eduardo Gasparoto Semprebon on 5/28/2019, 05:31 AM: \n\n<p>Same issue here, using 16.1.1.</p><p>Already tried to clear the solution, deleted the .vs folder... Nothing</p>\n\n#### jim liu on 6/2/2019, 00:02 AM: \n\nI repair the installation solved this  issue.\n#### 彬彬 廖 on 6/11/2019, 05:26 PM: \n\n<p>I repair the installation, and still can't solve this issue.</p><p>my computer works in offline mode.</p>\n\n#### Mayuresh Sawardekar on 6/18/2019, 08:40 AM: \n\n<p>Any update on the issue above ? Even repairing the installation did not help.</p>\n\n#### Cagri (Charlie) Aslan [MSFT] on 6/18/2019, 11:35 AM: \n\n<p>Thanks for the feedback. Is it possible for you to use the 'record' functionality in the 'send feedback' tool and capture VS when it is having the problem? It will get us perf traces that should let us figure out what's going on. Thanks!</p>\n\n#### Mayuresh Sawardekar on 6/18/2019, 01:27 PM: \n\nHopefully the video comes through. Thanks\n#### David Roth on 6/18/2019, 00:33 PM: \n\n<p>After upgrading to 16.1.3 yesterday, I do not see this issue anymore</p>\n\n#### Mayuresh Sawardekar on 6/18/2019, 00:44 PM: \n\n<p>I am on VS 2019 v16.1.3 . I am not able to see \"record functionality\" in \"send feedback\". All I see is \"Report a problem\" and \"Suggest a feature\"</p>\n\n#### Cagri (Charlie) Aslan [MSFT] on 6/18/2019, 00:46 PM: \n\n<p>This might help: <a target='_blank' href=\"https://docs.microsoft.com/en-us/visualstudio/ide/how-to-report-a-problem-with-visual-studio?view=vs-2019\">https://docs.microsoft.com/en-us/visualstudio/ide/how-to-report-a-problem-with-visual-studio?view=vs-2019</a></p>\n\n#### Mayuresh Sawardekar on 6/18/2019, 01:31 PM: \n\n<p><a rel=\"user\" href=\"https://developercommunity.visualstudio.com/users/480/140a11e6-f6dc-4ab9-96df-c5c26b5dd5e1.html\" nodeid=\"480\">@Cagri (Charlie) Aslan [MSFT]</a> : I did send over the VS capture via the \"send feedback\" tool. Hopefully it came through.</p>\n\n#### Cagri (Charlie) Aslan [MSFT] on 6/18/2019, 01:43 PM: \n\n<p>It says it is still uploading. I'll check again in a couple of hours. Thanks!</p>\n\n#### Mayuresh Sawardekar on 6/19/2019, 06:25 AM: \n\n<p><a rel=\"user\" href=\"https://developercommunity.visualstudio.com/users/480/140a11e6-f6dc-4ab9-96df-c5c26b5dd5e1.html\" nodeid=\"480\">@Cagri (Charlie) Aslan [MSFT]</a>  Any update on it yet ?</p>\n\n#### 419830883 on 6/26/2019, 08:30 PM: \n\n<p>In 16.1.4,this problem still exists.Is there any solution?</p>\n\n#### 刘涛 on 6/26/2019, 08:37 PM: \n\n<p>我目前的解决办法是通过Android Studio 中Android Sdk tool 下载对应的SDK与工具 到C:\\Program Files (x86)\\Android\\android-sdk暂时解决的,</p><p>关于Bug修复进度Allen在帮忙跟进</p><p>https://developercommunity.visualstudio.com/content/problem/600284/xamarinandroid-sdk-manager-offline-mode-after-upgr.html</p><p>Translated from Bing:</p><p>My current solution is to download the corresponding SDK and tools from Android Sdk tool in Android Studio to C:\\Program Files (x86)\\Android\\android-sdk for temporary solution.</p><p>Allen is helping to follow up on the bug fix progress</p><p>Https://developercommunity.visualstudio.com/content/problem/600284/xamarinandroid-sdk-manager-offline-mode-after-upgr.html</p>\n\n#### Eduardo Gasparoto Semprebon on 6/27/2019, 01:07 AM: \n\n<p>Still same issue in 16.1.4. I don't have Android SDK in the machine.</p>\n\n#### Mayuresh Sawardekar on 6/27/2019, 04:50 AM: \n\n<p>I too dont have Android SDK in the machine. Help needed to resolve this issue.</p>\n\n#### John Burke on 6/28/2019, 11:40 AM: \n\n<p>I am having the issue as well.  Upgraded to 16.1.4 and it still exists.  Anything I can do to workaround?</p>\n\n#### 419830883 on 7/9/2019, 08:44 PM: \n\n<p>This issue has been solved in 16.1.6,thanks for everyone!</p>\n\n#### John Burke on 7/11/2019, 10:56 AM: \n\n<p>I upgraded to 16.1.6 and it is not fixed.  Still getting the message.</p>\n\n#### Ray on 8/23/2019, 01:55 AM: \n\nIt's now 16.2.3 and.... you guessed it: issue is still here!  <br><br>Removed nuget.org from VS.NET setting and solution settings, restarted several times, reinstalled VS.NET, told my mum about it...  and it just refuses to move on like a bad date. <br><br>Thankfully I don't have OCD otherwise this would drive me crazy\n#### zebal on 9/13/2019, 05:23 AM: \n\n<p>I have the same issue, VS 16.2.5</p><p>Fresh installed system and VS.</p><p>\"Downloading intellisense index for nuget.org\"</p><p>Firewall is open.</p><p>This should be fixed, what information do you need?</p>\n\n#### Rob Relyea [MSFT] on 9/13/2019, 03:42 PM: \n\n<p>No idea which component is trying to download some intellisense index from <a target='_blank' href=\"http://nuget.org\">nuget.org</a>.<br>\nI strongly believe this is not the NuGet team trying to do this.</p>\n<p>It would be interesting to figure out who might be downloading an intellisense index via <a target='_blank' href=\"http://nuget.org\">nuget.org</a>.<br>\nWhich component of VS? Which workload are you running?</p>\n<p>Does this only happen when you have a solution loaded?<br>\nEtc…</p>\n<p>-Rob Relyea<br>\nNuGet Team.</p>\n\n#### Ge Ge on 9/13/2019, 11:08 PM: \n\n<p><a rel=\"user\" href=\"https://developercommunity.visualstudio.com/users/1707/fd314950-9f6e-4bf9-90a0-982362e25620.html\" nodeid=\"1707\">@Rob Relyea [MSFT]</a> \"Downloading intellisense index for nuget.org\" will only show in the Background Task button (in the bottom left of the screen). And yes, it seems only happen when having a solution loaded.</p><p><strong></strong><u></u><sub></sub><sup></sup></p><p>My solution:</p><p>1. Use VPN to finish the download.</p><p>2. If it doesn't work, go to Options &gt; NuGet Package Manager &gt; Package Sources, and delete \"nuget.org\" item (back up the info if you want). Restart VS 2019, problem solved. And then you can add the \"nuget.org\" back.</p><p>At least works for me :P</p>\n\n#### zebal on 9/14/2019, 05:20 AM: \n\n<p><a rel=\"user\" href=\"https://developercommunity.visualstudio.com/users/1707/fd314950-9f6e-4bf9-90a0-982362e25620.html\" nodeid=\"1707\">@Rob Relyea [MSFT]</a></p><p>It's a background task in VS usually starting together with intellisense (that is when intellisense is doing parsing job on load of solution). and so far only when loading Unreal Engine 4 project.</p><p>It happens randomly, sometime yes sometimes not, I usually restart VS to get rid of it thanks to to its randomness.</p><p>I tried to reproduce the issue why recording my system with perfview but the problem didn't occur :(</p><p>I also tried the suggestion to remove and re-add nuget.org link in options, but can't tell if that solved the issue, it's too early to conclude, I'm sure this background task will come back once, and if so I'll record system and send you pefview logs.</p>\n\n#### Visual Studio Feedback System on 9/14/2019, 01:35 PM: \n\n<p>We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.</p>\n\n\n---\n### Original Solutions\n\n#### Ge Ge solved on 7/25/2019, 09:04 PM, 0 votes: \n\n<p>Use VPN to finish the download.</p><p>If it doesn't work, go to Options &gt; NuGet Package Manager &gt; Package Sources, and delete \"nuget.org\" item (make a screen shot if you want). Restart VS 2019, problem solved. And then it won't start donwloading any more if you add the \"nuget.org\" back.</p>\n\n#### 419830883 solved on 7/9/2019, 08:43 PM, -3 votes: \n\n<p>This issue has been solved in 16.1.6,thanks for everyone!</p>\n","Url":"https://github.com/dotnet/roslyn/issues/38717","RelatedDescription":"Open issue \"正在下载用于nuget.org的intellisense index-Downloading intellisense index for nuget.org\" (#38717)"},{"Id":"494317048","IsPullRequest":false,"CreatedAt":"2019-09-16T23:02:08","Actor":"dibarbet","Number":"38716","RawContent":null,"Title":"Add an analyzer, codefix for organize imports","State":"open","Body":"This came up during the design review for https://github.com/dotnet/roslyn/pull/38593\r\n\r\nI'd like the ability to have an analyzer to report on unorganized imports with a code fix to automatically sort the usings.  Ideally the severity could be configured by editor config as well and used by fix all.\r\n\r\nThis will prevent comments like [this ](https://github.com/dotnet/roslyn/pull/38410#discussion_r320898797) from occurring so often :) as the sorting would be enforced automatically.\r\n\r\nWe should of course share the implementation of the code fix with the current sort usings command.\r\n","Url":"https://github.com/dotnet/roslyn/issues/38716","RelatedDescription":"Open issue \"Add an analyzer, codefix for organize imports\" (#38716)"},{"Id":"494313809","IsPullRequest":false,"CreatedAt":"2019-09-16T22:51:04","Actor":"dibarbet","Number":"38715","RawContent":null,"Title":"Refactoring to consolidate mis-matched accessibility modifiers on partial types","State":"open","Body":"Related to https://github.com/dotnet/roslyn/issues/36544\r\n\r\nWe would like to provide a code fix to consolidate the accessibility modifiers on partial types that have mismatched accessibility modifiers.\r\n\r\nThis would be a codefix for diagnostic id\r\n1.  CS0262 for C# and\r\n2.  BC30925 for VB\r\n\r\nthat would offer to consolidate the accessibility modifiers to any of the modifiers already specified on the partial type.","Url":"https://github.com/dotnet/roslyn/issues/38715","RelatedDescription":"Open issue \"Refactoring to consolidate mis-matched accessibility modifiers on partial types\" (#38715)"},{"Id":"494310486","IsPullRequest":true,"CreatedAt":"2019-09-16T22:39:38","Actor":"gafter","Number":"38714","RawContent":null,"Title":"Refine diagnostic for switch expression that is not exhaustive","State":"open","Body":"Fixes #38571","Url":"https://github.com/dotnet/roslyn/pull/38714","RelatedDescription":"Open PR \"Refine diagnostic for switch expression that is not exhaustive\" (#38714)"},{"Id":"494305129","IsPullRequest":true,"CreatedAt":"2019-09-16T22:22:04","Actor":"gafter","Number":"38713","RawContent":null,"Title":"Adjust syntax disambiguation for ref ternary.","State":"open","Body":"Fixes #38679","Url":"https://github.com/dotnet/roslyn/pull/38713","RelatedDescription":"Open PR \"Adjust syntax disambiguation for ref ternary.\" (#38713)"},{"Id":"494304577","IsPullRequest":false,"CreatedAt":"2019-09-16T22:20:16","Actor":"acangialosi","Number":"38712","RawContent":null,"Title":"editorconfig doesn't detect vars or update notification type","State":"open","Body":"**Version Used**: \r\n29316.52.master\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Clone this repo https://github.com/gothinkster/aspnetcore-realworld-example-app\r\n2. Right click on solution or project and click Add/Create EditorConfig (Intellicode) menu\r\n3. Go to line 64 and toggle require Var vs explicit types and toggle notification from suggestion to warning to error.\r\n4. Open Create.CS and startup.cs (both of these have vars)\r\n\r\n**Expected Behavior**:\r\nError list shows error according to configuration in step 3\r\n\r\n**Actual Behavior**:\r\nIt may find a var in create.cs but not startup.cs. Changes to the notification type from suggestion to error to warning doesn't have any impact. Changing true to false and back doesnt affect warning either.","Url":"https://github.com/dotnet/roslyn/issues/38712","RelatedDescription":"Open issue \"editorconfig doesn't detect vars or update notification type\" (#38712)"},{"Id":"494298137","IsPullRequest":false,"CreatedAt":"2019-09-16T22:01:03","Actor":"AlekseyTs","Number":"38711","RawContent":null,"Title":"Warning is not reported for a type shadowing a declaration from base interface.","State":"open","Body":"```\r\n\r\n        [Fact]\r\n        public void NestedTypes_33()\r\n        {\r\n            var source1 =\r\n@\"\r\ninterface I1\r\n{\r\n    interface I2\r\n    { }\r\n}\r\n\r\ninterface I3 : I1\r\n{\r\n    interface I2\r\n    {\r\n    }\r\n}\r\n\r\nclass C1\r\n{\r\n    public interface I4\r\n    { }\r\n}\r\n\r\nclass C3 : C1\r\n{\r\n    public interface I4\r\n    {\r\n    }\r\n}\r\n\";\r\n\r\n            var compilation1 = CreateCompilation(source1, options: TestOptions.DebugDll,\r\n                                                 parseOptions: TestOptions.Regular);\r\n\r\n            compilation1.VerifyDiagnostics(\r\n                // (23,22): warning CS0108: 'C3.I4' hides inherited member 'C1.I4'. Use the new keyword if hiding was intended.\r\n                //     public interface I4\r\n                Diagnostic(ErrorCode.WRN_NewRequired, \"I4\").WithArguments(\"C3.I4\", \"C1.I4\").WithLocation(23, 22)\r\n                );\r\n        }\r\n```","Url":"https://github.com/dotnet/roslyn/issues/38711","RelatedDescription":"Open issue \"Warning is not reported for a type shadowing a declaration from base interface.\" (#38711)"},{"Id":"494292012","IsPullRequest":true,"CreatedAt":"2019-09-16T21:44:01","Actor":"jcouv","Number":"38710","RawContent":null,"Title":"Add tests for method type inference","State":"open","Body":"Closes https://github.com/dotnet/roslyn/issues/37909","Url":"https://github.com/dotnet/roslyn/pull/38710","RelatedDescription":"Open PR \"Add tests for method type inference\" (#38710)"},{"Id":"494153811","IsPullRequest":true,"CreatedAt":"2019-09-16T21:39:48","Actor":"mavasani","Number":"38703","RawContent":null,"Title":"Bump up flow analysis utilities version","State":"closed","Body":"Use the latest flow analysis utilities package","Url":"https://github.com/dotnet/roslyn/pull/38703","RelatedDescription":"Closed or merged PR \"Bump up flow analysis utilities version\" (#38703)"},{"Id":"494274302","IsPullRequest":true,"CreatedAt":"2019-09-16T20:59:34","Actor":"agocke","Number":"38709","RawContent":null,"Title":"Require /unsafe flag for SkipLocalsInitAttribute","State":"open","Body":"","Url":"https://github.com/dotnet/roslyn/pull/38709","RelatedDescription":"Open PR \"Require /unsafe flag for SkipLocalsInitAttribute\" (#38709)"},{"Id":"494261211","IsPullRequest":false,"CreatedAt":"2019-09-16T20:30:25","Actor":"333fred","Number":"38708","RawContent":null,"Title":"IntroduceVariableCodeRefactoring Crash","State":"open","Body":"```\r\nSystem.ArgumentOutOfRangeException : Specified argument was out of the range of valid values.\r\nParameter name: position\r\n   at Microsoft.CodeAnalysis.SyntaxNode.FindTokenCore(Int32 position,Boolean findInsideTrivia)\r\n   at Microsoft.CodeAnalysis.CodeRefactoringHelpers.IsNodeUnderselected(SyntaxNode node,TextSpan selection)\r\n   at async Microsoft.CodeAnalysis.IntroduceVariable.AbstractIntroduceVariableService`6.State.TryInitializeAsync[TService,TExpressionSyntax,TTypeSyntax,TTypeDeclarationSyntax,TQueryExpressionSyntax,TNameSyntax](<Unknown Parameters>)\r\n   at async Microsoft.CodeAnalysis.IntroduceVariable.AbstractIntroduceVariableService`6.State.GenerateAsync[TService,TExpressionSyntax,TTypeSyntax,TTypeDeclarationSyntax,TQueryExpressionSyntax,TNameSyntax](<Unknown Parameters>)\r\n   at async Microsoft.CodeAnalysis.IntroduceVariable.AbstractIntroduceVariableService`6.IntroduceVariableAsync[TService,TExpressionSyntax,TTypeSyntax,TTypeDeclarationSyntax,TQueryExpressionSyntax,TNameSyntax](<Unknown Parameters>)\r\n   at async Microsoft.CodeAnalysis.IntroduceVariable.IntroduceVariableCodeRefactoringProvider.ComputeRefactoringsAsync(<Unknown Parameters>)\r\n   at async Microsoft.CodeAnalysis.CodeRefactorings.CodeRefactoringService.GetRefactoringFromProviderAsync(<Unknown Parameters>)\r\n```\r\n\r\nThe selection here appears to be a little finicky, it need to be in the middle of some kind of nested expression, I think? Here's a screenshot of my selection:\r\n![image](https://user-images.githubusercontent.com/2371880/64991005-db1ef580-d885-11e9-8cf5-0d61bcce5a57.png)\r\nAs far as I can tell, the offer to rename the method is unrelated, it's just showing that as I was simplifying my repro.\r\n\r\nRaw code as well:\r\n```cs\r\nusing System;\r\nclass C {\r\n    public void M()\r\n    {\r\n        Console.WriteLine(\"Hello world\");\r\n        Console.WriteLine(new C());\r\n    }\r\n}\r\n```\r\n\r\nVS Version 29312.127 Int Preview","Url":"https://github.com/dotnet/roslyn/issues/38708","RelatedDescription":"Open issue \"IntroduceVariableCodeRefactoring Crash\" (#38708)"},{"Id":"494176715","IsPullRequest":true,"CreatedAt":"2019-09-16T20:00:06","Actor":"dotnet-bot","Number":"38704","RawContent":null,"Title":"Merge master to master-vs-deps","State":"closed","Body":"\nThis is an automatically generated pull request from master into master-vs-deps.\n(created from a manual run of the PR generation tool)\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-master-vs-deps\ngit reset --hard upstream/master-vs-deps\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-master-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/38704","RelatedDescription":"Closed or merged PR \"Merge master to master-vs-deps\" (#38704)"},{"Id":"494242743","IsPullRequest":false,"CreatedAt":"2019-09-16T19:49:58","Actor":"RikkiGibson","Number":"38707","RawContent":null,"Title":"Show Parameter Info should show the target type of an assignment","State":"open","Body":"**Version Used**: 16.3-preview3\r\n\r\nThis is a feature request. It feels RHS of assignments would be easier to write if I could see what type of thing is expected to be assigned. It's possible that this is already available via a different command, or that this has been considered and rejected before. Please let me know if that's the case.\r\n\r\n```cs\r\nclass C\r\n{\r\n    string Prop { get; set; }\r\n    void M()\r\n    {\r\n         // ctrl+shift+space here should show me the type of the assignment target (string)\r\n        Prop = [||];\r\n    }\r\n}\r\n```\r\n","Url":"https://github.com/dotnet/roslyn/issues/38707","RelatedDescription":"Open issue \"Show Parameter Info should show the target type of an assignment\" (#38707)"},{"Id":"494217990","IsPullRequest":false,"CreatedAt":"2019-09-16T18:52:51","Actor":"gundermanc","Number":"38706","RawContent":null,"Title":"VS Search should disambiguate types with more information","State":"open","Body":"**Version Used**: \r\nVisual Studio 2019 16.3 Preview 3\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Open a solution that has a project with 4 different 'Logger' types.\r\n2. Ctrl+Q and search for 'Logger'\r\n\r\n**Expected Behavior**:\r\nAll four 'Loggers' show up and are distinguishable.\r\n\r\n**Actual Behavior**:\r\nThere are 4 identical 'Logger' class entries.\r\n\r\n![image](https://user-images.githubusercontent.com/5387680/64984626-19adb380-d878-11e9-98d2-6dc60b4ad34c.png)\r\n\r\nSome ways address this:\r\n\r\n- Add namespace to the information shown\r\n- Add part of the directory in addition to the file name\r\n- Migrate preview experience from 'GoTo'.\r\n\r\nThis will probably require PM input to solve.\r\n\r\n**cc:** @mikadumont migrated from: https://devdiv.visualstudio.com/DevDiv/_workitems/edit/972547","Url":"https://github.com/dotnet/roslyn/issues/38706","RelatedDescription":"Open issue \"VS Search should disambiguate types with more information\" (#38706)"},{"Id":"494176896","IsPullRequest":false,"CreatedAt":"2019-09-16T17:19:56","Actor":"jnm2","Number":"38705","RawContent":null,"Title":"Editorconfig naming convention for tuple element names","State":"open","Body":"Now that we have settled on the guidance of pascal case for tuple element names (https://github.com/dotnet/corefx/pull/35595, https://github.com/dotnet/corefx/issues/33553), it would be nice to have a `tuple_element` symbol kind to which a naming convention can be applied.\r\n\r\nhttps://docs.microsoft.com/en-us/visualstudio/ide/editorconfig-naming-conventions?view=vs-2019#kinds-of-symbols","Url":"https://github.com/dotnet/roslyn/issues/38705","RelatedDescription":"Open issue \"Editorconfig naming convention for tuple element names\" (#38705)"},{"Id":"493616666","IsPullRequest":true,"CreatedAt":"2019-09-16T17:16:19","Actor":"dotnet-maestro[bot]","Number":"38696","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:567feadf-e495-4ebb-cee4-08d67668456c)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190913.3\r\n- **Date Produced**: 9/13/2019 11:47 PM\r\n- **Commit**: 7b731032220c21a3ed0021c72757b1f3122579b2\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19463.3\r\n\r\n[marker]: <> (End:567feadf-e495-4ebb-cee4-08d67668456c)\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/roslyn/pull/38696","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#38696)"},{"Id":"494153593","IsPullRequest":false,"CreatedAt":"2019-09-16T16:27:56","Actor":"Konard","Number":"38702","RawContent":null,"Title":"The compiler produces code with useless redundant instructions for `(X, Y) = (x, y)`","State":"open","Body":"**Version Used**: Visual Studio 2019 (16.2.5), dotnet SDK v2.2.402\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. `dotnet new console`\r\n2. Create `Point.cs` file with `Point` class from [documentation](https://docs.microsoft.com/en-us/dotnet/csharp/tuples#deconstruction)\r\n3. `dotnet build -c Release`\r\n4. Open the compiled DLL in the ILSpy and inspect `Point` class constructor.\r\n\r\n**Expected Behavior**: The compiler will produce short and efficient code\r\n\r\n**Actual Behavior**: The compiler produces code with useless redundant instructions\r\n\r\nThe code of example from documentation:\r\n```\r\npublic class Point\r\n{\r\n    public int X { get; set; }\r\n    public int Y { get; set; }\r\n\r\n    public Point(int x, int y) => (X, Y) = (x, y);\r\n}\r\n```\r\n\r\nThe constructor compiles to:\r\n```\r\n.method public hidebysig specialname rtspecialname \r\n\tinstance void .ctor (\r\n\t\tint32 x,\r\n\t\tint32 y\r\n\t) cil managed \r\n{\r\n\t// Method begins at RVA 0x2074\r\n\t// Code size 29 (0x1d)\r\n\t.maxstack 3\r\n\t.locals init (\r\n\t\t[0] int32,\r\n\t\t[1] int32,\r\n\t\t[2] int32\r\n\t)\r\n\r\n\tIL_0000: ldarg.0\r\n\tIL_0001: call instance void [System.Runtime]System.Object::.ctor()\r\n\tIL_0006: ldarg.1\r\n\tIL_0007: stloc.0\r\n\tIL_0008: ldarg.2\r\n\tIL_0009: stloc.1\r\n\tIL_000a: ldarg.0\r\n\tIL_000b: ldloc.0\r\n\tIL_000c: dup\r\n\tIL_000d: stloc.2\r\n\tIL_000e: call instance void RoslynBug.Point::set_X(int32)\r\n\tIL_0013: ldarg.0\r\n\tIL_0014: ldloc.1\r\n\tIL_0015: dup\r\n\tIL_0016: stloc.2\r\n\tIL_0017: call instance void RoslynBug.Point::set_Y(int32)\r\n\tIL_001c: ret\r\n} // end of method Point::.ctor\r\n```\r\nThis is equivalent of:\r\n```\r\npublic Point(int x, int y)\r\n{\r\n\tint num2 = X = x;\r\n\tnum2 = (Y = y);\r\n}\r\n```\r\n\r\nBut I was expected to get a result similar to this:\r\n```\r\npublic Point(int x, int y)\r\n{\r\n    X = x;\r\n    Y = y;\r\n}\r\n```\r\nWhich compiles to a shorter (and I assume more efficient code):\r\n```\r\n.method public hidebysig specialname rtspecialname \r\n\tinstance void .ctor (\r\n\t\tint32 x,\r\n\t\tint32 y\r\n\t) cil managed \r\n{\r\n\t// Method begins at RVA 0x2072\r\n\t// Code size 21 (0x15)\r\n\t.maxstack 8\r\n\r\n\tIL_0000: ldarg.0\r\n\tIL_0001: call instance void [System.Runtime]System.Object::.ctor()\r\n\tIL_0006: ldarg.0\r\n\tIL_0007: ldarg.1\r\n\tIL_0008: call instance void RoslynBug.Point::set_X(int32)\r\n\tIL_000d: ldarg.0\r\n\tIL_000e: ldarg.2\r\n\tIL_000f: call instance void RoslynBug.Point::set_Y(int32)\r\n\tIL_0014: ret\r\n} // end of method Point::.ctor\r\n```\r\n\r\nThe complete example is here: https://github.com/Konard/RoslynBug\r\n","Url":"https://github.com/dotnet/roslyn/issues/38702","RelatedDescription":"Open issue \"The compiler produces code with useless redundant instructions for `(X, Y) = (x, y)`\" (#38702)"},{"Id":"494009768","IsPullRequest":false,"CreatedAt":"2019-09-16T12:09:21","Actor":"cremor","Number":"38701","RawContent":null,"Title":"Debugger* attributes are not applied to compiler generated classes for lambdas","State":"open","Body":"**Version Used**: The one shipped with VS 16.2.5\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Create a console application with the following code:\r\n``` cs\r\nusing System;\r\nusing System.Diagnostics;\r\n\r\nnamespace ConsoleApp1\r\n{\r\n    class Program\r\n    {\r\n        static void Main()\r\n        {\r\n            var test = new TestedClass();\r\n\r\n            // Single step into these calls\r\n            test.TestLambdaWithoutCapture();\r\n            test.TestLambdaWithCapture();\r\n        }\r\n\r\n        public static void Output(string text)\r\n        {\r\n            // Break here and inspect the call stack\r\n            Console.WriteLine(text);\r\n        }\r\n    }\r\n\r\n    [DebuggerStepThrough]\r\n    class TestedClass\r\n    {\r\n        public void TestLambdaWithoutCapture()\r\n        {\r\n            Action action = () => Program.Output(\"Test\");\r\n            action();\r\n        }\r\n\r\n        public void TestLambdaWithCapture()\r\n        {\r\n            string text = \"Test\";\r\n            Action action = () => Program.Output(text);\r\n            action();\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n2. Place breakpoints at the commented lines.\r\n3. Step into the method calls in `Main`.\r\n4. For each call, inspect the call stack once the breakpoint in the `Output` method is hit.\r\n\r\n**Expected Behavior**:\r\n\r\n- Single stepping into the methods should put the execution pointer directly to the `Output` method.\r\n- Inspecting the call stack in the `Output` method should not show any method of the `TestedClass`.\r\n\r\n**Actual Behavior**:\r\n\r\n- Single stepping into the methods puts the exectuion pointer inside the lambda expressions.\r\n- Inspecting the call stack in the `Output` method shows a method with \"AnonymousMethod\" in its name.\r\n\r\n**Additional Information**:\r\n\r\n- I've added both a test with and without capture variables because the compiler before Roslyn generated static methods (which would not show the bug) for the non-capture case. Although Roslyn doesn't do this right now, I added the case to be sure.\r\n- If you apply the \"IDE0039 Use local function\" refactorings that are shown for the example code, the tests work fine (because static methods are generated for the local functions, instead of the classes that are generated for lambdas).\r\n- I think all three attributes (`DebuggerStepThroughAttribute`, `DebuggerHiddenAttribute` and `DebuggerNonUserCodeAttribute`) should be propagated to the generated class. And it should propagate from attributes applied to the method as well as attributes applied to the class.\r\n- Similar to #4521","Url":"https://github.com/dotnet/roslyn/issues/38701","RelatedDescription":"Open issue \"Debugger* attributes are not applied to compiler generated classes for lambdas\" (#38701)"},{"Id":"493811636","IsPullRequest":false,"CreatedAt":"2019-09-16T01:19:23","Actor":"drewnoakes","Number":"38700","RawContent":null,"Title":"\"Go to base\" on override says \"The symbol has no base\"","State":"open","Body":"**Version Used**: Version 16.4.0 Preview 2.0 [29315.5.master]\r\n\r\n**Steps to Reproduce**:\r\n\r\n```c#\r\nclass F\r\n{\r\n    public override string ToString() // caret on ToString here\r\n    {\r\n        return base.ToString();\r\n    }\r\n}\r\n```\r\n\r\nWith the caret on `ToString` in the method signature, invoke \"Go to base\". \r\n\r\n**Expected Behavior**:\r\n\r\nDoes the same as \"Go to definition\" on `base.ToString()` call (i.e. MAS).\r\n\r\n**Actual Behavior**:\r\n\r\nDialog appears saying:\r\n\r\n> The symbol has no base.","Url":"https://github.com/dotnet/roslyn/issues/38700","RelatedDescription":"Open issue \"\"Go to base\" on override says \"The symbol has no base\"\" (#38700)"},{"Id":"493678642","IsPullRequest":true,"CreatedAt":"2019-09-15T01:30:06","Actor":"dotnet-bot","Number":"38699","RawContent":null,"Title":"Merge master to master-vs-deps","State":"closed","Body":"\nThis is an automatically generated pull request from master into master-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-master-vs-deps\ngit reset --hard upstream/master-vs-deps\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-master-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/38699","RelatedDescription":"Closed or merged PR \"Merge master to master-vs-deps\" (#38699)"},{"Id":"493664740","IsPullRequest":true,"CreatedAt":"2019-09-14T20:43:35","Actor":"sharwell","Number":"38698","RawContent":null,"Title":"Make sure the NuGet package download complete notification is not cancelled","State":"open","Body":"Cancelling the notification would result in a background task permanently appearing in the Task Status Center in Visual Studio.\r\n\r\n🔗 See https://developercommunity.visualstudio.com/content/problem/576978/%E6%AD%A3%E5%9C%A8%E4%B8%8B%E8%BD%BD%E7%94%A8%E4%BA%8Enugetorg%E7%9A%84intellisense-index.html","Url":"https://github.com/dotnet/roslyn/pull/38698","RelatedDescription":"Open PR \"Make sure the NuGet package download complete notification is not cancelled\" (#38698)"},{"Id":"493662809","IsPullRequest":false,"CreatedAt":"2019-09-14T20:22:31","Actor":"spottedmahn","Number":"38697","RawContent":null,"Title":"Broken Links on Building Testing and Debugging Wiki Page","State":"open","Body":"On https://github.com/dotnet/roslyn/wiki/Building-Testing-and-Debugging the following links are broken:\r\n\r\n![image](https://user-images.githubusercontent.com/14079228/64913314-9e2ef380-d70b-11e9-8d9c-7f5d5a554008.png)\r\n\r\nHappy to submit a PR to fix but I don't know where they're supposed to point to 😀\r\n","Url":"https://github.com/dotnet/roslyn/issues/38697","RelatedDescription":"Open issue \"Broken Links on Building Testing and Debugging Wiki Page\" (#38697)"},{"Id":"493560087","IsPullRequest":true,"CreatedAt":"2019-09-14T00:20:50","Actor":"dibarbet","Number":"38695","RawContent":null,"Title":"Fix possible null ptr in brace completion if semantic model is not av…","State":"open","Body":"…ailable.\r\n\r\nhttps://devdiv.visualstudio.com/DevDiv/_workitems/edit/982486","Url":"https://github.com/dotnet/roslyn/pull/38695","RelatedDescription":"Open PR \"Fix possible null ptr in brace completion if semantic model is not av…\" (#38695)"},{"Id":"493555598","IsPullRequest":false,"CreatedAt":"2019-09-13T23:50:37","Actor":"dibarbet","Number":"38694","RawContent":null,"Title":"Nullable annotation changes not considered top level edit","State":"open","Body":"**Version Used**: 16.4 P1 (29312.127 master)\r\n\r\n**Steps to Reproduce**:\r\nCreate two files in a .net core 3 project\r\nClass1.cs\r\n```cs\r\nnamespace ConsoleApp12\r\n{\r\n    class Class1\r\n    {\r\n        public static void SomeMethod(string someString)\r\n        {\r\n\r\n        }\r\n    }\r\n}\r\n```\r\nProgram.cs\r\n```cs\r\n#nullable enable\r\n\r\nnamespace ConsoleApp12\r\n{\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            string? someString = null;\r\n            Class1.SomeMethod(someString);\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nAdd `#nullable enable` to Class1.cs\r\nGo back to Program.cs and note that there is no warning on calling Class1.SomeMethod(someString) may be null.\r\n\r\nMake an edit to anywhere in Program.cs and note that the warning appears after the edit.\r\n\r\n**Expected Behavior**:\r\nThe warning should appear without needing to make an edit in Program.cs\r\n\r\nThrough debugging, it appears that the nullable edit is [not being considered a top level edit](http://source.roslyn.io/#Microsoft.CodeAnalysis.Workspaces/Workspace/Solution/DocumentState.cs,283).  Since the nullable annotation is trivia, `SyntaxTree.IsEquivalentTo` is returning that the trees are equivalent.\r\n","Url":"https://github.com/dotnet/roslyn/issues/38694","RelatedDescription":"Open issue \"Nullable annotation changes not considered top level edit\" (#38694)"},{"Id":"493555499","IsPullRequest":true,"CreatedAt":"2019-09-13T23:49:51","Actor":"gafter","Number":"38693","RawContent":null,"Title":"Use SHA256 (default source hash) for hashing privateimplementationdefails and MVID","State":"open","Body":"Satoshi would be proud.\r\nFixes #24737\r\n","Url":"https://github.com/dotnet/roslyn/pull/38693","RelatedDescription":"Open PR \"Use SHA256 (default source hash) for hashing privateimplementationdefails and MVID\" (#38693)"}],"ResultType":"GitHubIssue"},"CoreRT-Issues":{"Issues":[{"Id":"494273259","IsPullRequest":true,"CreatedAt":"2019-09-16T23:13:23","Actor":"Dotnet-GitSync-Bot","Number":"7793","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @tarekgh @stephentoub","Url":"https://github.com/dotnet/corert/pull/7793","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7793)"},{"Id":"493430075","IsPullRequest":false,"CreatedAt":"2019-09-16T15:38:33","Actor":"RalfKornmannEnvision","Number":"7790","RawContent":null,"Title":"GC on ARM64 based \"kind of unix\" system","State":"closed","Body":"I am sorry to bother again. After fixing some more minor issues and brush up my ARM64 assembler knowledge I was finally able to run a simple hello world on my ARM64 system without crashing. Doing things like writing to the log (the system doesn't have a text based console at all), Thread.Sleep, Environment.TickCount, printing the command line arguments etc works fine. But than I made the \"mistake\" to trigger the GC. \r\n\r\nTo make a long story short after some more debugging I noticed that the unwind of the stack does not work. The reason was pretty obvious. Libunwind doesn't have any information about the function were the stack walk should be started. I am aware that there are some parts missing for ARM64 targets that I need to fill but there is one question I was not able to answer so far. Does the GC only need unwind information for the managed code part? Or do I need to provide information for the C/C++ parts and even the dynamic libs of the OS? I am aware that libunwind can fetch these information by it's own. Unfortunately the function that it uses for this is not supported by the OS my system is using.  I may be able to get the unwind sections from the runtime C/C++ code.\r\n\r\n","Url":"https://github.com/dotnet/corert/issues/7790","RelatedDescription":"Closed issue \"GC on ARM64 based \"kind of unix\" system\" (#7790)"},{"Id":"493684541","IsPullRequest":true,"CreatedAt":"2019-09-15T07:35:11","Actor":"Dotnet-GitSync-Bot","Number":"7792","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub","Url":"https://github.com/dotnet/corert/pull/7792","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7792)"},{"Id":"493500562","IsPullRequest":true,"CreatedAt":"2019-09-14T14:02:26","Actor":"MichalStrehovsky","Number":"7791","RawContent":null,"Title":"Fix casting to pointers","State":"closed","Body":"Porting a fix made for .NET Native.\r\n\r\nA popular game engine has a `castclass void*` IL instruction in one of the generated files it ships with. This construct is weird enough that it crashes the .NET Native compiler. It doesn't crash the CoreRT compiler, but we still want the runtime side of the fix.","Url":"https://github.com/dotnet/corert/pull/7791","RelatedDescription":"Closed or merged PR \"Fix casting to pointers\" (#7791)"},{"Id":"492984849","IsPullRequest":true,"CreatedAt":"2019-09-13T13:52:21","Actor":"Dotnet-GitSync-Bot","Number":"7789","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @NextTurn","Url":"https://github.com/dotnet/corert/pull/7789","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7789)"},{"Id":"489459547","IsPullRequest":true,"CreatedAt":"2019-09-12T19:12:20","Actor":"cshung","Number":"7775","RawContent":null,"Title":"[WIP] Complete the filtering for MethodImpl.AggressiveOptimization","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/7775","RelatedDescription":"Closed or merged PR \"[WIP] Complete the filtering for MethodImpl.AggressiveOptimization\" (#7775)"},{"Id":"492918947","IsPullRequest":true,"CreatedAt":"2019-09-12T19:11:42","Actor":"Dotnet-GitSync-Bot","Number":"7788","RawContent":null,"Title":"Mirror changes from dotnet/corefx,coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/corefx,coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub @TylerBrinkley @tarekgh @obligaron @marek-safar @jkotas @sywhang","Url":"https://github.com/dotnet/corert/pull/7788","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corefx,coreclr\" (#7788)"},{"Id":"491162081","IsPullRequest":true,"CreatedAt":"2019-09-11T00:16:26","Actor":"Dotnet-GitSync-Bot","Number":"7786","RawContent":null,"Title":"Mirror changes from dotnet/coreclr,corefx","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr,corefx\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub","Url":"https://github.com/dotnet/corert/pull/7786","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr,corefx\" (#7786)"},{"Id":"490571600","IsPullRequest":true,"CreatedAt":"2019-09-09T17:52:58","Actor":"davidwrighton","Number":"7779","RawContent":null,"Title":"Resource writing","State":"closed","Body":"- Refactor the win32 resource reading code to use more natural managed data structures\r\n- Build a Win32 resource emitter on top of refactored data structures\r\n- Replace resource section copy logic with new node to generate win32 resources","Url":"https://github.com/dotnet/corert/pull/7779","RelatedDescription":"Closed or merged PR \"Resource writing\" (#7779)"},{"Id":"491229182","IsPullRequest":false,"CreatedAt":"2019-09-09T17:33:38","Actor":"RalfKornmannEnvision","Number":"7787","RawContent":null,"Title":"finally funclets brocken for ARM64!?","State":"open","Body":"I am not sure if this is a corert or coreclr issue but as I am working on a corert port for an custom ARM64 system I start with posting it here.\r\n\r\nAfter adding code to the objectwriter and the ilcompiler I managed to get a simple hello world app running to the main method. But it than crashed during the shutdown. After some debugging i figured out that the static constructors are never called. After some more debugging I noticed that ClassConstructorRunner.GetCctor corrupts the stack frame,\r\n\r\nIt happens at the end of the method in an assembler block that i believe is the finally funclet for the using. It looks like this\r\n\r\n  28667c: a9be7bfd stp x29, x30, [sp, #-32]!\r\n  286680: f90013f3 str x19, [sp, #32]\r\n  286684: 9103a3a0 add x0, x29, #0xe8\r\n  286688: 97fc0d42 bl 189b90 <S_P_CoreLib_System_Threading_LockHolder__Dispose>\r\n  28668c: d503201f nop\r\n  286690: d503201f nop\r\n  286694: f94013f3 ldr x19, [sp, #32]\r\n  286698: a8c27bfd ldp x29, x30, [sp], #32\r\n  28669c: d65f03c0 ret\r\n\r\nThe fact that x19 is stored with an offset of 32 looks strange for me and it overwrites the already stored data. Based on other stackframes I would expect an offset of 16 here. Or the new stackframe for the funclet needs to be 16 bytes larger.\r\n\r\nDisclaimer: As the development system for the custom ARM64 system runs on windows I although use a ARM64 jit that is build to run on X64. Very simular to the protonojit but not as alt jit to get all the data needed to write the arm64 elf file that the linker for the custom ARM64 system needs. Unfortunately I don't have an ARM64 windows or linux system to check if a non cross jit generates the same code.\r\n\r\nI assume there is no ready to use jit for my use case and I need to build it anyway. In this case I could properly fix the issue but I would need a hint how the code is expected to look like.  ","Url":"https://github.com/dotnet/corert/issues/7787","RelatedDescription":"Open issue \"finally funclets brocken for ARM64!?\" (#7787)"},{"Id":"490799316","IsPullRequest":true,"CreatedAt":"2019-09-08T23:57:41","Actor":"MichalStrehovsky","Number":"7785","RawContent":null,"Title":"Mark unsafe intrinsics as reflection blocked","State":"closed","Body":"Keeping these reflection enabled pulls in quite a bit of junk (generic dictionaries, standalone method bodies, bookkeeping) that adds up to 1.5% of the size of Hello World...","Url":"https://github.com/dotnet/corert/pull/7785","RelatedDescription":"Closed or merged PR \"Mark unsafe intrinsics as reflection blocked\" (#7785)"},{"Id":"490775070","IsPullRequest":false,"CreatedAt":"2019-09-08T21:11:53","Actor":"mrzaxaryan","Number":"7784","RawContent":null,"Title":"Non-trivial marshalling is not yet supported by this compiler.","State":"closed","Body":"Can't save image to MemoryStream \r\n.NET Core v3.0.0-preview9\r\nVisual Studio 16.3.0 Preview 3.0\r\nException: `System.Exception: Method '[System.Drawing.Common]System.Drawing.SafeNativeMethods+Gdip.GdipSaveImageToStream(HandleRef,IStream,Guid&,HandleRef)' requires non-trivial marshalling that is not yet supported by this compiler.\r\n   at System.Drawing.SafeNativeMethods.Gdip.GdipSaveImageToStream(HandleRef, Interop.Ole32.IStream, Guid&, HandleRef) + 0x39\r\n   at System.Drawing.Image.Save(Stream, ImageCodecInfo, EncoderParameters) + 0x1af`\r\n","Url":"https://github.com/dotnet/corert/issues/7784","RelatedDescription":"Closed issue \"Non-trivial marshalling is not yet supported by this compiler.\" (#7784)"},{"Id":"490757817","IsPullRequest":true,"CreatedAt":"2019-09-08T20:09:59","Actor":"MichalStrehovsky","Number":"7782","RawContent":null,"Title":"Port GC changes from CoreCLR","State":"closed","Body":"Ports https://github.com/dotnet/coreclr/commit/cd42ee8fe410f71026467ad2e90116115b85f68d\r\nPorts https://github.com/dotnet/coreclr/commit/740752c9d206a465e96a4d01e7dafb6adb6ded63","Url":"https://github.com/dotnet/corert/pull/7782","RelatedDescription":"Closed or merged PR \"Port GC changes from CoreCLR\" (#7782)"},{"Id":"490760342","IsPullRequest":true,"CreatedAt":"2019-09-08T20:08:39","Actor":"MichalStrehovsky","Number":"7783","RawContent":null,"Title":"Update CoreFX","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/7783","RelatedDescription":"Closed or merged PR \"Update CoreFX\" (#7783)"},{"Id":"490704961","IsPullRequest":true,"CreatedAt":"2019-09-08T05:12:25","Actor":"Dotnet-GitSync-Bot","Number":"7781","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub","Url":"https://github.com/dotnet/corert/pull/7781","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7781)"},{"Id":"490412146","IsPullRequest":true,"CreatedAt":"2019-09-08T00:46:12","Actor":"trylek","Number":"7777","RawContent":null,"Title":"Output raw test lists for the individual outcomes from SuperIlc","State":"closed","Body":"This change tweaks SuperIlc to emit simple line-oriented test lists\r\nfor the various compilation and execution outcomes. I found this\r\nquite useful for comparing various runs. I have also deleted a bit\r\nof dead code I noticed.\r\n\r\nThanks\r\n\r\nTomas","Url":"https://github.com/dotnet/corert/pull/7777","RelatedDescription":"Closed or merged PR \"Output raw test lists for the individual outcomes from SuperIlc\" (#7777)"},{"Id":"490662770","IsPullRequest":false,"CreatedAt":"2019-09-07T17:55:27","Actor":"nexon33","Number":"7780","RawContent":null,"Title":"Implement GetInterfaceMap","State":"open","Body":"I want to be able to render a view in asp.net core, I need the controller inheritance to be able to call View();\r\nIs there any simple way of doing this or should I forget about it for now?","Url":"https://github.com/dotnet/corert/issues/7780","RelatedDescription":"Open issue \"Implement GetInterfaceMap\" (#7780)"},{"Id":"490072419","IsPullRequest":true,"CreatedAt":"2019-09-06T23:34:35","Actor":"davidwrighton","Number":"7776","RawContent":null,"Title":"Partial compilation and generic ibc processing","State":"closed","Body":"- Support for partial compilation\r\n- Support for parsing generics in IBC data\r\n - Bonus feature of searching referenced and input assemblies for types if the module in the IBC data is invalid","Url":"https://github.com/dotnet/corert/pull/7776","RelatedDescription":"Closed or merged PR \"Partial compilation and generic ibc processing\" (#7776)"},{"Id":"490437186","IsPullRequest":true,"CreatedAt":"2019-09-06T22:57:58","Actor":"Dotnet-GitSync-Bot","Number":"7778","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub","Url":"https://github.com/dotnet/corert/pull/7778","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7778)"},{"Id":"489360143","IsPullRequest":true,"CreatedAt":"2019-09-05T19:38:18","Actor":"fadimounir","Number":"7772","RawContent":null,"Title":"Compile cross-module generics in the same version bubble.","State":"closed","Body":"This work is related to the single-exe prototype, but after discussing with @davidwrighton, these are changes that we can have in master as well.\r\n\r\nCompiling generics from external modules in the version bubble is enabled using a command line switch.\r\n\r\nOther changes: Changing signatures in hashtable of instantiations to include owning type as a way of encoding the module override info\r\n","Url":"https://github.com/dotnet/corert/pull/7772","RelatedDescription":"Closed or merged PR \"Compile cross-module generics in the same version bubble.\" (#7772)"},{"Id":"489380977","IsPullRequest":true,"CreatedAt":"2019-09-05T14:33:56","Actor":"MichalStrehovsky","Number":"7773","RawContent":null,"Title":"Get jitwrapper building on x86","State":"closed","Body":"CoreCLR repo is going to build it that way. I could exclude that outside x64, but it's just better to fix it...","Url":"https://github.com/dotnet/corert/pull/7773","RelatedDescription":"Closed or merged PR \"Get jitwrapper building on x86\" (#7773)"},{"Id":"488748576","IsPullRequest":true,"CreatedAt":"2019-09-05T13:42:32","Actor":"janvorli","Number":"7767","RawContent":null,"Title":"Implement SystemV AMD64 ABI struct classification","State":"closed","Body":"This change implements SystemV AMD64 ABI struct classification necessary\r\nfor correct passing of function arguments of struct types and returning\r\nthese by value on Unix AMD64.\r\n\r\nThis change is a port of the CoreCLR version with necessary changes to reflect differences in the type system interface between CoreRT and CoreCLR. I have also added caching of the classification result as JIT calls classification for the same type many times.","Url":"https://github.com/dotnet/corert/pull/7767","RelatedDescription":"Closed or merged PR \"Implement SystemV AMD64 ABI struct classification\" (#7767)"},{"Id":"489406467","IsPullRequest":true,"CreatedAt":"2019-09-04T23:16:31","Actor":"Dotnet-GitSync-Bot","Number":"7774","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub @NextTurn","Url":"https://github.com/dotnet/corert/pull/7774","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7774)"},{"Id":"488925681","IsPullRequest":true,"CreatedAt":"2019-09-04T16:39:39","Actor":"Dotnet-GitSync-Bot","Number":"7771","RawContent":null,"Title":"Mirror changes from dotnet/corefx","State":"closed","Body":"This PR contains mirrored changes from dotnet/corefx\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub","Url":"https://github.com/dotnet/corert/pull/7771","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corefx\" (#7771)"},{"Id":"488893657","IsPullRequest":true,"CreatedAt":"2019-09-04T02:16:33","Actor":"Dotnet-GitSync-Bot","Number":"7770","RawContent":null,"Title":"Mirror changes from dotnet/corefx","State":"closed","Body":"This PR contains mirrored changes from dotnet/corefx\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub","Url":"https://github.com/dotnet/corert/pull/7770","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corefx\" (#7770)"},{"Id":"488826953","IsPullRequest":true,"CreatedAt":"2019-09-04T01:18:56","Actor":"Dotnet-GitSync-Bot","Number":"7769","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @jkotas @stephentoub","Url":"https://github.com/dotnet/corert/pull/7769","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7769)"},{"Id":"488782037","IsPullRequest":true,"CreatedAt":"2019-09-03T21:33:47","Actor":"trylek","Number":"7768","RawContent":null,"Title":"Minor triage improvement in SuperIlc","State":"closed","Body":"For tests with unhandled runtime exceptions, we can improve SuperIlc\r\ntriage by using the exception as the triage string instead of just\r\nreporting a non-zero exit code. Part of the logic already existed\r\nbut it apparently had a typo in the exception message check due to\r\nwhich it failed to kick in.\r\n\r\nThanks\r\n\r\nTomas","Url":"https://github.com/dotnet/corert/pull/7768","RelatedDescription":"Closed or merged PR \"Minor triage improvement in SuperIlc\" (#7768)"},{"Id":"488681079","IsPullRequest":true,"CreatedAt":"2019-09-03T20:23:38","Actor":"MichalStrehovsky","Number":"7765","RawContent":null,"Title":"Delete unused file","State":"closed","Body":"Noticed when auditing the CPAOT copy scripts.","Url":"https://github.com/dotnet/corert/pull/7765","RelatedDescription":"Closed or merged PR \"Delete unused file\" (#7765)"},{"Id":"488732123","IsPullRequest":true,"CreatedAt":"2019-09-03T19:16:49","Actor":"trylek","Number":"7766","RawContent":null,"Title":"Update RyuJIT","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/7766","RelatedDescription":"Closed or merged PR \"Update RyuJIT\" (#7766)"},{"Id":"488341349","IsPullRequest":true,"CreatedAt":"2019-09-03T00:07:22","Actor":"yowl","Number":"7764","RawContent":null,"Title":"[WIP]: Wasm: fix more occurrences of loading Sbytes into int32 without sign extending.","State":"open","Body":"While #7763 was fine as far as it went, it didn't actually catch all problems with loading sbyte on to the stack, namely binary operations, shifting and branching.   This add a few more tests for those and fixes the sign extending","Url":"https://github.com/dotnet/corert/pull/7764","RelatedDescription":"Open PR \"[WIP]: Wasm: fix more occurrences of loading Sbytes into int32 without sign extending.\" (#7764)"}],"ResultType":"GitHubIssue"},"SDK-Issues":{"Issues":[{"Id":"491334955","IsPullRequest":false,"CreatedAt":"2019-09-16T22:37:53","Actor":"wli3","Number":"3620","RawContent":null,"Title":"Decide which property for VC targets to set architecture","State":"closed","Body":"should be RuntimeIdentifier with SelfContained to false need to verify. However, we have several places use Platform(win32 in C++) and platformtarget mismatch could cause trouble, still investigating\r\n\r\nwhen run \r\n`msbuild NETCoreCppCliTest.vcxproj /p:platformtarget=win32 /p:runtimeidentifier=win-x86`\r\n\r\nIt will fail with \r\n```\r\nC:\\work\\sdk\\artifacts\\bin\\Debug\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.RuntimeIdentifierInference.targets(149,5): error NETSDK1032: The RuntimeIdentifier pla tform 'win-x86' and the PlatformTarget 'win32' must be compatible. [C:\\work\\NETCoreCppCliTest\\NETCoreCppCliTest\\NETCoreCppCliTest.vcxproj]\r\n```","Url":"https://github.com/dotnet/sdk/issues/3620","RelatedDescription":"Closed issue \"Decide which property for VC targets to set architecture\" (#3620)"},{"Id":"491335766","IsPullRequest":false,"CreatedAt":"2019-09-16T22:36:57","Actor":"wli3","Number":"3621","RawContent":null,"Title":"Disable deps.json generation for C++ library","State":"closed","Body":"PR: https://github.com/dotnet/sdk/pull/3601","Url":"https://github.com/dotnet/sdk/issues/3621","RelatedDescription":"Closed issue \"Disable deps.json generation for C++ library\" (#3621)"},{"Id":"491336183","IsPullRequest":false,"CreatedAt":"2019-09-16T22:36:56","Actor":"wli3","Number":"3622","RawContent":null,"Title":"Block single C++ library Publish and Pack","State":"closed","Body":"PR: https://github.com/dotnet/sdk/issues/3619","Url":"https://github.com/dotnet/sdk/issues/3622","RelatedDescription":"Closed issue \"Block single C++ library Publish and Pack\" (#3622)"},{"Id":"493792608","IsPullRequest":false,"CreatedAt":"2019-09-16T22:11:30","Actor":"wli3","Number":"3647","RawContent":null,"Title":"[Investigate] Setting Runtimeidentifier in C++ props and target might not be needed","State":"closed","Body":"It works today without setting it. Need to understand how we derive the RID. And ensure it is ok not setting it","Url":"https://github.com/dotnet/sdk/issues/3647","RelatedDescription":"Closed issue \"[Investigate] Setting Runtimeidentifier in C++ props and target might not be needed\" (#3647)"},{"Id":"494301303","IsPullRequest":false,"CreatedAt":"2019-09-16T22:10:23","Actor":"wli3","Number":"3649","RawContent":null,"Title":"Add DefaultAppHostRuntimeIdentifier support for ARM and ARM64","State":"open","Body":"https://github.com/dotnet/sdk/blob/fe6b50c78426124e34e56ecb7df8b6b86e6e0b48/src/Tasks/Microsoft.NET.Build.Tasks/targets/Microsoft.NET.RuntimeIdentifierInference.targets#L118\r\n\r\ndoes not consider ARM and ARM64","Url":"https://github.com/dotnet/sdk/issues/3649","RelatedDescription":"Open issue \"Add DefaultAppHostRuntimeIdentifier support for ARM and ARM64\" (#3649)"},{"Id":"493793478","IsPullRequest":false,"CreatedAt":"2019-09-15T22:22:04","Actor":"wli3","Number":"3648","RawContent":null,"Title":"[Investigate] Test the build of c# -> C++ -> C# works or not","State":"open","Body":"","Url":"https://github.com/dotnet/sdk/issues/3648","RelatedDescription":"Open issue \"[Investigate] Test the build of c# -> C++ -> C# works or not\" (#3648)"},{"Id":"493678850","IsPullRequest":true,"CreatedAt":"2019-09-15T00:05:26","Actor":"dotnet-bot","Number":"3646","RawContent":null,"Title":"Merge release/3.0.100-preview9 to release/3.0.1xx","State":"open","Body":"\nThis is an automatically generated pull request from release/3.0.100-preview9 into release/3.0.1xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/3.0.100-preview9-to-release/3.0.1xx\ngit reset --hard upstream/release/3.0.1xx\ngit merge upstream/release/3.0.100-preview9\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/3.0.100-preview9-to-release/3.0.1xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/3646","RelatedDescription":"Open PR \"Merge release/3.0.100-preview9 to release/3.0.1xx\" (#3646)"},{"Id":"493651275","IsPullRequest":true,"CreatedAt":"2019-09-14T18:13:58","Actor":"lg2de","Number":"3645","RawContent":null,"Title":"do not overwrite \"all warnings as errors\" (fixes #3613)","State":"open","Body":"","Url":"https://github.com/dotnet/sdk/pull/3645","RelatedDescription":"Open PR \"do not overwrite \"all warnings as errors\" (fixes #3613)\" (#3645)"},{"Id":"493446026","IsPullRequest":false,"CreatedAt":"2019-09-14T17:13:03","Actor":"wjk","Number":"3638","RawContent":null,"Title":"Package restore can't find runtime packs when explicit RID specified","State":"closed","Body":"When I try to restore a project that contains one or more RIDs specified in the project file `RuntimeIdentifiers` property, it cannot find a matching version of the following packages:\r\n\r\n* `Microsoft.NETCore.App.Runtime.<rid>`\r\n* `Microsoft.AspNetCore.App.Runtime.<rid>`\r\n* `Microsoft.NETCore.WindowsDesktop.Runtime.<rid>`\r\n\r\nIt says that there are other versions of these packages available on NuGet.org, but no matter what I try I cannot get the package restore to use the versions that actually exist. I've tried numerous SDK versions in the `global.json` file, to no avail. The only way I can get my project to restore (and, therefore, build) is to remove the `RuntimeIdentifiers` property from the csproj file. This can break other parts of my build, so it isn't a good solution overall.\r\n\r\nThis problem started occurring at roughly the time I installed Preview 9/RC 2 of .NET Core 3. Thanks for looking into this for me!","Url":"https://github.com/dotnet/sdk/issues/3638","RelatedDescription":"Closed issue \"Package restore can't find runtime packs when explicit RID specified\" (#3638)"},{"Id":"492784691","IsPullRequest":true,"CreatedAt":"2019-09-14T14:21:35","Actor":"dotnet-maestro[bot]","Number":"3633","RawContent":null,"Title":"[release/3.1.1xx] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:e76888f5-e4f1-4c3d-d4c4-08d7315d8bc7)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190911.7\r\n- **Date Produced**: 9/12/2019 6:45 AM\r\n- **Commit**: 8eb29ba860a3cfcfe68f9a8256caa7efc1f1aaba\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19461.7\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19461.7\r\n\r\n[marker]: <> (End:e76888f5-e4f1-4c3d-d4c4-08d7315d8bc7)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3633","RelatedDescription":"Closed or merged PR \"[release/3.1.1xx] Update dependencies from dotnet/arcade\" (#3633)"},{"Id":"493616381","IsPullRequest":true,"CreatedAt":"2019-09-14T14:18:16","Actor":"dotnet-bot","Number":"3643","RawContent":null,"Title":"Merge release/3.0.100-preview9 to release/3.0.1xx","State":"closed","Body":"\nThis is an automatically generated pull request from release/3.0.100-preview9 into release/3.0.1xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/3.0.100-preview9-to-release/3.0.1xx\ngit reset --hard upstream/release/3.0.1xx\ngit merge upstream/release/3.0.100-preview9\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/3.0.100-preview9-to-release/3.0.1xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/3643","RelatedDescription":"Closed or merged PR \"Merge release/3.0.100-preview9 to release/3.0.1xx\" (#3643)"},{"Id":"493616125","IsPullRequest":true,"CreatedAt":"2019-09-14T13:57:47","Actor":"dotnet-maestro[bot]","Number":"3642","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190913.3\r\n- **Date Produced**: 9/13/2019 11:47 PM\r\n- **Commit**: 7b731032220c21a3ed0021c72757b1f3122579b2\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19463.3\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19463.3\r\n\r\n[marker]: <> (End:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3642","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#3642)"},{"Id":"493616393","IsPullRequest":true,"CreatedAt":"2019-09-14T12:05:32","Actor":"dotnet-bot","Number":"3644","RawContent":null,"Title":"Merge release/3.0.1xx to release/3.1.1xx","State":"open","Body":"\nThis is an automatically generated pull request from release/3.0.1xx into release/3.1.1xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/3.0.1xx-to-release/3.1.1xx\ngit reset --hard upstream/release/3.1.1xx\ngit merge upstream/release/3.0.1xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/3.0.1xx-to-release/3.1.1xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/3644","RelatedDescription":"Open PR \"Merge release/3.0.1xx to release/3.1.1xx\" (#3644)"},{"Id":"493558211","IsPullRequest":true,"CreatedAt":"2019-09-14T01:53:13","Actor":"dotnet-maestro[bot]","Number":"3641","RawContent":null,"Title":"[release/3.0.1xx] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:df8a2755-bec9-40dc-b710-08d7368af630)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190913.1\r\n- **Date Produced**: 9/13/2019 10:50 AM\r\n- **Commit**: 372f44450f51552a8cf725acf705dc477bd8391f\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19463.1\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19463.1\r\n\r\n[marker]: <> (End:df8a2755-bec9-40dc-b710-08d7368af630)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3641","RelatedDescription":"Closed or merged PR \"[release/3.0.1xx] Update dependencies from dotnet/arcade\" (#3641)"},{"Id":"493482678","IsPullRequest":true,"CreatedAt":"2019-09-13T21:28:56","Actor":"dotnet-maestro[bot]","Number":"3640","RawContent":null,"Title":"[release/3.0.1xx] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee7760b1-2875-4869-d002-08d7114cdbad)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190913.05\r\n- **Date Produced**: 9/13/2019 4:13 PM\r\n- **Commit**: 7d57652f33493fa022125b7f63aad0d70c52d810\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.NET.HostModel** -> 3.0.0\r\n\r\n[marker]: <> (End:ee7760b1-2875-4869-d002-08d7114cdbad)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3640","RelatedDescription":"Closed or merged PR \"[release/3.0.1xx] Update dependencies from dotnet/core-setup\" (#3640)"},{"Id":"492915289","IsPullRequest":true,"CreatedAt":"2019-09-13T20:31:36","Actor":"wli3","Number":"3634","RawContent":null,"Title":"Block and tests for C++/CLI support","State":"closed","Body":"Block publishing in single C++ and building exe\r\n\r\nBetter error message for Pack failure\r\n\r\nBlock for EnableComHosting","Url":"https://github.com/dotnet/sdk/pull/3634","RelatedDescription":"Closed or merged PR \"Block and tests for C++/CLI support\" (#3634)"},{"Id":"493472396","IsPullRequest":false,"CreatedAt":"2019-09-13T18:59:57","Actor":"bricelam","Number":"3639","RawContent":null,"Title":"Enable embedded resource DependentUpon convention on .NET Framework","State":"open","Body":"Shouldn't this also be enabled for .NETFramework? Without it, embedded resource names are changing between classic and SDK-style projects. (Originally reported in https://github.com/aspnet/EntityFramework6/issues/1258)\r\n\r\nhttps://github.com/dotnet/sdk/blob/25d8a32f0c357b8e6ccaa39fba27d5c61364e26a/src/Tasks/Microsoft.NET.Build.Tasks/targets/Microsoft.NET.Sdk.targets#L109-L112\r\n\r\ncc @divega @Pilchie @ajcvickers @BenVillalobos","Url":"https://github.com/dotnet/sdk/issues/3639","RelatedDescription":"Open issue \"Enable embedded resource DependentUpon convention on .NET Framework\" (#3639)"},{"Id":"493287815","IsPullRequest":true,"CreatedAt":"2019-09-13T14:28:25","Actor":"dotnet-maestro[bot]","Number":"3637","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190912.5\r\n- **Date Produced**: 9/13/2019 5:59 AM\r\n- **Commit**: 6003ee189f456c92a18b097f226d4927309def27\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19462.5\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19462.5\r\n\r\n[marker]: <> (End:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3637","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#3637)"},{"Id":"492920175","IsPullRequest":true,"CreatedAt":"2019-09-12T22:18:36","Actor":"wli3","Number":"3635","RawContent":null,"Title":"No block on C++/CLI project for assets.json existence","State":"closed","Body":"By overriding PackageDependencyResolution.targets","Url":"https://github.com/dotnet/sdk/pull/3635","RelatedDescription":"Closed or merged PR \"No block on C++/CLI project for assets.json existence\" (#3635)"},{"Id":"493048711","IsPullRequest":false,"CreatedAt":"2019-09-12T21:57:00","Actor":"wli3","Number":"3636","RawContent":null,"Title":"All win apphosts in the installer","State":"open","Body":"pending Core-setup's msis https://github.com/dotnet/core-setup/issues/7846\r\nneed to put it in VS, installer, and archive ","Url":"https://github.com/dotnet/sdk/issues/3636","RelatedDescription":"Open issue \"All win apphosts in the installer\" (#3636)"},{"Id":"492761288","IsPullRequest":true,"CreatedAt":"2019-09-12T14:18:21","Actor":"dotnet-maestro[bot]","Number":"3632","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190911.7\r\n- **Date Produced**: 9/12/2019 6:45 AM\r\n- **Commit**: 8eb29ba860a3cfcfe68f9a8256caa7efc1f1aaba\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19461.7\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19461.7\r\n\r\n[marker]: <> (End:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3632","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#3632)"},{"Id":"492548103","IsPullRequest":false,"CreatedAt":"2019-09-12T02:15:05","Actor":"davkean","Number":"3631","RawContent":null,"Title":"[Component Licensing] SDK needs to make sure that licenses.licx ends up as \"EmbeddedResource\"","State":"open","Body":"**Visual Studio Version**:\r\n\r\n**Summary**:\r\nThe Visual Studio support for Windows Forms licensing was implemented in https://github.com/dotnet/project-system/pull/5468, and works well if you opt out of the globs. VS will automatically add it to EmbeddedResource:\r\n\r\n``` XML\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <OutputType>Exe</OutputType>\r\n    <TargetFramework>net472</TargetFramework>\r\n    <EnableDefaultNoneItems>false</EnableDefaultNoneItems>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <Reference Include=\"C:\\Program Files (x86)\\DevExpress 19.1\\Components\\Bin\\Framework\\*.dll\" />\r\n    <Reference Include=\"System.Windows.Forms\" />\r\n  </ItemGroup>\r\n\r\n  <ItemGroup>\r\n    <EmbeddedResource Include=\"licenses.licx\" />\r\n  </ItemGroup>\r\n\r\n</Project>\r\n\r\n```\r\n\r\nHowever with globs turned on, we don't add a specific item if a glob covers it. Based on that, the SDK needs to cover licenses.licx in EmbeddedResource item.\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Install DevExpress controls: https://www.devexpress.com/subscriptions/new-2019-1.xml\r\n2. Create a project with the following:\r\n\r\n``` XML\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <OutputType>Exe</OutputType>\r\n    <TargetFramework>net472</TargetFramework>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <Reference Include=\"C:\\Program Files (x86)\\DevExpress 19.1\\Components\\Bin\\Framework\\*.dll\" />\r\n    <Reference Include=\"System.Windows.Forms\" />\r\n  </ItemGroup>\r\n\r\n</Project>\r\n```\r\n\r\n3. Add a Form (Windows Forms) to the project\r\n4. Open designer, choose Toolbox -> DX.19.1: Reporting and drag RibbonReportDesigner onto the form\r\n\r\n**Expected Behavior**:\r\nProperties\\licenses.licx gets created and ends up in `EmbeddedResource` item\r\n\r\n**Actual Behavior**:\r\nProperties\\licenses.licx gets created but ends up in `None` item type\r\n\r\n**User Impact**:\r\nLicensed controls don't work at runtime.","Url":"https://github.com/dotnet/sdk/issues/3631","RelatedDescription":"Open issue \"[Component Licensing] SDK needs to make sure that licenses.licx ends up as \"EmbeddedResource\"\" (#3631)"},{"Id":"492212731","IsPullRequest":true,"CreatedAt":"2019-09-11T15:07:04","Actor":"dotnet-maestro[bot]","Number":"3630","RawContent":null,"Title":"[release/3.1.1xx] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:e76888f5-e4f1-4c3d-d4c4-08d7315d8bc7)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190910.3\r\n- **Date Produced**: 9/10/2019 6:11 PM\r\n- **Commit**: 0f5cfb20a355c27bc84cedd049c946b44a7fc1da\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19460.3\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19460.3\r\n\r\n[marker]: <> (End:e76888f5-e4f1-4c3d-d4c4-08d7315d8bc7)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3630","RelatedDescription":"Closed or merged PR \"[release/3.1.1xx] Update dependencies from dotnet/arcade\" (#3630)"},{"Id":"491629059","IsPullRequest":true,"CreatedAt":"2019-09-11T13:30:44","Actor":"dotnet-maestro[bot]","Number":"3628","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190910.3\r\n- **Date Produced**: 9/10/2019 6:11 PM\r\n- **Commit**: 0f5cfb20a355c27bc84cedd049c946b44a7fc1da\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19460.3\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19460.3\r\n\r\n[marker]: <> (End:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3628","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#3628)"},{"Id":"491908541","IsPullRequest":false,"CreatedAt":"2019-09-10T21:30:48","Actor":"heng-liu","Number":"3629","RawContent":null,"Title":"Retarget task in dotnet/sdk to netcoreapp3.0 when ready to insert nuget bits targetinig netstandard2.1","State":"open","Body":"When it's ready to insert nuget bits targeting netstandard2.1,\r\nplease remember to go to the dotnet/SDK repository , change sdk/src/Tasks/Microsoft.NET.Build.Tasks/Microsoft.NET.Build.Tasks.csproj to retarget netcoreapp3.0.\r\n\r\nSo that SDK will resolve the NuGet.Packaging targeting netstandard2.1.","Url":"https://github.com/dotnet/sdk/issues/3629","RelatedDescription":"Open issue \"Retarget task in dotnet/sdk to netcoreapp3.0 when ready to insert nuget bits targetinig netstandard2.1\" (#3629)"},{"Id":"491527970","IsPullRequest":false,"CreatedAt":"2019-09-10T17:47:37","Actor":"Jmales","Number":"3627","RawContent":null,"Title":"New csproj re-generates files forever when Visual Studio is open","State":"closed","Body":"I'm generating some .cs files using **node.exe** before the compilation, which I then include in my project.\r\n\r\nI call **node.exe** and define the steps for the generation via CSProj. After migrating the CSProj to the new format `<Project Sdk=\"Microsoft.NET.Sdk\">` the files are constantly being generated, erased and generated again while Visual Studio is open (tested with VS2017 and VS2019). This doesn't happen if Visual Studio is closed.\r\n\r\nThis is my targets file:\r\n\r\n```\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    ...\r\n  </PropertyGroup>\r\n\r\n   <Target Name=\"SetVariables\">\r\n    <ItemGroup>\r\n      <_NodeJsExe Include=\"$(MSBuildThisFileDirectory)..\\..\\..\\Node.js.redist\\*\\tools\\win-x64\\node.exe\"/>\r\n    </ItemGroup>\r\n    <PropertyGroup>\r\n      <__NodeJsExe>@(_NodeJsExe);</__NodeJsExe>\r\n      <NodeJsExe>$(__NodeJsExe.Substring(0, $(__NodeJsExe.IndexOf(';'))))</NodeJsExe>\r\n    </PropertyGroup>\r\n  </Target>\r\n\r\n   <Target Name=\"ProblemHere\" BeforeTargets=\"TransformDuringBuild;PrepareForBuild;CoreCompile\" DependsOnTargets=\"SetVariables;CleanFilesBeforeBuild\">\r\n    <Exec Command=\"&quot;$(NodeJsExe)&quot...\" />\r\n  </Target>\r\n\r\n  <Target Name=\"CleanFilesBeforeBuild\">\r\n    <ItemGroup>\r\n      <Ts2LangFiles Include=\"$(GeneratedFolder)\\**\\*.cs\" />\r\n    </ItemGroup>\r\n    <Delete Files=\"@(Ts2LangFiles)\"/>\r\n  </Target>\r\n  </Project>\r\n```\r\n\r\n\r\nAnyone knows what the problem is?","Url":"https://github.com/dotnet/sdk/issues/3627","RelatedDescription":"Closed issue \"New csproj re-generates files forever when Visual Studio is open\" (#3627)"},{"Id":"491344969","IsPullRequest":false,"CreatedAt":"2019-09-09T21:52:15","Actor":"wli3","Number":"3626","RawContent":null,"Title":"Block build on TFM lower than netcoreapp3.1","State":"open","Body":"","Url":"https://github.com/dotnet/sdk/issues/3626","RelatedDescription":"Open issue \"Block build on TFM lower than netcoreapp3.1\" (#3626)"},{"Id":"491344771","IsPullRequest":false,"CreatedAt":"2019-09-09T21:51:41","Actor":"wli3","Number":"3625","RawContent":null,"Title":"⬇️ C++ build in VS vs msbuild command line","State":"open","Body":"Confirm the issue is in C++ targets and file a bug.","Url":"https://github.com/dotnet/sdk/issues/3625","RelatedDescription":"Open issue \"⬇️ C++ build in VS vs msbuild command line\" (#3625)"},{"Id":"491344361","IsPullRequest":false,"CreatedAt":"2019-09-09T21:50:29","Actor":"wli3","Number":"3624","RawContent":null,"Title":"⬇️Better error when run dotnet build on a C++ project or C# reference C++ project","State":"open","Body":"","Url":"https://github.com/dotnet/sdk/issues/3624","RelatedDescription":"Open issue \"⬇️Better error when run dotnet build on a C++ project or C# reference C++ project\" (#3624)"},{"Id":"491343846","IsPullRequest":false,"CreatedAt":"2019-09-09T21:49:12","Actor":"wli3","Number":"3623","RawContent":null,"Title":"Figure out build/run of c++/CLI exe","State":"closed","Body":"The following is the result of the investigation. What need to happen to enable it. Currently we don't plan to support it in 3.1.100\r\n\r\n- [exe unique task] Compile the exe entry point as usual but still give it the extension dll. Cpp props need to change https://devdiv.visualstudio.com/DevDiv/_git/VS?path=%2Fsrc%2Fvc%2Fprojbld%2FCppTargets_v150%2FMicrosoft.Cpp.Common.props&version=GBmaster&line=30&lineStyle=plain&lineEnd=31&lineStartColumn=1&lineEndColumn=1\r\n\r\n  - However, C++ prefer TargetPath to be EXE for properties UI (exe is what user actually wants to build) and debugger (exe is what it will launch). If so, sdk also need switch property on TargetPath for language ==  C++ . And we don't want to change user's existing Debugger config\r\n\r\n- Get multiple apphosts to the project when there is no nuget restore\r\n  - Make msi on core-sdk repo -- big task, however this need to be done even for c# referencing c++\r\n\r\n- [exe unique task] RuntimeIdentifiers=win;win-x32;win-x64 we should remove the “win” in the list\r\n - The \"extra\" win is set in https://github.com/dotnet/NuGet.BuildTasks/pull/25 from the issue. It is added to resolve a nuget issue. Considering in UWP is handing it, VC targets should do the similar. However, I am still not sure what to set. And pending nuget to reply more context\r\n - Or ResolveApphost should be able to take in \"win\" -- but that does it mean considering there is no generic windows apphost\r\n - We could disable import of the \"classic\" nuget target\r\n\r\n- [exe unique task] intermediateAssembly mismatches the actual output, even for classic project\r\n \r\nPotential fix\r\n```\r\n    <_OutputBase Condition=\"'$(Language)' == 'C++'\">$(TargetDir)</_OutputBase>\r\n    <_OutputBase Condition=\"'$(Language)' != 'C++'\">$(IntermediateOutputPath)</_OutputBase>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <!-- C++ does not use $(IntermediateAssembly). The output of the linker is $(TargetPath)-->\r\n    <!--TODO change to $(targetpath) when <TargetExt>.dll</TargetExt> change is in C++ targets-->\r\n    <_IntermediateAssemblyEquivalent Condition=\"'$(Language)' == 'C++'\" Include=\"$(TargetDir)$(TargetName)$(TargetExt)\" />\r\n    <_IntermediateAssemblyEquivalent Condition=\"'$(Language)' != 'C++'\" Include=\"@(IntermediateAssembly)\" />\r\n  </ItemGroup>\r\n```\r\n\r\n  - In Microsoft.Link.Common.props, the actual file is based on OutDir that is different than IntermediateAssembly when it builds a solution.\r\n\r\n- Figure out the dependency, let _CreateApphost be part of the BuildCompile\r\n\tPotential fix:\r\n```\r\n\t    <_CreateAppHostDependsOn Condition=\"'$(Language)' == 'C++'\">_GetAppHostPaths;ResolveFrameworkReferences;BuildCompile</_CreateAppHostDependsOn>\r\n\t    <_CreateAppHostDependsOn Condition=\"'$(Language)' != 'C++'\">_GetAppHostPaths;ResolveFrameworkReferences;CoreCompile</_CreateAppHostDependsOn>\r\n```\r\n\t\r\n\tAnd\r\n```\r\n\t  <PropertyGroup>\r\n\t    <CompileDependsOn>\r\n\t      $(CompileDependsOn);\r\n\t      _CreateAppHost;\r\n\t      _CreateComHost;\r\n\t      _GetIjwHostPaths;\r\n\t    </CompileDependsOn>\r\n\t  </PropertyGroup>\r\n```\t\r\n\r\n- Ensure runtimeconfig.json is correct\r\n","Url":"https://github.com/dotnet/sdk/issues/3623","RelatedDescription":"Closed issue \"Figure out build/run of c++/CLI exe\" (#3623)"}],"ResultType":"GitHubIssue"},"Announcements-Issues":{"Issues":[{"Id":"494223006","IsPullRequest":false,"CreatedAt":"2019-09-16T19:03:54","Actor":"leecow","Number":"123","RawContent":null,"Title":".NET Core 3.0 RC 1","State":"open","Body":".NET Core RC 1 released today. https://github.com/dotnet/core/issues/3380 has been opened for discussion. \r\n\r\n[Release Notes](https://github.com/dotnet/core/blob/master/release-notes/3.0/preview/3.0.0-rc1.md)\r\n[Download](https://github.com/dotnet/core/blob/master/release-notes/3.0/preview/3.0.0-rc1-download.md)\r\n\r\n**Blog posts**\r\n\r\n[.NET Core](https://devblogs.microsoft.com/dotnet/announcing-net-core-3-0-release-candidate-1/)\r\n[ASP.NET Core](https://devblogs.microsoft.com/aspnet/asp-net-core-and-blazor-updates-in-net-core-3-0-release-candidate-1/)\r\n\r\nPlease report any issues you find with 3.0.0 RC 1, either responding to this issue, creating a new issue or creating a new issue in one of the following repos:\r\n\r\n* [aspnet/AspNetCore](https://github.com/aspnet/AspNetCore) - for ASP.NET Core questions\r\n* [aspnet/EntityFrameworkCore](https://github.com/aspnet/EntityFrameworkCore) - for Entity Framework Core questions\r\n* [dotnet/cli](https://github.com/dotnet/cli/issues) - for CLI tools and questions\r\n* [dotnet/corefx](https://github.com/dotnet/corefx/issues) - for API issues and questions\r\n* [dotnet/coreclr](https://github.com/dotnet/coreclr/issues) - for runtime issues\r\n* [dotnet/core-setup](https://github.com/dotnet/core-setup/issues) - for installer issues\r\n* [dotnet/winforms](https://github.com/dotnet/winforms/issues) - for Winforms issues\r\n* [dotnet/wpf](https://github.com/dotnet/wpf/issues) - for WPF issues\r\n* [nuget/home](https://github.com/nuget/home/issues) - for NuGet questions and issues","Url":"https://github.com/dotnet/announcements/issues/123","RelatedDescription":"Open issue \".NET Core 3.0 RC 1\" (#123)"},{"Id":"491801748","IsPullRequest":false,"CreatedAt":"2019-09-10T17:23:20","Actor":"leecow","Number":"122","RawContent":null,"Title":"September 2019 .NET Updates","State":"open","Body":"The following .NET updates were released on September 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Core\r\n\r\n* .NET Core 2.1.13 and .NET Core SDK ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.13/2.1.13.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.1) )\r\n\r\n* .NET Core 2.2.7 and .NET Core SDK ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.7/2.2.7.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.2) )\r\n\r\nA discussion issue is available at [core/3345](https://github.com/dotnet/core/issues/3345)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/122","RelatedDescription":"Open issue \"September 2019 .NET Updates\" (#122)"},{"Id":"491794046","IsPullRequest":false,"CreatedAt":"2019-09-10T17:04:46","Actor":"blowdart","Number":"121","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-1301: Denial of Service Vulnerability in .NET Core","State":"open","Body":"# Microsoft Security Advisory CVE-2019-1301: Denial of Service Vulnerability in .NET Core\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a denial of service vulnerability when .NET Core improperly handles web requests. An attacker who successfully exploited this vulnerability could cause a denial of service against a .NET Core web application. The vulnerability can be exploited remotely, without authentication.\r\n\r\nThe update addresses the vulnerability by correcting how the .NET Core web application handles web requests.\r\n\r\n## Announcement\r\n\r\nThe original announcement for this issue can be found at https://github.com/dotnet/announcements/issues/121\r\n\r\n## <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nNone\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application running on .NET Core 2.1.0-2.1.12, or .NET Core 2.2.0-2.2.6\r\n\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nYou can list the versions you have installed by running the `dotnet --info` command. You will see output like the following;\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview3-010431\r\n Commit:    d72abce213\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18362\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview3-010431\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview3-27503-5\r\n  Commit:  3844df9537\r\n\r\n.NET Core SDKs installed:\r\n  2.1.604 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.202 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview3-010431 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\\\r\n  Microsoft.AspNetCore.All 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview3-19153-02 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview3-27503-5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview3-27504-2 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf you have a version of .NET Core less than 2.1.13 or less than 2.2.7, you're vulnerable.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nTo fix the issue please install the latest version of .NET Core. If you have multiple versions of .NET Core installed you will need to install multiple runtimes, or SDKs depending on what you have installed.\r\n\r\n* For machines running .NET Core 2.1, you should download Runtime 2.1.13 or SDK 2.1.509 for Visual Studio 2017 or SDK 2.1.606 for Visual Studio 2019 (v16.0) or SDK 2.1.802 for Visual Studio 2019 (v16.2) from https://dotnet.microsoft.com/download/dotnet-core/2.1.\r\n* For machines running .NET Core 2.2, you should download Runtime 2.2.7 or SDK 2.2.109 for Visual Studio 2017 or SDK 2.2.206 for Visual Studio 2019 (v16.0) or SDK 2.2.402 for Visual Studio 2019 (v16.2) from https://dotnet.microsoft.com/download/dotnet-core/2.2.\r\n\r\nIf you have both 2.1 and 2.2, you need to install updates for both versions.\r\n\r\nOnce you have installed the updated runtime or SDK, restart your apps for the update to take effect.\r\n\r\nIf you have [pinned your application](https://docs.microsoft.com/dotnet/core/versions/selection) to a specific version of the runtime, you must update your app, recompile and redeploy it for the update to take effect.\r\n\r\n# Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/, respectively. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgments\r\n\r\nPaul Ryman of VMware Sydney Engineering Team\r\n\r\n### External Links\r\n\r\n[CVE-2019-1301](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-1301)\r\n\r\n### Revisions\r\n\r\nV1.0 (September 10, 2019): Advisory published.\r\nV1.1 (September 10, 2019): Fix version numbers\r\n\r\n_Version 1.1_\r\n\r\n_Last Updated 2019-09-10_\r\n","Url":"https://github.com/dotnet/announcements/issues/121","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-1301: Denial of Service Vulnerability in .NET Core\" (#121)"},{"Id":"489344106","IsPullRequest":false,"CreatedAt":"2019-09-04T19:14:05","Actor":"leecow","Number":"120","RawContent":null,"Title":".NET Core 3.0 Preview 9","State":"open","Body":".NET Core Preview 9 released today. https://github.com/dotnet/core/issues/3304 has been opened for discussion. \r\n\r\n[Release Notes](https://github.com/dotnet/core/blob/master/release-notes/3.0/preview/3.0.0-preview9.md)\r\n[Download](https://github.com/dotnet/core/blob/master/release-notes/3.0/preview/3.0.0-preview9-download.md)\r\n\r\n**Blog posts**\r\n\r\n[.NET Core](https://devblogs.microsoft.com/dotnet/announcing-net-core-3-0-preview-9/)\r\n[ASP.NET Core](https://devblogs.microsoft.com/aspnet/asp-net-core-and-blazor-updates-in-net-core-3-0-preview-9/)\r\n\r\nPlease report any issues you find with 3.0.0 Preview 9, either responding to this issue, creating a new issue or creating a new issue in one of the following repos:\r\n\r\n* [aspnet/AspNetCore](https://github.com/aspnet/AspNetCore) - for ASP.NET Core questions\r\n* [aspnet/EntityFrameworkCore](https://github.com/aspnet/EntityFrameworkCore) - for Entity Framework Core questions\r\n* [dotnet/cli](https://github.com/dotnet/cli/issues) - for CLI tools and questions\r\n* [dotnet/corefx](https://github.com/dotnet/corefx/issues) - for API issues and questions\r\n* [dotnet/coreclr](https://github.com/dotnet/coreclr/issues) - for runtime issues\r\n* [dotnet/core-setup](https://github.com/dotnet/core-setup/issues) - for installer issues\r\n* [dotnet/winforms](https://github.com/dotnet/winforms/issues) - for Winforms issues\r\n* [dotnet/wpf](https://github.com/dotnet/wpf/issues) - for WPF issues\r\n* [nuget/home](https://github.com/nuget/home/issues) - for NuGet questions and issues","Url":"https://github.com/dotnet/announcements/issues/120","RelatedDescription":"Open issue \".NET Core 3.0 Preview 9\" (#120)"},{"Id":"480859726","IsPullRequest":false,"CreatedAt":"2019-08-14T19:54:26","Actor":"stephentoub","Number":"119","RawContent":null,"Title":"Consolidating .NET GitHub repos","State":"open","Body":"*To discuss these plans, please comment on the corresponding issue at https://github.com/dotnet/coreclr/issues/26175.*\r\n\r\nOver the next few months, we plan to consolidate several of the foundational repositories of .NET Core, including dotnet/coreclr and dotnet/corefx.\r\n\r\n.NET’s repository structure on GitHub was initially created in a fairly fine-grained manner, with the aim of enabling runtime agility and increased developer productivity.  However, this separation has led to a variety of complications for contributors and maintainers alike.  For example:\r\n- **Confusion about where issues should be opened.**  It’s not always clear in which repo an issue should be reported, complicated by the fact that some implementations actually span repositories (e.g. a type might be exposed through a reference assembly and have its tests in corefx but actually be implemented in System.Private.CoreLib in coreclr).\r\n- **Difficulty sharing source.**  System.Private.CoreLib is intricately connected to the rest of the runtime, and thus has lived with the runtime code.  That, however, means that although corefx has been intended as the place to share as much core library code as possible across any underlying runtime, we’ve needed to keep a significant body of code in System.Private.CoreLib, which then has meant it’s needed to be “mirrored” to each runtime repo (coreclr, corert, mono) that needs to consume it as source; similarly, corefx has similarly required access to much of that source, for example to use the same interop DllImports that are employed elsewhere in the runtimes.  The automatic mirror that shares this source needs to be maintained, and even when it has been, it’s often led to lag.  It’s also complicated developer processes, where to validate a change in one repo generally requires manually mirroring the code to other local repos in order to validate the change and ensure merging into one repo won’t break the others.\r\n- **PRs spanning multiple repos.**  Because the runtime, CoreLib, and the core libraries are all intricately linked, changing runtime behaviors, adding new APIs, or changing various build processes (e.g. improving static analysis) often requires multiple PRs carefully staged across time and multiple repos.  For example, to add a new method to a type like Dictionary<>, a developer must first make the source changes in her local coreclr repo and the test and reference assembly changes in her local corefx repo.  When satisfied with the fix, the developer must submit a PR to coreclr as well as a PR to corefx, the latter of which will fail.  Eventually the coreclr PR will be merged, and the changes will mirror to the other runtimes that also require the update.  Eventually those mirror PRs will be merged, and builds will be created containing the fix for each runtime.  At some point later those builds will be consumed into the corefx repo, after which point the original corefx PR can be re-validated and eventually merged.  That’s the best case; things get more complicated in situations where there are bidirectional dependencies.\r\n- **Building an installable runtime.** Self-hosting a custom built .NET requires intricate knowledge of how all the repos work and interact.  A developer can’t just clone a single repo, make a desired change, and easily produce an installer.\r\n- **Consistency.**  One goal we had for more fine-grained repos was to enable isolation and independence for teams working within each repo’s confines, but this has led to non-trivial duplication of effort on things like build systems and CI, and then the resulting lack of consistency as each system ends up diverging from the others.\r\n\r\nThe issues go beyond the runtime.  For example, the ASP.NET maintainers and community did a great job in the past year or so consolidating from ~55 repos down to ~5 repos, but that’s still more repos than is desirable, leading to similar issues as cited above for the runtime.  On top of that, these ASP.NET repositories are in the aspnet GitHub org, which adds an additional set of issues, for example:\r\n- **Complications moving issues between repos.**  If a developer opens an issue in aspnet/aspnetcore and it’s determined that the cause of the issue is actually in dotnet/corefx, there is no GitHub mechanism to enable easily moving that issue across the aspnet to dotnet organizational boundary.\r\n- **Permissions.** Each organization’s permissions end up needing to be managed and maintained separately.\r\n\r\nThe issues extend into tooling as well.  For example, we currently have multiple repositories that all logically make up the dotnet CLI, but actually creating a working installer spans multiple repos.\r\n\r\n### Plan\r\n\r\nTo address these issues, we’re planning to make some changes to our repository structure:\r\n- **dotnet/platform.**  We plan to combine dotnet/coreclr, dotnet/corefx, dotnet/corert, dotnet/core-setup, and the relevant portions of mono/mono into a new dotnet/platform repo.  Everything needed to build and produce the Microsoft.NETCore.App shared framework will be in this repo.  We will no longer suffer from the complications of source mirroring.  Features like changing runtime behavior or adding an API will no longer require a complicated dance across multiple repos.  Etc.\r\n- **dotnet/aspnetcore.**  We plan to move the existing aspnet/aspnetcore repository into the dotnet organization.  Along with that, we aim to combine a variety of the other aspnet repositories into aspnetcore, such as aspnet/blazor.  Whether repos like entityframeworkcore remain separate or combined remains an open question.  A goal is that, just as dotnet/platform will be responsible for the creation of Microsoft.NETCore.App, dotnet/aspnetcore will be responsible for the creation of Microsoft.AspNETCore.App.\r\n- **dotnet/cli.**  We plan to combine dotnet/toolset and dotnet/sdk into the dotnet/cli repo.\r\n\r\n### FAQ\r\n\r\n#### Why are we merging repos?\r\n\r\nWe believe we can significantly improve several aspects of .NET on GitHub by combining repos, benefiting both maintainers and contributors.  These improvements will manifest in a variety of ways, such as in better issue management, much easier models of contribution, and easier and faster ways to build and install the resulting bits.\r\n\r\n####  What will happen to the aspnet org?\r\n\r\nThe aspnet org as a separate entity is legacy and artificial.  In time we hope to absorb it into the dotnet org and sunset the aspnet org.\r\n\r\n#### Will the coreclr and corefx repos go away?\r\n\r\nWith the help of GitHub, we plan to migrate all issues from these repos to the new dotnet/platform repo, and then lock down creation of additional issues, such that the repos will no longer be used for issue management.  We will also inhibit the creation of PRs to the master branch, which will effectively become an archive for read-only review of history.  In this sense, these repos will be archived, and no active development will happen with them.  However, we plan to continue servicing previous .NET Core releases out of these repos, so the various release branches (e.g. release/2.1, release/3.0, etc.) will continue to see (limited) activity.\r\n\r\n#### Will the mono repo go away?\r\n\r\nNo. mono/mono contains the source for the full mono stack and will continue to live on happily.  We will simply be moving the managed source associated with System.Private.CoreLib and copying the relatively small amount of source that makes up the native mono runtime to dotnet/platform.  We may choose to then use some mirroring technology to keep the runtime copy in sync (this will, however, not suffer from the same mirroring issues we currently experience, as we would not be mirroring between two components required to build the same binaries), or we may choose to let them diverge and manually sync only those changes deemed relevant to both implementations.\r\n\r\n#### Will the corert repo go away?\r\n\r\nYes.  We plan to retire/archive the corert repo.  Some of the technology in the corert repo will be migrated to the master branch of dotnet/platform, where it will be productized as part of .NET.  Other portions of the corert repo will be migrated to feature branches of dotnet/platform, where the experimentation can continue.  In this way, we will use feature branches to continue experimenting with the corert technology, while making it easier to share portions with its shipping counterpart and also graduate functionality into master if/when it’s ready.\r\n\r\n#### Does this mean there will be a single repo for all of .NET?\r\n\r\nNo.  We will be reducing the number of repos that contribute to .NET, but currently we do not believe that going all the way down to one is the right answer.\r\n\r\n#### Doesn’t this mean that issue and PR tracking will now be overwhelming?\r\n\r\nIt is already the case that the vast majority of issues in a given repo are not relevant to any individual developer, and with several thousand open issues in each repo and on the order of a hundred open PRs in each, we already need systems (e.g. labels) to successfully manage issues and PRs.  As such, we don’t believe the merging will have a significant impact on this aspect of developer productivity.  If it turns out to have an unexpectedly large negative impact, we will work with the community to find ways to mitigate the problem.  However, there are already a multitude of successful open source projects on GitHub with at least an order of magnitude more issues.\r\n\r\n#### What will happen to existing issues?\r\n\r\nWith the help of GitHub functionality, we plan to migrate all issues from old repos (e.g. dotnet/coreclr, dotnet/corefx) to the new repos (e.g. dotnet/platform).  We may also use this as a forcing function to revisit stale issues and either close those that are no longer relevant or reinvigorate those that are demanding of more immediate attention.\r\n\r\n#### What about git history?\r\n\r\nIn general, we plan to keep history, such that history from each constituent repo will be a part of the new repo.  However, we have made some mistakes in the past (e.g. large binaries, multitudes of automated PRs for flowing bits and source between repos, etc.), and we plan to rewrite history to correct those mistakes wherever possible and impactful.  Some rough calculations suggest this could end up significantly reducing the size of the repos as well as the time it takes to clone, which should not only help developers approaching the project but also CI.  This will end up meaning that SHAs may be different in the new repo than they were in the old repo; as previously mentioned, however, any references to the old SHAs in the old repos will continue to work, as those repos will remain accessible.\r\n\r\n#### Will I still show up in the contributor list due to previous contributions?\r\n\r\nYes.  We plan to merge all such history.\r\n\r\n#### Will this break debugging with SourceLink?\r\n\r\nNo.  The existing repos will continue to be accessible, and commit SHAs there will remain unchanged.\r\n\r\n#### Might plans change?\r\n\r\nSure.  Part of the goal of posting this announcement is to hear from you, hear about additional benefits you're excited about, and hear about additional concerns we may not have considered.  We will include such ideas in our planning and course correct as necessary.\r\n\r\n## Discussion\r\n\r\nTo discuss these plans, please comment on the corresponding issue at https://github.com/dotnet/coreclr/issues/26175.\r\n","Url":"https://github.com/dotnet/announcements/issues/119","RelatedDescription":"Open issue \"Consolidating .NET GitHub repos\" (#119)"},{"Id":"470434872","IsPullRequest":false,"CreatedAt":"2019-07-19T16:54:02","Actor":"richlander","Number":"118","RawContent":null,"Title":".NET Core master branches have switched to \"5.0\"","State":"open","Body":"# .NET Core master branches have switched to \"5.0\"\r\n\r\nVarious .NET Core repos have switched their `master` branches to \"5.0\", and will use 3.x branches for 3.0 and 3.1 projects. This is very similar to how we approached 2.x and 3.0 projects. As context, `master` branches produced 3.0 builds for the entire period of the 2.2 project.\r\n\r\nAt present, this change is only relevant if you contribute to .NET Core repositories. Otherwise, we recommend that you wait for the 5.0 Preview releases before installing this new version.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n[dotnet/core #3059](https://github.com/dotnet/core/issues/3059)\r\n\r\n## Details\r\n\r\nThe following repos have moved their master branches to \"5.0\":\r\n\r\n- [dotnet/coreclr](https://github.com/dotnet/coreclr)\r\n- [dotnet/corefx](https://github.com/dotnet/corefx)\r\n- [dotnet/core-setup](https://github.com/dotnet/core-setup)\r\n\r\nYou can see that [5.0 .NET Core Runtime builds](https://github.com/dotnet/core-setup#daily-builds) are now being built and published at dotnet/core-setup.\r\n\r\nIn large part, we switched `master` to 5.0 to enable to the community to contribute changes. As the .NET Core 3.0 released has progressed, we've had to increase scrutiny on the changes we will accept. Now that we've permanently branched for 3.0, we can accept a much broader set of changes. Please consider that to be an open invitation!\r\n\r\nNotably, [dotnet/core-sdk](https://github.com/dotnet/core-sdk) is not yet producing 5.0 builds. We expect that the dotnet/core-sdk master branch will continue as a 3.0 branch for 2-3 months while we finish up the .NET Core 3.0 project.\r\n\r\nAt present, there is no developer experience for 5.0. We are waiting on the dotnet/core-sdk repo to switch to 5.0. Switching your project file to target `netcoreapp5.0` won't do anything useful. We'll update this issue when a 5.0 SDK comes available.","Url":"https://github.com/dotnet/announcements/issues/118","RelatedDescription":"Open issue \".NET Core master branches have switched to \"5.0\"\" (#118)"},{"Id":"465501070","IsPullRequest":false,"CreatedAt":"2019-07-08T23:25:31","Actor":"terrajobst","Number":"117","RawContent":null,"Title":"System.Text.Json usability study results","State":"open","Body":"We've performed a usability study on the new `System.Text.Json` APIs which will replace JSON.NET as the default JSON experience in .NET Core 3.0:\r\n\r\n* We focused on the primary \"getting started\" scenarios to validate that we picked the right type- and method names.\r\n* We simulated what we believe to be common error cases to validate that our exception messages are understandable and actionable.\r\n* Since we were short on time, we couldn't use the recruiting provided by the UX lab but instead brought in our own developers, which we recruited from the .NET engineering team\r\n\r\nThis has worked out well for us as we were able to get short term feedback which resulted in significant improvements to the overall API shape and usability. In the future, we should do more API focused UX studies 😊\r\n\r\n## Tasks\r\n\r\n| # | Description                            | Code\r\n|:--|:---------------------------------------|:-----\r\n| 1 | Serialize and pretty print             | [Link](https://github.com/ahsonkhan/JsonUxStudy/blob/master/UxScenarios/Scenario1/Program.cs#L19-L31)\r\n| 2 | Deserialize with trailing comma        | [Link](https://github.com/ahsonkhan/JsonUxStudy/blob/master/UxScenarios/Scenario2/Program.cs#L19-L25)\r\n| 3 | Deserialize with custom property names | [Link](https://github.com/ahsonkhan/JsonUxStudy/blob/master/UxScenarios/Scenario3/Program.cs#L30-L45)\r\n| 4 | Read with DOM                          | [Link](https://github.com/ahsonkhan/JsonUxStudy/blob/master/UxScenarios/Scenario4/Program.cs#L20-L35)\r\n| 5 | Pretty print an existing JSON file     | [Link](https://github.com/ahsonkhan/JsonUxStudy/blob/master/UxScenarios/Scenario5/Program.cs#L26-L34)\r\n\r\n## Hypotheses\r\n\r\nWe expect developers to...\r\n\r\n| # | Description                                            | Result\r\n|:--|:-------------------------------------------------------|:---------------\r\n| 1 | ...assume the APIs are similar/identical to JSON.NET   |  Validated\r\n| 2 | ...complete tasks 1-4 successfully                     |  Validated\r\n| 3 | ...struggle/unable to complete the task 5, because it requires working with two different components which is very different from JSON.NET |  Invalidated\r\n| 4 | ...not look at documentation for most of their coding as IntelliSense is good enough |  Invalidated\r\n| 5 | ...be happy with the experience of using the API                                     |  Validated\r\n| 6 | ...plan on using `System.Text.Json` for their next JSON task                         |  Partially Validated\r\n\r\n##  Key Observations\r\n\r\n* Everyone completed scenarios #1-#3, 2 didn't complete #4, 6 didn't complete #5\r\n    - The reason was always \"out of time\". Every person who started a scenario successfully finished it.\r\n    - We feel this validates that we picked the right scope for a 60 minute study of people from various backgrounds\r\n* Overall people liked the new API\r\n    - Key value prop for most people was the fact that \"it's now built in\"\r\n    - Very few mentioned perf and the ones that did thought that it probably wouldn't make a difference in their scenarios.\r\n    - Most people said they would prefer `System.Text.Json` for new APIs, but would stick to JSON.NET in code that already uses it.\r\n    - **[Action]** None, this is in line with what we expected.\r\n* Virtually everyone tried to google for sample code in the documentation\r\n    - Everyone found our blog post and online documentation\r\n    - People new to .NET were confused that JSON.NET and `System.Text.Json` weren't the same thing\r\n    - Everyone complained that the current docs are lacking, especially sample code.\r\n    - **[Action]** Docs are work in progress. We plan on shipping with a fully documented API surface and sample code.\r\n* Virtually everyone found the key type relatively quickly\r\n    - Some people were confused when types were static, rather than something that one can new up\r\n    - **[Action]** None. This is by-design as we try to reduce the number of allocations.\r\n* Virtually everyone had trouble selecting the correct method on\r\n  `JsonSerializer`\r\n    - We chose a very complicated naming convention\r\n    - **[Action]** We simplified it by using names that people in the study told us were looking for.\r\n* Most of our error messages were well received because they told people what\r\n  the problem is & how they can fix them.\r\n    - One error message was unclear because we reported an unexpected character when we could have reported that we didn't expect a comment.\r\n    - **[Action]** We've reworded the error message.\r\n    - We had one error message that was generated by a lower layer and provided an action item that doesn't make sense when people receive it when using the higher layer component.\r\n    - **[Action]** We've reworded the error message to be more generic so it makes sense for both kind of consumers.\r\n* Virtually everyone used the new Roslyn completion feature which will also show\r\n  types from namespaces not imported yet.\r\n    - However, virtually nobody realized that they were doing it.\r\n    - This caused confusion when people found other APIs that happen to include Json in them, specifically the old data contract serialization.\r\n    - **[Action]** Talk to the Roslyn IDE team to see if this something more people will run into. This could prove to be especially problematic for technologies that share type names (e.g. `UserControl` in WinForms and WPF) and both are referenced by the project.\r\n* Optional parameters and `async`/`await` are usability cliffs\r\n    - Many were confused by optional parameters and tried to pass them in, even though they didn't have to.\r\n    - **[Action]** Talk to the Roslyn IDE team to see if we can visualize them better in VS.\r\n    - **[Action]** Try to avoid heavy use of optional parameters for mainline APIs.\r\n    - Async is a very steep cliff. People have no idea what to do in their code to make async work. While IntelliSense shows the usage by prefixing it with await, people didn't notice that.\r\n    - **[Action]** Unclear; this is a broader issue.\r\n* Virtually nobody used F1 to get help for APIs\r\n    - *Surprise*. I expected more people to use <kbd>F1</kbd>.\r\n* Virtually everyone used F12 to explore the API (\"metadata view\")\r\n    - *Surprise*. I expected most people to explore the type via the\r\n      IntelliSense completion\r\n* Nobody used Object Browser to explorer the APIs\r\n    - *Surprise*. I expected at least some people to.\r\n\r\n## Discussion\r\n\r\nFor a discussion, please go to https://github.com/dotnet/corefx/issues/39304.","Url":"https://github.com/dotnet/announcements/issues/117","RelatedDescription":"Open issue \"System.Text.Json usability study results\" (#117)"},{"Id":"465034831","IsPullRequest":false,"CreatedAt":"2019-07-08T03:13:38","Actor":"leecow","Number":"116","RawContent":null,"Title":"Updates to releases.json (.NET Core release metadata)","State":"open","Body":"**The changes described in this issue will be live with the .NET Core July update on 7/9/2019.**\r\n\r\nThe releases.json files (e.g. [2.2 releases.json](https://raw.githubusercontent.com/dotnet/core/master/release-notes/2.2/releases.json)) are comprehensive metadata files which capture details of each .NET Core release. These files, along with the top level [releases-index.json](https://raw.githubusercontent.com/dotnet/core/master/release-notes/releases-index.json), are becoming increasingly important .NET Core release assets. These files, one for each major.minor channel, are relied upon by many to detect when updates for .NET Core are available, discover security update details and other uses.\r\n\r\nChanges are sometimes necessary, and the growing dependencies require that we treat compatibility of the schema with the utmost care. This announcement describes an addition to the releases.json schema.\r\n\r\n## SDK Versions and Visual Studio\r\n\r\nBecause of current .NET Core SDK product construction dependencies, there is a hard link between the Runtime, SDK, toolset (compilers, MSBuild, NuGet, and other components), and Visual Studio. Simplistically, this means that when anything updates, everything updates. The unfortunate result of this linking is that multiple versions of the SDK are released with each monthly update for each supported versions of Visual Studio. For example, the May Update for .NET Core 2.2 included the 2.2.5 runtime, 2.2.107 SDK for Visual Studio 2017 and 2.2.204 for Visual Studio 2019 and yet another pair of SDK versions for .NET Core 2.1. An example of this is the [2.2.5 Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.5/2.2.5.md). \r\n\r\nThis is a confusing situation and we are working to mitigate the need to release multiple SDKs with .NET Core 3.0. The need for multiple SDK versions will persist for 2.1 LTS.\r\n\r\n## Adding the SDKS array\r\n\r\nTo appropriately model multiple SDKs per release, we are adding an SDKs array to releases.json, which will contain SDK objects. The top-level SDK object will represent the highest versioned SDK for a given update. Using the previous 2.2.5 update example, SDK 2.2.204 is in the top SDK object as well as duplicated in the SDKS array. All other applicable 2.2* SDK objects are included in the SDKS array. The SDK objects within the array will carry specific Visual Studio compatibility and version inclusion information to provide appropriate context.\r\n\r\nHere is an example of the new array based on the upcoming July update.\r\nAgain, this will be additive and the previous SDK object will include the highest SDK version for the release.\r\n\r\n```json\r\n{\r\n    \"sdk\": {\r\n        \"version\": \"2.2.301\",\r\n        \"version-display\": \"2.2.301\",\r\n        \"runtime-version\": \"2.2.6\",\r\n        \"vs-version\": \"16.1.3\",\r\n        \"vs-support\": \"Visual Studio 2019 (v16.1)\",\r\n        \"csharp-version\": \"7.3\",\r\n        \"fsharp-version\": \"4.5\",\r\n        \"vb-version\": null,\r\n        \"files\": []\r\n    },\r\n    \"sdks\": [\r\n        {\r\n            \"version\": \"2.2.301\",\r\n            \"version-display\": \"2.2.301\",\r\n            \"runtime-version\": \"2.2.6\",\r\n            \"vs-version\": \"16.1.3\",\r\n            \"vs-support\": \"Visual Studio 2019 (v16.1)\",\r\n            \"csharp-version\": \"7.3\",\r\n            \"fsharp-version\": \"4.5\",\r\n            \"vb-version\": null,\r\n            \"files\": []\r\n        },\r\n        {\r\n          \"version\": \"2.2.205\",\r\n          \"version-display\": \"2.2.205\",\r\n          \"runtime-version\": \"2.2.6\",\r\n          \"vs-version\": \"16.0.5\",\r\n          \"vs-support\": \"Visual Studio 2019 (v16.0)\",\r\n          \"csharp-version\": \"7.3\",\r\n          \"fsharp-version\": \"4.5\",\r\n          \"vb-version\": null,\r\n          \"files\": []\r\n        }\r\n    ]\r\n}\r\n```\r\n\r\n## vs-version and the Runtime\r\n\r\nThe same version of the runtime is included in multiple versions of Visual Studio. To account for this, the vs-version field is being updated to a comma-delimited string. The string will represent all versions of Visual Studio which first include the particular .NET Core update. Again, an example from the upcoming July Update.\r\n\r\n```json\r\n\"runtime\": {\r\n        \"version\": \"2.2.6\",\r\n        \"version-display\": \"2.2.6\",\r\n        \"vs-version\": \"15.9.13, 16.1.3, 16.2.0\",\r\n```\r\n\r\nThe same `vs-versions` changes will be seen in the `aspnetcore-runtime` object.\r\n\r\n## Future Enhancements\r\n\r\nThere are other improvements to the schema which have been suggested by the community which we are evaluating. Generally, theses enhancements are additive and should not represent compatibility compromises for existing parsers and similar announcements will be published ahead of any changes.\r\n\r\n","Url":"https://github.com/dotnet/announcements/issues/116","RelatedDescription":"Open issue \"Updates to releases.json (.NET Core release metadata)\" (#116)"},{"Id":"444065225","IsPullRequest":false,"CreatedAt":"2019-05-14T18:38:23","Actor":"TaraOverfield","Number":"114","RawContent":null,"Title":"May 2019 .NET Updates","State":"open","Body":"# May 2019 .NET Updates\r\n\r\nThe following .NET updates were released in May 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Core\r\n\r\n* .NET Core 1.0.16 and .NET Core SDK 1.1.13( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.0/1.0.16/1.0.16.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/1.0) )\r\n\r\n* .NET Core 1.1.12 and .NET Core SDK 1.1.13 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.1/1.1.13/1.1.13.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/1.1) )\r\n\r\n* .NET Core 2.1.11 and .NET Core SDK ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.11/2.1.11.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.1) )\r\n\r\n* .NET Core 2.2.5 and .NET Core SDK ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.5/2.2.5.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.2) )\r\n\r\nA discussion issue is available at [core/2727](https://github.com/dotnet/core/issues/2727)\r\n\r\n## .NET Framework\r\n* [.NET Framework May 2019 Security and Quality Rollup - May 14, 2019](https://devblogs.microsoft.com/dotnet/net-framework-may-2019-security-and-quality-rollup/)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/114","RelatedDescription":"Open issue \"May 2019 .NET Updates\" (#114)"},{"Id":"444027703","IsPullRequest":false,"CreatedAt":"2019-05-14T17:06:24","Actor":"blowdart","Number":"113","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0981: .NET Core Denial of Service Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2019-0981: .NET Core Denial of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core and ASP.NET Core 1.0, 1.1, 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nA denial of service vulnerability exists when .NET Core and ASP.NET Core improperly handle web requests. An attacker who successfully exploited this vulnerability could cause a denial of service against a .NET Core and ASP.NET Core application. The vulnerability can be exploited remotely, without authentication.\r\n\r\nA remote unauthenticated attacker could exploit this vulnerability by issuing specially crafted requests to a .NET Core application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core and ASP.NET Core web applications handle web requests.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/37651\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nThere are no mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the System.Private.Uri package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.Private.Uri | 4.3.0, 4.3.1 | 4.3.2\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nThe affected assemblies are part of .NET Core. If you are running a vulnerable version of .NET Core you may be affected.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nTo fix the issue please install the latest version of .NET Core. If you have multiple versions of .NET Core installed you will need to install multiple runtimes, or SDKs depending on what you have installed.\r\n\r\nIf you have .NET Core 2.0 or greater installed you can list the versions you have installed by running the `dotnet --info` command. You will see output like the following;\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview3-010431\r\n Commit:    d72abce213\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18362\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview3-010431\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview3-27503-5\r\n  Commit:  3844df9537\r\n\r\n.NET Core SDKs installed:\r\n  1.1.13 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.602 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.202 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview3-010431 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\\\r\n  Microsoft.AspNetCore.All 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview3-19153-02 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.15 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview3-27503-5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview3-27504-2 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your version of .NET Core does not support the `dotnet --info` command then you have either .NET Core 1.0 or .NET Core 1.1 installed.\r\n\r\n* For machines running .NET Core 1.0 you should download Runtime 1.0.16 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.0.\r\n* For machines running .NET Core 1.1 you should download Runtime 1.1.13 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.1.\r\n* For machines running .NET 2.1 you should download Runtime 2.1.11 or SDK 2.1.507 for Visual Studio 2017 or SDK 2.1.604 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.1\r\n* For machines running .NET 2.2 you should download Runtime 2.2.5 or SDK 2.2.107 for Visual Studio 2017 or SDK 2.2.204 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.2.\r\n\r\nOnce you have installed the updated runtime or SDK you should restart your apps for the update to take effect.\r\n\r\nIf you have [pinned your application](https://docs.microsoft.com/en-us/dotnet/core/versions/selection) to a specific version of the runtime you must update your app, recompile and redeploy it for the update to take effect.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgments\r\n\r\n[Nemanja Mijailovic](https://mijailovic.net/)\r\n\r\n### External Links\r\n\r\n[CVE-2019-0981](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0981)\r\n\r\n### Revisions\r\n\r\nV1.0 (May 14, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-05-14_","Url":"https://github.com/dotnet/announcements/issues/113","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0981: .NET Core Denial of Service Vulnerability\" (#113)"},{"Id":"444027025","IsPullRequest":false,"CreatedAt":"2019-05-14T17:04:45","Actor":"blowdart","Number":"112","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0980: .NET Core Denial of Service Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2019-0980: .NET Core Denial of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core and ASP.NET Core 1.0, 1.1, 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nA denial of service vulnerability exists when .NET Core and ASP.NET Core improperly handle web requests. An attacker who successfully exploited this vulnerability could cause a denial of service against a .NET Core and ASP.NET Core application. The vulnerability can be exploited remotely, without authentication.\r\n\r\nA remote unauthenticated attacker could exploit this vulnerability by issuing specially crafted requests to a .NET Core application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core and ASP.NET Core web applications handle web requests.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/37650\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nThere are no mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the System.Private.Uri package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.Private.Uri | 4.3.0, 4.3.1 | 4.3.2\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nThe affected assemblies are part of .NET Core. If you are running a vulnerable version of .NET Core you may be affected.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nTo fix the issue please install the latest version of .NET Core. If you have multiple versions of .NET Core installed you will need to install multiple runtimes, or SDKs depending on what you have installed.\r\n\r\nIf you have .NET Core 2.0 or greater installed you can list the versions you have installed by running the `dotnet --info` command. You will see output like the following;\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview3-010431\r\n Commit:    d72abce213\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18362\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview3-010431\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview3-27503-5\r\n  Commit:  3844df9537\r\n\r\n.NET Core SDKs installed:\r\n  1.1.13 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.602 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.202 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview3-010431 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\\\r\n  Microsoft.AspNetCore.All 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview3-19153-02 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.15 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview3-27503-5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview3-27504-2 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your version of .NET Core does not support the `dotnet --info` command then you have either .NET Core 1.0 or .NET Core 1.1 installed.\r\n\r\n* For machines running .NET Core 1.0 you should download Runtime 1.0.16 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.0.\r\n* For machines running .NET Core 1.1 you should download Runtime 1.1.13 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.1.\r\n* For machines running .NET 2.1 you should download Runtime 2.1.11 or SDK 2.1.507 for Visual Studio 2017 or SDK 2.1.604 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.1\r\n* For machines running .NET 2.2 you should download Runtime 2.2.5 or SDK 2.2.107 for Visual Studio 2017 or SDK 2.2.204 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.2.\r\n\r\nOnce you have installed the updated runtime or SDK you should restart your apps for the update to take effect.\r\n\r\nIf you have [pinned your application](https://docs.microsoft.com/en-us/dotnet/core/versions/selection) to a specific version of the runtime you must update your app, recompile and redeploy it for the update to take effect.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgments\r\n\r\n[Nemanja Mijailovic](https://mijailovic.net/)\r\n\r\n### External Links\r\n\r\n[CVE-2019-0980](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0980)\r\n\r\n### Revisions\r\n\r\nV1.0 (May 14, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-05-14_","Url":"https://github.com/dotnet/announcements/issues/112","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0980: .NET Core Denial of Service Vulnerability\" (#112)"},{"Id":"444026277","IsPullRequest":false,"CreatedAt":"2019-05-14T17:02:57","Actor":"blowdart","Number":"111","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0820: .NET Core Denial of Service Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2019-0820: .NET Core Denial of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 1.0, 1.1, 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nA denial of service vulnerability exists when .NET Core improperly process RegEx strings. An attacker who successfully exploited this vulnerability could cause a denial of service against a .NET application.\r\n\r\nA remote unauthenticated attacker could exploit this vulnerability by issuing specially crafted requests to a .NET Core application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core applications handle RegEx string processing.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/37649\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nThere are no mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the System.Text.RegularExpressions package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.Text.RegularExpressions.dll | 4.3.0 | 4.3.1\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nThe affected assemblies are part of .NET Core. If you are running a vulnerable version of .NET Core you may be affected.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nTo fix the issue please install the latest version of .NET Core. If you have multiple versions of .NET Core installed you will need to install multiple runtimes, or SDKs depending on what you have installed.\r\n\r\nIf you have .NET Core 2.0 or greater installed you can list the versions you have installed by running the `dotnet --info` command. You will see output like the following;\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview3-010431\r\n Commit:    d72abce213\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18362\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview3-010431\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview3-27503-5\r\n  Commit:  3844df9537\r\n\r\n.NET Core SDKs installed:\r\n  1.1.13 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.602 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.202 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview3-010431 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\\\r\n  Microsoft.AspNetCore.All 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview3-19153-02 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.15 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview3-27503-5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview3-27504-2 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your version of .NET Core does not support the `dotnet --info` command then you have either .NET Core 1.0 or .NET Core 1.1 installed.\r\n\r\n* For machines running .NET Core 1.0 you should download Runtime 1.0.16 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.0.\r\n* For machines running .NET Core 1.1 you should download Runtime 1.1.13 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.1.\r\n* For machines running .NET 2.1 you should download Runtime 2.1.11 or SDK 2.1.507 for Visual Studio 2017 or SDK 2.1.604 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.1\r\n* For machines running .NET 2.2 you should download Runtime 2.2.5 or SDK 2.2.107 for Visual Studio 2017 or SDK 2.2.204 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.2.\r\n\r\nOnce you have installed the updated runtime or SDK you should restart your apps for the update to take effect.\r\n\r\nIf you have [pinned your application](https://docs.microsoft.com/en-us/dotnet/core/versions/selection) to a specific version of the runtime you must update your app, recompile and redeploy it for the update to take effect.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2019-0820](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0820)\r\n\r\n### Revisions\r\n\r\nV1.0 (May 14, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-05-14_","Url":"https://github.com/dotnet/announcements/issues/111","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0820: .NET Core Denial of Service Vulnerability\" (#111)"},{"Id":"435015242","IsPullRequest":false,"CreatedAt":"2019-04-19T01:16:10","Actor":"MichaelSimons","Number":"110","RawContent":null,"Title":"New images for .NET Framework 4.8","State":"open","Body":"# New images for .NET Framework 4.8\r\n\r\nNew images have been released with support for [.NET Framework 4.8 runtime and SDK](https://devblogs.microsoft.com/dotnet/announcing-the-net-framework-4-8/).\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [Microsoft/dotnet-framework-docker#271](https://github.com/Microsoft/dotnet-framework-docker/issues/271)\r\n\r\n## Details\r\n* Pull request: #270\r\n\r\nYou can access these new images with the following tags:\r\n* `mcr.microsoft.com/dotnet/framework/runtime:4.8`\r\n* `mcr.microsoft.com/dotnet/framework/sdk:4.8`\r\n\r\nIn addition, the `latest` tag has been updated to refer to these new 4.8 images.\r\n\r\nCheck out the readme files for more information on the latest tags:\r\n* [Runtime](https://github.com/Microsoft/dotnet-framework-docker/blob/master/README.runtime.md)\r\n* [SDK](https://github.com/Microsoft/dotnet-framework-docker/blob/master/README.sdk.md)\r\n\r\nThe [3.5 SDK](https://github.com/Microsoft/dotnet-framework-docker/tree/master/3.5/sdk) images are intended to always contain the latest .NET Framework SDK and have also been updated to use the 4.8 SDK.","Url":"https://github.com/dotnet/announcements/issues/110","RelatedDescription":"Open issue \"New images for .NET Framework 4.8\" (#110)"},{"Id":"433297298","IsPullRequest":false,"CreatedAt":"2019-04-15T13:57:07","Actor":"MichaelSimons","Number":"109","RawContent":null,"Title":".NET Framework SDK container images now contain the Visual Studio 2019 toolset","State":"open","Body":"# .NET Framework SDK container images now contain the Visual Studio 2019 toolset\r\n.NET Framework SDK container images now include Visual Studio 2019 tools. For most scenarios, this change will not be observable, however, there may be some breaks that will be documented in this issue. We did not add additional tools to the SDK, but updated existing tools to match the same tools in Visual Studio 2019. Previously, the tools in SDK matched the same tools in Visual Studio 2017.\r\n\r\nWe will only produce .NET Framework SDK images that include Visual Studio 2019 tools. We will not produce another set of .NET Framework SDK images that includes Visual Studio 2017 tools. There is a strong goal that the tools remain compatible over releases.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [Microsoft/dotnet-framework-docker#269](https://github.com/Microsoft/dotnet-framework-docker/issues/269)\r\n\r\n## Details\r\nVisual Studio 2019 was released on April 2, 2019. We updated the .NET Framework SDK container images, on the same day, to include a new version of the .NET Framework SDK that contains tools that match the same tools in Visual Studio 2019.\r\n\r\nThese tools include:\r\n* MSBuild\r\n* NuGet\r\n* C# compiler\r\n* F# compiler\r\n* VB compiler\r\n* VS Test\r\n\r\nIf you encounter a breaking change or other issues and need to quickly unblock yourself, you can reference the previous version of the image by using its full version tag (e.g. mcr.microsoft.com/dotnet/framework/sdk:4.7.2-20190312-windowsservercore-ltsc2019).\r\n\r\nRelated pull request: [#252](https://github.com/Microsoft/dotnet-framework-docker/pull/252)","Url":"https://github.com/dotnet/announcements/issues/109","RelatedDescription":"Open issue \".NET Framework SDK container images now contain the Visual Studio 2019 toolset\" (#109)"},{"Id":"432735158","IsPullRequest":false,"CreatedAt":"2019-04-12T20:35:55","Actor":"KathleenDollard","Number":"108","RawContent":null,"Title":".NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017","State":"open","Body":"# .NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017\r\n\r\n.NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017. For example, 2.2.203 and 2.1.603 cause failures in Visual Studio 2017. To work on projects in Visual Studio 2017, use .NET Core SDK 2.2.1nn and 2.1.5nn, such as 2.2.106 and 2.1.506. You can install any combination of these SDKs side by side.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n[dotnet/sdk #3124](https://github.com/dotnet/sdk/issues/3124)\r\n\r\n## Details\r\n\r\nYou can find the SDKs on you machine using the following at a command prompt:\r\n\r\n```bash\r\ndotnet --list-sdks\r\n```\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.2\r\n\r\nIf you receive the error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.2. Either target .NET Core 2.1 or lower, or use a version of the .NET SDK that supports .NET Core 2.2.`\r\n\r\nIf you downloaded the .NET Core SDK 2.2 between April 2 and April 12, 2019, the main [.NET downloads page](https://dotnet.microsoft.com/download/) included only 2.2.2nn. Starting April 12th, a new button marked \"Compatible with Visual Studio 2017\" is provided to target 2.2.1nn. If you downloaded 2.2 prior to this date, and you use Visual Studio 2017, install the compatible version.\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.1\r\n\r\nIf you receive this error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.1. Either target .NET Core 2.0 or lower, or use a version of the .NET SDK that supports .NET Core 2.1.`\r\n\r\nThis problem most often occurs because you manually uninstall the 2.1.5nn version. Simply reinstall it from the [.NET Core 2.1 downloads page](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\n## More information\r\n\r\nHere is the draft of an article we are preparing for .NET Core documentation:\r\n\r\n---\r\n\r\n## Solving Problems with .NET Core SDK Selection in Visual Studio\r\n\r\nYou may have .NET Core SDKs on your machine and still have problems with Visual Studio finding an appropriate one. This article explains why this happens and how you can fix your installation.\r\n\r\nWhen Visual Studio can't find an appropriate version of the .NET Core SDK, you'll receive an error message. This may appear in the Error pane as NETSDK1045:\r\n\r\n\"The current .NET SDK does not support targeting .NET Core 2...\"\r\n\r\nYou can check what .NET Core SDKs you have on your machine with the following command:\r\n\r\n```bash\r\ndotnet --list-sdks\r\n```\r\n\r\nUnless you have a global.json file, when you use `dotnet` from the command line, the latest .NET Core SDK is used.\r\n\r\n> [TIP!] \r\n> Open a command prompt and try to build with `dotnet build`. If the command line build works, but Visual Studio doesn't suggestions in this article may help.\r\n\r\nThe last two digits of the .NET Core SDK version numbers are in the format are a patch number, which is represented by `nn` in this article because we will continue to service them to include the latest runtimes. To find out more, vist the [Overview of how .NET Core is versioned page](https://docs.microsoft.com/en-us/dotnet/core/versions/).\r\n\r\n## Fixes for Common Problems\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.2\r\n\r\nIf you receive the error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.2… Either target .NET Core 2.1 or lower, or use a version of the .NET SDK that supports .NET Core 2.2.`\r\n\r\nUse `dotnet --list-sdks` to ensure you have .NET Core SDK 2.2.1nn. As an example, 2.2.106 would be a valid entry.\r\n\r\nIf you downloaded the .NET Core SDK 2.2 after April 2, 2019, version 2.2.2nn (such as 2.2.203) is listed first and is the highest version available. However, Visual Studio 2017 requires 2.2.1nn (such as 2.2.106). .NET Core SDK 2.2.2nn works with Visual Studio 2019. Visual Studio 2017 and Visual Studio 2019 can be installed side by side, but this requires both .NET Core SDK 2.2.1nn and .NET Core SDK 2.2.2nn to develop .NET Core 2.2 applications.\r\n\r\nTo download .NET Core SDK 2.2.2nn, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.1\r\n\r\nIf you receive this error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.1. Either target .NET Core 2.0 or lower, or use a version of the .NET SDK that supports .NET Core 2.1.`\r\n\r\nUse `dotnet --list-sdks` to ensure you have .NET Core SDK 2.1.5nn. As an example, 2.1.505 would be a valid entry. \r\n\r\nThis problem occurs of you manually uninstall the 2.1.5nn version.\r\n\r\nThe Visual Studio 2019 installation will not remove this file and Visual Studio 2017 will continue to work side by side.\r\n\r\nTo reinstall .NET Core SDK 2.1.5nn, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\n### Visual Studio 2019 can't target .NET Core 3.0 Preview\r\n\r\nIf you receive this error message in Visual Studio 2019:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.1. Either target .NET Core 2.0 or lower, or use a version of the .NET SDK that supports .NET Core 2.1.`\r\n\r\nUse `dotnet --list-sdks` to ensure you have .NET Core SDK 3.0.100-preview... As an example, SDK 3.0.100-preview3-010431 would be a valid entry.\r\n\r\nTo install .NET Core SDK 3.0.1nn preview, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core/3.0).\r\n\r\nIn Visual Studio, go to `Tools\\Options\\Projects and Solutions\\.NET Core` and check the box `Use Previews of the .NET Core SDK`.\r\n\r\n> [NOTE!]\r\n> This option will be moving to `Tools\\Options\\Environment` and renamed `Preview Features` in Visual Studio 2019 version 16.1 Preview 2.\r\n\r\nIf you are targeting .NET Core 3.0 preview, the [C# language version will be C# 8.0 Preview by default](https://docs.microsoft.com/en-us/visualstudio/releases/2019/release-notes#csharp-defaults) allowing you to use new C# features.\r\n\r\n## Understand the relationship between .NET Core SDKs and Visual Studio build tools\r\n\r\nVisual Studio has its own copies of tools like MSBuild, NuGet and the compilers. If you install the .NET Core workload, it also installs the .NET Core SDK which has versions of these tools and provides tasks and targets. These two versions are built from the same repositories, but target .NET Framework and .NET Core respectively. \r\n\r\nWhen you build a .NET Core project in Visual Studio, it uses Visual Studio's copy of MSBuild, but the tasks and targets are supplied from the selected version of the .NET Core SDK. \r\n\r\nWhen you upgrade the .NET Core SDK, you get new tasks and targets. These new tasks and targets may contain features that are not supported by older versions of MSBuild. Like all of the .NET Core SDK, MSBuild is backwards compatible. It is not forwards compatible.\r\n\r\nThis generally works well, but requires a guarantee that the tasks and targets work with the MSBuild version. To ensure this, each .NET Core SDK indicates an MSBuild version range that is used by Visual Studio to determine compatibility. Versions of the .NET Core SDK that have a higher MSBuild identifier than expected are ignored by Visual Studio. In the normal case, this simply means you use the tasks and targets that were installed with your version of Visual Studio.\r\n\r\nBecause of this, you may have many versions of the .NET Core SDK on your machine and Visual Studio still fail to find one it considers appropriate. This is compounded by a poor error message, which we cannot fully correct because it is from the old version of the .NET Core SDK on your machine. Confusion is also compounded by a complex non-linear release matrix that makes it difficult to predict the right .NET Core SDK to select. We are working to improve all this. \r\n\r\n## The Visual Studio / .NET Core SDK support matrix\r\n\r\nThe last two digits of the .NET Core SDK version number are a patch number, which are represented by a `nn` in this table. You can learn more about .NET Core SDK and .NET Core Runtime versioning at the [Overview of how .NET Core is versioned page](https://docs.microsoft.com/en-us/dotnet/core/versions/).\r\n\r\nThe following table shows which Visual Studio versions and .NET Core SDKs are compatible and how they are acquired if you are working with Visual Studio. \r\n\r\n| .NET Core SDK | .NET Core Runtime | Compatible Visual Studio | MSBuild | Notes                                     |\r\n|---------------|-------------------|--------------------------|---------|-------------------------------------------|\r\n| 2.1.5nn       | 2.1               | 2017                     | 15      | Installed as part of VS 2017 version 15.9 |\r\n| 2.1.6nn       | 2.1               | 2019                     | 16      | Installed as part of VS 2019              |\r\n| 2.2.1nn       | 2.2               | 2017                     | 15      | Installed manually                        |\r\n| 2.2.2nn       | 2.2               | 2019                     | 16      | Installed as part of VS 2019              |\r\n| 3.0.1nn       | 3.0 (Preview)     | 2019                     | 16      | Installed manually                        |\r\n\r\nVisual Studio 2017 cannot work with .NET Core SDK 2.1.6nn or 2.2.2nn.\r\n\r\nTo find out more about removing older versions of the .NET Core Runtime and .NET Core SDK, visit the [How to remove the .NET Core Runtime and SDK page](https://docs.microsoft.com/en-us/dotnet/core/versions/remove-runtime-sdk-versions?tabs=macos).\r\n\r\nTo download the .NET Core SDK, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core).","Url":"https://github.com/dotnet/announcements/issues/108","RelatedDescription":"Open issue \".NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017\" (#108)"},{"Id":"432081093","IsPullRequest":false,"CreatedAt":"2019-04-11T15:16:43","Actor":"KathleenDollard","Number":"107","RawContent":null,"Title":"Limit DotNetCliToolReference Tools to .NET Core 2.2 and Below","State":"open","Body":"# Limit DotNetCliToolReference Tools to .NET Core 2.2 and Below\r\n\r\n.NET Core 3 takes the next step in the .NET Core tool strategy with local tools. As part of this process, starting in Preview 4 DotNetCliToolReference tools will be restricted to targeting .NET Core 2.2 and below. DotNetCliToolReference tools can be used in projects targeting .NET Core 3.0, but the tools themselves should target .NET Core 2.2 or below.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n[dotnet/sdk #3115](https://github.com/dotnet/sdk/issues/3115)\r\n\r\n## Details\r\n\r\nThe suggested approach going forward is to to use [.NET Core Local Tools](https://aka.ms/local-tools) when you want a tool that is specific to a project or repository. At the same time we are removing the need to access local tools by the verbose `dotnet tool run <toolname>` that was present in earlier previews. You can now access local tools via `dotnet <toolname>`.\r\n\r\nDotNetCliToolReference tools have a flaw in how their dependencies are restored which can create [difficult to diagnose bugs when running these tools](https://github.com/NuGet/Home/issues/5067). This issue would occur much more frequently if targeting .NET Core 3.0 was allowed. Restricting tools to target only .NET Core 2.2 and below means existing scenarios to continue to work (as well as they previously did), regardless of the framework version targeted by the project or the current .NET Core SDK. \r\n\r\nThe new .NET Core tool strategy avoids this flaw in restore strategy and offers other benefits, like the ability to author one type of tool and install it in different ways depending on project and user needs.\r\n\r\nWe look forward to your feedback on .NET Core Local Tools, and on challenges you face moving away from DotNetCliToolReference tools. \r\n\r\n[dotnet/sdk #3057](https://github.com/dotnet/sdk/pull/3057)","Url":"https://github.com/dotnet/announcements/issues/107","RelatedDescription":"Open issue \"Limit DotNetCliToolReference Tools to .NET Core 2.2 and Below\" (#107)"},{"Id":"431012407","IsPullRequest":false,"CreatedAt":"2019-04-09T14:51:18","Actor":"MichaelSimons","Number":"106","RawContent":null,"Title":".NET Core SDK container images now contain the Visual Studio 2019 toolset","State":"open","Body":"# .NET Core SDK container images now contain the Visual Studio 2019 toolset\r\n\r\n.NET Core SDK container images now include Visual Studio 2019 tools. For most scenarios, this change will not be observable, however, there may be some breaks that will be documented in this issue. We did not add *additional* tools to the SDK, but updated existing tools to match the same tools in Visual Studio 2019. Previously, the tools in SDK matched the same tools in Visual Studio 2017.\r\n\r\nWe will only produce .NET Core SDK images that include Visual Studio 2019 tools. We will not produce another set of .NET Core SDK images that includes Visual Studio 2017 tools. There is a strong goal that the tools remain compatible over releases.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #1042](https://github.com/dotnet/dotnet-docker/issues/1042)\r\n\r\n## Details\r\n\r\n[Visual Studio 2019](https://devblogs.microsoft.com/visualstudio/visual-studio-2019-code-faster-work-smarter-create-the-future/) was released on April 2, 2019. We updated the .NET Core SDK container images, on the same day, to include a new version of the .NET Core SDK that contains tools that match the same tools in Visual Studio 2019.\r\n\r\nThese tools include:\r\n\r\n* MSBuild\r\n* NuGet\r\n* C# compiler\r\n* F# compiler\r\n* VB compiler\r\n* VS Test\r\n\r\nIf you encounter a breaking change or other issues and need to quickly unblock yourself, you can reference the previous version of the image by using its full version tag:\r\n\r\n* 2.1: `mcr.microsoft.com/dotnet/core/sdk:2.1.505`\r\n* 2.2: `mcr.microsoft.com/dotnet/core/sdk:2.2.105`\r\n\r\nDetails:\r\n\r\n* [dotnet/dotnet-docker #1029](https://github.com/dotnet/dotnet-docker/pull/1029)\r\n* [2.1 SDK release notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.602-SDK/2.1.602-SDK.md)\r\n* [2.2 SDK release notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.202-SDK/2.2.202-SDK.md)\r\n\r\n## Known Breaking Changes for SDK images (VS 2017 to VS 2019 upgrade)\r\n\r\nThe following issues and breaks have been discovered.\r\n \r\n### Test Log File Name Change\r\n\r\nA change was introduced to the `dotnet test` command when a user-defined log file name is specified.  In the previous version the resulting log file would be named exactly as specified.  In the current version, the log file is named with a timestamp suffix automatically added to the user-defined name.  \r\n\r\nDetails:\r\n* [Microsoft/vstest #1603](https://github.com/Microsoft/vstest/issues/1603) \r\n* [Microsoft/vstest#1876](https://github.com/Microsoft/vstest/issues/1876)","Url":"https://github.com/dotnet/announcements/issues/106","RelatedDescription":"Open issue \".NET Core SDK container images now contain the Visual Studio 2019 toolset\" (#106)"},{"Id":"431003701","IsPullRequest":false,"CreatedAt":"2019-04-09T14:35:39","Actor":"MichaelSimons","Number":"105","RawContent":null,"Title":"Windows Server, version 1709 no longer Supported by .NET Framework","State":"open","Body":"# Windows Server, version 1709 no longer Supported by .NET Framework\r\n\r\nWindows Server, version 1709 is no longer supported. As a result, this version of Windows is no longer supported by the .NET Team and we will no longer produce .NET Framework container images for those Windows versions.\r\n\r\nSupport statements:\r\n\r\n* [Currently supported .NET Framework Docker images](https://hub.docker.com/_/microsoft-dotnet-framework)\r\n* [.NET Framework Support Policy](https://dotnet.microsoft.com/platform/support/policy/dotnet-framework)\r\n* [Products Reaching End of Support for 2019](https://support.microsoft.com/en-us/help/4316957/products-reaching-end-of-support-for-2019)\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-framework-docker #259](https://github.com/Microsoft/dotnet-framework-docker/issues/259)\r\n\r\n## Details\r\n\r\nDocker tags that contain `windowsservercore-1709` are no longer be produced. We will not delete existing images or those tags, however, they contain unsupported builds of Windows Server and .NET Framework.\r\n\r\n## Pulling manifest tags\r\n\r\nThese changes also affect manifest tags (AKA “multi-arch tags“), such as `4.7.1`, and  `4.7.2`. These are tags that are supported on multiple operating systems and versions, and do  not contain the operating system in them. As a result of no longer producing new images for Windows Server, version 1709, manifest tags no longer include entries for Windows 10, version 1709, and Windows Server,version 1709. That means that .NET Core manifest tags are no longer usable on those Windows versions.\r\n\r\nIf you pull a manifest tag on one of the Windows versions described, you may get one of the following error messages:\r\n\r\n* `a Windows version 10.0.17134-based image is incompatible with a 10.0.16299 host`\r\n* `no matching manifest for windows/amd64 in the manifest list entries`\r\n* `no matching manifest for unknown in the manifest list entries`\r\n\r\nIf you need to still use Windows Server, version 1709 images (even though they are no longer supported), you will need to use tags that include the Windows Server version (these are non-manifest tags), for example `mcr.microsoft.com/dotnet/framework/runtime:4.7.2-windowsservercore-1709` or `mcr.microsoft.com/dotnet/framework/sdk:4.7.2-windowsservercore-1709`.","Url":"https://github.com/dotnet/announcements/issues/105","RelatedDescription":"Open issue \"Windows Server, version 1709 no longer Supported by .NET Framework\" (#105)"},{"Id":"430998341","IsPullRequest":false,"CreatedAt":"2019-04-09T14:25:57","Actor":"MichaelSimons","Number":"104","RawContent":null,"Title":"Nano Server 2016 and 1709 no longer Supported by .NET Core","State":"open","Body":"# Nano Server 2016 and 1709 no longer Supported by .NET Core\r\n\r\nNano Server 2016 and Nano Server, version 1709 are no longer supported. As a result, these versions of Windows are no longer supported by the .NET Team and we will no longer produce .NET Core container images for those Windows versions.\r\n\r\nSupport statements:\r\n\r\n* [Currently supported .NET Core Docker images](https://hub.docker.com/_/microsoft-dotnet-core)\r\n* [.NET Core Support Policy](https://dotnet.microsoft.com/platform/support/policy/dotnet-core)\r\n* [Products Reaching End of Support for 2018](https://support.microsoft.com/en-us/help/4043450/products-reaching-end-of-support-for-2018)\r\n* [Products Reaching End of Support for 2019](https://support.microsoft.com/en-us/help/4316957/products-reaching-end-of-support-for-2019)\r\n\r\nWe previously announced Nano Server 2016 going out of support in [.NET Core Container Images now Published to Microsoft Container Registry](https://devblogs.microsoft.com/dotnet/net-core-container-images-now-published-to-microsoft-container-registry/). That post is still accurate.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #1041](https://github.com/dotnet/dotnet-docker/issues/1041)\r\n\r\n## Details\r\n\r\nDocker tags that contain `nanoserver-sac2016` and `nanoserver-1709` are no longer be produced. We will not delete existing images or those tags, however, they contain unsupported builds of Nano Server and .NET Core.\r\n\r\n## Pulling manifest tags\r\n\r\nThese changes also affect manifest tags (AKA “multi-arch tags“), such as `2.1`, `2.1-sdk`, `2.2.1-runtime`. These are tags that are supported on multiple operating systems, and do not contain the operating system in them. As a result of no longer producing new images for Nano Server 2016 and Nano Server, version 1709, manifest tags no longer include entries for Nano Server 2016, Windows Server 2016, Windows 10, version 1607, Windows 10, version 1709, and Windows Server, version 1709. That means that .NET Core manifest tags are no longer usable on those Windows versions.\r\n\r\nIf you pull a manifest tag on one of the Windows versions described, you may get one of the following error messages:\r\n\r\n* `a Windows version 10.0.16299-based image is incompatible with a 10.0.14393 host`\r\n* `no matching manifest for windows/amd64 in the manifest list entries`\r\n* `no matching manifest for unknown in the manifest list entries`\r\n\r\nIf you need to still use Nano Server 2016 or Nano Server, version 1709 images (even though they are no longer supported), you will need to use tags that include the Nano Server version (these are non-manifest tags), for example `mcr.microsoft.com/dotnet/core/runtime:2.1-nanoserver-sac2016` or `mcr.microsoft.com/dotnet/core/runtime:2.1-nanoserver-1709`.\r\n\r\n### Nano Server Support\r\n\r\n.NET Core is supported on Nano Server, version 1803 and later. \r\n\r\n.NET Core 2.x and 3.0 images are available for all supported versions of Nano Server, version 1803 and later. This means that 2.x and 3.0 manifest tags can be used on Windows 10, version 1803+, and Windows Server, version 1803+. You can also use non-manifest tags for those versions, too, such as `2.2-nanoserver-1809`.\r\n\r\n.NET Core 1.x images are available for Nano Server, version 1809 and later. This means that 1.x manifest tags can be used on Windows 10, version 1809+, Windows Server, version 1809+ and Windows Server 2019. You can also use non-manifest tags for those versions, too, such as `1.1-nanoserver-1809` tag.","Url":"https://github.com/dotnet/announcements/issues/104","RelatedDescription":"Open issue \"Nano Server 2016 and 1709 no longer Supported by .NET Core\" (#104)"},{"Id":"420117627","IsPullRequest":false,"CreatedAt":"2019-03-12T17:35:16","Actor":"vivmishra","Number":"103","RawContent":null,"Title":"March 2019 .NET Updates","State":"open","Body":"# March 2019 .NET Updates\r\n\r\nThe following .NET updates were released in March 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n* [.NET Framework March 2019 Update - March 19, 2019](https://devblogs.microsoft.com/dotnet/net-framework-march-2019-update/)\r\n* [.NET Framework April 2, 2019 Cumulative Update for Windows 10 version 1809 and Windows Server 2019 - April 2, 2019](https://devblogs.microsoft.com/dotnet/net-framework-april-2-2019-cumulative-update-for-windows-10-version-1809-and-windows-server-2019/)\r\n\r\n\r\n## .NET Core\r\n\r\n* .NET Core 1.0.15 and .NET Core SDK 1.1.13 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.0/1.0.15/1.0.15.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/1.0) )\r\n\r\n* .NET Core 1.1.12 and .NET Core SDK 1.1.13 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.1/1.1.12/1.1.12.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/1.1) )\r\n\r\n* .NET Core 2.1.9 and .NET Core SDK 2.1.505 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.9/2.1.9.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.1) )\r\n\r\n* .NET Core 2.2.3 and .NET Core SDK 2.2.105 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.3/2.2.3.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.2) )\r\n\r\nA discussion issue is available at [core/2432](https://github.com/dotnet/core/issues/2432)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/103","RelatedDescription":"Open issue \"March 2019 .NET Updates\" (#103)"},{"Id":"415363751","IsPullRequest":false,"CreatedAt":"2019-02-27T22:49:51","Actor":"leecow","Number":"102","RawContent":null,"Title":"SDK Installers will remove previous patch versions","State":"open","Body":"The SDK Installers for Windows will upgrade patch versions in place within the same feature band. This will reduce the number of SDKs that are installed on programmer machines.\r\n\r\nFeature bands of the SDK are defined like 3.0.1nn. [Find out more about SDK version numbers](https://docs.microsoft.com/dotnet/core/versions/#versioning-details).\r\n\r\nThis means when .NET Core SDK 3.0.101 becomes available and is installed, .NET Core SDK 3.0.100 will be removed from the machine if it exists. When .NET Core SDK 3.0.200 becomes available and is installed on the same machine, .NET Core SDK versions like 3.0.101 will not be removed but stay side by side with 3.0.200.\r\n\r\nThis approach supports use of `global.json` which will roll forward across patch versions, but not feature bands of the SDK. Thus, upgrading via the SDK installer will not result in errors due to a missing SDK. Feature bands also align with side by side Visual Studio installations for those users that install SDKs for Visual Studio use. For example, Visual Studio 15.9 uses .NET Core SDK 2.2.500 but does not support .NET Core SDK 2.2.600.\r\n\r\nFind out how to [remove other .NET Core SDK versions here.](https://docs.microsoft.com/dotnet/core/versions/remove-runtime-sdk-versions).","Url":"https://github.com/dotnet/announcements/issues/102","RelatedDescription":"Open issue \"SDK Installers will remove previous patch versions\" (#102)"},{"Id":"410971363","IsPullRequest":false,"CreatedAt":"2019-02-15T22:24:40","Actor":"richlander","Number":"101","RawContent":null,"Title":"Publishing .NET Core images to Microsoft Container Registry (MCR)","State":"open","Body":"# Publishing .NET Core images to Microsoft Container Registry (MCR)\r\n\r\nMicrosoft teams are now publishing container images to the [Microsoft Container Registry](https://azure.microsoft.com/en-us/blog/microsoft-syndicates-container-catalog/). There are two primary reasons for this change:\r\n\r\n* Syndicate Microsoft-provided container images to multiple registries, like Docker Hub and Red Hat.\r\n* Use Microsoft Azure as a global CDN for delivering Microsoft-provided container images.\r\n\r\nYou will use and see MCR as a storage back-end for Microsoft images. The primary way you learn about Microsoft container images and tags will be through a registry, which for most users will continue to be Docker Hub. Most of the experience you've had browsing for .NET Core container images will continue unchanged with this new model. The Docker Hub URLs you've used for Microsoft repos will continue to work, and forward to updated locations on Docker Hub. Existing Docker Hub will images will be maintained as-is.\r\n\r\nSee [.NET Core Container Images now Published to Microsoft Container Registry](https://devblogs.microsoft.com/dotnet/net-core-container-images-now-published-to-microsoft-container-registry/) for the most updated information on our use of MCR.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #935](https://github.com/dotnet/dotnet-docker/issues/935)\r\n\r\n## Starting with .NET Core nightly repo\r\n\r\nOn the .NET team, we started our [transition to MCR](https://github.com/dotnet/dotnet-docker/issues/745) with the .NET Core \"nightly\" repo. [dotnet-nightly](dockerhub.com/r/microsoft/dotnet-nightly) is now hosted on MCR and syndicated to Docker Hub. We started with the nightly repo in order to discover and fix any challenges we found with this new model before we move our higher-traffic primary container repository.\r\n\r\nWe will start publishing [dotnet](dockerhub.com/r/microsoft/dotnet) to MCR a bit later, in either February or March. This issue will be updated when that happens.\r\n\r\n## Repo Split\r\n\r\nThe [.NET Core repo](https://hub.docker.com/r/microsoft/dotnet) currently includes 4 major categories of tags: \r\n\r\n* `sdk`\r\n* `aspnetcore-runtime`\r\n* `runtime` \r\n* `runtime-deps`\r\n\r\nProviding all of the tags in one place has helped with discoverability but made for a repo with an enormous README that can be challenging to navigate and consume. It is large enough that we exceeded Docker Hub README limits and had to artificially make it smaller.\r\n\r\nGoing forward, we will provide a repo for each of the tag categories listed above. We'll also provide a \"product repo\" that will hierarchicaly group all of our repos together. This will satisfy discoverability needs so that it will be easy to find the tags you want.\r\n\r\nYou can already see this experience with [microsoft-dotnet-core-nightly](https://hub.docker.com/_/microsoft-dotnet-core-nightly). There are now multiple repos for our nightly builds:\r\n\r\n* [.NET Core Nightly product repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly)\r\n* [.NET Core SDK Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-sdk/)\r\n* [.NET Core ASP.NET Core Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-aspnet/)\r\n* [.NET Core Runtime Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-runtime/)\r\n* [.NET Core Runtime-deps Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-runtime-deps/)\r\n\r\nThe same split will exist for the non-nightly stable repo (currently hosted at  [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet)) when we start publishing it to MCR and syndicating it back to DockerHub.\r\n\r\n## Changes to registry URL\r\n\r\nThe biggest change is that your Dockerfiles need to be updated to point to the MCR registry in order get access to new .NET Core container tags. The same change is required for scripts or human operations that pull images via `docker pull`.\r\n\r\nThe following example shows the registry path, repo and tag for the .NET Core 2.2 \"Nightly\" SDK on MCR:\r\n\r\n```console\r\nmcr.microsoft.com/dotnet/core-nightly/sdk:2.2\r\n```\r\n\r\nAs comparison, the following repo and tag have been used to date for the .NET Core 2.2 \"Nightly\" SDK on Docker Hub:\r\n\r\n```console\r\nmicrosoft/dotnet-nightly:2.2-sdk\r\n```\r\n\r\nThe new repo URL is provided at each of the news repos. For example, the new .NET Core SDK \"nightly\" repo provides a box on the right where you can copy and paste the correct MCR-based repo syntax that you can use for `docker pull` or in `FROM` statements in your Dockerfiles.\r\n\r\n![image](https://user-images.githubusercontent.com/2608468/52811702-95c5eb80-304a-11e9-8de8-e6ea1f4b4d75.png)\r\n\r\n## Servicing existing Docker Hub tags\r\n\r\nWe will continue to service existing non-version-specific or floating tags on Docker Hub while the associated .NET Core version is supported. For example the `microsoft/dotnet:2.1-sdk` tag is a floating tag that will continue to be serviced for the lifetime of .NET Core 2.1. You can continue using floating tags without issue.\r\n\r\nIf you use non-floating tags, like `microsoft/dotnet:2.1.504-sdk-alpine`, then you will need to update your Dockerfile to use a new non-floating tag. No new non-floating tags will be published to `microsoft/dotnet` and `microsoft/dotnet-nightly` after we fully transition to MCR.\r\n\r\n.NET Core 3.0 Preview 3 and later will only be made available on MCR.\r\n\r\n## Microsoft is a Verified Publisher\r\n\r\nUntil now, Microsoft-provided container images were considered \"community images\". As part of this change, we are re-classifying Microsoft as a \"verified publisher\" on Docker Hub. This designation should make it clearer that .NET and other Microsoft-provided images are coming from a verified source. There clearly was that expectation previously, but Docker is now making that clearer in the Docker Hub pages they host for Microsoft.\r\n\r\nWe will provide official vulnerability scanning Microsoft-provided images as a second phase of this transition.","Url":"https://github.com/dotnet/announcements/issues/101","RelatedDescription":"Open issue \"Publishing .NET Core images to Microsoft Container Registry (MCR)\" (#101)"},{"Id":"410784442","IsPullRequest":false,"CreatedAt":"2019-02-15T14:06:29","Actor":"TaraOverfield","Number":"100","RawContent":null,"Title":"RESOLVED: Advisory on February 2019 Security update for Windows 10 update 1809","State":"open","Body":"<strong><em>Final Update 2/19/19 @1:30 PM (PST)</em></strong><em>: This </em><em>advisory is now resolved with no action needed from Microsoft Customers. The issue was not applicable to any valid or supported configuration. There is no consequence for .NET 4.8 Preview customers. </em>\r\n\r\n<em>We strive to share timely information to protect our customer’s productivity, in this case, our finding was thankfully of no consequence for customers on supported configurations.</em>\r\n\r\n<del><em><strong>Update 2/15/19 @3:35 PM (PST)</strong></em><em>: As we continue our investigation, we are finding the issue to be restricted to a limited and isolated set of test-only systems that are using non-official versions of the .NET 4.8 Preview. As of 2/15/19 around 12:00 pm (PST) we further tightened our delivery mechanisms to ensure that the February .NET security updates are only deployed to their expected target systems.</em></del>\r\n\r\n<del><span>The </span><a href=\"https://blogs.msdn.microsoft.com/dotnet/2019/02/13/net-framework-february-2019-security-and-quality-rollup/\" rel=\"nofollow\">February 2019 Security and Quality Rollup for Windows 10 update 1809</a><span> was released earlier this week. We have received multiple customer reports of issues when a customer has installed .NET Framework 4.8 Preview then installed the February security update, <a href=\"https://support.microsoft.com/kb/4483452\" rel=\"nofollow\">4483452</a>.</span> These reports are specific to only to the scenario when a customer has installed both .NET Framework 4.8 Preview and the February security update.</del>\r\n\r\n<del>We are actively working on investigating and addressing this issue. If you installed the February 2019 security update and have not seen any negative behavior, we recommend that you leave your system as-is but closely monitor it and ensure that you apply upcoming .NET Framework updates.</del>\r\n\r\n<del>We will continue to update this <a href=\"https://github.com/dotnet/announcements/issues/100\" rel=\"nofollow\">post</a> as we have new information.</del>\r\n<h2><del>Guidance</del></h2>\r\n<del>We are working on guidance and will update this post and as we have new information.</del>\r\n<h2><del>Workaround</del></h2>\r\n<del>There are no known workarounds at this time.</del>\r\n<h2><del>Symptoms</del></h2>\r\n<del>After installing .NET Framework 4.8 Preview then the February 2019 security update, <a href=\"https://support.microsoft.com/kb/4483452\" rel=\"nofollow\">4483452</a>, Visual Studios will crash with this error message:</del>\r\n<p class=\"xxxxxmsonormal\"><del><b><span style=\"font-size: 10.5pt;font-family: 'Segoe UI',sans-serif;color: black\">\"Exception has been thrown by the target of an invocation.\"</span></b></del></p>","Url":"https://github.com/dotnet/announcements/issues/100","RelatedDescription":"Open issue \"RESOLVED: Advisory on February 2019 Security update for Windows 10 update 1809\" (#100)"},{"Id":"410455095","IsPullRequest":false,"CreatedAt":"2019-02-14T19:28:25","Actor":"richlander","Number":"99","RawContent":null,"Title":"Supporting new Alpine versions (for containers)","State":"open","Body":"# Supporting new Alpine versions (for containers)\r\n\r\n[Alpine 3.9](https://twitter.com/alpinelinux/status/1090416212822110214) was recently announced. Congratulations, Alpine team! On the .NET team, we are committed to supporting new Alpine versions quickly, and also need to define a policy for older versions. This policy only applies for the container images that we publish.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #933](https://github.com/dotnet/dotnet-docker/issues/933)\r\n\r\n## Policy\r\n\r\nWe intend to establish the following policy for supporting Alpine with .NET Core container images:\r\n\r\n* Support new Alpine versions within 60 days of release (hopefully much less).\r\n* Support n-1 Alpine versions for 3 months after we support a new Alpine version.\r\n\r\nNote: The [.NET Core support policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md) may be broader. This policy is specific to the container images we produce.\r\n\r\n## Plans\r\n\r\nWe're in the process of [fixing issues required to support Alpine 3.9](https://github.com/dotnet/dotnet-docker/issues/921). We expect that these issues will be resolved in February and that we'll be able to provide support for Alpine 3.9 in March.\r\n\r\nWe will produce Alpine 3.9 images for .NET Core 2.1, 2.2 and 3.0. Assuming we publish 3.9 images in March, we'll stop producing and supporting Alpine 3.7 and 3.8 images after June (2019).\r\n\r\n## Using Alpine-based .NET Core images\r\n\r\nWe produce a variety of Alpine-based images. You can either depend on a specific Alpine version, like with `microsoft/dotnet:2.2-sdk-alpine3.8` or opt to use the latest Alpine image we have to offer, like with `microsoft/dotnet:2.2-sdk-alpine`. Either are good choices. It is just a question of whether you want to make a conscious decision to move to later Alpine releases.\r\n\r\n## Support for ARM32?\r\n\r\nWe produce Alpine images for x64 (and ARM64, shortly). The [Alpine 3.9 announcement](https://twitter.com/alpinelinux/status/1090416212822110214) made mention of support for ARM32v7. We would like to enable .NET Core [Alpine-based images on ARM32](https://github.com/gliderlabs/docker-alpine/issues/463#issuecomment-460530395). We are patiently waiting for that to happen. If that's important to you, you should comment on that thread.","Url":"https://github.com/dotnet/announcements/issues/99","RelatedDescription":"Open issue \"Supporting new Alpine versions (for containers)\" (#99)"},{"Id":"409840927","IsPullRequest":false,"CreatedAt":"2019-02-13T14:48:21","Actor":"TaraOverfield","Number":"98","RawContent":null,"Title":"February 2019 .NET Updates","State":"open","Body":"# February 2019 .NET Updates\r\nThe following .NET updates were released in February 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n* [.NET Framework February 2019 Security and Quality Rollup - February 12, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/02/13/net-framework-february-2019-security-and-quality-rollup/)\r\n* [.NET Framework February 2019 Preview of Quality Rollup - February 19, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/02/19/net-framework-february-2019-preview-of-quality-rollup/)\r\n\r\n## .NET Support Policies\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/98","RelatedDescription":"Open issue \"February 2019 .NET Updates\" (#98)"},{"Id":"409436643","IsPullRequest":false,"CreatedAt":"2019-02-12T18:21:22","Actor":"leecow","Number":"97","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0657: .NET Core Domain Spoofing Vulnerability","State":"open","Body":"## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 1.0, 1.1, 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a domain spoofing vulnerability in .NET Framework and .NET Core which causes the meaning of a URI to change when International Domain Name encoding is applied. An attacker who successfully exploited the vulnerability could redirect a URI.\r\n\r\nThe security update addresses the vulnerability by disallowing certain Unicode characters from the URI.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/35265\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nMicrosoft has not identified any mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core 1.0 or 1.1 based application that uses the [System.Private.Uri](https://www.nuget.org/packages/System.Private.Uri/) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.Private.Uri | 4.3.0 | 4.3.1\r\n\r\nAny .NET Core 2.1 or 2.2 based application that uses the [Microsoft.NETCore.App](https://www.nuget.org/packages/Microsoft.NETCore.App) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nMicrosoft.NETCore.App | 2.1.0, 2.1.1, 2.1.2, 2.1.3, 2.1.4, 2.1.5, 2.1.6, 2.1.7, 2.2.0, 2.2.1 | 2.1.8, 2.2.2\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n#### Applications that use Microsoft.NetCore.App\r\n\r\n`System.Private.Uri` is distributed as part of the .NET Core 2.1 runtime. To check the currently installed runtimes, open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed, you'll see output like the following;\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your host version is 2.1.x and the highest `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\nIf your host version is 2.2.x and the highest 2.1.x `Microsoft.NETCore.App` runtime version is less than 2.2.1, you're vulnerable to this issue.\r\n\r\nYou will not see SDK versions if you have only installed the runtime.\r\n\r\n#### Applications not using Microsoft.NetCore.App\r\n\r\nThe affected assembly is also available separately as a NuGet package. If you are not using Microsoft.NetCore.App, you may still be affected if you are referencing the packages listed above.\r\n\r\n##### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file. They can be fixed by [editing the project file](#fixing-direct-dependencies) or using NuGet to update the dependency.\r\n\r\n##### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects\r\n\r\nThe `project.assets.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json)).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `System.Private.Uri/4.3.0` is a reference to version 4.3.0 of `System.Private.Uri`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\n#### Updating the version of Microsoft.NETCore.App\r\n\r\nIf your host version is a 2.1.x host you must install version 2.1.8 or later of the [.NET Core 2.1 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.1), or corresponding [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\nIf your host version is a 2.2.x you must install version 2.2.2 or later of the [.NET Core 2.2 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.2), or corresponding  [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\n#### <a name=\"fixing-direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Private.Uri\" Version=\"4.3.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.Private.Uri` version 4.3.0\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.Private.Uri` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Private.Uri\" Version=\"4.3.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"transitive-dependencies\"></a>Fixing transitive dependencies\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Private.Uri\" Version=\"4.3.0\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n##### Rebuilding your application\r\n\r\nFinally, you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2019-0657](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0657)\r\n\r\n### Revisions\r\n\r\nV1.0 (February 12, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-02-08_\r\n","Url":"https://github.com/dotnet/announcements/issues/97","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0657: .NET Core Domain Spoofing Vulnerability\" (#97)"},{"Id":"397026248","IsPullRequest":false,"CreatedAt":"2019-01-08T18:17:45","Actor":"leecow","Number":"96","RawContent":null,"Title":"January 2019 .NET Updates","State":"open","Body":"# January 2019 .NET Updates\r\n\r\nThe following .NET updates were released in January 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n\r\n* [.NET Framework January 2019 Preview of Quality Rollup - January 15, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/01/15/net-framework-january-2019-preview-of-quality-rollup/)\r\n* [.NET Framework January 2019 Security and Quality Rollup - January 8, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/01/08/net-framework-january-2019-security-and-quality-rollup/)\r\n* [.NET Framework January 22, 2018 Preview of Cumulative Update for Windows 10 version 1809 and Windows Server 2019 - January 22, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/01/22/net-framework-january-22-2018-preview-of-cumulative-update-for-windows-10-version-1809-and-windows-server-2019/)\r\n\r\n## .NET Core\r\n\r\n* .NET Core 2.1.7 and .NET Core SDK 2.1.503 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.7/2.1.7.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.1) )\r\n\r\n* .NET Core 2.2.1 and .NET Core SDK 2.2.102 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.1/2.2.1.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.2) )\r\n\r\nA discussion issue is available at [core/2210](https://github.com/dotnet/core/issues/2210)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/96","RelatedDescription":"Open issue \"January 2019 .NET Updates\" (#96)"},{"Id":"397020176","IsPullRequest":false,"CreatedAt":"2019-01-08T18:00:27","Actor":"blowdart","Number":"95","RawContent":null,"Title":" Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a tampering vulnerability exists when .NET Core improperly handles specially crafted files. An attacker who successfully exploited this vulnerability could write arbitrary files and directories to certain locations on a vulnerable system. However, an attacker would have limited control over the destination of the files and directories.\r\n\r\nTo exploit the vulnerability, an attacker must send a specially crafted file to a vulnerable system\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core handles these files.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/34427\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nIf your application does not extract ZIP compressed files it is unaffected.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the [System.IO.Compression.ZipFile](https://www.nuget.org/packages/System.IO.Compression.ZipFile/) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nMicrosoft.NETCore.App (System.IO.Compression.ZipFile) | 2.1.0, 2.1.1, 2.1.2, 2.1.3, 2.1.4, 2.1.5, 2.1.6 | 2.1.7\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n`System.IO.Compression.ZipFile` is distributed as part of the .NET Core 2.1 runtime. To check the currently installed runtimes, open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed, you'll see output like the following;\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your host version is 2.1.x and the highest `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\nIf your host version is 2.2.x and the highest 2.1.x `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\n\r\nYou will not see SDK versions if you have only installed the runtime.\r\n\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nIf your host version is a 2.1.x host you must install version 2.1.7 or later of the [.NET Core 2.1 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.1), or corresponding [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\nIf your host version is a 2.2.x you must install version 2.2.1 or later of the [.NET Core 2.2 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.2), or corresponding  [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\nFinally, you must restart your applications once an updated runtime or SDK is installed.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgments\r\n\r\n[Danny Grander](https://twitter.com/grander) of [Snyk](https://snyk.io/)\r\n\r\n### External Links\r\n\r\n[CVE-2018-8416](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-8416)\r\n\r\n### Revisions\r\n\r\nV1.1 (January 9, 2019): Correct affected pacakge table.\r\nV1.0 (January 8, 2019): Advisory published.\r\n\r\n_Version 1.1_\r\n\r\n_Last Updated 2019-01-09_\r\n\r\n","Url":"https://github.com/dotnet/announcements/issues/95","RelatedDescription":"Open issue \" Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability\" (#95)"},{"Id":"397020142","IsPullRequest":false,"CreatedAt":"2019-01-08T18:00:23","Actor":"blowdart","Number":"94","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of an information disclosure vulnerability exists in .NET Framework and .NET Core which allows bypassing Cross-origin Resource Sharing (CORS) configurations. An attacker who successfully exploited the vulnerability could retrieve content, that is normally restricted, from a web application.\r\n\r\nThe security update addresses the vulnerability by enforcing CORS configuration to prevent its bypass.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/34428\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nMicrosoft has not identified any mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the [System.Net.Http](https://www.nuget.org/packages/System.Net.Http/) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nMicrosoft.NETCore.App (System.Net.Http) | 2.1.0, 2.1.1, 2.1.2, 2.1.3, 2.1.4, 2.1.5, 2.1.6 | 2.1.7\r\nMicrosoft.NETCore.App (System.Net.Http) | 2.2.0 | 2.2.1\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n#### Applications that use Microsoft.NetCore.App\r\n\r\n`System.Net.Http` is distributed as part of the .NET Core 2.1 runtime. To check the currently installed runtimes, open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed, you'll see output like the following;\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your host version is 2.1.x and the highest `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\nIf your host version is 2.2.x and the highest 2.1.x `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\n\r\nYou will not see SDK versions if you have only installed the runtime.\r\n\r\n#### Applications not using Microsoft.NetCore.App\r\n\r\nThe affected assembly is also available separately as a NuGet package. If you are not using Microsoft.NetCore.App, you may still be affected if you are referencing the packages listed above.\r\n\r\n##### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file. They can be fixed by [editing the project file](#fixing-direct-dependencies) or using NuGet to update the dependency.\r\n\r\n##### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects\r\n\r\nThe `project.assets.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json)).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `SSystem.Net.Http/4.3.0` is a reference to version 4.3.0 of `System.Net.Http`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\n#### Updating the version of Microsoft.NETCore.App\r\n\r\nIf your host version is a 2.1.x host you must install version 2.1.7 or later of the [.NET Core 2.1 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.1), or corresponding [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\nIf your host version is a 2.2.x you must install version 2.2.1 or later of the [.NET Core 2.2 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.2), or corresponding  [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\n#### <a name=\"fixing-direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.Net.Http` version 4.3.0\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.IO.Pipelines` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.5\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"transitive-dependencies\"></a>Fixing transitive dependencies\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.5\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n##### Rebuilding your application\r\n\r\nFinally, you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2019-0545](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0545)\r\n\r\n### Revisions\r\n\r\nV1.1 (January 9, 2019): Correct affected package table. \r\nV1.0 (January 8, 2019): Advisory published.\r\n\r\n_Version 1.1_\r\n\r\n_Last Updated 2019-01-09_\r\n","Url":"https://github.com/dotnet/announcements/issues/94","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability\" (#94)"},{"Id":"390948658","IsPullRequest":false,"CreatedAt":"2018-12-14T03:22:58","Actor":"wu-yafeng","Number":"93","RawContent":null,"Title":"Docker image with tag '2.2-aspnetcore-runtime' is not compatible","State":"closed","Body":"1. Install  .NET Core 2.2.100 sdk\r\n2. Create a new 'AspNetCore Web Api' by using Visual Studio 2017,and enbale docker support.\r\n3. F5 ,the Output Windows shows:\r\n>It was not possible to find any compatible framework version\r\n>The specified framework 'Microsoft.AspNetCore.App', version '2.2.0' was not found.\r\n>  - Check application dependencies and target a framework version installed at:\r\n>      /usr/share/dotnet/\r\n>  - Installing .NET Core prerequisites might help resolve this problem:\r\n>     http://go.microsoft.com/fwlink/?LinkID=798306&clcid=0x409\r\n>  - The .NET Core framework and SDK can be installed from:\r\n>      https://aka.ms/dotnet-download\r\n>  - The following versions are installed:\r\n>      2.2.0-preview3-35497 at [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]","Url":"https://github.com/dotnet/announcements/issues/93","RelatedDescription":"Closed issue \"Docker image with tag '2.2-aspnetcore-runtime' is not compatible\" (#93)"}],"ResultType":"GitHubIssue"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1173731665853607936","CreatedAt":"2019-09-16T22:53:30+00:00","UserScreenname":"dotnet","Text":"Announcing .NET Core 3.0 Release Candidate 1 https://t.co/WCqRtfS9zC","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":183,"FavoriteCount":111,"RawContent":null},{"Id":"1173731477592236032","CreatedAt":"2019-09-16T22:52:45+00:00","UserScreenname":"dotnet","Text":"https://t.co/iOiV9qNspl Core and Blazor updates in .NET Core 3.0 Release Candidate 1 https://t.co/mt3nPIdNQc","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":31,"FavoriteCount":22,"RawContent":null},{"Id":"1173681840550481921","CreatedAt":"2019-09-16T19:35:31+00:00","UserScreenname":"dotnet","Text":"83 speakers are polishing their demos. The 77 session agenda is set to roll for over 40 hours. 200+ local events ha… https://t.co/CeCGHJ2eiC","Source":"<a href=\"https://prod2.sprinklr.com\" rel=\"nofollow\">Sprinklr Publisher</a>","RetweetCount":1712,"FavoriteCount":117,"RawContent":null},{"Id":"1173678085071233024","CreatedAt":"2019-09-16T19:20:36+00:00","UserScreenname":"dotnet","Text":"Did you know .NET runs on Linux, macOS and Windows? https://t.co/LhrLWuFJyO","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":32,"FavoriteCount":19,"RawContent":null},{"Id":"1169655923788242945","CreatedAt":"2019-09-05T16:57:58+00:00","UserScreenname":"dotnet","Text":"Join us live right now for another @dotnet #CommunityStandup with live demos and QA https://t.co/ptNZnKrqoO","Source":"<a href=\"https://www.elgato.com/gaming\" rel=\"nofollow\">Elgato Stream Deck</a>","RetweetCount":29,"FavoriteCount":5,"RawContent":null},{"Id":"1169325641541357568","CreatedAt":"2019-09-04T19:05:32+00:00","UserScreenname":"dotnet","Text":"Announcing .NET Core 3.0 Preview 9 https://t.co/eOTg9Nc4Su","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":428,"FavoriteCount":222,"RawContent":null},{"Id":"1169325512033878016","CreatedAt":"2019-09-04T19:05:01+00:00","UserScreenname":"dotnet","Text":"https://t.co/iOiV9qNspl Core and Blazor updates in .NET Core 3.0 Preview 9 https://t.co/esDON00GK9","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":155,"FavoriteCount":85,"RawContent":null},{"Id":"1169016977245032449","CreatedAt":"2019-09-03T22:39:01+00:00","UserScreenname":"dotnet","Text":"Do you care about performance or low-level stuff like SIMD and popcnt? Then this post is for you. https://t.co/rIpKfNwSeu","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":62,"FavoriteCount":24,"RawContent":null}]}},"RunOn":"2019-09-17T05:30:36.4658775Z","RunDurationInMilliseconds":15654}