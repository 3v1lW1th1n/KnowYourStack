{"Data":{"Blog":{"FeedItems":[{"Title":"Recent updates for publishing","PublishedOn":"2017-10-31T18:18:45+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We have recently added a few interesting features for ASP.NET publishing. The updates include: Container Registry Publish Updates Create publish profile without publishing In this post, we will briefly describe these updates. We will get started with the container related news. Container Registry Publish Updates Container development (e.g. Docker) has grown in popularity recently, including... <a aria-label=\"read more about Recent updates for publishing\" href=\"https://blogs.msdn.microsoft.com/webdev/2017/10/31/recent-updates-for-publishing/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/webdev/2017/10/31/recent-updates-for-publishing/","RawContent":null},{"Title":"Sharing Configuration in ASP.NET Core SPA Scenarios","PublishedOn":"2017-10-27T15:17:34+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"This is a guest post from Mike Rousos ASP.NET Core 2.0 recently released and, with it, came some new templates, including new project templates for single-page applications (SPA) served from an ASP.NET Core backend. These templates make it easy to setup a web application with a rich JavaScript frontend and powerful ASP.NET Core backend. Even... <a aria-label=\"read more about Sharing Configuration in ASP.NET Core SPA Scenarios\" href=\"https://blogs.msdn.microsoft.com/webdev/2017/10/27/sharing-configuration-in-asp-net-core-spa-scenarios/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/webdev/2017/10/27/sharing-configuration-in-asp-net-core-spa-scenarios/","RawContent":null},{"Title":"User accounts made easy with Azure","PublishedOn":"2017-10-17T21:01:45+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"One of the most common requirements for web applications is for users create accounts for the purpose of access control and personalization. While ASP.NET templates have always made it easy to create an application that uses a database you control to register and track user accounts, that introduces other complications over the long term. As... <a aria-label=\"read more about User accounts made easy with Azure\" href=\"https://blogs.msdn.microsoft.com/webdev/2017/10/17/user-accounts-made-easy-with-azure/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/webdev/2017/10/17/user-accounts-made-easy-with-azure/","RawContent":null},{"Title":"Announcing SignalR for ASP.NET Core Alpha 2","PublishedOn":"2017-10-09T22:46:08+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"A few weeks ago we released the alpha1 version of SignalR for ASP.NET Core 2.0. Today we are pleased to announce a release of the alpha2 version of SignalR for ASP.NET Core 2.0. This release contains a number of changes (including API changes) and improvements. Notable Changes The JSON hub protocol now uses camel casing... <a aria-label=\"read more about Announcing SignalR for ASP.NET Core Alpha 2\" href=\"https://blogs.msdn.microsoft.com/webdev/2017/10/09/announcing-signalr-for-asp-net-core-alpha-2/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/webdev/2017/10/09/announcing-signalr-for-asp-net-core-alpha-2/","RawContent":null},{"Title":"Announcing SignalR (alpha) for ASP.NET Core 2.0","PublishedOn":"2017-09-14T23:41:29+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today we are glad to announce an alpha release of SignalR for ASP.NET Core 2.0. This is the first official preview release of a new SignalR that is compatible with ASP.NET Core. It consists of a server component, a .NET client targeting .NET Standard 2.0 and a JavaScript/TypeScript client. What’s New? SignalR for ASP.NET Core... <a aria-label=\"read more about Announcing SignalR (alpha) for ASP.NET Core 2.0\" href=\"https://blogs.msdn.microsoft.com/webdev/2017/09/14/announcing-signalr-for-asp-net-core-2-0/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/webdev/2017/09/14/announcing-signalr-for-asp-net-core-2-0/","RawContent":null},{"Title":"Welcome to the New Blog Template for ASP.NET Developers","PublishedOn":"2017-09-08T17:59:41+00:00","CommentsCount":4,"FacebookCount":0,"Summary":"By Juliet Daniel, Lucas Isaza, and Uma Lakshminarayan Have you always wanted to build a blog or other web application but haven&#8217;t had the time or educational resources to learn? With our blog template, available in our GitHub repo, you can create your web application fast and effortlessly, and even learn to master the new... <a aria-label=\"read more about Welcome to the New Blog Template for ASP.NET Developers\" href=\"https://blogs.msdn.microsoft.com/webdev/2017/09/08/welcome-to-the-new-blog-template-for-asp-net-developers/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/webdev/2017/09/08/welcome-to-the-new-blog-template-for-asp-net-developers/","RawContent":null},{"Title":"Getting Started with Windows Containers","PublishedOn":"2017-09-07T19:51:33+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Containers provide a way of running an application in a controlled environment, isolated from other applications running on the machine, and from the underlying infrastructure. They are a cost-effective way of abstracting away the machine, ensuring that the application runs in the same conditions, from development, to test, to production. Containers started in Linux, as... <a aria-label=\"read more about Getting Started with Windows Containers\" href=\"https://blogs.msdn.microsoft.com/webdev/2017/09/07/getting-started-with-windows-containers/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/webdev/2017/09/07/getting-started-with-windows-containers/","RawContent":null},{"Title":"ASP.NET Core 2.0 Features","PublishedOn":"2017-08-25T16:30:07+00:00","CommentsCount":22,"FacebookCount":0,"Summary":"Last week we announced the release of ASP.NET Core 2.0 and described some top new features, including Razor Pages, new and updated templates, and Application Insights integration. In this blog post we are going to dig into more details of features in 2.0. This list is not exhaustive or in any particular order, but highlights... <a aria-label=\"read more about ASP.NET Core 2.0 Features\" href=\"https://blogs.msdn.microsoft.com/webdev/2017/08/25/asp-net-core-2-0-features-1/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/webdev/2017/08/25/asp-net-core-2-0-features-1/","RawContent":null},{"Title":"Announcing ASP.NET Core 2.0","PublishedOn":"2017-08-14T16:01:14+00:00","CommentsCount":45,"FacebookCount":0,"Summary":"The ASP.NET team is proud to announce general availability of ASP.NET Core 2.0.  This release features compatibility with .NET Core 2.0, tooling support in Visual Studio 2017 version 15.3, and the new Razor Pages user-interface design paradigm.  For a full list of updates, you can read the release notes and you can check the list... <a aria-label=\"read more about Announcing ASP.NET Core 2.0\" href=\"https://blogs.msdn.microsoft.com/webdev/2017/08/14/announcing-asp-net-core-2-0/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/webdev/2017/08/14/announcing-asp-net-core-2-0/","RawContent":null},{"Title":"Development time IIS support for ASP.NET Core Applications","PublishedOn":"2017-07-14T01:56:39+00:00","CommentsCount":13,"FacebookCount":0,"Summary":"With a recent update to Visual Studio 2017, we have added support for debugging ASP.NET Core applications against IIS. This blog post will walk you through enabling this feature and setting up your project to use this feature. Getting Started To get started: You need to install Visual Studio 2017 (version 15.3) Preview (it will... <a aria-label=\"read more about Development time IIS support for ASP.NET Core Applications\" href=\"https://blogs.msdn.microsoft.com/webdev/2017/07/13/development-time-iis-support-for-asp-net-core-applications/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/webdev/2017/07/13/development-time-iis-support-for-asp-net-core-applications/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"6793003293","Type":"IssuesEvent","CreatedAt":"2017-11-01T04:25:29","Actor":"zuosc","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Home/issues/2264","RelatedDescription":"Opened issue \"Hi,where can i find the netcore icon \" (#2264) at aspnet/Home","RelatedBody":"![qq 20171101122214](https://user-images.githubusercontent.com/8411781/32259957-664d3cb8-beff-11e7-99aa-0f57b0e2802a.png)\r\n\r\n\r\nas marked in the picture。\r\n\r\nAnd I want some high resolution picture.\r\n\r\nThank you!"},{"Id":"6790477030","Type":"IssuesEvent","CreatedAt":"2017-10-31T16:30:44","Actor":"BrennanConroy","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Home/issues/2263","RelatedDescription":"Closed issue \"Streaming IObservable<T> to specific client and not all connected clients.\" (#2263) at aspnet/Home","RelatedBody":"Hello,\r\n\r\nI would like to know if there's a way to Stream an IObservable<T> to a specific client. The StockTickr example shows a way to Stream stocks but it is streaming for all connected clients.  Can we stream different data depending on the connected client's request? \r\n\r\n```\r\n  public IObservable<Stock> StreamStocks()\r\n  {\r\n       return _stockTicker.StreamStocks();       \r\n  }\r\n```\r\n\r\n[StockTickr Example](https://github.com/aspnet/SignalR-samples/tree/master/StockTickR/StockTickRApp)"},{"Id":"6790446220","Type":"IssuesEvent","CreatedAt":"2017-10-31T16:25:19","Actor":"Sabdeth","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Home/issues/2263","RelatedDescription":"Opened issue \"Streaming IObservable<T> to specific client and not all connected clients.\" (#2263) at aspnet/Home","RelatedBody":"Hello,\r\n\r\nI would like to know if there's a way to Stream an IObservable<T> to a specific client. The StockTickr example shows a way to Stream stocks but it is streaming for all connected clients.  Can we stream different data depending on the connected client's request? \r\n\r\n```\r\n  public IObservable<Stock> StreamStocks()\r\n        {\r\n            return _stockTicker.StreamStocks();       \r\n        }\r\n```\r\n\r\n[StockTickr Example](https://github.com/aspnet/SignalR-samples/tree/master/StockTickR/StockTickRApp)"},{"Id":"6787188978","Type":"IssuesEvent","CreatedAt":"2017-10-31T02:26:13","Actor":"suejon","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Home/issues/2262","RelatedDescription":"Opened issue \"ASP .NET Core: Sporadic 503 responses from web app hosted on azure services \" (#2262) at aspnet/Home","RelatedBody":"My web app is hosted on azure and will run normally for about 3 - 4 days before it fails and returns 503 messages to requests. This issue is resolved after a restart but occurs again after a few days. \r\n\r\nI am running ASP .NET Core 1.1 but targeting the NET461\r\n\r\nI have contacted the Azure support team and they have indicated that these 503 messages are related to the web app and not the Azure hosting platform. Here is the FREB trace given:\r\n\r\n`#1 GENERAL_REQUEST_START @0ms\r\n|#25 HANDLER_CHANGED @0ms\r\nOldHandler: , NewHandler: aspNetCore, NewHandlerType: \r\n|#73 NOTIFY_MODULE_START @0ms\r\nModule: AspNetCoreModule, Notification: EXECUTE_REQUEST_HANDLER\r\n|#75 GENERAL_REQUEST_START @0ms\r\n|#81 HANDLER_CHANGED @0ms\r\nOldHandler: , NewHandler: aspNetCore, NewHandlerType: \r\n|#129 NOTIFY_MODULE_START @0ms\r\nModule: AspNetCoreModule, Notification: EXECUTE_REQUEST_HANDLER\r\n|#130 MODULE_SET_RESPONSE_STATUS_ERROR @0ms\r\nModule: AspNetCoreModule, Notification: EXECUTE_REQUEST_HANDLER, Status: 503, SubStatus: 0, HttpReason: Service Unavailable, Win32ErrorCode: 0x00000000, ConfigException: \r\n|#131 NOTIFY_MODULE_END @0ms\r\n`\r\nThe Azure support worker indicated that this issue could either have been related to the ASP .NET Core framework or the SignalR (.NET) being used in the app.\r\n\r\nAny ideas or help on this issue would be great\r\n"},{"Id":"6784040912","Type":"IssuesEvent","CreatedAt":"2017-10-30T14:10:46","Actor":"nixxholas","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Home/issues/2261","RelatedDescription":"Opened issue \"Bootstrap 4 Beta deprecation of Bower\" (#2261) at aspnet/Home","RelatedBody":"https://github.com/twbs/bootstrap/issues/24525#issuecomment-340321193\r\n\r\nThis issue is linked to bootstrap. Question is, will the templates update as well? This is very unhealthy for newcomers to .NET Core. A viable replacement for the current template should be present."}],"ResultType":"GitHubEvent"},"SignalR":{"Events":[{"Id":"6791873448","Type":"PullRequestEvent","CreatedAt":"2017-10-31T21:18:21","Actor":"natemcmaster","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/SignalR/pull/1065","RelatedDescription":"Merged pull request \"Specify NodeJS as a required toolset to build this repo\" (#1065) at aspnet/SignalR","RelatedBody":"Fails the build early if NodeJS is not available on the machine or is too old.\r\n\r\ncref https://github.com/aspnet/BuildTools/pull/448"},{"Id":"6791817501","Type":"PullRequestEvent","CreatedAt":"2017-10-31T21:04:54","Actor":"moozzyk","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/SignalR/pull/1073","RelatedDescription":"Opened pull request \"Replacing StreamCompletion with StreamInvocation\" (#1073) at aspnet/SignalR","RelatedBody":"Fixes #1053\r\n\r\nPreviously if the client used `StreamAsync` method to invoke a non-streaming hub method or `InvokeAsync` to invoke a streaming hub method it was the client who rejected the call based on the completion message kind it received. This did not work in some cases (e.g. #1053) where if the server could not resolve the method it could not tell whether the method the client wanted to call was a streaming or non-streaming so it would send just a regular completion message. If the client invoked the method that could not be resolved by the server with StreamAsync, it would then throw an error saying that non-streaming methods should be invoked with InvokeAsync hiding the actual problem which is that the method should not be resolved. A better way of doing this is to have separate Invocation messages - one for streaming and one for non-streaming methods. This way the server has all information to decide if the invocation request matches the method and is able to reject non-matching invocations with an error without even invoking the method (as it happened previously). "},{"Id":"6791576641","Type":"PullRequestEvent","CreatedAt":"2017-10-31T20:10:09","Actor":"BrennanConroy","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/SignalR/pull/1072","RelatedDescription":"Opened pull request \"[Redis] Don't wait for group ack when you're the only server\" (#1072) at aspnet/SignalR","RelatedBody":""},{"Id":"6790766361","Type":"PullRequestEvent","CreatedAt":"2017-10-31T17:22:39","Actor":"natemcmaster","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/SignalR/pull/1071","RelatedDescription":"Opened pull request \"Pin package and tool versions to make build more repeatable\" (#1071) at aspnet/SignalR","RelatedBody":"Part of https://github.com/aspnet/Universe/issues/575 and https://github.com/aspnet/KoreBuild/issues/239\r\n\r\nThis removes floating versions of dependencies. This includes the korebuild version and versions used by PackageReference's. This solves issues with being unable to build source code when the packages on our myget feeds change."},{"Id":"6790369608","Type":"PullRequestEvent","CreatedAt":"2017-10-31T16:11:47","Actor":"BrennanConroy","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/SignalR/pull/1069","RelatedDescription":"Opened pull request \"Handle errors in Redis subscription callbacks\" (#1069) at aspnet/SignalR","RelatedBody":"https://github.com/aspnet/SignalR/issues/1054"}],"ResultType":"GitHubEvent"},"Mvc":{"Events":[{"Id":"6792707858","Type":"PullRequestEvent","CreatedAt":"2017-11-01T02:18:15","Actor":"natemcmaster","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/Mvc/pull/7013","RelatedDescription":"Merged pull request \"Pin tool and package versions to make builds more repeatable\" (#7013) at aspnet/Mvc","RelatedBody":"Part of aspnet/Universe#575 and aspnet/KoreBuild#239\r\n\r\nThis removes floating versions of dependencies. This includes the korebuild version and versions used by PackageReference's.\r\n\r\nChanges:\r\n - build.cmd /t:Pin is no longer required to use Mvc.sln\r\n - (script generated) replace PackageLineup with MSBuild variables for dependencies versions\r\n"},{"Id":"6792515469","Type":"IssuesEvent","CreatedAt":"2017-11-01T00:54:32","Actor":"JunTaoLuo","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Mvc/issues/7009","RelatedDescription":"Closed issue \"Too much file generated after publishing\" (#7009) at aspnet/Mvc","RelatedBody":"I have a solution with this structure:\r\n``` js\r\n-- Core (Services etc...)\r\n-- Core.Tests (tests, empty...)\r\n-- Web (Controllers)\r\n```\r\nWhen I run dotnet publish, it generates lots of folders and dll. How can I reduce generated files? It looks like I'm doing something wrong.\r\n\r\nCore.csproj (omitted some libraries for brevity):\r\n\r\n``` xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.All\" Version=\"2.0.0\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.SignalR\" Version=\"1.0.0-alpha1-final\" />\r\n    <PackageReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Design\" Version=\"2.0.0\" PrivateAssets=\"All\" />\r\n    <PackageReference Include=\"Microsoft.EntityFrameworkCore.Tools\" Version=\"2.0.0\" PrivateAssets=\"All\" />\r\n    <PackageReference Include=\"Microsoft.EntityFrameworkCore.Design\" Version=\"2.0.0\" />\r\n    <PackageReference Include=\"MySql.Data.Core\" Version=\"7.0.4-IR-191\" />\r\n    <PackageReference Include=\"Pomelo.EntityFrameworkCore.MySql\" Version=\"2.0.0-rc-*\" />\r\n    <PackageReference Include=\"Sendgrid\" Version=\"9.9.0\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <DotNetCliToolReference Include=\"Microsoft.EntityFrameworkCore.Tools.DotNet\" Version=\"2.0.0\" />\r\n    <DotNetCliToolReference Include=\"Microsoft.Extensions.SecretManager.Tools\" Version=\"2.0.0\" />\r\n    <DotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n\r\n```\r\nWeb.csproj:\r\n\r\n``` xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <ProjectReference Include=\"..\\Core\\Core.csproj\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <DotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <Compile Remove=\"wwwroot\\**\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <EmbeddedResource Remove=\"wwwroot\\**\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <None Remove=\"wwwroot\\**\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nGenerated web.deps.json (really tooo long): https://pastebin.com/0Q1i8V08\r\nFolders under /publish:\r\n\r\n``` js\r\n.\r\n├── Client\r\n│   └── package.json\r\n├── Core.dll\r\n├── Core.pdb\r\n├── EdjCase.JsonRpc.Client.dll\r\n├── EdjCase.JsonRpc.Core.dll\r\n├── Google.Protobuf.dll\r\n├── Microsoft.AI.DependencyCollector.dll\r\n├── Microsoft.ApplicationInsights.AspNetCore.dll\r\n├── Microsoft.ApplicationInsights.dll\r\n├── Microsoft.AspNetCore.Antiforgery.dll\r\n├── Microsoft.AspNetCore.ApplicationInsights.HostingStartup.dll\r\n├── Microsoft.AspNetCore.Authentication.Abstractions.dll\r\n├── Microsoft.AspNetCore.Authentication.Cookies.dll\r\n├── Microsoft.AspNetCore.Authentication.Core.dll\r\n├── Microsoft.AspNetCore.Authentication.Facebook.dll\r\n├── Microsoft.AspNetCore.Authentication.Google.dll\r\n├── Microsoft.AspNetCore.Authentication.JwtBearer.dll\r\n├── Microsoft.AspNetCore.Authentication.MicrosoftAccount.dll\r\n├── Microsoft.AspNetCore.Authentication.OAuth.dll\r\n├── Microsoft.AspNetCore.Authentication.OpenIdConnect.dll\r\n├── Microsoft.AspNetCore.Authentication.Twitter.dll\r\n├── Microsoft.AspNetCore.Authentication.dll\r\n├── Microsoft.AspNetCore.Authorization.Policy.dll\r\n├── Microsoft.AspNetCore.Authorization.dll\r\n├── Microsoft.AspNetCore.AzureAppServices.HostingStartup.dll\r\n├── Microsoft.AspNetCore.AzureAppServicesIntegration.dll\r\n├── Microsoft.AspNetCore.CookiePolicy.dll\r\n├── Microsoft.AspNetCore.Cors.dll\r\n├── Microsoft.AspNetCore.Cryptography.Internal.dll\r\n├── Microsoft.AspNetCore.Cryptography.KeyDerivation.dll\r\n├── Microsoft.AspNetCore.DataProtection.Abstractions.dll\r\n├── Microsoft.AspNetCore.DataProtection.AzureStorage.dll\r\n├── Microsoft.AspNetCore.DataProtection.Extensions.dll\r\n├── Microsoft.AspNetCore.DataProtection.dll\r\n├── Microsoft.AspNetCore.Diagnostics.Abstractions.dll\r\n├── Microsoft.AspNetCore.Diagnostics.EntityFrameworkCore.dll\r\n├── Microsoft.AspNetCore.Diagnostics.dll\r\n├── Microsoft.AspNetCore.Hosting.Abstractions.dll\r\n├── Microsoft.AspNetCore.Hosting.Server.Abstractions.dll\r\n├── Microsoft.AspNetCore.Hosting.dll\r\n├── Microsoft.AspNetCore.Html.Abstractions.dll\r\n├── Microsoft.AspNetCore.Http.Abstractions.dll\r\n├── Microsoft.AspNetCore.Http.Extensions.dll\r\n├── Microsoft.AspNetCore.Http.Features.dll\r\n├── Microsoft.AspNetCore.Http.dll\r\n├── Microsoft.AspNetCore.HttpOverrides.dll\r\n├── Microsoft.AspNetCore.Identity.EntityFrameworkCore.dll\r\n├── Microsoft.AspNetCore.Identity.dll\r\n├── Microsoft.AspNetCore.JsonPatch.dll\r\n├── Microsoft.AspNetCore.Localization.Routing.dll\r\n├── Microsoft.AspNetCore.Localization.dll\r\n├── Microsoft.AspNetCore.MiddlewareAnalysis.dll\r\n├── Microsoft.AspNetCore.Mvc.Abstractions.dll\r\n├── Microsoft.AspNetCore.Mvc.ApiExplorer.dll\r\n├── Microsoft.AspNetCore.Mvc.Core.dll\r\n├── Microsoft.AspNetCore.Mvc.Cors.dll\r\n├── Microsoft.AspNetCore.Mvc.DataAnnotations.dll\r\n├── Microsoft.AspNetCore.Mvc.Formatters.Json.dll\r\n├── Microsoft.AspNetCore.Mvc.Formatters.Xml.dll\r\n├── Microsoft.AspNetCore.Mvc.Localization.dll\r\n├── Microsoft.AspNetCore.Mvc.Razor.Extensions.dll\r\n├── Microsoft.AspNetCore.Mvc.Razor.dll\r\n├── Microsoft.AspNetCore.Mvc.RazorPages.dll\r\n├── Microsoft.AspNetCore.Mvc.TagHelpers.dll\r\n├── Microsoft.AspNetCore.Mvc.ViewFeatures.dll\r\n├── Microsoft.AspNetCore.Mvc.dll\r\n├── Microsoft.AspNetCore.NodeServices.dll\r\n├── Microsoft.AspNetCore.Owin.dll\r\n├── Microsoft.AspNetCore.Razor.Language.dll\r\n├── Microsoft.AspNetCore.Razor.Runtime.dll\r\n├── Microsoft.AspNetCore.Razor.dll\r\n├── Microsoft.AspNetCore.ResponseCaching.Abstractions.dll\r\n├── Microsoft.AspNetCore.ResponseCaching.dll\r\n├── Microsoft.AspNetCore.ResponseCompression.dll\r\n├── Microsoft.AspNetCore.Rewrite.dll\r\n├── Microsoft.AspNetCore.Routing.Abstractions.dll\r\n├── Microsoft.AspNetCore.Routing.dll\r\n├── Microsoft.AspNetCore.Server.HttpSys.dll\r\n├── Microsoft.AspNetCore.Server.IISIntegration.dll\r\n├── Microsoft.AspNetCore.Server.Kestrel.Core.dll\r\n├── Microsoft.AspNetCore.Server.Kestrel.Https.dll\r\n├── Microsoft.AspNetCore.Server.Kestrel.Transport.Abstractions.dll\r\n├── Microsoft.AspNetCore.Server.Kestrel.Transport.Libuv.dll\r\n├── Microsoft.AspNetCore.Server.Kestrel.dll\r\n├── Microsoft.AspNetCore.Session.dll\r\n├── Microsoft.AspNetCore.SignalR.Common.dll\r\n├── Microsoft.AspNetCore.SignalR.Core.dll\r\n├── Microsoft.AspNetCore.SignalR.dll\r\n├── Microsoft.AspNetCore.Sockets.Abstractions.dll\r\n├── Microsoft.AspNetCore.Sockets.Common.Http.dll\r\n├── Microsoft.AspNetCore.Sockets.Http.dll\r\n├── Microsoft.AspNetCore.Sockets.dll\r\n├── Microsoft.AspNetCore.SpaServices.dll\r\n├── Microsoft.AspNetCore.StaticFiles.dll\r\n├── Microsoft.AspNetCore.WebSockets.dll\r\n├── Microsoft.AspNetCore.WebUtilities.dll\r\n├── Microsoft.AspNetCore.dll\r\n├── Microsoft.Azure.KeyVault.WebKey.dll\r\n├── Microsoft.Azure.KeyVault.dll\r\n├── Microsoft.CodeAnalysis.CSharp.dll\r\n├── Microsoft.CodeAnalysis.Razor.dll\r\n├── Microsoft.CodeAnalysis.dll\r\n├── Microsoft.Data.Edm.dll\r\n├── Microsoft.Data.OData.dll\r\n├── Microsoft.Data.Sqlite.dll\r\n├── Microsoft.DotNet.PlatformAbstractions.dll\r\n├── Microsoft.EntityFrameworkCore.Design.dll\r\n├── Microsoft.EntityFrameworkCore.InMemory.dll\r\n├── Microsoft.EntityFrameworkCore.Relational.dll\r\n├── Microsoft.EntityFrameworkCore.SqlServer.dll\r\n├── Microsoft.EntityFrameworkCore.Sqlite.dll\r\n├── Microsoft.EntityFrameworkCore.dll\r\n├── Microsoft.Extensions.Caching.Abstractions.dll\r\n├── Microsoft.Extensions.Caching.Memory.dll\r\n├── Microsoft.Extensions.Caching.Redis.dll\r\n├── Microsoft.Extensions.Caching.SqlServer.dll\r\n├── Microsoft.Extensions.Configuration.Abstractions.dll\r\n├── Microsoft.Extensions.Configuration.AzureKeyVault.dll\r\n├── Microsoft.Extensions.Configuration.Binder.dll\r\n├── Microsoft.Extensions.Configuration.CommandLine.dll\r\n├── Microsoft.Extensions.Configuration.EnvironmentVariables.dll\r\n├── Microsoft.Extensions.Configuration.FileExtensions.dll\r\n├── Microsoft.Extensions.Configuration.Ini.dll\r\n├── Microsoft.Extensions.Configuration.Json.dll\r\n├── Microsoft.Extensions.Configuration.UserSecrets.dll\r\n├── Microsoft.Extensions.Configuration.Xml.dll\r\n├── Microsoft.Extensions.Configuration.dll\r\n├── Microsoft.Extensions.DependencyInjection.Abstractions.dll\r\n├── Microsoft.Extensions.DependencyInjection.dll\r\n├── Microsoft.Extensions.DependencyModel.dll\r\n├── Microsoft.Extensions.DiagnosticAdapter.dll\r\n├── Microsoft.Extensions.FileProviders.Abstractions.dll\r\n├── Microsoft.Extensions.FileProviders.Composite.dll\r\n├── Microsoft.Extensions.FileProviders.Embedded.dll\r\n├── Microsoft.Extensions.FileProviders.Physical.dll\r\n├── Microsoft.Extensions.FileSystemGlobbing.dll\r\n├── Microsoft.Extensions.Hosting.Abstractions.dll\r\n├── Microsoft.Extensions.Identity.Core.dll\r\n├── Microsoft.Extensions.Identity.Stores.dll\r\n├── Microsoft.Extensions.Localization.Abstractions.dll\r\n├── Microsoft.Extensions.Localization.dll\r\n├── Microsoft.Extensions.Logging.Abstractions.dll\r\n├── Microsoft.Extensions.Logging.AzureAppServices.dll\r\n├── Microsoft.Extensions.Logging.Configuration.dll\r\n├── Microsoft.Extensions.Logging.Console.dll\r\n├── Microsoft.Extensions.Logging.Debug.dll\r\n├── Microsoft.Extensions.Logging.EventSource.dll\r\n├── Microsoft.Extensions.Logging.TraceSource.dll\r\n├── Microsoft.Extensions.Logging.dll\r\n├── Microsoft.Extensions.ObjectPool.dll\r\n├── Microsoft.Extensions.Options.ConfigurationExtensions.dll\r\n├── Microsoft.Extensions.Options.dll\r\n├── Microsoft.Extensions.PlatformAbstractions.dll\r\n├── Microsoft.Extensions.Primitives.dll\r\n├── Microsoft.Extensions.WebEncoders.dll\r\n├── Microsoft.IdentityModel.Clients.ActiveDirectory.Platform.dll\r\n├── Microsoft.IdentityModel.Clients.ActiveDirectory.dll\r\n├── Microsoft.IdentityModel.Logging.dll\r\n├── Microsoft.IdentityModel.Protocols.OpenIdConnect.dll\r\n├── Microsoft.IdentityModel.Protocols.dll\r\n├── Microsoft.IdentityModel.Tokens.dll\r\n├── Microsoft.Net.Http.Headers.dll\r\n├── Microsoft.Rest.ClientRuntime.Azure.dll\r\n├── Microsoft.Rest.ClientRuntime.dll\r\n├── Microsoft.VisualStudio.Web.BrowserLink.dll\r\n├── Microsoft.WindowsAzure.Storage.dll\r\n├── MsgPack.dll\r\n├── MySql.Data.Core.dll\r\n├── MySqlConnector.dll\r\n├── Nethereum.ABI.dll\r\n├── Nethereum.Contracts.dll\r\n├── Nethereum.Hex.dll\r\n├── Nethereum.JsonRpc.Client.dll\r\n├── Nethereum.JsonRpc.RpcClient.dll\r\n├── Nethereum.KeyStore.dll\r\n├── Nethereum.RLP.dll\r\n├── Nethereum.RPC.dll\r\n├── Nethereum.Signer.dll\r\n├── Nethereum.StandardTokenEIP20.dll\r\n├── Nethereum.Util.dll\r\n├── Nethereum.Web3.dll\r\n├── Newtonsoft.Json.Bson.dll\r\n├── Newtonsoft.Json.dll\r\n├── Pomelo.EntityFrameworkCore.MySql.dll\r\n├── Pomelo.JsonObject.dll\r\n├── Remotion.Linq.dll\r\n├── SQLitePCLRaw.batteries_green.dll\r\n├── SQLitePCLRaw.batteries_v2.dll\r\n├── SQLitePCLRaw.core.dll\r\n├── SQLitePCLRaw.provider.e_sqlite3.dll\r\n├── SendGrid.dll\r\n├── StackExchange.Redis.StrongName.dll\r\n├── System.Binary.dll\r\n├── System.Buffers.Primitives.dll\r\n├── System.Data.SqlClient.dll\r\n├── System.IdentityModel.Tokens.Jwt.dll\r\n├── System.Interactive.Async.dll\r\n├── System.Memory.dll\r\n├── System.Runtime.CompilerServices.Unsafe.dll\r\n├── System.Security.Cryptography.Xml.dll\r\n├── System.Spatial.dll\r\n├── System.Text.Encoding.CodePages.dll\r\n├── System.Text.Encodings.Web.dll\r\n├── System.Threading.Tasks.Channels.dll\r\n├── Views\r\n│   └── Home\r\n│       └── Index.cshtml\r\n├── Web.deps.json\r\n├── Web.dll\r\n├── Web.pdb\r\n├── Web.runtimeconfig.json\r\n├── appsettings.Development.json\r\n├── appsettings.json\r\n├── crypto.dll\r\n├── de\r\n│   ├── Microsoft.Data.Edm.resources.dll\r\n│   ├── Microsoft.Data.OData.resources.dll\r\n│   └── System.Spatial.resources.dll\r\n├── es\r\n│   ├── Microsoft.Data.Edm.resources.dll\r\n│   ├── Microsoft.Data.OData.resources.dll\r\n│   └── System.Spatial.resources.dll\r\n├── fr\r\n│   ├── Microsoft.Data.Edm.resources.dll\r\n│   ├── Microsoft.Data.OData.resources.dll\r\n│   └── System.Spatial.resources.dll\r\n├── it\r\n│   ├── Microsoft.Data.Edm.resources.dll\r\n│   ├── Microsoft.Data.OData.resources.dll\r\n│   └── System.Spatial.resources.dll\r\n├── ja\r\n│   ├── Microsoft.Data.Edm.resources.dll\r\n│   ├── Microsoft.Data.OData.resources.dll\r\n│   └── System.Spatial.resources.dll\r\n├── ko\r\n│   ├── Microsoft.Data.Edm.resources.dll\r\n│   ├── Microsoft.Data.OData.resources.dll\r\n│   └── System.Spatial.resources.dll\r\n├── refs\r\n│   ├── Microsoft.CSharp.dll\r\n│   ├── Microsoft.VisualBasic.dll\r\n│   ├── Microsoft.Win32.Primitives.dll\r\n│   ├── Microsoft.Win32.Registry.dll\r\n│   ├── System.AppContext.dll\r\n│   ├── System.Buffers.dll\r\n│   ├── System.Collections.Concurrent.dll\r\n│   ├── System.Collections.Immutable.dll\r\n│   ├── System.Collections.NonGeneric.dll\r\n│   ├── System.Collections.Specialized.dll\r\n│   ├── System.Collections.dll\r\n│   ├── System.ComponentModel.Annotations.dll\r\n│   ├── System.ComponentModel.Composition.dll\r\n│   ├── System.ComponentModel.DataAnnotations.dll\r\n│   ├── System.ComponentModel.EventBasedAsync.dll\r\n│   ├── System.ComponentModel.Primitives.dll\r\n│   ├── System.ComponentModel.TypeConverter.dll\r\n│   ├── System.ComponentModel.dll\r\n│   ├── System.Configuration.dll\r\n│   ├── System.Console.dll\r\n│   ├── System.Core.dll\r\n│   ├── System.Data.Common.dll\r\n│   ├── System.Data.SqlClient.dll\r\n│   ├── System.Data.dll\r\n│   ├── System.Diagnostics.Contracts.dll\r\n│   ├── System.Diagnostics.Debug.dll\r\n│   ├── System.Diagnostics.DiagnosticSource.dll\r\n│   ├── System.Diagnostics.FileVersionInfo.dll\r\n│   ├── System.Diagnostics.Process.dll\r\n│   ├── System.Diagnostics.StackTrace.dll\r\n│   ├── System.Diagnostics.TextWriterTraceListener.dll\r\n│   ├── System.Diagnostics.Tools.dll\r\n│   ├── System.Diagnostics.TraceSource.dll\r\n│   ├── System.Diagnostics.Tracing.dll\r\n│   ├── System.Drawing.Primitives.dll\r\n│   ├── System.Drawing.dll\r\n│   ├── System.Dynamic.Runtime.dll\r\n│   ├── System.Globalization.Calendars.dll\r\n│   ├── System.Globalization.Extensions.dll\r\n│   ├── System.Globalization.dll\r\n│   ├── System.IO.Compression.FileSystem.dll\r\n│   ├── System.IO.Compression.ZipFile.dll\r\n│   ├── System.IO.Compression.dll\r\n│   ├── System.IO.FileSystem.DriveInfo.dll\r\n│   ├── System.IO.FileSystem.Primitives.dll\r\n│   ├── System.IO.FileSystem.Watcher.dll\r\n│   ├── System.IO.FileSystem.dll\r\n│   ├── System.IO.IsolatedStorage.dll\r\n│   ├── System.IO.MemoryMappedFiles.dll\r\n│   ├── System.IO.Pipes.dll\r\n│   ├── System.IO.UnmanagedMemoryStream.dll\r\n│   ├── System.IO.dll\r\n│   ├── System.Linq.Expressions.dll\r\n│   ├── System.Linq.Parallel.dll\r\n│   ├── System.Linq.Queryable.dll\r\n│   ├── System.Linq.dll\r\n│   ├── System.Memory.dll\r\n│   ├── System.Net.Http.dll\r\n│   ├── System.Net.HttpListener.dll\r\n│   ├── System.Net.Mail.dll\r\n│   ├── System.Net.NameResolution.dll\r\n│   ├── System.Net.NetworkInformation.dll\r\n│   ├── System.Net.Ping.dll\r\n│   ├── System.Net.Primitives.dll\r\n│   ├── System.Net.Requests.dll\r\n│   ├── System.Net.Security.dll\r\n│   ├── System.Net.ServicePoint.dll\r\n│   ├── System.Net.Sockets.dll\r\n│   ├── System.Net.WebClient.dll\r\n│   ├── System.Net.WebHeaderCollection.dll\r\n│   ├── System.Net.WebProxy.dll\r\n│   ├── System.Net.WebSockets.Client.dll\r\n│   ├── System.Net.WebSockets.dll\r\n│   ├── System.Net.dll\r\n│   ├── System.Numerics.Vectors.dll\r\n│   ├── System.Numerics.dll\r\n│   ├── System.ObjectModel.dll\r\n│   ├── System.Reflection.DispatchProxy.dll\r\n│   ├── System.Reflection.Emit.ILGeneration.dll\r\n│   ├── System.Reflection.Emit.Lightweight.dll\r\n│   ├── System.Reflection.Emit.dll\r\n│   ├── System.Reflection.Extensions.dll\r\n│   ├── System.Reflection.Metadata.dll\r\n│   ├── System.Reflection.Primitives.dll\r\n│   ├── System.Reflection.TypeExtensions.dll\r\n│   ├── System.Reflection.dll\r\n│   ├── System.Resources.Reader.dll\r\n│   ├── System.Resources.ResourceManager.dll\r\n│   ├── System.Resources.Writer.dll\r\n│   ├── System.Runtime.CompilerServices.Unsafe.dll\r\n│   ├── System.Runtime.CompilerServices.VisualC.dll\r\n│   ├── System.Runtime.Extensions.dll\r\n│   ├── System.Runtime.Handles.dll\r\n│   ├── System.Runtime.InteropServices.RuntimeInformation.dll\r\n│   ├── System.Runtime.InteropServices.WindowsRuntime.dll\r\n│   ├── System.Runtime.InteropServices.dll\r\n│   ├── System.Runtime.Loader.dll\r\n│   ├── System.Runtime.Numerics.dll\r\n│   ├── System.Runtime.Serialization.Formatters.dll\r\n│   ├── System.Runtime.Serialization.Json.dll\r\n│   ├── System.Runtime.Serialization.Primitives.dll\r\n│   ├── System.Runtime.Serialization.Xml.dll\r\n│   ├── System.Runtime.Serialization.dll\r\n│   ├── System.Runtime.dll\r\n│   ├── System.Security.AccessControl.dll\r\n│   ├── System.Security.Claims.dll\r\n│   ├── System.Security.Cryptography.Algorithms.dll\r\n│   ├── System.Security.Cryptography.Csp.dll\r\n│   ├── System.Security.Cryptography.Encoding.dll\r\n│   ├── System.Security.Cryptography.Primitives.dll\r\n│   ├── System.Security.Cryptography.X509Certificates.dll\r\n│   ├── System.Security.Cryptography.Xml.dll\r\n│   ├── System.Security.Principal.Windows.dll\r\n│   ├── System.Security.Principal.dll\r\n│   ├── System.Security.SecureString.dll\r\n│   ├── System.Security.dll\r\n│   ├── System.ServiceModel.Web.dll\r\n│   ├── System.ServiceProcess.dll\r\n│   ├── System.Text.Encoding.CodePages.dll\r\n│   ├── System.Text.Encoding.Extensions.dll\r\n│   ├── System.Text.Encoding.dll\r\n│   ├── System.Text.RegularExpressions.dll\r\n│   ├── System.Threading.Overlapped.dll\r\n│   ├── System.Threading.Tasks.Dataflow.dll\r\n│   ├── System.Threading.Tasks.Extensions.dll\r\n│   ├── System.Threading.Tasks.Parallel.dll\r\n│   ├── System.Threading.Tasks.dll\r\n│   ├── System.Threading.Thread.dll\r\n│   ├── System.Threading.ThreadPool.dll\r\n│   ├── System.Threading.Timer.dll\r\n│   ├── System.Threading.dll\r\n│   ├── System.Transactions.Local.dll\r\n│   ├── System.Transactions.dll\r\n│   ├── System.ValueTuple.dll\r\n│   ├── System.Web.HttpUtility.dll\r\n│   ├── System.Web.dll\r\n│   ├── System.Windows.dll\r\n│   ├── System.Xml.Linq.dll\r\n│   ├── System.Xml.ReaderWriter.dll\r\n│   ├── System.Xml.Serialization.dll\r\n│   ├── System.Xml.XDocument.dll\r\n│   ├── System.Xml.XPath.XDocument.dll\r\n│   ├── System.Xml.XPath.dll\r\n│   ├── System.Xml.XmlDocument.dll\r\n│   ├── System.Xml.XmlSerializer.dll\r\n│   ├── System.Xml.dll\r\n│   ├── System.dll\r\n│   ├── WindowsBase.dll\r\n│   ├── mscorlib.dll\r\n│   └── netstandard.dll\r\n├── ru\r\n│   ├── Microsoft.Data.Edm.resources.dll\r\n│   ├── Microsoft.Data.OData.resources.dll\r\n│   └── System.Spatial.resources.dll\r\n├── runtimes\r\n│   ├── linux-arm\r\n│   │   └── native\r\n│   │       └── libuv.so\r\n│   ├── linux-arm64\r\n│   │   └── native\r\n│   │       └── libuv.so\r\n│   ├── linux-armel\r\n│   │   └── native\r\n│   │       └── libuv.so\r\n│   ├── linux-x64\r\n│   │   └── native\r\n│   │       ├── libe_sqlite3.so\r\n│   │       └── libuv.so\r\n│   ├── linux-x86\r\n│   │   └── native\r\n│   │       └── libe_sqlite3.so\r\n│   ├── osx\r\n│   │   └── native\r\n│   │       └── libuv.dylib\r\n│   ├── osx-x64\r\n│   │   └── native\r\n│   │       └── libe_sqlite3.dylib\r\n│   ├── unix\r\n│   │   └── lib\r\n│   │       ├── netcoreapp2.0\r\n│   │       │   └── System.Memory.dll\r\n│   │       └── netstandard2.0\r\n│   │           └── System.Data.SqlClient.dll\r\n│   ├── win\r\n│   │   └── lib\r\n│   │       ├── netcoreapp2.0\r\n│   │       │   ├── System.Memory.dll\r\n│   │       │   └── System.Text.Encoding.CodePages.dll\r\n│   │       └── netstandard2.0\r\n│   │           └── System.Data.SqlClient.dll\r\n│   ├── win-arm\r\n│   │   └── native\r\n│   │       └── libuv.dll\r\n│   ├── win-arm64\r\n│   │   └── native\r\n│   │       └── sni.dll\r\n│   ├── win-x64\r\n│   │   └── native\r\n│   │       ├── libuv.dll\r\n│   │       └── sni.dll\r\n│   ├── win-x86\r\n│   │   └── native\r\n│   │       ├── libuv.dll\r\n│   │       └── sni.dll\r\n│   ├── win7-x64\r\n│   │   └── native\r\n│   │       └── e_sqlite3.dll\r\n│   └── win7-x86\r\n│       └── native\r\n│           └── e_sqlite3.dll\r\n├── web.config\r\n├── wwwroot\r\n│   ├── dist\r\n│   │   ├── bundle.css\r\n│   │   ├── bundle.js\r\n│   │   └── vendor.js\r\n│   ├── fonts\r\n│   │   ├── FontAwesome.otf\r\n│   │   ├── fontawesome-webfont.eot\r\n│   │   ├── fontawesome-webfont.svg\r\n│   │   ├── fontawesome-webfont.ttf\r\n│   │   ├── fontawesome-webfont.woff\r\n│   │   └── fontawesome-webfont.woff2\r\n│   └── internal\r\n│       └── images\r\n│           ├── 7b30280f-4bb2-43c2-bf5b-454f23b75971:id:me.png\r\n│           └── df25cd1f-40c6-41ce-a813-46431ea05b0d:id:me.png\r\n├── zh-Hans\r\n│   ├── Microsoft.Data.Edm.resources.dll\r\n│   ├── Microsoft.Data.OData.resources.dll\r\n│   └── System.Spatial.resources.dll\r\n└── zh-Hant\r\n    ├── Microsoft.Data.Edm.resources.dll\r\n    ├── Microsoft.Data.OData.resources.dll\r\n    └── System.Spatial.resources.dll\r\n\r\n53 directories, 422 files\r\n```\r\n\r\nWhat can be the problem?\r\n\r\n"},{"Id":"6792325073","Type":"PullRequestEvent","CreatedAt":"2017-10-31T23:32:39","Actor":"rynowak","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/Mvc/pull/6998","RelatedDescription":"Merged pull request \"Refactor content negotiation code into a service\" (#6998) at aspnet/Mvc","RelatedBody":"This is a refactor in anticipation of using this logic in some other\r\nplaces"},{"Id":"6791664542","Type":"IssuesEvent","CreatedAt":"2017-10-31T20:29:58","Actor":"wizofaus","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Mvc/issues/7004","RelatedDescription":"Closed issue \"Output of \"dotnet new mvc\" doesn't work immediately with VS code\" (#7004) at aspnet/Mvc","RelatedBody":"After running \"dotnet new mvc\", the directory is missing tasks.json and has an incomplete launch.json (with a number of templated parameters that need to be manually filled in).  I can't see any reason why \"dotnet new mvc\" can't do this itself so that the solution can just be debugged immediately with VS Code.\r\nUsing dotnet 2.0, VS Code 1.17.\r\nSorry if this is more of a VS Code issue than aspnet/mvc one."},{"Id":"6791405583","Type":"PullRequestEvent","CreatedAt":"2017-10-31T19:32:26","Actor":"natemcmaster","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Mvc/pull/7013","RelatedDescription":"Opened pull request \"Pin tool and package versions to make builds more repeatable\" (#7013) at aspnet/Mvc","RelatedBody":"Part of aspnet/Universe#575 and aspnet/KoreBuild#239\r\n\r\nThis removes floating versions of dependencies. This includes the korebuild version and versions used by PackageReference's.\r\n\r\nChanges:\r\n - build.cmd /t:Pin is no longer required to use Mvc.sln\r\n - (script generated) replace PackageLineup with MSBuild variables for dependencies versions\r\n"}],"ResultType":"GitHubEvent"},"Identity":{"Events":[{"Id":"6792462693","Type":"PullRequestEvent","CreatedAt":"2017-11-01T00:29:45","Actor":"natemcmaster","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/Identity/pull/1492","RelatedDescription":"Merged pull request \"Pin tool and package versions to make builds more repeatable\" (#1492) at aspnet/Identity","RelatedBody":"Part of aspnet/Universe#575 and aspnet/KoreBuild#239\r\n\r\nThis removes floating versions of dependencies. This includes the korebuild version and versions used by PackageReference's.\r\n\r\nChanges:\r\n\r\n- (script generated) replace PackageLineup with MSBuild variables for dependencies versions"},{"Id":"6792007402","Type":"PullRequestEvent","CreatedAt":"2017-10-31T21:52:20","Actor":"natemcmaster","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Identity/pull/1492","RelatedDescription":"Opened pull request \"Pin tool and package versions to make builds more repeatable\" (#1492) at aspnet/Identity","RelatedBody":"Part of aspnet/Universe#575 and aspnet/KoreBuild#239\r\n\r\nThis removes floating versions of dependencies. This includes the korebuild version and versions used by PackageReference's.\r\n\r\nChanges:\r\n\r\n- (script generated) replace PackageLineup with MSBuild variables for dependencies versions"},{"Id":"6786486862","Type":"IssuesEvent","CreatedAt":"2017-10-30T22:12:08","Actor":"Conner05","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Identity/issues/1489","RelatedDescription":"Closed issue \"JWT in Request Header is not the same in receiving API\" (#1489) at aspnet/Identity","RelatedBody":"When I make a request to my .Net Core 2 API from my Angular app the JWT is not the same as the one sent in the request header.\r\n\r\n**Startup.cs**\r\n\r\n    \r\n\tpublic class Startup\r\n\t{\r\n\t\tpublic Startup(IHostingEnvironment env)\r\n\t\t{\r\n\t\t\tvar builder = new ConfigurationBuilder()\r\n\t\t\t\t.SetBasePath(env.ContentRootPath)\r\n\t\t\t\t.AddJsonFile(\"appsettings.json\", optional: false, reloadOnChange: true)\r\n\t\t\t\t.AddJsonFile($\"appsettings.{env.EnvironmentName}.json\", optional: true)\r\n\t\t\t\t.AddEnvironmentVariables();\r\n\t\t\t_config = builder.Build();\r\n\t\t}\r\n\r\n\t\tIConfigurationRoot _config;\r\n\r\n\t\t// This method gets called by the runtime. Use this method to add services to the container.\r\n\t\tpublic void ConfigureServices(IServiceCollection services)\r\n\t\t{\r\n\t\t\tservices.AddSingleton(_config);\r\n\t\t\tservices.AddDbContext<ApplicationDbContext>(ServiceLifetime.Transient);\r\n\r\n\t\t\tservices.AddTransient<IEmailSender, AuthMessageSender>();\r\n\t\t\tservices.AddTransient<ISmsSender, AuthMessageSender>();\r\n\r\n\t\t\tservices.AddSingleton<IUserTwoFactorTokenProvider<ApplicationUser>, DataProtectorTokenProvider<ApplicationUser>>();\r\n\r\n\t\t\t// Add application services.\r\n\r\n\t\t\t// Add application repositories.\r\n\r\n\t\t\t// Add options.\r\n\t\t\tservices.AddOptions();\r\n\t\t\tservices.Configure<StorageAccountOptions>(_config.GetSection(\"StorageAccount\"));\r\n\r\n\t\t\t// Add other.\r\n\t\t\tservices.AddSingleton<IHttpContextAccessor, HttpContextAccessor>();\r\n\t\t\tservices.AddTransient<ApiExceptionFilter>();\r\n\r\n\t\t\t// this makes \"this.User\" reflect the properties of the jwt sent in the request\r\n\t\t\tservices.AddTransient<ClaimsPrincipal>(s => s.GetService<IHttpContextAccessor>().HttpContext.User);\r\n\t\t\t\r\n\t\t\tservices.AddIdentity<ApplicationUser, IdentityRole>(options =>\r\n\t\t\t{\r\n\t\t\t\t// set password complexity requirements\r\n\t\t\t\toptions.Password.RequireDigit = true;\r\n\t\t\t\toptions.Password.RequireLowercase = true;\r\n\t\t\t\toptions.Password.RequireUppercase = false;\r\n\t\t\t\toptions.Password.RequireNonAlphanumeric = false;\r\n\t\t\t\toptions.Password.RequiredLength = 6;\r\n\r\n\t\t\t\toptions.Tokens.ProviderMap.Add(\"Default\",\r\n\t\t\t\tnew TokenProviderDescriptor(typeof(IUserTwoFactorTokenProvider<ApplicationUser>)));\r\n\t\t\t}).AddEntityFrameworkStores<ApplicationDbContext>();\r\n\r\n\t\t\tservices.AddAuthentication(options =>\r\n\t\t\t{\r\n\t\t\t\toptions.DefaultScheme = JwtBearerDefaults.AuthenticationScheme;\r\n\t\t\t\toptions.DefaultChallengeScheme = JwtBearerDefaults.AuthenticationScheme;\r\n\t\t\t}).AddJwtBearer(config =>\r\n\t\t\t\t{\r\n\t\t\t\t\tconfig.RequireHttpsMetadata = false;\r\n\t\t\t\t\tconfig.SaveToken = true;\r\n\t\t\t\t\tconfig.TokenValidationParameters = new TokenValidationParameters()\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tValidIssuer = _config[\"Tokens:Issuer\"],\r\n\t\t\t\t\t\tValidAudience = _config[\"Tokens:Audience\"],\r\n\t\t\t\t\t\tValidateIssuerSigningKey = true,\r\n\t\t\t\t\t\tIssuerSigningKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(_config[\"Tokens:Key\"])),\r\n\t\t\t\t\t\tValidateLifetime = true\r\n\t\t\t\t\t};\r\n\t\t\t\t});\r\n\t\t\tservices.AddAuthorization(config =>\r\n\t\t\t{\r\n\t\t\t\tconfig.AddPolicy(\"Subscribers\", p => p.RequireClaim(\"Subscriber\", \"True\"));\r\n\t\t\t\tconfig.AddPolicy(\"Artists\", p => p.RequireClaim(\"Artist\", \"True\"));\r\n\t\t\t\tconfig.AddPolicy(\"Admins\", p => p.RequireClaim(\"Admin\", \"True\"));\r\n\t\t\t});\r\n\r\n\t\t\tservices.Configure<DataProtectionTokenProviderOptions>(o =>\r\n\t\t\t{\r\n\t\t\t\to.Name = \"Default\";\r\n\t\t\t\to.TokenLifespan = TimeSpan.FromHours(1);\r\n\t\t\t});\r\n\t\t\tservices.Configure<AuthMessageSenderOptions>(_config);\r\n\r\n\t\t\t// Add framework services.\r\n\t\t\tservices.AddMvc(opt =>\r\n\t\t\t{\r\n\t\t\t\t//opt.Filters.Add(new RequireHttpsAttribute());\r\n\t\t\t}\r\n\t\t\t).AddJsonOptions(opt =>\r\n\t\t\t{\r\n\t\t\t\topt.SerializerSettings.ReferenceLoopHandling = ReferenceLoopHandling.Ignore;\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\t// This method gets called by the runtime. Use this method to configure the HTTP request pipeline.\r\n\t\tpublic void Configure(IApplicationBuilder app, IHostingEnvironment env, ILoggerFactory loggerFactory)\r\n\t\t{\r\n\t\t\tloggerFactory.AddConsole(_config.GetSection(\"Logging\"));\r\n\t\t\tloggerFactory.AddDebug();\r\n\r\n\t\t\tapp.Use(async (context, next) =>\r\n\t\t\t{\r\n\t\t\t\t// just to check the context.User.Claims on request\r\n\t\t\t\tvar temp = context;\r\n\t\t\t\tawait next();\r\n\t\t\t});\r\n\t\t\tapp.UseAuthentication();\r\n\t\t\tapp.UseMvc();\r\n\t\t}\r\n\t}\r\n\r\nThis is where the token gets issued (on app login)\r\n\r\n**AuthController.cs**\r\n\r\n    private async Task<IList<Claim>> CreateUserClaims(ApplicationUser user)\r\n\t\t{\r\n\t\t\tvar userClaims = await _userManager.GetClaimsAsync(user);\r\n\t\t\tvar newClaims = new[]\r\n\t\t\t{\r\n\t\t\t\tnew Claim(JwtRegisteredClaimNames.Sub, user.UserName),\r\n\t\t\t\tnew Claim(JwtRegisteredClaimNames.Jti, Guid.NewGuid().ToString()),\r\n\t\t\t\tnew Claim(JwtRegisteredClaimNames.NameId, user.Id)\r\n\t\t\t}.Union(userClaims).ToList();\r\n\t\t\treturn newClaims;\r\n\t\t}\r\n\t\tprivate Object CreateToken(IList<Claim> claims)\r\n\t\t{\r\n\t\t\tvar key = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(_config[\"Tokens:Key\"]));\r\n\t\t\tvar creds = new SigningCredentials(key, SecurityAlgorithms.HmacSha256);\r\n\t\t\tvar token = new JwtSecurityToken(\r\n\t\t\t\tissuer: _config[\"Tokens:Issuer\"],\r\n\t\t\t\taudience: _config[\"Tokens:Audience\"],\r\n\t\t\t\tclaims: claims,\r\n\t\t\t\texpires: DateTime.UtcNow.AddDays(29),\r\n\t\t\t\tsigningCredentials: creds\r\n\t\t\t);\r\n\t\t\treturn new\r\n\t\t\t{\r\n\t\t\t\ttoken = new JwtSecurityTokenHandler().WriteToken(token),\r\n\t\t\t\texpiration = token.ValidTo\r\n\t\t\t};\r\n\t\t}\r\n\t\tprivate async Task<Object> CreateToken(ApplicationUser user)\r\n\t\t{\r\n\t\t\tvar claims = await CreateUserClaims(user);\r\n\t\t\tvar token = CreateToken(claims);\r\n\t\t\treturn token;\r\n\t\t}\r\n    [HttpPost(\"token\")]\r\n\t\t[AllowAnonymous]\r\n\t\tpublic async Task<IActionResult> CreateToken([FromBody] CredentialModel model)\r\n\t\t{\r\n\t\t\tvar user = await _userManager.FindByNameAsync(model.UserName);\r\n\t\t\tif (user != null)\r\n\t\t\t{\r\n\t\t\t\tif (_hasher.VerifyHashedPassword(user, user.PasswordHash, model.Password)\r\n\t\t\t\t\t== PasswordVerificationResult.Success)\r\n\t\t\t\t{\r\n\t\t\t\t\tvar token = await CreateToken(user);\r\n\t\t\t\t\treturn Ok(token);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tthrow new ApiException(\"Bad email or password.\");\r\n\t\t}\r\n\r\nI have confirmed through the Chrome debugger Network tab that the JWT in my request is the JWT I want the API to get. \r\n\r\n**Because of that I will leave the Angular request code out of this post.**\r\n\r\nHere is a Controller that returns items by UserId\r\n\r\n    [HttpGet]\r\n\t\tpublic async Task<IActionResult> Get()\r\n\t\t{\r\n\t\t\tvar artists = await _manageArtistService.GetAllByUser(this.User);\r\n\t\t\tif (artists == null) return NotFound($\"Artists could not be found\");\r\n\t\t\treturn Ok(artists);\r\n\t\t}\r\n\r\nHere is the service the controller calls\r\n\r\n    public async Task<IEnumerable<ManageArtistView>> GetAllByUser(ClaimsPrincipal user)\r\n\t\t{\r\n\t\t\t// gets all artists of a given user, sorted by artist\r\n\t\t\tvar userId = _userService.GetUserId(user);\r\n\t\t\tvar artists = await _manageArtistRepository.GetAllByUser(userId);\r\n\t\t\treturn artists;\r\n\t\t}\r\n\r\nIn the `UserService.cs` I have attempted a few different means of accessing the current user. I check the `this.User` that was passed from the Controller. \r\n\r\nI also check the current context in `_context` - a Singleton you can see in the `Startup.cs`.\r\n\r\nThere is also the `_caller` which is from this line in `Startup.cs`\r\n\r\n    services.AddTransient<ClaimsPrincipal>(s => s.GetService<IHttpContextAccessor>().HttpContext.User);\r\n\r\nWhen I inspect any of those variables, the `Claims` object **does not** contain the same claims as the JWT that was sent during the request. \r\n\r\n**I have verified the claims do not match by checking the claims at [jwt.io][1].**\r\n\r\nTo be specific, I'll give a scenario:\r\n\r\nI sign into my app with email `user@example.com`. That email is then set as a claim (Sub) as `user.UserName` inside the `CreateUserClaims()` function in the `AuthController.cs`:\r\n\r\n    var newClaims = new[]\r\n\t\t\t{\r\n\t\t\t\tnew Claim(JwtRegisteredClaimNames.Sub, user.UserName),\r\n\t\t\t\tnew Claim(JwtRegisteredClaimNames.Jti, Guid.NewGuid().ToString()),\r\n\t\t\t\tnew Claim(JwtRegisteredClaimNames.NameId, user.Id)\r\n\t\t\t}.Union(userClaims).ToList();\r\n\r\nThen some other properties are set and eventually the token is returned to the client. The client stores it in `localStorage`.\r\n\r\nThe client then makes a request, including the JWT in the header and adds it to the request options like this (Angular service):\r\n\r\n    private headers = new Headers(\r\n\t\t{\r\n\t\t\t'Content-Type': 'application/json',\r\n\t\t\t'Authorization': 'Bearer ' + this.authService.token\r\n\t\t});\r\n\tprivate options = new RequestOptions({ headers: this.headers });\r\n\r\nI check the Header in the Network tab and it contains the JWT - I check it on [jwt.io][1] and it looks good - has the proper email and other claims.\r\n\r\nNow I can logout of the app, sign in as a different user, get a new JWT, and make the request to that **same controller** shown above and the JWT will have the previous email, not the new one that I just signed in as. \r\n\r\nAnd I did go through the same checks, checking the JWT in the Header on the Network tab to ensure the claims contain the new email as the `sub` as well as the other claims. \r\n\r\nSo that means I was issued the proper JWT on the new sign in, but somehow the API is still looking at the old JWT.\r\n\r\nHow crazy is that?\r\n\r\nSomething else I have noticed is that even on that first login (pretend I just started the API with `dotnet run` and then I make my first request to the same controller shown above it will be missing the `nameid` claim. I can go check the JWT that was sent in the Header request and it **does have the `nameid` claim.** So, again, **the api will issue the proper JWT but when I send it back over HTTP in a request the API does not have the same JWT that I sent in the request.**\r\n\r\n**ONE MORE THING**\r\nI log the JWT in the console for simplicity. I went back and found the first one I started using today, at 9am. Its `jti` is the same as the one that is currently in the .net core API. It's now 4:45pm. I have 9 different JTWs in my console between those two times (9am and 4:45pm), all issued from the API. But the API seems to have kept the first one it created this morning - even after I have stopped and started the project numerous times.\r\n\r\n\r\nPlease help me understand what I am doing wrong. I must not be fully understanding how JWTs are handled.\r\n\r\n\r\n  [1]: http://jwt.io"},{"Id":"6785561681","Type":"IssuesEvent","CreatedAt":"2017-10-30T18:44:03","Actor":"HaoK","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Identity/issues/1487","RelatedDescription":"Closed issue \"Changing required password length\" (#1487) at aspnet/Identity","RelatedBody":"\r\nI’m using the following code:\r\n\r\n`\r\nservices.AddIdentity<ApplicationUser, IdentityRole>(options =>\r\n{\r\n\t// Password settings\r\n\toptions.Password.RequiredLength = 8;\r\n\toptions.Password.RequireNonAlphanumeric = false;\r\n\toptions.Password.RequireUppercase = false;\r\n})\r\n.AddEntityFrameworkStores<ApplicationDbContext>()\r\n.AddDefaultTokenProviders();\r\n`\r\n\r\nWhen i go to register, and click a single letter for password, the validation scripts still warn me about the default required length, which is 6 characters, instead of the new one i set (8 characters).\r\nIf i submit the form, i get the correct warning from the server, for the 8 characters.\r\n"},{"Id":"6783962430","Type":"IssuesEvent","CreatedAt":"2017-10-30T13:56:42","Actor":"pushist1y","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Identity/issues/1490","RelatedDescription":"Opened issue \"IdentityConstants\" (#1490) at aspnet/Identity","RelatedBody":"Consider redeclaring `IdentityConstants` class properties as actual constants instead of static readonly fields. \r\n\r\nThese fields are used as authentication schema names. If the application uses more than one auth scheme it can specify the scheme to be used (or multiple) in `Authorize` attribute but the attribute only accepts compile-time constants as parameters. \r\n\r\nI've run into this issue when creating mixed MVC-WebAPI application with double authentication (cookies for MVC pages and JWT for API calls) and i had to declare a constant with value of `\"Identity.Application\"` to be used with `Authorize` attribute. "},{"Id":"6779775284","Type":"IssuesEvent","CreatedAt":"2017-10-29T04:42:14","Actor":"mkArtak","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Identity/issues/1444","RelatedDescription":"Closed issue \"Email confirmation token becomes invalid after redeployment\" (#1444) at aspnet/Identity","RelatedBody":"Hi.\r\n\r\nI have an asp.net core 2 web application which is hosted in Azure AppService.\r\nWhen a new user signs up the application sends an email confirmation request to the user (as an email), with a link in it for the user to click.\r\nThe link uses a token generated using the following method:\r\n`UserManager<TUser>.GenerateEmailConfirmationTokenAsync(TUser user)`\r\n\r\nWhen user clicks the link, the AccountController handles that request and tries to find the user given the email address and the token:\r\n`IdentityResult result = await this.userManager.ConfirmEmailAsync(user, code);`\r\n\r\nHowever, if after generating the code a new deployment had happened, the ConfirmEmailAsync method would not be able to find the user with that code, so the confirmation request results in an error.\r\n\r\n\r\nHere is the list of relevant packages my project references:\r\n```\r\n<PackageReference Include=\"AWSSDK.SimpleNotificationService\" Version=\"3.3.0.21\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore\" Version=\"2.0.0\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Authentication.Facebook\" Version=\"2.0.0\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Authentication.Google\" Version=\"2.0.0\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Authentication.MicrosoftAccount\" Version=\"2.0.0\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Authentication.Twitter\" Version=\"2.0.0\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Identity\" Version=\"2.0.0\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.StaticFiles\" Version=\"2.0.0\" />\r\n```\r\n"},{"Id":"6779351712","Type":"IssuesEvent","CreatedAt":"2017-10-28T21:48:10","Actor":"Conner05","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Identity/issues/1489","RelatedDescription":"Opened issue \"JWT in Request Header is not the same in receiving .Net Core API\" (#1489) at aspnet/Identity","RelatedBody":"When I make a request to my .Net Core 2 API from my Angular app the JWT is not the same as the one sent in the request header.\r\n\r\n**Startup.cs**\r\n\r\n    \r\n\tpublic class Startup\r\n\t{\r\n\t\tpublic Startup(IHostingEnvironment env)\r\n\t\t{\r\n\t\t\tvar builder = new ConfigurationBuilder()\r\n\t\t\t\t.SetBasePath(env.ContentRootPath)\r\n\t\t\t\t.AddJsonFile(\"appsettings.json\", optional: false, reloadOnChange: true)\r\n\t\t\t\t.AddJsonFile($\"appsettings.{env.EnvironmentName}.json\", optional: true)\r\n\t\t\t\t.AddEnvironmentVariables();\r\n\t\t\t_config = builder.Build();\r\n\t\t}\r\n\r\n\t\tIConfigurationRoot _config;\r\n\r\n\t\t// This method gets called by the runtime. Use this method to add services to the container.\r\n\t\tpublic void ConfigureServices(IServiceCollection services)\r\n\t\t{\r\n\t\t\tservices.AddSingleton(_config);\r\n\t\t\tservices.AddDbContext<ApplicationDbContext>(ServiceLifetime.Transient);\r\n\r\n\t\t\tservices.AddTransient<IEmailSender, AuthMessageSender>();\r\n\t\t\tservices.AddTransient<ISmsSender, AuthMessageSender>();\r\n\r\n\t\t\tservices.AddSingleton<IUserTwoFactorTokenProvider<ApplicationUser>, DataProtectorTokenProvider<ApplicationUser>>();\r\n\r\n\t\t\t// Add application services.\r\n\r\n\t\t\t// Add application repositories.\r\n\r\n\t\t\t// Add options.\r\n\t\t\tservices.AddOptions();\r\n\t\t\tservices.Configure<StorageAccountOptions>(_config.GetSection(\"StorageAccount\"));\r\n\r\n\t\t\t// Add other.\r\n\t\t\tservices.AddSingleton<IHttpContextAccessor, HttpContextAccessor>();\r\n\t\t\tservices.AddTransient<ApiExceptionFilter>();\r\n\r\n\t\t\t// this makes \"this.User\" reflect the properties of the jwt sent in the request\r\n\t\t\tservices.AddTransient<ClaimsPrincipal>(s => s.GetService<IHttpContextAccessor>().HttpContext.User);\r\n\t\t\t\r\n\t\t\tservices.AddIdentity<ApplicationUser, IdentityRole>(options =>\r\n\t\t\t{\r\n\t\t\t\t// set password complexity requirements\r\n\t\t\t\toptions.Password.RequireDigit = true;\r\n\t\t\t\toptions.Password.RequireLowercase = true;\r\n\t\t\t\toptions.Password.RequireUppercase = false;\r\n\t\t\t\toptions.Password.RequireNonAlphanumeric = false;\r\n\t\t\t\toptions.Password.RequiredLength = 6;\r\n\r\n\t\t\t\toptions.Tokens.ProviderMap.Add(\"Default\",\r\n\t\t\t\tnew TokenProviderDescriptor(typeof(IUserTwoFactorTokenProvider<ApplicationUser>)));\r\n\t\t\t}).AddEntityFrameworkStores<ApplicationDbContext>();\r\n\r\n\t\t\tservices.AddAuthentication(options =>\r\n\t\t\t{\r\n\t\t\t\toptions.DefaultScheme = JwtBearerDefaults.AuthenticationScheme;\r\n\t\t\t\toptions.DefaultChallengeScheme = JwtBearerDefaults.AuthenticationScheme;\r\n\t\t\t}).AddJwtBearer(config =>\r\n\t\t\t\t{\r\n\t\t\t\t\tconfig.RequireHttpsMetadata = false;\r\n\t\t\t\t\tconfig.SaveToken = true;\r\n\t\t\t\t\tconfig.TokenValidationParameters = new TokenValidationParameters()\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tValidIssuer = _config[\"Tokens:Issuer\"],\r\n\t\t\t\t\t\tValidAudience = _config[\"Tokens:Audience\"],\r\n\t\t\t\t\t\tValidateIssuerSigningKey = true,\r\n\t\t\t\t\t\tIssuerSigningKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(_config[\"Tokens:Key\"])),\r\n\t\t\t\t\t\tValidateLifetime = true\r\n\t\t\t\t\t};\r\n\t\t\t\t});\r\n\t\t\tservices.AddAuthorization(config =>\r\n\t\t\t{\r\n\t\t\t\tconfig.AddPolicy(\"Subscribers\", p => p.RequireClaim(\"Subscriber\", \"True\"));\r\n\t\t\t\tconfig.AddPolicy(\"Artists\", p => p.RequireClaim(\"Artist\", \"True\"));\r\n\t\t\t\tconfig.AddPolicy(\"Admins\", p => p.RequireClaim(\"Admin\", \"True\"));\r\n\t\t\t});\r\n\r\n\t\t\tservices.Configure<DataProtectionTokenProviderOptions>(o =>\r\n\t\t\t{\r\n\t\t\t\to.Name = \"Default\";\r\n\t\t\t\to.TokenLifespan = TimeSpan.FromHours(1);\r\n\t\t\t});\r\n\t\t\tservices.Configure<AuthMessageSenderOptions>(_config);\r\n\r\n\t\t\t// Add framework services.\r\n\t\t\tservices.AddMvc(opt =>\r\n\t\t\t{\r\n\t\t\t\t//opt.Filters.Add(new RequireHttpsAttribute());\r\n\t\t\t}\r\n\t\t\t).AddJsonOptions(opt =>\r\n\t\t\t{\r\n\t\t\t\topt.SerializerSettings.ReferenceLoopHandling = ReferenceLoopHandling.Ignore;\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\t// This method gets called by the runtime. Use this method to configure the HTTP request pipeline.\r\n\t\tpublic void Configure(IApplicationBuilder app, IHostingEnvironment env, ILoggerFactory loggerFactory)\r\n\t\t{\r\n\t\t\tloggerFactory.AddConsole(_config.GetSection(\"Logging\"));\r\n\t\t\tloggerFactory.AddDebug();\r\n\r\n\t\t\tapp.Use(async (context, next) =>\r\n\t\t\t{\r\n\t\t\t\t// just to check the context.User.Claims on request\r\n\t\t\t\tvar temp = context;\r\n\t\t\t\tawait next();\r\n\t\t\t});\r\n\t\t\tapp.UseAuthentication();\r\n\t\t\tapp.UseMvc();\r\n\t\t}\r\n\t}\r\n\r\nThis is where the token gets issued (on app login)\r\n\r\n**AuthController.cs**\r\n\r\n    private async Task<IList<Claim>> CreateUserClaims(ApplicationUser user)\r\n\t\t{\r\n\t\t\tvar userClaims = await _userManager.GetClaimsAsync(user);\r\n\t\t\tvar newClaims = new[]\r\n\t\t\t{\r\n\t\t\t\tnew Claim(JwtRegisteredClaimNames.Sub, user.UserName),\r\n\t\t\t\tnew Claim(JwtRegisteredClaimNames.Jti, Guid.NewGuid().ToString()),\r\n\t\t\t\tnew Claim(JwtRegisteredClaimNames.NameId, user.Id)\r\n\t\t\t}.Union(userClaims).ToList();\r\n\t\t\treturn newClaims;\r\n\t\t}\r\n\t\tprivate Object CreateToken(IList<Claim> claims)\r\n\t\t{\r\n\t\t\tvar key = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(_config[\"Tokens:Key\"]));\r\n\t\t\tvar creds = new SigningCredentials(key, SecurityAlgorithms.HmacSha256);\r\n\t\t\tvar token = new JwtSecurityToken(\r\n\t\t\t\tissuer: _config[\"Tokens:Issuer\"],\r\n\t\t\t\taudience: _config[\"Tokens:Audience\"],\r\n\t\t\t\tclaims: claims,\r\n\t\t\t\texpires: DateTime.UtcNow.AddDays(29),\r\n\t\t\t\tsigningCredentials: creds\r\n\t\t\t);\r\n\t\t\treturn new\r\n\t\t\t{\r\n\t\t\t\ttoken = new JwtSecurityTokenHandler().WriteToken(token),\r\n\t\t\t\texpiration = token.ValidTo\r\n\t\t\t};\r\n\t\t}\r\n\t\tprivate async Task<Object> CreateToken(ApplicationUser user)\r\n\t\t{\r\n\t\t\tvar claims = await CreateUserClaims(user);\r\n\t\t\tvar token = CreateToken(claims);\r\n\t\t\treturn token;\r\n\t\t}\r\n    [HttpPost(\"token\")]\r\n\t\t[AllowAnonymous]\r\n\t\tpublic async Task<IActionResult> CreateToken([FromBody] CredentialModel model)\r\n\t\t{\r\n\t\t\tvar user = await _userManager.FindByNameAsync(model.UserName);\r\n\t\t\tif (user != null)\r\n\t\t\t{\r\n\t\t\t\tif (_hasher.VerifyHashedPassword(user, user.PasswordHash, model.Password)\r\n\t\t\t\t\t== PasswordVerificationResult.Success)\r\n\t\t\t\t{\r\n\t\t\t\t\tvar token = await CreateToken(user);\r\n\t\t\t\t\treturn Ok(token);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tthrow new ApiException(\"Bad email or password.\");\r\n\t\t}\r\n\r\nI have confirmed through the Chrome debugger Network tab that the JWT in my request is the JWT I want the API to get. \r\n\r\n**Because of that I will leave the Angular request code out of this post.**\r\n\r\nHere is a Controller that returns items by UserId\r\n\r\n    [HttpGet]\r\n\t\tpublic async Task<IActionResult> Get()\r\n\t\t{\r\n\t\t\tvar artists = await _manageArtistService.GetAllByUser(this.User);\r\n\t\t\tif (artists == null) return NotFound($\"Artists could not be found\");\r\n\t\t\treturn Ok(artists);\r\n\t\t}\r\n\r\nHere is the service the controller calls\r\n\r\n    public async Task<IEnumerable<ManageArtistView>> GetAllByUser(ClaimsPrincipal user)\r\n\t\t{\r\n\t\t\t// gets all artists of a given user, sorted by artist\r\n\t\t\tvar userId = _userService.GetUserId(user);\r\n\t\t\tvar artists = await _manageArtistRepository.GetAllByUser(userId);\r\n\t\t\treturn artists;\r\n\t\t}\r\n\r\nIn the `UserService.cs` I have attempted a few different means of accessing the current user. I check the `this.User` that was passed from the Controller. \r\n\r\nI also check the current context in `_context` - a Singleton you can see in the `Startup.cs`.\r\n\r\nThere is also the `_caller` which is from this line in `Startup.cs`\r\n\r\n    services.AddTransient<ClaimsPrincipal>(s => s.GetService<IHttpContextAccessor>().HttpContext.User);\r\n\r\nWhen I inspect any of those variables, the `Claims` object **does not** contain the same claims as the JWT that was sent during the request. \r\n\r\n**I have verified the claims do not match by checking the claims at [jwt.io][1].**\r\n\r\nTo be specific, I'll give a scenario:\r\n\r\nI sign into my app with email `user@example.com`. That email is then set as a claim (Sub) as `user.UserName` inside the `CreateUserClaims()` function in the `AuthController.cs`:\r\n\r\n    var newClaims = new[]\r\n\t\t\t{\r\n\t\t\t\tnew Claim(JwtRegisteredClaimNames.Sub, user.UserName),\r\n\t\t\t\tnew Claim(JwtRegisteredClaimNames.Jti, Guid.NewGuid().ToString()),\r\n\t\t\t\tnew Claim(JwtRegisteredClaimNames.NameId, user.Id)\r\n\t\t\t}.Union(userClaims).ToList();\r\n\r\nThen some other properties are set and eventually the token is returned to the client. The client stores it in `localStorage`.\r\n\r\nThe client then makes a request, including the JWT in the header and adds it to the request options like this (Angular service):\r\n\r\n    private headers = new Headers(\r\n\t\t{\r\n\t\t\t'Content-Type': 'application/json',\r\n\t\t\t'Authorization': 'Bearer ' + this.authService.token\r\n\t\t});\r\n\tprivate options = new RequestOptions({ headers: this.headers });\r\n\r\nI check the Header in the Network tab and it contains the JWT - I check it on [jwt.io][1] and it looks good - has the proper email and other claims.\r\n\r\nNow I can logout of the app, sign in as a different user, get a new JWT, and make the request to that **same controller** shown above and the JWT will have the previous email, not the new one that I just signed in as. \r\n\r\nAnd I did go through the same checks, checking the JWT in the Header on the Network tab to ensure the claims contain the new email as the `sub` as well as the other claims. \r\n\r\nSo that means I was issued the proper JWT on the new sign in, but somehow the API is still looking at the old JWT.\r\n\r\nHow crazy is that?\r\n\r\nSomething else I have noticed is that even on that first login (pretend I just started the API with `dotnet run` and then I make my first request to the same controller shown above it will be missing the `nameid` claim. I can go check the JWT that was sent in the Header request and it **does have the `nameid` claim.** So, again, **the api will issue the proper JWT but when I send it back over HTTP in a request the API does not have the same JWT that I sent in the request.**\r\n\r\n**ONE MORE THING**\r\nI log the JWT in the console for simplicity. I went back and found the first one I started using today, at 9am. Its `jti` is the same as the one that is currently in the .net core API. It's now 4:45pm. I have 9 different JTWs in my console between those two times (9am and 4:45pm), all issued from the API. But the API seems to have kept the first one it created this morning - even after I have stopped and started the project numerous times.\r\n\r\n\r\nPlease help me understand what I am doing wrong. I must not be fully understanding how JWTs are handled.\r\n\r\n\r\n  [1]: http://jwt.io"},{"Id":"6776180290","Type":"IssuesEvent","CreatedAt":"2017-10-27T16:49:49","Actor":"gustyn","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Identity/issues/1488","RelatedDescription":"Opened issue \"Authentication Cookie not deleted when using HttpContext.SignOutAsync();\" (#1488) at aspnet/Identity","RelatedBody":"Whenever I call the said function, the cookies are never deleted.  I have to delete the cookies manually by calling the following:\r\n\r\n`await HttpContext.SignOutAsync();\r\nHttpContext.Response.Cookies.Delete(IdentityServerConstants.DefaultCookieAuthenticationScheme);\r\nHttpContext.Response.Cookies.Delete(IdentityServerConstants.DefaultCheckSessionCookieName);\r\nHttpContext.Response.Cookies.Delete(IdentityServerConstants.ExternalCookieAuthenticationScheme);\r\n`\r\nFrom everything I have read and based on the name, I should not have to do this.  Am I missing something?\r\n"},{"Id":"6774780348","Type":"IssuesEvent","CreatedAt":"2017-10-27T11:50:52","Actor":"derth","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Identity/issues/1487","RelatedDescription":"Opened issue \"Changing required password length\" (#1487) at aspnet/Identity","RelatedBody":"\r\nI’m using the following code:\r\n\r\n`\r\nservices.AddIdentity<ApplicationUser, IdentityRole>(options =>\r\n{\r\n\t// Password settings\r\n\toptions.Password.RequiredLength = 8;\r\n\toptions.Password.RequireNonAlphanumeric = false;\r\n\toptions.Password.RequireUppercase = false;\r\n})\r\n.AddEntityFrameworkStores<ApplicationDbContext>()\r\n.AddDefaultTokenProviders();\r\n`\r\n\r\nWhen i go to register, and click a single letter for password, the validation scripts still warn me about the default required length, which is 6 characters, instead of the new one i set (8 characters).\r\nIf i submit the form, i get the correct warning from the server, for the 8 characters.\r\n"},{"Id":"6774340338","Type":"PullRequestEvent","CreatedAt":"2017-10-27T09:59:05","Actor":"maqduni","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Identity/pull/1486","RelatedDescription":"Opened pull request \"Add alternative RavenDB provider by maqduni.\" (#1486) at aspnet/Identity","RelatedBody":"There already is a RavenDB Provider listed in the repository description, I'd like to list my package https://github.com/maqduni/AspNetCore.Identity.RavenDb there as well, it's also the most downloaded and complete RavenDB provider.\r\n\r\nRelated issue https://github.com/aspnet/Identity/issues/1467"}],"ResultType":"GitHubEvent"},"Kestrel":{"Events":[{"Id":"6791006137","Type":"PullRequestEvent","CreatedAt":"2017-10-31T18:09:12","Actor":"halter73","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/pull/2140","RelatedDescription":"Merged pull request \"Log exception after critical accept loop error\" (#2140) at aspnet/KestrelHttpServer","RelatedBody":""},{"Id":"6788050279","Type":"IssuesEvent","CreatedAt":"2017-10-31T08:04:58","Actor":"timminata","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/issues/2143","RelatedDescription":"Opened issue \"Microsoft.AspNetCore.Server.Kestrel.Core.BadHttpRequestException: Request timed out.\" (#2143) at aspnet/KestrelHttpServer","RelatedBody":"Hi,\r\nWe are currently getting a 500 from Kestrel on our net core 2.0 application when a client tries to upload a file and the connection between client and server is terminated (by the client) prematurely. Is this the expected behaviour? Is there a way to prevent it from coming up as a 500 since it is affecting our telemetry/uptime stats. From what I understand it is failing since Kestrel negotiates the file upload (we are using IFormFile) and since the client is disconnecting while the transfer is in progress, it is throwing an error before we hit our controller.\r\n\r\nThanks for any info, I have looked at manually streaming the file (https://docs.microsoft.com/en-us/aspnet/core/mvc/models/file-uploads) but was wondering if it was necessary to go down this route or if I can rather just handle the Kestrel error myself.\r\nThanks"},{"Id":"6786741722","Type":"IssuesEvent","CreatedAt":"2017-10-30T23:30:30","Actor":"benaadams","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/issues/2142","RelatedDescription":"Opened issue \"HTTP/1.1 103 Early Hints\" (#2142) at aspnet/KestrelHttpServer","RelatedBody":"Double send (like 102 Processing)\r\nhttps://datatracker.ietf.org/doc/draft-ietf-httpbis-early-hints/?include_text=1"}],"ResultType":"GitHubEvent"},"Razor":{"Events":[{"Id":"6785609866","Type":"IssuesEvent","CreatedAt":"2017-10-30T18:53:48","Actor":"RandyBuchholz","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Razor/issues/1747","RelatedDescription":"Opened issue \"Design-Time Directive [Language Feature Proposal]\" (#1747) at aspnet/Razor","RelatedBody":"This is to open some discussion about an idea for a new language construct in Razor.\r\n## Background\r\nWhile most of what we do is focused on compile and run time resolution, some \"dynamic\" things are better handled at design time. This proposal is to create a design-time directive in the Razor language.  The design time directive indicates that the file contents following the directive will be modified by some process. The design-time directive provides hooks and extension points into a cshtml file to enable actions to take place at design time. These can be trigged manually, by Visual Studio, or other processing.\r\n## Design-Time Directive\r\nThe design-time directive is used to communicate with parsers, file processors, and the Razor Engine.\r\n\r\n- It takes the general form: `@[...]`\r\n- It can take parameters: `@[parser, action, parameters]`\r\n- It can have scope: `@[...]{  ...  }`\r\n\r\nThe design-time directive indicates to a process (external or internal) that an area of the file will/can be modified by the process. The directive has no impact on it's own.\r\n\r\nIt is removed at compile time by the Razor Engine from the resulting html.\r\n## Examples\r\n\r\n### Substitution\r\nThe most trivial use of the directive is to insert a group of characters into the file.\r\nGiven - `@[myText] = \"This is some text to repeat.\"`\r\nUsing - `@[myText]`\r\nProduces => `This is some text to repeat.`\r\nThe directive isn't actually replaced. The text is inserted after the directive.\r\nAny characters can be used - text, tags, code.\r\nIn initial cshtml:\r\n```\r\n  @[myText] \r\n```\r\nAfter the substitution process runs, in cshtml:\r\n```\r\n  @[myText]\r\n  This is some text to repeat.\r\n```\r\nIn html:\r\n```\r\n  This is some text to repeat.\r\n```\r\nChanging the text in the assignment changes the results in all files using the directive when the process runs again. Though the directive doesn't technically have impact on it's own, some features like substitution would be built into the environment.\r\n\r\n### Merging\r\nRazor is especially interesting because it can be a mix of many languages - cs, css, js, html. Setting aside the \"correctness\" of putting css or js in an cshtml file, they provide fair examples. In an html/cshtml file, we can include `<script></script>` and `<style></style>` blocks. For the sake of argument, let's say we have a compelling reason to include content inside them in the file. Writing the code in the page is messy, and can be problematic. Worse, many of us prefer Less and Typescript, which we can't write in-page. The `@[]` directive helps.\r\n\r\nWe can write our css in a Less file - `styles.less`, that compiles into `styles.css`, and our js in `scripts.ts`, that compiles into `scripts.js`. We get full editor and intellisense support. In our `Page.cshml` we can include the results.\r\n```\r\n  @[style, \"~/styles.css\"]\r\n     ... The contents of styles.css are copied into the page here, in a <style> block.\r\n  @[script, \"~/scripts.js]\r\n     ... The contents of scripts.js are copied into the page here in a <script> block.\r\n```\r\nThis happens during design - the file content is modified, triggered manually, by the IDE, or an extension. For example, after Web Essentials compiles a Less file into css, it could also update the pages that reference the css file through design-time directives. Though the end result is much like `@render`, we get a local copy that provides access to the internals, and allows modification if we turn \"auto-update\" off.\r\n\r\nSelectors help keep files small. If we just need a couple of styles or functions, we can only copy them.\r\n```\r\n  @[style, \"~/styles.css\", { .form-controls-block, .nav-link } ]\r\n  @[script, \"~/scripts.js\", { datepicker } ]\r\n```\r\nThis would pull the two styles and single function out of the files, and insert them into the page inside`<style>` and `<script>` blocks. This can be helpful in building small, self-contained, and lightweight components.\r\n\r\n### Templates\r\nHtml Templating is another other possibility. This can be used in regular files or in template/scaffolding engines. An overly simple example is the common label-input-validation set - \r\n  `<label asp-for=\"ModelProperty\"><input asp-for=\"ModelProperty\"></input><...validationstuff...`\r\nThere are many ways to approach this, but one could be (in a cshtml) \r\n```\r\n@[]{\r\n  form-line = \"<label asp-for=\"@[param]\" ... \" \r\n}\r\n\r\n@[form-line, param=\"ModelProperty\"]\r\n   ... Fragment is expanded here, with replacement.\r\n```\r\nTemplates are like advanced, dynamic Snippets, and can be defined in the page or in shared files. They can auto update, or be manually triggered.\r\n\r\n### Targeting\r\nWhen we know we are running a file processor over the file, we can define targets. This can make the processor more efficient, and the file easier to parse. The processor can look for tagged areas to process, or even exclude.\r\n```\r\n  @[fileProcessorName, processingAction, exclude] {\r\n       ... This section is skipped by fileProcessorName when executing processingAction \r\n         - if it is aware of design-time directives.\r\n  }\r\n```\r\n## Discussion Scope\r\nThis proposal isn't about any of the specific examples, but about the concept of being able to provide information to processes that manipulate code files. And if so, is `@[]` a good construct to use? More and more, we run processes against these files - from built-in formatting processes, to refactoring, to analysis processes. A standard way to communicate with these processors might be valuable. \r\n\r\n## Outside the Proposal\r\nThe concept can also extend into other languages.\r\nThough advanced, this could allow things like name refactoring for related items in different technologies. For example, a C# class and Typescript class could have a design-time association. Changing one triggers changes to the other. This is a design-time change - the files are modified directly. The association doesn't exist at compile or run time. This would be a long time coming, but shows possible potential of the overall concept. \r\n"},{"Id":"6784783224","Type":"PullRequestEvent","CreatedAt":"2017-10-30T16:15:29","Actor":"natemcmaster","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/Razor/pull/1746","RelatedDescription":"Merged pull request \"Skip building the VSIX if the Microsoft.VisualStudio.Component.VSSDK workload is not available\" (#1746) at aspnet/Razor","RelatedBody":"Uses the new \"toolsets\" section of korebuild.json to find a version of MSBuild in Visual Studio that has the required VSIX SDK.\r\n\r\nBehavior: this currently warns if a version of VS with this workload could not be found and skips building the VSIX. We could change this to be made a fatal error if that would be better.\r\n\r\ncc @jkotalik - you'll need something similar for ANCM."},{"Id":"6777772589","Type":"PullRequestEvent","CreatedAt":"2017-10-28T00:54:10","Actor":"natemcmaster","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Razor/pull/1746","RelatedDescription":"Opened pull request \"Skip building the VSIX if the Microsoft.VisualStudio.Component.VSSDK workload is not available\" (#1746) at aspnet/Razor","RelatedBody":"Uses the new \"toolsets\" section of korebuild.json to find a version of MSBuild in Visual Studio that has the required VSIX SDK.\r\n\r\nBehavior: this currently warns if a version of VS with this workload could not be found and skips building the VSIX. This could be made a fatal error. \r\n\r\ncc @jkotalik - you'll need something similar for ANCM."}],"ResultType":"GitHubEvent"},"Templates":{"Events":[{"Id":"6760798601","Type":"IssuesEvent","CreatedAt":"2017-10-24T22:00:58","Actor":"Eilon","Repository":"aspnet/Templates","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Templates/issues/67","RelatedDescription":"Closed issue \"External Logins does not set the Email\" (#67) at aspnet/Templates","RelatedBody":"- Enable Facebook Login\n- Login using Facebook for the first time\n- Email field is blank. It should be set from what we got from Facebook\n"},{"Id":"6760789807","Type":"IssuesEvent","CreatedAt":"2017-10-24T21:58:48","Actor":"Eilon","Repository":"aspnet/Templates","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Templates/issues/86","RelatedDescription":"Closed issue \"Identity: Consider less generic name for ManageController\" (#86) at aspnet/Templates","RelatedBody":"Manage is a very generic name and you would probably expect http://abcdefg/Manage to be about managing something from your applications business domain rather than user accounts.\n\nManageAccount would probably be a better name.\n"},{"Id":"6760785159","Type":"IssuesEvent","CreatedAt":"2017-10-24T21:57:37","Actor":"Eilon","Repository":"aspnet/Templates","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Templates/issues/115","RelatedDescription":"Closed issue \"Need more templates\" (#115) at aspnet/Templates","RelatedBody":"MVC 6 project templates should include a test project template. And the main ASP.NET 5 Preview Templates / Web Application or ... / Empty templates should have a few more sub-options, enabling for example addition and removal of XML support, creation of a minimal MVC project, or adding in EF (without choosing Individual User Accounts authentication).\n\nHopefully this will allow the new project dialogue to enable the options shown below -- plus a few options specific to MVC 6.\n![disabled project features](https://cloud.githubusercontent.com/assets/6431421/8257821/2a76a606-1665-11e5-8e75-cdb21473f6a1.png)\n"},{"Id":"6760779940","Type":"IssuesEvent","CreatedAt":"2017-10-24T21:56:18","Actor":"Eilon","Repository":"aspnet/Templates","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Templates/issues/104","RelatedDescription":"Closed issue \"OrgAuth: Account Controller should return void\" (#104) at aspnet/Templates","RelatedBody":"Since https://github.com/aspnet/Mvc/issues/2409 is fixed. We should change the AccountController for SSO/ MultiOrg to return void\n"},{"Id":"6760777806","Type":"IssuesEvent","CreatedAt":"2017-10-24T21:55:46","Actor":"Eilon","Repository":"aspnet/Templates","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Templates/issues/120","RelatedDescription":"Closed issue \"Template feedback\" (#120) at aspnet/Templates","RelatedBody":"Porting from MVC repo https://github.com/aspnet/Mvc/issues/2637\n"},{"Id":"6760775251","Type":"IssuesEvent","CreatedAt":"2017-10-24T21:55:10","Actor":"Eilon","Repository":"aspnet/Templates","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Templates/issues/137","RelatedDescription":"Closed issue \"Need a SPA template\" (#137) at aspnet/Templates","RelatedBody":""},{"Id":"6760770959","Type":"IssuesEvent","CreatedAt":"2017-10-24T21:54:08","Actor":"Eilon","Repository":"aspnet/Templates","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Templates/issues/365","RelatedDescription":"Closed issue \"Poor user and dev experience in Identity email confirmation\" (#365) at aspnet/Templates","RelatedBody":"There are two issues using the default template for identity when using email confirmation.\n\nFollowing the guide here: http://docs.asp.net/en/latest/security/authentication/accconfirm.html\n\nPoor user experience: When you click \"Register\" it sends the email off, but just redirects the user to the Home controller. Redirecting to something else to indicate they have to confirm their account would be a better example. Perhaps the default template should have such a view OOTB.\n\nPoor dev experience: When logging in with an external account (lets say Facebook) if the account doesn't exist you get thrown into AccountController.ExternalLoginConfirmation, great. This screen requires an email, so you complete the registration then you're logged in but never shoots off the email confirmation link here. Perhaps a commented out section in this action to deal with this would improve the dev experience here.\n"},{"Id":"6760770378","Type":"IssuesEvent","CreatedAt":"2017-10-24T21:53:59","Actor":"Eilon","Repository":"aspnet/Templates","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Templates/issues/382","RelatedDescription":"Closed issue \"MVC Template Should Apply ResponseCache Attribute to Error Action\" (#382) at aspnet/Templates","RelatedBody":"HomeController.Error() should be updated:\n\n```\n    [ResponseCache(Duration = 0, Location = ResponseCacheLocation.None, NoStore = true)]\n    public IActionResult Error()\n    {\n        return View();\n    }\n```\n\nThere is no good scenario where you would want errors to be cached, either on the client or via a proxy, or to have error information stored in such caches (especially if it might contain sensitive information in stack traces, etc.).\n"},{"Id":"6760769801","Type":"IssuesEvent","CreatedAt":"2017-10-24T21:53:51","Actor":"Eilon","Repository":"aspnet/Templates","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Templates/issues/406","RelatedDescription":"Closed issue \"Add a flow for changing email in the Manage page\" (#406) at aspnet/Templates","RelatedBody":"Porting from ASP.NET Identity repo https://github.com/aspnet/Identity/issues/727\n"},{"Id":"6760769204","Type":"IssuesEvent","CreatedAt":"2017-10-24T21:53:42","Actor":"Eilon","Repository":"aspnet/Templates","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Templates/issues/423","RelatedDescription":"Closed issue \"Don't create Project_Readme.html for ASP.NET 5 Empty\" (#423) at aspnet/Templates","RelatedBody":"I created an empty project for both ASP.NET 4 and ASP.NET 5. The ASP.NET 5 project had a Project_Readme.html and the ASP.NET 4 one did not. I'm not aware if that was on purpose or not, but we should be consistent with the empty projects. I think we should not add the Project_Readme.html for all Empty projects.\n"},{"Id":"6760768174","Type":"IssuesEvent","CreatedAt":"2017-10-24T21:53:28","Actor":"Eilon","Repository":"aspnet/Templates","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Templates/issues/444","RelatedDescription":"Closed issue \"Support On-Premises option for Work & School Accounts\" (#444) at aspnet/Templates","RelatedBody":"Support this for Web APIs and Web Apps.\n"},{"Id":"6760767634","Type":"IssuesEvent","CreatedAt":"2017-10-24T21:53:19","Actor":"Eilon","Repository":"aspnet/Templates","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Templates/issues/451","RelatedDescription":"Closed issue \"ValidationSummary.All should be replaced with ModelOnly\" (#451) at aspnet/Templates","RelatedBody":"All the views in the Accounts folder use\n`<div asp-validation-summary=\"ValidationSummary.All\" class=\"text-danger\"></div>`\n\nThey should just use \n`<div asp-validation-summary=\"ValidationSummary.ModelOnly\" class=\"text-danger\"></div>`\n\nSo you get each error twice. \n\n![image](https://cloud.githubusercontent.com/assets/3605364/13896326/ae916ee2-ed2b-11e5-8bf5-f9ad5246e82c.png)\n"},{"Id":"6760767057","Type":"IssuesEvent","CreatedAt":"2017-10-24T21:53:11","Actor":"Eilon","Repository":"aspnet/Templates","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Templates/issues/490","RelatedDescription":"Closed issue \"Show external providers on the Register page\" (#490) at aspnet/Templates","RelatedBody":"The individual auth template has a login page and a register page. Login shows a password login and external providers. Register only shows a password login. Register should also show external providers, as this is where new users will go to sign-up.\n"},{"Id":"6760766431","Type":"IssuesEvent","CreatedAt":"2017-10-24T21:53:02","Actor":"Eilon","Repository":"aspnet/Templates","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Templates/issues/492","RelatedDescription":"Closed issue \"Add tests to project templates\" (#492) at aspnet/Templates","RelatedBody":"Hi,\n\nTesting is unfortunately a part of most of our jobs. I don't know if it is already planned/done but in visual studio when I create a new ASP.NET MVC 6 (or is it Core 1 ? Not sure) there are no tests. This is particularly annoying for the template including user accounts. I spent a few hours writing tests for the included templates.\n\nI was wondering whether other people would be interested ?\n"}],"ResultType":"GitHubEvent"},"Tooling":{"Events":[{"Id":"6762343502","Type":"IssuesEvent","CreatedAt":"2017-10-25T07:30:40","Actor":"Pichasepong","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Tooling/issues/1060","RelatedDescription":"Opened issue \"Problems .net core 1.0.1 vs 2015 tooling preview 2 error logs file.Help Me. \" (#1060) at aspnet/Tooling","RelatedBody":"Problems installing on Server 2012 R2 ,Dot net core 1.0.1 vs 2015 tooling preview 2 error logs file.\r\n\r\n![product_dotnetcoreerror](https://user-images.githubusercontent.com/12063904/31985990-040a5f72-b991-11e7-9356-ddd06160a87c.jpg)\r\n"},{"Id":"6704265290","Type":"IssuesEvent","CreatedAt":"2017-10-11T19:06:00","Actor":"StefH","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Tooling/issues/877","RelatedDescription":"Closed issue \"VS 2017 RC : How to define a multi framework project ?\" (#877) at aspnet/Tooling","RelatedBody":"I've this **csproj** file:\r\n\r\n```xml\r\n<Project ToolsVersion=\"15.0\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">\r\n  <Import Project=\"$(MSBuildExtensionsPath)\\$(MSBuildToolsVersion)\\Microsoft.Common.props\" />\r\n  <PropertyGroup>\r\n    <TargetFrameworks>netstandard1.3</TargetFrameworks>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <Compile Include=\"**\\*.cs\" />\r\n    <EmbeddedResource Include=\"**\\*.resx\" />\r\n  </ItemGroup>\r\n  <ItemGroup Condition=\" '$(TargetFramework)' == 'netstandard1.3' \">\r\n    <PackageReference Include=\"JetBrains.Annotations\">\r\n      <Version>10.2.1</Version>\r\n    </PackageReference>\r\n    <PackageReference Include=\"NETStandard.Library\">\r\n      <Version>1.6.1</Version>\r\n    </PackageReference>\r\n    <PackageReference Include=\"Microsoft.NET.Sdk\">\r\n      <Version>1.0.0-alpha-20161104-2</Version>\r\n      <PrivateAssets>All</PrivateAssets>\r\n    </PackageReference>\r\n    <PackageReference Include=\"Newtonsoft.Json\">\r\n      <Version>9.0.1</Version>\r\n    </PackageReference>\r\n  </ItemGroup>\r\n  <Import Project=\"$(MSBuildToolsPath)\\Microsoft.CSharp.targets\" />\r\n</Project>\r\n```\r\n\r\nWhich produces this error:\r\n```bash\r\nRestoring NuGet packages...\r\nTo prevent NuGet from restoring packages during build, open the Visual Studio Options dialog, click on the Package Manager node and uncheck 'Allow NuGet to download missing packages during build.'\r\nError occurred while restoring NuGet packages: Invalid restore input. Invalid target framework 'unsupported'. Input files: C:\\temp\\ClassLibrary1\\ClassLibrary1.csproj.\r\n1>------ Rebuild All started: Project: ClassLibrary1, Configuration: Debug Any CPU ------\r\n1>Build started 2016-11-23 07:43:43.\r\n1>Target DispatchToInnerBuilds:\r\n1>  Target _CheckForInvalidConfigurationAndPlatform:\r\n1>    C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\MSBuild\\15.0\\Bin\\Microsoft.Common.CurrentVersion.targets(733,5): error : The OutputPath property is not set for project 'ClassLibrary1.csproj'.  Please check to make sure that you have specified a valid combination of Configuration and Platform for this project.  Configuration='Debug'  Platform='AnyCPU'.  This error may also appear if some other project is trying to follow a project-to-project reference to this project, this project has been unloaded or is not included in the solution, and the referencing project does not build using the same or an equivalent Configuration or Platform.\r\n1>  Done building target \"_CheckForInvalidConfigurationAndPlatform\" in project \"ClassLibrary1.csproj\" -- FAILED.\r\n1>\r\n1>  Done building project \"ClassLibrary1.csproj\" -- FAILED.\r\n1>\r\n1>Build FAILED.\r\n```"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"6780432155","Type":"IssuesEvent","CreatedAt":"2017-10-29T14:10:51","Actor":"smitpatel","Repository":"aspnet/Announcements","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Announcements/issues/276","RelatedDescription":"Closed issue \"Improved end to end testing support for MVC applications: Typo?\" (#276) at aspnet/Announcements","RelatedBody":"Hi @javiercn, I think the constructor name is wrong in the first example code block in #275\r\n\r\nShouldn't it be \r\n```\r\n        public MyApplicationFunctionalTests (WebApplicationTestFixture<Startup> fixture)\r\n        {\r\n            Client = fixture.Client;\r\n        }\r\n```\r\n\r\n"},{"Id":"6779929600","Type":"IssuesEvent","CreatedAt":"2017-10-29T07:24:18","Actor":"searus","Repository":"aspnet/Announcements","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Announcements/issues/276","RelatedDescription":"Opened issue \"Improved end to end testing support for MVC applications: Typo?\" (#276) at aspnet/Announcements","RelatedBody":"Hi, I think the constructor name is wrong in the first example code block in #275\r\n\r\nShouldn't it be \r\n```\r\n        public MyApplicationFunctionalTests (WebApplicationTestFixture<Startup> fixture)\r\n        {\r\n            Client = fixture.Client;\r\n        }\r\n```\r\n\r\n"},{"Id":"6777426880","Type":"IssuesEvent","CreatedAt":"2017-10-27T22:12:32","Actor":"javiercn","Repository":"aspnet/Announcements","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Announcements/issues/275","RelatedDescription":"Opened issue \"Improved end to end testing support for MVC applications\" (#275) at aspnet/Announcements","RelatedBody":"# Improved end to end testing support for MVC applications\r\n\r\nIn this release we have created a new package Microsoft.AspNetCore.Mvc.Testing to help streamline\r\nend to end testing of MVC applications using TestServer.\r\n\r\nThis package takes care of some of the typical pitfalls users run into when trying to test MVC applications\r\nusing TestServer.\r\n* It copies the .deps file from your project into the test assembly bin folder.\r\n* It sets the content root the application's project root so that static files and views can be found.\r\n* It provides a class `WebApplicationTestFixture<TStartup>` that streamlines the bootstrapping of your app on\r\nTestServer.\r\n\r\n## Sample end to end in memory test using xUnit\r\n\r\n```csharp\r\nusing Xunit;\r\n\r\nnamespace MyApplication.FunctionalTests\r\n{\r\n    public class MyApplicationFunctionalTests : IClassFixture<WebApplicationTestFixture<Startup>>\r\n    {\r\n        public TempDataInSessionTest(WebApplicationTestFixture<Startup> fixture)\r\n        {\r\n            Client = fixture.Client;\r\n        }\r\n\r\n        public HttpClient Client { get; }\r\n\r\n        [Fact]\r\n        public async Task GetHomePage()\r\n        {\r\n            // Arrange & Act\r\n            var response = await Client.GetAsync(\"/\");\r\n\r\n            // Assert\r\n            Assert.Equal(HttpStatusCodes.OK, response.StatusCode);\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n## Important notes\r\n\r\n### Shadow copying needs to be disabled\r\nFor end to end in-memory tests to work properly, shadow copying needs to be disabled on your test framework of choice, as it causes the tests to execute in a different folder than the output folder.\r\nFor instructions on how to do this on xUnit see https://xunit.github.io/docs/configuring-with-json.html.\r\n\r\n### Your app needs to have a CreateWebHostBuilderMethod on the Program class\r\nBy convention our ```WebApplicationTestFixture<TStartup>``` tries to find a method with the signature ```public static IWebHostBuilder CreateWebHostBuilder(string [] args)``` on the entry point class of the assembly where Startup is located. (Typically your Program class) If you don't have this method ```WebApplicationTestFixture<TStartup>``` won't be able to initialize your app in the same way it is done on a normal run. You can configure the WebHostBuilder yourself by overriding CreateWebHostBuilder on ```WebApplicationTestFixture<TStartup>```.\r\n\r\n### The test infrastructure needs to know the content root of the application under test\r\nTo set the content root for your app, ```WebApplicationTestFixture<TStartup>``` first locate your solution file ```(.sln)``` and then make a guess about where project might be. The Content Root of the application is defined by convention as ```<<SolutionFolder>>/<<ProjectAssemblyName>>```. For example, based on the folder structure defined below, the content root of the application is defined as ```c:\\work\\MyApp```. This is important because if not set correctly to the root folder of your application under test all views and static files will not be found.\r\n\r\n```\r\nc:/work/\r\n    MyApp.sln\r\n    MyApp/MyApp.csproj\r\n    MyApp.FunctionalTests/MyApp.FunctionalTests.csproj\r\n```\r\n\r\nThe process for determining the folder to use as the content root when running the tests is the following:\r\n* ```WebApplicationTestFixture<TStartup>``` starts on the bin folder of the test project, in the example above ```c:/work/MyApp.FunctionalTests/MyApp.FunctionalTests/bin/<<Configuration>>/<<Framework>>```\r\n* It navigates to the parent folder until it finds a ```.sln``` file.\r\n* It appends ```<<AssemblyName>>``` to the folder in which it found the ```.sln``` file and set that as the content root.\r\n\r\nIf you happen to be using a different convention for the layout of your projects, you can inherit from WebApplicationTestFixture and pass in the relative path from your solution to the application under test when calling the constructor. For example ```\"/src/MyApp\"```\r\n\r\n```csharp\r\npublic class MyAppTestFixture<TStartup> : WebApplicationTestFixture<TStartup> where TStartup : class\r\n{\r\n    public MyAppTestFixture(string solutionRelativePath)\r\n        : base(\"/src/MyApp\") { }\r\n}\r\n```"},{"Id":"6754805124","Type":"IssuesEvent","CreatedAt":"2017-10-23T21:16:00","Actor":"Eilon","Repository":"aspnet/Announcements","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Announcements/issues/274","RelatedDescription":"Opened issue \"ASP.NET/EF Core 2.0.3 patch pre-release test feed\" (#274) at aspnet/Announcements","RelatedBody":"Hi, we now have a public test feed that you can use to try out the ASP.NET/EF Core 2.0.3 patch!\r\n\r\nYou can test this pre-release patch by adding the following feed to your app's or machine's NuGet.config file:\r\n* `https://dotnet.myget.org/F/aspnet-2-0-2-october2017-patch-public/api/v3/index.json`\r\n   * ![image](https://user-images.githubusercontent.com/202643/31913542-4757d2a0-b7fc-11e7-9bf7-7157bd18a6ca.png)\r\n   * (please ignore the *name* of the feed; it is incorrect 😦)\r\n\r\n## Update your project\r\n1. Open an existing .NET Core 2.0 project's CSPROJ file\r\n2. Update the version of the `Microsoft.AspNetCore.All` package from `2.0.0` to `2.0.3-*`\r\n3. Update the version of all the other `<PackageReference>` items from `2.0.0` to `2.0.1-*` (*Note: This is a different version than the `.All` package!*)\r\n4. Add the following element to the `<PropertyGroup>` at the top of the CSPROJ file:\r\n   * `<NoWarn>$(NOWARN);NU1605</NoWarn>`\r\n5. From a command line window (terminal), run `dotnet restore` to restore the pre-release patch packages into the project (or restore packages from your IDE, such as Visual Studio 2017)\r\n6. You should now be able to run your project with the pre-release patch packages\r\n\r\n## Additional resources\r\n* More info on updating NuGet packages is available here:\r\n   * https://docs.microsoft.com/en-us/nuget/consume-packages/reinstalling-and-updating-packages\r\n* The full list of fixes and changes made in this patch are available using this query:\r\n   * https://github.com/search?utf8=%E2%9C%93&q=org%3Aaspnet+is%3Aissue+is%3Aclosed+milestone%3A2.0.3&type=Issues\r\n* You can browse the list of updated packages on this gallery page:\r\n   * https://dotnet.myget.org/gallery/aspnet-2-0-2-october2017-patch-public\r\n\r\n## Feedback\r\nWe are looking for feedback on this patch. We'd like to know if you have any issues with this patch by updating your apps and libraries to the latest packages and seeing if it fixes the issues you've had, or if it introduces any new issues. If you have any issues or questions, please reply on the [discussion thread](XYZ) to let us know as soon as possible.\r\n\r\n## What's next\r\nWe will post an update when the patch is publicly available on [NuGet.org](https://nuget.org).\r\n\r\nThanks,\r\nEilon"},{"Id":"6704873205","Type":"IssuesEvent","CreatedAt":"2017-10-11T21:19:35","Actor":"jbagga","Repository":"aspnet/Announcements","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Announcements/issues/273","RelatedDescription":"Opened issue \"Use ContractResolver to create paths from expressions for json-patch\" (#273) at aspnet/Announcements","RelatedBody":"`JsonPatchDocumentOfT.cs` will use the `ContractResolver` provided to get paths instead of forcing to lower case.\r\n\r\nAddresses aspnet/JsonPatch#90.\r\n\r\nSee aspnet/JsonPatch for discussion.\r\n"},{"Id":"6692649574","Type":"IssuesEvent","CreatedAt":"2017-10-09T17:08:31","Actor":"Tratcher","Repository":"aspnet/Announcements","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Announcements/issues/271","RelatedDescription":"Opened issue \"WsFederation 2.0.0-preview1 out of band release\" (#271) at aspnet/Announcements","RelatedBody":"WsFederation preview support is now available for ASP.NET Core 2.0.0. The Microsoft.AspNetCore.Authentication.WsFederation 2.0.0-preview1 package is available at https://www.nuget.org/packages/Microsoft.AspNetCore.Authentication.WsFederation/. This is a standalone preview that targets netstandard2.0 and should work with existing ASP.NET Core 2.0.0 applications (.NET Core 2.0 or .NET 4.6.1). A non-preview ASP.NET Core 2.0.0 compatible package will follow once we’ve addressed your feedback.\r\n \r\nThe code is available at https://github.com/aspnet/security/tree/rel/2.0.0-ws-preview1 and issues can be filed at https://github.com/aspnet/security/issues. Please give us a 👍 from the reactions menu on the linked discussion post if you have successfully used this component and are ready for the final release.\r\n \r\nThis component is a port from Microsoft.Owin.Security.WsFederation and uses many of the same mechanics. It has also been updated to integrate with ASP.NET Core 2.0’s authentication model. See the samples below.\r\n \r\nAside from updating the usage pattern to match ASP.NET Core, there are also some functional changes to be aware of.\r\nA.\tThis component no longer checks every form post request for sign-in messages by default. Sign-in callbacks are restricted to the \"/signin-wsfed\" path by default. The CallbackPath can be changed to the application root “/” used by some auth providers if you also enable SkipUnrecognizedRequests to allow sharing that request path with other components.\r\nB.\tThis component no longer allows unsolicited logins by default. That WsFederation protocol feature is susceptible to XSRF attacks. See the AllowUnsolicitedLogins option to opt into that feature if your application requires it.\r\n\r\nSee https://github.com/aspnet/Security/issues/1473 for discussion.\r\n \r\nSamples:\r\n \r\nFor applications only using WsFederation (similar to using OpenIdConnect):\r\n \r\n        public void ConfigureServices(IServiceCollection services)\r\n        {\r\n            services.AddAuthentication(sharedOptions =>\r\n            {\r\n                sharedOptions.DefaultScheme = CookieAuthenticationDefaults.AuthenticationScheme;\r\n                sharedOptions.DefaultSignInScheme = CookieAuthenticationDefaults.AuthenticationScheme;\r\n                sharedOptions.DefaultChallengeScheme = WsFederationDefaults.AuthenticationScheme;\r\n            })\r\n            .AddWsFederation(options =>\r\n            {\r\n                options.Wtrealm = Configuration[\"wsfed:realm\"];\r\n                options.MetadataAddress = Configuration[\"wsfed:metadata\"];\r\n            })\r\n            .AddCookie();\r\n        }\r\n \r\n        public void Configure(IApplicationBuilder app)\r\n        {\r\n           app.UseAuthentication();\r\n \r\n                         // …\r\n        }\r\n \r\nFor applications using WsFederation with Identity:\r\n \r\n            services.AddAuthentication()\r\n                .AddWsFederation(options =>\r\n                {\r\n                    options.Wtrealm = Configuration[\"wsfed:realm\"];\r\n                    options.MetadataAddress = Configuration[\"wsfed:metadata\"];\r\n                });\r\n"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"917884946324250624","CreatedAt":"2017-10-10T22:49:59+00:00","UserScreenname":"aspnet","Text":"The #aspnet Community Standup starts now - https://t.co/4Ioo9jNSN2","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":13,"FavoriteCount":9,"RawContent":null},{"Id":"917877107904036865","CreatedAt":"2017-10-10T22:18:50+00:00","UserScreenname":"aspnet","Text":"Join us in a half hour (3:45 PM Pacific) for this week's #aspnet Community Standup at https://t.co/4Ioo9jNSN2","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":11,"FavoriteCount":3,"RawContent":null},{"Id":"915262407743647744","CreatedAt":"2017-10-03T17:08:57+00:00","UserScreenname":"aspnet","Text":"We're live at https://t.co/4Ioo9jNSN2 for the exciting #SignalR deep dive. Join us now!","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":34,"FavoriteCount":22,"RawContent":null},{"Id":"915242491774869504","CreatedAt":"2017-10-03T15:49:49+00:00","UserScreenname":"aspnet","Text":"Join us for some #SignalR Core demos at 10 AM PDT (UTC-7) on #ASPNET Community Standup w/ SignalR dev @moozzyk.\n\nhttps://t.co/4Ioo9jNSN2","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":58,"FavoriteCount":26,"RawContent":null},{"Id":"912821323675529216","CreatedAt":"2017-09-26T23:28:57+00:00","UserScreenname":"aspnet","Text":"This week's community links from the #ASPNET Community Standup https://t.co/M37VVhlzcZ","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":8,"FavoriteCount":8,"RawContent":null},{"Id":"912799120355581952","CreatedAt":"2017-09-26T22:00:43+00:00","UserScreenname":"aspnet","Text":"Join us at 3:45 PM Pacific (UTC+8) for the #ASPNET Community Standup. #dotNetConf recap, @SignalR and more.\nhttps://t.co/sgzsUBZksP","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":23,"FavoriteCount":10,"RawContent":null}]}},"RunOn":"2017-11-01T05:30:10.3218827Z","RunDurationInMilliseconds":8056}