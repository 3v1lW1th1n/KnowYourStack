{"Data":{"GitHub":{"Issues":[{"Id":"399593021","IsPullRequest":true,"CreatedAt":"2019-01-16T00:17:04","Actor":"AdamYoblick","Number":"323","RawContent":null,"Title":"disable unit tests for debug config","State":"open","Body":"Fixes #277 \r\n\r\nThe problem is debug asserts are causing the xUnit runner to fail, but that failure doesn't show up as a real test failure in the debug config. So it's kind of a weird half failure that I'm not happy with. \r\n\r\nOne solution is to get rid of debug asserts completely, but we have too many of them. So the other solution is to not run unit tests for the debug config.\r\n\r\neng\\common\\CIBuild.cmd is part of the arcade sdk (so we can't modify it), and it passes -test by default. So there are two options:\r\n\r\n1. Pass -test:$False as an additional parameter, but only for the debug config (this is super ugly, because we're basically passing -test, then cancelling it out with -test:$False)\r\n2. Make a new CIBuild.cmd that is not part of arcade, with the -test omitted. Then we can add it -test when appropriate (as well as -integrationTest and -performanceTest, which are also supported)\r\n\r\nI opted for number 2 because it's cleaner. The downside is that we no longer reference the common arcade CIBuild.cmd, but that file is a one liner and hasn't changed in a very long time, so the risk is low.\r\n\r\nAnother benefit is now engineers can still write all the debug asserts they like without the risk of failing the CI build. So it's the best of both worlds. ","Url":"https://github.com/dotnet/winforms/pull/323","RelatedDescription":"Open PR \"disable unit tests for debug config\" (#323)"},{"Id":"399574582","IsPullRequest":true,"CreatedAt":"2019-01-15T23:02:47","Actor":"dreddy-work","Number":"322","RawContent":null,"Title":"VisualStyleState check is now converted in to bit-wise.","State":"open","Body":"Fixing GitHub issue #317. VisualstyleState was a numeric check that is broken in latest windows  version (where it added a new flag to its Enum).  Changing the state validation to bit-wise to fix it.\r\n\r\n","Url":"https://github.com/dotnet/winforms/pull/322","RelatedDescription":"Open PR \"VisualStyleState check is now converted in to bit-wise.\" (#322)"},{"Id":"396198461","IsPullRequest":false,"CreatedAt":"2019-01-15T20:54:23","Actor":"MohammadHamdyGhanem","Number":"297","RawContent":null,"Title":"Win 10 scalling issue","State":"closed","Body":"I used VASE app on win 10 ver 1803. It works fine, until I customized win 10 display setting to use a 125% or a 150% scale, when I noticed that subtitle text displayed on the video is shifted down so a part of it goes out of display.\r\nThis doesn't happen in Win 7 nor win 10 ver 17xx.\r\nNote: VASE Uses Framework V: 4 . I had a performance issue with V 7.2 put this not our concern here!\r\n\r\nWhat has changed, and how this can be solved in .NET? Or should this be solved in Win 10?\r\n\r\nNote: This is the class that displays the subtitle text and measures its size:\r\nhttps://github.com/MohammadHamdyGhanem/VASE/blob/master/src/Controls/TransparentRTFViewer.cs\r\n\r\nand this is the class that control its pos on the vedio:\r\nhttps://github.com/MohammadHamdyGhanem/VASE/blob/master/src/Controls/VideoPlayerContainer.cs\r\nThis is the part that does it:\r\n```\r\nvoid ResizeSubtitleTextBox(object sender, EventArgs e)\r\n{\r\n    if (ExitResizeTextBox || VideoWidth == 0)\r\n        return;\r\n\r\n    var _subtitlesHeight = _subtitleTextBox.Height;\r\n    if (_subtitlesHeight == 0 || _panelcontrols == null)\r\n        return;\r\n\r\n    var p = PointToScreen(this.Location);\r\n    _formSubtitle.Left = p.X + 2;\r\n\r\n    float VideoHeight2 = (VideoHeight < VideoWidth) ? VideoHeight * Width / VideoWidth : Height;\r\n\r\n    var h1 =  Height - (_subtitlesHeight + (_panelcontrols.Visible ? _controlsHeight : 0));\r\n    var h2 =  PanelPlayer.Top + (int)((Height + VideoHeight2) / 2);\r\n    _formSubtitle.Top = p.Y + Math.Min(h1, h2);\r\n     _formSubtitle.Width = Width - 4;           \r\n    _subtitleTextBox.Width = Width - 4;\r\n\r\n    p = this.PointToScreen(_panelcontrols.Location);\r\n    _formSubtitle.Height = Math.Max(_subtitlesHeight + 1, p.Y - _formSubtitle.Top - 2);\r\n        }\r\n```\r\n\r\n\r\n","Url":"https://github.com/dotnet/winforms/issues/297","RelatedDescription":"Closed issue \"Win 10 scalling issue\" (#297)"},{"Id":"399523733","IsPullRequest":false,"CreatedAt":"2019-01-15T20:34:01","Actor":"kevingosse","Number":"321","RawContent":null,"Title":"Delete obsolete ResourceConsumption/ResourceExposure attributes","State":"open","Body":"Those attributes are present in a few places in the code and can be probably removed (see https://github.com/dotnet/corefx/pull/30863).","Url":"https://github.com/dotnet/winforms/issues/321","RelatedDescription":"Open issue \"Delete obsolete ResourceConsumption/ResourceExposure attributes\" (#321)"},{"Id":"399496441","IsPullRequest":true,"CreatedAt":"2019-01-15T19:22:32","Actor":"AdamYoblick","Number":"320","RawContent":null,"Title":"Add corefx packages as dependencies","State":"open","Body":"Performed the following steps:\r\n\r\n1. Added a maestro subscription from corefx -> winforms with `darc add-subscription --channel \".NET Core 3 Dev\" --source-repo https://github.com/dotnet/corefx --target-repo https://github.com/dotnet/winforms --target-branch master --update-frequency everyDay --ignore-checks WIP,license/cla --all-checks-passed -q`. Verified the subscription exists by running `darc get-subscriptions`\r\n\r\n2. Downloaded the corefx asset manifest from `https://dnceng.visualstudio.com/_apis/resources/Containers/935206?itemPath=BuildAssetsManifest%2Fcorefx-20190109.7.xml`\r\n\r\n3. For each package in our Versions.props that matches a corefx output in the AssetManifest from the previous step, create a dependency in Version.Details.xml\r\n\r\n4. Ran `darc update-dependencies -c \".NET Core 3 Dev\"` to get the package versions to latest and ensure the dependencies flow correctly.\r\n\r\n5. Updated the coresdk to the version used in wpf (since they did the corefx work before us). See https://github.com/dotnet/wpf/pull/254\r\n\r\n6. Tested locally with .\\build -test","Url":"https://github.com/dotnet/winforms/pull/320","RelatedDescription":"Open PR \"Add corefx packages as dependencies\" (#320)"},{"Id":"399335973","IsPullRequest":true,"CreatedAt":"2019-01-15T17:27:09","Actor":"dotnet-maestro[bot]","Number":"319","RawContent":null,"Title":"Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19064.4\r\n\r\n","Url":"https://github.com/dotnet/winforms/pull/319","RelatedDescription":"Closed or merged PR \"Update dependencies from dotnet/arcade\" (#319)"},{"Id":"399083142","IsPullRequest":true,"CreatedAt":"2019-01-14T23:38:40","Actor":"Tanya-Solyanik","Number":"318","RawContent":null,"Title":"typo in SystemInformation class","State":"closed","Body":"fixed a copy/paste bug in the GetSystemMetrics call that results in getting horizontal metric instead of the vertical one","Url":"https://github.com/dotnet/winforms/pull/318","RelatedDescription":"Closed or merged PR \"typo in SystemInformation class\" (#318)"},{"Id":"396850793","IsPullRequest":false,"CreatedAt":"2019-01-14T22:48:01","Actor":"gsmental","Number":"303","RawContent":null,"Title":"Web Services(asmx) in WinForms","State":"closed","Body":"we are consuming web services (asmx files)  from our WebForms based projects. but these are not available in winform (i am just demanding asmx files)\r\n","Url":"https://github.com/dotnet/winforms/issues/303","RelatedDescription":"Closed issue \"Web Services(asmx) in WinForms\" (#303)"},{"Id":"397214125","IsPullRequest":false,"CreatedAt":"2019-01-14T22:47:23","Actor":"Naganathan","Number":"306","RawContent":null,"Title":".NetCore support System.Runtime.Serialization.Formatters.Soap?","State":"closed","Body":"I am facing below exception while serialize/deserialize my project.\r\n\r\nCould not load file or assembly 'System.Runtime.Serialization.Formatters.Soap, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'. The system cannot find the file specified.'\r\n\r\nPlease confirm whether .Netcore support \"System.Runtime.Serialization.Formatters.Soap\" serialization and any other functionality available intead of?","Url":"https://github.com/dotnet/winforms/issues/306","RelatedDescription":"Closed issue \".NetCore support System.Runtime.Serialization.Formatters.Soap?\" (#306)"},{"Id":"397623277","IsPullRequest":true,"CreatedAt":"2019-01-14T21:51:05","Actor":"hughbe","Number":"312","RawContent":null,"Title":"Remove dead DataGridViewCell/Row null checks","State":"closed","Body":"","Url":"https://github.com/dotnet/winforms/pull/312","RelatedDescription":"Closed or merged PR \"Remove dead DataGridViewCell/Row null checks\" (#312)"},{"Id":"398507479","IsPullRequest":true,"CreatedAt":"2019-01-14T17:38:40","Actor":"dotnet-maestro[bot]","Number":"316","RawContent":null,"Title":"Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19061.6\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19061.6\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19061.6\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19061.6\r\n\r\n","Url":"https://github.com/dotnet/winforms/pull/316","RelatedDescription":"Closed or merged PR \"Update dependencies from dotnet/arcade\" (#316)"},{"Id":"398919472","IsPullRequest":false,"CreatedAt":"2019-01-14T14:44:50","Actor":"creativbox","Number":"317","RawContent":null,"Title":"VisualStyleRenderer.IsSupported returns false when a dialog is shown on Windows 10 v1809","State":"open","Body":"* Have you experienced this same bug with .NET Framework?\r\nYes\r\n\r\n**Problem description:**\r\nThe parent window does not render with styles on Windows 10 v1809 when an open or save file dialog is shown.\r\n\r\nThe native UXTheme function GetThemeAppProperties returns additional flags on Windows 10 v1809 if an dialog is opened (e.g. OpenFileDialog). The same flags are returned by the managed wrapper property Application.VisualStyleState. \r\nThis causes the VisualStyleRenderer.IsSupported property to return false instead of true, because it does not check the return value of Application.VisualStyleState correctly:\r\n```\r\nbool supported =  (VisualStyleInformation.IsEnabledByUser &&\r\n    (Application.VisualStyleState == VisualStyleState.ClientAreaEnabled ||\r\n    Application.VisualStyleState == VisualStyleState.ClientAndNonClientAreasEnabled));\r\n```\r\nThis check should consider additional flags (the VisualStyleState enum should be decorated with FlagsAttribute too).\r\n\r\n","Url":"https://github.com/dotnet/winforms/issues/317","RelatedDescription":"Open issue \"VisualStyleRenderer.IsSupported returns false when a dialog is shown on Windows 10 v1809\" (#317)"},{"Id":"398280475","IsPullRequest":true,"CreatedAt":"2019-01-11T17:26:36","Actor":"dotnet-maestro[bot]","Number":"315","RawContent":null,"Title":"Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19060.8\r\n\r\n","Url":"https://github.com/dotnet/winforms/pull/315","RelatedDescription":"Closed or merged PR \"Update dependencies from dotnet/arcade\" (#315)"},{"Id":"397989850","IsPullRequest":true,"CreatedAt":"2019-01-10T21:00:35","Actor":"zsd4yr","Number":"314","RawContent":null,"Title":"internals visible set for System.Windows.Forms.Design and .Editors","State":"closed","Body":"fixes #92","Url":"https://github.com/dotnet/winforms/pull/314","RelatedDescription":"Closed or merged PR \"internals visible set for System.Windows.Forms.Design and .Editors\" (#314)"},{"Id":"397821464","IsPullRequest":true,"CreatedAt":"2019-01-10T17:32:08","Actor":"dotnet-maestro[bot]","Number":"313","RawContent":null,"Title":"Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19058.5\r\n\r\n","Url":"https://github.com/dotnet/winforms/pull/313","RelatedDescription":"Closed or merged PR \"Update dependencies from dotnet/arcade\" (#313)"},{"Id":"397622965","IsPullRequest":true,"CreatedAt":"2019-01-10T00:28:45","Actor":"hughbe","Number":"311","RawContent":null,"Title":"Add DataGridViewRow/Cell tests","State":"open","Body":"Depends on #308 \r\n\r\nBy no means fully comprehensive - I will submit more - but I'm busy for the next couple of days (watch as I renegade on saying that and do more work!)","Url":"https://github.com/dotnet/winforms/pull/311","RelatedDescription":"Open PR \"Add DataGridViewRow/Cell tests\" (#311)"},{"Id":"397621771","IsPullRequest":true,"CreatedAt":"2019-01-10T00:22:46","Actor":"hughbe","Number":"310","RawContent":null,"Title":"Add Menu tests","State":"open","Body":"","Url":"https://github.com/dotnet/winforms/pull/310","RelatedDescription":"Open PR \"Add Menu tests\" (#310)"},{"Id":"397612446","IsPullRequest":true,"CreatedAt":"2019-01-10T00:01:44","Actor":"AdamYoblick","Number":"309","RawContent":null,"Title":"publish to new dotnet-windowsdesktop feed to avoid 'Waiting to obtain…","State":"closed","Body":"… an exclusive lock on the feed' delays","Url":"https://github.com/dotnet/winforms/pull/309","RelatedDescription":"Closed or merged PR \"publish to new dotnet-windowsdesktop feed to avoid 'Waiting to obtain…\" (#309)"},{"Id":"396681287","IsPullRequest":true,"CreatedAt":"2019-01-09T23:37:50","Actor":"hughbe","Number":"300","RawContent":null,"Title":"Remove dead debug helper","State":"closed","Body":"Extracted from https://github.com/dotnet/winforms/pull/298","Url":"https://github.com/dotnet/winforms/pull/300","RelatedDescription":"Closed or merged PR \"Remove dead debug helper\" (#300)"},{"Id":"397362281","IsPullRequest":true,"CreatedAt":"2019-01-09T18:36:23","Actor":"dotnet-maestro[bot]","Number":"307","RawContent":null,"Title":"Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19058.2\r\n\r\n","Url":"https://github.com/dotnet/winforms/pull/307","RelatedDescription":"Closed or merged PR \"Update dependencies from dotnet/arcade\" (#307)"},{"Id":"397497527","IsPullRequest":true,"CreatedAt":"2019-01-09T18:26:48","Actor":"hughbe","Number":"308","RawContent":null,"Title":"Remove bad Debug.Asserts in DataGridView","State":"open","Body":"All can be triggered from tests in https://github.com/hughbe/winforms/tree/ongoing","Url":"https://github.com/dotnet/winforms/pull/308","RelatedDescription":"Open PR \"Remove bad Debug.Asserts in DataGridView\" (#308)"},{"Id":"396699117","IsPullRequest":true,"CreatedAt":"2019-01-08T22:21:53","Actor":"AdamYoblick","Number":"301","RawContent":null,"Title":"Component governance detection","State":"closed","Body":"- Internal build has a banner that mentions this task is going to be required in the near future\r\n- Info about the task is at https://docs.opensource.microsoft.com/tools/cg.html","Url":"https://github.com/dotnet/winforms/pull/301","RelatedDescription":"Closed or merged PR \"Component governance detection\" (#301)"},{"Id":"397020646","IsPullRequest":false,"CreatedAt":"2019-01-08T18:01:45","Actor":"lhak","Number":"305","RawContent":null,"Title":"Improved dpi scaling and support for logical coordinates","State":"open","Body":"This issue is created as requested for PR #279 to discuss the proposed improvements and new APIs.\r\n\r\n# Current status of dpi scaling\r\nHere is some of the insight I have gained into the current dpi scaling implementation by going throught the current codebase. Please correct me if I got something wrong:\r\n\r\n- The Control class contains a DeviceDpi property. This returns the system dpi by default and will be updated during handle creation to the monitor dpi\r\n- The Scale() method in the Control class provides a generic way to scale the size and position of a control with a specified factor\r\n- ContainerControls support an AutoScaleMode property. If this is set to dpi, it will call the Scale() method of its children during the layout pass. The scaling factor is calculated as (system) dpi divided by the AutoScaleDimensions property (e.g. 96dpi). If AutoScaleMode is set to font, the factor will be (font size at system dpi)/AutoScaleDimensions\r\n- The Form control can receive a DPI_CHANGED message during dpi changes. It will update its deviceDpi value, create a scaled copy of its font and then call the Scale() method of its children.\r\n- Each control (except the toplevel control) can receive a DPI_CHANGED_BEFORE_PARENT (and DPI_CHANGED_AFTER_PARENT) if per monitor dpi awareness v2 is enabled. This will update the deviceDpi value and create a scaled copy of its font (only is one is directly associated with it). It will also call the RescaleConstantsForDpiChange() method that can be implemented by controls.\r\n- Fonts specified in point units will always be drawn with the system dpi scaling factor applied.\r\n\r\n- The inbox controls have different levels of dpi awareness support. Some only check for the system dpi value in their constructor, while a few implement the RescaleConstantsForDpiChange() method to rescale to a new dpi value dynamically.\r\n\r\n# Issues with the current implementation\r\nThe biggest flaw is that the code (and the APIs) are based on physical pixels instead of logical coordinates/effective pixels. Thus, each control and application needs to do the coordinate transformation itself, which is challenging and prone to errors. Unfortunately, there is not really a low-level visual positioning and rendering layer where this transformation could be done. Instead, a lot of code directly calls into the win32 (pixel based) functions. Therefore, improvements of the current implementation seems to be the most reasonable approach. The next big issues I have encountered is that there is currently no way to know to which dpi a control is actually scaled to. There is the DeviceDpi property, but this one is for example completely unrelated to the scaling initiated by the AutoScaleMode pass. Setting one of the properties of a control (e.g. the width) can have a completely different result depending on where it is done in the code. \r\n\r\n### Some additional issues:\r\n\r\n- The current code assumes in my places that the initial dpi is always the system dpi. This is certainly not always the case. In fact, the system dpi value might not correspond to any of the monitor dpi values. Therefore, the initial scaling of the control positions and fonts can be wrong.\r\n- A lot of the per monitor dpi support is limited to the v2 version, even though the v1 version for older Windows versions also supports the required functionality.\r\n\r\n# Improvements of the general scaling mechanism\r\n \r\nThe PR adds a new code path that can be enabled for a single control with the LogicalDpiScaling property or by default with the Application.SetLogicalDpiScalingDefault() method. The basic idea is that each control keeps track on the dpi value it is currently scaled to and rescales itself if necessary (and ignores AutoScale changes):\r\n\r\n- A new field lastScaleDpi is added to the Control class that defaults to 96dpi as a baseline. Its value can be retrieved with the new CurrentDpi property.\r\n- During handle creation (or if its parent control changes), the new UpdateDpiScalingFactor() method of the control will retrieve the new dpi value and compare it with lastScaleDpi. If it has changed, it will scale its associated font if present, call its Scale() method and finally update the lastScaleDpi value. It will also call the RescaleConstantsForDpiChange() method to take advantage of already implemented dpi support in the controls.\r\n- As an optimization, the ContainerControl() overrides the UpdateDpiScalingFactor() method and provides the retrieved dpi value to all of its child controls. This basically allows to scale all child controls in one go with layout suspended.\r\n- The DPI_CHANGED message handling in the Form control is slightly updated to give the controls a chance to update their lastScaleDpi value. Additionally, if per monitor v1 mode is enabled, it will raise the DpiChangedBeforeParent and DpiChangedAfterParent events manually to emulate the v2 functionality (update the deviceDpi value, scale font and call the RescaleConstantsForDpiChange() method)\r\n\r\nThese changes should especially improve the initial positioning of the controls and sizes of the fonts. Additionally, per monitor v1 support is now basically on-par with the v2 version (except for its fundamental limitations). Because the dpi value for each control is always known, new APIs can be added that transform between logical and pixel coordinates in a reliable way.\r\n\r\n# New APIs for logical coordinates\r\nThe new APIs in the Control class are supposed to be used in applications and new controls. The final goal is that they can always stay in the logical coordinate space and do not have to worry about dpi scaling. The positioning APIs should also be usable with existing controls.\r\n\r\n##### Positioning\r\n- New properties LogicalBounds, LogicalLocation,LogicalWidth, LogicalHeight, LogicalSize, LogicalMaximumSize, LogicalMinimumSize, LogicalMargin and LogicalPadding provide the transformation to- and from their pixel based counterparts.\r\n\r\n- GetPreferredLogicalSize() can be implemented by controls to enable auto sizing\r\n##### Drawing\r\n- PaintEventArgs provides a ApplyDpiScalingTransformation() that uses the PageScale property of the Graphics class to setup a render transformation. Thus, drawing can now be done with logical coordinates.\r\n\r\n- FontWithLogicalSize provides a way to set a font to a control which will then be rescaled to the correct dpi value and passed to the Font property. The unscaled version is kept for text drawing with the render transformation applied. Unfortunately, the Graphics class seems to ignore the PageScale factor if a Font in point units is rendered. Thus, a copy of the font with its size converted to pixel units is created in this case.\r\n\r\n- InvalideLogicalRect() as the counterpart to Invalidate()\r\n\r\n##### Other\r\n- MouseEventArgs can return the position in logical coordinates\r\n\r\n##### Bitmaps (not in the PR)\r\nUnlike vector graphics and font rendering, bitmaps are inherently pixel based. It would be great if there would be APIs for the application to provide bitmaps in different sizes and the best fit for the current dpi would automatically be picked.\r\n\r\n# Summary\r\nI hope the proposed changes provide valuable improvements of the current dpi scaling mechanism that can be easily integrated into existing applications. In addition, they are compatible with the already present dpi support code in the various controls. The added APIs can be leveraged to write new code in a dpi independent way.\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/winforms/issues/305","RelatedDescription":"Open issue \"Improved dpi scaling and support for logical coordinates\" (#305)"},{"Id":"396163597","IsPullRequest":true,"CreatedAt":"2019-01-08T17:54:00","Actor":"dotnet-maestro[bot]","Number":"296","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19054.13\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19055.1\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19055.1\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19057.6\r\n\r\n","Url":"https://github.com/dotnet/winforms/pull/296","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#296)"},{"Id":"396943100","IsPullRequest":false,"CreatedAt":"2019-01-08T14:57:08","Actor":"pveliz","Number":"304","RawContent":null,"Title":"Running .Net Core 3.0 Winforms app targeting x86 in windows 10","State":"open","Body":"I'm trying to run a WinForms App targeting x86 but the application closes immediately and  I'm got this error:\r\n\r\n```\r\n'WindowsFormsAppCore3.exe' (CoreCLR: DefaultDomain): Loaded 'C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\3.0.0-preview-27122-01\\System.Private.CoreLib.dll'. Skipped loading symbols. Module is optimized and the debugger option 'Just My Code' is enabled.\r\nThe program '[316] WindowsFormsAppCore3.exe: Program Trace' has exited with code 0 (0x0).\r\nThe program '[316] WindowsFormsAppCore3.exe' has exited with code -532462766 (0xe0434352).\r\n```\r\n\r\nHow to replicate it:\r\n\r\nFirst open File Explorer and create a folder to host your project. Then open a command prompt of your choice, move to the folder you have just created and then execute the following command:\r\n\r\n`dotnet new winforms\r\n`\r\n\r\nOpen visual Studio 2019 Preview, Create a Blank Solution, then add the recently created project to the solution, then right click on the project -> properties -> Build -> Platform terget: x86 and then run it.\r\n\r\nIn the event viewer I got this:\r\n\r\n```\r\nFaulting application name: WindowsFormsAppCore3.exe, version: 1.0.0.0, time stamp: 0x5bf60478\r\nFaulting module name: KERNELBASE.dll, version: 10.0.17134.441, time stamp: 0x428de48c\r\nException code: 0xe0434352\r\nFault offset: 0x000000000003a388\r\nFaulting process id: 0x1b7c\r\nFaulting application start time: 0x01d4a761408d779b\r\nFaulting application path: C:\\XXXX\\poc\\WindowsFormsAppCore3\\bin\\Debug\\netcoreapp3.0\\WindowsFormsAppCore3.exe\r\nFaulting module path: C:\\Windows\\System32\\KERNELBASE.dll\r\nReport Id: 20ffea93-24b8-4e77-bdbb-94b05dd2e04c\r\nFaulting package full name: \r\nFaulting package-relative application ID: \r\n```\r\n\r\nOther information that I got from WinDbg is this:\r\n\r\n```\r\nMicrosoft (R) Windows Debugger Version 10.0.18303.1000 AMD64\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\n\r\nCommandLine: C:\\XXX\\poc\\WindowsFormsAppCore3\\bin\\Debug\\netcoreapp3.0\\WindowsFormsAppCore3.exe\r\n\r\n************* Path validation summary **************\r\nResponse                         Time (ms)     Location\r\nDeferred                                       srv*\r\nSymbol search path is: srv*\r\nExecutable search path is: \r\nModLoad: 00007ff6`59e50000 00007ff6`59ea7000   apphost.exe\r\nModLoad: 00007ffd`6d2a0000 00007ffd`6d481000   ntdll.dll\r\nModLoad: 00007ffd`6c760000 00007ffd`6c812000   C:\\Windows\\System32\\KERNEL32.DLL\r\nModLoad: 00007ffd`69ad0000 00007ffd`69d43000   C:\\Windows\\System32\\KERNELBASE.dll\r\nModLoad: 00007ffd`69880000 00007ffd`6997a000   C:\\Windows\\System32\\ucrtbase.dll\r\n(2924.4920): Break instruction exception - code 80000003 (first chance)\r\nntdll!LdrpDoDebuggerBreak+0x30:\r\n00007ffd`6d36c93c cc              int     3\r\n0:000> .sympath srv*\r\nSymbol search path is: srv*\r\nExpanded Symbol search path is: cache*;SRV*https://msdl.microsoft.com/download/symbols\r\n\r\n************* Path validation summary **************\r\nResponse                         Time (ms)     Location\r\nDeferred                                       srv*\r\n0:000> .reload\r\nReloading current modules\r\n.....\r\n0:000> g\r\nModLoad: 00007ffd`16a20000 00007ffd`16ab4000   C:\\Program Files\\dotnet\\host\\fxr\\3.0.0-preview-27122-01\\hostfxr.dll\r\nModLoad: 00007ffd`16980000 00007ffd`16a16000   C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\3.0.0-preview-27122-01\\hostpolicy.dll\r\nModLoad: 00007ffd`020d0000 00007ffd`0268b000   C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\3.0.0-preview-27122-01\\coreclr.dll\r\nModLoad: 00007ffd`6d0e0000 00007ffd`6d181000   C:\\Windows\\System32\\ADVAPI32.dll\r\nModLoad: 00007ffd`6a880000 00007ffd`6a91e000   C:\\Windows\\System32\\msvcrt.dll\r\nModLoad: 00007ffd`6a820000 00007ffd`6a87b000   C:\\Windows\\System32\\sechost.dll\r\nModLoad: 00007ffd`6c020000 00007ffd`6c144000   C:\\Windows\\System32\\RPCRT4.dll\r\nModLoad: 00007ffd`6aa80000 00007ffd`6abd1000   C:\\Windows\\System32\\ole32.dll\r\nModLoad: 00007ffd`6c2a0000 00007ffd`6c5c2000   C:\\Windows\\System32\\combase.dll\r\nModLoad: 00007ffd`69d50000 00007ffd`69dca000   C:\\Windows\\System32\\bcryptPrimitives.dll\r\nModLoad: 00007ffd`6a920000 00007ffd`6a948000   C:\\Windows\\System32\\GDI32.dll\r\nModLoad: 00007ffd`69dd0000 00007ffd`69f62000   C:\\Windows\\System32\\gdi32full.dll\r\nModLoad: 00007ffd`69980000 00007ffd`69a1f000   C:\\Windows\\System32\\msvcp_win.dll\r\nModLoad: 00007ffd`6c5d0000 00007ffd`6c760000   C:\\Windows\\System32\\USER32.dll\r\nModLoad: 00007ffd`69860000 00007ffd`69880000   C:\\Windows\\System32\\win32u.dll\r\nModLoad: 00007ffd`6c150000 00007ffd`6c212000   C:\\Windows\\System32\\OLEAUT32.dll\r\nModLoad: 00007ffd`6d210000 00007ffd`6d261000   C:\\Windows\\System32\\SHLWAPI.dll\r\nModLoad: 00007ffd`56ac0000 00007ffd`56aca000   C:\\Windows\\SYSTEM32\\VERSION.dll\r\nModLoad: 00007ffd`690b0000 00007ffd`690d5000   C:\\Windows\\SYSTEM32\\bcrypt.dll\r\nModLoad: 00007ffd`6d010000 00007ffd`6d03d000   C:\\Windows\\System32\\IMM32.DLL\r\n(2924.4920): Unknown exception - code 04242420 (first chance)\r\nModLoad: 00007ffc`e09e0000 00007ffc`e11b8000   C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\3.0.0-preview-27122-01\\System.Private.CoreLib.dll\r\nModLoad: 00007ffd`08070000 00007ffd`081c4000   C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\3.0.0-preview-27122-01\\clrjit.dll\r\nModLoad: 00007ffd`69630000 00007ffd`69641000   C:\\Windows\\System32\\kernel.appcore.dll\r\nModLoad: 00000208`05840000 00000208`05848000   C:\\XXX\\poc\\WindowsFormsAppCore3\\bin\\Debug\\netcoreapp3.0\\WindowsFormsAppCore3.dll\r\nModLoad: 00000208`05840000 00000208`05848000   WindowsFormsAppCore3.exe\r\n(2924.4920): C++ EH exception - code e06d7363 (first chance)\r\n(2924.4920): C++ EH exception - code e06d7363 (first chance)\r\n(2924.4920): C++ EH exception - code e06d7363 (first chance)\r\n(2924.4920): C++ EH exception - code e06d7363 (first chance)\r\n(2924.4920): C++ EH exception - code e06d7363 (first chance)\r\n(2924.4920): CLR exception - code e0434352 (first chance)\r\n(2924.4920): CLR exception - code e0434352 (!!! second chance !!!)\r\nKERNELBASE!RaiseException+0x68:\r\n00007ffd`69b0a388 488b8c24c0000000 mov     rcx,qword ptr [rsp+0C0h] ss:0000006d`a9badde0=0000402aa92ca8eb\r\n```\r\n\r\nAny idea how to solve this?\r\n\r\nThank you\r\n","Url":"https://github.com/dotnet/winforms/issues/304","RelatedDescription":"Open issue \"Running .Net Core 3.0 Winforms app targeting x86 in windows 10\" (#304)"},{"Id":"396752908","IsPullRequest":false,"CreatedAt":"2019-01-08T05:09:46","Actor":"199621616","Number":"302","RawContent":null,"Title":"Hosting Blazor Introduces WinForm to the Internet","State":"open","Body":"At present, a large number of traditional WinForm desktop applications urgently need to be transformed into Internet applications. The emergence of Blazor provides conditions for these traditional applications to enter the Internet. WinForm + Blazor + WebApi, a new way to build C # stack development.","Url":"https://github.com/dotnet/winforms/issues/302","RelatedDescription":"Open issue \"Hosting Blazor Introduces WinForm to the Internet\" (#302)"},{"Id":"396678576","IsPullRequest":true,"CreatedAt":"2019-01-07T23:21:48","Actor":"AdamYoblick","Number":"299","RawContent":null,"Title":"re-enable test signing","State":"closed","Body":"","Url":"https://github.com/dotnet/winforms/pull/299","RelatedDescription":"Closed or merged PR \"re-enable test signing\" (#299)"},{"Id":"396301298","IsPullRequest":true,"CreatedAt":"2019-01-07T23:00:04","Actor":"hughbe","Number":"298","RawContent":null,"Title":"Use HashCode.Combine instead of rolling out our own hashing","State":"closed","Body":"Fixes https://github.com/dotnet/winforms/issues/295","Url":"https://github.com/dotnet/winforms/pull/298","RelatedDescription":"Closed or merged PR \"Use HashCode.Combine instead of rolling out our own hashing\" (#298)"},{"Id":"396100106","IsPullRequest":false,"CreatedAt":"2019-01-07T23:00:03","Actor":"hughbe","Number":"295","RawContent":null,"Title":"[cleanup] use HashCode.Combine instead of WindowsFormUtils","State":"closed","Body":"See https://github.com/dotnet/winforms/pull/294#discussion_r245447476","Url":"https://github.com/dotnet/winforms/issues/295","RelatedDescription":"Closed issue \"[cleanup] use HashCode.Combine instead of WindowsFormUtils\" (#295)"},{"Id":"396079669","IsPullRequest":true,"CreatedAt":"2019-01-04T23:55:30","Actor":"hughbe","Number":"294","RawContent":null,"Title":"Fix DockPaddingEdges bugs","State":"closed","Body":"Fixes #283, #284, #290 and #291\r\n\r\nExtracted from https://github.com/dotnet/winforms/pull/285 by request\r\n/cc @zsd4yr @sharwell ","Url":"https://github.com/dotnet/winforms/pull/294","RelatedDescription":"Closed or merged PR \"Fix DockPaddingEdges bugs\" (#294)"}],"ResultType":"GitHubIssue"}},"RunOn":"2019-01-16T05:30:53.7082329Z","RunDurationInMilliseconds":557}