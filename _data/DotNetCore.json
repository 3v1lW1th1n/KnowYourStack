{"Data":{"Blog":{"FeedItems":[{"Title":".NET Framework 4.7.1 Runtime and Compiler Features","PublishedOn":"2017-09-28T00:00:00","CommentsCount":0,"FacebookCount":0,"Summary":"This post describes the new Runtime, Compiler and Base Class Library (BCL) improvements in the .NET Framework 4.7.1. You can try out these features by downloading the Developer Pack, described in the Welcome to the .NET Framework 4.7.1 Early Access blog post.  BCL &#8211; .NET Standard 2.0 Support .NET Framework 4.7.1 has built-in support for .NET Standard 2.0. .NET Framework 4.7.1... <a aria-label=\"read more about .NET Framework 4.7.1 Runtime and Compiler Features\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/09/28/net-framework-4-7-1-runtime-and-compiler-features/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/09/28/net-framework-4-7-1-runtime-and-compiler-features/","RawContent":null},{"Title":"Build a web service with F# and .NET Core 2.0","PublishedOn":"2017-09-26T00:00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Earlier this year, I wrote about an update to the roadmap for F# and .NET Core. I had mentioned that there were a number of things you could build with F# and .NET Core today, such as web services. In this post, I&#8217;ll walk through building a web service with F# and .NET Core 2.0... <a aria-label=\"read more about Build a web service with F# and .NET Core 2.0\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/09/26/build-a-web-service-with-f-and-net-core-2-0/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/09/26/build-a-web-service-with-f-and-net-core-2-0/","RawContent":null},{"Title":".NET Framework September 2017 Preview of Quality Rollup","PublishedOn":"2017-09-25T00:00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Today, we are releasing the September 2017 Preview of Quality Rollup. This type of rollup is intended for businesses that want to the preview or use quality improvements as soon as they are available. This update applies to Windows 10 Update 1607 (Anniversary Update) and to Windows Server 2016. FYI: The KBs for Windows Server 2016... <a aria-label=\"read more about .NET Framework September 2017 Preview of Quality Rollup\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/09/25/net-framework-september-2017-preview-of-quality-rollup/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/09/25/net-framework-september-2017-preview-of-quality-rollup/","RawContent":null},{"Title":".NET Core September 2017 Update — macOS High Sierra Support","PublishedOn":"2017-09-22T00:00:00","CommentsCount":4,"FacebookCount":0,"Summary":"We released .NET Core updates for macOS High Sierra Support and additional quality fixes. You can download and install the update for Windows, macOS and Linux. This update is for .NET Core 1.0 and 1.1. The initial .NET Core 2.0 release includes similar improvements, so is not being updated with this release. Downloads .NET Core 1.0.7 .NET... <a aria-label=\"read more about .NET Core September 2017 Update &#8212; macOS High Sierra Support\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/09/22/net-core-september-2017-update-macos-high-sierra-support/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/09/22/net-core-september-2017-update-macos-high-sierra-support/","RawContent":null},{"Title":".NET Framework 4.7.1 Accessibility and WPF Improvements","PublishedOn":"2017-09-21T00:00:00","CommentsCount":16,"FacebookCount":0,"Summary":"This post describes the new WPF and accessibility features and improvements in .NET Framework 4.7.1. You can try out these features by downloading the Developer Pack, described in the Welcome to the .NET Framework 4.7.1 Early Access blog post. Accessibility improvements .NET Framework 4.7.1 brings in a lot of accessibility improvements across different libraries to align with the... <a aria-label=\"read more about .NET Framework 4.7.1 Accessibility and WPF Improvements\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/09/21/net-framework-4-7-1-accessibility-and-wpf-improvements/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/09/21/net-framework-4-7-1-accessibility-and-wpf-improvements/","RawContent":null},{"Title":"Watch .NET Conf 2017!","PublishedOn":"2017-09-19T00:00:00","CommentsCount":12,"FacebookCount":0,"Summary":".NET Conf starts today. It&#8217;s a three-day, free, virtual and global .NET conference. All you need to do is point your web browser to channel9.msdn.com, starting at 8AM Pacific Time. We have a packed agenda with a great set of expert .NET developers. What will you learn? Many things. You will learn to build for... <a aria-label=\"read more about Watch .NET Conf 2017!\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/09/19/watch-net-conf-2017/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/09/19/watch-net-conf-2017/","RawContent":null},{"Title":".NET Framework 4.7.1 ASP.NET and Configuration features","PublishedOn":"2017-09-14T00:00:00","CommentsCount":24,"FacebookCount":0,"Summary":"This post describes the new ASP.NET, Configuration and System.Messaging features and improvements in the .NET Framework 4.7.1. More information on the build these features are available in and how to get the Developer Pack is covered in the Welcome to the .NET Framework 4.7.1 Early Access blog post. Configuration builders Configuration builders allow developers to inject and build... <a aria-label=\"read more about .NET Framework 4.7.1 ASP.NET and Configuration features\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/09/13/net-framework-4-7-1-asp-net-and-configuration-features/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/09/13/net-framework-4-7-1-asp-net-and-configuration-features/","RawContent":null},{"Title":".NET Framework September 2017 Security and Quality Rollup","PublishedOn":"2017-09-13T00:00:00","CommentsCount":21,"FacebookCount":0,"Summary":"Last Updated: 2017.09.21. Today, we are releasing the September 2017 Security and Quality Rollup and Security Only Update. This update applies to Windows 7 and later client versions and Windows Server 2008 and later server versions. This update has known issues. Please see them at the bottom of the update. Security This release contains the... <a aria-label=\"read more about .NET Framework September 2017 Security and Quality Rollup\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/09/12/net-framework-september-2017-security-and-quality-rollup/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/09/12/net-framework-september-2017-security-and-quality-rollup/","RawContent":null},{"Title":"The week in .NET – Let’s Encrypt Web App Renewer, Seattle CodeCamp 2017","PublishedOn":"2017-08-29T00:00:00","CommentsCount":15,"FacebookCount":0,"Summary":"Previous posts: Project File Tools, Maira Wenzel, Mixed Reality in Miami .NET Core 2.0, ASP.NET Core 2.0, Entity Framework 2.0, Visual Studio 2017 Update 3, enterprise Entity Framework Core in Boston Rezoom.SQL, Protobuf in Orlando Open-source project of the week: Let&#8217;s Encrypt Azure Web App Renewer There&#8217;s a growing consensus that all web sites should... <a aria-label=\"read more about The week in .NET &#8211; Let&#8217;s Encrypt Web App Renewer, Seattle CodeCamp 2017\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/08/29/the-week-in-net/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/08/29/the-week-in-net/","RawContent":null},{"Title":"UWP & .NET Standard 2.0: A preview is now available!","PublishedOn":"2017-08-25T00:00:00","CommentsCount":50,"FacebookCount":0,"Summary":"Today, we released the first Preview of Visual Studio 2017 version 15.4. This includes an update to the UWP tooling that supports .NET Standard 2.0. In this post, I&#8217;ll outline what this means for UWP development with .NET. Prerequisites In order to use .NET Standard 2.0 in UWP, you need to target Fall Creators Update (FCU)... <a aria-label=\"read more about UWP &#38; .NET Standard 2.0: A preview is now available!\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/08/25/uwp-net-standard-2-0-preview/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/08/25/uwp-net-standard-2-0-preview/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"6650451504","Type":"IssuesEvent","CreatedAt":"2017-09-28T16:22:10","Actor":"hughbe","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/issues/87","RelatedDescription":"Opened issue \"PRs to repos outside of dotnet/* pattern should not always thank for signing the CLA\" (#87) at dotnet/home","RelatedBody":"For example: https://github.com/mono/libgdiplus/pull/109\r\n\r\nI have already signed the CLI. On the dotnet/corefx etc. projects, I don't get the extra message:\r\n\r\n```\r\n@hughbe,\r\nThanks for having already signed the Contribution License Agreement. Your agreement was validated by .NET Foundation. We will now review your pull request.\r\nThanks,\r\n.NET Foundation Pull Request Bot\r\n```\r\n\r\nJust a small gripe, as I get an email each time I do this. I've seen this in Mono and Xunit.\r\n\r\n/cc @karelz I know this is unrelated to corefx but maybe you know the right person/repo to route this to :D\r\n"},{"Id":"6515896963","Type":"PullRequestEvent","CreatedAt":"2017-08-26T22:20:18","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/85","RelatedDescription":"Merged pull request \"Create telerik-ui-for-uwp.md\" (#85) at dotnet/home","RelatedBody":"Submission of Telerik UI for UWP"},{"Id":"6515896506","Type":"PullRequestEvent","CreatedAt":"2017-08-26T22:19:49","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/86","RelatedDescription":"Merged pull request \"Corrected list of maintainers\" (#86) at dotnet/home","RelatedBody":""},{"Id":"6483200432","Type":"PullRequestEvent","CreatedAt":"2017-08-18T19:58:41","Actor":"gep13","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/86","RelatedDescription":"Opened pull request \"Corrected list of maintainers\" (#86) at dotnet/home","RelatedBody":""}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"6645912196","Type":"IssuesEvent","CreatedAt":"2017-09-27T19:47:08","Actor":"terrajobst","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/32","RelatedDescription":"Opened issue \".NET Framework 4.7.1 provides built-in support for .NET Standard 2.0\" (#32) at dotnet/announcements","RelatedBody":"## Summary\r\n\r\n.NET Framework 4.7.1 will have built-in support for .NET Standard 2.0. This means that you don't have to deploy any additional files or use binding redirects to use .NET Standard 2.0 libraries.\r\n\r\nFor a demo, check out [this video][video].\r\n\r\n## Details\r\n\r\nWhile libraries targeting [.NET Standard 2.0][ns20post] are can be consumed by applications and libraries [targeting .NET Framework 4.6.1][nstable] and higher, not all files that are required for .NET Standard libraries were part of .NET Framework 4.6.1. In fact, .NET Framework 4.6.1 was shipped before .NET Standard 2.0 was even designed. That's why building an application targeting .NET Framework 4.6.1 (as well as 4.6.2 and 4.7) will have to deploy additional files.\r\n\r\n* If you use **Visual Studio 2017 15.3** or higher, these files are automatically copied to the application's output folder.\r\n\r\n* If you use **Visual Studio 2015 and [use NuGet 3.6][nuget36]**, we'll prompt you to install a [support package][vs2015support] which will handle copying the files to the output directory.\r\n\r\nStarting with .NET Framework 4.7.1 these files no longer have to be deployed with the application -- they are built right into the .NET Framework itself.\r\n\r\n.NET Framework 4.7.1 also adds[about 200 missing APIs][missingapis] that were part of .NET Standard 2.0 but not actually implemented by .NET Framework 4.6.1, 4.6.2 or 4.7.\r\n\r\nThis also removes the need for [binding redirects][netfx-issues] when using .NET Standard libraries on .NET Framework because the CLR automatically unifies version numbers of assemblies that are part of the platform.\r\n\r\nLearn more [by reading the .NET Standard FAQ](http://aka.ms/netstandardfaq).\r\n\r\n## Discussion\r\n\r\nDiscussion\r\n\r\nFor a discussion, please go to dotnet/standard#514.\r\n\r\n[ns20post]: https://blogs.msdn.microsoft.com/dotnet/2017/08/14/announcing-net-standard-2-0/\r\n[nstable]: https://docs.microsoft.com/en-us/dotnet/standard/net-standard\r\n[nuget36]: https://dist.nuget.org/visualstudio-2015-vsix/v3.6.0/NuGet.Tools.vsix\r\n[vs2015support]: https://aka.ms/netstandard-build-support-netfx\r\n[missingapis]: https://github.com/dotnet/standard/blob/master/netstandard/src/ApiCompatBaseline.net461.txt\r\n[netfx-issues]: https://github.com/dotnet/standard/issues/481\r\n[video]: https://www.youtube.com/watch?v=u67Eu_IgEMs\r\n\r\nhttps://github.com/dotnet/standard/issues/514"}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"6671124574","Type":"PullRequestEvent","CreatedAt":"2017-10-04T05:05:47","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/14316","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/corert\" (#14316) at dotnet/coreclr","RelatedBody":"This PR contains mirrored changes from dotnet/corert\n\n\n**Please REBASE this PR when merging**"},{"Id":"6671055679","Type":"PullRequestEvent","CreatedAt":"2017-10-04T04:29:12","Actor":"stephentoub","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/13846","RelatedDescription":"Merged pull request \"Update CoreClr to b-uwp6-25707-02 (release/uwp6.0)\" (#13846) at dotnet/coreclr","RelatedBody":"/cc @dotnet/coreclr-auto-update-notify"},{"Id":"6670867435","Type":"PullRequestEvent","CreatedAt":"2017-10-04T02:53:24","Actor":"dotnet-bot","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/14316","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/corert\" (#14316) at dotnet/coreclr","RelatedBody":"This PR contains mirrored changes from dotnet/corert\n\n\n**Please REBASE this PR when merging**"},{"Id":"6670786478","Type":"PullRequestEvent","CreatedAt":"2017-10-04T02:14:28","Actor":"stephentoub","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/14298","RelatedDescription":"Merged pull request \"Special-case T==char in string.Concat(IEnumerable<T>)\" (#14298) at dotnet/coreclr","RelatedBody":"This allows string.Concat to be used as an efficient mechanism for creating a `string` from an `IEnumerable<char>`.  The JIT specializes the implementation for char vs non-char, so there's minimal impact on the non-char case, and for the char case, we a) avoid creating a string for each individual char, and b) use StringBuilder's fast path for adding individual chars.  This can result in a massive allocation savings for long enumerations (for <= 1 char, there's no difference, but each character after that is an allocation saved), and for more than a few characters can yield up to a 2x increase in throughput.\r\n\r\nCloses https://github.com/dotnet/corefx/issues/24395\r\ncc: @joperezr, @AlexGhiondea, @jkotas "},{"Id":"6670785362","Type":"PullRequestEvent","CreatedAt":"2017-10-04T02:13:55","Actor":"stephentoub","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/14310","RelatedDescription":"Merged pull request \"Make CancellationTokenRegistration.Token public\" (#14310) at dotnet/coreclr","RelatedBody":"Contributes to https://github.com/dotnet/corefx/issues/23828"},{"Id":"6670705604","Type":"PullRequestEvent","CreatedAt":"2017-10-04T01:35:14","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/14313","RelatedDescription":"Merged pull request \"Fix broken ARM64 build\" (#14313) at dotnet/coreclr","RelatedBody":"The std::max was being passed arguments of different types (int and DWORD)."},{"Id":"6670443471","Type":"PullRequestEvent","CreatedAt":"2017-10-03T23:42:16","Actor":"janvorli","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/14121","RelatedDescription":"Merged pull request \"Few build changes to support Freebsd\" (#14121) at dotnet/coreclr","RelatedBody":"- there may not be 'python' binary - fresh install has only python2.7\r\n- __HostDistroRid for FreeBSD\r\n- small fixes for consistency and to make build of corelib easier for freebsd"}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"6671118090","Type":"IssuesEvent","CreatedAt":"2017-10-04T05:02:23","Actor":"sheltonc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/7759","RelatedDescription":"Opened issue \"dotnet pack produces an invalid symbols package under linux\" (#7759) at dotnet/cli","RelatedBody":"The following repository contains a scripts and a sample project to reproduce the issue. You will need docker installed.\r\n\r\nhttps://bitbucket.org/sheltony/dotnetpackbug\r\n\r\nThe sample dotnet project contains two classes\r\n- dotnetPackBug.Class1\r\n- dotnetPackBug.Namespace.Class2\r\n\r\nTo run this, just execute **run.ps1**\r\n\r\nYou'll end up with two folders **WindowsOut** and **LinuxOut**, Each of which will have **dotnetPackBug.1.0.0.symbols.nupkg**, which you can use to observe the following:\r\n\r\nWhen creating a symbols package under windows, the output symbols.nupkg output contains a valid package. Inside the nupkg. we have a src folder with the following structure.\r\n\r\n```\r\nWindowsOut/dotnetPackBug.1.0.0.symbols.nupkg\r\nsrc\r\n    dotnetPackBug\r\n        Namespace\r\n            Class2.cs\r\n        dotnetPackBug.csproj\r\n        Class1.cs\r\n```\r\n\r\nHowever, under linux, the same command produces a package with the following incorrect structure:\r\n\r\n```\r\nLinuxOut/dotnetPackBug.1.0.0.symbols.nupkg\r\nsrc\r\n    dotnetPackBug\r\n        dotnetPackBug.csproj\r\n        Class1.cs\r\n```\r\n\r\nYou can see that anything that is not at the root level in the dotnet project (e.g. everything in a namespace) is not included in the symbols package in the src folder. They're in fact included in the package at the wrong level (the root level of the package)\r\n\r\nThis means that when attempting to consume the symbols in live debugging, the source code is not found and debugging does not work.\r\n"},{"Id":"6670848848","Type":"IssuesEvent","CreatedAt":"2017-10-04T02:44:36","Actor":"pichasepongc-tit","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/7758","RelatedDescription":"Opened issue \"help me \" (#7758) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\n\r\n\r\n## Expected  behavior\r\n\r\n\r\n## Actual behavior\r\n\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n![2017-10-04_9-41-34](https://user-images.githubusercontent.com/19162319/31157945-918c2e3e-a8e8-11e7-8c75-46f7a0a8fbb2.jpg)\r\n![2](https://user-images.githubusercontent.com/19162319/31157953-98f6229c-a8e8-11e7-9144-dba2fec9c363.jpg)\r\n![3](https://user-images.githubusercontent.com/19162319/31157955-9cca0186-a8e8-11e7-8a87-2810a83810b8.jpg)\r\n\r\n\r\n\r\n\r\n\r\n\r\n"},{"Id":"6670465337","Type":"PullRequestEvent","CreatedAt":"2017-10-03T23:50:26","Actor":"nguerrera","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/7755","RelatedDescription":"Merged pull request \"Change pre-release label for infrastructure work\" (#7755) at dotnet/cli","RelatedBody":""},{"Id":"6670457534","Type":"PullRequestEvent","CreatedAt":"2017-10-03T23:47:24","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/7757","RelatedDescription":"Opened pull request \"Moving the runtime version to 2.0.0 for the SDK.\" (#7757) at dotnet/cli","RelatedBody":"@dotnet/dotnet-cli \r\n\r\nThe 2.0.1 runtime we were referencing has not been release.\r\n"},{"Id":"6670399260","Type":"PullRequestEvent","CreatedAt":"2017-10-03T23:26:04","Actor":"benknoble","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/7756","RelatedDescription":"Opened pull request \"Quote variable expansions in dotnet-install.sh\" (#7756) at dotnet/cli","RelatedBody":"Fix #5281 to prevent paths with spaces from causing problems due to word\r\nsplitting.\r\n\r\nSome of them aren't likely to have issues, but safety first.\r\n\r\nSee also dotnet/roslyn#22320 for something similar"},{"Id":"6670104839","Type":"PullRequestEvent","CreatedAt":"2017-10-03T21:53:38","Actor":"nguerrera","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/7755","RelatedDescription":"Opened pull request \"Change pre-release label for infrastructure work\" (#7755) at dotnet/cli","RelatedBody":""},{"Id":"6670065822","Type":"PullRequestEvent","CreatedAt":"2017-10-03T21:43:36","Actor":"dotnet-bot","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/7754","RelatedDescription":"Opened pull request \"Update CoreSetup to preview1-25803-02 (master)\" (#7754) at dotnet/cli","RelatedBody":"/cc @dotnet/dotnet-cli"},{"Id":"6670061541","Type":"PullRequestEvent","CreatedAt":"2017-10-03T21:42:29","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/7753","RelatedDescription":"Merged pull request \"Update the known issues location\" (#7753) at dotnet/cli","RelatedBody":"Fixes https://github.com/dotnet/cli/issues/7722\r\n\r\nskip ci please\r\n\r\n@dotnet/dotnet-cli \r\n"},{"Id":"6670061533","Type":"IssuesEvent","CreatedAt":"2017-10-03T21:42:29","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/7722","RelatedDescription":"Closed issue \"Known issues document missing (404)\" (#7722) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\n - Go to https://github.com/dotnet/cli/blob/master/Documentation/README.md\r\n - Click on _CLI Known Issues_\r\n\r\n## Expected  behavior\r\nA document displaying currently known issues\r\n\r\n## Actual behavior\r\n404"}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"6670813476","Type":"IssuesEvent","CreatedAt":"2017-10-04T02:27:22","Actor":"tmenier","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/526","RelatedDescription":"Opened issue \"Did the term \"portable\" die with PCLs?\" (#526) at dotnet/standard","RelatedBody":"Not sure if this is a good place this question. I have a library that used to be a PCL and has since been updated to target .NET Standard. Should I no longer say the library is \"portable\"? Is there a replacement term I should use? \"Portable\" seems appropriate, yet the term seems to have died with PCLs and I'm not entirely sure why. Thanks!"},{"Id":"6668348275","Type":"PullRequestEvent","CreatedAt":"2017-10-03T15:30:58","Actor":"dagood","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/525","RelatedDescription":"Opened pull request \"[dev/release/2.0.0] Move web sources before potentially local sources\" (#525) at dotnet/standard","RelatedBody":"Followup to https://github.com/dotnet/standard/pull/523 (initial API implementation). Adds a workaround to a `--source` bug that I added to the CoreFX repo API PR discussed at https://github.com/dotnet/corefx/pull/24378#discussion_r142285244."},{"Id":"6666299022","Type":"IssuesEvent","CreatedAt":"2017-10-03T07:37:10","Actor":"moh-hassan","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/524","RelatedDescription":"Opened issue \"After the final release of .Net Standard 2.0 and .Net Core 2.0, what are the missing 43 API that not implemented in net461?\" (#524) at dotnet/standard","RelatedBody":"I read the discussion:\r\n[Understanding why there is no cleaner way than .NET Framework 4.6.1 supporting .NET Standard 2.0 #133](https://github.com/dotnet/standard/issues/133) and \r\n[What are the 43 APIs that are in .Net Standard 2.0 but not in .Net Framework 4.6.1?](https://stackoverflow.com/questions/43601101/what-are-the-43-apis-that-are-in-net-standard-2-0-but-not-in-net-framework-4-6)\r\nAnd find that these 43 API are not documented anywhere on the Internet, so I ask:\r\n\r\n- What are the missing 43 API that is not implemented in net461?\r\n- How to avoid their usage in net461 (before firing exceptions in unit test)?\r\n- Can we get a browser like [.NET API Browser](https://docs.microsoft.com/en-us/dotnet/api/) or tool in github  that mention frankly these API?\r\n- Can  multi target project (netstandard2,net461) protect against the usage of these 43 API?\r\n"},{"Id":"6664043234","Type":"PullRequestEvent","CreatedAt":"2017-10-02T18:39:16","Actor":"weshaggard","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/523","RelatedDescription":"Merged pull request \"Add auto dependency flow repo API\" (#523) at dotnet/standard","RelatedBody":"Implement [auto dependency flow repo API](https://github.com/dotnet/source-build/blob/dev/release/2.0/Documentation/auto-dependency-flow/api.md).\r\n\r\nThe new BuildTools package provides a common implementation for most of the args (https://github.com/dotnet/buildtools/pull/1707), but some changes are required:\r\n * The `dir.props` source changes are because BuildTools now provides a default value of `RestoreSources` based on repo API args. BuildTools also now automatically flows the property into the restore command."},{"Id":"6663597203","Type":"PullRequestEvent","CreatedAt":"2017-10-02T16:59:28","Actor":"dagood","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/523","RelatedDescription":"Opened pull request \"Add auto dependency flow repo API\" (#523) at dotnet/standard","RelatedBody":"Implement [auto dependency flow repo API](https://github.com/dotnet/source-build/blob/dev/release/2.0/Documentation/auto-dependency-flow/api.md).\r\n\r\nThe new BuildTools package provides a common implementation for most of the args (https://github.com/dotnet/buildtools/pull/1707), but some changes are required:\r\n * The `dir.props` source changes are because BuildTools now provides a default value of `RestoreSources` based on repo API args. BuildTools also now automatically flows the property into the restore command."},{"Id":"6662856018","Type":"IssuesEvent","CreatedAt":"2017-10-02T14:31:19","Actor":"mattkoch614","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/522","RelatedDescription":"Opened issue \"Creating a class library in 2.0 and referencing it from an SSIS script component/task\" (#522) at dotnet/standard","RelatedBody":"We have a set of SSIS packages that leverage script components and script tasks. These packages were written in Visual Studio 2012 and are deployed to a server that has the .NET framework 4.5 and SQL Server 2012 Standard installed.\r\n\r\nWhat we'd like to do is write some new class libraries using .NET Standard 2.0 and be able to reference them from the script components and tasks inside of our existing SSIS packages. The script components and tasks by default target the .NET Framework 4.0.  Is this possible?\r\n\r\nPreliminary testing of this scenario results in the script tasks throwing an error of ``'System.Obect' is not defined`` which leads me to believe there is some clashing going on with either the Visual Studio version or the .NET framework itself.\r\n\r\nAny help greatly appreciated. "},{"Id":"6659512216","Type":"IssuesEvent","CreatedAt":"2017-10-01T12:45:22","Actor":"jogibear9988","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/521","RelatedDescription":"Opened issue \"Error loading a WPF App (Net 4.6.2) referncing NetStandart 2.0 Dlls\" (#521) at dotnet/standard","RelatedBody":"I have a huge Solution wich using over 50 Assemblys. Some of them Target Netstandart 2.0, some older Versions.\r\n\r\nNow I have the following error during Startup:\r\n\r\nDie Datei oder Assembly \"System.Runtime, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\" oder eine Abhängigkeit davon wurde nicht gefunden. Die gefundene Manifestdefinition der Assembly stimmt nicht mit dem Assemblyverweis überein. (Ausnahme von HRESULT: 0x80131040)\r\nDateiname: \"System.Runtime, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\" ---> System.IO.FileLoadException: Die Datei oder Assembly \"System.Runtime, Version=4.0.20.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\" oder eine Abhängigkeit davon wurde nicht gefunden. Die gefundene Manifestdefinition der Assembly stimmt nicht mit dem Assemblyverweis überein. (Ausnahme von HRESULT: 0x80131040)\r\nDateiname: \"System.Runtime, Version=4.0.20.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\"\r\n\r\nbut I have the Assembly Redirect:\r\n\r\n  <dependentAssembly>\r\n                <assemblyIdentity name=\"System.Runtime\" publicKeyToken=\"b03f5f7f11d50a3a\" culture=\"neutral\" />\r\n                <bindingRedirect oldVersion=\"0.0.0.0-4.1.1.0\" newVersion=\"4.1.1.0\" />\r\n            </dependentAssembly>\r\n\r\nIn my app.config! What can I do?"},{"Id":"6657495023","Type":"PullRequestEvent","CreatedAt":"2017-09-30T06:27:41","Actor":"voltagex","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/520","RelatedDescription":"Opened pull request \"Add more explicit instructions for installing Microsoft.Packaging.Tools.Trimming\" (#520) at dotnet/standard","RelatedBody":"Solves https://github.com/dotnet/standard/issues/518"},{"Id":"6657489636","Type":"IssuesEvent","CreatedAt":"2017-09-30T06:22:43","Actor":"voltagex","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/519","RelatedDescription":"Opened issue \"error MSB4018: The \"TrimFiles\" task failed unexpectedly.\" (#519) at dotnet/standard","RelatedBody":"I have done the following:\r\n* Installed Microsoft.Packaging.Tools.Trimming version 1.1.0-preview1-25729-01\r\n* Set up my .csproj to include `<TrimUnusedDependencies>true</TrimUnusedDependencies>` as per https://github.com/dotnet/standard/blob/release/2.0.0/Microsoft.Packaging.Tools.Trimming/docs/trimming.md\r\n\r\n\r\n```\r\n>------ Rebuild All started: Project: Music, Configuration: Debug Any CPU ------\r\n1>C:\\Users\\Adam\\.nuget\\packages\\microsoft.packaging.tools.trimming\\1.1.0-preview1-25729-01\\build\\Microsoft.Packaging.Tools.Trimming.targets(55,5): error MSB4018: The \"TrimFiles\" task failed unexpectedly.\r\n1>C:\\Users\\Adam\\.nuget\\packages\\microsoft.packaging.tools.trimming\\1.1.0-preview1-25729-01\\build\\Microsoft.Packaging.Tools.Trimming.targets(55,5): error MSB4018: System.ArgumentNullException: Value cannot be null.\r\n1>C:\\Users\\Adam\\.nuget\\packages\\microsoft.packaging.tools.trimming\\1.1.0-preview1-25729-01\\build\\Microsoft.Packaging.Tools.Trimming.targets(55,5): error MSB4018: Parameter name: source\r\n1>C:\\Users\\Adam\\.nuget\\packages\\microsoft.packaging.tools.trimming\\1.1.0-preview1-25729-01\\build\\Microsoft.Packaging.Tools.Trimming.targets(55,5): error MSB4018:    at System.Linq.Enumerable.Where[TSource](IEnumerable`1 source, Func`2 predicate)\r\n1>C:\\Users\\Adam\\.nuget\\packages\\microsoft.packaging.tools.trimming\\1.1.0-preview1-25729-01\\build\\Microsoft.Packaging.Tools.Trimming.targets(55,5): error MSB4018:    at Microsoft.DotNet.Build.Tasks.TrimFiles.Execute()\r\n1>C:\\Users\\Adam\\.nuget\\packages\\microsoft.packaging.tools.trimming\\1.1.0-preview1-25729-01\\build\\Microsoft.Packaging.Tools.Trimming.targets(55,5): error MSB4018:    at Microsoft.Build.BackEnd.TaskExecutionHost.Microsoft.Build.BackEnd.ITaskExecutionHost.Execute()\r\n1>C:\\Users\\Adam\\.nuget\\packages\\microsoft.packaging.tools.trimming\\1.1.0-preview1-25729-01\\build\\Microsoft.Packaging.Tools.Trimming.targets(55,5): error MSB4018:    at Microsoft.Build.BackEnd.TaskBuilder.<ExecuteInstantiatedTask>d__26.MoveNext()\r\n1>Done building project \"Music.csproj\" -- FAILED.\r\n```\r\n\r\nAny clues? This is pretty much the MVC template from the 2.0.0 SDK."},{"Id":"6657469160","Type":"IssuesEvent","CreatedAt":"2017-09-30T06:03:47","Actor":"voltagex","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/518","RelatedDescription":"Opened issue \"Microsoft.Packaging.Tools.Trimming package can't be found\" (#518) at dotnet/standard","RelatedBody":"VS2017, .NET Core 2.0.\r\n\r\nThe instructions in https://github.com/dotnet/standard/blob/release/2.0.0/Microsoft.Packaging.Tools.Trimming/docs/trimming.md say to install `Microsoft.Packaging.Tools.Trimming` however I can't locacte that package.\r\n\r\n```\r\nPM> Install-Package Microsoft.Packaging.Tools.Trimming\r\nInstall-Package : Unable to find package 'Microsoft.Packaging.Tools.Trimming'\r\nAt line:1 char:1\r\n+ Install-Package Microsoft.Packaging.Tools.Trimming\r\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n    + CategoryInfo          : NotSpecified: (:) [Install-Package], Exception\r\n    + FullyQualifiedErrorId : NuGetCmdletUnhandledException,NuGet.PackageManagement.PowerShellCmdlets.InstallPackageCommand\r\n \r\nTime Elapsed: 00:00:01.2276512\r\nPM> \r\n```"},{"Id":"6657075642","Type":"PullRequestEvent","CreatedAt":"2017-09-30T00:35:13","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/516","RelatedDescription":"Merged pull request \"Add developer metaphor for .NET Standard\" (#516) at dotnet/standard","RelatedBody":"Based on @davidfowl's [gist](https://gist.github.com/davidfowl/8939f305567e1755412d6dc0b8baf1b7)"}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"6671025568","Type":"PullRequestEvent","CreatedAt":"2017-10-04T04:12:53","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/24418","RelatedDescription":"Merged pull request \"Update CoreFx, ProjectNTfs, ProjectNTfsTestILC to preview1-25804-01, beta-25804-00, beta-25804-00, respectively (master)\" (#24418) at dotnet/corefx","RelatedBody":""},{"Id":"6670996812","Type":"PullRequestEvent","CreatedAt":"2017-10-04T03:58:23","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/24419","RelatedDescription":"Merged pull request \"Skip GC tests on desktop with difference in behavior\" (#24419) at dotnet/corefx","RelatedBody":"This tests fail in desktop because the fix made in https://github.com/dotnet/coreclr/pull/14088 is not in desktop. Since they are outerloop that is why CI passed, but official build is failing. \r\n\r\nWe should probably mark that fix as netfx-port-consider.\r\n\r\ncc: @danmosemsft @swgillespie "},{"Id":"6670786479","Type":"IssuesEvent","CreatedAt":"2017-10-04T02:14:28","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/24395","RelatedDescription":"Closed issue \"Please introduce IEnumerable<char> constructor in System.String\" (#24395) at dotnet/corefx","RelatedBody":"Hi,\r\n\r\n### Motive\r\n\r\nIn order to initialize a `string` from an `IEnumerable<char>` via LINQ etc., we must first manually create an array by calling `ToArray` or other means.\r\n\r\n### Desired API\r\n\r\n```c#\r\nIEnumerable<char> chars = GetChars();\r\nstring str = new string(chars);\r\n```\r\n\r\nAchievable by adding another constructor overload that copies the enumerable of chars into a new string."},{"Id":"6670746561","Type":"PullRequestEvent","CreatedAt":"2017-10-04T01:54:53","Actor":"safern","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/24419","RelatedDescription":"Opened pull request \"Skip GC tests on desktop with difference in behavior\" (#24419) at dotnet/corefx","RelatedBody":"This tests fail in desktop because the fix made in https://github.com/dotnet/coreclr/pull/14088 is not in desktop. Since they are outerloop that is why CI passed, but official build is failing. \r\n\r\nWe should probably mark that fix as netfx-port-consider.\r\n\r\ncc: @danmosemsft @swgillespie "},{"Id":"6670735982","Type":"PullRequestEvent","CreatedAt":"2017-10-04T01:49:42","Actor":"dotnet-maestro-bot","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/24418","RelatedDescription":"Opened pull request \"Update CoreFx to preview1-25804-01 (master)\" (#24418) at dotnet/corefx","RelatedBody":""}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"6670824507","Type":"IssuesEvent","CreatedAt":"2017-10-04T02:32:37","Actor":"jcouv","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/22512","RelatedDescription":"Opened issue \"Implement \"Auto-Implemented Property Field-Targeted Attributes\"\" (#22512) at dotnet/roslyn","RelatedBody":"Spec: https://github.com/dotnet/csharplang/blob/master/proposals/auto-prop-field-attrs.md\r\n\r\nRelates to https://github.com/dotnet/csharplang/issues/42"},{"Id":"6670740854","Type":"PullRequestEvent","CreatedAt":"2017-10-04T01:52:05","Actor":"tmat","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/22511","RelatedDescription":"Opened pull request \"Test only: Validate PDB conversion\" (#22511) at dotnet/roslyn","RelatedBody":"Updates PDB validation methods to perform PDB conversion and validate the converted PDB against the expected value."},{"Id":"6670638764","Type":"PullRequestEvent","CreatedAt":"2017-10-04T01:04:31","Actor":"heejaechang","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/22390","RelatedDescription":"Merged pull request \"guard us from getting duplicated errors from the build.\" (#22390) at dotnet/roslyn","RelatedBody":"**Customer scenario**\r\n\r\nuser builds a solution and solution has duplicated errors on same file and VS crash. \r\n\r\nthis can be quite common on XAML projects. for example, \"MahApps.Metro\" which is quite popular github project will crash VS when built.\r\n\r\n**Bugs this fixes:**\r\n\r\nhttps://devdiv.visualstudio.com/DevDiv/_workitems/edit/500533\r\n\r\n**Workarounds, if any**\r\n\r\nThere is no workaround.\r\n\r\n**Risk**\r\n\r\nThere is no risk\r\n\r\n**Performance impact**\r\n\r\nthere should be no visible perf impact\r\n\r\n**Is this a regression from a previous update?**\r\n\r\nYes. it regressed when I made build error to preserve error ordering we got from build.\r\n\r\n**Root cause analysis:**\r\n\r\nwe used to use hashset to store errors which doesn't care about duplicates, now it changed to dictionary for ordering and now we became duplicates sensitive.\r\n\r\ntest is added to prevent regression.\r\n\r\n**How was the bug found?**\r\n\r\nTesting.\r\n"},{"Id":"6670623472","Type":"IssuesEvent","CreatedAt":"2017-10-04T00:57:42","Actor":"gafter","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/18507","RelatedDescription":"Closed issue \"Checklist for completion of private protected feature\" (#18507) at dotnet/roslyn","RelatedBody":"See also https://github.com/dotnet/csharplang/issues/37\r\n\r\n- [x] Developer needs to do an IDE test pass to ensure basic functionality is maintained. See [IDE Test Plan](https://github.com/dotnet/roslyn/blob/master/docs/contributing/IDE%20Test%20Plan.md)\r\n- [x] Reviewer needs to create a flavor of the test plan for the feature involved.  In many cases this will just be stripping out unnecessary elements (example expression classification prob not of interest to ref asemblies).  But it should also call out areas of interest particular to this feature. See [Compiler Test Plan](https://github.com/dotnet/roslyn/blob/master/docs/contributing/Compiler%20Test%20Plan.md). *Test plan is at https://github.com/dotnet/roslyn/issues/19722*\r\n- [x] Reviewer needs to validate the test coverage is sufficient for the test plan and note the test gaps\r\n- [x] Add a test that `private protected` members are excluded in reference assemblies. See https://github.com/dotnet/roslyn/pull/18339 for context.\r\n\r\nWe'll expand these sub-bullets as work progresses."},{"Id":"6670511072","Type":"IssuesEvent","CreatedAt":"2017-10-04T00:08:36","Actor":"gafter","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/5605","RelatedDescription":"Closed issue \"[Proposal] Overload resolution hint for overloads that have exactly the same priority\" (#5605) at dotnet/roslyn","RelatedBody":"#### Problem\n\nThere are cases when there is need for two overloads that perform a same function over different types.\nExample:\n\n``` csharp\nTValue GetValueOrDefault<TKey, TValue>(this IDictionary<TKey, TValue> dictionary, TKey key);\nTValue GetValueOrDefault<TKey, TValue>(this IReadOnlyDictionary<TKey, TValue> dictionary, TKey key);\n```\n\nThis pattern breaks when something belongs to both types, e.g. `d.GetValueOrDefault` would break if `d` is a `Dictionary<,>`, since it implements both interfaces. There is no good workaround other than forcing user to cast, or implementing additional overloads for common types.\n\nAnother case (more of an edge case) I had recently was\n\n``` csharp\nbool operator==(MyType x, OtherType1 y);\nbool operator==(MyType x, OtherType2 y);\n```\n\nwhich breaks on a common case of `x == null` as `null` can belong to either type.\n#### Proposal\n\nI feel that in most of those cases it does not matter which overload will be selected for types that match both -- as long as it is actually selected and user does not have to cast.\n\nSo the suggestion is to provide a hint to the compiler -- specifying which overload to pick when all of them have exactly the same priority.\n\nTo avoid polluting the language, I suggest an attribute, e.g.:\n\n``` csharp\nTValue GetValueOrDefault<TKey, TValue>([PrimaryOverload] this IReadOnlyDictionary<TKey, TValue> dictionary, TKey key);\n```\n\n``` csharp\nbool operator==(MyType x, [PrimaryOverload] OtherType1 y);\n```\n\nNot sure what would be the best name -- open to feedback.\n"},{"Id":"6670510038","Type":"IssuesEvent","CreatedAt":"2017-10-04T00:08:12","Actor":"jcouv","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/22360","RelatedDescription":"Closed issue \"Inconsistency in CS0220 with bit shifting\" (#22360) at dotnet/roslyn","RelatedBody":"**Version Used**: \r\n\r\nAssumed Roslyn 2.3 - Visual Studio 2017 v15.3.5, .NET Core SDK 2.0\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Attempt to compile the following code:\r\n\r\n```\r\nusing System;\r\n\r\n[Flags]\r\npublic enum Foo : long\r\n{\r\n    ShouldOverflow1 = 1 << 64,\r\n    ShouldOverflow2 = checked(1 << 64),\r\n    DoesOverflow1 = (1 << 63) + (1 << 63),\r\n    DoesOverflow2 = (1 << 63) * 2,\r\n}\r\n```\r\n\r\n**Expected Behavior**:\r\n\r\nAll four enum values result in `error CS0220: The operation overflows at compile time in checked mode`\r\n\r\n**Actual Behavior**:\r\n\r\nOnly the final two enum values (`DoesOverflow1` and `DoesOverflow2`) result in CS0220.\r\n\r\n---\r\n\r\nIs this intended behaviour of the language, or is this a bug/inconsistency in Roslyn?"},{"Id":"6670508056","Type":"IssuesEvent","CreatedAt":"2017-10-04T00:07:22","Actor":"0xd4d","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/22510","RelatedDescription":"Opened issue \"Allow changing read only fields in debugger locals/watch windows\" (#22510) at dotnet/roslyn","RelatedBody":"**Version Used**: VS2017\r\n\r\nA feature request:\r\n\r\nThe debugger doesn't let the user change read-only fields. The debugger should do what the user says, and if the user wants to change a read only field, it should be allowed. We're able to add new fields, classes, but changing the value of a read only field is impossible.\r\n\r\nSomewhat related issue: #22428\r\n\r\n**Steps to Reproduce**:\r\n\r\nDebug the following program and try changing the value of `c.Field` in the locals window.\r\n\r\n```C#\r\nusing System;\r\n\r\nnamespace ConsoleApp0 {\r\n\tclass C {\r\n\t\tpublic readonly int Field;\r\n\t\tpublic C() => Field = 123;\r\n\t}\r\n\tclass Program {\r\n\t\tstatic void Main(string[] args) {\r\n\t\t\tvar c = new C();\r\n\t\t\tConsole.WriteLine($\"Field = {c.Field}\");\r\n\t\t\tc.GetType().GetField(\"Field\").SetValue(c, 456);\r\n\t\t\tConsole.WriteLine($\"Field = {c.Field}\");\r\n\t\t}\r\n\t}\r\n}\r\n```\r\n"}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"6671125502","Type":"PullRequestEvent","CreatedAt":"2017-10-04T05:06:18","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/4667","RelatedDescription":"Merged pull request \"Updating CLI to 2.0.0 version\" (#4667) at dotnet/corert","RelatedBody":""},{"Id":"6671050019","Type":"PullRequestEvent","CreatedAt":"2017-10-04T04:26:12","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/4667","RelatedDescription":"Opened pull request \"Updating CLI to 2.0.0 version\" (#4667) at dotnet/corert","RelatedBody":""},{"Id":"6671024730","Type":"PullRequestEvent","CreatedAt":"2017-10-04T04:12:26","Actor":"stephentoub","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/4666","RelatedDescription":"Merged pull request \"Special-case T==char in string.Concat(IEnumerable<T>)\" (#4666) at dotnet/corert","RelatedBody":"Port https://github.com/dotnet/coreclr/pull/14298"},{"Id":"6670880483","Type":"PullRequestEvent","CreatedAt":"2017-10-04T02:59:43","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/4666","RelatedDescription":"Opened pull request \"Special-case T==char in string.Concat(IEnumerable<T>)\" (#4666) at dotnet/corert","RelatedBody":"Port https://github.com/dotnet/coreclr/pull/14298"},{"Id":"6670857073","Type":"PullRequestEvent","CreatedAt":"2017-10-04T02:48:30","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/4664","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#4664) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"6670785806","Type":"PullRequestEvent","CreatedAt":"2017-10-04T02:14:07","Actor":"stephentoub","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/4654","RelatedDescription":"Merged pull request \"Make CancellationTokenRegistration.Token public\" (#4654) at dotnet/corert","RelatedBody":"Contributes to https://github.com/dotnet/corefx/issues/23828"},{"Id":"6670782093","Type":"PullRequestEvent","CreatedAt":"2017-10-04T02:12:20","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/4660","RelatedDescription":"Merged pull request \"Delete VS2015 support\" (#4660) at dotnet/corert","RelatedBody":"Contributes to https://github.com/dotnet/corefx/issues/24320"},{"Id":"6670397362","Type":"PullRequestEvent","CreatedAt":"2017-10-03T23:25:21","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/4663","RelatedDescription":"Merged pull request \"Merge nmirror to master\" (#4663) at dotnet/corert","RelatedBody":""},{"Id":"6670391694","Type":"IssuesEvent","CreatedAt":"2017-10-03T23:23:22","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/issues/4665","RelatedDescription":"Opened issue \"Update InstanceFieldLayout tests for Roslyn update\" (#4665) at dotnet/corert","RelatedBody":"https://github.com/dotnet/corert/blob/master/src/ILCompiler.TypeSystem/tests/CoreTestAssembly/InstanceFieldLayout.cs#L163\r\n\r\nIsByRefLikeAttribute is reserved in latest Roslyn and cannot be used to create invalid byref-like types. The tests that need to create invalid byref-like types need to be written in IL."},{"Id":"6670312398","Type":"PullRequestEvent","CreatedAt":"2017-10-03T22:55:57","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/4664","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#4664) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"912821941706268673","CreatedAt":"2017-09-26T23:31:24+00:00","UserScreenname":"dotnet","Text":"Build a web service with F# and .NET Core 2.0 https://t.co/2jSgo1gbty","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":112,"FavoriteCount":64,"RawContent":null},{"Id":"912406212238442498","CreatedAt":"2017-09-25T19:59:27+00:00","UserScreenname":"dotnet","Text":".NET Framework September 2017 Preview of Quality Rollup https://t.co/tkuoBxjYHC","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":30,"FavoriteCount":19,"RawContent":null},{"Id":"911357565769936896","CreatedAt":"2017-09-22T22:32:30+00:00","UserScreenname":"dotnet","Text":".NET Core September 2017 Update — macOS High Sierra Support https://t.co/k9gJ5jFIN8","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":43,"FavoriteCount":24,"RawContent":null}]}},"RunOn":"2017-10-04T05:30:19.1466885Z","RunDurationInMilliseconds":6357}