{"Data":{"Blog":{"FeedItems":[{"Title":"Migrating your existing .NET application to the cloud? Tell us about it!","PublishedOn":"2017-12-05T18:14:46+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Hi everyone! The .NET team is conducting a survey to learn more about your approach for moving existing .NET applications to the cloud.  The survey should take less than 5 minutes to complete. Take...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/12/05/migrating-your-existing-net-application-to-the-cloud-tell-us-about-it/","RawContent":null},{"Title":"Announcing the Windows Compatibility Pack for .NET Core","PublishedOn":"2017-11-17T04:59:32+00:00","CommentsCount":73,"FacebookCount":0,"Summary":"Porting existing code to .NET Core used to be quite hard because the available API set was very small. In .NET Core 2.0, we already made this much easier, thanks to .NET Standard 2.0. Today,...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/16/announcing-the-windows-compatibility-pack-for-net-core/","RawContent":null},{"Title":"UPDATE – Microservices and Docker containers: Architecture, Patterns and Development guidance (Updated for .NET Core 2.0)","PublishedOn":"2017-11-16T22:00:06+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Nov. 15th 2017 update Earlier this year, we published this eBook/guide and sample application offering guidance for architecting microservices and Docker containers based applications. We have...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/16/update-microservices-and-docker-containers-architecture-patterns-and-development-guidance-updated-for-net-core-2-0/","RawContent":null},{"Title":"UPDATE – Web Applications with ASP.NET Core Architecture and Patterns guidance (Updated for ASP.NET Core 2)","PublishedOn":"2017-11-16T21:00:05+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"Nov. 15th 2017 update Earlier this year, we published an eBook/Guide and sample application offering guidance named Architecting Modern Web Applications with ASP.NET Core and Microsoft Azure. We have...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/16/update-web-applications-with-asp-net-core-architecture-and-patterns-guidance-updated-for-asp-net-core-2/","RawContent":null},{"Title":"Introducing Tensor for multi-dimensional Machine Learning and AI data","PublishedOn":"2017-11-15T22:00:18+00:00","CommentsCount":10,"FacebookCount":0,"Summary":"Overview Tensor is an exchange type for homogenous multi-dimensional data for 1 to N dimensions. The motivation behind introducing Tensor&#60;T&#62; is to make it easy for Machine Learning library...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/15/introducing-tensor-for-multi-dimensional-machine-learning-and-ai-data/","RawContent":null},{"Title":"Introducing Nullable Reference Types in C#","PublishedOn":"2017-11-15T20:00:47+00:00","CommentsCount":234,"FacebookCount":0,"Summary":"Today we released a prototype of a C# feature called &#8220;nullable reference types&#8220;, which is intended to help you find and fix most of your null-related bugs before they blow up at runtime....","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/15/nullable-reference-types-in-csharp/","RawContent":null},{"Title":"Announcing F# support for .NET Core and .NET Standard projects in Visual Studio","PublishedOn":"2017-11-15T19:00:49+00:00","CommentsCount":11,"FacebookCount":0,"Summary":"We&#8217;re pleased to announce that Visual Studio 2017 15.5 Preview 4 now supports F# projects targeting .NET Core, .NET Standard, and .NET Framework through the .NET Core SDK. Some of you have...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/15/announcing-f-support-for-net-core-and-net-standard-projects-in-visual-studio/","RawContent":null},{"Title":"Welcome to C# 7.2 and Span","PublishedOn":"2017-11-15T19:00:26+00:00","CommentsCount":29,"FacebookCount":0,"Summary":"C# 7.2 is the latest point release of C#, and adds a number of small but useful features. All the features are described in wonderful detail in the docs. Start with the overview, What&#8217;s new in...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/15/welcome-to-c-7-2-and-span/","RawContent":null},{"Title":".NET Core November 2017 Update","PublishedOn":"2017-11-15T05:25:23+00:00","CommentsCount":12,"FacebookCount":0,"Summary":"Today, we are releasing the .NET Core November Update. This includes .NET Core 1.0.8, 1.1.5 and 2.0.1 and .NET Core SDK 1.1.5 and 2.0.3. Details regarding the security issues addressed by this release...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/14/net-core-november-2017-update/","RawContent":null},{"Title":".NET Framework November 2017 Security and Quality Rollup","PublishedOn":"2017-11-15T03:54:36+00:00","CommentsCount":8,"FacebookCount":0,"Summary":"Today, we are releasing the November 2017 Security and Quality Rollup. Security This release contains no new security updates. The most recent .NET security updates were shipped with the September...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/14/net-framework-november-2017-security-and-quality-rollup/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"7065382954","Type":"PullRequestEvent","CreatedAt":"2018-01-06T19:21:47","Actor":"ctaggart","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/94","RelatedDescription":"Opened pull request \"add SourceLink\" (#94) at dotnet/home","RelatedBody":"Adding SourceLink to the project list as per the checklist https://github.com/ctaggart/SourceLink/issues/138"},{"Id":"7044237283","Type":"PullRequestEvent","CreatedAt":"2017-12-31T20:25:44","Actor":"onovotny","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/93","RelatedDescription":"Opened pull request \"Add Humanizer\" (#93) at dotnet/home","RelatedBody":"Onboarding Humanizer: https://github.com/Humanizr/Humanizer/issues/682"},{"Id":"6946829856","Type":"PullRequestEvent","CreatedAt":"2017-12-05T18:08:42","Actor":"heiligerdankgesang","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/92","RelatedDescription":"Opened pull request \"Remove contact email from system.drawing.md\" (#92) at dotnet/home","RelatedBody":"Contact email is outdated. Mono-project site's community section has better, more up-to-date information."},{"Id":"6934052963","Type":"PullRequestEvent","CreatedAt":"2017-12-02T15:19:09","Actor":"rprouse","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/91","RelatedDescription":"Opened pull request \"Add NUnit to the .NET Foundation Projects\" (#91) at dotnet/home","RelatedBody":""},{"Id":"6872255902","Type":"PullRequestEvent","CreatedAt":"2017-11-17T22:01:26","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/90","RelatedDescription":"Merged pull request \"Add BenchmarkDotNet to README.md and project.json\" (#90) at dotnet/home","RelatedBody":""},{"Id":"6872252909","Type":"PullRequestEvent","CreatedAt":"2017-11-17T22:00:44","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/89","RelatedDescription":"Merged pull request \"New logo and SSL certificate for Peachpie\" (#89) at dotnet/home","RelatedBody":""},{"Id":"6868854916","Type":"PullRequestEvent","CreatedAt":"2017-11-17T09:04:03","Actor":"AndreyAkinshin","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/90","RelatedDescription":"Opened pull request \"Add BenchmarkDotNet to README.md and project.json\" (#90) at dotnet/home","RelatedBody":""},{"Id":"6816687850","Type":"IssuesEvent","CreatedAt":"2017-11-06T20:30:07","Actor":"Petermarcu","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/home/issues/88","RelatedDescription":"Closed issue \"File system watcher crash\" (#88) at dotnet/home","RelatedBody":"Not sure where to open this issue.\r\nI'm experiencing crashes since I migrated to .net core 2.0 while running my site.\r\nThe following is the exception and stack trace:\r\n```\r\nAn unhandled exception of type 'System.ArgumentException' occurred in System.Private.CoreLib.dll\r\nThe path is not of a legal form.\r\n\r\nSystem.Private.CoreLib.dll!System.IO.Path.GetFullPath(string path)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileSystemGlobbing.dll!Microsoft.Extensions.FileSystemGlobbing.InMemoryDirectoryInfo.InMemoryDirectoryInfo(string rootDir, System.Collections.Generic.IEnumerable<string> files, bool normalized)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileSystemGlobbing.dll!Microsoft.Extensions.FileSystemGlobbing.MatcherExtensions.Match(Microsoft.Extensions.FileSystemGlobbing.Matcher matcher, string rootDir, System.Collections.Generic.IEnumerable<string> files)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileSystemGlobbing.dll!Microsoft.Extensions.FileSystemGlobbing.MatcherExtensions.Match(Microsoft.Extensions.FileSystemGlobbing.Matcher matcher, string file)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileProviders.Physical.dll!Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.ReportChangeForMatchedEntries(string path)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileProviders.Physical.dll!Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.OnFileSystemEntryChange(string fullPath)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileProviders.Physical.dll!Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.OnRenamed(object sender, System.IO.RenamedEventArgs e)\tUnknown\tNo symbols loaded.\r\n \tSystem.IO.FileSystem.Watcher.dll!System.IO.FileSystemWatcher.NotifyRenameEventArgs(System.IO.WatcherChangeTypes action, string name, string oldName)\tUnknown\tNo symbols loaded.\r\n \tSystem.IO.FileSystem.Watcher.dll!System.IO.FileSystemWatcher.ParseEventBufferAndNotifyForEach(byte[] buffer)\tUnknown\tNo symbols loaded.\r\n \tSystem.IO.FileSystem.Watcher.dll!System.IO.FileSystemWatcher.ReadDirectoryChangesCallback(uint errorCode, uint numBytes, System.Threading.NativeOverlapped* overlappedPointer)\tUnknown\tNo symbols loaded.\r\n \tSystem.Private.CoreLib.dll!System.Threading._IOCompletionCallback.PerformIOCompletionCallback(uint errorCode, uint numBytes, System.Threading.NativeOverlapped* pOVERLAP)\tUnknown\tNo symbols loaded.\r\n```\r\n\r\nI'm not sure how to fix this. I can reproduce it although it's not easy since I think it has to do with timing..."}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"6948315401","Type":"IssuesEvent","CreatedAt":"2017-12-05T23:41:57","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/50","RelatedDescription":"Closed issue \".Net Core ARM32 SDK availability\" (#50) at dotnet/announcements","RelatedBody":"Referencing #29.\r\n\r\nWill it be possible to : \r\n\r\na) Provide ARM32 builds for the SDK at its current state\r\nor\r\nb) Provide links on how to build the .Net Core SDK for ARM32?\r\n\r\nThe thing is I am planning to use it in a virtual environnement, through proot + qemu-arm-static. This way I would be able to build and, more importantly, run unit tests on ARM32. Another thing I am planning to do is to setup a build environnement on i686 through virtualisation as qemu doesn't seem to be able to emulate x86_64 on i686 (but arm32 does seem to work well enough).\r\n\r\nThank you in advance.\r\n\r\nSergio\r\n\r\n"},{"Id":"6944555922","Type":"IssuesEvent","CreatedAt":"2017-12-05T10:46:06","Actor":"tioduke","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/50","RelatedDescription":"Opened issue \".Net Core ARM32 SDK availability\" (#50) at dotnet/announcements","RelatedBody":"Will it be possible to : \r\n\r\na) Provide ARM32 builds for the SDK at its current state\r\nor\r\nb) Provide links on how to build the .Net Core SDK for ARM32?\r\n\r\nThe thing is I am planning to use it in a virtual environnement, through proot + qemu-arm-static. This way I would be able to build and, more importantly, run unit tests on ARM32. Another thing I am planning to do is to setup a build environnement on i686 through virtualisation as qemu doesn't seem to be able to emulate x86_64 on i686 (but arm32 does seem to work well enough).\r\n\r\nThank you in advance.\r\n\r\nSergio\r\n\r\n"},{"Id":"6886438076","Type":"IssuesEvent","CreatedAt":"2017-11-21T19:28:57","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/49","RelatedDescription":"Opened issue \".NET Core Alpine Image Ready for Testing\" (#49) at dotnet/announcements","RelatedBody":"# .NET Core Alpine Image Ready for Testing\r\n\r\nAn [Alpine](https://hub.docker.com/_/alpine/)-based Docker image is now available for .NET Core. Alpine is much smaller than Debian, which we have used for the .NET Core base image to date. There have been many requests for an Alpine image. We are pleased to make it available. Please check out [.NET Core Docker Alpine Production Sample (Preview)](https://github.com/dotnet/dotnet-docker-samples/blob/master/dotnetapp-prod-alpine-preview/README.md) to see examples of using this image.\r\n\r\nWe have added two new images:\r\n\r\n- `2.1-runtime-alpine`\r\n- `2.1-runtime-deps-alpine`\r\n\r\nAlpine support is part of the .NET Core 2.1 release. .NET Core 2.1 images are currently provided at the [microsoft/dotnet-nightly](https://hub.docker.com/r/microsoft/dotnet-nightly/) repo, including the new Alpine images. .NET Core 2.1 images will be promoted to the [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/) repo when .NET Core 2.1 is shipped as a Preview, expected to be early 2018.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet/dotnet-docker-nightly #500](https://github.com/dotnet/dotnet-docker-nightly/issues/500)\r\n\r\n## Details\r\n\r\n* [dotnet/dotnet-docker-nightly #480](https://github.com/dotnet/dotnet-docker-nightly/pull/480)\r\n* [dotnet/announcements #20](https://github.com/dotnet/announcements/issues/20)\r\n* [dotnet/dotnet-docker-samples #94](https://github.com/dotnet/dotnet-docker-samples/pull/94)\r\n\r\nThe primary goal of Alpine is very small deployments. We have been considering various design decisions to make .NET Core Alpine base images as small as possible to align with that. In this first iteration, we enabled [.NET Core 2.0 Globalization Invariant Mode](https://github.com/dotnet/announcements/issues/20) in order to reduce the default size of the image. This change reduced the image by ~30MB. You can see the reduction in size for .NET Core images relative to Debian in the following table.\r\n\r\n|2.1 Image|Debian|Alpine|\r\n|-----    |------|------|\r\n|`-deps`   |153MB (68MB compressed) |13.8 MB (6MB compressed)|\r\n|`-runtime`|222MB (96MB compressed) |82.5 (34MB compressed)|\r\n\r\nNote: The compressed size is what you will see in a [registry](https://hub.docker.com/r/microsoft/dotnet-nightly/tags/) and is the wire-size cost.\r\n\r\nWe are also considering saving more space by native-compiling fewer assemblies. .NET Core runtime assemblies are native-compiled with the [crossgen tool](https://github.com/dotnet/coreclr/blob/master/Documentation/building/crossgen.md) in the [Ready2Run format](https://github.com/dotnet/coreclr/blob/master/Documentation/botr/readytorun-overview.md). Native-compiled code delivers superior startup performance but at the cost of 2-3x larger files. We have the opportunity to compile less, skipping compiling assemblies in part or in whole. We believe that we can save at least another 10MB through compiling less without a material drop in performance. For scenarios that value size over startup or where wire cost is significant, it may be valuable to aggressively reduce the number/% of compilation.\r\n\r\nAlpine images are only available for .NET Core 2.1. At the current time, only Runtime images are available. We intend to offer SDK images at a later date.\r\n\r\nUse cases that cannot tolerate Globalization invariant mode can reset the `DOTNET_SYSTEM_GLOBALIZATION_INVARIANT` environment variable and install the ICU package. Please check out [.NET Core Docker Alpine Production Sample (Preview)](https://github.com/dotnet/dotnet-docker-samples/blob/master/dotnetapp-prod-alpine-preview/README.md) to see examples of using this image with and without Globalization Invariant Mode enabled.\r\n\r\n## Call to Action\r\n\r\nPlease test your workloads with the new Alpine image. In particular, we want to know if enabling .NET Core Globalization Invariant Mode is acceptable/appreciated.\r\n"}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"7072647288","Type":"PullRequestEvent","CreatedAt":"2018-01-09T01:51:44","Actor":"Anipik","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/15786","RelatedDescription":"Opened pull request \"Added Append(Stringbuilder,int,int) and Append(StringBuilder) overlaod apis\" (#15786) at dotnet/coreclr","RelatedBody":"Fixes  https://github.com/dotnet/corefx/issues/4928\r\nTestsPr- \r\nPreviousPr-  dotnet/coreclr#8615\r\n\r\nMost of the things are same as the previous PR."}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"7072708030","Type":"PullRequestEvent","CreatedAt":"2018-01-09T02:15:12","Actor":"johnbeisner","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/8347","RelatedDescription":"Opened pull request \"CLI produce 'DEB' distro agnostic installer packages; CLI:master\" (#8347) at dotnet/cli","RelatedBody":"CLI to produce 'DEB' distro agnostic installer packages...\r\n\r\nDirectory.Build.props\r\nMinor reordering: Branding.props uses 'IsDebianBaseDistro' defined in DerivedHostMachineInfo.props\r\n\r\nREADME.md\r\nUpdated\r\n\r\nBranding.props \r\nDEB filename token \"HostMonikerRid\" = \"x64\"\r\n\r\nLinuxDistrosNativeInstaller.props \r\nOnly build the 'DEB' on debian.8-x64, however, continue to publish to all 3 Debian 'feeds'\r\n\r\nSandBoxAndPackageInParallel.proj \r\nBuild the 'DEB' only if 'LinuxDistrosNeedNativeInstaller.DockerFolder' is defined.\r\n\r\nPlease note:\r\nPreviously produced set of DEB files:\r\ndotnet-sdk-version-ubuntu-x64.deb for Ubuntu 14.04 \r\ndotnet-sdk-version-debian-x64.deb for Debian 8\r\ndotnet-sdk-version-ubuntu.16.04-x64.deb for Ubuntu 16.04\r\n\r\nPreviously produced set of DEB files:\r\ndotnet-sdk-version-x64.deb\r\n"},{"Id":"7072609724","Type":"PullRequestEvent","CreatedAt":"2018-01-09T01:37:46","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/8343","RelatedDescription":"Merged pull request \"Merge release/2.0.0 to release/2.1\" (#8343) at dotnet/cli","RelatedBody":"\nThis is an automatically generated pull request from release/2.0.0 into release/2.1.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.0.0-to-release/2.1-20180108-080035\ngit reset --hard upstream/release/2.1\ngit merge upstream/release/2.0.0\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.0.0-to-release/2.1-20180108-080035 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"7072609668","Type":"PullRequestEvent","CreatedAt":"2018-01-09T01:37:44","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/8318","RelatedDescription":"Merged pull request \"Merge release/2.0.0 to release/2.1\" (#8318) at dotnet/cli","RelatedBody":"\nThis is an automatically generated pull request from release/2.0.0 into release/2.1.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.0.0-to-release/2.1-20180103-080038\ngit reset --hard upstream/release/2.1\ngit merge upstream/release/2.0.0\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.0.0-to-release/2.1-20180103-080038 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"7072562294","Type":"IssuesEvent","CreatedAt":"2018-01-09T01:19:15","Actor":"emgarten","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/8342","RelatedDescription":"Closed issue \"Creating a local CLI tool package\" (#8342) at dotnet/cli","RelatedBody":"I have a project, `dotnet-mycmd`. I want to use this as a tool in another project via `DotNetCliToolReference`. I've exported a nupkg to a folder and added that folder to the target project's `RestoreSources`. I then added the tool reference and attempted to `dotnet restore`.\r\n\r\nThis succeeds when the project is named something like `mycmd` but fails in all sorts of ways when its named `dotnet-mycmd`. And of course it doesn't work as a tool when the name isn't prefixed with `dotnet-`.\r\n\r\nIn my reproduction ([test.zip](https://github.com/dotnet/cli/files/1609495/test.zip)):\r\n  * A is a netstandard lib\r\n  * A2 is a netstandard lib dependent on A\r\n  * B/dotnet-mycmd is a netcoreapp dependent on A and A2\r\n  * C is a netstandard lib dependent on A with a tool reference to B/dotnet-mycmd\r\n\r\nCurrently, I'm getting these errors (in my reproduction attempt):\r\n```\r\n% dotnet restore C\r\n  Restoring packages for /Users/me/Source/test/C/C.csproj...\r\n  Restore completed in 10.04 ms for /Users/me/Source/test/A/A.csproj.\r\n  Restore completed in 22.78 ms for /Users/me/Source/test/C/C.csproj.\r\n/Users/me/Source/test/C/C.csproj : error NU1101: Unable to find package dotnet-mycmd. No packages exist with this id in source(s): nuget.org\r\n/usr/local/share/dotnet/sdk/2.1.3/NuGet.targets(103,5): error : Value cannot be null. [/Users/me/Source/test/C/C.csproj]\r\n/usr/local/share/dotnet/sdk/2.1.3/NuGet.targets(103,5): error : Parameter name: path [/Users/me/Source/test/C/C.csproj]\r\n```\r\n\r\nThese are the errors I was getting before I tried to reproduce the issue, translated into the projects I created for the reproduction:\r\n```\r\n/Users/me/Source/test/C/C.csproj : error NU1101: Unable to find package A. No packages exist with this id in source(s): nuget.org\r\n/Users/me/Source/test/C/C.csproj : error NU1101: Unable to find package A2. No packages exist with this id in source(s): nuget.org\r\n```\r\n"},{"Id":"7072468609","Type":"PullRequestEvent","CreatedAt":"2018-01-09T00:44:18","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/8345","RelatedDescription":"Merged pull request \"Update CoreSetup to preview1-26108-03 (master)\" (#8345) at dotnet/cli","RelatedBody":"/cc @dotnet/dotnet-cli"},{"Id":"7072167142","Type":"PullRequestEvent","CreatedAt":"2018-01-08T23:01:50","Actor":"rainersigwald","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/8346","RelatedDescription":"Opened pull request \"MSBuild 15.6.44\" (#8346) at dotnet/cli","RelatedBody":"Current build of MSBuild, already inserted into VS 15.6 internal builds.\r\n\r\ncc @AndyGerlicher"},{"Id":"7072004815","Type":"PullRequestEvent","CreatedAt":"2018-01-08T22:18:45","Actor":"dotnet-bot","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/8345","RelatedDescription":"Opened pull request \"Update CoreSetup to preview1-26108-03 (master)\" (#8345) at dotnet/cli","RelatedBody":"/cc @dotnet/dotnet-cli"},{"Id":"7072004711","Type":"PullRequestEvent","CreatedAt":"2018-01-08T22:18:44","Actor":"peterhuene","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/8285","RelatedDescription":"Merged pull request \"Map solution configurations to existing project configurations on add. \" (#8285) at dotnet/cli","RelatedBody":"This PR implements solution configuration to project configuration mapping.\r\n\r\nPreviously, when a project was added to the solution with the `sln add`\r\ncommand, solution configurations would be mapped to a project configuration and\r\nplatform of the same name, regardless of whether or not the project had a\r\nconfiguration or platform of that name.  This caused the solution to appear\r\ndirty when opened in Visual Studio if the configuration or platform did not\r\nexist at the project level because Visual Studio would attempt to correct the\r\nmapping.\r\n\r\nThe fix is to check what configurations and platforms are supported by the\r\nproject and only map to what is present.  If a solution configuration can't be\r\nmapped, the first configuration/platform supported by the project is chosen;\r\nthis is consistent with how Visual Studio does the fallback mapping.\r\n\r\nFixes #6221."}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"7071488221","Type":"PullRequestEvent","CreatedAt":"2018-01-08T20:14:34","Actor":"weshaggard","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/618","RelatedDescription":"Merged pull request \"Update BuildTools to prerelease-02408-01 (master)\" (#618) at dotnet/standard","RelatedBody":""},{"Id":"7068857812","Type":"IssuesEvent","CreatedAt":"2018-01-08T10:21:16","Actor":"henkburgstra","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/619","RelatedDescription":"Closed issue \"\\\" (#619) at dotnet/standard","RelatedBody":""},{"Id":"7068855860","Type":"IssuesEvent","CreatedAt":"2018-01-08T10:20:47","Actor":"henkburgstra","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/619","RelatedDescription":"Opened issue \"\\\" (#619) at dotnet/standard","RelatedBody":""},{"Id":"7058805790","Type":"PullRequestEvent","CreatedAt":"2018-01-04T21:57:28","Actor":"dotnet-maestro-bot","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/618","RelatedDescription":"Opened pull request \"Update BuildTools to prerelease-02404-01 (master)\" (#618) at dotnet/standard","RelatedBody":""},{"Id":"7056464684","Type":"IssuesEvent","CreatedAt":"2018-01-04T12:53:29","Actor":"viswa18","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/611","RelatedDescription":"Closed issue \"System.Diagnostics.Process.Start(info) show icon in Mac\" (#611) at dotnet/standard","RelatedBody":"I am having a simple C++ command line app, which is starts from .NetStandard2.0 class library. Below is code snippet to start the process, but it show dock icon in mac. \r\n\r\n```\r\nSystem.Diagnostics.ProcessStartInfo info = new System.Diagnostics.ProcessStartInfo \r\n{\r\nFileName = helloworld\",\r\nRedirectStandardOutput = true,\r\nRedirectStandardError = true,\r\nUseShellExecute = false,\r\nCreateNoWindow = true,\r\nArguments = args,\r\nWindowStyle = System.Diagnostics.ProcessWindowStyle.Hidden, \r\nErrorDialog = false,\r\n};\r\nSystem.Diagnostics.Process process = System.Diagnostics.Process.Start(info);\r\n```\r\nIs it possible to prevent the icon in dock for mac? "}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"7072822769","Type":"PullRequestEvent","CreatedAt":"2018-01-09T02:58:56","Actor":"ahsonkhan","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/26232","RelatedDescription":"Opened pull request \"Add Span SequenceCompareTo extension method\" (#26232) at dotnet/corefx","RelatedBody":"Fixes https://github.com/dotnet/corefx/issues/16878\r\n\r\n- Added unit and perf tests\r\n- Vectorized the `SequenceCompareTo<byte>` implementation\r\n- Note: I did not loop unroll `SequenceCompareTo<T>` similar to `SequenceEqual<T>` since I observed no performance improvement (in fact there was some regression for T = int)\r\n\r\ncc @KrzysztofCwalina, @jkotas, @AtsushiKan, @AronParker, @Bobris"},{"Id":"7072683992","Type":"PullRequestEvent","CreatedAt":"2018-01-09T02:05:54","Actor":"Anipik","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/26231","RelatedDescription":"Opened pull request \"Tests for Added Append(Stringbuilder,int,int) and Append(StringBuilder) overlaod apis\" (#26231) at dotnet/corefx","RelatedBody":"Fixes  https://github.com/dotnet/corefx/issues/4928\r\nImplemenation Pr- https://github.com/dotnet/coreclr/pull/15786\r\nPrevious Implementation Pr-  dotnet/coreclr#8615"},{"Id":"7072597587","Type":"PullRequestEvent","CreatedAt":"2018-01-09T01:33:04","Actor":"dotnet-maestro-bot","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/26230","RelatedDescription":"Opened pull request \"Update CoreClr, CoreSetup to preview1-26108-06, preview1-26108-03, respectively (master)\" (#26230) at dotnet/corefx","RelatedBody":""}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"7072864207","Type":"IssuesEvent","CreatedAt":"2018-01-09T03:14:22","Actor":"rchande","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/24112","RelatedDescription":"Opened issue \"Debugger inserts DisplayText instead of InsertionText.\" (#24112) at dotnet/roslyn","RelatedBody":"1. New Console App, set a breakpoint, F5. Do not type in the editor.\r\n2. After hitting the breakpoint, open the Watch window and type an expression.\r\n3. Type \"List\" and observe that \"List<>\" is highlighted.\r\n4. Press Tab to commit the \"List<>\" items.\r\n\r\nExpected:\r\n`List` inserted into watch window\r\n\r\nActual:\r\n`List<>` inserted into watch window.\r\n\r\nInteresting:\r\nIf you do the same in the main editor, `List` is always inserted. After doing this in the main editor, Debugger Intellisense starts inserting `List` instead of `List<>`\r\n\r\nThis was reported by the Pythia team who received a bug report because their CompletionProvider always inserts an InsertionText that differs from its DisplayText."},{"Id":"7072697612","Type":"PullRequestEvent","CreatedAt":"2018-01-09T02:11:00","Actor":"jasonmalinowski","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/24109","RelatedDescription":"Merged pull request \"Adding entries for 15.6 branches\" (#24109) at dotnet/roslyn","RelatedBody":"build/branch support"}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"7071592361","Type":"IssuesEvent","CreatedAt":"2018-01-08T20:39:39","Actor":"mikedn","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/issues/5229","RelatedDescription":"Opened issue \"Does/can OPT:ICF work?\" (#5229) at dotnet/corert","RelatedBody":"I see in the linker response file that is generated when publishing that `/OPT:ICF` (and `/OPT:REF`) are specified. However, the final exe appears to contain identical method bodies that are not folded (e.g. `Array<int>.get_Count()` and `Array<byte>.get_Count()`.\r\n\r\nIs it even possible to use `/OPT:ICF` with managed code? Won't it affect callstacks somehow?\r\n"},{"Id":"7071248937","Type":"PullRequestEvent","CreatedAt":"2018-01-08T19:19:20","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5228","RelatedDescription":"Merged pull request \" Normalize reflectable methods to slot defining methods \" (#5228) at dotnet/corert","RelatedBody":"Fixes the MonoGame NeonShooter sample.\r\n\r\nThe other commit fixes it in two more spots for good measure."},{"Id":"7070948986","Type":"PullRequestEvent","CreatedAt":"2018-01-08T18:09:08","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5228","RelatedDescription":"Opened pull request \" Normalize reflectable methods to slot defining methods \" (#5228) at dotnet/corert","RelatedBody":"Fixes the MonoGame NeonShooter sample.\r\n\r\nThe other commit fixes it in two more spots for good measure."},{"Id":"7070681295","Type":"IssuesEvent","CreatedAt":"2018-01-08T17:09:51","Actor":"tim241","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/issues/5227","RelatedDescription":"Opened issue \"[Arch Linux] Threading.sh: line 2: 30501 Segmentation fault\" (#5227) at dotnet/corert","RelatedBody":"Hello, when I execute `./build.sh` I get this output: https://gist.github.com/b1b34c57fa45197daf9a7fbcd47ed7ae\r\nI'm compiling ObjectWriter using [this](https://github.com/tim241/corert/tree/linux-fix) and [this](https://github.com/dotnet/corert/blob/master/Documentation/how-to-build-ObjectWriter.md)\r\nI'm using Arch Linux 64 bit and clang 5"},{"Id":"7070443242","Type":"IssuesEvent","CreatedAt":"2018-01-08T16:22:45","Actor":"tim241","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/issues/5224","RelatedDescription":"Closed issue \"[Arch Linux] DllNotFoundException: Unable to load DLL 'objwriter'\" (#5224) at dotnet/corert","RelatedBody":"Hello, when I execute `./build.sh` it gives me this error:\r\n``` Unhandled Exception: System.DllNotFoundException: Unable to load DLL 'objwriter': The specified module or one of its dependencies could not be found.```\r\nI'm using Arch Linux and applied this fix to corert to make it build ObjectWriter: https://github.com/tim241/corert/commit/f234467b1b263fd385a1614098cd4db82ee3e164\r\nfull output: [build.log](https://gist.github.com/9b0aba44d8cccd21275d985026301733)\r\nI'm using clang 5:\r\n`clang version 5.0.1 (tags/RELEASE_501/final)`\r\nand use\r\n`export CppCompilerAndLinker=clang` before executing `./build.sh`"}],"ResultType":"GitHubEvent"},"SDK":{"Events":[{"Id":"7072780003","Type":"PullRequestEvent","CreatedAt":"2018-01-09T02:43:02","Actor":"dasMulli","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/1848","RelatedDescription":"Opened pull request \"VB-specific DocumentationFile generation.\" (#1848) at dotnet/sdk","RelatedBody":"Fixes #1598\r\n\r\nVB targets already include `$(IntermediateOutputPath)`, so don't add it for `GenerateDocumentationFile`."},{"Id":"7071648808","Type":"IssuesEvent","CreatedAt":"2018-01-08T20:53:30","Actor":"steveharter","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/issues/1847","RelatedDescription":"Opened issue \"Add additional metadata to support \"framework wins over app\" with package conflict\" (#1847) at dotnet/sdk","RelatedBody":"Placeholder for 2.1 SDK work to support the core-setup feature https://github.com/dotnet/core-setup/issues/3546 (if we decide to do that for 2.1)\r\n\r\nThis feature adds new metadata to the framework's deps.json to include the fine-grain package versions so we compare against the app's deps.json fine-grain package versions (which already exist in that format). Currently the framework's deps.json does not contain the fine-grain \\ individual assembly package versions; it only contains the metapackage information.\r\n\r\n@nguerrera \r\n"},{"Id":"7071046963","Type":"PullRequestEvent","CreatedAt":"2018-01-08T18:31:52","Actor":"VSadov","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/1845","RelatedDescription":"Merged pull request \"Merge release/2.1 to master\" (#1845) at dotnet/sdk","RelatedBody":"\nThis is an automatically generated pull request from release/2.1 into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1-to-master-20180108-080042\ngit reset --hard upstream/master\ngit merge upstream/release/2.1\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.1-to-master-20180108-080042 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"7069597597","Type":"IssuesEvent","CreatedAt":"2018-01-08T13:31:35","Actor":"matkoch","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/issues/1846","RelatedDescription":"Opened issue \"Calling publish for two TFM fails with 2.1\" (#1846) at dotnet/sdk","RelatedBody":"I guess when I've updated VisualStudio to 15.3, it also installed SDK 2.1. In any case, the two calls:\r\n\r\n```\r\nC:\\...\\dotnet.exe publish C:\\...\\My.csproj --configuration Debug --framework netstandard2.0\r\nC:\\...\\dotnet.exe publish C:\\...\\My.csproj --configuration Debug --framework net461\r\n```\r\n\r\nPreviously worked without any issues. The project was published for both frameworks correctly (MSBuild task library). But now, I get:\r\n\r\n>  error CS0433: The type 'SerializableAttribute' exists in both 'System.Runtime.Serialization.Formatters, Version=4.0.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a' and 'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'\r\nerror CS0433: The type 'NonSerializedAttribute' exists in both 'System.Runtime.Serialization.Formatters, Version=4.0.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a' and 'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'\r\n\r\nI guess this is because of some dependency issues. When I'm cleaning the `obj` folder, I can correctly publish for `net461` again.\r\n\r\nAdding `--force` doesn't solve anything. This is the most surprising thing actually. \r\n"},{"Id":"7068370198","Type":"PullRequestEvent","CreatedAt":"2018-01-08T08:00:44","Actor":"dotnet-bot","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/1845","RelatedDescription":"Opened pull request \"Merge release/2.1 to master\" (#1845) at dotnet/sdk","RelatedBody":"\nThis is an automatically generated pull request from release/2.1 into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1-to-master-20180108-080042\ngit reset --hard upstream/master\ngit merge upstream/release/2.1\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.1-to-master-20180108-080042 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"7065986791","Type":"PullRequestEvent","CreatedAt":"2018-01-07T04:02:28","Actor":"peterhuene","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/1844","RelatedDescription":"Merged pull request \"Fixing the generation of binding redirects when targeting 4.7.1\" (#1844) at dotnet/sdk","RelatedBody":"@dotnet/dotnet-cli "}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"948916811034234881","CreatedAt":"2018-01-04T13:59:32+00:00","UserScreenname":"dotnet","Text":"At 10am ET, join our Jeff Fritz (@csharpfritz) for LIVE CODING and he'll answer your questions and .NET, ASPNet, an… https://t.co/CCz9Kdyzk7","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":16,"FavoriteCount":10,"RawContent":null},{"Id":"944564608391577600","CreatedAt":"2017-12-23T13:45:26+00:00","UserScreenname":"dotnet","Text":"Join our Jeff Fritz - @csharpfritz and MVP @IrisClasson in about an hour for LIVE CODING and pair programming on… https://t.co/kicrnl8tNJ","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":23,"FavoriteCount":11,"RawContent":null},{"Id":"943234846079496192","CreatedAt":"2017-12-19T21:41:26+00:00","UserScreenname":"dotnet","Text":"Join our Jeff Fritz (@csharpfritz) in a little more than 2 hours for LIVE CODING. He's working on an @aspnet Core p… https://t.co/Xm2utapspg","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":34,"FavoriteCount":15,"RawContent":null}]}},"RunOn":"2018-01-09T05:30:22.7160666Z","RunDurationInMilliseconds":8171}