{"Data":{"Blog":{"FeedItems":[{"Title":"Announcing .NET Framework 4.8 Early Access Build 3707","PublishedOn":"2018-12-15T02:11:55+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"We have another early access build to share today! This release includes several accessibility, performance, reliability and stability fixes across the major framework libraries. We will continue to...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/12/14/announcing-net-framework-4-8-early-access-build-3707/","RawContent":null},{"Title":"Visual Studio 2019 Preview .NET Productivity","PublishedOn":"2018-12-14T00:13:41+00:00","CommentsCount":16,"FacebookCount":0,"Summary":"As you hopefully heard, the first preview of Visual Studio 2019 is now available. In this post I’ll cover some of the productivity improvements for .NET developers we’re most excited about. For a...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/12/13/visual-studio-2019-net-productivity/","RawContent":null},{"Title":".NET Framework December 2018 Security and Quality Rollup","PublishedOn":"2018-12-11T18:23:48+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"Today, we are releasing the December 2018 Security and Quality Rollup. Security CVE-2018-8540 – Windows Remote Code Execution Vulnerability This security update resolves a vulnerability in Microsoft...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/12/11/net-framework-december-2018-security-and-quality-rollup/","RawContent":null},{"Title":"Open Sourcing XAML Behaviors for WPF","PublishedOn":"2018-12-10T19:27:32+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"Today, we are excited to announce that we are open sourcing XAML Behaviors for WPF. In the past, we open sourced XAML Behaviors for UWP which has been a great success and the Behaviors NuGet package...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/12/10/open-sourcing-xaml-behaviors-for-wpf/","RawContent":null},{"Title":"Take C# 8.0 for a spin","PublishedOn":"2018-12-05T23:51:33+00:00","CommentsCount":79,"FacebookCount":0,"Summary":"Take C# 8.0 for a spin Yesterday we announced the first preview of both Visual Studio 2019 (Making every developer more productive with Visual Studio 2019) and .NET Core 3.0 (Announcing .NET Core 3...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/12/05/take-c-8-0-for-a-spin/","RawContent":null},{"Title":".NET Framework December 5, 2018 Preview of Cumulative Update for Windows 10 version 1809 and Windows Server 2019","PublishedOn":"2018-12-05T22:00:42+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"Today, we are releasing the December 5, 2018 Preview of .NET Framework Cumulative Update for Windows 10 version 1809 and Windows Server 2019. For more information about the new Cumulative Updates for...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/12/05/net-framework-december-4-2018-preview-of-cumulative-update-for-windows-10-version-1809-and-windows-server-2019/","RawContent":null},{"Title":"Announcing .NET Core 3 Preview 1 and Open Sourcing Windows Desktop Frameworks","PublishedOn":"2018-12-04T16:41:34+00:00","CommentsCount":80,"FacebookCount":0,"Summary":"Today, we are announcing .NET Core 3 Preview 1. It is the first public release of .NET Core 3. We have some exciting new features to share and would love your feedback. You can develop .NET Core 3...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/12/04/announcing-net-core-3-preview-1-and-open-sourcing-windows-desktop-frameworks/","RawContent":null},{"Title":"Announcing .NET Core 2.2","PublishedOn":"2018-12-04T16:36:50+00:00","CommentsCount":30,"FacebookCount":0,"Summary":"We’re excited to announce the release of .NET Core 2.2. It includes diagnostic improvements to the runtime, support for ARM32 for Windows and Azure Active Directory for SQL Client. The biggest...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/12/04/announcing-net-core-2-2/","RawContent":null},{"Title":"Announcing Entity Framework Core 2.2","PublishedOn":"2018-12-04T16:30:21+00:00","CommentsCount":17,"FacebookCount":0,"Summary":"Today we&#8217;re making the final version of EF Core 2.2 available, alongside ASP.NET Core 2.2 and .NET Core 2.2. This is the latest release of our open-source and cross-platform object-database...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/12/04/announcing-entity-framework-core-2-2/","RawContent":null},{"Title":"Announcing ML.NET 0.8 – Machine Learning for .NET","PublishedOn":"2018-12-04T16:00:11+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"ML.NET is an open-source and cross-platform framework (Windows, Linux, macOS) which makes machine learning accessible for .NET developers. ML.NET allows you to create and use machine learning models...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/12/04/announcing-ml-net-0-8-machine-learning-for-net/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"8760892630","Type":"IssuesEvent","CreatedAt":"2018-12-16T11:57:54","Actor":"manne","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/issues/126","RelatedDescription":"Opened issue \"No logo provided for Prism\" (#126) at dotnet/foundation","RelatedBody":"Can/should this [image](http://prismlibrary.github.io/images/logo-prism-symbol@2x.png) be used?\r\n\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L155-L157"},{"Id":"8760886115","Type":"IssuesEvent","CreatedAt":"2018-12-16T11:53:31","Actor":"manne","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/issues/125","RelatedDescription":"Opened issue \"Missing logo for MVVM Light Toolkit\" (#125) at dotnet/foundation","RelatedBody":"`https://raw.githubusercontent.com/paulcbetts/mvvmlight/master/Installer/InstallItems/html/MVVM_BlackText_190x147.png` results in a 404.\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L137-L139"},{"Id":"8760884091","Type":"IssuesEvent","CreatedAt":"2018-12-16T11:52:07","Actor":"manne","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/issues/124","RelatedDescription":"Opened issue \"Missing logo for Umbraco\" (#124) at dotnet/foundation","RelatedBody":"`https://fbcdn-profile-a.akamaihd.net/hprofile-ak-xap1/v/t1.0-1/p160x160/971596_519168901464439_566592989_n.png?oh=ce61e5b4cbd60c0d99c4164cbb05a434&oe=54F091C9&__gda__=1424472439_c9f76213a915bc2af88246f464f29e8b` results in a 404.\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L149-L151"},{"Id":"8760881728","Type":"IssuesEvent","CreatedAt":"2018-12-16T11:50:29","Actor":"manne","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/issues/123","RelatedDescription":"Opened issue \"Missing logo for Steeltoe\" (#123) at dotnet/foundation","RelatedBody":"`https://brandfolder.com/pivotal-assets/attachments/ohxttd-7yxa60-clvf50/pivotal-assets-pivotal-genericfile.png` redirects to a sign in page\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L128-L130"},{"Id":"8760867764","Type":"PullRequestEvent","CreatedAt":"2018-12-16T11:40:46","Actor":"manne","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/122","RelatedDescription":"Opened pull request \"targets the existing document\" (#122) at dotnet/foundation","RelatedBody":""},{"Id":"8650911785","Type":"PullRequestEvent","CreatedAt":"2018-11-27T00:35:00","Actor":"JamesNK","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/121","RelatedDescription":"Opened pull request \"Add Newtonsoft.Json\" (#121) at dotnet/foundation","RelatedBody":"// @jongalloway "},{"Id":"8645831625","Type":"PullRequestEvent","CreatedAt":"2018-11-26T09:33:50","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/120","RelatedDescription":"Merged pull request \"Added Telerik info\" (#120) at dotnet/foundation","RelatedBody":""},{"Id":"8645829054","Type":"PullRequestEvent","CreatedAt":"2018-11-26T09:33:23","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/119","RelatedDescription":"Merged pull request \"Added Telerik UWP proj\" (#119) at dotnet/foundation","RelatedBody":""},{"Id":"8645355358","Type":"PullRequestEvent","CreatedAt":"2018-11-26T07:59:20","Actor":"stefanov-stefan","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/120","RelatedDescription":"Opened pull request \"Added Telerik info\" (#120) at dotnet/foundation","RelatedBody":""},{"Id":"8645349176","Type":"PullRequestEvent","CreatedAt":"2018-11-26T07:57:50","Actor":"stefanov-stefan","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/119","RelatedDescription":"Opened pull request \"Added Telerik UWP proj\" (#119) at dotnet/foundation","RelatedBody":""},{"Id":"8637227393","Type":"PullRequestEvent","CreatedAt":"2018-11-23T10:32:15","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/118","RelatedDescription":"Merged pull request \"Update WorldWide Telescope\" (#118) at dotnet/foundation","RelatedBody":"Some layout fixes, but the main change is that @pkgw is now the project director."},{"Id":"8637225303","Type":"PullRequestEvent","CreatedAt":"2018-11-23T10:31:49","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/117","RelatedDescription":"Merged pull request \"Update identityserver.md\" (#117) at dotnet/foundation","RelatedBody":"significant whitespace"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"8752496804","Type":"IssuesEvent","CreatedAt":"2018-12-14T03:22:59","Actor":"1015450578","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/93","RelatedDescription":"Closed issue \"Docker image with tag '2.2-aspnetcore-runtime' is not compatible\" (#93) at dotnet/announcements","RelatedBody":"1. Install  .NET Core 2.2.100 sdk\r\n2. Create a new 'AspNetCore Web Api' by using Visual Studio 2017,and enbale docker support.\r\n3. F5 ,the Output Windows shows:\r\n>It was not possible to find any compatible framework version\r\n>The specified framework 'Microsoft.AspNetCore.App', version '2.2.0' was not found.\r\n>  - Check application dependencies and target a framework version installed at:\r\n>      /usr/share/dotnet/\r\n>  - Installing .NET Core prerequisites might help resolve this problem:\r\n>     http://go.microsoft.com/fwlink/?LinkID=798306&clcid=0x409\r\n>  - The .NET Core framework and SDK can be installed from:\r\n>      https://aka.ms/dotnet-download\r\n>  - The following versions are installed:\r\n>      2.2.0-preview3-35497 at [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]"},{"Id":"8752467326","Type":"IssuesEvent","CreatedAt":"2018-12-14T03:12:36","Actor":"1015450578","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/93","RelatedDescription":"Opened issue \"Docker image with tag '2.2-aspnetcore-runtime' is not compatible\" (#93) at dotnet/announcements","RelatedBody":"1. Install  .NET Core 2.2.100 sdk\r\n2. Create a new 'AspNetCore Web Api' by using Visual Studio 2017,and enbale docker support.\r\n3. F5 ,the Output Windows shows:\r\n>It was not possible to find any compatible framework version\r\n>The specified framework 'Microsoft.AspNetCore.App', version '2.2.0' was not found.\r\n>  - Check application dependencies and target a framework version installed at:\r\n>      /usr/share/dotnet/\r\n>  - Installing .NET Core prerequisites might help resolve this problem:\r\n>     http://go.microsoft.com/fwlink/?LinkID=798306&clcid=0x409\r\n>  - The .NET Core framework and SDK can be installed from:\r\n>      https://aka.ms/dotnet-download\r\n>  - The following versions are installed:\r\n>      2.2.0-preview3-35497 at [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]"},{"Id":"8741036679","Type":"IssuesEvent","CreatedAt":"2018-12-12T12:56:54","Actor":"bilalMlaik","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/92","RelatedDescription":"Closed issue \".net core Console\" (#92) at dotnet/announcements","RelatedBody":"I am running dot net core console app as web jobs and it is working perfectly in docker with docker compose. Now the issue is I want to pass a value to the application via Console.ReadLine() over this value i make some decision but i am unable to pass value via Console.ReadLine(). How i can do it please help me. For more understanding, i have added my docker compose file below\r\n`version: '3.4'\r\n\r\nservices:\r\n  \r\n  tt.core.web:\r\n    image: ${DOCKER_REGISTRY-}ttcoreweb\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.Web/Dockerfile\r\n    depends_on:\r\n     - db\r\n    networks:\r\n     - app-network\r\n\r\n  tt.core.downtime.webjob:\r\n    image: ${DOCKER_REGISTRY-}ttcoredowntimewebjob\r\n    environment:\r\n      CORE_ENVIRONMENT: devdocker\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.Downtime.Webjob/Dockerfile\r\n    depends_on:\r\n     - db\r\n     - tt.core.web\r\n    networks:\r\n     - app-network\r\n\r\n  db:\r\n    image: microsoft/mssql-server-linux\r\n    container_name: db\r\n    environment:\r\n      SA_PASSWORD: \"Thingtrax%1\"\r\n      ACCEPT_EULA: \"Y\"\r\n      MSSQL_PID: Express\r\n    ports:\r\n      - \"7002:1433\"\r\n    networks:\r\n      app-network:\r\n        ipv4_address: 172.24.0.2\r\n\r\nnetworks:\r\n  app-network:\r\n    ipam:\r\n      driver: default\r\n      config:\r\n        - subnet: 172.24.0.0/16\r\n\r\n`\r\nIf the detail is not enough or you do not get my point, you can share your confusion in comment"},{"Id":"8740711774","Type":"IssuesEvent","CreatedAt":"2018-12-12T11:57:02","Actor":"bilalMlaik","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/92","RelatedDescription":"Opened issue \".net core Console\" (#92) at dotnet/announcements","RelatedBody":"This repo doesn't accept issues. Please see README.md in the root for more details.\r\nI am running dot net core console app as web jobs and it is working perfectly in docker with docker compose. Now the issue is I want to pass a value to the application via Console.ReadLine() over this value i make some decision but i am unable to pass value via Console.ReadLine(). How i can do it please help me. For more understanding, i have added my docker compose file below\r\n`version: '3.4'\r\n\r\nservices:\r\n  \r\n  tt.core.web:\r\n    image: ${DOCKER_REGISTRY-}ttcoreweb\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.Web/Dockerfile\r\n    depends_on:\r\n     - db\r\n     - redis\r\n    networks:\r\n     - app-network\r\n\r\n  tt.core.downtime.webjob:\r\n    image: ${DOCKER_REGISTRY-}ttcoredowntimewebjob\r\n    environment:\r\n      CORE_ENVIRONMENT: devdocker\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.Downtime.Webjob/Dockerfile\r\n    depends_on:\r\n     - db\r\n     - tt.core.web\r\n     - redis\r\n    networks:\r\n     - app-network\r\n\r\n  tt.core.iothub.simulator:\r\n    image: ${DOCKER_REGISTRY-}ttcoreiothubsimulator\r\n    environment:\r\n      CORE_ENVIRONMENT: devdocker\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.IotHub.Simulator/Dockerfile\r\n    depends_on:\r\n     - db\r\n     - tt.core.web\r\n     - mqtt\r\n    networks:\r\n     - app-network\r\n\r\n  tt.core.labourtelemetry.webjob:\r\n    image: ${DOCKER_REGISTRY-}ttcorelabourtelemetrywebjob\r\n    environment:\r\n      CORE_ENVIRONMENT: devdocker\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.LabourTelemetry.WebJob/Dockerfile\r\n    depends_on:\r\n     - db\r\n     - tt.core.web\r\n     - redis\r\n    networks:\r\n     - app-network\r\n\r\n  tt.core.telemetry.webjob:\r\n    image: ${DOCKER_REGISTRY-}ttcoretelemetrywebjob\r\n    environment:\r\n      CORE_ENVIRONMENT: devdocker\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.Telemetry.WebJob/Dockerfile\r\n    depends_on:\r\n     - db\r\n     - tt.core.web\r\n     - mqtt\r\n     - redis\r\n    networks:\r\n     - app-network\r\n\r\n  redis:\r\n    image: redis\r\n    command: redis-server --appendonly yes\r\n    ports:\r\n      - '6379:6379'\r\n    volumes:\r\n      - ${APPDATA}/redis:/bitnami/redis/data\r\n    networks:\r\n      app-network:\r\n        ipv4_address: 172.24.0.16\r\n\r\n  mqtt:\r\n    image: eclipse-mosquitto\r\n    hostname: mqtt\r\n    container_name: mqtt\r\n    expose:\r\n      - \"1883\"\r\n      - \"9001\"\r\n    ports:\r\n      - \"1883:1883\"\r\n      - \"9001:9001\"\r\n    volumes:\r\n      - ${APPDATA}/mosquitto/mosquitto.conf:/mosquitto/config/mosquitto.conf\r\n    networks:\r\n      app-network:\r\n        ipv4_address: 172.24.0.8\r\n\r\n  db:\r\n    image: microsoft/mssql-server-linux\r\n    container_name: db\r\n    environment:\r\n      SA_PASSWORD: \"Thingtrax%1\"\r\n      ACCEPT_EULA: \"Y\"\r\n      MSSQL_PID: Express\r\n    ports:\r\n      - \"7002:1433\"\r\n    networks:\r\n      app-network:\r\n        ipv4_address: 172.24.0.2\r\n\r\nnetworks:\r\n  app-network:\r\n    ipam:\r\n      driver: default\r\n      config:\r\n        - subnet: 172.24.0.0/16\r\n\r\n`\r\n"},{"Id":"8582735181","Type":"IssuesEvent","CreatedAt":"2018-11-13T17:44:44","Actor":"leecow","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/91","RelatedDescription":"Opened issue \".NET Core November Update - 2.1.6 and SDK 2.1.500\" (#91) at dotnet/announcements","RelatedBody":"# November 2018 .NET Updates\r\n\r\nThe following .NET updates were released in November 2018. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Core\r\n\r\n* [.NET Core November 2018 (2.1.6 and SDK 2.1.500) Update release notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.6/2.1.6.md)\r\n\r\nA [discussion issue](https://github.com/dotnet/core/issues/2053) is available for questions or feedback about this release.\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n* [October 2018[(https://github.com/dotnet/announcements/issues/89)\r\n* [September 2018](https://github.com/dotnet/announcements/issues/84)\r\n* [August 2018](https://github.com/dotnet/announcements/issues/79)\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)"}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"8796240449","Type":"PullRequestEvent","CreatedAt":"2018-12-23T03:20:40","Actor":"danmosemsft","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/21653","RelatedDescription":"Merged pull request \"Extracts public IThreadPoolWorkItem interface to shared CoreLib\" (#21653) at dotnet/coreclr","RelatedBody":""},{"Id":"8796200010","Type":"PullRequestEvent","CreatedAt":"2018-12-23T02:36:34","Actor":"danmosemsft","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/21654","RelatedDescription":"Merged pull request \"Moves CoreLib to shared location\" (#21654) at dotnet/coreclr","RelatedBody":""},{"Id":"8795994690","Type":"PullRequestEvent","CreatedAt":"2018-12-22T22:56:14","Actor":"marek-safar","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/21654","RelatedDescription":"Opened pull request \"Moves CoreLib to shared location\" (#21654) at dotnet/coreclr","RelatedBody":""},{"Id":"8795862271","Type":"IssuesEvent","CreatedAt":"2018-12-22T21:12:40","Actor":"tmm360","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/21651","RelatedDescription":"Closed issue \"NullReferenceException invoking System.Collections.Generic.Dictionary`2.ContainsKey(TKey key)\" (#21651) at dotnet/coreclr","RelatedBody":"I'm using netcoreapp2.2, .Net Core SDK 2.2.100 (x64) for an Asp.Net Core application.\r\nThe exception is not raised every time.\r\n\r\n    System.NullReferenceException\r\n      HResult=0x80004003\r\n      Message=Object reference not set to an instance of an object.\r\n      Source=System.Private.CoreLib\r\n      StackTrace:\r\n       at System.Collections.Generic.Dictionary`2.FindEntry(TKey key)\r\n       at System.Collections.Generic.Dictionary`2.ContainsKey(TKey key)\r\n       at (... my project info ...)"}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"8795547252","Type":"IssuesEvent","CreatedAt":"2018-12-22T17:04:18","Actor":"DoCode","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/10506","RelatedDescription":"Opened issue \"[dotnet tools] Multiple commands/aliases\" (#10506) at dotnet/cli","RelatedBody":"How to create one or more aliases for a dotnet tool?\r\n\r\nIn the project file only the `ToolCommandName` is available:\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  ...\r\n  <PropertyGroup>\r\n    ...\r\n    <PackAsTool>true</PackAsTool>\r\n    <ToolCommandName>toolname</ToolCommandName>\r\n  ...\r\n  </PropertyGroup>\r\n  ...\r\n</Project>\r\n```\r\n\r\nExpected:\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  ...\r\n  <PropertyGroup>\r\n    ...\r\n    <PackAsTool>true</PackAsTool>\r\n    <ToolCommandNames>toolname;tn;another-alias</ToolCommandNames>\r\n  ...\r\n  </PropertyGroup>\r\n  ...\r\n</Project>\r\n```\r\n\r\nSo the tool can be executed as\r\n```batch\r\n> toolname\r\n> tn\r\n> another-alias\r\n```"},{"Id":"8795382234","Type":"IssuesEvent","CreatedAt":"2018-12-22T15:09:25","Actor":"TothZoltan2018","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/10505","RelatedDescription":"Opened issue \"Install the .NET SDK on Windows Subsystem Linux Ubuntu 18.04 - Reading package lists... Error!\" (#10505) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\nI try to install Install .NET SDK ([instruction here)](https://dotnet.microsoft.com/learn/dotnet/hello-world-tutorial#install) to WSL Ubuntu 18.04 ([instruction here](https://docs.microsoft.com/en-us/windows/wsl/install-win10)) ([package here](https://www.microsoft.com/hu-hu/p/ubuntu-1804-lts/9n9tngvndl3q?activetab=pivot%3Aoverviewtab))\r\n\r\n## Expected  behavior\r\nSuccessfull installation of .Net SDK on Ubuntu WSL\r\n\r\n## Actual behavior\r\n\r\nI could install Ubuntu but I can not install .NET SDK. It looks as if something is wrong with permissions althought the commands I copied from the tutirial use sudo... \r\n<pre>\r\ntothz@hp-PC:~/repos$ wget -q https://packages.microsoft.com/config/ubuntu/18.04/packages-microsoft-prod.deb\r\ntothz@hp-PC:~/repos$ sudo dpkg -i packages-microsoft-prod.deb\r\n[sudo] password for tothz:\r\n(Reading database ... 28498 files and directories currently installed.)\r\nPreparing to unpack packages-microsoft-prod.deb ...\r\nUnpacking packages-microsoft-prod (1.0-ubuntu18.04.1) over (1.0-ubuntu18.04.1) ...\r\nSetting up packages-microsoft-prod (1.0-ubuntu18.04.1) ...\r\ntothz@hp-PC:~/repos$ sudo add-apt-repository universe\r\n'universe' distribution component is already enabled for all sources.\r\ntothz@hp-PC:~/repos$ sudo apt-get install apt-transport-https\r\nReading package lists... Error!\r\nE: Problem renaming the file /var/cache/apt/srcpkgcache.bin.peXWA6 to /var/cache/apt/srcpkgcache.bin - rename (13: Permission denied)\r\nE: Could not open file /var/lib/dpkg/status - open (2: No such file or directory)\r\nE: Problem opening /var/lib/dpkg/status\r\nE: The package lists or status file could not be parsed or opened.\r\ntothz@hp-PC:~/repos$\r\n</pre>\r\n\r\nI got some tips such as:\r\n$ sudo rm -fr /var/cache/apt\r\n$ sudo mv /var/lib/dpkg/status /var/lib/dpkg/status-bak  #could fail if it doesn't exist\r\n$ sudo touch /var/lib/dpkg/status\r\n$ sudo apt clean\r\n$ sudo apt update && sudo apt upgrade\r\n$ # try again, probably starting with sudo apt install apt-transport-https,\r\n$ # if that's what you are after\r\n\r\nHowever, all in vain.\r\n\r\n## Environment data\r\n\r\nMy Windows bulid number is: \"Microsoft Windows [Version 10.0.17134.471]\"\r\n\r\n\r\n\r\n\r\n\r\n"},{"Id":"8795202883","Type":"PullRequestEvent","CreatedAt":"2018-12-22T13:02:48","Actor":"dotnet-maestro[bot]","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/10504","RelatedDescription":"Opened pull request \"Update dependency files\" (#10504) at dotnet/cli","RelatedBody":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/sdk\r\n\r\n- Microsoft.NET.Sdk - 3.0.100-preview.18621.1\r\n\r\n"},{"Id":"8795202780","Type":"PullRequestEvent","CreatedAt":"2018-12-22T13:02:43","Actor":"dotnet-maestro[bot]","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/10503","RelatedDescription":"Opened pull request \"Update dependency files\" (#10503) at dotnet/cli","RelatedBody":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18620.7\r\n\r\n"}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"8789022646","Type":"IssuesEvent","CreatedAt":"2018-12-21T01:08:30","Actor":"ViktorHofer","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/1036","RelatedDescription":"Closed issue \"Disable Jenkins\" (#1036) at dotnet/standard","RelatedBody":"We need to disable Jenkins so I doesn't get queued in a PR anymore and if not already done point mc.dot.net to the new Azure DevOps run. I also noticed that the last official build happened 12/3, maybe the cron job is not configured right?"},{"Id":"8788973753","Type":"PullRequestEvent","CreatedAt":"2018-12-21T00:51:27","Actor":"ViktorHofer","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/1040","RelatedDescription":"Opened pull request \"Remove the manual config system\" (#1040) at dotnet/standard","RelatedBody":"Fixes https://github.com/dotnet/standard/issues/1032"},{"Id":"8788925569","Type":"PullRequestEvent","CreatedAt":"2018-12-21T00:34:02","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/1039","RelatedDescription":"Opened pull request \"Fix representation of enum values\" (#1039) at dotnet/standard","RelatedBody":"We finally fixed the missing feature in our source emitter so that it now includes a human readable bitmask rather than the underlying value.\r\n\r\n**This doesn't change any API surface but makes diffs more human readable.**"},{"Id":"8787632649","Type":"PullRequestEvent","CreatedAt":"2018-12-20T19:19:31","Actor":"wtgodbe","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/1038","RelatedDescription":"Merged pull request \"Add APICompat run for NetStandard2.0\" (#1038) at dotnet/standard","RelatedBody":"Adds ApiCompat coverage for .netstandard2.0\r\n\r\n@ViktorHofer @terrajobst PTAL\r\n\r\nresolves https://github.com/dotnet/standard/issues/1029"},{"Id":"8787632638","Type":"IssuesEvent","CreatedAt":"2018-12-20T19:19:31","Actor":"wtgodbe","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/1029","RelatedDescription":"Closed issue \"Add ApiCompat run for netstandard2.0\" (#1029) at dotnet/standard","RelatedBody":"We should add an APICompat run that checks against 2.0, similar the ones we already have for 1.0-1.6: https://github.com/dotnet/standard/blob/master/apicompat/baselines/ApiCompatBaseline.netstandard1.6.txt"},{"Id":"8787518101","Type":"PullRequestEvent","CreatedAt":"2018-12-20T18:56:41","Actor":"wtgodbe","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/1038","RelatedDescription":"Opened pull request \"Add APICompat run for NetStandard2.0\" (#1038) at dotnet/standard","RelatedBody":"Adds ApiCompat coverage for .netstandard2.0\r\n\r\n@ViktorHofer @terrajobst PTAL\r\n\r\nresolves https://github.com/dotnet/standard/issues/1029"},{"Id":"8787275448","Type":"PullRequestEvent","CreatedAt":"2018-12-20T18:07:43","Actor":"ViktorHofer","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/1035","RelatedDescription":"Merged pull request \"Cleanup files after arcade switch & update baseline\" (#1035) at dotnet/standard","RelatedBody":"Cleaning up some leftovers and running the build once to regenerate the baseline files.\r\n\r\nOpened https://github.com/dotnet/standard/issues/1031 and https://github.com/dotnet/standard/issues/1032 which should also be done.\r\n\r\nFailing CI jobs are leftovers: https://github.com/dotnet/standard/issues/1036\r\n\r\ncc @danmosemsft "},{"Id":"8785123192","Type":"IssuesEvent","CreatedAt":"2018-12-20T11:58:03","Actor":"ViktorHofer","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/1037","RelatedDescription":"Opened issue \"Group source items into a src folder\" (#1037) at dotnet/standard","RelatedBody":"We should move\r\n- netstandard\r\n- platforms\r\n- apicompat\r\n- dir.traversal.targets\r\n- package.builds\r\n- src.builds\r\n\r\ninto a `src` folder to align with other dotnet repos.\r\n\r\ncc @wtgodbe @danmosemsft @terrajobst"},{"Id":"8785046328","Type":"IssuesEvent","CreatedAt":"2018-12-20T11:42:42","Actor":"ViktorHofer","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/1036","RelatedDescription":"Opened issue \"Disable Jenkins and update mc.dot.net\" (#1036) at dotnet/standard","RelatedBody":"We need to disable Jenkins so I doesn't get queued in a PR anymore and if not already done point mc.dot.net to the new Azure DevOps run. I also noticed that the last official build happened 12/3, maybe the cron job is not configured right?"},{"Id":"8784993210","Type":"PullRequestEvent","CreatedAt":"2018-12-20T11:31:57","Actor":"ViktorHofer","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/1035","RelatedDescription":"Opened pull request \"Cleanup files after arcade switch & update baseline\" (#1035) at dotnet/standard","RelatedBody":"Cleaning up some leftovers and running the build once to regenerate the baseline files.\r\n\r\nOpened https://github.com/dotnet/standard/issues/1031 and https://github.com/dotnet/standard/issues/1032 which should also be done.\r\n\r\ncc @danmosemsft "},{"Id":"8784990136","Type":"PullRequestEvent","CreatedAt":"2018-12-20T11:31:22","Actor":"ViktorHofer","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/pull/1034","RelatedDescription":"Closed pull request \"Cleanup files after arcade switch & update baseline\" (#1034) at dotnet/standard","RelatedBody":"Cleaning up some leftovers and running the build once to regenerate the baseline files.\r\n\r\nOpened https://github.com/dotnet/standard/issues/1031 and https://github.com/dotnet/standard/issues/1032 which should also be done.\r\n\r\ncc @danmosemsft "},{"Id":"8784979730","Type":"PullRequestEvent","CreatedAt":"2018-12-20T11:29:18","Actor":"ViktorHofer","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/standard/pull/1034","RelatedDescription":null,"RelatedBody":"Cleaning up some leftovers and running the build once to regenerate the baseline files.\r\n\r\nOpened https://github.com/dotnet/standard/issues/1031 and https://github.com/dotnet/standard/issues/1032 which should also be done.\r\n\r\ncc @danmosemsft "},{"Id":"8784979325","Type":"PullRequestEvent","CreatedAt":"2018-12-20T11:29:14","Actor":"ViktorHofer","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/pull/1034","RelatedDescription":"Closed pull request \"Cleanup files after arcade switch & update baseline\" (#1034) at dotnet/standard","RelatedBody":"Cleaning up some leftovers and running the build once to regenerate the baseline files.\r\n\r\nOpened https://github.com/dotnet/standard/issues/1031 and https://github.com/dotnet/standard/issues/1032 which should also be done.\r\n\r\ncc @danmosemsft "},{"Id":"8784935870","Type":"PullRequestEvent","CreatedAt":"2018-12-20T11:20:50","Actor":"ViktorHofer","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/1034","RelatedDescription":"Opened pull request \"Cleanup files after arcade switch & update baseline\" (#1034) at dotnet/standard","RelatedBody":"Cleaning up some leftovers and running the build once to regenerate the baseline files.\r\n\r\ncc @danmosemsft "}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"8796318886","Type":"IssuesEvent","CreatedAt":"2018-12-23T04:47:29","Actor":"AaronRobinsonMSFT","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/32960","RelatedDescription":"Closed issue \"COMImport in .NETCore\" (#32960) at dotnet/corefx","RelatedBody":"What is the plan for supporting COM import in .NETCore?\r\n\r\nCurrently we support all the attributes necessary for the COM interop scenario and it seems to work at runtime, but not the tools.\r\n\r\nHere's what I've found:\r\n1. TypeLibConverter type is not implemented/exposed.\r\n2. TLBImp does not have a .NETCore version (though you can use the deskstop generated assemblies in .NETCore, or even disassemble those and reassemble on .NETCore).\r\n3. ResolveComReference doesn't work on .NETCore when building with `dotnet.exe` but does work when building with `msbuild.exe`: \r\n- `error MSB4062: The \"Microsoft.Build.Tasks.ResolveComReference\" task could not be loaded from the assembly Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a.  Confirm that the <UsingTask> declaration is correct, that the assembly and all its dependencies are available, and that the task contains a public class that implements Microsoft.Build.Framework.ITask.`\r\n4. Add COM Reference from the IDE doesn't show up when project is targeting 'netcoreapp'.\r\n\r\nI've seen a handful of folks hit 1 & 2 so far and are working around it by hacking up a build process with the desktop tools, but we could do better.\r\n\r\n/cc @jeffschwMSFT "},{"Id":"8796250077","Type":"PullRequestEvent","CreatedAt":"2018-12-23T03:30:46","Actor":"danmosemsft","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/pull/34123","RelatedDescription":"Closed pull request \"Make optimization in GetHashCode function\" (#34123) at dotnet/corefx","RelatedBody":""},{"Id":"8795965021","Type":"PullRequestEvent","CreatedAt":"2018-12-22T22:27:56","Actor":"jlennox","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/34224","RelatedDescription":"Opened pull request \"dotnet/corefx#34200 Bring `XmlRawTextWriterGenerator.cxx` up to date.\" (#34224) at dotnet/corefx","RelatedBody":"@krwq Here is one part of the work. I do really believe that this could be done without the use of a preprocessor without sacrificing speed using a generic base class. Should I experiment with that?\r\n\r\nSomething which caught me off guard is this line: https://github.com/dotnet/corefx/blob/fdec34a223b4a3676a781239748776e9332bee43/src/System.Private.Xml/src/System/Xml/Core/XmlRawTextWriterGenerator.cxx#L426\r\n\r\nIn the existing .cxx there's no #if around it, but I had to add it to keep the file generation consistent with present logic. I could not find why it was removed in the git history. Any ideas?"},{"Id":"8795861433","Type":"IssuesEvent","CreatedAt":"2018-12-22T21:11:58","Actor":"lyzerk","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/34223","RelatedDescription":"Opened issue \"HttpClient.SendAync freezing\" (#34223) at dotnet/corefx","RelatedBody":"Hello,\r\n\r\nThis week I was preparing to publish a one of the my side projects, which I called it as \"[DDown](https://github.com/lyzerk/DDown)\". It is a downloader API for .net standard 2.0. I'm working on the project almost a year. 3-4 months before everything was working perfect, API was dividing the file to the partitions, the CLI shows a percentage bar and so on. So, this week I wanted to publish the project and I have published it. I was sure everything was working perfectly in side of the API because I wasn't touched anything on the API. On the other hand, the missing part was cli commands and options. So, I have done those things and I published it under name \"deget\" as global dotnet tool. \r\n\r\nThe first problem was, the cli UI was blocked for a minute then partitions are completed without the update cli UI and all done (%100). So, I debugged the code  and the problem was _client.SendAsync method returns response in almost a minute. You can see the code with following address.\r\n\r\n[https://github.com/lyzerk/DDown/blob/master/src/DDown/Downloader.cs#L167](https://github.com/lyzerk/DDown/blob/master/src/DDown/Downloader.cs#L167)\r\n\r\nWhat have I tried ?\r\n- I have tried different sources.\r\n- I have tried the tool on different operating systems (osx and win).\r\n- I have debugged the code and SendAsync method was returning in a minute. (With 200 MB, but with lower file sizes the time decreases.)\r\n- I have watch the network traffic and the tool downloads the file but it does not give back anything and suddenly the download completes. (Not even breakpoints)\r\n- The CLI project was .netcoreapp 2.0 and I have upgraded it to 2.1. I have rollbacked to 2.0 and tried again but still same.\r\n\r\nCLI code of the project :\r\n[https://github.com/lyzerk/DDown/blob/master/src/DDown.CLI/Program.cs](https://github.com/lyzerk/DDown/blob/master/src/DDown.CLI/Program.cs)\r\n\r\nI couldn't find a solution, and I don't know what to do right now. Is it a bug or am I missing something ?\r\n\r\nThanks,\r\nAlim \r\n"},{"Id":"8795783043","Type":"PullRequestEvent","CreatedAt":"2018-12-22T20:06:19","Actor":"jkotas","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/34222","RelatedDescription":"Merged pull request \"Use HMAC_CTX_free() instead of free() on a HMAC_CTX*\" (#34222) at dotnet/corefx","RelatedBody":"This is a leftover from before the OpenSSL 1.0/1.1 hybridization. There\r\nwas no HMAC_CTX_free() in 1.0.\r\n\r\nFixes #34210\r\n\r\ncc @bartonjs @stephentoub "},{"Id":"8795783040","Type":"IssuesEvent","CreatedAt":"2018-12-22T20:06:19","Actor":"jkotas","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/34210","RelatedDescription":"Closed issue \"free() vs HMAC_CTX_free() on a HMAC_CTX\" (#34210) at dotnet/corefx","RelatedBody":"This might be a stupid question. I am not an OpenSSL expert. I found a `free(ctx)` call that looks a bit surprising to me.\r\n\r\nhttps://github.com/dotnet/corefx/blob/646a539c8654000ae014085abbaf8167d811a827/src/Native/Unix/System.Security.Cryptography.Native/pal_hmac.c#L34\r\n\r\nShouldn't this be a `HMAC_CTX_free(ctx)` instead?"},{"Id":"8795660189","Type":"PullRequestEvent","CreatedAt":"2018-12-22T18:28:48","Actor":"omajid","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/34222","RelatedDescription":"Opened pull request \"Use HMAC_CTX_free() instead of free() on a HMAC_CTX*\" (#34222) at dotnet/corefx","RelatedBody":"This is a leftover from before the OpenSSL 1.0/1.1 hybridization. There\r\nwas no HMAC_CTX_free() in 1.0.\r\n\r\nFixes #34210\r\n\r\ncc @bartonjs @stephentoub "}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"8796120699","Type":"PullRequestEvent","CreatedAt":"2018-12-23T01:07:29","Actor":"KirillOsenkov","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/32005","RelatedDescription":"Opened pull request \"Use NullXmlDocumentationProvider when XML file doesn't exist.\" (#32005) at dotnet/roslyn","RelatedBody":"For each reference that doesn't have an .XML doc file we allocate and cache a FileBasedXmlDocumentationProvider that throws a first-chance exception upon first use.\r\n\r\nAdd and use a singleton NullXmlDocumentationProvider instead when the requested .XML doc file doesn't exist."},{"Id":"8796113756","Type":"PullRequestEvent","CreatedAt":"2018-12-23T01:00:08","Actor":"dotnet-automerge-bot","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/32003","RelatedDescription":"Merged pull request \"Merge master to master-vs-deps\" (#32003) at dotnet/roslyn","RelatedBody":"\nThis is an automatically generated pull request from master into master-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-master-vs-deps\ngit reset --hard upstream/master-vs-deps\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push merges/master-to-master-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"8796113683","Type":"PullRequestEvent","CreatedAt":"2018-12-23T01:00:04","Actor":"dotnet-automerge-bot","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/32004","RelatedDescription":"Merged pull request \"Merge master to features/editorconfig-in-compiler\" (#32004) at dotnet/roslyn","RelatedBody":"\nThis is an automatically generated pull request from master into features/editorconfig-in-compiler.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-features/editorconfig-in-compiler\ngit reset --hard upstream/features/editorconfig-in-compiler\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push merges/master-to-features/editorconfig-in-compiler --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"8796058626","Type":"PullRequestEvent","CreatedAt":"2018-12-23T00:00:30","Actor":"dotnet-bot","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/32004","RelatedDescription":"Opened pull request \"Merge master to features/editorconfig-in-compiler\" (#32004) at dotnet/roslyn","RelatedBody":"\nThis is an automatically generated pull request from master into features/editorconfig-in-compiler.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-features/editorconfig-in-compiler\ngit reset --hard upstream/features/editorconfig-in-compiler\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push merges/master-to-features/editorconfig-in-compiler --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"8796058538","Type":"PullRequestEvent","CreatedAt":"2018-12-23T00:00:26","Actor":"dotnet-bot","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/32003","RelatedDescription":"Opened pull request \"Merge master to master-vs-deps\" (#32003) at dotnet/roslyn","RelatedBody":"\nThis is an automatically generated pull request from master into master-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-master-vs-deps\ngit reset --hard upstream/master-vs-deps\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push merges/master-to-master-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"8796201484","Type":"PullRequestEvent","CreatedAt":"2018-12-23T02:38:21","Actor":"Dotnet-GitSync-Bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/6715","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#6715) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"8796150035","Type":"IssuesEvent","CreatedAt":"2018-12-23T01:39:57","Actor":"yinyue200","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/issues/6714","RelatedDescription":"Opened issue \"ILT0005 compile error\" (#6714) at dotnet/corert","RelatedBody":"#### Bug description\r\nCan't compile by .Net Native\r\n\r\n#### Repro steps\r\nBuild the repo in RELEASE Mode https://github.com/yinyue200/vsthreadingwithnetnative\r\n\r\n#### Expected behavior\r\nbuild success\r\n\r\n#### Actual behavior\r\n1>  Processing application code\r\n1>  Computing application closure and generating interop code\r\n1>    Loading 91 modules...\r\n1>    Generating code...\r\n1>    Interop code generated.\r\n1>  Compiling interop code\r\n1>  Generating System.Reflection.DispatchProxy proxy code.\r\n1>  Cleaning up unreferenced code\r\n1>  Generating native code\r\n1>C:\\Users\\username\\.nuget\\packages\\microsoft.net.native.compiler\\2.1.8\\tools\\Microsoft.NetNative.targets(788,5): error : ILT0005: 'C:\\Users\\username\\.nuget\\packages\\runtime.win10-x86.microsoft.net.native.compiler\\2.1.8\\tools\\x86\\ilc\\Tools\\nutc_driver.exe @\"C:\\Users\\username\\Source\\Repos\\App1\\App1\\obj\\x86\\Release\\ilc\\intermediate\\MDIL\\App1.rsp\"' returned exit code -2147483645\r\n\r\n#### Additional context\r\nsee https://github.com/Microsoft/vs-threading/issues/446"},{"Id":"8795958761","Type":"PullRequestEvent","CreatedAt":"2018-12-22T22:22:22","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/6713","RelatedDescription":"Opened pull request \"Fix ProjectN regression in `ByReference<T>`\" (#6713) at dotnet/corert","RelatedBody":"Making the field `initonly` breaks the contract with the codegen."},{"Id":"8795941729","Type":"PullRequestEvent","CreatedAt":"2018-12-22T22:07:38","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/6712","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#6712) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @benaadams"},{"Id":"8795789047","Type":"PullRequestEvent","CreatedAt":"2018-12-22T20:11:31","Actor":"Dotnet-GitSync-Bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/6712","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#6712) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"8795767599","Type":"PullRequestEvent","CreatedAt":"2018-12-22T19:53:31","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/6711","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#6711) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @jkotas"},{"Id":"8795625599","Type":"PullRequestEvent","CreatedAt":"2018-12-22T18:02:11","Actor":"Dotnet-GitSync-Bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/6711","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#6711) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"8794743548","Type":"PullRequestEvent","CreatedAt":"2018-12-22T06:49:22","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/6706","RelatedDescription":"Merged pull request \"Synchronize Task and Awaiter implementation with CoreCLR\" (#6706) at dotnet/corert","RelatedBody":"Synchronized the code as much as possible with CoreCLR to prepare it for move to shared partition. The one major piece that I have excluded is tracing. I will look into doing that separately."},{"Id":"8794646910","Type":"PullRequestEvent","CreatedAt":"2018-12-22T05:22:03","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/6710","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr,corefx\" (#6710) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr,corefx\n\n\n**Please REBASE this PR when merging**\n\n cc @marek-safar @jkotas"},{"Id":"8794524586","Type":"PullRequestEvent","CreatedAt":"2018-12-22T03:29:24","Actor":"Dotnet-GitSync-Bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/6710","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr,corefx\" (#6710) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr,corefx\n\n\n**Please REBASE this PR when merging**"},{"Id":"8794522838","Type":"PullRequestEvent","CreatedAt":"2018-12-22T03:27:55","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/6709","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#6709) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @fiigii @fiigii @marek-safar @tannergooding @danmosemsft"},{"Id":"8794351175","Type":"PullRequestEvent","CreatedAt":"2018-12-22T01:16:09","Actor":"Dotnet-GitSync-Bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/6709","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#6709) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"8794345863","Type":"PullRequestEvent","CreatedAt":"2018-12-22T01:12:44","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/corert/pull/6706","RelatedDescription":null,"RelatedBody":"Synchronized the code as much as possible with CoreCLR to prepare it for move to shared partition. The one major piece that I have excluded is tracing. I will look into doing that separately."},{"Id":"8794345818","Type":"PullRequestEvent","CreatedAt":"2018-12-22T01:12:43","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/pull/6706","RelatedDescription":"Closed pull request \"Synchronize Task and Awaiter implementation with CoreCLR\" (#6706) at dotnet/corert","RelatedBody":"Synchronized the code as much as possible with CoreCLR to prepare it for move to shared partition. The one major piece that I have excluded is tracing. I will look into doing that separately."},{"Id":"8793417036","Type":"PullRequestEvent","CreatedAt":"2018-12-21T19:50:11","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/6708","RelatedDescription":"Merged pull request \"Fix bug: [ILVerify] Class implements interface but not method\" (#6708) at dotnet/corert","RelatedBody":"fixes https://github.com/dotnet/corert/issues/6707\r\n\r\nReplaced with correct helper that scan the type and its base types for an implementation of an interface method https://github.com/dotnet/corert/blob/master/src/Common/src/TypeSystem/Common/TypeSystemHelpers.cs#L352\r\n\r\n/cc @jkotas @MichalStrehovsky "},{"Id":"8793417020","Type":"IssuesEvent","CreatedAt":"2018-12-21T19:50:11","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/issues/6707","RelatedDescription":"Closed issue \"[ILVerify] Class implements interface but not method\" (#6707) at dotnet/corert","RelatedBody":"Trying to verify the following code.\r\n\r\n```\r\n    public interface IMyInterface : IEnumerable\r\n    {\r\n        bool GetTypedData();\r\n    }\r\n\r\n    public class Class1 : List<object>, IMyInterface\r\n    {\r\n        public bool GetTypedData()\r\n        {\r\n            return false;\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nILVerify claims that the class does not implement the GetEnumerator method (which is implemented by the base class).\r\n\r\n```\r\n[MD]: Error: Class implements interface but not method, Class: '[ClassLibrary2]ClassLibrary2.Class1' Interface: '[mscorlib]System.Collections.IEnumerable' Method: [mscorlib]System.Collections.IEnumerable.GetEnumerator().\r\n```\r\n"},{"Id":"8793273418","Type":"IssuesEvent","CreatedAt":"2018-12-21T19:16:25","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/issues/6703","RelatedDescription":"Closed issue \"Provide an FFI example\" (#6703) at dotnet/corert","RelatedBody":"Hello,\r\n\r\nI am trying to share functionality across technology boundaries and I prefer to use .NET Core as the place to build the functionality. My plan is to use FFI (Foreign function interface) as a way to expose the functionality in the .net library. Could someone provide a working example of a project that does this?  :)\r\n\r\nI've followed a few blog articles online and though I can create a native exe and run it, I can't seem to use it through FFI.  Any help is appreciated! "}],"ResultType":"GitHubEvent"},"SDK":{"Events":[{"Id":"8795200843","Type":"PullRequestEvent","CreatedAt":"2018-12-22T13:01:25","Actor":"dotnet-maestro[bot]","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/2771","RelatedDescription":"Opened pull request \"Update dependency files\" (#2771) at dotnet/sdk","RelatedBody":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18620.7\r\n- Microsoft.DotNet.SignTool - 1.0.0-beta.18620.7\r\n\r\n"}],"ResultType":"GitHubEvent"},"Home-Issues":{"Issues":[{"Id":"391460225","IsPullRequest":false,"CreatedAt":"2018-12-16T11:57:53","Actor":"manne","Number":"126","RawContent":null,"Title":"No logo provided for Prism","State":"open","Body":"Can/should this [image](http://prismlibrary.github.io/images/logo-prism-symbol@2x.png) be used?\r\n\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L155-L157","Url":"https://github.com/dotnet/foundation/issues/126","RelatedDescription":"Open issue \"No logo provided for Prism\" (#126)"},{"Id":"391459919","IsPullRequest":false,"CreatedAt":"2018-12-16T11:53:31","Actor":"manne","Number":"125","RawContent":null,"Title":"Missing logo for MVVM Light Toolkit","State":"open","Body":"`https://raw.githubusercontent.com/paulcbetts/mvvmlight/master/Installer/InstallItems/html/MVVM_BlackText_190x147.png` results in a 404.\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L137-L139","Url":"https://github.com/dotnet/foundation/issues/125","RelatedDescription":"Open issue \"Missing logo for MVVM Light Toolkit\" (#125)"},{"Id":"391459812","IsPullRequest":false,"CreatedAt":"2018-12-16T11:52:07","Actor":"manne","Number":"124","RawContent":null,"Title":"Missing logo for Umbraco","State":"open","Body":"`https://fbcdn-profile-a.akamaihd.net/hprofile-ak-xap1/v/t1.0-1/p160x160/971596_519168901464439_566592989_n.png?oh=ce61e5b4cbd60c0d99c4164cbb05a434&oe=54F091C9&__gda__=1424472439_c9f76213a915bc2af88246f464f29e8b` results in a 404.\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L149-L151","Url":"https://github.com/dotnet/foundation/issues/124","RelatedDescription":"Open issue \"Missing logo for Umbraco\" (#124)"},{"Id":"391459677","IsPullRequest":false,"CreatedAt":"2018-12-16T11:50:29","Actor":"manne","Number":"123","RawContent":null,"Title":"Missing logo for Steeltoe","State":"open","Body":"`https://brandfolder.com/pivotal-assets/attachments/ohxttd-7yxa60-clvf50/pivotal-assets-pivotal-genericfile.png` redirects to a sign in page\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L128-L130","Url":"https://github.com/dotnet/foundation/issues/123","RelatedDescription":"Open issue \"Missing logo for Steeltoe\" (#123)"},{"Id":"391459057","IsPullRequest":true,"CreatedAt":"2018-12-16T11:40:46","Actor":"manne","Number":"122","RawContent":null,"Title":"targets the existing document","State":"open","Body":"","Url":"https://github.com/dotnet/foundation/pull/122","RelatedDescription":"Open PR \"targets the existing document\" (#122)"},{"Id":"384569679","IsPullRequest":true,"CreatedAt":"2018-11-27T00:35:00","Actor":"JamesNK","Number":"121","RawContent":null,"Title":"Add Newtonsoft.Json","State":"open","Body":"// @jongalloway ","Url":"https://github.com/dotnet/foundation/pull/121","RelatedDescription":"Open PR \"Add Newtonsoft.Json\" (#121)"},{"Id":"384212839","IsPullRequest":true,"CreatedAt":"2018-11-26T09:33:50","Actor":"stefanov-stefan","Number":"120","RawContent":null,"Title":"Added Telerik info","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/120","RelatedDescription":"Closed or merged PR \"Added Telerik info\" (#120)"},{"Id":"384212448","IsPullRequest":true,"CreatedAt":"2018-11-26T09:33:22","Actor":"stefanov-stefan","Number":"119","RawContent":null,"Title":"Added Telerik UWP proj","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/119","RelatedDescription":"Closed or merged PR \"Added Telerik UWP proj\" (#119)"},{"Id":"382378851","IsPullRequest":true,"CreatedAt":"2018-11-23T10:32:15","Actor":"pkgw","Number":"118","RawContent":null,"Title":"Update WorldWide Telescope","State":"closed","Body":"Some layout fixes, but the main change is that @pkgw is now the project director.","Url":"https://github.com/dotnet/foundation/pull/118","RelatedDescription":"Closed or merged PR \"Update WorldWide Telescope\" (#118)"},{"Id":"380070557","IsPullRequest":true,"CreatedAt":"2018-11-23T10:31:49","Actor":"leastprivilege","Number":"117","RawContent":null,"Title":"Update identityserver.md","State":"closed","Body":"significant whitespace","Url":"https://github.com/dotnet/foundation/pull/117","RelatedDescription":"Closed or merged PR \"Update identityserver.md\" (#117)"},{"Id":"379731798","IsPullRequest":true,"CreatedAt":"2018-11-13T04:22:32","Actor":"leastprivilege","Number":"114","RawContent":null,"Title":"Update identityserver.md","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/114","RelatedDescription":"Closed or merged PR \"Update identityserver.md\" (#114)"},{"Id":"379777451","IsPullRequest":true,"CreatedAt":"2018-11-13T04:21:35","Actor":"scottbrady91","Number":"116","RawContent":null,"Title":"Update to IdentityManager project","State":"closed","Body":"My employer and I have recently taken over the IdentityManager project from Dom & Brock. I've updated the IdentityManager page to reflect this and the newer version of the core repo.","Url":"https://github.com/dotnet/foundation/pull/116","RelatedDescription":"Closed or merged PR \"Update to IdentityManager project\" (#116)"},{"Id":"379733880","IsPullRequest":true,"CreatedAt":"2018-11-13T04:20:23","Actor":"leastprivilege","Number":"115","RawContent":null,"Title":"Create identitymodel.md","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/115","RelatedDescription":"Closed or merged PR \"Create identitymodel.md\" (#115)"},{"Id":"371941750","IsPullRequest":true,"CreatedAt":"2018-11-01T16:20:07","Actor":"SeanKilleen","Number":"113","RawContent":null,"Title":"Update logo for couchbase-lite in projects.json","State":"closed","Body":"Uses a working link to the logo.\r\n\r\nResolves https://github.com/dotnet/dotnetfoundation-website/issues/65\r\n\r\nFix can be verified by copying/pasting the URL into a browser.","Url":"https://github.com/dotnet/foundation/pull/113","RelatedDescription":"Closed or merged PR \"Update logo for couchbase-lite in projects.json\" (#113)"},{"Id":"365089074","IsPullRequest":false,"CreatedAt":"2018-09-29T02:45:47","Actor":"athinboy","Number":"112","RawContent":null,"Title":"Suggest: key  F12  go to source code of dotnetcore  rather then metadata","State":"open","Body":"Apology for my poor english!\r\n\r\nI have change to Java due to the boss's decision .   I think dotnet  need a big change. In China, more and more dotnet project go to die,  but new java project continuously increase!\r\n\r\nI suggest:key  F12  go to source code of dotnetcore  rather then metadata(e.g.    ***.dll.source.zip \\****.exe.source.zip),   maybe there is already done,but i don't know. \r\n\r\nthanks!\r\n","Url":"https://github.com/dotnet/foundation/issues/112","RelatedDescription":"Open issue \"Suggest: key  F12  go to source code of dotnetcore  rather then metadata\" (#112)"},{"Id":"356296763","IsPullRequest":false,"CreatedAt":"2018-09-02T16:49:34","Actor":"adamralph","Number":"111","RawContent":null,"Title":"Sourcelink location is confusing","State":"open","Body":"The README has link under the \"Cameron Taggart\" section pointing to https://github.com/ctaggart/SourceLink but the project now seems to live under the \"dotnet\" org in https://github.com/dotnet/sourcelink/ which suggests the link should be changed to that, and moved under the \"Microsoft\" section.","Url":"https://github.com/dotnet/foundation/issues/111","RelatedDescription":"Open issue \"Sourcelink location is confusing\" (#111)"},{"Id":"353832272","IsPullRequest":true,"CreatedAt":"2018-08-27T16:21:55","Actor":"jkonicki","Number":"110","RawContent":null,"Title":"Fix - add missing comma","State":"closed","Body":"@jongalloway - Looks like I missed a comma in my previous PR. Here is the fix.","Url":"https://github.com/dotnet/foundation/pull/110","RelatedDescription":"Closed or merged PR \"Fix - add missing comma\" (#110)"},{"Id":"352736883","IsPullRequest":true,"CreatedAt":"2018-08-23T23:10:07","Actor":"anthonychu","Number":"108","RawContent":null,"Title":"Fix errors in projects.json","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/108","RelatedDescription":"Closed or merged PR \"Fix errors in projects.json\" (#108)"},{"Id":"353536205","IsPullRequest":true,"CreatedAt":"2018-08-23T23:09:07","Actor":"jkonicki","Number":"109","RawContent":null,"Title":"Add Steeltoe to the project listing","State":"closed","Body":"Hi @jongalloway, Here is the PR for adding Steeltoe to the projects listing.  Let me know if you need any changes. \r\nThanks.","Url":"https://github.com/dotnet/foundation/pull/109","RelatedDescription":"Closed or merged PR \"Add Steeltoe to the project listing\" (#109)"},{"Id":"339545098","IsPullRequest":true,"CreatedAt":"2018-08-17T23:19:54","Actor":"slide","Number":"105","RawContent":null,"Title":"Add DLR/IronPython2/IronPython3","State":"closed","Body":"Add DLR/IronPython2/IronPython3 to project list.","Url":"https://github.com/dotnet/foundation/pull/105","RelatedDescription":"Closed or merged PR \"Add DLR/IronPython2/IronPython3\" (#105)"},{"Id":"336936558","IsPullRequest":false,"CreatedAt":"2018-08-07T07:06:40","Actor":"tomkerkhove","Number":"104","RawContent":null,"Title":"About still mentions CodePlex","State":"closed","Body":"About still mentions CodePlex which is now in archive mode.\r\n\r\n![image](https://user-images.githubusercontent.com/4345663/42086259-e0b7d008-7b92-11e8-96c9-02ee61ddc457.png)\r\n\r\nIs this something that I can PR?","Url":"https://github.com/dotnet/foundation/issues/104","RelatedDescription":"Closed issue \"About still mentions CodePlex\" (#104)"},{"Id":"340355507","IsPullRequest":false,"CreatedAt":"2018-07-11T18:28:16","Actor":"Eilon","Number":"107","RawContent":null,"Title":"Links to .NET Foundation web site use HTTP instead of HTTPS","State":"open","Body":"It appears that HTTPS works just fine: https://www.dotnetfoundation.org/\r\n\r\nBut the links at these places use HTTP:\r\n1. The link in the header of https://github.com/dotnet/home\r\n2. The link in the header of https://github.com/dotnet\r\n3. Some links in https://github.com/dotnet/home/blob/master/README.md (both to .NET Foundation, and a GitHub link to another project)\r\n\r\nThese links should all change to HTTPS.","Url":"https://github.com/dotnet/foundation/issues/107","RelatedDescription":"Open issue \"Links to .NET Foundation web site use HTTP instead of HTTPS\" (#107)"},{"Id":"340126921","IsPullRequest":false,"CreatedAt":"2018-07-11T07:41:25","Actor":"glatzert","Number":"106","RawContent":null,"Title":"Updates are not requested from local WSUS","State":"open","Body":"The Team somewhen Mention, that fixes should be installed automatically, if .NET Core is on a Windows Server.\r\nThis seems not to work. What are the prerequisits for this to be working?","Url":"https://github.com/dotnet/foundation/issues/106","RelatedDescription":"Open issue \"Updates are not requested from local WSUS\" (#106)"},{"Id":"326192782","IsPullRequest":true,"CreatedAt":"2018-05-24T16:33:09","Actor":"danmosemsft","Number":"103","RawContent":null,"Title":"Add ML.NET to readme","State":"closed","Body":"cc @shauheen @jongalloway ","Url":"https://github.com/dotnet/foundation/pull/103","RelatedDescription":"Closed or merged PR \"Add ML.NET to readme\" (#103)"},{"Id":"294070713","IsPullRequest":true,"CreatedAt":"2018-05-18T19:06:02","Actor":"karann-msft","Number":"98","RawContent":null,"Title":"Updates to reflect the latest information","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/98","RelatedDescription":"Closed or merged PR \"Updates to reflect the latest information\" (#98)"},{"Id":"316146229","IsPullRequest":true,"CreatedAt":"2018-05-18T19:05:34","Actor":"Cheesebaron","Number":"100","RawContent":null,"Title":"Create mvvmcross.md","State":"closed","Body":"Added MvvmCross as project as part of on-boarding.\r\n\r\nhttps://github.com/MvvmCross/MvvmCross/issues/2415","Url":"https://github.com/dotnet/foundation/pull/100","RelatedDescription":"Closed or merged PR \"Create mvvmcross.md\" (#100)"},{"Id":"321003666","IsPullRequest":true,"CreatedAt":"2018-05-18T19:05:07","Actor":"shauheen","Number":"102","RawContent":null,"Title":"Update projects.json adding MLNET","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/102","RelatedDescription":"Closed or merged PR \"Update projects.json adding MLNET\" (#102)"},{"Id":"321003407","IsPullRequest":true,"CreatedAt":"2018-05-18T19:04:23","Actor":"shauheen","Number":"101","RawContent":null,"Title":"Create mlnet.md","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/101","RelatedDescription":"Closed or merged PR \"Create mlnet.md\" (#101)"},{"Id":"293777118","IsPullRequest":true,"CreatedAt":"2018-03-29T07:03:03","Actor":"mairaw","Number":"97","RawContent":null,"Title":"update CLA PDF link","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/97","RelatedDescription":"Closed or merged PR \"update CLA PDF link\" (#97)"},{"Id":"307656482","IsPullRequest":false,"CreatedAt":"2018-03-22T14:02:36","Actor":"vvavrychuk","Number":"99","RawContent":null,"Title":"not working \"Linux Distribution\" dropdown on http://www.microsoft.com/net/learn/get-started/linux ","State":"open","Body":"On the page http://www.microsoft.com/net/learn/get-started/linux dropdown \"Linux Distribution\" has no effect on the installation instruction next to him (they are always displayed for RedHat).\r\n\r\n![screenshot from 2018-03-22 16-02-19](https://user-images.githubusercontent.com/152563/37775020-6ec5778e-2dea-11e8-9ea3-b33e26c1c4e1.png)\r\n","Url":"https://github.com/dotnet/foundation/issues/99","RelatedDescription":"Open issue \"not working \"Linux Distribution\" dropdown on http://www.microsoft.com/net/learn/get-started/linux \" (#99)"}],"ResultType":"GitHubIssue"},"CoreCLR-Issues":{"Issues":[{"Id":"393703332","IsPullRequest":true,"CreatedAt":"2018-12-23T03:20:40","Actor":"marek-safar","Number":"21653","RawContent":null,"Title":"Extracts public IThreadPoolWorkItem interface to shared CoreLib","State":"closed","Body":"","Url":"https://github.com/dotnet/coreclr/pull/21653","RelatedDescription":"Closed or merged PR \"Extracts public IThreadPoolWorkItem interface to shared CoreLib\" (#21653)"},{"Id":"393708650","IsPullRequest":true,"CreatedAt":"2018-12-23T02:36:33","Actor":"marek-safar","Number":"21654","RawContent":null,"Title":"Moves CoreLib to shared location","State":"closed","Body":"","Url":"https://github.com/dotnet/coreclr/pull/21654","RelatedDescription":"Closed or merged PR \"Moves CoreLib to shared location\" (#21654)"},{"Id":"393696203","IsPullRequest":false,"CreatedAt":"2018-12-22T21:12:39","Actor":"tmm360","Number":"21651","RawContent":null,"Title":"NullReferenceException invoking System.Collections.Generic.Dictionary`2.ContainsKey(TKey key)","State":"closed","Body":"I'm using netcoreapp2.2, .Net Core SDK 2.2.100 (x64) for an Asp.Net Core application.\r\nThe exception is not raised every time.\r\n\r\n    System.NullReferenceException\r\n      HResult=0x80004003\r\n      Message=Object reference not set to an instance of an object.\r\n      Source=System.Private.CoreLib\r\n      StackTrace:\r\n       at System.Collections.Generic.Dictionary`2.FindEntry(TKey key)\r\n       at System.Collections.Generic.Dictionary`2.ContainsKey(TKey key)\r\n       at (... my project info ...)","Url":"https://github.com/dotnet/coreclr/issues/21651","RelatedDescription":"Closed issue \"NullReferenceException invoking System.Collections.Generic.Dictionary`2.ContainsKey(TKey key)\" (#21651)"},{"Id":"393701802","IsPullRequest":true,"CreatedAt":"2018-12-22T20:42:19","Actor":"ichensky","Number":"21652","RawContent":null,"Title":"Add optimization in GetHashCode for Int16 and SByte","State":"open","Body":"As discussed in https://github.com/dotnet/corefx/pull/34123","Url":"https://github.com/dotnet/coreclr/pull/21652","RelatedDescription":"Open PR \"Add optimization in GetHashCode for Int16 and SByte\" (#21652)"},{"Id":"393679203","IsPullRequest":true,"CreatedAt":"2018-12-22T18:01:00","Actor":"jkotas","Number":"21650","RawContent":null,"Title":"Move some Task related files to shared CoreLib partition","State":"closed","Body":"","Url":"https://github.com/dotnet/coreclr/pull/21650","RelatedDescription":"Closed or merged PR \"Move some Task related files to shared CoreLib partition\" (#21650)"},{"Id":"393658803","IsPullRequest":false,"CreatedAt":"2018-12-22T15:24:41","Actor":"gfoidl","Number":"21648","RawContent":null,"Title":"Is SpanHelpers simd-alignment safe?","State":"closed","Body":"https://github.com/dotnet/coreclr/blob/82e02f37564f83c3a7c90e5e28a652a39017701a/src/System.Private.CoreLib/shared/System/SpanHelpers.Byte.cs#L110-L114 (other places as well)\r\ngets the count to register align the `searchSpace`, but it is not pinned so the GC can relocate it, thus the alignment is gone.\r\n\r\nIs there any special handling in the VM / GC that I'm not aware of, or should this be rewritten to pin it?\r\n\r\nThe code still yields the correct results, but perf-wise it may be sub-optimal as potentially being not aligned correctly.\r\nFor tests there could be `Debug.Assert` added to check the alignment -- but this may result in flaky tests (depending on the non deterministic GC relocations).","Url":"https://github.com/dotnet/coreclr/issues/21648","RelatedDescription":"Closed issue \"Is SpanHelpers simd-alignment safe?\" (#21648)"},{"Id":"393649631","IsPullRequest":true,"CreatedAt":"2018-12-22T14:55:43","Actor":"Dotnet-GitSync-Bot","Number":"21647","RawContent":null,"Title":"Mirror changes from dotnet/corert","State":"closed","Body":"This PR contains mirrored changes from dotnet/corert\n\n\n**Please REBASE this PR when merging**\n\n cc @jkotas","Url":"https://github.com/dotnet/coreclr/pull/21647","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corert\" (#21647)"},{"Id":"393451497","IsPullRequest":true,"CreatedAt":"2018-12-22T14:50:49","Actor":"dotnet-maestro[bot]","Number":"21634","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18620.6\r\n- Microsoft.DotNet.Helix.Sdk - 1.0.0-beta.18620.6\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18620.7\r\n- Microsoft.DotNet.Helix.Sdk - 1.0.0-beta.18620.7\r\n\r\n","Url":"https://github.com/dotnet/coreclr/pull/21634","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#21634)"},{"Id":"393665949","IsPullRequest":true,"CreatedAt":"2018-12-22T11:29:31","Actor":"marek-safar","Number":"21649","RawContent":null,"Title":"Moves generic comparers to shared CoreLib","State":"open","Body":"","Url":"https://github.com/dotnet/coreclr/pull/21649","RelatedDescription":"Open PR \"Moves generic comparers to shared CoreLib\" (#21649)"},{"Id":"393644916","IsPullRequest":true,"CreatedAt":"2018-12-22T06:48:50","Actor":"Dotnet-GitSync-Bot","Number":"21646","RawContent":null,"Title":"Mirror changes from dotnet/corert","State":"closed","Body":"This PR contains mirrored changes from dotnet/corert\n\n\n**Please REBASE this PR when merging**\n\n cc @jkotas","Url":"https://github.com/dotnet/coreclr/pull/21646","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corert\" (#21646)"},{"Id":"393592558","IsPullRequest":true,"CreatedAt":"2018-12-22T06:28:34","Actor":"sdmaclea","Number":"21637","RawContent":null,"Title":"Remove dead ICLRPrivBinder methods","State":"closed","Body":"","Url":"https://github.com/dotnet/coreclr/pull/21637","RelatedDescription":"Closed or merged PR \"Remove dead ICLRPrivBinder methods\" (#21637)"},{"Id":"393636575","IsPullRequest":true,"CreatedAt":"2018-12-22T04:24:08","Actor":"danmosemsft","Number":"21645","RawContent":null,"Title":"Correctly disable tests","State":"closed","Body":"Relates to https://github.com/dotnet/coreclr/pull/21614","Url":"https://github.com/dotnet/coreclr/pull/21645","RelatedDescription":"Closed or merged PR \"Correctly disable tests\" (#21645)"},{"Id":"393596559","IsPullRequest":true,"CreatedAt":"2018-12-22T02:39:12","Actor":"marek-safar","Number":"21639","RawContent":null,"Title":"Moves common part of Object to CoreLib shared","State":"closed","Body":"","Url":"https://github.com/dotnet/coreclr/pull/21639","RelatedDescription":"Closed or merged PR \"Moves common part of Object to CoreLib shared\" (#21639)"},{"Id":"393631098","IsPullRequest":false,"CreatedAt":"2018-12-22T01:26:39","Actor":"echesakovMSFT","Number":"21644","RawContent":null,"Title":"[JitStress] System.Tests.ExceptionTests.ThrowStatementDoesNotResetExceptionStackLineOtherMethod","State":"open","Body":"```\r\nStarting:    System.Xml.RW.RwFactory.Tests (parallel test collections = on, max threads = 4)\r\n  * ExceptionTests - reported call stack:\r\n     at System.Tests.ExceptionTests.ThrowAndRethrowOtherMethod(ValueTuple`3& rethrownExceptionStackFrame) in D:\\j\\workspace\\x64_checked_w---3eccb510\\_\\fx\\src\\System.Runtime\\tests\\System\\ExceptionTests.cs:line 156\r\n     at System.Tests.ExceptionTests.ThrowStatementDoesNotResetExceptionStackLineOtherMethod() in D:\\j\\workspace\\x64_checked_w---3eccb510\\_\\fx\\src\\System.Runtime\\tests\\System\\ExceptionTests.cs:line 142\r\n      System.Tests.ExceptionTests.ThrowStatementDoesNotResetExceptionStackLineOtherMethod [FAIL]\r\n        Assert.Equal() Failure\r\n                        (pos 5)\r\n        Expected: ThrowAndRethrowOtherMethod\r\n        Actual:   ThrowStatementDoesNotResetExceptionStackLineOt���\r\n                        (pos 5)\r\n        Stack Trace:\r\n          D:\\j\\workspace\\x64_checked_w---3eccb510\\_\\fx\\src\\System.Runtime\\tests\\System\\ExceptionTests.cs(189,0): at System.Tests.ExceptionTests.VerifyCallStack(ValueTuple`3 expectedStackFrame, String reportedCallStack, Int32 skipFrames)\r\n          D:\\j\\workspace\\x64_checked_w---3eccb510\\_\\fx\\src\\System.Runtime\\tests\\System\\ExceptionTests.cs(144,0): at System.Tests.ExceptionTests.ThrowStatementDoesNotResetExceptionStackLineOtherMethod()\r\n\r\n```\r\n\r\nAn issue with **System.Tests.ExceptionTests.ThrowStatementDoesNotResetExceptionStackLineOtherMethod [FAIL]** reproduces under the following environment\r\n```\r\nCOMPlus_JitInlinePolicyRandom=2\r\nCOMPlus_JitStressModeNames=STRESS_RANDOM_INLINE\r\nCOMPlus_JitStressModeNamesOnly=1\r\nCOMPlus_JitStressRange=2880818700\r\nCOMPlus_TieredCompilation=0\r\n```\r\nThe hash corresponds to the test method itself System.Tests.ExceptionTests:ThrowAndRethrowOtherMethod(byref) ","Url":"https://github.com/dotnet/coreclr/issues/21644","RelatedDescription":"Open issue \"[JitStress] System.Tests.ExceptionTests.ThrowStatementDoesNotResetExceptionStackLineOtherMethod\" (#21644)"},{"Id":"393627112","IsPullRequest":true,"CreatedAt":"2018-12-22T00:41:45","Actor":"echesakovMSFT","Number":"21643","RawContent":null,"Title":"Remove vc-runtime package dependency","State":"open","Body":"It doesn't look that we need this dependency anymore.\r\nAt least, testing on ARM/ARM64 Helix machines succeeded with this change.\r\n\r\nSee if Jenkins machines are happy with this change.","Url":"https://github.com/dotnet/coreclr/pull/21643","RelatedDescription":"Open PR \"Remove vc-runtime package dependency\" (#21643)"},{"Id":"393625120","IsPullRequest":true,"CreatedAt":"2018-12-22T00:21:54","Actor":"echesakovMSFT","Number":"21642","RawContent":null,"Title":"Temporary remove OSX.1012.Amd64.Open and OSX.1012.Amd64 Helix queues","State":"open","Body":"Currently, the build agents in Azure DevOps run on OSX 10.13. This causes the following failures when a test job submitted to OSX 10.12 queue.\r\n```\r\ndlopen failed to open the libcoreclr.so with error dlopen(/Users/dotnet-bot/dotnetbuild/work/955a3b93-78a6-41fb-8696-8e73e9be05b2/Payload/libcoreclr.dylib, 6): Symbol not found: _syslog$DARWIN_EXTSN\r\n  Referenced from: /Users/dotnet-bot/dotnetbuild/work/955a3b93-78a6-41fb-8696-8e73e9be05b2/Payload/libcoreclr.dylib (which was built for Mac OS X 10.13)\r\n  Expected in: /usr/lib/libSystem.B.dylib\r\n in /Users/dotnet-bot/dotnetbuild/work/955a3b93-78a6-41fb-8696-8e73e9be05b2/Payload/libcoreclr.dylib\r\n```\r\n\r\nThis PR temporary removes OSX.1012.Amd64.Open and OSX.1012.Amd64 from Helix target queues.\r\n\r\n**Related issue**: https://github.com/dotnet/core-eng/issues/4856","Url":"https://github.com/dotnet/coreclr/pull/21642","RelatedDescription":"Open PR \"Temporary remove OSX.1012.Amd64.Open and OSX.1012.Amd64 Helix queues\" (#21642)"},{"Id":"393625019","IsPullRequest":true,"CreatedAt":"2018-12-22T00:21:04","Actor":"tannergooding","Number":"21641","RawContent":null,"Title":"[WIP] Fixing ContainCheckHWIntrinsic to ensure that scalar integer operands are the appropriate size","State":"open","Body":"This resolves https://github.com/dotnet/coreclr/issues/21625","Url":"https://github.com/dotnet/coreclr/pull/21641","RelatedDescription":"Open PR \"[WIP] Fixing ContainCheckHWIntrinsic to ensure that scalar integer operands are the appropriate size\" (#21641)"},{"Id":"393619012","IsPullRequest":true,"CreatedAt":"2018-12-21T23:35:24","Actor":"MattGal","Number":"21640","RawContent":null,"Title":"Testing Jenkins CI","State":"open","Body":"Just fixing one of the many misspellings of receive to see the right jobs start","Url":"https://github.com/dotnet/coreclr/pull/21640","RelatedDescription":"Open PR \"Testing Jenkins CI\" (#21640)"},{"Id":"393287251","IsPullRequest":true,"CreatedAt":"2018-12-21T22:24:29","Actor":"danmosemsft","Number":"21628","RawContent":null,"Title":"Remove _syncRoot field from collections","State":"closed","Body":"CoreCLR part of dotnet/corefx#34149.","Url":"https://github.com/dotnet/coreclr/pull/21628","RelatedDescription":"Closed or merged PR \"Remove _syncRoot field from collections\" (#21628)"},{"Id":"393595431","IsPullRequest":true,"CreatedAt":"2018-12-21T21:26:57","Actor":"Maoni0","Number":"21638","RawContent":null,"Title":"Test","State":"open","Body":"this is only to see how well GC tests are running as I am seeing some failures on another PR and not reproing them locally.","Url":"https://github.com/dotnet/coreclr/pull/21638","RelatedDescription":"Open PR \"Test\" (#21638)"},{"Id":"393540008","IsPullRequest":true,"CreatedAt":"2018-12-21T21:21:35","Actor":"jkotas","Number":"21636","RawContent":null,"Title":"Disable outdated CoreFX test","State":"closed","Body":"","Url":"https://github.com/dotnet/coreclr/pull/21636","RelatedDescription":"Closed or merged PR \"Disable outdated CoreFX test\" (#21636)"},{"Id":"393441985","IsPullRequest":true,"CreatedAt":"2018-12-21T19:15:09","Actor":"marek-safar","Number":"21633","RawContent":null,"Title":"Moves ByReference to shared CoreLib","State":"closed","Body":"","Url":"https://github.com/dotnet/coreclr/pull/21633","RelatedDescription":"Closed or merged PR \"Moves ByReference to shared CoreLib\" (#21633)"},{"Id":"393538202","IsPullRequest":false,"CreatedAt":"2018-12-21T17:41:45","Actor":"tannergooding","Number":"21635","RawContent":null,"Title":"Current state of the SIMD/HWIntrinsic configuration knobs and proposed cleanup","State":"open","Body":"We should finish fleshing out the design around the various `CLR Configuration Knobs` that allow users to control the various `System.Numerics.Vectors` and `System.Runtime.Intrinsics` support.\r\n\r\n## Prior to HWIntrinsics\r\n\r\nThis section discusses the state of the world in netcoreapp1.0 through netcoreapp2.0. Desktop had similar, but slightly different behavior that I will attempt to call out where relevant.\r\n\r\n### `COMPlus_EnableSSE3_4` and `COMPlus_EnableAVX`\r\n\r\nThe former (`COMPlus_EnableSSE3_4`) appears to be .NETCore only but defaults to 1 and is used in combination with a CPUID check that the VM does. It controls whether the `S.N.Vectors` intrinsics generate SSE3 through SSE4.2 instructions. The flag is completely ignored if `COMPlus_EnableAVX` and the corresponding VM check are `1`.\r\n\r\nThe latter (`COMPlus_EnableAVX`) is available for both Desktop and .NETCore, it defaults to 1 ans is used in combination with a CPUID check that the VM does. It controls:\r\n* Whether the `S.N.Vectors` intrinsics generate AVX/AVX2 instructions\r\n* The size of `Vector<T>` (setting it to zero, forces `Vector<T>` to be sized to 16)\r\n* Whether the compiler emits `VEX` encoded instructions\r\n\r\n### `COMPlus_FeatureSIMD`\r\n\r\nThis flag is available for both Desktop and .NETCore, it defaults to 1 and controls various bits of code related to `Vector<T>`, the `S.N.Vectors` compiler support, and the `TYP_SIMD*` support.\r\n\r\nSetting this to 0 causes `Vector<T>` to be sized at 16, none of the `S.N.Vectors` code to be treated as intrinsic, and prevents the various types from being resolved as `TYP_SIMD*` (which also generally prevents these types from appearing).\r\n\r\n## Current State\r\n\r\nThis section discusses the current state of the world for netcoreapp3.0.\r\n\r\n### `COMPlus_Enable<ISA>`\r\n\r\nWe have a number of `Enable<ISA>` flags, including: the pre-existing `SSE3_4` and `AVX` flags as well as the `SSE`, `SSE2`, `SSE3`, SSSE3`, `SSE41, `SSE42`, `AVX2`, `AES`, `PCLMULQDQ`, `POPCNT`, FMA`, `LZCNT`, `BMI1`, and `BMI2` flags. All of these are used in combination with a corresponding CPUID check that the VM does.\r\n\r\nThese flags impact the compiler support for a given ISA and any ISAs that are \"descendants\" of that ISA (e.g. `SSE=0` would also disable `SSE2` which would disable any ISAs dependent on `SSE2`, etc). The flags are currently used primarily for the `HWIntrinsics` feature as that is the only thing that will cause the various instructions to be generated. In the future, these flags might be applicable more generally depending on other optimizations the JIT could consider. An exception to this is `SSE` and `SSE2` which are considered \"baseline support\" by RyuJIT. These ISAs only impact the corresponding `HWIntrinsic` ISAs and do not actually impact compiler support for generating these instructions.\r\n\r\nThe pre-existing `SSE3_4` flag is now treated as equivalent to `SSE3`. It impacts the `SSE3` ISA and any child ISAs (including `AVX`). It otherwise functions identically and continues impacting the codgen support for `S.N.Vectors`.\r\n\r\nThe pre-existing `AVX` flag continues impacting the size of `Vector<T>` and whether the compiler emits `VEX` encoded instructions. However, for the size of `Vector<T>` it now does so indirectly (in that disabling `AVX` also disables `AVX2`), as the check was shifted onto `AVX2`.\r\n\r\n### `COMPlus_FeatureSIMD` and `COMPlus_EnableHWIntrinsic`\r\n\r\nThe `COMPlus_FeatureSIMD` flag continues functioning as it did before.\r\n\r\nThe `COMPlus_EnableHWIntrinsic` flag controls whether the `System.Runtime.Intrinsic` methods are treated as intrinsic, and therefore, whether they throw a `PNSE` or generate actual code when the given ISA is supported by the CPU/Compiler. There is currently a bug that setting `EnableHWIntrinsic=0` will also disable compiler support for all the various ISAs listed above. This also means that it currently impacts the size of `Vector<T>` and whether the compiler will emit VEX encoded instructions.\r\n\r\n## Proposal for Cleanup\r\n\r\nIn this section, I will attempt to describe where we want to be with the various flags.\r\n\r\n### New Flag: `EnableVEX`\r\n\r\nCurrently we control the `VEX` support for the compiler by checking the `EnableAVX` flag (and corresponding CPUID check done by the VM). However, there are two ISAs that require the VEX encoding but not for AVX to also be enabled, these are `BMI1` and `BMI2`. While we should never encounter a CPU that has `BMI1`/`BMI2` but that does not also support `AVX`, `AVX` requires an additional check that the OS supports saving/restoring the 256-bit YMM registers. This support is not guaranteed and, at least on Windows, can be toggled by the user. Due to this, we need the check to be updated so that the `BMI1`/`BMI2` ISAs  (and any future ISAs with similar requirements) can still use the VEX encoding. Additionally, the `VEX` encoding is generally more efficient (it removes the RMW requirement from most of the instructions and supports unaligned memory addresses) and it may be desirable to still emit the VEX encoded instructions for `SSE` through `SSE42` when the user has set `EnableAVX=0`.\r\n\r\nThe proposal is then to expose a new `COMPlus_EnableVEX` flag that is used to control the VEX encoding. Setting it to `0` would disable any ISA that requires the VEX encoding (`AVX`, `AVX2`, `FMA`, `BMI1`, and `BMI2`, as well as any future ISAs). Its default value (`1`) would allow the compiler to emit the VEX encoding for `SSE` through `SSE42` when the CPU/OS support AVX but when the user has set `EnableAVX=0`. It would also allow other ISAs not in the AVX hierarchy (`BMI1` and `BMI2`) to be emitted even when the OS does not support the saving/restoring the 256-bit YMM registers.\r\n\r\nAn alternative would be to not expose a new flag and instead just update the emitter to know that it can use the `VEX` encoding for the `BMI1`/`BMI2` ISAs. The only difference from the above would be that `SSE` through `SSE42` would not use the VEX encoding when `AVX=0` (and when the OS supports saving/restoring the 256-bit YMM registers). This might be a more accurate state since the `VEX` encoded forms of the `SSE` through `SSE42` instructions are technically part of the AVX instruction set.\r\n\r\n### New Flag: `VectorTSize`\r\n\r\nCurrently we control the sizeof `Vector<T>` by defaulting it to `16` and changing it to `32` if `AVX2` is supported. However, this is not very extensible (what do we do when/if `AVX-512` becomes supported and the size can be `64`) and it is very much tied to x86 (you wouldn't want this to impact ARM if we add `SVE` support). It also means that if you need a smaller `Vector<T>`, you must also disable the general compiler support for the `AVX2` ISA (at a minimum). This also impacts the HWIntrinsics feature.\r\n\r\nThe proposal is then to expose a new `COMPlus_VectorTSize` flag that is used to control the sizeof `Vector<T>`. The value would default to `0` which would mean to follow the normal logic we have today (size to `16` by default and change to `32` if `AVX2` is supported). We would then come up with an additional scheme such that other values allow the user to explicitly size `Vector<T>` (to a supported size).\r\n\r\nMy current thinking is that any unsupported value is treated as `0` (default). Otherwise, the supported values are the exact sizes (16 or 32, in the future 64 if `AVX-512` becomes supported, etc). Another option would be that the value is treated as the nearest size that is less than the given size. As an example, if the user gives `31`, it would be sized `16`. If the user gave `64` and we only support `32` and `16`, it would be `32`. If the user gave `100` and we support `128`, `64`, `32`, and `16`; they would get `64`.\r\n\r\nThe flag would continue being used in conjunction with the `Enable<ISA>` checks for a given platform, as you can't size `Vector<T>` to `32` if `AVX` is not supported (for example).\r\n\r\n### `COMPlus_Enable<ISA>`\r\n\r\nThese flags are currently in a fairly good state, some considerations might be:\r\n* Should we be exposing `SSE` and `SSE2` or should they be folded back into the `EnableHWIntrinsic` flag (given that they are considered \"baseline\" for CoreCLR).\r\n* Can we get rid of `SSE3_4`, since this is now covered by the individual `SSE3`, `SSSE3`, `SSE41`, and `SSE42` flags and since it is treated as equivalent to `SSE3` (which will also disable the child ISAs).\r\n\r\n### `COMPlus_FeatureSIMD` and `COMPlus_EnableHWIntrinsic`\r\n\r\n`COMPlus_FeatureSIMD` should have its scope reduced so that it only impacts the `S.N.Vectors` codegen. The `TYP_SIMD*` support should be split out into its own feature that `FEATURE_SIMD` and `FEATURE_HW_INTRINSICS` can sit ontop of.\r\n\r\n`COMPlus_EnableHWIntrinsic` should be fixed so that it only impacts the `S.R.Intrinsics` codegen. It should have no impact on the various ISAs the compiler lists as supported.\r\n\r\n","Url":"https://github.com/dotnet/coreclr/issues/21635","RelatedDescription":"Open issue \"Current state of the SIMD/HWIntrinsic configuration knobs and proposed cleanup\" (#21635)"},{"Id":"393438439","IsPullRequest":true,"CreatedAt":"2018-12-21T12:21:00","Actor":"marek-safar","Number":"21632","RawContent":null,"Title":"Moves ByReference to shared CoreLib","State":"closed","Body":"","Url":"https://github.com/dotnet/coreclr/pull/21632","RelatedDescription":"Closed or merged PR \"Moves ByReference to shared CoreLib\" (#21632)"},{"Id":"393308735","IsPullRequest":false,"CreatedAt":"2018-12-21T12:10:22","Actor":"danmosemsft","Number":"21630","RawContent":null,"Title":"Move security transparency types out of corelib","State":"closed","Body":"These types are not used in Corelib outside of themselves nor are they used (or at least should not be used) in the shared framework\r\n```\r\nAllowPartiallyTrustedCallersAttribute\r\nDynamicSecurityMethodAttribute\r\nPartialTrustVisibilityLevel\r\nSecurityCriticalAttribute\r\nSecurityCriticalScope\r\nSecuritySafeCriticalAttribute\r\nSecurityTransparentAttribute\r\nSecurityTreatAsSafeAttribute\r\nSuppressUnmanagedCodeSecurityAttribute\r\nUnverifiableCodeAttribute\r\n```\r\n\r\nUnfortunately they are currently exposed in System.Runtime so they cannot be moved up into S.Security.Permissions, which is not part of the shared framework. @jkotas is there any value in moving their code into CoreFX (somewhere in the shared framework maybe System.Runtime)? If nothing else it's tidier.","Url":"https://github.com/dotnet/coreclr/issues/21630","RelatedDescription":"Closed issue \"Move security transparency types out of corelib\" (#21630)"},{"Id":"393338069","IsPullRequest":false,"CreatedAt":"2018-12-21T06:46:46","Actor":"dotnet-mc-bot","Number":"21631","RawContent":null,"Title":"Test failure: JIT_Regression._JitBlue_GitHub_19599_GitHub_19599_GitHub_19599_/_JitBlue_GitHub_19599_GitHub_19599_GitHub_19599_cmd","State":"open","Body":"Opened on behalf of @AriNuer\n\nThe test `JIT_Regression._JitBlue_GitHub_19599_GitHub_19599_GitHub_19599_/_JitBlue_GitHub_19599_GitHub_19599_GitHub_19599_cmd` has failed.\n\nFailure Message:\n```\n\n\nReturn code:      1\nRaw output file:      C:\\\\dotnetbuild\\\\work\\\\f281a6f7-1841-44c8-a0ec-522605ceb14b\\\\Work\\\\701f246f-9f43-4d17-bf36-b0a13bf4ae5c\\\\Unzip\\\\Reports\\\\JIT.Regression\\\\JitBlue\\\\GitHub_19599\\\\GitHub_19599\\\\GitHub_19599.output.txt\nRaw output:\nBEGIN EXECUTION\\r\n        1 file(s) copied.\\r\n\\\" C:\\\\dotnetbuild\\\\work\\\\f281a6f7-1841-44c8-a0ec-522605ceb14b\\\\Payload\\\\crossgen.exe\\\" /Platform_Assemblies_Paths C:\\\\dotnetbuild\\\\work\\\\f281a6f7-1841-44c8-a0ec-522605ceb14b\\\\Payload;C:\\\\dotnetbuild\\\\work\\\\f281a6f7-1841-44c8-a0ec-522605ceb14b\\\\Work\\\\701f246f-9f43-4d17-bf36-b0a13bf4ae5c\\\\Unzip\\\\JitBlue\\\\GitHub_19599\\\\GitHub_19599\\\\IL;C:\\\\dotnetbuild\\\\work\\\\f281a6f7-1841-44c8-a0ec-522605ceb14b\\\\Work\\\\701f246f-9f43-4d17-bf36-b0a13bf4ae5c\\\\Unzip\\\\JitBlue\\\\GitHub_19599\\\\GitHub_19599 /in GitHub_19599.org /out GitHub_19599.exe\\r\nMicrosoft (R) CoreCLR Native Image Generator - Version 4.5.30319.0\\r\nCopyright (c) Microsoft Corporation.  All rights reserved.\\r\n\\r\nNative image GitHub_19599.exe generated successfully.\\r\n \\\"C:\\\\dotnetbuild\\\\work\\\\f281a6f7-1841-44c8-a0ec-522605ceb14b\\\\Payload\\\\corerun.exe\\\" GitHub_19599.exe \\r\nExpected: 100\\r\nActual: -1\\r\nEND EXECUTION - FAILED\\r\nFAILED\\r\nTest Harness Exitcode is : 1\\r\n\nTo run the test:\n> set CORE_ROOT=C:\\\\dotnetbuild\\\\work\\\\f281a6f7-1841-44c8-a0ec-522605ceb14b\\\\Payload\n> C:\\\\dotnetbuild\\\\work\\\\f281a6f7-1841-44c8-a0ec-522605ceb14b\\\\Work\\\\701f246f-9f43-4d17-bf36-b0a13bf4ae5c\\\\Unzip\\\\JitBlue\\\\GitHub_19599\\\\GitHub_19599\\\\GitHub_19599.cmd\n\\r\nExpected: True\\r\nActual:   False\n```\n\nStack Trace:\n```\n   at JIT_Regression._JitBlue_GitHub_19599_GitHub_19599_GitHub_19599_._JitBlue_GitHub_19599_GitHub_19599_GitHub_19599_cmd() in E:\\A\\_work\\402\\s\\bin\\tests\\Windows_NT.x64.Release\\TestWrappers\\JIT.Regression\\JIT.Regression.XUnitWrapper.cs:line 84251\n```\n\nBuild : 3.0 - 20181221.01 (Core Tests)\nFailing configurations:\n- Windows.81.Amd64-x64\n  - \n- Windows.7.Amd64-x64\n  - \n- Windows.10.Amd64.Core-x64\n  - \n- Windows.10.Nano.Amd64-x64\n  - \n- Windows.10.Amd64-x64\n  - \nDetails:\nhttps://mc.dot.net/#/product/netcore/30/source/official~2Fcoreclr~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20181221.01/workItem/JIT.Regression.XUnitWrapper/analysis/xunit/JIT_Regression._JitBlue_GitHub_19599_GitHub_19599_GitHub_19599_~2F_JitBlue_GitHub_19599_GitHub_19599_GitHub_19599_cmd","Url":"https://github.com/dotnet/coreclr/issues/21631","RelatedDescription":"Open issue \"Test failure: JIT_Regression._JitBlue_GitHub_19599_GitHub_19599_GitHub_19599_/_JitBlue_GitHub_19599_GitHub_19599_GitHub_19599_cmd\" (#21631)"},{"Id":"393289822","IsPullRequest":false,"CreatedAt":"2018-12-21T02:37:18","Actor":"danmosemsft","Number":"21629","RawContent":null,"Title":"Remove CAS era security checks around resource loads and stack crawls","State":"open","Body":"I assume everything related to `skipSecurityCheck` and `stackMark` in the resource loading in corelib and VM is related to CAS and can be removed. But what about `StackCrawlMark` in general. It is in 70 places in the VM. Is it all simply for CAS link demand checks, and we can remove it everywhere? \r\n\r\n@jkotas ","Url":"https://github.com/dotnet/coreclr/issues/21629","RelatedDescription":"Open issue \"Remove CAS era security checks around resource loads and stack crawls\" (#21629)"},{"Id":"393287100","IsPullRequest":false,"CreatedAt":"2018-12-21T02:21:14","Actor":"davmason","Number":"21627","RawContent":null,"Title":"Wrong IL->Native mappings are generated by the profiler for rejitted methods","State":"open","Body":"The IL->Native mappings generated by GetILToNativeMapping2 or GetILToNativeMapping3 appear to be invalid. After debugging with the VS team it appears that we always pass the jit the original method's mapping in `Debugger::getBoundaries` (called via `CEEInfo::GetBoundaries`). Then the generated mappings are always based off the original function's IL and therefore invalid","Url":"https://github.com/dotnet/coreclr/issues/21627","RelatedDescription":"Open issue \"Wrong IL->Native mappings are generated by the profiler for rejitted methods\" (#21627)"},{"Id":"393280799","IsPullRequest":false,"CreatedAt":"2018-12-21T01:49:38","Actor":"danmosemsft","Number":"21626","RawContent":null,"Title":"Detect corelib bitness mismatch?","State":"closed","Body":"Somehow my coreclr build produced a `bin\\Product\\Windows_NT.x64.Debug\\System.Private.CoreLib.dll` that was 32 bit.\r\n\r\nAt runtime, this failed for me when trying to load resources, message reproduced here in case it helps others: `FailFast: Infinite recursion during resource lookup within System.Private.CoreLib.  This may be a bug in System.Private.CoreLib, or potentially in certain extensibility points such as assembly resolve events or CultureInfo names.  Resource name: MissingManifestResource_NoNeutralAsm`. \r\n\r\nAfter debugging this was because a pointer to the start of the string was offset. @stephentoub pointed me to System.Runtime.CompilerServices.RuntimeHelpers.OffsetToStringData and that demonstrated the problem.\r\n\r\nAlthough this is some build issue to be fixed, I wonder whether it would be worth coreclr.dll checking that corelib is the bitness it expects, eg., by reading OffsetToStringData.","Url":"https://github.com/dotnet/coreclr/issues/21626","RelatedDescription":"Closed issue \"Detect corelib bitness mismatch?\" (#21626)"},{"Id":"393278736","IsPullRequest":false,"CreatedAt":"2018-12-21T01:40:31","Actor":"VincentBu","Number":"21625","RawContent":null,"Title":"[x86] 4 tests failed in x86_checked_windows_nt","State":"open","Body":"**Job:**\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/view/x86/job/jitstress/job/x86_checked_windows_nt_minopts/696/\r\n\r\n**Failed tests:**\r\nJIT_HardwareIntrinsics._General_Vector256_Vector256_ro_Vector256_ro_._General_Vector256_Vector256_ro_Vector256_ro_cmd\r\nJIT_HardwareIntrinsics._General_Vector128_Vector128_r_Vector128_r_._General_Vector128_Vector128_r_Vector128_r_cmd\r\nJIT_HardwareIntrinsics._General_Vector256_Vector256_r_Vector256_r_._General_Vector256_Vector256_r_Vector256_r_cmd\r\nJIT_HardwareIntrinsics._General_Vector128_Vector128_ro_Vector128_ro_._General_Vector128_Vector128_ro_Vector128_ro_cmd\r\n\r\n**Failed log:**\r\n```\r\nJIT_HardwareIntrinsics._General_Vector256_Vector256_ro_Vector256_ro_._General_Vector256_Vector256_ro_Vector256_ro_cmd [FAIL]\r\nReturn code:      1\r\nRaw output file:      D:\\j\\workspace\\x86_checked_w---a981555f\\bin\\tests\\Windows_NT.x86.Checked\\Reports\\JIT.HardwareIntrinsics\\General\\Vector256\\Vector256_ro\\Vector256_ro.output.txt\r\n  Raw output:\r\n  BEGIN EXECUTION\r\n... ...\r\nTo run the test:\r\n  > set CORE_ROOT=D:\\j\\workspace\\x86_checked_w---a981555f\\bin\\tests\\Windows_NT.x86.Checked\\Tests\\Core_Root\r\n  > D:\\j\\workspace\\x86_checked_w---a981555f\\bin\\tests\\Windows_NT.x86.Checked\\JIT\\HardwareIntrinsics\\General\\Vector256\\Vector256_ro\\Vector256_ro.cmd\r\n  \r\n        Expected: True\r\n        Actual:   False\r\n        Stack Trace:\r\n          D:\\j\\workspace\\x86_checked_w---a981555f\\bin\\tests\\Windows_NT.x86.Checked\\TestWrappers\\JIT.HardwareIntrinsics\\JIT.HardwareIntrinsics.XUnitWrapper.cs(739,0): at JIT_HardwareIntrinsics._General_Vector256_Vector256_ro_Vector256_ro_._General_Vector256_Vector256_ro_Vector256_ro_cmd()\r\n```","Url":"https://github.com/dotnet/coreclr/issues/21625","RelatedDescription":"Open issue \"[x86] 4 tests failed in x86_checked_windows_nt\" (#21625)"}],"ResultType":"GitHubIssue"},"CLI-Issues":{"Issues":[{"Id":"393688371","IsPullRequest":false,"CreatedAt":"2018-12-22T17:04:18","Actor":"DoCode","Number":"10506","RawContent":null,"Title":"[dotnet tools] Multiple commands/aliases","State":"open","Body":"How to create one or more aliases for a dotnet tool?\r\n\r\nIn the project file only the `ToolCommandName` is available:\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  ...\r\n  <PropertyGroup>\r\n    ...\r\n    <PackAsTool>true</PackAsTool>\r\n    <ToolCommandName>toolname</ToolCommandName>\r\n  ...\r\n  </PropertyGroup>\r\n  ...\r\n</Project>\r\n```\r\n\r\nExpected:\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  ...\r\n  <PropertyGroup>\r\n    ...\r\n    <PackAsTool>true</PackAsTool>\r\n    <ToolCommandNames>toolname;tn;another-alias</ToolCommandNames>\r\n  ...\r\n  </PropertyGroup>\r\n  ...\r\n</Project>\r\n```\r\n\r\nSo the tool can be executed as\r\n```batch\r\n> toolname\r\n> tn\r\n> another-alias\r\n```","Url":"https://github.com/dotnet/cli/issues/10506","RelatedDescription":"Open issue \"[dotnet tools] Multiple commands/aliases\" (#10506)"},{"Id":"393680393","IsPullRequest":false,"CreatedAt":"2018-12-22T15:09:25","Actor":"TothZoltan2018","Number":"10505","RawContent":null,"Title":"Install the .NET SDK on Windows Subsystem Linux Ubuntu 18.04 - Reading package lists... Error!","State":"open","Body":"## Steps to reproduce\r\nI try to install Install .NET SDK ([instruction here)](https://dotnet.microsoft.com/learn/dotnet/hello-world-tutorial#install) to WSL Ubuntu 18.04 ([instruction here](https://docs.microsoft.com/en-us/windows/wsl/install-win10)) ([package here](https://www.microsoft.com/hu-hu/p/ubuntu-1804-lts/9n9tngvndl3q?activetab=pivot%3Aoverviewtab))\r\n\r\n## Expected  behavior\r\nSuccessfull installation of .Net SDK on Ubuntu WSL\r\n\r\n## Actual behavior\r\n\r\nI could install Ubuntu but I can not install .NET SDK. It looks as if something is wrong with permissions althought the commands I copied from the tutirial use sudo... \r\n<pre>\r\ntothz@hp-PC:~/repos$ wget -q https://packages.microsoft.com/config/ubuntu/18.04/packages-microsoft-prod.deb\r\ntothz@hp-PC:~/repos$ sudo dpkg -i packages-microsoft-prod.deb\r\n[sudo] password for tothz:\r\n(Reading database ... 28498 files and directories currently installed.)\r\nPreparing to unpack packages-microsoft-prod.deb ...\r\nUnpacking packages-microsoft-prod (1.0-ubuntu18.04.1) over (1.0-ubuntu18.04.1) ...\r\nSetting up packages-microsoft-prod (1.0-ubuntu18.04.1) ...\r\ntothz@hp-PC:~/repos$ sudo add-apt-repository universe\r\n'universe' distribution component is already enabled for all sources.\r\ntothz@hp-PC:~/repos$ sudo apt-get install apt-transport-https\r\nReading package lists... Error!\r\nE: Problem renaming the file /var/cache/apt/srcpkgcache.bin.peXWA6 to /var/cache/apt/srcpkgcache.bin - rename (13: Permission denied)\r\nE: Could not open file /var/lib/dpkg/status - open (2: No such file or directory)\r\nE: Problem opening /var/lib/dpkg/status\r\nE: The package lists or status file could not be parsed or opened.\r\ntothz@hp-PC:~/repos$\r\n</pre>\r\n\r\nI got some tips such as:\r\n$ sudo rm -fr /var/cache/apt\r\n$ sudo mv /var/lib/dpkg/status /var/lib/dpkg/status-bak  #could fail if it doesn't exist\r\n$ sudo touch /var/lib/dpkg/status\r\n$ sudo apt clean\r\n$ sudo apt update && sudo apt upgrade\r\n$ # try again, probably starting with sudo apt install apt-transport-https,\r\n$ # if that's what you are after\r\n\r\nHowever, all in vain.\r\n\r\n## Environment data\r\n\r\nMy Windows bulid number is: \"Microsoft Windows [Version 10.0.17134.471]\"\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/10505","RelatedDescription":"Open issue \"Install the .NET SDK on Windows Subsystem Linux Ubuntu 18.04 - Reading package lists... Error!\" (#10505)"},{"Id":"393671616","IsPullRequest":true,"CreatedAt":"2018-12-22T13:02:48","Actor":"dotnet-maestro[bot]","Number":"10504","RawContent":null,"Title":"Update dependency files","State":"open","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/sdk\r\n\r\n- Microsoft.NET.Sdk - 3.0.100-preview.18621.1\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/10504","RelatedDescription":"Open PR \"Update dependency files\" (#10504)"},{"Id":"393671613","IsPullRequest":true,"CreatedAt":"2018-12-22T13:02:43","Actor":"dotnet-maestro[bot]","Number":"10503","RawContent":null,"Title":"Update dependency files","State":"open","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18620.7\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/10503","RelatedDescription":"Open PR \"Update dependency files\" (#10503)"},{"Id":"393614641","IsPullRequest":false,"CreatedAt":"2018-12-21T23:07:21","Actor":"dsplaisted","Number":"10502","RawContent":null,"Title":"Handle targeting packs in PreserveCompilationContext","State":"open","Body":"When doing a build with PreserveCompilationContext, referenced assemblies are copied to the refs folder of the output directory.  However, assemblies coming from NuGet packages aren't copied, and are looked up in the NuGet cache at runtime.\r\n\r\nWith [Targeting packs](https://github.com/dotnet/cli/issues/10006) for .NET Core 3.0, the Framework reference assemblies don't go through the NuGet assets pipeline, and so they are now being copied to the refs folder in the output.\r\n\r\nWe should figure out what to do here.  Possibly the DependencyModel code needs to be updated to understand how to locate .NET Core targeting packs, the same way that it can do with .NET Framework targeting packs.\r\n\r\ncc @natemcmaster @eerhardt ","Url":"https://github.com/dotnet/cli/issues/10502","RelatedDescription":"Open issue \"Handle targeting packs in PreserveCompilationContext\" (#10502)"},{"Id":"393553001","IsPullRequest":false,"CreatedAt":"2018-12-21T18:35:34","Actor":"livarcocc","Number":"10501","RawContent":null,"Title":"Document Composable Shared frameworks design","State":"open","Body":"","Url":"https://github.com/dotnet/cli/issues/10501","RelatedDescription":"Open issue \"Document Composable Shared frameworks design\" (#10501)"},{"Id":"393451631","IsPullRequest":true,"CreatedAt":"2018-12-21T18:14:47","Actor":"dotnet-maestro[bot]","Number":"10500","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/sdk\r\n\r\n- Microsoft.NET.Sdk - 3.0.100-preview.18620.1\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/10500","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#10500)"},{"Id":"392592426","IsPullRequest":true,"CreatedAt":"2018-12-21T17:54:12","Actor":"dotnet-maestro[bot]","Number":"10494","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18618.7\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18619.4\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18620.6\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/10494","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#10494)"},{"Id":"393037859","IsPullRequest":true,"CreatedAt":"2018-12-20T21:31:45","Actor":"dotnet-maestro[bot]","Number":"10498","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/sdk\r\n\r\n- Microsoft.NET.Sdk - 3.0.100-preview.18619.1\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/10498","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#10498)"},{"Id":"392984041","IsPullRequest":false,"CreatedAt":"2018-12-20T21:01:30","Actor":"nopara73","Number":"10497","RawContent":null,"Title":"Implement `dotnet telemetry on/off` command","State":"closed","Body":"I am building a privacy focused software (https://github.com/zkSNACKs/WalletWasabi/) with .NET Core.  \r\nWhile I am used to getting MS-shamed by some over-enthusiastic Linux users, once in a while their complains are on point. The issue of .NET telemetry is one of those things.  \r\nI have read the related issue here (https://github.com/dotnet/cli/issues/3093) and while I do not agree with, I acknowledge and respect the opinion and the decisions of the maintainers on this matter.  \r\n\r\nHowever I believe providing a\r\n\r\n- [ ] **preemptive** and\r\n- [ ] **easy way** to\r\n- [ ] **permanently** turn off the telemetry\r\n- [ ] while **avoiding future telemetry notifications** at updates\r\n\r\nis reasonable to ask for.\r\n\r\nBy **preemptively** I mean it should not start collecting data, only after the first notification is shown to the user.  \r\nI would suggest a command `dotnet telemetry on/off` to be an **easy way** to turn off the telemetry.  \r\nIt is important that it should turn off the telemetry **permanently**, so future updates won't set it back. I can't imagine that the user's intention is that updates to turn on the telemetry. \r\nAnd finally the purpose of **avoiding future telemetry notifications** is more like making sure the user won't get uncomfortable by reminding him or her about a feature (that is already turned off) that he or she may consider to be slightly unethical.\r\n![image](https://user-images.githubusercontent.com/9156103/50279307-9cb8ef00-0449-11e9-9cf4-d2fa0305961f.png)  ","Url":"https://github.com/dotnet/cli/issues/10497","RelatedDescription":"Closed issue \"Implement `dotnet telemetry on/off` command\" (#10497)"},{"Id":"393172376","IsPullRequest":false,"CreatedAt":"2018-12-20T19:00:41","Actor":"wli3","Number":"10499","RawContent":null,"Title":"Add run `dotnet new tool-manifest` to the error message of cannot find manifest","State":"open","Body":"We should guide the user to run _dotnet new tool-manifest_ if they want to create it when there is no manifest in _dotnet tool restore_ or _dotnet tool install mytool_ ","Url":"https://github.com/dotnet/cli/issues/10499","RelatedDescription":"Open issue \"Add run `dotnet new tool-manifest` to the error message of cannot find manifest\" (#10499)"},{"Id":"392809570","IsPullRequest":false,"CreatedAt":"2018-12-19T22:53:17","Actor":"nguerrera","Number":"10496","RawContent":null,"Title":"Determine how to version in-box RID graph","State":"open","Body":"For initial bring-up, we will have exactly one version of the RID graph in the .NET Core SDK.\r\n\r\nWe need to figure out how to prevent breaking changes. By this we mean that we don't want the assets selected in a build to change with an sdk change and no project change. We thought about versioning it by TFM, but there's just one Platforms package today with increasing version for all TFMs.\r\n\r\ncc @dsplaisted \r\n\r\n","Url":"https://github.com/dotnet/cli/issues/10496","RelatedDescription":"Open issue \"Determine how to version in-box RID graph\" (#10496)"},{"Id":"392592476","IsPullRequest":true,"CreatedAt":"2018-12-19T18:16:02","Actor":"dotnet-maestro[bot]","Number":"10495","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/sdk\r\n\r\n- Microsoft.NET.Sdk - 3.0.100-preview.18618.1\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/10495","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#10495)"},{"Id":"392432051","IsPullRequest":false,"CreatedAt":"2018-12-19T17:50:40","Actor":"aaronlcope","Number":"10493","RawContent":null,"Title":"dotnet build-server shutdown won't stop dotnet.exe during tests","State":"closed","Body":"## Steps to reproduce\r\n(inside a shell script)\r\ndotnet test /nodereuse:false\r\n\r\nCtrl-C to exit build. \r\nCtrl-C is trapped on user entry (snippet from shell script)\r\ntrap \"trap_ctrlc\" 2\r\nfunction trap_ctrlc ()\r\n{\r\n    dotnet build-server shutdown --msbuild --razor --vbcscompiler\r\n    # where is the option for tests? --test\r\n    # IMPORTANT: my project uses xunit\r\n    exit 2\r\n}\r\n\r\n## Expected  behavior\r\nI would think that the tests run under msbuild...which, if you cancel during the middle of tests, the shutdown of the build server should kill the associated dotnet.exe processes, but it doesn't. I try to build again w/out shutting those processes down and the build fails b/c the dll is in use (by one or both of the orphaned dotnet.exe processes). As soon as I manually kill the orphaned dotnet.exe processes in task manager, I can then build again.\r\n\r\n## Actual behavior\r\nIf I cancel (Ctrl-C) prior to the tests starting, the build server shuts down all the dotnet.exe processes properly. The only orphaned dotnet.exe processes left around on cancellation of the shell script is whenever I interrupt the script while the xunit test runner is running.\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.101\r\n Commit:    236713b0b7\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  6.1.7601\r\n OS Platform: Windows\r\n RID:         win7-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.101\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  1.0.0-preview1-002702 [C:\\Program Files\\dotnet\\sdk]\r\n  1.0.0-preview2-003121 [C:\\Program Files\\dotnet\\sdk]\r\n  1.0.0-preview2-003131 [C:\\Program Files\\dotnet\\sdk]\r\n  1.0.0 [C:\\Program Files\\dotnet\\sdk]\r\n  1.0.4 [C:\\Program Files\\dotnet\\sdk]\r\n  2.0.3 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.2 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.4 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.102 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.103 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.104 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.200 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.201 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.202 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.302 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.400 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.401 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.402 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.403 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.500 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.101 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.0-rc2-3002702 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.0.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.0.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.0.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.3-servicing-26724-03 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/10493","RelatedDescription":"Closed issue \"dotnet build-server shutdown won't stop dotnet.exe during tests\" (#10493)"},{"Id":"392369304","IsPullRequest":false,"CreatedAt":"2018-12-18T22:51:18","Actor":"richlander","Number":"10492","RawContent":null,"Title":"Cannot use `dotnet new` to target older runtimes","State":"open","Body":"I have both .NET Core 3 Preview 1 and .NET Core 2.2 SDKs installed. I want to do this:\r\n\r\n```console\r\ndotnet new console --framework netcoreapp2.2 -o app22\r\n```\r\nIt doesn't work. I'm not happy using global.json for this scenario. I should be able to target any .NET Core version that I want. If that version isn't supported on my machine currently, I should get instructions on what to do.\r\n\r\nSomething like this: https://github.com/dotnet/templating/blob/master/README.md#info-for-dotnet-new-users ","Url":"https://github.com/dotnet/cli/issues/10492","RelatedDescription":"Open issue \"Cannot use `dotnet new` to target older runtimes\" (#10492)"},{"Id":"392340749","IsPullRequest":true,"CreatedAt":"2018-12-18T21:21:03","Actor":"vitek-karas","Number":"10491","RawContent":null,"Title":"Improve --roll-forward-on-no-candidate-fx usage text.","State":"open","Body":"Make it explicit that the --roll-forward-on-no-candidate-fx options requires a value. Modify the description since the argument sets the behavior (it doesn't just enable it, it can also disable and so on).\r\n\r\nRelated to dotnet/core-setup#4873","Url":"https://github.com/dotnet/cli/pull/10491","RelatedDescription":"Open PR \"Improve --roll-forward-on-no-candidate-fx usage text.\" (#10491)"},{"Id":"392147416","IsPullRequest":true,"CreatedAt":"2018-12-18T18:06:19","Actor":"dotnet-maestro[bot]","Number":"10489","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18617.7\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/10489","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#10489)"},{"Id":"392147458","IsPullRequest":true,"CreatedAt":"2018-12-18T17:44:43","Actor":"dotnet-maestro[bot]","Number":"10490","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/sdk\r\n\r\n- Microsoft.NET.Sdk - 3.0.100-preview.18617.2\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/10490","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#10490)"},{"Id":"392005502","IsPullRequest":true,"CreatedAt":"2018-12-18T05:45:15","Actor":"flcdrg","Number":"10488","RawContent":null,"Title":"dotnet-install.ps1 - Only modify PATH if necessary","State":"open","Body":"Implements #10487\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/10488","RelatedDescription":"Open PR \"dotnet-install.ps1 - Only modify PATH if necessary\" (#10488)"},{"Id":"392001609","IsPullRequest":false,"CreatedAt":"2018-12-18T05:24:25","Actor":"flcdrg","Number":"10487","RawContent":null,"Title":"dotnet-install.ps1 always modifies PATH","State":"open","Body":"## Steps to reproduce\r\n\r\nRun dotnet-install.ps1 more than once\r\n\r\n## Expected  behavior\r\n\r\nOnly one instance of \"C:\\Users\\David\\AppData\\Local\\Microsoft\\dotnet\" exists in PATH\r\n\r\n## Actual behavior\r\n\r\nPATH contains multiple references to the same directory\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/10487","RelatedDescription":"Open issue \"dotnet-install.ps1 always modifies PATH\" (#10487)"},{"Id":"391959966","IsPullRequest":false,"CreatedAt":"2018-12-18T01:34:42","Actor":"wli3","Number":"10486","RawContent":null,"Title":"Block --interactive and --verbose:quiet","State":"open","Body":"only warning and error will show. So the output of `--interactive` will not be printed. Need to consider where to implement this, MSBuild or CLI","Url":"https://github.com/dotnet/cli/issues/10486","RelatedDescription":"Open issue \"Block --interactive and --verbose:quiet\" (#10486)"},{"Id":"391940539","IsPullRequest":true,"CreatedAt":"2018-12-18T00:01:08","Actor":"dotnet-bot","Number":"10485","RawContent":null,"Title":"Merge release/2.2.1xx to release/2.2.2xx","State":"open","Body":"\nThis is an automatically generated pull request from release/2.2.1xx into release/2.2.2xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.2.1xx-to-release/2.2.2xx\ngit reset --hard upstream/release/2.2.2xx\ngit merge upstream/release/2.2.1xx\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.2.1xx-to-release/2.2.2xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/cli/pull/10485","RelatedDescription":"Open PR \"Merge release/2.2.1xx to release/2.2.2xx\" (#10485)"},{"Id":"391911957","IsPullRequest":false,"CreatedAt":"2018-12-17T22:14:07","Actor":"allanrodriguez","Number":"10484","RawContent":null,"Title":"NETSDK1007 error when building solution with ProjectReference tags in specific order","State":"open","Body":"## Steps to reproduce\r\n1. Build the [attached solution](https://github.com/dotnet/cli/files/2688002/NetSdk1007.zip). It should build successfully.\r\n2. In the NetSdk1007/NetSdk1007.csproj file, switch the position of the two ProjectReference tags such that they look like this:\r\n```\r\n<ItemGroup>\r\n  <ProjectReference Include=\"..\\Dependency.Mocks\\Dependency.Mocks.csproj\" />\r\n  <ProjectReference Include=\"..\\LibraryUnderTest\\LibraryUnderTest.csproj\" />\r\n</ItemGroup>\r\n```\r\n3. Rebuild the solution using `dotnet build --no-incremental`.\r\n\r\n## Expected  behavior\r\nThe solution should build successfully for the .NET Core 2.1 and .NET Framework 4.7.1 platforms as in step 1.\r\n\r\n## Actual behavior\r\nBuilding the solution fails with the error `NETSDK1007: Cannot find project info for 'C:\\Projects\\NetSdk1007\\Dependency\\Dependency.csproj'. This can indicate a missing project reference.` The .NET Core build fails but the .NET Framework build succeeds.\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.1.502\r\n Commit:    c74ce8f29f\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.15063\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.502\\\r\n\r\nHost (useful for support):\r\n\r\n  Version: 2.1.6\r\n  Commit:  3f4f8eebd8\r\n\r\n.NET Core SDKs installed:\r\n  2.1.202 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.500 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:`\r\n  Microsoft.AspNetCore.All 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n```","Url":"https://github.com/dotnet/cli/issues/10484","RelatedDescription":"Open issue \"NETSDK1007 error when building solution with ProjectReference tags in specific order\" (#10484)"},{"Id":"391702774","IsPullRequest":true,"CreatedAt":"2018-12-17T16:55:36","Actor":"dotnet-maestro[bot]","Number":"10483","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/sdk\r\n\r\n- Microsoft.NET.Sdk - 3.0.100-preview.18616.3\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/10483","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#10483)"},{"Id":"391702745","IsPullRequest":true,"CreatedAt":"2018-12-17T16:55:24","Actor":"dotnet-maestro[bot]","Number":"10482","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18616.5\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/10482","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#10482)"},{"Id":"391562210","IsPullRequest":false,"CreatedAt":"2018-12-17T16:40:14","Actor":"John0King","Number":"10480","RawContent":null,"Title":"`dotnet build /p:myproperty=value`  not always set property and no `dotnet run /p:property=value`","State":"closed","Body":"## Steps to reproduce\r\n1. create a console project \r\n```csproj\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <OutputType>Exe</OutputType>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n\r\n  <PropertyGroup>\r\n    <DefineConstants Condition=\" '$(XXX)' == '1'\">X1</DefineConstants>\r\n    <DefineConstants Condition=\" '$(XXX)' == '2'\">X2</DefineConstants>\r\n    <DefineConstants Condition=\" '$(XXX)' == '3'\">X3</DefineConstants>\r\n  </PropertyGroup>\r\n  <Target Name=\"LogMyX\" BeforeTargets=\"Build\">\r\n    <Message Importance=\"high\" Text=\"'MyLogX $(XXX)'\" />\r\n  </Target>\r\n  <Target Name=\"LogMyXX\" AfterTargets=\"Build\">\r\n    <Message Importance=\"high\" Text=\"'MyLogX $(XXX)'\" />\r\n  </Target>\r\n</Project>\r\n```\r\n2. create a .cs file \r\n```C#\r\nclass Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n#if X1 \r\n            Console.WriteLine(\"Hello X1!\");\r\n#elif X2\r\n            Console.WriteLine(\"Hello X2!\");\r\n#elif X3\r\n            Console.WriteLine(\"Hello X3!\");\r\n#endif\r\n        }\r\n    }\r\n```\r\n## Expected  behavior\r\n`dotnet build /p:xxx=1`  =>compile log:\"MyLogX 1\"=>(run)  => \"Hello X1\"\r\n`dotnet build /p:xxx=2`  =>compile log:\"MyLogX 2\"=>(run)  => \"Hello X2\"\r\n`dotnet build /p:xxx=3`  =>compile log:\"MyLogX 3\"=>(run)  => \"Hello X3\"\r\n\r\n## Actual behavior\r\n`dotnet build /p:xxx=1`  =>compile log:\"MyLogX 1\"=>(run)  => \"Hello X1\"\r\n`dotnet build /p:xxx=2`  =>compile log:\"MyLogX 2\"=>(run)  => \"Hello X1\"\r\n`dotnet build /p:xxx=3`  =>compile log:\"MyLogX 3\"=>(run)  => \"Hello X1\"\r\n\r\n**I must use `dotnet clean` before `dotnet build`  or save the csproj file again**\r\n\r\nand I can not use `dotnet run /p:xxx=1`\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n```\r\n.NET Core SDK（反映任何 global.json）:\r\n Version:   2.1.502\r\n Commit:    c74ce8f29f\r\n\r\n运行时环境:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.502\\\r\n\r\nHost (useful for support):\r\n  Version: 2.1.6\r\n  Commit:  3f4f8eebd8\r\n\r\n.NET Core SDKs installed:\r\n  2.1.202 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.401 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.402 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.403 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.500 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/10480","RelatedDescription":"Closed issue \"`dotnet build /p:myproperty=value`  not always set property and no `dotnet run /p:property=value`\" (#10480)"},{"Id":"391694348","IsPullRequest":false,"CreatedAt":"2018-12-17T16:36:11","Actor":"mmisztal1980","Number":"10481","RawContent":null,"Title":"dotnet restore hangs on a TFS build agent","State":"closed","Body":"## Steps to reproduce\r\nHere's our build log obtained with **dotnet restore -v diag**\r\nhttps://gist.github.com/mmisztal1980/6ce8e016da620efbf0aa4693d4bc85b9\r\n\r\n## Expected  behavior\r\nWe expect our build agent to complete this step (TFS dotnet task  v2.*, targeting **/*.csproj (linked by default))\r\n\r\n## Actual behavior\r\nThe build appears to hang after iterating over the last project in the **/*.csproj.\r\nThe last target appears to be **_GenerateRestoreProjectPathWalk** \r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\noctopus@build14:~/agent/_work/1/s/src$ dotnet --info\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.1.500\r\n Commit:    b68b931422\r\n\r\nRuntime Environment:\r\n OS Name:     ubuntu\r\n OS Version:  18.04\r\n OS Platform: Linux\r\n RID:         ubuntu.18.04-x64\r\n Base Path:   /usr/share/dotnet/sdk/2.1.500/\r\n\r\nHost (useful for support):\r\n  Version: 2.1.6\r\n  Commit:  3f4f8eebd8\r\n\r\n.NET Core SDKs installed:\r\n  2.1.500 [/usr/share/dotnet/sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [/usr/share/dotnet/shared/Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [/usr/share/dotnet/shared/Microsoft.NETCore.App]\r\n\r\n\r\nWe'd apreciate some information how to diagnose this situation as we do not see any errors. This behavior has been observed in the master and feature branches of our repo.\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/10481","RelatedDescription":"Closed issue \"dotnet restore hangs on a TFS build agent\" (#10481)"},{"Id":"391412591","IsPullRequest":false,"CreatedAt":"2018-12-17T01:39:35","Actor":"AArnott","Number":"10477","RawContent":null,"Title":"dotnet.exe claims `--roll-forward-on-no-candidate-fx` switch exists, but denies that if you use it","State":"closed","Body":"The dotnet CLI tool documents that a `--roll-forward-on-no-candidate-fx` switch exists:\r\n\r\n```\r\ndotnet -h\r\n.NET Core SDK (3.0.100-preview-009812)\r\nUsage: dotnet [runtime-options] [path-to-application] [arguments]\r\n\r\nExecute a .NET Core application.\r\n\r\nruntime-options:\r\n  --additionalprobingpath <path>     Path containing probing policy and assemblies to probe for.\r\n  --additional-deps <path>           Path to additional deps.json file.\r\n  --fx-version <version>             Version of the installed Shared Framework to use to run the application.\r\n  --roll-forward-on-no-candidate-fx  Roll forward on no candidate shared framework is enabled.\r\n\r\npath-to-application:\r\n  The path to an application .dll file to execute.\r\n```\r\n\r\nBut when I use it, it denies that it's a valid switch, and follows up with usage docs that once again repeat that it *does* exist.\r\n\r\n## Expected  behavior\r\n\r\nI expect it to run like it does without the switch:\r\n\r\n```\r\ndotnet D:\\git\\Nerdbank.GitVersioning\\src\\nerdbank-gitversioning.npm\\out\\nbgv.cli\\tools\\netcoreapp2.1\\any\\nbgv.dll get-version\r\nVersion:                      2.3.41.20022\r\nAssemblyVersion:              2.3.41.20022\r\nAssemblyInformationalVersion: 2.3.41+364e6d9de7\r\nNuGet package Version:        2.3.41-g364e6d9de7\r\nNPM package Version:          2.3.41-364e6d9de7\r\n```\r\n\r\n## Actual behavior\r\n\r\nIt fails, claiming the switch isn't recognized:\r\n\r\n```\r\ndotnet --roll-forward-on-no-candidate-fx D:\\git\\Nerdbank.GitVersioning\\src\\nerdbank-gitversioning.npm\\out\\nbgv.cli\\tools\\netcoreapp2.1\\any\\nbgv.dll get-version\r\nUnknown option: --roll-forward-on-no-candidate-fx\r\n.NET Core SDK (3.0.100-preview-009812)\r\nUsage: dotnet [runtime-options] [path-to-application] [arguments]\r\n\r\nExecute a .NET Core application.\r\n\r\nruntime-options:\r\n  --additionalprobingpath <path>     Path containing probing policy and assemblies to probe for.\r\n  --additional-deps <path>           Path to additional deps.json file.\r\n  --fx-version <version>             Version of the installed Shared Framework to use to run the application.\r\n  --roll-forward-on-no-candidate-fx  Roll forward on no candidate shared framework is enabled.\r\n\r\npath-to-application:\r\n  The path to an application .dll file to execute.\r\n\r\nUsage: dotnet [sdk-options] [command] [command-options] [arguments]\r\n\r\nExecute a .NET Core SDK command.\r\n\r\nsdk-options:\r\n  -d|--diagnostics  Enable diagnostic output.\r\n  -h|--help         Show command line help.\r\n  --info            Display .NET Core information.\r\n  --list-runtimes   Display the installed runtimes.\r\n  --list-sdks       Display the installed SDKs.\r\n  --version         Display .NET Core SDK version in use.\r\n\r\nSDK commands:\r\n  add               Add a package or reference to a .NET project.\r\n  build             Build a .NET project.\r\n  build-server      Interact with servers started by a build.\r\n  clean             Clean build outputs of a .NET project.\r\n  help              Show command line help.\r\n  list              List project references of a .NET project.\r\n  migrate           Migrate a project.json project to an MSBuild project.\r\n  msbuild           Run Microsoft Build Engine (MSBuild) commands.\r\n  new               Create a new .NET project or file.\r\n  nuget             Provides additional NuGet commands.\r\n  pack              Create a NuGet package.\r\n  publish           Publish a .NET project for deployment.\r\n  remove            Remove a package or reference from a .NET project.\r\n  restore           Restore dependencies specified in a .NET project.\r\n  run               Build and run a .NET project output.\r\n  sln               Modify Visual Studio solution files.\r\n  store             Store the specified assemblies in the runtime package store.\r\n  test              Run unit tests using the test runner specified in a .NET project.\r\n  tool              Install or manage tools that extend the .NET experience.\r\n  vstest            Run Microsoft Test Engine (VSTest) commands.\r\n\r\nAdditional commands from bundled tools:\r\n  dev-certs         Create and manage development certificates.\r\n  ef                Entity Framework Core command-line tools.\r\n  sql-cache         SQL Server cache command-line tools.\r\n  user-secrets      Manage development user secrets.\r\n  watch             Start a file watcher that runs a command when files change.\r\n\r\nRun 'dotnet [command] --help' for more information on a command.\r\n```\r\n\r\n## Environment data\r\n\r\n```\r\ndotnet --info\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview-009812\r\n Commit:    e3abf6e935\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17763\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview-009812\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview-27122-01\r\n  Commit:  00c5c8bc40\r\n\r\n.NET Core SDKs installed:\r\n  2.1.4 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.100 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.101 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.102 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.103 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.104 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.200 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.201 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.202 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.300 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.400-preview-009063 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.400-preview-009088 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.400-preview-009171 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.400 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.401 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.402 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.403 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.500-preview-009266 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.500-preview-009297 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.500-preview-009324 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.500-preview-009335 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.500-preview-009398 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.500-preview-009404 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.500 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.600-preview-009426 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.200-preview-009431 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.200-preview-009648 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview-009812 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.0-preview3-35364 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.0-preview3-35364 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview-18579-0056 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.3-servicing-26724-03 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.5-servicing-26911-03 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0-preview3-27001-02 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview-27122-01 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-alpha-27128-4 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/10477","RelatedDescription":"Closed issue \"dotnet.exe claims `--roll-forward-on-no-candidate-fx` switch exists, but denies that if you use it\" (#10477)"},{"Id":"391443346","IsPullRequest":false,"CreatedAt":"2018-12-16T21:15:15","Actor":"rbonestell","Number":"10478","RawContent":null,"Title":"dotnet pack includes extraneous files making nupkg large ","State":"closed","Body":"## Steps to reproduce\r\n1. Create a .NET Core 2.1 class library containing at least 1 class.\r\n2. Add values to the following properties of your .csproj\r\n- PackageId\r\n- Description\r\n3. Run `dotnet pack` on that new project.\r\n\r\n## Expected  behavior\r\nResulting .nupkg contains only the .dll output of the class library project in the lib/netcoreapp2.1/ folder contained within, and the entire nupkg size should be in the single-digit KBs.\r\n\r\n_When the .csproj file **doesn't** have the `<PackageId>` or `<Description>` nodes within the `<PropertyGroup>` then the resulting .nupkg file is ~3**KB**._\r\n\r\n## Actual behavior\r\nResulting .nupkg contains large list of Microsoft System, netstandard, etc. DLL files causing the package to balloon over 2MB in size.\r\n\r\n_When the .csproj file **does** have the `<PackageId>` or `<Description>` nodes within the `<PropertyGroup>` then the resulting .nupkg file is ~2.5**MB**._\r\n\r\nScreenshot of resulting nupkg lib folder contents: https://i.imgur.com/vcsXbvo.png\r\n\r\n**Note:** This occurs on every machine I've attempted this on (Windows and MacOS) as well as AppVeyor CI.\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    51868761f2\r\n\r\nRuntime Environment:\r\n OS Name:     Mac OS X\r\n OS Version:  10.14\r\n OS Platform: Darwin\r\n RID:         osx.10.14-x64\r\n Base Path:   /usr/local/share/dotnet/sdk/2.2.100/\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/10478","RelatedDescription":"Closed issue \"dotnet pack includes extraneous files making nupkg large \" (#10478)"},{"Id":"391471697","IsPullRequest":false,"CreatedAt":"2018-12-16T14:18:37","Actor":"fubar-coder","Number":"10479","RawContent":null,"Title":"dotnet --info shows runtimes and sdks twice","State":"open","Body":"## Steps to reproduce\r\n\r\ndotnet --info\r\n\r\n## Expected  behavior\r\n\r\nShow every SDK and runtime once.\r\n\r\n## Actual behavior\r\n\r\nShows every SDK and runtime twice.\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n```text\r\n.NET Core SDK (gemäß \"global.json\"):\r\n Version:   2.2.101\r\n Commit:    236713b0b7\r\n\r\nLaufzeitumgebung:\r\n OS Name:     Windows\r\n OS Version:  10.0.17763\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   c:\\program files\\dotnet\\sdk\\2.2.101\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  1.0.4 [C:\\Program Files\\dotnet\\sdk]\r\n  1.0.4 [c:\\program files\\dotnet\\sdk]\r\n  2.1.201 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.201 [c:\\program files\\dotnet\\sdk]\r\n  2.1.202 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.202 [c:\\program files\\dotnet\\sdk]\r\n  2.1.301 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.301 [c:\\program files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [c:\\program files\\dotnet\\sdk]\r\n  2.2.101 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.101 [c:\\program files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.1 [c:\\program files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.6 [c:\\program files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.0 [c:\\program files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.1 [c:\\program files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.6 [c:\\program files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.0 [c:\\program files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.5 [c:\\program files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.2 [c:\\program files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.7 [c:\\program files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [c:\\program files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.1 [c:\\program files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [c:\\program files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [c:\\program files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n","Url":"https://github.com/dotnet/cli/issues/10479","RelatedDescription":"Open issue \"dotnet --info shows runtimes and sdks twice\" (#10479)"}],"ResultType":"GitHubIssue"},"Standard-Issues":{"Issues":[{"Id":"393009607","IsPullRequest":false,"CreatedAt":"2018-12-21T01:08:29","Actor":"ViktorHofer","Number":"1036","RawContent":null,"Title":"Disable Jenkins","State":"closed","Body":"We need to disable Jenkins so I doesn't get queued in a PR anymore and if not already done point mc.dot.net to the new Azure DevOps run. I also noticed that the last official build happened 12/3, maybe the cron job is not configured right?","Url":"https://github.com/dotnet/standard/issues/1036","RelatedDescription":"Closed issue \"Disable Jenkins\" (#1036)"},{"Id":"393267915","IsPullRequest":true,"CreatedAt":"2018-12-21T00:51:26","Actor":"ViktorHofer","Number":"1040","RawContent":null,"Title":"Remove the manual config system","State":"open","Body":"Fixes https://github.com/dotnet/standard/issues/1032","Url":"https://github.com/dotnet/standard/pull/1040","RelatedDescription":"Open PR \"Remove the manual config system\" (#1040)"},{"Id":"393264404","IsPullRequest":true,"CreatedAt":"2018-12-21T00:34:01","Actor":"terrajobst","Number":"1039","RawContent":null,"Title":"Fix representation of enum values","State":"open","Body":"We finally fixed the missing feature in our source emitter so that it now includes a human readable bitmask rather than the underlying value.\r\n\r\n***This doesn't change any API surface but makes diffs more human readable.***","Url":"https://github.com/dotnet/standard/pull/1039","RelatedDescription":"Open PR \"Fix representation of enum values\" (#1039)"},{"Id":"393171059","IsPullRequest":true,"CreatedAt":"2018-12-20T19:19:30","Actor":"wtgodbe","Number":"1038","RawContent":null,"Title":"Add APICompat run for NetStandard2.0","State":"closed","Body":"Adds ApiCompat coverage for .netstandard2.0\r\n\r\n@ViktorHofer @terrajobst PTAL\r\n\r\nresolves https://github.com/dotnet/standard/issues/1029","Url":"https://github.com/dotnet/standard/pull/1038","RelatedDescription":"Closed or merged PR \"Add APICompat run for NetStandard2.0\" (#1038)"},{"Id":"392786865","IsPullRequest":false,"CreatedAt":"2018-12-20T19:19:30","Actor":"wtgodbe","Number":"1029","RawContent":null,"Title":"Add ApiCompat run for netstandard2.0","State":"closed","Body":"We should add an APICompat run that checks against 2.0, similar the ones we already have for 1.0-1.6: https://github.com/dotnet/standard/blob/master/apicompat/baselines/ApiCompatBaseline.netstandard1.6.txt","Url":"https://github.com/dotnet/standard/issues/1029","RelatedDescription":"Closed issue \"Add ApiCompat run for netstandard2.0\" (#1029)"},{"Id":"393005614","IsPullRequest":true,"CreatedAt":"2018-12-20T18:07:43","Actor":"ViktorHofer","Number":"1035","RawContent":null,"Title":"Cleanup files after arcade switch & update baseline","State":"closed","Body":"Cleaning up some leftovers and running the build once to regenerate the baseline files.\r\n\r\nOpened https://github.com/dotnet/standard/issues/1031 and https://github.com/dotnet/standard/issues/1032 which should also be done.\r\n\r\nFailing CI jobs are leftovers: https://github.com/dotnet/standard/issues/1036\r\n\r\ncc @danmosemsft ","Url":"https://github.com/dotnet/standard/pull/1035","RelatedDescription":"Closed or merged PR \"Cleanup files after arcade switch & update baseline\" (#1035)"},{"Id":"393015237","IsPullRequest":false,"CreatedAt":"2018-12-20T11:58:02","Actor":"ViktorHofer","Number":"1037","RawContent":null,"Title":"Group source items in a src folder","State":"open","Body":"We should move\r\n- netstandard\r\n- platforms\r\n- apicompat\r\n- dir.traversal.targets\r\n- package.builds\r\n- src.builds\r\n\r\ninto a `src` folder to align with other dotnet repos.\r\n\r\ncc @wtgodbe @danmosemsft @terrajobst","Url":"https://github.com/dotnet/standard/issues/1037","RelatedDescription":"Open issue \"Group source items in a src folder\" (#1037)"},{"Id":"393001679","IsPullRequest":true,"CreatedAt":"2018-12-20T11:31:22","Actor":"ViktorHofer","Number":"1034","RawContent":null,"Title":"Cleanup files after arcade switch & update baseline","State":"closed","Body":"Cleaning up some leftovers and running the build once to regenerate the baseline files.\r\n\r\nOpened https://github.com/dotnet/standard/issues/1031 and https://github.com/dotnet/standard/issues/1032 which should also be done.\r\n\r\ncc @danmosemsft ","Url":"https://github.com/dotnet/standard/pull/1034","RelatedDescription":"Closed or merged PR \"Cleanup files after arcade switch & update baseline\" (#1034)"},{"Id":"392986163","IsPullRequest":false,"CreatedAt":"2018-12-20T10:40:01","Actor":"ViktorHofer","Number":"1032","RawContent":null,"Title":"Remove slim configuration system and stop overloading Configuration","State":"open","Body":"We should stop overloading the `Configuration` property in favor of the right msbuild properties and remove the `ConfigurationGroup` property to enable native VS support and remove a lot of obsolete stuff.\r\n\r\n```\r\n  <PropertyGroup Condition=\"'$(Configuration)'==''\">\r\n    <ConfigurationGroup Condition=\"'$(ConfigurationGroup)'==''\">Debug</ConfigurationGroup>\r\n    <Configuration>$(ConfigurationGroup)</Configuration>\r\n    <Configuration Condition=\"'$(TargetGroup)'!=''\">$(TargetGroup)_$(Configuration)</Configuration>\r\n    <Configuration Condition=\"'$(OSGroup)'!='' and '$(OSGroup)'!='AnyOS'\">$(OSGroup)_$(Configuration)</Configuration>\r\n  </PropertyGroup>\r\n```\r\n\r\ncc @ericstj @wtgodbe ","Url":"https://github.com/dotnet/standard/issues/1032","RelatedDescription":"Open issue \"Remove slim configuration system and stop overloading Configuration\" (#1032)"},{"Id":"392982975","IsPullRequest":false,"CreatedAt":"2018-12-20T10:31:53","Actor":"ViktorHofer","Number":"1031","RawContent":null,"Title":"Remove depproj approach and enable project restore","State":"open","Body":"As discussed in another PR I think it makes sense to remove the depproj approach here in the standard repo and follow the usual way of referencing packages directly in the respective project, in this case netstandard.csproj. Also the netstandard.builds file which restores for different frameworks can be incorporated in the csproj by adding a `TargetFrameworks` property and right PackageReference conditions. \r\n\r\ncc @wtgodbe @ericstj ","Url":"https://github.com/dotnet/standard/issues/1031","RelatedDescription":"Open issue \"Remove depproj approach and enable project restore\" (#1031)"},{"Id":"392822069","IsPullRequest":true,"CreatedAt":"2018-12-20T10:07:40","Actor":"wtgodbe","Number":"1030","RawContent":null,"Title":"Delete CI & redundant publish file","State":"closed","Body":"This deletes the old `netci.groovy` file, since we're using Azure DevOps for CI now. It also deletes `publish.msbuild`, which isn't used anywhere.\r\n\r\n@ViktorHofer PTAL","Url":"https://github.com/dotnet/standard/pull/1030","RelatedDescription":"Closed or merged PR \"Delete CI & redundant publish file\" (#1030)"},{"Id":"391885087","IsPullRequest":true,"CreatedAt":"2018-12-19T23:33:25","Actor":"wtgodbe","Number":"1027","RawContent":null,"Title":"Build Standard entirely against Arcade, without Buildtools","State":"closed","Body":"This cuts out buildtools entirely from the Standard repo, so that we fully rely on the Arcade SDK to build against instead. It replaces the functionality for code analyzers, `ValidateApiCompatForSrc`, and the build tasks.\r\n\r\n@ericstj @safern @danmosemsft @ViktorHofer @chcosta PTAL\r\n\r\nCC @karelz ","Url":"https://github.com/dotnet/standard/pull/1027","RelatedDescription":"Closed or merged PR \"Build Standard entirely against Arcade, without Buildtools\" (#1027)"},{"Id":"390377097","IsPullRequest":true,"CreatedAt":"2018-12-19T01:30:18","Actor":"terrajobst","Number":"1013","RawContent":null,"Title":"Add missing readonly modifiers","State":"closed","Body":"This fixes #842 (or at least is a sizable down payment).","Url":"https://github.com/dotnet/standard/pull/1013","RelatedDescription":"Closed or merged PR \"Add missing readonly modifiers\" (#1013)"},{"Id":"390839367","IsPullRequest":true,"CreatedAt":"2018-12-19T01:29:43","Actor":"terrajobst","Number":"1020","RawContent":null,"Title":"Reduce noise in reference assemblies","State":"closed","Body":"This doesn't change any APIs. It's just reducing noise from in the textual diff of the reference assemblies.\r\n\r\n* Fix trailing whitespace (69cb85e)\r\n* Mark types as partial (c9725f7)\r\n* Replace handwritten base calls with generated ones (78649f6)\r\n","Url":"https://github.com/dotnet/standard/pull/1020","RelatedDescription":"Closed or merged PR \"Reduce noise in reference assemblies\" (#1020)"},{"Id":"392146465","IsPullRequest":true,"CreatedAt":"2018-12-18T13:01:40","Actor":"dotnet-maestro[bot]","Number":"1028","RawContent":null,"Title":"Update dependency files","State":"open","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.ApiCompat - 1.0.0-beta.18617.7\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18617.7\r\n- Microsoft.DotNet.Build.Tasks.Packaging - 1.0.0-beta.18617.7\r\n- Microsoft.DotNet.GenAPI - 1.0.0-beta.18617.7\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.ApiCompat - 1.0.0-beta.18618.7\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18618.7\r\n- Microsoft.DotNet.Build.Tasks.Packaging - 1.0.0-beta.18618.7\r\n- Microsoft.DotNet.GenAPI - 1.0.0-beta.18618.7\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1028","RelatedDescription":"Open PR \"Update dependency files\" (#1028)"},{"Id":"390383237","IsPullRequest":true,"CreatedAt":"2018-12-17T19:11:23","Actor":"terrajobst","Number":"1014","RawContent":null,"Title":"Add IAsyncDisposable","State":"closed","Body":"This adds API support for the new C# 8 feature to call dispose asynchronously:\r\n\r\n```C#\r\nawait using(var stream = File.OpenWrite(path))\r\n{\r\n    await data.WriteAsync(stream);\r\n}\r\n```\r\n\r\nFor more details, see:\r\n\r\nhttps://github.com/dotnet/csharplang/blob/master/proposals/async-streams.md","Url":"https://github.com/dotnet/standard/pull/1014","RelatedDescription":"Closed or merged PR \"Add IAsyncDisposable\" (#1014)"},{"Id":"391702003","IsPullRequest":true,"CreatedAt":"2018-12-17T15:07:31","Actor":"dotnet-maestro[bot]","Number":"1026","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.ApiCompat - 1.0.0-beta.18616.5\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18616.5\r\n- Microsoft.DotNet.Build.Tasks.Packaging - 1.0.0-beta.18616.5\r\n- Microsoft.DotNet.GenAPI - 1.0.0-beta.18616.5\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1026","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#1026)"},{"Id":"391465145","IsPullRequest":true,"CreatedAt":"2018-12-16T19:53:13","Actor":"dotnet-maestro[bot]","Number":"1025","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.ApiCompat - 1.0.0-beta.18615.1\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18615.1\r\n- Microsoft.DotNet.Build.Tasks.Packaging - 1.0.0-beta.18615.1\r\n- Microsoft.DotNet.GenAPI - 1.0.0-beta.18615.1\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1025","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#1025)"},{"Id":"391463924","IsPullRequest":false,"CreatedAt":"2018-12-16T12:45:44","Actor":"dmitriyse","Number":"1024","RawContent":null,"Title":"[Proposal] .Net Standard 3.0.0 with breaking changes, semantic versioning and migration toolset","State":"open","Body":"Please open new .NetStandard branch with deep refresh of .Net API surface.\r\nCurrently .NetStandard 2.0 and it's successor .NetStandard 2.1 contains everything that were added in .net since version 1.0. Some API is already outdated and another will become outdated soon.\r\n\r\n.Net Standard 2.1 have some positive movements. It's drops some components to out of standard into additional components.\r\n\r\nBut it's not enough. It's time to stay in .Net Standard only good and modern parts.\r\nFor example:\r\n```CSharp\r\npublic class List<T>\r\n{\r\n     // ...\r\n     void CopyTo(T[] array);\r\n     // ...\r\n}\r\n```\r\ncan be replaced with:\r\n\r\n```CSharp\r\npublic class List<T>\r\n{\r\n     // ...\r\n     void CopyTo(Span<T> output);\r\n     // ...\r\n}\r\n```\r\nAssemblies targeting .NetStandard 2.0, .NetStandard 2.1 and proposed .NetStandard 3.0.0 should be capable to work side-by-side inside the same AppDomain.\r\n\r\nTODO: Add diagram.\r\n","Url":"https://github.com/dotnet/standard/issues/1024","RelatedDescription":"Open issue \"[Proposal] .Net Standard 3.0.0 with breaking changes, semantic versioning and migration toolset\" (#1024)"},{"Id":"391376312","IsPullRequest":true,"CreatedAt":"2018-12-15T13:41:30","Actor":"dotnet-maestro[bot]","Number":"1023","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.ApiCompat - 1.0.0-beta.18614.3\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18614.3\r\n- Microsoft.DotNet.Build.Tasks.Packaging - 1.0.0-beta.18614.3\r\n- Microsoft.DotNet.GenAPI - 1.0.0-beta.18614.3\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1023","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#1023)"},{"Id":"391102384","IsPullRequest":true,"CreatedAt":"2018-12-14T13:21:43","Actor":"dotnet-maestro[bot]","Number":"1021","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.ApiCompat - 1.0.0-beta.18613.20\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18613.20\r\n- Microsoft.DotNet.Build.Tasks.Packaging - 1.0.0-beta.18613.20\r\n- Microsoft.DotNet.GenAPI - 1.0.0-beta.18613.20\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1021","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#1021)"},{"Id":"390833738","IsPullRequest":true,"CreatedAt":"2018-12-13T19:52:44","Actor":"terrajobst","Number":"1019","RawContent":null,"Title":"Require support for default implementations of interfaces","State":"open","Body":"This marker will require all implementations of .NET Standard 2.1 to support default implementations of interfaces. Needless to say that this has runtime impact. The benefit of doing this in the standard is that it allows library authors to use this feature for their interfaces. The downside is that that this is potentially a lot of runtime work. I'm curious to how the board feels about absorbing that change for .NET Standard 2.1, especially @dotnet/nsboard-xamarin and @dotnet/nsboard-unity.","Url":"https://github.com/dotnet/standard/pull/1019","RelatedDescription":"Open PR \"Require support for default implementations of interfaces\" (#1019)"},{"Id":"390830254","IsPullRequest":true,"CreatedAt":"2018-12-13T19:42:55","Actor":"terrajobst","Number":"1018","RawContent":null,"Title":"WIP: Add support for Index and Range","State":"open","Body":"This adds the basic APIs for `Index` and `Range`. However, it misses most of the [companion APIs](https://github.com/dotnet/designs/blob/master/accepted/system-range/system-range.md#companion-apis) because they don't even exist in CoreFx yet. The work is tracked in https://github.com/dotnet/corefx/issues/34076. Once done, I'll update the PR to reflect the final API shape.\r\n\r\nFor now, this PR is just a tracking item to remind us to get it done for 2.1.","Url":"https://github.com/dotnet/standard/pull/1018","RelatedDescription":"Open PR \"WIP: Add support for Index and Range\" (#1018)"},{"Id":"390822437","IsPullRequest":true,"CreatedAt":"2018-12-13T19:20:57","Actor":"terrajobst","Number":"1017","RawContent":null,"Title":"WIP: Add IAsyncEnumerable<T>","State":"open","Body":"This API is depending on the CoreFX work: dotnet/corefx#33909. Once we closed on the design I'll update this PR.","Url":"https://github.com/dotnet/standard/pull/1017","RelatedDescription":"Open PR \"WIP: Add IAsyncEnumerable<T>\" (#1017)"},{"Id":"390444044","IsPullRequest":true,"CreatedAt":"2018-12-13T18:57:05","Actor":"wtgodbe","Number":"1015","RawContent":null,"Title":"Enable publishing to build-assets registry","State":"closed","Body":"Now that Standard is placing build output in `artifacts`, we can opt-in to publishing build assets to the BAR.\r\n\r\n@chcosta @mmitche PTAL","Url":"https://github.com/dotnet/standard/pull/1015","RelatedDescription":"Closed or merged PR \"Enable publishing to build-assets registry\" (#1015)"},{"Id":"390668875","IsPullRequest":true,"CreatedAt":"2018-12-13T13:31:43","Actor":"dotnet-maestro[bot]","Number":"1016","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.ApiCompat - 1.0.0-beta.18612.12\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18612.12\r\n- Microsoft.DotNet.Build.Tasks.Packaging - 1.0.0-beta.18612.12\r\n- Microsoft.DotNet.GenAPI - 1.0.0-beta.18612.12\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1016","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#1016)"},{"Id":"390354570","IsPullRequest":true,"CreatedAt":"2018-12-12T23:16:02","Actor":"terrajobst","Number":"1012","RawContent":null,"Title":"Add private fields for structs","State":"closed","Body":"No public API changes, but this fixes #678. \r\n\r\nIn a nutshell, the compiler needs to know whether a struct has any fields in order to apply definitive assignment rules. While stripping all private fields from types is generally OK, we can't do this for structs. Fortunately, for private fields the compiler doesn't really care what they are, but what their characteristics are. For example:\r\n\r\n1. Does the struct have any fields?\r\n\r\n2. Does the struct contain any reference types (to validate generic instantiations that have the unmanaged constraint)?\r\n\r\n3. Does the struct use the generic parameter in a field declaration (to validate cyclic layout problems)?\r\n\r\nThis adds dummy fields to structs to conform to these rules. These aren't computed separately but are instead taken from .NET Core.\r\n\r\nFor more details, see this issue in CoreFX:\r\n\r\nhttps://github.com/dotnet/corefx/issues/6185","Url":"https://github.com/dotnet/standard/pull/1012","RelatedDescription":"Closed or merged PR \"Add private fields for structs\" (#1012)"},{"Id":"390224712","IsPullRequest":false,"CreatedAt":"2018-12-12T19:00:27","Actor":"YairHalberstadt","Number":"1011","RawContent":null,"Title":"Add HashSet.TryGetValue to .Net Standard","State":"closed","Body":"This method is already implemented by .Net Core 2.0 and .Net Framework 4.7.2, so I imagine this would be relatively easy to include in .Net Standard 2.1.","Url":"https://github.com/dotnet/standard/issues/1011","RelatedDescription":"Closed issue \"Add HashSet.TryGetValue to .Net Standard\" (#1011)"},{"Id":"390052989","IsPullRequest":true,"CreatedAt":"2018-12-12T16:50:02","Actor":"terrajobst","Number":"1009","RawContent":null,"Title":"Clean-up reference assembly","State":"closed","Body":"This aligns the physical representation of the reference assembly with how it look like in .NET Core. No changes to the API surface; it's just to remove noise in future diffs.","Url":"https://github.com/dotnet/standard/pull/1009","RelatedDescription":"Closed or merged PR \"Clean-up reference assembly\" (#1009)"},{"Id":"390215935","IsPullRequest":true,"CreatedAt":"2018-12-12T13:46:59","Actor":"dotnet-maestro[bot]","Number":"1010","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.ApiCompat - 1.0.0-beta.18611.14\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18611.14\r\n- Microsoft.DotNet.Build.Tasks.Packaging - 1.0.0-beta.18611.14\r\n- Microsoft.DotNet.GenAPI - 1.0.0-beta.18611.14\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1010","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#1010)"}],"ResultType":"GitHubIssue"},"CoreFx-Issues":{"Issues":[{"Id":"393707333","IsPullRequest":true,"CreatedAt":"2018-12-22T22:27:56","Actor":"jlennox","Number":"34224","RawContent":null,"Title":"dotnet/corefx#34200 Bring `XmlRawTextWriterGenerator.cxx` up to date.","State":"open","Body":"@krwq Here is one part of the work regarding dotnet/corefx#34200. I do really believe that this could be done without the use of a preprocessor without sacrificing speed using a generic base class. Should I experiment with that? I assume improving testing would come first.\r\n\r\nSomething which caught me off guard is this line: https://github.com/dotnet/corefx/blob/fdec34a223b4a3676a781239748776e9332bee43/src/System.Private.Xml/src/System/Xml/Core/XmlRawTextWriterGenerator.cxx#L426\r\n\r\nIn the existing .cxx there's no #if around it, but I had to add one to keep the file generation consistent with present logic. I could not find why it was removed in the git history. Any ideas?\r\n\r\nI also don't know if you require issues and PR's to be 1:1, that is, #34200 is an aggregate and this only deals with one part of it.","Url":"https://github.com/dotnet/corefx/pull/34224","RelatedDescription":"Open PR \"dotnet/corefx#34200 Bring `XmlRawTextWriterGenerator.cxx` up to date.\" (#34224)"},{"Id":"393703364","IsPullRequest":false,"CreatedAt":"2018-12-22T21:11:58","Actor":"lyzerk","Number":"34223","RawContent":null,"Title":"HttpClient.SendAync freezing","State":"open","Body":"Hello,\r\n\r\nThis week I was preparing to publish a one of the my side projects, which I called it as \"[DDown](https://github.com/lyzerk/DDown)\". It is a downloader API for .net standard 2.0. I'm working on the project almost a year. 3-4 months before everything was working perfect, API was dividing the file to the partitions, the CLI shows a percentage bar and so on. So, this week I wanted to publish the project and I have published it. I was sure everything was working perfectly in side of the API because I wasn't touched anything on the API. On the other hand, the missing part was cli commands and options. So, I have done those things and I published it under name \"deget\" as global dotnet tool. \r\n\r\nThe first problem was, the cli UI was blocked for a minute then partitions are completed without the update cli UI and all done (%100). So, I debugged the code  and the problem was _client.SendAsync method returns response in almost a minute. You can see the code with following address.\r\n\r\n[https://github.com/lyzerk/DDown/blob/master/src/DDown/Downloader.cs#L167](https://github.com/lyzerk/DDown/blob/master/src/DDown/Downloader.cs#L167)\r\n\r\nWhat have I tried ?\r\n- I have tried different sources.\r\n- I have tried the tool on different operating systems (osx and win).\r\n- I have debugged the code and SendAsync method was returning in a minute. (With 200 MB, but with lower file sizes the time decreases.)\r\n- I have watch the network traffic and the tool downloads the file but it does not give back anything and suddenly the download completes. (Not even breakpoints)\r\n- The CLI project was .netcoreapp 2.0 and I have upgraded it to 2.1. I have rollbacked to 2.0 and tried again but still same.\r\n\r\nCLI code of the project :\r\n[https://github.com/lyzerk/DDown/blob/master/src/DDown.CLI/Program.cs](https://github.com/lyzerk/DDown/blob/master/src/DDown.CLI/Program.cs)\r\n\r\nI couldn't find a solution, and I don't know what to do right now. Is it a bug or am I missing something ?\r\n\r\nThanks,\r\nAlim \r\n","Url":"https://github.com/dotnet/corefx/issues/34223","RelatedDescription":"Open issue \"HttpClient.SendAync freezing\" (#34223)"},{"Id":"393693935","IsPullRequest":true,"CreatedAt":"2018-12-22T20:06:19","Actor":"omajid","Number":"34222","RawContent":null,"Title":"Use HMAC_CTX_free() instead of free() on a HMAC_CTX*","State":"closed","Body":"This is a leftover from before the OpenSSL 1.0/1.1 hybridization. There\r\nwas no HMAC_CTX_free() in 1.0.\r\n\r\nFixes #34210\r\n\r\ncc @bartonjs @stephentoub ","Url":"https://github.com/dotnet/corefx/pull/34222","RelatedDescription":"Closed or merged PR \"Use HMAC_CTX_free() instead of free() on a HMAC_CTX*\" (#34222)"},{"Id":"393598223","IsPullRequest":false,"CreatedAt":"2018-12-22T20:06:19","Actor":"omajid","Number":"34210","RawContent":null,"Title":"free() vs HMAC_CTX_free() on a HMAC_CTX","State":"closed","Body":"This might be a stupid question. I am not an OpenSSL expert. I found a `free(ctx)` call that looks a bit surprising to me.\r\n\r\nhttps://github.com/dotnet/corefx/blob/646a539c8654000ae014085abbaf8167d811a827/src/Native/Unix/System.Security.Cryptography.Native/pal_hmac.c#L34\r\n\r\nShouldn't this be a `HMAC_CTX_free(ctx)` instead?","Url":"https://github.com/dotnet/corefx/issues/34210","RelatedDescription":"Closed issue \"free() vs HMAC_CTX_free() on a HMAC_CTX\" (#34210)"},{"Id":"393692954","IsPullRequest":false,"CreatedAt":"2018-12-22T18:14:34","Actor":"Neme12","Number":"34221","RawContent":null,"Title":"API suggestion: System.IO.FileAlreadyExistsException","State":"open","Body":"(similar to #34220)\r\n\r\nScenario: I want to create and write some default data into a file unless it already exists.\r\n\r\nA naive implementation would be:\r\n```c#\r\nif (!File.Exists(path))\r\n{\r\n    using (var fileStream = File.Open(path, FileMode.CreateNew))\r\n    {\r\n        // ...\r\n    }\r\n}\r\n```\r\n\r\nThe problem with this is that I'm accessing the file system at 2 points in time. As @jaredpar has taught me, `File.Exists` is evil. There's no guarantee that because `File.Exists` returned false, the file still won't exist when calling `File.Open`.\r\n\r\nTo be robust, we should just call `File.Open` and catch the exception it throws in case the file already exists. The problem is that it throws `System.IO.IOException` with a message of \"The file already exists\". There is no specific exception type for this scenario. At first it would seem that the only thing we can do is catch the exception depending on its message string (which is a terrible idea), but luckily, there is a specific HResult for this failure, leaving us with:\r\n\r\n```c#\r\nStream fileStream = null;\r\n\r\ntry\r\n{\r\n    fileStream = File.Open(path, FileMode.CreateNew);\r\n}\r\ncatch (IOException e) when (e.HResult == -2147024816) // FILE_EXISTS\r\n{\r\n}\r\n\r\nif (fileStream != null)\r\n{\r\n    using (fileStream)\r\n    {\r\n        // ...\r\n    }\r\n}\r\n```\r\n\r\nThis works OK but makes the code seem unreadable and maybe even brittle because we're depending on a magic constant that comes somewhere from the Windows API. I'm not sure if this code works outside of Windows at all, but even if it does, it's definitely not obvious.\r\n\r\nPlease add a dedicated exception type for this kind of failure.","Url":"https://github.com/dotnet/corefx/issues/34221","RelatedDescription":"Open issue \"API suggestion: System.IO.FileAlreadyExistsException\" (#34221)"},{"Id":"393691345","IsPullRequest":false,"CreatedAt":"2018-12-22T17:49:26","Actor":"Neme12","Number":"34220","RawContent":null,"Title":"API suggestion: System.IO.DirectoryNotEmptyException","State":"open","Body":"Scenario: I want to delete a folder if it's empty.\r\n\r\nA naive implementation would be:\r\n```c#\r\nif (!Directory.EnumerateFileSystemEntries(dir).Any())\r\n    Directory.Delete(dir);\r\n```\r\n\r\nThe problem with this is that I'm accessing the file system at 2 points in time. There's no guarantee that because `EnumerateFileSystemEntries` returned nothing, the directory will still be empty when calling `Directory.Delete`.\r\n\r\nTo be robust, we should just call `Directory.Delete` and catch the exception it throws in case the directory wasn't empty. The problem is that it throws `System.IO.IOException` with a message of \"The directory is not empty\". There is no specific exception type for this scenario. At first it would seem that the only thing we can do is catch the exception depending on its message string (which is a terrible idea), but luckily, there *is* a specific HResult for this failure, leaving us with:\r\n\r\n```c#\r\ntry\r\n{\r\n    Directory.Delete(dir);\r\n}\r\ncatch (IOException e) when (e.HResult == -2147024751) // DIR_NOT_EMPTY\r\n{\r\n}\r\n```\r\nThis works OK but makes the code seem unreadable and maybe even brittle because we're depending on a magic constant that comes somewhere from the Windows API. I'm not sure if this code works outside of Windows at all, but even if it does, it's definitely not obvious.\r\n\r\nPlease add a dedicated exception type for this kind of failure.","Url":"https://github.com/dotnet/corefx/issues/34220","RelatedDescription":"Open issue \"API suggestion: System.IO.DirectoryNotEmptyException\" (#34220)"},{"Id":"393661943","IsPullRequest":false,"CreatedAt":"2018-12-22T10:21:40","Actor":"sansjunk","Number":"34219","RawContent":null,"Title":"System.IO.Packaging API returns non-seekable stream","State":"open","Body":"In the process of porting some .NET Framework code that reads OOXML (specifically Word format) files to .NET Core I have hit a rough patch because the API [`PackagePage.GetStream()`](https://docs.microsoft.com/en-us/dotnet/api/system.io.packaging.packagepart.getstream?view=netcore-2.0#System_IO_Packaging_PackagePart_GetStream) is returning a forward-only Stream (CanSeek is false). The code relies on the stream being random access since the .NET Framework API  returns such a stream. I think this is related to #20558  but in the opposite way since that is talking about having a forward only API. So is the .NET Core API as designed not compatible with .NET Fx and the only way out is to wrap the forward-only stream with a memory buffer?\r\n\r\nHere is code which demonstrates this:\r\n```\r\nstring file = @\"C:\\Temp\\DocStudio\\simple.docx\";\r\nusing (var fileStream = new FileStream(file, FileMode.Open, FileAccess.Read))\r\nusing (var package = Package.Open(fileStream, FileMode.Open, FileAccess.Read))\r\n{\r\n    if (Uri.TryCreate(\"/word/document.xml\", UriKind.Relative, out Uri docUri) && package.PartExists(docUri))\r\n    {\r\n        var documentPart = package.GetPart(docUri);\r\n        using (var stream = documentPart.GetStream())\r\n        {\r\n            var canSeek = stream.CanSeek;\r\n            Console.WriteLine(\"stream canSeek: \" + canSeek);\r\n        }\r\n    }\r\n}\r\n```\r\n","Url":"https://github.com/dotnet/corefx/issues/34219","RelatedDescription":"Open issue \"System.IO.Packaging API returns non-seekable stream\" (#34219)"},{"Id":"393649638","IsPullRequest":true,"CreatedAt":"2018-12-22T06:56:30","Actor":"Dotnet-GitSync-Bot","Number":"34218","RawContent":null,"Title":"Mirror changes from dotnet/corert","State":"open","Body":"This PR contains mirrored changes from dotnet/corert\n\n\n**Please REBASE this PR when merging**\n\n cc @jkotas","Url":"https://github.com/dotnet/corefx/pull/34218","RelatedDescription":"Open PR \"Mirror changes from dotnet/corert\" (#34218)"},{"Id":"393644920","IsPullRequest":true,"CreatedAt":"2018-12-22T05:41:39","Actor":"Dotnet-GitSync-Bot","Number":"34217","RawContent":null,"Title":"Mirror changes from dotnet/corert","State":"closed","Body":"This PR contains mirrored changes from dotnet/corert\n\n\n**Please REBASE this PR when merging**\n\n cc @jkotas","Url":"https://github.com/dotnet/corefx/pull/34217","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corert\" (#34217)"},{"Id":"393633350","IsPullRequest":true,"CreatedAt":"2018-12-22T05:25:04","Actor":"danmosemsft","Number":"34214","RawContent":null,"Title":"Casing fixes","State":"closed","Body":"Making a PR in case @dagood wants me to merge this.\r\nFixes https://github.com/dotnet/corefx/issues/34211","Url":"https://github.com/dotnet/corefx/pull/34214","RelatedDescription":"Closed or merged PR \"Casing fixes\" (#34214)"},{"Id":"393600019","IsPullRequest":false,"CreatedAt":"2018-12-22T05:25:04","Actor":"dagood","Number":"34211","RawContent":null,"Title":"Many references to Common/src/**/Interop code have incorrect casing in the path","State":"closed","Body":"The wrong paths I found were all in `Common/src/CoreLib/Interop/Windows` and `Common/src/Interop/Windows`. It seems this hasn't been causing a problem yet because they're always built on Windows, which uses a case-insensitive file system.\r\n\r\nI hit this because I'm working on getting `-allconfigurations` to compile on Linux (https://github.com/dotnet/source-build/issues/210), and the casing mismatches cause failures.\r\n\r\nI was able to add this target to fix up the `Compile` items (this also shows what the common casing problems are):\r\n\r\n```diff\r\n # In src/Directory.Build.targets\r\n+  <Target Name=\"FixInteropWindowsKernel32PathCasing\"\r\n+          BeforeTargets=\"BeforeCompile\"\r\n+          Condition=\"'@(Compile)' != ''\">\r\n+    <ItemGroup>\r\n+      <_PathToFix\r\n+        Include=\"Common/src/CoreLib/Interop/Windows/kernel32\"\r\n+        FixPath=\"Common/src/CoreLib/Interop/Windows/Kernel32\" />\r\n+      <_PathToFix\r\n+        Include=\"Common/src/CoreLib/Interop/Windows/advapi32\"\r\n+        FixPath=\"Common/src/CoreLib/Interop/Windows/Advapi32\" />\r\n+      <_PathToFix\r\n+        Include=\"Common/src/Interop/Windows/Kernel32\"\r\n+        FixPath=\"Common/src/Interop/Windows/kernel32\" />\r\n+    </ItemGroup>\r\n+\r\n+    <ItemGroup>\r\n+      <_PotentialBadItem\r\n+        Include=\"@(Compile)\"\r\n+        Path=\"%(_PathToFix.Identity)\"\r\n+        Fix=\"%(_PathToFix.FixPath)\" />\r\n+      <_BadInteropItem\r\n+        Include=\"@(_PotentialBadItem)\"\r\n+        Condition=\"$([System.String]::new('%(Identity)').Contains('%(Path)'))\"\r\n+        Fixed=\"$([System.String]::new('%(Identity)').Replace('%(Path)', '%(Fix)'))\" />\r\n+      <Compile Remove=\"@(_BadInteropItem)\" />\r\n+      <Compile Include=\"@(_BadInteropItem -> '%(Fixed)')\" />\r\n+    </ItemGroup>\r\n+  </Target>\r\n```\r\n\r\nI used a target because I didn't want to deal with merge conflicts, but it would probably be better to fix the `Compile` items through the repo. That target is based on 57358b7f7214c233e8397483a9afc1698ac00c5b (v3.0.0-preview.18571.3).","Url":"https://github.com/dotnet/corefx/issues/34211","RelatedDescription":"Closed issue \"Many references to Common/src/**/Interop code have incorrect casing in the path\" (#34211)"},{"Id":"393636892","IsPullRequest":true,"CreatedAt":"2018-12-22T03:28:19","Actor":"Dotnet-GitSync-Bot","Number":"34216","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @marek-safar @jkotas","Url":"https://github.com/dotnet/corefx/pull/34216","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#34216)"},{"Id":"393630053","IsPullRequest":true,"CreatedAt":"2018-12-22T02:50:58","Actor":"Dotnet-GitSync-Bot","Number":"34213","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @fiigii @fiigii @marek-safar @tannergooding @danmosemsft","Url":"https://github.com/dotnet/corefx/pull/34213","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#34213)"},{"Id":"393635281","IsPullRequest":true,"CreatedAt":"2018-12-22T02:26:15","Actor":"dotnet-maestro-bot","Number":"34215","RawContent":null,"Title":"Update CoreClr, CoreFx to preview-27222-01, preview.18621.2, respectively (master)","State":"open","Body":"/cc @dotnet/maestro-reviewers-core","Url":"https://github.com/dotnet/corefx/pull/34215","RelatedDescription":"Open PR \"Update CoreClr, CoreFx to preview-27222-01, preview.18621.2, respectively (master)\" (#34215)"},{"Id":"393595390","IsPullRequest":true,"CreatedAt":"2018-12-22T00:39:35","Actor":"stephentoub","Number":"34209","RawContent":null,"Title":"Replace an empty array with Array.Empty","State":"closed","Body":"Happened to notice it, so changing it.","Url":"https://github.com/dotnet/corefx/pull/34209","RelatedDescription":"Closed or merged PR \"Replace an empty array with Array.Empty\" (#34209)"},{"Id":"393286872","IsPullRequest":true,"CreatedAt":"2018-12-22T00:22:15","Actor":"danmosemsft","Number":"34198","RawContent":null,"Title":"Remove syncroot fields from collections","State":"closed","Body":"CoreFX part of https://github.com/dotnet/corefx/issues/34149. \r\nThis is everything save (1) immutable collections, which I don't want to mess with (2) some marginal types and legacy libraries. \r\n\r\nAlso fix a typo in build-native.cmd.","Url":"https://github.com/dotnet/corefx/pull/34198","RelatedDescription":"Closed or merged PR \"Remove syncroot fields from collections\" (#34198)"},{"Id":"393468750","IsPullRequest":true,"CreatedAt":"2018-12-21T22:24:11","Actor":"StanislavUshakov","Number":"34203","RawContent":null,"Title":"XML documentation errors - removed references to '*.uex' files","State":"closed","Body":"Part of #33934 ","Url":"https://github.com/dotnet/corefx/pull/34203","RelatedDescription":"Closed or merged PR \"XML documentation errors - removed references to '*.uex' files\" (#34203)"},{"Id":"393601344","IsPullRequest":true,"CreatedAt":"2018-12-21T21:55:40","Actor":"stephentoub","Number":"34212","RawContent":null,"Title":"Implement Socket.Send/ReceiveAsync cancellation support","State":"open","Body":"In .NET Core 2.1 we added Socket.Send/ReceiveAsync overloads that worked with {ReadOnly}Memory, and in doing so also added CancellationToken arguments, but in 2.1 those implementations only did an up-front check for cancellation and then ignored the token for the remainder of the operation.\r\n\r\nThis PR addresses that, mostly.  There are two main ways this could be done, both with their own upsides and downsides:\r\n- Track the individual async operations in flight on a Socket.  This provides the most granularity, and does match best with CancellationToken being on the individual Send/ReceiveAsync calls.  However, it doesn't actually apply for TCP operations on Windows, where all pending operations are canceled regardless of whether CancelIoEx was targeted at a specific native overlapped or not.  And it increases the size of SocketAsyncEventArgs by several fields.  And in the scenarios we're aware of, cancellation is generally applied as part of some kind of teardown, where it's unlikely any other operations on the socket will matter after one is canceled.  And it requires tendrils into both the Windows and Unix implementations, in order to track things like the NativeOverlapped pointer on Windows.  It also would require significant work to plumb through to support operations implemented with the older APM implementations, which we do for the Task-based Send/ReceiveAsync when there's already a pending send/receive using the cached SocketAsyncEventArgs instance.\r\n- Cancel all pending I/O on a socket when any operation on the socket is canceled.  This results in a much simpler solution, with very little platform-specific code and that doesn't need any additional fields on SocketAsyncEventArgs, and works regardless of how we've implemented the operation, since it applies to any I/O on the socket and doesn't require us to know the specific NativeOverlapped pointer.  It does sacrifice the fine-grained ability to cancel individual UDP operations on Windows, or any individual operation on Linux, without also canceling other pending operations on the same socket.\r\n\r\nAfter many back and forths playing with both implementations, I've opted for the latter.  If in the future we decide it's not fine-grained enough, we could do the former.\r\n\r\nFixes #24430\r\ncc: @geoffkizer, @davidsh, @wfurt ","Url":"https://github.com/dotnet/corefx/pull/34212","RelatedDescription":"Open PR \"Implement Socket.Send/ReceiveAsync cancellation support\" (#34212)"},{"Id":"393572422","IsPullRequest":true,"CreatedAt":"2018-12-21T21:26:59","Actor":"stephentoub","Number":"34207","RawContent":null,"Title":"Update ExecutorTests command for Unix","State":"closed","Body":"Hopefully this fixes https://github.com/dotnet/corefx/pull/34185#issuecomment-449246163","Url":"https://github.com/dotnet/corefx/pull/34207","RelatedDescription":"Closed or merged PR \"Update ExecutorTests command for Unix\" (#34207)"},{"Id":"393578897","IsPullRequest":true,"CreatedAt":"2018-12-21T20:14:46","Actor":"manofstick","Number":"34208","RawContent":null,"Title":"[WIP - do not merge] ChainLinq","State":"open","Body":"This is a replacement architecture for `System.Linq`.\r\n\r\nThis is a proposal/proof-of-concept - think of it as a Christmas gift - hack-upon it during the holidays to see what you think!\r\n\r\nThis is not complete - but as it is \"plug compatible\" existing implementations of `IEnumerable`s work seemlessly (although those are areas where performance may not be optimial - note also that I have gutted all the previous performance enhancing code).\r\n\r\nThis relies *heavily* on generics and has thrown the thought of minimizing garbage out (i.e. things like the initial `IEnumerator` being the same object as the `IEnumerable`).\r\n\r\nIt is slower on smaller collections (up to maybe a few 10s of items? This is mainly due to the lookups in `JIT_VirtualFunctionPointer` due to the generics use) but faster on larger collections (where the JIT_VirtualFunctionPointer cost drops away). Where the existing System.Linq has a specialized optimization it is pretty hard to beat though. ChainLinq currently doesn't optimize the ElementAt, Last, etc. familiy of optimizations.\r\n\r\nSo there are plenty of reasons to be skeptical, but maybe, just maybe, it could see the light of day on day!\r\n\r\nOK, some details.\r\n\r\nSo why is existing Linq performance bad and what are the current performance work around? This really boils down to two key ideas. The first is that in abstracting away from the underlying collection means that you loose the benefits benefits of how to access that collection, and secondly, the access through `MoveNext` and `Current` is quite chatty.\r\n\r\n`ChainLinq` isolates the collection (which it refers to as a `Consumable`) from the filter/transform  (referred to as a `Link`). `Consumable` is defined as:\r\n\r\n    internal abstract class Consumable<T> : IEnumerable<T>\r\n    {\r\n        public abstract Result Consume<Result>(Consumer<T, Result> consumer);\r\n\r\n        public abstract IEnumerator<T> GetEnumerator();\r\n        IEnumerator IEnumerable.GetEnumerator() => GetEnumerator();\r\n    }\r\n\r\nWhich you can see is just an `IEnumerable` with an extra function `Consume`. The `Consumer` is an actually such as `Aggregate` or `ToList`. \r\n\r\nCreating Consumable uses the following classes:\r\n\r\n    internal abstract class ConsumableForAddition<T> : Consumable<T>\r\n    {\r\n        public abstract Consumable<U> AddTail<U>(ILink<T, U> transform);\r\n    }\r\n\r\n    abstract class ConsumableForMerging<T> : ConsumableForAddition<T>\r\n    {\r\n        public abstract object TailLink { get; }\r\n        public abstract Consumable<V> ReplaceTailLink<Unknown, V>(ILink<Unknown, V> newLink);\r\n    }\r\n\r\nWhere a `ILink<,>` is a function lijke `Select` or `Where`.\r\n\r\nAnyway, I have implemented a lot of the Linq functionality using this framework, but I don't think I'll be able to do much over the next while (weeks?) so thought it might be interesting for people to play around with.\r\n\r\nBut I will try to create some simple performance examples is some follow up posts.\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/34208","RelatedDescription":"Open PR \"[WIP - do not merge] ChainLinq\" (#34208)"},{"Id":"393276793","IsPullRequest":true,"CreatedAt":"2018-12-21T19:19:00","Actor":"stephentoub","Number":"34196","RawContent":null,"Title":"Remove some char[] allocations when creating XML strings","State":"closed","Body":"cc: @buyaa-n, @krwq, @danmosemsft ","Url":"https://github.com/dotnet/corefx/pull/34196","RelatedDescription":"Closed or merged PR \"Remove some char[] allocations when creating XML strings\" (#34196)"},{"Id":"393294916","IsPullRequest":true,"CreatedAt":"2018-12-21T16:59:18","Actor":"dotnet-maestro-bot","Number":"34201","RawContent":null,"Title":"Update CoreClr, CoreFx, ProjectNTfs, ProjectNTfsTestILC to preview-27221-02, preview.18621.1, beta-27221-00, beta-27221-00, respectively (master)","State":"closed","Body":"/cc @dotnet/maestro-reviewers-core","Url":"https://github.com/dotnet/corefx/pull/34201","RelatedDescription":"Closed or merged PR \"Update CoreClr, CoreFx, ProjectNTfs, ProjectNTfsTestILC to preview-27221-02, preview.18621.1, beta-27221-00, beta-27221-00, respectively (master)\" (#34201)"},{"Id":"393514443","IsPullRequest":false,"CreatedAt":"2018-12-21T16:20:15","Actor":"stephentoub","Number":"34206","RawContent":null,"Title":"WriteSurrogateCharEntity reversing chars in surrogate pairs?","State":"open","Body":"As noted in https://github.com/dotnet/corefx/pull/34196#discussion_r243467807, it appears that some WriteSurrogateCharEntity overrides on XmlWriter are reversing the characters supplied.  Some are doing high/low while some are doing low/high.  It should be investigated.","Url":"https://github.com/dotnet/corefx/issues/34206","RelatedDescription":"Open issue \"WriteSurrogateCharEntity reversing chars in surrogate pairs?\" (#34206)"},{"Id":"393283380","IsPullRequest":true,"CreatedAt":"2018-12-21T15:45:43","Actor":"stephentoub","Number":"34197","RawContent":null,"Title":"Replace several `new string(ch, 1)` with `char.ToString(ch)` in System.Xml","State":"closed","Body":"The latter is simpler and faster.\r\n\r\ncc: @buyaa-n, @krwq, @danmosemsft","Url":"https://github.com/dotnet/corefx/pull/34197","RelatedDescription":"Closed or merged PR \"Replace several `new string(ch, 1)` with `char.ToString(ch)` in System.Xml\" (#34197)"},{"Id":"393491929","IsPullRequest":false,"CreatedAt":"2018-12-21T15:12:12","Actor":"stijnherreman","Number":"34205","RawContent":null,"Title":"Possible copy-paste mistake in SqlConnection introduced by AAD Authentication work","State":"open","Body":"The work done for #13660 may have introduced a copy-paste mistake in `SqlConnection`. The change is present in the already released 2.2 (see #31039) and the planned release 3.0 (see #30342).\r\n\r\nThe possible mistake was noticed by @steji113 in the 2.2 PR. It appears that the change at https://github.com/dotnet/corefx/pull/31039/files#diff-78c5752d4a8ee85fdc3593a8851c86e9L1363 was copied to https://github.com/dotnet/corefx/pull/31039/files#diff-78c5752d4a8ee85fdc3593a8851c86e9L1406 and https://github.com/dotnet/corefx/pull/31039/files#diff-78c5752d4a8ee85fdc3593a8851c86e9L1444\r\n\r\nWas this change meant to be done, or is it a mistake?","Url":"https://github.com/dotnet/corefx/issues/34205","RelatedDescription":"Open issue \"Possible copy-paste mistake in SqlConnection introduced by AAD Authentication work\" (#34205)"},{"Id":"393490408","IsPullRequest":false,"CreatedAt":"2018-12-21T15:07:39","Actor":"sparkie108","Number":"34204","RawContent":null,"Title":"Add ResXResourceWriter and associated types","State":"open","Body":"ResXResourceWriter is currrently being added to the WinForms SDK, see https://github.com/dotnet/winforms/issues/216.\r\n\r\nShouldn't ResXResourceWriter and associated types be added to CoreFX instead?  It would then be possible to programatically create resx files without a dependency on the WinForms SDK.  Almost all of the rest of System.Resources is already part of .NET Standard 2.0.","Url":"https://github.com/dotnet/corefx/issues/34204","RelatedDescription":"Open issue \"Add ResXResourceWriter and associated types\" (#34204)"},{"Id":"393460788","IsPullRequest":false,"CreatedAt":"2018-12-21T13:34:19","Actor":"secana","Number":"34202","RawContent":null,"Title":"Different behavior on .Net Framework and Core in SignedCms.CheckSignature","State":"open","Body":"I want to verify a signature contained in a CMS. I used the code below, which works fine on .Net Framework but not in .Net Core.\r\n\r\nI've verified that this is the case with the following code:\r\n\r\n```csharp\r\nusing System;\r\nusing System.IO;\r\nusing System.Security.Cryptography;\r\nusing System.Security.Cryptography.Pkcs;\r\n\r\nnamespace Framework\r\n{\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            var rawCerts = File.ReadAllBytes(\"cert.dump\");\r\n            var signedCms = new SignedCms();\r\n            signedCms.Decode(rawCerts);\r\n\r\n            try\r\n            {\r\n                signedCms.CheckSignature(true);\r\n                Console.WriteLine(\"Valid siganture.\");\r\n            }\r\n            catch(CryptographicException e)\r\n            {\r\n                Console.Error.WriteLine(e.Message);\r\n            }\r\n\r\n            Console.ReadKey();\r\n        }\r\n    }\r\n}\r\n```\r\nOn .Net Core: \"Invalid Siganture.\"\r\nOn .Net Framework: \"Valid Signature.\"\r\n\r\nI've tried to update System.Security.Cryptography.Pkcs to a preview version (4.6.0-preview.18571.3), but now the signedCms.Decode(rawCerts) fails with an CryptographicException: ASN1 corrupted data. exception.\r\n\r\nI've attached the CMS I had the issues with. It's from a Firefox executable from 4 month ago.\r\n\r\n[cert.zip](https://github.com/dotnet/corefx/files/2702903/cert.zip)\r\n","Url":"https://github.com/dotnet/corefx/issues/34202","RelatedDescription":"Open issue \"Different behavior on .Net Framework and Core in SignedCms.CheckSignature\" (#34202)"},{"Id":"393264121","IsPullRequest":true,"CreatedAt":"2018-12-21T07:09:15","Actor":"wfurt","Number":"34195","RawContent":null,"Title":"make test conditional on availability of Drawing instead of Nano plat…","State":"closed","Body":"fixes  #34075 Unable to load libgdiplus on Alpine\r\n\r\nThis also fixes other Unix flavors. We could add libgdi to Alpine CI but unless we make it hard dependency, tests should still pass without it. The new code makes it centralized and consistent. \r\n\r\n ","Url":"https://github.com/dotnet/corefx/pull/34195","RelatedDescription":"Closed or merged PR \"make test conditional on availability of Drawing instead of Nano plat…\" (#34195)"},{"Id":"393287522","IsPullRequest":true,"CreatedAt":"2018-12-21T03:14:09","Actor":"JustNrik","Number":"34199","RawContent":null,"Title":"Update ToCollection.cs","State":"closed","Body":"Add ToDictionary overload for IEnumerable<KeyValuePair<TKey, TValue>>\r\n\r\nUseful for some use-cases.","Url":"https://github.com/dotnet/corefx/pull/34199","RelatedDescription":"Closed or merged PR \"Update ToCollection.cs\" (#34199)"},{"Id":"393293971","IsPullRequest":false,"CreatedAt":"2018-12-21T02:59:59","Actor":"jlennox","Number":"34200","RawContent":null,"Title":"Improve XML testing and fuzzing.","State":"open","Body":"This is an offshoot from issue #34115 and PR #34116\r\n\r\n* Consider bringing *.cxx code generation templates up to date: (per https://github.com/dotnet/corefx/pull/34116#issuecomment-449081565)\r\n   * src/System.Private.Xml/src/System/Xml/Core/HtmlRawTextWriterGenerator.cxx\r\n   * src/System.Private.Xml/src/System/Xml/Core/TextRawTextWriterGenerator.cxx\r\n   * src/System.Private.Xml/src/System/Xml/Core/XmlRawTextWriterGenerator.cxx\r\n* Break code into means that allows better access from inside of tests. (per https://github.com/dotnet/corefx/pull/34116#issuecomment-449081565)\r\n* Introduce mechanism to add testing with guarded memory to detect OoB reads. (per https://github.com/dotnet/corefx/pull/34116#issuecomment-449084357)","Url":"https://github.com/dotnet/corefx/issues/34200","RelatedDescription":"Open issue \"Improve XML testing and fuzzing.\" (#34200)"}],"ResultType":"GitHubIssue"},"Roslyn-Issues":{"Issues":[{"Id":"393714351","IsPullRequest":true,"CreatedAt":"2018-12-23T01:07:28","Actor":"KirillOsenkov","Number":"32005","RawContent":null,"Title":"Use NullXmlDocumentationProvider when XML file doesn't exist.","State":"open","Body":"For each reference that doesn't have an .XML doc file we allocate and cache a FileBasedXmlDocumentationProvider that throws a first-chance exception upon first use.\r\n\r\nAdd and use a singleton NullXmlDocumentationProvider instead when the requested .XML doc file doesn't exist.","Url":"https://github.com/dotnet/roslyn/pull/32005","RelatedDescription":"Open PR \"Use NullXmlDocumentationProvider when XML file doesn't exist.\" (#32005)"},{"Id":"393711459","IsPullRequest":true,"CreatedAt":"2018-12-23T01:00:08","Actor":"dotnet-bot","Number":"32003","RawContent":null,"Title":"Merge master to master-vs-deps","State":"closed","Body":"\nThis is an automatically generated pull request from master into master-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-master-vs-deps\ngit reset --hard upstream/master-vs-deps\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push merges/master-to-master-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/32003","RelatedDescription":"Closed or merged PR \"Merge master to master-vs-deps\" (#32003)"},{"Id":"393711466","IsPullRequest":true,"CreatedAt":"2018-12-23T01:00:04","Actor":"dotnet-bot","Number":"32004","RawContent":null,"Title":"Merge master to features/editorconfig-in-compiler","State":"closed","Body":"\nThis is an automatically generated pull request from master into features/editorconfig-in-compiler.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-features/editorconfig-in-compiler\ngit reset --hard upstream/features/editorconfig-in-compiler\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push merges/master-to-features/editorconfig-in-compiler --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/32004","RelatedDescription":"Closed or merged PR \"Merge master to features/editorconfig-in-compiler\" (#32004)"},{"Id":"393690673","IsPullRequest":false,"CreatedAt":"2018-12-22T17:38:57","Actor":"emsaks","Number":"32002","RawContent":null,"Title":"Proposal: Allow |= in object initializer syntax","State":"open","Body":"It would be nice if you could use the `|=` operator within the object initializer syntax (i.e. `new myObj { Attributes |= myObjAttribute.SomeFlag }`).\r\n\r\nThis would enable adding a flag to existing flags set in the constructor.\r\n\r\n[There's another proposal for extending the initializer syntax for event handlers [here](https://github.com/dotnet/roslyn/issues/5365).]","Url":"https://github.com/dotnet/roslyn/issues/32002","RelatedDescription":"Open issue \"Proposal: Allow |= in object initializer syntax\" (#32002)"},{"Id":"393685541","IsPullRequest":false,"CreatedAt":"2018-12-22T16:24:03","Actor":"alrz","Number":"32001","RawContent":null,"Title":"'Add using' in presence of nested 'using static'","State":"open","Body":"**Version Used**: 15.9 Preview 1.0\r\n\r\n**Steps to Reproduce**:\r\n```cs\r\nusing System.Collections.Generic;\r\n\r\nnamespace Test\r\n{\r\n  using static System.Console;\r\n\r\n  class A : IDisposable {} // Add using for System\r\n}\r\n```\r\n\r\n**Expected Behavior**:\r\n\r\n'Add using' should insert System to the top-level scope.\r\n\r\n**Actual Behavior**:\r\n\r\n![image](https://user-images.githubusercontent.com/3105979/50376532-2a036b80-0623-11e9-90c1-42c68277c3cb.png)\r\n\r\n","Url":"https://github.com/dotnet/roslyn/issues/32001","RelatedDescription":"Open issue \"'Add using' in presence of nested 'using static'\" (#32001)"},{"Id":"393667849","IsPullRequest":true,"CreatedAt":"2018-12-22T13:30:09","Actor":"dotnet-bot","Number":"31999","RawContent":null,"Title":"Merge master to master-vs-deps","State":"closed","Body":"\nThis is an automatically generated pull request from master into master-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-master-vs-deps\ngit reset --hard upstream/master-vs-deps\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push merges/master-to-master-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/31999","RelatedDescription":"Closed or merged PR \"Merge master to master-vs-deps\" (#31999)"},{"Id":"393667852","IsPullRequest":true,"CreatedAt":"2018-12-22T13:30:05","Actor":"dotnet-bot","Number":"32000","RawContent":null,"Title":"Merge master to features/editorconfig-in-compiler","State":"closed","Body":"\nThis is an automatically generated pull request from master into features/editorconfig-in-compiler.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-features/editorconfig-in-compiler\ngit reset --hard upstream/features/editorconfig-in-compiler\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push merges/master-to-features/editorconfig-in-compiler --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/32000","RelatedDescription":"Closed or merged PR \"Merge master to features/editorconfig-in-compiler\" (#32000)"},{"Id":"393663176","IsPullRequest":false,"CreatedAt":"2018-12-22T10:43:23","Actor":"huzaynbolt","Number":"31998","RawContent":null,"Title":"Compiler threw an exception after making changes to razor view and page reload","State":"open","Body":"ASP.NET CORE 2.20\r\n\r\nCreated a boilerplate ASP.NET CORE web app project, use kestrel as the web server run without debugging, then making changes to the razor view of the default page being loaded and try to reload the page from the browser.\r\nThe error I got was\r\n\r\nAn unhandled exception occurred while processing the request.\r\nMissingMethodException: Method not found: 'Microsoft.Cci.IMethodReference Microsoft.Cci.ICustomAttribute.Constructor(Microsoft.CodeAnalysis.Emit.EmitContext)'.\r\n","Url":"https://github.com/dotnet/roslyn/issues/31998","RelatedDescription":"Open issue \"Compiler threw an exception after making changes to razor view and page reload\" (#31998)"},{"Id":"393654204","IsPullRequest":false,"CreatedAt":"2018-12-22T08:17:09","Actor":"savahmel","Number":"31997","RawContent":null,"Title":"No nullability warning for a FirstOrDefault() method","State":"open","Body":"Visual Studio 2019 Preview 1.1\r\n\r\nThe following code produces no warnings and results in a null reference exception. \r\n\r\n```C#\r\nusing System.Linq;\r\n#nullable enable\r\nclass Program\r\n{\r\n    static void Main(string[] args)\r\n    {\r\n        System.Console.WriteLine(new string[0].FirstOrDefault().Length);\r\n    }\r\n}\r\n```\r\nExpected: IMHO, since FirstOrDefault is a library method that might or might not be aware of nullability, \r\nmight or might not support this concept it should be treated as returning a nullable value. \r\nUnless there is an indication of nullability on the CLR level, probably any library public method, field or property should be assumed to return and accept nullable references. \r\n\r\nI would also expect the compiler to give me a warning if I expose a public library method with non-nullable reference arguments or return types. \r\n","Url":"https://github.com/dotnet/roslyn/issues/31997","RelatedDescription":"Open issue \"No nullability warning for a FirstOrDefault() method\" (#31997)"},{"Id":"393627830","IsPullRequest":false,"CreatedAt":"2018-12-22T02:25:23","Actor":"alrz","Number":"31996","RawContent":null,"Title":"API request: base syntax visitor","State":"closed","Body":"There should be a common class/interface for `CSharpSyntaxVisitor` and `VisualBasicSyntaxVisitor`\r\n\r\nAlso `Visit` and `DefaultVisit` for each of those could accept a more specific type e.g. `CSharpSyntaxNode` and `VisualBasicSyntaxNode` respectively, to avoid a redundant cast in every call.","Url":"https://github.com/dotnet/roslyn/issues/31996","RelatedDescription":"Closed issue \"API request: base syntax visitor\" (#31996)"},{"Id":"393622355","IsPullRequest":true,"CreatedAt":"2018-12-22T01:00:10","Actor":"dotnet-bot","Number":"31994","RawContent":null,"Title":"Merge master to master-vs-deps","State":"closed","Body":"\nThis is an automatically generated pull request from master into master-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-master-vs-deps\ngit reset --hard upstream/master-vs-deps\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push merges/master-to-master-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/31994","RelatedDescription":"Closed or merged PR \"Merge master to master-vs-deps\" (#31994)"},{"Id":"393622367","IsPullRequest":true,"CreatedAt":"2018-12-22T01:00:06","Actor":"dotnet-bot","Number":"31995","RawContent":null,"Title":"Merge master to features/editorconfig-in-compiler","State":"closed","Body":"\nThis is an automatically generated pull request from master into features/editorconfig-in-compiler.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-features/editorconfig-in-compiler\ngit reset --hard upstream/features/editorconfig-in-compiler\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push merges/master-to-features/editorconfig-in-compiler --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/31995","RelatedDescription":"Closed or merged PR \"Merge master to features/editorconfig-in-compiler\" (#31995)"},{"Id":"393585574","IsPullRequest":true,"CreatedAt":"2018-12-22T00:41:32","Actor":"jcouv","Number":"31990","RawContent":null,"Title":"Take notes on C# 8 features","State":"closed","Body":"Updating with some notes for recursive patterns, nullable, ranges, and enhanced using.","Url":"https://github.com/dotnet/roslyn/pull/31990","RelatedDescription":"Closed or merged PR \"Take notes on C# 8 features\" (#31990)"},{"Id":"393569289","IsPullRequest":true,"CreatedAt":"2018-12-21T23:02:37","Actor":"mikkelbu","Number":"31989","RawContent":null,"Title":"Correct XML summary on ITypeSymbol.AllInterfaces","State":"closed","Body":"Currently the intellisense for ITypeSymbol.AllInterfaces looks like this\r\n![image](https://user-images.githubusercontent.com/1007631/50360321-f4497e80-055f-11e9-8635-0da15d7d5c11.png)\r\nThis PR improve the XML summary such that the resulting intellisense is useful.\r\n\r\nI also tried `<see cref=\"IEnumerable{String}\">IEnumerable&lt;string&gt;</see>`, but that gave `IEnumerable<out T>` in the intellisense.\r\n\r\nEDIT: After the change it looks like this\r\n![image](https://user-images.githubusercontent.com/1007631/50362086-953b3800-0566-11e9-95a0-629035034ee5.png)","Url":"https://github.com/dotnet/roslyn/pull/31989","RelatedDescription":"Closed or merged PR \"Correct XML summary on ITypeSymbol.AllInterfaces\" (#31989)"},{"Id":"393599411","IsPullRequest":true,"CreatedAt":"2018-12-21T21:46:07","Actor":"mikkelbu","Number":"31993","RawContent":null,"Title":"Compile successfully - without IDE0055 - from a fresh checkout","State":"open","Body":"When I run `Restore.cmd` and then `Build.cmd` in a fresh clone I get the following formatting errors (all IDE0055): \r\n```\r\nBuild FAILED.\r\n\r\nC:\\src\\DotNet\\roslyn\\src\\Compilers\\CSharp\\Portable\\SymbolDisplay\\SymbolDisplayVisitor.Members.cs(52,1): error IDE0055: Fix formatting [C:\\src\\DotNet\\roslyn\\src\\Compilers\\CSharp\\Portable\\Microsoft.CodeAnalysis.CSharp.csproj]\r\nC:\\src\\DotNet\\roslyn\\src\\Compilers\\VisualBasic\\Test\\IOperation\\IOperation\\IOperationTests_IUnaryOperatorExpression.vb(2211,1): error IDE0055: Fix formatting [C:\\src\\DotNet\\roslyn\\src\\Compilers\\VisualBasic\\Test\\IOperation\\Roslyn.Compilers.VisualBasic.IOperation.UnitTests.vbproj]\r\nC:\\src\\DotNet\\roslyn\\src\\Compilers\\VisualBasic\\Test\\IOperation\\IOperation\\IOperationTests_IUnaryOperatorExpression.vb(2251,1): error IDE0055: Fix formatting [C:\\src\\DotNet\\roslyn\\src\\Compilers\\VisualBasic\\Test\\IOperation\\Roslyn.Compilers.VisualBasic.IOperation.UnitTests.vbproj]\r\nC:\\src\\DotNet\\roslyn\\src\\Workspaces\\CSharp\\Portable\\Classification\\SyntaxClassification\\NameSyntaxClassifier.cs(138,62): error IDE0055: Fix formatting [C:\\src\\DotNet\\roslyn\\src\\Workspaces\\CSharp\\Portable\\Microsoft.CodeAnalysis.CSharp.Workspaces.csproj]\r\nC:\\src\\DotNet\\roslyn\\src\\Compilers\\VisualBasic\\Test\\IOperation\\IOperation\\IOperationTests_IUnaryOperatorExpression.vb(2211,1): error IDE0055: Fix formatting [C:\\src\\DotNet\\roslyn\\src\\Compilers\\VisualBasic\\Test\\IOperation\\Roslyn.Compilers.VisualBasic.IOperation.UnitTests.vbproj]\r\nC:\\src\\DotNet\\roslyn\\src\\Compilers\\VisualBasic\\Test\\IOperation\\IOperation\\IOperationTests_IUnaryOperatorExpression.vb(2251,1): error IDE0055: Fix formatting [C:\\src\\DotNet\\roslyn\\src\\Compilers\\VisualBasic\\Test\\IOperation\\Roslyn.Compilers.VisualBasic.IOperation.UnitTests.vbproj]\r\nC:\\src\\DotNet\\roslyn\\src\\EditorFeatures\\CSharpTest\\Classification\\SemanticClassifierTests.cs(529,37): error IDE0055: Fix formatting [C:\\src\\DotNet\\roslyn\\src\\EditorFeatures\\CSharpTest\\Microsoft.CodeAnalysis.CSharp.EditorFeatures.UnitTests.csproj]\r\nC:\\src\\DotNet\\roslyn\\src\\EditorFeatures\\CSharpTest\\Classification\\SemanticClassifierTests.cs(543,37): error IDE0055: Fix formatting [C:\\src\\DotNet\\roslyn\\src\\EditorFeatures\\CSharpTest\\Microsoft.CodeAnalysis.CSharp.EditorFeatures.UnitTests.csproj]\r\nC:\\src\\DotNet\\roslyn\\src\\EditorFeatures\\CSharpTest\\Classification\\SemanticClassifierTests.cs(558,37): error IDE0055: Fix formatting [C:\\src\\DotNet\\roslyn\\src\\EditorFeatures\\CSharpTest\\Microsoft.CodeAnalysis.CSharp.EditorFeatures.UnitTests.csproj]\r\nC:\\src\\DotNet\\roslyn\\src\\EditorFeatures\\CSharpTest\\Classification\\SemanticClassifierTests.cs(581,37): error IDE0055: Fix formatting [C:\\src\\DotNet\\roslyn\\src\\EditorFeatures\\CSharpTest\\Microsoft.CodeAnalysis.CSharp.EditorFeatures.UnitTests.csproj]\r\nC:\\src\\DotNet\\roslyn\\src\\EditorFeatures\\CSharpTest\\Classification\\SemanticClassifierTests.cs(1121,37): error IDE0055: Fix formatting [C:\\src\\DotNet\\roslyn\\src\\EditorFeatures\\CSharpTest\\Microsoft.CodeAnalysis.CSharp.EditorFeatures.UnitTests.csproj]\r\nC:\\src\\DotNet\\roslyn\\src\\EditorFeatures\\CSharpTest\\Classification\\SemanticClassifierTests.cs(1145,37): error IDE0055: Fix formatting [C:\\src\\DotNet\\roslyn\\src\\EditorFeatures\\CSharpTest\\Microsoft.CodeAnalysis.CSharp.EditorFeatures.UnitTests.csproj]\r\nC:\\src\\DotNet\\roslyn\\src\\EditorFeatures\\CSharpTest\\Classification\\SemanticClassifierTests.cs(1147,37): error IDE0055: Fix formatting [C:\\src\\DotNet\\roslyn\\src\\EditorFeatures\\CSharpTest\\Microsoft.CodeAnalysis.CSharp.EditorFeatures.UnitTests.csproj]\r\nC:\\src\\DotNet\\roslyn\\src\\EditorFeatures\\CSharpTest\\Classification\\SemanticClassifierTests.cs(1768,37): error IDE0055: Fix formatting [C:\\src\\DotNet\\roslyn\\src\\EditorFeatures\\CSharpTest\\Microsoft.CodeAnalysis.CSharp.EditorFeatures.UnitTests.csproj]\r\n    0 Warning(s)\r\n    14 Error(s)\r\n```\r\nThis PR correct all the errors.","Url":"https://github.com/dotnet/roslyn/pull/31993","RelatedDescription":"Open PR \"Compile successfully - without IDE0055 - from a fresh checkout\" (#31993)"},{"Id":"393597945","IsPullRequest":false,"CreatedAt":"2018-12-21T21:38:55","Actor":"tmds","Number":"31992","RawContent":null,"Title":"Allow ref structs to return fields by reference","State":"open","Body":"**Steps to Reproduce**:\r\n\r\n```cs\r\n    ref struct A\r\n    {\r\n        private int i;\r\n        public ref int Int => ref i;\r\n    }\r\n```\r\n\r\ngenerates a compilation error:\r\n```\r\nerror CS8170: Struct members cannot return 'this' or other instance members by reference\r\n```\r\n\r\nMaybe this can be allowed?","Url":"https://github.com/dotnet/roslyn/issues/31992","RelatedDescription":"Open issue \"Allow ref structs to return fields by reference\" (#31992)"},{"Id":"393590225","IsPullRequest":false,"CreatedAt":"2018-12-21T21:03:47","Actor":"alrz","Number":"31991","RawContent":null,"Title":"Nullable array types are accepted in declaration patterns","State":"open","Body":"**Version Used**: NullableReferenceTypes (https://github.com/dotnet/roslyn/commit/2f8fefa7b1a0213c273fa10f9b6ce1c2ae4eea90)\r\n\r\n**Steps to Reproduce**:\r\n\r\n```cs\r\n    public void M(object o) {\r\n        _ = o is string[]?;\r\n        _ = o is string?;\r\n        _ = o is string[]? a; // no error (incorrect)\r\n        _ = o is string? b; // error\r\n    }\r\n```\r\n**Expected Behavior**:\r\n\r\nError on third line as well. Patterns don't support nullable types.\r\n\r\nPlus, I don't know why the first two are decided to be valid.\r\n\r\n**Actual Behavior**:\r\n\r\nErrors only on non-array nullables in patterns.\r\n","Url":"https://github.com/dotnet/roslyn/issues/31991","RelatedDescription":"Open issue \"Nullable array types are accepted in declaration patterns\" (#31991)"},{"Id":"393549427","IsPullRequest":false,"CreatedAt":"2018-12-21T18:21:51","Actor":"carlos-quintero","Number":"31988","RawContent":null,"Title":"EnvDTE80.CodeClass2.Parts returns 0 partial classes on Visual Studio 2019 Preview","State":"open","Body":"**Version Used**: Visual Studio 2019 16.0 Preview 1.1\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Create a package with a command that executes this code:\r\n\r\n`\r\n\r\n         EnvDTE.DTE dte = ...;\r\n\r\n         if (dte != null)\r\n         {\r\n            FileCodeModel fileCodeModel = dte.ActiveDocument.ProjectItem.FileCodeModel;\r\n\r\n            foreach (CodeElement codeElement in fileCodeModel.CodeElements)\r\n            {\r\n               if (codeElement is CodeClass2 codeClass2)\r\n               {\r\n                  // Show a message box to prove we were here\r\n                  MessageBox.Show(codeClass2.Parts.Count.ToString());\r\n               }\r\n            }\r\n         }\r\n`\r\n2. Run the package project and in the new VS instance create two files with a partial class\r\n3. Click the command of the package\r\n\r\n**Expected Behavior**:\r\ncodeClass2.Parts2.Count should return 2, which is the correct value returned by VS 2017 15.9.4\r\n\r\n**Actual Behavior**:\r\ncodeClass2.Parts2.Count returns 0. This bug seems a regression of https://github.com/dotnet/roslyn/issues/21074\r\n","Url":"https://github.com/dotnet/roslyn/issues/31988","RelatedDescription":"Open issue \"EnvDTE80.CodeClass2.Parts returns 0 partial classes on Visual Studio 2019 Preview\" (#31988)"},{"Id":"393549416","IsPullRequest":true,"CreatedAt":"2018-12-21T18:21:49","Actor":"jaredpar","Number":"31987","RawContent":null,"Title":"Move CI / PR triggers to YAML files","State":"open","Body":"Azure Pipelines now supports us putting the branches which trigger PR\r\nand CI validation into the YAML files. This change puts the current\r\ncontents of our build definition into the YAML files and updates our\r\ncreating feature branches document.\r\n\r\nNote: i have not yet changed our build definition to read this\r\ninformation. Want to commit this, give it a day to flow to the branches\r\nthen I will flip our definition over.","Url":"https://github.com/dotnet/roslyn/pull/31987","RelatedDescription":"Open PR \"Move CI / PR triggers to YAML files\" (#31987)"},{"Id":"393535800","IsPullRequest":true,"CreatedAt":"2018-12-21T17:32:38","Actor":"jaredpar","Number":"31986","RawContent":null,"Title":"Unify StrongNameProvider implementations","State":"open","Body":"There are two ways the compiler implements strong name signing:\r\n\r\n1. Using the `IClrStrongName` COM interface. This supports all forms of signing but is only available on Windows. \r\n1. Using the `ManagedPEBuilder.Sign` method. This works on every operating system but does not support key containers or counter signatures. \r\n\r\nThe preference in the compiler is to use the portable signing (option 2). The key container and counter signature scenarios are fairly rare. The majority of code uses key file and this option is much more portable and efficient (doesn't require writing a temporary unsigned PE out to `%TEMP%`). \r\n\r\nCustomers though should be unaware of this difference. The compiler should detect when a key container / counter signature is used and silently back off to the COM based implementation. In the case that this happened on a non-Windows platform it will just issue an error. \r\n\r\nThe compiler attempted to make this switch in VS 15.6 but had to back out after customer bugs revealed we'd missed a key scenario. The compiler implemented it's signing detection by looking at the command line arguments for a key container. Yet signing can also be specified by using the [AssemblyKeyNameAttribute](https://docs.microsoft.com/en-us/dotnet/api/system.reflection.assemblykeynameattribute?view=netframework-4.7.2) attribute. This means the compiler can't actually know how signing is implemented until we're fairly far along in the compilation process. Hence we had to back off a bit and make non-portable the default in most cases.\r\n\r\nThis change again makes portable signing our default and corrects the detection code to be during compilation, not during command line argument parsing. Additionally it makes the following changes:\r\n\r\n- Deletes `PortableStrongNameProvider`. There is really no reason to have two providers here. It's just one provider that knows different ways to sign assemblies.  \r\n- Changes our test infrastructure to test on both providers where as before portable signing testing was pretty scattered. \r\n- Extends our signing tests to run on Linux \r\n\r\ncloses #22327\r\ncloses #24050 \r\ncloses #30152\r\n\r\nrelated to #25340\r\nrelated to #26683\r\n\r\n**Note: this is still a work in progress. Have a PR so I can start getting test coverage info on the changes. Still need to enable a lot of them on non-Windows**\r\n\r\n","Url":"https://github.com/dotnet/roslyn/pull/31986","RelatedDescription":"Open PR \"Unify StrongNameProvider implementations\" (#31986)"},{"Id":"393528418","IsPullRequest":false,"CreatedAt":"2018-12-21T17:05:58","Actor":"jaredpar","Number":"31985","RawContent":null,"Title":"CryptoPublicKey option doesn't protect against attributes","State":"open","Body":"The property `CompilationOptions.CryptoPublicKey` is meant to establish assembly identity by providing an explicit public key. A compilation created with this option cannot actually fully sign assemblies and there are explicit checks to ensure it's not combined with a key file or key container option. Such a combination is explicitly listed as an incompatible option. \r\n\r\nHowever the code fails to check for a key file or key container attribute in the assembly. This is logically the same situation yet it doesn't issue an error.  In this case the attributes are just silently ignored. ","Url":"https://github.com/dotnet/roslyn/issues/31985","RelatedDescription":"Open issue \"CryptoPublicKey option doesn't protect against attributes\" (#31985)"},{"Id":"393482692","IsPullRequest":false,"CreatedAt":"2018-12-21T14:44:20","Actor":"jnm2","Number":"31984","RawContent":null,"Title":"'Generate GetHashCode' unnecessarily uses EqualityComparer for Nullable<>","State":"open","Body":"Visual Studio 2019 Preview 1.1\r\n\r\nThere should be more consistency between `int` and `int?`. Actual:\r\n\r\n```cs\r\nprivate int a;\r\nprivate int? b;\r\n\r\npublic override int GetHashCode()\r\n{\r\n    var hashCode = 2118541809;\r\n    hashCode = hashCode * -1521134295 + a.GetHashCode();\r\n    hashCode = hashCode * -1521134295 + EqualityComparer<int?>.Default.GetHashCode(b);\r\n    return hashCode;\r\n}\r\n```\r\n\r\nExpected:\r\n\r\n```cs\r\nvar hashCode = 2118541809;\r\nhashCode = hashCode * -1521134295 + a.GetHashCode();\r\nhashCode = hashCode * -1521134295 + b.GetHashCode();\r\nreturn hashCode;\r\n```\r\n\r\n`Nullable<>.GetHashCode` does not throw NullReferenceException because the struct overrides `Object.GetHashCode` and the overriding implementation has no null reference to operate on.","Url":"https://github.com/dotnet/roslyn/issues/31984","RelatedDescription":"Open issue \"'Generate GetHashCode' unnecessarily uses EqualityComparer for Nullable<>\" (#31984)"},{"Id":"393434516","IsPullRequest":true,"CreatedAt":"2018-12-21T13:00:10","Actor":"dotnet-bot","Number":"31982","RawContent":null,"Title":"Merge master to master-vs-deps","State":"closed","Body":"\nThis is an automatically generated pull request from master into master-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-master-vs-deps\ngit reset --hard upstream/master-vs-deps\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push merges/master-to-master-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/31982","RelatedDescription":"Closed or merged PR \"Merge master to master-vs-deps\" (#31982)"},{"Id":"393434534","IsPullRequest":true,"CreatedAt":"2018-12-21T13:00:05","Actor":"dotnet-bot","Number":"31983","RawContent":null,"Title":"Merge master to features/editorconfig-in-compiler","State":"closed","Body":"\nThis is an automatically generated pull request from master into features/editorconfig-in-compiler.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-features/editorconfig-in-compiler\ngit reset --hard upstream/features/editorconfig-in-compiler\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push merges/master-to-features/editorconfig-in-compiler --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/31983","RelatedDescription":"Closed or merged PR \"Merge master to features/editorconfig-in-compiler\" (#31983)"},{"Id":"393347366","IsPullRequest":true,"CreatedAt":"2018-12-21T07:23:14","Actor":"jcouv","Number":"31981","RawContent":null,"Title":"Await should check null-state of expression","State":"open","Body":"Fixes https://github.com/dotnet/roslyn/issues/31519\r\n\r\nI'm going to wait for https://github.com/dotnet/roslyn/pull/31978 to make some improvements to this PR.","Url":"https://github.com/dotnet/roslyn/pull/31981","RelatedDescription":"Open PR \"Await should check null-state of expression\" (#31981)"},{"Id":"393326926","IsPullRequest":true,"CreatedAt":"2018-12-21T05:57:45","Actor":"chsienki","Number":"31980","RawContent":null,"Title":"Await using declarations","State":"open","Body":"- Add syntax, binding and lowering for await using declarations\r\n- Add tests","Url":"https://github.com/dotnet/roslyn/pull/31980","RelatedDescription":"Open PR \"Await using declarations\" (#31980)"},{"Id":"393318467","IsPullRequest":true,"CreatedAt":"2018-12-21T05:14:42","Actor":"gafter","Number":"31979","RawContent":null,"Title":"Merge from features/recursive-patterns into features/nested-stackalloc","State":"open","Body":"","Url":"https://github.com/dotnet/roslyn/pull/31979","RelatedDescription":"Open PR \"Merge from features/recursive-patterns into features/nested-stackalloc\" (#31979)"},{"Id":"393315412","IsPullRequest":true,"CreatedAt":"2018-12-21T04:58:32","Actor":"jcouv","Number":"31978","RawContent":null,"Title":"Infer non-nullability of sub-expressions from 'is' pattern","State":"open","Body":"Just like we can learn about `expr` and its sub-expressions in `expr != null` or `expr == null`, we can also learn from `expr is string s` or `expr is null`.\r\n\r\nThe logic to identify the sub-expressions we learn about in a null-test is getting extracted, and re-used in `is` operator.\r\n\r\n```\r\nif (s?.ToString() is null)\r\n{\r\n  s.Method(); // warn\r\n}\r\nelse\r\n{\r\n  s.Method(); // ok\r\n}\r\n```\r\n\r\nI'll also apply this logic to other null tests (the remaining ones involve attributes like `[EnsuresNotNull]`).","Url":"https://github.com/dotnet/roslyn/pull/31978","RelatedDescription":"Open PR \"Infer non-nullability of sub-expressions from 'is' pattern\" (#31978)"},{"Id":"393298655","IsPullRequest":false,"CreatedAt":"2018-12-21T03:27:53","Actor":"AlekseyTs","Number":"31977","RawContent":null,"Title":"```Interfaces``` and ```AllInterfaces``` disagree in tuple element names used by interfaces, FindImplementationForInterfaceMember fails to locate correct implementation in some scenarios ","State":"open","Body":"```\r\n        [Fact]\r\n        public void DuplicateInterfaceDetectionWithDifferentTupleNames_02()\r\n        {\r\n            var source = @\"\r\npublic interface I1<T> { }\r\npublic interface I2 : I1<(int a, int b)> { }\r\npublic class C1 : I2, I1<(int c, int d)> { }\r\npublic class C2 : I1<(int c, int d)>, I2 { }\r\n\";\r\n            var comp = CreateCompilation(source);\r\n            comp.VerifyDiagnostics(\r\n                // (4,14): error CS8140: 'I1<(int c, int d)>' is already listed in the interface list on type 'C1' with different tuple element names, as 'I1<(int a, int b)>'.\r\n                // public class C1 : I2, I1<(int c, int d)> { }\r\n                Diagnostic(ErrorCode.ERR_DuplicateInterfaceWithTupleNamesInBaseList, \"C1\").WithArguments(\"I1<(int c, int d)>\", \"I1<(int a, int b)>\", \"C1\").WithLocation(4, 14),\r\n                // (5,14): error CS8140: 'I1<(int a, int b)>' is already listed in the interface list on type 'C2' with different tuple element names, as 'I1<(int c, int d)>'.\r\n                // public class C2 : I1<(int c, int d)>, I2 { }\r\n                Diagnostic(ErrorCode.ERR_DuplicateInterfaceWithTupleNamesInBaseList, \"C2\").WithArguments(\"I1<(int a, int b)>\", \"I1<(int c, int d)>\", \"C2\").WithLocation(5, 14)\r\n                );\r\n\r\n            var c1 = comp.GetTypeByMetadataName(\"C1\");\r\n            var c1Interfaces = c1.InterfacesNoUseSiteDiagnostics();\r\n            var c1AllInterfaces = c1.AllInterfacesNoUseSiteDiagnostics;\r\n            Assert.Equal(2, c1Interfaces.Length);\r\n            Assert.Equal(2, c1AllInterfaces.Length);\r\n            Assert.Equal(\"I2\", c1Interfaces[0].ToTestDisplayString());\r\n            Assert.Equal(\"I1<(System.Int32 c, System.Int32 d)>\", c1Interfaces[1].ToTestDisplayString());\r\n            Assert.Equal(\"I2\", c1AllInterfaces[0].ToTestDisplayString());\r\n            Assert.Equal(\"I1<(System.Int32 c, System.Int32 d)>\", c1AllInterfaces[1].ToTestDisplayString());\r\n\r\n            var c2 = comp.GetTypeByMetadataName(\"C2\");\r\n            var c2Interfaces = c2.InterfacesNoUseSiteDiagnostics();\r\n            var c2AllInterfaces = c2.AllInterfacesNoUseSiteDiagnostics;\r\n            Assert.Equal(2, c2Interfaces.Length);\r\n            Assert.Equal(2, c2AllInterfaces.Length);\r\n            Assert.Equal(\"I1<(System.Int32 c, System.Int32 d)>\", c2Interfaces[0].ToTestDisplayString());\r\n            Assert.Equal(\"I2\", c2Interfaces[1].ToTestDisplayString());\r\n            Assert.Equal(\"I2\", c2AllInterfaces[0].ToTestDisplayString());\r\n            Assert.Equal(\"I1<(System.Int32 a, System.Int32 b)>\", c2AllInterfaces[1].ToTestDisplayString());\r\n        }\r\n```\r\n\r\nObserved:\r\n```\r\n            Assert.Equal(\"I1<(System.Int32 c, System.Int32 d)>\", c2Interfaces[0].ToTestDisplayString());\r\n            Assert.Equal(\"I1<(System.Int32 a, System.Int32 b)>\", c2AllInterfaces[1].ToTestDisplayString());\r\n```\r\n\r\nExpected:\r\nBoth APIs should return the same interface type, tuple element names should match. ","Url":"https://github.com/dotnet/roslyn/issues/31977","RelatedDescription":"Open issue \"```Interfaces``` and ```AllInterfaces``` disagree in tuple element names used by interfaces, FindImplementationForInterfaceMember fails to locate correct implementation in some scenarios \" (#31977)"},{"Id":"393284413","IsPullRequest":true,"CreatedAt":"2018-12-21T02:06:12","Actor":"JoeRobich","Number":"31976","RawContent":null,"Title":"Add enhanced color experiment for new classifications.","State":"open","Body":"An experiment for adding new theme colors for some of the classifications added in #31231. The option to enable/disable the experiment will be in the Tools>Options Preview Features page.\r\n![image](https://user-images.githubusercontent.com/611219/50315510-fb8d6100-0467-11e9-8490-a565f167d009.png)\r\n\r\nIf the user has customized any of the target colors then, this experiment will not apply colors. If the user has customized their theme but wishes to enable enhanced colors then, they can use the 'Use Defaults' button on the Tools>Options Fonts and Colors page to get their theme into a state where enhanced colors can be applied (a restart may be required).\r\n![image](https://user-images.githubusercontent.com/611219/50317784-414f2700-0472-11e9-8ec0-bf8cf41a2735.png)\r\n\r\nThe goal was to choose colors and use them in a similar fashion as the VS Code Light+ and Dark+ themes.\r\n![image](https://user-images.githubusercontent.com/611219/50316402-570d1e00-046b-11e9-8ad2-c371ab1fb35c.png)\r\n\r\nLight Theme Sample\r\n![image](https://user-images.githubusercontent.com/611219/50312471-49509c00-045d-11e9-87a9-78f7dc1c085d.png)\r\n\r\nDark Theme Sample\r\n![image](https://user-images.githubusercontent.com/611219/50312414-1dcdb180-045d-11e9-801d-209694ede67d.png)\r\n\r\n","Url":"https://github.com/dotnet/roslyn/pull/31976","RelatedDescription":"Open PR \"Add enhanced color experiment for new classifications.\" (#31976)"}],"ResultType":"GitHubIssue"},"CoreRT-Issues":{"Issues":[{"Id":"393717839","IsPullRequest":true,"CreatedAt":"2018-12-23T02:38:20","Actor":"Dotnet-GitSync-Bot","Number":"6715","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"open","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @marek-safar","Url":"https://github.com/dotnet/corert/pull/6715","RelatedDescription":"Open PR \"Mirror changes from dotnet/coreclr\" (#6715)"},{"Id":"393715548","IsPullRequest":false,"CreatedAt":"2018-12-23T01:39:57","Actor":"yinyue200","Number":"6714","RawContent":null,"Title":"ILT0005 compile error","State":"open","Body":"#### Bug description\r\nCan't compile by .Net Native\r\n\r\n#### Repro steps\r\nBuild the repo in RELEASE Mode https://github.com/yinyue200/vsthreadingwithnetnative\r\n\r\n#### Expected behavior\r\nbuild success\r\n\r\n#### Actual behavior\r\n1>  Processing application code\r\n1>  Computing application closure and generating interop code\r\n1>    Loading 91 modules...\r\n1>    Generating code...\r\n1>    Interop code generated.\r\n1>  Compiling interop code\r\n1>  Generating System.Reflection.DispatchProxy proxy code.\r\n1>  Cleaning up unreferenced code\r\n1>  Generating native code\r\n1>C:\\Users\\username\\.nuget\\packages\\microsoft.net.native.compiler\\2.1.8\\tools\\Microsoft.NetNative.targets(788,5): error : ILT0005: 'C:\\Users\\username\\.nuget\\packages\\runtime.win10-x86.microsoft.net.native.compiler\\2.1.8\\tools\\x86\\ilc\\Tools\\nutc_driver.exe @\"C:\\Users\\username\\Source\\Repos\\App1\\App1\\obj\\x86\\Release\\ilc\\intermediate\\MDIL\\App1.rsp\"' returned exit code -2147483645\r\n\r\n#### Additional context\r\nsee https://github.com/Microsoft/vs-threading/issues/446","Url":"https://github.com/dotnet/corert/issues/6714","RelatedDescription":"Open issue \"ILT0005 compile error\" (#6714)"},{"Id":"393707043","IsPullRequest":true,"CreatedAt":"2018-12-22T22:22:21","Actor":"MichalStrehovsky","Number":"6713","RawContent":null,"Title":"Fix ProjectN regression in `ByReference<T>`","State":"open","Body":"Making the field `initonly` breaks the contract with the codegen.","Url":"https://github.com/dotnet/corert/pull/6713","RelatedDescription":"Open PR \"Fix ProjectN regression in `ByReference<T>`\" (#6713)"},{"Id":"393700014","IsPullRequest":true,"CreatedAt":"2018-12-22T22:07:37","Actor":"Dotnet-GitSync-Bot","Number":"6712","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @benaadams","Url":"https://github.com/dotnet/corert/pull/6712","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#6712)"},{"Id":"393692146","IsPullRequest":true,"CreatedAt":"2018-12-22T19:53:31","Actor":"Dotnet-GitSync-Bot","Number":"6711","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @jkotas","Url":"https://github.com/dotnet/corert/pull/6711","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#6711)"},{"Id":"393313017","IsPullRequest":true,"CreatedAt":"2018-12-22T06:49:21","Actor":"jkotas","Number":"6706","RawContent":null,"Title":"Synchronize Task and Awaiter implementation with CoreCLR","State":"closed","Body":"Synchronized the code as much as possible with CoreCLR to prepare it for move to shared partition. The one major piece that I have excluded is tracing. I will look into doing that separately.","Url":"https://github.com/dotnet/corert/pull/6706","RelatedDescription":"Closed or merged PR \"Synchronize Task and Awaiter implementation with CoreCLR\" (#6706)"},{"Id":"393638862","IsPullRequest":true,"CreatedAt":"2018-12-22T05:22:03","Actor":"Dotnet-GitSync-Bot","Number":"6710","RawContent":null,"Title":"Mirror changes from dotnet/coreclr,corefx","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr,corefx\n\n\n**Please REBASE this PR when merging**\n\n cc @marek-safar @jkotas","Url":"https://github.com/dotnet/corert/pull/6710","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr,corefx\" (#6710)"},{"Id":"393630062","IsPullRequest":true,"CreatedAt":"2018-12-22T03:27:55","Actor":"Dotnet-GitSync-Bot","Number":"6709","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @fiigii @fiigii @marek-safar @tannergooding @danmosemsft","Url":"https://github.com/dotnet/corert/pull/6709","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#6709)"},{"Id":"393496204","IsPullRequest":true,"CreatedAt":"2018-12-21T19:50:11","Actor":"MarcoRossignoli","Number":"6708","RawContent":null,"Title":"Fix bug: [ILVerify] Class implements interface but not method","State":"closed","Body":"fixes https://github.com/dotnet/corert/issues/6707\r\n\r\nReplaced with correct helper that scan the type and its base types for an implementation of an interface method https://github.com/dotnet/corert/blob/master/src/Common/src/TypeSystem/Common/TypeSystemHelpers.cs#L352\r\n\r\n/cc @jkotas @MichalStrehovsky ","Url":"https://github.com/dotnet/corert/pull/6708","RelatedDescription":"Closed or merged PR \"Fix bug: [ILVerify] Class implements interface but not method\" (#6708)"},{"Id":"393409227","IsPullRequest":false,"CreatedAt":"2018-12-21T19:50:11","Actor":"IonKiwi","Number":"6707","RawContent":null,"Title":"[ILVerify] Class implements interface but not method","State":"closed","Body":"Trying to verify the following code.\r\n\r\n```\r\n    public interface IMyInterface : IEnumerable\r\n    {\r\n        bool GetTypedData();\r\n    }\r\n\r\n    public class Class1 : List<object>, IMyInterface\r\n    {\r\n        public bool GetTypedData()\r\n        {\r\n            return false;\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nILVerify claims that the class does not implement the GetEnumerator method (which is implemented by the base class).\r\n\r\n```\r\n[MD]: Error: Class implements interface but not method, Class: '[ClassLibrary2]ClassLibrary2.Class1' Interface: '[mscorlib]System.Collections.IEnumerable' Method: [mscorlib]System.Collections.IEnumerable.GetEnumerator().\r\n```\r\n","Url":"https://github.com/dotnet/corert/issues/6707","RelatedDescription":"Closed issue \"[ILVerify] Class implements interface but not method\" (#6707)"},{"Id":"393043522","IsPullRequest":false,"CreatedAt":"2018-12-21T19:16:25","Actor":"philcarbone","Number":"6703","RawContent":null,"Title":"Provide an FFI example","State":"closed","Body":"Hello,\r\n\r\nI am trying to share functionality across technology boundaries and I prefer to use .NET Core as the place to build the functionality. My plan is to use FFI (Foreign function interface) as a way to expose the functionality in the .net library. Could someone provide a working example of a project that does this?  :)\r\n\r\nI've followed a few blog articles online and though I can create a native exe and run it, I can't seem to use it through FFI.  Any help is appreciated! ","Url":"https://github.com/dotnet/corert/issues/6703","RelatedDescription":"Closed issue \"Provide an FFI example\" (#6703)"},{"Id":"393206365","IsPullRequest":true,"CreatedAt":"2018-12-21T04:17:54","Actor":"trylek","Number":"6705","RawContent":null,"Title":"Trivial bug fix - use EmitByte for fixup type in signatures","State":"closed","Body":"During code review of Andon's change to add initial support for\r\nmodule overrides to R2RDump signature parser I noticed that\r\nI had previously incorrectly used ReadUInt instead of ReadByte\r\nfor reading the fixup type from the signature.\r\n\r\nBased on this observation I audited all places in the CPAOT\r\ncompiler that emit signatures to double-check whether I might\r\nhave made the same mistake there. Indeed I found the same bug\r\nin two cases - in MethodFixupSignature and in encoding of\r\nREADYTORUN_FIXUP_Helper. Interestingly enough the same harmless\r\nbug is in CoreCLR, please see\r\n\r\nhttps://github.com/dotnet/coreclr/blob/04c4df8c9ecf53499838945197af70f11ddf840a/src/zap/zapimport.cpp#L2292\r\n\r\nThe AppendData performs the signature uint encoding which is\r\nharmless in this case because all READYTORUN_FIXUP_* have codes\r\nless than 128 however semantically it's still a bug, AppendByte\r\nshould be used instead as is clearly visible from the only place\r\nwhere the fixup is consumed,\r\n\r\nhttps://github.com/dotnet/coreclr/blob/04c4df8c9ecf53499838945197af70f11ddf840a/src/vm/jitinterface.cpp#L13715\r\n\r\nThanks\r\n\r\nTomas","Url":"https://github.com/dotnet/corert/pull/6705","RelatedDescription":"Closed or merged PR \"Trivial bug fix - use EmitByte for fixup type in signatures\" (#6705)"},{"Id":"392581586","IsPullRequest":true,"CreatedAt":"2018-12-20T22:57:46","Actor":"MarcoRossignoli","Number":"6698","RawContent":null,"Title":"Fix bug: InvalidCastException Unable to cast object of type 'Internal.TypeSystem.InstantiatedGenericParameter' to type 'Internal.TypeSystem.MetadataType","State":"closed","Body":"Fixes https://github.com/dotnet/corert/issues/6693\r\nThe issue happen here https://github.com/dotnet/corert/blob/master/src/ILVerification/src/AccessVerificationHelpers.cs#L247\r\nIf instance type is a generic parameter his type definition is not a MetadataType.\r\nHowever here code verify if calling type(instanceType) has got \"Family\" access to target type, so if generic instanceType is subclass of targetTypeDef should be ok,  ECMA-335 page 28.\r\n\r\n/cc @jkotas @jcouv \r\n\r\n~~EDIT: Could be useful add some tests with \"reported bug\" code sample(if code owner agrees)?Something like ILTests\\Bugs.il with all sample IL inside.~~","Url":"https://github.com/dotnet/corert/pull/6698","RelatedDescription":"Closed or merged PR \"Fix bug: InvalidCastException Unable to cast object of type 'Internal.TypeSystem.InstantiatedGenericParameter' to type 'Internal.TypeSystem.MetadataType\" (#6698)"},{"Id":"392197040","IsPullRequest":false,"CreatedAt":"2018-12-20T22:57:46","Actor":"IonKiwi","Number":"6693","RawContent":null,"Title":"ILVerify InvalidCastException Unable to cast object of type 'Internal.TypeSystem.InstantiatedGenericParameter' to type 'Internal.TypeSystem.MetadataType'","State":"closed","Body":"ILVerify reports the following error:\r\n\r\n```\r\nError: Unable to cast object of type 'Internal.TypeSystem.InstantiatedGenericParameter' to type 'Internal.TypeSystem.MetadataType'.\r\n```\r\n\r\nWith the following code:\r\n\r\n```\r\n    public class DocumentElement\r\n    {\r\n        public abstract class DocumentElementList<T> : ObservableCollection<T> where T : DocumentElement\r\n        {\r\n            protected override void InsertItem(int index, T item)\r\n            {\r\n                item.DoNotifyParent();\r\n            }\r\n        }\r\n\r\n        protected void DoNotifyParent()\r\n        {\r\n        }\r\n    }\r\n```\r\n\r\nWhen I verify it using PEVerify, there are no errors.\r\n\r\n","Url":"https://github.com/dotnet/corert/issues/6693","RelatedDescription":"Closed issue \"ILVerify InvalidCastException Unable to cast object of type 'Internal.TypeSystem.InstantiatedGenericParameter' to type 'Internal.TypeSystem.MetadataType'\" (#6693)"},{"Id":"392669464","IsPullRequest":true,"CreatedAt":"2018-12-20T18:51:03","Actor":"kvochko","Number":"6701","RawContent":null,"Title":"Fixes for exception handling on ARM","State":"closed","Body":"This patch contains fixes for Linux/ARM exception handling.\r\nAssembly stubs are now passing exception object in R0 instead of R1. Establisher frame is now passed in R1 only to filter funclets.\r\n`utilcode.h` is partially copied over from CoreCLR, and functions `PCODEToPINSTR`/`PINSTRToPCODE` are used to raise/mask off the thumb bit in a few places that need it.\r\nFixes #6579 and #6535 ","Url":"https://github.com/dotnet/corert/pull/6701","RelatedDescription":"Closed or merged PR \"Fixes for exception handling on ARM\" (#6701)"},{"Id":"393044508","IsPullRequest":false,"CreatedAt":"2018-12-20T13:53:35","Actor":"differentrain","Number":"6704","RawContent":null,"Title":"The value of Sse42.IsSupported property  is always false.","State":"closed","Body":"It's seems that native code can not support SSE4.2:\r\n\r\n```\r\nusing System;\r\nusing System.Runtime.Intrinsics.X86;\r\nnamespace SSE42SupportIssues\r\n{\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            Console.WriteLine($\"Sse42.IsSupported = {Sse42.IsSupported}\");\r\n            Console.WriteLine($\"Sse42.X64.IsSupported = {Sse42.X64.IsSupported}\");\r\n\r\n            /* managed code output:\r\n             * Sse42.IsSupported = True\r\n             * Process is terminating due to StackOverflowException.\r\n             * \r\n             * native code output:\r\n             * Sse42.IsSupported = False\r\n             * Sse42.X64.IsSupported = False\r\n            */\r\n        }\r\n    }\r\n}\r\n```\r\nI have test this [Sample](https://github.com/dotnet/corert/files/2698872/SSE42SupportIssues.zip) on Windows, linux, and OS, and the result is the same.\r\n\r\nScripts in this sample suppose that .NET Core 3.0 SDK has been installed on system, so the script for linux (`Test-linux.sh`) can not be run directly, the path of CLI tool should be modify manually, \r\n\r\nPS, as we have seen, the `Sse42.X64` class can not be accessed, I dont' know if I should create this issue again in CoreFx....\r\n\r\n","Url":"https://github.com/dotnet/corert/issues/6704","RelatedDescription":"Closed issue \"The value of Sse42.IsSupported property  is always false.\" (#6704)"},{"Id":"392606540","IsPullRequest":true,"CreatedAt":"2018-12-20T10:35:52","Actor":"kbaladurin","Number":"6699","RawContent":null,"Title":"[CppCodeGen] Fix ImportStoreField and ImportLoadField","State":"closed","Body":"Add cast in `ImportStoreField` and `ImportLoadField` to handle cases like following:\r\n```cs\r\nclass A<T, U>\r\n{\r\n    public T t;\r\n    public U u;\r\n}\r\n\r\nclass B<T> : A<string, T>>\r\n{\r\n    public B() { t = \"123\"; }\r\n}\r\n```\r\nAs `A<System.__Canon, System.__Canon>` is used as base for `B<System.__Canon>` `t` has `System.__Canon` type in B's ctor and we need to cast it to `string`.","Url":"https://github.com/dotnet/corert/pull/6699","RelatedDescription":"Closed or merged PR \"[CppCodeGen] Fix ImportStoreField and ImportLoadField\" (#6699)"},{"Id":"392893190","IsPullRequest":false,"CreatedAt":"2018-12-20T08:55:38","Actor":"differentrain","Number":"6702","RawContent":null,"Title":"Warning while using methods in System.Runtime.Intrinsics","State":"closed","Body":"warning:\r\n\r\n> EXEC : warning : Method \\`[Crc32c]Crc32Sharp.Crc32cAlgorithm+<>c.<.cctor>b__5_0(uint8*,int32,uint32,bool)\\` will always throw because: [TEMPORARY EXCEPTION MESSAGE] MissingMethod: UInt64 System.Runtime.Intrinsics.X86.Sse42.Crc32(UInt64, UInt64) [C:\\Users\\diffe\\Desktop\\Crc32\\csprojs\\Crc32c.csproj]\r\n\r\nrelated code:\r\n\r\n```\r\nprivate unsafe delegate uint Crc32cFunc(byte* buffer, int count, uint hashValue, bool reversed);\r\nprivate static readonly Crc32cFunc CrcFunc;\r\n\\\\......\r\n CrcFunc = new Crc32cFunc((buffer, count, hashValue, reversed) =>\r\n                {\r\n                    var pulong = (ulong*)buffer;\r\n                    while (count > 7)\r\n                    {\r\n                        hashValue = (uint)System.Runtime.Intrinsics.X86.Sse42.Crc32(hashValue, *(pulong++));\r\n                        count -= 8;\r\n                    }\r\n                    var pubyte = (byte*)pulong;\r\n                    while (count-- > 0)\r\n                    {\r\n                        hashValue = System.Runtime.Intrinsics.X86.Sse42.Crc32(hashValue, *(pubyte++));\r\n                    }\r\n                    return reversed ? ~hashValue : hashValue;\r\n                });\r\n```\r\nrelated configs:\r\n\r\n`<PackageReference Include=\"System.Runtime.Intrinsics.Experimental\" Version=\"4.6.0-preview3-*\" />`\r\n\r\n","Url":"https://github.com/dotnet/corert/issues/6702","RelatedDescription":"Closed issue \"Warning while using methods in System.Runtime.Intrinsics\" (#6702)"},{"Id":"392556193","IsPullRequest":true,"CreatedAt":"2018-12-19T16:50:00","Actor":"kbaladurin","Number":"6695","RawContent":null,"Title":"[CppCodeGen] Fix inheritance emitting","State":"closed","Body":"If the base type is partially instantiated we use its canonical form:\r\n\r\nclass A<T, U> {}\r\n\r\nclass B<T> : A<string, T> {}\r\n\r\nIn this case we will have:\r\n\r\nclass B<System.__Canon> : A<System.__Canon, System.__Canon>\r\n\r\nThis patch fixes https://github.com/dotnet/corert/issues/6682","Url":"https://github.com/dotnet/corert/pull/6695","RelatedDescription":"Closed or merged PR \"[CppCodeGen] Fix inheritance emitting\" (#6695)"},{"Id":"392665032","IsPullRequest":true,"CreatedAt":"2018-12-19T15:55:08","Actor":"kbaladurin","Number":"6700","RawContent":null,"Title":"[CppCodeGen] Enable reflection support","State":"open","Body":"With this change and https://github.com/dotnet/corert/pull/6695 reflection tests are passed with following constraints:\r\n- Some tests are skipped due to missing exceptions support\r\n- `TestByRefLikeTypeMethod` is skipped (it's necessary to implement `RhGetCodeTarget` for CppCodeGen)\r\n- `TestByRefReturnInvoke` is skipped (it's necessary to implement Nullable box/unbox)\r\n\r\nAlso https://github.com/dotnet/corert/issues/6405 and https://github.com/dotnet/corert/issues/6423 should be fixed.","Url":"https://github.com/dotnet/corert/pull/6700","RelatedDescription":"Open PR \"[CppCodeGen] Enable reflection support\" (#6700)"},{"Id":"392567750","IsPullRequest":true,"CreatedAt":"2018-12-19T12:49:20","Actor":"kbaladurin","Number":"6696","RawContent":null,"Title":"[CppCodeGen] Add support for callsite-specific reflection intrinsics","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/6696","RelatedDescription":"Closed or merged PR \"[CppCodeGen] Add support for callsite-specific reflection intrinsics\" (#6696)"},{"Id":"392569911","IsPullRequest":true,"CreatedAt":"2018-12-19T12:03:57","Actor":"MichalStrehovsky","Number":"6697","RawContent":null,"Title":"Merge master to nmirror","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/6697","RelatedDescription":"Closed or merged PR \"Merge master to nmirror\" (#6697)"},{"Id":"391384225","IsPullRequest":true,"CreatedAt":"2018-12-18T17:02:45","Actor":"MichalStrehovsky","Number":"6688","RawContent":null,"Title":"Do not use R2R helpers for casting and allocation","State":"closed","Body":"This avoids generation of some of the helpers in favor of RyuJIT generating code that does what the helper would do. While this causes an about 1% regression in size of the generated executable, the benefit is better code density and fewer calls.","Url":"https://github.com/dotnet/corert/pull/6688","RelatedDescription":"Closed or merged PR \"Do not use R2R helpers for casting and allocation\" (#6688)"},{"Id":"392209645","IsPullRequest":false,"CreatedAt":"2018-12-18T15:32:45","Actor":"MarcoRossignoli","Number":"6694","RawContent":null,"Title":"[ILVerify]Add '--tokens' switch","State":"open","Body":"Today when ILVerify found issue we report tokens/offsets value for type system item for IL methods i.e.\r\n```\r\n[IL]: Error: [C:\\git\\corert\\bin\\Windows_NT.x64.Debug\\ILVerification.Tests\\Tests\\BranchingTests.dll : BranchingTestsType::Branching.FromTryIntoFinally_Invalid_BranchOutOfTry.BranchIntoHandler()][offset 0x00000004] Branch out of try block.\r\n```\r\nWe added some new type check and we decided to not report token value for it because they are not useful for regular use i.e.\r\n```\r\n[MD]: Error: Interface implementation has a duplicate. Class '[InterfaceImplementation]InterfaceImplHasDuplicate_InvalidType_InterfaceImplHasDuplicate' Interface: '[InterfaceDefinition]Interface'\r\n```\r\nHowever there are some scenario where tokens are useful, for instance on obfuscated code.\r\nWe should refactor code to have token values only if a user pass '--tokens'  switch to command line.\r\nReference https://github.com/dotnet/corert/pull/6687#discussion_r241916514","Url":"https://github.com/dotnet/corert/issues/6694","RelatedDescription":"Open issue \"[ILVerify]Add '--tokens' switch\" (#6694)"},{"Id":"391298312","IsPullRequest":true,"CreatedAt":"2018-12-18T15:09:12","Actor":"MarcoRossignoli","Number":"6687","RawContent":null,"Title":"[ILVerify]Added more tests","State":"closed","Body":"Added some new tests to new type check.\r\n\r\n/cc @jkotas ","Url":"https://github.com/dotnet/corert/pull/6687","RelatedDescription":"Closed or merged PR \"[ILVerify]Added more tests\" (#6687)"},{"Id":"392118165","IsPullRequest":true,"CreatedAt":"2018-12-18T12:37:47","Actor":"MichalStrehovsky","Number":"6692","RawContent":null,"Title":"Update RyuJIT","State":"closed","Body":"Picks up a JitInterface change.","Url":"https://github.com/dotnet/corert/pull/6692","RelatedDescription":"Closed or merged PR \"Update RyuJIT\" (#6692)"},{"Id":"391811403","IsPullRequest":true,"CreatedAt":"2018-12-18T04:45:33","Actor":"Dotnet-GitSync-Bot","Number":"6690","RawContent":null,"Title":"Mirror changes from dotnet/corefx","State":"closed","Body":"This PR contains mirrored changes from dotnet/corefx\n\n\n**Please REBASE this PR when merging**\n\n cc @StanislavUshakov","Url":"https://github.com/dotnet/corert/pull/6690","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corefx\" (#6690)"},{"Id":"391923515","IsPullRequest":true,"CreatedAt":"2018-12-18T00:30:21","Actor":"trylek","Number":"6691","RawContent":null,"Title":"Fix for static enum field placement","State":"closed","Body":"I found out that my static field placement changes were incorrect\r\nfor enums. This change fixes the deficiency and, in doing so,\r\nit fixes one of the remaining CoreCLR Top200 bug buckets.\r\n\r\nThanks\r\n\r\nTomas","Url":"https://github.com/dotnet/corert/pull/6691","RelatedDescription":"Closed or merged PR \"Fix for static enum field placement\" (#6691)"},{"Id":"390931623","IsPullRequest":true,"CreatedAt":"2018-12-17T00:37:04","Actor":"Dotnet-GitSync-Bot","Number":"6686","RawContent":null,"Title":"Mirror changes from dotnet/corefx","State":"closed","Body":"This PR contains mirrored changes from dotnet/corefx\n\n\n**Please REBASE this PR when merging**\n\n cc @mattwarren","Url":"https://github.com/dotnet/corert/pull/6686","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corefx\" (#6686)"},{"Id":"391466998","IsPullRequest":true,"CreatedAt":"2018-12-17T00:36:49","Actor":"MichalStrehovsky","Number":"6689","RawContent":null,"Title":"Suppress integral constant overflow warnings","State":"closed","Body":"These always show up in CppCodegen because we have a type in CoreLib where the C# compiler generated a `GetHashCode` method with a static integer constant overflow.","Url":"https://github.com/dotnet/corert/pull/6689","RelatedDescription":"Closed or merged PR \"Suppress integral constant overflow warnings\" (#6689)"}],"ResultType":"GitHubIssue"},"SDK-Issues":{"Issues":[{"Id":"393671505","IsPullRequest":true,"CreatedAt":"2018-12-22T13:01:24","Actor":"dotnet-maestro[bot]","Number":"2771","RawContent":null,"Title":"Update dependency files","State":"open","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18620.7\r\n- Microsoft.DotNet.SignTool - 1.0.0-beta.18620.7\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/2771","RelatedDescription":"Open PR \"Update dependency files\" (#2771)"},{"Id":"392840072","IsPullRequest":true,"CreatedAt":"2018-12-21T18:00:55","Actor":"wli3","Number":"2766","RawContent":null,"Title":"Fix package version 1000 cannot install","State":"closed","Body":"run `dotnet pack -p:version=1000` with packaged shim, and the result package cannot run. Due to embedded shim has version \"1000\" while the actual nuget folder layout is \"1000.0.0\".\r\n\r\nthe version need to be normalized to much the layout. Per discussion https://github.com/dotnet/cli/issues/9870","Url":"https://github.com/dotnet/sdk/pull/2766","RelatedDescription":"Closed or merged PR \"Fix package version 1000 cannot install\" (#2766)"},{"Id":"393451224","IsPullRequest":true,"CreatedAt":"2018-12-21T17:58:24","Actor":"dotnet-maestro[bot]","Number":"2770","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18620.6\r\n- Microsoft.DotNet.SignTool - 1.0.0-beta.18620.6\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/2770","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#2770)"},{"Id":"393294093","IsPullRequest":false,"CreatedAt":"2018-12-21T03:00:35","Actor":"davidwengier","Number":"2769","RawContent":null,"Title":"Remove duplicate FolderPublish capability for SDK projects","State":"open","Body":"Once https://github.com/dotnet/project-system/pull/4400 has been merged the capability can be removed from the SDK, leaving all publish related capabilities in the same targets file inside the project system, for consistency.\r\n\r\nhttps://github.com/dotnet/sdk/blob/c93f4a14ebcff4a18840b06886c5dcf24ae64a0e/src/Tasks/Microsoft.NET.Build.Tasks/targets/Microsoft.NET.Sdk.targets#L585-L588","Url":"https://github.com/dotnet/sdk/issues/2769","RelatedDescription":"Open issue \"Remove duplicate FolderPublish capability for SDK projects\" (#2769)"},{"Id":"392730861","IsPullRequest":false,"CreatedAt":"2018-12-20T21:23:42","Actor":"conniey","Number":"2765","RawContent":null,"Title":"`dotnet test` fails when native assets are required and multiple RuntimeIdentifiers are set","State":"closed","Body":"There are several related questions/issues to this (ie. #1017), so this might be more of a guidance question.\r\n\r\nOur ApiPort tests use ilasm to compile IL files and verify that our MetadataReader is working correctly. (ex. [Microsoft.Fx.Portability.MetadataReader.Tests.csproj](https://github.com/Microsoft/dotnet-apiport/blob/dev/tests/lib/Microsoft.Fx.Portability.MetadataReader.Tests/Microsoft.Fx.Portability.MetadataReader.Tests.csproj).\r\n\r\nIt currently only works on .NET 4.6, but we want to be able to run this test on Linux as well to make sure our MetadataReader works on all platforms.\r\n\r\nWhat is the solution here?\r\n\r\nWhen I set: `<RuntimeIdentifiers>win7-x86;linux-x64</RuntimeIdentifiers>`, all tests when running against both .NET 4.6 and .NETCoreApp2.1 because ildasm cannot be located (since it is not copied to the OuputDirectory).","Url":"https://github.com/dotnet/sdk/issues/2765","RelatedDescription":"Closed issue \"`dotnet test` fails when native assets are required and multiple RuntimeIdentifiers are set\" (#2765)"},{"Id":"393037303","IsPullRequest":true,"CreatedAt":"2018-12-20T20:32:27","Actor":"dotnet-maestro[bot]","Number":"2767","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18619.4\r\n- Microsoft.DotNet.SignTool - 1.0.0-beta.18619.4\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/2767","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#2767)"},{"Id":"393037322","IsPullRequest":false,"CreatedAt":"2018-12-20T13:01:50","Actor":"vgriph","Number":"2768","RawContent":null,"Title":"Links to app.config is case sensitive","State":"open","Body":"I've been migrating project files from the old project system to use Microsoft.NET.Sdk. We had some projects which share app.config using links of the type\r\n```\r\n<None Include=\"..\\OtherProject\\App.config\">\r\n  <Link>App.config</Link>\r\n</None>\r\n```\r\nHowever, with when using SDK file projects these links are not used for creating target assembly configuration file. After some debugging I found out that\r\n```\r\n<None Include=\"..\\OtherProject\\App.config\">\r\n  <Link>app.config</Link>\r\n</None>\r\n```\r\nworks.","Url":"https://github.com/dotnet/sdk/issues/2768","RelatedDescription":"Open issue \"Links to app.config is case sensitive\" (#2768)"},{"Id":"392591862","IsPullRequest":true,"CreatedAt":"2018-12-19T18:19:29","Actor":"dotnet-maestro[bot]","Number":"2763","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18618.7\r\n- Microsoft.DotNet.SignTool - 1.0.0-beta.18618.7\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/2763","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#2763)"},{"Id":"392680433","IsPullRequest":false,"CreatedAt":"2018-12-19T16:29:03","Actor":"nguerrera","Number":"2764","RawContent":null,"Title":"Changing AssemblyName prevent app from starting","State":"open","Body":"_From @LokiMidgard on December 18, 2018 11:5_\n\nI've created a project and want to rename the created Assembly.\r\nOutputType: `WinExe`  \r\nTargetFramework: `netcoreapp3.0`  \r\nUseWPF: `true`\r\n\r\nOS: `Windows 10`  \r\ndotnet core `3.0.100-preview-009812`\r\n\r\nAfter renaming it I can no longer start the exe or debug it in Visual Studio.\r\nFollowing error appears when I try to start debugging:\r\n```\r\nDas Programm \"[17104] DiceTool.exe\" wurde mit Code -2147450741 (0x8000808b) beendet.\r\nDas Programm \"[17104] DiceTool.exe: Programmablaufverfolgung\" wurde mit Code 0 (0x0) beendet.\r\n```\r\nI try to set `<AssemblyName>DiceTool.Ui</AssemblyName>` to `<AssemblyName>DiceTool</AssemblyName>`.\r\n\r\nReverting this change will fix the issue.\r\n\r\nThe code to reproduce this is in [this Commit](https://github.com/LokiMidgard/Dice-Tool/tree/512a397c8c09de7be3a2c1b106c9a7457fc5c305)\r\n\r\n\n\n_Copied from original issue: dotnet/core#2163_","Url":"https://github.com/dotnet/sdk/issues/2764","RelatedDescription":"Open issue \"Changing AssemblyName prevent app from starting\" (#2764)"},{"Id":"389994622","IsPullRequest":true,"CreatedAt":"2018-12-19T01:43:18","Actor":"jainaashish","Number":"2745","RawContent":null,"Title":"Insert NuGet Build 5.0.0-preview1.5707 into sdk","State":"closed","Body":"Keeping it consistent with 2.2.2xx train","Url":"https://github.com/dotnet/sdk/pull/2745","RelatedDescription":"Closed or merged PR \"Insert NuGet Build 5.0.0-preview1.5707 into sdk\" (#2745)"},{"Id":"392406799","IsPullRequest":true,"CreatedAt":"2018-12-19T01:43:03","Actor":"livarcocc","Number":"2762","RawContent":null,"Title":"Updating NuGet and CLI version.","State":"open","Body":"","Url":"https://github.com/dotnet/sdk/pull/2762","RelatedDescription":"Open PR \"Updating NuGet and CLI version.\" (#2762)"},{"Id":"392386471","IsPullRequest":true,"CreatedAt":"2018-12-19T00:01:31","Actor":"dotnet-bot","Number":"2761","RawContent":null,"Title":"Merge release/2.2.2xx to master","State":"open","Body":"\nThis is an automatically generated pull request from release/2.2.2xx into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.2.2xx-to-master\ngit reset --hard upstream/master\ngit merge upstream/release/2.2.2xx\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.2.2xx-to-master --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/2761","RelatedDescription":"Open PR \"Merge release/2.2.2xx to master\" (#2761)"},{"Id":"392125219","IsPullRequest":true,"CreatedAt":"2018-12-18T17:37:52","Actor":"dotnet-bot","Number":"2758","RawContent":null,"Title":"Merge release/2.2.1xx to release/2.2.2xx","State":"closed","Body":"\nThis is an automatically generated pull request from release/2.2.1xx into release/2.2.2xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.2.1xx-to-release/2.2.2xx\ngit reset --hard upstream/release/2.2.2xx\ngit merge upstream/release/2.2.1xx\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.2.1xx-to-release/2.2.2xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/2758","RelatedDescription":"Closed or merged PR \"Merge release/2.2.1xx to release/2.2.2xx\" (#2758)"},{"Id":"392146705","IsPullRequest":true,"CreatedAt":"2018-12-18T17:35:43","Actor":"dotnet-maestro[bot]","Number":"2759","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18617.7\r\n- Microsoft.DotNet.SignTool - 1.0.0-beta.18617.7\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/2759","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#2759)"},{"Id":"392203074","IsPullRequest":false,"CreatedAt":"2018-12-18T15:18:06","Actor":"weltkante","Number":"2760","RawContent":null,"Title":"References specified in the project file are sometimes dropped and replaced by wrong versions","State":"open","Body":"MsBuild loses assembly references specified in our project file if the SDK happens to import the same assembly (possibly in a different version) from nuget packages.\r\n\r\nWe have an ASP.NET Core project which pulls in Newtonsoft.Json with 11.0.2 package version. Our project file has an explicit reference to Newtonsoft.Json 12.0.0.0 assembly version. The reference is specified via HintPath because we do not want to update every single project file (we have a lot) when we change the 3rd party components we deploy.\r\n```xml\r\n    <Reference Include=\"Newtonsoft.Json\">\r\n      <HintPath>$(ReferenceBasePath)Newtonsoft.Json.dll</HintPath>\r\n    </Reference>\r\n```\r\nThe bug is in [`ResolveLockFileReferences`](https://github.com/dotnet/sdk/blob/master/src/Tasks/Microsoft.NET.Build.Tasks/targets/Microsoft.PackageDependencyResolution.targets#L448) target where in line 448 you are removing references via their name. Since you generate package references without strong identity you will remove any corresponding references specified in the project using the same name, even though they might have different metadata.\r\n\r\nmsbuild logging says\r\n```\r\n    _JoinedResolvedCompileFileDefinitions=\r\n        Newtonsoft.Json\r\n                ExternallyResolved=true\r\n                HintPath=C:\\Users\\username\\.nuget\\packages\\newtonsoft.json\\11.0.2\\lib\\net45\\Newtonsoft.Json.dll\r\n                NuGetPackageId=Newtonsoft.Json\r\n                NuGetPackageVersion=11.0.2\r\n                NuGetSourceType=Package\r\n                Private=false\r\n        System.Collections.Immutable\r\n                ExternallyResolved=true\r\n                HintPath=C:\\Users\\username\\.nuget\\packages\\system.collections.immutable\\1.5.0\\lib\\netstandard2.0\\System.Collections.Immutable.dll\r\n                NuGetPackageId=System.Collections.Immutable\r\n                NuGetPackageVersion=1.5.0\r\n                NuGetSourceType=Package\r\n                Private=false\r\n        System.Reflection.Metadata\r\n                ExternallyResolved=true\r\n                HintPath=C:\\Users\\username\\.nuget\\packages\\system.reflection.metadata\\1.6.0\\lib\\netstandard2.0\\System.Reflection.Metadata.dll\r\n                NuGetPackageId=System.Reflection.Metadata\r\n                NuGetPackageVersion=1.6.0\r\n                NuGetSourceType=Package\r\n                Private=false\r\n    Entfernte Elemente: \r\n    Reference=\r\n        Newtonsoft.Json\r\n                HintPath=..\\..\\..\\ThirdParty\\Newtonsoft.Json.dll\r\n        System.Collections.Immutable\r\n                HintPath=..\\..\\..\\ThirdParty\\System.Collections.Immutable.dll\r\n        System.Reflection.Metadata\r\n                HintPath=..\\..\\..\\ThirdParty\\System.Reflection.Metadata.dll\r\n    Hinzugefügte Elemente: \r\n    Reference=\r\n        Newtonsoft.Json\r\n                ExternallyResolved=true\r\n                HintPath=C:\\Users\\username\\.nuget\\packages\\newtonsoft.json\\11.0.2\\lib\\net45\\Newtonsoft.Json.dll\r\n                NuGetPackageId=Newtonsoft.Json\r\n                NuGetPackageVersion=11.0.2\r\n                NuGetSourceType=Package\r\n                Private=false\r\n        System.Collections.Immutable\r\n                ExternallyResolved=true\r\n                HintPath=C:\\Users\\username\\.nuget\\packages\\system.collections.immutable\\1.5.0\\lib\\netstandard2.0\\System.Collections.Immutable.dll\r\n                NuGetPackageId=System.Collections.Immutable\r\n                NuGetPackageVersion=1.5.0\r\n                NuGetSourceType=Package\r\n                Private=false\r\n        System.Reflection.Metadata\r\n                ExternallyResolved=true\r\n                HintPath=C:\\Users\\username\\.nuget\\packages\\system.reflection.metadata\\1.6.0\\lib\\netstandard2.0\\System.Reflection.Metadata.dll\r\n                NuGetPackageId=System.Reflection.Metadata\r\n                NuGetPackageVersion=1.6.0\r\n                NuGetSourceType=Package\r\n                Private=false\r\n```\r\nThe problem goes away if we specify the reference as\r\n```xml\r\n    <Reference Include=\"Newtonsoft.Json, Version=12.0.0.0\">\r\n      <HintPath>$(ReferenceBasePath)Newtonsoft.Json.dll</HintPath>\r\n    </Reference>\r\n```\r\nbut this is something we do *not* want due to the amount of projects and number of references we would have to maintain manually. For us assembly references are uniquely defined by the version checked into source control in their corresponding third party folder.\r\n\r\nWhile debugging the issue I have seen other msbuild target files acknowledge this problem by rebuilding the references list instead of selectively removing references. Something like\r\n```xml\r\n    <ItemGroup>\r\n      <Reference Remove=\"@(Reference)\"/>\r\n      <Reference Include=\"@(_ModifiedReferences)\"/>\r\n    </ItemGroup>\r\n```\r\nUnfortunately I can't seem to find the place again where I've seen it, but I hope you get the idea of the problem.","Url":"https://github.com/dotnet/sdk/issues/2760","RelatedDescription":"Open issue \"References specified in the project file are sometimes dropped and replaced by wrong versions\" (#2760)"},{"Id":"391940621","IsPullRequest":true,"CreatedAt":"2018-12-18T03:30:25","Actor":"dotnet-bot","Number":"2757","RawContent":null,"Title":"Merge release/2.1.5xx to release/2.2.1xx","State":"closed","Body":"\nThis is an automatically generated pull request from release/2.1.5xx into release/2.2.1xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1.5xx-to-release/2.2.1xx\ngit reset --hard upstream/release/2.2.1xx\ngit merge upstream/release/2.1.5xx\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.1.5xx-to-release/2.2.1xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/2757","RelatedDescription":"Closed or merged PR \"Merge release/2.1.5xx to release/2.2.1xx\" (#2757)"},{"Id":"391887120","IsPullRequest":true,"CreatedAt":"2018-12-17T21:54:39","Actor":"wli3","Number":"2756","RawContent":null,"Title":"No apphost in PackAsTool","State":"closed","Body":"fix #https://github.com/dotnet/sdk/issues/2749","Url":"https://github.com/dotnet/sdk/pull/2756","RelatedDescription":"Closed or merged PR \"No apphost in PackAsTool\" (#2756)"},{"Id":"391643563","IsPullRequest":false,"CreatedAt":"2018-12-17T16:31:07","Actor":"YunWeiaa","Number":"2754","RawContent":null,"Title":"For .Net Core 3.0, create a winforms app, dotnet run without the windows box poping up.","State":"closed","Body":"### Description:\r\nCreate a winforms app. Build and run. \r\ndotnet new winforms -o MyWinFormsApp \r\ncd MyWinFormsApp \r\ndotnet build \r\ndotnet run\r\n\r\n**Expected**: It should appear a windows box like this\r\n![image](https://user-images.githubusercontent.com/33921754/50080741-c4c90800-0227-11e9-8163-39413bd95ebe.png)\r\n\r\n**Actual**: It doesn’t pop up a windows box.\r\n![image](https://user-images.githubusercontent.com/33921754/50080827-f17d1f80-0227-11e9-9d5e-a6298d7667fb.png)\r\n### Test Environment:\r\nD16.0/28414.68(16.0 preview 2.0) + CLI\\SDK: 3.0.100-preview-009839 \r\ndotnet --info:\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview-009839\r\n Commit:    ee9fe44627\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.16299\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview-009839\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview-27216-02\r\n  Commit:  79edbd4d15\r\n\r\n.NET Core SDKs installed:\r\n  2.1.600-preview-009426 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.200-preview-009648 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview-009839 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview-18579-0056 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview-27216-02 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-alpha-27214-12 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n\r\n\r\n","Url":"https://github.com/dotnet/sdk/issues/2754","RelatedDescription":"Closed issue \"For .Net Core 3.0, create a winforms app, dotnet run without the windows box poping up.\" (#2754)"},{"Id":"391504131","IsPullRequest":true,"CreatedAt":"2018-12-17T16:23:27","Actor":"dagood","Number":"2753","RawContent":null,"Title":"Exclude unit test projects from source-build","State":"closed","Body":"Reopening https://github.com/dotnet/sdk/pull/2642. (I don't seem to have permissions to reopen the PR in-place.)\r\n\r\n> This is a patch for removing test dependencies from source-build: https://github.com/dotnet/source-build/pull/847.\r\n> \r\n> RepoToolset picks up on this `ExcludeFromSourceBuild` property I'm adding and disables restore and build.\r\n> \r\n> @nguerrera, PTAL.\r\n\r\nThis is the patch directly: https://github.com/dotnet/source-build/blob/ecc7b00f5b7cf2d21cb6f545669690f7ab4996fc/patches/sdk/0001-Exclude-unit-test-projects-from-source-build.patch. Getting patch fixes pulled into the repo is important to us to avoid maintenance costs.","Url":"https://github.com/dotnet/sdk/pull/2753","RelatedDescription":"Closed or merged PR \"Exclude unit test projects from source-build\" (#2753)"},{"Id":"391702193","IsPullRequest":true,"CreatedAt":"2018-12-17T16:23:00","Actor":"dotnet-maestro[bot]","Number":"2755","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18616.5\r\n- Microsoft.DotNet.SignTool - 1.0.0-beta.18616.5\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/2755","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#2755)"},{"Id":"391465182","IsPullRequest":true,"CreatedAt":"2018-12-16T21:53:20","Actor":"dotnet-maestro[bot]","Number":"2750","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18615.1\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/2750","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#2750)"},{"Id":"391496812","IsPullRequest":true,"CreatedAt":"2018-12-16T20:07:57","Actor":"nguerrera","Number":"2752","RawContent":null,"Title":"Use latest signtool to avoid MAX_PATH issue in official builds","State":"closed","Body":"","Url":"https://github.com/dotnet/sdk/pull/2752","RelatedDescription":"Closed or merged PR \"Use latest signtool to avoid MAX_PATH issue in official builds\" (#2752)"},{"Id":"390333769","IsPullRequest":false,"CreatedAt":"2018-12-16T19:45:26","Actor":"abpiskunov","Number":"2747","RawContent":null,"Title":"Add publish capabilities for SDK based ClassLibraries and ConsoleApps","State":"closed","Body":"Per our discussion with @nguerrera and @davkean we need to switch to new capabilities schema for publish (see below). To accomplish that one of the workitems is to add\r\n\r\n- FolderPublish to SDK-based class libraries and console apps , along with WPF and WinForms (if it is not present yet)\r\n- AppServicePublish to SDK-based class libraries and console apps \r\n\r\nThis needs to happen in P2 and earlier rather than later since Publish would need to commit and test changes after all capabilities are added.\r\n\r\nCapabilities \r\n \r\n•         \"Publish\": all projects that support any kind of publish should contain this capability\r\no    All .NET project types\r\n•         \"FolderPublish\": if project supports publishing to folder\r\no    Class libraries  (classic and core). Note: we don't own Publish for classic class libraries and classic ConsoleApps, ClickOnce does. There should be separate work item tracking ClickOnce support for our publish framework. However we can add capability now and it would light up when ClickOnce adds apublish provider.\r\no    Console app (classic, core). \r\no    WebSites, WAP, Web core\r\no    WPF (core and classic)\r\no    WinForms (classic and core)\r\n•         \"AppServicePublish\": if project is publishable to any web related publish target: Web, AppService, etc \r\no    Console apps (classic and core)\r\no    WebSites, WAP, Web core\r\n \r\nPotential pending capabilities:\r\n•         \"ClickOnce\"\r\no    Classic console apps\r\no    WPF (classic)\r\no    WinForms (classic)\r\n•         \"MSIX\"\r\no    Console apps (classic and core)\r\no    WPF (classic and core)\r\no    WinForms (classic and core)\r\n \r\n \r\n \r\nProviders \r\n \r\n•         FolderProvider: AppliesTo(\"Publish&FolderPublish\")\r\n•         AppServiceProvider: AppliesTo(\"Publish&AppServicePublish\")\r\n•         IISProvider: AppliesTo(\"Publish&Web\")\r\n•         AzureVMProvider: AppliesTo(\"Publish&Web\")\r\n•         AppServiceLinuxProvider: AppliesTo(\"Publish&DotNetCoreWeb\")\r\n•         ContainerRegistryProvider:AppliesTo(Publish&AppServicePublish&(Web|DotnetCoreWeb))\r\n•         ClickOnceProvider:AppliesTo(Publish&ClickOnce)\r\n•         MSIXProvider:AppliesTo(Publish&MSIX)\r\n \r\n \r\nWorkitems:\r\n \r\n•\tAdd FolderPublish to WPF and WinForms (classic and core), Class Libraries and Console Apps (classic and core). Some of them already have it , just make sure all of them have. <- CSharp & SDK\r\n•\tAdd AppServicePublish to Console apps (classic and core) <- CSharp and SDK\r\n•\tAdd AppServicePublish to WebSites, WAP, and Core Web <- WAP and WebSdk\r\n \r\nClickOnce and MSIX I would leave to their owner to request/add when they are ready.\r\n","Url":"https://github.com/dotnet/sdk/issues/2747","RelatedDescription":"Closed issue \"Add publish capabilities for SDK based ClassLibraries and ConsoleApps\" (#2747)"},{"Id":"391486333","IsPullRequest":false,"CreatedAt":"2018-12-16T17:09:36","Actor":"joaorosado","Number":"2751","RawContent":null,"Title":"Properties defined in target files do not get applied with multiple TargetFrameworks","State":"open","Body":"I'm adding multitargeting to net461 and netstandard2.0 in some of my projects as a migration path.\r\nWhile doing this and trying I noticed that in one of the targets all the generate AssemblyInfo had the default values.\r\n\r\nCurrently I have a import on my projects that adds extra targets and sets the common properties consistently on all of them.\r\n`<Import Project=\"$(ProjectDir)..\\..\\Commons\\Common.targets\" />`\r\n\r\nthis target file is taking care of the properties import inside (but the problem also occurs if they are defined explicitly in the .targets) \r\n`<Import Project=\"Common.props\" />`\r\n\r\nThis worked fine with one target and in the generated assembly info file that Visual Studio is doing automatically (I can see both files in disk being changed correctly).\r\nBut then when actually doing the real build the AssemblyInfo on the **second** target gets all the default values.\r\n\r\nI've found 2 workarounds for this:\r\n- Import the \"Common.props\" directly on my project.\r\n- Add an empty \"Directory.Build.props\" file on the root of my repository. <- not sure why this fixes it\r\n\r\nWhile I'm OK with any of the workarounds, I'm really worried that other target files get incorrect properties and that the second target framework gets build incorrectly.\r\n\r\nHow is the correct way of doing this?\r\n\r\nTested with both VS 15.9.3 and 15.9.4 \r\n\r\nEdit: can't seem to get any of my workarounds to work now that upgraded to 15.9.4 :(","Url":"https://github.com/dotnet/sdk/issues/2751","RelatedDescription":"Open issue \"Properties defined in target files do not get applied with multiple TargetFrameworks\" (#2751)"},{"Id":"389753827","IsPullRequest":true,"CreatedAt":"2018-12-15T21:44:35","Actor":"dotnet-maestro[bot]","Number":"2742","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18610.4\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18611.14\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18612.12\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18614.3\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/2742","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#2742)"},{"Id":"390007564","IsPullRequest":true,"CreatedAt":"2018-12-14T00:15:33","Actor":"dotnet-bot","Number":"2746","RawContent":null,"Title":"Merge release/2.2.2xx to master","State":"closed","Body":"\nThis is an automatically generated pull request from release/2.2.2xx into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.2.2xx-to-master\ngit reset --hard upstream/master\ngit merge upstream/release/2.2.2xx\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.2.2xx-to-master --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/2746","RelatedDescription":"Closed or merged PR \"Merge release/2.2.2xx to master\" (#2746)"},{"Id":"390902820","IsPullRequest":false,"CreatedAt":"2018-12-13T23:21:33","Actor":"wli3","Number":"2749","RawContent":null,"Title":"Pack as tool should not generate exe in nupkg","State":"open","Body":"We generate an executable by default as a new 3.0.xxx feature. However, we should not generate such file during PackAsTool. It should not be harmful however it would be flagged or signed by infrastructure","Url":"https://github.com/dotnet/sdk/issues/2749","RelatedDescription":"Open issue \"Pack as tool should not generate exe in nupkg\" (#2749)"},{"Id":"390775310","IsPullRequest":false,"CreatedAt":"2018-12-13T17:53:16","Actor":"nphmuller","Number":"2748","RawContent":null,"Title":"Option to treat NETSDK warnings as errors","State":"closed","Body":"While updating to 2.2.100 I noticed a couple of warnings were added. Like `NETSDK1071`.\r\nIn my CI I build using the `TreatWarningsAsErrors` flag (`dotnet build /p:TreatWarningsAsErrors=\"true\"`)`.\r\n\r\nThe build still completed succesfully, while `NETSDK1071` was thrown.\r\n\r\nWhat is the recommended way to force a build to fail if any of these warnings are thrown from the SDK?\r\nThe most user friendly way would be to use the same flag as msbuild. But that doesn't seem to be supported atm.","Url":"https://github.com/dotnet/sdk/issues/2748","RelatedDescription":"Closed issue \"Option to treat NETSDK warnings as errors\" (#2748)"},{"Id":"389836302","IsPullRequest":true,"CreatedAt":"2018-12-11T17:33:37","Actor":"nugetlurker","Number":"2743","RawContent":null,"Title":"Insert NuGet Build 5.0.0-preview1.5707 into sdk","State":"closed","Body":"Insert NuGet Build 5.0.0-preview1.5707 into sdk release/2.2.2xx branch","Url":"https://github.com/dotnet/sdk/pull/2743","RelatedDescription":"Closed or merged PR \"Insert NuGet Build 5.0.0-preview1.5707 into sdk\" (#2743)"},{"Id":"389836305","IsPullRequest":true,"CreatedAt":"2018-12-11T17:33:03","Actor":"nugetlurker","Number":"2744","RawContent":null,"Title":"Insert NuGet Build 5.0.0-preview1.5707 into sdk","State":"closed","Body":"Insert NuGet Build 5.0.0-preview1.5707 into sdk release/2.1.6xx branch","Url":"https://github.com/dotnet/sdk/pull/2744","RelatedDescription":"Closed or merged PR \"Insert NuGet Build 5.0.0-preview1.5707 into sdk\" (#2744)"}],"ResultType":"GitHubIssue"},"Announcements-Issues":{"Issues":[{"Id":"390948658","IsPullRequest":false,"CreatedAt":"2018-12-14T03:22:58","Actor":"1015450578","Number":"93","RawContent":null,"Title":"Docker image with tag '2.2-aspnetcore-runtime' is not compatible","State":"closed","Body":"1. Install  .NET Core 2.2.100 sdk\r\n2. Create a new 'AspNetCore Web Api' by using Visual Studio 2017,and enbale docker support.\r\n3. F5 ,the Output Windows shows:\r\n>It was not possible to find any compatible framework version\r\n>The specified framework 'Microsoft.AspNetCore.App', version '2.2.0' was not found.\r\n>  - Check application dependencies and target a framework version installed at:\r\n>      /usr/share/dotnet/\r\n>  - Installing .NET Core prerequisites might help resolve this problem:\r\n>     http://go.microsoft.com/fwlink/?LinkID=798306&clcid=0x409\r\n>  - The .NET Core framework and SDK can be installed from:\r\n>      https://aka.ms/dotnet-download\r\n>  - The following versions are installed:\r\n>      2.2.0-preview3-35497 at [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]","Url":"https://github.com/dotnet/announcements/issues/93","RelatedDescription":"Closed issue \"Docker image with tag '2.2-aspnetcore-runtime' is not compatible\" (#93)"},{"Id":"390193072","IsPullRequest":false,"CreatedAt":"2018-12-12T12:56:53","Actor":"bilalMlaik","Number":"92","RawContent":null,"Title":".net core Console","State":"closed","Body":"I am running dot net core console app as web jobs and it is working perfectly in docker with docker compose. Now the issue is I want to pass a value to the application via Console.ReadLine() over this value i make some decision but i am unable to pass value via Console.ReadLine(). How i can do it please help me. For more understanding, i have added my docker compose file below\r\n`version: '3.4'\r\n\r\nservices:\r\n  \r\n  tt.core.web:\r\n    image: ${DOCKER_REGISTRY-}ttcoreweb\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.Web/Dockerfile\r\n    depends_on:\r\n     - db\r\n    networks:\r\n     - app-network\r\n\r\n  tt.core.downtime.webjob:\r\n    image: ${DOCKER_REGISTRY-}ttcoredowntimewebjob\r\n    environment:\r\n      CORE_ENVIRONMENT: devdocker\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.Downtime.Webjob/Dockerfile\r\n    depends_on:\r\n     - db\r\n     - tt.core.web\r\n    networks:\r\n     - app-network\r\n\r\n  db:\r\n    image: microsoft/mssql-server-linux\r\n    container_name: db\r\n    environment:\r\n      SA_PASSWORD: \"Thingtrax%1\"\r\n      ACCEPT_EULA: \"Y\"\r\n      MSSQL_PID: Express\r\n    ports:\r\n      - \"7002:1433\"\r\n    networks:\r\n      app-network:\r\n        ipv4_address: 172.24.0.2\r\n\r\nnetworks:\r\n  app-network:\r\n    ipam:\r\n      driver: default\r\n      config:\r\n        - subnet: 172.24.0.0/16\r\n\r\n`\r\nIf the detail is not enough or you do not get my point, you can share your confusion in comment","Url":"https://github.com/dotnet/announcements/issues/92","RelatedDescription":"Closed issue \".net core Console\" (#92)"},{"Id":"380346599","IsPullRequest":false,"CreatedAt":"2018-11-13T17:44:44","Actor":"leecow","Number":"91","RawContent":null,"Title":"November 2018 .NET Updates","State":"open","Body":"# November 2018 .NET Updates\r\n\r\nThe following .NET updates were released in November 2018. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Core\r\n\r\n* [.NET Core November 2018 (2.1.6 and SDK 2.1.500) Update release notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.6/2.1.6.md)\r\n\r\nA [discussion issue](https://github.com/dotnet/core/issues/2053) is available for questions or feedback about this release.\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n* [October 2018](https://github.com/dotnet/announcements/issues/89)\r\n* [September 2018](https://github.com/dotnet/announcements/issues/84)\r\n* [August 2018](https://github.com/dotnet/announcements/issues/79)\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)","Url":"https://github.com/dotnet/announcements/issues/91","RelatedDescription":"Open issue \"November 2018 .NET Updates\" (#91)"},{"Id":"375230004","IsPullRequest":false,"CreatedAt":"2018-10-29T21:45:27","Actor":"terrajobst","Number":"90","RawContent":null,"Title":"The future of JSON in .NET Core 3.0","State":"open","Body":"JSON has become an essential part of virtually all modern .NET applications and in many cases even surpassed the usage of XML. However, .NET hasn't had a (great) built-in way to deal with JSON. Instead we've relied on [Json.NET] which continues to serve the .NET ecosystem well.\r\n\r\n[Json.NET]: https://www.newtonsoft.com/json\r\n\r\nMoving forward, we plan on making some changes to our JSON support:\r\n\r\n* **We need high-performance JSON APIs**. We need a new set of JSON APIs that are highly tuned for performance by using `Span<T>` and allows for processing UTF-8 directly without having to transcode to UTF-16 `string` instances. Both aspects are critical for our web server Kestrel, where throughput is a key requirement.\r\n\r\n* **Remove dependency from ASP.NET Core to Json.NET**. Today, ASP.NET Core has a dependency on Json.NET. While this provides a tight integration between ASP.NET Core and Json.NET, it also means that application developers cannot freely choose which JSON library they are using. This is also problematic for customers of Json.NET as the version is dictated by the underlying platform. However, Json.NET is frequently updated and application developers often want to -- or even have to -- use a specific version. Thus, we want to remove the dependency from ASP.NET Core 3.0 to Json.NET so that customers can choose which version to use, without fearing they might accidentally break the underlying platform. In addition, this makes it also possible to plug-in an entirely different JSON library.\r\n\r\n* **Provide an ASP.NET Core integration package for Json.NET**. Json.NET has basically become the Swiss Army knife of JSON processing in .NET. It provides many options and facilities that allow customers to handle their JSON needs with ease. We don't want to compromise on the Json.NET support customers are getting today, for example, the ability to configure the JSON serialization via the `AddJsonOptions` extension method. Thus, we want to provide the Json.NET integration as a NuGet package that developers can optionally install so they get all the bells and whistles they get from Json.NET today. The other part of this work item is to ensure we have the right extension points so that other parties can provide similar integration packages for their JSON library of choice.\r\n\r\nBelow are more details around this plan.\r\n\r\n## The need for high-performance JSON APIs\r\n\r\nThe requirements for the .NET stack have changed a bit since the arrival of .NET Core. Historically, .NET has valued usability and convenience. With .NET Core, we've added a focus on performance, and we've made significant investments to serve high performance needs. And the [improvements we made][techempower] in the popular TechEmpower benchmark are a testament to that.\r\n\r\n[techempower]: https://www.techempower.com/blog/2016/11/16/framework-benchmarks-round-13/\r\n\r\nWith .NET Core 2.1, we've added a brand new primitive called [Span\\<T>][span-msdn] that allows us to represent native memory and arrays in a uniform way. With this type, we've also added a set of parsing and encoding APIs that are much more memory efficient without having to resort to unsafe code.\r\n\r\n[span-msdn]: https://msdn.microsoft.com/en-us/magazine/mt814808.aspx\r\n\r\nPart of the work of minimizing allocations is to avoid having to transcode UTF-8 payloads into UTF-16 strings, purely for parsing reasons. Currently, Json.NET is implemented by reading UTF-16. We need the ability to read (and write) JSON documents directly in UTF-8 because most network protocols (including HTTP) use UTF-8.\r\n\r\nDuring .NET Core 2.1 we've learned that updating our existing APIs to leverage `Span<T>` has limits. While we did add a bunch of overloads that accept spans, we also had to produce brand new APIs that are designed around minimizing allocations and dealing with buffers, which we exposed in `System.Buffers` namespaces. And with `System.IO.Pipelines` we've also added a programming model that enables developers to share buffers without having to deal with lifetime issues.\r\n\r\nBased on these experiences we believe in order to support JSON parsing, we'll need to expose a new set of JSON APIs that are specifically geared for high-performance scenarios.\r\n\r\nYou might wonder why we can't just update Json.NET to include support for parsing JSON using `Span<T>`? Well, James Newton-King -- the author of Json.NET -- has the following to say about that:\r\n\r\n> Json.NET was created over 10 years ago, and since then it has added a wide range of features aimed to help developers work with JSON in .NET. In that time Json.NET has also become far and away NuGet's most depended on and downloaded package, and is the go-to library for JSON support in .NET. Unfortunately, Json.NET's wealth of features and popularity works against making major changes to it. Supporting new technologies like `Span<T>` would require fundamental breaking changes to the library and would disrupt existing applications and libraries that depend on it.\r\n>\r\n> Going forward Json.NET will continue to be worked on and invested in, both addressing known issues today and supporting new platforms in the future. Json.NET has always existed alongside other JSON libraries for .NET, and there will be nothing to prevent you using one or more together, depending on whether you need the performance of the new JSON APIs or the large feature set of Json.NET.\r\n\r\n## Move Json.NET integration into a separate NuGet package\r\n\r\nToday, you cannot use ASP.NET Core without Json.NET because it is a dependency of ASP.NET Core itself. Over the years, we've received feedback that the dependency can conflict with other libraries that have their own dependency on a different version of Json.NET. In the past, we've considered addressing this issue by using a private copy of Json.NET in ASP.NET. However, this would create problems when developers want to configure Json.NET (for instance, in order to control how the serializer behaves when formatting JSON objects).\r\n\r\nMoving forward we'd like to:\r\n\r\n1. Replace the internal usage of Json.NET in ASP.NET Core by the new platform-provided JSON APIs.\r\n\r\n2. Factor the public facing usage of Json.NET into an optional integration package that can be acquired from NuGet.\r\n\r\nSo the existing integration between ASP.NET Core and Json.NET will continue to be supported, but will be moving out of the platform and into a separate package. However, since the integration is then designed to sit on top of the platform, it will also allow customers to update Json.NET to later versions.\r\n\r\nFurthermore, customers who need more performance can also choose to use the new JSON APIs, at the expense of the rich feature set that Json.NET offers.\r\n\r\n## Discussion\r\n\r\nFor a discussion, please go to https://github.com/dotnet/corefx/issues/33115.","Url":"https://github.com/dotnet/announcements/issues/90","RelatedDescription":"Open issue \"The future of JSON in .NET Core 3.0\" (#90)"},{"Id":"368440353","IsPullRequest":false,"CreatedAt":"2018-10-09T23:44:06","Actor":"vivmishra","Number":"89","RawContent":null,"Title":"October 2018 .NET Updates","State":"open","Body":"# October 2018 .NET Updates\r\n\r\nThe following .NET updates were released in October 2018. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Core\r\n\r\n* [.NET Core October 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/10/09/net-core-october-2018-update-net-core-1-0-and-1-1/)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n* [September 2018](https://github.com/dotnet/announcements/issues/84)\r\n* [August 2018](https://github.com/dotnet/announcements/issues/79)\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)","Url":"https://github.com/dotnet/announcements/issues/89","RelatedDescription":"Open issue \"October 2018 .NET Updates\" (#89)"},{"Id":"368429033","IsPullRequest":false,"CreatedAt":"2018-10-09T22:51:18","Actor":"leecow","Number":"88","RawContent":null,"Title":"Microsoft Security Advisory CVE-2018-8292: .NET Core Information Disclosure Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-8292: .NET Core Information Disclosure Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a security feature bypass vulnerability that exists when .NET Core when HTTP authentication information is inadvertently exposed in an outbound request that encounters an HTTP redirect. An attacker who successfully exploited this vulnerability could use the information to further compromise the web application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core applications handles HTTP redirects.\r\n\r\nSystem administrators running .NET Core 1.0 or .NET Core 1.1 applications must update their .NET Core runtimes to versions 1.0.13 and 1.1.10 then restart their applications. If installed applications target .NET Core 2.0, the applications must be migrated to 2.1 or newer and redeployed.\r\n\r\nDevelopers must update their .NET Core SDK to versions 1.1.11 and migrate any [.NET Core 2.0](https://docs.microsoft.com/dotnet/core/migration/20-21) or [ASP.NET Core 2.0](https://docs.microsoft.com/aspnet/core/migration/20_21?view=aspnetcore-2.1) applications to 2.1 then redeploy.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at <https://github.com/dotnet/corefx/issues/32730>\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nNone\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core application that runs on a .NET Core 1.0.x runtime with a version number of 1.0.12 or lower, or a .NET Core application that runs on a .NET Core 1.1.x runtime with a version number of 1.1.9 or lower, or a .NET Core application that runs on a .NET Core 2.0.x runtime.\r\n\r\nAdditionally package authors should check their dependencies to ensure they aren't depending on a vulnerable version of the following package:\r\n\r\n<a name=\"package-list\"></a>Package name | Vulnerable versions | Secure versions\r\n------------ | ---------------- | -------------------------\r\nSystem.Net.Http| 2.0.20126.16343, 2.0.20505, 2.0.20710, 4.0.0, 4.1.0, 4.1.1, 4.1.2, 4.3.0, 4.3.1, 4.3.2, 4.3.3 |  4.3.4 or later\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nAny .NET Core application that runs on a .NET Core 1.0.x runtime with a version number of 1.0.12 or lower, or a .NET Core application that runs on a .NET Core 1.1.x runtime with a version number of 1.1.9 or lower, or a .NET Core application that runs on a .NET Core 2.0.x runtime.\r\n\r\nTo check the currently installed runtimes and SDKs with version 2.1 or later of .NET Core, open a command prompt and run the `dotnet --info` command. You should see an output similar to the following:\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.1.403\r\n Commit:    04e15494b6\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17763\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.403\\\r\n\r\nHost (useful for support):\r\n  Version: 2.1.5\r\n  Commit:  290303f510\r\n\r\n.NET Core SDKs installed:\r\n  1.0.4 [C:\\Program Files\\dotnet\\sdk]\r\n  1.1.10 [C:\\Program Files\\dotnet\\sdk]\r\n  2.0.3 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.4 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf you don't see a runtime entry for 1.0.13 or 1.1.10, any .NET Core 1.x applications run on that computer are vulnerable.\r\n\r\nIf you don't have a 2.1 version of the runtime or SDK installed, you can produce the complete list of runtimes by performing a directory listing in the install root directories. The default root directories are listed in the following table:\r\n\r\n| Operating System | Location |\r\n|------------------|----------|\r\n| Windows | `C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\` |\r\n| macOS | `/usr/local/share/dotnet/shared/Microsoft.NETCore.App/` |\r\n| Supported Linux platforms | `/usr/share/dotnet/shared/Microsoft.NETCore.App/` |\r\n\r\nEach runtime version is installed in its own directory, where the directory name is the version number. If you don't have a directory for 1.0.13, 1.1.10 then any application targeting versions 1.0 or 1.1 are vulnerable.\r\n\r\nAdditionally, if you've deployed [self-contained applications](https://docs.microsoft.com/dotnet/core/deploying/#self-contained-deployments-scd) targeting any of the impacted versions, these applications are also vulnerable and must be recompiled and redeployed.\r\n\r\n### <a name=\"fix-runtime\">How do I fix the vulnerability?\r\n\r\nSystem administrators are advised to update their .NET Core runtimes to versions 1.0.13, 1.1.10 and install the latest 2.1 runtime, ensuring that any 2.0 applications are migrated to 2.1 as soon as possible.\r\n\r\n Developers are advised to update their .NET Core SDK to versions 1.1.11 and migrate any [.NET Core](https://docs.microsoft.com/dotnet/core/migration/20-21) or [ASP.NET Core 2.0](https://docs.microsoft.com/aspnet/core/migration/20_21?view=aspnetcore-2.1) applications to 2.1 and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at <https://github.com/dotnet/> and <https://github.com/aspnet/>, respectively. The Announcements repo for each product (<https://github.com/dotnet/Announcements> and <https://github.com/aspnet/Announcements>) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2018-8292](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-CVE-2018-8292)\r\n\r\n### Revisions\r\n\r\nV1.0 (October 10, 2018): Advisory published.\r\n_Version 1.0_\r\n_Last Updated 2018-10-10_\r\n","Url":"https://github.com/dotnet/announcements/issues/88","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2018-8292: .NET Core Information Disclosure Vulnerability\" (#88)"},{"Id":"367393517","IsPullRequest":false,"CreatedAt":"2018-10-05T22:58:51","Actor":"leecow","Number":"87","RawContent":null,"Title":".NET Core Release Data (releases.json) Redesign and v1 Deprecation Plan","State":"open","Body":"# .NET Core Release Data (releases.json) Redesign and Deprecation\r\n\r\nThe releases.json and releases.csv files began life as helper tools for some of our internal release work, some experimentation and to possibly be useful to the community. It has been great to learn the files are indeed in use and many folks depend on them as a trigger for a number of activities.\r\n\r\n* [release-notes/releases.json](https://github.com/dotnet/core/blob/master/release-notes/releases.json)\r\n* [release-notes/releases.csv](https://github.com/dotnet/core/blob/master/release-notes/releases.csv)\r\n\r\nA discussion topic is available to share thoughts and see what others are thinking at https://github.com/dotnet/core/issues/1986\r\n\r\nBetween the usages which we have become aware and in considering further activities that could be enabled to reason about things such as checking .NET Core version availability and support status, it became clear the current format is inadequate.\r\n\r\nAn updated format has been designed and tested which will replace the current files. The timeline below describes the path to obsoleting the current files.\r\n\r\n## The Plan\r\n\r\n| Date | Action |\r\n| :--- | :----- |\r\n| Oct 2018 | Notify the community of the coming change |\r\n| Oct 2018 | Release the new json format into dotnet/core |\r\n| Oct 2018 - Feb 2019 | Maintain the old json and csv files |\r\n| Feb 2019 | Reminder announcement that old format file is coming soon |\r\n| Mar 2019 | Old json and csv files are obsoleted and removed from dotnet/core |\r\n\r\n## Breaking change\r\n\r\nIf you are currently utilizing the old version json or csv, you will need to update the relevant code to work with the new format. If you are just getting started with consuming this data, use the new version.\r\n\r\n## The Format\r\n\r\nBelow are fragments of the files from our most recent .NET Core release.\r\n\r\n### release-index.json\r\n\r\nThis file consists of a top level array with data on the latest release versions and a property for locating the more detailed channel-specific releases.json. This file is found in [dotnet/core/release-notes](https://github.com/dotnet/core/tree/new-json/release-notes/)\r\n\r\n[releases-index.json](https://github.com/dotnet/core/blob/new-json/release-notes/releases-index.json)\r\n\r\n```\r\n{\r\n    \"releases-index\": [\r\n        {\r\n            \"channel-version\": \"2.1\",\r\n            \"latest-release\": \"2.1.5\",\r\n            \"latest-release-date\":\"2018-10-02\",\r\n            \"product\": \".NET Core\",\r\n            \"support-phase\": \"lts\",\r\n            \"eol-date\": \"\",\r\n            \"releases.json\": \"https://github.com/dotnet/core/blob/master/release-notes/2.1/releases.json\",\r\n        },\r\n        ...\r\n}\r\n```\r\n\r\n### releases.json\r\n\r\nThis file provides detailed data for each release. A copy of this file will be found in each versioned directories under [dotnet/core/release-notes](https://github.com/dotnet/core/release-notes). For example [dotnet/core/release-notes/2.1](https://github.com/dotnet/core/tree/new-json/release-notes/2.1)\r\n\r\n\r\n[releases.json](https://github.com/dotnet/core/tree/new-json/release-notes/2.1/releases.json)\r\n\r\n```\r\n{\r\n    \"channel-version\": \"2.1\",\r\n    \"latest-release\": \"2.1.5\",\r\n    \"latest-release-date\":\"2018-10-12\",\r\n    \"support-phase\": \"lts\",\r\n    \"eol-date\": \"\",\r\n    \"lifecycle-policy\": \"https://www.microsoft.com/net/support/policy\",\r\n    \"releases\":\r\n    [\r\n        {\r\n            \"release-date\":  \"2018-10-02\",\r\n            \"release-version\":  \"2.1.5\",\r\n            \"security\":  false,\r\n            \"release-notes\":  \"https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.5/2.1.5.md\",\r\n            \"runtime\":  \r\n            {\r\n                \"version\":  \"2.1.5\",\r\n                \"version-display\":  \"2.1.5\",\r\n                \"vs-version\":  \"15.8.6\",\r\n                \"files\":  \r\n                [\r\n                    {\r\n                        \"name\": \"dotnet-runtime-linux-arm.tar.gz\",\r\n                        \"url\": \"https://download.visualstudio.microsoft.com/download/pr/4d555219-1f04-47c6-90e5-8b3ff8989b9c/0798763e6e4b98a62846116f997d046e/dotnet-runtime-2.1.5-linux-arm.tar.gz\",\r\n                        \"hash\": \"89a77a07065ea24e7198c77a233b9ce5c6cf51b1deb2ef55c88f0adbb2ecd9db1ba4e7d55eec2ef7139c47f91346fed360161a5bb6e3a7ccfc4559bcde286364\"\r\n                    },\r\n                    ...\r\n                ]\r\n            }\r\n            \"sdk\":  \r\n            {\r\n                \"version\":  \"2.1.403\",\r\n                \"version-display\":  \"2.1.403\",\r\n                \"vs-version\":  \"15.8.6\",\r\n                \"csharp-language\":  \"7.3\",\r\n                \"fsharp-language\":  \"4.5\",\r\n                \"files\":  \r\n                [...]\r\n            }\r\n        }\r\n    ]\r\n}\r\n```","Url":"https://github.com/dotnet/announcements/issues/87","RelatedDescription":"Open issue \".NET Core Release Data (releases.json) Redesign and v1 Deprecation Plan\" (#87)"},{"Id":"366416503","IsPullRequest":false,"CreatedAt":"2018-10-03T16:11:18","Actor":"leecow","Number":"86","RawContent":null,"Title":".NET Core 2.0 has reached end of life","State":"open","Body":"[.NET Core 2.0 reached end of life](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/) on October 1, 2018. This means [.NET Core 2.0](https://blogs.msdn.microsoft.com/dotnet/2017/08/14/announcing-net-core-2-0/) is no longer supported and updates will no longer be provided. We recommend moving to [.NET Core 2.1](https://blogs.msdn.microsoft.com/dotnet/2018/05/30/announcing-net-core-2-1/), our long term support (LTS) release.\r\n\r\n- [Download .NET Core 2.1](https://www.microsoft.com/net/download/dotnet-core/2.1)\r\n- [.NET Core 2.1 LTS statement](https://blogs.msdn.microsoft.com/dotnet/2018/08/21/net-core-august-2018-update/)\r\n- [.NET Core 2.0 end-of-life statement](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/)\r\n\r\n## Discussion\r\n\r\nPlease share you thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet/core#1983](https://github.com/dotnet/core/issues/1983)\r\n\r\n## Lifecycle Context\r\n\r\n.NET Core releases belong to one of two [support lifecycles](https://www.microsoft.com/net/platform/support-policy): long term support (LTS) and Current. LTS releases are stable release which receive critical updates and are supported for at least three years. Current releases can include new features that may undergo future change based on feedback. Current releases are supported for three months after the subsequent .NET Core major or minor release. Both LTS and Current releases receive critical fixes throughout their lifecycle, for security, reliability, or to add support for new operating system versions. You must stay up-to-date with the latest patches to qualify for support. \r\n\r\n## .NET Core 2.0 Lifecycle\r\n\r\n[.NET Core 2.0](https://blogs.msdn.microsoft.com/dotnet/2017/08/14/announcing-net-core-2-0/) was released in August 2017 as a Current release. Per the lifecycle policy, Current releases reach end of life 3 months after a subsequent release (Current or LTS). .NET Core 2.1 released May 2018 and began the end of life countdown for .NET Core 2.0. The 3 month maintenance period for .NET Core 2.0 was scheduled to end August 2018 but was [extended to October](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/) to allow time to address an issue some customers were experiencing while migrating to .NET Core 2.1.\r\n\r\n## .NET Core 2.0 Downloads\r\n\r\n.NET Core 2.0 installers, zips and tar.gzs will remain available, but unsupported. This includes existing releases available on Linux package feeds. Previous versions, including 2.0, will be accessible through the [Download Archives](https://www.microsoft.com/net/download/archives). \r\n\r\n## .NET Core 2.0 Docker Images\r\n\r\n.NET Core 2.0 will be removed from the .NET and ASP.NET Docker repo READMEs, however the existing images remain available in those repos.\r\n\r\n* [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/)\r\n* [microsoft/dotnet-nightly](https://hub.docker.com/r/microsoft/dotnet-nightly/)\r\n* [microsoft/aspnetcore](https://hub.docker.com/r/microsoft/aspnetcore/)\r\n* [microsoft/aspnetcore-build](https://hub.docker.com/r/microsoft/aspnetcore-build/)\r\n\r\n## Policy Information\r\n\r\nAdditional lifecycle and support details  and background can be seen in the following:\r\n\r\n* [.NET Core Support Lifecycle](https://www.microsoft.com/net/platform/support-policy)\r\n* [Support and Versioning](https://blogs.msdn.microsoft.com/dotnet/2016/07/26/net-support-and-versioning/)\r\n* [2.0 end of life early announcement](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n","Url":"https://github.com/dotnet/announcements/issues/86","RelatedDescription":"Open issue \".NET Core 2.0 has reached end of life\" (#86)"},{"Id":"361098704","IsPullRequest":false,"CreatedAt":"2018-09-18T01:10:23","Actor":"spshant","Number":"85","RawContent":null,"Title":"NET Framework 4.8 Early Access build 3646 is available!","State":"open","Body":"Today, we are happy to share an Early Access build for the .NET Framework 4.8. This includes an updated .NET 4.8 runtime as well as the .NET 4.8 Developer Pack (a a single package that bundles the .NET Framework 4.8 runtime, the .NET 4.8 Targeting Pack, and the .NET Framework 4.8 SDK). \r\n\r\nPlease help us ensure this is a high quality and compatible release by trying out this build and exploring the new features. \r\n\r\n**Next steps:**\r\nTo explore the new features, download the [.NET 4.8 Developer Pack build 3646](https://go.microsoft.com/fwlink/?LinkId=2018486).  Instead, if you want to try just the .NET 4.8 runtime, you can download either of these:\r\n•\t[.NET 4.8 Web Installer](https://go.microsoft.com/fwlink/?LinkId=2018525) - requires an internet connection during installation \r\n•\t[.NET 4.8 Offline installer](https://go.microsoft.com/fwlink/?LinkId=2018531) - can be downloaded and installed later in a disconnected state\r\n\r\nPlease provide your feedback by [reporting an issue at the .NET Framework Early Access GitHub repository](https://github.com/Microsoft/dotnet-framework-early-access/issues/new).\r\n\r\n**Note**: this release is still under development, you can expect to see more features and fixes in future preview builds. Also, a reminder that this build is not supported for production use.\r\n\r\nThis preview build 3646 includes improvements/fixes in the following areas:\r\n•\t**[Runtime]** JIT and NGEN improvements\r\n•\t**[Windows Forms]** Accessibility enhancements\r\n•\t**[WPF]** SelectionTextBrush Property\r\n•\t**[BCL]** Updated ZLib\r\n\r\nYou can see the complete list of improvements in this build [here](https://github.com/Microsoft/dotnet-framework-early-access/blob/master/release-notes/NET48/build-3646/changes.md).\r\n\r\n.NET Framework build 3646 is also included in the next update for Windows 10. You can sign up for [Windows Insiders](https://insider.windows.com/en-us/) to validate that your applications work great on the latest .NET Framework included in the latest Windows 10 releases.\r\n","Url":"https://github.com/dotnet/announcements/issues/85","RelatedDescription":"Open issue \"NET Framework 4.8 Early Access build 3646 is available!\" (#85)"},{"Id":"359151445","IsPullRequest":false,"CreatedAt":"2018-09-11T17:44:50","Actor":"leecow","Number":"84","RawContent":null,"Title":"September 2018 .NET Updates","State":"open","Body":"# September 2018 .NET Updates\r\n\r\nThe following .NET updates were released in September 2018. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Framework\r\n* [.NET Framework September 2018 Security and Quality Rollup - September 11, 2018](https://blogs.msdn.microsoft.com/dotnet/2018/09/11/net-framework-september-2018-security-and-quality-rollup/)\r\n\r\n## .NET Core\r\n\r\n* [.NET Core September 2018 Update - September 11, 2018](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.4/2.1.4.md)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n\r\n* [August 2018](https://github.com/dotnet/announcements/issues/79)\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)","Url":"https://github.com/dotnet/announcements/issues/84","RelatedDescription":"Open issue \"September 2018 .NET Updates\" (#84)"},{"Id":"359136325","IsPullRequest":false,"CreatedAt":"2018-09-11T17:00:55","Actor":"blowdart","Number":"83","RawContent":null,"Title":"Microsoft Security Advisory CVE-2018-8409: .NET Core Denial Of Service Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-8409: .NET Core Denial Of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a denial of service vulnerability in .NET Core when System.IO.Pipelines improperly handles requests. An attacker who successfully exploited this vulnerability could cause a denial of service against an application that is leveraging System.IO.Pipelines. The vulnerability can be exploited remotely, without authentication. A remote unauthenticated attacker could exploit this vulnerability by providing specially crafted requests to the application.\r\n\r\nThe update addresses the vulnerability by correcting how System.IO.Pipelines handles requests.\r\n\r\nIf you are using ASP.NET Core 2.1 you will also need to update your ASP.NET version this by following the instructions in the [ASP.NET Core bulletin](https://github.com/aspnet/Announcements/issues/316).\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/32228\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nThere are no mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the System.IO.Pipelines package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.IO.Pipelines | 4.5.0 | 4.5.1\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n#### Applications which use System.IO.Pipelines\r\n\r\nSystem.IO.Pipelines is distributed both in ASP.NET Core 2.1 and separately as a NuGet package. If you are not using Microsoft.AspNetCore.App or .All, you may still be affected if you are referencing the System.IO.Pipelines package.\r\n\r\n##### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file. They can be fixed by [editing the project file](#fixing-direct-dependencies) or using NuGet to update the dependency.\r\n\r\n##### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects\r\n\r\nThe `project.assets.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json)).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `System.IO.Pipelines/4.5.0` is a reference to version 4.5.0 of `System.IO.Pipelines`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\n#### <a name=\"fixing-direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.IO.Pipelines\" Version=\"4.5.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.IO.Pipelines` version 4.5.0\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.IO.Pipelines` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.IO.Pipelines\" Version=\"4.5.1\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"transitive-dependencies\"></a>Fixing transitive dependencies\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.IO.Pipelines\" Version=\"4.5.1\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n#### Rebuilding your application\r\n\r\nFinally you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2018-8409](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-CVE-2018-8409)\r\n\r\n### Revisions\r\n\r\nV1.0 (September 11, 2018): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2018-09-11_\r\n","Url":"https://github.com/dotnet/announcements/issues/83","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2018-8409: .NET Core Denial Of Service Vulnerability\" (#83)"},{"Id":"357399856","IsPullRequest":false,"CreatedAt":"2018-09-05T20:56:25","Actor":"richlander","Number":"82","RawContent":null,"Title":".NET Core Runtime ARM64 Status","State":"open","Body":"# .NET Core Runtime ARM64 Status\r\n\r\nThe .NET Core team is in the process of adding support for ARM64, as part of the .NET Core 3.0 project. This issue will be updated as ARM64 support progresses.\r\n\r\n[.NET Core 3.0 Preview 1](https://github.com/dotnet/core/issues/2099) includes support for Linux ARM64. Please try this build and provide support.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet/coreclr #19843](https://github.com/dotnet/coreclr/issues/19843)\r\n\r\n## Current Status\r\n\r\nARM64 builds are functional, for console and ASP.NET Core apps.\r\n\r\n## Details\r\n\r\nInitial support for ARM64 was added in the .NET Core 2.1 release. The team is not maintaining .NET Core 2.x branches with respect to ARM64. All ARM64 improvements will be made in the .NET Core 3.0 branch (currently [master](https://github.com/dotnet/coreclr)).\r\n\r\nSee [Installing .NET Core 3.0 on Linux ARM64](https://gist.github.com/richlander/467813274cea8abc624553ee72b28213) to install .NET Core on your ARM64 machine. Builds are available from the [daily builds page](https://github.com/dotnet/core/blob/master/daily-builds.md).\r\n\r\n## Bug Queries\r\n\r\nthe following bugs queries are available for ARM64:\r\n\r\n* [dotnet/coreclr](https://github.com/dotnet/coreclr/issues?q=is%3Aopen+is%3Aissue+label%3Aarch-arm64)\r\n* [dotnet/corefx](https://github.com/dotnet/corefx/issues?q=is%3Aopen+is%3Aissue+label%3Aarch-arm64)\r\n\r\n## Operating Systems\r\n\r\n.NET Core 3.0 ARM64 builds are tested on the following operating systems:\r\n\r\n* Ubuntu 16.04 and 18.04\r\n* Debian 9\r\n\r\n## Test Hardware\r\n\r\n.NET Core 3.0 ARM64 builds have been tested on the following hardware:\r\n\r\n* [NVIDIA Jetson TX2 Module](https://developer.nvidia.com/embedded/buy/jetson-tx2)\r\n* [Pine A64](https://www.pine64.org/?page_id=46823)\r\n* [Qualcomm Centriq 2400](https://www.qualcomm.com/products/qualcomm-centriq-2400-processor)\r\n* [Qualcomm Snapdragon](https://www.qualcomm.com/snapdragon/always-connected-pc)\r\n* [Raspberry Pi3](https://www.raspberrypi.org/products/raspberry-pi-3-model-b-plus/)","Url":"https://github.com/dotnet/announcements/issues/82","RelatedDescription":"Open issue \".NET Core Runtime ARM64 Status\" (#82)"},{"Id":"349693735","IsPullRequest":false,"CreatedAt":"2018-08-22T18:23:01","Actor":"richlander","Number":"80","RawContent":null,"Title":"Improving Performance of ARM32 Docker Images with .NET Core Package Cache","State":"closed","Body":"# Improving Performance of ARM32 Docker Images with .NET Core Package Cache\r\n\r\n.NET Core SDK distributions include a compressed copy of NuGet packages for .NET Core, ASP.NET Core and EF Core. These packages are decompressed upon installation of the .NET Core SDK. The packages are not currently included in ARM32 distributions due to the time and space cost to decompress the packages. Instead, they will be added to [.NET Core ARM32 Docker images](https://hub.docker.com/r/microsoft/dotnet/), where these costs can be paid as part of image creation.\r\n\r\nThese NuGet packages include content for two purposes:\r\n\r\n- Reference assemblies for .NET Core, for code compilation.\r\n- Pre-compiled assemblies (compiled with [crossgen](https://github.com/dotnet/coreclr/blob/master/Documentation/building/crossgen.md)) for .NET Core, for use in self-contained applications.\r\n\r\nIn both cases, the presence of these packages avoid the need to access remote NuGet feeds for .NET Core assemblies as part of package restore.\r\n\r\nThis change only affects [.NET Core 2.1 SDK ARM32 Docker images](https://hub.docker.com/r/microsoft/dotnet/). This change will be made in August 2018.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet/dotnet-docker #653](https://github.com/dotnet/dotnet-docker/issues/653)\r\n\r\n## .NET Core SDK NugetFallbackFolder\r\n\r\nThe .NET Core SDK includes a compressed copy of all NuGet package, in LZMA format. It exists at the following version-specific location:\r\n\r\n```\r\nroot@3778032bc43d:/# ls -l /usr/share/dotnet/sdk/2.1.302/*.lzma\r\n-rw-r--r-- 1 1004 sudo 35995936 Jul  2 22:51 /usr/share/dotnet/sdk/2.1.302/nuGetPackagesArchive.lzma\r\n```\r\n\r\nThis file is decompressed to the following location: `/usr/share/dotnet/sdk/NuGetFallbackFolder/`\r\n\r\nA package restore for a .NET Core assembly will restore the assembly from the NuGetFallbackFolder location and copy it to the user NuGet cache. At that point, regular NuGet behavior is used.\r\n\r\n## Impact of this change\r\n\r\nThere should be no functional difference in behavior after this change. .NET SDK commands should complete faster and require fewer package restore network requests.\r\n\r\nThe following examples demonstrates the benefit of this change. The improvement can be observed with package restore. Build times (assuming no restore) are not affected.\r\n\r\n### .NET Core 2.1 SDK image after this change\r\n\r\n> The change has already been made in the `microsoft/dotnet-nightly` repo, as you can see in the example below. In August, this same change will be made available in the `microsoft/dotnet` repo.\r\n\r\n```console\r\npi@raspberrypi:~ $ docker run -it --rm microsoft/dotnet-nightly:2.1-sdk\r\nroot@416731f24915:/# time dotnet new mvc -o mvcapp\r\nGetting ready...\r\nThe template \"ASP.NET Core Web App (Model-View-Controller)\" was created successfully.\r\nThis template contains technologies from parties other than Microsoft, see https://aka.ms/aspnetcore-template-3pn-210 for details.\r\n\r\nProcessing post-creation actions...\r\nRunning 'dotnet restore' on mvcapp/mvcapp.csproj...\r\n  Restoring packages for /mvcapp/mvcapp.csproj...\r\n  Generating MSBuild file /mvcapp/obj/mvcapp.csproj.nuget.g.props.\r\n  Generating MSBuild file /mvcapp/obj/mvcapp.csproj.nuget.g.targets.\r\n  Restore completed in 6.68 sec for /mvcapp/mvcapp.csproj.\r\n\r\nRestore succeeded.\r\n\r\n\r\nreal    0m32.496s\r\nuser    0m35.820s\r\nsys     0m4.280s\r\nroot@416731f24915:/# cd mvcapp/\r\nroot@416731f24915:/mvcapp# time dotnet build\r\nMicrosoft (R) Build Engine version 15.8.138-preview+ge0cd4f1c1f for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  Restore completed in 524.78 ms for /mvcapp/mvcapp.csproj.\r\n/usr/share/dotnet/sdk/2.1.401-preview-009081/Sdks/Microsoft.NET.Sdk/targets/Microsoft.NET.RuntimeIdentifierInference.targets(143,5): message NETSDK1057: You are working with a preview version of the .NET Core SDK. You can define the SDK version via a global.json file in the current project. More at https://go.microsoft.com/fwlink/?linkid=869452 [/mvcapp/mvcapp.csproj]\r\n  mvcapp -> /mvcapp/bin/Debug/netcoreapp2.1/mvcapp.dll\r\n  mvcapp -> /mvcapp/bin/Debug/netcoreapp2.1/mvcapp.Views.dll\r\n\r\nBuild succeeded.\r\n    0 Warning(s)\r\n    0 Error(s)\r\n\r\nTime Elapsed 00:02:09.15\r\n\r\nreal    2m13.377s\r\nuser    1m25.260s\r\nsys     0m9.420s\r\nroot@416731f24915:/mvcapp#\r\n```\r\n\r\n### .NET Core 2.1 SDK image before this change\r\n\r\n```console\r\npi@raspberrypi:~ $ docker run -it --rm microsoft/dotnet:2.1-sdk\r\nroot@9d1d5e45df6a:/# time dotnet new mvc -o mvcapp\r\nGetting ready...\r\nThe template \"ASP.NET Core Web App (Model-View-Controller)\" was created successfully.\r\nThis template contains technologies from parties other than Microsoft, see https://aka.ms/aspnetcore-template-3pn-210 for details.\r\n\r\nProcessing post-creation actions...\r\nRunning 'dotnet restore' on mvcapp/mvcapp.csproj...\r\n  Restoring packages for /mvcapp/mvcapp.csproj...\r\n  Installing System.Xml.XmlSerializer 4.3.0.\r\n  Installing System.Threading.Tasks.Extensions 4.0.0.\r\n  Installing System.Globalization.Extensions 4.0.1.\r\n  Installing runtime.native.System.Security.Cryptography 4.0.0.\r\n  Installing System.Security.Cryptography.OpenSsl 4.0.0.\r\n  Installing System.Security.Cryptography.Cng 4.2.0.\r\n  Installing System.Security.Cryptography.Csp 4.0.0.\r\n  Installing runtime.native.System.Net.Http 4.0.1.\r\n  Installing runtime.native.System 4.0.0.\r\n  Installing runtime.native.System.IO.Compression 4.1.0.\r\n  Installing System.Buffers 4.0.0.\r\n  Installing System.Private.DataContractSerialization 4.3.0.\r\n  Installing System.Security.Principal 4.3.0.\r\n  Installing runtime.osx.10.10-x64.runtime.native.System.Security.Cryptography.Apple 4.3.0.\r\n  Installing runtime.rhel.7-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing runtime.ubuntu.14.04-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing runtime.opensuse.42.1-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.NETCore.App 2.1.0.\r\n  Installing runtime.ubuntu.16.10-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.AspNetCore.App 2.1.1.\r\n  Installing runtime.ubuntu.16.04-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.NETCore.Platforms 2.1.0.\r\n  Installing Microsoft.NETCore.Targets 2.1.0.\r\n  Installing NETStandard.Library 2.0.3.\r\n  Installing Microsoft.NETCore.DotNetHostPolicy 2.1.0.\r\n  Installing Microsoft.AspNetCore 2.1.1.\r\n  Installing Microsoft.AspNetCore.Antiforgery 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Localization 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Session 2.1.1.\r\n  Installing Microsoft.AspNetCore.SpaServices 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.KeyPerFile 2.1.1.\r\n  Installing Microsoft.Extensions.FileProviders.Abstractions 2.1.1.\r\n  Installing Microsoft.Extensions.Hosting 2.1.1.\r\n  Installing Microsoft.Extensions.FileProviders.Embedded 2.1.1.\r\n  Installing Microsoft.Extensions.FileProviders.Physical 2.1.1.\r\n  Installing Microsoft.Extensions.Localization 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.Cookies 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.Core 2.1.1.\r\n  Installing runtime.osx.10.10-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.AspNetCore.Authentication.Google 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.Facebook 2.1.1.\r\n  Installing Microsoft.Extensions.Hosting.Abstractions 2.1.1.\r\n  Installing runtime.opensuse.13.2-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.AspNetCore.HttpsPolicy 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.MicrosoftAccount 2.1.1.\r\n  Installing Microsoft.Extensions.Http 2.1.1.\r\n  Installing Microsoft.AspNetCore.MiddlewareAnalysis 2.1.1.\r\n  Installing Microsoft.Extensions.FileSystemGlobbing 2.1.1.\r\n  Installing Microsoft.Extensions.DiagnosticAdapter 2.1.0.\r\n  Installing Microsoft.Extensions.Identity.Core 2.1.1.\r\n  Installing Microsoft.Extensions.Identity.Stores 2.1.1.\r\n  Installing Microsoft.Extensions.Options.ConfigurationExtensions 2.1.1.\r\n  Installing Microsoft.Extensions.Localization.Abstractions 2.1.1.\r\n  Installing Microsoft.Extensions.Logging.Abstractions 2.1.1.\r\n  Installing runtime.fedora.24-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.Extensions.Options 2.1.1.\r\n  Installing Microsoft.Extensions.FileProviders.Composite 2.1.1.\r\n  Installing Microsoft.Extensions.Logging 2.1.1.\r\n  Installing Microsoft.Extensions.Logging.Configuration 2.1.1.\r\n  Installing Microsoft.Extensions.Logging.TraceSource 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.UserSecrets 2.1.1.\r\n  Installing Microsoft.Extensions.Logging.Debug 2.1.1.\r\n  Installing Microsoft.Extensions.Logging.Console 2.1.1.\r\n  Installing Microsoft.Extensions.DependencyInjection 2.1.1.\r\n  Installing Microsoft.Extensions.ObjectPool 2.1.1.\r\n  Installing runtime.debian.8-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.Extensions.DependencyInjection.Abstractions 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.Binder 2.1.1.\r\n  Installing runtime.fedora.23-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.Extensions.Configuration.EnvironmentVariables 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.FileExtensions 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.Abstractions 2.1.1.\r\n  Installing Microsoft.Extensions.Caching.Memory 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.CommandLine 2.1.1.\r\n  Installing Microsoft.Extensions.Caching.Abstractions 2.1.1.\r\n  Installing Microsoft.Net.Http.Headers 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.InMemory 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.Abstractions 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.Ini 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.Analyzers 2.1.1.\r\n  Installing Microsoft.AspNetCore.StaticFiles 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.Relational 2.1.1.\r\n  Installing Microsoft.AspNetCore.Server.Kestrel.Https 2.1.1.\r\n  Installing Microsoft.Extensions.Primitives 2.1.1.\r\n  Installing Microsoft.AspNetCore.SpaServices.Extensions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Server.Kestrel 2.1.1.\r\n  Installing Microsoft.Extensions.WebEncoders 2.1.1.\r\n  Installing Microsoft.AspNetCore.WebUtilities 2.1.1.\r\n  Installing Microsoft.AspNetCore.SignalR 1.0.1.\r\n  Installing Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets 2.1.1.\r\n  Installing Microsoft.AspNetCore.Routing 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.Tools 2.1.1.\r\n  Installing Microsoft.AspNetCore.Routing.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Rewrite 2.1.1.\r\n  Installing Microsoft.AspNetCore.ResponseCaching.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Server.Kestrel.Transport.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.ResponseCaching 2.1.1.\r\n  Installing Microsoft.AspNetCore.ResponseCompression 2.1.1.\r\n  Installing System.Globalization.Extensions 4.3.0.\r\n  Installing Microsoft.AspNetCore.Razor.Language 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.TagHelpers 2.1.1.\r\n  Installing Microsoft.AspNetCore.Razor.Runtime 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.RazorPages 2.1.1.\r\n  Installing Microsoft.AspNetCore.Owin 2.1.1.\r\n  Installing Microsoft.AspNetCore.Razor 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Razor.Extensions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Razor.ViewCompilation 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Analyzers 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Localization 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Formatters.Json 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.Design 2.1.1.\r\n  Installing Microsoft.AspNetCore.WebSockets 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Cors 2.1.1.\r\n  Installing System.Diagnostics.DiagnosticSource 4.3.0.\r\n  Installing Microsoft.AspNetCore.Mvc.DataAnnotations 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.ApiExplorer 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Formatters.Xml 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc 2.1.1.\r\n  Installing Microsoft.Extensions.Logging.EventSource 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.OAuth 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.Json 2.1.1.\r\n  Installing Microsoft.AspNetCore.SignalR.Protocols.Json 1.0.1.\r\n  Installing Microsoft.AspNetCore.NodeServices 2.1.1.\r\n  Installing Microsoft.AspNetCore.SignalR.Common 1.0.1.\r\n  Installing Microsoft.AspNetCore.JsonPatch 2.1.1.\r\n  Installing Microsoft.AspNetCore.Localization.Routing 2.1.1.\r\n  Installing Microsoft.AspNetCore.Server.IISIntegration 2.1.1.\r\n  Installing Microsoft.AspNetCore.Identity.UI 2.1.1.\r\n  Installing Microsoft.AspNetCore.Razor.Design 2.1.1.\r\n  Installing Microsoft.AspNetCore.Identity.EntityFrameworkCore 2.1.1.\r\n  Installing Microsoft.AspNetCore.Http.Extensions 2.1.1.\r\n  Installing Microsoft.AspNetCore.HttpOverrides 2.1.1.\r\n  Installing Microsoft.AspNetCore.Identity 2.1.1.\r\n  Installing Microsoft.AspNetCore.Http.Features 2.1.1.\r\n  Installing Microsoft.AspNetCore.Http.Connections 1.0.1.\r\n  Installing Microsoft.AspNetCore.Http.Connections.Common 1.0.1.\r\n  Installing Microsoft.AspNetCore.Http 2.1.1.\r\n  Installing Microsoft.AspNetCore.Diagnostics.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Cors 2.1.1.\r\n  Installing Microsoft.AspNetCore.Hosting.Server.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Http.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.DataProtection.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Hosting.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Diagnostics.EntityFrameworkCore 2.1.1.\r\n  Installing Microsoft.AspNetCore.Cryptography.Internal 2.1.1.\r\n  Installing Microsoft.AspNetCore.Cryptography.KeyDerivation 2.1.1.\r\n  Installing Microsoft.AspNetCore.DataProtection.Extensions 2.1.1.\r\n  Installing Microsoft.AspNetCore.HostFiltering 2.1.1.\r\n  Installing Microsoft.CSharp 4.0.1.\r\n  Installing Microsoft.AspNetCore.CookiePolicy 2.1.1.\r\n  Installing Microsoft.AspNetCore.Server.Kestrel.Core 2.1.1.\r\n  Installing Microsoft.AspNetCore.Html.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.Twitter 2.1.1.\r\n  Installing Microsoft.AspNetCore.Connections.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authorization.Policy 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authorization 2.1.1.\r\n  Installing Microsoft.AspNetCore.Diagnostics 2.1.1.\r\n  Installing Microsoft.AspNetCore.Server.HttpSys 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.Xml 2.1.1.\r\n  Installing Microsoft.AspNetCore.Hosting 2.1.1.\r\n  Installing Microsoft.AspNetCore.DataProtection 2.1.1.\r\n  Installing Microsoft.Extensions.Caching.SqlServer 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.SqlServer 2.1.1.\r\n  Installing Microsoft.AspNet.WebApi.Client 5.2.6.\r\n  Installing Microsoft.AspNetCore.SignalR.Core 1.0.1.\r\n  Installing Microsoft.AspNetCore.Mvc.ViewFeatures 2.1.1.\r\n  Installing Microsoft.CodeAnalysis.Razor 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.JwtBearer 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.OpenIdConnect 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Razor 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.WsFederation 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore 2.1.1.\r\n  Installing System.Runtime.Serialization.Primitives 4.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Core 2.1.1.\r\n  Installing System.Xml.ReaderWriter 4.0.11.\r\n  Installing Microsoft.NETCore.DotNetHostResolver 2.1.0.\r\n  Installing System.Diagnostics.DiagnosticSource 4.5.0.\r\n  Installing System.ComponentModel.Annotations 4.5.0.\r\n  Installing System.Buffers 4.5.0.\r\n  Installing System.Memory 4.5.1.\r\n  Installing System.Runtime.CompilerServices.Unsafe 4.5.1.\r\n  Installing System.Text.Encodings.Web 4.5.0.\r\n  Installing Microsoft.CSharp 4.5.0.\r\n  Installing System.Net.WebSockets.WebSocketProtocol 4.5.1.\r\n  Installing Newtonsoft.Json 11.0.2.\r\n  Installing System.IO.Pipelines 4.5.0.\r\n  Installing System.Numerics.Vectors 4.5.0.\r\n  Installing System.Security.Principal.Windows 4.5.0.\r\n  Installing System.Threading.Tasks.Extensions 4.5.1.\r\n  Installing System.Security.Cryptography.Cng 4.5.0.\r\n  Installing System.Net.Http 4.1.0.\r\n  Installing System.Security.Cryptography.Xml 4.5.0.\r\n  Installing Microsoft.Win32.Registry 4.5.0.\r\n  Installing System.Reflection.Metadata 1.6.0.\r\n  Installing System.Data.SqlClient 4.5.1.\r\n  Installing Newtonsoft.Json.Bson 1.0.1.\r\n  Installing Newtonsoft.Json 10.0.1.\r\n  Installing System.Threading.Channels 4.5.0.\r\n  Installing System.Reflection.Emit 4.3.0.\r\n  Installing Microsoft.CodeAnalysis.CSharp 2.8.0.\r\n  Installing Microsoft.CodeAnalysis.Common 2.8.0.\r\n  Installing System.Security.Cryptography.Algorithms 4.2.0.\r\n  Installing Microsoft.IdentityModel.Protocols.OpenIdConnect 5.2.0.\r\n  Installing System.IdentityModel.Tokens.Jwt 5.2.0.\r\n  Installing Microsoft.IdentityModel.Protocols.WsFederation 5.2.0.\r\n  Installing System.Collections.Immutable 1.5.0.\r\n  Installing Remotion.Linq 2.2.0.\r\n  Installing System.Interactive.Async 3.1.1.\r\n  Installing Microsoft.Extensions.DependencyModel 2.1.0.\r\n  Installing Microsoft.NETCore.DotNetAppHost 2.1.0.\r\n  Installing Microsoft.NETCore.Platforms 2.0.0.\r\n  Installing System.Security.Cryptography.Pkcs 4.5.0.\r\n  Installing System.Security.Permissions 4.5.0.\r\n  Installing System.Security.AccessControl 4.5.0.\r\n  Installing NETStandard.Library 1.6.1.\r\n  Installing System.Text.Encoding.CodePages 4.5.0.\r\n  Installing System.Linq 4.3.0.\r\n  Installing runtime.native.System.Data.SqlClient.sni 4.4.0.\r\n  Installing System.Diagnostics.Debug 4.3.0.\r\n  Installing System.Globalization 4.3.0.\r\n  Installing System.IO 4.3.0.\r\n  Installing System.Collections 4.3.0.\r\n  Installing System.Runtime.Serialization.Primitives 4.3.0.\r\n  Installing System.Runtime.Serialization.Formatters 4.3.0.\r\n  Installing System.Xml.XmlDocument 4.3.0.\r\n  Installing System.Threading 4.3.0.\r\n  Installing System.Resources.ResourceManager 4.3.0.\r\n  Installing System.Text.Encoding.Extensions 4.3.0.\r\n  Installing System.Xml.XDocument 4.3.0.\r\n  Installing System.Threading.Tasks 4.3.0.\r\n  Installing System.Linq.Expressions 4.3.0.\r\n  Installing System.Runtime.Numerics 4.3.0.\r\n  Installing System.Text.Encoding 4.3.0.\r\n  Installing System.Reflection.Extensions 4.3.0.\r\n  Installing System.Text.RegularExpressions 4.3.0.\r\n  Installing System.Runtime.Extensions 4.3.0.\r\n  Installing System.Reflection 4.3.0.\r\n  Installing System.ObjectModel 4.3.0.\r\n  Installing System.Dynamic.Runtime 4.3.0.\r\n  Installing System.Xml.ReaderWriter 4.3.0.\r\n  Installing Microsoft.CSharp 4.3.0.\r\n  Installing System.ComponentModel.TypeConverter 4.3.0.\r\n  Installing System.Runtime 4.3.0.\r\n  Installing System.Reflection.Emit.ILGeneration 4.3.0.\r\n  Installing System.Reflection.Primitives 4.3.0.\r\n  Installing System.AppContext 4.3.0.\r\n  Installing System.Console 4.3.0.\r\n  Installing System.Collections.Concurrent 4.3.0.\r\n  Installing System.Diagnostics.Tools 4.3.0.\r\n  Installing System.Security.Cryptography.Encoding 4.0.0.\r\n  Installing System.IO.Compression 4.3.0.\r\n  Installing System.IO.FileSystem 4.3.0.\r\n  Installing System.IO.FileSystem.Primitives 4.3.0.\r\n  Installing System.Security.Cryptography.Encoding 4.3.0.\r\n  Installing System.Collections.Immutable 1.3.1.\r\n  Installing System.Runtime.InteropServices 4.3.0.\r\n  Installing System.Security.Cryptography.X509Certificates 4.1.0.\r\n  Installing System.Diagnostics.StackTrace 4.3.0.\r\n  Installing System.Reflection.Metadata 1.4.2.\r\n  Installing System.Threading.Thread 4.3.0.\r\n  Installing Microsoft.CodeAnalysis.Analyzers 1.1.0.\r\n  Installing System.Security.Cryptography.X509Certificates 4.3.0.\r\n  Installing System.ValueTuple 4.3.0.\r\n  Installing System.Diagnostics.FileVersionInfo 4.3.0.\r\n  Installing System.Threading.Tasks.Parallel 4.3.0.\r\n  Installing System.Security.Cryptography.Algorithms 4.3.0.\r\n  Installing System.Xml.XPath.XDocument 4.3.0.\r\n  Installing System.Text.Encoding.CodePages 4.3.0.\r\n  Installing System.Runtime.InteropServices 4.1.0.\r\n  Installing Microsoft.IdentityModel.Protocols 5.2.0.\r\n  Installing Microsoft.IdentityModel.Tokens 5.2.0.\r\n  Installing Microsoft.IdentityModel.Xml 5.2.0.\r\n  Installing System.Diagnostics.Debug 4.0.11.\r\n  Installing System.Reflection.Extensions 4.0.1.\r\n  Installing Microsoft.IdentityModel.Tokens.Saml 5.2.0.\r\n  Installing System.Runtime.Extensions 4.1.0.\r\n  Installing System.Threading 4.0.11.\r\n  Installing System.Collections 4.0.11.\r\n  Installing System.Reflection 4.1.0.\r\n  Installing System.ObjectModel 4.0.12.\r\n  Installing System.Linq 4.1.0.\r\n  Installing System.Linq.Queryable 4.0.1.\r\n  Installing System.Linq.Expressions 4.1.0.\r\n  Installing System.Runtime 4.1.0.\r\n  Installing NETStandard.Library 1.6.0.\r\n  Installing System.Dynamic.Runtime 4.0.11.\r\n  Installing Newtonsoft.Json 9.0.1.\r\n  Installing Microsoft.DotNet.PlatformAbstractions 2.1.0.\r\n  Installing System.Runtime.CompilerServices.Unsafe 4.5.0.\r\n  Installing runtime.win-x64.runtime.native.System.Data.SqlClient.sni 4.4.0.\r\n  Installing runtime.win-x86.runtime.native.System.Data.SqlClient.sni 4.4.0.\r\n  Installing runtime.win-arm64.runtime.native.System.Data.SqlClient.sni 4.4.0.\r\n  Installing Microsoft.NETCore.Platforms 1.1.0.\r\n  Installing Microsoft.Win32.Primitives 4.3.0.\r\n  Installing System.Net.Sockets 4.3.0.\r\n  Installing System.Diagnostics.Tracing 4.3.0.\r\n  Installing System.IO.Compression.ZipFile 4.3.0.\r\n  Installing System.Globalization.Calendars 4.3.0.\r\n  Installing System.Threading.Timer 4.3.0.\r\n  Installing System.Security.Cryptography.Primitives 4.3.0.\r\n  Installing System.Runtime.InteropServices.RuntimeInformation 4.0.0.\r\n  Installing System.Runtime.Handles 4.3.0.\r\n  Installing System.Runtime.InteropServices.RuntimeInformation 4.3.0.\r\n  Installing System.Net.Http 4.3.0.\r\n  Installing Microsoft.NETCore.Targets 1.1.0.\r\n  Installing System.Net.Primitives 4.3.0.\r\n  Installing System.Reflection.Emit.Lightweight 4.3.0.\r\n  Installing System.Reflection.TypeExtensions 4.3.0.\r\n  Installing System.Threading.Tasks.Extensions 4.3.0.\r\n  Installing System.ComponentModel 4.3.0.\r\n  Installing System.ComponentModel.Primitives 4.3.0.\r\n  Installing System.Collections.NonGeneric 4.3.0.\r\n  Installing System.Collections.Specialized 4.3.0.\r\n  Installing runtime.native.System 4.3.0.\r\n  Installing runtime.native.System.IO.Compression 4.3.0.\r\n  Installing System.Buffers 4.3.0.\r\n  Installing runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing runtime.native.System.Net.Http 4.3.0.\r\n  Installing System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing System.Security.Cryptography.Cng 4.3.0.\r\n  Installing System.Security.Cryptography.Csp 4.3.0.\r\n  Installing runtime.native.System.Security.Cryptography.Apple 4.3.0.\r\n  Installing System.Xml.XPath 4.3.0.\r\n  Installing Microsoft.IdentityModel.Logging 5.2.0.\r\n  Installing System.Diagnostics.Contracts 4.3.0.\r\n  Installing System.Runtime.Serialization.Xml 4.3.0.\r\n  Installing Microsoft.NETCore.Platforms 1.0.1.\r\n  Installing Microsoft.NETCore.Targets 1.0.1.\r\n  Installing System.Security.Claims 4.3.0.\r\n  Installing System.Reflection.Primitives 4.0.1.\r\n  Installing System.IO 4.1.0.\r\n  Installing System.Globalization 4.0.11.\r\n  Installing System.Threading.Tasks 4.0.11.\r\n  Installing System.Resources.ResourceManager 4.0.1.\r\n  Installing System.Reflection.Emit 4.0.1.\r\n  Installing System.Reflection.TypeExtensions 4.1.0.\r\n  Installing System.Reflection.Emit.ILGeneration 4.0.1.\r\n  Installing System.Reflection.Emit.Lightweight 4.0.1.\r\n  Installing System.AppContext 4.1.0.\r\n  Installing System.Collections.Concurrent 4.0.12.\r\n  Installing System.IO.FileSystem.Primitives 4.0.1.\r\n  Installing System.Runtime.Numerics 4.0.1.\r\n  Installing System.Security.Cryptography.Primitives 4.0.0.\r\n  Installing System.Xml.XDocument 4.0.11.\r\n  Installing System.Text.RegularExpressions 4.1.0.\r\n  Installing Microsoft.Win32.Primitives 4.0.1.\r\n  Installing System.Console 4.0.0.\r\n  Installing System.Diagnostics.Tools 4.0.1.\r\n  Installing System.Diagnostics.Tracing 4.1.0.\r\n  Installing System.Globalization.Calendars 4.0.1.\r\n  Installing System.IO.FileSystem 4.0.1.\r\n  Installing System.Net.Sockets 4.1.0.\r\n  Installing System.Text.Encoding 4.0.11.\r\n  Installing System.Threading.Timer 4.0.1.\r\n  Installing System.Net.Primitives 4.0.11.\r\n  Installing System.Runtime.Handles 4.0.1.\r\n  Installing System.Text.Encoding.Extensions 4.0.11.\r\n  Installing System.IO.Compression.ZipFile 4.0.1.\r\n  Installing System.IO.Compression 4.1.0.\r\n  Generating MSBuild file /mvcapp/obj/mvcapp.csproj.nuget.g.props.\r\n  Generating MSBuild file /mvcapp/obj/mvcapp.csproj.nuget.g.targets.\r\n  Restore completed in 44.04 sec for /mvcapp/mvcapp.csproj.\r\n\r\nRestore succeeded.\r\n\r\n\r\nreal    1m8.386s\r\nuser    1m8.010s\r\nsys     0m18.190s\r\nroot@9d1d5e45df6a:/# cd mvcapp/\r\nroot@9d1d5e45df6a:/mvcapp# time dotnet build\r\nMicrosoft (R) Build Engine version 15.7.179.6572 for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  Restore completed in 557.76 ms for /mvcapp/mvcapp.csproj.\r\n  mvcapp -> /mvcapp/bin/Debug/netcoreapp2.1/mvcapp.dll\r\n  mvcapp -> /mvcapp/bin/Debug/netcoreapp2.1/mvcapp.Views.dll\r\n\r\nBuild succeeded.\r\n    0 Warning(s)\r\n    0 Error(s)\r\n\r\nTime Elapsed 00:02:07.34\r\n\r\nreal    2m11.716s\r\nuser    1m22.990s\r\nsys     0m8.880s\r\nroot@9d1d5e45df6a:/mvcapp#\r\n```\r\n","Url":"https://github.com/dotnet/announcements/issues/80","RelatedDescription":"Closed issue \"Improving Performance of ARM32 Docker Images with .NET Core Package Cache\" (#80)"},{"Id":"350233220","IsPullRequest":false,"CreatedAt":"2018-08-13T23:50:57","Actor":"richlander","Number":"81","RawContent":null,"Title":"Advisory serializing/deserializing a CultureAwareComparer with .NET Framework 4.6+","State":"open","Body":"# Advisory serializing/deserializing a CultureAwareComparer with .NET Framework 4.6+\r\n\r\nAn [issue with serializing/deserializing a CultureAwareComparer](https://github.com/Microsoft/dotnet/blob/master/releases/net471/KnownIssues/521954%20-%20BCL%20CultureAwareComparer%20with%20ignore%20casing%20on%20serialized%20on%20previous%20versions%20of%20.NET%20do%20not%20correctly%20deserialize%20on%20.NET%204.7.1.md) was discovered with [.NET Framework 4.7.1](https://blogs.msdn.microsoft.com/dotnet/2017/10/17/announcing-the-net-framework-4-7-1/). This issue was resolved earlier this year, with the [May 2018 Preview of Quality Rollup](https://blogs.msdn.microsoft.com/dotnet/2018/05/15/net-framework-may-2018-preview-of-quality-rollup/). We recently learned that some applications, including Johnson Controls’ C-CURE 9000 Software, were negatively impacted by this change as this update requires all client and server workstations to be updated simultaneously with the appropriate Microsoft updates. The changes made to .NET Framework 4.7.1 were also integrated into .NET Framework 4.6 and later servicing releases. As a result, this advisory applies to .NET Framework 4.6 and later versions.\r\n\r\nThis advisory is provided so that developers can correctly diagnose this issue and be aware of our guidance. We will continue to update this issue as we have new information to share.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [microsoft/dotnet #832](https://github.com/Microsoft/dotnet/issues/832)\r\n\r\n## Guidance\r\n\r\nThis guidance only applies to customers that have experienced this issue.\r\n\r\nWe have released [an update for .NET Framework 4.6](https://blogs.msdn.microsoft.com/dotnet/2018/08/30/net-framework-august-2018-preview-of-quality-rollup/) and later that resolves the issue. **You must deploy the .NET Framework update for this issue to all .NET Framework 4.6+ machines that communicate via serialized objects**. After doing that, cross-machine serialization will work as expected. \r\n \r\nPlease consult your software vendor to understand if this impacts the software you are using.\r\n\r\n## Technical Context\r\n\r\nIn the [May 2018 Preview of Quality Rollup](https://blogs.msdn.microsoft.com/dotnet/2018/05/15/net-framework-may-2018-preview-of-quality-rollup/), we made a change to the internal type CultureAwareComparer to implement ISerializable. We made the change in order to address [issue with serializing/deserializing a CultureAwareComparer](https://github.com/Microsoft/dotnet/blob/master/releases/net471/KnownIssues/521954%20-%20BCL%20CultureAwareComparer%20with%20ignore%20casing%20on%20serialized%20on%20previous%20versions%20of%20.NET%20do%20not%20correctly%20deserialize%20on%20.NET%204.7.1.md).\r\n\r\nThe issue reported was that a type that contains an instance of CultureAwareComparer was not able to correctly serialize and deserialize across different versions of the .NET Framework. There are a few types in .NET Framework that do this, the most commonly impacted one being the Dictionary<TKey, TValue> type.\r\n \r\nThe change to implement the ISerializable interface had unintended side effects when exchanging this type across different machines. We have had a small number of reports from customers who have been affected.\r\n\r\nA common, but not unique way, of exchanging objects across machines is to use WCF in conjunction with a serializer. One of the common serializers being DataContractSerializer. The side-effect of the change prevented data serialized on systems where the type implements ISerializable to correctly deserialize of systems where the type does NOT implement ISerializable. The same is true of the opposite case, that systems where the type does not implement ISerializable will not correctly deserialize data from systems where the type does implement ISerializable.\r\n\r\nWe have an updated fix that we intend to release within the next month that will remove the implementation of the ISerializable interface on the type and use a different internal mechanism for ensuring the cross-version serialization continues to work as expected. This change addresses the break experienced with WCF.\r\n\r\nThe upcoming fix will remove the implementation of the ISerializable interface on the type and use a different mechanism for ensuring the cross-version serialization of that type continues to work. This change addresses the break experienced with WCF.\r\n\r\n## Symptoms\r\n\r\nAn application that is affected by this issue will most likely crash when trying to deserialize an object. It may print or log an error message similar to the following one:\r\n\r\n```\r\nThe formatter threw an exception while trying to deserialize the message: \r\nThere was an error while trying to deserialize parameter . The InnerException message was ''EndElement' 'Comparer' from namespace '' is not expected. Expecting element '_compareInfo'.'.  Please see InnerException for more details.\r\n```\r\n","Url":"https://github.com/dotnet/announcements/issues/81","RelatedDescription":"Open issue \"Advisory serializing/deserializing a CultureAwareComparer with .NET Framework 4.6+\" (#81)"},{"Id":"348162872","IsPullRequest":false,"CreatedAt":"2018-08-07T04:26:40","Actor":"richlander","Number":"79","RawContent":null,"Title":"August 2018 .NET Updates","State":"open","Body":"# August 2018 .NET Updates\r\n\r\nThe following .NET updates were released in August 2018. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Framework \r\n\r\n* [August 2018 .NET Framework Security and Quality Rollup - August 14, 2018](https://blogs.msdn.microsoft.com/dotnet/2018/08/14/august-2018-security-and-quality-rollup/)\r\n* [Advisory serializing/deserializing a CultureAwareComparer with .NET Framework 4.6+](https://github.com/dotnet/announcements/issues/81)\r\n* [Advisory on July 2018 .NET Framework Updates](https://blogs.msdn.microsoft.com/dotnet/2018/07/20/advisory-on-july-2018-net-framework-updates/)\r\n* [August 2018 Preview of Quality Rollup - August 30, 2018](https://blogs.msdn.microsoft.com/dotnet/2018/08/30/net-framework-august-2018-preview-of-quality-rollup/)\r\n\r\n## .NET Core\r\n\r\n* [.NET Core August 2018 Update - August 21, 2018](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.3/2.1.3.md)\r\n* [.NET Core 2.1.400 SDK Update - August 14, 2018](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.400-SDK/2.1.400-sdk.md)\r\n\r\n## End of Support for Operating System Versions\r\n\r\n.NET Core does not support systems that are out of support. The following operating systems are now out of support. To stay supported, move to a [later version of the given operating system](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md).\r\n\r\n* [Debian 8 -- Jessie](https://lists.debian.org/debian-security-announce/2018/msg00132.html)\r\n* [Ubuntu 17.10 -- Artful Aardvark](https://lists.ubuntu.com/archives/ubuntu-announce/2018-July/000232.html)\r\n\r\nSee [Debian Jessie End of Life -- Impact on .NET Core Docker Images](https://github.com/dotnet/announcements/issues/78)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)","Url":"https://github.com/dotnet/announcements/issues/79","RelatedDescription":"Open issue \"August 2018 .NET Updates\" (#79)"},{"Id":"348161534","IsPullRequest":false,"CreatedAt":"2018-08-07T04:18:01","Actor":"richlander","Number":"78","RawContent":null,"Title":"Debian Jessie End of Life -- Impact on .NET Core Docker Images","State":"open","Body":"# Debian Jessie End of Life -- Impact on .NET Core Docker Images\r\n\r\nDebian Jessie (AKA Debian 8) is now [out of support](https://lists.debian.org/debian-security-announce/2018/msg00132.html). Debian Jessie is no longer a supported operating system for .NET Core. Docker users need to switch to Debian Stretch-based (AKA Debian 9) images to stay in support.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet/dotnet-docker #647](https://github.com/dotnet/dotnet-docker/issues/647)\r\n\r\n## Context\r\n\r\nJessie-based images are currently provided for .NET Core 1.0, 1.1 and 2.0. .NET Core 1.0 and 1.1 expose multi-arch tags, such as `1.0-runtime` and `1.1-sdk`, that support Debian Jessie. When pulled for a Linux Docker daemon (on Linux or Windows), these tags pull Jessie-based images. .NET Core 2.0 supports Jessie, but it is not the default. .NET Core 2.0 multi-arch tags, such as `2.0-runtime` and `2.0-sdk`, pull Debian Stretch-based images, when pulled for a Linux Docker daemon. We made a conscious decision with .NET Core 2.0 to move off of Jessie as the default to avoid this problem, based the Jessie 2018 EOL date. .NET Core 2.1 does not support Jessie, only Stretch.\r\n\r\nWe recently posted about our policy for underlying operating system dependencies with Docker:\r\n\r\n> For each major and minor .NET version, we may take a new major operating system version dependency. As I mentioned earlier, we adopted Debian 9 as the base image for .NET Core 2.0. We stayed with Debian 9 for .NET Core 2.1, since Debian 10 (AKA “Buster”) has not been released. Debian 9 will remain the default base image for .NET Core 2.1 for the life of .NET Core 2.1. **Once we adopt an underlying operating system major version, we will not change it for the life of that given .NET release.**\r\n\r\nSource: https://blogs.msdn.microsoft.com/dotnet/2018/06/18/staying-up-to-date-with-net-container-images/\r\n\r\n## Plan\r\n\r\nWe will continue to re-build .NET Core 1.0 and 1.1 multi-arch tags on top of Jessie for the remaining [supported lifetime of .NET Core 1.0 and 1.1](https://github.com/dotnet/core/blob/master/microsoft-support.md). We will also provide a Stretch-based image for .NET Core 1.1. This tag will look like the following: `1.1-runtime-stretch` or `1.1.9-sdk-stretch`. This is same format that Jessie has used.\r\n\r\nWe will produce Jessie-based images for NET Core 2.0 until October 2018, which is when [.NET Core 2.0 support ends](https://github.com/dotnet/core/blob/master/microsoft-support.md). .NET Core 2.0 multi-arch tags support Debian Stretch, not Jessie, as described above.\r\n\r\nIn summary, .NET Core is no longer supported on Debian Jessie, with Docker or otherwise. We will produce Docker images for Jessie until .NET Core 1.0, 1.1 and 2.0 support ends, respectively, to avoid breaking applications. This aligns with the policy defined above, per [Staying up-to-date with .NET Container Images](https://blogs.msdn.microsoft.com/dotnet/2018/06/18/staying-up-to-date-with-net-container-images/).\r\n\r\n## Affected Repos\r\n\r\n* [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/)\r\n* [microsoft/dotnet-nightly](https://hub.docker.com/r/microsoft/dotnet-nightly/)\r\n* [microsoft/aspnetcore](https://hub.docker.com/r/microsoft/aspnetcore/)\r\n* [microsoft/aspnetcore-build](https://hub.docker.com/r/microsoft/aspnetcore-build/)","Url":"https://github.com/dotnet/announcements/issues/78","RelatedDescription":"Open issue \"Debian Jessie End of Life -- Impact on .NET Core Docker Images\" (#78)"},{"Id":"345028102","IsPullRequest":false,"CreatedAt":"2018-07-26T22:31:32","Actor":"leecow","Number":"77","RawContent":null,"Title":"https://dot.net now using TLS 1.2-only","State":"open","Body":"Earlier today, https://dot.net switched to using TLS 1.2-only. Most Windows Powershell instances default to TLS 1.1 and will thus fail with `wget : The underlying connection was closed: An unexpected error occurred on a send. trying to run the previous command.`\r\n\r\nAn example of a PowerShell script fix can be seen in https://github.com/dotnet/docs/pull/6689","Url":"https://github.com/dotnet/announcements/issues/77","RelatedDescription":"Open issue \"https://dot.net now using TLS 1.2-only\" (#77)"},{"Id":"343360319","IsPullRequest":false,"CreatedAt":"2018-07-21T22:29:05","Actor":"richlander","Number":"76","RawContent":null,"Title":"July 2018 .NET Updates","State":"open","Body":"# July 2018 .NET Updates\r\n\r\nThe following .NET updates were released in June 2018. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Framework \r\n\r\n* [.NET Framework 4.7.2 is available on Windows Update, WSUS and MU Catalog](https://blogs.msdn.microsoft.com/dotnet/2018/07/10/net-framework-4-7-2-is-available-on-windows-update-wsus-and-mu-catalog/)\r\n* [Announcing .NET Framework 4.8 Early Access build 3632](https://blogs.msdn.microsoft.com/dotnet/2018/07/18/announcing-net-framework-4-8-early-access-build-3632/)\r\n* [Advisory on July 2018 .NET Framework Updates](https://blogs.msdn.microsoft.com/dotnet/2018/07/20/advisory-on-july-2018-net-framework-updates/)\r\n* [.NET Framework July 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/07/30/net-framework-july-2018-update/)\r\n\r\n## .NET Core\r\n\r\n* [.NET Core July 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/07/10/net-core-july-2018-update/)\r\n\r\n## .NET Core Support Policies\r\n\r\n* [Microsoft Support for .NET Core](https://github.com/dotnet/core/blob/master/microsoft-support.md)\r\n* [.NET Core Supported OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)\r\n* [April 2018](https://github.com/dotnet/announcements/issues/64)\r\n","Url":"https://github.com/dotnet/announcements/issues/76","RelatedDescription":"Open issue \"July 2018 .NET Updates\" (#76)"},{"Id":"343360017","IsPullRequest":false,"CreatedAt":"2018-07-21T22:22:25","Actor":"richlander","Number":"75","RawContent":null,"Title":"June 2018 .NET Updates","State":"open","Body":"# June 2018 .NET Updates\r\n\r\nThe following .NET updates were released in June 2018.\r\n\r\n## .NET Framework \r\n\r\n* [.NET Framework June 2018 Security and Quality Rollup](https://blogs.msdn.microsoft.com/dotnet/2018/06/13/net-framework-june-2018-security-and-quality-rollup/)\r\n* [Announcing .NET Framework 4.8 Early Access build 3621!](https://blogs.msdn.microsoft.com/dotnet/2018/06/06/announcing-net-framework-4-8-early-access-build-3621/)\r\n\r\n## .NET Core\r\n\r\n* [.NET Core 2.1 June Update](https://blogs.msdn.microsoft.com/dotnet/2018/06/22/net-core-2-1-june-update/)\r\n* [.NET Core 2.0 will reach End of Life on October 1, 2018](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/)\r\n* [.NET Core 1.0 and 1.1 EOL Dates Documented](https://github.com/dotnet/core/blob/master/microsoft-support.md)\r\n\r\n## Previous Updates\r\n\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)\r\n* [April 2018](https://github.com/dotnet/announcements/issues/64)\r\n* [February 2018](https://github.com/dotnet/announcements/issues/59)","Url":"https://github.com/dotnet/announcements/issues/75","RelatedDescription":"Open issue \"June 2018 .NET Updates\" (#75)"},{"Id":"343283437","IsPullRequest":false,"CreatedAt":"2018-07-21T00:56:48","Actor":"richlander","Number":"74","RawContent":null,"Title":"Advisory on July 2018 .NET Framework Updates","State":"open","Body":"# Advisory on July 2018 .NET Framework Updates\r\n\r\nUpdated: 08/14/2018\r\n\r\n> A new [.NET Framework August 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/08/14/august-2018-security-and-quality-rollup/) has been released that **resolves this advisory for all supported Windows versions**.\r\n\r\n~~A new [.NET Framework July 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/07/30/net-framework-july-2018-update/) has been released that resolves this advisory. See Guidance section.~~\r\n\r\n~~Guidance has changed for Windows 7, Windows Server 2008 and Windows Server 2008 R2. See Guidance section.~~\r\n\r\nThe [July 2018 Security and Quality Rollup updates for .NET Framework](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2018-8356) was released earlier this month. We have received multiple customer reports of [applications that fail to start or don't run correctly](https://support.microsoft.com/en-us/help/4345913) after installing the July 2018 update. These reports are specific to applications that initialize a COM component and run with restricted permissions.\r\n\r\nWe have stopped distributing the .NET Framework July 2018 updates on Windows Update and are actively working on fixing and re-shipping this month's updates. If you installed the July 2018 update and have not yet seen any negative behavior, we recommend that you leave your systems as-is but closely monitor them and ensure that you apply upcoming .NET Framework updates.\r\n\r\nAs a team, we regret that this release was shipped with this flaw. This release was tested using our regular and extensive testing process. We discovered while investigating this issue that we have a test hole for the specific combination of COM activation and restricted permissions, including impersonation. We will be mitigating that gap going forward. Again, we are sorry for any inconvenience that this product flaw has caused.\r\n\r\nWe will continue to update this issue and [post](https://blogs.msdn.microsoft.com/dotnet/2018/07/20/advisory-on-july-2018-net-framework-updates/) as we have new information.\r\n\r\n## Discussion\r\nPlease share your thoughts/experience on this advisory and see what others are saying at:\r\n\r\n* [microsoft/dotnet #811](https://github.com/Microsoft/dotnet/issues/811)\r\n\r\n## Guidance\r\n\r\nWe strongly recommend that you install [.NET Framework August 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/08/14/august-2018-security-and-quality-rollup/).\r\n\r\n~~We recommend that you install [.NET Framework July 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/07/30/net-framework-july-2018-update/) on your systems if you experienced the symptoms described in this advisory. If you did not experience these symptoms, we recommend you wait to update your machines until the next regular update, in August.~~\r\n\r\n~~On Windows 7, Windows Server 2008, and Windows Server 2008 R2, we have found that the combination of [July 2018 Security and Quality Rollup updates for .NET Framework](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2018-8356) and  [.NET Framework July 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/07/30/net-framework-july-2018-update/) do not resolve all symptoms. On these Windows versions, if you are experiencing these symptoms after installing this combination of patches, we recommend that you uninstall (only) the Monthly Rollup patch and then install the appropriate Security Only patch listed at [July 2018 Security and Quality Rollup updates for .NET Framework](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2018-8356).~~\r\n\r\n## Technical Context\r\n\r\nThe .NET Framework runtime uses the process token to determine whether the process is being run within an elevated context. These system calls can fail if the required process inspection permissions are not present. This causes an “access denied\" error.\r\n\r\n## Symptoms\r\n\r\nA COM component fails to load because of “access denied,” “class not registered,” or “internal failure occurred for unknown reasons” errors. \r\n\r\nThe most commonly reported failure results in the following error message:\r\n\r\n```console\r\nException type: System.UnauthorizedAccessException\r\nMessage: Access is denied. (Exception from HRESULT: 0x80070005 (E_ACCESSDENIED))\r\n```\r\n\r\n### Sharepoint\r\n\r\nWhen users browse to a SharePoint site they may see the following HTTP 403 message:\r\n\r\n```console\r\n\"The Web Site declined to show this webpage\"\r\n```\r\n\r\nThe SharePoint ULS Logs will contain a message like the following:  \r\n\r\n```console\r\nw3wp.exe (0x1894)         0x0B94  SharePoint Foundation  General 0000       High                UnauthorizedAccessException for the request. 403 Forbidden will be returned. Error=An error occurred creating the configuration section handler for system.serviceModel/extensions: Could not load file or assembly <AssemblySignature>  or one of its dependencies. Access is denied. (C:\\Windows\\Microsoft.NET\\Framework64\\v2.0.50727\\Config\\machine.config line 180)    \r\n\r\nw3wp.exe (0x1894)         0x0B94  SharePoint Foundation  General b6p2      VerboseEx                Sending HTTP response 403:403 FORBIDDEN.      \r\n\r\nw3wp.exe (0x1894)         0x0B94  SharePoint Foundation  General 8nca       Verbose                Application error when access /, Error=Access is denied. (Exception from HRESULT: 0x80070005 (E_ACCESSDENIED))\r\n```\r\n\r\nWhen crawling a people content source, the request may fail with the following entry logged to the SharePoint ULS Log: \r\n\r\n```console\r\nmssearch.exe (0x118C) 0x203C SharePoint Server Search Crawler:Gatherer Plugin cd11 Warning The start address sps3s://<URLtoSite> cannot be crawled.  Context: Application 'Search_Service_Application', Catalog 'Portal_Content'  Details:  Class not registered   (0x80040154)  \r\n\r\nIIS Hosted Classic ASP calling CreateObject for .NET COM objects may receive error \"ActiveX component can't create object\" \r\n\r\n.NET Application creates instance of .NET COM application within an Impersonation Context may receive error \"0x80040154 (REGDB_E_CLASSNOTREG)\"\r\n```\r\n\r\n### BizTalk Server Administration Console\r\n\r\nBizTalk Server Administration Console fails to launch properly with the following errors: \r\n\r\n```console\r\nAn internal failure occurred for unknown reasons. (WinMgmt) \r\n\r\nProgram Location:  \r\n\r\n   at System.Runtime.InteropServices.Marshal.ThrowExceptionForHRInternal(Int32 errorCode, IntPtr errorInfo) \r\n\r\n   at System.Management.ManagementObject.Get() \r\n\r\n   at Microsoft.BizTalk.SnapIn.Framework.WmiProvider.SelectInstance\r\n```\r\n\r\n> Warning: The following workarounds may make a computer or a network more vulnerable to attack by malicious users or by malicious software such as viruses. We do not recommend these workarounds but are providing this information so that you can implement the workarounds at your own discretion. Use these workarounds at your own risk.\r\n\r\nUse the following guidance as a workaround:\r\n\r\n* Add “NETWORK SERVICE” to the local Administrators group. \r\n\r\n### IIS with Classic ASP\r\n\r\nIIS Hosted Classic ASP calling CreateObject for .NET COM objects may receive the following error: \"ActiveX component can't create object\". Use the following guidance as a workaround.\r\n\r\n* If your web site uses Anonymous Authentication, change the Web Site Anonymous Authentication credentials to use the \"Application pool identity\"\r\n* If your site uses Basic Authentication, log into the application once as the application pool identity and then create an instance of the .NET COM component. All subsequent activations for that .NET COM component should succeed, for any user.\r\n\r\n### .NET applications using COM and impersonation\r\n\r\n.NET Applications that creates instances of .NET COM application within an Impersonation Context may receive the following error: \"0x80040154 (REGDB_E_CLASSNOTREG)\". Use the following guidance as a workaround.\r\n\r\n* Create an instance of the .NET COM component prior to the impersonation context call. Later impersonated create instance calls should work as expected.\r\n* Run the .NET Application in the context of the impersonated user\r\n* Avoid using Impersonation when creating the .NET COM object","Url":"https://github.com/dotnet/announcements/issues/74","RelatedDescription":"Open issue \"Advisory on July 2018 .NET Framework Updates\" (#74)"},{"Id":"339929129","IsPullRequest":false,"CreatedAt":"2018-07-10T17:00:37","Actor":"blowdart","Number":"73","RawContent":null,"Title":"Microsoft Security Advisory CVE-2018-8356: .NET Core Security Feature Bypass Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-8356: .NET Core Security Feature Bypass Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a security feature bypass vulnerability that exists when .NET Core does not correctly validate certificates. An attacker who successfully exploited this vulnerability could present an expired certificate when challenged.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core applications handle certificate validation.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/wcf/issues/3009\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\n* If an application does not use Windows Communication Foundation you are not affected.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core, or ASP.NET Core based application that uses System.Private.ServiceModel with a version of 4.5.1 or earlier.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ---------------- | -------------------------\r\nSystem.Private.ServiceModel | 4.0.0, 4.1.0, 4.1.1 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 |  4.1.3 or later <br /> 4.3.3 or later <br /> 4.4.4 or later <br /> 4.5.3 or later\r\nSystem.ServiceModel.Duplex | 4.0.0, 4.0.1, 4.0.2 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 | 4.0.4 or later <br /> 4.3.3 or later <br /> 4.443 or later <br /> 4.5.3 or later\r\nSystem.ServiceModel.Http | 4.0.0, 4.0.10, 4.1.0, 4.1.1 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 | 4.1.3 or later <br /> 4.3.3 or later <br /> 4.4.4 or later <br /> 4.5.3 or later\r\nSystem.ServiceModel.NetTcp | 4.0.0, 4.1.0, 4.1.1 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 | 4.1.3 or later <br /> 4.3.3 or later <br /> 4.4.4 or later <br /> 4.5.3 or later\r\nSystem.ServiceModel.Primitives | 4.0.0, 4.1.0, 4.1.1 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 | 4.1.2 or later <br /> 4.3.3 or later <br /> 4.4.4 or later <br /> 4.5.3 or later\r\nSystem.ServiceModel.Security | 4.0.0, 4.0.1, 4.0.2 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 | 4.0.4 or later <br /> 4.3.3 or later <br /> 4.4.4 or later <br /> 4.5.3 or later\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n.NET Core projects have two types of dependencies: direct and transitive. You must update your projects using the following instructions to address both types of dependency.\r\n\r\n### <a name=\"project-format\"></a>.NET Core Project formats\r\n\r\n.NET Core has two different project file formats, depending on what software created the project.\r\n\r\n1. `project.json` is the format used in .NET Core 1.0 and Microsoft Visual Studio 2015.\r\n2. `csproj` is the format used in .NET Core 1.1, .NET Core 2.0 and Microsoft Visual Studio 2017.\r\n\r\n#### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file or your `project.json` file. They can be fixed by [editing the project file](#direct-dependencies) or using NuGet to update the dependency.\r\n\r\n The `System.Private.ServiceModel` package is not meant to be directly depended on and will not appear in your direct dependency list.\r\n\r\n#### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in three ways, depending on your [project format](#project-format):\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects *OR*.\r\n* By examining the `project.lock.json` file contained in the root directory of your project for `project.json` based projects.\r\n\r\nThe `project.assets.json` and `project.lock.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\n#### <a name=\"direct-dependencies-vs2017\"></a>Fixing direct dependencies in a csproj based project / Visual Studio 2017\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.ServiceModel.Http\" Version=\"4.4.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.ServiceModel.Http` version 4.4.0.\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.ServiceModel.Http` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.ServiceModel.Http\" Version=\"4.4.3\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"direct-dependencies-vs2015\"></a> Fixing Direct Dependencies in project.json based project / Visual Studio 2015\r\n\r\nOpen your `project.json` file in your editor. Look for the dependencies section. Below is an example dependencies section:\r\n\r\n``` json\r\n    \"dependencies\": {\r\n      \"Microsoft.NETCore.App\": {\r\n        \"version\": \"1.0.1\",\r\n        \"type\": \"platform\"\r\n      },\r\n     \"Microsoft.AspNetCore.Mvc.Core\": \"1.0.6\",\r\n     \"System.ServiceModel.Http\" : \"4.0.0\"\r\n    }\r\n```\r\n\r\nThis example has three direct dependencies: `Microsoft.NETCore.App`, `Microsoft.AspNetCore.Mvc.Core` and `System.ServiceModel.Http`.\r\n\r\n`Microsoft.NetCore.App` is the platform the application targets, you should ignore this. The other packages expose their version to the right of the package name. In our example, our non-platform packages are version 1.0.1.\r\n\r\nReview your direct dependencies for any instance of the packages and versions listed above. In the example above, there is a direct dependency on a vulnerable package, `System.ServiceModel.Http` version 4.4.0.\r\n\r\nTo update to the fixed package, change the version number to be the appropriate package for your release. In the example, this would be updating `System.ServiceModel.Http` to 4.4.3.\r\n\r\nAfter updating the vulnerable package versions, save your `project.json` file.\r\n\r\nThe dependencies section in our example `project.json` would now look as follows:\r\n\r\n```json\r\n  \"dependencies\": {\r\n    \"Microsoft.NETCore.App\": {\r\n      \"version\": \"1.0.1\",\r\n      \"type\": \"platform\"\r\n    },\r\n    \"Microsoft.AspNetCore.Mvc.Core\": \"1.0.6\",\r\n    \"System.ServiceModel.Http \": \"4.4.3\"\r\n  }\r\n```\r\n\r\nIf you are using Visual Studio and save your updated `project.json` file, Visual Studio will restore the new package version. You can see the restore results by opening the Output Window (Ctrl+Alt+O) and changing the Show output from drop-down list to Package Manager.\r\n\r\nIf you are not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore your new dependency.\r\n\r\nAfter you have addressed all of your direct dependencies, you must also review your transitive dependencies.\r\n\r\nAfter you've addressed all of your direct dependencies, you must review your transitive dependencies.\r\n\r\n#### Discovering and fixing transitive dependencies\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json) or the [the `project.lock.json` file](#project-lock-json).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json (csproj/VS2017)\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `System.ServiceModel.Http/4.3.0` is a reference to version 4.3.0 of `System.ServiceModel.Http`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.ServiceModel.Http\" Version=\"4.3.2\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n##### <a name=\"project-lock-json\"></a> Manually reviewing project.lock.json (project.json/VS2015)\r\n\r\nOpen the `project.lock.json` file in your editor. We suggest you use an editor that understands json and allows you to collapse and expand nodes to review this file; both Visual Studio and Visual Studio Code provide this functionality.\r\n\r\nIf you are using Visual Studio the `project.lock.json` file is “under” the `project.json` file. Click the right pointing triangle, ▷, to the left of the `project.json` file to expand the solution tree to expose the `project.lock.json` file. The following image shows a project with the `project.json` file expanded to show the `project.lock.json` file.\r\n\r\n![project lock json](https://cloud.githubusercontent.com/assets/796298/25858179/f6e01200-348f-11e7-8a77-7176d8dd3f03.png)\r\n\r\nSearch the `project.lock.json` file for the vulnerable packages, using the format `packagename/`, using each of the package names from the table above. If you find any vulnerable assembly name in your search examine the line on which they are found, the version number is after the `/` and compare to the vulnerable versions table above. For example a search result that shows `System.ServiceModel.Http/4.0.1` is a reference to v4.0.1 of `System.ServiceModel.Http`.   If your `project.lock.json` file includes references to any of the package versions shown above then you will need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to a vulnerable version of `System.ServiceModel.Http` this means none of your direct dependencies depend on any vulnerable packages or you have already fixed the problem by updating the direct dependencies.\r\n\r\nIf your transitive dependency review found references to any of the vulnerable packages you must add a direct dependency to the updated package to your `project.json` file to override the transitive dependency. Open your `project.json` and find the dependencies section. For example:\r\n\r\n``` json\r\n  \"dependencies\": {\r\n    \"Microsoft.NETCore.App\": {\r\n      \"version\": \"1.0.1\",\r\n      \"type\": \"platform\"\r\n    },\r\n    \"Microsoft.AspNetCore.Mvc\": \"1.0.0\"\r\n  }\r\n```\r\n\r\nFor each of the vulnerable packages your search returned you must add a direct dependency to the updated version by adding it to the `project.json` file. You do this by adding a new line to the dependencies section, referring the fixed version. For example, if your search showed a transitive reference to the vulnerable `System.ServiceModel.Http` version 1.0.0 you would add a reference to the appropriate fixed version, 1.0.6. Edit the `project.json` file as follows:\r\n\r\n``` json\r\n  \"dependencies\": {\r\n    \"Microsoft.NETCore.App\": {\r\n      \"version\": \"1.0.1\",\r\n      \"type\": \"platform\"\r\n    },\r\n    \"System.ServiceModel.Http\": \"4.1.2\",\r\n    \"Microsoft.AspNetCore.Mvc\": \"1.0.0\"\r\n  }\r\n```\r\n\r\nAfter you have added direct dependencies to the fixed packages, save your `project.json` file.\r\n\r\nIf you are using Visual Studio save your updated `project.json` file and Visual Studio will restore the new package versions. You can see the restore results by opening the Output Window (Ctrl+Alt+O) and changing the Show output from drop-down list to Package Manager.\r\n\r\nIf you are not using Visual Studio open a command line and change to your project directory. Execute the `dotnet restore` command to restore your new dependencies.\r\n\r\n#### Rebuilding your application\r\n\r\nFinally you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2018-8356](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-CVE-2018-8356)\r\n\r\n### Revisions\r\n\r\nV1.1 (July 23, 2018): Updated package versions, as some assemblies were released unsigned.\r\nV1.0 (July 10, 2018): Advisory published.\r\n\r\n_Version 1.1_\r\n\r\n_Last Updated 2018-07-23_\r\n","Url":"https://github.com/dotnet/announcements/issues/73","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2018-8356: .NET Core Security Feature Bypass Vulnerability\" (#73)"},{"Id":"329614193","IsPullRequest":false,"CreatedAt":"2018-06-05T20:33:10","Actor":"huanwu","Number":"72","RawContent":null,"Title":"Introducing dotnet-svcutil.xmlserializer for .NET Core","State":"open","Body":"# Introducing dotnet-svcutil.xmlserializer for .NET Core\r\nOn the full .NET Framework you are able to pre-generate a serialization assembly using the tool svcutil. We are providing similar functionality on .NET Core by releasing the dotnet-svcutil.xmlserializer NuGet package. It pre-generates c# serialization code for the types used by WCF Service Contract in the client applications that can be serialized using the XmlSerializer to improve the startup performance of Xml Serialization when serializing or de-serializing objects of those types using XmlSerializer. \r\nYou can start using the tool today by following the [instructions](https://github.com/dotnet/core/blob/master/samples/dotnet-svcutil.xmlserializer-instructions.md). \r\n\r\n## Discussion \r\nPlease share with us any thoughts of questions that you may have at: \r\n\r\n- dotnet/wcf [#2927](https://github.com/dotnet/wcf/issues/2927)\r\n## Details \r\nWhen to use XmlSerializer with WCF in an app to serialize contract data types, it will generate an XmlSerializer during runtime to do the serialization. You can improve the startup performance of Xml serialization by simply adding the reference of dotnet-svcutil.xmlserializer NuGet package to your project. This tool will generate the serialization code and compile it into an assembly next to your output assembly at build time in advance. This assembly can then be deployed and ran with your application. \r\n\r\nPlease create an issue with your feedback at [dotnet/wcf](https://github.com/dotnet/wcf/issues). We are actively looking to improve the tool and your input is a valuable part of the process. ","Url":"https://github.com/dotnet/announcements/issues/72","RelatedDescription":"Open issue \"Introducing dotnet-svcutil.xmlserializer for .NET Core\" (#72)"},{"Id":"327817883","IsPullRequest":false,"CreatedAt":"2018-05-30T17:02:38","Actor":"MichaelSimons","Number":"71","RawContent":null,"Title":".NET Core 2.1 Docker Image Updates","State":"open","Body":"# .NET Core 2.1 Docker Image Updates\r\n\r\nWe have consolidating the set of Docker Hub repositories that we use for .NET Core and ASP.NET Core. We will use [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/) as the only repository that we publish to for .NET Core 2.1 and later releases.\r\n\r\nWe added a set of environment variables to .NET Core images to make it easier to host ASP.NET Core sites at any .NET Core image layer and to enable `dotnet watch` in SDK container images without additional configuration.\r\n\r\nAlpine and ARM32 image variants have been added and are supported.\r\n\r\n[.NET Core Docker Samples](https://github.com/dotnet/dotnet-docker/blob/master/samples/README.md) have been moved to the [dotnet/dotnet-docker](https://github.com/dotnet/dotnet-docker) repo. The samples have been updated for .NET Core 2.1. New samples have been added, including [Hosting ASP.NET Core Images with Docker over HTTPS](https://github.com/dotnet/dotnet-docker/blob/master/samples/aspnetapp/aspnetcore-docker-https.md).\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet/dotnet-docker #560](https://github.com/dotnet/dotnet-docker/issues/560)\r\n\r\n## Details\r\n\r\nThe following changes have been made as part of the .NET Core 2.1 release.\r\n\r\n### Repo consolidation\r\n\r\n.NET Core and ASP.NET Core images will be published to the [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/) Docker Hub repo for .NET Core 2.1 and later releases. Co-location of images improves image discovery. The .NET Core runtime and SDK images are already co-located. We are adding the ASP.NET Core runtime images to the [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/) repo as a third image type. We are [no longer producing the microsoft/aspnetcore-build image](https://github.com/aspnet/Announcements/issues/298) with .NET Core 2.1.\r\n\r\nThe following three tags are now available at the [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/) repo:\r\n\r\n* `2.1-sdk`\r\n* `2.1-aspnetcore-runtime`\r\n* `2.1-runtime`\r\n\r\n### Environment variables enable new scenarios\r\n\r\nWe added a set of environment variables to .NET Core docker images, for .NET Core 2.1 and later. These environment variables enable more scenarios to work without additional configuration, such as [developing ASP.NET Core applications in a container](https://github.com/dotnet/dotnet-docker/blob/master/samples/aspnetapp/aspnet-docker-dev-in-container.md).\r\n\r\nNew sdk image environment variables ([example](https://github.com/dotnet/dotnet-docker/blob/master/2.1/sdk/bionic/amd64/Dockerfile#L28-L32))\r\n* `ASPNETCORE_URLS=http://+:80`\r\n* `DOTNET_RUNNING_IN_CONTAINER=true`\r\n* `DOTNET_USE_POLLING_FILE_WATCHER=true`\r\n\r\nNew Linux runtime-deps image environment variables ([example](https://github.com/dotnet/dotnet-docker/blob/master/2.1/runtime-deps/alpine3.7/amd64/Dockerfile#L19-L21))\r\n* `ASPNETCORE_URLS=http://+:80`\r\n* `DOTNET_RUNNING_IN_CONTAINER=true`\r\n\r\nNew Windows runtime image environment variables ([example](https://github.com/dotnet/dotnet-docker/blob/master/2.1/runtime/nanoserver-1709/amd64/Dockerfile#L33-L35))\r\n* `ASPNETCORE_URLS=http://+:80`\r\n* `DOTNET_RUNNING_IN_CONTAINER=true`\r\n\r\n### New image variants\r\n\r\nAlpine and ARM32 image variants have been added and are supported as part of the .NET Core 2.1 release. \r\n\r\nFor Alpine, you must [use specific tags to create Alpine-based images](https://github.com/dotnet/dotnet-docker/blob/master/samples/dotnetapp/README.md#build-and-run-the-sample-for-alpine-with-docker), such as `2.1-runtime-alpine`. \r\n\r\nFor ARM32, you can use the regular multi-arch tags, like `2.1-runtime` and `2.1-sdk` if you are building on an ARM32 device. If you are building on another type of machine, you need to use ARM32-specific tags for the runtime images you create, such as `2.1-runtime-bionic-arm32v7` (for Ubuntu 18.04).\r\n\r\n### Related repos\r\n\r\nThe following repos are related to this announcement:\r\n\r\n* [microsoft/aspnetcore](https://hub.docker.com/r/microsoft/aspnetcore/)\r\n* [microsoft/aspnetcore-build](https://hub.docker.com/r/microsoft/aspnetcore-build/)\r\n* [microsoft/dotnet/](https://hub.docker.com/r/microsoft/dotnet/)\r\n","Url":"https://github.com/dotnet/announcements/issues/71","RelatedDescription":"Open issue \".NET Core 2.1 Docker Image Updates\" (#71)"},{"Id":"325815293","IsPullRequest":false,"CreatedAt":"2018-05-23T18:04:46","Actor":"mlacouture","Number":"70","RawContent":null,"Title":"Introducing dotnet-svcutil","State":"open","Body":"# Introducing dotnet-svcutil\r\n\r\nThe Microsoft Windows Communication Foundation (WCF) **dotnet-svcutil** tool is a .NET Core CLI tool that retrieves metadata from a web service on a network location or from a WSDL file, and generates a WCF class containing client proxy methods that you can use to access the web service operations.\r\n\r\nSimilarly to the [Service Model Metadata - svcutil](https://docs.microsoft.com/en-us/dotnet/framework/wcf/servicemodel-metadata-utility-tool-svcutil-exe) tool for .NET Framework projects, the **dotnet-svcutil** is a command line tool for generating a web service reference compatible with .NET Core and .NET Standard projects. \r\n\r\nThe **dotnet-svcutil** tool is an alternative option to the [WCF Web Service Reference ](https://docs.microsoft.com/en-us/dotnet/core/additional-tools/wcf-web-service-reference-guide)Visual Studio connected service provider which first shipped with Visual Studio 2017 v15.5.  The **dotnet-svcutil** tool as a .NET Core CLI tool, however, can be run on multiple platforms like Linux and MacOS in addition to Windows.\r\n\r\n# Discussion\r\nPlease share your thoughts with us by commenting on GitHub issue dotnet/wcf#2894\r\n","Url":"https://github.com/dotnet/announcements/issues/70","RelatedDescription":"Open issue \"Introducing dotnet-svcutil\" (#70)"},{"Id":"321374728","IsPullRequest":false,"CreatedAt":"2018-05-08T22:56:33","Actor":"richlander","Number":"68","RawContent":null,"Title":"May 2018 .NET Updates","State":"open","Body":"# May 2018 .NET Updates\r\n\r\nThe following .NET updates were released this month. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Framework\r\n\r\n* [.NET Framework May 2018 Preview of Quality Rollup for Windows 10 April 2018 Update (version 1803)](https://blogs.msdn.microsoft.com/dotnet/2018/05/23/net-framework-may-2018-preview-of-quality-rollup-for-windows-10-april-2018-update-version-1803/)\r\n* [.NET Framework May 2018 Preview of Quality Rollup for Windows 10 1709 (Fall Creators Update)](https://blogs.msdn.microsoft.com/dotnet/2018/05/21/net-framework-may-2018-preview-of-quality-rollup-for-windows-10-1709-fall-creators-update/)\r\n* [.NET Framework May 2018 Security and Quality Rollup for Windows 10](https://blogs.msdn.microsoft.com/dotnet/2018/05/17/net-framework-may-2018-preview-of-quality-rollup-for-windows-10/)\r\n* [.NET Framework May 2018 Security and Quality Rollup](https://blogs.msdn.microsoft.com/dotnet/2018/05/08/net-framework-may-2018-security-and-quality-rollup/)\r\n* [microsoft/dotnet-framework](https://hub.docker.com/r/microsoft/dotnet-framework/) and related Docker images were updated for [Windows Server, version 1803](https://docs.microsoft.com/en-us/windows-server/get-started/get-started-with-1803).\r\n\r\n## .NET Core\r\n\r\n* [Announcing .NET Core 2.1](https://blogs.msdn.microsoft.com/dotnet/2018/05/30/announcing-net-core-2-1/)\r\n* [.NET Core May 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/05/08/net-core-may-2018-update/)\r\n* [.NET Core 2.1 RC1](https://blogs.msdn.microsoft.com/dotnet/2018/05/07/announcing-net-core-2-1-rc-1/)\r\n* [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/) and related Docker images were updated for [Windows Server, version 1803](https://docs.microsoft.com/en-us/windows-server/get-started/get-started-with-1803).\r\n\r\n## Previous Updates\r\n\r\n* [April 2018 .NET Updates](https://github.com/dotnet/announcements/issues/64)\r\n* [February 2018 Security and Quality Updates](https://github.com/dotnet/announcements/issues/59)","Url":"https://github.com/dotnet/announcements/issues/68","RelatedDescription":"Open issue \"May 2018 .NET Updates\" (#68)"},{"Id":"321269154","IsPullRequest":false,"CreatedAt":"2018-05-08T17:03:39","Actor":"blowdart","Number":"67","RawContent":null,"Title":"Microsoft Security Advisory CVE-2018-0765: .NET Core Denial Of Service Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-0765: .NET Core Denial Of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core and .NET native version 2.0. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a denial of service vulnerability that exists when .NET Framework and .NET Core improperly process XML documents. An attacker who successfully exploited this vulnerability could cause a denial of service against a .NET Framework, .NET Core, or .NET native application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Framework, .NET Core, and .NET native applications handle XML document processing.\r\n\r\nIf your application is an ASP.NET Core application, developers are also advised to update to [ASP.NET Core 2.0.8](https://www.nuget.org/packages/Microsoft.AspNetCore.All/2.0.8).\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/29578\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\n* If an application does not process signed XML, it is not affected by this vulnerability.\r\n* If your application targets .NET Core 1.x or .NET native 1.x, it is not affected as the vulnerable package is not available for these platforms.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core, .NET native, or ASP.NET Core based application that uses System.Security.Cryptography.Xml with a version of 4.4.1 or earlier.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ---------------- | -------------------------\r\nSystem.Security.Cryptography.Xml | ≤4.4.1 |  4.4.2 or later\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n.NET Core has two types of dependencies: direct and transitive. Direct dependencies are dependencies where you specifically add a package to your project, transitive dependencies occur when you add a package to your project that in turn relies on another package.\r\n\r\nFor example, the `Microsoft.AspNetCore.Mvc` package depends on the `Microsoft.AspNetCore.Mvc.Core` package. When you add a dependency on `Microsoft.AspNetCore.Mvc` in your project, you're taking a transitive dependency on `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\nAny application that has a direct or transitive dependency on the [affected package](#affected-software) can be exposed to the vulnerability if it does not meet any of the [mitigation factors](#mitigation-factors).\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n---\r\n\r\nIf you're targeting ASP.NET Core 2.0 and using the `Microsoft.AspNetCore.All` metapackage:\r\n\r\n* Update its version number to [2.0.8](https://www.nuget.org/packages/Microsoft.AspNetCore.All/2.0.8) to pull in updated packages that update their transitive dependencies to the fixed version of `System.Security.Cryptography.Xml`.\r\n\r\n---\r\n\r\n.NET Core projects have two types of dependencies: direct and transitive. You must update your projects using the following instructions to address both types of dependency.\r\n\r\n#### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your *csproj* file. They can be fixed by [editing the csproj file](#direct-dependencies) or using NuGet to update the dependency.\r\n\r\n#### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the *project.assets.json* file contained in the obj directory of your project.\r\n\r\nThe *project.assets.json* files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\n#### <a name=\"direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Security.Cryptography.Xml\" Version=\"4.4.1\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.Security.Cryptography.Xml` version 4.4.1.\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.Security.Cryptography.Xml` to a [fixed package number](#affected-software). Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Security.Cryptography.Xml\" Version=\"4.4.2\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\nAfter you've addressed all of your direct dependencies, you must review your transitive dependencies.\r\n\r\n#### Discovering and fixing transitive dependencies\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can [review the *project.assets.json* file](#project-assets-json).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio 2017, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a>Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `System.Security.Cryptography.Xml/4.4.0` is a reference to version 4.4.0 of `System.Security.Cryptography.Xml`.\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\n##### Fixing transitive dependencies\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.Security.Cryptography.Xml` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Security.Cryptography.Xml\" Version=\"4.4.2\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n#### Rebuilding your application\r\n\r\nFinally you must rebuild your application, test, and redeploy.\r\n\r\n---\r\n\r\nIf you're targeting .NET native for a Universal Windows Platform (UWP) application, you should update your dependencies and republish your application.\r\n\r\nIf you submit an application to the Windows Store with an outdated reference, the store will update the reference automatically, which has the potential for compatibility issues. Thus, we recommend updating your application directly and testing its functionality before resubmitting.\r\n\r\n---\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2018-0787](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-CVE-2018-0765)\r\n\r\n### Revisions\r\n\r\nV1.0 (May 8, 2018): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2018-05-08_","Url":"https://github.com/dotnet/announcements/issues/67","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2018-0765: .NET Core Denial Of Service Vulnerability\" (#67)"},{"Id":"319701474","IsPullRequest":false,"CreatedAt":"2018-05-02T20:31:57","Actor":"MichaelSimons","Number":"66","RawContent":null,"Title":".NET Framework Docker Samples have moved","State":"open","Body":"# .NET Framework Docker Samples have moved\r\nThe .NET Framework Docker samples have moved to the [samples folder of Microsoft/dotnet-framework-docker](https://github.com/Microsoft/dotnet-framework-docker/tree/master/samples).\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [Microsoft/dotnet-framework-docker #128](https://github.com/Microsoft/dotnet-framework-docker/issues/128)\r\n\r\n## Details\r\nThe .NET Framework Docker samples have been enhanced and moved to the [samples folder of Microsoft/dotnet-framework-docker](https://github.com/Microsoft/dotnet-framework-docker/tree/master/samples).\r\n\r\n- https://github.com/Microsoft/dotnet-framework-docker/pull/126\r\n- https://github.com/Microsoft/dotnet-framework-docker-samples/issues/22\r\n\r\nThe samples show various ways to use the .NET Framework and Docker together. You can use the samples as the basis of your own Docker images or just to play.\r\n\r\nThe samples exercise various levels of functionality. The [.NET Framework Docker sample](https://github.com/Microsoft/dotnet-framework-docker/blob/master/samples/dotnetapp/README.md) includes the most functionality, including build, unit testing, and pushing images to a container registry. The [ASP.NET Docker sample](https://github.com/Microsoft/dotnet-framework-docker/blob/master/samples/aspnetapp/README.md) includes instructions for testing images with [Azure Container Instances](https://azure.microsoft.com/services/container-instances/). The samples include detailed instructions for use with and without Docker.\r\n","Url":"https://github.com/dotnet/announcements/issues/66","RelatedDescription":"Open issue \".NET Framework Docker Samples have moved\" (#66)"},{"Id":"319700544","IsPullRequest":false,"CreatedAt":"2018-05-02T20:28:55","Actor":"MichaelSimons","Number":"65","RawContent":null,"Title":".NET Framework Runtime and Builder Docker repos have merged ","State":"open","Body":"# .NET Framework Runtime and Builder Docker repos have merged\r\n\r\nThe [microsoft/dotnet-framework-build](https://hub.docker.com/r/microsoft/dotnet-framework-build/) Docker Hub repo has been merged into the [microsoft/dotnet-framework](https://hub.docker.com/r/microsoft/dotnet-framework/) Docker Hub repo.  All new tags going forward will only be pushed to [microsoft/dotnet-framework](https://hub.docker.com/r/microsoft/dotnet-framework/).  The images in the [microsoft/dotnet-framework-build](https://hub.docker.com/r/microsoft/dotnet-framework-build/) Docker Hub repo will be retained and serviced accordingly as to not affect existing usage.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [Microsoft/dotnet-framework-docker #125](https://github.com/Microsoft/dotnet-framework-docker/issues/125)\r\n\r\n## Details\r\n\r\nThe [microsoft/dotnet-framework-build](https://hub.docker.com/r/microsoft/dotnet-framework-build/) Docker Hub repo has been merged into the [microsoft/dotnet-framework](https://hub.docker.com/r/microsoft/dotnet-framework/) Docker Hub repo.\r\n\r\n* https://github.com/Microsoft/dotnet-framework-docker/pull/123\r\n* https://github.com/Microsoft/dotnet-framework-docker/issues/78\r\n\r\nIn order to differentiate the runtime and build images, `runtime` and `sdk` distinguishing identifiers have been added to the tags.  For example, `4.7.2-runtime` and `4.7.2-sdk`.\r\n\r\nAll new tags going forward will only be pushed to [microsoft/dotnet-framework](https://hub.docker.com/r/microsoft/dotnet-framework/).   For example, the build images for 4.7.2 which was released today, only exist in [microsoft/dotnet-framework](https://hub.docker.com/r/microsoft/dotnet-framework/) repo.\r\n\r\nThe existing tags in [microsoft/dotnet-framework-build](https://hub.docker.com/r/microsoft/dotnet-framework-build/) will remain and be serviced accordingly.  For example, the stable tags such as `4.7.1-windowsservercore-1709` will continue to be patched on a monthly basis.\r\n\r\nWe recommend that as you create and maintain your code, you move to use the new `runtime` and `sdk` images from the [microsoft/dotnet-framework](https://hub.docker.com/r/microsoft/dotnet-framework/) repo.\r\n","Url":"https://github.com/dotnet/announcements/issues/65","RelatedDescription":"Open issue \".NET Framework Runtime and Builder Docker repos have merged \" (#65)"},{"Id":"315285808","IsPullRequest":false,"CreatedAt":"2018-04-18T00:20:13","Actor":"richlander","Number":"64","RawContent":null,"Title":"April 2018 .NET Updates","State":"open","Body":"# April 2018 .NET Updates\r\n\r\nThe following .NET updates were released this month. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Framework\r\n\r\n* [Announcing the .NET Framework 4.7.2](https://blogs.msdn.microsoft.com/dotnet/2018/04/30/announcing-the-net-framework-4-7-2/)\r\n* No new patch releases. See: [.NET Framework February 2018 Security and Quality Rollup](https://blogs.msdn.microsoft.com/dotnet/2018/02/13/net-framework-february-2018-security-and-quality-rollup/).\r\n* [microsoft/dotnet-framework](https://hub.docker.com/r/microsoft/dotnet-framework/) and related Docker images were updated for [KB4093112](https://support.microsoft.com/help/4093112) and associated updates.\r\n\r\n## .NET Core\r\n\r\n* [.NET Core April 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/04/17/net-core-april-2018-update/)\r\n   * [2.0.7 Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.0/2.0.7.md)\r\n   * [1.1.8 Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.1/1.1.8.md)\r\n   * [1.0.11 Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.0/1.0.11.md)\r\n* [.NET Core 2.1 Preview 2](https://blogs.msdn.microsoft.com/dotnet/2018/04/11/announcing-net-core-2-1-preview-2/)\r\n* [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/) and related Docker images were updated for [KB4093112](https://support.microsoft.com/help/4093112) and associated updates.\r\n* Latest .NET Core security release: [.NET Core March 2018 Update](https://github.com/dotnet/core/issues/1341)\r\n\r\n## .NET for UWP\r\n\r\n* No new releases. See: [.NET for UWP January 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-for-uwp-january-2018-update/).\r\n\r\n## Previous Updates\r\n\r\n* [February 2018 Security and Quality Updates](https://github.com/dotnet/announcements/issues/59)","Url":"https://github.com/dotnet/announcements/issues/64","RelatedDescription":"Open issue \"April 2018 .NET Updates\" (#64)"},{"Id":"305721744","IsPullRequest":false,"CreatedAt":"2018-03-15T21:13:36","Actor":"mairaw","Number":"63","RawContent":null,"Title":"Transport Layer Security (TLS) best practices with the .NET Framework article published","State":"open","Body":"# Transport Layer Security (TLS) best practices with the .NET Framework article published\r\n\r\nA new article was published that discusses the Transport Layer Security (TLS) best practices for .NET Framework applications at https://docs.microsoft.com/dotnet/framework/network-programming/tls.\r\n\r\nTo ensure .NET Framework applications remain secure, the TLS version should **not** be hardcoded. .NET Framework applications should use the TLS version the operating system (OS) supports.\r\n\r\nThe (TLS) best practices article targets developers who are:\r\n* Directly using the System.Net APIs (for example, `System.Net.Http.HttpClient` and `System.Net.Security.SslStream`).\r\n* Directly using WCF clients and services using the `System.ServiceModel` namespace.\r\n* Using [Azure Cloud Services](https://azure.microsoft.com/services/cloud-services/) Web and Worker roles to host and run your application. See the [Azure Cloud Services](https://docs.microsoft.com/dotnet/framework/network-programming/tls#azure-cloud-services) section.\r\n\r\nThe article explains how to enable the strongest security available for the version of the .NET Framework that your app targets and runs on.\r\n\r\nThe section [Audit your code and make code changes](https://docs.microsoft.com/dotnet/framework/network-programming/tls#audit-your-code-and-make-code-changes) covers auditing and updating your code.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts and have any discussions with us at:\r\n\r\ndotnet/docs#4675","Url":"https://github.com/dotnet/announcements/issues/63","RelatedDescription":"Open issue \"Transport Layer Security (TLS) best practices with the .NET Framework article published\" (#63)"}],"ResultType":"GitHubIssue"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1073371092515840000","CreatedAt":"2018-12-14T00:16:25+00:00","UserScreenname":"dotnet","Text":"C# and Visual Basic files get Regex language support in @VisualStudio 2019 Preview\nhttps://t.co/NL5QgAl9hq https://t.co/WWTK6BT5RG","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":363,"FavoriteCount":133,"RawContent":null},{"Id":"1072638045227270144","CreatedAt":"2018-12-11T23:43:33+00:00","UserScreenname":"dotnet","Text":"Blogged: .NET Framework December 2018 Security and Quality Rollup https://t.co/5PllosL5i2","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":10,"FavoriteCount":8,"RawContent":null},{"Id":"1072146418868064256","CreatedAt":"2018-12-10T15:10:00+00:00","UserScreenname":"dotnet","Text":"Learn about writing tests for @AzureFunctions with Senior Program Manager Jeff Hollan (@jeffhollan) in this episode… https://t.co/18tWdVma7r","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":31,"FavoriteCount":11,"RawContent":null}]}},"RunOn":"2018-12-23T05:30:41.9000193Z","RunDurationInMilliseconds":18562}