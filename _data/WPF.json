{"Data":{"GitHub":{"Issues":[{"Id":"441426217","IsPullRequest":false,"CreatedAt":"2019-05-07T20:14:50","Actor":"livarcocc","Number":"664","RawContent":null,"Title":".NET Core 3.0 WPF Crash when copying from RichTextBox","State":"open","Body":"@OliveOil1 commented on [Wed Apr 03 2019](https://github.com/dotnet/core-sdk/issues/1185)\n\nCopying from a RichTextBox control in .NET Core 3.0 with WPF will consistently cause the application to freeze up and eventually crash. This problem only seems to affect RichTextBoxs, as when I tried with a regular TextBox, it ran perfectly fine. \n\n","Url":"https://github.com/dotnet/wpf/issues/664","RelatedDescription":"Open issue \".NET Core 3.0 WPF Crash when copying from RichTextBox\" (#664)"},{"Id":"441395926","IsPullRequest":true,"CreatedAt":"2019-05-07T19:03:00","Actor":"rladuca","Number":"663","RawContent":null,"Title":"Fix ResX Code Generation","State":"closed","Body":"Due to a change in Arcade in GenerateResxSource.targets, we need to set GenerateResxSource to true so that codegen runs on our EmbeddedResources.  This is blocking some DARC PRs with the latest Arcade changes.\r\n\r\nfixes #662 ","Url":"https://github.com/dotnet/wpf/pull/663","RelatedDescription":"Closed or merged PR \"Fix ResX Code Generation\" (#663)"},{"Id":"441394883","IsPullRequest":false,"CreatedAt":"2019-05-07T19:03:00","Actor":"rladuca","Number":"662","RawContent":null,"Title":"Fix ResX code generation due to changes in Arcade","State":"closed","Body":"Latest Arcade changes in https://github.com/dotnet/wpf/tree/darc-master-154bfb93-0564-405e-88b9-df2489fd6e99 caused ResX code generation to break.\r\n\r\nThis results in missing SR code files and is blocking DARC PRs.","Url":"https://github.com/dotnet/wpf/issues/662","RelatedDescription":"Closed issue \"Fix ResX code generation due to changes in Arcade\" (#662)"},{"Id":"441279595","IsPullRequest":false,"CreatedAt":"2019-05-07T14:55:45","Actor":"thomasclaudiushuber","Number":"661","RawContent":null,"Title":"XAML/Codebehind icons in VS2019 Solution Explorer are different: Framework vs. Core","State":"open","Body":"* .NET Core Version: 3.0 Preview5\r\n* Windows version: 18362.53\r\n* Does the bug reproduce also in WPF for .NET Framework 4.8?: It's a difference in solution explorer between Framework and Core. Maybe this bug is related to Visual Studio, or WPF integration in Visual Studio.\r\n \r\n **Problem description:**\r\nCreate a WPF project in VS2019 with .NET Core, and create one with .NET Framework. The icons for XAML files and Codebehind files look different\r\n \r\n **Actual behavior:** <!-- callstack for crashes / exceptions -->\r\nIt looks like this in VS2019 16.1 Preview 3. Note the different icons for XAML and C# files between the two WPF projects:\r\n\r\n<img src=\"https://user-images.githubusercontent.com/7116546/57309261-0deefb00-70e8-11e9-8919-014a50253090.png\" width=\"400\">\r\n\r\nIn VS2019 16.0.3 it looks like this:\r\n\r\n<img src=\"https://user-images.githubusercontent.com/7116546/57309724-daf93700-70e8-11e9-8b51-d4036d5cc422.png\" width=\"400\">\r\n\r\n\r\n  **Expected behavior:**\r\n Icons should be the same for WPF on Core and Framework\r\n\r\n \r\n","Url":"https://github.com/dotnet/wpf/issues/661","RelatedDescription":"Open issue \"XAML/Codebehind icons in VS2019 Solution Explorer are different: Framework vs. Core\" (#661)"},{"Id":"441217687","IsPullRequest":true,"CreatedAt":"2019-05-07T13:06:21","Actor":"dotnet-maestro[bot]","Number":"659","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190506.21\r\n- **Date Produced**: 5/7/2019 8:30 AM\r\n- **Commit**: 48eadb3e9ca663ab1064fd7575fde1da0c9baa24\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.0.0-preview6-27706-21\r\n\r\n## Coherency Updates\r\n\r\nThe following updates ensure that dependencies with a *CoherentParentDependency*\r\nattribute were produced in a build used as input to the parent dependency's build.\r\nSee [Dependency Description Format](https://github.com/dotnet/arcade/blob/master/Documentation/DependencyDescriptionFormat.md#dependency-description-overview)\r\n\r\n- **Microsoft.Win32.Registry** -> 4.6.0-preview6.19256.12 (parent: Microsoft.NETCore.App)\r\n- **System.CodeDom** -> 4.6.0-preview6.19256.12 (parent: Microsoft.NETCore.App)\r\n- **System.Configuration.ConfigurationManager** -> 4.6.0-preview6.19256.12 (parent: Microsoft.NETCore.App)\r\n- **System.Diagnostics.EventLog** -> 4.6.0-preview6.19256.12 (parent: Microsoft.NETCore.App)\r\n- **System.DirectoryServices** -> 4.6.0-preview6.19256.12 (parent: Microsoft.NETCore.App)\r\n- **System.Drawing.Common** -> 4.6.0-preview6.19256.12 (parent: Microsoft.NETCore.App)\r\n- **System.Reflection.Emit** -> 4.6.0-preview6.19256.12 (parent: Microsoft.NETCore.App)\r\n- **System.Reflection.MetadataLoadContext** -> 4.6.0-preview6.19256.12 (parent: Microsoft.NETCore.App)\r\n- **System.Security.AccessControl** -> 4.6.0-preview6.19256.12 (parent: Microsoft.NETCore.App)\r\n- **System.Security.Cryptography.Xml** -> 4.6.0-preview6.19256.12 (parent: Microsoft.NETCore.App)\r\n- **System.Security.Permissions** -> 4.6.0-preview6.19256.12 (parent: Microsoft.NETCore.App)\r\n- **System.Security.Principal.Windows** -> 4.6.0-preview6.19256.12 (parent: Microsoft.NETCore.App)\r\n- **System.Windows.Extensions** -> 4.6.0-preview6.19256.12 (parent: Microsoft.NETCore.App)\r\n- **Microsoft.NETCore.Platforms** -> 3.0.0-preview6.19256.12 (parent: Microsoft.NETCore.App)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/659","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#659)"},{"Id":"441217712","IsPullRequest":true,"CreatedAt":"2019-05-07T13:05:17","Actor":"stevenbrix","Number":"660","RawContent":null,"Title":"fix package location","State":"closed","Body":"adding the AvTrace directory, i didn't realize when i switched the directory structure around that these files were no longer being packaged in","Url":"https://github.com/dotnet/wpf/pull/660","RelatedDescription":"Closed or merged PR \"fix package location\" (#660)"},{"Id":"440844882","IsPullRequest":false,"CreatedAt":"2019-05-06T19:14:45","Actor":"gghart","Number":"658","RawContent":null,"Title":"WPF form doesn't render the same way in the vs2019 designer and at runtime","State":"open","Body":"* .NET Core Version: (e.g. 3.0 Preview1, or daily build number, use `dotnet --info`)\r\n* Windows version: (`winver`)\r\n* Does the bug reproduce also in WPF for .NET Framework 4.8?: Yes/No\r\n\r\n <!-- Read https://github.com/dotnet/wpf/blob/master/Documentation/issue-guide.md -->\r\n \r\n **Problem description:**\r\n \r\n **Actual behavior:** <!-- callstack for crashes / exceptions -->\r\n \r\n **Expected behavior:**\r\n \r\n **Minimal repro:**\r\n \r\n","Url":"https://github.com/dotnet/wpf/issues/658","RelatedDescription":"Open issue \"WPF form doesn't render the same way in the vs2019 designer and at runtime\" (#658)"},{"Id":"440683810","IsPullRequest":true,"CreatedAt":"2019-05-06T12:54:34","Actor":"dotnet-maestro[bot]","Number":"657","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190506.03\r\n- **Date Produced**: 5/6/2019 11:56 AM\r\n- **Commit**: 66f7e1a107eceab2767369588e7309747a0d71f7\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.0.0-preview6-27706-03\r\n\r\n## Coherency Updates\r\n\r\nThe following updates ensure that dependencies with a *CoherentParentDependency*\r\nattribute were produced in a build used as input to the parent dependency's build.\r\nSee [Dependency Description Format](https://github.com/dotnet/arcade/blob/master/Documentation/DependencyDescriptionFormat.md#dependency-description-overview)\r\n\r\n- **Microsoft.Win32.Registry** -> 4.6.0-preview6.19256.1 (parent: Microsoft.NETCore.App)\r\n- **System.CodeDom** -> 4.6.0-preview6.19256.1 (parent: Microsoft.NETCore.App)\r\n- **System.Configuration.ConfigurationManager** -> 4.6.0-preview6.19256.1 (parent: Microsoft.NETCore.App)\r\n- **System.Diagnostics.EventLog** -> 4.6.0-preview6.19256.1 (parent: Microsoft.NETCore.App)\r\n- **System.DirectoryServices** -> 4.6.0-preview6.19256.1 (parent: Microsoft.NETCore.App)\r\n- **System.Drawing.Common** -> 4.6.0-preview6.19256.1 (parent: Microsoft.NETCore.App)\r\n- **System.Reflection.Emit** -> 4.6.0-preview6.19256.1 (parent: Microsoft.NETCore.App)\r\n- **System.Reflection.MetadataLoadContext** -> 4.6.0-preview6.19256.1 (parent: Microsoft.NETCore.App)\r\n- **System.Security.AccessControl** -> 4.6.0-preview6.19256.1 (parent: Microsoft.NETCore.App)\r\n- **System.Security.Cryptography.Xml** -> 4.6.0-preview6.19256.1 (parent: Microsoft.NETCore.App)\r\n- **System.Security.Permissions** -> 4.6.0-preview6.19256.1 (parent: Microsoft.NETCore.App)\r\n- **System.Security.Principal.Windows** -> 4.6.0-preview6.19256.1 (parent: Microsoft.NETCore.App)\r\n- **System.Windows.Extensions** -> 4.6.0-preview6.19256.1 (parent: Microsoft.NETCore.App)\r\n- **Microsoft.NETCore.Platforms** -> 3.0.0-preview6.19256.1 (parent: Microsoft.NETCore.App)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/657","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#657)"},{"Id":"440627891","IsPullRequest":false,"CreatedAt":"2019-05-06T10:08:22","Actor":"okman523","Number":"656","RawContent":null,"Title":"Microsoft.WindowsDesktop.App could not be found","State":"open","Body":"* .NET Core Version: (e.g. 3.0 Preview1, or daily build number, use `dotnet --info`)\r\n* Windows version: (`winver`)\r\n* Does the bug reproduce also in WPF for .NET Framework 4.8?: Yes/No\r\n\r\n <!-- Read https://github.com/dotnet/wpf/blob/master/Documentation/issue-guide.md -->\r\n \r\n **Problem description:**\r\n Can the wpf project  (not self-contained)  run on a .net core runtime machine? The error message \"Microsoft.WindowsDesktop.App could not be found\" can only install .net core sdk?\r\n **Actual behavior:** <!-- callstack for crashes / exceptions -->\r\n \r\n **Expected behavior:**\r\n \r\n **Minimal repro:**\r\n \r\n","Url":"https://github.com/dotnet/wpf/issues/656","RelatedDescription":"Open issue \"Microsoft.WindowsDesktop.App could not be found\" (#656)"},{"Id":"440459196","IsPullRequest":false,"CreatedAt":"2019-05-05T15:49:23","Actor":"YohDeadfall","Number":"655","RawContent":null,"Title":"Add an markup extension to bind standard values of a type","State":"open","Body":"A long time ago I wrote [Enumerate](https://github.com/YohDeadfall/Enumerate) which is designed to provide standard values of any type if it supports it. It's used mostly for `enum`s, but as I said it isn't limited to them. And because WPF is open source now, I think it's time to make the markup extension built-in so everyone will be able to use out of the box.\r\n\r\n## Features\r\n\r\n1. Providing values of an `enum` as is.\r\n2. Providing values of an `enum` from `DescriptionAttribute`s.\r\n1. Providing values of any type whose `TypeConverter` returns the standard values via the `GetStandardValues` method.\r\n\r\n## Usage:\r\n\r\n```csharp\r\n\r\npublic enum ViewModelStatus\r\n{\r\n    [Description(\"Offen\")]\r\n    Open,\r\n    [Description(\"Geschlossen\")]\r\n    Closed,\r\n    [Description(\"In Arbeit\")]\r\n    InProgress\r\n}\r\n\r\npublic class ViewModel : INotifyPropertyChanged\r\n{\r\n    public ViewModelStatus Status { get; set; }\r\n}\r\n\r\n```\r\n\r\n```xaml\r\n<ComboBox ItemsSource=\"{e:Enumerate {x:Type local:ViewModelStatus}, Converter={StaticResource EnumToStringConverter}}\"\r\n          SelectedItem=\"{Binding Status, Converter={StaticResource EnumToStringConverter}}\" />\r\n<!-- ItemsSource will contain Offen, Geschlossen and In Arbeit -->\r\n```\r\n\r\n---\r\n\r\nRelated to #455.","Url":"https://github.com/dotnet/wpf/issues/655","RelatedDescription":"Open issue \"Add an markup extension to bind standard values of a type\" (#655)"},{"Id":"440440461","IsPullRequest":true,"CreatedAt":"2019-05-05T12:48:01","Actor":"dotnet-maestro[bot]","Number":"654","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190505.02\r\n- **Date Produced**: 5/5/2019 10:55 AM\r\n- **Commit**: 71ef9eea28230688230124e49e6967bf2e2bbfbd\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.0.0-preview6-27705-02\r\n\r\n## Coherency Updates\r\n\r\nThe following updates ensure that dependencies with a *CoherentParentDependency*\r\nattribute were produced in a build used as input to the parent dependency's build.\r\nSee [Dependency Description Format](https://github.com/dotnet/arcade/blob/master/Documentation/DependencyDescriptionFormat.md#dependency-description-overview)\r\n\r\n- **Microsoft.Win32.Registry** -> 4.6.0-preview6.19254.7 (parent: Microsoft.NETCore.App)\r\n- **System.CodeDom** -> 4.6.0-preview6.19254.7 (parent: Microsoft.NETCore.App)\r\n- **System.Configuration.ConfigurationManager** -> 4.6.0-preview6.19254.7 (parent: Microsoft.NETCore.App)\r\n- **System.Diagnostics.EventLog** -> 4.6.0-preview6.19254.7 (parent: Microsoft.NETCore.App)\r\n- **System.DirectoryServices** -> 4.6.0-preview6.19254.7 (parent: Microsoft.NETCore.App)\r\n- **System.Drawing.Common** -> 4.6.0-preview6.19254.7 (parent: Microsoft.NETCore.App)\r\n- **System.Reflection.Emit** -> 4.6.0-preview6.19254.7 (parent: Microsoft.NETCore.App)\r\n- **System.Reflection.MetadataLoadContext** -> 4.6.0-preview6.19254.7 (parent: Microsoft.NETCore.App)\r\n- **System.Security.AccessControl** -> 4.6.0-preview6.19254.7 (parent: Microsoft.NETCore.App)\r\n- **System.Security.Cryptography.Xml** -> 4.6.0-preview6.19254.7 (parent: Microsoft.NETCore.App)\r\n- **System.Security.Permissions** -> 4.6.0-preview6.19254.7 (parent: Microsoft.NETCore.App)\r\n- **System.Security.Principal.Windows** -> 4.6.0-preview6.19254.7 (parent: Microsoft.NETCore.App)\r\n- **System.Windows.Extensions** -> 4.6.0-preview6.19254.7 (parent: Microsoft.NETCore.App)\r\n- **Microsoft.NETCore.Platforms** -> 3.0.0-preview6.19254.7 (parent: Microsoft.NETCore.App)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/654","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#654)"},{"Id":"440181470","IsPullRequest":false,"CreatedAt":"2019-05-04T18:24:12","Actor":"vsfeedback","Number":"645","RawContent":null,"Title":"Generate wrong dependency property callback function ","State":"closed","Body":"1.New a WpfApp;\n2.In MainWindow class, use propdp+Tab to generate a dependency property;\ne.g.\n public int MyProperty\n        {\n            get { return (int)GetValue(MyPropertyProperty); }\n            set { SetValue(MyPropertyProperty, value); }\n        }\n\n        // Using a DependencyProperty as the backing store for MyProperty.  This enables animation, styling, binding, etc...\n        public static readonly DependencyProperty MyPropertyProperty =\n            DependencyProperty.Register(&quot;MyProperty&quot;, typeof(int), typeof(MainWindow), new FrameworkPropertyMetadata(0,FrameworkPropertyMetadataOptions.Inherits, OnMyPropertyChanged));\n\n3.mouse over &quot;OnMyPropertyChanged&quot; and generate method &quot;MainWindow.OnMyPropertyChanged&quot; by visual studio\n\n4.The method's return type and second's parameter type is wrong as :\n        private static object OnMyPropertyChanged( DependencyObject d, object baseValue)\n        {\n            throw new NotImplementedException();\n        }\n\nthe ture methos is :\n        private static void OnMyPropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs baseValue)\n        {\n            throw new NotImplementedException();\n        }\n\n\nthis problem also occurs in visual studio 2019 professional edition.\n\n_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/539816/generate-wrong-dependency-property-callback-functi.html\nVSTS ticketId: 851201_\n_These are the original issue comments:_\n\nVisual Studio Feedback System on 4/19/2019, 02:18 AM (14 days ago): <p>We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.</p>\n\n_These are the original issue solutions:_\n(no solutions)","Url":"https://github.com/dotnet/wpf/issues/645","RelatedDescription":"Closed issue \"Generate wrong dependency property callback function \" (#645)"},{"Id":"440156043","IsPullRequest":false,"CreatedAt":"2019-05-04T18:13:21","Actor":"robertborr","Number":"638","RawContent":null,"Title":"arcade sdk version issue build failures in 'official/dnceng/dotnet-wpf-int/refs/heads/master' - '20190503.7'","State":"closed","Body":"@dotnet-mc-bot commented on [Fri May 03 2019](https://github.com/dotnet/core-eng/issues/6212)\n\nThere were a set of failures during this build. Here is a summary of these:\r\n* https://dnceng.visualstudio.com/internal/_build/results?buildId=178128\r\n  - **Agent:** DDVSOWINAGE312\r\n  - **Error log:** C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Preview\\MSBuild\\Current\\Bin\\Microsoft.Common.CurrentVersion.targets(0,0): error MSB3243: No way to resolve conflict between \"WindowsBase, Version=4.8.0.0, Culture=neutral, Public...\r\n\r\n@robertborr\r\n\n\n","Url":"https://github.com/dotnet/wpf/issues/638","RelatedDescription":"Closed issue \"arcade sdk version issue build failures in 'official/dnceng/dotnet-wpf-int/refs/heads/master' - '20190503.7'\" (#638)"},{"Id":"440319268","IsPullRequest":true,"CreatedAt":"2019-05-04T12:48:24","Actor":"dotnet-maestro[bot]","Number":"653","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190503.17\r\n- **Date Produced**: 5/4/2019 3:46 AM\r\n- **Commit**: 9296c54f2c7e2944f47c400b6c0e3938844d9c2f\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.0.0-preview6-27703-17\r\n\r\n## Coherency Updates\r\n\r\nThe following updates ensure that dependencies with a *CoherentParentDependency*\r\nattribute were produced in a build used as input to the parent dependency's build.\r\nSee [Dependency Description Format](https://github.com/dotnet/arcade/blob/master/Documentation/DependencyDescriptionFormat.md#dependency-description-overview)\r\n\r\n- **Microsoft.Win32.Registry** -> 4.6.0-preview6.19253.8 (parent: Microsoft.NETCore.App)\r\n- **System.CodeDom** -> 4.6.0-preview6.19253.8 (parent: Microsoft.NETCore.App)\r\n- **System.Configuration.ConfigurationManager** -> 4.6.0-preview6.19253.8 (parent: Microsoft.NETCore.App)\r\n- **System.Diagnostics.EventLog** -> 4.6.0-preview6.19253.8 (parent: Microsoft.NETCore.App)\r\n- **System.DirectoryServices** -> 4.6.0-preview6.19253.8 (parent: Microsoft.NETCore.App)\r\n- **System.Drawing.Common** -> 4.6.0-preview6.19253.8 (parent: Microsoft.NETCore.App)\r\n- **System.Reflection.Emit** -> 4.6.0-preview6.19253.8 (parent: Microsoft.NETCore.App)\r\n- **System.Reflection.MetadataLoadContext** -> 4.6.0-preview6.19253.8 (parent: Microsoft.NETCore.App)\r\n- **System.Security.AccessControl** -> 4.6.0-preview6.19253.8 (parent: Microsoft.NETCore.App)\r\n- **System.Security.Cryptography.Xml** -> 4.6.0-preview6.19253.8 (parent: Microsoft.NETCore.App)\r\n- **System.Security.Permissions** -> 4.6.0-preview6.19253.8 (parent: Microsoft.NETCore.App)\r\n- **System.Security.Principal.Windows** -> 4.6.0-preview6.19253.8 (parent: Microsoft.NETCore.App)\r\n- **System.Windows.Extensions** -> 4.6.0-preview6.19253.8 (parent: Microsoft.NETCore.App)\r\n- **Microsoft.NETCore.Platforms** -> 3.0.0-preview6.19253.8 (parent: Microsoft.NETCore.App)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/653","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#653)"},{"Id":"440260026","IsPullRequest":false,"CreatedAt":"2019-05-04T00:05:53","Actor":"vatsan-madhavan","Number":"652","RawContent":null,"Title":"dotnet-wpf-int build failures","State":"closed","Body":"Recent builds in dotnet-wpf-int are continuing to fail. Needs investigation. ","Url":"https://github.com/dotnet/wpf/issues/652","RelatedDescription":"Closed issue \"dotnet-wpf-int build failures\" (#652)"},{"Id":"440212543","IsPullRequest":true,"CreatedAt":"2019-05-03T20:38:31","Actor":"dotnet-maestro[bot]","Number":"651","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190503.5\r\n- **Date Produced**: 5/3/2019 6:43 PM\r\n- **Commit**: ea85a3c52f75e198785848b93d5456c3c01b1c1a\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19253.5\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19253.5\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190503.8\r\n- **Date Produced**: 5/4/2019 2:00 AM\r\n- **Commit**: 4cacf7aa7b2cd8bdd042e721e6ad73d809dd5678\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19253.8\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19253.8\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190504.1\r\n- **Date Produced**: 5/4/2019 12:58 PM\r\n- **Commit**: 1b8589bbf53b9a5e819460798eff59830f39a3be\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19254.1\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19254.1\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190505.2\r\n- **Date Produced**: 5/5/2019 2:25 PM\r\n- **Commit**: 6a34948f7bdbc3ceb2fb16441b49f7748a462646\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19255.2\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19255.2\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190506.12\r\n- **Date Produced**: 5/7/2019 5:12 AM\r\n- **Commit**: c31fac9f6899094226cb5cd77c85b8f60ecafa3d\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19256.12\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19256.12\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/651","RelatedDescription":"Open PR \"[master] Update dependencies from dotnet/arcade\" (#651)"},{"Id":"440171965","IsPullRequest":true,"CreatedAt":"2019-05-03T19:53:29","Actor":"vatsan-madhavan","Number":"640","RawContent":null,"Title":"Fix build failures (issue #638) and remove private C++ toolset workaround","State":"closed","Body":"- Fixes build break by changing when `LimitNetCoreAppReferences` runs\r\n- Removes dependence on private C++/CLI tooling in favor of tools that are now present in Dev16.1 P2 builds (that are already on our build servers)\r\n- Add a workaround in tests for a type missing from System.Runtime","Url":"https://github.com/dotnet/wpf/pull/640","RelatedDescription":"Closed or merged PR \"Fix build failures (issue #638) and remove private C++ toolset workaround\" (#640)"},{"Id":"440186009","IsPullRequest":false,"CreatedAt":"2019-05-03T19:21:20","Actor":"vsfeedback","Number":"650","RawContent":null,"Title":"RichTextBox does not display numeric multilevel lists (1.1, 1.2, 1.2.1 etc) in rtf files correctly.","State":"open","Body":"When you load the attached &quot;example.rtf&quot; file into a System.Windows.Control.RichTextBox using richTextBox.Selection.Load(File.OpenRead(&quot;..\\\\..\\\\example.rtf&quot;), DataFormats.Rtf); the multilevel numeric list is not displayed correctly. The Major numbers of the list items are missing. See &quot;RichTextBoxNumericListsError.PNG&quot; for an example.\n\nHowever, the System.Windows.Forms.RichTextBox correctly displays the list item numbering. See &quot;FormsRichTextBoxCorrect.PNG&quot; for an example.\n\n_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/491250/richtextbox-does-not-display-numeric-multilevel-li.html\nVSTS ticketId: 821847_\n_These are the original issue comments:_\n\nVisual Studio Feedback System on 3/17/2019, 11:59 PM (46 days ago): <p>We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.</p>\n\n_These are the original issue solutions:_\n(no solutions)","Url":"https://github.com/dotnet/wpf/issues/650","RelatedDescription":"Open issue \"RichTextBox does not display numeric multilevel lists (1.1, 1.2, 1.2.1 etc) in rtf files correctly.\" (#650)"},{"Id":"440183803","IsPullRequest":false,"CreatedAt":"2019-05-03T19:15:06","Actor":"vsfeedback","Number":"649","RawContent":null,"Title":"ElementHost Null Reference Exception in ProcessCmdKey","State":"open","Body":"I am using WindowsFormsIntegration.dll version 4.8.3752.0 and getting a Null Ref Exception in the ElementHost.cs. I included a simple solution which reproduces this bug in the attached Zip file.\n\nIf you look at my attachment of the decompiled source (processcmdkey.png) I will explain what happens:\n\nI have an ElementHost which is contained on a Winform Container Control in a Winforms Application. The ElementHost contains a WPF UserControl so it looks something like this:\n\nWinformsApplication\n   ContainerControl\n      ElementHost\n         Wpf.UserControl\n\nIf I press the ESC key, ProcessCmdKey is called on the ElementHost. When ProcessCmdKey gets to line 369, it allows the key press to be processed by the application. The ESC key is caught by the Cancel Button on the Wpf.UserControl which calls Dispose on the ContainerControl, which also Disposes of the ElementHost.\n\nProcessCmdKey then goes on to line 370 and throws an exception because _hostContainerInternal is now NULL because the ElementHost was disposed.\n\n_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/553929/elementhost-null-reference-exception-in-processcmd.html\nVSTS ticketId: 860777_\n_These are the original issue comments:_\n\nVisual Studio Feedback System on 5/1/2019, 09:57 PM (38 hours ago): We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.\n\n_These are the original issue solutions:_\n(no solutions)","Url":"https://github.com/dotnet/wpf/issues/649","RelatedDescription":"Open issue \"ElementHost Null Reference Exception in ProcessCmdKey\" (#649)"},{"Id":"440183446","IsPullRequest":false,"CreatedAt":"2019-05-03T19:14:08","Actor":"vsfeedback","Number":"648","RawContent":null,"Title":"Error:  Element does not exist or it is virtualized; use VirtualizedItem Pattern","State":"open","Body":"<p>Below error pops up while running an application when a tree control is visible although it is not an automation application/code. This happens on Windows 10 with .NET 4.6.2. The code has been running fine for years and suddenly started showing this error. Is there any windows update fix for this?</p> <p></p><p>Error  Unhandled Exception System.Windows.Automation.ElementNotAvailableException: Element does not exist or it is virtualized; use VirtualizedItem Pattern if it is supported.\n   at System.Windows.Automation.Peers.ItemAutomationPeer.ThrowElementNotAvailableException()\n   at System.Windows.Automation.Peers.ItemAutomationPeer.GetItemStatusCore()\n   at System.Windows.Automation.Peers.AutomationPeer.UpdateSubtree()\n   at System.Windows.Automation.Peers.AutomationPeer.UpdateSubtree()\n   at System.Windows.Automation.Peers.AutomationPeer.UpdatePeer(Object arg)\n   at System.Windows.Threading.ExceptionWrapper.InternalRealCall(Delegate callback, Object args, Int32 numArgs)\n   at System.Windows.Threading.ExceptionWrapper.TryCatchWhen(Object source, Delegate callback, Object args, Int32 numArgs, Delegate catchHandler)\n   at System.Windows.Threading.DispatcherOperation.InvokeImpl()\n   at System.Windows.Threading.DispatcherOperation.InvokeInSecurityContext(Object state)\n   at MS. Internal.CulturePreservingExecutionContext.CallbackWrapper(Object obj)\n   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx)\n   at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx)\n   at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state)\n   at MS. Internal.CulturePreservingExecutionContext.Run(CulturePreservingExecutionContext executionContext, ContextCallback callback, Object state)\n   at System.Windows.Threading.DispatcherOperation.Invoke()\n   at System.Windows.Threading.Dispatcher.ProcessQueue()\n   at System.Windows.Threading.Dispatcher.WndProcHook(IntPtr hwnd, Int32 msg, IntPtr wParam, IntPtr lParam, Boolean&amp; handled)\n   at MS. Win32.HwndWrapper.WndProc(IntPtr hwnd, Int32 msg, IntPtr wParam, IntPtr lParam, Boolean&amp; handled)\n   at MS. Win32.HwndSubclass.DispatcherCallbackOperation(Object o)\n   at System.Windows.Threading.ExceptionWrapper.InternalRealCall(Delegate callback, Object args, Int32 numArgs)\n   at System.Windows.Threading.ExceptionWrapper.TryCatchWhen(Object source, Delegate callback, Object args, Int32 numArgs, Delegate catchHandler)\n   at System.Windows.Threading.Dispatcher.LegacyInvokeImpl(DispatcherPriority priority, TimeSpan timeout, Delegate method, Object args, Int32 numArgs)\n   at MS. Win32.HwndSubclass.SubclassWndProc(IntPtr hwnd, Int32 msg, IntPtr wParam, IntPtr lParam)\n   at MS. Win32.UnsafeNativeMethods.DispatchMessage(MSG&amp; msg)\n   at System.Windows.Threading.Dispatcher.PushFrameImpl(DispatcherFrame frame)\n   at System.Windows.Threading.Dispatcher.PushFrame(DispatcherFrame frame)\n   at System.Windows.Application.RunDispatcher(Object ignore)\n   at System.Windows.Application.RunInternal(Window window)\n   at System.Windows.Application.Run(Window window)    </p>\n\n_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/547510/error-element-does-not-exist-or-it-is-virtualized.html\nVSTS ticketId: 856107_\n_These are the original issue comments:_\n\nVisual Studio Feedback System on 4/25/2019, 11:17 PM (7 days ago): <p>We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.</p>\n\n_These are the original issue solutions:_\n(no solutions)","Url":"https://github.com/dotnet/wpf/issues/648","RelatedDescription":"Open issue \"Error:  Element does not exist or it is virtualized; use VirtualizedItem Pattern\" (#648)"},{"Id":"440182967","IsPullRequest":false,"CreatedAt":"2019-05-03T19:12:52","Actor":"vsfeedback","Number":"647","RawContent":null,"Title":"Invalid syntax inside Ribbon control templates - Binding=\"{Binding (0)}\"","State":"open","Body":"<p>Here's an apparent bug which I've just ran into myself and then found a reference to on Stack Overflow:</p><p>See https://stackoverflow.com/a/21880114/3195477 and https://stackoverflow.com/a/39002469/3195477</p><p>Summary:</p><pre>I found this:\n&lt;DataTriggerValue=&quot;True&quot;Binding=&quot;{Binding (0)}&quot;&gt;\n\ntriggers in RibbonMenuButton template. What does it mean?\n\n...\n\n\nThe issue is that in the standard ribbon templates there are many wrong placeholders\n&lt;ConditionBinding=&quot;{Binding (0)}&quot;Value=&quot;True&quot;/&gt;\n\nLong story short, you need to change the above into, for example:\n&lt;ConditionBinding=&quot;{Binding Zero }&quot;Value=&quot;True&quot;/&gt;</pre><p>This was reported once in the past <a href=\"http://connect.microsoft.com/VisualStudio/feedback/details/794891/problems-styling-wpf-4-5-ribbon-control\" target=_blank>on Microsoft Connect</a>, but apparently never fixed. <a href=\"https://web.archive.org/web/20140304055137/http://connect.microsoft.com/VisualStudio/feedback/details/794891/problems-styling-wpf-4-5-ribbon-control\" target=_blank>Here's an archive of that page</a>. The download provided by Microsoft on that page seems to be no longer accessible.</p>\n\n_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/545784/invalid-syntax-inside-ribbon-control-templates-bin.html\nVSTS ticketId: 855260_\n_These are the original issue comments:_\n\nVisual Studio Feedback System on 4/24/2019, 08:02 PM (8 days ago): <p>We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.</p>\n\nDave Hollman on 4/25/2019, 04:31 AM (8 days ago): <p>Here's another Stack Overflow post reporting what seems to be the same problem:</p><p><a target='_blank' href=\"https://stackoverflow.com/questions/36350664/error-in-nested-ribbonapplicationmenuitem\">https://stackoverflow.com/questions/36350664/error-in-nested-ribbonapplicationmenuitem</a></p>\n\n_These are the original issue solutions:_\n(no solutions)","Url":"https://github.com/dotnet/wpf/issues/647","RelatedDescription":"Open issue \"Invalid syntax inside Ribbon control templates - Binding=\"{Binding (0)}\"\" (#647)"},{"Id":"440182872","IsPullRequest":false,"CreatedAt":"2019-05-03T19:12:36","Actor":"vsfeedback","Number":"646","RawContent":null,"Title":"Disappearing horizontal or vertical lines in WPF","State":"open","Body":"VSF_TYPE_MARKDOWNI face the problem that lines that are exactly horizontal or vertical disappear while painted to a canvas when they are\n* too long while being\n* too thin.\n\nThis problem/limitation has already been reported by other users (https://stackoverflow.com/questions/13731593/horizontal-or-vertical-wpf-lines-limited-to-125-000-pixels).\n\nIs there any known fix (other that dividing the line into multiple &quot;sublines&quot; or shifting start or end point a bit for that it is not longer vertical/horizontal) to this issue?\n\n_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/545317/disappearing-horizontal-or-vertical-lines-in-wpf.html\nVSTS ticketId: 855023_\n_These are the original issue comments:_\n\nVisual Studio Feedback System on 4/24/2019, 08:01 PM (8 days ago): <p>We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.</p>\n\n_These are the original issue solutions:_\n(no solutions)","Url":"https://github.com/dotnet/wpf/issues/646","RelatedDescription":"Open issue \"Disappearing horizontal or vertical lines in WPF\" (#646)"},{"Id":"440181404","IsPullRequest":false,"CreatedAt":"2019-05-03T19:08:26","Actor":"vsfeedback","Number":"644","RawContent":null,"Title":"A WPF rectangle will render with zero size when Stretch = None","State":"open","Body":"<p>I just ran into this problem and also found an existing post on SO asking about the same issue.</p><p>Summary:</p><p>The Rectangle's Stretch property when setting it to NONE ... According to MSDN, the definition for this value is &quot;The content preserves its original size.&quot; Look at the code below. When I set Stretch = NONE on the rectangle, it disappears.</p><p>Someone looked at the Rectangle ArrangeOverride method which has this key section:</p><pre>&lt;code&gt;caseStretch.None:         </pre>\n{             this._rect.Width=(this._rect.Height=0.0);             break;         }    <p>(sorry for the bad formatting, I can't get it to paste neatly)</p><p>So it seems that when Stretch is None there is only empty rectangle. This doesn't seem to make sense.</p><p>The SO post I mentioned is: <a href=\"https://stackoverflow.com/questions/5822662/rectangle-stretch-property-behavior\">https://stackoverflow.com/questions/5822662/rectangle-stretch-property-behavior</a></p>\n\n_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/538676/a-wpf-rectangle-will-render-with-zero-size-when-st.html\nVSTS ticketId: 850101_\n_These are the original issue comments:_\n\nVisual Studio Feedback System on 4/18/2019, 08:33 PM (14 days ago): <p>We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.</p>\n\n_These are the original issue solutions:_\n(no solutions)","Url":"https://github.com/dotnet/wpf/issues/644","RelatedDescription":"Open issue \"A WPF rectangle will render with zero size when Stretch = None\" (#644)"},{"Id":"440181313","IsPullRequest":false,"CreatedAt":"2019-05-03T19:08:13","Actor":"vsfeedback","Number":"643","RawContent":null,"Title":"The PathGeometry filling fails when its transformation is modified","State":"open","Body":"<p>Hello Microsoft Support,<br>I've created a simple filled rectangle using LineSegment and PathGeometry objects, rendering it using a DrawingVisual object into a FrameworkElement container. At creation everything works well, but as soon as the transformation matrix is changed, the rectangle loses its filling.<br>I've attached a complete solution that show the problem: naturally it is very simple while we use more <a href=\"https://developercommunityapi.westus.cloudapp.azure.com/storage/attachments/68780-pathgeometryfillfailed.zip\">pathgeometryfillfailed.zip</a>complicated figures using also curves applying to it zoom and pan features.<br>Let me point out, that this issue is very serious for us because it doesn't allows to go on in our work.<br>Thank you in advance.<br>Best regards,</p><p>Simone</p>\n\n_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/535529/the-pathgeometry-filling-fails-when-its-transforma-2.html\nVSTS ticketId: 848623_\n_These are the original issue comments:_\n\nVisual Studio Feedback System on 4/16/2019, 08:27 PM (16 days ago): <p>We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.</p>\n\n_These are the original issue solutions:_\n(no solutions)","Url":"https://github.com/dotnet/wpf/issues/643","RelatedDescription":"Open issue \"The PathGeometry filling fails when its transformation is modified\" (#643)"},{"Id":"440181079","IsPullRequest":false,"CreatedAt":"2019-05-03T19:07:31","Actor":"vsfeedback","Number":"642","RawContent":null,"Title":"Hit test fails if mouse is over a text object","State":"open","Body":"<p>Hello Microsoft Support,</p><p>I've drawn a text by a DrawingVisual object, but the hit test fails when the mouse pointer is on it. For hit testing I'm using a GeometryHitTestParameters and EllipseGeometry objects. I've notice that if I use a PointHitTestParameters object, so all works well.</p><p>I've attached a complete solution that show the problem. Let me point out, that this issue is very serious for us because it doesn't allows to go on in our work.<br>Thank you in advance.<br>Best regards,<br><br>Simone</p>\n\n_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/533445/hit-test-fails-if-mouse-is-over-a-text-object.html\nVSTS ticketId: 847713_\n_These are the original issue comments:_\n\nVisual Studio Feedback System on 4/15/2019, 07:36 PM (17 days ago): <p>We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.</p>\n\nJeff Schwartz [MSFT] on 4/16/2019, 04:20 PM (16 days ago): <p>Thanks for sharing feedback <a rel=\"user\" href=\"https://developercommunity.visualstudio.com/users/86125/82408540-96cb-425a-a759-0107c4e509f6.html\" nodeid=\"86125\">@Simone Padovan</a>.  Can you elaborate more on what is not happening that you would expect?</p><p>In the attached sample I am seeing the proper events fire and callbacks fire (by setting break points and mousing over the text block).  Thanks</p>\n\nJeff Schwartz [MSFT] on 4/17/2019, 02:49 PM (15 days ago): <p>Thanks for the details.  I am going to route to the WPF team.</p>\n\n_These are the original issue solutions:_\n\nSimone Padovan solved on 4/17/2019, 10:14 AM (16 days ago), 0 votes: \n<p>Hello Jeff,</p>\n<p>thank you for the answer. Sorry, I was unclear. Actually the HitTestCallback is called, because it is a consequence of the VisualTreeHelper.HitTest (RenderingHost.cs file line 34) method call from the mouse move event handler. <strong>But the interesting point</strong> is that the found object isn't the DrawingVisual of the text but it is the RenderingHost parent. The evidence is that you aren't able to see the &quot;Entity found !!&quot; message box. This occurs because the VisualTreeHelper.HitTest is called by passing a GeometryHitTestParameters as fourth parameter. Instead if you use a PointHitTestParameters you will see the message. The code is ready: simply comment/uncomment the 33 and 34 lines in the RenderingHost.cs file. Let me point out, that this issue is linked to the matrix transform at line 34 in the MainWindow.xaml.cs file: in fact if you comment it and the 37 line, the text is recognized and you will see the &quot;Entity found !!&quot; message box.</p>\n<p>I think that this issue is linked to my other bug report <a target=\"_blank\">The PathGeometry filling fails…</a> just that the point is the area painting but the problem source is the matrix: It would be great if you solve two problems at once.</p>\n<p>Thank you in advance.</p>\n<p>Regards,</p>\n<p>Simone</p> \n","Url":"https://github.com/dotnet/wpf/issues/642","RelatedDescription":"Open issue \"Hit test fails if mouse is over a text object\" (#642)"},{"Id":"440178470","IsPullRequest":false,"CreatedAt":"2019-05-03T19:00:04","Actor":"vsfeedback","Number":"641","RawContent":null,"Title":"Narrator ignores IsCheckable on RibbonMenuButtonItem","State":"open","Body":"<p>Expected:</p><p>If you set IsCheckable=false, the menu item should not be read in Narrator as checked or un-checked.</p><p>Actual: </p><p>No matter how IsCheckable is set, Narrator interprets RibbonMenuButtonItems as checkable controls and tries to read them accordingly.  </p><p>Repro:</p><p>Here’s a xaml sample that will exhibit the issue in\nNarrator:</p><p>&lt;Window x:Class=&quot;RibbonBug.MainWindow&quot;</p><p> xmlns=&quot;<a href=\"https://nam06.safelinks.protection.outlook.com/?url=http://schemas.microsoft.com/winfx/2006/xaml/presentation&amp;data=04%7c01%7cChris.Sires%40microsoft.com%7c219b2370283d4d59c91408d69071900c%7c72f988bf86f141af91ab2d7cd011db47%7c1%7c0%7c636855215066474038%7cUnknown%7cTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7c-1&amp;sdata=PAasQVsCWK8bI1A/57xntBvRXtG52XMj2Fs%2BGO80kuk%3D&amp;reserved=0\">http://schemas.microsoft.com/winfx/2006/xaml/presentation</a>&quot;</p><p> xmlns:x=&quot;<a href=\"https://nam06.safelinks.protection.outlook.com/?url=http://schemas.microsoft.com/winfx/2006/xaml&amp;data=04%7c01%7cChris.Sires%40microsoft.com%7c219b2370283d4d59c91408d69071900c%7c72f988bf86f141af91ab2d7cd011db47%7c1%7c0%7c636855215066484046%7cUnknown%7cTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7c-1&amp;sdata=e1F2pjph5hn96Lw9ZYqk7fVB7U7cZwS0/clgJSFrY0k%3D&amp;reserved=0\">http://schemas.microsoft.com/winfx/2006/xaml</a>&quot;</p><p> xmlns:d=&quot;<a href=\"https://nam06.safelinks.protection.outlook.com/?url=http://schemas.microsoft.com/expression/blend/2008&amp;data=04%7c01%7cChris.Sires%40microsoft.com%7c219b2370283d4d59c91408d69071900c%7c72f988bf86f141af91ab2d7cd011db47%7c1%7c0%7c636855215066494054%7cUnknown%7cTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7c-1&amp;sdata=itcYEd7%2By4hto3QmKwP4BXSw4zP59qJUvtsBUjCDLwA%3D&amp;reserved=0\">http://schemas.microsoft.com/expression/blend/2008</a>&quot;</p><p> xmlns:mc=&quot;<a href=\"https://nam06.safelinks.protection.outlook.com/?url=http://schemas.openxmlformats.org/markup-compatibility/2006&amp;data=04%7c01%7cChris.Sires%40microsoft.com%7c219b2370283d4d59c91408d69071900c%7c72f988bf86f141af91ab2d7cd011db47%7c1%7c0%7c636855215066524083%7cUnknown%7cTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7c-1&amp;sdata=5t%2BiLellbX6vVv%2ByvYBn%2B1ICEyfQCY4A5wYxoBKKMs8%3D&amp;reserved=0\">http://schemas.openxmlformats.org/markup-compatibility/2006</a>&quot;</p><p> xmlns:local=&quot;clr-namespace:RibbonBug&quot;</p><p> mc:Ignorable=&quot;d&quot;</p><p> Title=&quot;MainWindow&quot; Height=&quot;450&quot; Width=&quot;800&quot;&gt;</p><p>&lt;Grid&gt;</p><p>&lt;Ribbon Title=&quot;Ribbon\nTitle&quot;&gt;</p><p>&lt;RibbonMenuButton Label=&quot;RibbonMenuButton\nLabel&quot;&gt;</p><p>&lt;!--\nbug: IsCheckable has no effect on Narrator's output the item is still checked\nor unchecked --&gt;</p><p>&lt;RibbonMenuItem IsCheckable=&quot;False&quot; Header=&quot;RibbonMenuButtonItem\nHeader&quot; /&gt;</p><p>&lt;/RibbonMenuButton&gt;</p><p>&lt;/Ribbon&gt;</p><p>&lt;/Grid&gt;</p><p>&lt;/Window&gt;</p>\n\n_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/451536/narrator-ignores-ischeckable-on-ribbonmenubuttonit.html\nVSTS ticketId: 790539_\n_These are the original issue comments:_\n\nVisual Studio Feedback System on 2/12/2019, 07:10 PM (79 days ago): <p>We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.</p>\n\n_These are the original issue solutions:_\n(no solutions)","Url":"https://github.com/dotnet/wpf/issues/641","RelatedDescription":"Open issue \"Narrator ignores IsCheckable on RibbonMenuButtonItem\" (#641)"},{"Id":"440156058","IsPullRequest":false,"CreatedAt":"2019-05-03T17:59:23","Actor":"robertborr","Number":"639","RawContent":null,"Title":"arcade sdk version issue build failures in 'official/dnceng/dotnet-wpf-int/refs/heads/master' - '20190503.7'","State":"closed","Body":"@dotnet-mc-bot commented on [Fri May 03 2019](https://github.com/dotnet/core-eng/issues/6212)\n\nThere were a set of failures during this build. Here is a summary of these:\r\n* https://dnceng.visualstudio.com/internal/_build/results?buildId=178128\r\n  - **Agent:** DDVSOWINAGE312\r\n  - **Error log:** C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Preview\\MSBuild\\Current\\Bin\\Microsoft.Common.CurrentVersion.targets(0,0): error MSB3243: No way to resolve conflict between \"WindowsBase, Version=4.8.0.0, Culture=neutral, Public...\r\n\r\n@robertborr\r\n\n\n","Url":"https://github.com/dotnet/wpf/issues/639","RelatedDescription":"Closed issue \"arcade sdk version issue build failures in 'official/dnceng/dotnet-wpf-int/refs/heads/master' - '20190503.7'\" (#639)"},{"Id":"440143616","IsPullRequest":true,"CreatedAt":"2019-05-03T17:24:45","Actor":"stevenbrix","Number":"637","RawContent":null,"Title":"Adding initial helix support ","State":"open","Body":"### Testing in Helix\r\nThis PR enables running our DRT tests on Helix. I'd recommend seeing the official Helix [readme](https://github.com/dotnet/arcade/blob/master/src/Microsoft.DotNet.Helix/Sdk/Readme.md) if you are interested in some of the general Helix concepts. I'll briefly outline what we are doing that is a bit unique:\r\n\r\n**NOTE**: The DRTs aren't currently running, as we are still waiting on the package to be published to a feed. But I have validated that locally I am able to reference a locally hand-crafted `Microsoft.DotNet.Wpf.DncEng.Test` package and run tests out of it. \r\n\r\n1. Helix has built-in support for running xUnit tests. Since we are not using xUnit, we have to manually setup our machines so that they work with QualityVault and STI.\r\n2. We manually restore the `helixpublish.proj` project during CI builds. This allows us to package reference the `Microsoft.DotNet.Wpf.DncEng.Test` package to pull down the binaries that we need. We can extract them into a local folder using the MSBuild property `RestorePackagesPath`, so that when the project is restored, we know the exact relative location of the packages.\r\n3. We need to create a \"TestHost\" installation of dotnet on the Helix machine. The default Helix support for installing dotnet only installs version 2.x, and only installs the `Microsoft.NETCore.App` runtime, and not the `Microsoft.WindowsDesktop.App` or `Microsoft.AspNetCore.App` runtimes. I opted to doing this manually and copy it out of the `.dotnet` folder that gets created as part of ci builds, rather than running an installer on the Helix machine. I figured reducing the number of dependencies on making external network calls and downloading items from the internet the better.\r\n4. We copy both the nuget packages we care care about and the dotnet install in the `prepare-helix-payload.ps1` script. This gets invoked before we actually run tests. Helix allows you to specify a `HelixCorrelationPayload` directory, where this directory gets deployed to the Helix machine, and is made available in your various helix commands with the `HELIX_CORRELATION_PAYLOAD` environment variable.\r\n5. Helix and Azure Pipelines can report xUnit logs, so we will be updating QualityVault to produce an xUnit compatible log. We will then need to copy that log to a known location for it to be picked up.\r\n\r\n### How we are running tests\r\n1. Currently, the `HelixQueues` that we selected are Windows.10.Amd64.Open;Windows.7.Amd64.Open;Windows.10.Amd64.ServerRS5.Open. Essentially, this translates to: \"Latest Windows 10\", \"Windows 7\", and \"Windows 10 RS5 Server\" addition. I felt this enables tests to run on some of the most interesting and important SKUs, including Windows Server, without overloading the Helix servers and/or making CI runs take an unnecessarily long time to run. I decided to peg the Windows Server to a particular OS build, because I felt it added a little more variety than always testing latest Windows Client and latest Windows Server. These decisions are of course up for discussion and aren't set in stone.\r\n2. In similar vain, we only run test passes for Release builds, mainly to save time and resources running duplicate tests in a near-identical environment. If we'd rather run Debug tests so that we can catch asserts in our CI gates, I'm open to that as well.","Url":"https://github.com/dotnet/wpf/pull/637","RelatedDescription":"Open PR \"Adding initial helix support \" (#637)"},{"Id":"440016226","IsPullRequest":true,"CreatedAt":"2019-05-03T12:16:49","Actor":"dotnet-maestro[bot]","Number":"636","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190502.2\r\n- **Date Produced**: 5/2/2019 7:00 PM\r\n- **Commit**: ed63a7faf2d119829dd971be91bb46b6ebaa1dd2\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19252.2\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19252.2\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/636","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#636)"},{"Id":"439556709","IsPullRequest":true,"CreatedAt":"2019-05-02T12:16:20","Actor":"dotnet-maestro[bot]","Number":"635","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190501.6\r\n- **Date Produced**: 5/2/2019 7:15 AM\r\n- **Commit**: ea9b2530a1559dd6426730aba52fca1924db2b65\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19251.6\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19251.6\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/635","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#635)"}],"ResultType":"GitHubIssue"}},"RunOn":"2019-05-08T05:30:52.9849987Z","RunDurationInMilliseconds":655}