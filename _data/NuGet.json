{"Data":{"Blog":{"FeedItems":[{"Title":"Deprecating packages on nuget.org","PublishedOn":"2019-09-30T18:29:23+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We are excited to announce that nuget.org now supports package deprecation. This has been a long standing ask that will help the ecosystem use supported packages. As a package publisher on nuget.org,...","Href":"https://devblogs.microsoft.com/nuget/deprecating-packages-on-nuget-org/","RawContent":null},{"Title":"New and improved NuGet Search is here!","PublishedOn":"2019-08-23T03:31:26+00:00","CommentsCount":11,"FacebookCount":0,"Summary":"Itâ€™s been a long time coming, and today we are excited to announce the new and improved search on NuGet.org leveraging Azure Search. We want to start this post with a huge thanks to you, the NuGet...","Href":"https://devblogs.microsoft.com/nuget/new-and-improved-nuget-search/","RawContent":null},{"Title":"Surfacing GitHub Usage for packages on NuGet.org","PublishedOn":"2019-07-17T20:00:23+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"There are several criteria you can use today to evaluate NuGet packages. We received feedback that you would like even more information to help choose the right packages. We&#8217;re excited to...","Href":"https://devblogs.microsoft.com/nuget/surfacing-github-usage-for-packages-on-nuget-org/","RawContent":null},{"Title":"NuGet Spring 2019 Roadmap","PublishedOn":"2019-04-10T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We published our last NuGet roadmap in June last year. Many of the features announced were major additions to NuGet and we have been hard at work to implement those over the last few months. In this...","Href":"https://devblogs.microsoft.com/nuget/nuget-spring-2019-roadmap/","RawContent":null},{"Title":"Enable repeatable package restores using a lock file","PublishedOn":"2018-12-17T08:00:00+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"With PackageReference, NuGet always tries to produce the same closure of package dependencies if the input package reference list has not changed. However, there are a few scenarios where it may not...","Href":"https://devblogs.microsoft.com/nuget/enable-repeatable-package-restores-using-a-lock-file/","RawContent":null},{"Title":"Lock down your dependencies using configurable trust policies","PublishedOn":"2018-12-05T08:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"For the past several months we have focused on various features to improve package security and trust. Around a year back, we had announced our plans on various signing functionalities that we have...","Href":"https://devblogs.microsoft.com/nuget/lock-down-your-dependencies-using-configurable-trust-policies/","RawContent":null},{"Title":"Improved package debugging experience with the NuGet.org symbol server","PublishedOn":"2018-11-16T08:00:00+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Starting today, you can publish symbol packages to the NuGet.org symbol server. With NuGet.org as a single service provider for libraries and symbols, package authors and consumers will have a...","Href":"https://devblogs.microsoft.com/nuget/improved-package-debugging-experience-with-the-nuget-org-symbol-server/","RawContent":null},{"Title":"Introducing Source Code Link for NuGet packages","PublishedOn":"2018-08-27T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"NuGet.org now supports surfacing source code repository link for NuGet packages. This will enable package authors to surface both the project&#8217;s website and the source repository using the...","Href":"https://devblogs.microsoft.com/nuget/introducing-source-code-link-for-nuget-packages/","RawContent":null},{"Title":"NuGet.org starts repo-signing packages","PublishedOn":"2018-08-10T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"In May, we implemented Stage 1 and enabled support for any NuGet.org user to submit signed packages to NuGet.org. Today, we are announcing Stage 2 of our NuGet package signing journey &#8211; tamper...","Href":"https://devblogs.microsoft.com/nuget/introducing-repository-signatures/","RawContent":null},{"Title":"NuGet Summer 2018 Roadmap","PublishedOn":"2018-07-02T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"This blog post provides insights into the NuGet team plans for the upcoming quarter (July &#8211; Sep 2018). In the March 2018 NuGet Spring 2018 Roadmap, we had outlined Package Signing,...","Href":"https://devblogs.microsoft.com/nuget/nuget-summer-2018-roadmap/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"10857589227","Type":"IssuesEvent","CreatedAt":"2019-11-13T23:24:32","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7694","RelatedDescription":"Closed issue \"Auxiliary2AzureSearch is stuck on PROD due to too many download count decreases\" (#7694) at NuGet/NuGetGallery","RelatedBody":"The limit of download count decreases is 15,000 today (the previous highest we saw was in the 10K-15K range. There are now 27,766 decreases.\r\n\r\nRoot cause is unknown but perhaps the downloads.v1.json file was generated during a very large roll-up.\r\n\r\n/cc @scottbommarito who is on-call.\r\n\r\nRelease: [508048](https://devdiv.visualstudio.com/DevDiv/_releaseProgress?_a=release-pipeline-progress&releaseId=508048)"},{"Id":"10856985197","Type":"IssuesEvent","CreatedAt":"2019-11-13T21:49:36","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7696","RelatedDescription":"Closed issue \"Package \"gfi.ch.common.client\" appears in registration but it is deleted\" (#7696) at NuGet/NuGetGallery","RelatedBody":"Package ID: gfi.ch.common.client\r\n\r\nI think this is because of this bug: https://github.com/NuGet/NuGetGallery/issues/7680\r\n\r\nGallery (404):\r\nhttps://www.nuget.org/packages/gfi.ch.common.client\r\n\r\nRegistration (200, just version 0.0.9):\r\nhttps://api.nuget.org/v3/registration4-gz-semver2/gfi.ch.common.client/index.json\r\n\r\nThe index.txt from lightning probably had something like that:\r\n\r\n<details>\r\n<pre>\r\nElement@28557. Gfi.ch.Common.Client\r\nhttps://api.nuget.org/v3/catalog0/data/2016.04.05.20.15.30/gfi.ch.common.client.0.0.1.json\r\nhttps://api.nuget.org/v3/catalog0/data/2016.04.05.20.15.30/gfi.ch.common.client.0.0.2.json\r\nhttps://api.nuget.org/v3/catalog0/data/2016.04.05.18.51.22/gfi.ch.common.client.0.0.9.1.json\r\nhttps://api.nuget.org/v3/catalog0/data/2016.04.05.20.15.30/gfi.ch.common.client.0.0.3.0.json\r\nhttps://api.nuget.org/v3/catalog0/data/2016.04.05.20.15.30/gfi.ch.common.client.0.0.4.0.json\r\nhttps://api.nuget.org/v3/catalog0/data/2016.04.05.20.15.30/gfi.ch.common.client.0.0.5.0.json\r\nhttps://api.nuget.org/v3/catalog0/data/2016.04.05.20.15.30/gfi.ch.common.client.0.0.6.0.json\r\nhttps://api.nuget.org/v3/catalog0/data/2016.04.05.20.15.30/gfi.ch.common.client.0.0.6.1.json\r\nhttps://api.nuget.org/v3/catalog0/data/2016.04.05.20.15.30/gfi.ch.common.client.0.0.6.2.json\r\nhttps://api.nuget.org/v3/catalog0/data/2016.04.05.20.15.30/gfi.ch.common.client.0.0.6.3.json\r\nhttps://api.nuget.org/v3/catalog0/data/2016.04.05.20.15.30/gfi.ch.common.client.0.0.6.4.json\r\nhttps://api.nuget.org/v3/catalog0/data/2016.04.05.20.15.30/gfi.ch.common.client.0.0.6.5.json\r\nhttps://api.nuget.org/v3/catalog0/data/2016.04.05.20.15.30/gfi.ch.common.client.0.0.6.6.json\r\nhttps://api.nuget.org/v3/catalog0/data/2016.04.05.20.15.30/gfi.ch.common.client.0.0.6.7.json\r\nhttps://api.nuget.org/v3/catalog0/data/2016.04.05.20.15.30/gfi.ch.common.client.0.0.6.8.json\r\nhttps://api.nuget.org/v3/catalog0/data/2016.04.05.20.15.30/gfi.ch.common.client.0.0.6.9.json\r\nhttps://api.nuget.org/v3/catalog0/data/2016.04.05.20.15.30/gfi.ch.common.client.0.0.7.0.json\r\nhttps://api.nuget.org/v3/catalog0/data/2016.04.05.20.15.30/gfi.ch.common.client.0.0.7.5.json\r\nhttps://api.nuget.org/v3/catalog0/data/2016.04.05.20.15.30/gfi.ch.common.client.0.0.8.0.json\r\nhttps://api.nuget.org/v3/catalog0/data/2016.04.05.20.15.30/gfi.ch.common.client.0.0.8.1.json\r\nhttps://api.nuget.org/v3/catalog0/data/2016.04.05.20.15.30/gfi.ch.common.client.0.0.8.2.json\r\nhttps://api.nuget.org/v3/catalog0/data/2016.04.05.20.15.30/gfi.ch.common.client.0.0.8.3.json\r\nhttps://api.nuget.org/v3/catalog0/data/2016.04.05.20.15.30/gfi.ch.common.client.0.0.8.4.json\r\nhttps://api.nuget.org/v3/catalog0/data/2016.04.05.20.15.30/gfi.ch.common.client.0.0.8.5.json\r\nhttps://api.nuget.org/v3/catalog0/data/2016.04.05.20.15.30/gfi.ch.common.client.0.0.8.6.json\r\nhttps://api.nuget.org/v3/catalog0/data/2016.04.05.20.15.30/gfi.ch.common.client.0.0.8.7.json\r\nhttps://api.nuget.org/v3/catalog0/data/2016.04.05.20.15.30/gfi.ch.common.client.0.0.8.8.json\r\nhttps://api.nuget.org/v3/catalog0/data/2017.07.27.22.50.03/gfi.ch.common.client.0.0.9.0.json\r\nElement@28697. Gfi.Ch.Common.Client\r\nhttps://api.nuget.org/v3/catalog0/data/2017.07.27.23.11.55/gfi.ch.common.client.0.0.3.json\r\nhttps://api.nuget.org/v3/catalog0/data/2017.07.27.23.13.27/gfi.ch.common.client.0.0.4.json\r\nhttps://api.nuget.org/v3/catalog0/data/2017.07.27.23.13.27/gfi.ch.common.client.0.0.5.json\r\nhttps://api.nuget.org/v3/catalog0/data/2017.07.27.23.13.27/gfi.ch.common.client.0.0.6.json\r\nhttps://api.nuget.org/v3/catalog0/data/2017.07.27.23.13.27/gfi.ch.common.client.0.0.6.1.json\r\nhttps://api.nuget.org/v3/catalog0/data/2017.07.27.23.13.27/gfi.ch.common.client.0.0.6.2.json\r\nhttps://api.nuget.org/v3/catalog0/data/2017.07.27.23.15.09/gfi.ch.common.client.0.0.6.3.json\r\nhttps://api.nuget.org/v3/catalog0/data/2017.07.27.23.15.09/gfi.ch.common.client.0.0.6.4.json\r\nhttps://api.nuget.org/v3/catalog0/data/2017.07.27.23.15.09/gfi.ch.common.client.0.0.6.5.json\r\nhttps://api.nuget.org/v3/catalog0/data/2017.07.27.23.15.09/gfi.ch.common.client.0.0.6.6.json\r\nhttps://api.nuget.org/v3/catalog0/data/2017.07.27.23.15.09/gfi.ch.common.client.0.0.6.7.json\r\nhttps://api.nuget.org/v3/catalog0/data/2017.07.27.23.15.09/gfi.ch.common.client.0.0.6.8.json\r\nhttps://api.nuget.org/v3/catalog0/data/2017.07.27.23.15.09/gfi.ch.common.client.0.0.6.9.json\r\nhttps://api.nuget.org/v3/catalog0/data/2017.07.27.23.15.09/gfi.ch.common.client.0.0.7.json\r\nhttps://api.nuget.org/v3/catalog0/data/2017.07.27.23.15.09/gfi.ch.common.client.0.0.7.5.json\r\nhttps://api.nuget.org/v3/catalog0/data/2017.07.27.23.15.09/gfi.ch.common.client.0.0.8.json\r\nhttps://api.nuget.org/v3/catalog0/data/2017.07.27.23.15.09/gfi.ch.common.client.0.0.8.1.json\r\nhttps://api.nuget.org/v3/catalog0/data/2017.07.27.23.16.50/gfi.ch.common.client.0.0.8.2.json\r\nhttps://api.nuget.org/v3/catalog0/data/2017.07.27.23.16.50/gfi.ch.common.client.0.0.8.3.json\r\nhttps://api.nuget.org/v3/catalog0/data/2017.07.27.23.16.50/gfi.ch.common.client.0.0.8.4.json\r\nhttps://api.nuget.org/v3/catalog0/data/2017.07.27.23.16.50/gfi.ch.common.client.0.0.8.5.json\r\nhttps://api.nuget.org/v3/catalog0/data/2017.07.27.23.16.50/gfi.ch.common.client.0.0.8.6.json\r\nhttps://api.nuget.org/v3/catalog0/data/2017.07.27.23.16.50/gfi.ch.common.client.0.0.8.7.json\r\nhttps://api.nuget.org/v3/catalog0/data/2017.07.27.23.16.50/gfi.ch.common.client.0.0.8.8.json\r\nhttps://api.nuget.org/v3/catalog0/data/2016.04.05.19.05.17/gfi.ch.common.client.0.0.9.json\r\nhttps://api.nuget.org/v3/catalog0/data/2017.07.27.23.16.50/gfi.ch.common.client.0.0.9.1.json\r\n</pre>\r\n</details>"},{"Id":"10855618328","Type":"IssuesEvent","CreatedAt":"2019-11-13T18:47:50","Actor":"loic-sharma","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7659","RelatedDescription":"Closed issue \"Because the old accounts are disabled, I cannot access my profile\" (#7659) at NuGet/NuGetGallery","RelatedBody":""},{"Id":"10855321097","Type":"IssuesEvent","CreatedAt":"2019-11-13T18:08:08","Actor":"loic-sharma","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7646","RelatedDescription":"Closed issue \"[Gravatar Proxy] Handle \"Service Unavailable\" responses\" (#7646) at NuGet/NuGetGallery","RelatedBody":"### Describe the bug\r\nAbout ~10 times an hour, Gravatar responds with a HTTP 503 (see [this query](https://ms.portal.azure.com#@33e01921-4d64-4f8c-a055-5bdaffd5e33d/blade/Microsoft_Azure_Monitoring_Logs/LogsBlade/resourceId/%2Fsubscriptions%2F685c4662-53d8-40f9-ac51-926097ede041%2FresourceGroups%2Fnuget-prod-0-v2gallery%2Fproviders%2Fmicrosoft.insights%2Fcomponents%2Fnuget-prod-v2gallery/source/LogsBlade.AnalyticsShareLinkToQuery/q/H4sIAAAAAAAAA0WNQQqDMBBF955i6EpBpB7Abgq9RhknHw2YRGaSlpYevtaF3f73Ht9hRXSI4mHVh54zFJR9gGUOK12Ip1T3Z9f8IeuETMNAJ4MURTcpP3ibO0nhRIdoRQRmu3njxbAzKyGw%252BjdIUom5bmh80ehjfZy21M9NSworS74mh61K6qA%252Fc4%252Fu5GBC1RepItIovQAAAA%253D%253D)). As a result, the browser displays a broken image to the user until the user refreshes the page. This affects 0.18% of the Gallery's Gravatar requests (see [this query](https://ms.portal.azure.com#@33e01921-4d64-4f8c-a055-5bdaffd5e33d/blade/Microsoft_Azure_Monitoring_Logs/LogsBlade/resourceId/%2Fsubscriptions%2F685c4662-53d8-40f9-ac51-926097ede041%2FresourceGroups%2Fnuget-prod-0-v2gallery%2Fproviders%2Fmicrosoft.insights%2Fcomponents%2Fnuget-prod-v2gallery/source/LogsBlade.AnalyticsShareLinkToQuery/q/H4sIAAAAAAAAA0XNOw6EMBAD0J5TWFRsww3ot6TgArODBSkSokkCAnF4Ps22z5Y9MjKMDOqYqhPbTCPyHomuQ%252F0dhr7G38Um5jdJ1GJsJ5NVbm518W8xFe%252FF3EHoUkJuPvjtN6oyPfv2nBmio85iGdUFsVJFjYAAAAA%253D/timespan/P1D)). It's hard to measure the actual customer impact as customers' browsers cache the Gravatar images.\r\n\r\n### To Reproduce\r\nUnknown. This seems to be due to issues in Gravatar.\r\n\r\n### Expected behavior\r\nConsider showing a fallback image instead.\r\n"},{"Id":"10855228855","Type":"IssuesEvent","CreatedAt":"2019-11-13T17:56:12","Actor":"loic-sharma","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7668","RelatedDescription":"Closed issue \"The uploaded symbols package contains one or more pdbs that are not portable. \" (#7668) at NuGet/NuGetGallery","RelatedBody":"I am not able to upload a generated snupkg to Nuget.org. During indexing it always reports this error \"The uploaded symbols package contains one or more pdbs that are not portable.\"\r\n\r\nTargetFramework: netstandard2.0\r\nVisual Studio: 16.3.4\r\nDebugType: portable\r\n\r\nThis is how I pack: `dotnet pack .\\Firebase.csproj --include-symbols -p:SymbolPackageFormat=snupkg -p:configuration=Release`\r\n\r\nHere's the full csproj (which specifies `DebugType` as `portable`: https://github.com/step-up-labs/firebase-database-dotnet/blob/master/src/Firebase/Firebase.csproj\r\nPackage on nuget: https://www.nuget.org/packages/FirebaseDatabase.net/"},{"Id":"10853749832","Type":"PullRequestEvent","CreatedAt":"2019-11-13T15:15:33","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/7697","RelatedDescription":"Opened pull request \"Point api/v2/curated-feeds to main V2 feed\" (#7697) at NuGet/NuGetGallery","RelatedBody":"Address https://github.com/NuGet/NuGetGallery/issues/7689.\r\n\r\nThis helps reduce code and makes the server-side cache be shared between two endpoints that currently behave the almost the same. Differences are: \r\n\r\n1. The `/Packages()` endpoint returned at most 40 on the curated feed controller. This will become 100 which is the max in the non-curated feed controller.\r\n1. Non-existent curated feeds will now 200 and behave no different than the \"microsoftdotnet\" feed. Note that \"microsoftdotnet\" accounts for 99.89% of the requests so I don't think this is a big deal."}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"10858880459","Type":"IssuesEvent","CreatedAt":"2019-11-14T04:07:49","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8811","RelatedDescription":"Closed issue \"Decouple Settings & SettingsFile objects\" (#8811) at NuGet/Home","RelatedBody":"The motivation for this comes from: https://github.com/NuGet/NuGet.Client/pull/3086\r\nSettings objects own a bunch of SettingsFiles. \r\nThe SettingsFiles themselves have priority in that Settings object.\r\nThe fact that a Settings object changes the SettingsFile object it uses, the caching cannot be done on that level. \r\n\r\nBecause SettingsFile is the origin for every settings item, the priority needs to be understood at the settings object level in order to perform the updates correctly.\r\n\r\nSee: https://github.com/NuGet/NuGet.Client/blob/48f67796ff38e98e3dfe4ab55fce000577b74fea/src/NuGet.Core/NuGet.Configuration/PackageSource/PackageSourceProvider.cs#L86\r\n\r\nhttps://github.com/NuGet/NuGet.Client/blob/48f67796ff38e98e3dfe4ab55fce000577b74fea/src/NuGet.Core/NuGet.Configuration/Settings/Settings.cs#L233\r\n\r\nThe above 2 now make use of the ConfigFilePaths returning the config paths in the correct priority."},{"Id":"10858248515","Type":"IssuesEvent","CreatedAt":"2019-11-14T01:42:29","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/7380","RelatedDescription":"Closed issue \"Concurrent nuget install failures\" (#7380) at NuGet/Home","RelatedBody":"We are using TeamCity with multiple agents on the same physical machine. We want to have all the agents share the same global packages folder to save disk space. Even then, it is not enough and we clear the packages from time to time. The result is that we have only one shared global packages folder, but install and restore operations fail regularly after we clear the locals caches.\r\n\r\nWe get errors like these\r\n- `Access to the path 'bqipdjvv.1mg' is denied.`\r\n- `The directory is not empty.`\r\n\r\nUnfortunately, the NuGetScratch folder is located under the `%temp%` folder which TeamCity override per agent. What we understand is that the scratch folder is used to lock the downloads and installs of packages in the global cache. If we try to install the same package for the first time from different `nuget install` at the same time, the second will wait for the first one to finish without problem. \r\nHowever, if I repeat the experiment with different `%temp%` at least one of the `nuget install` will fail.\r\n\r\nIs there any reason that the NuGetScratch folder is located in `%temp%` while other NuGet folders are in `%localappdata%` or the user folder?\r\n\r\nDo you think there is a way to make this work anyway? I mean using nuget from different TeamCity agents sharing the same global packages folder but not the same `%temp%` folder?\r\n"},{"Id":"10858228524","Type":"IssuesEvent","CreatedAt":"2019-11-14T01:37:52","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8813","RelatedDescription":"Closed issue \"Error occurred while restoring NuGet packages: The operation failed as details for project ClassLibrary1 could not be loaded.\" (#8813) at NuGet/Home","RelatedBody":"## Details about Problem\r\n\r\nOpen attached solution in Visual Studio\r\nand try to compile it. It will create an error message during build\r\n'Error occurred while restoring NuGet packages: The operation failed\r\nas details for project ClassLibrary1 could not be loaded.'\r\n\r\nThe reason is that it has two targets and a assembly name that changes\r\ndepending on target version. This causes an InvalidOperationException\r\nin VsNominationUtilities ~Line 300:\r\n`GetNonEvaluatedPropertyOrNull(values, propertyName, valueFactory).SingleOrDefault()`\r\nthat is invoked by \r\n`internal static string GetPackageId(ProjectNames projectNames, IEnumerable tfms)`\r\nas two package ID's are resolved (one for each assembly name).\r\n\r\nThis further causes that no restore entry is created in the project\r\nsystem cache and then will cause this build error.\r\n\r\n- NuGet product used: Visual Studio build with package restore enabled\r\n- Worked before? If so, with which NuGet version: Don't think so.\r\n- VS version (if appropriate): Version 16.4.0 Preview 4.0\r\n\r\n## Detailed repro steps so we can see the same problem\r\n\r\n1. Open attached solution in Visual Studio\r\n1. build\r\n1. See build output\r\n\r\n## Other suggested things\r\nA workaround is to set an explicit 'PackageId' for ClassLibrary1.\r\nBut it took me one day of debugging the NuGet extension to find that IMO workaround.\r\n\r\nSo some fix, or at least better log output when the cache entry cannot be created would\r\nbe nice. If i saw correctly, the exception during cache creation is simply swallowed\r\n(at least in normal builds without special logging enabled etc.) and\r\nand creates followup issues later. Very annoying.\r\n\r\n### Sample Project\r\n[ConsoleApp27.zip](https://github.com/NuGet/Home/files/3839653/ConsoleApp27.zip)\r\n\r\n"},{"Id":"10858225713","Type":"IssuesEvent","CreatedAt":"2019-11-14T01:37:14","Actor":"v-nancyj","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8820","RelatedDescription":"Closed issue \"[Test Failure] Package icon becomes a default icon after installing â€˜Newtonsoft.Jsonâ€™ with latest versoin \" (#8820) at NuGet/Home","RelatedBody":"Please read the following information before posting the issue.\r\n\r\n## Before posting the issue...\r\n\r\n* If you're having trouble with the NuGet.org Website, please post in [NuGetGallery issues](http://github.com/nuget/nugetgallery/issues)\r\n* If you're having trouble with the NuGet client tools (the Visual Studio extension, NuGet.exe command line tool, etc.), you are in the right place.\r\n\r\nRemove the content above here and fill out details below.\r\n\r\n## Details about Problem\r\n\r\nNuGet product used (NuGet.exe | VS UI | Package Manager Console | dotnet.exe):\r\n\r\nNuGet version (x.x.x.xxx):\r\n\r\ndotnet.exe --version (if appropriate):\r\n\r\nVS version (if appropriate):\r\n\r\nOS version (i.e. win10 v1607 (14393.321)):\r\n\r\nWorked before? If so, with which NuGet version:\r\n\r\n## Detailed repro steps so we can see the same problem\r\n\r\n1.\r\n\r\n2.\r\n\r\n...\r\n\r\n## Other suggested things\r\n\r\n### Verbose Logs\r\n\r\nPlease include verbose logs (NuGet.exe <COMMAND> -verbosity detailed | dotnet.exe <COMMAND> --verbosity diag | etc...)\r\n\r\n### Sample Project\r\n\r\nVery helpful if you can zip a project and paste into this issue!\r\n\r\n"},{"Id":"10858222242","Type":"IssuesEvent","CreatedAt":"2019-11-14T01:36:25","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8569","RelatedDescription":"Closed issue \"Warning NU5048: The 'PackageIconUrl'/'iconUrl' element is deprecated with 3.0.100-preview9-014004\" (#8569) at NuGet/Home","RelatedBody":"_From @kdcllc on Thursday, September 5, 2019 4:49:06 PM_\r\n\r\nThis warning is displayed with DotNetCore 3.0.100-preview9-014004 with the following tag:\r\n ```\r\n<PackageIconUrl>https://github.com/kdcllc/Bet.AspNetCore/raw/master/img/logo64x64.png</PackageIconUrl>\r\n```\r\nWhen changed to `<PackageIcon>` the sdk msbuild action is not able to find the local file.\r\n\r\n\r\n_Copied from original issue: dotnet/core-sdk#4588_"},{"Id":"10858218626","Type":"IssuesEvent","CreatedAt":"2019-11-14T01:35:37","Actor":"v-nancyj","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8820","RelatedDescription":"Opened issue \"[Test Failure] Package icon becomes a default icon after installing â€˜Newtonsoft.Jsonâ€™ with latest versoin \" (#8820) at NuGet/Home","RelatedBody":"Please read the following information before posting the issue.\r\n\r\n## Before posting the issue...\r\n\r\n* If you're having trouble with the NuGet.org Website, please post in [NuGetGallery issues](http://github.com/nuget/nugetgallery/issues)\r\n* If you're having trouble with the NuGet client tools (the Visual Studio extension, NuGet.exe command line tool, etc.), you are in the right place.\r\n\r\nRemove the content above here and fill out details below.\r\n\r\n## Details about Problem\r\n\r\nNuGet product used (NuGet.exe | VS UI | Package Manager Console | dotnet.exe):\r\n\r\nNuGet version (x.x.x.xxx):\r\n\r\ndotnet.exe --version (if appropriate):\r\n\r\nVS version (if appropriate):\r\n\r\nOS version (i.e. win10 v1607 (14393.321)):\r\n\r\nWorked before? If so, with which NuGet version:\r\n\r\n## Detailed repro steps so we can see the same problem\r\n\r\n1.\r\n\r\n2.\r\n\r\n...\r\n\r\n## Other suggested things\r\n\r\n### Verbose Logs\r\n\r\nPlease include verbose logs (NuGet.exe <COMMAND> -verbosity detailed | dotnet.exe <COMMAND> --verbosity diag | etc...)\r\n\r\n### Sample Project\r\n\r\nVery helpful if you can zip a project and paste into this issue!\r\n\r\n"},{"Id":"10858199750","Type":"IssuesEvent","CreatedAt":"2019-11-14T01:31:16","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8814","RelatedDescription":"Closed issue \" [Test Failure] Package icon becomes a default icon after installing â€˜Newtonsoft.Jsonâ€™ with latest versoin\" (#8814) at NuGet/Home","RelatedBody":"## Details about Problem\r\n\r\nNuGet Version: Dev\\5.5.0.6293\r\nVS Version: VS Master\\29512.44\r\nOS Version: Windows-10-Enterprise-19H1-04-05-2019\r\n\r\n## Installation step:\r\n\r\n[https://devdiv.visualstudio.com/DevDiv/_build/results?buildId=3236483&view=results](url)\r\n \r\n## Repro steps: \r\n\r\n1. Create a C# Console App (.Net Core) project.\r\n2. Open â€˜Manage NuGet Packagesâ€™.\r\n3. Install package â€˜Newtonsoft.Jsonâ€™ with latest version 12.0.3.\r\n4. Go to the â€˜Installedâ€™ tab and observe the icon of package â€˜Newtonsoft.Jsonâ€™.\r\n\r\n## Expected:\r\nThe package icon under â€˜Installedâ€™ tab should be same as â€˜Browseâ€™ tab.\r\n\r\n## Actual:\r\nThe package icon becomes default icon under â€˜Installedâ€™ tab as below screenshot.\r\n![bug1113](https://user-images.githubusercontent.com/20632775/68749905-f31eb580-0639-11ea-9457-3c27aa7650e7.png)\r\n\r\n## Notes: \r\n1. The issue not repro after installing package â€˜Newtonsoft.Jsonâ€™ with an older version.\r\n2. The issue repro on D16.4\\29512.137 with implicit NuGet Client Release-5.4.x\\5.4.0.6292.\r\n"},{"Id":"10858030171","Type":"IssuesEvent","CreatedAt":"2019-11-14T00:54:50","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8816","RelatedDescription":"Closed issue \"Localization validator fails on official builds\" (#8816) at NuGet/Home","RelatedBody":"Regressed in https://github.com/NuGet/NuGet.Client/commit/52ee9a5a9483518f5449957bbf3d3da7d9cf82c1\r\n\r\nhttps://devdiv.visualstudio.com/DevDiv/_build/results?buildId=3216283\r\n\r\nLikely becausae the validator doesn't run on local builds. \r\n\r\nFix and enable validator on local builds"},{"Id":"10857987950","Type":"IssuesEvent","CreatedAt":"2019-11-14T00:45:40","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8819","RelatedDescription":"Opened issue \"PackageSource.ProtocolVersion gives wrong value\" (#8819) at NuGet/Home","RelatedBody":"If you have a source in your `nuget.config` that uses a v3 source, for example `https://source.test/index.json`, but no `protocolVersion` attribute, `PackageSource.ProtocolVersion` will return `2`, even though using it with `NuGet.Protocol` will use the v3 code."},{"Id":"10857939333","Type":"IssuesEvent","CreatedAt":"2019-11-14T00:35:04","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/NuGet/Home/issues/8661","RelatedDescription":"Reopened issue \"HttpRequestMessage gets reused multiple times which is not supported with the SocketHttpHandler\" (#8661) at NuGet/Home","RelatedBody":"The [`SocketHttpHandler` does not support reusing HttpRequestMessages multiple times](https://github.com/dotnet/corefx/issues/25163). This can lead to issues with authentification if the user provides the wrong credentials the first time, because the `Authorization` header gets [added](https://github.com/dotnet/corefx/blob/eff9fbf446468ca411bf5e0475916f316eea7223/src/System.Net.Http/src/System/Net/Http/SocketsHttpHandler/AuthenticationHelper.cs#L164-L174) by the `SocketHttpHandler` and is resend on the next try. In combination with some servers (e.g. the GitHub NuGet feed) this results in an loop where each time the same credentials are being passed in because this server does not send a `Www-Authenticate` header if an `Authorization` header is provided and so the [new credentials are never added](https://github.com/dotnet/corefx/blob/eff9fbf446468ca411bf5e0475916f316eea7223/src/System.Net.Http/src/System/Net/Http/SocketsHttpHandler/AuthenticationHelper.cs#L242).\r\n\r\nTo prevent this issue it is currently possible to disable the `SocketHttpHandler` which I have done here https://github.com/NuGetPackageExplorer/NuGetPackageExplorer/pull/841\r\n\r\n\r\nSee also https://github.com/dotnet/corefx/issues/25163#issuecomment-538009706\r\n\r\n### Sample Project\r\n\r\n```c#\r\n[Fact]\r\npublic async Task GitHubFeedTest()\r\n{\r\n    // uncomment this to fix the issue\r\n    //AppContext.SetSwitch(\"System.Net.Http.UseSocketsHttpHandler\", false);\r\n\r\n    HttpHandlerResourceV3.CredentialService = new Lazy<ICredentialService>(() => new CredentialService(\r\n        new AsyncLazy<IEnumerable<ICredentialProvider>>(\r\n            () => Task.FromResult<IEnumerable<ICredentialProvider>>(new ICredentialProvider[] { new TestCredentialProvider()})\r\n        ),\r\n        nonInteractive: false,\r\n        handlesDefaultCredentials: true\r\n    ));\r\n    // change `username` in this url to your user\r\n    var source = Repository.Factory.GetCoreV3(\"https://nuget.pkg.github.com/username/index.json\");\r\n    var sourceProvider = await source.GetResourceAsync<PackageSearchResource>();\r\n\r\n    await sourceProvider.SearchAsync(\"\", new SearchFilter(false), 0, 10, NullLogger.Instance, CancellationToken.None);\r\n}\r\nprivate class TestCredentialProvider : ICredentialProvider\r\n{\r\n    public string Id => \"test\";\r\n    public Task<CredentialResponse> GetAsync(Uri uri, IWebProxy proxy, CredentialRequestType type, string message, bool isRetry, bool nonInteractive, CancellationToken cancellationToken)\r\n    {\r\n        if (!isRetry)\r\n        {\r\n            return Task.FromResult(new CredentialResponse(new NetworkCredential(\"a\", \"b\"))); // intentional wrong user and password\r\n        }\r\n        return Task.FromResult(new CredentialResponse(new NetworkCredential(\"username\", \"token\"))); // change `username` and `token` to your github user and [token](https://github.com/settings/tokens) with package access\r\n    }\r\n}\r\n```"},{"Id":"10857818635","Type":"IssuesEvent","CreatedAt":"2019-11-14T00:09:53","Actor":"zkat","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8818","RelatedDescription":"Opened issue \"Write an official setup-nuget-exe github action\" (#8818) at NuGet/Home","RelatedBody":""},{"Id":"10857814352","Type":"IssuesEvent","CreatedAt":"2019-11-14T00:09:02","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8661","RelatedDescription":"Closed issue \"HttpRequestMessage gets reused multiple times which is not supported with the SocketHttpHandler\" (#8661) at NuGet/Home","RelatedBody":"The [`SocketHttpHandler` does not support reusing HttpRequestMessages multiple times](https://github.com/dotnet/corefx/issues/25163). This can lead to issues with authentification if the user provides the wrong credentials the first time, because the `Authorization` header gets [added](https://github.com/dotnet/corefx/blob/eff9fbf446468ca411bf5e0475916f316eea7223/src/System.Net.Http/src/System/Net/Http/SocketsHttpHandler/AuthenticationHelper.cs#L164-L174) by the `SocketHttpHandler` and is resend on the next try. In combination with some servers (e.g. the GitHub NuGet feed) this results in an loop where each time the same credentials are being passed in because this server does not send a `Www-Authenticate` header if an `Authorization` header is provided and so the [new credentials are never added](https://github.com/dotnet/corefx/blob/eff9fbf446468ca411bf5e0475916f316eea7223/src/System.Net.Http/src/System/Net/Http/SocketsHttpHandler/AuthenticationHelper.cs#L242).\r\n\r\nTo prevent this issue it is currently possible to disable the `SocketHttpHandler` which I have done here https://github.com/NuGetPackageExplorer/NuGetPackageExplorer/pull/841\r\n\r\n\r\nSee also https://github.com/dotnet/corefx/issues/25163#issuecomment-538009706\r\n\r\n### Sample Project\r\n\r\n```c#\r\n[Fact]\r\npublic async Task GitHubFeedTest()\r\n{\r\n    // uncomment this to fix the issue\r\n    //AppContext.SetSwitch(\"System.Net.Http.UseSocketsHttpHandler\", false);\r\n\r\n    HttpHandlerResourceV3.CredentialService = new Lazy<ICredentialService>(() => new CredentialService(\r\n        new AsyncLazy<IEnumerable<ICredentialProvider>>(\r\n            () => Task.FromResult<IEnumerable<ICredentialProvider>>(new ICredentialProvider[] { new TestCredentialProvider()})\r\n        ),\r\n        nonInteractive: false,\r\n        handlesDefaultCredentials: true\r\n    ));\r\n    // change `username` in this url to your user\r\n    var source = Repository.Factory.GetCoreV3(\"https://nuget.pkg.github.com/username/index.json\");\r\n    var sourceProvider = await source.GetResourceAsync<PackageSearchResource>();\r\n\r\n    await sourceProvider.SearchAsync(\"\", new SearchFilter(false), 0, 10, NullLogger.Instance, CancellationToken.None);\r\n}\r\nprivate class TestCredentialProvider : ICredentialProvider\r\n{\r\n    public string Id => \"test\";\r\n    public Task<CredentialResponse> GetAsync(Uri uri, IWebProxy proxy, CredentialRequestType type, string message, bool isRetry, bool nonInteractive, CancellationToken cancellationToken)\r\n    {\r\n        if (!isRetry)\r\n        {\r\n            return Task.FromResult(new CredentialResponse(new NetworkCredential(\"a\", \"b\"))); // intentional wrong user and password\r\n        }\r\n        return Task.FromResult(new CredentialResponse(new NetworkCredential(\"username\", \"token\"))); // change `username` and `token` to your github user and [token](https://github.com/settings/tokens) with package access\r\n    }\r\n}\r\n```"},{"Id":"10857517747","Type":"IssuesEvent","CreatedAt":"2019-11-13T23:11:39","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8817","RelatedDescription":"Opened issue \"In old style PackageReference - PM UI installed packages might be out of date with the assets file.\" (#8817) at NuGet/Home","RelatedBody":"See: \r\n\r\nhttps://developercommunity.visualstudio.com/content/problem/797709/nuget-project-reference-not-shown.html?childToView=818232\r\n\r\nThe references node depends on the assets file, while the PM UI shows the csproj reference, since autorestore is not a thing, they can easily get out of date. \r\n\r\nA potential improvement on NuGet PM UI can be to indicate that restore is not up to date but that's tricky to figure out right now. \r\n\r\nGiven that a restore fixes the problem, the priority for this is a bit lower. \r\n\r\n"},{"Id":"10856877343","Type":"IssuesEvent","CreatedAt":"2019-11-13T21:34:29","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/NuGet/Home/issues/8661","RelatedDescription":"Reopened issue \"HttpRequestMessage gets reused multiple times which is not supported with the SocketHttpHandler\" (#8661) at NuGet/Home","RelatedBody":"The [`SocketHttpHandler` does not support reusing HttpRequestMessages multiple times](https://github.com/dotnet/corefx/issues/25163). This can lead to issues with authentification if the user provides the wrong credentials the first time, because the `Authorization` header gets [added](https://github.com/dotnet/corefx/blob/eff9fbf446468ca411bf5e0475916f316eea7223/src/System.Net.Http/src/System/Net/Http/SocketsHttpHandler/AuthenticationHelper.cs#L164-L174) by the `SocketHttpHandler` and is resend on the next try. In combination with some servers (e.g. the GitHub NuGet feed) this results in an loop where each time the same credentials are being passed in because this server does not send a `Www-Authenticate` header if an `Authorization` header is provided and so the [new credentials are never added](https://github.com/dotnet/corefx/blob/eff9fbf446468ca411bf5e0475916f316eea7223/src/System.Net.Http/src/System/Net/Http/SocketsHttpHandler/AuthenticationHelper.cs#L242).\r\n\r\nTo prevent this issue it is currently possible to disable the `SocketHttpHandler` which I have done here https://github.com/NuGetPackageExplorer/NuGetPackageExplorer/pull/841\r\n\r\n\r\nSee also https://github.com/dotnet/corefx/issues/25163#issuecomment-538009706\r\n\r\n### Sample Project\r\n\r\n```c#\r\n[Fact]\r\npublic async Task GitHubFeedTest()\r\n{\r\n    // uncomment this to fix the issue\r\n    //AppContext.SetSwitch(\"System.Net.Http.UseSocketsHttpHandler\", false);\r\n\r\n    HttpHandlerResourceV3.CredentialService = new Lazy<ICredentialService>(() => new CredentialService(\r\n        new AsyncLazy<IEnumerable<ICredentialProvider>>(\r\n            () => Task.FromResult<IEnumerable<ICredentialProvider>>(new ICredentialProvider[] { new TestCredentialProvider()})\r\n        ),\r\n        nonInteractive: false,\r\n        handlesDefaultCredentials: true\r\n    ));\r\n    // change `username` in this url to your user\r\n    var source = Repository.Factory.GetCoreV3(\"https://nuget.pkg.github.com/username/index.json\");\r\n    var sourceProvider = await source.GetResourceAsync<PackageSearchResource>();\r\n\r\n    await sourceProvider.SearchAsync(\"\", new SearchFilter(false), 0, 10, NullLogger.Instance, CancellationToken.None);\r\n}\r\nprivate class TestCredentialProvider : ICredentialProvider\r\n{\r\n    public string Id => \"test\";\r\n    public Task<CredentialResponse> GetAsync(Uri uri, IWebProxy proxy, CredentialRequestType type, string message, bool isRetry, bool nonInteractive, CancellationToken cancellationToken)\r\n    {\r\n        if (!isRetry)\r\n        {\r\n            return Task.FromResult(new CredentialResponse(new NetworkCredential(\"a\", \"b\"))); // intentional wrong user and password\r\n        }\r\n        return Task.FromResult(new CredentialResponse(new NetworkCredential(\"username\", \"token\"))); // change `username` and `token` to your github user and [token](https://github.com/settings/tokens) with package access\r\n    }\r\n}\r\n```"},{"Id":"10856162352","Type":"IssuesEvent","CreatedAt":"2019-11-13T19:58:24","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8816","RelatedDescription":"Opened issue \"Localization validator fails on official builds\" (#8816) at NuGet/Home","RelatedBody":"Regressed in https://github.com/NuGet/NuGet.Client/commit/52ee9a5a9483518f5449957bbf3d3da7d9cf82c1\r\n\r\nhttps://devdiv.visualstudio.com/DevDiv/_build/results?buildId=3216283\r\n\r\nLikely becausae the validator doesn't run on local builds. \r\n\r\nFix and enable validator on local builds"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"10740159942","Type":"IssuesEvent","CreatedAt":"2019-10-29T17:39:29","Actor":"anangaur","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/39","RelatedDescription":"Opened issue \"Flag vulnerable packages\" (#39) at NuGet/Announcements","RelatedBody":"The spec for 'Flagging vulnerable packages' is ready for **review**:\r\n\r\n|Spec wiki|Discussion issue|\r\n|----------|------------------|\r\n|[Flag vulnerable packages](https://github.com/NuGet/Home/wiki/Flag-vulnerable-packages) | https://github.com/nuget/home/issues/8087|"},{"Id":"10286366828","Type":"IssuesEvent","CreatedAt":"2019-08-26T13:37:09","Actor":"karann-msft","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/38","RelatedDescription":"Opened issue \"New and improved NuGet Search is live!\" (#38) at NuGet/Announcements","RelatedBody":"Announcing the new and improved search on NuGet.org leveraging Azure Search.\r\n\r\n[Blogpost](https://devblogs.microsoft.com/nuget/new-and-improved-nuget-search/) | [Feedback Issue](https://github.com/NuGet/NuGetGallery/issues/4124)"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1190360390980395008","CreatedAt":"2019-11-01T20:10:07+00:00","UserScreenname":"nuget","Text":"The issue with the publishing pipeline has been resolved and packages are now being published normally. https://t.co/NdK8mVk7UF","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":3,"FavoriteCount":0,"RawContent":null},{"Id":"1190331936293572608","CreatedAt":"2019-11-01T18:17:03+00:00","UserScreenname":"nuget","Text":"We are experiencing an issue with our publishing pipeline causing a delay in the publishing of new packages. We areâ€¦ https://t.co/gM91QcE1Zc","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":5,"FavoriteCount":3,"RawContent":null},{"Id":"1164220617710686209","CreatedAt":"2019-08-21T17:00:00+00:00","UserScreenname":"nuget","Text":"âš  Restoring packages from https://t.co/KVB7werYQh might fail in some regions. We are investigating the issue. Folloâ€¦ https://t.co/t69YZ9eFo1","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":4,"FavoriteCount":2,"RawContent":null}]}},"RunOn":"2019-11-14T05:30:46.4649623Z","RunDurationInMilliseconds":2232}