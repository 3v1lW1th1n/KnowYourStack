{"Data":{"Blog":{"FeedItems":[{"Title":"Announcing ML.NET 0.11 – Machine Learning for .NET","PublishedOn":"2019-03-09T01:03:28+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"ML.NET is an open-source and cross-platform machine learning framework (Windows, Linux, macOS) for .NET developers. Using ML.NET, developers can leverage their existing tools and skillsets to develop...","Href":"https://devblogs.microsoft.com/dotnet/announcing-ml-net-0-11-machine-learning-for-net/","RawContent":null},{"Title":"Announcing .NET Core 3 Preview 3","PublishedOn":"2019-03-06T19:10:42+00:00","CommentsCount":30,"FacebookCount":0,"Summary":"Today, we are announcing .NET Core 3.0 Preview 3. We would like to update you on the .NET Core 3.0 schedule and introduce you to improvements in .NET Core SDK installers, Docker containers, Range, and...","Href":"https://devblogs.microsoft.com/dotnet/announcing-net-core-3-preview-3/","RawContent":null},{"Title":"Floating-Point Parsing and Formatting improvements in .NET Core 3.0","PublishedOn":"2019-03-05T22:14:48+00:00","CommentsCount":17,"FacebookCount":0,"Summary":"Starting back with the .NET Core 2.1 release, we were making iterative improvements to the floating-point parsing and formatting code in .NET Core. Now, in .NET Core 3.0 Preview 3, we are nearing...","Href":"https://devblogs.microsoft.com/dotnet/floating-point-parsing-and-formatting-improvements-in-net-core-3-0/","RawContent":null},{"Title":"Collecting .NET Core Linux Container CPU Traces from a Sidecar Container","PublishedOn":"2019-03-05T19:31:18+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Introduction\nIn recent years, containerization has gained popularity in DevOps due to its valuable capacities, including more efficient resource utilization and better agility. Microsoft and Docker...","Href":"https://devblogs.microsoft.com/dotnet/collecting-net-core-linux-container-cpu-traces-from-a-sidecar-container/","RawContent":null},{"Title":".NET Framework March 1, 2019 Cumulative Update for Windows 10 version 1809 and Windows Server 2019","PublishedOn":"2019-03-01T18:25:39+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Today, March 1, we released the February 2019 Cumulative Update for Windows 10 version 1809 and Windows Server 2019.\nQuality and Reliability\nThis release contains the following quality and reliability...","Href":"https://devblogs.microsoft.com/dotnet/net-framework-march-1-2019-cumulative-update-for-windows-10-version-1809-and-windows-server-2019/","RawContent":null},{"Title":"An update to C# versions and C# tooling","PublishedOn":"2019-02-27T18:59:23+00:00","CommentsCount":12,"FacebookCount":0,"Summary":"Starting with Visual Studio 2019 Preview 4 and RC, we&#8217;ll be adjusting how C# versions are treated in .NET tooling.\nSummary of changes\nFirstly, we&#8217;re adding two new Language Version...","Href":"https://devblogs.microsoft.com/dotnet/an-update-to-c-versions-and-c-tooling/","RawContent":null},{"Title":"How to port desktop applications to .NET Core 3.0","PublishedOn":"2019-02-26T18:00:30+00:00","CommentsCount":17,"FacebookCount":0,"Summary":"In this post, I will describe how to port a desktop application from .NET Framework to .NET Core. I picked a WinForms application as an example. Steps for WPF application are similar and I&#8217;ll...","Href":"https://devblogs.microsoft.com/dotnet/how-to-port-desktop-applications-to-net-core-3-0/","RawContent":null},{"Title":"Announcing .NET Framework 4.8 Early Access Build 3745","PublishedOn":"2019-02-21T19:27:54+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"As we get closer to the final version, our efforts are focused on stabilizing the release over the coming weeks. Please keep up the support by trying out our latest preview 3745 and provide any...","Href":"https://devblogs.microsoft.com/dotnet/announcing-net-framework-4-8-early-access-build-3745/","RawContent":null},{"Title":".NET Framework February 2019 Preview of Quality Rollup","PublishedOn":"2019-02-19T15:19:18+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, we released the February 2019 Preview of Quality Rollup.\nQuality and Reliability\nThis release contains the following quality and reliability improvements.\nCLR\n\nAddresses an issue in...","Href":"https://devblogs.microsoft.com/dotnet/net-framework-february-2019-preview-of-quality-rollup/","RawContent":null},{"Title":".NET Core 1.0 and 1.1 will reach End of Life on June 27, 2019","PublishedOn":"2019-02-19T15:00:16+00:00","CommentsCount":3,"FacebookCount":0,"Summary":".NET Core 1.0 was released on June 27, 2016 and .NET Core 1.1 was released on November 16, 2016. As an LTS release, .NET Core 1.0 is supported for three years. .NET Core 1.1 fits into the same support...","Href":"https://devblogs.microsoft.com/dotnet/net-core-1-0-and-1-1-will-reach-end-of-life-on-june-27-2019/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"9208392766","Type":"IssuesEvent","CreatedAt":"2019-03-08T19:00:06","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/foundation/issues/123","RelatedDescription":"Closed issue \"Missing logo for Steeltoe\" (#123) at dotnet/foundation","RelatedBody":"`https://brandfolder.com/pivotal-assets/attachments/ohxttd-7yxa60-clvf50/pivotal-assets-pivotal-genericfile.png` redirects to a sign in page\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L128-L130"},{"Id":"9208389675","Type":"PullRequestEvent","CreatedAt":"2019-03-08T18:59:32","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/136","RelatedDescription":"Merged pull request \"Fix logo and update team contributors\" (#136) at dotnet/foundation","RelatedBody":""},{"Id":"9208386555","Type":"PullRequestEvent","CreatedAt":"2019-03-08T18:59:01","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/135","RelatedDescription":"Merged pull request \"adds Umbraco logo\" (#135) at dotnet/foundation","RelatedBody":"fixes #124 "},{"Id":"9208386542","Type":"IssuesEvent","CreatedAt":"2019-03-08T18:59:01","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/foundation/issues/124","RelatedDescription":"Closed issue \"Missing logo for Umbraco\" (#124) at dotnet/foundation","RelatedBody":"`https://fbcdn-profile-a.akamaihd.net/hprofile-ak-xap1/v/t1.0-1/p160x160/971596_519168901464439_566592989_n.png?oh=ce61e5b4cbd60c0d99c4164cbb05a434&oe=54F091C9&__gda__=1424472439_c9f76213a915bc2af88246f464f29e8b` results in a 404.\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L149-L151"},{"Id":"9208384997","Type":"PullRequestEvent","CreatedAt":"2019-03-08T18:58:45","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/134","RelatedDescription":"Merged pull request \"adds the prism logo\" (#134) at dotnet/foundation","RelatedBody":"fixes #126 "},{"Id":"9208384964","Type":"IssuesEvent","CreatedAt":"2019-03-08T18:58:45","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/foundation/issues/126","RelatedDescription":"Closed issue \"No logo provided for Prism\" (#126) at dotnet/foundation","RelatedBody":"Can/should this [image](http://prismlibrary.github.io/images/logo-prism-symbol@2x.png) be used?\r\n\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L155-L157"},{"Id":"9208383052","Type":"PullRequestEvent","CreatedAt":"2019-03-08T18:58:27","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/133","RelatedDescription":"Merged pull request \"Add additional ReactiveUI organization projects.\" (#133) at dotnet/foundation","RelatedBody":""},{"Id":"9178188648","Type":"PullRequestEvent","CreatedAt":"2019-03-04T22:18:31","Actor":"jkonicki","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/136","RelatedDescription":"Opened pull request \"Fix logo and update team contributors\" (#136) at dotnet/foundation","RelatedBody":""},{"Id":"9168056662","Type":"PullRequestEvent","CreatedAt":"2019-03-02T18:57:28","Actor":"manne","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/135","RelatedDescription":"Opened pull request \"adds Umbraco logo\" (#135) at dotnet/foundation","RelatedBody":"fixes #124 "},{"Id":"9168030118","Type":"PullRequestEvent","CreatedAt":"2019-03-02T18:43:42","Actor":"manne","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/134","RelatedDescription":"Opened pull request \"adds the prism logo\" (#134) at dotnet/foundation","RelatedBody":"fixes #126 "},{"Id":"9163318579","Type":"PullRequestEvent","CreatedAt":"2019-03-01T15:37:52","Actor":"glennawatson","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/133","RelatedDescription":"Opened pull request \"Add additional ReactiveUI organization projects.\" (#133) at dotnet/foundation","RelatedBody":""},{"Id":"9142546450","Type":"IssuesEvent","CreatedAt":"2019-02-26T23:12:20","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/foundation/issues/75","RelatedDescription":"Closed issue \"Fix mailto link on Team page\" (#75) at dotnet/foundation","RelatedBody":"When visiting [https://dotnetfoundation.org/team](https://dotnetfoundation.org/team), I noticed that the email icon under **Miklos Barkoczi**'s name has `mailto:` referenced twice. It may be obvious to some, but not to others.\r\n\r\n```\r\n<a href=\"mailto:mailto:contact@dotnetfoundation.org\">\r\n    <i class=\"fa fa-envelope\" aria-hidden=\"true\"></i>\r\n</a>\r\n```\r\nshould be\r\n```\r\n<a href=\"mailto:contact@dotnetfoundation.org\">\r\n    <i class=\"fa fa-envelope\" aria-hidden=\"true\"></i>\r\n</a>\r\n```"},{"Id":"9089021734","Type":"PullRequestEvent","CreatedAt":"2019-02-18T17:45:45","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/132","RelatedDescription":"Merged pull request \"Update MVVM project logo\" (#132) at dotnet/foundation","RelatedBody":"Fixes dotnet/dotnetfoundation-website#72\r\nFixes #125"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"9150531193","Type":"IssuesEvent","CreatedAt":"2019-02-27T22:49:51","Actor":"leecow","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/102","RelatedDescription":"Opened issue \"SDK Installers will remove previous patch versions\" (#102) at dotnet/announcements","RelatedBody":"The SDK Installers for Windows will upgrade patch versions in place within the same feature band. This will reduce the number of SDKs that are installed on programmer machines.\r\n\r\nFeature bands of the SDK are defined like 3.0.1nn. [Find out more about SDK version numbers](https://docs.microsoft.com/dotnet/core/versions/#versioning-details).\r\n\r\nThis means when .NET Core SDK 3.0.101 becomes available and is installed, .NET Core SDK 3.0.100 will be removed from the machine if it exists. When .NET Core SDK 3.0.200 becomes available and is installed on the same machine, .NET Core SDK versions like 3.0.101 will not be removed but stay side by side with 3.0.200.\r\n\r\nThis approach supports use of `global.json` which will roll forward across patch versions, but not feature bands of the SDK. Thus, upgrading via the SDK installer will not result in errors due to a missing SDK. Feature bands also align with side by side Visual Studio installations for those users that install SDKs for Visual Studio use. For example, Visual Studio 15.9 uses .NET Core SDK 2.2.500 but does not support .NET Core SDK 2.2.600.\r\n\r\nFind out how to [remove other .NET Core SDK versions here.](https://docs.microsoft.com/dotnet/core/versions/remove-runtime-sdk-versions)."},{"Id":"9078417647","Type":"IssuesEvent","CreatedAt":"2019-02-15T22:24:40","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/101","RelatedDescription":"Opened issue \"Publishing .NET Core images to Microsoft Container Registry (MCR)\" (#101) at dotnet/announcements","RelatedBody":"# Publishing .NET Core images to Microsoft Container Registry (MCR)\r\n\r\nMicrosoft teams are now publishing container images to the [Microsoft Container Registry](https://azure.microsoft.com/en-us/blog/microsoft-syndicates-container-catalog/). There are two primary reasons for this change:\r\n\r\n* Syndicate Microsoft-provided container images to multiple registries, like Docker Hub and Red Hat.\r\n* Use Microsoft Azure as a global CDN for delivering Microsoft-provided container images.\r\n\r\nYou will use and see MCR as a storage back-end for Microsoft images. The primary way you learn about Microsoft container images and tags will be through a registry, which for most users will continue to be Docker Hub. Most of the experience you've had browsing for .NET Core container images will continue unchanged with this new model. The Docker Hub URLs you've used for Microsoft repos will continue to work, and forward to updated locations on Docker Hub. Existing Docker Hub will images will be maintained as-is.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #935](https://github.com/dotnet/dotnet-docker/issues/935)\r\n\r\n## Starting with .NET Core nightly repo\r\n\r\nOn the .NET team, we started our [transition to MCR](https://github.com/dotnet/dotnet-docker/issues/745) with the .NET Core \"nightly\" repo. [dotnet-nightly](dockerhub.com/r/microsoft/dotnet-nightly) is now hosted on MCR and syndicated to Docker Hub. We started with the nightly repo in order to discover and fix any challenges we found with this new model before we move our higher-traffic primary container repository.\r\n\r\nWe will start publishing [dotnet](dockerhub.com/r/microsoft/dotnet) to MCR a bit later, in either February or March. This issue will be updated when that happens.\r\n\r\n## Repo Split\r\n\r\nThe [.NET Core repo](https://hub.docker.com/r/microsoft/dotnet) currently includes 4 major categories of tags: \r\n\r\n* `sdk`\r\n* `aspnetcore-runtime`\r\n* `runtime` \r\n* `runtime-deps`\r\n\r\nProviding all of the tags in one place has helped with discoverability but made for a repo with an enormous README that can be challenging to navigate and consume. It is large enough that we exceeded Docker Hub README limits and had to artificially make it smaller.\r\n\r\nGoing forward, we will provide a repo for each of the tag categories listed above. We'll also provide a \"product repo\" that will hierarchicaly group all of our repos together. This will satisfy discoverability needs so that it will be easy to find the tags you want.\r\n\r\nYou can already see this experience with [microsoft-dotnet-core-nightly](https://hub.docker.com/_/microsoft-dotnet-core-nightly). There are now multiple repos for our nightly builds:\r\n\r\n* [.NET Core Nightly product repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly)\r\n* [.NET Core SDK Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-sdk/)\r\n* [.NET Core ASP.NET Core Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-aspnet/)\r\n* [.NET Core Runtime Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-runtime/)\r\n* [.NET Core Runtime-deps Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-runtime-deps/)\r\n\r\nThe same split will exist for the non-nightly stable repo (currently hosted at  [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet)) when we start publishing it to MCR and syndicating it back to DockerHub.\r\n\r\n## Changes to registry URL\r\n\r\nThe biggest change is that your Dockerfiles need to be updated to point to the MCR registry in order get access to new .NET Core container tags. The same change is required for scripts or human operations that pull images via `docker pull`.\r\n\r\nThe following example shows the registry path, repo and tag for the .NET Core 2.2 \"Nightly\" SDK on MCR:\r\n\r\n```console\r\nmcr.microsoft.com/dotnet/core-nightly/sdk:2.2\r\n```\r\n\r\nAs comparison, the following repo and tag have been used to date for the .NET Core 2.2 \"Nightly\" SDK on Docker Hub:\r\n\r\n```console\r\nmicrosoft/dotnet-nightly:2.2-sdk\r\n```\r\n\r\nThe new repo URL is provided at each of the news repos. For example, the new .NET Core SDK \"nightly\" repo provides a box on the right where you can copy and paste the correct MCR-based repo syntax that you can use for `docker pull` or in `FROM` statements in your Dockerfiles.\r\n\r\n![image](https://user-images.githubusercontent.com/2608468/52811702-95c5eb80-304a-11e9-8de8-e6ea1f4b4d75.png)\r\n\r\n## Servicing existing Docker Hub tags\r\n\r\nWe will continue to service existing non-version-specific or floating tags on Docker Hub while the associated .NET Core version is supported. For example the `microsoft/dotnet:2.1-sdk` tag is a floating tag that will continue to be serviced for the lifetime of .NET Core 2.1. You can continue using floating tags without issue.\r\n\r\nIf you use non-floating tags, like `microsoft/dotnet:2.1.504-sdk-alpine`, then you will need to update your Dockerfile to use a new non-floating tag. No new non-floating tags will be published to `microsoft/dotnet` and `microsoft/dotnet-nightly` after we fully transition to MCR.\r\n\r\n.NET Core 3.0 Preview 3 and later will only be made available on MCR.\r\n\r\n## Microsoft is a Verified Publisher\r\n\r\nUntil now, Microsoft-provided container images were considered \"community images\". As part of this change, we are re-classifying Microsoft as a \"verified publisher\" on Docker Hub. This designation should make it clearer that .NET and other Microsoft-provided images are coming from a verified source. There clearly was that expectation previously, but Docker is now making that clearer in the Docker Hub pages they host for Microsoft.\r\n\r\nWe will provide official vulnerability scanning Microsoft-provided images as a second phase of this transition."},{"Id":"9075495754","Type":"IssuesEvent","CreatedAt":"2019-02-15T14:06:30","Actor":"TaraOverfield","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/100","RelatedDescription":"Opened issue \"Advisory on February 2019 Security update for Windows 10 update 1809\" (#100) at dotnet/announcements","RelatedBody":"<span>The </span><a href=\"https://blogs.msdn.microsoft.com/dotnet/2019/02/13/net-framework-february-2019-security-and-quality-rollup/\" rel=\"nofollow\">February 2019 Security and Quality Rollup for Windows 10 update 1809</a><span> was released earlier this week. We have received multiple customer reports of issues when a customer has installed .NET Framework 4.8 Preview then installed the February security update, <a href=\"https://support.microsoft.com/kb/4483452\" rel=\"nofollow\">4483452</a>.</span> These reports are specific to only to the scenario when a customer has installed both .NET Framework 4.8 Preview and the February security update.\r\n\r\nWe are actively working on fixing and re-shipping a correction for this issue. If you installed the February 2019 security update and have not yet seen any negative behavior, we recommend that you leave your system as-is but closely monitor them and ensure that you apply upcoming .NET Framework updates.\r\n\r\nAs a team, we regret that this release was shipped with this flaw. This release was tested using our regular and extensive testing process. We are working to improve our testing infrastructure to prevent these type of issues in the future. Again, we are sorry for any inconvenience that this product flaw has caused.\r\n\r\nWe will continue to update this <a href=\"https://blogs.msdn.microsoft.com/dotnet/2019/02/15/advisory-on-february-2019-security-update-for-windows-10-update-1809/\" rel=\"nofollow\">post</a> as we have new information.\r\n<h2>Guidance</h2>\r\nWe are working on guidance and will update this pose and as we have new information.\r\n<h2>Workaround</h2>\r\nThere are no known workarounds at this time.\r\n<h2>Symptoms</h2>\r\nAfter installing .NET Framework 4.8 Preview then the February 2019 security update, <a href=\"https://support.microsoft.com/kb/4483452\" rel=\"nofollow\">4483452</a>, Visual Studios will crash with this error message:\r\n<p class=\"xxxxxmsonormal\"><b><span style=\"font-size: 10.5pt;font-family: 'Segoe UI',sans-serif;color: black\">\"Exception has been thrown by the target of an invocation.\"</span></b></p>\r\n"},{"Id":"9070407129","Type":"IssuesEvent","CreatedAt":"2019-02-14T19:28:26","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/99","RelatedDescription":"Opened issue \"Supporting new Alpine versions (for containers)\" (#99) at dotnet/announcements","RelatedBody":"# Supporting new Alpine versions (for containers)\r\n\r\n[Alpine 3.9](https://twitter.com/alpinelinux/status/1090416212822110214) was recently announced. Congratulations, Alpine team! On the .NET team, we are committed to supporting new Alpine versions quickly, and also need to define a policy for older versions. This policy only applies for the container images that we publish.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #933](https://github.com/dotnet/dotnet-docker/issues/933)\r\n\r\n## Policy\r\n\r\nWe intend to establish the following policy for supporting Alpine with .NET Core container images:\r\n\r\n* Support new Alpine versions within 60 days of release (hopefully much less).\r\n* Support n-1 Alpine versions for 3 months after we support a new Alpine version.\r\n\r\nNote: The [.NET Core support policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md) may be broader. This policy is specific to the container images we produce.\r\n\r\n## Plans\r\n\r\nWe're in the process of [fixing issues required to support Alpine 3.9](https://github.com/dotnet/dotnet-docker/issues/921). We expect that these issues will be resolved in February and that we'll be able to provide support for Alpine 3.9 in March.\r\n\r\nWe will produce Alpine 3.9 images for .NET Core 2.1, 2.2 and 3.0. Assuming we publish 3.9 images in March, we'll stop producing and supporting Alpine 3.7 and 3.8 images after June (2019).\r\n\r\n## Using Alpine-based .NET Core images\r\n\r\nWe produce a variety of Alpine-based images. You can either depend on a specific Alpine version, like with `microsoft/dotnet:2.2-sdk-alpine3.8` or opt to use the latest Alpine image we have to offer, like with `microsoft/dotnet:2.2-sdk-alpine`. Either are good choices. It is just a question of whether you want to make a conscious decision to move to later Alpine releases.\r\n\r\n## Support for ARM32?\r\n\r\nWe produce Alpine images for x64 (and ARM64, shortly). The [Alpine 3.9 announcement](https://twitter.com/alpinelinux/status/1090416212822110214) made mention of support for ARM32v7. We would like to enable .NET Core [Alpine-based images on ARM32](https://github.com/gliderlabs/docker-alpine/issues/463#issuecomment-460530395). We are patiently waiting for that to happen. If that's important to you, you should comment on that thread."},{"Id":"9060710562","Type":"IssuesEvent","CreatedAt":"2019-02-13T14:48:22","Actor":"TaraOverfield","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/98","RelatedDescription":"Opened issue \"February 2019 .NET Updates\" (#98) at dotnet/announcements","RelatedBody":"# February 2019 .NET Updates\r\nThe following .NET updates were released in February 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n* [.NET Framework January 2019 Security and Quality Rollup - February 12, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/02/13/net-framework-february-2019-security-and-quality-rollup/)\r\n\r\n## .NET Support Policies\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)"}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"9212475006","Type":"PullRequestEvent","CreatedAt":"2019-03-10T01:03:49","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/23154","RelatedDescription":"Merged pull request \"[master] Update dependencies from dotnet/corefx\" (#23154) at dotnet/coreclr","RelatedBody":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/corefx\r\n\r\n- Microsoft.NETCore.Platforms - 3.0.0-preview4.19158.7\r\n- Microsoft.Private.CoreFx.NETCoreApp - 4.6.0-preview4.19158.7\r\n\r\n"},{"Id":"9212468779","Type":"PullRequestEvent","CreatedAt":"2019-03-10T00:59:24","Actor":"franksinankaya","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/23162","RelatedDescription":"Opened pull request \"Fix implicit constructor calls and Remove multi-line comments\" (#23162) at dotnet/coreclr","RelatedBody":""},{"Id":"9212223054","Type":"PullRequestEvent","CreatedAt":"2019-03-09T22:14:16","Actor":"marek-safar","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/23161","RelatedDescription":"Opened pull request \"Use only BIT* defines in Buffer\" (#23161) at dotnet/coreclr","RelatedBody":""},{"Id":"9212197872","Type":"PullRequestEvent","CreatedAt":"2019-03-09T21:59:41","Actor":"Dotnet-GitSync-Bot","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/23160","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/corefx,corert\" (#23160) at dotnet/coreclr","RelatedBody":"This PR contains mirrored changes from dotnet/corefx,corert\n\n\n**Please REBASE this PR when merging**"},{"Id":"9212195092","Type":"PullRequestEvent","CreatedAt":"2019-03-09T21:58:05","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/23155","RelatedDescription":"Merged pull request \"[master] Update dependencies from dotnet/core-setup\" (#23155) at dotnet/coreclr","RelatedBody":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/core-setup\r\n\r\n- Microsoft.NETCore.App - 3.0.0-preview4-27508-16\r\n\r\n"},{"Id":"9212191141","Type":"PullRequestEvent","CreatedAt":"2019-03-09T21:55:44","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/23157","RelatedDescription":"Merged pull request \"Move Buffer to shared\" (#23157) at dotnet/coreclr","RelatedBody":"Tested on CoreRT with [Buffer.CoreRT.cs](https://gist.github.com/EgorBo/ec9b68373f02f636c6c1212fba72bbbe) locally:\r\n1) `IsPrimitiveTypeArray` is implemented as `return array.ElementEEType.IsPrimitive`\r\n2) `_ByteLength`, `BlockCopy` and `Memcpy` are not modified \r\n3) `__Memmove` is implemented as `RuntimeImports.memmove(dest, src, len);`\r\n\r\nPS: also, tested on mono\r\ncc @marek-safar "},{"Id":"9211989907","Type":"IssuesEvent","CreatedAt":"2019-03-09T20:04:56","Actor":"benaadams","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/23159","RelatedDescription":"Opened issue \"Vector<T> regression BadImageFormatException in release\" (#23159) at dotnet/coreclr","RelatedBody":"```\r\nC:\\Work\\BadImageFormat>dotnet run\r\nTrue\r\n\r\nC:\\Work\\BadImageFormat>dotnet run -c Release\r\n\r\nUnhandled Exception: System.BadImageFormatException: An attempt was made to load a program with an incorrect format. (0x8007000B)\r\n   at Program.BytesOrdinalEqualsStringAndAscii(String previousValue, Span`1 newValue)\r\n   at Program.Main(String[] args) in C:\\Work\\BadImageFormat\\Program.cs:line 15\r\n```\r\n\r\n```\r\nSystem.BadImageFormatException\r\n  HResult=0x8007000B\r\n  Message=An attempt was made to load a program with an incorrect format. (0x8007000B)\r\n  Source=BadImageFormat\r\n  StackTrace:\r\n   at Program.BytesOrdinalEqualsStringAndAscii(String previousValue, Span`1 newValue) in C:\\Work\\BadImageFormat\\Program.cs:line 136\r\n   at Program.Main(String[] args) in C:\\Work\\BadImageFormat\\Program.cs:line 16\r\n```\r\nRepo\r\n```csharp\r\nusing System;\r\nusing System.Diagnostics;\r\nusing System.Numerics;\r\nusing System.Runtime.CompilerServices;\r\nusing System.Runtime.InteropServices;\r\nusing System.Text;\r\n\r\nclass Program\r\n{\r\n    static void Main(string[] args)\r\n    {\r\n        var str = \"application/json,text/html;q=0.9,application/xhtml+xml;q=0.9,application/xml;q=0.8,*/*;q=0.7\";\r\n        var span = Encoding.ASCII.GetBytes(str).AsSpan();\r\n\r\n        Console.WriteLine(BytesOrdinalEqualsStringAndAscii(str, span));\r\n    }\r\n\r\n    [MethodImpl(MethodImplOptions.AggressiveOptimization)]\r\n    public unsafe static bool BytesOrdinalEqualsStringAndAscii(string previousValue, Span<byte> newValue)\r\n    {\r\n        // We just widen the bytes to char for comparision, if either the string or the bytes are not ascii\r\n        // this will result in non-equality, so we don't need to specifically test for non-ascii.\r\n        Debug.Assert(previousValue.Length == newValue.Length);\r\n\r\n        // Use IntPtr values rather than int, to avoid unnessary 32 -> 64 movs on 64-bit.\r\n        // Unfortunately this means we also need to cast to byte* for comparisions as IntPtr doesn't\r\n        // support operator comparisions (e.g. <=, >, etc).\r\n        // Note: Pointer comparision is unsigned, so we use the compare pattern (offset + length <= count)\r\n        // rather than (offset <= count - length) which we'd do with signed comparision to avoid overflow.\r\n        var count = (IntPtr)newValue.Length;\r\n        var offset = (IntPtr)0;\r\n\r\n        ref var bytes = ref MemoryMarshal.GetReference(newValue);\r\n        ref var str = ref MemoryMarshal.GetReference(previousValue.AsSpan());\r\n\r\n        do\r\n        {\r\n            // If Vector not-accelerated or remaining less than vector size\r\n            if (!Vector.IsHardwareAccelerated || (byte*)(offset + Vector<byte>.Count) > (byte*)count)\r\n            {\r\n                if (IntPtr.Size == 8) // Use Intrinsic switch for branch elimination\r\n                {\r\n                    // 64-bit: Loop longs by default\r\n                    while ((byte*)(offset + sizeof(long)) <= (byte*)count)\r\n                    {\r\n                        if (Unsafe.Add(ref str, offset) != (char)Unsafe.Add(ref bytes, offset) ||\r\n                            Unsafe.Add(ref str, offset + 1) != (char)Unsafe.Add(ref bytes, offset + 1) ||\r\n                            Unsafe.Add(ref str, offset + 2) != (char)Unsafe.Add(ref bytes, offset + 2) ||\r\n                            Unsafe.Add(ref str, offset + 3) != (char)Unsafe.Add(ref bytes, offset + 3) ||\r\n                            Unsafe.Add(ref str, offset + 4) != (char)Unsafe.Add(ref bytes, offset + 4) ||\r\n                            Unsafe.Add(ref str, offset + 5) != (char)Unsafe.Add(ref bytes, offset + 5) ||\r\n                            Unsafe.Add(ref str, offset + 6) != (char)Unsafe.Add(ref bytes, offset + 6) ||\r\n                            Unsafe.Add(ref str, offset + 7) != (char)Unsafe.Add(ref bytes, offset + 7))\r\n                        {\r\n                            goto NotEqual;\r\n                        }\r\n\r\n                        offset += sizeof(long);\r\n                    }\r\n                    if ((byte*)(offset + sizeof(int)) <= (byte*)count)\r\n                    {\r\n                        if (Unsafe.Add(ref str, offset) != (char)Unsafe.Add(ref bytes, offset) ||\r\n                            Unsafe.Add(ref str, offset + 1) != (char)Unsafe.Add(ref bytes, offset + 1) ||\r\n                            Unsafe.Add(ref str, offset + 2) != (char)Unsafe.Add(ref bytes, offset + 2) ||\r\n                            Unsafe.Add(ref str, offset + 3) != (char)Unsafe.Add(ref bytes, offset + 3))\r\n                        {\r\n                            goto NotEqual;\r\n                        }\r\n\r\n                        offset += sizeof(int);\r\n                    }\r\n                }\r\n                else\r\n                {\r\n                    // 32-bit: Loop ints by default\r\n                    while ((byte*)(offset + sizeof(int)) <= (byte*)count)\r\n                    {\r\n                        if (Unsafe.Add(ref str, offset) != (char)Unsafe.Add(ref bytes, offset) ||\r\n                            Unsafe.Add(ref str, offset + 1) != (char)Unsafe.Add(ref bytes, offset + 1) ||\r\n                            Unsafe.Add(ref str, offset + 2) != (char)Unsafe.Add(ref bytes, offset + 2) ||\r\n                            Unsafe.Add(ref str, offset + 3) != (char)Unsafe.Add(ref bytes, offset + 3))\r\n                        {\r\n                            goto NotEqual;\r\n                        }\r\n\r\n                        offset += sizeof(int);\r\n                    }\r\n                }\r\n                if ((byte*)(offset + sizeof(short)) <= (byte*)count)\r\n                {\r\n                    if (Unsafe.Add(ref str, offset) != (char)Unsafe.Add(ref bytes, offset) ||\r\n                        Unsafe.Add(ref str, offset + 1) != (char)Unsafe.Add(ref bytes, offset + 1))\r\n                    {\r\n                        goto NotEqual;\r\n                    }\r\n\r\n                    offset += sizeof(short);\r\n                }\r\n                if ((byte*)offset < (byte*)count)\r\n                {\r\n                    if (Unsafe.Add(ref str, offset) != (char)Unsafe.Add(ref bytes, offset))\r\n                    {\r\n                        goto NotEqual;\r\n                    }\r\n                }\r\n\r\n                return true;\r\n            }\r\n\r\n            // do/while as entry condition already checked\r\n            var AllTrue = new Vector<ushort>(ushort.MaxValue);\r\n            do\r\n            {\r\n                var vector = Unsafe.As<byte, Vector<byte>>(ref Unsafe.Add(ref bytes, offset));\r\n                Vector.Widen(vector, out var vector0, out var vector1);\r\n                var compare0 = Unsafe.As<char, Vector<ushort>>(ref Unsafe.Add(ref str, offset));\r\n                var compare1 = Unsafe.As<char, Vector<ushort>>(ref Unsafe.Add(ref str, offset + Vector<ushort>.Count));\r\n\r\n                if (!AllTrue.Equals(\r\n                    Vector.BitwiseAnd(\r\n                        Vector.Equals(compare0, vector0),\r\n                        Vector.Equals(compare1, vector1))))\r\n                {\r\n                    goto NotEqual;\r\n                }\r\n\r\n                offset += Vector<byte>.Count;\r\n            } while ((byte*)(offset + Vector<byte>.Count) <= (byte*)count);\r\n\r\n            // Vector path done, loop back to do non-Vector\r\n            // If is a exact multiple of vector size, bail now\r\n        } while ((byte*)offset < (byte*)count);\r\n\r\n        return true;\r\n    NotEqual:\r\n        return false;\r\n    }\r\n}\r\n```\r\nLastest nightly sdk from https://github.com/dotnet/core-sdk\r\n```\r\nC:\\Work\\BadImageFormat>dotnet --version\r\n3.0.100-preview4-010681\r\n\r\nC:\\Work\\BadImageFormat>dotnet --info\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview4-010681\r\n Commit:    5561b45f06\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18351\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview4-010681\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview4-27509-04\r\n  Commit:  1ca3ac91f6\r\n```"}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"9211555355","Type":"IssuesEvent","CreatedAt":"2019-03-09T16:22:23","Actor":"mika-s","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/10957","RelatedDescription":"Opened issue \"Metadata not shown for F# dlls when using dotnet cli\" (#10957) at dotnet/cli","RelatedBody":"This is similar to [this](https://github.com/Microsoft/visualfsharp/issues/5657) issue, but for the dotnet cli tool rather than when compiling with Visual Studio 2017.\r\n\r\nVersion 2.2.104 is the latest stable version as of this date, so this issue is filed for that particular version.\r\n\r\n## Steps to reproduce\r\n\r\n1. Create a folder and make a file called global.json in it. Add the following content to it and save:\r\n\r\n```json\r\n{\r\n  \"sdk\": {\r\n    \"version\": \"2.2.104\"\r\n  }\r\n}\r\n```\r\n\r\nThis forces dotnet to use version 2.2.104 in case the preview version (3.0) is installed. Run `dotnet --version` to verify.\r\n\r\n2. In the created folder, create a new solution with `dotnet new sln -o FSharpMetadata`.\r\n\r\n3. `cd FSharpMetadata`\r\n\r\n4. `dotnet new console -lang F# -o testproj`\r\n\r\n5. `dotnet sln add testproj`\r\n\r\n6. Open testproj.fsproj with an editor and add the following to the `PropertyGroup` element.\r\n\r\n```xml\r\n    <Authors>My author</Authors>\r\n    <AssemblyName>testproj</AssemblyName>\r\n    <RunPostBuildEvent>0</RunPostBuildEvent>\r\n    <Version>1.0.0</Version>\r\n    <AssemblyVersion>1.0.0.0</AssemblyVersion>\r\n    <FileVersion>1.0.0.0</FileVersion>\r\n```\r\n\r\n7. `dotnet build`\r\n\r\n8. `dotnet run --project testproj`\r\n\r\n9. Go to `FSharpMetadata\\testproj\\bin\\Debug\\netcoreapp2.2`, right click on testproj.dll and choose Properties. Go to the Details tab.\r\n\r\n## Expected  behavior\r\n\r\n1. *2.2.104* is shown in the console.\r\n\r\n2. FSharpMetadata folder created, with FSharpMetadata.sln in it.\r\n\r\n3. New working folder is *FSharpMetadata*.\r\n\r\n4. testproj folder created, with testproj.fsproj in it, as well as a few other files.\r\n\r\n5. testproj is added to the sln file.\r\n\r\n6. testproj.fsproj should look like this:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <OutputType>Exe</OutputType>\r\n    <TargetFramework>netcoreapp2.2</TargetFramework>\r\n    <Authors>My author</Authors>\r\n    <AssemblyName>testproj</AssemblyName>\r\n    <RunPostBuildEvent>0</RunPostBuildEvent>\r\n    <Version>1.0.0</Version>\r\n    <AssemblyVersion>1.0.0.0</AssemblyVersion>\r\n    <FileVersion>1.0.0.0</FileVersion>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <Compile Include=\"Program.fs\" />\r\n  </ItemGroup>\r\n\r\n</Project>\r\n```\r\n\r\n7. The project is build. testproj.dll is created.\r\n\r\n8.  *Hello World from F#!* is shown in the console. This is to test that building works.\r\n\r\n9. File description has content (e.g. testproj), File version has content (e.g. 1.0.0.0), Product name has content (e.g. testproj), Product version has content (1.0.0), Original filename has content (e.g. testproj.dll).\r\n\r\n## Actual behavior\r\n\r\nAs expected, except for 9). Only Type, Size and Date modified have values. It looks like the screenshots that I posted when I made VS issue. See [here](https://developercommunity.visualstudio.com/content/problem/336722/metadata-not-shown-for-f-dlls-for-net-core.html).\r\n\r\nIf you try to run the repro, but change language to C#, you will get proper metadata for the dll.\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.104\r\n Commit:    73f036d4ac\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17763\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.104\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview-27324-5\r\n  Commit:  63a01b08e5\r\n\r\n.NET Core SDKs installed:\r\n  1.0.0-preview2-003121 [C:\\Program Files\\dotnet\\sdk]\r\n  1.0.0-preview2-003131 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.104 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.201 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.202 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.400 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.402 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.403 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.503 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.104 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview-010184 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview-19075-0444 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.0.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview-27324-5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview-27325-3 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n\r\n## For searchability\r\n\r\nAttributeInfo"},{"Id":"9211231522","Type":"PullRequestEvent","CreatedAt":"2019-03-09T13:35:49","Actor":"dotnet-maestro[bot]","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/10953","RelatedDescription":"Merged pull request \"[master] Update dependencies from dotnet/arcade\" (#10953) at dotnet/cli","RelatedBody":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19157.23\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19158.5\r\n\r\n"},{"Id":"9211171981","Type":"PullRequestEvent","CreatedAt":"2019-03-09T13:02:06","Actor":"dotnet-maestro[bot]","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/10956","RelatedDescription":"Opened pull request \"[master] Update dependencies from dotnet/sdk\" (#10956) at dotnet/cli","RelatedBody":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/sdk\r\n\r\n- Microsoft.NET.Sdk - 3.0.100-preview4.19158.1\r\n\r\n"},{"Id":"9211065312","Type":"PullRequestEvent","CreatedAt":"2019-03-09T12:00:49","Actor":"dotnet-bot","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/10955","RelatedDescription":"Opened pull request \"Merge release/2.1.5xx to release/2.2.1xx\" (#10955) at dotnet/cli","RelatedBody":"\nThis is an automatically generated pull request from release/2.1.5xx into release/2.2.1xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1.5xx-to-release/2.2.1xx\ngit reset --hard upstream/release/2.2.1xx\ngit merge upstream/release/2.1.5xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.1.5xx-to-release/2.2.1xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"9211065244","Type":"PullRequestEvent","CreatedAt":"2019-03-09T12:00:47","Actor":"dotnet-bot","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/10954","RelatedDescription":"Opened pull request \"Merge release/2.1.5xx to release/2.1.6xx\" (#10954) at dotnet/cli","RelatedBody":"\nThis is an automatically generated pull request from release/2.1.5xx into release/2.1.6xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1.5xx-to-release/2.1.6xx\ngit reset --hard upstream/release/2.1.6xx\ngit merge upstream/release/2.1.5xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.1.5xx-to-release/2.1.6xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"9209932125","Type":"PullRequestEvent","CreatedAt":"2019-03-09T00:32:28","Actor":"stephentoub","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/1098","RelatedDescription":"Merged pull request \"Add dummy field to TypedReference\" (#1098) at dotnet/standard","RelatedBody":"cc: @terrajobst "},{"Id":"9204491584","Type":"PullRequestEvent","CreatedAt":"2019-03-08T07:35:44","Actor":"stephentoub","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/1098","RelatedDescription":"Opened pull request \"Add dummy field to TypedReference\" (#1098) at dotnet/standard","RelatedBody":"cc: @terrajobst "},{"Id":"9202448299","Type":"IssuesEvent","CreatedAt":"2019-03-07T22:27:38","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/1097","RelatedDescription":"Closed issue \"Change .NET Standard 2.1 version number\" (#1097) at dotnet/standard","RelatedBody":"It was just [announced ](https://devblogs.microsoft.com/dotnet/announcing-net-core-3-preview-3/#) that the next version of .NET Standard will be 2.1, which will be implemented by .NET Core 3.0 and incompatible with .NET Core 2.1 and incompatible with any version of .NET Framework. Got all that?\r\n\r\nI implore you to please change the version number of Standard 2.1 before it's too late. It is extremely confusing to have it be Standard 2.1 which is incompatible with Core 2.1. I strongly feel that Standard should version alongside of Core (given that Core is the lead implementation of .NET) and should be Standard 3.0\r\n\r\nIn lieu of that, at the very least it should get a version number which doesn't actively lead to confusion by aligning with the version number of an incompatible version of Core. Standard 2.5?\r\n\r\nI know Microsoft has a reputation to uphold at being horrible at naming things, but this is a bridge too far :)"},{"Id":"9201362694","Type":"IssuesEvent","CreatedAt":"2019-03-07T19:26:12","Actor":"MgSam","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/1097","RelatedDescription":"Opened issue \"Change .NET Standard 2.1 version number\" (#1097) at dotnet/standard","RelatedBody":"It was just [announced ](https://devblogs.microsoft.com/dotnet/announcing-net-core-3-preview-3/#) that the next version of .NET Standard will be 2.1, which will be implemented by .NET Core 3.0 and incompatible with .NET Core 2.1 and incompatible with any version of .NET Framework. Got all that?\r\n\r\nI implore you to please change the version number of Standard 2.1 before it's too late. It is extremely confusing to have it be Standard 2.1 which is incompatible with Core 2.1. I strongly feel that Standard should version alongside of Core (given that Core is the lead implementation of .NET) and should be Standard 3.0\r\n\r\nIn lieu of that, at the very least it should get a version number which doesn't actively lead to confusion by aligning with the version number of an incompatible version of Core. Standard 2.5?\r\n\r\nI know Microsoft has a reputation to uphold at being horrible at naming things, but this is a bridge too far : )"}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"9212816577","Type":"PullRequestEvent","CreatedAt":"2019-03-10T05:22:45","Actor":"davidsh","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/35918","RelatedDescription":"Merged pull request \"Fix NetEventSource logging for Windows auth on Linux\" (#35918) at dotnet/corefx","RelatedBody":"While debugging some Linux enterprise auth (Negotiate/NTLM) scenarios, I discovered that the\r\nlogging I added in PR #35383 wasn't working. This was due to not passing in a 'null' value\r\nfor the context object for NetEventSource.Info. It was using the string object as the\r\ncontext object and not logging the string data.\r\n\r\nAs part of fixing that I optimized some code for remembering what auth package (NTLM\r\nor SPNEGO) is used."},{"Id":"9212750305","Type":"PullRequestEvent","CreatedAt":"2019-03-10T04:30:10","Actor":"WinCPP","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/35919","RelatedDescription":"Opened pull request \"Linked doc for debugging tests in Visual Studio\" (#35919) at dotnet/corefx","RelatedBody":"While searching how to debug one specific test case using Visual Studio, I ended up on section \"Debugging tests in Visual Studio\" in this doc, but more information was somewhere else. So proposing this change to provide a link so that developers are led to proper page that has information on advanced features.\r\n\r\n@karelz @ahsonkhan "},{"Id":"9212558818","Type":"PullRequestEvent","CreatedAt":"2019-03-10T02:05:56","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/35917","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/corert,coreclr\" (#35917) at dotnet/corefx","RelatedBody":"This PR contains mirrored changes from dotnet/corert,coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @EgorBo"},{"Id":"9212528651","Type":"PullRequestEvent","CreatedAt":"2019-03-10T01:43:03","Actor":"davidsh","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/35918","RelatedDescription":"Opened pull request \"Fix NetEventSource logging for Windows auth on Linux\" (#35918) at dotnet/corefx","RelatedBody":"While debugging some Linux enterprise auth (Negotiate/NTLM) scenarios, I discoverd that the\r\nlogging I added in PR #35383 wasn't working. This was due to not passing in a 'null' value\r\nfor the context object for NetEventSource.Info. It was using the string object as the\r\ncontext object and not logging the string data.\r\n\r\nAs part of fixing that I optimized some code for remembering what auth package (NTLM\r\nor SPNEGO) is used."},{"Id":"9212506506","Type":"IssuesEvent","CreatedAt":"2019-03-10T01:26:33","Actor":"Drawaes","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/35843","RelatedDescription":"Closed issue \"Unable to get any tests to run anymore\" (#35843) at dotnet/corefx","RelatedBody":"Haven't done a pull for about 2 weeks with various VS updates in the meantime. \r\n\r\nI tried both a VS 2019 and VS 2017 command prompt as well as a \"default command prompt\"\r\n\r\nI have now removed VS 2019, still same result\r\n\r\n.\\build.cmd in a fresh folder, freshly cloned from the corefx repo.\r\n\r\nhowever .\\build.cmd -test comes back with a lot of the below (once for each test set) locally the highest .net I have installed is 2.2\r\n\r\n```\r\n  ----- end 23:58:24.43 ----- exit code -2147450735 ----------------------------------------------------------\r\nC:\\Users\\timan\\.nuget\\packages\\microsoft.dotnet.corefxtesting\\1.0.0-beta.19128.2\\build\\core\\Core.targets(190,5): error MSB3073: The command \"C:\\code\\corefx2\\artifacts\\bin\\tests\\System.Xml.RW.CharCheckingReader.Tests\\netcoreapp-Windows_NT-Debug-x64\\RunTests.cmd C:\\code\\corefx2\\artifacts\\bin\\testhost/netcoreapp-Windows_NT-Debug-x64/ C:\\code\\corefx2\\.dotnet\\ C:\\code\\corefx2\\artifacts\\tools\\\" exited with code -2147450735. [C:\\code\\corefx2\\src\\System.Private.Xml\\tests\\Readers\\CharCheckingReader\\System.Xml.RW.CharCheckingReader.Tests.csproj]\r\nC:\\Users\\timan\\.nuget\\packages\\microsoft.dotnet.corefxtesting\\1.0.0-beta.19128.2\\build\\core\\Core.targets(190,5): error MSB3073: The command \"C:\\code\\corefx2\\artifacts\\bin\\tests\\System.Xml.RW.SubtreeReader.Tests\\netcoreapp-Windows_NT-Debug-x64\\RunTests.cmd C:\\code\\corefx2\\artifacts\\bin\\testhost/netcoreapp-Windows_NT-Debug-x64/ C:\\code\\corefx2\\.dotnet\\ C:\\code\\corefx2\\artifacts\\tools\\\" exited with code -2147450735. [C:\\code\\corefx2\\src\\System.Private.Xml\\tests\\Readers\\SubtreeReader\\System.Xml.RW.SubtreeReader.Tests.csproj]\r\nC:\\Users\\timan\\.nuget\\packages\\microsoft.dotnet.corefxtesting\\1.0.0-beta.19128.2\\build\\core\\Core.targets(201,5): error : One or more tests failed while running tests from 'System.Xml.RW.CharCheckingReader.Tests'. [C:\\code\\corefx2\\src\\System.Private.Xml\\tests\\Readers\\CharCheckingReader\\System.Xml.RW.CharCheckingReader.Tests.csproj]\r\nC:\\Users\\timan\\.nuget\\packages\\microsoft.dotnet.corefxtesting\\1.0.0-beta.19128.2\\build\\core\\Core.targets(201,5): error : One or more tests failed while running tests from 'System.Xml.RW.SubtreeReader.Tests'. [C:\\code\\corefx2\\src\\System.Private.Xml\\tests\\Readers\\SubtreeReader\\System.Xml.RW.SubtreeReader.Tests.csproj]\r\n  ----- start 23:58:37.64 ===============  To repro directly: =====================================================\r\n  pushd C:\\code\\corefx2\\artifacts\\bin\\tests\\System.Xml.RW.FactoryReader.Tests\\netcoreapp-Windows_NT-Debug-x64\\\r\n  C:\\code\\corefx2\\artifacts\\bin\\testhost\\netcoreapp-Windows_NT-Debug-x64\\dotnet.exe xunit.console.dll System.Xml.RW.FactoryReader.Tests.dll -xml testResults.xml -nologo -notrait category=nonnetcoreapptests -notrait category=nonwindowstests -notrait category=failing -notrait category=OuterLoop\r\n  popd\r\n  ===========================================================================================================\r\n    It was not possible to find any installed dotnet SDKs\r\n    Did you mean to run dotnet SDK commands? Please install dotnet SDK from:\r\n        https://aka.ms/dotnet-download\r\n  ----- end 23:58:37.71 ----- exit code -2147450735 ----------------------------------------------------------\r\n```"},{"Id":"9212392524","Type":"PullRequestEvent","CreatedAt":"2019-03-10T00:04:03","Actor":"Dotnet-GitSync-Bot","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/35917","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/corert,coreclr\" (#35917) at dotnet/corefx","RelatedBody":"This PR contains mirrored changes from dotnet/corert,coreclr\n\n\n**Please REBASE this PR when merging**"}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"9212794790","Type":"PullRequestEvent","CreatedAt":"2019-03-10T05:05:37","Actor":"jcouv","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/34004","RelatedDescription":"Opened pull request \"Warn on locking null\" (#34004) at dotnet/roslyn","RelatedBody":"Fixes https://github.com/dotnet/roslyn/issues/26810"},{"Id":"9212601555","Type":"PullRequestEvent","CreatedAt":"2019-03-10T02:37:30","Actor":"AlekseyTs","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/33804","RelatedDescription":"Merged pull request \"Execute test scenarios on mono\" (#33804) at dotnet/roslyn","RelatedBody":""},{"Id":"9212550274","Type":"PullRequestEvent","CreatedAt":"2019-03-10T01:59:45","Actor":"tmat","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/34003","RelatedDescription":"Opened pull request \"Use Arcade x-plat resx generator\" (#34003) at dotnet/roslyn","RelatedBody":""},{"Id":"9212491417","Type":"IssuesEvent","CreatedAt":"2019-03-10T01:15:33","Actor":"tmat","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/34002","RelatedDescription":"Opened issue \"Remove Roslyn.VisualStudio.InteractiveComponents.vsix\" (#34002) at dotnet/roslyn","RelatedBody":"We generate this VSIX only to override previously installed versions.\r\nOnce we move to newer VS drop (dev16.0) that doesn't have this VSIX installed we can disable generating VSIX container for this project.\r\n"}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"9212401672","Type":"IssuesEvent","CreatedAt":"2019-03-10T00:10:01","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/issues/4594","RelatedDescription":"Closed issue \"CoreRT doesn't build on Debian 9 (Stretch) due to lack of OpenSSL 1.0\" (#4594) at dotnet/corert","RelatedBody":"CoreRT requires OpenSSL 1.0 to build, but this package is not available on Debian Stretch. Hopefully, you guys can update the scripts.\r\n\r\nBuild fails with a message: `\"No usable version of the libssl was found\"`.\r\n\r\n### Steps to Reproduce\r\nDockerfile:\r\n```Dockerfile\r\nFROM microsoft/dotnet:2-sdk\r\n\r\nRUN  apt-get update  && \\\r\n     apt-get -y install cmake build-essential clang-3.9 libicu57 libunwind8 libunwind-dev \\\r\n     uuid-dev nano libssl1.0.2\r\n\r\nRUN  cd / && git clone https://github.com/dotnet/corert.git  && \\\r\n     cd corert && ./build.sh clean Release\r\n\r\nENV  IlcPath /corert/bin/Linux.x64.Release\r\n```\r\n\r\n`$ docker build .`\r\n\r\nSimilar issue: https://github.com/dotnet/core/issues/649\r\n\r\nHere's the full output:\r\n![image](https://user-images.githubusercontent.com/1805832/30744151-576f0d84-9fd3-11e7-8e34-1170ca35ed84.png)\r\n\r\n"},{"Id":"9212393473","Type":"PullRequestEvent","CreatedAt":"2019-03-10T00:04:42","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7142","RelatedDescription":"Opened pull request \"Use latest servicing patch of .NET Core 2.1\" (#7142) at dotnet/corert","RelatedBody":"Fixes #7141"},{"Id":"9212200692","Type":"IssuesEvent","CreatedAt":"2019-03-09T22:01:12","Actor":"dhcgn","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/issues/7141","RelatedDescription":"Opened issue \"Simple Console App fails to publish with ubuntu 19.04 (No usable version of the libssl was found)\" (#7141) at dotnet/corert","RelatedBody":"I installed a fresh ubuntu 19.04 in hyper-v and tried the [console sample](https://github.com/dotnet/corert/tree/master/samples/HelloWorld).\r\n\r\nBut I get the error:\r\n\r\n> No usable version of the libssl was found\r\n\r\n**Steps to reproduce:**\r\n\r\n1. Create project\r\n    1. `sudo snap install dotnet-sdk --classic`\r\n    2. `sudo snap alias dotnet-sdk.dotnet dotnet`\r\n    3. `dotnet new console -o HelloWorld`\r\n    4. `cd HelloWorld`\r\n    5. `dotnet run` **Works!**\r\n2. Add ILCompiler \r\n    6. `dotnet new nuget`\r\n    7. `nuget.config` add packageSources\r\n    8. `dotnet add package Microsoft.DotNet.ILCompiler -v 1.0.0-alpha-*`\r\n3. Install pre-requisites \r\n    9. `echo \"deb http://llvm.org/apt/xenial/ llvm-toolchain-xenial-3.9 main\" | sudo tee /etc/apt/sources.list.d/llvm.list`\r\n    10. `wget -O - http://llvm.org/apt/llvm-snapshot.gpg.key | sudo apt-key add -`\r\n    11. `sudo apt-get update`\r\n    12. `sudo apt-get install cmake clang-3.9 uuid-dev libcurl4-openssl-dev zlib1g-dev libkrb5-dev`\r\n13. Install libicu55\r\n    1. `sudo add-apt-repository \"deb http://security.ubuntu.com/ubuntu xenial-security main\"`\r\n    2. `sudo apt-get update`\r\n    3. `sudo apt-get install libicu55`\r\n13. `dotnet publish -r linux-x64 -c release` Error \"No usable version of the libssl was found\"\r\n\r\n**Logging:**\r\n\r\n```\r\nMicrosoft (R) Build Engine version 15.9.20+g88f5fadfbe for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  Restoring packages for /home/daniel/HelloWorld/HelloWorld.csproj...\r\n  Installing Microsoft.NETCore.DotNetAppHost 2.2.2.\r\n  Installing Microsoft.NETCore.DotNetHostResolver 2.2.2.\r\n  Installing Microsoft.NETCore.DotNetHostPolicy 2.2.2.\r\n  Installing Microsoft.NETCore.App 2.2.2.\r\n  Installing runtime.linux-x64.Microsoft.NETCore.DotNetAppHost 2.2.2.\r\n  Installing runtime.linux-x64.Microsoft.NETCore.DotNetHostResolver 2.2.2.\r\n  Installing runtime.linux-x64.Microsoft.NETCore.DotNetHostPolicy 2.2.2.\r\n  Installing runtime.linux-x64.Microsoft.DotNet.ILCompiler 1.0.0-alpha-27509-01.\r\n  Installing runtime.linux-x64.Microsoft.NETCore.App 2.2.2.\r\n  Generating MSBuild file /home/daniel/HelloWorld/obj/HelloWorld.csproj.nuget.g.props.\r\n  Generating MSBuild file /home/daniel/HelloWorld/obj/HelloWorld.csproj.nuget.g.targets.\r\n  Restore completed in 1.25 min for /home/daniel/HelloWorld/HelloWorld.csproj.\r\n  HelloWorld -> /home/daniel/HelloWorld/bin/release/netcoreapp2.2/linux-x64/HelloWorld.dll\r\n  /bin/clang-3.9\r\n  Generating compatible native code. To optimize for size or speed, visit https://aka.ms/OptimizeCoreRT\r\n  No usable version of the libssl was found\r\n  Aborted (core dumped)\r\n/home/daniel/.nuget/packages/microsoft.dotnet.ilcompiler/1.0.0-alpha-27509-01/build/Microsoft.NETCore.Native.targets(235,5): error MSB3073: The command \"\"/home/daniel/.nuget/packages/runtime.linux-x64.microsoft.dotnet.ilcompiler/1.0.0-alpha-27509-01/tools/ilc\" @\"obj/release/netcoreapp2.2/linux-x64/native/HelloWorld.ilc.rsp\"\" exited with code 134. [/home/daniel/HelloWorld/HelloWorld.csproj]\r\n```\r\n\r\n**Ubuntu**\r\n\r\n```\r\ndaniel@vm:~/HelloWorld$ uname -a\r\nLinux vm 4.19.0-13-generic #14-Ubuntu SMP Thu Feb 7 21:51:25 UTC 2019 x86_64 x86_64 x86_64 GNU/Linux\r\ndaniel@vm:~/HelloWorld$  lsb_release -a\r\nNo LSB modules are available.\r\nDistributor ID:\tUbuntu\r\nDescription:\tUbuntu Disco Dingo (development branch)\r\nRelease:\t19.04\r\nCodename:\tdisco\r\n```\r\n\r\n"},{"Id":"9212198100","Type":"PullRequestEvent","CreatedAt":"2019-03-09T21:59:48","Actor":"Dotnet-GitSync-Bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7140","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/corefx,coreclr\" (#7140) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/corefx,coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"9212189851","Type":"PullRequestEvent","CreatedAt":"2019-03-09T21:54:58","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7138","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#7138) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub"},{"Id":"9211730111","Type":"IssuesEvent","CreatedAt":"2019-03-09T17:48:53","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/issues/7121","RelatedDescription":"Closed issue \"linux-arm not supported yet.\" (#7121) at dotnet/corert","RelatedBody":"I'm building with the following command:\r\n\r\n    dotnet publish -c Release -r linux-arm --self-contained true\r\n\r\nI'm getting the follow message when trying to build for linux arm:\r\n\r\n    /.nuget/packages/microsoft.dotnet.ilcompiler/1.0.0-alpha-27505-01/build/Microsoft.NETCore.Native.Publish.targets(65,5): error : linux-arm not supported yet. https://github.com/dotnet/corert/issues/4589\r\n\r\nThat issue link is about x86....\r\n\r\nThe readme says that Linux ARM is supported w/ RyuJIT codegen\r\n\r\n\r\n"},{"Id":"9211724916","Type":"PullRequestEvent","CreatedAt":"2019-03-09T17:46:10","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7139","RelatedDescription":"Opened pull request \"Add task to dump Win32 resources\" (#7139) at dotnet/corert","RelatedBody":"This task extracts Win32 resources from the main managed assembly into a RES file that we subsequently pass as input to the platform linker.\r\n\r\nFixes #5095."},{"Id":"9211600688","Type":"PullRequestEvent","CreatedAt":"2019-03-09T16:44:40","Actor":"Dotnet-GitSync-Bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7138","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#7138) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"9211575137","Type":"PullRequestEvent","CreatedAt":"2019-03-09T16:31:58","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7136","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#7136) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @marek-safar"},{"Id":"9211393720","Type":"PullRequestEvent","CreatedAt":"2019-03-09T15:02:35","Actor":"yowl","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7137","RelatedDescription":"Opened pull request \"WIP: WASM: Add exception handling - emit EHInfo data\" (#7137) at dotnet/corert","RelatedBody":"These changes include @morganbr's Exception handling work for wasm and emit the EHInfo data that will be used in the landing pads.  This follows the ideas set out at https://github.com/dotnet/corert/issues/4655#issuecomment-361201665.  The EHInfo is copied from `src\\ILCompiler.RyuJit\\src\\JitInterface\\CorInfoImpl.RyuJit.cs` and there are quite a few comments and debug code to be cleared up later.  For now a review of the throwing of the exception and the emission of the EHInfo would be useful to ensure that the direction is ok.\r\n\r\nThe LLVM output of the code so far will include (as well as the incomplete landing pads), the EHInfo written out as global blob symbols :\r\n```\r\n@HelloWasm_Program__TestDispose___EHInfo = global [2 x i32*] [i32* bitcast (i8* getelementptr (i8, i8* null, i32 -1055971326) to i32*), i32* bitcast (i8* getelementptr (i8, i8* null, i32 822083583) to i32*)]\r\n@HelloWasm_Program__TestTryCatchNoException___EHInfo = global [3 x i32*] [i32* bitcast (i8* getelementptr (i8, i8* null, i32 -267445246) to i32*), i32* bitcast (i8* getelementptr (i8, i8* null, i32 822083583) to i32*), i32* null]\r\n@HelloWasm_Program__TestTryCatchThrowException___EHInfo = global [3 x i32*] [i32* bitcast (i8* getelementptr (i8, i8* null, i32 -737207294) to i32*), i32* bitcast (i8* getelementptr (i8, i8* null, i32 587202559) to i32*), i32* null]\r\n@HelloWasm_Program__TryFinallyInner___EHInfo = global [1 x i32*] [i32* bitcast (i8* getelementptr (i8, i8* null, i32 405931522) to i32*)]\r\n```"},{"Id":"9210467620","Type":"PullRequestEvent","CreatedAt":"2019-03-09T05:34:48","Actor":"Dotnet-GitSync-Bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7136","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#7136) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"9210247096","Type":"PullRequestEvent","CreatedAt":"2019-03-09T03:02:03","Actor":"nattress","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7134","RelatedDescription":"Merged pull request \"Make CoreCLR R2R test switch case insensitive\" (#7134) at dotnet/corert","RelatedBody":"Our CI has been running the CoreCLR R2R tests in JIT mode due to netci.groovy passing in /mode ReadyToRun and the check looking for 'readytorun'."},{"Id":"9210194207","Type":"PullRequestEvent","CreatedAt":"2019-03-09T02:30:21","Actor":"nattress","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7135","RelatedDescription":"Opened pull request \"Fix up metadata RVAs for R2R images\" (#7135) at dotnet/corert","RelatedBody":"IL metadata contains RVAs (to method entry points and field initial values). If the managed .text section is shifted in the output image with respect to the input image, we cannot copy it verbatim and must update the RVAs.\r\n\r\nWhen copying the input .text section to the output image, fix up RVAs in the metadata. This is done in a targetted manner to avoid having to fully deserialize the metadata and re-encode it.\r\n\r\nThe impetus for this fix is to allow CPAOT to re-compile ready-to-run images produced by Crossgen. Crossgen switches section ordering and puts .data before .text which invalidates all the metadata RVAs."},{"Id":"9209815039","Type":"PullRequestEvent","CreatedAt":"2019-03-08T23:54:04","Actor":"nattress","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7134","RelatedDescription":"Opened pull request \"Make CoreCLR R2R test switch case insensitive\" (#7134) at dotnet/corert","RelatedBody":"Our CI has been running the CoreCLR R2R tests in JIT mode due to netci.groovy passing in /mode ReadyToRun and the check looking for 'readytorun'."},{"Id":"9209637862","Type":"PullRequestEvent","CreatedAt":"2019-03-08T23:04:37","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7133","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#7133) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @ahoefling @ahoefling @ahoefling @ahoefling @ahoefling @ahoefling @ahoefling @ahoefling @ahoefling @ahoefling @ahoefling @ahoefling @ahoefling @ahoefling @ahoefling @ahoefling @ahoefling"}],"ResultType":"GitHubEvent"},"SDK":{"Events":[{"Id":"9211305838","Type":"PullRequestEvent","CreatedAt":"2019-03-09T14:16:04","Actor":"dotnet-maestro[bot]","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/3015","RelatedDescription":"Merged pull request \"[master] Update dependencies from dotnet/arcade\" (#3015) at dotnet/sdk","RelatedBody":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19158.5\r\n- Microsoft.DotNet.SignTool - 1.0.0-beta.19158.5\r\n\r\n"},{"Id":"9211169368","Type":"PullRequestEvent","CreatedAt":"2019-03-09T13:00:40","Actor":"dotnet-maestro[bot]","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/3015","RelatedDescription":"Opened pull request \"[master] Update dependencies from dotnet/arcade\" (#3015) at dotnet/sdk","RelatedBody":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19158.5\r\n- Microsoft.DotNet.SignTool - 1.0.0-beta.19158.5\r\n\r\n"}],"ResultType":"GitHubEvent"},"Home-Issues":{"Issues":[{"Id":"391459677","IsPullRequest":false,"CreatedAt":"2019-03-08T19:00:06","Actor":"manne","Number":"123","RawContent":null,"Title":"Missing logo for Steeltoe","State":"closed","Body":"`https://brandfolder.com/pivotal-assets/attachments/ohxttd-7yxa60-clvf50/pivotal-assets-pivotal-genericfile.png` redirects to a sign in page\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L128-L130","Url":"https://github.com/dotnet/foundation/issues/123","RelatedDescription":"Closed issue \"Missing logo for Steeltoe\" (#123)"},{"Id":"417018694","IsPullRequest":true,"CreatedAt":"2019-03-08T18:59:32","Actor":"jkonicki","Number":"136","RawContent":null,"Title":"Fix logo and update team contributors","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/136","RelatedDescription":"Closed or merged PR \"Fix logo and update team contributors\" (#136)"},{"Id":"416428925","IsPullRequest":true,"CreatedAt":"2019-03-08T18:59:00","Actor":"manne","Number":"135","RawContent":null,"Title":"adds Umbraco logo","State":"closed","Body":"fixes #124 ","Url":"https://github.com/dotnet/foundation/pull/135","RelatedDescription":"Closed or merged PR \"adds Umbraco logo\" (#135)"},{"Id":"391459812","IsPullRequest":false,"CreatedAt":"2019-03-08T18:59:00","Actor":"manne","Number":"124","RawContent":null,"Title":"Missing logo for Umbraco","State":"closed","Body":"`https://fbcdn-profile-a.akamaihd.net/hprofile-ak-xap1/v/t1.0-1/p160x160/971596_519168901464439_566592989_n.png?oh=ce61e5b4cbd60c0d99c4164cbb05a434&oe=54F091C9&__gda__=1424472439_c9f76213a915bc2af88246f464f29e8b` results in a 404.\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L149-L151","Url":"https://github.com/dotnet/foundation/issues/124","RelatedDescription":"Closed issue \"Missing logo for Umbraco\" (#124)"},{"Id":"416427614","IsPullRequest":true,"CreatedAt":"2019-03-08T18:58:45","Actor":"manne","Number":"134","RawContent":null,"Title":"adds the prism logo","State":"closed","Body":"fixes #126 ","Url":"https://github.com/dotnet/foundation/pull/134","RelatedDescription":"Closed or merged PR \"adds the prism logo\" (#134)"},{"Id":"391460225","IsPullRequest":false,"CreatedAt":"2019-03-08T18:58:44","Actor":"manne","Number":"126","RawContent":null,"Title":"No logo provided for Prism","State":"closed","Body":"Can/should this [image](http://prismlibrary.github.io/images/logo-prism-symbol@2x.png) be used?\r\n\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L155-L157","Url":"https://github.com/dotnet/foundation/issues/126","RelatedDescription":"Closed issue \"No logo provided for Prism\" (#126)"},{"Id":"416157860","IsPullRequest":true,"CreatedAt":"2019-03-08T18:58:26","Actor":"glennawatson","Number":"133","RawContent":null,"Title":"Add additional ReactiveUI organization projects.","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/133","RelatedDescription":"Closed or merged PR \"Add additional ReactiveUI organization projects.\" (#133)"},{"Id":"407251900","IsPullRequest":true,"CreatedAt":"2019-02-18T17:45:44","Actor":"Potapy4","Number":"132","RawContent":null,"Title":"Update MVVM project logo","State":"closed","Body":"Fixes dotnet/dotnetfoundation-website#72\r\nFixes #125","Url":"https://github.com/dotnet/foundation/pull/132","RelatedDescription":"Closed or merged PR \"Update MVVM project logo\" (#132)"},{"Id":"391459919","IsPullRequest":false,"CreatedAt":"2019-02-18T17:45:44","Actor":"manne","Number":"125","RawContent":null,"Title":"Missing logo for MVVM Light Toolkit","State":"closed","Body":"`https://raw.githubusercontent.com/paulcbetts/mvvmlight/master/Installer/InstallItems/html/MVVM_BlackText_190x147.png` results in a 404.\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L137-L139","Url":"https://github.com/dotnet/foundation/issues/125","RelatedDescription":"Closed issue \"Missing logo for MVVM Light Toolkit\" (#125)"},{"Id":"406210463","IsPullRequest":true,"CreatedAt":"2019-02-18T17:44:39","Actor":"NextTurn","Number":"131","RawContent":null,"Title":"Update links","State":"closed","Body":"Replace http links with https where possible - both returned 200 OK.","Url":"https://github.com/dotnet/foundation/pull/131","RelatedDescription":"Closed or merged PR \"Update links\" (#131)"},{"Id":"399191617","IsPullRequest":true,"CreatedAt":"2019-02-02T11:04:15","Actor":"NextTurn","Number":"130","RawContent":null,"Title":"Update links","State":"closed","Body":"OpenXmlDeveloper.org was shut down long ago.\r\n\r\nThe content has been moved to EricWhite.com.","Url":"https://github.com/dotnet/foundation/pull/130","RelatedDescription":"Closed or merged PR \"Update links\" (#130)"},{"Id":"395863354","IsPullRequest":true,"CreatedAt":"2019-01-09T22:28:14","Actor":"ErikEJ","Number":"128","RawContent":null,"Title":"Update of EF description","State":"closed","Body":"@divega !","Url":"https://github.com/dotnet/foundation/pull/128","RelatedDescription":"Closed or merged PR \"Update of EF description\" (#128)"},{"Id":"395901602","IsPullRequest":true,"CreatedAt":"2019-01-05T03:23:39","Actor":"MarcBruins","Number":"129","RawContent":null,"Title":"Update to absolute path","State":"closed","Body":"Update to absolute path so that when this list is copied the link will actually work","Url":"https://github.com/dotnet/foundation/pull/129","RelatedDescription":"Closed or merged PR \"Update to absolute path\" (#129)"},{"Id":"395705579","IsPullRequest":true,"CreatedAt":"2019-01-04T00:22:42","Actor":"carloscds","Number":"127","RawContent":null,"Title":"Update documentation information","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/127","RelatedDescription":"Closed or merged PR \"Update documentation information\" (#127)"},{"Id":"391459057","IsPullRequest":true,"CreatedAt":"2019-01-03T04:47:09","Actor":"manne","Number":"122","RawContent":null,"Title":"targets the existing document","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/122","RelatedDescription":"Closed or merged PR \"targets the existing document\" (#122)"},{"Id":"384569679","IsPullRequest":true,"CreatedAt":"2019-01-03T04:46:31","Actor":"JamesNK","Number":"121","RawContent":null,"Title":"Add Newtonsoft.Json","State":"closed","Body":"// @jongalloway ","Url":"https://github.com/dotnet/foundation/pull/121","RelatedDescription":"Closed or merged PR \"Add Newtonsoft.Json\" (#121)"},{"Id":"384212839","IsPullRequest":true,"CreatedAt":"2018-11-26T09:33:50","Actor":"stefanov-stefan","Number":"120","RawContent":null,"Title":"Added Telerik info","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/120","RelatedDescription":"Closed or merged PR \"Added Telerik info\" (#120)"},{"Id":"384212448","IsPullRequest":true,"CreatedAt":"2018-11-26T09:33:22","Actor":"stefanov-stefan","Number":"119","RawContent":null,"Title":"Added Telerik UWP proj","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/119","RelatedDescription":"Closed or merged PR \"Added Telerik UWP proj\" (#119)"},{"Id":"382378851","IsPullRequest":true,"CreatedAt":"2018-11-23T10:32:15","Actor":"pkgw","Number":"118","RawContent":null,"Title":"Update WorldWide Telescope","State":"closed","Body":"Some layout fixes, but the main change is that @pkgw is now the project director.","Url":"https://github.com/dotnet/foundation/pull/118","RelatedDescription":"Closed or merged PR \"Update WorldWide Telescope\" (#118)"},{"Id":"380070557","IsPullRequest":true,"CreatedAt":"2018-11-23T10:31:49","Actor":"leastprivilege","Number":"117","RawContent":null,"Title":"Update identityserver.md","State":"closed","Body":"significant whitespace","Url":"https://github.com/dotnet/foundation/pull/117","RelatedDescription":"Closed or merged PR \"Update identityserver.md\" (#117)"},{"Id":"379731798","IsPullRequest":true,"CreatedAt":"2018-11-13T04:22:32","Actor":"leastprivilege","Number":"114","RawContent":null,"Title":"Update identityserver.md","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/114","RelatedDescription":"Closed or merged PR \"Update identityserver.md\" (#114)"},{"Id":"379777451","IsPullRequest":true,"CreatedAt":"2018-11-13T04:21:35","Actor":"scottbrady91","Number":"116","RawContent":null,"Title":"Update to IdentityManager project","State":"closed","Body":"My employer and I have recently taken over the IdentityManager project from Dom & Brock. I've updated the IdentityManager page to reflect this and the newer version of the core repo.","Url":"https://github.com/dotnet/foundation/pull/116","RelatedDescription":"Closed or merged PR \"Update to IdentityManager project\" (#116)"},{"Id":"379733880","IsPullRequest":true,"CreatedAt":"2018-11-13T04:20:23","Actor":"leastprivilege","Number":"115","RawContent":null,"Title":"Create identitymodel.md","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/115","RelatedDescription":"Closed or merged PR \"Create identitymodel.md\" (#115)"},{"Id":"371941750","IsPullRequest":true,"CreatedAt":"2018-11-01T16:20:07","Actor":"SeanKilleen","Number":"113","RawContent":null,"Title":"Update logo for couchbase-lite in projects.json","State":"closed","Body":"Uses a working link to the logo.\r\n\r\nResolves https://github.com/dotnet/dotnetfoundation-website/issues/65\r\n\r\nFix can be verified by copying/pasting the URL into a browser.","Url":"https://github.com/dotnet/foundation/pull/113","RelatedDescription":"Closed or merged PR \"Update logo for couchbase-lite in projects.json\" (#113)"},{"Id":"365089074","IsPullRequest":false,"CreatedAt":"2018-09-29T02:45:47","Actor":"athinboy","Number":"112","RawContent":null,"Title":"Suggest: key  F12  go to source code of dotnetcore  rather then metadata","State":"open","Body":"Apology for my poor english!\r\n\r\nI have change to Java due to the boss's decision .   I think dotnet  need a big change. In China, more and more dotnet project go to die,  but new java project continuously increase!\r\n\r\nI suggest:key  F12  go to source code of dotnetcore  rather then metadata(e.g.    ***.dll.source.zip \\****.exe.source.zip),   maybe there is already done,but i don't know. \r\n\r\nthanks!\r\n","Url":"https://github.com/dotnet/foundation/issues/112","RelatedDescription":"Open issue \"Suggest: key  F12  go to source code of dotnetcore  rather then metadata\" (#112)"},{"Id":"356296763","IsPullRequest":false,"CreatedAt":"2018-09-02T16:49:34","Actor":"adamralph","Number":"111","RawContent":null,"Title":"Sourcelink location is confusing","State":"open","Body":"The README has link under the \"Cameron Taggart\" section pointing to https://github.com/ctaggart/SourceLink but the project now seems to live under the \"dotnet\" org in https://github.com/dotnet/sourcelink/ which suggests the link should be changed to that, and moved under the \"Microsoft\" section.","Url":"https://github.com/dotnet/foundation/issues/111","RelatedDescription":"Open issue \"Sourcelink location is confusing\" (#111)"},{"Id":"353832272","IsPullRequest":true,"CreatedAt":"2018-08-27T16:21:55","Actor":"jkonicki","Number":"110","RawContent":null,"Title":"Fix - add missing comma","State":"closed","Body":"@jongalloway - Looks like I missed a comma in my previous PR. Here is the fix.","Url":"https://github.com/dotnet/foundation/pull/110","RelatedDescription":"Closed or merged PR \"Fix - add missing comma\" (#110)"},{"Id":"352736883","IsPullRequest":true,"CreatedAt":"2018-08-23T23:10:07","Actor":"anthonychu","Number":"108","RawContent":null,"Title":"Fix errors in projects.json","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/108","RelatedDescription":"Closed or merged PR \"Fix errors in projects.json\" (#108)"},{"Id":"353536205","IsPullRequest":true,"CreatedAt":"2018-08-23T23:09:07","Actor":"jkonicki","Number":"109","RawContent":null,"Title":"Add Steeltoe to the project listing","State":"closed","Body":"Hi @jongalloway, Here is the PR for adding Steeltoe to the projects listing.  Let me know if you need any changes. \r\nThanks.","Url":"https://github.com/dotnet/foundation/pull/109","RelatedDescription":"Closed or merged PR \"Add Steeltoe to the project listing\" (#109)"},{"Id":"340355507","IsPullRequest":false,"CreatedAt":"2018-07-11T18:28:16","Actor":"Eilon","Number":"107","RawContent":null,"Title":"Links to .NET Foundation web site use HTTP instead of HTTPS","State":"open","Body":"It appears that HTTPS works just fine: https://www.dotnetfoundation.org/\r\n\r\nBut the links at these places use HTTP:\r\n1. The link in the header of https://github.com/dotnet/home\r\n2. The link in the header of https://github.com/dotnet\r\n3. Some links in https://github.com/dotnet/home/blob/master/README.md (both to .NET Foundation, and a GitHub link to another project)\r\n\r\nThese links should all change to HTTPS.","Url":"https://github.com/dotnet/foundation/issues/107","RelatedDescription":"Open issue \"Links to .NET Foundation web site use HTTP instead of HTTPS\" (#107)"}],"ResultType":"GitHubIssue"},"CoreCLR-Issues":{"Issues":[{"Id":"419073047","IsPullRequest":true,"CreatedAt":"2019-03-10T01:03:49","Actor":"dotnet-maestro[bot]","Number":"23154","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/corefx\r\n\r\n- Microsoft.NETCore.Platforms - 3.0.0-preview4.19158.7\r\n- Microsoft.Private.CoreFx.NETCoreApp - 4.6.0-preview4.19158.7\r\n\r\n","Url":"https://github.com/dotnet/coreclr/pull/23154","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#23154)"},{"Id":"419132833","IsPullRequest":true,"CreatedAt":"2019-03-10T00:59:24","Actor":"franksinankaya","Number":"23162","RawContent":null,"Title":"Fix explicit constructor calls and Remove multi-line comments","State":"open","Body":"","Url":"https://github.com/dotnet/coreclr/pull/23162","RelatedDescription":"Open PR \"Fix explicit constructor calls and Remove multi-line comments\" (#23162)"},{"Id":"419121183","IsPullRequest":true,"CreatedAt":"2019-03-09T22:14:16","Actor":"marek-safar","Number":"23161","RawContent":null,"Title":"Use only BIT* defines in Buffer","State":"open","Body":"","Url":"https://github.com/dotnet/coreclr/pull/23161","RelatedDescription":"Open PR \"Use only BIT* defines in Buffer\" (#23161)"},{"Id":"419120016","IsPullRequest":true,"CreatedAt":"2019-03-09T21:59:40","Actor":"Dotnet-GitSync-Bot","Number":"23160","RawContent":null,"Title":"Mirror changes from dotnet/corefx,corert","State":"open","Body":"This PR contains mirrored changes from dotnet/corefx,corert\n\n\n**Please REBASE this PR when merging**\n\n cc @danmosemsft","Url":"https://github.com/dotnet/coreclr/pull/23160","RelatedDescription":"Open PR \"Mirror changes from dotnet/corefx,corert\" (#23160)"},{"Id":"419073456","IsPullRequest":true,"CreatedAt":"2019-03-09T21:58:05","Actor":"dotnet-maestro[bot]","Number":"23155","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/core-setup\r\n\r\n- Microsoft.NETCore.App - 3.0.0-preview4-27508-16\r\n\r\n","Url":"https://github.com/dotnet/coreclr/pull/23155","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#23155)"},{"Id":"419083713","IsPullRequest":true,"CreatedAt":"2019-03-09T21:55:44","Actor":"EgorBo","Number":"23157","RawContent":null,"Title":"Move Buffer to shared","State":"closed","Body":"Tested on CoreRT with [Buffer.CoreRT.cs](https://gist.github.com/EgorBo/ec9b68373f02f636c6c1212fba72bbbe) locally:\r\n1) `IsPrimitiveTypeArray` is implemented as `return array.ElementEEType.IsPrimitive`\r\n2) `_ByteLength`, `BlockCopy` and `Memcpy` are not modified \r\n3) `__Memmove` is implemented as `RuntimeImports.memmove(dest, src, len);`\r\n\r\nPS: also, tested on mono\r\ncc @marek-safar ","Url":"https://github.com/dotnet/coreclr/pull/23157","RelatedDescription":"Closed or merged PR \"Move Buffer to shared\" (#23157)"},{"Id":"419110218","IsPullRequest":false,"CreatedAt":"2019-03-09T20:04:55","Actor":"benaadams","Number":"23159","RawContent":null,"Title":"Vector<T> regression, BadImageFormatException in release","State":"open","Body":"```\r\nC:\\Work\\BadImageFormat>dotnet run\r\nTrue\r\n\r\nC:\\Work\\BadImageFormat>dotnet run -c Release\r\n\r\nUnhandled Exception: System.BadImageFormatException: An attempt was made to load a program with an incorrect format. (0x8007000B)\r\n   at Program.BytesOrdinalEqualsStringAndAscii(String previousValue, Span`1 newValue)\r\n   at Program.Main(String[] args) in C:\\Work\\BadImageFormat\\Program.cs:line 15\r\n```\r\n\r\n```\r\nSystem.BadImageFormatException\r\n  HResult=0x8007000B\r\n  Message=An attempt was made to load a program with an incorrect format. (0x8007000B)\r\n  Source=BadImageFormat\r\n  StackTrace:\r\n   at Program.BytesOrdinalEqualsStringAndAscii(String previousValue, Span`1 newValue) in C:\\Work\\BadImageFormat\\Program.cs:line 136\r\n   at Program.Main(String[] args) in C:\\Work\\BadImageFormat\\Program.cs:line 16\r\n```\r\nRepo\r\n```csharp\r\nusing System;\r\nusing System.Diagnostics;\r\nusing System.Numerics;\r\nusing System.Runtime.CompilerServices;\r\nusing System.Runtime.InteropServices;\r\nusing System.Text;\r\n\r\nclass Program\r\n{\r\n    static void Main(string[] args)\r\n    {\r\n        var str = \"application/json,text/html;q=0.9,application/xhtml+xml;q=0.9,application/xml;q=0.8,*/*;q=0.7\";\r\n        var span = Encoding.ASCII.GetBytes(str).AsSpan();\r\n\r\n        Console.WriteLine(BytesOrdinalEqualsStringAndAscii(str, span));\r\n    }\r\n\r\n    [MethodImpl(MethodImplOptions.AggressiveOptimization)]\r\n    public unsafe static bool BytesOrdinalEqualsStringAndAscii(string previousValue, Span<byte> newValue)\r\n    {\r\n        // We just widen the bytes to char for comparision, if either the string or the bytes are not ascii\r\n        // this will result in non-equality, so we don't need to specifically test for non-ascii.\r\n        Debug.Assert(previousValue.Length == newValue.Length);\r\n\r\n        // Use IntPtr values rather than int, to avoid unnessary 32 -> 64 movs on 64-bit.\r\n        // Unfortunately this means we also need to cast to byte* for comparisions as IntPtr doesn't\r\n        // support operator comparisions (e.g. <=, >, etc).\r\n        // Note: Pointer comparision is unsigned, so we use the compare pattern (offset + length <= count)\r\n        // rather than (offset <= count - length) which we'd do with signed comparision to avoid overflow.\r\n        var count = (IntPtr)newValue.Length;\r\n        var offset = (IntPtr)0;\r\n\r\n        ref var bytes = ref MemoryMarshal.GetReference(newValue);\r\n        ref var str = ref MemoryMarshal.GetReference(previousValue.AsSpan());\r\n\r\n        do\r\n        {\r\n            // If Vector not-accelerated or remaining less than vector size\r\n            if (!Vector.IsHardwareAccelerated || (byte*)(offset + Vector<byte>.Count) > (byte*)count)\r\n            {\r\n                if (IntPtr.Size == 8) // Use Intrinsic switch for branch elimination\r\n                {\r\n                    // 64-bit: Loop longs by default\r\n                    while ((byte*)(offset + sizeof(long)) <= (byte*)count)\r\n                    {\r\n                        if (Unsafe.Add(ref str, offset) != (char)Unsafe.Add(ref bytes, offset) ||\r\n                            Unsafe.Add(ref str, offset + 1) != (char)Unsafe.Add(ref bytes, offset + 1) ||\r\n                            Unsafe.Add(ref str, offset + 2) != (char)Unsafe.Add(ref bytes, offset + 2) ||\r\n                            Unsafe.Add(ref str, offset + 3) != (char)Unsafe.Add(ref bytes, offset + 3) ||\r\n                            Unsafe.Add(ref str, offset + 4) != (char)Unsafe.Add(ref bytes, offset + 4) ||\r\n                            Unsafe.Add(ref str, offset + 5) != (char)Unsafe.Add(ref bytes, offset + 5) ||\r\n                            Unsafe.Add(ref str, offset + 6) != (char)Unsafe.Add(ref bytes, offset + 6) ||\r\n                            Unsafe.Add(ref str, offset + 7) != (char)Unsafe.Add(ref bytes, offset + 7))\r\n                        {\r\n                            goto NotEqual;\r\n                        }\r\n\r\n                        offset += sizeof(long);\r\n                    }\r\n                    if ((byte*)(offset + sizeof(int)) <= (byte*)count)\r\n                    {\r\n                        if (Unsafe.Add(ref str, offset) != (char)Unsafe.Add(ref bytes, offset) ||\r\n                            Unsafe.Add(ref str, offset + 1) != (char)Unsafe.Add(ref bytes, offset + 1) ||\r\n                            Unsafe.Add(ref str, offset + 2) != (char)Unsafe.Add(ref bytes, offset + 2) ||\r\n                            Unsafe.Add(ref str, offset + 3) != (char)Unsafe.Add(ref bytes, offset + 3))\r\n                        {\r\n                            goto NotEqual;\r\n                        }\r\n\r\n                        offset += sizeof(int);\r\n                    }\r\n                }\r\n                else\r\n                {\r\n                    // 32-bit: Loop ints by default\r\n                    while ((byte*)(offset + sizeof(int)) <= (byte*)count)\r\n                    {\r\n                        if (Unsafe.Add(ref str, offset) != (char)Unsafe.Add(ref bytes, offset) ||\r\n                            Unsafe.Add(ref str, offset + 1) != (char)Unsafe.Add(ref bytes, offset + 1) ||\r\n                            Unsafe.Add(ref str, offset + 2) != (char)Unsafe.Add(ref bytes, offset + 2) ||\r\n                            Unsafe.Add(ref str, offset + 3) != (char)Unsafe.Add(ref bytes, offset + 3))\r\n                        {\r\n                            goto NotEqual;\r\n                        }\r\n\r\n                        offset += sizeof(int);\r\n                    }\r\n                }\r\n                if ((byte*)(offset + sizeof(short)) <= (byte*)count)\r\n                {\r\n                    if (Unsafe.Add(ref str, offset) != (char)Unsafe.Add(ref bytes, offset) ||\r\n                        Unsafe.Add(ref str, offset + 1) != (char)Unsafe.Add(ref bytes, offset + 1))\r\n                    {\r\n                        goto NotEqual;\r\n                    }\r\n\r\n                    offset += sizeof(short);\r\n                }\r\n                if ((byte*)offset < (byte*)count)\r\n                {\r\n                    if (Unsafe.Add(ref str, offset) != (char)Unsafe.Add(ref bytes, offset))\r\n                    {\r\n                        goto NotEqual;\r\n                    }\r\n                }\r\n\r\n                return true;\r\n            }\r\n\r\n            // do/while as entry condition already checked\r\n            var AllTrue = new Vector<ushort>(ushort.MaxValue);\r\n            do\r\n            {\r\n                var vector = Unsafe.As<byte, Vector<byte>>(ref Unsafe.Add(ref bytes, offset));\r\n                Vector.Widen(vector, out var vector0, out var vector1);\r\n                var compare0 = Unsafe.As<char, Vector<ushort>>(ref Unsafe.Add(ref str, offset));\r\n                var compare1 = Unsafe.As<char, Vector<ushort>>(ref Unsafe.Add(ref str, offset + Vector<ushort>.Count));\r\n\r\n                if (!AllTrue.Equals(\r\n                    Vector.BitwiseAnd(\r\n                        Vector.Equals(compare0, vector0),\r\n                        Vector.Equals(compare1, vector1))))\r\n                {\r\n                    goto NotEqual;\r\n                }\r\n\r\n                offset += Vector<byte>.Count;\r\n            } while ((byte*)(offset + Vector<byte>.Count) <= (byte*)count);\r\n\r\n            // Vector path done, loop back to do non-Vector\r\n            // If is a exact multiple of vector size, bail now\r\n        } while ((byte*)offset < (byte*)count);\r\n\r\n        return true;\r\n    NotEqual:\r\n        return false;\r\n    }\r\n}\r\n```\r\nLastest nightly sdk from https://github.com/dotnet/core-sdk\r\n```\r\nC:\\Work\\BadImageFormat>dotnet --version\r\n3.0.100-preview4-010681\r\n\r\nC:\\Work\\BadImageFormat>dotnet --info\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview4-010681\r\n Commit:    5561b45f06\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18351\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview4-010681\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview4-27509-04\r\n  Commit:  1ca3ac91f6\r\n```","Url":"https://github.com/dotnet/coreclr/issues/23159","RelatedDescription":"Open issue \"Vector<T> regression, BadImageFormatException in release\" (#23159)"},{"Id":"418994072","IsPullRequest":true,"CreatedAt":"2019-03-09T18:36:58","Actor":"cshung","Number":"23143","RawContent":null,"Title":"Eliminate SampleProfilerEventInstance","State":"closed","Body":"Feel like obsolete code to me - the constructor is never used anywhere.","Url":"https://github.com/dotnet/coreclr/pull/23143","RelatedDescription":"Closed or merged PR \"Eliminate SampleProfilerEventInstance\" (#23143)"},{"Id":"419020489","IsPullRequest":true,"CreatedAt":"2019-03-09T17:05:00","Actor":"cshung","Number":"23148","RawContent":null,"Title":"Avoid StackWalk in EventPipeEventInstance constructor","State":"closed","Body":"","Url":"https://github.com/dotnet/coreclr/pull/23148","RelatedDescription":"Closed or merged PR \"Avoid StackWalk in EventPipeEventInstance constructor\" (#23148)"},{"Id":"419032789","IsPullRequest":true,"CreatedAt":"2019-03-09T16:41:44","Actor":"stephentoub","Number":"23152","RawContent":null,"Title":"Add stack depth check to all Task continuations","State":"closed","Body":"Currently Task has a stack depth check that avoids stack overflows on very deep stack continuation chains, but it only applies to Task.ContinueWith, not to other kinds of continuations.  This changes that to have it apply to all.\r\n\r\nAs part of this, this also deletes the current StackGuard type used to achieve the check.  The type was meant to avoid expensive calls to check where we are on the stack, but now that we're using TryEnsureSufficientExecutionStack, it's actually faster to just call that rather than access the current StackGuard from a ThreadLocal.  This then also cleans up the call sites nicely, as they no longer need finally blocks to undo the increment performed on the StackGuard.\r\n\r\nIn some basic microbenchmarks, I don't see any measurable impact on perf.\r\n\r\nFixes https://github.com/dotnet/coreclr/issues/1191\r\nMitigates https://github.com/dotnet/roslyn/issues/26567\r\ncc: @benaadams, @AArnott, @kouvel, @tarekgh, @jcouv","Url":"https://github.com/dotnet/coreclr/pull/23152","RelatedDescription":"Closed or merged PR \"Add stack depth check to all Task continuations\" (#23152)"},{"Id":"419083943","IsPullRequest":false,"CreatedAt":"2019-03-09T15:45:11","Actor":"petarpetrovt","Number":"23158","RawContent":null,"Title":"SetDllImportResolver and DLLImport bug","State":"closed","Body":"","Url":"https://github.com/dotnet/coreclr/issues/23158","RelatedDescription":"Closed issue \"SetDllImportResolver and DLLImport bug\" (#23158)"},{"Id":"419073967","IsPullRequest":true,"CreatedAt":"2019-03-09T13:54:45","Actor":"dotnet-maestro[bot]","Number":"23156","RawContent":null,"Title":"[master] Update dependencies from  1 repositories","State":"open","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://dnceng@dev.azure.com/dnceng/internal/_git/dotnet-optimization\r\n\r\n- optimization.IBC.CoreCLR - 99.99.99-master-20190308.5\r\n- optimization.PGO.CoreCLR - 99.99.99-master-20190308.5\r\n\r\n","Url":"https://github.com/dotnet/coreclr/pull/23156","RelatedDescription":"Open PR \"[master] Update dependencies from  1 repositories\" (#23156)"},{"Id":"419042614","IsPullRequest":true,"CreatedAt":"2019-03-09T07:09:03","Actor":"AaronRobinsonMSFT","Number":"23153","RawContent":null,"Title":"Clean up MDAs from Interop code","State":"open","Body":"","Url":"https://github.com/dotnet/coreclr/pull/23153","RelatedDescription":"Open PR \"Clean up MDAs from Interop code\" (#23153)"},{"Id":"419016095","IsPullRequest":true,"CreatedAt":"2019-03-09T06:54:38","Actor":"dotnet-maestro[bot]","Number":"23146","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19158.5\r\n- Microsoft.DotNet.Helix.Sdk - 2.0.0-beta.19158.5\r\n\r\n","Url":"https://github.com/dotnet/coreclr/pull/23146","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#23146)"},{"Id":"418863676","IsPullRequest":true,"CreatedAt":"2019-03-09T04:48:01","Actor":"dotnet-maestro-bot","Number":"23133","RawContent":null,"Title":"[automated] Merge branch 'master' => 'release/3.0'","State":"closed","Body":"I detected changes in the master branch which have not been merged yet to release/3.0. I'm a robot and am configured to help you automatically keep release/3.0 up to date, so I've opened this PR.\r\n\r\nThis PR merges commits made on master by the following committers:\n\n* @CarolEidt\n* @sywhang\n* @jkotas\n* @sandreenko\n* @jashook\n* @AndyAyersMS\n* @BrianBohe\r\n\r\n## Instructions for merging from UI\r\n\r\nThis PR will not be auto-merged. When pull request checks pass, complete this PR by creating a merge commit, *not* a squash or rebase commit.\r\n\r\n<img alt=\"merge button instructions\" src=\"https://i.imgur.com/GepcNJV.png\" width=\"300\" />\r\n\r\nIf this repo does not allow creating merge commits from the GitHub UI, use command line instructions.\r\n\r\n## Instructions for merging via command line\r\n\r\nRun these commands to merge this pull request from the command line.\r\n\r\n``` sh\r\ngit fetch\r\ngit checkout master\r\ngit pull --ff-only\r\ngit checkout release/3.0\r\ngit pull --ff-only\r\ngit merge --no-ff master\r\n\r\n# If there are merge conflicts, resolve them and then run git merge --continue to complete the merge\r\n# Pushing the changes to the PR branch will re-trigger PR validation.\r\ngit push https://github.com/dotnet-maestro-bot/coreclr HEAD:merge/master-to-release/3.0\r\n```\r\n\r\n<details>\r\n<summary>or if you are using SSH</summary>\r\n\r\n```\r\ngit push git@github.com:dotnet-maestro-bot/coreclr HEAD:merge/master-to-release/3.0\r\n```\r\n\r\n</details>\r\n\r\n\r\nAfter PR checks are complete push the branch\r\n```\r\ngit push\r\n```\r\n\r\n## Instructions for resolving conflicts\r\n\r\n:warning: If there are merge conflicts, you will need to resolve them manually before merging. You can do this [using GitHub][resolve-github] or using the [command line][resolve-cli].\r\n\r\n[resolve-github]: https://help.github.com/articles/resolving-a-merge-conflict-on-github/\r\n[resolve-cli]: https://help.github.com/articles/resolving-a-merge-conflict-using-the-command-line/\r\n\r\n## Instructions for updating this pull request\r\n\r\nContributors to this repo have permission update this pull request by pushing to the branch 'merge/master-to-release/3.0'. This can be done to resolve conflicts or make other changes to this pull request before it is merged.\r\n\r\n```\r\ngit checkout -b merge/master-to-release/3.0 release/3.0\r\ngit pull https://github.com/dotnet-maestro-bot/coreclr merge/master-to-release/3.0\r\n(make changes)\r\ngit commit -m \"Updated PR with my changes\"\r\ngit push https://github.com/dotnet-maestro-bot/coreclr merge/master-to-release/3.0\r\n```\r\n\r\n<details>\r\n    <summary>or if you are using SSH</summary>\r\n\r\n```\r\ngit checkout -b merge/master-to-release/3.0 release/3.0\r\ngit pull git@github.com:dotnet-maestro-bot/coreclr merge/master-to-release/3.0\r\n(make changes)\r\ngit commit -m \"Updated PR with my changes\"\r\ngit push git@github.com:dotnet-maestro-bot/coreclr merge/master-to-release/3.0\r\n```\r\n\r\n</details>\r\n\r\nContact .NET Core Engineering if you have questions or issues.\r\nAlso, if this PR was generated incorrectly, help us fix it. See https://github.com/dotnet/arcade/blob/master/scripts/GitHubMergeBranches.ps1.\r\n","Url":"https://github.com/dotnet/coreclr/pull/23133","RelatedDescription":"Closed or merged PR \"[automated] Merge branch 'master' => 'release/3.0'\" (#23133)"},{"Id":"419030325","IsPullRequest":false,"CreatedAt":"2019-03-09T03:57:32","Actor":"cshung","Number":"23151","RawContent":null,"Title":"Cleanup TODO introduced by PR #23148","State":"open","Body":"on `eventpipebuffer.cpp` ->\r\n```csharp\r\npInstance->EnsureStack(session); // TODO: Perform the stackwalk before the constructor\r\n```\r\nWe could perform the stack walk before initializing the EventPipeEventInstance.","Url":"https://github.com/dotnet/coreclr/issues/23151","RelatedDescription":"Open issue \"Cleanup TODO introduced by PR #23148\" (#23151)"},{"Id":"419021512","IsPullRequest":true,"CreatedAt":"2019-03-09T02:06:49","Actor":"BruceForstall","Number":"23149","RawContent":null,"Title":"Add test case for #23147","State":"open","Body":"This is an IL test case because it uses JMP. The basic\r\nC# is here also, but it needs to be manually converted\r\nto IL by using ildasm => manual edit => ilasm.\r\n\r\nCurrently disabled for arm64","Url":"https://github.com/dotnet/coreclr/pull/23149","RelatedDescription":"Open PR \"Add test case for #23147\" (#23149)"},{"Id":"419019923","IsPullRequest":false,"CreatedAt":"2019-03-09T01:50:27","Actor":"BruceForstall","Number":"23147","RawContent":null,"Title":"arm64: CodeGen::genJmpMethod with multireg HFA arg","State":"open","Body":"A function with a multireg HFA argument and a JMP call will hit this NYI:\r\n\r\ncodegenarmarch.cpp -- NYI_ARM64(\"CodeGen::genJmpMethod with multireg HFA arg\")\r\n\r\n(related: https://github.com/dotnet/coreclr/issues/18178)\r\n","Url":"https://github.com/dotnet/coreclr/issues/23147","RelatedDescription":"Open issue \"arm64: CodeGen::genJmpMethod with multireg HFA arg\" (#23147)"},{"Id":"418937380","IsPullRequest":true,"CreatedAt":"2019-03-09T01:36:38","Actor":"AaronRobinsonMSFT","Number":"23137","RawContent":null,"Title":"Properly override IsEquivalentTo() API in RuntimeType","State":"closed","Body":"Add tests for API validation\r\n\r\nFixes #23131","Url":"https://github.com/dotnet/coreclr/pull/23137","RelatedDescription":"Closed or merged PR \"Properly override IsEquivalentTo() API in RuntimeType\" (#23137)"},{"Id":"419007002","IsPullRequest":true,"CreatedAt":"2019-03-09T00:19:08","Actor":"jkoritzinsky","Number":"23145","RawContent":null,"Title":"Correctly marshal structure return values in member functions on Win-x64","State":"open","Body":"In Windows-x64, if we have a native member function signature with a struct return type, we need to do a by-ref return.\r\n\r\nSuperscedes #19643\r\nFixes the managed->native direction of #19474.","Url":"https://github.com/dotnet/coreclr/pull/23145","RelatedDescription":"Open PR \"Correctly marshal structure return values in member functions on Win-x64\" (#23145)"},{"Id":"419001973","IsPullRequest":false,"CreatedAt":"2019-03-08T23:53:05","Actor":"iskiselev","Number":"23144","RawContent":null,"Title":"ECMA-335 Overview of exception handling misleading","State":"open","Body":"Currently ECMA-335 I.12.4.2.5 Overview of exception handling misleading states that:\r\n\r\nWhen an exception occurs, the CLI searches the array for the first protected block that\r\n Protects a region including the current instruction pointer and\r\n Is a catch handler block and\r\n Whose filter wishes to handle the exception\r\nIf a match is not found in the current method, the calling method is searched, and so on. If no\r\nmatch is found the CLI will dump a stack trace and abort the program.\r\nIf a match is found, the CLI walks the stack back to the point just located, but this time calling\r\nthe finally and fault handlers. \r\n\r\nLooks like a spec bug, as based on this description finally block of non-catched exception should not be executed. Really in next code:\r\n```c#\r\nusing System;\r\n\r\nclass Solution\r\n{\r\n    static void Main(string[] args)\r\n    {\r\n        try\r\n        {\r\n            throw new Exception();\r\n        }\r\n        finally\r\n        {\r\n            Console.WriteLine(\"finally\");\r\n        }\r\n    }\r\n}\r\n```\r\noutput will be:\r\n```\r\nUnhandled Exception: System.Exception: Exception of type 'System.Exception' was thrown.\r\n   at Solution.Main(String[] args)\r\nfinally\r\n```\r\nSo, finally block was called. I'd say that CLR behavior is complying with whatever developer expect from finally block and C# spec, but violate CLR spec.","Url":"https://github.com/dotnet/coreclr/issues/23144","RelatedDescription":"Open issue \"ECMA-335 Overview of exception handling misleading\" (#23144)"},{"Id":"418989076","IsPullRequest":true,"CreatedAt":"2019-03-08T22:54:39","Actor":"sywhang","Number":"23142","RawContent":null,"Title":"Update eventcounter spec","State":"closed","Body":"","Url":"https://github.com/dotnet/coreclr/pull/23142","RelatedDescription":"Closed or merged PR \"Update eventcounter spec\" (#23142)"},{"Id":"418951323","IsPullRequest":true,"CreatedAt":"2019-03-08T22:45:12","Actor":"BruceForstall","Number":"23140","RawContent":null,"Title":"Remove unneeded arm64 NYI","State":"closed","Body":"InitVarDscInfo::alignReg is only used by `_TARGET_ARM_`, so put\r\nit under that ifdef.\r\n\r\nContributes to #18178","Url":"https://github.com/dotnet/coreclr/pull/23140","RelatedDescription":"Closed or merged PR \"Remove unneeded arm64 NYI\" (#23140)"},{"Id":"418907991","IsPullRequest":true,"CreatedAt":"2019-03-08T22:24:19","Actor":"sandreenko","Number":"23135","RawContent":null,"Title":"Fix missing RunTests.sh in CoreFX Linux jobs.","State":"closed","Body":"We have to pass `/p:ArchiveTests=Tests` after recent scripts updates to generate `RunTests.sh` files.\r\n\r\nFixes #23122.","Url":"https://github.com/dotnet/coreclr/pull/23135","RelatedDescription":"Closed or merged PR \"Fix missing RunTests.sh in CoreFX Linux jobs.\" (#23135)"},{"Id":"418958682","IsPullRequest":true,"CreatedAt":"2019-03-08T21:10:24","Actor":"CarolEidt","Number":"23141","RawContent":null,"Title":"Fix handling of struct setup assignments","State":"open","Body":"In #22791 I was creating struct assignments with COMMAs on the rhs, but that isn't handled downstream.\r\n\r\nFix #23059","Url":"https://github.com/dotnet/coreclr/pull/23141","RelatedDescription":"Open PR \"Fix handling of struct setup assignments\" (#23141)"},{"Id":"418945453","IsPullRequest":false,"CreatedAt":"2019-03-08T20:28:14","Actor":"jmiddour","Number":"23139","RawContent":null,"Title":"Performance regression in .Net Core 3.0 -- private working set","State":"open","Body":"We converted a console application to .Net core from the full framework.  When targeting .Net Core 2.2, the memory & wall clock performance was very close to full framework targeting 4.6.2 and running on 4.7.  This was on Enterprise Client 1709 and using VS2019P3.\r\n\r\nHowever, when targeting .net core 3.0, performance was significantly worse.  We noticed that private working set increased from 8Mb to ~450Mb.  Wall clock time was also about 20% worse.\r\n\r\nWe collected the following information to aid in investigation.  We plan to go into production on .Net Core 2.2, but are completely blocked from .Net Core 3.\r\n\r\nOn the left is the VM map from .Net Core 3.0.  On the right is from the full framework\r\n![VmMap1](https://user-images.githubusercontent.com/18984850/54053475-628ffb80-41b5-11e9-9750-630e44e6ef93.png)\r\n\r\nOn the left is full framework.  On the right is .Net Core 3.0.  The lines are (in order):\r\nprocess.privateworkingset64\r\ngc.totalmemory(false)\r\ngc.totalmemory(true)\r\nprocess.privateworkingset64\r\n![vmmap2](https://user-images.githubusercontent.com/18984850/54053701-227d4880-41b6-11e9-8124-2bb2fc4bc3fb.png)\r\n\r\nVM Map from .Net Core 2.2:\r\n![vmmap3](https://user-images.githubusercontent.com/18984850/54053809-74be6980-41b6-11e9-8597-d4d3bdef4fef.png)\r\n\r\nWe also tested tiered compilation both enabled on 2.2 and disabled on 3.0 and that did not change the results.\r\n\r\n@richlander  @rido-min ","Url":"https://github.com/dotnet/coreclr/issues/23139","RelatedDescription":"Open issue \"Performance regression in .Net Core 3.0 -- private working set\" (#23139)"},{"Id":"418937887","IsPullRequest":true,"CreatedAt":"2019-03-08T20:05:31","Actor":"AndyAyersMS","Number":"23138","RawContent":null,"Title":"JIT: fix filter liveness computation","State":"open","Body":"Port of #23044 to release/2.1.\r\n\r\nWhen a filter is finished executing, control can logically pass to the\r\nassociated handler, any enclosing handler or filter, or any finally or fault\r\nhandler nested within the associated try. This is a consequence of two-pass EH.\r\n\r\nThe jit was not propagating liveness from the nested handlers, which lead to a\r\nlive object being collected inadvertently.\r\n\r\nThis change updates `fgGetHandlerLiveVars` to find the nested handlers and\r\nmerge their live-in into the filter block live sets.\r\n\r\nBecause these implicit EH flow edges can create cycles in the liveness dataflow\r\nequations, the jit will also now always iterate liveness when it sees there is\r\nexception flow, to ensure livness reaches the appropriate fixed point.\r\n\r\nAdded test case.\r\n\r\nCloses #22820.","Url":"https://github.com/dotnet/coreclr/pull/23138","RelatedDescription":"Open PR \"JIT: fix filter liveness computation\" (#23138)"},{"Id":"418910996","IsPullRequest":false,"CreatedAt":"2019-03-08T18:48:39","Actor":"AndyAyersMS","Number":"23136","RawContent":null,"Title":"Odd PrepareMethod failure on linux arm64","State":"open","Body":"Noticed this while using jitutils on linux arm64.\r\n```C#\r\nusing System;\r\nusing System.Reflection;\r\n\r\nclass P\r\n{\r\n    static void Main(string[] args)\r\n    {\r\n        try \r\n        {\r\n            Assembly a = typeof(object).Assembly;\r\n            Type t = a.GetType(\"System.ReadOnlySpan`1\");\r\n            Type to = t.MakeGenericType(typeof(object));\r\n            Console.WriteLine($\"Got type -- {to.FullName}\");\r\n            MethodBase m = to.GetMethod(\"get_Item\", new Type[] { typeof(int) });\r\n            Console.WriteLine($\"Got method -- {m.Name}\");\r\n            System.Runtime.CompilerServices.RuntimeHelpers.PrepareMethod(m.MethodHandle);\r\n            Console.WriteLine($\"Prepared\");\r\n        }\r\n        catch (Exception e)\r\n        {\r\n            Console.WriteLine($\"Exception: {e.Message}\");\r\n        }\r\n    }\r\n}\r\n```\r\nOn windows this gives\r\n```\r\nGot type -- System.ReadOnlySpan`1[[System.Object, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]\r\nGot method -- get_Item\r\nPrepared\r\n```\r\non Linux arm64 (with 3.0.100-preview-010184)\r\n```\r\nGot type -- System.ReadOnlySpan`1[[System.Object, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]\r\nGot method -- get_Item\r\nException: [/home/andya/dotnet/shared/Microsoft.NETCore.App/3.0.0-preview-27324-5/System.Private.CoreLib.dll] The signature is incorrect.\r\n```\r\nUsing PMI I can actually get different exception types for this case. Most commonly `BadImageFormat` but sometimes `TypeLoadException`:\r\n```\r\n~/repos/coreclr$ bin/tests/Linux.arm64.Checked/Tests/Core_Root/corerun ~/repos/jitutils/bin/pmi.dll prepone-quiet bin/tests/Linux.arm64.Checked/Tests/Core_Root/System.Private.CoreLib.dll 6748\r\nPrepone for System.Private.CoreLib method 6748\r\nPREPONE type# 331 method# 6748 System.ReadOnlySpan`1[[System.Object, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]::get_Item\r\n\r\nMethod 6748: BadImageFormatException System.ReadOnlySpan`1[[System.Object, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]::get_Item\r\n```","Url":"https://github.com/dotnet/coreclr/issues/23136","RelatedDescription":"Open issue \"Odd PrepareMethod failure on linux arm64\" (#23136)"},{"Id":"418891177","IsPullRequest":true,"CreatedAt":"2019-03-08T17:50:32","Actor":"tannergooding","Number":"23134","RawContent":null,"Title":"Fixing a couple of issues in the Utf8Parsing/Formatting code","State":"open","Body":"First commit fixes an issue where the Utf8Parser would create a number buffer with `DigitCount = 0` and `Scale != 0`. We now specially handle that in `NumberToDouble/Single` rather than in `NumberToFloatingPointBits`.\r\n\r\nThe second commit ensures that the floating-point Utf8Formatter will transcode any unicode text returned. For the common case, this will just hit the ASCII fast-path loop in `UTF8Encoder.GetBytes`. For the currency case, this will hit the slow path (since the invariant currency symbol is non-ASCII). This also better allows us to support other cultures in the future, if desired.","Url":"https://github.com/dotnet/coreclr/pull/23134","RelatedDescription":"Open PR \"Fixing a couple of issues in the Utf8Parsing/Formatting code\" (#23134)"},{"Id":"419030189","IsPullRequest":false,"CreatedAt":"2019-03-08T15:55:36","Actor":"muntyan","Number":"23150","RawContent":null,"Title":"Bug with FieldOffset and marshaling by value","State":"open","Body":"Attached is a repro for where a struct with Explicit layout and FieldOffsets modeling a C union gets marshaled as garbage to C through p/invoke on linux and mac, while it works as expected on windows. I haven't tried to figure out what exactly breaks it, but the sample should be simple enough. It assumes 64-bit linux.\r\n\r\nC code is like this:\r\n\r\n```c\r\n    struct Repro\r\n    {\r\n        int discriminator;\r\n        union\r\n        {\r\n            int integer;\r\n            void* pointer;\r\n            char* string;\r\n         };\r\n    };\r\n```\r\n\r\n    void consume(struct Repro repro); // passing the struct by value\r\n\r\nand C# binding is like this:\r\n```c#\r\n        [StructLayout(LayoutKind.Explicit)]\r\n        public struct Repro\r\n        {\r\n            [FieldOffset(0)]\r\n            public int discriminator;\r\n            [FieldOffset(8)]\r\n            public int integer;\r\n            [FieldOffset(8)]\r\n            public IntPtr string_;\r\n            [FieldOffset(8)]\r\n            public IntPtr pointer;\r\n        }\r\n\r\n        [DllImport(\"repro\")]\r\n        public static extern void consume(Repro value);\r\n```\r\n\r\nIt results in garbage passed to C code, see attached. It outputs\r\n\r\n```\r\n    discriminator: 497673040\r\n    pointer: 0x7f7cec7f5818\r\n```\r\n\r\ninstead of expected 8 and 42.\r\n\r\nTo reproduce unpack the attachment and run ./repro.sh in it.\r\n\r\n[repro.zip](https://github.com/dotnet/core/files/2946475/repro.zip)","Url":"https://github.com/dotnet/coreclr/issues/23150","RelatedDescription":"Open issue \"Bug with FieldOffset and marshaling by value\" (#23150)"}],"ResultType":"GitHubIssue"},"CLI-Issues":{"Issues":[{"Id":"419088891","IsPullRequest":false,"CreatedAt":"2019-03-09T16:22:23","Actor":"mika-s","Number":"10957","RawContent":null,"Title":"Metadata not shown for F# dlls when using dotnet cli to build","State":"open","Body":"This is similar to [this](https://github.com/Microsoft/visualfsharp/issues/5657) issue, but for the dotnet cli tool rather than when compiling with Visual Studio 2017.\r\n\r\nVersion 2.2.104 is the latest stable version as of this date, so this issue is filed for that particular version.\r\n\r\n## Steps to reproduce\r\n\r\n1. Create a folder and make a file called global.json in it. Add the following content to it and save:\r\n\r\n```json\r\n{\r\n  \"sdk\": {\r\n    \"version\": \"2.2.104\"\r\n  }\r\n}\r\n```\r\n\r\nThis forces dotnet to use version 2.2.104 in case the preview version (3.0) is installed. Run `dotnet --version` to verify.\r\n\r\n2. In the created folder, create a new solution with `dotnet new sln -o FSharpMetadata`.\r\n\r\n3. `cd FSharpMetadata`\r\n\r\n4. `dotnet new console -lang F# -o testproj`\r\n\r\n5. `dotnet sln add testproj`\r\n\r\n6. Open testproj.fsproj with an editor and add the following to the `PropertyGroup` element.\r\n\r\n```xml\r\n    <Authors>My author</Authors>\r\n    <AssemblyName>testproj</AssemblyName>\r\n    <RunPostBuildEvent>0</RunPostBuildEvent>\r\n    <Version>1.0.0</Version>\r\n    <AssemblyVersion>1.0.0.0</AssemblyVersion>\r\n    <FileVersion>1.0.0.0</FileVersion>\r\n```\r\n\r\n7. `dotnet build`\r\n\r\n8. `dotnet run --project testproj`\r\n\r\n9. Go to `FSharpMetadata\\testproj\\bin\\Debug\\netcoreapp2.2`, right click on testproj.dll and choose Properties. Go to the Details tab.\r\n\r\n## Expected  behavior\r\n\r\n1. *2.2.104* is shown in the console.\r\n\r\n2. FSharpMetadata folder created, with FSharpMetadata.sln in it.\r\n\r\n3. New working folder is *FSharpMetadata*.\r\n\r\n4. testproj folder created, with testproj.fsproj in it, as well as a few other files.\r\n\r\n5. testproj is added to the sln file.\r\n\r\n6. testproj.fsproj should look like this:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <OutputType>Exe</OutputType>\r\n    <TargetFramework>netcoreapp2.2</TargetFramework>\r\n    <Authors>My author</Authors>\r\n    <AssemblyName>testproj</AssemblyName>\r\n    <RunPostBuildEvent>0</RunPostBuildEvent>\r\n    <Version>1.0.0</Version>\r\n    <AssemblyVersion>1.0.0.0</AssemblyVersion>\r\n    <FileVersion>1.0.0.0</FileVersion>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <Compile Include=\"Program.fs\" />\r\n  </ItemGroup>\r\n\r\n</Project>\r\n```\r\n\r\n7. The project is build. testproj.dll is created.\r\n\r\n8.  *Hello World from F#!* is shown in the console. This is to test that building works.\r\n\r\n9. File description has content (e.g. testproj), File version has content (e.g. 1.0.0.0), Product name has content (e.g. testproj), Product version has content (1.0.0), Original filename has content (e.g. testproj.dll).\r\n\r\n## Actual behavior\r\n\r\nAs expected, except for 9). Only Type, Size and Date modified have values. It looks like the screenshots that I posted when I made VS issue. See [here](https://developercommunity.visualstudio.com/content/problem/336722/metadata-not-shown-for-f-dlls-for-net-core.html).\r\n\r\nIf you try to run the repro, but change language to C#, you will get proper metadata for the dll.\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.104\r\n Commit:    73f036d4ac\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17763\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.104\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview-27324-5\r\n  Commit:  63a01b08e5\r\n\r\n.NET Core SDKs installed:\r\n  1.0.0-preview2-003121 [C:\\Program Files\\dotnet\\sdk]\r\n  1.0.0-preview2-003131 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.104 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.201 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.202 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.400 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.402 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.403 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.503 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.104 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview-010184 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview-19075-0444 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.0.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview-27324-5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview-27325-3 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n\r\n## For searchability\r\n\r\nAttributeInfo","Url":"https://github.com/dotnet/cli/issues/10957","RelatedDescription":"Open issue \"Metadata not shown for F# dlls when using dotnet cli to build\" (#10957)"},{"Id":"418777854","IsPullRequest":true,"CreatedAt":"2019-03-09T13:35:49","Actor":"dotnet-maestro[bot]","Number":"10953","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19157.23\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19158.5\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/10953","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#10953)"},{"Id":"419069407","IsPullRequest":true,"CreatedAt":"2019-03-09T13:02:06","Actor":"dotnet-maestro[bot]","Number":"10956","RawContent":null,"Title":"[master] Update dependencies from dotnet/sdk","State":"open","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/sdk\r\n\r\n- Microsoft.NET.Sdk - 3.0.100-preview4.19158.1\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/10956","RelatedDescription":"Open PR \"[master] Update dependencies from dotnet/sdk\" (#10956)"},{"Id":"419064509","IsPullRequest":true,"CreatedAt":"2019-03-09T12:00:49","Actor":"dotnet-bot","Number":"10955","RawContent":null,"Title":"Merge release/2.1.5xx to release/2.2.1xx","State":"open","Body":"\nThis is an automatically generated pull request from release/2.1.5xx into release/2.2.1xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1.5xx-to-release/2.2.1xx\ngit reset --hard upstream/release/2.2.1xx\ngit merge upstream/release/2.1.5xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.1.5xx-to-release/2.2.1xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/cli/pull/10955","RelatedDescription":"Open PR \"Merge release/2.1.5xx to release/2.2.1xx\" (#10955)"},{"Id":"419064506","IsPullRequest":true,"CreatedAt":"2019-03-09T12:00:46","Actor":"dotnet-bot","Number":"10954","RawContent":null,"Title":"Merge release/2.1.5xx to release/2.1.6xx","State":"open","Body":"\nThis is an automatically generated pull request from release/2.1.5xx into release/2.1.6xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1.5xx-to-release/2.1.6xx\ngit reset --hard upstream/release/2.1.6xx\ngit merge upstream/release/2.1.5xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.1.5xx-to-release/2.1.6xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/cli/pull/10954","RelatedDescription":"Open PR \"Merge release/2.1.5xx to release/2.1.6xx\" (#10954)"},{"Id":"418077650","IsPullRequest":true,"CreatedAt":"2019-03-09T00:55:50","Actor":"livarcocc","Number":"10940","RawContent":null,"Title":"Update branding to 2.2.106","State":"closed","Body":"","Url":"https://github.com/dotnet/cli/pull/10940","RelatedDescription":"Closed or merged PR \"Update branding to 2.2.106\" (#10940)"},{"Id":"418077470","IsPullRequest":true,"CreatedAt":"2019-03-09T00:55:37","Actor":"livarcocc","Number":"10939","RawContent":null,"Title":"Update branding to 2.1.506","State":"closed","Body":"","Url":"https://github.com/dotnet/cli/pull/10939","RelatedDescription":"Closed or merged PR \"Update branding to 2.1.506\" (#10939)"},{"Id":"418601539","IsPullRequest":false,"CreatedAt":"2019-03-08T22:52:22","Actor":"NicolasDorier","Number":"10950","RawContent":null,"Title":"Compilation error \"csc.dll\" exited with code 139 on ARMv7l","State":"closed","Body":"## Steps to reproduce\r\n\r\nOn\r\n```\r\nuname -a\r\nLinux odroid 4.14.5-92 #1 SMP PREEMPT Mon Dec 11 15:48:15 UTC 2017 armv7l armv7l armv7l GNU/Linux\r\n```\r\n\r\n\r\n```\r\ngit clone https://github.com/btcpayserver/btcpayserver\r\ncd btcpayserver/btcpayserver\r\ndotnet build -c Release\r\n```\r\n\r\n## Expected  behavior\r\n\r\nBuild succeed.\r\n\r\n## Actual behavior\r\n\r\nUser reported compilation error \"csc.dll\" exited with code 134 on ARM.\r\nThe msbuild seems show error 139 from csc.dll.\r\n\r\n## Environment data\r\n\r\n@enorrmann can you provide precise `dotnet --version` here?\r\n\r\nHe tried with SDK `2.1.504` and `2.2.104` with same error it seems.\r\n\r\n![image](https://user-images.githubusercontent.com/3020646/54002883-7dea0f00-4193-11e9-88bd-03c161406535.png)\r\n\r\n\r\n[msbuild.binlog](https://www.dropbox.com/s/4ic7z1j7qnh72iv/msbuild.binlog?dl=1)\r\n\r\nOrignally reported on https://github.com/btcpayserver/btcpayserver/issues/600\r\n\r\nIt seems same issue as https://github.com/dotnet/roslyn/issues/28038 . I opened a new issue because this one happen on ARM32v7.\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/10950","RelatedDescription":"Closed issue \"Compilation error \"csc.dll\" exited with code 139 on ARMv7l\" (#10950)"},{"Id":"418654619","IsPullRequest":true,"CreatedAt":"2019-03-08T19:57:15","Actor":"wli3","Number":"10952","RawContent":null,"Title":"Better no executable found message","State":"closed","Body":"Fix https://github.com/dotnet/cli/issues/10911\r\n\r\n```\r\n> dotnet non-exist-tool\r\nCould not run anything - file not found.\r\n        If you passed path 'non-exist-tool' it was not found.\r\n        If you intended to call a dotnet command, you may have misspelled it.\r\n        If you were calling a global tool, 'dotnet-non-exist-tool' was not found.\r\n\r\n> dotnet c:\\non\\exist\\executable.dll\r\nCould not run anything - file not found.\r\n        If you passed path 'c:\\non\\exist\\executable.dll' it was not found.\r\n        If you intended to call a dotnet command, you may have misspelled it.\r\n        If you were calling a global tool, 'executable' was not found.\r\n```\r\n\r\n- If this PR should not run tests please add text \"skip[REMOVE_THIS]ci[REMOVE_THIS]please\" (remove the marked text, no quotes).\r\n- Please add description for changes you are making.\r\n- If there is an issue related to this PR, please add the reference.\r\n","Url":"https://github.com/dotnet/cli/pull/10952","RelatedDescription":"Closed or merged PR \"Better no executable found message\" (#10952)"},{"Id":"418615934","IsPullRequest":true,"CreatedAt":"2019-03-08T03:28:17","Actor":"swaroop-sridhar","Number":"10951","RawContent":null,"Title":"Small updates to runtime.config documentation","State":"open","Body":"Update some external document references, and other minor corrections.","Url":"https://github.com/dotnet/cli/pull/10951","RelatedDescription":"Open PR \"Small updates to runtime.config documentation\" (#10951)"},{"Id":"418580587","IsPullRequest":true,"CreatedAt":"2019-03-08T01:40:02","Actor":"peterhuene","Number":"10949","RawContent":null,"Title":"Limit job object usage to Windows 8/2012 or later.","State":"closed","Body":"The ASP.NET Core team has a test that runs on Windows 7/2008 which spawns IIS\r\nExpress.  The test is running under `dotnet test` and thus the child\r\nprocess gets assigned to dotnet's job object for process reaping.  However, IIS\r\nExpress maintains its own job object for the process it spawns and the dotnet\r\njob object assignment interferes with IIS Express' use of its job objects.\r\n\r\nThis occurs on Windows 7 and Windows Server 2008 because those versions of\r\nWindows do not support nested jobs.\r\n\r\nThe fix taken here is to limit the use of job objects for process reaping to\r\nWindows 8 / Windows Server 2012 or later.  This is done with an explicit OS\r\nversion check because there is no change to the Job Objects API to enable\r\nsupport for nested jobs and thus no other way to determine if the feature is\r\navailable to us.\r\n\r\nFixes #10947.","Url":"https://github.com/dotnet/cli/pull/10949","RelatedDescription":"Closed or merged PR \"Limit job object usage to Windows 8/2012 or later.\" (#10949)"},{"Id":"418558161","IsPullRequest":false,"CreatedAt":"2019-03-08T01:40:01","Actor":"pakrym","Number":"10947","RawContent":null,"Title":"Adding child processes to job objects prevents them from creating job objects of their own","State":"closed","Body":"We are hitting an issue while trying to test AspNetCore Module for IIS Express on Windows 7/2008R2 after taking and SDK with https://github.com/dotnet/cli/pull/10720 change.\r\n\r\nIn the test, we start IIS Express process that spawns new indstance of dotnet.exe, tries to attach it to a job object and fails because the entire process tree is already attached to the job object that CLI has created.\r\n\r\nI see couple possible solutions:\r\n1. Disable process tracking using job objects on Windows 7\r\n2. Set `JOB_OBJECT_LIMIT_BREAKAWAY_OK` flag set on the job object.\r\n\r\ncc @peterhuene @danmosemsft \r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/10947","RelatedDescription":"Closed issue \"Adding child processes to job objects prevents them from creating job objects of their own\" (#10947)"},{"Id":"418576994","IsPullRequest":false,"CreatedAt":"2019-03-08T00:26:44","Actor":"jaredpar","Number":"10948","RawContent":null,"Title":"SDK should use Microsoft.Net.Compilers.Toolset package","State":"open","Body":"The Roslyn team is deprecating the Microsoft.NETCore.Compilers package which contained only CoreCLR binaries and moving to Microsoft.Net.Compilers.Toolset which contains desktop and CoreCLR binaries. The SDK should switch to using this package when taking new Roslyn drops. \r\n\r\n\r\n@nguerrera is aware of this change. ","Url":"https://github.com/dotnet/cli/issues/10948","RelatedDescription":"Open issue \"SDK should use Microsoft.Net.Compilers.Toolset package\" (#10948)"},{"Id":"418540041","IsPullRequest":true,"CreatedAt":"2019-03-07T22:18:38","Actor":"dotnet-maestro[bot]","Number":"10946","RawContent":null,"Title":"[release/3.0.1xx] Update dependencies from dotnet/arcade","State":"open","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19157.4\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/10946","RelatedDescription":"Open PR \"[release/3.0.1xx] Update dependencies from dotnet/arcade\" (#10946)"},{"Id":"418274411","IsPullRequest":true,"CreatedAt":"2019-03-07T18:19:24","Actor":"dotnet-bot","Number":"10944","RawContent":null,"Title":"Merge release/2.1.6xx to release/2.2.2xx","State":"closed","Body":"\nThis is an automatically generated pull request from release/2.1.6xx into release/2.2.2xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1.6xx-to-release/2.2.2xx\ngit reset --hard upstream/release/2.2.2xx\ngit merge upstream/release/2.1.6xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.1.6xx-to-release/2.2.2xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/cli/pull/10944","RelatedDescription":"Closed or merged PR \"Merge release/2.1.6xx to release/2.2.2xx\" (#10944)"},{"Id":"418297322","IsPullRequest":true,"CreatedAt":"2019-03-07T14:42:52","Actor":"dotnet-maestro[bot]","Number":"10945","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19156.20\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/10945","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#10945)"},{"Id":"418274389","IsPullRequest":true,"CreatedAt":"2019-03-07T12:01:46","Actor":"dotnet-bot","Number":"10943","RawContent":null,"Title":"Merge release/2.2.1xx to release/2.2.2xx","State":"open","Body":"\nThis is an automatically generated pull request from release/2.2.1xx into release/2.2.2xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.2.1xx-to-release/2.2.2xx\ngit reset --hard upstream/release/2.2.2xx\ngit merge upstream/release/2.2.1xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.2.1xx-to-release/2.2.2xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/cli/pull/10943","RelatedDescription":"Open PR \"Merge release/2.2.1xx to release/2.2.2xx\" (#10943)"},{"Id":"418212253","IsPullRequest":false,"CreatedAt":"2019-03-07T09:38:14","Actor":"pavelovcharov","Number":"10942","RawContent":null,"Title":"The 'dotnet build' command hangs when building a specific code","State":"open","Body":"The following code will cause the `dotnet build` command to hang:\r\n```\r\n class ListItem {\r\n            public ListItem Prev { get; set; }\r\n            public ListItem Next { get; set; }\r\n        }\r\n        void ArrangeNonOverlapping(IList<ListItem> labels) {\r\n            List<ListItem> actualLabels = new List<ListItem>(labels);\r\n            ListItem prev = null;\r\n            ListItem next = null;\r\n            for (int i = 0; i < labels.Count; i++) {\r\n                ListItem label = actualLabels[i];\r\n                label.Prev = prev;\r\n                label.Next = next;\r\n                if (prev != null)\r\n                    prev.Next = label;\r\n                if (next != null)\r\n                    next.Prev = label;\r\n            }\r\n        }\r\n```\r\nThere is no issue when this code is built within Visual Studio\r\n\r\n## Steps to reproduce\r\nI have prepared a small sample to demonstrate the issue: https://github.com/pavelovcharov/netcore3_dotnetbuildhangs\r\n\r\n1) git clone https://github.com/pavelovcharov/netcore3_dotnetbuildhangs\r\n2) cd netcore3_dotnetbuildhangs\r\n2) dotnet build\r\n\r\n## Expected  behavior\r\nThe ```dotnet  build``` command successfully builds the project\r\n\r\n## Actual behavior\r\nThe ```dotnet  build``` command hangs\r\n\r\n## Environment data\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview4-010591\r\n Commit:    6cb32d53bc\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17763\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview4-010591\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview4-27503-9\r\n  Commit:  04c13d860a\r\n\r\n.NET Core SDKs installed:\r\n  2.1.500 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.600-preview-009426 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.600-preview-009472 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.600-preview-009497 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.600 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview-010124 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview4-010591 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview-19067-0383 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview4-19153-01 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview-27316-4 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview4-27503-9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview-27316-2 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview4-27501-41 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/10942","RelatedDescription":"Open issue \"The 'dotnet build' command hangs when building a specific code\" (#10942)"},{"Id":"418124071","IsPullRequest":false,"CreatedAt":"2019-03-07T04:29:55","Actor":"tonycoelho","Number":"10941","RawContent":null,"Title":"dotnet Release Metadata 3.0.0-preview3-27503-5 missing hash","State":"open","Body":"The latest 3.0 release listed in the release metadata json file located at the link below, 3.0.0-preview3-27503-5 (aka 3.0.0-preview3), is missing the hash value on every file listed in the runtime, sdk, and aspnetcore-runtime file collections.\r\n\r\nhttps://dotnetcli.blob.core.windows.net/dotnet/release-metadata/3.0/releases.json\r\n\r\nThe hash property should contain the SHA256 hash for the file provided at the URL. Example of the issue below.\r\n```json\r\n{\r\n  \"name\": \"dotnet-runtime-linux-arm.tar.gz\",\r\n  \"rid\": \"linux-arm\",\r\n  \"url\": \"https://download.visualstudio.microsoft.com/download/pr/61afd68a-0079-45a3-917a-b8cb679fdc43/d3b8792106bbcc4b790407365fd025ac/dotnet-runtime-3.0.0-preview3-27503-5-linux-arm.tar.gz\",\r\n  \"hash\": \"\"\r\n}\r\n```\r\n\r\n@leecow ","Url":"https://github.com/dotnet/cli/issues/10941","RelatedDescription":"Open issue \"dotnet Release Metadata 3.0.0-preview3-27503-5 missing hash\" (#10941)"},{"Id":"417559004","IsPullRequest":true,"CreatedAt":"2019-03-07T00:39:17","Actor":"dotnet-bot","Number":"10933","RawContent":null,"Title":"Merge release/2.1.5xx to release/2.1.6xx","State":"closed","Body":"\nThis is an automatically generated pull request from release/2.1.5xx into release/2.1.6xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1.5xx-to-release/2.1.6xx\ngit reset --hard upstream/release/2.1.6xx\ngit merge upstream/release/2.1.5xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.1.5xx-to-release/2.1.6xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/cli/pull/10933","RelatedDescription":"Closed or merged PR \"Merge release/2.1.5xx to release/2.1.6xx\" (#10933)"},{"Id":"417791945","IsPullRequest":true,"CreatedAt":"2019-03-06T23:06:57","Actor":"dotnet-maestro[bot]","Number":"10937","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19155.29\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/10937","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#10937)"},{"Id":"418048279","IsPullRequest":false,"CreatedAt":"2019-03-06T22:57:27","Actor":"ObsidianMinor","Number":"10938","RawContent":null,"Title":".NET website doesn't list .NET Core install scripts as download options","State":"open","Body":"There's two install scripts listed under `/scripts/obtain/`, and as someone that never browsed this repository often, I never knew they existed until someone showed me. I was surprised that these scripts, which are incredibly useful, are never mentioned on the website. It'd be nice if they were listed in some form or fashion so other developers can easily find them if they always use the main downloads website.","Url":"https://github.com/dotnet/cli/issues/10938","RelatedDescription":"Open issue \".NET website doesn't list .NET Core install scripts as download options\" (#10938)"},{"Id":"417473742","IsPullRequest":true,"CreatedAt":"2019-03-06T21:38:32","Actor":"nguerrera","Number":"10928","RawContent":null,"Title":"Unblock dotnet/sdk -> dotnet/cli flow","State":"closed","Body":"1. Stop forcing runtime version in tests\r\n2. Update .NET Core SDK LKG\r\n3. Stop setting RestoreAdditionalProjectSources as global property\r\n4. Disable dotnet store tests against dotnet/sdk#2914 (as was done in dotnet/sdk)\r\n5. Fix tests that need at least one package reference vs. basic scenarios in 3.0 that don't have that by default\r\n6. Fix SIGTERM shutdown race","Url":"https://github.com/dotnet/cli/pull/10928","RelatedDescription":"Closed or merged PR \"Unblock dotnet/sdk -> dotnet/cli flow\" (#10928)"},{"Id":"417686359","IsPullRequest":true,"CreatedAt":"2019-03-06T08:46:35","Actor":"singhsarab","Number":"10936","RawContent":null,"Title":"Updating the test templates for net core 2.2","State":"open","Body":"Related to https://github.com/dotnet/test-templates/pull/57\r\n","Url":"https://github.com/dotnet/cli/pull/10936","RelatedDescription":"Open PR \"Updating the test templates for net core 2.2\" (#10936)"},{"Id":"417570668","IsPullRequest":true,"CreatedAt":"2019-03-06T04:13:40","Actor":"livarcocc","Number":"10935","RawContent":null,"Title":"MSBuild 16.0.450","State":"closed","Body":"","Url":"https://github.com/dotnet/cli/pull/10935","RelatedDescription":"Closed or merged PR \"MSBuild 16.0.450\" (#10935)"},{"Id":"417570263","IsPullRequest":true,"CreatedAt":"2019-03-06T04:13:16","Actor":"livarcocc","Number":"10934","RawContent":null,"Title":"MSBuild 16.0.450","State":"closed","Body":"","Url":"https://github.com/dotnet/cli/pull/10934","RelatedDescription":"Closed or merged PR \"MSBuild 16.0.450\" (#10934)"},{"Id":"417529491","IsPullRequest":true,"CreatedAt":"2019-03-06T00:39:04","Actor":"livarcocc","Number":"10931","RawContent":null,"Title":"Update the version of Tasks Feed tools to handle a breaking change on git.","State":"closed","Body":"","Url":"https://github.com/dotnet/cli/pull/10931","RelatedDescription":"Closed or merged PR \"Update the version of Tasks Feed tools to handle a breaking change on git.\" (#10931)"},{"Id":"417538581","IsPullRequest":true,"CreatedAt":"2019-03-06T00:38:34","Actor":"livarcocc","Number":"10932","RawContent":null,"Title":"TestPlatform Insertion 16.0.1","State":"closed","Body":"","Url":"https://github.com/dotnet/cli/pull/10932","RelatedDescription":"Closed or merged PR \"TestPlatform Insertion 16.0.1\" (#10932)"},{"Id":"417520899","IsPullRequest":true,"CreatedAt":"2019-03-05T23:27:29","Actor":"livarcocc","Number":"10930","RawContent":null,"Title":"Update the version of Tasks Feed tools to handle a breaking change on git.","State":"closed","Body":"@mmitche said he is almost certain this will work.\r\n","Url":"https://github.com/dotnet/cli/pull/10930","RelatedDescription":"Closed or merged PR \"Update the version of Tasks Feed tools to handle a breaking change on git.\" (#10930)"},{"Id":"417518154","IsPullRequest":true,"CreatedAt":"2019-03-05T22:47:55","Actor":"livarcocc","Number":"10929","RawContent":null,"Title":"Sdk 2.1.600-preview-63905-02","State":"closed","Body":"","Url":"https://github.com/dotnet/cli/pull/10929","RelatedDescription":"Closed or merged PR \"Sdk 2.1.600-preview-63905-02\" (#10929)"}],"ResultType":"GitHubIssue"},"Standard-Issues":{"Issues":[{"Id":"418668244","IsPullRequest":true,"CreatedAt":"2019-03-09T00:32:27","Actor":"stephentoub","Number":"1098","RawContent":null,"Title":"Add dummy field to TypedReference","State":"closed","Body":"cc: @terrajobst ","Url":"https://github.com/dotnet/standard/pull/1098","RelatedDescription":"Closed or merged PR \"Add dummy field to TypedReference\" (#1098)"},{"Id":"418474274","IsPullRequest":false,"CreatedAt":"2019-03-07T22:27:38","Actor":"MgSam","Number":"1097","RawContent":null,"Title":"Change .NET Standard 2.1 version number","State":"closed","Body":"It was just [announced ](https://devblogs.microsoft.com/dotnet/announcing-net-core-3-preview-3/#) that the next version of .NET Standard will be 2.1, which will be implemented by .NET Core 3.0 and incompatible with .NET Core 2.1 and incompatible with any version of .NET Framework. Got all that?\r\n\r\nI implore you to please change the version number of Standard 2.1 before it's too late. It is extremely confusing to have it be Standard 2.1 which is incompatible with Core 2.1. I strongly feel that Standard should version alongside of Core (given that Core is the lead implementation of .NET) and should be Standard 3.0\r\n\r\nIn lieu of that, at the very least it should get a version number which doesn't actively lead to confusion by aligning with the version number of an incompatible version of Core. Standard 2.5?\r\n\r\nI know Microsoft has a reputation to uphold at being horrible at naming things, but this is a bridge too far :)","Url":"https://github.com/dotnet/standard/issues/1097","RelatedDescription":"Closed issue \"Change .NET Standard 2.1 version number\" (#1097)"},{"Id":"417603266","IsPullRequest":true,"CreatedAt":"2019-03-06T03:17:38","Actor":"terrajobst","Number":"1096","RawContent":null,"Title":"Update information for .NET Standard 2.1","State":"closed","Body":"This updates the version table for .NET Standard 2.1 as well as the API diff.\r\n\r\n/cc @mairaw ","Url":"https://github.com/dotnet/standard/pull/1096","RelatedDescription":"Closed or merged PR \"Update information for .NET Standard 2.1\" (#1096)"},{"Id":"417601953","IsPullRequest":true,"CreatedAt":"2019-03-06T03:11:36","Actor":"terrajobst","Number":"1095","RawContent":null,"Title":"Add footnote regarding .NET Framework 4.6.1 support","State":"closed","Body":"This mirrors what's already in the docs","Url":"https://github.com/dotnet/standard/pull/1095","RelatedDescription":"Closed or merged PR \"Add footnote regarding .NET Framework 4.6.1 support\" (#1095)"},{"Id":"416990675","IsPullRequest":false,"CreatedAt":"2019-03-04T21:01:09","Actor":"tannergooding","Number":"1094","RawContent":null,"Title":"Consider the HWIntrinsic APIs for NS2.1","State":"open","Body":"### Summary\r\n\r\nWe should consider including the Harware Intrinsic APIs as part of `netstandard2.1` given that they are trivial to \"support\" (you just expose the APIs and return `false` for all the `IsSupported` checks, as the shared framework code is already doing), were designed in a way that the feature can be incrementally enabled by a given runtime, are already finding use in the shared framework code, and will allow users to more readily write cross-runtime libraries.\r\n\r\n### Rationale\r\n\r\n`netcoreapp3.0` is adding ~1500 APIs in order to support the new \"Hardware Intrinsics\" feature. These APIs provide support for writing more efficient algorithms that can take advantage of hardware specific functionality.\r\n\r\nWhile the number of APIs exposed may seem daunting, the APIs are hardware specific and were designed such that you must perform the appropriate checks before attempting to use a given API or they will result in a `PlatformNotSupportedException` at runtime. For example, `System.Runtime.Intrinsics.X86.Sse` is a class that exposes the SSE ISA for the x86 and x64 architectures. Before using any of the methods on that class, you must emit an `if (Sse.IsSupported)` check to validate that both the current hardware and the current runtime support this ISA.\r\n\r\nThese API declarations are also part of the existing shared framework code and have a default implementation of returning `false` for the `IsSupported` checks and throwing `PlatformNotSupportedException` from any of the other exposed hardware-specific APIs. This has allowed us to already take a cross-runtime dependency on these intrinsics in places like `SpanHelpers`, `Decimal`, `BitOperations`, `BitArray`, and more.\r\n\r\nGiven the above, I propose that these APIs be included as part of `netstandard2.1` as it will allow general library and application developers to share in the same benefits we have already seen. That is, it will light-up on .NET Core 3.0 and will do nothing on other runtimes. This will avoid the need for them to cross-compile their code in a number of cases.\r\n\r\nFor the runtimes that don't support this functionality yet, they should require somewhere between no and minimal changes. For the most part, they should already be internally compiling these APIs and hitting the `IsSupported=false` paths. So they will ultimately just be exposing these APIs to the end-user and would require no changes. The work that may be required is to ensure that the `Vector64<T>`, `Vector128<T>`, and `Vector256<T>` types have the appropriate ABI dependent type layouts. That is, these types should have the appropriate packing (e.g. `16` for `Vector128<T>` on x86/x64 since it maps to the `__m128` ABI primitive defined by the Windows and System V calling convention specifications).\r\n\r\nExposing this will also allow the various runtimes to have incremental \"light-up\" of these APIs. That is, rather than waiting for the next release to both expose and implement the APIs, they can expose the the APIs as part of `netstandard2.1` and the corresponding version of their runtime (e.g `x.0`). They can then light up individual ISAs and make them available to their users as they see fit (e.g. They could enable just `SSE` in `x.1` and could enable SSE2/SSE3 in `x.2`, etc).\r\n\r\n","Url":"https://github.com/dotnet/standard/issues/1094","RelatedDescription":"Open issue \"Consider the HWIntrinsic APIs for NS2.1\" (#1094)"},{"Id":"416499863","IsPullRequest":false,"CreatedAt":"2019-03-03T18:13:53","Actor":"proof85","Number":"1093","RawContent":null,"Title":"HashCode to standard","State":"closed","Body":"Hi,\r\n\r\nis it possible to add the HashCode-\"Helper\" struct to the .net standard? Including the Combine method? it is covered by the .net corefx since v2.1 and it looks like there is no os or platform specific usecase","Url":"https://github.com/dotnet/standard/issues/1093","RelatedDescription":"Closed issue \"HashCode to standard\" (#1093)"},{"Id":"414920447","IsPullRequest":false,"CreatedAt":"2019-02-27T02:53:49","Actor":"divega","Number":"1092","RawContent":null,"Title":"Add string overloads to DbDataReader.Get*() to .NET Standard 2.1","State":"open","Body":"This is mainly about adding the API from https://github.com/dotnet/corefx/issues/31595 (commit https://github.com/dotnet/corefx/commit/b30fc2b4ee302e449e3580ae39cb083a76b813c9), plus possibly two additional async method possibly coming from https://github.com/dotnet/corefx/issues/35611, to .NET Standard 2.1.\r\n\r\ncc @roji @ajcvickers @terrajobst ","Url":"https://github.com/dotnet/standard/issues/1092","RelatedDescription":"Open issue \"Add string overloads to DbDataReader.Get*() to .NET Standard 2.1\" (#1092)"},{"Id":"414887877","IsPullRequest":false,"CreatedAt":"2019-02-27T00:35:13","Actor":"ChaseFlorell","Number":"1091","RawContent":null,"Title":"Collection<T> and ObservableCollection<T> do not support ranges","State":"open","Body":"This is taken directly from https://github.com/dotnet/corefx/issues/10752 [by @robertmclaws]\r\n\r\nThis API change is already approved in .netcore (tentatively scheduled for 3.0), and I think it's equally as important to be available in .netstandard\r\n\r\n```csharp\r\n    // Adds a range to the end of the collection.\r\n    // Raises CollectionChanged (NotifyCollectionChangedAction.Add)\r\n    public void AddRange(IEnumerable<T> collection) => InsertItemsRange(0, collection);\r\n\r\n    // Inserts a range\r\n    // Raises CollectionChanged (NotifyCollectionChangedAction.Add)\r\n    public void InsertRange(int index, IEnumerable<T> collection) => InsertItemsRange(index, collection);\r\n\r\n    // Removes a range.\r\n    // Raises CollectionChanged (NotifyCollectionChangedAction.Remove)\r\n    public void RemoveRange(int index, int count) => RemoveItemsRange(index, count);\r\n\r\n    // Will allow to replace a range with fewer, equal, or more items.\r\n    // Raises CollectionChanged (NotifyCollectionChangedAction.Replace)\r\n    public void ReplaceRange(int index, int count, IEnumerable<T> collection)\r\n    {\r\n         RemoveItemsRange(index, count);\r\n         InsertItemsRange(index, collection);\r\n    }\r\n\r\n    #region virtual methods\r\n    protected virtual void InsertItemsRange(int index, IEnumerable<T> collection);\r\n    protected virtual void RemoveItemsRange(int index, int count);\r\n    #endregion\r\n```\r\n\r\nPlease see the linked issue for the full discussion.\r\n\r\nI'm assuming it would land [here](https://github.com/dotnet/standard/blob/master/src/netstandard/ref/System.Collections.ObjectModel.cs) and the appropriate shims would be created, however I don't know enough about netstandard to actually draw up the PR.\r\n","Url":"https://github.com/dotnet/standard/issues/1091","RelatedDescription":"Open issue \"Collection<T> and ObservableCollection<T> do not support ranges\" (#1091)"},{"Id":"414879247","IsPullRequest":false,"CreatedAt":"2019-02-27T00:01:34","Actor":"wtgodbe","Number":"1090","RawContent":null,"Title":"Sort out baseline between netstandard & netcoreapp","State":"open","Body":"We should sit down & go over the diff between netstandard & netcoreapp, and decide what we need to fix/how we need to fix it.\r\n\r\nCC @terrajobst ","Url":"https://github.com/dotnet/standard/issues/1090","RelatedDescription":"Open issue \"Sort out baseline between netstandard & netcoreapp\" (#1090)"},{"Id":"414599564","IsPullRequest":true,"CreatedAt":"2019-02-26T13:10:54","Actor":"dotnet-maestro[bot]","Number":"1089","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.ApiCompat - 1.0.0-beta.19125.2\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19125.2\r\n- Microsoft.DotNet.Build.Tasks.Packaging - 1.0.0-beta.19125.2\r\n- Microsoft.DotNet.CodeAnalysis - 1.0.0-beta.19125.2\r\n- Microsoft.DotNet.GenAPI - 1.0.0-beta.19125.2\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1089","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1089)"},{"Id":"414366560","IsPullRequest":true,"CreatedAt":"2019-02-26T02:10:06","Actor":"terrajobst","Number":"1087","RawContent":null,"Title":"Remove windows row","State":"closed","Body":"After talking to @ptorr-msft it seems we can update this table and simplify the confusing Windows rows by combining *Windows* with *UWP* and removing *Windows Phone* and *Windows Phone Silverlight* entirely.\r\n\r\n/cc @mairaw @richlander ","Url":"https://github.com/dotnet/standard/pull/1087","RelatedDescription":"Closed or merged PR \"Remove windows row\" (#1087)"},{"Id":"414395637","IsPullRequest":true,"CreatedAt":"2019-02-26T02:09:06","Actor":"terrajobst","Number":"1088","RawContent":null,"Title":"Update .NET Standard 2.1 API delta","State":"closed","Body":"","Url":"https://github.com/dotnet/standard/pull/1088","RelatedDescription":"Closed or merged PR \"Update .NET Standard 2.1 API delta\" (#1088)"},{"Id":"414093373","IsPullRequest":true,"CreatedAt":"2019-02-25T13:10:50","Actor":"dotnet-maestro[bot]","Number":"1086","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.ApiCompat - 1.0.0-beta.19124.1\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19124.1\r\n- Microsoft.DotNet.Build.Tasks.Packaging - 1.0.0-beta.19124.1\r\n- Microsoft.DotNet.CodeAnalysis - 1.0.0-beta.19124.1\r\n- Microsoft.DotNet.GenAPI - 1.0.0-beta.19124.1\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1086","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1086)"},{"Id":"413818940","IsPullRequest":true,"CreatedAt":"2019-02-24T13:10:46","Actor":"dotnet-maestro[bot]","Number":"1085","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.ApiCompat - 1.0.0-beta.19123.1\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19123.1\r\n- Microsoft.DotNet.Build.Tasks.Packaging - 1.0.0-beta.19123.1\r\n- Microsoft.DotNet.CodeAnalysis - 1.0.0-beta.19123.1\r\n- Microsoft.DotNet.GenAPI - 1.0.0-beta.19123.1\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1085","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1085)"},{"Id":"413693365","IsPullRequest":true,"CreatedAt":"2019-02-23T13:10:47","Actor":"dotnet-maestro[bot]","Number":"1084","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.ApiCompat - 1.0.0-beta.19122.3\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19122.3\r\n- Microsoft.DotNet.Build.Tasks.Packaging - 1.0.0-beta.19122.3\r\n- Microsoft.DotNet.CodeAnalysis - 1.0.0-beta.19122.3\r\n- Microsoft.DotNet.GenAPI - 1.0.0-beta.19122.3\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1084","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1084)"},{"Id":"413628435","IsPullRequest":true,"CreatedAt":"2019-02-23T00:53:44","Actor":"terrajobst","Number":"1083","RawContent":null,"Title":"Add \"generated by a tool\"-header","State":"closed","Body":"This adds a header to all the Markdown files provided in the docs folder that\r\nshow the API set of .NET Standard. The header indicates that these are\r\ngenerated by a tool and PRs are generally not accepted.\r\n\r\nFixes #1053.","Url":"https://github.com/dotnet/standard/pull/1083","RelatedDescription":"Closed or merged PR \"Add \"generated by a tool\"-header\" (#1083)"},{"Id":"413393938","IsPullRequest":true,"CreatedAt":"2019-02-22T13:10:47","Actor":"dotnet-maestro[bot]","Number":"1082","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.ApiCompat - 1.0.0-beta.19121.5\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19121.5\r\n- Microsoft.DotNet.Build.Tasks.Packaging - 1.0.0-beta.19121.5\r\n- Microsoft.DotNet.CodeAnalysis - 1.0.0-beta.19121.5\r\n- Microsoft.DotNet.GenAPI - 1.0.0-beta.19121.5\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1082","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1082)"},{"Id":"413086694","IsPullRequest":true,"CreatedAt":"2019-02-22T07:09:05","Actor":"terrajobst","Number":"1080","RawContent":null,"Title":"Add SwitchExpressionException","State":"closed","Body":"Fixes #1077\r\n\r\nThis adds `SwitchExpressionException` that was added for supporting C#'s [`switch` expression construct](https://github.com/dotnet/csharplang/blob/master/proposals/patterns.md#switch-expression). The exception type was discussed in CoreFX in [this API request](https://github.com/dotnet/corefx/issues/33284).","Url":"https://github.com/dotnet/standard/pull/1080","RelatedDescription":"Closed or merged PR \"Add SwitchExpressionException\" (#1080)"},{"Id":"412707494","IsPullRequest":false,"CreatedAt":"2019-02-22T07:09:05","Actor":"terrajobst","Number":"1077","RawContent":null,"Title":"Include SwitchExpression added for C# 8","State":"closed","Body":"","Url":"https://github.com/dotnet/standard/issues/1077","RelatedDescription":"Closed issue \"Include SwitchExpression added for C# 8\" (#1077)"},{"Id":"413148623","IsPullRequest":false,"CreatedAt":"2019-02-21T22:14:20","Actor":"wtgodbe","Number":"1081","RawContent":null,"Title":"Use Arcade defaults for DebugType, etc","State":"open","Body":"https://github.com/dotnet/standard/blob/4a006e962fc5c5651b7712028e0e352b1e011a58/Directory.Build.props#L86-L104\r\n\r\nCC @tmat ","Url":"https://github.com/dotnet/standard/issues/1081","RelatedDescription":"Open issue \"Use Arcade defaults for DebugType, etc\" (#1081)"},{"Id":"412718646","IsPullRequest":true,"CreatedAt":"2019-02-21T22:12:16","Actor":"tmat","Number":"1078","RawContent":null,"Title":"Set copyright and package license","State":"closed","Body":"Prepares repo for change https://github.com/dotnet/arcade/pull/2003 by setting `Copyright` and `PackageLicenseExpression` properties. These values will be required to be set by each repository once https://github.com/dotnet/arcade/pull/2003 is merged.\r\n\r\nIn order to not break the current builds this change sets the properties conditionally. This condition can be removed once all repos switch to Arcade that has https://github.com/dotnet/arcade/pull/2003.\r\n\r\n@markwilkie\r\n","Url":"https://github.com/dotnet/standard/pull/1078","RelatedDescription":"Closed or merged PR \"Set copyright and package license\" (#1078)"},{"Id":"411583193","IsPullRequest":true,"CreatedAt":"2019-02-21T19:39:58","Actor":"akoeplinger","Number":"1074","RawContent":null,"Title":"Fix link to build logs in build status badge","State":"closed","Body":"The PR which added the build status badges used the status from the public project but linked to the internal project: https://github.com/dotnet/standard/pull/1062\r\nUpdated to link to point to the public project.\r\n\r\nFixes https://github.com/dotnet/standard/issues/1065\r\n\r\n/cc @wtgodbe ","Url":"https://github.com/dotnet/standard/pull/1074","RelatedDescription":"Closed or merged PR \"Fix link to build logs in build status badge\" (#1074)"},{"Id":"412912955","IsPullRequest":true,"CreatedAt":"2019-02-21T13:10:49","Actor":"dotnet-maestro[bot]","Number":"1079","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.ApiCompat - 1.0.0-beta.19121.1\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19121.1\r\n- Microsoft.DotNet.Build.Tasks.Packaging - 1.0.0-beta.19121.1\r\n- Microsoft.DotNet.CodeAnalysis - 1.0.0-beta.19121.1\r\n- Microsoft.DotNet.GenAPI - 1.0.0-beta.19121.1\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1079","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1079)"},{"Id":"410901729","IsPullRequest":false,"CreatedAt":"2019-02-20T21:32:22","Actor":"mpetrinidev","Number":"1071","RawContent":null,"Title":"Cannot use linq in MatchCollection regex with .NET Standard 2.0","State":"closed","Body":"Hi everyone,\r\n\r\nI have the following problem with a .NET Standard 2.0 class library\r\n\r\n'MatchCollection' does not contain a definition for 'Select' and no accessible extension method 'Select' accepting a first argument of type 'MatchCollection' could be found (are you missing a using directive or an assembly reference?)\r\n\r\n**Code**\r\n\r\n`IEnumerable<string> words = Regex.Matches(text, @\"([\\w]+\\.)+[\\w]+(?=[\\s]|$)\").Select(p => p.Value);`\r\n\r\nI had to move this code from a project that is develope with .NET Core 2.1.\r\n\r\nHow do I solve this problem? I read [https://docs.microsoft.com/en-us/dotnet/api/system.text.regularexpressions.matchcollection?view=netstandard-2.0](url) but I cannot find what the problem is\r\n\r\nThanks in advance","Url":"https://github.com/dotnet/standard/issues/1071","RelatedDescription":"Closed issue \"Cannot use linq in MatchCollection regex with .NET Standard 2.0\" (#1071)"},{"Id":"412413302","IsPullRequest":true,"CreatedAt":"2019-02-20T13:10:57","Actor":"dotnet-maestro[bot]","Number":"1076","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.ApiCompat - 1.0.0-beta.19119.2\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19119.2\r\n- Microsoft.DotNet.Build.Tasks.Packaging - 1.0.0-beta.19119.2\r\n- Microsoft.DotNet.CodeAnalysis - 1.0.0-beta.19119.2\r\n- Microsoft.DotNet.GenAPI - 1.0.0-beta.19119.2\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1076","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1076)"},{"Id":"412032685","IsPullRequest":false,"CreatedAt":"2019-02-19T17:11:56","Actor":"YairHalberstadt","Number":"1075","RawContent":null,"Title":"A number of APIs still exist in both .NetCore and .NetFramework, but are missing in the .NetStandard 2.0 version of System.Reflection.Emit","State":"closed","Body":"I'm currently looking into targeting .Net Standard for Iron Python: https://github.com/IronLanguages/dlr/issues/175\r\n\r\nSome of the required Reflection.Emit APIs are missing from the System.Reflection.Emit nuget package when targeting .Net Standard 2.0, such as `DynamicMethod` and `TypeBuilder.CreateType()`. However they exist in both .Net Core and .Net Framework, and I believe it was decided in https://github.com/dotnet/corefx/issues/29365 (specifically from https://github.com/dotnet/corefx/issues/29365#issuecomment-398256162  and onwards) that such APIs should be included in the Nuget Package, and should throw when used from an AOT runtime.\r\n\r\nThe work to do that was completed in https://github.com/dotnet/corefx/pull/30741.\r\n\r\nIs there any reason why the Nuget package doesn't seem to reflect this?\r\n\r\nThanks","Url":"https://github.com/dotnet/standard/issues/1075","RelatedDescription":"Closed issue \"A number of APIs still exist in both .NetCore and .NetFramework, but are missing in the .NetStandard 2.0 version of System.Reflection.Emit\" (#1075)"},{"Id":"411518831","IsPullRequest":false,"CreatedAt":"2019-02-18T15:04:17","Actor":"kjpou1","Number":"1073","RawContent":null,"Title":".NET Standard for WebAssembly","State":"open","Body":"### Rationale and Usage\r\n\r\nAs WebAssembly support in Mono is being worked on there is a need to consider it as a platform for NS2.1.  `PlatformID.WebAssembly`\r\n \r\n### Proposed API\r\n\r\n#### PlatformID\r\n\r\nThis adds WebAssembly enum to `PlatformID`\r\n\r\n```\r\n    public enum PlatformID\r\n    {\r\n        [EditorBrowsable(EditorBrowsableState.Never)] Win32S = 0,\r\n        [EditorBrowsable(EditorBrowsableState.Never)] Win32Windows = 1,\r\n        Win32NT = 2,\r\n        [EditorBrowsable(EditorBrowsableState.Never)] WinCE = 3,\r\n        Unix = 4,\r\n        [EditorBrowsable(EditorBrowsableState.Never)] Xbox = 5,\r\n        [EditorBrowsable(EditorBrowsableState.Never)] MacOSX = 6\r\n        [EditorBrowsable(EditorBrowsableState.Never)] WebAssembly = 7\r\n    }\r\n```\r\n\r\n#### OSPlatform\r\n\r\nThis adds `OSPlatform.WebAssembly`.\r\n\r\n```\r\nnamespace System.Runtime.InteropServices\r\n{\r\n    public readonly struct OSPlatform : IEquatable<OSPlatform>\r\n    {\r\n        private readonly string _osPlatform;\r\n\r\n        public static OSPlatform WebAssembly { get; } = new OSPlatform(\"WEBASSEMBLY\");\r\n\r\n        public static OSPlatform FreeBSD { get; } = new OSPlatform(\"FREEBSD\");\r\n\r\n        public static OSPlatform Linux { get; } = new OSPlatform(\"LINUX\");\r\n\r\n        public static OSPlatform OSX { get; } = new OSPlatform(\"OSX\");\r\n\r\n        public static OSPlatform Windows { get; } = new OSPlatform(\"WINDOWS\");\r\n\r\n```\r\n\r\nIssue from Blazor: https://github.com/mono/mono/issues/13002\r\n\r\n@terrajobst @marek-safar @lewing\r\n","Url":"https://github.com/dotnet/standard/issues/1073","RelatedDescription":"Open issue \".NET Standard for WebAssembly\" (#1073)"},{"Id":"411070793","IsPullRequest":true,"CreatedAt":"2019-02-16T13:10:47","Actor":"dotnet-maestro[bot]","Number":"1072","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.ApiCompat - 1.0.0-beta.19115.1\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19115.1\r\n- Microsoft.DotNet.Build.Tasks.Packaging - 1.0.0-beta.19115.1\r\n- Microsoft.DotNet.CodeAnalysis - 1.0.0-beta.19115.1\r\n- Microsoft.DotNet.GenAPI - 1.0.0-beta.19115.1\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1072","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1072)"},{"Id":"410533703","IsPullRequest":true,"CreatedAt":"2019-02-15T20:32:52","Actor":"wtgodbe","Number":"1069","RawContent":null,"Title":"Label package as 'preview3'","State":"closed","Body":"Change label from `preview1` to `preview3` for upcoming release\r\n\r\nCC @danmosemsft @terrajobst","Url":"https://github.com/dotnet/standard/pull/1069","RelatedDescription":"Closed or merged PR \"Label package as 'preview3'\" (#1069)"},{"Id":"410759394","IsPullRequest":true,"CreatedAt":"2019-02-15T13:10:55","Actor":"dotnet-maestro[bot]","Number":"1070","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.ApiCompat - 1.0.0-beta.19114.4\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19114.4\r\n- Microsoft.DotNet.Build.Tasks.Packaging - 1.0.0-beta.19114.4\r\n- Microsoft.DotNet.CodeAnalysis - 1.0.0-beta.19114.4\r\n- Microsoft.DotNet.GenAPI - 1.0.0-beta.19114.4\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1070","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1070)"}],"ResultType":"GitHubIssue"},"CoreFx-Issues":{"Issues":[{"Id":"419135547","IsPullRequest":true,"CreatedAt":"2019-03-10T05:22:44","Actor":"davidsh","Number":"35918","RawContent":null,"Title":"Fix NetEventSource logging for Windows auth on Linux","State":"closed","Body":"While debugging some Linux enterprise auth (Negotiate/NTLM) scenarios, I discovered that the\r\nlogging I added in PR #35383 wasn't working. This was due to not passing in a 'null' value\r\nfor the context object for NetEventSource.Info. It was using the string object as the\r\ncontext object and not logging the string data.\r\n\r\nAs part of fixing that I optimized some code for remembering what auth package (NTLM\r\nor SPNEGO) is used.","Url":"https://github.com/dotnet/corefx/pull/35918","RelatedDescription":"Closed or merged PR \"Fix NetEventSource logging for Windows auth on Linux\" (#35918)"},{"Id":"419145463","IsPullRequest":true,"CreatedAt":"2019-03-10T04:30:10","Actor":"WinCPP","Number":"35919","RawContent":null,"Title":"Linked doc for debugging tests in Visual Studio","State":"open","Body":"While searching how to debug one specific test case using Visual Studio, I ended up on section \"Debugging tests in Visual Studio\" in this doc, but more information was somewhere else. So proposing this change to provide a link so that developers are led to proper page that has information on advanced features.\r\n\r\n@karelz @ahsonkhan ","Url":"https://github.com/dotnet/corefx/pull/35919","RelatedDescription":"Open PR \"Linked doc for debugging tests in Visual Studio\" (#35919)"},{"Id":"419129365","IsPullRequest":true,"CreatedAt":"2019-03-10T02:05:56","Actor":"Dotnet-GitSync-Bot","Number":"35917","RawContent":null,"Title":"Mirror changes from dotnet/corert,coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/corert,coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @EgorBo","Url":"https://github.com/dotnet/corefx/pull/35917","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corert,coreclr\" (#35917)"},{"Id":"419119607","IsPullRequest":true,"CreatedAt":"2019-03-10T00:03:25","Actor":"Dotnet-GitSync-Bot","Number":"35916","RawContent":null,"Title":"Mirror changes from dotnet/coreclr,corert","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr,corert\n\n\n**Please REBASE this PR when merging**\n\n cc @ahoefling @ahoefling @ahoefling @ahoefling @ahoefling @ahoefling @ahoefling @ahoefling @ahoefling @ahoefling @ahoefling @ahoefling @ahoefling @ahoefling @ahoefling @ahoefling @ahoefling @marek-safar @stephentoub","Url":"https://github.com/dotnet/corefx/pull/35916","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr,corert\" (#35916)"},{"Id":"419098309","IsPullRequest":true,"CreatedAt":"2019-03-09T22:23:33","Actor":"MarcoRossignoli","Number":"35915","RawContent":null,"Title":"Bug fix: await SmtpClient.SendMailAsync never ends","State":"closed","Body":"fixes https://github.com/dotnet/corefx/issues/35738\r\n\r\nI did some test and seem that issue jump out in case of empty content and synchronous completion of async send\r\n\r\nhttps://github.com/dotnet/corefx/blob/700f035b9533ed4e439de83e99da1293b7a82e93/src/System.Net.Mail/src/System/Net/Mail/MailPriority.cs#L342-L344\r\n\r\nbecuse in case of non empty content code ends up to call `LazyAsyncResult.InvokeCallback` wrapper with or without exception, invoking `SendMessageCallback`\r\n\r\nhttps://github.com/dotnet/corefx/blob/700f035b9533ed4e439de83e99da1293b7a82e93/src/System.Net.Mail/src/System/Net/Mime/MimePart.cs#L182-L184\r\n\r\nIn case of empty content `InvokeCallback` is called only in case of \"real\" async execution\r\n\r\nhttps://github.com/dotnet/corefx/blob/700f035b9533ed4e439de83e99da1293b7a82e93/src/System.Net.Mail/src/System/Net/Mail/MailPriority.cs#L312\r\n\r\nI think that in case of `CompletedSynchronously` we missed a call to `LazyAsyncResult.InvokeCallback`, something like:\r\n```cs\r\n  else\r\n            {\r\n                LazyAsyncResult result = new LazyAsyncResult(this, state, callback);\r\n                IAsyncResult newResult = writer.BeginGetContentStream(EmptySendCallback, new EmptySendContext(writer, result));\r\n                if (newResult.CompletedSynchronously)\r\n                {\r\n                    writer.EndGetContentStream(newResult).Close();\r\n                    result.InvokeCallback(); <- missing call to `SendMessageCallback`\r\n                }\r\n                return result;\r\n            }\r\n```\r\n\r\n/cc @davidsh\r\n","Url":"https://github.com/dotnet/corefx/pull/35915","RelatedDescription":"Closed or merged PR \"Bug fix: await SmtpClient.SendMailAsync never ends\" (#35915)"},{"Id":"419021004","IsPullRequest":true,"CreatedAt":"2019-03-09T21:54:05","Actor":"danmosemsft","Number":"35904","RawContent":null,"Title":"Remove 2 suffix step 1","State":"closed","Body":"I promised to remove this before and was reminded that I didn't.\r\n\r\nAfter Interop.Stat.cs is mirrored to CoreCLR, I will put up another PR to delete the \"2\" methods.","Url":"https://github.com/dotnet/corefx/pull/35904","RelatedDescription":"Closed or merged PR \"Remove 2 suffix step 1\" (#35904)"},{"Id":"418914987","IsPullRequest":true,"CreatedAt":"2019-03-09T21:52:38","Actor":"Dotnet-GitSync-Bot","Number":"35901","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @filipnavara","Url":"https://github.com/dotnet/corefx/pull/35901","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#35901)"},{"Id":"418883070","IsPullRequest":false,"CreatedAt":"2019-03-09T19:16:00","Actor":"Tragetaschen","Number":"35897","RawContent":null,"Title":"SSL Certificate validation error on Yocto","State":"closed","Body":"I'm using this test program on my embedded Yocto-based Linux distribution\r\n```csharp\r\npublic static async Task Main()\r\n{\r\n    var client = new HttpClient();\r\n    var response = await client.GetAsync(\"https://microsoft.com\");\r\n    Console.WriteLine(\"yay: \" + response.StatusCode);\r\n}\r\n```\r\n I'm `dotnet publish`ing with `-r linux-arm`. My project file contains\r\n```xml\r\n    <TargetFramework>netcoreapp2.2</TargetFramework>\r\n    <RuntimeFrameworkVersion>2.2.3</RuntimeFrameworkVersion>\r\n```\r\n\r\nOn the target platform, the program fails with\r\n```\r\nUnhandled Exception: System.Net.Http.HttpRequestException: The SSL connection could not be established, see inner exception. ---> System.Security.Authentication.AuthenticationException: The remote certificate is invalid according to the validation procedure.\r\n   at System.Net.Security.SslState.StartSendAuthResetSignal(ProtocolToken message, AsyncProtocolRequest asyncRequest, ExceptionDispatchInfo exception)\r\n[…]\r\n```\r\n\r\nWhen I run with `SSL_CERT_FILE=/etc/ssl/certs/ca-certificates.crt SSL_CERT_DIR=/dev/null` it works.\r\nWhen I run with `DOTNET_SYSTEM_NET_HTTP_USESOCKETSHTTPHANDLER=0` it works.\r\n\r\nI've checked the `System.Security.Cryptography.X509Certificates.dll` and according to the metadata it was built from https://github.com/dotnet/corefx/tree/5cb2e3488d8e6040a3652e82f54962da468a2e23 — the v2.2.3 tag, so it should include https://github.com/dotnet/corefx/pull/32455 to fix #32224\r\n\r\nWhat else could be wrong?","Url":"https://github.com/dotnet/corefx/issues/35897","RelatedDescription":"Closed issue \"SSL Certificate validation error on Yocto\" (#35897)"},{"Id":"419072173","IsPullRequest":true,"CreatedAt":"2019-03-09T17:25:37","Actor":"dotnet-maestro[bot]","Number":"35910","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/core-setup\r\n\r\n- Microsoft.NETCore.App - 3.0.0-preview4-27508-16\r\n- Microsoft.NETCore.DotNetHost - 3.0.0-preview4-27508-16\r\n- Microsoft.NETCore.DotNetHostPolicy - 3.0.0-preview4-27508-16\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/35910","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#35910)"},{"Id":"419074924","IsPullRequest":true,"CreatedAt":"2019-03-09T15:45:39","Actor":"dotnet-maestro[bot]","Number":"35914","RawContent":null,"Title":"[master] Update dependencies from  1 repositories","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://dnceng@dev.azure.com/dnceng/internal/_git/dotnet-optimization\r\n\r\n- optimization.windows_nt-x64.IBC.CoreFx - 99.99.99-master-20190308.5\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/35914","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from  1 repositories\" (#35914)"},{"Id":"419074244","IsPullRequest":true,"CreatedAt":"2019-03-09T15:28:36","Actor":"dotnet-maestro[bot]","Number":"35912","RawContent":null,"Title":"[master] Update dependencies from dotnet/standard","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/standard\r\n\r\n- NETStandard.Library - 2.1.0-prerelease.19158.1\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/35912","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/standard\" (#35912)"},{"Id":"419072568","IsPullRequest":true,"CreatedAt":"2019-03-09T14:39:45","Actor":"dotnet-maestro[bot]","Number":"35911","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/corefx\r\n\r\n- Microsoft.NETCore.Platforms - 3.0.0-preview4.19158.7\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/35911","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#35911)"},{"Id":"419069931","IsPullRequest":true,"CreatedAt":"2019-03-09T14:18:25","Actor":"dotnet-maestro[bot]","Number":"35908","RawContent":null,"Title":"[master] Update dependencies from dotnet/coreclr","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/coreclr\r\n\r\n- Microsoft.NET.Sdk.IL - 3.0.0-preview4-27508-76\r\n- Microsoft.NETCore.ILAsm - 3.0.0-preview4-27508-76\r\n- Microsoft.NETCore.Runtime.CoreCLR - 3.0.0-preview4-27508-76\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/35908","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/coreclr\" (#35908)"},{"Id":"419074498","IsPullRequest":true,"CreatedAt":"2019-03-09T14:00:54","Actor":"dotnet-maestro[bot]","Number":"35913","RawContent":null,"Title":"[release/3.0] Update dependencies from dotnet/standard","State":"open","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/standard\r\n\r\n- NETStandard.Library - 2.1.0-prerelease.19158.1\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/35913","RelatedDescription":"Open PR \"[release/3.0] Update dependencies from dotnet/standard\" (#35913)"},{"Id":"419070248","IsPullRequest":false,"CreatedAt":"2019-03-09T13:11:52","Actor":"devsko","Number":"35909","RawContent":null,"Title":"Marshal NCCEventArgs to WinRT crashes","State":"open","Body":"This happened first in a WPF app with a WindowsXamlHost from the windows toolkit, but it can be reproduced very easy. \r\n`Windows.winmd` must be referenced and a app.manifest with `<maxversiontested Id=\"10.0.18226.0\"/>` is needed.\r\n``` c#\r\nusing System;\r\nusing System.Collections.ObjectModel;\r\nusing Windows.UI.Xaml.Controls;\r\nusing Windows.UI.Xaml.Hosting;\r\n\r\nnamespace ConsoleApp2\r\n{\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            using (WindowsXamlManager.InitializeForCurrentThread())\r\n            {\r\n                var data = new ObservableCollection<object>();\r\n                var list = new ListBox();\r\n                list.ItemsSource = data;\r\n                data.Add(new object());\r\n            }\r\n        }\r\n    }\r\n}\r\n```\r\nThis throws at `data.Add()`\r\n```\r\nCannot marshal 'parameter #2': Error 0x2608.  Debugging resource strings are unavailable. See http://go.microsoft.com/fwlink/?linkid=106663&Version=4.0.30319.0&File=mscorrc.dll&Key=0x2608\r\n\r\n   at System.StubHelpers.StubHelpers.ThrowInteropParamException(Int32 resID, Int32 paramIdx)\r\n   at System.Runtime.InteropServices.WindowsRuntime.NotifyCollectionChangedEventArgsMarshaler.CreateNativeNCCEventArgsInstanceHelper(Int32 action, IntPtr newItem, IntPtr oldItem, Int32 newIndex, Int32 oldIndex)\r\n   at System.Runtime.InteropServices.WindowsRuntime.NotifyCollectionChangedEventArgsMarshaler.ConvertToNative(NotifyCollectionChangedEventArgs managedArgs)\r\n   at System.Collections.ObjectModel.ObservableCollection`1.OnCollectionChanged(NotifyCollectionChangedEventArgs e)\r\n   at System.Collections.ObjectModel.ObservableCollection`1.InsertItem(Int32 index, T item)\r\n   at System.Collections.ObjectModel.Collection`1.Add(T item)\r\n   at ConsoleApp2.Program.Main(String[] args) in ...\\Program.cs:line 18\r\n```\r\nEnvironment:\r\n- Windows Preview 10.0.18351.0\r\n- Windows SDK 10.0.18342.0\r\n- .NET Core 3.0.100-preview3-010431","Url":"https://github.com/dotnet/corefx/issues/35909","RelatedDescription":"Open issue \"Marshal NCCEventArgs to WinRT crashes\" (#35909)"},{"Id":"419052897","IsPullRequest":false,"CreatedAt":"2019-03-09T09:34:09","Actor":"am11","Number":"35907","RawContent":null,"Title":"[Linux/x64] System.Net.Http.Functional.Tests hanging in CoreFX leg run by CoreCLR PRs","State":"open","Body":"A CoreFx job is indefinitely waiting for `System.Net.Http.Functional.Tests` completion: https://ci.dot.net/job/dotnet_coreclr/job/master/job/x64_checked_ubuntu_corefx_innerloop_prtest/8837/console:\r\n\r\n```\r\n21:42:10 Discovering: System.Net.ServicePoint.Tests\r\n21:42:11 Discovered:  System.Net.ServicePoint.Tests\r\n21:42:11 Starting:    System.Net.ServicePoint.Tests\r\n21:42:17 WARNING: System.Net.Http.Functional.Tests.SocketsHttpHandler_HttpProtocolTests.GetAsync_ResponseUnknownVersion1X_Success(responseMinorVersion: 2) is running for 359s.\r\n21:42:17 WARNING: System.Net.Http.Functional.Tests.PlatformHandler_HttpClientHandler_Asynchrony_Test.ResponseHeadersRead_SynchronizationContextNotUsedByHandler(responseHeadersRead: False, contentMode: ContentLength) is running for 359s.\r\n21:42:17 WARNING: System.Net.Http.Functional.Tests.SocketsHttpHandler_HttpClientHandler_DangerousAcceptAllCertificatesValidator_Test.SetDelegate_ConnectionSucceeds(acceptedProtocol: Tls, requestOnlyThisProtocol: False) is running for 358s.\r\n21:42:17 WARNING: System.Net.Http.Functional.Tests.ByteArrayContentTest.CopyToAsync_UseWholeSourceArray_WholeContentCopied is running for 359s.\r\n21:42:19 Finished:    System.Net.ServicePoint.Tests\r\n21:42:19 \r\n21:42:19 === TEST EXECUTION SUMMARY ===\r\n21:42:19    System.Net.ServicePoint.Tests  Total: 21, Errors: 0, Failed: 0, Skipped: 0, Time: 8.295s\r\n21:42:22 WARNING: Long running test System.Net.Sockets.Tests.ExecutionContextFlowTest.SocketAsyncEventArgs_ExecutionContextFlowsAcrossSendAsyncOperation(suppressContext: False, sendMode: 1) finished in 1231891ms.\r\n21:43:17 WARNING: System.Net.Http.Functional.Tests.SocketsHttpHandler_HttpProtocolTests.GetAsync_ResponseUnknownVersion1X_Success(responseMinorVersion: 2) is running for 419s.\r\n21:43:17 WARNING: System.Net.Http.Functional.Tests.PlatformHandler_HttpClientHandler_Asynchrony_Test.ResponseHeadersRead_SynchronizationContextNotUsedByHandler(responseHeadersRead: False, contentMode: ContentLength) is running for 419s.\r\n21:43:17 WARNING: System.Net.Http.Functional.Tests.SocketsHttpHandler_HttpClientHandler_DangerousAcceptAllCertificatesValidator_Test.SetDelegate_ConnectionSucceeds(acceptedProtocol: Tls, requestOnlyThisProtocol: False) is running for 418s.\r\n21:43:17 WARNING: System.Net.Http.Functional.Tests.ByteArrayContentTest.CopyToAsync_UseWholeSourceArray_WholeContentCopied is running for 419s.\r\n21:44:17 WARNING: System.Net.Http.Functional.Tests.SocketsHttpHandler_HttpProtocolTests.GetAsync_ResponseUnknownVersion1X_Success(responseMinorVersion: 2) is running for 479s.\r\n...\r\n...\r\n...\r\n00:01:17 WARNING: System.Net.Http.Functional.Tests.SocketsHttpHandler_HttpProtocolTests.GetAsync_ResponseUnknownVersion1X_Success(responseMinorVersion: 2) is running for 8699s.\r\n00:01:17 WARNING: System.Net.Http.Functional.Tests.PlatformHandler_HttpClientHandler_Asynchrony_Test.ResponseHeadersRead_SynchronizationContextNotUsedByHandler(responseHeadersRead: False, contentMode: ContentLength) is running for 8699s.\r\n00:01:17 WARNING: System.Net.Http.Functional.Tests.SocketsHttpHandler_HttpClientHandler_DangerousAcceptAllCertificatesValidator_Test.SetDelegate_ConnectionSucceeds(acceptedProtocol: Tls, requestOnlyThisProtocol: False) is running for 8698s.\r\n00:01:17 WARNING: System.Net.Http.Functional.Tests.ByteArrayContentTest.CopyToAsync_UseWholeSourceArray_WholeContentCopied is running for 8699s.\r\n00:02:17 WARNING: System.Net.Http.Functional.Tests.SocketsHttpHandler_HttpProtocolTests.GetAsync_ResponseUnknownVersion1X_Success(responseMinorVersion: 2) is running for 8759s.\r\n00:02:17 WARNING: System.Net.Http.Functional.Tests.PlatformHandler_HttpClientHandler_Asynchrony_Test.ResponseHeadersRead_SynchronizationContextNotUsedByHandler(responseHeadersRead: False, contentMode: ContentLength) is running for 8759s.\r\n00:02:17 WARNING: System.Net.Http.Functional.Tests.SocketsHttpHandler_HttpClientHandler_DangerousAcceptAllCertificatesValidator_Test.SetDelegate_ConnectionSucceeds(acceptedProtocol: Tls, requestOnlyThisProtocol: False) is running for 8758s.\r\n00:02:17 WARNING: System.Net.Http.Functional.Tests.ByteArrayContentTest.CopyToAsync_UseWholeSourceArray_WholeContentCopied is running for 8759s.\r\n```\r\n\r\nIn `LoopbackServer.CreateServerAsync` callback, these tests call `TestHelper.WhenAllCompletedOrAnyFailed` that uses `PassingTestTimeoutMilliseconds` set to 60,000, but for some reason the timeout exception is not being thrown from: [TaskTimeoutExtensions.cs#L69](https://github.com/dotnet/corefx/blob/7685f1c5212fa9637b408d97928ffba7b8d9d6c2/src/Common/tests/System/Threading/Tasks/TaskTimeoutExtensions.cs#L69).","Url":"https://github.com/dotnet/corefx/issues/35907","RelatedDescription":"Open issue \"[Linux/x64] System.Net.Http.Functional.Tests hanging in CoreFX leg run by CoreCLR PRs\" (#35907)"},{"Id":"418834046","IsPullRequest":true,"CreatedAt":"2019-03-09T05:39:07","Actor":"dotnet-maestro[bot]","Number":"35894","RawContent":null,"Title":"[release/3.0] Update dependencies from dotnet/coreclr","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/coreclr\r\n\r\n- Microsoft.NET.Sdk.IL - 3.0.0-preview3-27508-72\r\n- Microsoft.NETCore.ILAsm - 3.0.0-preview3-27508-72\r\n- Microsoft.NETCore.Runtime.CoreCLR - 3.0.0-preview3-27508-72\r\n\r\nUpdates from https://github.com/dotnet/coreclr\r\n\r\n- Microsoft.NET.Sdk.IL - 3.0.0-preview3-27508-710\r\n- Microsoft.NETCore.ILAsm - 3.0.0-preview3-27508-710\r\n- Microsoft.NETCore.Runtime.CoreCLR - 3.0.0-preview3-27508-710\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/35894","RelatedDescription":"Closed or merged PR \"[release/3.0] Update dependencies from dotnet/coreclr\" (#35894)"},{"Id":"418780040","IsPullRequest":true,"CreatedAt":"2019-03-09T05:00:45","Actor":"dotnet-maestro[bot]","Number":"35891","RawContent":null,"Title":"[master] Update dependencies from dotnet/coreclr","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/coreclr\r\n\r\n- Microsoft.NET.Sdk.IL - 3.0.0-preview4-27507-75\r\n- Microsoft.NETCore.ILAsm - 3.0.0-preview4-27507-75\r\n- Microsoft.NETCore.Runtime.CoreCLR - 3.0.0-preview4-27507-75\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/35891","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/coreclr\" (#35891)"},{"Id":"419033764","IsPullRequest":true,"CreatedAt":"2019-03-09T04:48:37","Actor":"lmolkova","Number":"35906","RawContent":null,"Title":"Ignore invalid correlation context tokens in Http Diagnostics Listener","State":"open","Body":"Fix #31687","Url":"https://github.com/dotnet/corefx/pull/35906","RelatedDescription":"Open PR \"Ignore invalid correlation context tokens in Http Diagnostics Listener\" (#35906)"},{"Id":"419032821","IsPullRequest":true,"CreatedAt":"2019-03-09T04:34:30","Actor":"stephentoub","Number":"35905","RawContent":null,"Title":"Add await stack guard test","State":"open","Body":"Depends on https://github.com/dotnet/coreclr/pull/23152\r\n\r\ncc: @tarekgh, @kouvel ","Url":"https://github.com/dotnet/corefx/pull/35905","RelatedDescription":"Open PR \"Add await stack guard test\" (#35905)"},{"Id":"418846975","IsPullRequest":true,"CreatedAt":"2019-03-09T03:50:26","Actor":"bartonjs","Number":"35896","RawContent":null,"Title":"JsonDocument should allow the UTF-8 content-BOM from Stream inputs","State":"closed","Body":"Based on feedback from ASP.Net moving to JsonDocument (https://github.com/aspnet/Extensions/pull/1028#discussion_r257084498)","Url":"https://github.com/dotnet/corefx/pull/35896","RelatedDescription":"Closed or merged PR \"JsonDocument should allow the UTF-8 content-BOM from Stream inputs\" (#35896)"},{"Id":"418892957","IsPullRequest":true,"CreatedAt":"2019-03-09T03:49:28","Actor":"dotnet-maestro-bot","Number":"35900","RawContent":null,"Title":"[automated] Merge branch 'master' => 'release/3.0'","State":"closed","Body":"I detected changes in the master branch which have not been merged yet to release/3.0. I'm a robot and am configured to help you automatically keep release/3.0 up to date, so I've opened this PR.\r\n\r\nThis PR merges commits made on master by the following committers:\n\n* @vancem\r\n\r\n## Instructions for merging from UI\r\n\r\nThis PR will not be auto-merged. When pull request checks pass, complete this PR by creating a merge commit, *not* a squash or rebase commit.\r\n\r\n<img alt=\"merge button instructions\" src=\"https://i.imgur.com/GepcNJV.png\" width=\"300\" />\r\n\r\nIf this repo does not allow creating merge commits from the GitHub UI, use command line instructions.\r\n\r\n## Instructions for merging via command line\r\n\r\nRun these commands to merge this pull request from the command line.\r\n\r\n``` sh\r\ngit fetch\r\ngit checkout master\r\ngit pull --ff-only\r\ngit checkout release/3.0\r\ngit pull --ff-only\r\ngit merge --no-ff master\r\n\r\n# If there are merge conflicts, resolve them and then run git merge --continue to complete the merge\r\n# Pushing the changes to the PR branch will re-trigger PR validation.\r\ngit push https://github.com/dotnet-maestro-bot/corefx HEAD:merge/master-to-release/3.0\r\n```\r\n\r\n<details>\r\n<summary>or if you are using SSH</summary>\r\n\r\n```\r\ngit push git@github.com:dotnet-maestro-bot/corefx HEAD:merge/master-to-release/3.0\r\n```\r\n\r\n</details>\r\n\r\n\r\nAfter PR checks are complete push the branch\r\n```\r\ngit push\r\n```\r\n\r\n## Instructions for resolving conflicts\r\n\r\n:warning: If there are merge conflicts, you will need to resolve them manually before merging. You can do this [using GitHub][resolve-github] or using the [command line][resolve-cli].\r\n\r\n[resolve-github]: https://help.github.com/articles/resolving-a-merge-conflict-on-github/\r\n[resolve-cli]: https://help.github.com/articles/resolving-a-merge-conflict-using-the-command-line/\r\n\r\n## Instructions for updating this pull request\r\n\r\nContributors to this repo have permission update this pull request by pushing to the branch 'merge/master-to-release/3.0'. This can be done to resolve conflicts or make other changes to this pull request before it is merged.\r\n\r\n```\r\ngit checkout -b merge/master-to-release/3.0 release/3.0\r\ngit pull https://github.com/dotnet-maestro-bot/corefx merge/master-to-release/3.0\r\n(make changes)\r\ngit commit -m \"Updated PR with my changes\"\r\ngit push https://github.com/dotnet-maestro-bot/corefx merge/master-to-release/3.0\r\n```\r\n\r\n<details>\r\n    <summary>or if you are using SSH</summary>\r\n\r\n```\r\ngit checkout -b merge/master-to-release/3.0 release/3.0\r\ngit pull git@github.com:dotnet-maestro-bot/corefx merge/master-to-release/3.0\r\n(make changes)\r\ngit commit -m \"Updated PR with my changes\"\r\ngit push git@github.com:dotnet-maestro-bot/corefx merge/master-to-release/3.0\r\n```\r\n\r\n</details>\r\n\r\nContact .NET Core Engineering if you have questions or issues.\r\nAlso, if this PR was generated incorrectly, help us fix it. See https://github.com/dotnet/arcade/blob/master/scripts/GitHubMergeBranches.ps1.\r\n","Url":"https://github.com/dotnet/corefx/pull/35900","RelatedDescription":"Closed or merged PR \"[automated] Merge branch 'master' => 'release/3.0'\" (#35900)"},{"Id":"418969093","IsPullRequest":true,"CreatedAt":"2019-03-08T21:44:17","Actor":"layomia","Number":"35903","RawContent":null,"Title":"Add (Try)GetDateTime(Offset) to Utf8JsonReader","State":"open","Body":"This change partially addresses https://github.com/dotnet/corefx/issues/34690.\r\n\r\nThese methods parse JSON strings to DateTime(Offset) objects according to format YYYY-MM-dd[THH:mm[:ss[.fffffff]]Z|+/-HH[[:]mm]]]","Url":"https://github.com/dotnet/corefx/pull/35903","RelatedDescription":"Open PR \"Add (Try)GetDateTime(Offset) to Utf8JsonReader\" (#35903)"},{"Id":"418918664","IsPullRequest":false,"CreatedAt":"2019-03-08T19:10:04","Actor":"shantanu1singh","Number":"35902","RawContent":null,"Title":"NetworkInterface's GatewayAddresses property not returning IPv6 gateway address on Linux","State":"open","Body":"I was trying to send a TCP message over IPv6 from a docker container to its host machine by using the docker network’s gateway IP address. In the docker module, we are using .NET core’s (2.1) NetworkInterface type and grabbing the GatewayAddresses property from the network interface’s IP properties to fetch the IP address of the gateway. Unfortunately, that only returns the IPv4 address of the gateway and not the IPv6 address even though it exists.\r\n\r\nIt appears that the Gateway addresses property only returns the addresses by looking at the IPv4 network route file (\"/proc/net/route\") in Linux and not IPv6 (\"/proc/net/ipv6_route\"):\r\n\r\nhttps://github.com/dotnet/corefx/blob/a8cef502cd74aabb209cb9ad7a1e2a5bc1612459/src/System.Net.NetworkInformation/src/System/Net/NetworkInformation/LinuxIPInterfaceProperties.cs#L49-L56\r\n\r\nCan we change it so that both IPv4 and IPv6 addresses of the gateway are returned?\r\n","Url":"https://github.com/dotnet/corefx/issues/35902","RelatedDescription":"Open issue \"NetworkInterface's GatewayAddresses property not returning IPv6 gateway address on Linux\" (#35902)"},{"Id":"418809112","IsPullRequest":false,"CreatedAt":"2019-03-08T18:47:17","Actor":"jchang6","Number":"35893","RawContent":null,"Title":"Windows Forms - Core fail w/VS19 RC1 and Core 3 preview 3","State":"closed","Body":"After installing VS2019 RC1 and .NET Core 3.0 preview 3, my previous Windows Forms apps no longer open. In creating a new project, Windows Forms App (.NET Core) is one of the options, but fails to create. Message: No template could be found with the group identity 'Microsoft.Common.Winforms'\r\nAlso, in project properties: Target framework, .NET Core 3.0 is not an option","Url":"https://github.com/dotnet/corefx/issues/35893","RelatedDescription":"Closed issue \"Windows Forms - Core fail w/VS19 RC1 and Core 3 preview 3\" (#35893)"},{"Id":"418892799","IsPullRequest":true,"CreatedAt":"2019-03-08T17:55:14","Actor":"tannergooding","Number":"35899","RawContent":null,"Title":"Adding more floating-point parsing test coverage and re-enabling some tests","State":"open","Body":"This is the CoreFX side to https://github.com/dotnet/coreclr/pull/23134","Url":"https://github.com/dotnet/corefx/pull/35899","RelatedDescription":"Open PR \"Adding more floating-point parsing test coverage and re-enabling some tests\" (#35899)"},{"Id":"418887401","IsPullRequest":false,"CreatedAt":"2019-03-08T17:39:40","Actor":"tannergooding","Number":"35898","RawContent":null,"Title":"Consider making the internal parsing/formatting logic public","State":"open","Body":"### Rationale\r\n\r\nThe existing parsing and formatting functions that live on the various types are culture-aware and support a lot of functionality out of the box. This is generally good in that it ensures we, by default, support a larger band of users.\r\n\r\nHowever, it is often the case that specialized applications may know that the data they are dealing with is always coming from a specific culture, that the data they are dealing with is always invariant, or that it is always in a given format.\r\n\r\nToday, we internally support these different code-paths in the internal `System.Number` class. We often have fast paths for cases like \"invariant culture\", \"hex format\", or \"no special modifiers\". But, these are internal and are behind several if checks from the primary APIs (checks that are generally predicted by the CPU to be false).\r\n\r\nIt may be beneficial for us to consider \"productizing\" these APIs and making them public. This would give us a centralized location for which specialized number parsing/formatting logic could live and would give end-users access to the underlying `NumberBuffer` in order to better customize their own formatting/parsing logic if desired. It would also give end-users direct access to the \"fast-path\" functions when they are desirable.\r\n\r\n### Proposed APIs\r\n\r\n```csharp\r\n// TODO: Document the proposed public surface area.\r\n//       This should probably be split into `NumberFormatter`, `NumberParser`, and `NumberBuffer`.\r\n```","Url":"https://github.com/dotnet/corefx/issues/35898","RelatedDescription":"Open issue \"Consider making the internal parsing/formatting logic public\" (#35898)"},{"Id":"418837671","IsPullRequest":false,"CreatedAt":"2019-03-08T15:36:51","Actor":"mikernet","Number":"35895","RawContent":null,"Title":"Formatting currency values without currency symbol","State":"open","Body":"Currently this is very difficult, error prone and the approach is terrible in terms of performance.\r\n\r\nRelated StackOverflow question:\r\n\r\nhttps://stackoverflow.com/questions/1048643/format-a-double-value-like-currency-but-without-the-currency-sign-c/3976048\r\n\r\nJon Skeet's approach can be made to work but requires cloning the `NumberFormatInfo` object and trimming the final string, causing lots of overhead and unneccessary allocations. Since I'm doing this in an `IFormattable.ToString()` implementation using the provided `formatProvider` argument to get the currency format information, this would need to happen every single time `ToString()` is called.\r\n\r\nI propose a new [standard numeric format string](https://docs.microsoft.com/en-us/dotnet/standard/base-types/standard-numeric-format-strings), perhaps `M` (for money) would work, which uses the currency formatting information to format the number but leaves off the currency symbol.\r\n\r\nI would be happy to do the PRs on it if it would be accepted. I've run into this many times over the years and usually I just settle for formatting the currency using the number format instead of the currency format as I've found most people do in this situation, which is less than ideal considering that in some cultures the formats are significantly different.","Url":"https://github.com/dotnet/corefx/issues/35895","RelatedDescription":"Open issue \"Formatting currency values without currency symbol\" (#35895)"},{"Id":"418803543","IsPullRequest":false,"CreatedAt":"2019-03-08T14:13:50","Actor":"gregsn","Number":"35892","RawContent":null,"Title":"Covariant Immutable Collections","State":"open","Body":"related: https://github.com/dotnet/corefx/issues/5164\r\n\r\n![image](https://user-images.githubusercontent.com/575557/54033057-99fda880-41b3-11e9-8d17-b3b1d5f4d348.png)\r\n\r\nhaving dedicated covariant interfaces for the different immutable collection types (and implementing them on the immutable collection classes) would allow to add extension methods that allow to add elements to an immutable covariant collection.","Url":"https://github.com/dotnet/corefx/issues/35892","RelatedDescription":"Open issue \"Covariant Immutable Collections\" (#35892)"},{"Id":"418778892","IsPullRequest":false,"CreatedAt":"2019-03-08T13:05:20","Actor":"VBAndCs","Number":"35890","RawContent":null,"Title":"UInt64  comparison operators ambiguity ","State":"open","Body":"Using comparison operators (>, < , etc…) between  UInt64 type  and any signed type like sbyte , short, int and long causes ambiguity in C#. Try:\r\n```C#\r\n  var n1 = 5ul;\r\n  var n2 = 4;\r\n  Console.WriteLine(n1 > n2);\r\n```\r\n\r\nit will cause the error:\r\n> Operator '>' is ambiguous on operands of type 'ulong' and 'int'\r\n\r\nI understand that arithmetic operations between UInt64 type  and any signed type is tricky because we can't predict the resultant type and the user must do the necessary casting according to his needs, but a comparison is a deterministic operation that yields a Boolean value, so there is no way to be ambiguous. The easiest workaround is to cast the ulong to decimal to do the comparison between two decimals, which comes with a high cost and seems unnecessary!\r\nI wrote these functions to compare ulong and signed types. I suggest you use the same approach to define necessary overloads for the CompareTo method  and operator overloads in UInt64, SByte, Int16, Int32 and Int64 , so comparisons between ulong and signed types becomes unambiguous.\r\n\r\n\r\n```C#\r\n        private int Compare(ulong n1, sbyte n2)\r\n        {\r\n            if (n2 < 0)\r\n                return 1;\r\n\r\n            if (n1 > 127ul )\r\n                return 1;\r\n\r\n            return ((sbyte)n1).CompareTo(n2);\r\n        }\r\n\r\n        private int Compare(ulong n1, short n2)\r\n        {\r\n            if (n2 < 0)\r\n                return 1;\r\n\r\n            if (n1 > 32767ul)\r\n                return 1;\r\n\r\n            return ((short)n1).CompareTo(n2);\r\n        }\r\n\r\n        private int Compare(ulong n1, int n2)\r\n        {\r\n            if (n2 < 0)\r\n                return 1;\r\n\r\n            if (n1 > 2147483647ul)\r\n                return 1;\r\n\r\n            return ((int)n1).CompareTo(n2);\r\n        }\r\n\r\n        private int Compare(ulong n1, long n2)\r\n        {\r\n            if (n2 < 0)\r\n                return 1;\r\n\r\n            if (n1 > 9223372036854775807ul)\r\n                return 1;\r\n\r\n            return ((long)n1).CompareTo(n2);\r\n        }\r\n\r\n```\r\n","Url":"https://github.com/dotnet/corefx/issues/35890","RelatedDescription":"Open issue \"UInt64  comparison operators ambiguity \" (#35890)"}],"ResultType":"GitHubIssue"},"Roslyn-Issues":{"Issues":[{"Id":"419147475","IsPullRequest":true,"CreatedAt":"2019-03-10T05:05:37","Actor":"jcouv","Number":"34004","RawContent":null,"Title":"Warn on locking null","State":"open","Body":"Fixes https://github.com/dotnet/roslyn/issues/26810","Url":"https://github.com/dotnet/roslyn/pull/34004","RelatedDescription":"Open PR \"Warn on locking null\" (#34004)"},{"Id":"419136506","IsPullRequest":true,"CreatedAt":"2019-03-10T01:59:44","Actor":"tmat","Number":"34003","RawContent":null,"Title":"Use Arcade x-plat resx generator","State":"open","Body":"","Url":"https://github.com/dotnet/roslyn/pull/34003","RelatedDescription":"Open PR \"Use Arcade x-plat resx generator\" (#34003)"},{"Id":"419133861","IsPullRequest":false,"CreatedAt":"2019-03-10T01:15:33","Actor":"tmat","Number":"34002","RawContent":null,"Title":"Remove Roslyn.VisualStudio.InteractiveComponents.vsix","State":"open","Body":"We generate this VSIX only to override previously installed versions.\r\nOnce we move to newer VS drop (16.1) that doesn't have this VSIX installed we can disable generating VSIX container for this project.\r\n","Url":"https://github.com/dotnet/roslyn/issues/34002","RelatedDescription":"Open issue \"Remove Roslyn.VisualStudio.InteractiveComponents.vsix\" (#34002)"},{"Id":"419122603","IsPullRequest":true,"CreatedAt":"2019-03-09T22:31:05","Actor":"CyrusNajmabadi","Number":"34001","RawContent":null,"Title":"No blank line indentation","State":"open","Body":"Followup to https://github.com/dotnet/roslyn/pull/33989.  That PR shoudl be reviewed and merged first.\r\n\r\nThis gets rid of the separate IBlankLineIndentation concept now that we can have a single service that just does the right thing in all cases.","Url":"https://github.com/dotnet/roslyn/pull/34001","RelatedDescription":"Open PR \"No blank line indentation\" (#34001)"},{"Id":"419116576","IsPullRequest":false,"CreatedAt":"2019-03-09T21:18:18","Actor":"jnm2","Number":"34000","RawContent":null,"Title":"IDE0060 when the parameters are needed due to other overloads","State":"open","Body":"**Version Used**: VS2019 RC.1 SVC1\r\n\r\nCan Roslyn do anything to help this situation, maybe bail if it detects that there are other overloads following the same pattern?\r\n\r\n```cs\r\nclass Foo\r\n{\r\n    public Foo Reduce(SaveClickedAction action)\r\n    {\r\n        // Some of these methods use `action`, others don't.\r\n        // ...\r\n    }\r\n\r\n    public Foo Reduce(FinishClickedAction action)\r\n    {\r\n        // ...\r\n    }\r\n\r\n    public Foo Reduce(SaveCompletedAction action)\r\n    {\r\n        // ...\r\n    }\r\n\r\n    public Foo Reduce(SaveErroredAction action)\r\n    {\r\n        // ...\r\n    }\r\n}\r\n```\r\n","Url":"https://github.com/dotnet/roslyn/issues/34000","RelatedDescription":"Open issue \"IDE0060 when the parameters are needed due to other overloads\" (#34000)"},{"Id":"419115146","IsPullRequest":false,"CreatedAt":"2019-03-09T21:12:19","Actor":"Pzixel","Number":"33998","RawContent":null,"Title":"Allow empty tuples","State":"closed","Body":"In current C# version if you try to create an empty tuple you will get \"Tuple must contain at least two elements\" error. But it's useful, especially when you are working with generic type `T` and don't care about result. For example, we want to create `TaskCompletionSource`, but we don't care about its result, we only care when it's ran to execution. So `var tcs = new TaskCompletionSource<()>();` could fit ideally, except C# compiler doesn't allow it.\r\n\r\n#### Existing workarounds:\r\n\r\nUse some small type and ignore it, e.g. `var tcs = new TaskCompletionSource<bool>();`\r\n\r\nPros: already exist in the language\r\nCons: is not really ideomatic, introduce usable variable that actually has no sense.","Url":"https://github.com/dotnet/roslyn/issues/33998","RelatedDescription":"Closed issue \"Allow empty tuples\" (#33998)"},{"Id":"419115959","IsPullRequest":false,"CreatedAt":"2019-03-09T21:10:38","Actor":"jnm2","Number":"33999","RawContent":null,"Title":"IDE0060 when the parameter is needed due to conditional compilation","State":"open","Body":"**Version Used**: VS2019 RC.1 SVC1\r\n\r\nCan Roslyn do anything to help this situation, maybe bail if it detects that the method declaration is conditional?\r\n\r\n```cs\r\npublic static class FeatureToggle\r\n{\r\n    public static bool Foo { get; } = IsFeatureEnabled(nameof(Foo));\r\n    public static bool Bar { get; } = IsFeatureEnabled(nameof(Bar));\r\n    // ...\r\n\r\n#if DEBUG\r\n    // IDE0060 Remove unused parameter\r\n    private static bool IsFeatureEnabled(string featureId) => true;\r\n#else\r\n    private static string[] enabledFeatureIds;\r\n\r\n    private static bool IsFeatureEnabled(string featureId)\r\n    {\r\n        if (enabledFeatureIds == null)\r\n        {\r\n            enabledFeatureIds = (string[])ConfigurationManager.GetSection(\"features\") ?? Array.Empty<string>();\r\n        }\r\n\r\n        return enabledFeatureIds.Contains(featureId, StringComparer.OrdinalIgnoreCase);\r\n    }\r\n#endif\r\n}\r\n```\r\n","Url":"https://github.com/dotnet/roslyn/issues/33999","RelatedDescription":"Open issue \"IDE0060 when the parameter is needed due to conditional compilation\" (#33999)"},{"Id":"419112836","IsPullRequest":true,"CreatedAt":"2019-03-09T20:35:02","Actor":"jcouv","Number":"33997","RawContent":null,"Title":"Fix result and slot of conditional receiver","State":"open","Body":"As the `Dump()` for a conditional access (excerpted below) shows, the call or member access uses a placeholder (\"conditional receiver\") in place of the actual receiver.\r\n\r\nThere are two parts of this PR:\r\n- we ensure that visiting a conditional receiver produces the correct result type,\r\n- we ensure that asking for a slot for a conditional receiver produces the correct slot.\r\n\r\nTo do that, we store some information (the result and the slot) about the real receiver when we visit a conditional access. \r\n\r\n- Fixes https://github.com/dotnet/roslyn/issues/33289 (fails to apply inferred type arguments' nullability after `?.` access)\r\n- Fixes https://github.com/dotnet/roslyn/issues/31909 (Dereference doesn't update null state if there's an unrelated conditional qualifier)\r\n- Fixes https://github.com/dotnet/roslyn/issues/33347 (Variables known to be non-null sometimes artifically restricted to one variable)\r\n- Fixes https://github.com/dotnet/roslyn/issues/31905 (Nullable flow analysis works incorrectly with nested conditional accesses)\r\n- Fixes https://github.com/dotnet/roslyn/issues/29956 (PROTOTYPE markers in VisitConditionalAccess and VisitConditionalReceiver)\r\n\r\n```\r\nconditionalAccess\r\n    ├─receiver\r\n    │ └─local\r\n    │   ├─localSymbol: Container<System.String> x\r\n    │   ├─type: Container<System.String>\r\n    │   └─isSuppressed: False\r\n    ├─accessExpression\r\n    │ └─call\r\n    │   ├─receiverOpt\r\n    │   │ └─fieldAccess\r\n    │   │   ├─receiverOpt\r\n    │   │   │ └─conditionalReceiver\r\n    │   │   │   ├─id: 0\r\n    │   │   │   ├─type: Container<System.String>\r\n    │   │   │   └─isSuppressed: False\r\n    │   │   ├─fieldSymbol: System.String Container<System.String>.Field\r\n    │   │   └─isSuppressed: False\r\n    │   ├─method: System.String System.String.ToString()\r\n    │   ├─type: System.String\r\n    │   └─isSuppressed: False\r\n    ├─type: System.String\r\n    └─isSuppressed: False\r\n```","Url":"https://github.com/dotnet/roslyn/pull/33997","RelatedDescription":"Open PR \"Fix result and slot of conditional receiver\" (#33997)"},{"Id":"419112109","IsPullRequest":false,"CreatedAt":"2019-03-09T20:26:39","Actor":"jnm2","Number":"33996","RawContent":null,"Title":"'IDE0060 Remove unused parameter' for method that implements interface in derived class","State":"open","Body":"**Version Used**: VS2019 RC.1 SVC1\r\n\r\n```cs\r\npublic abstract class Foo\r\n{\r\n    // IDE0060 Remove unused parameter\r\n    public Task BarAsync(CancellationToken cancellationToken) => Task.CompletedTask;\r\n}\r\n\r\npublic interface ISpecializedFoo<T>\r\n{\r\n    Task BarAsync(CancellationToken cancellationToken);\r\n    // ...\r\n}\r\n\r\npublic sealed class SpecializedFoo<T> : Foo, ISpecializedFoo<T>\r\n{\r\n}\r\n```\r\n\r\nElsewhere, `ISpecializedFoo<>.BarAsync` is called and some impls (not based on `Foo`) do use the cancellation token. The parameter is still needed on `Foo.BarAsync` in order for `SpecializedFoo<>` to implement the interface.\r\n","Url":"https://github.com/dotnet/roslyn/issues/33996","RelatedDescription":"Open issue \"'IDE0060 Remove unused parameter' for method that implements interface in derived class\" (#33996)"},{"Id":"419111036","IsPullRequest":false,"CreatedAt":"2019-03-09T20:14:15","Actor":"VBAndCs","Number":"33995","RawContent":null,"Title":"Wrong line is highlighted as a bug!","State":"open","Body":"**Version Used**: \r\nVS.NET 2017 and VS.NET 2019 preview 4\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Create a C# console app (.net core)\r\n2. write this code in Main:\r\n```C#\r\n            object o = 1;\r\n            var a = (int)o; // OK`\r\n            var c = (long?)o;\r\n\r\n            Console.WriteLine(\"test\");\r\n```\r\n3. run the app\r\n\r\n**Expected Behavior**:\r\nA bug in the line `var c = (long?)o;`\r\n\r\n**Actual Behavior**:\r\nThe bug is reported at the line  `Console.WriteLine(\"test\");`\r\n\r\n![15](https://user-images.githubusercontent.com/48354902/54076805-2f826080-42b8-11e9-82e8-13eabc185d50.jpg)\r\n\r\nNote that this doesn't happen if you change the line `var c = (long?)o;` to `var c = (long)o;`. It seems some how related to the nullable `long?`\r\n\r\n![16](https://user-images.githubusercontent.com/48354902/54076827-62c4ef80-42b8-11e9-9713-d3387eea8c0b.jpg)\r\n","Url":"https://github.com/dotnet/roslyn/issues/33995","RelatedDescription":"Open issue \"Wrong line is highlighted as a bug!\" (#33995)"},{"Id":"419110388","IsPullRequest":false,"CreatedAt":"2019-03-09T20:07:07","Actor":"jnm2","Number":"33994","RawContent":null,"Title":"IDE0052 incorrectly suggested for entire property when only getter is never used","State":"open","Body":"**Version Used**: VS2019 RC.1 SVC1\r\n\r\nThe code evolved to a place where the getter was no longer used, but because I don't like set-only properties, I left it. Now Roslyn suggests removing the entire property, but this is misleading because the side effects of the setter are semantically quite important:\r\n\r\n```cs\r\npublic class Foo\r\n{\r\n    private IBindingList source;\r\n\r\n    public void Bar(object thing)\r\n    {\r\n        Source = thing as IBindingList;\r\n    }\r\n\r\n    // IDE0052 Private member 'Foo.Source' can be removed as the value assigned to it is never read.\r\n    private IBindingList Source\r\n    {\r\n        get => source;\r\n        set\r\n        {\r\n            if (source == value) return;\r\n\r\n            if (source != null)\r\n                source.ListChanged -= Source_ListChanged;\r\n\r\n            source = value;\r\n\r\n            if (source != null)\r\n                source.ListChanged += Source_ListChanged;\r\n        }\r\n    }\r\n\r\n    private void Source_ListChanged(object sender, ListChangedEventArgs e)\r\n    {\r\n        // Important stuff\r\n    }\r\n}\r\n```\r\n\r\nIt should not report IDE0052 on the whole property. If anything, it should be reported on just the getter with a fix to remove the getter or to replace the property with a `SetSource(IBindingList)` method.","Url":"https://github.com/dotnet/roslyn/issues/33994","RelatedDescription":"Open issue \"IDE0052 incorrectly suggested for entire property when only getter is never used\" (#33994)"},{"Id":"419105766","IsPullRequest":true,"CreatedAt":"2019-03-09T19:14:54","Actor":"tmat","Number":"33993","RawContent":null,"Title":"Update CoreFX dependencies","State":"open","Body":"StreamJsonRpc requires the higher versions of these packages.\r\n\r\nRemoves hard-coded list of suggested binding redirects and replaces it with a generated list.","Url":"https://github.com/dotnet/roslyn/pull/33993","RelatedDescription":"Open PR \"Update CoreFX dependencies\" (#33993)"},{"Id":"419099667","IsPullRequest":false,"CreatedAt":"2019-03-09T18:10:09","Actor":"jnm2","Number":"33992","RawContent":null,"Title":"'IDE0031 Use null propagation' incorrectly suggested for LINQ expression","State":"open","Body":"**Version Used**: VS 2019 RC.1 SVC1\r\n\r\nSeems to be a repeat of https://github.com/dotnet/roslyn/issues/17623 but when using LINQ syntax.\r\n\r\n```cs\r\n_ = from item in new[] { new { X = (int?)1 } }.AsQueryable()\r\n    //     ↓ IDE0031 Use null propagation\r\n    select item == null ? null : item.X;\r\n\r\n_ = from item in Enumerable.Empty<(int? x, int? y)?>().AsQueryable()\r\n    //     ↓ IDE0031 Use null propagation\r\n    select item == null ? null : item.Value.x;\r\n```\r\n\r\nAfter applying suggested fix:\r\n\r\n```cs\r\n_ = from item in new[] { new { X = (int?)1 } }.AsQueryable()\r\n    //     ↓ CS8072 An expression tree lambda may not contain a null propagating operator.\r\n    select item?.X;\r\n\r\n_ = from item in Enumerable.Empty<(int? x, int? y)?>().AsQueryable()\r\n    //     ↓ CS8072 An expression tree lambda may not contain a null propagating operator.\r\n    select item?.x;\r\n```\r\n\r\n","Url":"https://github.com/dotnet/roslyn/issues/33992","RelatedDescription":"Open issue \"'IDE0031 Use null propagation' incorrectly suggested for LINQ expression\" (#33992)"},{"Id":"419064470","IsPullRequest":true,"CreatedAt":"2019-03-09T13:30:04","Actor":"dotnet-bot","Number":"33990","RawContent":null,"Title":"Merge dev16.0 to dev16.0-vs-deps","State":"closed","Body":"\nThis is an automatically generated pull request from dev16.0 into dev16.0-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/dev16.0-to-dev16.0-vs-deps\ngit reset --hard upstream/dev16.0-vs-deps\ngit merge upstream/dev16.0\n# Fix merge conflicts\ngit commit\ngit push upstream merges/dev16.0-to-dev16.0-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/33990","RelatedDescription":"Closed or merged PR \"Merge dev16.0 to dev16.0-vs-deps\" (#33990)"},{"Id":"419070910","IsPullRequest":true,"CreatedAt":"2019-03-09T13:19:16","Actor":"dotnet-maestro[bot]","Number":"33991","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"open","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19158.5\r\n\r\n","Url":"https://github.com/dotnet/roslyn/pull/33991","RelatedDescription":"Open PR \"[master] Update dependencies from dotnet/arcade\" (#33991)"},{"Id":"419018878","IsPullRequest":true,"CreatedAt":"2019-03-09T05:25:12","Actor":"tmat","Number":"33987","RawContent":null,"Title":"Pass NoBuild=true to Publish step","State":"closed","Body":"","Url":"https://github.com/dotnet/roslyn/pull/33987","RelatedDescription":"Closed or merged PR \"Pass NoBuild=true to Publish step\" (#33987)"},{"Id":"419032591","IsPullRequest":true,"CreatedAt":"2019-03-09T04:31:09","Actor":"CyrusNajmabadi","Number":"33989","RawContent":null,"Title":"Merge all indentation related code into one service.","State":"open","Body":"Followup to \r\nhttps://github.com/dotnet/roslyn/pull/33978 and\r\nhttps://github.com/dotnet/roslyn/pull/33983\r\n\r\nThis removes the strange and complex split we had between SmartIndent and SmartTokenCommandHandler.  For some reason, we had *two* entirely different integration points into VS to handle where we should indent to when 'enter' is hit.  This added a lot of complexity and made it very difficult to understand what was going on.\r\n\r\nFurthermore, this split meant that no actual features could ask the simply question: \"where should new code on this line be indented to?\".  \r\n\r\nNow, all logic is handled by the IIndentationService.  The internal implementation of IIndentationService is still a bit complex in that it has two separate codepaths for 'indentation' versus 'token indentation'.  However, at least it's all in one place now instead of being scattered all over the place.","Url":"https://github.com/dotnet/roslyn/pull/33989","RelatedDescription":"Open PR \"Merge all indentation related code into one service.\" (#33989)"},{"Id":"419020048","IsPullRequest":true,"CreatedAt":"2019-03-09T01:51:45","Actor":"jasonmalinowski","Number":"33988","RawContent":null,"Title":"Write the targets files into the correct directory for VS2019","State":"open","Body":"Starting in MSBuild that ships in Visual Studio 2019, the folder to put targets in is just called \"Current\" to avoid having to revise it for every major version.\r\n\r\nThis means the compiler extension has some chance of actually working.","Url":"https://github.com/dotnet/roslyn/pull/33988","RelatedDescription":"Open PR \"Write the targets files into the correct directory for VS2019\" (#33988)"},{"Id":"419015515","IsPullRequest":true,"CreatedAt":"2019-03-09T01:11:42","Actor":"chsienki","Number":"33986","RawContent":null,"Title":"Iterator current nullable","State":"open","Body":"Fixes #30010","Url":"https://github.com/dotnet/roslyn/pull/33986","RelatedDescription":"Open PR \"Iterator current nullable\" (#33986)"},{"Id":"419014071","IsPullRequest":true,"CreatedAt":"2019-03-09T01:01:25","Actor":"jaredpar","Number":"33985","RawContent":null,"Title":"Fix stack overflow compiling deeply nested generic","State":"open","Body":"As a part of implementing nullable reference types many of our locals\r\nswitched from `TypeSymbol` to `TypeSymbolWithAnnotations`. In the vast\r\nmajority of cases this doesn't have a meaningful impact on compilation.\r\nThey are bigger (about 3X) but it's still a relatively small `struct`\r\n(three words).\r\n\r\nThe size difference is significant though in\r\n`BindNamespaceOrTypeOrAliasSymbol`. This method is used in recursive\r\nparts of binding and is mutually recursive with `BindQualifiedNam`. This\r\nmethod defines a large number of locals which contribute to every layer\r\nof recursion. When they moved to `TypeSymbolWithAnnotations` this pushed\r\nus outside our tolerance levels and we hit an overflow in extreme cases.\r\n\r\nVirtually none of these locals are used in the recursive case. Factored\r\ntheir use into local functions so we only pay the stack usage on demand.\r\n\r\ncloses #33909\r\nfixes https://github.com/dotnet/coreclr/issues/22757","Url":"https://github.com/dotnet/roslyn/pull/33985","RelatedDescription":"Open PR \"Fix stack overflow compiling deeply nested generic\" (#33985)"},{"Id":"419013090","IsPullRequest":true,"CreatedAt":"2019-03-09T00:55:09","Actor":"VSadov","Number":"33984","RawContent":null,"Title":"Check nullness of a nullable receiver when invoking base methods.","State":"open","Body":"Bases of Nullable are reference types and thus base methods are called via boxed values which would NRE on nulls.\r\n\r\nFixes:#33174","Url":"https://github.com/dotnet/roslyn/pull/33984","RelatedDescription":"Open PR \"Check nullness of a nullable receiver when invoking base methods.\" (#33984)"},{"Id":"419012657","IsPullRequest":true,"CreatedAt":"2019-03-09T00:52:28","Actor":"CyrusNajmabadi","Number":"33983","RawContent":null,"Title":"Simplify handling of 'enter' in formatting.","State":"open","Body":"We had a bunch of logic to handle processing \"enter\" after writing `using (...)`.  The purpose of this was to ensure that if you started with\r\n\r\n```c#\r\nusing (a)\r\n    using (b)$$\r\n```\r\n\r\nAnd you pressed enter, you'd get:\r\n\r\n```c#\r\nusing (a)\r\nusing (b)\r\n    $$\r\n```\r\n\r\nHowever, this code seems unnecessary and inconsistent.  First, if you type the close-paren manually, you automatically get the expected code format.  Second, we don't do this sort of fixup on enter for anything else.  For example, if you have:\r\n\r\n```c#\r\ncase x:\r\n    case y:$$\r\n```\r\n\r\nWe don't align these when you press enter.  Instead, we align when you hit `:`.  So this just makes `using` operate just like our other alignment-on-typing rules.","Url":"https://github.com/dotnet/roslyn/pull/33983","RelatedDescription":"Open PR \"Simplify handling of 'enter' in formatting.\" (#33983)"},{"Id":"419006744","IsPullRequest":false,"CreatedAt":"2019-03-09T00:17:48","Actor":"gafter","Number":"33982","RawContent":null,"Title":"Mismatched null assignment through a ref variable should be a safety warning","State":"open","Body":"In the following program, there should be two safety warnings as shown.  However, the last line gets only a non-safety warning.\r\n\r\n``` c#\r\n#nullable enable\r\n\r\nclass C\r\n{\r\n    static void M(ref string s1)\r\n    {\r\n        string s2 = string.Empty;\r\n        ref string s3 = ref s1;\r\n\r\n        s1 = null; // safety warning\r\n        s2 = null; // non-safety warning\r\n        s3 = null; // safety warning\r\n    }\r\n}\r\n```\r\n","Url":"https://github.com/dotnet/roslyn/issues/33982","RelatedDescription":"Open issue \"Mismatched null assignment through a ref variable should be a safety warning\" (#33982)"},{"Id":"419003541","IsPullRequest":true,"CreatedAt":"2019-03-09T00:00:40","Actor":"dotnet-bot","Number":"33981","RawContent":null,"Title":"Merge master to demos/records","State":"open","Body":"\nThis is an automatically generated pull request from master into demos/records.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-demos/records\ngit reset --hard upstream/demos/records\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-demos/records --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/33981","RelatedDescription":"Open PR \"Merge master to demos/records\" (#33981)"},{"Id":"419003530","IsPullRequest":true,"CreatedAt":"2019-03-09T00:00:36","Actor":"dotnet-bot","Number":"33980","RawContent":null,"Title":"Merge master to features/readonly-members","State":"open","Body":"\nThis is an automatically generated pull request from master into features/readonly-members.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-features/readonly-members\ngit reset --hard upstream/features/readonly-members\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-features/readonly-members --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/33980","RelatedDescription":"Open PR \"Merge master to features/readonly-members\" (#33980)"},{"Id":"419003514","IsPullRequest":true,"CreatedAt":"2019-03-09T00:00:32","Actor":"dotnet-bot","Number":"33979","RawContent":null,"Title":"Merge master to master-vs-deps","State":"open","Body":"\nThis is an automatically generated pull request from master into master-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-master-vs-deps\ngit reset --hard upstream/master-vs-deps\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-master-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/33979","RelatedDescription":"Open PR \"Merge master to master-vs-deps\" (#33979)"},{"Id":"419000474","IsPullRequest":true,"CreatedAt":"2019-03-08T23:45:34","Actor":"CyrusNajmabadi","Number":"33978","RawContent":null,"Title":"Move indentation services down to Workspace layer.","State":"open","Body":"For reasons that have never been quite clear to me, our indentation services were defined at the EditorFeatures layer (maybe because they thought it was an editor concept?).  This was especially odd as similar features (like Formatting) are defined at the Workspaces layer.\r\n\r\nThis change simply moves things down to the Workspace layer (while also keeping around and obsoleting the existing editor-interfaces since they are consumed by F#/TS/JS).  \r\n\r\nThis makes thigns much cleaner, and makes it possible to push other features down (like the wrapping-code-actions).  ","Url":"https://github.com/dotnet/roslyn/pull/33978","RelatedDescription":"Open PR \"Move indentation services down to Workspace layer.\" (#33978)"},{"Id":"418995452","IsPullRequest":false,"CreatedAt":"2019-03-08T23:21:11","Actor":"dpoeschl","Number":"33977","RawContent":null,"Title":"Summary of Possible Change Signature Enhancements","State":"open","Body":"Work in progress attempt at organizing possible Change Signature enhancements.\r\n\r\n- Invocation style\r\n    - Add in-editor Change Signature Tracking (think Rename Tracking but for changes to a method's signature).\r\n- The method itself\r\n    - Change return type**\r\n        - Move return value to out parameter: https://github.com/dotnet/roslyn/issues/25582\r\n    - Change modifiers: #25094\r\n    - Rename method* (lower priority)\r\n- Parameter list\r\n    - Individual Parameters\r\n        - Edit Parameter\r\n            - Type**\r\n            - Modifiers*\r\n            - Name* (lower priority)\r\n            - Optional status*\r\n            - `params` status*\r\n        - Add Parameter: #33534 \r\n    - Sets of Parameters\r\n        - Decompose Parameter\r\n        - Combine Parameters\r\n\r\n`*` denotes having been discussed by the design team: https://github.com/dotnet/roslyn/issues/25144#issuecomment-467472419\r\n`**` denotes having been discussed as needing more design: https://github.com/dotnet/roslyn/issues/25144#issuecomment-467472419\r\n\r\nMore Links:\r\nhttps://github.com/dotnet/roslyn/issues/4510\r\nhttps://github.com/dotnet/roslyn/issues/21446","Url":"https://github.com/dotnet/roslyn/issues/33977","RelatedDescription":"Open issue \"Summary of Possible Change Signature Enhancements\" (#33977)"},{"Id":"418992485","IsPullRequest":true,"CreatedAt":"2019-03-08T23:08:31","Actor":"gafter","Number":"33976","RawContent":null,"Title":"Simplify some names in the nullable reference types feature","State":"open","Body":"- Rename `TypeSymbolWithAnnotations` to `TypeWithAnnotations`\r\n- Rename its type field from `TypeSymbol` to `Type`\r\n- Fields of Symbols that are of type `TypeWithAnnotations` that are currently named `Type` would be renamed `TypeWithAnnotations`\r\nFixes #33736","Url":"https://github.com/dotnet/roslyn/pull/33976","RelatedDescription":"Open PR \"Simplify some names in the nullable reference types feature\" (#33976)"},{"Id":"418988549","IsPullRequest":false,"CreatedAt":"2019-03-08T22:52:21","Actor":"livarcocc","Number":"33975","RawContent":null,"Title":"Compilation error \"csc.dll\" exited with code 139 on ARMv7l","State":"open","Body":"@NicolasDorier commented on [Thu Mar 07 2019](https://github.com/dotnet/cli/issues/10950)\n\n## Steps to reproduce\r\n\r\nOn\r\n```\r\nuname -a\r\nLinux odroid 4.14.5-92 #1 SMP PREEMPT Mon Dec 11 15:48:15 UTC 2017 armv7l armv7l armv7l GNU/Linux\r\n```\r\n\r\n\r\n```\r\ngit clone https://github.com/btcpayserver/btcpayserver\r\ncd btcpayserver/btcpayserver\r\ndotnet build -c Release\r\n```\r\n\r\n## Expected  behavior\r\n\r\nBuild succeed.\r\n\r\n## Actual behavior\r\n\r\nUser reported compilation error \"csc.dll\" exited with code 134 on ARM.\r\nThe msbuild seems show error 139 from csc.dll.\r\n\r\n## Environment data\r\n\r\n@enorrmann can you provide precise `dotnet --version` here?\r\n\r\nHe tried with SDK `2.1.504` and `2.2.104` with same error it seems.\r\n\r\n![image](https://user-images.githubusercontent.com/3020646/54002883-7dea0f00-4193-11e9-88bd-03c161406535.png)\r\n\r\n\r\n[msbuild.binlog](https://www.dropbox.com/s/4ic7z1j7qnh72iv/msbuild.binlog?dl=1)\r\n\r\nOrignally reported on https://github.com/btcpayserver/btcpayserver/issues/600\r\n\r\nIt seems same issue as https://github.com/dotnet/roslyn/issues/28038 . I opened a new issue because this one happen on ARM32v7.\r\n\r\n\r\n\r\n\r\n\r\n\n\n","Url":"https://github.com/dotnet/roslyn/issues/33975","RelatedDescription":"Open issue \"Compilation error \"csc.dll\" exited with code 139 on ARMv7l\" (#33975)"}],"ResultType":"GitHubIssue"},"CoreRT-Issues":{"Issues":[{"Id":"419129421","IsPullRequest":true,"CreatedAt":"2019-03-10T00:04:42","Actor":"jkotas","Number":"7142","RawContent":null,"Title":"Use latest servicing patch of .NET Core 2.1","State":"open","Body":"Fixes #7141","Url":"https://github.com/dotnet/corert/pull/7142","RelatedDescription":"Open PR \"Use latest servicing patch of .NET Core 2.1\" (#7142)"},{"Id":"419120131","IsPullRequest":false,"CreatedAt":"2019-03-09T22:01:12","Actor":"dhcgn","Number":"7141","RawContent":null,"Title":"Simple Console App fails to publish with ubuntu 19.04 (No usable version of the libssl was found)","State":"open","Body":"I installed a fresh ubuntu 19.04 in hyper-v and tried the [console sample](https://github.com/dotnet/corert/tree/master/samples/HelloWorld).\r\n\r\nBut I get the error:\r\n\r\n> No usable version of the libssl was found\r\n\r\n**Steps to reproduce:**\r\n\r\n1. Create project\r\n    1. `sudo snap install dotnet-sdk --classic`\r\n    2. `sudo snap alias dotnet-sdk.dotnet dotnet`\r\n    3. `dotnet new console -o HelloWorld`\r\n    4. `cd HelloWorld`\r\n    5. `dotnet run` **Works!**\r\n2. Add ILCompiler \r\n    6. `dotnet new nuget`\r\n    7. `nuget.config` add packageSources\r\n    8. `dotnet add package Microsoft.DotNet.ILCompiler -v 1.0.0-alpha-*`\r\n3. Install pre-requisites \r\n    9. `echo \"deb http://llvm.org/apt/xenial/ llvm-toolchain-xenial-3.9 main\" | sudo tee /etc/apt/sources.list.d/llvm.list`\r\n    10. `wget -O - http://llvm.org/apt/llvm-snapshot.gpg.key | sudo apt-key add -`\r\n    11. `sudo apt-get update`\r\n    12. `sudo apt-get install cmake clang-3.9 uuid-dev libcurl4-openssl-dev zlib1g-dev libkrb5-dev`\r\n13. Install libicu55\r\n    1. `sudo add-apt-repository \"deb http://security.ubuntu.com/ubuntu xenial-security main\"`\r\n    2. `sudo apt-get update`\r\n    3. `sudo apt-get install libicu55`\r\n13. `dotnet publish -r linux-x64 -c release` Error \"No usable version of the libssl was found\"\r\n\r\n**Logging:**\r\n\r\n```\r\nMicrosoft (R) Build Engine version 15.9.20+g88f5fadfbe for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  Restoring packages for /home/daniel/HelloWorld/HelloWorld.csproj...\r\n  Installing Microsoft.NETCore.DotNetAppHost 2.2.2.\r\n  Installing Microsoft.NETCore.DotNetHostResolver 2.2.2.\r\n  Installing Microsoft.NETCore.DotNetHostPolicy 2.2.2.\r\n  Installing Microsoft.NETCore.App 2.2.2.\r\n  Installing runtime.linux-x64.Microsoft.NETCore.DotNetAppHost 2.2.2.\r\n  Installing runtime.linux-x64.Microsoft.NETCore.DotNetHostResolver 2.2.2.\r\n  Installing runtime.linux-x64.Microsoft.NETCore.DotNetHostPolicy 2.2.2.\r\n  Installing runtime.linux-x64.Microsoft.DotNet.ILCompiler 1.0.0-alpha-27509-01.\r\n  Installing runtime.linux-x64.Microsoft.NETCore.App 2.2.2.\r\n  Generating MSBuild file /home/daniel/HelloWorld/obj/HelloWorld.csproj.nuget.g.props.\r\n  Generating MSBuild file /home/daniel/HelloWorld/obj/HelloWorld.csproj.nuget.g.targets.\r\n  Restore completed in 1.25 min for /home/daniel/HelloWorld/HelloWorld.csproj.\r\n  HelloWorld -> /home/daniel/HelloWorld/bin/release/netcoreapp2.2/linux-x64/HelloWorld.dll\r\n  /bin/clang-3.9\r\n  Generating compatible native code. To optimize for size or speed, visit https://aka.ms/OptimizeCoreRT\r\n  No usable version of the libssl was found\r\n  Aborted (core dumped)\r\n/home/daniel/.nuget/packages/microsoft.dotnet.ilcompiler/1.0.0-alpha-27509-01/build/Microsoft.NETCore.Native.targets(235,5): error MSB3073: The command \"\"/home/daniel/.nuget/packages/runtime.linux-x64.microsoft.dotnet.ilcompiler/1.0.0-alpha-27509-01/tools/ilc\" @\"obj/release/netcoreapp2.2/linux-x64/native/HelloWorld.ilc.rsp\"\" exited with code 134. [/home/daniel/HelloWorld/HelloWorld.csproj]\r\n```\r\n\r\n**Ubuntu**\r\n\r\n```\r\ndaniel@vm:~/HelloWorld$ uname -a\r\nLinux vm 4.19.0-13-generic #14-Ubuntu SMP Thu Feb 7 21:51:25 UTC 2019 x86_64 x86_64 x86_64 GNU/Linux\r\ndaniel@vm:~/HelloWorld$  lsb_release -a\r\nNo LSB modules are available.\r\nDistributor ID:\tUbuntu\r\nDescription:\tUbuntu Disco Dingo (development branch)\r\nRelease:\t19.04\r\nCodename:\tdisco\r\n```\r\n\r\n","Url":"https://github.com/dotnet/corert/issues/7141","RelatedDescription":"Open issue \"Simple Console App fails to publish with ubuntu 19.04 (No usable version of the libssl was found)\" (#7141)"},{"Id":"419120028","IsPullRequest":true,"CreatedAt":"2019-03-09T21:59:48","Actor":"Dotnet-GitSync-Bot","Number":"7140","RawContent":null,"Title":"Mirror changes from dotnet/corefx,coreclr","State":"open","Body":"This PR contains mirrored changes from dotnet/corefx,coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @danmosemsft @EgorBo","Url":"https://github.com/dotnet/corert/pull/7140","RelatedDescription":"Open PR \"Mirror changes from dotnet/corefx,coreclr\" (#7140)"},{"Id":"419091230","IsPullRequest":true,"CreatedAt":"2019-03-09T21:54:58","Actor":"Dotnet-GitSync-Bot","Number":"7138","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub","Url":"https://github.com/dotnet/corert/pull/7138","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7138)"},{"Id":"417111320","IsPullRequest":false,"CreatedAt":"2019-03-09T17:48:53","Actor":"trampster","Number":"7121","RawContent":null,"Title":"linux-arm not supported yet.","State":"closed","Body":"I'm building with the following command:\r\n\r\n    dotnet publish -c Release -r linux-arm --self-contained true\r\n\r\nI'm getting the follow message when trying to build for linux arm:\r\n\r\n    /.nuget/packages/microsoft.dotnet.ilcompiler/1.0.0-alpha-27505-01/build/Microsoft.NETCore.Native.Publish.targets(65,5): error : linux-arm not supported yet. https://github.com/dotnet/corert/issues/4589\r\n\r\nThat issue link is about x86....\r\n\r\nThe readme says that Linux ARM is supported w/ RyuJIT codegen\r\n\r\n\r\n","Url":"https://github.com/dotnet/corert/issues/7121","RelatedDescription":"Closed issue \"linux-arm not supported yet.\" (#7121)"},{"Id":"419097286","IsPullRequest":true,"CreatedAt":"2019-03-09T17:46:10","Actor":"MichalStrehovsky","Number":"7139","RawContent":null,"Title":"Add task to dump Win32 resources","State":"open","Body":"This task extracts Win32 resources from the main managed assembly into a RES file that we subsequently pass as input to the platform linker.\r\n\r\nFixes #5095.","Url":"https://github.com/dotnet/corert/pull/7139","RelatedDescription":"Open PR \"Add task to dump Win32 resources\" (#7139)"},{"Id":"419036630","IsPullRequest":true,"CreatedAt":"2019-03-09T16:31:58","Actor":"Dotnet-GitSync-Bot","Number":"7136","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @marek-safar","Url":"https://github.com/dotnet/corert/pull/7136","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7136)"},{"Id":"419080411","IsPullRequest":true,"CreatedAt":"2019-03-09T15:02:34","Actor":"yowl","Number":"7137","RawContent":null,"Title":"WIP: WASM: Add exception handling - emit EHInfo data","State":"open","Body":"These changes include @morganbr's Exception handling work for wasm and emit the EHInfo data that will be used in the landing pads.  This follows the ideas set out at https://github.com/dotnet/corert/issues/4655#issuecomment-361201665.  The EHInfo is copied from `src\\ILCompiler.RyuJit\\src\\JitInterface\\CorInfoImpl.RyuJit.cs` and there are quite a few comments and debug code to be cleared up later.  For now a review of the throwing of the exception and the emission of the EHInfo would be useful to ensure that the direction is ok.\r\n\r\nThe LLVM output of the code so far will include (as well as the incomplete landing pads), the EHInfo written out as global blob symbols :\r\n```\r\n@HelloWasm_Program__TestDispose___EHInfo = global [2 x i32*] [i32* bitcast (i8* getelementptr (i8, i8* null, i32 -1055971326) to i32*), i32* bitcast (i8* getelementptr (i8, i8* null, i32 822083583) to i32*)]\r\n@HelloWasm_Program__TestTryCatchNoException___EHInfo = global [3 x i32*] [i32* bitcast (i8* getelementptr (i8, i8* null, i32 -267445246) to i32*), i32* bitcast (i8* getelementptr (i8, i8* null, i32 822083583) to i32*), i32* null]\r\n@HelloWasm_Program__TestTryCatchThrowException___EHInfo = global [3 x i32*] [i32* bitcast (i8* getelementptr (i8, i8* null, i32 -737207294) to i32*), i32* bitcast (i8* getelementptr (i8, i8* null, i32 587202559) to i32*), i32* null]\r\n@HelloWasm_Program__TryFinallyInner___EHInfo = global [1 x i32*] [i32* bitcast (i8* getelementptr (i8, i8* null, i32 405931522) to i32*)]\r\n```","Url":"https://github.com/dotnet/corert/pull/7137","RelatedDescription":"Open PR \"WIP: WASM: Add exception handling - emit EHInfo data\" (#7137)"},{"Id":"419002193","IsPullRequest":true,"CreatedAt":"2019-03-09T03:02:03","Actor":"nattress","Number":"7134","RawContent":null,"Title":"Make CoreCLR R2R test switch case insensitive","State":"closed","Body":"Our CI has been running the CoreCLR R2R tests in JIT mode due to netci.groovy passing in /mode ReadyToRun and the check looking for 'readytorun'.","Url":"https://github.com/dotnet/corert/pull/7134","RelatedDescription":"Closed or merged PR \"Make CoreCLR R2R test switch case insensitive\" (#7134)"},{"Id":"419023654","IsPullRequest":true,"CreatedAt":"2019-03-09T02:30:21","Actor":"nattress","Number":"7135","RawContent":null,"Title":"Fix up metadata RVAs for R2R images","State":"open","Body":"IL metadata contains RVAs (to method entry points and field initial values). If the managed .text section is shifted in the output image with respect to the input image, we cannot copy it verbatim and must update the RVAs.\r\n\r\nWhen copying the input .text section to the output image, fix up RVAs in the metadata. This is done in a targetted manner to avoid having to fully deserialize the metadata and re-encode it.\r\n\r\nThe impetus for this fix is to allow CPAOT to re-compile ready-to-run images produced by Crossgen. Crossgen switches section ordering and puts .data before .text which invalidates all the metadata RVAs.","Url":"https://github.com/dotnet/corert/pull/7135","RelatedDescription":"Open PR \"Fix up metadata RVAs for R2R images\" (#7135)"},{"Id":"418942042","IsPullRequest":true,"CreatedAt":"2019-03-08T23:04:36","Actor":"Dotnet-GitSync-Bot","Number":"7133","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @ahoefling @ahoefling @ahoefling @ahoefling @ahoefling @ahoefling @ahoefling @ahoefling @ahoefling @ahoefling @ahoefling @ahoefling @ahoefling @ahoefling @ahoefling @ahoefling @ahoefling","Url":"https://github.com/dotnet/corert/pull/7133","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7133)"},{"Id":"418915032","IsPullRequest":true,"CreatedAt":"2019-03-08T20:15:48","Actor":"Dotnet-GitSync-Bot","Number":"7132","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @filipnavara","Url":"https://github.com/dotnet/corert/pull/7132","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7132)"},{"Id":"418666416","IsPullRequest":true,"CreatedAt":"2019-03-08T15:32:58","Actor":"Dotnet-GitSync-Bot","Number":"7131","RawContent":null,"Title":"Mirror changes from dotnet/corefx,coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/corefx,coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @davidkaya @marek-safar","Url":"https://github.com/dotnet/corert/pull/7131","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corefx,coreclr\" (#7131)"},{"Id":"418545076","IsPullRequest":true,"CreatedAt":"2019-03-08T07:27:31","Actor":"Dotnet-GitSync-Bot","Number":"7130","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub","Url":"https://github.com/dotnet/corert/pull/7130","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7130)"},{"Id":"418103302","IsPullRequest":true,"CreatedAt":"2019-03-08T01:54:42","Actor":"sergiy-k","Number":"7127","RawContent":null,"Title":"Unify invocation of build and test scripts on all platforms","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/7127","RelatedDescription":"Closed or merged PR \"Unify invocation of build and test scripts on all platforms\" (#7127)"},{"Id":"418517828","IsPullRequest":false,"CreatedAt":"2019-03-07T21:19:46","Actor":"tonerdo","Number":"7129","RawContent":null,"Title":"[Interpreter] Implement newobj opcode","State":"open","Body":"I'm working on adding support for the `newobj` opcode and I think I might need some help.\r\n\r\nHere's what I'm doing:\r\n\r\n* Retrieve the constructor and its owning type\r\n  ```csharp\r\n  MethodDesc constructor = (MethodDesc)_methodIL.GetObject(token);\r\n  TypeDesc owningType = constructor.OwningType;\r\n  ```\r\n* Create a zero-initialized object from the owning type\r\n  ```csharp\r\n  object @this = RuntimeAugments.NewObject(owningType.GetRuntimeTypeHandle());\r\n  ```\r\n* Call the dynamic invoke method to invoke the constructor\r\n  ```csharp\r\n  object obj = RuntimeAugments.CallDynamicInvokeMethod(\r\n                thisPtr: @this,\r\n                methodToCall: constructor.FunctionPointer,\r\n                thisPtrDynamicInvokeMethod: null,\r\n                dynamicInvokeHelperMethod: IntPtr.Zero,\r\n                dynamicInvokeHelperGenericDictionary: IntPtr.Zero,\r\n                defaultParametersContext: null,\r\n                parameters: arguments,\r\n                binderBundle: null,\r\n                wrapInTargetInvocationException: true,\r\n                invokeMethodHelperIsThisCall: false,\r\n                methodToCallIsThisCall: true);\r\n  ```\r\n\r\nHere are the problems I'm having:\r\n\r\n* `constructor.FunctionPointer` always returns `IntPtr.Zero` and I've not been to figure out how to get a `RuntimeMethodHandle` from `constructor`\r\n* After taking a look at the invokers in the Reflection package, I came to the conclusion that I have to pass in non-zero pointers for  `dynamicInvokeHelperMethod` and `defaultParametersContext`. However, it's not immediately clear what these methods do and where they come from.\r\n\r\ncc @MichalStrehovsky @jkotas ","Url":"https://github.com/dotnet/corert/issues/7129","RelatedDescription":"Open issue \"[Interpreter] Implement newobj opcode\" (#7129)"},{"Id":"418468163","IsPullRequest":true,"CreatedAt":"2019-03-07T20:32:04","Actor":"Dotnet-GitSync-Bot","Number":"7128","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @hughbe","Url":"https://github.com/dotnet/corert/pull/7128","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7128)"},{"Id":"417999683","IsPullRequest":true,"CreatedAt":"2019-03-07T05:25:17","Actor":"Dotnet-GitSync-Bot","Number":"7126","RawContent":null,"Title":"Mirror changes from dotnet/corefx,coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/corefx,coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @ViktorHofer @dotnet-maestro[bot] @shadow-cs @marek-safar @maryamariyan @stephentoub @tannergooding","Url":"https://github.com/dotnet/corert/pull/7126","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corefx,coreclr\" (#7126)"},{"Id":"417589050","IsPullRequest":true,"CreatedAt":"2019-03-07T01:53:12","Actor":"sergiy-k","Number":"7125","RawContent":null,"Title":"Add scripts to set up CI with Azure Pipelines for Linux","State":"closed","Body":"This adds support for building and testing Pull Requests in Ubuntu docker containers. Note that docker images have all required dependencies preinstalled.","Url":"https://github.com/dotnet/corert/pull/7125","RelatedDescription":"Closed or merged PR \"Add scripts to set up CI with Azure Pipelines for Linux\" (#7125)"},{"Id":"417511356","IsPullRequest":true,"CreatedAt":"2019-03-06T01:46:30","Actor":"jkotas","Number":"7123","RawContent":null,"Title":"Bump init-tools semaphore name","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/7123","RelatedDescription":"Closed or merged PR \"Bump init-tools semaphore name\" (#7123)"},{"Id":"417104642","IsPullRequest":true,"CreatedAt":"2019-03-06T01:03:15","Actor":"sergiy-k","Number":"7120","RawContent":null,"Title":"Add scripts to set up CI with Azure Pipelines for OSX","State":"closed","Body":"This adds support for OSX. To enable CI for Linux I still need to figure out the name of docker containers (or a machine pool) to use. \r\nThe eng/install-native-dependencies.sh file has been copied from the CoreCLR repo.","Url":"https://github.com/dotnet/corert/pull/7120","RelatedDescription":"Closed or merged PR \"Add scripts to set up CI with Azure Pipelines for OSX\" (#7120)"},{"Id":"417533540","IsPullRequest":true,"CreatedAt":"2019-03-05T22:34:25","Actor":"sergiy-k","Number":"7124","RawContent":null,"Title":"[WIP] Test performance of another CI machine pool","State":"open","Body":"This is just a test","Url":"https://github.com/dotnet/corert/pull/7124","RelatedDescription":"Open PR \"[WIP] Test performance of another CI machine pool\" (#7124)"},{"Id":"417273432","IsPullRequest":true,"CreatedAt":"2019-03-05T12:26:06","Actor":"MichalStrehovsky","Number":"7122","RawContent":null,"Title":"Merge master to nmirror","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/7122","RelatedDescription":"Closed or merged PR \"Merge master to nmirror\" (#7122)"},{"Id":"416834880","IsPullRequest":true,"CreatedAt":"2019-03-05T08:22:10","Actor":"MichalStrehovsky","Number":"7116","RawContent":null,"Title":" Fix native includes ","State":"closed","Body":"Redoes #7057 in a way that doesn't break the closed source world.","Url":"https://github.com/dotnet/corert/pull/7116","RelatedDescription":"Closed or merged PR \" Fix native includes \" (#7116)"},{"Id":"417064429","IsPullRequest":false,"CreatedAt":"2019-03-05T01:47:28","Actor":"DoCode","Number":"7119","RawContent":null,"Title":"No assembly metadata is written in native output","State":"closed","Body":"It's no assembly metadata like file versions, languages, company names, product name etc.\r\n\r\nHow can this be included when compiling?","Url":"https://github.com/dotnet/corert/issues/7119","RelatedDescription":"Closed issue \"No assembly metadata is written in native output\" (#7119)"},{"Id":"416784344","IsPullRequest":true,"CreatedAt":"2019-03-04T17:41:37","Actor":"MichalStrehovsky","Number":"7115","RawContent":null,"Title":"Fix ProjectN build breaks","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/7115","RelatedDescription":"Closed or merged PR \"Fix ProjectN build breaks\" (#7115)"},{"Id":"416849166","IsPullRequest":true,"CreatedAt":"2019-03-04T17:31:33","Actor":"MichalStrehovsky","Number":"7117","RawContent":null,"Title":"Remove TypeConverter entries in WebApi sample","State":"closed","Body":"These didn't appear to be needed last time I was playing with this.\r\n\r\nWe are basically down to one entry. This entry is especially annoying because it shows up every time someone wants to use LINQ expressions. Couple options:\r\n\r\n* Add a really dumb peephole IL scanner to `UsageBasedMetadataManager` a la mono/linker#223\r\n* Decide that we want an actual RD.XML parser. The embedded RD.XML manifest in System.Linq.Expressions has a line that covers this scenario. BUT: RD.XML has the unfortunate property of: not requiring types to be assembly-qualified, and requiring a whole program analysis for a bunch of constructs. Plus my motivation to write yet another type name parser is pretty low.","Url":"https://github.com/dotnet/corert/pull/7117","RelatedDescription":"Closed or merged PR \"Remove TypeConverter entries in WebApi sample\" (#7117)"},{"Id":"416882637","IsPullRequest":false,"CreatedAt":"2019-03-04T16:25:13","Actor":"filipnavara","Number":"7118","RawContent":null,"Title":"Abort trap: 6 on CoreFX / macOS","State":"open","Body":"There is recurring problem with macOS / CoreFX test builds on the CI:\r\n\r\n```\r\n07:35:02 Discovering: System.Collections.Tests\r\n07:35:03 Discovered:  System.Collections.Tests\r\n07:35:08 Starting:    System.Collections.Tests\r\n07:35:09    System.Collections.Tests.Dictionary_IDictionary_NonGeneric_Tests.ICollection_NonGeneric_CopyTo_NonZeroLowerBound [SKIP]\r\n07:35:09       Condition(s) not met: \\\"IsNonZeroLowerBoundArraySupported\\\"\r\n07:35:13    System.Collections.Tests.SortedList_Generic_Tests_Keys_AsICollection.ICollection_NonGeneric_CopyTo_NonZeroLowerBound [SKIP]\r\n07:35:13       Condition(s) not met: \\\"IsNonZeroLowerBoundArraySupported\\\"\r\n07:35:21    System.Collections.Tests.Queue_ICollection_NonGeneric_Tests.ICollection_NonGeneric_CopyTo_NonZeroLowerBound [SKIP]\r\n07:35:21       Condition(s) not met: \\\"IsNonZeroLowerBoundArraySupported\\\"\r\n07:35:30    System.Collections.Tests.SortedDictionary_Generic_Tests_Keys_AsICollection.ICollection_NonGeneric_CopyTo_NonZeroLowerBound [SKIP]\r\n07:35:30       Condition(s) not met: \\\"IsNonZeroLowerBoundArraySupported\\\"\r\n07:37:36 /Users/dotnet-bot/j/workspace/dotnet_corert/master/debug_osx10.12_corefx_prtest/tests/CoreFX/corerun: line 75: 88337 Abort trap: 6           ${TestFolderName}/native/${TestExecutable} ${TestFolderName}/${TestFileName}.dll @${TestFolderName}/${TestFileName}.rsp -xml ${LogDir}/${TestFileName}/testResults.xml -notrait category=nonnetcoreapptests -notrait category=${OSCategory} -notrait category=failing\r\n```\r\n\r\nPRs: \r\n#7115 (https://ci.dot.net/job/dotnet_corert/job/master/job/debug_osx10.12_corefx_prtest/1578/consoleFull#-8536224876a086b3e-df04-41d2-bc4d-43e8f9406d07)\r\n#7116 (https://ci.dot.net/job/dotnet_corert/job/master/job/debug_osx10.12_corefx_prtest/1576/consoleFull#-8536224876a086b3e-df04-41d2-bc4d-43e8f9406d07)\r\n#7089\r\n(https://ci.dot.net/job/dotnet_corert/job/master/job/debug_osx10.12_corefx_prtest/1539/consoleFull#-8536224876a086b3e-df04-41d2-bc4d-43e8f9406d07)\r\n","Url":"https://github.com/dotnet/corert/issues/7118","RelatedDescription":"Open issue \"Abort trap: 6 on CoreFX / macOS\" (#7118)"},{"Id":"416503419","IsPullRequest":true,"CreatedAt":"2019-03-03T14:25:19","Actor":"Dotnet-GitSync-Bot","Number":"7114","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @jkotas","Url":"https://github.com/dotnet/corert/pull/7114","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7114)"},{"Id":"416462154","IsPullRequest":true,"CreatedAt":"2019-03-03T05:39:41","Actor":"Dotnet-GitSync-Bot","Number":"7113","RawContent":null,"Title":"Mirror changes from dotnet/coreclr,corefx","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr,corefx\n\n\n**Please REBASE this PR when merging**\n\n cc @marek-safar","Url":"https://github.com/dotnet/corert/pull/7113","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr,corefx\" (#7113)"}],"ResultType":"GitHubIssue"},"SDK-Issues":{"Issues":[{"Id":"419069291","IsPullRequest":true,"CreatedAt":"2019-03-09T14:16:04","Actor":"dotnet-maestro[bot]","Number":"3015","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19158.5\r\n- Microsoft.DotNet.SignTool - 1.0.0-beta.19158.5\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3015","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#3015)"},{"Id":"419043286","IsPullRequest":false,"CreatedAt":"2019-03-09T07:19:32","Actor":"saxenark","Number":"3014","RawContent":null,"Title":"Installing JRE in microsoft/dotnet:sdk container","State":"open","Body":"Hi,\r\n\r\nI need JRE to run dependencies for my .NET core sdk 2.2 unit tests in Visual Studio 2017. I would like to know how to install JRE into my windows docker container. Through the docker environment, I tried to run java.exe but it does not run.\r\n\r\nSo, my question is how do I install JRE on my container?\r\n\r\n```\r\nFROM microsoft/dotnet:sdk\r\n\r\nWORKDIR C:/Temp\r\nCOPY jre-8u202-windows-x64.exe ./Java.exe\r\n\r\nWORKDIR C:/P4Source\r\n```\r\n\r\nThanks,\r\n\r\n","Url":"https://github.com/dotnet/sdk/issues/3014","RelatedDescription":"Open issue \"Installing JRE in microsoft/dotnet:sdk container\" (#3014)"},{"Id":"417286822","IsPullRequest":true,"CreatedAt":"2019-03-08T14:43:34","Actor":"dotnet-maestro[bot]","Number":"3008","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19154.14\r\n- Microsoft.DotNet.SignTool - 1.0.0-beta.19154.14\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19155.29\r\n- Microsoft.DotNet.SignTool - 1.0.0-beta.19155.29\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19156.20\r\n- Microsoft.DotNet.SignTool - 1.0.0-beta.19156.20\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19157.23\r\n- Microsoft.DotNet.SignTool - 1.0.0-beta.19157.23\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3008","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#3008)"},{"Id":"418571115","IsPullRequest":true,"CreatedAt":"2019-03-08T00:01:52","Actor":"dotnet-bot","Number":"3013","RawContent":null,"Title":"Merge release/3.0.1xx to master","State":"open","Body":"\nThis is an automatically generated pull request from release/3.0.1xx into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/3.0.1xx-to-master\ngit reset --hard upstream/master\ngit merge upstream/release/3.0.1xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/3.0.1xx-to-master --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/3013","RelatedDescription":"Open PR \"Merge release/3.0.1xx to master\" (#3013)"},{"Id":"418539657","IsPullRequest":true,"CreatedAt":"2019-03-07T23:28:08","Actor":"dotnet-maestro[bot]","Number":"3012","RawContent":null,"Title":"[release/3.0.1xx] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19157.4\r\n- Microsoft.DotNet.SignTool - 1.0.0-beta.19157.4\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3012","RelatedDescription":"Closed or merged PR \"[release/3.0.1xx] Update dependencies from dotnet/arcade\" (#3012)"},{"Id":"418538996","IsPullRequest":false,"CreatedAt":"2019-03-07T22:15:49","Actor":"nkolev92","Number":"3011","RawContent":null,"Title":"The SDK should error if a FrameworkReference is not supported for a certain TFM","State":"open","Body":"Came up during the design discussion for FrameworkReference + NuGet. \r\nhttps://github.com/NuGet/Home/issues/7342\r\n\r\nThe SDK should error if a FrameworkReference is not supported for a certain TFM. \r\n\r\n* In the project author case, clearly call out that this is an authoring mistake. \r\n* In the transitive (project/package) case, clearly blame the package/project. \r\n\r\nIt's worth considering how we handle bad framework assemblies. \r\n\r\n//cc @nguerrera","Url":"https://github.com/dotnet/sdk/issues/3011","RelatedDescription":"Open issue \"The SDK should error if a FrameworkReference is not supported for a certain TFM\" (#3011)"},{"Id":"417443376","IsPullRequest":false,"CreatedAt":"2019-03-06T16:38:50","Actor":"nguerrera","Number":"3009","RawContent":null,"Title":"Trouble moving bin/ and obj/ to .bin/ and .obj/","State":"closed","Body":"*Moved from https://github.com/dotnet/project-system/issues/1437#issuecomment-469568035*\r\n\r\n@dzmitry-lahoda wrote:\r\n\r\nNot sure if right thread - but some tooling is wrong...\r\n\r\nSee the line with `ProjectAssetsFile`? If I remove it - my `csproj` fails to build. \r\nWhy I ever need it? My task for to build from VS 2017 and VS Code and from `dotnet` command line into `.bin` and `.obj` because of Unity:(. So I did it. But when VS 2017 opens solution - it generates `obj`. So I did fix which kinda should work.  But got issues - I followed the path, and got into `C:\\Program Files\\dotnet\\sdk\\2.2.102\\Sdks\\Microsoft.NET.Sdk\\targets\\` folder and into `ProjectAssetsFile`. So here is fix:\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <!-- fixing VS 2017 bug which makes it output directory which is not requested -->\r\n  <PropertyGroup>\r\n    <ProjectAssetsFile>$(MSBuildProjectDirectory)\\.obj\\project.assets.json</ProjectAssetsFile>\r\n  </PropertyGroup>\r\n  <PropertyGroup>\r\n      <PreBuildEvent>\r\n       IF EXIST \"$(MSBuildProjectDirectory)\\.obj\\obj\" (\r\n         rmdir \"$(MSBuildProjectDirectory)\\.obj\\obj\" /s /q\r\n       )\r\n       IF EXIST \"$(MSBuildProjectDirectory)\\obj\" (\r\n         move  \"$(MSBuildProjectDirectory)\\obj\" \"$(MSBuildProjectDirectory)\\.obj\"\r\n       )\r\n      </PreBuildEvent>\r\n      \r\n      <PostBuildEvent>\r\n       IF EXIST \"$(MSBuildProjectDirectory)\\.obj\\obj\" (\r\n         rmdir \"$(MSBuildProjectDirectory)\\.obj\\obj\" /s /q\r\n       )\r\n       IF EXIST \"$(MSBuildProjectDirectory)\\obj\" (\r\n         move  \"$(MSBuildProjectDirectory)\\obj\" \"$(MSBuildProjectDirectory)\\.obj\"\r\n       )\r\n      </PostBuildEvent>      \r\n  </PropertyGroup>\r\n\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.2</TargetFramework>\r\n    <LangVersion>latest</LangVersion>\r\n    <IsPackable>false</IsPackable>\r\n  </PropertyGroup>\r\n\r\n  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|AnyCPU'\">\r\n    <OutputPath>.bin\\Debug\\</OutputPath>\r\n    <BaseIntermediateOutputPath>.obj\\Debug\\</BaseIntermediateOutputPath>\r\n    <IntermediateOutputPath>.obj\\Debug\\</IntermediateOutputPath>\r\n    <BaseOutputPath>.bin\\Debug\\</BaseOutputPath>\r\n    <UseCommonOutputDirectory>true</UseCommonOutputDirectory>\r\n  </PropertyGroup>\r\n  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Release|AnyCPU'\">\r\n    <OutputPath>.bin\\Release\\</OutputPath>\r\n    <BaseIntermediateOutputPath>.obj\\Release\\</BaseIntermediateOutputPath>\r\n    <IntermediateOutputPath>.obj\\Release\\</IntermediateOutputPath>\r\n    <BaseOutputPath>.bin\\Release\\</BaseOutputPath>\r\n    <UseCommonOutputDirectory>true</UseCommonOutputDirectory>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"15.9.0\" />\r\n    <PackageReference Include=\"xunit\" Version=\"$(xUnitVersion)\" />\r\n    <PackageReference Include=\"xunit.runner.visualstudio\" Version=\"$(xUnitVersion)\" />\r\n  </ItemGroup>\r\n  </ItemGroup>  \r\n</Project>\r\n````\r\n\r\n\r\nThere is other workaround. Very weird - depends on order of and some hacky `Import` declarations, but it breaks `xunit` runner and VS Code. Ssee lines with `Microsoft.NET.Sdk`:\r\n```xml\r\n<Project>\r\n  <PropertyGroup>\r\n    <TargetFramework>netstandard2.0</TargetFramework>\r\n    <LangVersion>latest</LangVersion>\r\n  </PropertyGroup>\r\n  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|AnyCPU'\">\r\n    <OutputPath>.bin\\Debug\\</OutputPath>\r\n    <BaseIntermediateOutputPath>.obj\\Debug\\</BaseIntermediateOutputPath>\r\n    <IntermediateOutputPath>.obj\\Debug\\</IntermediateOutputPath>\r\n  </PropertyGroup>\r\n  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Release|AnyCPU'\">\r\n    <OutputPath>.bin\\Release\\</OutputPath>\r\n    <BaseIntermediateOutputPath>.obj\\Release\\</BaseIntermediateOutputPath>\r\n    <IntermediateOutputPath>.obj\\Release\\</IntermediateOutputPath>\r\n  </PropertyGroup>\r\n  <Import Project=\"Sdk.props\" Sdk=\"Microsoft.NET.Sdk\" />\r\n  <ItemGroup>\r\n    <None Remove=\".gitignore\" />\r\n\r\n    <None Remove=\"**/*.meta\" />\r\n  </ItemGroup>\r\n\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Buffers\" Version=\"4.5.0\" />\r\n    <PackageReference Include=\"System.IO.Pipelines\" Version=\"4.5.3\" />\r\n    <PackageReference Include=\"System.Memory\" Version=\"4.5.1\" />\r\n    <PackageReference Include=\"System.Runtime.CompilerServices.Unsafe\" Version=\"4.5.2\" />\r\n  </ItemGroup>\r\n\r\n  <Import Project=\"Sdk.targets\" Sdk=\"Microsoft.NET.Sdk\" />\r\n</Project>\r\n```\r\nDoes next relates dotnet/project-system#1438? \r\n\r\nI was not able to find solution on SO. \r\n\r\nShould I create separate issue with that with steps:\r\n1. Build into `.bin` and `.obj`\r\n2. Ensure there are no `bin` and `obj` created.\r\n3. Check VS Code, VS 2017, dotnet.exe\r\n\r\nOr my case is relevant for `respecting`?","Url":"https://github.com/dotnet/sdk/issues/3009","RelatedDescription":"Closed issue \"Trouble moving bin/ and obj/ to .bin/ and .obj/\" (#3009)"},{"Id":"416305439","IsPullRequest":false,"CreatedAt":"2019-03-06T16:13:21","Actor":"JoeRobich","Number":"3001","RawContent":null,"Title":"error NETSDK1085 during Roslyn builds with 3.0.100 preview 4 sdk","State":"closed","Body":"When building Roslyn with 3.0.100-preview4-010381 installed, I get the following error on every solution build.\r\n\r\n```\r\n8>------ Build started: Project: VS.Tools.Roslyn.Package, Configuration: Debug Any CPU ------\r\n2>C:\\Program Files\\dotnet\\sdk\\3.0.100-preview4-010381\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Sdk.targets(112,5): error NETSDK1085: The 'NoBuild' property was set to true but the 'Build' target was invoked.\r\n2>Done building project \"IlAsmDeploy.csproj\" -- FAILED.\r\n```","Url":"https://github.com/dotnet/sdk/issues/3001","RelatedDescription":"Closed issue \"error NETSDK1085 during Roslyn builds with 3.0.100 preview 4 sdk\" (#3001)"},{"Id":"417548547","IsPullRequest":false,"CreatedAt":"2019-03-05T23:22:40","Actor":"sbomer","Number":"3010","RawContent":null,"Title":"GenerateDepsFile no longer respects FilesToSkip from runtime packs","State":"open","Body":"- Runtime pack dependencies in deps.json and in the DependencyContext model have a \"runtimepack.\" prefix prependend to the nuget package id (see https://github.com/dotnet/sdk/commit/16eddf3d635133c35f42974dcd491c8263066b37#diff-0723634e548f98293eebe3970b71e0ddR328).\r\n- The heuristic in `GetPackageParts` gets the package id from the name of a nuspec in a parent directory:\r\n https://github.com/dotnet/sdk/blob/ab2176b3447e3e7820b5a340408110b6d498f907/src/Tasks/Common/NuGetUtils.cs#L48-L52\r\n\r\n`GenerateDepsFile` uses `GetPackageParts` to build the list of packages with dependencies to remove. When it looks for files to trim from the dependency model, it doesn't match any of the dependencies that have the \"runtimepack.\" prefix, so those files don't get skipped.\r\n\r\n","Url":"https://github.com/dotnet/sdk/issues/3010","RelatedDescription":"Open issue \"GenerateDepsFile no longer respects FilesToSkip from runtime packs\" (#3010)"},{"Id":"416947669","IsPullRequest":true,"CreatedAt":"2019-03-05T20:41:11","Actor":"nugetlurker","Number":"3006","RawContent":null,"Title":"Insert NuGet Build 5.0.0-rtm.5867 into sdk","State":"closed","Body":"Insert NuGet Build 5.0.0-rtm.5867 into sdk release/2.1.6xx branch","Url":"https://github.com/dotnet/sdk/pull/3006","RelatedDescription":"Closed or merged PR \"Insert NuGet Build 5.0.0-rtm.5867 into sdk\" (#3006)"},{"Id":"416947647","IsPullRequest":true,"CreatedAt":"2019-03-05T00:27:04","Actor":"nugetlurker","Number":"3005","RawContent":null,"Title":"Insert NuGet Build 5.0.0-rtm.5867 into sdk","State":"closed","Body":"Insert NuGet Build 5.0.0-rtm.5867 into sdk release/2.2.2xx branch","Url":"https://github.com/dotnet/sdk/pull/3005","RelatedDescription":"Closed or merged PR \"Insert NuGet Build 5.0.0-rtm.5867 into sdk\" (#3005)"},{"Id":"417040414","IsPullRequest":false,"CreatedAt":"2019-03-04T23:24:46","Actor":"sbomer","Number":"3007","RawContent":null,"Title":"Duplicate items in _ResolvedCopyLocalPublishAssets","State":"open","Body":"- When `ResolveCopyLocalAssets` runs during self-contained publish (`_UseBuildDependencyFile` is false), it outputs `_ResolvedCopyLocalPublishAssets`.\r\n- When `_ComputeResolvedCopyLocalPublishAssets` runs, it adds to `_ResolvedCopyLocalPublishAssets` the contents of (`ReferenceCopyLocalPaths` \\ `_ResolvedCopyLocalBuildAssets`):\r\nhttps://github.com/dotnet/sdk/blob/c60af5f303fa67d25550ecfa54975caef0f5c828/src/Tasks/Microsoft.NET.Build.Tasks/targets/Microsoft.NET.Publish.targets#L398-L399\r\n\r\n`_ResolvedCopyLocalBuildAssets` is empty, so it gets a duplicate copy of items in `ReferenceCopyLocalPaths` (which comes from `RuntimePackAsset`), for example `System.Private.CoreLib.dll`.\r\n\r\nBefore https://github.com/dotnet/sdk/pull/2646, `ResolvedAssembliesToPublish` only had one Item for System.Private.CoreLib.dll. I noticed this while trying to update https://github.com/mono/linker/blob/master/src/ILLink.Tasks/ILLink.Tasks.targets#L451 to work with the newest SDK. `_ManagedAssembliesToLink` was computed from `ResolvedAssembliesToPublish`, but that line breaks when there are multiple files with the same Filename in the input:\r\n```\r\nC:\\Users\\svbomer\\.nuget\\packages\\illink.tasks\\0.1.6\\build\\ILLink.Tasks.targets(451,34): error MSB4094: \"C:\\Users\\svbomer\\.nuget\\packages\\runtime.win-x64.microsoft.netcore.app\\3.0.0-preview-27324-5\\runtimes\\win-x64\\native\\System.Private.CoreLib.dll;C:\\Users\\svbomer\\.nuget\\packages\\runtime.win-x64.microsoft.netcore.app\\3.0.0-preview-27324-5\\runtimes\\win-x64\\native\\System.Private.CoreLib.dll\" is an invalid value for the \"AssemblyPath\" parameter of the \"CheckEmbeddedRootDescriptor\" task. Multiple items cannot be passed into a parameter of type \"Microsoft.Build.Framework.ITaskItem\". [D:\\linker\\test\\ILLink.Tasks.Tests\\bin\\debug\\netcoreapp3.0\\helloworld\\helloworld.csproj]\r\n```\r\n\r\nhttps://github.com/dotnet/sdk/pull/2666 may be relevant.\r\n\r\n/cc @peterhuene @nguerrera ","Url":"https://github.com/dotnet/sdk/issues/3007","RelatedDescription":"Open issue \"Duplicate items in _ResolvedCopyLocalPublishAssets\" (#3007)"},{"Id":"416793797","IsPullRequest":false,"CreatedAt":"2019-03-04T13:09:35","Actor":"SomeAnon42","Number":"3004","RawContent":null,"Title":"ResolvePackageAssets fails when targeting Core 3.0","State":"open","Body":"```\r\nError\tMSB4018\tThe \"ResolvePackageAssets\" task failed unexpectedly.\r\nSystem.Collections.Generic.KeyNotFoundException: The given key was not present in the dictionary.\r\n   at System.Collections.Generic.Dictionary`2.get_Item(TKey key)\r\n   at Microsoft.NET.Build.Tasks.LockFileExtensions.CollectDependencies(IDictionary`2 libraryLookup, IEnumerable`1 dependencies, HashSet`1 exclusionList) in /_/src/Tasks/Microsoft.NET.Build.Tasks/LockFileExtensions.cs:line 193\r\n   at Microsoft.NET.Build.Tasks.LockFileExtensions.CollectDependencies(IDictionary`2 libraryLookup, IEnumerable`1 dependencies, HashSet`1 exclusionList) in /_/src/Tasks/Microsoft.NET.Build.Tasks/LockFileExtensions.cs:line 180\r\n   at Microsoft.NET.Build.Tasks.LockFileExtensions.GetPlatformExclusionList(LockFileTarget lockFileTarget, LockFileTargetLibrary platformLibrary, IDictionary`2 libraryLookup) in /_/src/Tasks/Microsoft.NET.Build.Tasks/LockFileExtensions.cs:line 153\r\n   at Microsoft.NET.Build.Tasks.ResolvePackageAssets.CacheWriter.GetPlatformPackageExclusions() in /_/src/Tasks/Microsoft.NET.Build.Tasks/ResolvePackageAssets.cs:line 1191\r\n   at Microsoft.NET.Build.Tasks.ResolvePackageAssets.CacheWriter..ctor(ResolvePackageAssets task, Stream stream) in /_/src/Tasks/Microsoft.NET.Build.Tasks/ResolvePackageAssets.cs:line 610\r\n   at Microsoft.NET.Build.Tasks.ResolvePackageAssets.CacheReader.CreateReaderFromDisk(ResolvePackageAssets task, Byte[] settingsHash) in /_/src/Tasks/Microsoft.NET.Build.Tasks/ResolvePackageAssets.cs:line 483\r\n   at Microsoft.NET.Build.Tasks.ResolvePackageAssets.CacheReader..ctor(ResolvePackageAssets task) in /_/src/Tasks/Microsoft.NET.Build.Tasks/ResolvePackageAssets.cs:line 434\r\n   at Microsoft.NET.Build.Tasks.ResolvePackageAssets.ReadItemGroups() in /_/src/Tasks/Microsoft.NET.Build.Tasks/ResolvePackageAssets.cs:line 279\r\n   at Microsoft.NET.Build.Tasks.ResolvePackageAssets.ExecuteCore() in /_/src/Tasks/Microsoft.NET.Build.Tasks/ResolvePackageAssets.cs:line 271\r\n   at Microsoft.NET.Build.Tasks.TaskBase.Execute() in /_/src/Tasks/Common/TaskBase.cs:line 35\r\n   at Microsoft.Build.BackEnd.TaskExecutionHost.Microsoft.Build.BackEnd.ITaskExecutionHost.Execute()\r\n   at Microsoft.Build.BackEnd.TaskBuilder.<ExecuteInstantiatedTask>d__26.MoveNext()\tNitroSharpDbg\tC:\\Program Files\\dotnet\\sdk\\3.0.100-preview4-010582\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.PackageDependencyResolution.targets\t228\t\r\n```\r\n\r\nSteps to reproduce:\r\n1. Create a new console netcoreapp3.0 project\r\n2. Clone https://github.com/mellinoe/veldrid.git\r\n3. Add a reference Veldrid.ImGui.csproj\r\n```xml\r\n<ItemGroup>\r\n  <ProjectReference Include=\"..\\veldrid\\src\\Veldrid.ImGui\\Veldrid.ImGui.csproj\" />\r\n</ItemGroup>\r\n```\r\n4. Build the project. \r\n\r\nThe build should fail. However, there's no issues when targeting netcoreapp2.2 or when using [the NuGet package](https://www.nuget.org/packages/ImGui.NET) instead of referencing the project.\r\n\r\n``dotnet --info`` output:\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview4-010582\r\n Commit:    a643588b29\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17763\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview4-010582\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview4-27502-7\r\n  Commit:  12aa3da961\r\n\r\n.NET Core SDKs installed:\r\n  2.2.104 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview4-010582 [C:\\Program Files\\dotnet\\sdk]\r\n```\r\n","Url":"https://github.com/dotnet/sdk/issues/3004","RelatedDescription":"Open issue \"ResolvePackageAssets fails when targeting Core 3.0\" (#3004)"},{"Id":"416329826","IsPullRequest":true,"CreatedAt":"2019-03-03T18:14:52","Actor":"dsplaisted","Number":"3002","RawContent":null,"Title":"Fix publishing self-contained ASP.NET apps","State":"closed","Body":"- Ignore .json files in runtime packs.  Fixes self-contained ASP.NET apps failing to launch with new runtime packs. @pakrym \r\n- Remove UseRefTargetingPacks property.  Fixes #2962","Url":"https://github.com/dotnet/sdk/pull/3002","RelatedDescription":"Closed or merged PR \"Fix publishing self-contained ASP.NET apps\" (#3002)"},{"Id":"416394963","IsPullRequest":true,"CreatedAt":"2019-03-02T14:26:05","Actor":"dotnet-maestro[bot]","Number":"3003","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19151.5\r\n- Microsoft.DotNet.SignTool - 1.0.0-beta.19151.5\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3003","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#3003)"},{"Id":"416214091","IsPullRequest":true,"CreatedAt":"2019-03-01T17:55:17","Actor":"JoeRobich","Number":"3000","RawContent":null,"Title":"Update the json manifest for the Dotfuscator Vsix","State":"closed","Body":"@livarcocc This is to update the dotfuscator manifest for a new build (in dotfuscator branch, which unfortunately still exists in this repo...)","Url":"https://github.com/dotnet/sdk/pull/3000","RelatedDescription":"Closed or merged PR \"Update the json manifest for the Dotfuscator Vsix\" (#3000)"},{"Id":"416092757","IsPullRequest":true,"CreatedAt":"2019-03-01T14:21:16","Actor":"dotnet-maestro[bot]","Number":"2999","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19128.3\r\n- Microsoft.DotNet.SignTool - 1.0.0-beta.19128.3\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/2999","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#2999)"},{"Id":"415919082","IsPullRequest":false,"CreatedAt":"2019-03-01T03:00:55","Actor":"sayedihashimi","Number":"2998","RawContent":null,"Title":"Unable to run global tools in PowerShell running on macOS","State":"open","Body":"I tried to execute a global tool from PowerShell running on macOS and the tool was not located. When I run `dotnet tool list --global` it does show up. When I exit out of PowerShell, and get back into a normal bash prompt, the global tool works fine.\r\n\r\nmacOS version = 10.14.2\r\n\r\n![global-tool](https://user-images.githubusercontent.com/1283154/53613386-f3f2e280-3ba3-11e9-90de-4669536bc35e.jpg)\r\n\r\nHere are the runtime/sdks that I have installed.\r\n![image](https://user-images.githubusercontent.com/1283154/53613512-2e5c7f80-3ba4-11e9-9073-9f4d0a32e6c1.png)\r\n","Url":"https://github.com/dotnet/sdk/issues/2998","RelatedDescription":"Open issue \"Unable to run global tools in PowerShell running on macOS\" (#2998)"},{"Id":"415882721","IsPullRequest":true,"CreatedAt":"2019-03-01T00:15:02","Actor":"fadimounir","Number":"2997","RawContent":null,"Title":"Crossgen Task","State":"open","Body":"Intitial implementation of the crossgen task, and plumbing in the SDK targets to invoke the task. The crossgen task invokes crossgen from the runtime pack.\r\n\r\n- Task triggered when <ReadyToRun> is set to true in the main app's project file (opt-in feature)\r\n- Added new condition to download runtime packs: when the ReadyToRun property is set.\r\n- Adding R2R exclusion list capability\r\n- Symbol emission is optional (opt-in, when ReadyToRunEmitSymbols is set to true)","Url":"https://github.com/dotnet/sdk/pull/2997","RelatedDescription":"Open PR \"Crossgen Task\" (#2997)"},{"Id":"415838644","IsPullRequest":false,"CreatedAt":"2019-02-28T21:47:43","Actor":"nguerrera","Number":"2996","RawContent":null,"Title":"ReferenceManagerAssemblies is hidden from .NETCoreApp but not .NETStandard","State":"open","Body":"See https://github.com/dotnet/sdk/pull/2994#discussion_r261372831\r\n\r\nIs this by design? ","Url":"https://github.com/dotnet/sdk/issues/2996","RelatedDescription":"Open issue \"ReferenceManagerAssemblies is hidden from .NETCoreApp but not .NETStandard\" (#2996)"},{"Id":"415612168","IsPullRequest":true,"CreatedAt":"2019-02-28T14:26:25","Actor":"dotnet-maestro[bot]","Number":"2995","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19127.8\r\n- Microsoft.DotNet.SignTool - 1.0.0-beta.19127.8\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/2995","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#2995)"},{"Id":"415365956","IsPullRequest":true,"CreatedAt":"2019-02-27T22:56:37","Actor":"etbyrd","Number":"2994","RawContent":null,"Title":"Remove opt-out of COM Reference Manager Tab","State":"open","Body":"This is a fix for: https://github.com/dotnet/project-system/issues/4355\r\nI tested this locally and ensured that projects built with COM references but I am not sure if anything is blocking this on the SDK side. ","Url":"https://github.com/dotnet/sdk/pull/2994","RelatedDescription":"Open PR \"Remove opt-out of COM Reference Manager Tab\" (#2994)"},{"Id":"415112893","IsPullRequest":true,"CreatedAt":"2019-02-27T14:21:22","Actor":"dotnet-maestro[bot]","Number":"2993","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19126.6\r\n- Microsoft.DotNet.SignTool - 1.0.0-beta.19126.6\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/2993","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#2993)"},{"Id":"415027102","IsPullRequest":false,"CreatedAt":"2019-02-27T09:35:47","Actor":"Lily721","Number":"2992","RawContent":null,"Title":"issues occurred when .Net core console project reference .net framework class library","State":"closed","Body":"I got a .NET Core console project which use .NET Core 3.0 preview, and other class library with .NET Framework 4 Client Profile, and this framework class library got a reference from System.Security which using PermissionSet like following:\r\n\r\n`using System.Security;`\r\n`......................................`\r\n`new PermissionSet(PermissionState.Unrestricted).Demand();`\r\n\r\nWhen I add this class library to NetCore console project, everything is fine when build, but got an issue during debug:\r\n`System.TypeLoadException: 'Could not load type 'System.Security.PermissionSet' from assembly 'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.'`\r\n\r\nThen I checked the mscorlib.dll in local folder:(C:\\Users\\*****\\.nuget\\packages\\microsoft.netcore.app\\3.0.0-preview-27117-01\\ref\\netcoreapp3.0)\r\nand reflector it but without any system.Security namespace in it.\r\n\r\nSwitch to net core 2.0, got same issue.\r\n\r\nAnyone can help? thanks a lot.","Url":"https://github.com/dotnet/sdk/issues/2992","RelatedDescription":"Closed issue \"issues occurred when .Net core console project reference .net framework class library\" (#2992)"},{"Id":"414342537","IsPullRequest":true,"CreatedAt":"2019-02-27T01:24:23","Actor":"nguerrera","Number":"2990","RawContent":null,"Title":"Add hook to redirect common props, only ref m.nc.platforms when necessary","State":"closed","Body":"1. Introduce $(AlternateCommonProps) to redirect the Sdk common props import to a user-defined location. This is morally equivalent to $(LanguageTargets) being customizable on the targets side. Having full control over both of these imports makes it much easier to integrate the SDK into existing heavily-customized builds. The current use case is to get some internal builds over to netcoreapp3.0\r\n\r\n2. Getting an intermittent error about 'vs' not being found from dogfood script. Removing unnecessary setting of msbuildEngine seems to have fixed it.\r\n\r\n3. With https://github.com/dotnet/core-sdk/pull/698, microsoft.netcore.platforms becomes the only package that cannot be resolved from packs. Make it so that we only pull it in when there are other package references. Otherwise, nuget doesn't need to see it as a package reference. This is just moving the temporary solution around, but means that we can get a working offline experience before we figure out how to adress the runtime graph going into to nuget (or sdk taking over for nuget).","Url":"https://github.com/dotnet/sdk/pull/2990","RelatedDescription":"Closed or merged PR \"Add hook to redirect common props, only ref m.nc.platforms when necessary\" (#2990)"},{"Id":"414599677","IsPullRequest":true,"CreatedAt":"2019-02-26T14:21:42","Actor":"dotnet-maestro[bot]","Number":"2991","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19125.2\r\n- Microsoft.DotNet.SignTool - 1.0.0-beta.19125.2\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/2991","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#2991)"},{"Id":"414093522","IsPullRequest":true,"CreatedAt":"2019-02-25T14:21:40","Actor":"dotnet-maestro[bot]","Number":"2988","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19124.1\r\n- Microsoft.DotNet.SignTool - 1.0.0-beta.19124.1\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/2988","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#2988)"},{"Id":"414119637","IsPullRequest":false,"CreatedAt":"2019-02-25T14:02:53","Actor":"loop-evgeny","Number":"2989","RawContent":null,"Title":"Error running self-contained Linux EXE: \"This executable is not bound to a managed DLL to execute. The binding value is: 'c3ab8ff13720e8ad9047dd39466b3c8974e592c2fa383d4a3960714caef0c4f2'\"","State":"open","Body":"I created a new console application in VS 2017 using .NET Core 2.1. Published it as a self-contained linux-x64 app without any changes and tried to run it on an Ubuntu 18.04 VM. Got this error:\r\n\r\n```\r\n ./LinuxTest \r\nThis executable is not bound to a managed DLL to execute. The binding value is: 'c3ab8ff13720e8ad9047dd39466b3c8974e592c2fa383d4a3960714caef0c4f2'\r\nA fatal error was encountered. This executable was not bound to load a managed DLL.\r\n```\r\n\r\nc3ab8ff13720e8ad9047dd39466b3c8974e592c2fa383d4a3960714caef0c4f2 is apparently the SHA256 hash of \"foobar\", so whatever the real problem is, this is a very weird error message, too!\r\n\r\nLinuxTest.csproj:\r\n```\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <OutputType>Exe</OutputType>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n\r\n</Project>\r\n```\r\n\r\nProgram.cs:\r\n```\r\nusing System;\r\n\r\nnamespace LinuxTest\r\n{\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            Console.WriteLine(\"Hello World!\");\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nResulting self-contained binary: [LinuxTest.zip](https://github.com/dotnet/sdk/files/2900841/LinuxTest.zip)\r\n\r\nIf I install dotnet-runtime-2.1 on the Linux VM and run `dotnet LinuxTest.dll` it works.","Url":"https://github.com/dotnet/sdk/issues/2989","RelatedDescription":"Open issue \"Error running self-contained Linux EXE: \"This executable is not bound to a managed DLL to execute. The binding value is: 'c3ab8ff13720e8ad9047dd39466b3c8974e592c2fa383d4a3960714caef0c4f2'\"\" (#2989)"},{"Id":"413886149","IsPullRequest":true,"CreatedAt":"2019-02-25T02:30:21","Actor":"dotnet-bot","Number":"2987","RawContent":null,"Title":"Merge release/3.0.1xx to master","State":"closed","Body":"\nThis is an automatically generated pull request from release/3.0.1xx into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/3.0.1xx-to-master\ngit reset --hard upstream/master\ngit merge upstream/release/3.0.1xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/3.0.1xx-to-master --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/2987","RelatedDescription":"Closed or merged PR \"Merge release/3.0.1xx to master\" (#2987)"},{"Id":"413843026","IsPullRequest":true,"CreatedAt":"2019-02-24T21:53:25","Actor":"dsplaisted","Number":"2986","RawContent":null,"Title":"Mark implicit platforms package reference as PrivateAssets","State":"closed","Body":"Fixes #2976","Url":"https://github.com/dotnet/sdk/pull/2986","RelatedDescription":"Closed or merged PR \"Mark implicit platforms package reference as PrivateAssets\" (#2986)"}],"ResultType":"GitHubIssue"},"Announcements-Issues":{"Issues":[{"Id":"415363751","IsPullRequest":false,"CreatedAt":"2019-02-27T22:49:51","Actor":"leecow","Number":"102","RawContent":null,"Title":"SDK Installers will remove previous patch versions","State":"open","Body":"The SDK Installers for Windows will upgrade patch versions in place within the same feature band. This will reduce the number of SDKs that are installed on programmer machines.\r\n\r\nFeature bands of the SDK are defined like 3.0.1nn. [Find out more about SDK version numbers](https://docs.microsoft.com/dotnet/core/versions/#versioning-details).\r\n\r\nThis means when .NET Core SDK 3.0.101 becomes available and is installed, .NET Core SDK 3.0.100 will be removed from the machine if it exists. When .NET Core SDK 3.0.200 becomes available and is installed on the same machine, .NET Core SDK versions like 3.0.101 will not be removed but stay side by side with 3.0.200.\r\n\r\nThis approach supports use of `global.json` which will roll forward across patch versions, but not feature bands of the SDK. Thus, upgrading via the SDK installer will not result in errors due to a missing SDK. Feature bands also align with side by side Visual Studio installations for those users that install SDKs for Visual Studio use. For example, Visual Studio 15.9 uses .NET Core SDK 2.2.500 but does not support .NET Core SDK 2.2.600.\r\n\r\nFind out how to [remove other .NET Core SDK versions here.](https://docs.microsoft.com/dotnet/core/versions/remove-runtime-sdk-versions).","Url":"https://github.com/dotnet/announcements/issues/102","RelatedDescription":"Open issue \"SDK Installers will remove previous patch versions\" (#102)"},{"Id":"410971363","IsPullRequest":false,"CreatedAt":"2019-02-15T22:24:40","Actor":"richlander","Number":"101","RawContent":null,"Title":"Publishing .NET Core images to Microsoft Container Registry (MCR)","State":"open","Body":"# Publishing .NET Core images to Microsoft Container Registry (MCR)\r\n\r\nMicrosoft teams are now publishing container images to the [Microsoft Container Registry](https://azure.microsoft.com/en-us/blog/microsoft-syndicates-container-catalog/). There are two primary reasons for this change:\r\n\r\n* Syndicate Microsoft-provided container images to multiple registries, like Docker Hub and Red Hat.\r\n* Use Microsoft Azure as a global CDN for delivering Microsoft-provided container images.\r\n\r\nYou will use and see MCR as a storage back-end for Microsoft images. The primary way you learn about Microsoft container images and tags will be through a registry, which for most users will continue to be Docker Hub. Most of the experience you've had browsing for .NET Core container images will continue unchanged with this new model. The Docker Hub URLs you've used for Microsoft repos will continue to work, and forward to updated locations on Docker Hub. Existing Docker Hub will images will be maintained as-is.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #935](https://github.com/dotnet/dotnet-docker/issues/935)\r\n\r\n## Starting with .NET Core nightly repo\r\n\r\nOn the .NET team, we started our [transition to MCR](https://github.com/dotnet/dotnet-docker/issues/745) with the .NET Core \"nightly\" repo. [dotnet-nightly](dockerhub.com/r/microsoft/dotnet-nightly) is now hosted on MCR and syndicated to Docker Hub. We started with the nightly repo in order to discover and fix any challenges we found with this new model before we move our higher-traffic primary container repository.\r\n\r\nWe will start publishing [dotnet](dockerhub.com/r/microsoft/dotnet) to MCR a bit later, in either February or March. This issue will be updated when that happens.\r\n\r\n## Repo Split\r\n\r\nThe [.NET Core repo](https://hub.docker.com/r/microsoft/dotnet) currently includes 4 major categories of tags: \r\n\r\n* `sdk`\r\n* `aspnetcore-runtime`\r\n* `runtime` \r\n* `runtime-deps`\r\n\r\nProviding all of the tags in one place has helped with discoverability but made for a repo with an enormous README that can be challenging to navigate and consume. It is large enough that we exceeded Docker Hub README limits and had to artificially make it smaller.\r\n\r\nGoing forward, we will provide a repo for each of the tag categories listed above. We'll also provide a \"product repo\" that will hierarchicaly group all of our repos together. This will satisfy discoverability needs so that it will be easy to find the tags you want.\r\n\r\nYou can already see this experience with [microsoft-dotnet-core-nightly](https://hub.docker.com/_/microsoft-dotnet-core-nightly). There are now multiple repos for our nightly builds:\r\n\r\n* [.NET Core Nightly product repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly)\r\n* [.NET Core SDK Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-sdk/)\r\n* [.NET Core ASP.NET Core Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-aspnet/)\r\n* [.NET Core Runtime Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-runtime/)\r\n* [.NET Core Runtime-deps Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-runtime-deps/)\r\n\r\nThe same split will exist for the non-nightly stable repo (currently hosted at  [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet)) when we start publishing it to MCR and syndicating it back to DockerHub.\r\n\r\n## Changes to registry URL\r\n\r\nThe biggest change is that your Dockerfiles need to be updated to point to the MCR registry in order get access to new .NET Core container tags. The same change is required for scripts or human operations that pull images via `docker pull`.\r\n\r\nThe following example shows the registry path, repo and tag for the .NET Core 2.2 \"Nightly\" SDK on MCR:\r\n\r\n```console\r\nmcr.microsoft.com/dotnet/core-nightly/sdk:2.2\r\n```\r\n\r\nAs comparison, the following repo and tag have been used to date for the .NET Core 2.2 \"Nightly\" SDK on Docker Hub:\r\n\r\n```console\r\nmicrosoft/dotnet-nightly:2.2-sdk\r\n```\r\n\r\nThe new repo URL is provided at each of the news repos. For example, the new .NET Core SDK \"nightly\" repo provides a box on the right where you can copy and paste the correct MCR-based repo syntax that you can use for `docker pull` or in `FROM` statements in your Dockerfiles.\r\n\r\n![image](https://user-images.githubusercontent.com/2608468/52811702-95c5eb80-304a-11e9-8de8-e6ea1f4b4d75.png)\r\n\r\n## Servicing existing Docker Hub tags\r\n\r\nWe will continue to service existing non-version-specific or floating tags on Docker Hub while the associated .NET Core version is supported. For example the `microsoft/dotnet:2.1-sdk` tag is a floating tag that will continue to be serviced for the lifetime of .NET Core 2.1. You can continue using floating tags without issue.\r\n\r\nIf you use non-floating tags, like `microsoft/dotnet:2.1.504-sdk-alpine`, then you will need to update your Dockerfile to use a new non-floating tag. No new non-floating tags will be published to `microsoft/dotnet` and `microsoft/dotnet-nightly` after we fully transition to MCR.\r\n\r\n.NET Core 3.0 Preview 3 and later will only be made available on MCR.\r\n\r\n## Microsoft is a Verified Publisher\r\n\r\nUntil now, Microsoft-provided container images were considered \"community images\". As part of this change, we are re-classifying Microsoft as a \"verified publisher\" on Docker Hub. This designation should make it clearer that .NET and other Microsoft-provided images are coming from a verified source. There clearly was that expectation previously, but Docker is now making that clearer in the Docker Hub pages they host for Microsoft.\r\n\r\nWe will provide official vulnerability scanning Microsoft-provided images as a second phase of this transition.","Url":"https://github.com/dotnet/announcements/issues/101","RelatedDescription":"Open issue \"Publishing .NET Core images to Microsoft Container Registry (MCR)\" (#101)"},{"Id":"410784442","IsPullRequest":false,"CreatedAt":"2019-02-15T14:06:29","Actor":"TaraOverfield","Number":"100","RawContent":null,"Title":"RESOLVED: Advisory on February 2019 Security update for Windows 10 update 1809","State":"open","Body":"<strong><em>Final Update 2/19/19 @1:30 PM (PST)</em></strong><em>: This </em><em>advisory is now resolved with no action needed from Microsoft Customers. The issue was not applicable to any valid or supported configuration. There is no consequence for .NET 4.8 Preview customers. </em>\r\n\r\n<em>We strive to share timely information to protect our customer’s productivity, in this case, our finding was thankfully of no consequence for customers on supported configurations.</em>\r\n\r\n<del><em><strong>Update 2/15/19 @3:35 PM (PST)</strong></em><em>: As we continue our investigation, we are finding the issue to be restricted to a limited and isolated set of test-only systems that are using non-official versions of the .NET 4.8 Preview. As of 2/15/19 around 12:00 pm (PST) we further tightened our delivery mechanisms to ensure that the February .NET security updates are only deployed to their expected target systems.</em></del>\r\n\r\n<del><span>The </span><a href=\"https://blogs.msdn.microsoft.com/dotnet/2019/02/13/net-framework-february-2019-security-and-quality-rollup/\" rel=\"nofollow\">February 2019 Security and Quality Rollup for Windows 10 update 1809</a><span> was released earlier this week. We have received multiple customer reports of issues when a customer has installed .NET Framework 4.8 Preview then installed the February security update, <a href=\"https://support.microsoft.com/kb/4483452\" rel=\"nofollow\">4483452</a>.</span> These reports are specific to only to the scenario when a customer has installed both .NET Framework 4.8 Preview and the February security update.</del>\r\n\r\n<del>We are actively working on investigating and addressing this issue. If you installed the February 2019 security update and have not seen any negative behavior, we recommend that you leave your system as-is but closely monitor it and ensure that you apply upcoming .NET Framework updates.</del>\r\n\r\n<del>We will continue to update this <a href=\"https://github.com/dotnet/announcements/issues/100\" rel=\"nofollow\">post</a> as we have new information.</del>\r\n<h2><del>Guidance</del></h2>\r\n<del>We are working on guidance and will update this post and as we have new information.</del>\r\n<h2><del>Workaround</del></h2>\r\n<del>There are no known workarounds at this time.</del>\r\n<h2><del>Symptoms</del></h2>\r\n<del>After installing .NET Framework 4.8 Preview then the February 2019 security update, <a href=\"https://support.microsoft.com/kb/4483452\" rel=\"nofollow\">4483452</a>, Visual Studios will crash with this error message:</del>\r\n<p class=\"xxxxxmsonormal\"><del><b><span style=\"font-size: 10.5pt;font-family: 'Segoe UI',sans-serif;color: black\">\"Exception has been thrown by the target of an invocation.\"</span></b></del></p>","Url":"https://github.com/dotnet/announcements/issues/100","RelatedDescription":"Open issue \"RESOLVED: Advisory on February 2019 Security update for Windows 10 update 1809\" (#100)"},{"Id":"410455095","IsPullRequest":false,"CreatedAt":"2019-02-14T19:28:25","Actor":"richlander","Number":"99","RawContent":null,"Title":"Supporting new Alpine versions (for containers)","State":"open","Body":"# Supporting new Alpine versions (for containers)\r\n\r\n[Alpine 3.9](https://twitter.com/alpinelinux/status/1090416212822110214) was recently announced. Congratulations, Alpine team! On the .NET team, we are committed to supporting new Alpine versions quickly, and also need to define a policy for older versions. This policy only applies for the container images that we publish.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #933](https://github.com/dotnet/dotnet-docker/issues/933)\r\n\r\n## Policy\r\n\r\nWe intend to establish the following policy for supporting Alpine with .NET Core container images:\r\n\r\n* Support new Alpine versions within 60 days of release (hopefully much less).\r\n* Support n-1 Alpine versions for 3 months after we support a new Alpine version.\r\n\r\nNote: The [.NET Core support policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md) may be broader. This policy is specific to the container images we produce.\r\n\r\n## Plans\r\n\r\nWe're in the process of [fixing issues required to support Alpine 3.9](https://github.com/dotnet/dotnet-docker/issues/921). We expect that these issues will be resolved in February and that we'll be able to provide support for Alpine 3.9 in March.\r\n\r\nWe will produce Alpine 3.9 images for .NET Core 2.1, 2.2 and 3.0. Assuming we publish 3.9 images in March, we'll stop producing and supporting Alpine 3.7 and 3.8 images after June (2019).\r\n\r\n## Using Alpine-based .NET Core images\r\n\r\nWe produce a variety of Alpine-based images. You can either depend on a specific Alpine version, like with `microsoft/dotnet:2.2-sdk-alpine3.8` or opt to use the latest Alpine image we have to offer, like with `microsoft/dotnet:2.2-sdk-alpine`. Either are good choices. It is just a question of whether you want to make a conscious decision to move to later Alpine releases.\r\n\r\n## Support for ARM32?\r\n\r\nWe produce Alpine images for x64 (and ARM64, shortly). The [Alpine 3.9 announcement](https://twitter.com/alpinelinux/status/1090416212822110214) made mention of support for ARM32v7. We would like to enable .NET Core [Alpine-based images on ARM32](https://github.com/gliderlabs/docker-alpine/issues/463#issuecomment-460530395). We are patiently waiting for that to happen. If that's important to you, you should comment on that thread.","Url":"https://github.com/dotnet/announcements/issues/99","RelatedDescription":"Open issue \"Supporting new Alpine versions (for containers)\" (#99)"},{"Id":"409840927","IsPullRequest":false,"CreatedAt":"2019-02-13T14:48:21","Actor":"TaraOverfield","Number":"98","RawContent":null,"Title":"February 2019 .NET Updates","State":"open","Body":"# February 2019 .NET Updates\r\nThe following .NET updates were released in February 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n* [.NET Framework February 2019 Security and Quality Rollup - February 12, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/02/13/net-framework-february-2019-security-and-quality-rollup/)\r\n* [.NET Framework February 2019 Preview of Quality Rollup - February 19, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/02/19/net-framework-february-2019-preview-of-quality-rollup/)\r\n\r\n## .NET Support Policies\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/98","RelatedDescription":"Open issue \"February 2019 .NET Updates\" (#98)"},{"Id":"409436643","IsPullRequest":false,"CreatedAt":"2019-02-12T18:21:22","Actor":"leecow","Number":"97","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0657: .NET Core Domain Spoofing Vulnerability","State":"open","Body":"## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 1.0, 1.1, 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a domain spoofing vulnerability in .NET Framework and .NET Core which causes the meaning of a URI to change when International Domain Name encoding is applied. An attacker who successfully exploited the vulnerability could redirect a URI.\r\n\r\nThe security update addresses the vulnerability by disallowing certain Unicode characters from the URI.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/35265\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nMicrosoft has not identified any mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core 1.0 or 1.1 based application that uses the [System.Private.Uri](https://www.nuget.org/packages/System.Private.Uri/) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.Private.Uri | 4.3.0 | 4.3.1\r\n\r\nAny .NET Core 2.1 or 2.2 based application that uses the [Microsoft.NETCore.App](https://www.nuget.org/packages/Microsoft.NETCore.App) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nMicrosoft.NETCore.App | 2.1.0, 2.1.1, 2.1.2, 2.1.3, 2.1.4, 2.1.5, 2.1.6, 2.1.7, 2.2.0, 2.2.1 | 2.1.8, 2.2.2\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n#### Applications that use Microsoft.NetCore.App\r\n\r\n`System.Private.Uri` is distributed as part of the .NET Core 2.1 runtime. To check the currently installed runtimes, open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed, you'll see output like the following;\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your host version is 2.1.x and the highest `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\nIf your host version is 2.2.x and the highest 2.1.x `Microsoft.NETCore.App` runtime version is less than 2.2.1, you're vulnerable to this issue.\r\n\r\nYou will not see SDK versions if you have only installed the runtime.\r\n\r\n#### Applications not using Microsoft.NetCore.App\r\n\r\nThe affected assembly is also available separately as a NuGet package. If you are not using Microsoft.NetCore.App, you may still be affected if you are referencing the packages listed above.\r\n\r\n##### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file. They can be fixed by [editing the project file](#fixing-direct-dependencies) or using NuGet to update the dependency.\r\n\r\n##### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects\r\n\r\nThe `project.assets.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json)).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `System.Private.Uri/4.3.0` is a reference to version 4.3.0 of `System.Private.Uri`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\n#### Updating the version of Microsoft.NETCore.App\r\n\r\nIf your host version is a 2.1.x host you must install version 2.1.8 or later of the [.NET Core 2.1 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.1), or corresponding [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\nIf your host version is a 2.2.x you must install version 2.2.2 or later of the [.NET Core 2.2 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.2), or corresponding  [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\n#### <a name=\"fixing-direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Private.Uri\" Version=\"4.3.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.Private.Uri` version 4.3.0\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.Private.Uri` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Private.Uri\" Version=\"4.3.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"transitive-dependencies\"></a>Fixing transitive dependencies\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Private.Uri\" Version=\"4.3.0\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n##### Rebuilding your application\r\n\r\nFinally, you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2019-0657](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0657)\r\n\r\n### Revisions\r\n\r\nV1.0 (February 12, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-02-08_\r\n","Url":"https://github.com/dotnet/announcements/issues/97","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0657: .NET Core Domain Spoofing Vulnerability\" (#97)"},{"Id":"397026248","IsPullRequest":false,"CreatedAt":"2019-01-08T18:17:45","Actor":"leecow","Number":"96","RawContent":null,"Title":"January 2019 .NET Updates","State":"open","Body":"# January 2019 .NET Updates\r\n\r\nThe following .NET updates were released in January 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n\r\n* [.NET Framework January 2019 Preview of Quality Rollup - January 15, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/01/15/net-framework-january-2019-preview-of-quality-rollup/)\r\n* [.NET Framework January 2019 Security and Quality Rollup - January 8, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/01/08/net-framework-january-2019-security-and-quality-rollup/)\r\n* [.NET Framework January 22, 2018 Preview of Cumulative Update for Windows 10 version 1809 and Windows Server 2019 - January 22, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/01/22/net-framework-january-22-2018-preview-of-cumulative-update-for-windows-10-version-1809-and-windows-server-2019/)\r\n\r\n## .NET Core\r\n\r\n* .NET Core 2.1.7 and .NET Core SDK 2.1.503 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.7/2.1.7.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.1) )\r\n\r\n* .NET Core 2.2.1 and .NET Core SDK 2.2.102 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.1/2.2.1.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.2) )\r\n\r\nA discussion issue is available at [core/2210](https://github.com/dotnet/core/issues/2210)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/96","RelatedDescription":"Open issue \"January 2019 .NET Updates\" (#96)"},{"Id":"397020176","IsPullRequest":false,"CreatedAt":"2019-01-08T18:00:27","Actor":"blowdart","Number":"95","RawContent":null,"Title":" Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a tampering vulnerability exists when .NET Core improperly handles specially crafted files. An attacker who successfully exploited this vulnerability could write arbitrary files and directories to certain locations on a vulnerable system. However, an attacker would have limited control over the destination of the files and directories.\r\n\r\nTo exploit the vulnerability, an attacker must send a specially crafted file to a vulnerable system\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core handles these files.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/34427\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nIf your application does not extract ZIP compressed files it is unaffected.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the [System.IO.Compression.ZipFile](https://www.nuget.org/packages/System.IO.Compression.ZipFile/) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nMicrosoft.NETCore.App (System.IO.Compression.ZipFile) | 2.1.0, 2.1.1, 2.1.2, 2.1.3, 2.1.4, 2.1.5, 2.1.6 | 2.1.7\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n`System.IO.Compression.ZipFile` is distributed as part of the .NET Core 2.1 runtime. To check the currently installed runtimes, open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed, you'll see output like the following;\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your host version is 2.1.x and the highest `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\nIf your host version is 2.2.x and the highest 2.1.x `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\n\r\nYou will not see SDK versions if you have only installed the runtime.\r\n\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nIf your host version is a 2.1.x host you must install version 2.1.7 or later of the [.NET Core 2.1 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.1), or corresponding [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\nIf your host version is a 2.2.x you must install version 2.2.1 or later of the [.NET Core 2.2 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.2), or corresponding  [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\nFinally, you must restart your applications once an updated runtime or SDK is installed.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgments\r\n\r\n[Danny Grander](https://twitter.com/grander) of [Snyk](https://snyk.io/)\r\n\r\n### External Links\r\n\r\n[CVE-2018-8416](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-8416)\r\n\r\n### Revisions\r\n\r\nV1.1 (January 9, 2019): Correct affected pacakge table.\r\nV1.0 (January 8, 2019): Advisory published.\r\n\r\n_Version 1.1_\r\n\r\n_Last Updated 2019-01-09_\r\n\r\n","Url":"https://github.com/dotnet/announcements/issues/95","RelatedDescription":"Open issue \" Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability\" (#95)"},{"Id":"397020142","IsPullRequest":false,"CreatedAt":"2019-01-08T18:00:23","Actor":"blowdart","Number":"94","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of an information disclosure vulnerability exists in .NET Framework and .NET Core which allows bypassing Cross-origin Resource Sharing (CORS) configurations. An attacker who successfully exploited the vulnerability could retrieve content, that is normally restricted, from a web application.\r\n\r\nThe security update addresses the vulnerability by enforcing CORS configuration to prevent its bypass.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/34428\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nMicrosoft has not identified any mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the [System.Net.Http](https://www.nuget.org/packages/System.Net.Http/) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nMicrosoft.NETCore.App (System.Net.Http) | 2.1.0, 2.1.1, 2.1.2, 2.1.3, 2.1.4, 2.1.5, 2.1.6 | 2.1.7\r\nMicrosoft.NETCore.App (System.Net.Http) | 2.2.0 | 2.2.1\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n#### Applications that use Microsoft.NetCore.App\r\n\r\n`System.Net.Http` is distributed as part of the .NET Core 2.1 runtime. To check the currently installed runtimes, open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed, you'll see output like the following;\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your host version is 2.1.x and the highest `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\nIf your host version is 2.2.x and the highest 2.1.x `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\n\r\nYou will not see SDK versions if you have only installed the runtime.\r\n\r\n#### Applications not using Microsoft.NetCore.App\r\n\r\nThe affected assembly is also available separately as a NuGet package. If you are not using Microsoft.NetCore.App, you may still be affected if you are referencing the packages listed above.\r\n\r\n##### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file. They can be fixed by [editing the project file](#fixing-direct-dependencies) or using NuGet to update the dependency.\r\n\r\n##### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects\r\n\r\nThe `project.assets.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json)).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `SSystem.Net.Http/4.3.0` is a reference to version 4.3.0 of `System.Net.Http`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\n#### Updating the version of Microsoft.NETCore.App\r\n\r\nIf your host version is a 2.1.x host you must install version 2.1.7 or later of the [.NET Core 2.1 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.1), or corresponding [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\nIf your host version is a 2.2.x you must install version 2.2.1 or later of the [.NET Core 2.2 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.2), or corresponding  [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\n#### <a name=\"fixing-direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.Net.Http` version 4.3.0\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.IO.Pipelines` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.5\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"transitive-dependencies\"></a>Fixing transitive dependencies\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.5\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n##### Rebuilding your application\r\n\r\nFinally, you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2019-0545](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0545)\r\n\r\n### Revisions\r\n\r\nV1.1 (January 9, 2019): Correct affected package table. \r\nV1.0 (January 8, 2019): Advisory published.\r\n\r\n_Version 1.1_\r\n\r\n_Last Updated 2019-01-09_\r\n","Url":"https://github.com/dotnet/announcements/issues/94","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability\" (#94)"},{"Id":"390948658","IsPullRequest":false,"CreatedAt":"2018-12-14T03:22:58","Actor":"1015450578","Number":"93","RawContent":null,"Title":"Docker image with tag '2.2-aspnetcore-runtime' is not compatible","State":"closed","Body":"1. Install  .NET Core 2.2.100 sdk\r\n2. Create a new 'AspNetCore Web Api' by using Visual Studio 2017,and enbale docker support.\r\n3. F5 ,the Output Windows shows:\r\n>It was not possible to find any compatible framework version\r\n>The specified framework 'Microsoft.AspNetCore.App', version '2.2.0' was not found.\r\n>  - Check application dependencies and target a framework version installed at:\r\n>      /usr/share/dotnet/\r\n>  - Installing .NET Core prerequisites might help resolve this problem:\r\n>     http://go.microsoft.com/fwlink/?LinkID=798306&clcid=0x409\r\n>  - The .NET Core framework and SDK can be installed from:\r\n>      https://aka.ms/dotnet-download\r\n>  - The following versions are installed:\r\n>      2.2.0-preview3-35497 at [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]","Url":"https://github.com/dotnet/announcements/issues/93","RelatedDescription":"Closed issue \"Docker image with tag '2.2-aspnetcore-runtime' is not compatible\" (#93)"},{"Id":"390193072","IsPullRequest":false,"CreatedAt":"2018-12-12T12:56:53","Actor":"bilalmalik777","Number":"92","RawContent":null,"Title":".net core Console","State":"closed","Body":"I am running dot net core console app as web jobs and it is working perfectly in docker with docker compose. Now the issue is I want to pass a value to the application via Console.ReadLine() over this value i make some decision but i am unable to pass value via Console.ReadLine(). How i can do it please help me. For more understanding, i have added my docker compose file below\r\n`version: '3.4'\r\n\r\nservices:\r\n  \r\n  tt.core.web:\r\n    image: ${DOCKER_REGISTRY-}ttcoreweb\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.Web/Dockerfile\r\n    depends_on:\r\n     - db\r\n    networks:\r\n     - app-network\r\n\r\n  tt.core.downtime.webjob:\r\n    image: ${DOCKER_REGISTRY-}ttcoredowntimewebjob\r\n    environment:\r\n      CORE_ENVIRONMENT: devdocker\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.Downtime.Webjob/Dockerfile\r\n    depends_on:\r\n     - db\r\n     - tt.core.web\r\n    networks:\r\n     - app-network\r\n\r\n  db:\r\n    image: microsoft/mssql-server-linux\r\n    container_name: db\r\n    environment:\r\n      SA_PASSWORD: \"Thingtrax%1\"\r\n      ACCEPT_EULA: \"Y\"\r\n      MSSQL_PID: Express\r\n    ports:\r\n      - \"7002:1433\"\r\n    networks:\r\n      app-network:\r\n        ipv4_address: 172.24.0.2\r\n\r\nnetworks:\r\n  app-network:\r\n    ipam:\r\n      driver: default\r\n      config:\r\n        - subnet: 172.24.0.0/16\r\n\r\n`\r\nIf the detail is not enough or you do not get my point, you can share your confusion in comment","Url":"https://github.com/dotnet/announcements/issues/92","RelatedDescription":"Closed issue \".net core Console\" (#92)"},{"Id":"380346599","IsPullRequest":false,"CreatedAt":"2018-11-13T17:44:44","Actor":"leecow","Number":"91","RawContent":null,"Title":"November 2018 .NET Updates","State":"open","Body":"# November 2018 .NET Updates\r\n\r\nThe following .NET updates were released in November 2018. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Core\r\n\r\n* [.NET Core November 2018 (2.1.6 and SDK 2.1.500) Update release notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.6/2.1.6.md)\r\n\r\nA [discussion issue](https://github.com/dotnet/core/issues/2053) is available for questions or feedback about this release.\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n* [October 2018](https://github.com/dotnet/announcements/issues/89)\r\n* [September 2018](https://github.com/dotnet/announcements/issues/84)\r\n* [August 2018](https://github.com/dotnet/announcements/issues/79)\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)","Url":"https://github.com/dotnet/announcements/issues/91","RelatedDescription":"Open issue \"November 2018 .NET Updates\" (#91)"},{"Id":"375230004","IsPullRequest":false,"CreatedAt":"2018-10-29T21:45:27","Actor":"terrajobst","Number":"90","RawContent":null,"Title":"The future of JSON in .NET Core 3.0","State":"open","Body":"JSON has become an essential part of virtually all modern .NET applications and in many cases even surpassed the usage of XML. However, .NET hasn't had a (great) built-in way to deal with JSON. Instead we've relied on [Json.NET] which continues to serve the .NET ecosystem well.\r\n\r\n[Json.NET]: https://www.newtonsoft.com/json\r\n\r\nMoving forward, we plan on making some changes to our JSON support:\r\n\r\n* **We need high-performance JSON APIs**. We need a new set of JSON APIs that are highly tuned for performance by using `Span<T>` and allows for processing UTF-8 directly without having to transcode to UTF-16 `string` instances. Both aspects are critical for our web server Kestrel, where throughput is a key requirement.\r\n\r\n* **Remove dependency from ASP.NET Core to Json.NET**. Today, ASP.NET Core has a dependency on Json.NET. While this provides a tight integration between ASP.NET Core and Json.NET, it also means that application developers cannot freely choose which JSON library they are using. This is also problematic for customers of Json.NET as the version is dictated by the underlying platform. However, Json.NET is frequently updated and application developers often want to -- or even have to -- use a specific version. Thus, we want to remove the dependency from ASP.NET Core 3.0 to Json.NET so that customers can choose which version to use, without fearing they might accidentally break the underlying platform. In addition, this makes it also possible to plug-in an entirely different JSON library.\r\n\r\n* **Provide an ASP.NET Core integration package for Json.NET**. Json.NET has basically become the Swiss Army knife of JSON processing in .NET. It provides many options and facilities that allow customers to handle their JSON needs with ease. We don't want to compromise on the Json.NET support customers are getting today, for example, the ability to configure the JSON serialization via the `AddJsonOptions` extension method. Thus, we want to provide the Json.NET integration as a NuGet package that developers can optionally install so they get all the bells and whistles they get from Json.NET today. The other part of this work item is to ensure we have the right extension points so that other parties can provide similar integration packages for their JSON library of choice.\r\n\r\nBelow are more details around this plan.\r\n\r\n## The need for high-performance JSON APIs\r\n\r\nThe requirements for the .NET stack have changed a bit since the arrival of .NET Core. Historically, .NET has valued usability and convenience. With .NET Core, we've added a focus on performance, and we've made significant investments to serve high performance needs. And the [improvements we made][techempower] in the popular TechEmpower benchmark are a testament to that.\r\n\r\n[techempower]: https://www.techempower.com/blog/2016/11/16/framework-benchmarks-round-13/\r\n\r\nWith .NET Core 2.1, we've added a brand new primitive called [Span\\<T>][span-msdn] that allows us to represent native memory and arrays in a uniform way. With this type, we've also added a set of parsing and encoding APIs that are much more memory efficient without having to resort to unsafe code.\r\n\r\n[span-msdn]: https://msdn.microsoft.com/en-us/magazine/mt814808.aspx\r\n\r\nPart of the work of minimizing allocations is to avoid having to transcode UTF-8 payloads into UTF-16 strings, purely for parsing reasons. Currently, Json.NET is implemented by reading UTF-16. We need the ability to read (and write) JSON documents directly in UTF-8 because most network protocols (including HTTP) use UTF-8.\r\n\r\nDuring .NET Core 2.1 we've learned that updating our existing APIs to leverage `Span<T>` has limits. While we did add a bunch of overloads that accept spans, we also had to produce brand new APIs that are designed around minimizing allocations and dealing with buffers, which we exposed in `System.Buffers` namespaces. And with `System.IO.Pipelines` we've also added a programming model that enables developers to share buffers without having to deal with lifetime issues.\r\n\r\nBased on these experiences we believe in order to support JSON parsing, we'll need to expose a new set of JSON APIs that are specifically geared for high-performance scenarios.\r\n\r\nYou might wonder why we can't just update Json.NET to include support for parsing JSON using `Span<T>`? Well, James Newton-King -- the author of Json.NET -- has the following to say about that:\r\n\r\n> Json.NET was created over 10 years ago, and since then it has added a wide range of features aimed to help developers work with JSON in .NET. In that time Json.NET has also become far and away NuGet's most depended on and downloaded package, and is the go-to library for JSON support in .NET. Unfortunately, Json.NET's wealth of features and popularity works against making major changes to it. Supporting new technologies like `Span<T>` would require fundamental breaking changes to the library and would disrupt existing applications and libraries that depend on it.\r\n>\r\n> Going forward Json.NET will continue to be worked on and invested in, both addressing known issues today and supporting new platforms in the future. Json.NET has always existed alongside other JSON libraries for .NET, and there will be nothing to prevent you using one or more together, depending on whether you need the performance of the new JSON APIs or the large feature set of Json.NET.\r\n\r\n## Move Json.NET integration into a separate NuGet package\r\n\r\nToday, you cannot use ASP.NET Core without Json.NET because it is a dependency of ASP.NET Core itself. Over the years, we've received feedback that the dependency can conflict with other libraries that have their own dependency on a different version of Json.NET. In the past, we've considered addressing this issue by using a private copy of Json.NET in ASP.NET. However, this would create problems when developers want to configure Json.NET (for instance, in order to control how the serializer behaves when formatting JSON objects).\r\n\r\nMoving forward we'd like to:\r\n\r\n1. Replace the internal usage of Json.NET in ASP.NET Core by the new platform-provided JSON APIs.\r\n\r\n2. Factor the public facing usage of Json.NET into an optional integration package that can be acquired from NuGet.\r\n\r\nSo the existing integration between ASP.NET Core and Json.NET will continue to be supported, but will be moving out of the platform and into a separate package. However, since the integration is then designed to sit on top of the platform, it will also allow customers to update Json.NET to later versions.\r\n\r\nFurthermore, customers who need more performance can also choose to use the new JSON APIs, at the expense of the rich feature set that Json.NET offers.\r\n\r\n## Discussion\r\n\r\nFor a discussion, please go to https://github.com/dotnet/corefx/issues/33115.","Url":"https://github.com/dotnet/announcements/issues/90","RelatedDescription":"Open issue \"The future of JSON in .NET Core 3.0\" (#90)"},{"Id":"368440353","IsPullRequest":false,"CreatedAt":"2018-10-09T23:44:06","Actor":"vivmishra","Number":"89","RawContent":null,"Title":"October 2018 .NET Updates","State":"open","Body":"# October 2018 .NET Updates\r\n\r\nThe following .NET updates were released in October 2018. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Core\r\n\r\n* [.NET Core October 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/10/09/net-core-october-2018-update-net-core-1-0-and-1-1/)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n* [September 2018](https://github.com/dotnet/announcements/issues/84)\r\n* [August 2018](https://github.com/dotnet/announcements/issues/79)\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)","Url":"https://github.com/dotnet/announcements/issues/89","RelatedDescription":"Open issue \"October 2018 .NET Updates\" (#89)"},{"Id":"368429033","IsPullRequest":false,"CreatedAt":"2018-10-09T22:51:18","Actor":"leecow","Number":"88","RawContent":null,"Title":"Microsoft Security Advisory CVE-2018-8292: .NET Core Information Disclosure Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-8292: .NET Core Information Disclosure Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a security feature bypass vulnerability that exists when .NET Core when HTTP authentication information is inadvertently exposed in an outbound request that encounters an HTTP redirect. An attacker who successfully exploited this vulnerability could use the information to further compromise the web application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core applications handles HTTP redirects.\r\n\r\nSystem administrators running .NET Core 1.0 or .NET Core 1.1 applications must update their .NET Core runtimes to versions 1.0.13 and 1.1.10 then restart their applications. If installed applications target .NET Core 2.0, the applications must be migrated to 2.1 or newer and redeployed.\r\n\r\nDevelopers must update their .NET Core SDK to versions 1.1.11 and migrate any [.NET Core 2.0](https://docs.microsoft.com/dotnet/core/migration/20-21) or [ASP.NET Core 2.0](https://docs.microsoft.com/aspnet/core/migration/20_21?view=aspnetcore-2.1) applications to 2.1 then redeploy.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at <https://github.com/dotnet/corefx/issues/32730>\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nNone\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core application that runs on a .NET Core 1.0.x runtime with a version number of 1.0.12 or lower, or a .NET Core application that runs on a .NET Core 1.1.x runtime with a version number of 1.1.9 or lower, or a .NET Core application that runs on a .NET Core 2.0.x runtime.\r\n\r\nAdditionally package authors should check their dependencies to ensure they aren't depending on a vulnerable version of the following package:\r\n\r\n<a name=\"package-list\"></a>Package name | Vulnerable versions | Secure versions\r\n------------ | ---------------- | -------------------------\r\nSystem.Net.Http| 2.0.20126.16343, 2.0.20505, 2.0.20710, 4.0.0, 4.1.0, 4.1.1, 4.1.2, 4.3.0, 4.3.1, 4.3.2, 4.3.3 |  4.3.4 or later\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nAny .NET Core application that runs on a .NET Core 1.0.x runtime with a version number of 1.0.12 or lower, or a .NET Core application that runs on a .NET Core 1.1.x runtime with a version number of 1.1.9 or lower, or a .NET Core application that runs on a .NET Core 2.0.x runtime.\r\n\r\nTo check the currently installed runtimes and SDKs with version 2.1 or later of .NET Core, open a command prompt and run the `dotnet --info` command. You should see an output similar to the following:\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.1.403\r\n Commit:    04e15494b6\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17763\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.403\\\r\n\r\nHost (useful for support):\r\n  Version: 2.1.5\r\n  Commit:  290303f510\r\n\r\n.NET Core SDKs installed:\r\n  1.0.4 [C:\\Program Files\\dotnet\\sdk]\r\n  1.1.10 [C:\\Program Files\\dotnet\\sdk]\r\n  2.0.3 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.4 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf you don't see a runtime entry for 1.0.13 or 1.1.10, any .NET Core 1.x applications run on that computer are vulnerable.\r\n\r\nIf you don't have a 2.1 version of the runtime or SDK installed, you can produce the complete list of runtimes by performing a directory listing in the install root directories. The default root directories are listed in the following table:\r\n\r\n| Operating System | Location |\r\n|------------------|----------|\r\n| Windows | `C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\` |\r\n| macOS | `/usr/local/share/dotnet/shared/Microsoft.NETCore.App/` |\r\n| Supported Linux platforms | `/usr/share/dotnet/shared/Microsoft.NETCore.App/` |\r\n\r\nEach runtime version is installed in its own directory, where the directory name is the version number. If you don't have a directory for 1.0.13, 1.1.10 then any application targeting versions 1.0 or 1.1 are vulnerable.\r\n\r\nAdditionally, if you've deployed [self-contained applications](https://docs.microsoft.com/dotnet/core/deploying/#self-contained-deployments-scd) targeting any of the impacted versions, these applications are also vulnerable and must be recompiled and redeployed.\r\n\r\n### <a name=\"fix-runtime\">How do I fix the vulnerability?\r\n\r\nSystem administrators are advised to update their .NET Core runtimes to versions 1.0.13, 1.1.10 and install the latest 2.1 runtime, ensuring that any 2.0 applications are migrated to 2.1 as soon as possible.\r\n\r\n Developers are advised to update their .NET Core SDK to versions 1.1.11 and migrate any [.NET Core](https://docs.microsoft.com/dotnet/core/migration/20-21) or [ASP.NET Core 2.0](https://docs.microsoft.com/aspnet/core/migration/20_21?view=aspnetcore-2.1) applications to 2.1 and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at <https://github.com/dotnet/> and <https://github.com/aspnet/>, respectively. The Announcements repo for each product (<https://github.com/dotnet/Announcements> and <https://github.com/aspnet/Announcements>) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2018-8292](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-CVE-2018-8292)\r\n\r\n### Revisions\r\n\r\nV1.0 (October 10, 2018): Advisory published.\r\n_Version 1.0_\r\n_Last Updated 2018-10-10_\r\n","Url":"https://github.com/dotnet/announcements/issues/88","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2018-8292: .NET Core Information Disclosure Vulnerability\" (#88)"},{"Id":"367393517","IsPullRequest":false,"CreatedAt":"2018-10-05T22:58:51","Actor":"leecow","Number":"87","RawContent":null,"Title":".NET Core Release Data (releases.json) Redesign and v1 Deprecation Plan","State":"open","Body":"# .NET Core Release Data (releases.json) Redesign and Deprecation\r\n\r\nThe releases.json and releases.csv files began life as helper tools for some of our internal release work, some experimentation and to possibly be useful to the community. It has been great to learn the files are indeed in use and many folks depend on them as a trigger for a number of activities.\r\n\r\n* [release-notes/releases.json](https://github.com/dotnet/core/blob/master/release-notes/releases.json)\r\n* [release-notes/releases.csv](https://github.com/dotnet/core/blob/master/release-notes/releases.csv)\r\n\r\nA discussion topic is available to share thoughts and see what others are thinking at https://github.com/dotnet/core/issues/1986\r\n\r\nBetween the usages which we have become aware and in considering further activities that could be enabled to reason about things such as checking .NET Core version availability and support status, it became clear the current format is inadequate.\r\n\r\nAn updated format has been designed and tested which will replace the current files. The timeline below describes the path to obsoleting the current files.\r\n\r\n## The Plan\r\n\r\n| Date | Action |\r\n| :--- | :----- |\r\n| Oct 2018 | Notify the community of the coming change |\r\n| Oct 2018 | Release the new json format into dotnet/core |\r\n| Oct 2018 - Feb 2019 | Maintain the old json and csv files |\r\n| Feb 2019 | Reminder announcement that old format file is coming soon |\r\n| Mar 2019 | Old json and csv files are obsoleted and removed from dotnet/core |\r\n\r\n## Breaking change\r\n\r\nIf you are currently utilizing the old version json or csv, you will need to update the relevant code to work with the new format. If you are just getting started with consuming this data, use the new version.\r\n\r\n## The Format\r\n\r\nBelow are fragments of the files from our most recent .NET Core release.\r\n\r\n### release-index.json\r\n\r\nThis file consists of a top level array with data on the latest release versions and a property for locating the more detailed channel-specific releases.json. This file is found in [dotnet/core/release-notes](https://github.com/dotnet/core/tree/new-json/release-notes/)\r\n\r\n[releases-index.json](https://github.com/dotnet/core/blob/new-json/release-notes/releases-index.json)\r\n\r\n```\r\n{\r\n    \"releases-index\": [\r\n        {\r\n            \"channel-version\": \"2.1\",\r\n            \"latest-release\": \"2.1.5\",\r\n            \"latest-release-date\":\"2018-10-02\",\r\n            \"product\": \".NET Core\",\r\n            \"support-phase\": \"lts\",\r\n            \"eol-date\": \"\",\r\n            \"releases.json\": \"https://github.com/dotnet/core/blob/master/release-notes/2.1/releases.json\",\r\n        },\r\n        ...\r\n}\r\n```\r\n\r\n### releases.json\r\n\r\nThis file provides detailed data for each release. A copy of this file will be found in each versioned directories under [dotnet/core/release-notes](https://github.com/dotnet/core/release-notes). For example [dotnet/core/release-notes/2.1](https://github.com/dotnet/core/tree/new-json/release-notes/2.1)\r\n\r\n\r\n[releases.json](https://github.com/dotnet/core/tree/new-json/release-notes/2.1/releases.json)\r\n\r\n```\r\n{\r\n    \"channel-version\": \"2.1\",\r\n    \"latest-release\": \"2.1.5\",\r\n    \"latest-release-date\":\"2018-10-12\",\r\n    \"support-phase\": \"lts\",\r\n    \"eol-date\": \"\",\r\n    \"lifecycle-policy\": \"https://www.microsoft.com/net/support/policy\",\r\n    \"releases\":\r\n    [\r\n        {\r\n            \"release-date\":  \"2018-10-02\",\r\n            \"release-version\":  \"2.1.5\",\r\n            \"security\":  false,\r\n            \"release-notes\":  \"https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.5/2.1.5.md\",\r\n            \"runtime\":  \r\n            {\r\n                \"version\":  \"2.1.5\",\r\n                \"version-display\":  \"2.1.5\",\r\n                \"vs-version\":  \"15.8.6\",\r\n                \"files\":  \r\n                [\r\n                    {\r\n                        \"name\": \"dotnet-runtime-linux-arm.tar.gz\",\r\n                        \"url\": \"https://download.visualstudio.microsoft.com/download/pr/4d555219-1f04-47c6-90e5-8b3ff8989b9c/0798763e6e4b98a62846116f997d046e/dotnet-runtime-2.1.5-linux-arm.tar.gz\",\r\n                        \"hash\": \"89a77a07065ea24e7198c77a233b9ce5c6cf51b1deb2ef55c88f0adbb2ecd9db1ba4e7d55eec2ef7139c47f91346fed360161a5bb6e3a7ccfc4559bcde286364\"\r\n                    },\r\n                    ...\r\n                ]\r\n            }\r\n            \"sdk\":  \r\n            {\r\n                \"version\":  \"2.1.403\",\r\n                \"version-display\":  \"2.1.403\",\r\n                \"vs-version\":  \"15.8.6\",\r\n                \"csharp-language\":  \"7.3\",\r\n                \"fsharp-language\":  \"4.5\",\r\n                \"files\":  \r\n                [...]\r\n            }\r\n        }\r\n    ]\r\n}\r\n```","Url":"https://github.com/dotnet/announcements/issues/87","RelatedDescription":"Open issue \".NET Core Release Data (releases.json) Redesign and v1 Deprecation Plan\" (#87)"},{"Id":"366416503","IsPullRequest":false,"CreatedAt":"2018-10-03T16:11:18","Actor":"leecow","Number":"86","RawContent":null,"Title":".NET Core 2.0 has reached end of life","State":"open","Body":"[.NET Core 2.0 reached end of life](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/) on October 1, 2018. This means [.NET Core 2.0](https://blogs.msdn.microsoft.com/dotnet/2017/08/14/announcing-net-core-2-0/) is no longer supported and updates will no longer be provided. We recommend moving to [.NET Core 2.1](https://blogs.msdn.microsoft.com/dotnet/2018/05/30/announcing-net-core-2-1/), our long term support (LTS) release.\r\n\r\n- [Download .NET Core 2.1](https://www.microsoft.com/net/download/dotnet-core/2.1)\r\n- [.NET Core 2.1 LTS statement](https://blogs.msdn.microsoft.com/dotnet/2018/08/21/net-core-august-2018-update/)\r\n- [.NET Core 2.0 end-of-life statement](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/)\r\n\r\n## Discussion\r\n\r\nPlease share you thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet/core#1983](https://github.com/dotnet/core/issues/1983)\r\n\r\n## Lifecycle Context\r\n\r\n.NET Core releases belong to one of two [support lifecycles](https://www.microsoft.com/net/platform/support-policy): long term support (LTS) and Current. LTS releases are stable release which receive critical updates and are supported for at least three years. Current releases can include new features that may undergo future change based on feedback. Current releases are supported for three months after the subsequent .NET Core major or minor release. Both LTS and Current releases receive critical fixes throughout their lifecycle, for security, reliability, or to add support for new operating system versions. You must stay up-to-date with the latest patches to qualify for support. \r\n\r\n## .NET Core 2.0 Lifecycle\r\n\r\n[.NET Core 2.0](https://blogs.msdn.microsoft.com/dotnet/2017/08/14/announcing-net-core-2-0/) was released in August 2017 as a Current release. Per the lifecycle policy, Current releases reach end of life 3 months after a subsequent release (Current or LTS). .NET Core 2.1 released May 2018 and began the end of life countdown for .NET Core 2.0. The 3 month maintenance period for .NET Core 2.0 was scheduled to end August 2018 but was [extended to October](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/) to allow time to address an issue some customers were experiencing while migrating to .NET Core 2.1.\r\n\r\n## .NET Core 2.0 Downloads\r\n\r\n.NET Core 2.0 installers, zips and tar.gzs will remain available, but unsupported. This includes existing releases available on Linux package feeds. Previous versions, including 2.0, will be accessible through the [Download Archives](https://www.microsoft.com/net/download/archives). \r\n\r\n## .NET Core 2.0 Docker Images\r\n\r\n.NET Core 2.0 will be removed from the .NET and ASP.NET Docker repo READMEs, however the existing images remain available in those repos.\r\n\r\n* [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/)\r\n* [microsoft/dotnet-nightly](https://hub.docker.com/r/microsoft/dotnet-nightly/)\r\n* [microsoft/aspnetcore](https://hub.docker.com/r/microsoft/aspnetcore/)\r\n* [microsoft/aspnetcore-build](https://hub.docker.com/r/microsoft/aspnetcore-build/)\r\n\r\n## Policy Information\r\n\r\nAdditional lifecycle and support details  and background can be seen in the following:\r\n\r\n* [.NET Core Support Lifecycle](https://www.microsoft.com/net/platform/support-policy)\r\n* [Support and Versioning](https://blogs.msdn.microsoft.com/dotnet/2016/07/26/net-support-and-versioning/)\r\n* [2.0 end of life early announcement](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n","Url":"https://github.com/dotnet/announcements/issues/86","RelatedDescription":"Open issue \".NET Core 2.0 has reached end of life\" (#86)"},{"Id":"361098704","IsPullRequest":false,"CreatedAt":"2018-09-18T01:10:23","Actor":"spshant","Number":"85","RawContent":null,"Title":"NET Framework 4.8 Early Access build 3646 is available!","State":"open","Body":"Today, we are happy to share an Early Access build for the .NET Framework 4.8. This includes an updated .NET 4.8 runtime as well as the .NET 4.8 Developer Pack (a a single package that bundles the .NET Framework 4.8 runtime, the .NET 4.8 Targeting Pack, and the .NET Framework 4.8 SDK). \r\n\r\nPlease help us ensure this is a high quality and compatible release by trying out this build and exploring the new features. \r\n\r\n**Next steps:**\r\nTo explore the new features, download the [.NET 4.8 Developer Pack build 3646](https://go.microsoft.com/fwlink/?LinkId=2018486).  Instead, if you want to try just the .NET 4.8 runtime, you can download either of these:\r\n•\t[.NET 4.8 Web Installer](https://go.microsoft.com/fwlink/?LinkId=2018525) - requires an internet connection during installation \r\n•\t[.NET 4.8 Offline installer](https://go.microsoft.com/fwlink/?LinkId=2018531) - can be downloaded and installed later in a disconnected state\r\n\r\nPlease provide your feedback by [reporting an issue at the .NET Framework Early Access GitHub repository](https://github.com/Microsoft/dotnet-framework-early-access/issues/new).\r\n\r\n**Note**: this release is still under development, you can expect to see more features and fixes in future preview builds. Also, a reminder that this build is not supported for production use.\r\n\r\nThis preview build 3646 includes improvements/fixes in the following areas:\r\n•\t**[Runtime]** JIT and NGEN improvements\r\n•\t**[Windows Forms]** Accessibility enhancements\r\n•\t**[WPF]** SelectionTextBrush Property\r\n•\t**[BCL]** Updated ZLib\r\n\r\nYou can see the complete list of improvements in this build [here](https://github.com/Microsoft/dotnet-framework-early-access/blob/master/release-notes/NET48/build-3646/changes.md).\r\n\r\n.NET Framework build 3646 is also included in the next update for Windows 10. You can sign up for [Windows Insiders](https://insider.windows.com/en-us/) to validate that your applications work great on the latest .NET Framework included in the latest Windows 10 releases.\r\n","Url":"https://github.com/dotnet/announcements/issues/85","RelatedDescription":"Open issue \"NET Framework 4.8 Early Access build 3646 is available!\" (#85)"},{"Id":"359151445","IsPullRequest":false,"CreatedAt":"2018-09-11T17:44:50","Actor":"leecow","Number":"84","RawContent":null,"Title":"September 2018 .NET Updates","State":"open","Body":"# September 2018 .NET Updates\r\n\r\nThe following .NET updates were released in September 2018. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Framework\r\n* [.NET Framework September 2018 Security and Quality Rollup - September 11, 2018](https://blogs.msdn.microsoft.com/dotnet/2018/09/11/net-framework-september-2018-security-and-quality-rollup/)\r\n\r\n## .NET Core\r\n\r\n* [.NET Core September 2018 Update - September 11, 2018](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.4/2.1.4.md)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n\r\n* [August 2018](https://github.com/dotnet/announcements/issues/79)\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)","Url":"https://github.com/dotnet/announcements/issues/84","RelatedDescription":"Open issue \"September 2018 .NET Updates\" (#84)"},{"Id":"359136325","IsPullRequest":false,"CreatedAt":"2018-09-11T17:00:55","Actor":"blowdart","Number":"83","RawContent":null,"Title":"Microsoft Security Advisory CVE-2018-8409: .NET Core Denial Of Service Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-8409: .NET Core Denial Of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a denial of service vulnerability in .NET Core when System.IO.Pipelines improperly handles requests. An attacker who successfully exploited this vulnerability could cause a denial of service against an application that is leveraging System.IO.Pipelines. The vulnerability can be exploited remotely, without authentication. A remote unauthenticated attacker could exploit this vulnerability by providing specially crafted requests to the application.\r\n\r\nThe update addresses the vulnerability by correcting how System.IO.Pipelines handles requests.\r\n\r\nIf you are using ASP.NET Core 2.1 you will also need to update your ASP.NET version this by following the instructions in the [ASP.NET Core bulletin](https://github.com/aspnet/Announcements/issues/316).\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/32228\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nThere are no mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the System.IO.Pipelines package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.IO.Pipelines | 4.5.0 | 4.5.1\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n#### Applications which use System.IO.Pipelines\r\n\r\nSystem.IO.Pipelines is distributed both in ASP.NET Core 2.1 and separately as a NuGet package. If you are not using Microsoft.AspNetCore.App or .All, you may still be affected if you are referencing the System.IO.Pipelines package.\r\n\r\n##### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file. They can be fixed by [editing the project file](#fixing-direct-dependencies) or using NuGet to update the dependency.\r\n\r\n##### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects\r\n\r\nThe `project.assets.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json)).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `System.IO.Pipelines/4.5.0` is a reference to version 4.5.0 of `System.IO.Pipelines`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\n#### <a name=\"fixing-direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.IO.Pipelines\" Version=\"4.5.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.IO.Pipelines` version 4.5.0\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.IO.Pipelines` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.IO.Pipelines\" Version=\"4.5.1\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"transitive-dependencies\"></a>Fixing transitive dependencies\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.IO.Pipelines\" Version=\"4.5.1\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n#### Rebuilding your application\r\n\r\nFinally you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2018-8409](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-CVE-2018-8409)\r\n\r\n### Revisions\r\n\r\nV1.0 (September 11, 2018): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2018-09-11_\r\n","Url":"https://github.com/dotnet/announcements/issues/83","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2018-8409: .NET Core Denial Of Service Vulnerability\" (#83)"},{"Id":"357399856","IsPullRequest":false,"CreatedAt":"2018-09-05T20:56:25","Actor":"richlander","Number":"82","RawContent":null,"Title":".NET Core Runtime ARM64 Status","State":"open","Body":"# .NET Core Runtime ARM64 Status\r\n\r\nThe .NET Core team is in the process of adding support for ARM64, as part of the .NET Core 3.0 project. This issue will be updated as ARM64 support progresses.\r\n\r\n[.NET Core 3.0 Preview 1](https://github.com/dotnet/core/issues/2099) includes support for Linux ARM64. Please try this build and provide support.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet/coreclr #19843](https://github.com/dotnet/coreclr/issues/19843)\r\n\r\n## Current Status\r\n\r\nARM64 builds are functional, for console and ASP.NET Core apps.\r\n\r\n## Details\r\n\r\nInitial support for ARM64 was added in the .NET Core 2.1 release. The team is not maintaining .NET Core 2.x branches with respect to ARM64. All ARM64 improvements will be made in the .NET Core 3.0 branch (currently [master](https://github.com/dotnet/coreclr)).\r\n\r\nSee [Installing .NET Core 3.0 on Linux ARM64](https://gist.github.com/richlander/467813274cea8abc624553ee72b28213) to install .NET Core on your ARM64 machine. Builds are available from the [daily builds page](https://github.com/dotnet/core/blob/master/daily-builds.md).\r\n\r\n## Bug Queries\r\n\r\nthe following bugs queries are available for ARM64:\r\n\r\n* [dotnet/coreclr](https://github.com/dotnet/coreclr/issues?q=is%3Aopen+is%3Aissue+label%3Aarch-arm64)\r\n* [dotnet/corefx](https://github.com/dotnet/corefx/issues?q=is%3Aopen+is%3Aissue+label%3Aarch-arm64)\r\n\r\n## Operating Systems\r\n\r\n.NET Core 3.0 ARM64 builds are tested on the following operating systems:\r\n\r\n* Ubuntu 16.04 and 18.04\r\n* Debian 9\r\n\r\n## Test Hardware\r\n\r\n.NET Core 3.0 ARM64 builds have been tested on the following hardware:\r\n\r\n* [NVIDIA Jetson TX2 Module](https://developer.nvidia.com/embedded/buy/jetson-tx2)\r\n* [Pine A64](https://www.pine64.org/?page_id=46823)\r\n* [Qualcomm Centriq 2400](https://www.qualcomm.com/products/qualcomm-centriq-2400-processor)\r\n* [Qualcomm Snapdragon](https://www.qualcomm.com/snapdragon/always-connected-pc)\r\n* [Raspberry Pi3](https://www.raspberrypi.org/products/raspberry-pi-3-model-b-plus/)","Url":"https://github.com/dotnet/announcements/issues/82","RelatedDescription":"Open issue \".NET Core Runtime ARM64 Status\" (#82)"},{"Id":"349693735","IsPullRequest":false,"CreatedAt":"2018-08-22T18:23:01","Actor":"richlander","Number":"80","RawContent":null,"Title":"Improving Performance of ARM32 Docker Images with .NET Core Package Cache","State":"closed","Body":"# Improving Performance of ARM32 Docker Images with .NET Core Package Cache\r\n\r\n.NET Core SDK distributions include a compressed copy of NuGet packages for .NET Core, ASP.NET Core and EF Core. These packages are decompressed upon installation of the .NET Core SDK. The packages are not currently included in ARM32 distributions due to the time and space cost to decompress the packages. Instead, they will be added to [.NET Core ARM32 Docker images](https://hub.docker.com/r/microsoft/dotnet/), where these costs can be paid as part of image creation.\r\n\r\nThese NuGet packages include content for two purposes:\r\n\r\n- Reference assemblies for .NET Core, for code compilation.\r\n- Pre-compiled assemblies (compiled with [crossgen](https://github.com/dotnet/coreclr/blob/master/Documentation/building/crossgen.md)) for .NET Core, for use in self-contained applications.\r\n\r\nIn both cases, the presence of these packages avoid the need to access remote NuGet feeds for .NET Core assemblies as part of package restore.\r\n\r\nThis change only affects [.NET Core 2.1 SDK ARM32 Docker images](https://hub.docker.com/r/microsoft/dotnet/). This change will be made in August 2018.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet/dotnet-docker #653](https://github.com/dotnet/dotnet-docker/issues/653)\r\n\r\n## .NET Core SDK NugetFallbackFolder\r\n\r\nThe .NET Core SDK includes a compressed copy of all NuGet package, in LZMA format. It exists at the following version-specific location:\r\n\r\n```\r\nroot@3778032bc43d:/# ls -l /usr/share/dotnet/sdk/2.1.302/*.lzma\r\n-rw-r--r-- 1 1004 sudo 35995936 Jul  2 22:51 /usr/share/dotnet/sdk/2.1.302/nuGetPackagesArchive.lzma\r\n```\r\n\r\nThis file is decompressed to the following location: `/usr/share/dotnet/sdk/NuGetFallbackFolder/`\r\n\r\nA package restore for a .NET Core assembly will restore the assembly from the NuGetFallbackFolder location and copy it to the user NuGet cache. At that point, regular NuGet behavior is used.\r\n\r\n## Impact of this change\r\n\r\nThere should be no functional difference in behavior after this change. .NET SDK commands should complete faster and require fewer package restore network requests.\r\n\r\nThe following examples demonstrates the benefit of this change. The improvement can be observed with package restore. Build times (assuming no restore) are not affected.\r\n\r\n### .NET Core 2.1 SDK image after this change\r\n\r\n> The change has already been made in the `microsoft/dotnet-nightly` repo, as you can see in the example below. In August, this same change will be made available in the `microsoft/dotnet` repo.\r\n\r\n```console\r\npi@raspberrypi:~ $ docker run -it --rm microsoft/dotnet-nightly:2.1-sdk\r\nroot@416731f24915:/# time dotnet new mvc -o mvcapp\r\nGetting ready...\r\nThe template \"ASP.NET Core Web App (Model-View-Controller)\" was created successfully.\r\nThis template contains technologies from parties other than Microsoft, see https://aka.ms/aspnetcore-template-3pn-210 for details.\r\n\r\nProcessing post-creation actions...\r\nRunning 'dotnet restore' on mvcapp/mvcapp.csproj...\r\n  Restoring packages for /mvcapp/mvcapp.csproj...\r\n  Generating MSBuild file /mvcapp/obj/mvcapp.csproj.nuget.g.props.\r\n  Generating MSBuild file /mvcapp/obj/mvcapp.csproj.nuget.g.targets.\r\n  Restore completed in 6.68 sec for /mvcapp/mvcapp.csproj.\r\n\r\nRestore succeeded.\r\n\r\n\r\nreal    0m32.496s\r\nuser    0m35.820s\r\nsys     0m4.280s\r\nroot@416731f24915:/# cd mvcapp/\r\nroot@416731f24915:/mvcapp# time dotnet build\r\nMicrosoft (R) Build Engine version 15.8.138-preview+ge0cd4f1c1f for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  Restore completed in 524.78 ms for /mvcapp/mvcapp.csproj.\r\n/usr/share/dotnet/sdk/2.1.401-preview-009081/Sdks/Microsoft.NET.Sdk/targets/Microsoft.NET.RuntimeIdentifierInference.targets(143,5): message NETSDK1057: You are working with a preview version of the .NET Core SDK. You can define the SDK version via a global.json file in the current project. More at https://go.microsoft.com/fwlink/?linkid=869452 [/mvcapp/mvcapp.csproj]\r\n  mvcapp -> /mvcapp/bin/Debug/netcoreapp2.1/mvcapp.dll\r\n  mvcapp -> /mvcapp/bin/Debug/netcoreapp2.1/mvcapp.Views.dll\r\n\r\nBuild succeeded.\r\n    0 Warning(s)\r\n    0 Error(s)\r\n\r\nTime Elapsed 00:02:09.15\r\n\r\nreal    2m13.377s\r\nuser    1m25.260s\r\nsys     0m9.420s\r\nroot@416731f24915:/mvcapp#\r\n```\r\n\r\n### .NET Core 2.1 SDK image before this change\r\n\r\n```console\r\npi@raspberrypi:~ $ docker run -it --rm microsoft/dotnet:2.1-sdk\r\nroot@9d1d5e45df6a:/# time dotnet new mvc -o mvcapp\r\nGetting ready...\r\nThe template \"ASP.NET Core Web App (Model-View-Controller)\" was created successfully.\r\nThis template contains technologies from parties other than Microsoft, see https://aka.ms/aspnetcore-template-3pn-210 for details.\r\n\r\nProcessing post-creation actions...\r\nRunning 'dotnet restore' on mvcapp/mvcapp.csproj...\r\n  Restoring packages for /mvcapp/mvcapp.csproj...\r\n  Installing System.Xml.XmlSerializer 4.3.0.\r\n  Installing System.Threading.Tasks.Extensions 4.0.0.\r\n  Installing System.Globalization.Extensions 4.0.1.\r\n  Installing runtime.native.System.Security.Cryptography 4.0.0.\r\n  Installing System.Security.Cryptography.OpenSsl 4.0.0.\r\n  Installing System.Security.Cryptography.Cng 4.2.0.\r\n  Installing System.Security.Cryptography.Csp 4.0.0.\r\n  Installing runtime.native.System.Net.Http 4.0.1.\r\n  Installing runtime.native.System 4.0.0.\r\n  Installing runtime.native.System.IO.Compression 4.1.0.\r\n  Installing System.Buffers 4.0.0.\r\n  Installing System.Private.DataContractSerialization 4.3.0.\r\n  Installing System.Security.Principal 4.3.0.\r\n  Installing runtime.osx.10.10-x64.runtime.native.System.Security.Cryptography.Apple 4.3.0.\r\n  Installing runtime.rhel.7-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing runtime.ubuntu.14.04-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing runtime.opensuse.42.1-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.NETCore.App 2.1.0.\r\n  Installing runtime.ubuntu.16.10-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.AspNetCore.App 2.1.1.\r\n  Installing runtime.ubuntu.16.04-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.NETCore.Platforms 2.1.0.\r\n  Installing Microsoft.NETCore.Targets 2.1.0.\r\n  Installing NETStandard.Library 2.0.3.\r\n  Installing Microsoft.NETCore.DotNetHostPolicy 2.1.0.\r\n  Installing Microsoft.AspNetCore 2.1.1.\r\n  Installing Microsoft.AspNetCore.Antiforgery 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Localization 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Session 2.1.1.\r\n  Installing Microsoft.AspNetCore.SpaServices 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.KeyPerFile 2.1.1.\r\n  Installing Microsoft.Extensions.FileProviders.Abstractions 2.1.1.\r\n  Installing Microsoft.Extensions.Hosting 2.1.1.\r\n  Installing Microsoft.Extensions.FileProviders.Embedded 2.1.1.\r\n  Installing Microsoft.Extensions.FileProviders.Physical 2.1.1.\r\n  Installing Microsoft.Extensions.Localization 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.Cookies 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.Core 2.1.1.\r\n  Installing runtime.osx.10.10-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.AspNetCore.Authentication.Google 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.Facebook 2.1.1.\r\n  Installing Microsoft.Extensions.Hosting.Abstractions 2.1.1.\r\n  Installing runtime.opensuse.13.2-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.AspNetCore.HttpsPolicy 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.MicrosoftAccount 2.1.1.\r\n  Installing Microsoft.Extensions.Http 2.1.1.\r\n  Installing Microsoft.AspNetCore.MiddlewareAnalysis 2.1.1.\r\n  Installing Microsoft.Extensions.FileSystemGlobbing 2.1.1.\r\n  Installing Microsoft.Extensions.DiagnosticAdapter 2.1.0.\r\n  Installing Microsoft.Extensions.Identity.Core 2.1.1.\r\n  Installing Microsoft.Extensions.Identity.Stores 2.1.1.\r\n  Installing Microsoft.Extensions.Options.ConfigurationExtensions 2.1.1.\r\n  Installing Microsoft.Extensions.Localization.Abstractions 2.1.1.\r\n  Installing Microsoft.Extensions.Logging.Abstractions 2.1.1.\r\n  Installing runtime.fedora.24-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.Extensions.Options 2.1.1.\r\n  Installing Microsoft.Extensions.FileProviders.Composite 2.1.1.\r\n  Installing Microsoft.Extensions.Logging 2.1.1.\r\n  Installing Microsoft.Extensions.Logging.Configuration 2.1.1.\r\n  Installing Microsoft.Extensions.Logging.TraceSource 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.UserSecrets 2.1.1.\r\n  Installing Microsoft.Extensions.Logging.Debug 2.1.1.\r\n  Installing Microsoft.Extensions.Logging.Console 2.1.1.\r\n  Installing Microsoft.Extensions.DependencyInjection 2.1.1.\r\n  Installing Microsoft.Extensions.ObjectPool 2.1.1.\r\n  Installing runtime.debian.8-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.Extensions.DependencyInjection.Abstractions 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.Binder 2.1.1.\r\n  Installing runtime.fedora.23-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.Extensions.Configuration.EnvironmentVariables 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.FileExtensions 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.Abstractions 2.1.1.\r\n  Installing Microsoft.Extensions.Caching.Memory 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.CommandLine 2.1.1.\r\n  Installing Microsoft.Extensions.Caching.Abstractions 2.1.1.\r\n  Installing Microsoft.Net.Http.Headers 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.InMemory 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.Abstractions 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.Ini 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.Analyzers 2.1.1.\r\n  Installing Microsoft.AspNetCore.StaticFiles 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.Relational 2.1.1.\r\n  Installing Microsoft.AspNetCore.Server.Kestrel.Https 2.1.1.\r\n  Installing Microsoft.Extensions.Primitives 2.1.1.\r\n  Installing Microsoft.AspNetCore.SpaServices.Extensions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Server.Kestrel 2.1.1.\r\n  Installing Microsoft.Extensions.WebEncoders 2.1.1.\r\n  Installing Microsoft.AspNetCore.WebUtilities 2.1.1.\r\n  Installing Microsoft.AspNetCore.SignalR 1.0.1.\r\n  Installing Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets 2.1.1.\r\n  Installing Microsoft.AspNetCore.Routing 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.Tools 2.1.1.\r\n  Installing Microsoft.AspNetCore.Routing.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Rewrite 2.1.1.\r\n  Installing Microsoft.AspNetCore.ResponseCaching.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Server.Kestrel.Transport.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.ResponseCaching 2.1.1.\r\n  Installing Microsoft.AspNetCore.ResponseCompression 2.1.1.\r\n  Installing System.Globalization.Extensions 4.3.0.\r\n  Installing Microsoft.AspNetCore.Razor.Language 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.TagHelpers 2.1.1.\r\n  Installing Microsoft.AspNetCore.Razor.Runtime 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.RazorPages 2.1.1.\r\n  Installing Microsoft.AspNetCore.Owin 2.1.1.\r\n  Installing Microsoft.AspNetCore.Razor 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Razor.Extensions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Razor.ViewCompilation 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Analyzers 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Localization 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Formatters.Json 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.Design 2.1.1.\r\n  Installing Microsoft.AspNetCore.WebSockets 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Cors 2.1.1.\r\n  Installing System.Diagnostics.DiagnosticSource 4.3.0.\r\n  Installing Microsoft.AspNetCore.Mvc.DataAnnotations 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.ApiExplorer 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Formatters.Xml 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc 2.1.1.\r\n  Installing Microsoft.Extensions.Logging.EventSource 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.OAuth 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.Json 2.1.1.\r\n  Installing Microsoft.AspNetCore.SignalR.Protocols.Json 1.0.1.\r\n  Installing Microsoft.AspNetCore.NodeServices 2.1.1.\r\n  Installing Microsoft.AspNetCore.SignalR.Common 1.0.1.\r\n  Installing Microsoft.AspNetCore.JsonPatch 2.1.1.\r\n  Installing Microsoft.AspNetCore.Localization.Routing 2.1.1.\r\n  Installing Microsoft.AspNetCore.Server.IISIntegration 2.1.1.\r\n  Installing Microsoft.AspNetCore.Identity.UI 2.1.1.\r\n  Installing Microsoft.AspNetCore.Razor.Design 2.1.1.\r\n  Installing Microsoft.AspNetCore.Identity.EntityFrameworkCore 2.1.1.\r\n  Installing Microsoft.AspNetCore.Http.Extensions 2.1.1.\r\n  Installing Microsoft.AspNetCore.HttpOverrides 2.1.1.\r\n  Installing Microsoft.AspNetCore.Identity 2.1.1.\r\n  Installing Microsoft.AspNetCore.Http.Features 2.1.1.\r\n  Installing Microsoft.AspNetCore.Http.Connections 1.0.1.\r\n  Installing Microsoft.AspNetCore.Http.Connections.Common 1.0.1.\r\n  Installing Microsoft.AspNetCore.Http 2.1.1.\r\n  Installing Microsoft.AspNetCore.Diagnostics.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Cors 2.1.1.\r\n  Installing Microsoft.AspNetCore.Hosting.Server.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Http.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.DataProtection.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Hosting.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Diagnostics.EntityFrameworkCore 2.1.1.\r\n  Installing Microsoft.AspNetCore.Cryptography.Internal 2.1.1.\r\n  Installing Microsoft.AspNetCore.Cryptography.KeyDerivation 2.1.1.\r\n  Installing Microsoft.AspNetCore.DataProtection.Extensions 2.1.1.\r\n  Installing Microsoft.AspNetCore.HostFiltering 2.1.1.\r\n  Installing Microsoft.CSharp 4.0.1.\r\n  Installing Microsoft.AspNetCore.CookiePolicy 2.1.1.\r\n  Installing Microsoft.AspNetCore.Server.Kestrel.Core 2.1.1.\r\n  Installing Microsoft.AspNetCore.Html.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.Twitter 2.1.1.\r\n  Installing Microsoft.AspNetCore.Connections.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authorization.Policy 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authorization 2.1.1.\r\n  Installing Microsoft.AspNetCore.Diagnostics 2.1.1.\r\n  Installing Microsoft.AspNetCore.Server.HttpSys 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.Xml 2.1.1.\r\n  Installing Microsoft.AspNetCore.Hosting 2.1.1.\r\n  Installing Microsoft.AspNetCore.DataProtection 2.1.1.\r\n  Installing Microsoft.Extensions.Caching.SqlServer 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.SqlServer 2.1.1.\r\n  Installing Microsoft.AspNet.WebApi.Client 5.2.6.\r\n  Installing Microsoft.AspNetCore.SignalR.Core 1.0.1.\r\n  Installing Microsoft.AspNetCore.Mvc.ViewFeatures 2.1.1.\r\n  Installing Microsoft.CodeAnalysis.Razor 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.JwtBearer 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.OpenIdConnect 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Razor 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.WsFederation 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore 2.1.1.\r\n  Installing System.Runtime.Serialization.Primitives 4.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Core 2.1.1.\r\n  Installing System.Xml.ReaderWriter 4.0.11.\r\n  Installing Microsoft.NETCore.DotNetHostResolver 2.1.0.\r\n  Installing System.Diagnostics.DiagnosticSource 4.5.0.\r\n  Installing System.ComponentModel.Annotations 4.5.0.\r\n  Installing System.Buffers 4.5.0.\r\n  Installing System.Memory 4.5.1.\r\n  Installing System.Runtime.CompilerServices.Unsafe 4.5.1.\r\n  Installing System.Text.Encodings.Web 4.5.0.\r\n  Installing Microsoft.CSharp 4.5.0.\r\n  Installing System.Net.WebSockets.WebSocketProtocol 4.5.1.\r\n  Installing Newtonsoft.Json 11.0.2.\r\n  Installing System.IO.Pipelines 4.5.0.\r\n  Installing System.Numerics.Vectors 4.5.0.\r\n  Installing System.Security.Principal.Windows 4.5.0.\r\n  Installing System.Threading.Tasks.Extensions 4.5.1.\r\n  Installing System.Security.Cryptography.Cng 4.5.0.\r\n  Installing System.Net.Http 4.1.0.\r\n  Installing System.Security.Cryptography.Xml 4.5.0.\r\n  Installing Microsoft.Win32.Registry 4.5.0.\r\n  Installing System.Reflection.Metadata 1.6.0.\r\n  Installing System.Data.SqlClient 4.5.1.\r\n  Installing Newtonsoft.Json.Bson 1.0.1.\r\n  Installing Newtonsoft.Json 10.0.1.\r\n  Installing System.Threading.Channels 4.5.0.\r\n  Installing System.Reflection.Emit 4.3.0.\r\n  Installing Microsoft.CodeAnalysis.CSharp 2.8.0.\r\n  Installing Microsoft.CodeAnalysis.Common 2.8.0.\r\n  Installing System.Security.Cryptography.Algorithms 4.2.0.\r\n  Installing Microsoft.IdentityModel.Protocols.OpenIdConnect 5.2.0.\r\n  Installing System.IdentityModel.Tokens.Jwt 5.2.0.\r\n  Installing Microsoft.IdentityModel.Protocols.WsFederation 5.2.0.\r\n  Installing System.Collections.Immutable 1.5.0.\r\n  Installing Remotion.Linq 2.2.0.\r\n  Installing System.Interactive.Async 3.1.1.\r\n  Installing Microsoft.Extensions.DependencyModel 2.1.0.\r\n  Installing Microsoft.NETCore.DotNetAppHost 2.1.0.\r\n  Installing Microsoft.NETCore.Platforms 2.0.0.\r\n  Installing System.Security.Cryptography.Pkcs 4.5.0.\r\n  Installing System.Security.Permissions 4.5.0.\r\n  Installing System.Security.AccessControl 4.5.0.\r\n  Installing NETStandard.Library 1.6.1.\r\n  Installing System.Text.Encoding.CodePages 4.5.0.\r\n  Installing System.Linq 4.3.0.\r\n  Installing runtime.native.System.Data.SqlClient.sni 4.4.0.\r\n  Installing System.Diagnostics.Debug 4.3.0.\r\n  Installing System.Globalization 4.3.0.\r\n  Installing System.IO 4.3.0.\r\n  Installing System.Collections 4.3.0.\r\n  Installing System.Runtime.Serialization.Primitives 4.3.0.\r\n  Installing System.Runtime.Serialization.Formatters 4.3.0.\r\n  Installing System.Xml.XmlDocument 4.3.0.\r\n  Installing System.Threading 4.3.0.\r\n  Installing System.Resources.ResourceManager 4.3.0.\r\n  Installing System.Text.Encoding.Extensions 4.3.0.\r\n  Installing System.Xml.XDocument 4.3.0.\r\n  Installing System.Threading.Tasks 4.3.0.\r\n  Installing System.Linq.Expressions 4.3.0.\r\n  Installing System.Runtime.Numerics 4.3.0.\r\n  Installing System.Text.Encoding 4.3.0.\r\n  Installing System.Reflection.Extensions 4.3.0.\r\n  Installing System.Text.RegularExpressions 4.3.0.\r\n  Installing System.Runtime.Extensions 4.3.0.\r\n  Installing System.Reflection 4.3.0.\r\n  Installing System.ObjectModel 4.3.0.\r\n  Installing System.Dynamic.Runtime 4.3.0.\r\n  Installing System.Xml.ReaderWriter 4.3.0.\r\n  Installing Microsoft.CSharp 4.3.0.\r\n  Installing System.ComponentModel.TypeConverter 4.3.0.\r\n  Installing System.Runtime 4.3.0.\r\n  Installing System.Reflection.Emit.ILGeneration 4.3.0.\r\n  Installing System.Reflection.Primitives 4.3.0.\r\n  Installing System.AppContext 4.3.0.\r\n  Installing System.Console 4.3.0.\r\n  Installing System.Collections.Concurrent 4.3.0.\r\n  Installing System.Diagnostics.Tools 4.3.0.\r\n  Installing System.Security.Cryptography.Encoding 4.0.0.\r\n  Installing System.IO.Compression 4.3.0.\r\n  Installing System.IO.FileSystem 4.3.0.\r\n  Installing System.IO.FileSystem.Primitives 4.3.0.\r\n  Installing System.Security.Cryptography.Encoding 4.3.0.\r\n  Installing System.Collections.Immutable 1.3.1.\r\n  Installing System.Runtime.InteropServices 4.3.0.\r\n  Installing System.Security.Cryptography.X509Certificates 4.1.0.\r\n  Installing System.Diagnostics.StackTrace 4.3.0.\r\n  Installing System.Reflection.Metadata 1.4.2.\r\n  Installing System.Threading.Thread 4.3.0.\r\n  Installing Microsoft.CodeAnalysis.Analyzers 1.1.0.\r\n  Installing System.Security.Cryptography.X509Certificates 4.3.0.\r\n  Installing System.ValueTuple 4.3.0.\r\n  Installing System.Diagnostics.FileVersionInfo 4.3.0.\r\n  Installing System.Threading.Tasks.Parallel 4.3.0.\r\n  Installing System.Security.Cryptography.Algorithms 4.3.0.\r\n  Installing System.Xml.XPath.XDocument 4.3.0.\r\n  Installing System.Text.Encoding.CodePages 4.3.0.\r\n  Installing System.Runtime.InteropServices 4.1.0.\r\n  Installing Microsoft.IdentityModel.Protocols 5.2.0.\r\n  Installing Microsoft.IdentityModel.Tokens 5.2.0.\r\n  Installing Microsoft.IdentityModel.Xml 5.2.0.\r\n  Installing System.Diagnostics.Debug 4.0.11.\r\n  Installing System.Reflection.Extensions 4.0.1.\r\n  Installing Microsoft.IdentityModel.Tokens.Saml 5.2.0.\r\n  Installing System.Runtime.Extensions 4.1.0.\r\n  Installing System.Threading 4.0.11.\r\n  Installing System.Collections 4.0.11.\r\n  Installing System.Reflection 4.1.0.\r\n  Installing System.ObjectModel 4.0.12.\r\n  Installing System.Linq 4.1.0.\r\n  Installing System.Linq.Queryable 4.0.1.\r\n  Installing System.Linq.Expressions 4.1.0.\r\n  Installing System.Runtime 4.1.0.\r\n  Installing NETStandard.Library 1.6.0.\r\n  Installing System.Dynamic.Runtime 4.0.11.\r\n  Installing Newtonsoft.Json 9.0.1.\r\n  Installing Microsoft.DotNet.PlatformAbstractions 2.1.0.\r\n  Installing System.Runtime.CompilerServices.Unsafe 4.5.0.\r\n  Installing runtime.win-x64.runtime.native.System.Data.SqlClient.sni 4.4.0.\r\n  Installing runtime.win-x86.runtime.native.System.Data.SqlClient.sni 4.4.0.\r\n  Installing runtime.win-arm64.runtime.native.System.Data.SqlClient.sni 4.4.0.\r\n  Installing Microsoft.NETCore.Platforms 1.1.0.\r\n  Installing Microsoft.Win32.Primitives 4.3.0.\r\n  Installing System.Net.Sockets 4.3.0.\r\n  Installing System.Diagnostics.Tracing 4.3.0.\r\n  Installing System.IO.Compression.ZipFile 4.3.0.\r\n  Installing System.Globalization.Calendars 4.3.0.\r\n  Installing System.Threading.Timer 4.3.0.\r\n  Installing System.Security.Cryptography.Primitives 4.3.0.\r\n  Installing System.Runtime.InteropServices.RuntimeInformation 4.0.0.\r\n  Installing System.Runtime.Handles 4.3.0.\r\n  Installing System.Runtime.InteropServices.RuntimeInformation 4.3.0.\r\n  Installing System.Net.Http 4.3.0.\r\n  Installing Microsoft.NETCore.Targets 1.1.0.\r\n  Installing System.Net.Primitives 4.3.0.\r\n  Installing System.Reflection.Emit.Lightweight 4.3.0.\r\n  Installing System.Reflection.TypeExtensions 4.3.0.\r\n  Installing System.Threading.Tasks.Extensions 4.3.0.\r\n  Installing System.ComponentModel 4.3.0.\r\n  Installing System.ComponentModel.Primitives 4.3.0.\r\n  Installing System.Collections.NonGeneric 4.3.0.\r\n  Installing System.Collections.Specialized 4.3.0.\r\n  Installing runtime.native.System 4.3.0.\r\n  Installing runtime.native.System.IO.Compression 4.3.0.\r\n  Installing System.Buffers 4.3.0.\r\n  Installing runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing runtime.native.System.Net.Http 4.3.0.\r\n  Installing System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing System.Security.Cryptography.Cng 4.3.0.\r\n  Installing System.Security.Cryptography.Csp 4.3.0.\r\n  Installing runtime.native.System.Security.Cryptography.Apple 4.3.0.\r\n  Installing System.Xml.XPath 4.3.0.\r\n  Installing Microsoft.IdentityModel.Logging 5.2.0.\r\n  Installing System.Diagnostics.Contracts 4.3.0.\r\n  Installing System.Runtime.Serialization.Xml 4.3.0.\r\n  Installing Microsoft.NETCore.Platforms 1.0.1.\r\n  Installing Microsoft.NETCore.Targets 1.0.1.\r\n  Installing System.Security.Claims 4.3.0.\r\n  Installing System.Reflection.Primitives 4.0.1.\r\n  Installing System.IO 4.1.0.\r\n  Installing System.Globalization 4.0.11.\r\n  Installing System.Threading.Tasks 4.0.11.\r\n  Installing System.Resources.ResourceManager 4.0.1.\r\n  Installing System.Reflection.Emit 4.0.1.\r\n  Installing System.Reflection.TypeExtensions 4.1.0.\r\n  Installing System.Reflection.Emit.ILGeneration 4.0.1.\r\n  Installing System.Reflection.Emit.Lightweight 4.0.1.\r\n  Installing System.AppContext 4.1.0.\r\n  Installing System.Collections.Concurrent 4.0.12.\r\n  Installing System.IO.FileSystem.Primitives 4.0.1.\r\n  Installing System.Runtime.Numerics 4.0.1.\r\n  Installing System.Security.Cryptography.Primitives 4.0.0.\r\n  Installing System.Xml.XDocument 4.0.11.\r\n  Installing System.Text.RegularExpressions 4.1.0.\r\n  Installing Microsoft.Win32.Primitives 4.0.1.\r\n  Installing System.Console 4.0.0.\r\n  Installing System.Diagnostics.Tools 4.0.1.\r\n  Installing System.Diagnostics.Tracing 4.1.0.\r\n  Installing System.Globalization.Calendars 4.0.1.\r\n  Installing System.IO.FileSystem 4.0.1.\r\n  Installing System.Net.Sockets 4.1.0.\r\n  Installing System.Text.Encoding 4.0.11.\r\n  Installing System.Threading.Timer 4.0.1.\r\n  Installing System.Net.Primitives 4.0.11.\r\n  Installing System.Runtime.Handles 4.0.1.\r\n  Installing System.Text.Encoding.Extensions 4.0.11.\r\n  Installing System.IO.Compression.ZipFile 4.0.1.\r\n  Installing System.IO.Compression 4.1.0.\r\n  Generating MSBuild file /mvcapp/obj/mvcapp.csproj.nuget.g.props.\r\n  Generating MSBuild file /mvcapp/obj/mvcapp.csproj.nuget.g.targets.\r\n  Restore completed in 44.04 sec for /mvcapp/mvcapp.csproj.\r\n\r\nRestore succeeded.\r\n\r\n\r\nreal    1m8.386s\r\nuser    1m8.010s\r\nsys     0m18.190s\r\nroot@9d1d5e45df6a:/# cd mvcapp/\r\nroot@9d1d5e45df6a:/mvcapp# time dotnet build\r\nMicrosoft (R) Build Engine version 15.7.179.6572 for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  Restore completed in 557.76 ms for /mvcapp/mvcapp.csproj.\r\n  mvcapp -> /mvcapp/bin/Debug/netcoreapp2.1/mvcapp.dll\r\n  mvcapp -> /mvcapp/bin/Debug/netcoreapp2.1/mvcapp.Views.dll\r\n\r\nBuild succeeded.\r\n    0 Warning(s)\r\n    0 Error(s)\r\n\r\nTime Elapsed 00:02:07.34\r\n\r\nreal    2m11.716s\r\nuser    1m22.990s\r\nsys     0m8.880s\r\nroot@9d1d5e45df6a:/mvcapp#\r\n```\r\n","Url":"https://github.com/dotnet/announcements/issues/80","RelatedDescription":"Closed issue \"Improving Performance of ARM32 Docker Images with .NET Core Package Cache\" (#80)"},{"Id":"350233220","IsPullRequest":false,"CreatedAt":"2018-08-13T23:50:57","Actor":"richlander","Number":"81","RawContent":null,"Title":"Advisory serializing/deserializing a CultureAwareComparer with .NET Framework 4.6+","State":"open","Body":"# Advisory serializing/deserializing a CultureAwareComparer with .NET Framework 4.6+\r\n\r\nAn [issue with serializing/deserializing a CultureAwareComparer](https://github.com/Microsoft/dotnet/blob/master/releases/net471/KnownIssues/521954%20-%20BCL%20CultureAwareComparer%20with%20ignore%20casing%20on%20serialized%20on%20previous%20versions%20of%20.NET%20do%20not%20correctly%20deserialize%20on%20.NET%204.7.1.md) was discovered with [.NET Framework 4.7.1](https://blogs.msdn.microsoft.com/dotnet/2017/10/17/announcing-the-net-framework-4-7-1/). This issue was resolved earlier this year, with the [May 2018 Preview of Quality Rollup](https://blogs.msdn.microsoft.com/dotnet/2018/05/15/net-framework-may-2018-preview-of-quality-rollup/). We recently learned that some applications, including Johnson Controls’ C-CURE 9000 Software, were negatively impacted by this change as this update requires all client and server workstations to be updated simultaneously with the appropriate Microsoft updates. The changes made to .NET Framework 4.7.1 were also integrated into .NET Framework 4.6 and later servicing releases. As a result, this advisory applies to .NET Framework 4.6 and later versions.\r\n\r\nThis advisory is provided so that developers can correctly diagnose this issue and be aware of our guidance. We will continue to update this issue as we have new information to share.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [microsoft/dotnet #832](https://github.com/Microsoft/dotnet/issues/832)\r\n\r\n## Guidance\r\n\r\nThis guidance only applies to customers that have experienced this issue.\r\n\r\nWe have released [an update for .NET Framework 4.6](https://blogs.msdn.microsoft.com/dotnet/2018/08/30/net-framework-august-2018-preview-of-quality-rollup/) and later that resolves the issue. **You must deploy the .NET Framework update for this issue to all .NET Framework 4.6+ machines that communicate via serialized objects**. After doing that, cross-machine serialization will work as expected. \r\n \r\nPlease consult your software vendor to understand if this impacts the software you are using.\r\n\r\n## Technical Context\r\n\r\nIn the [May 2018 Preview of Quality Rollup](https://blogs.msdn.microsoft.com/dotnet/2018/05/15/net-framework-may-2018-preview-of-quality-rollup/), we made a change to the internal type CultureAwareComparer to implement ISerializable. We made the change in order to address [issue with serializing/deserializing a CultureAwareComparer](https://github.com/Microsoft/dotnet/blob/master/releases/net471/KnownIssues/521954%20-%20BCL%20CultureAwareComparer%20with%20ignore%20casing%20on%20serialized%20on%20previous%20versions%20of%20.NET%20do%20not%20correctly%20deserialize%20on%20.NET%204.7.1.md).\r\n\r\nThe issue reported was that a type that contains an instance of CultureAwareComparer was not able to correctly serialize and deserialize across different versions of the .NET Framework. There are a few types in .NET Framework that do this, the most commonly impacted one being the Dictionary<TKey, TValue> type.\r\n \r\nThe change to implement the ISerializable interface had unintended side effects when exchanging this type across different machines. We have had a small number of reports from customers who have been affected.\r\n\r\nA common, but not unique way, of exchanging objects across machines is to use WCF in conjunction with a serializer. One of the common serializers being DataContractSerializer. The side-effect of the change prevented data serialized on systems where the type implements ISerializable to correctly deserialize of systems where the type does NOT implement ISerializable. The same is true of the opposite case, that systems where the type does not implement ISerializable will not correctly deserialize data from systems where the type does implement ISerializable.\r\n\r\nWe have an updated fix that we intend to release within the next month that will remove the implementation of the ISerializable interface on the type and use a different internal mechanism for ensuring the cross-version serialization continues to work as expected. This change addresses the break experienced with WCF.\r\n\r\nThe upcoming fix will remove the implementation of the ISerializable interface on the type and use a different mechanism for ensuring the cross-version serialization of that type continues to work. This change addresses the break experienced with WCF.\r\n\r\n## Symptoms\r\n\r\nAn application that is affected by this issue will most likely crash when trying to deserialize an object. It may print or log an error message similar to the following one:\r\n\r\n```\r\nThe formatter threw an exception while trying to deserialize the message: \r\nThere was an error while trying to deserialize parameter . The InnerException message was ''EndElement' 'Comparer' from namespace '' is not expected. Expecting element '_compareInfo'.'.  Please see InnerException for more details.\r\n```\r\n","Url":"https://github.com/dotnet/announcements/issues/81","RelatedDescription":"Open issue \"Advisory serializing/deserializing a CultureAwareComparer with .NET Framework 4.6+\" (#81)"},{"Id":"348162872","IsPullRequest":false,"CreatedAt":"2018-08-07T04:26:40","Actor":"richlander","Number":"79","RawContent":null,"Title":"August 2018 .NET Updates","State":"open","Body":"# August 2018 .NET Updates\r\n\r\nThe following .NET updates were released in August 2018. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Framework \r\n\r\n* [August 2018 .NET Framework Security and Quality Rollup - August 14, 2018](https://blogs.msdn.microsoft.com/dotnet/2018/08/14/august-2018-security-and-quality-rollup/)\r\n* [Advisory serializing/deserializing a CultureAwareComparer with .NET Framework 4.6+](https://github.com/dotnet/announcements/issues/81)\r\n* [Advisory on July 2018 .NET Framework Updates](https://blogs.msdn.microsoft.com/dotnet/2018/07/20/advisory-on-july-2018-net-framework-updates/)\r\n* [August 2018 Preview of Quality Rollup - August 30, 2018](https://blogs.msdn.microsoft.com/dotnet/2018/08/30/net-framework-august-2018-preview-of-quality-rollup/)\r\n\r\n## .NET Core\r\n\r\n* [.NET Core August 2018 Update - August 21, 2018](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.3/2.1.3.md)\r\n* [.NET Core 2.1.400 SDK Update - August 14, 2018](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.400-SDK/2.1.400-sdk.md)\r\n\r\n## End of Support for Operating System Versions\r\n\r\n.NET Core does not support systems that are out of support. The following operating systems are now out of support. To stay supported, move to a [later version of the given operating system](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md).\r\n\r\n* [Debian 8 -- Jessie](https://lists.debian.org/debian-security-announce/2018/msg00132.html)\r\n* [Ubuntu 17.10 -- Artful Aardvark](https://lists.ubuntu.com/archives/ubuntu-announce/2018-July/000232.html)\r\n\r\nSee [Debian Jessie End of Life -- Impact on .NET Core Docker Images](https://github.com/dotnet/announcements/issues/78)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)","Url":"https://github.com/dotnet/announcements/issues/79","RelatedDescription":"Open issue \"August 2018 .NET Updates\" (#79)"},{"Id":"348161534","IsPullRequest":false,"CreatedAt":"2018-08-07T04:18:01","Actor":"richlander","Number":"78","RawContent":null,"Title":"Debian Jessie End of Life -- Impact on .NET Core Docker Images","State":"open","Body":"# Debian Jessie End of Life -- Impact on .NET Core Docker Images\r\n\r\nDebian Jessie (AKA Debian 8) is now [out of support](https://lists.debian.org/debian-security-announce/2018/msg00132.html). Debian Jessie is no longer a supported operating system for .NET Core. Docker users need to switch to Debian Stretch-based (AKA Debian 9) images to stay in support.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet/dotnet-docker #647](https://github.com/dotnet/dotnet-docker/issues/647)\r\n\r\n## Context\r\n\r\nJessie-based images are currently provided for .NET Core 1.0, 1.1 and 2.0. .NET Core 1.0 and 1.1 expose multi-arch tags, such as `1.0-runtime` and `1.1-sdk`, that support Debian Jessie. When pulled for a Linux Docker daemon (on Linux or Windows), these tags pull Jessie-based images. .NET Core 2.0 supports Jessie, but it is not the default. .NET Core 2.0 multi-arch tags, such as `2.0-runtime` and `2.0-sdk`, pull Debian Stretch-based images, when pulled for a Linux Docker daemon. We made a conscious decision with .NET Core 2.0 to move off of Jessie as the default to avoid this problem, based the Jessie 2018 EOL date. .NET Core 2.1 does not support Jessie, only Stretch.\r\n\r\nWe recently posted about our policy for underlying operating system dependencies with Docker:\r\n\r\n> For each major and minor .NET version, we may take a new major operating system version dependency. As I mentioned earlier, we adopted Debian 9 as the base image for .NET Core 2.0. We stayed with Debian 9 for .NET Core 2.1, since Debian 10 (AKA “Buster”) has not been released. Debian 9 will remain the default base image for .NET Core 2.1 for the life of .NET Core 2.1. **Once we adopt an underlying operating system major version, we will not change it for the life of that given .NET release.**\r\n\r\nSource: https://blogs.msdn.microsoft.com/dotnet/2018/06/18/staying-up-to-date-with-net-container-images/\r\n\r\n## Plan\r\n\r\nWe will continue to re-build .NET Core 1.0 and 1.1 multi-arch tags on top of Jessie for the remaining [supported lifetime of .NET Core 1.0 and 1.1](https://github.com/dotnet/core/blob/master/microsoft-support.md). We will also provide a Stretch-based image for .NET Core 1.1. This tag will look like the following: `1.1-runtime-stretch` or `1.1.9-sdk-stretch`. This is same format that Jessie has used.\r\n\r\nWe will produce Jessie-based images for NET Core 2.0 until October 2018, which is when [.NET Core 2.0 support ends](https://github.com/dotnet/core/blob/master/microsoft-support.md). .NET Core 2.0 multi-arch tags support Debian Stretch, not Jessie, as described above.\r\n\r\nIn summary, .NET Core is no longer supported on Debian Jessie, with Docker or otherwise. We will produce Docker images for Jessie until .NET Core 1.0, 1.1 and 2.0 support ends, respectively, to avoid breaking applications. This aligns with the policy defined above, per [Staying up-to-date with .NET Container Images](https://blogs.msdn.microsoft.com/dotnet/2018/06/18/staying-up-to-date-with-net-container-images/).\r\n\r\n## Affected Repos\r\n\r\n* [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/)\r\n* [microsoft/dotnet-nightly](https://hub.docker.com/r/microsoft/dotnet-nightly/)\r\n* [microsoft/aspnetcore](https://hub.docker.com/r/microsoft/aspnetcore/)\r\n* [microsoft/aspnetcore-build](https://hub.docker.com/r/microsoft/aspnetcore-build/)","Url":"https://github.com/dotnet/announcements/issues/78","RelatedDescription":"Open issue \"Debian Jessie End of Life -- Impact on .NET Core Docker Images\" (#78)"},{"Id":"345028102","IsPullRequest":false,"CreatedAt":"2018-07-26T22:31:32","Actor":"leecow","Number":"77","RawContent":null,"Title":"https://dot.net now using TLS 1.2-only","State":"open","Body":"Earlier today, https://dot.net switched to using TLS 1.2-only. Most Windows Powershell instances default to TLS 1.1 and will thus fail with `wget : The underlying connection was closed: An unexpected error occurred on a send. trying to run the previous command.`\r\n\r\nAn example of a PowerShell script fix can be seen in https://github.com/dotnet/docs/pull/6689","Url":"https://github.com/dotnet/announcements/issues/77","RelatedDescription":"Open issue \"https://dot.net now using TLS 1.2-only\" (#77)"},{"Id":"343360319","IsPullRequest":false,"CreatedAt":"2018-07-21T22:29:05","Actor":"richlander","Number":"76","RawContent":null,"Title":"July 2018 .NET Updates","State":"open","Body":"# July 2018 .NET Updates\r\n\r\nThe following .NET updates were released in June 2018. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Framework \r\n\r\n* [.NET Framework 4.7.2 is available on Windows Update, WSUS and MU Catalog](https://blogs.msdn.microsoft.com/dotnet/2018/07/10/net-framework-4-7-2-is-available-on-windows-update-wsus-and-mu-catalog/)\r\n* [Announcing .NET Framework 4.8 Early Access build 3632](https://blogs.msdn.microsoft.com/dotnet/2018/07/18/announcing-net-framework-4-8-early-access-build-3632/)\r\n* [Advisory on July 2018 .NET Framework Updates](https://blogs.msdn.microsoft.com/dotnet/2018/07/20/advisory-on-july-2018-net-framework-updates/)\r\n* [.NET Framework July 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/07/30/net-framework-july-2018-update/)\r\n\r\n## .NET Core\r\n\r\n* [.NET Core July 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/07/10/net-core-july-2018-update/)\r\n\r\n## .NET Core Support Policies\r\n\r\n* [Microsoft Support for .NET Core](https://github.com/dotnet/core/blob/master/microsoft-support.md)\r\n* [.NET Core Supported OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)\r\n* [April 2018](https://github.com/dotnet/announcements/issues/64)\r\n","Url":"https://github.com/dotnet/announcements/issues/76","RelatedDescription":"Open issue \"July 2018 .NET Updates\" (#76)"},{"Id":"343360017","IsPullRequest":false,"CreatedAt":"2018-07-21T22:22:25","Actor":"richlander","Number":"75","RawContent":null,"Title":"June 2018 .NET Updates","State":"open","Body":"# June 2018 .NET Updates\r\n\r\nThe following .NET updates were released in June 2018.\r\n\r\n## .NET Framework \r\n\r\n* [.NET Framework June 2018 Security and Quality Rollup](https://blogs.msdn.microsoft.com/dotnet/2018/06/13/net-framework-june-2018-security-and-quality-rollup/)\r\n* [Announcing .NET Framework 4.8 Early Access build 3621!](https://blogs.msdn.microsoft.com/dotnet/2018/06/06/announcing-net-framework-4-8-early-access-build-3621/)\r\n\r\n## .NET Core\r\n\r\n* [.NET Core 2.1 June Update](https://blogs.msdn.microsoft.com/dotnet/2018/06/22/net-core-2-1-june-update/)\r\n* [.NET Core 2.0 will reach End of Life on October 1, 2018](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/)\r\n* [.NET Core 1.0 and 1.1 EOL Dates Documented](https://github.com/dotnet/core/blob/master/microsoft-support.md)\r\n\r\n## Previous Updates\r\n\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)\r\n* [April 2018](https://github.com/dotnet/announcements/issues/64)\r\n* [February 2018](https://github.com/dotnet/announcements/issues/59)","Url":"https://github.com/dotnet/announcements/issues/75","RelatedDescription":"Open issue \"June 2018 .NET Updates\" (#75)"},{"Id":"343283437","IsPullRequest":false,"CreatedAt":"2018-07-21T00:56:48","Actor":"richlander","Number":"74","RawContent":null,"Title":"Advisory on July 2018 .NET Framework Updates","State":"open","Body":"# Advisory on July 2018 .NET Framework Updates\r\n\r\nUpdated: 08/14/2018\r\n\r\n> A new [.NET Framework August 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/08/14/august-2018-security-and-quality-rollup/) has been released that **resolves this advisory for all supported Windows versions**.\r\n\r\n~~A new [.NET Framework July 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/07/30/net-framework-july-2018-update/) has been released that resolves this advisory. See Guidance section.~~\r\n\r\n~~Guidance has changed for Windows 7, Windows Server 2008 and Windows Server 2008 R2. See Guidance section.~~\r\n\r\nThe [July 2018 Security and Quality Rollup updates for .NET Framework](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2018-8356) was released earlier this month. We have received multiple customer reports of [applications that fail to start or don't run correctly](https://support.microsoft.com/en-us/help/4345913) after installing the July 2018 update. These reports are specific to applications that initialize a COM component and run with restricted permissions.\r\n\r\nWe have stopped distributing the .NET Framework July 2018 updates on Windows Update and are actively working on fixing and re-shipping this month's updates. If you installed the July 2018 update and have not yet seen any negative behavior, we recommend that you leave your systems as-is but closely monitor them and ensure that you apply upcoming .NET Framework updates.\r\n\r\nAs a team, we regret that this release was shipped with this flaw. This release was tested using our regular and extensive testing process. We discovered while investigating this issue that we have a test hole for the specific combination of COM activation and restricted permissions, including impersonation. We will be mitigating that gap going forward. Again, we are sorry for any inconvenience that this product flaw has caused.\r\n\r\nWe will continue to update this issue and [post](https://blogs.msdn.microsoft.com/dotnet/2018/07/20/advisory-on-july-2018-net-framework-updates/) as we have new information.\r\n\r\n## Discussion\r\nPlease share your thoughts/experience on this advisory and see what others are saying at:\r\n\r\n* [microsoft/dotnet #811](https://github.com/Microsoft/dotnet/issues/811)\r\n\r\n## Guidance\r\n\r\nWe strongly recommend that you install [.NET Framework August 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/08/14/august-2018-security-and-quality-rollup/).\r\n\r\n~~We recommend that you install [.NET Framework July 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/07/30/net-framework-july-2018-update/) on your systems if you experienced the symptoms described in this advisory. If you did not experience these symptoms, we recommend you wait to update your machines until the next regular update, in August.~~\r\n\r\n~~On Windows 7, Windows Server 2008, and Windows Server 2008 R2, we have found that the combination of [July 2018 Security and Quality Rollup updates for .NET Framework](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2018-8356) and  [.NET Framework July 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/07/30/net-framework-july-2018-update/) do not resolve all symptoms. On these Windows versions, if you are experiencing these symptoms after installing this combination of patches, we recommend that you uninstall (only) the Monthly Rollup patch and then install the appropriate Security Only patch listed at [July 2018 Security and Quality Rollup updates for .NET Framework](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2018-8356).~~\r\n\r\n## Technical Context\r\n\r\nThe .NET Framework runtime uses the process token to determine whether the process is being run within an elevated context. These system calls can fail if the required process inspection permissions are not present. This causes an “access denied\" error.\r\n\r\n## Symptoms\r\n\r\nA COM component fails to load because of “access denied,” “class not registered,” or “internal failure occurred for unknown reasons” errors. \r\n\r\nThe most commonly reported failure results in the following error message:\r\n\r\n```console\r\nException type: System.UnauthorizedAccessException\r\nMessage: Access is denied. (Exception from HRESULT: 0x80070005 (E_ACCESSDENIED))\r\n```\r\n\r\n### Sharepoint\r\n\r\nWhen users browse to a SharePoint site they may see the following HTTP 403 message:\r\n\r\n```console\r\n\"The Web Site declined to show this webpage\"\r\n```\r\n\r\nThe SharePoint ULS Logs will contain a message like the following:  \r\n\r\n```console\r\nw3wp.exe (0x1894)         0x0B94  SharePoint Foundation  General 0000       High                UnauthorizedAccessException for the request. 403 Forbidden will be returned. Error=An error occurred creating the configuration section handler for system.serviceModel/extensions: Could not load file or assembly <AssemblySignature>  or one of its dependencies. Access is denied. (C:\\Windows\\Microsoft.NET\\Framework64\\v2.0.50727\\Config\\machine.config line 180)    \r\n\r\nw3wp.exe (0x1894)         0x0B94  SharePoint Foundation  General b6p2      VerboseEx                Sending HTTP response 403:403 FORBIDDEN.      \r\n\r\nw3wp.exe (0x1894)         0x0B94  SharePoint Foundation  General 8nca       Verbose                Application error when access /, Error=Access is denied. (Exception from HRESULT: 0x80070005 (E_ACCESSDENIED))\r\n```\r\n\r\nWhen crawling a people content source, the request may fail with the following entry logged to the SharePoint ULS Log: \r\n\r\n```console\r\nmssearch.exe (0x118C) 0x203C SharePoint Server Search Crawler:Gatherer Plugin cd11 Warning The start address sps3s://<URLtoSite> cannot be crawled.  Context: Application 'Search_Service_Application', Catalog 'Portal_Content'  Details:  Class not registered   (0x80040154)  \r\n\r\nIIS Hosted Classic ASP calling CreateObject for .NET COM objects may receive error \"ActiveX component can't create object\" \r\n\r\n.NET Application creates instance of .NET COM application within an Impersonation Context may receive error \"0x80040154 (REGDB_E_CLASSNOTREG)\"\r\n```\r\n\r\n### BizTalk Server Administration Console\r\n\r\nBizTalk Server Administration Console fails to launch properly with the following errors: \r\n\r\n```console\r\nAn internal failure occurred for unknown reasons. (WinMgmt) \r\n\r\nProgram Location:  \r\n\r\n   at System.Runtime.InteropServices.Marshal.ThrowExceptionForHRInternal(Int32 errorCode, IntPtr errorInfo) \r\n\r\n   at System.Management.ManagementObject.Get() \r\n\r\n   at Microsoft.BizTalk.SnapIn.Framework.WmiProvider.SelectInstance\r\n```\r\n\r\n> Warning: The following workarounds may make a computer or a network more vulnerable to attack by malicious users or by malicious software such as viruses. We do not recommend these workarounds but are providing this information so that you can implement the workarounds at your own discretion. Use these workarounds at your own risk.\r\n\r\nUse the following guidance as a workaround:\r\n\r\n* Add “NETWORK SERVICE” to the local Administrators group. \r\n\r\n### IIS with Classic ASP\r\n\r\nIIS Hosted Classic ASP calling CreateObject for .NET COM objects may receive the following error: \"ActiveX component can't create object\". Use the following guidance as a workaround.\r\n\r\n* If your web site uses Anonymous Authentication, change the Web Site Anonymous Authentication credentials to use the \"Application pool identity\"\r\n* If your site uses Basic Authentication, log into the application once as the application pool identity and then create an instance of the .NET COM component. All subsequent activations for that .NET COM component should succeed, for any user.\r\n\r\n### .NET applications using COM and impersonation\r\n\r\n.NET Applications that creates instances of .NET COM application within an Impersonation Context may receive the following error: \"0x80040154 (REGDB_E_CLASSNOTREG)\". Use the following guidance as a workaround.\r\n\r\n* Create an instance of the .NET COM component prior to the impersonation context call. Later impersonated create instance calls should work as expected.\r\n* Run the .NET Application in the context of the impersonated user\r\n* Avoid using Impersonation when creating the .NET COM object","Url":"https://github.com/dotnet/announcements/issues/74","RelatedDescription":"Open issue \"Advisory on July 2018 .NET Framework Updates\" (#74)"},{"Id":"339929129","IsPullRequest":false,"CreatedAt":"2018-07-10T17:00:37","Actor":"blowdart","Number":"73","RawContent":null,"Title":"Microsoft Security Advisory CVE-2018-8356: .NET Core Security Feature Bypass Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-8356: .NET Core Security Feature Bypass Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a security feature bypass vulnerability that exists when .NET Core does not correctly validate certificates. An attacker who successfully exploited this vulnerability could present an expired certificate when challenged.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core applications handle certificate validation.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/wcf/issues/3009\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\n* If an application does not use Windows Communication Foundation you are not affected.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core, or ASP.NET Core based application that uses System.Private.ServiceModel with a version of 4.5.1 or earlier.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ---------------- | -------------------------\r\nSystem.Private.ServiceModel | 4.0.0, 4.1.0, 4.1.1 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 |  4.1.3 or later <br /> 4.3.3 or later <br /> 4.4.4 or later <br /> 4.5.3 or later\r\nSystem.ServiceModel.Duplex | 4.0.0, 4.0.1, 4.0.2 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 | 4.0.4 or later <br /> 4.3.3 or later <br /> 4.443 or later <br /> 4.5.3 or later\r\nSystem.ServiceModel.Http | 4.0.0, 4.0.10, 4.1.0, 4.1.1 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 | 4.1.3 or later <br /> 4.3.3 or later <br /> 4.4.4 or later <br /> 4.5.3 or later\r\nSystem.ServiceModel.NetTcp | 4.0.0, 4.1.0, 4.1.1 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 | 4.1.3 or later <br /> 4.3.3 or later <br /> 4.4.4 or later <br /> 4.5.3 or later\r\nSystem.ServiceModel.Primitives | 4.0.0, 4.1.0, 4.1.1 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 | 4.1.2 or later <br /> 4.3.3 or later <br /> 4.4.4 or later <br /> 4.5.3 or later\r\nSystem.ServiceModel.Security | 4.0.0, 4.0.1, 4.0.2 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 | 4.0.4 or later <br /> 4.3.3 or later <br /> 4.4.4 or later <br /> 4.5.3 or later\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n.NET Core projects have two types of dependencies: direct and transitive. You must update your projects using the following instructions to address both types of dependency.\r\n\r\n### <a name=\"project-format\"></a>.NET Core Project formats\r\n\r\n.NET Core has two different project file formats, depending on what software created the project.\r\n\r\n1. `project.json` is the format used in .NET Core 1.0 and Microsoft Visual Studio 2015.\r\n2. `csproj` is the format used in .NET Core 1.1, .NET Core 2.0 and Microsoft Visual Studio 2017.\r\n\r\n#### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file or your `project.json` file. They can be fixed by [editing the project file](#direct-dependencies) or using NuGet to update the dependency.\r\n\r\n The `System.Private.ServiceModel` package is not meant to be directly depended on and will not appear in your direct dependency list.\r\n\r\n#### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in three ways, depending on your [project format](#project-format):\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects *OR*.\r\n* By examining the `project.lock.json` file contained in the root directory of your project for `project.json` based projects.\r\n\r\nThe `project.assets.json` and `project.lock.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\n#### <a name=\"direct-dependencies-vs2017\"></a>Fixing direct dependencies in a csproj based project / Visual Studio 2017\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.ServiceModel.Http\" Version=\"4.4.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.ServiceModel.Http` version 4.4.0.\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.ServiceModel.Http` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.ServiceModel.Http\" Version=\"4.4.3\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"direct-dependencies-vs2015\"></a> Fixing Direct Dependencies in project.json based project / Visual Studio 2015\r\n\r\nOpen your `project.json` file in your editor. Look for the dependencies section. Below is an example dependencies section:\r\n\r\n``` json\r\n    \"dependencies\": {\r\n      \"Microsoft.NETCore.App\": {\r\n        \"version\": \"1.0.1\",\r\n        \"type\": \"platform\"\r\n      },\r\n     \"Microsoft.AspNetCore.Mvc.Core\": \"1.0.6\",\r\n     \"System.ServiceModel.Http\" : \"4.0.0\"\r\n    }\r\n```\r\n\r\nThis example has three direct dependencies: `Microsoft.NETCore.App`, `Microsoft.AspNetCore.Mvc.Core` and `System.ServiceModel.Http`.\r\n\r\n`Microsoft.NetCore.App` is the platform the application targets, you should ignore this. The other packages expose their version to the right of the package name. In our example, our non-platform packages are version 1.0.1.\r\n\r\nReview your direct dependencies for any instance of the packages and versions listed above. In the example above, there is a direct dependency on a vulnerable package, `System.ServiceModel.Http` version 4.4.0.\r\n\r\nTo update to the fixed package, change the version number to be the appropriate package for your release. In the example, this would be updating `System.ServiceModel.Http` to 4.4.3.\r\n\r\nAfter updating the vulnerable package versions, save your `project.json` file.\r\n\r\nThe dependencies section in our example `project.json` would now look as follows:\r\n\r\n```json\r\n  \"dependencies\": {\r\n    \"Microsoft.NETCore.App\": {\r\n      \"version\": \"1.0.1\",\r\n      \"type\": \"platform\"\r\n    },\r\n    \"Microsoft.AspNetCore.Mvc.Core\": \"1.0.6\",\r\n    \"System.ServiceModel.Http \": \"4.4.3\"\r\n  }\r\n```\r\n\r\nIf you are using Visual Studio and save your updated `project.json` file, Visual Studio will restore the new package version. You can see the restore results by opening the Output Window (Ctrl+Alt+O) and changing the Show output from drop-down list to Package Manager.\r\n\r\nIf you are not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore your new dependency.\r\n\r\nAfter you have addressed all of your direct dependencies, you must also review your transitive dependencies.\r\n\r\nAfter you've addressed all of your direct dependencies, you must review your transitive dependencies.\r\n\r\n#### Discovering and fixing transitive dependencies\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json) or the [the `project.lock.json` file](#project-lock-json).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json (csproj/VS2017)\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `System.ServiceModel.Http/4.3.0` is a reference to version 4.3.0 of `System.ServiceModel.Http`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.ServiceModel.Http\" Version=\"4.3.2\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n##### <a name=\"project-lock-json\"></a> Manually reviewing project.lock.json (project.json/VS2015)\r\n\r\nOpen the `project.lock.json` file in your editor. We suggest you use an editor that understands json and allows you to collapse and expand nodes to review this file; both Visual Studio and Visual Studio Code provide this functionality.\r\n\r\nIf you are using Visual Studio the `project.lock.json` file is “under” the `project.json` file. Click the right pointing triangle, ▷, to the left of the `project.json` file to expand the solution tree to expose the `project.lock.json` file. The following image shows a project with the `project.json` file expanded to show the `project.lock.json` file.\r\n\r\n![project lock json](https://cloud.githubusercontent.com/assets/796298/25858179/f6e01200-348f-11e7-8a77-7176d8dd3f03.png)\r\n\r\nSearch the `project.lock.json` file for the vulnerable packages, using the format `packagename/`, using each of the package names from the table above. If you find any vulnerable assembly name in your search examine the line on which they are found, the version number is after the `/` and compare to the vulnerable versions table above. For example a search result that shows `System.ServiceModel.Http/4.0.1` is a reference to v4.0.1 of `System.ServiceModel.Http`.   If your `project.lock.json` file includes references to any of the package versions shown above then you will need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to a vulnerable version of `System.ServiceModel.Http` this means none of your direct dependencies depend on any vulnerable packages or you have already fixed the problem by updating the direct dependencies.\r\n\r\nIf your transitive dependency review found references to any of the vulnerable packages you must add a direct dependency to the updated package to your `project.json` file to override the transitive dependency. Open your `project.json` and find the dependencies section. For example:\r\n\r\n``` json\r\n  \"dependencies\": {\r\n    \"Microsoft.NETCore.App\": {\r\n      \"version\": \"1.0.1\",\r\n      \"type\": \"platform\"\r\n    },\r\n    \"Microsoft.AspNetCore.Mvc\": \"1.0.0\"\r\n  }\r\n```\r\n\r\nFor each of the vulnerable packages your search returned you must add a direct dependency to the updated version by adding it to the `project.json` file. You do this by adding a new line to the dependencies section, referring the fixed version. For example, if your search showed a transitive reference to the vulnerable `System.ServiceModel.Http` version 1.0.0 you would add a reference to the appropriate fixed version, 1.0.6. Edit the `project.json` file as follows:\r\n\r\n``` json\r\n  \"dependencies\": {\r\n    \"Microsoft.NETCore.App\": {\r\n      \"version\": \"1.0.1\",\r\n      \"type\": \"platform\"\r\n    },\r\n    \"System.ServiceModel.Http\": \"4.1.2\",\r\n    \"Microsoft.AspNetCore.Mvc\": \"1.0.0\"\r\n  }\r\n```\r\n\r\nAfter you have added direct dependencies to the fixed packages, save your `project.json` file.\r\n\r\nIf you are using Visual Studio save your updated `project.json` file and Visual Studio will restore the new package versions. You can see the restore results by opening the Output Window (Ctrl+Alt+O) and changing the Show output from drop-down list to Package Manager.\r\n\r\nIf you are not using Visual Studio open a command line and change to your project directory. Execute the `dotnet restore` command to restore your new dependencies.\r\n\r\n#### Rebuilding your application\r\n\r\nFinally you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2018-8356](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-CVE-2018-8356)\r\n\r\n### Revisions\r\n\r\nV1.1 (July 23, 2018): Updated package versions, as some assemblies were released unsigned.\r\nV1.0 (July 10, 2018): Advisory published.\r\n\r\n_Version 1.1_\r\n\r\n_Last Updated 2018-07-23_\r\n","Url":"https://github.com/dotnet/announcements/issues/73","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2018-8356: .NET Core Security Feature Bypass Vulnerability\" (#73)"}],"ResultType":"GitHubIssue"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1103473660508160001","CreatedAt":"2019-03-07T01:53:16+00:00","UserScreenname":"dotnet","Text":"Announcing .NET Core 3 Preview 3 https://t.co/sXYAjLR9Wb","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":354,"FavoriteCount":212,"RawContent":null},{"Id":"1103058093301149696","CreatedAt":"2019-03-05T22:21:57+00:00","UserScreenname":"dotnet","Text":"Floating-Point Parsing and Formatting improvements in .NET Core 3.0 https://t.co/oYZK5AK8h6","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":83,"FavoriteCount":50,"RawContent":null},{"Id":"1103021890837262337","CreatedAt":"2019-03-05T19:58:06+00:00","UserScreenname":"dotnet","Text":"Collecting .NET Core Linux Container CPU Traces from a Sidecar Container https://t.co/XH05KR4HVv","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":61,"FavoriteCount":22,"RawContent":null},{"Id":"1102725890788667394","CreatedAt":"2019-03-05T00:21:54+00:00","UserScreenname":"dotnet","Text":".NET Framework March 1, 2019 Cumulative Update for Windows 10 version 1809 and Windows Server 2019\n\nhttps://t.co/QdpE4oYqOM","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":27,"FavoriteCount":11,"RawContent":null},{"Id":"1101095169120747523","CreatedAt":"2019-02-28T12:22:00+00:00","UserScreenname":"dotnet","Text":"Subscribe to the On .NET on @ch9 to keep up with the latest episodes as we explore the world of .NET… https://t.co/1IClAyi1yE","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":25,"FavoriteCount":9,"RawContent":null}]}},"RunOn":"2019-03-10T05:30:29.0535793Z","RunDurationInMilliseconds":8484}