{"Data":{"Blog":{"FeedItems":[{"Title":"Watch .NET Conf 2017!","PublishedOn":"2017-09-19T00:00:00","CommentsCount":0,"FacebookCount":0,"Summary":".NET Conf starts today. It&#8217;s a three-day, free, virtual and global .NET conference. All you need to do is point your web browser to channel9.msdn.com, starting at 8AM Pacific Time. We have a packed agenda with a great set of expert .NET developers. What will you learn? Many things. You will learn to build for... <a aria-label=\"read more about Watch .NET Conf 2017!\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/09/19/watch-net-conf-2017/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/09/19/watch-net-conf-2017/","RawContent":null},{"Title":".NET Framework 4.7.1 ASP.NET and Configuration features","PublishedOn":"2017-09-14T00:00:00","CommentsCount":20,"FacebookCount":0,"Summary":"This post describes the new ASP.NET, Configuration and System.Messaging features and improvements in the .NET Framework 4.7.1. More information on the build these features are available in and how to get the Developer Pack is covered in the Welcome to the .NET Framework 4.7.1 Early Access blog post. Configuration builders Configuration builders allow developers to inject and build... <a aria-label=\"read more about .NET Framework 4.7.1 ASP.NET and Configuration features\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/09/13/net-framework-4-7-1-asp-net-and-configuration-features/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/09/13/net-framework-4-7-1-asp-net-and-configuration-features/","RawContent":null},{"Title":".NET Framework September 2017 Security and Quality Rollup","PublishedOn":"2017-09-13T00:00:00","CommentsCount":17,"FacebookCount":0,"Summary":"Today, we are releasing the September 2017 Security and Quality Rollup and Security Only Update. This update applies to Windows 7 and later client versions and Windows Server 2008 and later server versions. Security This release contains the following security changes. CVE-2017-8759 &#124; .NET Framework Remote Code Execution Vulnerability A remote code execution vulnerability exists... <a aria-label=\"read more about .NET Framework September 2017 Security and Quality Rollup\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/09/12/net-framework-september-2017-security-and-quality-rollup/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/09/12/net-framework-september-2017-security-and-quality-rollup/","RawContent":null},{"Title":"The week in .NET – Let’s Encrypt Web App Renewer, Seattle CodeCamp 2017","PublishedOn":"2017-08-29T00:00:00","CommentsCount":8,"FacebookCount":0,"Summary":"Previous posts: Project File Tools, Maira Wenzel, Mixed Reality in Miami .NET Core 2.0, ASP.NET Core 2.0, Entity Framework 2.0, Visual Studio 2017 Update 3, enterprise Entity Framework Core in Boston Rezoom.SQL, Protobuf in Orlando Open-source project of the week: Let&#8217;s Encrypt Azure Web App Renewer There&#8217;s a growing consensus that all web sites should... <a aria-label=\"read more about The week in .NET &#8211; Let&#8217;s Encrypt Web App Renewer, Seattle CodeCamp 2017\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/08/29/the-week-in-net/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/08/29/the-week-in-net/","RawContent":null},{"Title":"UWP & .NET Standard 2.0: A preview is now available!","PublishedOn":"2017-08-25T00:00:00","CommentsCount":45,"FacebookCount":0,"Summary":"Today, we released the first Preview of Visual Studio 2017 version 15.4. This includes an update to the UWP tooling that supports .NET Standard 2.0. In this post, I&#8217;ll outline what this means for UWP development with .NET. Prerequisites In order to use .NET Standard 2.0 in UWP, you need to target Fall Creators Update (FCU)... <a aria-label=\"read more about UWP &#38; .NET Standard 2.0: A preview is now available!\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/08/25/uwp-net-standard-2-0-preview/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/08/25/uwp-net-standard-2-0-preview/","RawContent":null},{"Title":"Mobile Apps with Xamarin.Forms: Architecture and Patterns guidance","PublishedOn":"2017-08-25T00:00:00","CommentsCount":0,"FacebookCount":0,"Summary":"As part of the series of posts announced at this initial blog post (.NET Application Architecture Guidance) that explores each of the architecture areas currently covered by our team, this current blog post focuses on &#8220;Mobile Apps with Xamarin.Forms: Architecture and Patterns guidance&#8220;. Just as a reminder, the four introductory blog posts of this series are (or... <a aria-label=\"read more about Mobile Apps with Xamarin.Forms: Architecture and Patterns guidance\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/08/25/xamarin-patterns/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/08/25/xamarin-patterns/","RawContent":null},{"Title":"The week in .NET – Project File Tools, Maira Wenzel, Mixed Reality in Miami, and links!","PublishedOn":"2017-08-23T00:00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Previous posts: .NET Core 2.0, ASP.NET Core 2.0, Entity Framework 2.0, Visual Studio 2017 Update 3, enterprise Entity Framework Core in Boston Rezoom.SQL, Protobuf in Orlando Nuke, Warden.NET, .NET in Bangalore Visual Studio extension of the week: Project File Tools The Project File Tools Visual Studio extension provides package name and version IntelliSense, tooltips for... <a aria-label=\"read more about The week in .NET &#8211; Project File Tools, Maira Wenzel, Mixed Reality in Miami, and links!\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/08/23/the-week-in-net-project-file-tools-maira-wenzel-mixed-reality-in-miami-and-links/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/08/23/the-week-in-net-project-file-tools-maira-wenzel-mixed-reality-in-miami-and-links/","RawContent":null},{"Title":".NET Framework Update for AppContext","PublishedOn":"2017-08-18T00:00:00","CommentsCount":2,"FacebookCount":0,"Summary":"A new update for .NET Framework is now available for the AppContext class. The behavior of the AppContext class was recently regressed. The update returns the class to the correct behavior. This update affects the .NET Framework 4.6 and later. The update is not required on Windows 10. The AppContext class was introduced in the... <a aria-label=\"read more about .NET Framework Update for AppContext\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/08/18/net-framework-update-for-appcontext/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/08/18/net-framework-update-for-appcontext/","RawContent":null},{"Title":".NET Framework August 2017 Preview of Quality Rollup","PublishedOn":"2017-08-16T00:00:00","CommentsCount":2,"FacebookCount":0,"Summary":"The August 2017 Preview of Quality Rollup is now available. Quality and Reliability This release contains the following quality and reliability improvements. ASP.NET Values added to System.Web.Cache expire immediately, with .NET Framework 4.7. [452228] Also reported at ASP.NET Forums #2123507 ASP.NET site running on Sitefinity broken, with .NET Framework 4.7. [457739] CLR CRWLock::StaticAcquireWriterLock() never returns if... <a aria-label=\"read more about .NET Framework August 2017 Preview of Quality Rollup\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/08/16/net-framework-august-2017-preview-of-quality-rollup/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/08/16/net-framework-august-2017-preview-of-quality-rollup/","RawContent":null},{"Title":"The week in .NET – .NET Core 2.0, ASP.NET Core 2.0, Entity Framework 2.0, Visual Studio 2017 Update 3, enterprise Entity Framework Core in Boston, and links!","PublishedOn":"2017-08-15T00:00:00","CommentsCount":2,"FacebookCount":0,"Summary":"Previous posts: Rezoom.SQL, Protobuf in Orlando Nuke, Warden.NET, .NET in Bangalore MIST, F# in NYC .NET Core 2.0, ASP.NET Core 2.0, Entity Framework 2.0, and Visual Studio 2017 Update 3 launched! This is a week to celebrate for the .NET community, as .NET Core 2.0, ASP.NET Core 2.0, and Entity Framework 2.0 shipped! We&#8217;re also... <a aria-label=\"read more about The week in .NET &#8211; .NET Core 2.0, ASP.NET Core 2.0, Entity Framework 2.0, Visual Studio 2017 Update 3, enterprise Entity Framework Core in Boston, and links!\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/08/15/the-week-in-net-net-core-2-0-asp-net-core-2-0-entity-framework-2-0-visual-studio-2017-update-3-enterprise-entity-framework-core-in-boston-and-links/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/08/15/the-week-in-net-net-core-2-0-asp-net-core-2-0-entity-framework-2-0-visual-studio-2017-update-3-enterprise-entity-framework-core-in-boston-and-links/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"6515896963","Type":"PullRequestEvent","CreatedAt":"2017-08-26T22:20:18","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/85","RelatedDescription":"Merged pull request \"Create telerik-ui-for-uwp.md\" (#85) at dotnet/home","RelatedBody":"Submission of Telerik UI for UWP"},{"Id":"6515896506","Type":"PullRequestEvent","CreatedAt":"2017-08-26T22:19:49","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/86","RelatedDescription":"Merged pull request \"Corrected list of maintainers\" (#86) at dotnet/home","RelatedBody":""},{"Id":"6483200432","Type":"PullRequestEvent","CreatedAt":"2017-08-18T19:58:41","Actor":"gep13","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/86","RelatedDescription":"Opened pull request \"Corrected list of maintainers\" (#86) at dotnet/home","RelatedBody":""},{"Id":"6470589367","Type":"PullRequestEvent","CreatedAt":"2017-08-17T09:24:13","Actor":"stefanov-stefan","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/85","RelatedDescription":"Opened pull request \"Create telerik-ui-for-uwp.md\" (#85) at dotnet/home","RelatedBody":"Submission of Telerik UI for UWP"},{"Id":"6404144202","Type":"IssuesEvent","CreatedAt":"2017-08-07T01:09:52","Actor":"ghuntley","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/issues/84","RelatedDescription":"Opened issue \"How can we embed images into the .NET foundation website?\" (#84) at dotnet/home","RelatedBody":"The CSP policy on https://dotnetfoundation.org/reactiveui is preventing embedding images. I'd prefer to _not to adjust CSP_ policy to add the reactiveui.net and instead have some way to pull-request images into this repository.\r\n\r\n![image](https://user-images.githubusercontent.com/127353/29008831-a28cfee4-7b60-11e7-81e4-46342b074d4b.png)\r\n"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"6541935607","Type":"IssuesEvent","CreatedAt":"2017-09-01T22:57:04","Actor":"terrajobst","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/31","RelatedDescription":"Opened issue \"Issues with .NET Standard 2.0 with .NET Framework & NuGet\" (#31) at dotnet/announcements","RelatedBody":"## Summary\r\n\r\nWe've designed .NET Standard & our tooling so that projects targeting .NET Framework 4.6.1 can consume NuGet packages & projects targeting .NET Standard 2.0 or earlier. Unfortunately, we've seen a few issues around that scenario. The purpose of this document is to summarize the issues, outline our plan on addressing them, and providing workarounds you can deploy with today's state of our tooling.\r\n\r\n## Symptoms and root cause\r\n\r\nThe [primary symptom](https:/github.com/dotnet/standard/issues/410) is that applications crash with a `FileLoadException` or a `FileNotFoundException`. Another symptom is warnings at build time regarding assembly versions. This is due to one or both of the following issues:\r\n\r\n1. Missing binding redirects\r\n2. Missing binaries that come from indirect NuGet packages\r\n\r\n### Missing binding redirects\r\n\r\n.NET Standard 1.x was based around contracts. Many of these contracts shipped with .NET Framework 4.5 and later. However, different versions of .NET Framework picked up different versions of these contracts, as by-design of contract versioning. As a side effect of marking .NET Framework 4.6.1 as implementing .NET Standard 2.0, some projects will now start picking up binaries built for .NET Standard 1.5 and 1.6 (as opposed to previously where .NET Framework 4.6.1 was considered as implementing .NET Standard 1.4). This results in mismatches of the assembly versions between what was shipped in .NET Framework and what was part of .NET Standard 1.5/1.6.\r\n\r\nThis can be addressed by binding redirects. As writing them by hand sucks, we added an [Automatic Binding Redirect Generation][abrg] feature in .NET Framework 4.5.1. This feature is opt-in. Unfortunately, it's not enabled based on target framework, but by which target framework was selected when the project was created (as the feature is turned on via an MSBuild property that is conditionally emitted by the template). In practice, this means it's mostly off you often upgrade existing projects, rather than creating new ones.\r\n\r\n[abrg]: https://docs.microsoft.com/en-us/dotnet/framework/configure-apps/how-to-enable-and-disable-automatic-binding-redirection\r\n\r\n### Missing binaries\r\n\r\nThere are two primary flavors of NuGet: `packages.config` and `PackageReference`.\r\n\r\n* With `packages.config`, each project has a config file with a flattened graph of all the NuGet dependencies. The project file in turn has direct links to all the assets. The assets are selected at install time. None of this includes indirect NuGet references coming from referenced projects.\r\n\r\n* With `PackageReference` each project contains MSBuild `PackageReference` items. The project file contains no references to any assets as the assets are selected at build time. Package restore will compute the graph of all packages, including indirect NuGet references coming from referenced projects.\r\n\r\nThe default for .NET Framework projects is `packages.config`. This ensures more compatibility because `PackageReference` doesn't support all the features that `packages.config` did, for example, PowerShell install scripts and content.\r\n\r\nThe only supported mode for SDK-style projects (.NET Core/.NET Standard) is `PackageReference`. This means that a .NET Framework project referencing a .NET Standard project ends up crossing the streams between two different NuGet models. When the .NET Standard project references NuGet packages that the .NET Framework project doesn't reference, the application ends up missing all binaries coming from those packages.\r\n\r\nWhy has this worked before? Because with` packages.config`, all dependencies are copied to each project's output folder. MSBuild copies them up from there. With `PackageReference`, we don't copy the binaries because it relies on the consuming project to see its dependencies and extract the proper asset itself. This allows the consuming project to pick up the right assets for packages that use bait & switch (which many of the .NET packages must do).\r\n\r\n### Plan\r\n\r\nThe plan is to address these issues moving forward as follows:\r\n\r\n1. **Converge on `PackageReference` for all project types**, including .NET Framework. The short-term plan for (1) is to start blocking project-to-project references in Visual Studio 15.4 that will end up crossing the streams between `packages.config` and `PackageReference`. This block is UI only; you can still edit the reference by editing the project by hand. The error message will instruct you to switch the .NET Framework project to `PackageReference` if you want to reference a .NET Standard project. Referencing .NET Standard binaries or NuGet packages will not require this, it's only about project-to-project references. In later releases, we plan on providing a converter. The challenge is that `packages.config` has features we can't offer for `PackagReference` across the board, in particular PowerShell install scripts and content. We'll need good guidance and mitigations, if applicable.\r\n\r\n2. **Ensure binding redirects are on by default**. Short term, this means we need to fix our target files to make sure we turn on automatic binding redirect generation. However, binding redirects don't work well in all scenarios, when there is no application project (like unit tests or add-ins). We need to work on a plan to bring the regular “higher wins” binding policy without binding redirects. This needs a proposal and proper vetting, but it seems we've reached the point where this is necessary.\r\n\r\n## Workarounds\r\n\r\n### Regular .NET Framework projects\r\n\r\n1. Enable [automatic binding redirects][abrg] in the root .NET Framework application.\r\n2. Make sure your root application project doesn't use `packages.config` but uses `PackageReference` for NuGet packages\r\n    * If you currently don't have `packages.config`, simply add `<RestoreProjectStyle>PackageReference</RestoreProjectStyle>` to your project file\r\n    * If you currently do have a `packages.config`, convert the contents to packages references in the project file. The syntax is like this:\r\n        - `<PackageReference Include=\"package-id\" Version=\"package-version\" />`\r\n\r\n### ASP.NET web applications and web sites\r\n\r\n1. Web applications and web sites don't support automatic binding redirect generation. In order to resolve binding conflicts, you need to double click the warning in the error list and Visual Studio will add them to your `web.config` file.\r\n2. In web application projects, you should enable `PackageReference` like mentioned above. In web sites, you cannot use `PackageReference` as there is no project file. In that case, you need to install all NuGet packages into your web site that any of the direct or indirect project references depend on.\r\n\r\n## Discussion\r\n\r\nFor a discussion, please go to [https://github.com/dotnet/standard/issues/481]"}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"6612385856","Type":"PullRequestEvent","CreatedAt":"2017-09-20T03:27:56","Actor":"kingces95","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/14079","RelatedDescription":"Opened pull request \"Update windows-test-instructions.md\" (#14079) at dotnet/coreclr","RelatedBody":""},{"Id":"6612252134","Type":"PullRequestEvent","CreatedAt":"2017-09-20T02:33:01","Actor":"parjong","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/14078","RelatedDescription":"Opened pull request \"[x86/Linux] 16-byte aligned StubDispatchFixupStub\" (#14078) at dotnet/coreclr","RelatedBody":"StubDispatchFixupStub currently breaks stack alignment, and thus segmentation fault occurs when System.Private.CoreLib.dll is crossgened.\r\n\r\nThis commit revises StubDispatchFixupStub not to break stack alignment, and ass a stack alignment check before StubDispatchFixupWorker call."},{"Id":"6612138842","Type":"IssuesEvent","CreatedAt":"2017-09-20T01:46:08","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/14060","RelatedDescription":"Closed issue \"GC and locality of reference\" (#14060) at dotnet/coreclr","RelatedBody":"See https://github.com/dotnet/csharplang/issues/922#issuecomment-330535022 where proposal was original posted.\r\n\r\nArrays are allocated in memory contiguously. so unlike linked list, there is no pointer for each item of array. there is only one pointer for array, and rest of items are randomly accessible using indexer.\r\n\r\nThe reason why arrays are much faster than linked lists is because they are basically contiguous block of memory. locality is high and there will be less cache misses,\r\n\r\n[From this article](https://msdn.microsoft.com/en-us/library/eye126ky.aspx#Anchor_1) \r\n\r\n>Missed cache hits, on both the internal and external cache, as well as page faults (going to secondary storage for program instructions and data) slow the performance of a program.\r\nA CPU cache hit can cost your program 10–20 clock cycles. An external cache hit can cost 20–40 clock cycles. A page fault can cost one million clock cycles (assuming a processor that handles 500 million instructions/second and a time of 2 millisecond for a page fault). Therefore, it is in the best interest of program execution to write code that will reduce the number of missed cache hits and page faults.\r\nOne reason for slow programs is that they take more page faults or miss the cache more often than necessary. To avoid this, it's important to use data structures with good locality of reference, which means keeping related things together. Sometimes a data structure that looks great turns out to be horrible because of poor locality of reference, and sometimes the reverse is true.\r\n\r\nI was thinking that why not introduce a mechanism to increase locality in memory for some objects simply by noting it. with help of GC of course which can move objects around. \r\n\r\nsometimes developer knows better than GC, so we could ask him, please keep these together, because we are likely to use these objects together. but again GC can do anything reasonable himself, it will take this as hint.\r\n\r\n```\r\npublic class Bucket\r\n{\r\n    int hashcode;\r\n    int T value;\r\n\r\n    [KeepLocalityHigh] // as suggested by @mikedn, (something like this)\r\n    Bucket next;\r\n}\r\n```\r\n\r\nIn this simple example, you can see that Bucket in dynamically allocated. by noting attribute on that field, we tell runtime that locality is important here. so if possible keep references related here together. this can reduce number of cache misses (<s>and page faults</s>❓), and you are still using power of linked list structures. \r\nI believe this could significantly increase performance where number of data is large and locality is high.\r\n\r\nIs this even possible to be implemented without causing havoc in GC or CLR mechanism? I know its not that simple though, I'm just throwing ideas here.\r\n"},{"Id":"6612129529","Type":"IssuesEvent","CreatedAt":"2017-09-20T01:42:24","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/732","RelatedDescription":"Closed issue \"Simplified GC\" (#732) at dotnet/coreclr","RelatedBody":"My personal feeling is that a lot of GC and PL-implementation research is tainted by the JVM. Therefore, I think the ability to run tests on Core CLR would be extremely valuable. Consequently, I would like to propose the idea of a simple GC drop-in for Core CLR that provides minimal features in the simplest possible way and can serve as a foundation for anyone interested to start working on garbage collection in Core CLR. For example, a stop-the-world mark-sweep GC using malloc and free with a no-op write barrier.\n\nSome things I would like to use this for:\n1. Quantify the accuracy of the generational hypothesis in the context of a VM with value types. What proportion of objects really do die young in real programs?\n2. Try a mark region based GC. How much slower is a non-moving GC when the generational hypothesis applies?\n3. See how much lost performance can be regained by coding in a different style. Can we parse text files as quickly without a generational GC by using string slices instead of copying substrings?\n"},{"Id":"6612105880","Type":"IssuesEvent","CreatedAt":"2017-09-20T01:32:34","Actor":"xuliujian","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/14077","RelatedDescription":"Opened issue \"Can not connect to remote Raspberry PI running Windows IoT over SSH by Visual Studio 2017\" (#14077) at dotnet/coreclr","RelatedBody":"When connecting to remote Raspberry PI running Windows IoT over SSH by Visual Studio 2017 (version 15.3.4), there is an error so that can not connect successfully.  The exception information such as:\r\n\r\n`liblinux.ExceptionBase: Could not retrieve the system properties. Please see the inner exception for more details. ---> liblinux.Shell.CommandingException: Timed out executing command 'cat /etc/*-release', waited for 15137.9066ms. ---> liblinux.Ssh.Common.SshOperationTimeoutException: Command 'cat /etc/*-release' has timed out.\r\n   at liblinux.Ssh.SshCommand.WaitOnHandle(WaitHandle waitHandle)\r\n   at liblinux.Ssh.SshCommand.EndExecute(IAsyncResult asyncResult)\r\n   at liblinux.Shell.NonHostedCommand.OnRun()\r\n   --- End of inner exception stack trace ---\r\n   at liblinux.Shell.NonHostedCommand.OnRun()\r\n   at liblinux.Shell.CommonCommandBase.Run()\r\n   at liblinux.Shell.CommandHost.ExecuteCommand(String commandText, TimeSpan timeout)\r\n   at liblinux.Shell.CommandHost.ExecuteCommand(String commandText, Int32 timeout)\r\n   at liblinux.Shell.CommandHost.ExecuteCommand(String commandText)\r\n   at liblinux.DistributionId.GetSystemId(IRemoteSystem remoteSystem)\r\n   at liblinux.DistributionId.GetDistributionId(IRemoteSystem remoteSystem)\r\n   at liblinux.SystemProperties.Populate()\r\n   --- End of inner exception stack trace ---\r\n   at liblinux.SystemProperties.Populate()\r\n   at liblinux.SystemProperties..ctor(IRemoteSystem remoteSystem)\r\n   at liblinux.UnixSystem.get_Properties()\r\n   at SSHConnectionUI.MainWindow.login_Click(Object sender, RoutedEventArgs e)\r\n`\r\n\r\nBut when using Putty or SecureCRT tool to connect, it is ok. Additionally, visual studio 2017 can connect to remote Raspberry PI running with Linux.\r\n"},{"Id":"6612032303","Type":"IssuesEvent","CreatedAt":"2017-09-20T01:01:53","Actor":"ygc369","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/14076","RelatedDescription":"Opened issue \"Cache miss problem after GC\" (#14076) at dotnet/coreclr","RelatedBody":"After GC, data in cpu cache might become invalid, so there would be a lot of cache misses, which would harm performance. Is there any way to solve this problem? Could GC \"update\" or \"refresh\" the cache data instead of making cache invalid? Is it possible to keep the cache data still valid after GC?"},{"Id":"6611960341","Type":"PullRequestEvent","CreatedAt":"2017-09-20T00:30:44","Actor":"BruceForstall","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/14075","RelatedDescription":"Opened pull request \"Refine ARM64 CI stress modes allowed\" (#14075) at dotnet/coreclr","RelatedBody":"For JitStressRegs, allow 0x10, 0x80, 0x1000; don't use simple 10 or 80\r\nin names (to match netci.groovy).\r\n\r\nRemove \"tieredcompilation\" from allowed modes; it is not supported in the\r\nCI smarty helper currently."}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"6612344569","Type":"IssuesEvent","CreatedAt":"2017-09-20T03:10:15","Actor":"ahdung","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/7680","RelatedDescription":"Opened issue \"dotnet x.dll get \"An assembly specified in the application dependencies manifest\"\" (#7680) at dotnet/cli","RelatedBody":"\r\n![_20170920105746](https://user-images.githubusercontent.com/12094247/30624948-d81c8bba-9df2-11e7-8753-d2510ea56b9a.png)\r\n\r\n\r\n## Environment and Description\r\n- pc B installed dotnet core 2.0 runtime win64, os is windows server 2008 r2 x64 with SP1\r\n- pc A use VS2017 write a asp.net core 2.0 project, and published to a dir\r\n- on A use dotnet dir\\x.dll no error\r\n- copy dir to B, on B dotnet dir\\x.dll get above error\r\n\r\n\r\n\r\n\r\n"},{"Id":"6611729455","Type":"PullRequestEvent","CreatedAt":"2017-09-19T23:01:38","Actor":"rogersachan","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/7679","RelatedDescription":"Opened pull request \"Update Mac OS X to macOS to reflect name on site (README.md only)\" (#7679) at dotnet/cli","RelatedBody":"Most newer dotnet material refers to the Mac operating system as macOS. This pull request reflects the change.\r\n\r\nReference: https://www.microsoft.com/net/core#macos\r\n"},{"Id":"6611406489","Type":"PullRequestEvent","CreatedAt":"2017-09-19T21:26:23","Actor":"johnbeisner","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/7676","RelatedDescription":"Merged pull request \"Skip DefaultProxy resolution code if an exception is thrown\" (#7676) at dotnet/cli","RelatedBody":"Addresses: https://github.com/dotnet/cli/issues/6747"},{"Id":"6611046277","Type":"IssuesEvent","CreatedAt":"2017-09-19T20:03:03","Actor":"wli3","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/7677","RelatedDescription":"Closed issue \"System.ArgumentOutOfRangeException thrown if verbosity has an incorrect value\" (#7677) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\nI used `debug` instead `d` for `-v` and instead of error saying that the used verbosity is not valid I got this:\r\n```\r\ndotnet restore -v debug\r\nSystem.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collectio\r\nn.\r\nParameter name: index\r\n   at System.ThrowHelper.ThrowArgumentOutOfRange_IndexException()\r\n   at System.SZArrayHelper.get_Item[T](Int32 index)\r\n   at System.Linq.Enumerable.ElementAt[TSource](IEnumerable`1 source, Int32 index)\r\n   at Microsoft.DotNet.Cli.Telemetry.TelemetryFilter.LogVerbosityForAllTopLevelCommand(ICollection`1 result, ParseResult\r\n parseResult, String topLevelCommandName)\r\n   at Microsoft.DotNet.Cli.Telemetry.TelemetryFilter.Filter(Object objectToFilter)\r\n   at Microsoft.DotNet.Cli.Utils.TelemetryEventEntry.SendFiltered(Object o)\r\n   at Microsoft.DotNet.Cli.Program.ProcessArgs(String[] args, ITelemetry telemetryClient)\r\n   at Microsoft.DotNet.Cli.Program.Main(String[] args)\r\n```\r\n## Expected  behavior\r\nA meaningful error message\r\n\r\n## Actual behavior\r\nArgumentOutOfRangeException\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n```\r\n.NET Command Line Tools (2.1.0-preview1-007042)\r\n\r\nProduct Information:\r\n Version:            2.1.0-preview1-007042\r\n Commit SHA-1 hash:  e94a82c9a3\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.15063\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Users\\XXX\\.dotnet\\x64\\sdk\\2.1.0-preview1-007042\\\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.0\r\n  Build    : e8b8861ac7faf042c87a5c2f9f2d04c98b69f28d\r\n```\r\n"},{"Id":"6610432722","Type":"IssuesEvent","CreatedAt":"2017-09-19T17:46:12","Actor":"wli3","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/7675","RelatedDescription":"Closed issue \"error: Value cannot be null. error: Parameter name: projectUniqueName\" (#7675) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\n`dotnet add package WindowsAzure.Storage --version 1.7.0`\r\n\r\n## Expected  behavior\r\nSome success message indicating that the package has been added as a reference to the *.csproj file in the current working directory.\r\n\r\n## Actual behavior\r\nMicrosoft (R) Build Engine version 15.1.1012.6693\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  Writing C:\\Users\\dchen\\AppData\\Local\\Temp\\tmpE349.tmp\r\ninfo : Adding PackageReference for package 'WindowsAzure.Storage' into project 'C:\\Source\\dchen\\...\\...\\...\\....csproj'.\r\nerror: Value cannot be null.\r\nerror: Parameter name: projectUniqueName\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n.NET Command Line Tools (1.0.3)\r\n\r\nProduct Information:\r\n Version:            1.0.3\r\n Commit SHA-1 hash:  37224c9917\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.15063\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\1.0.3\r\n\r\n\r\n\r\n\r\n\r\n\r\n"}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"6611478365","Type":"PullRequestEvent","CreatedAt":"2017-09-19T21:45:01","Actor":"sbomer","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/499","RelatedDescription":"Opened pull request \"Use target path in FileNode for trimming logic\" (#499) at dotnet/standard","RelatedBody":"This prevents problems caused by dlls with the same name but different\r\ndestination directories, such as satellite assemblies. Previously\r\nthese would cause a crash in the trimming logic by causing different\r\nfiles with the same name to be inserted into a dictionary.\r\n\r\nThe logic to compute the target path was taken from the SDK:\r\nhttps://github.com/dotnet/sdk/blob/cd25d6bbfc2aac61cc790c511900427ac64fdaa8/src/Tasks/Common/src/ItemUtilities.cs#L117.\r\n\r\n@ericstj please review. Is there a better way to get the target path than duplicating code from the SDK?"},{"Id":"6609254688","Type":"IssuesEvent","CreatedAt":"2017-09-19T14:00:00","Actor":"cilerler","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/498","RelatedDescription":"Opened issue \"WPF w/ ClickOnce throws an error when it has .NetStandard reference\" (#498) at dotnet/standard","RelatedBody":"If you add a _.NetStandard_ project as reference to _WPF_ application which gets deployed through _ClickOnce_ throws the error below.\r\n\r\n## Error message\r\n\r\n> Unable to install or run the application.  The application requires that assembly **System.Drawing.Primitives** Version **4.0.2.0** be installed in the Global Assembly Cache (GAC) first.\r\n\r\nApplication itself runs fine _(direct click on **.exe** file)_ however installer _(direct click on **.application** file)_ throws that error message.\r\n\r\n## Steps to reproduce:\r\n1. **Create** a new solution with _WPF_ application via _VS2017_\r\n2. **Build** and **Publish**\r\n3. **Add** new _.NET Standard_ library project into the solution\r\n4. **Reference** it from _WPF_ project\r\n5. **Build** and **Publish**\r\n6. **Attempt** to Install by clicking the **.application file**\r\n\r\n## Additional Resource\r\n- I saw that issue reported at [Visual Studio community](https://developercommunity.visualstudio.com/content/problem/111414/clickonce-with-dependcy-with-netstandard-does-not.html) _(which is probably a wrong place)_ \r\n- I also found it at [StackOverflow](https://stackoverflow.com/questions/45843533/clickonce-deployment-does-not-install-as-expected) _(which also includes a [repository](https://github.com/colhountech/WPF_With_NetStandard) link to reproduce the issue)_"},{"Id":"6602801945","Type":"IssuesEvent","CreatedAt":"2017-09-18T09:59:01","Actor":"eriawan","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/497","RelatedDescription":"Opened issue \"Creating .NET Standard 2.0 class library project will always have reference to Microsoft.NETCore.Platforms 1.1.0 by default\" (#497) at dotnet/standard","RelatedBody":"# Summary\r\n\r\nCreating a .NET Standard 2.0 class library project should have correct reference to Microsoft.NETCore.Platform 2.0.0, but actual reference points to version 1.1.0 by default.\r\n\r\n# Detail description\r\n\r\nEnvironments:\r\n\r\n- Windows 10 Anniversary Update\r\n- Visual Studio 2017 Enterprise with update: 15.3.3 and .NET Core workload installed (also tested with Visual Studio 2017 15.3.1 and using Community Edition)\r\n\r\nSteps to reproduce:\r\n- Create a .NET Standard class library \r\n- expand the Dependency node on the Solution Explorer\r\n\r\nThis is the steps screenshot:\r\n![create_netstandard_library](https://user-images.githubusercontent.com/8773147/30537081-8f26b310-9c92-11e7-82eb-59263813eedb.gif)\r\n\r\n\r\nBy default, the creation of .NET Standard 2 class library should always point to v2.0.0 not the 1.1.0.\r\n\r\nThis is the close-up screenshot of the dependencies:\r\n\r\n![netstandard_dependencies](https://user-images.githubusercontent.com/8773147/30537090-9952c694-9c92-11e7-852c-cfca75bdbe1f.png)\r\n\r\n \r\n# Expected result\r\n\r\nThe references should point to **Microsoft.NETCore.Platforms** _**v2.0.0**_ instead of older version, because this version is the version used by .NET Standard 2.0.\r\n \r\nIs this a bug or by design?\r\n\r\ncc @terrajobst and @weshaggard "},{"Id":"6598912195","Type":"IssuesEvent","CreatedAt":"2017-09-16T12:56:18","Actor":"ddobric","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/496","RelatedDescription":"Opened issue \"APIs of Net\" (#496) at dotnet/standard","RelatedBody":"What is the roadmap of https://apisof.net ?\r\n\r\nIt is a very helpful application. However it should be improved.\r\nRight now, even certificate has expired. : DLG_FLAGS_SEC_CERT_DATE_INVALID\r\n\r\nThanks\r\n\r\n\r\n\r\n\r\n"}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"6612611431","Type":"IssuesEvent","CreatedAt":"2017-09-20T05:11:47","Actor":"weitzhandler","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/24161","RelatedDescription":"Opened issue \"Please implement SymmetricExceptWith in LINQ\" (#24161) at dotnet/corefx","RelatedBody":"## Motive\r\n\r\n`HashSet<T>` provides a wonderful method that allows getting the [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference) of two collections, that is, only the values that exists in either one of the collections, but not in both.\r\n\r\n## Use case\r\nImagine you have an existing store entity and a client entity that just came in to be saved.\r\nThe entity has a collection of related entities (1 to M).\r\n\r\nYou want to mess with those related entities that were either added or removed, but not the others.\r\n\r\n## Implementation\r\n\r\nAdd the following methods to the `Enumerable` class:\r\n\r\n    public static SymmetricExceptWith<T>(this IEnumerable<T> collection, IEnumerable<T> other);\r\n\r\n    public static SymmetricExceptWith<T>(this IEnumerable<T> collection, IEnumerable<T> other, \r\n      IEqualityComparer<TSource> comparer);\r\n\r\nArea: System.Linq"},{"Id":"6612541977","Type":"IssuesEvent","CreatedAt":"2017-09-20T04:37:49","Actor":"mguinness","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/24160","RelatedDescription":"Opened issue \"Support folder names ending with a period?\" (#24160) at dotnet/corefx","RelatedBody":"I have an issue related to Windows folder names that end with a period.  In my case this was caused by a cloud storage desktop sync application where creating folders in the cloud like \"Some Corp Ltd.\" is possible.\r\n\r\nSince there was already work done to support long filenames in .NET Core (see https://github.com/dotnet/corefx/issues/645) I thought it might be feasible that this issue might be addressed as well.\r\n\r\nI'm aware of libraries like [AlphaFS](http://alphafs.alphaleonis.com/) (using [LongFullPath](http://alphafs.alphaleonis.com/doc/2.1/api/html/5E9EE47E.htm)) that work with the full framework, but I wondering if anything is planned for .NET Core (I'm assuming this isn't an issue for Linux).\r\n\r\nI understand that it's an edge case, but currently using Directory.Exists in this situation returns false which is a misleading IMHO.\r\n\r\n@JeremyKuhne is it possible to support folders with names ending with a period in System.IO.FileSystem?  "},{"Id":"6612493529","Type":"PullRequestEvent","CreatedAt":"2017-09-20T04:14:49","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/pull/24154","RelatedDescription":"Closed pull request \"Update BuildTools, CoreClr, CoreSetup, Standard to prerelease-02020-01, preview1-25720-03, preview1-25719-04, preview1-25719-02, respectively (master)\" (#24154) at dotnet/corefx","RelatedBody":""},{"Id":"6612412402","Type":"PullRequestEvent","CreatedAt":"2017-09-20T03:38:10","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/pull/24134","RelatedDescription":"Closed pull request \"Change AsSpan to property Span and rename AsMemory to Memory\" (#24134) at dotnet/corefx","RelatedBody":"The CI will be green after this PR goes through: https://github.com/dotnet/coreclr/pull/14057\r\n\r\nFixes https://github.com/dotnet/coreclr/issues/13801\r\nPart of https://github.com/dotnet/corefx/issues/23862\r\n\r\ncc @KrzysztofCwalina, @stephentoub "},{"Id":"6612249593","Type":"IssuesEvent","CreatedAt":"2017-09-20T02:32:01","Actor":"Jiayili1","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/24159","RelatedDescription":"Opened issue \"Test: System.IO.MemoryMappedFiles.Tests.MemoryMappedFileTests_CreateFromFile.ValidArgumentCombinationsWithPath_ModesOpenOrCreate failed with \"System.IO.IOException\"\" (#24159) at dotnet/corefx","RelatedBody":"Failed test: System.IO.MemoryMappedFiles.Tests.MemoryMappedFileTests_CreateFromFile.ValidArgumentCombinationsWithPath_ModesOpenOrCreate\r\n\r\nConfiguration: outerloop_netcoreapp_win7_release\r\n\r\nDetail: https://ci.dot.net/job/dotnet_corefx/job/master/job/outerloop_netcoreapp_win7_release/252/testReport/System.IO.MemoryMappedFiles.Tests/MemoryMappedFileTests_CreateFromFile/ValidArgumentCombinationsWithPath_ModesOpenOrCreate_mode__Open__mapName__null__capacity__10000__access__CopyOnWrite_/\r\n\r\nMESSAGE:\r\n~~~\r\nSystem.IO.IOException : The operation completed successfully\r\n~~~\r\nSTACK TRACE:\r\n~~~\r\nat System.IO.MemoryMappedFiles.MemoryMappedView.Flush(UIntPtr capacity) in D:\\j\\workspace\\outerloop_net---15cfbbd5\\src\\System.IO.MemoryMappedFiles\\src\\System\\IO\\MemoryMappedFiles\\MemoryMappedView.Windows.cs:line 125 \r\nat System.IO.MemoryMappedFiles.MemoryMappedViewAccessor.Dispose(Boolean disposing) in D:\\j\\workspace\\outerloop_net---15cfbbd5\\src\\System.IO.MemoryMappedFiles\\src\\System\\IO\\MemoryMappedFiles\\MemoryMappedViewAccessor.cs:line 44 \r\nat System.IO.MemoryMappedFiles.Tests.MemoryMappedFilesTestBase.CreateAndValidateViews(MemoryMappedFile mmf, Int64 capacity, MemoryMappedFileAccess access) in D:\\j\\workspace\\outerloop_net---15cfbbd5\\src\\System.IO.MemoryMappedFiles\\tests\\MemoryMappedFilesTestsBase.cs:line 123 \r\nat System.IO.MemoryMappedFiles.Tests.MemoryMappedFilesTestBase.ValidateMemoryMappedFile(MemoryMappedFile mmf, Int64 expectedCapacity, MemoryMappedFileAccess expectedAccess, HandleInheritability expectedInheritability) in D:\\j\\workspace\\outerloop_net---15cfbbd5\\src\\System.IO.MemoryMappedFiles\\tests\\MemoryMappedFilesTestsBase.cs:line 96 \r\nat System.IO.MemoryMappedFiles.Tests.MemoryMappedFileTests_CreateFromFile.ValidArgumentCombinationsWithPath_ModesOpenOrCreate(FileMode mode, String mapName, Int64 capacity, MemoryMappedFileAccess access) in D:\\j\\workspace\\outerloop_net---15cfbbd5\\src\\System.IO.MemoryMappedFiles\\tests\\MemoryMappedFile.CreateFromFile.Tests.cs:line 323\r\n~~~"},{"Id":"6612138905","Type":"PullRequestEvent","CreatedAt":"2017-09-20T01:46:09","Actor":"ViktorHofer","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/24158","RelatedDescription":"Opened pull request \"Regex.Compiled - Reimplement in-memory compilation of regex patterns into MSIL\" (#24158) at dotnet/corefx","RelatedBody":"I need to test the performance implications of this change locally. I will update this post with the numbers later. I will test it against an optimized version of the regex-redux benchmark (benchmark game).\r\n\r\nThe `CompileToAssembly` API (RegexTypeCompiler.cs) depends on `System.Reflection.Emit.AssemblyBuilder.Save` (https://github.com/dotnet/corefx/issues/4491) which isn't in Core yet.\r\n\r\nThe current Regex implementation produces a lot of HEAP pressure. Using the static Regex methods doesn't reduce the number of allocations as they are just creating a new Regex object underneath and calling its instance method. Something to investigate further but not scope of this change.\r\n\r\ncc @danmosemsft @jkotas "}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"6612644840","Type":"PullRequestEvent","CreatedAt":"2017-09-20T05:27:20","Actor":"KevinH-MS","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/22147","RelatedDescription":"Merged pull request \"Fix ngen priority for command line compilers...\" (#22147) at dotnet/roslyn","RelatedBody":"**Customer scenario**\r\n\r\nInstall update...command line compilers are slow for some period of time...then they return to normal.\r\n\r\n**Bugs this fixes:**\r\n\r\n(either VSO or GitHub links)\r\n\r\n**Workarounds, if any**\r\n\r\nWait patiently (up to 24 hours) for ngen queue to execute fully.\r\n\r\n**Risk**\r\n\r\nzip...zero...zilch...nada...\r\n\r\n**Performance impact**\r\n\r\nBetter experience compiling immediately after installing VS update (at the expense of minor additional install time).\r\n\r\n**Is this a regression from a previous update?**\r\n\r\nYes\r\n\r\n**Root cause analysis:**\r\n\r\nThis was missed when setup projects were ported to Willow.\r\n\r\n**How did we miss it?  What tests are we adding to guard against it in the future?**\r\n\r\n🤔 \r\n\r\n**How was the bug found?**\r\n\r\ncustomer reported\r\n\r\n**Test documentation updated?**\r\n\r\nIf this is a new non-compiler feature or a significant improvement to an existing feature, update https://github.com/dotnet/roslyn/wiki/Manual-Testing once you know which release it is targeting.\r\n"},{"Id":"6612111358","Type":"IssuesEvent","CreatedAt":"2017-09-20T01:34:56","Actor":"KirillOsenkov","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/22215","RelatedDescription":"Opened issue \"Redesign how workspace kinds work\" (#22215) at dotnet/roslyn","RelatedBody":"Having a single string as a workspace kind has limitations. Instead, if workspaces could have multiple kinds, such as \"tags\", one could export workspace services targeting tags, and not specific workspace kinds.\r\n\r\nThere should be an M:N relationship allowing all combination between workspace services and workspaces. Case in point: this service is only exported for 3 specific workspaces and if you're not one of them, this service won't get exported for you.\r\n\r\nhttp://source.roslyn.io/#Microsoft.CodeAnalysis.Features/Diagnostics/DiagnosticAnalyzerService_IncrementalAnalyzer.cs,14"},{"Id":"6612104862","Type":"IssuesEvent","CreatedAt":"2017-09-20T01:32:09","Actor":"KirillOsenkov","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/22214","RelatedDescription":"Opened issue \"Document how to turn on diagnostic analyzers for a custom workspace\" (#22214) at dotnet/roslyn","RelatedBody":"**Version Used**: \r\n8f02e04893\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Have a custom workspace of type \"Foo\"\r\n2. Try to enable diagnostic tagger for the documents in the workspace\r\n\r\n**Expected Behavior**:\r\nThere should be docs on how to do that.\r\n\r\n**Actual Behavior**:\r\nHere are the steps I've discovered to make it work:\r\n\r\n1. Register a Solution Crawler\r\n2. Implement and export an IWorkspaceDiagnosticAnalyzerProviderService\r\n3. Make sure the workspace kind is \"Host\" otherwise the DiagnosticAnalyzerService won't get exported:\r\nhttp://source.roslyn.io/#Microsoft.CodeAnalysis.Features/Diagnostics/DiagnosticAnalyzerService_IncrementalAnalyzer.cs,14\r\n"},{"Id":"6612060742","Type":"PullRequestEvent","CreatedAt":"2017-09-20T01:13:52","Actor":"VSadov","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/21982","RelatedDescription":"Merged pull request \"Cleanup PROTOTYPE comments\" (#21982) at dotnet/roslyn","RelatedBody":"The two first commits in this PR:\r\n1) removing/fixing PROTOTYPE comments that can be fixed or no longer needed, adding bug links to the remaining\r\n2) removing remaining PROTOTYPE comments - now all paired with a bug\r\n\r\nBug links can be easily seen when switching/diffing between commits"},{"Id":"6611904726","Type":"IssuesEvent","CreatedAt":"2017-09-20T00:07:44","Actor":"VSadov","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/22213","RelatedDescription":"Opened issue \"Consider adding slow span binary to tests and test agains that\" (#22213) at dotnet/roslyn","RelatedBody":"We can switch all tests to the actual span or only some subset.\r\n\r\nFor the most part we only care about APIs exposed, so we do not strictly need to test with actual span.\r\n"},{"Id":"6611856371","Type":"IssuesEvent","CreatedAt":"2017-09-19T23:48:53","Actor":"AlekseyTs","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/20380","RelatedDescription":"Closed issue \"C# Compiler should not allow out _ within Expression trees\" (#20380) at dotnet/roslyn","RelatedBody":"This seems to be a problem related to not allowing local out parameters within Expression trees.\r\nThe problem is this: out parameters can be used in Expression trees, such as Lambda statements within LINQ Queries, but you are not allowed to use auto typed out parameters within Expression trees. If you want to use a function with an out parameter, but you do not care about the value of the out parameter, you are able to set the out parameter to _ as a discard without a compiler warning.\r\n\r\nExample:\r\n\r\n```\r\nvar canParse = new List<string>\r\n    {\r\n        \"1\",\r\n        \"x\"\r\n    }\r\n    .AsQueryable()\r\n    .Select(item => int.TryParse(item, out _))\r\n    .ToList();\r\n```\r\n\r\nWhen you compile the program it will start the build process, but you will find yourself with the following error and warning:\r\n```\r\nError\t\t\"csc.exe\" exited with code -2146232797.\t\r\nC:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\MSBuild\\15.0\\Bin\\Roslyn\\Microsoft.CSharp.Core.targets(71,5): error MSB6006: \"csc.exe\" exited with code -2146232797.\r\n\r\nWarning\tAD0001\tAnalyzer 'Microsoft.CodeAnalysis.CSharp.Diagnostics.SimplifyTypeNames.CSharpSimplifyTypeNamesDiagnosticAnalyzer' threw an exception of type 'System.NullReferenceException' with message 'Object reference not set to an instance of an object.'.\t\r\n```\r\n\r\nThis was built and easily reproducible using .NET Framework 4.6.2 in a Console application in Visual Studio 2017 with the provided code sample.\r\n\r\n```\r\nMicrosoft Visual Studio Enterprise 2017\r\nVersion 15.2 (26430.15) Release\r\n\r\nMicrosoft .NET Framework\r\nVersion 4.7.02046\r\n```"},{"Id":"6611829366","Type":"PullRequestEvent","CreatedAt":"2017-09-19T23:38:28","Actor":"jaredpar","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/22207","RelatedDescription":"Merged pull request \"Use binary logger\" (#22207) at dotnet/roslyn","RelatedBody":"This will produce more detailed logs that will help the SDK\r\nteam track down a few CI issues.\r\n"},{"Id":"6611808077","Type":"IssuesEvent","CreatedAt":"2017-09-19T23:30:27","Actor":"kentcb","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/22212","RelatedDescription":"Opened issue \"dotnet_style_qualification_for_property has faulty heuristic\" (#22212) at dotnet/roslyn","RelatedBody":"**Version Used**: \r\n\r\nVS Enterprise 2017 15.3.4\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Add `dotnet_style_qualification_for_property` to your .editorconfig with a value of `true:error`\r\n2. Add an instance property called `Foo`\r\n3. Add a statement to a static member that uses the `nameof` operator against `Foo`\r\n\r\n**Expected Behavior**:\r\n\r\nNo error triggered.\r\n\r\n**Actual Behavior**:\r\n\r\nError is triggered because `Foo` is not qualified with `this.`. However, qualifying with `this.` is itself an error because of the static context.\r\n\r\nThis is a common scenario when using bindable or dependency properties, since the field is declared statically and needs to pass in the name, which is often manifested as an instance property:\r\n```C#\r\npublic static readonly BindableProperty FooProperty =\r\n    BindableProperty.Create(\r\n        nameof(Foo),    // this triggers the error, but the suggested fix is impossible\r\n        ...);\r\n\r\npublic string Foo { ... }\r\n```\r\n\r\nHere is a repro: [EditorConfigRepro.zip](https://github.com/dotnet/roslyn/files/1316149/EditorConfigRepro.zip)\r\n"},{"Id":"6611727964","Type":"IssuesEvent","CreatedAt":"2017-09-19T23:01:10","Actor":"dpoeschl","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/22073","RelatedDescription":"Closed issue \"Generate Overrides should not be available on a static class\" (#22073) at dotnet/roslyn","RelatedBody":""}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"910262222533922818","CreatedAt":"2017-09-19T22:00:00+00:00","UserScreenname":"dotnet","Text":"Last #dotNETConf session for the day, @DorreneB shows us how to build a Cortana Skill to control bots, services, websites, &amp; apps. Tune in.","Source":"<a href=\"https://prod2.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod2</a>","RetweetCount":3,"FavoriteCount":2,"RawContent":null},{"Id":"910260985130360834","CreatedAt":"2017-09-19T21:55:05+00:00","UserScreenname":"dotnet","Text":"#dotNETConf continues on... Next up, @KUhlenhuth digs into a new level of awesomeness w/ #CSharp &amp; the VS IDE:… https://t.co/Ou6hVSbblp","Source":"<a href=\"https://prod2.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod2</a>","RetweetCount":16,"FavoriteCount":11,"RawContent":null},{"Id":"910245865213894658","CreatedAt":"2017-09-19T20:55:00+00:00","UserScreenname":"dotnet","Text":"Streaming live now @ #dotNETConf: Bringing your WinForms/WPF investments forwards w/ #UWP/.NET Standard 2.0. Watch: https://t.co/DuK0A5ycDU","Source":"<a href=\"https://prod2.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod2</a>","RetweetCount":21,"FavoriteCount":10,"RawContent":null},{"Id":"910230770236698624","CreatedAt":"2017-09-19T19:55:01+00:00","UserScreenname":"dotnet","Text":"Let's go beyond mobile for server, games &amp; more w/ #VS4Mac. @MJHutchinson is next up &amp; streaming live @ #dotNETConf… https://t.co/IwbBYyjR6r","Source":"<a href=\"https://prod2.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod2</a>","RetweetCount":12,"FavoriteCount":10,"RawContent":null},{"Id":"910215670549409792","CreatedAt":"2017-09-19T18:55:01+00:00","UserScreenname":"dotnet","Text":"Happening now @ #dotNETConf, Diagnostics 101 - Jon Skeet walks us through strategies  for when you hit a problem:… https://t.co/O7Q8qkrDbz","Source":"<a href=\"https://prod2.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod2</a>","RetweetCount":33,"FavoriteCount":17,"RawContent":null},{"Id":"910200570337775616","CreatedAt":"2017-09-19T17:55:01+00:00","UserScreenname":"dotnet","Text":"What's new @XamarinHQ? @JamesMontemagno speaks live from #dotNETConf - https://t.co/Ge2jQcjVo4 - Learn about all th… https://t.co/PGfyBoJKxK","Source":"<a href=\"https://prod2.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod2</a>","RetweetCount":10,"FavoriteCount":8,"RawContent":null},{"Id":"910185472315535361","CreatedAt":"2017-09-19T16:55:01+00:00","UserScreenname":"dotnet","Text":"Next up &amp; streaming live @ #dotNETConf: What's New in @ASPNET Core 2 - @DanRoth27 intros us to Razor Pages. Join us… https://t.co/zmxfH5JxtW","Source":"<a href=\"https://prod2.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod2</a>","RetweetCount":29,"FavoriteCount":17,"RawContent":null},{"Id":"910177922010566656","CreatedAt":"2017-09-19T16:25:01+00:00","UserScreenname":"dotnet","Text":"Happening now @Ch9 #dotNETConf - .NET Standard 2.0 w/ @JonGalloway. Streaming live to your desktop:… https://t.co/5TCZyatXdY","Source":"<a href=\"https://prod2.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod2</a>","RetweetCount":34,"FavoriteCount":24,"RawContent":null},{"Id":"910155267584741376","CreatedAt":"2017-09-19T14:55:00+00:00","UserScreenname":"dotnet","Text":"Happening now @Ch9 #dotNETConf - Streaming live to your desktop w/ a few surprises you won't want to miss: https://t.co/2OMzYsdi3Q","Source":"<a href=\"https://prod2.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod2</a>","RetweetCount":30,"FavoriteCount":31,"RawContent":null},{"Id":"910151652639780865","CreatedAt":"2017-09-19T14:40:38+00:00","UserScreenname":"dotnet","Text":"Watch .NET Conf 2017! https://t.co/FqgpWcDY5s","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":49,"FavoriteCount":54,"RawContent":null},{"Id":"910141440944156676","CreatedAt":"2017-09-19T14:00:03+00:00","UserScreenname":"dotnet","Text":"#dotNETConf, T- Minus 1 Hour! https://t.co/ol2DFJBtP1 @coolCSH, @MadsTorgersen, &amp; @MigueldeIcaza intro you to all t… https://t.co/0tedVeteZx","Source":"<a href=\"https://prod2.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod2</a>","RetweetCount":51,"FavoriteCount":45,"RawContent":null},{"Id":"908763937100898304","CreatedAt":"2017-09-15T18:46:21+00:00","UserScreenname":"dotnet","Text":"Sneak peak at .NET Conf 2017 with @BethMassi and @runfaster2000 https://t.co/4TjjHQrUja","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":39,"FavoriteCount":23,"RawContent":null},{"Id":"908559275990982656","CreatedAt":"2017-09-15T05:13:06+00:00","UserScreenname":"dotnet","Text":"Announcing SignalR for https://t.co/iOiV9qNspl Core 2.0 https://t.co/quJIZyhUdB","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":346,"FavoriteCount":276,"RawContent":null}]}},"RunOn":"2017-09-20T05:30:20.586217Z","RunDurationInMilliseconds":6463}