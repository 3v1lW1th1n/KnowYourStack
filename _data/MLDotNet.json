{"Data":{"GitHub":{"Issues":[{"Id":"410106403","IsPullRequest":true,"CreatedAt":"2019-02-14T03:16:14","Actor":"eerhardt","Number":"2547","RawContent":null,"Title":"DataView type rename","State":"open","Body":"This covers the first 3 changes proposed in #2297.\r\n\r\n1. We will ensure the class names in the `Microsoft.Data.DataView` package are unique by adding a prefix to any name deemed too general. Add a `DataView` prefix.\r\n2. Add the base type suffix to all types that derive from the current `ColumnType` class.\r\n3. Rename the properties on NumberType to match the type name in `System` namespace.\r\n\r\nThe rest of the proposed changes will come in a separate PR (this one is big enough).","Url":"https://github.com/dotnet/machinelearning/pull/2547","RelatedDescription":"Open PR \"DataView type rename\" (#2547)"},{"Id":"410094650","IsPullRequest":true,"CreatedAt":"2019-02-14T02:22:25","Actor":"zeahmed","Number":"2546","RawContent":null,"Title":"Added support for String types in TensorFlowTransformer.","State":"open","Body":"This PR fixes #2545 \r\n","Url":"https://github.com/dotnet/machinelearning/pull/2546","RelatedDescription":"Open PR \"Added support for String types in TensorFlowTransformer.\" (#2546)"},{"Id":"410093541","IsPullRequest":false,"CreatedAt":"2019-02-14T02:17:37","Actor":"zeahmed","Number":"2545","RawContent":null,"Title":"Add support for string types in TensorFlowTransformer","State":"open","Body":"There are a couple of request to support string in TensorFlowTransformer. Strings are handled quite differently in TensorFlow. Strings are variable length data. To represent string as a tensor, TensorFlow requires tensor be represented in the following way c.f.\r\n https://github.com/tensorflow/tensorflow/blob/01cf864bb0d82370c259866c0735c0358e33377c/tensorflow/c/c_api.h#L206.\r\n\r\n``` c\r\n/ --------------------------------------------------------------------------\r\n// TF_Tensor holds a multi-dimensional array of elements of a single data type.\r\n// For all types other than TF_STRING, the data buffer stores elements\r\n// in row major order.  E.g. if data is treated as a vector of TF_DataType:\r\n//\r\n//   element 0:   index (0, ..., 0)\r\n//   element 1:   index (0, ..., 1)\r\n//   ...\r\n//\r\n// The format for TF_STRING tensors is:\r\n//   start_offset: array[uint64]\r\n//   data:         byte[...]\r\n//\r\n//   The string length (as a varint), followed by the contents of the string\r\n//   is encoded at data[start_offset[i]]]. TF_StringEncode and TF_StringDecode\r\n//   facilitate this encoding.\r\n```\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/2545","RelatedDescription":"Open issue \"Add support for string types in TensorFlowTransformer\" (#2545)"},{"Id":"410077612","IsPullRequest":true,"CreatedAt":"2019-02-14T01:07:53","Actor":"codemzs","Number":"2544","RawContent":null,"Title":"Lockdown Microsoft.ML.OnnxTransform public surface, possibly rename ","State":"open","Body":"fixes #2272\r\n\r\nThere isn't anything obvious to lockdown and the only task I see here is the rename suggestion by @TomFinley \r\n","Url":"https://github.com/dotnet/machinelearning/pull/2544","RelatedDescription":"Open PR \"Lockdown Microsoft.ML.OnnxTransform public surface, possibly rename \" (#2544)"},{"Id":"409941980","IsPullRequest":true,"CreatedAt":"2019-02-14T00:50:47","Actor":"Ivanidzo4ka","Number":"2531","RawContent":null,"Title":"Hide InitialWeights in OnlineLinear trainers","State":"closed","Body":"Fixes https://github.com/dotnet/machinelearning/issues/2519\r\nRelated to https://github.com/dotnet/machinelearning/issues/2527\r\nAlso fixes mess with Weights columns for OnlineLinear trainers. Only LinearSVM uses it, so all other trainers shouldn't accept weight as column","Url":"https://github.com/dotnet/machinelearning/pull/2531","RelatedDescription":"Closed or merged PR \"Hide InitialWeights in OnlineLinear trainers\" (#2531)"},{"Id":"409561261","IsPullRequest":false,"CreatedAt":"2019-02-14T00:50:47","Actor":"Ivanidzo4ka","Number":"2519","RawContent":null,"Title":"OnlineLinear trainer InitialWeights option is not user friendly","State":"closed","Body":"```\r\n        [Argument(ArgumentType.AtMostOnce, HelpText = \"Initial Weights and bias, comma-separated\", ShortName = \"initweights\")]\r\n        [TGUI(NoSweep = true)]\r\n        public string InitialWeights;\r\n```\r\nIt need to be replaced with two fields Bias and Weights and they should be float and array of floats instead of just string","Url":"https://github.com/dotnet/machinelearning/issues/2519","RelatedDescription":"Closed issue \"OnlineLinear trainer InitialWeights option is not user friendly\" (#2519)"},{"Id":"409986610","IsPullRequest":false,"CreatedAt":"2019-02-14T00:39:57","Actor":"gilnahmias","Number":"2533","RawContent":null,"Title":"lib_lightgbm.dll isn't published to Azure App Service","State":"closed","Body":"Using `Microsoft.ML.LightGBM (0.9.0)` NuGet package to train locally. This succeeds.\r\nTrying to right click | Publish the solution directly from Visual Studio to Azure App Service succeeds. When trying to train a LightGBM model on the deployed Azure App Service, I get:\r\n```\r\nUnable to load DLL 'lib_lightgbm' or one of its dependencies: The specified module could not be found. (Exception from HRESULT: 0x8007007E)\r\n```\r\n\r\nExamining the published files via Kudo (Azure Portal | My Service | Console | dir) shows that `lib_lightgbm.dll` isn't there.\r\n\r\nAny special steps I should take to publish this DLL and its dependencies to Azure?\r\n\r\nMaybe related to #1945 \r\ncc @eerhardt @sfilipi ","Url":"https://github.com/dotnet/machinelearning/issues/2533","RelatedDescription":"Closed issue \"lib_lightgbm.dll isn't published to Azure App Service\" (#2533)"},{"Id":"410067404","IsPullRequest":true,"CreatedAt":"2019-02-14T00:25:41","Actor":"codemzs","Number":"2543","RawContent":null,"Title":"Exclude SamplesUtils from ML.NET nuget and make its own nuget","State":"open","Body":"fixes #2277\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/2543","RelatedDescription":"Open PR \"Exclude SamplesUtils from ML.NET nuget and make its own nuget\" (#2543)"},{"Id":"410064346","IsPullRequest":false,"CreatedAt":"2019-02-14T00:14:00","Actor":"Ivanidzo4ka","Number":"2542","RawContent":null,"Title":"Multiclass classification Score vs Scores column","State":"open","Body":"This is silly, but probably worth small discussion.\r\nAll our Multiclass samples using following example:\r\nhttps://github.com/dotnet/machinelearning/blob/fd30559d9f8070d7cb71ba937897a63646d5b0bc/src/Microsoft.ML.SamplesUtils/SamplesDatasetUtils.cs#L500\r\nwhich has:\r\n```\r\n// The probabilities of being \"AA\", \"BB\", \"CC\", and \"DD\".\r\npublic float[] Scores;\r\n```\r\nThere is small problem with that. All our multiclass learners produce column `Score`, not `Scores`, so we just copy column from `Score` to `Scores`, or reassign them in pigsty.\r\nWhich doesn't look like good idea for me, more like workaround.\r\n\r\nQuestion is following: do we prefer to have consistency and call score column everywhere as `Score` column, or we want to be more user friendly and for multiclass use `Scores` (basically introduce (`DefaultColumnNames.MulticlassScore`)\r\n\r\nIn we want consistency we better rename `Scores` in `MulticlassClassificationExample` to `Score`. If we want be more user friendly, we need to go through lot of code, and replace for all multiclass cases `Score` to `Scores`.","Url":"https://github.com/dotnet/machinelearning/issues/2542","RelatedDescription":"Open issue \"Multiclass classification Score vs Scores column\" (#2542)"},{"Id":"410060271","IsPullRequest":true,"CreatedAt":"2019-02-13T23:58:38","Actor":"codemzs","Number":"2541","RawContent":null,"Title":"Lockdown Microsoft.ML.StandardLearners public surface","State":"open","Body":"fixes #2264\r\n\r\n**Reduces public API count from 529 to 303.**\r\n\r\n| Before | After |   \r\n|:-:|:-:|\r\n|![image](https://user-images.githubusercontent.com/1211949/52752493-e2a4b600-2fa7-11e9-99b6-80a4509d0409.png)|![image](https://user-images.githubusercontent.com/1211949/52752269-0fa49900-2fa7-11e9-8878-8b861ff27eea.png)|\r\n","Url":"https://github.com/dotnet/machinelearning/pull/2541","RelatedDescription":"Open PR \"Lockdown Microsoft.ML.StandardLearners public surface\" (#2541)"},{"Id":"409989117","IsPullRequest":false,"CreatedAt":"2019-02-13T22:51:24","Actor":"ermirbeqiraj","Number":"2535","RawContent":null,"Title":"Regression evaluate throws ArgumentOutOfRangeException with named parameters","State":"closed","Body":"### System information\r\n\r\n- **OS version/distro**: win10\r\n- **.NET Version (eg., dotnet --info)**: 2.2.0\r\n\r\n### Issue\r\n\r\n- **What did you do?**\r\n[taxi fare prediction](https://docs.microsoft.com/en-us/dotnet/machine-learning/tutorials/taxi-fare) sample, Evaluate method:\r\n// this throws sys.argumentexception\r\nvar metrics = mlContext.Regression.Evaluate(dataView, label: \"Label\", score: \"Score\");\r\n// this works:\r\nvar metrics = mlContext.Regression.Evaluate(predictions, \"Label\", \"Score\");\r\n- **What happened?**\r\nSystem.ArgumentOutOfRangeException: 'Label column 'Label' not found\r\nParameter name: schema'\r\n\r\n### Source code / logs\r\n\r\n![image](https://user-images.githubusercontent.com/7790756/52741979-fc112680-2fd6-11e9-80a0-c4ba4466be10.png)\r\n","Url":"https://github.com/dotnet/machinelearning/issues/2535","RelatedDescription":"Closed issue \"Regression evaluate throws ArgumentOutOfRangeException with named parameters\" (#2535)"},{"Id":"410032214","IsPullRequest":false,"CreatedAt":"2019-02-13T22:24:30","Actor":"artidoro","Number":"2540","RawContent":null,"Title":"Explicit implementation for IsRowToRowMapper and GetRowToRowMapper","State":"open","Body":"The interface `ITransformer` defines two methods:\r\n\r\n```csharp\r\n/// <summary>\r\n/// Whether a call to <see cref=\"GetRowToRowMapper(Schema)\"/> should succeed, on an\r\n/// appropriate schema.\r\n/// </summary>\r\nbool IsRowToRowMapper { get; }\r\n\r\n/// <summary>\r\n/// Constructs a row-to-row mapper based on an input schema. If <see cref=\"IsRowToRowMapper\"/>\r\n/// is <c>false</c>, then an exception should be thrown. If the input schema is in any way\r\n/// unsuitable for constructing the mapper, an exception should likewise be thrown.\r\n/// </summary>\r\n/// <param name=\"inputSchema\">The input schema for which we should get the mapper.</param>\r\n/// <returns>The row to row mapper.</returns>\r\nIRowToRowMapper GetRowToRowMapper(Schema inputSchema);\r\n```\r\n\r\nA transformer maps `IDataViews` to `IDataViews`, however this process can in some cases be optimized by mapping rows to rows with a `IRowToRowMapper`. Although for most scenarios a user should not be using them directly, they might be useful in custom extensions which we would like to enable in the future. This is why the above two methods are present in the interface of `ITransformer` and are necessary.  \r\n\r\nSince, however, these are not usually employed directly by users, we should implement them explicitly. \r\n\r\n/cc: @TomFinley \r\n","Url":"https://github.com/dotnet/machinelearning/issues/2540","RelatedDescription":"Open issue \"Explicit implementation for IsRowToRowMapper and GetRowToRowMapper\" (#2540)"},{"Id":"410031635","IsPullRequest":true,"CreatedAt":"2019-02-13T22:22:55","Actor":"maryamariyan","Number":"2539","RawContent":null,"Title":"Remove OpenInputFile/CreateOutputFile/CreateTempFile methods from IHostEnvironment","State":"open","Body":"Didn't add new tests since the implementation is just moved from HostEnvironmentBase to HostEnvironmentUtils class.\r\n\r\nOn a separate PR will remove CreateTempFile which still part of IHostEnvironment interface.\r\n\r\nRelated to: #1287\r\ncc: @eerhardt \r\n\r\n- [x] There's a descriptive title that will make sense to other developers some time from now. \r\n- [x] There's associated issues. All PR's should have issue(s) associated - unless a trivial self-evident change such as fixing a typo. You can use the format `Fixes #nnnn` in your description to cause GitHub to automatically close the issue(s) when your PR is merged.\r\n- [x] Your change description explains what the change does, why you chose your approach, and anything else that reviewers should know.\r\n- [ ] You have included any necessary tests in the same PR.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/2539","RelatedDescription":"Open PR \"Remove OpenInputFile/CreateOutputFile/CreateTempFile methods from IHostEnvironment\" (#2539)"},{"Id":"410026703","IsPullRequest":false,"CreatedAt":"2019-02-13T22:09:15","Actor":"rogancarr","Number":"2538","RawContent":null,"Title":"Create functional tests for all V1 TensorFlow scenarios","State":"open","Body":"As laid out in #2498 , we need scenarios to cover the TensorFlow functionality we want fully supported in V1.\r\n\r\n- An existing TF model can be used to produce predictions\r\n- Any layer from a TF model can be used to produce predictions\r\n- Input and output nodes can be identified from an existing TF model\r\n- Train TF models with a defined TF model topology","Url":"https://github.com/dotnet/machinelearning/issues/2538","RelatedDescription":"Open issue \"Create functional tests for all V1 TensorFlow scenarios\" (#2538)"},{"Id":"409575973","IsPullRequest":true,"CreatedAt":"2019-02-13T21:56:03","Actor":"abgoswam","Number":"2524","RawContent":null,"Title":"Store environment when creating new catalog entries ","State":"closed","Body":"Fixes #2523 \r\n\r\nThe following changes are being made:\r\n\r\n1. Just _store_ the environment passed in , instead of creating subhosts\r\n2. Updated baselines to make tests pass\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/2524","RelatedDescription":"Closed or merged PR \"Store environment when creating new catalog entries \" (#2524)"},{"Id":"409574317","IsPullRequest":false,"CreatedAt":"2019-02-13T21:56:03","Actor":"abgoswam","Number":"2523","RawContent":null,"Title":"Registering subhosts when creating new catalog entries advances the pseudo random number generator","State":"closed","Body":"For creating a new catalog entry in MLContext, the existing pattern is to register subhosts i.e. create a new Host out of the environment. This advances the pseudo random number generator. \r\n\r\nhttps://github.com/dotnet/machinelearning/blob/5c442a96edc3ac7a03bc10ef668310647f16db9a/src/Microsoft.ML.Data/TrainCatalog.cs#L195-L200\r\n\r\nThis means that if we add a new catalog entry in MLContext, the baseline tests would start failing.  (In fact this is the exact behaviour observed in PR #2390 when we try to add a AnomalyDetectionCatalog entry to MLContext)\r\n\r\nInstead of *forking* the environment we can just *store* the environment passed in.\r\n\r\n@TomFinley ","Url":"https://github.com/dotnet/machinelearning/issues/2523","RelatedDescription":"Closed issue \"Registering subhosts when creating new catalog entries advances the pseudo random number generator\" (#2523)"},{"Id":"410010066","IsPullRequest":true,"CreatedAt":"2019-02-13T21:26:00","Actor":"rogancarr","Number":"2537","RawContent":null,"Title":"Rename CV and TrainTest \"stratification\" parameter","State":"open","Body":"This PR changes the `CrossValidation` and `TrainTest` parameter `StratificationColumn` to be `IdColumn` and updates the docstrings to give a clearer explanation.\r\n\r\nFixes #2536 \r\n\r\nRelated to #1204, but that issue might be asking for further coverage.","Url":"https://github.com/dotnet/machinelearning/pull/2537","RelatedDescription":"Open PR \"Rename CV and TrainTest \"stratification\" parameter\" (#2537)"},{"Id":"410003743","IsPullRequest":false,"CreatedAt":"2019-02-13T21:10:21","Actor":"rogancarr","Number":"2536","RawContent":null,"Title":"StratificationColumn in CrossValidation and TrainTestSplit","State":"open","Body":"`CrossValidation` and `TrainTestSplit` have a parameter called `StratificationColumn` that is used to preserve groupings of columns across splits (as discussed in #2487). This isn't actually stratification, so we should rename the column.\r\n\r\nThis is a forked sub-issue from #2487\r\n\r\nRelated to #1204","Url":"https://github.com/dotnet/machinelearning/issues/2536","RelatedDescription":"Open issue \"StratificationColumn in CrossValidation and TrainTestSplit\" (#2536)"},{"Id":"409987245","IsPullRequest":false,"CreatedAt":"2019-02-13T20:29:02","Actor":"Dmitry-A","Number":"2534","RawContent":null,"Title":"LightGbmMulti System.ArgumentOutOfRangeException: Schema mismatch for label column '': expected Bool, got Key<U4>","State":"open","Body":"running with 0.10 bits, started getting this error on certain datasets when benchmarking AutoML (not 100% positive but likely this started happening when we upgraded to 0.10):\r\n\r\nProcessing pipeline ColumnCopying{ col=Label:0} xf=ValueToKeyMapping{ col=Label:Label} tr=LightGbmMulti{}.\r\nLightGbmMulti{} Crashed System.ArgumentOutOfRangeException: Schema mismatch for label column '': expected Bool, got Key<U4>\r\nParameter name: labelCol\r\n   at Microsoft.ML.Training.TrainerEstimatorBase`2.CheckLabelCompatible(Column labelCol)\r\n   at Microsoft.ML.Training.TrainerEstimatorBase`2.CheckInputSchema(SchemaShape inputSchema)\r\n   at Microsoft.ML.Training.TrainerEstimatorBase`2.GetOutputSchema(SchemaShape inputSchema)\r\n   at Microsoft.ML.Data.EstimatorChain`1.GetOutputSchema(SchemaShape inputSchema)\r\n   at Microsoft.ML.Data.EstimatorChain`1.Fit(IDataView input)\r\n   at Microsoft.ML.Auto.SuggestedPipeline.Fit(IDataView trainData)\r\n   at Microsoft.ML.Auto.AutoFitter`1.ProcessPipeline(SuggestedPipeline pipeline)\r\n\r\nNote that we're adding ValueToKeyMapping to our pipelines to get around https://github.com/dotnet/machinelearning/issues/1969\r\n","Url":"https://github.com/dotnet/machinelearning/issues/2534","RelatedDescription":"Open issue \"LightGbmMulti System.ArgumentOutOfRangeException: Schema mismatch for label column '': expected Bool, got Key<U4>\" (#2534)"},{"Id":"409975049","IsPullRequest":true,"CreatedAt":"2019-02-13T19:57:03","Actor":"yaeldekel","Number":"2532","RawContent":null,"Title":"Lockdown Microsoft.ML.EntryPoints public surface","State":"open","Body":"Fixes #2265 .","Url":"https://github.com/dotnet/machinelearning/pull/2532","RelatedDescription":"Open PR \"Lockdown Microsoft.ML.EntryPoints public surface\" (#2532)"},{"Id":"409926337","IsPullRequest":true,"CreatedAt":"2019-02-13T18:57:38","Actor":"sfilipi","Number":"2529","RawContent":null,"Title":"moving IEstimator, ITransformer ,IDataReader,  IDataReaderEstimator, …","State":"closed","Body":"moving IEstimator, ITransformer, IDataReader,  IDataReaderEstimator, SchemaShape from Microsoft.ML.Core.Data to Microsoft.ML. \r\nThose were the only types in Microsoft.ML.Core.Data. \r\n\r\nThe change is mechanical, IMO you can just approve if the above sentence is not controversial. \r\n\r\nTowards #2326. \r\n\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/2529","RelatedDescription":"Closed or merged PR \"moving IEstimator, ITransformer ,IDataReader,  IDataReaderEstimator, …\" (#2529)"},{"Id":"409941009","IsPullRequest":false,"CreatedAt":"2019-02-13T18:28:10","Actor":"zeahmed","Number":"2530","RawContent":null,"Title":"Create Samples for LightGbm Ranker.","State":"open","Body":"Need doc samples for lightgbm ranker. \r\nReference the samples in the xml docs for the two public lightgbm ranker methods.\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/f8e58dd4327f4c5013abbd7f691d835bdd377909/src/Microsoft.ML.LightGBM/LightGbmCatalog.cs#L104","Url":"https://github.com/dotnet/machinelearning/issues/2530","RelatedDescription":"Open issue \"Create Samples for LightGbm Ranker.\" (#2530)"},{"Id":"409580785","IsPullRequest":true,"CreatedAt":"2019-02-13T07:56:21","Actor":"TomFinley","Number":"2526","RawContent":null,"Title":"Update calibrator estimators to be more suitable.","State":"closed","Body":"Fixes #2515, contributes towards #1871 and indirectly towards #2251.\r\n\r\n* Internalize infrastructure only interface ICalibratorTrainer.\r\n* Update calibrator estimators so they are a suitable replacement for calibrator trainers in the public surface, e.g., no longer take IPredictor.\r\n\r\nNote that I did not add a calibrator catalog, since:\r\n\r\n1. I believe @sfilipi already has assigned herself the issue #1871 to do so, and\r\n2. Real reason, I am lazy! 😄\r\n\r\nCalibrator estimators now are configured by the score/label/optionally weight column, *except* for the fixed Platt estimator, which only takes score (since it is not trained).\r\n\r\nNote that ultimately the trainer estimator constructors *will* be internal, pending #1871.","Url":"https://github.com/dotnet/machinelearning/pull/2526","RelatedDescription":"Closed or merged PR \"Update calibrator estimators to be more suitable.\" (#2526)"},{"Id":"409666355","IsPullRequest":true,"CreatedAt":"2019-02-13T07:36:56","Actor":"artidoro","Number":"2528","RawContent":null,"Title":"Renaming .Train to .Fit in TrainerEstimators ","State":"open","Body":"Fixes #2527.\r\n\r\nAs further explained in the issue, there were two methods with two different names to train a TrainerEstimator. I renamed one of them so that the additional functionalities come with an overload.\r\n\r\nIn particular the methods `Train(IDataView trainData, IDataView validData)`, and `Train(IDataView trainData, IPredictor initialPredictor)` have been renamed to `Fit(...`.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/2528","RelatedDescription":"Open PR \"Renaming .Train to .Fit in TrainerEstimators \" (#2528)"},{"Id":"409582757","IsPullRequest":false,"CreatedAt":"2019-02-13T01:38:33","Actor":"artidoro","Number":"2527","RawContent":null,"Title":"Renaming .Train to .Fit in TrainerEstimators","State":"open","Body":"Some trainers allow training with an initial predictor, or with a validation data set. The initial predictor is used as a starting point for further training. However, the method that allows this is usually named:\r\n\r\n```csharp\r\nITransformer Train(IDataView trainData, IPredictor initialPredictor = null)\r\n```\r\nor \r\n```csharp\r\nITransformer Train(IDataView trainData, IDataView validationData = null, IPredictor initialPredictor = null)\r\n```\r\n\r\nThis could lead to quite a bit of confusion as the TrainerEstimators will have two methods for training -  `Fit()` and `.Train()` - that achieve pretty much the same result. In the above `initialPredictor` can be `null` so `.Fit(data)` does the same as `.Train(data)`.\r\n\r\nAs it was suggested in the issue #2502 in one of @TomFinley's comments https://github.com/dotnet/machinelearning/issues/2502#issuecomment-462493936, I think we should rename the `Train` method to `Fit`.\r\n\r\nThe result is that there will be a single method name `Fit` to train a model with an overload to perform training with an initial predictor. \r\n\r\n/cc: @TomFinley, @Ivanidzo4ka \r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/2527","RelatedDescription":"Open issue \"Renaming .Train to .Fit in TrainerEstimators\" (#2527)"},{"Id":"409576610","IsPullRequest":true,"CreatedAt":"2019-02-13T01:12:04","Actor":"wschin","Number":"2525","RawContent":null,"Title":"Fix an initial-value problem caused by unseen row/column","State":"open","Body":"Update LIBMF to have this [fix](https://github.com/cjlin1/libmf/pull/25). The problem is that when the largest row index in the training set doesn't match the number of rows in the specified matrix shape, rows' starting addresses may look like `[ptr_to_first_element_in_row_1, ptr_to_first_element_in_row_8, ptr_to_the_end_of_element_array, nullptr, nullptr]` but the correct value should be `[ptr_to_first_element_in_row_1, ptr_to_first_element_in_row_8, ptr_to_the_end_of_element_array, ptr_to_the_end_of_element_array, ptr_to_the_end_of_element_array]`.\r\n\r\nFixes https://github.com/dotnet/machinelearning/issues/2488","Url":"https://github.com/dotnet/machinelearning/pull/2525","RelatedDescription":"Open PR \"Fix an initial-value problem caused by unseen row/column\" (#2525)"},{"Id":"409568014","IsPullRequest":false,"CreatedAt":"2019-02-13T00:36:48","Actor":"shmoradims","Number":"2522","RawContent":null,"Title":"Docs and samples for the API reference site (P0 & P1 Trainers)","State":"open","Body":"List of Trainers:\r\n\r\n| BinaryClassification.Trainers | Category | Priority | Owner | Completed PR | \r\n| ------- | -------- | -------- | ------ | ----------- |\r\n| StochasticDualCoordinateAscent | Linear | 0 | Shahab | |\r\n| StochasticGradientDescent | Linear | 0 | Shahab | |\r\n| AveragedPerceptron | Linear | 0 | Shahab | |\r\n| LogisticRegression | Linear | 0 | Shahab | |\r\n| SymbolicStochasticGradientDescent | Linear | 0 | Shahab | |\r\n| FastTree | Tree | 0 |Shahab | |\r\n| FastForest | Tree | 0 | Shahab | |\r\n| LightGbm | Tree | 0 | Shahab | |\r\n| FieldAwareFactorizationMachine | FFM | 0 | Shahab |  |\r\n| GeneralizedAdditiveModels | GAM | 1 |Shahab | |\r\n| LinearSupportVectorMachines | Linear | 2 |  | |\r\n\r\n| Trainer | Category | Priority | Owner | Completed PR | \r\n| ------- | -------- | -------- | ------ | ----------- |\r\n| SDCAMC: Fast Linear Multi-class Classification (SA-SDCA) | Linear | 0 |  | |\r\n| SDCAR: Fast Linear Regression (SA-SDCA) | Linear | 0 |  | |\r\n| OVA: One-vs-All | Meta | 0 | | |\r\n| FastTreeRegression: FastTree (Boosted Trees) Regression | Tree | 0 |  | |\r\n| KMeansPlusPlus: KMeans++ Clustering | Clustering | 0 | | |\r\n| LightGBMMulticlass: LightGBM Multi-class Classifier | Tree | 0 | | |\r\n| LightGBMRegression: LightGBM Regressor | Tree | 0 | | |\r\n| MultiClassLogisticRegression: Multi-class Logistic Regression | Linear | 0 |  | |\r\n| OLSLinearRegression: Ordinary Least Squares (Regression) | Linear | 0 | | |\r\n| FastForestRegression: Fast Forest Regression | Tree | 0 | | |\r\n| RegressionGamTrainer: Generalized Additive Model for Regression | GAM | 1 | | |\r\n| OnlineGradientDescent: Stochastic Gradient Descent (Regression) | Linear | 1 |  | |\r\n| PoissonRegression: Poisson Regression | Linear | 1 |  | |\r\n| PKPD: Pairwise coupling (PKPD) | Meta | 1 | | |\r\n| pcaAnomaly: PCA Anomaly Detector | Projection | 1 |  | |\r\n| FastTreeTweedieRegression: FastTree (Boosted Trees) Tweedie Regression | Tree | 1 | | |\r\n| PriorPredictor: Prior Predictor | Baseline | 2 | artidoro  |#2510 |\r\n| RandomPredictor: Random Predictor | Baseline | 2 | artidoro   |#2510 |\r\n| MultiClassNaiveBayes: Multiclass Naive Bayes | Bayes | 2 | | |\r\n| BinarySGD: Hogwild SGD (binary) | Linear | 2 |  | |\r\n| FastTreeRanking: FastTree (Boosted Trees) Ranking | Tree | 2 | | |\r\n| LightGBMRanking: LightGBM Ranking | Tree | 2 | | |","Url":"https://github.com/dotnet/machinelearning/issues/2522","RelatedDescription":"Open issue \"Docs and samples for the API reference site (P0 & P1 Trainers)\" (#2522)"},{"Id":"409564953","IsPullRequest":false,"CreatedAt":"2019-02-13T00:24:22","Actor":"rogancarr","Number":"2521","RawContent":null,"Title":"FastTree EarlyStoppingMetric is an `int` but only accepts specific values","State":"open","Body":"In the current `Options` for `FastTree` (and `GAMs`), `EarlyStoppingMetric` is an `int`, but only specific values are accepted (e.g. 1 or 2 for regression, 1 or 3 for ranking).\r\n\r\nIt would be much cleaner if this was an enum.","Url":"https://github.com/dotnet/machinelearning/issues/2521","RelatedDescription":"Open issue \"FastTree EarlyStoppingMetric is an `int` but only accepts specific values\" (#2521)"},{"Id":"409563915","IsPullRequest":false,"CreatedAt":"2019-02-13T00:20:21","Actor":"rogancarr","Number":"2520","RawContent":null,"Title":"FastTree EarlyStoppingRule definition is inconsistent with API","State":"open","Body":"In `FastTree`, the `EarlyStoppingRule` is defined as\r\n```cs\r\n[Argument(ArgumentType.Multiple, HelpText = \"Early stopping rule. (Validation set (/valid) is required.)\", ShortName = \"esr\", NullName = \"<Disable>\")]\r\n[TGUI(Label = \"Early Stopping Rule\", Description = \"Early stopping rule. (Validation set (/valid) is required.)\")]\r\npublic IEarlyStoppingCriterionFactory EarlyStoppingRule;\r\n```\r\n\r\nThis can be specified like so:\r\n```cs\r\nvar fastTreeTrainer = mlContext.Regression.Trainers.FastTree(new \r\n    Trainers.FastTree.FastTreeRegressionTrainer.Options {\r\n        EarlyStoppingMetrics = 2,\r\n        EarlyStoppingRule = new GLEarlyStoppingCriterion.Arguments()\r\n    });\r\n```\r\n\r\nThis exposes the `IComponentFactory` way of doing things in the public API, which seems to be inconsistent with the public API. One suggestion is to use an `enum` over the existing options.\r\n\r\nThat said, this does support custom early stopping methods through implementing  `IEarlyStoppingCriterionFactory`.","Url":"https://github.com/dotnet/machinelearning/issues/2520","RelatedDescription":"Open issue \"FastTree EarlyStoppingRule definition is inconsistent with API\" (#2520)"},{"Id":"409555869","IsPullRequest":true,"CreatedAt":"2019-02-12T23:50:45","Actor":"rogancarr","Number":"2518","RawContent":null,"Title":"Add Functional Tests for Data I/O","State":"open","Body":"This PR adds functional tests for Data I/O\r\n\r\n- Reading from IEnumerable\r\n- Writing to IEnumerable\r\n- Writing to and reading from delimited tex files\r\n  - With inferred schema\r\n  - With explicit schema\r\n- Writing to and reading from Binary files\r\n\r\nFixes #2508 ","Url":"https://github.com/dotnet/machinelearning/pull/2518","RelatedDescription":"Open PR \"Add Functional Tests for Data I/O\" (#2518)"}],"ResultType":"GitHubIssue"}},"RunOn":"2019-02-14T05:30:58.4586782Z","RunDurationInMilliseconds":931}