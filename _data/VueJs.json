{"Data":{"Vue":{"Events":[{"Id":"6840541494","Type":"IssuesEvent","CreatedAt":"2017-11-11T01:13:53","Actor":"Paradygmus","Repository":"vuejs/vue","Organization":"vuejs","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/vuejs/vue/issues/6990","RelatedDescription":"Closed issue \"Electron problem with main process variable and vuejs watcher\" (#6990) at vuejs/vue","RelatedBody":"### Version\r\n2.5.2\r\n\r\n### Reproduction link\r\n[https://github.com/Paradygmus/vue-electron-problem](https://github.com/Paradygmus/vue-electron-problem)\r\n\r\n### Steps to reproduce\r\n * 1.`npm install`\r\n * 2.`npm start`\r\n * 3.Click on the 2 link and watch the diff.\r\n\r\nCondition: You need to have an object from the main process\r\n\r\n**Some code:** \r\n_index.js_\r\n```js\r\nfunction createWindow()\r\n{\r\n    [...]    \r\n    //Stock data in window main process\r\n    mainWindow.infos = {\r\n        foo: 0\r\n    }\r\n    [...]\r\n}\r\n```\r\n_index.html_\r\n```js\r\nlet { remote } = require('electron');\r\nlet currentWindow = remote.getCurrentWindow();\r\n//Get the object from the main process\r\nlet infos = currentWindow.infos;\r\n//Create a render process objet\r\nlet normal = {foo : 0};\r\n//Just the call to vuejs\r\nlet vue = new Vue({\r\n\tel: '#app',\r\n\tdata: { \r\n\t\tinfos : infos,\r\n\t\tnormal : normal\r\n\t},\r\n\tmethods : {\r\n\t\tincrementmain : () => {infos.foo++;},\r\n\t\tincrementrender : () => {normal.foo++;}\r\n\t}\r\n});\r\n```\r\n\r\n### What is expected?\r\nThe variable must refresh on the page\r\n\r\n### What is actually happening?\r\nThe variable does not refresh on page\r\n\r\n---\r\nI think it's because electron set already some methods on the object `set` and `get`.\r\nVuejs not overload or modify them, so electron update the value in the main process but not in the render process.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->"},{"Id":"6840067796","Type":"IssuesEvent","CreatedAt":"2017-11-10T22:06:18","Actor":"chrisvfritz","Repository":"vuejs/vue","Organization":"vuejs","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/vuejs/vue/issues/7042","RelatedDescription":"Opened issue \"In 2.5.1+, v-model cannot be combined with v-on=\"$listeners\"\" (#7042) at vuejs/vue","RelatedBody":"### Version\r\n2.5.1+\r\n\r\n### Reproduction link\r\n[https://jsfiddle.net/bvyo2yra/](https://jsfiddle.net/bvyo2yra/)\r\n\r\n### Steps to reproduce\r\nSee the minimal reproduction.\r\n\r\n### What is expected?\r\nPrevious to 2.5.1, `v-on=\"$listeners\"` could be used in combination with more specific event handlers to create components that could transparently pass events to an element inside them. This worked because the more specific listeners (e.g. `@input=\"$emit('input', $event.target.value)`) were called _after_ the more generic listeners with `v-on=\"$listeners`.\r\n\r\n### What is actually happening?\r\nIn 2.5.1, these higher priority listeners are now triggered first, so that if the listener sets a value, it will set the correct value, _then_ the incorrect value, breaking `v-model`.\r\n\r\n---\r\n\r\nThe breaking change was made to solve [another issue](https://github.com/vuejs/vue/issues/6805), so it's probably not ideal to just revert the change. And actually, even the previous behavior was slightly undesirable, as it emitted the same event twice.\r\n\r\nTo fix both issues, I think I would actually expect the more specific event binding (e.g. `@input`) to _replace_ the listener of the same name from `v-on` with the object syntax. The more specific listener would then take responsibility for emitting an event at the correct time. That allows the user full, explicit control over the order in which local handlers and handlers from the parent are called.\r\n\r\nHow does that sound to others?\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->"}],"ResultType":"GitHubEvent"},"Router":{"Events":[{"Id":"6837978561","Type":"IssuesEvent","CreatedAt":"2017-11-10T14:05:56","Actor":"posva","Repository":"vuejs/vue-router","Organization":"vuejs","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/vuejs/vue-router/issues/1875","RelatedDescription":"Closed issue \"beforeRouteUpdate not called if different route uses same component\" (#1875) at vuejs/vue-router","RelatedBody":"### Version\r\n3.0.1\r\n\r\n### Reproduction link\r\n[https://jsfiddle.net/50wL7mdz/75563/](https://jsfiddle.net/50wL7mdz/75563/)\r\n\r\n### Steps to reproduce\r\n1 - click first on the router-link \"edit 1\"  \r\n2 - click on router-link \"edit 2\"  \r\n3 - click on router-link \"create\"\r\n\r\n### What is expected?\r\n1) the form component will be first mounted with id = 1  \r\n2) the function beforeRouteUpdate will be called with id = 2  \r\n3) the function beforeRouteUpdate will be called with id = null and isCreate = true\r\n\r\n### What is actually happening?\r\nActually, after clicking the router-link create(step 3), the function beforeRouteUpdate won't be called.\r\n\r\n---\r\nI found out that beforeRouteUpdate will be called only when changing params to the same route, not when changing the whole route.   \r\nBut since i use the same form for editing and creating a resource, wouldn't it be nice  to call beforeRouteUpdate anyway?   \r\nIf it's not possible, is there another way to do it (maybe without watching the $route in the component)?\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->"},{"Id":"6837358671","Type":"IssuesEvent","CreatedAt":"2017-11-10T11:30:28","Actor":"Rockson","Repository":"vuejs/vue-router","Organization":"vuejs","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/vuejs/vue-router/issues/1875","RelatedDescription":"Opened issue \"beforeRouteUpdate not called if different route uses same component\" (#1875) at vuejs/vue-router","RelatedBody":"### Version\r\n3.0.1\r\n\r\n### Reproduction link\r\n[https://jsfiddle.net/50wL7mdz/75563/](https://jsfiddle.net/50wL7mdz/75563/)\r\n\r\n### Steps to reproduce\r\n1 - click first on the router-link \"edit 1\"  \r\n2 - click on router-link \"edit 2\"  \r\n3 - click on router-link \"create\"\r\n\r\n### What is expected?\r\n1) the form component will be first mounted with id = 1  \r\n2) the function beforeRouteUpdate will be called with id = 2  \r\n3) the function beforeRouteUpdate will be called with id = null and isCreate = true\r\n\r\n### What is actually happening?\r\nActually, after clicking the router-link create(step 3), the function beforeRouteUpdate won't be called.\r\n\r\n---\r\nI found out that beforeRouteUpdate will be called only when changing params to the same route, not when changing the whole route.   \r\nBut since i use the same form for editing and creating a resource, wouldn't it be nice  to call beforeRouteUpdate anyway?   \r\nOr is there another way to do it (maybe not watching the $route in the component)?\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->"}],"ResultType":"GitHubEvent"},"Vuex":{"Events":[],"ResultType":"GitHubEvent"}},"RunOn":"2017-11-11T05:30:33.7641957Z","RunDurationInMilliseconds":2112}