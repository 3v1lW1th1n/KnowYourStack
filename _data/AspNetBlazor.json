{"Data":{"GitHubIssues":{"Issues":[{"Id":"384004522","IsPullRequest":false,"CreatedAt":"2018-11-24T16:54:41","Actor":"yself","Number":"1721","RawContent":null,"Title":"Blazor server-side and static fields","State":"open","Body":"I am wondering about behavior of static fields in server-side blazor. Since the server is a single process, static field values are shared between all sessions. There are no app-domains in .net core to isolate values between sessions. This behavior is inconsistent with client-side blazor, where static fields behave like one might assume, one value per client application/session.\r\n\r\nLot of simple cases where static fields might be used can be solved with DI, but there are a lot of world cases, and a lot of existing code/libraries, where shared value between sessions might be a problem.\r\n\r\nI mainly worry about the inconsistency between client and server side blazor. Since a lot of articles I read tend to say, that if a code is designed \"correctly\", it should work on both, client and server side blazor almost transparently. Such inconsistency of a core language feature as are static fields might be a problem for some.\r\n\r\nHas there been any thought about this issue?\r\n","Url":"https://github.com/aspnet/Blazor/issues/1721","RelatedDescription":"Open issue \"Blazor server-side and static fields\" (#1721)"},{"Id":"383954480","IsPullRequest":false,"CreatedAt":"2018-11-24T03:12:32","Actor":"TheColonel2688","Number":"1720","RawContent":null,"Title":"Question: Is in Visual Studio debugging planned for Client Side Blazor? ","State":"open","Body":"Is in Visual Studio debugging planned for Client side Blazor? In other words: the ability to have visual studios attach to the blazor app process in the browser rather than using the Chrome debug UI. ","Url":"https://github.com/aspnet/Blazor/issues/1720","RelatedDescription":"Open issue \"Question: Is in Visual Studio debugging planned for Client Side Blazor? \" (#1720)"},{"Id":"383887100","IsPullRequest":false,"CreatedAt":"2018-11-23T16:56:04","Actor":"xclud","Number":"1719","RawContent":null,"Title":"Question about future on ASP.NET Core 3.0 & Components","State":"open","Body":"Currently we use an static html file with an <app /> tag and a script which does the magic. I am making a PWA for my nextgen product and i am wondering how it will be to integrate Components (Blazor) into Razor pages (Or MVC pages).\r\n\r\nTalking about Server-side Rendering specifically, Ideally i am thinking of putting some components tags (e.g using tag helpers?!) directly into the razor pages and i will get those parts of my pages updated in-place.\r\n\r\nIs there any overview as we are currently in version 0.8 ? I appreciate any enlightenment.","Url":"https://github.com/aspnet/Blazor/issues/1719","RelatedDescription":"Open issue \"Question about future on ASP.NET Core 3.0 & Components\" (#1719)"},{"Id":"383785598","IsPullRequest":true,"CreatedAt":"2018-11-23T13:31:44","Actor":"SteveSandersonMS","Number":"1718","RawContent":null,"Title":"Code migration phase 3 - Move Mono binaries to their own package","State":"closed","Body":"Continuation of #1706 and #1708\r\n\r\n### Migration steps\r\n\r\n1. ~~Reorganise all the files~~ Done in #1706\r\n2. ~~Rename projects/packages/namespaces~~ Done in #1708 \r\n3. **Obtain Mono binaries from some new external package instead of hosting them here <-- this PR**\r\n4. Actually move the code into the mondo-repo\r\n5. All ongoing refactoring, e.g., to take dependencies on 3.0 packages/tooling, to separate out WASM-specific aspects (e.g., in build system and middleware), etc. This is an open-ended task.\r\n","Url":"https://github.com/aspnet/Blazor/pull/1718","RelatedDescription":"Closed or merged PR \"Code migration phase 3 - Move Mono binaries to their own package\" (#1718)"},{"Id":"383406235","IsPullRequest":false,"CreatedAt":"2018-11-23T06:51:49","Actor":"auc31","Number":"1710","RawContent":null,"Title":"blazor update 0.6 to 0.7","State":"closed","Body":"hi\r\n\r\nwe have upgrated all project in our 0.6 blazor solution but when we execute (F5) the page stay on \"LOADING....\" text, not load the blazor site\r\n\r\nhave you got a idea ?","Url":"https://github.com/aspnet/Blazor/issues/1710","RelatedDescription":"Closed issue \"blazor update 0.6 to 0.7\" (#1710)"},{"Id":"383663783","IsPullRequest":false,"CreatedAt":"2018-11-22T22:09:40","Actor":"grahamehorner","Number":"1717","RawContent":null,"Title":".cshtml losing format layout","State":"open","Body":"when using the current solution Components.sln the .cshtml files lose the layout/structure @functions code and intellisence","Url":"https://github.com/aspnet/Blazor/issues/1717","RelatedDescription":"Open issue \".cshtml losing format layout\" (#1717)"},{"Id":"383648613","IsPullRequest":true,"CreatedAt":"2018-11-22T20:17:18","Actor":"grahamehorner","Number":"1716","RawContent":null,"Title":"OnBeforeRender","State":"open","Body":"Added OnBeforeRender event to component ref: https://github.com/aspnet/Blazor/issues/1709\r\n","Url":"https://github.com/aspnet/Blazor/pull/1716","RelatedDescription":"Open PR \"OnBeforeRender\" (#1716)"},{"Id":"383623129","IsPullRequest":false,"CreatedAt":"2018-11-22T17:46:18","Actor":"grahamehorner","Number":"1715","RawContent":null,"Title":"Update of build instructions","State":"open","Body":"Please update instruction with regards to the pre-requisites for build/testing\r\n\r\n\r\n---- System.InvalidOperationException : Failed to connect to the web driver. Please see the readme and follow the instructions to install selenium.Remember to start the web driver with `selenium-standalone start` before running the end-to-end tests.\r\n-------- OpenQA.Selenium.WebDriverException : unknown error: cannot find Chrome binary\r\n  (Driver info: chromedriver=2.43.600210 (68dcf5eebde37173d4027fa8635e332711d2874a),platform=Windows NT 10.0.17763 x86_64) (WARNING: The server did not provide any stacktrace information)\r\nCommand duration or timeout: 575 milliseconds\r\nBuild info: version: '3.141.0', revision: '2ecb7d9a', time: '2018-10-31T20:22:52'\r\nSystem info: host: 'DESKTOP-I3STUNL', ip: '192.168.1.107', os.name: 'Windows 10', os.arch: 'x86', os.version: '10.0', java.version: '1.8.0_191'\r\nDriver info: driver.version: unknown\r\n---- The following constructor parameters did not have matching ","Url":"https://github.com/aspnet/Blazor/issues/1715","RelatedDescription":"Open issue \"Update of build instructions\" (#1715)"},{"Id":"383616854","IsPullRequest":false,"CreatedAt":"2018-11-22T17:19:19","Actor":"JulienM28","Number":"1714","RawContent":null,"Title":"Events between two components","State":"open","Body":"I have two components:\r\n\r\none selectlist and one \"View\"\r\n\r\nThe view is populated from datas depending on which element is selected in the select list.\r\n\r\nI seen It's possible to raise events from parents to children and inverse, but How to raise events between two components who are not parented ?\r\n\r\nThanks.","Url":"https://github.com/aspnet/Blazor/issues/1714","RelatedDescription":"Open issue \"Events between two components\" (#1714)"},{"Id":"383579049","IsPullRequest":true,"CreatedAt":"2018-11-22T15:42:44","Actor":"SteveSandersonMS","Number":"1713","RawContent":null,"Title":"Re-add templates to .sln","State":"closed","Body":"They had to be removed temporarily during the renames. Now they're back.","Url":"https://github.com/aspnet/Blazor/pull/1713","RelatedDescription":"Closed or merged PR \"Re-add templates to .sln\" (#1713)"},{"Id":"383180115","IsPullRequest":true,"CreatedAt":"2018-11-22T12:19:12","Actor":"SteveSandersonMS","Number":"1708","RawContent":null,"Title":"Code migration part 2: Renames","State":"closed","Body":"Continuation of #1706 \r\n\r\n### Migration steps\r\n\r\n1. ~~Reorganise all the files~~ Done in #1706\r\n2. **Rename projects/packages/namespaces <-- this PR**\r\n3. Obtain Mono binaries from some new external package instead of hosting them here\r\n4. Actually move the code into the mondo-repo\r\n5. All ongoing refactoring, e.g., to take dependencies on 3.0 packages/tooling, to separate out WASM-specific aspects (e.g., in build system and middleware), etc. This is an open-ended task.\r\n\r\n### Review notes\r\n\r\nAgain, there are no (intended) functional changes here, besides public API name changes. The PR is just a vast amount of renaming things. It also affects every single compiler baseline so the number of files updated is so large.\r\n\r\nI know nobody can realistically \"review\" this PR, which is partly why I'm doing all these non-functional updates together and keeping the functional change (step 3 above) separate so it actually can be reviewed. So, when it's finished and the build looks good, I'm going to proceed to merge. @rynowak @javiercn If you do want to check any part of this please feel free - I'm happy to make further changes later.","Url":"https://github.com/aspnet/Blazor/pull/1708","RelatedDescription":"Closed or merged PR \"Code migration part 2: Renames\" (#1708)"},{"Id":"383427098","IsPullRequest":true,"CreatedAt":"2018-11-22T08:29:54","Actor":"aghanem","Number":"1712","RawContent":null,"Title":"linking to some existing docs","State":"open","Body":"This is to add links to the existing Blazor docs site. In addition, we may need to convert this item\"Live reloading in the browser during development\" to a link to the debugging page but I first the debugging docs need some enhancements like adding IDE debugging and details about live reloading (maybe using dotnet command line tool ?)\r\n","Url":"https://github.com/aspnet/Blazor/pull/1712","RelatedDescription":"Open PR \"linking to some existing docs\" (#1712)"},{"Id":"383425127","IsPullRequest":false,"CreatedAt":"2018-11-22T08:23:16","Actor":"ivanchev","Number":"1711","RawContent":null,"Title":"Using Templated components and Cascading components together throws compile time errors","State":"open","Body":"Using the [TabStrip sample](https://gist.github.com/SteveSandersonMS/f10a552e1761ff759b1631d81a4428c3), if you add a RenderFragment TabTemplate property, you cannot set both <Tab> and <TabTemplate> inside the TabSet:\r\n`\r\n<TabSet>\r\n    <TabTemplate>Template</TabTemplate>\r\n    <Tab Title=\"First tab\">\r\n        <h4>First tab</h4>\r\n        This is the first tab.\r\n    </Tab>\r\n    ...\r\n`\r\nSetting either one by itself works fine. Is this an intended limitation?","Url":"https://github.com/aspnet/Blazor/issues/1711","RelatedDescription":"Open issue \"Using Templated components and Cascading components together throws compile time errors\" (#1711)"},{"Id":"383253032","IsPullRequest":false,"CreatedAt":"2018-11-21T18:54:23","Actor":"grahamehorner","Number":"1709","RawContent":null,"Title":"BeforeRender event","State":"open","Body":"Please consider adding a IHandleBeforeRender interface with the method void OnBeforeRender(); to allow components to perform some action prior to rendering; i.e. changing parameters as a result of validation errors or fetching/triggering data cache expiry/refresh\r\n","Url":"https://github.com/aspnet/Blazor/issues/1709","RelatedDescription":"Open issue \"BeforeRender event\" (#1709)"},{"Id":"383014887","IsPullRequest":true,"CreatedAt":"2018-11-21T15:17:33","Actor":"SteveSandersonMS","Number":"1706","RawContent":null,"Title":"Code migration, step 1","State":"closed","Body":"We're in the process of migrating code from the Blazor repo into the [central ASP.NET Core repo](https://github.com/aspnet/aspnetcore). This is because (1) we're moving most of our repos into the central one, and (2) we've committed to ship the Razor Components programming model in ASP.NET Core 3.0.\r\n\r\nFor more info about what we've announced will ship in 3.0, see [this blog post](https://blogs.msdn.microsoft.com/webdev/2018/10/02/blazor-0-6-0-experimental-release-now-available/#razor-components-to-ship-with-asp-net-core-in-net-core-3-0). TLDR: server-side Blazor ships in 3.0 and gets the name \"Razor Components\", while client-side (WebAssembly) Blazor remains experimental to give more time to make the underlying runtime truly production grade.\r\n\r\n### Migration steps\r\n\r\n1. **Reorganise all the files <-- this PR**\r\n2. Rename projects/packages/namespaces\r\n3. Obtain Mono binaries from some new external package instead of hosting them here\r\n4. Actually move the code into the mondo-repo\r\n5. All ongoing refactoring, e.g., to take dependencies on 3.0 packages/tooling, to separate out WASM-specific aspects (e.g., in build system and middleware), etc. This is an open-ended task.\r\n\r\n### Review notes\r\n\r\nThere's nothing interesting in this PR. It's just a vast amount of moving files, tracking down all their references to each other, and updating all those references. The output from the build system should be unchanged.\r\n\r\nThe reason I separated the \"reorganise files\" step from \"rename content\" (e.g., namespaces) is because it's the \"reorganise\" step that causes all the unreadable noise in the Git diffs. Also, the \"reorganise\" step is nearly impossible to reconcile with unrelated changes, so until this is merged, we can't make any other changes in the repo.\r\n\r\nSo, @rynowak @javiercn @pranavkm @danroth27 @mkArtakMSFT: **please don't commit any other changes to the Blazor repo until this PR is merged**. I don't think I could realistically rebase this PR onto any new work!","Url":"https://github.com/aspnet/Blazor/pull/1706","RelatedDescription":"Closed or merged PR \"Code migration, step 1\" (#1706)"},{"Id":"383156887","IsPullRequest":false,"CreatedAt":"2018-11-21T14:58:54","Actor":"clemenslinders","Number":"1707","RawContent":null,"Title":"Using Blazor serverside and HttpWebRequest I get service not available","State":"open","Body":"LS,\r\n\r\nAs I understand using the serverside Blazor there is a lot more possible.\r\nI want to transfere a MVC solution into Blazor.\r\n\r\nThis MVC solution uses HttpWebRequest to get data from a server.\r\nBut when I use this in my Blazor server side solution I get the error 503: Service not available.\r\n\r\nOf course the service is available and up and running.\r\n\r\nIs there something I can do so that I do not get this error??\r\n\r\n\r\n\r\nKind regards,\r\n\r\n\r\n\r\nClemens Linders","Url":"https://github.com/aspnet/Blazor/issues/1707","RelatedDescription":"Open issue \"Using Blazor serverside and HttpWebRequest I get service not available\" (#1707)"},{"Id":"382999705","IsPullRequest":false,"CreatedAt":"2018-11-21T08:07:27","Actor":"clemenslinders","Number":"1705","RawContent":null,"Title":"Debugging blazor 0.7 Chrome keeps saying: Unable to find debuggable browser tab","State":"open","Body":"LS,\r\n\r\nI am using Blazor 0.7, VS 15.9.2, Windows 10 (up to date), Chrome (up to date).\r\n\r\n- I set a breakpoint in my Blazor app. \r\n- I run it using Chrome. \r\n- I press Shift-Alt-D and I get the error \"Unable to find debugable browser tab\".\r\n- I close Chrome, \r\n- I press Windowsflag-R. \r\n- I enter: \"%programfiles(x86)%\\Google\\Chrome\\Application\\chrome.exe\" --remote-debugging-port=9222 http://localhost:52183/\r\n- Chrome reopens with my app\r\n- Again I press Shift-Alt-D\r\n- And again I get the error: \"Unable to find debugable browser tab\".\r\n\r\nI can do this many times and I keep getting that error.\r\n\r\nWhat can I do so that I can have at least some basic debugging capabilities??\r\n\r\nI assume it has nothing to do with my problem, but than again you never know:\r\n- At our compagny we are using a VPN connection to connect to the internet and many sites and ports are blocked by our mother compagny.\r\n\r\nCould it be a blocked port???\r\n\r\n\r\n\r\nKind regards,\r\n\r\n\r\n\r\nClemens Linders","Url":"https://github.com/aspnet/Blazor/issues/1705","RelatedDescription":"Open issue \"Debugging blazor 0.7 Chrome keeps saying: Unable to find debuggable browser tab\" (#1705)"},{"Id":"382383193","IsPullRequest":false,"CreatedAt":"2018-11-20T20:41:08","Actor":"rodolfograve","Number":"1703","RawContent":null,"Title":"await inside OnInitAsync causes the browser to hang","State":"closed","Body":"Similar to #1242 but I can consistently reproduce and it happens on the simplest Component. No Layout involved. Happened on 0.6.0 and kept happening after I upgraded to 0.7.0.\r\n\r\nIt is a very strange behavior which points to some mishandling of asynchronous actions inside OnInitAsync.\r\n\r\n### Version that behaves as expected\r\n\r\nThe code below **fails** as expected. A System.NullReferenceException is shown in the browser console.\r\n\r\n```\r\n@page \"/\"\r\n<div>\r\n    @foreach (var item in Items)\r\n    {\r\n        <div>@item</div>\r\n    }\r\n</div>\r\n\r\n@functions {\r\n    protected IEnumerable<string> Items { get; set; }\r\n}\r\n```\r\n\r\n**Result:** `Uncaught (in promise) Error: System.NullReferenceException: Object reference not set to an instance of an object.`\r\n\r\n### Version that **works** as expected\r\n```\r\n@page \"/\"\r\n<div>\r\n    @foreach (var item in Items)\r\n    {\r\n        <div>@item</div>\r\n    }\r\n</div>\r\n\r\n@functions {\r\n    protected override async Task OnInitAsync()\r\n    {\r\n        await Task.CompletedTask;\r\n        Items = new[] { \"item1\" };\r\n    }\r\n\r\n    protected IEnumerable<string> Items { get; set; }\r\n}\r\n```\r\n\r\n**Result:** item1 is shown on the screen.\r\n\r\n### Version that unexpectedly hangs up\r\n```\r\n@page \"/\"\r\n<div>\r\n    @foreach (var item in Items)\r\n    {\r\n        <div>@item</div>\r\n    }\r\n</div>\r\n\r\n@functions {\r\n    protected override async Task OnInitAsync()\r\n    {\r\n        await Task.Delay(1); // This line is the only difference\r\n        Items = new[] { \"item1\" };\r\n    }\r\n\r\n    protected IEnumerable<string> Items { get; set; }\r\n}\r\n```\r\n**Result:** An exception is shown in the console (which I wasn't expecting), and from that point on the browser becomes unresponsive and I need to close the tab and re-run the Blazor application.\r\n\r\n`Uncaught (in promise) Error: System.NullReferenceException: Object reference not set to an instance of an object.`","Url":"https://github.com/aspnet/Blazor/issues/1703","RelatedDescription":"Closed issue \"await inside OnInitAsync causes the browser to hang\" (#1703)"},{"Id":"382645929","IsPullRequest":false,"CreatedAt":"2018-11-20T12:41:47","Actor":"BickelLukas","Number":"1704","RawContent":null,"Title":"Live reloading for Server Side Blazor","State":"open","Body":"Is live reloading supported in server side blazor yet? \r\n\r\nIt should work just like it does with regular razor views in AspNetCore. ","Url":"https://github.com/aspnet/Blazor/issues/1704","RelatedDescription":"Open issue \"Live reloading for Server Side Blazor\" (#1704)"},{"Id":"382314625","IsPullRequest":true,"CreatedAt":"2018-11-19T17:15:46","Actor":"kswoll","Number":"1702","RawContent":null,"Title":"Ignore non-public setters in analyzer","State":"open","Body":"Currently if you have a property like:\r\n\r\n```\r\n[Parameter] public string Foo { get; private set; }\r\n```\r\n\r\nThe analzyer emits a warning about public properties with a `[Parameter]` attribute specified.  Since the reason for this warning is about calling the setter (and mutating state at improper points in the rendering cycle) explicit non-public setters should be ignored.\r\n\r\nSee https://github.com/aspnet/Blazor/issues/1388#issuecomment-439650736 for more elaboration","Url":"https://github.com/aspnet/Blazor/pull/1702","RelatedDescription":"Open PR \"Ignore non-public setters in analyzer\" (#1702)"},{"Id":"382250797","IsPullRequest":false,"CreatedAt":"2018-11-19T14:54:24","Actor":"grahamehorner","Number":"1701","RawContent":null,"Title":"Parameter attribute with data annotations","State":"open","Body":"IMHO it would be great to allow the blazor components to enforce parameter contracts using the existing data annotations; eg. \r\n\r\n```\r\n[Required,Parameter,StringLength(80)]\r\nstring Name { get; set; }\r\n```\r\n\r\nthis would avoid a lot of boilerplate code with the components and/or replication of feature that exist in data annotation libraries today.\r\n","Url":"https://github.com/aspnet/Blazor/issues/1701","RelatedDescription":"Open issue \"Parameter attribute with data annotations\" (#1701)"},{"Id":"382116952","IsPullRequest":false,"CreatedAt":"2018-11-19T09:06:26","Actor":"fs86","Number":"1700","RawContent":null,"Title":"Js initialization in OnAfterRender stopped working with 0.7.0","State":"open","Body":"After I upgraded to Blazor 0.7.0 I noticed that initialization scripts of 3rd party JavaScript libraries which I usually call in OnAfterRender stopped working.\r\nE.g. I use select2 (https://github.com/select2/select2) to apply a custom style for my select fields. But it seems like something has changed with Blazor 0.7.0, because the following code (which used to work in 0.6.0) dosn't work anymore:\r\n\r\n```\r\nprotected override void OnAfterRender()\r\n{\r\n  base.OnAfterRender();\r\n  JsInterop.InitializeSelect2();\r\n}\r\n```\r\n\r\nMy JavaScript function:\r\n```\r\nwindow.JsFunctions = {\r\n  initializeSelect2: function() {\r\n    $('select').select2();\r\n  }\r\n}\r\n```\r\nThe control style will get applied when I call StateHasChanged() after JsInterop.InitializeSelect2(), but this will end up in an endless loop. Is there a better place to call InitializeSelect2() than OnAfterRender?\r\n\r\n**Edit:**\r\nI found the following statement about lifecycle methods in the official documentation:\r\n\r\n> OnAfterRenderAsync and OnAfterRender are called each time after a component has finished rendering. Element and component references are populated at this point. **Use this stage to perform additional initialization steps using the rendered content, such as activating third-party JavaScript libraries that operate on the rendered DOM elements.**\r\n\r\nAfter doing a bit of research I can say that the corresponding field is not accessible in OnAfterRender.\r\n","Url":"https://github.com/aspnet/Blazor/issues/1700","RelatedDescription":"Open issue \"Js initialization in OnAfterRender stopped working with 0.7.0\" (#1700)"},{"Id":"382048663","IsPullRequest":false,"CreatedAt":"2018-11-19T04:01:06","Actor":"andycnguyen","Number":"1699","RawContent":null,"Title":"Problem deserializing dictionary with object keys","State":"open","Body":"I'm trying to send an object of type `Dictionary<Node, decimal>` from my controller to a page, where `Node `is a custom class I've written. When I first attempted this, I got the following error:\r\n\r\n`WASM: [System.ArgumentException] The value \"App.Shared.Graph.Node\" is not of type \"App.Shared.Graph.Node\" and cannot be used in this generic collection.`\r\n\r\nI learned that there is a more general problem of deserializing dictionaries with complex keys, and sure enough I found that if I attempted to serialize and deserialize one of my dictionaries in a unit test using Json.NET, it failed. With this in mind, I implemented the `TypeConverter` solution suggested [here](https://stackoverflow.com/questions/24504245/not-ableto-serialize-dictionary-with-complex-key-using-json-net). Now I can successfully serialize and deserialize my dictionaries in unit tests, but this still fails in my Blazor app. I now get a different error:\r\n\r\n`WASM: [System.ArgumentException] The value \"{\"Username\":\"123\",\"Name\":null,\"Degree\":0}\" is not of type \"App.Shared.Graph.Node\" and cannot be used in this generic collection.`\r\n\r\n(The value cited above corresponds to one of my `Node` objects.)","Url":"https://github.com/aspnet/Blazor/issues/1699","RelatedDescription":"Open issue \"Problem deserializing dictionary with object keys\" (#1699)"},{"Id":"382007849","IsPullRequest":false,"CreatedAt":"2018-11-18T22:32:06","Actor":"ransagy","Number":"1698","RawContent":null,"Title":"Override/add to the auto-genrated IIS rewrite rules for standalone apps","State":"open","Body":"When using the standalone hosting model, The publish process generates a swanky `web.config` for us with some rewrite rules to make sure static files and urls are handled correctly in the SPA context.\r\n\r\nI'm trying to add an initial redirect to HTTPS on top of that. Following [this](https://www.hanselman.com/blog/HowToEnableHTTPStrictTransportSecurityHSTSInIIS7.aspx) article, for example, means that i want to add two rules to my web.config - one for HTTP->HTTPS redirection and one for adding an HSTS header to better protect such a redirect.\r\n\r\nRight now, The only way is to inject it into the web.config after the build/publish process is done. I'm wondering if there could be a way to define/add to the generated content as part of the process rather than outside of it.","Url":"https://github.com/aspnet/Blazor/issues/1698","RelatedDescription":"Open issue \"Override/add to the auto-genrated IIS rewrite rules for standalone apps\" (#1698)"},{"Id":"382007569","IsPullRequest":false,"CreatedAt":"2018-11-18T22:28:53","Actor":"Venando-a","Number":"1697","RawContent":null,"Title":"dotnet restore does not update links","State":"open","Body":"Probably I am missing something obvious... I can build and execute the demo BlazorApp1 on a Windows 10 machine and also on a Ubuntu one. But if I copy the generated files and folders from the Windows machine to Linux, run\r\n`dotnet restore --force` then\r\n`dotnet run` fails with several errors like this one:\r\n`/home/xy/.nuget/packages/microsoft.aspnetcore.blazor.build/0.7.0/targets/Blazor.MonoRuntime.targets(12,5): error MSB3030: Could not copy the file \"C:/Users/yz/Documents/Visual Studio 2017/Projects/BlazorApp1/obj/Debug/netstandard2.0/blazor/linker/Microsoft.AspNetCore.Blazor.dll\" because it was not found. [/home/xy/Desktop/BlazorApp1/BlazorApp1.csproj]\r\n`\r\nShouldn't restore update these references to a Windows folder? \r\n\r\nBlazor.MonoRuntime.targets(12,5):\r\n`    <!-- Copy the blazor output files  -->\r\n    <Copy\r\n      SourceFiles=\"@(BlazorItemOutput)\"\r\n      DestinationFiles=\"@(BlazorItemOutput->'%(TargetOutputPath)')\"\r\n      SkipUnchangedFiles=\"$(SkipCopyUnchangedFiles)\"\r\n      OverwriteReadOnlyFiles=\"$(OverwriteReadOnlyFiles)\"\r\n      Retries=\"$(CopyRetryCount)\"\r\n      RetryDelayMilliseconds=\"$(CopyRetryDelayMilliseconds)\"\r\n      UseHardlinksIfPossible=\"$(CreateHardLinksForCopyFilesToOutputDirectoryIfPossible)\"\r\n      UseSymboliclinksIfPossible=\"$(CreateSymbolicLinksForCopyFilesToOutputDirectoryIfPossible)\"\r\n      Condition=\"'@(BlazorItemOutput)' != '' and '$(CopyBuildOutputToOutputDirectory)' == 'true' and '$(SkipCopyBuildProduct)' != 'true'\">\r\n    </Copy>\r\n`\r\n","Url":"https://github.com/aspnet/Blazor/issues/1697","RelatedDescription":"Open issue \"dotnet restore does not update links\" (#1697)"},{"Id":"381914511","IsPullRequest":false,"CreatedAt":"2018-11-18T00:18:15","Actor":"DaRosenberg","Number":"1696","RawContent":null,"Title":"How to hook up alternate IServiceProvider implementation?","State":"open","Body":"I'm trying to hook Autofac into my Blazor app, but I can't find any way to provide the actual `IServiceProvider` instance myself.\r\n\r\nHere's an illustration of what I'm trying to do (as per [Autofac documentation](https://autofaccn.readthedocs.io/en/latest/integration/aspnetcore.html#quick-start-without-configurecontainer)):\r\n\r\n```cs\r\npublic class Startup\r\n{\r\n    public IContainer ApplicationContainer { get; private set; }\r\n\r\n    public IServiceProvider ConfigureServices(IServiceCollection services)\r\n    {\r\n        var builder = new ContainerBuilder();\r\n        builder.Populate(services);\r\n        // Add some custom service and implementation to test whether it can be injected\r\n        builder.RegisterType<DefaultSystemClock>().As<ISystemClock>();\r\n        ApplicationContainer = builder.Build();\r\n\r\n        // This return value seems to never be used by the WebAssemblyHostBuilder\r\n        return new AutofacServiceProvider(ApplicationContainer);\r\n    }\r\n\r\n    public void Configure(IBlazorApplicationBuilder app)\r\n    {\r\n        app.AddComponent<App>(\"app\");\r\n    }\r\n}\r\n```\r\n\r\nA quick glance into the source of `WebAssemblyHostBuilder` and `ConventionBasedStartup` seems to confirm that this is not how it's implemented (there's no code that take care of any return value from the `ConfigureServices()` method.\r\n\r\nIs there some other hook I should be using to replace the default `IServiceProvider` implementation with the one provided by Autofac?","Url":"https://github.com/aspnet/Blazor/issues/1696","RelatedDescription":"Open issue \"How to hook up alternate IServiceProvider implementation?\" (#1696)"},{"Id":"381881172","IsPullRequest":false,"CreatedAt":"2018-11-17T17:07:17","Actor":"losmacko","Number":"1694","RawContent":null,"Title":"index.html could be configurable","State":"open","Body":"Currently there is no options to use diffrent index.html file to ex. production and development. It' ll be nice if this could be configurable.","Url":"https://github.com/aspnet/Blazor/issues/1694","RelatedDescription":"Open issue \"index.html could be configurable\" (#1694)"},{"Id":"381747521","IsPullRequest":false,"CreatedAt":"2018-11-17T16:29:53","Actor":"stsrki","Number":"1691","RawContent":null,"Title":"CascadingValue is always null","State":"closed","Body":"I'm trying to use a new feature in Blazor 0.7.0 but with no success. \r\n\r\nThis is the code from my _parent_ `Fields` component.\r\n```\r\n<CascadingValue Value=this>\r\n    <div class=\"field-body\">\r\n        @ChildContent\r\n    </div>\r\n</CascadingValue>\r\n```\r\n\r\nAnd in a _child_ component I have:\r\n\r\n`[CascadingParameter] protected Fields ParentFields { get; set; }`\r\n\r\nBut whatever I do the `ParentFields` property is always null. I don't know what I'm missing. That's basically everything from the documentation. ","Url":"https://github.com/aspnet/Blazor/issues/1691","RelatedDescription":"Closed issue \"CascadingValue is always null\" (#1691)"},{"Id":"381818120","IsPullRequest":false,"CreatedAt":"2018-11-17T02:15:20","Actor":"Entroper","Number":"1693","RawContent":null,"Title":"Router cannot find route in Blazor 0.7","State":"open","Body":"I have [this page](https://github.com/Entroper/FF1Randomizer/blob/25b5f89dc34bcf7aefdcf7997a343ec322ac9c98/FF1Blazorizer/Pages/Randomize.cshtml) that was working in 0.6, and stopped working when I upgraded to 0.7:\r\n```\r\nError: System.InvalidOperationException: 'Router' cannot find any component with a route for '/Randomize'.\r\n  at Microsoft.AspNetCore.Blazor.Routing.Router.Refresh () <0x204cb00 + 0x000b2> in <7ccdd79bd655431387991356cc8bce62>:0 \r\n  at Microsoft.AspNetCore.Blazor.Routing.Router.SetParameters (Microsoft.AspNetCore.Blazor.Components.ParameterCollection parameters) <0x1fefc70 + 0x0003e> in <7ccdd79bd655431387991356cc8bce62>:0 \r\n  at Microsoft.AspNetCore.Blazor.Rendering.ComponentState.SetDirectParameters (Microsoft.AspNetCore.Blazor.Components.ParameterCollection parameters) <0x1f79500 + 0x00084> in <7ccdd79bd655431387991356cc8bce62>:0 \r\n  at Microsoft.AspNetCore.Blazor.RenderTree.RenderTreeDiffBuilder.InitializeNewComponentFrame (Microsoft.AspNetCore.Blazor.RenderTree.RenderTreeDiffBuilder+DiffContext& diffContext, System.Int32 frameIndex) <0x1f84e68 + 0x00086> in <7ccdd79bd655431387991356cc8bce62>:0 \r\n  at Microsoft.AspNetCore.Blazor.RenderTree.RenderTreeDiffBuilder.InitializeNewSubtree (Microsoft.AspNetCore.Blazor.RenderTree.RenderTreeDiffBuilder+DiffContext& diffContext, System.Int32 frameIndex) <0x1f84c58 + 0x00086> in <7ccdd79bd655431387991356cc8bce62>:0 \r\n  at Microsoft.AspNetCore.Blazor.RenderTree.RenderTreeDiffBuilder.InsertNewFrame (Microsoft.AspNetCore.Blazor.RenderTree.RenderTreeDiffBuilder+DiffContext& diffContext, System.Int32 newFrameIndex) <0x1f84940 + 0x000c2> in <7ccdd79bd655431387991356cc8bce62>:0 \r\n  at Microsoft.AspNetCore.Blazor.RenderTree.RenderTreeDiffBuilder.AppendDiffEntriesForRange (Microsoft.AspNetCore.Blazor.RenderTree.RenderTreeDiffBuilder+DiffContext& diffContext, System.Int32 oldStartIndex, System.Int32 oldEndIndexExcl, System.Int32 newStartIndex, System.Int32 newEndIndexExcl) <0x1f84050 + 0x0024a> in <7ccdd79bd655431387991356cc8bce62>:0 \r\n  at Microsoft.AspNetCore.Blazor.RenderTree.RenderTreeDiffBuilder.ComputeDiff (Microsoft.AspNetCore.Blazor.Rendering.Renderer renderer, Microsoft.AspNetCore.Blazor.Rendering.RenderBatchBuilder batchBuilder, System.Int32 componentId, Microsoft.AspNetCore.Blazor.RenderTree.ArrayRange`1[T] oldTree, Microsoft.AspNetCore.Blazor.RenderTree.ArrayRange`1[T] newTree) <0x1f83a98 + 0x000a6> in <7ccdd79bd655431387991356cc8bce62>:0 \r\n  at Microsoft.AspNetCore.Blazor.Rendering.ComponentState.RenderIntoBatch (Microsoft.AspNetCore.Blazor.Rendering.RenderBatchBuilder batchBuilder, Microsoft.AspNetCore.Blazor.RenderFragment renderFragment) <0x1f7dc60 + 0x000b8> in <7ccdd79bd655431387991356cc8bce62>:0 \r\n  at Microsoft.AspNetCore.Blazor.Rendering.Renderer.RenderInExistingBatch (Microsoft.AspNetCore.Blazor.Rendering.RenderQueueEntry renderQueueEntry) <0x1f7d888 + 0x00040> in <7ccdd79bd655431387991356cc8bce62>:0 \r\n  at Microsoft.AspNetCore.Blazor.Rendering.Renderer.ProcessRenderQueue () <0x1f7d0a8 + 0x00050> in <7ccdd79bd655431387991356cc8bce62>:0 \r\n  at Microsoft.AspNetCore.Blazor.Rendering.Renderer.AddToRenderQueue (System.Int32 componentId, Microsoft.AspNetCore.Blazor.RenderFragment renderFragment) <0x1f7c630 + 0x0006c> in <7ccdd79bd655431387991356cc8bce62>:0 \r\n  at Microsoft.AspNetCore.Blazor.Components.RenderHandle.Render (Microsoft.AspNetCore.Blazor.RenderFragment renderFragment) <0x1f7c398 + 0x0003a> in <7ccdd79bd655431387991356cc8bce62>:0 \r\n  at Microsoft.AspNetCore.Blazor.Components.BlazorComponent.StateHasChanged () <0x1f7c2a0 + 0x00048> in <7ccdd79bd655431387991356cc8bce62>:0 \r\n  at Microsoft.AspNetCore.Blazor.Components.BlazorComponent.SetParameters (Microsoft.AspNetCore.Blazor.Components.ParameterCollection parameters) <0x1f6b270 + 0x000d8> in <7ccdd79bd655431387991356cc8bce62>:0 \r\n  at Microsoft.AspNetCore.Blazor.Rendering.ComponentState.SetDirectParameters (Microsoft.AspNetCore.Blazor.Components.ParameterCollection parameters) <0x1f79500 + 0x00084> in <7ccdd79bd655431387991356cc8bce62>:0 \r\n  at Microsoft.AspNetCore.Blazor.Rendering.Renderer.RenderRootComponent (System.Int32 componentId) <0x1f78930 + 0x00024> in <7ccdd79bd655431387991356cc8bce62>:0 \r\n  at Microsoft.AspNetCore.Blazor.Browser.Rendering.BrowserRenderer.AddComponent (System.Type componentType, System.String domElementSelector) <0x1f111b0 + 0x00084> in <6e8b4c57aeeb4593b71c0de6d0ce9454>:0 \r\n  at Microsoft.AspNetCore.Blazor.Hosting.WebAssemblyBlazorApplicationBuilder.CreateRenderer () <0x1ef1820 + 0x00078> in <6e8b4c57aeeb4593b71c0de6d0ce9454>:0 \r\n  at Microsoft.AspNetCore.Blazor.Hosting.WebAssemblyHost.StartAsync (System.Threading.CancellationToken cancellationToken) <0x1ed0628 + 0x000f8> in <6e8b4c57aeeb4593b71c0de6d0ce9454>:0 \r\n  at Microsoft.AspNetCore.Blazor.Hosting.WebAssemblyHostExtensions.Run (Microsoft.AspNetCore.Blazor.Hosting.IWebAssemblyHost host) <0x1ecfdb0 + 0x00020> in <6e8b4c57aeeb4593b71c0de6d0ce9454>:0 \r\n  at FF1Blazorizer.Program.Main (System.String[] args) <0x1d7fd68 + 0x00014> in <396b29f170474361b9513c314eda4230>:0 \r\n```\r\n\r\nI tried lots of things to isolate the error.  Eventually, I added a new .cshtml file and started copying bits of Randomize.cshtml over to it until it stopped working.  It stopped working when I added what is now [line 278](https://github.com/Entroper/FF1Randomizer/blob/25b5f89dc34bcf7aefdcf7997a343ec322ac9c98/FF1Blazorizer/Pages/Randomize.cshtml#L278).\r\n\r\nLine 278 refers to a `ViewModelFlags` class in another project `FF1Lib`.  If you look [here](https://github.com/Entroper/FF1Randomizer/blob/25b5f89dc34bcf7aefdcf7997a343ec322ac9c98/FF1Blazorizer/Shared/ViewModelFlags.cs) you'll see that I've copied all of the code for `ViewModelFlags` into the `FF1Blazorizer` project.  When I did that and referenced the \"new\" class, the application started working again.\r\n\r\nSo I went back to line 278 and changed `FF1Blazorizer.Shared.ViewModelFlags` to `FF1Lib.ViewModelFlags` -- and it **still worked.**\r\n\r\nSo I deleted ViewModelFlags.cs from the Blazor project.  **It stopped working again.**  The mere presence of a copy of the `ViewModelFlags` class in the same project \"cures\" the bug, even though I'm not actually referencing it.  I tried this a couple of times to make sure I hadn't messed something up, but it was consistent.","Url":"https://github.com/aspnet/Blazor/issues/1693","RelatedDescription":"Open issue \"Router cannot find route in Blazor 0.7\" (#1693)"},{"Id":"381814697","IsPullRequest":false,"CreatedAt":"2018-11-17T01:37:09","Actor":"pgrho","Number":"1692","RawContent":null,"Title":"Json.NET throws TypeLoadException on Blazor 0.7.0","State":"open","Body":"I'm updating my standalone Blazor app to use 0.7.0. And found the `JsonConvert.DeserializeObject<T>(string)` method of Newtonsoft.Json 11.0.2 throws `TypeLoadException` in the first invocation.  \r\n\r\n## Repro steps\r\n\r\n1. Create a New ASP.NET Core/Blazor Project. \r\n2. Reference Newtonsoft.Json 11.0.2\r\n3. Add linker.xml\r\n\r\n```\r\n<linker>\r\n    <assembly fullname=\"mscorlib\">\r\n        <!-- Preserve all methods on WasmRuntime, because these are called by JS-side code\r\n    to implement timers. Fixes https://github.com/aspnet/Blazor/issues/239 -->\r\n        <type fullname=\"System.Threading.WasmRuntime\" />\r\n    </assembly>\r\n    <assembly fullname=\"System.Core\">\r\n        <!-- This is required by JSon.NET and any expression.Compile caller -->\r\n        <type fullname=\"System.Linq.Expressions*\" />\r\n    </assembly>\r\n    <!-- Name of the entry point assembly -->\r\n    <assembly fullname=\"BlazorTest\" />\r\n</linker>\r\n```\r\n\r\n4. Reference linker.xml in the .csproj\r\n\r\n```\r\n  <ItemGroup>\r\n    <BlazorLinkerDescriptor Include=\"Linker.xml\" />\r\n  </ItemGroup>\r\n```\r\n\r\n5. Invoke `JsonConvert.DeserializeObject<T>(string)` in some event.\r\n\r\n```csharp\r\nJsonConvert.DeserializeObject<EmptyClass>(\"{}\");\r\n```\r\n\r\nThe steps above will throw `TypeLoadException` for `INotifyPropertyChanged`, and this behavior won't change in the second call. But in my app Json.NET throws `TypeLoadException` for `INotifyPropertyChanging` and subsequent invocations works fine.","Url":"https://github.com/aspnet/Blazor/issues/1692","RelatedDescription":"Open issue \"Json.NET throws TypeLoadException on Blazor 0.7.0\" (#1692)"}],"ResultType":"GitHubIssue"}},"RunOn":"2018-11-25T05:30:03.3870001Z","RunDurationInMilliseconds":1821}