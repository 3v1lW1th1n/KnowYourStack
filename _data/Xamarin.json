{"Data":{"Blog":{"FeedItems":[{"Title":"Adaptive UI with Xamarin.Forms","PublishedOn":"2017-10-16T20:58:02+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"<p>Xamarin.Forms has supported iOS, Android, and Windows for a long time. We&#8217;ve also added new platforms to keep up with the changing landscape, such as Tizen and macOS, with Linux and Windows WPF on the horizon. These platforms run on a wide variety of devices including phones, tablets, desktops, and TVs. This presents an interesting [&#8230;]</p>\n<p>The post <a rel=\"nofollow\" href=\"https://blog.xamarin.com/adaptive-ui-xamarin-forms/\">Adaptive UI with Xamarin.Forms</a> appeared first on <a rel=\"nofollow\" href=\"https://blog.xamarin.com\">Xamarin Blog</a>.</p>\n","Href":"https://blog.xamarin.com/adaptive-ui-xamarin-forms/","RawContent":null},{"Title":"Give the Visual Studio 2017 Version 15.5 Preview a Try!","PublishedOn":"2017-10-13T20:06:22+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"<p>With Visual Studio 2017 version 15.4 now stable and sporting some awesome new features, such as Xamarin Live integration, Android Oreo / iOS 11 support, and a smarter, smaller installation, it&#8217;s time to turn our attention to the next version of Visual Studio 2017, version 15.5! This upcoming release is now available as a preview [&#8230;]</p>\n<p>The post <a rel=\"nofollow\" href=\"https://blog.xamarin.com/give-visual-studio-2017-version-15-5-preview-try/\">Give the Visual Studio 2017 Version 15.5 Preview a Try!</a> appeared first on <a rel=\"nofollow\" href=\"https://blog.xamarin.com\">Xamarin Blog</a>.</p>\n","Href":"https://blog.xamarin.com/give-visual-studio-2017-version-15-5-preview-try/","RawContent":null},{"Title":"Bring 3D Models To Life in Augmented Reality with UrhoSharp","PublishedOn":"2017-10-12T19:28:50+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"<p>UrhoSharp brings 3D to a variety of platforms and uses its own binary mdl format for model files. There are many sources for 3D models, including cgtrader and TurboSquid, and formats such as FBX, OBJ, DAE and BLEND. Urho3D provides tools like AssetImporter and the Urho3D Blender Add-in so you can use these models. In [&#8230;]</p>\n<p>The post <a rel=\"nofollow\" href=\"https://blog.xamarin.com/bring-3d-models-life-augmented-reality-urhosharp/\">Bring 3D Models To Life in Augmented Reality with UrhoSharp</a> appeared first on <a rel=\"nofollow\" href=\"https://blog.xamarin.com\">Xamarin Blog</a>.</p>\n","Href":"https://blog.xamarin.com/bring-3d-models-life-augmented-reality-urhosharp/","RawContent":null},{"Title":"Updating Xamarin.iOS Apps for the iPhone X","PublishedOn":"2017-10-11T18:35:38+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"<p>There&#8217;s no doubt that one of the biggest announcements from Apple this year was the iPhone X. The new Super Retina display is edge-to-edge on the device, creating an immersive experience we had yet to see on iPhones. With the new screen changes on the iPhone X, developers may be asking themselves, &#8220;What do I [&#8230;]</p>\n<p>The post <a rel=\"nofollow\" href=\"https://blog.xamarin.com/updating-xamarin-ios-apps-for-the-iphone-x/\">Updating Xamarin.iOS Apps for the iPhone X</a> appeared first on <a rel=\"nofollow\" href=\"https://blog.xamarin.com\">Xamarin Blog</a>.</p>\n","Href":"https://blog.xamarin.com/updating-xamarin-ios-apps-for-the-iphone-x/","RawContent":null},{"Title":"Build and Release Five-Star Apps Faster","PublishedOn":"2017-10-10T17:49:16+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"<p>The first step in the life of a mobile app is build automation, which builds the app and runs required tests to make sure the app follows required rules. Build automation is also the first step towards shipping high quality, five-star mobile apps. When building iOS and Android mobile applications, one of the main challenges [&#8230;]</p>\n<p>The post <a rel=\"nofollow\" href=\"https://blog.xamarin.com/build-and-release-five-star-apps-faster-with-visual-studio-mobile-center/\">Build and Release Five-Star Apps Faster</a> appeared first on <a rel=\"nofollow\" href=\"https://blog.xamarin.com\">Xamarin Blog</a>.</p>\n","Href":"https://blog.xamarin.com/build-and-release-five-star-apps-faster-with-visual-studio-mobile-center/","RawContent":null},{"Title":"Developing Real-Time Communication Apps with WebSocket","PublishedOn":"2017-10-09T21:17:54+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"<p>WebSockets is a two-way communication protocol, or persistence communication channel over TCP connection, an extremely powerful protocol leveraged by numerous games, apps with chat functionality, and real-time apps such as stock tickers. In this blog post, we&#8217;ll discuss how to build a simple Xamarin chat room application that will leverage and connect to an ASP.NET [&#8230;]</p>\n<p>The post <a rel=\"nofollow\" href=\"https://blog.xamarin.com/developing-real-time-communication-apps-with-websocket/\">Developing Real-Time Communication Apps with WebSocket</a> appeared first on <a rel=\"nofollow\" href=\"https://blog.xamarin.com\">Xamarin Blog</a>.</p>\n","Href":"https://blog.xamarin.com/developing-real-time-communication-apps-with-websocket/","RawContent":null},{"Title":"DataBinding Power Moves You May Not Be Using (Yet)","PublishedOn":"2017-10-05T21:05:47+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"<p>DataBinding is a fantastic feature that cleanly decouples your UI from the backing data models while providing the plumbing to move data back and forth as you need. But, are you getting the most out of the Binding features in Xamarin.Forms? Building on our previous Introduction to DataBinding and Advanced Data Binding posts, I’ll show [&#8230;]</p>\n<p>The post <a rel=\"nofollow\" href=\"https://blog.xamarin.com/databinding-power-moves-you-may-not-be-using-yet/\">DataBinding Power Moves You May Not Be Using (Yet)</a> appeared first on <a rel=\"nofollow\" href=\"https://blog.xamarin.com\">Xamarin Blog</a>.</p>\n","Href":"https://blog.xamarin.com/databinding-power-moves-you-may-not-be-using-yet/","RawContent":null},{"Title":"The Solar System with ARKit and F#","PublishedOn":"2017-10-04T21:09:02+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"<p>A few years ago, my colleague Joel Martinez and I wrote a F# program we called “Oculus Thrift” that demonstrated iOS SceneKit in a Google Cardboard stereoscopic viewer. With the recent release of iOS 11, I wanted to see if we could do something similar with ARKit, Apple’s augmented-reality framework. It took just 8 lines [&#8230;]</p>\n<p>The post <a rel=\"nofollow\" href=\"https://blog.xamarin.com/the-solar-system-with-arkit-and-f/\">The Solar System with ARKit and F#</a> appeared first on <a rel=\"nofollow\" href=\"https://blog.xamarin.com\">Xamarin Blog</a>.</p>\n","Href":"https://blog.xamarin.com/the-solar-system-with-arkit-and-f/","RawContent":null},{"Title":"Microcharts: Elegant Cross-Platform Charts for Every App","PublishedOn":"2017-10-03T19:13:09+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"<p>This is a guest post from Alo&#239;s Deniel. Alo&#239;s works at Orange Applications for Business as a Xamarin consultant. You can find him on Twitter at @aloisdeniel and on Github at @aloisdeniel. Displaying charts in mobile apps has always been a great way to offer users a clear overview of numerical data. In my time [&#8230;]</p>\n<p>The post <a rel=\"nofollow\" href=\"https://blog.xamarin.com/microcharts-elegant-cross-platform-charts-for-any-app/\">Microcharts: Elegant Cross-Platform Charts for Every App</a> appeared first on <a rel=\"nofollow\" href=\"https://blog.xamarin.com\">Xamarin Blog</a>.</p>\n","Href":"https://blog.xamarin.com/microcharts-elegant-cross-platform-charts-for-any-app/","RawContent":null},{"Title":"Android Support Library v26 Overview","PublishedOn":"2017-10-02T19:25:39+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"<p>The Android Support Library v26 brings lots of new features to our Android apps, including fonts as resources, downloadable fonts, emoji support, an autosizing TextView, physics driven animations via Spring and Fling, backwards compatibility for animated vectors, and a slimmer library by increasing the minSdkVersion to 14. If it isn&#8217;t already, the minSdkVersion for all [&#8230;]</p>\n<p>The post <a rel=\"nofollow\" href=\"https://blog.xamarin.com/android-support-library-v26-overview/\">Android Support Library v26 Overview</a> appeared first on <a rel=\"nofollow\" href=\"https://blog.xamarin.com\">Xamarin Blog</a>.</p>\n","Href":"https://blog.xamarin.com/android-support-library-v26-overview/","RawContent":null}],"ResultType":"Feed"},"Android":{"Events":[{"Id":"6725031874","Type":"PullRequestEvent","CreatedAt":"2017-10-17T02:29:02","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/939","RelatedDescription":"Opened pull request \"[xa-prep-tasks] Support single-digit versions\" (#939) at xamarin/xamarin-android","RelatedBody":"JDK 9 reports a single-digit version value:\r\n\r\n\t$ javac -version\r\n\tjavac 9\r\n\r\nUnfortunately, this means that the `<Which/>` task won't properly\r\nrecognize JDK 9's `javac` as passing the\r\n`%(RequiredProgram.MinimumVersion)` value of 1.8, because `<Which/>`\r\nrequires *at least* two digits, not one. (Because `System.Version`\r\nrequired at least two digits; one would throw `ArgumentException`.)\r\n\r\nUpdate the `<Which/>` task so that it supports single-digit version\r\nvalues, treating them as if they had a \"minor\" value of `0`."},{"Id":"6725028421","Type":"PullRequestEvent","CreatedAt":"2017-10-17T02:27:43","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/938","RelatedDescription":"Closed pull request \"[xa-prep-tasks] Support single-digit versions\" (#938) at xamarin/xamarin-android","RelatedBody":"JDK 9 reports a single-digit version value:\r\n\r\n\t$ javac -version\r\n\tjavac 9\r\n\r\nUnfortunately, this means that the `<Which/>` task won't properly\r\nrecognize JDK 9's `javac` as passing the\r\n`%(RequiredProgram.MinimumVersion)` value of 1.8, because `<Which/>`\r\nrequires *at least* two digits, not one. (Because `System.Version`\r\nrequired at least two digits; one would throw `ArgumentException`.)\r\n\r\nUpdate the `<Which/>` task so that it supports single-digit version\r\nvalues, treating them as if they had a \"minor\" value of `0`."},{"Id":"6725024874","Type":"PullRequestEvent","CreatedAt":"2017-10-17T02:26:34","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/938","RelatedDescription":"Opened pull request \"[xa-prep-tasks] Support single-digit versions\" (#938) at xamarin/xamarin-android","RelatedBody":"JDK 9 reports a single-digit version value:\r\n\r\n\t$ javac -version\r\n\tjavac 9\r\n\r\nUnfortunately, this means that the `<Which/>` task won't properly\r\nrecognize JDK 9's `javac` as passing the\r\n`%(RequiredProgram.MinimumVersion)` value of 1.8, because `<Which/>`\r\nrequires *at least* two digits, not one. (Because `System.Version`\r\nrequired at least two digits; one would throw `ArgumentException`.)\r\n\r\nUpdate the `<Which/>` task so that it supports single-digit version\r\nvalues, treating them as if they had a \"minor\" value of `0`."},{"Id":"6724889583","Type":"PullRequestEvent","CreatedAt":"2017-10-17T01:31:14","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/909","RelatedDescription":"Merged pull request \"Use API9 includes directory for 32-bit ARM builds\" (#909) at xamarin/xamarin-android","RelatedBody":"NDK 14+ (which we use) doesn't have android-4 anymore"},{"Id":"6724881985","Type":"PullRequestEvent","CreatedAt":"2017-10-17T01:28:04","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/937","RelatedDescription":"Opened pull request \"[build] Fix `make prepare` ordering\" (#937) at xamarin/xamarin-android","RelatedBody":"@clancey was trying to build xamarin-android, which failed:\r\n\r\n\t$ make prepare\r\n\t./build-tools/scripts/generate-os-info Configuration.OperatingSystem.props\r\n\txbuild /p:Configuration=Debug  /p:_DebugFileExt=.pdb build-tools/dependencies/dependencies.mdproj\r\n\t...\r\n\twarning : Referenced Project ../../external/xamarin-android-tools/src/Xamarin.Android.Tools.AndroidSdk/Xamarin.Android.Tools.AndroidSdk.csproj not found, ignoring.\r\n\t...\r\n\tXamarin.Android.BuildTools.PrepTasks/JdkInfo.cs(9,23): error CS0234: The type or namespace name 'Tools' does not exist in the namespace 'Xamarin.Android' (are you missing an assembly reference?)\r\n\r\nThe problem is that `make prepare-deps`, which builds\r\n`build-tools/dependencies/dependencies.mdproj`, implicitly builds\r\n`build-tools/xa-prep-tasks/xa-prep-tasks.csproj`, which in turn\r\ndepends on\r\n`external/xamarin-android-tools/src/Xamarin.Android.Tools.AndroidSdk/Xamarin.Android.Tools.AndroidSdk.csproj`,\r\nwhich is only reliably created by `make prepare-external`s\r\n`git submodule update --init --recursive`.\r\n\r\nUnfortunately, `make prepare-external` wasn't invoked until *after*\r\n`make prepare-deps`, meaning there is no way for `make prepare` to\r\nactually work on a clean install!\r\n\r\n(This works on Jenkins because Jenkins automatically checks out all\r\nsubmodules, so it never encounters this \"clean checkout\" scenario.)\r\n\r\nReorder the targets that `make prepare` executes so that\r\n`make prepare-external` is run *before* `make prepare-deps`, ensuring\r\nthat git submodules exist before we attempt to use them."},{"Id":"6724018088","Type":"PullRequestEvent","CreatedAt":"2017-10-16T20:46:26","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/928","RelatedDescription":"Merged pull request \"[Xamarin.Android.Build.Tasks] Add support for `apksigner`\" (#928) at xamarin/xamarin-android","RelatedBody":"Context https://bugzilla.xamarin.com/show_bug.cgi?id=57914\r\n\r\nThis commit adds support for the `apksigner` tool which\r\nships with android. It is enabled by a new property\r\n\r\n\t$(AndroidUseApkSigner)\r\n\r\nWhen set to true the old `jarsigner` code will be bypassed.\r\nThe new system examines the manifest file to figure out the\r\nmin and max supported versions of android. This is then passed\r\nto the `apksigner` along with the other information (like keys etc)\r\nand allows `apksigner` to figure out what signing algorithm to use.\r\n\r\nAdditional parameters can be passed to the tool by the developer\r\nvia the `AndroidApkSignerAdditionalArguments` property."},{"Id":"6724008779","Type":"PullRequestEvent","CreatedAt":"2017-10-16T20:44:21","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/861","RelatedDescription":"Merged pull request \"[linker] improve method detection in FixAbstractMethodsStep\" (#861) at xamarin/xamarin-android","RelatedBody":"The forms team run into an issue with debugger in VS [1]. During\r\ninvestigation it turned out that our FixAbstractMethodsStep injects 2\r\nmethods, which were not needed, as the methods were already\r\nimplemented. The bug itself looks like an issue, where original mdb\r\nfile was used in the apk, instead of the one written by our linker.\r\n\r\nThis change improves the method detection, where method name starts\r\nwith `global::`. In this particular case it were these methods:\r\n\r\n    global::Android.Views.View.IOnTouchListener.OnTouch\r\n    global::Android.Views.View.IOnClickListener.OnClick\r\n\r\n[1] https://bugzilla.xamarin.com/show_bug.cgi?id=59293"},{"Id":"6716563354","Type":"PullRequestEvent","CreatedAt":"2017-10-14T09:59:23","Actor":"radekdoulik","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/929","RelatedDescription":"Merged pull request \"[tests] Add Configuration info to test names\" (#929) at xamarin/xamarin-android","RelatedBody":"Context: 0077d151\r\nContext: d1d9820a\r\n\r\nA \"funny\" thing happened when commit e9daf5ea didn't build on Jenkins:\r\nI realized that not all tests were run in all configurations. From\r\ncommit d1d9820a:\r\n\r\n> Why are some tests Debug-only and some aren't?\r\n\r\nThe answer: time, primarily. Why run tests multiple times, when they\r\ncan be potentially time-consuming?\r\n\r\nWhile tests can be slow, they're not always *that* slow -- except for\r\n`Xamarin.Android.Build.Tests` and the BCL tests -- and even there,\r\nprogram behavior can alter between Debug and Release configurations.\r\nSee in particular commit 0077d151, in which the BCL tests are run only\r\nin the Debug configuration because tests *failed* when run in the\r\nRelease configuration.\r\n\r\nThe desire, then, is to run *all* tests in both Debug and Release\r\nconfigurations. Yes, it'll take longer! So what! (Within reason:\r\n`Xamarin.Android.Build.Tests` should only be run once!)\r\n\r\nHowever, this raises two problems:\r\n\r\n 1. Filename collisions\r\n 2. Jenkins unit test display\r\n\r\nUntil now, all tests wrote files into a filename that didn't include\r\nthe Configuration, e.g. `TestResult-Mono.Android_Tests.xml`. If we did\r\nrun these tests twice, the second test invocation would overwrite the\r\nfirst test invocation. This isn't desirable.\r\n\r\nThen there's the display on Jenkins: if we did have e.g.\r\n`TestResult-Mono.Android_Tests-Debug.xml`       and\r\n`TestResult-Mono.Android_Tests-Release.xml`, how will Jenkins display\r\nthat information? I haven't tested, but I would assume that one of two\r\nthings will occur, assuming reasonable Jenkins behavior:\r\n\r\n 1. Each test will be listed twice, e.g.\r\n\r\n        ApplicationContextIsApp\r\n        ApplicationContextIsApp\r\n\r\n 2. They'll be \"merged\" into a single entry.\r\n\r\nNeither of these behaviors is desirable: if Debug passes but Release\r\nfails, we need to be able to differentiate between them. Neither of\r\nthese possible renderings allows us to tell which configuration fails.\r\n\r\nSolve both of these problems by introducing a new `<RenameTestCases/>`\r\ntask. This task takes three values of importance:\r\n\r\n```xml\r\n<RenameTestCases\r\n    Configuration=\"CONFIGURATION\"\r\n    SourceFile=\"SOURCE\"\r\n    DestinationFolder=\"DESTINATION\"\r\n/>\r\n```\r\n\r\nThe `<RenameTestCases/>` task will read in `SOURCE`, and if `SOURCE`\r\nis an XML file which we determine is NUnit2-formatted XML (root\r\nelement of `<test-case/>`), we will update every `//test-case/@name`\r\nvalue so that it ends with ` / CONFIGURATION`. The updated XML is\r\nthen written to the `DESTINATION` directory, with a filename that\r\ncontains `CONFIGURATION`, and `SOURCE` is deleted.\r\n\r\nThus, if we have a Debug-configuration\r\n`TestResult-Mono.Android_Tests.xml` file with XML fragment:\r\n\r\n```xml\r\n<test-case\r\n    name=\"Mono.Android_Tests, Android.AppTests.ApplicationTest.ApplicationContextIsApp\"\r\n    ...\r\n/>\r\n```\r\n\r\nthen `<RenameTestCases/>` will create the file\r\n`TestResult-Mono.Android_Tests-Debug.xml` file with XML fragment:\r\n\r\n```xml\r\n<test-case\r\n    name=\"Mono.Android_Tests, Android.AppTests.ApplicationTest.ApplicationContextIsApp / Debug\"\r\n    ...\r\n/>\r\n```\r\n\r\nThis allows us to run tests in both Debug and Release configurations\r\nwhile not inadvertently overwriting the `TestResults*.xml` files that\r\nJenkins reads, and ensuring that the Jenkins test result output is\r\nrendered in a meaningfully useful fashion.\r\n\r\nAside: when updating `//test-case/@name`, the resulting value *cannot*\r\nend in `)`. If it does, then the `(root)` package name issue fixed in\r\ncommit 23b2642e reappears for the `generator` unit tests.\r\n\r\n**Completely random aside about the state of `xbuild`**:\r\nA development version of `<RenameTestCases/>` was \"saner\", using\r\n`ITaskItem[]` and not string:\r\n\r\n```csharp\r\npartial class RenameTestCases {\r\n    public      ITaskItem[]   SourceFiles {get; set;}\r\n    // vs.\r\n    //  public  string        SourceFile  {get; set;}\r\n}\r\n```\r\n\r\nThe problem is that the above, while entirely reasonable, did not work\r\nat all correctly with `xbuild`:\r\n\r\n```xml\r\n<RenameTestCases SourceFiles=\"%(TestApk.ResultsPath)\" />\r\n```\r\n\r\nUnder `xbuild`, MSBuild properties would not be expanded, e.g.\r\n`RenameTestCases.SourceFiles` would get a \"bizarro\" value of e.g.\r\n`$(OutputPath)Mono.Android_Tests-Signed.apk`, which is *useless* and\r\nwould result in `FileNotFoundException`s.\r\n\r\nMSBuild proper, of course, worked as desired.\r\n\r\nTODO: Once this is merged, update the Jenkins Configuration page so\r\nthat instead of:\r\n\r\n        make run-all-tests V=1 || exit 1\r\n\r\nit instead runs both Debug and Release configuration tests:\r\n\r\n        make run-all-tests SKIP_NUNIT_TESTS=1    V=1 || exit 1\r\n        make run-all-tests CONFIGURATION=Release V=1 || exit 1\r\n\r\nNote that `$(SKIP_NUNIT_TESTS)` is specified so that we only run the\r\nlengthy (1+hr!) `Xamarin.Android.Build.Tests` tests in the Release\r\nconfiguration, not the Debug + Release configurations."},{"Id":"6715423235","Type":"PullRequestEvent","CreatedAt":"2017-10-13T21:05:14","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/910","RelatedDescription":"Merged pull request \"[xabuild.exe] cross-platform form of tools/scripts/xabuild\" (#910) at xamarin/xamarin-android","RelatedBody":"Context: https://github.com/jonathanpeppers/xabuild\r\n\r\nxabuild.exe is a nice wrapper around MSBuild for compiling\r\nXamarin.Android projects using a locally built version of\r\nXamarin.Android on your system. It seems to work on Windows, MacOS, and\r\nLinux and doesn’t require elevation or modify your system.\r\n\r\nxabuild.exe works by doing the following:\r\n- Reference `MSBuild.exe` or `MSBuild.dll` depending on the platform\r\n- Overrides the `app.config` file of MSBuild to set various properties\r\n- This allows `xabuild.exe` to build Xamarin.Android projects using\r\nlocal Xamarin.Android build output\r\n- Creates symbolic links to `.NETPortable` and `.NETFramework`\r\ndirectories inside the Xamarin.Android build output directory\r\n- Run MSBuild’s `Main()` method\r\n\r\n### Changes\r\n- Added `xabuild.csproj` to Xamarin.Android.sln\r\n- `tools/scripts/xabuild` now runs `xabuild.exe` if `MSBUILD=msbuild`\r\n- Xamarin.Android.Build.Tests run `tools/scripts/xabuild` on Unix\r\nand `xabuild.exe` on Windows\r\n\r\n### Usage\r\n\r\nAn example on MacOS:\r\n```\r\n$ make prepare all MSBUILD=msbuild\r\n$ make all-tests MSBUILD=msbuild\r\n$ make run-nunit-tests MSBUILD=msbuild NUNIT_TESTS=bin/TestDebug/Xamarin.Android.Build.Tests.dll\r\n```\r\n\r\nAn example on Windows (msbuild should be 15.3 from VS 2017):\r\n```\r\n> msbuild build-tools\\scripts\\PrepareWindows.targets\r\n> msbuild Xamarin.Android.sln\r\n> bin\\Debug\\bin\\xabuild.exe Xamarin.Android-Tests.sln /p:XAIntegratedTests=False\r\n> packages\\NUnit.ConsoleRunner.3.7.0\\tools\\nunit3-console.exe bin\\TestDebug\\Xamarin.Android.Build.Tests.dll\r\n```\r\nNote, these tests are not all passing on Windows yet. See [here](https://devdiv.visualstudio.com/DevDiv/Default/_build/index?buildId=1022831) for latest results."}],"ResultType":"GitHubEvent"},"Forms":{"Events":[{"Id":"6723383229","Type":"PullRequestEvent","CreatedAt":"2017-10-16T18:23:57","Actor":"rmarinho","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/1186","RelatedDescription":"Merged pull request \"[UWP]  Fix for UWP crashing on load when compiled with .NET Native fo…\" (#1186) at xamarin/Xamarin.Forms","RelatedBody":"…r the store.\r\n\r\n### Description of Change ###\r\n\r\nUWP will crash when loading anything from the WindowsPlatform classes like Forms.Init.  When compiled for the Microsoft Store, Xamarin.Forms apps with crash immediately.\r\n\r\n### Bugs Fixed ###\r\n\r\nhttps://bugzilla.xamarin.com/show_bug.cgi?id=60005\r\n\r\n### API Changes ###\r\n\r\nNone.\r\n\r\n### Behavioral Changes ###\r\n\r\nXamarin.Forms apps can now be submitted to the Microsoft Store.\r\n\r\n### PR Checklist ###\r\n\r\n- [x] Has tests (if omitted, state reason in description)\r\n- [x] Rebased on top of master at time of PR\r\n- [x] Changes adhere to coding standard\r\n- [x] Consolidate commits as makes sense\r\n"},{"Id":"6723376954","Type":"PullRequestEvent","CreatedAt":"2017-10-16T18:22:35","Actor":"rmarinho","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/1203","RelatedDescription":"Opened pull request \"[iOS] Don't pass infinite value to UISearchBar width\" (#1203) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\n\r\nThis issue only happens with the IOS11 SDK there no documentation about this changed, but seems be related to way UIView layouts respect size that fits now of controls. \r\n\r\nTests are in our Searchbar View tests that were broken on iOS11\r\n\r\n### Bugs Fixed ###\r\n\r\n- https://bugzilla.xamarin.com/show_bug.cgi?id=59595\r\n\r\n### PR Checklist ###\r\n\r\n- [ ] Has tests (if omitted, state reason in description)\r\n- [ ] Rebased on top of master at time of PR\r\n- [ ] Changes adhere to coding standard\r\n- [ ] Consolidate commits as makes sense"},{"Id":"6723177525","Type":"PullRequestEvent","CreatedAt":"2017-10-16T17:38:52","Actor":"rmarinho","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/1198","RelatedDescription":"Merged pull request \"[Android] Allow VisualElementRenderer to process Click and LongClick\" (#1198) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\n\r\nRecent changes to fix some gesture problems on Android could interfere with custom Click/LongClick listeners on custom renderers by preventing the touch events from being processed. This change allows the renderers to process the events and fire off Click/LongClick if necessary.\r\n\r\n### Bugs ###\r\n\r\n- [60122 – LongClick on image not working](https://bugzilla.xamarin.com/show_bug.cgi?id=60122)\r\n\r\n### API Changes ###\r\n\r\nNone\r\n\r\n### Behavioral Changes ###\r\n\r\nNone\r\n\r\n### PR Checklist ###\r\n\r\n- [x] Has tests (if omitted, state reason in description)\r\n- [x] Rebased on top of master at time of PR\r\n- [x] Changes adhere to coding standard\r\n- [x] Consolidate commits as makes sense\r\n"},{"Id":"6722270959","Type":"PullRequestEvent","CreatedAt":"2017-10-16T14:38:29","Actor":"StephaneDelcroix","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/1202","RelatedDescription":"Opened pull request \"Use \"correct\" file paths for .xaml.g.cs files\" (#1202) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\n\r\nThe file path for partial classes were generated using the ResourceName for the file. For SAP projects, on some msbuild version on some Ones, those resource names might contains the full path. That full path, concatenated to the current build directory, could sometimes ends up being too long for outdated file system and build engines...\r\n\r\nThis use the same algorithm as the one used for UWP pages on SAP projects, meaning it duplicates the relative directory from the project root.\r\n\r\nThis is now all correct and well, as God intended to on day 1, but delayed it until now.\r\n\r\n**NOTE 1:** It might be important to notice that our current project templates are creating an App.xaml and MainPage.xaml files. Those being at the root of the SAP project will conflict with the default App.xaml and MainPage.xaml files on the UWP project. This is expected, and it's the way UWP works, so  ¯\\_(ツ)_/¯\r\n\r\n**NOTE 2:** `xbuild` doesn't see SAP projects the same way `msbuild` does. Projects using `xbuild` are therefore no longer supported.\r\n\r\n### Bugs Fixed ###\r\n\r\n- https://bugzilla.xamarin.com/show_bug.cgi?id=40077\r\n\r\n### API Changes ###\r\n\r\nI guess that Notes 1 and 2 are annoying enough, no need to break any API on top of that.\r\n\r\n### Behavioral Changes ###\r\n\r\n### PR Checklist ###\r\n\r\n- [ ] Has tests (if omitted, state reason in description)\r\n- [ ] Rebased on top of master at time of PR\r\n- [ ] Changes adhere to coding standard\r\n- [ ] Consolidate commits as makes sense"}],"ResultType":"GitHubEvent"},"Macios":{"Events":[{"Id":"6724226455","Type":"PullRequestEvent","CreatedAt":"2017-10-16T21:36:49","Actor":"timrisi","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/2896","RelatedDescription":"Opened pull request \"Add ISNMenuValidation to ActionDispatcher\" (#2896) at xamarin/xamarin-macios","RelatedBody":"- When a user event occurs, it looks at all of the menu items and determines if they have targets set.\r\n- Any menu item with a target set checks to see if the target has the action method in question\r\n- If the target has the action, it then looks for the validateMenuItem on the target\r\n- The way we hadle the event handler version is to create an ActionDispatcher, with the action method set on that object and the dispatcher set as the target.  As a result, any ValidateMenuitem method set in another class while trying to use the ActionDispatcher is never seen.  The method needs to be on the ActionDispatcher itself.\r\n- I fixed it by adding a new ValidateMenuItem func to NSMenuItem.  I added the INSMenuValidation interface to the ActionDispatcher with the correct export, then a Func that can be set.  If the function isn't null, it calls it then returns the value.  Otherwise it just returns true.  Then added a ValidateMenuItem Func to NSMenuItem that sets/gets the one from the ActionDispatcher.\r\n- Using this build, I was able to set the Activated method and ValidateMenuItem func on a menu item and successfully validate it."},{"Id":"6723234965","Type":"PullRequestEvent","CreatedAt":"2017-10-16T17:51:25","Actor":"rolfbjarne","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/2895","RelatedDescription":"Opened pull request \"Bump maccore to get minor mlaunch fix for launch apps on device.\" (#2895) at xamarin/xamarin-macios","RelatedBody":null},{"Id":"6723108810","Type":"PullRequestEvent","CreatedAt":"2017-10-16T17:23:39","Actor":"rolfbjarne","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/2894","RelatedDescription":"Opened pull request \"[mtouch] Protect against touchy files that don't like to be touched. Fixes #60149.\" (#2894) at xamarin/xamarin-macios","RelatedBody":"Catch any exceptions that occur when touching files, and show a warning\ninstead of failing the build.\n\nhttps://bugzilla.xamarin.com/show_bug.cgi?id=60149"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"920032724999725056","CreatedAt":"2017-10-16T21:04:29+00:00","UserScreenname":"xamarinhq","Text":"Adaptive UI with #XamarinForms: https://t.co/XZYix2Cv0j","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":61,"FavoriteCount":28,"RawContent":null},{"Id":"919958111670165505","CreatedAt":"2017-10-16T16:08:00+00:00","UserScreenname":"xamarinhq","Text":"Dive into the world of build configurations to see how they can improve your build times and productivity: https://t.co/KxvabUJIue","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":21,"FavoriteCount":11,"RawContent":null},{"Id":"919747480769712128","CreatedAt":"2017-10-16T02:11:02+00:00","UserScreenname":"xamarinhq","Text":"Add “mobile developer” to your resume with @XamarinU, starting with a 30-day free trial: https://t.co/bVpjALvmoy https://t.co/fiA4quVFQb","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":37,"FavoriteCount":15,"RawContent":null},{"Id":"919305335759953927","CreatedAt":"2017-10-14T20:54:06+00:00","UserScreenname":"xamarinhq","Text":"Weekend project: add some new features to your #Xamarin Android apps with our Android Support Library v26 overview:… https://t.co/49gaLayBhU","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":49,"FavoriteCount":21,"RawContent":null},{"Id":"918566588483342336","CreatedAt":"2017-10-12T19:58:35+00:00","UserScreenname":"xamarinhq","Text":"Bring 3D Models to life in augmented reality with #UrhoSharp: https://t.co/0c8YDgfF2Z https://t.co/j4LE7PWPMd","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":66,"FavoriteCount":33,"RawContent":null},{"Id":"918507552811487232","CreatedAt":"2017-10-12T16:04:00+00:00","UserScreenname":"xamarinhq","Text":"Learn how to build better apps with @BritchDavid's eBook on \"Enterprise Application Patterns using #XamarinForms\": https://t.co/YryVqlrejk","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":38,"FavoriteCount":9,"RawContent":null},{"Id":"918186189634572288","CreatedAt":"2017-10-11T18:47:01+00:00","UserScreenname":"xamarinhq","Text":"Update your #Xamarin iOS apps for the iPhone X: https://t.co/Yi49G6ijnP https://t.co/OmUwO59Fdx","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":58,"FavoriteCount":31,"RawContent":null},{"Id":"918142648204124160","CreatedAt":"2017-10-11T15:54:00+00:00","UserScreenname":"xamarinhq","Text":"#XamarinDevDays are a great way to learn how to build, test, &amp; connect native apps with #Xamarin! Find one near you: https://t.co/Ytw07Fr9eL","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":23,"FavoriteCount":16,"RawContent":null},{"Id":"917846344714391552","CreatedAt":"2017-10-10T20:16:35+00:00","UserScreenname":"xamarinhq","Text":"Learn how to build and release high quality, five-star apps faster using #VSMobileCenter: https://t.co/XHMCHeVNSB https://t.co/3hhv3CG6uh","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":61,"FavoriteCount":29,"RawContent":null},{"Id":"917779002781249539","CreatedAt":"2017-10-10T15:49:00+00:00","UserScreenname":"xamarinhq","Text":"Learn how to display data with #macOS Table Views: https://t.co/NHwCfrILH6","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":17,"FavoriteCount":12,"RawContent":null},{"Id":"917501676159893504","CreatedAt":"2017-10-09T21:27:00+00:00","UserScreenname":"xamarinhq","Text":"Learn how to build a real-time #XamarinForms communication app with #WebSocket: https://t.co/u3wk0FzGbu","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":117,"FavoriteCount":65,"RawContent":null},{"Id":"917416111804702720","CreatedAt":"2017-10-09T15:47:00+00:00","UserScreenname":"xamarinhq","Text":"Build a sample app that spans devices and mobile platforms using Microsoft's Project Rome: https://t.co/SLeQw6q4YO","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":40,"FavoriteCount":20,"RawContent":null},{"Id":"917203711692337152","CreatedAt":"2017-10-09T01:43:00+00:00","UserScreenname":"xamarinhq","Text":"Xamarin's @nishanil shows you how to add #facetracking and live recognition to your Android app: https://t.co/5R7K2hNJXY","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":34,"FavoriteCount":18,"RawContent":null},{"Id":"916789236879290370","CreatedAt":"2017-10-07T22:16:01+00:00","UserScreenname":"xamarinhq","Text":"Sign up for our FREE event in Denver (10/10) or McLean (10/12) where you'll learn how to build a #XamarinForms app:… https://t.co/frCmLy2kS5","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":14,"FavoriteCount":4,"RawContent":null},{"Id":"916409733246017536","CreatedAt":"2017-10-06T21:08:01+00:00","UserScreenname":"xamarinhq","Text":"Get excited! https://t.co/0m45zTRqFK","Source":"<a href=\"http://twitter.com\" rel=\"nofollow\">Twitter Web Client</a>","RetweetCount":38,"FavoriteCount":19,"RawContent":null},{"Id":"916329451205595137","CreatedAt":"2017-10-06T15:49:00+00:00","UserScreenname":"xamarinhq","Text":"Build a sample enterprise app with the Microsoft Authentication Library and #MicrosoftGraph APIs: https://t.co/d9Rlu92TWT","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":62,"FavoriteCount":28,"RawContent":null},{"Id":"916052505406197760","CreatedAt":"2017-10-05T21:28:31+00:00","UserScreenname":"xamarinhq","Text":"DataBinding Power Moves You May Not Be Using (Yet), with @davidortinau: https://t.co/VpucH7m8z9","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":52,"FavoriteCount":29,"RawContent":null},{"Id":"915970088846659584","CreatedAt":"2017-10-05T16:01:01+00:00","UserScreenname":"xamarinhq","Text":"Upgrade to #XamarinForms Stable release 2.4.0 with .NET Standard 2.0 support today! Learn more about this release:… https://t.co/Ku71DbGybm","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":98,"FavoriteCount":70,"RawContent":null},{"Id":"915688986986901504","CreatedAt":"2017-10-04T21:24:01+00:00","UserScreenname":"xamarinhq","Text":"#Xamarin's @lobrien explores the solar system with #ARKit and F#: https://t.co/0UXY2Lk1XB https://t.co/QclUHc5QGx","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":36,"FavoriteCount":28,"RawContent":null},{"Id":"915603919925125121","CreatedAt":"2017-10-04T15:46:00+00:00","UserScreenname":"xamarinhq","Text":"ICYMI, check out our webinar recording on using UrhoSharp 3D and #Xamarin Workbooks to add 3D animation to your app: https://t.co/AG37mw39QS","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":20,"FavoriteCount":7,"RawContent":null}]}},"RunOn":"2017-10-17T05:30:37.1116416Z","RunDurationInMilliseconds":3825}