{"Data":{"GitHub":{"Issues":[{"Id":"556644530","IsPullRequest":true,"CreatedAt":"2020-01-29T05:21:16","Actor":"frank-dong-ms","Number":"4726","RawContent":null,"Title":"skip more test","State":"open","Body":"skip below tests as they are crashing, hanging or failing the CI:\r\n\r\nSavePipeSlidingWindowW2L1 \r\nEntryPointSdcaBinary\r\nMulticlassLRTest \r\nAutoFitImageClassificationTrainTest \r\nTensorFlowImageClassification\r\nIrisVectorLightGbmWithLoadColumnName\r\nTensorFlowTransformMNISTConvTrainingTest \r\nTestEstimatorHogwildSGD \r\nPlattCalibratorOnnxConversionTest\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/4726","RelatedDescription":"Open PR \"skip more test\" (#4726)"},{"Id":"556639076","IsPullRequest":false,"CreatedAt":"2020-01-29T05:08:35","Actor":"TFTomSun","Number":"4725","RawContent":null,"Title":"object detection training ","State":"closed","Body":"Is there a possibility to do object detection training with ml.net comparable to the custom vision object detection services (azure)? If yes, is there a tutorial / sample out there? I couldn't find any object detection training sample. ","Url":"https://github.com/dotnet/machinelearning/issues/4725","RelatedDescription":"Closed issue \"object detection training \" (#4725)"},{"Id":"556585817","IsPullRequest":true,"CreatedAt":"2020-01-29T01:30:52","Actor":"frank-dong-ms","Number":"4724","RawContent":null,"Title":"Test hanging issue","State":"open","Body":"troubleshoot test host process hanging issue:\r\n1. disable max thread limit\r\n2. enable long running test support to find the test(s) that are hung and not returning\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/4724","RelatedDescription":"Open PR \"Test hanging issue\" (#4724)"},{"Id":"556579694","IsPullRequest":true,"CreatedAt":"2020-01-29T01:07:32","Actor":"najeeb-kazmi","Number":"4723","RawContent":null,"Title":"Fix math rendering for SdcaMaximumEntropyMulticlassTrainer doc","State":"open","Body":"Fixes #3938 ","Url":"https://github.com/dotnet/machinelearning/pull/4723","RelatedDescription":"Open PR \"Fix math rendering for SdcaMaximumEntropyMulticlassTrainer doc\" (#4723)"},{"Id":"556563542","IsPullRequest":true,"CreatedAt":"2020-01-29T01:00:36","Actor":"najeeb-kazmi","Number":"4720","RawContent":null,"Title":"Fix math rendering in SdcaMaximumEntropyMulticlassTrainer doc","State":"closed","Body":"Fixes #3938 ","Url":"https://github.com/dotnet/machinelearning/pull/4720","RelatedDescription":"Closed or merged PR \"Fix math rendering in SdcaMaximumEntropyMulticlassTrainer doc\" (#4720)"},{"Id":"556576994","IsPullRequest":true,"CreatedAt":"2020-01-29T00:57:48","Actor":"antoniovs1029","Number":"4722","RawContent":null,"Title":"PR to Test BinaryClassifierSymSgdTest","State":"open","Body":"PR to Test BinaryClassifierSymSgdTest","Url":"https://github.com/dotnet/machinelearning/pull/4722","RelatedDescription":"Open PR \"PR to Test BinaryClassifierSymSgdTest\" (#4722)"},{"Id":"556486107","IsPullRequest":true,"CreatedAt":"2020-01-29T00:27:54","Actor":"sharwell","Number":"4716","RawContent":null,"Title":"Fix failure to capture test failures","State":"closed","Body":"Need to verify that this doesn't cause new test failures.","Url":"https://github.com/dotnet/machinelearning/pull/4716","RelatedDescription":"Closed or merged PR \"Fix failure to capture test failures\" (#4716)"},{"Id":"556565690","IsPullRequest":true,"CreatedAt":"2020-01-29T00:17:27","Actor":"najeeb-kazmi","Number":"4721","RawContent":null,"Title":"Clarify model format in TensorFlow model loading sample","State":"open","Body":"Fixes #4063","Url":"https://github.com/dotnet/machinelearning/pull/4721","RelatedDescription":"Open PR \"Clarify model format in TensorFlow model loading sample\" (#4721)"},{"Id":"556557772","IsPullRequest":false,"CreatedAt":"2020-01-28T23:51:53","Actor":"luisquintanilla","Number":"4719","RawContent":null,"Title":"ExpressionEstimator Description Too Long","State":"open","Body":"Most of this page is taken up by the ExpressionEstimator description. \n\n---\n#### Document Details\n\n⚠ *Do not edit this section. It is required for docs.microsoft.com ➟ GitHub issue linking.*\n\n* ID: 881dc206-da7e-738d-4fb2-5f792163ab89\n* Version Independent ID: a6456027-81b5-faa0-2d6a-d37099133234\n* Content: [Microsoft.ML.Transforms Namespace](https://docs.microsoft.com/en-us/dotnet/api/microsoft.ml.transforms?view=ml-dotnet#feedback)\n* Content Source: [dotnet/xml/ns-Microsoft.ML.Transforms.xml](https://github.com/dotnet/ml-api-docs/blob/live/dotnet/xml/ns-Microsoft.ML.Transforms.xml)\n* Product: **dotnet-ml-api**\n* GitHub Login: @natke\n* Microsoft Alias: **nakersha**","Url":"https://github.com/dotnet/machinelearning/issues/4719","RelatedDescription":"Open issue \"ExpressionEstimator Description Too Long\" (#4719)"},{"Id":"556552832","IsPullRequest":true,"CreatedAt":"2020-01-28T23:35:45","Actor":"frank-dong-ms","Number":"4718","RawContent":null,"Title":"only run spefic test in CI for test","State":"open","Body":"Sample PR with ability to only run specific tests on CI.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/4718","RelatedDescription":"Open PR \"only run spefic test in CI for test\" (#4718)"},{"Id":"556551527","IsPullRequest":true,"CreatedAt":"2020-01-28T23:31:48","Actor":"antoniovs1029","Number":"4717","RawContent":null,"Title":"PR to test TrainAndPredictOnIris","State":"open","Body":"PR to test \"TrainAndPredictOnIris\" test.\r\n","Url":"https://github.com/dotnet/machinelearning/pull/4717","RelatedDescription":"Open PR \"PR to test TrainAndPredictOnIris\" (#4717)"},{"Id":"554445158","IsPullRequest":true,"CreatedAt":"2020-01-28T22:37:13","Actor":"natke","Number":"4697","RawContent":null,"Title":"Fix #4611 broken xrefs in ExpressionTransformer","State":"closed","Body":"Re-fix #4611 \r\n\r\n#4647 tried to fix this but some problems remained","Url":"https://github.com/dotnet/machinelearning/pull/4697","RelatedDescription":"Closed or merged PR \"Fix #4611 broken xrefs in ExpressionTransformer\" (#4697)"},{"Id":"554472705","IsPullRequest":true,"CreatedAt":"2020-01-28T21:38:19","Actor":"Lynx1820","Number":"4698","RawContent":null,"Title":"Fix for OneVersusAll Multiclass trainer","State":"closed","Body":"Also adding tests for OVA with FastForest, LinearSVM, and AveragedPerceptron.","Url":"https://github.com/dotnet/machinelearning/pull/4698","RelatedDescription":"Closed or merged PR \"Fix for OneVersusAll Multiclass trainer\" (#4698)"},{"Id":"554854878","IsPullRequest":true,"CreatedAt":"2020-01-28T19:15:06","Actor":"gvashishtha","Number":"4704","RawContent":null,"Title":"[Mn] Roadmap update","State":"closed","Body":"We are excited to review your PR.\r\n\r\nSo we can do the best job, please check:\r\n\r\n- [ ] There's a descriptive title that will make sense to other developers some time from now. \r\n- [ ] There's associated issues. All PR's should have issue(s) associated - unless a trivial self-evident change such as fixing a typo. You can use the format `Fixes #nnnn` in your description to cause GitHub to automatically close the issue(s) when your PR is merged.\r\n- [ ] Your change description explains what the change does, why you chose your approach, and anything else that reviewers should know.\r\n- [ ] You have included any necessary tests in the same PR.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/4704","RelatedDescription":"Closed or merged PR \"[Mn] Roadmap update\" (#4704)"},{"Id":"554916246","IsPullRequest":true,"CreatedAt":"2020-01-28T02:30:18","Actor":"najeeb-kazmi","Number":"4705","RawContent":null,"Title":"Correct KMeans scoring function doc","State":"closed","Body":"Fixes #4011 ","Url":"https://github.com/dotnet/machinelearning/pull/4705","RelatedDescription":"Closed or merged PR \"Correct KMeans scoring function doc\" (#4705)"},{"Id":"554485803","IsPullRequest":true,"CreatedAt":"2020-01-27T23:45:18","Actor":"antoniovs1029","Number":"4699","RawContent":null,"Title":"Added Onnx Export to PlattCalibratorTransformer","State":"closed","Body":"`PlattCalibrator` already had a `SaveAsOnnx` method ([link](https://github.com/dotnet/machinelearning/blob/2267f8d709ad053a5db5867abb396c960173d6ef/src/Microsoft.ML.Data/Prediction/Calibrator.cs#L1739)) which was called when saving to Onnx a `PlattCalibrator` through a `CalibratedModelParameter` class (such as in [here](https://github.com/dotnet/machinelearning/blob/2267f8d709ad053a5db5867abb396c960173d6ef/src/Microsoft.ML.Data/Prediction/Calibrator.cs#L391)). This would happen when saving a model produced by a calibrated binary classifier.\r\n\r\nBesides being part of calibrated binary classifiers, a PlattCalibrator can also be used independently, through a `PlattCalibratorTransformer`. So in this PR I add the necessary code so to also make it possible to save as Onnx a model that used a `PlattCalibratorTransformer`.\r\n\r\nI added 2 tests where a PlattCalibratorTransformer is added at the end of the model (in one test it's added on top of binary classifiers, in the other test no binary classifiers were used).\r\n\r\nI also fixed a bug in the SaveAsOnnx method of PlattCalibrator. For some reason, it was hardcoded to use \"-0.0000001f\" as the value of the Offset, ignoring the actual offset that the calibrator had. This worked with the existing tests because in them the offset was actually \"0\", but that isn't always the case, and so in the tests that I am adding the offset is not 0.","Url":"https://github.com/dotnet/machinelearning/pull/4699","RelatedDescription":"Closed or merged PR \"Added Onnx Export to PlattCalibratorTransformer\" (#4699)"},{"Id":"555894326","IsPullRequest":true,"CreatedAt":"2020-01-27T23:24:58","Actor":"frank-dong-ms","Number":"4715","RawContent":null,"Title":"crash test host process when test fails to take memory dump","State":"open","Body":"1. try crash the test host process to take memory dump when test fails\r\n2. enable all test running on CI to investigate","Url":"https://github.com/dotnet/machinelearning/pull/4715","RelatedDescription":"Open PR \"crash test host process when test fails to take memory dump\" (#4715)"},{"Id":"554761949","IsPullRequest":true,"CreatedAt":"2020-01-27T17:31:34","Actor":"mstfbl","Number":"4701","RawContent":null,"Title":"Changed type of CustomGains to double[] for consistency","State":"closed","Body":"Fixes #3708 ","Url":"https://github.com/dotnet/machinelearning/pull/4701","RelatedDescription":"Closed or merged PR \"Changed type of CustomGains to double[] for consistency\" (#4701)"},{"Id":"555544186","IsPullRequest":true,"CreatedAt":"2020-01-27T12:32:16","Actor":"mstfbl","Number":"4714","RawContent":null,"Title":"ulong count is modified to avoid KeyDataViewType exception when RowCount is 0","State":"open","Body":"Fixes #3707\r\n\r\nA work-around fix to the case where RowCount = 0 results in count = 0, which raises an exception with KeyDataViewType. This fix was suggested in the review comments. This PR is also a way to open the floor for suggestions regarding this fix.","Url":"https://github.com/dotnet/machinelearning/pull/4714","RelatedDescription":"Open PR \"ulong count is modified to avoid KeyDataViewType exception when RowCount is 0\" (#4714)"},{"Id":"555456797","IsPullRequest":false,"CreatedAt":"2020-01-27T09:39:22","Actor":"yaeldekel","Number":"4713","RawContent":null,"Title":"If evaluation data has only one class, how should we compute AUC?","State":"open","Body":"Currently if there is only data from one class, we throw an exception (see issue #4692 ).\r\nIt might make more sense to return NaN instead of that.","Url":"https://github.com/dotnet/machinelearning/issues/4713","RelatedDescription":"Open issue \"If evaluation data has only one class, how should we compute AUC?\" (#4713)"},{"Id":"555380328","IsPullRequest":false,"CreatedAt":"2020-01-27T06:24:13","Actor":"yasir9624","Number":"4712","RawContent":null,"Title":"DllNotFoundException: Unable to load DLL 'tensorflow': The specified module could not be found. (Exception from HRESULT: 0x8007007E)","State":"open","Body":"I am trying to Consume the ML.NET model to predict the results via following code \r\n\r\n\r\npublic static ModelOutput Predict(ModelInput input)\r\n        {\r\n\r\n\r\n            // Create new MLContext\r\n            MLContext mlContext = new MLContext();\r\n            ModelOutput result = new ModelOutput();\r\n            try\r\n            {\r\n\r\n\r\n                Load model &create prediction engine\r\n                string modelPath = AppDomain.CurrentDomain.BaseDirectory + \"MLModel.zip\";\r\n                ITransformer mlModel = mlContext.Model.Load(modelPath, out var modelInputSchema);\r\n                var predEngine = mlContext.Model.CreatePredictionEngine<ModelInput, ModelOutput>(mlModel);\r\n\r\n                Use model to make prediction on input dataDllNotFoundException: Unable to load DLL 'tensorflow': The specified module could not be found. (Exception from HRESULT: 0x8007007E)\r\n\r\n                result = predEngine.Predict(input);\r\n                Console.WriteLine(result);\r\n\r\n            }\r\n            catch (Exception e)\r\n            {\r\n                Console.WriteLine(e.ToString());\r\n            }\r\n            return result;\r\n        }\r\n\r\n\r\n\r\nI am having tensorflow.dll error while it is installed and present in respective folder too. ","Url":"https://github.com/dotnet/machinelearning/issues/4712","RelatedDescription":"Open issue \"DllNotFoundException: Unable to load DLL 'tensorflow': The specified module could not be found. (Exception from HRESULT: 0x8007007E)\" (#4712)"},{"Id":"555241878","IsPullRequest":false,"CreatedAt":"2020-01-26T15:10:46","Actor":"lefig","Number":"4711","RawContent":null,"Title":"Q: PCA Anomaly Detection - Time series data possible?","State":"open","Body":"Hi all,\r\n\r\nI have been trying unsuccessfully to do PCA on time series based data to identify anomalies.\r\n\r\nI see that the PCA credit card fraud example and scenario uses a bool and is credit card data (not time based).\r\n\r\nMy question is whether this is possible using time series data in principle or is the scenario inappropriate? I have floats, must they be transformed?\r\n\r\nThanks\r\n\r\nFig","Url":"https://github.com/dotnet/machinelearning/issues/4711","RelatedDescription":"Open issue \"Q: PCA Anomaly Detection - Time series data possible?\" (#4711)"},{"Id":"555161340","IsPullRequest":true,"CreatedAt":"2020-01-26T01:00:40","Actor":"harishsk","Number":"4710","RawContent":null,"Title":"Draft modification to redirect logs to test output","State":"open","Body":"Currently when running tests the channel output doesn't appear in the test logs. This is a draft change to enable that functionality in order to get better logging to debug tests better.\r\n\r\nThere are two changes here. \r\nThe first is a simple adds a handler for MLContext's Log event and logs the message to test output. The second adds a TextWriter derived class to ConsoleEnvironment that makes ConsoleEnvironment also log to the test console if the code is running a test environment.\r\n\r\nI am putting this PR up for review for two purposes. \r\n\r\nThe first is for general verification of the code and concept. And while the code reviews are in progress I am also using this to try and debug the failure in BinaryClassifierSymSgdTest in the CI builds.\r\n","Url":"https://github.com/dotnet/machinelearning/pull/4710","RelatedDescription":"Open PR \"Draft modification to redirect logs to test output\" (#4710)"},{"Id":"555099972","IsPullRequest":false,"CreatedAt":"2020-01-25T15:46:07","Actor":"Cyrus-Sushiant","Number":"4709","RawContent":null,"Title":"Save method on asp.net core get an error that access denied path","State":"open","Body":"### System information\r\n\r\n- **OS version/distro**: Windows 10\r\n- **.NET Version (eg., dotnet --info)**:  .NetCore 3.1.1\r\n\r\n### Issue\r\n\r\nWhen I want save trained model with the Save Method on asp.net core, I get an error that access denied path. I used other way instead of it.\r\n[Follow here](https://github.com/Cyrus-Sushiant/MLDotNetTitanic/blob/master/MLDotNetTitanic/ML/ModelBuilder.cs#L68).\r\n\r\n### Source code / logs\r\n\r\n`mlContext.Model.Save(mlModel, modelInputSchema, modelPath);`\r\n","Url":"https://github.com/dotnet/machinelearning/issues/4709","RelatedDescription":"Open issue \"Save method on asp.net core get an error that access denied path\" (#4709)"},{"Id":"555056662","IsPullRequest":false,"CreatedAt":"2020-01-25T07:56:42","Actor":"mauryflag","Number":"4708","RawContent":null,"Title":"Tensorflow.TensorflowException Can't copy 64064 bytes of a tensor into another with 32032 bytes buffer","State":"open","Body":"### System information\r\n\r\n- **Windows 10 pro**:\r\n- **.NET Version .net core 3.1**: \r\n\r\n### Issue\r\n\r\n- **I've generated model for image classification by using ML.Net Model builder , 2 labels (OK & NG) 10 images in total , model was correctly created together with the C# code **\r\n- **I've checked that everything was working fine then i've added SciSharp.TensorFlow.Redist-Windows-GPU in order to check the behavior with GPU**\r\n- **I was expecting that the model will be generated just simply more fast by using GPU , unfortunately it goes in error . attached source code and snip of the error .*\r\n\r\n[ML.zip](https://github.com/dotnet/machinelearning/files/4111726/ML.zip)\r\n","Url":"https://github.com/dotnet/machinelearning/issues/4708","RelatedDescription":"Open issue \"Tensorflow.TensorflowException Can't copy 64064 bytes of a tensor into another with 32032 bytes buffer\" (#4708)"},{"Id":"554985537","IsPullRequest":false,"CreatedAt":"2020-01-24T22:30:35","Actor":"najeeb-kazmi","Number":"4707","RawContent":null,"Title":"OnnxTransformer docs xml code sample should use latest dynamic API","State":"open","Body":"It currently uses the old static API\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/53fba319042f27efc64ef45889c9d9467ac20785/src/Microsoft.ML.OnnxTransformer/doc.xml#L49-L62\r\n","Url":"https://github.com/dotnet/machinelearning/issues/4707","RelatedDescription":"Open issue \"OnnxTransformer docs xml code sample should use latest dynamic API\" (#4707)"},{"Id":"554983812","IsPullRequest":true,"CreatedAt":"2020-01-24T22:25:31","Actor":"najeeb-kazmi","Number":"4706","RawContent":null,"Title":"Update cookbook to latest API","State":"open","Body":"Fixes #3849 ","Url":"https://github.com/dotnet/machinelearning/pull/4706","RelatedDescription":"Open PR \"Update cookbook to latest API\" (#4706)"},{"Id":"554795631","IsPullRequest":false,"CreatedAt":"2020-01-24T15:19:42","Actor":"francois-dorin","Number":"4703","RawContent":null,"Title":"Bottleneck phase produces bad files (invalid or with poor accuracy results) on some configuration","State":"open","Body":"### System information\r\n\r\n- **OS version/distro**: Windows 10 x64\r\n- **.NET Version (eg., dotnet --info)**: 3.1.101\r\n- **ML.NET Version**: 1.4.0 \r\n- **CPU : AMD Ryzen 9 3900X 12-Core**\r\n\r\n### Issue\r\n\r\n- **What did you do?**\r\nRunning a simple example of image classification, based on https://docs.microsoft.com/en-us/dotnet/machine-learning/tutorials/image-classification-api-transfer-learning\r\n\r\n- **What happened?**\r\nUsing only CPU, the process completes but provides a very poor accuracy (0.014)\r\nUsing GPU, the process passes the bottleneck phase but cannot begin the train due to an error.\r\n\r\n- **What did you expect?**\r\nUsing only CPU, I expect a better result (around 0.70).\r\nUsing GPU, I expect the process to continue and train.\r\n\r\n- **Additionnal informations**\r\nThe same program with the same dataset works fine on another computer (Intel based CPU) and have a correct accuracy (0.70).\r\nNo problem occurs when using the GPU.\r\nIf I copy/paste the cached files from the working computer to my computer, the process is working fine (with or without GPU) and have the expected accuracy (0.70).\r\nSo, I guess the problem relies in the files generated during the bottleneck phase and is related to the hardware configuration, since same program with same dataset have very different behaviours.\r\n\r\n### Source code / logs\r\nComplete logs (CPU Only) when using generated cached files during the bottleneck phase\r\n```\r\n*** Training the image classification model with DNN Transfer Learning on top of the selected pre-trained model/architecture ***\r\n[Source=ImageClassificationTrainer; Ensuring meta files are present., Kind=Trace] Channel started\r\n[Source=ImageClassificationTrainer; Ensuring meta files are present., Kind=Trace] Channel finished. Elapsed 00:00:00.0083464.\r\n[Source=ImageClassificationTrainer; Ensuring meta files are present., Kind=Trace] Channel disposed\r\n2020-01-24 16:03:09.939754: I tensorflow/core/platform/cpu_feature_guard.cc:142] Your CPU supports instructions that this TensorFlow binary was not compiled to use: AVX2\r\nSaver not created because there are no variables in the graph to restore\r\nPhase: Training, Dataset used:      Train, Batch Processed Count: 9177, Learning Rate:       0,01 Epoch:   0, Accuracy:  0,6121079, Cross-Entropy: 4,300151E+12\r\nPhase: Training, Dataset used: Validation, Batch Processed Count: 2299, Epoch:   0, Accuracy: 0,01333781\r\nPhase: Training, Dataset used:      Train, Batch Processed Count: 9177, Learning Rate:       0,01 Epoch:   1, Accuracy:  0,6213207, Cross-Entropy: 3,970512E+12\r\nPhase: Training, Dataset used: Validation, Batch Processed Count: 2299, Epoch:   1, Accuracy: 0,01346435\r\nPhase: Training, Dataset used:      Train, Batch Processed Count: 9177, Learning Rate:     0,0094 Epoch:   2, Accuracy:  0,6239617, Cross-Entropy: 3,621145E+12\r\nPhase: Training, Dataset used: Validation, Batch Processed Count: 2299, Epoch:   2, Accuracy: 0,01293448\r\nPhase: Training, Dataset used:      Train, Batch Processed Count: 9177, Learning Rate:     0,0094 Epoch:   3, Accuracy:  0,6224542, Cross-Entropy: 3,632903E+12\r\nPhase: Training, Dataset used: Validation, Batch Processed Count: 2299, Epoch:   3, Accuracy: 0,01363834\r\nPhase: Training, Dataset used:      Train, Batch Processed Count: 9177, Learning Rate:   0,008836 Epoch:   4, Accuracy:  0,6240405, Cross-Entropy: 3,406656E+12\r\nPhase: Training, Dataset used: Validation, Batch Processed Count: 2299, Epoch:   4, Accuracy: 0,01359484\r\nPhase: Training, Dataset used:      Train, Batch Processed Count: 9177, Learning Rate:   0,008836 Epoch:   5, Accuracy:  0,6223006, Cross-Entropy: 3,40876E+12\r\nPhase: Training, Dataset used: Validation, Batch Processed Count: 2299, Epoch:   5, Accuracy: 0,01343272\r\nPhase: Training, Dataset used:      Train, Batch Processed Count: 9177, Learning Rate: 0,008305839 Epoch:   6, Accuracy:  0,6249708, Cross-Entropy: 3,204811E+12\r\nPhase: Training, Dataset used: Validation, Batch Processed Count: 2299, Epoch:   6, Accuracy:  0,0134169\r\nPhase: Training, Dataset used:      Train, Batch Processed Count: 9177, Learning Rate: 0,008305839 Epoch:   7, Accuracy:  0,6249651, Cross-Entropy: 3,184228E+12\r\nPhase: Training, Dataset used: Validation, Batch Processed Count: 2299, Epoch:   7, Accuracy: 0,01392107\r\nPhase: Training, Dataset used:      Train, Batch Processed Count: 9177, Learning Rate: 0,007807489 Epoch:   8, Accuracy:  0,6232149, Cross-Entropy: 3,004976E+12\r\nPhase: Training, Dataset used: Validation, Batch Processed Count: 2299, Epoch:   8, Accuracy: 0,01329432\r\nPhase: Training, Dataset used:      Train, Batch Processed Count: 9177, Learning Rate: 0,007807489 Epoch:   9, Accuracy:  0,6227242, Cross-Entropy: 3,030696E+12\r\nPhase: Training, Dataset used: Validation, Batch Processed Count: 2299, Epoch:   9, Accuracy: 0,01335956\r\nPhase: Training, Dataset used:      Train, Batch Processed Count: 9177, Learning Rate: 0,00733904 Epoch:  10, Accuracy:  0,6246268, Cross-Entropy: 2,813951E+12\r\nPhase: Training, Dataset used: Validation, Batch Processed Count: 2299, Epoch:  10, Accuracy: 0,01338527\r\nPhase: Training, Dataset used:      Train, Batch Processed Count: 9177, Learning Rate: 0,00733904 Epoch:  11, Accuracy:  0,6228801, Cross-Entropy: 2,828588E+12\r\nPhase: Training, Dataset used: Validation, Batch Processed Count: 2299, Epoch:  11, Accuracy: 0,01380046\r\nPhase: Training, Dataset used:      Train, Batch Processed Count: 9177, Learning Rate: 0,006898697 Epoch:  12, Accuracy:  0,6257862, Cross-Entropy: 2,645051E+12\r\nPhase: Training, Dataset used: Validation, Batch Processed Count: 2299, Epoch:  12, Accuracy: 0,01335957\r\nPhase: Training, Dataset used:      Train, Batch Processed Count: 9177, Learning Rate: 0,006898697 Epoch:  13, Accuracy:  0,6236802, Cross-Entropy: 2,659039E+12\r\nPhase: Training, Dataset used: Validation, Batch Processed Count: 2299, Epoch:  13, Accuracy: 0,01352564\r\nPhase: Training, Dataset used:      Train, Batch Processed Count: 9177, Learning Rate: 0,006484775 Epoch:  14, Accuracy:  0,6229582, Cross-Entropy: 2,493187E+12\r\nPhase: Training, Dataset used: Validation, Batch Processed Count: 2299, Epoch:  14, Accuracy: 0,01385187\r\nPhase: Training, Dataset used:      Train, Batch Processed Count: 9177, Learning Rate: 0,006484775 Epoch:  15, Accuracy:  0,6234171, Cross-Entropy: 2,496486E+12\r\nPhase: Training, Dataset used: Validation, Batch Processed Count: 2299, Epoch:  15, Accuracy: 0,01407331\r\nPhase: Training, Dataset used:      Train, Batch Processed Count: 9177, Learning Rate: 0,006095689 Epoch:  16, Accuracy:  0,6221284, Cross-Entropy: 2,340333E+12\r\nPhase: Training, Dataset used: Validation, Batch Processed Count: 2299, Epoch:  16, Accuracy: 0,01392898\r\nPhase: Training, Dataset used:      Train, Batch Processed Count: 9177, Learning Rate: 0,006095689 Epoch:  17, Accuracy:  0,6231769, Cross-Entropy: 2,359828E+12\r\nPhase: Training, Dataset used: Validation, Batch Processed Count: 2299, Epoch:  17, Accuracy: 0,01311638\r\nPhase: Training, Dataset used:      Train, Batch Processed Count: 9177, Learning Rate: 0,005729948 Epoch:  18, Accuracy:  0,6233777, Cross-Entropy: 2,180089E+12\r\nPhase: Training, Dataset used: Validation, Batch Processed Count: 2299, Epoch:  18, Accuracy: 0,01357309\r\nPhase: Training, Dataset used:      Train, Batch Processed Count: 9177, Learning Rate: 0,005729948 Epoch:  19, Accuracy:  0,6225668, Cross-Entropy: 2,219908E+12\r\nPhase: Training, Dataset used: Validation, Batch Processed Count: 2299, Epoch:  19, Accuracy: 0,01381233\r\nPhase: Training, Dataset used:      Train, Batch Processed Count: 9177, Learning Rate: 0,005386151 Epoch:  20, Accuracy:  0,6234834, Cross-Entropy: 2,070789E+12\r\nPhase: Training, Dataset used: Validation, Batch Processed Count: 2299, Epoch:  20, Accuracy: 0,01392503\r\nSaver not created because there are no variables in the graph to restore\r\n```\r\n\r\nEnd logs (CPU Only) when using cached files from a working computer (more epoch and better results)\r\n```Phase: Training, Dataset used: Validation, Batch Processed Count: 2299, Epoch: 222, Accuracy:  0,7872852\r\nPhase: Training, Dataset used:      Train, Batch Processed Count: 9177, Learning Rate: 1,040379E-05 Epoch: 223, Accuracy:  0,8063375, Cross-Entropy:  0,7515593\r\nPhase: Training, Dataset used: Validation, Batch Processed Count: 2299, Epoch: 223, Accuracy:  0,7873719\r\nPhase: Training, Dataset used:      Train, Batch Processed Count: 9177, Learning Rate: 9,779563E-06 Epoch: 224, Accuracy:  0,8058808, Cross-Entropy:  0,7523516\r\nPhase: Training, Dataset used: Validation, Batch Processed Count: 2299, Epoch: 224, Accuracy:  0,7878902\r\nPhase: Training, Dataset used:      Train, Batch Processed Count: 9177, Learning Rate: 9,779563E-06 Epoch: 225, Accuracy:  0,8060154, Cross-Entropy:  0,7517532\r\nPhase: Training, Dataset used: Validation, Batch Processed Count: 2299, Epoch: 225, Accuracy:  0,7882423\r\nPhase: Training, Dataset used:      Train, Batch Processed Count: 9177, Learning Rate: 9,19279E-06 Epoch: 226, Accuracy:  0,8054689, Cross-Entropy:  0,7526353\r\nPhase: Training, Dataset used: Validation, Batch Processed Count: 2299, Epoch: 226, Accuracy:   0,788062\r\n```\r\n\r\nLogs when using GPU\r\n```\r\n*** Training the image classification model with DNN Transfer Learning on top of the selected pre-trained model/architecture ***\r\n[Source=ImageClassificationTrainer; Ensuring meta files are present., Kind=Trace] Channel started\r\n[Source=ImageClassificationTrainer; Ensuring meta files are present., Kind=Trace] Channel finished. Elapsed 00:00:00.0088906.\r\n[Source=ImageClassificationTrainer; Ensuring meta files are present., Kind=Trace] Channel disposed\r\n2020-01-24 16:11:47.949314: I tensorflow/core/platform/cpu_feature_guard.cc:142] Your CPU supports instructions that this TensorFlow binary was not compiled to use: AVX2\r\n2020-01-24 16:11:47.960130: I tensorflow/stream_executor/platform/default/dso_loader.cc:42] Successfully opened dynamic library nvcuda.dll\r\n2020-01-24 16:11:47.998004: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1640] Found device 0 with properties:\r\nname: GeForce RTX 2070 SUPER major: 7 minor: 5 memoryClockRate(GHz): 1.785\r\npciBusID: 0000:2d:00.0\r\n2020-01-24 16:11:48.000866: I tensorflow/stream_executor/platform/default/dlopen_checker_stub.cc:25] GPU libraries are statically linked, skip dlopen check.\r\n2020-01-24 16:11:48.003049: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1763] Adding visible gpu devices: 0\r\n2020-01-24 16:11:49.018802: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1181] Device interconnect StreamExecutor with strength 1 edge matrix:\r\n2020-01-24 16:11:49.020743: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1187]      0\r\n2020-01-24 16:11:49.021869: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1200] 0:   N\r\n2020-01-24 16:11:49.023948: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1326] Created TensorFlow device (/job:localhost/replica:0/task:0/device:GPU:0 with 6290 MB memory) -> physical GPU (device: 0, name: GeForce RTX 2070 SUPER, pci bus id: 0000:2d:00.0, compute capability: 7.5)\r\nSaver not created because there are no variables in the graph to restore\r\n2020-01-24 16:11:49.891634: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1640] Found device 0 with properties:\r\nname: GeForce RTX 2070 SUPER major: 7 minor: 5 memoryClockRate(GHz): 1.785\r\npciBusID: 0000:2d:00.0\r\n2020-01-24 16:11:49.894813: I tensorflow/stream_executor/platform/default/dlopen_checker_stub.cc:25] GPU libraries are statically linked, skip dlopen check.\r\n2020-01-24 16:11:49.897236: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1763] Adding visible gpu devices: 0\r\n2020-01-24 16:11:49.899756: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1181] Device interconnect StreamExecutor with strength 1 edge matrix:\r\n2020-01-24 16:11:49.902237: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1187]      0\r\n2020-01-24 16:11:49.903756: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1200] 0:   N\r\n2020-01-24 16:11:49.906049: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1326] Created TensorFlow device (/job:localhost/replica:0/task:0/device:GPU:0 with 6290 MB memory) -> physical GPU (device: 0, name: GeForce RTX 2070 SUPER, pci bus id: 0000:2d:00.0, compute capability: 7.5)\r\nCan't copy 160160 bytes of a tensor into another with 80080 bytes buffer.\r\n         [[{{node _arg_input_1/BottleneckInputPlaceholder_0_0}}]]\r\n```\r\n","Url":"https://github.com/dotnet/machinelearning/issues/4703","RelatedDescription":"Open issue \"Bottleneck phase produces bad files (invalid or with poor accuracy results) on some configuration\" (#4703)"},{"Id":"554785554","IsPullRequest":true,"CreatedAt":"2020-01-24T15:01:27","Actor":"yaeldekel","Number":"4702","RawContent":null,"Title":"Disallow bad input types in FeatureSelection estimator's GetOutputSchema method","State":"open","Body":"Related to #4693 .\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/4702","RelatedDescription":"Open PR \"Disallow bad input types in FeatureSelection estimator's GetOutputSchema method\" (#4702)"},{"Id":"554489330","IsPullRequest":false,"CreatedAt":"2020-01-24T00:47:21","Actor":"antoniovs1029","Number":"4700","RawContent":null,"Title":"Using PlattCalibratorTransformer with custon name for Score Column","State":"open","Body":"### Issue\r\n\r\n- **What did you do?**\r\nI tried to create a model with a PlattCalibratorEstimator that uses a `scoreColumnName` with a name different from \"Score\" (as done through [this API](https://docs.microsoft.com/en-us/dotnet/api/microsoft.ml.binaryclassificationcatalog.calibratorscatalog.platt?view=ml-dotnet#Microsoft_ML_BinaryClassificationCatalog_CalibratorsCatalog_Platt_System_String_System_String_System_String_))\r\n\r\n- **What happened?**\r\nAfter fitting the estimator, and while trying to transform the input dataview, the following exception is thrown:\r\n`System.InvalidOperationException: 'The data to calibrate contains no 'Score' column'`\r\n\r\n- **What did you expect?**\r\nThe model to work the same way as if I had used the name \"Score\" for my score column\r\n\r\nFurthermore, I couldn't find any sample or test that actually used the optional parameter `scoreColumnName` of PlattCalibratorEstimator, or the other parameters (such as labelColumnName). So adding such tests might be also necessary (if my PR #4700 gets in, then fixing this issue in here would also require to add onnx tests to check that PlattCalibrator with custom scoreColumnName is saved correctly to onnx). Checking if this problem also occurs in the other CalibratorTransformers would also be relevant.\r\n\r\nNotice that a simple workaround for this would be to copy the column that holds the score into a new column called Score, and specify Score as the scoreColumnName.\r\n\r\n### Source code / logs\r\nIn EXAMPLE 1 I show that it works if my score column is named \"Score\". But if I change the name, then it doesn't work.\r\n\r\n```C#\r\nusing Microsoft.ML;\r\n\r\nnamespace Platt2\r\n{\r\n    public static class Platt2\r\n    {\r\n\r\n        class ModelInput\r\n        {\r\n            public bool Label { get; set; }\r\n            public float Score { get; set; }\r\n        }\r\n\r\n        class ModelInput2\r\n        {\r\n            public bool Label { get; set; }\r\n            public float ScoreX { get; set; }\r\n        }\r\n\r\n        public static void Main()\r\n        {\r\n            var mlContext = new MLContext(seed: 0);\r\n\r\n            // EXAMPLE 1 - Works\r\n            IDataView data = mlContext.Data.LoadFromEnumerable<ModelInput>(\r\n                new ModelInput[]\r\n                {\r\n                                new ModelInput { Score = 10, Label = true },\r\n                                new ModelInput { Score = 15, Label = false },\r\n                }\r\n            );\r\n\r\n            var calibratorEstimator = mlContext.BinaryClassification.Calibrators\r\n                .Platt();\r\n\r\n            var calibratorTransformer = calibratorEstimator.Fit(data);\r\n            var finalData = calibratorTransformer.Transform(data);\r\n            var prev = finalData.Preview();\r\n\r\n\r\n            // EXAMPLE 2 - Doesn't Work\r\n            IDataView data2 = mlContext.Data.LoadFromEnumerable<ModelInput2>(\r\n                new ModelInput2[]\r\n                {\r\n                                new ModelInput2 { ScoreX = 10, Label = true },\r\n                                new ModelInput2 { ScoreX = 15, Label = false },\r\n                }\r\n            );\r\n\r\n            calibratorEstimator = mlContext.BinaryClassification.Calibrators\r\n                .Platt(scoreColumnName: \"ScoreX\");\r\n\r\n            calibratorTransformer = calibratorEstimator.Fit(data2);\r\n            finalData = calibratorTransformer.Transform(data2); // Throws exception\r\n            prev = finalData.Preview();\r\n\r\n        }\r\n\r\n    }\r\n}\r\n```\r\n","Url":"https://github.com/dotnet/machinelearning/issues/4700","RelatedDescription":"Open issue \"Using PlattCalibratorTransformer with custon name for Score Column\" (#4700)"}],"ResultType":"GitHubIssue"}},"RunOn":"2020-01-29T05:30:41.9778249Z","RunDurationInMilliseconds":612}