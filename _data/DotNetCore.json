{"Data":{"Blog":{"FeedItems":[{"Title":"An Introduction to DataFrame","PublishedOn":"2019-12-16T16:00:04+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Last month, we announced .NET support for Jupyter notebooks, and showed how to use them to work with .NET for Apache Spark and ML.NET. Today, we&#8217;re announcing the preview of a DataFrame type for...","Href":"https://devblogs.microsoft.com/dotnet/an-introduction-to-dataframe/","RawContent":null},{"Title":"ConfigureAwait FAQ","PublishedOn":"2019-12-12T04:31:21+00:00","CommentsCount":12,"FacebookCount":0,"Summary":".NET added async/await to the languages and libraries over seven years ago. In that time, it&#8217;s caught on like wildfire, not only across the .NET ecosystem, but also being replicated in a myriad...","Href":"https://devblogs.microsoft.com/dotnet/configureawait-faq/","RawContent":null},{"Title":"An Introduction to System.Threading.Channels","PublishedOn":"2019-12-12T03:52:18+00:00","CommentsCount":18,"FacebookCount":0,"Summary":"&#8220;Producer/consumer&#8221; problems are everywhere, in all facets of our lives. A line cook at a fast food restaurant, slicing tomatoes that are handed off to another cook to assemble a burger,...","Href":"https://devblogs.microsoft.com/dotnet/an-introduction-to-system-threading-channels/","RawContent":null},{"Title":".NET Framework December 2019 Security and Quality Rollup","PublishedOn":"2019-12-10T21:39:52+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Today, we are releasing the December 2019 Security and Quality Rollup Updates for .NET Framework.\nSecurity\nNo new security fixes. See September 2019 Security and Quality Rollup for the latest security...","Href":"https://devblogs.microsoft.com/dotnet/net-framework-december-2019-security-and-quality-rollup/","RawContent":null},{"Title":"We made Windows Server Core container images >40% smaller","PublishedOn":"2019-12-09T21:50:23+00:00","CommentsCount":4,"FacebookCount":0,"Summary":"Over the past year, we&#8217;ve been working with the Windows Server team to make Windows Server Core container images a lot smaller. They are now 40% smaller! The Windows Server team has already...","Href":"https://devblogs.microsoft.com/dotnet/we-made-windows-server-core-container-images-40-smaller/","RawContent":null},{"Title":"GC Perf Infrastructure – Part 1","PublishedOn":"2019-12-09T09:33:32+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"We open sourced our new GC Perf Infrastructure! It’s now part of the dotnet performance repo. I’ve been meaning to write about it ‘cause some curious minds had been asking when they could use it after...","Href":"https://devblogs.microsoft.com/dotnet/gc-perf-infrastructure-part-1/","RawContent":null},{"Title":".NET Core 2.2 will reach End of Life on December 23, 2019","PublishedOn":"2019-12-05T19:55:57+00:00","CommentsCount":6,"FacebookCount":0,"Summary":".NET Core 2.2 was released on December 4, 2018. As a non-LTS (&#8220;Current&#8221;) release, it is supported for three months after the next release. .NET Core 3.0 was released on September 23, 2019....","Href":"https://devblogs.microsoft.com/dotnet/net-core-2-2-will-reach-end-of-life-on-december-23-2019/","RawContent":null},{"Title":"Updates to .NET Core Windows Forms designer in Visual Studio 16.5 Preview 1","PublishedOn":"2019-12-05T18:56:40+00:00","CommentsCount":50,"FacebookCount":0,"Summary":"We are happy to announce the new preview version of the .NET Core Windows Forms designer, which is available with the Visual Studio 16.5 Preview 1.\nThe big news is that the designer is now part of...","Href":"https://devblogs.microsoft.com/dotnet/updates-to-net-core-windows-forms-designer-in-visual-studio-16-5-preview-1/","RawContent":null},{"Title":"Announcing Entity Framework Core 3.1 and Entity Framework 6.4","PublishedOn":"2019-12-03T20:32:00+00:00","CommentsCount":9,"FacebookCount":0,"Summary":"Announcing Entity Framework Core 3.1 and Entity Framework 6.4\nWe are excited to announce the general availability of EF Core 3.1 and EF 6.4 on nuget.org.\nThe final versions of .NET Core 3.1 and...","Href":"https://devblogs.microsoft.com/dotnet/announcing-entity-framework-core-3-1-and-entity-framework-6-4/","RawContent":null},{"Title":"Announcing .NET Core 3.1","PublishedOn":"2019-12-03T17:32:24+00:00","CommentsCount":73,"FacebookCount":0,"Summary":"Announcing .NET Core 3.1\nWe’re excited to announce the release of .NET Core 3.1. It&#8217;s really just a small set of fixes and refinements over .NET Core 3.0, which we released just over two months...","Href":"https://devblogs.microsoft.com/dotnet/announcing-net-core-3-1/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"11190129717","Type":"PullRequestEvent","CreatedAt":"2020-01-02T11:42:33","Actor":"manne","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/157","RelatedDescription":"Opened pull request \"Link to new github repo\" (#157) at dotnet/foundation","RelatedBody":""},{"Id":"11108512890","Type":"PullRequestEvent","CreatedAt":"2019-12-17T15:52:33","Actor":"khalidabuhakmeh","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/156","RelatedDescription":"Opened pull request \"Update Teams Link\" (#156) at dotnet/foundation","RelatedBody":"Was `https://dotnetfoundation.org/team` but now is `https://dotnetfoundation.org/about#team`"},{"Id":"10879854793","Type":"IssuesEvent","CreatedAt":"2019-11-17T05:53:48","Actor":"NextTurn","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/issues/155","RelatedDescription":"Opened issue \"Typos in CLA bot profile\" (#155) at dotnet/foundation","RelatedBody":"https://github.com/dnfclas\r\n\r\n## Expected\r\n\r\n![image](https://user-images.githubusercontent.com/45985406/69003693-983ed400-0941-11ea-91d9-18c29e752b81.png)\r\n\r\n## Actual\r\n\r\n![image](https://user-images.githubusercontent.com/45985406/69003652-ec958400-0940-11ea-8239-f9b19a7dc957.png)\r\n\r\nAlways capitalized, never .Net or dot NET. \r\n\r\n[.NET Glossary](https://github.com/dotnet/docs/blob/master/docs/standard/glossary.md#net)\r\n\r\n[Microsoft Style Guide](https://github.com/MicrosoftDocs/microsoft-style-guide/blob/master/styleguide/a-z-word-list-term-collections/n/net.md)"},{"Id":"10878192098","Type":"PullRequestEvent","CreatedAt":"2019-11-16T15:59:12","Actor":"NextTurn","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/154","RelatedDescription":"Opened pull request \"Fix broken links\" (#154) at dotnet/foundation","RelatedBody":""},{"Id":"10864162405","Type":"PullRequestEvent","CreatedAt":"2019-11-14T16:22:28","Actor":"NextTurn","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/153","RelatedDescription":"Opened pull request \"Fix broken links\" (#153) at dotnet/foundation","RelatedBody":""},{"Id":"10863953091","Type":"PullRequestEvent","CreatedAt":"2019-11-14T16:00:24","Actor":"NextTurn","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/152","RelatedDescription":"Opened pull request \"Fix broken links\" (#152) at dotnet/foundation","RelatedBody":""},{"Id":"10823146740","Type":"PullRequestEvent","CreatedAt":"2019-11-08T23:32:03","Actor":"onovotny","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/151","RelatedDescription":"Merged pull request \"Update RxUI license to reflect repo\" (#151) at dotnet/foundation","RelatedBody":"Fixes https://github.com/dotnet-foundation/dotnetfoundation-website/issues/68"},{"Id":"10822052136","Type":"PullRequestEvent","CreatedAt":"2019-11-08T20:13:07","Actor":"onovotny","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/151","RelatedDescription":"Opened pull request \"Update RxUI license to reflect repo\" (#151) at dotnet/foundation","RelatedBody":""},{"Id":"10806560653","Type":"PullRequestEvent","CreatedAt":"2019-11-07T05:43:05","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/147","RelatedDescription":"Merged pull request \"(GH-111) Update Source Link location\" (#147) at dotnet/foundation","RelatedBody":""},{"Id":"10806557022","Type":"PullRequestEvent","CreatedAt":"2019-11-07T05:42:14","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/150","RelatedDescription":"Merged pull request \"Add new Cake Maintainer\" (#150) at dotnet/foundation","RelatedBody":""},{"Id":"10806555226","Type":"PullRequestEvent","CreatedAt":"2019-11-07T05:41:48","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/149","RelatedDescription":"Merged pull request \"Add ImageSharp\" (#149) at dotnet/foundation","RelatedBody":""}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"11275368710","Type":"IssuesEvent","CreatedAt":"2020-01-14T20:37:01","Actor":"TaraOverfield","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/150","RelatedDescription":"Opened issue \"January 2020 .NET Updates\" (#150) at dotnet/announcements","RelatedBody":"The following .NET updates were released on January 2020. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n\r\n* [.NET Framework January 2020 Security and Quality Rollup](https://devblogs.microsoft.com/dotnet/net-framework-january-security-and-quality-rollup/ )\r\n\r\n## .NET Core\r\n* [January 2020 Updates – 2.1.15, 3.0.2, and 3.1.1](https://devblogs.microsoft.com/dotnet/net-core-january-2020/)\r\n\r\n\r\n* .NET Core 3.1.1 and .NET Core SDK ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/3.1/3.1.1/3.1.1.md) | [Download](https://github.com/dotnet/core/blob/master/release-notes/3.1/3.1.1/3.1.1-download.md) )\r\n\r\n* .NET Core 3.0.2 and .NET Core SDK ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/3.0/3.0.2/3.0.2.md) | [Download](https://github.com/dotnet/core/blob/master/release-notes/3.0/3.0.2/3.0.2-download.md) )\r\n\r\n* .NET Core 2.1.15 and .NET Core SDK ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.15/2.1.15.md) | [Download](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.15/2.1.15-download.md) )\r\n\r\n \r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n"},{"Id":"11274184940","Type":"IssuesEvent","CreatedAt":"2020-01-14T18:01:14","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/149","RelatedDescription":"Opened issue \"Microsoft Security Advisory CVE-2020-0606 : .NET Core Remote Code Execution Vulnerability\" (#149) at dotnet/announcements","RelatedBody":"Microsoft Security Advisory CVE-2020-0606 : .NET Core Remote Code Execution Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a remote code execution vulnerability exists in .NET software when the software fails to check the source markup of a file. An attacker who successfully exploited the vulnerability could run arbitrary code in the context of the current user.\r\n\r\nExploitation of the vulnerability requires that a user open a specially crafted file with an affected version of .NET Core. In an email attack scenario, an attacker could exploit the vulnerability by sending the specially crafted file to the user and convincing the user to open the file.\r\n\r\nThe security update addresses the vulnerability by correcting how .NET Core checks the source markup of a file.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/wpf/ **TBD**\r\n\r\n## <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nMicrosoft has not identified any mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core 3.0 application running on .NET Core 3.0.0, 3.0.1 or 3.1.0.\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nIf you have a runtime or SDK with a version listed in [affected software](#affected-software) you are exposed to the vulnerability.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nTo fix the issue please install the latest version of .NET Core. If you have multiple versions of .NET Core installed you will need to install multiple runtimes, or SDKs depending on what you have installed.\r\n\r\nYou can list the versions you have installed by running the `dotnet --info` command. You will see output like the following;\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.1.100\r\n Commit:    cd82f021f4\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18363\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.1.100\\\r\n\r\nHost (useful for support):\r\n  Version: 3.1.0\r\n  Commit:  65f04fb6db\r\n\r\n.NET Core SDKs installed:\r\n  3.0.101 [C:\\Program Files\\dotnet\\sdk]\r\n  3.1.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.App 3.0.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 3.0.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 3.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\n* For machines running .NET Core 3.0, you should download and install Runtime 3.0.2 or SDK 3.0.102 from https://dotnet.microsoft.com/download/dotnet-core/3.0.\r\n* For machines running .NET Core 3.1, you should download and install Runtime 3.1.1 or SDK 3.1.101 from https://dotnet.microsoft.com/download/dotnet-core/3.1.\r\n\r\nIf you have both 3.0 and 3.1 installed, you need to install the updates for both versions.\r\n\r\nOnce you have installed the updated runtime or SDK, restart your apps for the update to take effect.\r\n\r\nAdditionally, if you've deployed [self-contained applications](https://docs.microsoft.com/dotnet/core/deploying/#self-contained-deployments-scd) targeting any of the impacted versions, these applications are also vulnerable and must be recompiled and redeployed.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core GitHub organization. The main repos are located at https://github.com/dotnet/runtime and https://github.com/dotnet/aspnet/. The Announcements repo (https://github.com/dotnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the linked discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgments\r\n\r\nSoroush Dalili ([@irsdl](https://twitter.com/irsdl))\r\n\r\n### External Links\r\n\r\n[CVE-2020-0606](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-0606)\r\n\r\n### Revisions\r\n\r\nV1.0 (January 14, 2020): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2020-01-14_\r\n"},{"Id":"11274183716","Type":"IssuesEvent","CreatedAt":"2020-01-14T18:01:05","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/148","RelatedDescription":"Opened issue \"Microsoft Security Advisory CVE-2020-0605 : .NET Core Remote Code Execution Vulnerability\" (#148) at dotnet/announcements","RelatedBody":"# Microsoft Security Advisory CVE-2020-0605 : .NET Core Remote Code Execution Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a remote code execution vulnerability exists in .NET software when the software fails to check the source markup of a file. An attacker who successfully exploited the vulnerability could run arbitrary code in the context of the current user.\r\n\r\nExploitation of the vulnerability requires that a user open a specially crafted file with an affected version of .NET Core. In an email attack scenario, an attacker could exploit the vulnerability by sending the specially crafted file to the user and convincing the user to open the file.\r\n\r\nThe security update addresses the vulnerability by correcting how .NET Core checks the source markup of a file.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/wpf/ **TBD**\r\n\r\n## <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nMicrosoft has not identified any mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core 3.0 application running on .NET Core 3.0.0, 3.0.1 or 3.1.0.\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nIf you have a runtime or SDK with a version listed in [affected software](#affected-software) you are exposed to the vulnerability.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nTo fix the issue please install the latest version of .NET Core. If you have multiple versions of .NET Core installed you will need to install multiple runtimes, or SDKs depending on what you have installed.\r\n\r\nYou can list the versions you have installed by running the `dotnet --info` command. You will see output like the following;\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.1.100\r\n Commit:    cd82f021f4\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18363\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.1.100\\\r\n\r\nHost (useful for support):\r\n  Version: 3.1.0\r\n  Commit:  65f04fb6db\r\n\r\n.NET Core SDKs installed:\r\n  3.0.101 [C:\\Program Files\\dotnet\\sdk]\r\n  3.1.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.App 3.0.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 3.0.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 3.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\n* For machines running .NET Core 3.0, you should download and install Runtime 3.0.2 or SDK 3.0.102 from https://dotnet.microsoft.com/download/dotnet-core/3.0.\r\n* For machines running .NET Core 3.1, you should download and install Runtime 3.1.1 or SDK 3.1.101 from https://dotnet.microsoft.com/download/dotnet-core/3.1.\r\n\r\nIf you have both 3.0 and 3.1 installed, you need to install the updates for both versions.\r\n\r\nOnce you have installed the updated runtime or SDK, restart your apps for the update to take effect.\r\n\r\nAdditionally, if you've deployed [self-contained applications](https://docs.microsoft.com/dotnet/core/deploying/#self-contained-deployments-scd) targeting any of the impacted versions, these applications are also vulnerable and must be recompiled and redeployed.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core GitHub organization. The main repos are located at https://github.com/dotnet/runtime and https://github.com/dotnet/aspnet/. The Announcements repo (https://github.com/dotnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the linked discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgments\r\n\r\nSoroush Dalili ([@irsdl](https://twitter.com/irsdl))\r\n\r\n### External Links\r\n\r\n[CVE-2020-0605](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-0605)\r\n\r\n### Revisions\r\n\r\nV1.0 (January 14, 2020): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2020-01-14_\r\n"},{"Id":"11214612804","Type":"IssuesEvent","CreatedAt":"2020-01-06T23:02:39","Actor":"vivmishra","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/147","RelatedDescription":"Opened issue \".NET Core 2.2 has reached end of life\" (#147) at dotnet/announcements","RelatedBody":"[.NET Core 2.2 reached end of life](https://devblogs.microsoft.com/dotnet/net-core-2-2-will-reach-end-of-life-on-december-23-2019/) on **December 23, 2019**. This means [.NET Core 2.2](https://devblogs.microsoft.com/dotnet/announcing-net-core-2-2/) is no longer supported and updates will no longer be provided. We recommend moving to [.NET Core 3.1](https://devblogs.microsoft.com/dotnet/announcing-net-core-3-1/), our long term support (LTS) release.\r\n\r\n- [Download .NET Core 3.1](https://www.microsoft.com/net/download/dotnet-core/3.1)\r\n- [.NET Core 2.2 end-of-life statement](https://devblogs.microsoft.com/dotnet/net-core-2-2-will-reach-end-of-life-on-december-23-2019/)\r\n\r\nWe've created an issue at [dotnet/core#4084](https://github.com/dotnet/core/issues/4084) for your questions and comments.\r\n\r\n## .NET Core 2.2 Lifecycle\r\n\r\n.NET Core releases belong to one of two [support lifecycles](https://www.microsoft.com/net/platform/support-policy): long term support (LTS) and Current. LTS releases are stable release which receive critical updates and are supported for at least three years. Current releases can include new features that may undergo future change based on feedback. Current releases are supported for three months after the subsequent .NET Core major or minor release. Both LTS and Current releases receive critical fixes throughout their lifecycle, for security, reliability, or to add support for new operating system versions. You must stay up-to-date with the latest patches to qualify for support. \r\n\r\n[.NET Core 2.2](https://devblogs.microsoft.com/dotnet/announcing-net-core-2-2/) was released in December 2018 as a Current release. Per the lifecycle policy, Current releases reach end of life 3 months after a subsequent release (Current or LTS). **.NET Core 3.0** released in **September 2019** and began the end of life countdown for .NET Core 2.2 that concluded on December 23, 2019. \r\n\r\n## .NET Core 2.2 Downloads\r\n\r\n.NET Core 2.2 installers, zips and tar.gzs will remain available, but unsupported. This includes existing releases available on Linux package feeds. Previous versions, including 2.2, will be accessible through the [Download Archives](https://www.microsoft.com/net/download/archives). \r\n\r\n## Policy Information\r\n\r\nAdditional lifecycle and support details  and background can be seen in the following:\r\n\r\n* [.NET Core Support Lifecycle](https://www.microsoft.com/net/platform/support-policy)\r\n* [Microsoft Support for .NET Core](https://github.com/dotnet/core/blob/master/microsoft-support.md)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n* [Support and Versioning](https://blogs.msdn.microsoft.com/dotnet/2016/07/26/net-support-and-versioning/)\r\n"},{"Id":"11137901850","Type":"IssuesEvent","CreatedAt":"2019-12-20T20:42:34","Actor":"vivmishra","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/146","RelatedDescription":"Opened issue \"Announcing Availability of Localized IntelliSense for .NET Core 3.0 and 3.1\" (#146) at dotnet/announcements","RelatedBody":"This week we released localized [IntelliSense](https://docs.microsoft.com/en-us/visualstudio/ide/using-intellisense?view=vs-2019) files for .NET Core 3.0 and 3.1, in following 10 Visual Studio supported languages: \r\n- Brazilian Portuguese\r\n- Chinese (simplified)\r\n- Chinese (traditional)\r\n- French\r\n- German\r\n- Italian\r\n- Japanese\r\n- Korean\t\r\n- Russian\r\n- Spanish\r\n\r\nThe files (in zip archives) are available for download from [**Download localized .NET Core IntelliSense files**](https://dotnet.microsoft.com/download/dotnet-core/intellisense).\r\n\r\n * [Checksums for 3.0 zip files](https://dotnetcli.blob.core.windows.net/dotnet/checksums/3.0.0-intellisense-sha.txt)\r\n * [Checksums for 3.1 zip files](https://dotnetcli.blob.core.windows.net/dotnet/checksums/3.1.0-intellisense-sha.txt)\r\n\r\nYou can see [the .NET Core Guide](https://aka.ms/dotnet-core-intellisense) for instructions on how to use these files with Visual Studio.\r\n\r\nBy default, when you're developing .NET Core projects, the SDK only includes the English version of the IntelliSense files. But now you can enhance your localized Visual Studio development experience by adding the localized IntelliSense files from the download site into your local development environment.\r\n\r\nLastly, with this release we have made the localized IntelliSense available as zip archives that does require you to manually extract and copy the files to respective SDK install folders. But we plan to make this experience better in future releases.\r\n\r\n## Discussion\r\nTo discuss this issue, please comment on the corresponding issue at [dotnet/core #4032](https://github.com/dotnet/core/issues/4032).\r\n"},{"Id":"11059014848","Type":"IssuesEvent","CreatedAt":"2019-12-10T22:29:30","Actor":"TaraOverfield","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/145","RelatedDescription":"Opened issue \"December 2019 .NET Updates\" (#145) at dotnet/announcements","RelatedBody":"The following .NET updates were released on November 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n\r\n* [.NET Framework December 2019 Security and Quality Rollup](https://devblogs.microsoft.com/dotnet/net-framework-december-2019-security-and-quality-rollup/ )\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)"},{"Id":"11050403011","Type":"IssuesEvent","CreatedAt":"2019-12-10T03:08:33","Actor":"terrajobst","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/144","RelatedDescription":"Opened issue \"Removal of read-collaborator access\" (#144) at dotnet/announcements","RelatedBody":"***TL;DR**: We’ll remove collaborators with read-only access from our public repos on December 16th. This means some folks will lose their Collaborator badge and the ability to interact with the CI system.*\r\n\r\nOver the years, we’ve added a bunch of folks as collaborators with read permissions to our public repos. The rationale was that we wanted to be able to assign issues to community members because GitHub only allowed assigning issues to users with an explicit permission grant for the repository. However, they changed this in [June 2019](https://github.blog/2019-06-25-assign-issues-to-issue-commenters/). Now, we can assign issues to all users with explicit permissions as well as to users that have commented on the specific issue.\r\n\r\nAlso, we recently started to audit and tighten the permissions for our organizations. As a result, it became clear that large number of repo-specific permission grants are hard to review and audit. Internally, our goal is to grant all permissions via teams instead.\r\n\r\nHence, we plan to remove all collaborators from public repos that only have read permissions (folks with triage permissions will remain). The full list of affected repos is listed below.\r\n\r\nThis shouldn’t impact your ability to work with us, but losing explicit read-only has the following implications:\r\n\r\n-   **You’ll lose the contributor badge**. We understand that this is visually appealing and for some people it might have been a badge of honor. But given that GitHub also shows a Contributor bade for folks whose PRs got merged, we don’t think it this will be a major take back.    \r\n    ![image](https://user-images.githubusercontent.com/5169960/70491508-43acf580-1ab6-11ea-94df-74ea2dde98b4.png)\r\n\r\n\r\n-   **You lose the ability to interact with the CI system**. As a collaborator, you can use comments to [send commands to the CI system](https://github.com/dotnet/runtime/blob/master/docs/project/pullrequest-builds.md). While this can be useful at times, we generally don’t expect (or desire) contributors to do that. Of course, anyone can still access the CI logs.\r\n\r\n| Public Repo                | \\#collaborators with read |\r\n|----------------------------|---------------------------|\r\n| arcade                     | 1                         |\r\n| BenchmarkDotNet            | 11                        |\r\n| cli                        | 2                         |\r\n| command-line-api           | 14                        |\r\n| coreclr                    | 18                        |\r\n| corefx                     | 180                       |\r\n| corefxlab                  | 4                         |\r\n| corert                     | 7                         |\r\n| core-sdk                   | 1                         |\r\n| docs                       | 3                         |\r\n| interactive-window         | 1                         |\r\n| machinelearning            | 1                         |\r\n| machinelearning-samples    | 1                         |\r\n| msbuild-language-service   | 1                         |\r\n| runtime                    | 128                       |\r\n| spark                      | 5                         |\r\n| standard                   | 1                         |\r\n| windowsdesktop             | 1                         |\r\n| winforms-datavisualization | 1                         |\r\n| Grand Total                | 381                       |\r\n\r\n### Discussion\r\n\r\nTo discuss this, please comment on the corresponding issue at https://github.com/dotnet/runtime/issues/718."},{"Id":"11003471296","Type":"IssuesEvent","CreatedAt":"2019-12-03T20:36:30","Actor":"MichaelSimons","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/143","RelatedDescription":"Opened issue \".NET Core `latest` Docker tags updated to 3.1\" (#143) at dotnet/announcements","RelatedBody":"# .NET Core `latest` Docker tags updated to 3.1\r\n\r\nThe `latest` tags for the [dotnet/core](https://hub.docker.com/_/microsoft-dotnet-core) repos have been updated to reference [.NET Core 3.1](https://devblogs.microsoft.com/dotnet/announcing-net-core-3-1/).\r\n\r\n## Discussion\r\n \r\nYou can share your thoughts on this change or see what others are saying at:\r\n \r\n* [dotnet/dotnet-docker#1337](https://github.com/dotnet/dotnet-docker/issues/1511)\r\n\r\n## Details\r\n\r\n* [dotnet-docker#1509](https://github.com/dotnet/dotnet-docker/pull/1509)\r\n\r\nThe `latest` tags for the [dotnet/core](https://hub.docker.com/_/microsoft-dotnet-core) repos are always intended to reference the latest supported version of .NET Core. At this time, the latest supported version is .NET Core 3.1. This version of .NET Core is also a [long-term supported (LTS) release](https://dotnet.microsoft.com/platform/support/policy/dotnet-core).\r\n\r\nThe following Docker repos have been updated:\r\n\r\n* [dotnet/core/sdk](https://hub.docker.com/_/microsoft-dotnet-core-sdk)\r\n* [dotnet/core/aspnet](https://hub.docker.com/_/microsoft-dotnet-core-aspnet)\r\n* [dotnet/core/runtime](https://hub.docker.com/_/microsoft-dotnet-core-runtime)\r\n* [dotnet/core/runtime-deps](https://hub.docker.com/_/microsoft-dotnet-core-runtime-deps)\r\n\r\nIt is recommended to use a more-specific tag than `latest` for anything other than casual development. Once you have an application that you believe will eventually go to production, you are recommended to use a tag like `3.1`."},{"Id":"11002231262","Type":"IssuesEvent","CreatedAt":"2019-12-03T18:00:28","Actor":"leecow","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/142","RelatedDescription":"Opened issue \".NET Core 3.1.0\" (#142) at dotnet/announcements","RelatedBody":".NET Core 3.1.0 is available and https://github.com/dotnet/core/issues/3950 has been opened for discussion.\r\n\r\n[Release Notes](https://github.com/dotnet/core/blob/master/release-notes/3.1/3.1.0.md)\r\n[Download](https://dotnet.microsoft.com/download/dotnet-core/3.1)\r\n\r\n**Blog posts**\r\n\r\n[.NET Core](https://devblogs.microsoft.com/dotnet/announcing-net-core-3-1/)\r\n[ASP.NET Core](https://devblogs.microsoft.com/aspnet/asp-net-core-updates-in-net-core-3-1/)\r\n\r\nPlease report any issues you find with .NET Core 3.1 , either responding to this issue, creating a new issue or creating a new issue in one of the following repos:\r\n\r\n* [aspnet/Home](https://github.com/aspnet/Home) - for ASP.NET Core questions\r\n* [aspnet/EntityFrameworkCore](https://github.com/aspnet/EntityFrameworkCore) - for Entity Framework Core questions\r\n* [dotnet/cli](https://github.com/dotnet/cli/issues) - for CLI tools and questions\r\n* [dotnet/corefx](https://github.com/dotnet/corefx/issues) - for API issues and questions\r\n* [dotnet/coreclr](https://github.com/dotnet/coreclr/issues) - for runtime issues\r\n* [dotnet/core-setup](https://github.com/dotnet/core-setup/issues) - for installer issues\r\n* [dotnet/winforms](https://github.com/dotnet/winforms/issues) - for Winforms issues\r\n* [dotnet/wpf](https://github.com/dotnet/wpf/issues) - for WPF issues\r\n* [nuget/home](https://github.com/nuget/home/issues) - for NuGet questions and issues"}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"11277620064","Type":"PullRequestEvent","CreatedAt":"2020-01-15T03:31:02","Actor":"VSadov","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/27990","RelatedDescription":"Merged pull request \"Revert CPU clipping in the presence of CPU quota to 3.0, 2.x behavior.\" (#27990) at dotnet/coreclr","RelatedBody":"This is a fix for an issue tracked by https://github.com/dotnet/runtime/issues/622. \r\nIt is a reversal of a change made in 3.1 vs. 3.0 and 2.X \r\n(Basically reverting https://github.com/dotnet/coreclr/pull/26806)\r\nThe change was an improvement in some cases, but was causing considerable performance regressions in constrained container scenarios.\r\n\r\n## Customer Impact\r\nCustomers report performance regressions in constrained container scenarios when CPU quotas are applied.\r\n\r\n## Regression?\r\nYes. From 3.0 and 2.x\r\n\r\n## Testing\r\nRegular PR tests. \r\nVerified that the most affected aspnet benchmarks are back to 3.0 performance levels.\r\n\r\n## Risk\r\nLow: This is reverting to behavior that we had for a few releases."},{"Id":"11276332849","Type":"PullRequestEvent","CreatedAt":"2020-01-14T22:56:06","Actor":"Anipik","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/27967","RelatedDescription":"Merged pull request \"Port to 2.1 - Fix VirtualMemoryLogging::logRecords overflow\" (#27967) at dotnet/coreclr","RelatedBody":"Issue: https://github.com/dotnet/coreclr/issues/27547\r\n\r\nCustomer impact\r\n---\r\n\r\nCrash or hang in long running (days) processes on Linux, triggered by runtime executing 2 billion of  virtual memory operations.\r\n\r\nRegression?\r\n---\r\n\r\nNot a regression - the bug is present since .NET Core 1.0. Windows/Linux reliability gap.\r\n\r\nRisk\r\n---\r\nLow\r\n\r\n----\r\n\r\nwhen VirtualMemoryLogging::recordNumber increments from LONG_MAX,\r\nit became negative number, and the result of i % MaxRecords became\r\na number from -127 to 0.\r\n\r\nWhen that happens we will ovewrite CRITICAL_SECTION virtual_critsec\r\nwhich are stored in bss right before logRecords with garbage data.\r\nThen most likely the process will have a GC hang with one or more\r\nGC threads stuck trying to enter or leave critical section.\r\n\r\nThe fix is to ensure ULONG value are passed to modulo operation."},{"Id":"11276331343","Type":"PullRequestEvent","CreatedAt":"2020-01-14T22:55:52","Actor":"Anipik","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/27948","RelatedDescription":"Merged pull request \"Update BuildTools, CoreClr, CoreFx to rc1-04626-02, servicing-28325-01, servicing-28327-02, respectively (release/2.1)\" (#27948) at dotnet/coreclr","RelatedBody":"/cc @dotnet/maestro-reviewers-core"},{"Id":"11276283066","Type":"PullRequestEvent","CreatedAt":"2020-01-14T22:47:50","Actor":"Anipik","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/27994","RelatedDescription":"Merged pull request \"update branding for coreclr 2.1.16\" (#27994) at dotnet/coreclr","RelatedBody":""},{"Id":"11276171020","Type":"PullRequestEvent","CreatedAt":"2020-01-14T22:29:37","Actor":"GrabYourPitchforks","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/27996","RelatedDescription":"Opened pull request \"Revert EncoderNLS and DecoderNLS Convert changes\" (#27996) at dotnet/coreclr","RelatedBody":"Port https://github.com/dotnet/runtime/pull/752 to release/3.1\r\nFixes https://github.com/dotnet/runtime/issues/594\r\n\r\n## Description\r\n\r\nIn .NET Core 3.0 / 3.1 we changed how the _completed_ out parameter is set on the `EncoderNLS.Convert` and `DecoderNLS.Convert` routines. We had changed the logic to match precisely what MSDN's documentation stated and to fix a possible data corruption bug; however, this broke a number of customers' applications by sending them into infinite loops.\r\n\r\nThis PR reverts that change.\r\n\r\n## Customer Impact\r\n\r\nIf customers were relying on the previous behavior of the _completed_ out parameter, their applications could end up in an infinite loop. What makes matters worse is that the sample code on the MSDN page for `Encoder.Convert` and `Decoder.Convert` is also susceptible to this pattern, so we suspect a large number of customers may have based their own application code on the sample.\r\n\r\n## Regression?\r\n\r\nYes, from .NET Framework 4.x and .NET Core 2.x. One half of this change was introduced in .NET Core 3.0 (see https://github.com/dotnet/coreclr/commit/43a5159d39bd52195c5095da4006183f791c696b); the other half was introduced in .NET Core 3.1 (see https://github.com/dotnet/coreclr/commit/c07ec4cd2f88c23edc87500893576d83c20f2e6d).\r\n\r\n## Testing\r\n\r\nThe reversion is already committed in the 5.0 branches (see https://github.com/dotnet/runtime/commit/d49b541ab156d992aeb4bbe410f7a816bb0ac039), so we have been getting test coverage on those nightlies. No notable regressions have been reported.\r\n\r\n## Risk\r\n\r\nSomewhere between minimal and moderate. It's possible that some applications may have taken a dependency on the new behavior. See for instance https://github.com/dotnet/aspnetcore/pull/17747, where ASP.NET appears to have unintentionally taken a dependency on the new behavior and had to proactively make a change so that they behave correctly both before and after this PR goes through.\r\n\r\n/cc @tarekgh @anurse @danmosemsft "},{"Id":"11276013936","Type":"PullRequestEvent","CreatedAt":"2020-01-14T22:05:50","Actor":"Anipik","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/pull/27995","RelatedDescription":"Closed pull request \"[automated] Merge branch 'release/3.0' => 'release/3.1'\" (#27995) at dotnet/coreclr","RelatedBody":"I detected changes in the release/3.0 branch which have not been merged yet to release/3.1. I'm a robot and am configured to help you automatically keep release/3.1 up to date, so I've opened this PR.\r\n\r\nThis PR merges commits made on release/3.0 by the following committers:\n\n* @Anipik\n* @mmitche\n* @davmason\n* @jashook\n* @brianrob\r\n\r\n## Instructions for merging from UI\r\n\r\nThis PR will not be auto-merged. When pull request checks pass, complete this PR by creating a merge commit, *not* a squash or rebase commit.\r\n\r\n<img alt=\"merge button instructions\" src=\"https://i.imgur.com/GepcNJV.png\" width=\"300\" />\r\n\r\nIf this repo does not allow creating merge commits from the GitHub UI, use command line instructions.\r\n\r\n## Instructions for merging via command line\r\n\r\nRun these commands to merge this pull request from the command line.\r\n\r\n``` sh\r\ngit fetch\r\ngit checkout release/3.0\r\ngit pull --ff-only\r\ngit checkout release/3.1\r\ngit pull --ff-only\r\ngit merge --no-ff release/3.0\r\n\r\n# If there are merge conflicts, resolve them and then run git merge --continue to complete the merge\r\n# Pushing the changes to the PR branch will re-trigger PR validation.\r\ngit push https://github.com/dotnet-maestro-bot/coreclr HEAD:merge/release/3.0-to-release/3.1\r\n```\r\n\r\n<details>\r\n<summary>or if you are using SSH</summary>\r\n\r\n```\r\ngit push git@github.com:dotnet-maestro-bot/coreclr HEAD:merge/release/3.0-to-release/3.1\r\n```\r\n\r\n</details>\r\n\r\n\r\nAfter PR checks are complete push the branch\r\n```\r\ngit push\r\n```\r\n\r\n## Instructions for resolving conflicts\r\n\r\n:warning: If there are merge conflicts, you will need to resolve them manually before merging. You can do this [using GitHub][resolve-github] or using the [command line][resolve-cli].\r\n\r\n[resolve-github]: https://help.github.com/articles/resolving-a-merge-conflict-on-github/\r\n[resolve-cli]: https://help.github.com/articles/resolving-a-merge-conflict-using-the-command-line/\r\n\r\n## Instructions for updating this pull request\r\n\r\nContributors to this repo have permission update this pull request by pushing to the branch 'merge/release/3.0-to-release/3.1'. This can be done to resolve conflicts or make other changes to this pull request before it is merged.\r\n\r\n```\r\ngit checkout -b merge/release/3.0-to-release/3.1 release/3.1\r\ngit pull https://github.com/dotnet-maestro-bot/coreclr merge/release/3.0-to-release/3.1\r\n(make changes)\r\ngit commit -m \"Updated PR with my changes\"\r\ngit push https://github.com/dotnet-maestro-bot/coreclr HEAD:merge/release/3.0-to-release/3.1\r\n```\r\n\r\n<details>\r\n    <summary>or if you are using SSH</summary>\r\n\r\n```\r\ngit checkout -b merge/release/3.0-to-release/3.1 release/3.1\r\ngit pull git@github.com:dotnet-maestro-bot/coreclr merge/release/3.0-to-release/3.1\r\n(make changes)\r\ngit commit -m \"Updated PR with my changes\"\r\ngit push git@github.com:dotnet-maestro-bot/coreclr HEAD:merge/release/3.0-to-release/3.1\r\n```\r\n\r\n</details>\r\n\r\nContact .NET Core Engineering if you have questions or issues.\r\nAlso, if this PR was generated incorrectly, help us fix it. See https://github.com/dotnet/arcade/blob/master/scripts/GitHubMergeBranches.ps1.\r\n"},{"Id":"11275957100","Type":"PullRequestEvent","CreatedAt":"2020-01-14T21:57:47","Actor":"dotnet-maestro-bot","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/27995","RelatedDescription":"Opened pull request \"[automated] Merge branch 'release/3.0' => 'release/3.1'\" (#27995) at dotnet/coreclr","RelatedBody":"I detected changes in the release/3.0 branch which have not been merged yet to release/3.1. I'm a robot and am configured to help you automatically keep release/3.1 up to date, so I've opened this PR.\r\n\r\nThis PR merges commits made on release/3.0 by the following committers:\n\n* @Anipik\n* @mmitche\n* @davmason\n* @jashook\n* @brianrob\r\n\r\n## Instructions for merging from UI\r\n\r\nThis PR will not be auto-merged. When pull request checks pass, complete this PR by creating a merge commit, *not* a squash or rebase commit.\r\n\r\n<img alt=\"merge button instructions\" src=\"https://i.imgur.com/GepcNJV.png\" width=\"300\" />\r\n\r\nIf this repo does not allow creating merge commits from the GitHub UI, use command line instructions.\r\n\r\n## Instructions for merging via command line\r\n\r\nRun these commands to merge this pull request from the command line.\r\n\r\n``` sh\r\ngit fetch\r\ngit checkout release/3.0\r\ngit pull --ff-only\r\ngit checkout release/3.1\r\ngit pull --ff-only\r\ngit merge --no-ff release/3.0\r\n\r\n# If there are merge conflicts, resolve them and then run git merge --continue to complete the merge\r\n# Pushing the changes to the PR branch will re-trigger PR validation.\r\ngit push https://github.com/dotnet-maestro-bot/coreclr HEAD:merge/release/3.0-to-release/3.1\r\n```\r\n\r\n<details>\r\n<summary>or if you are using SSH</summary>\r\n\r\n```\r\ngit push git@github.com:dotnet-maestro-bot/coreclr HEAD:merge/release/3.0-to-release/3.1\r\n```\r\n\r\n</details>\r\n\r\n\r\nAfter PR checks are complete push the branch\r\n```\r\ngit push\r\n```\r\n\r\n## Instructions for resolving conflicts\r\n\r\n:warning: If there are merge conflicts, you will need to resolve them manually before merging. You can do this [using GitHub][resolve-github] or using the [command line][resolve-cli].\r\n\r\n[resolve-github]: https://help.github.com/articles/resolving-a-merge-conflict-on-github/\r\n[resolve-cli]: https://help.github.com/articles/resolving-a-merge-conflict-using-the-command-line/\r\n\r\n## Instructions for updating this pull request\r\n\r\nContributors to this repo have permission update this pull request by pushing to the branch 'merge/release/3.0-to-release/3.1'. This can be done to resolve conflicts or make other changes to this pull request before it is merged.\r\n\r\n```\r\ngit checkout -b merge/release/3.0-to-release/3.1 release/3.1\r\ngit pull https://github.com/dotnet-maestro-bot/coreclr merge/release/3.0-to-release/3.1\r\n(make changes)\r\ngit commit -m \"Updated PR with my changes\"\r\ngit push https://github.com/dotnet-maestro-bot/coreclr HEAD:merge/release/3.0-to-release/3.1\r\n```\r\n\r\n<details>\r\n    <summary>or if you are using SSH</summary>\r\n\r\n```\r\ngit checkout -b merge/release/3.0-to-release/3.1 release/3.1\r\ngit pull git@github.com:dotnet-maestro-bot/coreclr merge/release/3.0-to-release/3.1\r\n(make changes)\r\ngit commit -m \"Updated PR with my changes\"\r\ngit push git@github.com:dotnet-maestro-bot/coreclr HEAD:merge/release/3.0-to-release/3.1\r\n```\r\n\r\n</details>\r\n\r\nContact .NET Core Engineering if you have questions or issues.\r\nAlso, if this PR was generated incorrectly, help us fix it. See https://github.com/dotnet/arcade/blob/master/scripts/GitHubMergeBranches.ps1.\r\n"},{"Id":"11275930615","Type":"PullRequestEvent","CreatedAt":"2020-01-14T21:54:03","Actor":"Anipik","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/27993","RelatedDescription":"Merged pull request \"update branding to 3.0.3\" (#27993) at dotnet/coreclr","RelatedBody":""}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"11277621312","Type":"PullRequestEvent","CreatedAt":"2020-01-15T03:31:19","Actor":"dotnet-maestro-bot","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/13176","RelatedDescription":"Opened pull request \"[automated] Merge branch 'release/3.1.1xx' => 'release/3.1.2xx'\" (#13176) at dotnet/cli","RelatedBody":"I detected changes in the release/3.1.1xx branch which have not been merged yet to release/3.1.2xx. I'm a robot and am configured to help you automatically keep release/3.1.2xx up to date, so I've opened this PR.\r\n\r\nThis PR merges commits made on release/3.1.1xx by the following committers:\n\n* dsplaisted\n* dotnet-bot\r\n\r\n## Instructions for merging from UI\r\n\r\nThis PR will not be auto-merged. When pull request checks pass, complete this PR by creating a merge commit, *not* a squash or rebase commit.\r\n\r\n<img alt=\"merge button instructions\" src=\"https://i.imgur.com/GepcNJV.png\" width=\"300\" />\r\n\r\nIf this repo does not allow creating merge commits from the GitHub UI, use command line instructions.\r\n\r\n## Instructions for merging via command line\r\n\r\nRun these commands to merge this pull request from the command line.\r\n\r\n``` sh\r\ngit fetch\r\ngit checkout release/3.1.1xx\r\ngit pull --ff-only\r\ngit checkout release/3.1.2xx\r\ngit pull --ff-only\r\ngit merge --no-ff release/3.1.1xx\r\n\r\n# If there are merge conflicts, resolve them and then run git merge --continue to complete the merge\r\n# Pushing the changes to the PR branch will re-trigger PR validation.\r\ngit push https://github.com/dotnet-maestro-bot/cli HEAD:merge/release/3.1.1xx-to-release/3.1.2xx\r\n```\r\n\r\n<details>\r\n<summary>or if you are using SSH</summary>\r\n\r\n```\r\ngit push git@github.com:dotnet-maestro-bot/cli HEAD:merge/release/3.1.1xx-to-release/3.1.2xx\r\n```\r\n\r\n</details>\r\n\r\n\r\nAfter PR checks are complete push the branch\r\n```\r\ngit push\r\n```\r\n\r\n## Instructions for resolving conflicts\r\n\r\n:warning: If there are merge conflicts, you will need to resolve them manually before merging. You can do this [using GitHub][resolve-github] or using the [command line][resolve-cli].\r\n\r\n[resolve-github]: https://help.github.com/articles/resolving-a-merge-conflict-on-github/\r\n[resolve-cli]: https://help.github.com/articles/resolving-a-merge-conflict-using-the-command-line/\r\n\r\n## Instructions for updating this pull request\r\n\r\nContributors to this repo have permission update this pull request by pushing to the branch 'merge/release/3.1.1xx-to-release/3.1.2xx'. This can be done to resolve conflicts or make other changes to this pull request before it is merged.\r\n\r\n```\r\ngit checkout -b merge/release/3.1.1xx-to-release/3.1.2xx release/3.1.2xx\r\ngit pull https://github.com/dotnet-maestro-bot/cli merge/release/3.1.1xx-to-release/3.1.2xx\r\n(make changes)\r\ngit commit -m \"Updated PR with my changes\"\r\ngit push https://github.com/dotnet-maestro-bot/cli HEAD:merge/release/3.1.1xx-to-release/3.1.2xx\r\n```\r\n\r\n<details>\r\n    <summary>or if you are using SSH</summary>\r\n\r\n```\r\ngit checkout -b merge/release/3.1.1xx-to-release/3.1.2xx release/3.1.2xx\r\ngit pull git@github.com:dotnet-maestro-bot/cli merge/release/3.1.1xx-to-release/3.1.2xx\r\n(make changes)\r\ngit commit -m \"Updated PR with my changes\"\r\ngit push git@github.com:dotnet-maestro-bot/cli HEAD:merge/release/3.1.1xx-to-release/3.1.2xx\r\n```\r\n\r\n</details>\r\n\r\nContact .NET Core Engineering if you have questions or issues.\r\nAlso, if this PR was generated incorrectly, help us fix it. See https://github.com/dotnet/arcade/blob/master/scripts/GitHubMergeBranches.ps1.\r\n"},{"Id":"11277611590","Type":"PullRequestEvent","CreatedAt":"2020-01-15T03:29:08","Actor":"dsplaisted","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/13175","RelatedDescription":"Merged pull request \"Merge internal 3.1.1xx and bump branding to 3.1.102\" (#13175) at dotnet/cli","RelatedBody":"There were no changes in the public branch here, so the first merge was a fast-forward."},{"Id":"11277249334","Type":"PullRequestEvent","CreatedAt":"2020-01-15T02:06:29","Actor":"dsplaisted","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/13175","RelatedDescription":"Opened pull request \"Merge internal 3.1.1xx and bump branding to 3.1.102\" (#13175) at dotnet/cli","RelatedBody":"There were no changes in the public branch here, so the first merge was a fast-forward."},{"Id":"11277081924","Type":"PullRequestEvent","CreatedAt":"2020-01-15T01:28:28","Actor":"nguerrera","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/13174","RelatedDescription":"Merged pull request \"Merge internal 3.0.1xx and bump branding to 3.1.103\" (#13174) at dotnet/cli","RelatedBody":""},{"Id":"11276330694","Type":"PullRequestEvent","CreatedAt":"2020-01-14T22:55:45","Actor":"msftbot[bot]","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/13172","RelatedDescription":"Merged pull request \"Update aspnet, aspnet, coresetup to servicing-31150, servicing-31150, preview1-26216-03, respectively (release/2.1.8xx)\" (#13172) at dotnet/cli","RelatedBody":"/cc @dotnet/dotnet-cli"},{"Id":"11276286347","Type":"PullRequestEvent","CreatedAt":"2020-01-14T22:48:21","Actor":"msftbot[bot]","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/13173","RelatedDescription":"Merged pull request \"Update aspnet, coresetup to servicing-31150, preview1-26216-03, respectively (release/2.1.5xx)\" (#13173) at dotnet/cli","RelatedBody":"/cc @dotnet/dotnet-cli"},{"Id":"11276239988","Type":"PullRequestEvent","CreatedAt":"2020-01-14T22:40:46","Actor":"msftbot[bot]","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/13171","RelatedDescription":"Merged pull request \"Update aspnet, coresetup to servicing-31150, preview1-26216-03, respectively (release/2.1.6xx)\" (#13171) at dotnet/cli","RelatedBody":"/cc @dotnet/dotnet-cli"},{"Id":"11275901135","Type":"PullRequestEvent","CreatedAt":"2020-01-14T21:49:53","Actor":"nguerrera","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/13174","RelatedDescription":"Opened pull request \"Merge internal 3.0.1xx and bump branding to 3.1.103\" (#13174) at dotnet/cli","RelatedBody":""},{"Id":"11275115810","Type":"PullRequestEvent","CreatedAt":"2020-01-14T20:02:33","Actor":"dotnet-maestro-bot","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/13173","RelatedDescription":"Opened pull request \"Update aspnet, coresetup to servicing-31150, preview1-26216-03, respectively (release/2.1.5xx)\" (#13173) at dotnet/cli","RelatedBody":"/cc @dotnet/dotnet-cli"},{"Id":"11275115105","Type":"PullRequestEvent","CreatedAt":"2020-01-14T20:02:27","Actor":"dotnet-maestro-bot","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/13172","RelatedDescription":"Opened pull request \"Update aspnet, aspnet, coresetup to servicing-31150, servicing-31150, preview1-26216-03, respectively (release/2.1.8xx)\" (#13172) at dotnet/cli","RelatedBody":"/cc @dotnet/dotnet-cli"},{"Id":"11275106116","Type":"PullRequestEvent","CreatedAt":"2020-01-14T20:01:18","Actor":"dotnet-maestro-bot","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/13171","RelatedDescription":"Opened pull request \"Update aspnet, coresetup to servicing-31150, preview1-26216-03, respectively (release/2.1.6xx)\" (#13171) at dotnet/cli","RelatedBody":"/cc @dotnet/dotnet-cli"}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"11276906853","Type":"IssuesEvent","CreatedAt":"2020-01-15T00:50:36","Actor":"pushkin-","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/1681","RelatedDescription":"Closed issue \"Confused about EOL for .NET Standard versions\" (#1681) at dotnet/standard","RelatedBody":"I am having trouble understanding EOL support for .NET Standard versions. I could only find information about .NET Core [here](https://dotnet.microsoft.com/platform/support/policy/dotnet-core).\r\n\r\nI am planning on using .NET Core 3.1. From what I've found out, I can target .NET Standard 2.1 and anything below it.\r\n\r\nIdeally, I would like my .NET Framework code to also reference the .NET Standard code, which means that I have to use .NET Standard 2.0. However, my concern is that .NET Standard 2.0's support will end soonish, at least compared to 2.1.\r\n\r\nIs that correct? What is EOL for .NET Standard 2.0?\r\n\r\nI did also read that Standard versions are fixed/immutable so new APIs get added to new Standard versions (and so maintenance perhaps doesn't make sense for Standard; new versions just get created). Maybe that partially answers my question. "},{"Id":"11276545529","Type":"IssuesEvent","CreatedAt":"2020-01-14T23:34:41","Actor":"pushkin-","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/1681","RelatedDescription":"Opened issue \"Confused about EOL for .NET Standard versions\" (#1681) at dotnet/standard","RelatedBody":"I am having trouble understanding EOL support for .NET Standard versions. I could only find information about .NET Core [here](https://dotnet.microsoft.com/platform/support/policy/dotnet-core).\r\n\r\nI am planning on using .NET Core 3.1. From what I've found out, I can target .NET Standard 2.1 and anything below it.\r\n\r\nIdeally, I would like my .NET Framework code to also reference the .NET Standard code, which means that I have to use .NET Standard 2.0. However, my concern is that .NET Standard 2.0's support will end soonish, at least compared to 2.1.\r\n\r\nIs that correct? What is EOL for .NET Standard 2.0?\r\n\r\nI did also read that Standard versions are fixed/immutable so new APIs get added to new Standard versions (and so maintenance perhaps doesn't make sense for Standard; new versions just get created). Maybe that partially answers my question. "},{"Id":"11266273740","Type":"IssuesEvent","CreatedAt":"2020-01-13T22:25:57","Actor":"replaysMike","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/1679","RelatedDescription":"Closed issue \"UTF8 Encoding isn't consistent with .Net Framework\" (#1679) at dotnet/standard","RelatedBody":"I found a subtle difference that was revealed in a bunch of hashing code I had written a while back for .Net Framework. I wrote a multi-platform test that shows UTF8Encoding is treated slightly different in .Net Standard and I don't really have a good way to solve it yet.\r\n\r\nConsider the following - I encoded a string in hex to guarantee the bytes are the same for the test:\r\n(hopefully github doesn't mangle the expected string, it looks correct after previewing)\r\n\r\n```csharp\r\n[Test]\r\npublic void ShouldEncodeUTF8()\r\n{\r\n    var netFrameworkExpected = \"�\\u0004[\\u0004�\\u0001�\\v,�\\u001cn]�$«�� )�:�YH̗I5�V���Nl7α��i�g_�ZQW%\\u001d�Dy\\u001eЕ\\u0013w�v+\\u0012*��\\u000f*��\\u0019r��}���8��w��&�\\r���\\f����?���&�t�M��[�`kzhz9\\u0015�\\u0012I�\\u001ey_`�\\u0011\\tF��A�Af~��q��%P�����\\u0003�x�(g���e\\u001fM�32\\u0014��\";\r\n    var hex = \"BC045B0488019F0B2CE61C6E5DFC24C2ABE09BDA2029CC3AE9AD5948CC9749359756B1A2D94E6C37CEB189D269AA675FF75A5157251D8544791ED09513779B762B122A89E10F2A98E91972D7CA7DF9F98038DFDB779FED269A0DE3F8FA0C828993B23F85B5A826B474E84DFECD5B87606B7A687A3915C31249CE1E795F609A11094686DF41E99041667E9DD271A0E22550FDD0C3CEF0039678F328679B8590651F4DBE3332148DBA\";\r\n    var bytes = hex.HexToBytes();\r\n    var utf8Encoded = Encoding.UTF8.GetString(bytes);\r\n    Assert.AreEqual(netFrameworkExpected, utf8Encoded);\r\n}\r\n\r\npublic static byte[] HexToBytes(this string hexString)\r\n{\r\n    return Enumerable.Range(0, hexString.Length)\r\n        .Where(x => x % 2 == 0)\r\n        .Select(x => Convert.ToByte(hexString.Substring(x, 2), 16))\r\n        .ToArray();\r\n}\r\n```\r\n\r\nThis test will pass on .Net Framework 4.8, but will fail on .Net Standard 2.0"}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"11276949499","Type":"IssuesEvent","CreatedAt":"2020-01-15T00:59:58","Actor":"JeremyKuhne","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/11658","RelatedDescription":"Closed issue \"EncryptFile & DecryptFile not available on all Windows versions\" (#11658) at dotnet/corefx","RelatedBody":"These APIs (exposed through File and FileInfo) are entries into EFS functionality. WinRT doesn't expose these particular APIs directly, but has a `FileProtectionManager` class that provides access to EFS (Encrypt is the only currently supported entrypoint).\n\nOneCore also does not expose EncryptFile\\DecryptFile.\n\nNeed to follow through on the plausibility of using FileProtectionManager and potentially other entry points into EFS to expose this API in CoreFx on Windows.\n"},{"Id":"11276933139","Type":"IssuesEvent","CreatedAt":"2020-01-15T00:56:14","Actor":"JeremyKuhne","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/10935","RelatedDescription":"Closed issue \"Add IsolatedStorageFile factory methods with Evidence dependencies\" (#10935) at dotnet/corefx","RelatedBody":"Need to implement the various `GetStore()` methods have direct or indirect dependencies on `System.Security.Policy.Evidence`.\n\nThis includes:\n\n`GetStore(IsolatedStorageScope, Type, Type)`\n`GetStore(IsolatedStorageScope, Object, Object)`\n`GetStore(IsolatedStorageScope, Evidence, Type, Evidence, Type)`\n`GetStore(IsolatedStorageScope, Type)`\n`GetStore(IsolatedStorageScope, Object)`\n\nThese may not be possible without `System.Security.Policy.Evidence`.\n\nSee #10934 for the other factory methods.\n"},{"Id":"11276859275","Type":"PullRequestEvent","CreatedAt":"2020-01-15T00:39:49","Actor":"Anipik","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/42489","RelatedDescription":"Merged pull request \"[release/2.1] Remove throw in exception handling of dispose\" (#42489) at dotnet/corefx","RelatedBody":"Back port a fix from Microsoft.Data.Sqlclient issue [#20](https://github.com/dotnet/SqlClient/issues/20). Recent issues: https://github.com/dotnet/corefx/issues/42586\r\n\r\nThe same PR #42457 is already merged on master branch.\r\n\r\n**2.1 Servicing:**\r\n\r\n### Summary\r\nUser gets `System.IO.IOException: Unable to write data to the transport connection: Broken pipe.` \r\nwith or without MARS enabled\r\n\r\n### Customer Impact\r\n\r\nUsers using older verions of EFCore (< 3.0) cannot use Microsoft.Data.SqlClient. They need this change in order to not get the `Unable to write data to the transport connection: Broken pipe` error intermittently.\r\n\r\nThis has recently been escalated by the field, working with  an ISV customer. Have not yet verified the version they are deployed on.\r\n\r\nAlso there's several recent customer reports - about 8 distinct reports in the linked issue eg\r\nhttps://github.com/dotnet/SqlClient/issues/20#issuecomment-547892706\r\nhttps://github.com/dotnet/SqlClient/issues/20#issuecomment-512055330\r\nMost of these customers seem to be on 2.2, not 2.1.\r\n\r\n### Regression?\r\n\r\nNo, this exist in 2.0 as well.\r\n\r\n### Risk\r\n\r\nLow: The code change is already in Microsoft.Data.SqlClient, and users have reported the fix works for them."},{"Id":"11276851256","Type":"PullRequestEvent","CreatedAt":"2020-01-15T00:37:59","Actor":"Anipik","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/42821","RelatedDescription":"Merged pull request \"update branding of 2.1.15\" (#42821) at dotnet/corefx","RelatedBody":""},{"Id":"11276837462","Type":"PullRequestEvent","CreatedAt":"2020-01-15T00:34:55","Actor":"Anipik","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/42822","RelatedDescription":"Merged pull request \"Update CoreClr, CoreFx, CoreSetup to servicing-28325-011, servicing-28327-021, stable, respectively (release/2.1)\" (#42822) at dotnet/corefx","RelatedBody":"/cc @dotnet/maestro-reviewers-core"},{"Id":"11276822819","Type":"PullRequestEvent","CreatedAt":"2020-01-15T00:31:39","Actor":"Anipik","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/42824","RelatedDescription":"Opened pull request \"updating assembly version and package version for system.data.sqlclient\" (#42824) at dotnet/corefx","RelatedBody":"There is no need to update package index here because we update that for 2.x branches after we have published the package. Because we fix that functionality in 3.1\r\n"},{"Id":"11276792118","Type":"IssuesEvent","CreatedAt":"2020-01-15T00:24:56","Actor":"JeremyKuhne","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/7434","RelatedDescription":"Closed issue \"Filestream with  FileOptions.Encrypted | FileOptions.WriteThrough fails to write on Nano\" (#7434) at dotnet/corefx","RelatedBody":"```\n19:39:16    System.IO.Tests.FileStream_ctor_str_fm_fa_fs_buffer_fo.ValidFileOptions(option: Encrypted) [FAIL]\n19:39:16       System.UnauthorizedAccessException : Access to the path 'C:\\Windows\\TEMP\\FileStream_ctor_str_fm_fa_fs_buffer_fo_3qffgkdi.mfj\\ValidFileOptions_50' is denied.\n19:39:16       Stack Trace:\n19:39:17             at System.IO.Win32FileStream..ctor(String path, FileMode mode, FileAccess access, FileShare share, Int32 bufferSize, FileOptions options, FileStream parent)\n19:39:17             at System.IO.Win32FileSystem.Open(String fullPath, FileMode mode, FileAccess access, FileShare share, Int32 bufferSize, FileOptions options, FileStream parent)\n19:39:17             at System.IO.FileStream.Init(String path, FileMode mode, FileAccess access, FileShare share, Int32 bufferSize, FileOptions options)\n19:39:17             at System.IO.FileStream..ctor(String path, FileMode mode, FileAccess access, FileShare share, Int32 bufferSize, FileOptions options)\n19:39:17             at System.IO.Tests.FileStream_ctor_str_fm_fa_fs_buffer_fo.CreateFileStream(String path, FileMode mode, FileAccess access, FileShare share, Int32 bufferSize, FileOptions options)\n19:39:17             at System.IO.Tests.FileStream_ctor_str_fm_fa_fs_buffer_fo.ValidFileOptions(FileOptions option)\n19:39:37    System.IO.Tests.FileStream_ctor_str_fm_fa_fs_buffer_fo.ValidFileOptions(option: Encrypted, Asynchronous) [FAIL]\n19:39:37       System.UnauthorizedAccessException : Access to the path 'C:\\Windows\\TEMP\\FileStream_ctor_str_fm_fa_fs_buffer_fo_ts5rrahw.xkr\\ValidFileOptions_50' is denied.\n19:39:37       Stack Trace:\n19:39:37             at System.IO.Win32FileStream..ctor(String path, FileMode mode, FileAccess access, FileShare share, Int32 bufferSize, FileOptions options, FileStream parent)\n19:39:37             at System.IO.Win32FileSystem.Open(String fullPath, FileMode mode, FileAccess access, FileShare share, Int32 bufferSize, FileOptions options, FileStream parent)\n19:39:37             at System.IO.FileStream.Init(String path, FileMode mode, FileAccess access, FileShare share, Int32 bufferSize, FileOptions options)\n19:39:37             at System.IO.FileStream..ctor(String path, FileMode mode, FileAccess access, FileShare share, Int32 bufferSize, FileOptions options)\n19:39:37             at System.IO.Tests.FileStream_ctor_str_fm_fa_fs_buffer_fo.CreateFileStream(String path, FileMode mode, FileAccess access, FileShare share, Int32 bufferSize, FileOptions options)\n19:39:37             at System.IO.Tests.FileStream_ctor_str_fm_fa_fs_buffer_fo.ValidFileOptions(FileOptions option)\n19:39:57    System.IO.Tests.FileStream_ctor_str_fm_fa_fs_buffer_fo.ValidFileOptions(option: Encrypted, DeleteOnClose, SequentialScan, RandomAccess, Asynchronous, WriteThrough) [FAIL]\n19:39:57       System.UnauthorizedAccessException : Access to the path 'C:\\Windows\\TEMP\\FileStream_ctor_str_fm_fa_fs_buffer_fo_1doetiwe.nbk\\ValidFileOptions_50' is denied.\n19:39:57       Stack Trace:\n19:39:57             at System.IO.Win32FileStream..ctor(String path, FileMode mode, FileAccess access, FileShare share, Int32 bufferSize, FileOptions options, FileStream parent)\n19:39:57             at System.IO.Win32FileSystem.Open(String fullPath, FileMode mode, FileAccess access, FileShare share, Int32 bufferSize, FileOptions options, FileStream parent)\n19:39:57             at System.IO.FileStream.Init(String path, FileMode mode, FileAccess access, FileShare share, Int32 bufferSize, FileOptions options)\n19:39:57             at System.IO.FileStream..ctor(String path, FileMode mode, FileAccess access, FileShare share, Int32 bufferSize, FileOptions options)\n19:39:57             at System.IO.Tests.FileStream_ctor_str_fm_fa_fs_buffer_fo.CreateFileStream(String path, FileMode mode, FileAccess access, FileShare share, Int32 bufferSize, FileOptions options)\n19:39:57             at System.IO.Tests.FileStream_ctor_str_fm_fa_fs_buffer_fo.ValidFileOptions(FileOptions option)\n19:39:57 Finished:    System.IO.FileSystem.Tests\n```\n"}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"11277934334","Type":"IssuesEvent","CreatedAt":"2020-01-15T04:51:08","Actor":"davkean","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/40976","RelatedDescription":"Opened issue \"\"Show items from unimported namespaces\" and \"resolve usings\" inserts imports in wrong location when \"inside_namespace\"\" (#40976) at dotnet/roslyn","RelatedBody":"**Version Used**: \r\nVersion 16.5.0 Preview 3.0 [29714.123.master]\r\n\r\n**Steps to Reproduce**:\r\n\r\n```\r\n[*.cs]\r\ncsharp_using_directive_placement = inside_namespace:error\r\n``` \r\n\r\n``` C#\r\nnamespace Microsoft.VisualStudio.ProjectSystem.VS.Implementation.Package\r\n{\r\n    internal class SolutionExplorerService\r\n    {\r\n        private Lazy< // <!-- Resolve using\r\n\r\n        public SolutionExplorerService()\r\n        {\r\n        }\r\n    }\r\n}\r\n\r\n```\r\n**Expected Behavior**:\r\n``` C#\r\nnamespace Microsoft.VisualStudio.ProjectSystem.VS.Implementation.Package\r\n{\r\n    using System;\r\n\r\n    internal class SolutionExplorerService\r\n    {\r\n        private Lazy<\r\n\r\n        public SolutionExplorerService()\r\n        {\r\n        }\r\n    }\r\n}\r\n\r\n```\r\n\r\n**Actual Behavior**:\r\n```\r\nusing System;\r\n\r\nnamespace Microsoft.VisualStudio.ProjectSystem.VS.Implementation.Package\r\n{\r\n    internal class SolutionExplorerService\r\n    {\r\n        private Lazy<\r\n\r\n        public SolutionExplorerService()\r\n        {\r\n        }\r\n    }\r\n}\r\n\r\n```"},{"Id":"11277705511","Type":"PullRequestEvent","CreatedAt":"2020-01-15T03:51:29","Actor":"mavasani","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/40934","RelatedDescription":"Merged pull request \"Deprecate Workspace.set_Options\" (#40934) at dotnet/roslyn","RelatedBody":"Follow-up to https://github.com/dotnet/roslyn/pull/40289\r\n\r\nWorkspace options should now be set with `Workspace.TryApplyChanges(Workspace.CurrentSolution.WithOptions(newOptions))`"},{"Id":"11277553312","Type":"PullRequestEvent","CreatedAt":"2020-01-15T03:16:01","Actor":"sharwell","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/40948","RelatedDescription":"Merged pull request \"Extract out simplification changes\" (#40948) at dotnet/roslyn","RelatedBody":"Pulling out independent parts of https://github.com/dotnet/roslyn/pull/40746 to make that PR simpler.\r\n\r\nThis PR should be reviewed with whitespace off.\r\n\r\nSpecific changes:\r\n\r\n1. Unify patterns in extension methods.\r\n2. Convert private extensions called from 1 location into normal static methods.\r\n3. Make public extensions only called from one place private.\r\n4. Compute symbol being reduced only once and pass along to all simplification helpers.\r\n5. Remove codepaths dealing with 'candidate' symbols.  Later code bails out with ambiguities, so no need to deal with them earlier.\r\n"},{"Id":"11277260335","Type":"IssuesEvent","CreatedAt":"2020-01-15T02:09:06","Actor":"jcouv","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/40975","RelatedDescription":"Opened issue \"Should not warn on null default value on [AllowNull] parameter\" (#40975) at dotnet/roslyn","RelatedBody":"Follow-up on https://github.com/dotnet/roslyn/pull/40789\r\n\r\n```\r\n        [Fact]\r\n        public void AllowNull_Parameter_NullDefaultValue()\r\n        {\r\n            var source =\r\n@\"using System.Diagnostics.CodeAnalysis;\r\npublic class C\r\n{\r\n    void M([AllowNull] string p = null) { }\r\n}\r\n\";\r\n\r\n            var comp = CreateNullableCompilation(new[] { AllowNullAttributeDefinition, source });\r\n            // Note: fixing this was tricky as it involved a cycle (FlowAnnotations, attribute decoding, default value)\r\n            comp.VerifyDiagnostics(\r\n                // (4,35): warning CS8625: Cannot convert null literal to non-nullable reference type.\r\n                //     void M([AllowNull] string p = null) { }\r\n                Diagnostic(ErrorCode.WRN_NullAsNonNullable, \"null\").WithLocation(4, 35)\r\n                );\r\n        }\r\n```"},{"Id":"11277222975","Type":"PullRequestEvent","CreatedAt":"2020-01-15T02:00:34","Actor":"sharwell","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/39187","RelatedDescription":"Merged pull request \"Annotate implementations of IArrayTypeSymbol\" (#39187) at dotnet/roslyn","RelatedBody":""}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"11272085042","Type":"PullRequestEvent","CreatedAt":"2020-01-14T14:16:43","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7954","RelatedDescription":"Merged pull request \"Fix sigantures in calli\" (#7954) at dotnet/corert","RelatedBody":"* The called methods accept a byref, not a pointer.\r\n* The called methods don't return anything.\r\n\r\nThis is also a slight perf improvement (no longer need to allocate the lambda for `PinObjectAndCall`).\r\n\r\nFixes #7951."},{"Id":"11272085000","Type":"IssuesEvent","CreatedAt":"2020-01-14T14:16:42","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/issues/7951","RelatedDescription":"Closed issue \"Wasm: CalliIntrinsics.Call<T> is generating invalid calli\" (#7951) at dotnet/corert","RelatedBody":"https://github.com/dotnet/corert/blob/42f1bc077327d6e3647861bec00cfe0458187071/src/System.Private.CoreLib/src/System/Runtime/InteropServices/Marshal.CoreRT.cs#L200-L203\r\n\r\nThis is currently a problem for the wasm backend.  With the input\r\n```\r\n    // something to exercise CalliIntrinsics.Call<T>\r\n    struct NonBlittableToMarshal\r\n    {\r\n        internal int a;\r\n        internal object b;\r\n    }\r\n\r\n    static void TestMarshalStructToPtr()\r\n    {\r\n        StartTest(\"Test marshal struct to ptr\");\r\n        NonBlittableToMarshal s = new NonBlittableToMarshal();\r\n        s.a = 1;\r\n        s.b = null;\r\n        var pParms = Marshal.AllocHGlobal(Marshal.SizeOf(typeof(NonBlittableToMarshal)));\r\n        Marshal.StructureToPtr(s, pParms, false);\r\n        EndTest(true);\r\n    }\r\n```\r\nThis fails at runtime with an invalid signature message, with ASSERTIONS=2, it produces:\r\n\r\n```\r\nInvalid function pointer 4692 called with signature 'iiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this). This pointer might make sense in another type signature: as sig \"vi\" pointing to function _Internal_CompilerGenerated__Module____ManagedToNative_HelloWasm_Program_NonBlittableToMarshal, \r\n```\r\nThis is saying that there is a method with a void (int) signature at the right function index, but it does not match the called convention which is int (int,int,int).  There is a method produced with a `vi` signature, although it looks incomplete and throws an exception\r\n```\r\ndefine void @\"Internal_CompilerGenerated__Module___<ManagedToNative>HelloWasm_Program_NonBlittableToMarshal\"(i8*) {\r\nProlog:\r\n  br label %Block0\r\n\r\nBlock0:                                           ; preds = %Prolog\r\n  %LoadAddressOfSymbolNode = load i32*, i32** @__Str_Struct__NonBlittableToMarshal__6058104189200C7DE718BE6B8F3608243B48FAFC59CD4893FB0EFFADF26C30EA___SYMBOL\r\n  %1 = getelementptr i8, i8* %0, i32 8\r\n  %Temp0_ = getelementptr i8, i8* %0, i32 8\r\n  %LoadeeType = load i32, i32* bitcast (i32** @__EEType_S_P_CoreLib_System_Exception___SYMBOL to i32*)\r\n  call void @S_P_CoreLib_System_Runtime_RuntimeExports__RhNewObject(i8* %1, i8* %Temp0_, i32 %LoadeeType)\r\n  %2 = getelementptr i8, i8* %0, i32 12\r\n  %Temp0_1 = getelementptr i8, i8* %0, i32 8\r\n  %CastPtrTemp0_ = bitcast i8* %Temp0_1 to i8**\r\n  %LdTemp0_ = load i8*, i8** %CastPtrTemp0_\r\n  %3 = getelementptr i8, i8* %2, i32 0\r\n  %CastPtrTypedStore = bitcast i8* %3 to i8**\r\n  store i8* %LdTemp0_, i8** %CastPtrTypedStore\r\n  %CastPtr = bitcast i32* %LoadAddressOfSymbolNode to i8*\r\n  %4 = getelementptr i8, i8* %2, i32 4\r\n  %CastPtrTypedStore2 = bitcast i8* %4 to i8**\r\n  store i8* %CastPtr, i8** %CastPtrTypedStore2\r\n  call void @S_P_CoreLib_System_Exception___ctor_0(i8* %2)\r\n  call void @llvm.trap()\r\n  unreachable\r\n}\r\n```\r\nAnd the `iiii` signature method would match the calli inside \r\n```\r\n                        CalliIntrinsics.Call<int>(\r\n                            marshalStub,\r\n                            ((void*)((IntPtr*)unboxedStructPtr + offset)),  // safe (need to adjust offset as it could be class)\r\n                            (void*)ptr                                      // unsafe (no need to adjust as it is always struct)\r\n                        );\r\n``` \r\nWith an the extra `i` for the shadow stack.  I guess the question starts with how does the marshal code get generated because it shouldn't terminate in a throw I imagine?"},{"Id":"11269824151","Type":"IssuesEvent","CreatedAt":"2020-01-14T09:42:03","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/issues/7953","RelatedDescription":"Closed issue \"How to fix Error setting value to Field on XXXXX After CoreRT?\" (#7953) at dotnet/corert","RelatedBody":"this happens with following code, it works fine before CoreRT\r\n```\r\n\tinternal class C1\r\n    {\r\n\t    public string p;\r\n    }\r\n\r\n    var res = JsonConvert.DeserializeObject<C1>(jsonString);\r\n```\r\n\r\njsonString = \"{\\\\\"p\\\\\":\\\\\"xxxxx\\\\\"}\"\r\n\r\nis there a way I can solve this issue? \r\n\r\nor it's not possible, maybe because CoreRT can't do reflection which is required by `DeserializeObject`?\r\n\r\n\r\n\r\n\r\n"},{"Id":"11269663047","Type":"PullRequestEvent","CreatedAt":"2020-01-14T09:23:08","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7954","RelatedDescription":"Opened pull request \"Fix sigantures in calli\" (#7954) at dotnet/corert","RelatedBody":"* The called methods accept a byref, not a pointer.\r\n* The called methods don't return anything.\r\n\r\nThis is also a slight perf improvement (no longer need to allocate the lambda for `PinObjectAndCall`).\r\n\r\nFixes #7951."},{"Id":"11259731096","Type":"IssuesEvent","CreatedAt":"2020-01-13T09:03:19","Actor":"akinohana","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/issues/7953","RelatedDescription":"Opened issue \"How to fix Error setting value to Field on XXXXX After CoreRT?\" (#7953) at dotnet/corert","RelatedBody":"this happens with following code, it works fine before CoreRT\r\n\r\njsonString = \"{\\\"p\\\":\\\"xxxxx\\\"}\"\r\n\r\nis there a way I can solve this issue? \r\n\r\nor it's not possible, maybe because CoreRT can't do reflection which is required by `DeserializeObject`?\r\n\r\n\r\n\r\n`\r\n\tinternal class C1\r\n    {\r\n\t    public string p;\r\n    }\r\n    var res = JsonConvert.DeserializeObject<C1>(jsonString);\r\n`\r\n"},{"Id":"11258562358","Type":"IssuesEvent","CreatedAt":"2020-01-13T05:15:34","Actor":"DenMpei","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/issues/7952","RelatedDescription":"Opened issue \"Error when publish\" (#7952) at dotnet/corert","RelatedBody":"Good morning! Sometimes, such an error occurs when publishing (dotnet publish -c Release -r win-x64). They in no way treated, but disappears by itself after a while. Prompt, what to see and how to fix?\r\nMicrosoft.DotNet.ILCompiler package version: 1.0.0-alpha-28327-01, but I tried on 1.0.0-alpha-28510-01\r\n\r\nGenerating compatible native code. To optimize for size or speed, visit https://aka.ms/OptimizeCoreRT\r\n16:06:21 EXEC : warning : RD.XML processing will change before release (https://github.com/dotnet/corert/issues/5001) [D:\\Jenkins\\workspace\\Project.csproj]\r\n16:06:21 EXEC : error : External component has thrown an exception. [D:\\Jenkins\\workspace\\Project.csproj]\r\n16:06:21   System.Runtime.InteropServices.SEHException (0x80004005): External component has thrown an exception.\r\n16:06:21      at ILCompiler.DependencyAnalysis.ObjectWriter.FinishObjWriter(IntPtr objWriter)\r\n16:06:21      at ILCompiler.DependencyAnalysis.ObjectWriter.EmitObject(String objectFilePath, IEnumerable`1 nodes, NodeFactory factory, IObjectDumper dumper)\r\n16:06:21      at ILCompiler.Compilation.ILCompiler.ICompilation.Compile(String outputFile, ObjectDumper dumper)\r\n16:06:22      at ILCompiler.Program.Run(String[] args)\r\n16:06:22      at ILCompiler.Program.Main(String[] args)\r\n16:06:22 C:\\Users\\rpt-virtual\\.nuget\\packages\\microsoft.dotnet.ilcompiler\\1.0.0-alpha-28327-01\\build\\Microsoft.NETCore.Native.targets(226,5): error MSB3073: The command \"\"C:\\Users\\user\\.nuget\\packages\\runtime.win-x64.microsoft.dotnet.ilcompiler\\1.0.0-alpha-28327-01\\tools\\ilc\" @\"obj\\Release\\netcoreapp2.2\\win-x64\\native\\Project.ilc.rsp\"\" exited with code 1. [D:\\Jenkins\\workspace\\Project.csproj]"},{"Id":"11257395653","Type":"IssuesEvent","CreatedAt":"2020-01-12T22:28:36","Actor":"yowl","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/issues/7951","RelatedDescription":"Opened issue \"Wasm: CalliIntrinsics.Call<T> is generating invalid calli\" (#7951) at dotnet/corert","RelatedBody":"https://github.com/dotnet/corert/blob/42f1bc077327d6e3647861bec00cfe0458187071/src/System.Private.CoreLib/src/System/Runtime/InteropServices/Marshal.CoreRT.cs#L200-L203\r\n\r\nThis is currently a problem for the wasm backend.  With the input\r\n```\r\n    // something to exercise CalliIntrinsics.Call<T>\r\n    struct NonBlittableToMarshal\r\n    {\r\n        internal int a;\r\n        internal object b;\r\n    }\r\n\r\n    static void TestMarshalStructToPtr()\r\n    {\r\n        StartTest(\"Test marshal struct to ptr\");\r\n        NonBlittableToMarshal s = new NonBlittableToMarshal();\r\n        s.a = 1;\r\n        s.b = null;\r\n        var pParms = Marshal.AllocHGlobal(Marshal.SizeOf(typeof(NonBlittableToMarshal)));\r\n        Marshal.StructureToPtr(s, pParms, false);\r\n        EndTest(true);\r\n    }\r\n```\r\nThis fails at runtime with an invalid signature message, with ASSERTIONS=2, it produces:\r\n\r\n```\r\nInvalid function pointer 4692 called with signature 'iiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this). This pointer might make sense in another type signature: as sig \"vi\" pointing to function _Internal_CompilerGenerated__Module____ManagedToNative_HelloWasm_Program_NonBlittableToMarshal, \r\n```\r\nThis is saying that there is a method with a void (int) signature at the right function index, but it does not match the called convention which is int (int,int,int).  There is a method produced with a `vi` signature, although it looks incomplete and throws an exception\r\n```\r\ndefine void @\"Internal_CompilerGenerated__Module___<ManagedToNative>HelloWasm_Program_NonBlittableToMarshal\"(i8*) {\r\nProlog:\r\n  br label %Block0\r\n\r\nBlock0:                                           ; preds = %Prolog\r\n  %LoadAddressOfSymbolNode = load i32*, i32** @__Str_Struct__NonBlittableToMarshal__6058104189200C7DE718BE6B8F3608243B48FAFC59CD4893FB0EFFADF26C30EA___SYMBOL\r\n  %1 = getelementptr i8, i8* %0, i32 8\r\n  %Temp0_ = getelementptr i8, i8* %0, i32 8\r\n  %LoadeeType = load i32, i32* bitcast (i32** @__EEType_S_P_CoreLib_System_Exception___SYMBOL to i32*)\r\n  call void @S_P_CoreLib_System_Runtime_RuntimeExports__RhNewObject(i8* %1, i8* %Temp0_, i32 %LoadeeType)\r\n  %2 = getelementptr i8, i8* %0, i32 12\r\n  %Temp0_1 = getelementptr i8, i8* %0, i32 8\r\n  %CastPtrTemp0_ = bitcast i8* %Temp0_1 to i8**\r\n  %LdTemp0_ = load i8*, i8** %CastPtrTemp0_\r\n  %3 = getelementptr i8, i8* %2, i32 0\r\n  %CastPtrTypedStore = bitcast i8* %3 to i8**\r\n  store i8* %LdTemp0_, i8** %CastPtrTypedStore\r\n  %CastPtr = bitcast i32* %LoadAddressOfSymbolNode to i8*\r\n  %4 = getelementptr i8, i8* %2, i32 4\r\n  %CastPtrTypedStore2 = bitcast i8* %4 to i8**\r\n  store i8* %CastPtr, i8** %CastPtrTypedStore2\r\n  call void @S_P_CoreLib_System_Exception___ctor_0(i8* %2)\r\n  call void @llvm.trap()\r\n  unreachable\r\n}\r\n```\r\nAnd the `iiii` signature method would match the calli inside \r\n```\r\n                        CalliIntrinsics.Call<int>(\r\n                            marshalStub,\r\n                            ((void*)((IntPtr*)unboxedStructPtr + offset)),  // safe (need to adjust offset as it could be class)\r\n                            (void*)ptr                                      // unsafe (no need to adjust as it is always struct)\r\n                        );\r\n``` \r\nWith an the extra `i` for the shadow stack.  I guess the question starts with how does the marshal code get generated because it shouldn't terminate in a throw I imagine?"},{"Id":"11253533677","Type":"PullRequestEvent","CreatedAt":"2020-01-11T16:55:53","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7948","RelatedDescription":"Merged pull request \"Use plain clang by default on Linux\" (#7948) at dotnet/corert","RelatedBody":"clang-3.9 is not available on recent Linux distros. Typically, there is clang alias setup for a good version of clang so just use that by default.\r\n\r\nFixes #5654"}],"ResultType":"GitHubEvent"},"SDK":{"Events":[{"Id":"11278010548","Type":"PullRequestEvent","CreatedAt":"2020-01-15T05:10:25","Actor":"dotnet-maestro-bot","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/4172","RelatedDescription":"Opened pull request \"[automated] Merge branch 'release/3.1.1xx' => 'release/3.1.2xx'\" (#4172) at dotnet/sdk","RelatedBody":"I detected changes in the release/3.1.1xx branch which have not been merged yet to release/3.1.2xx. I'm a robot and am configured to help you automatically keep release/3.1.2xx up to date, so I've opened this PR.\r\n\r\nThis PR merges commits made on release/3.1.1xx by the following committers:\n\n* dsplaisted\n* mmitche\n* dotnet-bot\r\n\r\n## Instructions for merging from UI\r\n\r\nThis PR will not be auto-merged. When pull request checks pass, complete this PR by creating a merge commit, *not* a squash or rebase commit.\r\n\r\n<img alt=\"merge button instructions\" src=\"https://i.imgur.com/GepcNJV.png\" width=\"300\" />\r\n\r\nIf this repo does not allow creating merge commits from the GitHub UI, use command line instructions.\r\n\r\n## Instructions for merging via command line\r\n\r\nRun these commands to merge this pull request from the command line.\r\n\r\n``` sh\r\ngit fetch\r\ngit checkout release/3.1.1xx\r\ngit pull --ff-only\r\ngit checkout release/3.1.2xx\r\ngit pull --ff-only\r\ngit merge --no-ff release/3.1.1xx\r\n\r\n# If there are merge conflicts, resolve them and then run git merge --continue to complete the merge\r\n# Pushing the changes to the PR branch will re-trigger PR validation.\r\ngit push https://github.com/dotnet-maestro-bot/sdk HEAD:merge/release/3.1.1xx-to-release/3.1.2xx\r\n```\r\n\r\n<details>\r\n<summary>or if you are using SSH</summary>\r\n\r\n```\r\ngit push git@github.com:dotnet-maestro-bot/sdk HEAD:merge/release/3.1.1xx-to-release/3.1.2xx\r\n```\r\n\r\n</details>\r\n\r\n\r\nAfter PR checks are complete push the branch\r\n```\r\ngit push\r\n```\r\n\r\n## Instructions for resolving conflicts\r\n\r\n:warning: If there are merge conflicts, you will need to resolve them manually before merging. You can do this [using GitHub][resolve-github] or using the [command line][resolve-cli].\r\n\r\n[resolve-github]: https://help.github.com/articles/resolving-a-merge-conflict-on-github/\r\n[resolve-cli]: https://help.github.com/articles/resolving-a-merge-conflict-using-the-command-line/\r\n\r\n## Instructions for updating this pull request\r\n\r\nContributors to this repo have permission update this pull request by pushing to the branch 'merge/release/3.1.1xx-to-release/3.1.2xx'. This can be done to resolve conflicts or make other changes to this pull request before it is merged.\r\n\r\n```\r\ngit checkout -b merge/release/3.1.1xx-to-release/3.1.2xx release/3.1.2xx\r\ngit pull https://github.com/dotnet-maestro-bot/sdk merge/release/3.1.1xx-to-release/3.1.2xx\r\n(make changes)\r\ngit commit -m \"Updated PR with my changes\"\r\ngit push https://github.com/dotnet-maestro-bot/sdk HEAD:merge/release/3.1.1xx-to-release/3.1.2xx\r\n```\r\n\r\n<details>\r\n    <summary>or if you are using SSH</summary>\r\n\r\n```\r\ngit checkout -b merge/release/3.1.1xx-to-release/3.1.2xx release/3.1.2xx\r\ngit pull git@github.com:dotnet-maestro-bot/sdk merge/release/3.1.1xx-to-release/3.1.2xx\r\n(make changes)\r\ngit commit -m \"Updated PR with my changes\"\r\ngit push git@github.com:dotnet-maestro-bot/sdk HEAD:merge/release/3.1.1xx-to-release/3.1.2xx\r\n```\r\n\r\n</details>\r\n\r\nContact .NET Core Engineering if you have questions or issues.\r\nAlso, if this PR was generated incorrectly, help us fix it. See https://github.com/dotnet/arcade/blob/master/scripts/GitHubMergeBranches.ps1.\r\n"},{"Id":"11278001235","Type":"PullRequestEvent","CreatedAt":"2020-01-15T05:08:06","Actor":"dsplaisted","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/4171","RelatedDescription":"Merged pull request \"Merge internal 3.1.1xx and bump branding to 3.1.102\" (#4171) at dotnet/sdk","RelatedBody":"Reviewers: There were some merge conflicts with the .yml files, might want to take a look at that."},{"Id":"11277199850","Type":"PullRequestEvent","CreatedAt":"2020-01-15T01:55:25","Actor":"dsplaisted","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/4171","RelatedDescription":"Opened pull request \"Merge internal 3.1.1xx and bump branding to 3.1.102\" (#4171) at dotnet/sdk","RelatedBody":""},{"Id":"11277183717","Type":"PullRequestEvent","CreatedAt":"2020-01-15T01:51:39","Actor":"wli3","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/4019","RelatedDescription":"Merged pull request \"disable useapphost on mac by default\" (#4019) at dotnet/sdk","RelatedBody":"Fixes https://github.com/dotnet/sdk/issues/4012\r\n\r\n**Pending 1/6 branch open**\r\n\r\nRequire approval for all the following PR\r\n3.0.1xx\r\nSDK https://github.com/dotnet/sdk/pull/4019\r\nCLI https://github.com/dotnet/cli/pull/13167 (and counter part for 3.1.1xx, 3.1.2xx. This change is to align the tests' expectation in CLI. This change is required when SDK build insert into CLI)\r\n\r\n3.1.1xx\r\nSDK https://github.com/dotnet/sdk/pull/4114\r\n\r\n3.1.2xx\r\nSDK https://github.com/dotnet/sdk/pull/4115\r\n\r\n### Description\r\n\r\nChange the default build behavior (which was just changed in .NET Core 3) to not use apphost. Essentially use 2.x behavior only on macOS.\r\n\r\n### Customer Impact\r\n\r\nWith System Integrity Protection enforced, as a result of notarization, the following golden path ASP.NET Core scenario fails:\r\n\r\n```\r\nInstall .NET Core\r\n\r\ndotnet new mvc\r\n\r\ndotnet run\r\n\r\nBlank Safari with no indication\r\n```\r\n\r\n### Regression?\r\n\r\nYes, caused by notarization. New build of 3.x after January, 2020\r\n\r\n### Risk\r\n\r\nLow. Revert to known 2.x behavior"},{"Id":"11277078814","Type":"PullRequestEvent","CreatedAt":"2020-01-15T01:27:43","Actor":"nguerrera","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/4167","RelatedDescription":"Merged pull request \"Merge internal 3.0.1xx and bump branding to 3.0.103\" (#4167) at dotnet/sdk","RelatedBody":""},{"Id":"11276881346","Type":"PullRequestEvent","CreatedAt":"2020-01-15T00:44:54","Actor":"MSLukeWest","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/pull/4155","RelatedDescription":"Closed pull request \"Updating PublishItemsOutputGroup to include the publish deps file when _UseBuildDependencyFile is false\" (#4155) at dotnet/sdk","RelatedBody":"This is the output group that gets used with VS installer projects.  Right now we're using the wrong deps file in the case where assets are marked as excluded from publish.\r\n\r\nFor some historical context you can look at the comments in PR 3141.  At that point we didn't actually do a real publish when this output group got used so PublishDepsFilePath wasn't available to us.  But now consuming this output group using an installer project does a real publish, so we can and should use the publish version of the deps file when _UseBuildDependencyFile is false."},{"Id":"11276877193","Type":"PullRequestEvent","CreatedAt":"2020-01-15T00:43:56","Actor":"MSLukeWest","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/4170","RelatedDescription":"Opened pull request \"Updating PublishItemsOutputGroup to include the publish deps file when _UseBuildDependencyFile is false\" (#4170) at dotnet/sdk","RelatedBody":"This is the output group that gets used with VS installer projects. Right now we're using the wrong deps file in the case where assets are marked as excluded from publish.\r\n\r\nFor some historical context you can look at the comments in PR 3141. At that point we didn't actually do a real publish when this output group got used so PublishDepsFilePath wasn't available to us. But now consuming this output group using an installer project does a real publish, so we can and should use the publish version of the deps file when _UseBuildDependencyFile is false."},{"Id":"11276817107","Type":"IssuesEvent","CreatedAt":"2020-01-15T00:30:24","Actor":"lukeschlather","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/issues/4169","RelatedDescription":"Opened issue \"Add a more thorough counterpart to dotnet clean\" (#4169) at dotnet/sdk","RelatedBody":"Per https://github.com/dotnet/docs/issues/12304, `dotnet clean` by design does not delete everything generated by dotnet build. This can result in dotnet build producing dirty published files.\r\n\r\nIt would be nice to have a more thorough command, which could be called `dotnet purge` which deletes all the contents of the bin and obj directories for the project."},{"Id":"11276728673","Type":"IssuesEvent","CreatedAt":"2020-01-15T00:11:38","Actor":"assyadh","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/issues/4168","RelatedDescription":"Opened issue \"Missing cli tag for 3.1.101?\" (#4168) at dotnet/sdk","RelatedBody":"Hi,\r\n\r\nWith .NET Core 3.1.1, there is a cli versioned at 3.1.101 which I can't find a tag for in https://github.com/dotnet/cli/tags\r\n\r\nCan we expect a tag for that version?\r\n\r\nThanks"},{"Id":"11276109973","Type":"PullRequestEvent","CreatedAt":"2020-01-14T22:20:14","Actor":"nguerrera","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/4167","RelatedDescription":"Opened pull request \"Merge internal 3.0.1xx and bump branding to 3.0.103\" (#4167) at dotnet/sdk","RelatedBody":""}],"ResultType":"GitHubEvent"},"Home-Issues":{"Issues":[{"Id":"544546454","IsPullRequest":true,"CreatedAt":"2020-01-02T11:42:32","Actor":"manne","Number":"157","RawContent":null,"Title":"Link Reactive Extensions to new github repo","State":"open","Body":"","Url":"https://github.com/dotnet/foundation/pull/157","RelatedDescription":"Open PR \"Link Reactive Extensions to new github repo\" (#157)"},{"Id":"539153211","IsPullRequest":true,"CreatedAt":"2019-12-17T15:52:32","Actor":"khalidabuhakmeh","Number":"156","RawContent":null,"Title":"Update Teams Link","State":"open","Body":"Was `https://dotnetfoundation.org/team` but now is `https://dotnetfoundation.org/about#team`","Url":"https://github.com/dotnet/foundation/pull/156","RelatedDescription":"Open PR \"Update Teams Link\" (#156)"},{"Id":"523940971","IsPullRequest":false,"CreatedAt":"2019-11-17T05:53:47","Actor":"NextTurn","Number":"155","RawContent":null,"Title":"Typos in CLA bot profile","State":"open","Body":"https://github.com/dnfclas\r\n\r\n## Expected\r\n\r\n![image](https://user-images.githubusercontent.com/45985406/69003693-983ed400-0941-11ea-91d9-18c29e752b81.png)\r\n\r\n## Actual\r\n\r\n![image](https://user-images.githubusercontent.com/45985406/69003652-ec958400-0940-11ea-8239-f9b19a7dc957.png)\r\n\r\nAlways capitalized, never .Net or dot NET. \r\n\r\n[.NET Glossary](https://github.com/dotnet/docs/blob/master/docs/standard/glossary.md#net)\r\n\r\n[Microsoft Style Guide](https://github.com/MicrosoftDocs/microsoft-style-guide/blob/master/styleguide/a-z-word-list-term-collections/n/net.md)","Url":"https://github.com/dotnet/foundation/issues/155","RelatedDescription":"Open issue \"Typos in CLA bot profile\" (#155)"},{"Id":"523861891","IsPullRequest":true,"CreatedAt":"2019-11-16T15:59:11","Actor":"NextTurn","Number":"154","RawContent":null,"Title":"Fix broken links","State":"open","Body":"","Url":"https://github.com/dotnet/foundation/pull/154","RelatedDescription":"Open PR \"Fix broken links\" (#154)"},{"Id":"522965180","IsPullRequest":true,"CreatedAt":"2019-11-14T16:22:27","Actor":"NextTurn","Number":"153","RawContent":null,"Title":"Fix broken links","State":"open","Body":"","Url":"https://github.com/dotnet/foundation/pull/153","RelatedDescription":"Open PR \"Fix broken links\" (#153)"},{"Id":"522951789","IsPullRequest":true,"CreatedAt":"2019-11-14T16:00:23","Actor":"NextTurn","Number":"152","RawContent":null,"Title":"Fix broken links","State":"open","Body":"","Url":"https://github.com/dotnet/foundation/pull/152","RelatedDescription":"Open PR \"Fix broken links\" (#152)"},{"Id":"520212668","IsPullRequest":true,"CreatedAt":"2019-11-08T23:32:02","Actor":"onovotny","Number":"151","RawContent":null,"Title":"Update RxUI license to reflect repo","State":"closed","Body":"Fixes https://github.com/dotnet-foundation/dotnetfoundation-website/issues/68","Url":"https://github.com/dotnet/foundation/pull/151","RelatedDescription":"Closed or merged PR \"Update RxUI license to reflect repo\" (#151)"},{"Id":"455670422","IsPullRequest":true,"CreatedAt":"2019-11-07T05:43:04","Actor":"gep13","Number":"147","RawContent":null,"Title":"(GH-111) Update Source Link location","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/147","RelatedDescription":"Closed or merged PR \"(GH-111) Update Source Link location\" (#147)"},{"Id":"501128777","IsPullRequest":true,"CreatedAt":"2019-11-07T05:42:14","Actor":"gep13","Number":"150","RawContent":null,"Title":"Add new Cake Maintainer","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/150","RelatedDescription":"Closed or merged PR \"Add new Cake Maintainer\" (#150)"},{"Id":"500670461","IsPullRequest":true,"CreatedAt":"2019-11-07T05:41:48","Actor":"JimBobSquarePants","Number":"149","RawContent":null,"Title":"Add ImageSharp","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/149","RelatedDescription":"Closed or merged PR \"Add ImageSharp\" (#149)"},{"Id":"475315730","IsPullRequest":false,"CreatedAt":"2019-07-31T19:23:23","Actor":"MeikTranel","Number":"148","RawContent":null,"Title":"Clarify guidelines in regards to Options and Requirements","State":"open","Body":"I'd be interested in which part of the project submission guidelines is optional and which are deal breaker requirements.\r\n\r\n- Is the Role Matrix laid out an absolute or (as can be read between the lines) just a preset, which may be subject to individual projects needs?\r\n- Is it a strong requirement that the project uses the contributor covenant CoC?","Url":"https://github.com/dotnet/foundation/issues/148","RelatedDescription":"Open issue \"Clarify guidelines in regards to Options and Requirements\" (#148)"},{"Id":"455555823","IsPullRequest":true,"CreatedAt":"2019-06-13T06:28:59","Actor":"gep13","Number":"146","RawContent":null,"Title":"Update Cake Project Contacts","State":"closed","Body":"@jongalloway just noticed that this wasn't up to date.","Url":"https://github.com/dotnet/foundation/pull/146","RelatedDescription":"Closed or merged PR \"Update Cake Project Contacts\" (#146)"},{"Id":"441542047","IsPullRequest":true,"CreatedAt":"2019-05-09T18:35:22","Actor":"mitchelsellers","Number":"145","RawContent":null,"Title":"Edits to DNN Platform Information","State":"closed","Body":"Edits to reflect changes in repository structure with recent modifications to the overall project structure.","Url":"https://github.com/dotnet/foundation/pull/145","RelatedDescription":"Closed or merged PR \"Edits to DNN Platform Information\" (#145)"},{"Id":"437980746","IsPullRequest":true,"CreatedAt":"2019-05-03T20:10:38","Actor":"FlorianRappl","Number":"143","RawContent":null,"Title":"Add AngleSharp","State":"closed","Body":"cc @jongalloway ","Url":"https://github.com/dotnet/foundation/pull/143","RelatedDescription":"Closed or merged PR \"Add AngleSharp\" (#143)"},{"Id":"426787230","IsPullRequest":true,"CreatedAt":"2019-05-03T20:08:40","Actor":"mairaw","Number":"141","RawContent":null,"Title":"add links to ML.NET docs","State":"closed","Body":"/cc @JRAlexander @shauheen \r\n\r\nTo match the info we have added for other projects","Url":"https://github.com/dotnet/foundation/pull/141","RelatedDescription":"Closed or merged PR \"add links to ML.NET docs\" (#141)"},{"Id":"440030132","IsPullRequest":true,"CreatedAt":"2019-05-03T20:08:15","Actor":"tomasherceg","Number":"144","RawContent":null,"Title":"Add DotVVM","State":"closed","Body":"cc @jongalloway ","Url":"https://github.com/dotnet/foundation/pull/144","RelatedDescription":"Closed or merged PR \"Add DotVVM\" (#144)"},{"Id":"426787542","IsPullRequest":true,"CreatedAt":"2019-03-29T14:44:24","Actor":"mairaw","Number":"142","RawContent":null,"Title":"add docs samples link","State":"closed","Body":"@BillWagner should we add the samples project too?","Url":"https://github.com/dotnet/foundation/pull/142","RelatedDescription":"Closed or merged PR \"add docs samples link\" (#142)"},{"Id":"426658581","IsPullRequest":true,"CreatedAt":"2019-03-29T02:16:07","Actor":"scottaddie","Number":"139","RawContent":null,"Title":"Add link to ASP.NET Core docs","State":"closed","Body":"Provide a link to the docs site for ASP.NET Core.","Url":"https://github.com/dotnet/foundation/pull/139","RelatedDescription":"Closed or merged PR \"Add link to ASP.NET Core docs\" (#139)"},{"Id":"426666928","IsPullRequest":true,"CreatedAt":"2019-03-29T02:15:48","Actor":"BillWagner","Number":"140","RawContent":null,"Title":"add links to .NET docs","State":"closed","Body":"/cc @mairaw @scottaddie\r\n\r\nMaira, did I miss any project repos to tag?","Url":"https://github.com/dotnet/foundation/pull/140","RelatedDescription":"Closed or merged PR \"add links to .NET docs\" (#140)"},{"Id":"419205679","IsPullRequest":true,"CreatedAt":"2019-03-18T21:04:01","Actor":"MikeWilliams-UK","Number":"137","RawContent":null,"Title":"Add V3.1 repo and change documentation link","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/137","RelatedDescription":"Closed or merged PR \"Add V3.1 repo and change documentation link\" (#137)"},{"Id":"419897914","IsPullRequest":true,"CreatedAt":"2019-03-18T21:03:34","Actor":"devlead","Number":"138","RawContent":null,"Title":"Add Dave to cake.md","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/138","RelatedDescription":"Closed or merged PR \"Add Dave to cake.md\" (#138)"},{"Id":"417018694","IsPullRequest":true,"CreatedAt":"2019-03-08T18:59:32","Actor":"jkonicki","Number":"136","RawContent":null,"Title":"Fix logo and update team contributors","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/136","RelatedDescription":"Closed or merged PR \"Fix logo and update team contributors\" (#136)"},{"Id":"416428925","IsPullRequest":true,"CreatedAt":"2019-03-08T18:59:00","Actor":"manne","Number":"135","RawContent":null,"Title":"adds Umbraco logo","State":"closed","Body":"fixes #124 ","Url":"https://github.com/dotnet/foundation/pull/135","RelatedDescription":"Closed or merged PR \"adds Umbraco logo\" (#135)"},{"Id":"416427614","IsPullRequest":true,"CreatedAt":"2019-03-08T18:58:45","Actor":"manne","Number":"134","RawContent":null,"Title":"adds the prism logo","State":"closed","Body":"fixes #126 ","Url":"https://github.com/dotnet/foundation/pull/134","RelatedDescription":"Closed or merged PR \"adds the prism logo\" (#134)"},{"Id":"416157860","IsPullRequest":true,"CreatedAt":"2019-03-08T18:58:26","Actor":"glennawatson","Number":"133","RawContent":null,"Title":"Add additional ReactiveUI organization projects.","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/133","RelatedDescription":"Closed or merged PR \"Add additional ReactiveUI organization projects.\" (#133)"},{"Id":"407251900","IsPullRequest":true,"CreatedAt":"2019-02-18T17:45:44","Actor":"Potapy4","Number":"132","RawContent":null,"Title":"Update MVVM project logo","State":"closed","Body":"Fixes dotnet/dotnetfoundation-website#72\r\nFixes #125","Url":"https://github.com/dotnet/foundation/pull/132","RelatedDescription":"Closed or merged PR \"Update MVVM project logo\" (#132)"},{"Id":"406210463","IsPullRequest":true,"CreatedAt":"2019-02-18T17:44:39","Actor":"NextTurn","Number":"131","RawContent":null,"Title":"Replace http links with https links","State":"closed","Body":"Replace http links with https where possible - both returned 200 OK.","Url":"https://github.com/dotnet/foundation/pull/131","RelatedDescription":"Closed or merged PR \"Replace http links with https links\" (#131)"},{"Id":"399191617","IsPullRequest":true,"CreatedAt":"2019-02-02T11:04:15","Actor":"NextTurn","Number":"130","RawContent":null,"Title":"Update Open XML links","State":"closed","Body":"OpenXmlDeveloper.org was shut down long ago.\r\n\r\nThe content has been moved to EricWhite.com.","Url":"https://github.com/dotnet/foundation/pull/130","RelatedDescription":"Closed or merged PR \"Update Open XML links\" (#130)"},{"Id":"395863354","IsPullRequest":true,"CreatedAt":"2019-01-09T22:28:14","Actor":"ErikEJ","Number":"128","RawContent":null,"Title":"Update of EF description","State":"closed","Body":"@divega !","Url":"https://github.com/dotnet/foundation/pull/128","RelatedDescription":"Closed or merged PR \"Update of EF description\" (#128)"},{"Id":"395901602","IsPullRequest":true,"CreatedAt":"2019-01-05T03:23:39","Actor":"MarcBruins","Number":"129","RawContent":null,"Title":"Update to absolute path","State":"closed","Body":"Update to absolute path so that when this list is copied the link will actually work","Url":"https://github.com/dotnet/foundation/pull/129","RelatedDescription":"Closed or merged PR \"Update to absolute path\" (#129)"}],"ResultType":"GitHubIssue"},"CoreCLR-Issues":{"Issues":[{"Id":"549295331","IsPullRequest":true,"CreatedAt":"2020-01-15T03:31:02","Actor":"VSadov","Number":"27990","RawContent":null,"Title":"Revert CPU clipping in the presence of CPU quota to 3.0, 2.x behavior.","State":"closed","Body":"This is a fix for an issue tracked by https://github.com/dotnet/runtime/issues/622. \r\nIt is a reversal of a change made in 3.1 vs. 3.0 and 2.X \r\n(Basically reverting https://github.com/dotnet/coreclr/pull/26806)\r\nThe change was an improvement in some cases, but was causing considerable performance regressions in constrained container scenarios.\r\n\r\n## Customer Impact\r\nCustomers report performance regressions in constrained container scenarios when CPU quotas are applied.\r\n\r\n## Regression?\r\nYes. From 3.0 and 2.x\r\n\r\n## Testing\r\nRegular PR tests. \r\nVerified that the most affected aspnet benchmarks are back to 3.0 performance levels.\r\n\r\n## Risk\r\nLow: This is reverting to behavior that we had for a few releases.","Url":"https://github.com/dotnet/coreclr/pull/27990","RelatedDescription":"Closed or merged PR \"Revert CPU clipping in the presence of CPU quota to 3.0, 2.x behavior.\" (#27990)"},{"Id":"534871799","IsPullRequest":true,"CreatedAt":"2020-01-14T22:56:05","Actor":"janvorli","Number":"27967","RawContent":null,"Title":"Port to 2.1 - Fix VirtualMemoryLogging::logRecords overflow","State":"closed","Body":"Issue: https://github.com/dotnet/coreclr/issues/27547\r\n\r\nCustomer impact\r\n---\r\n\r\nCrash or hang in long running (days) processes on Linux, triggered by runtime executing 2 billion of  virtual memory operations.\r\n\r\nRegression?\r\n---\r\n\r\nNot a regression - the bug is present since .NET Core 1.0. Windows/Linux reliability gap.\r\n\r\nRisk\r\n---\r\nLow\r\n\r\n----\r\n\r\nwhen VirtualMemoryLogging::recordNumber increments from LONG_MAX,\r\nit became negative number, and the result of i % MaxRecords became\r\na number from -127 to 0.\r\n\r\nWhen that happens we will ovewrite CRITICAL_SECTION virtual_critsec\r\nwhich are stored in bss right before logRecords with garbage data.\r\nThen most likely the process will have a GC hang with one or more\r\nGC threads stuck trying to enter or leave critical section.\r\n\r\nThe fix is to ensure ULONG value are passed to modulo operation.","Url":"https://github.com/dotnet/coreclr/pull/27967","RelatedDescription":"Closed or merged PR \"Port to 2.1 - Fix VirtualMemoryLogging::logRecords overflow\" (#27967)"},{"Id":"549775170","IsPullRequest":true,"CreatedAt":"2020-01-14T22:47:49","Actor":"Anipik","Number":"27994","RawContent":null,"Title":"update branding for coreclr 2.1.16","State":"closed","Body":"","Url":"https://github.com/dotnet/coreclr/pull/27994","RelatedDescription":"Closed or merged PR \"update branding for coreclr 2.1.16\" (#27994)"},{"Id":"549855987","IsPullRequest":true,"CreatedAt":"2020-01-14T22:29:36","Actor":"GrabYourPitchforks","Number":"27996","RawContent":null,"Title":"[release/3.1] Port fix to revert EncoderNLS and DecoderNLS Convert changes","State":"open","Body":"Port https://github.com/dotnet/runtime/pull/752 to release/3.1\r\nFixes https://github.com/dotnet/runtime/issues/594\r\n\r\n## Description\r\n\r\nIn .NET Core 3.0 / 3.1 we changed how the _completed_ out parameter is set on the `EncoderNLS.Convert` and `DecoderNLS.Convert` routines. We had changed the logic to match precisely what MSDN's documentation stated and to fix a possible data corruption bug; however, this broke a number of customers' applications by sending them into infinite loops.\r\n\r\nThis PR reverts that change.\r\n\r\n## Customer Impact\r\n\r\nIf customers were relying on the previous behavior of the _completed_ out parameter, their applications could end up in an infinite loop. What makes matters worse is that the sample code on the MSDN page for `Encoder.Convert` and `Decoder.Convert` is also susceptible to this pattern, so we suspect a large number of customers may have based their own application code on the sample.\r\n\r\n## Regression?\r\n\r\nYes, from .NET Framework 4.x and .NET Core 2.x. One half of this change was introduced in .NET Core 3.0 (see https://github.com/dotnet/coreclr/commit/43a5159d39bd52195c5095da4006183f791c696b); the other half was introduced in .NET Core 3.1 (see https://github.com/dotnet/coreclr/commit/c07ec4cd2f88c23edc87500893576d83c20f2e6d).\r\n\r\n## Testing\r\n\r\nThe reversion is already committed in the 5.0 branches (see https://github.com/dotnet/runtime/commit/d49b541ab156d992aeb4bbe410f7a816bb0ac039), so we have been getting test coverage on those nightlies. No notable regressions have been reported.\r\n\r\n## Risk\r\n\r\nSomewhere between minimal and moderate. It's possible that some applications may have taken a dependency on the new behavior. See for instance https://github.com/dotnet/aspnetcore/pull/17747, where ASP.NET appears to have unintentionally taken a dependency on the new behavior and had to proactively make a change so that they behave correctly both before and after this PR goes through.\r\n\r\n/cc @tarekgh @anurse @danmosemsft ","Url":"https://github.com/dotnet/coreclr/pull/27996","RelatedDescription":"Open PR \"[release/3.1] Port fix to revert EncoderNLS and DecoderNLS Convert changes\" (#27996)"},{"Id":"549842263","IsPullRequest":true,"CreatedAt":"2020-01-14T22:05:50","Actor":"dotnet-maestro-bot","Number":"27995","RawContent":null,"Title":"[automated] Merge branch 'release/3.0' => 'release/3.1'","State":"closed","Body":"I detected changes in the release/3.0 branch which have not been merged yet to release/3.1. I'm a robot and am configured to help you automatically keep release/3.1 up to date, so I've opened this PR.\r\n\r\nThis PR merges commits made on release/3.0 by the following committers:\n\n* @Anipik\n* @mmitche\n* @davmason\n* @jashook\n* @brianrob\r\n\r\n## Instructions for merging from UI\r\n\r\nThis PR will not be auto-merged. When pull request checks pass, complete this PR by creating a merge commit, *not* a squash or rebase commit.\r\n\r\n<img alt=\"merge button instructions\" src=\"https://i.imgur.com/GepcNJV.png\" width=\"300\" />\r\n\r\nIf this repo does not allow creating merge commits from the GitHub UI, use command line instructions.\r\n\r\n## Instructions for merging via command line\r\n\r\nRun these commands to merge this pull request from the command line.\r\n\r\n``` sh\r\ngit fetch\r\ngit checkout release/3.0\r\ngit pull --ff-only\r\ngit checkout release/3.1\r\ngit pull --ff-only\r\ngit merge --no-ff release/3.0\r\n\r\n# If there are merge conflicts, resolve them and then run git merge --continue to complete the merge\r\n# Pushing the changes to the PR branch will re-trigger PR validation.\r\ngit push https://github.com/dotnet-maestro-bot/coreclr HEAD:merge/release/3.0-to-release/3.1\r\n```\r\n\r\n<details>\r\n<summary>or if you are using SSH</summary>\r\n\r\n```\r\ngit push git@github.com:dotnet-maestro-bot/coreclr HEAD:merge/release/3.0-to-release/3.1\r\n```\r\n\r\n</details>\r\n\r\n\r\nAfter PR checks are complete push the branch\r\n```\r\ngit push\r\n```\r\n\r\n## Instructions for resolving conflicts\r\n\r\n:warning: If there are merge conflicts, you will need to resolve them manually before merging. You can do this [using GitHub][resolve-github] or using the [command line][resolve-cli].\r\n\r\n[resolve-github]: https://help.github.com/articles/resolving-a-merge-conflict-on-github/\r\n[resolve-cli]: https://help.github.com/articles/resolving-a-merge-conflict-using-the-command-line/\r\n\r\n## Instructions for updating this pull request\r\n\r\nContributors to this repo have permission update this pull request by pushing to the branch 'merge/release/3.0-to-release/3.1'. This can be done to resolve conflicts or make other changes to this pull request before it is merged.\r\n\r\n```\r\ngit checkout -b merge/release/3.0-to-release/3.1 release/3.1\r\ngit pull https://github.com/dotnet-maestro-bot/coreclr merge/release/3.0-to-release/3.1\r\n(make changes)\r\ngit commit -m \"Updated PR with my changes\"\r\ngit push https://github.com/dotnet-maestro-bot/coreclr HEAD:merge/release/3.0-to-release/3.1\r\n```\r\n\r\n<details>\r\n    <summary>or if you are using SSH</summary>\r\n\r\n```\r\ngit checkout -b merge/release/3.0-to-release/3.1 release/3.1\r\ngit pull git@github.com:dotnet-maestro-bot/coreclr merge/release/3.0-to-release/3.1\r\n(make changes)\r\ngit commit -m \"Updated PR with my changes\"\r\ngit push git@github.com:dotnet-maestro-bot/coreclr HEAD:merge/release/3.0-to-release/3.1\r\n```\r\n\r\n</details>\r\n\r\nContact .NET Core Engineering if you have questions or issues.\r\nAlso, if this PR was generated incorrectly, help us fix it. See https://github.com/dotnet/arcade/blob/master/scripts/GitHubMergeBranches.ps1.\r\n","Url":"https://github.com/dotnet/coreclr/pull/27995","RelatedDescription":"Closed or merged PR \"[automated] Merge branch 'release/3.0' => 'release/3.1'\" (#27995)"},{"Id":"549732492","IsPullRequest":true,"CreatedAt":"2020-01-14T21:54:02","Actor":"Anipik","Number":"27993","RawContent":null,"Title":"update branding to 3.0.3","State":"closed","Body":"","Url":"https://github.com/dotnet/coreclr/pull/27993","RelatedDescription":"Closed or merged PR \"update branding to 3.0.3\" (#27993)"},{"Id":"537840266","IsPullRequest":true,"CreatedAt":"2020-01-14T18:36:19","Actor":"AndyAyersMS","Number":"27972","RawContent":null,"Title":"[release/3.1] Port fix for JIT silent bad code","State":"closed","Body":"Release/3.1 port of dotnet/runtime#797.\r\nFixes dotnet/runtime#764\r\n\r\nThe jit might incorrectly order a read from a struct field with an operation\r\nthat modifies the field, so that the read returns the wrong value.\r\n\r\n## Customer Impact\r\nSilent bad code; program behaves incorrectly.\r\n\r\n## Regression?\r\nYes, introduced during the development 3.0 cycle. 2.x behaves correctly.\r\n\r\n## Testing\r\nVerified the user's test case now passes; no diffs seen in any existing framework\r\nor test code.\r\n\r\n## Risk\r\n**Low**: the jit is now spilling the eval stack entries to temps in cases where it\r\ndid not before; this should be conservatively safe.\r\n\r\ncc @BruceForstall \r\n\r\n____\r\n\r\nIf we're appending an assignment whose LHS is is a location within a local\r\nstruct, we need to spill all references to that struct from the eval stack.\r\n\r\nUpdate the existing logic for this to handle the case where the LHS is a field\r\nof a local struct, and the field is updated by unusual means (here, `initobj`).\r\n\r\nFixes dotnet/runtime#764.","Url":"https://github.com/dotnet/coreclr/pull/27972","RelatedDescription":"Closed or merged PR \"[release/3.1] Port fix for JIT silent bad code\" (#27972)"},{"Id":"538649669","IsPullRequest":true,"CreatedAt":"2020-01-14T18:35:50","Actor":"AndyAyersMS","Number":"27973","RawContent":null,"Title":"Release/3.1 port of dotnet/runtime#239","State":"closed","Body":"Fix for #27923\r\n\r\nThe jit might fail to locate a class handle for a ref class, leading to an\r\nunexpected crash while jitting.\r\n\r\n## Customer Impact\r\nUnexpected and hard to diagnose crash/exception\r\n\r\n## Regression?\r\nYes, introduced during the development 3.0 cycle. 2.x behaves correctly.\r\n\r\n## Testing\r\nVerified the user's test case now passes; no diffs seen in any existing\r\nframework or test code.\r\n\r\n## Risk\r\n**Low**: the jit will now fall back to using the handle for System.Object if no\r\nbetter option can be found.\r\n\r\ncc @BruceForstall\r\n\r\n____\r\n\r\nIn some cases we may end up in lvaSetClass without a valid ref class handle\r\nfrom either the IR or the stack. Use the handle for object as a conservative\r\nfallback.","Url":"https://github.com/dotnet/coreclr/pull/27973","RelatedDescription":"Closed or merged PR \"Release/3.1 port of dotnet/runtime#239\" (#27973)"},{"Id":"544722108","IsPullRequest":true,"CreatedAt":"2020-01-14T18:35:32","Actor":"sywhang","Number":"27979","RawContent":null,"Title":"[3.1 port] Fix EventSource to stop ignoring EventCommand.SendManifest","State":"closed","Body":"This is a port of https://github.com/dotnet/runtime/pull/848 to 3.1 servicing. \r\n\r\n## Customer Impact\r\n\r\nSending ETW command to trigger manifest file to be generated does not work anymore. This blocks some customers who are relying on ETW commands to generate multiple ETL files per session, since the files they generate after the initial file don't have any test. \r\n\r\n## Regression?\r\n\r\nYes, from https://github.com/dotnet/coreclr/pull/11639/. This is some time around .NET Core 2.0 timeframe. \r\n\r\n## Testing\r\n\r\nAdded automated test as part of https://github.com/dotnet/runtime/pull/848. \r\nI also verified the fix with the repro sent by the customer who initially reported this (Azure Stack). \r\n\r\n## Risk\r\n\r\nLow. The code path being changed affects only ETW, and is a relatively simple change. I've tested the scenario with all the ETW tests we have and verified that they pass. ","Url":"https://github.com/dotnet/coreclr/pull/27979","RelatedDescription":"Closed or merged PR \"[3.1 port] Fix EventSource to stop ignoring EventCommand.SendManifest\" (#27979)"},{"Id":"536062209","IsPullRequest":true,"CreatedAt":"2020-01-14T18:35:16","Actor":"eerhardt","Number":"27969","RawContent":null,"Title":"[release/3.1] Stop throwing exception in TimeZoneInfo POSIX parsing","State":"closed","Body":"Release/3.1 port of https://github.com/dotnet/runtime/pull/458.\r\nFixes https://github.com/dotnet/corefx/issues/42192\r\n\r\n### Summary\r\nOn RHEL 8, some time zones (specifically `Africa/Casablanca`) stop supporting daylight savings transitions because of a change in the tzdata files.\r\n\r\n### Customer Impact\r\nApplications getting time zone information on RedHat 8 (and potentially other Unix distros if using the same tzdata version) stop working with daylight savings time for `Africa/Casablanca` time zone.\r\n\r\nThis change allows `TimeZoneInfo` to work correctly for all the daylight savings transitions in the tzdata file, and it skips the \"future\" daylight savings template if we can't support it.\r\n\r\n### Regression?\r\nFor a user it is a regression when updating to RHEL 8 because of the change in the tzdata in the OS. Our code didn't regress here - we never supported this format before now and were always throwing an exception. This is the first time we've hit it in the real-world.\r\n\r\n### Testing\r\nI ran all the TimeZoneInfo tests on RHEL 8. They failed for `Africa/Casablanca` before this change, and now pass afterward.\r\n\r\n### Risk\r\n**Low**: The change is isolated to a non-supported format that would cause DST to completely stop working before. Now we are allowing the other DST information to work, while skipping the unsupported future dates.\r\n\r\ncc: @danmosemsft @tarekgh @ericstj \r\n\r\n____\r\n\r\n\r\nIsDaylightSavingTime_CasablancaMultiYearDaylightSavings fails on rhel.8\r\n\r\nWhen parsing the tzdata POSIX string that contains an 'n' Julian date, we are currently throwing an exception, and then falling back to a TimeZoneInfo without DST enabled. However, this is a mistake because there are other DST transitions that were read from the tzdata file that are valid and usable. We shouldn't be throwing that information away.\r\n\r\nSo instead, we now skip the POSIX string if we detect an unsupported 'n' Julian date, and just use the last transition as the AdjustmentRule for all the DateTimes in the future. This way we can still make DST determinations correctly for some DateTimes.\r\n\r\nFix https://github.com/dotnet/corefx/issues/42192","Url":"https://github.com/dotnet/coreclr/pull/27969","RelatedDescription":"Closed or merged PR \"[release/3.1] Stop throwing exception in TimeZoneInfo POSIX parsing\" (#27969)"},{"Id":"546543040","IsPullRequest":true,"CreatedAt":"2020-01-14T18:16:16","Actor":"Anipik","Number":"27981","RawContent":null,"Title":"update branding to 3.1.2","State":"closed","Body":"","Url":"https://github.com/dotnet/coreclr/pull/27981","RelatedDescription":"Closed or merged PR \"update branding to 3.1.2\" (#27981)"},{"Id":"549469260","IsPullRequest":false,"CreatedAt":"2020-01-14T10:23:34","Actor":"DavidSchuldenfrei","Number":"27992","RawContent":null,"Title":"Better checking of Null Reference when fields are validated/initialized by method","State":"open","Body":"The idea, is to add an attribute to `System.Diagnostics.CodeAnalysis` namespace.\r\nThis attribute would be:\r\n```\r\n[AttributeUsage(AttributeTargets.Method, AllowMultiple = true, Inherited = false)]\r\nsealed class NotNullAfterMethodCallAttribute: Attribute\r\n{\r\n    public NotNullAfterMethodCallAttribute(string memberName) => MemberName = memberName;\r\n    public string MemberName { get; }\r\n}\r\n```\r\nThe reason for such an attribute would be to handle (very common) code like the following (pseudo-code)\r\n```\r\nprivate void ValidateState()\r\n{\r\n   if (field1 == null)\r\n      throw new NotInitializedEception();\r\n   if (field2 == null)\r\n      throw new ObjectDisposedException();\r\n   if (Property == null)\r\n      Property = new object();\r\n    //...\r\n}\r\n```\r\nSuch a method could be annotated with the above attribute\r\n```\r\n[NotNullAfterMethodCall(\"field1\")]\r\n[NotNullAfterMethodCall(\"field2\")]\r\n[NotNullAfterMethodCall(\"Property\")]\r\nprivate void ValidateState()\r\n```\r\nWith the above, the compiler would know in code like\r\n```\r\nvoid Method()\r\n{\r\n    ValidateState();\r\n    field1.DoSomething();\r\n    field2.DoSomethingElse();\r\n    Property.DoAgain();\r\n}\r\n```\r\nEven if field1, field2, and Property may be null, as per their definition, not to give any warning.\r\n\r\nAnother use for this, is if there is a method `Initialize` which initilaizes all fields, such a method could be called from constructors, to initialize Non Null references. In this case also the compiler shouldn't give any warnings\r\n","Url":"https://github.com/dotnet/coreclr/issues/27992","RelatedDescription":"Open issue \"Better checking of Null Reference when fields are validated/initialized by method\" (#27992)"},{"Id":"549468310","IsPullRequest":false,"CreatedAt":"2020-01-14T10:22:02","Actor":"TheElse","Number":"27991","RawContent":null,"Title":"Don't call AssemblyLoadStarted Event","State":"open","Body":"we have try to wirte a profile:\r\nmy  SetEventMask code like this:\r\nHRESULT CloudwiseInstrumentationImpl::SetEventMask()\r\n{\r\n\tDWORD dwEventMask = (DWORD)(\r\n\t\tCOR_PRF_MONITOR_ENTERLEAVE // method enter/leave\r\n\t\t| COR_PRF_MONITOR_THREADS // thread create and destroy\r\n\t\t| COR_PRF_ENABLE_FUNCTION_ARGS\r\n\t\t| COR_PRF_DISABLE_OPTIMIZATIONS\r\n\t\t| COR_PRF_DISABLE_INLINING\r\n\t\t| COR_PRF_DISABLE_TRANSPARENCY_CHECKS_UNDER_FULL_TRUST  // Disables security transparency checks that are normally done during just-in-time (JIT) compilation and class loading for full-trust assemblies. This can make some instrumentation easier to perform.\r\n\t\t| COR_PRF_MONITOR_CLASS_LOADS // ClassLoad and ClassUnload \r\n\t\t| COR_PRF_MONITOR_MODULE_LOADS // ModuleLoad, ModuleUnload, and ModuleAttachedToAssembly callbacks.\r\n\t\t| COR_PRF_MONITOR_ASSEMBLY_LOADS // AssemblyLoad and AssemblyUnload callbacks\r\n\t\t| COR_PRF_MONITOR_APPDOMAIN_LOADS // ModuleLoad, ModuleUnload, and ModuleAttachedToAssembly callbacks.\r\n\t\t| COR_PRF_MONITOR_JIT_COMPILATION\r\n\t\t| COR_PRF_ENABLE_REJIT\r\n\r\n\t\t| COR_PRF_USE_PROFILE_IMAGES\r\n\t\t| COR_PRF_MONITOR_JIT_COMPILATION\r\n\r\n\t\t);\r\n\r\n\treturn m_pICorProfilerInfo2->SetEventMask(dwEventMask);\r\n}\r\n\r\nI try to run a Winform app AssemblyLoadStarted  works good,but when I click my button to access my sqlserver data,I try to check my logs ,then no one assembly was load,my log code like this:\r\n\r\n\r\nSTDMETHODIMP CloudwiseInstrumentationImpl::AssemblyLoadFinished(AssemblyID assemblyID, HRESULT hrStatus)\r\n{\r\n\tlogs::Logger::OutputInfo(_T(\"-----------------AssemblyLoadFinished-------------\"));\r\n\treturn S_OK;\r\n}\r\n\r\nbut I was try to access a web app(run with iis)  it is works good,could you help?or give me some advise！\r\nthanks very much!\r\nElse.Li","Url":"https://github.com/dotnet/coreclr/issues/27991","RelatedDescription":"Open issue \"Don't call AssemblyLoadStarted Event\" (#27991)"},{"Id":"548949597","IsPullRequest":false,"CreatedAt":"2020-01-13T14:01:00","Actor":"enihcam","Number":"27989","RawContent":null,"Title":"[EventPipe] Does EventCounter work across containers in the same pod?","State":"open","Body":"I have a .net core 3.1 application deployed in K8S pod, and i would like to consume the EventCounter metrics from a side-car container. Is it possible?","Url":"https://github.com/dotnet/coreclr/issues/27989","RelatedDescription":"Open issue \"[EventPipe] Does EventCounter work across containers in the same pod?\" (#27989)"},{"Id":"548404728","IsPullRequest":false,"CreatedAt":"2020-01-11T09:11:27","Actor":"stoichammer","Number":"27988","RawContent":null,"Title":"andra","State":"closed","Body":"","Url":"https://github.com/dotnet/coreclr/issues/27988","RelatedDescription":"Closed issue \"andra\" (#27988)"},{"Id":"548401484","IsPullRequest":false,"CreatedAt":"2020-01-11T08:35:17","Actor":"Kevin920920","Number":"27987","RawContent":null,"Title":"BUILD: Error: Failed to generate version headers . And System.TimeoutException","State":"open","Body":"E:\\Downloads\\coreclr-3.1.0>build.cmd\r\nBUILD: Starting Build at 15:58:14.03\r\nBUILD: Searching for Visual Studio 2017 or later installation\r\nBUILD: \"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Enterprise\\Common7\\Tools\\VsDevCmd.bat\"\r\n**********************************************************************\r\n** Visual Studio 2019 Developer Command Prompt v16.4.1\r\n** Copyright (c) 2019 Microsoft Corporation\r\n**********************************************************************\r\nBUILD: Commencing CoreCLR product build\r\nBUILD: Checking prerequisites\r\nBUILD: Number of processor cores 4\r\n  未能从“https://dotnetfeed.blob.core.windows.net/dotnet-core/flatcontainer/microsoft.net.compilers.toolset/3.3.0-beta2-19367-02/microsoft.net.compilers.toolset.3.3.0-beta2-19367-02.nupkg”下载包“Microsoft.Net.Compilers.Toolset.3.3.0-beta2-19367-02”。\r\n  由于在 60000 毫秒内未接收到数据，“https://dotnetfeed.blob.core.windows.net/dotnet-core/flatcontainer/microsoft.net.compilers.toolset/3.3.0-beta2-19367-02/microsoft.net.compilers.toolset.3.3.0-beta2-19367-02.nupkg”的下载超时。\r\n    Exception of type 'System.TimeoutException' was thrown.\r\n  未能从“https://dotnetfeed.blob.core.windows.net/dotnet-core/flatcontainer/microsoft.net.compilers.toolset/3.3.0-beta2-19367-02/microsoft.net.compilers.toolset.3.3.0-beta2-19367-02.nupkg”下载包“Microsoft.Net.Compilers.Toolset.3.3.0-beta2-19367-02”。\r\n  The SSL connection could not be established, see inner exception.\r\n    Unable to read data from the transport connection: 远程主机强迫关闭了一个现有的连接。.\r\n    远程主机强迫关闭了一个现有的连接。\r\n  E:\\Downloads\\coreclr-3.1.0\\eng\\empty.csproj 的还原在 17.91 min 内完成。\r\nE:\\Downloads\\coreclr-3.1.0\\.packages\\microsoft.build.tasks.git\\1.0.0-beta2-19367-01\\build\\Microsoft.Build.Tasks.Git.targets(24,5): error : 无法定位包含目录 'E:\\Downloads\\coreclr-3.1.0\\eng' 的存储库。 [E:\\Downloads\\coreclr-3.1.0\\eng\\empty.csproj]\r\nE:\\Downloads\\coreclr-3.1.0\\.packages\\microsoft.dotnet.arcade.sdk\\1.0.0-beta.19461.7\\tools\\Version.targets(53,5): error : SourceRevisionId is not set, which means the SourceLink targets are not included in the build. Those are needed to produce a correct sha for our build outputs. [E:\\Downloads\\coreclr-3.1.0\\eng\\empty.csproj]\r\n\r\n生成失败。\r\n\r\nE:\\Downloads\\coreclr-3.1.0\\.packages\\microsoft.build.tasks.git\\1.0.0-beta2-19367-01\\build\\Microsoft.Build.Tasks.Git.targets(24,5): error : 无法定位包含目录 'E:\\Downloads\\coreclr-3.1.0\\eng' 的存储库。 [E:\\Downloads\\coreclr-3.1.0\\eng\\empty.csproj]\r\nE:\\Downloads\\coreclr-3.1.0\\.packages\\microsoft.dotnet.arcade.sdk\\1.0.0-beta.19461.7\\tools\\Version.targets(53,5): error : SourceRevisionId is not set, which means the SourceLink targets are not included in the build. Those are needed to produce a correct sha for our build outputs. [E:\\Downloads\\coreclr-3.1.0\\eng\\empty.csproj]\r\n    0 个警告\r\n    2 个错误\r\n\r\n已用时间 00:17:55.82\r\nBuild failed.\r\nBUILD: Error: Failed to generate version headers.","Url":"https://github.com/dotnet/coreclr/issues/27987","RelatedDescription":"Open issue \"BUILD: Error: Failed to generate version headers . And System.TimeoutException\" (#27987)"},{"Id":"544464942","IsPullRequest":false,"CreatedAt":"2020-01-11T08:16:58","Actor":"Joowoo30","Number":"27978","RawContent":null,"Title":"How can I use some headers in gc.cpp.","State":"closed","Body":"Hello.\r\nI forked coreclr code and added some test code in it to analyze gc behavior.\r\nbut I can't use #include <dlfcn.h> in it. (Exactly in coreclr/src/gc/gc.cpp)\r\nTo solve this problem, I edited CmakeLists files many times (Adding target_link_libraries dl and so on)\r\nbut I fail to build coreclr with my code.\r\n\r\nhow can I use #include <dlfcn.h> in gc.cpp?\r\nI have to use dlopen and dlsym for my test.\r\n\r\nI would be really grateful if someone let me know.\r\nThank you.","Url":"https://github.com/dotnet/coreclr/issues/27978","RelatedDescription":"Closed issue \"How can I use some headers in gc.cpp.\" (#27978)"},{"Id":"548326464","IsPullRequest":true,"CreatedAt":"2020-01-10T22:44:49","Actor":"CarolEidt","Number":"27986","RawContent":null,"Title":"Port of dotnet/runtime#1059 to 3.1 branch","State":"open","Body":"This is the fix for #27924. This is a GC hole bug that was found externally, #27590.\r\nThe cause is that the JIT was using the target type of the subtract when it needed\r\nto make a copy of the source, but it needs to use the source type.\r\n\r\n## Customer Impact\r\nCorruption of state that is non-deterministic and hard to track down.\r\n\r\n## Regression?\r\nNot a recent regression, but exposed by Unsafe.ByteOffset.\r\n\r\n## Testing\r\nThe fix has been verified in the runtime repo.\r\n\r\n## Risk\r\nLow: The fix is straightfoward and only impacts 3 lines of code.","Url":"https://github.com/dotnet/coreclr/pull/27986","RelatedDescription":"Open PR \"Port of dotnet/runtime#1059 to 3.1 branch\" (#27986)"},{"Id":"547818433","IsPullRequest":true,"CreatedAt":"2020-01-10T01:45:51","Actor":"AntonLapounov","Number":"27985","RawContent":null,"Title":"[3.1 port] Fix GC heap corruption on ARM","State":"open","Body":"Port of dotnet/runtime#1389 to 3.1 branch.  Applications may crash in GC code due to GC heap corruption caused by incorrect padding size calculation on ARM.\r\n\r\n## Customer Impact\r\nUnexpected and hard to diagnose crashes.\r\n\r\n## Regression?\r\nNo.\r\n\r\n## Testing\r\nThe fix has been verified in the runtime repo.\r\n\r\n## Risk\r\nLow: one-line fix of the incorrect calculation.","Url":"https://github.com/dotnet/coreclr/pull/27985","RelatedDescription":"Open PR \"[3.1 port] Fix GC heap corruption on ARM\" (#27985)"},{"Id":"547811395","IsPullRequest":true,"CreatedAt":"2020-01-10T01:18:37","Actor":"CarolEidt","Number":"27984","RawContent":null,"Title":"Port PR #258 to 3.1","State":"open","Body":"Port of dotnet/runtime#258 to 3.1 branch.\r\nThis is the fix for #27937. The manifestation is an AV in the JIT. Although it isn't SBCG, it is difficult for the developer to track down that this is a JIT bug, rather than caused by something in their code.\r\n\r\n## Customer Impact\r\nUnexpected and hard to diagnose crashes.\r\n\r\n## Regression?\r\nNo.\r\n\r\n## Testing\r\nThe fix has been verified in the runtime repo.\r\n\r\n## Risk\r\nLow: The fix is straightforward and only prevents the AV case.","Url":"https://github.com/dotnet/coreclr/pull/27984","RelatedDescription":"Open PR \"Port PR #258 to 3.1\" (#27984)"},{"Id":"547728284","IsPullRequest":true,"CreatedAt":"2020-01-09T21:16:47","Actor":"CarolEidt","Number":"27983","RawContent":null,"Title":"Port fix for #1241 to 3.1","State":"open","Body":"Port of dotnet/runtime#1279 to 3.1 branch.\r\nThis is the fix for dotnet/runtime#1241. This is a SBCG bug reported externally. When a struct is partially written, the JIT fails to invalidate assertions (in this case that the entire struct had been zero'd). This results in incorrect optimization. The fix is to invalidate the assertions in the partial write case.\r\n\r\n## Customer Impact\r\nSBCG resulting in incorrect behavior.\r\n\r\n## Regression?\r\nNot a recent regression, but exposed by doing more optimizations on structs.\r\n\r\n## Testing\r\nThe fix has been verified in the runtime repo.\r\n\r\n## Risk\r\nLow: The fix is straightforward and kills assertions which only disables optimizations.","Url":"https://github.com/dotnet/coreclr/pull/27983","RelatedDescription":"Open PR \"Port fix for #1241 to 3.1\" (#27983)"},{"Id":"546575203","IsPullRequest":false,"CreatedAt":"2020-01-08T20:46:40","Actor":"assyadh","Number":"27982","RawContent":null,"Title":"CoreCLR failed to run tests on v3.1 tag \" The wrappers must be compiled and placed at\"","State":"closed","Body":"Hi,\r\n\r\nI am building coreclr/corefx from source, and encountering a weird issue when trying to run the coreclr tests. This occurs when testing the 3.1 tag, testing 2.1 works fine.\r\n\r\nAt first was seeing similar errors as https://github.com/dotnet/coreclr/issues/27725 when testing coreclr on amazon linux and ended up importing a patch based on https://github.com/dotnet/coreclr/pull/27815.\r\n\r\nNow I am seeing the following error:\r\n\r\n```\r\n/build/coreclr/tests/tests.targets(19,5): error :  The wrappers must be compiled and placed at /build/coreclr/tests/../bin/tests/Linux.x64.Release/tests/\\*\\ before they can be run, Do a clean Test Run [/build/coreclr/tests/runtest.proj]\r\n```\r\n\r\n\r\nWhen running:\r\n\r\n```\r\ntests/runtest.sh     \r\n--testRootDir=/build/coreclr/bin/tests/Linux.x64.Release     \r\n--testNativeBinDir=/build/coreclr/bin/obj/Linux.x64.Release/tests     \r\n--coreClrBinDir=/build/coreclr/bin/Product/Linux.x64.Release     \r\n--mscorlibDir=/build/coreclr/bin/Product/Linux.x64.Release     \r\n--coreFxBinDir=/build/corefx/bin/runtime/netcoreapp-Linux-Release-x64 \r\nrelease\r\n```\r\n\r\nI have been pulling my hairs on what is going on here, I can build/test 2.1 properly, but can't figure out what changed with 3.1. It looks like a path issue but I don't see where the hiccup occurs.\r\n\r\n\r\nAny thoughts @jashook? Thanks for the help 👍 \r\n\r\n\r\nFull log:\r\n\r\n```\r\ntests/runtest.sh     --testRootDir=/build/coreclr/bin/tests/Linux.x64.Release     --testNativeBinDir=/build/coreclr/bin/obj/Linux.x64.Release/tests     --coreClrBinDir=/build/coreclr/bin/Product/Linux.x64.Release     --mscorlibDir=/build/coreclr/bin/Product/Linux.x64.Release     --coreFxBinDir=/build/corefx/bin/runtime/netcoreapp-Linux-Release-x64 release\r\nRunning on  CPU- x64\r\nBuild Architecture            : x64\r\nBuild Configuration           : Release\r\nTest Location                 : /build/coreclr/bin/tests/Linux.x64.Release\r\nProduct Location              : /build/coreclr/bin/Product/Linux.x64.Release\r\nTest Native Bin Location      : /build/coreclr/bin/obj/Linux.x64.Release/tests\r\n\r\nSkipping xunit wrapper build. If build-test was called on a different\r\nhost_os or arch the test run will most likely have failures.\r\npython /build/coreclr/tests/runtest.py -arch x64 -build_type Release -test_location /build/coreclr/bin/tests/Linux.x64.Release -product_location /build/coreclr/bin/Product/Linux.x64.Release -test_native_bin_location /build/coreclr/bin/obj/Linux.x64.Release/tests\r\nhost_os                  :Linux\r\narch                     :x64\r\nbuild_type               :Release\r\ncoreclr_repo_location    :/build/coreclr\r\nproduct_location         :/build/coreclr/bin/Product/Linux.x64.Release\r\ncore_root                :/build/coreclr/bin/tests/Linux.x64.Release/Tests/Core_Root\r\ntest_location            :/build/coreclr/bin/tests/Linux.x64.Release\r\ntest_native_bin_location :None\r\nFound COMPlus variables in the current environment\r\n\r\nUnset COMPlus_gcServer\r\nUnset COMPlus_EnableEventLog\r\n\r\nTestEnv: /tmp/tmpMgAmE0\r\n\r\nContents:\r\n\r\n# Temporary test env for test run.\r\nexport COMPlus_gcServer=0\r\nexport COMPlus_EnableEventLog=1\r\n\r\n\r\nSetting __TestTimeout=900000\r\nSetting CORE_ROOT=/build/coreclr/bin/tests/Linux.x64.Release/Tests/Core_Root\r\nSetting __TestEnv=/tmp/tmpMgAmE0\r\nDownload and overwrite xunit.console.dll in Core_Root\r\n/build/coreclr/dotnet.sh msbuild /build/coreclr/tests/runtest.proj /p:Runtests=true /clp:showcommandline /fileloggerparameters:\"Verbosity=normal;LogFile=/build/coreclr/bin/Logs/TestRunResults_Linux_x64_Release.log\" /fileloggerparameters1:\"WarningsOnly;LogFile=/build/coreclr/bin/Logs/TestRunResults_Linux_x64_Release.wrn\" /fileloggerparameters2:\"ErrorsOnly;LogFile=/build/coreclr/bin/Logs/TestRunResults_Linux_x64_Release.err\" /consoleloggerparameters:Summary /p:__BuildOS=Linux /p:__BuildArch=x64 /p:__BuildType=Release /p:__LogsDir=/build/coreclr/bin/Logs\r\nRunning init-dotnet.sh\r\nInstalling dotnet using Arcade...\r\nRunning: /build/coreclr/.dotnet/dotnet msbuild /build/coreclr/tests/runtest.proj /p:Runtests=true /clp:showcommandline /fileloggerparameters:\"Verbosity=normal;LogFile=/build/coreclr/bin/Logs/TestRunResults_Linux_x64_Release.log\" /fileloggerparameters1:\"WarningsOnly;LogFile=/build/coreclr/bin/Logs/TestRunResults_Linux_x64_Release.wrn\" /fileloggerparameters2:\"ErrorsOnly;LogFile=/build/coreclr/bin/Logs/TestRunResults_Linux_x64_Release.err\" /consoleloggerparameters:Summary /p:__BuildOS=Linux /p:__BuildArch=x64 /p:__BuildType=Release /p:__LogsDir=/build/coreclr/bin/Logs\r\nMicrosoft (R) Build Engine version 16.3.0+0f4c62fea for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n/build/coreclr/tests/tests.targets(19,5): error :  The wrappers must be compiled and placed at /build/coreclr/tests/../bin/tests/Linux.x64.Release/tests/\\*\\ before they can be run, Do a clean Test Run [/build/coreclr/tests/runtest.proj]\r\n\r\nBuild FAILED.\r\n\r\n/build/coreclr/tests/tests.targets(19,5): error :  The wrappers must be compiled and placed at /build/coreclr/tests/../bin/tests/Linux.x64.Release/tests/\\*\\ before they can be run, Do a clean Test Run [/build/coreclr/tests/runtest.proj]\r\n    0 Warning(s)\r\n    1 Error(s)\r\n\r\nTime Elapsed 00:00:00.41\r\nERROR: An error occurred in /build/coreclr/.dotnet/dotnet msbuild /build/coreclr/tests/runtest.proj /p:Runtests=true /clp:showcommandline /fileloggerparameters:\"Verbosity=normal;LogFile=/build/coreclr/bin/Logs/TestRunResults_Linux_x64_Release.log\" /fileloggerparameters1:\"WarningsOnly;LogFile=/build/coreclr/bin/Logs/TestRunResults_Linux_x64_Release.wrn\" /fileloggerparameters2:\"ErrorsOnly;LogFile=/build/coreclr/bin/Logs/TestRunResults_Linux_x64_Release.err\" /consoleloggerparameters:Summary /p:__BuildOS=Linux /p:__BuildArch=x64 /p:__BuildType=Release /p:__LogsDir=/build/coreclr/bin/Logs. Check logs under /build/coreclr.\r\nTest run finished.\r\nParsing test results from (/build/coreclr/bin/Logs/TestRunResults_Linux_x64_Release)\r\nUnable to find testRun.xml. This normally means the tests did not run.\r\nIt could also mean there was a problem logging. Please run the tests again.\r\n\r\n\r\n```\r\n\r\n\r\n","Url":"https://github.com/dotnet/coreclr/issues/27982","RelatedDescription":"Closed issue \"CoreCLR failed to run tests on v3.1 tag \" The wrappers must be compiled and placed at\"\" (#27982)"},{"Id":"537829085","IsPullRequest":true,"CreatedAt":"2020-01-08T16:51:52","Actor":"mateoatr","Number":"27971","RawContent":null,"Title":"Fix memory leaked caused by Marshal.GetFunctionPointerForDelegate","State":"closed","Body":"Issue: https://github.com/dotnet/runtime/issues/353\r\n\r\nCustomer impact\r\n---\r\n\r\nMemory leak when using Marshal.GetFunctionPointerForDelegate\r\n\r\nRegression?\r\n---\r\n\r\nNot a regression -- introduced in Windows Phone CoreCLR port.\r\n\r\nRisk\r\n---\r\n\r\nLow\r\n\r\n----\r\n\r\ncc @jeffschwMSFT @jkotas ","Url":"https://github.com/dotnet/coreclr/pull/27971","RelatedDescription":"Closed or merged PR \"Fix memory leaked caused by Marshal.GetFunctionPointerForDelegate\" (#27971)"},{"Id":"545822848","IsPullRequest":false,"CreatedAt":"2020-01-06T16:44:59","Actor":"mikernet","Number":"27980","RawContent":null,"Title":"[Deleted: Posted in wrong repository]","State":"closed","Body":"Gah, wrong repository...","Url":"https://github.com/dotnet/coreclr/issues/27980","RelatedDescription":"Closed issue \"[Deleted: Posted in wrong repository]\" (#27980)"},{"Id":"542571528","IsPullRequest":false,"CreatedAt":"2019-12-26T15:50:11","Actor":"Macromullet","Number":"27977","RawContent":null,"Title":"Different 32-bit marshalling behavior with on Windows with 3.1","State":"closed","Body":"I posted about this last week, but with the holidays it hasn't received any traction. https://github.com/dotnet/core/issues/3950#issuecomment-567792601\r\n\r\nIn a nutshell, a test that has behaved perfectly under .net framework and .net core, suddenly stopped working after an upgrade to .net core 3.1.\r\n\r\nUpdate: This appears to be a difference between how tests are run with the 16.4 Microsoft.NET.Test.Sdk project type. When using 16.2, even when using x86 as the processor architecture (under Tests->Processor Architecture for AnyCPU Projects) it still is using 64-bit. In 16.4, it actually runs the test in 32-bit mode, causing the test to fail.","Url":"https://github.com/dotnet/coreclr/issues/27977","RelatedDescription":"Closed issue \"Different 32-bit marshalling behavior with on Windows with 3.1\" (#27977)"},{"Id":"542289671","IsPullRequest":false,"CreatedAt":"2019-12-25T08:20:59","Actor":"peppy","Number":"27976","RawContent":null,"Title":"Finalizer called without ctor in optimized compilation case","State":"closed","Body":"We recently encountered a bug where an object expected to be in an initialized state at point of finalizing was not. Minimal reproduction case:\r\n\r\n```csharp\r\nusing System;\r\nusing System.Diagnostics;\r\n\r\nnamespace ReproduceFinalizerFailure\r\n{\r\n    class Program\r\n    {\r\n        public static bool CtorReached;\r\n        public static bool FinalizerReached;\r\n\r\n        static void Main()\r\n        {\r\n            try\r\n            {\r\n                GetObject();\r\n            }\r\n            catch\r\n            {\r\n            }\r\n\r\n            GC.Collect();\r\n            GC.WaitForPendingFinalizers();\r\n\r\n            Trace.Assert(!CtorReached, \"Constructor should not be reached\");\r\n            Trace.Assert(!FinalizerReached, \"Finalizer should not be reached\");\r\n        }\r\n\r\n        private static void GetObject()\r\n        {\r\n            var obj = throwException();\r\n            new FinalizingObject(obj);\r\n        }\r\n\r\n        private static object throwException()\r\n        {\r\n            throw new Exception();\r\n        }\r\n    }\r\n\r\n    class FinalizingObject\r\n    {\r\n        public FinalizingObject(object obj) => Program.CtorReached = true;\r\n\r\n        ~FinalizingObject() => Program.FinalizerReached = true;\r\n    }\r\n}\r\n```\r\n\r\n```sh\r\n➜  ReproduceFinalizerFailure  dotnet --version\r\n3.1.100\r\n➜  ReproduceFinalizerFailure  dotnet run -c Release\r\nProcess terminated. Assertion Failed\r\nFinalizer should not be reached\r\n   at ReproduceFinalizerFailure.Program.Main() in /Users/dean/Projects/ReproduceFinalizerFailure/ReproduceFinalizerFailure/Program.cs:line 27\r\n```\r\n\r\nThis only happens with build configuration Release and debugger detached.\r\n\r\nPotentially related to https://github.com/dotnet/runtime/issues/764.","Url":"https://github.com/dotnet/coreclr/issues/27976","RelatedDescription":"Closed issue \"Finalizer called without ctor in optimized compilation case\" (#27976)"},{"Id":"540149649","IsPullRequest":true,"CreatedAt":"2019-12-19T08:12:08","Actor":"VSadov","Number":"27975","RawContent":null,"Title":"Setting MinLimitTotalWorkerThreads according to CPU quota.","State":"open","Body":"","Url":"https://github.com/dotnet/coreclr/pull/27975","RelatedDescription":"Open PR \"Setting MinLimitTotalWorkerThreads according to CPU quota.\" (#27975)"},{"Id":"538806283","IsPullRequest":false,"CreatedAt":"2019-12-18T06:40:39","Actor":"zengqinglei","Number":"27974","RawContent":null,"Title":"Unable to delete assembly file after plugin uninstall","State":"closed","Body":"**Describe the bug**\r\n\r\nWhen I use the sample code: https://github.com/dotnet/samples/tree/master/core/tutorials/Unloading\r\nThen I want to remove the assembly file after the plugin is uninstalled and I get an exception:\r\n\r\n![image](https://user-images.githubusercontent.com/7374317/70961451-cb998d80-20bc-11ea-837c-601b70c8e52a.png)\r\n\r\n**Run Environment**\r\n* .NET CORE 3.1\r\n* Windows 10 \r\n![image](https://user-images.githubusercontent.com/7374317/70961722-a8231280-20bd-11ea-852a-eb42a443ac45.png)\r\n\r\nI hope to get your help soon, thank you!","Url":"https://github.com/dotnet/coreclr/issues/27974","RelatedDescription":"Closed issue \"Unable to delete assembly file after plugin uninstall\" (#27974)"},{"Id":"535533061","IsPullRequest":false,"CreatedAt":"2019-12-10T14:47:07","Actor":"NMSAzulX","Number":"27968","RawContent":null,"Title":"How do I write code that allows a method to use Calli instructions at run time? ","State":"closed","Body":"Now, I use MethodInfo.CreateDelegate to create delegates, but its execution performance is lower than that of Calli. How can I improve it?","Url":"https://github.com/dotnet/coreclr/issues/27968","RelatedDescription":"Closed issue \"How do I write code that allows a method to use Calli instructions at run time? \" (#27968)"},{"Id":"537150704","IsPullRequest":false,"CreatedAt":"2019-11-15T16:20:09","Actor":"andrewmcclellankibo","Number":"27970","RawContent":null,"Title":"System.Threading.Timer Not Running On Ubuntu server","State":"open","Body":"# System.Threading.Timer Not Running On Ubuntu server\r\n\r\n\r\n# General\r\nCreated a worker service project, used a background service to create a timer function that followed:\r\nhttps://docs.microsoft.com/en-us/aspnet/core/fundamentals/host/hosted-services?view=aspnetcore-3.0&tabs=visual-studio\r\n\r\n\r\nWhen executing: running locally on windows, timer events trigger as expected.\r\n\r\nDeployed to ubuntu server: timer events are never triggered.\r\nVerified that the app is running, and no issues instantiating the timer, it just never actually triggers the timer.\r\n","Url":"https://github.com/dotnet/coreclr/issues/27970","RelatedDescription":"Open issue \"System.Threading.Timer Not Running On Ubuntu server\" (#27970)"}],"ResultType":"GitHubIssue"},"CLI-Issues":{"Issues":[{"Id":"549944109","IsPullRequest":true,"CreatedAt":"2020-01-15T03:31:18","Actor":"dotnet-maestro-bot","Number":"13176","RawContent":null,"Title":"[automated] Merge branch 'release/3.1.1xx' => 'release/3.1.2xx'","State":"open","Body":"I detected changes in the release/3.1.1xx branch which have not been merged yet to release/3.1.2xx. I'm a robot and am configured to help you automatically keep release/3.1.2xx up to date, so I've opened this PR.\r\n\r\nThis PR merges commits made on release/3.1.1xx by the following committers:\n\n* dsplaisted\n* dotnet-bot\r\n\r\n## Instructions for merging from UI\r\n\r\nThis PR will not be auto-merged. When pull request checks pass, complete this PR by creating a merge commit, *not* a squash or rebase commit.\r\n\r\n<img alt=\"merge button instructions\" src=\"https://i.imgur.com/GepcNJV.png\" width=\"300\" />\r\n\r\nIf this repo does not allow creating merge commits from the GitHub UI, use command line instructions.\r\n\r\n## Instructions for merging via command line\r\n\r\nRun these commands to merge this pull request from the command line.\r\n\r\n``` sh\r\ngit fetch\r\ngit checkout release/3.1.1xx\r\ngit pull --ff-only\r\ngit checkout release/3.1.2xx\r\ngit pull --ff-only\r\ngit merge --no-ff release/3.1.1xx\r\n\r\n# If there are merge conflicts, resolve them and then run git merge --continue to complete the merge\r\n# Pushing the changes to the PR branch will re-trigger PR validation.\r\ngit push https://github.com/dotnet-maestro-bot/cli HEAD:merge/release/3.1.1xx-to-release/3.1.2xx\r\n```\r\n\r\n<details>\r\n<summary>or if you are using SSH</summary>\r\n\r\n```\r\ngit push git@github.com:dotnet-maestro-bot/cli HEAD:merge/release/3.1.1xx-to-release/3.1.2xx\r\n```\r\n\r\n</details>\r\n\r\n\r\nAfter PR checks are complete push the branch\r\n```\r\ngit push\r\n```\r\n\r\n## Instructions for resolving conflicts\r\n\r\n:warning: If there are merge conflicts, you will need to resolve them manually before merging. You can do this [using GitHub][resolve-github] or using the [command line][resolve-cli].\r\n\r\n[resolve-github]: https://help.github.com/articles/resolving-a-merge-conflict-on-github/\r\n[resolve-cli]: https://help.github.com/articles/resolving-a-merge-conflict-using-the-command-line/\r\n\r\n## Instructions for updating this pull request\r\n\r\nContributors to this repo have permission update this pull request by pushing to the branch 'merge/release/3.1.1xx-to-release/3.1.2xx'. This can be done to resolve conflicts or make other changes to this pull request before it is merged.\r\n\r\n```\r\ngit checkout -b merge/release/3.1.1xx-to-release/3.1.2xx release/3.1.2xx\r\ngit pull https://github.com/dotnet-maestro-bot/cli merge/release/3.1.1xx-to-release/3.1.2xx\r\n(make changes)\r\ngit commit -m \"Updated PR with my changes\"\r\ngit push https://github.com/dotnet-maestro-bot/cli HEAD:merge/release/3.1.1xx-to-release/3.1.2xx\r\n```\r\n\r\n<details>\r\n    <summary>or if you are using SSH</summary>\r\n\r\n```\r\ngit checkout -b merge/release/3.1.1xx-to-release/3.1.2xx release/3.1.2xx\r\ngit pull git@github.com:dotnet-maestro-bot/cli merge/release/3.1.1xx-to-release/3.1.2xx\r\n(make changes)\r\ngit commit -m \"Updated PR with my changes\"\r\ngit push git@github.com:dotnet-maestro-bot/cli HEAD:merge/release/3.1.1xx-to-release/3.1.2xx\r\n```\r\n\r\n</details>\r\n\r\nContact .NET Core Engineering if you have questions or issues.\r\nAlso, if this PR was generated incorrectly, help us fix it. See https://github.com/dotnet/arcade/blob/master/scripts/GitHubMergeBranches.ps1.\r\n","Url":"https://github.com/dotnet/cli/pull/13176","RelatedDescription":"Open PR \"[automated] Merge branch 'release/3.1.1xx' => 'release/3.1.2xx'\" (#13176)"},{"Id":"549921980","IsPullRequest":true,"CreatedAt":"2020-01-15T03:29:08","Actor":"dsplaisted","Number":"13175","RawContent":null,"Title":"Merge internal 3.1.1xx and bump branding to 3.1.102","State":"closed","Body":"There were no changes in the public branch here, so the first merge was a fast-forward.","Url":"https://github.com/dotnet/cli/pull/13175","RelatedDescription":"Closed or merged PR \"Merge internal 3.1.1xx and bump branding to 3.1.102\" (#13175)"},{"Id":"549838701","IsPullRequest":true,"CreatedAt":"2020-01-15T01:28:27","Actor":"nguerrera","Number":"13174","RawContent":null,"Title":"Merge internal 3.0.1xx and bump branding to 3.1.103","State":"closed","Body":"","Url":"https://github.com/dotnet/cli/pull/13174","RelatedDescription":"Closed or merged PR \"Merge internal 3.0.1xx and bump branding to 3.1.103\" (#13174)"},{"Id":"549787315","IsPullRequest":true,"CreatedAt":"2020-01-14T22:55:45","Actor":"dotnet-maestro-bot","Number":"13172","RawContent":null,"Title":"Update aspnet, aspnet, coresetup to servicing-31150, servicing-31150, preview1-26216-03, respectively (release/2.1.8xx)","State":"closed","Body":"/cc @dotnet/dotnet-cli","Url":"https://github.com/dotnet/cli/pull/13172","RelatedDescription":"Closed or merged PR \"Update aspnet, aspnet, coresetup to servicing-31150, servicing-31150, preview1-26216-03, respectively (release/2.1.8xx)\" (#13172)"},{"Id":"549787361","IsPullRequest":true,"CreatedAt":"2020-01-14T22:48:21","Actor":"dotnet-maestro-bot","Number":"13173","RawContent":null,"Title":"Update aspnet, coresetup to servicing-31150, preview1-26216-03, respectively (release/2.1.5xx)","State":"closed","Body":"/cc @dotnet/dotnet-cli","Url":"https://github.com/dotnet/cli/pull/13173","RelatedDescription":"Closed or merged PR \"Update aspnet, coresetup to servicing-31150, preview1-26216-03, respectively (release/2.1.5xx)\" (#13173)"},{"Id":"549786758","IsPullRequest":true,"CreatedAt":"2020-01-14T22:40:45","Actor":"dotnet-maestro-bot","Number":"13171","RawContent":null,"Title":"Update aspnet, coresetup to servicing-31150, preview1-26216-03, respectively (release/2.1.6xx)","State":"closed","Body":"/cc @dotnet/dotnet-cli","Url":"https://github.com/dotnet/cli/pull/13171","RelatedDescription":"Closed or merged PR \"Update aspnet, coresetup to servicing-31150, preview1-26216-03, respectively (release/2.1.6xx)\" (#13171)"},{"Id":"547795768","IsPullRequest":true,"CreatedAt":"2020-01-10T07:00:51","Actor":"dotnet-maestro[bot]","Number":"13170","RawContent":null,"Title":"[release/3.1.2xx] Update dependencies from dotnet/sdk","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:bdd984ca-7112-4d1b-d452-08d76e1d3434)\r\n## From https://github.com/dotnet/sdk\r\n- **Subscription**: bdd984ca-7112-4d1b-d452-08d76e1d3434\r\n- **Build**: 20200109.2\r\n- **Date Produced**: 1/9/2020 11:11 PM\r\n- **Commit**: b3cf8ef9e7df8d9cb28b3545ce1f85f548deca75\r\n- **Branch**: refs/heads/release/3.1.2xx\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk** -> 3.1.200-preview.20059.2\r\n\r\n[marker]: <> (End:bdd984ca-7112-4d1b-d452-08d76e1d3434)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/13170","RelatedDescription":"Closed or merged PR \"[release/3.1.2xx] Update dependencies from dotnet/sdk\" (#13170)"},{"Id":"544096255","IsPullRequest":true,"CreatedAt":"2020-01-10T06:08:25","Actor":"wli3","Number":"13166","RawContent":null,"Title":"[WIP] test CI","State":"closed","Body":"","Url":"https://github.com/dotnet/cli/pull/13166","RelatedDescription":"Closed or merged PR \"[WIP] test CI\" (#13166)"},{"Id":"547112753","IsPullRequest":true,"CreatedAt":"2020-01-08T22:05:35","Actor":"dotnet-maestro[bot]","Number":"13169","RawContent":null,"Title":"[release/3.1.2xx] Update dependencies from dotnet/sdk","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:bdd984ca-7112-4d1b-d452-08d76e1d3434)\r\n## From https://github.com/dotnet/sdk\r\n- **Build**: 20200108.1\r\n- **Date Produced**: 1/8/2020 8:08 PM\r\n- **Commit**: 7a8c66ba63c88ffb13e509e46c5b83398a928683\r\n- **Branch**: refs/heads/release/3.1.2xx\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk** -> 3.1.200-preview.20058.1\r\n\r\n[marker]: <> (End:bdd984ca-7112-4d1b-d452-08d76e1d3434)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/13169","RelatedDescription":"Closed or merged PR \"[release/3.1.2xx] Update dependencies from dotnet/sdk\" (#13169)"},{"Id":"546478827","IsPullRequest":true,"CreatedAt":"2020-01-07T20:35:34","Actor":"dotnet-maestro[bot]","Number":"13168","RawContent":null,"Title":"[release/3.1.2xx] Update dependencies from dotnet/sdk","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:bdd984ca-7112-4d1b-d452-08d76e1d3434)\r\n## From https://github.com/dotnet/sdk\r\n- **Build**: 20200107.1\r\n- **Date Produced**: 1/7/2020 6:57 PM\r\n- **Commit**: 831a360a52d5a24604794fb7a06e14c3065c31b5\r\n- **Branch**: refs/heads/release/3.1.2xx\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk** -> 3.1.200-preview.20057.1\r\n\r\n[marker]: <> (End:bdd984ca-7112-4d1b-d452-08d76e1d3434)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/13168","RelatedDescription":"Closed or merged PR \"[release/3.1.2xx] Update dependencies from dotnet/sdk\" (#13168)"},{"Id":"544255363","IsPullRequest":true,"CreatedAt":"2019-12-31T19:26:05","Actor":"wli3","Number":"13167","RawContent":null,"Title":"[WIP] Disable useapphost on mac by default 3.0.1xx","State":"open","Body":"Need https://github.com/dotnet/sdk/pull/4019 to be in first","Url":"https://github.com/dotnet/cli/pull/13167","RelatedDescription":"Open PR \"[WIP] Disable useapphost on mac by default 3.0.1xx\" (#13167)"},{"Id":"544058113","IsPullRequest":true,"CreatedAt":"2019-12-31T02:15:39","Actor":"dotnet-maestro[bot]","Number":"13165","RawContent":null,"Title":"[release/3.1.2xx] Update dependencies from dotnet/sdk","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:bdd984ca-7112-4d1b-d452-08d76e1d3434)\r\n## From https://github.com/dotnet/sdk\r\n- **Build**: 20191230.1\r\n- **Date Produced**: 12/31/2019 12:16 AM\r\n- **Commit**: 71f48b3241b93c00998336f947d146f57de93f4e\r\n- **Branch**: refs/heads/release/3.1.2xx\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk** -> 3.1.200-preview.19630.1\r\n\r\n[marker]: <> (End:bdd984ca-7112-4d1b-d452-08d76e1d3434)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/13165","RelatedDescription":"Closed or merged PR \"[release/3.1.2xx] Update dependencies from dotnet/sdk\" (#13165)"},{"Id":"542461477","IsPullRequest":true,"CreatedAt":"2019-12-28T02:13:29","Actor":"dotnet-maestro[bot]","Number":"13163","RawContent":null,"Title":"[release/3.1.2xx] Update dependencies from dotnet/sdk","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:bdd984ca-7112-4d1b-d452-08d76e1d3434)\r\n## From https://github.com/dotnet/sdk\r\n- **Build**: 20191225.2\r\n- **Date Produced**: 12/26/2019 6:10 AM\r\n- **Commit**: 4a9be5b8dfb0c287883d3fd79c307f2bcfb41119\r\n- **Branch**: refs/heads/release/3.1.2xx\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk** -> 3.1.200-preview.19625.2\r\n\r\n[marker]: <> (End:bdd984ca-7112-4d1b-d452-08d76e1d3434)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/13163","RelatedDescription":"Closed or merged PR \"[release/3.1.2xx] Update dependencies from dotnet/sdk\" (#13163)"},{"Id":"543023695","IsPullRequest":true,"CreatedAt":"2019-12-28T00:35:57","Actor":"dotnet-maestro[bot]","Number":"13164","RawContent":null,"Title":"[release/3.1.2xx] Update dependencies from nuget/nuget.client","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:3c9d65bb-d2bc-4c69-c5d7-08d76fa9c820)\r\n## From https://github.com/NuGet/NuGet.Client\r\n- **Build**: 5.5.0.6355\r\n- **Date Produced**: 12/24/2019 5:03 AM\r\n- **Commit**: cb402b5a3340ab5b2605ecc72de7f70aaac95344\r\n- **Branch**: refs/heads/dev\r\n- **Updates**:\r\n  - **NuGet.Build.Tasks** -> 5.5.0-preview.2.6355\r\n\r\n[marker]: <> (End:3c9d65bb-d2bc-4c69-c5d7-08d76fa9c820)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/13164","RelatedDescription":"Closed or merged PR \"[release/3.1.2xx] Update dependencies from nuget/nuget.client\" (#13164)"},{"Id":"540635534","IsPullRequest":true,"CreatedAt":"2019-12-20T08:34:16","Actor":"dotnet-maestro[bot]","Number":"13162","RawContent":null,"Title":"[release/3.1.2xx] Update dependencies from dotnet/sdk","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:bdd984ca-7112-4d1b-d452-08d76e1d3434)\r\n## From https://github.com/dotnet/sdk\r\n- **Build**: 20191219.4\r\n- **Date Produced**: 12/20/2019 5:39 AM\r\n- **Commit**: 36cf3588bae9485ab2ac20104ee69de8270ad412\r\n- **Branch**: refs/heads/release/3.1.2xx\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk** -> 3.1.200-preview.19619.4\r\n\r\n[marker]: <> (End:bdd984ca-7112-4d1b-d452-08d76e1d3434)\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/13162","RelatedDescription":"Closed or merged PR \"[release/3.1.2xx] Update dependencies from dotnet/sdk\" (#13162)"},{"Id":"539860442","IsPullRequest":true,"CreatedAt":"2019-12-18T19:38:22","Actor":"dotnet-maestro[bot]","Number":"13161","RawContent":null,"Title":"[release/3.1.2xx] Update dependencies from nuget/nuget.client","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:3c9d65bb-d2bc-4c69-c5d7-08d76fa9c820)\r\n## From https://github.com/NuGet/NuGet.Client\r\n- **Build**: 5.5.0.6330\r\n- **Date Produced**: 12/4/2019 1:59 AM\r\n- **Commit**: 6f7be0986028256f05c894eac2f7816c85611984\r\n- **Branch**: refs/heads/dev\r\n- **Updates**:\r\n  - **NuGet.Build.Tasks** -> 5.5.0-preview.1.6330\r\n\r\n[marker]: <> (End:3c9d65bb-d2bc-4c69-c5d7-08d76fa9c820)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/13161","RelatedDescription":"Closed or merged PR \"[release/3.1.2xx] Update dependencies from nuget/nuget.client\" (#13161)"},{"Id":"537838019","IsPullRequest":true,"CreatedAt":"2019-12-18T01:38:23","Actor":"dotnet-maestro[bot]","Number":"13160","RawContent":null,"Title":"[release/3.1.2xx] Update dependencies from dotnet/sdk","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:bdd984ca-7112-4d1b-d452-08d76e1d3434)\r\n## From https://github.com/dotnet/sdk\r\n- **Build**: 20191217.15\r\n- **Date Produced**: 12/18/2019 12:36 AM\r\n- **Commit**: 7e7e3eab372d4c76824ba8c31b05f11b94b8a057\r\n- **Branch**: refs/heads/release/3.1.2xx\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk** -> 3.1.200-preview.19617.15\r\n\r\n[marker]: <> (End:bdd984ca-7112-4d1b-d452-08d76e1d3434)\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/13160","RelatedDescription":"Closed or merged PR \"[release/3.1.2xx] Update dependencies from dotnet/sdk\" (#13160)"},{"Id":"537217099","IsPullRequest":true,"CreatedAt":"2019-12-13T22:07:36","Actor":"dotnet-maestro[bot]","Number":"13158","RawContent":null,"Title":"[release/3.1.2xx] Update dependencies from dotnet/sdk","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:bdd984ca-7112-4d1b-d452-08d76e1d3434)\r\n## From https://github.com/dotnet/sdk\r\n- **Build**: 20191213.8\r\n- **Date Produced**: 12/13/2019 8:24 PM\r\n- **Commit**: e98d59e0cc80d22c6c56e5818cd62583973b6657\r\n- **Branch**: refs/heads/release/3.1.2xx\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk** -> 3.1.200-preview.19613.8\r\n\r\n[marker]: <> (End:bdd984ca-7112-4d1b-d452-08d76e1d3434)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/13158","RelatedDescription":"Closed or merged PR \"[release/3.1.2xx] Update dependencies from dotnet/sdk\" (#13158)"},{"Id":"537732084","IsPullRequest":false,"CreatedAt":"2019-12-13T19:28:51","Actor":"Thraka","Number":"13159","RawContent":null,"Title":"Powershell Install script is not signed","State":"open","Body":"#### Originally from\r\n_@jozefizso on Friday, December 13, 2019 2:28:43 PM_\r\n\r\nWhy is the PowerShell script unsigned? How do we know we are running a legitimate script when it's downloaded from internet on each build?\r\n\r\n---\r\n#### Document Details\r\n\r\n⚠ *Do not edit this section. It is required for docs.microsoft.com ➟ GitHub issue linking.*\r\n\r\n* ID: a2e484a9-5e0c-eb3e-1413-7b507c4fa07d\r\n* Version Independent ID: 5bc7caa5-f1c2-d7d5-fe02-80c65cca9672\r\n* Content: [dotnet-install scripts - .NET Core CLI](https://docs.microsoft.com/en-us/dotnet/core/tools/dotnet-install-script)\r\n* Content Source: [docs/core/tools/dotnet-install-script.md](https://github.com/dotnet/docs/blob/master/docs/core/tools/dotnet-install-script.md)\r\n* Product: **dotnet-core**\r\n* Technology: **dotnet-cli**\r\n* GitHub Login: @mairaw\r\n* Microsoft Alias: **mairaw**\r\n\r\n_Copied from original issue: dotnet/docs#16242_","Url":"https://github.com/dotnet/cli/issues/13159","RelatedDescription":"Open issue \"Powershell Install script is not signed\" (#13159)"},{"Id":"536563234","IsPullRequest":true,"CreatedAt":"2019-12-11T23:47:19","Actor":"dotnet-maestro[bot]","Number":"13156","RawContent":null,"Title":"[release/3.1.2xx] Update dependencies from aspnet/aspnetcore","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:af9b1a64-20ee-4b07-c5da-08d76fa9c820)\r\n## From https://github.com/aspnet/AspNetCore\r\n- **Build**: 20191211.11\r\n- **Date Produced**: 12/11/2019 10:22 PM\r\n- **Commit**: 4b235df669038064ca539bec4bc732610b1eea3a\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.AspNetCore.DeveloperCertificates.XPlat** -> 3.0.2-servicing.19611.11\r\n\r\n[marker]: <> (End:af9b1a64-20ee-4b07-c5da-08d76fa9c820)\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/13156","RelatedDescription":"Closed or merged PR \"[release/3.1.2xx] Update dependencies from aspnet/aspnetcore\" (#13156)"},{"Id":"536589584","IsPullRequest":true,"CreatedAt":"2019-12-11T23:26:46","Actor":"wli3","Number":"13157","RawContent":null,"Title":"Revert MicrosoftAspNetCoreDeveloperCertificatesXPlatPackageVersion to…","State":"closed","Body":"… match ref pack","Url":"https://github.com/dotnet/cli/pull/13157","RelatedDescription":"Closed or merged PR \"Revert MicrosoftAspNetCoreDeveloperCertificatesXPlatPackageVersion to…\" (#13157)"},{"Id":"536104877","IsPullRequest":true,"CreatedAt":"2019-12-11T15:00:12","Actor":"mmitche","Number":"13155","RawContent":null,"Title":"[release/3.1.2xx] Revert back to 3.1.0 runtime versions","State":"closed","Body":"","Url":"https://github.com/dotnet/cli/pull/13155","RelatedDescription":"Closed or merged PR \"[release/3.1.2xx] Revert back to 3.1.0 runtime versions\" (#13155)"},{"Id":"534626066","IsPullRequest":true,"CreatedAt":"2019-12-11T02:41:56","Actor":"wli3","Number":"13152","RawContent":null,"Title":"Update stage0","State":"closed","Body":"","Url":"https://github.com/dotnet/cli/pull/13152","RelatedDescription":"Closed or merged PR \"Update stage0\" (#13152)"},{"Id":"534221922","IsPullRequest":true,"CreatedAt":"2019-12-10T20:53:32","Actor":"mmitche","Number":"13147","RawContent":null,"Title":"[release/3.0.1xx] Change to name/value variables and remove unused","State":"closed","Body":"- Remove old legacy PB_ values that are no longer used\r\n- Change to the name, value pair approach for variables.\r\nThis will allow internal builds to add variable groups required for accessing internal runtimes","Url":"https://github.com/dotnet/cli/pull/13147","RelatedDescription":"Closed or merged PR \"[release/3.0.1xx] Change to name/value variables and remove unused\" (#13147)"},{"Id":"535519187","IsPullRequest":true,"CreatedAt":"2019-12-10T16:22:07","Actor":"dotnet-maestro-bot","Number":"13154","RawContent":null,"Title":"[automated] Merge branch 'release/3.1.1xx' => 'release/3.1.2xx'","State":"closed","Body":"I detected changes in the release/3.1.1xx branch which have not been merged yet to release/3.1.2xx. I'm a robot and am configured to help you automatically keep release/3.1.2xx up to date, so I've opened this PR.\r\n\r\nThis PR merges commits made on release/3.1.1xx by the following committers:\n\n* mmitche\n* dotnet-maestro[bot]\n* wli3\r\n\r\n## Instructions for merging from UI\r\n\r\nThis PR will not be auto-merged. When pull request checks pass, complete this PR by creating a merge commit, *not* a squash or rebase commit.\r\n\r\n<img alt=\"merge button instructions\" src=\"https://i.imgur.com/GepcNJV.png\" width=\"300\" />\r\n\r\nIf this repo does not allow creating merge commits from the GitHub UI, use command line instructions.\r\n\r\n## Instructions for merging via command line\r\n\r\nRun these commands to merge this pull request from the command line.\r\n\r\n``` sh\r\ngit fetch\r\ngit checkout release/3.1.1xx\r\ngit pull --ff-only\r\ngit checkout release/3.1.2xx\r\ngit pull --ff-only\r\ngit merge --no-ff release/3.1.1xx\r\n\r\n# If there are merge conflicts, resolve them and then run git merge --continue to complete the merge\r\n# Pushing the changes to the PR branch will re-trigger PR validation.\r\ngit push https://github.com/dotnet-maestro-bot/cli HEAD:merge/release/3.1.1xx-to-release/3.1.2xx\r\n```\r\n\r\n<details>\r\n<summary>or if you are using SSH</summary>\r\n\r\n```\r\ngit push git@github.com:dotnet-maestro-bot/cli HEAD:merge/release/3.1.1xx-to-release/3.1.2xx\r\n```\r\n\r\n</details>\r\n\r\n\r\nAfter PR checks are complete push the branch\r\n```\r\ngit push\r\n```\r\n\r\n## Instructions for resolving conflicts\r\n\r\n:warning: If there are merge conflicts, you will need to resolve them manually before merging. You can do this [using GitHub][resolve-github] or using the [command line][resolve-cli].\r\n\r\n[resolve-github]: https://help.github.com/articles/resolving-a-merge-conflict-on-github/\r\n[resolve-cli]: https://help.github.com/articles/resolving-a-merge-conflict-using-the-command-line/\r\n\r\n## Instructions for updating this pull request\r\n\r\nContributors to this repo have permission update this pull request by pushing to the branch 'merge/release/3.1.1xx-to-release/3.1.2xx'. This can be done to resolve conflicts or make other changes to this pull request before it is merged.\r\n\r\n```\r\ngit checkout -b merge/release/3.1.1xx-to-release/3.1.2xx release/3.1.2xx\r\ngit pull https://github.com/dotnet-maestro-bot/cli merge/release/3.1.1xx-to-release/3.1.2xx\r\n(make changes)\r\ngit commit -m \"Updated PR with my changes\"\r\ngit push https://github.com/dotnet-maestro-bot/cli HEAD:merge/release/3.1.1xx-to-release/3.1.2xx\r\n```\r\n\r\n<details>\r\n    <summary>or if you are using SSH</summary>\r\n\r\n```\r\ngit checkout -b merge/release/3.1.1xx-to-release/3.1.2xx release/3.1.2xx\r\ngit pull git@github.com:dotnet-maestro-bot/cli merge/release/3.1.1xx-to-release/3.1.2xx\r\n(make changes)\r\ngit commit -m \"Updated PR with my changes\"\r\ngit push git@github.com:dotnet-maestro-bot/cli HEAD:merge/release/3.1.1xx-to-release/3.1.2xx\r\n```\r\n\r\n</details>\r\n\r\nContact .NET Core Engineering if you have questions or issues.\r\nAlso, if this PR was generated incorrectly, help us fix it. See https://github.com/dotnet/arcade/blob/master/scripts/GitHubMergeBranches.ps1.\r\n","Url":"https://github.com/dotnet/cli/pull/13154","RelatedDescription":"Closed or merged PR \"[automated] Merge branch 'release/3.1.1xx' => 'release/3.1.2xx'\" (#13154)"},{"Id":"534466510","IsPullRequest":true,"CreatedAt":"2019-12-09T05:23:18","Actor":"dotnet-maestro[bot]","Number":"13148","RawContent":null,"Title":"[release/3.1.1xx] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:15385bb3-00bd-44e3-5c73-08d72a4d3f20)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20191207.3\r\n- **Date Produced**: 12/7/2019 6:35 PM\r\n- **Commit**: 4d80b9cfa53e309c8f685abff3512f60c3d8a3d1\r\n- **Branch**: refs/heads/release/3.x\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19607.3\r\n\r\n[marker]: <> (End:15385bb3-00bd-44e3-5c73-08d72a4d3f20)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/13148","RelatedDescription":"Closed or merged PR \"[release/3.1.1xx] Update dependencies from dotnet/arcade\" (#13148)"},{"Id":"534646792","IsPullRequest":true,"CreatedAt":"2019-12-09T02:28:15","Actor":"wli3","Number":"13153","RawContent":null,"Title":"Update stage 0","State":"closed","Body":"","Url":"https://github.com/dotnet/cli/pull/13153","RelatedDescription":"Closed or merged PR \"Update stage 0\" (#13153)"},{"Id":"534466950","IsPullRequest":true,"CreatedAt":"2019-12-08T00:30:21","Actor":"mmitche","Number":"13151","RawContent":null,"Title":"[release/3.0.1xx] Enable official builds on internal branches","State":"closed","Body":"","Url":"https://github.com/dotnet/cli/pull/13151","RelatedDescription":"Closed or merged PR \"[release/3.0.1xx] Enable official builds on internal branches\" (#13151)"},{"Id":"534466590","IsPullRequest":true,"CreatedAt":"2019-12-08T00:06:50","Actor":"dotnet-maestro[bot]","Number":"13150","RawContent":null,"Title":"[release/3.1.2xx] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:94c24b6f-4197-4be9-5768-08d76e1d56cb)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20191207.3\r\n- **Date Produced**: 12/7/2019 6:35 PM\r\n- **Commit**: 4d80b9cfa53e309c8f685abff3512f60c3d8a3d1\r\n- **Branch**: refs/heads/release/3.x\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19607.3\r\n\r\n[marker]: <> (End:94c24b6f-4197-4be9-5768-08d76e1d56cb)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/13150","RelatedDescription":"Closed or merged PR \"[release/3.1.2xx] Update dependencies from dotnet/arcade\" (#13150)"},{"Id":"534466539","IsPullRequest":true,"CreatedAt":"2019-12-08T00:06:23","Actor":"dotnet-maestro[bot]","Number":"13149","RawContent":null,"Title":"[release/3.0.1xx] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:9b125d25-276f-4859-b4e2-08d6910bdae0)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20191207.3\r\n- **Date Produced**: 12/7/2019 6:35 PM\r\n- **Commit**: 4d80b9cfa53e309c8f685abff3512f60c3d8a3d1\r\n- **Branch**: refs/heads/release/3.x\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19607.3\r\n\r\n[marker]: <> (End:9b125d25-276f-4859-b4e2-08d6910bdae0)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/13149","RelatedDescription":"Closed or merged PR \"[release/3.0.1xx] Update dependencies from dotnet/arcade\" (#13149)"}],"ResultType":"GitHubIssue"},"Standard-Issues":{"Issues":[{"Id":"549879760","IsPullRequest":false,"CreatedAt":"2020-01-15T00:50:36","Actor":"pushkin-","Number":"1681","RawContent":null,"Title":"Confused about EOL for .NET Standard versions","State":"closed","Body":"I am having trouble understanding EOL support for .NET Standard versions. I could only find information about .NET Core [here](https://dotnet.microsoft.com/platform/support/policy/dotnet-core).\r\n\r\nI am planning on using .NET Core 3.1. From what I've found out, I can target .NET Standard 2.1 and anything below it.\r\n\r\nIdeally, I would like my .NET Framework code to also reference the .NET Standard code, which means that I have to use .NET Standard 2.0. However, my concern is that .NET Standard 2.0's support will end soonish, at least compared to 2.1.\r\n\r\nIs that correct? What is EOL for .NET Standard 2.0?\r\n\r\nI did also read that Standard versions are fixed/immutable so new APIs get added to new Standard versions (and so maintenance perhaps doesn't make sense for Standard; new versions just get created). Maybe that partially answers my question. ","Url":"https://github.com/dotnet/standard/issues/1681","RelatedDescription":"Closed issue \"Confused about EOL for .NET Standard versions\" (#1681)"},{"Id":"548387889","IsPullRequest":false,"CreatedAt":"2020-01-13T22:25:56","Actor":"replaysMike","Number":"1679","RawContent":null,"Title":"UTF8 Encoding isn't consistent with .Net Framework","State":"closed","Body":"I found a subtle difference that was revealed in a bunch of hashing code I had written a while back for .Net Framework. I wrote a multi-platform test that shows UTF8Encoding is treated slightly different in .Net Standard and I don't really have a good way to solve it yet.\r\n\r\nConsider the following - I encoded a string in hex to guarantee the bytes are the same for the test:\r\n(hopefully github doesn't mangle the expected string, it looks correct after previewing)\r\n\r\n```csharp\r\n[Test]\r\npublic void ShouldEncodeUTF8()\r\n{\r\n    var netFrameworkExpected = \"�\\u0004[\\u0004�\\u0001�\\v,�\\u001cn]�$«�� )�:�YH̗I5�V���Nl7α��i�g_�ZQW%\\u001d�Dy\\u001eЕ\\u0013w�v+\\u0012*��\\u000f*��\\u0019r��}���8��w��&�\\r���\\f����?���&�t�M��[�`kzhz9\\u0015�\\u0012I�\\u001ey_`�\\u0011\\tF��A�Af~��q��%P�����\\u0003�x�(g���e\\u001fM�32\\u0014��\";\r\n    var hex = \"BC045B0488019F0B2CE61C6E5DFC24C2ABE09BDA2029CC3AE9AD5948CC9749359756B1A2D94E6C37CEB189D269AA675FF75A5157251D8544791ED09513779B762B122A89E10F2A98E91972D7CA7DF9F98038DFDB779FED269A0DE3F8FA0C828993B23F85B5A826B474E84DFECD5B87606B7A687A3915C31249CE1E795F609A11094686DF41E99041667E9DD271A0E22550FDD0C3CEF0039678F328679B8590651F4DBE3332148DBA\";\r\n    var bytes = hex.HexToBytes();\r\n    var utf8Encoded = Encoding.UTF8.GetString(bytes);\r\n    Assert.AreEqual(netFrameworkExpected, utf8Encoded);\r\n}\r\n\r\npublic static byte[] HexToBytes(this string hexString)\r\n{\r\n    return Enumerable.Range(0, hexString.Length)\r\n        .Where(x => x % 2 == 0)\r\n        .Select(x => Convert.ToByte(hexString.Substring(x, 2), 16))\r\n        .ToArray();\r\n}\r\n```\r\n\r\nThis test will pass on .Net Framework 4.8, but will fail on .Net Standard 2.0","Url":"https://github.com/dotnet/standard/issues/1679","RelatedDescription":"Closed issue \"UTF8 Encoding isn't consistent with .Net Framework\" (#1679)"},{"Id":"548955096","IsPullRequest":false,"CreatedAt":"2020-01-13T14:10:16","Actor":"richbryant","Number":"1680","RawContent":null,"Title":"RFC: Add a Unit type to the System namespace","State":"open","Body":"**Abstract**\r\n\r\n`Unit`s are proliferating in the NetCore ecosystem.  Nobody can deny their utility (since you can't return a void) but this does introduce the issue of incompatible structs all called `Unit` provided by different packages.\r\n\r\n**Proposal**\r\n\r\nImplement a `System.Unit` struct, taking on board the needs of the major libraries providing `Unit`s at the moment.\r\n\r\n**Benefits**\r\n\r\n- Provide a `Type` that can be used _interchangeably_ between the major libraries\r\n- Provide a `Unit` for future libraries, preventing yet more proliferation\r\n- Make the lives of everyone who has to work these so much better\r\n\r\n*_Example_*\r\n\r\n[This file](https://github.com/richbryant/BetterUnit/blob/master/BetterUnit/Unit.cs) is an example of integrating `System.Reactive.Unit` (paging @ghuntley @onovotny ) with `Mediatr.Unit` (credit @jbogard) and `language-ext.Unit` (credit @louthy ).\r\n\r\nThis covers 90% of the Use Cases for `Unit`.  If this were implemented in the `System` namespace with other Types, it would solve a lot of issues and prevent a lot of future issues .\r\n","Url":"https://github.com/dotnet/standard/issues/1680","RelatedDescription":"Open issue \"RFC: Add a Unit type to the System namespace\" (#1680)"},{"Id":"548237528","IsPullRequest":false,"CreatedAt":"2020-01-10T18:55:55","Actor":"MikeKenyon","Number":"1678","RawContent":null,"Title":"System.Uri decoding automatically and incorrectly","State":"open","Body":"Consider the following block:\r\n\r\n```\r\n            var uri = new Uri($\"https://sample.com/api/go?o=Presentation%20of%20%E2%80%9CGreen%E2%80%9D%20data\");\r\n            var original = uri.OriginalString;\r\n            var modified = uri.ToString();\r\n```\r\n\r\nThe URL contains contents that are not necessarily valid ASCII characters.  In this regard, the modified version of the string shows the content there decoded, while the original (as provided) contains encoded versions of those.\r\n\r\nThis is important because a number of uses for a URL require them to comply to with, [HTTP Headers](https://tools.ietf.org/html/rfc7230#section-3.2.4) for example.  The URI provided was valid as a header.  The URL returned does not.    This comes up when say doing a redirect to it.\r\n\r\nThis can be avoided by using a String to represent the URL location, but that's generally considered a bad practice and anti-pattern.  \r\n\r\nIt would be amazing if we could indicate somehow that while the decoding that gets performed automatically is to be used in such a way that any encoding provided should not be undone.\r\n\r\nI'm thinking a constructor parameter or property.","Url":"https://github.com/dotnet/standard/issues/1678","RelatedDescription":"Open issue \"System.Uri decoding automatically and incorrectly\" (#1678)"},{"Id":"547178727","IsPullRequest":false,"CreatedAt":"2020-01-09T00:24:57","Actor":"Chamberlain91","Number":"1677","RawContent":null,"Title":"Bug with \"is\" operator on int[] and uint[] via object type reference.","State":"open","Body":"Hello developers,\r\n\r\nI've discovered what I believe to be a bug. In the code below you can see I create two arrays, one of `int` and one of `uint` and assign them both to object. I then check the `is` operator for type comparison.\r\n```cs\r\n            object ai = new int[0];\r\n            object au = new uint[0];\r\n\r\n            Console.WriteLine(ai is uint[]);\r\n            Console.WriteLine(ai is int[]);\r\n            Console.WriteLine(au is uint[]);\r\n            Console.WriteLine(au is int[]);\r\n```\r\nThe output I get is four prints of true, which I would expect only two.\r\n\r\nThe strange thing is if I assign `ai` and `au` to their actual types instead of `object`, then the code works as expected.\r\n\r\nSorry if this should be in the runtime repo or somewhere else.","Url":"https://github.com/dotnet/standard/issues/1677","RelatedDescription":"Open issue \"Bug with \"is\" operator on int[] and uint[] via object type reference.\" (#1677)"},{"Id":"546869832","IsPullRequest":false,"CreatedAt":"2020-01-08T13:45:20","Actor":"sudheer876","Number":"1676","RawContent":null,"Title":"Severity Code Description Project File Line Suppression State Warning The primary reference \"Microsoft.Xrm.Sdk\" could not be resolved because it was built against the \".NETFramework,Version=v4.6.2\" framework.","State":"open","Body":"Severity Code Description Project File Line Suppression State\r\nWarning The primary reference \"Microsoft.Xrm.Sdk\" could not be resolved because it was built against the \".NETFramework,Version=v4.6.2\" framework. This is a higher version than the currently targeted framework \".NETFramework,Version=v4.5.2\".\tCRM\t\t\t\r\n","Url":"https://github.com/dotnet/standard/issues/1676","RelatedDescription":"Open issue \"Severity Code Description Project File Line Suppression State Warning The primary reference \"Microsoft.Xrm.Sdk\" could not be resolved because it was built against the \".NETFramework,Version=v4.6.2\" framework.\" (#1676)"},{"Id":"546426210","IsPullRequest":false,"CreatedAt":"2020-01-07T18:00:20","Actor":"sudheer876","Number":"1675","RawContent":null,"Title":"Please explain any one early binding and late binding with sample example code","State":"open","Body":"","Url":"https://github.com/dotnet/standard/issues/1675","RelatedDescription":"Open issue \"Please explain any one early binding and late binding with sample example code\" (#1675)"},{"Id":"546122602","IsPullRequest":false,"CreatedAt":"2020-01-07T12:32:41","Actor":"sudheer876","Number":"1674","RawContent":null,"Title":"which assembly we have to add for fault exception?","State":"closed","Body":"Severity\tCode\tDescription\tProject\tFile\tLine\tSuppression State\r\nError\tCS0246\tThe type or namespace name 'FaultException<>' could not be found (are you missing a using directive or an assembly reference?)","Url":"https://github.com/dotnet/standard/issues/1674","RelatedDescription":"Closed issue \"which assembly we have to add for fault exception?\" (#1674)"},{"Id":"545060077","IsPullRequest":true,"CreatedAt":"2020-01-03T16:21:05","Actor":"lserhii","Number":"1673","RawContent":null,"Title":"Fixed broken link. Close:  #1653","State":"open","Body":"Added missing dot to fix a broken link in docs/faq.md","Url":"https://github.com/dotnet/standard/pull/1673","RelatedDescription":"Open PR \"Fixed broken link. Close:  #1653\" (#1673)"},{"Id":"544232543","IsPullRequest":false,"CreatedAt":"2019-12-31T17:31:26","Actor":"usaguerrilla","Number":"1672","RawContent":null,"Title":"SerialDevice.InputStream.ReadAsync continues on wrong thread","State":"closed","Body":".NET Standard 2.1 (couldn't change that for some reason)\r\nWindows 10, version 1903, Build 18362\r\nx64\r\n\r\n```\r\nint REQUEST_LENGTH = 8;\r\nint RESPONSE_LENGTH = 7;\r\n\r\nbyte[] request = new byte[REQUEST_LENGTH];\r\nbyte[] response = new byte[RESPONSE_LENGTH];\r\n\r\nSerialDevice serialDevice = await SerialDevice.FromIdAsync(serialDeviceId);\r\n\r\nusing (CancellationTokenSource cancellationTokenSource = new CancellationTokenSource(TimeSpan.FromSeconds(1)))\r\n{\r\n   Console.WriteLine(\"A=\" + Thread.CurrentThread.ManagedThreadId);\r\n   Task<IBuffer> readTask = serialDevice.InputStream.ReadAsync(response.AsBuffer(), RESPONSE_LENGTH, InputStreamOptions.None)\r\n                                                    .AsTask(cancellationTokenSource.Token);\r\n   await serialDevice.OutputStream.WriteAsync(request.AsBuffer());\r\n   Console.WriteLine(\"B=\" + Thread.CurrentThread.ManagedThreadId);\r\n   await Task.WhenAll(readTask);\r\n   Console.WriteLine(\"C=\" + Thread.CurrentThread.ManagedThreadId);\r\n}\r\n```\r\n\r\nThis results in the following output:\r\n\r\n```\r\nA=12\r\nB=12\r\nC=8\r\n```\r\n\r\nI didn't ask for thread switch in any of the calls.\r\n\r\nAnother issues is that ReadAsync ignores ReadTimeout / WriteTimeout. Just hangs forever if UART device never replies back.","Url":"https://github.com/dotnet/standard/issues/1672","RelatedDescription":"Closed issue \"SerialDevice.InputStream.ReadAsync continues on wrong thread\" (#1672)"},{"Id":"542974619","IsPullRequest":false,"CreatedAt":"2019-12-27T19:58:14","Actor":"mbrautgithub","Number":"1671","RawContent":null,"Title":"Referring  Microsoft.AspNetCore.App from netstandard2.1","State":"open","Body":"Hi Team,\r\n\r\nI am currently upgrading from .netcoreapp2.1 to netcoreapp3.1 and new to .Net technology.\r\n\r\nAlso, I have projects in my solution which are currently on netstandard2.0 and using below package references.\r\n\r\n<ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Authentication\" Version=\"2.2.0\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Authentication.OAuth\" Version=\"2.2.0\" />\r\n</ItemGroup>\r\n\r\nThese references are become absolute since .netcoreapp3.1 and if I would want to continue using these I need to use  FrameworkReference Include=\"Microsoft.AspNetCore.App\"  \r\n\r\nHowever I am getting below error.\r\nNETSDK1073\tThe FrameworkReference 'Microsoft.AspNetCore.App' was not recognized\tC:\\Program Files\\dotnet\\sdk\\3.1.100\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Sdk.FrameworkReferenceResolution.targets\t283\t\t\r\n\r\nConfig file \r\n\r\nProject Sdk=\"Microsoft.NET.Sdk\"\r\n\r\n  PropertyGroup\r\n    TargetFrameworknetstandard2.1TargetFramework\r\n  PropertyGroup\r\n\r\n  ItemGroup\r\n   FrameworkReference Include=\"Microsoft.AspNetCore.App\" \r\n    PackageReference Include=\"Microsoft.Extensions.Caching.StackExchangeRedis\" Version=\"3.1.0\" \r\n  ItemGroup\r\n\r\n\r\nProjec\r\n\r\nPlease help me on the same\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/standard/issues/1671","RelatedDescription":"Open issue \"Referring  Microsoft.AspNetCore.App from netstandard2.1\" (#1671)"},{"Id":"542015240","IsPullRequest":false,"CreatedAt":"2019-12-24T06:48:19","Actor":"tanveerbadar","Number":"1670","RawContent":null,"Title":"Potentially Incorrect Terminology in .net Standard FAQ","State":"open","Body":"The [FAQ document ](https://github.com/dotnet/standard/blob/master/docs/faq.md#is-appdomain-part-of-net-standard)for .net standard mentions this:\r\n\r\n> Using #if, also called cross-compiling\r\n\r\nShouldn't it say \"conditional compilation\" instead?","Url":"https://github.com/dotnet/standard/issues/1670","RelatedDescription":"Open issue \"Potentially Incorrect Terminology in .net Standard FAQ\" (#1670)"},{"Id":"541368388","IsPullRequest":false,"CreatedAt":"2019-12-21T20:30:37","Actor":"Emdot","Number":"1669","RawContent":null,"Title":"T4 cannot find netstandard 2.1","State":"open","Body":"When a T4 compile-time template references a netstandard 2.1 assembly, if the template's code tries to instantiate a class from that assembly it generates an error:\r\n\r\n```\r\nRunning transformation: System.IO.FileNotFoundException: Could not load file or assembly 'netstandard, Version=2.1.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51' or one of its dependencies. The system cannot find the file specified.\r\nFile name: 'netstandard, Version=2.1.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51'\r\n   at Microsoft.VisualStudio.TextTemplatingDF0B46F7DFCCCF2CAD1FBB2E3A8D5FC6225E74132FDDBD12D44030F822D8B29A6DFFE0B2FED81F4BED62AEA63823EBB5C1182E33103987C1DA7368F9D1022F09.GeneratedTextTransformation.TransformText()\r\n   at System.Dynamic.UpdateDelegates.UpdateAndExecute1[T0,TRet](CallSite site, T0 arg0)\r\n   at Microsoft.VisualStudio.TextTemplating.TransformationRunner.PerformTransformation()\r\n```\r\n\r\nThis occurs even if the project containing the T4 template targets netstandard 2.1.\r\n\r\nTest case attached: just right-click TT.tt and select Run Custom Tool. The error message appears.\r\n\r\n[NetStandardT4.zip](https://github.com/dotnet/standard/files/3991786/NetStandardT4.zip)\r\n\r\nMicrosoft Visual Studio Community 2019, v 16.4.0; 64-bit PC; 64-bit Windows 10. I'm using the Devart Template Editor extension, v 1.0.11.0. I do not see this error when the dependency targets netstandard 2,0 instead.","Url":"https://github.com/dotnet/standard/issues/1669","RelatedDescription":"Open issue \"T4 cannot find netstandard 2.1\" (#1669)"},{"Id":"540785622","IsPullRequest":false,"CreatedAt":"2019-12-20T06:05:06","Actor":"Michael-Baumanns","Number":"1668","RawContent":null,"Title":"Runtime Standard - Core CLR / Core RT etc.","State":"open","Body":"Hello everybody,\r\n\r\nFirst of all I hope this is the right place for my question.\r\n\r\nIs there any specification about the expected types / methods who have to be implemented by a runtime implementation like core CLR or core RT? Do you have something like a runtime standard document?\r\n\r\nBest regards\r\n\r\nMichael","Url":"https://github.com/dotnet/standard/issues/1668","RelatedDescription":"Open issue \"Runtime Standard - Core CLR / Core RT etc.\" (#1668)"},{"Id":"538960639","IsPullRequest":false,"CreatedAt":"2019-12-17T10:01:53","Actor":"gulbanana","Number":"1667","RawContent":null,"Title":"Could we please get CallerArgumentExpressionAttribute in .NET Standard?","State":"open","Body":"It's not in ns2.1, so that's a missing feature from C# 8.","Url":"https://github.com/dotnet/standard/issues/1667","RelatedDescription":"Open issue \"Could we please get CallerArgumentExpressionAttribute in .NET Standard?\" (#1667)"},{"Id":"538783452","IsPullRequest":false,"CreatedAt":"2019-12-17T01:45:21","Actor":"pb-gs","Number":"1666","RawContent":null,"Title":"System.Net.PeerToPeer in .NET Standard","State":"open","Body":"Hey there,\r\n\r\nJust wondering if it is likely that .NET Standard will include classes from [`System.Net.PeerToPeer`](https://docs.microsoft.com/en-us/dotnet/api/system.net.peertopeer?view=netframework-4.8) (e.g. [`PeerNameResolver`](https://docs.microsoft.com/en-us/dotnet/api/system.net.peertopeer.peernameresolver?view=netframework-4.8)) or otherwise have peer name resolution protocol support?\r\n\r\nThank you.","Url":"https://github.com/dotnet/standard/issues/1666","RelatedDescription":"Open issue \"System.Net.PeerToPeer in .NET Standard\" (#1666)"},{"Id":"537929488","IsPullRequest":false,"CreatedAt":"2019-12-14T15:46:28","Actor":"shcummin","Number":"1665","RawContent":null,"Title":"<PackageReference> System.* when targeting NET Framework leads to ambiguity","State":"open","Body":"Related to Framework compat\r\n\r\nIn a project targeting 4.6, references:\r\n\r\n```\r\n    <PackageReference Include=\"System.ComponentModel.Annotations\" />\r\n    <PackageReference Include=\"System.ServiceModel.Primitives\" />\r\n```\r\n\r\nAnd:\r\n\r\n```\r\n    <Reference Include=\"System.ComponentModel.DataAnnotations\"  />\r\n    <Reference Include=\"System.ServiceModel\" />\r\n```\r\n\r\nAppear to be synonymous (because builds pass) when in reality:\r\n\r\n`<PackageReference>` is restoring packages, rewriting generated nupkg dependencies and introducing version complexity and binplacing new dlls (or facade dlls?)\r\n\r\n`<Reference>`, comparatively, is unambiguously depending on the Framework and not changing any nuget collateral.\r\n\r\nAs there does not appear to be a particularly compelling reason to use `<PackageReference>` in this way when targeting .NET Framework 4.5/4.6, and even doing this opens up compat issues such as Issue #1179 , then `<PackageReference>` for System.* packages net45/net46 should cause a build error in the msbuild/vs toolchain or cause a runtime error. [or there should be a doc describing why this is a bad idea]\r\n\r\n\r\n**Edit:** Additionally there is loads of confusion online:\r\n\r\nhttps://weblog.west-wind.com/posts/2019/Feb/19/Using-NET-Standard-with-Full-Framework-NET\r\n\r\n> As a side note a number of people pointed out to me that Paket - which is an alternate package manager for NuGet packages - considers versions of .NET 4.7.1 and older incompatible with .NET Standard so you can't actually install .NET Standard packages for those versions by default.\r\n> \r\n> Makes sense - **Microsoft has acknowledged that using .NET Standard on anything prior to 4.7.1 is not a good idea** and I would add using 4.7.1 is not optimal either, but alas it does work with some of the messy hackery described above.\r\n\r\nWhere did Microsoft acknowledge this in an official capacity?\r\n\r\nAnd, if this is the case, why does System.Servicemodel.Primitives.4.4.0.nuspec look like this:\r\n\r\n```\r\n      <group targetFramework=\".NETFramework4.5\" />\r\n      <group targetFramework=\".NETFramework4.6\">\r\n        <dependency id=\"NETStandard.Library\" version=\"1.6.1\" />\r\n      </group>\r\n      <group targetFramework=\".NETFramework4.6.1\" />\r\n\r\n```\r\n\r\nwhy does System.Servicemodel.Primitives.4.7.0.nuspec look like this:\r\n\r\n```\r\n      <group targetFramework=\".NETFramework4.5\" />\r\n      <group targetFramework=\".NETFramework4.6\">\r\n        <dependency id=\"NETStandard.Library\" version=\"2.0.3\" exclude=\"Build,Analyzers\" />\r\n      </group>\r\n      <group targetFramework=\".NETFramework4.6.1\" />\r\n```\r\n\r\nWhat is this package going to do on 4.5, 4.6, 4.6.1, 4.6.2?\r\n\r\nAnd the lib folders:\r\n\r\n![image](https://user-images.githubusercontent.com/28113572/70868825-433eaf80-1f39-11ea-9f5f-79d8de22bd97.png)\r\n\r\nWhy is the binplace different across 4.5, 4.6, 4.6.1, 4.6.2?\r\n\r\nBehavior seems to be: \r\n- 4.5 explicit discard/no-op\r\n- 4.6 binplace 1 dll\r\n- 4.6.1 binplace 2 dlls??\r\n- 4.6.2 - not called out, so .netstandard20 path is followed, (??) then for version S.SM.Primitives 4.4 there's 1 dll, and in S.SM.Primitive 4.7 there are 2 dlls.\r\n\r\nGiven this behavior, why would I want\r\n\r\n```\r\n    <PackageReference Include=\"System.ServiceModel.Primitives\" />\r\n```\r\n\r\nanywhere near a .NET 4.6.x project?\r\n\r\nThere seems to be some discussion of this sort of thing being a nuget restore warning here: https://github.com/NuGet/Home/issues/8376  however there seems to be also a possibility that the nuget authors forcefully break people targeting 4.5 thru to 4.6.2 which would be preferable to difficult to define behavior.\r\n","Url":"https://github.com/dotnet/standard/issues/1665","RelatedDescription":"Open issue \"<PackageReference> System.* when targeting NET Framework leads to ambiguity\" (#1665)"},{"Id":"536390167","IsPullRequest":false,"CreatedAt":"2019-12-11T15:41:06","Actor":"Jmales","Number":"1663","RawContent":null,"Title":"Can I import net472 project from a .netstandard project? Also, should I?","State":"closed","Body":"Imagine the following scenario:\r\n\r\nA------------------->B--------------------->C\r\n(**Net472**)----------->(**NetStandard**)--------->(**Net472**)\r\n\r\nMain project A in **NET framework,** referencing a **.Net Standard** project B which references a **NET Framework 472** project.\r\n\r\nIn theory, as **Net Standard** is a subset of **NET framework**, it shouldn't make sense that I can reference the whole from within a subset right? However, if I create a simple App with that structure I'm able to build and run it without errors or warnings.\r\n\r\nBUT, if I try this in other applications, mainly a big one that I'm porting to .NET Standard, I get warning in the **.NET Standard** projects referencing **.NET 472**. When is this warning raised after all?\r\n\r\n`C.csproj was resolved using '.NETFramework,Version=v4.7.2' instead of the project target framework '.NETStandard,Version=v2.0'. This project may not be fully compatible with your project.`\r\n\r\nAnd, can I or can't I reference a **NET472** project from within a **.NET Standard 2.0/2.1**?\r\n\r\n\r\n","Url":"https://github.com/dotnet/standard/issues/1663","RelatedDescription":"Closed issue \"Can I import net472 project from a .netstandard project? Also, should I?\" (#1663)"},{"Id":"535997897","IsPullRequest":false,"CreatedAt":"2019-12-10T21:14:54","Actor":"hrumhurum","Number":"1662","RawContent":null,"Title":".NET Standard 2.1 mscorlib misses type forwarder for System.Reflection.Emit.ILGenerator","State":"open","Body":".NET Standard 2.1 introduced availability of `System.Reflection.Emit.ILGenerator` class: https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.ilgenerator?view=netstandard-2.1\r\n\r\nBut `mscorlib` assembly located at `C:\\Program Files\\dotnet\\packs\\NETStandard.Library.Ref\\2.1.0\\ref\\netstandard2.1\\mscorlib.dll` misses a corresponding type forwarder for `System.Reflection.Emit.ILGenerator`.\r\n\r\nThat omission causes a hole in type system integrity.","Url":"https://github.com/dotnet/standard/issues/1662","RelatedDescription":"Open issue \".NET Standard 2.1 mscorlib misses type forwarder for System.Reflection.Emit.ILGenerator\" (#1662)"},{"Id":"534875855","IsPullRequest":false,"CreatedAt":"2019-12-09T11:45:47","Actor":"IanKemp","Number":"1661","RawContent":null,"Title":"2.1 release timeline?","State":"open","Body":"It's been more than 2 years since Standard 2.0. We're already on Core 3.1 that's LTS, when can we expect the next version of Standard? Or is Standard dead and we should just use Core for everything going forward?","Url":"https://github.com/dotnet/standard/issues/1661","RelatedDescription":"Open issue \"2.1 release timeline?\" (#1661)"},{"Id":"529638047","IsPullRequest":true,"CreatedAt":"2019-11-28T01:14:42","Actor":"dotnet-maestro[bot]","Number":"1660","RawContent":null,"Title":"[release/3.0] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:29f70c24-3711-40be-9246-08d6c732a216)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20191127.5\r\n- **Date Produced**: 11/27/2019 11:33 PM\r\n- **Commit**: 99c6b59a8afff97fe891341b39abe985f1d3c565\r\n- **Branch**: refs/heads/release/3.x\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19577.5\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19577.5\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19577.5\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19577.5\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19577.5\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19577.5\r\n\r\n[marker]: <> (End:29f70c24-3711-40be-9246-08d6c732a216)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1660","RelatedDescription":"Closed or merged PR \"[release/3.0] Update dependencies from dotnet/arcade\" (#1660)"},{"Id":"529573719","IsPullRequest":false,"CreatedAt":"2019-11-27T21:33:26","Actor":"timdoke","Number":"1659","RawContent":null,"Title":"Generic class operators derived from interface seems broken","State":"closed","Body":"Let's say I have a CaseInsensitiveConcurrentDictionary.  The intention of it is to be interchangeable with regular Dictionary implementations -- where, we always use the interface IDictionary<T, T> to interact with either.  Both Dictionary and ConcurrentDictionary implement IDictionary interface members.\r\n\r\nThe class looks like this:\r\n\r\n\r\n    public class CaseInsensitiveDictionary<TValue>\r\n        : ConcurrentDictionary<string, TValue>\r\n    {\r\n        public CaseInsensitiveDictionary()\r\n            : base(StringComparer.InvariantCultureIgnoreCase)\r\n        {\r\n        }\r\n\r\n        private CaseInsensitiveDictionary(IDictionary<string, TValue> attributes)\r\n            : this()\r\n        {\r\n            AddRange(attributes);\r\n        }\r\n\r\n        public void Add(string key, TValue value)\r\n        {\r\n            this.TryAdd(key, value);\r\n        }\r\n\r\n        public void AddRange(IDictionary<string, TValue> entries)\r\n        {\r\n            foreach (var item in entries)\r\n            {\r\n                this.TryAdd(item.Key, item.Value);\r\n            }\r\n        }\r\n\r\n        public static CaseInsensitiveDictionary<TValue> Create(IDictionary<string, TValue> attributes = null)\r\n        {\r\n            if (attributes == null)\r\n            {\r\n                return new CaseInsensitiveDictionary<TValue>();\r\n            }\r\n            return new CaseInsensitiveDictionary<TValue>(attributes);\r\n        }\r\n\r\n        public static implicit operator Dictionary<string, TValue>(CaseInsensitiveDictionary<TValue> data)\r\n        {\r\n            return new Dictionary<string, TValue>(data);\r\n        }\r\n\r\n        public static implicit operator CaseInsensitiveDictionary<TValue>(Dictionary<string, TValue> data)\r\n        {\r\n            return Create(data);\r\n        }\r\n\r\n    }\r\n\r\n\r\n`  \r\n\r\n\r\nLet's say then that we are trying to implicitly convert the ConcurrentDictionary to and from a dictionary.  To test, I wrote these methods:\r\n\r\n\r\n\r\n        public void FromDictionaryToCaseInsensitiveDictionaryTest()\r\n        {\r\n\r\n            Dictionary<string, string> dc2 = new Dictionary<string, string>();\r\n            dc2.Add(\"test1\", \"test1 value\");\r\n\r\n            var dc3 = (CaseInsensitiveDictionary<string>)dc2;\r\n            Console.WriteLine(\"FromDictionaryToCaseInsensitiveDictionaryTest success\");\r\n        }\r\n\r\n        public void FromIDictionaryToCaseInsensitiveDictionaryTest()\r\n        {\r\n            IDictionary<string, string> dc2 = new Dictionary<string, string>();\r\n            dc2.Add(\"test1\", \"test1 value\");\r\n\r\n            var dc3 = (CaseInsensitiveDictionary<string>)dc2;\r\n\r\n            Console.WriteLine(\"FromIDictionaryToCaseInsensitiveDictionaryTest success\");\r\n        }\r\n\r\n\r\n        public void FromCaseInsensitiveDictionaryToDictionaryTest()\r\n        {\r\n\r\n            var dc2 = new CaseInsensitiveDictionary<string>();\r\n            dc2.Add(\"test1\", \"test1 value\");\r\n\r\n            var dc3 = (Dictionary<string, string>)dc2;\r\n\r\n            Console.WriteLine(\"FromCaseInsensitiveDictionaryToDictionaryTest success\");\r\n\r\n        }\r\n\r\n\r\n\r\nThe first (FromDictionaryToCaseInsensitiveDictionaryTest) and third methods (FromCaseInsensitiveDictionaryToDictionaryTest) work fine and correctly use the operators.\r\n\r\nThe second one fails with this exception: System.InvalidCastException: 'Unable to cast object of type 'System.Collections.Generic.Dictionary`2[System.String,System.String]' to type 'OpenToken.CaseInsensitiveDictionary`1[System.String]'.'\r\n.  In my opinion, FromIDictionaryToCaseInsensitiveDictionaryTest should work because the type is CaseInsensitiveDictionary and implements IDictionary.  If I do NOT have the first conversion operator, the first test method fails with this exact same error message, \r\n\r\nWith this evidence, it seems to me that something is missing when the runtime is looking for the appropriate operator.  FromIDictionaryToCaseInsensitiveDictionaryTest should work either from the Dictionary operator or automatically work because it implements the IDictionary interface.  (I cannot create an operator for IDictionary conversion because that is illegal).  \r\n\r\nPlease let me know if this is expected behavior and if there is some workaround for it.  This issue seems to be present in all versions of C#.\r\n\r\nThanks!\r\n\r\n","Url":"https://github.com/dotnet/standard/issues/1659","RelatedDescription":"Closed issue \"Generic class operators derived from interface seems broken\" (#1659)"},{"Id":"526765953","IsPullRequest":false,"CreatedAt":"2019-11-25T02:23:45","Actor":"arizvisa","Number":"1657","RawContent":null,"Title":"packages.microsoft.com: signature check for netstandard-targeting-pack-2.1.0 failed","State":"closed","Body":"Hey guys, the signature check for this package seems to be failing. Not sure what that actually means, but here's the checksum as of 2019/11/21 12:23 (CST).\r\n\r\n```\r\n# fetch https://packages.microsoft.com/fedora/30/prod/netstandard-targeting-pack-2.1.0-x64.rpm\r\nnetstandard-targeting-pack-2.1.0-x64.rpm 100% 2201944 2201944\r\n# openssl dgst -sha256 netstandard-targeting-pack-2.1.0-x64.rpm \r\nSHA256(netstandard-targeting-pack-2.1.0-x64.rpm)= 45e199caf1151a750d11d9c5c7669d6e23d8dbb33da54d1d90bde55745996480\r\n```\r\n\r\nThen with dnf actually complaining about it.\r\n```\r\n# dnf repository-packages packages-microsoft-com-prod install netstandard-targeting-pack-2.1                                                                                 \r\nenabling fedora-modular-debuginfo repository                                                                  \r\nenabling updates-modular-debuginfo repository       \r\nenabling updates-debuginfo repository                                                                         \r\nenabling fedora-debuginfo repository\r\nenabling rpmfusion-free-updates-debuginfo repository\r\nenabling rpmfusion-free-debuginfo repository                                                                  \r\nLast metadata expiration check: 0:13:30 ago on Thu 21 Nov 2019 12:03:15 PM CST.\r\nDependencies resolved.     \r\n==============================================================================================================\r\n Package                               Architecture  Version         Repository                          Size \r\n==============================================================================================================\r\nInstalling:\r\n netstandard-targeting-pack-2.1        x86_64        2.1.0-1         packages-microsoft-com-prod        2.1 M\r\n\r\nTransaction Summary\r\n==============================================================================================================\r\nInstall  1 Package\r\n\r\nTotal download size: 2.1 M\r\nInstalled size: 2.1 M\r\nIs this ok [y/N]: y\r\nDownloading Packages:\r\n[MIRROR] netstandard-targeting-pack-2.1.0-x64.rpm: Downloading successful, but checksum doesn't match. Calculated: 45e199caf1151a750d11d9c5c7669d6e23d8dbb33da54d1d90bde55745996480(sha256)  Expected: fa194a8c12913dcec85c8d24bfc91686a7b93128b4c05346df16e2c641e2ba41(sha256) \r\n[MIRROR] netstandard-targeting-pack-2.1.0-x64.rpm: Downloading successful, but checksum doesn't match. Calculated: 45e199caf1151a750d11d9c5c7669d6e23d8dbb33da54d1d90bde55745996480(sha256)  Expected: fa194a8c12913dcec85c8d24bfc91686a7b93128b4c05346df16e2c641e2ba41(sha256) \r\n[MIRROR] netstandard-targeting-pack-2.1.0-x64.rpm: Downloading successful, but checksum doesn't match. Calculated: 45e199caf1151a750d11d9c5c7669d6e23d8dbb33da54d1d90bde55745996480(sha256)  Expected: fa194a8c12913dcec85c8d24bfc91686a7b93128b4c05346df16e2c641e2ba41(sha256) \r\n[MIRROR] netstandard-targeting-pack-2.1.0-x64.rpm: Downloading successful, but checksum doesn't match. Calculated: 45e199caf1151a750d11d9c5c7669d6e23d8dbb33da54d1d90bde55745996480(sha256)  Expected: fa194a8c12913dcec85c8d24bfc91686a7b93128b4c05346df16e2c641e2ba41(sha256) \r\n[FAILED] netstandard-targeting-pack-2.1.0-x64.rpm: No more mirrors to try - All mirrors were already tried without success\r\n```\r\n\r\nHopefully this doesn't entail the need for ir. Heh.","Url":"https://github.com/dotnet/standard/issues/1657","RelatedDescription":"Closed issue \"packages.microsoft.com: signature check for netstandard-targeting-pack-2.1.0 failed\" (#1657)"},{"Id":"527469491","IsPullRequest":true,"CreatedAt":"2019-11-23T01:19:55","Actor":"dotnet-maestro[bot]","Number":"1658","RawContent":null,"Title":"[release/3.0] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:29f70c24-3711-40be-9246-08d6c732a216)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20191122.3\r\n- **Date Produced**: 11/22/2019 7:14 PM\r\n- **Commit**: 0e0d227c57e69c03427d6e668716d62cf4ceb36e\r\n- **Branch**: refs/heads/release/3.x\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19572.3\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19572.3\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19572.3\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19572.3\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19572.3\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19572.3\r\n\r\n[marker]: <> (End:29f70c24-3711-40be-9246-08d6c732a216)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1658","RelatedDescription":"Closed or merged PR \"[release/3.0] Update dependencies from dotnet/arcade\" (#1658)"},{"Id":"526119676","IsPullRequest":true,"CreatedAt":"2019-11-20T20:02:50","Actor":"dotnet-maestro[bot]","Number":"1656","RawContent":null,"Title":"[release/3.0] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:29f70c24-3711-40be-9246-08d6c732a216)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20191119.2\r\n- **Date Produced**: 11/19/2019 6:14 PM\r\n- **Commit**: e34d933e18ba1cd393bbafcb6018e0f858d3e89e\r\n- **Branch**: refs/heads/release/3.x\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19569.2\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19569.2\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19569.2\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19569.2\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19569.2\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19569.2\r\n\r\n[marker]: <> (End:29f70c24-3711-40be-9246-08d6c732a216)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1656","RelatedDescription":"Closed or merged PR \"[release/3.0] Update dependencies from dotnet/arcade\" (#1656)"},{"Id":"523456559","IsPullRequest":false,"CreatedAt":"2019-11-19T23:58:30","Actor":"SetTrend","Number":"1655","RawContent":null,"Title":"Change .NET Framework in version table from 4.6.1 to 4.7.1","State":"closed","Body":"Currently, the [.NET Standard version table](/dotnet/standard/blob/master/docs/versions.md) shows `.NET Framework 4.6.1` to be compatible with `.NET Standard >= 1.5`.\r\n\r\nHowever, a footnote clarifies that `.NET Framework 4.6.1` is **_not_** fully compatible with `.NET Standard >= 1.5`.\r\n\r\nMoreover, many issues on [StackOverflow.com](https://stackoverflow.com/questions/49925484/you-must-add-a-reference-to-assembly-netstandard-version-2-0-0-0) and [GitHub](542) give evidence that `.NET Framework 4.6.1` is **_not_** fully compatible with `.NET Standard >= 1.5`.\r\n\r\nWouldn't it be wise then to update above version table to provide **_true_** information than just spout some wannabe information?","Url":"https://github.com/dotnet/standard/issues/1655","RelatedDescription":"Closed issue \"Change .NET Framework in version table from 4.6.1 to 4.7.1\" (#1655)"},{"Id":"523175041","IsPullRequest":false,"CreatedAt":"2019-11-15T00:02:51","Actor":"replaysMike","Number":"1654","RawContent":null,"Title":"HttpClient error 'Could not create SSL/TLS secure channel' when not Administrator","State":"open","Body":"I'm trying to use certificate based authentication using HttpClient in .Net Standard 2.0. However, I've noticed TLS negotiation doesn't succeed unless running the application in Administrator mode.\r\n\r\n```\r\nvar requestMessage = new HttpRequestMessage() {\r\n    RequestUri = new Uri(new Uri(_configuration.Endpoint), \"someendpoint\"),\r\n    Method = HttpMethod.Get\r\n};\r\nvar handler = new HttpClientHandler {\r\n    ClientCertificateOptions = ClientCertificateOption.Manual,\r\n    SslProtocols = SslProtocols.Tls12,\r\n};          \r\nhandler.ClientCertificates.Add(certificate);\r\nhandler.CheckCertificateRevocationList = false;\r\n// this is required to get around untrusted self-signed certs\r\nhandler.ServerCertificateCustomValidationCallback = (httpRequestMessage, cert, cetChain, policyErrors) => true;\r\nvar client = new HttpClient(handler);\r\nrequestMessage.Headers.Add(\"X-ARR-ClientCert\", certificate.GetRawCertDataString());\r\nvar response = await client.SendAsync(requestMessage);\r\n```\r\nThe client certificate is valid and installed in the local computer `My` store.\r\n\r\nWithout Administrator privileges a generic error is thrown: `The request was aborted: Could not create SSL/TLS secure channel` when not Administrator.\r\n\r\nAnyone have a clue as to why?","Url":"https://github.com/dotnet/standard/issues/1654","RelatedDescription":"Open issue \"HttpClient error 'Could not create SSL/TLS secure channel' when not Administrator\" (#1654)"},{"Id":"522886300","IsPullRequest":false,"CreatedAt":"2019-11-14T14:14:42","Actor":"tndata","Number":"1653","RawContent":null,"Title":"Broken link","State":"open","Body":"\r\nI found a broken link in this sentence:\r\n\r\nThe plan for handling .NET Framework 4.6.1 and .NET Standard 2.0 is outlined in the **spec**.\r\n\r\nOn this page \r\nhttps://github.com/dotnet/standard/blob/master/docs/faq.md\r\n","Url":"https://github.com/dotnet/standard/issues/1653","RelatedDescription":"Open issue \"Broken link\" (#1653)"},{"Id":"522854157","IsPullRequest":true,"CreatedAt":"2019-11-14T13:46:23","Actor":"dotnet-maestro[bot]","Number":"1652","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20191113.6\r\n- **Date Produced**: 11/14/2019 7:13 AM\r\n- **Commit**: 5cee7c97d602f294e27c582d4dab81ec388f1d7b\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha.1.19563.6\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha.1.19563.6\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha.1.19563.6\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1652","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1652)"},{"Id":"522220691","IsPullRequest":true,"CreatedAt":"2019-11-13T13:59:11","Actor":"dotnet-maestro[bot]","Number":"1651","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20191112.8\r\n- **Date Produced**: 11/13/2019 9:07 AM\r\n- **Commit**: a528006b4536e5b73227285b57d2a56116532506\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha.1.19562.8\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha.1.19562.8\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha.1.19562.8\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1651","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1651)"}],"ResultType":"GitHubIssue"},"CoreFx-Issues":{"Issues":[{"Id":"549865580","IsPullRequest":true,"CreatedAt":"2020-01-15T00:37:58","Actor":"Anipik","Number":"42821","RawContent":null,"Title":"update branding of 2.1.16","State":"closed","Body":"","Url":"https://github.com/dotnet/corefx/pull/42821","RelatedDescription":"Closed or merged PR \"update branding of 2.1.16\" (#42821)"},{"Id":"549887977","IsPullRequest":true,"CreatedAt":"2020-01-15T00:34:55","Actor":"dotnet-maestro-bot","Number":"42822","RawContent":null,"Title":"Update CoreClr, CoreFx, CoreSetup to servicing-28325-011, servicing-28327-021, stable, respectively (release/2.1)","State":"closed","Body":"/cc @dotnet/maestro-reviewers-core","Url":"https://github.com/dotnet/corefx/pull/42822","RelatedDescription":"Closed or merged PR \"Update CoreClr, CoreFx, CoreSetup to servicing-28325-011, servicing-28327-021, stable, respectively (release/2.1)\" (#42822)"},{"Id":"549897137","IsPullRequest":true,"CreatedAt":"2020-01-15T00:31:39","Actor":"Anipik","Number":"42824","RawContent":null,"Title":"updating assembly version and package version for system.data.sqlclient","State":"open","Body":"There is no need to update package index here because we update that for 2.x branches after we have published the package. Because we fix that functionality in 3.1\r\n","Url":"https://github.com/dotnet/corefx/pull/42824","RelatedDescription":"Open PR \"updating assembly version and package version for system.data.sqlclient\" (#42824)"},{"Id":"549892106","IsPullRequest":true,"CreatedAt":"2020-01-15T00:14:41","Actor":"Anipik","Number":"42823","RawContent":null,"Title":"updating assembly versions, packageversions and publishing the packages","State":"open","Body":"We have serviced 6 commits in 3.1.2\r\n3  -> system.data.sqlclient\r\n1 -> system.text.json\r\n1 -> Reflection.MetadataLoadContext (eric already made that change for this change)\r\n1 -> changes system.Native (part of shared framework)","Url":"https://github.com/dotnet/corefx/pull/42823","RelatedDescription":"Open PR \"updating assembly versions, packageversions and publishing the packages\" (#42823)"},{"Id":"549772423","IsPullRequest":true,"CreatedAt":"2020-01-14T20:37:06","Actor":"dotnet-maestro-bot","Number":"42820","RawContent":null,"Title":"[automated] Merge branch 'release/3.0' => 'release/3.1'","State":"closed","Body":"I detected changes in the release/3.0 branch which have not been merged yet to release/3.1. I'm a robot and am configured to help you automatically keep release/3.1 up to date, so I've opened this PR.\r\n\r\nThis PR merges commits made on release/3.0 by the following committers:\n\n* @Anipik\n* @dotnet-maestro[bot]\n* @mmitche\r\n\r\n## Instructions for merging from UI\r\n\r\nThis PR will not be auto-merged. When pull request checks pass, complete this PR by creating a merge commit, *not* a squash or rebase commit.\r\n\r\n<img alt=\"merge button instructions\" src=\"https://i.imgur.com/GepcNJV.png\" width=\"300\" />\r\n\r\nIf this repo does not allow creating merge commits from the GitHub UI, use command line instructions.\r\n\r\n## Instructions for merging via command line\r\n\r\nRun these commands to merge this pull request from the command line.\r\n\r\n``` sh\r\ngit fetch\r\ngit checkout release/3.0\r\ngit pull --ff-only\r\ngit checkout release/3.1\r\ngit pull --ff-only\r\ngit merge --no-ff release/3.0\r\n\r\n# If there are merge conflicts, resolve them and then run git merge --continue to complete the merge\r\n# Pushing the changes to the PR branch will re-trigger PR validation.\r\ngit push https://github.com/dotnet-maestro-bot/corefx HEAD:merge/release/3.0-to-release/3.1\r\n```\r\n\r\n<details>\r\n<summary>or if you are using SSH</summary>\r\n\r\n```\r\ngit push git@github.com:dotnet-maestro-bot/corefx HEAD:merge/release/3.0-to-release/3.1\r\n```\r\n\r\n</details>\r\n\r\n\r\nAfter PR checks are complete push the branch\r\n```\r\ngit push\r\n```\r\n\r\n## Instructions for resolving conflicts\r\n\r\n:warning: If there are merge conflicts, you will need to resolve them manually before merging. You can do this [using GitHub][resolve-github] or using the [command line][resolve-cli].\r\n\r\n[resolve-github]: https://help.github.com/articles/resolving-a-merge-conflict-on-github/\r\n[resolve-cli]: https://help.github.com/articles/resolving-a-merge-conflict-using-the-command-line/\r\n\r\n## Instructions for updating this pull request\r\n\r\nContributors to this repo have permission update this pull request by pushing to the branch 'merge/release/3.0-to-release/3.1'. This can be done to resolve conflicts or make other changes to this pull request before it is merged.\r\n\r\n```\r\ngit checkout -b merge/release/3.0-to-release/3.1 release/3.1\r\ngit pull https://github.com/dotnet-maestro-bot/corefx merge/release/3.0-to-release/3.1\r\n(make changes)\r\ngit commit -m \"Updated PR with my changes\"\r\ngit push https://github.com/dotnet-maestro-bot/corefx HEAD:merge/release/3.0-to-release/3.1\r\n```\r\n\r\n<details>\r\n    <summary>or if you are using SSH</summary>\r\n\r\n```\r\ngit checkout -b merge/release/3.0-to-release/3.1 release/3.1\r\ngit pull git@github.com:dotnet-maestro-bot/corefx merge/release/3.0-to-release/3.1\r\n(make changes)\r\ngit commit -m \"Updated PR with my changes\"\r\ngit push git@github.com:dotnet-maestro-bot/corefx HEAD:merge/release/3.0-to-release/3.1\r\n```\r\n\r\n</details>\r\n\r\nContact .NET Core Engineering if you have questions or issues.\r\nAlso, if this PR was generated incorrectly, help us fix it. See https://github.com/dotnet/arcade/blob/master/scripts/GitHubMergeBranches.ps1.\r\n","Url":"https://github.com/dotnet/corefx/pull/42820","RelatedDescription":"Closed or merged PR \"[automated] Merge branch 'release/3.0' => 'release/3.1'\" (#42820)"},{"Id":"549734204","IsPullRequest":true,"CreatedAt":"2020-01-14T19:28:33","Actor":"Anipik","Number":"42818","RawContent":null,"Title":"update branding to 3.0.3","State":"closed","Body":"","Url":"https://github.com/dotnet/corefx/pull/42818","RelatedDescription":"Closed or merged PR \"update branding to 3.0.3\" (#42818)"},{"Id":"549770095","IsPullRequest":false,"CreatedAt":"2020-01-14T19:27:37","Actor":"lorranpalmeira","Number":"42819","RawContent":null,"Title":"System.Text.Json disallows string literals surrounded by single quotes","State":"open","Body":"´´´\r\nvar objectExpeted = @\"{\r\n              'cep': '01001-000',\r\n              'logradouro': 'Praça da Sé',\r\n              'complemento': 'lado ímpar',\r\n              'bairro': 'Sé',\r\n              'localidade': 'São Paulo',\r\n              'uf': 'SP',\r\n              'unidade': '',\r\n              'ibge': '3550308',\r\n              'gia': '1004'\r\n            }\";\r\n\r\n //var expected = JsonSerializer.Deserialize<Cep>(objectExpeted);\r\n    var expected = JsonConvert.DeserializeObject<Cep>(objectExpeted);\r\n´´´\r\n\r\n\r\nIt has an exception when I try Deserialize in JsonSerializer.In NewtonSoft works perfectly.\r\n\r\n![image](https://user-images.githubusercontent.com/18705060/72375374-b9763380-36ea-11ea-8aab-f8892c3f9a33.png)\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/corefx/issues/42819","RelatedDescription":"Open issue \"System.Text.Json disallows string literals surrounded by single quotes\" (#42819)"},{"Id":"545887603","IsPullRequest":true,"CreatedAt":"2020-01-14T19:26:39","Actor":"wfurt","Number":"42800","RawContent":null,"Title":"3.1: make sure we have big enough buffer to prevent endless spin while dumping route table on OSX","State":"closed","Body":"**Description**\r\nThis is port of  https://github.com/dotnet/runtime/pull/591 to address `dotnet core 3 on macOS Catalina: NetworkInterface causes high CPU` #42634. Existing code assumes that when provided buffer is too small, `sysctl()` will update provided length. However that is happening only when NULL is passed in and we will en dup in endless spin trying to re-allocate to same size. \r\n\r\n**Impact**\r\nThis is race condition impacting OSX only. However, when it happens, we spin in native PAL code and there is no recovery or workaround. \r\n\r\n**Regression?**\r\n\r\nNo.\r\n\r\n**Risk**\r\n\r\nSmall. Fix is in OSX pal code and does not impact other platforms. Fix was verified by impacted customer. \r\n\r\n\r\nfixes  #42634\r\n","Url":"https://github.com/dotnet/corefx/pull/42800","RelatedDescription":"Closed or merged PR \"3.1: make sure we have big enough buffer to prevent endless spin while dumping route table on OSX\" (#42800)"},{"Id":"546538978","IsPullRequest":true,"CreatedAt":"2020-01-14T19:22:39","Actor":"Anipik","Number":"42803","RawContent":null,"Title":"update branding to 3.1.2","State":"closed","Body":"No packages were published in 3.1.1 so packages.builds is already cleared\r\nNeeds to merge after we release 3.1.1","Url":"https://github.com/dotnet/corefx/pull/42803","RelatedDescription":"Closed or merged PR \"update branding to 3.1.2\" (#42803)"},{"Id":"547759227","IsPullRequest":false,"CreatedAt":"2020-01-14T17:51:07","Actor":"assyadh","Number":"42811","RawContent":null,"Title":"Path issues when running corefx tests for .NET Core 3.1 tag, what is RunTests.sh?","State":"closed","Body":"Hi,\r\n\r\nI am trying to run the tests for corefx using the v3.1.0 tag.\r\n\r\nI have my corefx build output in ```/build/corefx/artifacts/bin```\r\n\r\nWhen I try to run the following: \r\n\r\n``` ./eng/run-test.sh --configurationGroup Release```\r\n\r\nI get the following result:\r\n```\r\nNothing to test in Common.Tests\r\nNothing to test in Invariant.Tests\r\nNothing to test in Microsoft.CSharp.Tests\r\nNothing to test in Microsoft.Bcl.AsyncInterfaces.Tests\r\nNothing to test in Microsoft.VisualBasic.Core.Tests\r\nNothing to test in Microsoft.Win32.Primitives.Tests\r\nNothing to test in System.Buffers.Tests\r\nNothing to test in System.AppContext.Tests\r\nNothing to test in Microsoft.XmlSerializer.Generator.Tests\r\nNothing to test in System.CodeDom.Tests\r\nNothing to test in System.Collections.Concurrent.Tests\r\nNothing to test in System.Collections.NonGeneric.Tests\r\nNothing to test in System.Collections.Specialized.Tests\r\nNothing to test in System.Collections.Immutable.Tests\r\nNothing to test in System.Collections.Tests\r\nNothing to test in System.ComponentModel.Annotations.Tests\r\nNothing to test in System.ComponentModel.Composition.Registration.Tests\r\nNothing to test in System.ComponentModel.Composition.Tests\r\nNothing to test in System.ComponentModel.EventBasedAsync.Tests\r\nNothing to test in System.ComponentModel.Primitives.Tests\r\nNothing to test in System.ComponentModel.Tests\r\n...\r\n```\r\n\r\nWhich leads me to believe there is a path issue.\r\n\r\nEffectively, my *.Tests folder contain a ```netcoreapp-Release``` folder with no mention of an OS or Arch as required in the run-test.sh script https://github.com/dotnet/runtime/blob/4f9ae42d861fcb4be2fcd5d3d55d5f227d30e723/eng/run-test.sh#L201\r\n\r\n\r\n```\r\nls artifacts/bin/System.Data.Common.Tests/\r\nnetcoreapp-Release\r\n```\r\n\r\nHere is how I am building corefx:\r\n\r\n```./build.sh --buildtests --configuration Release --os Linux```\r\n\r\nSo at this point, after editing the ```run-test.sh#L201``` script above, and removing the OS and Arch properties, I get the following output: ``` dirName=\"$1/netcoreapp-$ConfigurationGroup\"```\r\n\r\nI am facing the following issues:\r\n\r\n```\r\nNothing to test in System.Xml.XPath.XDocument.Tests\r\nCannot find /build/corefx/artifacts/bin/tests/System.Xml.Xsl.XslCompiledTransformApi.Tests/netcoreapp-Release/RunTests.sh\r\nCannot find /build/corefx/artifacts/bin/tests/System.Xml.XPath.XmlDocument.Tests/netcoreapp-Release/RunTests.sh\r\nCannot find /build/corefx/artifacts/bin/tests/System.Xml.Xsl.XslTransformApi.Tests/netcoreapp-Release/RunTests.sh\r\nCannot find /build/corefx/artifacts/bin/tests/XsltCompiler.Tests/netcoreapp-Release/RunTests.sh\r\n```\r\n\r\nSo my questions: \r\n**Am I trying to run the tests the correct way?\r\nWhat is that RunTests.sh script? I can't get a hold of it.**\r\n\r\nI am successfully running the corefx test on .NET Core 2.1.13, and trying to adapt my scripts for 3.1, but can't get this part to work.\r\n\r\nThanks for the help\r\n\r\n","Url":"https://github.com/dotnet/corefx/issues/42811","RelatedDescription":"Closed issue \"Path issues when running corefx tests for .NET Core 3.1 tag, what is RunTests.sh?\" (#42811)"},{"Id":"549587098","IsPullRequest":false,"CreatedAt":"2020-01-14T14:00:55","Actor":"Itd-Automha","Number":"42816","RawContent":null,"Title":"System.Text.Json Custom JsonConverter<DateTime> .Read() method not being used by .Deserialize()","State":"open","Body":"I have created a custom converter and it was working in my api project. When i build my client i tried using the same class, but the .Deserialize() methods won't call .Read() on the DateTime property of my class.\r\n\r\nhttps://stackoverflow.com/questions/59733697/system-text-json-custom-jsonconverterdatetime-read-method-not-being-used-by","Url":"https://github.com/dotnet/corefx/issues/42816","RelatedDescription":"Open issue \"System.Text.Json Custom JsonConverter<DateTime> .Read() method not being used by .Deserialize()\" (#42816)"},{"Id":"548630141","IsPullRequest":false,"CreatedAt":"2020-01-14T04:49:35","Actor":"AllanMichaelsen","Number":"42815","RawContent":null,"Title":"MessagePack Reference Loop Handling","State":"closed","Body":"I know there is a thread for handling this with Json  ( #38579 ), but the issue also exists with message pack protocol.(MPP)\r\n\r\nWhen switching to binary serialization via MPP there are immediate buffer overflow issues.\r\n\r\nIs there a way to handle this with MPP?","Url":"https://github.com/dotnet/corefx/issues/42815","RelatedDescription":"Closed issue \"MessagePack Reference Loop Handling\" (#42815)"},{"Id":"548414836","IsPullRequest":false,"CreatedAt":"2020-01-11T14:40:14","Actor":"faruknane","Number":"42814","RawContent":null,"Title":"[BUG] .Net Core ArrayPool","State":"closed","Body":"I have tried to use Array Pool many times. Every time I used it to create many arrays with big sizes, I encountered a problem. The problem is after a while my deep learning library runs it throws \"System.AccessViolationException HResult=0x80004003 Message=Attempted to read or write protected memory. This is often an indication that other memory is corrupt.\". So, I infer that array pool doesn't work well, because I saw that I couldn't use an array long enough even though I didn't return it. So I implemented two new versions for my performance library. Now it works pretty well. However, I think there is a bug going on with Net core ArrayPool.","Url":"https://github.com/dotnet/corefx/issues/42814","RelatedDescription":"Closed issue \"[BUG] .Net Core ArrayPool\" (#42814)"},{"Id":"548021488","IsPullRequest":false,"CreatedAt":"2020-01-10T11:16:30","Actor":"deokershesh","Number":"42812","RawContent":null,"Title":"Ubuntu .NET Core 3.1 runtime issue","State":"open","Body":"I have successfully built .NET Core 3.1 from \"https://github.com/dotnet/corefx/tree/release/3.1\" on Ubuntu 18.04. I have also changed the System.Data.Odbc to make it work for Informix database. I have also changed Interop.Odbc.cs and Interop.Libraries.cs file appropriately for Linux to look for Informix ODBC shared object (.so). \r\n\r\nHowever, when I run simple .NET Core C# example to connect to Informix database it reports exception. Exception is very strange, as soon as it calls OdbcEnvironmentHandle() constructor ( ), which internally calls Interop.Odbc.SQLAllocHandle(<arguments>), it throws exception. It appears that it was unable to load the Informix ODBC shared object which is mentioned in the Interop.Libraries.cs file. LD_LIBRARY_PATH and other variables are set correctly, simple Informix ODBC application works in the same environment. I don't have unixODBC Driver Manager setup.\r\n\r\nIs there any specific setup needed to load the dependent shared objects (which are natively written in C/C++ code) at runtime for .NET Core 3.1? Does unixODBC's \"libodbc.so\" is mandatory to be used?\r\n\r\nAny help in this regard would be greatly appreciated.","Url":"https://github.com/dotnet/corefx/issues/42812","RelatedDescription":"Open issue \"Ubuntu .NET Core 3.1 runtime issue\" (#42812)"},{"Id":"547582097","IsPullRequest":true,"CreatedAt":"2020-01-09T16:23:13","Actor":"bartonjs","Number":"42810","RawContent":null,"Title":"[release/3.0] Always build the OpenSSL shim in portable mode on macOS.","State":"open","Body":"","Url":"https://github.com/dotnet/corefx/pull/42810","RelatedDescription":"Open PR \"[release/3.0] Always build the OpenSSL shim in portable mode on macOS.\" (#42810)"},{"Id":"547574992","IsPullRequest":true,"CreatedAt":"2020-01-09T16:11:08","Actor":"bartonjs","Number":"42809","RawContent":null,"Title":"[release/2.1] Always build the OpenSSL shim in portable mode on macOS.","State":"open","Body":"","Url":"https://github.com/dotnet/corefx/pull/42809","RelatedDescription":"Open PR \"[release/2.1] Always build the OpenSSL shim in portable mode on macOS.\" (#42809)"},{"Id":"547495294","IsPullRequest":false,"CreatedAt":"2020-01-09T14:02:29","Actor":"GuerrillaCoder","Number":"42808","RawContent":null,"Title":"System.Text.Json read record by record","State":"closed","Body":"In the documentation all examples on how to serialize Json appear to occur in one step that involves loading the entire serialized collection into memory.\r\n\r\nIs it possible to read one record at a time so it is possible to work with large files and preserve memory?\r\n\r\nTo illustrate my point, this is possible in Newtonsoft:\r\n\r\n```csharp\r\nJsonTextReader reader = new JsonTextReader(new StringReader(json));\r\nwhile (reader.Read())\r\n{\r\n    if (reader.Value != null)\r\n    {\r\n        Console.WriteLine(\"Token: {0}, Value: {1}\", reader.TokenType, reader.Value);\r\n    }\r\n    else\r\n    {\r\n        Console.WriteLine(\"Token: {0}\", reader.TokenType);\r\n    }\r\n}\r\n```\r\n\r\nDoes System.Text.Json have an equivalent ability or do we have to manually buffer the data to be de-serialized?\r\n\r\n","Url":"https://github.com/dotnet/corefx/issues/42808","RelatedDescription":"Closed issue \"System.Text.Json read record by record\" (#42808)"},{"Id":"546949179","IsPullRequest":false,"CreatedAt":"2020-01-08T22:44:23","Actor":"miloszkukla","Number":"42806","RawContent":null,"Title":"XmlSerializer doesn't encode/escape Unicode characters when serializing","State":"closed","Body":"XmlSerializer doesn't encode/escape Unicode characters (e.g. German quotation marks as illustrated below) during serialization when TextWriter with non-Unicode encoding e.g. ISO-8859-1 is used. I've tested this behavior on .NET Framework 4.5.2, 4.7.2 and .NET Core 2.2.\r\n\r\nSince mentioned characters are part of Unicode and are not known to ISO-8859-1 the expected behavior would be the same as when using XmlWriter so encoding the characters with their character entity references. I understand this would be a breaking change so probably this issue will get closed but perhaps someone will find this helpful in future.\r\n\r\nExecution of the following code results in incorrect XML and consequently deserialization exception:\r\n\r\n```\r\npublic class Foo\r\n{\r\n    [XmlAttribute(\"bar\")]\r\n    public string Bar { get; set; } = new string(new[]\r\n    {\r\n        '\\u201A', // ‚ replaced with 44 ,\r\n        '\\u2018', // ‘ replaced with 39 '\r\n        '\\u201E', // „ replaced with 34 \"\r\n        '\\u201C'  // “ replaced with 34 \"\r\n    });\r\n}\r\n\r\nvar iso88591 = Encoding.GetEncoding(\"ISO-8859-1\");\r\nvar ms = new MemoryStream();\r\nvar sw = new StreamWriter(ms, iso88591);\r\nvar sr = new StreamReader(ms, iso88591);\r\nvar serializer = new XmlSerializer(typeof(Foo));\r\n\r\nserializer.Serialize(sw, new Foo());\r\nvar charPreview = iso88591.GetString(ms.GetBuffer()).ToCharArray();\r\nms.Position = 0;\r\nserializer.Deserialize(sr); //fails due containing extra quotation marks\r\n```\r\n\r\nThe workaround would be to use Serialize method overload accepting XmlWriter e.g.:\r\n```\r\nvar xmlWriter = XmlWriter.Create(ms, new XmlWriterSettings() { Encoding = iso88591 });\r\nserializer.Serialize(xmlWriter, new Foo());\r\n```","Url":"https://github.com/dotnet/corefx/issues/42806","RelatedDescription":"Closed issue \"XmlSerializer doesn't encode/escape Unicode characters when serializing\" (#42806)"},{"Id":"546888825","IsPullRequest":true,"CreatedAt":"2020-01-08T14:19:01","Actor":"dotnet-maestro-bot","Number":"42805","RawContent":null,"Title":"Update BuildTools, CoreFx, ProjectNTfs, ProjectNTfsTestILC to rc1-04626-02, servicing-28327-021, rel-28509-00, rel-28509-00, respectively (release/uwp6.2)","State":"open","Body":"/cc @dotnet/maestro-reviewers-core","Url":"https://github.com/dotnet/corefx/pull/42805","RelatedDescription":"Open PR \"Update BuildTools, CoreFx, ProjectNTfs, ProjectNTfsTestILC to rc1-04626-02, servicing-28327-021, rel-28509-00, rel-28509-00, respectively (release/uwp6.2)\" (#42805)"},{"Id":"546157095","IsPullRequest":false,"CreatedAt":"2020-01-07T08:50:59","Actor":"deokershesh","Number":"42802","RawContent":null,"Title":"Ubuntu : .NET Core 3.1 build error","State":"open","Body":"I downloaded .NET Core 3.1 source code, while doing the build.sh on Ubuntu, it reports following errors! There doesn't seem to be good error message to possibly resolve the same. Kindly help to fix the below build issue.\r\n\r\nroot@64ac36d6c74e:/shesh/dotnetcore/corefx-release-3.1# uname -a\r\nLinux 64ac36d6c74e 4.9.184-linuxkit #1 SMP Tue Jul 2 22:58:16 UTC 2019 x86_64 x86_64 x86_64 GNU/Linux\r\n\r\n\r\n  Setting up directories for build\r\n  Checking pre-requisites...\r\n  Commencing build of corefx native components for Linux.x64.Debug\r\n  Invoking \"/shesh/dotnetcore/corefx-release-3.1/src/Native/Unix/gen-buildsys-clang.sh\" \"/shesh/dotnetcore/corefx-release-3.1/src/Native/Unix\" \"3\" \"9\" \"x64\" \"DEBUG\" \" -DFEATURE_DISTRO_AGNOSTIC_SSL=1 -DCMAKE_STATIC_LIB_LINK=0\"\r\n  -- Configuring incomplete, errors occurred!\r\n  See also \"/shesh/dotnetcore/corefx-release-3.1/artifacts/obj/native/netcoreapp-Linux-Debug-x64/CMakeFiles/CMakeOutput.log\".\r\n  See also \"/shesh/dotnetcore/corefx-release-3.1/artifacts/obj/native/netcoreapp-Linux-Debug-x64/CMakeFiles/CMakeError.log\".\r\n  Failed to generate native component build project!\r\n/shesh/dotnetcore/corefx-release-3.1/src/Native/build-native.proj(36,5): error MSB3073: The command \"\"/shesh/dotnetcore/corefx-release-3.1/src/Native/build-native.sh\" x64 Debug Linux outconfig netcoreapp-Linux-Debug-x64 -portable\" exited with code 1.\r\n\r\nBuild FAILED.\r\n\r\n/shesh/dotnetcore/corefx-release-3.1/src/Native/build-native.proj(36,5): error MSB3073: The command \"\"/shesh/dotnetcore/corefx-release-3.1/src/Native/build-native.sh\" x64 Debug Linux outconfig netcoreapp-Linux-Debug-x64 -portable\" exited with code 1.\r\n    0 Warning(s)\r\n    1 Error(s)\r\n\r\nTime Elapsed 00:00:46.11\r\nBuild failed (exit code '1').\r\nroot@64ac36d6c74e:/shesh/dotnetcore/corefx-release-3.1#","Url":"https://github.com/dotnet/corefx/issues/42802","RelatedDescription":"Open issue \"Ubuntu : .NET Core 3.1 build error\" (#42802)"},{"Id":"545972653","IsPullRequest":true,"CreatedAt":"2020-01-06T22:25:46","Actor":"bartonjs","Number":"42801","RawContent":null,"Title":"[release/3.1] Always build the OpenSSL shim in portable mode on macOS.","State":"open","Body":"","Url":"https://github.com/dotnet/corefx/pull/42801","RelatedDescription":"Open PR \"[release/3.1] Always build the OpenSSL shim in portable mode on macOS.\" (#42801)"},{"Id":"544438199","IsPullRequest":false,"CreatedAt":"2020-01-02T03:53:28","Actor":"TsuyoshiUshio","Number":"42795","RawContent":null,"Title":"Activity.SetIdFormat is ignored if there is Activity.Current instance","State":"open","Body":"I'm not sure if it is expected behavior or not, I'd like to share what I found. \r\nI use `System.Diagnostics.DiagnosticSource` version `4.7.0` . \r\n\r\n```\r\n            Activity parent = new Activity(\"parent\");\r\n            parent.SetIdFormat(ActivityIdFormat.W3C);\r\n            // W3C \r\n            parent.Start();\r\n            Console.WriteLine(\"W3C Parent---\");\r\n            PrintActivity(parent); // Method that print the details of Activity\r\n\r\n            // Correlation \r\n            Activity child = new Activity(\"child\");\r\n            child.SetParentId(parent.ParentId);\r\n            Console.WriteLine(\"W3C Child ---\");\r\n            child.Start();\r\n            PrintActivity(child); // Method that print the details of Activity\r\n\r\n            Activity newParent = new Activity(\"parent\");\r\n            newParent.SetIdFormat(ActivityIdFormat.Hierarchical);\r\n            newParent.Start();\r\n            Console.WriteLine(\"HTTP Parent---\");\r\n            PrintActivity(newParent);  // Method that print the details of Activity\r\n```\r\nAt the last newParent instance, Even if I specify `ActivityIdFormat.Hierarchical` It become `W3C TraceContext` \r\n\r\n![image](https://user-images.githubusercontent.com/1390976/71650952-ae74d980-2cce-11ea-92ad-afd69610f086.png)\r\n\r\nIt might be caused by this line of code of Activity.GenerateHierachicalId() method. Since parent is automatically set from Activity.Current. \r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/corefx/issues/42795","RelatedDescription":"Open issue \"Activity.SetIdFormat is ignored if there is Activity.Current instance\" (#42795)"},{"Id":"542913681","IsPullRequest":false,"CreatedAt":"2019-12-28T16:07:33","Actor":"dhmuralikrishna","Number":"42792","RawContent":null,"Title":"How to disable using HTTP_PROXY as default","State":"closed","Body":"https://github.com/dotnet/corefx/issues/36553\r\n\r\nHow can we turn off this new default implementation?\r\n\r\nI have environment variables HTTP_PROXY. But I want to use system-level proxy default instead of environment variables. I don't want to delete the environment variables because it used by other applications. How can I set to go for system proxy?\r\n\r\n\r\n","Url":"https://github.com/dotnet/corefx/issues/42792","RelatedDescription":"Closed issue \"How to disable using HTTP_PROXY as default\" (#42792)"},{"Id":"541850100","IsPullRequest":false,"CreatedAt":"2019-12-23T19:42:56","Actor":"ritchxu","Number":"42790","RawContent":null,"Title":"XmlQualifiedName class not marked as Serializable","State":"closed","Body":"While porting code to .NET Core, it was found that [XmlQualifiedName](https://github.com/dotnet/corefx/blob/master/src/System.Private.Xml/src/System/Xml/XmlQualifiedName.cs) is not marked as `Serializable` as it was [in .NET Framework](https://referencesource.microsoft.com/#System.Xml/System/Xml/XmlQualifiedName.cs). This caused any field/property in this class becoming not serializable.\r\n\r\n### Question:\r\nIs this by design?\r\n\r\n### Reproducible steps:\r\n```\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <OutputType>Exe</OutputType>\r\n    <TargetFramework>netcoreapp3.1</TargetFramework>\r\n  </PropertyGroup>\r\n\r\n</Project>\r\n\r\n```\r\n```\r\nusing System;\r\nusing System.IO;\r\nusing System.Runtime.Serialization;\r\nusing System.Runtime.Serialization.Formatters.Binary;\r\nusing System.Xml;\r\n\r\nnamespace ConsoleApp\r\n{\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            IFormatter formatter = new BinaryFormatter();\r\n            Stream stream = new MemoryStream();\r\n            formatter.Serialize(stream, new TestClass());\r\n        }\r\n    }\r\n\r\n    [Serializable]\r\n    class TestClass\r\n    {\r\n        public TestClass()\r\n        {\r\n            TestProp = new XmlQualifiedName(\"TestProp\");\r\n        }\r\n\r\n        XmlQualifiedName TestProp { get; set; }\r\n    }\r\n}\r\n```\r\n### Expected behavior:\r\n`Serialize` call works without throwing exceptions,\r\n\r\n### Actual behavior:\r\n```\r\nSystem.Runtime.Serialization.SerializationException\r\n  HResult=0x8013150C\r\n  Message=Type 'System.Xml.XmlQualifiedName' in Assembly 'System.Private.Xml, Version=4.0.2.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51' is not marked as serializable.\r\n  Source=System.Runtime.Serialization.Formatters\r\n  StackTrace:\r\n   at System.Runtime.Serialization.FormatterServices.InternalGetSerializableMembers(Type type)\r\n   at System.Runtime.Serialization.FormatterServices.<>c.<GetSerializableMembers>b__5_0(MemberHolder mh)\r\n   at System.Collections.Concurrent.ConcurrentDictionary`2.GetOrAdd(TKey key, Func`2 valueFactory)\r\n   at System.Runtime.Serialization.FormatterServices.GetSerializableMembers(Type type, StreamingContext context)\r\n   at System.Runtime.Serialization.Formatters.Binary.WriteObjectInfo.InitMemberInfo()\r\n   at System.Runtime.Serialization.Formatters.Binary.WriteObjectInfo.InitSerialize(Object obj, ISurrogateSelector surrogateSelector, StreamingContext context, SerObjectInfoInit serObjectInfoInit, IFormatterConverter converter, ObjectWriter objectWriter, SerializationBinder binder)\r\n   at System.Runtime.Serialization.Formatters.Binary.ObjectWriter.Write(WriteObjectInfo objectInfo, NameInfo memberNameInfo, NameInfo typeNameInfo)\r\n   at System.Runtime.Serialization.Formatters.Binary.ObjectWriter.Serialize(Object graph, BinaryFormatterWriter serWriter, Boolean fCheck)\r\n   at System.Runtime.Serialization.Formatters.Binary.BinaryFormatter.Serialize(Stream serializationStream, Object graph, Boolean check)\r\n   at System.Runtime.Serialization.Formatters.Binary.BinaryFormatter.Serialize(Stream serializationStream, Object graph)\r\n   at ConsoleApp.Program.Main(String[] args) in C:\\Rui\\Projects\\PSCore\\ConsoleApp\\Program.cs:line 15\r\n\r\n\r\n","Url":"https://github.com/dotnet/corefx/issues/42790","RelatedDescription":"Closed issue \"XmlQualifiedName class not marked as Serializable\" (#42790)"},{"Id":"540908824","IsPullRequest":false,"CreatedAt":"2019-12-20T10:13:10","Actor":"Jogge","Number":"42787","RawContent":null,"Title":"System.Text.Json.Serialization Order of serialized properties","State":"closed","Body":"I'm missing an attribute for setting the order of the element in the JSON output.\r\n\r\nExample:\r\n\r\nI want the `@SEGMENT` to be the first element in the serialized JSON output of MyClass:\r\n\r\n```C#\r\npublic abstract class MyBase\r\n{\r\n    [JsonPropertyName(\"@SEGMENT\")]\r\n    public virtual string Segment { get; set; } = \"1\";\r\n\r\n    public int ID { get; set; }\r\n}\r\n\r\npublic class MyClass : MyBase\r\n{\r\n    public string Name { get; set; }\r\n}\r\n```\r\n\r\nThe result when serializing MyClass is:\r\n```JSON\r\n{\r\n    \"MyClass\": {\r\n    \t\"Name\": \"Foo\",\r\n    \t\"@SEGMENT\": \"1\",\r\n    \t\"ID\": 42\r\n    }\r\n}\r\n```\r\n\r\nI would like the serialized JSON output to be:\r\n\r\n```JSON\r\n{\r\n    \"MyClass\": {\r\n    \t\"@SEGMENT\": \"1\",\r\n    \t\"Name\": \"Foo\",\r\n    \t\"ID\": 42\r\n    }\r\n}\r\n```\r\n\r\nor\r\n```JSON\r\n{\r\n    \"MyClass\": {\r\n    \t\"@SEGMENT\": \"1\",\r\n    \t\"ID\": 42,\r\n    \t\"Name\": \"Foo\"\r\n    }\r\n}\r\n```\r\n\r\nJson.NET has an attribute for this: https://www.newtonsoft.com/json/help/html/JsonPropertyOrder.htm\r\n\r\nRelated question: [.NET core 3: Order of serialization for JsonPropertyName (System.Text.Json.Serialization)](https://stackoverflow.com/q/59134564/7108481)\r\n\r\n\r\n","Url":"https://github.com/dotnet/corefx/issues/42787","RelatedDescription":"Closed issue \"System.Text.Json.Serialization Order of serialized properties\" (#42787)"},{"Id":"538888501","IsPullRequest":false,"CreatedAt":"2019-12-19T00:00:21","Actor":"poweralex","Number":"42783","RawContent":null,"Title":"bitmap.MakeTransparent works different on linux","State":"closed","Body":"I'm trying to draw a png image with a block of transparent on it. the same code works fine on local windows environment, but when I deploy it on a Linux server, the block does not go transparent.\r\nthe code is simple:\r\n```c#\r\n                    byte[] fileContent = null;\r\n                    using (MemoryStream ms = new MemoryStream())\r\n                    {\r\n                        Bitmap bitmap = new Bitmap(\r\n                            100, 100\r\n                            );\r\n                        using (var g = Graphics.FromImage(bitmap))\r\n                        {\r\n                            // backgrand\r\n                            g.FillRectangle(new SolidBrush(Color.White), 0, 0, bitmap.Width, bitmap.Height);\r\n                            // transparent block\r\n                            g.FillRectangle(new SolidBrush(Color.Red), 10, 10, 80, 80);\r\n                            // blue line\r\n                            g.DrawLine(new Pen(Color.Blue), 10, 10, 90, 90);\r\n                        }\r\n                        bitmap.MakeTransparent(Color.Red);\r\n                        bitmap.Save(ms, ImageFormat.Png);\r\n                        fileContent = ms.ToArray();\r\n                    }\r\n```\r\nthe image looks good on windows:\r\n![image](https://user-images.githubusercontent.com/12427030/70973935-a4a18280-20e1-11ea-95a2-d2b8604af9f0.png)\r\nbut not on Linux:\r\n![image](https://user-images.githubusercontent.com/12427030/70974041-da466b80-20e1-11ea-9f3b-e329eda130d7.png)\r\n\r\nIs this a issue of System.Drawing.Common or is there something I missed?\r\n\r\n[danmosemsft fixed formatting]","Url":"https://github.com/dotnet/corefx/issues/42783","RelatedDescription":"Closed issue \"bitmap.MakeTransparent works different on linux\" (#42783)"},{"Id":"538656286","IsPullRequest":false,"CreatedAt":"2019-12-16T21:02:03","Actor":"weshaggard","Number":"42782","RawContent":null,"Title":"Update package label to \"final\" for the stable prerelease builds.","State":"closed","Body":"https://github.com/dotnet/buildtools/blob/master/src/Microsoft.DotNet.Build.Tasks.Packaging/src/PackageFiles/Packaging.targets#L16 instead of excluding the build number change it to \"final\". That will help make sure the package version is the higher then any of the existing packages that have that build number. \r\n\r\nWe should consider renaming IncludeBuildNumberInPackageVersion to better align with this change.\r\n\r\nThis change needs to happen in corefx and core-setup. \r\n\r\n","Url":"https://github.com/dotnet/corefx/issues/42782","RelatedDescription":"Closed issue \"Update package label to \"final\" for the stable prerelease builds.\" (#42782)"},{"Id":"538456644","IsPullRequest":false,"CreatedAt":"2019-12-16T18:24:56","Actor":"karimi64bit","Number":"42781","RawContent":null,"Title":"captcha در مرورگر موبایل ارور میده","State":"closed","Body":"سلام\r\nممنون از زحمت هاتون \r\nوقتی ازش استفاده میکنم درسته فقط وقتی تو موبایل دارم دکمه ریفرش میزنم کار نمیکنه\r\nممنون میشم راهنمایی کنید\r\n","Url":"https://github.com/dotnet/corefx/issues/42781","RelatedDescription":"Closed issue \"captcha در مرورگر موبایل ارور میده\" (#42781)"},{"Id":"538385840","IsPullRequest":false,"CreatedAt":"2019-12-16T14:26:33","Actor":"tornie2","Number":"42780","RawContent":null,"Title":"HttpClient sends NTLM ticket, even though it only has Negotiate credentials","State":"closed","Body":"We are puzzled that HttpClient will use NTLM token for authorization, even though will only give the handler Negotiate credentials\r\n\r\nOur application is in net461. We create our client with this code\r\n\r\n             _credentials = new CredentialCache { { _uri, \"Negotiate\", CredentialCache.DefaultNetworkCredentials } };\r\n             var handler = new WebRequestHandler { Credentials = _credentials, UnsafeAuthenticatedConnectionSharing = true, MaxConnectionsPerServer = 100, UseProxy = false };\r\n             var httpClient = new HttpClient(handler) { BaseAddress = _uri };\r\n\r\nWhen we access a node directly without a load-balancer, we can nicely see a Negotiate authorization.\r\n\r\nHowever when we access the system through the load-balancer, the Authorization in the request contains a Negotiate item, but when we open the token (base64 decode it), we can see that it actually is a NTLM-token\r\n\r\nThe challenge from the server has this header:\r\n             Proxy-Authenticate NTLM, Negotiate, Bearer\r\n\r\nThe response to the service looks something like this. Authorization says Negotiate, but when we decode the token, it is ntlm\r\n             Authorization Negotiate TlRMTVNT.....\r\n             Host syst-smfbasic:15000\r\n             CorrelationId 72395ff4-4fa9-4d5d-88c1-0d96b49da63c\r\n\r\nWhy will webrequesthandler generate an NTLM-token when we specifically ask for Negotiate, and write Negotiate in the header, when it actually is NTLM?\r\n\r\nAnd why only when we use a load-balancer?","Url":"https://github.com/dotnet/corefx/issues/42780","RelatedDescription":"Closed issue \"HttpClient sends NTLM ticket, even though it only has Negotiate credentials\" (#42780)"},{"Id":"537797199","IsPullRequest":false,"CreatedAt":"2019-12-14T00:43:37","Actor":"los93sol","Number":"42779","RawContent":null,"Title":"Code search broken on the repo?","State":"closed","Body":"I've noticed for at least the last week that searching the repo for code doesn't seem to work anymore.  Other repos like aspnetcore seem to still be searching fine though.  Not sure where else to report the issue to so figured I'd just open an issue here.","Url":"https://github.com/dotnet/corefx/issues/42779","RelatedDescription":"Closed issue \"Code search broken on the repo?\" (#42779)"}],"ResultType":"GitHubIssue"},"Roslyn-Issues":{"Issues":[{"Id":"549964690","IsPullRequest":false,"CreatedAt":"2020-01-15T04:51:08","Actor":"davkean","Number":"40976","RawContent":null,"Title":"\"Show items from unimported namespaces\" and \"resolve usings\" inserts imports in wrong location when \"inside_namespace\"","State":"open","Body":"**Version Used**: \r\nVersion 16.5.0 Preview 3.0 [29714.123.master]\r\n\r\n**Steps to Reproduce**:\r\n\r\n```\r\n[*.cs]\r\ncsharp_using_directive_placement = inside_namespace:error\r\n``` \r\n\r\n``` C#\r\nnamespace Microsoft.VisualStudio.ProjectSystem.VS.Implementation.Package\r\n{\r\n    internal class SolutionExplorerService\r\n    {\r\n        private Lazy< // <!-- Resolve using\r\n\r\n        public SolutionExplorerService()\r\n        {\r\n        }\r\n    }\r\n}\r\n\r\n```\r\n**Expected Behavior**:\r\n``` C#\r\nnamespace Microsoft.VisualStudio.ProjectSystem.VS.Implementation.Package\r\n{\r\n    using System;\r\n\r\n    internal class SolutionExplorerService\r\n    {\r\n        private Lazy<\r\n\r\n        public SolutionExplorerService()\r\n        {\r\n        }\r\n    }\r\n}\r\n\r\n```\r\n\r\n**Actual Behavior**:\r\n``` C#\r\nusing System;\r\n\r\nnamespace Microsoft.VisualStudio.ProjectSystem.VS.Implementation.Package\r\n{\r\n    internal class SolutionExplorerService\r\n    {\r\n        private Lazy<\r\n\r\n        public SolutionExplorerService()\r\n        {\r\n        }\r\n    }\r\n}\r\n\r\n```","Url":"https://github.com/dotnet/roslyn/issues/40976","RelatedDescription":"Open issue \"\"Show items from unimported namespaces\" and \"resolve usings\" inserts imports in wrong location when \"inside_namespace\"\" (#40976)"},{"Id":"549306022","IsPullRequest":true,"CreatedAt":"2020-01-15T03:16:01","Actor":"CyrusNajmabadi","Number":"40948","RawContent":null,"Title":"Extract out simplification changes","State":"closed","Body":"Pulling out independent parts of https://github.com/dotnet/roslyn/pull/40746 to make that PR simpler.\r\n\r\nThis PR should be reviewed with whitespace off.\r\n\r\nSpecific changes:\r\n\r\n1. Unify patterns in extension methods.\r\n2. Convert private extensions called from 1 location into normal static methods.\r\n3. Make public extensions only called from one place private.\r\n4. Compute symbol being reduced only once and pass along to all simplification helpers.\r\n5. Remove codepaths dealing with 'candidate' symbols.  Later code bails out with ambiguities, so no need to deal with them earlier.\r\n","Url":"https://github.com/dotnet/roslyn/pull/40948","RelatedDescription":"Closed or merged PR \"Extract out simplification changes\" (#40948)"},{"Id":"549922621","IsPullRequest":false,"CreatedAt":"2020-01-15T02:09:05","Actor":"jcouv","Number":"40975","RawContent":null,"Title":"Should not warn on null default value on [AllowNull] parameter","State":"open","Body":"Follow-up on https://github.com/dotnet/roslyn/pull/40789\r\n\r\n```\r\n        [Fact]\r\n        public void AllowNull_Parameter_NullDefaultValue()\r\n        {\r\n            var source =\r\n@\"using System.Diagnostics.CodeAnalysis;\r\npublic class C\r\n{\r\n    void M([AllowNull] string p = null) { }\r\n}\r\n\";\r\n\r\n            var comp = CreateNullableCompilation(new[] { AllowNullAttributeDefinition, source });\r\n            // Note: fixing this was tricky as it involved a cycle (FlowAnnotations, attribute decoding, default value)\r\n            comp.VerifyDiagnostics(\r\n                // (4,35): warning CS8625: Cannot convert null literal to non-nullable reference type.\r\n                //     void M([AllowNull] string p = null) { }\r\n                Diagnostic(ErrorCode.WRN_NullAsNonNullable, \"null\").WithLocation(4, 35)\r\n                );\r\n        }\r\n```","Url":"https://github.com/dotnet/roslyn/issues/40975","RelatedDescription":"Open issue \"Should not warn on null default value on [AllowNull] parameter\" (#40975)"},{"Id":"549888138","IsPullRequest":true,"CreatedAt":"2020-01-15T01:28:08","Actor":"dotnet-bot","Number":"40968","RawContent":null,"Title":"Merge master to release/dev16.6-preview1","State":"closed","Body":"\nThis is an automatically generated pull request from master into release/dev16.6-preview1.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-release/dev16.6-preview1\ngit reset --hard upstream/release/dev16.6-preview1\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-release/dev16.6-preview1 --force\n```\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/40968","RelatedDescription":"Closed or merged PR \"Merge master to release/dev16.6-preview1\" (#40968)"},{"Id":"549888611","IsPullRequest":true,"CreatedAt":"2020-01-15T01:28:05","Actor":"dotnet-bot","Number":"40970","RawContent":null,"Title":"Merge master to master-vs-deps","State":"closed","Body":"\nThis is an automatically generated pull request from master into master-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-master-vs-deps\ngit reset --hard upstream/master-vs-deps\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-master-vs-deps --force\n```\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/40970","RelatedDescription":"Closed or merged PR \"Merge master to master-vs-deps\" (#40970)"},{"Id":"549907002","IsPullRequest":false,"CreatedAt":"2020-01-15T01:08:51","Actor":"CyrusNajmabadi","Number":"40974","RawContent":null,"Title":"Simplifier actively avoids simplifying ambiguous/incorrect code.  ","State":"open","Body":"While this behavior is safely conservative, it may lead to a less than ideal experience with some coding patterns where a user may want help from us to simplify what they ahve before their code is fully correct.\r\n\r\nThis may also lead to problems in cases where the language explicitly allows ambiguity. For example, in `nameof(this.X)` X may be an ambiguous reference to an overload group.  We would still certainly want to simplify there.\r\n\r\nFor now, our implementation will opt for conservative simplicity and safety.  But we are not opposed to someone adding support for these sorts of cases if done in a careful and thoughtful fashion.","Url":"https://github.com/dotnet/roslyn/issues/40974","RelatedDescription":"Open issue \"Simplifier actively avoids simplifying ambiguous/incorrect code.  \" (#40974)"},{"Id":"549905955","IsPullRequest":false,"CreatedAt":"2020-01-15T01:05:23","Actor":"CyrusNajmabadi","Number":"40973","RawContent":null,"Title":"Simplifier could simplify ambigous reference but doesn't.","State":"open","Body":"Note: this came out of a discussion i was having with @sharwell .  We don't offer to simplify here, but we could.\r\n\r\nI personally am totally fine with this behavior.  However, we're putting it up for completeness as there may be some merit in exploring simplification even in ambiguous situations:\r\n\r\n![image](https://user-images.githubusercontent.com/4564579/72395977-0c9eb500-36f0-11ea-828a-abbf1001d8bc.png)\r\n","Url":"https://github.com/dotnet/roslyn/issues/40973","RelatedDescription":"Open issue \"Simplifier could simplify ambigous reference but doesn't.\" (#40973)"},{"Id":"549905415","IsPullRequest":false,"CreatedAt":"2020-01-15T01:03:26","Actor":"CyrusNajmabadi","Number":"40972","RawContent":null,"Title":"Simplifier doesn't simplify umabiguous reference in `nameof`","State":"open","Body":"See:\r\n\r\n![image](https://user-images.githubusercontent.com/4564579/72395863-b598e000-36ef-11ea-8acd-06fe872dabeb.png)\r\n\r\nThe first usage of `Example.Goo` is shown as simplifiable.  The second (in `nameof`) is not.  ","Url":"https://github.com/dotnet/roslyn/issues/40972","RelatedDescription":"Open issue \"Simplifier doesn't simplify umabiguous reference in `nameof`\" (#40972)"},{"Id":"549888681","IsPullRequest":true,"CreatedAt":"2020-01-15T00:03:29","Actor":"dotnet-bot","Number":"40971","RawContent":null,"Title":"Merge release/dev16.6-preview1 to release/dev16.6-preview1-vs-deps","State":"open","Body":"\nThis is an automatically generated pull request from release/dev16.6-preview1 into release/dev16.6-preview1-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/dev16.6-preview1-to-release/dev16.6-preview1-vs-deps\ngit reset --hard upstream/release/dev16.6-preview1-vs-deps\ngit merge upstream/release/dev16.6-preview1\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/dev16.6-preview1-to-release/dev16.6-preview1-vs-deps --force\n```\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/40971","RelatedDescription":"Open PR \"Merge release/dev16.6-preview1 to release/dev16.6-preview1-vs-deps\" (#40971)"},{"Id":"549888379","IsPullRequest":true,"CreatedAt":"2020-01-15T00:02:32","Actor":"dotnet-bot","Number":"40969","RawContent":null,"Title":"Merge master-vs-deps to release/dev16.6-preview1-vs-deps","State":"open","Body":"\nThis is an automatically generated pull request from master-vs-deps into release/dev16.6-preview1-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-vs-deps-to-release/dev16.6-preview1-vs-deps\ngit reset --hard upstream/release/dev16.6-preview1-vs-deps\ngit merge upstream/master-vs-deps\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-vs-deps-to-release/dev16.6-preview1-vs-deps --force\n```\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/40969","RelatedDescription":"Open PR \"Merge master-vs-deps to release/dev16.6-preview1-vs-deps\" (#40969)"},{"Id":"549883398","IsPullRequest":false,"CreatedAt":"2020-01-14T23:46:23","Actor":"y87feng","Number":"40967","RawContent":null,"Title":"Introduce explicit downcast refactoring if a variable requires a cast to compile","State":"open","Body":"If a variable requires a cast to make it compile, add a refactoring that will introduce cast refactoring #33533\r\n\r\n**Add explicit downcast**: \r\ncontext code:\r\n```csharp\r\nclass C {}\r\nclass D : C {}\r\nvoid doSomething(D d);\r\nC returnC();\r\n```\r\n\r\n1.  types mismatch - C cannot be cast as string\r\n```csharp\r\nC c;\r\nstring s = [||]c;\r\n```\r\nResults in `no refactoring`\r\n\r\n2. assignment with constructor\r\n```csharp\r\nD d = [|new C()|];\r\n```\r\nResults in\r\n```csharp\r\nD d = (D)new C();\r\n```\r\n\r\n3. assignment with object\r\n```csharp\r\nC c = new D();\r\nD d = c[||];\r\n```\r\nResults in\r\n```csharp\r\nC c = new D();\r\nD d = (D)c;\r\n```\r\n\r\n4. assignment with method return value\r\n```csharp\r\nD d = r[||]eturnC();\r\n```\r\nResults in\r\n```csharp\r\nD d = (D)returnC();\r\n```\r\n\r\n5. variable passed as method parameter\r\n```csharp\r\ndoSomething([||]c);\r\n```\r\nResults in\r\n```csharp\r\ndoSomething((D)c);\r\n```\r\n","Url":"https://github.com/dotnet/roslyn/issues/40967","RelatedDescription":"Open issue \"Introduce explicit downcast refactoring if a variable requires a cast to compile\" (#40967)"},{"Id":"549882878","IsPullRequest":true,"CreatedAt":"2020-01-14T23:44:38","Actor":"mavasani","Number":"40966","RawContent":null,"Title":"Fix VisualBasicSyntaxFactsService.IsLeftSideOfCompoundAssignment","State":"open","Body":"Fixes #40917\r\n\r\nAddresses feedback from https://github.com/dotnet/roslyn/pull/40896#discussion_r365505109","Url":"https://github.com/dotnet/roslyn/pull/40966","RelatedDescription":"Open PR \"Fix VisualBasicSyntaxFactsService.IsLeftSideOfCompoundAssignment\" (#40966)"},{"Id":"549859171","IsPullRequest":true,"CreatedAt":"2020-01-14T22:37:36","Actor":"mavasani","Number":"40965","RawContent":null,"Title":"Refactor some dispose code in SymbolUsageAnalysis","State":"open","Body":"Address feedback from https://github.com/dotnet/roslyn/pull/40900","Url":"https://github.com/dotnet/roslyn/pull/40965","RelatedDescription":"Open PR \"Refactor some dispose code in SymbolUsageAnalysis\" (#40965)"},{"Id":"549854421","IsPullRequest":false,"CreatedAt":"2020-01-14T22:25:53","Actor":"jasonmalinowski","Number":"40964","RawContent":null,"Title":"Hang during shutdown in Microsoft.VisualStudio.LanguageServices.Remote.ServiceHubRemoteHostClient.UnregisterGlobalOperationNotifications","State":"open","Body":"**Version Used**: 16.5.29707.192 built by: MASTER\r\n\r\nThis is a random hang I hit during shutdown. The UI was already closed I think but it seems we deadlocked somehow shutting down the OOP process:\r\n\r\n```\r\n \tmscorlib.dll!System.Threading.Monitor.Wait(object obj, int millisecondsTimeout, bool exitContext) Line 203\tC#\r\n \tmscorlib.dll!System.Threading.Monitor.Wait(object obj, int millisecondsTimeout) Line 213\tC#\r\n \tmscorlib.dll!System.Threading.ManualResetEventSlim.Wait(int millisecondsTimeout, System.Threading.CancellationToken cancellationToken) Line 688\tC#\r\n \tmscorlib.dll!System.Threading.Tasks.Task.SpinThenBlockingWait(int millisecondsTimeout, System.Threading.CancellationToken cancellationToken) Line 3320\tC#\r\n \tmscorlib.dll!System.Threading.Tasks.Task.InternalWait(int millisecondsTimeout, System.Threading.CancellationToken cancellationToken) Line 3259\tC#\r\n \tmscorlib.dll!System.Threading.Tasks.Task.Wait(int millisecondsTimeout, System.Threading.CancellationToken cancellationToken) Line 3167\tC#\r\n \t[Waiting on Async Operation, Open Tasks View in Parallel Stacks Window to view Async Call Stacks]\t\r\n>\tMicrosoft.VisualStudio.LanguageServices.dll!Microsoft.VisualStudio.LanguageServices.Remote.ServiceHubRemoteHostClient.UnregisterGlobalOperationNotifications() Line 213\tC#\r\n \tMicrosoft.VisualStudio.LanguageServices.dll!Microsoft.VisualStudio.LanguageServices.Remote.ServiceHubRemoteHostClient.OnStopped() Line 165\tC#\r\n \tMicrosoft.VisualStudio.LanguageServices.dll!Microsoft.VisualStudio.LanguageServices.Remote.RemoteHostClientServiceFactory.RemoteHostClientService.Disable() Line 141\tC#\r\n \tMicrosoft.VisualStudio.LanguageServices.dll!Microsoft.VisualStudio.LanguageServices.Implementation.LanguageService.AbstractPackage<System.__Canon, System.__Canon>.DisableRemoteHostClientService() Line 201\tC#\r\n \tMicrosoft.VisualStudio.LanguageServices.dll!Microsoft.VisualStudio.LanguageServices.Implementation.LanguageService.AbstractPackage<Microsoft.VisualStudio.LanguageServices.CSharp.LanguageService.CSharpPackage, Microsoft.VisualStudio.LanguageServices.CSharp.LanguageService.CSharpLanguageService>.Dispose.AnonymousMethod__18_0() Line 141\tC#\r\n```","Url":"https://github.com/dotnet/roslyn/issues/40964","RelatedDescription":"Open issue \"Hang during shutdown in Microsoft.VisualStudio.LanguageServices.Remote.ServiceHubRemoteHostClient.UnregisterGlobalOperationNotifications\" (#40964)"},{"Id":"549843118","IsPullRequest":false,"CreatedAt":"2020-01-14T21:59:47","Actor":"mikadumont","Number":"40963","RawContent":null,"Title":"FAR (Find All References) UI Updates","State":"open","Body":"Direct customer ask copying here: \r\n\r\n> 1.\tMerge references if they are on the same file. If they are on multiple projects but compile from the same source code anyways there is no reason to display the same result 2~6 times.\r\n\r\n> 2. Merge occurrences on the same line button/functionality. Very self-explanatory, if it happens multiple times in the same line there’s no need to show multiple results.\r\n\r\n> 3. Show reference type icon, if they are the same as the icons shown in the solution explorer even better. It becomes ridiculously easier to see what is a methods and what is a property just by using these icons. (see attached image for example.\r\n![image](https://user-images.githubusercontent.com/46729679/72386321-0c91bb80-36d6-11ea-802a-d0e51a5778cc.png)\r\n\r\n","Url":"https://github.com/dotnet/roslyn/issues/40963","RelatedDescription":"Open issue \"FAR (Find All References) UI Updates\" (#40963)"},{"Id":"549840009","IsPullRequest":false,"CreatedAt":"2020-01-14T21:52:51","Actor":"mikadumont","Number":"40962","RawContent":null,"Title":"FAR (Find All References) to have more group by options","State":"open","Body":"**Version Used**: \r\nVisual Studio 2019 Preview\r\n\r\n**Actual Behavior**:\r\nWe currently have the following group by options: \r\n![image](https://user-images.githubusercontent.com/46729679/72385607-bf611a00-36d4-11ea-8e36-fb1c2a19cd0f.png)\r\n\r\n**Expected Behavior**:\r\nAdd more group by options: \r\n1. Type\r\n2. Type and Member\r\n3. Namespace\r\n4. Namespace and Type\r\n5. Namespace, Type, and Member\r\n6. Folder and File\r\n7. File\r\n8. Project and NameSpace","Url":"https://github.com/dotnet/roslyn/issues/40962","RelatedDescription":"Open issue \"FAR (Find All References) to have more group by options\" (#40962)"},{"Id":"549522942","IsPullRequest":true,"CreatedAt":"2020-01-14T21:42:02","Actor":"dotnet-bot","Number":"40954","RawContent":null,"Title":"Merge release/dev16.6-preview1 to release/dev16.6-preview1-vs-deps","State":"closed","Body":"\nThis is an automatically generated pull request from release/dev16.6-preview1 into release/dev16.6-preview1-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/dev16.6-preview1-to-release/dev16.6-preview1-vs-deps\ngit reset --hard upstream/release/dev16.6-preview1-vs-deps\ngit merge upstream/release/dev16.6-preview1\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/dev16.6-preview1-to-release/dev16.6-preview1-vs-deps --force\n```\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/40954","RelatedDescription":"Closed or merged PR \"Merge release/dev16.6-preview1 to release/dev16.6-preview1-vs-deps\" (#40954)"},{"Id":"549829499","IsPullRequest":false,"CreatedAt":"2020-01-14T21:29:37","Actor":"jasonmalinowski","Number":"40961","RawContent":null,"Title":"Clean up GetConvertedTypeWithAnnotatedNullability and GetTypeWithAnnotatedNullability","State":"open","Body":"These two extension methods predate the compiler's nullable types API where the top level nullability is baked into the ITypeSymbol. These were used to do the IDE wrapping when you had a TypeInfo in hand. When we moved to the newer compiler API we removed the wrapping but these methods stayed around as a few odd uses still existed. We assumed that for the most part calling GetTypeInfo on an expression desires the flow state, and that seemed to generally be the case, but the extension methods were trying to do something different.\r\n\r\nWe need to investigate the remaining uses, figure out what the code is actually trying to do, and then either leave the method (explaining why it's actually the right thing) or just remove them.","Url":"https://github.com/dotnet/roslyn/issues/40961","RelatedDescription":"Open issue \"Clean up GetConvertedTypeWithAnnotatedNullability and GetTypeWithAnnotatedNullability\" (#40961)"},{"Id":"549740623","IsPullRequest":false,"CreatedAt":"2020-01-14T20:51:36","Actor":"vsfeedback","Number":"40956","RawContent":null,"Title":"Inaccurate IDE0051 Messages","State":"closed","Body":"_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/problem/875313/inaccurate-ide0051-messages.html)._\n\n---\nUsing this code:\nhttps://github.com/DragonSpark/Framework/blob/5a9801baf55beb255d11068fe0c4237fe88f59ac/DragonSpark.Application.Hosting.Server.Testing.Application/HelloWorldControllerTests.cs\n\nIDE0051 messages occur that state the methods in the class are not used, when in fact, they are.\n\nhttps://i.imgur.com/LrENm63.png\n\n---\n### Original Comments\n\n#### Visual Studio Feedback System on 1/5/2020, 11:57 PM: \n\n<p>We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.</p>\n\n#### Visual Studio Feedback System on 1/13/2020, 11:24 AM: \n\n<p>This issue is currently being investigated. Our team will get back to you if either more information is needed, a workaround is available, or the issue is resolved.</p>\n\n\n---\n### Original Solutions\n(no solutions)","Url":"https://github.com/dotnet/roslyn/issues/40956","RelatedDescription":"Closed issue \"Inaccurate IDE0051 Messages\" (#40956)"},{"Id":"549802838","IsPullRequest":false,"CreatedAt":"2020-01-14T20:34:27","Actor":"gafter","Number":"40960","RawContent":null,"Title":"`is dynamic` should be treated as a \"pure null\" check","State":"open","Body":"A \"pure null check\" enables nullable analysis to infer that the input may be null on one branch, even if it thought the input could not be null before.  Currently tests such as `is null` and `is object` and `is {}` are pure null checks.\r\n\r\n`is dynamic` should be a pure null check too.\r\n\r\nIf you write that in source the compiler produces a warning that says that is means the same thing as `is object` and that it just performs a null check!\r\n```\r\nwarning CS1981: Using 'is' to test compatibility with 'dynamic' is essentially identical to testing compatibility with 'Object' and will succeed for all non-null values\r\n```\r\nSo this should be treated as a pure null test because\r\n1. The compiler tells me that it is the same as `is object`\r\n2. The types `object` and `dynamic` are “equivalent”\r\n\r\nThis was discussed by email and approved by the LDM as consistent with the policy of when a null test should be considered pure.\r\n","Url":"https://github.com/dotnet/roslyn/issues/40960","RelatedDescription":"Open issue \"`is dynamic` should be treated as a \"pure null\" check\" (#40960)"},{"Id":"549792513","IsPullRequest":true,"CreatedAt":"2020-01-14T20:13:36","Actor":"RikkiGibson","Number":"40959","RawContent":null,"Title":"Support EnumeratorCancellationAttribute in local functions","State":"open","Body":"Related to #38801 ","Url":"https://github.com/dotnet/roslyn/pull/40959","RelatedDescription":"Open PR \"Support EnumeratorCancellationAttribute in local functions\" (#40959)"},{"Id":"549522851","IsPullRequest":true,"CreatedAt":"2020-01-14T19:47:52","Actor":"dotnet-bot","Number":"40953","RawContent":null,"Title":"Merge master to master-vs-deps","State":"closed","Body":"\nThis is an automatically generated pull request from master into master-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-master-vs-deps\ngit reset --hard upstream/master-vs-deps\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-master-vs-deps --force\n```\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/40953","RelatedDescription":"Closed or merged PR \"Merge master to master-vs-deps\" (#40953)"},{"Id":"549522085","IsPullRequest":true,"CreatedAt":"2020-01-14T19:47:42","Actor":"dotnet-bot","Number":"40952","RawContent":null,"Title":"Merge master to release/dev16.6-preview1","State":"closed","Body":"\nThis is an automatically generated pull request from master into release/dev16.6-preview1.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-release/dev16.6-preview1\ngit reset --hard upstream/release/dev16.6-preview1\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-release/dev16.6-preview1 --force\n```\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/40952","RelatedDescription":"Closed or merged PR \"Merge master to release/dev16.6-preview1\" (#40952)"},{"Id":"549759421","IsPullRequest":false,"CreatedAt":"2020-01-14T19:05:33","Actor":"tmat","Number":"40958","RawContent":null,"Title":"Remove static mutable field: WrapItemsAction.s_mruTitles","State":"open","Body":"RecordCodeActionOperation relies on updating this global state.","Url":"https://github.com/dotnet/roslyn/issues/40958","RelatedDescription":"Open issue \"Remove static mutable field: WrapItemsAction.s_mruTitles\" (#40958)"},{"Id":"549758539","IsPullRequest":false,"CreatedAt":"2020-01-14T19:03:39","Actor":"pebezo","Number":"40957","RawContent":null,"Title":"New not null syntax \"is {}\" vs \"!= null\" for structs","State":"open","Body":"**Version Used**: C# 8, .NET Core 3.1\r\n\r\n**Steps to Reproduce**:\r\n\r\nWhen using a nullable struct (for example Datetime?) the IDE shows a `Possible System.InvalidOperationException` warning when inside an \"if (something is {})\" block.\r\n\r\n```csharp\r\nDateTime? date = null;\r\n\r\nif ((new Random().Next(3) == 2))\r\n{\r\n    date = DateTime.Today;\r\n}\r\n\r\nif (date != null)\r\n{\r\n    DateTime bar = date.Value;\r\n    Console.WriteLine(\"Date is \" + date + \"-\" + bar);\r\n}\r\n\r\nif (date is {})\r\n{\r\n    DateTime bar = date.Value;  // <- warning here\r\n    Console.WriteLine(\"Date is \" + date + \"-\" + bar);\r\n}\r\n```\r\n![image](https://user-images.githubusercontent.com/1287097/72373316-07cd0780-36d6-11ea-8f4e-0655d8701ebd.png)\r\n\r\n**Expected Behavior**:\r\n\r\nBoth \"if\" statements should behave the same way; no warning on he second \"if\".\r\n\r\n**Actual Behavior**:\r\n\r\nThe IDE shows a warning, although the program seems to run correctly.","Url":"https://github.com/dotnet/roslyn/issues/40957","RelatedDescription":"Open issue \"New not null syntax \"is {}\" vs \"!= null\" for structs\" (#40957)"},{"Id":"549290208","IsPullRequest":true,"CreatedAt":"2020-01-14T18:42:50","Actor":"tmat","Number":"40947","RawContent":null,"Title":"EnC: Tweak handling of out-of-sync documents to work around source file content inconsistencies","State":"closed","Body":"Only check output PDB, not debugger SymReader, for document checksums.\r\nTurns out SymReader does not support reading document checksums once EnC changes have been applied.\r\n\r\nBetter handle errors that might occur when validating checksums. Previously some of the errors were not reported as diagnostics.\r\n\r\nDo not block in presence of out-of-sync documents. We previously blocked EnC (and stepping) when we observed a source file that is out-of-sync (i.e. its current content does not match the checksum in the originally built PDB). We can however just ignore these files and report a warning that changes made to this file won’t be applied until the file content is reverted back to the state it was when the PDB was built (the file transitions to “matching” state). Once a file is in matching state it can’t change back to another state. We know that we have not applied any change to the code that was compiled from the file because we ignored the file while it was in out-of-sync state. Therefore we know that any changes made from now on can be safely applied to the debuggee. \r\n\r\nIf we can’t determine whether a file matches or not due to error reading the PDB or the source file content we can treat it similarly to out-of-sync file. That is, ignore any changes until we are able to confirm the file matches. That can happen if, e.g. the PDB is temporarily locked by another process and unlocked later.\r\n\r\nSimplify implementation of GetStatusAsync.\r\n \r\nFixes VSO [1051496](https://dev.azure.com/devdiv/DevDiv/_workitems/edit/1051496) ([VS feedback](https://developercommunity.visualstudio.com/content/problem/880533/edits-were-made-which-cannot-be-compiled-stop-debu.html))\r\n","Url":"https://github.com/dotnet/roslyn/pull/40947","RelatedDescription":"Closed or merged PR \"EnC: Tweak handling of out-of-sync documents to work around source file content inconsistencies\" (#40947)"},{"Id":"549667034","IsPullRequest":false,"CreatedAt":"2020-01-14T16:07:55","Actor":"mrward","Number":"40955","RawContent":null,"Title":"Configure or supress issue adds editorconfig file link to different project ","State":"open","Body":"**Version Used**: VS Win 16.4.2\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Create a solution with two .NET Framework class libraries called ProjectA and ProjectB.\r\n2. In Class1.cs of ProjectB add some code inside a Class1 constructor:\r\n\r\n    public Class1()\r\n    {\r\n       int abc = 0;\r\n    }\r\n3. Right click abc and select Quick Actions and Refactorings - Configure or Suppress issues - Configure CS0219 severity - Error.\r\n\r\n**Expected Behavior**:\r\n\r\n.editorconfig file link is added to ProjectB.\r\n\r\n**Actual Behavior**:\r\n\r\n.editorconfig file link is added to ProjectA.\r\n\r\nNot sure if this is by design. It was confusing to me since I was expecting it to be added to the same project where the Class1.cs file was being worked on.","Url":"https://github.com/dotnet/roslyn/issues/40955","RelatedDescription":"Open issue \"Configure or supress issue adds editorconfig file link to different project \" (#40955)"},{"Id":"549462487","IsPullRequest":false,"CreatedAt":"2020-01-14T10:12:39","Actor":"kindermannhubert","Number":"40951","RawContent":null,"Title":"Full solution analysis only for certain analyzers","State":"open","Body":"Is there any way to tell some analyzer that it should run only for open documents (regardless of \"Full solution analysis\" settings)?\r\n\r\nHere's our setup:\r\n- We have some big C# solutions (100+ projects).\r\n- We use IDE, 3rd and custom Roslyn analyzers.\r\n   - Primarily we have configuration of analyzers in ruleset file which is common to all projects.\r\n   - When we use analyzer its severity is usually set to Warning.\r\n- **We have \"Full solution analysis\" enabled**.\r\n   - The reason for this is we want to know about all warning during the development. \r\n   - That means all enabled analyzer diagnostics must be fixed because we do not want any warnings in our solutions.\r\n- When we enable new analyzer:\r\n   - We set its severity to \"Info\"/\"Message\".\r\n   - There is typically hundreds to thousands occurrences so it takes a while to fix (not all diagnostics can be fixed automatically).\r\n   - When someone wants to fix some occurrences he enables \"Messages\" in Error List window.\r\n   - We have \"Messages\" in Error List window usually turned of because it contains large number of currently unfixed diagnostics.\r\n- Analyzers in our projects run only in \"IntelliSense session\" and not while standard building.\r\n   - We remove Analyzer elements from projects files depending on 'BuildingInsideVisualStudio' and 'DesignTimeBuild' MsBuild properties.\r\n   - This is just optimization of build times.\r\n   - Not ideal but works and builds are 3x faster (which saves A LOT of time).\r\n   - On build servers this optimization is disabled so they correctly report all errors/warnings.\r\n\r\nRationale why we would appreciate this feature:\r\n- Because of \"Full solution analysis\" enabled we can use only analyzers which diagnostics we are able (or which we want) to fix globally.\r\n- When we would enable analyzers which we would like to fix only somewhere we would be totally overwhelmed by all diagnostics (and VS too - its slow when its reporting a lot of diagnostics).\r\n   - Disabling diagnostics by pragmas at all places we don't care about is not an option. Code would be totally cluttered by them.\r\n- If there would be some option to tell analyzer (ideally in ruleset file) that it is enabled but it should behave like \"Full solution analysis\" is disabled it would allow us to use much more analyzers because they would generate diagnostics only in currently open files.\r\n\r\nWhat do you think about it? Or is there any completely different approach to handle analyzers that would solve our problems? The main thing is that we want some analyzers to be enforced and want to know about its diagnostics before putting our changes to version control system.\r\n\r\nThanks for the answers!","Url":"https://github.com/dotnet/roslyn/issues/40951","RelatedDescription":"Open issue \"Full solution analysis only for certain analyzers\" (#40951)"},{"Id":"549387471","IsPullRequest":true,"CreatedAt":"2020-01-14T07:36:39","Actor":"333fred","Number":"40950","RawContent":null,"Title":"Fix type expression nullability to be the declared nullability, and c…","State":"open","Body":"…ompensate for when passed an indentifier that is parented by a NullableSyntax.\r\n\r\nFixes https://github.com/dotnet/roslyn/issues/40925.\r\n\r\n@jcouv, this fixes the bug you showed, but I'm not convinced it's the cause of the simplification issues. Further, I'm not convinced by the arguments you made in the bug: the IDE needs to understand that it should not be calling `GetTypeInfo` on the underlying syntax node, and should instead be calling it on the containing syntax. If calling it on the syntax underlying a `NullableTypeSyntax` is core to how the IDE simplifier works here, the design is busted.","Url":"https://github.com/dotnet/roslyn/pull/40950","RelatedDescription":"Open PR \"Fix type expression nullability to be the declared nullability, and c…\" (#40950)"},{"Id":"549362651","IsPullRequest":false,"CreatedAt":"2020-01-14T06:33:13","Actor":"vsfeedback","Number":"40949","RawContent":null,"Title":"Intellisense yield return completion","State":"open","Body":"_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/problem/882092/intellisense-yield-return-completion.html)._\n\n---\nIntellisense does not complete \"yield ret...\" as \"yield return\"\n\n<space> is cursor position when pressing the space key.\n_ is cursor\n\nExamples where completion works:\nyie<space> => yield\nret<space> => return\n\nThis does not generate completion:\nyield ret<space> => yield ret _\n\nExpected behavior:\nyield ret<space> => yield return _\n\nThe intellisense tooltip is consistent with observed behavior.\n\"return\" is strongly highlighted when completion works and softly highlighten when completion doesn't work.\n\n---\n### Original Comments\n\n#### Visual Studio Feedback System on 1/13/2020, 01:13 AM: \n\n<p>We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.</p>\n\n#### Visual Studio Feedback System on 1/13/2020, 11:48 AM: \n\n<p>This issue is currently being investigated. Our team will get back to you if either more information is needed, a workaround is available, or the issue is resolved.</p>\n\n\n---\n### Original Solutions\n(no solutions)","Url":"https://github.com/dotnet/roslyn/issues/40949","RelatedDescription":"Open issue \"Intellisense yield return completion\" (#40949)"}],"ResultType":"GitHubIssue"},"CoreRT-Issues":{"Issues":[{"Id":"549435138","IsPullRequest":true,"CreatedAt":"2020-01-14T14:16:42","Actor":"MichalStrehovsky","Number":"7954","RawContent":null,"Title":"Fix sigantures in calli","State":"closed","Body":"* The called methods accept a byref, not a pointer.\r\n* The called methods don't return anything.\r\n\r\nThis is also a slight perf improvement (no longer need to allocate the lambda for `PinObjectAndCall`).\r\n\r\nFixes #7951.","Url":"https://github.com/dotnet/corert/pull/7954","RelatedDescription":"Closed or merged PR \"Fix sigantures in calli\" (#7954)"},{"Id":"548637124","IsPullRequest":false,"CreatedAt":"2020-01-14T14:16:42","Actor":"yowl","Number":"7951","RawContent":null,"Title":"Wasm: CalliIntrinsics.Call<T> is generating invalid calli","State":"closed","Body":"https://github.com/dotnet/corert/blob/42f1bc077327d6e3647861bec00cfe0458187071/src/System.Private.CoreLib/src/System/Runtime/InteropServices/Marshal.CoreRT.cs#L200-L203\r\n\r\nThis is currently a problem for the wasm backend.  With the input\r\n```\r\n    // something to exercise CalliIntrinsics.Call<T>\r\n    struct NonBlittableToMarshal\r\n    {\r\n        internal int a;\r\n        internal object b;\r\n    }\r\n\r\n    static void TestMarshalStructToPtr()\r\n    {\r\n        StartTest(\"Test marshal struct to ptr\");\r\n        NonBlittableToMarshal s = new NonBlittableToMarshal();\r\n        s.a = 1;\r\n        s.b = null;\r\n        var pParms = Marshal.AllocHGlobal(Marshal.SizeOf(typeof(NonBlittableToMarshal)));\r\n        Marshal.StructureToPtr(s, pParms, false);\r\n        EndTest(true);\r\n    }\r\n```\r\nThis fails at runtime with an invalid signature message, with ASSERTIONS=2, it produces:\r\n\r\n```\r\nInvalid function pointer 4692 called with signature 'iiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this). This pointer might make sense in another type signature: as sig \"vi\" pointing to function _Internal_CompilerGenerated__Module____ManagedToNative_HelloWasm_Program_NonBlittableToMarshal, \r\n```\r\nThis is saying that there is a method with a void (int) signature at the right function index, but it does not match the called convention which is int (int,int,int).  There is a method produced with a `vi` signature, although it looks incomplete and throws an exception\r\n```\r\ndefine void @\"Internal_CompilerGenerated__Module___<ManagedToNative>HelloWasm_Program_NonBlittableToMarshal\"(i8*) {\r\nProlog:\r\n  br label %Block0\r\n\r\nBlock0:                                           ; preds = %Prolog\r\n  %LoadAddressOfSymbolNode = load i32*, i32** @__Str_Struct__NonBlittableToMarshal__6058104189200C7DE718BE6B8F3608243B48FAFC59CD4893FB0EFFADF26C30EA___SYMBOL\r\n  %1 = getelementptr i8, i8* %0, i32 8\r\n  %Temp0_ = getelementptr i8, i8* %0, i32 8\r\n  %LoadeeType = load i32, i32* bitcast (i32** @__EEType_S_P_CoreLib_System_Exception___SYMBOL to i32*)\r\n  call void @S_P_CoreLib_System_Runtime_RuntimeExports__RhNewObject(i8* %1, i8* %Temp0_, i32 %LoadeeType)\r\n  %2 = getelementptr i8, i8* %0, i32 12\r\n  %Temp0_1 = getelementptr i8, i8* %0, i32 8\r\n  %CastPtrTemp0_ = bitcast i8* %Temp0_1 to i8**\r\n  %LdTemp0_ = load i8*, i8** %CastPtrTemp0_\r\n  %3 = getelementptr i8, i8* %2, i32 0\r\n  %CastPtrTypedStore = bitcast i8* %3 to i8**\r\n  store i8* %LdTemp0_, i8** %CastPtrTypedStore\r\n  %CastPtr = bitcast i32* %LoadAddressOfSymbolNode to i8*\r\n  %4 = getelementptr i8, i8* %2, i32 4\r\n  %CastPtrTypedStore2 = bitcast i8* %4 to i8**\r\n  store i8* %CastPtr, i8** %CastPtrTypedStore2\r\n  call void @S_P_CoreLib_System_Exception___ctor_0(i8* %2)\r\n  call void @llvm.trap()\r\n  unreachable\r\n}\r\n```\r\nAnd the `iiii` signature method would match the calli inside \r\n```\r\n                        CalliIntrinsics.Call<int>(\r\n                            marshalStub,\r\n                            ((void*)((IntPtr*)unboxedStructPtr + offset)),  // safe (need to adjust offset as it could be class)\r\n                            (void*)ptr                                      // unsafe (no need to adjust as it is always struct)\r\n                        );\r\n``` \r\nWith an the extra `i` for the shadow stack.  I guess the question starts with how does the marshal code get generated because it shouldn't terminate in a throw I imagine?","Url":"https://github.com/dotnet/corert/issues/7951","RelatedDescription":"Closed issue \"Wasm: CalliIntrinsics.Call<T> is generating invalid calli\" (#7951)"},{"Id":"548791451","IsPullRequest":false,"CreatedAt":"2020-01-14T09:42:02","Actor":"akinohana","Number":"7953","RawContent":null,"Title":"How to fix Error setting value to Field on XXXXX After CoreRT?","State":"closed","Body":"this happens with following code, it works fine before CoreRT\r\n```\r\n\tinternal class C1\r\n    {\r\n\t    public string p;\r\n    }\r\n\r\n    var res = JsonConvert.DeserializeObject<C1>(jsonString);\r\n```\r\n\r\njsonString = \"{\\\\\"p\\\\\":\\\\\"xxxxx\\\\\"}\"\r\n\r\nis there a way I can solve this issue? \r\n\r\nor it's not possible, maybe because CoreRT can't do reflection which is required by `DeserializeObject`?\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/corert/issues/7953","RelatedDescription":"Closed issue \"How to fix Error setting value to Field on XXXXX After CoreRT?\" (#7953)"},{"Id":"548709455","IsPullRequest":false,"CreatedAt":"2020-01-13T05:15:33","Actor":"DenMpei","Number":"7952","RawContent":null,"Title":"Error when publish","State":"open","Body":"Good morning! Sometimes, such an error occurs when publishing (dotnet publish -c Release -r win-x64). They in no way treated, but disappears by itself after a while. Prompt, what to see and how to fix?\r\nMicrosoft.DotNet.ILCompiler package version: 1.0.0-alpha-28327-01, but I tried on 1.0.0-alpha-28510-01\r\n\r\nGenerating compatible native code. To optimize for size or speed, visit https://aka.ms/OptimizeCoreRT\r\n16:06:21 EXEC : warning : RD.XML processing will change before release (https://github.com/dotnet/corert/issues/5001) [D:\\Jenkins\\workspace\\Project.csproj]\r\n16:06:21 EXEC : error : External component has thrown an exception. [D:\\Jenkins\\workspace\\Project.csproj]\r\n16:06:21   System.Runtime.InteropServices.SEHException (0x80004005): External component has thrown an exception.\r\n16:06:21      at ILCompiler.DependencyAnalysis.ObjectWriter.FinishObjWriter(IntPtr objWriter)\r\n16:06:21      at ILCompiler.DependencyAnalysis.ObjectWriter.EmitObject(String objectFilePath, IEnumerable`1 nodes, NodeFactory factory, IObjectDumper dumper)\r\n16:06:21      at ILCompiler.Compilation.ILCompiler.ICompilation.Compile(String outputFile, ObjectDumper dumper)\r\n16:06:22      at ILCompiler.Program.Run(String[] args)\r\n16:06:22      at ILCompiler.Program.Main(String[] args)\r\n16:06:22 C:\\Users\\rpt-virtual\\.nuget\\packages\\microsoft.dotnet.ilcompiler\\1.0.0-alpha-28327-01\\build\\Microsoft.NETCore.Native.targets(226,5): error MSB3073: The command \"\"C:\\Users\\user\\.nuget\\packages\\runtime.win-x64.microsoft.dotnet.ilcompiler\\1.0.0-alpha-28327-01\\tools\\ilc\" @\"obj\\Release\\netcoreapp2.2\\win-x64\\native\\Project.ilc.rsp\"\" exited with code 1. [D:\\Jenkins\\workspace\\Project.csproj]","Url":"https://github.com/dotnet/corert/issues/7952","RelatedDescription":"Open issue \"Error when publish\" (#7952)"},{"Id":"548158930","IsPullRequest":true,"CreatedAt":"2020-01-11T16:55:53","Actor":"jkotas","Number":"7948","RawContent":null,"Title":"Use plain clang by default on Linux","State":"closed","Body":"clang-3.9 is not available on recent Linux distros. Typically, there is clang alias setup for a good version of clang so just use that by default.\r\n\r\nFixes #5654","Url":"https://github.com/dotnet/corert/pull/7948","RelatedDescription":"Closed or merged PR \"Use plain clang by default on Linux\" (#7948)"},{"Id":"548397442","IsPullRequest":true,"CreatedAt":"2020-01-11T09:03:06","Actor":"jkotas","Number":"7950","RawContent":null,"Title":"Initialize global VEH after runtime instance","State":"closed","Body":"VEH may use the runtime instance","Url":"https://github.com/dotnet/corert/pull/7950","RelatedDescription":"Closed or merged PR \"Initialize global VEH after runtime instance\" (#7950)"},{"Id":"548304234","IsPullRequest":true,"CreatedAt":"2020-01-10T23:57:47","Actor":"jkotas","Number":"7949","RawContent":null,"Title":"Make sure MethodFixupCell is pointer aligned","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/7949","RelatedDescription":"Closed or merged PR \"Make sure MethodFixupCell is pointer aligned\" (#7949)"},{"Id":"546964830","IsPullRequest":true,"CreatedAt":"2020-01-09T13:46:13","Actor":"MichalStrehovsky","Number":"7944","RawContent":null,"Title":"Progress towards x86 Windows support","State":"closed","Body":"This, along with #7943 and dotnet/runtime#1451 is enough to get my snake game running on x86 Windows.\r\n\r\nSee individual commits for details.\r\n\r\nI'm not particularly happy with the \"Fix ObjWriter build\" commit - building LLVM with the forced stdcall calling convention hits some template expansion snafu and I had to back it out in a weird way.","Url":"https://github.com/dotnet/corert/pull/7944","RelatedDescription":"Closed or merged PR \"Progress towards x86 Windows support\" (#7944)"},{"Id":"547338363","IsPullRequest":true,"CreatedAt":"2020-01-09T11:25:48","Actor":"MichalStrehovsky","Number":"7947","RawContent":null,"Title":"Disable the \"Update versions repository\" step","State":"closed","Body":"This step has been failing for months. It's a nuisance because it also makes the official build show as failed. All we care about is publishing NuGet packages and that happens before this step.","Url":"https://github.com/dotnet/corert/pull/7947","RelatedDescription":"Closed or merged PR \"Disable the \"Update versions repository\" step\" (#7947)"},{"Id":"547300953","IsPullRequest":true,"CreatedAt":"2020-01-09T08:53:18","Actor":"jkotas","Number":"7946","RawContent":null,"Title":"Fix intermittent stack overflow","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/7946","RelatedDescription":"Closed or merged PR \"Fix intermittent stack overflow\" (#7946)"},{"Id":"547118932","IsPullRequest":true,"CreatedAt":"2020-01-09T07:38:43","Actor":"yowl","Number":"7945","RawContent":null,"Title":"Wasm: fix for implicit ext of UInt16 to UInt32","State":"closed","Body":"Previously this was doing a sext resulting in left filling with the MSB of the UInt16.  This change adds a test for this and fixes it.","Url":"https://github.com/dotnet/corert/pull/7945","RelatedDescription":"Closed or merged PR \"Wasm: fix for implicit ext of UInt16 to UInt32\" (#7945)"},{"Id":"546954776","IsPullRequest":true,"CreatedAt":"2020-01-08T16:05:08","Actor":"MichalStrehovsky","Number":"7943","RawContent":null,"Title":"Implement Windows x86 name mangling","State":"open","Body":"So far CoreRT only had to deal with platforms that have straightforward mangling for `extern \"C\"` symbols (which is what we shoot for in CoreRT).\r\n\r\nWindows x86 stdcall calling convention does the weird thing where `@XXX` is appended to symbol names (where XXX is the number of bytes of arguments to the method).\r\n\r\nThis pull request implements enough of what's needed to get p/invokes up and running.\r\n\r\nI'm marking it as draft because we probably want to make a decision on how to mangle our symbol definitions too (right now this only does something for p/invoke references).","Url":"https://github.com/dotnet/corert/pull/7943","RelatedDescription":"Open PR \"Implement Windows x86 name mangling\" (#7943)"},{"Id":"546250661","IsPullRequest":false,"CreatedAt":"2020-01-08T14:49:05","Actor":"psantosl","Number":"7942","RawContent":null,"Title":"The command ilc exited with code 137.","State":"closed","Body":"Hi,\r\n\r\nGetting this when trying to build our code with corert on OpenSuse 15.1 Leap.\r\n\r\nOS: OpenSuse 15.1 Leap (vmware I use for development).\r\nclang: version 7.0.1 (tags/RELEASE_701/final 349238)\r\nInstalled libncurses5 to fix dependency in libobjwriter.so\r\n\r\nGot stuck after that:\r\n\r\n```\r\nCppCompilerAndLinker=clang dotnet publish server-reduced-netcore.csproj -r linux-x64 -c Release /p:Mode=CoreRT\r\nMicrosoft (R) Build Engine version 16.4.0+e901037fe for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  Restore completed in 76.89 ms for /home/pablo/wkspaces/wkplastic/01plastic/src/server/server-reduced-netcore.csproj.\r\n  server-reduced-netcore -> /home/pablo/wkspaces/wkplastic/01plastic/bin/server-netcore/linux-x64/plasticd.dll\r\n  /usr/bin/clang\r\n  Generating native code\r\n  /tmp/tmpd8f36c85e5a444a1a7e64809b471adea.exec.cmd: line 2: 41255 Killed                  \"/home/pablo/.nuget/packages/runtime.linux-x64.microsoft.dotnet.ilcompiler/1.0.0-alpha-28507-01/tools/ilc\" @\"obj/Release/linux-x64/native/plasticd.ilc.rsp\"\r\n/home/pablo/.nuget/packages/microsoft.dotnet.ilcompiler/1.0.0-alpha-28507-01/build/Microsoft.NETCore.Native.targets(226,5): error MSB3073: The command \"\"/home/pablo/.nuget/packages/runtime.linux-x64.microsoft.dotnet.ilcompiler/1.0.0-alpha-28507-01/tools/ilc\" @\"obj/Release/linux-x64/native/plasticd.ilc.rsp\"\" exited with code 137. [/home/pablo/wkspaces/wkplastic/01plastic/src/server/server-reduced-netcore.csproj]\r\n```\r\n\r\nWe are trying to build plastic scm natively for Linux. It builds and runs ok on Windows :-)\r\n\r\n\r\nThanks!!\r\n","Url":"https://github.com/dotnet/corert/issues/7942","RelatedDescription":"Closed issue \"The command ilc exited with code 137.\" (#7942)"},{"Id":"545488687","IsPullRequest":false,"CreatedAt":"2020-01-06T00:27:15","Actor":"yowl","Number":"7941","RawContent":null,"Title":"Wasm: question: how best to make CoreRT a drop in replacement regards WebAssembly.Runtime.InvokeJS","State":"open","Body":"The Uno Platform makes use of https://github.com/mono/mono/blob/59a1eade7ce4fb79c56a47d043151fbdd5363b1b/sdks/wasm/src/driver.c#L323 for JS interop.  It does this here: https://github.com/unoplatform/uno/blob/1dede9e628108c7c7b71d6aee4cd759c0f9bf9d9/src/Uno.Foundation/Runtime.wasm.cs#L21.  \r\n\r\nHow would that be best handled so that CoreRT could be a drop in replacement for mono?  Could it intercept the call to `WebAssembly.Runtime.InvokeJS` in https://github.com/dotnet/corert/blob/f52a8e504b0485dff9e4737a6fb9535d5eccb77d/src/ILCompiler.WebAssembly/src/CodeGen/ILToWebAssemblyImporter.cs#L1575 and replace with a call to a similar method perhaps in https://github.com/yowl/corert/blob/uno-js-llvm/src/CoreRT.WebAssembly.Interop/InternalCalls.cs.  Not asking how to actually get into JS, but what would be the right way to start.\r\n\r\nThanks.","Url":"https://github.com/dotnet/corert/issues/7941","RelatedDescription":"Open issue \"Wasm: question: how best to make CoreRT a drop in replacement regards WebAssembly.Runtime.InvokeJS\" (#7941)"},{"Id":"545388992","IsPullRequest":false,"CreatedAt":"2020-01-05T08:30:07","Actor":"MichalStrehovsky","Number":"7940","RawContent":null,"Title":"Remove dependency on link.exe and Windows SDK","State":"open","Body":"Link.exe is not available as a standalone tool and gets bundled with the Windows SDK/DDK that is a huge download.\r\n\r\nInvestigate whether we can bundle [LLD](https://lld.llvm.org/).\r\n\r\n- [ ] make sure it can embed NatVis files when targeting Windows\r\n- [ ] make sure it can generate all the debug records we emit\r\n- [ ] make sure it supports SourceLink (I have a WIP SourceLink support in a branch that I can never get to - https://github.com/MichalStrehovsky/corert/commit/84e53e3eec9ff24e666eb55792de95eb4b4e6585)\r\n- [ ] make sure it can generate import libraries out of DEF files a la `link.exe /lib /def:foo.def /machine:x64 /out:foo.lib` (this is our way out of the \"what kind of import libraries to specify\" hell + gets rid of the Windows SDK dependency)\r\n\r\nThis is also a stepping stone to enable cross-compilation (e.g. target Windows from Linux and Linux from Windows).","Url":"https://github.com/dotnet/corert/issues/7940","RelatedDescription":"Open issue \"Remove dependency on link.exe and Windows SDK\" (#7940)"},{"Id":"545282390","IsPullRequest":true,"CreatedAt":"2020-01-04T12:59:34","Actor":"MichalStrehovsky","Number":"7939","RawContent":null,"Title":"Port changes from dotnet/runtime","State":"open","Body":"First commit is xcopy from crossgen2, the rest is adjustments. I'm going to squash and merge, this is just for posterity.\r\n\r\nI'm planning to sync things back to the runtime repo because we're starting to accumulate changes on this side.","Url":"https://github.com/dotnet/corert/pull/7939","RelatedDescription":"Open PR \"Port changes from dotnet/runtime\" (#7939)"},{"Id":"545220256","IsPullRequest":true,"CreatedAt":"2020-01-04T00:56:18","Actor":"yowl","Number":"7938","RawContent":null,"Title":"Wasm: generic struct and generic context in finally funclets","State":"open","Body":"This fixes a few issues encountered when compiling the Uno platform with regards to shared generics.\r\n\r\n- Handling of generic structs when passing to functions and when returned.\r\n- Getting the generic context in finally blocks\r\n- Creation of incorrect type for some generic structures.\r\n\r\nFixes #7935 ","Url":"https://github.com/dotnet/corert/pull/7938","RelatedDescription":"Open PR \"Wasm: generic struct and generic context in finally funclets\" (#7938)"},{"Id":"545180752","IsPullRequest":false,"CreatedAt":"2020-01-04T00:24:31","Actor":"QFSW","Number":"7937","RawContent":null,"Title":"Visual Studio 2019 and .NET Core 3.1","State":"closed","Body":"I've been trying to give CoreRT a go but am unable to add the package\r\n```\r\nerror: Unable to find package Microsoft.DotNet.ILCompiler. No packages exist with this id in source(s): dotnet-core, nuget\r\n```\r\nDoes CoreRT still require VS17 and .NET Core 2.0 or is the readme outdated?\r\n\r\nIf not, any idea what I am doing wrong?","Url":"https://github.com/dotnet/corert/issues/7937","RelatedDescription":"Closed issue \"Visual Studio 2019 and .NET Core 3.1\" (#7937)"},{"Id":"544764328","IsPullRequest":false,"CreatedAt":"2020-01-03T12:23:23","Actor":"Sergio0694","Number":"7936","RawContent":null,"Title":"ArrayPool<T> returning a single T item (!) as a T[] reference [UWP]","State":"closed","Body":"Hello,\r\nI've just stumbled upon a very weird bug that's happening for me on UWP (Debug x64). I'm using `ArrayPool<T>.Shared` to rent arrays, and for whatever reason I've started getting an `ArrayTypeMismatchException` when trying to copy items from two rented arrays of the same type. Upon further investigation, turns out the reason is that one of the rented arrays is in fact... Just a single `T` item, and not a `T[]` object. Looks like something went really wrong with the type system and I'd be really curious to know what's going on.\r\nI've personally worked around the issue by just going back to non-pooled arrays in this case, but still this issue was so strange that I though it'd be interesting to share 😄\r\n\r\nHere's a screen:\r\n\r\n![image](https://user-images.githubusercontent.com/10199417/71695441-6cbd5f00-2db2-11ea-9ab3-10ad502e1faf.png)\r\n\r\nYou can see that `T[] newItems` array is in fact a single `T` element, and not an array at all.\r\n\r\nHere's another screen, where I've also added `.GetType()` on the second array just to double check:\r\n\r\n![image](https://user-images.githubusercontent.com/10199417/71695493-95ddef80-2db2-11ea-8964-e6d6d094513f.png)\r\n\r\nHere's the source code of that `Pool<T>` class I'm using: https://gist.github.com/Sergio0694/9a08161830fbcebf26e1973ad2a51cea.\r\n\r\nI've created a repro branch in my repo and I have steps that seem to reproduce the crash reliably, so I'd be happy to give access to the repo to anyone from the team, if you guys want to investigate this.\r\n\r\nThank you for your time, and happy new year to the whole team! 🎉","Url":"https://github.com/dotnet/corert/issues/7936","RelatedDescription":"Closed issue \"ArrayPool<T> returning a single T item (!) as a T[] reference [UWP]\" (#7936)"},{"Id":"544371019","IsPullRequest":false,"CreatedAt":"2020-01-01T15:43:28","Actor":"yowl","Number":"7935","RawContent":null,"Title":"Wasm: Question on type of return values from shared generic calls","State":"open","Body":"As an example, take\r\nhttps://github.com/dotnet/corert/blob/88d75715f4c84c383365a33734d6f0cffe837061/src/System.Private.CoreLib/shared/System/Threading/WaitHandle.cs#L295\r\n\r\nThe second call parameter `safeWaitHandles` is an implicit op to a `Span<SafeWaitHandle?>` from its declaration\r\n```\r\nSafeWaitHandle?[]? safeWaitHandles = RentSafeWaitHandleArray(waitHandles.Length);\r\n```\r\n This implicit method  is a shared generic method so the call in LLVM looks like\r\n\r\n```\r\n%45 = call %\"[S.P.CoreLib]System.Span`1<System.__Canon>\" @\"S_P_CoreLib_System_Span_1<System___Canon>__op_Implicit\"(i8* %43, i8* %CastPtr163)\r\n```\r\nWhere the return is the Canon type, `[S.P.CoreLib]System.Span`1<System.__Canon>`\r\n\r\nThis is not a valid type to pass into `ObtainSafeWaitHandles` as in LLVM that is defined on the concrete type\r\n\r\n```\r\ndefine void @S_P_CoreLib_System_Threading_WaitHandle__ObtainSafeWaitHandles(i8*, %\"[S.P.CoreLib]System.ReadOnlySpan`1<System.Threading.WaitHandle>\", %\"[S.P.CoreLib]System.Span`1<Microsoft.Win32.SafeHandles.SafeWaitHandle>\", %\"[S.P.CoreLib]System.Span`1<native int>\")\r\n```\r\n\r\nWhat would be the right way to solve this?  Should it always convert types to their canonical versions to the extent that `System.Span`1<Microsoft.Win32.SafeHandles.SafeWaitHandle>` is invalid in the LLVM?  ","Url":"https://github.com/dotnet/corert/issues/7935","RelatedDescription":"Open issue \"Wasm: Question on type of return values from shared generic calls\" (#7935)"},{"Id":"543284657","IsPullRequest":true,"CreatedAt":"2020-01-01T05:38:38","Actor":"josephmoresena","Number":"7929","RawContent":null,"Title":"Generate version script automatically unix","State":"closed","Body":"As we discussed in #s, these changes will allow at shared libraries compilation on unix-like platforms to automatically generate a version-script and remove all local symbols and unused code.\r\nAs is said on https://github.com/dotnet/corert/issues/7340#issuecomment-486095150 the .so file contains all debug information so we need still remove all this information from file with strip in order to reduce significatly the size of .so file.","Url":"https://github.com/dotnet/corert/pull/7929","RelatedDescription":"Closed or merged PR \"Generate version script automatically unix\" (#7929)"},{"Id":"544258401","IsPullRequest":false,"CreatedAt":"2019-12-31T19:46:40","Actor":"yowl","Number":"7934","RawContent":null,"Title":"Wasm: fails the simple Generics TestNullableCasting test","State":"open","Body":"This test fails for Wasm.  Have tried the suggestion at https://github.com/dotnet/corert/pull/7897/files#r362161168, but hits the assert at https://github.com/dotnet/corert/blob/7cb8f8c93161ac5e365c6feef1379fe16188e191/src/ILCompiler.Compiler/src/Compiler/DependencyAnalysis/ReadyToRunGenericHelperNode.cs#L48 with target `{[S.P.CoreLib]System.Collections.Generic.ICollection`1<T_System.__Canon>}`\r\n\r\nStack\r\n\r\n```\r\n \tSystem.Private.CoreLib.dll!System.Diagnostics.Debug.Assert(bool condition, string message, string detailMessage)\tUnknown\r\n>\tILCompiler.Compiler.dll!ILCompiler.DependencyAnalysis.ReadyToRunGenericHelperNode.GetLookupSignature(ILCompiler.DependencyAnalysis.NodeFactory factory, ILCompiler.DependencyAnalysis.ReadyToRunHelperId id, object target) Line 48\tC#\r\n \tILCompiler.Compiler.dll!ILCompiler.DependencyAnalysis.ReadyToRunGenericHelperNode.ReadyToRunGenericHelperNode(ILCompiler.DependencyAnalysis.NodeFactory factory, ILCompiler.DependencyAnalysis.ReadyToRunHelperId helperId, object target, Internal.TypeSystem.TypeSystemEntity dictionaryOwner) Line 34\tC#\r\n \tILCompiler.Compiler.dll!ILCompiler.DependencyAnalysis.ReadyToRunGenericLookupFromTypeNode.ReadyToRunGenericLookupFromTypeNode(ILCompiler.DependencyAnalysis.NodeFactory factory, ILCompiler.DependencyAnalysis.ReadyToRunHelperId helperId, object target, Internal.TypeSystem.TypeSystemEntity dictionaryOwner) Line 296\tC#\r\n \tILCompiler.WebAssembly.dll!ILCompiler.DependencyAnalysis.WebAssemblyReadyToRunGenericLookupFromTypeNode.WebAssemblyReadyToRunGenericLookupFromTypeNode(ILCompiler.DependencyAnalysis.NodeFactory factory, ILCompiler.DependencyAnalysis.ReadyToRunHelperId helperId, object target, Internal.TypeSystem.TypeSystemEntity dictionaryOwner) Line 12\tC#\r\n \tILCompiler.WebAssembly.dll!ILCompiler.DependencyAnalysis.WebAssemblyCodegenNodeFactory.CreateGenericLookupFromTypeNode(ILCompiler.DependencyAnalysis.NodeFactory.ReadyToRunGenericHelperKey helperKey) Line 88\tC#\r\n \tSystem.Collections.Concurrent.dll!System.Collections.Concurrent.ConcurrentDictionary<ILCompiler.DependencyAnalysis.NodeFactory.ReadyToRunGenericHelperKey, ILCompiler.DependencyAnalysis.ISymbolNode>.GetOrAdd(ILCompiler.DependencyAnalysis.NodeFactory.ReadyToRunGenericHelperKey key, System.Func<ILCompiler.DependencyAnalysis.NodeFactory.ReadyToRunGenericHelperKey, ILCompiler.DependencyAnalysis.ISymbolNode> valueFactory)\tUnknown\r\n \tILCompiler.Compiler.dll!ILCompiler.DependencyAnalysis.NodeFactory.NodeCache<ILCompiler.DependencyAnalysis.NodeFactory.ReadyToRunGenericHelperKey, ILCompiler.DependencyAnalysis.ISymbolNode>.GetOrAdd(ILCompiler.DependencyAnalysis.NodeFactory.ReadyToRunGenericHelperKey key) Line 150\tC#\r\n \tILCompiler.Compiler.dll!ILCompiler.DependencyAnalysis.NodeFactory.ReadyToRunHelperFromTypeLookup(ILCompiler.DependencyAnalysis.ReadyToRunHelperId id, object target, Internal.TypeSystem.TypeSystemEntity dictionaryOwner) Line 910\tC#\r\n \tILCompiler.WebAssembly.dll!Internal.IL.ILImporter.GetGenericLookupHelperAndAddReference(ILCompiler.DependencyAnalysis.ReadyToRunHelperId helperId, object helperArg, out LLVMSharp.LLVMValueRef helper, System.Collections.Generic.IEnumerable<LLVMSharp.LLVMTypeRef> additionalArgs) Line 3981\tC#\r\n \tILCompiler.WebAssembly.dll!Internal.IL.ILImporter.CallGenericHelper(ILCompiler.DependencyAnalysis.ReadyToRunHelperId helperId, object helperArg) Line 1538\tC#\r\n \tILCompiler.WebAssembly.dll!Internal.IL.ILImporter.ImportCasting(Internal.IL.ILOpcode opcode, int token) Line 1516\tC#\r\n \tILCompiler.WebAssembly.dll!Internal.IL.ILImporter.ImportBasicBlock(Internal.IL.ILImporter.BasicBlock basicBlock) Line 597\tC#\r\n \tILCompiler.WebAssembly.dll!Internal.IL.ILImporter.ImportBasicBlocks() Line 304\tC#\r\n \tILCompiler.WebAssembly.dll!Internal.IL.ILImporter.Import() Line 167\tC#\r\n \tILCompiler.WebAssembly.dll!Internal.IL.ILImporter.CompileMethod(ILCompiler.WebAssemblyCodegenCompilation compilation, ILCompiler.DependencyAnalysis.WebAssemblyMethodCodeNode methodCodeNodeNeedingCode) Line 85\tC#\r\n \tILCompiler.WebAssembly.dll!ILCompiler.WebAssemblyCodegenCompilation.ComputeDependencyNodeDependencies(System.Collections.Generic.List<ILCompiler.DependencyAnalysisFramework.DependencyNodeCore<ILCompiler.DependencyAnalysis.NodeFactory>> obj) Line 74\tC#\r\n \tILCompiler.DependencyAnalysisFramework.dll!ILCompiler.DependencyAnalysisFramework.DependencyAnalyzer<ILCompiler.DependencyAnalysisFramework.NoLogStrategy<ILCompiler.DependencyAnalysis.NodeFactory>, ILCompiler.DependencyAnalysis.NodeFactory>.ComputeDependencies(System.Collections.Generic.List<ILCompiler.DependencyAnalysisFramework.DependencyNodeCore<ILCompiler.DependencyAnalysis.NodeFactory>> deferredStaticDependencies) Line 139\tC#\r\n```","Url":"https://github.com/dotnet/corert/issues/7934","RelatedDescription":"Open issue \"Wasm: fails the simple Generics TestNullableCasting test\" (#7934)"},{"Id":"543970884","IsPullRequest":true,"CreatedAt":"2019-12-30T18:29:30","Actor":"yowl","Number":"7933","RawContent":null,"Title":"WIP: Wasm: enables calling generic methods that need a hidden context from finally blocks","State":"open","Body":"Add supports for passing the generic context to finally funclets so that `foreach` statements over e.g. `List<>` can be compiled.  `foreach` will add a finally to call dispose on the enumerator which if the method is generic and needs the context from a hidden parameter was previously not compiling.\r\n\r\nAdded test for this case.\r\n\r\nWIP as depends on #7248 ","Url":"https://github.com/dotnet/corert/pull/7933","RelatedDescription":"Open PR \"WIP: Wasm: enables calling generic methods that need a hidden context from finally blocks\" (#7933)"},{"Id":"543557063","IsPullRequest":true,"CreatedAt":"2019-12-30T00:59:36","Actor":"jkotas","Number":"7932","RawContent":null,"Title":"Update versions of dependencies","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/7932","RelatedDescription":"Closed or merged PR \"Update versions of dependencies\" (#7932)"},{"Id":"543383206","IsPullRequest":true,"CreatedAt":"2019-12-29T17:00:50","Actor":"am11","Number":"7931","RawContent":null,"Title":"Set TRYRUN_OUTPUT in set_cache_value macro","State":"closed","Body":"Also fix cmake warning about unused variable by conditionally including it.\r\nWarning is appearing in every build for sometime, [e.g.](https://dev.azure.com/dnceng/public/_build/results?buildId=467504&view=logs&j=9d9bed24-aafc-5ca0-72eb-d60e686a8d72&t=a99ab234-d192-591f-6b8f-e2800dd13d29&l=117)\r\n\r\nFollowup on https://github.com/dotnet/corert/pull/7899#issuecomment-565599126\r\nContributes to: #4589","Url":"https://github.com/dotnet/corert/pull/7931","RelatedDescription":"Closed or merged PR \"Set TRYRUN_OUTPUT in set_cache_value macro\" (#7931)"},{"Id":"543350545","IsPullRequest":false,"CreatedAt":"2019-12-29T10:25:49","Actor":"secana","Number":"7930","RawContent":null,"Title":"Myget feed does not exist (404)","State":"closed","Body":"I've tried to update CoreRT to the newest version, but I'm not able to download from MyGet.\r\n\r\nI get the following error message:\r\n```powershell\r\ndotnet add package Microsoft.DotNet.ILCompiler --version 1.0.5-prerelease-00002 --source https://www.myget.org/F/dotnet/api/v3/index.json\r\n  Writing C:\\Users\\x\\AppData\\Local\\Temp\\tmp5431.tmp\r\ninfo : Adding PackageReference for package 'Microsoft.DotNet.ILCompiler' into project 'C:\\Users\\Stefa\\source\\repos\\CertDump\\CertDump\\CertDump.csproj'.\r\ninfo : Restoring packages for C:\\Users\\x\\source\\repos\\CertDump\\CertDump\\CertDump.csproj...\r\ninfo :   GET https://api.nuget.org/v3-flatcontainer/microsoft.dotnet.ilcompiler/index.json\r\ninfo :   CACHE https://dotnetfeed.blob.core.windows.net/dotnet-core/flatcontainer/microsoft.dotnet.ilcompiler/index.json\r\ninfo :   NotFound https://api.nuget.org/v3-flatcontainer/microsoft.dotnet.ilcompiler/index.json 689ms\r\nerror: Unable to load the service index for source https://www.myget.org/F/dotnet/api/v3/index.json.\r\nerror:   Response status code does not indicate success: 404 (Feed does not exist.).\r\n```\r\n\r\nAdding the feed to a nuget.config doesn't work either. Any ideas how to get the newest release?","Url":"https://github.com/dotnet/corert/issues/7930","RelatedDescription":"Closed issue \"Myget feed does not exist (404)\" (#7930)"},{"Id":"542941521","IsPullRequest":true,"CreatedAt":"2019-12-27T19:40:25","Actor":"jkotas","Number":"7928","RawContent":null,"Title":"Handle glibc sys/sysctl.h deprecation","State":"closed","Body":"Port https://github.com/dotnet/coreclr/pull/27048 to CoreRT PAL\r\n\r\nFixes #7927","Url":"https://github.com/dotnet/corert/pull/7928","RelatedDescription":"Closed or merged PR \"Handle glibc sys/sysctl.h deprecation\" (#7928)"},{"Id":"542935832","IsPullRequest":false,"CreatedAt":"2019-12-27T19:40:25","Actor":"Christopher876","Number":"7927","RawContent":null,"Title":"[Linux] glibc <sys/sysctl.h> header include build error","State":"closed","Body":"glibc deprecated <sys/sysctl.h> in version 2.30.\r\n\r\n## Software version:\r\n.NET Core 3.1\r\nFedora 31 x64\r\nglibc 2.30\r\n\r\n## Error:\r\n```bash\r\nSetting up directories for build\r\nChecking pre-requisites...\r\nCommencing build of corert native components for Linux.x64.Debug\r\n~/git/corert/bin/obj/Native/Linux.x64.Debug ~/git/corert\r\nInvoking cmake with arguments: \"/home/christopherwilliams/git/corert/buildscripts/..\" Debug\r\n-- Configuring done\r\n-- Generating done\r\n-- Build files have been written to: /home/christopherwilliams/git/corert/bin/obj/Native/Linux.x64.Debug\r\nExecuting make install -j 5 \r\n[  1%] Built target bootstrappercpp\r\n[  1%] Built target AsmOffsets\r\n[  2%] Built target bootstrapper\r\n[  4%] Built target jitinterface\r\n[  6%] Built target bootstrapperdll\r\n[  6%] Building CXX object Runtime/Portable/CMakeFiles/PortableRuntime.dir/__/unix/PalRedhawkUnix.cpp.o\r\n[  9%] Built target System.Private.CoreLib.Native\r\n[  9%] Building CXX object Runtime/Full/CMakeFiles/Runtime.ServerGC.dir/__/unix/PalRedhawkUnix.cpp.o\r\n[  9%] Building CXX object Runtime/Portable/CMakeFiles/PortableRuntime.dir/__/__/gc/unix/events.cpp.o\r\n[ 11%] Built target System.Private.TypeLoader.Native\r\n[ 11%] Building CXX object Runtime/Full/CMakeFiles/Runtime.ServerGC.dir/__/ThunksMapping.cpp.o\r\n[ 11%] Building CXX object Runtime/Full/CMakeFiles/Runtime.dir/__/unix/PalRedhawkUnix.cpp.o\r\nIn file included from /home/christopherwilliams/git/corert/src/Native/Runtime/unix/PalRedhawkUnix.cpp:48:\r\n/usr/include/sys/sysctl.h:21:2: error: \"The <sys/sysctl.h> header is deprecated and will be removed.\" [-Werror,-W#warnings]\r\n#warning \"The <sys/sysctl.h> header is deprecated and will be removed.\"\r\n ^\r\n[ 11%] Building CXX object Runtime/Portable/CMakeFiles/PortableRuntime.dir/__/__/gc/unix/cgroup.cpp.o\r\nIn file included from /home/christopherwilliams/git/corert/src/Native/Runtime/unix/PalRedhawkUnix.cpp:48:\r\n/usr/include/sys/sysctl.h:21:2: error: \"The <sys/sysctl.h> header is deprecated and will be removed.\" [-Werror,-W#warnings]\r\n#warning \"The <sys/sysctl.h> header is deprecated and will be removed.\"\r\n ^\r\n1 error generated.\r\nmake[2]: *** [Runtime/Portable/CMakeFiles/PortableRuntime.dir/build.make:778: Runtime/Portable/CMakeFiles/PortableRuntime.dir/__/unix/PalRedhawkUnix.cpp.o] Error 1\r\nmake[2]: *** Waiting for unfinished jobs....\r\n[ 12%] Building CXX object Runtime/Full/CMakeFiles/Runtime.ServerGC.dir/__/unix/HardwareExceptions.cpp.o\r\n1 error generated.\r\nmake[2]: *** [Runtime/Full/CMakeFiles/Runtime.ServerGC.dir/build.make:778: Runtime/Full/CMakeFiles/Runtime.ServerGC.dir/__/unix/PalRedhawkUnix.cpp.o] Error 1\r\nmake[2]: *** Waiting for unfinished jobs....\r\n[ 12%] Building CXX object Runtime/Full/CMakeFiles/Runtime.dir/__/ThunksMapping.cpp.o\r\nIn file included from /home/christopherwilliams/git/corert/src/Native/Runtime/unix/PalRedhawkUnix.cpp:48:\r\n/usr/include/sys/sysctl.h:21:2: error: \"The <sys/sysctl.h> header is deprecated and will be removed.\" [-Werror,-W#warnings]\r\n#warning \"The <sys/sysctl.h> header is deprecated and will be removed.\"\r\n ^\r\n1 error generated.\r\nmake[2]: *** [Runtime/Full/CMakeFiles/Runtime.dir/build.make:778: Runtime/Full/CMakeFiles/Runtime.dir/__/unix/PalRedhawkUnix.cpp.o] Error 1\r\nmake[2]: *** Waiting for unfinished jobs....\r\nmake[1]: *** [CMakeFiles/Makefile2:334: Runtime/Full/CMakeFiles/Runtime.dir/all] Error 2\r\nmake[1]: *** Waiting for unfinished jobs....\r\nmake[1]: *** [CMakeFiles/Makefile2:280: Runtime/Full/CMakeFiles/Runtime.ServerGC.dir/all] Error 2\r\nmake[1]: *** [CMakeFiles/Makefile2:361: Runtime/Portable/CMakeFiles/PortableRuntime.dir/all] Error 2\r\nmake: *** [Makefile:130: all] Error 2\r\nFailed to build corert native components.\r\n```","Url":"https://github.com/dotnet/corert/issues/7927","RelatedDescription":"Closed issue \"[Linux] glibc <sys/sysctl.h> header include build error\" (#7927)"},{"Id":"542474668","IsPullRequest":false,"CreatedAt":"2019-12-26T08:05:57","Actor":"chenxustu1","Number":"7926","RawContent":null,"Title":"osx with error \"The data area passed to a system call is too small\"","State":"open","Body":"source code works fine on windows.\r\nosx encounter error:\r\n\r\n> EXEC : error : The data area passed to a system call is too small. [/Users/xxxxx.csproj]\r\n   (Exception from HRESULT: 0x8007007A)\r\n  System.Runtime.InteropServices.COMException (0x8007007A): The data area passed to a system call is too small.\r\n   (Exception from HRESULT: 0x8007007A)\r\n     at System.StubHelpers.MngdNativeArrayMarshaler.ConvertContentsToNative(IntPtr pMarshalState, Object& pManagedHome, IntPtr pNativeHome)\r\n     at ILCompiler.DependencyAnalysis.ObjectWriter.GetEnumTypeIndex(IntPtr objWriter, EnumTypeDescriptor enumTypeDescriptor, EnumRecordTypeDescriptor[] typeRecords)\r\n     at ILCompiler.DependencyAnalysis.ObjectWriter.GetEnumTypeIndex(EnumTypeDescriptor enumTypeDescriptor, EnumRecordTypeDescriptor[] typeRecords)\r\n     at ILCompiler.UserDefinedTypeDescriptor.GetEnumTypeIndex(TypeDesc type)\r\n     at ILCompiler.UserDefinedTypeDescriptor.GetVariableTypeIndex(TypeDesc type, Boolean needsCompleteIndex)\r\n     at ILCompiler.UserDefinedTypeDescriptor.GetClassTypeIndex(TypeDesc type, Boolean needsCompleteType)\r\n     at ILCompiler.UserDefinedTypeDescriptor.GetTypeIndex(TypeDesc type, Boolean needsCompleteType)\r\n     at ILCompiler.UserDefinedTypeDescriptor.GetVariableTypeIndex(TypeDesc type, Boolean needsCompleteIndex)\r\n     at ILCompiler.UserDefinedTypeDescriptor.GetVariableTypeIndex(TypeDesc type)\r\n     at ILCompiler.DependencyAnalysis.ObjectWriter.EmitDebugVar(DebugVarInfo debugVar)\r\n     at ILCompiler.DependencyAnalysis.ObjectWriter.EmitDebugVarInfo(ObjectNode node)\r\n     at ILCompiler.DependencyAnalysis.ObjectWriter.EmitObject(String objectFilePath, IEnumerable`1 nodes, NodeFactory factory, IObjectDumper dumper)\r\n     at ILCompiler.RyuJitCompilation.CompileInternal(String outputFile, ObjectDumper dumper)\r\n     at ILCompiler.Compilation.ILCompiler.ICompilation.Compile(String outputFile, ObjectDumper dumper)\r\n     at ILCompiler.Program.Run(String[] args)\r\n     at ILCompiler.Program.Main(String[] args)\r\n/Users/xxxx/.nuget/packages/microsoft.dotnet.ilcompiler/1.0.0-alpha-28426-01/b\r\nuild/Microsoft.NETCore.Native.targets(226,5): error MSB3073: The command \"\"/User\r\ns/xxxx/.nuget/packages/runtime.osx-x64.microsoft.dotnet.ilcompiler/1.0.0-alpha\r\n-28426-01/tools/ilc\" @\"obj/release/netcoreapp3.1/osx-x64/native/xxxxxxxx.ilc.rsp\r\n\"\" exited with code 1. [/Users/xxxxxxxxxxxx.csproj]","Url":"https://github.com/dotnet/corert/issues/7926","RelatedDescription":"Open issue \"osx with error \"The data area passed to a system call is too small\"\" (#7926)"},{"Id":"542126036","IsPullRequest":true,"CreatedAt":"2019-12-24T15:01:00","Actor":"MichalStrehovsky","Number":"7925","RawContent":null,"Title":"Sync CompareInfo.cs with dotnet/runtime","State":"closed","Body":"#7913 brought in an odd change.","Url":"https://github.com/dotnet/corert/pull/7925","RelatedDescription":"Closed or merged PR \"Sync CompareInfo.cs with dotnet/runtime\" (#7925)"}],"ResultType":"GitHubIssue"},"SDK-Issues":{"Issues":[{"Id":"549969913","IsPullRequest":true,"CreatedAt":"2020-01-15T05:10:25","Actor":"dotnet-maestro-bot","Number":"4172","RawContent":null,"Title":"[automated] Merge branch 'release/3.1.1xx' => 'release/3.1.2xx'","State":"open","Body":"I detected changes in the release/3.1.1xx branch which have not been merged yet to release/3.1.2xx. I'm a robot and am configured to help you automatically keep release/3.1.2xx up to date, so I've opened this PR.\r\n\r\nThis PR merges commits made on release/3.1.1xx by the following committers:\n\n* dsplaisted\n* mmitche\n* dotnet-bot\r\n\r\n## Instructions for merging from UI\r\n\r\nThis PR will not be auto-merged. When pull request checks pass, complete this PR by creating a merge commit, *not* a squash or rebase commit.\r\n\r\n<img alt=\"merge button instructions\" src=\"https://i.imgur.com/GepcNJV.png\" width=\"300\" />\r\n\r\nIf this repo does not allow creating merge commits from the GitHub UI, use command line instructions.\r\n\r\n## Instructions for merging via command line\r\n\r\nRun these commands to merge this pull request from the command line.\r\n\r\n``` sh\r\ngit fetch\r\ngit checkout release/3.1.1xx\r\ngit pull --ff-only\r\ngit checkout release/3.1.2xx\r\ngit pull --ff-only\r\ngit merge --no-ff release/3.1.1xx\r\n\r\n# If there are merge conflicts, resolve them and then run git merge --continue to complete the merge\r\n# Pushing the changes to the PR branch will re-trigger PR validation.\r\ngit push https://github.com/dotnet-maestro-bot/sdk HEAD:merge/release/3.1.1xx-to-release/3.1.2xx\r\n```\r\n\r\n<details>\r\n<summary>or if you are using SSH</summary>\r\n\r\n```\r\ngit push git@github.com:dotnet-maestro-bot/sdk HEAD:merge/release/3.1.1xx-to-release/3.1.2xx\r\n```\r\n\r\n</details>\r\n\r\n\r\nAfter PR checks are complete push the branch\r\n```\r\ngit push\r\n```\r\n\r\n## Instructions for resolving conflicts\r\n\r\n:warning: If there are merge conflicts, you will need to resolve them manually before merging. You can do this [using GitHub][resolve-github] or using the [command line][resolve-cli].\r\n\r\n[resolve-github]: https://help.github.com/articles/resolving-a-merge-conflict-on-github/\r\n[resolve-cli]: https://help.github.com/articles/resolving-a-merge-conflict-using-the-command-line/\r\n\r\n## Instructions for updating this pull request\r\n\r\nContributors to this repo have permission update this pull request by pushing to the branch 'merge/release/3.1.1xx-to-release/3.1.2xx'. This can be done to resolve conflicts or make other changes to this pull request before it is merged.\r\n\r\n```\r\ngit checkout -b merge/release/3.1.1xx-to-release/3.1.2xx release/3.1.2xx\r\ngit pull https://github.com/dotnet-maestro-bot/sdk merge/release/3.1.1xx-to-release/3.1.2xx\r\n(make changes)\r\ngit commit -m \"Updated PR with my changes\"\r\ngit push https://github.com/dotnet-maestro-bot/sdk HEAD:merge/release/3.1.1xx-to-release/3.1.2xx\r\n```\r\n\r\n<details>\r\n    <summary>or if you are using SSH</summary>\r\n\r\n```\r\ngit checkout -b merge/release/3.1.1xx-to-release/3.1.2xx release/3.1.2xx\r\ngit pull git@github.com:dotnet-maestro-bot/sdk merge/release/3.1.1xx-to-release/3.1.2xx\r\n(make changes)\r\ngit commit -m \"Updated PR with my changes\"\r\ngit push git@github.com:dotnet-maestro-bot/sdk HEAD:merge/release/3.1.1xx-to-release/3.1.2xx\r\n```\r\n\r\n</details>\r\n\r\nContact .NET Core Engineering if you have questions or issues.\r\nAlso, if this PR was generated incorrectly, help us fix it. See https://github.com/dotnet/arcade/blob/master/scripts/GitHubMergeBranches.ps1.\r\n","Url":"https://github.com/dotnet/sdk/pull/4172","RelatedDescription":"Open PR \"[automated] Merge branch 'release/3.1.1xx' => 'release/3.1.2xx'\" (#4172)"},{"Id":"549919114","IsPullRequest":true,"CreatedAt":"2020-01-15T05:08:05","Actor":"dsplaisted","Number":"4171","RawContent":null,"Title":"Merge internal 3.1.1xx and bump branding to 3.1.102","State":"closed","Body":"Reviewers: There were some merge conflicts with the .yml files, might want to take a look at that.","Url":"https://github.com/dotnet/sdk/pull/4171","RelatedDescription":"Closed or merged PR \"Merge internal 3.1.1xx and bump branding to 3.1.102\" (#4171)"},{"Id":"549852016","IsPullRequest":true,"CreatedAt":"2020-01-15T01:27:42","Actor":"nguerrera","Number":"4167","RawContent":null,"Title":"Merge internal 3.0.1xx and bump branding to 3.0.103","State":"closed","Body":"","Url":"https://github.com/dotnet/sdk/pull/4167","RelatedDescription":"Closed or merged PR \"Merge internal 3.0.1xx and bump branding to 3.0.103\" (#4167)"},{"Id":"548362144","IsPullRequest":true,"CreatedAt":"2020-01-15T00:44:53","Actor":"MSLukeWest","Number":"4155","RawContent":null,"Title":"Updating PublishItemsOutputGroup to include the publish deps file when _UseBuildDependencyFile is false","State":"closed","Body":"This is the output group that gets used with VS installer projects.  Right now we're using the wrong deps file in the case where assets are marked as excluded from publish.\r\n\r\nFor some historical context you can look at the comments in PR 3141.  At that point we didn't actually do a real publish when this output group got used so PublishDepsFilePath wasn't available to us.  But now consuming this output group using an installer project does a real publish, so we can and should use the publish version of the deps file when _UseBuildDependencyFile is false.","Url":"https://github.com/dotnet/sdk/pull/4155","RelatedDescription":"Closed or merged PR \"Updating PublishItemsOutputGroup to include the publish deps file when _UseBuildDependencyFile is false\" (#4155)"},{"Id":"549900376","IsPullRequest":true,"CreatedAt":"2020-01-15T00:43:56","Actor":"MSLukeWest","Number":"4170","RawContent":null,"Title":"Updating PublishItemsOutputGroup to include the publish deps file when _UseBuildDependencyFile is false","State":"open","Body":"This is the output group that gets used with VS installer projects. Right now we're using the wrong deps file in the case where assets are marked as excluded from publish.\r\n\r\nFor some historical context you can look at the comments in PR 3141. At that point we didn't actually do a real publish when this output group got used so PublishDepsFilePath wasn't available to us. But now consuming this output group using an installer project does a real publish, so we can and should use the publish version of the deps file when _UseBuildDependencyFile is false.","Url":"https://github.com/dotnet/sdk/pull/4170","RelatedDescription":"Open PR \"Updating PublishItemsOutputGroup to include the publish deps file when _UseBuildDependencyFile is false\" (#4170)"},{"Id":"549896796","IsPullRequest":false,"CreatedAt":"2020-01-15T00:30:24","Actor":"lukeschlather","Number":"4169","RawContent":null,"Title":"Add a more thorough counterpart to dotnet clean","State":"open","Body":"Per https://github.com/dotnet/docs/issues/12304, `dotnet clean` by design does not delete everything generated by dotnet build. This can result in dotnet build producing dirty published files.\r\n\r\nIt would be nice to have a more thorough command, which could be called `dotnet purge` which deletes all the contents of the bin and obj directories for the project.","Url":"https://github.com/dotnet/sdk/issues/4169","RelatedDescription":"Open issue \"Add a more thorough counterpart to dotnet clean\" (#4169)"},{"Id":"549891162","IsPullRequest":false,"CreatedAt":"2020-01-15T00:11:38","Actor":"assyadh","Number":"4168","RawContent":null,"Title":"Missing cli tag for 3.1.101?","State":"open","Body":"Hi,\r\n\r\nWith .NET Core 3.1.1, there is a cli versioned at 3.1.101 which I can't find a tag for in https://github.com/dotnet/cli/tags\r\n\r\nCan we expect a tag for that version?\r\n\r\nThanks","Url":"https://github.com/dotnet/sdk/issues/4168","RelatedDescription":"Open issue \"Missing cli tag for 3.1.101?\" (#4168)"},{"Id":"548914910","IsPullRequest":true,"CreatedAt":"2020-01-14T19:14:34","Actor":"dotnet-maestro[bot]","Number":"4162","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n## From https://github.com/dotnet/arcade\r\n- **Subscription**: daa187e0-7e60-4c7a-c1ac-08d6354da8a8\r\n- **Build**: 20200112.1\r\n- **Date Produced**: 1/12/2020 1:59 PM\r\n- **Commit**: 250782df013aa8586e21bb225f8efd715372dcf1\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 5.0.0-beta.20062.1\r\n  - **Microsoft.DotNet.Helix.Sdk** -> 5.0.0-beta.20062.1\r\n  - **Microsoft.DotNet.SignTool** -> 5.0.0-beta.20062.1\r\n\r\n[marker]: <> (End:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/4162","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#4162)"},{"Id":"549686105","IsPullRequest":false,"CreatedAt":"2020-01-14T16:39:17","Actor":"sharwell","Number":"4166","RawContent":null,"Title":"RuntimeHostConfigurationOption changes are not applied without a rebuild","State":"open","Body":"### Steps to reproduce\r\n\r\n1. Build a C# solution targeting netcoreapp3.0\r\n2. Add `<ServerGarbageCollection>true</ServerGarbageCollection>` to the project file\r\n4. Build the project again (`/t:Build`)\r\n\r\n### Expected results\r\n\r\nThe output contains `\"System.GC.Server\": true`.\r\n\r\n### Actual results\r\n\r\nThe output does not contain `\"System.GC.Server\": true`.\r\n\r\n### Additional information\r\n\r\nThis was also observed with the `<TieredCompilation>` setting.","Url":"https://github.com/dotnet/sdk/issues/4166","RelatedDescription":"Open issue \"RuntimeHostConfigurationOption changes are not applied without a rebuild\" (#4166)"},{"Id":"548932317","IsPullRequest":true,"CreatedAt":"2020-01-14T14:33:58","Actor":"dotnet-maestro[bot]","Number":"4163","RawContent":null,"Title":"[master] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ea219f43-0754-4d2f-576e-08d76e1d56cb)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: ea219f43-0754-4d2f-576e-08d76e1d56cb\r\n- **Build**: 20200113.7\r\n- **Date Produced**: 1/14/2020 6:41 AM\r\n- **Commit**: 05909c4ae8ea0a3bf1093c08323ddbacb34f715f\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NET.HostModel** -> 5.0.0-alpha.1.20063.7\r\n\r\n[marker]: <> (End:ea219f43-0754-4d2f-576e-08d76e1d56cb)\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/4163","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/runtime\" (#4163)"},{"Id":"549385478","IsPullRequest":false,"CreatedAt":"2020-01-14T07:32:07","Actor":"rsitrifork","Number":"4165","RawContent":null,"Title":"NullReferenceException on dotnet CLI commands","State":"open","Body":"I have an issue with running dotnet commands in zsh on mac os. Any command such as `dotnet restore` or `dotnet build` results in the following:\r\n\r\n```\r\nSystem.NullReferenceException: Object reference not set to an instance of an object.\r\n   at Microsoft.DotNet.Cli.Utils.Muxer..ctor()\r\n   at Microsoft.DotNet.Cli.Utils.MSBuildForwardingAppWithoutLogging..ctor(IEnumerable`1 argsToForward, String msbuildPath)\r\n   at Microsoft.DotNet.Tools.MSBuild.MSBuildForwardingApp..ctor(IEnumerable`1 argsToForward, String msbuildPath)\r\n   at Microsoft.DotNet.Tools.Restore.RestoreCommand.FromArgs(String[] args, String msbuildPath, Boolean noLogo)\r\n   at Microsoft.DotNet.Tools.Restore.RestoreCommand.Run(String[] args)\r\n   at Microsoft.DotNet.Cli.Program.ProcessArgs(String[] args, ITelemetry telemetryClient)\r\n   at Microsoft.DotNet.Cli.Program.Main(String[] args)\r\n```\r\n\r\nI looked at the muxer constructor and it looks like the only candidate for a NullReference there is either `Process.GetCurrentProcess()` or the MainModule property on the current process.\r\n\r\nThis is my `dotnet --info`, which does work:\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.1.100\r\n Commit:    cd82f021f4\r\n\r\nRuntime Environment:\r\n OS Name:     Mac OS X\r\n OS Version:  10.15\r\n OS Platform: Darwin\r\n RID:         osx.10.15-x64\r\n Base Path:   /usr/local/share/dotnet/sdk/3.1.100/\r\n\r\nHost (useful for support):\r\n  Version: 3.1.0\r\n  Commit:  65f04fb6db\r\n\r\n.NET Core SDKs installed:\r\n  3.1.100 [/usr/local/share/dotnet/sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.App 3.1.0 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 3.1.0 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n","Url":"https://github.com/dotnet/sdk/issues/4165","RelatedDescription":"Open issue \"NullReferenceException on dotnet CLI commands\" (#4165)"},{"Id":"549192328","IsPullRequest":false,"CreatedAt":"2020-01-13T21:29:05","Actor":"rainersigwald","Number":"4164","RawContent":null,"Title":"Validate RuntimeIdentifiers during build","State":"open","Body":"_From @jochenz on Friday, January 10, 2020 1:01:44 PM_\r\n\r\nNuGet uses RuntimeIdentifiers to prohibit restoring packages on unsupported architectures. For example, you can't restore a `linux` library on a Windows 10 machine.\r\n\r\nHowever, msbuild doesn't seem to validate those runtime requirements. I can perfectly create a Linux-only library:\r\n\r\n```\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netstandard2.0</TargetFramework>\r\n    <RuntimeIdentifiers>linux</RuntimeIdentifiers>\r\n  </PropertyGroup>\r\n</Project>\r\n```\r\n\r\nAnd reference that in a Windows-only application:\r\n\r\n```\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <OutputType>Exe</OutputType>\r\n    <TargetFramework>netcoreapp3.1</TargetFramework>\r\n    <RuntimeIdentifier>win7-x64</RuntimeIdentifier>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <ProjectReference Include=\"..\\MyLinuxLib\\MyLinuxLib.csproj\" />\r\n  </ItemGroup>\r\n\r\n</Project>\r\n```\r\n\r\nThat doesn't seem to make sense to me and it looks like msbuild should be capable of detecting these inconsistencies.\r\n\r\n_Copied from original issue: microsoft/msbuild#5044_","Url":"https://github.com/dotnet/sdk/issues/4164","RelatedDescription":"Open issue \"Validate RuntimeIdentifiers during build\" (#4164)"},{"Id":"548784900","IsPullRequest":false,"CreatedAt":"2020-01-13T08:47:32","Actor":"ModestasK","Number":"4161","RawContent":null,"Title":"ZipArchive bug when filename being archived has trailing spaces at the end","State":"open","Body":"Code: (System.IO.Compression.ZipFile.dll | v2.2.8)\r\n```\r\nusing (var arch = new ZipArchive(fs, ZipArchiveMode.Create))\r\n{\r\n           arch.CreateEntryFromFile(\"some_data.csv  \", \"result.zip\"); // note the trailing spaces in source filename\r\n}\r\n```\r\n\r\nOutput: \r\n1. When running this on Linux - everything is ok. The extracted file has a good name.\r\n2. When running on Windows - the extracted file has **__** at the end (spaces turned into **_**). So in my case extracting **result.zip** I get **some_data.csv__**\r\nOdd thing is that looking into the archive file with archive manager such as 7z shows as if it's **some_data.csv** inside, but after extracting the file has underscores at the end.\r\n","Url":"https://github.com/dotnet/sdk/issues/4161","RelatedDescription":"Open issue \"ZipArchive bug when filename being archived has trailing spaces at the end\" (#4161)"},{"Id":"548625235","IsPullRequest":false,"CreatedAt":"2020-01-12T20:50:54","Actor":"FrontPsych","Number":"4160","RawContent":null,"Title":"dotnet build fails with multiple CopyToOutputDirectory tasks using same paths in different casing","State":"open","Body":"# Problem\r\n`dotnet build` fails on Linux distributions when a project has dependencies using `CopyToOutputDirectory` with same paths but in different casing. \r\n\r\nSay we have a project with dependencies A and B. Each of those dependencies has set their image files to be copied to the output directory using:\r\n`\r\n<CopyToOutputDirectory>Always</CopyToOutputDirectory>\r\n`\r\n- Solution.sln\r\n  - Dependency_A.csproj\r\n    - **I**mages/image_A.png\r\n  - Dependency_B.csproj\r\n    - **i**mages/image_B.png\r\n  - Project.csproj\r\n    - Dependencies/Projects\r\n      - Dependency_A\r\n      - Dependency_B\r\n\r\nAfter running `dotnet build`, the build process manages to copy over only one dependency's image files but gets stuck trying to copy the other dependency's image files and eventually terminates in an error,\r\n\r\n### Actual outcome\r\nThe build fails.\r\n\r\nProject.csproj build output directory:\r\n- ... \r\n- Images/image_A.png\r\n- ...\r\n\r\nError message\r\n```bash\r\n/usr/share/dotnet/sdk/3.1.100/Microsoft.Common.CurrentVersion.targets(4601,5): error MSB3027: Could not copy \"/home/user/repos/folder/Dependency_B/images/image_B.png\" to \"bin/Debug/netcoreapp3.1/images/image_B.png\". Exceeded retry count of 10. Failed.  [/home/user/repos/folder/Project/Project.csproj]\r\n/usr/share/dotnet/sdk/3.1.100/Microsoft.Common.CurrentVersion.targets(4601,5): error MSB3021: Unable to copy file \"/home/user/repos/folder/Dependency_B/images/image_B.png\" to \"bin/Debug/netcoreapp3.1/images/image_B.png\". Could not find a part of the path 'home/user/repos/folder/Project/bin/Debug/netcoreapp3.1/images/image_B.png'. [/home/user/repos/folder/Project/Project.csproj]\r\n```\r\n### Desired outcome\r\nBuild succeeds.\r\n\r\nProject.csproj build output directory:\r\n- ... \r\n- Images/image_A.png\r\n- images/image_B.png\r\n- ...\r\n\r\n# Setup\r\n\r\n- Linux distribution: **Ubuntu 19.10**\r\n- .NET Core SDK: **3.1**\r\n- ASP.NET Core runtime: **3.1**\r\n- .NET Core runtime: **3.1**\r\n\r\n# Reproduce steps\r\nPrerequisites:\r\n- Use a Linux distribution.\r\n- Have .NET Core 3.1 installed.\r\n\r\nSteps:\r\n1. Clone the repository \r\n   ```bash \r\n   git clone https://github.com/FrontPsych/dotnet-cli--issue-copy-output-directory-folder-name-casing.git\r\n   ```\r\n2. Navigate to the root folder `IssueReport/`.\r\n3. Build the solution.\r\n   ```bash \r\n   dotnet build IssueReport.sln\r\n   ```\r\n4. Done, the build will finish with 10 warnings and 2 errors.\r\n\r\n# Interesting caveats\r\n- The build can sometimes(1/20) be successful on the first try. In order to reproduce the error clear the build output directory and retry.\r\n","Url":"https://github.com/dotnet/sdk/issues/4160","RelatedDescription":"Open issue \"dotnet build fails with multiple CopyToOutputDirectory tasks using same paths in different casing\" (#4160)"},{"Id":"548076777","IsPullRequest":true,"CreatedAt":"2020-01-12T15:08:59","Actor":"dotnet-maestro[bot]","Number":"4152","RawContent":null,"Title":"[master] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ea219f43-0754-4d2f-576e-08d76e1d56cb)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: ea219f43-0754-4d2f-576e-08d76e1d56cb\r\n- **Build**: 20200111.3\r\n- **Date Produced**: 1/11/2020 11:03 PM\r\n- **Commit**: afc21e51af60a4d2cb11a1081fb38b1e3a8df0a2\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NET.HostModel** -> 5.0.0-alpha.1.20061.3\r\n\r\n[marker]: <> (End:ea219f43-0754-4d2f-576e-08d76e1d56cb)\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/4152","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/runtime\" (#4152)"},{"Id":"548567542","IsPullRequest":true,"CreatedAt":"2020-01-12T14:46:57","Actor":"dotnet-maestro[bot]","Number":"4159","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n## From https://github.com/dotnet/arcade\r\n- **Subscription**: daa187e0-7e60-4c7a-c1ac-08d6354da8a8\r\n- **Build**: 20200111.1\r\n- **Date Produced**: 1/11/2020 2:11 PM\r\n- **Commit**: b1f4549e88a136ed8ae657a39f8316b98b9bf80a\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 5.0.0-beta.20061.1\r\n  - **Microsoft.DotNet.Helix.Sdk** -> 5.0.0-beta.20061.1\r\n  - **Microsoft.DotNet.SignTool** -> 5.0.0-beta.20061.1\r\n\r\n[marker]: <> (End:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/4159","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#4159)"},{"Id":"547054598","IsPullRequest":true,"CreatedAt":"2020-01-11T21:07:28","Actor":"dotnet-maestro-bot","Number":"4145","RawContent":null,"Title":"[automated] Merge branch 'release/3.1.2xx' => 'master'","State":"closed","Body":"I detected changes in the release/3.1.2xx branch which have not been merged yet to master. I'm a robot and am configured to help you automatically keep master up to date, so I've opened this PR.\r\n\r\nThis PR merges commits made on release/3.1.2xx by the following committers:\n\n* wli3\n* dotnet-maestro[bot]\n* nguerrera\n* mmitche\n* wtgodbe\n* dsplaisted\n* livarcocc\n* vitek-karas\n* tmeschter\n* v-zbsail\r\n\r\n## Instructions for merging from UI\r\n\r\nThis PR will not be auto-merged. When pull request checks pass, complete this PR by creating a merge commit, *not* a squash or rebase commit.\r\n\r\n<img alt=\"merge button instructions\" src=\"https://i.imgur.com/GepcNJV.png\" width=\"300\" />\r\n\r\nIf this repo does not allow creating merge commits from the GitHub UI, use command line instructions.\r\n\r\n## Instructions for merging via command line\r\n\r\nRun these commands to merge this pull request from the command line.\r\n\r\n``` sh\r\ngit fetch\r\ngit checkout release/3.1.2xx\r\ngit pull --ff-only\r\ngit checkout master\r\ngit pull --ff-only\r\ngit merge --no-ff release/3.1.2xx\r\n\r\n# If there are merge conflicts, resolve them and then run git merge --continue to complete the merge\r\n# Pushing the changes to the PR branch will re-trigger PR validation.\r\ngit push https://github.com/dotnet-maestro-bot/sdk HEAD:merge/release/3.1.2xx-to-master\r\n```\r\n\r\n<details>\r\n<summary>or if you are using SSH</summary>\r\n\r\n```\r\ngit push git@github.com:dotnet-maestro-bot/sdk HEAD:merge/release/3.1.2xx-to-master\r\n```\r\n\r\n</details>\r\n\r\n\r\nAfter PR checks are complete push the branch\r\n```\r\ngit push\r\n```\r\n\r\n## Instructions for resolving conflicts\r\n\r\n:warning: If there are merge conflicts, you will need to resolve them manually before merging. You can do this [using GitHub][resolve-github] or using the [command line][resolve-cli].\r\n\r\n[resolve-github]: https://help.github.com/articles/resolving-a-merge-conflict-on-github/\r\n[resolve-cli]: https://help.github.com/articles/resolving-a-merge-conflict-using-the-command-line/\r\n\r\n## Instructions for updating this pull request\r\n\r\nContributors to this repo have permission update this pull request by pushing to the branch 'merge/release/3.1.2xx-to-master'. This can be done to resolve conflicts or make other changes to this pull request before it is merged.\r\n\r\n```\r\ngit checkout -b merge/release/3.1.2xx-to-master master\r\ngit pull https://github.com/dotnet-maestro-bot/sdk merge/release/3.1.2xx-to-master\r\n(make changes)\r\ngit commit -m \"Updated PR with my changes\"\r\ngit push https://github.com/dotnet-maestro-bot/sdk HEAD:merge/release/3.1.2xx-to-master\r\n```\r\n\r\n<details>\r\n    <summary>or if you are using SSH</summary>\r\n\r\n```\r\ngit checkout -b merge/release/3.1.2xx-to-master master\r\ngit pull git@github.com:dotnet-maestro-bot/sdk merge/release/3.1.2xx-to-master\r\n(make changes)\r\ngit commit -m \"Updated PR with my changes\"\r\ngit push git@github.com:dotnet-maestro-bot/sdk HEAD:merge/release/3.1.2xx-to-master\r\n```\r\n\r\n</details>\r\n\r\nContact .NET Core Engineering if you have questions or issues.\r\nAlso, if this PR was generated incorrectly, help us fix it. See https://github.com/dotnet/arcade/blob/master/scripts/GitHubMergeBranches.ps1.\r\n","Url":"https://github.com/dotnet/sdk/pull/4145","RelatedDescription":"Closed or merged PR \"[automated] Merge branch 'release/3.1.2xx' => 'master'\" (#4145)"},{"Id":"548451163","IsPullRequest":false,"CreatedAt":"2020-01-11T21:03:54","Actor":"Tyrrrz","Number":"4157","RawContent":null,"Title":"Framework dependent deployment for AnyCPU","State":"closed","Body":"Hi there.\r\n\r\nSorry in advance if this is not the right repository for this issue/question but I'm not sure where to look for an answer.\r\n\r\nI'm currently building and deploying a WPF application. The deployment is framework-dependent, i.e. not self-contained.\r\n\r\nIt appears when some of my users, who are using 32bit OS, download and install the 32bit version of the .NET Core runtime, they fail to run the application with the following error:\r\n\r\n![image](https://user-images.githubusercontent.com/1935960/72207382-4b8afb80-34a1-11ea-83a2-c1e6b96cce62.png)\r\n\r\nIt seems that the application is attempting to run in 64bit mode despite being built for AnyCPU.\r\n\r\nDoes anyone know what can cause this and how to fix this issue?","Url":"https://github.com/dotnet/sdk/issues/4157","RelatedDescription":"Closed issue \"Framework dependent deployment for AnyCPU\" (#4157)"},{"Id":"548364416","IsPullRequest":false,"CreatedAt":"2020-01-11T21:01:04","Actor":"predatorian3","Number":"4156","RawContent":null,"Title":"dotNet Core SDK 3.1.100 failing to restore because of bad versions","State":"closed","Body":"# Issue Description\r\n\r\nOn a brand new install of dotNet Core SDK 3.1.100 for Windows 10 x64, It seems to be missing dependencies with the install. Should I need to include other feeds to get the `dotnet restore` to work after doing a `dotnet new xunit`? I was following this document: [Organizing and testing projects with the .NET Core command line](https://docs.microsoft.com/en-us/dotnet/core/tutorials/testing-with-cli#testing-the-sample). Some of the references are a little old so maybe something changed? \r\n\r\n## Steps performed\r\n\r\n```\r\ndotnet new xunit\r\ndotnet restore\r\n```\r\n\r\n## System Information\r\n\r\n```\r\nC:\\Users\\Phillip\\Desktop\\dotNetCore\\01_NewTypes\\test\\NewTypesTests>systeminfo\r\n\r\nHost Name:                 FENIX\r\nOS Name:                   Microsoft Windows 10 Pro\r\nOS Version:                10.0.18362 N/A Build 18362\r\nOS Manufacturer:           Microsoft Corporation\r\n```\r\n\r\n## `dotnet` Errors\r\n```\r\nC:\\Users\\Phillip\\Desktop\\dotNetCore\\01_NewTypes\\test\\NewTypesTests>dotnet restore \r\nRestore completed in 25.54 ms for C:\\Users\\Phillip\\Desktop\\dotNetCore\\01_NewTypes\\src\\NewTypes\\NewTypes.csproj.\r\nC:\\Users\\Phillip\\Desktop\\dotNetCore\\01_NewTypes\\test\\NewTypesTests\\NewTypesTests.csproj : error NU1100: Unable to resolve 'Microsoft.NET.Test.Sdk (>= 16.2.0)' for '.NETCoreApp,Version=v3.1'.\r\nC:\\Users\\Phillip\\Desktop\\dotNetCore\\01_NewTypes\\test\\NewTypesTests\\NewTypesTests.csproj : error NU1100: Unable to resolve 'xunit (>= 2.4.0)' for '.NETCoreApp,Version=v3.1'.\r\nC:\\Users\\Phillip\\Desktop\\dotNetCore\\01_NewTypes\\test\\NewTypesTests\\NewTypesTests.csproj : error NU1100: Unable to resolve 'xunit.runner.visualstudio (>= 2.4.0)' for '.NETCoreApp,Version=v3.1'.\r\nC:\\Users\\Phillip\\Desktop\\dotNetCore\\01_NewTypes\\test\\NewTypesTests\\NewTypesTests.csproj : error NU1100: Unable to resolve 'coverlet.collector (>= 1.0.1)' for '.NETCoreApp,Version=v3.1'.\r\n  Restore failed in 150.83 ms for C:\\Users\\Phillip\\Desktop\\dotNetCore\\01_NewTypes\\test\\NewTypesTests\\NewTypesTests.csproj.\r\n```\r\n\r\n## `dotnet` information\r\n\r\n```\r\nC:\\Users\\Phillip\\Desktop\\dotNetCore\\01_NewTypes\\test\\NewTypesTests>dotnet --info\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.1.100\r\n Commit:    cd82f021f4\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18362\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.1.100\\\r\n\r\nHost (useful for support):\r\n  Version: 3.1.0\r\n  Commit:  65f04fb6db\r\n\r\n.NET Core SDKs installed:\r\n  3.1.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.App 3.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 3.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```","Url":"https://github.com/dotnet/sdk/issues/4156","RelatedDescription":"Closed issue \"dotNet Core SDK 3.1.100 failing to restore because of bad versions\" (#4156)"},{"Id":"548453028","IsPullRequest":false,"CreatedAt":"2020-01-11T16:54:39","Actor":"wli3","Number":"4158","RawContent":null,"Title":"C++/CLI better warning for target pack does not exist in SDK","State":"open","Body":"If build netcoreapp3.1 using master (5.0.1xx) SDK. Since C++/CLI does not support nuget, it will not download the targeting pack. And the error is just. We need a better error\r\n\r\n```\r\n\"C:\\Users\\wul\\Downloads\\BuildAssetNet---B645529A\\NETCoreCppCliTestC\\NETCoreCppCliTestC.vcxproj\" (default target) (1) ->\r\n(ResolveTargetingPackAssets target) ->\r\n  C:\\work\\sdk2\\artifacts\\bin\\Debug\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Sdk.FrameworkReferenceResolution.targets(283,5): error NETSDK1073: The FrameworkReference 'Microsoft.NETCore.App' was not recognized [C:\\Users\\wul\\Downloads\\BuildAssetNet---B645529A\\NETCoreCppCliTestC\\NETCoreCppCliTestC.vcxproj]\r\n\r\n```","Url":"https://github.com/dotnet/sdk/issues/4158","RelatedDescription":"Open issue \"C++/CLI better warning for target pack does not exist in SDK\" (#4158)"},{"Id":"547545110","IsPullRequest":false,"CreatedAt":"2020-01-11T14:35:59","Actor":"alanwest","Number":"4148","RawContent":null,"Title":"dotnet build causes InitialTargets to run multiple times","State":"closed","Body":"Steps to reproduce:\r\n\r\n1. Run\r\n```\r\nmkdir test && cd test && dotnet new classlib\r\n```\r\n\r\n2. Replace contents of `test.csproj` with:\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\" InitialTargets=\"HelloWorld\">\r\n\r\n  <PropertyGroup>\r\n    <TargetFramework>netstandard2.0</TargetFramework>\r\n  </PropertyGroup>\r\n\r\n  <Target Name=\"HelloWorld\">\r\n    <Message Importance=\"high\" Text=\"Hello World\" />\r\n  </Target>\r\n\r\n</Project>\r\n```\r\n\r\n3. Run\r\n```\r\ndotnet build\r\n```\r\n\r\nOutput:\r\n```\r\nMicrosoft (R) Build Engine version 16.3.0+0f4c62fea for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  Hello World\r\n  Hello World\r\n  Restore completed in 25.71 ms for /Users/awest/test/test.csproj.\r\n  Hello World\r\n  test -> /Users/awest/test/bin/Debug/netstandard2.0/test.dll\r\n\r\nBuild succeeded.\r\n    0 Warning(s)\r\n    0 Error(s)\r\n\r\nTime Elapsed 00:00:00.87\r\n```\r\n\r\nI would expect \"Hello World\" to be printed once.\r\n\r\n---\r\n\r\ndotnet --info\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100\r\n Commit:    04339c3a26\r\n\r\nRuntime Environment:\r\n OS Name:     Mac OS X\r\n OS Version:  10.15\r\n OS Platform: Darwin\r\n RID:         osx.10.15-x64\r\n Base Path:   /usr/local/share/dotnet/sdk/3.0.100/\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0\r\n  Commit:  7d57652f33\r\n\r\n.NET Core SDKs installed:\r\n  2.1.802 [/usr/local/share/dotnet/sdk]\r\n  2.2.106 [/usr/local/share/dotnet/sdk]\r\n  3.0.100 [/usr/local/share/dotnet/sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.13 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.4 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.13 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.4 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.13 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.4 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n```","Url":"https://github.com/dotnet/sdk/issues/4148","RelatedDescription":"Closed issue \"dotnet build causes InitialTargets to run multiple times\" (#4148)"},{"Id":"548067310","IsPullRequest":true,"CreatedAt":"2020-01-11T14:27:04","Actor":"dotnet-maestro[bot]","Number":"4151","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n## From https://github.com/dotnet/arcade\r\n- **Subscription**: daa187e0-7e60-4c7a-c1ac-08d6354da8a8\r\n- **Build**: 20200110.4\r\n- **Date Produced**: 1/10/2020 8:51 PM\r\n- **Commit**: 384a4bfab9ea05bff33790d21cb7e1d863e4e599\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 5.0.0-beta.20060.4\r\n  - **Microsoft.DotNet.Helix.Sdk** -> 5.0.0-beta.20060.4\r\n  - **Microsoft.DotNet.SignTool** -> 5.0.0-beta.20060.4\r\n\r\n[marker]: <> (End:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/4151","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#4151)"},{"Id":"548339863","IsPullRequest":true,"CreatedAt":"2020-01-10T23:33:08","Actor":"swaroop-sridhar","Number":"4154","RawContent":null,"Title":"[release/3.1.2xx] Add TFM check for `Publish-Trimmed-ReadyToRun-SingleFile`","State":"open","Body":"The options `PublishSingleFile`, `PublishReadyToRun`, and `PublishTrimmed` are only supported when targetting netcoreapp3.0 or later.\r\n\r\nTrying to publish to a different target (say `.netcoreapp2.1`) today:\r\n* `PublishSingleFile` fails with the `PlaceHolderNotFoundInAppHostException` generated by the `HostWriter`.\r\n* `PublishReadyToRun` and `PublishTrimmed` silently fail to turn on, but the `publish` itself suceeds.\r\n\r\nThis change adds an explicit TFM check to generate error/warnings for non-conforming targets.\r\n\r\n`PublishSingleFile`, requires the following conditions to be true:\r\n* `TargetFramework` is `netcoreapp`\r\n* `TargetFrameworkVersion` is at least `3.0`\r\n* The app is an executable (`OutputType=exe`)\r\nIf any of the conditions fail, build fails with an appropriate error\r\n\r\n`PublishReadyToRun`, and `PublishTrimmed` require the following conditions to be true:\r\n* `TargetFrameworkVersion` is at least `3.0`\r\nIf this condition fails, the build issue warnings, but publish itself succeeds.\r\nThe version check should ideally be a failure, but they are warnings for maximum compatibility with `3.0` release.\r\n\r\nFixes #3728","Url":"https://github.com/dotnet/sdk/pull/4154","RelatedDescription":"Open PR \"[release/3.1.2xx] Add TFM check for `Publish-Trimmed-ReadyToRun-SingleFile`\" (#4154)"},{"Id":"548330263","IsPullRequest":true,"CreatedAt":"2020-01-10T23:14:29","Actor":"swaroop-sridhar","Number":"4153","RawContent":null,"Title":"[release/3.1.2xx] Add TFM check for `Publish-Trimmed-ReadyToRun-SingleFile`","State":"closed","Body":"The options `PublishSingleFile`, `PublishReadyToRun`, and `PublishTrimmed` are only supported when targetting netcoreapp3.0 or later.\r\n\r\nTrying to publish to a different target (say `.netcoreapp2.1`) today:\r\n* `PublishSingleFile` fails with the `PlaceHolderNotFoundInAppHostException` generated by the `HostWriter`.\r\n* `PublishReadyToRun` and `PublishTrimmed` silently fail to turn on, but the `publish` itself suceeds.\r\n\r\nThis change adds an explicit TFM check to generate error/warnings for non-conforming targets.\r\n\r\n`PublishSingleFile`, `PublishReadyToRun`, and `PublishTrimmed` require the following conditions to be true:\r\n* `TargetFramework` is `netcoreapp`\r\n* `TargetFrameworkVersion` is at least `3.0`\r\n* The app is an executable (`OutputType=exe`)\r\n\r\nIf any of the conditions fail:\r\n* `PublishSingleFile` fails with an appropriate error\r\n* `PublishReadyToRun` and `PublishTrimmed` issue warnings, but publish itself succeeds.\r\n  This is because:\r\n    * The restriction against `classlibs` / `netstandard` frameworks may be relaxed in future releases\r\n    * The version check should ideally be a failure, but they are warnings for maximum compatibility with `3.0` release.\r\n\r\nFixes #3728","Url":"https://github.com/dotnet/sdk/pull/4153","RelatedDescription":"Closed or merged PR \"[release/3.1.2xx] Add TFM check for `Publish-Trimmed-ReadyToRun-SingleFile`\" (#4153)"},{"Id":"547879814","IsPullRequest":false,"CreatedAt":"2020-01-10T07:05:47","Actor":"rkeithhill","Number":"4150","RawContent":null,"Title":"dotnet test host process crashed on Ubuntu 18.04","State":"closed","Body":"We have some xUnit tests that are running fine on Windows and RedHat7.  The same tests cause a cryptic failure on Ubuntu 18.04:\r\n```\r\nUsing dotnet v3.1.100 at path /usr/bin/dotnet\r\nOutput folder set to: /home/mctcbld/builds/foo/any-PR-Ubuntu/out/Linux-x64-Release/bin\r\nBuild started 1/9/2020 8:05:38 PM.\r\nTest run for /home/mctcbld/builds/foo/any-PR-Ubuntu/out/Linux-x64-Release/bin/Foo.Api.UnitTest.dll(.NETCoreApp,Version=v3.1)\r\nMicrosoft (R) Test Execution Command Line Tool Version 16.3.0\r\nCopyright (c) Microsoft Corporation.  All rights reserved.\r\n\r\nStarting test execution, please wait...\r\n\r\nA total of 1 test files matched the specified pattern.\r\n[xUnit.net 00:00:00.00] xUnit.net VSTest Adapter v2.4.1 (64-bit .NET Core 3.1.0)\r\n[xUnit.net 00:00:00.40]   Discovering: FooApi.UnitTest\r\n[xUnit.net 00:00:00.46]   Discovered:  Foo.Api.UnitTest\r\n[xUnit.net 00:00:00.46]   Starting:    Foo.Api.UnitTest\r\nChecking for /tmp/FooApiUnitTestLicenses-es-foobuild-ub/005056901801/FOOF101-1FP.lic\r\nCopying to /home/mctcbld/builds/foo/any-PR-Ubuntu/out/Linux-x64-Release/bin/CSharpTestLicenses/FOOF101-1FP.lic\r\nSet process env var FOOTEST_LICENSE_FILE to /home/mctcbld/builds/foo/any-PR-Ubuntu/out/Linux-x64-Release/bin/CSharpTestLicenses from DesktopFooTests.cs\r\nThe active test run was aborted. Reason: Test host process crashed\r\n\r\nTest Run Aborted.\r\n\r\nBuild FAILED.\r\n    0 Warning(s)\r\n    0 Error(s)\r\n```\r\nAs you can see, there's really no error details here.  With `LD_DEBUG=\"all\"`, I see this error show up:\r\n```\r\n      2367:     binding file /usr/share/dotnet/shared/Microsoft.NETCore.App/3.1.0/System.Native.so [0] to /lib/x86_64-linux-gnu/libc.so.6 [0]: normal symbol `ioctl' [GLIBC_2.2.5]\r\n                                                                                                                        The active test run was aborted. Reason: Test host process crashed :       2383:        symbol=chdir;  lookup in file=dotnet [0]\r\n      2383:     symbol=chdir;  lookup in file=/lib/x86_64-linux-gnu/libpthread.so.0 [0]\r\n      2383:     symbol=chdir;  lookup in file=/lib/x86_64-linux-gnu/libdl.so.2 [0]\r\n      2383:     symbol=chdir;  lookup in file=/usr/lib/x86_64-linux-gnu/libstdc++.so.6 [0]\r\n      2383:     symbol=chdir;  lookup in file=/lib/x86_64-linux-gnu/libm.so.6 [0]\r\n      2383:     symbol=chdir;  lookup in file=/lib/x86_64-linux-gnu/libgcc_s.so.1 [0]\r\n      2383:     symbol=chdir;  lookup in file=/lib/x86_64-linux-gnu/libc.so.6 [0]\r\n      2383:     binding file /usr/share/dotnet/shared/Microsoft.NETCore.App/3.1.0/System.Native.so [0] to /lib/x86_64-linux-gnu/libc.so.6 [0]: normal symbol `chdir' [GLIBC_2.2.5]\r\n      2383:     symbol=execve;  lookup in file=dotnet [0]\r\n      2383:     symbol=execve;  lookup in file=/lib/x86_64-linux-gnu/libpthread.so.0 [0]\r\n      2383:     symbol=execve;  lookup in file=/lib/x86_64-linux-gnu/libdl.so.2 [0]\r\n      2383:     symbol=execve;  lookup in file=/usr/lib/x86_64-linux-gnu/libstdc++.so.6 [0]\r\n      2383:     symbol=execve;  lookup in file=/lib/x86_64-linux-gnu/libm.so.6 [0]\r\n      2383:     symbol=execve;  lookup in file=/lib/x86_64-linux-gnu/libgcc_s.so.1 [0]\r\n      2383:     symbol=execve;  lookup in file=/lib/x86_64-linux-gnu/libc.so.6 [0]\r\n      2383:     binding file /usr/share/dotnet/shared/Microsoft.NETCore.App/3.1.0/System.Native.so [0] to /lib/x86_64-linux-gnu/libc.so.6 [0]: normal symbol `execve' [GLIBC_2.2.5]\r\n      2383:\r\n      2383:     file=libpthread.so.0 [0];  needed by /usr/share/dotnet/dotnet [0]\r\n      2383:     find library=libpthread.so.0 [0]; searching\r\n      2383:      search cache=/etc/ld.so.cache\r\n      2383:       trying file=/lib/x86_64-linux-gnu/libpthread.so.0\r\n      2383:\r\n      2383:     file=libpthread.so.0 [0];  generating link map\r\n      2383:       dynamic: 0x00007fa1eac1bd68  base: 0x00007fa1eaa02000   size: 0x000000000021e480\r\n      2383:         entry: 0x00007fa1eaa08230  phdr: 0x00007fa1eaa02040  phnum:                  9\r\n      2383:\r\n      2383:\r\n      2383:     file=libdl.so.2 [0];  needed by /usr/share/dotnet/dotnet [0]\r\n      2383:     find library=libdl.so.2 [0]; searching\r\n      2383:      search cache=/etc/ld.so.cache\r\n      2383:       trying file=/lib/x86_64-linux-gnu/libdl.so.2\r\n      2383:\r\n      2383:     file=libdl.so.2 [0];  generating link map\r\n      2383:       dynamic: 0x00007fa1eaa00d90  base: 0x00007fa1ea7fe000   size: 0x0000000000203110\r\n      2383:         entry: 0x00007fa1ea7fee50  phdr: 0x00007fa1ea7fe040  phnum:                  7\r\n      2383:\r\n      2383:\r\n      2383:     file=libstdc++.so.6 [0];  needed by /usr/share/dotnet/dotnet [0]\r\n      2383:     find library=libstdc++.so.6 [0]; searching\r\n      2383:      search cache=/etc/ld.so.cache\r\n      2383:       trying file=/usr/lib/x86_64-linux-gnu/libstdc++.so.6\r\n      2383:\r\n      2383:     file=libstdc++.so.6 [0];  generating link map\r\n      2383:       dynamic: 0x00007fa1ea7f6cc0  base: 0x00007fa1ea41e000   size: 0x00000000003df5c0\r\n      2383:         entry: 0x00007fa1ea4b7180  phdr: 0x00007fa1ea41e040  phnum:                  8\r\n      2383:\r\n      2383:\r\n      2383:     file=libm.so.6 [0];  needed by /usr/share/dotnet/dotnet [0]\r\n      2383:     find library=libm.so.6 [0]; searching\r\n      2383:      search cache=/etc/ld.so.cache\r\n      2383:       trying file=/lib/x86_64-linux-gnu/libm.so.6\r\n      2383:\r\n      2383:     file=libm.so.6 [0];  generating link map\r\n      2383:       dynamic: 0x00007fa1ea41cd90  base: 0x00007fa1ea080000   size: 0x000000000039d158\r\n      2383:         entry: 0x00007fa1ea08ba80  phdr: 0x00007fa1ea080040  phnum:                  7\r\n      2383:\r\n      2383:\r\n      2383:     file=libgcc_s.so.1 [0];  needed by /usr/share/dotnet/dotnet [0]\r\n      2383:     find library=libgcc_s.so.1 [0]; searching\r\n      2383:      search cache=/etc/ld.so.cache\r\n      2383:       trying file=/lib/x86_64-linux-gnu/libgcc_s.so.1\r\n      2383:\r\n      2383:     file=libgcc_s.so.1 [0];  generating link map\r\n      2383:       dynamic: 0x00007fa1ea07ede0  base: 0x00007fa1e9e68000   size: 0x0000000000217450\r\n      2383:         entry: 0x00007fa1e9e6ab30  phdr: 0x00007fa1e9e68040  phnum:                  7\r\n      2383:\r\n      2383:\r\n      2383:     file=libc.so.6 [0];  needed by /usr/share/dotnet/dotnet [0]\r\n      2383:     find library=libc.so.6 [0]; searching\r\n      2383:      search cache=/etc/ld.so.cache\r\n      2383:       trying file=/lib/x86_64-linux-gnu/libc.so.6\r\n      2383:\r\n      2383:     file=libc.so.6 [0];  generating link map\r\n      2383:       dynamic: 0x00007fa1e9e61b80  base: 0x00007fa1e9a77000   size: 0x00000000003f0ae0\r\n      2383:         entry: 0x00007fa1e9a98cb0  phdr: 0x00007fa1e9a77040  phnum:                 10\r\n      2383:\r\n      2383:     checking for version `GCC_3.0' in file /lib/x86_64-linux-gnu/libgcc_s.so.1 [0] required by file /usr/share/dotnet/dotnet [0]\r\n      2383:     checking for version `GLIBC_2.2.5' in file /lib/x86_64-linux-gnu/libdl.so.2 [0] required by file /usr/share/dotnet/dotnet [0]\r\n      2383:     checking for version `GLIBC_2.3' in file /lib64/ld-linux-x86-64.so.2 [0] required by file /usr/share/dotnet/dotnet [0]\r\n      2383:     checking for version `GLIBC_2.2.5' in file /lib/x86_64-linux-gnu/libpthread.so.0 [0] required by file /usr/share/dotnet/dotnet [0]\r\n      2383:     checking for version `GLIBC_2.14' in file /lib/x86_64-linux-gnu/libc.so.6 [0] required by file /usr/share/dotnet/dotnet [0]\r\n      2383:     checking for version `GLIBC_2.4' in file /lib/x86_64-linux-gnu/libc.so.6 [0] required by file /usr/share/dotnet/dotnet [0]\r\n      2383:     checking for version `GLIBC_2.3' in file /lib/x86_64-linux-gnu/libc.so.6 [0] required by file /usr/share/dotnet/dotnet [0]\r\n      2383:     checking for version `GLIBC_2.2.5' in file /lib/x86_64-linux-gnu/libc.so.6 [0] required by file /usr/share/dotnet/dotnet [0]\r\n      2383:     checking for version `GLIBCXX_3.4.9' in file /usr/lib/x86_64-linux-gnu/libstdc++.so.6 [0] required by file /usr/share/dotnet/dotnet [0]\r\n      2383:     checking for version `CXXABI_1.3' in file /usr/lib/x86_64-linux-gnu/libstdc++.so.6 [0] required by file /usr/share/dotnet/dotnet [0]\r\n      2383:     checking for version `GLIBCXX_3.4.11' in file /usr/lib/x86_64-linux-gnu/libstdc++.so.6 [0] required by file /usr/share/dotnet/dotnet [0]\r\n      2383:     checking for version `GLIBCXX_3.4' in file /usr/lib/x86_64-linux-gnu/libstdc++.so.6 [0] required by file /usr/share/dotnet/dotnet [0]\r\n      2383:     checking for version `GLIBC_2.2.5' in file /lib64/ld-linux-x86-64.so.2 [0] required by file /lib/x86_64-linux-gnu/libpthread.so.0 [0]\r\n      2383:     checking for version `GLIBC_PRIVATE' in file /lib64/ld-linux-x86-64.so.2 [0] required by file /lib/x86_64-linux-gnu/libpthread.so.0 [0]\r\n      2383:     checking for version `GLIBC_2.14' in file /lib/x86_64-linux-gnu/libc.so.6 [0] required by file /lib/x86_64-linux-gnu/libpthread.so.0 [0]\r\n      2383:     checking for version `GLIBC_2.3.2' in file /lib/x86_64-linux-gnu/libc.so.6 [0] required by file /lib/x86_64-linux-gnu/libpthread.so.0 [0]\r\n      2383:     checking for version `GLIBC_2.4' in file /lib/x86_64-linux-gnu/libc.so.6 [0] required by file /lib/x86_64-linux-gnu/libpthread.so.0 [0]\r\n      2383:     checking for version `GLIBC_2.2.5' in file /lib/x86_64-linux-gnu/libc.so.6 [0] required by file /lib/x86_64-linux-gnu/libpthread.so.0 [0]\r\n      2383:     checking for version `GLIBC_PRIVATE' in file /lib/x86_64-linux-gnu/libc.so.6 [0] required by file /lib/x86_64-linux-gnu/libpthread.so.0 [0]\r\n      2383:     checking for version `GLIBC_PRIVATE' in file /lib64/ld-linux-x86-64.so.2 [0] required by file /lib/x86_64-linux-gnu/libdl.so.2 [0]\r\n      2383:     checking for version `GLIBC_PRIVATE' in file /lib/x86_64-linux-gnu/libc.so.6 [0] required by file /lib/x86_64-linux-gnu/libdl.so.2 [0]\r\n      2383:     checking for version `GLIBC_2.4' in file /lib/x86_64-linux-gnu/libc.so.6 [0] required by file /lib/x86_64-linux-gnu/libdl.so.2 [0]\r\n      2383:     checking for version `GLIBC_2.2.5' in file /lib/x86_64-linux-gnu/libc.so.6 [0] required by file /lib/x86_64-linux-gnu/libdl.so.2 [0]\r\n      2383:     checking for version `GLIBC_2.2.5' in file /lib/x86_64-linux-gnu/libm.so.6 [0] required by file /usr/lib/x86_64-linux-gnu/libstdc++.so.6 [0]\r\n      2383:     checking for version `GLIBC_2.3' in file /lib64/ld-linux-x86-64.so.2 [0] required by file /usr/lib/x86_64-linux-gnu/libstdc++.so.6 [0]\r\n      2383:     checking for version `GCC_4.2.0' in file\r\n      2367:     symbol=ceil;  lookup in file=/usr/share/dotnet/shared/Microsoft.NETCore.App/3.1.0/libcoreclr.so [0]\r\n      2367:     symbol=ceil;  lookup in file=dotnet [0]\r\n      2367:     symbol=ceil;  lookup in file=/lib/x86_64-linux-gnu/libpthread.so.0 [0]\r\n      2367:     symbol=ceil;  lookup in file=/lib/x86_64-linux-gnu/libdl.so.2 [0]\r\n      2367:     symbol=ceil;  lookup in file=/usr/lib/x86_64-linux-gnu/libstdc++.so.6 [0]\r\n      2367:     symbol=ceil;  lookup in file=/lib/x86_64-linux-gnu/libm.so.6 [0]\r\n      2367:     binding file /usr/share/dotnet/shared/Microsoft.NETCore.App/3.1.0/libcoreclr.so [0] to /lib/x86_64-linux-gnu/libm.so.6 [0]: normal symbol `ceil' [GLIBC_2.2.5]\r\n\r\nTest Run Aborted.\r\n```\r\nThis system has glibc 2.27 on it:\r\n```\r\n01-09 22:48:34 10> ldd --version\r\nldd (Ubuntu GLIBC 2.27-3ubuntu1) 2.27\r\n```\r\nWe did just switch from .NET Core SDK 2.2.203 to 3.1.100 and update the xUnit NuGet pkgs to:\r\n```\r\n    <PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"16.4.0\" />\r\n    <PackageReference Include=\"xunit\" Version=\"2.4.1\" />\r\n    <PackageReference Include=\"xunit.runner.visualstudio\" Version=\"2.4.1\">\r\n      <PrivateAssets>all</PrivateAssets>\r\n      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>\r\n    </PackageReference>\r\n    <PackageReference Include=\"coverlet.collector\" Version=\"1.2.0\">\r\n      <PrivateAssets>all</PrivateAssets>\r\n      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>\r\n    </PackageReference>\r\n```","Url":"https://github.com/dotnet/sdk/issues/4150","RelatedDescription":"Closed issue \"dotnet test host process crashed on Ubuntu 18.04\" (#4150)"},{"Id":"547769756","IsPullRequest":false,"CreatedAt":"2020-01-09T22:55:09","Actor":"wli3","Number":"4149","RawContent":null,"Title":"How to carry change from 3.1.xxx CLI and SDK to new merge master?","State":"open","Body":"Need to discuss once Daniel is back","Url":"https://github.com/dotnet/sdk/issues/4149","RelatedDescription":"Open issue \"How to carry change from 3.1.xxx CLI and SDK to new merge master?\" (#4149)"},{"Id":"547479587","IsPullRequest":true,"CreatedAt":"2020-01-09T14:57:35","Actor":"dotnet-maestro[bot]","Number":"4147","RawContent":null,"Title":"[master] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ea219f43-0754-4d2f-576e-08d76e1d56cb)\r\n## From https://github.com/dotnet/runtime\r\n- **Build**: 20200108.9\r\n- **Date Produced**: 1/9/2020 7:47 AM\r\n- **Commit**: 8019c079ce8174845107e13eb4ddf3582bb10cd0\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NET.HostModel** -> 5.0.0-alpha.1.20058.9\r\n\r\n[marker]: <> (End:ea219f43-0754-4d2f-576e-08d76e1d56cb)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/4147","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/runtime\" (#4147)"},{"Id":"547111738","IsPullRequest":true,"CreatedAt":"2020-01-09T01:00:30","Actor":"wli3","Number":"4146","RawContent":null,"Title":"Fix bad merge by updating arcade","State":"closed","Body":"","Url":"https://github.com/dotnet/sdk/pull/4146","RelatedDescription":"Closed or merged PR \"Fix bad merge by updating arcade\" (#4146)"},{"Id":"546925943","IsPullRequest":true,"CreatedAt":"2020-01-08T15:16:30","Actor":"rainersigwald","Number":"4144","RawContent":null,"Title":"Remove redundant Update attribute","State":"open","Body":"Inside a target, Update on items is ignored (microsoft/msbuild#2835).\r\n\r\nThis is harmless in this case because the update was intended to apply to\r\nall items where the condition matched, which is the same as not specifying\r\nan Update filter. But it is misleading.","Url":"https://github.com/dotnet/sdk/pull/4144","RelatedDescription":"Open PR \"Remove redundant Update attribute\" (#4144)"},{"Id":"546862150","IsPullRequest":true,"CreatedAt":"2020-01-08T14:56:55","Actor":"dotnet-maestro[bot]","Number":"4143","RawContent":null,"Title":"[master] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ea219f43-0754-4d2f-576e-08d76e1d56cb)\r\n## From https://github.com/dotnet/runtime\r\n- **Build**: 20200107.6\r\n- **Date Produced**: 1/8/2020 6:38 AM\r\n- **Commit**: c07be36e3ce00b06e99d02669fd658a813cdce11\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NET.HostModel** -> 5.0.0-alpha.1.20057.6\r\n\r\n[marker]: <> (End:ea219f43-0754-4d2f-576e-08d76e1d56cb)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/4143","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/runtime\" (#4143)"}],"ResultType":"GitHubIssue"},"Announcements-Issues":{"Issues":[{"Id":"549804145","IsPullRequest":false,"CreatedAt":"2020-01-14T20:37:00","Actor":"TaraOverfield","Number":"150","RawContent":null,"Title":"January 2020 .NET Updates","State":"open","Body":"The following .NET updates were released on January 2020. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n\r\n* [.NET Framework January 2020 Security and Quality Rollup](https://devblogs.microsoft.com/dotnet/net-framework-january-security-and-quality-rollup/ )\r\n\r\n## .NET Core\r\n* [January 2020 Updates – 2.1.15, 3.0.2, and 3.1.1](https://devblogs.microsoft.com/dotnet/net-core-january-2020/)\r\n\r\n* .NET Core 3.1.1 and .NET Core SDK 3.1.101( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/3.1/3.1.1/3.1.1.md) | [Download](https://www.microsoft.com/net/download/dotnet-core/3.1) )\r\n\r\n* .NET Core 3.0.2 and .NET Core SDK 3.0.102 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/3.0/3.0.2/3.0.2.md) | [Download](https://www.microsoft.com/net/download/dotnet-core/3.0) )\r\n\r\n* .NET Core 2.1.15 and .NET Core SDK 2.1.803 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.15/2.1.15.md) | [Download](https://www.microsoft.com/net/download/dotnet-core/2.1) )\r\n \r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n","Url":"https://github.com/dotnet/announcements/issues/150","RelatedDescription":"Open issue \"January 2020 .NET Updates\" (#150)"},{"Id":"549728653","IsPullRequest":false,"CreatedAt":"2020-01-14T18:01:12","Actor":"blowdart","Number":"149","RawContent":null,"Title":"Microsoft Security Advisory CVE-2020-0606 : .NET Core Remote Code Execution Vulnerability","State":"open","Body":"Microsoft Security Advisory CVE-2020-0606 : .NET Core Remote Code Execution Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a remote code execution vulnerability exists in .NET software when the software fails to check the source markup of a file. An attacker who successfully exploited the vulnerability could run arbitrary code in the context of the current user.\r\n\r\nExploitation of the vulnerability requires that a user open a specially crafted file with an affected version of .NET Core. In an email attack scenario, an attacker could exploit the vulnerability by sending the specially crafted file to the user and convincing the user to open the file.\r\n\r\nThe security update addresses the vulnerability by correcting how .NET Core checks the source markup of a file.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/wpf/issues/2425\r\n\r\n## <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nMicrosoft has not identified any mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core 3.0 application running on .NET Core 3.0.0, 3.0.1 or 3.1.0.\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nIf you have a runtime or SDK with a version listed in [affected software](#affected-software) you are exposed to the vulnerability.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nTo fix the issue please install the latest version of .NET Core. If you have multiple versions of .NET Core installed you will need to install multiple runtimes, or SDKs depending on what you have installed.\r\n\r\nYou can list the versions you have installed by running the `dotnet --info` command. You will see output like the following;\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.1.100\r\n Commit:    cd82f021f4\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18363\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.1.100\\\r\n\r\nHost (useful for support):\r\n  Version: 3.1.0\r\n  Commit:  65f04fb6db\r\n\r\n.NET Core SDKs installed:\r\n  3.0.101 [C:\\Program Files\\dotnet\\sdk]\r\n  3.1.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.App 3.0.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 3.0.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 3.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\n* For machines running .NET Core 3.0, you should download and install Runtime 3.0.2 or SDK 3.0.102 from https://dotnet.microsoft.com/download/dotnet-core/3.0.\r\n* For machines running .NET Core 3.1, you should download and install Runtime 3.1.1 or SDK 3.1.101 from https://dotnet.microsoft.com/download/dotnet-core/3.1.\r\n\r\nIf you have both 3.0 and 3.1 installed, you need to install the updates for both versions.\r\n\r\nOnce you have installed the updated runtime or SDK, restart your apps for the update to take effect.\r\n\r\nAdditionally, if you've deployed [self-contained applications](https://docs.microsoft.com/dotnet/core/deploying/#self-contained-deployments-scd) targeting any of the impacted versions, these applications are also vulnerable and must be recompiled and redeployed.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core GitHub organization. The main repos are located at https://github.com/dotnet/runtime and https://github.com/dotnet/aspnet/. The Announcements repo (https://github.com/dotnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the linked discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgments\r\n\r\nSoroush Dalili ([@irsdl](https://twitter.com/irsdl))\r\n\r\n### External Links\r\n\r\n[CVE-2020-0606](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-0606)\r\n\r\n### Revisions\r\n\r\nV1.0 (January 14, 2020): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2020-01-14_\r\n","Url":"https://github.com/dotnet/announcements/issues/149","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2020-0606 : .NET Core Remote Code Execution Vulnerability\" (#149)"},{"Id":"549728591","IsPullRequest":false,"CreatedAt":"2020-01-14T18:01:03","Actor":"blowdart","Number":"148","RawContent":null,"Title":"Microsoft Security Advisory CVE-2020-0605 : .NET Core Remote Code Execution Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2020-0605 : .NET Core Remote Code Execution Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a remote code execution vulnerability exists in .NET software when the software fails to check the source markup of a file. An attacker who successfully exploited the vulnerability could run arbitrary code in the context of the current user.\r\n\r\nExploitation of the vulnerability requires that a user open a specially crafted file with an affected version of .NET Core. In an email attack scenario, an attacker could exploit the vulnerability by sending the specially crafted file to the user and convincing the user to open the file.\r\n\r\nThe security update addresses the vulnerability by correcting how .NET Core checks the source markup of a file.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/wpf/issues/2424\r\n\r\n## <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nMicrosoft has not identified any mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core 3.0 application running on .NET Core 3.0.0, 3.0.1 or 3.1.0.\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nIf you have a runtime or SDK with a version listed in [affected software](#affected-software) you are exposed to the vulnerability.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nTo fix the issue please install the latest version of .NET Core. If you have multiple versions of .NET Core installed you will need to install multiple runtimes, or SDKs depending on what you have installed.\r\n\r\nYou can list the versions you have installed by running the `dotnet --info` command. You will see output like the following;\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.1.100\r\n Commit:    cd82f021f4\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18363\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.1.100\\\r\n\r\nHost (useful for support):\r\n  Version: 3.1.0\r\n  Commit:  65f04fb6db\r\n\r\n.NET Core SDKs installed:\r\n  3.0.101 [C:\\Program Files\\dotnet\\sdk]\r\n  3.1.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.App 3.0.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 3.0.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 3.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\n* For machines running .NET Core 3.0, you should download and install Runtime 3.0.2 or SDK 3.0.102 from https://dotnet.microsoft.com/download/dotnet-core/3.0.\r\n* For machines running .NET Core 3.1, you should download and install Runtime 3.1.1 or SDK 3.1.101 from https://dotnet.microsoft.com/download/dotnet-core/3.1.\r\n\r\nIf you have both 3.0 and 3.1 installed, you need to install the updates for both versions.\r\n\r\nOnce you have installed the updated runtime or SDK, restart your apps for the update to take effect.\r\n\r\nAdditionally, if you've deployed [self-contained applications](https://docs.microsoft.com/dotnet/core/deploying/#self-contained-deployments-scd) targeting any of the impacted versions, these applications are also vulnerable and must be recompiled and redeployed.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core GitHub organization. The main repos are located at https://github.com/dotnet/runtime and https://github.com/dotnet/aspnet/. The Announcements repo (https://github.com/dotnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the linked discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgments\r\n\r\nSoroush Dalili ([@irsdl](https://twitter.com/irsdl))\r\n\r\n### External Links\r\n\r\n[CVE-2020-0605](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-0605)\r\n\r\n### Revisions\r\n\r\nV1.0 (January 14, 2020): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2020-01-14_\r\n","Url":"https://github.com/dotnet/announcements/issues/148","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2020-0605 : .NET Core Remote Code Execution Vulnerability\" (#148)"},{"Id":"545985606","IsPullRequest":false,"CreatedAt":"2020-01-06T23:02:38","Actor":"vivmishra","Number":"147","RawContent":null,"Title":".NET Core 2.2 has reached end of life","State":"open","Body":"[.NET Core 2.2 reached end of life](https://devblogs.microsoft.com/dotnet/net-core-2-2-will-reach-end-of-life-on-december-23-2019/) on **December 23, 2019**. This means [.NET Core 2.2](https://devblogs.microsoft.com/dotnet/announcing-net-core-2-2/) is no longer supported and updates will no longer be provided. We recommend moving to [.NET Core 3.1](https://devblogs.microsoft.com/dotnet/announcing-net-core-3-1/), our long term support (LTS) release.\r\n\r\n- [Download .NET Core 3.1](https://www.microsoft.com/net/download/dotnet-core/3.1)\r\n- [.NET Core 2.2 end-of-life statement](https://devblogs.microsoft.com/dotnet/net-core-2-2-will-reach-end-of-life-on-december-23-2019/)\r\n\r\nWe've created an issue at [dotnet/core#4084](https://github.com/dotnet/core/issues/4084) for your questions and comments.\r\n\r\n## .NET Core 2.2 Lifecycle\r\n\r\n.NET Core releases belong to one of two [support lifecycles](https://www.microsoft.com/net/platform/support-policy): long term support (LTS) and Current. LTS releases are stable release which receive critical updates and are supported for at least three years. Current releases can include new features that may undergo future change based on feedback. Current releases are supported for three months after the subsequent .NET Core major or minor release. Both LTS and Current releases receive critical fixes throughout their lifecycle, for security, reliability, or to add support for new operating system versions. You must stay up-to-date with the latest patches to qualify for support. \r\n\r\n[.NET Core 2.2](https://devblogs.microsoft.com/dotnet/announcing-net-core-2-2/) was released in December 2018 as a Current release. Per the lifecycle policy, Current releases reach end of life 3 months after a subsequent release (Current or LTS). **.NET Core 3.0** released in **September 2019** and began the end of life countdown for .NET Core 2.2 that concluded on December 23, 2019. \r\n\r\n## .NET Core 2.2 Downloads\r\n\r\n.NET Core 2.2 installers, zips and tar.gzs will remain available, but unsupported. This includes existing releases available on Linux package feeds. Previous versions, including 2.2, will be accessible through the [Download Archives](https://www.microsoft.com/net/download/archives). \r\n\r\n## Policy Information\r\n\r\nAdditional lifecycle and support details  and background can be seen in the following:\r\n\r\n* [.NET Core Support Lifecycle](https://www.microsoft.com/net/platform/support-policy)\r\n* [Microsoft Support for .NET Core](https://github.com/dotnet/core/blob/master/microsoft-support.md)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n* [Support and Versioning](https://blogs.msdn.microsoft.com/dotnet/2016/07/26/net-support-and-versioning/)\r\n","Url":"https://github.com/dotnet/announcements/issues/147","RelatedDescription":"Open issue \".NET Core 2.2 has reached end of life\" (#147)"},{"Id":"541189878","IsPullRequest":false,"CreatedAt":"2019-12-20T20:42:33","Actor":"vivmishra","Number":"146","RawContent":null,"Title":"Announcing Availability of Localized IntelliSense for .NET Core 3.0 and 3.1","State":"open","Body":"This week we released localized [IntelliSense](https://docs.microsoft.com/en-us/visualstudio/ide/using-intellisense?view=vs-2019) files for .NET Core 3.0 and 3.1, in following 10 Visual Studio supported languages: \r\n- Brazilian Portuguese\r\n- Chinese (simplified)\r\n- Chinese (traditional)\r\n- French\r\n- German\r\n- Italian\r\n- Japanese\r\n- Korean\t\r\n- Russian\r\n- Spanish\r\n\r\nThe files (in zip archives) are available for download from [**Download localized .NET Core IntelliSense files**](https://dotnet.microsoft.com/download/dotnet-core/intellisense).\r\n\r\n * [Checksums for 3.0 zip files](https://dotnetcli.blob.core.windows.net/dotnet/checksums/3.0.0-intellisense-sha.txt)\r\n * [Checksums for 3.1 zip files](https://dotnetcli.blob.core.windows.net/dotnet/checksums/3.1.0-intellisense-sha.txt)\r\n\r\nYou can see [the .NET Core Guide](https://aka.ms/dotnet-core-intellisense) for instructions on how to use these files with Visual Studio.\r\n\r\nBy default, when you're developing .NET Core projects, the SDK only includes the English version of the IntelliSense files. But now you can enhance your localized Visual Studio development experience by adding the localized IntelliSense files from the download site into your local development environment.\r\n\r\nLastly, with this release we have made the localized IntelliSense available as zip archives that does require you to manually extract and copy the files to respective SDK install folders. But we plan to make this experience better in future releases.\r\n\r\n## Discussion\r\nTo discuss this issue, please comment on the corresponding issue at [dotnet/core #4032](https://github.com/dotnet/core/issues/4032).\r\n","Url":"https://github.com/dotnet/announcements/issues/146","RelatedDescription":"Open issue \"Announcing Availability of Localized IntelliSense for .NET Core 3.0 and 3.1\" (#146)"},{"Id":"536031264","IsPullRequest":false,"CreatedAt":"2019-12-10T22:29:30","Actor":"TaraOverfield","Number":"145","RawContent":null,"Title":"December 2019 .NET Updates","State":"open","Body":"The following .NET updates were released on December 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n\r\n* [.NET Framework December 2019 Security and Quality Rollup](https://devblogs.microsoft.com/dotnet/net-framework-december-2019-security-and-quality-rollup/ )\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/145","RelatedDescription":"Open issue \"December 2019 .NET Updates\" (#145)"},{"Id":"535463424","IsPullRequest":false,"CreatedAt":"2019-12-10T03:08:33","Actor":"terrajobst","Number":"144","RawContent":null,"Title":"Removal of read-collaborator access","State":"open","Body":"***TL;DR**: We’ll remove collaborators with read-only access from our public repos on December 16th. This means some folks will lose their Collaborator badge and the ability to interact with the CI system.*\r\n\r\nOver the years, we’ve added a bunch of folks as collaborators with read permissions to our public repos. The rationale was that we wanted to be able to assign issues to community members because GitHub only allowed assigning issues to users with an explicit permission grant for the repository. However, they changed this in [June 2019](https://github.blog/2019-06-25-assign-issues-to-issue-commenters/). Now, we can assign issues to all users with explicit permissions as well as to users that have commented on the specific issue.\r\n\r\nAlso, we recently started to audit and tighten the permissions for our organizations. As a result, it became clear that large number of repo-specific permission grants are hard to review and audit. Internally, our goal is to grant all permissions via teams instead.\r\n\r\nHence, we plan to remove all collaborators from public repos that only have read permissions (folks with triage permissions will remain). The full list of affected repos is listed below.\r\n\r\nThis shouldn’t impact your ability to work with us, but losing explicit read-only has the following implications:\r\n\r\n-   **You’ll lose the collaborator badge**. We understand that this is visually appealing and for some people it might have been a badge of honor. But given that GitHub also shows a Contributor bade for folks whose PRs got merged, we don’t think it this will be a major take back.    \r\n    ![image](https://user-images.githubusercontent.com/5169960/70491508-43acf580-1ab6-11ea-94df-74ea2dde98b4.png)\r\n\r\n-   ~~**You lose the ability to interact with the CI system**. As a collaborator, you can use comments to [send commands to the CI system](https://github.com/dotnet/runtime/blob/master/docs/project/pullrequest-builds.md). While this can be useful at times, we generally don’t expect (or desire) contributors to do that. Of course, anyone can still access the CI logs.~~\r\n\r\n- **You might lose the ability to interact with the CI system**. Based on your feedback we have decided to give externals access to interact with the CI system *on a case by case basis*. If you believe you need to have that ability, please [leave a comment like Kevin's](https://github.com/dotnet/runtime/issues/718#issuecomment-563717478).\r\n\r\n| Public Repo                | \\#collaborators with read |\r\n|----------------------------|---------------------------|\r\n| arcade                     | 1                         |\r\n| BenchmarkDotNet            | 11                        |\r\n| cli                        | 2                         |\r\n| command-line-api           | 14                        |\r\n| coreclr                    | 18                        |\r\n| corefx                     | 180                       |\r\n| corefxlab                  | 4                         |\r\n| corert                     | 7                         |\r\n| core-sdk                   | 1                         |\r\n| docs                       | 3                         |\r\n| interactive-window         | 1                         |\r\n| machinelearning            | 1                         |\r\n| machinelearning-samples    | 1                         |\r\n| msbuild-language-service   | 1                         |\r\n| runtime                    | 128                       |\r\n| spark                      | 5                         |\r\n| standard                   | 1                         |\r\n| windowsdesktop             | 1                         |\r\n| winforms-datavisualization | 1                         |\r\n| Grand Total                | 381                       |\r\n\r\n### Discussion\r\n\r\nTo discuss this, please comment on the corresponding issue at https://github.com/dotnet/runtime/issues/718.","Url":"https://github.com/dotnet/announcements/issues/144","RelatedDescription":"Open issue \"Removal of read-collaborator access\" (#144)"},{"Id":"532249858","IsPullRequest":false,"CreatedAt":"2019-12-03T20:36:29","Actor":"MichaelSimons","Number":"143","RawContent":null,"Title":".NET Core `latest` Docker tags updated to 3.1","State":"open","Body":"# .NET Core `latest` Docker tags updated to 3.1\r\n\r\nThe `latest` tags for the [dotnet/core](https://hub.docker.com/_/microsoft-dotnet-core) repos have been updated to reference [.NET Core 3.1](https://devblogs.microsoft.com/dotnet/announcing-net-core-3-1/).\r\n\r\n## Discussion\r\n \r\nYou can share your thoughts on this change or see what others are saying at:\r\n \r\n* [dotnet/dotnet-docker#1337](https://github.com/dotnet/dotnet-docker/issues/1511)\r\n\r\n## Details\r\n\r\n* [dotnet-docker#1509](https://github.com/dotnet/dotnet-docker/pull/1509)\r\n\r\nThe `latest` tags for the [dotnet/core](https://hub.docker.com/_/microsoft-dotnet-core) repos are always intended to reference the latest supported version of .NET Core. At this time, the latest supported version is .NET Core 3.1. This version of .NET Core is also a [long-term supported (LTS) release](https://dotnet.microsoft.com/platform/support/policy/dotnet-core).\r\n\r\nThe following Docker repos have been updated:\r\n\r\n* [dotnet/core/sdk](https://hub.docker.com/_/microsoft-dotnet-core-sdk)\r\n* [dotnet/core/aspnet](https://hub.docker.com/_/microsoft-dotnet-core-aspnet)\r\n* [dotnet/core/runtime](https://hub.docker.com/_/microsoft-dotnet-core-runtime)\r\n* [dotnet/core/runtime-deps](https://hub.docker.com/_/microsoft-dotnet-core-runtime-deps)\r\n\r\nIt is recommended to use a more-specific tag than `latest` for anything other than casual development. Once you have an application that you believe will eventually go to production, you are recommended to use a tag like `3.1`.","Url":"https://github.com/dotnet/announcements/issues/143","RelatedDescription":"Open issue \".NET Core `latest` Docker tags updated to 3.1\" (#143)"},{"Id":"532163408","IsPullRequest":false,"CreatedAt":"2019-12-03T18:00:27","Actor":"leecow","Number":"142","RawContent":null,"Title":".NET Core 3.1.0","State":"open","Body":".NET Core 3.1.0 is available and https://github.com/dotnet/core/issues/3950 has been opened for discussion.\r\n\r\n[Release Notes](https://github.com/dotnet/core/blob/master/release-notes/3.1/3.1.0/3.1.0.md)\r\n[Download](https://dotnet.microsoft.com/download/dotnet-core/3.1)\r\n\r\n**Blog posts**\r\n\r\n[.NET Core](https://devblogs.microsoft.com/dotnet/announcing-net-core-3-1/)\r\n[ASP.NET Core](https://devblogs.microsoft.com/aspnet/asp-net-core-updates-in-net-core-3-1/)\r\n\r\nPlease report any issues you find with .NET Core 3.1 , either responding to this issue, creating a new issue or creating a new issue in one of the following repos:\r\n\r\n* [aspnet/Home](https://github.com/aspnet/Home) - for ASP.NET Core questions\r\n* [aspnet/EntityFrameworkCore](https://github.com/aspnet/EntityFrameworkCore) - for Entity Framework Core questions\r\n* [dotnet/cli](https://github.com/dotnet/cli/issues) - for CLI tools and questions\r\n* [dotnet/corefx](https://github.com/dotnet/corefx/issues) - for API issues and questions\r\n* [dotnet/coreclr](https://github.com/dotnet/coreclr/issues) - for runtime issues\r\n* [dotnet/core-setup](https://github.com/dotnet/core-setup/issues) - for installer issues\r\n* [dotnet/winforms](https://github.com/dotnet/winforms/issues) - for Winforms issues\r\n* [dotnet/wpf](https://github.com/dotnet/wpf/issues) - for WPF issues\r\n* [nuget/home](https://github.com/nuget/home/issues) - for NuGet questions and issues","Url":"https://github.com/dotnet/announcements/issues/142","RelatedDescription":"Open issue \".NET Core 3.1.0\" (#142)"},{"Id":"523579400","IsPullRequest":false,"CreatedAt":"2019-11-15T16:51:27","Actor":"MichaelSimons","Number":"141","RawContent":null,"Title":"Windows Server, version 1803 no longer supported by .NET Framework","State":"open","Body":"# Windows Server, version 1803 no longer supported by .NET Framework\r\n\r\nWindows Server, version 1803 is no longer supported. As a result, this version of Windows is no longer supported by the .NET Team and we will no longer produce .NET Framework container images for this Windows version.\r\n\r\nSupport statements:\r\n\r\n* [Currently supported .NET Framework Docker images](https://hub.docker.com/_/microsoft-dotnet-framework)\r\n* [.NET Framework Support Policy](https://dotnet.microsoft.com/platform/support/policy/dotnet-framework)\r\n* [Products Reaching End of Support for 2019](https://support.microsoft.com/en-us/help/4316957/products-reaching-end-of-support-for-2019)\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-framework-docker #451](https://github.com/microsoft/dotnet-framework-docker/issues/451)\r\n\r\n## Details\r\n\r\nDocker tags that contain `windowsservercore-1803` are no longer being produced. We will not delete existing images or those tags. However, they contain unsupported builds of Windows Server and .NET Framework.\r\n\r\n## Pulling manifest tags\r\n\r\nThese changes also affect manifest tags (AKA “multi-arch tags“), such as `4.8`. These are tags that are supported on multiple operating systems and versions, and do not contain the operating system in them. As a result of no longer producing new images for Windows Server, version 1803, manifest tags no longer include entries for Windows 10, version 1803, and Windows Server, version 1803. That means that .NET Core manifest tags are no longer usable on those Windows versions.\r\n\r\nIf you pull a manifest tag on one of the Windows versions described, you may get one of the following error messages:\r\n\r\n* `a Windows version 10.0.18362-based image is incompatible with a 10.0.17134 host`\r\n* `no matching manifest for windows/amd64 in the manifest list entries`\r\n* `no matching manifest for unknown in the manifest list entries`\r\n\r\nIf you need to still use Windows Server, version 1803 images (even though they are no longer supported), you will need to use tags that include the Windows Server version (these are non-manifest tags), for example `mcr.microsoft.com/dotnet/framework/runtime:4.8-windowsservercore-1803` or `mcr.microsoft.com/dotnet/framework/sdk:4.8-windowsservercore-1803`.","Url":"https://github.com/dotnet/announcements/issues/141","RelatedDescription":"Open issue \"Windows Server, version 1803 no longer supported by .NET Framework\" (#141)"},{"Id":"523578215","IsPullRequest":false,"CreatedAt":"2019-11-15T16:49:04","Actor":"MichaelSimons","Number":"140","RawContent":null,"Title":"Windows Server, version 1803 no longer supported by .NET Core","State":"open","Body":"# Windows Server, version 1803 no longer supported by .NET Core\r\n\r\nWindows Server, version 1803 is no longer supported. As a result, this version of Windows is no longer supported by the .NET Team and we will no longer produce .NET Core container images for this Windows version.\r\n\r\nSupport statements:\r\n\r\n* [Currently supported .NET Core Docker images](https://hub.docker.com/_/microsoft-dotnet-core)\r\n* [.NET Core Support Policy](https://dotnet.microsoft.com/platform/support/policy/dotnet-core)\r\n* [Products Reaching End of Support for 2019](https://support.microsoft.com/en-us/help/4316957/products-reaching-end-of-support-for-2019)\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #1469](https://github.com/dotnet/dotnet-docker/issues/1469)\r\n\r\n## Details\r\n\r\nDocker tags that contain `nanoserver-1803` are no longer being produced. We will not delete existing images or those tags. However, they contain unsupported builds of Nano Server and .NET Core.\r\n\r\n## Pulling manifest tags\r\n\r\nThese changes also affect manifest tags (AKA “multi-arch tags“), such as `3.0`, `3.0.0`. These are tags that are supported on multiple operating systems, and do not contain the operating system in them. As a result of no longer producing new images for Windows Server, version 1803, manifest tags no longer include entries for Windows 10, version 1803, and Windows Server, version 1803. That means that .NET Core manifest tags are no longer usable on those Windows versions.\r\n\r\nIf you pull a manifest tag on one of the Windows versions described, you may get one of the following error messages:\r\n\r\n* `a Windows version 10.0.18362-based image is incompatible with a 10.0.17134 host`\r\n* `no matching manifest for windows/amd64 in the manifest list entries`\r\n* `no matching manifest for unknown in the manifest list entries`\r\n\r\nIf you need to still use Nano Server, version 1803 images (even though it is no longer supported), you will need to use tags that include the Nano Server version (these are non-manifest tags), for example `mcr.microsoft.com/dotnet/core/runtime:3.0-nanoserver-1803`.","Url":"https://github.com/dotnet/announcements/issues/140","RelatedDescription":"Open issue \"Windows Server, version 1803 no longer supported by .NET Core\" (#140)"},{"Id":"522994983","IsPullRequest":false,"CreatedAt":"2019-11-14T17:15:08","Actor":"leecow","Number":"139","RawContent":null,"Title":".NET Core 3.1.0 Preview 3","State":"open","Body":".NET Core 3.1.0 Preview 3 is available and https://github.com/dotnet/core/issues/3809 has been opened for discussion.\r\n\r\n[Release Notes](https://github.com/dotnet/core/blob/master/release-notes/3.1/preview/3.1.0-preview3.md)\r\n[Download](https://dotnet.microsoft.com/download/dotnet-core/3.1)\r\n\r\n**Blog posts**\r\n\r\n[.NET Core](https://devblogs.microsoft.com/dotnet/announcing-net-core-3-1-preview-3/)\r\n[ASP.NET Core](https://devblogs.microsoft.com/aspnet/asp-net-core-updates-in-net-core-3-1-preview-3/)\r\n\r\nPlease report any issues you find with .NET Core 3.1 Preview 3, either responding to this issue, creating a new issue or creating a new issue in one of the following repos:\r\n\r\n* [aspnet/Home](https://github.com/aspnet/Home) - for ASP.NET Core questions\r\n* [aspnet/EntityFrameworkCore](https://github.com/aspnet/EntityFrameworkCore) - for Entity Framework Core questions\r\n* [dotnet/cli](https://github.com/dotnet/cli/issues) - for CLI tools and questions\r\n* [dotnet/corefx](https://github.com/dotnet/corefx/issues) - for API issues and questions\r\n* [dotnet/coreclr](https://github.com/dotnet/coreclr/issues) - for runtime issues\r\n* [dotnet/core-setup](https://github.com/dotnet/core-setup/issues) - for installer issues\r\n* [dotnet/winforms](https://github.com/dotnet/winforms/issues) - for Winforms issues\r\n* [dotnet/wpf](https://github.com/dotnet/wpf/issues) - for WPF issues\r\n* [nuget/home](https://github.com/nuget/home/issues) - for NuGet questions and issues\r\n","Url":"https://github.com/dotnet/announcements/issues/139","RelatedDescription":"Open issue \".NET Core 3.1.0 Preview 3\" (#139)"},{"Id":"522864668","IsPullRequest":false,"CreatedAt":"2019-11-14T13:37:28","Actor":"TaraOverfield","Number":"138","RawContent":null,"Title":"November 2019 .NET Updates","State":"open","Body":"The following .NET updates were released on November 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n\r\n* [.NET Framework November 13, 2019, Update for .NET Framework 4.8](https://devblogs.microsoft.com/dotnet/net-framework-november-13-2019-update-for-net-framework-4-8/)\r\n* [.NET Framework November 2019 Preview of Quality Rollup](https://devblogs.microsoft.com/dotnet/net-framework-november-2019-preview-of-quality-rollup/)\r\n\r\n## .NET Core\r\n\r\n* .NET Core 2.1.14 and .NET Core SDK ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.14/2.1.14.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.1) )\r\n\r\n* .NET Core 2.2.7 and .NET Core SDK ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.8/2.2.8.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.2) )\r\n\r\n* .NET Core 3.0.1 and .NET Core SDK ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/3.0/3.0.1/3.0.1.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/3.0) )\r\n\r\nA discussion issue is available at [core/3848](https://github.com/dotnet/core/issues/3848)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/138","RelatedDescription":"Open issue \"November 2019 .NET Updates\" (#138)"},{"Id":"522488807","IsPullRequest":false,"CreatedAt":"2019-11-13T21:41:06","Actor":"MichaelSimons","Number":"137","RawContent":null,"Title":".NET Framework Docker images support for Windows Server, version 1909","State":"open","Body":"# .NET Framework Docker images support for Windows Server, version 1909\r\n\r\nWith the release of Windows Server, version 1909 on November 11, 2019, .NET Framework Docker images have been published for Server Core, version 1909.  \r\n\r\n## Discussion\r\n\r\nYou can share your thoughts on this change or see what others are saying at:\r\n* [dotnet-framework-docker#448](https://github.com/microsoft/dotnet-framework-docker/issues/448)\r\n\r\n## Details \r\n\r\n* [dotnet-framework-docker#447](https://github.com/microsoft/dotnet-framework-docker/pull/447) \r\n\r\n.NET Framework tags containing the substring `windowsservercore-1909` are now available. You can find the full set of tags on [Docker Hub](https://hub.docker.com/_/microsoft-dotnet-framework). \r\n\r\n.NET Framework multi-arch tags, such as `4.8`, have been updated to use `windowsservercore-1909` images if your host is Windows Server 1909 or higher. \r\n\r\n### Impacted Repos \r\n\r\n* [dotnet/framework/sdk](https://hub.docker.com/_/microsoft-dotnet-framework-sdk/): .NET Framework SDK \r\n* [dotnet/framework/aspnet](https://hub.docker.com/_/microsoft-dotnet-framework-aspnet/): ASP.NET Runtime  \r\n* [dotnet/framework/wcf](https://hub.docker.com/_/microsoft-dotnet-framework-aspnet/): Windows Communication Foundation \r\n* [dotnet/framework/runtime](https://hub.docker.com/_/microsoft-dotnet-framework-runtime/): .NET Framework Runtime\r\n* [dotnet/framework/samples](https://hub.docker.com/_/microsoft-dotnet-framework-samples/): .NET Framework Samples\r\n\r\n","Url":"https://github.com/dotnet/announcements/issues/137","RelatedDescription":"Open issue \".NET Framework Docker images support for Windows Server, version 1909\" (#137)"},{"Id":"521830642","IsPullRequest":false,"CreatedAt":"2019-11-12T22:05:51","Actor":"MichaelSimons","Number":"136","RawContent":null,"Title":".NET Core Docker images support for Windows Server, version 1909","State":"open","Body":"# .NET Core Docker images support for Windows Server, version 1909\r\n\r\nWith the release of Windows Server, version 1909 on November 11, 2019, .NET Core Docker images have been published for Nano Server, version 1909. \r\n\r\n## Discussion\r\n\r\nYou can share your thoughts on this change or see what others are saying at:\r\n* [dotnet-docker#1460](https://github.com/dotnet/dotnet-docker/issues/1460)\r\n## Details\r\n\r\n* [dotnet-docker#1457](https://github.com/dotnet/dotnet-docker/pull/1457)\r\n\r\n.NET Core tags containing the substring `nanoserver-1909` are now available. You can find the full set of tags on [Docker Hub](https://hub.docker.com/_/microsoft-dotnet-core).\r\n\r\n.NET Core multi-arch tags, such as `3.0`, have been updated to use `nanoserver-1909` images if your host is Windows Server 1909 or higher.\r\n\r\n### Impacted Repos\r\n\r\n* [dotnet/core/sdk](https://hub.docker.com/_/microsoft-dotnet-core-sdk/): .NET Core SDK\r\n* [dotnet/core/aspnet](https://hub.docker.com/_/microsoft-dotnet-core-aspnet/): ASP.NET Core Runtime\r\n* [dotnet/core/runtime](https://hub.docker.com/_/microsoft-dotnet-core-runtime/): .NET Core Runtime\r\n* [dotnet/core/samples](https://hub.docker.com/_/microsoft-dotnet-core-samples/): .NET Core Samples\r\n\r\n","Url":"https://github.com/dotnet/announcements/issues/136","RelatedDescription":"Open issue \".NET Core Docker images support for Windows Server, version 1909\" (#136)"},{"Id":"520243813","IsPullRequest":false,"CreatedAt":"2019-11-08T21:33:12","Actor":"CESARDELATORRE","Number":"135","RawContent":null,"Title":"Announcing ML.NET 1.4 general availability (Machine Learning for .NET)","State":"open","Body":"This week (coinciding with Microsoft Ignite 2019) we announced the release of **ML.NET 1.4 GA**. \r\nThere are many new features such as:\r\n\r\n- **New Deep Learning Image Classifier (GA):** GPU support for training and inference Image Classifier ML models.\r\n\r\n- **Database Loader  (GA):** You can train your model with data directly from any relational database supported by System.Data.\r\n\r\n- **Enhanced for .NET Core 3.0  (GA):** Performance improvements thanks to hardware intrinsics feature in .NET Core 3.0.\r\n\r\n- **PredictionEnginePool for scalable deployments (GA):** Recommended approach for multi-threaded scalable apps such as ASP.NET Core apps/services and Azure Functions\r\n\r\n- **ML.NET and .NET support in Jupyter notebooks:**  You can now run any .NET code (C# / F#) in Jupyter notebooks and therefore run ML.NET code in it as well. Great for exploring and documenting model training experiments, data distribution exploration, data cleaning, plotting data charts, learning scenarios such as ML.NET courses, hands-on-labs and quizzes, etc.\r\n\r\nSee details in the following **Blog Posts**:\r\n\r\n- [Announcing ML.NET 1.4 general availability (Machine Learning for .NET)](https://devblogs.microsoft.com/dotnet/announcing-ml-net-1-4-global-availability-machine-learning-for-net/)\r\n\r\n- [Using ML.NET in Jupyter notebooks](https://devblogs.microsoft.com/cesardelatorre/using-ml-net-in-jupyter-notebooks/)\r\n\r\n- [.NET Core with Jupyter Notebooks](https://devblogs.microsoft.com/dotnet/net-core-with-juypter-notebooks-is-here-preview-1/)\r\n","Url":"https://github.com/dotnet/announcements/issues/135","RelatedDescription":"Open issue \"Announcing ML.NET 1.4 general availability (Machine Learning for .NET)\" (#135)"},{"Id":"517169249","IsPullRequest":false,"CreatedAt":"2019-11-04T13:57:09","Actor":"leecow","Number":"134","RawContent":null,"Title":".NET Core 3.1.0 Preview 2","State":"open","Body":".NET Core 3.1.0 Preview 2 is available and https://github.com/dotnet/core/issues/3744 has been opened for discussion.\r\n\r\n[Release Notes](https://github.com/dotnet/core/blob/master/release-notes/3.1/preview/3.1.0-preview2.md)\r\n[Download](https://dotnet.microsoft.com/download/dotnet-core/3.1)\r\n\r\n**Blog posts**\r\n\r\n[.NET Core](https://devblogs.microsoft.com/dotnet/announcing-net-core-3-1-preview-2/)\r\n[ASP.NET Core](https://devblogs.microsoft.com/aspnet/asp-net-core-updates-in-net-core-3-1-preview-2/)\r\n\r\nPlease report any issues you find with .NET Core 3.1 Preview 2, either responding to https://github.com/dotnet/core/issues/3744, creating a new issue or creating a new issue in one of the following repos:\r\n* [aspnet/Home](https://github.com/aspnet/Home) - for ASP.NET Core questions\r\n* [aspnet/EntityFrameworkCore](https://github.com/aspnet/EntityFrameworkCore) - for Entity Framework Core questions\r\n* [dotnet/cli](https://github.com/dotnet/cli/issues) - for CLI tools and questions\r\n* [dotnet/corefx](https://github.com/dotnet/corefx/issues) - for API issues and questions\r\n* [dotnet/coreclr](https://github.com/dotnet/coreclr/issues) - for runtime issues\r\n* [dotnet/core-setup](https://github.com/dotnet/core-setup/issues) - for installer issues\r\n* [dotnet/winforms](https://github.com/dotnet/winforms/issues) - for Winforms issues\r\n* [dotnet/wpf](https://github.com/dotnet/wpf/issues) - for WPF issues\r\n* [nuget/home](https://github.com/nuget/home/issues) - for NuGet questions and issues","Url":"https://github.com/dotnet/announcements/issues/134","RelatedDescription":"Open issue \".NET Core 3.1.0 Preview 2\" (#134)"},{"Id":"514753283","IsPullRequest":false,"CreatedAt":"2019-10-30T15:14:43","Actor":"jaredpar","Number":"133","RawContent":null,"Title":"Repository Consolidation Timeline","State":"open","Body":"*To discuss these plans, please comment on the corresponding issue at https://github.com/dotnet/coreclr/issues/27549.*\r\n\r\nAs we [announced](https://github.com/dotnet/announcements/issues/119) [earlier](https://github.com/dotnet/announcements/issues/127) we are planning on consolidating some of the repositories in the dotnet org. Our planning has reached a point where we have a schedule for the coreclr, corefx and core-setupmoves into dotnet/runtime that we want to share out with the community.\r\n\r\n### November 13th\r\nWe’ll move all changes from the original repositories into dotnet/runtime up to 5PM PST on November 13th. We’ll try to help as many pull requests as possible get merged by then. At that point, if there’s any pull requests still open we’ll have to close them. If you’d still like to continue those pull requests, we’d encourage you to bring them to dotnet/runtime in a new pull request.\r\n\r\nThe repositories themselves will be effectively archived at this point. The state of the “master” branch will be recorded with a tag, named “master-archive”, but the branch itself will be deleted. The default branch for the repositories will be named “archive” and it will be a single commit with a README.md and CONTRIBUTING.md file pointing to our dotnet/runtime repository.\r\n\r\nThe repositories will remain active for servicing changes to .NET Core 3.1 and earlier hence we will not be using the GitHub archive capability. \r\n\r\n### November 22nd\r\nThe dotnet/runtime repository will be made public and available for community contribution. Even though the repository will be created on November 13th it will take several days to get it back into a working order: fixing up our build scripts, recreating our Azure Dev Ops build definitions, etc … Until those tasks are completed it will not be possible to accept pull request and hence the repository will remain private. Once we are in a state that pull requests can be merged again the repository will be made public.\r\n\r\nOur expectation is that will occur on November 22nd. If it is ready sooner it will be made public sooner. If the work takes longer than we planned then we will add an update to this announcement with a new expected date.\r\n\r\n### December 1st-2nd\r\nAll issues, open and closed, will be migrated from corefx, coreclr and core-setup into dotnet/runtime. This will be using GitHub’s existing issue transfer feature in a bulk migration. This means all of the existing issue links will continue to function via redirects.\r\n\r\nThis does mean though that labels will not transfer with the issues. Labels will be re-applied as a post processing step by our engineering team once the issue migration completes.\r\n\r\nEven though our issues won’t be fully migrated until this time we’d like the community to begin filing issues on dotnet/runtime as soon as it’s public rather than continuing to file issues on the original repositories.\r\n\r\n### Migrating Commits\r\nThe dotnet/runtime repository will be a new commit history from the original repositories. We are using this consolidation as an opportunity to clean up our history with the goal of having a cleaner, smaller history as a starting point. This means commits will be rewritten in the following ways as they are migrated to dotnet/runtime:\r\n\r\n1. Author information, contributor information, changed file list and time stamps from the original commit will be preserved.\r\n1. Links to issues, pull requests or commits in the repository using GitHub short links will be rewritten so they continue to point the original repository. \r\n1. Every commit will be appended with a link to the original commit it was mapped from.\r\n\r\nThe actual contents of the commit though will be updated to match the new directory layout of the dotnet/runtime repository.","Url":"https://github.com/dotnet/announcements/issues/133","RelatedDescription":"Open issue \"Repository Consolidation Timeline\" (#133)"},{"Id":"513963125","IsPullRequest":false,"CreatedAt":"2019-10-29T14:32:55","Actor":"mthalman","Number":"132","RawContent":null,"Title":"Release of Alpine 3.10 Docker images","State":"open","Body":"# .NET Core Alpine Docker images updated to Alpine 3.10\r\n\r\nDocker images for .NET Core have been released that support Alpine 3.10.  Included with this release, the floating tags for Alpine-based images have been moved from Alpine 3.9 to 3.10.  \r\n\r\n## Discussion\r\nYou can share your thoughts on this change or see what others are saying at:\r\n\r\n[dotnet/dotnet-docker#1418](https://github.com/dotnet/dotnet-docker/issues/1418)\r\n\r\n## Details\r\n* [dotnet/dotnet-docker#1415](https://github.com/dotnet/dotnet-docker/pull/1415)\r\n\r\nIf you made use of a floating tag for Alpine, such as `3.0-alpine`, `2.2-alpine`, and `2.1-alpine`, these have been changed to now reference Alpine 3.10 instead of Alpine 3.9.  Be sure to pull this tag on your Docker machine to get the latest image.\r\n\r\nThe following Docker repos have been updated:\r\n\r\n* [dotnet/core/sdk](https://hub.docker.com/_/microsoft-dotnet-core-sdk)\r\n* [dotnet/core/aspnet](https://hub.docker.com/_/microsoft-dotnet-core-aspnet)\r\n* [dotnet/core/runtime](https://hub.docker.com/_/microsoft-dotnet-core-runtime)\r\n* [dotnet/core/runtime-deps](https://hub.docker.com/_/microsoft-dotnet-core-runtime-deps)","Url":"https://github.com/dotnet/announcements/issues/132","RelatedDescription":"Open issue \"Release of Alpine 3.10 Docker images\" (#132)"},{"Id":"508132491","IsPullRequest":false,"CreatedAt":"2019-10-16T22:28:29","Actor":"leecow","Number":"131","RawContent":null,"Title":".NET Core 3.1.0 Preview 1","State":"open","Body":".NET Core 3.1.0 Preview 1 is available and https://github.com/dotnet/core/issues/3634 has been opened for discussion.\r\n\r\n**Blog round up**\r\n* [.NET Core](https://devblogs.microsoft.com/dotnet/announcing-net-core-3-1-preview-1/)\r\n* [ASP.NET Core and Blazor](https://devblogs.microsoft.com/aspnet/asp-net-core-updates-in-net-core-3-1-preview-1/)\r\n\r\n[Release Notes](https://github.com/dotnet/core/blob/master/release-notes/3.1/preview/3.1.0-preview1.md)\r\n[Download](https://dotnet.microsoft.com/download/dotnet-core/3.1)\r\n\r\nPlease report any issues you find with .NET Core 3.1 Preview 1, either responding to https://github.com/dotnet/core/issues/3634, creating a new issue or creating a new issue in one of the following repos:\r\n\r\n* [aspnet/Home](https://github.com/aspnet/Home) - for ASP.NET Core questions\r\n* [aspnet/EntityFrameworkCore](https://github.com/aspnet/EntityFrameworkCore) - for Entity Framework Core questions\r\n* [dotnet/cli](https://github.com/dotnet/cli/issues) - for CLI tools and questions\r\n* [dotnet/corefx](https://github.com/dotnet/corefx/issues) - for API issues and questions\r\n* [dotnet/coreclr](https://github.com/dotnet/coreclr/issues) - for runtime issues\r\n* [dotnet/core-setup](https://github.com/dotnet/core-setup/issues) - for installer issues\r\n* [dotnet/winforms](https://github.com/dotnet/winforms/issues) - for Winforms issues\r\n* [dotnet/wpf](https://github.com/dotnet/wpf/issues) - for WPF issues\r\n* [nuget/home](https://github.com/nuget/home/issues) - for NuGet questions and issues\r\n","Url":"https://github.com/dotnet/announcements/issues/131","RelatedDescription":"Open issue \".NET Core 3.1.0 Preview 1\" (#131)"},{"Id":"506832844","IsPullRequest":false,"CreatedAt":"2019-10-14T19:26:10","Actor":"terrajobst","Number":"130","RawContent":null,"Title":".NET Core 3.0 concludes the .NET Framework API porting project","State":"open","Body":"We started in .NET Core 1.0 with a very minimal API set that only included \\~18K of the .NET Framework APIs. With [.NET Standard 2.0](https://devblogs.microsoft.com/dotnet/announcing-net-standard-2-0/), we tried to make it much more viable to share code between .NET Framework, .NET Core, and Xamarin which resulted in approximately 38K .NET Frameworks APIs being available in .NET Core 2.0. We also built the [Windows Compatibility Pack](https://devblogs.microsoft.com/dotnet/announcing-the-windows-compatibility-pack-for-net-core/) which made another 21K .NET Framework APIs available to .NET Core, resulting in almost 60K additional APIs. And in .NET Core 3.0 we added WPF and WinForms, which increased the number of .NET Framework APIs ported to .NET Core to over 120k, which is more than half of all .NET Framework APIs.\r\n\r\nIt’s also worth pointing out that we added about 62K APIs to .NET Core that don’t exist in .NET Framework. If we compare their total number of APIs, .NET Core has about 80% of the API surface of .NET Framework.\r\n\r\n<p align=\"center\">\r\n<img src=\"https://user-images.githubusercontent.com/5169960/66777114-f8db7c80-ee7c-11e9-9161-acfe1c491586.png\" width=\"600\" align=\"center\">\r\n</p>\r\n\r\nWe announced that the [future of .NET](https://devblogs.microsoft.com/dotnet/net-core-is-the-future-of-net/) will be based on .NET Core. And at Build 2019, [Scott Hunter stated](https://www.youtube.com/watch?v=ZlO1utbB2GQ&t=54m20s) that AppDomains, remoting, Web Forms, WCF server, and Windows Workflow won’t be ported to .NET Core.\r\n\r\nWith .NET Core 3.0, we’re at the point where we’ve ported all technologies that are required for modern workloads, be that desktop apps, mobile apps, console apps, web sites, or cloud services. That’s not to say that we don’t have any gaps or opportunities for new technologies, but we generally believe we won’t be finding them in the .NET Framework code base anymore. Moving forward, we’re focusing our resources on incorporating new technologies.\r\n\r\nSimultaneously, we’re looking into releasing more of the [.NET Framework code base under the MIT license](https://github.com/microsoft/referencesource) on GitHub to allow the community to create OSS projects for technologies we’re not intending to bring to .NET Core. For example, there already are community projects for [CoreWF](https://github.com/UiPath/corewf) and [CoreWCF](https://github.com/CoreWCF/CoreWCF).\r\n\r\nWe’d like to thank everyone who filed issues with requests for APIs being ported. Those issues allowed us to prioritize and close the gaps that prevented people from porting to .NET Core.\r\n\r\nBut since we generally no longer plan to bring existing technologies from .NET Framework to .NET Core we’ll be closing all issues that are [labeled with port-to-core](https://github.com/dotnet/corefx/issues?utf8=%E2%9C%93&q=is%3Aissue+is%3Aopen+label%3Aport-to-core).\r\n\r\n### Discussion\r\n\r\nTo discuss this issue, please comment on the corresponding issue at https://github.com/dotnet/corefx/issues/41769.","Url":"https://github.com/dotnet/announcements/issues/130","RelatedDescription":"Open issue \".NET Core 3.0 concludes the .NET Framework API porting project\" (#130)"},{"Id":"505445666","IsPullRequest":false,"CreatedAt":"2019-10-10T18:45:56","Actor":"TaraOverfield","Number":"129","RawContent":null,"Title":"October 2019 .NET Updates","State":"open","Body":"The following .NET updates were released on October 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n\r\n* [.NET Framework October 2019 Cumulative Update for Windows 10 version 1903 and version 1909](https://devblogs.microsoft.com/dotnet/net-framework-october-2019-cumulative-updates-windows-10-version-1903-and-windows-10-version-1909/)\r\n* [.NET Framework October 2019 Preview of Quality Rollup](https://devblogs.microsoft.com/dotnet/net-framework-october-2019-preview-of-quality-rollup/)\r\n* [.NET Framework October 2019 Security and Quality Rollup](https://devblogs.microsoft.com/dotnet/net-framework-october-2019-security-and-quality-rollup/)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/129","RelatedDescription":"Open issue \"October 2019 .NET Updates\" (#129)"},{"Id":"505328689","IsPullRequest":false,"CreatedAt":"2019-10-10T15:19:53","Actor":"carloreggiani","Number":"128","RawContent":null,"Title":"Docker Stop return status Exited \"(3221225786)\"","State":"closed","Body":"Hi\r\nI'm investigating a issue regarding official MCR images on a Win2019 server with Docker EE engine 19.03.2.\r\n\r\nThe images that I'm unsing are:\r\nmcr.microsoft.com/windows/servercore:1809\r\nmcr.microsoft.com/dotnet/framework/aspnet:4.8\r\n\r\nStopping containers based on these images (\"docker stop\" command) I'm getting: \r\n\"Exited (3221225786)\"\r\n\r\nOn linux a stop command normally return: \"Exited (137)\"\r\n\r\nIs it a normal behaviour? What's means 3221225786?\r\n\r\nThanks for any support\r\n\r\nCarlo","Url":"https://github.com/dotnet/announcements/issues/128","RelatedDescription":"Closed issue \"Docker Stop return status Exited \"(3221225786)\"\" (#128)"},{"Id":"504325600","IsPullRequest":false,"CreatedAt":"2019-10-08T23:14:11","Actor":"terrajobst","Number":"127","RawContent":null,"Title":"Consolidated repo names","State":"open","Body":"[ann]: https://github.com/dotnet/announcements/issues/119\r\n\r\nAs we announced earlier, we're [planning on consolidating][ann] some of the repositories in the dotnet org. While this is still work in progress, we'd like to give you an update on where we are.\r\n\r\nSo far, we've identified the following repos:\r\n\r\n* dotnet/**runtime**\r\n\t- Will contain [coreclr](https://github.com/dotnet/coreclr), [corefx](https://github.com/dotnet/corefx), [core-setup](https://github.com/dotnet/core-setup), [aspnet/Extensions](https://github.com/aspnet/Extensions), and some of [mono/mono](https://github.com/mono/mono)\r\n* [dotnet/**sdk**](https://github.com/dotnet/sdk)\r\n\t- Will contain [toolset](https://github.com/dotnet/toolset), [sdk](https://github.com/dotnet/sdk), [cli](https://github.com/dotnet/cli)\r\n* dotnet/**installer**\r\n\t- Renamed from [core-sdk](https://github.com/dotnet/core-sdk)\r\n* dotnet/**aspnetcore**\r\n\t- Moved from [aspnet/AspNetCore](https://github.com/aspnet/AspNetCore) and will also contain [aspnet/AspNetCore-Tooling](https://github.com/aspnet/AspNetCore-Tooling)\r\n* dotnet/**efcore**\r\n\t- Moved from [aspnet/EntityFrameworkCore](https://github.com/aspnet/EntityFrameworkCore)\r\n* [dotnet/**winforms**](https://github.com/dotnet/winforms)\r\n\t- Unchanged, but listed for clarity \r\n* [dotnet/**wpf**](https://github.com/dotnet/wpf)\r\n\t- Unchanged, but listed for clarity\r\n\r\n### Name changes\r\n\r\nYou might notice that we changed our mind on naming from our [earlier announcement][ann]. Based on your feedback, we decided to go with **dotnet/runtime** instead of **dotnet/platform** and **dotnet/sdk** instead of **dotnet/cli**.\r\n\r\nSeveral people pointed out that the previous names weren't relatable to how we talk about the product, for example on download pages. So, we decided to match the product distributions as the primary design point for the new names. We generally refer to the bits you need to run your app as *the runtime* and the bits you need to build apps as *the SDK*. This also matches the naming chosen by other platforms.\r\n\r\n### New repos can't be used for .NET Core 3.x or earlier\r\n\r\nThe consolidated repositories are going to be about .NET 5 and going forward. It will not be possible to build .NET Core 3.1 or earlier from these repositories. As such, only the master branch from each of the repositories will be brought forward. There will be no porting of the individual release branches in the source repositories.\r\n\r\n### Personal names and email addresses\r\n\r\nSince we're planning on rebasing the history in the merged repositories, we can map your name and email address to new values as well. We primarily do this to support our friends in the LGBTQ+ community who have changed their names to reflect their identities. However, anybody is welcome to use this to change their email and name.\r\n\r\nWhatever your reason might be: we value your contributions and we hope this small gesture makes your life a little bit better. So if you changed your name/email – or simply prefer us to use different values – please [submit a request](mailto:dotnet@microsoft.com&subject=.NET%20repo%20consolidation%3A%20request%20for%20name%20change&body=Hey%2C%20%0A%0AI%E2%80%99d%20like%20to%20change%20my%20email%2Fdisplay%20name%20in%20the%20consolidated%20repo%20from%20%0A%0A%20%20%20%20%20%20%20%20My%20Old%20Name%20%3Cold.me%40example.org%3E%20%0A%0Ato%20%0A%0A%20%20%20%20%20%20%20%20My%20New%20Name%20%3Cnew.me%40example.org%3E%20%0A%0AThanks%21%20%0A).\r\n\r\n### More is coming\r\n\r\nWe'll share more updates in the upcoming months. Please let us know of any concerns that we haven't addressed yet!\r\n\r\n### Discussion\r\n\r\nTo discuss these plans, please comment on the corresponding issue at https://github.com/dotnet/coreclr/issues/27096.","Url":"https://github.com/dotnet/announcements/issues/127","RelatedDescription":"Open issue \"Consolidated repo names\" (#127)"},{"Id":"504304108","IsPullRequest":false,"CreatedAt":"2019-10-08T22:06:07","Actor":"MichaelSimons","Number":"126","RawContent":null,"Title":"4.7.x .NET Framework SDK Docker images no longer published","State":"open","Body":"# 4.7.x .NET Framework SDK Docker images no longer published\r\n\r\nThe [4.7.x .NET Framework SDK Docker images](https://hub.docker.com/_/microsoft-dotnet-framework-sdk) will no longer be published after Oct. 8, 2019.  The 4.8 image tags should be used as a replacement.\r\n\r\n## Discussion\r\n \r\nYou can share your thoughts on this change or see what others are saying at:\r\n \r\n* [microsoft/dotnet-framework-docker#428](https://github.com/microsoft/dotnet-framework-docker/issues/428)\r\n\r\n## Details\r\n\r\nAny references to the following SDK tags should be updated to reference `4.8` instead:\r\n* `mcr.microsoft.com/dotnet/framework/sdk:4.7.1`\r\n* `mcr.microsoft.com/dotnet/framework/sdk:4.7.1-windowsservercore-ltsc2016`\r\n* `mcr.microsoft.com/dotnet/framework/sdk:4.7.1-<yyyymmdd>-windowsservercore-ltsc2016`\r\n* `mcr.microsoft.com/dotnet/framework/sdk:4.7.2`\r\n* `mcr.microsoft.com/dotnet/framework/sdk:4.7.2-windowsservercore-ltsc2016`\r\n* `mcr.microsoft.com/dotnet/framework/sdk:4.7.2-<yyyymmdd>-windowsservercore-ltsc2016`\r\n* `mcr.microsoft.com/dotnet/framework/sdk:4.7.2-windowsservercore-1803`\r\n* `mcr.microsoft.com/dotnet/framework/sdk:4.7.2-<yyyymmdd>-windowsservercore-1803`\r\n* `mcr.microsoft.com/dotnet/framework/sdk:4.7.2-windowsservercore-ltsc2019`\r\n* `mcr.microsoft.com/dotnet/framework/sdk:4.7.2-<yyyymmdd>-windowsservercore-ltsc2019`\r\n\r\nIf you haven't migrated to using images from [MCR](https://github.com/dotnet/announcements/issues/101) and are still using the .NET Framework repos on Docker Hub, you will need to update your tag references to MCR.  This is because the 4.8 images only exist on MCR.  These are the following Docker Hub tags that are affected and should be updated to reference the [4.8 tags at the MCR location](https://hub.docker.com/_/microsoft-dotnet-framework-sdk):\r\n* `microsoft/dotnet-framework:4.7.1-sdk`\r\n* `microsoft/dotnet-framework:4.7.1-sdk-windowsservercore-ltsc2016`\r\n* `microsoft/dotnet-framework:4.7.2-sdk`\r\n* `microsoft/dotnet-framework:4.7.2-sdk-windowsservercore-ltsc2016`\r\n* `microsoft/dotnet-framework:4.7.2-sdk-windowsservercore-1803`\r\n* `microsoft/dotnet-framework:4.7.2-sdk-windowsservercore-ltsc2019`","Url":"https://github.com/dotnet/announcements/issues/126","RelatedDescription":"Open issue \"4.7.x .NET Framework SDK Docker images no longer published\" (#126)"},{"Id":"502102886","IsPullRequest":false,"CreatedAt":"2019-10-03T14:30:16","Actor":"MichaelSimons","Number":"125","RawContent":null,"Title":"Alpine Docker images no longer include the tzdata package in 3.0","State":"open","Body":"# Alpine Docker images no longer include the tzdata package in 3.0\r\nBeginning with the 3.0 release, the `tzdata` package has been removed from all Alpine Docker images.\r\n\r\n## Discussion\r\nYou can share your thoughts on this change or see what others are saying at:\r\n\r\ndotnet/dotnet-docker#1366\r\n\r\n## Details\r\n* https://github.com/dotnet/dotnet-docker/pull/1312\r\n\r\n\r\nThis package was removed because it wasn't required for the main set of scenarios and to have consistency between the runtime-deps images across all Linux distros.  This package is still installed in the 2.x images for Alpine so this will be something to be aware of when migrating from 2.x to 3.0.\r\n\r\n\r\nYou may be impacted by this if you use any of the Alpine images and your code has a dependency on the `tzdata` package, such as using the `System.TimeZoneInfo` API.  In that case, you'll need to update your Dockerfile to explicitly install the package:\r\n```\r\nRUN apk add --no-cache tzdata\r\n```\r\n","Url":"https://github.com/dotnet/announcements/issues/125","RelatedDescription":"Open issue \"Alpine Docker images no longer include the tzdata package in 3.0\" (#125)"},{"Id":"497868605","IsPullRequest":false,"CreatedAt":"2019-09-24T19:01:32","Actor":"MichaelSimons","Number":"124","RawContent":null,"Title":".NET Core `latest` Docker tags updated to 3.0","State":"open","Body":"# .NET Core `latest` Docker tags updated to 3.0\r\n \r\nThe `latest` tags for the [dotnet/core](https://hub.docker.com/_/microsoft-dotnet-core) repos have been updated to reference [.NET Core 3.0](https://devblogs.microsoft.com/dotnet/announcing-net-core-3-0/).\r\n \r\n## Discussion\r\n \r\nYou can share your thoughts on this change or see what others are saying at:\r\n \r\n* [dotnet/dotnet-docker#1337](https://github.com/dotnet/dotnet-docker/issues/1337)\r\n \r\n## Details\r\n \r\n* [dotnet-docker#1334](https://github.com/dotnet/dotnet-docker/pull/1334)\r\n \r\nThe `latest` tags for the [dotnet/core](https://hub.docker.com/_/microsoft-dotnet-core) repos are always intended to reference the latest supported version of .NET Core. At this time, the latest supported version is .NET Core 3.0.\r\n \r\nThe following Docker repos have been updated:\r\n \r\n* [dotnet/core/sdk](https://hub.docker.com/_/microsoft-dotnet-core-sdk)\r\n* [dotnet/core/aspnet](https://hub.docker.com/_/microsoft-dotnet-core-aspnet)\r\n* [dotnet/core/runtime](https://hub.docker.com/_/microsoft-dotnet-core-runtime)\r\n* [dotnet/core/runtime-deps](https://hub.docker.com/_/microsoft-dotnet-core-runtime-deps)\r\n* [dotnet/core/samples](https://hub.docker.com/_/microsoft-dotnet-core-samples)\r\n \r\nIt is recommended to use a more-specific tag than `latest` for anything other than casual development. Once you have an application that you believe will eventually go to production, you are recommended to use a tag like `3.0`. The [.NET Core Docker Samples](https://github.com/dotnet/dotnet-docker/tree/master/samples) contain examples of more specific usage such as the [.NET Core console sample](https://github.com/dotnet/dotnet-docker/blob/master/samples/dotnetapp/Dockerfile).\r\n","Url":"https://github.com/dotnet/announcements/issues/124","RelatedDescription":"Open issue \".NET Core `latest` Docker tags updated to 3.0\" (#124)"},{"Id":"494223006","IsPullRequest":false,"CreatedAt":"2019-09-16T19:03:54","Actor":"leecow","Number":"123","RawContent":null,"Title":".NET Core 3.0 RC 1","State":"open","Body":".NET Core RC 1 released today. https://github.com/dotnet/core/issues/3380 has been opened for discussion. \r\n\r\n[Release Notes](https://github.com/dotnet/core/blob/master/release-notes/3.0/preview/3.0.0-rc1.md)\r\n[Download](https://github.com/dotnet/core/blob/master/release-notes/3.0/preview/3.0.0-rc1-download.md)\r\n\r\n**Blog posts**\r\n\r\n[.NET Core](https://devblogs.microsoft.com/dotnet/announcing-net-core-3-0-release-candidate-1/)\r\n[ASP.NET Core](https://devblogs.microsoft.com/aspnet/asp-net-core-and-blazor-updates-in-net-core-3-0-release-candidate-1/)\r\n\r\nPlease report any issues you find with 3.0.0 RC 1, either responding to this issue, creating a new issue or creating a new issue in one of the following repos:\r\n\r\n* [aspnet/AspNetCore](https://github.com/aspnet/AspNetCore) - for ASP.NET Core questions\r\n* [aspnet/EntityFrameworkCore](https://github.com/aspnet/EntityFrameworkCore) - for Entity Framework Core questions\r\n* [dotnet/cli](https://github.com/dotnet/cli/issues) - for CLI tools and questions\r\n* [dotnet/corefx](https://github.com/dotnet/corefx/issues) - for API issues and questions\r\n* [dotnet/coreclr](https://github.com/dotnet/coreclr/issues) - for runtime issues\r\n* [dotnet/core-setup](https://github.com/dotnet/core-setup/issues) - for installer issues\r\n* [dotnet/winforms](https://github.com/dotnet/winforms/issues) - for Winforms issues\r\n* [dotnet/wpf](https://github.com/dotnet/wpf/issues) - for WPF issues\r\n* [nuget/home](https://github.com/nuget/home/issues) - for NuGet questions and issues","Url":"https://github.com/dotnet/announcements/issues/123","RelatedDescription":"Open issue \".NET Core 3.0 RC 1\" (#123)"},{"Id":"491801748","IsPullRequest":false,"CreatedAt":"2019-09-10T17:23:20","Actor":"leecow","Number":"122","RawContent":null,"Title":"September 2019 .NET Updates","State":"open","Body":"The following .NET updates were released on September 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n\r\n* [.NET Framework September 2019 Security and Quality Rollup](https://devblogs.microsoft.com/dotnet/net-framework-september-2019-security-and-quality-rollup/)\r\n* [.NET Framework September 2019 Preview of Quality Rollup](https://devblogs.microsoft.com/dotnet/net-framework-september-2019-preview-of-quality-rollup/)\r\n\r\n## .NET Core\r\n\r\n* .NET Core 2.1.13 and .NET Core SDK ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.13/2.1.13.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.1) )\r\n\r\n* .NET Core 2.2.7 and .NET Core SDK ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.7/2.2.7.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.2) )\r\n\r\nA discussion issue is available at [core/3345](https://github.com/dotnet/core/issues/3345)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/122","RelatedDescription":"Open issue \"September 2019 .NET Updates\" (#122)"},{"Id":"491794046","IsPullRequest":false,"CreatedAt":"2019-09-10T17:04:46","Actor":"blowdart","Number":"121","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-1301: Denial of Service Vulnerability in .NET Core","State":"open","Body":"# Microsoft Security Advisory CVE-2019-1301: Denial of Service Vulnerability in .NET Core\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a denial of service vulnerability when .NET Core improperly handles web requests. An attacker who successfully exploited this vulnerability could cause a denial of service against a .NET Core web application. The vulnerability can be exploited remotely, without authentication.\r\n\r\nThe update addresses the vulnerability by correcting how the .NET Core web application handles web requests.\r\n\r\n## Announcement\r\n\r\nThe original announcement for this issue can be found at https://github.com/dotnet/announcements/issues/121\r\n\r\n## <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nNone\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application running on .NET Core 2.1.0-2.1.12, or .NET Core 2.2.0-2.2.6\r\n\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nYou can list the versions you have installed by running the `dotnet --info` command. You will see output like the following;\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview3-010431\r\n Commit:    d72abce213\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18362\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview3-010431\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview3-27503-5\r\n  Commit:  3844df9537\r\n\r\n.NET Core SDKs installed:\r\n  2.1.604 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.202 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview3-010431 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\\\r\n  Microsoft.AspNetCore.All 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview3-19153-02 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview3-27503-5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview3-27504-2 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf you have a version of .NET Core less than 2.1.13 or less than 2.2.7, you're vulnerable.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nTo fix the issue please install the latest version of .NET Core. If you have multiple versions of .NET Core installed you will need to install multiple runtimes, or SDKs depending on what you have installed.\r\n\r\n* For machines running .NET Core 2.1, you should download Runtime 2.1.13 or SDK 2.1.509 for Visual Studio 2017 or SDK 2.1.606 for Visual Studio 2019 (v16.0) or SDK 2.1.802 for Visual Studio 2019 (v16.2) from https://dotnet.microsoft.com/download/dotnet-core/2.1.\r\n* For machines running .NET Core 2.2, you should download Runtime 2.2.7 or SDK 2.2.109 for Visual Studio 2017 or SDK 2.2.206 for Visual Studio 2019 (v16.0) or SDK 2.2.402 for Visual Studio 2019 (v16.2) from https://dotnet.microsoft.com/download/dotnet-core/2.2.\r\n\r\nIf you have both 2.1 and 2.2, you need to install updates for both versions.\r\n\r\nOnce you have installed the updated runtime or SDK, restart your apps for the update to take effect.\r\n\r\nIf you have [pinned your application](https://docs.microsoft.com/dotnet/core/versions/selection) to a specific version of the runtime, you must update your app, recompile and redeploy it for the update to take effect.\r\n\r\n# Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/, respectively. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgments\r\n\r\nPaul Ryman of VMware Sydney Engineering Team\r\n\r\n### External Links\r\n\r\n[CVE-2019-1301](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-1301)\r\n\r\n### Revisions\r\n\r\nV1.0 (September 10, 2019): Advisory published.\r\nV1.1 (September 10, 2019): Fix version numbers\r\n\r\n_Version 1.1_\r\n\r\n_Last Updated 2019-09-10_\r\n","Url":"https://github.com/dotnet/announcements/issues/121","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-1301: Denial of Service Vulnerability in .NET Core\" (#121)"}],"ResultType":"GitHubIssue"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1217253824022315010","CreatedAt":"2020-01-15T01:15:01+00:00","UserScreenname":"dotnet","Text":"The #dotNETConf Focus on #Blazor event may be over, but be sure to watch for our sessions on demand:… https://t.co/H2WY1Ym6NH","Source":"<a href=\"https://prod2.sprinklr.com\" rel=\"nofollow\">Sprinklr Publisher</a>","RetweetCount":23,"FavoriteCount":11,"RawContent":null},{"Id":"1217238725752692743","CreatedAt":"2020-01-15T00:15:02+00:00","UserScreenname":"dotnet","Text":"Last but certainly not least @ #dotNETConf, an awesome session from @CSharpFritz who shows us how to use our web fo… https://t.co/NjzD4mKJ5y","Source":"<a href=\"https://prod2.sprinklr.com\" rel=\"nofollow\">Sprinklr Publisher</a>","RetweetCount":24,"FavoriteCount":9,"RawContent":null},{"Id":"1217228657585983490","CreatedAt":"2020-01-14T23:35:01+00:00","UserScreenname":"dotnet","Text":"Check out the @DariaGrigoriu / @codesapien session on using #AzureFunctions to build serverless apps with #Blazor.… https://t.co/Ghv3IIgiXb","Source":"<a href=\"https://prod2.sprinklr.com\" rel=\"nofollow\">Sprinklr Publisher</a>","RetweetCount":7,"FavoriteCount":3,"RawContent":null},{"Id":"1217218591457792000","CreatedAt":"2020-01-14T22:55:01+00:00","UserScreenname":"dotnet","Text":"Happening now @ #dotNETConf... @aVerySpicyBoi's discusses how to scale #Blazor server apps with #Azure SignalR Serv… https://t.co/rulyF3Ud4b","Source":"<a href=\"https://prod2.sprinklr.com\" rel=\"nofollow\">Sprinklr Publisher</a>","RetweetCount":16,"FavoriteCount":9,"RawContent":null},{"Id":"1217208525451071488","CreatedAt":"2020-01-14T22:15:01+00:00","UserScreenname":"dotnet","Text":".@ADefWebserver's session on handling authentication for Google, Microsoft, Azure AD, OAuth, Twitter and more is st… https://t.co/0z8JktCGj2","Source":"<a href=\"https://prod2.sprinklr.com\" rel=\"nofollow\">Sprinklr Publisher</a>","RetweetCount":18,"FavoriteCount":8,"RawContent":null},{"Id":"1217198460832813074","CreatedAt":"2020-01-14T21:35:02+00:00","UserScreenname":"dotnet","Text":"Next up @ #dotNETConf, tune in for @EdCharbeneau's session on authoring custom components w/ good practices for str… https://t.co/PuLqEIZTDE","Source":"<a href=\"https://prod2.sprinklr.com\" rel=\"nofollow\">Sprinklr Publisher</a>","RetweetCount":25,"FavoriteCount":9,"RawContent":null},{"Id":"1217198004534296576","CreatedAt":"2020-01-14T21:33:13+00:00","UserScreenname":"dotnet","Text":"January 2020 .NET Updates https://t.co/FSlAah73Z4","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":44,"FavoriteCount":29,"RawContent":null},{"Id":"1217188394016616452","CreatedAt":"2020-01-14T20:55:02+00:00","UserScreenname":"dotnet","Text":"Say 'hello' to the new experimental Mobile Blazor Bindings! \n\nHappening now @ #dotNETConf, we learn to build native… https://t.co/hOyvW2a6WK","Source":"<a href=\"https://prod2.sprinklr.com\" rel=\"nofollow\">Sprinklr Publisher</a>","RetweetCount":61,"FavoriteCount":14,"RawContent":null},{"Id":"1217178328022556672","CreatedAt":"2020-01-14T20:15:02+00:00","UserScreenname":"dotnet","Text":"Coming up next @ the #dotNETConf Focus on #Blazor Event... Egil Hansen gives us the best practices for unit testing… https://t.co/h1FrOqjAm2","Source":"<a href=\"https://prod2.sprinklr.com\" rel=\"nofollow\">Sprinklr Publisher</a>","RetweetCount":5,"FavoriteCount":4,"RawContent":null},{"Id":"1217168259490951169","CreatedAt":"2020-01-14T19:35:01+00:00","UserScreenname":"dotnet","Text":"Now streaming on #dotNETConf, Javier Calvarro Nelson shows you how to interop with #JavaScript and #CSharp.  Watch… https://t.co/jpnHmR0aYW","Source":"<a href=\"https://prod2.sprinklr.com\" rel=\"nofollow\">Sprinklr Publisher</a>","RetweetCount":28,"FavoriteCount":6,"RawContent":null},{"Id":"1217158193517932549","CreatedAt":"2020-01-14T18:55:01+00:00","UserScreenname":"dotnet","Text":"How do you manage your app state? Redux? INotifyPropertyChanged?  \n\nNow on #dotNETConf, @JeremyLikness discusses st… https://t.co/pWAtaYATGk","Source":"<a href=\"https://prod2.sprinklr.com\" rel=\"nofollow\">Sprinklr Publisher</a>","RetweetCount":23,"FavoriteCount":8,"RawContent":null},{"Id":"1217148126643073030","CreatedAt":"2020-01-14T18:15:01+00:00","UserScreenname":"dotnet","Text":"Next up @ #dotNETConf, learn to create beautiful web UI w/ #Blazor &amp; CSS as @EngstromJimmy takes us deep into adapt… https://t.co/QaYDAMZOw4","Source":"<a href=\"https://prod2.sprinklr.com\" rel=\"nofollow\">Sprinklr Publisher</a>","RetweetCount":23,"FavoriteCount":7,"RawContent":null},{"Id":"1217139707638763522","CreatedAt":"2020-01-14T17:41:34+00:00","UserScreenname":"dotnet","Text":"Our blog post about Experimental Mobile Bindings for Blazor is now available.\n\nLearn more about our investigations… https://t.co/vitJMHNOSH","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":221,"FavoriteCount":119,"RawContent":null},{"Id":"1217138061588541440","CreatedAt":"2020-01-14T17:35:01+00:00","UserScreenname":"dotnet","Text":"Happening now @ #dotNETConf... Get the A through Z of routing in a #Blazor 🔥 app directly from #MSMVP,… https://t.co/mOfAwEvqZD","Source":"<a href=\"https://prod2.sprinklr.com\" rel=\"nofollow\">Sprinklr Publisher</a>","RetweetCount":18,"FavoriteCount":10,"RawContent":null},{"Id":"1217134054148960256","CreatedAt":"2020-01-14T17:19:06+00:00","UserScreenname":"dotnet","Text":"Collecting and analyzing memory dumps https://t.co/rjz1o2LO37","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":66,"FavoriteCount":24,"RawContent":null},{"Id":"1217129324605779969","CreatedAt":"2020-01-14T17:00:18+00:00","UserScreenname":"dotnet","Text":"#dotNETConf is rolling on... @StevenSanderson shows us the future of #Blazor w/ WebAssembly, PWAs, Hybrid, or Nativ… https://t.co/S2EuupbOve","Source":"<a href=\"https://prod2.sprinklr.com\" rel=\"nofollow\">Sprinklr Publisher</a>","RetweetCount":29,"FavoriteCount":12,"RawContent":null},{"Id":"1217126800607891458","CreatedAt":"2020-01-14T16:50:17+00:00","UserScreenname":"dotnet","Text":"Just heard @ #dotNETConf...\n\nAnnouncing Mobile Blazor Bindings; the first step in bringing the vast ecosystem of .N… https://t.co/b8s4HUdNzq","Source":"<a href=\"https://prod2.sprinklr.com\" rel=\"nofollow\">Sprinklr Publisher</a>","RetweetCount":236,"FavoriteCount":95,"RawContent":null},{"Id":"1217115690802581505","CreatedAt":"2020-01-14T16:06:08+00:00","UserScreenname":"dotnet","Text":"Exciting news from #dotNETConf... @DevExpress is now a corporate sponsor of @dotNETFdn. We're happy to see how they… https://t.co/TD9aVqvX04","Source":"<a href=\"https://prod2.sprinklr.com\" rel=\"nofollow\">Sprinklr Publisher</a>","RetweetCount":45,"FavoriteCount":18,"RawContent":null}]}},"RunOn":"2020-01-15T05:30:43.1546856Z","RunDurationInMilliseconds":18570}