{"Data":{"Blog":{"FeedItems":[{"Title":"Visual Challenge Conquered!","PublishedOn":"2019-04-03T19:03:49+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"The post Visual Challenge Conquered! appeared first on Xamarin Blog.","Href":"https://devblogs.microsoft.com/xamarin/visual-challenge-conquered/","RawContent":null},{"Title":"What’s New for Xamarin Developers in Visual Studio 2019","PublishedOn":"2019-04-02T19:56:18+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"The post What&#8217;s New for Xamarin Developers in Visual Studio 2019 appeared first on Xamarin Blog.","Href":"https://devblogs.microsoft.com/xamarin/xamarin-visual-studio-2019/","RawContent":null},{"Title":"Xamarin and .NET Developer Events in April","PublishedOn":"2019-04-01T19:05:22+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"The post Xamarin and .NET Developer Events in April appeared first on Xamarin Blog.","Href":"https://devblogs.microsoft.com/xamarin/xamarin-and-net-developer-events-in-april/","RawContent":null},{"Title":"GlideX For Fast Images on Android","PublishedOn":"2019-03-28T16:01:13+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"The post GlideX For Fast Images on Android appeared first on Xamarin Blog.","Href":"https://devblogs.microsoft.com/xamarin/glidex-fast-images-android/","RawContent":null},{"Title":"Introducing the Xamarin.iOS Interpreter","PublishedOn":"2019-03-26T16:41:43+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"The post Introducing the Xamarin.iOS Interpreter appeared first on Xamarin Blog.","Href":"https://devblogs.microsoft.com/xamarin/introducing-xamarin-ios-interpreter/","RawContent":null},{"Title":"Join the Xamarin Visual Challenge","PublishedOn":"2019-03-22T20:00:01+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"For the past month, we have been running a low-key challenge to flex the new Xamarin.Forms 3.6 feature, Visual with Material Design. For more information about what Visual is and what you can do with...","Href":"https://devblogs.microsoft.com/xamarin/join-the-xamarin-visual-challenge/","RawContent":null},{"Title":"Get Your Apps Ready for Apple’s New Watch Processor Architecture","PublishedOn":"2019-03-20T19:59:52+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"The post Get Your Apps Ready for Apple&#8217;s New Watch Processor Architecture appeared first on Xamarin Blog.","Href":"https://devblogs.microsoft.com/xamarin/apple-new-processor-architecture/","RawContent":null},{"Title":"Xamarin.Essentials Adds Detect Shake, Browser Customization, Color Helpers, and More!","PublishedOn":"2019-03-18T18:54:27+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"The post Xamarin.Essentials Adds Detect Shake, Browser Customization, Color Helpers, and More! appeared first on Xamarin Blog.","Href":"https://devblogs.microsoft.com/xamarin/xamarin-essentials-detect-shake-browser-customization/","RawContent":null},{"Title":"Introducing the New Xamarin Customer Showcase","PublishedOn":"2019-03-15T16:53:07+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"The post Introducing the New Xamarin Customer Showcase appeared first on Xamarin Blog.","Href":"https://devblogs.microsoft.com/xamarin/new-xamarin-customer-showcase/","RawContent":null},{"Title":"A Quick Update on Google Components for iOS and Android","PublishedOn":"2019-03-13T19:12:15+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"The post A Quick Update on Google Components for iOS and Android appeared first on Xamarin Blog.","Href":"https://devblogs.microsoft.com/xamarin/update-google-components-ios-android/","RawContent":null}],"ResultType":"Feed"},"Android":{"Events":[{"Id":"9395208305","Type":"IssuesEvent","CreatedAt":"2019-04-08T01:19:06","Actor":"mfeingol","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/2939","RelatedDescription":"Opened issue \"App linked using d8 fails at runtime with java.lang.InstantiationException\" (#2939) at xamarin/xamarin-android","RelatedBody":"### Steps to Reproduce\r\n\r\nI decided to experiment with D8 as a replacement for Proguard. To that end, I added the following two lines to my working debug build:\r\n\r\n```\r\n    <AndroidLinkTool>r8</AndroidLinkTool>\r\n    <AndroidR8ExtraArguments>--lib &quot;C:\\Program Files (x86)\\Android\\android-sdk\\platforms\\android-28\\optional\\org.apache.http.legacy.jar&quot;</AndroidR8ExtraArguments>\r\n```\r\n\r\ncf https://github.com/xamarin/xamarin-android/issues/2693 if you're wondering about the second line.\r\n\r\nThis is the debug build's property group:\r\n\r\n```\r\n  <PropertyGroup Condition=\" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' \">\r\n    <DebugSymbols>true</DebugSymbols>\r\n    <DebugType>portable</DebugType>\r\n    <Optimize>false</Optimize>\r\n    <OutputPath>bin\\Debug</OutputPath>\r\n    <DefineConstants>DEBUG;</DefineConstants>\r\n    <ErrorReport>prompt</ErrorReport>\r\n    <WarningLevel>4</WarningLevel>\r\n    <AndroidLinkMode>SdkOnly</AndroidLinkMode>\r\n    <AotAssemblies>false</AotAssemblies>\r\n    <EnableLLVM>false</EnableLLVM>\r\n    <BundleAssemblies>false</BundleAssemblies>\r\n    <EmbedAssembliesIntoApk>false</EmbedAssembliesIntoApk>\r\n    <JavaMaximumHeapSize>1G</JavaMaximumHeapSize>\r\n    <AndroidSupportedAbis />\r\n    <AndroidUseSharedRuntime>true</AndroidUseSharedRuntime>\r\n    <NoWarn>AvoidAsyncVoid</NoWarn>\r\n    <AndroidEnableMultiDex>true</AndroidEnableMultiDex>\r\n    <EnableProguard>false</EnableProguard>\r\n    <LangVersion>latest</LangVersion>\r\n    <AndroidUseAapt2>true</AndroidUseAapt2>\r\n    <AndroidLinkTool>r8</AndroidLinkTool>\r\n    <AndroidR8ExtraArguments>--lib &quot;C:\\Program Files (x86)\\Android\\android-sdk\\platforms\\android-28\\optional\\org.apache.http.legacy.jar&quot;</AndroidR8ExtraArguments>\r\n  </PropertyGroup>\r\n```\r\nAfter this, my project compiles, but fails at launch with the following exception:\r\n\r\n```\r\nTime\tDevice Name\tType\tPID\tTag\tMessage\r\n04-07 18:08:58.350\tandroid_8_1\tError\t11764\tAndroidRuntime\tjava.lang.RuntimeException: Unable to get provider android.support.v4.content.FileProvider: java.lang.InstantiationException: java.lang.Class<android.support.v4.content.FileProvider> cannot be instantiated\r\n\tat android.app.ActivityThread.installProvider(ActivityThread.java:6242)\r\n\tat android.app.ActivityThread.installContentProviders(ActivityThread.java:5805)\r\n\tat android.app.ActivityThread.handleBindApplication(ActivityThread.java:5722)\r\n\tat android.app.ActivityThread.-wrap1(Unknown Source:0)\r\n\tat android.app.ActivityThread$H.handleMessage(ActivityThread.java:1656)\r\n\tat android.os.Handler.dispatchMessage(Handler.java:106)\r\n\tat android.os.Looper.loop(Looper.java:164)\r\n\tat android.app.ActivityThread.main(ActivityThread.java:6494)\r\n\tat java.lang.reflect.Method.invoke(Native Method)\r\n\tat com.android.internal.os.RuntimeInit$MethodAndArgsCaller.run(RuntimeInit.java:438)\r\n\tat com.android.internal.os.ZygoteInit.main(ZygoteInit.java:807)\r\n```\r\n\r\nI should note the build has one new warning... and not the most useful one.\r\n\r\n```\r\n4>R8 : warning : The rule `-keep public class *extends java.lang.annotation.Annotation {\r\n```\r\n\r\n### Expected Behavior\r\n\r\nA working app, with r8 as a drop-in replacement for proguard and multidex.\r\n\r\n### Actual Behavior\r\n\r\nApp crashes on launch.\r\n\r\n### Version Information\r\n\r\nVS 2019 RTM"},{"Id":"9392434113","Type":"IssuesEvent","CreatedAt":"2019-04-07T00:32:47","Actor":"alaatm","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/2938","RelatedDescription":"Opened issue \"Using VS's linked files on resources causes IDE errors but build succeeds\" (#2938) at xamarin/xamarin-android","RelatedBody":"I have a couple of Apps that are almost identical with very minimal differences. Each app has its own package name.\r\n\r\nBasically, what I do is have most files (source files, resources, etc...) in one app and use linked files (VS Add Existing -> Add As Link) to add them to the second app and use partial classes, compilation symbols, etc.. for the differences.\r\n\r\nBasically, everything is working fine except for one annoying thing, the errors tab is filled with `Resource.AAA does not contain a definition for 'BBB'`. These errors are shown for the app that uses the linked files. Note that these errors are **NOT** actual errors because both projects build and run with no issues.\r\n\r\nAs my project goes larger the error list is getting larger (currently at 69 errors) which makes it a bit more time consuming to find \"**real**\" errors.\r\n\r\nI have linked a repo for a very simple repro. In it, I am linking MainActivity.cs and the layout resource files in App2.\r\n\r\nThe result is this:\r\n\r\n![image](https://user-images.githubusercontent.com/2095803/55676816-3ca96400-58e5-11e9-9bf5-a7af9bfd0f10.png)\r\n\r\nIs there anything I could do to make these go away?!\r\n\r\n### Steps to Reproduce\r\nPlease see https://github.com/alaatm/LinkedFiles\r\n\r\n### Expected Behavior\r\nNo errors shown.\r\n\r\n### Actual Behavior\r\nErrors shown.\r\n\r\n### Version Information\r\nVS2019 RTM\r\n"},{"Id":"9392217134","Type":"IssuesEvent","CreatedAt":"2019-04-06T22:01:03","Actor":"TylerBoyes","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/2937","RelatedDescription":"Opened issue \"Set enabled after delay not working on Android\" (#2937) at xamarin/xamarin-android","RelatedBody":"I believe there is a bug on Android versions when using a delay to \"fade to\" a button and then setting it enabled. Everything works as expected on the iOS build but fails for become enabled on the Android build. I have reproduced this issue with a minimum project and uploaded said project in TestApp.zip. \r\n\r\n### Steps to Reproduce\r\n\r\nTo reproduce bug\r\n0. Setup environment for android development\r\n1. Build app for Android\r\n2. Run app\r\n3. Click button \"Show Button\"\r\n> Observe \"Click Me\" fade in\r\n4. Tap button \"Click Me\"\r\n> [BUG] Button is not enabled although it has been set so\r\n\r\n<!--\r\nIf you have a repro project, you may drag & drop the .zip/etc. onto the issue editor to attach it.\r\n-->\r\n[TestApp.zip](https://github.com/xamarin/xamarin-android/files/3050974/TestApp.zip)\r\n\r\n\r\n### Expected Behavior\r\nClick \"Show Button\"\r\nButton \"Click Me\" appears and is set enabled \r\nWhen pressing \"Click Me\" text message should change\r\n\r\n### Actual Behavior\r\nClick \"Show Button\"\r\nButton \"Click Me\" is still disabled\r\n\r\n### Version Information\r\nVisual Studio Community 2017 for Mac\r\nVersion 7.8.3 (build 2)\r\nInstallation UUID: a9d31f15-8d43-49fa-8ed9-9f4664765dbc\r\n\tGTK+ 2.24.23 (Raleigh theme)\r\n\tXamarin.Mac 5.0.0.0 ( / b40230c0)\r\n\r\n\tPackage version: 516000238\r\n\r\nMono Framework MDK\r\nRuntime:\r\n\tMono 5.16.0.238 (2018-06/99d74f7f6ee) (64-bit)\r\n\tPackage version: 516000238\r\n\r\nNuGet\r\nVersion: 4.8.2.5835\r\n\r\n.NET Core\r\nRuntime: /usr/local/share/dotnet/dotnet\r\nRuntime Versions:\r\n\t2.1.8\r\n\t2.1.2\r\nSDK: /usr/local/share/dotnet/sdk/2.1.504/Sdks\r\nSDK Versions:\r\n\t2.1.504\r\n\t2.1.302\r\nMSBuild SDKs: /Library/Frameworks/Mono.framework/Versions/5.16.0/lib/mono/msbuild/15.0/bin/Sdks\r\n\r\nXamarin.Profiler\r\nVersion: 1.6.4\r\nLocation: /Applications/Xamarin Profiler.app/Contents/MacOS/Xamarin Profiler\r\n\r\nUpdater\r\nVersion: 11\r\n\r\nApple Developer Tools\r\nXcode 10.1 (14460.46)\r\nBuild 10B61\r\n\r\nXamarin.Mac\r\nVersion: 5.2.1.15 (Visual Studio Community)\r\nHash: d60abd198\r\nBranch: \r\nBuild date: 2019-02-01 12:23:30-0500\r\n\r\nXamarin.iOS\r\nVersion: 12.2.1.15 (Visual Studio Community)\r\nHash: d60abd198\r\nBranch: d15-9\r\nBuild date: 2019-02-01 12:23:29-0500\r\n\r\nXamarin.Android\r\nVersion: 9.1.8.0 (Visual Studio Community)\r\nAndroid SDK: /Volumes/TRANSCEND/Library/Xamarin/android-sdk-macosx\r\n\tSupported Android versions:\r\n\t\t6.0 (API level 23)\r\n\t\t7.1 (API level 25)\r\n\t\t8.1 (API level 27)\r\n\r\nSDK Tools Version: 25.2.5\r\nSDK Platform Tools Version: 28.0.1\r\nSDK Build Tools Version: 25.0.3\r\n\r\nMicrosoft Mobile OpenJDK\r\nJava SDK: /Users/macbook/Library/Developer/Xamarin/jdk/microsoft_dist_openjdk_8.0.25\r\n1.8.0-25\r\nAndroid Designer EPL code available here:\r\nhttps://github.com/xamarin/AndroidDesigner.EPL\r\n\r\nAndroid Device Manager\r\nVersion: 7.8.1.0\r\nHash: 8924ea4a\r\n\r\nXamarin Inspector\r\nVersion: 1.4.3\r\nHash: db27525\r\nBranch: 1.4-release\r\nBuild date: Mon, 09 Jul 2018 21:20:18 GMT\r\nClient compatibility: 1\r\n\r\nBuild Information\r\nRelease ID: 708030002\r\nGit revision: fd02e670fdd6b101bc9c08b1cc5b7710d9f58cd8\r\nBuild date: 2019-03-08 10:30:21+00\r\nBuild branch: release-7.8\r\nXamarin extensions: 1f72f0a3737128552336f27e189d3c4f0cdebd00\r\n\r\nOperating System\r\nMac OS X 10.14.2\r\nDarwin 18.2.0 Darwin Kernel Version 18.2.0\r\n    Mon Nov 12 20:24:46 PST 2018\r\n    root:xnu-4903.231.4~2/RELEASE_X86_64 x86_64\r\n\r\n\r\n### Log File\r\n\r\n<!--\r\n1. On macOS and within Visual Studio:\r\n    a. Click **Tools** > **SDK Command Prompt**.\r\n    b. Within the launched `Terminal.app` window, run:\r\n\r\n            adb logcat -d | pbcopy\r\n\r\n2. Paste below this comment block\r\n-->\r\nReceived \"Permission Denied\" \r\nIf the log is important I can effort to solve this and provide a log. \r\n\r\n\r\n<!--\r\nSwitch to the \"Preview\" tab to ensure your issue renders correctly.\r\n\r\nPlease add an appropriate \"Area:\" label in the Labels section.\r\n-->"},{"Id":"9388845199","Type":"PullRequestEvent","CreatedAt":"2019-04-05T19:46:40","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2936","RelatedDescription":"Merged pull request \"[mono-runtimes] Fully populate RedistList\\FrameworkList.xml (#2928)\" (#2936) at xamarin/xamarin-android","RelatedBody":"Fixes: https://developercommunity.visualstudio.com/content/problem/514955/lost-net-assemblies-after-vs-update.html\r\nFixes: https://github.com/mono/monodevelop/issues/5190\r\n\r\nContext: commit d4fb5e5bd6721f0fe7f1e95648342d9004474014\r\n\r\nThere was some unfortunate fallout from d4fb5e5b, in which\r\n`FrameworkList.xml` was updated to contain `<File/>` entries for\r\n`System.Buffers.dll` and `System.Memory.dll`: it changed the\r\n`FrameworkList.xml` semantics from \"include all the files in this\r\ndirectory\" to \"include *only* the specified `<File/>`s.\"\r\n\r\nThis in turn means that when editing the Assembly References within\r\nVisual Studio for Mac, the *only* BCL assemblies shown are for\r\n`System.Buffers.dll` and `System.Memory.dll`!\r\n\r\nOops. :-(\r\n\r\nFurthermore, there are (at present) *185* files which need to be\r\nlisted, between the \"real\" assemblies and the Facade assemblies.\r\n\r\nThis is *not* a list I want to manually maintain or otherwise keep up\r\nto date.\r\n\r\nAdd a new `<CreateFrameworkList/>` MSBuild task to generate\r\n`FrameworkList.xml` for us instead.  It uses the\r\n`System.Reflection.Metadata` NuGet package to extract the assembly\r\nversion and PublicKeyToken.  With those in hand, it can then generate\r\nthe entire `FrameworkList.xml` listing, using `@(MonoFacadeAssembly)`\r\nand `@(MonoProfileAssembly)` (in\r\n`src/mono-runtimes/ProfileAssemblies.projitems`).  Whenever those item\r\ngroups change (e.g. on mono bumps), we'll automatically generate an\r\nappropriate `FrameworkList.xml` file including those new assemblies.\r\n\r\nThe generated `FrameworkList.xml` file is similar to:\r\n\r\n\t<FileList Redist=\"MonoAndroid\" Name=\"Xamarin.Android Base Class Libraries\">\r\n\t  <File AssemblyName=\"I18N\" Version=\"2.0.5.0\" PublicKeyToken=\"0738eb9f132ed756\" ProcessorArchitecture=\"MSIL\" />\r\n\t  <File AssemblyName=\"I18N.CJK\" Version=\"2.0.5.0\" PublicKeyToken=\"0738eb9f132ed756\" ProcessorArchitecture=\"MSIL\" />\r\n\t  <!-- ... -->"},{"Id":"9388332104","Type":"PullRequestEvent","CreatedAt":"2019-04-05T18:16:15","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2936","RelatedDescription":"Opened pull request \"[mono-runtimes] Fully populate RedistList\\FrameworkList.xml (#2928)\" (#2936) at xamarin/xamarin-android","RelatedBody":"Fixes: https://developercommunity.visualstudio.com/content/problem/514955/lost-net-assemblies-after-vs-update.html\r\nFixes: https://github.com/mono/monodevelop/issues/5190\r\n\r\nContext: commit d4fb5e5bd6721f0fe7f1e95648342d9004474014\r\n\r\nThere was some unfortunate fallout from d4fb5e5b, in which\r\n`FrameworkList.xml` was updated to contain `<File/>` entries for\r\n`System.Buffers.dll` and `System.Memory.dll`: it changed the\r\n`FrameworkList.xml` semantics from \"include all the files in this\r\ndirectory\" to \"include *only* the specified `<File/>`s.\"\r\n\r\nThis in turn means that when editing the Assembly References within\r\nVisual Studio for Mac, the *only* BCL assemblies shown are for\r\n`System.Buffers.dll` and `System.Memory.dll`!\r\n\r\nOops. :-(\r\n\r\nFurthermore, there are (at present) *185* files which need to be\r\nlisted, between the \"real\" assemblies and the Facade assemblies.\r\n\r\nThis is *not* a list I want to manually maintain or otherwise keep up\r\nto date.\r\n\r\nAdd a new `<CreateFrameworkList/>` MSBuild task to generate\r\n`FrameworkList.xml` for us instead.  It uses the\r\n`System.Reflection.Metadata` NuGet package to extract the assembly\r\nversion and PublicKeyToken.  With those in hand, it can then generate\r\nthe entire `FrameworkList.xml` listing, using `@(MonoFacadeAssembly)`\r\nand `@(MonoProfileAssembly)` (in\r\n`src/mono-runtimes/ProfileAssemblies.projitems`).  Whenever those item\r\ngroups change (e.g. on mono bumps), we'll automatically generate an\r\nappropriate `FrameworkList.xml` file including those new assemblies.\r\n\r\nThe generated `FrameworkList.xml` file is similar to:\r\n\r\n\t<FileList Redist=\"MonoAndroid\" Name=\"Xamarin.Android Base Class Libraries\">\r\n\t  <File AssemblyName=\"I18N\" Version=\"2.0.5.0\" PublicKeyToken=\"0738eb9f132ed756\" ProcessorArchitecture=\"MSIL\" />\r\n\t  <File AssemblyName=\"I18N.CJK\" Version=\"2.0.5.0\" PublicKeyToken=\"0738eb9f132ed756\" ProcessorArchitecture=\"MSIL\" />\r\n\t  <!-- ... -->"},{"Id":"9388264288","Type":"PullRequestEvent","CreatedAt":"2019-04-05T18:04:43","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2928","RelatedDescription":"Merged pull request \"[mono-runtimes] Fully populate RedistList\\FrameworkList.xml\" (#2928) at xamarin/xamarin-android","RelatedBody":"Fixes: TODO\r\n\r\nContext: commit d4fb5e5bd6721f0fe7f1e95648342d9004474014\r\n\r\nThere was some unfortunate fallout from d4fb5e5b, in which\r\n`FrameworkList.xml` was updated to contain `<File/>` entries for\r\n`System.Buffers.dll` and `System.Memory.dll`: it changed the\r\n`FrameworkList.xml` semantics from \"include all the files in this\r\ndirectory\" to \"include *only* the specified `<File/>`s.\"\r\n\r\nThis in turn means that when editing the Assembly References within\r\nVisual Studio for Mac, the *only* BCL assemblies shown are for\r\n`System.Buffers.dll` and `System.Memory.dll`!\r\n\r\nOops. :-(\r\n\r\nFurthermore, there are (at present) *185* files which need to be\r\nlisted, between the \"real\" assemblies and the Facade assemblies.\r\n\r\nThis is *not* a list I want to manually maintain or otherwise keep up\r\nto date.\r\n\r\nAdd a new `<CreateFrameworkList/>` MSBuild task to generate\r\n`FrameworkList.xml` for us instead.  It uses the\r\n`System.Reflection.Metadata` NuGet package to extract the assembly\r\nversion and PublicKeyToken.  With those in hand, it can then generate\r\nthe entire `FrameworkList.xml` listing, using `@(MonoFacadeAssembly)`\r\nand `@(MonoProfileAssembly)` (in\r\n`src/mono-runtimes/ProfileAssemblies.projitems`).  Whenever those item\r\ngroups change (e.g. on mono bumps), we'll automatically generate an\r\nappropriate `FrameworkList.xml` file including those new assemblies."},{"Id":"9387814846","Type":"PullRequestEvent","CreatedAt":"2019-04-05T16:50:34","Actor":"jonathanpeppers","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2935","RelatedDescription":"Opened pull request \"[Xamarin.Android.Build.Tasks] don't copy pdb/mdb to $(OutputPath)\" (#2935) at xamarin/xamarin-android","RelatedBody":"Looking at the build output of a simple app:\r\n\r\n    > ls .\\samples\\HelloWorld\\bin\\Debug\\*.pdb\r\n      Length Name\r\n      ------ ----\r\n        1024 HelloLibrary.pdb\r\n        1304 HelloWorld.pdb\r\n    13943324 Mono.Android.pdb\r\n      153048 Mono.Security.pdb\r\n     1545052 mscorlib.pdb\r\n      106160 System.ComponentModel.Composition.pdb\r\n      393532 System.Core.pdb\r\n       43076 System.Net.Http.pdb\r\n      795468 System.pdb\r\n      325732 System.Runtime.Serialization.pdb\r\n       77008 System.ServiceModel.Internals.pdb\r\n      917588 System.Xml.pdb\r\n\r\nThere are *not* accompanying `.dll` files for many of these symbols.\r\nSome of these symbols are also quite big!\r\n\r\nI don't think we need to be copying these files to `$(OutputPath)` at\r\nall; it doesn't make sense if their accompanying assembly isn't there!\r\n\r\nIf we remove the `<CopyIfChanged/>` calls in our targets, MSBuild will\r\nhandle copying the appropriate symbol files that are needed.\r\n\r\nAfter this change, the directory looks like:\r\n\r\n    > ls .\\samples\\HelloWorld\\bin\\Debug\\*.pdb\r\n      Length Name\r\n      ------ ----\r\n      1024 HelloLibrary.pdb\r\n      1304 HelloWorld.pdb\r\n\r\n## Results ##\r\n\r\nI did a performance comparison using the Xamarin.Forms app in this\r\nrepo. It seems the extra `<CopyIfChanged/>` call was taking between\r\n25-50ms, but the bigger savings here is to not copy a 13MB\r\nMono.Android.pdb file. There could be bigger savings for developers\r\nthat have slower hardware (or don't have SSDs).\r\n\r\nOverall it seems this change saves up to 50ms for a small project on\r\ninitial build, or incremental builds where an assembly changed."},{"Id":"9387351117","Type":"PullRequestEvent","CreatedAt":"2019-04-05T15:38:18","Actor":"jonathanpeppers","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2934","RelatedDescription":"Opened pull request \"[Xamarin.Android.Build.Tasks] filter @(ReferencePath) for MonoAndroid assemblies\" (#2934) at xamarin/xamarin-android","RelatedBody":"We have a couple MSBuild targets that need to only operate on\r\n`MonoAndroid` assemblies:\r\n\r\n* `_BuildAdditionalResourcesCache` is the precursor to\r\n  Xamarin.Build.Download\r\n* `_ResolveLibraryProjectImports` unzips\r\n  `__AndroidLibrariesProjects__.zip`, .jar/.aar files, etc.\r\n\r\nBoth of these targets all looking at *all* assemblies, so we could\r\nmake a new item group `@(_MonoAndroidReferencePath)` and use this\r\ninstead. This would both allow the tasks inside these targets to\r\noperate on less assemblies. It would also allow them to skip for\r\nchanges in NetStandard projects.\r\n\r\nI added a new `<FilterAssemblies/>` MSBuild task to filter based on\r\nthe presence of this attribute in an assembly:\r\n\r\n    [assembly: System.Runtime.Versioning.TargetFrameworkAttribute (\"MonoAndroid,Version=v8.1\")]\r\n\r\nMSBuild/Roslyn populate this attribute based on the\r\n`$(TargetFrameworkIdentifier)` of the project.\r\n\r\n## Results ##\r\n\r\nI tested the Xamarin.Forms project in this repo.\r\n\r\nInitial build:\r\n\r\n    Before:\r\n      78 ms  _BuildAdditionalResourcesCache             1 calls\r\n    1678 ms  _ResolveLibraryProjectImports              1 calls\r\n    After:\r\n      47 ms  FilterAssemblies                           1 calls\r\n      23 ms  _BuildAdditionalResourcesCache             1 calls\r\n    1120 ms  _ResolveLibraryProjectImports              1 calls\r\n\r\nIncremental build with XAML change:\r\n\r\n    Before:\r\n     62 ms  _BuildAdditionalResourcesCache             1 calls\r\n    300 ms  _ResolveLibraryProjectImports              1 calls\r\n    After:\r\n     62 ms  FilterAssemblies                           1 calls\r\n      0 ms  _BuildAdditionalResourcesCache             1 calls\r\n     16 ms  _ResolveLibraryProjectImports              1 calls\r\n\r\nNote that during the incremental build, since only a NetStandard\r\nassembly was updated the following targets are skipped:\r\n\r\n    _BuildAdditionalResourcesCache:\r\n    Skipping target \"_BuildAdditionalResourcesCache\" because all output files are up-to-date with respect to the input files.\r\n    ...\r\n    _ResolveLibraryProjectImports:\r\n    Skipping target \"_ResolveLibraryProjectImports\" because all output files are up-to-date with respect to the input files.\r\n\r\nOverall I would say this saves ~500ms on initial build, and ~250ms on\r\nincremental builds."}],"ResultType":"GitHubEvent"},"Forms":{"Events":[{"Id":"9395701464","Type":"IssuesEvent","CreatedAt":"2019-04-08T03:59:21","Actor":"Adam-Langley","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/5839","RelatedDescription":"Opened issue \"Forms ListView Row Animations to not occur\" (#5839) at xamarin/Xamarin.Forms","RelatedBody":"### Description\r\nA simple ListView data-bound to an ObservableCollection should animate with add/remove/move animations on iOS. None of these animations occur however.\r\n\r\n### Steps to Reproduce\r\n\r\n1. Create a simple project with a ListView bound to an ObservableCollection\r\n2. Bind a button to an add/remove or move action, where you fire the appropriate INotifyPropertyChanged event\r\n3. Click the button, watch for the list to repaint\r\n\r\n### Expected Behavior\r\nListView should animate similar to how UITableView does\r\n\r\n### Actual Behavior\r\nNo animation whatsoever occurs.\r\n\r\n### Basic Information\r\n\r\n- Version with issue:\r\n- Last known good version:\r\n- IDE: Visual Studio Mac 8.0.1\r\n- Platform Target Frameworks: <!-- All that apply -->\r\n  - iOS:  12.1\r\n - Forms: 3.6.0.293080"},{"Id":"9395661134","Type":"IssuesEvent","CreatedAt":"2019-04-08T03:46:08","Actor":"adrianknight89","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/5838","RelatedDescription":"Opened issue \"[Android] 4.0.1.268567-nightly breaks ListView recylcing\" (#5838) at xamarin/Xamarin.Forms","RelatedBody":"I have a `DataTemplate` with a `ViewCell` whose content is a `Grid`. The grid has multiple auto-sized rows. One of the rows is sized according to view model bindings, but Android does not respect these bindings if I scroll up and down on the `ListView`. So, it looks like cell recycling is broken.\r\n\r\n```\r\n<forms:CachedImage Grid.Row=\"2\" Grid.Column=\"0\" Grid.ColumnSpan=\"3\" Style=\"{x:StaticResource ImageStyle}\">\r\n     <forms:CachedImage.GestureRecognizers>\r\n          <TapGestureRecognizer Tapped=\"ImageTapGestureRecognizer_Tapped\"/>\r\n     </forms:CachedImage.GestureRecognizers>\r\n</forms:CachedImage>\r\n```\r\n\r\nThe style sets `WidthRequest` and `HeightRequest` of the image according to the view model.\r\n\r\nAnother issue I see is the `TapGestureRecognizer` command is no longer firing when I x:Reference it to the parent view's view model, and so I ended up wiring the `Tapped` event and calling the command from it (I have not verified yet if this is too due to the latest nightly build).\r\n"},{"Id":"9393722344","Type":"PullRequestEvent","CreatedAt":"2019-04-07T13:55:46","Actor":"mrlacey","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/5837","RelatedDescription":"Opened pull request \"Issue4879 ImageButton Padding (UWP)\" (#5837) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\n\r\nFix UWP so it applies `Padding` to `ImageButton` in the same way as Android and iOS.\r\n\r\nIncludes an automated test that requires `ManualReview` because unable to automate checking that Button and ImageButton render the same size visually.\r\n\r\n### Issues Resolved ### \r\n<!-- Please use the format \"fixes #xxxx\" for each issue this PR addresses -->\r\n\r\n- fixes #4879\r\n\r\n### API Changes ###\r\n<!-- List all API changes here (or just put None), example:\r\n \r\n None\r\n\r\n### Platforms Affected ### \r\n<!-- Please list all platforms affected by these changes -->\r\n\r\n- UWP\r\n\r\n### Behavioral/Visual Changes ###\r\n<!-- Describe any changes that may change how a user's app behaves or appears when upgrading to this version of the codebase. -->\r\n\r\nWhen padding is applied to an ImageButton on UWP, the padding is now applied to the button as a whole, not just the image. ImageButtons should now display the correct size and not smaller than they should be.\r\nIncorrect behavior meant that the padding was previously applied to the nested image element.\r\n\r\n### Before/After Screenshots ### \r\n<!-- If possible, take a screenshot of your test case before these changes were made and another screenshot after the changes were made to show possible visual changes. -->\r\n\r\nIn these images, the green background is on a Button containing an image. The Red and Purple images are ImageButtons, to show they now produce the same height and width as a Button containing an image.\r\n\r\nBefore:\r\n![image](https://user-images.githubusercontent.com/189547/55684124-c1c16700-593f-11e9-99a5-112b9f1d0101.png)\r\n\r\nAfter:\r\n![image](https://user-images.githubusercontent.com/189547/55684611-dfdd9600-5944-11e9-98b3-6e87b44f5fce.png)\r\n\r\n\r\n### Testing Procedure ###\r\n<!-- Please list the steps that should be taken to properly test these changes on each relevant platform. If you were unable to test these changes yourself on any or all platforms, please let us know. Also, if you are able to attach a video of your test run, you will be our personal hero. -->\r\n\r\nRun the test and verify that Green, Purple, and Red \"Button\"s are the same size.\r\n\r\n![Issue4879-test-run-recording](https://user-images.githubusercontent.com/189547/55684603-bcb2e680-5944-11e9-9af8-509201bc045b.gif)\r\n\r\n### PR Checklist ###\r\n\r\n- [x] Has automated tests <!-- (if tests are omitted or manual, state reason in description) -->\r\n- [x] Rebased on top of the target branch at time of PR\r\n- [x] Changes adhere to coding standard\r\n"},{"Id":"9393559445","Type":"IssuesEvent","CreatedAt":"2019-04-07T12:39:06","Actor":"jrahma","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/5836","RelatedDescription":"Opened issue \"OnAppearing not getting invoked\" (#5836) at xamarin/Xamarin.Forms","RelatedBody":"Hi,\r\n\r\nI have the following **OnAppearing** in my Signup page..\r\n\r\n```\r\nprotected override async void OnAppearing()\r\n{\r\n        .............\r\n        .............\r\n        .............\r\n}\r\n\r\n```\r\nFrom HomePage, the user clicks add and if the user is not signed in then t will start the Signin ContentPage like this:\r\n\r\n```\r\nNavigation.PushModalAsync(new NavigationPage(new Signin())\r\n{\r\n    BarBackgroundColor = Color.White,\r\n    BarTextColor = Color.Black\r\n});\r\n\r\n```\r\nFrom the Signin Page the user clicks on the Signup button which will start the Signup ContentPage like this:\r\n\r\n```\r\nNavigation.PushModalAsync(new NavigationPage(new Signup())\r\n{\r\n    BarBackgroundColor = Color.White,\r\n    BarTextColor = Color.Black\r\n});\r\n\r\n```\r\nso then anything I keep in the OnAppearing will NOT be invoked even just a simple:\r\n\r\n`await DisplayAlert(\"Signup\", \"OnAppearing should start\", \"OK\");`\r\n\r\nI am using Xamarin Forms 3.6.0.293080\r\n\r\n\r\nKindly help..\r\n\r\nThanks,\r\nJassim\r\n\r\n"},{"Id":"9393183004","Type":"IssuesEvent","CreatedAt":"2019-04-07T09:16:58","Actor":"vichetsen","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/5834","RelatedDescription":"Closed issue \"Build failed with Resource.Designer.cs\" (#5834) at xamarin/Xamarin.Forms","RelatedBody":"<!-- Bug report best practices: https://github.com/xamarin/Xamarin.Forms/wiki/Submitting-Issues -->\r\nI cannot build my Xamarin Form project.\r\nThe build failed at Resource.Designer.cs\r\n\r\nVisual Studio 2017 15.9.11\r\nXamarin Form: 3.6.0.293080\r\n\r\n### Description\r\nI create Xamarin Form projects in Visual Studio. Then, I upgraded my nuget packages. \r\nIt was working fine, I can debug my codes with Xamarin Live. After several attempts, I add new screens and get this problem.\r\n\r\n### Screenshots\r\n<img width=\"1233\" alt=\"error-resource-designer\" src=\"https://user-images.githubusercontent.com/2862678/55680534-ecfa8500-5944-11e9-93e4-270915b3f521.png\">\r\n\r\n<img width=\"524\" alt=\"2019-04-07_150248\" src=\"https://user-images.githubusercontent.com/2862678/55680640-824a4900-5946-11e9-8995-3ec27874e144.png\">\r\n\r\n"},{"Id":"9393075160","Type":"IssuesEvent","CreatedAt":"2019-04-07T08:15:18","Actor":"ajaykeshri","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/5835","RelatedDescription":"Opened issue \"Find clicked position of list item in  collectionview Xamarin form\" (#5835) at xamarin/Xamarin.Forms","RelatedBody":"<!-- Bug report best practices: https://github.com/xamarin/Xamarin.Forms/wiki/Submitting-Issues -->\r\n\r\n### Description\r\n\r\n### Steps to Reproduce\r\n\r\n1. \r\n2. \r\n3. \r\n\r\n### Expected Behavior\r\n\r\n### Actual Behavior\r\n\r\n### Basic Information\r\n\r\n- Version with issue:\r\n- Last known good version:\r\n- IDE:\r\n- Platform Target Frameworks: <!-- All that apply -->\r\n  - iOS:  <!-- The version of the iOS SDK you are compiling against, e.g. 11.1 -->\r\n  - Android: <!-- The version of the Android SDK you are compiling against, e.g. 7.1 --> \r\n  - UWP:  <!-- The version of the UWP SDK you are compiling against, e.g. 16299 --> \r\n- Android Support Library Version: <!-- if applicable -->\r\n- Nuget Packages:\r\n- Affected Devices:\r\n\r\n### Screenshots\r\n\r\n<!-- If the issue is a visual issue, please include screenshots showing the problem if possible -->\r\n\r\n### Reproduction Link\r\n\r\n<!-- Please upload or provide a link to a reproduction case -->\r\n"},{"Id":"9393046565","Type":"IssuesEvent","CreatedAt":"2019-04-07T07:59:06","Actor":"vichetsen","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/5834","RelatedDescription":"Opened issue \"Build failed with Resource.Designer.cs\" (#5834) at xamarin/Xamarin.Forms","RelatedBody":"<!-- Bug report best practices: https://github.com/xamarin/Xamarin.Forms/wiki/Submitting-Issues -->\r\nI cannot build my Xamarin Form project.\r\nThe build failed at Resource.Designer.cs\r\n\r\nVisual Studio 2017 15.9.11\r\nXamarin Form: 3.6.0.293080\r\n\r\n### Description\r\nI create Xamarin Form projects in Visual Studio. Then, I upgraded my nuget packages. \r\nIt was working fine, I can debug my codes with Xamarin Live. After several attempts, I add new screens and get this problem.\r\n\r\n### Screenshots\r\n<img width=\"1233\" alt=\"error-resource-designer\" src=\"https://user-images.githubusercontent.com/2862678/55680534-ecfa8500-5944-11e9-93e4-270915b3f521.png\">\r\n\r\n"}],"ResultType":"GitHubEvent"},"Macios":{"Events":[{"Id":"9393648093","Type":"IssuesEvent","CreatedAt":"2019-04-07T13:21:18","Actor":"MookieFumi","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/issues/5863","RelatedDescription":"Opened issue \"Add padding to UILabel control\" (#5863) at xamarin/xamarin-macios","RelatedBody":" <!-- 🚨 STOP 🚨 𝗦𝗧𝗢𝗣 🚨 𝑺𝑻𝑶𝑷 🚨 -->\r\n\r\n<!--\r\nPlease fill in the *entire* template below.\r\nThe template is designed to avoid unnecessary delays to confirm and fix reported issues. Issues with missing information generally end up with a `need-info` label and take significantly more time to fix. Please help us help you!\r\nFor more information see https://github.com/xamarin/xamarin-macios/wiki/Submitting-Bugs-&-Suggestions\r\nFor support requests use https://www.xamarin.com/support\r\n-->\r\n### Steps to Reproduce\r\n\r\n1. It's a new feature related with [an existing issue in the Xamarin.Forms repo](https://github.com/xamarin/Xamarin.Forms/issues/4784) because it's useful in a Xamarin Forms app avoid extra Layouts so we should have available a Padding property.\r\n\r\n`<Label\r\n            BackgroundColor=\"Silver\"\r\n            Text=\"Welcome to Xamarin.Forms!\"\r\n            Padding=\"20\"/>`\r\n\r\n2. I've been researching and the UILabel control doesn't have any property to do it.\r\n\r\n### Expected Behavior\r\n\r\nThe **UILabel** should have a property to add **padding** and I've checked it and there's a type called **UIEdgeInsets** to get it.\r\n\r\n### Actual Behavior\r\n\r\nNo padding in UILabel without creating extra layouts.\r\n\r\n### Example Project (If Possible)\r\n\r\n<!--\r\n1. Place cursor below this comment block.\r\n2. Drag and drop the compressed project or files needed to reproduce.\r\n-->\r\n\r\n[PaddeableLabel.zip](https://github.com/xamarin/xamarin-macios/files/3051562/PaddeableLabel.zip)\r\n"},{"Id":"9392465033","Type":"PullRequestEvent","CreatedAt":"2019-04-07T00:56:48","Actor":"wjk","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/5862","RelatedDescription":"Opened pull request \"Add macOS Xcode archive support\" (#5862) at xamarin/xamarin-macios","RelatedBody":"Does mostly what the title says. Note that this code is totally untested (mostly due to how hard it is to do an end-to-end build of Xamarin.Mac; I have tried and failed several times in the past). I am mainly opening the PR now both for feedback, and so the CI bot can tell me what I did wrong. Note also the TODO comments in my added code; I would appreciate some guidance on how to deal with those. Thanks so much!"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1113833658920472576","CreatedAt":"2019-04-04T16:00:12+00:00","UserScreenname":"xamarinhq","Text":"Join us live right now for another @dotnet #CommunityStandup with live demoes and QA from the #Xamarin team https://t.co/Umwxz8RtPj","Source":"<a href=\"https://www.elgato.com/gaming\" rel=\"nofollow\">Elgato Stream Deck</a>","RetweetCount":30,"FavoriteCount":11,"RawContent":null},{"Id":"1113554700702449664","CreatedAt":"2019-04-03T21:31:44+00:00","UserScreenname":"xamarinhq","Text":"Last week we issued a challenge to the Xamarin community to use the new Material Design controls with Visual by rep… https://t.co/JpaGEihELG","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":141,"FavoriteCount":51,"RawContent":null},{"Id":"1113137014768066560","CreatedAt":"2019-04-02T17:52:00+00:00","UserScreenname":"xamarinhq","Text":"News from the #VisualStudio 2019 Launch Event. See what’s new for #Xamarin Developers in #VS2019,… https://t.co/ylrA7eBnQ4","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":144,"FavoriteCount":70,"RawContent":null},{"Id":"1112804184166944768","CreatedAt":"2019-04-01T19:49:27+00:00","UserScreenname":"xamarinhq","Text":"Learn about the new, exciting releases and tooling to help jumpstart your next mobile development project.\n\nJoin us… https://t.co/4AhXCdCrB0","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":27,"FavoriteCount":13,"RawContent":null},{"Id":"1111358962681765893","CreatedAt":"2019-03-28T20:06:39+00:00","UserScreenname":"xamarinhq","Text":"Unlock the power of Glide with “GlideX”: a simple library to swap-in Glide’s image loading implementation in-place… https://t.co/bAk49l9er6","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":47,"FavoriteCount":25,"RawContent":null},{"Id":"1111318034789158912","CreatedAt":"2019-03-28T17:24:01+00:00","UserScreenname":"xamarinhq","Text":"How are we doing? The #Xamarin March survey is now ready for your feedback: https://t.co/yfktVy49Pl \nIt's only avai… https://t.co/gX2uC9QShF","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":54,"FavoriteCount":37,"RawContent":null},{"Id":"1110599405390962693","CreatedAt":"2019-03-26T17:48:26+00:00","UserScreenname":"xamarinhq","Text":"Interpret some of the #CSharp in your application while compiling the rest ahead of time as usual.\n\nCool.... Introd… https://t.co/vkhDptAeTr","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":94,"FavoriteCount":44,"RawContent":null},{"Id":"1109140611515498502","CreatedAt":"2019-03-22T17:11:43+00:00","UserScreenname":"xamarinhq","Text":"https://t.co/GFuU36E9x5 - Let's walk through a basic building block of #Xamarin.Forms. In the latest episode of Xam… https://t.co/qczJXvqcNK","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":67,"FavoriteCount":29,"RawContent":null},{"Id":"1108410911151345664","CreatedAt":"2019-03-20T16:52:09+00:00","UserScreenname":"xamarinhq","Text":"We're ready for testing &amp; app submission. The latest #Xamarin .iOS SDKs shipping with #VS2019 and #VS4Mac 8.0, are… https://t.co/KC1Gih3MFF","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":58,"FavoriteCount":25,"RawContent":null},{"Id":"1107723971531862017","CreatedAt":"2019-03-18T19:22:29+00:00","UserScreenname":"xamarinhq","Text":"We have received some great pull requests to add some new features and that have gone into the newest release. Now… https://t.co/EqNQUDloOm","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":119,"FavoriteCount":47,"RawContent":null},{"Id":"1106650380182659080","CreatedAt":"2019-03-15T20:16:25+00:00","UserScreenname":"xamarinhq","Text":"Introducing the New Xamarin Customer Showcase\n\nHighlighting the amazing work developers are doing for all sorts of… https://t.co/yQbcA4cYc6","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":96,"FavoriteCount":42,"RawContent":null},{"Id":"1106576630884065280","CreatedAt":"2019-03-15T15:23:22+00:00","UserScreenname":"xamarinhq","Text":"This week on the #XamarinShow, @JamesMontemagno &amp; @JonathanPeppers show us how to optimize image loading for Androi… https://t.co/FkiznwhBep","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":74,"FavoriteCount":17,"RawContent":null},{"Id":"1105942645308678144","CreatedAt":"2019-03-13T21:24:08+00:00","UserScreenname":"xamarinhq","Text":"There have been some drastic changes across key libraries for Google Play Services &amp; Android Support. Let's get a q… https://t.co/heywxPz0Qs","Source":"<a href=\"http://twitter.com\" rel=\"nofollow\">Twitter Web Client</a>","RetweetCount":41,"FavoriteCount":25,"RawContent":null},{"Id":"1105573743986917377","CreatedAt":"2019-03-12T20:58:15+00:00","UserScreenname":"xamarinhq","Text":"#MFractor is a powerful #VS4Mac extension to streamline Xamarin app dev so you can save significant time &amp; effort o… https://t.co/pEwcgwzd3t","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":45,"FavoriteCount":22,"RawContent":null},{"Id":"1105491570583851008","CreatedAt":"2019-03-12T15:31:44+00:00","UserScreenname":"xamarinhq","Text":".@codemillmatt &amp; @JamesMontemagno talk about a ton of newness out there for all mobile devs including a hot new… https://t.co/05m3VTmUBe","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":62,"FavoriteCount":24,"RawContent":null},{"Id":"1103762250509283332","CreatedAt":"2019-03-07T21:00:02+00:00","UserScreenname":"xamarinhq","Text":"Introducing Material Design; a suite of cross-platform components in the #Xamarin.Forms 3.6 Visual feature that boo… https://t.co/gin9lpb0eQ","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":150,"FavoriteCount":70,"RawContent":null},{"Id":"1103750171215699968","CreatedAt":"2019-03-07T20:12:02+00:00","UserScreenname":"xamarinhq","Text":"Level up your mobile development skills at #MSBuild, May 6-8, 2019 in Seattle. Registration is now open!… https://t.co/EZNWhIn3p6","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":41,"FavoriteCount":9,"RawContent":null},{"Id":"1103709031066189825","CreatedAt":"2019-03-07T17:28:33+00:00","UserScreenname":"xamarinhq","Text":"Happening right now! Join the Mobile #dotNET Teams for our community stand-up covering great community contribution… https://t.co/9HUp86ZqBU","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":30,"FavoriteCount":16,"RawContent":null},{"Id":"1103701857682231296","CreatedAt":"2019-03-07T17:00:03+00:00","UserScreenname":"xamarinhq","Text":"On this week's Essential API of the week we take a look at Accelerometer, which enables you monitor the device's ac… https://t.co/UxhHHar5zN","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":57,"FavoriteCount":18,"RawContent":null}]}},"RunOn":"2019-04-08T05:30:53.205414Z","RunDurationInMilliseconds":2513}