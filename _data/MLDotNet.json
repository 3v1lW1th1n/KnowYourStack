{"Data":{"GitHub":{"Issues":[{"Id":"602360224","IsPullRequest":true,"CreatedAt":"2020-04-19T02:51:01","Actor":"frank-dong-ms","Number":"5040","RawContent":null,"Title":"Fix official build","State":"closed","Body":"We are excited to review your PR.\r\n\r\nSo we can do the best job, please check:\r\n\r\n- [ ] There's a descriptive title that will make sense to other developers some time from now. \r\n- [ ] There's associated issues. All PR's should have issue(s) associated - unless a trivial self-evident change such as fixing a typo. You can use the format `Fixes #nnnn` in your description to cause GitHub to automatically close the issue(s) when your PR is merged.\r\n- [ ] Your change description explains what the change does, why you chose your approach, and anything else that reviewers should know.\r\n- [ ] You have included any necessary tests in the same PR.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/5040","RelatedDescription":"Closed or merged PR \"Fix official build\" (#5040)"},{"Id":"598242659","IsPullRequest":true,"CreatedAt":"2020-04-17T15:46:01","Actor":"kevencarneiro","Number":"5017","RawContent":null,"Title":"Fixing build in UNIX systems that don't have en-US as default culture","State":"closed","Body":"This Pull Request fixes #5016 as is set the language to en-US for the shell session, fixing the build problem existing in the cultures that uses comma as decimal separator.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/5017","RelatedDescription":"Closed or merged PR \"Fixing build in UNIX systems that don't have en-US as default culture\" (#5017)"},{"Id":"598223556","IsPullRequest":false,"CreatedAt":"2020-04-17T15:46:01","Actor":"kevencarneiro","Number":"5016","RawContent":null,"Title":"Build failed in non-english cultures using build.sh","State":"closed","Body":"### System information\r\n\r\n- **OS version/distro**: Mac OS Catalina\r\n- **.NET Version (eg., dotnet --info)**: 3.1.200\r\n\r\n### Issue\r\n\r\n- **What did you do?**\r\nCloned the repository and builded the project using build.sh file \r\n- **What happened?**\r\nThe project `Microsoft.ML.FSharp.Tests.fsproj` fails to build with error FS0246. My default localization use comma to separate decimal places and when it's building the project it tries to parse in my current culture instead of en-US.\r\n- **What did you expect?**\r\nThe project should build successfully.\r\n\r\n### Source code / logs\r\nPlease paste or attach the code or logs or traces that would be helpful to diagnose the issue you are reporting.\r\n\r\n`\r\nFSC : error FS0246: Valor não reconhecido '4.7' para --langversion use --langversion:? para a lista completa \r\n`","Url":"https://github.com/dotnet/machinelearning/issues/5016","RelatedDescription":"Closed issue \"Build failed in non-english cultures using build.sh\" (#5016)"},{"Id":"601593889","IsPullRequest":true,"CreatedAt":"2020-04-16T23:36:26","Actor":"michaelgsharp","Number":"5039","RawContent":null,"Title":"Lag lead operator","State":"closed","Body":"LagLeadOperator copies values from prior (lag) rows or future (lead) rows.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/5039","RelatedDescription":"Closed or merged PR \"Lag lead operator\" (#5039)"},{"Id":"598019039","IsPullRequest":true,"CreatedAt":"2020-04-16T23:29:26","Actor":"michaelgsharp","Number":"5015","RawContent":null,"Title":"Lag Lead operator","State":"closed","Body":"This PR depends on PR #4993, because that PR is not in yet this PR says it is making more changes then it is. The only new changes this pr brings in once that PR goes in is the LagLead operator. So you can only review the LagLeadOperator files and tests and can ignore the others. This branch will be updated when that other PR gets merged.\r\n\r\nLagLeadOperator copies values from prior (lag) rows or future (lead) rows.","Url":"https://github.com/dotnet/machinelearning/pull/5015","RelatedDescription":"Closed or merged PR \"Lag Lead operator\" (#5015)"},{"Id":"601417598","IsPullRequest":true,"CreatedAt":"2020-04-16T23:28:02","Actor":"michaelgsharp","Number":"5037","RawContent":null,"Title":"Forecasting pivot featurizer","State":"closed","Body":"ForecastingPivotFeaturizer takes in columns that are 2D vectors, and \"pivots\" them into single value columns while dropping null values. It currently supports output from LagLeadOperator and RollingWindowFeaturizer.","Url":"https://github.com/dotnet/machinelearning/pull/5037","RelatedDescription":"Closed or merged PR \"Forecasting pivot featurizer\" (#5037)"},{"Id":"601281150","IsPullRequest":true,"CreatedAt":"2020-04-16T23:16:13","Actor":"michaelgsharp","Number":"5035","RawContent":null,"Title":"Rolling Window","State":"closed","Body":"RollingWindow does rolling window calculations per grain (kinda like a composite unique key by combining multiple columns). It currently provides min/mean/max.","Url":"https://github.com/dotnet/machinelearning/pull/5035","RelatedDescription":"Closed or merged PR \"Rolling Window\" (#5035)"},{"Id":"601245173","IsPullRequest":true,"CreatedAt":"2020-04-16T23:05:36","Actor":"michaelgsharp","Number":"5034","RawContent":null,"Title":"Short grain dropper","State":"closed","Body":"ShortGrainDropper makes sure that each grain combination (kinda like a composite unique key by combining multiple columns) has the specified minimum number of rows. If it does not, then the all the rows corresponding to that grain are dropped.","Url":"https://github.com/dotnet/machinelearning/pull/5034","RelatedDescription":"Closed or merged PR \"Short grain dropper\" (#5034)"},{"Id":"601525122","IsPullRequest":true,"CreatedAt":"2020-04-16T21:59:25","Actor":"gvashishtha","Number":"5038","RawContent":null,"Title":"clarifying parameters on time series","State":"open","Body":"We are excited to review your PR.\r\n\r\nSome context:\r\n\r\nAlso note that, here we are talking about three different parameters:\r\n1.\tseriesLength is the length of the whole timeseries.\r\n2.\ttrainSize is the number of points from the beginning of the series that are used for training.\r\n3.\twindowSize is the size of rolling window during the training of SSA.\r\n\r\nThe first parameter is dictated by the series and even though it’s not used in SSA, it’s not meaningful for the user to “set” it arbitrarily. The third parameter is *recommended* to be at least twice as the biggest seasonality in the data that the user care about. The second parameter must be more twice the third parameter. \r\n\r\nSo to summarize we should have:\r\n1.\t2*Seasonality length < windowSize\r\n2.\t2*windowSize < trainSize\r\n3.\ttrainSize < seriesLength\r\n\r\nThe first constraint is recommended while the other two are required.\r\n\r\nSo we can do the best job, please check:\r\n\r\n- [x] There's a descriptive title that will make sense to other developers some time from now. \r\n- [x] There's associated issues. All PR's should have issue(s) associated - unless a trivial self-evident change such as fixing a typo. You can use the format `Fixes #nnnn` in your description to cause GitHub to automatically close the issue(s) when your PR is merged.\r\n- [x] Your change description explains what the change does, why you chose your approach, and anything else that reviewers should know.\r\n- [x] You have included any necessary tests in the same PR.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/5038","RelatedDescription":"Open PR \"clarifying parameters on time series\" (#5038)"},{"Id":"598018355","IsPullRequest":true,"CreatedAt":"2020-04-16T20:05:27","Actor":"michaelgsharp","Number":"5014","RawContent":null,"Title":"Forecasting Pivot Featurizer","State":"closed","Body":"This PR depends on PR #4993, because that PR is not in yet this PR says it is making more changes then it is. The only new changes this pr brings in once that PR goes in is the ForecastingPivot featurizer. So you can only review the ForecastingPivotFeaturizer files and tests and can ignore the others. This branch will be updated when that other PR gets merged.\r\n\r\nForecastingPivotFeaturizer takes in columns that are 2D vectors, and \"pivots\" them into single value columns while dropping null values. It currently supports output from LagLeadOperator and RollingWindowFeaturizer.","Url":"https://github.com/dotnet/machinelearning/pull/5014","RelatedDescription":"Closed or merged PR \"Forecasting Pivot Featurizer\" (#5014)"},{"Id":"601399919","IsPullRequest":true,"CreatedAt":"2020-04-16T19:52:49","Actor":"LittleLittleCloud","Number":"5036","RawContent":null,"Title":"Update package dependency in CodeGenerator","State":"open","Body":"This PR \r\n- make CodeGenerator depends on a release AutoML package instead of project, to avoid the latest change in model load/unload mechanism, which will break ModelBuilder. ","Url":"https://github.com/dotnet/machinelearning/pull/5036","RelatedDescription":"Open PR \"Update package dependency in CodeGenerator\" (#5036)"},{"Id":"600629039","IsPullRequest":true,"CreatedAt":"2020-04-16T17:23:37","Actor":"frank-dong-ms","Number":"5029","RawContent":null,"Title":"Dotnetcore3.1 bench1","State":"closed","Body":"allow tests to run on dotnet core 3.1:\r\n1. change back to Fact as some tests are passing on dotnet core 3.1\r\n2. change to use lower precision for dotnet core 3.1\r\n3. fix bug in baseline compare, when compare number with allowed precision, space and tab should not affect the result like below case:\r\n\r\nthey should be same if we set digitsOfPrecision = 3 (should remove space and tab which is only for format before compare result):\r\n\r\n![image](https://user-images.githubusercontent.com/55860649/79395608-d6f7ab00-7f2e-11ea-92ea-4af80b9660c8.png)\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/5029","RelatedDescription":"Closed or merged PR \"Dotnetcore3.1 bench1\" (#5029)"},{"Id":"601079846","IsPullRequest":false,"CreatedAt":"2020-04-16T14:00:07","Actor":"Zeraphil","Number":"5033","RawContent":null,"Title":"Unexpected behavior using multiple pipelines for training vs one","State":"open","Body":"### System information\r\n\r\n- **OS version/distro**:\r\n\r\n- **.NET Version (eg., dotnet --info)**: \r\n\r\n### Issue\r\n\r\n-**What did I do?**\r\n- Instead of one training pipeline, I split the pipeline to fit and transform the data into a featurized IDataView, and used that to train a classifier\r\n-**What happened?**\r\nClassifier accuracy was 50% of accuracy when the training pipeline is a complete chain.\r\n-**What did I expect**\r\nI expect that the accuracy of the model trained on either with the TransformerChain pipeline or trainingData transformed by the same TransformerChain be similar in accuracy\r\n\r\n### Source code / logs\r\n\r\nThis is what I mean by splitting the pipeline.\r\n\r\n`var dataProcessPipeline =\r\n                                      mlContext.Transforms.Text.FeaturizeText(\"WordFeatures\", \"Transcript\")\r\n                                      .Append(mlContext.Transforms.NormalizeMinMax(\"Features\", \"Features\"));`\r\n\r\n`IDataView transformedTrainingData = dataProcessPipeline.Fit(trainingDataView).Transform(trainingDataView);`\r\n\r\n`var trainer = mlContext.MulticlassClassification.Trainers.SdcaMaximumEntropy(labelColumnName:\"Label\", featureColumnName: \"Features\")\r\n.Append(mlContext.Transforms.Conversion.MapKeyToValue(\"PredictedLabel\", \"PredictedLabel\"));`\r\n\r\n`ITransformer model = trainer.Fit(transformedTrainingData );`\r\n\r\nI understand this to be conceptually similar to\r\n\r\n`\r\n            var dataProcessPipeline =\r\n                                      mlContext.Transforms.Text.FeaturizeText(\"WordFeatures\", \"Transcript\")\r\n                                      .Append(mlContext.Transforms.NormalizeMinMax(\"Features\", \"Features\"));`\r\n\r\n           var trainer = mlContext.MulticlassClassification.Trainers.SdcaMaximumEntropy(labelColumnName: \"Label\", featureColumnName: \"Features\")\r\n                                      .Append(mlContext.Transforms.Conversion.MapKeyToValue(\"PredictedLabel\", \"PredictedLabel\"));\r\n            var trainingPipeline = dataProcessPipeline.Append(trainer);`\r\n\r\n`ITransformer model =trainingPipeline .Fit(trainingDataView);`\r\n\r\n\r\nThe first gives me ~50% accuracy on the test set, the second ~98.9%. Is my understanding incorrect? Is there a missing step on doing things this way? My goal is to create a single Transformer for featurizing data that can then be used in more than one model, without having to build multiple models that featurize the data in the exact same way. \r\n\r\nHopefully the example makes sense. I can clarify if not.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/5033","RelatedDescription":"Open issue \"Unexpected behavior using multiple pipelines for training vs one\" (#5033)"},{"Id":"600780100","IsPullRequest":false,"CreatedAt":"2020-04-16T06:25:59","Actor":"JacksonKearl","Number":"5032","RawContent":null,"Title":"Inspect AutoML parameter choices","State":"open","Body":"Currently when I run an AutoML experiment either from the CLI or manually, I get a log of the runs and the best run, but I can't seem to access the actual parameters (maxIterations, regularizations, etc.) that it used for that run. This makes it very difficult to reproduce single well performing runs.\r\n\r\nIs there any way to get the hyperparameter config for the runs AutoML is queuing? Could this be added?","Url":"https://github.com/dotnet/machinelearning/issues/5032","RelatedDescription":"Open issue \"Inspect AutoML parameter choices\" (#5032)"},{"Id":"600667294","IsPullRequest":true,"CreatedAt":"2020-04-16T00:32:46","Actor":"najeeb-kazmi","Number":"5031","RawContent":null,"Title":"Handle NaN optimization metric in AutoML","State":"open","Body":"Fixes #4663 \r\n\r\nIn AutoML, `CrossValSummaryRunner` is invoked if the dataset contains less than 15000 rows. It runs 10-fold cross validation on it, and then returns the model from the fold with the best optimization metric. It does this by looking for the index of the model with the best metric in the list of run results, and returning the element at this index.\r\n\r\nIf the metric in all 10 folds is `NaN`, then this index is `-1`, resulting in an `IndexOutOfRangeException`.","Url":"https://github.com/dotnet/machinelearning/pull/5031","RelatedDescription":"Open PR \"Handle NaN optimization metric in AutoML\" (#5031)"},{"Id":"600650602","IsPullRequest":false,"CreatedAt":"2020-04-15T23:39:01","Actor":"coutaq","Number":"5030","RawContent":null,"Title":"I cannot save the model for some weird reason.","State":"open","Body":"### System information\r\n\r\n- **OS version/distro**:win10-x64\r\n- **.NET Version (eg., dotnet --info)**: 3.1.101\r\n\r\n### Issue\r\n\r\n- **Have been playing around with machine learning as of late, made a basic machine learning algorithm. It was working perfectly and then I broke something and now it refuses to save the model.**\r\n- **I cannot save the model. I'm not sure what caused that. I'm a beginner.**\r\n- **That I could save the model**\r\n\r\n-Here's the error code:\r\n`System.ArgumentException\r\n  HResult=0x80070057\r\n  Message=The path is not of a legal form.\r\n  Source=mscorlib\r\n  StackTrace:\r\n   at System.IO.Path.NewNormalizePath(String path, Int32 maxPathLength, Boolean expandShortPaths)\r\n   at System.IO.Path.NormalizePath(String path, Boolean fullCheck, Int32 maxPathLength, Boolean expandShortPaths)\r\n   at System.IO.Path.GetFullPathInternal(String path)\r\n   at System.IO.Path.GetFullPath(String path)\r\n   at System.Diagnostics.FileVersionInfo.GetFullPathWithAssert(String fileName)\r\n   at System.Diagnostics.FileVersionInfo.GetVersionInfo(String fileName)\r\n   at Microsoft.ML.RepositoryWriter.CreateNew(Stream stream, IExceptionContext ectx, Boolean useFileSystem)\r\n   at Microsoft.ML.ModelOperationsCatalog.Save(ITransformer model, DataViewSchema inputSchema, Stream stream)\r\n   at Microsoft.ML.ModelOperationsCatalog.Save(ITransformer model, DataViewSchema inputSchema, String filePath)\r\n   at MachineLearningTest.ModelBuilder.SaveModel(MLContext mlContext, ITransformer mlModel, String modelRelativePath, DataViewSchema modelInputSchema) in C:\\Users\\Michael\\source\\repos\\new\\MachineLearingTest\\ModelBuilder.cs:line 48\r\n   at MachineLearningTest.ModelBuilder.CreateModel() in C:\\Users\\Michael\\source\\repos\\new\\MachineLearingTest\\ModelBuilder.cs:line 43\r\n   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx)\r\n   at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx)\r\n   at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state)\r\n   at System.Threading.ThreadHelper.ThreadStart()\r\n\r\n  This exception was originally thrown at this call stack:\r\n\tSystem.IO.Path.NewNormalizePath(string, int, bool)\r\n\tSystem.IO.Path.NormalizePath(string, bool, int, bool)\r\n\tSystem.IO.Path.GetFullPathInternal(string)\r\n\tSystem.IO.Path.GetFullPath(string)\r\n\tSystem.Diagnostics.FileVersionInfo.GetFullPathWithAssert(string)\r\n\tSystem.Diagnostics.FileVersionInfo.GetVersionInfo(string)\r\n\tMicrosoft.ML.RepositoryWriter.CreateNew(System.IO.Stream, Microsoft.ML.Runtime.IExceptionContext, bool)\r\n\tMicrosoft.ML.ModelOperationsCatalog.Save(Microsoft.ML.ITransformer, Microsoft.ML.DataViewSchema, System.IO.Stream)\r\n\tMicrosoft.ML.ModelOperationsCatalog.Save(Microsoft.ML.ITransformer, Microsoft.ML.DataViewSchema, string)\r\n    MachineLearningTest.ModelBuilder.SaveModel(Microsoft.ML.MLContext, Microsoft.ML.ITransformer, string, Microsoft.ML.DataViewSchema) in ModelBuilder.cs\r\n    ...\r\n    [Call Stack Truncated]\r\n`\r\n\r\n### Source code / logs\r\n\r\nAnd here's the code:\r\n`// This file was auto-generated by ML.NET Model Builder. \r\n\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.IO;\r\nusing System.Linq;\r\nusing System.Windows.Forms;\r\nusing Microsoft.ML;\r\nusing Microsoft.ML.Data;\r\nusing Microsoft.ML.Trainers.LightGbm;\r\n\r\nnamespace MachineLearningTest\r\n{\r\n    public static class ModelBuilder\r\n    {\r\n        private static string TRAIN_DATA_FILEPATH = Program.dataPath;\r\n        private static string MODEL_FILEPATH = @\"MLModel.zip\";\r\n        // Create MLContext to be shared across the model creation workflow objects \r\n        // Set a random seed for repeatable/deterministic results across multiple trainings.\r\n        private static MLContext mlContext = new MLContext(seed: 1);\r\n\r\n        public static void CreateModel()\r\n        {\r\n            // Load Data\r\n            IDataView trainingDataView = mlContext.Data.LoadFromTextFile<ModelInput>(\r\n                                            path: TRAIN_DATA_FILEPATH,\r\n                                            hasHeader: true,\r\n                                            separatorChar: ',',\r\n                                            allowQuoting: true,\r\n                                            allowSparse: false);\r\n\r\n            // Build training pipeline\r\n            IEstimator<ITransformer> trainingPipeline = BuildTrainingPipeline(mlContext);\r\n            \r\n\r\n            // Evaluate quality of Model\r\n            //Evaluate(mlContext, trainingDataView, trainingPipeline);\r\n\r\n            // Train Model\r\n            ITransformer mlModel = TrainModel(mlContext, trainingDataView, trainingPipeline);\r\n\r\n            // Save model\r\n            SaveModel(mlContext, mlModel, MODEL_FILEPATH, trainingDataView.Schema);\r\n        }\r\n        private static void SaveModel(MLContext mlContext, ITransformer mlModel, string modelRelativePath, DataViewSchema modelInputSchema)\r\n        {\r\n            // This causes the exception\r\n                mlContext.Model.Save(mlModel, modelInputSchema, (GetAbsolutePath(modelRelativePath)));\r\n        }\r\n\r\n        public static IEstimator<ITransformer> BuildTrainingPipeline(MLContext mlContext)\r\n        {\r\n            // Data process configuration with pipeline data transformations \r\n            var dataProcessPipeline = mlContext.Transforms.Conversion.MapValueToKey(\"White\", \"White\")\r\n                                      .Append(mlContext.Transforms.Concatenate(\"Features\", new[] { \"Hue\", \"Saturation\", \"Brightness\" }));\r\n            // Set the training algorithm \r\n            var trainer = mlContext.MulticlassClassification.Trainers.LightGbm(new LightGbmMulticlassTrainer.Options() { NumberOfIterations = 20, LearningRate = 0.05916024f, NumberOfLeaves = 4, MinimumExampleCountPerLeaf = 1, UseCategoricalSplit = false, HandleMissingValue = true, MinimumExampleCountPerGroup = 200, MaximumCategoricalSplitPointCount = 8, CategoricalSmoothing = 20, L2CategoricalRegularization = 1, UseSoftmax = true, Booster = new GradientBooster.Options() { L2Regularization = 0, L1Regularization = 0.5 }, LabelColumnName = \"White\", FeatureColumnName = \"Features\" })\r\n                                      .Append(mlContext.Transforms.Conversion.MapKeyToValue(\"PredictedLabel\", \"PredictedLabel\"));\r\n\r\n            var trainingPipeline = dataProcessPipeline.Append(trainer);\r\n\r\n            return trainingPipeline;\r\n        }\r\n\r\n        public static ITransformer TrainModel(MLContext mlContext, IDataView trainingDataView, IEstimator<ITransformer> trainingPipeline)\r\n        {\r\n            Console.WriteLine(\"=============== Training  model ===============\");\r\n            ITransformer model = trainingPipeline.Fit(trainingDataView);\r\n\r\n            Console.WriteLine(\"=============== End of training process ===============\");\r\n            return model;\r\n        }\r\n\r\n        private static void Evaluate(MLContext mlContext, IDataView trainingDataView, IEstimator<ITransformer> trainingPipeline)\r\n        {\r\n            // Cross-Validate with single dataset (since we don't have two datasets, one for training and for evaluate)\r\n            // in order to evaluate and get the model's accuracy metrics\r\n            Console.WriteLine(\"=============== Cross-validating to get model's accuracy metrics ===============\");\r\n            var crossValidationResults = mlContext.MulticlassClassification.CrossValidate(trainingDataView, trainingPipeline, numberOfFolds: 5, labelColumnName: \"White\");\r\n            PrintMulticlassClassificationFoldsAverageMetrics(crossValidationResults);\r\n        }\r\n\r\n        \r\n\r\n        public static string GetAbsolutePath(string relativePath)\r\n        {\r\n            FileInfo _dataRoot = new FileInfo(typeof(Program).Assembly.Location);\r\n            string assemblyFolderPath = _dataRoot.Directory.FullName;\r\n\r\n            string fullPath = Path.Combine(assemblyFolderPath, relativePath);\r\n            return fullPath;\r\n        }\r\n        public static void PrintMulticlassClassificationMetrics(MulticlassClassificationMetrics metrics)\r\n        {\r\n            Console.WriteLine($\"************************************************************\");\r\n            Console.WriteLine($\"*    Metrics for multi-class classification model   \");\r\n            Console.WriteLine($\"*-----------------------------------------------------------\");\r\n            Console.WriteLine($\"    MacroAccuracy = {metrics.MacroAccuracy:0.####}, a value between 0 and 1, the closer to 1, the better\");\r\n            Console.WriteLine($\"    MicroAccuracy = {metrics.MicroAccuracy:0.####}, a value between 0 and 1, the closer to 1, the better\");\r\n            Console.WriteLine($\"    LogLoss = {metrics.LogLoss:0.####}, the closer to 0, the better\");\r\n            for (int i = 0; i < metrics.PerClassLogLoss.Count; i++)\r\n            {\r\n                Console.WriteLine($\"    LogLoss for class {i + 1} = {metrics.PerClassLogLoss[i]:0.####}, the closer to 0, the better\");\r\n            }\r\n            Console.WriteLine($\"************************************************************\");\r\n        }\r\n\r\n        public static void PrintMulticlassClassificationFoldsAverageMetrics(IEnumerable<TrainCatalogBase.CrossValidationResult<MulticlassClassificationMetrics>> crossValResults)\r\n        {\r\n            var metricsInMultipleFolds = crossValResults.Select(r => r.Metrics);\r\n\r\n            var microAccuracyValues = metricsInMultipleFolds.Select(m => m.MicroAccuracy);\r\n            var microAccuracyAverage = microAccuracyValues.Average();\r\n            var microAccuraciesStdDeviation = CalculateStandardDeviation(microAccuracyValues);\r\n            var microAccuraciesConfidenceInterval95 = CalculateConfidenceInterval95(microAccuracyValues);\r\n\r\n            var macroAccuracyValues = metricsInMultipleFolds.Select(m => m.MacroAccuracy);\r\n            var macroAccuracyAverage = macroAccuracyValues.Average();\r\n            var macroAccuraciesStdDeviation = CalculateStandardDeviation(macroAccuracyValues);\r\n            var macroAccuraciesConfidenceInterval95 = CalculateConfidenceInterval95(macroAccuracyValues);\r\n\r\n            var logLossValues = metricsInMultipleFolds.Select(m => m.LogLoss);\r\n            var logLossAverage = logLossValues.Average();\r\n            var logLossStdDeviation = CalculateStandardDeviation(logLossValues);\r\n            var logLossConfidenceInterval95 = CalculateConfidenceInterval95(logLossValues);\r\n\r\n            var logLossReductionValues = metricsInMultipleFolds.Select(m => m.LogLossReduction);\r\n            var logLossReductionAverage = logLossReductionValues.Average();\r\n            var logLossReductionStdDeviation = CalculateStandardDeviation(logLossReductionValues);\r\n            var logLossReductionConfidenceInterval95 = CalculateConfidenceInterval95(logLossReductionValues);\r\n\r\n            Console.WriteLine($\"*************************************************************************************************************\");\r\n            Console.WriteLine($\"*       Metrics for Multi-class Classification model      \");\r\n            Console.WriteLine($\"*------------------------------------------------------------------------------------------------------------\");\r\n            Console.WriteLine($\"*       Average MicroAccuracy:    {microAccuracyAverage:0.###}  - Standard deviation: ({microAccuraciesStdDeviation:#.###})  - Confidence Interval 95%: ({microAccuraciesConfidenceInterval95:#.###})\");\r\n            Console.WriteLine($\"*       Average MacroAccuracy:    {macroAccuracyAverage:0.###}  - Standard deviation: ({macroAccuraciesStdDeviation:#.###})  - Confidence Interval 95%: ({macroAccuraciesConfidenceInterval95:#.###})\");\r\n            Console.WriteLine($\"*       Average LogLoss:          {logLossAverage:#.###}  - Standard deviation: ({logLossStdDeviation:#.###})  - Confidence Interval 95%: ({logLossConfidenceInterval95:#.###})\");\r\n            Console.WriteLine($\"*       Average LogLossReduction: {logLossReductionAverage:#.###}  - Standard deviation: ({logLossReductionStdDeviation:#.###})  - Confidence Interval 95%: ({logLossReductionConfidenceInterval95:#.###})\");\r\n            Console.WriteLine($\"*************************************************************************************************************\");\r\n\r\n        }\r\n\r\n        public static double CalculateStandardDeviation(IEnumerable<double> values)\r\n        {\r\n            double average = values.Average();\r\n            double sumOfSquaresOfDifferences = values.Select(val => (val - average) * (val - average)).Sum();\r\n            double standardDeviation = Math.Sqrt(sumOfSquaresOfDifferences / (values.Count() - 1));\r\n            return standardDeviation;\r\n        }\r\n\r\n        public static double CalculateConfidenceInterval95(IEnumerable<double> values)\r\n        {\r\n            double confidenceInterval95 = 1.96 * CalculateStandardDeviation(values) / Math.Sqrt((values.Count() - 1));\r\n            return confidenceInterval95;\r\n        }\r\n    }\r\n}\r\n`","Url":"https://github.com/dotnet/machinelearning/issues/5030","RelatedDescription":"Open issue \"I cannot save the model for some weird reason.\" (#5030)"},{"Id":"600463350","IsPullRequest":false,"CreatedAt":"2020-04-15T17:20:41","Actor":"CBrauer","Number":"5028","RawContent":null,"Title":"A CLI-script does not produce the same results as the generated C# code.","State":"open","Body":"Hey Guys,\r\n\r\nI have found that the C# source code that is generated by the CLI script does not agree with the script output.\r\n\r\nI have modified the solution that is generated by a cli-script to see it they agree.  The cli-script shows metric values that I cannot duplicate with the code that was generated by the script.\r\n\r\nI believe that the MLModel.zip file is not for the optimal solution found by the script.\r\nI have zipped everything into a file called “cli-script.zip” and I have put this Zip file on my GitHub account: https://github.com/CBrauer/Test-of-ML.NET.\r\n\r\nThe file “test.zip” contains the folder: “cli-script”.  This folder contains:\r\n1.\tModel2.  This is the modified project solution that was created by the cli-script.\r\n2.\t“run-cli-script-model2.bat”.  This runs script.\r\n3.\tscreen.png.  This is a screen capture of the results of the script.\r\n4.\tverify.txt.  The output of the Model2 project.  This should give the same results as “screen.png”.\r\nThe script output does not produce the same results as the C# solution that was created by the script.\r\n\r\nI, therefore, assume that “MLModel.zip” is not the correct model file.\r\n\r\nCharles\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/5028","RelatedDescription":"Open issue \"A CLI-script does not produce the same results as the generated C# code.\" (#5028)"},{"Id":"600022117","IsPullRequest":true,"CreatedAt":"2020-04-15T17:08:18","Actor":"mstfbl","Number":"5027","RawContent":null,"Title":"Update ForecastBySsa function specifications and add seealso","State":"closed","Body":"Fixes #5007\r\n\r\nUpdated XML documentation for `ForecastBySsa`, and added a see-also section for `SsaForecastingEstimator`with `ForecastBySsa`, similar to how it has been done with [SsaSpikeEstimator](https://docs.microsoft.com/en-us/dotnet/api/microsoft.ml.transforms.timeseries.ssaspikedetector?view=ml-dotnet).\r\n","Url":"https://github.com/dotnet/machinelearning/pull/5027","RelatedDescription":"Closed or merged PR \"Update ForecastBySsa function specifications and add seealso\" (#5027)"},{"Id":"599904333","IsPullRequest":true,"CreatedAt":"2020-04-15T00:09:37","Actor":"frank-dong-ms","Number":"5026","RawContent":null,"Title":"fix 2 build issues","State":"closed","Body":"fix 2 build issues in nightly build pipeline and machinelearing full pipeline:\r\n1. _targetFramework from netcoreapp3.0 to netcoreapp3.1\r\n2. force tls1.2 when connect to https://dotnetcli.azureedge.net as this address only accepts tls 1.2 and 1.3: https://www.ssllabs.com/ssltest/analyze.html?d=dotnetcli.azureedge.net&s=72.21.81.200\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/5026","RelatedDescription":"Closed or merged PR \"fix 2 build issues\" (#5026)"},{"Id":"599158269","IsPullRequest":true,"CreatedAt":"2020-04-14T06:21:52","Actor":"frank-dong-ms","Number":"5023","RawContent":null,"Title":"Fix SsaForecast bug","State":"closed","Body":"remove static field in PolynomialUtils, use local variable instead avoid random test failure\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/5023","RelatedDescription":"Closed or merged PR \"Fix SsaForecast bug\" (#5023)"},{"Id":"599200159","IsPullRequest":true,"CreatedAt":"2020-04-14T00:38:08","Actor":"frank-dong-ms","Number":"5024","RawContent":null,"Title":"move ubuntu and centos to agent pool with larger disk space","State":"closed","Body":"Ubuntu and CentOS is facing disk space issue, move to agent pool with larger disk space, this pool has 120 machines so should be good for use:\r\n\r\nhttps://helix.dot.net/api/2019-06-17/info/queues\r\n\r\n\"Purpose\": \"Build\",\r\n    \"Architecture\": \"AMD64\",\r\n    \"IsAvailable\": true,\r\n    \"IsInternalOnly\": true,\r\n    \"IsOnPremises\": false,\r\n    \"OperatingSystemGroup\": \"linux\",\r\n    \"PreInstalledImage\": null,\r\n    \"PreparedImage\": null,\r\n    \"QueueId\": \"BuildPool.Ubuntu.1604.Amd64.Open\",\r\n    \"QueueDepth\": 0,\r\n    \"ScaleMin\": 0,\r\n    **\"ScaleMax\": 120,**\r\n    \"UserList\": \"helix-buildagent-bot\",\r\n    \"WorkspacePath\": \"/datadisks/disk1/workspace\"\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/5024","RelatedDescription":"Closed or merged PR \"move ubuntu and centos to agent pool with larger disk space\" (#5024)"},{"Id":"599208774","IsPullRequest":true,"CreatedAt":"2020-04-14T00:10:40","Actor":"frank-dong-ms","Number":"5025","RawContent":null,"Title":"trouble shoot test hanging","State":"open","Body":"https://dev.azure.com/dnceng/public/_build/results?buildId=599069&view=logs&j=32952595-30e7-56fa-9b86-c4579b87f5d1&t=4390109a-3c77-5b7c-bf35-d176b654cd3c\r\n\r\nhttps://dev.azure.com/dnceng/public/_build/results?buildId=599067&view=logs&j=d1af5113-e574-5a31-f7f3-02fc40ea7b26&t=167d9e7d-b609-5b0a-7efa-d26b0dafb88f\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/5025","RelatedDescription":"Open PR \"trouble shoot test hanging\" (#5025)"},{"Id":"597167396","IsPullRequest":true,"CreatedAt":"2020-04-13T21:06:34","Actor":"antoniovs1029","Number":"5012","RawContent":null,"Title":"Avoid propagating some input columns when applying an Onnx model","State":"closed","Body":"Fixes #4970 \r\n\r\nAfter discussing this issue with @harishsk we agreed that the way to go is to drop all the input columns that are used as inputs of the onnx model that is applied by an `OnnxTransformer`. I've added the `ColumnSelectingOnnxTestColumnPropagation` where I explain and show more clearly what effects this has on different scenarios.\r\n\r\nSince the `OnnxTransformer` is a `RowToRowTransformerBase`, it can't drop columns only add columns. In fact, it seems that there's no transformer that do both dropping and adding columns.\r\n\r\nTo solve this, changes needed to be made in `RowToRowTransformerBase `to let `OnnxTransformer `override some methods, so that it can have more control on the output schema. This way the `OnnxTransformer `now creates a `OnnxDataTransform `which in turn uses the same `OnnxTransformer.Mapper `that always existed, but now it also uses a `OnnxTransformer.Bindings` that enable dropping columns while also adding the new columns added by the mapper. This is different from the previous behavior, where the `RowToRowTransformerBase `would return a `RowToRowMapperTransform `which used the typical `ColumnBindings `which only add columns to the input but don't drop columns from it.\r\n\r\nNOTE: I have left several \"//MYTODO\" comments with thoughts and questions for myself, which shall be removed before merging this PR. I've also added some comments here on GitHub pointing to the thoughts and questions that I find more important to address first.\r\n","Url":"https://github.com/dotnet/machinelearning/pull/5012","RelatedDescription":"Closed or merged PR \"Avoid propagating some input columns when applying an Onnx model\" (#5012)"},{"Id":"599102890","IsPullRequest":false,"CreatedAt":"2020-04-13T20:01:58","Actor":"abindh","Number":"5022","RawContent":null,"Title":"ML.Ranking LightGBM - Getting error \"Value cannot be null. Parameter name: items\"","State":"open","Body":"### System information\r\n\r\n- Windows:\r\n- .net Core 3.0: \r\n\r\n### Issue\r\n\r\n- I am trying to generate a simple ranking of candidates based on a few features for a recruitment application. \r\n- But when running the trainer, I get the following message which is not clear - \"Value cannot be null. Parameter name: items\"\r\n\r\n\r\n### Source code / logs\r\n\r\n![Capture](https://user-images.githubusercontent.com/12490592/79155380-f07ee280-7dc8-11ea-859e-fee03d4d7e24.PNG)\r\n\r\n```C#\r\n//Training Pipeline\r\n            IEstimator<ITransformer> dataPipeline = mlContext.Transforms.Categorical.OneHotEncoding(\"HIGHESTEDUCATION\", \"HIGHESTEDUCATION\")\r\n                .Append(mlContext.Transforms.Categorical.OneHotEncoding(\"SOURCE\", \"SOURCE\"))\r\n                .Append(mlContext.Transforms.Text.FeaturizeText(\"SKILLSET\", \"SKILLSET\"))\r\n                .Append(mlContext.Transforms.Categorical.OneHotEncoding(\"TOWNCITY\", \"TOWNCITY\"))\r\n                .Append(mlContext.Transforms.Categorical.OneHotEncoding(\"YEARSOFEXPERIENCE\", \"YEARSOFEXPERIENCE\"))\r\n                .Append(mlContext.Transforms.Concatenate(\"Features\", \"HIGHESTEDUCATION\", \"SKILLSET\", \"SOURCE\", \"TOWNCITY\", \"YEARSOFEXPERIENCE\"))\r\n                .Append(mlContext.Transforms.Conversion.MapValueToKey(\"Label\",\"Label\"))\r\n                .Append(mlContext.Transforms.Conversion.Hash(\"GroupId\", nameof(Candidate.VACANCYID), numberOfBits: 20));\r\n\r\n            // Set the LightGBM LambdaRank trainer.\r\n            IEstimator<ITransformer> trainer = mlContext.Ranking.Trainers.LightGbm(labelColumnName: \"Label\", featureColumnName: \"Features\", rowGroupColumnName: \"GroupId\"); \r\n            IEstimator<ITransformer> trainerPipeline = dataPipeline.Append(trainer);\r\n```\r\n```C#\r\n// Domain Model\r\npublic class Candidate\r\n    {\r\n        [LoadColumn(0)]\r\n        public string HIGHESTEDUCATION { get; set; }\r\n\r\n        [ColumnName(\"Label\"),LoadColumn(1)]\r\n        public Single RELEVANCESCORE { get; set; }\r\n\r\n        [LoadColumn(2)]\r\n        public string SKILLSET { get; set; }\r\n\r\n        [LoadColumn(3)]\r\n        public string SOURCE { get; set; }\r\n\r\n        [LoadColumn(4)]\r\n        public string TOWNCITY { get; set; }\r\n\r\n        [ ColumnName(\"GroupId\"), LoadColumn(5)]\r\n        public string VACANCYID { get; set; }\r\n\r\n        [LoadColumn(6)]\r\n        public string YEARSOFEXPERIENCE { get; set; }\r\n        \r\n    }\r\n```\r\nPlease paste or attach the code or logs or traces that would be helpful to diagnose the issue you are reporting.\r\n","Url":"https://github.com/dotnet/machinelearning/issues/5022","RelatedDescription":"Open issue \"ML.Ranking LightGBM - Getting error \"Value cannot be null. Parameter name: items\"\" (#5022)"},{"Id":"598659671","IsPullRequest":true,"CreatedAt":"2020-04-13T04:06:07","Actor":"kevencarneiro","Number":"5021","RawContent":null,"Title":"LoadColumnName support in TextLoader and auto map class members ","State":"open","Body":"This pull request resolves #4480.\r\n\r\nThese features were add in this pull request:\r\n* Support of `LoadColumnName` attribute in `TextLoader` class (when loaded file has headers).\r\n* Possibility to ignore a member when using `CreateTextLoader` using the `LoadColumnIgnoreAttribute`\r\n* Feature to map the `TInput` properties/fields name to column of TextLoader (when loaded file has headers)\r\n","Url":"https://github.com/dotnet/machinelearning/pull/5021","RelatedDescription":"Open PR \"LoadColumnName support in TextLoader and auto map class members \" (#5021)"},{"Id":"598621005","IsPullRequest":false,"CreatedAt":"2020-04-13T01:45:33","Actor":"dcostea","Number":"5020","RawContent":null,"Title":"Error scoring Tensorflow model mtcnn.pb. The second input must be a scalar, but it has shape [1,1]","State":"open","Body":"### System information\r\n\r\n- **OS version/distro**: Win10\r\n- **.NET Version (eg., dotnet --info)**:  .NET Core 3.1\r\n\r\n### Issue\r\n\r\n- **What did you do?** I have run TensorFlow scoring using mtcnn.pb model\r\n- **What happened?** I got Tensorflow.TensorflowException: The second input must be a scalar, but it has shape [1,1]\r\n\t [[Node: _clooppnet/while/add/y/_2 = Switch[T=DT_FLOAT, _device=\"/job:localhost/replica:0/task:0/device:CPU:0\"](_clooppnet/while/add/y/_1, pnet/while/LoopCond/_135)]]\r\n- **What did you expect?** To get the bounding box, maybe probability and landmarks as well.\r\n\r\n### Source code / logs\r\n\r\nHere is the mtcnn.pb model: [mtcnn.zip](https://github.com/dotnet/machinelearning/files/4467608/mtcnn.zip)\r\n\r\nThese are the inputs:\r\n![Untitled](https://user-images.githubusercontent.com/15055082/79085329-7737af00-7d38-11ea-9e1d-bd57d21a09df.png)\r\n\r\nThis is one of the outputs node (box):\r\n![Untitled](https://user-images.githubusercontent.com/15055082/79085482-0218a980-7d39-11ea-8c33-50f57b0c3f8a.png)\r\n\r\n```csharp\r\n        class PredictedImageData\r\n        {\r\n            [ColumnName(\"box\")]\r\n            [VectorType(1)]\r\n            public float[] BoundingBox { get; set; }\r\n\r\n            [ColumnName(\"landmarks\")]\r\n            [VectorType(1)]\r\n            public float[] Landmarks { get; set; }\r\n\r\n            [ColumnName(\"prob\")]\r\n            public float Probability { get; set; }\r\n        }\r\n\r\n        private struct ImageNetSettings\r\n        {\r\n            public const int imageHeight = 224;\r\n            public const int imageWidth = 224;\r\n        }\r\n\r\n        public class ImageNetData\r\n        {\r\n            public string ImagePath;\r\n\r\n            //[ImageType(ImageNetSettings.imageHeight, ImageNetSettings.imageWidth)]\r\n            //[VectorType(1)]\r\n            //[ColumnName(\"input\")]\r\n            //public Bitmap Input { get; set; }\r\n\r\n            [VectorType(1)]\r\n            [ColumnName(\"min_size\")]\r\n            public float[] MinSize;\r\n\r\n            [VectorType(1)]\r\n            [ColumnName(\"factor\")]\r\n            public float[] Factor;\r\n\r\n            [VectorType(3)]\r\n            [ColumnName(\"thresholds\")]\r\n            public float[] Thresholds;\r\n        }\r\n\r\n        static void Main(string[] args)\r\n        {\r\n            var mlContext = new MLContext(seed: 1);\r\n            var modelLocation = \"mtcnn.pb\";\r\n            var data = mlContext.Data.LoadFromEnumerable(new List<ImageNetData>());\r\n\r\n            var pipeline = mlContext\r\n                .Transforms.LoadImages(\r\n                    outputColumnName: \"input\",\r\n                    imageFolder: \"\",\r\n                    inputColumnName: nameof(ImageNetData.ImagePath))\r\n                .Append(mlContext\r\n                .Transforms.ResizeImages(\r\n                    outputColumnName: \"input\",\r\n                    imageWidth: ImageNetSettings.imageWidth,\r\n                    imageHeight: ImageNetSettings.imageHeight,\r\n                    inputColumnName: \"input\"))\r\n                .Append(mlContext.Transforms.ExtractPixels(\r\n                    outputColumnName: \"input\"))\r\n                .Append(mlContext.Model.LoadTensorFlowModel(modelLocation).ScoreTensorFlowModel(\r\n                    inputColumnNames: new[] { \"input\", \"thresholds\", \"min_size\", \"factor\" },\r\n                    //outputColumnNames: new[] { \"box\", \"prob\", \"landmarks\" },\r\n                    outputColumnNames: new[] { \"box\" },\r\n                    addBatchDimensionInput: true));\r\n\r\n            ITransformer model = pipeline.Fit(data);\r\n\r\n            var predictionEngine = mlContext.Model.CreatePredictionEngine<ImageNetData, PredictedImageData>(model);\r\n\r\n            var prediction = predictionEngine.Predict(new ImageNetData\r\n            {\r\n                ImagePath = \"anastasia3.jpg\",\r\n                //Input = (Bitmap)Image.FromFile(\"anastasia3.jpg\"),\r\n                MinSize = new float[] { 40F },\r\n                Factor = new float[] { 0.709F },\r\n                Thresholds = new float[] { 0.6F, 0.7F, 0.7F }\r\n            });\r\n        }\r\n```\r\n","Url":"https://github.com/dotnet/machinelearning/issues/5020","RelatedDescription":"Open issue \"Error scoring Tensorflow model mtcnn.pb. The second input must be a scalar, but it has shape [1,1]\" (#5020)"},{"Id":"598597880","IsPullRequest":true,"CreatedAt":"2020-04-12T23:54:23","Actor":"LittleLittleCloud","Number":"5019","RawContent":null,"Title":"wip - Add Sweepable Pipeline","State":"open","Body":"Allow users to sweep over pre-defined paramaters with similar API of creating/training a pipeline using sweepers defined in `Microsoft.ML.Sweeper`.\r\n\r\nIn the current state, only `RandomSweeper` and `GridSearchSweeper` is provided, and other sweepers like `SMAC`  will be added soon.\r\n\r\nRight now, only one sweepable trainer is allowed in each pipeline, however, we can support multi-trainer easily with a few lines change.\r\n\r\nOne of a sample pipeline here, it uses `RandomSweeper` over a user-defined paramater set and sweeps over 20 times\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/2ba9ec6139a8dae455da61442c6f033e44e2766f/test/Microsoft.ML.AutoML.Tests/AutoEstimatorChainTest.cs#L24\r\n\r\nAnd part of it's Output\r\n```\r\nAlpha=0.7001 Lambda=0.11 LearningRate=0.001\r\nRMSE: 3.08841817087814\r\nAlpha=0.7001 Lambda=0.01 LearningRate=0.0709999949\r\nRMSE: 0.88847094121806\r\nAlpha=0.3001 Lambda=0.91 LearningRate=0.021\r\nRMSE: 1.33374709132294\r\n\r\n...\r\n```\r\n\r\n### Why I create this PR\r\nAuto sweeping parameter is quite a useful feature in Automate ML, AutoML.Net supports it internally but those API is not exposed and sweeping value is fixed, moreover, it only supports a few trainers. It will be great if ML.Net has some external API to allow users to sweep over trainer's parameters on the pipeline level. \r\n\r\n### What will be next\r\n- allow sweeping Enum and Int type\r\n- allow user sets up discrete numeric options using `OptionBase` class.\r\n- adding more sweepers (SMAC....)\r\n- ( if I have time ) create a similar API experience with what AutoML.Net has (saying, creating customer experiment based on pipeline, providing CV training and evaluation, and generate CodeGen afterwards)\r\n","Url":"https://github.com/dotnet/machinelearning/pull/5019","RelatedDescription":"Open PR \"wip - Add Sweepable Pipeline\" (#5019)"},{"Id":"598436872","IsPullRequest":true,"CreatedAt":"2020-04-12T08:29:29","Actor":"antoniovs1029","Number":"5018","RawContent":null,"Title":"Support for Categorical features in CalculateFeatureContribution of LightGBM","State":"open","Body":"Fixes #3272\r\n\r\nAs explained [here](https://github.com/dotnet/machinelearning/issues/3272#issuecomment-611849910), `CalculateFeatureContribution` would throw an exception when used on LightGBM models that had `UseCategoricalSplit` enabled, because there was no support to calculate feature contribution for categorical features. Here I add that support, and one test to replicate the original scenario were an exception was thrown.","Url":"https://github.com/dotnet/machinelearning/pull/5018","RelatedDescription":"Open PR \"Support for Categorical features in CalculateFeatureContribution of LightGBM\" (#5018)"},{"Id":"598005423","IsPullRequest":true,"CreatedAt":"2020-04-10T17:36:34","Actor":"Lynx1820","Number":"5013","RawContent":null,"Title":"MurmurHash Onnx Export","State":"open","Body":"The following data input types are currently not supported by onnxruntime's murmurHash operator: float, double, ulong, long, and boolean. Once added, ml.net will be able to support them as well. ","Url":"https://github.com/dotnet/machinelearning/pull/5013","RelatedDescription":"Open PR \"MurmurHash Onnx Export\" (#5013)"},{"Id":"596970371","IsPullRequest":true,"CreatedAt":"2020-04-09T03:05:31","Actor":"frank-dong-ms","Number":"5011","RawContent":null,"Title":"fix SsaForecast test","State":"closed","Body":"PolynomialUtils.FindPolynomialCoefficients is not thread safe. \r\nPolynomialFactor class contains static fields Destination that be override by other threads during test execution. \r\nLock method call to FindPolynomialCoefficients to make it thread safe.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/5011","RelatedDescription":"Closed or merged PR \"fix SsaForecast test\" (#5011)"}],"ResultType":"GitHubIssue"}},"RunOn":"2020-04-19T05:30:36.1737076Z","RunDurationInMilliseconds":631}