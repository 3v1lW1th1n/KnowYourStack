{"Data":{"Blog":{"FeedItems":[{"Title":"Announcing the Windows Compatibility Pack for .NET Core","PublishedOn":"2017-11-17T04:59:32+00:00","CommentsCount":36,"FacebookCount":0,"Summary":"Porting existing code to .NET Core used to be quite hard because the available API set was very small. In .NET Core 2.0, we already made this much easier, thanks to .NET Standard 2.0. Today,...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/16/announcing-the-windows-compatibility-pack-for-net-core/","RawContent":null},{"Title":"UPDATE – Microservices and Docker containers: Architecture, Patterns and Development guidance (Updated for .NET Core 2.0)","PublishedOn":"2017-11-16T22:00:06+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Nov. 15th 2017 update Earlier this year, we published this eBook/guide and sample application offering guidance for architecting microservices and Docker containers based applications. We have...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/16/update-microservices-and-docker-containers-architecture-patterns-and-development-guidance-updated-for-net-core-2-0/","RawContent":null},{"Title":"UPDATE – Web Applications with ASP.NET Core Architecture and Patterns guidance (Updated for ASP.NET Core 2)","PublishedOn":"2017-11-16T21:00:05+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"Nov. 15th 2017 update Earlier this year, we published an eBook/Guide and sample application offering guidance named Architecting Modern Web Applications with ASP.NET Core and Microsoft Azure. We have...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/16/update-web-applications-with-asp-net-core-architecture-and-patterns-guidance-updated-for-asp-net-core-2/","RawContent":null},{"Title":"Introducing Tensor for multi-dimensional Machine Learning and AI data","PublishedOn":"2017-11-15T22:00:18+00:00","CommentsCount":4,"FacebookCount":0,"Summary":"Overview Tensor is an exchange type for homogenous multi-dimensional data for 1 to N dimensions. The motivation behind introducing Tensor&#60;T&#62; is to make it easy for Machine Learning library...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/15/introducing-tensor-for-multi-dimensional-machine-learning-and-ai-data/","RawContent":null},{"Title":"Introducing Nullable Reference Types in C#","PublishedOn":"2017-11-15T20:00:47+00:00","CommentsCount":170,"FacebookCount":0,"Summary":"Today we released a prototype of a C# feature called &#8220;nullable reference types&#8220;, which is intended to help you find and fix most of your null-related bugs before they blow up at runtime....","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/15/nullable-reference-types-in-csharp/","RawContent":null},{"Title":"Announcing F# support for .NET Core and .NET Standard projects in Visual Studio","PublishedOn":"2017-11-15T19:00:49+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"We&#8217;re pleased to announce that Visual Studio 2017 15.5 Preview 4 now supports F# projects targeting .NET Core, .NET Standard, and .NET Framework through the .NET Core SDK. Some of you have...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/15/announcing-f-support-for-net-core-and-net-standard-projects-in-visual-studio/","RawContent":null},{"Title":"Welcome to C# 7.2 and Span","PublishedOn":"2017-11-15T19:00:26+00:00","CommentsCount":14,"FacebookCount":0,"Summary":"C# 7.2 is the latest point release of C#, and adds a number of small but useful features. All the features are described in wonderful detail in the docs. Start with the overview, What&#8217;s new in...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/15/welcome-to-c-7-2-and-span/","RawContent":null},{"Title":".NET Core November 2017 Update","PublishedOn":"2017-11-15T05:25:23+00:00","CommentsCount":12,"FacebookCount":0,"Summary":"Today, we are releasing the .NET Core November Update. This includes .NET Core 1.0.8, 1.1.5 and 2.0.1 and .NET Core SDK 1.1.5 and 2.0.3. Details regarding the security issues addressed by this release...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/14/net-core-november-2017-update/","RawContent":null},{"Title":".NET Framework November 2017 Security and Quality Rollup","PublishedOn":"2017-11-15T03:54:36+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"Today, we are releasing the November 2017 Security and Quality Rollup. Security This release contains no new security updates. The most recent .NET security updates were shipped with the September...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/14/net-framework-november-2017-security-and-quality-rollup/","RawContent":null},{"Title":"Modernize existing .NET apps with Windows Containers and Azure","PublishedOn":"2017-11-01T23:14:48+00:00","CommentsCount":22,"FacebookCount":0,"Summary":"As part of the series of posts announced at this initial blog post (.NET Application Architecture Guidance) that explores each of the architecture areas currently covered by our team, this current...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/01/modernize-existing-net-apps-with-windows-containers-and-azure/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"6872255902","Type":"PullRequestEvent","CreatedAt":"2017-11-17T22:01:26","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/90","RelatedDescription":"Merged pull request \"Add BenchmarkDotNet to README.md and project.json\" (#90) at dotnet/home","RelatedBody":""},{"Id":"6872252909","Type":"PullRequestEvent","CreatedAt":"2017-11-17T22:00:44","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/89","RelatedDescription":"Merged pull request \"New logo and SSL certificate for Peachpie\" (#89) at dotnet/home","RelatedBody":""},{"Id":"6868854916","Type":"PullRequestEvent","CreatedAt":"2017-11-17T09:04:03","Actor":"AndreyAkinshin","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/90","RelatedDescription":"Opened pull request \"Add BenchmarkDotNet to README.md and project.json\" (#90) at dotnet/home","RelatedBody":""},{"Id":"6816687850","Type":"IssuesEvent","CreatedAt":"2017-11-06T20:30:07","Actor":"Petermarcu","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/home/issues/88","RelatedDescription":"Closed issue \"File system watcher crash\" (#88) at dotnet/home","RelatedBody":"Not sure where to open this issue.\r\nI'm experiencing crashes since I migrated to .net core 2.0 while running my site.\r\nThe following is the exception and stack trace:\r\n```\r\nAn unhandled exception of type 'System.ArgumentException' occurred in System.Private.CoreLib.dll\r\nThe path is not of a legal form.\r\n\r\nSystem.Private.CoreLib.dll!System.IO.Path.GetFullPath(string path)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileSystemGlobbing.dll!Microsoft.Extensions.FileSystemGlobbing.InMemoryDirectoryInfo.InMemoryDirectoryInfo(string rootDir, System.Collections.Generic.IEnumerable<string> files, bool normalized)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileSystemGlobbing.dll!Microsoft.Extensions.FileSystemGlobbing.MatcherExtensions.Match(Microsoft.Extensions.FileSystemGlobbing.Matcher matcher, string rootDir, System.Collections.Generic.IEnumerable<string> files)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileSystemGlobbing.dll!Microsoft.Extensions.FileSystemGlobbing.MatcherExtensions.Match(Microsoft.Extensions.FileSystemGlobbing.Matcher matcher, string file)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileProviders.Physical.dll!Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.ReportChangeForMatchedEntries(string path)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileProviders.Physical.dll!Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.OnFileSystemEntryChange(string fullPath)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileProviders.Physical.dll!Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.OnRenamed(object sender, System.IO.RenamedEventArgs e)\tUnknown\tNo symbols loaded.\r\n \tSystem.IO.FileSystem.Watcher.dll!System.IO.FileSystemWatcher.NotifyRenameEventArgs(System.IO.WatcherChangeTypes action, string name, string oldName)\tUnknown\tNo symbols loaded.\r\n \tSystem.IO.FileSystem.Watcher.dll!System.IO.FileSystemWatcher.ParseEventBufferAndNotifyForEach(byte[] buffer)\tUnknown\tNo symbols loaded.\r\n \tSystem.IO.FileSystem.Watcher.dll!System.IO.FileSystemWatcher.ReadDirectoryChangesCallback(uint errorCode, uint numBytes, System.Threading.NativeOverlapped* overlappedPointer)\tUnknown\tNo symbols loaded.\r\n \tSystem.Private.CoreLib.dll!System.Threading._IOCompletionCallback.PerformIOCompletionCallback(uint errorCode, uint numBytes, System.Threading.NativeOverlapped* pOVERLAP)\tUnknown\tNo symbols loaded.\r\n```\r\n\r\nI'm not sure how to fix this. I can reproduce it although it's not easy since I think it has to do with timing..."},{"Id":"6797468573","Type":"PullRequestEvent","CreatedAt":"2017-11-01T23:04:17","Actor":"bfistein","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/89","RelatedDescription":"Opened pull request \"New logo and SSL certificate for Peachpie\" (#89) at dotnet/home","RelatedBody":""},{"Id":"6767783059","Type":"IssuesEvent","CreatedAt":"2017-10-26T05:52:31","Actor":"HarelM","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/issues/88","RelatedDescription":"Opened issue \"File system watcher crach\" (#88) at dotnet/home","RelatedBody":"Not sure where to open this issue.\r\nI'm experiencing crashes since I migrated to .net core 2.0 while running my site.\r\nThe following is the exception and stack trace:\r\n```\r\nAn unhandled exception of type 'System.ArgumentException' occurred in System.Private.CoreLib.dll\r\nThe path is not of a legal form.\r\n\r\nSystem.Private.CoreLib.dll!System.IO.Path.GetFullPath(string path)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileSystemGlobbing.dll!Microsoft.Extensions.FileSystemGlobbing.InMemoryDirectoryInfo.InMemoryDirectoryInfo(string rootDir, System.Collections.Generic.IEnumerable<string> files, bool normalized)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileSystemGlobbing.dll!Microsoft.Extensions.FileSystemGlobbing.MatcherExtensions.Match(Microsoft.Extensions.FileSystemGlobbing.Matcher matcher, string rootDir, System.Collections.Generic.IEnumerable<string> files)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileSystemGlobbing.dll!Microsoft.Extensions.FileSystemGlobbing.MatcherExtensions.Match(Microsoft.Extensions.FileSystemGlobbing.Matcher matcher, string file)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileProviders.Physical.dll!Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.ReportChangeForMatchedEntries(string path)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileProviders.Physical.dll!Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.OnFileSystemEntryChange(string fullPath)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileProviders.Physical.dll!Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.OnRenamed(object sender, System.IO.RenamedEventArgs e)\tUnknown\tNo symbols loaded.\r\n \tSystem.IO.FileSystem.Watcher.dll!System.IO.FileSystemWatcher.NotifyRenameEventArgs(System.IO.WatcherChangeTypes action, string name, string oldName)\tUnknown\tNo symbols loaded.\r\n \tSystem.IO.FileSystem.Watcher.dll!System.IO.FileSystemWatcher.ParseEventBufferAndNotifyForEach(byte[] buffer)\tUnknown\tNo symbols loaded.\r\n \tSystem.IO.FileSystem.Watcher.dll!System.IO.FileSystemWatcher.ReadDirectoryChangesCallback(uint errorCode, uint numBytes, System.Threading.NativeOverlapped* overlappedPointer)\tUnknown\tNo symbols loaded.\r\n \tSystem.Private.CoreLib.dll!System.Threading._IOCompletionCallback.PerformIOCompletionCallback(uint errorCode, uint numBytes, System.Threading.NativeOverlapped* pOVERLAP)\tUnknown\tNo symbols loaded.\r\n```\r\n\r\nI'm not sure how to fix this. I can reproduce it although it's not easy since I think it has to do with timing..."}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"6886438076","Type":"IssuesEvent","CreatedAt":"2017-11-21T19:28:57","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/49","RelatedDescription":"Opened issue \".NET Core Alpine Image Ready for Testing\" (#49) at dotnet/announcements","RelatedBody":"# .NET Core Alpine Image Ready for Testing\r\n\r\nAn [Alpine](https://hub.docker.com/_/alpine/)-based Docker image is now available for .NET Core. Alpine is much smaller than Debian, which we have used for the .NET Core base image to date. There have been many requests for an Alpine image. We are pleased to make it available. Please check out [.NET Core Docker Alpine Production Sample (Preview)](https://github.com/dotnet/dotnet-docker-samples/blob/master/dotnetapp-prod-alpine-preview/README.md) to see examples of using this image.\r\n\r\nWe have added two new images:\r\n\r\n- `2.1-runtime-alpine`\r\n- `2.1-runtime-deps-alpine`\r\n\r\nAlpine support is part of the .NET Core 2.1 release. .NET Core 2.1 images are currently provided at the [microsoft/dotnet-nightly](https://hub.docker.com/r/microsoft/dotnet-nightly/) repo, including the new Alpine images. .NET Core 2.1 images will be promoted to the [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/) repo when .NET Core 2.1 is shipped as a Preview, expected to be early 2018.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet/dotnet-docker-nightly #500](https://github.com/dotnet/dotnet-docker-nightly/issues/500)\r\n\r\n## Details\r\n\r\n* [dotnet/dotnet-docker-nightly #480](https://github.com/dotnet/dotnet-docker-nightly/pull/480)\r\n* [dotnet/announcements #20](https://github.com/dotnet/announcements/issues/20)\r\n* [dotnet/dotnet-docker-samples #94](https://github.com/dotnet/dotnet-docker-samples/pull/94)\r\n\r\nThe primary goal of Alpine is very small deployments. We have been considering various design decisions to make .NET Core Alpine base images as small as possible to align with that. In this first iteration, we enabled [.NET Core 2.0 Globalization Invariant Mode](https://github.com/dotnet/announcements/issues/20) in order to reduce the default size of the image. This change reduced the image by ~30MB. You can see the reduction in size for .NET Core images relative to Debian in the following table.\r\n\r\n|2.1 Image|Debian|Alpine|\r\n|-----    |------|------|\r\n|`-deps`   |153MB (68MB compressed) |13.8 MB (6MB compressed)|\r\n|`-runtime`|222MB (96MB compressed) |82.5 (34MB compressed)|\r\n\r\nNote: The compressed size is what you will see in a [registry](https://hub.docker.com/r/microsoft/dotnet-nightly/tags/) and is the wire-size cost.\r\n\r\nWe are also considering saving more space by native-compiling fewer assemblies. .NET Core runtime assemblies are native-compiled with the [crossgen tool](https://github.com/dotnet/coreclr/blob/master/Documentation/building/crossgen.md) in the [Ready2Run format](https://github.com/dotnet/coreclr/blob/master/Documentation/botr/readytorun-overview.md). Native-compiled code delivers superior startup performance but at the cost of 2-3x larger files. We have the opportunity to compile less, skipping compiling assemblies in part or in whole. We believe that we can save at least another 10MB through compiling less without a material drop in performance. For scenarios that value size over startup or where wire cost is significant, it may be valuable to aggressively reduce the number/% of compilation.\r\n\r\nAlpine images are only available for .NET Core 2.1. At the current time, only Runtime images are available. We intend to offer SDK images at a later date.\r\n\r\nUse cases that cannot tolerate Globalization invariant mode can reset the `DOTNET_SYSTEM_GLOBALIZATION_INVARIANT` environment variable and install the ICU package. Please check out [.NET Core Docker Alpine Production Sample (Preview)](https://github.com/dotnet/dotnet-docker-samples/blob/master/dotnetapp-prod-alpine-preview/README.md) to see examples of using this image with and without Globalization Invariant Mode enabled.\r\n\r\n## Call to Action\r\n\r\nPlease test your workloads with the new Alpine image. In particular, we want to know if enabling .NET Core Globalization Invariant Mode is acceptable/appreciated.\r\n"},{"Id":"6854176970","Type":"IssuesEvent","CreatedAt":"2017-11-14T18:00:49","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/announcements/issues/44","RelatedDescription":"Reopened issue \"Microsoft Security Advisory CVE-2017-11770 : Malformed Certificate can cause Denial of Service\" (#44) at dotnet/announcements","RelatedBody":"# Microsoft Security Advisory CVE-2017-11770 \r\n## Malformed Certificate can cause Denial of Service\r\n### Executive Summary \r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in the public versions of .NET Core 1.0 and 1.1, and 2.0. This advisory also provides guidance on what developers can do to update their applications correctly.\r\n\r\nMicrosoft is aware of a security vulnerability in the public version of .NET Core where a malformed certificate or other ASN.1 formatted data could lead to a denial of service via an infinite loop on Linux and macOS.\r\n\r\nSystem administrators are advised to update their .NET Core runtimes to versions 1.0.8, 1.1.5 and 2.0.1. Developers are advised to update their .NET Core SDK to version 2.0.3 or 1.1.5.\r\n### Discussion\r\n\r\nPlease use **** TODO: FILL IN ISSUE LINK *** for discussion of this advisory.\r\n\r\n### Mitigation Factors\r\n.NET Core applications running on Windows are not affected by this vulnerability. \r\n\r\n## Affected Software\r\nThe vulnerabilities affect any Microsoft .NET Core project if it uses any of affected runtime versions listed blow and is running on Linux.\r\n\r\nPlatform  | Runtime Version | Fixed runtime version\r\n----------------|----------------| -------------------------\r\nLinux | 1.0.0, 1.0.1, 1.0.2, 1.0.3, 1.0.4, 1.0.5, 1.0.7<br />1.1.0, 1.1.1, 1.1.2, 1.1.4<br />2.0.0 |  1.0.8<br />1.1.5<br />2.0.1\r\nmacOS | 1.0.0, 1.0.1, 1.0.2, 1.0.3, 1.0.4, 1.0.5, 1.0.7<br />1.1.0, 1.1.1, 1.1.2, 1.1.4 |  1.0.8<br />1.1.5\r\n\r\n### Advisory FAQ\r\n#### How do I know if I am affected?\r\n\r\nAny application running against .NET Core 1.0.7 or lower, or 1.1.2 or lower, or 2.0.0 is affected. The default version of the .NET core runtime can be listed by running `dotnet --info`, which should produce output in the form of \r\n\r\n```\r\n.NET Command Line Tools (2.0.2)\r\n\r\nProduct Information:\r\n Version:            2.0.2\r\n Commit SHA-1 hash:  a04b4bf512\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.16299\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.0.2\\\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.0\r\n  Build    : e8b8861ac7faf042c87a5c2f9f2d04c98b69f28d\r\n\r\n```\r\n\r\nAs this only displays the latest version of the runtime installed it may hide the fact that you have a vulnerable runtime. A complete list of runtimes can be discovered by performing a directory listing in the install root directories. By default these are\r\n\r\n| Operating System          | Location          |\r\n|---------------------------|-------------------|\r\n| macOS | /usr/local/share/dotnet/shared/Microsoft.NETCore.App/       |\r\n| Supported Linux platforms | /usr/share/dotnet/shared/Microsoft.NETCore.App/       |\r\n\r\nEach runtime version is installed in its own directory, where the directory name is the version number. If you do not have a directory for 1.0.8, 1.1.5 or 2.0.1 then any applications targeting .NET Core will be vulnerable.\r\n\r\n#### How do I fix my affected application?\r\nApplications can be fixed by installing the latest runtimes or SDKs. Typically application servers only install a runtime package, developer machines install SDKs. Installers for the runtimes can be downloaded from the [Runtime and SDK download archive](https://github.com/dotnet/core/blob/master/release-notes/download-archive.md). Version 1.1.5 will also install version 1.0.8 of the runtime.\r\n\r\nIf you have built a [self-contained application](https://docs.microsoft.com/en-us/dotnet/core/deploying/#self-contained-deployments-scd) you must install the new runtime and SDK, recompile your application and redeploy.\r\n\r\n## Other Information\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including Terms and Conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue where you can ask questions.\r\n\r\n### What if the update breaks my application?\r\nAn application can be pinned to a previous version of the runtime by editing the [application.runtime.config](https://github.com/dotnet/cli/blob/ede74b6be1406ba0c086b6d5fc1a5d4eacff1f01/Documentation/specs/runtime-configuration-file.md#appnameruntimeconfigjson) file for that application and editing the framework version and setting `rollForward` to `false`. This should be treated as a temporary measure and the application updated to work with the patched versions of the framework.\r\n\r\nNote that this file is optional, you may need to create it for each application alongside the executable.\r\n\r\n### Acknowledgments\r\n\r\nThanks to Bachraty Gergely for reporting this issue.\r\n\r\n### External Links\r\n\r\n[CVE-2017-11770](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-8585)\r\n\r\n### Revisions\r\n\r\nV1.0 (Nov 14, 2017): Advisory published.\r\n\r\n_Version 1.0_\r\n_Last Updated 2017-11-14_"},{"Id":"6853282986","Type":"IssuesEvent","CreatedAt":"2017-11-14T15:23:02","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/48","RelatedDescription":"Closed issue \"Reserved\" (#48) at dotnet/announcements","RelatedBody":"_This issue has been reserved for a potential future security announcement._\r\n\r\nThis does **not** mean a security advisory is coming soon, it simply gives us the ability to predict the issue number that will be used in the future.\r\n"},{"Id":"6853280485","Type":"IssuesEvent","CreatedAt":"2017-11-14T15:22:35","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/47","RelatedDescription":"Closed issue \"Reserved\" (#47) at dotnet/announcements","RelatedBody":"_This issue has been reserved for a potential future security announcement._\r\n\r\nThis does **not** mean a security advisory is coming soon, it simply gives us the ability to predict the issue number that will be used in the future.\r\n\r\n"},{"Id":"6853280272","Type":"IssuesEvent","CreatedAt":"2017-11-14T15:22:33","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/47","RelatedDescription":"Opened issue \"Reserved\" (#47) at dotnet/announcements","RelatedBody":"_This issue has been reserved for a potential future security announcement._\r\n\r\nThis does **not** mean a security advisory is coming soon, it simply gives us the ability to predict the issue number that will be used in the future.\r\n\r\n"},{"Id":"6853278942","Type":"IssuesEvent","CreatedAt":"2017-11-14T15:22:20","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/46","RelatedDescription":"Closed issue \"Reserved\" (#46) at dotnet/announcements","RelatedBody":"_This issue has been reserved for a potential future security announcement._\r\n\r\nThis does **not** mean a security advisory is coming soon, it simply gives us the ability to predict the issue number that will be used in the future.\r\n"},{"Id":"6853278548","Type":"IssuesEvent","CreatedAt":"2017-11-14T15:22:15","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/46","RelatedDescription":"Opened issue \"Reserved\" (#46) at dotnet/announcements","RelatedBody":"_This issue has been reserved for a potential future security announcement._\r\n\r\nThis does **not** mean a security advisory is coming soon, it simply gives us the ability to predict the issue number that will be used in the future.\r\n"},{"Id":"6853276874","Type":"IssuesEvent","CreatedAt":"2017-11-14T15:21:58","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/45","RelatedDescription":"Closed issue \"Reserved\" (#45) at dotnet/announcements","RelatedBody":"_This issue has been reserved for a potential future security announcement._\r\n\r\nThis does **not** mean a security advisory is coming soon, it simply gives us the ability to predict the issue number that will be used in the future.\r\n"},{"Id":"6853274106","Type":"IssuesEvent","CreatedAt":"2017-11-14T15:21:28","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/44","RelatedDescription":"Closed issue \"Reserved\" (#44) at dotnet/announcements","RelatedBody":"_This issue has been reserved for a potential future security announcement._\r\n\r\nThis does **not** mean a security advisory is coming soon, it simply gives us the ability to predict the issue number that will be used in the future.\r\n"},{"Id":"6853272527","Type":"IssuesEvent","CreatedAt":"2017-11-14T15:21:12","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/44","RelatedDescription":"Opened issue \"Reserved\" (#44) at dotnet/announcements","RelatedBody":"_This issue has been reserved for a potential future security announcement._\r\n\r\nThis does **not** mean a security advisory is coming soon, it simply gives us the ability to predict the issue number that will be used in the future.\r\n"}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"6902961641","Type":"PullRequestEvent","CreatedAt":"2017-11-26T04:43:46","Actor":"justinvp","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/15221","RelatedDescription":"Opened pull request \"Remove some dead Unix code\" (#15221) at dotnet/coreclr","RelatedBody":"`Environment.ExpandEnvironmentVariables` is only used by `RegistryKey` inside corelib, which is only present on Windows. There's no need for a Unix implementation.\r\n\r\nhttps://github.com/dotnet/coreclr/blob/8c74b3bcd691d842a891bc55909a18a8b1e53200/src/mscorlib/src/Microsoft/Win32/RegistryKey.cs#L649"},{"Id":"6902833718","Type":"PullRequestEvent","CreatedAt":"2017-11-26T02:32:17","Actor":"stephentoub","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/15218","RelatedDescription":"Merged pull request \"Use string.Create in BitConverter.ToString(byte[])\" (#15218) at dotnet/coreclr","RelatedBody":"Avoids unnecessary allocations and copying, and reduces the amount of unsafe code.\r\n\r\nBenchmark:\r\n\r\n```c#\r\nusing System;\r\nusing System.Diagnostics;\r\nusing System.Text;\r\nusing BenchmarkDotNet.Attributes;\r\nusing BenchmarkDotNet.Attributes.Jobs;\r\nusing BenchmarkDotNet.Running;\r\n\r\n[MemoryDiagnoser]\r\n[InProcess]\r\npublic class Program\r\n{\r\n    public static void Main() => BenchmarkRunner.Run<Program>();\r\n\r\n    const string SmallData = \"Lorem ipsum dolor sit amet\";\r\n    const string LargeData =\r\n        \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do \" +\r\n        \"eiusmod tempor incididunt ut labore et dolore magna aliqua. \" +\r\n        \"Ipsum suspendisse ultrices gravida dictum fusce.\";\r\n    public static readonly byte[] s_smallData = Encoding.UTF8.GetBytes(SmallData);\r\n    public static readonly byte[] s_largeData = Encoding.UTF8.GetBytes(LargeData);\r\n\r\n    [Benchmark]\r\n    public string BeforeSmall() => OldConverter.ToString(s_smallData);\r\n\r\n    [Benchmark]\r\n    public string AfterSmall() => NewConverter.ToString(s_smallData);\r\n\r\n    [Benchmark]\r\n    public string BeforeLarge() => OldConverter.ToString(s_largeData);\r\n\r\n    [Benchmark]\r\n    public string AfterLarge() => NewConverter.ToString(s_largeData);\r\n}\r\n```\r\n\r\nResults:\r\n\r\n```\r\nBenchmarkDotNet=v0.10.10, OS=Windows 10 Redstone 2 [1703, Creators Update] (10.0.15063.726)\r\nProcessor=Intel Core i7-6700K CPU 4.00GHz (Skylake), ProcessorCount=2\r\nFrequency=3914037 Hz, Resolution=255.4907 ns, Timer=TSC\r\n.NET Core SDK=2.2.0-preview1-007558\r\n  [Host] : .NET Core 2.1.0-preview1-25915-01 (Framework 4.6.25915.02), 64bit RyuJIT\r\n\r\nJob=InProcess  Toolchain=InProcessToolchain\r\n\r\n      Method |      Mean |     Error |    StdDev |  Gen 0 | Allocated |\r\n------------ |----------:|----------:|----------:|-------:|----------:|\r\n BeforeSmall |  80.10 ns | 0.4675 ns | 0.4373 ns | 0.0437 |     184 B |\r\n  AfterSmall |  77.63 ns | 0.2555 ns | 0.1995 ns | 0.0437 |     184 B |\r\n BeforeLarge | 464.79 ns | 1.6609 ns | 1.3870 ns | 0.5031 |    2112 B |\r\n  AfterLarge | 457.05 ns | 2.2694 ns | 2.1228 ns | 0.2513 |    1056 B |\r\n```"},{"Id":"6902809174","Type":"PullRequestEvent","CreatedAt":"2017-11-26T02:07:45","Actor":"jashook","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/15220","RelatedDescription":"Merged pull request \"Fix untar location\" (#15220) at dotnet/coreclr","RelatedBody":""},{"Id":"6902809055","Type":"PullRequestEvent","CreatedAt":"2017-11-26T02:07:38","Actor":"jashook","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/15220","RelatedDescription":"Opened pull request \"Fix untar location\" (#15220) at dotnet/coreclr","RelatedBody":""},{"Id":"6902770803","Type":"PullRequestEvent","CreatedAt":"2017-11-26T01:28:18","Actor":"dotnet-maestro-bot","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/15219","RelatedDescription":"Opened pull request \"Update CoreClr to preview1-25926-01 (master)\" (#15219) at dotnet/coreclr","RelatedBody":"/cc @dotnet/coreclr-auto-update-notify"},{"Id":"6902706023","Type":"PullRequestEvent","CreatedAt":"2017-11-26T00:23:01","Actor":"justinvp","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/15218","RelatedDescription":"Opened pull request \"Use string.Create in BitConverter.ToString(byte[])\" (#15218) at dotnet/coreclr","RelatedBody":"Avoids unnecessary allocations and copying, and reduces the amount of unsafe code.\r\n\r\nBenchmark:\r\n\r\n```c#\r\nusing System;\r\nusing System.Diagnostics;\r\nusing System.Text;\r\nusing BenchmarkDotNet.Attributes;\r\nusing BenchmarkDotNet.Attributes.Jobs;\r\nusing BenchmarkDotNet.Running;\r\n\r\n[MemoryDiagnoser]\r\n[InProcess]\r\npublic class Program\r\n{\r\n    public static void Main() => BenchmarkRunner.Run<Program>();\r\n\r\n    const string SmallData = \"Lorem ipsum dolor sit amet\";\r\n    const string LargeData =\r\n        \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do \" +\r\n        \"eiusmod tempor incididunt ut labore et dolore magna aliqua. \" +\r\n        \"Ipsum suspendisse ultrices gravida dictum fusce.\";\r\n    public static readonly byte[] s_smallData = Encoding.UTF8.GetBytes(SmallData);\r\n    public static readonly byte[] s_largeData = Encoding.UTF8.GetBytes(LargeData);\r\n\r\n    [Benchmark]\r\n    public string BeforeSmall() => OldConverter.ToString(s_smallData);\r\n\r\n    [Benchmark]\r\n    public string AfterSmall() => NewConverter.ToString(s_smallData);\r\n\r\n    [Benchmark]\r\n    public string BeforeLarge() => OldConverter.ToString(s_largeData);\r\n\r\n    [Benchmark]\r\n    public string AfterLarge() => NewConverter.ToString(s_largeData);\r\n}\r\n```\r\n\r\nResults:\r\n\r\n```\r\nBenchmarkDotNet=v0.10.10, OS=Windows 10 Redstone 2 [1703, Creators Update] (10.0.15063.726)\r\nProcessor=Intel Core i7-6700K CPU 4.00GHz (Skylake), ProcessorCount=2\r\nFrequency=3914037 Hz, Resolution=255.4907 ns, Timer=TSC\r\n.NET Core SDK=2.2.0-preview1-007558\r\n  [Host] : .NET Core 2.1.0-preview1-25915-01 (Framework 4.6.25915.02), 64bit RyuJIT\r\n\r\nJob=InProcess  Toolchain=InProcessToolchain\r\n\r\n      Method |      Mean |     Error |    StdDev |  Gen 0 | Allocated |\r\n------------ |----------:|----------:|----------:|-------:|----------:|\r\n BeforeSmall |  80.10 ns | 0.4675 ns | 0.4373 ns | 0.0437 |     184 B |\r\n  AfterSmall |  77.63 ns | 0.2555 ns | 0.1995 ns | 0.0437 |     184 B |\r\n BeforeLarge | 464.79 ns | 1.6609 ns | 1.3870 ns | 0.5031 |    2112 B |\r\n  AfterLarge | 457.05 ns | 2.2694 ns | 2.1228 ns | 0.2513 |    1056 B |\r\n```"},{"Id":"6902210329","Type":"PullRequestEvent","CreatedAt":"2017-11-25T17:43:21","Actor":"BruceForstall","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/15217","RelatedDescription":"Opened pull request \"Fix Powershell error\" (#15217) at dotnet/coreclr","RelatedBody":"Don't put `-NoProfile` in quotes.\r\n\r\nWhen in quotes, I see this error:\r\n```\r\n-NoProfile : The term '-NoProfile' is not recognized as the name of a cmdlet, function, script file, or operable program. Check the spelling of the name, or if a path was included, verify\r\nthat the path is correct and try again.\r\nAt line:1 char:1\r\n+ -NoProfile Get-ChildItem -path c:\\gh\\coreclr\\tests\\..\\bin\\tests\\Windo ...\r\n+ ~~~~~~~~~~\r\n    + CategoryInfo          : ObjectNotFound: (-NoProfile:String) [], CommandNotFoundException\r\n    + FullyQualifiedErrorId : CommandNotFoundException\r\n```\r\n"},{"Id":"6902197735","Type":"IssuesEvent","CreatedAt":"2017-11-25T17:34:07","Actor":"Rattenkrieg","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/15216","RelatedDescription":"Opened issue \"Rationale behind EEHashTableBase implementation\" (#15216) at dotnet/coreclr","RelatedBody":"I've used eehash as basis for some internals in #15135 and here are listed some questionable parts of it. Do not consider it as criticism, I'm just curious of trade-offs which .net team was challenged.\r\nAlso there is [comment](https://github.com/dotnet/coreclr/blob/master/src/vm/eehash.h#L10) in `eehash.h` that might be treaten as evidence of \"not so thorough implementation\":\r\n> // Provides hash table functionality needed in the EE - intended to be replaced later with better\r\n// algorithms, but which have the same interface.\r\n\r\nI'm evaluating implementation from the way it is used in string interning routines - [src/vm/stringliteralmap.h](https://github.com/dotnet/coreclr/blob/master/src/vm/stringliteralmap.h) and friends.\r\n\r\n - Why the load factor is as big as 2? \r\nhttps://github.com/dotnet/coreclr/blob/master/src/vm/eehash.inl#L249\r\n - Why length is increased by multiplying by 4 and hence business of keeping `hash mod size` coprime with length is left to hash function implementation? \r\nhttps://github.com/dotnet/coreclr/blob/master/src/vm/eehash.inl#L673\r\n - Specific to strings, i.e `stringliteralmap` - were alternative data structs considered? For example HAT-trie.\r\n"},{"Id":"6902124960","Type":"PullRequestEvent","CreatedAt":"2017-11-25T16:42:22","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/15210","RelatedDescription":"Merged pull request \"Update CoreClr, CoreFx, PgoData to preview1-25925-02, preview1-25925-02, master-20171125-0056, respectively (master)\" (#15210) at dotnet/coreclr","RelatedBody":"/cc @dotnet/coreclr-auto-update-notify"},{"Id":"6902124120","Type":"PullRequestEvent","CreatedAt":"2017-11-25T16:41:57","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/15213","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/corefx\" (#15213) at dotnet/coreclr","RelatedBody":"This PR contains mirrored changes from dotnet/corefx\n\n\n**Please REBASE this PR when merging**"}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"6902732653","Type":"PullRequestEvent","CreatedAt":"2017-11-26T00:50:14","Actor":"peterhuene","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/8100","RelatedDescription":"Opened pull request \"Make --no-build imply --no-restore for test command.\" (#8100) at dotnet/cli","RelatedBody":"This commit makes the `--no-build` option for the test command\r\nautomatically imply `--no-restore`.\r\n\r\nFixes issue #7472.\r\n"},{"Id":"6902328004","Type":"IssuesEvent","CreatedAt":"2017-11-25T19:12:51","Actor":"Murtain","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/8099","RelatedDescription":"Opened issue \"Docker CI build fails due to Service failed to build: COPY failed\" (#8099) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\n\r\nThis is happening on Gitlab CI Runners (using their Docker shared runners - I'm using Gitlab for private projects and Docker  support):\r\n\r\n```\r\ndocker ps\r\nCONTAINER ID        IMAGE                     COMMAND             CREATED             STATUS                  PORTS                                                               NAMES\r\n38db8a517610        gitlab/gitlab-ce:latest   \"/assets/wrapper\"   35 hours ago        Up 23 hours (healthy)   0.0.0.0:2222->22/tcp, 0.0.0.0:8080->80/tcp, 0.0.0.0:8443->443/tcp   gitlab\r\n\r\n```\r\n\r\n## Expected  behavior\r\nI expected the project to build /publish normally.\r\n## Actual behavior\r\n\r\n```\r\nService 'murtain.oauth2' failed to build: COPY failed: stat /var/lib/docker/tmp/docker-builder211242972/obj/Docker/publish: no such file or directory\r\nERROR: Job failed: exit code 1\r\n```\r\n\r\n## Environment data\r\n\r\n`docker-compose.ci.build.yml`\r\n```\r\nversion: '3'\r\n\r\nservices:\r\n  ci-build:\r\n    image: microsoft/aspnetcore-build:2.0\r\n    volumes:\r\n      - .:/src\r\n    working_dir: /src\r\n    command: /bin/bash -c \"dotnet restore ./Murtain.OAuth2.sln && dotnet publish ./Murtain.OAuth2.sln -c Release -o ./obj/Docker/publish\"\r\n```\r\n`Dockerfile `\r\n\r\n```\r\nFROM microsoft/aspnetcore:2.0\r\nARG source\r\nWORKDIR /app\r\nEXPOSE 80\r\nCOPY ${source:-obj/Docker/publish} .\r\nENTRYPOINT [\"dotnet\", \"Murtain.OAuth2.dll\"]\r\n\r\n```\r\n\r\n`gitlab.ci.yml`\r\n\r\n```\r\nimage: tmaier/docker-compose\r\n\r\nstages:\r\n- build\r\n- deploy\r\n\r\nbefore_script:\r\n- docker --version\r\n- docker-compose --version\r\n\r\nbuild:\r\n  stage: build\r\n  script:\r\n    - ls\r\n    - cd Murtain.OAuth2\r\n    - ls\r\n    - docker-compose -f docker-compose.ci.build.yml up\r\n    \r\n  \r\ndeploy:\r\n  stage: deploy\r\n  script:\r\n    - ls\r\n    - cd Murtain.OAuth2\r\n    - ls\r\n    - dotnet info\r\n    - docker-compose -f docker-compose.yml up\r\n  only:\r\n    - master\r\n\r\n```\r\n\r\njob-build :\r\n\r\n```\r\nRunning with gitlab-runner 10.2.0 (0a75cdd1)\r\n  on gitlab runner (812d076a)\r\nUsing Docker executor with image tmaier/docker-compose ...\r\nUsing docker image sha256:ead09bd5e3f0fcb60614d4eb5e6dcd75da8274e5c86e6b63954956315b2f8a15 for predefined container...\r\nPulling docker image tmaier/docker-compose ...\r\nUsing docker image tmaier/docker-compose ID=sha256:c58b8bbe54fb1e8c0181e9669474a3598788e61ccf12f12c66aca44cfc6d95f0 for build container...\r\nRunning on runner-812d076a-project-3-concurrent-0 via izl88djldhqpnez...\r\nFetching changes...\r\nHEAD is now at 5976156 Update .gitlab-ci.yml\r\nFrom http://git.x-dva.com/dev/Murtain.OAuth2\r\n   5976156..2003196  master     -> origin/master\r\nChecking out 20031962 as master...\r\nSkipping Git submodules setup\r\n$ docker --version\r\nDocker version 17.11.0-ce, build 1caf76c\r\n$ docker-compose --version\r\ndocker-compose version 1.17.1, build 6d101fb\r\n$ ls\r\nMurtain.OAuth2\r\n$ cd Murtain.OAuth2\r\n$ ls\r\nMurtain.OAuth2\r\nMurtain.OAuth2.sln\r\ndocker-compose.ci.build.yml\r\ndocker-compose.dcproj\r\ndocker-compose.override.yml\r\ndocker-compose.yml\r\n$ docker-compose -f docker-compose.ci.build.yml up\r\nStarting murtainoauth2_ci-build_1 ... \r\nStarting murtainoauth2_ci-build_1\r\n\r\nStarting murtainoauth2_ci-build_1 ... done\r\nAttaching to murtainoauth2_ci-build_1\r\nci-build_1  | MSBUILD : error MSB1009: Project file does not exist.\r\nci-build_1  | Switch: ./Murtain.OAuth2.sln\r\nmurtainoauth2_ci-build_1 exited with code 1\r\nJob succeeded\r\n```\r\njob-deploy:\r\n```\r\nRunning with gitlab-runner 10.2.0 (0a75cdd1)\r\n  on gitlab runner (812d076a)\r\nUsing Docker executor with image tmaier/docker-compose ...\r\nUsing docker image sha256:ead09bd5e3f0fcb60614d4eb5e6dcd75da8274e5c86e6b63954956315b2f8a15 for predefined container...\r\nPulling docker image tmaier/docker-compose ...\r\nUsing docker image tmaier/docker-compose ID=sha256:c58b8bbe54fb1e8c0181e9669474a3598788e61ccf12f12c66aca44cfc6d95f0 for build container...\r\nRunning on runner-812d076a-project-3-concurrent-0 via izl88djldhqpnez...\r\nFetching changes...\r\nHEAD is now at 2003196 Update .gitlab-ci.yml\r\nChecking out 20031962 as master...\r\nSkipping Git submodules setup\r\n$ docker --version\r\nDocker version 17.11.0-ce, build 1caf76c\r\n$ docker-compose --version\r\ndocker-compose version 1.17.1, build 6d101fb\r\n$ ls\r\nMurtain.OAuth2\r\n$ cd Murtain.OAuth2\r\n$ ls\r\nMurtain.OAuth2\r\nMurtain.OAuth2.sln\r\ndocker-compose.ci.build.yml\r\ndocker-compose.dcproj\r\ndocker-compose.override.yml\r\ndocker-compose.yml\r\n$ docker-compose -f docker-compose.yml up\r\nBuilding murtain.oauth2\r\nStep 1/6 : FROM microsoft/aspnetcore:2.0\r\n ---> 01d033b55240\r\nStep 2/6 : ARG source\r\n ---> Using cache\r\n ---> 3ef5453f13f6\r\nStep 3/6 : WORKDIR /app\r\n ---> Using cache\r\n ---> 985696166e6f\r\nStep 4/6 : EXPOSE 80\r\n ---> Using cache\r\n ---> 5c63d0729cc7\r\nStep 5/6 : COPY ${source:-obj/Docker/publish} .\r\nService 'murtain.oauth2' failed to build: COPY failed: stat /var/lib/docker/tmp/docker-builder211242972/obj/Docker/publish: no such file or directory\r\nERROR: Job failed: exit code 1\r\n```\r\n\r\n\r\n"},{"Id":"6902246483","Type":"PullRequestEvent","CreatedAt":"2017-11-25T18:10:28","Actor":"dotnet-bot","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/8098","RelatedDescription":"Opened pull request \"Update CoreSetup to preview1-25925-01 (master)\" (#8098) at dotnet/cli","RelatedBody":"/cc @dotnet/dotnet-cli"},{"Id":"6901237029","Type":"PullRequestEvent","CreatedAt":"2017-11-25T03:53:44","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/pull/8096","RelatedDescription":"Closed pull request \"Merge release/15.5 to master\" (#8096) at dotnet/cli","RelatedBody":"\nThis is an automatically generated pull request from release/15.5 into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/15.5-to-master-20171124-080044\ngit reset --hard upstream/master\ngit merge upstream/release/15.5\n# Fix merge conflicts\ngit commit\ngit push merges/release/15.5-to-master-20171124-080044 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"6901236449","Type":"PullRequestEvent","CreatedAt":"2017-11-25T03:53:05","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/8095","RelatedDescription":"Merged pull request \"Merge release/2.0.0 to dev/release/2.0\" (#8095) at dotnet/cli","RelatedBody":"\nThis is an automatically generated pull request from release/2.0.0 into dev/release/2.0.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.0.0-to-dev/release/2.0-20171124-080042\ngit reset --hard upstream/dev/release/2.0\ngit merge upstream/release/2.0.0\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.0.0-to-dev/release/2.0-20171124-080042 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"6901236081","Type":"PullRequestEvent","CreatedAt":"2017-11-25T03:52:42","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/8094","RelatedDescription":"Merged pull request \"Merge release/2.0.0 to release/15.5\" (#8094) at dotnet/cli","RelatedBody":"\nThis is an automatically generated pull request from release/2.0.0 into release/15.5.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.0.0-to-release/15.5-20171124-080040\ngit reset --hard upstream/release/15.5\ngit merge upstream/release/2.0.0\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.0.0-to-release/15.5-20171124-080040 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"6901097469","Type":"PullRequestEvent","CreatedAt":"2017-11-25T01:38:21","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/8097","RelatedDescription":"Merged pull request \"Update CoreSetup to preview1-25924-02 (master)\" (#8097) at dotnet/cli","RelatedBody":"/cc @dotnet/dotnet-cli"},{"Id":"6900516245","Type":"PullRequestEvent","CreatedAt":"2017-11-24T19:20:07","Actor":"dotnet-bot","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/8097","RelatedDescription":"Opened pull request \"Update CoreSetup to preview1-25924-01 (master)\" (#8097) at dotnet/cli","RelatedBody":"/cc @dotnet/dotnet-cli"}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"6893875796","Type":"IssuesEvent","CreatedAt":"2017-11-23T07:25:10","Actor":"WalterEbbers","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/575","RelatedDescription":"Closed issue \".NET Standard 2.0 / .NET Framework 4.6.1 Could not load file or assembly 'System.ServiceModel, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'. The system cannot find the file specified.\" (#575) at dotnet/standard","RelatedBody":"Hi,\r\nI have a .NET Standard 2.0 library which references a few NET 4.6.1 libraries. \r\nThe .NET Standard library will be used in a .NET Core web application. \r\nThe .NET 4.6.1 Framework uses library 'System.ServiceModel.dll' for WCF calls.\r\n\r\nI try to do the following. \r\nMy .NET Core webapp goes to the .NET Standard library which calls something from my .NET Framework 4.6.1 project. But at that moment i get the following error: \r\n'Could not load file or assembly 'System.ServiceModel, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'. The system cannot find the file specified.'\r\n\r\nThe 'System.ServiceModel.dll' is referenced as a assemblyreference in the .NET Standard project and the .NET Core webapp. \r\n\r\nI really thought that this would work but sadly it doesn't. Is this a issue with the .NET libraries?\r\nDo i need to change things in my .NET Standard / Core project?\r\n\r\nThnx in advance :) \r\n\r\nWalter\r\n\r\n\r\n\r\n"},{"Id":"6891923193","Type":"IssuesEvent","CreatedAt":"2017-11-22T18:51:46","Actor":"mb236","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/591","RelatedDescription":"Opened issue \".NET Standard 2 Library missing assembly error\" (#591) at dotnet/standard","RelatedBody":"I'm currently working on migrating a PCL to a .NET Standard 2.0 Library. After I have readded all NuGet dependencies I get the following error:\r\n`The type 'IReflectable' is defined in an assembly that is not referenced. You must add a reference to assembly 'System.Reflection, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51'`\r\n\r\nThe strange part about it is that i get this error on exactly four lines in the project. If I comment these lines out, the errors are gone and compilation is successful. Is there any fix for this problem?"}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"6902890393","Type":"PullRequestEvent","CreatedAt":"2017-11-26T03:29:30","Actor":"JonHanna","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/25504","RelatedDescription":"Opened pull request \"Stop Microsoft.CSharp getting confused by varargs overloads to callable members\" (#25504) at dotnet/corefx","RelatedBody":"* Include calling convention in `MemberInfo` equality checks\r\n\r\nPrevents the binder from thinking a callable method is a varargs (and hence uncallable) method it has already seen, and not recording it.\r\n\r\nFixes #25503\r\n\r\n* Record whether a constructor is varargs.\r\n\r\nConstructors were assumed to not be varargs, so a varargs constructor could be erroneously called.\r\n\r\n* Remove vararg handling from `AdjustCallArgumentsForParams`\r\n\r\nWe will never get this far with a vararg method.\r\n"},{"Id":"6902799060","Type":"IssuesEvent","CreatedAt":"2017-11-26T01:57:14","Actor":"JonHanna","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/25503","RelatedDescription":"Opened issue \"Presence of overloads with __arglist can prevent dynamic binding finding correct overload\" (#25503) at dotnet/corefx","RelatedBody":"Given\r\n\r\n```C#\r\npublic class HasVarargs\r\n{\r\n\tpublic int Binary(int i, int j, __arglist) => 0;\r\n\r\n\tpublic int Binary(int i, int j) => i + j; // This should be fine with dynamic\r\n\r\n\tpublic int Binary(int i, __arglist) => 0;\r\n}\r\n```\r\n\r\nThen the code:\r\n```C#\r\ndynamic d = new HasVarargs();\r\nConsole.WriteLine(d.Binary(3, 4));\r\n```\r\n\r\nCan throw a `RuntimeBinderException` with a message of `The best overloaded method match for 'UserQuery.HasVarargs.Binary(int, __arglist, ...)' has some invalid arguments` or of `No overload for method 'Binary' takes '2' arguments` or perhaps work, depending on the order the methods are put in the class' source (I would guess, affecting the order reflection finds them in). "},{"Id":"6902770097","Type":"PullRequestEvent","CreatedAt":"2017-11-26T01:27:38","Actor":"dotnet-maestro-bot","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/25502","RelatedDescription":"Opened pull request \"Update CoreClr, CoreSetup to preview1-25926-01, preview1-25925-02, respectively (master)\" (#25502) at dotnet/corefx","RelatedBody":""},{"Id":"6902641209","Type":"PullRequestEvent","CreatedAt":"2017-11-25T23:22:09","Actor":"JonHanna","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/25501","RelatedDescription":"Opened pull request \"Correctly handle coalesce linq expressions that widen the rhs operand\" (#25501) at dotnet/corefx","RelatedBody":"Fixes #25500"},{"Id":"6902639276","Type":"IssuesEvent","CreatedAt":"2017-11-25T23:20:32","Actor":"JonHanna","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/25500","RelatedDescription":"Opened issue \"S.L.Expressions interpreter fails to widen rhs of coalese expressions\" (#25500) at dotnet/corefx","RelatedBody":"With a coalesce expression where the left hand side is wider than the right hand side (ignoring that the left may be nullable and the right not), then the right hand side should be widened to the value of the node of the two (that is, the wider of the two if both are nullable, the non-nullable form of the wider of the two otherwise).\r\n\r\nThe compiler handles this fine, but the interpreter will throw `InvalidCastException` if the left hand operand had been null.\r\n\r\nRepro:\r\n\r\n```C#\r\nExpression.Lambda<Func<long>>(\r\n\tExpression.Coalesce(Expression.Constant(null, typeof(long?)), Expression.Constant(2))\r\n\t).Compile(true)();"},{"Id":"6902612000","Type":"IssuesEvent","CreatedAt":"2017-11-25T22:57:32","Actor":"Sharpiro","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/25499","RelatedDescription":"Opened issue \"ReadOnlySpan<T> debug view error\" (#25499) at dotnet/corefx","RelatedBody":"VS 15.5.0 Preview 4.0\r\nSystem.Memory 4.5.0-preview1-25925-02\r\n\r\nThe error occurs when viewing debug information of the \"readonlySpan\" variable.\r\n\r\nrepro:\r\n```\r\nvar stringData = \"hello Steve\";\r\nvar readonlySpan = stringData.AsReadOnlySpan();\r\n```\r\n\r\nerror:\r\n```\r\nSpecified cast is not valid.\r\n\r\nat System.SpanDebugView`1[[System.Char, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]]..ctor(ReadOnlySpan`1 collection)\r\n```"},{"Id":"6902404264","Type":"PullRequestEvent","CreatedAt":"2017-11-25T20:11:38","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/25494","RelatedDescription":"Merged pull request \"Update CoreClr, CoreFx to preview1-25925-02, preview1-25925-02, respectively (master)\" (#25494) at dotnet/corefx","RelatedBody":""},{"Id":"6902293717","Type":"IssuesEvent","CreatedAt":"2017-11-25T18:45:53","Actor":"maryamariyan","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/25498","RelatedDescription":"Opened issue \"Porting remaining tests to System.ComponentModel.Composition\" (#25498) at dotnet/corefx","RelatedBody":"I'm adding the System.ComponentModel.Composition in PR multiple steps.\r\nThis issue tracks the failing tests for this project."},{"Id":"6902176914","Type":"IssuesEvent","CreatedAt":"2017-11-25T17:18:55","Actor":"MkazemAkhgary","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/25496","RelatedDescription":"Closed issue \"InvalidCastException(Type, Type) with appropriate message\" (#25496) at dotnet/corefx","RelatedBody":"for lazy developers like me, id like to have `InvalidCastException(Type, Type)` that gives exact runtime error message when trying to cast from `T` to `U`.\r\n\r\nso when I throw \r\n\r\n     throw new InvalidCastException(typeof(int), typeof(string));\r\n\r\nI should get this message (something like this).\r\n\r\n> can not cast from System.Int32 to System.String\r\n\r\ncurrently I have to do the formatting and writing all message by myself\r\n\r\nWhy am I trying to throw invalid cast exception?\r\n\r\nbecause appreantly I cant explicitly cast from generic type `T` to `U` where both are constrained to one class. so I'm forced to do safe cast, and in case its null, throw appropriate exception (by contract `T` is never null so if safe cast results in null that's definitely cast failure)."},{"Id":"6902013386","Type":"IssuesEvent","CreatedAt":"2017-11-25T15:25:24","Actor":"ohadschn","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/25497","RelatedDescription":"Opened issue \"URI thread safety documentation\" (#25497) at dotnet/corefx","RelatedBody":"The URI class is immutable, and glancing at the [code](https://github.com/dotnet/corefx/blob/master/src/System.Private.Uri/src/System/Uri.cs) it seems as though [thread-safety](https://github.com/dotnet/corefx/blob/c4ebdbe5f5fbf53ec73b2c2e16f610387945151f/src/System.Private.Uri/src/System/Uri.cs#L128) is considered. However, the [URI docs](https://msdn.microsoft.com/en-us/library/system.uri(v=vs.110).aspx) say _\"Any instance members are not guaranteed to be thread safe\"_. \r\n\r\nIs that really the case? If not, and the class is thread-safe, the docs should be updated."},{"Id":"6902000098","Type":"IssuesEvent","CreatedAt":"2017-11-25T15:15:33","Actor":"MkazemAkhgary","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/25496","RelatedDescription":"Opened issue \"InvalidCastException(Type, Type) with appropriate message\" (#25496) at dotnet/corefx","RelatedBody":"for lazy developers like me, id like to have `InvalidCastException(Type, Type)` that gives exact runtime error message when trying to cast from `T` to `U`.\r\n\r\nso when I throw \r\n\r\n     throw new InvalidCastException(typeof(int), typeof(string));\r\n\r\nI should get this message (something like this).\r\n\r\n> can not cast from System.Int32 to System.String\r\n\r\ncurrently I have to do the formatting and writing all message by myself\r\n\r\nWhy am I trying to throw invalid cast exception?\r\n\r\nbecause appreantly I cant explicitly cast from generic type `T` to `U` where both are constrained to one class. so I'm forced to do safe cast, and in case its null, throw appropriate exception (by contract `T` is never null so if safe cast results in null that's definitely cast failure)."}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"6902730514","Type":"PullRequestEvent","CreatedAt":"2017-11-26T00:48:13","Actor":"CyrusNajmabadi","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/23377","RelatedDescription":"Opened pull request \"Batch up and flatten diagnostic updates.\" (#23377) at dotnet/roslyn","RelatedBody":"In response to https://github.com/dotnet/roslyn/pull/22920#issuecomment-346950158\r\n\r\nThis is a tweak to the diagnostic taggers to improve how they respond to a flood of notifications from the underlying diagnostic services.  There are a few improvements as part of this PR.  \r\n\r\n1. We batch up diagnostic notifications over a 50ms window and process them all at once, instead of enqueing and processing each notification on the UI thread individually.\r\n2. Because we're batching, we can do a lot of preprocessing of the notifications to throw out information that has been superceded.  For example, if we get a notification that we're actually removing all the diagnostics for a provider, we can just ignore all previous diagnostic-creates that we haven't processed yet.  Also, any more diagnostic creations we hear about will supercede previous diagnostic creations for that provider.  \r\n"},{"Id":"6902438771","Type":"PullRequestEvent","CreatedAt":"2017-11-25T20:38:22","Actor":"tmat","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/23376","RelatedDescription":"Opened pull request \"Wrap completion providers logic in exception filters\" (#23376) at dotnet/roslyn","RelatedBody":"Report NFW and recover on unexpected exception from completion providers."},{"Id":"6902171758","Type":"IssuesEvent","CreatedAt":"2017-11-25T17:15:14","Actor":"sharwell","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/22786","RelatedDescription":"Closed issue \"Ctrl+click GTD is too aggressive on string literals\" (#22786) at dotnet/roslyn","RelatedBody":"From: Daofa Li \r\nBasically C# identifies all literals as clickable symbols. The worst case is where the string literal is a url. Ctrl+click on the url may open the string metadata in editor as well as open the url in external browser. \r\n\r\nCan this be improved not to return literals as navigable symbols? The current behavior doesn’t make much sense to me as a user.\r\n![image](https://user-images.githubusercontent.com/12449387/31809648-8172baee-b52d-11e7-96c8-11f9b6a9f594.png)\r\n"},{"Id":"6902014551","Type":"IssuesEvent","CreatedAt":"2017-11-25T15:26:16","Actor":"alrz","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/23375","RelatedDescription":"Opened issue \"Offer 'use pattern-matching' quick action in more places\" (#23375) at dotnet/roslyn","RelatedBody":"From https://github.com/dotnet/roslyn/pull/20240#discussion_r149683893\r\n\r\nCurrently we only support a leftmost condition in a limited set of statements. We could expand this to support \"expressions\" more generally.\r\n\r\n/cc @sharwell "},{"Id":"6902005458","Type":"IssuesEvent","CreatedAt":"2017-11-25T15:19:22","Actor":"alrz","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/23374","RelatedDescription":"Opened issue \"Handle user-defined operators in 'use pattern matching' analyzer\" (#23374) at dotnet/roslyn","RelatedBody":"From https://github.com/dotnet/roslyn/pull/20246#discussion_r152680679\r\n\r\n> - If all uses of == null and != null for a variable use the default operator, a Fix All on the variable will fix all cases where no user-defined operators are involved\r\n> - If one or more uses of == or != involve a user-defined operator for a variable with the declared type T, then a Fix All on that variable will fix all instances involving variables with declared type T, whether or not they use user-defined operators. Alternately, this scenario could fix all instances involving variables with declared type T which use one or more user-defined operators.\r\n> \r\n> The equivalence ID of the code fix can be used to \"bucket\" fixes according to the above conditions."},{"Id":"6901980036","Type":"IssuesEvent","CreatedAt":"2017-11-25T15:01:41","Actor":"sharwell","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/22367","RelatedDescription":"Closed issue \"Go To Definition fails to navigate to metadata\" (#22367) at dotnet/roslyn","RelatedBody":"**Version Used**: 15.4 Preview 2\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Open Roslyn.sln\r\n2. Open AdditionalText.cs\r\n3. Click on `string` or `CancellationToken`\r\n4. Use one of the following commands\r\n    1. Press <kbd>F12</kbd> or use **Go To Definition** from the editor context menu\r\n    2. Press <kbd>Alt</kbd>+<kbd>F12</kbd> or use **Peek Definition** from the editor context menu\r\n\r\n**Expected Behavior**:\r\n\r\n* Following step 4.1, the editor navigates to the symbol in metadata\r\n* Following step 4.2, the editor shows the symbol in metadata within a \"peek\" window\r\n\r\n**Actual Behavior**:\r\n\r\n* Following step 4.1, the editor displays a dialog which reads **Cannot navigate to the symbol under the caret.**\r\n* Step 4.2 works as expected"}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"6902888434","Type":"PullRequestEvent","CreatedAt":"2017-11-26T03:27:26","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5023","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#5023) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"6902836169","Type":"PullRequestEvent","CreatedAt":"2017-11-26T02:34:52","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5023","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#5023) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"6902113994","Type":"PullRequestEvent","CreatedAt":"2017-11-25T16:34:43","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5022","RelatedDescription":"Merged pull request \"Update dependencies to latest\" (#5022) at dotnet/corert","RelatedBody":""},{"Id":"6902043742","Type":"PullRequestEvent","CreatedAt":"2017-11-25T15:47:19","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5022","RelatedDescription":"Opened pull request \"Update dependencies to latest\" (#5022) at dotnet/corert","RelatedBody":""},{"Id":"6901248171","Type":"PullRequestEvent","CreatedAt":"2017-11-25T04:05:06","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5021","RelatedDescription":"Merged pull request \"Merge master to nmirror\" (#5021) at dotnet/corert","RelatedBody":""},{"Id":"6901247857","Type":"PullRequestEvent","CreatedAt":"2017-11-25T04:04:44","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5021","RelatedDescription":"Opened pull request \"Merge master to nmirror\" (#5021) at dotnet/corert","RelatedBody":""},{"Id":"6901246805","Type":"PullRequestEvent","CreatedAt":"2017-11-25T04:03:35","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5020","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#5020) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"6900978066","Type":"PullRequestEvent","CreatedAt":"2017-11-24T23:50:40","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5020","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#5020) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"6900683928","Type":"IssuesEvent","CreatedAt":"2017-11-24T20:44:17","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/issues/5019","RelatedDescription":"Opened issue \"Use scanner analysis to aid devirtualization\" (#5019) at dotnet/corert","RelatedBody":"I originally thought this would just be a perf optimization we can do later, but it turns out this is needed for making devirtualization working with our IL scanner at all.\r\n\r\nAs a refresher - scanning phase in the compiler tries to determine the exact set of methods that we're going to compile so that we can precompute generic dictionary layouts or vtable layouts. There's an essential invariant that says that we're never allowed to end up in a situation where the compilation phase generates more code than the scanning phase. \r\n\r\nBut consider:\r\n\r\n```csharp\r\nabstract class Base\r\n{\r\n    public abstract void Unreachable();\r\n}\r\n\r\nsealed class Derived : Base\r\n{\r\n    public override void Unreachable()\r\n    {\r\n        new Derived();\r\n    }\r\n}\r\n\r\ninternal class Program\r\n{\r\n    private static void Main(string[] args)\r\n    {\r\n        Derived p = null;\r\n        if (args == null)\r\n            p.Unreachable();\r\n    }\r\n}\r\n```\r\n\r\nIn this example, the virtual call to `Unreachable` doesn't result in scanning any method bodies, since no type with this method in the VTable got ever allocated. Scanner doesn't do devirtualization, because it's an optimization step that the codegen may or may not do. We don't try to predict what the codegen will do. Scanning more things than what we end up compiling is harmless (although it's wasting CPU cycles, so we try hard not to do it).\r\n\r\nThe simplified devirtualization algorithm we have in CorInfoImpl.cs that RyuJIT uses however will devirtualize the virtual call into a direct call to Derived::Unreachable. Bad things happen as a result.\r\n\r\nThe devirtualization algorithm needs to take into consideration the information we collected during scanning and abort the devirtualization in this case."},{"Id":"6900174608","Type":"PullRequestEvent","CreatedAt":"2017-11-24T16:59:22","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5016","RelatedDescription":"Merged pull request \"Fix up stack trace formatter to support general purpose metadata\" (#5016) at dotnet/corert","RelatedBody":"The stack trace formatter was written to support the metadata format emitted by the stack trace metadata emitter, but it turns out it doesn't support the more general purpose constructs that I made it parse after #5004.\r\n\r\nThe general purpose signature for a method on a generic type that takes T as a parameter is `ReturnType Foo(!0)`. The formatter needs to format the parameter `!0` as `T` (i.e. we need to do substitution for formals).\r\n\r\nThe code is less than ideal, mostly because it also needs to support metadata constructs that would be illegal in ECMA-335, but are relatively compact when it comes to binary representation, so we use them in the stack trace emitter."}],"ResultType":"GitHubEvent"},"SDK":{"Events":[{"Id":"6898118624","Type":"PullRequestEvent","CreatedAt":"2017-11-24T08:00:50","Actor":"dotnet-bot","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/1767","RelatedDescription":"Opened pull request \"Merge release/15.5 to master\" (#1767) at dotnet/sdk","RelatedBody":"\nThis is an automatically generated pull request from release/15.5 into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/15.5-to-master-20171124-080047\ngit reset --hard upstream/master\ngit merge upstream/release/15.5\n# Fix merge conflicts\ngit commit\ngit push merges/release/15.5-to-master-20171124-080047 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"6898118548","Type":"PullRequestEvent","CreatedAt":"2017-11-24T08:00:48","Actor":"dotnet-bot","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/1766","RelatedDescription":"Opened pull request \"Merge release/2.0.0 to release/15.5\" (#1766) at dotnet/sdk","RelatedBody":"\nThis is an automatically generated pull request from release/2.0.0 into release/15.5.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.0.0-to-release/15.5-20171124-080045\ngit reset --hard upstream/release/15.5\ngit merge upstream/release/2.0.0\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.0.0-to-release/15.5-20171124-080045 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"6893453650","Type":"IssuesEvent","CreatedAt":"2017-11-23T03:54:56","Actor":"livarcocc","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/issues/1623","RelatedDescription":"Closed issue \"SolutionDir is not resolved during dotnet restore\" (#1623) at dotnet/sdk","RelatedBody":"See the following repository that can reproduce the error\r\n\r\nhttps://github.com/bradphelan/msbuildbug\r\n\r\nfirst reported at\r\n\r\nhttps://stackoverflow.com/questions/46526428/msbuild-solutiondir-resolves-incorrectly-to-c-when-running-msbuild-tresto"},{"Id":"6893426284","Type":"IssuesEvent","CreatedAt":"2017-11-23T03:40:34","Actor":"livarcocc","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/issues/1755","RelatedDescription":"Closed issue \".NET Standard 2.0 class library, that references a .NET Framework 4.7.1 class library with PackageReference fails\" (#1755) at dotnet/sdk","RelatedBody":"I have a .NET Standard 2.0 class library, that references a .NET Framework 4.7.1 class library (works fine)\r\n\r\nHowever, if the .NET Framework 4.7.1 adds a PackageReference (new style), I get the following error (possibly due to transitivity):\r\n\r\nError    NU1201           Project ClassLibrary2 is not compatible with netstandard2.0 (.NETStandard,Version=v2.0). Project ClassLibrary2 supports: net471 (.NETFramework,Version=v4.7.1)     \r\n\r\nThe package in question being added can be any package, packages that have support for .NET Standard or otherwise, the same error.\r\n\r\nWhat am I missing?\r\n"},{"Id":"6892887507","Type":"PullRequestEvent","CreatedAt":"2017-11-22T23:22:25","Actor":"johnbeisner","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/1765","RelatedDescription":"Opened pull request \"Updating the SDK feeds\" (#1765) at dotnet/sdk","RelatedBody":""}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"933058673206730752","CreatedAt":"2017-11-21T19:44:57+00:00","UserScreenname":"dotnet","Text":".NET Core Alpine Image Ready for Testing https://t.co/SsQtOGuAFD","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":205,"FavoriteCount":153,"RawContent":null},{"Id":"932677600715071488","CreatedAt":"2017-11-20T18:30:42+00:00","UserScreenname":"dotnet","Text":"Looking to migrate your existing .NET apps to the cloud but need our help? Fill out this survey and let us know: https://t.co/g6xbbWkX93","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":19,"FavoriteCount":15,"RawContent":null},{"Id":"931580871437635584","CreatedAt":"2017-11-17T17:52:42+00:00","UserScreenname":"dotnet","Text":"Check out our new ConfigurationBuilders that make it easier than ever to use Azure Key Vault, Environment Variables… https://t.co/nXoIDLCubn","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":56,"FavoriteCount":26,"RawContent":null},{"Id":"931255246872915968","CreatedAt":"2017-11-16T20:18:47+00:00","UserScreenname":"dotnet","Text":"Migrate your .NET apps to the cloud and benefit from easier deployments and scalability, without rearchitecting you… https://t.co/gNfBFe3Sbh","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":107,"FavoriteCount":61,"RawContent":null},{"Id":"931205222579318784","CreatedAt":"2017-11-16T17:00:00+00:00","UserScreenname":"dotnet","Text":"Having trouble moving to .NET Core because of missing Windows APIs? Introducing the Windows Compatibility Pack for… https://t.co/s3KKSJ467u","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":149,"FavoriteCount":85,"RawContent":null}]}},"RunOn":"2017-11-26T05:30:21.5229055Z","RunDurationInMilliseconds":7624}