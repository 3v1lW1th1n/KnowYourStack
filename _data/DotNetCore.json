{"Data":{"Blog":{"FeedItems":[{"Title":"Announcing the .NET Framework 4.7.2","PublishedOn":"2018-04-30T20:56:19+00:00","CommentsCount":13,"FacebookCount":0,"Summary":"Today, we are happy to announce the release of the .NET Framework 4.7.2. It’s included in the Windows 10 April 2018 Update. .NET Framework 4.7.2 is also available on Windows 7+ and Windows Server 2008...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/04/30/announcing-the-net-framework-4-7-2/","RawContent":null},{"Title":"Help us plan the future of .NET!","PublishedOn":"2018-04-20T16:55:37+00:00","CommentsCount":63,"FacebookCount":0,"Summary":"We’re currently planning our next major .NET releases and would love to hear your feedback on how you interact with .NET Framework and .NET Core today. Please fill out the survey below and help shape...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/04/20/help-us-plan-the-future-of-net/","RawContent":null},{"Title":"Performance Improvements in .NET Core 2.1","PublishedOn":"2018-04-18T19:29:45+00:00","CommentsCount":46,"FacebookCount":0,"Summary":"Back before .NET Core 2.0 shipped, I wrote a post highlighting various performance improvements in .NET Core 2.0 when compared with .NET Core 1.1 and the .NET Framework. As .NET Core 2.1 is in its...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/04/18/performance-improvements-in-net-core-2-1/","RawContent":null},{"Title":".NET Highlights in Visual Studio 2017 version 15.7 Preview 4","PublishedOn":"2018-04-18T19:00:00+00:00","CommentsCount":11,"FacebookCount":0,"Summary":"As you know we continue to incrementally improve Visual Studio 2017 (version 15), and our 7th significant update is currently well under way with the 4th preview shipping today. As we’re winding down...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/04/18/visual-studio-2017-15-7-preview-4/","RawContent":null},{"Title":".NET Core April 2018 Update","PublishedOn":"2018-04-17T23:50:13+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"Today, we are releasing the .NET Core April 2018 Update. This update includes .NET Core 1.0.11, 1.1.8 and 2.0.7. There are no new security fixes in this update. See April 2018 .NET Updates for other...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/04/17/net-core-april-2018-update/","RawContent":null},{"Title":"Announcing Entity Framework Core 2.1 Preview 2","PublishedOn":"2018-04-11T18:02:40+00:00","CommentsCount":14,"FacebookCount":0,"Summary":"Today we’re releasing the second preview of EF Core 2.1, alongside .NET Core 2.1 Preview 2 and ASP.NET Core 2.1 Preview 2. Thank you so much to everyone who has tried our early builds and has helped...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/04/11/announcing-entity-framework-core-2-1-preview-2/","RawContent":null},{"Title":"Announcing .NET Core 2.1 Preview 2","PublishedOn":"2018-04-11T17:53:44+00:00","CommentsCount":40,"FacebookCount":0,"Summary":"Today, we are announcing .NET Core 2.1 Preview 2. The release is now ready for broad testing, as we get closer to a final build within the next two to three months. We&#8217;d appreciate any feedback...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/04/11/announcing-net-core-2-1-preview-2/","RawContent":null},{"Title":"Explore Azure Cosmos DB with .NET Core and MongoDB","PublishedOn":"2018-04-09T16:00:47+00:00","CommentsCount":9,"FacebookCount":0,"Summary":"Have you had to design general purpose &#8220;metadata&#8221; tables in your SQL database that basically store column names and values? Do you often serialize/de-serialize XML or JSON from your SQL...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/04/09/explore-cosmosdb-with-net-core-and-mongodb/","RawContent":null},{"Title":"Calling all Desktop Developers: how should UI development be improved?","PublishedOn":"2018-03-23T18:01:31+00:00","CommentsCount":66,"FacebookCount":0,"Summary":"The user interface (UI) of any application is critical in making your app convenient and efficient for the folks using it. When developing applications for Enterprise use, a good UI can shave time off...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/03/23/calling-all-desktop-developers-how-should-ui-development-be-improved/","RawContent":null},{"Title":".NET Framework 4.7.2 Developer Pack Early Access build 3056 is available!","PublishedOn":"2018-03-08T23:22:13+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"Today, we are happy to share an Early Access build with the .NET Framework 4.7.2 Developer Pack. The .NET Framework 4.7.2 Developer Pack lets developers build applications that target the .NET...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/03/08/net-framework-4-7-2-developer-pack-early-access-build-3056-is-available/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"7559882384","Type":"PullRequestEvent","CreatedAt":"2018-04-20T06:42:59","Actor":"Cheesebaron","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/100","RelatedDescription":"Opened pull request \"Create mvvmcross.md\" (#100) at dotnet/home","RelatedBody":"Added MvvmCross as project"},{"Id":"7452103949","Type":"PullRequestEvent","CreatedAt":"2018-03-29T07:03:03","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/97","RelatedDescription":"Merged pull request \"update CLA PDF link\" (#97) at dotnet/home","RelatedBody":""},{"Id":"7419410563","Type":"IssuesEvent","CreatedAt":"2018-03-22T14:02:36","Actor":"vvavrychuk","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/issues/99","RelatedDescription":"Opened issue \"not working \"Linux Distribution\" dropdown on http://www.microsoft.com/net/learn/get-started/linux \" (#99) at dotnet/home","RelatedBody":"On the page http://www.microsoft.com/net/learn/get-started/linux dropdown \"Linux Distribution\" has no effect on the installation instruction next to him (they are always displayed for RedHat).\r\n\r\n![screenshot from 2018-03-22 16-02-19](https://user-images.githubusercontent.com/152563/37775020-6ec5778e-2dea-11e8-9ea3-b33e26c1c4e1.png)\r\n"},{"Id":"7192252734","Type":"PullRequestEvent","CreatedAt":"2018-02-03T01:30:47","Actor":"karann-msft","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/98","RelatedDescription":"Opened pull request \"Updates to reflect the latest information\" (#98) at dotnet/home","RelatedBody":""},{"Id":"7187459205","Type":"PullRequestEvent","CreatedAt":"2018-02-02T05:26:03","Actor":"mairaw","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/97","RelatedDescription":"Opened pull request \"update CLA PDF link\" (#97) at dotnet/home","RelatedBody":""}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"7545995438","Type":"IssuesEvent","CreatedAt":"2018-04-18T00:20:14","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/64","RelatedDescription":"Opened issue \"April 2018 .NET Updates\" (#64) at dotnet/announcements","RelatedBody":"# April 2018 .NET Updates\r\n\r\nThe following .NET updates were released this month. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Framework\r\n\r\n* No new releases. See: [.NET Framework February 2018 Security and Quality Rollup](https://blogs.msdn.microsoft.com/dotnet/2018/02/13/net-framework-february-2018-security-and-quality-rollup/).\r\n* [microsoft/dotnet-framework](https://hub.docker.com/r/microsoft/dotnet-framework/) and related Docker images were updated for [KB4093112](https://support.microsoft.com/help/4093112) and associated updates.\r\n\r\n## .NET Core\r\n\r\n* [.NET Core April 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/04/17/net-core-april-2018-update/)\r\n   * [2.0.7 Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.0/2.0.7.md)\r\n   * [1.1.8 Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.1/1.1.8.md)\r\n   * [1.0.11 Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.0/1.0.11.md)\r\n* [.NET Core 2.1 Preview 2](https://blogs.msdn.microsoft.com/dotnet/2018/04/11/announcing-net-core-2-1-preview-2/)\r\n* [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/) and related Docker images were updated for [KB4093112](https://support.microsoft.com/help/4093112) and associated updates.\r\n* Latest .NET Core security release: [.NET Core March 2018 Update](https://github.com/dotnet/core/issues/1341)\r\n\r\n## .NET for UWP\r\n\r\n* No new releases. See: [.NET for UWP January 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-for-uwp-january-2018-update/).\r\n\r\n## Previous Updates\r\n\r\n* [February 2018 Security and Quality Updates](https://github.com/dotnet/announcements/issues/59)"},{"Id":"7387413694","Type":"IssuesEvent","CreatedAt":"2018-03-15T21:18:32","Actor":"mairaw","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/announcements/issues/63","RelatedDescription":"Reopened issue \"Transport Layer Security (TLS) best practices with the .NET Framework article published\" (#63) at dotnet/announcements","RelatedBody":"# Transport Layer Security (TLS) best practices with the .NET Framework article published\r\n\r\nA new article was published that discusses the Transport Layer Security (TLS) best practices at https://docs.microsoft.com/dotnet/framework/network-programming/tls.\r\n\r\nTo ensure .NET Framework applications remain secure, the TLS version should **not** be hardcoded. .NET Framework applications should use the TLS version the operating system (OS) supports.\r\n\r\nThe (TLS) best practices article targets developers who are:\r\n* Directly using the System.Net APIs (for example, `System.Net.Http.HttpClient` and `System.Net.Security.SslStream`).\r\n* Directly using WCF clients and services using the `System.ServiceModel` namespace.\r\n* Using [Azure Cloud Services](https://azure.microsoft.com/services/cloud-services/) Web and Worker roles to host and run your application. See the [Azure Cloud Services](https://docs.microsoft.com/dotnet/framework/network-programming/tls#azure-cloud-services) section.\r\n\r\nThe article explains how to enable the strongest security available for the version of the .NET Framework that your app targets and runs on.\r\n\r\nThe section [Audit your code and make code changes](https://docs.microsoft.com/dotnet/framework/network-programming/tls#audit-your-code-and-make-code-changes) covers auditing and updating your code.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts and have any discussions with us at:\r\n\r\ndotnet/docs#4675"},{"Id":"7387391842","Type":"IssuesEvent","CreatedAt":"2018-03-15T21:13:45","Actor":"mairaw","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/63","RelatedDescription":"Closed issue \"Transport Layer Security (TLS) best practices with the .NET Framework article published\" (#63) at dotnet/announcements","RelatedBody":"# Transport Layer Security (TLS) best practices with the .NET Framework article published\r\n\r\nA new article was published that discussed the Transport Layer Security (TLS) best practices at https://docs.microsoft.com/dotnet/framework/network-programming/tls.\r\n\r\nTo ensure .NET Framework applications remain secure, the TLS version should **not** be hardcoded. .NET Framework applications should use the TLS version the operating system (OS) supports.\r\n\r\nThe (TLS) best practices article targets developers who are:\r\n* Directly using the System.Net APIs (for example, `System.Net.Http.HttpClient` and `System.Net.Security.SslStream`).\r\n* Directly using WCF clients and services using the `System.ServiceModel` namespace.\r\n* Using [Azure Cloud Services](https://azure.microsoft.com/services/cloud-services/) Web and Worker roles to host and run your application. See the [Azure Cloud Services](https://docs.microsoft.com/dotnet/framework/network-programming/tls#azure-cloud-services) section.\r\n\r\nThe article explains how to enable the strongest security available for the version of the .NET Framework that your app targets and runs on.\r\n\r\nThe section [Audit your code and make code changes](https://docs.microsoft.com/dotnet/framework/network-programming/tls#audit-your-code-and-make-code-changes) covers auditing and updating your code.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts and have any discussions with us at:\r\n\r\ndotnet/docs#4675"},{"Id":"7373349220","Type":"IssuesEvent","CreatedAt":"2018-03-13T17:01:53","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/62","RelatedDescription":"Opened issue \"Microsoft Security Advisory CVE-2018-0875: Hash Collison can cause Denial of Service\" (#62) at dotnet/announcements","RelatedBody":"# Microsoft Security Advisory CVE-2018-0875: Hash Collison can cause Denial of Service\r\n## Executive Summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in the public versions of .NET Core 1.0 and 2.0 (including other minor and patch releases).\r\nThis advisory also provides guidance on what developers can do to update their applications correctly.\r\n\r\nMicrosoft is aware of a security vulnerability in the public versions of .NET Core where a malicious file or web request could cause a denial of service (DoS) attack.\r\n\r\nSystem administrators are advised to update their .NET Core runtimes to versions 1.0.10, 1.1.7 or 2.0.6. Developers are advised to update their .NET Core SDK to versions 1.1.8 or 2.1.101.\r\n\r\n## Discussion\r\n\r\nUse *TBD* for discussion of this advisory.\r\n\r\n### Mitigation Factors\r\nNone\r\n\r\n### Affected Software\r\n\r\nAny application running against .NET Core 1.0.9 or lower versions, 1.1.6 or lower minor versions or 2.0.5 or lower minor versions is affected. \r\n\r\n### Advisory FAQ\r\n#### How do I know if I am affected?\r\nAny application running against .NET Core 1.0.9 or lower versions, 1.1.6 or lower minor versions or 2.0.5 or lower minor versions is affected. \r\n\r\nA complete list of runtimes can be discovered by performing a directory listing in the install root directories. The default root directories are listed in the following table:\r\n\r\n| Operating System | Location |\r\n|------------------|----------|\r\n| Windows\t| `C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\` |\r\n| macOS\t| `/usr/local/share/dotnet/shared/Microsoft.NETCore.App/` |\r\n| Supported Linux platforms\t| `/usr/share/dotnet/shared/Microsoft.NETCore.App/` |\r\n\r\nEach runtime version is installed in its own directory, where the directory name is the version number. If you don't have a directory for 1.0.10, 1.1.7 and 2.0.6, then any applications targeting the respective major/minor versions, 1.0 or 1.1 or 2.0 of .NET Core are vulnerable.\r\n\r\nAdditionally, if you've deployed self-contained applications targeting any of the impacted versions, these applications are also vulnerable and must be recompiled and redeployed.\r\n\r\n#### How do I fix my affected application?\r\n\r\nApplications can be fixed by installing the latest .NET Core runtimes or SDKs. Typically, application servers only have runtime packages installed and developer machines have the SDKs installed. \r\nInstallers for the runtimes can be downloaded from the [Runtime and SDK download archive](https://github.com/dotnet/core/blob/master/release-notes/download-archive.md). \r\n.NET Core 1.1.8 SDK installs both versions 1.0.10 and 1.1.7 of the .NET Core runtime.\r\n\r\nIf you've built a self-contained application, you must install the new runtime and SDK, recompile your application and redeploy.\r\n\r\n#### What if the update breaks my application?\r\nAn application can be pinned to a previous version of the runtime by editing the `application.runtime.config` file for that application. Set the framework version to the desired version and the `rollForward` property to false. These settings should be treated as a temporary measure and the application updated to work with the patched versions of the framework.\r\n\r\nSince the `application.runtime.config` file is an optional file, you may need to create one for each application and add it alongside the executable.\r\n\r\n### Acknowledgments\r\n[Ben Adams](https://twitter.com/ben_a_adams) of [Illyriad Games](https://www.illyriad.co.uk/)\r\n\r\n### External Links\r\n[CVE-2018-0875](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-0875)\r\n\r\n### Revisions\r\n\r\nV1.0 (Mar 13, 2018): Advisory published.\r\n\r\n_Version 1.0_\r\n_Last Updated 2018-03-13_\r\n"}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"7614624484","Type":"PullRequestEvent","CreatedAt":"2018-05-02T04:08:15","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/17859","RelatedDescription":"Opened pull request \"Delete incorrect comment\" (#17859) at dotnet/coreclr","RelatedBody":""},{"Id":"7614533114","Type":"PullRequestEvent","CreatedAt":"2018-05-02T03:30:23","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/17856","RelatedDescription":"Merged pull request \"Rename internal Utf8String to MdUtf8String\" (#17856) at dotnet/coreclr","RelatedBody":"We want to start prototyping Utf8String in CoreFxLab\r\nand for that, we'll need a bare-bones System.Utf8String\r\nclass exposed from System.Private.CoreLib.\r\n\r\nUnfortunately, CoreLib already has an internal\r\nstruct named System.Utf8String. Since it's only\r\nan internal type, we'll exercise eminent domain\r\non its name now and get these noise changes out of\r\nthe way."},{"Id":"7614111743","Type":"IssuesEvent","CreatedAt":"2018-05-02T00:42:44","Actor":"echesakovMSFT","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/17754","RelatedDescription":"Closed issue \"[arm32/Ubuntu] corefx test timeouts\" (#17754) at dotnet/coreclr","RelatedBody":"The following tests time out (with 10 minute default timeout) in a corefx test run:\r\n\r\n```\r\nSystem.Collections.Tests\r\nSystem.Transactions.Local.Tests\r\nSystem.Xml.RW.XmlConvert.Tests\r\n```\r\n\r\ne.g.,\r\n\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/job/jitstress/job/arm_cross_checked_ubuntu_corefx_baseline_tst_prtest/1/consoleText\r\n"},{"Id":"7614103419","Type":"IssuesEvent","CreatedAt":"2018-05-02T00:39:28","Actor":"echesakovMSFT","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/17858","RelatedDescription":"Opened issue \"[Linux][arm] CoreFx test System.Transactions.Local.Tests hangs\" (#17858) at dotnet/coreclr","RelatedBody":"CoreFx test `System.Transactions.Local.Tests` hangs during `System.Transactions.Tests.AsyncTransactionScopeTests.VerifyBYOTAsyncTSNestedAsync` on Ubuntu/arm with both Checked and Release coreclr\r\n(as an example, https://ci.dot.net/job/dotnet_coreclr/job/master/job/jitstress/job/arm_cross_checked_ubuntu_corefx_baseline_tst_prtest/1/consoleText)\r\n\r\n```\r\nxUnit.net console test runner (32-bit .NET Core)\r\nCopyright (C) 2014 Outercurve Foundation.\r\n\r\nDiscovering: System.Transactions.Local.Tests\r\nDiscovered:  System.Transactions.Local.Tests\r\nStarting:    System.Transactions.Local.Tests\r\n   System.Transactions.Tests.AsyncTransactionScopeTests.VerifyBYOTAsyncTSNestedAsync [STARTING]\r\n```\r\nWhat is interesting - if you keep at least one core busy (e.g. by running `stress --cpu 1 --timeout 600`) the test always passes (I have a quad-core ARMv7 cpu) and you get\r\n\r\n```\r\nxUnit.net console test runner (32-bit .NET Core)\r\nCopyright (C) 2014 Outercurve Foundation.\r\n\r\nDiscovering: System.Transactions.Local.Tests\r\nDiscovered:  System.Transactions.Local.Tests\r\nStarting:    System.Transactions.Local.Tests\r\n   System.Transactions.Tests.AsyncTransactionScopeTests.VerifyBYOTAsyncTSNestedAsync [STARTING]\r\n   System.Transactions.Tests.AsyncTransactionScopeTests.VerifyBYOTAsyncTSNestedAsync [FINISHED] Time: 0.2283526s\r\nFinished:    System.Transactions.Local.Tests\r\n\r\n=== TEST EXECUTION SUMMARY ===\r\n   System.Transactions.Local.Tests  Total: 1, Errors: 0, Failed: 0, Skipped: 0, Time: 0.935s\r\n```\r\n\r\nSteps to reproduce is:\r\n1. Build (Checked or Release) coreclr\r\n2. Build Release corefx tests\r\n3. Run something like this inside System.Transactions.Local.Tests folder:\r\n```\r\ncoreclr/_/fx-Release/bin/testhost/netcoreapp-Linux-Release-arm/dotnet xunit.console.netcore.exe System.Transactions.Local.Tests.dll  -xml testResults.xml -notrait Benchmark=true -notrait category=nonnetcoreapptests -notrait category=nonlinuxtests  -notrait category=IgnoreForCI -notrait category=OuterLoop -notrait category=failing -method System.Transactions.Tests.AsyncTransactionScopeTests.VerifyBYOTAsyncTSNestedAsync -showprogress\r\n```\r\nIt doesn't seem to be reproducible on Windows/arm though, so could be a Linux specific issue.\r\n\r\n**More:** I also tend to believe that this is **not** a test specific. The problem just manifests itself as a deadlock in this particular scenario, but in other scenarios it could be just an unnecessary waiting. For example, running `System.Collections.Tests` test suite on average (in 10 test runs) takes 62.5s on my machine (with Release coreclr). However, if I do the same trick by running `stress` in a separate ssh window the tests will take on average 38s. This is also true for `System.Runtime.Tests` - 92s vs 55s.\r\nWe also confirmed with @BruceForstall that this happens with Checked coreclr on a different machine (same kernel and cpu though).\r\n\r\n@janvorli  Is this something you would be interested to look into and see if it can be reproduced on your hardware? \r\n/cc @RussKeldorph"},{"Id":"7613968780","Type":"IssuesEvent","CreatedAt":"2018-05-01T23:48:06","Actor":"stephentoub","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/17758","RelatedDescription":"Closed issue \"AsyncLocal<class> changed event can be raised multiple times for one change in value\" (#17758) at dotnet/coreclr","RelatedBody":"```c#\r\n        var al1 = new AsyncLocal<object>();\r\n        al1.Value = new object();\r\n        var ec = ExecutionContext.Capture();\r\n\r\n        Action<AsyncLocalValueChangedArgs<object>> onChanged = e => Console.WriteLine(\"changed\");\r\n        Console.WriteLine(\"--- new AsyncLocal<object>\");\r\n        var al = new AsyncLocal<object>(onChanged);\r\n        Console.WriteLine(\"--- new object\");\r\n        al.Value = new object();\r\n        Console.WriteLine(\"--- null\");\r\n        al.Value = null;\r\n        Console.WriteLine(\"--- new object\");\r\n        al.Value = new object();\r\n        Console.WriteLine(\"--- before EC.Run\");\r\n        ExecutionContext.Run(ec, data => Console.WriteLine(\"--- in EC.Run\"), null);\r\n```\r\n\r\nExpected output:\r\n```\r\n--- new AsyncLocal<object>\r\n--- new object\r\nchanged\r\n--- null\r\nchanged\r\n--- new object\r\nchanged\r\n--- before EC.Run\r\nchanged\r\n--- in EC.Run\r\nchanged\r\n```\r\n\r\nObserved output:\r\n```\r\n--- new AsyncLocal<object>\r\n--- new object\r\nchanged\r\n--- null\r\nchanged\r\n--- new object\r\nchanged\r\n--- before EC.Run\r\nchanged\r\nchanged\r\n--- in EC.Run\r\nchanged\r\nchanged\r\n```\r\n\r\nThis seems to be a regression from https://github.com/dotnet/coreclr/pull/8216, which treats a value of null as though the key does not exist, but in `ExecutionContext.SetLocalValue`, the key not existing means it will add a new change notification. So each transition of an AsyncLocal<class>'s value from null to non-null will add an additional change notification. The fix would probably be to keep the key in the IAsyncLocalValueMap despite its value becoming null.\r\n\r\nThe issue currently requires two AsyncLocals to reproduce because [for the first AsyncLocal](https://github.com/dotnet/coreclr/blob/master/src/mscorlib/shared/System/Threading/ExecutionContext.cs#L337) it does not consider whether the new value is null as opposed to AsyncLocalValueMap's implementation.\r\n\r\nCC @stephentoub "},{"Id":"7613954849","Type":"PullRequestEvent","CreatedAt":"2018-05-01T23:43:04","Actor":"noahfalk","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/17839","RelatedDescription":"Merged pull request \"Add runtimeconfig.json support for tiered compilation\" (#17839) at dotnet/coreclr","RelatedBody":""},{"Id":"7613863563","Type":"PullRequestEvent","CreatedAt":"2018-05-01T23:11:00","Actor":"erozenfeld","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/17857","RelatedDescription":"Opened pull request \"Improve checking of GTF_CALL flag.\" (#17857) at dotnet/coreclr","RelatedBody":"The checker ensures that GTF_CALL is set only where\r\nit's needed: on GT_CALL nodes, on GT_INTRINSIC nodes where\r\nintrinsics are implemented by user calls, and on nodes that\r\nhave a child with GT_CALL flag set.\r\n\r\nFixes #17794."},{"Id":"7613846659","Type":"PullRequestEvent","CreatedAt":"2018-05-01T23:05:33","Actor":"sandreenko","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/17852","RelatedDescription":"Merged pull request \"Fix arm test list creator for Windows\" (#17852) at dotnet/coreclr","RelatedBody":"When Python reads a file it converts all line separators to a single \"\\n\".\r\nBut the value of `os.linesep` is [platform specific](https://docs.python.org/3/library/os.html#os.linesep) and used to parse binary files, so on Windows it is \"\\r\\n\" and `item.split(os.linesep)` can't split anything. On POSIX `os.linesep == \\n` so it has worked fine."}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"7614751331","Type":"IssuesEvent","CreatedAt":"2018-05-02T05:03:43","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/9186","RelatedDescription":"Closed issue \"NuGet parameters like \"--configfile\" and \"--no-cache\" apply to many commands but are only shown in \"restore --help\"\" (#9186) at dotnet/cli","RelatedBody":"NuGet parameters like `--configfile` and `--no-cache` apply to many commands (e.g. restore, build, and publish), but they are only shown in the help text for `restore`.  I think these parameters should be shown in the help text for all commands to which they apply.\r\n\r\n## Steps to reproduce\r\nNote the \"file does not exist\" errors are expected and mean the command-line parameter is working.\r\n\r\n```\r\n> dotnet new classlib --no-restore\r\n\r\n> dotnet restore --help | findstr -i configfile\r\n  --configfile <FILE>                  The NuGet configuration file to use.\r\n\r\n> dotnet restore --configfile foo\r\nNuGet.targets(497,5): error : File 'D:\\Temp\\classlib\\foo' does not exist. [D:\\Temp\\classlib\\classlib.csproj]\r\n\r\n> dotnet build --help | findstr -i configfile\r\n\r\n> dotnet build--configfile foo\r\nNuGet.targets(497,5): error : File 'D:\\Temp\\classlib\\foo' does not exist. [D:\\Temp\\classlib\\classlib.csproj]\r\n```\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n```\r\nVersion:   2.1.300-rc1-008671\r\n```"},{"Id":"7614120640","Type":"IssuesEvent","CreatedAt":"2018-05-02T00:46:16","Actor":"mikeharder","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/9186","RelatedDescription":"Opened issue \"NuGet parameters like \"--configfile\" and \"--no-cache\" apply to many commands but are only shown in \"restore --help\"\" (#9186) at dotnet/cli","RelatedBody":"NuGet parameters like `--configfile` and `--no-cache` apply to many commands (e.g. restore, build, and publish), but they are only shown in the help text for `restore`.  I think these parameters should be shown in the help text for all commands to which they apply.\r\n\r\n## Steps to reproduce\r\nNote the \"file does not exist\" errors are expected and mean the command-line parameter is working.\r\n\r\n```\r\n> dotnet new classlib --no-restore\r\n\r\n> dotnet restore --help | findstr -i configfile\r\n  --configfile <FILE>                  The NuGet configuration file to use.\r\n\r\n> dotnet restore --configfile foo\r\nNuGet.targets(497,5): error : File 'D:\\Temp\\classlib\\foo' does not exist. [D:\\Temp\\classlib\\classlib.csproj]\r\n\r\n> dotnet build --help | findstr -i configfile\r\n\r\n> dotnet build--configfile foo\r\nNuGet.targets(497,5): error : File 'D:\\Temp\\classlib\\foo' does not exist. [D:\\Temp\\classlib\\classlib.csproj]\r\n```\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n```\r\nVersion:   2.1.300-rc1-008671\r\n```"},{"Id":"7613819067","Type":"PullRequestEvent","CreatedAt":"2018-05-01T22:56:34","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/9178","RelatedDescription":"Merged pull request \"Add a property to disable bundling ASP.NET Core tools and runtimes\" (#9178) at dotnet/cli","RelatedBody":"Part of https://github.com/dotnet/source-build/issues/456\r\n\r\nChanges:\r\n - add a property `IncludeAspNetCoreRuntime` which can be set to `false` to disable bundling ASP.NET Core tools, ~~templates~~, and runtimes\r\n - set properties that align with https://github.com/aspnet/Universe/pull/1130 to prevent shared runtime trimming against aspnet in a source-built CLI\r\n - includes some changes currently applied in source-build via https://github.com/dotnet/source-build/tree/dev/release/2.1/patches/cli (cc @dseefeld)\r\n\r\n~~Marking as WIP because I need to clarify if aspnet templates should be excluded or not.~~\r\nUpdate: keep templates"},{"Id":"7613764659","Type":"PullRequestEvent","CreatedAt":"2018-05-01T22:39:14","Actor":"wli3","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/9171","RelatedDescription":"Merged pull request \"Use NuGet autocomplete API for add-package suggestions\" (#9171) at dotnet/cli","RelatedBody":"Fixes https://github.com/dotnet/cli/issues/9128.\r\n\r\nSince `dotnet add package` doesn't work by default with prerelease packages, and since autcompletion is a convenience feature to make common use easier, I have also removed `prerelease=true`.\r\n\r\nOutput from `dotnet complete` for my examples from https://github.com/dotnet/cli/issues/9128 is [here](https://gist.github.com/svick/a29fda60d5923da0a3aa3b067ec1c556). Notice that `dotnet complete \"dotnet add package Microsoft.CodeA\"` now doesn't output anything, I have opened an issue for that: https://github.com/NuGet/NuGetGallery/issues/5858."},{"Id":"7613764650","Type":"IssuesEvent","CreatedAt":"2018-05-01T22:39:14","Actor":"wli3","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/9128","RelatedDescription":"Closed issue \"Completion for dotnet add package doesn't work well\" (#9128) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\n\r\nTry to use tab completion in PS (after [setting it up](https://github.com/dotnet/cli/blob/master/Documentation/general/tab-completion.md#powershell)) or `dotnet complete` with partial package name.\r\n\r\nIf the NuGet API is not suitable for this right now, then I think it should be improved.\r\n\r\nFor example, when trying to add the package `Microsoft.CodeAnalysis.CSharp`, I might invoke tab completion at one of the following points:\r\n\r\n* `dotnet add package Mic<Tab>`\r\n* `dotnet add package Micr<Tab>`\r\n* `dotnet add package Microsoft.Cod<Tab>`\r\n* `dotnet add package Microsoft.Code<Tab>`\r\n* `dotnet add package Microsoft.CodeA<Tab>`\r\n* `dotnet add package Microsoft.CodeAnalysis.C<Tab>`\r\n* `dotnet add package Microsoft.CodeAnalysis.CS<Tab>`\r\n\r\n## Expected  behavior\r\n\r\nSince package names are hierarchical by convention, tab completion should guide me to the package I'm looking for, word by word, based on the prefix I've already typed. In cases when there's ambiguity, the output should not unnecessarily overwhelm with full package names. At the very least, it should not harm me by completing the wrong package.\r\n\r\nNote that I'm using ` Set-PSReadlineKeyHandler -Key Tab -Function Complete`, which overrides the default PS behavior of completing to the first matching value, with bash-like partial completion.\r\n\r\nSpecifically, what I would ideally expect:\r\n\r\n### Mic\r\n\r\n```\r\n> dotnet add package Mic<Tab>\r\nDisplay all 100 possibilities? (y or n) y\r\nMicCodes\r\nMicDrop\r\nMickRoper\r\nmiCoach\r\nMIConvexHull\r\nMIConvexHullEx\r\nMicosoft\r\nMicosoftReportViewerWebForms_v11\r\nMicro_MVVM\r\nMicroApis\r\nMicroApiService\r\nMicroArgChecker\r\nMicroAssistantDLL\r\nMicrobe\r\nMicroBuild\r\nMicrobus\r\nMicroCms\r\nMicroComponents\r\nMicroCQRS\r\nMicrocrumbs\r\n…\r\n```\r\n\r\nNotice that those are not full package names, just the \"segment\" before the first `.` (or possibly also other separators, like `-`?).\r\n\r\n### Micr\r\n\r\n```\r\n> dotnet add package Micr<Tab>\r\nDisplay all 100 possibilities? (y or n) y\r\nMicro_MVVM\r\nMicroApis\r\nMicroApiService\r\nMicroArgChecker\r\nMicroAssistantDLL\r\nMicrobe\r\nMicroBuild\r\nMicrobus\r\nMicroCms\r\nMicroComponents\r\nMicroCQRS\r\nMicrocrumbs\r\nMicroDal\r\nMicroDBHelper\r\nMicroDDD\r\nMicroDI\r\nMicroDocum\r\nMicroDot\r\nMicroEdge\r\nMicroElements\r\n…\r\n```\r\n\r\n### Microsoft.Cod\r\n\r\n`dotnet add package Microsoft.Cod<Tab>` → `dotnet add package Microsoft.Code`\r\n\r\n### Microsoft.Code\r\n\r\n```\r\n> dotnet add package Microsoft.Code<Tab>\r\nMicrosoft.CodeAnalysis\r\nMicrosoft.CodeContracts\r\nMicrosoft.CodeCoverage\r\nMicrosoft.CodeDom\r\nMicrosoft.CodedUI\r\nMicrosoft.CodeQuality\r\n```\r\n\r\n### Microsoft.CodeA\r\n\r\n`dotnet add package Microsoft.CodeA<Tab>` → `dotnet add package Microsoft.CodeAnalysis`\r\n\r\n### Microsoft.CodeAnalysis.C\r\n\r\n```\r\n> dotnet add package Microsoft.CodeAnalysis.C<Tab>\r\nMicrosoft.CodeAnalysis.CodeActions\r\nMicrosoft.CodeAnalysis.Common\r\nMicrosoft.CodeAnalysis.Compilers\r\nMicrosoft.CodeAnalysis.Core\r\nMicrosoft.CodeAnalysis.CSharp\r\n```\r\n\r\n### Microsoft.CodeAnalysis.CS\r\n\r\n`dotnet add package Microsoft.CodeAnalysis.CS<Tab>` → `dotnet add package Microsoft.CodeAnalysis.CSharp`\r\n\r\n## Actual behavior\r\n\r\n### Mic\r\n\r\n```\r\n> dotnet add package Mic<Tab>\r\ncsmic                                MicCodes.Logger.DebugLogger          MicCodes.MvcPager                    MicCodes.Storage                     MicCodes.WebApi.ExceptionFilter\r\nMicCodes.Data.Multitenant            MicCodes.Logger.NLog                 MicCodes.Notify                      MicCodes.Storage.Core                MicCodes.WeChat.SDK.Core\r\nMicCodes.ECharts                     MicCodes.Mvc.AccessFilter            MicCodes.Notify.SignalR              MicCodes.Storage.Local               MicCodes.WeiChat.Storage.Azure.Core\r\nMicCodes.ECharts.Mvc                 MicCodes.Mvc.AuditFilter             MicCodes.Sms                         MicCodes.Storage.Local.Core          MicDrop\r\nMicCodes.Logger                      MicCodes.Mvc.RoleMenuFilter          MicCodes.Sms.Core                    MicCodes.Tasks\r\n```\r\n\r\n### Micr\r\n\r\n`dotnet add package Micr<Tab>` → `dotnet add package MicrOrm` (!!!)\r\n\r\n### Microsoft.Cod\r\n\r\n`dotnet add package Microsoft.Cod<Tab>`: nothing\r\n\r\n### Microsoft.Code\r\n\r\n```\r\n> dotnet add package Microsoft.Code<Tab>\r\nDisplay all 100 possibilities? (y or n) _\r\n```\r\n\r\n### Microsoft.CodeA\r\n\r\n```\r\n> dotnet add package Microsoft.CodeA<Tab>\r\nMicrosoft.CodeAnalysis                                 Microsoft.CodeAnalysis.CSharp.Workspaces               Microsoft.CodeAnalysis.VisualBasic.es\r\nMicrosoft.CodeAnalysis.Analyzers                       Microsoft.CodeAnalysis.CSharp.Workspaces.de            Microsoft.CodeAnalysis.VisualBasic.Features\r\nMicrosoft.CodeAnalysis.CodeActions                     Microsoft.CodeAnalysis.CSharp.Workspaces.es            Microsoft.CodeAnalysis.VisualBasic.fr\r\nMicrosoft.CodeAnalysis.Common                          Microsoft.CodeAnalysis.CSharp.Workspaces.fr            Microsoft.CodeAnalysis.VisualBasic.FxCopAnalyzers\r\nMicrosoft.CodeAnalysis.Common.de                       Microsoft.CodeAnalysis.CSharp.Workspaces.it            Microsoft.CodeAnalysis.VisualBasic.it\r\nMicrosoft.CodeAnalysis.Common.es                       Microsoft.CodeAnalysis.CSharp.Workspaces.ja            Microsoft.CodeAnalysis.VisualBasic.ja\r\nMicrosoft.CodeAnalysis.Common.fr                       Microsoft.CodeAnalysis.CSharp.Workspaces.ko            Microsoft.CodeAnalysis.VisualBasic.ko\r\nMicrosoft.CodeAnalysis.Common.it                       Microsoft.CodeAnalysis.CSharp.Workspaces.ru            Microsoft.CodeAnalysis.VisualBasic.ru\r\nMicrosoft.CodeAnalysis.Common.ja                       Microsoft.CodeAnalysis.CSharp.Workspaces.zh-Hans       Microsoft.CodeAnalysis.VisualBasic.Workspaces\r\nMicrosoft.CodeAnalysis.Common.ko                       Microsoft.CodeAnalysis.CSharp.Workspaces.zh-Hant       Microsoft.CodeAnalysis.VisualBasic.Workspaces.de\r\nMicrosoft.CodeAnalysis.Common.ru                       Microsoft.CodeAnalysis.CSharp.zh-Hans                  Microsoft.CodeAnalysis.VisualBasic.Workspaces.es\r\nMicrosoft.CodeAnalysis.Common.zh-Hans                  Microsoft.CodeAnalysis.CSharp.zh-Hant                  Microsoft.CodeAnalysis.VisualBasic.Workspaces.fr\r\nMicrosoft.CodeAnalysis.Common.zh-Hant                  Microsoft.CodeAnalysis.EditorFeatures                  Microsoft.CodeAnalysis.VisualBasic.Workspaces.it\r\nMicrosoft.CodeAnalysis.Compilers                       Microsoft.CodeAnalysis.EditorFeatures.Text             Microsoft.CodeAnalysis.VisualBasic.Workspaces.ja\r\nMicrosoft.CodeAnalysis.Compilers.de                    Microsoft.CodeAnalysis.EditorFeatures.Text.de          Microsoft.CodeAnalysis.VisualBasic.Workspaces.ko\r\nMicrosoft.CodeAnalysis.Compilers.es                    Microsoft.CodeAnalysis.EditorFeatures.Text.es          Microsoft.CodeAnalysis.VisualBasic.Workspaces.ru\r\nMicrosoft.CodeAnalysis.Compilers.fr                    Microsoft.CodeAnalysis.EditorFeatures.Text.fr          Microsoft.CodeAnalysis.VisualBasic.Workspaces.zh-Hans\r\nMicrosoft.CodeAnalysis.Compilers.it                    Microsoft.CodeAnalysis.EditorFeatures.Text.it          Microsoft.CodeAnalysis.VisualBasic.Workspaces.zh-Hant\r\nMicrosoft.CodeAnalysis.Compilers.ja                    Microsoft.CodeAnalysis.EditorFeatures.Text.ja          Microsoft.CodeAnalysis.VisualBasic.zh-Hans\r\nMicrosoft.CodeAnalysis.Compilers.ko                    Microsoft.CodeAnalysis.EditorFeatures.Text.ko          Microsoft.CodeAnalysis.VisualBasic.zh-Hant\r\nMicrosoft.CodeAnalysis.CSharp                          Microsoft.CodeAnalysis.EditorFeatures.Text.ru          Microsoft.CodeAnalysis.Workspaces.Common\r\nMicrosoft.CodeAnalysis.CSharp.de                       Microsoft.CodeAnalysis.EditorFeatures.Text.zh-Hans     Microsoft.CodeAnalysis.Workspaces.Common.de\r\nMicrosoft.CodeAnalysis.CSharp.es                       Microsoft.CodeAnalysis.EditorFeatures.Text.zh-Hant     Microsoft.CodeAnalysis.Workspaces.Common.es\r\nMicrosoft.CodeAnalysis.CSharp.Extensions               Microsoft.CodeAnalysis.Features                        Microsoft.CodeAnalysis.Workspaces.Common.fr\r\nMicrosoft.CodeAnalysis.CSharp.Features                 Microsoft.CodeAnalysis.FxCopAnalyzers                  Microsoft.CodeAnalysis.Workspaces.Common.it\r\nMicrosoft.CodeAnalysis.CSharp.fr                       Microsoft.CodeAnalysis.FxCopAnalyzers.Common           Microsoft.CodeAnalysis.Workspaces.Common.ja\r\nMicrosoft.CodeAnalysis.CSharp.FxCopAnalyzers           Microsoft.CodeAnalysis.Razor                           Microsoft.CodeAnalysis.Workspaces.Common.ko\r\nMicrosoft.CodeAnalysis.CSharp.it                       Microsoft.CodeAnalysis.Scripting                       Microsoft.CodeAnalysis.Workspaces.Common.ru\r\nMicrosoft.CodeAnalysis.CSharp.ja                       Microsoft.CodeAnalysis.Scripting.Common                Microsoft.CodeAnalysis.Workspaces.Common.zh-Hans\r\nMicrosoft.CodeAnalysis.CSharp.ko                       Microsoft.CodeAnalysis.Test.Resources.Proprietary      Microsoft.CodeAnalysis.Workspaces.Common.zh-Hant\r\nMicrosoft.CodeAnalysis.CSharp.ru                       Microsoft.CodeAnalysis.VisualBasic                     Peachpie.Microsoft.CodeAnalysis\r\nMicrosoft.CodeAnalysis.CSharp.Scripting                Microsoft.CodeAnalysis.VisualBasic.de\r\n```\r\n\r\n### Microsoft.CodeAnalysis.C\r\n\r\n`dotnet add package Microsoft.CodeAnalysis.C<Tab>`: nothing\r\n\r\n### Microsoft.CodeAnalysis.CS\r\n\r\n`dotnet add package Microsoft.CodeAnalysis.CS<Tab>`: nothing\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.1.300-preview2-008533\r\n Commit:    996eb6c92c\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.16299\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.300-preview2-008533\\\r\n\r\nHost (useful for support):\r\n  Version: 2.1.0-preview2-26406-04\r\n  Commit:  6833f3026b\r\n```"},{"Id":"7613744100","Type":"IssuesEvent","CreatedAt":"2018-05-01T22:32:34","Actor":"willianns","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/9183","RelatedDescription":"Closed issue \"Can't install dotnet sdk on Ubuntu 16.04 xenial from repo feed\" (#9183) at dotnet/cli","RelatedBody":"I'm trying to install dotnet sdk on a fresh install of Ubuntu 16.04 based OS following the steps on (https://www.microsoft.com/net/download/linux-package-manager/ubuntu16-04/sdk-current) but it's fail on `apt-get update` \r\n\r\nAs described on 'actual behavior' it seems the repo is down as we can see through the link below \r\n(https://packages.microsoft.com/repos/microsoft-ubuntu-xenial-prod/dists/xenial/main/binary-amd64/)\r\n\r\nO another hand Artful is ok\r\n(https://packages.microsoft.com/repos/microsoft-ubuntu-artful-prod/dists/artful/main/binary-amd64/)\r\n\r\nmaybe the feed URL has changed?\r\n\r\n## Steps to reproduce\r\n\r\nOn a Ubuntu 16.04 based distro follow the instructions at https://www.microsoft.com/net/download/linux-package-manager/ubuntu16-04/sdk-current\r\n\r\n`curl https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor > microsoft.gpg`\r\n`sudo mv microsoft.gpg /etc/apt/trusted.gpg.d/microsoft.gpg`\r\n`sudo sh -c 'echo \"deb [arch=amd64] https://packages.microsoft.com/repos/microsoft-ubuntu-xenial-prod xenial main\" > /etc/apt/sources.list.d/dotnetdev.list'`\r\n\r\n`sudo apt-get install apt-transport-https`\r\n`sudo apt-get update`\r\n`sudo apt-get install dotnet-sdk-2.1.105`\r\n\r\n## Expected  behavior\r\n\r\n.NET SDK 2.1.105 installation with success\r\n\r\n## Actual behavior\r\n\r\nFail to run `sudo apt-get update`\r\n\r\nW: The repository 'https://packages.microsoft.com/repos/microsoft-ubuntu-xenial-prod xenial Release' does not have a Release file.\r\nN: Data from such a repository can't be authenticated and is therefore potentially dangerous to use.\r\nN: See apt-secure(8) manpage for repository creation and user configuration details.\r\nE: Failed to fetch https://packages.microsoft.com/repos/microsoft-ubuntu-xenial-prod/dists/xenial/main/binary-amd64/Packages  404  Not Found\r\n\r\n\r\n\r\n\r\n\r\n\r\n"},{"Id":"7613742223","Type":"PullRequestEvent","CreatedAt":"2018-05-01T22:31:58","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/9125","RelatedDescription":"Merged pull request \"Update clicommandlineparser, climigrate, coresetup, coresetup, fsharp, roslyn, sdk, templating, templating, templating, websdk to alpha-62823-01, alpha-62823-01, rc1-26423-06, rc1-26423-06, rtm-180422-0, beta4-62827-02, rc1-62823-01, beta3-20180422-1618305, beta3-20180422-1618305, beta3-20180422-1618305, rc1-20180422-1618307, respectively (release/2.1.3xx)\" (#9125) at dotnet/cli","RelatedBody":"/cc @dotnet/dotnet-cli"},{"Id":"7613718591","Type":"IssuesEvent","CreatedAt":"2018-05-01T22:24:44","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/9184","RelatedDescription":"Closed issue \"Which version of the cli will be part of the .NET Core 2.1 release?\" (#9184) at dotnet/cli","RelatedBody":"Hi,\r\n\r\nJust have a short question, but opening an issue as the readme says \"For all feedback, use the Issues on this repository.\"\r\n\r\nI am currently building the cli repo and was curious to know which version will be released with the .NET Core 2.1 upcoming release?\r\n\r\nUnlike the coreclr or corefx repos, the cli repo has multiple 2.1 release branches (2.1.3xx, 2.1.4xx).\r\n\r\nI am thinking the release/2.1.4xx branch will be part of the .NET Core 2.1 release. Am i wrong?\r\n\r\nThanks!\r\n\r\n\r\n\r\n\r\n"},{"Id":"7613643039","Type":"IssuesEvent","CreatedAt":"2018-05-01T22:03:27","Actor":"dotnet-mc-bot","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/9185","RelatedDescription":"Opened issue \"SourceCode build failures in 'prodcon/cli/release/2.1.3xx/' - '20180501.01'\" (#9185) at dotnet/cli","RelatedBody":"There were a set of failures during this build. Here is a summary of these:\r\n* https://devdiv.visualstudio.com/DefaultCollection/DevDiv/_build?_a=summary&buildId=1647715\r\n  - **Agent:** DDVSOLINUXAGE004\r\n  - **Error log:** \u001b[39;49m\u001b[36m     1>\u001b[39;49m\u001b[39;49m\u001b[31m/opt/code/build/BundledDotnetTools.proj(0,0): error MSB6006: \"dotnet\" exited with code 134. [/opt/code/build.proj]...\r\n\r\n@mmitche, @livarcocc\r\n"},{"Id":"7613628455","Type":"IssuesEvent","CreatedAt":"2018-05-01T21:59:48","Actor":"assyadh","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/9184","RelatedDescription":"Opened issue \"Which version of the cli will be part of the .NET Core 2.1 release?\" (#9184) at dotnet/cli","RelatedBody":"Hi,\r\n\r\nJust have a short question, but opening an issue as the readme says \"For all feedback, use the Issues on this repository.\"\r\n\r\nI am currently building the cli repo and was curious to know which version will be released with the .NET Core 2.1 upcoming release?\r\n\r\nUnlike the coreclr or corefx repos, the cli repo has multiple 2.1 branches (2.1.3xx, 2.1.4xx).\r\n\r\nI am thinking the 2.1.4xx branch will be part of the .NET Core 2.1 release. Am i wrong?\r\n\r\nThanks!\r\n\r\n\r\n\r\n\r\n"}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"7613299458","Type":"PullRequestEvent","CreatedAt":"2018-05-01T20:42:40","Actor":"dotnet-maestro-bot","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/721","RelatedDescription":"Opened pull request \"Update BuildTools to preview1-02801-01 (master)\" (#721) at dotnet/standard","RelatedBody":""},{"Id":"7612161291","Type":"IssuesEvent","CreatedAt":"2018-05-01T16:31:35","Actor":"weshaggard","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/719","RelatedDescription":"Closed issue \"Different build output for classic projects: NuGet packages vs project reference. Is this on purpose?\" (#719) at dotnet/standard","RelatedBody":"Hi there,\r\n\r\nI have a WPF app (.NET Framework 4.6.1, classic .csproj) that references a .NET Standard 1.3 project that itself references another Multi-targeted project (.NET Standard 1.3 and .NET Framework 4.6.1).\r\n\r\nI've set `<RestoreProjectStyle>PackageReference</RestoreProjectStyle>` in the csproj file of the WPF app, but seems this is only important for NuGet packages?\r\n\r\nI would expect that the WPF app gets these dlls in the output directory:\r\n\r\n![image](https://user-images.githubusercontent.com/7116546/39395631-e0f9a786-4ae0-11e8-91f4-ecacadee72fc.png)\r\n\r\nBut it actually copies these dlls to the output directory:\r\n\r\n![image](https://user-images.githubusercontent.com/7116546/39395639-ee646884-4ae0-11e8-9ecb-78f0eff1afcd.png)\r\n\r\nIf the Storage Lib is referenced as a NuGet package, it works as expected:\r\n\r\n![image](https://user-images.githubusercontent.com/7116546/39395643-fe20684a-4ae0-11e8-8d8a-d2015b262057.png)\r\n\r\nIs this the expected behavior? When migrating the WPF app to SDK-style project format, it works also as expected as shown in the first picture.\r\n\r\n\r\n"},{"Id":"7608452828","Type":"IssuesEvent","CreatedAt":"2018-04-30T20:01:13","Actor":"weshaggard","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/720","RelatedDescription":"Closed issue \"PBKDF2 based on HMACSHA512 \" (#720) at dotnet/standard","RelatedBody":"Hi there,\r\nI am trying to achieve this purely in **.netstandard2.0**.\r\n```\r\nusing (SHA512 sha = SHA512.Create())\r\n{\r\n    byte[] pb = KeyDerivation.Pbkdf2(\r\n        password,\r\n        sha.ComputeHash(new MemoryStream(Encoding.UTF8.GetBytes(salt))),\r\n        KeyDerivationPrf.HMACSHA512,\r\n        IterationCount,\r\n        48);\r\n    Crypter.Key = pb.Take(32).ToArray();\r\n    Crypter.IV = pb.Skip(32).Take(16).ToArray();\r\n}\r\n```\r\n But I can't as it uses  **KeyDerivation.Pbkdf2** which is a part of _Microsoft.AspNetCore.Cryptography.KeyDerivation_  namespace in **.netcore** . I know about **Rfc2898DeriveBytes** class but it is based on **HMACSHA1**.  Am I missing something? Does an equivalent implementation for **PBKDF2** based on **HMACSHA512** exist in .**netstandard2.0**?"},{"Id":"7601558195","Type":"IssuesEvent","CreatedAt":"2018-04-28T14:44:00","Actor":"MoamenMohamed","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/720","RelatedDescription":"Opened issue \"PBKDF2 based on HMACSHA512 \" (#720) at dotnet/standard","RelatedBody":"Hi there,\r\nI am trying to achieve this purely in **.netstandard2.0**.\r\n```\r\nusing (SHA512 sha = SHA512.Create())\r\n{\r\n    byte[] pb = KeyDerivation.Pbkdf2(\r\n        password,\r\n        sha.ComputeHash(new MemoryStream(Encoding.UTF8.GetBytes(salt))),\r\n        KeyDerivationPrf.HMACSHA512,\r\n        IterationCount,\r\n        48);\r\n    Crypter.Key = pb.Take(32).ToArray();\r\n    Crypter.IV = pb.Skip(32).Take(16).ToArray();\r\n}\r\n```\r\n But I can't as it uses  **KeyDerivation.Pbkdf2** which is a part of _Microsoft.AspNetCore.Cryptography.KeyDerivation_  namespace in **.netcore** . I know about **Rfc2898DeriveBytes** class but it is based on **HMACSHA1**.  Am I missing something? Does an equivalent implementation for **PBKDF2** based on **HMACSHA512** exist in .**netstandard2.0**?"},{"Id":"7601217646","Type":"IssuesEvent","CreatedAt":"2018-04-28T11:00:57","Actor":"thomasclaudiushuber","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/719","RelatedDescription":"Opened issue \"Different build output for classic projects: NuGet packages vs project reference. Is this on purpose?\" (#719) at dotnet/standard","RelatedBody":"Hi there,\r\n\r\nI have a WPF app (.NET Framework 4.6.1, classic .csproj) that references a .NET Standard 1.3 project that itself references another Multi-targeted project (.NET Standard 1.3 and .NET Framework 4.6.1).\r\n\r\nI've set `<RestoreProjectStyle>PackageReference</RestoreProjectStyle>` in the csproj file of the WPF app, but seems this is only important for NuGet packages?\r\n\r\nI would expect that the WPF app gets these dlls in the output directory:\r\n\r\n![image](https://user-images.githubusercontent.com/7116546/39395631-e0f9a786-4ae0-11e8-91f4-ecacadee72fc.png)\r\n\r\nBut it is actually copies these dlls to the output directory:\r\n\r\n![image](https://user-images.githubusercontent.com/7116546/39395639-ee646884-4ae0-11e8-9ecb-78f0eff1afcd.png)\r\n\r\nIf the Storage Lib is referenced as a NuGet package, it works as expected:\r\n\r\n![image](https://user-images.githubusercontent.com/7116546/39395643-fe20684a-4ae0-11e8-8d8a-d2015b262057.png)\r\n\r\nIs this the expected behavior? When migrating the WPF app to SDK-style project format, it works also as expected as shown in the first picture.\r\n\r\n\r\n"},{"Id":"7601081418","Type":"IssuesEvent","CreatedAt":"2018-04-28T09:33:37","Actor":"mperdeck","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/663","RelatedDescription":"Closed issue \"When running ASP.NET Core web site targeting net47 in IIS, dotnet.exe does not appear in process list\" (#663) at dotnet/standard","RelatedBody":"I just converted a large legacy site to Net Core. Because of some old code, I have to target net47 instead of netcoreapp2.0 / netstandard2.0.\r\n\r\nProblem is that when I run the site in IIS, it starts up correctly, but then I cannot attach the debugger. The process list (Debug | Attach to process) does not show the dotnet.exe process at all.\r\n\r\nTo investigate this:\r\n* I created a new ASP.NET Core web application in Visual Studio 2017 targeting netcoreapp2.0, \r\n* published it (dotnet publish) and \r\n* pointed my IIS web site to the published directory. \r\n\r\nAfter hitting the site, I was able to attach to the dotnet.exe process ok.\r\n\r\n````\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  \r\n  <!-- dotnet.exe shows up in process list in Visual Studio 2017 -->\r\n  \r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.All\" Version=\"2.0.3\" />\r\n  </ItemGroup>\r\n\r\n  <ItemGroup>\r\n    <DotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"2.0.1\" />\r\n  </ItemGroup>\r\n</Project>\r\n````\r\n\r\nI then retargeted it to net47 because that is what my site uses. \r\n* Because Microsoft.AspNetCore.All does not support net47, I replaced it with enough individual packages to make the site compile. \r\n* Published it (dotnet publish -f net47). \r\n* Pointed the IIS site to the new net47 published directory. \r\n\r\nI could load the site ok and navigate around. However, dotnet.exe no longer appeared in the process list.\r\n\r\n````\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  \r\n  <!-- dotnet.exe does NOT show up in process list in Visual Studio 2017 -->\r\n  \r\n  <PropertyGroup>\r\n    <TargetFramework>net47</TargetFramework>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore\" Version=\"2.0.*\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Hosting\" Version=\"2.0.*\" />\r\n    <PackageReference Include=\"Microsoft.Extensions.Configuration\" Version=\"2.0.*\" />\r\n    <PackageReference Include=\"Microsoft.Extensions.Logging\" Version=\"2.0.*\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Http.Abstractions\" Version=\"2.0.*\" />\r\n    <PackageReference Include=\"Microsoft.Extensions.DependencyInjection\" Version=\"2.0.*\" />\r\n    <PackageReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Design\" Version=\"2.0.*\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Mvc\" Version=\"2.0.*\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.StaticFiles\" Version=\"2.0.*\" />\r\n    <PackageReference Include=\"Microsoft.VisualStudio.Web.BrowserLink\" Version=\"2.0.*\" />\r\n  </ItemGroup>\r\n\r\n  <ItemGroup>\r\n    <DotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"2.0.1\" />\r\n  </ItemGroup>\r\n</Project>\r\n````\r\n\r\n\r\nIs there any way I can debug a site running in IIS that targets the Net Framework?\r\n\r\n"},{"Id":"7600173317","Type":"PullRequestEvent","CreatedAt":"2018-04-27T23:38:24","Actor":"weshaggard","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/715","RelatedDescription":"Merged pull request \"Update BuildTools to preview1-02725-03 (master)\" (#715) at dotnet/standard","RelatedBody":""}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"7614671436","Type":"IssuesEvent","CreatedAt":"2018-05-02T04:28:23","Actor":"tastyeggs","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/29448","RelatedDescription":"Opened issue \"Introduce an alternate way to work with EventSource that is not-so-magical\" (#29448) at dotnet/corefx","RelatedBody":"When trying to create an new EventSource in my F# code, I'm unable to use Keywords, as that needs to be defined as a list of constants in an inner class of the EventSource; F# does not support inner classes.\r\n\r\nWhile this can be pushed off as an F# issue (where there's already a bug that's being tracked), IMHO this is unnecessary complexity. There needs to be a *purely* functional way to instantiate and interact with an EventSource without any magic. Lots of things unexpectedly don't work -- subclassing an EventSource, Keywords etc.\r\n\r\nAlso all these issues can only be caught at run-time!\r\n\r\nMagic almost always hurts."},{"Id":"7614118618","Type":"PullRequestEvent","CreatedAt":"2018-05-02T00:45:25","Actor":"danmosemsft","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/29428","RelatedDescription":"Merged pull request \"Code cleanup in roslyn regex tests port\" (#29428) at dotnet/corefx","RelatedBody":"Small PR. Code cleanup & prep work for rex input string tests.\r\n\r\n- Remove duplicates leftovers.\r\n- Remove runSubExpression check in InlineData as we now \"fuzz\" all tests.\r\n- Move the quantifier tests (4 tests) to the \"not run on netfx\" section as these were the only tests that hang during the sub expression fuzzing on netfx."}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"7614769022","Type":"IssuesEvent","CreatedAt":"2018-05-02T05:11:19","Actor":"davkean","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/26556","RelatedDescription":"Opened issue \"Naming violation fixers need better heuristics\" (#26556) at dotnet/roslyn","RelatedBody":"I find myself never using the default naming violation fixer - it almost always suggests nonsensical fixes for a code base as old as mine with various naming styles over the years.\r\n\r\nWe ran into exactly the same situation when we did naming rules with FxCop, and we added better heuristics to suggest more sensible name. \r\n\r\nAs I fix up this Visual Basic code base, I'm going to add all the individual suggestions that I ignored from it:\r\n\r\nSyntax|Suggested|What I actually renamed to\r\n---|---|---\r\n`Private Shared m_DefaultInstance As BuildEventCommandLineDialog`|s_m_DefaultInstance|s_defaultInstance\r\n`m_CommandLine As String`|_m_CommandLine|_commandLine\r\n`Private ReadOnly _ID As String`|_iD|_id\r\n`Private _UIShellService As IVsUIShell`|_uIShellService|_uiShellService\r\n`Protected m_ScalingCompleted As Boolean`|M_ScalingCompleted|ScalingCompleted\r\n`Private Const s_anyCPUPlatformName As String = \"Any CPU\"`|S_anyCPUPlatformName|AnyCPUPlatformName\r\n`Private _DTE As EnvDTE.DTE`|_dTE|_dte\r\n`Private s_helpTopic As String`|s_helpTopic|_helpTopic|\r\n\r\n\r\n"},{"Id":"7614729693","Type":"IssuesEvent","CreatedAt":"2018-05-02T04:54:04","Actor":"davkean","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/25952","RelatedDescription":"Closed issue \"IDE0032 \"Use Auto Property\" breaking VB code with initial value\" (#25952) at dotnet/roslyn","RelatedBody":"**Version Used**: \r\n\r\nVS 15.6.5\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. \r\n\r\n```vb\r\nPublic Class Class1\r\n\r\n    Private _testProperty As String = \"initial value\"\r\n\r\n    Public Property TestProperty() As String\r\n        Get\r\n            Return _testProperty\r\n        End Get\r\n        Set\r\n            _testProperty = Value\r\n        End Set\r\n    End Property\r\n\r\nEnd Class\r\n```\r\n\r\n2. IDE0032 Quick Action\r\n\r\n```vb\r\nPublic Class Class1\r\n\r\n    Public Property TestProperty() As String\r\n= \"initial value\"\r\n\r\nEnd Class\r\n```\r\n\r\n**Expected Behavior**:\r\n\r\n```vb\r\nPublic Class Class1\r\n\r\n    Public Property TestProperty() As String = \"initial value\"\r\n\r\nEnd Class\r\n```\r\n\r\n**Actual Behavior**:\r\n\r\n![image](https://user-images.githubusercontent.com/1356444/38356017-8689722a-38f9-11e8-9e5e-35ea4fca52e0.png)\r\n"},{"Id":"7614547163","Type":"PullRequestEvent","CreatedAt":"2018-05-02T03:35:58","Actor":"jcouv","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/pull/26474","RelatedDescription":"Closed pull request \"Some fixes for patterns in IDE\" (#26474) at dotnet/roslyn","RelatedBody":"Addressed:\r\n- When typing a property-based pattern, completion should be offered for the name of the property. (this is working for many cases, but not all. A more general solution will use the upcoming `GetTypeInfo` API from the compiler)\r\n- `switch` keyword offered for switch expression.\r\n- Manually verified that `UpgradeProject` is properly offered.\r\n- spacing between type and positional pattern\r\n- missing spacing before positional pattern\r\n- typing `e is {` gets a newline before brace\r\n\r\nNot yet addressed:\r\n- typing `e switch {` then `return` produces badly indented closing brace. Formatting the document doesn't fix the issue. So that's likely a formatting problem.\r\n- completion isn't triggered in some contexts (inside property pattern in switch expression).\r\n\r\n```C#\r\n        _ = this switch\r\n        {\r\n        }; // typing this introduces extra newline and a bad indent on closing brace\r\n\r\n        _ = this switch { { P1: 1 } => 1, _ => 2 }; // missing completion on P1\r\n```"},{"Id":"7614540454","Type":"PullRequestEvent","CreatedAt":"2018-05-02T03:33:19","Actor":"jcouv","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/26555","RelatedDescription":"Opened pull request \"[WIP] Formatting for recursive patterns\" (#26555) at dotnet/roslyn","RelatedBody":"These are all the formatting changes from my previous PR (https://github.com/dotnet/roslyn/pull/26474) without any of the completion changes.\r\nThis PR is still work-in-progress. All the scenario that I know to be broken are captured with tests with PROTOTYPE marker (I intend to fix all those in this PR, unless we end up agreeing to punt to follow-up).\r\n\r\n@CyrusNajmabadi @Neme12 @heejaechang Sorry for the PR churn.\r\n\r\n<details><summary>Ask Mode template not completed</summary>\r\n\r\n<!-- This template is not always required. If you aren't sure about whether it's needed or want help filling out the sections,\r\nsubmit the pull request and then ask us for help. :) -->\r\n\r\n### Customer scenario\r\n\r\nWhat does the customer do to get into this situation, and why do we think this\r\nis common enough to address for this release.  (Granted, sometimes this will be\r\nobvious \"Open project, VS crashes\" but in general, I need to understand how\r\ncommon a scenario is)\r\n\r\n### Bugs this fixes\r\n\r\n(either VSO or GitHub links)\r\n\r\n### Workarounds, if any\r\n\r\nAlso, why we think they are insufficient for RC vs. RC2, RC3, or RTW\r\n\r\n### Risk\r\n\r\nThis is generally a measure our how central the affected code is to adjacent\r\nscenarios and thus how likely your fix is to destabilize a broader area of code\r\n\r\n### Performance impact\r\n\r\n(with a brief justification for that assessment (e.g. \"Low perf impact because no extra allocations/no complexity changes\" vs. \"Low\")\r\n\r\n### Is this a regression from a previous update?\r\n\r\n### Root cause analysis\r\n\r\nHow did we miss it?  What tests are we adding to guard against it in the future?\r\n\r\n### How was the bug found?\r\n\r\n(E.g. customer reported it vs. ad hoc testing)\r\n\r\n### Test documentation updated?\r\n\r\nIf this is a new non-compiler feature or a significant improvement to an existing feature, update https://github.com/dotnet/roslyn/wiki/Manual-Testing once you know which release it is targeting.\r\n\r\n</details>\r\n"}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"7614633005","Type":"PullRequestEvent","CreatedAt":"2018-05-02T04:11:58","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5764","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#5764) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7614096259","Type":"PullRequestEvent","CreatedAt":"2018-05-02T00:36:36","Actor":"A-And","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5765","RelatedDescription":"Opened pull request \"[WIP] Add Delegate cast to Task constructors\" (#5765) at dotnet/corert","RelatedBody":"Running runtest.cmd /corefx on Windows with the `System.Threading.Tests` in the CoreFX test list would hit the following assertion \r\n\r\nhttps://github.com/dotnet/corert/blob/becb08ebde12bf06c8223b9b2a6232fb8f20ee51/src/System.Private.CoreLib/src/System/Threading/Tasks/Task.cs#L792\r\n\r\nThe assertion was caused by a Task constructors calling an overloaded constructor, both of which call PossiblyCaptureContext in their body. Is this intentional? \r\n\r\nAdding the dynamic cast resolves the method to\r\nhttps://github.com/dotnet/corert/blob/becb08ebde12bf06c8223b9b2a6232fb8f20ee51/src/System.Private.CoreLib/src/System/Threading/Tasks/Task.cs#L500\r\n\r\nThis seems to fix the problem without glaring regressions, including allowing `System.Threading.Tests` to run under Windows."},{"Id":"7614068505","Type":"PullRequestEvent","CreatedAt":"2018-05-02T00:25:36","Actor":"A-And","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5763","RelatedDescription":"Merged pull request \"Change x64 call to vcvarsall\" (#5763) at dotnet/corert","RelatedBody":"Changing the call to be in line with the rest of the calls."},{"Id":"7613779691","Type":"PullRequestEvent","CreatedAt":"2018-05-01T22:44:01","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5764","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#5764) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7612645820","Type":"PullRequestEvent","CreatedAt":"2018-05-01T18:18:35","Actor":"A-And","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5763","RelatedDescription":"Opened pull request \"Change x64 call to vcvarsall\" (#5763) at dotnet/corert","RelatedBody":"Changing the call to be in line with the rest of the calls."},{"Id":"7612401954","Type":"PullRequestEvent","CreatedAt":"2018-05-01T17:25:23","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5762","RelatedDescription":"Merged pull request \"Update DotnetCLIVersion.txt\" (#5762) at dotnet/corert","RelatedBody":""},{"Id":"7609963780","Type":"PullRequestEvent","CreatedAt":"2018-05-01T04:32:19","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5762","RelatedDescription":"Opened pull request \"Update DotnetCLIVersion.txt\" (#5762) at dotnet/corert","RelatedBody":""},{"Id":"7609460574","Type":"PullRequestEvent","CreatedAt":"2018-05-01T00:37:33","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5760","RelatedDescription":"Merged pull request \"Merge nmirror to master\" (#5760) at dotnet/corert","RelatedBody":""},{"Id":"7609375625","Type":"PullRequestEvent","CreatedAt":"2018-05-01T00:05:15","Actor":"luqunl","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5761","RelatedDescription":"Merged pull request \"Merge changes from TFS\" (#5761) at dotnet/corert","RelatedBody":"When merging, this PR, please ensure a merge commit is created as automation requires the merge commit.  Do not 'Squash and merge' or 'Rebase and merge'!"},{"Id":"7609356887","Type":"PullRequestEvent","CreatedAt":"2018-04-30T23:58:43","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5761","RelatedDescription":"Opened pull request \"Merge changes from TFS\" (#5761) at dotnet/corert","RelatedBody":"When merging, this PR, please ensure a merge commit is created as automation requires the merge commit.  Do not 'Squash and merge' or 'Rebase and merge'!"},{"Id":"7609149390","Type":"PullRequestEvent","CreatedAt":"2018-04-30T22:47:57","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5760","RelatedDescription":"Opened pull request \"Merge nmirror to master\" (#5760) at dotnet/corert","RelatedBody":""}],"ResultType":"GitHubEvent"},"SDK":{"Events":[{"Id":"7614689999","Type":"PullRequestEvent","CreatedAt":"2018-05-02T04:36:23","Actor":"livarcocc","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/2201","RelatedDescription":"Merged pull request \"[release/2.1.3xx] Add a tiered compilation build variable\" (#2201) at dotnet/sdk","RelatedBody":""},{"Id":"7613937056","Type":"IssuesEvent","CreatedAt":"2018-05-01T23:36:50","Actor":"jviau","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/issues/2206","RelatedDescription":"Opened issue \"Task GenerateAssemblyInfo should not run in the WPF temporary project\" (#2206) at dotnet/sdk","RelatedBody":"Currently `GenerateAssemblyInfo` runs during WPF markup compilation. This breaks incremental build and pollutes the obj directory with many `{hash}.AssemblyInfo.cs` files. Instead, the following should happen:\r\n\r\n1) Make `GenerateAssemblyInfo` run before `MarkupCompilePass1`\r\n2) Do not run `GenerateAssemblyInfo` inside the WPF temporary project.\r\n3) Re-include the original `AssemblyInfo.cs` generated from the original project in the WPF temporary project.\r\n  * Currently, `$(GeneratedAssemblyInfoFile)` is calculated using `$(MSBuildProjectName)`, this obviously will not work. It may need to change to use `$(AssemblyName)`"},{"Id":"7613278480","Type":"PullRequestEvent","CreatedAt":"2018-05-01T20:38:11","Actor":"tannergooding","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/2205","RelatedDescription":"Opened pull request \"Updating crossgen to pass -nologo by default\" (#2205) at dotnet/sdk","RelatedBody":"This resolves https://github.com/dotnet/sdk/issues/1404"},{"Id":"7613194678","Type":"IssuesEvent","CreatedAt":"2018-05-01T20:19:36","Actor":"dsplaisted","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/issues/2204","RelatedDescription":"Opened issue \"Packing a .NET Core Exe shouldn't include package dependency on Microsoft.NETCore.App\" (#2204) at dotnet/sdk","RelatedBody":"Today, if you pack an Exe project that targets netcoreapp2.0 or higher, the resulting package has a dependency on Microsoft.NETCore.App.  If you pack a library, you don't get the dependency in the package.\r\n\r\nI think the dependency is included for Exes to support project tools.  However, we would like to reconsider this default.\r\n\r\nSee https://github.com/Microsoft/msbuild/issues/3228 where it's causing issues with prodcon and MSBuild."},{"Id":"7613102378","Type":"IssuesEvent","CreatedAt":"2018-05-01T19:58:51","Actor":"livarcocc","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/issues/2202","RelatedDescription":"Closed issue \"dotnet pack doesn't include xmlserializer assembly\" (#2202) at dotnet/sdk","RelatedBody":"When forcing assembly to generate XmlSerializer assembly,when packing the project, this XmlSerializer assembly is not included in the nupkg.\r\n\r\nProject file:\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <TargetFramework>net47</TargetFramework>\r\n    <GenerateSerializationAssemblies>On</GenerateSerializationAssemblies>\r\n    <SGenUseProxyTypes>false</SGenUseProxyTypes>\r\n  </PropertyGroup>\r\n\r\n</Project>\r\n```\r\n\r\ncommand `dotnet pack myproject.csproj` generates following nuspec (in the obj folder):\r\n```xml\r\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<package xmlns=\"http://schemas.microsoft.com/packaging/2012/06/nuspec.xsd\">\r\n  <metadata>\r\n    <id>myproject</id>\r\n    <version>1.0.0</version>\r\n    <authors>myproject</authors>\r\n    <owners>myproject</owners>\r\n    <requireLicenseAcceptance>false</requireLicenseAcceptance>\r\n    <description>Package Description</description>\r\n    <dependencies>\r\n      <group targetFramework=\".NETFramework4.7\" />\r\n    </dependencies>\r\n  </metadata>\r\n  <files>\r\n    <file src=\"c:\\users\\styxxy\\Source\\Repos\\myproject\\myproject\\bin\\Debug\\net47\\myproject.dll\" target=\"lib\\net47\\myproject.dll\" />\r\n  </files>\r\n</package>\r\n```\r\n\r\nI would expect the XmlSerializer assembly to be included as well."},{"Id":"7612161227","Type":"IssuesEvent","CreatedAt":"2018-05-01T16:31:35","Actor":"weshaggard","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/issues/2203","RelatedDescription":"Opened issue \"Different build output for classic projects: NuGet packages vs project reference. Is this on purpose?\" (#2203) at dotnet/sdk","RelatedBody":"@thomasclaudiushuber commented on [Sat Apr 28 2018](https://github.com/dotnet/standard/issues/719)\n\nHi there,\r\n\r\nI have a WPF app (.NET Framework 4.6.1, classic .csproj) that references a .NET Standard 1.3 project that itself references another Multi-targeted project (.NET Standard 1.3 and .NET Framework 4.6.1).\r\n\r\nI've set `<RestoreProjectStyle>PackageReference</RestoreProjectStyle>` in the csproj file of the WPF app, but seems this is only important for NuGet packages?\r\n\r\nI would expect that the WPF app gets these dlls in the output directory:\r\n\r\n![image](https://user-images.githubusercontent.com/7116546/39395631-e0f9a786-4ae0-11e8-91f4-ecacadee72fc.png)\r\n\r\nBut it actually copies these dlls to the output directory:\r\n\r\n![image](https://user-images.githubusercontent.com/7116546/39395639-ee646884-4ae0-11e8-9ecb-78f0eff1afcd.png)\r\n\r\nIf the Storage Lib is referenced as a NuGet package, it works as expected:\r\n\r\n![image](https://user-images.githubusercontent.com/7116546/39395643-fe20684a-4ae0-11e8-8d8a-d2015b262057.png)\r\n\r\nIs this the expected behavior? When migrating the WPF app to SDK-style project format, it works also as expected as shown in the first picture.\r\n\r\n\r\n\n\n---\n\n@weshaggard commented on [Mon Apr 30 2018](https://github.com/dotnet/standard/issues/719#issuecomment-385512314)\n\n@Pilchie this looks like a potential issue in P2P references where should we move this issue to?\n\n---\n\n@Pilchie commented on [Mon Apr 30 2018](https://github.com/dotnet/standard/issues/719#issuecomment-385526239)\n\n@rrelyea and @nguerrera - Is this a restore assets issue, or a build task issue?\n\n---\n\n@nguerrera commented on [Mon Apr 30 2018](https://github.com/dotnet/standard/issues/719#issuecomment-385577182)\n\nMove it to dotnet/sdk\n\n"},{"Id":"7611262178","Type":"IssuesEvent","CreatedAt":"2018-05-01T13:10:18","Actor":"Styxxy","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/issues/2202","RelatedDescription":"Opened issue \"dotnet pack doesn't include xmlserializer assembly\" (#2202) at dotnet/sdk","RelatedBody":"When forcing assembly to generate XmlSerializer assembly,when packing the project, this XmlSerializer assembly is not included in the nupkg.\r\n\r\nProject file:\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <TargetFramework>net47</TargetFramework>\r\n    <GenerateSerializationAssemblies>On</GenerateSerializationAssemblies>\r\n    <SGenUseProxyTypes>false</SGenUseProxyTypes>\r\n  </PropertyGroup>\r\n\r\n</Project>\r\n```\r\n\r\ncommand `dotnet pack myproject.csproj` generates following nuspec (in the obj folder):\r\n```xml\r\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<package xmlns=\"http://schemas.microsoft.com/packaging/2012/06/nuspec.xsd\">\r\n  <metadata>\r\n    <id>myproject</id>\r\n    <version>1.0.0</version>\r\n    <authors>myproject</authors>\r\n    <owners>myproject</owners>\r\n    <requireLicenseAcceptance>false</requireLicenseAcceptance>\r\n    <description>Package Description</description>\r\n    <dependencies>\r\n      <group targetFramework=\".NETFramework4.7\" />\r\n    </dependencies>\r\n  </metadata>\r\n  <files>\r\n    <file src=\"c:\\users\\styxxy\\Source\\Repos\\myproject\\myproject\\bin\\Debug\\net47\\myproject.dll\" target=\"lib\\net47\\myproject.dll\" />\r\n  </files>\r\n</package>\r\n```\r\n\r\nI would expect the XmlSerializer assembly to be included as well."}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"991311154747199488","CreatedAt":"2018-05-01T13:39:31+00:00","UserScreenname":"dotnet","Text":"Do you have questions about async and await in C#?  Join @csharpfritz and @billwagner at 10a ET / 7a PT / 14:00 UTC… https://t.co/Sdn4F5XeZ2","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":58,"FavoriteCount":18,"RawContent":null},{"Id":"991060228220178432","CreatedAt":"2018-04-30T21:02:26+00:00","UserScreenname":"dotnet","Text":"Announcing the .NET Framework 4.7.2 https://t.co/Tx658XoEZG","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":526,"FavoriteCount":375,"RawContent":null},{"Id":"989532387775205376","CreatedAt":"2018-04-26T15:51:20+00:00","UserScreenname":"dotnet","Text":"Get the Azure Quick Start Guide for .NET Developers https://t.co/ALECzXryjk","Source":"<a href=\"http://twitter.com\" rel=\"nofollow\">Twitter Web Client</a>","RetweetCount":49,"FavoriteCount":21,"RawContent":null},{"Id":"987375741204508673","CreatedAt":"2018-04-20T17:01:35+00:00","UserScreenname":"dotnet","Text":"Help us plan the future of .NET! https://t.co/R0QoZVvXx4","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":125,"FavoriteCount":93,"RawContent":null},{"Id":"986692696507953152","CreatedAt":"2018-04-18T19:47:25+00:00","UserScreenname":"dotnet","Text":"Performance Improvements in .NET Core 2.1 https://t.co/6YMK8P99cZ","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":249,"FavoriteCount":153,"RawContent":null},{"Id":"986692437211987969","CreatedAt":"2018-04-18T19:46:23+00:00","UserScreenname":"dotnet","Text":"Announcing Visual Studio 2017 15.7 Preview 4 https://t.co/XYIzXNDMhn","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":62,"FavoriteCount":44,"RawContent":null},{"Id":"986400394786914304","CreatedAt":"2018-04-18T00:25:55+00:00","UserScreenname":"dotnet","Text":".NET Core April 2018 Update https://t.co/PuT2Jc7GBy","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":68,"FavoriteCount":33,"RawContent":null}]}},"RunOn":"2018-05-02T05:30:22.7697525Z","RunDurationInMilliseconds":8182}