{"Data":{"Blog":{"FeedItems":[{"Title":"New and improved NuGet Search is here!","PublishedOn":"2019-08-23T03:31:26+00:00","CommentsCount":4,"FacebookCount":0,"Summary":"It’s been a long time coming, and today we are excited to announce the new and improved search on NuGet.org leveraging Azure Search. We want to start this post with a huge thanks to you, the NuGet...","Href":"https://devblogs.microsoft.com/nuget/new-and-improved-nuget-search/","RawContent":null},{"Title":"Surfacing GitHub Usage for packages on NuGet.org","PublishedOn":"2019-07-17T20:00:23+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"There are several criteria you can use today to evaluate NuGet packages. We received feedback that you would like even more information to help choose the right packages. We&#8217;re excited to...","Href":"https://devblogs.microsoft.com/nuget/surfacing-github-usage-for-packages-on-nuget-org/","RawContent":null},{"Title":"NuGet Spring 2019 Roadmap","PublishedOn":"2019-04-10T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We published our last NuGet roadmap in June last year. Many of the features announced were major additions to NuGet and we have been hard at work to implement those over the last few months. In this...","Href":"https://devblogs.microsoft.com/nuget/nuget-spring-2019-roadmap/","RawContent":null},{"Title":"Enable repeatable package restores using a lock file","PublishedOn":"2018-12-17T08:00:00+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"With PackageReference, NuGet always tries to produce the same closure of package dependencies if the input package reference list has not changed. However, there are a few scenarios where it may not...","Href":"https://devblogs.microsoft.com/nuget/enable-repeatable-package-restores-using-a-lock-file/","RawContent":null},{"Title":"Lock down your dependencies using configurable trust policies","PublishedOn":"2018-12-05T08:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"For the past several months we have focused on various features to improve package security and trust. Around a year back, we had announced our plans on various signing functionalities that we have...","Href":"https://devblogs.microsoft.com/nuget/lock-down-your-dependencies-using-configurable-trust-policies/","RawContent":null},{"Title":"Improved package debugging experience with the NuGet.org symbol server","PublishedOn":"2018-11-16T08:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Starting today, you can publish symbol packages to the NuGet.org symbol server. With NuGet.org as a single service provider for libraries and symbols, package authors and consumers will have a...","Href":"https://devblogs.microsoft.com/nuget/improved-package-debugging-experience-with-the-nuget-org-symbol-server/","RawContent":null},{"Title":"Introducing Source Code Link for NuGet packages","PublishedOn":"2018-08-27T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"NuGet.org now supports surfacing source code repository link for NuGet packages. This will enable package authors to surface both the project&#8217;s website and the source repository using the...","Href":"https://devblogs.microsoft.com/nuget/introducing-source-code-link-for-nuget-packages/","RawContent":null},{"Title":"NuGet.org starts repo-signing packages","PublishedOn":"2018-08-10T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"In May, we implemented Stage 1 and enabled support for any NuGet.org user to submit signed packages to NuGet.org. Today, we are announcing Stage 2 of our NuGet package signing journey &#8211; tamper...","Href":"https://devblogs.microsoft.com/nuget/introducing-repository-signatures/","RawContent":null},{"Title":"NuGet Summer 2018 Roadmap","PublishedOn":"2018-07-02T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"This blog post provides insights into the NuGet team plans for the upcoming quarter (July &#8211; Sep 2018). In the March 2018 NuGet Spring 2018 Roadmap, we had outlined Package Signing,...","Href":"https://devblogs.microsoft.com/nuget/nuget-summer-2018-roadmap/","RawContent":null},{"Title":"Introducing signed package submissions to NuGet.org","PublishedOn":"2018-05-22T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"In September 2017, we announced our plans to improve the security of the NuGet ecosystem by introducing the ability for package authors to sign packages. Today, we want to announce support for any...","Href":"https://devblogs.microsoft.com/nuget/introducing-signed-package-submissions/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"10446949001","Type":"IssuesEvent","CreatedAt":"2019-09-18T23:10:06","Actor":"scottbommarito","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7568","RelatedDescription":"Opened issue \"Statistics graphs Y axis labels are odd when labels are less than 1k apart\" (#7568) at NuGet/NuGetGallery","RelatedBody":"Each label is 360 apart, but all labels between 1k and 2k are displaying as \"1k\" instead of \"1079\", \"1439\", etc.\r\n\r\nI imagine the problem also reproduces with millions and billions, e.g. if each label was 360,000 apart.\r\n\r\n![image](https://user-images.githubusercontent.com/18014088/65193028-515e5c00-da2e-11e9-8d27-9915a65a8d76.png)"},{"Id":"10445092031","Type":"PullRequestEvent","CreatedAt":"2019-09-18T18:16:29","Actor":"ryuyu","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/7563","RelatedDescription":"Merged pull request \"Enable sending mails to users.\" (#7563) at NuGet/NuGetGallery","RelatedBody":"Re-enables sending out mail to users."},{"Id":"10443437054","Type":"IssuesEvent","CreatedAt":"2019-09-18T14:52:02","Actor":"loic-sharma","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7567","RelatedDescription":"Opened issue \"[UX] Unlisting package redirects to package details page\" (#7567) at NuGet/NuGetGallery","RelatedBody":"### Is your feature request related to a problem? Please describe.\r\nWhen I unlist a package on nuget.org, I am redirected to my package's display package page. This makes it difficult to bulk unlist/relist packages (see https://github.com/NuGet/NuGetGallery/issues/6959).\r\n\r\n### Describe the solution you'd like\r\nDon't redirect to the Package Details page, instead, stay on the Manage Package page.\r\n\r\n/cc @anangaur \r\n"},{"Id":"10436643298","Type":"PullRequestEvent","CreatedAt":"2019-09-17T20:02:42","Actor":"scottbommarito","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/7566","RelatedDescription":"Merged pull request \"Do not throw if trying to list an unlisted package that is marked latest\" (#7566) at NuGet/NuGetGallery","RelatedBody":"https://github.com/NuGet/NuGetGallery/issues/7536\r\n\r\nRelisting a package properly resets the latest state of the package, so any packages that are unlisted and marked latest will be fixed. By throwing here, we are making it so that users cannot fix the data issue they have. "},{"Id":"10436632057","Type":"PullRequestEvent","CreatedAt":"2019-09-17T20:01:09","Actor":"scottbommarito","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/7436","RelatedDescription":"Closed pull request \"Block TLS 1.0 and 1.1\" (#7436) at NuGet/NuGetGallery","RelatedBody":"https://github.com/nuget/engineering/issues/2617"}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"10445803534","Type":"IssuesEvent","CreatedAt":"2019-09-18T19:55:44","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8608","RelatedDescription":"Opened issue \"Revert deterministic docs\" (#8608) at NuGet/Home","RelatedBody":""},{"Id":"10445782848","Type":"IssuesEvent","CreatedAt":"2019-09-18T19:52:44","Actor":"anangaur","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8607","RelatedDescription":"Opened issue \"dotnet add package output is not optimal \" (#8607) at NuGet/Home","RelatedBody":"Issues:\r\n1. Too verbose\r\n2. Not color scheme to indicate failure or warning\r\n\r\nExample of verbosity of the output for a successful install:\r\n```\r\nC:\\Users\\anangaur\\play\\tmp\\tmpsoln\r\nλ dotnet add package my.sample.lib\r\n  Writing C:\\Users\\anangaur\\AppData\\Local\\Temp\\tmp6A43.tmp\r\ninfo : Adding PackageReference for package 'my.sample.lib' into project 'C:\\Users\\anangaur\\play\\tmp\\tmpsoln\\tmpsoln.csproj'.\r\ninfo : Restoring packages for C:\\Users\\anangaur\\play\\tmp\\tmpsoln\\tmpsoln.csproj...\r\ninfo :   GET https://nuget.pkg.github.com/anangaur/download/my.sample.lib/index.json\r\ninfo :   GET https://api.nuget.org/v3-flatcontainer/my.sample.lib/index.json\r\ninfo :   OK https://api.nuget.org/v3-flatcontainer/my.sample.lib/index.json 216ms\r\ninfo :   OK https://nuget.pkg.github.com/anangaur/download/my.sample.lib/index.json 769ms\r\ninfo :   GET https://api.nuget.org/v3-flatcontainer/my.sample.lib/6.0.1/my.sample.lib.6.0.1.nupkg\r\ninfo :   OK https://api.nuget.org/v3-flatcontainer/my.sample.lib/6.0.1/my.sample.lib.6.0.1.nupkg 208ms\r\ninfo :   GET https://api.nuget.org/v3-flatcontainer/contentfilesexample/index.json\r\ninfo :   GET https://nuget.pkg.github.com/anangaur/download/contentfilesexample/index.json\r\ninfo :   GET https://api.nuget.org/v3-flatcontainer/nunit/index.json\r\ninfo :   GET https://nuget.pkg.github.com/anangaur/download/nunit/index.json\r\ninfo :   GET https://api.nuget.org/v3-flatcontainer/newtonsoft.json/index.json\r\ninfo :   GET https://nuget.pkg.github.com/anangaur/download/newtonsoft.json/index.json\r\ninfo :   OK https://api.nuget.org/v3-flatcontainer/newtonsoft.json/index.json 91ms\r\ninfo :   GET https://api.nuget.org/v3-flatcontainer/newtonsoft.json/10.0.2/newtonsoft.json.10.0.2.nupkg\r\ninfo :   OK https://api.nuget.org/v3-flatcontainer/newtonsoft.json/10.0.2/newtonsoft.json.10.0.2.nupkg 9ms\r\ninfo :   OK https://api.nuget.org/v3-flatcontainer/contentfilesexample/index.json 246ms\r\ninfo :   GET https://api.nuget.org/v3-flatcontainer/contentfilesexample/1.0.2/contentfilesexample.1.0.2.nupkg\r\ninfo :   OK https://api.nuget.org/v3-flatcontainer/nunit/index.json 248ms\r\ninfo :   OK https://api.nuget.org/v3-flatcontainer/contentfilesexample/1.0.2/contentfilesexample.1.0.2.nupkg 9ms\r\ninfo :   GET https://api.nuget.org/v3-flatcontainer/nunit/3.8.1/nunit.3.8.1.nupkg\r\ninfo :   OK https://api.nuget.org/v3-flatcontainer/nunit/3.8.1/nunit.3.8.1.nupkg 10ms\r\ninfo :   NotFound https://nuget.pkg.github.com/anangaur/download/contentfilesexample/index.json 378ms\r\ninfo :   NotFound https://nuget.pkg.github.com/anangaur/download/nunit/index.json 582ms\r\ninfo :   NotFound https://nuget.pkg.github.com/anangaur/download/newtonsoft.json/index.json 586ms\r\ninfo : Installing Newtonsoft.Json 10.0.2.\r\ninfo : Installing NUnit 3.8.1.\r\ninfo : Installing ContentFilesExample 1.0.2.\r\ninfo : Installing My.Sample.Lib 6.0.1.\r\ninfo : Package 'my.sample.lib' is compatible with all the specified frameworks in project 'C:\\Users\\anangaur\\play\\tmp\\tmpsoln\\tmpsoln.csproj'.\r\ninfo : PackageReference for package 'my.sample.lib' version '6.0.1' added to file 'C:\\Users\\anangaur\\play\\tmp\\tmpsoln\\tmpsoln.csproj'.\r\ninfo : Committing restore...\r\ninfo : Generating MSBuild file C:\\Users\\anangaur\\play\\tmp\\tmpsoln\\obj\\tmpsoln.csproj.nuget.g.props.\r\ninfo : Writing assets file to disk. Path: C:\\Users\\anangaur\\play\\tmp\\tmpsoln\\obj\\project.assets.json\r\nlog  : Restore completed in 4.73 sec for C:\\Users\\anangaur\\play\\tmp\\tmpsoln\\tmpsoln.csproj.\r\n```\r\n\r\nFor a failed install, it doesn;t indicate by color mechanism if anything failed unless I read the output. Eg.:\r\n![image](https://user-images.githubusercontent.com/14800916/65181120-32060580-da13-11e9-994c-d12d220b3bc0.png)\r\n"},{"Id":"10445626651","Type":"IssuesEvent","CreatedAt":"2019-09-18T19:30:19","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8600","RelatedDescription":"Closed issue \"Set ShouldSkipOptimize to true on 5.3 branch\" (#8600) at NuGet/Home","RelatedBody":""},{"Id":"10445112037","Type":"IssuesEvent","CreatedAt":"2019-09-18T18:19:09","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8603","RelatedDescription":"Closed issue \"NuGet packages produced with 3.0 SDK cannot be used by 2.2 SDK users...depending on your timezone\" (#8603) at NuGet/Home","RelatedBody":"Packages produced with a 3.0 .NET Core SDK cannot be consumed by 2.2 or 2.1 SDK users under the following conditions:\r\n\r\nThe producer:\r\n* Build and released a package with a .NET Core 3.0 SDK\r\n\r\nThe consumer:\r\n* The consumer is on a computer with the timezone set to GMT > 0 (e.g. Europe, Asia)\r\n* The consumer is attempting to produce their own package which contains the content from the 3.0 package. Example: `PackAsTool` projects, which re-distribute all dependencies in a new package.\r\n\r\nReal world example: https://github.com/natemcmaster/CommandLineUtils/issues/277\r\n\r\n## Details about Problem\r\n\r\nNuGet product used: dotnet.exe\r\ndotnet.exe --version: 3.0 RC1 / 2.2 (any)\r\n\r\n## Minimal repro\r\n\r\n1. Install both .NET Core 2.2 and 3.0 SDKs\r\n1. Switch computer timezone to UTC+1\r\n2. Run these steps\r\n```bash\r\n# Produce\r\necho '{\"sdk\":{\"version\": \"3.0.100-rc1-014190\" } }' > global.json\r\ndotnet new classlib -o ClassLib12345\r\ndotnet pack ClassLib12345 --output \"$(pwd)/nupkg\"\r\n\r\n# Consume\r\necho '{\"sdk\":{\"version\": \"2.2.300\" } }' > global.json\r\ndotnet new console -o MyConsoleTool\r\ndotnet add MyConsoleTool/ package ClassLib12345 --source \"$(pwd)/nupkg\"\r\ndotnet pack MyConsoleTool/ /p:PackAsTool=true\r\n```\r\n\r\n## Result\r\n\r\n`dotnet pack` fails due to https://github.com/NuGet/Home/issues/7395.\r\n\r\n> C:\\Program Files\\dotnet\\sdk\\2.2.300\\Sdks\\NuGet.Build.Tasks.Pack\\build\\NuGet.Build.Tasks.Pack.targets(199,5): error : The DateTimeOffset specified cannot be converted into a Zip file timestamp. [C:\\tmp\\MyConsoleTool\\MyConsoleTool.csproj]\r\nC:\\Program Files\\dotnet\\sdk\\2.2.300\\Sdks\\NuGet.Build.Tasks.Pack\\build\\NuGet.Build.Tasks.Pack.targets(199,5): error : Parameter name: value [C:\\tmp\\MyConsoleTool\\MyConsoleTool.csproj]\r\n\r\nThis appears to be a byproduct of the 3.0 \"deterministic pack\" feature.\r\n"},{"Id":"10445016918","Type":"IssuesEvent","CreatedAt":"2019-09-18T18:06:22","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8606","RelatedDescription":"Opened issue \"Insertion of 5.3.0.6251\" (#8606) at NuGet/Home","RelatedBody":"- [ ] VS\r\n- [ ] CLI\r\n- [ ] SDK\r\n- [ ] Toolset\r\n- [ ] Vendor green\r\n- [ ]Automation green"},{"Id":"10444290986","Type":"IssuesEvent","CreatedAt":"2019-09-18T16:28:21","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8605","RelatedDescription":"Opened issue \"Improve NuGetFeedbackDiagnosticFileProvider\" (#8605) at NuGet/Home","RelatedBody":"The initial implementation just replicated what was being done before: include a static file.\r\n\r\nThis has the risk that if multiple solutions were restored, the static file might not be related to the VS instance that is being used to report a problem with the feedback tool.\r\n\r\nIdeas for improvement:\r\n* Regen dgspec with static filename when feedback triggered\r\n* Regen dgspec with unique filename when feedback triggered\r\n* Only write dgspec when feedback triggered, not on every PR restore\r\n"},{"Id":"10439764998","Type":"IssuesEvent","CreatedAt":"2019-09-18T07:11:20","Actor":"erik-kallen","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8604","RelatedDescription":"Opened issue \"Packages.lock.json different hashes on different machines\" (#8604) at NuGet/Home","RelatedBody":"We have a very simple project, whose content looks like\r\n\r\n```\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.2</TargetFramework>\r\n    <AspNetCoreHostingModel>InProcess</AspNetCoreHostingModel>\r\n    <RestorePackagesWithLockFile>true</RestorePackagesWithLockFile>\r\n    <RestoreLockedMode>true</RestoreLockedMode>\r\n  </PropertyGroup>\r\n\r\n\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.App\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Razor.Design\" Version=\"2.2.0\" PrivateAssets=\"All\" />\r\n    <PackageReference Include=\"Newtonsoft.Json\" Version=\"12.0.2\" />\r\n    <PackageReference Include=\"Serilog.AspNetCore\" Version=\"3.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAs seen in the project, we have enabled a lock file.\r\n\r\nNow to the problem: We have two machines, and neither of them can restore using the package.lock.json generated by the other due to content hash differences. When running `dotnet restore --force-evaluate` Machine A produces:\r\n\r\n```\r\n...\r\n  \"runtime.native.System.IO.Compression\": {\r\n    \"type\": \"Transitive\",\r\n    \"resolved\": \"4.3.0\",\r\n    \"contentHash\": \"b+V9JC/Ii3sR659flBeaBJww111425tgjcDS1k+hqV4sGh9FALRDBvJnDtQ895gAzpPTUOFDHdqaZ2Et7BpZMg==\",\r\n...\r\n  \"runtime.rhel.7-x64.runtime.native.System.Security.Cryptography.OpenSsl\": {\r\n    \"type\": \"Transitive\",\r\n    \"resolved\": \"4.3.0\",\r\n    \"contentHash\": \"T5NvFgmHX0WH4c7lP72krsnk+IJI10vJf2j2twGE+5QBRA4RyRAgD+ZjEgdmpLOjW4B+nZGaadewTCUcR899OQ==\"\r\n...\r\n  \"System.Collections.NonGeneric\": {\r\n    \"type\": \"Transitive\",\r\n    \"resolved\": \"4.3.0\",\r\n    \"contentHash\": \"LE/oChpRvkSi3U25u0KnJcI44JeDZ1QJCyN4qFDx2uusEypdqR24w7lKYw21eYe5esuCBuc862wRmpF63Yy1KQ==\",\r\n```\r\n\r\n\r\nOn Machine B, `dotnet restore --force-evaluate` instead produces\r\n```\r\n...\r\n  \"runtime.native.System.IO.Compression\": {\r\n    \"type\": \"Transitive\",\r\n    \"resolved\": \"4.3.0\",\r\n    \"contentHash\": \"INBPonS5QPEgn7naufQFXJEp3zX6L4bwHgJ/ZH78aBTpeNfQMtf7C6VrAFhlq2xxWBveIOWyFzQjJ8XzHMhdOQ==\",\r\n...\r\n  \"runtime.rhel.7-x64.runtime.native.System.Security.Cryptography.OpenSsl\": {\r\n    \"type\": \"Transitive\",\r\n    \"resolved\": \"4.3.0\",\r\n    \"contentHash\": \"nyFNiCk/r+VOiIqreLix8yN+q3Wga9+SE8BCgkf+2BwEKiNx6DyvFjCgkfV743/grxv8jHJ8gUK4XEQw7yzRYg==\"\r\n...\r\n  \"System.Collections.NonGeneric\": {\r\n    \"type\": \"Transitive\",\r\n    \"resolved\": \"4.3.0\",\r\n    \"contentHash\": \"prtjIEMhGUnQq6RnPEYLpFt8AtLbp9yq2zxOSrY7KJJZrw25Fi97IzBqY7iqssbM61Ek5b8f3MG/sG1N2sN5KA==\",\r\n...\r\n```\r\n\r\nAs you can see, the content hashes for packages are different, although the versions are the same.\r\n\r\nWe have seen #7682, and we have cleared both `C:\\Users\\User\\.nuget\\packages` and `C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder`, as instructed in that issue. We also (as seen below) have NuGet versions later than 4.9.3 (which is the version where #7682 is fixed). And finally, we do not see all hashes changing, just the three mentioned above.\r\n\r\nMachine A info:\r\n```\r\n> dotnet --version\r\n2.2.402\r\n> dotnet nuget --version\r\nNuGet Command Line\r\n5.2.0.3\r\n```\r\n\r\nMachine B info:\r\n```\r\n> dotnet --version\r\n2.2.108\r\n> dotnet nuget --version\r\nNuGet Command Line\r\n4.9.4.0\r\n```\r\n\r\n### Verbose Logs\r\nThe output from `dotnet restore --force-evaluate --verbosity diag` are attached as MachineA.txt and MachineB.txt\r\n[MachineA.txt](https://github.com/NuGet/Home/files/3621650/MachineA.txt)\r\n\r\n[MachineB.txt](https://github.com/NuGet/Home/files/3624899/MachineB.txt)\r\n"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"10286366828","Type":"IssuesEvent","CreatedAt":"2019-08-26T13:37:09","Actor":"karann-msft","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/38","RelatedDescription":"Opened issue \"New and improved NuGet Search is live!\" (#38) at NuGet/Announcements","RelatedBody":"Announcing the new and improved search on NuGet.org leveraging Azure Search.\r\n\r\n[Blogpost](https://devblogs.microsoft.com/nuget/new-and-improved-nuget-search/) | [Feedback Issue](https://github.com/NuGet/NuGetGallery/issues/4124)"},{"Id":"10168692521","Type":"IssuesEvent","CreatedAt":"2019-08-07T21:31:54","Actor":"anangaur","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/37","RelatedDescription":"Opened issue \"Using OData to query NuGet.org repository is being deprecated\" (#37) at NuGet/Announcements","RelatedBody":"We introduced `V3 APIs` in early 2016. We have made continuous investments to make it more reliable, performant and secure. Going forward, we plan to bring all new features and improvements only to the newer `V3 APIs`. As part of this strategy, we are deprecating the usage of `OData` queries. Subsequently, we plan to **disable the `OData` queries starting Feb 5th, 2020**.\r\n\r\n**Call to Action: Transition to V3 APIs**\r\n\r\nHere are some resources to help you with the migration:\r\n* [NuGet Server `V3 APIs` reference](https://devblogs.microsoft.com/nuget/switching-from-wcf-odata-to-web-api/)\r\n* [Guide to transition from NuGet `V2 API` to `V3 API`](https://docs.microsoft.com/en-us/nuget/guides/api/query-for-all-published-packages). \r\n* [Blog post: Switching from WCF OData to Web API](https://devblogs.microsoft.com/nuget/switching-from-wcf-odata-to-web-api/)\r\n\r\nIf you need further help in moving your use case to `V3 APIs`, do reach out to us at [support@nuget.org](mailto:support@nuget.org).\r\n"},{"Id":"10115721045","Type":"IssuesEvent","CreatedAt":"2019-07-30T22:44:31","Actor":"shoter","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Announcements/issues/36","RelatedDescription":"Closed issue \"Replace reference to codeplex issue numer 3072\" (#36) at NuGet/Announcements","RelatedBody":"This is copy of codeplex issue number 3072 as it is referenced inside code. I should do a PR shortly to address this one.\r\n\r\nThe place where it is referenced is RuntimeHelper.cs:150\r\n\r\n\r\n---\r\n\r\nWe're hitting an issue with Microsoft.Bcl package where NuGet is adding a binding redirect for a binary that is considered part of the framework, this causes the application to crash because the binding redirect refers to assembly version that is not available at runtime.\r\n\r\n@Repro:\r\n\r\n1. Create a new Console Application targeting 4.5\r\n2. Create a new Portable Library targeting .NET Framework 4.5, Silverlight 4, Windows Phone 7.5 and .NET for Windows Store apps\r\n3. Add a reference to the portable library from the Console Application\r\n4. Install the Microsoft.Bcl package (1.0.16-rc) to both projects\r\n\r\n@Expected: No binding redirect for System.Runtime in the .NET Framework 4.5 project because a ___later version___ is part of the target framework (see C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.5\\RedistList\\FrameworkList.xml)\r\n@Actual: Binding redirect\r\n\r\n<dependentAssembly>\r\n<assemblyIdentity name=\"System.Runtime\" publicKeyToken=\"b03f5f7f11d50a3a\" culture=\"neutral\" />\r\n<bindingRedirect oldVersion=\"0.0.0.0-1.5.11.0\" newVersion=\"1.5.11.0\" />\r\n</dependentAssembly>\r\n\r\n\r\nYou can use the IVsFrameworkMultiTargeting to determine if a given assembly version is available as part of a given target framework.\r\nMake sure when you fix this, that you only skip the binding redirect if ___a later or same version___ is available in the framework.  \r\n2013-02-22\r\n\r\n---\r\n\r\nWe'll do this in 2.4 release.  \r\n2013-02-26\r\n\r\n---\r\n\r\nIs IVsFrameworkMultiTargeting.IsReferenceableInTargetFx the method I need to call? What should I pass to pwszAssemblySpec?  \r\n2013-06-08\r\n\r\n---\r\n\r\nIt's the full name of the assembly (mscorlib, Version=[version], PublicKeyToken=[token], Culture=[culture]). It can either contain all the information (key, version, etc), or just the simple name (\"mscorlib\")  \r\n2013-06-10\r\n\r\n---\r\n\r\nSo look like I can only check for the same version of the target framework. Can't check for a later version using this method, because I don't know what future versions will be.  \r\n2013-06-12\r\n\r\n---\r\n\r\nThat's fine. That's exactly the behavior we want. For example, System.Runtime didn't ship in 4.0, but did in 4.5. We still want a binding redirect generated for it in 4.0, but not for 4.5.  \r\n2013-06-13\r\n\r\n---\r\n\r\nI followed the exact same steps above, but there's no binding redirect added to the Console Application. It's only added to the __Portable Library project__. Is that the bug?  \r\n2013-06-13\r\n\r\n---\r\n\r\nThe binding redirects added to the Portable Library project seems to come from the Microsoft.Bcl package itself (from the content folder's app.config.transform file). this looks like a non-bug.\r\n2013-06-13\r\n\r\n  \r\nI'm chasing up the repro with Eric St. John. He walked through the code and figured out where it was broken.\r\n\r\nIt's the not the app.config.tranform, notice how the net45 content is empty, and hence no transforms. We also marked our transforms with a special marker that indicates that we added the redirects . The binding redirects we were seeing were not coming from us.  \r\n2013-06-13\r\n\r\n---\r\n\r\nAre you seeing the binding redirects added to the Console Application or the Portable Library? I don't see binding redirect added to Console Application, only the Portable Library.  \r\n2013-06-13\r\n\r\n---\r\n\r\nYes I'm talking about the ConsoleApplication. The binding redirects in the portable library project are expected, and do not affect runtime behavior (as the app.config is ignored and not copied to the app project), and hence can't cause an application to crash.\r\n\r\nI've found another repro (NuGet has really weird logic around when it decides to add binding redirects so it was hard to find a repro).\r\n\r\nThe repro is instead of using the Microsoft.Bcl package, install the Microsoft.Net.Http, 2.2.3-beta package. Make sure you are targeting __4.5__ from the ConsoleApplication and the exact platforms that I called out above for portable.  \r\n2013-06-13\r\n\r\n---\r\n\r\nAlso, the ConsoleApplication must be referencing the portable project before installing the package.  \r\n2013-06-13\r\n\r\n---\r\n\r\nOK now I can repro  \r\n2013-06-14\r\n\r\n---\r\n\r\nOK, I've got a fix now. It no longer adds the binding redirect for System.Runtime.dll, but still adds one for System.Net.Http.Primitives. I guess it's expected, right? Please confirm.\r\n\r\n```\r\n<assemblyBinding xmlns=\"urn:schemas-microsoft-com:asm.v1\">\r\n<dependentAssembly>\r\n<assemblyIdentity name=\"System.Net.Http.Primitives\" publicKeyToken=\"b03f5f7f11d50a3a\" culture=\"neutral\" />\r\n<bindingRedirect oldVersion=\"0.0.0.0-4.2.3.0\" newVersion=\"4.2.3.0\" />\r\n</dependentAssembly>\r\n</assemblyBinding>\r\n```  \r\n2013-06-14\r\n\r\n---\r\n\r\n\r\nYes that's correct. System.Net.Http.Primitives does not exist in the framework.  \r\n2013-06-14\r\n\r\n---\r\n\r\nFixed in changeset b8d515f6341193b970d2a9d837e580e762d2eb71  \r\n2013-06-19\r\n\r\n---\r\n\r\ni get the same issue with my test project still, runtime being added... if i comment this out the tests run fine... if not i get exceptions thrown from json.net  \r\n2013-08-09\r\n\r\n---\r\n\r\n(or i can change the version up to 4.0.0.0 or something and it works)  \r\n2013-08-09"},{"Id":"10115715827","Type":"IssuesEvent","CreatedAt":"2019-07-30T22:43:23","Actor":"shoter","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/36","RelatedDescription":"Opened issue \"Replace reference to codeplex issue numer 3072\" (#36) at NuGet/Announcements","RelatedBody":"This is copy of codeplex issue number 3072 as it is referenced inside code. I should do a PR shortly to address this one.\r\n\r\nThe place where it is referenced is RuntimeHelper.cs:150\r\n\r\n\r\n---\r\n\r\nWe're hitting an issue with Microsoft.Bcl package where NuGet is adding a binding redirect for a binary that is considered part of the framework, this causes the application to crash because the binding redirect refers to assembly version that is not available at runtime.\r\n\r\n@Repro:\r\n\r\n1. Create a new Console Application targeting 4.5\r\n2. Create a new Portable Library targeting .NET Framework 4.5, Silverlight 4, Windows Phone 7.5 and .NET for Windows Store apps\r\n3. Add a reference to the portable library from the Console Application\r\n4. Install the Microsoft.Bcl package (1.0.16-rc) to both projects\r\n\r\n@Expected: No binding redirect for System.Runtime in the .NET Framework 4.5 project because a ___later version___ is part of the target framework (see C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.5\\RedistList\\FrameworkList.xml)\r\n@Actual: Binding redirect\r\n\r\n<dependentAssembly>\r\n<assemblyIdentity name=\"System.Runtime\" publicKeyToken=\"b03f5f7f11d50a3a\" culture=\"neutral\" />\r\n<bindingRedirect oldVersion=\"0.0.0.0-1.5.11.0\" newVersion=\"1.5.11.0\" />\r\n</dependentAssembly>\r\n\r\n\r\nYou can use the IVsFrameworkMultiTargeting to determine if a given assembly version is available as part of a given target framework.\r\nMake sure when you fix this, that you only skip the binding redirect if ___a later or same version___ is available in the framework.  \r\n2013-02-22\r\n\r\n---\r\n\r\nWe'll do this in 2.4 release.  \r\n2013-02-26\r\n\r\n---\r\n\r\nIs IVsFrameworkMultiTargeting.IsReferenceableInTargetFx the method I need to call? What should I pass to pwszAssemblySpec?  \r\n2013-06-08\r\n\r\n---\r\n\r\nIt's the full name of the assembly (mscorlib, Version=[version], PublicKeyToken=[token], Culture=[culture]). It can either contain all the information (key, version, etc), or just the simple name (\"mscorlib\")  \r\n2013-06-10\r\n\r\n---\r\n\r\nSo look like I can only check for the same version of the target framework. Can't check for a later version using this method, because I don't know what future versions will be.  \r\n2013-06-12\r\n\r\n---\r\n\r\nThat's fine. That's exactly the behavior we want. For example, System.Runtime didn't ship in 4.0, but did in 4.5. We still want a binding redirect generated for it in 4.0, but not for 4.5.  \r\n2013-06-13\r\n\r\n---\r\n\r\nI followed the exact same steps above, but there's no binding redirect added to the Console Application. It's only added to the __Portable Library project__. Is that the bug?  \r\n2013-06-13\r\n\r\n---\r\n\r\nThe binding redirects added to the Portable Library project seems to come from the Microsoft.Bcl package itself (from the content folder's app.config.transform file). this looks like a non-bug.\r\n2013-06-13\r\n\r\n  \r\nI'm chasing up the repro with Eric St. John. He walked through the code and figured out where it was broken.\r\n\r\nIt's the not the app.config.tranform, notice how the net45 content is empty, and hence no transforms. We also marked our transforms with a special marker that indicates that we added the redirects . The binding redirects we were seeing were not coming from us.  \r\n2013-06-13\r\n\r\n---\r\n\r\nAre you seeing the binding redirects added to the Console Application or the Portable Library? I don't see binding redirect added to Console Application, only the Portable Library.  \r\n2013-06-13\r\n\r\n---\r\n\r\nYes I'm talking about the ConsoleApplication. The binding redirects in the portable library project are expected, and do not affect runtime behavior (as the app.config is ignored and not copied to the app project), and hence can't cause an application to crash.\r\n\r\nI've found another repro (NuGet has really weird logic around when it decides to add binding redirects so it was hard to find a repro).\r\n\r\nThe repro is instead of using the Microsoft.Bcl package, install the Microsoft.Net.Http, 2.2.3-beta package. Make sure you are targeting __4.5__ from the ConsoleApplication and the exact platforms that I called out above for portable.  \r\n2013-06-13\r\n\r\n---\r\n\r\nAlso, the ConsoleApplication must be referencing the portable project before installing the package.  \r\n2013-06-13\r\n\r\n---\r\n\r\nOK now I can repro  \r\n2013-06-14\r\n\r\n---\r\n\r\nOK, I've got a fix now. It no longer adds the binding redirect for System.Runtime.dll, but still adds one for System.Net.Http.Primitives. I guess it's expected, right? Please confirm.\r\n\r\n```\r\n<assemblyBinding xmlns=\"urn:schemas-microsoft-com:asm.v1\">\r\n<dependentAssembly>\r\n<assemblyIdentity name=\"System.Net.Http.Primitives\" publicKeyToken=\"b03f5f7f11d50a3a\" culture=\"neutral\" />\r\n<bindingRedirect oldVersion=\"0.0.0.0-4.2.3.0\" newVersion=\"4.2.3.0\" />\r\n</dependentAssembly>\r\n</assemblyBinding>\r\n```  \r\n2013-06-14\r\n\r\n---\r\n\r\n\r\nYes that's correct. System.Net.Http.Primitives does not exist in the framework.  \r\n2013-06-14\r\n\r\n---\r\n\r\nFixed in changeset b8d515f6341193b970d2a9d837e580e762d2eb71  \r\n2013-06-19\r\n\r\n---\r\n\r\ni get the same issue with my test project still, runtime being added... if i comment this out the tests run fine... if not i get exceptions thrown from json.net  \r\n2013-08-09\r\n\r\n---\r\n\r\n(or i can change the version up to 4.0.0.0 or something and it works)  \r\n2013-08-09"},{"Id":"10105705706","Type":"IssuesEvent","CreatedAt":"2019-07-29T18:41:10","Actor":"anangaur","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/35","RelatedDescription":"Opened issue \"Machine readable output for dotnet list package\" (#35) at NuGet/Announcements","RelatedBody":"The spec for 'Machine readable output for dotnet list package' is ready for **review**:\r\n\r\n|Spec wiki|Discussion issue|\r\n|----------|------------------|\r\n|[Machine readable output for dotnet list package](https://github.com/NuGet/Home/wiki/%5BSpec%5D-Machine-readable-output-for-dotnet-list-package) | https://github.com/NuGet/Home/issues/7752 |"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1164220617710686209","CreatedAt":"2019-08-21T17:00:00+00:00","UserScreenname":"nuget","Text":"⚠ Restoring packages from https://t.co/KVB7werYQh might fail in some regions. We are investigating the issue. Follo… https://t.co/t69YZ9eFo1","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":4,"FavoriteCount":2,"RawContent":null},{"Id":"1162433926578626560","CreatedAt":"2019-08-16T18:40:19+00:00","UserScreenname":"nuget","Text":"Did you check out the new docs landing page? We tried to make it better and more useful. What do you think?… https://t.co/96nBP0rV5l","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":13,"FavoriteCount":3,"RawContent":null},{"Id":"1159229316351197184","CreatedAt":"2019-08-07T22:26:21+00:00","UserScreenname":"nuget","Text":"Using OData to query https://t.co/F9kiKfdOWi repository is being deprecated\n#Announcement \n\nhttps://t.co/dtelctlNOe","Source":"<a href=\"http://twitter.com/download/iphone\" rel=\"nofollow\">Twitter for iPhone</a>","RetweetCount":9,"FavoriteCount":3,"RawContent":null}]}},"RunOn":"2019-09-19T05:30:45.587951Z","RunDurationInMilliseconds":2667}