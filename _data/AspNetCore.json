{"Data":{"Blog":{"FeedItems":[{"Title":"Publish Improvements in Visual Studio 2017 version 15.7","PublishedOn":"2018-04-18T19:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today we released Visual Studio 2017 version 15.7 Preview 4. Our 15.7 update brings some exciting updates for publishing applications from Visual Studio that we’re excited to tell you about,...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/04/18/visual-studio-2017-15-7-p4-publish/","RawContent":null},{"Title":"What Happened to Bower?","PublishedOn":"2018-04-18T18:04:55+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Bower is a popular package management system for managing static content used by client-side web applications. Visual Studio provides rich support for Bower, including templates and package management...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/04/18/what-happened-to-bower/","RawContent":null},{"Title":"Library Manager: Client-side content manager for web apps","PublishedOn":"2018-04-17T21:48:24+00:00","CommentsCount":5,"FacebookCount":0,"Summary":"If you’re developing a modern web app, chances are your app will reference client-side JavaScript and CSS files like jQuery or bootstrap. Maybe you copy these from a previous project, download them,...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/04/17/library-manager-client-side-content-manager-for-web-apps/","RawContent":null},{"Title":"Blazor 0.2.0 release now available","PublishedOn":"2018-04-17T17:59:55+00:00","CommentsCount":5,"FacebookCount":0,"Summary":"Just a few weeks ago we announced the first preview release of an experimental web UI framework called Blazor. Blazor enables full-stack web development using C# and WebAssembly. So far thousands of...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/04/17/blazor-0-2-0-release-now-available/","RawContent":null},{"Title":"ASP.NET Core 2.1.0-preview2: Improvements to the Kestrel HTTP server","PublishedOn":"2018-04-13T00:42:44+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Change default transport to Sockets Building off the improvements to the managed sockets implementation in .NET Core we have changed the default transport in Kestrel from libuv to sockets. As a...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/04/12/asp-net-core-2-1-0-preview2-improvements-to-the-kestrel-http-server/","RawContent":null},{"Title":"ASP.NET Core 2.1.0-preview2 now available","PublishedOn":"2018-04-12T17:24:30+00:00","CommentsCount":4,"FacebookCount":0,"Summary":"Today we&#8217;re very happy to announce that the second preview of the next minor release of ASP.NET Core and .NET Core is now available for you to try out. This second preview includes many...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/04/12/asp-net-core-2-1-0-preview2-now-available/","RawContent":null},{"Title":"Get started building .NET web apps that run in the browser with Blazor","PublishedOn":"2018-03-22T17:00:26+00:00","CommentsCount":42,"FacebookCount":0,"Summary":"Today we released our first public preview of Blazor, a new experimental .NET web framework using C#/Razor and HTML that runs in the browser with WebAssembly. Blazor enables full stack web development...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/03/22/get-started-building-net-web-apps-in-the-browser-with-blazor/","RawContent":null},{"Title":"ASP.NET Core manageability and Application Insights improvements","PublishedOn":"2018-03-22T14:12:38+00:00","CommentsCount":4,"FacebookCount":0,"Summary":"There are many great investments on the ASP.NET Core 2.1 roadmap. These investments make ASP.NET Core applications easier to write, host, test, and make security and standards compliant. This blog...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/03/22/asp-net-core-manageability-and-application-insights-improvements/","RawContent":null},{"Title":"Announcing Preview 1 of ASP.NET MVC 5.2.5, Web API 5.2.5, and Web Pages 3.2.5","PublishedOn":"2018-03-19T22:00:27+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today we released Preview 1 of ASP.NET MVC 5.2.5, Web API 5.2.5, and Web Pages 3.2.5 on NuGet. This is a patch release that contains only bug fixes. You can find the full list of bug fixes for this...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/03/19/announcing-preview-1-of-asp-net-mvc-5-2-5-web-api-5-2-5-and-web-pages-3-2-5/","RawContent":null},{"Title":"ASP.NET Core 2.1.0-preview1: Functional testing of MVC applications","PublishedOn":"2018-03-05T18:30:28+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"For ASP.NET Core 2.1 we have created a new package, Microsoft.AspNetCore.Mvc.Testing, to help streamline in-memory end-to-end testing of MVC applications using TestServer. This package takes care of...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/03/05/asp-net-core-2-1-0-preview1-functional-testing-of-mvc-applications/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"7588869263","Type":"IssuesEvent","CreatedAt":"2018-04-26T04:12:51","Actor":"deanilvincent","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Home/issues/3096","RelatedDescription":"Opened issue \"FileSystem Publish sometimes it does includes \"Views\" folder and sometimes it doesn't\" (#3096) at aspnet/Home","RelatedBody":"Good day,\r\n\r\nI'm publishing some of my apps using FileSystem. These apps are written using ASP.NET Core MVC. They are some instances that the publish output does include the \"View\" folder from MVC and sometimes it doesn't include. I'm wondering, is it normal?\r\n\r\nI'd prefer the publish that doesn't include \"Views\" every time. Any help?\r\n\r\n.Net Core Version: 2.0\r\nIDE: Visual Studio 2017 Community"},{"Id":"7587872194","Type":"IssuesEvent","CreatedAt":"2018-04-25T22:25:08","Actor":"robinwilson16","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Home/issues/3095","RelatedDescription":"Opened issue \"Scafolding Models with bool Type Results in Error in CreateModel\" (#3095) at aspnet/Home","RelatedBody":"I have found if I add a bool field to a data model - i.e.:\r\n`public class Customer`\r\n    `{`\r\n        `...`\r\n        `public bool CanBeContacted { get; set; }`\r\n        `...`\r\n    `}`\r\n\r\nThen generate the model:\r\n`dotnet aspnet-codegenerator razorpage -m Customer -dc ApplicationDbContext -udl -outDir Pages\\Customers --referenceScriptLibraries`\r\n\r\nThe reference is incorrectly generated as:\r\n`<input asp-for=\"Customer.CanBeContacted\" /> @Html.DisplayNameFor(model => model.CanBeContacted))`\r\n\r\nWhen it misses out the model reference so it should be:\r\n`<input asp-for=\"Customer.CanBeContacted\" /> @Html.DisplayNameFor(model => model.**Customer**.CanBeContacted))`\r\n\r\nThis happens every time I try to add a bool field and run code generator so would seem to be a bug?\r\n\r\nThe fix is to add the model reference manually (the code is underlined as an error) then it works."},{"Id":"7587095520","Type":"IssuesEvent","CreatedAt":"2018-04-25T19:40:41","Actor":"natemcmaster","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Home/issues/3094","RelatedDescription":"Opened issue \"Allowing special characters in request url\" (#3094) at aspnet/Home","RelatedBody":"_From @joetherod on April 25, 2018 19:6_\n\nIn MVC 4.5, there are web.config params to allow special characters in the url request.\r\n\r\n<httpRuntime targetFramework=\"4.5\" maxUrlLength=\"1024\" maxQueryStringLength=\"4096\" requestPathInvalidCharacters=\"\" relaxedUrlToFileSystemMapping=\"true\" />\r\n\r\nCurrently, in MVC Core app that runs locally in Linux via Docker for Windows, fails on HTTP 400 when the url contains a accented character. This application was originally written in MVC 4 and was ported to MVC core. So, the request works in MVC 4 on Windows. Now it doesnt locally and when hosted in Linux via Docker.\r\n\r\neg Request: www.contoso.com/search/Paris%2C%20%C3%8Ele-de-France%20Region\r\n\r\nOriginal string was encoded in javascript before sending request, \"Paris, Île-de-France Region\"\r\n\r\nThe request doenst even make it to the app or any middleware that I have.\r\nAnd the application breaks the website, it doenst come up at all. It is like stuck once I request this url.\r\n\r\n\n\n_Copied from original issue: aspnet/aspnet-docker#414_"},{"Id":"7585565840","Type":"IssuesEvent","CreatedAt":"2018-04-25T15:06:27","Actor":"Tratcher","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Home/issues/3093","RelatedDescription":"Opened issue \"UseStaticFiles with [ or ] gives error 404\" (#3093) at aspnet/Home","RelatedBody":"_From @fredriksknese on April 25, 2018 15:1_\n\nIn my Configure I have added \r\n```\r\napp.UseStaticFiles(new StaticFileOptions() { RequestPath = \"/archive\", FileProvider = new PhysicalFileProvider(\"e:\\\\\") });\r\napp.UseDirectoryBrowser(new DirectoryBrowserOptions() { FileProvider = new PhysicalFileProvider(\"e:\\\\\"), RequestPath = \"/archive\" });\r\n```\r\nand it works. When I then browse to http://localhost:5000/archive/ it shows the files and I can click to view all files except files that contain ```[``` and ```]```. It handles spaces and åäö (swedish characters) perfectly.\r\n\r\nIn console it prints\r\n```\r\ninfo: Microsoft.AspNetCore.Hosting.Internal.WebHost[1]\r\n      Request starting HTTP/1.1 GET http://localhost:57205/archive/%5BWindows%5D%20tor.docker\r\ninfo: Microsoft.AspNetCore.Hosting.Internal.WebHost[2]\r\n      Request finished in 1.1952ms 404\r\n```\r\nI'm using Microsoft.AspNetCore.All version ```2.0.6``` and TargetFramework ```netcoreapp2.0```\n\n_Copied from original issue: aspnet/AspNetKatana#197_"},{"Id":"7584391209","Type":"IssuesEvent","CreatedAt":"2018-04-25T11:56:07","Actor":"drauch","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Home/issues/3092","RelatedDescription":"Opened issue \"Antiforgery token was meant for a different claims-based user than the current user\" (#3092) at aspnet/Home","RelatedBody":"We have a `UseStatusCodePagesWithReExecute` middleware in place which executes a 404 error action and returns a view. We have a user-feedback form on all our views (which is also included on the 404 page). The feedback form works fine on every page - BUT - on the 404 page sending feedback runs into:\r\n\r\n> Microsoft.AspNetCore.Antiforgery.AntiforgeryValidationException: \r\n> The provided antiforgery token was meant for a different claims-based user than the current user.\r\n\r\nDo we need to do something special in this scenario to make the token valid too?"},{"Id":"7584309290","Type":"IssuesEvent","CreatedAt":"2018-04-25T11:38:58","Actor":"fubar-coder","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Home/issues/3091","RelatedDescription":"Opened issue \"ActivatorUtilities don't use the longest matching ctor\" (#3091) at aspnet/Home","RelatedBody":"This seems to be similar to the same problem as described in #2871. Even though its title is \"ActivatorUtilities needs to use the longest available constructor when multiple ctors are available\", the problem that was solved was that multiple constructors don't throw anymore.\r\n\r\nThe unit test explicitly shows that the described problem (i.e. using the constructor with the most parameters) isn't solved. The \"solution\" by @pakrym is the addition of an additional attribute, but this should only be taken into consideration when there are multiple constructors with the same number of parameters that could all be resolved using DI or the additional parameters.\r\n\r\nThe main problem seems to be, that the `ConstructorMatcher` doesn't check if the constructors needs could be solved by using the given `IServiceProvider`."},{"Id":"7582381577","Type":"IssuesEvent","CreatedAt":"2018-04-25T03:50:39","Actor":"HaoK","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Home/issues/3090","RelatedDescription":"Closed issue \"Authorization Handlers Fail to run with nullable resource\" (#3090) at aspnet/Home","RelatedBody":"In Asp.Net Core 2, I have a handler with the following signature (the resource is a nullable type).  The handler fails to run when a pass a null resource is passed into it.  Im guessing this happens when you pass a null value for a ref type resource as well.\r\n\r\nHandler Signature:\r\ninternal class TreatyManagementGroupAccessRequirementHandler : AuthorizationHandler<TreatyManagementGroupAccessRequirement, int?>\r\n\r\nCode calling handler:\r\nint? tmg = editModel.TreatyInformation.TreatyManagementGroupId;\r\n\r\n// this code always fails and never runs the above Auth handler.\r\n                var authResult = await _authorizationService.AuthorizeAsync(User, tmg, Policies.RequireEditPermission);"}],"ResultType":"GitHubEvent"},"SignalR":{"Events":[{"Id":"7588946418","Type":"PullRequestEvent","CreatedAt":"2018-04-26T04:44:09","Actor":"JamesNK","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/SignalR/pull/2147","RelatedDescription":"Opened pull request \"Minor API cleanup\" (#2147) at aspnet/SignalR","RelatedBody":"https://github.com/aspnet/SignalR/issues/2131\r\n\r\nWaiting on approval for merge into 2.1 RTM."},{"Id":"7587887982","Type":"IssuesEvent","CreatedAt":"2018-04-25T22:29:37","Actor":"mqudsi","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/SignalR/issues/2146","RelatedDescription":"Closed issue \"SignalR Core does not use JsonOptions under APS.NET Core 2.0\" (#2146) at aspnet/SignalR","RelatedBody":"When using SignalR under ASP.NET Core 2.0, the assumption is that given the tight integration with ASP.NET Core 2.0 (e.g. added via `.AddSignalR()` call in `ConfigureServices()`) the global settings that apply to ASP.NET Core modules would apply to SignalR as well.\r\n\r\nHowever, the serialized output of the SignalR hub functions does not respect the `SerializerSettings` as set in `ConfigureServices'. \r\n\r\nFor example, given the following minimal configuration:\r\n\r\n```csharp\r\n        public void ConfigureServices(IServiceCollection services)\r\n        {\r\n            services.AddMvc()\r\n                .AddJsonOptions(\r\n                    options =>\r\n                    {\r\n                        options.SerializerSettings.ContractResolver = new CamelCasePropertyNamesContractResolver();\r\n                        options.SerializerSettings.Converters = new List<JsonConverter>()\r\n                        {\r\n                            new StringEnumConverter() { CamelCaseText = true },\r\n                        };\r\n                    }\r\n                );\r\n            services.AddSignalR();\r\n        }\r\n```\r\n\r\nThe assumption would be that the JS object received by the client upon calling the following hub function:\r\n\r\n```csharp\r\n    public enum Foo\r\n    {\r\n        Bar\r\n    }\r\n\r\n    public class BazHub: Hub\r\n    {\r\n        public async Task<Foo> qux()\r\n        {\r\n            return Foo.Bar;\r\n        }\r\n    }\r\n```\r\n\r\nwould be the following:\r\n\r\n```js\r\nconsole.log(await hub.foo());\r\n// bar\r\n```\r\n\r\nHowever, the result is actually\r\n\r\n```js\r\nconsole.log(await hub.foo());\r\n// 0\r\n```\r\n\r\nas the `SerializerSettings` instance used by the remainder of .NET Core is ignored here.\r\n\r\nOf course, it occurred to me that some non-JSON binary serialization might be used instead (a la protobuf), but that does not seem to be the case as explicitly prefacing the C# `enum` with a type-specific hint to the NewtonSoft serializer accomplishes the intended goal:\r\n\r\n```csharp\r\n    //This shouldn't be required since it should be possible to set the SerializerSettings globally\r\n    [JsonConverter(typeof(StringEnumConverter), new object[] { true })]\r\n    public enum Foo\r\n    {\r\n        Bar\r\n    }\r\n```\r\n\r\ncausing the stringified version of the enum member name (`bar`) to be emitted in camelCase.\r\n\r\nSince SignalR *is* using NewtonSoft here *and* it is possible to influence the emitted JS (i.e. this is not a case of protecting against future compatibility) via standard NewtonSoft decorator attributes, then SignalR should respect and use the globally defined `SerializerSettings`, or at least offer an option of doing so.\r\n\r\n* Versions of Server-Side NuGet Packages: 2.1.0-preview2-final\r\n* Versions of Client-Side NuGet/NPM Packages: 2.1.0\r\n* Are you using the C# client or the JavaScript client: JS\r\n* The Server you are using (Kestrel/HttpSysServer/IIS/IIS Express/Azure Web App/etc.): IIS Express\r\n* The Operating System on the Server (Windows/Linux/macOS): Windows 10\r\n* The Operating System on the Client (Windows/Linux/macOS): Windows 10\r\n* The Browser on the client, if using the JavaScript client (IE/Chrome/Edge/Firefox/etc.): N/A\r\n* If possible, please collect Network Traces and attach them (please do not post them inline, use a service like [Gist](https://gist.github.com) to upload them and link them in the issue)\r\n   * For either client you can use a tool such as [Fiddler](https://www.telerik.com/fiddler) for this\r\n   * Many browsers allow you to capture Network Traces from their Dev Tools. See sample instructions for Chrome: https://support.zendesk.com/hc/en-us/articles/204410413-Generating-a-HAR-file-for-troubleshooting\r\n* If possible, please collect logs from the client:\r\n   * Set the `logger` option on your `HubConnection` to `LogLevel.Trace` and find the logs in the Console tab of your Browser Dev Tools\r\n   * Example: `new signalR.HubConnection(url, { logger: signalR.LogLevel.Trace })`\r\n* If possible, please collect logs from the server:\r\n   * When using Kestrel/HttpSysServer, these are available on the Console by default\r\n   * When using IIS/IIS Express, these are available in Visual Studio in the \"ASP.NET Core Web Server\" section of the Output Window\r\n   * See https://docs.microsoft.com/en-us/aspnet/core/fundamentals/logging/?tabs=aspnetcore2x for more information"},{"Id":"7587853505","Type":"IssuesEvent","CreatedAt":"2018-04-25T22:19:58","Actor":"mqudsi","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/SignalR/issues/2146","RelatedDescription":"Opened issue \"SignalR Core does not use JsonOptions under APS.NET Core 2.0\" (#2146) at aspnet/SignalR","RelatedBody":"When using SignalR under ASP.NET Core 2.0, the assumption is that given the tight integration with ASP.NET Core 2.0 (e.g. added via `.AddSignalR()` call in `ConfigureServices()`) the global settings that apply to ASP.NET Core modules would apply to SignalR as well.\r\n\r\nHowever, the serialized output of the SignalR hub functions does not respect the `SerializerSettings` as set in `ConfigureServices'. \r\n\r\nFor example, given the following minimal configuration:\r\n\r\n```csharp\r\n        public void ConfigureServices(IServiceCollection services)\r\n        {\r\n            services.AddMvc()\r\n                .AddJsonOptions(\r\n                    options =>\r\n                    {\r\n                        options.SerializerSettings.ContractResolver = new CamelCasePropertyNamesContractResolver();\r\n                        options.SerializerSettings.Converters = new List<JsonConverter>()\r\n                        {\r\n                            new StringEnumConverter() { CamelCaseText = true },\r\n                        };\r\n                    }\r\n                );\r\n            services.AddSignalR();\r\n        }\r\n```\r\n\r\nThe assumption would be that the JS object received by the client upon calling the following hub function:\r\n\r\n```csharp\r\n    public enum Foo\r\n    {\r\n        Bar\r\n    }\r\n\r\n    public class BazHub: Hub\r\n    {\r\n        public async Task<Foo> qux()\r\n        {\r\n            return Foo.Bar;\r\n        }\r\n    }\r\n```\r\n\r\nwould be the following:\r\n\r\n```js\r\nconsole.log(await hub.foo());\r\n// bar\r\n```\r\n\r\nHowever, the result is actually\r\n\r\n```js\r\nconsole.log(await hub.foo());\r\n// 0\r\n```\r\n\r\nas the `SerializerSettings` instance used by the remainder of .NET Core is ignored here.\r\n\r\nOf course, it occurred to me that some non-JSON binary serialization might be used instead (a la protobuf), but that does not seem to be the case as explicitly prefacing the C# `enum` with a type-specific hint to the NewtonSoft serializer accomplishes the intended goal:\r\n\r\n```csharp\r\n    //This shouldn't be required since it should be possible to set the SerializerSettings globally\r\n    [JsonConverter(typeof(StringEnumConverter), new object[] { true })]\r\n    public enum Foo\r\n    {\r\n        Bar\r\n    }\r\n```\r\n\r\ncausing the stringified version of the enum member name (`bar`) to be emitted in camelCase.\r\n\r\nSince SignalR *is* using NewtonSoft here *and* it is possible to influence the emitted JS (i.e. this is not a case of protecting against future compatibility) via standard NewtonSoft decorator attributes, then SignalR should respect and use the globally defined `SerializerSettings`, or at least offer an option of doing so.\r\n\r\n* Versions of Server-Side NuGet Packages: 2.1.0-preview2-final\r\n* Versions of Client-Side NuGet/NPM Packages: 2.1.0\r\n* Are you using the C# client or the JavaScript client: JS\r\n* The Server you are using (Kestrel/HttpSysServer/IIS/IIS Express/Azure Web App/etc.): IIS Express\r\n* The Operating System on the Server (Windows/Linux/macOS): Windows 10\r\n* The Operating System on the Client (Windows/Linux/macOS): Windows 10\r\n* The Browser on the client, if using the JavaScript client (IE/Chrome/Edge/Firefox/etc.): N/A\r\n* If possible, please collect Network Traces and attach them (please do not post them inline, use a service like [Gist](https://gist.github.com) to upload them and link them in the issue)\r\n   * For either client you can use a tool such as [Fiddler](https://www.telerik.com/fiddler) for this\r\n   * Many browsers allow you to capture Network Traces from their Dev Tools. See sample instructions for Chrome: https://support.zendesk.com/hc/en-us/articles/204410413-Generating-a-HAR-file-for-troubleshooting\r\n* If possible, please collect logs from the client:\r\n   * Set the `logger` option on your `HubConnection` to `LogLevel.Trace` and find the logs in the Console tab of your Browser Dev Tools\r\n   * Example: `new signalR.HubConnection(url, { logger: signalR.LogLevel.Trace })`\r\n* If possible, please collect logs from the server:\r\n   * When using Kestrel/HttpSysServer, these are available on the Console by default\r\n   * When using IIS/IIS Express, these are available in Visual Studio in the \"ASP.NET Core Web Server\" section of the Output Window\r\n   * See https://docs.microsoft.com/en-us/aspnet/core/fundamentals/logging/?tabs=aspnetcore2x for more information"},{"Id":"7587829692","Type":"IssuesEvent","CreatedAt":"2018-04-25T22:13:43","Actor":"stackt52","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/SignalR/issues/2145","RelatedDescription":"Opened issue \"JavaScript client failing to connect to asp.net core 2.1 app implementing SignalR\" (#2145) at aspnet/SignalR","RelatedBody":"I'm new to the dotnet platform. I've been trying to create a server app that implements signalR in order to push notifications to connected clients in real time (according to the blog: [https://blogs.msdn.microsoft.com/webdev/2018/02/27/asp-net-core-2-1-0-preview1-getting-started-with-signalr/](https://blogs.msdn.microsoft.com/webdev/2018/02/27/asp-net-core-2-1-0-preview1-getting-started-with-signalr)) but i've been having challenges having the client subscribe to push notifications services implemented on the server side using SignalR. I'm using .NET Core SDK 2.1.300-preview2, which ships with signalR, and for the client I'm using an `npm` module @aspnet/signalr@1.0.0-preview2-final.  \r\n\r\nThe client is a pure HTML5 app, and I'm adding the client signalR library using the `<script>` tag. When I run the client in order to connect I'm getting these errors in the browser console:\r\n![console](https://user-images.githubusercontent.com/21298951/39275251-f517e3d4-48e4-11e8-8893-b457e7981f5a.png)\r\nSnapshot of the code I'm using to establish connection:\r\n![client_code](https://user-images.githubusercontent.com/21298951/39275341-398ca73e-48e5-11e8-8803-f05df48a9733.png)\r\n\r\nAt first I thought maybe it's the CORS issue, but I've enabled CORS in my backend app to allow all origins, headers, and methods, but still getting the same error.\r\n\r\nI'm running both the client and server on macOs High Sierra.\r\nHow can I resolve this error?\r\n"},{"Id":"7587354761","Type":"PullRequestEvent","CreatedAt":"2018-04-25T20:32:25","Actor":"BrennanConroy","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/SignalR/pull/2143","RelatedDescription":"Merged pull request \"EchoAll scenario doesn't work well with warmup\" (#2143) at aspnet/SignalR","RelatedBody":"Warmup runs will fill up the connection pipes on the server and when the connections are closed the server will still be processing messages because that's what we do. Then the main run will start while the warmup messages are still running, ruining our benchmark results"},{"Id":"7587351132","Type":"IssuesEvent","CreatedAt":"2018-04-25T20:31:42","Actor":"BrennanConroy","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/SignalR/issues/2144","RelatedDescription":"Opened issue \"Revisit warmup on SignalREchoAll scenario\" (#2144) at aspnet/SignalR","RelatedBody":"https://github.com/aspnet/SignalR/pull/2143"}],"ResultType":"GitHubEvent"},"Mvc":{"Events":[{"Id":"7588490285","Type":"IssuesEvent","CreatedAt":"2018-04-26T01:56:41","Actor":"ajaybhargavb","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Mvc/issues/7711","RelatedDescription":"Opened issue \"Consider writing an analyzer to warn against using multiple [FromBody] in an action method\" (#7711) at aspnet/Mvc","RelatedBody":""},{"Id":"7587868839","Type":"IssuesEvent","CreatedAt":"2018-04-25T22:24:10","Actor":"dougbu","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Mvc/issues/7710","RelatedDescription":"Opened issue \"Unable to test web site with Microsoft.AspNetCore.App dependency\" (#7710) at aspnet/Mvc","RelatedBody":"Found while verifying aspnet/Release#302.\r\n\r\n## Repro steps\r\n1. create empty folder e.g. `md netCore21RC1Api`\r\n2. `cd netCore21RC1Api`\r\n3. `dotnet new webapi --name netCore21RC1Api --output .\\netCore21RC1Api\\`\r\n4. `dotnet new xunit --name XUnitTest --output .\\XUnitTest\\`\r\n5. `dotnet new sln`\r\n6. `dotnet sln add .\\netCore21RC1Api\\netCore21RC1Api.csproj`\r\n7. `dotnet sln add .\\XUnitTest\\XUnitTest.csproj`\r\n8. ` dotnet add .\\XUnitTest\\XUnitTest.csproj reference .\\netCore21RC1Api\\netCore21RC1Api.csproj`\r\n9. `dotnet add .\\XUnitTest\\XUnitTest.csproj package Microsoft.AspNetCore.Mvc.Testing -v 2.1.0-rc1-30667`\r\n10. create an `xunit.runner.json` file in the .\\XUnitTest directory containing at least\r\n  ``` json\r\n  {\r\n    \"shadowCopy\": false\r\n  }\r\n  ```\r\n  - This setting [should](https://xunit.github.io/docs/configuring-with-json.html#items) be irrelevant for .NET Core 2.1 tests. Including it just in case&hellip;\r\n11. `dotnet build`\r\n12. Confirm app and test project work fine separately (with project reference but that's it):\r\n    a. `cd netCore21RC1Api`\r\n    b. `dotnet run --no-build`\r\n    c. browse to https://localhost:5001/api/values\r\n    d. kill the app\r\n    e. `cd ..\\XUnitTest\\`\r\n    f. `dotnet test` --no-build`\r\n\r\n13. Update .\\UnitTest1.cs to contain:\r\n  ``` c#\r\n  using System;\r\n  using System.Net;\r\n  using System.Net.Http;\r\n  using System.Threading.Tasks;\r\n  using Microsoft.AspNetCore.Mvc.Testing;\r\n  using netCore21RC1Api;\r\n  using Xunit;\r\n\r\n  namespace XUnitTest\r\n  {\r\n    public class UnitTest1 : IClassFixture<WebApplicationFactory<Startup>>\r\n    {\r\n        private readonly WebApplicationFactory<Startup> _factory;\r\n\r\n        public UnitTest1(WebApplicationFactory<Startup> factory)\r\n        {\r\n            _factory = factory;\r\n        }\r\n\r\n        [Fact]\r\n        public void Test1()\r\n        {\r\n        }\r\n\r\n        [Fact]\r\n        public async Task HomePage_Redirects()\r\n        {\r\n            // Arrange\r\n            var client = _factory.CreateDefaultClient();\r\n\r\n            // Act\r\n            var response = await client.GetAsync(\"/\");\r\n\r\n            // Assert\r\n            Assert.Equal(HttpStatusCode.RedirectKeepVerb, response.StatusCode);\r\n        }\r\n    }\r\n  }\r\n  ```\r\n14. `dotnet build`\r\n15. `dotnet test --no-build`\r\n\r\n### Expected\r\nA successful run of both tests.\r\n\r\n### Actual\r\nThe `XUnitTest.UnitTest1.HomePage_Redirects` test fails with no error given. `XUnitTest.UnitTest1.Test1` still works fine. (Both tests fail if the server is started in the constructor i.e. the `CreateDefaultClient()` was not placed in a single test.)\r\n\r\n### Execution in Visual Studio\r\nVisual Studio's Test Explorer window provides more information about the failure:\r\n![image](https://user-images.githubusercontent.com/6431421/39275499-52bacbfa-489a-11e8-9e04-33e6209521cf.png)\r\n\r\n## Details\r\n`dotnet --info`:\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.1.300-rc1-008662\r\n Commit:    6ae1926fb0\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.14393\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.300-rc1-008662\\\r\n\r\nHost (useful for support):\r\n  Version: 2.1.0-rc1-26423-06\r\n  Commit:  b50a96ee38\r\n\r\n.NET Core SDKs installed:\r\n  2.1.200-preview-007474 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.200-preview-007517 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.200-preview-007576 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.200-preview-007587 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.300-preview2-008523 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.300-rc1-008662 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.0-preview2-30552 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.0-rc1-30661 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.0-preview2-30552 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.0-rc1-30661 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.0.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.0-preview2-26403-06 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.0-rc1-26423-06 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```"},{"Id":"7587693028","Type":"PullRequestEvent","CreatedAt":"2018-04-25T21:41:10","Actor":"danroth27","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Mvc/pull/7659","RelatedDescription":"Closed pull request \"StatusCode() to take HttpStatusCode as parameter\" (#7659) at aspnet/Mvc","RelatedBody":"**Summary of the changes:**\r\nAdded extension method for StatusCode to take HttpStatusCode as parameter.\r\n---\r\n**Description:**\r\nFirst there are these two methods:\r\n```\r\nStatusCode(int statusCode)\r\nStatusCode(HttpStatusCode statusCode)\r\n```\r\n\r\nThis is their object overload:\r\n`StatusCode(int statusCode, object value)`\r\n\r\n\r\nExtension method does not exist for **(and I just added it)**\r\n`StatusCode(HttpStatusCode statusCode, object value)`\r\n\r\n---\r\n\r\n**Reasons to add this extension method:**\r\n- Adds flexibility to use `HttpStatusCode` . No need to cast `HttpStatusCode` to `int`: \r\n```\r\nreturn StatusCode((int) HttpStatusCode.ExpectationFailed, \"Failed to fetch resource.\");\r\n```\r\n\r\n- Help to prevent issues with invalid HttpStatusCodes: (example: typo 41 instead of 417)\r\n```\r\nreturn StatusCode(41, \"Failed to fetch resource.\"); // triggers server error (w/ Postman)\r\n```\r\n"},{"Id":"7587676164","Type":"IssuesEvent","CreatedAt":"2018-04-25T21:37:30","Actor":"danroth27","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Mvc/issues/7709","RelatedDescription":"Opened issue \"Revert https://github.com/aspnet/Mvc/pull/6902\" (#7709) at aspnet/Mvc","RelatedBody":"We've decided to not propagate usage of `System.Net.HttpStatusCode` across the ASP.NET Core APIs, and instead consistently recommend `Microsoft.AspNetCore.Http.StatusCode`. We should revert https://github.com/aspnet/Mvc/pull/6902 before shipping 2.1."},{"Id":"7587645316","Type":"IssuesEvent","CreatedAt":"2018-04-25T21:30:52","Actor":"mkArtakMSFT","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Mvc/issues/6997","RelatedDescription":"Closed issue \"ProducesResponseTypeAttribute doesn't accept System.Net.HttpStatusCode\" (#6997) at aspnet/Mvc","RelatedBody":"https://github.com/aspnet/Mvc/blob/79e576b86c040d676dcd96a6e666dc75f79da211/src/Microsoft.AspNetCore.Mvc.Core/ProducesResponseTypeAttribute.cs#L14\r\n\r\nIt would be neat if you've able to do this:\r\n`[ProducesResponseType(typeof(SomeType), HttpStatusCode.OK)]`\r\n\r\nOr even better:\r\n`[ProducesResponseType<SomeType>(HttpStatusCode.OK)]`\r\n\r\nInstead of:\r\n`[ProducesResponseType(typeof(SomeType), (int) HttpStatusCode.OK)]`\r\n"},{"Id":"7587519626","Type":"IssuesEvent","CreatedAt":"2018-04-25T21:04:43","Actor":"mkArtakMSFT","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Mvc/issues/6937","RelatedDescription":"Closed issue \"test async call not effectiveness in asp.net core\" (#6937) at aspnet/Mvc","RelatedBody":"I want to test effectiveness async request vs sync request in asp.net core 2.0. For this in Program file set Kestrel ThreadCount option to 1.\r\n\r\n```\r\npublic class Program\r\n{\r\n    public static void Main(string[] args)\r\n    {\r\n        var host = new WebHostBuilder()\r\n            //.UseKestrel(options =>  //core 1.1\r\n            //{\r\n            //  options.ThreadCount = 1;\r\n            //})\r\n            .UseLibuv(options=> options.ThreadCount = 1) //core 2.0\r\n            .UseContentRoot(Directory.GetCurrentDirectory())\r\n            .UseIISIntegration()\r\n            .UseStartup<Startup>()\r\n            .UseApplicationInsights()\r\n            .Build();\r\n\r\n        host.Run();\r\n    }\r\n}\r\n```\r\n\r\nThen write simple code in the controller for call async method. in Index action set the start time to ViewBag, then call Doing function async, finally set end time to ViewBag.\r\n\r\n```\r\npublic class HomeController : Controller\r\n{\r\n    public async Task<IActionResult> Index()\r\n    {\r\n        ViewBag.Start = DateTime.Now;\r\n\r\n        await Doing();\r\n\r\n        ViewBag.Finish = DateTime.Now;\r\n\r\n        return View();\r\n    }\r\n\r\n    public async Task Doing()\r\n    {\r\n        await Task.Delay(5000);\r\n    }\r\n}\r\n```\r\n\r\nView Code is:\r\n\r\n```\r\n<div class=\"row\">\r\n    Start: @ViewBag.Start\r\n</div>\r\n<div class=\"row\">\r\n    Finish: @ViewBag.Finish\r\n</div>\r\n```\r\nAfter run app and browsing page in two browsers Simultaneously, I expected that two request start time be approximately equal. but in the result, after the first request finished, second is started.\r\n\r\nOutput in two browsers for\r\n\r\n```\r\nStart: 10/10/2017 10:16:36 AM\r\nFinish: 10/10/2017 10:16:43 AM\r\n\r\nStart: 10/10/2017 10:16:43 AM\r\nFinish: 10/10/2017 10:16:50 AM \r\n```\r\nWhat is wrong in my test or concept?"}],"ResultType":"GitHubEvent"},"Identity":{"Events":[{"Id":"7584684521","Type":"IssuesEvent","CreatedAt":"2018-04-25T12:51:49","Actor":"melvillo","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Identity/issues/1770","RelatedDescription":"Opened issue \"2fa recovery code is invalid\" (#1770) at aspnet/Identity","RelatedBody":"Hi,\r\nSeems there is an issue with 2fa recovery code as it's not working.\r\n1. Create a new ASP.NET Core Web project with built-in authentication, and deploy the db as default schema\r\n2. Create a new user, and enable it's 2fa by using Microsoft Authentication app or Google's, copy the 2fa recovery code\r\n3. Log out, and re-Log in, but use the 2fa recovery code to reset the 2fa settings, then you can get the error message\r\n\r\nnetcoreapp2.0\r\nMicrosoft.AspNetCore.All            Version=\"2.0.6\" \r\nMicrosoft.EntityFrameworkCore.Tools          Version=\"2.0.2\""},{"Id":"7580136803","Type":"PullRequestEvent","CreatedAt":"2018-04-24T17:57:46","Actor":"jbagga","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Identity/pull/1769","RelatedDescription":"Opened pull request \"AllowAnonymous for external login providers\" (#1769) at aspnet/Identity","RelatedBody":"Addresses #1762\r\n\r\nWhile using the global authorization filter, `ConfirmEmail` is not accessible when clicking the verification email link (when logged out). So adding the attribute to it as well.\r\n\r\n"},{"Id":"7577613802","Type":"IssuesEvent","CreatedAt":"2018-04-24T10:55:35","Actor":"Misanthrop87","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Identity/issues/1768","RelatedDescription":"Opened issue \"Map asp.net core 2.0 Identity to existing DB schema\" (#1768) at aspnet/Identity","RelatedBody":"I have built a small web application with asp.net core 2.0 MVC. In this web application, I did not implement any authentication methods so far.\r\n\r\nRight now I have an MSSQL database running in the background and I can add/view/edit/delete users from the database. I adapted this tutorial and followed it pretty closely. However I also added some functionality like localization and stuff, and everything is running pretty smoothly.\r\n\r\nMy next goal is to enable authentication and authorization. The authentication part shall be straightforward. The goal is that the application will be running as an intranet solution. This means the authentication method just shall check if the Windows User is existing in the previously mentioned database. I don't want to create a separate login. However, it might be that there is a Windows user in the active directory, which is not part of the database. This User should just be able to see a default error page.\r\n\r\nI made quite a huge research and I also tried a lot of different stuff, however, I do absolutely not find any \"database first\" tutorial for this part or any other documentation which explains what to do.\r\n\r\nI actually \"just\" want to teach the asp.net core 2.0 identity framework that it shall look into my user-table and check if the current windows user is existent and if not to forward him to the error page. A second step would be to load all the roles which this user is assigned to from the mapping table.\r\n\r\nAny kind of help would be highly appreciated."},{"Id":"7574772745","Type":"IssuesEvent","CreatedAt":"2018-04-23T22:11:10","Actor":"javiercn","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/aspnet/Identity/issues/1762","RelatedDescription":"Reopened issue \"External login provider is not accessible when using global authorize filter\" (#1762) at aspnet/Identity","RelatedBody":"When an external login provider is configured, and a global authorize filter is applied, clicking the button to navigate to the provider (say Twitter sign in) redirects back to the current Login page.\r\n\r\nTo allow anonymous users to log in to an external provider while using a global authorize filter, the user can scaffold the `ExternalLogin.cshtml.cs` page and add the `AllowAnonymous` attribute to the `ExternalLoginModel`.\r\n\r\nPlease note, if this is something we want to allow by default, a corresponding change must also be made in aspnet/Scaffolding repo."},{"Id":"7574748122","Type":"IssuesEvent","CreatedAt":"2018-04-23T22:04:54","Actor":"blowdart","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Identity/issues/1762","RelatedDescription":"Closed issue \"External login provider is not accessible when using global authorize filter\" (#1762) at aspnet/Identity","RelatedBody":"When an external login provider is configured, and a global authorize filter is applied, clicking the button to navigate to the provider (say Twitter sign in) redirects back to the current Login page.\r\n\r\nTo allow anonymous users to log in to an external provider while using a global authorize filter, the user can scaffold the `ExternalLogin.cshtml.cs` page and add the `AllowAnonymous` attribute to the `ExternalLoginModel`.\r\n\r\nPlease note, if this is something we want to allow by default, a corresponding change must also be made in aspnet/Scaffolding repo."},{"Id":"7574739710","Type":"IssuesEvent","CreatedAt":"2018-04-23T22:02:48","Actor":"javiercn","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Identity/issues/1767","RelatedDescription":"Closed issue \"Wrong file name _Layout.chstml after scafolding Identity\" (#1767) at aspnet/Identity","RelatedBody":"Visual Studio 2017 15.7 Preview 4, .NET Core SDK 2.1.300-preview2-008533\r\n\r\nNew Project\r\nASP.NET Core Web Application\r\nWebApplication with indvidual Accounts\r\nNew Scaffolded Item\r\nIdentity\r\nCheck only \"Account/Login\"\r\nThere is a typo now in Areas/Identity/Pages/_ViewStart.cshtml\r\n\r\n@{\r\n    Layout = \"/Pages/Shared/_Layout.**chstml**\";\r\n}\r\n\r\n**Should be:**\r\n\r\n@{\r\n    Layout = \"/Pages/Shared/_Layout.cshtml\";\r\n}\r\n"},{"Id":"7574610030","Type":"IssuesEvent","CreatedAt":"2018-04-23T21:33:12","Actor":"HSchwichtenberg","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Identity/issues/1767","RelatedDescription":"Opened issue \"Wrong file name _Layout.chstml after scafolding Identity\" (#1767) at aspnet/Identity","RelatedBody":"Visual Studio 2017 15.7 Preview 4, .NET Core SDK 2.1.300-preview2-008533\r\n\r\nNew Project\r\nASP.NET Core Web Application\r\nWebApplication with indvidual Accounts\r\nNew Scaffolded Item\r\nIdentity\r\nCheck only \"Account/Login\"\r\nThere is a typo now in Areas/Identity/Pages/_ViewStart.cshtml\r\n\r\n@{\r\n    Layout = \"/Pages/Shared/_Layout.**chstml**\";\r\n}\r\n\r\n**Should be:**\r\n\r\n@{\r\n    Layout = \"/Pages/Shared/_Layout.cshtml\";\r\n}\r\n"}],"ResultType":"GitHubEvent"},"Kestrel":{"Events":[{"Id":"7588260106","Type":"IssuesEvent","CreatedAt":"2018-04-26T00:31:24","Actor":"joetherod","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/issues/2524","RelatedDescription":"Closed issue \"Asp Net MVC Core App getting Http Bad Request\" (#2524) at aspnet/KestrelHttpServer","RelatedBody":"The request doesnt seem to make it to the MVC Core application and no errors are thrown. The browser just returns 400 Bad Request. The url contains an accented character.\r\n\r\nuri encoded in javascript and part of url:\r\nParis%2C%20%C3%8Ele-de-France%20Region\r\nactual value:\r\nParis, Île-de-France Region\r\n\r\nHow do I configure Kestrel to allow the characters.\r\nThe originial app MVC 4 running in IIS allows the url request.\r\n"},{"Id":"7587517337","Type":"PullRequestEvent","CreatedAt":"2018-04-25T21:04:17","Actor":"pakrym","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/pull/2523","RelatedDescription":"Merged pull request \"Add debug kestrel PR run\" (#2523) at aspnet/KestrelHttpServer","RelatedBody":""},{"Id":"7587366372","Type":"IssuesEvent","CreatedAt":"2018-04-25T20:34:44","Actor":"tmds","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/issues/2525","RelatedDescription":"Opened issue \"Sockets Transport is missing OnWriterCompleted handler\" (#2525) at aspnet/KestrelHttpServer","RelatedBody":"This is still missing from the Sockets transport and allows a client to block the timeout logic by not reading as explained here: https://github.com/aspnet/KestrelHttpServer/issues/1771#issuecomment-297524780.\r\n\r\nCC @halter73 @davidfowl \r\n"},{"Id":"7587220113","Type":"IssuesEvent","CreatedAt":"2018-04-25T20:05:39","Actor":"joetherod","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/issues/2524","RelatedDescription":"Opened issue \"Asp Net MVC Core App getting Http Bad Request\" (#2524) at aspnet/KestrelHttpServer","RelatedBody":"The request doesnt seem to make it to the MVC Core application and no errors are thrown. The browser just returns 400 Bad Request. The url contains an accented character.\r\n\r\nuri encoded in javascript and part of url:\r\nParis%2C%20%C3%8Ele-de-France%20Region\r\nactual value:\r\nParis, Île-de-France Region\r\n\r\nHow do I configure Kestrel to allow the characters.\r\nThe originial app MVC 4 running in IIS allows the url request.\r\n"},{"Id":"7585893830","Type":"PullRequestEvent","CreatedAt":"2018-04-25T15:56:46","Actor":"pakrym","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/pull/2523","RelatedDescription":"Opened pull request \"Add debug kestrel PR run\" (#2523) at aspnet/KestrelHttpServer","RelatedBody":""},{"Id":"7581849438","Type":"IssuesEvent","CreatedAt":"2018-04-25T00:29:42","Actor":"mikeharder","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/issues/2503","RelatedDescription":"Closed issue \"Flaky Test: Hang in Libuv and Sockets FunctionalTests/netcoreapp2.1\" (#2503) at aspnet/KestrelHttpServer","RelatedBody":"Kestrel FunctionalTests are hanging frequently on CI:\r\n\r\n# KestrelHttpServer\r\n```\r\n[17:46:13] :\t [Step 4/7]   Starting test group: Libuv.FunctionalTests/netcoreapp2.1\r\n[17:46:13] :\t [Step 4/7]   Microsoft (R) Test Execution Command Line Tool Version 15.7.0-preview-20180221-13\r\n[17:46:13] :\t [Step 4/7]   Copyright (c) Microsoft Corporation.  All rights reserved.\r\n[17:46:13] :\t [Step 4/7]   \r\n[17:46:14] :\t [Step 4/7]   Starting test execution, please wait...\r\n[17:46:14] :\t [Step 4/7]   Logging Vstest Diagnostics in file: C:\\b\\w\\1e8cd6334ef22651\\artifacts\\logs\\Libuv.FunctionalTests-netcoreapp2.1-17674.diag\r\n[17:46:15] :\t [Step 4/7]   [xUnit.net 00:00:00.7203468]     RegisterAddresses_IPv6_Success [SKIP]\r\n[17:46:15] :\t [Step 4/7]   Skipped  RegisterAddresses_IPv6_Success\r\n[17:46:15] :\t [Step 4/7]   [xUnit.net 00:00:01.2412585]     ConnectionCountingReturnsToZero [SKIP]\r\n[17:46:15] :\t [Step 4/7]   Skipped  ConnectionCountingReturnsToZero\r\n[17:46:15] :\t [Step 4/7]   [xUnit.net 00:00:01.3837697]     CanListenToOpenTcpSocketHandle [SKIP]\r\n[17:46:15] :\t [Step 4/7]   Skipped  CanListenToOpenTcpSocketHandle\r\n[17:46:16] :\t [Step 4/7]   [xUnit.net 00:00:02.0159475]     RegisterAddresses_IPv4Port80_Success(addressInput: \"http://*\", testUrl: \"http://127.0.0.1\") [SKIP]\r\n[17:46:16] :\t [Step 4/7]   [xUnit.net 00:00:02.0164664]     RegisterAddresses_IPv4Port80_Success(addressInput: \"http://127.0.0.1\", testUrl: \"http://127.0.0.1\") [SKIP]\r\n[17:46:16] :\t [Step 4/7]   [xUnit.net 00:00:02.0178708]     RegisterAddresses_IPv4Port80_Success(addressInput: \"http://localhost\", testUrl: \"http://127.0.0.1\") [SKIP]\r\n[17:46:16] :\t [Step 4/7]   Skipped  RegisterAddresses_IPv4Port80_Success(addressInput: \"http://*\", testUrl: \"http://127.0.0.1\")\r\n[17:46:16] :\t [Step 4/7]   Skipped  RegisterAddresses_IPv4Port80_Success(addressInput: \"http://127.0.0.1\", testUrl: \"http://127.0.0.1\")\r\n[17:46:16] :\t [Step 4/7]   Skipped  RegisterAddresses_IPv4Port80_Success(addressInput: \"http://localhost\", testUrl: \"http://127.0.0.1\")\r\n[17:46:16] :\t [Step 4/7]   [xUnit.net 00:00:02.2575826]     ConnectionClosedEvenIfAppSwallowsException [SKIP]\r\n[17:46:16] :\t [Step 4/7]   Skipped  ConnectionClosedEvenIfAppSwallowsException\r\n[17:46:18] :\t [Step 4/7]   [xUnit.net 00:00:03.6803851]     RegisterAddresses_IPv6Port80_Success(addressInput: \"http://localhost\", testUrls: [\"http://127.0.0.1/\", \"http://[::1]/\"]) [SKIP]\r\n[17:46:18] :\t [Step 4/7]   [xUnit.net 00:00:03.6808460]     RegisterAddresses_IPv6Port80_Success(addressInput: \"http://*\", testUrls: [\"http://[::1]/\"]) [SKIP]\r\n[17:46:18] :\t [Step 4/7]   [xUnit.net 00:00:03.6812519]     RegisterAddresses_IPv6Port80_Success(addressInput: \"http://[::1]\", testUrls: [\"http://[::1]/\"]) [SKIP]\r\n[17:46:18] :\t [Step 4/7]   Skipped  RegisterAddresses_IPv6Port80_Success(addressInput: \"http://localhost\", testUrls: [\"http://127.0.0.1/\", \"http://[::1]/\"])\r\n[17:46:18] :\t [Step 4/7]   Skipped  RegisterAddresses_IPv6Port80_Success(addressInput: \"http://*\", testUrls: [\"http://[::1]/\"])\r\n[17:46:18] :\t [Step 4/7]   Skipped  RegisterAddresses_IPv6Port80_Success(addressInput: \"http://[::1]\", testUrls: [\"http://[::1]/\"])\r\n[18:39:33]E:\t [Step 4/7] The build Projects::KestrelHttpServer #17674 {buildId=449083} has been running for more than 60 minutes. Terminating...\r\n```\r\nhttp://aspnetci/viewLog.html?buildId=449083&buildTypeId=Lite_KestrelHttpServer&tab=buildLog&_focus=39538\r\n\r\n```\r\n[14:35:15] :\t [Step 4/7]   Starting test group: Libuv.FunctionalTests/netcoreapp2.1\r\n[14:35:15] :\t [Step 4/7] Microsoft (R) Test Execution Command Line Tool Version 15.7.0-preview-20180221-13\r\n[14:35:15] :\t [Step 4/7] Copyright (c) Microsoft Corporation.  All rights reserved.\r\n[14:35:15] :\t [Step 4/7] \r\n[14:35:15] :\t [Step 4/7] Starting test execution, please wait...\r\n[14:35:15] :\t [Step 4/7] Logging Vstest Diagnostics in file: D:\\b\\w\\1e8cd6334ef22651\\artifacts\\logs\\Libuv.FunctionalTests-netcoreapp2.1-17658.diag\r\n[14:35:17] :\t [Step 4/7] [xUnit.net 00:00:00.9797507]     CanListenToOpenTcpSocketHandle [SKIP]\r\n[14:35:17] :\t [Step 4/7] Skipped  CanListenToOpenTcpSocketHandle\r\n[14:35:17] :\t [Step 4/7] [xUnit.net 00:00:01.1545963]     ConnectionClosedEvenIfAppSwallowsException [SKIP]\r\n[14:35:17] :\t [Step 4/7] Skipped  ConnectionClosedEvenIfAppSwallowsException\r\n[14:35:18] :\t [Step 4/7] [xUnit.net 00:00:01.9128535]     ConnectionCountingReturnsToZero [SKIP]\r\n[14:35:18] :\t [Step 4/7] Skipped  ConnectionCountingReturnsToZero\r\n[14:35:19] :\t [Step 4/7] [xUnit.net 00:00:03.0442866]     RegisterAddresses_IPv6Port80_Success(addressInput: \"http://[::1]\", testUrls: [\"http://[::1]/\"]) [SKIP]\r\n[14:35:19] :\t [Step 4/7] [xUnit.net 00:00:03.0448370]     RegisterAddresses_IPv6Port80_Success(addressInput: \"http://*\", testUrls: [\"http://[::1]/\"]) [SKIP]\r\n[14:35:19] :\t [Step 4/7] Skipped  RegisterAddresses_IPv6Port80_Success(addressInput: \"http://[::1]\", testUrls: [\"http://[::1]/\"])\r\n[14:35:19] :\t [Step 4/7] Skipped  RegisterAddresses_IPv6Port80_Success(addressInput: \"http://*\", testUrls: [\"http://[::1]/\"])\r\n[14:35:19] :\t [Step 4/7] [xUnit.net 00:00:03.0461888]     RegisterAddresses_IPv6Port80_Success(addressInput: \"http://localhost\", testUrls: [\"http://127.0.0.1/\", \"http://[::1]/\"]) [SKIP]\r\n[14:35:19] :\t [Step 4/7] Skipped  RegisterAddresses_IPv6Port80_Success(addressInput: \"http://localhost\", testUrls: [\"http://127.0.0.1/\", \"http://[::1]/\"])\r\n[14:35:19] :\t [Step 4/7] [xUnit.net 00:00:03.0852291]     RegisterAddresses_IPv4Port80_Success(addressInput: \"http://127.0.0.1\", testUrl: \"http://127.0.0.1\") [SKIP]\r\n[14:35:19] :\t [Step 4/7] [xUnit.net 00:00:03.0856344]     RegisterAddresses_IPv4Port80_Success(addressInput: \"http://*\", testUrl: \"http://127.0.0.1\") [SKIP]\r\n[14:35:19] :\t [Step 4/7] [xUnit.net 00:00:03.0858760]     RegisterAddresses_IPv4Port80_Success(addressInput: \"http://localhost\", testUrl: \"http://127.0.0.1\") [SKIP]\r\n[14:35:19] :\t [Step 4/7] Skipped  RegisterAddresses_IPv4Port80_Success(addressInput: \"http://127.0.0.1\", testUrl: \"http://127.0.0.1\")\r\n[14:35:19] :\t [Step 4/7] Skipped  RegisterAddresses_IPv4Port80_Success(addressInput: \"http://*\", testUrl: \"http://127.0.0.1\")\r\n[14:35:19] :\t [Step 4/7] Skipped  RegisterAddresses_IPv4Port80_Success(addressInput: \"http://localhost\", testUrl: \"http://127.0.0.1\")\r\n[14:35:20] :\t [Step 4/7] [xUnit.net 00:00:03.6085756]     RegisterAddresses_IPv6_Success [SKIP]\r\n[14:35:20] :\t [Step 4/7] Skipped  RegisterAddresses_IPv6_Success\r\n[15:28:52]E:\t [Step 4/7] The build Projects::KestrelHttpServer #17658 {buildId=445522} has been running for more than 60 minutes. Terminating...\r\n[15:28:52]E:\t [Step 4/7] Execution timeout\r\n```\r\nhttp://aspnetci/viewLog.html?buildId=445522&buildTypeId=Lite_KestrelHttpServer&tab=buildLog\r\n\r\n# Win2012-Kestrel\r\n```\r\n[23:37:09] :     [Step 8/9]   Skipped  RegisterAddresses_IPv6Port80_Success(addressInput: \"http://localhost\", testUrls: [\"http://127.0.0.1/\", \"http://[::1]/\"])\r\n[23:37:09] :     [Step 8/9]   Skipped  RegisterAddresses_IPv6Port80_Success(addressInput: \"http://[::1]\", testUrls: [\"http://[::1]/\"])\r\n[00:50:45]E:     [Step 8/9] The build Test::Win2012-Kestrel #2.2.0-preview1-34007 {buildId=449994} has been running for more than 120 minutes. Terminating...\r\n[00:50:45]E:     [Step 8/9] Execution timeout\r\n```\r\nhttp://aspnetci/viewLog.html?buildId=449994&tab=buildLog&buildTypeId=Lite_KestrelStressTest&logTab=tail"},{"Id":"7581838877","Type":"IssuesEvent","CreatedAt":"2018-04-25T00:25:48","Actor":"mikeharder","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/issues/2509","RelatedDescription":"Closed issue \"Investigate xUnit \"non-serializable data\" warnings\" (#2509) at aspnet/KestrelHttpServer","RelatedBody":"Kestrel tests have hundrends of this scary-looking warning from xunit:\r\n\r\n```\r\n[12:02:22] : [Step 4/7]   [xUnit.net 00:00:00.3409135] Microsoft.AspNetCore.Server.Kestrel.Transport.Libuv.Tests: Non-serializable data\r\n('System.Object[]') found for 'Microsoft.AspNetCore.Server.Kestrel.Transport.Libuv.Tests.LibuvTransportTests.TransportCanBindUnbindAndStop';\r\nfalling back to single test case.\r\n```\r\n\r\nhttp://aspnetci/viewLog.html?buildId=451476&tab=buildLog&buildTypeId=Lite_KestrelHttpServer&logTab=tree&filter=all&_focus=847#_state=350\r\n\r\nThey started when xUnit diagnostics messages were enabled (https://github.com/aspnet/KestrelHttpServer/pull/2505).  We should investigate what's causing these warnings, what is their implication (does it mean less tests are run than expected), and how to fix them."}],"ResultType":"GitHubEvent"},"Razor":{"Events":[{"Id":"7588013529","Type":"IssuesEvent","CreatedAt":"2018-04-25T23:06:11","Actor":"rynowak","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Razor/issues/2269","RelatedDescription":"Closed issue \"Attach ProjectEngine and TagHelpers to ProjectSnapshot\" (#2269) at aspnet/Razor","RelatedBody":"We need to create a Project Engine per `ProjectSnapshot` and also attach the collection of tag helpers to the project snapshot.\r\n\r\nThese needs to respond to updates and changes in configuration appropriately.\r\n\r\nWe should move the creation of the project engine out of the parser and into the project snapshots themselves."},{"Id":"7588012749","Type":"PullRequestEvent","CreatedAt":"2018-04-25T23:05:55","Actor":"rynowak","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/Razor/pull/2304","RelatedDescription":"Merged pull request \"Add documents, engine, tag helpers to snapshot\" (#2304) at aspnet/Razor","RelatedBody":"The project snapshot now maintains a RazorProjectEngine as well as set\r\nof Tag Helpers that are known for that snapshot.\r\n\r\nPivoted some more services to be snapshot-centric.\r\n\r\nAlso added the ability to track .cshtml documents to the project system.\r\nFor now most components just ignore document changes."},{"Id":"7587769679","Type":"IssuesEvent","CreatedAt":"2018-04-25T21:58:48","Actor":"pranavkm","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Razor/issues/2308","RelatedDescription":"Opened issue \"[Razor Sdk]: Consider not setting PreserveCompilationContext in class library projects\" (#2308) at aspnet/Razor","RelatedBody":"Related issue: https://github.com/dotnet/cli/issues/9135. We set PreserveCompilationContext=true for all project types in the Razor.Sdk. This results in an `refs` directory to be created in the build output directory which is undesirable. We should consider setting PreserveCompilationContext=true only if the app's an executable. "},{"Id":"7586830062","Type":"PullRequestEvent","CreatedAt":"2018-04-25T18:47:58","Actor":"pranavkm","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Razor/pull/2307","RelatedDescription":"Opened pull request \"Make incremental build in VS copy output files\" (#2307) at aspnet/Razor","RelatedBody":"Fixes #2306"},{"Id":"7586800278","Type":"IssuesEvent","CreatedAt":"2018-04-25T18:42:10","Actor":"pranavkm","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Razor/issues/2306","RelatedDescription":"Opened issue \"Incremental builds in VS does not copy Views dll from referencing class library project \" (#2306) at aspnet/Razor","RelatedBody":"Steps:\r\n\r\n1. Create a solution containing a WebApp that references a Razor Class Library project.\r\n2. Build the solution\r\n3. Verify that the ClassLibrary Views dll and pdb are copied to the WebApp's output directory\r\n4. Clean the WebApp\r\n5. Build it.\r\n\r\nExpected:\r\nViews dll exists in the build output dir of WebApp\r\n\r\nActual:\r\nNo view dll found in the build output dir"}],"ResultType":"GitHubEvent"},"Templates":{"Events":[],"ResultType":"GitHubEvent"},"Tooling":{"Events":[{"Id":"7582805417","Type":"IssuesEvent","CreatedAt":"2018-04-25T06:34:01","Actor":"TheAlphamerc","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Tooling/issues/1071","RelatedDescription":"Opened issue \" Unable to start debugging\" (#1071) at aspnet/Tooling","RelatedBody":"The project is success fully build but unable to start debugger. See [here][2018-04-25_11-20-19.7244.Ide.log](https://github.com/aspnet/Tooling/files/1945717/2018-04-25_11-20-19.7244.Ide.log) for more details. \r\n\r\n\r\n\r\n\r\n"},{"Id":"7576035394","Type":"IssuesEvent","CreatedAt":"2018-04-24T05:17:55","Actor":"barrytang","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Tooling/issues/1070","RelatedDescription":"Closed issue \"Visual studio freezes when I run add-migration \" (#1070) at aspnet/Tooling","RelatedBody":"I have enabled migrations and added migrations within my project previously. However now when I run add-migration visual studio freezes and I need to close visual studio via the task manger."},{"Id":"7567897452","Type":"IssuesEvent","CreatedAt":"2018-04-22T14:52:17","Actor":"rberger247","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Tooling/issues/1070","RelatedDescription":"Opened issue \"Visual studio freezes when I run add-migration \" (#1070) at aspnet/Tooling","RelatedBody":"I have enabled migrations and added migrations within my project previously. However now when I run add-migration visual studio freezes and I need to close visual studio via the task manger."},{"Id":"7439234583","Type":"IssuesEvent","CreatedAt":"2018-03-27T05:23:09","Actor":"barrytang","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Tooling/issues/1069","RelatedDescription":"Closed issue \"EntityFramework migrations not available to be applied during publish\" (#1069) at aspnet/Tooling","RelatedBody":"Workaround does not work for me. Apply migration missing in any case. after rebuilt, reload, restart etc"},{"Id":"7438189808","Type":"IssuesEvent","CreatedAt":"2018-03-26T23:00:08","Actor":"dvdobrovolskiy","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Tooling/issues/1069","RelatedDescription":"Opened issue \"EntityFramework migrations not available to be applied during publish\" (#1069) at aspnet/Tooling","RelatedBody":"Workaround does not work for me. Apply migration missing in any case. after rebuilt, reload, restart etc"},{"Id":"7416019717","Type":"IssuesEvent","CreatedAt":"2018-03-21T22:57:29","Actor":"snebjorn","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Tooling/issues/823","RelatedDescription":"Closed issue \"Make tooling support splitting asp.net and bootstrapping in different projects (onion architecture)\" (#823) at aspnet/Tooling","RelatedBody":"I'd like to see better tooling support for a more onion architecture like solution structure.\n\nFor instance\n- Solution\n  - Core (business logic, domain model, etc)\n  - Infrastructure.EntityFramework (DAL)\n  - Presentation.ASPNET (MVC or WebApi)\n  - Bootstrapper (Program.cs and Startup.cs)\n\nSo basically I just moved Program.cs and Startup.cs to another project. This is important because according to the onion architecture Presentation.ASPNET should not have references to Entity Framework.\n\nIf I do this today I loose the \"IIS Express\" run button and I cannot publish via wed deploy in the way I'm used to. Plus a ton of other issues.\n\nWould be sweet if there was better support for this setup :)\n"},{"Id":"7381313128","Type":"IssuesEvent","CreatedAt":"2018-03-14T22:19:23","Actor":"AngelosP","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Tooling/issues/240","RelatedDescription":"Closed issue \"Support debugging of JS executed with EdgeJS in VS\" (#240) at aspnet/Tooling","RelatedBody":"We would like to do the server side HTML rendering with ReactJS in our ASP.NET application. This works with EdgeJS, but there is currently no way to debug the JS code in VS. \n\nIt would be nice if this would work and we wouldn't need node-inspector for this.\n\nhttps://github.com/tjanczuk/edge/issues/316\n"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"989160632908791808","CreatedAt":"2018-04-25T15:14:07+00:00","UserScreenname":"aspnet","Text":"Do you have questions about how to work with ASPNet Core Identity?  Check out the video from yesterday's session wi… https://t.co/hjaoJRCR7l","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":40,"FavoriteCount":9,"RawContent":null},{"Id":"988913487190544384","CreatedAt":"2018-04-24T22:52:03+00:00","UserScreenname":"aspnet","Text":"We're live on the #ASPNET Community Standup! Join us! https://t.co/4Ioo9jNSN2","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":10,"FavoriteCount":4,"RawContent":null},{"Id":"988873497614024704","CreatedAt":"2018-04-24T20:13:08+00:00","UserScreenname":"aspnet","Text":"Join us for the weekly #ASPNET Community Standup today at 3:45 PM Pacific / 23:45 GMT at https://t.co/4Ioo9jNSN2 https://t.co/dCyzj19KZU","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":10,"FavoriteCount":4,"RawContent":null},{"Id":"988762250331676673","CreatedAt":"2018-04-24T12:51:05+00:00","UserScreenname":"aspnet","Text":"Our @csharpfritz and @coolcsh will be broadcasting LIVE from @ch9 studios and answering your questions today about… https://t.co/d37Sob12rv","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":25,"FavoriteCount":10,"RawContent":null},{"Id":"986683993180590080","CreatedAt":"2018-04-18T19:12:50+00:00","UserScreenname":"aspnet","Text":"Tune in to the @PhillyDotNet user group today at 6pm ET / 3pm PT to learn more about Blazor from our MVP Chris Gome… https://t.co/D6svQPb95X","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":7,"FavoriteCount":2,"RawContent":null},{"Id":"986310111256858624","CreatedAt":"2018-04-17T18:27:09+00:00","UserScreenname":"aspnet","Text":"Blazor 0.2.0 release now available https://t.co/rFE8xvlvM3","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":249,"FavoriteCount":148,"RawContent":null},{"Id":"983838325457829890","CreatedAt":"2018-04-10T22:45:10+00:00","UserScreenname":"aspnet","Text":"We're live on the #ASPNET Community Standup! Join us! https://t.co/4Ioo9jNSN2","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":20,"FavoriteCount":6,"RawContent":null},{"Id":"983802600398049285","CreatedAt":"2018-04-10T20:23:12+00:00","UserScreenname":"aspnet","Text":"Join us for the weekly #ASPNET Community Standup today at 3:45 PM Pacific / 23:45 GMT at https://t.co/4Ioo9jNSN2 https://t.co/441EI8rRQL","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":11,"FavoriteCount":10,"RawContent":null},{"Id":"981890668095332353","CreatedAt":"2018-04-05T13:45:52+00:00","UserScreenname":"aspnet","Text":"Tune in to @csharpfritz live stream today to learn more about getting started with #ASP.NET Core. https://t.co/mkwxUOObrd","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":14,"FavoriteCount":7,"RawContent":null},{"Id":"981214732198674433","CreatedAt":"2018-04-03T16:59:56+00:00","UserScreenname":"aspnet","Text":"Starting now!\n\n#ASPNET Community Standup\n\nBlazor Update with @danroth27 and @stevensanderson… https://t.co/Tukk2JSsvC","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":43,"FavoriteCount":16,"RawContent":null},{"Id":"981205689891803136","CreatedAt":"2018-04-03T16:24:01+00:00","UserScreenname":"aspnet","Text":"Join our @csharpfritz for some #ASP.NET Core coding today, and ask questions during his live coding stream at 12:30… https://t.co/PCKhYbjIMP","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":18,"FavoriteCount":9,"RawContent":null},{"Id":"980945681794809856","CreatedAt":"2018-04-02T23:10:50+00:00","UserScreenname":"aspnet","Text":"Tuesday at 10 Pacific / 18 GMT - #ASPNET Community Standup\n\nBlazor Update with @danroth27 and @stevensanderson… https://t.co/lCnzHFb8x9","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":97,"FavoriteCount":55,"RawContent":null},{"Id":"979863409561812993","CreatedAt":"2018-03-30T23:30:16+00:00","UserScreenname":"aspnet","Text":"We just released some minor bug fixes to jquery-ajax-unobtrusive and jquery-validation-unobtrusive:… https://t.co/9P5vskn1i8","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":26,"FavoriteCount":13,"RawContent":null},{"Id":"978766397814710272","CreatedAt":"2018-03-27T22:51:08+00:00","UserScreenname":"aspnet","Text":"We're live on the #ASPNET Community Standup! Join us! https://t.co/4Ioo9jNSN2","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":12,"FavoriteCount":7,"RawContent":null},{"Id":"978605317293576193","CreatedAt":"2018-03-27T12:11:03+00:00","UserScreenname":"aspnet","Text":"This will be a fun show that you won't want to miss if you're starting to lean #ASP.NET Core.  Jeff and Shayne are… https://t.co/MdzhQjXGY3","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":47,"FavoriteCount":12,"RawContent":null},{"Id":"978387927041323008","CreatedAt":"2018-03-26T21:47:14+00:00","UserScreenname":"aspnet","Text":"Join us for the weekly #ASPNET Community Standup this Tuesday at 3:45 PM Pacific / 23:45 GMT at https://t.co/4Ioo9jNSN2","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":9,"FavoriteCount":10,"RawContent":null}]}},"RunOn":"2018-04-26T05:30:18.913581Z","RunDurationInMilliseconds":13481}